import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (6, 15))#candidate|0|(6, 15)|var|float32
var_1 = relay.var("var_1", dtype = "float32", shape = (6, 15))#candidate|1|(6, 15)|var|float32
bop_2 = relay.divide(var_0.astype('float32'), relay.reshape(var_1.astype('float32'), relay.shape_of(var_0))) # shape=(6, 15)
uop_5 = relay.cosh(var_0.astype('float64')) # shape=(6, 15)
output = relay.Tuple([bop_2,uop_5,])
output2 = relay.Tuple([bop_2,uop_5,])
func_7 = relay.Function([var_0,var_1,], output)
mod['func_7'] = func_7
mod = relay.transform.InferType()(mod)
mutated_mod['func_7'] = func_7
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7_call = mutated_mod.get_global_var('func_7')
var_9 = relay.var("var_9", dtype = "float32", shape = (6, 15))#candidate|9|(6, 15)|var|float32
var_10 = relay.var("var_10", dtype = "float32", shape = (6, 15))#candidate|10|(6, 15)|var|float32
call_8 = func_7_call(var_9,var_10,)
output = call_8
func_11 = relay.Function([var_9,var_10,], output)
mutated_mod['func_11'] = func_11
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13 = relay.var("var_13", dtype = "float32", shape = (9, 1, 1))#candidate|13|(9, 1, 1)|var|float32
var_14 = relay.var("var_14", dtype = "float32", shape = (9, 3, 10))#candidate|14|(9, 3, 10)|var|float32
bop_15 = relay.divide(var_13.astype('float32'), var_14.astype('float32')) # shape=(9, 3, 10)
uop_18 = relay.rsqrt(var_14.astype('float32')) # shape=(9, 3, 10)
output = relay.Tuple([bop_15,uop_18,])
output2 = relay.Tuple([bop_15,uop_18,])
func_20 = relay.Function([var_13,var_14,], output)
mod['func_20'] = func_20
mod = relay.transform.InferType()(mod)
mutated_mod['func_20'] = func_20
mutated_mod = relay.transform.InferType()(mutated_mod)
func_20_call = mutated_mod.get_global_var('func_20')
var_22 = relay.var("var_22", dtype = "float32", shape = (9, 1, 1))#candidate|22|(9, 1, 1)|var|float32
var_23 = relay.var("var_23", dtype = "float32", shape = (9, 3, 10))#candidate|23|(9, 3, 10)|var|float32
call_21 = func_20_call(var_22,var_23,)
output = call_21
func_24 = relay.Function([var_22,var_23,], output)
mutated_mod['func_24'] = func_24
mutated_mod = relay.transform.InferType()(mutated_mod)
const_26 = relay.const(-5.022872, dtype = "float32")#candidate|26|()|const|float32
uop_27 = relay.erf(const_26.astype('float32')) # shape=()
uop_29 = relay.sigmoid(uop_27.astype('float32')) # shape=()
bop_31 = relay.less_equal(uop_27.astype('bool'), uop_29.astype('bool')) # shape=()
uop_34 = relay.log2(const_26.astype('float32')) # shape=()
uop_36 = relay.atanh(uop_29.astype('float64')) # shape=()
bop_38 = relay.add(uop_36.astype('int8'), const_26.astype('int8')) # shape=()
bop_41 = relay.right_shift(bop_38.astype('int64'), uop_34.astype('int64')) # shape=()
bop_44 = relay.multiply(uop_29.astype('uint32'), uop_34.astype('uint32')) # shape=()
uop_47 = relay.exp(bop_41.astype('float64')) # shape=()
output = relay.Tuple([bop_31,bop_44,uop_47,])
output2 = relay.Tuple([bop_31,bop_44,uop_47,])
func_49 = relay.Function([], output)
mod['func_49'] = func_49
mod = relay.transform.InferType()(mod)
mutated_mod['func_49'] = func_49
mutated_mod = relay.transform.InferType()(mutated_mod)
func_49_call = mutated_mod.get_global_var('func_49')
call_50 = func_49_call()
output = call_50
func_51 = relay.Function([], output)
mutated_mod['func_51'] = func_51
mutated_mod = relay.transform.InferType()(mutated_mod)
var_52 = relay.var("var_52", dtype = "float32", shape = (7, 16, 1))#candidate|52|(7, 16, 1)|var|float32
const_53 = relay.const([[[4.792767,-4.816776,2.701358],[6.074945,-1.636623,-1.182231],[4.742977,-9.621105,5.639192],[1.750720,0.662485,4.027221],[-3.156656,5.910961,-1.529495],[3.147812,-6.673029,-0.726393],[-4.818943,0.714848,-4.525112],[-3.633308,5.413456,6.309750],[-1.084170,6.293976,-6.600860],[-6.598049,-3.969338,-5.580887],[5.716046,2.434924,8.013503],[5.785360,6.072346,0.353614],[-2.179363,3.740185,-7.735875],[-8.438814,1.707142,-1.045476],[-2.638336,-6.441885,-0.384999],[-7.081336,8.327083,-9.037890]],[[3.779772,-3.364022,-6.317626],[-1.791700,-4.763414,-9.997663],[-1.192561,3.271574,-8.621389],[2.885938,-9.395991,-5.165736],[9.238758,-0.213688,-7.521911],[5.622520,4.278025,-6.665389],[5.936958,-6.825235,-5.359544],[-9.944141,-0.718542,-3.476477],[1.858879,8.136935,3.175671],[5.479933,-3.760542,0.348799],[-0.385130,9.330724,2.385050],[5.506608,-1.861733,-4.973942],[-8.053509,-4.733000,-2.964744],[0.804126,-3.664963,7.099697],[-6.828449,-8.071957,6.165075],[2.579528,4.800619,4.929643]],[[-4.297202,2.236075,-6.847971],[2.385975,3.157628,5.246396],[-9.258928,3.825381,-2.485822],[9.830719,2.414473,3.818868],[9.442628,-6.031814,8.211136],[0.088035,-7.782798,0.711210],[-6.016035,7.775987,-6.432488],[3.538945,-3.728303,5.359309],[-0.900174,0.919563,6.727511],[-7.976761,-3.961710,2.444492],[-5.367658,5.960105,0.139407],[3.628573,-9.158763,3.403676],[-1.262474,8.233934,-7.479036],[8.067214,4.594018,-6.077066],[2.517262,-6.034016,-9.297747],[-6.340460,-0.658173,6.137452]],[[-4.586205,-7.846428,-4.067831],[7.977720,-8.881058,1.233189],[5.342542,4.246682,4.799315],[8.498910,-2.271086,-2.395303],[1.868292,0.498891,1.836235],[-2.053308,-5.101546,-7.623088],[-2.502012,3.395809,-4.346370],[6.313977,5.826733,7.454785],[3.243987,0.806896,-2.055478],[-9.067525,-7.135574,0.490260],[-0.327079,4.231461,-2.477255],[3.319934,3.032261,-5.565166],[0.294105,-1.715699,-1.811928],[-8.183683,-8.006766,-2.361166],[5.025825,3.339659,-4.068345],[7.780607,-8.206893,2.953352]],[[-4.570839,8.234651,4.642808],[-1.506528,-2.697643,9.087024],[-2.719733,-1.915314,-6.343114],[8.941226,1.380196,9.010682],[6.680558,-8.683841,-2.429995],[4.843977,6.859859,-2.150189],[-1.405137,9.604000,9.099320],[5.653659,-1.833999,5.358939],[-0.074804,2.902991,0.334505],[-5.458255,4.102159,-1.596765],[-1.543160,4.360694,-9.563559],[0.116754,-8.459821,7.653071],[0.865540,6.745960,-2.818036],[-1.305413,9.094352,-2.511688],[1.068043,7.126419,-9.759643],[-3.812347,4.971929,-1.174772]],[[2.635937,-2.275151,-8.613514],[-7.941658,5.871602,-1.147868],[-5.800406,-2.288922,-7.263663],[-8.688013,1.934632,-0.872788],[4.412175,5.429176,-2.661085],[-4.680954,5.284619,2.424953],[1.852405,1.449587,0.835746],[-6.227211,7.913127,5.456959],[-5.592570,7.881215,-1.110752],[5.298358,-5.998275,-1.501508],[-5.192089,-4.359895,-3.375191],[1.191834,9.396109,-4.664844],[-8.616555,-6.716867,1.983220],[6.064529,3.619385,-1.572518],[6.112478,7.693503,-9.043349],[-1.791184,5.120069,-1.129446]],[[4.215936,9.429000,-3.102136],[3.228285,-8.670755,-1.585485],[-8.840290,5.188853,-0.751593],[4.001345,9.261570,5.614134],[-5.440444,-1.861289,3.279122],[2.373827,2.401998,0.887190],[-5.145078,-4.168473,3.165590],[3.634216,5.077137,9.805291],[-8.667488,9.375214,-3.210280],[4.775683,-5.593144,-7.947387],[-8.655021,-9.054134,-5.604799],[7.561008,4.844105,8.978859],[4.406880,-7.161062,-7.580011],[-8.502079,-4.204723,-1.578278],[3.966406,6.214735,-0.930015],[9.765766,-7.604255,-7.175983]]], dtype = "float32")#candidate|53|(7, 16, 3)|const|float32
bop_54 = relay.floor_divide(var_52.astype('float32'), const_53.astype('float32')) # shape=(7, 16, 3)
output = bop_54
output2 = bop_54
func_57 = relay.Function([var_52,], output)
mod['func_57'] = func_57
mod = relay.transform.InferType()(mod)
mutated_mod['func_57'] = func_57
mutated_mod = relay.transform.InferType()(mutated_mod)
var_58 = relay.var("var_58", dtype = "float32", shape = (7, 16, 1))#candidate|58|(7, 16, 1)|var|float32
func_57_call = mutated_mod.get_global_var('func_57')
call_59 = func_57_call(var_58)
output = call_59
func_60 = relay.Function([var_58], output)
mutated_mod['func_60'] = func_60
mutated_mod = relay.transform.InferType()(mutated_mod)
var_62 = relay.var("var_62", dtype = "bool", shape = ())#candidate|62|()|var|bool
var_63 = relay.var("var_63", dtype = "bool", shape = (6, 15, 9))#candidate|63|(6, 15, 9)|var|bool
bop_64 = relay.logical_or(var_62.astype('bool'), var_63.astype('bool')) # shape=(6, 15, 9)
uop_67 = relay.sqrt(bop_64.astype('float64')) # shape=(6, 15, 9)
uop_69 = relay.acosh(uop_67.astype('float64')) # shape=(6, 15, 9)
uop_71 = relay.cosh(uop_67.astype('float32')) # shape=(6, 15, 9)
var_73 = relay.var("var_73", dtype = "float32", shape = (6, 15, 9))#candidate|73|(6, 15, 9)|var|float32
bop_74 = relay.multiply(uop_71.astype('int8'), relay.reshape(var_73.astype('int8'), relay.shape_of(uop_71))) # shape=(6, 15, 9)
uop_77 = relay.exp(uop_71.astype('float32')) # shape=(6, 15, 9)
uop_79 = relay.sin(uop_69.astype('float64')) # shape=(6, 15, 9)
uop_81 = relay.cosh(uop_79.astype('float32')) # shape=(6, 15, 9)
bop_83 = relay.left_shift(uop_77.astype('int16'), var_62.astype('int16')) # shape=(6, 15, 9)
uop_86 = relay.sqrt(uop_81.astype('float64')) # shape=(6, 15, 9)
uop_88 = relay.rsqrt(uop_86.astype('float32')) # shape=(6, 15, 9)
uop_90 = relay.acos(uop_77.astype('float64')) # shape=(6, 15, 9)
bop_92 = relay.right_shift(bop_83.astype('int8'), relay.reshape(var_73.astype('int8'), relay.shape_of(bop_83))) # shape=(6, 15, 9)
bop_95 = relay.add(uop_90.astype('int8'), relay.reshape(uop_67.astype('int8'), relay.shape_of(uop_90))) # shape=(6, 15, 9)
bop_98 = relay.floor_mod(uop_88.astype('float32'), relay.reshape(bop_74.astype('float32'), relay.shape_of(uop_88))) # shape=(6, 15, 9)
uop_101 = relay.sinh(uop_79.astype('float32')) # shape=(6, 15, 9)
bop_103 = relay.multiply(bop_98.astype('uint8'), relay.reshape(uop_79.astype('uint8'), relay.shape_of(bop_98))) # shape=(6, 15, 9)
bop_106 = relay.subtract(uop_88.astype('uint64'), relay.reshape(bop_95.astype('uint64'), relay.shape_of(uop_88))) # shape=(6, 15, 9)
uop_109 = relay.log10(uop_86.astype('float32')) # shape=(6, 15, 9)
bop_111 = relay.logical_xor(bop_103.astype('uint8'), relay.reshape(bop_83.astype('uint8'), relay.shape_of(bop_103))) # shape=(6, 15, 9)
const_114 = relay.const([[[-8.834896,-4.815524,-6.586366,8.682810,3.803091,8.849834,5.936340,-1.148615,-4.084277],[-4.933354,9.199138,2.580384,-1.547670,4.734009,7.022465,-6.523639,-8.249892,-0.854492],[8.276237,-6.636419,4.589859,-8.970746,-7.673635,-2.713018,-7.595910,5.552632,4.357807],[3.974831,5.188722,-0.287935,-1.654547,-8.654401,4.972116,5.759275,-1.751164,2.322797],[-3.194440,-8.948349,-3.669884,4.004316,6.296406,-5.612842,7.173604,9.248929,-5.581891],[2.023889,-0.042947,-4.924288,-2.895716,-3.494655,3.081589,1.571053,7.773199,-9.121126],[-3.404581,-7.159885,-8.015581,-6.925811,1.211664,-9.295434,6.731780,-1.203758,4.965410],[5.921787,-0.296707,1.322918,0.648512,4.489782,-6.673491,-1.809048,-6.434461,9.444898],[-2.055398,-6.332256,1.111092,2.427736,1.358197,-6.137906,-9.207926,-1.906630,4.752686],[2.884530,-1.574070,6.950033,-3.639310,6.861829,-3.328192,-5.545468,9.669328,-1.884588],[4.528609,0.603590,5.115192,-6.567720,-6.243638,9.658437,-7.901882,-0.926971,5.820782],[6.420927,-3.363906,-7.263705,4.658538,1.553090,-3.049886,5.251766,8.466582,-7.905420],[-0.418391,3.714644,2.674644,-5.077369,9.101640,7.391432,-5.249462,-0.336131,4.657061],[-8.292754,1.225743,0.664279,9.566494,-1.262985,-7.029097,-3.703947,0.621749,2.110366],[-8.600060,-7.108511,-4.906461,-6.356186,-9.350978,3.786638,-3.012834,4.321029,9.644995]],[[3.989690,0.624233,-8.483769,-7.189360,9.103036,-1.357476,-1.829008,-3.341204,-2.172776],[-0.568949,-2.008911,6.686493,8.093814,6.547613,-0.817054,7.118483,4.385637,1.693120],[-0.883195,-6.533740,9.781499,-8.627132,6.485236,-9.880473,-8.488655,6.792112,3.474240],[-4.864377,-3.537769,8.217825,2.454268,-0.813751,-4.642479,-2.654410,6.649800,-1.144678],[9.249626,-3.622577,7.407291,-0.411332,-7.964359,-7.180026,-2.296473,-0.817879,-2.462112],[9.004055,-6.715845,0.848963,0.556979,-9.591271,-5.274188,9.092371,3.964512,3.407047],[-9.070200,-8.838406,5.653136,0.422743,-2.595334,-7.079492,3.616978,-6.516985,3.543038],[-4.306832,9.955782,9.440621,0.948229,1.798165,-2.398796,-2.485809,-8.494985,4.831008],[6.284883,7.581008,-5.188184,7.290384,-3.930004,-7.629850,9.668050,-7.160286,1.183576],[-4.328343,8.261884,1.262534,-4.461657,-1.212758,3.779794,-7.712932,-6.987077,-9.889050],[2.701650,7.428494,9.223967,4.973613,-2.822197,5.414261,7.818975,4.782006,4.338298],[0.855760,-7.366090,-9.570800,8.879324,-5.215928,-4.079443,8.671316,-9.654458,4.404606],[-1.736172,-5.345958,3.941619,-0.965571,-0.246820,4.465774,-3.389102,8.441052,-8.661712],[-0.738678,8.489862,-4.256023,6.938045,6.803658,-3.530604,7.840870,-9.574486,8.587552],[1.359716,-7.596100,7.183975,1.820874,-9.866623,-6.024409,-1.376103,2.342551,-9.955669]],[[-6.658197,8.222040,0.927279,-1.516510,-1.227959,3.859082,-6.742792,9.849564,-4.165647],[-1.630956,-5.842118,-7.897593,-2.919754,-9.396709,-9.308142,4.140451,-6.830582,2.849232],[-6.191691,1.081219,-2.332819,-7.720939,4.951792,3.942613,3.951299,-7.336486,4.706379],[-0.386995,1.262142,7.416391,6.094053,-0.964237,0.393230,-2.393299,-1.536680,-8.740638],[-9.459435,0.327076,-7.625722,8.903863,7.143453,8.077786,-1.066968,-6.509760,-1.662565],[-6.963320,-4.241699,-6.617229,-5.148164,6.278816,-2.772876,9.191162,-7.102643,-6.983821],[8.236254,-8.324412,0.355616,4.316161,-4.383111,-2.709017,0.294568,-0.890475,3.243219],[0.093963,4.922821,-4.478081,-7.203206,-4.587440,5.905772,1.886081,-1.829675,4.063122],[-0.679572,-7.626671,-0.565443,3.667019,8.937276,4.843608,-5.313482,-8.661396,4.324283],[5.598178,-6.098194,-0.040127,9.824560,-8.803412,-8.583475,9.552979,8.423056,9.516805],[-9.481395,8.632120,-7.049727,3.890446,-5.370052,2.348118,-0.765576,7.794200,-1.317741],[-8.125454,-0.083484,-9.152368,-5.821720,1.575346,2.017218,5.716677,1.947194,4.845868],[7.563114,1.326726,-6.241587,2.237688,3.449859,5.407113,9.168787,7.707516,-4.406415],[-2.530245,-8.299266,-0.686717,-8.699745,2.748990,1.434755,8.484536,2.404922,-7.091054],[2.810462,9.035739,-0.405666,8.602416,-1.781863,4.622110,-2.018297,-3.882512,2.840183]],[[-4.558474,-5.842487,-7.286899,-4.697920,3.903197,-4.433949,8.518104,9.304371,-3.261569],[2.804084,4.735916,8.812415,-1.211988,-5.730708,-6.026264,-3.574481,6.027537,-6.812905],[-2.872914,-7.348140,8.985595,7.750812,-5.304302,7.981865,-0.983561,-5.305198,-5.860414],[0.095816,4.059120,9.005886,3.530813,-0.145019,8.686231,-2.927079,7.026873,3.108060],[2.339005,7.509892,5.604109,2.550250,0.756998,-5.422418,2.486164,3.394040,3.027517],[-5.784002,-7.028022,-7.230651,2.870318,3.559639,4.271355,9.358344,1.193393,-1.906254],[0.568069,-1.045783,-7.762142,0.192986,-2.821790,-4.496756,8.186105,6.579881,-6.565588],[8.365676,-6.514044,-5.450129,4.682642,5.554633,9.020849,-5.095358,8.991662,9.531036],[0.538997,2.033893,5.959407,6.866969,-8.840823,-0.860012,-6.545710,-2.548082,-0.548987],[-5.298351,5.018576,-6.317698,-1.386263,1.268385,-0.919227,5.879301,2.956098,4.535971],[-6.997331,-1.282631,4.646987,0.750010,-1.130726,3.077714,1.174674,2.858893,5.980498],[6.954381,-6.416875,2.843614,0.265281,-5.110508,2.688646,-3.701421,-8.045823,-5.034615],[6.814732,-1.630594,7.298586,2.370576,5.268141,5.485111,-2.468308,-7.252588,-0.032156],[8.795435,-5.811441,-5.066174,-6.649773,-9.413380,9.018682,-6.927042,-4.848240,5.337459],[-4.912456,-9.050266,5.729075,-9.778993,-5.758365,-1.309269,-8.786041,4.623211,6.816009]],[[-7.397051,-6.190764,-2.538812,4.166767,-6.420744,9.487351,-0.654352,-3.577593,-4.627936],[-7.336763,-0.800860,8.949129,2.357926,-5.704607,6.161152,6.673274,4.936330,-2.426747],[9.893699,5.065204,5.678376,3.368178,-0.171672,6.797461,0.024552,-3.808484,-3.373866],[-6.417152,3.727640,-5.292755,-3.919273,4.602331,8.663445,-5.539349,4.937013,8.733798],[-0.446539,-5.787786,-2.767435,1.347139,-3.191273,4.654953,-7.563012,-7.048834,0.701929],[-4.206694,-8.387234,9.605946,4.026087,8.077257,7.262335,4.662636,9.850323,9.843893],[1.238103,-1.227195,-8.902150,7.567578,3.917947,-9.104491,-0.823873,0.519702,-5.665892],[4.251565,-1.279233,3.711275,7.462185,7.150914,-2.254261,-2.369066,-8.847370,9.614446],[6.200631,3.481516,7.378308,4.385755,-8.030669,-9.585928,8.295801,-0.495109,-5.707887],[-9.497955,-7.002004,1.889565,-7.447250,7.169688,-4.655817,6.409473,9.339060,-8.559002],[-6.976132,-1.037660,-8.599932,-8.095107,-5.329256,0.059872,-6.774886,-1.834518,-3.064055],[4.868798,-8.426006,8.636360,-1.577755,-0.188530,0.145354,-3.359425,-1.812184,-4.756894],[8.786368,-2.348155,3.201437,5.274173,8.136386,-0.827802,4.921682,-9.945327,-2.272351],[-1.221323,-1.806627,-7.244151,0.536843,-0.725634,-0.150541,1.345129,2.041399,1.697916],[6.807004,-7.519017,4.948528,-0.985977,-2.067155,-3.262358,-0.920887,6.966393,0.960779]],[[-3.110346,-6.681100,-3.053808,6.151584,5.809710,0.576118,1.320930,1.383654,-4.881463],[1.706776,4.966045,3.820687,-9.972104,-9.955030,7.576300,-8.837975,-4.632453,-2.601634],[0.837155,-2.410327,-6.556114,0.639194,1.049954,1.369891,4.551617,-2.528734,-9.585784],[-9.380210,-6.606392,2.807928,-5.176266,2.554988,-7.773656,1.067698,-0.089662,-0.214709],[-2.934861,-7.564728,-5.366963,6.925072,-8.168342,-9.431045,5.244092,-1.287674,8.461595],[1.128901,3.459987,8.594731,-9.166038,9.611559,-9.916103,7.297567,4.828477,-6.599870],[4.036006,-7.998208,-7.966585,6.999985,8.355394,3.123797,5.328516,8.771357,4.657614],[-4.139240,5.383344,-0.197571,-0.526095,-8.092196,-3.679736,9.982119,-4.979002,2.317920],[8.890507,8.421124,-6.958381,5.970581,5.828787,-4.321451,0.760481,2.835610,-0.762283],[0.592648,2.859431,7.274496,-3.443579,-5.777580,-5.069145,7.551427,-8.477817,-1.040342],[5.890386,-5.271211,-4.870985,-6.703728,9.150331,8.034082,3.023786,-6.574154,-8.049302],[-8.268749,8.068404,-1.707243,1.704458,4.694099,-2.228645,-3.691181,9.395051,-4.788054],[-5.438478,-0.842883,-4.381571,0.177802,-0.685525,2.065291,1.971106,1.233273,-8.799154],[-6.585960,-8.445421,5.753388,-6.134927,-9.096289,-4.942092,0.921699,3.248306,-0.889502],[8.694803,-9.394434,-2.929966,6.847602,4.222283,-3.845255,-3.327351,7.571763,-8.489478]]], dtype = "float64")#candidate|114|(6, 15, 9)|const|float64
bop_115 = relay.add(uop_86.astype('int32'), relay.reshape(const_114.astype('int32'), relay.shape_of(uop_86))) # shape=(6, 15, 9)
bop_118 = relay.floor_divide(bop_106.astype('float32'), relay.reshape(bop_103.astype('float32'), relay.shape_of(bop_106))) # shape=(6, 15, 9)
uop_121 = relay.log(bop_95.astype('float64')) # shape=(6, 15, 9)
bop_123 = relay.greater_equal(bop_95.astype('bool'), relay.reshape(uop_71.astype('bool'), relay.shape_of(bop_95))) # shape=(6, 15, 9)
uop_126 = relay.atanh(uop_109.astype('float64')) # shape=(6, 15, 9)
const_128 = relay.const([[[-6.845512,-2.388851,5.208862,0.128356,-3.888494,-7.739923,-0.569476,-3.968307,9.498042],[-8.930455,-2.273459,4.197217,-5.635390,1.277006,4.664561,-3.840821,2.137269,-3.326107],[8.186248,-5.733276,-7.637383,3.742958,-0.851937,-8.826746,-9.661664,1.652757,-6.044133],[7.133370,-5.040041,-4.428375,8.298800,7.492249,4.825570,2.530931,5.194766,-5.851492],[-6.313534,-7.949771,6.431757,-1.711108,-2.290930,-6.787999,-7.045267,2.592304,-9.661606],[-1.554182,-3.515518,3.850866,3.975924,8.838262,-1.394178,6.166628,0.835132,-1.501004],[-9.988040,-5.737827,-9.929140,6.268270,-4.178232,7.509942,-7.228830,5.482502,9.623552],[-9.760416,8.815820,8.535060,-1.099641,4.157240,-3.704376,-9.696034,-7.044473,5.802464],[-5.374995,-2.598208,9.710240,9.093974,9.378273,0.574277,6.023803,-1.575846,6.109379],[6.188890,-8.824849,6.475214,-4.056729,2.703617,-1.489305,9.121482,7.766051,-0.740271],[2.777635,9.364555,-4.333926,2.765941,-1.747819,-5.288911,7.486691,2.336331,-6.646276],[-0.494181,5.833647,-4.635221,3.922953,-6.490368,2.424093,8.613493,-0.975770,9.625805],[5.528111,7.347513,-4.992597,4.362300,8.455606,3.890227,9.286840,-1.945732,0.755432],[0.413308,-3.118102,-2.417394,-7.792106,-6.804467,-4.975762,5.213227,-6.008531,6.047439],[-4.539039,-2.611353,-0.894502,-1.909424,5.565381,-0.173851,5.387660,6.013059,1.666019]],[[8.105687,-9.801237,-0.304764,1.297971,-5.281185,-2.614147,5.350799,6.711212,-5.566274],[7.179494,5.303602,8.285574,-4.675850,6.260830,-2.742701,9.218835,-0.030952,9.998342],[-2.694248,-3.601237,-6.466489,-7.574924,-9.535076,3.394943,2.527996,5.017059,-3.537379],[-7.575650,4.816517,-3.219302,-6.444260,6.313402,0.348526,-6.298135,9.097222,0.631912],[0.842360,9.480069,0.947156,9.661602,-2.825178,1.203605,8.200461,3.857951,-5.264454],[9.506565,1.254658,0.632463,4.629764,-2.194590,0.563307,4.469317,3.985413,-1.337618],[4.969534,-7.002158,-8.807527,-8.765421,3.153520,-0.746184,-6.469238,8.797385,-4.910585],[-7.779785,-9.667684,-5.650652,-8.566111,-4.767537,1.638074,-3.532553,-8.359601,-3.955438],[5.721517,4.593183,-9.399543,-9.067316,0.407159,-3.416064,-7.563262,3.218762,8.837525],[-2.383588,4.920932,3.846876,8.206536,-0.807763,-2.031565,-2.684882,7.392102,8.279177],[8.280130,-0.406020,2.061959,-6.676075,-1.787386,-9.928243,-5.534430,6.438640,3.322982],[-6.944265,0.987322,0.004721,3.102270,1.686428,3.113139,-5.897257,-9.182772,7.985105],[1.774743,3.914888,3.294592,9.569394,3.877583,-0.366345,4.121639,8.735367,2.326358],[2.502798,9.999944,6.298987,3.996726,9.785345,2.853065,8.780897,8.585249,-3.074819],[-3.735502,-4.006147,-1.299845,-3.729740,8.099244,-3.872216,-5.175207,2.427306,-4.213707]],[[-3.261248,-6.715710,1.236108,-8.838225,-6.327178,-8.463796,1.179163,-7.283902,-1.237415],[-1.728493,-1.686652,-0.304880,-8.582206,-8.078554,-8.553969,-5.549961,-8.060820,2.845720],[-8.269925,-6.783995,8.813251,1.272893,4.432102,-7.046573,9.041861,7.234804,-4.138584],[-3.839403,-6.715167,-9.161204,-3.612734,-7.949318,1.507637,-2.498677,8.454260,-7.733328],[1.258284,2.032576,5.099681,-4.758598,-7.072695,-8.798305,-8.043769,4.963687,-0.856701],[8.542742,7.492371,5.573475,8.561564,-4.903966,3.038568,3.108289,8.152742,3.691263],[-2.391249,1.509146,4.300790,4.280659,-4.862678,8.331018,-4.193408,4.424017,-4.966000],[-4.554976,0.716024,-6.667003,3.236052,5.000045,2.972049,4.987104,3.771254,-9.832052],[5.428615,-4.496537,8.427738,-9.843400,-1.161595,0.162280,-1.538030,0.879238,-8.396958],[-1.503701,8.366822,-5.928854,8.757873,1.697601,-7.981373,2.521467,5.034899,-2.930315],[8.263311,5.846967,-8.911480,-8.969809,-6.546496,-2.379749,-1.840139,9.185028,5.181875],[-2.887043,4.855710,0.703261,8.491306,9.694165,-5.295269,1.099489,-4.707959,0.635965],[3.236909,-3.347077,4.149839,7.597718,6.019853,-0.530550,-6.194748,9.701182,-5.775291],[-5.894909,-9.265934,-0.553072,5.339967,-8.894471,-6.795674,-4.601132,-5.010408,-7.237052],[-8.385653,4.961911,-5.497738,-1.153476,-6.885816,-0.334804,-7.377098,-0.848312,3.118947]],[[7.483639,3.188906,-5.321134,4.138689,1.088139,7.131015,-7.728196,1.523381,-0.600413],[1.681352,7.295360,-7.566272,-6.119568,-1.231312,9.361208,0.222990,-7.709724,7.198372],[2.917176,7.360829,-4.054913,-5.144184,-9.483547,-7.933114,7.435516,0.829235,5.634793],[-8.705819,-0.467493,-9.995547,-0.932986,-3.864303,-7.920471,-4.764436,3.667863,9.149658],[-3.736586,-2.191840,1.411209,7.191363,-5.038132,0.434298,0.231449,8.232592,-1.314421],[3.415723,4.697325,8.870051,2.295032,3.612130,-3.740669,-8.565772,-9.867069,7.388946],[5.848442,-6.297223,-5.626617,0.459364,-2.616091,8.464613,6.316055,3.563607,9.332599],[-0.027063,-3.347695,5.638499,-2.755199,-9.737429,-5.216668,4.112743,-1.762907,0.597734],[2.159513,-1.298474,8.693368,4.568972,6.971837,9.507833,5.942408,8.872938,-9.763935],[-3.552737,6.160595,0.673482,2.066251,1.127949,8.510625,-0.773315,-9.009131,-9.303004],[-2.480268,-4.992299,-9.009634,-8.282939,8.519418,-4.287919,-4.757001,6.482295,0.859650],[5.723106,3.597268,-8.142456,1.217469,3.239284,-1.304655,1.837565,9.271841,-5.126224],[-9.801226,-6.382743,-0.255986,0.313033,1.295508,-8.216309,3.770480,2.269586,8.025266],[1.139290,-6.729570,-3.183200,-5.499560,-5.084543,4.044736,-7.621871,7.210382,3.392848],[3.104128,6.173921,9.467985,5.728183,4.893998,8.620877,-1.359020,-9.502590,-7.550092]],[[8.199072,-4.063180,-6.902871,-1.948217,3.156011,5.148790,-4.290099,0.867585,-7.926607],[5.176040,-5.891841,-4.589592,1.583584,-8.881986,-4.876695,-9.107736,-6.142248,5.852372],[-5.686518,5.618589,1.889015,7.033818,2.988652,3.425264,3.017327,6.695224,-4.143005],[-1.310106,-9.956212,1.246365,1.053259,6.526089,-0.830094,-2.076979,-8.935270,7.147145],[4.432183,3.989700,7.377937,-4.788179,-3.416450,-1.011944,2.022450,-7.854123,-3.590257],[-0.385733,-8.366117,7.014986,-3.838244,1.254433,4.379867,3.313319,4.096763,3.179470],[6.318108,-5.225928,4.446790,-6.869905,1.113663,-1.492167,-8.012129,0.683333,-2.983363],[-5.207469,-5.956270,-9.707063,-3.319797,-4.128575,-0.340843,-4.698813,0.609268,3.207532],[-6.991070,-1.065868,6.950636,6.661685,9.799606,-5.764926,2.246832,9.898474,-5.686971],[8.226768,7.498717,4.602141,5.699824,2.218646,-7.317321,1.484299,5.107697,-4.343675],[-5.772738,-5.253357,-9.399597,-0.631731,8.151477,4.295183,0.940110,-6.671928,2.329360],[-8.150943,-1.692634,2.367586,5.843669,7.487672,-8.020871,8.371826,6.644239,1.940125],[-5.045886,6.961872,0.057946,5.546640,3.421739,0.373246,8.897105,7.230892,9.145174],[-2.749861,1.766176,2.512977,1.342913,-5.407066,4.284124,-6.447355,6.722965,7.989134],[9.635382,2.372520,3.147884,6.697242,3.174472,-8.596226,7.145887,1.519975,-1.808092]],[[6.666105,9.559191,-6.793861,8.585553,-4.445106,-4.605973,5.975099,-3.244337,-3.443666],[7.626391,0.757929,-3.778098,3.796841,-7.704807,-6.266818,-2.706784,4.028541,9.024105],[-6.637684,-4.703934,-2.378409,-3.242067,-3.016860,-4.409501,-6.118185,-9.115828,-8.004740],[6.762276,4.229624,-7.783415,-6.140369,3.896873,-5.882968,8.986460,0.822281,1.135789],[-4.248321,6.021775,0.957763,1.843257,9.649304,6.886952,-9.366212,2.851107,-1.932733],[3.350765,-6.972589,-8.334238,-5.795503,7.732677,-2.995004,1.856264,9.503462,0.042767],[-2.950184,-4.702089,8.512008,-3.636686,4.162450,7.112380,2.622263,-7.057867,9.337690],[0.988416,9.928988,3.990663,5.553582,-8.678052,3.417222,1.285135,8.912471,2.768632],[6.932779,-9.367318,1.314918,2.436985,8.171127,4.214305,-6.312615,-2.296442,9.781233],[7.276450,-6.450117,7.895701,-5.255448,6.865775,0.378911,-5.680588,-3.029628,7.742724],[-3.073068,8.998357,-6.463157,-4.779247,3.298114,-6.745120,-5.253174,9.349292,-5.442784],[-6.847174,-4.441661,-4.427309,-9.033933,-4.037686,4.979881,-2.080748,-2.196301,1.029142],[-2.821786,-0.479078,-0.182476,1.481144,-1.333081,6.760105,4.857178,1.299006,-4.632183],[2.875617,-5.164732,9.785060,6.728830,1.877397,7.332052,6.754405,-3.978418,7.344980],[-5.436887,4.474128,-8.975223,6.490299,-0.604809,0.002713,-7.480537,5.746681,-4.215912]]], dtype = "float64")#candidate|128|(6, 15, 9)|const|float64
bop_129 = relay.logical_or(uop_126.astype('bool'), relay.reshape(const_128.astype('bool'), relay.shape_of(uop_126))) # shape=(6, 15, 9)
bop_132 = relay.maximum(uop_79.astype('uint8'), relay.reshape(const_128.astype('uint8'), relay.shape_of(uop_79))) # shape=(6, 15, 9)
var_135 = relay.var("var_135", dtype = "float64", shape = (6, 15, 9))#candidate|135|(6, 15, 9)|var|float64
bop_136 = relay.subtract(uop_126.astype('int16'), relay.reshape(var_135.astype('int16'), relay.shape_of(uop_126))) # shape=(6, 15, 9)
bop_139 = relay.greater(bop_115.astype('bool'), relay.reshape(uop_88.astype('bool'), relay.shape_of(bop_115))) # shape=(6, 15, 9)
bop_142 = relay.divide(bop_106.astype('float64'), relay.reshape(uop_90.astype('float64'), relay.shape_of(bop_106))) # shape=(6, 15, 9)
uop_145 = relay.erf(bop_111.astype('float64')) # shape=(6, 15, 9)
var_147 = relay.var("var_147", dtype = "float32", shape = (6, 15, 9))#candidate|147|(6, 15, 9)|var|float32
bop_148 = relay.bitwise_or(uop_109.astype('int32'), relay.reshape(var_147.astype('int32'), relay.shape_of(uop_109))) # shape=(6, 15, 9)
uop_151 = relay.log2(uop_145.astype('float32')) # shape=(6, 15, 9)
var_153 = relay.var("var_153", dtype = "float32", shape = (6, 15, 9))#candidate|153|(6, 15, 9)|var|float32
bop_154 = relay.floor_mod(uop_151.astype('float32'), relay.reshape(var_153.astype('float32'), relay.shape_of(uop_151))) # shape=(6, 15, 9)
bop_157 = relay.left_shift(uop_88.astype('int16'), relay.reshape(uop_151.astype('int16'), relay.shape_of(uop_88))) # shape=(6, 15, 9)
uop_160 = relay.acosh(bop_98.astype('float64')) # shape=(6, 15, 9)
bop_162 = relay.left_shift(bop_111.astype('int64'), relay.reshape(uop_69.astype('int64'), relay.shape_of(bop_111))) # shape=(6, 15, 9)
bop_165 = relay.logical_and(uop_160.astype('bool'), relay.reshape(var_73.astype('bool'), relay.shape_of(uop_160))) # shape=(6, 15, 9)
bop_168 = relay.minimum(bop_154.astype('uint8'), relay.reshape(uop_77.astype('uint8'), relay.shape_of(bop_154))) # shape=(6, 15, 9)
uop_171 = relay.cos(bop_139.astype('float64')) # shape=(6, 15, 9)
uop_173 = relay.exp(bop_154.astype('float32')) # shape=(6, 15, 9)
uop_175 = relay.acosh(uop_173.astype('float64')) # shape=(6, 15, 9)
bop_177 = relay.logical_or(uop_173.astype('bool'), relay.reshape(uop_126.astype('bool'), relay.shape_of(uop_173))) # shape=(6, 15, 9)
var_180 = relay.var("var_180", dtype = "float64", shape = (6, 15, 9))#candidate|180|(6, 15, 9)|var|float64
bop_181 = relay.less(uop_175.astype('bool'), relay.reshape(var_180.astype('bool'), relay.shape_of(uop_175))) # shape=(6, 15, 9)
var_184 = relay.var("var_184", dtype = "bool", shape = (6, 15, 9))#candidate|184|(6, 15, 9)|var|bool
bop_185 = relay.minimum(bop_177.astype('uint8'), relay.reshape(var_184.astype('uint8'), relay.shape_of(bop_177))) # shape=(6, 15, 9)
uop_188 = relay.asin(uop_171.astype('float64')) # shape=(6, 15, 9)
output = relay.Tuple([bop_92,uop_101,bop_118,uop_121,bop_123,bop_129,bop_132,bop_136,bop_142,bop_148,bop_157,bop_162,bop_165,bop_168,bop_181,bop_185,uop_188,])
output2 = relay.Tuple([bop_92,uop_101,bop_118,uop_121,bop_123,bop_129,bop_132,bop_136,bop_142,bop_148,bop_157,bop_162,bop_165,bop_168,bop_181,bop_185,uop_188,])
func_190 = relay.Function([var_62,var_63,var_73,var_135,var_147,var_153,var_180,var_184,], output)
mod['func_190'] = func_190
mod = relay.transform.InferType()(mod)
var_191 = relay.var("var_191", dtype = "bool", shape = ())#candidate|191|()|var|bool
var_192 = relay.var("var_192", dtype = "bool", shape = (6, 15, 9))#candidate|192|(6, 15, 9)|var|bool
var_193 = relay.var("var_193", dtype = "float32", shape = (6, 15, 9))#candidate|193|(6, 15, 9)|var|float32
var_194 = relay.var("var_194", dtype = "float64", shape = (6, 15, 9))#candidate|194|(6, 15, 9)|var|float64
var_195 = relay.var("var_195", dtype = "float32", shape = (6, 15, 9))#candidate|195|(6, 15, 9)|var|float32
var_196 = relay.var("var_196", dtype = "float32", shape = (6, 15, 9))#candidate|196|(6, 15, 9)|var|float32
var_197 = relay.var("var_197", dtype = "float64", shape = (6, 15, 9))#candidate|197|(6, 15, 9)|var|float64
var_198 = relay.var("var_198", dtype = "bool", shape = (6, 15, 9))#candidate|198|(6, 15, 9)|var|bool
output = func_190(var_191,var_192,var_193,var_194,var_195,var_196,var_197,var_198,)
func_199 = relay.Function([var_191,var_192,var_193,var_194,var_195,var_196,var_197,var_198,], output)
mutated_mod['func_199'] = func_199
mutated_mod = relay.transform.InferType()(mutated_mod)
var_201 = relay.var("var_201", dtype = "float64", shape = ())#candidate|201|()|var|float64
uop_202 = relay.sigmoid(var_201.astype('float64')) # shape=()
uop_204 = relay.sqrt(uop_202.astype('float32')) # shape=()
bop_206 = relay.floor_mod(uop_202.astype('float32'), var_201.astype('float32')) # shape=()
uop_209 = relay.log(uop_204.astype('float32')) # shape=()
const_211 = relay.const(-4.744034, dtype = "float32")#candidate|211|()|const|float32
bop_212 = relay.left_shift(uop_204.astype('int64'), const_211.astype('int64')) # shape=()
uop_215 = relay.asin(uop_209.astype('float64')) # shape=()
uop_217 = relay.atan(uop_204.astype('float64')) # shape=()
uop_219 = relay.sigmoid(var_201.astype('float64')) # shape=()
bop_221 = relay.greater_equal(uop_215.astype('bool'), uop_204.astype('bool')) # shape=()
uop_224 = relay.sin(uop_215.astype('float32')) # shape=()
uop_226 = relay.atanh(bop_221.astype('float64')) # shape=()
uop_228 = relay.cos(uop_209.astype('float32')) # shape=()
uop_230 = relay.log2(uop_224.astype('float32')) # shape=()
const_232 = relay.const([-6.260871,-0.007475,9.036769], dtype = "float32")#candidate|232|(3,)|const|float32
bop_233 = relay.bitwise_and(uop_230.astype('uint16'), const_232.astype('uint16')) # shape=(3,)
bop_236 = relay.not_equal(uop_230.astype('bool'), const_232.astype('bool')) # shape=(3,)
bop_239 = relay.power(bop_236.astype('float64'), uop_228.astype('float64')) # shape=(3,)
uop_242 = relay.cos(uop_224.astype('float64')) # shape=()
var_244 = relay.var("var_244", dtype = "float32", shape = ())#candidate|244|()|var|float32
bop_245 = relay.bitwise_xor(const_211.astype('uint64'), var_244.astype('uint64')) # shape=()
var_248 = relay.var("var_248", dtype = "bool", shape = (2,))#candidate|248|(2,)|var|bool
bop_249 = relay.greater(bop_221.astype('bool'), var_248.astype('bool')) # shape=(2,)
uop_252 = relay.log(bop_233.astype('float64')) # shape=(3,)
uop_254 = relay.sinh(bop_221.astype('float32')) # shape=()
bop_256 = relay.bitwise_or(uop_252.astype('int64'), uop_204.astype('int64')) # shape=(3,)
bop_259 = relay.mod(uop_252.astype('float32'), uop_226.astype('float32')) # shape=(3,)
uop_262 = relay.atanh(bop_236.astype('float64')) # shape=(3,)
var_264 = relay.var("var_264", dtype = "float64", shape = (3,))#candidate|264|(3,)|var|float64
bop_265 = relay.greater_equal(uop_252.astype('bool'), relay.reshape(var_264.astype('bool'), relay.shape_of(uop_252))) # shape=(3,)
uop_268 = relay.erf(bop_249.astype('float64')) # shape=(2,)
uop_270 = relay.exp(bop_256.astype('float32')) # shape=(3,)
bop_272 = relay.maximum(uop_270.astype('int32'), relay.reshape(var_264.astype('int32'), relay.shape_of(uop_270))) # shape=(3,)
uop_275 = relay.atan(bop_272.astype('float64')) # shape=(3,)
bop_277 = relay.divide(uop_275.astype('float64'), uop_219.astype('float64')) # shape=(3,)
bop_280 = relay.right_shift(uop_270.astype('int32'), var_244.astype('int32')) # shape=(3,)
const_283 = relay.const([True,True], dtype = "bool")#candidate|283|(2,)|const|bool
bop_284 = relay.less_equal(var_248.astype('bool'), relay.reshape(const_283.astype('bool'), relay.shape_of(var_248))) # shape=(2,)
uop_287 = relay.tan(uop_275.astype('float64')) # shape=(3,)
uop_289 = relay.acosh(uop_226.astype('float64')) # shape=()
bop_291 = relay.logical_and(uop_275.astype('bool'), var_244.astype('bool')) # shape=(3,)
bop_294 = relay.logical_and(uop_287.astype('bool'), relay.reshape(uop_262.astype('bool'), relay.shape_of(uop_287))) # shape=(3,)
uop_297 = relay.asinh(bop_294.astype('float32')) # shape=(3,)
uop_299 = relay.log(uop_226.astype('float32')) # shape=()
bop_301 = relay.bitwise_xor(bop_291.astype('uint16'), relay.reshape(bop_256.astype('uint16'), relay.shape_of(bop_291))) # shape=(3,)
bop_304 = relay.right_shift(uop_297.astype('int32'), relay.reshape(bop_239.astype('int32'), relay.shape_of(uop_297))) # shape=(3,)
output = relay.Tuple([bop_206,bop_212,uop_217,uop_242,bop_245,uop_254,bop_259,bop_265,uop_268,bop_277,bop_280,bop_284,uop_289,uop_299,bop_301,bop_304,])
output2 = relay.Tuple([bop_206,bop_212,uop_217,uop_242,bop_245,uop_254,bop_259,bop_265,uop_268,bop_277,bop_280,bop_284,uop_289,uop_299,bop_301,bop_304,])
F = relay.Function([var_201,var_244,var_248,var_264,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_201,var_244,var_248,var_264,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_201= np.array(8.702752, dtype='float64')
module1.set_input('var_201', input_201)
input_244= np.array(-2.571750, dtype='float32')
module1.set_input('var_244', input_244)
input_248= np.array([True,False], dtype='bool')
module1.set_input('var_248', input_248)
input_264= np.array([9.124360,-7.705351,-9.479324], dtype='float64')
module1.set_input('var_264', input_264)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_201, input_244, input_248, input_264, )
res3 = intrp3.evaluate()(input_201, input_244, input_248, input_264, )
res4 = intrp4.evaluate()(input_201, input_244, input_248, input_264, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
res1_14 = module1.get_output(14).asnumpy()
res2_14 = res2[14].asnumpy()
res3_14 = res3[14].asnumpy()
res4_14 = res4[14].asnumpy()
np.testing.assert_allclose(res1_14 ,res2_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res3_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res4_14, atol=1e-3, rtol=1e-3)
(res1_14 == res2_14).all()
(res1_14 == res3_14).all()
(res1_14 == res4_14).all()
res1_15 = module1.get_output(15).asnumpy()
res2_15 = res2[15].asnumpy()
res3_15 = res3[15].asnumpy()
res4_15 = res4[15].asnumpy()
np.testing.assert_allclose(res1_15 ,res2_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res3_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res4_15, atol=1e-3, rtol=1e-3)
(res1_15 == res2_15).all()
(res1_15 == res3_15).all()
(res1_15 == res4_15).all()
module5.set_input('var_201', input_201)
module5.set_input('var_244', input_244)
module5.set_input('var_248', input_248)
module5.set_input('var_264', input_264)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_201, input_244, input_248, input_264, )
res7 = intrp7.evaluate()(input_201, input_244, input_248, input_264, )
res8 = intrp8.evaluate()(input_201, input_244, input_248, input_264, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
res5_14 = module5.get_output(14).asnumpy()
res6_14 = res6[14].asnumpy()
res7_14 = res7[14].asnumpy()
res8_14 = res8[14].asnumpy()
np.testing.assert_allclose(res5_14 ,res6_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res7_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res8_14, atol=1e-3, rtol=1e-3)
(res5_14 == res6_14).all()
(res5_14 == res7_14).all()
(res5_14 == res8_14).all()
res5_15 = module5.get_output(15).asnumpy()
res6_15 = res6[15].asnumpy()
res7_15 = res7[15].asnumpy()
res8_15 = res8[15].asnumpy()
np.testing.assert_allclose(res5_15 ,res6_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res7_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res8_15, atol=1e-3, rtol=1e-3)
(res5_15 == res6_15).all()
(res5_15 == res7_15).all()
(res5_15 == res8_15).all()
module9.set_input('var_201', input_201)
module9.set_input('var_244', input_244)
module9.set_input('var_248', input_248)
module9.set_input('var_264', input_264)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_201, input_244, input_248, input_264, )
res11 = intrp11.evaluate()(input_201, input_244, input_248, input_264, )
res12 = intrp12.evaluate()(input_201, input_244, input_248, input_264, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
res9_14 = module9.get_output(14).asnumpy()
res10_14 = res10[14].asnumpy()
res11_14 = res11[14].asnumpy()
res12_14 = res12[14].asnumpy()
np.testing.assert_allclose(res9_14 ,res10_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res11_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res12_14, atol=1e-3, rtol=1e-3)
(res9_14 == res10_14).all()
(res9_14 == res11_14).all()
(res9_14 == res12_14).all()
res9_15 = module9.get_output(15).asnumpy()
res10_15 = res10[15].asnumpy()
res11_15 = res11[15].asnumpy()
res12_15 = res12[15].asnumpy()
np.testing.assert_allclose(res9_15 ,res10_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res11_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res12_15, atol=1e-3, rtol=1e-3)
(res9_15 == res10_15).all()
(res9_15 == res11_15).all()
(res9_15 == res12_15).all()
module13.set_input('var_201', input_201)
module13.set_input('var_244', input_244)
module13.set_input('var_248', input_248)
module13.set_input('var_264', input_264)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_201, input_244, input_248, input_264, )
res15 = intrp15.evaluate()(input_201, input_244, input_248, input_264, )
res16 = intrp16.evaluate()(input_201, input_244, input_248, input_264, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
res13_14 = module13.get_output(14).asnumpy()
res14_14 = res14[14].asnumpy()
res15_14 = res15[14].asnumpy()
res16_14 = res16[14].asnumpy()
np.testing.assert_allclose(res13_14 ,res14_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res15_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res16_14, atol=1e-3, rtol=1e-3)
(res13_14 == res14_14).all()
(res13_14 == res15_14).all()
(res13_14 == res16_14).all()
res13_15 = module13.get_output(15).asnumpy()
res14_15 = res14[15].asnumpy()
res15_15 = res15[15].asnumpy()
res16_15 = res16[15].asnumpy()
np.testing.assert_allclose(res13_15 ,res14_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res15_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res16_15, atol=1e-3, rtol=1e-3)
(res13_15 == res14_15).all()
(res13_15 == res15_15).all()
(res13_15 == res16_15).all()
module17.set_input('var_201', input_201)
module17.set_input('var_244', input_244)
module17.set_input('var_248', input_248)
module17.set_input('var_264', input_264)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_201, input_244, input_248, input_264, )
res19 = intrp19.evaluate()(input_201, input_244, input_248, input_264, )
res20 = intrp20.evaluate()(input_201, input_244, input_248, input_264, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
res17_14 = module17.get_output(14).asnumpy()
res18_14 = res18[14].asnumpy()
res19_14 = res19[14].asnumpy()
res20_14 = res20[14].asnumpy()
np.testing.assert_allclose(res17_14 ,res18_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res19_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res20_14, atol=1e-3, rtol=1e-3)
(res17_14 == res18_14).all()
(res17_14 == res19_14).all()
(res17_14 == res20_14).all()
res17_15 = module17.get_output(15).asnumpy()
res18_15 = res18[15].asnumpy()
res19_15 = res19[15].asnumpy()
res20_15 = res20[15].asnumpy()
np.testing.assert_allclose(res17_15 ,res18_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res19_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res20_15, atol=1e-3, rtol=1e-3)
(res17_15 == res18_15).all()
(res17_15 == res19_15).all()
(res17_15 == res20_15).all()
module21.set_input('var_201', input_201)
module21.set_input('var_244', input_244)
module21.set_input('var_248', input_248)
module21.set_input('var_264', input_264)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_201, input_244, input_248, input_264, )
res23 = intrp23.evaluate()(input_201, input_244, input_248, input_264, )
res24 = intrp24.evaluate()(input_201, input_244, input_248, input_264, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()
res21_14 = module21.get_output(14).asnumpy()
res22_14 = res22[14].asnumpy()
res23_14 = res23[14].asnumpy()
res24_14 = res24[14].asnumpy()
np.testing.assert_allclose(res21_14 ,res22_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res23_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res24_14, atol=1e-3, rtol=1e-3)
(res21_14 == res22_14).all()
(res21_14 == res23_14).all()
(res21_14 == res24_14).all()
res21_15 = module21.get_output(15).asnumpy()
res22_15 = res22[15].asnumpy()
res23_15 = res23[15].asnumpy()
res24_15 = res24[15].asnumpy()
np.testing.assert_allclose(res21_15 ,res22_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res23_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res24_15, atol=1e-3, rtol=1e-3)
(res21_15 == res22_15).all()
(res21_15 == res23_15).all()
(res21_15 == res24_15).all()

'''55: TVMFuncCall
54: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
53: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
52: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
51: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
50: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
49: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
48: tvm::transform::Pass::operator()(tvm::IRModule) const
47: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
46: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
45: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
44: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
43: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
42: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
41: tvm::transform::Pass::operator()(tvm::IRModule) const
40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
37: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
36: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
35: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
34: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
33: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
32: _ZN3tvm5relay9transform22Devic
31: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
28: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
27: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
26: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
25: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
24: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
23: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
22: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
21: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
20: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
19: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
18: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::te::Tensor, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
17: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::runtime::ObjectRef, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
16: tvm::LowerWithPassList(tvm::IRModule, tvm::runtime::Array<tvm::transform::Pass, void>)
15: tvm::transform::Pass::operator()(tvm::IRModule) const
14: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
13: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
12: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
11: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
10: _ZNSt17_Function_handlerIFvN3tvm7
9: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
8: tvm::tir::DataTypeRewriter::operator()(tvm::tir::Stmt)
7: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
6: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::StoreNode const*)
5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
4: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
3: _ZThn16_N3tvm3tir16DataTyp
2: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
1: tvm::operator<<(tvm::PrimExpr, tvm::PrimExpr)
0: tvm::left_shift(tvm::PrimExpr, tvm::PrimExpr, tvm::Span)

'''