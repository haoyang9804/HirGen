import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_5 = relay.var("var_5", dtype = "int64", shape = ())#candidate|5|()|var|int64
var_6 = relay.var("var_6", dtype = "int64", shape = (7, 3, 1))#candidate|6|(7, 3, 1)|var|int64
bop_7 = relay.bitwise_xor(var_5.astype('int64'), var_6.astype('int64')) # shape=(7, 3, 1)
bop_10 = relay.multiply(var_6.astype('int8'), relay.reshape(bop_7.astype('int8'), relay.shape_of(var_6))) # shape=(7, 3, 1)
output = relay.Tuple([bop_10,])
output2 = relay.Tuple([bop_10,])
func_13 = relay.Function([var_5,var_6,], output)
mod['func_13'] = func_13
mod = relay.transform.InferType()(mod)
var_14 = relay.var("var_14", dtype = "int64", shape = ())#candidate|14|()|var|int64
var_15 = relay.var("var_15", dtype = "int64", shape = (7, 3, 1))#candidate|15|(7, 3, 1)|var|int64
output = func_13(var_14,var_15,)
func_16 = relay.Function([var_14,var_15,], output)
mutated_mod['func_16'] = func_16
mutated_mod = relay.transform.InferType()(mutated_mod)
var_20 = relay.var("var_20", dtype = "float64", shape = (16,))#candidate|20|(16,)|var|float64
var_21 = relay.var("var_21", dtype = "float64", shape = (16,))#candidate|21|(16,)|var|float64
bop_22 = relay.divide(var_20.astype('float64'), relay.reshape(var_21.astype('float64'), relay.shape_of(var_20))) # shape=(16,)
uop_25 = relay.log2(var_21.astype('float32')) # shape=(16,)
bop_27 = relay.right_shift(uop_25.astype('int64'), relay.reshape(var_20.astype('int64'), relay.shape_of(uop_25))) # shape=(16,)
bop_30 = relay.not_equal(uop_25.astype('bool'), relay.reshape(bop_27.astype('bool'), relay.shape_of(uop_25))) # shape=(16,)
output = relay.Tuple([bop_22,bop_30,])
output2 = relay.Tuple([bop_22,bop_30,])
func_33 = relay.Function([var_20,var_21,], output)
mod['func_33'] = func_33
mod = relay.transform.InferType()(mod)
mutated_mod['func_33'] = func_33
mutated_mod = relay.transform.InferType()(mutated_mod)
func_33_call = mutated_mod.get_global_var('func_33')
var_35 = relay.var("var_35", dtype = "float64", shape = (16,))#candidate|35|(16,)|var|float64
var_36 = relay.var("var_36", dtype = "float64", shape = (16,))#candidate|36|(16,)|var|float64
call_34 = func_33_call(var_35,var_36,)
output = call_34
func_37 = relay.Function([var_35,var_36,], output)
mutated_mod['func_37'] = func_37
mutated_mod = relay.transform.InferType()(mutated_mod)
var_48 = relay.var("var_48", dtype = "uint16", shape = (7,))#candidate|48|(7,)|var|uint16
var_49 = relay.var("var_49", dtype = "uint16", shape = (7,))#candidate|49|(7,)|var|uint16
bop_50 = relay.not_equal(var_48.astype('bool'), relay.reshape(var_49.astype('bool'), relay.shape_of(var_48))) # shape=(7,)
var_54 = relay.var("var_54", dtype = "uint16", shape = (7,))#candidate|54|(7,)|var|uint16
bop_55 = relay.power(var_48.astype('float32'), relay.reshape(var_54.astype('float32'), relay.shape_of(var_48))) # shape=(7,)
uop_58 = relay.sin(var_54.astype('float32')) # shape=(7,)
uop_60 = relay.tan(uop_58.astype('float32')) # shape=(7,)
uop_62 = relay.exp(bop_50.astype('float64')) # shape=(7,)
uop_64 = relay.log(uop_62.astype('float64')) # shape=(7,)
var_66 = relay.var("var_66", dtype = "float64", shape = (7,))#candidate|66|(7,)|var|float64
bop_67 = relay.maximum(uop_62.astype('int32'), relay.reshape(var_66.astype('int32'), relay.shape_of(uop_62))) # shape=(7,)
bop_70 = relay.bitwise_xor(uop_60.astype('uint8'), relay.reshape(bop_50.astype('uint8'), relay.shape_of(uop_60))) # shape=(7,)
bop_73 = relay.bitwise_xor(uop_58.astype('uint32'), relay.reshape(uop_60.astype('uint32'), relay.shape_of(uop_58))) # shape=(7,)
var_76 = relay.var("var_76", dtype = "int32", shape = (7,))#candidate|76|(7,)|var|int32
bop_77 = relay.subtract(bop_67.astype('int64'), relay.reshape(var_76.astype('int64'), relay.shape_of(bop_67))) # shape=(7,)
var_80 = relay.var("var_80", dtype = "uint16", shape = (7,))#candidate|80|(7,)|var|uint16
bop_81 = relay.bitwise_and(var_49.astype('uint64'), relay.reshape(var_80.astype('uint64'), relay.shape_of(var_49))) # shape=(7,)
uop_84 = relay.log2(uop_58.astype('float64')) # shape=(7,)
uop_86 = relay.atanh(var_54.astype('float64')) # shape=(7,)
bop_88 = relay.not_equal(uop_64.astype('bool'), relay.reshape(bop_55.astype('bool'), relay.shape_of(uop_64))) # shape=(7,)
uop_91 = relay.cos(uop_58.astype('float64')) # shape=(7,)
uop_93 = relay.tan(bop_73.astype('float64')) # shape=(7,)
bop_95 = relay.greater(uop_60.astype('bool'), relay.reshape(uop_86.astype('bool'), relay.shape_of(uop_60))) # shape=(7,)
var_99 = relay.var("var_99", dtype = "float64", shape = (7,))#candidate|99|(7,)|var|float64
bop_100 = relay.right_shift(uop_93.astype('int64'), relay.reshape(var_99.astype('int64'), relay.shape_of(uop_93))) # shape=(7,)
output = relay.Tuple([bop_70,bop_77,bop_81,uop_84,bop_88,uop_91,bop_95,bop_100,])
output2 = relay.Tuple([bop_70,bop_77,bop_81,uop_84,bop_88,uop_91,bop_95,bop_100,])
func_103 = relay.Function([var_48,var_49,var_54,var_66,var_76,var_80,var_99,], output)
mod['func_103'] = func_103
mod = relay.transform.InferType()(mod)
mutated_mod['func_103'] = func_103
mutated_mod = relay.transform.InferType()(mutated_mod)
func_103_call = mutated_mod.get_global_var('func_103')
var_105 = relay.var("var_105", dtype = "uint16", shape = (7,))#candidate|105|(7,)|var|uint16
var_106 = relay.var("var_106", dtype = "uint16", shape = (7,))#candidate|106|(7,)|var|uint16
var_107 = relay.var("var_107", dtype = "uint16", shape = (7,))#candidate|107|(7,)|var|uint16
var_108 = relay.var("var_108", dtype = "float64", shape = (7,))#candidate|108|(7,)|var|float64
var_109 = relay.var("var_109", dtype = "int32", shape = (7,))#candidate|109|(7,)|var|int32
var_110 = relay.var("var_110", dtype = "uint16", shape = (7,))#candidate|110|(7,)|var|uint16
var_111 = relay.var("var_111", dtype = "float64", shape = (7,))#candidate|111|(7,)|var|float64
call_104 = func_103_call(var_105,var_106,var_107,var_108,var_109,var_110,var_111,)
output = call_104
func_112 = relay.Function([var_105,var_106,var_107,var_108,var_109,var_110,var_111,], output)
mutated_mod['func_112'] = func_112
mutated_mod = relay.transform.InferType()(mutated_mod)
var_114 = relay.var("var_114", dtype = "int16", shape = (14, 3))#candidate|114|(14, 3)|var|int16
const_115 = relay.const([[7,-10,-5],[-8,6,4],[8,-7,2],[6,7,5],[2,-1,3],[-4,-9,-7],[3,-9,-3],[-7,5,-5],[-3,8,-7],[-1,4,1],[6,-10,-10],[-3,-2,-3],[7,9,-5],[-10,-5,10]], dtype = "int16")#candidate|115|(14, 3)|const|int16
bop_116 = relay.greater_equal(var_114.astype('bool'), relay.reshape(const_115.astype('bool'), relay.shape_of(var_114))) # shape=(14, 3)
uop_119 = relay.rsqrt(bop_116.astype('float64')) # shape=(14, 3)
uop_121 = relay.tan(uop_119.astype('float64')) # shape=(14, 3)
uop_123 = relay.cosh(uop_121.astype('float32')) # shape=(14, 3)
var_126 = relay.var("var_126", dtype = "float32", shape = (14, 3))#candidate|126|(14, 3)|var|float32
bop_127 = relay.floor_mod(uop_123.astype('float32'), relay.reshape(var_126.astype('float32'), relay.shape_of(uop_123))) # shape=(14, 3)
const_130 = relay.const([[5.867454,5.905200,7.641993],[0.074642,-2.330931,1.418499],[9.654362,7.222001,-9.759619],[-4.468087,-8.051048,8.839406],[2.002312,-5.415755,-7.946474],[9.669555,-1.344627,1.817244],[-2.130676,8.695251,-8.771934],[-2.122865,2.698216,-4.424680],[5.643834,-4.662405,0.214127],[7.694798,-7.111354,-9.179060],[2.670741,-7.428839,-2.384245],[4.029733,0.962662,6.673321],[0.679928,5.485418,-3.142129],[-9.112230,0.433647,5.987668]], dtype = "float64")#candidate|130|(14, 3)|const|float64
bop_131 = relay.divide(uop_119.astype('float32'), relay.reshape(const_130.astype('float32'), relay.shape_of(uop_119))) # shape=(14, 3)
uop_134 = relay.acosh(uop_121.astype('float64')) # shape=(14, 3)
uop_136 = relay.rsqrt(uop_121.astype('float32')) # shape=(14, 3)
bop_138 = relay.greater_equal(uop_134.astype('bool'), relay.reshape(const_115.astype('bool'), relay.shape_of(uop_134))) # shape=(14, 3)
var_141 = relay.var("var_141", dtype = "float64", shape = (14, 3))#candidate|141|(14, 3)|var|float64
bop_142 = relay.minimum(uop_134.astype('int32'), relay.reshape(var_141.astype('int32'), relay.shape_of(uop_134))) # shape=(14, 3)
var_145 = relay.var("var_145", dtype = "float64", shape = (14, 3))#candidate|145|(14, 3)|var|float64
bop_146 = relay.bitwise_or(uop_121.astype('uint64'), relay.reshape(var_145.astype('uint64'), relay.shape_of(uop_121))) # shape=(14, 3)
func_103_call = mod.get_global_var('func_103')
func_112_call = mutated_mod.get_global_var('func_112')
var_150 = relay.var("var_150", dtype = "uint16", shape = (1, 7))#candidate|150|(1, 7)|var|uint16
call_149 = relay.TupleGetItem(func_103_call(relay.reshape(var_150.astype('uint16'), [7,]), relay.reshape(var_150.astype('uint16'), [7,]), relay.reshape(var_150.astype('uint16'), [7,]), relay.reshape(var_150.astype('float64'), [7,]), relay.reshape(var_150.astype('int32'), [7,]), relay.reshape(var_150.astype('uint16'), [7,]), relay.reshape(var_150.astype('float64'), [7,]), ), 7)
call_151 = relay.TupleGetItem(func_112_call(relay.reshape(var_150.astype('uint16'), [7,]), relay.reshape(var_150.astype('uint16'), [7,]), relay.reshape(var_150.astype('uint16'), [7,]), relay.reshape(var_150.astype('float64'), [7,]), relay.reshape(var_150.astype('int32'), [7,]), relay.reshape(var_150.astype('uint16'), [7,]), relay.reshape(var_150.astype('float64'), [7,]), ), 7)
func_33_call = mod.get_global_var('func_33')
func_37_call = mutated_mod.get_global_var('func_37')
const_154 = relay.const([0.200044,-8.881805,-9.876739,9.316687,0.178738,6.816186,7.130604,7.496425,-6.999150,-2.491167,-4.463291,0.902663,-2.171575,-9.362447,2.932527,-4.092275], dtype = "float64")#candidate|154|(16,)|const|float64
call_153 = relay.TupleGetItem(func_33_call(relay.reshape(const_154.astype('float64'), [16,]), relay.reshape(const_154.astype('float64'), [16,]), ), 1)
call_155 = relay.TupleGetItem(func_37_call(relay.reshape(const_154.astype('float64'), [16,]), relay.reshape(const_154.astype('float64'), [16,]), ), 1)
func_33_call = mod.get_global_var('func_33')
func_37_call = mutated_mod.get_global_var('func_37')
call_157 = relay.TupleGetItem(func_33_call(relay.reshape(call_153.astype('float64'), [16,]), relay.reshape(const_154.astype('float64'), [16,]), ), 0)
call_158 = relay.TupleGetItem(func_37_call(relay.reshape(call_153.astype('float64'), [16,]), relay.reshape(const_154.astype('float64'), [16,]), ), 0)
func_33_call = mod.get_global_var('func_33')
func_37_call = mutated_mod.get_global_var('func_37')
call_159 = relay.TupleGetItem(func_33_call(relay.reshape(const_154.astype('float64'), [16,]), relay.reshape(call_157.astype('float64'), [16,]), ), 0)
call_160 = relay.TupleGetItem(func_37_call(relay.reshape(const_154.astype('float64'), [16,]), relay.reshape(call_157.astype('float64'), [16,]), ), 0)
bop_161 = relay.floor_divide(uop_121.astype('float32'), relay.reshape(uop_136.astype('float32'), relay.shape_of(uop_121))) # shape=(14, 3)
output = relay.Tuple([bop_127,bop_131,bop_138,bop_142,bop_146,call_149,var_150,call_153,const_154,call_157,call_159,bop_161,])
output2 = relay.Tuple([bop_127,bop_131,bop_138,bop_142,bop_146,call_151,var_150,call_155,const_154,call_158,call_160,bop_161,])
func_165 = relay.Function([var_114,var_126,var_141,var_145,var_150,], output)
mod['func_165'] = func_165
mod = relay.transform.InferType()(mod)
mutated_mod['func_165'] = func_165
mutated_mod = relay.transform.InferType()(mutated_mod)
func_165_call = mutated_mod.get_global_var('func_165')
var_167 = relay.var("var_167", dtype = "int16", shape = (14, 3))#candidate|167|(14, 3)|var|int16
var_168 = relay.var("var_168", dtype = "float32", shape = (14, 3))#candidate|168|(14, 3)|var|float32
var_169 = relay.var("var_169", dtype = "float64", shape = (14, 3))#candidate|169|(14, 3)|var|float64
var_170 = relay.var("var_170", dtype = "float64", shape = (14, 3))#candidate|170|(14, 3)|var|float64
var_171 = relay.var("var_171", dtype = "uint16", shape = (1, 7))#candidate|171|(1, 7)|var|uint16
call_166 = func_165_call(var_167,var_168,var_169,var_170,var_171,)
output = call_166
func_172 = relay.Function([var_167,var_168,var_169,var_170,var_171,], output)
mutated_mod['func_172'] = func_172
mutated_mod = relay.transform.InferType()(mutated_mod)
var_185 = relay.var("var_185", dtype = "uint32", shape = (15, 15))#candidate|185|(15, 15)|var|uint32
var_186 = relay.var("var_186", dtype = "uint32", shape = (15, 15))#candidate|186|(15, 15)|var|uint32
bop_187 = relay.greater_equal(var_185.astype('bool'), relay.reshape(var_186.astype('bool'), relay.shape_of(var_185))) # shape=(15, 15)
bop_190 = relay.equal(bop_187.astype('bool'), relay.reshape(var_185.astype('bool'), relay.shape_of(bop_187))) # shape=(15, 15)
func_103_call = mod.get_global_var('func_103')
func_112_call = mutated_mod.get_global_var('func_112')
var_196 = relay.var("var_196", dtype = "uint16", shape = (7,))#candidate|196|(7,)|var|uint16
call_195 = relay.TupleGetItem(func_103_call(relay.reshape(var_196.astype('uint16'), [7,]), relay.reshape(var_196.astype('uint16'), [7,]), relay.reshape(var_196.astype('uint16'), [7,]), relay.reshape(var_196.astype('float64'), [7,]), relay.reshape(var_196.astype('int32'), [7,]), relay.reshape(var_196.astype('uint16'), [7,]), relay.reshape(var_196.astype('float64'), [7,]), ), 4)
call_197 = relay.TupleGetItem(func_112_call(relay.reshape(var_196.astype('uint16'), [7,]), relay.reshape(var_196.astype('uint16'), [7,]), relay.reshape(var_196.astype('uint16'), [7,]), relay.reshape(var_196.astype('float64'), [7,]), relay.reshape(var_196.astype('int32'), [7,]), relay.reshape(var_196.astype('uint16'), [7,]), relay.reshape(var_196.astype('float64'), [7,]), ), 4)
uop_198 = relay.exp(bop_187.astype('float32')) # shape=(15, 15)
func_13_call = mod.get_global_var('func_13')
func_16_call = mutated_mod.get_global_var('func_16')
const_201 = relay.const(-2, dtype = "int64")#candidate|201|()|const|int64
var_202 = relay.var("var_202", dtype = "int64", shape = (21,))#candidate|202|(21,)|var|int64
call_200 = relay.TupleGetItem(func_13_call(relay.reshape(const_201.astype('int64'), []), relay.reshape(var_202.astype('int64'), [7, 3, 1]), ), 0)
call_203 = relay.TupleGetItem(func_16_call(relay.reshape(const_201.astype('int64'), []), relay.reshape(var_202.astype('int64'), [7, 3, 1]), ), 0)
uop_204 = relay.erf(uop_198.astype('float64')) # shape=(15, 15)
var_206 = relay.var("var_206", dtype = "float32", shape = (15, 15))#candidate|206|(15, 15)|var|float32
bop_207 = relay.left_shift(uop_198.astype('int16'), relay.reshape(var_206.astype('int16'), relay.shape_of(uop_198))) # shape=(15, 15)
var_210 = relay.var("var_210", dtype = "float64", shape = (15, 15))#candidate|210|(15, 15)|var|float64
bop_211 = relay.minimum(uop_204.astype('float32'), relay.reshape(var_210.astype('float32'), relay.shape_of(uop_204))) # shape=(15, 15)
var_214 = relay.var("var_214", dtype = "float64", shape = (15, 15))#candidate|214|(15, 15)|var|float64
bop_215 = relay.add(uop_204.astype('int32'), relay.reshape(var_214.astype('int32'), relay.shape_of(uop_204))) # shape=(15, 15)
uop_218 = relay.atan(bop_211.astype('float32')) # shape=(15, 15)
uop_221 = relay.log10(bop_207.astype('float32')) # shape=(15, 15)
bop_223 = relay.bitwise_xor(uop_204.astype('uint8'), const_201.astype('uint8')) # shape=(15, 15)
func_103_call = mod.get_global_var('func_103')
func_112_call = mutated_mod.get_global_var('func_112')
call_227 = relay.TupleGetItem(func_103_call(relay.reshape(call_195.astype('uint16'), [7,]), relay.reshape(call_195.astype('uint16'), [7,]), relay.reshape(var_196.astype('uint16'), [7,]), relay.reshape(call_195.astype('float64'), [7,]), relay.reshape(var_196.astype('int32'), [7,]), relay.reshape(call_195.astype('uint16'), [7,]), relay.reshape(var_196.astype('float64'), [7,]), ), 4)
call_228 = relay.TupleGetItem(func_112_call(relay.reshape(call_195.astype('uint16'), [7,]), relay.reshape(call_195.astype('uint16'), [7,]), relay.reshape(var_196.astype('uint16'), [7,]), relay.reshape(call_195.astype('float64'), [7,]), relay.reshape(var_196.astype('int32'), [7,]), relay.reshape(call_195.astype('uint16'), [7,]), relay.reshape(var_196.astype('float64'), [7,]), ), 4)
bop_229 = relay.mod(uop_218.astype('float64'), relay.reshape(var_210.astype('float64'), relay.shape_of(uop_218))) # shape=(15, 15)
bop_232 = relay.right_shift(bop_215.astype('int16'), relay.reshape(uop_204.astype('int16'), relay.shape_of(bop_215))) # shape=(15, 15)
uop_236 = relay.atanh(bop_207.astype('float32')) # shape=(15, 15)
bop_238 = relay.add(uop_218.astype('uint8'), relay.reshape(bop_211.astype('uint8'), relay.shape_of(uop_218))) # shape=(15, 15)
uop_241 = relay.erf(bop_223.astype('float32')) # shape=(15, 15)
bop_244 = relay.floor_mod(bop_223.astype('float64'), relay.reshape(bop_215.astype('float64'), relay.shape_of(bop_223))) # shape=(15, 15)
bop_247 = relay.bitwise_and(uop_218.astype('int16'), relay.reshape(bop_244.astype('int16'), relay.shape_of(uop_218))) # shape=(15, 15)
uop_250 = relay.cosh(bop_229.astype('float64')) # shape=(15, 15)
output = relay.Tuple([bop_190,call_195,var_196,call_200,var_202,uop_221,call_227,bop_232,uop_236,bop_238,uop_241,bop_247,uop_250,])
output2 = relay.Tuple([bop_190,call_197,var_196,call_203,var_202,uop_221,call_228,bop_232,uop_236,bop_238,uop_241,bop_247,uop_250,])
func_252 = relay.Function([var_185,var_186,var_196,var_202,var_206,var_210,var_214,], output)
mod['func_252'] = func_252
mod = relay.transform.InferType()(mod)
var_253 = relay.var("var_253", dtype = "uint32", shape = (15, 15))#candidate|253|(15, 15)|var|uint32
var_254 = relay.var("var_254", dtype = "uint32", shape = (15, 15))#candidate|254|(15, 15)|var|uint32
var_255 = relay.var("var_255", dtype = "uint16", shape = (7,))#candidate|255|(7,)|var|uint16
var_256 = relay.var("var_256", dtype = "int64", shape = (21,))#candidate|256|(21,)|var|int64
var_257 = relay.var("var_257", dtype = "float32", shape = (15, 15))#candidate|257|(15, 15)|var|float32
var_258 = relay.var("var_258", dtype = "float64", shape = (15, 15))#candidate|258|(15, 15)|var|float64
var_259 = relay.var("var_259", dtype = "float64", shape = (15, 15))#candidate|259|(15, 15)|var|float64
output = func_252(var_253,var_254,var_255,var_256,var_257,var_258,var_259,)
func_260 = relay.Function([var_253,var_254,var_255,var_256,var_257,var_258,var_259,], output)
mutated_mod['func_260'] = func_260
mutated_mod = relay.transform.InferType()(mutated_mod)
var_264 = relay.var("var_264", dtype = "float32", shape = (12,))#candidate|264|(12,)|var|float32
uop_265 = relay.cos(var_264.astype('float32')) # shape=(12,)
var_267 = relay.var("var_267", dtype = "float32", shape = (12,))#candidate|267|(12,)|var|float32
bop_268 = relay.equal(uop_265.astype('bool'), relay.reshape(var_267.astype('bool'), relay.shape_of(uop_265))) # shape=(12,)
uop_271 = relay.sqrt(bop_268.astype('float64')) # shape=(12,)
uop_275 = relay.atan(var_267.astype('float64')) # shape=(12,)
func_33_call = mod.get_global_var('func_33')
func_37_call = mutated_mod.get_global_var('func_37')
const_278 = relay.const([[7.580964,3.815805,-2.729588,5.833858,-9.766292,6.322167,9.883743,2.184558],[-5.496967,1.636081,6.111191,5.910745,8.179534,-4.978854,3.241909,2.105708]], dtype = "float64")#candidate|278|(2, 8)|const|float64
call_277 = relay.TupleGetItem(func_33_call(relay.reshape(const_278.astype('float64'), [16,]), relay.reshape(const_278.astype('float64'), [16,]), ), 1)
call_279 = relay.TupleGetItem(func_37_call(relay.reshape(const_278.astype('float64'), [16,]), relay.reshape(const_278.astype('float64'), [16,]), ), 1)
func_103_call = mod.get_global_var('func_103')
func_112_call = mutated_mod.get_global_var('func_112')
const_281 = relay.const([[9],[-4],[-10],[3],[-3],[8],[-7]], dtype = "uint16")#candidate|281|(7, 1)|const|uint16
call_280 = relay.TupleGetItem(func_103_call(relay.reshape(const_281.astype('uint16'), [7,]), relay.reshape(const_281.astype('uint16'), [7,]), relay.reshape(const_281.astype('uint16'), [7,]), relay.reshape(const_281.astype('float64'), [7,]), relay.reshape(const_281.astype('int32'), [7,]), relay.reshape(const_281.astype('uint16'), [7,]), relay.reshape(const_281.astype('float64'), [7,]), ), 5)
call_282 = relay.TupleGetItem(func_112_call(relay.reshape(const_281.astype('uint16'), [7,]), relay.reshape(const_281.astype('uint16'), [7,]), relay.reshape(const_281.astype('uint16'), [7,]), relay.reshape(const_281.astype('float64'), [7,]), relay.reshape(const_281.astype('int32'), [7,]), relay.reshape(const_281.astype('uint16'), [7,]), relay.reshape(const_281.astype('float64'), [7,]), ), 5)
var_283 = relay.var("var_283", dtype = "float64", shape = (12,))#candidate|283|(12,)|var|float64
bop_284 = relay.right_shift(uop_271.astype('int8'), relay.reshape(var_283.astype('int8'), relay.shape_of(uop_271))) # shape=(12,)
uop_287 = relay.sqrt(uop_271.astype('float32')) # shape=(12,)
const_291 = relay.const([-3.485244,-9.330258,6.142054,3.286605,-5.602091,-8.273485,8.464356,1.874990,-4.546588,-7.824067,-1.101666,-7.335373], dtype = "float32")#candidate|291|(12,)|const|float32
bop_292 = relay.mod(uop_287.astype('float32'), relay.reshape(const_291.astype('float32'), relay.shape_of(uop_287))) # shape=(12,)
bop_295 = relay.bitwise_xor(bop_284.astype('int8'), relay.reshape(uop_271.astype('int8'), relay.shape_of(bop_284))) # shape=(12,)
bop_298 = relay.equal(bop_292.astype('bool'), relay.reshape(uop_271.astype('bool'), relay.shape_of(bop_292))) # shape=(12,)
uop_302 = relay.asinh(bop_292.astype('float32')) # shape=(12,)
bop_305 = relay.subtract(bop_284.astype('uint16'), relay.reshape(uop_275.astype('uint16'), relay.shape_of(bop_284))) # shape=(12,)
uop_310 = relay.log(bop_298.astype('float32')) # shape=(12,)
uop_313 = relay.log2(uop_302.astype('float32')) # shape=(12,)
output = relay.Tuple([call_277,const_278,call_280,const_281,bop_295,bop_305,uop_310,uop_313,])
output2 = relay.Tuple([call_279,const_278,call_282,const_281,bop_295,bop_305,uop_310,uop_313,])
func_316 = relay.Function([var_264,var_267,var_283,], output)
mod['func_316'] = func_316
mod = relay.transform.InferType()(mod)
mutated_mod['func_316'] = func_316
mutated_mod = relay.transform.InferType()(mutated_mod)
func_316_call = mutated_mod.get_global_var('func_316')
var_318 = relay.var("var_318", dtype = "float32", shape = (12,))#candidate|318|(12,)|var|float32
var_319 = relay.var("var_319", dtype = "float32", shape = (12,))#candidate|319|(12,)|var|float32
var_320 = relay.var("var_320", dtype = "float64", shape = (12,))#candidate|320|(12,)|var|float64
call_317 = func_316_call(var_318,var_319,var_320,)
output = call_317
func_321 = relay.Function([var_318,var_319,var_320,], output)
mutated_mod['func_321'] = func_321
mutated_mod = relay.transform.InferType()(mutated_mod)
var_333 = relay.var("var_333", dtype = "float64", shape = (7,))#candidate|333|(7,)|var|float64
uop_334 = relay.asinh(var_333.astype('float64')) # shape=(7,)
bop_337 = relay.equal(uop_334.astype('bool'), relay.reshape(var_333.astype('bool'), relay.shape_of(uop_334))) # shape=(7,)
uop_340 = relay.acosh(uop_334.astype('float32')) # shape=(7,)
func_165_call = mod.get_global_var('func_165')
func_172_call = mutated_mod.get_global_var('func_172')
const_343 = relay.const([-1,-2,5,-8,8,2,4,-3,4,-5,-1,-2,-2,-3,1,10,3,6,10,8,5,-3,6,10,-10,-10,2,9,-8,-6,2,-3,-10,2,-5,7,2,7,-7,-9,3,-9], dtype = "int16")#candidate|343|(42,)|const|int16
call_342 = relay.TupleGetItem(func_165_call(relay.reshape(const_343.astype('int16'), [14, 3]), relay.reshape(const_343.astype('float32'), [14, 3]), relay.reshape(const_343.astype('float64'), [14, 3]), relay.reshape(const_343.astype('float64'), [14, 3]), relay.reshape(var_333.astype('uint16'), [1, 7]), ), 5)
call_344 = relay.TupleGetItem(func_172_call(relay.reshape(const_343.astype('int16'), [14, 3]), relay.reshape(const_343.astype('float32'), [14, 3]), relay.reshape(const_343.astype('float64'), [14, 3]), relay.reshape(const_343.astype('float64'), [14, 3]), relay.reshape(var_333.astype('uint16'), [1, 7]), ), 5)
bop_350 = relay.floor_divide(uop_340.astype('float64'), relay.reshape(bop_337.astype('float64'), relay.shape_of(uop_340))) # shape=(7,)
uop_353 = relay.acos(uop_334.astype('float64')) # shape=(7,)
func_103_call = mod.get_global_var('func_103')
func_112_call = mutated_mod.get_global_var('func_112')
call_355 = relay.TupleGetItem(func_103_call(relay.reshape(bop_337.astype('uint16'), [7,]), relay.reshape(bop_337.astype('uint16'), [7,]), relay.reshape(uop_340.astype('uint16'), [7,]), relay.reshape(var_333.astype('float64'), [7,]), relay.reshape(bop_337.astype('int32'), [7,]), relay.reshape(uop_353.astype('uint16'), [7,]), relay.reshape(bop_350.astype('float64'), [7,]), ), 0)
call_356 = relay.TupleGetItem(func_112_call(relay.reshape(bop_337.astype('uint16'), [7,]), relay.reshape(bop_337.astype('uint16'), [7,]), relay.reshape(uop_340.astype('uint16'), [7,]), relay.reshape(var_333.astype('float64'), [7,]), relay.reshape(bop_337.astype('int32'), [7,]), relay.reshape(uop_353.astype('uint16'), [7,]), relay.reshape(bop_350.astype('float64'), [7,]), ), 0)
bop_358 = relay.logical_xor(uop_334.astype('uint64'), relay.reshape(uop_353.astype('uint64'), relay.shape_of(uop_334))) # shape=(7,)
bop_363 = relay.left_shift(uop_353.astype('uint64'), relay.reshape(uop_340.astype('uint64'), relay.shape_of(uop_353))) # shape=(7,)
bop_366 = relay.bitwise_xor(uop_353.astype('int32'), relay.reshape(bop_358.astype('int32'), relay.shape_of(uop_353))) # shape=(7,)
uop_369 = relay.asin(bop_366.astype('float32')) # shape=(7,)
output = relay.Tuple([call_342,const_343,bop_350,call_355,bop_363,uop_369,])
output2 = relay.Tuple([call_344,const_343,bop_350,call_356,bop_363,uop_369,])
func_372 = relay.Function([var_333,], output)
mod['func_372'] = func_372
mod = relay.transform.InferType()(mod)
var_373 = relay.var("var_373", dtype = "float64", shape = (7,))#candidate|373|(7,)|var|float64
output = func_372(var_373)
func_374 = relay.Function([var_373], output)
mutated_mod['func_374'] = func_374
mutated_mod = relay.transform.InferType()(mutated_mod)
const_391 = relay.const([[-2,9,9,-2,-2,-7,5,4,9]], dtype = "int32")#candidate|391|(1, 9)|const|int32
var_392 = relay.var("var_392", dtype = "int32", shape = (7, 9))#candidate|392|(7, 9)|var|int32
bop_393 = relay.left_shift(const_391.astype('int32'), var_392.astype('int32')) # shape=(7, 9)
output = bop_393
output2 = bop_393
func_400 = relay.Function([var_392,], output)
mod['func_400'] = func_400
mod = relay.transform.InferType()(mod)
var_401 = relay.var("var_401", dtype = "int32", shape = (7, 9))#candidate|401|(7, 9)|var|int32
output = func_400(var_401)
func_402 = relay.Function([var_401], output)
mutated_mod['func_402'] = func_402
mutated_mod = relay.transform.InferType()(mutated_mod)
var_408 = relay.var("var_408", dtype = "int16", shape = (11, 7))#candidate|408|(11, 7)|var|int16
const_409 = relay.const([[2,-10,5,7,-3,-6,4],[-9,4,4,7,-8,-8,1],[-3,-7,-8,-1,-8,10,-1],[4,-4,-8,10,2,9,-6],[-5,8,-4,4,-3,7,-3],[-7,-3,2,6,8,3,5],[2,-8,-10,2,1,-6,-10],[10,-9,-10,7,-10,3,9],[9,-5,-7,5,-9,-3,-4],[-7,-1,-8,5,3,-1,5],[2,-7,9,-2,-4,4,-6]], dtype = "int16")#candidate|409|(11, 7)|const|int16
bop_410 = relay.not_equal(var_408.astype('bool'), relay.reshape(const_409.astype('bool'), relay.shape_of(var_408))) # shape=(11, 7)
func_400_call = mod.get_global_var('func_400')
func_402_call = mutated_mod.get_global_var('func_402')
var_414 = relay.var("var_414", dtype = "int32", shape = (63,))#candidate|414|(63,)|var|int32
call_413 = func_400_call(relay.reshape(var_414.astype('int32'), [7, 9]))
call_415 = func_400_call(relay.reshape(var_414.astype('int32'), [7, 9]))
uop_417 = relay.sinh(bop_410.astype('float64')) # shape=(11, 7)
var_422 = relay.var("var_422", dtype = "float64", shape = (11, 7))#candidate|422|(11, 7)|var|float64
bop_423 = relay.bitwise_xor(uop_417.astype('uint64'), relay.reshape(var_422.astype('uint64'), relay.shape_of(uop_417))) # shape=(11, 7)
bop_426 = relay.floor_divide(uop_417.astype('float32'), relay.reshape(var_422.astype('float32'), relay.shape_of(uop_417))) # shape=(11, 7)
uop_429 = relay.asin(bop_423.astype('float64')) # shape=(11, 7)
uop_431 = relay.acos(uop_429.astype('float32')) # shape=(11, 7)
uop_434 = relay.erf(uop_431.astype('float64')) # shape=(11, 7)
uop_436 = relay.sqrt(uop_434.astype('float64')) # shape=(11, 7)
func_372_call = mod.get_global_var('func_372')
func_374_call = mutated_mod.get_global_var('func_374')
var_439 = relay.var("var_439", dtype = "float64", shape = (7,))#candidate|439|(7,)|var|float64
call_438 = relay.TupleGetItem(func_372_call(relay.reshape(var_439.astype('float64'), [7,])), 2)
call_440 = relay.TupleGetItem(func_374_call(relay.reshape(var_439.astype('float64'), [7,])), 2)
bop_441 = relay.subtract(uop_436.astype('uint64'), var_439.astype('uint64')) # shape=(11, 7)
uop_445 = relay.acosh(uop_436.astype('float64')) # shape=(11, 7)
var_447 = relay.var("var_447", dtype = "float64", shape = (11, 7))#candidate|447|(11, 7)|var|float64
bop_448 = relay.multiply(uop_434.astype('uint16'), relay.reshape(var_447.astype('uint16'), relay.shape_of(uop_434))) # shape=(11, 7)
var_451 = relay.var("var_451", dtype = "uint64", shape = (11, 7))#candidate|451|(11, 7)|var|uint64
bop_452 = relay.maximum(bop_441.astype('int16'), relay.reshape(var_451.astype('int16'), relay.shape_of(bop_441))) # shape=(11, 7)
func_316_call = mod.get_global_var('func_316')
func_321_call = mutated_mod.get_global_var('func_321')
var_456 = relay.var("var_456", dtype = "float32", shape = (12,))#candidate|456|(12,)|var|float32
call_455 = relay.TupleGetItem(func_316_call(relay.reshape(var_456.astype('float32'), [12,]), relay.reshape(var_456.astype('float32'), [12,]), relay.reshape(var_456.astype('float64'), [12,]), ), 2)
call_457 = relay.TupleGetItem(func_321_call(relay.reshape(var_456.astype('float32'), [12,]), relay.reshape(var_456.astype('float32'), [12,]), relay.reshape(var_456.astype('float64'), [12,]), ), 2)
uop_458 = relay.sinh(bop_452.astype('float32')) # shape=(11, 7)
uop_460 = relay.atanh(uop_445.astype('float32')) # shape=(11, 7)
bop_464 = relay.greater_equal(uop_445.astype('bool'), relay.reshape(bop_423.astype('bool'), relay.shape_of(uop_445))) # shape=(11, 7)
func_103_call = mod.get_global_var('func_103')
func_112_call = mutated_mod.get_global_var('func_112')
call_468 = relay.TupleGetItem(func_103_call(relay.reshape(call_455.astype('uint16'), [7,]), relay.reshape(call_438.astype('uint16'), [7,]), relay.reshape(call_455.astype('uint16'), [7,]), relay.reshape(call_455.astype('float64'), [7,]), relay.reshape(var_439.astype('int32'), [7,]), relay.reshape(call_438.astype('uint16'), [7,]), relay.reshape(call_438.astype('float64'), [7,]), ), 6)
call_469 = relay.TupleGetItem(func_112_call(relay.reshape(call_455.astype('uint16'), [7,]), relay.reshape(call_438.astype('uint16'), [7,]), relay.reshape(call_455.astype('uint16'), [7,]), relay.reshape(call_455.astype('float64'), [7,]), relay.reshape(var_439.astype('int32'), [7,]), relay.reshape(call_438.astype('uint16'), [7,]), relay.reshape(call_438.astype('float64'), [7,]), ), 6)
const_470 = relay.const([[8.609542,2.742927,3.179954,0.188983,0.815581,1.109597,-3.283556],[7.856424,7.013049,-3.148708,-2.697365,-2.471933,-7.810937,8.293390],[8.855609,2.759389,-1.721113,0.408825,7.000660,-7.022324,0.293551],[6.566340,0.758116,-1.743014,7.671104,-2.777493,7.280648,-5.946647],[2.446944,1.143839,-1.640573,5.314319,6.046349,-7.804925,0.476442],[5.893310,-5.874896,-0.673266,-1.948254,5.778547,-1.634452,1.561624],[-9.509284,2.701978,-5.750182,-7.842418,-7.723184,6.645051,-6.342991],[-5.692225,-7.157752,-9.675968,-6.952152,-1.408436,-1.892708,-5.867373],[-7.719813,-5.310785,4.474621,-8.940346,-4.290236,-3.814848,-7.712247],[-8.468729,-6.086921,-3.146697,7.391138,9.681319,-9.408808,-0.726229],[4.586047,5.266669,-7.767288,-1.011064,2.974428,7.495214,9.598755]], dtype = "float32")#candidate|470|(11, 7)|const|float32
bop_471 = relay.maximum(uop_460.astype('int8'), relay.reshape(const_470.astype('int8'), relay.shape_of(uop_460))) # shape=(11, 7)
var_475 = relay.var("var_475", dtype = "float64", shape = (11, 7))#candidate|475|(11, 7)|var|float64
bop_476 = relay.less_equal(uop_445.astype('bool'), relay.reshape(var_475.astype('bool'), relay.shape_of(uop_445))) # shape=(11, 7)
bop_481 = relay.greater(bop_441.astype('bool'), relay.reshape(const_409.astype('bool'), relay.shape_of(bop_441))) # shape=(11, 7)
bop_486 = relay.less(bop_471.astype('bool'), relay.reshape(var_422.astype('bool'), relay.shape_of(bop_471))) # shape=(11, 7)
var_489 = relay.var("var_489", dtype = "float32", shape = (11, 7))#candidate|489|(11, 7)|var|float32
bop_490 = relay.bitwise_or(uop_460.astype('uint32'), relay.reshape(var_489.astype('uint32'), relay.shape_of(uop_460))) # shape=(11, 7)
bop_493 = relay.bitwise_or(bop_471.astype('int32'), var_439.astype('int32')) # shape=(11, 7)
bop_497 = relay.add(uop_458.astype('int32'), relay.reshape(bop_410.astype('int32'), relay.shape_of(uop_458))) # shape=(11, 7)
bop_500 = relay.divide(uop_445.astype('float64'), relay.reshape(var_408.astype('float64'), relay.shape_of(uop_445))) # shape=(11, 7)
output = relay.Tuple([call_413,var_414,bop_426,call_438,bop_448,call_455,var_456,bop_464,call_468,bop_476,bop_481,bop_486,bop_490,bop_493,bop_497,bop_500,])
output2 = relay.Tuple([call_415,var_414,bop_426,call_440,bop_448,call_457,var_456,bop_464,call_469,bop_476,bop_481,bop_486,bop_490,bop_493,bop_497,bop_500,])
F = relay.Function([var_408,var_414,var_422,var_439,var_447,var_451,var_456,var_475,var_489,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_408,var_414,var_422,var_439,var_447,var_451,var_456,var_475,var_489,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_408= np.array([[-5,1,5,6,3,-2,6],[-4,-4,-9,-8,5,2,1],[-7,1,7,-1,-2,-6,8],[5,-7,-4,1,-1,6,3],[5,1,1,5,4,8,2],[-2,-3,6,-9,2,6,2],[-1,-9,1,8,3,-7,9],[6,1,-6,6,-8,-4,6],[-6,-1,3,3,1,-5,-7],[3,10,-9,-9,7,7,-2],[-8,3,7,10,6,-6,-7]], dtype='int16')
module1.set_input('var_408', input_408)
input_414= np.array([3,-3,-9,-8,-4,-3,2,-8,3,3,9,9,-1,-3,4,-6,-3,5,-2,10,10,10,-5,4,-6,1,-6,3,7,-4,7,8,-1,-3,8,10,9,7,10,-2,-10,-10,-5,-4,2,-5,-10,-10,-8,3,-8,-3,4,-3,-1,1,-9,-8,7,-9,9,-7,-9], dtype='int32')
module1.set_input('var_414', input_414)
input_422= np.array([[0.957065,-9.213026,3.019355,8.808461,-2.562211,4.234142,-8.259117],[-0.729264,-9.768269,-0.987605,-5.819302,-8.772802,6.023405,3.118213],[1.056944,4.272669,0.484121,-3.260725,-0.033642,-4.913192,8.650207],[-7.566550,-6.660703,1.682510,4.338032,-9.398947,7.038169,1.037659],[-9.018128,2.599522,-7.023415,-0.711749,-8.890663,-3.134038,7.092149],[1.814270,-8.994934,-6.709383,-1.607003,-0.339627,2.003882,-4.355430],[1.966674,3.409320,-9.196825,-6.427252,9.557678,-1.855383,4.970736],[-0.980689,9.297722,3.709352,4.921893,-4.427739,1.705970,0.523883],[5.153374,5.373616,1.364179,-3.150826,-6.307484,-9.282913,-7.827975],[8.157249,-0.471210,-5.661951,-7.641931,4.098967,1.920389,2.868812],[-0.329155,-5.133121,-8.973501,2.653296,-1.510436,3.263887,-9.994436]], dtype='float64')
module1.set_input('var_422', input_422)
input_439= np.array([0.222513,-8.911111,-7.145910,-4.582319,-1.870059,-8.153146,1.986616], dtype='float64')
module1.set_input('var_439', input_439)
input_447= np.array([[0.726793,-5.390343,1.953691,-5.410780,-4.181439,-0.962428,7.870656],[0.400067,4.577775,-6.675974,-7.091870,-0.820432,1.532227,4.028075],[4.940463,-8.649621,0.688428,-5.865133,1.149355,0.017239,-3.155015],[-7.586728,9.553352,0.739325,-7.179131,5.831600,-0.451739,-6.891324],[-9.246981,0.100151,-0.907050,6.284350,-7.423160,-7.734869,-8.143321],[-4.712479,5.721230,-7.520514,-6.483603,-9.352421,-7.485888,1.950226],[1.280396,-5.747629,8.192327,2.983342,1.570853,-2.502079,5.850524],[0.560633,-1.704233,-6.076183,1.317108,-9.208543,4.737118,-5.330185],[-7.377799,-0.550450,5.202332,-1.570139,2.829558,-8.442504,-8.231297],[-3.504722,-6.142118,4.629418,8.064074,-6.097520,-7.130170,9.625631],[9.757997,5.979778,7.174535,-3.454835,6.056023,-1.957403,-6.428688]], dtype='float64')
module1.set_input('var_447', input_447)
input_451= np.array([[5,-6,-10,2,2,3,-8],[9,3,8,-3,8,2,10],[7,5,-7,-6,9,-2,-4],[7,5,3,1,-3,4,10],[1,8,-9,1,7,-2,-5],[-7,9,-10,8,-2,5,-3],[9,4,7,-7,6,2,-5],[-8,-9,9,9,-4,-5,7],[-2,-8,8,-10,-4,1,8],[5,-2,-4,-10,-10,-4,-9],[1,-8,10,3,-10,3,3]], dtype='uint64')
module1.set_input('var_451', input_451)
input_456= np.array([8.966283,-5.440469,0.301129,-2.994090,-2.586355,-8.517309,5.276314,8.959298,9.143754,-4.882967,7.830887,5.143182], dtype='float32')
module1.set_input('var_456', input_456)
input_475= np.array([[5.969352,-6.741199,-9.817939,9.735106,-1.737062,-4.333504,-3.937366],[3.312548,6.642833,4.591459,-9.634166,8.541161,-6.121154,4.854001],[-3.412373,-4.134079,6.048839,-5.823665,-1.593078,1.332704,5.410264],[3.104745,-4.029719,1.840096,-2.251957,9.380659,2.717521,8.584755],[-6.598121,8.713939,6.443723,7.735980,8.553050,-5.296197,7.579902],[-0.749339,3.512374,-9.154397,-2.993719,9.004917,9.948735,5.890996],[6.741991,-5.306480,2.296383,-3.728127,0.957790,2.066047,3.783194],[-1.834207,-9.990676,6.468217,-4.856404,5.687020,5.141104,-5.897185],[0.204677,-7.489278,-9.405667,3.871510,-4.629003,-0.586422,5.270792],[-2.013298,6.109553,4.505196,2.235526,4.053387,9.574756,0.806238],[6.796648,1.424648,1.475722,4.981905,-5.039556,-2.054399,-7.877833]], dtype='float64')
module1.set_input('var_475', input_475)
input_489= np.array([[-3.563946,-8.372511,-8.599421,6.043855,5.907904,-9.714404,2.938304],[-9.152795,0.503033,-3.286587,-4.716714,-3.660885,4.658980,-8.533536],[0.856960,-5.090502,-0.484889,7.252833,-4.644573,8.635140,8.027159],[-2.078113,9.985244,3.077330,-7.207438,6.194482,-6.425911,-7.870377],[-7.607832,3.914815,4.796682,4.810227,-5.682669,-4.741613,1.396461],[3.851113,6.610967,9.490320,-5.804050,5.839772,-7.757558,5.886067],[-7.151475,-5.950385,3.315509,7.897742,6.558496,-2.733948,1.947272],[-0.546171,-1.957388,7.373843,7.517011,-3.623393,-4.354369,-0.657165],[-7.084330,4.136426,0.192964,7.438510,3.574864,8.787515,7.902272],[-2.192890,-9.860557,-4.764653,-2.337315,7.286620,-8.212778,2.685689],[0.660718,-1.067816,-3.866406,3.059200,3.515650,-7.269669,0.522568]], dtype='float32')
module1.set_input('var_489', input_489)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_408, input_414, input_422, input_439, input_447, input_451, input_456, input_475, input_489, )
res3 = intrp3.evaluate()(input_408, input_414, input_422, input_439, input_447, input_451, input_456, input_475, input_489, )
res4 = intrp4.evaluate()(input_408, input_414, input_422, input_439, input_447, input_451, input_456, input_475, input_489, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
res1_14 = module1.get_output(14).asnumpy()
res2_14 = res2[14].asnumpy()
res3_14 = res3[14].asnumpy()
res4_14 = res4[14].asnumpy()
np.testing.assert_allclose(res1_14 ,res2_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res3_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res4_14, atol=1e-3, rtol=1e-3)
(res1_14 == res2_14).all()
(res1_14 == res3_14).all()
(res1_14 == res4_14).all()
res1_15 = module1.get_output(15).asnumpy()
res2_15 = res2[15].asnumpy()
res3_15 = res3[15].asnumpy()
res4_15 = res4[15].asnumpy()
np.testing.assert_allclose(res1_15 ,res2_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res3_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res4_15, atol=1e-3, rtol=1e-3)
(res1_15 == res2_15).all()
(res1_15 == res3_15).all()
(res1_15 == res4_15).all()
module5.set_input('var_408', input_408)
module5.set_input('var_414', input_414)
module5.set_input('var_422', input_422)
module5.set_input('var_439', input_439)
module5.set_input('var_447', input_447)
module5.set_input('var_451', input_451)
module5.set_input('var_456', input_456)
module5.set_input('var_475', input_475)
module5.set_input('var_489', input_489)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_408, input_414, input_422, input_439, input_447, input_451, input_456, input_475, input_489, )
res7 = intrp7.evaluate()(input_408, input_414, input_422, input_439, input_447, input_451, input_456, input_475, input_489, )
res8 = intrp8.evaluate()(input_408, input_414, input_422, input_439, input_447, input_451, input_456, input_475, input_489, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
res5_14 = module5.get_output(14).asnumpy()
res6_14 = res6[14].asnumpy()
res7_14 = res7[14].asnumpy()
res8_14 = res8[14].asnumpy()
np.testing.assert_allclose(res5_14 ,res6_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res7_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res8_14, atol=1e-3, rtol=1e-3)
(res5_14 == res6_14).all()
(res5_14 == res7_14).all()
(res5_14 == res8_14).all()
res5_15 = module5.get_output(15).asnumpy()
res6_15 = res6[15].asnumpy()
res7_15 = res7[15].asnumpy()
res8_15 = res8[15].asnumpy()
np.testing.assert_allclose(res5_15 ,res6_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res7_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res8_15, atol=1e-3, rtol=1e-3)
(res5_15 == res6_15).all()
(res5_15 == res7_15).all()
(res5_15 == res8_15).all()
module9.set_input('var_408', input_408)
module9.set_input('var_414', input_414)
module9.set_input('var_422', input_422)
module9.set_input('var_439', input_439)
module9.set_input('var_447', input_447)
module9.set_input('var_451', input_451)
module9.set_input('var_456', input_456)
module9.set_input('var_475', input_475)
module9.set_input('var_489', input_489)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_408, input_414, input_422, input_439, input_447, input_451, input_456, input_475, input_489, )
res11 = intrp11.evaluate()(input_408, input_414, input_422, input_439, input_447, input_451, input_456, input_475, input_489, )
res12 = intrp12.evaluate()(input_408, input_414, input_422, input_439, input_447, input_451, input_456, input_475, input_489, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
res9_14 = module9.get_output(14).asnumpy()
res10_14 = res10[14].asnumpy()
res11_14 = res11[14].asnumpy()
res12_14 = res12[14].asnumpy()
np.testing.assert_allclose(res9_14 ,res10_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res11_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res12_14, atol=1e-3, rtol=1e-3)
(res9_14 == res10_14).all()
(res9_14 == res11_14).all()
(res9_14 == res12_14).all()
res9_15 = module9.get_output(15).asnumpy()
res10_15 = res10[15].asnumpy()
res11_15 = res11[15].asnumpy()
res12_15 = res12[15].asnumpy()
np.testing.assert_allclose(res9_15 ,res10_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res11_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res12_15, atol=1e-3, rtol=1e-3)
(res9_15 == res10_15).all()
(res9_15 == res11_15).all()
(res9_15 == res12_15).all()
module13.set_input('var_408', input_408)
module13.set_input('var_414', input_414)
module13.set_input('var_422', input_422)
module13.set_input('var_439', input_439)
module13.set_input('var_447', input_447)
module13.set_input('var_451', input_451)
module13.set_input('var_456', input_456)
module13.set_input('var_475', input_475)
module13.set_input('var_489', input_489)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_408, input_414, input_422, input_439, input_447, input_451, input_456, input_475, input_489, )
res15 = intrp15.evaluate()(input_408, input_414, input_422, input_439, input_447, input_451, input_456, input_475, input_489, )
res16 = intrp16.evaluate()(input_408, input_414, input_422, input_439, input_447, input_451, input_456, input_475, input_489, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
res13_14 = module13.get_output(14).asnumpy()
res14_14 = res14[14].asnumpy()
res15_14 = res15[14].asnumpy()
res16_14 = res16[14].asnumpy()
np.testing.assert_allclose(res13_14 ,res14_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res15_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res16_14, atol=1e-3, rtol=1e-3)
(res13_14 == res14_14).all()
(res13_14 == res15_14).all()
(res13_14 == res16_14).all()
res13_15 = module13.get_output(15).asnumpy()
res14_15 = res14[15].asnumpy()
res15_15 = res15[15].asnumpy()
res16_15 = res16[15].asnumpy()
np.testing.assert_allclose(res13_15 ,res14_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res15_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res16_15, atol=1e-3, rtol=1e-3)
(res13_15 == res14_15).all()
(res13_15 == res15_15).all()
(res13_15 == res16_15).all()
module17.set_input('var_408', input_408)
module17.set_input('var_414', input_414)
module17.set_input('var_422', input_422)
module17.set_input('var_439', input_439)
module17.set_input('var_447', input_447)
module17.set_input('var_451', input_451)
module17.set_input('var_456', input_456)
module17.set_input('var_475', input_475)
module17.set_input('var_489', input_489)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_408, input_414, input_422, input_439, input_447, input_451, input_456, input_475, input_489, )
res19 = intrp19.evaluate()(input_408, input_414, input_422, input_439, input_447, input_451, input_456, input_475, input_489, )
res20 = intrp20.evaluate()(input_408, input_414, input_422, input_439, input_447, input_451, input_456, input_475, input_489, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
res17_14 = module17.get_output(14).asnumpy()
res18_14 = res18[14].asnumpy()
res19_14 = res19[14].asnumpy()
res20_14 = res20[14].asnumpy()
np.testing.assert_allclose(res17_14 ,res18_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res19_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res20_14, atol=1e-3, rtol=1e-3)
(res17_14 == res18_14).all()
(res17_14 == res19_14).all()
(res17_14 == res20_14).all()
res17_15 = module17.get_output(15).asnumpy()
res18_15 = res18[15].asnumpy()
res19_15 = res19[15].asnumpy()
res20_15 = res20[15].asnumpy()
np.testing.assert_allclose(res17_15 ,res18_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res19_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res20_15, atol=1e-3, rtol=1e-3)
(res17_15 == res18_15).all()
(res17_15 == res19_15).all()
(res17_15 == res20_15).all()
module21.set_input('var_408', input_408)
module21.set_input('var_414', input_414)
module21.set_input('var_422', input_422)
module21.set_input('var_439', input_439)
module21.set_input('var_447', input_447)
module21.set_input('var_451', input_451)
module21.set_input('var_456', input_456)
module21.set_input('var_475', input_475)
module21.set_input('var_489', input_489)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_408, input_414, input_422, input_439, input_447, input_451, input_456, input_475, input_489, )
res23 = intrp23.evaluate()(input_408, input_414, input_422, input_439, input_447, input_451, input_456, input_475, input_489, )
res24 = intrp24.evaluate()(input_408, input_414, input_422, input_439, input_447, input_451, input_456, input_475, input_489, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()
res21_14 = module21.get_output(14).asnumpy()
res22_14 = res22[14].asnumpy()
res23_14 = res23[14].asnumpy()
res24_14 = res24[14].asnumpy()
np.testing.assert_allclose(res21_14 ,res22_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res23_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res24_14, atol=1e-3, rtol=1e-3)
(res21_14 == res22_14).all()
(res21_14 == res23_14).all()
(res21_14 == res24_14).all()
res21_15 = module21.get_output(15).asnumpy()
res22_15 = res22[15].asnumpy()
res23_15 = res23[15].asnumpy()
res24_15 = res24[15].asnumpy()
np.testing.assert_allclose(res21_15 ,res22_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res23_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res24_15, atol=1e-3, rtol=1e-3)
(res21_15 == res22_15).all()
(res21_15 == res23_15).all()
(res21_15 == res24_15).all()

'''83: TVMFuncCall
82: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
81: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
80: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
79: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
78: tvm::transform::Pass::operator()(tvm::IRModule) const
77: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
76: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
75: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
74: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
73: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
72: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
71: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
70: tvm::transform::Pass::operator()(tvm::IRModule) const
69: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
68: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
67: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
66: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
65: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
64: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
63: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
62: _ZN3tvm5relay16MixedModeMutato
61: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
60: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
59: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
58: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
57: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
56: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
55: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
54: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
53: _ZN3tvm5relay16MixedModeMutato
52: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
51: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
50: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
49: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
48: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
46: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''