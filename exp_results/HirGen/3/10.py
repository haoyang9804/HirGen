import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_26 = relay.var("var_26", dtype = "int64", shape = (10, 10, 8))#candidate|26|(10, 10, 8)|var|int64
var_27 = relay.var("var_27", dtype = "int64", shape = (10, 10, 8))#candidate|27|(10, 10, 8)|var|int64
bop_28 = relay.multiply(var_26.astype('int64'), relay.reshape(var_27.astype('int64'), relay.shape_of(var_26))) # shape=(10, 10, 8)
uop_31 = relay.tan(var_27.astype('float32')) # shape=(10, 10, 8)
bop_39 = relay.right_shift(uop_31.astype('int64'), relay.reshape(var_26.astype('int64'), relay.shape_of(uop_31))) # shape=(10, 10, 8)
uop_43 = relay.sqrt(uop_31.astype('float32')) # shape=(10, 10, 8)
output = relay.Tuple([bop_28,bop_39,uop_43,])
output2 = relay.Tuple([bop_28,bop_39,uop_43,])
func_46 = relay.Function([var_26,var_27,], output)
mod['func_46'] = func_46
mod = relay.transform.InferType()(mod)
mutated_mod['func_46'] = func_46
mutated_mod = relay.transform.InferType()(mutated_mod)
func_46_call = mutated_mod.get_global_var('func_46')
var_48 = relay.var("var_48", dtype = "int64", shape = (10, 10, 8))#candidate|48|(10, 10, 8)|var|int64
var_49 = relay.var("var_49", dtype = "int64", shape = (10, 10, 8))#candidate|49|(10, 10, 8)|var|int64
call_47 = func_46_call(var_48,var_49,)
output = call_47
func_50 = relay.Function([var_48,var_49,], output)
mutated_mod['func_50'] = func_50
mutated_mod = relay.transform.InferType()(mutated_mod)
var_98 = relay.var("var_98", dtype = "float32", shape = (11, 5))#candidate|98|(11, 5)|var|float32
var_99 = relay.var("var_99", dtype = "float32", shape = (11, 5))#candidate|99|(11, 5)|var|float32
bop_100 = relay.equal(var_98.astype('bool'), relay.reshape(var_99.astype('bool'), relay.shape_of(var_98))) # shape=(11, 5)
output = bop_100
output2 = bop_100
func_103 = relay.Function([var_98,var_99,], output)
mod['func_103'] = func_103
mod = relay.transform.InferType()(mod)
mutated_mod['func_103'] = func_103
mutated_mod = relay.transform.InferType()(mutated_mod)
func_103_call = mutated_mod.get_global_var('func_103')
var_105 = relay.var("var_105", dtype = "float32", shape = (11, 5))#candidate|105|(11, 5)|var|float32
var_106 = relay.var("var_106", dtype = "float32", shape = (11, 5))#candidate|106|(11, 5)|var|float32
call_104 = func_103_call(var_105,var_106,)
output = call_104
func_107 = relay.Function([var_105,var_106,], output)
mutated_mod['func_107'] = func_107
mutated_mod = relay.transform.InferType()(mutated_mod)
const_329 = relay.const([[[-7,-6,-9,-2,-1,10,9,-4,-6,4,-7,-9,9],[1,-9,-6,7,-3,-1,1,-7,-1,6,-3,-8,-8],[-8,-3,7,8,6,4,-6,-10,-4,-6,1,7,-3],[-10,7,-5,5,3,3,9,3,-3,-2,5,5,5],[7,3,-10,10,-9,2,2,-5,7,2,-7,9,1]],[[3,5,2,-10,1,-6,-9,5,-10,-9,10,8,5],[1,5,10,-8,10,7,4,1,-1,8,6,-3,-10],[-8,-8,-6,-9,-1,-2,5,10,1,-2,-8,7,-10],[-2,5,-7,2,9,6,-2,-8,7,-4,5,-3,-10],[-1,4,7,6,10,8,-1,-4,5,-4,-8,-4,8]],[[-10,8,1,-6,-1,-3,-8,2,-6,2,-10,4,8],[4,6,3,2,-5,-1,8,-7,-10,-5,-10,-5,-1],[-9,-8,-8,-1,4,-10,7,9,-10,1,9,2,-2],[-5,5,2,2,3,2,-4,-1,-1,4,6,9,9],[7,-2,-4,-7,-2,4,-9,-3,2,7,4,10,8]],[[-1,-3,4,4,10,2,8,6,-7,-9,-6,-10,2],[1,-1,10,-7,-4,5,-7,-7,-2,-3,9,3,-2],[8,-2,-5,6,3,10,9,10,-2,-8,-6,-4,-9],[10,-10,1,-4,2,-5,7,-4,-7,-1,-6,-4,1],[-7,8,7,-7,2,-7,-2,-8,-7,6,-10,-4,-8]],[[3,7,1,-9,9,8,-5,6,7,-2,5,-9,-1],[-4,1,7,3,8,-7,4,4,-4,2,-4,-7,3],[-6,-3,-3,-3,-8,-8,4,6,4,-1,-1,9,4],[2,10,3,10,-4,-2,7,7,2,1,7,7,-4],[-3,-2,6,8,9,-3,-9,2,-4,-1,4,6,-9]],[[-1,-1,5,-9,2,-10,3,-4,-10,3,-4,1,-10],[7,10,-1,4,-7,-7,-7,2,-1,-9,-1,-10,9],[3,-9,4,-1,6,5,-3,1,9,-10,7,5,-10],[5,3,4,-5,-9,3,-5,-1,8,-5,5,-9,4],[-8,-4,-7,8,4,-4,-7,1,-10,-8,9,4,-5]],[[7,-5,1,-9,-2,3,-4,2,-9,-10,8,9,2],[9,1,6,9,-8,-5,-3,-3,4,7,-7,4,1],[1,5,-7,1,10,7,-1,8,-3,-2,1,-6,-2],[7,4,8,-7,9,9,3,9,1,-6,-5,-1,-7],[-5,-3,10,4,9,9,7,1,10,-7,5,-1,6]],[[3,-3,2,-5,-4,6,-9,10,-10,-10,4,6,-10],[-1,3,7,9,-6,7,-5,-6,-8,5,-5,-6,-7],[-4,4,-3,5,6,-1,1,3,9,-8,10,-8,-6],[1,7,-4,8,-2,-5,-6,8,-6,-5,4,9,-8],[8,4,-10,-5,3,-5,9,4,6,-7,-7,5,1]],[[7,1,-9,-1,4,7,8,9,1,-3,-4,-4,5],[-3,7,-10,-6,-10,-2,7,2,-5,4,-6,-6,1],[-9,-2,-10,5,-10,10,9,-10,-10,-7,3,-5,-10],[5,9,7,-2,-2,-3,-8,5,-9,-7,-3,8,-1],[6,9,8,-3,9,-7,-6,-3,-10,-3,8,-7,-3]],[[-4,-2,3,5,-7,5,4,-9,-4,1,-5,-8,-4],[-10,-5,-1,5,8,-5,-1,7,-2,1,1,-8,5],[-3,-10,1,-10,-5,7,-8,10,-7,-6,7,5,-1],[3,1,1,-3,3,-2,-2,5,9,-4,7,-9,6],[-2,4,-7,3,5,2,-6,3,7,7,5,-5,6]],[[-2,6,-9,-9,4,-9,4,10,3,-10,-5,2,-8],[1,-9,7,10,-9,4,3,4,6,8,-3,-3,9],[-9,-4,-9,-2,10,10,-5,-2,-7,-10,8,8,-1],[9,1,3,-1,8,-2,10,4,-3,-9,9,-9,-6],[4,-5,2,-10,-3,6,2,6,8,5,6,-10,-2]],[[-2,9,-9,1,-9,-9,-9,-4,8,10,-9,2,10],[-9,-4,3,-3,5,7,-6,-2,-7,-9,7,-8,-3],[-7,10,-4,10,-1,5,5,-4,9,-9,6,3,9],[-7,9,4,7,-3,-3,9,8,-8,8,-5,3,-8],[-2,-8,-1,7,-5,5,-5,2,-1,-1,-7,-2,-2]],[[-1,-5,-8,2,-9,1,2,-7,7,-5,-9,2,-5],[-1,-3,4,-10,7,-7,3,1,-1,9,9,-1,7],[-1,2,-5,3,-7,-5,7,4,10,-9,9,-3,-2],[-4,-9,5,-9,7,1,3,-8,-5,-10,-10,-4,1],[-3,-2,1,7,7,1,10,-2,-10,9,5,7,-10]],[[-6,-8,-8,3,5,5,3,6,10,4,7,6,5],[7,-7,-9,-1,-1,-7,8,6,5,-9,-5,-7,10],[-4,9,10,-9,2,3,4,-2,-8,-2,6,-4,-8],[-4,8,10,-2,1,-6,-2,-10,-4,7,-5,8,9],[-5,-7,-6,2,4,-7,-3,-10,-1,-9,-5,3,-9]],[[-9,6,-1,5,-5,-6,4,-1,8,-9,6,1,1],[8,-2,-4,6,-2,-10,2,7,-6,-1,4,-2,-8],[-5,4,8,1,1,-2,-3,1,-1,-3,-4,-1,-6],[4,10,-6,2,-2,-2,-10,-8,9,5,9,6,4],[10,4,-2,4,2,-10,2,5,-7,-8,-7,8,-10]]], dtype = "int8")#candidate|329|(15, 5, 13)|const|int8
var_330 = relay.var("var_330", dtype = "int8", shape = (15, 5, 13))#candidate|330|(15, 5, 13)|var|int8
bop_331 = relay.maximum(const_329.astype('int8'), relay.reshape(var_330.astype('int8'), relay.shape_of(const_329))) # shape=(15, 5, 13)
uop_344 = relay.acosh(bop_331.astype('float32')) # shape=(15, 5, 13)
bop_346 = relay.minimum(uop_344.astype('int8'), relay.reshape(var_330.astype('int8'), relay.shape_of(uop_344))) # shape=(15, 5, 13)
func_46_call = mod.get_global_var('func_46')
func_50_call = mutated_mod.get_global_var('func_50')
var_350 = relay.var("var_350", dtype = "int64", shape = (1, 800))#candidate|350|(1, 800)|var|int64
call_349 = relay.TupleGetItem(func_46_call(relay.reshape(var_350.astype('int64'), [10, 10, 8]), relay.reshape(var_350.astype('int64'), [10, 10, 8]), ), 2)
call_351 = relay.TupleGetItem(func_50_call(relay.reshape(var_350.astype('int64'), [10, 10, 8]), relay.reshape(var_350.astype('int64'), [10, 10, 8]), ), 2)
output = relay.Tuple([bop_346,call_349,var_350,])
output2 = relay.Tuple([bop_346,call_351,var_350,])
func_353 = relay.Function([var_330,var_350,], output)
mod['func_353'] = func_353
mod = relay.transform.InferType()(mod)
var_354 = relay.var("var_354", dtype = "int8", shape = (15, 5, 13))#candidate|354|(15, 5, 13)|var|int8
var_355 = relay.var("var_355", dtype = "int64", shape = (1, 800))#candidate|355|(1, 800)|var|int64
output = func_353(var_354,var_355,)
func_356 = relay.Function([var_354,var_355,], output)
mutated_mod['func_356'] = func_356
mutated_mod = relay.transform.InferType()(mutated_mod)
var_364 = relay.var("var_364", dtype = "float64", shape = (7, 12, 11))#candidate|364|(7, 12, 11)|var|float64
uop_365 = relay.sinh(var_364.astype('float64')) # shape=(7, 12, 11)
func_353_call = mod.get_global_var('func_353')
func_356_call = mutated_mod.get_global_var('func_356')
var_369 = relay.var("var_369", dtype = "int8", shape = (975,))#candidate|369|(975,)|var|int8
const_370 = relay.const([[6,-6,-7,-1,-3,7,9,4,8,5,-9,-1,10,-3,1,-9,7,8,-2,-4,-7,2,1,-7,4,-7,6,3,-1,-2,10,-1,-9,-1,-10,-6,8,-3,8,7,4,6,1,-8,8,7,5,4,-7,-5,-2,3,2,6,-8,1,7,3,-9,-2,-3,6,5,2,-7,-8,-9,-8,9,-3,6,-10,-3,3,-4,-2,4,-4,10,-2,2,-7,-2,-4,-8,9,-2,7,2,9,6,4,9,-10,4,7,1,1,-8,4],[3,-10,-4,10,8,1,-1,6,3,-9,6,-4,-2,2,-9,8,2,5,-8,2,-4,-1,-8,-5,1,-9,-1,-5,8,-5,-6,9,2,3,-10,-5,8,9,1,8,-9,-10,-9,-3,4,4,-2,7,-8,3,5,-4,4,-10,9,-8,4,9,4,-10,2,2,6,10,-2,-2,1,-2,9,-3,-2,7,10,1,7,-4,-5,5,-8,7,-7,6,7,6,-10,4,-9,-7,-6,3,-8,-4,-5,-8,5,-10,-4,-2,-4,7],[-7,-5,-4,5,9,-5,5,3,10,3,-5,-8,1,2,-8,9,-1,-2,-5,5,5,2,-9,1,6,-5,-9,2,4,-3,-4,-8,7,8,-8,-5,-4,2,3,3,9,2,2,8,-9,-8,3,6,7,1,10,8,-4,7,8,-9,-7,-5,-5,5,-5,-7,-9,8,10,3,7,3,-6,1,10,10,-10,-8,-7,-3,6,-3,-4,10,2,5,7,-3,8,-4,5,-8,9,4,-9,-10,-6,9,-6,7,4,-7,1,3],[-5,10,3,7,-3,9,7,-8,-4,4,-6,8,-2,-1,7,2,1,4,-9,-5,3,6,-7,4,9,-3,-8,7,6,-2,-3,6,6,9,4,-8,2,-8,8,2,9,-4,-6,8,-10,8,-7,-9,-6,-10,2,7,4,3,-7,-9,10,-5,4,-2,-6,-8,-5,-7,3,1,-7,-1,2,-1,9,-7,-3,7,6,2,8,-4,-6,3,-8,7,3,-6,-2,-5,-7,1,-5,-9,-8,2,10,-8,-8,-6,-7,4,2,4],[7,4,2,-5,-4,5,-3,7,-6,10,7,-4,10,4,-6,-6,8,6,-7,-4,-5,-4,-9,-4,7,-10,-1,-1,-2,4,1,-2,2,-8,1,2,2,-6,7,5,7,10,-10,10,-4,-2,4,6,2,-7,-6,10,-4,-9,8,7,-9,-3,8,3,-6,8,10,6,-10,6,-1,-5,3,-8,-6,-6,3,-6,-1,-4,-5,-6,8,9,-4,-5,-1,10,2,5,-4,-5,-8,-10,1,5,8,-2,-3,6,4,-2,2,9],[1,-6,-2,-2,1,9,-5,9,-8,-10,10,10,-7,-10,-6,5,-2,-2,1,7,7,-5,2,8,2,1,-5,-9,5,3,10,-9,-8,-9,5,10,-3,4,8,-5,1,-6,9,9,5,-5,10,7,3,9,-3,-9,6,4,-7,-6,-9,7,8,-1,-7,-5,-10,-9,10,10,6,4,7,8,10,-4,-6,8,6,6,8,2,-6,1,-8,-3,-2,-8,4,-5,-10,3,8,2,1,-7,1,-6,-2,-5,8,7,-3,-1],[1,-3,-4,10,8,-8,-2,-7,-8,-10,-10,1,2,-9,4,-4,-9,9,3,-7,-3,-9,10,6,9,-8,-10,6,-10,-9,-9,1,-9,-1,-10,-3,-3,-8,10,-3,-1,-7,-2,4,-2,-6,7,-10,8,9,10,-10,6,-8,-3,5,-9,-6,-7,-3,-5,-9,4,7,1,-1,1,5,-1,-4,-1,-8,-3,-3,7,1,-3,-2,-10,-1,6,3,3,-5,-1,9,-9,-2,3,5,9,2,6,3,5,-10,-5,-10,-3,3],[5,-5,2,1,3,7,-1,8,-5,7,2,-2,-2,-5,9,-8,3,1,1,1,9,7,-7,1,-3,-1,-6,4,-5,-3,-9,1,4,-5,5,10,4,-5,-2,4,-3,-10,9,-6,-3,1,2,3,-3,3,-4,1,8,-2,10,-6,10,3,2,-6,-10,8,-6,-10,-9,6,-3,3,2,-4,9,5,-7,-1,-8,5,-3,-2,2,-9,-4,-6,3,-10,3,5,-7,-5,9,-5,-4,-6,3,-7,9,-8,2,-10,3,10]], dtype = "int64")#candidate|370|(8, 100)|const|int64
call_368 = relay.TupleGetItem(func_353_call(relay.reshape(var_369.astype('int8'), [15, 5, 13]), relay.reshape(const_370.astype('int64'), [1, 800]), ), 1)
call_371 = relay.TupleGetItem(func_356_call(relay.reshape(var_369.astype('int8'), [15, 5, 13]), relay.reshape(const_370.astype('int64'), [1, 800]), ), 1)
output = relay.Tuple([uop_365,call_368,var_369,const_370,])
output2 = relay.Tuple([uop_365,call_371,var_369,const_370,])
func_376 = relay.Function([var_364,var_369,], output)
mod['func_376'] = func_376
mod = relay.transform.InferType()(mod)
mutated_mod['func_376'] = func_376
mutated_mod = relay.transform.InferType()(mutated_mod)
func_376_call = mutated_mod.get_global_var('func_376')
var_378 = relay.var("var_378", dtype = "float64", shape = (7, 12, 11))#candidate|378|(7, 12, 11)|var|float64
var_379 = relay.var("var_379", dtype = "int8", shape = (975,))#candidate|379|(975,)|var|int8
call_377 = func_376_call(var_378,var_379,)
output = call_377
func_380 = relay.Function([var_378,var_379,], output)
mutated_mod['func_380'] = func_380
mutated_mod = relay.transform.InferType()(mutated_mod)
var_480 = relay.var("var_480", dtype = "float64", shape = (8, 7))#candidate|480|(8, 7)|var|float64
uop_481 = relay.asin(var_480.astype('float64')) # shape=(8, 7)
output = relay.Tuple([uop_481,])
output2 = relay.Tuple([uop_481,])
func_506 = relay.Function([var_480,], output)
mod['func_506'] = func_506
mod = relay.transform.InferType()(mod)
var_507 = relay.var("var_507", dtype = "float64", shape = (8, 7))#candidate|507|(8, 7)|var|float64
output = func_506(var_507)
func_508 = relay.Function([var_507], output)
mutated_mod['func_508'] = func_508
mutated_mod = relay.transform.InferType()(mutated_mod)
const_572 = relay.const([[[9,-4,-3,-4,-9,9,-7,6,7,-8,7,1,-9,-4,-5],[6,-7,8,3,7,8,-9,-1,9,-6,-2,5,4,4,-6],[-8,-1,-3,7,1,-7,1,4,-4,9,1,2,7,-2,3],[-10,-10,-8,-9,8,-10,-9,-4,5,7,7,-7,4,4,-3],[-3,8,3,6,-2,4,-1,2,-9,3,-1,5,-9,2,-6]],[[8,7,3,-3,-5,-3,-6,-5,2,-7,9,-5,-8,5,6],[4,-3,4,-4,-6,2,10,-6,8,7,2,5,-4,10,2],[3,1,-10,1,-2,3,-6,3,5,9,7,2,7,-5,-5],[2,-5,-3,8,9,3,-3,4,-1,7,5,-1,8,-4,6],[1,9,-3,-3,8,-10,-7,-2,-6,1,4,9,-6,-7,9]],[[-2,-3,10,-5,8,6,-6,8,-3,-10,-10,-4,-10,-6,-1],[-10,7,3,-1,2,-2,7,1,-6,4,3,-10,2,9,9],[-3,2,4,9,4,7,10,-3,-9,-9,7,-6,-9,9,8],[-8,6,-3,5,-6,-3,-4,6,6,-8,-8,-7,2,-5,-5],[-8,6,-3,4,2,7,-4,-10,8,-6,3,1,-2,-7,5]],[[-2,3,5,-6,5,1,-5,1,-5,-5,5,-7,-7,3,-6],[4,-9,5,-4,-7,10,9,2,5,8,8,-6,-4,-4,5],[-3,-9,7,-10,-6,9,4,-3,9,4,6,5,-9,-4,-5],[-4,-9,3,-8,6,2,1,-5,-2,2,6,-10,-1,9,3],[-6,2,-1,-1,2,4,-3,9,9,6,9,-3,-2,-9,2]],[[7,-10,-3,-8,1,-2,-3,10,-4,-5,-2,4,-7,-2,9],[10,-1,-7,-1,-1,-4,-7,-9,-10,6,5,2,-3,-6,-5],[8,3,4,-6,-6,7,-1,8,1,-2,3,-5,5,-4,-3],[-7,4,10,3,-5,4,-10,8,4,-8,-6,-4,-8,7,3],[10,-10,-2,-4,-6,-4,3,-7,2,10,-10,2,7,6,-9]],[[5,8,8,4,5,-3,4,4,8,-5,-7,5,10,7,-8],[-2,10,6,10,-9,4,5,-7,9,5,4,-8,9,-2,1],[-5,-3,-3,-10,-1,-1,1,2,4,-3,-3,3,7,9,-10],[-9,5,7,-1,4,-6,-6,10,-4,7,-7,4,6,-2,9],[7,-7,2,-10,-3,-4,9,5,-5,-6,-6,-7,-1,-10,-7]],[[-6,-10,5,-7,2,1,-8,-5,-10,1,7,8,-8,4,-5],[8,5,2,-10,7,8,10,-6,8,9,3,9,-9,-4,6],[4,-1,-3,-9,4,7,-1,10,3,-7,-9,8,6,4,10],[9,5,-5,5,-3,9,2,8,1,-10,-6,1,-7,-1,6],[3,9,7,8,7,2,-3,8,-8,5,-5,7,4,2,-4]]], dtype = "uint16")#candidate|572|(7, 5, 15)|const|uint16
const_573 = relay.const([[[-8,9,-10,6,-8,6,3,4,1,9,-8,-5,5,6,5],[-1,-8,10,-3,-1,5,8,1,3,2,10,-2,4,5,9],[-5,-2,-1,1,1,6,-3,-6,-4,6,5,-5,3,4,9],[-9,-6,-7,5,10,4,-4,10,-1,10,-8,3,2,5,5],[1,-8,5,5,-7,-6,1,-8,-1,-3,6,6,9,7,-7]],[[-7,6,-7,-3,3,-7,1,-10,-1,7,1,-9,5,8,9],[-4,-6,-4,-1,7,-6,-2,4,-7,-2,9,8,-10,-6,-2],[-4,1,-7,6,3,2,8,8,6,7,8,1,5,-8,10],[6,-6,-7,-4,-1,-4,6,-8,6,-10,2,-10,-5,-4,6],[2,-1,10,3,9,-9,-8,-7,-9,-10,7,-6,-7,-1,-3]],[[9,10,-6,-8,-4,-5,-1,10,-1,2,-8,7,5,-5,7],[7,3,-5,-10,10,-9,-9,-7,-10,-7,-2,-3,-9,3,7],[3,-5,3,-5,-3,9,9,-4,-6,-7,-9,8,-7,10,-2],[-9,3,1,-4,-1,3,-6,-7,-9,5,7,-6,-5,1,-3],[4,-6,-6,7,5,-6,7,9,2,-10,-7,-2,2,-5,5]],[[-6,2,8,-10,9,-2,-4,-6,-4,2,-7,10,1,9,5],[-6,2,6,9,4,3,-2,6,9,-8,5,7,7,7,6],[9,-6,9,3,-10,-5,-3,-10,-6,-9,10,-2,-9,-7,-6],[-2,-2,-7,2,10,-5,7,-3,-8,-5,-5,-3,2,-9,-2],[-1,-1,-3,-5,-8,-9,1,2,-10,-6,9,10,2,6,2]],[[-8,2,-7,8,2,-8,-1,-4,6,3,-10,5,4,3,-9],[-8,9,6,7,-9,-2,-7,-7,-5,-6,5,1,-8,-7,7],[-8,-3,-6,-5,7,-9,1,3,8,3,6,-2,9,-6,-2],[2,-9,-9,8,-8,-9,3,5,-10,-3,7,-2,-10,10,9],[10,-4,-8,6,8,-10,-10,-9,-10,8,-1,-7,-5,-5,-5]],[[-8,6,6,6,2,5,-3,9,-10,8,-4,-2,-3,8,-3],[-10,7,-3,-4,2,-5,1,2,9,-7,-9,-7,2,9,5],[10,-4,-5,-10,8,-6,9,-10,-7,4,-7,7,-3,1,6],[7,-5,-4,10,1,6,-2,7,7,-10,-8,-1,10,-3,-9],[8,8,4,6,-6,3,-4,-6,-6,3,-3,4,7,9,6]],[[-2,1,-10,1,-3,2,-8,1,-5,8,-3,-10,-4,-3,-10],[10,-3,-9,-8,-8,-9,6,-5,1,4,-10,8,-5,1,-7],[5,1,8,1,-2,8,-7,9,1,-4,9,1,-5,2,-4],[-7,4,-5,7,2,-4,3,5,5,-9,-1,2,8,8,-3],[6,-1,7,-7,-3,6,-9,9,8,-10,-3,-7,-4,-4,4]]], dtype = "uint16")#candidate|573|(7, 5, 15)|const|uint16
bop_574 = relay.maximum(const_572.astype('uint16'), relay.reshape(const_573.astype('uint16'), relay.shape_of(const_572))) # shape=(7, 5, 15)
func_46_call = mod.get_global_var('func_46')
func_50_call = mutated_mod.get_global_var('func_50')
var_579 = relay.var("var_579", dtype = "int64", shape = (8, 100))#candidate|579|(8, 100)|var|int64
call_578 = relay.TupleGetItem(func_46_call(relay.reshape(var_579.astype('int64'), [10, 10, 8]), relay.reshape(var_579.astype('int64'), [10, 10, 8]), ), 1)
call_580 = relay.TupleGetItem(func_50_call(relay.reshape(var_579.astype('int64'), [10, 10, 8]), relay.reshape(var_579.astype('int64'), [10, 10, 8]), ), 1)
bop_582 = relay.minimum(var_579.astype('float64'), relay.reshape(call_578.astype('float64'), relay.shape_of(var_579))) # shape=(8, 100)
bop_585 = relay.minimum(var_579.astype('float64'), relay.reshape(call_580.astype('float64'), relay.shape_of(var_579))) # shape=(8, 100)
func_353_call = mod.get_global_var('func_353')
func_356_call = mutated_mod.get_global_var('func_356')
const_588 = relay.const([[9,-10,-7,-8,-5,-5,-2,5,10,6,5,-4,3,5,-2,-4,3,5,-3,2,1,-10,-6,5,-7,1,-3,1,6,7,-1,10,7,5,10,9,3,-6,-6,-8,-6,-7,5,-2,-3,9,-2,-1,-6,-10,-4,-10,10,-7,-9,-1,3,1,-5,-8,-5,-4,10,5,-2,2,4,4,-8,-10,7,3,9,-9,-8,-5,-6,10,-6,1,10,3,-5,-7,9,1,1,7,7,-8,-3,-10,4,6,-4,8,-10,5,-10,-10,2,-5,7,-4,-8,-1,-5,-3,-10,-9,-5,6,9,-3,-6,8,-6,2,6,8,-10,6,-2,4,-7,-6,-1,-10,-6,7,-3,1,-9,3,-8,-9,1,-6,6,5,-5,10,3,-4,10,-2,-8,2,-3,3,7,-4,9,3,9,3,-9,10,10,3,-7,2,-8,-5,1,-6,9,-9,7,-6,-2,-10,9,-4,-6,-8,4,10,-4,4,-4,4,-8,4,6,4,10,-10,-6,7,-5,-6,-2,-2,-5,2,7,-3,-10,2,8,6,2,6,-4,1,-7,-10,-7,-7,-9,10,-4,10,-1,-2,8,6,5,7,6,-1,-7,3,-3,4,7,9,8,-5,-10,7,-6,8,-6,3,5,4,6,5,8,-5,-5,8,2,2,2,-1,-4,-10,-6,-2,-10,2,-8,7,-8,2,-5,-7,-6,10,-8,-6,2,3,-10,8,3,-6,-10,-6,-5,2,-1,-8,7,2,-9,-8,-6,-8,5,-8,7,-1,9,7,-10,-6,9,-5,-10,-4,7,9,-2,-10,2,-9,-2,-7,-2,6,3,-10,-4,1,-3,-2,-6,4,5,-6,3,-7,8,7,8,9,-5,-6,-3,10,1,-8,2,-6,9,-5,9,-9,-6,4,-2,-7,-1,4,7,2,10,8,4,-1,8,-5,-8,4,3,-9,-1,9,-7,-10,1,-6,-1,-2,-8,8,-7,-3,-7,2,-4,-4,7,-1,-10,-1,-2,-1,3,10,6,-7,2,9,-6,-1,2,-7,9,-3,8,10,-3,3,-6,-7,-10,5,-4,-3,-7,-3,10,-8,-10,9,-7,6,-2,7,-9,-8,1,-2,10,-7,2,6,10,2,-6,-7,-10,2,9,7,6,-8,-1,-1,-10,9,-8,3,-10,-9,-3,-9,9,-4,3,-8,-9,5,9,-4,-4,-10,-10,2,5,6,8,-3,-7,5,8,-10,-2,-10,2,-1,-7,-1,-3,8,-6,7,2,-3,7,-10,1,-4,6,5,10,-4,-6,-5,-8,6,1,-8,-5,3,-8,7,-4,4,6,6,5,2,-5,-10,-2,-6,2,-6,-6,-9,2,6,8,6,1,-10,1,6,9,-6,-2,5,-8,-3,8,9,-9,-7,-8,10,2,4,2,-7,7,3,8,5,9,-2,-1,8,-7,6,-8,5,-6,3,-10,-10,-8,8,3,3,3,-8,6,6,-2,1,1,-10,-4,7,-7,-10,-4,-2,2,-10,1,-1,5,-2,-2,-7,-8,1,3,-7,9,-5,6,1,-3,4,8,-4,-5,-9,1,9,4,3,-10,-8,-8,1,10,-1,-10,10,-10,-10,-1,1,7,-3,-2,10,7,-8,-1,-8,-10,8,5,5,-10,-10,5,5,3,-3,-4,-4,3,5,-2,6,3,-1,2,4,10,5,5,-7,7,3,5,2,1,1,-2,5,-1,-2,2,-4,-9,-10,-10,3,9,9,-3,-1,8,-10,-10,-6,1,1,3,8,6,-8,-6,-4,-9,8,-3,8,4,-4,5,3,-7,1,-2,3,6,-6,4,-7,4,7,-8,-1,-5,5,4,-5,-4,10,-5,8,4,-6,-6,1,10,-9,5,1,6,9,5,8,10,9,-1,-9,-1,-5,-7,6,6,-6,-7,8,-4,-3,1,-10,1,8,-6,-9,1,-3,2,-6,5,7,2,5,-2,-6,-10,-6,8,3,3,1,7,2,3,8,-3,-2,-10,-10,-5,-7,-3,-6,-9,4,-2,-5,9,10,9,-2,3,-7,8,5,-2,-8,7,7,-2,5,-8,-5,-10,-10,3,1,-5,8,4,9,-6,-4,-1,-9,3,-9,6,7,10,-7,1,-8,-6,2,-8,7,-7,8,-1,-5,3,-5,-9,-5,4,-2,9,1,-6,5,-5,-9,5,-2,-6,-3,2,-8,-2,2,6,-1,5,10,7,5,-2,-6,-6,5,7,1,-8,10,1,-6,-5,-1,10,-2,-1,-1,-3,-9,-7,-9,2,6,8,-10,8,-7,4,5,-1,3,4,-2,4,4,-6,8,2,8,1,-10,-5,-4,-4,4,-6,5,4,-6,1,-10,2,4,1,5,-1,1,-1,6,-5,-3,9,2,-7,2,6,-4,-9,4,2,1,6,3,10,7,2,-8,-5,-6,7,-2,-9,1,7,-9,-7,-6,4,-2,-9,-2,6,3,8,-8,7,-8,-6,-8,6,-4,8,6,7,8,7,-6,10,6,9,5,-4,6,-3,3,-10,2,6,1,6,-1,1,-9,7,1,1,-5,6,-5,6,8,-8,5,8,7,-7,-10,8,-1,5,2,-5,-1,10,2,7,-3,10,-8,6,-2,-4,3,-2,-6,6,2,-6]], dtype = "int8")#candidate|588|(1, 975)|const|int8
call_587 = relay.TupleGetItem(func_353_call(relay.reshape(const_588.astype('int8'), [15, 5, 13]), relay.reshape(var_579.astype('int64'), [1, 800]), ), 2)
call_589 = relay.TupleGetItem(func_356_call(relay.reshape(const_588.astype('int8'), [15, 5, 13]), relay.reshape(var_579.astype('int64'), [1, 800]), ), 2)
func_506_call = mod.get_global_var('func_506')
func_508_call = mutated_mod.get_global_var('func_508')
var_593 = relay.var("var_593", dtype = "float64", shape = (56,))#candidate|593|(56,)|var|float64
call_592 = relay.TupleGetItem(func_506_call(relay.reshape(var_593.astype('float64'), [8, 7])), 0)
call_594 = relay.TupleGetItem(func_508_call(relay.reshape(var_593.astype('float64'), [8, 7])), 0)
func_506_call = mod.get_global_var('func_506')
func_508_call = mutated_mod.get_global_var('func_508')
call_601 = relay.TupleGetItem(func_506_call(relay.reshape(call_592.astype('float64'), [8, 7])), 0)
call_602 = relay.TupleGetItem(func_508_call(relay.reshape(call_592.astype('float64'), [8, 7])), 0)
output = relay.Tuple([bop_574,bop_582,call_587,const_588,call_592,var_593,call_601,])
output2 = relay.Tuple([bop_574,bop_585,call_589,const_588,call_594,var_593,call_602,])
func_608 = relay.Function([var_579,var_593,], output)
mod['func_608'] = func_608
mod = relay.transform.InferType()(mod)
var_609 = relay.var("var_609", dtype = "int64", shape = (8, 100))#candidate|609|(8, 100)|var|int64
var_610 = relay.var("var_610", dtype = "float64", shape = (56,))#candidate|610|(56,)|var|float64
output = func_608(var_609,var_610,)
func_611 = relay.Function([var_609,var_610,], output)
mutated_mod['func_611'] = func_611
mutated_mod = relay.transform.InferType()(mutated_mod)
var_643 = relay.var("var_643", dtype = "int16", shape = (8, 13, 8))#candidate|643|(8, 13, 8)|var|int16
var_644 = relay.var("var_644", dtype = "int16", shape = (8, 13, 8))#candidate|644|(8, 13, 8)|var|int16
bop_645 = relay.not_equal(var_643.astype('bool'), relay.reshape(var_644.astype('bool'), relay.shape_of(var_643))) # shape=(8, 13, 8)
const_652 = relay.const([[[-8,-10,4,5,-3,-10,4,1],[-2,1,-6,-3,-2,-3,-2,10],[1,-5,6,-2,-4,4,-2,-1],[-6,10,-3,-2,-8,2,3,-9],[4,7,5,-8,2,6,9,-8],[8,-6,3,-5,-7,10,-9,-4],[5,4,9,-9,-8,-6,-2,3],[-4,-2,10,-7,-6,-7,-8,-9],[-2,-4,-7,-3,8,1,6,2],[4,7,3,1,1,-6,8,-3],[-10,-1,-10,9,6,7,-3,-1],[5,1,2,-9,9,-3,3,-9],[-2,10,-7,-7,-1,6,-5,1]],[[5,-10,-3,9,4,-10,7,-10],[10,-1,8,-3,-6,3,7,1],[-7,8,-10,1,-10,-3,-10,8],[-4,8,-8,-1,9,-6,-1,8],[-10,7,7,5,8,-8,2,8],[-6,-8,-9,-1,-6,-5,-5,-2],[-1,-6,8,8,9,6,-2,5],[-3,4,-3,-10,-3,-3,-8,-3],[7,-9,-1,1,-5,-1,-3,6],[-1,-6,7,-3,-1,-9,5,-9],[-3,7,9,4,-7,10,-3,-4],[1,9,7,10,-10,6,5,8],[-8,-2,5,9,-2,9,-9,10]],[[-4,10,2,-1,1,10,5,-3],[-2,-9,2,-6,9,10,10,-8],[8,8,-9,4,8,-5,-3,7],[-5,2,-4,-10,8,1,-9,-4],[8,-10,-3,-7,10,6,-2,9],[-7,5,-1,-4,-4,-7,-3,-1],[-7,8,-5,2,6,-9,1,6],[-10,1,5,-10,-10,5,2,-4],[6,8,6,-9,8,-3,-7,-8],[1,8,-3,-6,-7,-8,-6,7],[-6,-5,7,-5,3,3,-8,-7],[-10,-4,3,-6,2,1,-6,-1],[-5,5,2,6,-9,-5,10,5]],[[-5,3,-10,10,4,-9,2,-5],[6,-9,-1,4,-4,8,-1,5],[3,-7,10,-6,-1,-7,6,-9],[1,3,-3,-3,-7,2,-5,5],[-9,-4,10,-5,8,3,3,8],[-10,-7,7,-9,-2,-2,1,6],[10,9,1,-10,-6,-3,-4,5],[2,-6,-4,3,7,-5,-3,-10],[-3,2,5,-3,4,1,6,4],[10,7,5,3,5,2,-9,10],[1,5,3,-6,3,7,-5,-7],[10,-2,4,-7,-1,7,-3,-1],[-7,10,-6,9,6,-1,8,6]],[[4,1,1,-6,-8,4,8,-6],[4,8,-2,9,4,9,-10,8],[-4,1,-8,10,10,9,-1,-4],[1,-5,9,-5,6,3,-10,9],[1,-9,-8,4,3,5,-10,-9],[1,8,-1,-2,-4,4,-9,7],[-4,-6,-5,8,6,4,-4,-9],[-10,-6,-7,-8,5,-6,-5,-2],[-9,-9,3,-6,3,-4,-4,2],[1,5,-6,10,2,-8,1,6],[-10,-8,-4,-1,4,-6,10,2],[-7,1,9,7,-9,10,6,-4],[1,-9,-6,-6,8,9,-1,1]],[[-8,-3,4,-8,-6,-7,-4,-9],[4,-2,10,1,1,8,-8,1],[-3,-3,-4,-4,-9,3,3,-10],[1,7,1,1,-5,5,-2,-1],[9,-2,7,5,6,-1,1,-5],[-3,-6,-10,8,10,9,8,-4],[6,-1,-3,-8,4,9,-9,8],[7,-8,-2,2,-10,3,3,-4],[-7,-1,-9,1,-6,-9,-5,9],[-2,8,-3,-6,-3,10,8,6],[-9,6,-4,3,7,7,8,3],[10,4,4,-6,-10,-5,-10,-6],[6,7,8,1,2,7,-1,10]],[[4,7,-5,-6,-9,5,-2,8],[-2,-9,7,-6,-8,-10,5,-4],[-3,8,-4,-3,5,-4,-9,-6],[-7,1,-7,-4,-10,-5,2,6],[10,3,8,9,-4,-10,-3,-3],[-3,6,-1,-4,3,-8,7,-2],[7,1,9,-7,-10,5,-5,-6],[3,8,-2,-7,-10,-10,8,-5],[7,-8,-7,1,-4,-3,-7,7],[2,-3,8,7,-4,6,-3,5],[-1,6,10,7,6,-2,10,-2],[-7,-7,5,-4,5,1,2,-5],[8,1,1,-1,10,7,-7,4]],[[-5,10,5,9,3,-7,7,-8],[-3,5,8,10,-1,8,7,-3],[-1,2,-6,-7,2,-4,3,-6],[-10,2,-4,6,9,-5,-5,1],[-1,3,8,4,1,-1,-9,-3],[-5,-9,-7,-6,8,-5,10,-7],[10,8,-10,-10,-10,5,5,10],[-3,10,-1,-6,-10,2,-10,-2],[-8,10,3,-9,10,-2,-2,-6],[-1,-2,-7,-3,-3,6,3,4],[8,-1,6,4,4,1,-10,10],[7,8,-2,8,6,-9,-4,2],[8,5,-3,-10,-6,-4,1,-10]]], dtype = "int16")#candidate|652|(8, 13, 8)|const|int16
bop_653 = relay.power(var_643.astype('float64'), relay.reshape(const_652.astype('float64'), relay.shape_of(var_643))) # shape=(8, 13, 8)
bop_670 = relay.logical_or(const_652.astype('bool'), relay.reshape(bop_653.astype('bool'), relay.shape_of(const_652))) # shape=(8, 13, 8)
output = relay.Tuple([bop_645,bop_670,])
output2 = relay.Tuple([bop_645,bop_670,])
func_675 = relay.Function([var_643,var_644,], output)
mod['func_675'] = func_675
mod = relay.transform.InferType()(mod)
var_676 = relay.var("var_676", dtype = "int16", shape = (8, 13, 8))#candidate|676|(8, 13, 8)|var|int16
var_677 = relay.var("var_677", dtype = "int16", shape = (8, 13, 8))#candidate|677|(8, 13, 8)|var|int16
output = func_675(var_676,var_677,)
func_678 = relay.Function([var_676,var_677,], output)
mutated_mod['func_678'] = func_678
mutated_mod = relay.transform.InferType()(mutated_mod)
var_691 = relay.var("var_691", dtype = "float64", shape = (13, 11, 9))#candidate|691|(13, 11, 9)|var|float64
uop_692 = relay.erf(var_691.astype('float64')) # shape=(13, 11, 9)
func_376_call = mod.get_global_var('func_376')
func_380_call = mutated_mod.get_global_var('func_380')
const_697 = relay.const([[8.567881,1.645304],[9.647045,-0.867151],[-1.205510,-2.062121],[-6.432355,-7.120933],[-4.531435,3.654576],[-4.816309,6.475215],[-9.945440,6.388670],[8.699152,8.687371],[-4.857789,1.551475],[-8.326657,5.014093],[2.811511,-3.192644],[-3.301758,-3.769544],[5.027078,-9.213738],[8.491588,-0.892372],[-3.858813,-6.168428],[-9.157688,-1.623701],[-5.946501,-8.149161],[4.936990,0.637737],[-7.793709,-5.597428],[7.977668,7.451621],[-5.109087,-0.505545],[4.995404,-0.854674],[-8.256365,6.645587],[-2.430477,-4.012172],[-5.167856,-3.923944],[-8.913669,-3.440665],[1.930907,3.023305],[5.859793,-1.616115],[-3.450595,0.358636],[5.738751,6.469979],[-6.308943,-1.728409],[1.014493,4.758920],[-8.983656,9.464481],[-6.069130,9.693945],[6.247058,-6.890092],[3.009997,-6.976236],[7.200170,-2.456929],[9.907215,-4.273336],[-7.619436,5.962611],[2.015552,9.986062],[-7.923546,-9.702884],[-1.109914,-9.113335],[8.166206,-1.798643],[9.227762,-4.868482],[-8.230863,7.878281],[4.415949,2.389018],[7.301526,4.280134],[-5.491523,-3.532507],[1.402706,8.625055],[-2.236943,0.016322],[-8.260684,-0.891147],[9.196319,-8.335915],[3.747246,2.859103],[5.605850,7.150171],[0.861838,-8.141108],[8.215555,-8.701840],[4.679730,9.473898],[-5.760407,0.220916],[-5.702770,-0.754749],[9.977875,-2.073441],[9.252207,6.377573],[-9.697177,2.838335],[2.005895,1.322051],[-9.487297,5.010779],[3.378631,6.276338],[-5.239567,-5.792340],[-3.974374,-2.486012],[5.760014,6.510054],[-8.441256,-8.941945],[7.193106,4.701049],[4.859611,6.187974],[-2.044207,1.452694],[0.668785,5.723491],[-5.892256,3.485434],[6.319424,-4.618941],[-0.877386,2.208982],[-5.243179,1.692665],[4.375530,-4.049142],[-4.744589,-9.857670],[-5.479628,-4.670217],[-5.083596,0.326431],[-0.576579,6.843423],[-7.263907,-2.700266],[3.236508,-9.281424],[4.053052,1.723209],[-1.747604,0.568342],[-9.355703,2.152513],[-6.070045,-0.366905],[-0.383847,3.274896],[-0.871551,-8.577896],[-1.862681,5.014041],[-0.632851,5.701900],[-1.749694,-1.686277],[-2.831849,8.395782],[7.751185,6.861135],[-9.164379,-4.742252],[-9.425328,1.675976],[-1.871126,8.480974],[2.091586,0.424221],[-7.094046,6.688751],[5.502162,0.184230],[-0.960004,-7.629514],[-8.365393,1.642398],[-2.153365,7.218240],[8.631532,0.699735],[-6.722569,-7.878355],[-2.339940,0.699964],[-5.747981,4.118365],[-0.918104,8.822100],[5.019548,-0.727018],[8.826111,-1.139440],[2.737430,-3.185401],[2.959891,-9.204083],[8.425201,0.108768],[-5.302767,-0.906476],[6.680310,4.525789],[3.566938,-1.992920],[-6.698358,-8.968977],[-4.260326,2.747073],[-9.188641,-3.966227],[-3.313255,2.993588],[9.289822,0.472457],[7.174749,-7.127763],[2.741890,-5.250830],[-1.977468,1.543308],[9.231432,2.370314],[-7.860110,1.703083],[-6.393443,-7.655023],[-9.168504,-1.368198],[-9.926124,-5.382254],[-8.186154,2.327963],[-3.493578,-5.223855],[-0.388366,7.343335],[4.175302,-4.131876],[-3.847855,-0.554442],[2.825944,0.551620],[-7.260112,-1.161124],[3.538473,-6.402468],[4.661205,2.307858],[5.544372,4.901067],[8.363232,9.565338],[5.617027,-9.355308],[5.561649,-2.314529],[-2.483752,-4.813640],[-4.368657,2.299860],[7.034870,1.033356],[7.393922,-8.749070],[-6.841191,1.330911],[0.987767,-7.664286],[-8.153261,-5.990560],[1.620069,-7.328438],[-6.411256,-1.616652],[5.777428,-1.312163],[7.338016,-4.173840],[-5.562396,8.003044],[-5.594817,-3.275345],[2.704403,-9.777485],[0.759103,3.983525],[8.851336,-1.413502],[-7.301632,-7.358591],[5.583863,3.649723],[-3.442348,0.695182],[-1.580884,8.493930],[7.689524,-3.679432],[-5.711213,-4.639863],[6.476487,-5.981488],[-0.104526,-1.455616],[2.259919,-7.143486],[2.956261,9.490266],[4.908117,-6.170813],[2.677230,-3.389042],[0.467275,9.679548],[6.367876,-7.464330],[8.319363,-5.315019],[5.702760,7.777318],[1.625627,2.932819],[1.986703,5.270399],[-6.096466,-1.779386],[4.854664,-1.032748],[-2.848264,0.475679],[-5.319331,-3.734709],[-3.431159,8.094732],[-6.747968,7.229404],[-2.146211,-3.090010],[6.502023,4.208362],[-2.710188,-3.979133],[-7.513917,-7.654943],[-9.280322,8.635033],[6.034232,6.656066],[-5.696405,-6.708303],[7.504033,-6.949571],[-5.014765,9.262008],[-9.634282,2.365331],[-2.186983,8.551561],[0.560826,0.073789],[5.622737,-5.296972],[0.045222,-1.331024],[-0.507964,-4.732575],[-7.613402,6.536806],[2.192165,0.255405],[4.541137,-1.415549],[-1.356643,7.977936],[-9.881774,5.028851],[5.636673,-9.743087],[8.409929,-9.289297],[4.450294,9.116946],[0.613715,5.373991],[2.550202,0.928849],[0.333093,1.784582],[2.360128,9.974998],[2.568632,9.434347],[-8.477007,8.147760],[-9.497135,4.542640],[-8.473749,-9.956978],[-2.086606,0.815928],[-6.378410,-6.219080],[-5.970289,5.608101],[-9.432270,6.606227],[8.382353,-9.412871],[7.996126,-9.855546],[1.479374,3.789364],[-0.500874,-5.913767],[8.078004,0.355416],[-4.333978,-3.511011],[4.645919,-0.107172],[-1.182116,3.542804],[-7.144374,-0.885808],[-3.128140,7.679191],[-9.006092,6.914496],[-5.093020,8.118049],[2.237357,1.460736],[5.426407,2.390873],[9.384212,-2.395714],[0.538526,-2.000824],[-5.582530,7.885532],[5.750949,-7.315709],[-1.457829,-5.747252],[7.623318,-9.841454],[-4.698404,-6.758304],[9.085033,-4.174378],[2.140053,1.405779],[1.393553,-6.626591],[-4.555972,-6.686622],[8.016983,8.853850],[-1.010183,-1.943852],[-0.687712,8.089207],[5.971243,-1.074636],[1.032156,2.673985],[4.543087,6.555065],[-1.998835,-7.462780],[-5.952718,-4.435222],[-1.550735,1.371448],[-9.904195,-2.716597],[-7.295941,7.551275],[-1.055041,0.264640],[1.301573,-7.637938],[6.454706,1.330398],[-1.537554,-8.042496],[-0.585814,-3.366528],[-1.465715,3.830772],[8.898182,2.591692],[9.686413,9.951343],[-1.406886,7.776753],[-4.753105,1.949092],[-8.732650,6.514959],[-9.615522,0.910215],[0.246541,1.429146],[1.374895,-7.486053],[9.536064,-0.897453],[-4.304302,-3.927455],[-1.853624,-2.593670],[8.017799,-9.805986],[-0.204160,-4.850231],[3.922902,4.368616],[3.247201,6.669225],[-0.745937,-8.497014],[1.213590,-2.019164],[-7.664760,3.868928],[2.740512,3.756692],[2.190831,-5.526437],[-7.760930,-9.418256],[-7.026977,-6.939688],[6.105790,-9.921479],[1.028616,3.966966],[7.325125,-7.987916],[-4.874132,1.498390],[-5.510076,-1.244512],[-0.406603,5.219336],[-7.338411,5.998819],[-0.816795,-3.792537],[5.067654,8.146870],[0.062202,6.142003],[-8.274516,5.286428],[8.895511,-2.632708],[8.696507,0.768832],[6.580254,-3.369666],[6.834063,-0.578390],[1.507887,5.817776],[8.428578,6.266620],[3.848753,-2.542913],[6.512052,-1.332027],[-5.889033,-1.338412],[2.008647,5.080672],[-4.435795,-4.334858],[5.462628,0.861868],[-7.062156,0.054923],[0.061350,-7.687547],[-2.831806,4.837740],[-4.396660,-7.084853],[-9.535191,6.157744],[2.946454,5.310580],[-0.094502,3.731830],[-0.715333,4.095125],[0.239839,0.962212],[0.100597,4.965229],[-2.754285,1.699210],[-0.043542,0.544858],[-1.211084,-7.367498],[0.656447,-2.521196],[-7.952736,-5.428545],[-4.264375,8.575701],[-1.846813,7.052958],[-3.552038,9.683951],[9.951300,-8.031215],[1.591363,-5.621122],[-5.283470,8.375579],[-6.707846,4.957894],[8.594747,-9.542677],[1.926977,4.502258],[-7.391129,-8.469210],[7.014793,7.511647],[-4.118536,-1.095024],[8.091881,-6.981063],[9.560660,1.136311],[9.222166,-3.717797],[-8.585233,-8.000731],[-7.292688,-8.284886],[-6.166466,-7.236683],[-9.972699,-0.863940],[6.504188,-5.206157],[-4.894630,-3.163589],[-0.849070,4.300884],[-2.433993,-6.158881],[-1.644188,9.013426],[-2.509738,1.449411],[-7.103991,-9.053163],[0.083218,6.255398],[8.475643,5.652122],[-9.043263,-9.280063],[-6.751390,-3.496557],[5.781234,1.421659],[-2.890577,1.496170],[-1.434713,2.102023],[-9.786655,-4.706274],[5.076585,-1.607311],[3.280264,-9.812749],[5.638315,0.220911],[-6.976436,-8.383332],[-6.361101,-9.795646],[-8.968929,-4.913120],[-1.632468,2.136401],[2.055574,4.927942],[-5.778963,-4.429565],[2.162161,5.636531],[8.655269,-1.186833],[1.951285,9.188596],[6.334667,-8.678037],[9.316732,-5.888026],[-4.503241,-3.297349],[0.361964,-4.323442],[5.078900,-8.263499],[3.770609,3.693965],[-3.516722,4.426500],[7.900123,8.674225],[-8.706192,-1.075954],[-5.849565,5.728975],[6.424844,9.657478],[3.730532,-7.066135],[-2.905877,-2.134764],[-7.236452,-0.692055],[2.606600,-0.643535],[-1.631941,2.394659],[1.531749,3.788238],[4.315992,8.350036],[-8.263227,5.546718],[-8.349850,1.907876],[-9.968815,6.154022],[0.815779,4.998445],[5.395107,1.968761],[-9.922674,-0.497359],[5.161106,5.992805],[-2.126935,9.808380],[3.522828,2.245898],[-4.614346,-6.179111],[-5.128287,6.747141],[3.191763,-8.033323],[7.752512,8.350600],[7.212671,9.900583],[6.962566,4.908796],[6.979265,-4.647035],[7.692185,3.889952],[-4.661805,0.267702],[8.959234,1.436649],[9.556485,1.233141],[0.982233,-2.084034],[-4.727504,3.158949],[4.438819,0.282181],[1.523030,5.937816],[4.027983,-6.797828],[2.829185,-5.546738],[4.102410,0.094500],[-3.170608,2.677367],[7.187466,-8.268598],[8.070648,4.040792],[-3.037997,-4.026297],[5.113783,-0.474069],[-4.742540,-9.309623],[-8.970829,-0.307225],[-1.098384,0.996990],[-7.483336,7.137457],[-3.772598,4.751565],[2.655571,-5.995805],[0.905028,-6.197342],[5.222012,-2.065045],[9.786224,2.293231],[6.653119,0.267820],[7.328333,-0.966144],[2.896666,-3.001898],[2.647626,-9.768232],[-6.320040,-3.123757],[9.289859,-1.645609],[-5.413854,-0.087237],[-8.306757,5.072070],[9.077493,7.928286],[8.016369,-5.984648],[0.072305,9.516408],[-3.372358,-2.927263],[-9.803633,-3.413895],[0.472364,-3.749915],[2.796890,9.327578],[-5.993296,-2.480226],[-3.926635,8.359742],[1.254570,-7.271579],[-3.097801,-0.611734],[6.775034,7.050284],[8.516396,3.365542],[7.803236,-0.341944],[-2.732277,-3.290467],[1.481535,-8.451220],[-0.279254,6.662191],[8.311692,5.939100],[6.582132,-6.280957],[-7.644824,7.154003],[-1.113989,-0.566108],[-0.475533,-5.675684],[-5.980492,-7.636810],[1.359019,1.108503],[-1.040078,-5.908763],[9.936884,2.698725],[7.775666,3.852658],[1.800639,2.815397],[-4.418022,5.790229]], dtype = "float64")#candidate|697|(462, 2)|const|float64
const_698 = relay.const([4,-5,9,-6,3,-2,4,9,-10,10,-7,1,-10,7,6,-6,-7,-1,-6,-5,-4,7,-6,-9,-5,4,1,3,2,5,-8,-8,-9,3,5,-4,6,-4,6,-9,-2,4,-2,7,8,2,3,3,9,7,6,3,-3,-4,-10,-3,-10,6,-5,-4,6,-1,7,9,3,-2,-9,3,-9,4,-10,2,3,1,-10,3,2,3,1,7,-1,-3,1,-6,-2,10,7,-3,-9,-2,-9,6,-10,-1,2,5,7,6,3,-8,2,7,1,10,2,10,-7,-3,5,10,-3,3,-10,-8,10,-5,8,-2,2,1,-5,5,9,-1,-3,-4,-5,-6,7,-7,2,9,-6,8,-2,1,-2,-9,6,7,-10,-6,9,1,8,5,2,9,-3,-7,8,2,6,-10,3,2,10,8,1,-7,7,-10,-4,-10,-8,5,7,-5,-1,5,-4,-7,2,2,-5,4,-1,-5,-1,-5,4,-4,-7,1,-6,10,-3,2,2,-1,-5,3,7,-10,-4,9,4,6,2,1,-6,-8,8,4,-4,-1,10,-4,3,-7,-10,3,-2,7,-8,4,9,-5,-9,-1,6,3,-5,2,2,2,-10,8,-6,5,-3,-10,-8,1,3,-2,3,4,-2,-5,10,8,2,9,1,4,3,-10,8,-8,-3,-10,8,6,2,6,-7,-9,10,-1,-2,-7,-6,5,8,4,8,10,10,5,5,2,-4,5,9,-5,10,5,8,-1,-7,-10,1,-8,7,-10,3,-8,-5,2,-10,4,-8,-5,2,5,-1,2,-6,-2,4,-7,8,-7,-10,-4,4,8,8,10,-1,9,1,-5,-2,4,-1,-4,-6,-1,-9,-7,-4,7,-2,3,-4,-5,-4,4,7,3,-8,-8,-9,5,5,-3,8,-2,8,4,-10,7,-9,-1,10,6,-2,-6,-5,-10,-2,-9,10,-3,-1,-10,-5,-4,-1,-3,-10,1,-3,-4,8,9,5,-2,-1,5,1,-2,4,3,4,8,-4,7,-8,8,-5,7,4,6,4,9,9,-4,-1,10,-2,9,-9,-5,-7,6,9,9,3,-9,9,2,1,-2,-2,8,-3,2,-3,-3,-10,-10,2,-2,-9,4,1,5,-2,6,1,8,3,6,-8,6,-7,7,-10,-6,2,-6,-6,6,-9,-1,-6,-4,10,-5,-6,6,-9,-3,-2,7,-9,-8,5,-4,-6,-5,-6,3,9,-2,-3,10,-3,-1,2,-10,3,7,-2,2,-7,-2,8,-7,-5,1,9,-10,-4,7,10,-8,-7,-1,-7,-7,-2,7,4,4,-5,9,-6,-8,9,6,-5,4,-3,-1,10,5,6,-1,-8,-4,-3,8,-10,-10,4,-2,-4,2,-1,-8,-2,-4,-6,1,-3,-6,-5,-6,3,-8,5,9,-4,7,-6,10,-9,-6,-1,-9,-1,-3,-3,3,-6,-4,-1,-2,-6,2,-5,7,9,9,10,6,-4,10,-7,-3,4,-6,10,9,7,7,-6,-6,-8,2,-2,9,-7,-3,-2,7,-4,2,-1,2,-2,1,-1,-10,-1,-9,3,9,9,-4,8,8,4,-8,10,-2,6,2,-10,8,-7,4,-7,9,5,-8,5,-5,-5,-4,2,9,1,7,4,-3,-2,-10,-10,-6,4,-7,7,6,6,9,7,-8,-9,-10,-2,-3,-9,-5,4,3,-3,-7,-4,-4,-4,-10,3,7,-5,-5,9,-1,-1,-7,-6,-4,-1,-1,3,-3,8,-6,-3,3,2,-5,5,1,-2,2,-9,9,7,-2,5,5,-1,4,-6,4,-4,10,4,-7,8,-6,-6,-6,5,3,-3,3,1,-10,6,-6,-2,2,-8,2,-8,4,1,9,5,-6,-2,4,8,-2,-7,-9,-7,-5,-9,10,3,-3,3,2,6,8,-9,-3,6,5,6,-2,-2,7,-2,-1,2,-1,8,4,-3,3,-5,-1,2,6,-10,2,-5,-5,7,-4,-10,5,-10,1,1,5,8,9,-2,1,-3,-3,-1,7,-4,8,-6,1,10,-1,-4,9,4,6,-4,9,-10,-8,-1,-1,-6,1,2,1,-2,6,-9,-1,-4,-1,6,10,2,-8,-2,10,-10,3,-10,5,-7,1,-8,8,-1,-2,9,-4,-7,4,3,-1,-4,6,-9,8,-4,3,-3,-3,2,-1,5,-9,-8,-6,-8,6,3,6,5,-9,4,10,-3,-2,-6,3,10,6,7,-9,-8,7,-6,-5,-10,1,-4,-3,-4,3,10,3,-10,-8,-2,-3,5,-2,-4,4,-1,8,-4,4,6,7,-5,-7,-1,3,-5,4,6,-1,-4,4,9,-1,-3,-10,4,6,-10,-6,10,-4,8,5,3,4,-10,-3,10,-2,10,-3,-3,-6,4,6,1,-10,-8,-3,-10,8,-7,1,-6,-2,8,5,-4,4,2,3,10,4,-8,-8,-6,-2,-9,2,-7,4,-8,7,-9,-10,-1,-6,-6,-8,9,-5,-4,10,10,-1,-6,4,-5,6,2,-6,-10,-5,-5,1,8,-9,-2,8,-10,-9,-7,10,4,5,-3,10,-5,2,-5,-4,-10,9,-1,-4,-7,7,5,-5,3,-4,3,4,6,-8,10,8,-4,-3,-2], dtype = "int8")#candidate|698|(975,)|const|int8
call_696 = relay.TupleGetItem(func_376_call(relay.reshape(const_697.astype('float64'), [7, 12, 11]), relay.reshape(const_698.astype('int8'), [975,]), ), 2)
call_699 = relay.TupleGetItem(func_380_call(relay.reshape(const_697.astype('float64'), [7, 12, 11]), relay.reshape(const_698.astype('int8'), [975,]), ), 2)
bop_701 = relay.bitwise_or(uop_692.astype('uint16'), relay.reshape(var_691.astype('uint16'), relay.shape_of(uop_692))) # shape=(13, 11, 9)
func_675_call = mod.get_global_var('func_675')
func_678_call = mutated_mod.get_global_var('func_678')
var_705 = relay.var("var_705", dtype = "int16", shape = (832,))#candidate|705|(832,)|var|int16
call_704 = relay.TupleGetItem(func_675_call(relay.reshape(var_705.astype('int16'), [8, 13, 8]), relay.reshape(var_705.astype('int16'), [8, 13, 8]), ), 0)
call_706 = relay.TupleGetItem(func_678_call(relay.reshape(var_705.astype('int16'), [8, 13, 8]), relay.reshape(var_705.astype('int16'), [8, 13, 8]), ), 0)
uop_714 = relay.asin(const_698.astype('float32')) # shape=(975,)
output = relay.Tuple([call_696,const_697,bop_701,call_704,var_705,uop_714,])
output2 = relay.Tuple([call_699,const_697,bop_701,call_706,var_705,uop_714,])
func_716 = relay.Function([var_691,var_705,], output)
mod['func_716'] = func_716
mod = relay.transform.InferType()(mod)
mutated_mod['func_716'] = func_716
mutated_mod = relay.transform.InferType()(mutated_mod)
func_716_call = mutated_mod.get_global_var('func_716')
var_718 = relay.var("var_718", dtype = "float64", shape = (13, 11, 9))#candidate|718|(13, 11, 9)|var|float64
var_719 = relay.var("var_719", dtype = "int16", shape = (832,))#candidate|719|(832,)|var|int16
call_717 = func_716_call(var_718,var_719,)
output = call_717
func_720 = relay.Function([var_718,var_719,], output)
mutated_mod['func_720'] = func_720
mutated_mod = relay.transform.InferType()(mutated_mod)
var_746 = relay.var("var_746", dtype = "float32", shape = (2, 3, 3))#candidate|746|(2, 3, 3)|var|float32
uop_747 = relay.sinh(var_746.astype('float32')) # shape=(2, 3, 3)
uop_749 = relay.acosh(uop_747.astype('float64')) # shape=(2, 3, 3)
output = relay.Tuple([uop_749,])
output2 = relay.Tuple([uop_749,])
func_762 = relay.Function([var_746,], output)
mod['func_762'] = func_762
mod = relay.transform.InferType()(mod)
mutated_mod['func_762'] = func_762
mutated_mod = relay.transform.InferType()(mutated_mod)
var_763 = relay.var("var_763", dtype = "float32", shape = (2, 3, 3))#candidate|763|(2, 3, 3)|var|float32
func_762_call = mutated_mod.get_global_var('func_762')
call_764 = func_762_call(var_763)
output = call_764
func_765 = relay.Function([var_763], output)
mutated_mod['func_765'] = func_765
mutated_mod = relay.transform.InferType()(mutated_mod)
const_893 = relay.const([[-10,6,5,-4,9,7,-3,4,-9]], dtype = "uint16")#candidate|893|(1, 9)|const|uint16
var_894 = relay.var("var_894", dtype = "uint16", shape = (9, 9))#candidate|894|(9, 9)|var|uint16
bop_895 = relay.equal(const_893.astype('bool'), var_894.astype('bool')) # shape=(9, 9)
func_716_call = mod.get_global_var('func_716')
func_720_call = mutated_mod.get_global_var('func_720')
const_914 = relay.const([7.285477,-5.437358,0.344045,1.729329,-3.779805,-4.380945,-8.729885,1.542347,0.733519,-1.964023,2.948734,2.382472,0.709076,-7.794362,4.905763,-4.092613,-2.091177,-8.524433,-7.996105,-3.929451,6.982578,8.870083,-0.915471,1.025440,-8.854111,5.530396,-8.524980,-3.466234,-4.073539,-1.052707,4.821627,-6.543695,0.952149,4.899326,-8.303605,4.667844,9.245837,7.048540,9.612844,2.023057,-8.537737,8.471308,-2.007225,2.314631,4.340781,-1.339682,-3.075577,-6.921260,7.654683,8.800492,3.469181,6.777555,4.760214,-8.993294,-1.501786,-1.736751,1.100705,2.589647,9.347599,-2.765535,1.249647,1.867940,1.975576,0.593444,6.220149,-6.211272,7.431302,1.289494,-1.782762,8.442962,-4.631328,8.156623,-5.045037,9.203504,7.373672,-0.832796,-1.165237,-2.928763,1.739538,-6.475308,-2.685136,-2.146556,-2.471453,-5.111071,0.930649,5.004336,5.065268,3.981218,-4.891690,2.397130,-1.210124,-0.263220,7.173277,-7.503824,-3.906043,-8.757150,1.418281,1.861884,-7.531478,-3.166138,6.511617,8.916259,5.828079,-7.568442,5.494565,8.497445,8.044164,-8.118882,6.134341,-0.446295,0.506735,-6.693061,7.172468,4.047103,-1.170678,1.958405,6.221055,-4.672080,-1.763683,-8.954631,9.371845,3.381852,0.074424,5.921358,3.122346,4.966489,-8.971049,0.903263,6.690619,-4.116594,9.540593,9.823146,-5.275496,3.082190,5.941006,8.102957,4.141743,3.187999,-7.105211,1.433800,-5.129633,8.741373,2.823664,-9.220032,1.887649,-8.487674,9.906438,0.136557,3.726208,-1.290580,0.195791,4.511560,-1.026029,1.684445,-2.032523,-5.753590,0.629999,5.369459,2.559030,9.072564,-8.377431,2.668964,-3.570389,-1.076078,8.146312,-0.733423,-4.662473,7.791903,-3.071913,8.368448,-5.047035,-0.392684,6.763540,-4.126990,8.553965,3.444391,4.103618,2.148354,-5.917883,8.533060,-3.494646,-6.153804,-5.850549,-2.106340,-7.460896,4.484522,7.657403,1.879520,0.756721,3.104186,2.547731,9.988989,2.400177,-1.452304,-0.706784,8.652677,0.497143,9.464321,-6.702168,5.977173,2.177746,0.749798,-8.164122,-8.757365,-7.004961,-6.796160,-1.381272,-9.116976,4.841093,6.980012,-0.667446,-0.579601,-6.045145,9.747934,5.336263,-7.303776,8.191564,-8.637212,-1.828627,-1.573910,-5.776716,-2.424125,-6.705843,3.699125,-2.816401,8.094995,8.278254,-8.319590,0.437501,-3.691030,-4.170827,0.175644,-1.210690,5.314357,-0.787852,2.661760,6.925345,-2.705660,-7.188820,0.008421,-0.501810,-9.249737,-7.284924,-6.625054,-2.699135,9.775775,4.497900,9.412469,-7.980078,-1.716845,-3.500732,1.237885,9.062231,5.394805,1.068231,-2.212220,2.273165,-8.914241,-1.223104,6.243224,9.198573,9.164875,9.054893,5.592143,-0.011974,4.575678,7.580495,-1.130669,-5.470339,6.938055,-1.961330,5.629353,-6.987531,0.613633,-8.266493,6.513892,4.650796,-7.174116,5.557451,-6.318434,1.484466,-0.663547,0.763490,-7.515420,-5.802885,6.014255,6.463490,-3.939667,-9.365908,-3.907741,-0.868226,5.517388,4.046628,7.524693,3.339355,-7.751199,3.015505,9.034061,0.002158,-6.078783,5.759510,-3.391813,-1.660115,-4.850597,-7.169429,-3.687913,9.288364,2.447641,0.372315,6.592757,-4.638047,-5.460130,2.646422,-5.520022,3.698693,-8.185652,4.156572,6.788745,-0.412152,-2.490554,0.968986,3.824815,-9.418034,3.198404,3.196929,-3.960750,-1.617883,1.950027,4.935489,-8.985117,-3.167285,8.288709,8.278084,-8.061823,5.947920,-2.620628,0.368446,6.044099,-6.409244,9.129004,7.617918,-8.721702,-7.510013,4.385684,3.690819,-8.455387,6.192277,7.261750,5.711588,-6.497843,1.010973,4.236273,-6.111917,-6.716150,9.752222,3.276865,-2.202654,-9.376323,5.153259,-8.920771,0.995391,1.801856,-2.094419,1.146540,-3.643609,-6.712453,-4.857125,-6.239604,-4.791986,-6.705329,-2.792572,8.672704,7.215531,-7.819500,5.587270,2.967042,5.213452,1.948149,-7.924856,9.706184,-2.590082,-3.676426,6.722849,-1.227676,5.473365,5.682893,-7.900594,-3.121259,-5.696536,-2.656037,4.423156,-1.173007,-4.937240,0.973552,-6.604250,8.307967,-7.471079,-9.707523,-1.401704,-3.199629,6.486342,-9.956254,-8.547385,3.322732,7.103748,-5.838276,1.762060,1.690623,9.458046,-8.774682,-9.422518,-6.656135,1.682952,-8.972258,7.711302,-4.888308,5.585217,-0.279814,9.227913,-1.856825,-6.059781,-5.227381,-4.730656,5.287384,-3.011543,1.081243,-2.029461,9.477564,-7.742081,4.289292,-8.266835,-6.694532,-8.266823,7.877083,-7.775037,-5.019898,0.234069,3.995870,2.035420,0.500823,-0.502866,-2.264231,-1.004870,6.327766,5.876437,5.023226,-2.972299,1.228199,-4.866358,-9.160025,3.100159,9.071305,0.148135,-0.946123,-8.025160,-7.115258,-8.862956,9.063465,4.812882,-6.062782,7.780861,-0.436674,9.161704,4.313541,0.202449,2.464663,-8.439344,5.111927,1.932493,-9.519416,4.238907,-4.199505,5.285324,-1.904298,-2.736513,-6.855192,-9.444155,8.422479,-1.424161,-7.785813,7.369051,-9.516995,-8.922518,7.499438,0.516617,6.906660,7.899962,9.125578,9.062250,3.284725,-0.694572,-7.300552,-4.530506,-3.012462,-0.912661,-8.154623,-0.337778,3.256484,-2.427907,-4.940350,5.675434,-9.016994,-3.499577,9.147386,-4.955068,2.422748,-3.721410,2.917923,-7.065239,-5.674463,-9.066364,-5.086592,2.651544,-6.475591,-4.826272,-9.217496,-4.430266,-8.171790,-5.552749,3.787728,-5.812231,1.396721,-0.474733,-1.720203,-9.875980,7.299212,9.782307,-5.537434,5.155115,7.966976,7.141369,9.032776,-9.935385,-2.015259,-2.704110,1.962155,8.045645,0.899922,-0.996634,-3.522014,-1.740339,5.839589,4.646122,4.155806,-9.776940,-9.596319,-9.566413,-1.114695,-2.857117,2.810892,-2.766465,3.072194,6.358324,4.877503,-5.232840,-3.664023,6.860142,8.028506,4.970068,8.929722,6.528056,-8.068017,-3.988610,-7.774864,2.636447,1.929909,0.293161,7.027255,5.117612,-4.463015,-5.364239,4.301327,-8.293648,-1.763640,0.588543,-3.828445,-7.255548,-3.174585,9.918411,9.197311,-6.374307,-4.996927,3.534588,-6.525311,-5.182751,2.531498,1.639394,-1.750516,5.832414,-9.854255,-5.148846,8.833045,2.945833,8.442414,-4.317704,0.534792,8.901067,-5.055719,-2.237472,-6.949795,8.952904,0.580632,-8.347054,8.860297,5.965293,-9.470448,-1.171054,-2.909327,1.133870,-4.801875,-9.262484,-4.336775,4.138512,-6.158256,2.856090,-7.943563,-3.067306,1.836740,5.453624,-5.837044,-3.132765,-6.587665,-6.757941,-1.982956,7.473203,-6.864101,5.387824,9.265240,9.096084,-4.481790,-2.603668,-5.855460,-0.999768,2.289187,-4.353599,-1.654091,-4.991337,6.713908,9.532069,-6.080231,-8.461338,-8.253515,3.941427,-9.342973,-0.758962,8.100794,6.502393,1.997922,-8.506464,2.168685,1.937228,6.407500,-3.502394,-3.497340,5.100742,-9.137789,5.281010,3.967532,4.857613,-1.114890,-2.438470,-8.263012,7.381503,2.761779,9.063594,-8.476640,6.721168,-4.445380,-8.198494,8.100256,-1.910779,2.042816,5.549353,-1.015740,-6.237839,-0.573449,2.864630,-5.099307,-0.384602,-0.747275,-7.758164,-6.134071,-3.220509,5.058981,-7.786981,-3.051882,3.004787,-8.872417,-4.034861,0.258979,4.706384,4.395387,-9.571932,0.896597,-9.107728,-7.243311,-1.174969,-1.309914,-8.847427,2.569659,-9.348837,0.534283,7.516161,-6.846018,-2.649958,-7.793137,0.867118,-9.524392,3.680327,4.201640,8.270254,-8.439389,-0.131559,4.321505,4.267495,3.916131,-2.949509,7.491541,3.445902,-5.737500,8.546159,2.351983,-5.194581,-0.781210,-2.656017,2.196747,-2.143939,8.623794,-6.921181,8.416351,-2.632187,-8.856602,9.534054,-7.149576,0.523760,-3.889565,-0.090538,-6.456486,-4.163767,-8.173581,-8.041957,-0.455501,-9.764767,9.254451,-2.802795,-9.457694,-9.549391,-3.627262,-6.750514,-4.551151,1.567081,-5.286826,-4.049432,-6.080091,6.234289,5.031854,7.147888,-9.690912,-9.132436,-3.507834,-2.038315,2.568794,7.979999,-7.785687,-9.538515,-8.739415,-0.525895,8.542116,2.644436,9.158494,0.168921,-1.828538,-8.278095,-1.674598,-7.722722,-4.831416,0.287262,0.223983,5.092253,-9.095081,-7.814362,4.418528,8.723484,-0.046264,-6.948073,1.482937,-9.555912,-9.291298,9.311482,8.922958,-1.077972,-1.807072,4.098664,-7.946115,-4.174263,7.038655,9.845583,9.935944,2.190118,9.072831,8.631938,0.020223,-8.286229,-4.265198,-1.911054,-1.412191,8.698228,-6.513088,-4.245425,0.015230,5.519889,-4.802061,0.547876,2.535098,2.431094,5.992861,-0.206977,-3.709559,-3.120526,-7.976547,0.298870,6.643444,7.982760,0.448707,0.999737,-7.201657,2.904873,5.886759,-8.811042,-3.634492,-7.585692,-1.443512,-8.002128,8.490120,-3.524893,-2.228354,-9.070039,-0.009895,3.490778,-5.651388,4.765294,-3.539064,1.025323,2.326568,-2.939531,1.051644,9.862622,1.135625,-6.866807,5.390686,-8.429372,-8.265318,8.293110,4.753403,0.209205,6.641934,-6.824920,3.597927,-1.045924,-7.179537,-1.055153,9.044685,4.379626,-4.222341,3.376933,-5.742768,6.614367,0.328934,-8.994710,3.042448,-7.565957,-3.063955,-9.605660,-4.735751,-3.309279,-1.956543,-3.211362,2.983235,-6.168832,7.812017,4.643055,-1.968713,9.452032,0.206566,-1.236907,0.215825,-7.231148,3.676376,7.724489,0.233822,-4.422375,8.423264,6.837361,0.417627,-2.496067,8.272361,-3.745450,-9.336526,2.843954,1.377460,-7.503057,-7.709853,-2.100449,-7.877751,8.304291,-4.562767,2.194928,-6.400821,-9.363532,-1.144878,1.130690,-4.332450,5.539868,5.607332,-2.055964,-8.548200,5.097646,1.145554,3.601703,8.270511,1.135070,-1.951355,6.557501,3.327594,-5.130165,-8.344035,-3.095308,-9.010995,7.054253,-2.867909,-7.348894,5.365131,-2.711620,-0.542463,-5.961051,-6.230054,8.748697,-5.398243,-7.931654,-3.741916,1.076661,-5.923493,5.978415,-6.411460,-1.211042,-8.869205,2.905415,-0.337245,6.549246,2.315761,-7.745921,0.991824,1.886952,3.509615,-8.431295,-7.636017,-2.679466,7.916583,8.704328,9.892584,-3.600520,0.484955,3.017904,3.825949,-1.396620,-9.400325,6.739246,-0.232274,1.380417,-3.638368,9.810697,7.077026,4.819376,0.384742,-9.554774,-7.766453,-8.143453,5.493173,4.960739,-5.117833,9.341532,-8.209170,4.169571,2.398946,-4.512011,-8.974971,2.603879,-5.586085,-9.995295,3.860273,-4.873022,3.217428,5.296787,-2.005300,-7.172946,-8.578493,4.298222,-2.271895,0.032459,7.917773,6.024132,7.616641,2.218547,4.720463,5.804211,3.006620,-9.169490,4.115643,7.350968,-0.554762,-7.070030,2.031548,1.057462,-3.293175,-4.821732,5.182443,5.682504,-3.839103,-7.318738,-9.120638,-5.686462,1.979878,4.175421,2.303882,-7.438554,-3.629127,-1.353549,-7.325742,7.355442,8.243629,-1.946530,9.226031,1.552082,-1.114063,6.815059,-3.027962,-7.436756,-6.196337,-8.983763,-9.602155,5.664037,2.563157,4.360117,9.761788,9.113713,-8.112458,8.980874,1.564168,2.747189,-2.566121,4.230138,-7.908691,-0.152981,1.547117,-0.054276,2.579655,-4.151081,-5.209096,-6.223499,-1.903637,-6.755463,3.867879,-7.395615,-5.841430,3.808583,-2.562300,2.596006,-4.818249,1.573856,-7.210938,-9.609212,2.592048,7.530211,-7.622575,7.810887,7.479680,6.255580,-4.210170,6.065587,2.507059,6.624828,5.976244,-6.774164,3.405641,4.482955,-5.028796,2.258923,-6.210353,6.834142,6.644900,5.204129,-8.090592,2.740903,-7.418516,0.463843,8.500034,9.207487,-4.691301,2.126444,4.899062,7.923678,-0.395260,8.360261,0.523352,3.032916,-8.134740,2.501610,4.513882,1.871727,-5.635806,4.373687,5.488107,-3.007427,-9.076915,8.405755,4.603596,0.605815,-6.024136,-8.995471,9.811138,-1.088614,4.195429,-5.910328,-2.613845,-1.882377,0.942475,4.409356,9.849362,-9.356429,7.019423,6.438523,-2.381619,-1.074817,-3.683446,0.126798,-6.118454,8.074973,3.009888,-1.030775,7.068022,-5.336567,-2.011720,7.046848,-6.129320,1.052533,-9.604305,-3.207592,-7.791568,4.738007,1.671171,-9.350550,-8.427190,9.802022,-3.824231,8.400700,1.793972,-5.177158,0.104514,9.540181,9.359631,6.683690,1.094048,-2.100603,-0.058706,-3.776363,-5.201696,9.610869,-3.750688,9.414332,-1.852066,-6.627541,-5.450087,8.081365,4.518690,7.105295,-6.966594,-6.473509,-9.032232,8.927012,-5.784208,8.902671,-9.458469,9.949663,8.116215,7.195322,1.498783,0.550172,-2.557249,-7.592866,5.201498,-0.583433,-0.835020,-4.865753,-2.034744,-5.505704,8.543436,3.402411,-4.215392,6.533579,0.804351,-3.257668,-5.276665,2.538351,-3.323337,-6.904191,8.572100,5.498268,5.953367,9.725592,4.437055,-9.860622,4.944197,2.036058,-8.446262,4.736345,2.762960,8.318279,-1.488618,9.318899,-9.458536,-9.285018,-8.299314,2.028708,1.907152,5.314025,-5.553147,-3.307611,-9.183866,-5.166643,-3.114935,-8.444415,4.501483,2.434039,-9.377753,-6.905350,7.458659,6.937075,5.478313,9.699190,8.779704,0.505964,5.503123,6.513274,8.112289,-0.646709,5.832443,-0.881261,-7.114013,-8.500909,-2.749860,3.846549,-1.234268,2.094138,-0.931580,-4.921508,-1.027473,6.828048,0.549975,2.261375,-5.261772,-0.654944,-7.807837,-5.478108,0.890019,-6.793475,-1.078207,4.213942,-8.527033,-5.820688,0.212323,-5.639564,-9.458562,6.369262,-9.229609,0.148674,5.887756,-5.729983,-5.984730,-2.230019,-8.352242,6.393962,8.335341,6.001507,1.260166,-9.549053,-1.267199,-1.509266], dtype = "float64")#candidate|914|(1287,)|const|float64
var_915 = relay.var("var_915", dtype = "int16", shape = (832,))#candidate|915|(832,)|var|int16
call_913 = relay.TupleGetItem(func_716_call(relay.reshape(const_914.astype('float64'), [13, 11, 9]), relay.reshape(var_915.astype('int16'), [832,]), ), 0)
call_916 = relay.TupleGetItem(func_720_call(relay.reshape(const_914.astype('float64'), [13, 11, 9]), relay.reshape(var_915.astype('int16'), [832,]), ), 0)
var_920 = relay.var("var_920", dtype = "int16", shape = (832,))#candidate|920|(832,)|var|int16
bop_921 = relay.mod(var_915.astype('float64'), relay.reshape(var_920.astype('float64'), relay.shape_of(var_915))) # shape=(832,)
func_716_call = mod.get_global_var('func_716')
func_720_call = mutated_mod.get_global_var('func_720')
call_927 = relay.TupleGetItem(func_716_call(relay.reshape(const_914.astype('float64'), [13, 11, 9]), relay.reshape(var_915.astype('int16'), [832,]), ), 5)
call_928 = relay.TupleGetItem(func_720_call(relay.reshape(const_914.astype('float64'), [13, 11, 9]), relay.reshape(var_915.astype('int16'), [832,]), ), 5)
func_608_call = mod.get_global_var('func_608')
func_611_call = mutated_mod.get_global_var('func_611')
const_933 = relay.const([7,-2,10,3,-2,-6,-1,6,-10,-5,-7,8,-9,10,-5,5,-9,-8,10,8,-10,-10,-9,-4,9,9,-10,-4,1,5,2,-9,8,10,1,-1,-4,3,7,4,1,-4,2,1,3,-9,-5,-6,8,-10,-7,1,2,-7,-5,5,-4,-8,8,-8,-3,-7,-7,-1,10,5,10,9,10,-1,6,-1,-6,7,-6,6,-3,-10,-6,7,-2,-3,8,6,-9,5,6,6,-4,-7,-9,4,6,2,4,-9,-2,1,-8,10,-4,3,-10,4,-3,4,4,3,3,3,5,-4,-6,-6,1,-2,-10,7,-5,2,1,-1,6,-4,-9,6,9,-10,-6,7,-2,-4,-3,10,3,-9,2,9,4,-6,-2,-7,-4,-6,-3,10,4,-8,7,9,4,4,8,3,-9,-6,-3,4,10,-10,6,10,5,9,10,4,5,-7,3,6,-10,7,-5,-3,-2,10,4,-10,-10,3,-8,-3,6,10,9,-5,8,2,-2,10,7,-4,10,2,-2,1,3,-4,1,10,10,10,-7,1,5,-5,-1,-5,-2,2,-3,5,4,-5,-5,-6,-2,3,9,1,7,-10,5,-9,2,1,4,-1,5,-3,3,-5,8,-4,-4,-2,-1,9,-8,10,-2,5,-7,4,2,-4,9,-10,9,-7,-9,4,-1,-5,-5,-1,8,-3,-4,-8,-4,-3,-4,-3,9,6,9,7,4,1,8,4,-9,10,-4,10,-3,-5,8,-9,-8,-4,-4,-8,-4,8,2,8,1,-5,-6,-4,-9,-5,-9,-1,-9,5,-5,-2,4,1,-1,9,6,-6,-8,1,-1,2,9,6,-8,1,-4,4,-2,5,-5,5,6,-4,-4,-2,9,5,-7,8,-10,9,-4,3,10,-1,-10,-6,10,3,-3,10,-10,2,4,5,8,7,8,8,-7,3,-7,-6,-7,2,-5,-1,-7,-2,-2,-6,-2,-2,4,6,-1,1,-8,-5,-7,6,-1,-6,-2,3,7,4,-2,-10,8,-10,-7,-7,7,1,-10,7,-3,-4,-5,-1,-6,-4,3,7,-9,2,-7,10,-2,-9,5,-6,10,7,8,-8,3,3,3,9,8,-8,10,-2,-9,7,-8,6,4,3,-1,4,-2,-10,-8,9,-10,-10,8,-5,2,3,-4,8,-4,9,2,7,-2,-1,8,6,-10,10,-10,-5,8,4,10,-1,-3,-8,-6,10,-4,8,-4,1,1,-2,-8,-3,8,10,9,10,4,8,-5,-5,3,2,-8,-1,-4,-9,-1,-1,-2,-7,-2,5,-7,5,-3,-2,6,2,-6,-2,-8,-3,5,-8,-4,-6,-3,4,3,-3,-10,3,-10,-9,-9,-9,1,-6,7,-3,-8,-9,1,-1,3,-3,1,-10,-2,-9,1,10,9,10,9,-9,2,9,3,8,-8,-10,8,1,-10,-4,10,3,-9,7,6,-8,4,-2,9,-3,-2,5,-3,-1,-9,-2,-9,10,9,8,1,-4,3,-2,-7,-9,-5,10,-3,1,-5,10,-1,4,8,-5,-5,-4,6,-1,10,-3,-4,-5,3,-6,-2,-6,9,-2,9,-7,-8,-5,8,9,-5,5,5,-4,-7,-1,-9,3,-5,6,-4,-10,-4,1,10,10,-2,5,-6,-10,-9,3,9,9,-2,-10,8,1,7,-5,-1,4,-1,-5,-6,-9,7,5,7,10,1,-8,-1,2,-2,-5,-4,-8,-8,2,-9,10,-3,2,1,3,-1,10,9,-10,-8,6,5,-7,-9,6,-9,4,3,4,-7,5,-8,-1,-8,-10,5,-8,-9,3,1,-4,6,-4,3,5,5,-9,7,-1,-9,1,4,4,4,9,-7,-8,10,-3,10,-4,-8,-9,3,1,-1,-7,4,8,9,7,-2,-8,-9,-7,9,-5,4,-5,5,10,10,1,-9,6,-8,-3,-10,-3,3,7,1,10,-5,4,-1,-6,-10,-7,-7,6,-7,-4,-9,3,6,4,1,5,-9,8,3,-2,-2,-3,-3,-4,9,7,-6,-10,10,2,-9,9,-7,-9,10,7,-2,1,-1,-6,-7,-8,3,7,-3,-7,7,-10,1,-5,1,-3,2,8,10,-4,7,10,-10,-3,8,-7,4,-9,7,5,8,10,-1,5,-2,-8,1,-9], dtype = "int64")#candidate|933|(800,)|const|int64
const_934 = relay.const([0.768430,-5.718321,-5.492715,-0.350315,3.479050,9.925295,-8.196106,-5.872197,-1.836122,-2.992878,-1.922232,-8.770744,-6.932253,2.612162,6.895389,0.614424,-6.596066,1.541001,-2.328607,-9.850065,7.390792,-7.333825,-6.455025,9.678565,3.132612,-3.725104,4.743146,2.116076,8.051478,9.212272,-7.780811,7.092021,-2.237870,7.352584,-0.738564,9.342558,3.629702,1.738143,-7.736574,-2.998353,-9.738786,6.391391,9.688725,0.411331,-4.998480,3.675043,-0.529509,6.833686,-9.654452,9.075349,-3.192798,-6.879658,-1.419326,3.306351,-1.056412,5.563702], dtype = "float64")#candidate|934|(56,)|const|float64
call_932 = relay.TupleGetItem(func_608_call(relay.reshape(const_933.astype('int64'), [8, 100]), relay.reshape(const_934.astype('float64'), [56,]), ), 3)
call_935 = relay.TupleGetItem(func_611_call(relay.reshape(const_933.astype('int64'), [8, 100]), relay.reshape(const_934.astype('float64'), [56,]), ), 3)
uop_937 = relay.acosh(const_934.astype('float32')) # shape=(56,)
uop_942 = relay.tan(uop_937.astype('float64')) # shape=(56,)
output = relay.Tuple([bop_895,call_913,const_914,bop_921,call_927,call_932,const_933,uop_942,])
output2 = relay.Tuple([bop_895,call_916,const_914,bop_921,call_928,call_935,const_933,uop_942,])
func_948 = relay.Function([var_894,var_915,var_920,], output)
mod['func_948'] = func_948
mod = relay.transform.InferType()(mod)
var_949 = relay.var("var_949", dtype = "uint16", shape = (9, 9))#candidate|949|(9, 9)|var|uint16
var_950 = relay.var("var_950", dtype = "int16", shape = (832,))#candidate|950|(832,)|var|int16
var_951 = relay.var("var_951", dtype = "int16", shape = (832,))#candidate|951|(832,)|var|int16
output = func_948(var_949,var_950,var_951,)
func_952 = relay.Function([var_949,var_950,var_951,], output)
mutated_mod['func_952'] = func_952
mutated_mod = relay.transform.InferType()(mutated_mod)
const_954 = relay.const([[[-6,3,-5,-3,10,7,7,-6,-7],[7,-3,-10,7,7,7,-1,2,8]],[[4,2,-7,-7,-8,3,4,-9,-8],[5,-6,-5,6,-3,9,-6,3,9]],[[9,-4,7,-4,-9,9,9,3,6],[-8,5,1,-3,6,-6,-7,9,4]],[[1,8,-1,7,10,-5,1,9,5],[9,8,5,10,-1,-3,6,2,-6]],[[-10,-3,5,7,9,2,-5,-3,6],[-6,-2,-9,3,1,-1,8,-9,4]],[[-9,4,6,-4,-8,-5,-9,-3,10],[-5,7,-10,-4,2,9,9,-6,8]],[[8,-4,-10,-3,1,-9,-7,-6,4],[-3,-4,2,-10,3,-6,9,-4,-2]],[[-3,3,-10,9,-9,-2,-10,-1,-1],[-10,-6,10,-6,7,3,2,6,-3]],[[10,-4,6,-1,-2,-3,-7,-5,-7],[-4,5,1,-5,-5,10,7,-10,10]],[[6,4,-6,-2,-9,-6,3,7,3],[5,1,-9,8,3,-9,-5,6,5]],[[-6,5,-4,-4,-10,3,9,3,8],[2,-10,-5,10,5,1,8,-7,-5]],[[-3,-7,9,8,10,9,3,-5,10],[3,-1,-6,10,-2,-6,-7,-5,3]],[[8,2,-3,9,4,-3,5,-2,6],[-1,-1,-3,-9,7,-7,-7,-2,-5]],[[10,4,-8,-8,-3,-1,8,5,-6],[-8,9,10,6,2,-8,4,3,-2]]], dtype = "uint64")#candidate|954|(14, 2, 9)|const|uint64
const_955 = relay.const([[[9,-7,-8,-8,-1,-10,5,6,-7],[6,-3,4,9,-5,-2,-2,-2,2]],[[5,1,-8,-4,6,-5,-10,2,-8],[-7,8,5,-6,2,7,-8,-5,-8]],[[-1,-8,-2,-4,5,-8,-2,8,-4],[1,2,-9,-7,-1,7,5,-2,7]],[[-7,-6,6,-3,-8,8,6,3,-3],[6,3,-4,9,-10,-4,4,-7,4]],[[-4,-2,10,4,7,5,-2,-2,10],[-5,5,9,2,1,-4,1,-1,-10]],[[-2,8,-2,1,-6,10,9,7,3],[-5,9,-4,-2,1,-7,6,-5,-1]],[[9,-4,-3,3,2,-5,-5,-9,6],[-7,8,2,9,7,4,5,-9,10]],[[-3,-3,-4,1,-9,-4,-6,5,-9],[1,7,-3,7,-4,-7,8,9,9]],[[2,-3,-2,9,-5,4,-1,1,-5],[9,-2,-10,-9,-1,2,2,-1,6]],[[-9,3,-9,-8,-2,-8,-3,2,-2],[-6,-3,-1,-8,10,7,3,2,2]],[[1,-2,8,1,-9,-7,-5,5,-10],[2,1,-5,9,6,4,-3,-7,9]],[[6,-5,4,9,-4,7,1,2,-3],[-10,-7,-4,-4,9,3,-7,9,-6]],[[-5,-2,1,5,-1,6,5,8,4],[-4,-10,-10,-10,-4,10,-4,6,3]],[[7,9,-4,2,1,-3,2,3,-2],[-7,-3,-3,-2,7,-3,5,-10,-8]]], dtype = "uint64")#candidate|955|(14, 2, 9)|const|uint64
bop_956 = relay.bitwise_or(const_954.astype('uint64'), relay.reshape(const_955.astype('uint64'), relay.shape_of(const_954))) # shape=(14, 2, 9)
output = bop_956
output2 = bop_956
func_964 = relay.Function([], output)
mod['func_964'] = func_964
mod = relay.transform.InferType()(mod)
output = func_964()
func_965 = relay.Function([], output)
mutated_mod['func_965'] = func_965
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1008 = relay.var("var_1008", dtype = "float64", shape = ())#candidate|1008|()|var|float64
const_1009 = relay.const([[[9.423969,2.562435,-1.537541,-1.319484,0.225093,3.718509]],[[-6.309205,8.686862,-9.416548,-4.801845,9.174216,-2.389546]],[[5.561053,0.843020,1.788599,-9.018830,-0.640729,-7.712194]],[[-5.211903,-9.822259,-0.905238,7.844150,1.033534,-3.489905]],[[3.845854,6.472089,-9.987875,8.628967,1.064258,7.191727]],[[3.911573,-9.107343,-1.171335,0.410757,5.390367,-9.644955]],[[2.842158,-3.669416,-3.848399,-4.555422,8.168476,-3.190067]],[[-1.020922,9.169851,-5.578265,-6.548515,2.580089,-5.130778]]], dtype = "float64")#candidate|1009|(8, 1, 6)|const|float64
bop_1010 = relay.mod(var_1008.astype('float64'), const_1009.astype('float64')) # shape=(8, 1, 6)
const_1026 = relay.const([[[-6.972319,-2.051002],[-6.059449,-9.504964],[-3.800933,-3.448146],[5.133690,-9.227131],[5.397933,9.916346],[9.653479,-1.300027],[-3.715880,-8.521782],[-8.635903,2.806280],[-0.448768,6.404949]],[[-2.161032,-2.321806],[-0.977531,-1.751346],[6.049561,2.958973],[7.104075,-9.046038],[-4.424014,0.947957],[-7.304660,4.214984],[3.770653,5.414680],[-5.099597,-3.077247],[4.353239,9.628575]],[[2.030452,6.172383],[-3.007898,1.751635],[3.533291,-1.912029],[-8.176237,-6.729909],[-6.198671,-6.305513],[0.629064,6.025375],[-3.331886,-4.960189],[-3.657726,8.857341],[-7.957291,-8.732489]],[[9.538311,-4.643552],[5.399451,-9.715146],[-5.678500,-6.513976],[-4.297473,-8.618860],[1.517085,-4.474231],[6.903927,3.416158],[-2.163879,-3.097854],[4.304426,-6.502486],[-6.324890,-1.429284]],[[6.652121,-8.626955],[7.441438,-1.038971],[5.837730,6.161664],[-2.296877,-3.246652],[1.809276,6.447118],[-0.325028,-1.843433],[-8.673934,1.361739],[2.510266,-1.570030],[-6.839297,2.954272]],[[-4.134920,-9.296944],[-0.264136,-5.608217],[8.952563,0.684986],[-4.090543,-9.173458],[-9.742064,-7.212658],[3.748381,9.046676],[0.471322,-0.317024],[-7.958607,-8.956496],[0.680642,-6.027081]],[[-3.148727,3.803772],[0.735092,-5.423262],[7.143937,6.614186],[3.656346,7.507960],[2.435562,-1.460822],[-7.262190,-3.040016],[-0.187932,8.239778],[8.450980,3.665321],[-7.353268,8.207570]],[[5.773699,2.193425],[3.069488,-1.697870],[3.813710,7.651625],[6.235532,0.324734],[-8.112493,-9.599143],[-9.374505,8.664408],[-2.936697,-3.785459],[9.509118,-2.966886],[7.866607,7.398494]],[[-8.177437,-3.590440],[8.025579,-9.223598],[6.790409,0.489126],[-8.386704,-5.102617],[3.197072,-6.822703],[-5.529322,7.277944],[6.421549,6.186481],[7.691378,2.757808],[-4.094545,2.917016]],[[8.167249,-4.946985],[-5.229398,7.861086],[-9.027496,9.621519],[0.897225,6.382094],[-1.443569,1.570332],[-9.126006,8.028659],[9.805262,-4.860520],[-0.847516,-0.289375],[4.458884,-1.333334]]], dtype = "float64")#candidate|1026|(10, 9, 2)|const|float64
bop_1027 = relay.minimum(var_1008.astype('float32'), const_1026.astype('float32')) # shape=(10, 9, 2)
uop_1031 = relay.atanh(bop_1027.astype('float32')) # shape=(10, 9, 2)
var_1047 = relay.var("var_1047", dtype = "float32", shape = (10, 9, 2))#candidate|1047|(10, 9, 2)|var|float32
bop_1048 = relay.bitwise_or(uop_1031.astype('uint8'), relay.reshape(var_1047.astype('uint8'), relay.shape_of(uop_1031))) # shape=(10, 9, 2)
const_1063 = relay.const([[[-7.071669,-9.732793,-8.164195,6.839204,5.590911,7.330527],[-5.709564,-6.044751,-6.883158,-5.364568,-3.103684,-7.136657],[5.240362,-3.432817,-9.050582,5.428232,-8.398218,2.073570],[-4.976519,3.018754,5.636302,-7.936134,-4.856556,2.406323],[-1.199017,1.244941,2.973868,5.881184,9.214394,-0.457932],[-5.826184,-7.995713,8.907580,7.769989,-6.262246,-9.988908],[-5.425511,-6.424611,6.635962,7.412134,3.033826,-1.731703],[8.525117,0.826533,-7.285437,-8.025849,1.228778,2.416443]],[[9.739774,-9.236256,6.826320,5.516040,3.660063,2.727943],[0.157959,-6.235736,7.244745,9.746796,4.640526,7.856364],[-6.801116,-6.898953,-1.749393,-6.300897,-5.053670,-4.553391],[5.272537,8.792330,7.456163,6.614370,-4.829935,9.654180],[5.370072,-6.543981,3.522467,-1.599270,6.363824,1.787655],[-6.263435,9.097014,-6.654531,1.416623,1.608637,-4.067375],[6.276763,5.606219,6.437996,2.691675,3.389867,3.794498],[2.757756,-1.376505,-6.396251,-5.332080,-9.056597,-6.709687]],[[0.090139,-4.486873,-2.996517,5.492740,4.876983,4.829331],[6.079731,7.839044,-0.685928,6.070694,-6.393250,2.496099],[5.880278,5.058867,8.479502,-7.361626,3.963995,-1.099174],[2.641318,6.192722,-1.567185,-4.978961,0.390390,2.407172],[-4.991896,1.621622,-9.386181,-4.021955,3.228747,5.072466],[5.431351,2.299563,5.473977,-8.582523,-5.293613,4.240023],[7.427483,-3.773709,2.354551,-8.328341,9.650655,-0.711785],[-0.022223,4.163168,-7.840180,8.635973,6.580709,6.266503]],[[-7.545542,5.548682,7.656411,1.054160,-9.008576,-2.291082],[6.629139,-6.554838,-0.263632,5.853308,1.793021,-0.361458],[6.843755,0.868631,6.381099,7.429704,-7.528647,-7.477281],[5.504036,-7.218778,8.426505,0.896319,-9.220879,8.076309],[-5.498053,5.796480,-2.829283,-2.305553,2.869864,-7.590769],[-2.013899,-9.917100,-4.238348,-7.207695,2.144106,-7.355802],[1.713656,0.127718,2.673928,1.234919,1.501348,8.401912],[-4.854526,-3.494977,0.149633,-8.965845,-5.858292,-8.232258]],[[0.585495,1.463892,-7.580378,-6.415563,0.507603,7.749225],[-8.164543,5.904011,9.115724,3.014547,-4.600288,-8.951035],[-5.041298,1.024274,0.974816,-1.688042,-3.845960,8.704203],[6.358009,6.261992,-1.029076,4.591308,0.191624,-3.710859],[4.991164,-6.332170,2.447980,7.246825,-1.876809,5.361238],[-4.330626,-2.816524,6.026591,1.839597,2.175401,0.176817],[3.747469,3.837060,9.365581,-1.295794,0.973155,-6.453852],[6.316774,9.241745,-8.959820,9.211340,-6.185646,-8.918979]],[[-0.503386,-5.722708,-1.872608,2.326751,-2.796904,-7.636468],[-8.036137,-9.303291,9.094677,2.670441,-5.889920,-5.047381],[8.278238,9.736576,-1.994702,8.251181,-3.120172,-0.206141],[6.228374,-9.342248,-9.138846,-9.351666,7.678045,9.689157],[1.825059,7.149395,7.722606,4.415574,-4.593703,-0.936900],[-2.312514,7.371958,4.251867,4.030155,2.723301,-6.896366],[-7.432090,-0.878837,2.470543,-5.529508,-3.739798,-8.568796],[-8.119116,-5.222037,-1.283708,4.904243,-2.374666,3.103030]],[[-3.837691,4.117176,4.848243,-3.942853,-0.859754,1.287929],[-0.436131,-9.987241,-4.787784,-2.060210,-3.998719,0.900843],[1.043549,6.280021,4.241216,6.007799,0.163925,0.017723],[-1.925597,-3.033202,-4.776847,-9.145342,-8.569569,-4.076843],[0.067521,9.745143,1.077680,-2.580283,7.148446,3.014197],[3.897352,-6.240362,2.900489,6.747155,1.567309,-7.852509],[9.942735,-2.169186,1.222529,-0.381672,0.360129,0.439227],[-5.692473,3.283200,1.779995,-1.012054,9.795540,-0.157962]],[[-2.993687,-4.991365,2.422525,-7.352300,1.955955,-3.854037],[5.726192,7.259160,-0.518891,1.005666,6.453822,-9.623964],[8.498213,1.606328,-6.574273,6.943471,0.240966,-7.248169],[-7.927803,8.325167,-6.735013,1.978735,9.569976,-4.728627],[3.155307,-8.928041,1.674272,3.715381,-4.455829,6.694775],[-0.507827,3.257609,6.520226,9.037548,-9.021705,3.214669],[-6.675655,-7.759738,-4.572046,-4.903019,3.327215,-1.141276],[9.413220,3.447230,-9.877513,-0.880970,-1.000762,-0.625084]]], dtype = "float64")#candidate|1063|(8, 8, 6)|const|float64
bop_1064 = relay.minimum(const_1009.astype('int8'), const_1063.astype('int8')) # shape=(8, 8, 6)
output = relay.Tuple([bop_1010,bop_1048,bop_1064,])
output2 = relay.Tuple([bop_1010,bop_1048,bop_1064,])
func_1069 = relay.Function([var_1008,var_1047,], output)
mod['func_1069'] = func_1069
mod = relay.transform.InferType()(mod)
mutated_mod['func_1069'] = func_1069
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1069_call = mutated_mod.get_global_var('func_1069')
var_1071 = relay.var("var_1071", dtype = "float64", shape = ())#candidate|1071|()|var|float64
var_1072 = relay.var("var_1072", dtype = "float32", shape = (10, 9, 2))#candidate|1072|(10, 9, 2)|var|float32
call_1070 = func_1069_call(var_1071,var_1072,)
output = call_1070
func_1073 = relay.Function([var_1071,var_1072,], output)
mutated_mod['func_1073'] = func_1073
mutated_mod = relay.transform.InferType()(mutated_mod)
func_964_call = mod.get_global_var('func_964')
func_965_call = mutated_mod.get_global_var('func_965')
call_1101 = func_964_call()
call_1102 = func_964_call()
uop_1138 = relay.rsqrt(call_1101.astype('float32')) # shape=(14, 2, 9)
uop_1140 = relay.rsqrt(call_1102.astype('float32')) # shape=(14, 2, 9)
func_103_call = mod.get_global_var('func_103')
func_107_call = mutated_mod.get_global_var('func_107')
const_1150 = relay.const([-4.582098,-7.224456,-8.328537,4.107733,1.549075,0.122584,-7.525666,0.250979,8.604289,0.676716,9.058241,-1.413825,-9.407741,-3.108660,4.988256,-5.581044,6.968283,9.754939,2.594581,0.384853,1.986480,-6.074247,9.929921,0.197000,-9.636827,7.030873,6.770866,-7.994315,-3.538835,8.866853,-4.073668,-6.786136,-8.033286,6.807636,-7.455469,4.649484,1.374429,-7.883002,6.207373,7.794253,-0.430482,4.082641,2.567172,8.598513,3.257999,2.952192,-9.520368,3.468866,-1.666649,6.266255,4.136426,-0.995012,-1.607163,6.156088,6.800232], dtype = "float32")#candidate|1150|(55,)|const|float32
call_1149 = func_103_call(relay.reshape(const_1150.astype('float32'), [11, 5]), relay.reshape(const_1150.astype('float32'), [11, 5]), )
call_1151 = func_103_call(relay.reshape(const_1150.astype('float32'), [11, 5]), relay.reshape(const_1150.astype('float32'), [11, 5]), )
func_608_call = mod.get_global_var('func_608')
func_611_call = mutated_mod.get_global_var('func_611')
var_1162 = relay.var("var_1162", dtype = "int64", shape = (2, 400))#candidate|1162|(2, 400)|var|int64
const_1163 = relay.const([7.986052,8.507529,6.604136,4.537249,-0.025905,-6.224091,-9.916295,1.608356,-9.642497,5.468990,1.492462,1.467824,7.202229,-7.664457,-2.006296,-1.393071,-8.095579,-7.011520,-0.330617,8.158576,-2.450152,-6.234295,-4.939558,0.584994,-3.013261,-8.678570,-3.097683,1.258861,7.185282,-9.109344,0.633332,6.637515,0.423333,7.978965,-1.142589,-1.148654,-9.237705,2.092757,-8.454792,9.044888,9.200339,-1.300767,3.136463,-9.282784,0.638702,-1.761159,2.439056,9.450204,-9.013132,-6.828303,9.235691,3.754819,-0.580456,-0.971226,5.044283,2.267556], dtype = "float64")#candidate|1163|(56,)|const|float64
call_1161 = relay.TupleGetItem(func_608_call(relay.reshape(var_1162.astype('int64'), [8, 100]), relay.reshape(const_1163.astype('float64'), [56,]), ), 1)
call_1164 = relay.TupleGetItem(func_611_call(relay.reshape(var_1162.astype('int64'), [8, 100]), relay.reshape(const_1163.astype('float64'), [56,]), ), 1)
uop_1168 = relay.cos(uop_1138.astype('float64')) # shape=(14, 2, 9)
uop_1170 = relay.cos(uop_1140.astype('float64')) # shape=(14, 2, 9)
func_353_call = mod.get_global_var('func_353')
func_356_call = mutated_mod.get_global_var('func_356')
const_1186 = relay.const([-9,5,7,-6,3,3,-2,3,10,3,4,-2,-2,-6,-7,8,-9,-1,-4,-1,4,8,-8,-9,-7,-4,10,9,-8,-6,7,-8,-6,5,8,6,7,2,-5,8,3,-4,8,8,2,9,-7,-8,-10,2,8,-3,-4,-2,6,-10,2,4,9,7,4,-3,-5,-6,3,-4,-8,5,2,10,9,-6,5,-4,10,8,-7,6,9,8,2,2,-1,-1,-6,10,10,-10,-6,9,-4,-3,-5,5,-1,-7,-7,2,-6,10,5,-1,9,-9,-4,2,-5,-8,-4,-6,6,-9,-2,10,5,4,-1,4,-4,5,-1,-5,2,9,-6,2,-10,-4,3,2,3,7,-3,-4,-3,-7,7,-3,7,4,6,-5,8,-9,-1,-8,-1,10,7,-10,-4,7,9,10,-9,-9,-2,-1,4,-1,3,1,4,5,-5,4,-4,-1,-10,-10,5,5,-6,10,-8,-6,10,-4,-1,8,6,5,4,2,7,4,-1,-1,-7,6,-2,6,-2,-6,9,-8,7,-4,1,6,10,-10,-1,10,2,5,10,3,4,-4,-5,-10,8,-3,2,5,-1,6,7,-2,-4,2,10,6,7,9,-4,4,4,9,9,9,10,-4,1,-6,4,-9,-3,10,-8,-2,7,2,-5,7,-6,6,4,-5,-7,-2,-8,7,9,-3,-6,7,3,7,4,-4,2,8,-1,3,-5,8,7,7,3,-10,5,4,-1,-7,-7,-7,2,-7,10,10,-6,-9,6,-10,5,9,9,9,-4,-5,7,10,-7,2,-8,3,3,-8,7,9,9,-2,-9,10,-7,-4,9,2,10,3,8,-3,-7,1,10,6,8,-8,10,10,-5,10,10,-9,-9,10,10,2,6,-1,-5,-6,4,-8,3,2,6,-1,-7,9,-5,-5,2,-2,1,7,-10,-7,-10,-1,-6,-3,6,-9,4,-10,6,-4,1,9,9,5,2,8,-10,-6,-3,-9,3,-3,-5,-6,8,-9,5,-10,5,-6,9,8,-2,-6,-3,7,10,-5,-2,-3,-2,-9,2,1,-5,4,-2,3,-9,10,-3,-2,-6,-7,-9,-1,5,-7,-9,4,-7,10,-3,3,4,-5,-2,-10,-3,9,7,2,9,-7,-8,-2,9,4,5,-5,-5,-5,-9,-5,10,-6,-3,-9,6,1,-8,10,-5,1,-4,-10,-7,3,-2,8,-2,10,-3,-8,-6,-4,3,4,-6,1,-3,8,8,6,10,1,-8,-9,-10,9,-9,-2,5,-2,5,3,-4,6,2,1,7,6,-3,-8,6,-10,-10,-7,2,-8,-3,-3,-1,9,2,-5,-6,-6,-10,3,-10,10,9,7,-9,6,-7,10,-9,-1,-1,-2,9,-7,10,4,-4,2,-6,-3,-5,8,2,-1,-7,4,1,4,-3,9,-10,7,-9,-7,9,9,-1,-9,-3,3,-3,7,-4,5,3,-5,9,6,1,1,3,6,-7,6,5,9,8,-3,-8,-2,-2,-3,-8,-9,2,9,-1,1,9,-9,9,-4,3,-9,-8,1,7,3,5,-4,-1,6,7,-2,-5,3,-9,10,6,3,10,4,-10,-1,-8,-3,8,-2,7,5,5,5,-7,-5,4,-9,-4,10,-9,-10,-7,-7,-4,-4,-3,2,-9,3,4,10,-6,2,1,7,-4,8,-1,10,4,-8,-3,8,-9,-9,-8,3,-2,-7,5,-5,-10,2,-10,9,-6,-4,7,-2,-2,1,4,6,-7,8,-7,-4,-8,10,-1,-3,-6,-8,8,1,-3,-1,-6,-4,10,-6,-7,-5,9,4,-4,6,3,-3,4,-2,-6,-5,-10,5,10,-8,-4,-1,-8,-2,1,10,-10,4,7,-10,-9,-3,-3,-10,2,10,-8,-10,4,-9,-7,-9,-2,-10,1,1,-6,-10,5,-2,5,-4,2,1,3,1,9,-9,-4,-1,1,-4,6,-6,1,9,-1,-1,4,-7,2,-7,9,-3,4,-8,7,4,8,-6,9,7,6,-10,-3,-7,8,-7,9,10,5,-10,1,-6,3,10,-7,1,6,-2,-10,-6,-3,5,-5,7,2,2,3,-4,2,-10,10,10,3,-5,-3,3,-3,9,-1,8,6,-9,-10,7,5,-8,-9,1,2,-8,8,-2,8,-1,-10,4,-10,6,6,-9,1,7,8,3,-7,-7,-10,8,-2,9,-9,-7,8,7,7,6,-5,-9,5,3,2,-7,-10,-2,-7,2,6,2,-3,9,-5,7,9,3,9,-6,-7,-5,1,9,10,3,-3,1,4,-5,6,10,-9,1,-10,-8,3,6,-3,-1,6,-3,9,-4,-4,3,-4,-5,-8,2,-5,-7,-6,-4,5,3,9,2,-8,2,-7,3,-10,6,-7,5,9,-2,-2,3,2,-1,-10,1,-1,-1,8,2,4,-5,6,-3,-10,1,1,-1,10,4,-7,9,9,-8,3,4,-8,8,-9,-3,8,-10,6,2,3,5,2,-8,3,10,8,3,3,1,2,10,8,9,-9,-9,8,2,7,2,8,5,-6,-1,2,10,8,4,-9,-9,5,-3,-3,4,7,-1,8,10,-6,2,6,2,3,9,10,-2,-7,9,-10], dtype = "int8")#candidate|1186|(975,)|const|int8
call_1185 = relay.TupleGetItem(func_353_call(relay.reshape(const_1186.astype('int8'), [15, 5, 13]), relay.reshape(var_1162.astype('int64'), [1, 800]), ), 2)
call_1187 = relay.TupleGetItem(func_356_call(relay.reshape(const_1186.astype('int8'), [15, 5, 13]), relay.reshape(var_1162.astype('int64'), [1, 800]), ), 2)
output = relay.Tuple([call_1149,const_1150,call_1161,var_1162,const_1163,uop_1168,call_1185,const_1186,])
output2 = relay.Tuple([call_1151,const_1150,call_1164,var_1162,const_1163,uop_1170,call_1187,const_1186,])
func_1192 = relay.Function([var_1162,], output)
mod['func_1192'] = func_1192
mod = relay.transform.InferType()(mod)
var_1193 = relay.var("var_1193", dtype = "int64", shape = (2, 400))#candidate|1193|(2, 400)|var|int64
output = func_1192(var_1193)
func_1194 = relay.Function([var_1193], output)
mutated_mod['func_1194'] = func_1194
mutated_mod = relay.transform.InferType()(mutated_mod)
func_964_call = mod.get_global_var('func_964')
func_965_call = mutated_mod.get_global_var('func_965')
call_1229 = func_964_call()
call_1230 = func_964_call()
output = relay.Tuple([call_1229,])
output2 = relay.Tuple([call_1230,])
func_1243 = relay.Function([], output)
mod['func_1243'] = func_1243
mod = relay.transform.InferType()(mod)
mutated_mod['func_1243'] = func_1243
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1243_call = mutated_mod.get_global_var('func_1243')
call_1244 = func_1243_call()
output = call_1244
func_1245 = relay.Function([], output)
mutated_mod['func_1245'] = func_1245
mutated_mod = relay.transform.InferType()(mutated_mod)
func_964_call = mod.get_global_var('func_964')
func_965_call = mutated_mod.get_global_var('func_965')
call_1255 = func_964_call()
call_1256 = func_964_call()
func_675_call = mod.get_global_var('func_675')
func_678_call = mutated_mod.get_global_var('func_678')
const_1260 = relay.const([4,7,-6,-4,-6,7,10,-7,-1,-5,-2,-3,-7,3,-7,-3,-8,7,-3,2,10,1,5,6,-10,-6,4,-9,6,-10,4,6,-6,-5,5,-2,9,6,1,9,3,-4,-7,-9,-8,-6,6,4,4,-3,-1,6,8,3,4,-1,-9,5,1,-1,-4,-1,8,4,-7,2,10,7,2,9,3,-4,-6,-2,-4,6,-9,-10,-2,-10,-1,-6,-2,1,2,7,-10,10,9,-3,-5,3,-5,1,-9,-8,-3,1,9,9,-10,9,-9,-7,2,-3,10,1,1,5,-2,8,9,-3,1,-10,-8,2,7,-8,-1,6,-7,9,8,9,6,7,9,4,4,3,-2,-1,-4,7,-8,-7,1,-6,-9,-1,4,-2,10,5,9,-5,-10,-9,-3,-2,-1,-9,-6,-1,2,1,10,1,9,-1,3,-9,-2,9,-7,10,1,-10,6,3,-3,-6,-8,-2,-4,-7,-1,-9,-5,10,-1,-9,10,1,-3,4,7,-1,-8,1,-8,-8,-5,1,5,-3,2,1,3,5,-6,-4,-10,9,-9,-1,-9,7,-6,-5,2,9,9,-5,4,8,1,-5,6,3,4,-4,3,-10,-2,1,-2,7,2,2,1,8,-2,7,6,-3,3,5,9,-6,10,-4,-10,2,2,-10,5,-9,10,3,3,6,5,4,7,-4,9,-9,-10,3,-6,9,10,6,-1,5,9,1,-3,6,5,6,10,5,6,-4,-10,4,10,-1,1,6,-5,1,-2,-9,1,-2,-1,-2,4,1,-10,5,7,10,2,-7,3,-7,9,3,-3,2,2,3,4,2,-3,6,5,-7,4,-5,5,3,10,-5,-4,7,5,-4,7,4,2,-7,6,5,-1,-8,-4,4,8,7,8,-8,5,3,7,-2,-5,-8,-7,10,3,6,-10,3,10,10,7,3,9,4,3,-6,6,-1,9,1,-1,3,-7,-9,-8,7,6,-7,-7,-4,-8,-1,6,-7,5,-9,7,10,-8,-3,8,2,-1,1,-2,10,-7,4,5,10,-3,8,3,-4,-7,-9,-8,-8,-10,6,-6,-1,9,6,-9,4,5,2,10,-9,6,1,-9,-10,10,10,-4,10,-6,-5,-3,9,-1,-6,-10,7,4,-7,-8,1,-4,-5,10,2,-2,-3,6,-2,2,1,4,-7,7,-9,-2,3,1,-6,1,-9,5,-7,3,-1,7,8,-1,8,-10,10,-9,-9,1,1,5,7,9,4,-1,-8,6,-10,10,4,-6,3,-9,6,-8,-4,-5,3,-4,10,2,6,4,7,-7,-6,-9,-10,1,-10,1,2,-6,-3,-3,-8,1,-7,1,10,8,2,-3,6,8,-3,-10,6,1,6,4,-3,9,9,5,-9,3,8,4,2,-10,1,-1,5,10,-9,7,-9,-1,6,6,-7,-7,-9,-1,-2,-7,10,-2,1,8,6,2,-10,2,9,1,10,-4,-10,-9,3,-7,-5,10,3,-10,1,-2,6,-9,3,2,-2,2,9,-6,9,-7,-4,-4,3,6,5,9,4,-4,-9,-10,-3,3,-6,-6,4,-1,10,-7,-9,-9,1,-4,7,3,8,-9,8,3,-2,-10,4,-5,7,7,5,10,5,2,-6,10,-10,5,2,1,8,-10,-3,7,7,7,2,-9,-5,-1,-7,5,1,-3,-7,-6,-6,-7,9,2,-8,9,8,6,-8,6,-9,3,8,-4,-2,2,-5,8,3,-2,-9,-8,1,-4,-5,6,-9,6,5,-6,10,-5,-5,1,-5,8,5,2,-3,5,-5,2,8,-5,7,7,7,10,-7,1,-3,-5,-6,4,-3,5,-10,6,-4,10,-10,7,-1,1,-10,-9,3,3,10,7,6,5,-9,-5,-2,4,-4,-1,-2,4,-7,6,6,9,7,-1,-8,-9,7,-1,9,-1,8,9,-8,-1,3,-7,5,4,2,4,-2,-10,-9,6,-6,-2,-2,-4,3,7,3,4,2,1,-3,-5,-2,-4,3,10,10,6,4,-4,7,2,7,-7,3,-2,-5,-3,-1,-7,-8,6,10,8,1,-10,3,-8,7,9,5,10,10,6,-10,-6,1,-6,3,6,6,-4,-7,1,-10,-6,6,7,-9,5,-8,-10,10,-2,10,7,-6,-8,5,-9,-2,10,-2,1,-1,-3,-5,8,10,10,-7,-7,8,-6,-5,-8,9,-4,-8,-4,-1], dtype = "int16")#candidate|1260|(832,)|const|int16
call_1259 = relay.TupleGetItem(func_675_call(relay.reshape(const_1260.astype('int16'), [8, 13, 8]), relay.reshape(const_1260.astype('int16'), [8, 13, 8]), ), 0)
call_1261 = relay.TupleGetItem(func_678_call(relay.reshape(const_1260.astype('int16'), [8, 13, 8]), relay.reshape(const_1260.astype('int16'), [8, 13, 8]), ), 0)
func_353_call = mod.get_global_var('func_353')
func_356_call = mutated_mod.get_global_var('func_356')
const_1272 = relay.const([4,7,10,-2,-6,9,-3,-2,-8,-4,-9,-4,-1,-6,9,-2,-9,-2,3,-3,-8,-3,-1,-10,7,-2,4,5,-8,-10,6,-2,10,-3,-8,4,-9,1,-3,-7,-4,9,8,1,-2,-3,-4,-3,-8,7,-5,4,-9,-3,5,-5,2,6,5,-4,-10,-7,-1,-1,9,7,-1,7,3,2,-2,6,8,-2,1,2,-4,-8,-9,5,6,-3,2,-5,-10,4,6,3,-4,-9,-2,6,7,-10,2,-6,7,5,9,-6,-9,-10,10,8,-10,-9,-7,-8,-1,-3,-6,-1,-10,4,-6,-6,-9,-1,10,5,6,2,-10,-10,-9,-4,-3,9,1,3,-2,-6,7,-1,7,-7,-1,8,9,2,2,4,3,9,5,-5,10,9,7,6,-10,-8,-4,-2,-4,-3,-2,-2,-10,-3,2,5,9,1,8,1,10,8,-4,9,5,-4,10,-6,-6,7,-6,4,-8,1,-10,-3,10,6,-10,-3,6,-3,-5,7,7,1,-8,-9,10,2,2,2,-7,-9,-3,3,2,-4,-5,10,6,-5,6,3,-4,8,2,-2,-8,5,5,-1,-4,-6,9,-10,7,1,1,-1,-3,-3,-9,-6,-9,-10,-1,-3,-7,5,-5,1,2,7,-8,-8,-7,7,-9,-3,-6,-3,6,-3,7,9,4,-5,-3,-10,1,5,-3,4,-5,-10,-9,-9,1,8,-1,9,10,-2,6,-8,-1,7,-3,-4,7,3,-9,1,-6,7,9,-1,-9,3,-4,-4,-2,-9,-1,7,-8,-6,-5,-6,-7,8,-8,4,-3,-3,-8,4,-2,-6,7,-3,-4,-2,5,1,1,-7,-10,6,-7,-2,10,4,-8,-4,-6,10,5,10,-3,1,8,-3,-8,2,10,10,-10,1,-7,-5,-4,-2,8,-9,2,-5,6,1,-8,9,8,9,4,-8,-5,-1,-5,-7,6,5,6,8,-9,7,-1,9,-6,7,-8,-10,-5,3,-5,-6,8,8,-1,-7,-5,-10,-9,-8,-7,4,10,-10,4,-9,-6,9,-6,8,-3,-10,9,7,-8,2,9,-1,-9,-6,-4,3,1,6,1,7,-10,2,-6,7,3,-7,7,-1,-9,-1,-3,-5,-6,-2,-6,1,-5,-5,-4,-2,6,-9,-7,1,-9,-1,7,-7,-8,2,-7,1,-7,-2,3,-10,-5,-1,-3,-10,-5,5,6,6,10,-9,-10,10,7,2,5,-8,-3,3,-1,8,-4,9,6,6,-3,4,5,3,-5,-3,-9,1,2,-9,6,1,2,-2,5,-4,-4,4,-10,3,-3,8,-9,-5,-2,6,-2,10,8,10,-9,-4,3,-2,4,-10,4,-1,4,6,8,6,8,4,7,9,-8,-8,-10,6,8,3,2,6,9,6,3,-9,-7,7,9,-1,-9,-8,1,-5,9,-2,-1,9,-8,9,-6,-4,-1,8,-9,7,-9,-8,-10,-9,10,-10,-10,5,3,-1,2,3,-6,-3,9,2,-6,8,5,7,-1,-8,-7,10,7,-8,-7,-2,1,10,9,9,4,3,7,5,-8,-8,6,-4,9,1,2,-1,-3,4,2,-7,-1,6,-2,-5,-3,-3,10,3,-9,7,10,-6,-10,-4,6,-1,-2,4,-9,4,1,-3,5,4,10,5,1,2,-4,4,-8,6,3,5,8,-5,5,1,6,3,-7,6,2,1,-4,5,-1,3,-10,9,-6,-6,-4,2,-2,-6,3,-9,1,2,-5,7,-9,-2,-9,-8,5,7,-1,-1,-3,-4,-10,3,2,-7,2,5,-4,-10,-9,-7,2,-6,-2,8,6,4,-4,7,10,-5,8,4,8,-5,4,-3,-6,1,-10,5,-10,3,-6,2,-4,8,8,6,-10,2,2,10,6,10,-2,-1,-4,8,5,-5,6,3,-9,-1,9,-3,-1,-1,-6,-5,5,-3,-10,-8,1,-6,-1,3,5,7,7,4,-2,-7,5,-9,7,9,10,-4,3,8,-8,-3,4,6,-9,9,7,-4,-5,-5,2,2,3,5,-6,1,-5,-7,-4,8,5,-9,-3,-9,3,-3,-9,-8,-10,2,5,2,-8,9,-3,-7,6,5,8,-10,-7,7,7,-2,-10,5,-8,5,7,7,-1,-10,-4,-8,8,-5,-10,-5,-10,6,-1,-7,-7,4,6,-3,10,6,8,-6,2,1,4,9,-3,7,-5,3,-7,-7,8,2,3,2,5,-8,-7,-9,5,8,2,-1,8,-10,-9,-9,-6,7,-10,1,-6,2,-7,6,-10,9,-10,10,2,-2,-8,-10,-4,6,-5,-9,5,4,-4,-6,-5,-8,-5,4,2,-8,8,7,-6,-6,-1,2,8,-9,-6,-9,-10,-9,-7,2,-8,-10,-10,-8,1,7,-9,-9,5,-1,3,-6,-7,5,6,3,-8,2,-1,4,4,-3,8,-2,-10,-4,5,3,4,5,-7,-4,3,-3,-6,-6,8,-3,-1,-9,-10,-1,4,-6,-6,-8,1,-8,-10,9,-9,6,2,6,-6,4,2,10,1,-4,-7,10,6,2,-10,-2,6,8,9,1,1,-3,3,8,-7,9,-5,-4,6,9,-7,-4,-10,10,6,-9,9,7,5], dtype = "int8")#candidate|1272|(975,)|const|int8
const_1273 = relay.const([[-3,-4,1,-9],[3,-4,9,-6],[-4,-7,6,-6],[-9,1,-1,2],[3,-7,10,-1],[-10,-10,8,9],[2,9,-9,-4],[-2,-2,-1,-6],[-10,7,9,-5],[-2,9,10,3],[3,-9,-7,-1],[-2,-1,-9,5],[10,-9,3,-7],[10,4,3,1],[9,8,-5,-6],[-4,-7,-4,2],[8,10,-7,6],[-2,-5,-10,-2],[-6,-7,-3,-7],[-10,8,1,-5],[-3,-2,-3,-8],[-9,-3,-1,7],[7,-2,9,-7],[-6,-2,-7,7],[3,10,8,-4],[-5,7,1,-5],[10,-1,7,-7],[-3,3,7,1],[1,-7,-1,7],[5,2,-8,6],[-4,-6,-5,5],[1,9,8,-9],[1,-8,-8,-10],[9,-10,-9,-6],[3,8,-6,-5],[1,-6,-4,-9],[-2,9,4,-2],[1,1,-8,5],[-2,9,-5,4],[8,8,6,9],[6,7,-7,-2],[-2,-10,-3,-4],[-9,-2,7,2],[-5,-9,8,8],[-8,-4,5,5],[3,8,2,1],[-4,6,9,9],[10,7,-8,4],[2,-10,5,4],[3,-4,-5,8],[7,1,4,10],[-7,-4,1,-10],[-7,2,10,-10],[10,-9,6,-4],[-1,-9,-6,1],[-7,10,-4,-1],[-3,-4,8,7],[5,-5,-3,-6],[-6,3,5,7],[10,9,10,-6],[-4,-7,4,2],[-7,-2,4,7],[4,-3,-4,10],[8,10,1,10],[-8,-8,10,-4],[5,-9,6,2],[-8,1,-5,-7],[-4,10,5,-1],[-8,7,-10,-5],[9,-7,-2,6],[-2,-1,2,10],[5,1,4,4],[4,-10,-4,-1],[-10,9,5,-1],[4,6,8,-2],[-7,-2,7,-3],[-7,3,-9,-6],[3,1,1,-7],[-4,9,-8,-4],[5,8,-1,-3],[3,2,10,-2],[-3,3,7,-7],[2,2,8,-8],[1,5,6,-10],[3,2,-10,-8],[-9,5,10,8],[9,-5,7,9],[9,10,1,-4],[-4,10,3,6],[-1,-10,4,-5],[2,-9,-5,-9],[-4,8,10,2],[8,-7,1,3],[-6,-3,2,3],[-9,-5,3,-9],[-2,4,8,-6],[-7,-7,8,-8],[-4,-5,10,2],[-2,-4,-8,2],[1,-2,2,-7],[-2,-7,6,-5],[6,-9,-9,6],[6,6,6,-6],[6,7,-7,-8],[1,-1,1,-1],[5,-5,-1,-6],[4,2,2,6],[7,7,-10,-5],[8,-9,-2,-8],[-10,-3,-6,9],[1,-10,9,-2],[-1,-2,-1,1],[-5,-2,3,-5],[-5,-6,-7,10],[6,2,8,-2],[2,10,-3,5],[-3,6,-7,1],[-9,-2,1,6],[-2,3,-10,-10],[10,-6,-1,2],[9,4,-9,7],[-3,6,-3,-1],[9,-6,8,-3],[-4,-1,3,-2],[9,8,10,-8],[6,-7,6,-3],[-2,6,-5,-6],[10,-7,-1,5],[5,-10,1,-10],[-3,8,-4,4],[2,-6,9,-7],[9,9,-2,-4],[10,-4,3,9],[-10,5,8,2],[9,8,-9,-4],[10,10,10,3],[-7,10,-10,8],[-4,7,-2,5],[-4,7,9,-2],[7,-4,-6,-6],[3,-5,-2,4],[5,1,10,-9],[10,-10,7,1],[5,-2,10,6],[-1,6,-3,3],[-4,7,2,-10],[2,-3,-1,-5],[-8,7,-3,3],[3,1,-2,6],[-1,-1,9,-7],[-9,-9,5,-5],[1,4,7,9],[-7,-8,7,6],[-8,-10,8,7],[-8,-8,-10,-7],[-6,-6,8,-3],[-8,-3,-6,2],[8,1,9,-1],[-6,-1,1,9],[1,-10,-3,-4],[-3,-5,-8,5],[8,1,-5,6],[1,-8,-7,2],[2,-7,-7,5],[9,-1,6,-2],[3,2,8,-7],[-7,-3,-2,4],[-1,1,3,-7],[4,9,5,4],[7,-4,-6,-3],[-8,7,5,5],[4,3,-2,8],[-10,5,10,-1],[-5,-9,-8,4],[-3,7,4,-4],[-10,6,9,7],[2,-5,1,-7],[-5,-7,-3,8],[-2,3,-8,4],[6,-9,5,4],[-8,-10,-9,5],[-7,4,1,-5],[-8,9,-7,-4],[-7,8,9,-1],[-3,5,-2,-5],[-1,9,2,7],[6,7,-2,-6],[4,-1,8,-9],[3,-4,-4,-3],[7,-1,10,10],[-5,-9,8,6],[-9,-6,-8,-9],[-10,-7,-9,1],[4,4,1,10],[-9,-5,-2,10],[7,-8,10,8],[-10,6,5,5],[1,-3,-1,8],[-10,8,3,5],[3,-7,-3,-7]], dtype = "int64")#candidate|1273|(200, 4)|const|int64
call_1271 = relay.TupleGetItem(func_353_call(relay.reshape(const_1272.astype('int8'), [15, 5, 13]), relay.reshape(const_1273.astype('int64'), [1, 800]), ), 0)
call_1274 = relay.TupleGetItem(func_356_call(relay.reshape(const_1272.astype('int8'), [15, 5, 13]), relay.reshape(const_1273.astype('int64'), [1, 800]), ), 0)
uop_1278 = relay.sqrt(const_1272.astype('float32')) # shape=(975,)
uop_1284 = relay.exp(uop_1278.astype('float32')) # shape=(975,)
var_1290 = relay.var("var_1290", dtype = "uint64", shape = (14, 2, 9))#candidate|1290|(14, 2, 9)|var|uint64
bop_1291 = relay.subtract(call_1255.astype('int16'), relay.reshape(var_1290.astype('int16'), relay.shape_of(call_1255))) # shape=(14, 2, 9)
bop_1294 = relay.subtract(call_1256.astype('int16'), relay.reshape(var_1290.astype('int16'), relay.shape_of(call_1256))) # shape=(14, 2, 9)
var_1295 = relay.var("var_1295", dtype = "float32", shape = (975,))#candidate|1295|(975,)|var|float32
bop_1296 = relay.bitwise_or(uop_1284.astype('uint64'), relay.reshape(var_1295.astype('uint64'), relay.shape_of(uop_1284))) # shape=(975,)
uop_1305 = relay.cos(uop_1284.astype('float32')) # shape=(975,)
output = relay.Tuple([call_1259,const_1260,call_1271,const_1273,bop_1291,bop_1296,uop_1305,])
output2 = relay.Tuple([call_1261,const_1260,call_1274,const_1273,bop_1294,bop_1296,uop_1305,])
func_1307 = relay.Function([var_1290,var_1295,], output)
mod['func_1307'] = func_1307
mod = relay.transform.InferType()(mod)
var_1308 = relay.var("var_1308", dtype = "uint64", shape = (14, 2, 9))#candidate|1308|(14, 2, 9)|var|uint64
var_1309 = relay.var("var_1309", dtype = "float32", shape = (975,))#candidate|1309|(975,)|var|float32
output = func_1307(var_1308,var_1309,)
func_1310 = relay.Function([var_1308,var_1309,], output)
mutated_mod['func_1310'] = func_1310
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1314 = relay.var("var_1314", dtype = "bool", shape = (8, 10, 12))#candidate|1314|(8, 10, 12)|var|bool
var_1315 = relay.var("var_1315", dtype = "bool", shape = (8, 10, 12))#candidate|1315|(8, 10, 12)|var|bool
bop_1316 = relay.logical_or(var_1314.astype('bool'), relay.reshape(var_1315.astype('bool'), relay.shape_of(var_1314))) # shape=(8, 10, 12)
output = relay.Tuple([bop_1316,])
output2 = relay.Tuple([bop_1316,])
func_1320 = relay.Function([var_1314,var_1315,], output)
mod['func_1320'] = func_1320
mod = relay.transform.InferType()(mod)
var_1321 = relay.var("var_1321", dtype = "bool", shape = (8, 10, 12))#candidate|1321|(8, 10, 12)|var|bool
var_1322 = relay.var("var_1322", dtype = "bool", shape = (8, 10, 12))#candidate|1322|(8, 10, 12)|var|bool
output = func_1320(var_1321,var_1322,)
func_1323 = relay.Function([var_1321,var_1322,], output)
mutated_mod['func_1323'] = func_1323
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1349 = relay.var("var_1349", dtype = "float32", shape = (12, 10, 8))#candidate|1349|(12, 10, 8)|var|float32
uop_1350 = relay.exp(var_1349.astype('float32')) # shape=(12, 10, 8)
bop_1353 = relay.add(uop_1350.astype('float32'), relay.reshape(var_1349.astype('float32'), relay.shape_of(uop_1350))) # shape=(12, 10, 8)
uop_1359 = relay.cosh(uop_1350.astype('float32')) # shape=(12, 10, 8)
var_1368 = relay.var("var_1368", dtype = "float32", shape = (12, 10, 8))#candidate|1368|(12, 10, 8)|var|float32
bop_1369 = relay.bitwise_or(bop_1353.astype('uint32'), relay.reshape(var_1368.astype('uint32'), relay.shape_of(bop_1353))) # shape=(12, 10, 8)
output = relay.Tuple([uop_1359,bop_1369,])
output2 = relay.Tuple([uop_1359,bop_1369,])
func_1376 = relay.Function([var_1349,var_1368,], output)
mod['func_1376'] = func_1376
mod = relay.transform.InferType()(mod)
mutated_mod['func_1376'] = func_1376
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1376_call = mutated_mod.get_global_var('func_1376')
var_1378 = relay.var("var_1378", dtype = "float32", shape = (12, 10, 8))#candidate|1378|(12, 10, 8)|var|float32
var_1379 = relay.var("var_1379", dtype = "float32", shape = (12, 10, 8))#candidate|1379|(12, 10, 8)|var|float32
call_1377 = func_1376_call(var_1378,var_1379,)
output = call_1377
func_1380 = relay.Function([var_1378,var_1379,], output)
mutated_mod['func_1380'] = func_1380
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1389 = relay.var("var_1389", dtype = "float64", shape = (1, 12, 5))#candidate|1389|(1, 12, 5)|var|float64
const_1390 = relay.const([[[5.142353,-4.004560,-2.625273,-9.820263,-7.401310],[-6.765317,2.547452,-1.905425,-3.902741,8.705338],[5.913058,-5.237935,0.464549,-1.680371,-9.434639],[-1.894571,-1.539221,6.751575,0.794112,0.316845],[-3.848656,3.698468,-2.665450,4.904618,-2.673181],[-3.239701,-9.067215,-6.613229,3.366059,3.528340],[-1.608192,-8.008271,-3.171356,-2.890701,7.671067],[-3.668587,4.493247,5.580624,9.661849,-6.219461],[5.955459,0.318109,-1.231911,-7.913520,-7.862945],[9.061950,0.451506,4.673442,2.556423,0.916661],[3.942530,-5.175717,9.483997,-5.136128,-4.274904],[-4.773827,-7.752425,-6.632167,-7.634280,-0.766961]],[[-4.190494,3.685108,2.394235,-6.264282,-0.701029],[3.351723,6.994418,-9.520342,-2.221661,9.061994],[-0.414296,-4.174598,-8.853233,9.812491,2.636651],[1.527853,6.080567,-7.658257,-2.699682,7.193109],[-8.632235,-2.278867,-9.740666,4.381323,-7.125343],[-6.254330,-8.480885,2.892570,9.844982,8.778005],[-8.791679,-8.104729,-9.330769,1.596524,7.598844],[2.182650,3.827758,9.099270,5.888348,-7.064637],[-0.072641,-1.279559,-6.892894,7.694638,-4.862632],[-5.511889,8.229095,-7.521089,9.284213,-4.367707],[-6.760309,9.767184,-7.847089,3.820666,2.495422],[7.052525,-3.525609,-4.463905,6.009583,-2.277244]]], dtype = "float64")#candidate|1390|(2, 12, 5)|const|float64
bop_1391 = relay.divide(var_1389.astype('float64'), const_1390.astype('float64')) # shape=(2, 12, 5)
func_1069_call = mod.get_global_var('func_1069')
func_1073_call = mutated_mod.get_global_var('func_1073')
var_1395 = relay.var("var_1395", dtype = "float64", shape = ())#candidate|1395|()|var|float64
var_1396 = relay.var("var_1396", dtype = "float32", shape = (180,))#candidate|1396|(180,)|var|float32
call_1394 = relay.TupleGetItem(func_1069_call(relay.reshape(var_1395.astype('float64'), []), relay.reshape(var_1396.astype('float32'), [10, 9, 2]), ), 0)
call_1397 = relay.TupleGetItem(func_1073_call(relay.reshape(var_1395.astype('float64'), []), relay.reshape(var_1396.astype('float32'), [10, 9, 2]), ), 0)
func_376_call = mod.get_global_var('func_376')
func_380_call = mutated_mod.get_global_var('func_380')
const_1414 = relay.const([-1.178999,-8.602424,7.094363,-0.901171,5.351996,4.272926,-4.849488,-9.733141,1.958344,2.049140,-7.727198,2.690972,-0.345598,-8.679451,-1.033124,3.245116,-0.084006,0.218366,-8.148383,-3.224470,-3.341546,7.842943,9.958574,4.569639,5.768718,0.196385,-8.232620,9.270391,3.258507,-9.519774,-7.184183,-7.200144,2.194768,-0.386768,-1.670210,0.968572,-3.228520,2.073154,-1.879157,0.833792,3.044223,-1.745500,0.528387,-7.113075,1.682249,1.447135,-5.686294,8.093792,0.197144,-8.284450,-5.085543,-1.258369,-8.346742,5.945825,1.721076,-8.200118,8.286632,-9.652479,-9.939420,-5.365550,-0.952406,2.292487,6.718117,-1.255521,-9.635308,-6.596718,4.535014,-0.341845,-1.246824,-3.360543,-9.788414,-3.114369,6.529023,-2.825481,-4.314010,-9.881331,-9.054447,7.392440,-6.086771,1.373908,-2.451901,8.413448,-7.069790,5.419816,0.284781,-9.102823,5.423344,-9.758490,-8.852022,-7.231325,4.637444,8.078674,1.202410,7.409208,-2.681025,-2.984873,6.665966,-8.563373,0.581182,-9.464451,-1.988525,-4.611710,-9.618269,-9.438714,-0.652681,5.946236,6.242430,8.252829,4.140975,-5.608005,6.224551,8.209589,5.752035,0.200476,0.134718,0.046887,-8.444907,0.013616,-6.890202,3.995413,8.177838,-2.692714,0.755017,5.272053,8.142591,7.873701,-9.129283,8.195239,-2.237761,9.655547,-5.214767,8.755031,-1.285079,1.959924,6.912851,8.203520,7.134181,1.296621,-3.476916,-3.911095,4.831096,-7.243997,-9.792087,2.782478,-6.285991,-9.299252,1.839927,-2.264247,0.653017,3.990095,-7.601491,1.911434,-9.524703,9.687472,3.885899,-4.446727,2.728000,-2.302070,-7.759432,-0.666564,-8.861873,-5.598876,0.691156,-9.988960,-5.471523,6.309401,-0.906043,1.245267,9.512442,3.313508,-6.071149,9.777348,8.306817,2.152250,0.987364,-7.524475,-6.829464,-8.969506,6.317390,-6.893393,-8.647492,3.144679,-7.590170,0.659399,7.840092,-8.145038,3.375960,2.103114,-7.977734,-5.693660,-2.170299,6.772550,6.417187,-1.355614,-0.366837,3.983688,-2.706929,-6.908961,9.886524,7.243777,-3.681544,-7.812800,8.379362,-5.416203,-1.515097,-5.347050,-3.764328,1.067908,0.580441,-7.427732,2.113374,-6.258878,-5.370824,-9.277101,-1.778089,-8.406362,-6.460098,-8.602217,-1.061776,1.591016,-3.814858,-9.349198,7.438013,-0.142272,3.358562,7.671445,-3.575246,7.651285,-7.252210,-5.125913,9.510652,6.501203,1.200109,6.798599,6.869460,-3.528634,-9.423790,-8.415741,3.995564,-4.428236,0.343075,8.627603,5.124552,4.933677,-9.070655,1.343121,-7.741780,3.947189,-1.501965,-0.486665,4.255074,0.966283,0.351543,-2.219870,4.512824,4.803425,-1.922235,-7.860438,0.182381,3.742240,-9.255115,4.741882,0.069949,-1.751902,-7.135539,0.115315,-5.919984,8.003983,-0.144013,-5.936144,3.153034,4.568608,-9.434736,0.038913,8.966821,3.958392,8.366980,-2.873520,-7.125745,1.669703,2.712620,-3.297871,3.320051,4.925859,1.731710,2.277992,-3.977650,-3.030741,4.495984,-5.777821,-1.245266,-7.286392,0.398241,6.904757,2.347614,-4.876729,4.514510,-0.733200,-5.133117,2.567595,3.855531,-5.144668,6.506102,-7.750029,6.129219,1.714552,9.371227,2.834944,-7.831254,-4.372736,8.846723,2.309841,8.356234,-2.746260,5.822574,-4.516587,-8.869654,-4.264966,3.968319,-7.400849,-7.957473,9.957444,8.080658,-9.352506,5.137807,-0.008873,6.795688,4.637289,6.432412,-9.111628,8.023045,-4.521217,-3.879426,7.015675,3.931932,-2.613699,6.127504,2.665387,-5.792343,4.869172,-1.334718,5.184289,7.069528,8.374169,-2.333801,7.383701,-2.130026,8.103781,7.244708,-5.099715,2.458070,-7.010705,-7.874215,3.441564,8.891059,-5.603660,-7.516480,0.284090,1.777457,5.251248,-6.791063,4.111780,-7.876809,1.359845,-6.148808,-8.044921,-8.656882,-9.582412,0.189489,-0.918185,-1.099266,-6.481808,-0.824522,-6.744831,-4.390368,0.586270,4.392598,9.888658,1.201534,7.563596,8.577016,2.836828,-4.436648,-7.964592,-2.629458,-2.621372,-8.622986,6.089936,-1.308459,-4.021007,8.298110,2.016878,-2.913416,-1.251128,-5.786158,9.125437,-7.645670,4.722643,5.600631,-8.422298,-8.846037,-5.278839,9.491292,8.900418,-5.318357,9.565529,9.519282,-8.899961,6.092088,-9.969053,-2.294531,4.358201,-9.039470,7.669085,5.619117,7.510643,-5.753497,-9.983906,-4.399137,4.534235,7.011785,-5.855924,6.878218,-6.297992,-5.898078,-5.023958,4.578708,3.094076,0.819888,4.985675,-0.556221,-8.522780,-0.962764,-5.986687,6.252175,5.702800,-5.050510,8.821696,-3.546271,5.345064,-7.338052,7.408716,9.232597,-0.433536,0.562683,9.405454,-8.535075,-9.347832,-5.943676,6.192818,-6.719535,-5.654075,8.326610,4.811606,-3.990007,-9.638496,-3.058748,-1.024102,-5.596997,-1.870234,-9.086757,5.915912,-0.931919,2.583088,-8.269401,-6.062366,-0.897761,-8.295553,-7.232641,2.089243,-2.947489,-5.623543,-4.261612,-6.642362,5.347650,-7.823742,6.201017,-3.946958,-9.789699,-9.031591,6.629406,8.194284,-0.719966,2.620872,3.328520,4.690976,-9.354400,9.904389,-1.137830,4.942228,-7.016618,5.653369,5.118695,6.609981,4.166415,-2.517477,-6.996687,-8.057003,2.094941,-1.711822,9.468779,-5.348985,6.010940,-8.489436,-3.974704,7.652345,2.746505,-4.747584,-8.335434,-4.444837,2.551772,-7.294715,7.079412,-6.566895,-0.695529,1.884851,-7.879801,0.907637,2.578368,1.205944,6.176900,8.848072,5.045584,2.812808,3.607246,-4.246982,7.765537,0.536601,4.161964,4.927916,-5.932654,2.231625,6.675581,-5.855778,-1.786172,-5.179016,-8.201083,7.772399,8.037392,6.023040,-7.361928,6.374690,5.010374,-0.104796,2.938208,-0.135975,0.494745,-1.109050,0.064641,4.123565,8.607459,6.099445,4.505077,1.556117,-1.337267,-6.451508,-8.329081,-0.861245,-1.062701,8.512123,-6.948527,7.701131,0.544984,-8.004273,-7.658015,7.135750,4.069188,8.056402,2.857723,6.833753,8.683414,-0.666169,-1.337830,0.747214,-7.157135,-4.334282,9.573465,-7.560370,8.272784,0.729719,-7.432400,2.228484,3.136897,0.990143,-8.885366,-2.580217,-2.560927,8.389941,6.610988,3.751338,7.816564,7.070558,9.131369,-5.070479,-1.705404,-8.789296,-6.891674,2.581969,-3.638960,-9.608225,5.187672,-8.874401,9.420970,-6.459268,1.097447,-6.144680,8.474243,5.085981,6.084908,-8.920052,2.259365,7.147200,-0.343476,4.748869,2.480513,0.904901,4.554817,-9.696950,-7.521441,5.445436,-1.067548,-6.756494,4.314552,-2.474968,6.164157,8.000444,6.268432,-5.481988,1.431616,-2.687843,2.116267,3.835040,0.190924,-6.817299,4.135231,5.054040,6.154671,9.403767,0.074311,-0.403392,-8.813206,8.315572,-0.573216,-3.075906,-2.233941,-1.007034,-7.769776,-4.619003,8.822897,6.537048,-3.924561,-0.556887,3.406184,8.722382,2.892161,8.527668,2.879980,6.927914,4.504009,4.691258,-7.937593,6.943139,4.320416,-3.020920,-2.976579,6.767453,4.716372,7.705568,-4.678169,1.116715,-2.270865,3.477792,-7.030238,8.811773,-0.687594,3.975214,-1.439588,-9.804860,-3.011611,-9.560880,-7.850704,4.988178,5.397559,-2.220300,3.936033,5.387693,4.205296,9.394710,7.878277,6.211160,0.386781,-6.265426,7.276248,-1.960667,4.235406,9.161319,-3.649880,4.824430,6.294969,9.085180,-8.356495,-5.043833,-8.377217,3.062884,-5.613619,9.159113,0.072725,2.616657,-8.925798,-1.109793,-7.085646,-1.920700,-1.972899,-3.660351,1.424480,3.271735,-5.117374,2.021852,5.918555,-7.364634,5.558956,-4.302779,4.603006,-2.581646,1.570721,5.250008,-4.441554,-9.538047,-0.418522,-3.435575,3.897779,6.959184,1.278924,-1.296849,7.507820,-9.775309,-5.751249,9.499242,-4.346059,-1.755929,-3.888763,8.672773,1.002800,9.990412,-7.513030,5.189079,3.685128,3.720521,-3.372023,-5.342136,-8.668716,-3.789571,8.480018,-0.562728,8.795875,9.365837,-9.588016,-6.427056,-5.021480,2.432427,1.802500,-1.706353,5.980931,4.129262,8.601709,1.534551,-9.903906,1.593103,9.964717,1.342790,-3.382310,-5.494316,8.819972,-0.897477,5.602562,-3.725520,-6.026812,9.943967,-2.362582,6.748796,-2.686130,2.887373,9.556836,-7.142956,-7.538805,7.070368,-1.928269,-8.278822,3.415418,-2.568084,-3.012391,3.338523,7.182277,7.258980,-5.677785,-2.689880,3.731552,5.967791,-4.092788,-1.413010,-0.585672,2.900972,6.734270,-1.132738,-6.126216,1.647868,-8.737393,6.814568,-4.021932,5.353696,-9.044786,4.592738,-4.159536,-2.693360,8.926076,2.052969,-4.239767,-8.642808,-0.289155,-7.089207,2.477569,-7.723691,2.856744,-9.718413,-9.125828,-3.653157,7.907596,-0.320731,-2.026006,-2.937785,0.195355,1.064449,-7.118533,-7.422126,9.956831,2.571035,-5.433651,-4.069387,4.785210,1.431659,-2.992015,-0.847527,-1.133498,3.899941,9.396590,-1.534448,-4.036680,7.226775,1.744359,0.665622,-8.714878,-6.308222,-2.803023,-2.922290,4.760158,6.901494,0.356915,0.555608,7.643570,4.769445,-8.844587,3.229749,5.793996,6.460354,-2.407563,6.304748,6.828004,-8.970936,-9.736256,8.030205,-0.866848,-4.853042,4.480034,1.609935,-7.461945,9.089099,-1.590484,7.934648,1.565368,4.979363,-5.137694,9.629542,-8.202938,4.357043,-0.254975,-8.923814,-1.292528,0.020753,-1.697961,-3.988699,0.782340,7.127345,-9.820115,2.563169,2.415027,-6.166702,-5.990984,0.090137,8.125755,8.545305,4.370745,-0.955888,-7.468827,4.686592,1.022482,-3.225482,-8.186258,-7.378629,-6.896681,-5.541906,-2.244347,4.194702,-7.936189,8.499485,-8.154262,-4.162412,-3.744142,0.867474,-9.704609,1.530955,-8.909421,-3.800444,8.729315,8.595611], dtype = "float64")#candidate|1414|(924,)|const|float64
var_1415 = relay.var("var_1415", dtype = "int8", shape = (975,))#candidate|1415|(975,)|var|int8
call_1413 = relay.TupleGetItem(func_376_call(relay.reshape(const_1414.astype('float64'), [7, 12, 11]), relay.reshape(var_1415.astype('int8'), [975,]), ), 0)
call_1416 = relay.TupleGetItem(func_380_call(relay.reshape(const_1414.astype('float64'), [7, 12, 11]), relay.reshape(var_1415.astype('int8'), [975,]), ), 0)
output = relay.Tuple([bop_1391,call_1394,var_1395,var_1396,call_1413,const_1414,var_1415,])
output2 = relay.Tuple([bop_1391,call_1397,var_1395,var_1396,call_1416,const_1414,var_1415,])
func_1419 = relay.Function([var_1389,var_1395,var_1396,var_1415,], output)
mod['func_1419'] = func_1419
mod = relay.transform.InferType()(mod)
var_1420 = relay.var("var_1420", dtype = "float64", shape = (1, 12, 5))#candidate|1420|(1, 12, 5)|var|float64
var_1421 = relay.var("var_1421", dtype = "float64", shape = ())#candidate|1421|()|var|float64
var_1422 = relay.var("var_1422", dtype = "float32", shape = (180,))#candidate|1422|(180,)|var|float32
var_1423 = relay.var("var_1423", dtype = "int8", shape = (975,))#candidate|1423|(975,)|var|int8
output = func_1419(var_1420,var_1421,var_1422,var_1423,)
func_1424 = relay.Function([var_1420,var_1421,var_1422,var_1423,], output)
mutated_mod['func_1424'] = func_1424
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1243_call = mod.get_global_var('func_1243')
func_1245_call = mutated_mod.get_global_var('func_1245')
call_1437 = relay.TupleGetItem(func_1243_call(), 0)
call_1438 = relay.TupleGetItem(func_1245_call(), 0)
uop_1441 = relay.acosh(call_1437.astype('float64')) # shape=(14, 2, 9)
uop_1443 = relay.acosh(call_1438.astype('float64')) # shape=(14, 2, 9)
func_1069_call = mod.get_global_var('func_1069')
func_1073_call = mutated_mod.get_global_var('func_1073')
var_1445 = relay.var("var_1445", dtype = "float64", shape = ())#candidate|1445|()|var|float64
const_1446 = relay.const([-6.330632,-3.379198,-5.038629,-5.400375,-3.254661,9.483397,8.477947,-1.534794,8.606723,-7.185271,6.360396,-2.320465,-2.821585,-7.890359,5.266778,-6.838533,-0.465236,4.509651,-9.567420,-1.198402,-5.612326,-2.917571,5.524336,1.285916,3.540116,-0.202199,0.366279,6.159347,7.589234,6.871915,-7.222646,-8.017411,-4.206723,6.264139,3.667802,-8.291685,-0.493907,8.169890,6.787993,-5.574176,-2.173319,-1.881831,1.026373,9.986893,7.485808,8.009084,1.169013,9.763544,4.340448,-6.460795,-5.284643,6.571439,2.524958,-1.366176,5.050979,-0.460254,9.148377,4.453500,-2.141002,2.932647,-6.727406,0.608034,-2.253903,1.168303,-3.611696,3.064996,-7.028161,6.396301,9.986227,2.492743,-1.773816,3.450945,-0.004185,-4.955259,9.667401,-3.979619,-2.063608,8.727498,-9.887961,-3.693232,-6.222243,4.383204,-8.282322,5.520971,-5.151642,1.066725,-2.411317,-3.238528,4.260575,5.090354,-8.066511,-2.462056,-4.990152,-9.191852,1.225941,4.084251,-2.930125,-1.453001,0.628078,-8.398125,-7.770487,-4.639375,-7.308595,1.575529,8.695407,1.483478,6.513771,-8.355731,4.168623,-7.049946,8.155128,6.253592,9.197771,7.671045,5.654395,-0.744753,3.332150,-5.576367,-5.872793,1.287155,-7.924090,5.124853,1.201286,2.963378,-7.525188,0.627266,4.750228,3.360312,-3.059509,4.480942,4.925108,-8.080642,-9.209152,-5.669345,-7.047245,-0.846134,-8.213198,-1.558844,7.906709,7.371781,-1.162563,-1.878907,9.385272,-9.130092,-0.805104,1.828805,7.267690,-1.877674,-0.355261,-4.088653,-3.721665,7.166119,9.681679,-4.401051,-4.250088,-7.850226,-4.199369,-8.528392,3.543570,-2.055468,0.129536,8.552581,9.024210,-8.321760,-0.930626,-8.064567,-3.821723,-9.768375,-6.906946,-4.738301,-7.847436,8.915257,1.735427,-0.774890,-9.396034,-9.237122,-1.096868,-3.840104,2.231897,0.091634], dtype = "float32")#candidate|1446|(180,)|const|float32
call_1444 = relay.TupleGetItem(func_1069_call(relay.reshape(var_1445.astype('float64'), []), relay.reshape(const_1446.astype('float32'), [10, 9, 2]), ), 2)
call_1447 = relay.TupleGetItem(func_1073_call(relay.reshape(var_1445.astype('float64'), []), relay.reshape(const_1446.astype('float32'), [10, 9, 2]), ), 2)
bop_1461 = relay.greater_equal(call_1444.astype('bool'), var_1445.astype('bool')) # shape=(8, 8, 6)
bop_1464 = relay.greater_equal(call_1447.astype('bool'), var_1445.astype('bool')) # shape=(8, 8, 6)
bop_1475 = relay.add(call_1444.astype('uint16'), var_1445.astype('uint16')) # shape=(8, 8, 6)
bop_1478 = relay.add(call_1447.astype('uint16'), var_1445.astype('uint16')) # shape=(8, 8, 6)
func_1243_call = mod.get_global_var('func_1243')
func_1245_call = mutated_mod.get_global_var('func_1245')
call_1480 = relay.TupleGetItem(func_1243_call(), 0)
call_1481 = relay.TupleGetItem(func_1245_call(), 0)
func_46_call = mod.get_global_var('func_46')
func_50_call = mutated_mod.get_global_var('func_50')
var_1483 = relay.var("var_1483", dtype = "int64", shape = (800,))#candidate|1483|(800,)|var|int64
call_1482 = relay.TupleGetItem(func_46_call(relay.reshape(var_1483.astype('int64'), [10, 10, 8]), relay.reshape(var_1483.astype('int64'), [10, 10, 8]), ), 2)
call_1484 = relay.TupleGetItem(func_50_call(relay.reshape(var_1483.astype('int64'), [10, 10, 8]), relay.reshape(var_1483.astype('int64'), [10, 10, 8]), ), 2)
uop_1486 = relay.asin(const_1446.astype('float32')) # shape=(180,)
func_1243_call = mod.get_global_var('func_1243')
func_1245_call = mutated_mod.get_global_var('func_1245')
call_1508 = relay.TupleGetItem(func_1243_call(), 0)
call_1509 = relay.TupleGetItem(func_1245_call(), 0)
bop_1520 = relay.equal(uop_1486.astype('bool'), var_1445.astype('bool')) # shape=(180,)
output = relay.Tuple([uop_1441,bop_1461,bop_1475,call_1480,call_1482,var_1483,call_1508,bop_1520,])
output2 = relay.Tuple([uop_1443,bop_1464,bop_1478,call_1481,call_1484,var_1483,call_1509,bop_1520,])
func_1523 = relay.Function([var_1445,var_1483,], output)
mod['func_1523'] = func_1523
mod = relay.transform.InferType()(mod)
mutated_mod['func_1523'] = func_1523
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1523_call = mutated_mod.get_global_var('func_1523')
var_1525 = relay.var("var_1525", dtype = "float64", shape = ())#candidate|1525|()|var|float64
var_1526 = relay.var("var_1526", dtype = "int64", shape = (800,))#candidate|1526|(800,)|var|int64
call_1524 = func_1523_call(var_1525,var_1526,)
output = call_1524
func_1527 = relay.Function([var_1525,var_1526,], output)
mutated_mod['func_1527'] = func_1527
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1243_call = mod.get_global_var('func_1243')
func_1245_call = mutated_mod.get_global_var('func_1245')
call_1529 = relay.TupleGetItem(func_1243_call(), 0)
call_1530 = relay.TupleGetItem(func_1245_call(), 0)
var_1555 = relay.var("var_1555", dtype = "uint64", shape = (14, 2, 9))#candidate|1555|(14, 2, 9)|var|uint64
bop_1556 = relay.bitwise_and(call_1529.astype('uint64'), relay.reshape(var_1555.astype('uint64'), relay.shape_of(call_1529))) # shape=(14, 2, 9)
bop_1559 = relay.bitwise_and(call_1530.astype('uint64'), relay.reshape(var_1555.astype('uint64'), relay.shape_of(call_1530))) # shape=(14, 2, 9)
bop_1566 = relay.bitwise_xor(bop_1556.astype('uint8'), relay.reshape(var_1555.astype('uint8'), relay.shape_of(bop_1556))) # shape=(14, 2, 9)
bop_1569 = relay.bitwise_xor(bop_1559.astype('uint8'), relay.reshape(var_1555.astype('uint8'), relay.shape_of(bop_1559))) # shape=(14, 2, 9)
func_1523_call = mod.get_global_var('func_1523')
func_1527_call = mutated_mod.get_global_var('func_1527')
var_1572 = relay.var("var_1572", dtype = "float64", shape = ())#candidate|1572|()|var|float64
var_1573 = relay.var("var_1573", dtype = "int64", shape = (8, 100))#candidate|1573|(8, 100)|var|int64
call_1571 = relay.TupleGetItem(func_1523_call(relay.reshape(var_1572.astype('float64'), []), relay.reshape(var_1573.astype('int64'), [800,]), ), 1)
call_1574 = relay.TupleGetItem(func_1527_call(relay.reshape(var_1572.astype('float64'), []), relay.reshape(var_1573.astype('int64'), [800,]), ), 1)
func_1419_call = mod.get_global_var('func_1419')
func_1424_call = mutated_mod.get_global_var('func_1424')
var_1578 = relay.var("var_1578", dtype = "float64", shape = (60,))#candidate|1578|(60,)|var|float64
var_1579 = relay.var("var_1579", dtype = "float32", shape = (180,))#candidate|1579|(180,)|var|float32
const_1580 = relay.const([[3,6,-9,2,-3,-10,1,3,-10,-1,-5,-7,-4,-3,-10,-5,-1,10,-4,-1,-7,4,-7,-2,-3,5,-4,6,9,-3,4,-3,-10,5,5,3,-1,10,5,4,4,8,4,-8,-3,3,10,2,-8,6,-5,3,-5,3,-2,-7,-8,6,9,4,-6,9,2,-6,8,-2,-10,-8,-8,4,-8,8,-8,-6,10,-10,7,-2,3,-9,-1,-6,6,5,-5,-3,2,6,6,10,2,-2,-1,7,-4,9,-7,-6,8,-6,4,5,1,-7,-3,-4,-9,3,-3,-6,-7,2,-1,-7,-2,4,-2,-2,-10,1,8,-6,2,-6,2,-9,8,-2,-2,10,4,9,-4,-1,2,6,7,-6,3,-3,-6,3,6,5,-6,1,2,8,-1,-8,2,2,8,-8,9,-8,-4,1,6,-9,4,2,9,1,10,-4,5,-2,3,-6,3,-9,4,-8,-9,-3,-6,10,9,-7,9,1,-7,-7,-5,3,6,5,-6,-2,-10,10,2,-1,-9,9,-8,-4,-5,5,5,-8,-4,2,-7,-4,9,-5,2,-3,-4,1,-5,7,5,2,2,2,6,-5,-8,2,-1,-10,2,-3,8,-8,-8,-4,9,-2,9,-6,-8,10,9,3,8,2,7,-4,-1,9,-9,2,-1,8,10,5,-4,4,-6,3,2,-1,5,5,10,-5,7,7,-4,5,9,-2,4,6,4,-1,-7,5,-2,7,-4,-2,-2,6,4,-1,-1,5,8,-5,-3,7,3,-3,4,-6,2,9,7,-1,-7,3,3,5,-1,4,-9,7,4,-6,8,7,1,6,-1,10,-9,-10,-5,6,7,2,-10,7,-9,-2,-6,8,5,9,3,6,4,-8,10,7,-3,-3,-7,9,-5,4,-2,-1,6,-2,9,3,-1,4,-5,7,7,-5,2,2,-6,1,9,-4,-1,-6,-2,6,1,5,9,6,-3,4,-6,5,5,2,7,10,10,-10,6,8,-6,-3,-4,-10,-9,-4,-3,9,-4,-1,-6,-1,-7,-1,-7,-10,1,-7,-2,3,3,8,-6,-1,7,1,3,10,-5,2,-9,6,-6,6,-1,-1,6,-10,6,1,5,7,-6,-7,7,4,10,7,-2,-3,-3,9,4,2,-3,5,6,8,-8,-4,2,2,-7,-9,-5,-2,-9,-8,10,-4,2,3,-1,4,3,6,-6,-1,-9,-2,7,3,-6,-10,10,1,3,-3,-2,6,5,-5,8,5,-8,-4,-2,-10,7,-5,4,-10,-8,3,-10,-9,9,-7,2,6,9,-5,-6,-7,5,-1,-6,7,-4,5,-9,10,-8,5,-6,-10,-3,-6,-9,2,-5,-6,4,6,-6,-3,-5,3,7,-3,-10,-10,5,-2,10,-2,-8,7,-4,9,4,-2,-4,-4,2,-6,8,7,-5,-2,4,-10,-4,4,10,7,7,4,-4,-2,6,3,5,9,-1,-5,-5,-7,1,-9,7,8,-5,5,3,-10,-5,-2,2,-2,-10,-6,-1,-8,-6,-7,2,7,10,-9,-9,-9,-1,-9,-2,-4,8,-1,-6,-3,-5,7,6,5,8,-6,-4,-5,7,5,-5,-2,-2,-1,-2,-1,3,-4,-2,4,6,6,6,-4,5,2,10,-10,9,-1,6,-9,7,-9,-4,-8,-4,10,-8,-4,-4,1,-2,-6,-4,3,-6,2,-6,4,-5,-10,-9,-8,-5,-7,9,-2,-1,-4,-5,7,-7,-7,-10,-3,-3,6,3,6,8,-6,-3,10,9,1,8,5,8,10,-3,5,-4,-6,4,-7,-7,-9,-3,4,-2,-6,-2,-10,3,8,-1,-9,-1,5,9,8,-7,6,-8,2,3,2,8,-6,2,-4,7,9,2,-5,-4,-9,-2,10,5,-9,1,6,5,-10,-7,9,2,4,-10,5,2,4,8,3,8,-6,7,-8,-5,9,-5,-6,4,10,-6,7,-10,-3,9,-4,2,-7,1,1,-6,-7,-9,-7,-2,-9,4,10,1,2,1,-6,-5,2,-10,1,-5,6,-3,1,2,6,7,7,9,-5,-5,-3,-6,6,8,-10,10,-1,1,-8,1,10,-10,-6,-6,9,-4,4,7,-5,-1,-10,-3,2,2,-8,6,2,4,-6,9,-6,8,-2,-1,-2,2,-1,-4,10,5,-10,7,-8,8,-3,-9,-9,-8,4,9,-10,-9,-7,-6,-8,6,-3,-1,-4,-2,7,8,10,8,5,-1,8,10,10,2,-8,-9,-1,-1,-9,-6,6,-2,-9,-2,8,1,-1,3,6,3,-6,-4,-3,4,10,8,-3,4,-3,-6,2,-8,8,-8,9,-8,-4,-1,-7,-8,-6,-5,-9,1,-7,-4,6,-4,3,7,-1,-6,5,-3,4,-1,10,-1,7,2,1,-3,-9,-9,6,6,-9,4,10,10,1,-6,9,1,-9,10,-10,-5,7,-3,10,-2,-2,6,-4,-7,10,-5,1,5,-10,8,-5,2,8,6,-5,-8,-5,-10,-3,-5,2,-1,7,-1,-10,-8,5,-8,-5,1,-3,10,5,8,-9,-10,2,-2,-9,5,-3,6,-4,10,-1,1,2,-3,-1,7,-3,-1,-2,3,7,3,-2,9,-5,7]], dtype = "int8")#candidate|1580|(1, 975)|const|int8
call_1577 = relay.TupleGetItem(func_1419_call(relay.reshape(var_1578.astype('float64'), [1, 12, 5]), relay.reshape(var_1572.astype('float64'), []), relay.reshape(var_1579.astype('float32'), [180,]), relay.reshape(const_1580.astype('int8'), [975,]), ), 2)
call_1581 = relay.TupleGetItem(func_1424_call(relay.reshape(var_1578.astype('float64'), [1, 12, 5]), relay.reshape(var_1572.astype('float64'), []), relay.reshape(var_1579.astype('float32'), [180,]), relay.reshape(const_1580.astype('int8'), [975,]), ), 2)
output = relay.Tuple([bop_1566,call_1571,var_1572,var_1573,call_1577,var_1578,var_1579,const_1580,])
output2 = relay.Tuple([bop_1569,call_1574,var_1572,var_1573,call_1581,var_1578,var_1579,const_1580,])
func_1593 = relay.Function([var_1555,var_1572,var_1573,var_1578,var_1579,], output)
mod['func_1593'] = func_1593
mod = relay.transform.InferType()(mod)
var_1594 = relay.var("var_1594", dtype = "uint64", shape = (14, 2, 9))#candidate|1594|(14, 2, 9)|var|uint64
var_1595 = relay.var("var_1595", dtype = "float64", shape = ())#candidate|1595|()|var|float64
var_1596 = relay.var("var_1596", dtype = "int64", shape = (8, 100))#candidate|1596|(8, 100)|var|int64
var_1597 = relay.var("var_1597", dtype = "float64", shape = (60,))#candidate|1597|(60,)|var|float64
var_1598 = relay.var("var_1598", dtype = "float32", shape = (180,))#candidate|1598|(180,)|var|float32
output = func_1593(var_1594,var_1595,var_1596,var_1597,var_1598,)
func_1599 = relay.Function([var_1594,var_1595,var_1596,var_1597,var_1598,], output)
mutated_mod['func_1599'] = func_1599
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1601 = relay.var("var_1601", dtype = "float32", shape = (13, 13, 4))#candidate|1601|(13, 13, 4)|var|float32
uop_1602 = relay.exp(var_1601.astype('float32')) # shape=(13, 13, 4)
output = relay.Tuple([uop_1602,])
output2 = relay.Tuple([uop_1602,])
func_1604 = relay.Function([var_1601,], output)
mod['func_1604'] = func_1604
mod = relay.transform.InferType()(mod)
mutated_mod['func_1604'] = func_1604
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1605 = relay.var("var_1605", dtype = "float32", shape = (13, 13, 4))#candidate|1605|(13, 13, 4)|var|float32
func_1604_call = mutated_mod.get_global_var('func_1604')
call_1606 = func_1604_call(var_1605)
output = call_1606
func_1607 = relay.Function([var_1605], output)
mutated_mod['func_1607'] = func_1607
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1243_call = mod.get_global_var('func_1243')
func_1245_call = mutated_mod.get_global_var('func_1245')
call_1619 = relay.TupleGetItem(func_1243_call(), 0)
call_1620 = relay.TupleGetItem(func_1245_call(), 0)
func_716_call = mod.get_global_var('func_716')
func_720_call = mutated_mod.get_global_var('func_720')
var_1627 = relay.var("var_1627", dtype = "float64", shape = (1287,))#candidate|1627|(1287,)|var|float64
const_1628 = relay.const([[4,10,9,6],[-2,4,-10,-6],[-3,-5,5,-4],[10,5,1,8],[-3,-1,-4,-10],[10,10,4,-3],[4,-1,-5,-3],[-3,2,-10,-1],[9,-7,-3,-9],[-8,2,-6,1],[5,2,1,7],[-6,7,-9,10],[4,-3,2,-9],[5,-6,-8,-3],[-1,7,10,5],[2,3,4,-3],[1,-3,-2,-5],[6,9,8,-9],[9,-2,-7,-7],[3,-2,1,3],[-3,-5,9,-1],[-1,8,-2,-10],[-2,-10,-1,10],[4,1,9,-7],[10,-7,-4,-5],[7,-8,-10,-8],[3,3,-4,10],[-7,3,-4,-8],[4,5,-4,-7],[-4,1,-3,8],[8,2,4,-8],[-2,7,-3,10],[2,9,6,8],[9,5,10,-6],[5,-10,9,-10],[-1,6,-1,3],[-2,1,6,-7],[3,-7,-3,1],[2,-7,-9,1],[-3,6,-3,-9],[-1,2,-4,-4],[-9,7,-5,-2],[-10,-7,5,1],[-5,3,-7,-5],[-5,-8,6,-3],[3,10,2,3],[2,-3,8,-6],[4,-2,-2,-7],[-6,3,7,8],[9,5,10,3],[8,9,-1,-8],[4,6,-1,-10],[-10,-6,2,4],[-1,-1,7,-1],[10,-10,4,-8],[1,4,-8,6],[1,2,7,-3],[7,9,7,-10],[9,2,9,6],[5,-4,6,9],[-4,-1,9,1],[-7,9,-10,5],[-10,-7,-10,-10],[2,-5,4,6],[-7,2,10,-1],[6,4,-2,9],[7,-10,8,-1],[-6,1,-4,-9],[-3,-6,-6,3],[-10,8,-8,-3],[-3,-4,-5,-3],[3,10,-10,-8],[-3,9,5,1],[-9,-7,-6,-3],[-5,1,-2,-10],[8,-2,-2,3],[-5,5,4,-5],[-5,-1,-5,9],[1,-10,4,-8],[2,1,2,-7],[6,-7,8,-3],[-6,-1,7,3],[-1,1,-10,8],[-2,-6,-10,-1],[5,-5,2,5],[2,-1,7,9],[6,3,-2,8],[7,6,6,-4],[-5,-5,10,-7],[5,3,1,-10],[-1,-2,2,-7],[-5,8,2,6],[2,-4,-3,-5],[8,-10,10,-7],[3,-6,-3,-5],[7,2,7,7],[-9,-4,-2,1],[-8,3,3,1],[-1,-4,-9,3],[-4,7,4,3],[-5,-8,-9,-8],[-1,3,1,1],[-10,-8,-6,8],[7,3,9,7],[-4,-10,-1,10],[-9,8,-8,6],[6,8,9,1],[-1,-9,2,-4],[-8,-1,-5,3],[-5,-8,1,-10],[9,8,6,-4],[-6,9,9,-6],[2,-6,-8,2],[9,6,-5,-7],[-8,4,4,3],[3,6,9,-6],[9,7,2,-3],[-1,-1,9,3],[-2,-1,5,4],[8,-9,-2,-8],[-9,-2,-4,2],[-8,-4,-2,2],[3,8,-9,-5],[2,6,1,9],[-8,-10,8,2],[8,2,-2,-2],[10,-3,4,-8],[2,-2,-7,-2],[2,9,-6,7],[-6,4,3,-3],[7,2,3,-8],[3,9,-1,-6],[5,-6,-8,-6],[9,-2,-5,-7],[-8,4,8,-8],[1,2,-8,-6],[6,5,4,8],[-9,-8,-5,9],[-4,7,-6,-5],[-10,-1,-7,-1],[-9,-5,-8,-6],[3,-3,9,-4],[-6,6,-3,9],[10,-2,-6,-8],[-1,-8,7,-6],[-8,-1,-1,-1],[-3,9,8,1],[-7,-6,8,-8],[8,8,9,-8],[-2,-5,1,2],[-1,-1,-8,-10],[5,-9,-2,4],[2,7,-3,-10],[3,10,9,9],[-2,2,3,4],[-8,5,-10,9],[-8,-7,3,-7],[-3,8,8,6],[8,-9,-8,2],[-8,5,5,-1],[-4,3,-6,-2],[9,2,9,-9],[-4,9,3,-1],[10,8,1,6],[8,3,-4,-4],[4,4,4,10],[4,-1,5,-10],[7,8,-9,-5],[6,2,10,-4],[-2,8,2,5],[1,4,7,9],[-4,-3,-1,-4],[6,-8,-4,3],[-9,-3,2,8],[3,9,8,5],[5,8,8,-5],[-8,3,5,7],[10,6,7,5],[-8,7,2,-9],[-9,7,9,-2],[-6,8,-2,5],[6,-3,-5,-10],[-3,-8,-8,-6],[-4,-6,4,9],[-4,1,-3,-7],[-10,-1,-9,8],[7,-8,5,-3],[6,3,7,2],[-10,-7,-1,-3],[5,8,2,-7],[-3,5,9,-8],[-7,-9,-4,8],[-5,-8,-3,9],[-2,3,4,2],[-5,5,5,2],[-6,-10,1,-6],[-5,7,5,8],[-5,-3,1,6],[4,-3,-7,-3],[-6,-5,1,7],[6,-5,-10,-10],[2,-3,9,-10],[-3,2,-7,-4],[7,2,-3,-5],[-1,-1,3,-7],[5,9,-1,8],[1,-5,4,1],[-1,3,-10,-4]], dtype = "int16")#candidate|1628|(208, 4)|const|int16
call_1626 = relay.TupleGetItem(func_716_call(relay.reshape(var_1627.astype('float64'), [13, 11, 9]), relay.reshape(const_1628.astype('int16'), [832,]), ), 3)
call_1629 = relay.TupleGetItem(func_720_call(relay.reshape(var_1627.astype('float64'), [13, 11, 9]), relay.reshape(const_1628.astype('int16'), [832,]), ), 3)
func_716_call = mod.get_global_var('func_716')
func_720_call = mutated_mod.get_global_var('func_720')
call_1636 = relay.TupleGetItem(func_716_call(relay.reshape(var_1627.astype('float64'), [13, 11, 9]), relay.reshape(call_1626.astype('int16'), [832,]), ), 2)
call_1637 = relay.TupleGetItem(func_720_call(relay.reshape(var_1627.astype('float64'), [13, 11, 9]), relay.reshape(call_1626.astype('int16'), [832,]), ), 2)
func_1192_call = mod.get_global_var('func_1192')
func_1194_call = mutated_mod.get_global_var('func_1194')
var_1642 = relay.var("var_1642", dtype = "int64", shape = (40, 20))#candidate|1642|(40, 20)|var|int64
call_1641 = relay.TupleGetItem(func_1192_call(relay.reshape(var_1642.astype('int64'), [2, 400])), 4)
call_1643 = relay.TupleGetItem(func_1194_call(relay.reshape(var_1642.astype('int64'), [2, 400])), 4)
uop_1650 = relay.acosh(call_1626.astype('float32')) # shape=(8, 13, 8)
uop_1652 = relay.acosh(call_1629.astype('float32')) # shape=(8, 13, 8)
uop_1656 = relay.erf(uop_1650.astype('float64')) # shape=(8, 13, 8)
uop_1658 = relay.erf(uop_1652.astype('float64')) # shape=(8, 13, 8)
uop_1668 = relay.acos(call_1636.astype('float64')) # shape=(13, 11, 9)
uop_1670 = relay.acos(call_1637.astype('float64')) # shape=(13, 11, 9)
var_1672 = relay.var("var_1672", dtype = "float64", shape = (13, 11, 9))#candidate|1672|(13, 11, 9)|var|float64
bop_1673 = relay.add(uop_1668.astype('uint64'), relay.reshape(var_1672.astype('uint64'), relay.shape_of(uop_1668))) # shape=(13, 11, 9)
bop_1676 = relay.add(uop_1670.astype('uint64'), relay.reshape(var_1672.astype('uint64'), relay.shape_of(uop_1670))) # shape=(13, 11, 9)
uop_1677 = relay.exp(var_1642.astype('float64')) # shape=(40, 20)
output = relay.Tuple([call_1619,var_1627,const_1628,call_1641,uop_1656,bop_1673,uop_1677,])
output2 = relay.Tuple([call_1620,var_1627,const_1628,call_1643,uop_1658,bop_1676,uop_1677,])
func_1696 = relay.Function([var_1627,var_1642,var_1672,], output)
mod['func_1696'] = func_1696
mod = relay.transform.InferType()(mod)
var_1697 = relay.var("var_1697", dtype = "float64", shape = (1287,))#candidate|1697|(1287,)|var|float64
var_1698 = relay.var("var_1698", dtype = "int64", shape = (40, 20))#candidate|1698|(40, 20)|var|int64
var_1699 = relay.var("var_1699", dtype = "float64", shape = (13, 11, 9))#candidate|1699|(13, 11, 9)|var|float64
output = func_1696(var_1697,var_1698,var_1699,)
func_1700 = relay.Function([var_1697,var_1698,var_1699,], output)
mutated_mod['func_1700'] = func_1700
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1710 = relay.var("var_1710", dtype = "uint64", shape = (11, 3))#candidate|1710|(11, 3)|var|uint64
const_1711 = relay.const([[5,7,7],[-3,-10,9],[6,-5,2],[2,-8,-10],[-2,-3,-10],[-3,8,-10],[-9,-8,-10],[9,8,-8],[3,-2,9],[-5,2,5],[3,-7,-7]], dtype = "uint64")#candidate|1711|(11, 3)|const|uint64
bop_1712 = relay.logical_xor(var_1710.astype('uint64'), relay.reshape(const_1711.astype('uint64'), relay.shape_of(var_1710))) # shape=(11, 3)
output = bop_1712
output2 = bop_1712
func_1717 = relay.Function([var_1710,], output)
mod['func_1717'] = func_1717
mod = relay.transform.InferType()(mod)
mutated_mod['func_1717'] = func_1717
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1718 = relay.var("var_1718", dtype = "uint64", shape = (11, 3))#candidate|1718|(11, 3)|var|uint64
func_1717_call = mutated_mod.get_global_var('func_1717')
call_1719 = func_1717_call(var_1718)
output = call_1719
func_1720 = relay.Function([var_1718], output)
mutated_mod['func_1720'] = func_1720
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1749 = relay.var("var_1749", dtype = "float32", shape = (1, 1, 8))#candidate|1749|(1, 1, 8)|var|float32
uop_1750 = relay.atan(var_1749.astype('float32')) # shape=(1, 1, 8)
func_46_call = mod.get_global_var('func_46')
func_50_call = mutated_mod.get_global_var('func_50')
var_1756 = relay.var("var_1756", dtype = "int64", shape = (800,))#candidate|1756|(800,)|var|int64
call_1755 = relay.TupleGetItem(func_46_call(relay.reshape(var_1756.astype('int64'), [10, 10, 8]), relay.reshape(var_1756.astype('int64'), [10, 10, 8]), ), 1)
call_1757 = relay.TupleGetItem(func_50_call(relay.reshape(var_1756.astype('int64'), [10, 10, 8]), relay.reshape(var_1756.astype('int64'), [10, 10, 8]), ), 1)
bop_1759 = relay.less(uop_1750.astype('bool'), call_1755.astype('bool')) # shape=(10, 10, 8)
bop_1762 = relay.less(uop_1750.astype('bool'), call_1757.astype('bool')) # shape=(10, 10, 8)
uop_1765 = relay.atan(var_1756.astype('float32')) # shape=(800,)
bop_1773 = relay.equal(call_1755.astype('bool'), relay.reshape(uop_1765.astype('bool'), relay.shape_of(call_1755))) # shape=(10, 10, 8)
bop_1776 = relay.equal(call_1757.astype('bool'), relay.reshape(uop_1765.astype('bool'), relay.shape_of(call_1757))) # shape=(10, 10, 8)
func_1604_call = mod.get_global_var('func_1604')
func_1607_call = mutated_mod.get_global_var('func_1607')
var_1785 = relay.var("var_1785", dtype = "float32", shape = (676,))#candidate|1785|(676,)|var|float32
call_1784 = relay.TupleGetItem(func_1604_call(relay.reshape(var_1785.astype('float32'), [13, 13, 4])), 0)
call_1786 = relay.TupleGetItem(func_1607_call(relay.reshape(var_1785.astype('float32'), [13, 13, 4])), 0)
func_506_call = mod.get_global_var('func_506')
func_508_call = mutated_mod.get_global_var('func_508')
var_1792 = relay.var("var_1792", dtype = "float64", shape = (56,))#candidate|1792|(56,)|var|float64
call_1791 = relay.TupleGetItem(func_506_call(relay.reshape(var_1792.astype('float64'), [8, 7])), 0)
call_1793 = relay.TupleGetItem(func_508_call(relay.reshape(var_1792.astype('float64'), [8, 7])), 0)
uop_1794 = relay.asin(call_1755.astype('float64')) # shape=(10, 10, 8)
uop_1796 = relay.asin(call_1757.astype('float64')) # shape=(10, 10, 8)
bop_1797 = relay.bitwise_xor(uop_1765.astype('uint64'), relay.reshape(bop_1773.astype('uint64'), relay.shape_of(uop_1765))) # shape=(800,)
bop_1800 = relay.bitwise_xor(uop_1765.astype('uint64'), relay.reshape(bop_1776.astype('uint64'), relay.shape_of(uop_1765))) # shape=(800,)
uop_1813 = relay.sigmoid(bop_1773.astype('float32')) # shape=(10, 10, 8)
uop_1815 = relay.sigmoid(bop_1776.astype('float32')) # shape=(10, 10, 8)
output = relay.Tuple([bop_1759,call_1784,var_1785,call_1791,var_1792,uop_1794,bop_1797,uop_1813,])
output2 = relay.Tuple([bop_1762,call_1786,var_1785,call_1793,var_1792,uop_1796,bop_1800,uop_1815,])
func_1825 = relay.Function([var_1749,var_1756,var_1785,var_1792,], output)
mod['func_1825'] = func_1825
mod = relay.transform.InferType()(mod)
mutated_mod['func_1825'] = func_1825
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1825_call = mutated_mod.get_global_var('func_1825')
var_1827 = relay.var("var_1827", dtype = "float32", shape = (1, 1, 8))#candidate|1827|(1, 1, 8)|var|float32
var_1828 = relay.var("var_1828", dtype = "int64", shape = (800,))#candidate|1828|(800,)|var|int64
var_1829 = relay.var("var_1829", dtype = "float32", shape = (676,))#candidate|1829|(676,)|var|float32
var_1830 = relay.var("var_1830", dtype = "float64", shape = (56,))#candidate|1830|(56,)|var|float64
call_1826 = func_1825_call(var_1827,var_1828,var_1829,var_1830,)
output = call_1826
func_1831 = relay.Function([var_1827,var_1828,var_1829,var_1830,], output)
mutated_mod['func_1831'] = func_1831
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1842 = relay.var("var_1842", dtype = "bool", shape = (3, 2, 8))#candidate|1842|(3, 2, 8)|var|bool
var_1843 = relay.var("var_1843", dtype = "bool", shape = (3, 2, 8))#candidate|1843|(3, 2, 8)|var|bool
bop_1844 = relay.logical_and(var_1842.astype('bool'), relay.reshape(var_1843.astype('bool'), relay.shape_of(var_1842))) # shape=(3, 2, 8)
output = bop_1844
output2 = bop_1844
func_1853 = relay.Function([var_1842,var_1843,], output)
mod['func_1853'] = func_1853
mod = relay.transform.InferType()(mod)
mutated_mod['func_1853'] = func_1853
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1853_call = mutated_mod.get_global_var('func_1853')
var_1855 = relay.var("var_1855", dtype = "bool", shape = (3, 2, 8))#candidate|1855|(3, 2, 8)|var|bool
var_1856 = relay.var("var_1856", dtype = "bool", shape = (3, 2, 8))#candidate|1856|(3, 2, 8)|var|bool
call_1854 = func_1853_call(var_1855,var_1856,)
output = call_1854
func_1857 = relay.Function([var_1855,var_1856,], output)
mutated_mod['func_1857'] = func_1857
mutated_mod = relay.transform.InferType()(mutated_mod)
func_964_call = mod.get_global_var('func_964')
func_965_call = mutated_mod.get_global_var('func_965')
call_1885 = func_964_call()
call_1886 = func_964_call()
output = call_1885
output2 = call_1886
func_1887 = relay.Function([], output)
mod['func_1887'] = func_1887
mod = relay.transform.InferType()(mod)
mutated_mod['func_1887'] = func_1887
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1887_call = mutated_mod.get_global_var('func_1887')
call_1888 = func_1887_call()
output = call_1888
func_1889 = relay.Function([], output)
mutated_mod['func_1889'] = func_1889
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1894 = relay.var("var_1894", dtype = "float64", shape = (4, 8))#candidate|1894|(4, 8)|var|float64
uop_1895 = relay.erf(var_1894.astype('float64')) # shape=(4, 8)
output = relay.Tuple([uop_1895,])
output2 = relay.Tuple([uop_1895,])
func_1903 = relay.Function([var_1894,], output)
mod['func_1903'] = func_1903
mod = relay.transform.InferType()(mod)
var_1904 = relay.var("var_1904", dtype = "float64", shape = (4, 8))#candidate|1904|(4, 8)|var|float64
output = func_1903(var_1904)
func_1905 = relay.Function([var_1904], output)
mutated_mod['func_1905'] = func_1905
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1887_call = mod.get_global_var('func_1887')
func_1889_call = mutated_mod.get_global_var('func_1889')
call_1936 = func_1887_call()
call_1937 = func_1887_call()
uop_1948 = relay.asin(call_1936.astype('float64')) # shape=(14, 2, 9)
uop_1950 = relay.asin(call_1937.astype('float64')) # shape=(14, 2, 9)
bop_1961 = relay.logical_and(call_1936.astype('bool'), relay.reshape(uop_1948.astype('bool'), relay.shape_of(call_1936))) # shape=(14, 2, 9)
bop_1964 = relay.logical_and(call_1937.astype('bool'), relay.reshape(uop_1950.astype('bool'), relay.shape_of(call_1937))) # shape=(14, 2, 9)
output = bop_1961
output2 = bop_1964
func_1965 = relay.Function([], output)
mod['func_1965'] = func_1965
mod = relay.transform.InferType()(mod)
output = func_1965()
func_1966 = relay.Function([], output)
mutated_mod['func_1966'] = func_1966
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1887_call = mod.get_global_var('func_1887')
func_1889_call = mutated_mod.get_global_var('func_1889')
call_1967 = func_1887_call()
call_1968 = func_1887_call()
var_1982 = relay.var("var_1982", dtype = "uint64", shape = (14, 2, 9))#candidate|1982|(14, 2, 9)|var|uint64
bop_1983 = relay.not_equal(call_1967.astype('bool'), relay.reshape(var_1982.astype('bool'), relay.shape_of(call_1967))) # shape=(14, 2, 9)
bop_1986 = relay.not_equal(call_1968.astype('bool'), relay.reshape(var_1982.astype('bool'), relay.shape_of(call_1968))) # shape=(14, 2, 9)
output = relay.Tuple([bop_1983,])
output2 = relay.Tuple([bop_1986,])
func_1992 = relay.Function([var_1982,], output)
mod['func_1992'] = func_1992
mod = relay.transform.InferType()(mod)
var_1993 = relay.var("var_1993", dtype = "uint64", shape = (14, 2, 9))#candidate|1993|(14, 2, 9)|var|uint64
output = func_1992(var_1993)
func_1994 = relay.Function([var_1993], output)
mutated_mod['func_1994'] = func_1994
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1965_call = mod.get_global_var('func_1965')
func_1966_call = mutated_mod.get_global_var('func_1966')
call_1999 = func_1965_call()
call_2000 = func_1965_call()
output = relay.Tuple([call_1999,])
output2 = relay.Tuple([call_2000,])
func_2009 = relay.Function([], output)
mod['func_2009'] = func_2009
mod = relay.transform.InferType()(mod)
output = func_2009()
func_2010 = relay.Function([], output)
mutated_mod['func_2010'] = func_2010
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1243_call = mod.get_global_var('func_1243')
func_1245_call = mutated_mod.get_global_var('func_1245')
call_2081 = relay.TupleGetItem(func_1243_call(), 0)
call_2082 = relay.TupleGetItem(func_1245_call(), 0)
output = call_2081
output2 = call_2082
func_2092 = relay.Function([], output)
mod['func_2092'] = func_2092
mod = relay.transform.InferType()(mod)
output = func_2092()
func_2093 = relay.Function([], output)
mutated_mod['func_2093'] = func_2093
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2009_call = mod.get_global_var('func_2009')
func_2010_call = mutated_mod.get_global_var('func_2010')
call_2128 = relay.TupleGetItem(func_2009_call(), 0)
call_2129 = relay.TupleGetItem(func_2010_call(), 0)
output = call_2128
output2 = call_2129
func_2142 = relay.Function([], output)
mod['func_2142'] = func_2142
mod = relay.transform.InferType()(mod)
mutated_mod['func_2142'] = func_2142
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2142_call = mutated_mod.get_global_var('func_2142')
call_2143 = func_2142_call()
output = call_2143
func_2144 = relay.Function([], output)
mutated_mod['func_2144'] = func_2144
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1243_call = mod.get_global_var('func_1243')
func_1245_call = mutated_mod.get_global_var('func_1245')
call_2187 = relay.TupleGetItem(func_1243_call(), 0)
call_2188 = relay.TupleGetItem(func_1245_call(), 0)
output = relay.Tuple([call_2187,])
output2 = relay.Tuple([call_2188,])
func_2189 = relay.Function([], output)
mod['func_2189'] = func_2189
mod = relay.transform.InferType()(mod)
mutated_mod['func_2189'] = func_2189
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2189_call = mutated_mod.get_global_var('func_2189')
call_2190 = func_2189_call()
output = call_2190
func_2191 = relay.Function([], output)
mutated_mod['func_2191'] = func_2191
mutated_mod = relay.transform.InferType()(mutated_mod)
func_964_call = mod.get_global_var('func_964')
func_965_call = mutated_mod.get_global_var('func_965')
call_2197 = func_964_call()
call_2198 = func_964_call()
output = call_2197
output2 = call_2198
func_2201 = relay.Function([], output)
mod['func_2201'] = func_2201
mod = relay.transform.InferType()(mod)
mutated_mod['func_2201'] = func_2201
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2201_call = mutated_mod.get_global_var('func_2201')
call_2202 = func_2201_call()
output = call_2202
func_2203 = relay.Function([], output)
mutated_mod['func_2203'] = func_2203
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2234 = relay.var("var_2234", dtype = "float64", shape = (12, 1, 2))#candidate|2234|(12, 1, 2)|var|float64
uop_2235 = relay.tan(var_2234.astype('float64')) # shape=(12, 1, 2)
func_2189_call = mod.get_global_var('func_2189')
func_2191_call = mutated_mod.get_global_var('func_2191')
call_2237 = relay.TupleGetItem(func_2189_call(), 0)
call_2238 = relay.TupleGetItem(func_2191_call(), 0)
uop_2241 = relay.acos(uop_2235.astype('float64')) # shape=(12, 1, 2)
output = relay.Tuple([call_2237,uop_2241,])
output2 = relay.Tuple([call_2238,uop_2241,])
func_2243 = relay.Function([var_2234,], output)
mod['func_2243'] = func_2243
mod = relay.transform.InferType()(mod)
var_2244 = relay.var("var_2244", dtype = "float64", shape = (12, 1, 2))#candidate|2244|(12, 1, 2)|var|float64
output = func_2243(var_2244)
func_2245 = relay.Function([var_2244], output)
mutated_mod['func_2245'] = func_2245
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1887_call = mod.get_global_var('func_1887')
func_1889_call = mutated_mod.get_global_var('func_1889')
call_2247 = func_1887_call()
call_2248 = func_1887_call()
output = call_2247
output2 = call_2248
func_2254 = relay.Function([], output)
mod['func_2254'] = func_2254
mod = relay.transform.InferType()(mod)
mutated_mod['func_2254'] = func_2254
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2254_call = mutated_mod.get_global_var('func_2254')
call_2255 = func_2254_call()
output = call_2255
func_2256 = relay.Function([], output)
mutated_mod['func_2256'] = func_2256
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2265 = relay.var("var_2265", dtype = "float64", shape = (1, 1, 1))#candidate|2265|(1, 1, 1)|var|float64
var_2266 = relay.var("var_2266", dtype = "float64", shape = (11, 2, 10))#candidate|2266|(11, 2, 10)|var|float64
bop_2267 = relay.power(var_2265.astype('float64'), var_2266.astype('float64')) # shape=(11, 2, 10)
output = relay.Tuple([bop_2267,])
output2 = relay.Tuple([bop_2267,])
func_2306 = relay.Function([var_2265,var_2266,], output)
mod['func_2306'] = func_2306
mod = relay.transform.InferType()(mod)
mutated_mod['func_2306'] = func_2306
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2306_call = mutated_mod.get_global_var('func_2306')
var_2308 = relay.var("var_2308", dtype = "float64", shape = (1, 1, 1))#candidate|2308|(1, 1, 1)|var|float64
var_2309 = relay.var("var_2309", dtype = "float64", shape = (11, 2, 10))#candidate|2309|(11, 2, 10)|var|float64
call_2307 = func_2306_call(var_2308,var_2309,)
output = call_2307
func_2310 = relay.Function([var_2308,var_2309,], output)
mutated_mod['func_2310'] = func_2310
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2312 = relay.const(6.384361, dtype = "float32")#candidate|2312|()|const|float32
var_2313 = relay.var("var_2313", dtype = "float32", shape = (7, 1))#candidate|2313|(7, 1)|var|float32
bop_2314 = relay.mod(const_2312.astype('float32'), var_2313.astype('float32')) # shape=(7, 1)
uop_2332 = relay.acos(var_2313.astype('float64')) # shape=(7, 1)
uop_2336 = relay.asin(uop_2332.astype('float64')) # shape=(7, 1)
output = relay.Tuple([bop_2314,uop_2336,])
output2 = relay.Tuple([bop_2314,uop_2336,])
func_2345 = relay.Function([var_2313,], output)
mod['func_2345'] = func_2345
mod = relay.transform.InferType()(mod)
mutated_mod['func_2345'] = func_2345
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2346 = relay.var("var_2346", dtype = "float32", shape = (7, 1))#candidate|2346|(7, 1)|var|float32
func_2345_call = mutated_mod.get_global_var('func_2345')
call_2347 = func_2345_call(var_2346)
output = call_2347
func_2348 = relay.Function([var_2346], output)
mutated_mod['func_2348'] = func_2348
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2355 = relay.const([[[-8.326527,1.011615,-4.877180,-0.565661,9.491738,9.046588],[4.434280,7.005508,0.865835,-7.692441,2.921170,-1.600888],[-7.958086,-1.943422,8.125542,2.359843,9.814250,5.379506],[-9.467921,-9.518087,-1.367877,9.786558,-3.206712,-9.423896],[4.068229,6.125329,0.975282,3.750788,-0.683375,-3.502380],[6.165429,9.750685,-6.492507,-1.443845,-2.779129,8.356817],[-4.455980,9.199674,3.937431,-2.057074,-8.362350,5.343412],[2.529394,4.751302,-2.258830,2.543661,8.728367,-0.266829],[2.986198,-7.577521,-7.827005,-5.987581,-6.559236,6.782488]],[[-7.407207,5.387206,9.466459,-7.548142,6.086812,-9.112915],[-0.663578,4.284356,-7.081001,3.130153,-0.534762,-9.053030],[7.689969,9.592336,-1.413518,4.040276,-8.499497,3.571929],[7.273400,-7.123415,0.113353,6.169252,0.544993,4.784973],[-1.501615,5.773304,6.841045,9.030880,2.596657,-7.782299],[4.095700,-3.581440,-7.201892,-9.240756,6.840984,-3.137798],[8.415263,-6.303554,-4.801539,7.893117,7.862033,0.293593],[-7.299825,3.645411,0.340669,4.657017,-6.361398,-0.065971],[0.686504,-3.706991,-3.954597,1.681552,-8.404980,-8.877212]],[[0.176766,-0.225561,-0.299488,8.686832,-3.617111,-3.615518],[0.057893,4.562270,8.064777,-1.034587,-7.728939,-2.280906],[-3.548204,-3.515422,3.564959,4.442163,-6.221441,9.899949],[-7.197568,7.728453,-0.801244,-8.726515,4.845150,2.053011],[-5.155762,7.722544,-6.894860,5.462531,2.008796,-5.980660],[-0.277492,-5.710104,1.155117,2.447702,-2.959440,-0.585170],[5.270931,-9.399983,-8.821977,6.553815,-7.165192,4.639327],[-6.549572,9.466336,1.500195,8.415574,2.097285,-2.798248],[5.185892,-6.025097,2.923580,-0.452613,-1.863878,6.483711]],[[-8.710577,3.266115,-2.820214,-7.814093,2.644883,-9.593006],[5.796035,-6.917900,3.927443,5.251857,-2.156701,8.451085],[-5.244270,-4.692211,-2.154898,-6.402850,3.760411,9.341669],[-3.730653,-5.832172,3.329641,-9.741081,-5.887841,-8.963170],[-7.979781,1.371967,2.320775,-3.131553,-2.571344,-6.014588],[-6.260379,-1.884984,-0.486050,5.679594,6.194052,-5.112730],[1.177167,0.057501,3.088772,9.726433,6.461894,6.766583],[6.725417,-7.017327,-8.821911,4.889535,6.747999,-2.455578],[4.027252,1.854099,-6.587865,-9.689827,-8.947682,2.359454]],[[6.296722,7.560942,2.661183,5.873058,-9.820160,0.806829],[2.750878,-7.196536,-3.322536,-7.366474,-7.435099,-3.790209],[-5.607811,-8.536869,-7.915632,-4.634913,2.443782,-7.115220],[-3.679107,1.657923,2.763242,-6.645325,3.556842,-2.184216],[1.369988,-2.866513,-4.662284,-4.315576,7.005291,2.208475],[3.079076,5.233062,-5.271719,6.187429,4.038360,1.569509],[5.790726,5.665048,-7.020567,-0.198633,9.559242,-2.368880],[2.927350,-5.483964,3.472338,-5.446542,8.440277,2.986539],[0.492132,7.176817,-9.364209,-6.814788,-4.562454,-6.258610]],[[1.953131,-9.369205,5.180533,-7.850413,-2.498532,3.483075],[-5.655837,-0.726234,5.670480,3.501128,-1.200451,-2.918894],[-1.926663,8.206123,-7.711297,3.517919,-4.953827,-4.110782],[-7.672390,6.458074,3.351215,8.644162,-2.878661,-6.570075],[1.091908,3.506533,-9.068695,-9.777001,-6.451488,1.077941],[-8.623352,-0.369224,-0.011972,-8.140331,1.400239,1.155628],[4.896726,-1.874780,-9.394234,2.598057,9.935444,-9.558518],[-3.365701,-9.112264,-7.080759,-3.135809,-9.258364,3.366329],[0.696058,-8.251199,9.818817,-5.517588,-6.863934,6.319361]],[[4.192317,-5.531879,5.432012,-7.705093,-6.208108,-4.510626],[-8.286665,7.237271,8.693611,4.676598,-4.766714,3.163675],[-3.378244,-0.567867,-4.664113,2.248598,7.607599,-0.481814],[-9.643904,-5.054185,8.749944,2.246532,7.844769,5.084923],[-8.244522,-6.902738,-2.527088,-2.886614,7.029875,6.265788],[-0.815504,5.159930,-5.758611,-6.644429,-1.417216,9.329007],[2.719596,3.971959,2.847889,8.867043,0.837470,5.822144],[8.777703,-9.711933,-6.517037,1.696958,8.493461,-1.828672],[-3.681092,-6.301703,-1.832896,5.614672,6.961264,-5.992972]],[[3.919314,-9.882378,1.982967,-9.206063,9.948873,6.581641],[-8.955495,2.199541,9.838505,9.632067,-7.753135,-7.801495],[-0.294839,2.621662,-0.527824,-9.952938,8.719917,4.013456],[-9.701842,-1.090593,-2.293740,-1.534480,-0.537708,-5.240224],[5.142126,5.328386,-4.859989,-3.572130,2.798476,-5.551195],[-7.609924,0.588747,3.156046,-5.032718,-5.451588,3.131473],[2.702102,4.852587,1.924428,3.848875,-8.399149,3.688392],[6.873698,6.381041,7.982215,-3.334278,-2.168118,3.748857],[-9.117441,-4.105006,-3.202499,-3.409921,1.137126,1.718610]],[[9.602041,7.207929,-2.746573,-3.601774,9.936191,-7.190206],[2.852640,-8.638723,7.726527,1.913935,0.546837,-6.100832],[-9.838940,9.664249,9.580687,-2.995421,-4.856197,-1.084492],[-0.766870,-2.416437,-8.043895,-2.359701,7.826881,9.433584],[0.171230,6.704214,-1.552947,-5.414331,-4.050118,-9.123082],[7.991350,-9.753955,0.749022,-0.536654,-0.398536,8.982234],[4.698123,-1.461561,-1.867357,3.661555,1.162015,-4.322864],[6.421085,-1.260466,4.413305,6.661395,8.717869,-8.340186],[-8.755311,3.661055,3.864185,3.805847,-1.109707,6.668613]],[[1.896692,-9.821748,4.697436,0.401466,-6.794439,-6.250929],[-2.665668,-6.212623,-5.904803,-6.180049,6.876523,7.425896],[-1.443575,4.365332,-2.342465,7.788054,-5.360289,-8.592681],[5.380631,-9.641667,8.498024,7.048421,-1.741625,-6.261291],[-1.040435,8.019962,-1.002828,-9.944744,3.046833,9.791278],[-6.202131,1.265842,0.016265,6.517728,7.839506,-5.520924],[-5.103200,2.228224,4.585235,4.574060,-7.515667,7.840484],[7.539118,-6.914773,2.079069,6.189285,-6.668800,-4.695517],[-8.926761,-2.115420,0.279585,6.131914,-5.759953,-4.812616]]], dtype = "float32")#candidate|2355|(10, 9, 6)|const|float32
uop_2356 = relay.atan(const_2355.astype('float32')) # shape=(10, 9, 6)
uop_2364 = relay.sinh(uop_2356.astype('float64')) # shape=(10, 9, 6)
func_1320_call = mod.get_global_var('func_1320')
func_1323_call = mutated_mod.get_global_var('func_1323')
var_2388 = relay.var("var_2388", dtype = "bool", shape = (960,))#candidate|2388|(960,)|var|bool
call_2387 = relay.TupleGetItem(func_1320_call(relay.reshape(var_2388.astype('bool'), [8, 10, 12]), relay.reshape(var_2388.astype('bool'), [8, 10, 12]), ), 0)
call_2389 = relay.TupleGetItem(func_1323_call(relay.reshape(var_2388.astype('bool'), [8, 10, 12]), relay.reshape(var_2388.astype('bool'), [8, 10, 12]), ), 0)
output = relay.Tuple([uop_2364,call_2387,var_2388,])
output2 = relay.Tuple([uop_2364,call_2389,var_2388,])
func_2396 = relay.Function([var_2388,], output)
mod['func_2396'] = func_2396
mod = relay.transform.InferType()(mod)
mutated_mod['func_2396'] = func_2396
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2397 = relay.var("var_2397", dtype = "bool", shape = (960,))#candidate|2397|(960,)|var|bool
func_2396_call = mutated_mod.get_global_var('func_2396')
call_2398 = func_2396_call(var_2397)
output = call_2398
func_2399 = relay.Function([var_2397], output)
mutated_mod['func_2399'] = func_2399
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2407 = relay.var("var_2407", dtype = "int64", shape = (6, 9))#candidate|2407|(6, 9)|var|int64
const_2408 = relay.const([[2,-5,-6,8,7,-10,3,9,-10],[3,1,1,3,-6,-6,7,7,-6],[6,-2,-3,-2,-10,2,-8,-9,6],[-9,-1,-4,-7,6,-2,6,-8,2],[1,-10,7,-2,-5,-5,2,-2,8],[2,6,9,2,-5,-4,-4,1,9]], dtype = "int64")#candidate|2408|(6, 9)|const|int64
bop_2409 = relay.left_shift(var_2407.astype('int64'), relay.reshape(const_2408.astype('int64'), relay.shape_of(var_2407))) # shape=(6, 9)
output = relay.Tuple([bop_2409,])
output2 = relay.Tuple([bop_2409,])
func_2420 = relay.Function([var_2407,], output)
mod['func_2420'] = func_2420
mod = relay.transform.InferType()(mod)
mutated_mod['func_2420'] = func_2420
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2421 = relay.var("var_2421", dtype = "int64", shape = (6, 9))#candidate|2421|(6, 9)|var|int64
func_2420_call = mutated_mod.get_global_var('func_2420')
call_2422 = func_2420_call(var_2421)
output = call_2422
func_2423 = relay.Function([var_2421], output)
mutated_mod['func_2423'] = func_2423
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2442 = relay.var("var_2442", dtype = "float64", shape = (8, 9, 1))#candidate|2442|(8, 9, 1)|var|float64
uop_2443 = relay.cosh(var_2442.astype('float64')) # shape=(8, 9, 1)
output = uop_2443
output2 = uop_2443
func_2477 = relay.Function([var_2442,], output)
mod['func_2477'] = func_2477
mod = relay.transform.InferType()(mod)
var_2478 = relay.var("var_2478", dtype = "float64", shape = (8, 9, 1))#candidate|2478|(8, 9, 1)|var|float64
output = func_2477(var_2478)
func_2479 = relay.Function([var_2478], output)
mutated_mod['func_2479'] = func_2479
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2092_call = mod.get_global_var('func_2092')
func_2093_call = mutated_mod.get_global_var('func_2093')
call_2521 = func_2092_call()
call_2522 = func_2092_call()
output = call_2521
output2 = call_2522
func_2532 = relay.Function([], output)
mod['func_2532'] = func_2532
mod = relay.transform.InferType()(mod)
output = func_2532()
func_2533 = relay.Function([], output)
mutated_mod['func_2533'] = func_2533
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2540 = relay.const([[[8.297389,1.936404,-1.552860],[-8.729989,7.935387,-2.305707],[-9.202109,-4.088078,0.735211],[8.250483,-6.900744,9.567496],[-8.313655,-1.038932,-1.050554],[-3.703005,-7.223503,2.421725],[3.981702,5.093303,9.442161],[3.217913,-1.816010,0.027964],[9.609683,-5.041863,-2.828908],[0.574983,4.604165,-4.975520],[3.276178,6.689597,-9.203919],[4.913685,-2.525784,-4.604067]],[[-7.716342,-7.596171,1.658489],[-9.782882,-2.252900,3.565425],[8.545109,-5.619058,-9.559543],[-7.291961,6.205830,4.062034],[-2.056827,-3.818215,3.539124],[-7.181864,-8.040655,9.959565],[-4.800002,-9.064627,-8.387162],[-2.638178,-7.338672,-8.361369],[1.038779,7.031392,-0.479761],[4.458506,4.283999,4.108441],[-2.789740,-5.453203,-0.534814],[5.985077,9.429592,-5.814368]],[[7.029154,7.375416,4.874558],[-0.053978,-6.851928,8.388204],[-3.790109,2.409234,-1.562704],[5.622454,1.908274,4.013135],[0.449566,-9.425778,7.251229],[-9.285255,4.527625,-1.708958],[4.478100,-4.957375,-3.368530],[-3.951062,-8.306254,-3.683281],[-2.222660,7.942891,4.668403],[-8.140180,2.058047,-0.979690],[0.155131,0.766353,-9.123132],[6.068628,-1.324316,-4.611151]],[[2.531129,-9.996361,-9.947265],[2.964021,-9.651103,-8.794774],[3.795796,-1.895840,-7.696386],[2.545595,0.366965,-2.172116],[1.363088,3.899230,5.956987],[-6.923765,-8.718474,-7.630637],[-6.101293,4.996486,5.870853],[-4.291578,-4.095428,5.992340],[5.368632,-2.636990,-2.502096],[3.992348,-6.385993,1.195346],[-1.198332,0.822356,-3.341035],[2.461468,9.769912,6.076105]],[[5.640592,0.760892,-0.465544],[-9.640473,-4.575823,-3.666057],[7.233614,-8.898253,-2.702398],[-0.016230,9.569751,8.877427],[4.099862,-0.937711,-5.134779],[2.426933,-9.789335,3.999615],[-7.838229,-7.624357,4.777242],[1.205120,-1.798771,-4.575863],[4.157105,8.054223,-5.225431],[5.067046,-3.740988,-1.205439],[2.288077,-8.867218,6.070543],[7.088481,4.013069,-4.584965]],[[-1.256150,8.033909,4.121590],[-3.078099,-8.689393,2.558006],[-8.177233,9.466388,2.109155],[1.725363,0.687128,-6.948427],[-2.610455,-6.907000,7.908885],[-7.546650,-2.634352,7.672666],[3.501515,8.455346,7.635561],[2.935953,9.272566,-8.892000],[-3.142596,5.652863,4.598037],[-9.442346,5.159241,8.465528],[4.219204,0.288314,-2.482874],[1.288354,-9.805920,6.003509]],[[-3.405336,3.867777,2.421300],[-9.163978,-3.729155,-0.344812],[2.933398,9.940786,1.902505],[9.734687,-0.575862,9.437081],[0.709543,-7.971238,6.138188],[-3.074862,-8.885666,8.244968],[0.231034,-0.267359,2.434128],[-4.818515,9.972255,-2.718719],[-0.478572,-7.434597,-8.716361],[2.834481,-3.130531,2.049863],[-2.905035,7.009250,5.546375],[-6.948511,-8.031596,-5.189000]],[[5.344172,-5.963361,-0.986377],[-6.303794,2.166190,5.090973],[-3.441178,0.403919,6.682938],[-0.558329,-0.149241,-9.849568],[-5.112318,2.614392,6.660769],[-1.494157,-3.387770,-6.183476],[2.350153,1.833414,0.652351],[-3.976373,-5.682921,-1.045750],[-5.315310,2.106646,6.816174],[9.764844,-0.804775,-4.575322],[-4.705362,8.020159,-3.605963],[-6.120001,-5.980676,-5.368293]],[[-1.952267,7.925733,-5.117874],[-0.217337,-4.665638,-1.143881],[-6.962442,4.308398,-7.985911],[-8.692669,-0.977596,0.442379],[3.795317,8.864666,7.671160],[0.556510,-7.797376,-8.849599],[4.815417,-9.119364,-2.187667],[8.595172,-5.610404,-3.119622],[-9.263991,9.638081,-3.996733],[1.426307,-2.418650,6.763542],[-3.181370,-7.034148,4.825857],[-6.351661,4.668525,-4.789310]],[[9.819080,-5.208889,-6.533821],[-6.857396,-2.064423,1.830330],[-8.101404,-2.734069,5.656843],[-7.810729,7.481744,3.788919],[-9.201532,6.907938,-2.549426],[1.613514,8.204366,3.100938],[-2.493874,-5.314409,2.625145],[7.033692,8.379957,9.295507],[3.780389,-7.410191,-7.643965],[3.852550,0.317635,-6.702113],[-2.529520,1.305581,-3.280108],[6.340613,-1.986053,1.674404]],[[-6.713086,8.667364,-4.402012],[-2.770319,7.164375,-0.210564],[-2.966509,-5.320711,-8.274249],[1.816547,-6.119474,-0.239156],[4.517070,-0.936143,-7.029177],[-4.177161,-7.003607,-9.997438],[-3.251267,3.976412,4.410844],[2.958606,9.102519,-6.248809],[-1.322183,0.155149,-1.814176],[9.339927,2.544051,-5.775636],[8.384274,-8.970781,-5.598906],[4.618307,-6.484967,-9.460850]],[[-6.205862,3.997504,4.469765],[-4.840855,-3.022168,7.450576],[6.249106,-1.336630,-1.751412],[-8.085588,4.959407,8.016161],[3.715236,-9.376025,0.573748],[-6.614484,-8.317830,-1.905703],[0.726360,-4.523207,-6.644064],[-1.744512,-5.453704,-2.873705],[6.292933,7.485489,-2.876935],[6.860051,6.473182,9.336288],[-3.468141,-4.832220,4.508224],[5.009940,1.189014,-4.909063]],[[3.705824,-6.313166,-4.614866],[-4.880070,2.788452,-6.006710],[-2.970508,-4.353911,-3.259813],[1.352782,4.422939,1.537728],[-1.430424,8.416283,-7.109173],[5.065686,-7.233161,-8.698831],[-1.049767,8.844404,-1.639477],[2.983283,3.670039,-7.315517],[6.479794,-2.478099,5.908097],[-1.820931,-5.261638,-0.674227],[0.729482,-5.979033,1.408890],[-5.113569,0.453418,9.671393]],[[-3.036493,2.841066,-3.519886],[2.544170,1.913895,-5.614954],[1.450690,-6.578057,-1.725383],[0.952604,-4.956975,-4.686494],[-2.778094,8.499972,-1.551122],[5.204166,-8.790771,-3.656115],[-7.541295,-8.455482,0.235946],[-6.427856,9.030947,5.101101],[3.614362,-0.222514,-7.609419],[5.277954,7.148132,4.025723],[-7.502305,-9.158031,6.305788],[7.314830,-2.425682,6.614752]],[[8.398443,4.534824,-4.122252],[-0.573824,0.852313,8.088910],[1.262801,-1.623310,0.626264],[-4.852866,-0.093861,-4.118355],[1.526508,9.979851,-2.929010],[-3.528091,-1.275843,-5.050850],[-2.345765,9.795317,5.570457],[5.749884,6.855419,-9.890477],[5.760776,-1.378236,0.713359],[5.815106,4.225987,6.673391],[7.486424,5.428877,5.775111],[-1.232757,-3.089163,8.113037]],[[-1.672719,7.242709,-4.996286],[3.019172,-6.338759,1.178262],[-5.350956,0.939566,2.262282],[5.231236,-7.931215,-5.855394],[3.698764,2.718872,-6.152025],[5.884976,1.344458,5.361591],[-3.175273,-2.218011,-1.194825],[9.601629,-7.519722,-4.285881],[1.879726,2.127268,-3.787144],[2.391392,-0.472937,-6.689652],[5.458260,-5.384226,-5.229745],[-5.440419,-2.740931,7.994793]]], dtype = "float32")#candidate|2540|(16, 12, 3)|const|float32
var_2541 = relay.var("var_2541", dtype = "float32", shape = (16, 12, 3))#candidate|2541|(16, 12, 3)|var|float32
bop_2542 = relay.divide(const_2540.astype('float32'), relay.reshape(var_2541.astype('float32'), relay.shape_of(const_2540))) # shape=(16, 12, 3)
func_376_call = mod.get_global_var('func_376')
func_380_call = mutated_mod.get_global_var('func_380')
var_2546 = relay.var("var_2546", dtype = "float64", shape = (924,))#candidate|2546|(924,)|var|float64
var_2547 = relay.var("var_2547", dtype = "int8", shape = (325, 3))#candidate|2547|(325, 3)|var|int8
call_2545 = relay.TupleGetItem(func_376_call(relay.reshape(var_2546.astype('float64'), [7, 12, 11]), relay.reshape(var_2547.astype('int8'), [975,]), ), 1)
call_2548 = relay.TupleGetItem(func_380_call(relay.reshape(var_2546.astype('float64'), [7, 12, 11]), relay.reshape(var_2547.astype('int8'), [975,]), ), 1)
func_103_call = mod.get_global_var('func_103')
func_107_call = mutated_mod.get_global_var('func_107')
const_2551 = relay.const([-9.203966,6.431707,0.112982,-1.960187,0.824254,-4.263128,-2.598643,-9.009706,9.800113,8.585897,4.712084,-9.283420,-4.606318,0.821313,-6.717494,2.726010,-7.236044,-7.902191,3.805477,2.014424,4.911148,7.156531,4.297725,3.188935,0.466112,-7.227866,-5.381388,7.913820,7.748367,7.336886,-0.991024,-9.639660,0.890223,-8.982540,3.652759,9.506309,-2.271179,-8.499482,-1.853381,-7.017908,-1.332929,-2.333080,4.514245,9.751446,1.280865,3.136179,3.676903,-0.488874,-1.410773,7.192776,1.695477,-8.504730,-5.606189,8.830300,7.663105], dtype = "float32")#candidate|2551|(55,)|const|float32
call_2550 = func_103_call(relay.reshape(const_2551.astype('float32'), [11, 5]), relay.reshape(const_2551.astype('float32'), [11, 5]), )
call_2552 = func_103_call(relay.reshape(const_2551.astype('float32'), [11, 5]), relay.reshape(const_2551.astype('float32'), [11, 5]), )
func_1903_call = mod.get_global_var('func_1903')
func_1905_call = mutated_mod.get_global_var('func_1905')
const_2565 = relay.const([-3.903002,-3.182568,4.494447,-3.323822,-7.248808,-5.095953,1.666654,-3.271761,4.679114,-2.091512,-5.172508,9.981898,0.123098,9.090679,-3.176876,-5.392227,-7.124841,-7.993963,6.615449,7.011538,-8.759662,7.221713,0.841702,1.179228,4.271564,2.658229,5.183689,-4.828037,7.236793,4.118833,4.683945,-6.212705], dtype = "float64")#candidate|2565|(32,)|const|float64
call_2564 = relay.TupleGetItem(func_1903_call(relay.reshape(const_2565.astype('float64'), [4, 8])), 0)
call_2566 = relay.TupleGetItem(func_1905_call(relay.reshape(const_2565.astype('float64'), [4, 8])), 0)
func_1243_call = mod.get_global_var('func_1243')
func_1245_call = mutated_mod.get_global_var('func_1245')
call_2581 = relay.TupleGetItem(func_1243_call(), 0)
call_2582 = relay.TupleGetItem(func_1245_call(), 0)
func_1376_call = mod.get_global_var('func_1376')
func_1380_call = mutated_mod.get_global_var('func_1380')
const_2590 = relay.const([-4.951954,-2.431678,0.201860,0.550333,-2.760191,0.314144,7.017503,-8.222910,9.027577,-4.463586,-6.156990,-8.917811,-7.062519,-8.526207,-7.258512,3.919560,-9.422457,-7.800794,-7.332197,8.613050,7.802325,-0.044031,-8.950709,4.365648,-7.154783,6.589518,3.470676,-7.415024,9.105832,-5.583068,-1.295514,-6.511600,0.456647,3.925008,0.864978,-5.814903,3.080356,4.672849,9.859303,2.700227,-7.566118,-7.500958,9.947162,-9.468528,-9.660395,-1.678322,-5.922078,8.169666,7.840767,-8.558663,4.549669,3.871970,9.506732,-0.328591,-1.389664,-4.891601,-3.989858,-6.042219,-9.389382,7.780650,5.327194,8.250877,-9.821475,5.709999,5.845042,-1.191838,-5.383044,-8.225147,-7.760276,8.295206,-1.229680,-9.755591,-4.636147,-2.929410,3.608818,8.439294,-4.913613,-0.349395,7.427080,-9.431151,9.736025,0.849940,6.613895,-5.050543,1.152182,-9.227391,9.459398,-1.081431,6.246319,-1.960642,-5.257309,-7.916339,4.057030,-8.964059,-4.562668,3.951440,4.288063,-2.775063,-3.310933,3.268040,-0.589395,-0.426305,-7.097970,7.295463,3.845099,-9.787575,-6.162827,-8.193154,1.902439,-4.566133,-6.527923,-8.622465,5.943546,-6.176265,7.919284,6.697490,7.331724,3.505255,-2.899983,2.296128,5.825201,-2.703978,-3.967048,2.145128,9.155542,-6.463671,5.543120,3.816106,7.835293,7.930339,9.735653,-3.890801,-9.941466,-7.565607,-2.590064,-8.449452,0.171444,9.647875,-3.392123,-3.742359,3.542559,9.648621,7.179265,4.904488,-2.352873,7.656966,6.194273,-7.628887,1.256107,-9.758035,-7.669577,0.047567,9.210578,-6.684981,5.279346,9.223211,1.350511,-0.638020,-4.371171,3.155757,-3.521103,-3.303083,-7.649846,4.289392,-7.668453,3.344396,-2.430610,-0.638032,-7.616563,7.597782,8.963671,-9.208718,3.587171,1.423945,-6.690787,-0.482803,8.441568,-2.312704,4.031066,-7.758604,7.583504,0.634838,-2.999666,-6.626771,-2.095666,4.284683,-1.055941,-4.253904,-5.669373,8.783906,-3.898277,2.632049,2.805532,2.613008,7.714049,-0.592858,4.914481,-2.980857,7.384184,-5.802075,7.438267,-8.208338,5.543831,5.646251,-9.336039,-1.325939,3.602540,7.436542,8.116629,9.819379,-8.918036,-6.135555,0.810281,6.343423,6.789171,-0.602484,5.290560,-9.688179,6.409261,-2.046443,9.065709,-4.194440,-4.132038,2.064793,-1.813078,-0.934440,-6.624643,6.231573,-3.070662,-8.949368,-2.477824,-0.146719,3.088832,2.650983,-8.805972,0.248678,-3.523851,-1.354478,0.246807,2.629299,2.333260,-3.782402,-6.457962,1.198898,-1.107446,-2.307703,6.250143,8.658493,7.953393,1.275066,-9.324864,5.337676,2.120522,-0.392639,1.382571,-8.115936,4.293311,-7.152863,-7.769878,-3.096850,-3.484291,-8.409796,2.394524,-8.547512,-8.208797,2.863324,-9.983773,9.243803,-4.267006,-7.508643,4.696304,-3.544872,0.493805,-9.375321,2.059138,4.834202,8.954390,5.972445,7.869375,-0.652683,4.294109,-3.915755,-2.784333,9.374687,3.609814,1.779107,4.653701,-4.382416,-2.331687,-6.460500,3.327738,0.835795,0.685132,-8.320030,2.492462,-5.858111,-1.407699,-8.517334,1.489388,2.017693,-5.118733,0.038170,4.382539,-6.690533,4.716041,2.550563,-0.173729,0.333564,7.402761,-0.113600,-4.985983,5.877783,-3.276731,-1.986584,-3.229543,-0.302038,-0.281137,-0.110783,7.902366,5.611662,0.477609,-3.453112,-8.219512,-8.038293,9.335308,-3.853205,8.795388,-5.796177,9.555884,4.221249,-3.608073,-1.134299,-8.130462,-0.112999,-6.189503,-6.779449,-0.423027,5.257401,-9.548332,-0.434952,0.999193,-8.205062,5.659666,-9.212813,5.667126,-5.100688,4.794365,-9.352107,8.041329,-2.702843,-1.756303,4.969904,6.685556,9.992242,-5.546488,9.322625,-3.383922,6.320510,-3.617182,7.974426,1.710129,8.634998,-1.704320,-3.138393,0.390904,5.411260,8.255165,-3.193313,-1.349423,3.651409,-0.405298,-9.568160,-1.729901,-9.493992,7.735540,-9.651732,1.464079,2.580628,7.768635,4.438454,-9.424626,-7.173930,2.070782,-3.428955,7.070160,2.480643,-6.044812,-3.147690,7.201040,1.885781,-3.427991,9.140219,-8.538700,-1.295316,4.042863,-9.708556,-4.767374,2.666794,4.582105,6.122281,6.588937,-0.854901,-6.628008,-5.897759,5.433871,-0.630700,2.477122,4.954736,0.114428,6.149457,6.594162,-2.886008,1.049473,-7.951974,-0.520089,2.088284,-0.271372,7.346941,-4.142699,-1.854131,-4.877505,-5.093343,-4.964597,6.369558,6.521588,-6.784763,-6.118141,-7.607528,5.871168,-8.264382,1.858832,0.252082,-7.684167,-2.281255,5.017649,-6.894280,-8.954713,1.520816,0.386189,-0.674041,-4.037085,8.392494,0.187072,-7.164885,-2.338336,-6.697043,-6.127133,6.849857,1.501933,4.377303,-8.835813,-3.118911,-1.190488,-6.012368,-9.922329,-9.882798,1.914772,1.447159,-7.789784,7.168446,-2.206527,-9.701465,-5.655203,1.470515,3.531570,-9.711595,6.843241,-4.663723,-8.649263,6.225248,3.828081,6.555852,1.871764,-9.443628,-2.284582,7.955201,4.238837,0.526761,1.052017,0.395573,-6.411721,7.451645,-2.840032,5.349391,-9.319710,5.880927,1.105340,-0.298580,6.529109,-8.077001,2.034755,3.442277,5.519043,-1.102192,4.888905,0.119254,0.364069,7.037958,5.144571,-3.173784,4.933799,8.406319,5.850215,-1.431436,-2.332433,-2.027448,-3.277437,3.698206,1.482394,-5.255005,3.451102,-9.119052,-0.340866,1.567796,-4.210053,3.166233,0.826007,-7.477632,7.437921,-0.639448,6.118320,4.365590,-7.341022,4.737118,-3.072853,-8.255804,-8.019977,-7.406853,7.277052,-3.233209,2.305148,3.289986,-6.818834,2.990786,-1.007957,-5.356246,5.774781,5.504844,-8.364686,5.996081,7.105570,-6.272387,-2.758764,-6.813387,-6.990761,7.948129,6.410605,1.987930,6.532953,6.036723,-1.734534,4.666746,5.820527,8.444363,-8.626741,-0.389039,-3.422940,4.292392,5.395307,-6.214542,-0.378730,7.218224,1.733498,4.143800,-2.538555,-3.411844,-9.225829,-3.503765,4.036600,5.619728,-8.351623,9.587186,7.565390,9.560481,-6.762266,-6.647245,9.466652,-2.718221,-9.688644,6.128670,-4.889526,0.500527,-7.044063,-8.556269,8.889561,8.442595,6.045821,6.454321,3.487142,0.548955,-2.043798,-4.098993,-0.557938,-8.509715,-9.694380,8.042459,-0.812559,-2.871431,-9.858279,-3.759422,-2.434795,3.256795,-0.128470,-3.358443,6.897635,1.967751,-2.048759,0.015991,2.613112,5.864454,-0.090791,-4.129644,-5.615015,6.313910,-9.627291,-1.275844,7.861589,-2.252771,-1.297439,2.897285,1.555749,-0.505049,-0.919919,-9.024685,4.573572,7.543007,-7.059268,-9.043140,-5.542031,4.030586,6.454403,-1.386336,1.580673,-5.767335,6.690354,7.084510,2.459686,-8.168513,6.886628,8.394350,3.860524,-2.600407,-6.656777,-1.136791,-9.778405,3.454209,3.261936,-3.560067,4.170843,3.839916,-6.510537,9.196846,-9.273465,9.148462,-3.585462,-8.004603,-2.101131,7.074878,-6.747741,9.917183,9.046464,-6.193063,-5.534799,7.876528,-7.127376,3.449652,8.162127,-9.526066,-9.501618,3.422539,-4.209677,-8.086101,4.430986,4.641564,9.545916,-4.537884,-4.762947,-4.201312,-2.317676,-8.950247,-6.061390,9.586142,-7.831220,6.793167,-5.065002,6.025105,-6.174880,7.284718,8.367956,9.472505,8.774274,7.778342,6.471631,3.322411,1.337931,-4.754034,9.588349,1.553077,8.103890,-8.698225,4.590913,-4.311375,-9.369321,8.794919,-9.725570,-7.356865,2.929746,9.716061,5.091679,-0.620240,-1.720893,-2.963050,-8.368146,2.796417,-7.026993,7.762727,6.736331,-3.705676,8.904621,6.524645,-3.699373,-4.970907,9.204211,-5.695257,-5.374347,2.710416,5.750489,-0.956030,1.422076,9.497400,7.665501,-8.992357,-8.151009,-7.015291,-4.937687,-2.221517,-0.964441,-9.152984,-4.658717,-9.928120,6.641164,-2.824748,-5.500779,3.905098,-8.028802,6.463169,9.168345,5.418659,-1.567142,-4.087784,3.577219,-1.441754,2.174253,-9.584096,0.289089,-1.722664,-4.947988,-9.319647,5.771034,8.793533,-5.619883,8.672352,-3.995370,-6.355340,5.520314,9.259485,8.325020,-9.731699,4.854554,-9.060834,3.459927,8.369495,3.656444,-4.088845,3.589793,7.519316,0.668204,-3.563053,7.029863,-7.732223,1.057867,1.274930,8.627904,6.458485,-1.923901,-4.629185,-4.904483,-8.029142,2.296786,-6.345896,-4.914990,-0.067998,-7.090841,5.813770,2.745765,-4.867882,8.356424,3.511527,8.577157,2.403971,2.427080,-0.815092,-1.396876,2.850313,9.101980,-4.025734,9.065095,8.262855,0.692219,9.624590,7.973101,5.892428,-9.369959,7.717124,6.179502,2.211187,-3.677789,-5.573915,-7.260979,-7.105548,5.232743,3.219166,-8.533864,7.287958,1.462865,-2.284365,-1.770892,-4.835195,0.074006,8.702535,-3.610582,3.602111,-8.042957,7.882187,3.046921,-3.524984,9.885869,-0.384410,0.347134,1.782059,-6.786850,4.446039,-2.671369,8.106147,0.595216,-5.021178,-0.568528,8.927191,-2.312453,8.430218,-3.841906,-4.382135,-6.981024,8.427120,-9.422469,-2.447301,1.561386,-3.065618,0.136713,0.207127,-3.784181,3.014508,5.844547,2.735689,0.554319,8.249207,-4.527113,4.481003,-0.469710,-2.806235,-6.431328,-5.656936,-9.457213,6.104079,-2.303011,1.176230,-7.389312,1.900198,7.737007,6.889286,-3.551062,-8.722314,3.050175,9.808767,4.887108,-2.783487,-5.841937,7.506213,0.854567,4.729990,9.257968,-6.105563,0.152882,4.185835,-9.031321,2.570074,3.626772,-0.290255,-6.447319,8.475577,6.441307,6.459058,-4.281158,3.986773,9.520828,1.772180,1.074075,-7.758909,-7.592295,3.568712,3.336554,1.352642,-1.081063,9.250892,0.809524,-1.552007,-3.555886,-3.044230,-8.348212,8.392107,-9.281164,-7.680313,-5.739694,-6.542015,-1.294485,-1.328750,2.602640,5.346352,0.800125,-5.321679,9.776550,7.106432,-5.747711,-6.059429,0.471202,-4.867667,-1.641003,6.753329,6.349722,9.966003,6.081785,4.835506,7.375698,3.258191,5.657234,9.965932,-4.727747,0.711253,2.418145,-2.518793,5.353876,-9.434976,1.274956,-0.054507,-4.524166,5.721678,4.803939,-8.440997,1.857674,2.541630], dtype = "float32")#candidate|2590|(960,)|const|float32
call_2589 = relay.TupleGetItem(func_1376_call(relay.reshape(const_2590.astype('float32'), [12, 10, 8]), relay.reshape(const_2590.astype('float32'), [12, 10, 8]), ), 0)
call_2591 = relay.TupleGetItem(func_1380_call(relay.reshape(const_2590.astype('float32'), [12, 10, 8]), relay.reshape(const_2590.astype('float32'), [12, 10, 8]), ), 0)
output = relay.Tuple([bop_2542,call_2545,var_2546,var_2547,call_2550,const_2551,call_2564,const_2565,call_2581,call_2589,const_2590,])
output2 = relay.Tuple([bop_2542,call_2548,var_2546,var_2547,call_2552,const_2551,call_2566,const_2565,call_2582,call_2591,const_2590,])
func_2592 = relay.Function([var_2541,var_2546,var_2547,], output)
mod['func_2592'] = func_2592
mod = relay.transform.InferType()(mod)
var_2593 = relay.var("var_2593", dtype = "float32", shape = (16, 12, 3))#candidate|2593|(16, 12, 3)|var|float32
var_2594 = relay.var("var_2594", dtype = "float64", shape = (924,))#candidate|2594|(924,)|var|float64
var_2595 = relay.var("var_2595", dtype = "int8", shape = (325, 3))#candidate|2595|(325, 3)|var|int8
output = func_2592(var_2593,var_2594,var_2595,)
func_2596 = relay.Function([var_2593,var_2594,var_2595,], output)
mutated_mod['func_2596'] = func_2596
mutated_mod = relay.transform.InferType()(mutated_mod)
func_964_call = mod.get_global_var('func_964')
func_965_call = mutated_mod.get_global_var('func_965')
call_2717 = func_964_call()
call_2718 = func_964_call()
func_1069_call = mod.get_global_var('func_1069')
func_1073_call = mutated_mod.get_global_var('func_1073')
var_2722 = relay.var("var_2722", dtype = "float64", shape = ())#candidate|2722|()|var|float64
const_2723 = relay.const([[-7.841004,-7.902007,-3.477679,-7.336618,-7.595421,3.721340,4.319785,-8.531681,-0.196788,-1.290385,0.690867,3.998810,7.042599,2.911284,-2.763716,-1.746010,7.976539,-8.403074,9.156506,-2.814452,-0.061389,-8.382184,-7.723745,-5.325389,5.965125,-4.227170,-8.023868,2.953979,6.852245,0.892050,-9.700019,-3.261609,-0.919575,4.382997,1.365889,5.209793,7.778213,-3.055800,-5.456704,-2.024394,0.018429,0.669665,2.745125,5.785115,4.727439,-4.601288,-4.773370,4.805402,-2.952548,-4.790522,-7.240394,1.950304,3.938388,2.714777,-9.098332,-4.555354,-2.570555,2.801624,-9.280726,-9.432612],[9.848419,5.037057,-3.582040,-2.503348,5.359535,-6.365098,6.971015,-7.167447,0.156780,-3.611786,0.696480,2.729972,-7.599784,5.441557,2.703442,-0.817329,9.302284,3.425619,-0.124205,-9.219835,-0.214018,3.381711,-2.554706,0.772103,2.948535,-1.259850,-4.151422,4.420642,-6.529372,2.130054,-6.496168,5.023546,5.087113,7.046968,-2.211202,0.673818,2.813212,-5.405439,-3.172182,9.205805,-1.751810,4.456105,-5.296502,7.737850,3.433717,-7.152898,9.644694,2.396526,-5.916831,-1.783310,-3.905713,-8.796235,4.729479,-4.408958,-8.832240,0.626727,9.394461,9.780386,7.454747,-5.639227],[8.185389,8.621532,-0.408615,6.814426,9.710058,-7.797087,1.512024,7.076446,2.757857,4.558700,-4.827879,-8.454397,5.204030,4.332604,9.092763,9.555577,-6.144339,5.198740,-9.258476,-3.559140,-6.976552,2.787775,7.131341,-9.323435,-3.158056,-2.509271,8.254753,-0.820765,-8.175620,0.890469,-5.174359,-0.871716,0.681015,9.714125,-8.697948,-9.580231,-0.032316,-5.677227,-0.794851,4.705097,-7.257232,5.714535,-8.043972,-3.840220,4.835886,-7.376411,4.175704,1.142207,-7.273709,-5.614336,-5.828306,-2.465809,-6.633366,-4.456859,6.446414,-4.891183,8.569830,1.655048,3.393758,-4.944448]], dtype = "float32")#candidate|2723|(3, 60)|const|float32
call_2721 = relay.TupleGetItem(func_1069_call(relay.reshape(var_2722.astype('float64'), []), relay.reshape(const_2723.astype('float32'), [10, 9, 2]), ), 2)
call_2724 = relay.TupleGetItem(func_1073_call(relay.reshape(var_2722.astype('float64'), []), relay.reshape(const_2723.astype('float32'), [10, 9, 2]), ), 2)
func_964_call = mod.get_global_var('func_964')
func_965_call = mutated_mod.get_global_var('func_965')
call_2751 = func_964_call()
call_2752 = func_964_call()
func_1192_call = mod.get_global_var('func_1192')
func_1194_call = mutated_mod.get_global_var('func_1194')
const_2775 = relay.const([-2,5,10,4,-9,6,9,3,9,-2,10,-10,2,-9,2,-6,2,10,-9,4,3,2,-9,1,-1,-1,-9,-5,5,-5,3,-3,3,7,-8,-10,2,-7,6,-8,-1,10,-10,-10,-1,1,-6,-9,10,1,-6,2,-2,10,7,3,-7,-7,-9,3,1,4,-2,8,-8,1,9,-3,-4,-7,10,-6,-4,-7,9,-3,-4,10,1,-10,-7,4,-6,-5,1,-9,3,-10,-8,9,7,-10,2,-8,7,1,-9,-10,-5,5,-8,-7,-10,7,5,5,-2,6,-4,7,2,-7,-5,8,-3,-6,-7,-1,1,5,6,10,3,-1,10,-10,6,-5,-4,2,6,-10,2,-10,-9,-1,-2,-4,6,-4,3,-9,1,1,7,-5,-3,7,-6,8,-1,2,-9,10,2,-10,-8,-4,-4,-6,-10,5,-6,9,-9,-9,6,-4,10,10,10,6,10,-8,-5,-7,-7,-10,-7,7,6,8,9,-8,-8,2,-8,-5,-8,-5,9,-2,6,-3,1,-1,-8,-10,1,-10,6,-4,-10,-3,1,-3,-1,9,7,10,-2,4,8,-10,3,5,-2,6,-9,10,8,-10,-8,-4,-3,-2,5,-6,1,-1,6,6,6,-7,10,5,-3,-6,-6,-8,5,3,-6,-3,4,3,-10,7,-10,1,4,-9,8,9,-6,-2,-5,-2,-3,9,-9,-9,-3,4,-3,-5,-8,-7,10,2,-3,8,9,-10,-5,2,-3,-2,9,10,-1,-10,-9,-7,3,4,8,-5,-2,-1,-5,-8,6,-3,-5,7,-9,-7,6,-7,7,-6,-3,-2,-7,1,-6,8,-8,6,-5,-1,2,5,2,-8,5,-4,6,-5,-6,4,-5,5,3,-9,4,5,10,5,-3,-2,8,7,9,8,-8,1,-3,7,8,8,-9,-10,-2,10,-10,4,-8,4,2,-5,4,-4,-2,5,-10,-4,6,6,8,5,-10,-6,9,8,-3,4,8,-4,-8,2,4,6,9,1,-2,5,-3,-2,2,6,2,-1,-7,-3,-8,4,1,3,2,7,-10,7,3,8,9,9,3,4,-8,4,3,7,5,-4,-4,2,1,-9,-9,10,-10,-1,-10,2,3,-4,-3,-2,3,-9,7,2,1,4,8,-7,-4,3,3,-4,3,-7,-10,-7,5,9,7,1,5,-7,-1,1,-3,9,-2,-4,-8,-9,10,-1,-2,-8,-4,-7,6,1,-8,-1,9,-7,-1,-3,-4,9,-10,8,3,-3,6,-5,1,8,-10,-10,-10,-7,-10,2,-7,-7,-3,1,2,4,-1,10,7,-3,8,-6,-2,9,-5,7,4,-9,8,7,-3,8,2,-7,-6,5,-6,2,6,-2,-4,3,1,-9,1,1,-6,7,6,8,8,8,6,4,3,3,2,-5,7,6,-9,3,7,-5,5,7,-7,-7,-6,3,4,-7,1,1,-6,-7,5,2,9,5,9,7,-8,8,-3,3,6,-6,-2,4,-6,-4,-10,-3,4,-3,9,-10,4,2,9,-7,-5,-2,3,-6,-9,-2,-7,-6,-10,-5,-8,-7,-2,-2,-4,4,3,8,-3,5,-3,9,-9,-2,-5,-9,3,-7,-6,-4,7,2,5,6,-4,-8,-9,8,3,8,-8,-2,6,4,10,4,7,9,-8,9,-9,9,-5,5,-9,-5,3,-8,1,-3,-3,10,7,-1,6,6,-9,3,-4,-2,-3,-1,-6,-7,2,-8,9,4,-9,10,9,3,1,-1,-4,7,10,8,-7,-1,-7,6,6,1,-7,3,6,-3,9,1,7,-5,-8,-2,-9,5,-1,1,1,5,2,-3,1,5,-1,7,8,6,-6,10,1,-1,-4,-2,-6,-2,-2,-7,4,6,2,-5,5,4,-10,-7,10,3,-10,-1,-9,-5,10,7,5,9,-5,8,6,1,6,4,6,2,-10,2,-5,-4,8,9,3,3,-2,9,-2,-1,10,6,5,-2,8,6,-1,-10,-2,-6,-7,-4,-9,5,5,2,5,1,-4,5,-9,9,1,-10,-8,-7,-5,-2,-4,-6,6,6,5,-9,2,-3,7,2,-1,1,9,4,9,-8,6,-5,3,-4,-1,-9,9,6,6,-3,10,-8,-2,-3,-8,-5,9,7], dtype = "int64")#candidate|2775|(800,)|const|int64
call_2774 = relay.TupleGetItem(func_1192_call(relay.reshape(const_2775.astype('int64'), [2, 400])), 5)
call_2776 = relay.TupleGetItem(func_1194_call(relay.reshape(const_2775.astype('int64'), [2, 400])), 5)
output = relay.Tuple([call_2717,call_2721,var_2722,const_2723,call_2751,call_2774,const_2775,])
output2 = relay.Tuple([call_2718,call_2724,var_2722,const_2723,call_2752,call_2776,const_2775,])
func_2777 = relay.Function([var_2722,], output)
mod['func_2777'] = func_2777
mod = relay.transform.InferType()(mod)
var_2778 = relay.var("var_2778", dtype = "float64", shape = ())#candidate|2778|()|var|float64
output = func_2777(var_2778)
func_2779 = relay.Function([var_2778], output)
mutated_mod['func_2779'] = func_2779
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2142_call = mod.get_global_var('func_2142')
func_2144_call = mutated_mod.get_global_var('func_2144')
call_2841 = func_2142_call()
call_2842 = func_2142_call()
output = call_2841
output2 = call_2842
func_2843 = relay.Function([], output)
mod['func_2843'] = func_2843
mod = relay.transform.InferType()(mod)
output = func_2843()
func_2844 = relay.Function([], output)
mutated_mod['func_2844'] = func_2844
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2843_call = mod.get_global_var('func_2843')
func_2844_call = mutated_mod.get_global_var('func_2844')
call_2847 = func_2843_call()
call_2848 = func_2843_call()
func_948_call = mod.get_global_var('func_948')
func_952_call = mutated_mod.get_global_var('func_952')
const_2850 = relay.const([-5,-6,6,7,-10,6,-3,4,-6,-3,-5,7,-7,10,10,-3,-6,-1,-4,4,1,4,5,-3,2,-1,-9,1,-1,-2,-6,-7,-1,7,-7,1,-10,-3,-2,5,-10,-1,7,9,-4,-1,3,5,8,-9,-2,2,5,5,2,3,8,-3,5,5,2,-10,-5,8,6,8,-10,-9,6,6,6,9,3,-9,5,-10,9,3,6,7,1], dtype = "uint16")#candidate|2850|(81,)|const|uint16
const_2851 = relay.const([6,9,2,9,5,1,2,-6,1,6,-5,-4,-2,-2,-6,7,-1,-3,2,-2,-2,4,-3,2,6,6,9,-4,-2,-6,-9,8,9,-4,3,-7,9,8,-4,7,-10,-5,4,-2,8,-3,-10,9,-2,2,9,10,-3,-1,9,-8,3,-8,3,-1,7,-7,7,-8,-9,4,-2,-7,3,3,-7,8,4,-5,5,7,-2,-9,-10,-7,9,-8,-8,-7,2,10,1,-9,6,-10,-4,3,1,4,-8,4,-6,10,7,2,7,1,2,3,-6,8,-1,-5,-2,-8,3,10,2,1,9,-1,7,-6,-3,-6,-3,-10,-5,9,-7,-8,6,-10,-7,-10,-4,5,-4,-10,-8,-10,1,5,7,3,-8,-6,8,5,-5,-4,-7,-10,-7,-9,-7,8,-9,3,-7,-3,7,1,3,3,-2,-9,-5,9,-1,9,-7,5,-1,5,-9,5,8,-3,6,1,2,-7,8,1,6,7,-8,-3,-5,7,9,-9,-9,-7,8,-5,7,7,9,7,9,-1,8,-4,-4,-8,4,-7,-10,10,-2,6,6,-7,3,-10,-7,9,-7,-10,-5,-4,-4,6,9,1,2,3,3,2,-1,10,5,3,4,7,-2,10,3,-1,1,-6,-9,10,-6,-10,7,6,9,8,-5,-3,-5,4,-9,10,6,5,-4,7,-9,8,-7,8,4,-7,10,-5,-3,2,-3,-3,10,-2,5,4,-8,-8,5,-9,3,-5,10,-7,-8,-6,-1,7,9,4,3,-5,-10,-4,-2,-3,2,9,9,-4,5,7,-1,7,-8,-3,1,-1,-3,-8,-1,2,-1,7,9,9,3,9,-4,5,7,6,6,-1,-4,5,-1,1,10,-4,-1,-2,-2,-10,7,-2,-3,-4,-6,9,-5,-5,3,-8,6,-3,-8,-3,6,-9,-1,9,7,-5,2,3,10,4,6,8,6,10,6,4,-7,9,4,-3,3,6,-4,3,-6,9,10,5,9,-2,7,1,1,-5,7,-5,-6,6,-9,3,-7,-9,-10,-7,-8,-7,6,-2,-7,-1,-4,7,-7,-9,-3,4,-5,-10,-7,-5,5,3,-2,-8,3,5,6,-7,-4,-3,-1,8,-10,-2,-5,-4,-10,4,4,-3,1,-4,10,4,-10,-3,-4,8,1,-10,10,9,-3,-4,-6,1,4,6,7,-10,-7,-9,-5,-4,10,5,10,-9,-8,7,9,1,3,9,-9,8,-1,-8,5,-5,8,4,5,-10,-6,6,6,1,5,1,9,2,8,8,-4,6,-2,-1,-4,9,9,-9,3,6,2,-5,-9,-10,-9,-8,-1,4,-7,-4,5,4,1,8,-3,-3,4,-5,7,9,6,-8,6,-4,-6,-5,-2,-6,2,6,-10,2,8,-8,7,-10,7,-1,9,-7,4,9,-2,-10,9,-2,8,3,-3,1,-8,-2,9,1,1,-7,1,4,9,8,1,-8,-3,-6,-2,4,-10,-9,4,-8,-8,-1,-1,10,8,-9,-7,-1,-8,5,-4,1,9,-2,10,5,5,4,-10,7,4,10,-4,2,-6,3,-7,-3,-4,7,-6,-1,2,-8,-2,2,-2,-9,-1,-10,5,-8,-8,9,7,8,-2,-4,-4,5,-9,4,-9,-2,2,-9,5,-9,8,5,-6,9,-9,2,-9,-1,-6,-2,6,7,-3,-4,4,1,5,-9,8,9,-3,5,8,10,9,-10,5,-2,2,9,1,-7,-8,7,4,-7,7,-9,-6,-10,1,9,-7,-6,-8,4,5,-6,-10,10,9,3,7,-4,2,-7,5,-1,-8,-9,2,-6,9,-1,-2,-4,-6,8,8,-8,7,-5,3,3,3,-8,9,3,3,-6,-4,-10,7,6,2,-8,-9,-1,1,4,10,-10,-5,9,-8,6,7,-2,4,10,2,-4,2,-3,-3,-8,8,-4,-2,2,-9,-2,2,9,-2,1,8,6,3,7,-6,-9,-3,-9,5,5,-2,8,-10,2,-7,-7,8,-9,3,-7,10,-5,-8,-10,-10,6,-1,-5,-5,-7,10,9,9,9,5,3,1,-8,4,1,-2,-5,-5,-8,-7,-3,8,7,2,-9,1,10,-2,10,-8,-4,-9,-5,-9,-5,5,7,1,-3,7,10,6,1,-10,-7,-1,-9,8,-9,7,7,-3,7,6,7,-4,5,-8,-7,5,-9,5,-1,3,3,-3,4,-5,-9,3,-8,2,-4,-8,-1], dtype = "int16")#candidate|2851|(832,)|const|int16
call_2849 = relay.TupleGetItem(func_948_call(relay.reshape(const_2850.astype('uint16'), [9, 9]), relay.reshape(const_2851.astype('int16'), [832,]), relay.reshape(const_2851.astype('int16'), [832,]), ), 3)
call_2852 = relay.TupleGetItem(func_952_call(relay.reshape(const_2850.astype('uint16'), [9, 9]), relay.reshape(const_2851.astype('int16'), [832,]), relay.reshape(const_2851.astype('int16'), [832,]), ), 3)
var_2854 = relay.var("var_2854", dtype = "float64", shape = (832,))#candidate|2854|(832,)|var|float64
bop_2855 = relay.power(call_2849.astype('float64'), relay.reshape(var_2854.astype('float64'), relay.shape_of(call_2849))) # shape=(832,)
bop_2858 = relay.power(call_2852.astype('float64'), relay.reshape(var_2854.astype('float64'), relay.shape_of(call_2852))) # shape=(832,)
bop_2865 = relay.logical_and(bop_2855.astype('bool'), relay.reshape(var_2854.astype('bool'), relay.shape_of(bop_2855))) # shape=(832,)
bop_2868 = relay.logical_and(bop_2858.astype('bool'), relay.reshape(var_2854.astype('bool'), relay.shape_of(bop_2858))) # shape=(832,)
output = relay.Tuple([call_2847,const_2850,const_2851,bop_2865,])
output2 = relay.Tuple([call_2848,const_2850,const_2851,bop_2868,])
func_2874 = relay.Function([var_2854,], output)
mod['func_2874'] = func_2874
mod = relay.transform.InferType()(mod)
var_2875 = relay.var("var_2875", dtype = "float64", shape = (832,))#candidate|2875|(832,)|var|float64
output = func_2874(var_2875)
func_2876 = relay.Function([var_2875], output)
mutated_mod['func_2876'] = func_2876
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2890 = relay.var("var_2890", dtype = "int64", shape = (12, 13, 16))#candidate|2890|(12, 13, 16)|var|int64
var_2891 = relay.var("var_2891", dtype = "int64", shape = (12, 13, 16))#candidate|2891|(12, 13, 16)|var|int64
bop_2892 = relay.equal(var_2890.astype('bool'), relay.reshape(var_2891.astype('bool'), relay.shape_of(var_2890))) # shape=(12, 13, 16)
func_2532_call = mod.get_global_var('func_2532')
func_2533_call = mutated_mod.get_global_var('func_2533')
call_2903 = func_2532_call()
call_2904 = func_2532_call()
uop_2907 = relay.atan(var_2891.astype('float32')) # shape=(12, 13, 16)
const_2909 = relay.constdtype = "float32")#candidate|2909|(12, 13, 16)|const|float32
bop_2910 = relay.logical_xor(uop_2907.astype('int16'), relay.reshape(const_2909.astype('int16'), relay.shape_of(uop_2907))) # shape=(12, 13, 16)
uop_2913 = relay.rsqrt(bop_2910.astype('float32')) # shape=(12, 13, 16)
bop_2922 = relay.maximum(uop_2913.astype('uint16'), relay.reshape(const_2909.astype('uint16'), relay.shape_of(uop_2913))) # shape=(12, 13, 16)
func_2092_call = mod.get_global_var('func_2092')
func_2093_call = mutated_mod.get_global_var('func_2093')
call_2929 = func_2092_call()
call_2930 = func_2092_call()
bop_2938 = relay.less_equal(bop_2922.astype('bool'), relay.reshape(uop_2907.astype('bool'), relay.shape_of(bop_2922))) # shape=(12, 13, 16)
func_2477_call = mod.get_global_var('func_2477')
func_2479_call = mutated_mod.get_global_var('func_2479')
var_2945 = relay.var("var_2945", dtype = "float64", shape = (3, 24))#candidate|2945|(3, 24)|var|float64
call_2944 = func_2477_call(relay.reshape(var_2945.astype('float64'), [8, 9, 1]))
call_2946 = func_2477_call(relay.reshape(var_2945.astype('float64'), [8, 9, 1]))
func_2420_call = mod.get_global_var('func_2420')
func_2423_call = mutated_mod.get_global_var('func_2423')
var_2948 = relay.var("var_2948", dtype = "int64", shape = (54,))#candidate|2948|(54,)|var|int64
call_2947 = relay.TupleGetItem(func_2420_call(relay.reshape(var_2948.astype('int64'), [6, 9])), 0)
call_2949 = relay.TupleGetItem(func_2423_call(relay.reshape(var_2948.astype('int64'), [6, 9])), 0)
uop_2969 = relay.log2(uop_2913.astype('float64')) # shape=(12, 13, 16)
uop_2975 = relay.asin(bop_2938.astype('float64')) # shape=(12, 13, 16)
func_762_call = mod.get_global_var('func_762')
func_765_call = mutated_mod.get_global_var('func_765')
const_2985 = relay.const([-6.151457,-7.023052,9.159003,-6.205265,-1.699637,-2.817789,1.555036,-4.886681,-8.367331,-5.101900,-1.023259,-8.141134,-9.672671,3.172797,1.138526,-5.319504,8.221411,-3.693182], dtype = "float32")#candidate|2985|(18,)|const|float32
call_2984 = relay.TupleGetItem(func_762_call(relay.reshape(const_2985.astype('float32'), [2, 3, 3])), 0)
call_2986 = relay.TupleGetItem(func_765_call(relay.reshape(const_2985.astype('float32'), [2, 3, 3])), 0)
uop_2989 = relay.log(var_2891.astype('float32')) # shape=(12, 13, 16)
output = relay.Tuple([bop_2892,call_2903,call_2929,call_2944,var_2945,call_2947,var_2948,uop_2969,uop_2975,call_2984,const_2985,uop_2989,])
output2 = relay.Tuple([bop_2892,call_2904,call_2930,call_2946,var_2945,call_2949,var_2948,uop_2969,uop_2975,call_2986,const_2985,uop_2989,])
func_2992 = relay.Function([var_2890,var_2891,var_2945,var_2948,], output)
mod['func_2992'] = func_2992
mod = relay.transform.InferType()(mod)
mutated_mod['func_2992'] = func_2992
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2992_call = mutated_mod.get_global_var('func_2992')
var_2994 = relay.var("var_2994", dtype = "int64", shape = (12, 13, 16))#candidate|2994|(12, 13, 16)|var|int64
var_2995 = relay.var("var_2995", dtype = "int64", shape = (12, 13, 16))#candidate|2995|(12, 13, 16)|var|int64
var_2996 = relay.var("var_2996", dtype = "float64", shape = (3, 24))#candidate|2996|(3, 24)|var|float64
var_2997 = relay.var("var_2997", dtype = "int64", shape = (54,))#candidate|2997|(54,)|var|int64
call_2993 = func_2992_call(var_2994,var_2995,var_2996,var_2997,)
output = call_2993
func_2998 = relay.Function([var_2994,var_2995,var_2996,var_2997,], output)
mutated_mod['func_2998'] = func_2998
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2092_call = mod.get_global_var('func_2092')
func_2093_call = mutated_mod.get_global_var('func_2093')
call_3016 = func_2092_call()
call_3017 = func_2092_call()
output = relay.Tuple([call_3016,])
output2 = relay.Tuple([call_3017,])
func_3024 = relay.Function([], output)
mod['func_3024'] = func_3024
mod = relay.transform.InferType()(mod)
mutated_mod['func_3024'] = func_3024
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3024_call = mutated_mod.get_global_var('func_3024')
call_3025 = func_3024_call()
output = call_3025
func_3026 = relay.Function([], output)
mutated_mod['func_3026'] = func_3026
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3043 = relay.var("var_3043", dtype = "float32", shape = ())#candidate|3043|()|var|float32
var_3044 = relay.var("var_3044", dtype = "float32", shape = (3, 4, 5))#candidate|3044|(3, 4, 5)|var|float32
bop_3045 = relay.mod(var_3043.astype('float32'), var_3044.astype('float32')) # shape=(3, 4, 5)
output = bop_3045
output2 = bop_3045
func_3048 = relay.Function([var_3043,var_3044,], output)
mod['func_3048'] = func_3048
mod = relay.transform.InferType()(mod)
var_3049 = relay.var("var_3049", dtype = "float32", shape = ())#candidate|3049|()|var|float32
var_3050 = relay.var("var_3050", dtype = "float32", shape = (3, 4, 5))#candidate|3050|(3, 4, 5)|var|float32
output = func_3048(var_3049,var_3050,)
func_3051 = relay.Function([var_3049,var_3050,], output)
mutated_mod['func_3051'] = func_3051
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2189_call = mod.get_global_var('func_2189')
func_2191_call = mutated_mod.get_global_var('func_2191')
call_3069 = relay.TupleGetItem(func_2189_call(), 0)
call_3070 = relay.TupleGetItem(func_2191_call(), 0)
func_2189_call = mod.get_global_var('func_2189')
func_2191_call = mutated_mod.get_global_var('func_2191')
call_3071 = relay.TupleGetItem(func_2189_call(), 0)
call_3072 = relay.TupleGetItem(func_2191_call(), 0)
func_2592_call = mod.get_global_var('func_2592')
func_2596_call = mutated_mod.get_global_var('func_2596')
var_3083 = relay.var("var_3083", dtype = "float32", shape = (576,))#candidate|3083|(576,)|var|float32
const_3084 = relay.const([-7.561933,-5.256431,7.246110,1.045985,-1.884317,-0.198701,-4.008125,0.624381,0.630405,-5.487889,6.758397,-6.155921,7.232803,5.496390,5.396541,0.213483,8.447977,-6.291068,-9.424859,-8.043455,-1.282125,-4.889343,0.366014,2.847223,5.021784,1.767171,9.918558,-3.226902,-4.610450,0.923413,-1.210433,5.441696,-7.281641,2.342029,9.252291,-9.854110,-8.198688,6.617776,-4.249173,-0.750842,-9.968808,-3.189639,-3.886145,-0.570541,-6.950687,-8.673803,-0.962824,-9.299394,5.031522,7.074287,-3.490393,-0.156049,6.600672,-1.729958,-4.939073,8.508983,3.526420,-1.644949,-2.971439,-9.577600,-3.831816,-9.508171,-1.579674,-3.327982,-0.020303,0.344472,1.216498,8.974173,3.940649,-7.145450,7.387346,-9.506965,-6.238315,-0.694340,2.541166,5.443468,5.127398,-2.106348,8.233880,7.195357,0.387555,-4.419271,1.632983,3.747244,5.790848,-7.762183,0.162381,6.710070,-7.669612,-2.322059,-1.918547,6.326561,7.834701,-4.519864,-1.191660,-3.747194,-2.344168,-0.003501,5.680950,-7.989983,-3.185255,8.804710,2.943903,9.566585,-6.477812,6.230856,1.820498,-8.155033,-2.272938,7.223787,-8.402533,-7.438082,-4.065522,-4.543231,-7.396098,4.768245,-2.941187,-2.947762,0.292314,9.625288,-3.748604,0.744964,3.561147,-3.940031,-4.908525,5.936746,-2.256777,9.792913,-2.164537,-3.852580,-0.821168,3.277635,-8.555658,-4.659192,0.154359,2.203202,-2.570175,-8.749020,-2.333089,9.372891,-4.094636,7.587216,5.709667,-5.560022,1.686492,-1.179041,-0.845783,-1.687733,-7.535901,-6.562226,-3.336408,1.864189,-7.689105,-5.889204,-1.415161,5.316078,-6.739272,0.871017,5.145900,-4.842623,-3.909892,-4.120637,-4.056399,9.164680,4.338997,0.219992,2.055999,-4.967586,-6.014947,-6.466811,5.953438,9.994235,4.916645,0.631803,-7.795199,6.211012,-7.967244,8.729417,-1.641688,2.849932,1.822400,1.884165,3.868768,-2.851564,-9.641286,8.452998,1.386124,-5.063416,9.007236,1.920158,5.054955,9.310221,4.194051,-6.268321,6.070521,6.424486,-4.228497,-9.999879,3.745244,5.245347,8.192099,8.142890,-9.120245,8.204495,9.847340,8.871419,3.757945,-7.047223,-9.002457,-5.191550,4.478318,-6.783093,-0.681825,6.713249,9.577988,-3.482550,6.765953,3.545953,8.832180,-1.191596,-3.491880,5.150169,-2.663189,-4.702865,-5.774842,-3.286387,-5.486709,-0.606187,5.241392,-3.939151,-7.080163,-3.285818,-3.499979,7.368658,-5.242107,-4.603131,-8.692369,7.791480,-5.706505,5.187655,-7.525494,-3.724923,-9.919212,-0.966578,-9.128655,-7.472925,7.244562,5.390013,9.778084,6.946386,-9.578885,-8.436876,0.228258,4.077432,4.140664,-5.699786,-9.860301,-3.495389,5.651071,6.409402,-0.932463,3.735154,-3.282962,5.125630,3.611511,4.904029,9.527056,-7.643170,2.661405,-3.076678,-1.260372,9.103147,7.406787,4.093292,-9.374617,-2.968455,5.962091,-6.586460,-0.851701,4.427357,-3.930605,3.161700,-4.725409,-8.640771,7.136918,-0.492910,4.947521,3.503307,8.389285,-5.392054,1.217272,-2.477344,-1.534409,-8.362488,8.136612,-4.209850,-6.352865,6.549142,-5.264351,6.603751,-7.812784,7.869352,4.545461,-9.733025,-1.016464,-5.222976,7.008216,-1.085611,7.802413,1.892112,-8.312175,-7.653886,6.474746,0.711155,7.272547,-1.397436,-0.610474,6.148053,-6.172631,-3.101236,-6.215368,-5.955701,-1.383707,6.660518,3.157288,-8.454982,6.869887,-5.022600,-5.440681,-3.210847,-5.336156,0.257523,-0.767761,-8.406052,-6.895898,5.162061,3.562793,-6.057867,-7.462559,0.882289,-3.127738,9.435924,-4.228340,9.761788,2.515592,-4.331962,-2.842103,-5.311797,8.277634,6.418033,-9.390167,-6.957920,-7.215116,9.789373,6.582692,-2.723736,-0.452250,6.975457,5.383630,5.177638,-2.780544,1.449269,5.555999,2.439357,-2.631381,-5.040830,-7.042376,3.731822,4.593578,5.195689,1.219418,2.095887,-3.411995,6.547562,4.455374,-4.090279,-7.006188,-8.114547,-4.188387,-3.695877,-0.364010,3.881417,-7.031753,5.623178,7.043349,-3.513442,-8.503892,-8.620186,-0.790992,-3.521462,-7.821443,6.787403,-9.815164,-2.731183,1.649802,-3.274140,5.748125,-3.234963,-4.491757,9.471565,9.742481,-2.006217,0.801157,-9.876019,-9.617920,7.256226,1.614247,-7.788402,-2.918296,-1.787552,5.784527,0.516832,-3.700620,-6.111589,6.374524,-0.399349,1.818010,-1.677211,7.652512,-2.941892,-4.625409,-2.361854,-9.597459,2.552800,2.169872,3.978279,-8.868571,4.965903,-5.420970,7.363285,-8.697858,-5.138616,1.697136,-4.944612,6.169941,-3.516036,1.932942,-5.250751,5.412746,-0.831242,4.405213,-0.738932,5.044826,8.866631,1.816521,3.430459,-9.843266,-0.302337,1.886582,8.668595,1.571907,-9.992440,-2.526591,8.861595,-6.645371,8.820353,4.846219,-0.435434,0.866721,-2.636312,-7.467880,-7.140510,-1.506236,-2.568559,-6.196588,-9.343835,-5.307862,-1.171044,4.562261,-3.422516,3.825287,-6.217613,7.873929,4.931167,-4.905595,-4.443830,-0.566229,9.305852,3.331337,-4.347215,4.450685,9.240760,7.155584,9.386203,1.526303,-9.560579,4.613544,9.148782,3.172114,0.471767,5.023357,3.346533,5.230736,-8.421468,-8.016027,-9.088598,4.879756,1.807385,0.849730,-0.770600,6.612320,2.703113,5.154421,4.690005,-7.993982,-1.277894,-7.684516,6.891617,-6.387737,-2.494689,-4.721275,9.975891,7.321490,-0.314221,1.914439,8.708663,2.700733,0.279908,-5.532065,-2.567546,1.345832,-7.088612,-7.445391,0.306712,0.798419,1.636961,-0.517011,0.294758,-8.397913,-1.601983,-0.977677,-8.879425,9.892943,-6.289710,-2.912104,-4.829978,9.002509,-4.116544,-8.635911,2.388839,4.958702,0.406462,0.024430,4.642146,-5.240926,7.287525,-0.542918,-6.906361,3.971916,7.019608,5.072506,9.871288,-7.914623,-3.716476,-3.200405,-9.913532,0.446177,9.345536,-6.072604,-6.551929,0.166759,-3.970093,5.287836,2.367129,8.252581,-8.246038,-1.528306,-1.153180,8.974387,1.412720,-7.525265,-3.726182,7.642003,-8.950929,-6.000840,-4.009395,-9.448324,0.353197,3.747406,-1.557867,4.708752,-9.016902,-2.586165,-0.700314,2.453085,5.571597,0.862408,3.085788,-0.873687,0.670261,-0.860483,-2.677727,-4.377947,-6.245556,-5.678689,-4.281186,-4.666257,9.180200,8.763540,-8.223979,4.288036,-5.855144,4.352445,1.112155,7.095471,9.365117,-2.592645,-9.308792,7.401152,-1.409678,3.645653,-9.921826,6.694231,1.948535,2.956901,-8.265188,2.589189,-6.390691,-6.018000,-1.714126,-1.062840,-2.512401,1.658327,0.537189,6.962069,-0.640200,-9.442024,-5.258696,-8.892867,0.681956,-0.231126,-0.365031,-6.620814,-0.410484,-6.430272,5.018738,-6.889251,5.722848,-2.336467,7.127772,6.666551,9.779863,-8.478547,4.006814,3.190601,-7.174306,-0.242024,5.851201,7.757159,-9.251924,0.985719,-4.091502,8.590226,8.919257,-9.851779,0.244224,7.175602,-1.161848,0.310277,-5.960838,-7.402894,-6.846221,-4.096002,3.859121,8.273974,1.992746,9.507736,0.126002,-0.681179,7.009070,5.151842,-1.190639,4.940697,-4.755422,-2.592949,7.002639,8.493344,-3.176531,7.982526,-3.534042,2.151870,9.489341,8.858744,2.277498,-3.745838,7.150473,0.684995,-1.381201,-3.742990,8.327254,5.347684,4.814969,-0.524459,-0.090059,4.704228,7.011464,6.950329,-6.950660,9.549969,-4.576577,-8.909906,6.852305,0.289233,-2.374226,-5.361840,-2.360578,-6.696138,-0.094465,0.859083,-0.711193,1.537769,9.133648,0.921239,-7.226563,5.599107,-0.544419,-7.486097,-8.285699,4.390206,3.636696,-8.179005,8.079941,3.046320,-5.401764,5.460918,8.382727,-8.102869,6.897272,-8.614890,-6.580065,-0.239330,1.419353,-6.272845,-2.721864,-5.421220,5.477240,1.917861,6.098086,-8.796096,-9.351509,6.983532,1.211353,-7.566344,2.270217,-5.829683,3.121754,-0.789930,7.810293,-5.220960,-9.229271,1.160175,2.178540,-7.418108,4.840124,-9.866716,-6.384020,6.172376,4.681664,-8.729074,1.688813,-3.222809,9.625675,9.727228,3.264547,-8.473743,7.995322,5.366981,0.874510,1.619271,9.347749,-1.057174,6.763599,0.182537,3.126655,5.376270,-7.174998,9.487627,-8.815750,-1.669932,-2.355086,9.707089,-9.746339,3.161322,7.717484,-6.699809,-7.291912,-5.251694,-6.865916,3.467518,-4.654274,-8.679921,-7.524939,-2.614358,6.225075,8.696020,-2.953122,8.273873,8.179538,-3.390719,7.045327,4.830471,1.815724,-0.578138,6.717939,6.732662,-6.148836,-7.428712,-1.648019,-5.657212,9.103723,1.541487,-9.705852,-6.941890,1.079037,-3.604130,3.781512,2.362873,-1.359946,5.932479,5.498112,9.148144,-3.062283,-1.140783,-3.977594,-1.303070,-1.688145,5.830456,-0.849015,0.958896,-5.363884,9.040716,3.055462,-5.779407,-7.911853,-5.727186,3.789744,9.534255,8.031840,-8.997870,-5.791622,-9.441599,-1.375779,-7.157797,4.919751,2.513387,6.271505,-8.070851,3.385785,-3.040381,-6.099499,2.784192,-9.684310,6.197198,-7.701848,-5.686773,3.886776,-2.964897,-4.055230,-4.986762,-2.366607,-9.412183,-5.323896,-4.110538,7.005326,8.924407,9.681778,9.406857,-0.516840,-9.140836,-0.059546,8.596619,6.547296,-8.053479,-3.501806,0.328033,-5.208267,8.421603,-0.436779,-1.421204,-6.808028,0.339144,-8.596357,-3.573811,-6.312309,1.826735,6.892311,-3.737805,-5.217304,-4.194063,7.523866,9.053850,1.906777,5.970576,5.372404,-6.730240,6.447431,3.487916,-3.782517,-6.144377,-7.803950,-1.674370,2.756519,-1.358964,2.807894,-9.621886,1.092947,-5.910000,-5.867437,-4.341573,1.290102,-3.217701,5.545869,-9.960871,5.720409,-2.428629,-9.702198,3.251075,4.703294,-9.645699,-6.315414,8.077060,-5.696926,5.056603,7.840633], dtype = "float64")#candidate|3084|(924,)|const|float64
var_3085 = relay.var("var_3085", dtype = "int8", shape = (975,))#candidate|3085|(975,)|var|int8
call_3082 = relay.TupleGetItem(func_2592_call(relay.reshape(var_3083.astype('float32'), [16, 12, 3]), relay.reshape(const_3084.astype('float64'), [924,]), relay.reshape(var_3085.astype('int8'), [325, 3]), ), 3)
call_3086 = relay.TupleGetItem(func_2596_call(relay.reshape(var_3083.astype('float32'), [16, 12, 3]), relay.reshape(const_3084.astype('float64'), [924,]), relay.reshape(var_3085.astype('int8'), [325, 3]), ), 3)
uop_3150 = relay.atanh(const_3084.astype('float64')) # shape=(924,)
func_2777_call = mod.get_global_var('func_2777')
func_2779_call = mutated_mod.get_global_var('func_2779')
const_3163 = relay.const(-8.536385, dtype = "float64")#candidate|3163|()|const|float64
call_3162 = relay.TupleGetItem(func_2777_call(relay.reshape(const_3163.astype('float64'), [])), 4)
call_3164 = relay.TupleGetItem(func_2779_call(relay.reshape(const_3163.astype('float64'), [])), 4)
output = relay.Tuple([call_3069,call_3071,call_3082,var_3083,var_3085,uop_3150,call_3162,const_3163,])
output2 = relay.Tuple([call_3070,call_3072,call_3086,var_3083,var_3085,uop_3150,call_3164,const_3163,])
func_3167 = relay.Function([var_3083,var_3085,], output)
mod['func_3167'] = func_3167
mod = relay.transform.InferType()(mod)
var_3168 = relay.var("var_3168", dtype = "float32", shape = (576,))#candidate|3168|(576,)|var|float32
var_3169 = relay.var("var_3169", dtype = "int8", shape = (975,))#candidate|3169|(975,)|var|int8
output = func_3167(var_3168,var_3169,)
func_3170 = relay.Function([var_3168,var_3169,], output)
mutated_mod['func_3170'] = func_3170
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1887_call = mod.get_global_var('func_1887')
func_1889_call = mutated_mod.get_global_var('func_1889')
call_3198 = func_1887_call()
call_3199 = func_1887_call()
func_1696_call = mod.get_global_var('func_1696')
func_1700_call = mutated_mod.get_global_var('func_1700')
const_3212 = relay.const([-6.152743,1.885197,-3.134791,4.475579,9.505569,2.176888,7.643800,7.047205,-3.167855,-7.311806,9.338990,-9.416392,-1.465593,-5.696558,-1.061008,5.683458,-1.557563,1.146815,-9.687899,-7.956052,9.236468,4.962090,-6.711571,-9.523842,0.302056,8.440976,-0.676290,-8.874572,-2.203630,6.755766,-4.820778,-0.065234,2.862955,2.314173,-3.366111,5.130223,7.593478,-3.159470,-8.708111,6.360350,6.277663,-0.808666,-7.654624,-7.396040,-2.797205,0.843840,-2.399956,0.883898,0.692698,-1.991404,-6.194639,8.514829,-3.474022,7.605958,7.556681,-3.998817,-8.810130,-7.851269,6.583672,9.793253,-0.363396,-0.120765,-6.623272,-9.565070,-6.420408,3.979035,4.114604,3.207899,-5.226739,-2.238587,1.712587,0.881861,0.287854,-9.772467,-9.223239,-7.454908,-6.834897,-6.059614,-6.930910,-7.108561,3.852881,-6.202250,2.423854,-2.407554,-9.267635,6.755121,9.906680,4.736959,-6.678580,4.325475,-5.729788,-4.897979,-9.302078,4.968744,2.885065,0.499306,-8.957090,8.682417,9.673691,0.289975,-6.792287,3.640151,0.939167,9.026942,-4.245334,3.079375,-7.924494,0.733536,-1.239332,-2.560987,9.942550,-3.773142,3.649188,5.375614,6.509472,-8.473759,8.855327,8.823195,5.113178,-4.155544,7.940006,-7.440048,4.989870,-9.890197,-2.097438,-0.902286,-4.129295,0.533605,-5.192585,9.678057,-1.679710,-4.086032,0.263265,-8.982409,-2.936868,9.007564,-5.485617,6.423258,3.047013,8.035962,-6.570269,6.892751,-9.920341,-1.281468,3.905917,-9.578094,-5.788928,8.177970,-0.491834,-2.151007,3.455660,-6.298222,5.057779,1.625363,1.261307,-9.378550,-4.875139,3.000329,8.187607,-9.939419,8.057903,-2.626581,5.086687,2.629110,3.409030,-2.364056,2.493835,8.114540,-5.132487,-5.246724,7.980135,-2.616279,-1.518728,9.855657,7.435139,5.970550,-3.405160,-7.273126,1.826725,-7.292251,7.954048,5.256660,3.300839,1.064035,-3.438091,-0.735597,4.284049,9.270308,-4.051904,8.127473,-9.624269,-7.589639,-4.024590,-0.504519,-1.721616,-7.268679,1.681601,4.249597,-0.990549,8.668355,-3.703299,4.308848,-0.726278,9.355819,4.828510,-8.417084,2.974324,-0.168174,-6.877328,-7.924079,8.662268,-7.484476,-2.570330,-0.057019,8.584560,5.627321,9.141705,3.026943,-2.616893,-8.824346,2.569733,4.262742,1.906784,-7.803307,6.450191,-2.409298,9.992720,9.547787,-0.323164,1.509178,4.896330,3.776691,2.883156,-5.087567,-3.744037,7.785302,-3.970000,-2.032176,-4.301584,1.428328,9.004576,7.369964,-1.522240,0.821943,-3.674881,-0.086418,4.162751,-6.079803,-1.460744,-0.643663,7.355487,-9.047940,5.204604,7.301160,5.513960,8.717880,-6.267013,-9.522255,7.214577,-4.537937,-6.997666,-4.784765,-9.651427,-6.898576,6.235079,3.976566,-0.061312,-0.950593,3.476146,0.911299,-1.687495,5.330774,6.403211,-7.418743,6.427470,-3.415292,8.518622,-6.506161,1.868102,9.380844,7.019671,2.788534,-5.868849,9.332243,8.111725,6.442119,2.453952,6.235628,-3.192319,-6.235067,-7.912918,3.591021,3.431446,1.414956,-9.192063,1.892393,-8.078258,2.907963,1.837765,-5.837603,6.926955,-4.799673,-4.712397,-8.852105,7.360097,4.922994,0.796620,-8.525987,-6.237552,-2.304532,-8.584499,-6.334572,-0.156030,0.938145,5.824004,8.028719,5.040172,2.244832,8.879613,-9.699119,-6.375766,-1.930767,-6.187330,-7.404272,-9.370561,3.136639,1.519364,4.478125,0.313350,6.380598,-9.784326,-7.858407,-2.442145,-8.970561,7.872575,7.485020,-8.191925,3.950457,-1.930136,8.607830,-2.133020,6.747797,-4.022871,-3.503934,4.168578,-8.290615,-9.373732,-5.790222,6.349399,-1.888214,7.682225,-2.053279,3.944076,6.173136,-0.594798,-3.939484,9.702108,-8.267445,0.780923,-4.774907,-7.506413,-5.744846,5.651134,1.642761,7.839169,8.168959,1.258129,-2.747626,8.829830,-0.244029,-6.278049,3.324642,-5.313717,-0.380469,-5.664690,0.160671,9.299611,1.885837,-1.441614,3.435126,-8.827716,-7.854859,0.223448,-0.975006,-0.601429,-1.567415,0.903923,0.458089,4.140555,4.407359,-8.433038,-7.920802,6.748141,-1.449532,-9.983179,7.169137,-7.650473,9.289229,7.967409,-3.224608,-4.416739,-5.339302,-1.627769,-1.272193,7.687698,7.206295,-5.024270,-3.843432,6.410891,5.881602,-5.257875,-6.886312,-8.281746,-4.500407,0.339705,-8.458493,9.495176,-3.197825,-9.105963,1.440541,-7.688161,1.785740,-5.505199,-2.241525,-7.855668,-3.710159,0.558852,8.607560,-8.557074,2.001468,-9.979592,9.625087,-9.498944,-0.955652,-0.392641,3.476310,-8.688732,2.420574,-7.613394,0.821411,6.814847,9.894709,-3.894096,9.763712,5.556827,8.587563,-5.104019,5.484242,-2.730854,9.233424,-4.468296,7.990855,1.459792,9.634374,5.207239,-4.387158,-4.472757,2.263828,-4.038271,0.263978,8.875952,4.606681,-1.043458,-8.084545,-5.048250,0.969624,-1.716175,-5.961757,-4.121899,6.272045,-9.317649,-9.060038,-0.364964,0.619608,-4.546930,-2.140147,4.823163,7.331875,-5.616995,-5.005493,0.426074,3.924727,0.120642,3.854099,-6.894646,3.623900,-7.962666,1.497997,7.094633,5.923544,-0.865595,6.561545,-8.999101,8.015244,-0.154827,6.933729,7.571673,-2.306169,-2.907657,-5.819795,-8.257720,0.026117,-2.669311,1.183077,-8.651434,2.651476,-1.191835,-1.197574,-7.700854,-6.655071,-7.770811,-0.353661,-7.902784,-5.681789,5.374892,2.697353,-7.001489,-1.999553,-6.733077,-9.140490,9.499655,7.743488,-9.800918,-7.485768,3.552595,0.626515,-7.795261,0.536912,-6.775277,-3.400029,9.325394,-6.028042,-8.774415,-4.522569,-7.521461,2.958076,-7.435280,-8.365743,7.573239,6.370666,1.248255,-4.667454,7.026375,-2.719420,8.939010,5.432614,5.309721,-7.959381,-3.062980,-1.501332,6.086743,-5.806755,-7.274962,-7.211689,1.439056,-2.940259,-0.644773,9.956190,-4.203275,-1.225022,-7.706911,-8.635182,4.489782,3.345010,6.610155,-6.767990,-4.837724,4.340534,2.393792,-5.377489,4.788452,1.745335,9.320566,4.980850,4.714707,8.551938,4.742635,9.235346,-1.158455,9.695149,-5.019243,-1.601225,-9.269433,6.945209,8.510586,7.166671,-8.210255,-9.537417,9.343645,1.391367,7.609595,-3.962372,7.517611,9.042894,-5.594039,6.429250,5.921169,0.413083,3.534614,3.342110,-2.869844,-0.623510,-3.488564,-6.287364,-9.999913,-9.455021,-2.649747,1.848081,-5.172821,1.358828,3.194004,6.836273,-3.312697,-3.024079,3.409181,-7.171420,-7.082504,-0.473042,-6.441096,-1.018477,-4.763102,-6.859524,5.416786,-5.500147,5.613145,0.191010,9.632398,5.617384,0.099190,5.379138,1.328750,1.327784,-8.918250,-0.248230,-1.489789,-4.241784,2.072296,-2.511377,-5.365340,-5.852178,-2.034433,-9.640128,-6.088618,-7.033506,3.723628,-0.523121,2.096045,1.496988,2.838796,-4.661682,-0.470257,4.422751,-6.978317,4.494810,-0.471876,-3.854416,5.000380,-1.741182,-0.839325,0.391365,3.723688,-3.706090,8.729281,-7.743769,-7.447847,4.307072,7.065865,-9.622869,-4.610908,-0.344593,-6.787704,7.392324,9.718166,0.639715,-6.071987,-5.041542,7.333609,9.205164,-7.275774,0.835141,-5.800462,7.139692,8.668800,8.732529,6.734255,4.252838,-1.043087,6.277042,-9.294980,6.849727,-1.680085,-8.357879,7.373027,-9.462734,-1.183456,-5.289296,-2.166617,-6.896081,3.042092,5.586291,-4.142958,-0.655350,-3.405152,-5.496612,1.801257,8.949369,3.607363,9.391522,3.775126,-0.458380,0.069646,7.709137,1.901764,-5.250033,0.242979,7.830118,-9.072039,3.699312,-1.511193,0.525768,5.541469,8.335449,3.935721,5.407736,-0.067165,-3.293842,-5.313575,-3.571171,4.089486,2.020035,-5.634481,-7.473615,-2.292000,8.179507,-9.850814,-4.031421,-3.817017,-7.470268,-4.919981,-1.311287,-6.259310,2.762213,-1.155587,-8.486955,-8.108439,6.802485,-4.352380,0.610774,8.941665,9.083704,0.151483,1.798897,1.312775,1.651035,-0.930573,5.110239,-2.209421,3.389319,-7.192842,3.016664,4.474256,8.699078,-2.399280,8.702250,-8.785147,9.829952,-0.590388,6.110662,0.675452,-6.110658,-9.339827,-2.065352,-2.528103,-0.989379,7.218356,2.713003,-7.650674,-3.838593,0.096138,-6.013151,3.701556,1.345916,-9.751966,4.363973,-0.205643,4.112420,3.008801,5.325318,-5.337483,-7.564824,7.930573,-6.046059,6.621822,8.725798,-4.293223,-7.605634,8.384987,-5.096107,-7.622046,1.047011,0.454167,7.476428,-2.538583,-2.607220,-2.058351,-8.330348,-9.277959,7.306297,-6.242189,-8.198346,-9.267997,-1.507938,-8.660227,-7.049488,-4.271368,0.067166,-1.556372,9.784048,-5.955197,2.638900,-6.056118,-3.320407,2.954165,-2.970026,-9.556195,-7.477408,5.431629,7.799726,0.446667,-4.313873,1.494743,3.020956,3.656364,8.676578,-4.709087,-1.699313,-3.278799,2.824940,1.601606,6.569450,-9.488789,-5.328656,-0.728403,-1.372376,0.465098,-0.013617,-7.735648,3.045359,-4.547518,1.387659,0.428715,7.473087,6.502055,6.093353,8.331429,-5.727943,6.806466,9.636245,-2.837215,6.229771,4.908467,0.582218,-8.734462,5.257737,0.221214,3.662261,-1.841851,-5.983017,-0.079031,-3.175404,7.201253,7.862578,-0.792385,-6.128313,-3.438332,-1.923608,0.915349,-2.920256,-5.547757,-5.328004,-6.655973,0.061109,7.539221,-6.131343,4.657573,9.538789,-4.194001,2.688965,4.432276,0.793709,-4.492755,5.545634,6.216167,2.140645,9.619341,8.168331,1.698103,4.535631,3.342563,-8.522120,-0.774300,0.510017,1.950992,9.434083,-0.082325,-9.999034,0.265789,2.977730,3.773435,-1.389572,-5.870126,0.435531,-4.771047,-5.217203,-7.963527,9.734576,-8.240412,1.124799,8.697435,0.760308,-6.321176,-4.709414,5.343005,-7.870277,-3.582596,-4.263383,6.655354,6.594332,-1.973613,1.869115,-8.636788,8.959750,8.094348,-1.807805,-4.179657,-7.230608,-6.936370,-0.779759,-3.706224,-5.095262,6.925387,-9.462824,-1.764007,4.994827,9.163372,-4.226051,0.234292,1.452074,-0.868051,7.103315,2.263747,5.312932,3.897682,2.171068,1.638186,-6.699099,-8.254299,0.739332,-8.505910,6.002799,2.732452,-3.269927,-2.522162,5.145184,4.713776,9.710016,-0.381336,-7.948592,-1.614953,-9.567547,-3.770948,-1.127676,8.734393,8.009322,-4.604706,5.645938,-2.916203,-9.668586,9.755810,-7.169755,6.518677,5.965757,-6.627265,7.830523,-9.646112,-4.761189,-1.968895,6.173855,-9.005203,-7.451028,-9.050428,-2.694277,3.894055,1.944725,-1.068964,2.568158,0.664246,-9.765637,4.658799,-4.701556,9.596210,-6.451159,4.825485,7.168748,-4.308160,2.253009,0.036816,-3.819697,-7.035235,-6.977773,8.334678,-6.659612,-1.609716,-6.763412,-9.193237,2.423398,-7.023146,-0.508444,-3.822964,0.212852,3.627763,4.813785,0.237358,9.326376,6.355770,-7.067710,5.389718,6.330779,1.199664,1.407721,-5.356984,7.644746,-5.935397,-6.627283,4.778644,-2.205573,-3.391223,-0.162672,4.505097,-4.688089,9.271731,3.949604,6.676495,-4.339636,-4.901101,6.920933,0.787272,5.842135,-9.728561,-9.742398,-5.074071,-7.005027,-1.846493,-1.608613,-5.718094,-5.574207,7.540409,-9.932067,-4.699906,-3.189055,4.831011,9.409038,-0.929895,-1.327636,-1.863271,1.737022,4.287787,-5.287302,-3.385330,5.163507,1.553526,-6.967332,5.337771,7.091990,3.713254,3.124856,5.664635,2.394890,8.462655,-6.022174,-0.795549,-9.273205,5.441379,9.368931,1.334575,-2.935701,-7.271501,-6.014810,-3.147907,7.581299,2.040096,-5.008663,8.660659,-9.667436,7.777903,1.182400,-6.229670,-4.490071,-8.789642,7.408008,-9.890303,-9.750997,-5.069887,6.521812,-5.657819,8.897587,0.183530,5.184632,7.355195,3.785931,-4.879493,5.193335,5.043185,4.197634,3.286931,0.996845,-9.474231,7.674819,-9.769095,0.942118,6.086568,-6.093279,-4.087285,-2.425182,-5.087488,4.111905,-0.366012,5.599752,-9.872693,7.332525,-8.247993,5.110755,-6.054945,9.627070,6.366457,9.921303,3.029140,3.555304,8.778323,-4.191069,-4.368764,2.302009,-9.605532,-5.822055,0.389688,-9.941311,-5.229760,-0.540267,-9.606738,-6.417048,2.636463,7.674273,7.387893,-4.185334,-5.842893,-9.366785,-8.525438,4.380572,0.953913,0.036517,7.307666,-0.831403,-4.415687,-1.248982,-1.949027,-8.855145,-6.221742,3.679899,0.516583,2.827257,-0.157122,-4.235843,5.930478,3.586707,3.740637,2.633776,-3.548023,-7.908096,-8.613827,-7.636114,0.631687,-5.302705,-9.701775,-2.106147,-2.827469,5.564655,1.363997,9.699635,4.018682,1.258581,-7.439437,5.093545,-0.003057,4.115809,-3.363914,-1.077420,-1.608192,4.998928,-1.477499,-5.194254,6.130883,1.456737,1.315241,1.300219,9.301248,2.125005,3.445540,-9.319389,6.723780,1.922018,9.391130,8.575824,-1.262113,-8.316350,-8.117246,0.578036,-7.826314,5.394933,-5.194516,-2.042495,4.148062,3.721542,-2.034390,0.771209,2.235294,4.759330,-4.485358,-3.322122,-2.039672,5.031559,-2.097255,-0.510582,8.472728,-8.435791,6.197424,6.772441,6.271304,4.545892,-2.206922,4.817294,8.173988,8.207115,5.961448,7.612416,-5.579906,1.274810,8.427710,-6.156158,6.526773,-1.260632,9.747053,5.914740,-2.755357,4.443164,5.081435,-0.545471,5.561649,-3.132355,-9.695238,-6.000212,-7.596798,3.700023,-5.210576,-9.827936,-4.399770,-0.068492,-0.698830,-4.914593,-2.282615,-3.766568,-2.230746,4.572188,-8.250214,5.542677,3.423605,3.270135,7.635342,1.131320,-8.410828,1.827756,1.278705,9.590934,7.829899,-6.166311,0.781261,-8.589575,-6.755047], dtype = "float64")#candidate|3212|(1287,)|const|float64
const_3213 = relay.const([7,1,-8,6,-2,10,-5,2,-10,7,8,-1,-6,10,-7,1,4,5,9,-5,2,-6,2,-1,6,4,-10,6,5,-5,9,-8,8,-5,5,-9,-5,5,2,10,6,4,10,-1,8,-7,1,-9,3,7,4,-6,-8,6,9,-10,3,-10,-7,-8,-6,-9,-2,-8,-2,2,1,-7,-1,1,-1,6,8,-7,-6,10,-9,10,9,8,-5,9,2,-6,-9,4,1,-5,3,-4,6,2,-4,9,-2,-5,1,4,-8,-4,-1,-8,-8,1,-3,-10,-10,-4,-5,-6,-2,-6,4,6,-4,10,1,-6,-1,10,-4,2,-5,6,3,-8,4,-8,8,2,-4,-5,-2,-4,10,6,-6,-5,7,2,-3,5,-6,8,8,-4,-4,-9,-2,7,7,-3,4,-6,9,-10,-10,-2,9,10,1,2,-5,-10,-4,-8,-10,5,-10,4,-9,-2,1,-7,5,2,3,9,-2,6,8,6,8,-2,4,-6,4,4,-5,8,8,5,-3,-1,7,-3,-5,3,-2,-2,2,-9,-9,2,6,3,1,7,-6,10,-8,-6,-4,8,5,4,9,4,8,9,9,8,-4,5,-3,-3,8,8,10,9,6,-1,-9,-1,2,-1,-6,10,-3,-9,-9,-1,-4,10,5,-9,7,7,6,2,-2,8,1,-7,4,3,10,2,-3,8,-4,-2,-7,-6,7,-3,-9,4,-3,-6,-8,-8,-5,2,3,-7,-9,9,-7,10,-2,-2,6,-3,-8,-3,10,-5,-4,-2,-9,7,9,3,-10,10,8,3,8,2,-6,2,-8,8,2,-10,-2,-8,-2,7,-3,-6,-6,4,4,10,3,-6,7,-5,-8,1,-4,1,9,2,4,5,-6,6,7,9,-7,2,-1,-6,-4,8,-5,7,-6,10,-4,2,5,1,-5,1,7,8,2,6,-1,5,-5,4,3,3,-8,-9,-4,-3,1,1,-9,6,2,-7,-8,3,-7,5,8,7,-5,-8,-7,8,-7,5,-7,-7,-3,-6,-7,4,-5,-3,-9,10,9,10,9,3,6,-1,-9,6,1,4,-10,-3,9,7,-10,-9,2,-4,-7,6,7,8,6,-7,-5,-6,-1,-9,6,-6,2,-3,7,5,8,-9,9,-8,-5,-1,-6,-5,-5,-7,10,-5,-1,7,10,3,-3,1,-2,-4,-6,7,-3,10,7,-9,1,9,4,9,8,-2,-4,3,-3,-5,4,-2,-4,-3,10,-2,-7,2,-9,-5,-2,-7,1,-4,-7,-5,1,-7,10,10,3,-10,4,-2,-4,9,-4,-4,-6,-1,-9,5,-4,9,-4,1,-10,8,4,7,6,1,4,-7,6,-5,-2,7,5,-9,4,6,2,9,1,1,-4,7,2,8,2,2,-6,-2,-4,9,3,-3,-9,-3,10,10,-10,2,1,-9,3,-8,2,-1,-1,8,8,-10,-6,9,-7,-2,6,-7,3,-1,-9,7,-9,10,1,-3,-9,-5,-6,-3,-5,-9,6,-9,4,-5,-1,4,1,9,2,-10,-4,6,-9,-2,1,-7,-9,-5,-8,-6,3,8,-4,5,-8,-4,9,-2,-8,-5,8,-5,-8,-8,1,7,3,-7,2,-2,-6,-5,-8,-7,3,-7,-4,8,3,8,1,7,1,-3,-5,-5,3,9,-9,2,-6,5,-1,2,8,-7,5,2,-7,1,2,-4,8,-8,8,10,-9,4,5,-4,-5,-3,5,8,-2,4,5,-9,-1,-9,-9,3,-4,-5,-4,-4,-2,-3,4,-8,10,-10,-10,-9,8,-10,-7,-4,-1,-9,-10,7,-10,8,2,2,-8,9,3,-8,6,-9,-10,-3,2,7,-5,-3,-5,-10,-6,10,-5,3,7,-9,9,7,9,-2,1,4,-6,-2,-7,-9,-5,9,10,-5,3,-1,4,-4,7,5,-5,-6,5,3,10,-4,-1,-4,5,7,5,-2,5,3,2,-1,-6,-10,-5,-2,-5,10,1,6,-5,-6,2,-1,-6,10,-4,-6,8,-3,9,7,-4,-1,-3,1,-3,-10,4,3,-8,7,3,-4,1,5,-5,-5,1,5,4,-4,2,-1,5,-8,8,7,-1,4,10,-2,-2,-5,-5,-9,-6,-6,-6,7,-3,-6,-10,-4,-6,3], dtype = "int64")#candidate|3213|(800,)|const|int64
call_3211 = relay.TupleGetItem(func_1696_call(relay.reshape(const_3212.astype('float64'), [1287,]), relay.reshape(const_3213.astype('int64'), [40, 20]), relay.reshape(const_3212.astype('float64'), [13, 11, 9]), ), 0)
call_3214 = relay.TupleGetItem(func_1700_call(relay.reshape(const_3212.astype('float64'), [1287,]), relay.reshape(const_3213.astype('int64'), [40, 20]), relay.reshape(const_3212.astype('float64'), [13, 11, 9]), ), 0)
output = relay.Tuple([call_3198,call_3211,const_3212,const_3213,])
output2 = relay.Tuple([call_3199,call_3214,const_3212,const_3213,])
func_3220 = relay.Function([], output)
mod['func_3220'] = func_3220
mod = relay.transform.InferType()(mod)
output = func_3220()
func_3221 = relay.Function([], output)
mutated_mod['func_3221'] = func_3221
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3304 = relay.var("var_3304", dtype = "float64", shape = (15, 13))#candidate|3304|(15, 13)|var|float64
var_3305 = relay.var("var_3305", dtype = "float64", shape = (15, 13))#candidate|3305|(15, 13)|var|float64
bop_3306 = relay.divide(var_3304.astype('float64'), relay.reshape(var_3305.astype('float64'), relay.shape_of(var_3304))) # shape=(15, 13)
output = relay.Tuple([bop_3306,])
output2 = relay.Tuple([bop_3306,])
func_3317 = relay.Function([var_3304,var_3305,], output)
mod['func_3317'] = func_3317
mod = relay.transform.InferType()(mod)
var_3318 = relay.var("var_3318", dtype = "float64", shape = (15, 13))#candidate|3318|(15, 13)|var|float64
var_3319 = relay.var("var_3319", dtype = "float64", shape = (15, 13))#candidate|3319|(15, 13)|var|float64
output = func_3317(var_3318,var_3319,)
func_3320 = relay.Function([var_3318,var_3319,], output)
mutated_mod['func_3320'] = func_3320
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3220_call = mod.get_global_var('func_3220')
func_3221_call = mutated_mod.get_global_var('func_3221')
call_3388 = relay.TupleGetItem(func_3220_call(), 0)
call_3389 = relay.TupleGetItem(func_3221_call(), 0)
var_3397 = relay.var("var_3397", dtype = "uint64", shape = (14, 2, 9))#candidate|3397|(14, 2, 9)|var|uint64
bop_3398 = relay.right_shift(call_3388.astype('int64'), relay.reshape(var_3397.astype('int64'), relay.shape_of(call_3388))) # shape=(14, 2, 9)
bop_3401 = relay.right_shift(call_3389.astype('int64'), relay.reshape(var_3397.astype('int64'), relay.shape_of(call_3389))) # shape=(14, 2, 9)
func_2254_call = mod.get_global_var('func_2254')
func_2256_call = mutated_mod.get_global_var('func_2256')
call_3402 = func_2254_call()
call_3403 = func_2254_call()
func_1853_call = mod.get_global_var('func_1853')
func_1857_call = mutated_mod.get_global_var('func_1857')
const_3405 = relay.const([True,True,False,False,True,True,False,False,True,False,True,False,True,False,True,True,True,False,True,False,True,True,True,False,False,False,True,True,True,False,True,False,True,True,False,False,True,False,False,False,False,False,False,True,False,True,False,False], dtype = "bool")#candidate|3405|(48,)|const|bool
call_3404 = func_1853_call(relay.reshape(const_3405.astype('bool'), [3, 2, 8]), relay.reshape(const_3405.astype('bool'), [3, 2, 8]), )
call_3406 = func_1853_call(relay.reshape(const_3405.astype('bool'), [3, 2, 8]), relay.reshape(const_3405.astype('bool'), [3, 2, 8]), )
func_3048_call = mod.get_global_var('func_3048')
func_3051_call = mutated_mod.get_global_var('func_3051')
var_3408 = relay.var("var_3408", dtype = "float32", shape = ())#candidate|3408|()|var|float32
var_3409 = relay.var("var_3409", dtype = "float32", shape = (60,))#candidate|3409|(60,)|var|float32
call_3407 = func_3048_call(relay.reshape(var_3408.astype('float32'), []), relay.reshape(var_3409.astype('float32'), [3, 4, 5]), )
call_3410 = func_3048_call(relay.reshape(var_3408.astype('float32'), []), relay.reshape(var_3409.astype('float32'), [3, 4, 5]), )
var_3413 = relay.var("var_3413", dtype = "uint64", shape = (14, 2, 9))#candidate|3413|(14, 2, 9)|var|uint64
bop_3414 = relay.greater_equal(var_3397.astype('bool'), relay.reshape(var_3413.astype('bool'), relay.shape_of(var_3397))) # shape=(14, 2, 9)
func_1523_call = mod.get_global_var('func_1523')
func_1527_call = mutated_mod.get_global_var('func_1527')
var_3418 = relay.var("var_3418", dtype = "int64", shape = (800,))#candidate|3418|(800,)|var|int64
call_3417 = relay.TupleGetItem(func_1523_call(relay.reshape(var_3408.astype('float64'), []), relay.reshape(var_3418.astype('int64'), [800,]), ), 2)
call_3419 = relay.TupleGetItem(func_1527_call(relay.reshape(var_3408.astype('float64'), []), relay.reshape(var_3418.astype('int64'), [800,]), ), 2)
output = relay.Tuple([bop_3398,call_3402,call_3404,const_3405,call_3407,var_3408,var_3409,bop_3414,call_3417,var_3418,])
output2 = relay.Tuple([bop_3401,call_3403,call_3406,const_3405,call_3410,var_3408,var_3409,bop_3414,call_3419,var_3418,])
func_3421 = relay.Function([var_3397,var_3408,var_3409,var_3413,var_3418,], output)
mod['func_3421'] = func_3421
mod = relay.transform.InferType()(mod)
var_3422 = relay.var("var_3422", dtype = "uint64", shape = (14, 2, 9))#candidate|3422|(14, 2, 9)|var|uint64
var_3423 = relay.var("var_3423", dtype = "float32", shape = ())#candidate|3423|()|var|float32
var_3424 = relay.var("var_3424", dtype = "float32", shape = (60,))#candidate|3424|(60,)|var|float32
var_3425 = relay.var("var_3425", dtype = "uint64", shape = (14, 2, 9))#candidate|3425|(14, 2, 9)|var|uint64
var_3426 = relay.var("var_3426", dtype = "int64", shape = (800,))#candidate|3426|(800,)|var|int64
output = func_3421(var_3422,var_3423,var_3424,var_3425,var_3426,)
func_3427 = relay.Function([var_3422,var_3423,var_3424,var_3425,var_3426,], output)
mutated_mod['func_3427'] = func_3427
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2201_call = mod.get_global_var('func_2201')
func_2203_call = mutated_mod.get_global_var('func_2203')
call_3447 = func_2201_call()
call_3448 = func_2201_call()
var_3470 = relay.var("var_3470", dtype = "uint64", shape = (14, 2, 9))#candidate|3470|(14, 2, 9)|var|uint64
bop_3471 = relay.minimum(call_3447.astype('int16'), relay.reshape(var_3470.astype('int16'), relay.shape_of(call_3447))) # shape=(14, 2, 9)
bop_3474 = relay.minimum(call_3448.astype('int16'), relay.reshape(var_3470.astype('int16'), relay.shape_of(call_3448))) # shape=(14, 2, 9)
bop_3475 = relay.logical_xor(call_3447.astype('int32'), relay.reshape(bop_3471.astype('int32'), relay.shape_of(call_3447))) # shape=(14, 2, 9)
bop_3478 = relay.logical_xor(call_3448.astype('int32'), relay.reshape(bop_3474.astype('int32'), relay.shape_of(call_3448))) # shape=(14, 2, 9)
bop_3480 = relay.less_equal(bop_3475.astype('bool'), relay.reshape(bop_3471.astype('bool'), relay.shape_of(bop_3475))) # shape=(14, 2, 9)
bop_3483 = relay.less_equal(bop_3478.astype('bool'), relay.reshape(bop_3474.astype('bool'), relay.shape_of(bop_3478))) # shape=(14, 2, 9)
uop_3497 = relay.atan(var_3470.astype('float32')) # shape=(14, 2, 9)
output = relay.Tuple([bop_3480,uop_3497,])
output2 = relay.Tuple([bop_3483,uop_3497,])
F = relay.Function([var_3470,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_3470,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_3470= np.array([[[10,2,5,-6,-4,-5,10,2,-10],[6,5,-1,7,9,-6,7,-4,3]],[[9,-10,8,-7,-5,-2,2,-8,-1],[5,9,-1,6,-2,-1,10,4,-2]],[[-9,3,-10,8,-5,10,-7,6,-8],[-2,9,7,-1,-9,-8,9,9,-1]],[[7,2,8,-9,-8,-3,-4,-3,1],[2,-6,8,1,3,-9,1,-4,9]],[[-7,-6,-3,-1,6,-3,-3,-10,7],[5,5,-10,-2,10,5,7,8,-7]],[[6,2,-2,-10,10,-6,-8,-5,-10],[-7,5,8,7,-10,-3,-7,-4,1]],[[-4,1,-1,-10,-7,-3,-1,9,8],[-4,7,1,4,6,-9,-6,-8,-6]],[[5,9,3,10,2,10,1,6,-1],[-5,-7,2,8,8,4,-4,-9,2]],[[-4,-8,2,-6,-5,8,-1,10,5],[-3,-10,8,4,5,-4,-7,-9,-5]],[[-6,-3,-7,-4,5,-6,8,5,10],[-5,5,8,-9,10,-4,9,9,-9]],[[-5,5,-9,-4,2,-4,-1,7,-1],[7,-3,-7,3,-5,10,-7,6,-8]],[[-2,-1,-10,-7,6,-8,2,-6,-2],[10,-9,-8,-8,5,-6,1,3,-2]],[[-9,-3,4,1,-7,-1,-9,6,5],[-8,-6,8,-4,-2,1,10,-5,-4]],[[-6,-5,3,4,6,-10,4,5,-1],[-4,4,-3,-9,6,8,3,6,-1]]], dtype='uint64')
module1.set_input('var_3470', input_3470)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_3470, )
res3 = intrp3.evaluate()(input_3470, )
res4 = intrp4.evaluate()(input_3470, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
module5.set_input('var_3470', input_3470)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_3470, )
res7 = intrp7.evaluate()(input_3470, )
res8 = intrp8.evaluate()(input_3470, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
module9.set_input('var_3470', input_3470)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_3470, )
res11 = intrp11.evaluate()(input_3470, )
res12 = intrp12.evaluate()(input_3470, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
module13.set_input('var_3470', input_3470)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_3470, )
res15 = intrp15.evaluate()(input_3470, )
res16 = intrp16.evaluate()(input_3470, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
module17.set_input('var_3470', input_3470)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_3470, )
res19 = intrp19.evaluate()(input_3470, )
res20 = intrp20.evaluate()(input_3470, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
module21.set_input('var_3470', input_3470)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_3470, )
res23 = intrp23.evaluate()(input_3470, )
res24 = intrp24.evaluate()(input_3470, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()

'''39: TVMFuncCall
38: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
37: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
36: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
35: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
34: tvm::transform::Pass::operator()(tvm::IRModule) const
33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
31: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
30: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
29: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
28: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
27: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
26: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
25: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
24: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
23: _ZN3tvm5relay16MixedModeMutato
22: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
21: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
20: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
19: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
18: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
17: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
16: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
15: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
14: _ZN3tvm5relay16MixedModeMutato
13: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
12: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
11: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
10: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
9: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
8: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
7: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
6: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
5: tvm::transform::Pass::operator()(tvm::IRModule) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
0: tvm::DiagnosticContext::Render()

'''