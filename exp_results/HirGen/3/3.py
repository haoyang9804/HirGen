import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_24 = relay.var("var_24", dtype = "int32", shape = ())#candidate|24|()|var|int32
var_25 = relay.var("var_25", dtype = "int32", shape = (12, 10))#candidate|25|(12, 10)|var|int32
bop_26 = relay.bitwise_or(var_24.astype('int32'), var_25.astype('int32')) # shape=(12, 10)
var_41 = relay.var("var_41", dtype = "int32", shape = (15, 2, 15))#candidate|41|(15, 2, 15)|var|int32
bop_42 = relay.floor_divide(var_24.astype('float64'), var_41.astype('float64')) # shape=(15, 2, 15)
output = relay.Tuple([bop_26,bop_42,])
output2 = relay.Tuple([bop_26,bop_42,])
func_46 = relay.Function([var_24,var_25,var_41,], output)
mod['func_46'] = func_46
mod = relay.transform.InferType()(mod)
mutated_mod['func_46'] = func_46
mutated_mod = relay.transform.InferType()(mutated_mod)
func_46_call = mutated_mod.get_global_var('func_46')
var_48 = relay.var("var_48", dtype = "int32", shape = ())#candidate|48|()|var|int32
var_49 = relay.var("var_49", dtype = "int32", shape = (12, 10))#candidate|49|(12, 10)|var|int32
var_50 = relay.var("var_50", dtype = "int32", shape = (15, 2, 15))#candidate|50|(15, 2, 15)|var|int32
call_47 = func_46_call(var_48,var_49,var_50,)
output = call_47
func_51 = relay.Function([var_48,var_49,var_50,], output)
mutated_mod['func_51'] = func_51
mutated_mod = relay.transform.InferType()(mutated_mod)
var_95 = relay.var("var_95", dtype = "int16", shape = (10, 10, 2))#candidate|95|(10, 10, 2)|var|int16
var_96 = relay.var("var_96", dtype = "int16", shape = (10, 10, 2))#candidate|96|(10, 10, 2)|var|int16
bop_97 = relay.left_shift(var_95.astype('int16'), relay.reshape(var_96.astype('int16'), relay.shape_of(var_95))) # shape=(10, 10, 2)
func_46_call = mod.get_global_var('func_46')
func_51_call = mutated_mod.get_global_var('func_51')
var_105 = relay.var("var_105", dtype = "int32", shape = ())#candidate|105|()|var|int32
var_106 = relay.var("var_106", dtype = "int32", shape = (120,))#candidate|106|(120,)|var|int32
var_107 = relay.var("var_107", dtype = "int32", shape = (450,))#candidate|107|(450,)|var|int32
call_104 = relay.TupleGetItem(func_46_call(relay.reshape(var_105.astype('int32'), []), relay.reshape(var_106.astype('int32'), [12, 10]), relay.reshape(var_107.astype('int32'), [15, 2, 15]), ), 1)
call_108 = relay.TupleGetItem(func_51_call(relay.reshape(var_105.astype('int32'), []), relay.reshape(var_106.astype('int32'), [12, 10]), relay.reshape(var_107.astype('int32'), [15, 2, 15]), ), 1)
uop_114 = relay.atan(var_96.astype('float64')) # shape=(10, 10, 2)
bop_117 = relay.multiply(bop_97.astype('int8'), var_105.astype('int8')) # shape=(10, 10, 2)
uop_120 = relay.atanh(uop_114.astype('float64')) # shape=(10, 10, 2)
uop_122 = relay.tan(var_107.astype('float64')) # shape=(450,)
bop_124 = relay.logical_and(uop_122.astype('bool'), var_105.astype('bool')) # shape=(450,)
bop_127 = relay.minimum(bop_117.astype('uint8'), relay.reshape(uop_120.astype('uint8'), relay.shape_of(bop_117))) # shape=(10, 10, 2)
bop_133 = relay.mod(bop_127.astype('float32'), relay.reshape(bop_117.astype('float32'), relay.shape_of(bop_127))) # shape=(10, 10, 2)
bop_136 = relay.floor_divide(uop_120.astype('float32'), relay.reshape(bop_97.astype('float32'), relay.shape_of(uop_120))) # shape=(10, 10, 2)
var_140 = relay.var("var_140", dtype = "int32", shape = (120,))#candidate|140|(120,)|var|int32
bop_141 = relay.divide(var_106.astype('float32'), relay.reshape(var_140.astype('float32'), relay.shape_of(var_106))) # shape=(120,)
func_46_call = mod.get_global_var('func_46')
func_51_call = mutated_mod.get_global_var('func_51')
call_146 = relay.TupleGetItem(func_46_call(relay.reshape(var_105.astype('int32'), []), relay.reshape(var_106.astype('int32'), [12, 10]), relay.reshape(bop_124.astype('int32'), [15, 2, 15]), ), 0)
call_147 = relay.TupleGetItem(func_51_call(relay.reshape(var_105.astype('int32'), []), relay.reshape(var_106.astype('int32'), [12, 10]), relay.reshape(bop_124.astype('int32'), [15, 2, 15]), ), 0)
bop_148 = relay.bitwise_xor(bop_136.astype('uint8'), relay.reshape(bop_133.astype('uint8'), relay.shape_of(bop_136))) # shape=(10, 10, 2)
bop_152 = relay.greater_equal(bop_127.astype('bool'), relay.reshape(bop_97.astype('bool'), relay.shape_of(bop_127))) # shape=(10, 10, 2)
uop_155 = relay.cosh(uop_114.astype('float64')) # shape=(10, 10, 2)
bop_157 = relay.maximum(bop_148.astype('uint32'), relay.reshape(var_96.astype('uint32'), relay.shape_of(bop_148))) # shape=(10, 10, 2)
uop_160 = relay.erf(uop_114.astype('float64')) # shape=(10, 10, 2)
bop_164 = relay.bitwise_and(bop_157.astype('int16'), relay.reshape(bop_152.astype('int16'), relay.shape_of(bop_157))) # shape=(10, 10, 2)
uop_167 = relay.asin(uop_114.astype('float64')) # shape=(10, 10, 2)
var_173 = relay.var("var_173", dtype = "uint8", shape = (10, 10, 2))#candidate|173|(10, 10, 2)|var|uint8
bop_174 = relay.add(bop_148.astype('uint32'), relay.reshape(var_173.astype('uint32'), relay.shape_of(bop_148))) # shape=(10, 10, 2)
uop_182 = relay.log10(uop_160.astype('float64')) # shape=(10, 10, 2)
uop_187 = relay.sqrt(bop_127.astype('float32')) # shape=(10, 10, 2)
bop_192 = relay.less_equal(uop_182.astype('bool'), relay.reshape(bop_136.astype('bool'), relay.shape_of(uop_182))) # shape=(10, 10, 2)
const_205 = relay.const([[[1.670205,9.605104],[-6.201245,-8.604140],[-3.064931,-7.562815],[9.419785,-4.693820],[7.979194,0.406889],[7.556376,-3.191807],[-5.155934,0.970738],[-4.167769,-8.932764],[8.969655,0.036479],[-4.425582,-2.471264]],[[-5.208265,1.953857],[-4.335159,9.679033],[1.693139,0.031641],[9.276487,8.669962],[9.063614,8.085870],[7.940873,-5.585958],[7.123067,-9.185520],[0.450224,2.174159],[-2.657473,0.566984],[-2.100896,-1.980332]],[[-2.542544,-2.457954],[2.093051,4.169168],[-8.797740,-3.186107],[-9.661786,9.357053],[7.519725,-5.048645],[-3.624618,-7.560630],[-0.810728,-2.547453],[-2.099967,-1.721791],[-1.191198,7.256926],[4.118210,0.802263]],[[9.426797,6.944802],[-2.211424,-3.986182],[6.258392,-9.494600],[-5.401043,-6.458417],[-2.281755,2.522698],[4.725516,5.553870],[-1.761950,-7.884062],[-3.530186,-9.112371],[9.806703,0.352326],[-7.312406,2.843099]],[[-6.801563,5.581658],[-8.511899,7.477936],[-3.482484,-9.928847],[2.043957,-1.854871],[-4.494379,4.457644],[-2.410155,-8.212357],[4.062505,5.505787],[1.906550,3.102411],[-0.467488,-5.413118],[-2.418395,4.450327]],[[-8.812497,6.023270],[-7.777281,-5.467496],[-9.675626,6.177772],[4.270024,-5.975838],[0.997336,-8.170126],[3.491465,6.304506],[-1.347867,-6.183700],[2.062941,-6.297120],[0.424606,3.414719],[6.624180,-8.966411]],[[3.978870,-3.702865],[-4.920061,-2.664657],[-0.255687,-1.118381],[-2.989863,2.291859],[-9.298486,-6.457996],[3.111052,2.288783],[-4.112113,-7.107074],[-0.290932,5.721074],[-0.068204,-6.431170],[-5.309307,9.791417]],[[3.690842,-0.197374],[0.832960,4.925091],[-6.992908,2.180875],[-5.028575,-1.634662],[-7.796348,-6.348575],[-3.167558,-9.772492],[8.538358,3.394414],[9.568765,-9.925132],[-1.813659,4.311141],[-1.125219,1.167916]],[[-9.184557,-2.576666],[-6.236210,8.985504],[-1.204286,9.432495],[4.873784,2.655696],[2.602435,-1.663547],[9.968415,2.934100],[-2.512005,7.377130],[9.680040,5.240724],[-2.719638,-8.837833],[-5.195513,7.411523]],[[4.322363,3.418134],[-5.847298,8.937370],[5.248936,8.570260],[-9.860601,0.231670],[3.324630,0.669973],[7.540593,-7.707542],[9.770027,-4.056322],[-3.313520,-8.699566],[2.840411,-3.979390],[-1.546466,9.056748]]], dtype = "float64")#candidate|205|(10, 10, 2)|const|float64
bop_206 = relay.equal(uop_114.astype('bool'), relay.reshape(const_205.astype('bool'), relay.shape_of(uop_114))) # shape=(10, 10, 2)
output = relay.Tuple([call_104,bop_124,bop_141,call_146,uop_155,bop_164,uop_167,bop_174,uop_187,bop_192,bop_206,])
output2 = relay.Tuple([call_108,bop_124,bop_141,call_147,uop_155,bop_164,uop_167,bop_174,uop_187,bop_192,bop_206,])
func_211 = relay.Function([var_95,var_96,var_105,var_106,var_107,var_140,var_173,], output)
mod['func_211'] = func_211
mod = relay.transform.InferType()(mod)
var_212 = relay.var("var_212", dtype = "int16", shape = (10, 10, 2))#candidate|212|(10, 10, 2)|var|int16
var_213 = relay.var("var_213", dtype = "int16", shape = (10, 10, 2))#candidate|213|(10, 10, 2)|var|int16
var_214 = relay.var("var_214", dtype = "int32", shape = ())#candidate|214|()|var|int32
var_215 = relay.var("var_215", dtype = "int32", shape = (120,))#candidate|215|(120,)|var|int32
var_216 = relay.var("var_216", dtype = "int32", shape = (450,))#candidate|216|(450,)|var|int32
var_217 = relay.var("var_217", dtype = "int32", shape = (120,))#candidate|217|(120,)|var|int32
var_218 = relay.var("var_218", dtype = "uint8", shape = (10, 10, 2))#candidate|218|(10, 10, 2)|var|uint8
output = func_211(var_212,var_213,var_214,var_215,var_216,var_217,var_218,)
func_219 = relay.Function([var_212,var_213,var_214,var_215,var_216,var_217,var_218,], output)
mutated_mod['func_219'] = func_219
mutated_mod = relay.transform.InferType()(mutated_mod)
var_223 = relay.var("var_223", dtype = "uint16", shape = ())#candidate|223|()|var|uint16
var_224 = relay.var("var_224", dtype = "uint16", shape = (13,))#candidate|224|(13,)|var|uint16
bop_225 = relay.left_shift(var_223.astype('uint16'), var_224.astype('uint16')) # shape=(13,)
output = bop_225
output2 = bop_225
func_246 = relay.Function([var_223,var_224,], output)
mod['func_246'] = func_246
mod = relay.transform.InferType()(mod)
var_247 = relay.var("var_247", dtype = "uint16", shape = ())#candidate|247|()|var|uint16
var_248 = relay.var("var_248", dtype = "uint16", shape = (13,))#candidate|248|(13,)|var|uint16
output = func_246(var_247,var_248,)
func_249 = relay.Function([var_247,var_248,], output)
mutated_mod['func_249'] = func_249
mutated_mod = relay.transform.InferType()(mutated_mod)
var_303 = relay.var("var_303", dtype = "int32", shape = (12, 15, 3))#candidate|303|(12, 15, 3)|var|int32
var_304 = relay.var("var_304", dtype = "int32", shape = (12, 15, 3))#candidate|304|(12, 15, 3)|var|int32
bop_305 = relay.not_equal(var_303.astype('bool'), relay.reshape(var_304.astype('bool'), relay.shape_of(var_303))) # shape=(12, 15, 3)
uop_309 = relay.atanh(bop_305.astype('float64')) # shape=(12, 15, 3)
var_311 = relay.var("var_311", dtype = "float64", shape = (12, 15, 3))#candidate|311|(12, 15, 3)|var|float64
bop_312 = relay.less_equal(uop_309.astype('bool'), relay.reshape(var_311.astype('bool'), relay.shape_of(uop_309))) # shape=(12, 15, 3)
uop_315 = relay.log(bop_312.astype('float32')) # shape=(12, 15, 3)
func_246_call = mod.get_global_var('func_246')
func_249_call = mutated_mod.get_global_var('func_249')
var_318 = relay.var("var_318", dtype = "uint16", shape = ())#candidate|318|()|var|uint16
const_319 = relay.const([-6,-7,-8,9,-2,9,7,4,1,-1,1,5,10], dtype = "uint16")#candidate|319|(13,)|const|uint16
call_317 = func_246_call(relay.reshape(var_318.astype('uint16'), []), relay.reshape(const_319.astype('uint16'), [13,]), )
call_320 = func_246_call(relay.reshape(var_318.astype('uint16'), []), relay.reshape(const_319.astype('uint16'), [13,]), )
func_246_call = mod.get_global_var('func_246')
func_249_call = mutated_mod.get_global_var('func_249')
call_325 = func_246_call(relay.reshape(var_318.astype('uint16'), []), relay.reshape(call_317.astype('uint16'), [13,]), )
call_326 = func_246_call(relay.reshape(var_318.astype('uint16'), []), relay.reshape(call_317.astype('uint16'), [13,]), )
output = relay.Tuple([uop_315,call_317,var_318,const_319,call_325,])
output2 = relay.Tuple([uop_315,call_320,var_318,const_319,call_326,])
func_327 = relay.Function([var_303,var_304,var_311,var_318,], output)
mod['func_327'] = func_327
mod = relay.transform.InferType()(mod)
var_328 = relay.var("var_328", dtype = "int32", shape = (12, 15, 3))#candidate|328|(12, 15, 3)|var|int32
var_329 = relay.var("var_329", dtype = "int32", shape = (12, 15, 3))#candidate|329|(12, 15, 3)|var|int32
var_330 = relay.var("var_330", dtype = "float64", shape = (12, 15, 3))#candidate|330|(12, 15, 3)|var|float64
var_331 = relay.var("var_331", dtype = "uint16", shape = ())#candidate|331|()|var|uint16
output = func_327(var_328,var_329,var_330,var_331,)
func_332 = relay.Function([var_328,var_329,var_330,var_331,], output)
mutated_mod['func_332'] = func_332
mutated_mod = relay.transform.InferType()(mutated_mod)
var_375 = relay.var("var_375", dtype = "uint8", shape = (10, 2, 13))#candidate|375|(10, 2, 13)|var|uint8
var_376 = relay.var("var_376", dtype = "uint8", shape = (10, 2, 13))#candidate|376|(10, 2, 13)|var|uint8
bop_377 = relay.logical_xor(var_375.astype('uint8'), relay.reshape(var_376.astype('uint8'), relay.shape_of(var_375))) # shape=(10, 2, 13)
func_211_call = mod.get_global_var('func_211')
func_219_call = mutated_mod.get_global_var('func_219')
var_381 = relay.var("var_381", dtype = "int16", shape = (200,))#candidate|381|(200,)|var|int16
const_382 = relay.const(-2, dtype = "int32")#candidate|382|()|const|int32
var_383 = relay.var("var_383", dtype = "int32", shape = (120,))#candidate|383|(120,)|var|int32
var_384 = relay.var("var_384", dtype = "int32", shape = (5, 90))#candidate|384|(5, 90)|var|int32
call_380 = relay.TupleGetItem(func_211_call(relay.reshape(var_381.astype('int16'), [10, 10, 2]), relay.reshape(var_381.astype('int16'), [10, 10, 2]), relay.reshape(const_382.astype('int32'), []), relay.reshape(var_383.astype('int32'), [120,]), relay.reshape(var_384.astype('int32'), [450,]), relay.reshape(var_383.astype('int32'), [120,]), relay.reshape(var_381.astype('uint8'), [10, 10, 2]), ), 5)
call_385 = relay.TupleGetItem(func_219_call(relay.reshape(var_381.astype('int16'), [10, 10, 2]), relay.reshape(var_381.astype('int16'), [10, 10, 2]), relay.reshape(const_382.astype('int32'), []), relay.reshape(var_383.astype('int32'), [120,]), relay.reshape(var_384.astype('int32'), [450,]), relay.reshape(var_383.astype('int32'), [120,]), relay.reshape(var_381.astype('uint8'), [10, 10, 2]), ), 5)
func_211_call = mod.get_global_var('func_211')
func_219_call = mutated_mod.get_global_var('func_219')
call_387 = relay.TupleGetItem(func_211_call(relay.reshape(var_381.astype('int16'), [10, 10, 2]), relay.reshape(call_380.astype('int16'), [10, 10, 2]), relay.reshape(const_382.astype('int32'), []), relay.reshape(var_383.astype('int32'), [120,]), relay.reshape(var_384.astype('int32'), [450,]), relay.reshape(var_383.astype('int32'), [120,]), relay.reshape(var_381.astype('uint8'), [10, 10, 2]), ), 5)
call_388 = relay.TupleGetItem(func_219_call(relay.reshape(var_381.astype('int16'), [10, 10, 2]), relay.reshape(call_380.astype('int16'), [10, 10, 2]), relay.reshape(const_382.astype('int32'), []), relay.reshape(var_383.astype('int32'), [120,]), relay.reshape(var_384.astype('int32'), [450,]), relay.reshape(var_383.astype('int32'), [120,]), relay.reshape(var_381.astype('uint8'), [10, 10, 2]), ), 5)
bop_397 = relay.bitwise_or(var_384.astype('uint32'), const_382.astype('uint32')) # shape=(5, 90)
bop_401 = relay.maximum(bop_377.astype('float32'), relay.reshape(var_375.astype('float32'), relay.shape_of(bop_377))) # shape=(10, 2, 13)
output = relay.Tuple([call_380,var_381,var_383,call_387,bop_397,bop_401,])
output2 = relay.Tuple([call_385,var_381,var_383,call_388,bop_397,bop_401,])
func_404 = relay.Function([var_375,var_376,var_381,var_383,var_384,], output)
mod['func_404'] = func_404
mod = relay.transform.InferType()(mod)
var_405 = relay.var("var_405", dtype = "uint8", shape = (10, 2, 13))#candidate|405|(10, 2, 13)|var|uint8
var_406 = relay.var("var_406", dtype = "uint8", shape = (10, 2, 13))#candidate|406|(10, 2, 13)|var|uint8
var_407 = relay.var("var_407", dtype = "int16", shape = (200,))#candidate|407|(200,)|var|int16
var_408 = relay.var("var_408", dtype = "int32", shape = (120,))#candidate|408|(120,)|var|int32
var_409 = relay.var("var_409", dtype = "int32", shape = (5, 90))#candidate|409|(5, 90)|var|int32
output = func_404(var_405,var_406,var_407,var_408,var_409,)
func_410 = relay.Function([var_405,var_406,var_407,var_408,var_409,], output)
mutated_mod['func_410'] = func_410
mutated_mod = relay.transform.InferType()(mutated_mod)
const_412 = relay.const(-4.507333, dtype = "float64")#candidate|412|()|const|float64
const_413 = relay.const([[6.535587,-0.511228,-3.138437,-5.154597,-4.264507,-9.344321,5.624010,6.907596,8.081191,8.830448,-4.388649,6.981643,-6.957927,5.759169],[-3.475241,9.031878,1.245395,0.749798,-2.518660,5.177908,-5.231843,0.235292,-8.125744,-6.360557,3.002297,-3.704578,4.505296,-1.775705],[-8.510637,6.423559,-3.495045,-2.384389,-2.999839,5.730212,0.451221,4.171528,-9.560127,-0.641183,-4.314369,-5.628609,-3.318113,5.789599],[-7.622496,3.762710,6.669731,7.310249,4.414160,-1.870804,5.449949,-0.761527,-8.305324,-5.371063,-8.732517,3.235471,-6.066943,2.443179],[-1.525154,-7.203316,-9.838277,4.695332,-6.267715,6.059963,4.787192,1.812980,-5.254617,5.637765,-9.630600,8.412982,-3.151190,6.577092],[9.309241,0.393888,8.828547,-2.187698,5.050209,8.612679,7.706563,3.044323,-9.558926,8.291938,-5.582586,1.645668,7.901548,-0.252745],[8.043806,-4.416717,-5.224750,6.526634,0.739728,2.313381,1.191877,1.921203,6.564104,3.232069,5.556289,-4.968910,-7.647093,-7.841240],[3.867619,5.964331,-8.304005,6.728350,-2.469971,-3.492071,-6.648530,-6.060597,0.023780,-7.796822,7.277965,-3.273954,8.510657,-6.898397],[9.180550,8.547082,8.769048,0.703203,-1.155295,-3.323387,4.732740,-2.735771,-0.519323,-5.728742,-2.344776,9.443866,-4.463720,1.301248],[-7.565976,2.006592,-0.142188,-1.879753,-3.086348,-6.087233,-8.354318,8.002354,1.466939,-4.788591,-6.679294,3.468377,8.165223,-3.621977]], dtype = "float64")#candidate|413|(10, 14)|const|float64
bop_414 = relay.maximum(const_412.astype('float64'), const_413.astype('float64')) # shape=(10, 14)
func_46_call = mod.get_global_var('func_46')
func_51_call = mutated_mod.get_global_var('func_51')
const_425 = relay.const([-8,-9,4,5,-8,-4,-4,-2,2,-7,-7,-3,-3,2,-6,2,-3,-8,-2,6,-5,-2,-5,10,-8,-10,-9,-7,-2,10,2,-1,-5,-4,1,7,-10,6,7,7,-7,10,10,8,-6,9,2,-5,-10,-4,-8,-8,1,-6,-2,-4,9,-4,-3,10,-1,-9,10,10,2,-10,6,-1,-2,7,-1,2,7,1,-8,-9,-10,2,2,-2,7,-7,2,1,-6,-7,-1,6,-6,-8,-8,1,-5,1,-8,-4,-5,-9,-10,10,-1,2,7,-2,5,-5,-6,2,-3,9,-6,-6,3,-7,-8,-8,3,2,7,2], dtype = "int32")#candidate|425|(120,)|const|int32
const_426 = relay.const([6,6,-1,1,-10,-2,-7,4,7,-10,-10,2,-2,4,-3,-3,-4,-7,10,4,6,-6,10,-8,9,-9,-8,3,-2,-5,-3,1,9,-2,-9,-7,-2,-9,-3,7,-2,3,9,-1,-2,-3,-7,4,-6,3,3,-10,4,-9,-6,-1,5,10,1,-5,8,-9,6,-10,-10,-8,4,-1,-7,5,7,4,1,7,5,-6,2,7,1,-10,10,-5,6,-3,6,-8,8,-4,6,-3,-5,-4,-6,-5,-8,-7,5,-5,8,7,9,-7,-7,-6,-4,4,9,6,-6,-2,8,-5,1,-7,7,3,1,-3,-2,-1,-7,6,10,-1,3,-5,1,7,9,3,7,-1,7,-7,2,-5,-5,-7,5,5,1,10,-7,6,-10,-1,-4,-5,8,-9,-4,-1,9,5,-6,-1,-10,1,-7,-5,-5,-4,-3,-1,5,-1,-6,9,2,9,-6,-7,1,-8,-4,-5,-3,7,10,-5,7,3,10,-1,7,10,-10,2,4,10,-6,6,-6,3,10,10,-8,3,6,-10,-3,8,7,5,-3,1,1,-7,2,-2,10,10,-6,5,6,-9,-6,-2,-9,8,5,-9,9,-3,8,1,-7,7,1,-7,7,-6,3,8,9,5,-5,10,2,3,9,1,5,1,-2,-5,-6,-4,2,-4,9,-7,-4,10,-2,-8,-9,1,7,-1,2,-9,-10,-1,6,5,3,-4,1,-4,7,8,-3,9,2,-10,-10,5,4,4,1,7,-3,2,-5,9,-10,-7,7,-2,9,-3,1,-9,-6,-6,10,3,-4,-7,1,10,-4,-4,-4,10,-8,-10,-3,-5,10,9,5,-5,-7,8,10,-1,7,-7,-2,4,-2,-9,5,-7,3,7,6,-9,-6,-4,6,-5,1,-6,1,-10,-6,9,5,8,-9,-8,-9,-1,3,-3,1,4,2,-4,1,7,5,9,-1,7,-4,-9,9,7,-5,3,-10,9,-6,-6,-5,4,-10,-9,2,3,1,6,-3,-4,-3,6,3,-7,6,-3,6,-4,-10,7,1,5,-1,-3,-4,-5,-5,2,6,-4,3,-5,5,-5,-2,-9,2,4,7,-10,-6,1,5,7,5,4,-1,6,10,-4,-6,5,9,5,-9,-8,-1,-6,2,-8,7,4,-2,-7,-4,5,4,-1,-1,10,1,-5,-6,-9,-4,-7,8,8,-4,4,-6,1], dtype = "int32")#candidate|426|(450,)|const|int32
call_424 = relay.TupleGetItem(func_46_call(relay.reshape(const_412.astype('int32'), []), relay.reshape(const_425.astype('int32'), [12, 10]), relay.reshape(const_426.astype('int32'), [15, 2, 15]), ), 0)
call_427 = relay.TupleGetItem(func_51_call(relay.reshape(const_412.astype('int32'), []), relay.reshape(const_425.astype('int32'), [12, 10]), relay.reshape(const_426.astype('int32'), [15, 2, 15]), ), 0)
output = relay.Tuple([bop_414,call_424,const_425,const_426,])
output2 = relay.Tuple([bop_414,call_427,const_425,const_426,])
func_434 = relay.Function([], output)
mod['func_434'] = func_434
mod = relay.transform.InferType()(mod)
output = func_434()
func_435 = relay.Function([], output)
mutated_mod['func_435'] = func_435
mutated_mod = relay.transform.InferType()(mutated_mod)
var_446 = relay.var("var_446", dtype = "uint16", shape = ())#candidate|446|()|var|uint16
var_447 = relay.var("var_447", dtype = "uint16", shape = (10,))#candidate|447|(10,)|var|uint16
bop_448 = relay.not_equal(var_446.astype('bool'), var_447.astype('bool')) # shape=(10,)
func_327_call = mod.get_global_var('func_327')
func_332_call = mutated_mod.get_global_var('func_332')
const_452 = relay.const([3,-7,6,-10,6,-9,-6,2,8,5,9,-7,-8,7,4,-4,-4,9,-10,4,2,10,-2,8,-10,-7,6,-1,7,-6,7,-9,3,-1,-4,9,-10,4,1,-3,-6,9,2,-8,-7,-1,6,-7,7,-10,-5,-9,-7,-9,6,9,-10,-5,10,5,-8,4,-8,3,-9,8,-1,8,-1,-8,7,-8,8,3,-7,-7,-7,-8,-2,-2,-3,4,7,-6,1,5,1,-6,7,9,10,-8,7,-1,9,1,-4,-10,10,-7,-7,-8,-8,-7,6,10,2,-10,-5,9,4,8,6,9,1,7,-10,8,1,-2,1,-2,1,-3,5,-2,1,-9,7,5,3,8,8,3,1,-6,-7,-5,-10,-7,-10,6,-9,2,-2,-4,10,-10,5,-8,1,9,4,-8,-4,-1,-2,-8,1,-6,9,-10,1,-7,-5,3,1,-4,7,9,-7,-6,9,-1,-5,5,-9,3,9,6,-7,2,2,2,9,3,-4,-6,-4,-5,-4,-3,7,2,-5,2,9,7,9,3,5,-4,4,1,-7,-6,-7,5,-4,10,7,-9,-3,8,-8,-1,-6,1,7,7,-10,-6,-4,1,-7,-5,-2,-1,-1,-10,-9,-3,8,-6,-7,10,7,-4,-6,-9,5,-9,6,-3,-8,-9,6,3,-5,-8,3,-8,3,-3,7,3,-4,1,2,-1,9,-7,-10,-8,1,-7,-5,5,9,8,-10,9,3,5,8,-6,-6,3,-5,-2,6,-1,8,-8,5,-4,6,10,5,-5,-1,-9,3,-4,-2,5,10,10,3,5,-5,5,-4,3,10,2,8,-10,-5,3,5,-7,5,2,-7,-10,-8,4,-9,1,4,1,-7,6,7,9,-9,-6,-4,-4,5,-1,-6,5,3,-5,1,10,-8,10,-8,-7,5,-9,10,-10,-7,10,-8,-1,2,6,1,-3,-4,4,4,-7,3,-8,1,-9,-8,4,-3,7,-8,-1,10,-7,7,-8,-3,9,-5,8,-6,-6,4,-2,-2,4,-1,2,1,8,1,8,-1,9,-4,1,1,-4,-7,4,5,-3,5,8,5,3,-1,1,5,-9,-6,-9,-10,-6,1,-8,9,3,-7,1,6,-9,4,3,9,-10,-4,3,-6,-5,-8,3,6,-3,-6,4,-10,-3,2,-6,7,5,-7,-9,7,9,-7,-5,8,-4,4,-8,-1,-1,-4,4,-2,-7,7,-1,-10,-2,-5,-9,-4,-9,3,7,6,-8,4,6,-1,5,8,4,8,-6,2,-8,-8,-9,2,-6,-3,-3,-8,-10,-1,-1,-3,-9,-3,-6,10,-3,10,-9,7,5,4,4,-6,-3,1,7,8,-9,-3,-6,-10,9,-9,4,-8,6,8,1,4,2,7,1,7,6,4,1,9,4,10,5,-9,-7,-1,-1,-4,2,2,7,-3,9,3,1,-2,3], dtype = "int32")#candidate|452|(540,)|const|int32
call_451 = relay.TupleGetItem(func_327_call(relay.reshape(const_452.astype('int32'), [12, 15, 3]), relay.reshape(const_452.astype('int32'), [12, 15, 3]), relay.reshape(const_452.astype('float64'), [12, 15, 3]), relay.reshape(var_446.astype('uint16'), []), ), 2)
call_453 = relay.TupleGetItem(func_332_call(relay.reshape(const_452.astype('int32'), [12, 15, 3]), relay.reshape(const_452.astype('int32'), [12, 15, 3]), relay.reshape(const_452.astype('float64'), [12, 15, 3]), relay.reshape(var_446.astype('uint16'), []), ), 2)
bop_455 = relay.add(bop_448.astype('int8'), var_446.astype('int8')) # shape=(10,)
func_211_call = mod.get_global_var('func_211')
func_219_call = mutated_mod.get_global_var('func_219')
var_462 = relay.var("var_462", dtype = "int16", shape = (200,))#candidate|462|(200,)|var|int16
var_463 = relay.var("var_463", dtype = "int32", shape = (120,))#candidate|463|(120,)|var|int32
var_464 = relay.var("var_464", dtype = "int32", shape = (1, 450))#candidate|464|(1, 450)|var|int32
call_461 = relay.TupleGetItem(func_211_call(relay.reshape(var_462.astype('int16'), [10, 10, 2]), relay.reshape(var_462.astype('int16'), [10, 10, 2]), relay.reshape(var_446.astype('int32'), []), relay.reshape(var_463.astype('int32'), [120,]), relay.reshape(var_464.astype('int32'), [450,]), relay.reshape(var_463.astype('int32'), [120,]), relay.reshape(var_462.astype('uint8'), [10, 10, 2]), ), 9)
call_465 = relay.TupleGetItem(func_219_call(relay.reshape(var_462.astype('int16'), [10, 10, 2]), relay.reshape(var_462.astype('int16'), [10, 10, 2]), relay.reshape(var_446.astype('int32'), []), relay.reshape(var_463.astype('int32'), [120,]), relay.reshape(var_464.astype('int32'), [450,]), relay.reshape(var_463.astype('int32'), [120,]), relay.reshape(var_462.astype('uint8'), [10, 10, 2]), ), 9)
output = relay.Tuple([call_451,const_452,bop_455,call_461,var_462,var_463,var_464,])
output2 = relay.Tuple([call_453,const_452,bop_455,call_465,var_462,var_463,var_464,])
func_466 = relay.Function([var_446,var_447,var_462,var_463,var_464,], output)
mod['func_466'] = func_466
mod = relay.transform.InferType()(mod)
mutated_mod['func_466'] = func_466
mutated_mod = relay.transform.InferType()(mutated_mod)
func_466_call = mutated_mod.get_global_var('func_466')
var_468 = relay.var("var_468", dtype = "uint16", shape = ())#candidate|468|()|var|uint16
var_469 = relay.var("var_469", dtype = "uint16", shape = (10,))#candidate|469|(10,)|var|uint16
var_470 = relay.var("var_470", dtype = "int16", shape = (200,))#candidate|470|(200,)|var|int16
var_471 = relay.var("var_471", dtype = "int32", shape = (120,))#candidate|471|(120,)|var|int32
var_472 = relay.var("var_472", dtype = "int32", shape = (1, 450))#candidate|472|(1, 450)|var|int32
call_467 = func_466_call(var_468,var_469,var_470,var_471,var_472,)
output = call_467
func_473 = relay.Function([var_468,var_469,var_470,var_471,var_472,], output)
mutated_mod['func_473'] = func_473
mutated_mod = relay.transform.InferType()(mutated_mod)
var_499 = relay.var("var_499", dtype = "float64", shape = (1,))#candidate|499|(1,)|var|float64
var_500 = relay.var("var_500", dtype = "float64", shape = (14,))#candidate|500|(14,)|var|float64
bop_501 = relay.greater(var_499.astype('bool'), var_500.astype('bool')) # shape=(14,)
uop_505 = relay.sigmoid(var_500.astype('float64')) # shape=(14,)
bop_507 = relay.subtract(uop_505.astype('int64'), var_499.astype('int64')) # shape=(14,)
bop_510 = relay.minimum(bop_507.astype('int64'), var_499.astype('int64')) # shape=(14,)
var_513 = relay.var("var_513", dtype = "float64", shape = (14,))#candidate|513|(14,)|var|float64
bop_514 = relay.maximum(uop_505.astype('int8'), relay.reshape(var_513.astype('int8'), relay.shape_of(uop_505))) # shape=(14,)
var_517 = relay.var("var_517", dtype = "float64", shape = (14,))#candidate|517|(14,)|var|float64
bop_518 = relay.bitwise_or(var_513.astype('int64'), relay.reshape(var_517.astype('int64'), relay.shape_of(var_513))) # shape=(14,)
output = relay.Tuple([bop_501,bop_510,bop_514,bop_518,])
output2 = relay.Tuple([bop_501,bop_510,bop_514,bop_518,])
func_521 = relay.Function([var_499,var_500,var_513,var_517,], output)
mod['func_521'] = func_521
mod = relay.transform.InferType()(mod)
var_522 = relay.var("var_522", dtype = "float64", shape = (1,))#candidate|522|(1,)|var|float64
var_523 = relay.var("var_523", dtype = "float64", shape = (14,))#candidate|523|(14,)|var|float64
var_524 = relay.var("var_524", dtype = "float64", shape = (14,))#candidate|524|(14,)|var|float64
var_525 = relay.var("var_525", dtype = "float64", shape = (14,))#candidate|525|(14,)|var|float64
output = func_521(var_522,var_523,var_524,var_525,)
func_526 = relay.Function([var_522,var_523,var_524,var_525,], output)
mutated_mod['func_526'] = func_526
mutated_mod = relay.transform.InferType()(mutated_mod)
func_434_call = mod.get_global_var('func_434')
func_435_call = mutated_mod.get_global_var('func_435')
call_531 = relay.TupleGetItem(func_434_call(), 2)
call_532 = relay.TupleGetItem(func_435_call(), 2)
var_533 = relay.var("var_533", dtype = "int32", shape = (120,))#candidate|533|(120,)|var|int32
bop_534 = relay.power(call_531.astype('float32'), relay.reshape(var_533.astype('float32'), relay.shape_of(call_531))) # shape=(120,)
bop_537 = relay.power(call_532.astype('float32'), relay.reshape(var_533.astype('float32'), relay.shape_of(call_532))) # shape=(120,)
bop_542 = relay.multiply(bop_534.astype('int8'), relay.reshape(var_533.astype('int8'), relay.shape_of(bop_534))) # shape=(120,)
bop_545 = relay.multiply(bop_537.astype('int8'), relay.reshape(var_533.astype('int8'), relay.shape_of(bop_537))) # shape=(120,)
func_246_call = mod.get_global_var('func_246')
func_249_call = mutated_mod.get_global_var('func_249')
var_553 = relay.var("var_553", dtype = "uint16", shape = ())#candidate|553|()|var|uint16
const_554 = relay.const([2,1,1,8,7,5,-2,-8,3,3,4,5,2], dtype = "uint16")#candidate|554|(13,)|const|uint16
call_552 = func_246_call(relay.reshape(var_553.astype('uint16'), []), relay.reshape(const_554.astype('uint16'), [13,]), )
call_555 = func_246_call(relay.reshape(var_553.astype('uint16'), []), relay.reshape(const_554.astype('uint16'), [13,]), )
uop_556 = relay.cos(bop_542.astype('float64')) # shape=(120,)
uop_558 = relay.cos(bop_545.astype('float64')) # shape=(120,)
func_246_call = mod.get_global_var('func_246')
func_249_call = mutated_mod.get_global_var('func_249')
call_559 = func_246_call(relay.reshape(var_553.astype('uint16'), []), relay.reshape(call_552.astype('uint16'), [13,]), )
call_560 = func_246_call(relay.reshape(var_553.astype('uint16'), []), relay.reshape(call_552.astype('uint16'), [13,]), )
uop_562 = relay.log(uop_556.astype('float32')) # shape=(120,)
uop_564 = relay.log(uop_558.astype('float32')) # shape=(120,)
uop_565 = relay.log10(uop_556.astype('float64')) # shape=(120,)
uop_567 = relay.log10(uop_558.astype('float64')) # shape=(120,)
func_327_call = mod.get_global_var('func_327')
func_332_call = mutated_mod.get_global_var('func_332')
const_569 = relay.const([1,9,3,7,7,-4,1,-1,-6,9,6,-6,-6,-2,-2,6,-2,-9,5,1,-1,2,3,-6,-6,-1,-7,-7,-3,3,-3,3,4,-10,-9,4,8,-5,9,1,8,-10,-10,10,-5,3,4,5,7,8,8,9,7,-8,5,4,3,10,10,-1,5,-4,9,4,9,-3,3,5,-5,-8,4,6,7,-3,6,-3,9,7,-1,5,4,-8,-1,10,-8,6,2,9,10,8,9,6,-1,7,7,-3,-1,9,-4,8,7,3,-8,9,-6,3,-10,-5,-3,4,-6,10,-8,1,-7,-1,5,-6,-6,-10,-3,10,-3,6,-9,5,-7,-3,3,6,-3,8,1,-10,10,3,-6,-9,-10,-4,-5,-4,-3,5,9,7,8,-9,-9,10,-2,3,8,6,8,8,-8,-4,-9,6,-2,-9,6,1,-8,5,6,7,-3,-5,-4,2,5,-2,5,-2,1,-7,-1,4,-1,-9,-8,-2,-1,10,8,-7,8,-9,7,1,-3,5,-9,3,-8,9,-1,7,-6,9,-10,10,6,-4,1,9,6,-9,-10,6,-7,4,-6,1,-9,-7,-5,-1,-6,-1,2,2,3,4,-4,-3,-7,-8,-9,4,-7,1,10,4,6,-3,-7,-6,-6,6,-3,8,8,-5,-5,9,2,8,1,-9,9,-7,9,-7,-6,-3,-3,-10,-1,2,-4,1,-10,-1,1,9,-2,-6,-10,5,9,-6,3,5,-3,-9,9,-6,-9,1,-6,9,7,-10,2,6,5,4,-9,9,10,-2,10,-8,-4,-8,-9,8,-6,-6,4,-10,5,-5,4,8,-6,3,-8,-4,9,-1,-10,-6,-7,-5,-4,8,-8,4,10,6,-2,-1,-9,3,8,-6,-2,7,5,-10,8,8,2,-7,-6,8,3,10,-4,-10,6,-3,6,-10,1,-10,10,4,-2,6,-8,-5,6,3,-8,-4,-8,-5,-4,-7,-6,5,-7,-2,10,4,-2,8,-4,-10,5,7,1,-10,-8,2,-4,-2,6,9,-1,3,-1,3,-6,-8,-9,6,6,6,3,-7,-5,-7,4,6,-8,-9,3,-8,7,2,10,3,-4,-1,-7,1,9,4,5,-9,2,-3,1,4,7,1,3,-5,-5,1,5,7,-3,9,2,10,7,-10,5,6,1,-9,-5,1,-3,3,8,3,-2,9,4,9,3,10,5,-9,-7,-1,7,2,6,-7,7,6,-4,-5,-4,-10,6,-4,9,-7,4,-7,-2,8,-6,4,6,-5,7,-1,-6,6,2,-5,3,-7,10,7,-5,-3,1,6,-9,10,-3,-5,-1,-3,2,3,-9,-4,6,-2,10,2,3,1,-1,6,-1,4,-5,-4,-2,6,-7,10,-4,4,8,-7,8,-2,8,-2,2,-10,3,-6,1,6,-2,3,3,-2,-5,-3,-7,-1,-5,-4], dtype = "int32")#candidate|569|(540,)|const|int32
call_568 = relay.TupleGetItem(func_327_call(relay.reshape(const_569.astype('int32'), [12, 15, 3]), relay.reshape(const_569.astype('int32'), [12, 15, 3]), relay.reshape(const_569.astype('float64'), [12, 15, 3]), relay.reshape(var_553.astype('uint16'), []), ), 1)
call_570 = relay.TupleGetItem(func_332_call(relay.reshape(const_569.astype('int32'), [12, 15, 3]), relay.reshape(const_569.astype('int32'), [12, 15, 3]), relay.reshape(const_569.astype('float64'), [12, 15, 3]), relay.reshape(var_553.astype('uint16'), []), ), 1)
bop_571 = relay.floor_divide(uop_565.astype('float32'), relay.reshape(uop_556.astype('float32'), relay.shape_of(uop_565))) # shape=(120,)
bop_574 = relay.floor_divide(uop_567.astype('float32'), relay.reshape(uop_558.astype('float32'), relay.shape_of(uop_567))) # shape=(120,)
func_246_call = mod.get_global_var('func_246')
func_249_call = mutated_mod.get_global_var('func_249')
call_576 = func_246_call(relay.reshape(var_553.astype('uint16'), []), relay.reshape(call_552.astype('uint16'), [13,]), )
call_577 = func_246_call(relay.reshape(var_553.astype('uint16'), []), relay.reshape(call_552.astype('uint16'), [13,]), )
bop_578 = relay.logical_xor(uop_556.astype('uint16'), relay.reshape(bop_534.astype('uint16'), relay.shape_of(uop_556))) # shape=(120,)
bop_581 = relay.logical_xor(uop_558.astype('uint16'), relay.reshape(bop_537.astype('uint16'), relay.shape_of(uop_558))) # shape=(120,)
func_46_call = mod.get_global_var('func_46')
func_51_call = mutated_mod.get_global_var('func_51')
const_583 = relay.const([10,-6,4,4,-8,-3,1,-2,8,7,-1,2,-9,-3,8,6,1,10,-5,5,-5,10,-10,-3,8,-6,5,10,3,-10,-7,-1,-10,6,-7,-1,-1,10,-5,-2,1,3,8,-9,-7,1,7,4,5,5,1,6,-8,5,-9,8,7,-5,5,7,7,7,2,-1,1,10,-3,6,-5,5,-10,-4,-6,-1,7,4,5,-7,-1,5,4,4,2,-9,2,10,6,-10,-3,3,8,1,9,2,6,-1,-3,-8,-6,-1,-2,2,-5,2,3,5,3,7,-5,1,6,-2,9,-5,8,7,7,7,4,-9,5,10,-1,1,8,7,-5,5,10,1,6,-7,-7,-6,-4,-10,8,-6,-9,-6,10,-4,-4,-9,1,-4,9,-1,-6,9,-9,-6,9,7,-10,6,6,-4,-9,5,-6,6,-10,4,-3,5,-2,-2,-4,8,1,5,3,8,-4,-3,-3,8,9,9,-4,5,-5,8,5,-5,-1,-4,10,10,6,-6,4,2,5,5,-4,-5,7,-8,1,-9,-4,9,-6,7,2,-10,-7,-10,-4,2,-7,-8,-2,9,2,8,-4,9,5,1,-9,-8,3,-9,-4,4,-9,8,-1,-7,-6,8,-1,9,2,7,-8,10,-2,-6,-1,8,5,1,2,8,2,-9,2,1,5,-7,-3,-4,-7,1,-5,6,-4,5,-7,-5,8,2,-9,5,-2,-9,-9,-10,-5,2,10,9,9,10,-6,2,9,5,-8,-4,-3,5,-7,-8,-6,2,2,-9,-7,4,-6,-9,-4,-4,5,3,2,9,3,-2,10,4,-9,-1,-4,10,-5,2,3,10,-6,7,-10,-7,-6,3,-7,7,10,2,7,1,-1,9,-10,4,-3,6,-1,-8,6,-4,8,8,-3,3,10,-10,-8,-7,-2,-8,3,-10,-7,-1,2,5,-9,10,-3,10,9,-6,-2,9,3,-9,-1,1,9,-2,-7,3,-2,-6,7,8,-7,-5,7,-3,1,-9,2,10,-9,-6,-1,-2,3,-8,3,8,-2,1,9,2,-9,-2,-10,-6,-7,7,1,-9,-7,-7,-2,-2,-2,-6,10,-10,-10,10,5,8,8,9,5,6,-4,-4,-9,-3,-3,1,6,2,4,-5,-8,2,-10,-5,-9,-9,-3,-9,1,-5,-10,8,8,5,2,2,5,-7,-2,-2,-3,-4,-5,-1], dtype = "int32")#candidate|583|(450,)|const|int32
call_582 = relay.TupleGetItem(func_46_call(relay.reshape(var_553.astype('int32'), []), relay.reshape(uop_556.astype('int32'), [12, 10]), relay.reshape(const_583.astype('int32'), [15, 2, 15]), ), 0)
call_584 = relay.TupleGetItem(func_51_call(relay.reshape(var_553.astype('int32'), []), relay.reshape(uop_556.astype('int32'), [12, 10]), relay.reshape(const_583.astype('int32'), [15, 2, 15]), ), 0)
uop_587 = relay.acos(bop_578.astype('float64')) # shape=(120,)
uop_589 = relay.acos(bop_581.astype('float64')) # shape=(120,)
func_521_call = mod.get_global_var('func_521')
func_526_call = mutated_mod.get_global_var('func_526')
const_591 = relay.const([9.785812,-9.614487,-4.942822,-7.483334,-3.989907,-0.918323,1.498427,-7.581821,1.735745,6.673520,9.732165,-6.521183,-4.029514,4.070921], dtype = "float64")#candidate|591|(14,)|const|float64
call_590 = relay.TupleGetItem(func_521_call(relay.reshape(var_553.astype('float64'), [1,]), relay.reshape(const_591.astype('float64'), [14,]), relay.reshape(const_591.astype('float64'), [14,]), relay.reshape(const_591.astype('float64'), [14,]), ), 2)
call_592 = relay.TupleGetItem(func_526_call(relay.reshape(var_553.astype('float64'), [1,]), relay.reshape(const_591.astype('float64'), [14,]), relay.reshape(const_591.astype('float64'), [14,]), relay.reshape(const_591.astype('float64'), [14,]), ), 2)
uop_593 = relay.acosh(uop_556.astype('float64')) # shape=(120,)
uop_595 = relay.acosh(uop_558.astype('float64')) # shape=(120,)
uop_599 = relay.sigmoid(uop_587.astype('float32')) # shape=(120,)
uop_601 = relay.sigmoid(uop_589.astype('float32')) # shape=(120,)
bop_602 = relay.maximum(uop_562.astype('int8'), relay.reshape(uop_556.astype('int8'), relay.shape_of(uop_562))) # shape=(120,)
bop_605 = relay.maximum(uop_564.astype('int8'), relay.reshape(uop_558.astype('int8'), relay.shape_of(uop_564))) # shape=(120,)
func_404_call = mod.get_global_var('func_404')
func_410_call = mutated_mod.get_global_var('func_410')
var_608 = relay.var("var_608", dtype = "uint8", shape = (5, 52))#candidate|608|(5, 52)|var|uint8
var_609 = relay.var("var_609", dtype = "int16", shape = (200,))#candidate|609|(200,)|var|int16
call_607 = relay.TupleGetItem(func_404_call(relay.reshape(var_608.astype('uint8'), [10, 2, 13]), relay.reshape(var_608.astype('uint8'), [10, 2, 13]), relay.reshape(var_609.astype('int16'), [200,]), relay.reshape(uop_593.astype('int32'), [120,]), relay.reshape(const_583.astype('int32'), [5, 90]), ), 3)
call_610 = relay.TupleGetItem(func_410_call(relay.reshape(var_608.astype('uint8'), [10, 2, 13]), relay.reshape(var_608.astype('uint8'), [10, 2, 13]), relay.reshape(var_609.astype('int16'), [200,]), relay.reshape(uop_593.astype('int32'), [120,]), relay.reshape(const_583.astype('int32'), [5, 90]), ), 3)
bop_612 = relay.bitwise_and(uop_599.astype('int8'), relay.reshape(uop_556.astype('int8'), relay.shape_of(uop_599))) # shape=(120,)
bop_615 = relay.bitwise_and(uop_601.astype('int8'), relay.reshape(uop_558.astype('int8'), relay.shape_of(uop_601))) # shape=(120,)
uop_619 = relay.exp(bop_612.astype('float32')) # shape=(120,)
uop_621 = relay.exp(bop_615.astype('float32')) # shape=(120,)
bop_623 = relay.subtract(bop_612.astype('int64'), relay.reshape(bop_602.astype('int64'), relay.shape_of(bop_612))) # shape=(120,)
bop_626 = relay.subtract(bop_615.astype('int64'), relay.reshape(bop_605.astype('int64'), relay.shape_of(bop_615))) # shape=(120,)
output = relay.Tuple([call_552,var_553,const_554,call_559,call_568,const_569,bop_571,call_576,call_582,const_583,call_590,const_591,uop_593,call_607,var_608,var_609,uop_619,bop_623,])
output2 = relay.Tuple([call_555,var_553,const_554,call_560,call_570,const_569,bop_574,call_577,call_584,const_583,call_592,const_591,uop_595,call_610,var_608,var_609,uop_621,bop_626,])
func_627 = relay.Function([var_533,var_553,var_608,var_609,], output)
mod['func_627'] = func_627
mod = relay.transform.InferType()(mod)
mutated_mod['func_627'] = func_627
mutated_mod = relay.transform.InferType()(mutated_mod)
func_627_call = mutated_mod.get_global_var('func_627')
var_629 = relay.var("var_629", dtype = "int32", shape = (120,))#candidate|629|(120,)|var|int32
var_630 = relay.var("var_630", dtype = "uint16", shape = ())#candidate|630|()|var|uint16
var_631 = relay.var("var_631", dtype = "uint8", shape = (5, 52))#candidate|631|(5, 52)|var|uint8
var_632 = relay.var("var_632", dtype = "int16", shape = (200,))#candidate|632|(200,)|var|int16
call_628 = func_627_call(var_629,var_630,var_631,var_632,)
output = call_628
func_633 = relay.Function([var_629,var_630,var_631,var_632,], output)
mutated_mod['func_633'] = func_633
mutated_mod = relay.transform.InferType()(mutated_mod)
var_635 = relay.var("var_635", dtype = "float64", shape = (10, 13, 6))#candidate|635|(10, 13, 6)|var|float64
uop_636 = relay.log(var_635.astype('float64')) # shape=(10, 13, 6)
output = relay.Tuple([uop_636,])
output2 = relay.Tuple([uop_636,])
func_638 = relay.Function([var_635,], output)
mod['func_638'] = func_638
mod = relay.transform.InferType()(mod)
var_639 = relay.var("var_639", dtype = "float64", shape = (10, 13, 6))#candidate|639|(10, 13, 6)|var|float64
output = func_638(var_639)
func_640 = relay.Function([var_639], output)
mutated_mod['func_640'] = func_640
mutated_mod = relay.transform.InferType()(mutated_mod)
const_687 = relay.const([[-9,-1,-7,-9,-10,6,-6,2,10,-5,9,7,3,1,6],[-1,-8,5,5,-2,1,-2,8,2,3,6,-7,2,-7,-4],[-4,7,-9,9,6,-1,-7,7,7,5,9,6,6,-6,10],[7,-4,5,-7,-9,4,-4,-3,8,10,-1,-7,-5,-2,6],[-10,5,-7,9,-3,-9,-8,-1,3,10,3,2,-6,-2,9],[-2,3,5,6,-6,-2,-7,9,3,7,7,3,-9,8,1],[1,6,-9,-4,5,-3,8,-9,-7,-10,6,-4,7,-9,-5],[2,-4,-10,1,7,7,-5,1,1,-8,10,-8,-2,8,-4],[4,10,6,10,-5,3,8,-4,-2,6,-8,2,3,-3,-9],[-5,-2,-10,5,8,-8,2,7,-4,-3,-6,9,6,-6,-2],[-7,6,1,10,8,8,8,-2,5,3,8,-8,-1,-8,5],[-10,8,6,5,-7,-5,-1,-4,8,-10,-5,10,5,10,-8],[7,1,-5,-7,2,-3,1,-8,6,-2,4,-5,3,-8,7],[-1,-4,-10,-7,7,-2,-4,4,-8,7,7,9,8,5,-6],[1,-7,-10,-4,-3,-4,-3,8,10,10,-5,-9,-10,-6,-4]], dtype = "uint64")#candidate|687|(15, 15)|const|uint64
var_688 = relay.var("var_688", dtype = "uint64", shape = (15, 15))#candidate|688|(15, 15)|var|uint64
bop_689 = relay.multiply(const_687.astype('uint64'), relay.reshape(var_688.astype('uint64'), relay.shape_of(const_687))) # shape=(15, 15)
var_694 = relay.var("var_694", dtype = "uint64", shape = (15, 15))#candidate|694|(15, 15)|var|uint64
bop_695 = relay.greater_equal(bop_689.astype('bool'), relay.reshape(var_694.astype('bool'), relay.shape_of(bop_689))) # shape=(15, 15)
uop_706 = relay.rsqrt(bop_689.astype('float32')) # shape=(15, 15)
uop_714 = relay.sin(uop_706.astype('float64')) # shape=(15, 15)
uop_716 = relay.acosh(uop_714.astype('float32')) # shape=(15, 15)
uop_720 = relay.sigmoid(uop_716.astype('float64')) # shape=(15, 15)
func_327_call = mod.get_global_var('func_327')
func_332_call = mutated_mod.get_global_var('func_332')
const_723 = relay.const([8,-8,4,-6,-9,7,8,-4,3,-1,7,-8,2,4,7,-1,7,5,-9,4,-10,2,5,7,5,9,-9,-9,-5,6,8,6,9,7,-2,5,-3,2,-2,-4,-10,9,1,8,-2,-7,4,-6,-7,-10,-5,3,-4,6,5,-5,4,-4,-3,-1,9,-5,-3,5,-5,9,1,-8,8,-3,3,-9,3,3,6,-10,4,-7,8,7,8,-3,-7,-6,-6,-7,8,-7,-9,-6,6,1,1,7,1,-3,9,10,9,-8,-6,4,-10,6,3,6,5,-1,3,-6,-1,3,-4,-3,-8,8,7,9,-4,9,-4,9,2,6,8,-2,-10,9,10,1,-5,4,-2,3,10,3,9,-5,-2,6,4,8,-3,-2,-9,10,1,-7,-9,-8,2,-4,5,-10,2,-8,-4,-4,3,9,-10,-7,-5,3,5,-4,7,10,9,1,-7,-10,7,-7,2,4,7,1,6,-7,-9,9,-10,8,-8,3,-9,-4,6,7,-7,10,-10,5,6,8,4,-1,-4,-6,-9,-8,3,-5,3,-7,-2,-6,7,-10,-5,10,4,8,2,10,4,-10,-2,-5,6,7,10,-10,-9,4,9,-7,-7,2,-10,1,-2,2,7,-9,3,10,-1,2,1,4,-10,-4,6,8,-10,-2,1,6,-3,-10,-3,10,1,4,8,5,-10,6,-4,-4,5,-9,-3,-4,-8,-3,-7,4,4,1,9,9,4,7,-10,-4,-10,1,6,10,-2,-6,7,-6,-2,-5,10,2,1,-3,2,-6,-10,6,2,3,-10,-2,1,-1,4,5,10,-7,-7,-2,8,5,-4,-6,-8,2,-10,-8,4,-5,5,-10,7,8,10,7,7,-9,-3,-9,6,3,-8,6,-10,8,-8,2,10,1,9,1,8,-9,5,-5,1,-4,1,-3,-10,8,-1,-3,-8,2,-2,3,3,2,2,-6,5,4,-1,-9,-7,-8,5,1,6,3,8,-8,10,6,7,-6,3,10,-6,2,-6,-4,-2,4,-10,-7,-3,-7,7,6,5,-8,-2,2,-9,-1,-5,-4,2,6,-7,8,10,-4,1,8,-1,-6,-9,9,5,1,-7,-8,6,-8,-8,4,4,-2,-9,-10,-1,3,5,5,4,-1,-4,-9,-4,5,5,-2,9,-3,6,-3,10,-6,8,4,-1,4,-3,-6,-1,-10,10,5,-6,2,-4,3,-8,8,2,1,-8,-9,-9,-9,-5,7,3,-9,-2,2,-3,-9,-4,1,10,1,7,10,-4,6,-10,-7,5,-3,-6,-3,2,1,9,-3,-6,-7,-4,-8,-8,10,-5,2,-4,7,1,-8,-1,10,5,-7,8,3,-2,10,5,-1,-8,2,-9,-1,-8,5,10,-9,9,-3,9,8,-6,3,-10,-4,9,-10,7,-9,10,6,9,4,-9,-4,-4,-4,-1,-4], dtype = "int32")#candidate|723|(540,)|const|int32
const_724 = relay.const(2, dtype = "uint16")#candidate|724|()|const|uint16
call_722 = relay.TupleGetItem(func_327_call(relay.reshape(const_723.astype('int32'), [12, 15, 3]), relay.reshape(const_723.astype('int32'), [12, 15, 3]), relay.reshape(const_723.astype('float64'), [12, 15, 3]), relay.reshape(const_724.astype('uint16'), []), ), 4)
call_725 = relay.TupleGetItem(func_332_call(relay.reshape(const_723.astype('int32'), [12, 15, 3]), relay.reshape(const_723.astype('int32'), [12, 15, 3]), relay.reshape(const_723.astype('float64'), [12, 15, 3]), relay.reshape(const_724.astype('uint16'), []), ), 4)
bop_727 = relay.logical_xor(uop_720.astype('uint32'), relay.reshape(bop_689.astype('uint32'), relay.shape_of(uop_720))) # shape=(15, 15)
bop_730 = relay.divide(uop_716.astype('float32'), relay.reshape(uop_706.astype('float32'), relay.shape_of(uop_716))) # shape=(15, 15)
bop_736 = relay.not_equal(uop_720.astype('bool'), relay.reshape(bop_727.astype('bool'), relay.shape_of(uop_720))) # shape=(15, 15)
func_404_call = mod.get_global_var('func_404')
func_410_call = mutated_mod.get_global_var('func_410')
const_744 = relay.const([3,7,10,4,6,-7,-6,-2,7,9,9,10,-10,-8,-9,3,-6,9,-4,10,-2,6,-3,7,8,7,-3,-7,-3,9,-7,-6,-3,-1,-10,7,-9,8,-5,1,2,-3,6,-8,-4,-2,7,3,1,-9,4,-10,2,4,-4,1,4,1,-3,-10,-3,-7,10,-2,-6,1,10,-5,-3,10,-6,3,4,-4,2,3,8,-8,1,-1,-5,-9,6,-7,-4,8,9,-4,7,9,5,7,-1,-4,-4,-1,7,-4,-5,6,2,-1,-5,-4,-4,4,-5,5,-3,-8,3,-6,1,-7,-2,6,-5,5,-4,4,3,9,6,-4,2,8,3,-6,-5,-9,-6,-3,3,-2,-6,-7,6,-7,-10,3,-4,7,-6,-2,-8,2,-7,4,10,9,6,-4,-3,-7,3,5,3,-5,-9,-2,9,10,6,5,1,3,-9,-10,-2,-5,6,-2,-6,-10,3,1,-5,-7,-2,-8,-6,2,1,-10,-8,-6,9,-5,-5,9,6,-10,-8,3,-9,6,-3,-3,-10,-7,-9,7,1,4,-7,-5,-4,4,-10,-3,10,-4,-8,9,-1,-8,-9,10,-9,7,-9,10,7,-5,-3,-8,8,5,-1,3,1,4,-10,-2,-9,4,-3,-1,-8,-1,-5,-3,-3,8,-5,5,6,-3,-4,-5,6,-2,4,1,-10,-5,1,7,-8,-7], dtype = "uint8")#candidate|744|(260,)|const|uint8
var_745 = relay.var("var_745", dtype = "int16", shape = (200,))#candidate|745|(200,)|var|int16
const_746 = relay.const([-3,-5,-6,-5,9,1,-5,-4,10,-9,7,-10,10,1,1,4,-8,2,7,1,1,2,6,7,6,-7,-9,-6,-8,-10,4,2,-2,-7,2,-9,-10,2,-6,4,-6,5,-7,-4,-7,-4,8,-2,-4,3,7,-10,-10,-4,1,8,-8,-3,-3,10,3,10,3,4,-3,3,9,-8,6,-7,10,6,-10,5,-8,-3,10,-4,7,10,7,1,-7,-4,1,-1,7,-2,-10,10,1,-9,-9,6,3,10,-1,3,-10,-2,8,-5,-3,-4,2,-1,9,4,4,-8,5,-4,-6,4,-6,8,-10,-9,-10,7], dtype = "int32")#candidate|746|(120,)|const|int32
var_747 = relay.var("var_747", dtype = "int32", shape = (450,))#candidate|747|(450,)|var|int32
call_743 = relay.TupleGetItem(func_404_call(relay.reshape(const_744.astype('uint8'), [10, 2, 13]), relay.reshape(const_744.astype('uint8'), [10, 2, 13]), relay.reshape(var_745.astype('int16'), [200,]), relay.reshape(const_746.astype('int32'), [120,]), relay.reshape(var_747.astype('int32'), [5, 90]), ), 5)
call_748 = relay.TupleGetItem(func_410_call(relay.reshape(const_744.astype('uint8'), [10, 2, 13]), relay.reshape(const_744.astype('uint8'), [10, 2, 13]), relay.reshape(var_745.astype('int16'), [200,]), relay.reshape(const_746.astype('int32'), [120,]), relay.reshape(var_747.astype('int32'), [5, 90]), ), 5)
output = relay.Tuple([bop_695,call_722,const_723,const_724,bop_730,bop_736,call_743,const_744,var_745,const_746,var_747,])
output2 = relay.Tuple([bop_695,call_725,const_723,const_724,bop_730,bop_736,call_748,const_744,var_745,const_746,var_747,])
func_749 = relay.Function([var_688,var_694,var_745,var_747,], output)
mod['func_749'] = func_749
mod = relay.transform.InferType()(mod)
mutated_mod['func_749'] = func_749
mutated_mod = relay.transform.InferType()(mutated_mod)
func_749_call = mutated_mod.get_global_var('func_749')
var_751 = relay.var("var_751", dtype = "uint64", shape = (15, 15))#candidate|751|(15, 15)|var|uint64
var_752 = relay.var("var_752", dtype = "uint64", shape = (15, 15))#candidate|752|(15, 15)|var|uint64
var_753 = relay.var("var_753", dtype = "int16", shape = (200,))#candidate|753|(200,)|var|int16
var_754 = relay.var("var_754", dtype = "int32", shape = (450,))#candidate|754|(450,)|var|int32
call_750 = func_749_call(var_751,var_752,var_753,var_754,)
output = call_750
func_755 = relay.Function([var_751,var_752,var_753,var_754,], output)
mutated_mod['func_755'] = func_755
mutated_mod = relay.transform.InferType()(mutated_mod)
var_759 = relay.var("var_759", dtype = "uint16", shape = (2, 1))#candidate|759|(2, 1)|var|uint16
var_760 = relay.var("var_760", dtype = "uint16", shape = (2, 10))#candidate|760|(2, 10)|var|uint16
bop_761 = relay.right_shift(var_759.astype('uint16'), var_760.astype('uint16')) # shape=(2, 10)
uop_770 = relay.erf(bop_761.astype('float32')) # shape=(2, 10)
bop_774 = relay.equal(uop_770.astype('bool'), relay.reshape(bop_761.astype('bool'), relay.shape_of(uop_770))) # shape=(2, 10)
output = bop_774
output2 = bop_774
func_783 = relay.Function([var_759,var_760,], output)
mod['func_783'] = func_783
mod = relay.transform.InferType()(mod)
var_784 = relay.var("var_784", dtype = "uint16", shape = (2, 1))#candidate|784|(2, 1)|var|uint16
var_785 = relay.var("var_785", dtype = "uint16", shape = (2, 10))#candidate|785|(2, 10)|var|uint16
output = func_783(var_784,var_785,)
func_786 = relay.Function([var_784,var_785,], output)
mutated_mod['func_786'] = func_786
mutated_mod = relay.transform.InferType()(mutated_mod)
func_434_call = mod.get_global_var('func_434')
func_435_call = mutated_mod.get_global_var('func_435')
call_801 = relay.TupleGetItem(func_434_call(), 1)
call_802 = relay.TupleGetItem(func_435_call(), 1)
uop_807 = relay.asinh(call_801.astype('float32')) # shape=(12, 10)
uop_809 = relay.asinh(call_802.astype('float32')) # shape=(12, 10)
uop_811 = relay.exp(uop_807.astype('float32')) # shape=(12, 10)
uop_813 = relay.exp(uop_809.astype('float32')) # shape=(12, 10)
bop_814 = relay.mod(uop_811.astype('float32'), relay.reshape(uop_807.astype('float32'), relay.shape_of(uop_811))) # shape=(12, 10)
bop_817 = relay.mod(uop_813.astype('float32'), relay.reshape(uop_809.astype('float32'), relay.shape_of(uop_813))) # shape=(12, 10)
uop_818 = relay.sinh(uop_811.astype('float32')) # shape=(12, 10)
uop_820 = relay.sinh(uop_813.astype('float32')) # shape=(12, 10)
output = relay.Tuple([bop_814,uop_818,])
output2 = relay.Tuple([bop_817,uop_820,])
func_823 = relay.Function([], output)
mod['func_823'] = func_823
mod = relay.transform.InferType()(mod)
mutated_mod['func_823'] = func_823
mutated_mod = relay.transform.InferType()(mutated_mod)
func_823_call = mutated_mod.get_global_var('func_823')
call_824 = func_823_call()
output = call_824
func_825 = relay.Function([], output)
mutated_mod['func_825'] = func_825
mutated_mod = relay.transform.InferType()(mutated_mod)
var_874 = relay.var("var_874", dtype = "int8", shape = ())#candidate|874|()|var|int8
const_875 = relay.const([8,10,3,3,10,5], dtype = "int8")#candidate|875|(6,)|const|int8
bop_876 = relay.logical_xor(var_874.astype('int8'), const_875.astype('int8')) # shape=(6,)
bop_880 = relay.not_equal(bop_876.astype('bool'), relay.reshape(const_875.astype('bool'), relay.shape_of(bop_876))) # shape=(6,)
bop_883 = relay.bitwise_xor(bop_880.astype('uint32'), var_874.astype('uint32')) # shape=(6,)
func_46_call = mod.get_global_var('func_46')
func_51_call = mutated_mod.get_global_var('func_51')
var_888 = relay.var("var_888", dtype = "int32", shape = (120,))#candidate|888|(120,)|var|int32
var_889 = relay.var("var_889", dtype = "int32", shape = (450,))#candidate|889|(450,)|var|int32
call_887 = relay.TupleGetItem(func_46_call(relay.reshape(var_874.astype('int32'), []), relay.reshape(var_888.astype('int32'), [12, 10]), relay.reshape(var_889.astype('int32'), [15, 2, 15]), ), 1)
call_890 = relay.TupleGetItem(func_51_call(relay.reshape(var_874.astype('int32'), []), relay.reshape(var_888.astype('int32'), [12, 10]), relay.reshape(var_889.astype('int32'), [15, 2, 15]), ), 1)
uop_891 = relay.rsqrt(bop_880.astype('float64')) # shape=(6,)
output = relay.Tuple([bop_883,call_887,var_888,var_889,uop_891,])
output2 = relay.Tuple([bop_883,call_890,var_888,var_889,uop_891,])
func_893 = relay.Function([var_874,var_888,var_889,], output)
mod['func_893'] = func_893
mod = relay.transform.InferType()(mod)
mutated_mod['func_893'] = func_893
mutated_mod = relay.transform.InferType()(mutated_mod)
func_893_call = mutated_mod.get_global_var('func_893')
var_895 = relay.var("var_895", dtype = "int8", shape = ())#candidate|895|()|var|int8
var_896 = relay.var("var_896", dtype = "int32", shape = (120,))#candidate|896|(120,)|var|int32
var_897 = relay.var("var_897", dtype = "int32", shape = (450,))#candidate|897|(450,)|var|int32
call_894 = func_893_call(var_895,var_896,var_897,)
output = call_894
func_898 = relay.Function([var_895,var_896,var_897,], output)
mutated_mod['func_898'] = func_898
mutated_mod = relay.transform.InferType()(mutated_mod)
func_434_call = mod.get_global_var('func_434')
func_435_call = mutated_mod.get_global_var('func_435')
call_954 = relay.TupleGetItem(func_434_call(), 2)
call_955 = relay.TupleGetItem(func_435_call(), 2)
func_783_call = mod.get_global_var('func_783')
func_786_call = mutated_mod.get_global_var('func_786')
var_1001 = relay.var("var_1001", dtype = "uint16", shape = (2,))#candidate|1001|(2,)|var|uint16
const_1002 = relay.const([[-5,-10,-6,1,9,-1,10,5,-1,3,-2,3,10,6,1,3,-10,-4,-7,8]], dtype = "uint16")#candidate|1002|(1, 20)|const|uint16
call_1000 = func_783_call(relay.reshape(var_1001.astype('uint16'), [2, 1]), relay.reshape(const_1002.astype('uint16'), [2, 10]), )
call_1003 = func_783_call(relay.reshape(var_1001.astype('uint16'), [2, 1]), relay.reshape(const_1002.astype('uint16'), [2, 10]), )
output = relay.Tuple([call_954,call_1000,var_1001,const_1002,])
output2 = relay.Tuple([call_955,call_1003,var_1001,const_1002,])
func_1012 = relay.Function([var_1001,], output)
mod['func_1012'] = func_1012
mod = relay.transform.InferType()(mod)
mutated_mod['func_1012'] = func_1012
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1013 = relay.var("var_1013", dtype = "uint16", shape = (2,))#candidate|1013|(2,)|var|uint16
func_1012_call = mutated_mod.get_global_var('func_1012')
call_1014 = func_1012_call(var_1013)
output = call_1014
func_1015 = relay.Function([var_1013], output)
mutated_mod['func_1015'] = func_1015
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1023 = relay.var("var_1023", dtype = "uint64", shape = (3, 14))#candidate|1023|(3, 14)|var|uint64
var_1024 = relay.var("var_1024", dtype = "uint64", shape = (3, 14))#candidate|1024|(3, 14)|var|uint64
bop_1025 = relay.maximum(var_1023.astype('uint64'), relay.reshape(var_1024.astype('uint64'), relay.shape_of(var_1023))) # shape=(3, 14)
uop_1028 = relay.log2(var_1024.astype('float64')) # shape=(3, 14)
bop_1030 = relay.not_equal(uop_1028.astype('bool'), relay.reshape(bop_1025.astype('bool'), relay.shape_of(uop_1028))) # shape=(3, 14)
uop_1038 = relay.cos(bop_1025.astype('float32')) # shape=(3, 14)
uop_1042 = relay.sqrt(uop_1038.astype('float32')) # shape=(3, 14)
bop_1046 = relay.equal(uop_1042.astype('bool'), relay.reshape(uop_1028.astype('bool'), relay.shape_of(uop_1042))) # shape=(3, 14)
bop_1050 = relay.floor_divide(bop_1030.astype('float64'), relay.reshape(bop_1025.astype('float64'), relay.shape_of(bop_1030))) # shape=(3, 14)
output = relay.Tuple([bop_1046,bop_1050,])
output2 = relay.Tuple([bop_1046,bop_1050,])
func_1055 = relay.Function([var_1023,var_1024,], output)
mod['func_1055'] = func_1055
mod = relay.transform.InferType()(mod)
mutated_mod['func_1055'] = func_1055
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1055_call = mutated_mod.get_global_var('func_1055')
var_1057 = relay.var("var_1057", dtype = "uint64", shape = (3, 14))#candidate|1057|(3, 14)|var|uint64
var_1058 = relay.var("var_1058", dtype = "uint64", shape = (3, 14))#candidate|1058|(3, 14)|var|uint64
call_1056 = func_1055_call(var_1057,var_1058,)
output = call_1056
func_1059 = relay.Function([var_1057,var_1058,], output)
mutated_mod['func_1059'] = func_1059
mutated_mod = relay.transform.InferType()(mutated_mod)
func_434_call = mod.get_global_var('func_434')
func_435_call = mutated_mod.get_global_var('func_435')
call_1071 = relay.TupleGetItem(func_434_call(), 3)
call_1072 = relay.TupleGetItem(func_435_call(), 3)
output = relay.Tuple([call_1071,])
output2 = relay.Tuple([call_1072,])
func_1073 = relay.Function([], output)
mod['func_1073'] = func_1073
mod = relay.transform.InferType()(mod)
output = func_1073()
func_1074 = relay.Function([], output)
mutated_mod['func_1074'] = func_1074
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1073_call = mod.get_global_var('func_1073')
func_1074_call = mutated_mod.get_global_var('func_1074')
call_1098 = relay.TupleGetItem(func_1073_call(), 0)
call_1099 = relay.TupleGetItem(func_1074_call(), 0)
uop_1100 = relay.log10(call_1098.astype('float64')) # shape=(450,)
uop_1102 = relay.log10(call_1099.astype('float64')) # shape=(450,)
uop_1106 = relay.acos(uop_1100.astype('float64')) # shape=(450,)
uop_1108 = relay.acos(uop_1102.astype('float64')) # shape=(450,)
bop_1109 = relay.less_equal(uop_1106.astype('bool'), relay.reshape(call_1098.astype('bool'), relay.shape_of(uop_1106))) # shape=(450,)
bop_1112 = relay.less_equal(uop_1108.astype('bool'), relay.reshape(call_1099.astype('bool'), relay.shape_of(uop_1108))) # shape=(450,)
output = bop_1109
output2 = bop_1112
func_1113 = relay.Function([], output)
mod['func_1113'] = func_1113
mod = relay.transform.InferType()(mod)
mutated_mod['func_1113'] = func_1113
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1113_call = mutated_mod.get_global_var('func_1113')
call_1114 = func_1113_call()
output = call_1114
func_1115 = relay.Function([], output)
mutated_mod['func_1115'] = func_1115
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1073_call = mod.get_global_var('func_1073')
func_1074_call = mutated_mod.get_global_var('func_1074')
call_1126 = relay.TupleGetItem(func_1073_call(), 0)
call_1127 = relay.TupleGetItem(func_1074_call(), 0)
func_246_call = mod.get_global_var('func_246')
func_249_call = mutated_mod.get_global_var('func_249')
var_1130 = relay.var("var_1130", dtype = "uint16", shape = ())#candidate|1130|()|var|uint16
var_1131 = relay.var("var_1131", dtype = "uint16", shape = (13,))#candidate|1131|(13,)|var|uint16
call_1129 = func_246_call(relay.reshape(var_1130.astype('uint16'), []), relay.reshape(var_1131.astype('uint16'), [13,]), )
call_1132 = func_246_call(relay.reshape(var_1130.astype('uint16'), []), relay.reshape(var_1131.astype('uint16'), [13,]), )
func_1073_call = mod.get_global_var('func_1073')
func_1074_call = mutated_mod.get_global_var('func_1074')
call_1138 = relay.TupleGetItem(func_1073_call(), 0)
call_1139 = relay.TupleGetItem(func_1074_call(), 0)
uop_1143 = relay.cosh(call_1138.astype('float64')) # shape=(450,)
uop_1145 = relay.cosh(call_1139.astype('float64')) # shape=(450,)
const_1157 = relay.const([-9.625757,-6.503963,0.521257,9.761181,-6.222723,-2.647839,-6.447754,-0.087688,8.714548,-3.808221,2.235830,1.331550,-3.883143,-1.688116,1.984427,4.341767,-5.656813,6.068670,-0.878846,6.361312,-8.476249,3.040914,-6.428908,2.638572,4.195291,-7.416772,-7.141668,4.259732,2.533689,-7.174406,5.925437,-2.527739,3.508551,4.813306,5.245619,8.516537,-6.261263,-2.476088,-6.410822,-1.920143,-7.971159,8.630475,8.545157,3.899824,-7.876101,9.857265,3.248169,-5.557309,0.670367,6.083621,-9.425361,3.252340,2.632032,1.047164,9.444253,9.529710,-0.562294,-7.853444,1.665402,-5.319728,-7.795972,-2.301225,-8.647468,-2.759906,-2.299385,-9.801382,-0.961552,-0.901345,2.068409,-5.103131,4.982060,-3.174412,-6.907717,9.106866,-9.285228,5.333259,9.798562,3.014260,-4.327213,-8.260908,2.949285,0.109413,-7.794131,6.698853,-5.362037,-6.491223,2.600689,0.081270,4.545343,-9.900075,1.796817,-5.906261,9.201658,-9.687930,-3.315275,-7.503223,2.419475,9.758500,9.516399,9.661968,-1.331192,-8.843229,8.776358,4.086732,-4.687307,-7.258877,-6.405595,7.190954,-0.488682,7.461060,-5.454525,-4.320361,-4.404502,2.313710,-4.909237,3.244019,-9.292934,4.461734,3.619872,-0.072666,-9.237660,6.100930,-1.181074,-1.049334,-1.608928,3.128181,9.530798,-7.824489,7.042969,-0.078803,3.140863,8.518620,2.074961,8.452188,5.825674,-5.649555,-6.957956,-8.311398,-3.788146,-8.376569,7.355589,7.223859,1.937645,-9.631958,9.790796,4.465619,-4.529073,-4.831702,6.268421,-8.535519,-7.175455,-5.903250,4.967050,6.274715,7.112761,-0.964646,0.256878,0.455070,-4.784183,7.719078,-4.688349,-6.496816,3.389182,-3.345014,-7.321557,-4.507647,-9.423145,9.404880,7.291443,8.981089,-8.102764,0.398615,-6.449472,6.544260,-2.655769,-9.555807,1.992885,9.752441,-4.637345,6.109443,9.471889,5.128891,-4.684744,8.146873,4.910310,-3.447297,-7.065655,8.401085,-4.438015,9.851540,9.619424,-1.283060,-9.735642,-5.596996,5.024668,2.292354,7.111250,-0.701580,-9.606381,9.400498,8.609620,5.135847,-0.426331,-0.751483,5.465288,3.181116,4.120137,1.653254,-3.732232,-6.911483,8.014413,-2.087535,-7.765540,-1.455012,-8.242171,-7.796343,1.488542,6.691516,-6.289214,5.754665,-4.339875,1.312107,-2.489167,5.929006,-5.302889,-6.986302,-0.864325,-5.072457,-0.462058,2.132712,-1.179115,-9.491915,1.664776,4.533577,4.618279,-9.276176,-6.962056,6.057037,-8.208459,2.712218,2.942675,1.653138,-6.301923,-3.484293,-5.525703,7.329596,-8.863023,4.853705,1.528977,0.101544,3.013134,-7.608308,6.451073,-6.895309,3.257919,-2.980782,9.427955,-0.060644,3.920869,-1.653643,-6.336489,6.221584,9.194537,-0.748566,8.740934,3.168782,4.973150,-6.852889,-5.917864,7.307814,-3.863864,-2.262152,2.673390,1.738036,6.388336,-6.262029,5.174124,-7.516462,-6.832066,-2.804648,0.345159,-7.307698,4.116006,2.179332,6.922217,2.250102,1.007593,-1.076251,-1.848157,3.695725,2.587387,4.593800,3.586038,-7.080474,3.511529,-6.076655,-9.016499,6.402330,5.488271,4.719784,9.251396,0.559008,-8.202523,8.193496,2.007888,8.348905,6.340907,-8.920658,-4.166395,-8.173262,7.398921,-3.718057,-4.381138,3.046992,6.722537,-7.610479,-1.814796,0.384112,7.981832,6.236015,3.329225,-2.717590,-1.442079,-1.737447,8.470708,-5.576683,6.762153,-8.905540,-1.099818,4.442046,3.940896,1.233344,1.417582,-3.169852,6.578449,-3.750076,-7.069477,2.844376,8.937331,-7.740806,7.437520,6.797499,3.197999,-1.705909,2.282725,5.363860,8.999058,-6.186527,2.026355,-7.567263,2.710482,-6.616360,6.947589,-5.742599,7.556972,5.540555,3.513060,6.321758,-9.650191,-7.469312,3.739439,-9.412133,-1.779397,-5.545086,-4.970091,9.530688,5.994119,4.062927,1.936361,9.404479,-7.005654,0.763379,3.778875,7.063763,-3.180306,4.005742,8.394808,2.389884,4.672915,-3.405316,-2.768557,1.576067,8.448933,-8.529441,-8.554741,2.859310,-5.747731,-8.492005,6.499223,2.899715,5.387773,9.669595,9.066335,8.715809,-0.207272,-4.041909,0.592717,-2.091107,-9.508297,2.900960,-5.876849,-8.017521,-3.652299,-7.584975,-5.263088,5.724402,1.382243,-4.749102,8.421851,9.640529,0.129078,-6.614307,4.395052,0.357992,6.322530,-0.627152,3.586722,-0.274758,9.992274,7.846233,4.016804,7.457578,-1.747039,5.686924,1.838054,0.423211,-5.204333,6.478889,2.605479,6.160007,-7.231283,-1.788536,-3.135225,5.097288,-0.246606,0.353507,5.624101,-4.924393,7.091223,-1.384308,-7.770501,9.701300,4.206191,-4.999058,-0.310596,-4.168404,9.914430,-7.635199,5.446793,9.992194], dtype = "float64")#candidate|1157|(450,)|const|float64
bop_1158 = relay.multiply(uop_1143.astype('int32'), relay.reshape(const_1157.astype('int32'), relay.shape_of(uop_1143))) # shape=(450,)
bop_1161 = relay.multiply(uop_1145.astype('int32'), relay.reshape(const_1157.astype('int32'), relay.shape_of(uop_1145))) # shape=(450,)
var_1162 = relay.var("var_1162", dtype = "float64", shape = (450,))#candidate|1162|(450,)|var|float64
bop_1163 = relay.maximum(uop_1143.astype('float64'), relay.reshape(var_1162.astype('float64'), relay.shape_of(uop_1143))) # shape=(450,)
bop_1166 = relay.maximum(uop_1145.astype('float64'), relay.reshape(var_1162.astype('float64'), relay.shape_of(uop_1145))) # shape=(450,)
output = relay.Tuple([call_1126,call_1129,var_1130,var_1131,bop_1158,bop_1163,])
output2 = relay.Tuple([call_1127,call_1132,var_1130,var_1131,bop_1161,bop_1166,])
func_1167 = relay.Function([var_1130,var_1131,var_1162,], output)
mod['func_1167'] = func_1167
mod = relay.transform.InferType()(mod)
var_1168 = relay.var("var_1168", dtype = "uint16", shape = ())#candidate|1168|()|var|uint16
var_1169 = relay.var("var_1169", dtype = "uint16", shape = (13,))#candidate|1169|(13,)|var|uint16
var_1170 = relay.var("var_1170", dtype = "float64", shape = (450,))#candidate|1170|(450,)|var|float64
output = func_1167(var_1168,var_1169,var_1170,)
func_1171 = relay.Function([var_1168,var_1169,var_1170,], output)
mutated_mod['func_1171'] = func_1171
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1180 = relay.var("var_1180", dtype = "int32", shape = ())#candidate|1180|()|var|int32
var_1181 = relay.var("var_1181", dtype = "int32", shape = (2, 9))#candidate|1181|(2, 9)|var|int32
bop_1182 = relay.not_equal(var_1180.astype('bool'), var_1181.astype('bool')) # shape=(2, 9)
var_1187 = relay.var("var_1187", dtype = "bool", shape = (2, 9))#candidate|1187|(2, 9)|var|bool
bop_1188 = relay.greater(bop_1182.astype('bool'), relay.reshape(var_1187.astype('bool'), relay.shape_of(bop_1182))) # shape=(2, 9)
output = bop_1188
output2 = bop_1188
func_1194 = relay.Function([var_1180,var_1181,var_1187,], output)
mod['func_1194'] = func_1194
mod = relay.transform.InferType()(mod)
mutated_mod['func_1194'] = func_1194
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1194_call = mutated_mod.get_global_var('func_1194')
var_1196 = relay.var("var_1196", dtype = "int32", shape = ())#candidate|1196|()|var|int32
var_1197 = relay.var("var_1197", dtype = "int32", shape = (2, 9))#candidate|1197|(2, 9)|var|int32
var_1198 = relay.var("var_1198", dtype = "bool", shape = (2, 9))#candidate|1198|(2, 9)|var|bool
call_1195 = func_1194_call(var_1196,var_1197,var_1198,)
output = call_1195
func_1199 = relay.Function([var_1196,var_1197,var_1198,], output)
mutated_mod['func_1199'] = func_1199
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1073_call = mod.get_global_var('func_1073')
func_1074_call = mutated_mod.get_global_var('func_1074')
call_1209 = relay.TupleGetItem(func_1073_call(), 0)
call_1210 = relay.TupleGetItem(func_1074_call(), 0)
output = call_1209
output2 = call_1210
func_1218 = relay.Function([], output)
mod['func_1218'] = func_1218
mod = relay.transform.InferType()(mod)
mutated_mod['func_1218'] = func_1218
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1218_call = mutated_mod.get_global_var('func_1218')
call_1219 = func_1218_call()
output = call_1219
func_1220 = relay.Function([], output)
mutated_mod['func_1220'] = func_1220
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1221 = relay.var("var_1221", dtype = "float64", shape = (8, 4, 15))#candidate|1221|(8, 4, 15)|var|float64
uop_1222 = relay.erf(var_1221.astype('float64')) # shape=(8, 4, 15)
bop_1225 = relay.bitwise_and(var_1221.astype('int64'), relay.reshape(uop_1222.astype('int64'), relay.shape_of(var_1221))) # shape=(8, 4, 15)
var_1229 = relay.var("var_1229", dtype = "int64", shape = (8, 4, 15))#candidate|1229|(8, 4, 15)|var|int64
bop_1230 = relay.mod(bop_1225.astype('float32'), relay.reshape(var_1229.astype('float32'), relay.shape_of(bop_1225))) # shape=(8, 4, 15)
func_1012_call = mod.get_global_var('func_1012')
func_1015_call = mutated_mod.get_global_var('func_1015')
var_1234 = relay.var("var_1234", dtype = "uint16", shape = (2,))#candidate|1234|(2,)|var|uint16
call_1233 = relay.TupleGetItem(func_1012_call(relay.reshape(var_1234.astype('uint16'), [2,])), 1)
call_1235 = relay.TupleGetItem(func_1015_call(relay.reshape(var_1234.astype('uint16'), [2,])), 1)
bop_1238 = relay.less_equal(bop_1225.astype('bool'), relay.reshape(bop_1230.astype('bool'), relay.shape_of(bop_1225))) # shape=(8, 4, 15)
bop_1243 = relay.right_shift(var_1229.astype('uint16'), relay.reshape(bop_1238.astype('uint16'), relay.shape_of(var_1229))) # shape=(8, 4, 15)
bop_1246 = relay.less(uop_1222.astype('bool'), relay.reshape(bop_1238.astype('bool'), relay.shape_of(uop_1222))) # shape=(8, 4, 15)
func_1194_call = mod.get_global_var('func_1194')
func_1199_call = mutated_mod.get_global_var('func_1199')
const_1250 = relay.const(10, dtype = "int32")#candidate|1250|()|const|int32
var_1251 = relay.var("var_1251", dtype = "int32", shape = (18,))#candidate|1251|(18,)|var|int32
call_1249 = func_1194_call(relay.reshape(const_1250.astype('int32'), []), relay.reshape(var_1251.astype('int32'), [2, 9]), relay.reshape(var_1251.astype('bool'), [2, 9]), )
call_1252 = func_1194_call(relay.reshape(const_1250.astype('int32'), []), relay.reshape(var_1251.astype('int32'), [2, 9]), relay.reshape(var_1251.astype('bool'), [2, 9]), )
bop_1253 = relay.bitwise_xor(bop_1238.astype('uint64'), relay.reshape(uop_1222.astype('uint64'), relay.shape_of(bop_1238))) # shape=(8, 4, 15)
bop_1257 = relay.less(bop_1253.astype('bool'), relay.reshape(bop_1238.astype('bool'), relay.shape_of(bop_1253))) # shape=(8, 4, 15)
uop_1263 = relay.exp(bop_1225.astype('float32')) # shape=(8, 4, 15)
output = relay.Tuple([call_1233,var_1234,bop_1243,bop_1246,call_1249,const_1250,var_1251,bop_1257,uop_1263,])
output2 = relay.Tuple([call_1235,var_1234,bop_1243,bop_1246,call_1252,const_1250,var_1251,bop_1257,uop_1263,])
F = relay.Function([var_1221,var_1229,var_1234,var_1251,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1221,var_1229,var_1234,var_1251,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1221= np.array([[[6.141931,-4.847885,1.859107,-4.671773,-5.257139,6.075461,-5.891122,-2.083698,-5.957105,1.207307,-1.735369,1.685610,6.254414,-0.715836,-0.684902],[4.498191,1.397908,4.325083,1.481894,9.162813,6.606920,-7.196184,5.026773,3.168718,-9.231517,2.234122,-1.780835,1.948675,1.475251,-2.650284],[1.786731,0.412931,3.734458,-0.233255,-8.498127,-9.495364,-8.698197,6.591073,-8.311181,6.976354,-0.306832,9.851200,-2.209233,-5.115727,-6.247583],[8.629172,-9.538443,-3.633193,9.085643,9.127279,-9.067218,7.052006,-7.614226,3.701029,0.196589,0.829781,5.443086,-5.637691,2.684863,1.124935]],[[-8.908107,-6.311544,-4.228182,-0.487066,5.593797,6.206903,-2.510104,-2.719545,-6.893196,1.495865,-6.671043,4.303913,6.213698,7.073213,-9.814902],[-2.431288,6.918567,3.125427,8.103375,1.954284,9.588789,5.920721,-3.805201,-2.589959,2.891705,-8.738442,-0.461894,4.917959,-8.657040,5.324008],[-3.793726,4.187725,-8.910406,6.950553,-8.045480,-6.729372,9.986672,0.554948,5.564191,-0.560219,9.920571,-0.312551,-2.683426,7.234656,0.952728],[8.459430,-2.730456,9.591677,-4.205041,2.435428,-7.162437,-1.322134,5.103697,0.083724,-9.990247,3.801721,-3.474267,6.730561,7.727842,4.676026]],[[6.146918,-9.627354,9.329163,-9.766241,-0.034416,2.119947,9.990958,3.310501,7.886208,2.232028,-0.964468,-8.250254,2.895740,-7.985714,-3.914600],[7.960037,-2.494204,-0.016638,5.149559,6.304452,-8.409503,-4.525107,3.423703,-2.827428,-3.172728,-9.156713,-0.236553,-9.905952,-1.967088,-6.680849],[-2.277921,6.263042,-8.227488,9.131128,-1.848995,2.481859,3.962296,4.982841,0.230738,1.114825,9.032875,8.816781,-4.608258,1.040131,-7.890210],[-7.143790,7.725112,6.234318,7.529782,-5.339700,-5.788131,-6.177261,5.621323,-0.392876,4.731246,0.202814,6.929805,-3.423135,-2.363506,-6.126398]],[[6.024546,9.902401,-6.638107,-7.836311,9.040478,-4.517198,0.053274,1.993450,-3.884578,7.143172,-8.297053,-5.978650,3.152196,1.347128,9.428071],[-2.169955,-4.810890,3.965784,8.441377,-8.578697,-5.689648,-1.102213,3.652094,0.443037,3.363276,8.120103,9.614804,9.714952,-1.947112,-5.410505],[-9.785417,4.820326,-8.849729,-0.391690,-0.844631,2.677904,8.125072,-9.970927,3.933975,-9.535502,9.860696,-3.046348,6.055698,0.901039,2.819823],[3.079697,5.605851,-7.492956,-0.995153,7.423466,-6.900449,7.705080,-6.811654,-2.104498,7.065440,-1.418561,1.990879,1.632002,-6.961064,-1.659109]],[[-9.218417,1.063780,-3.972273,-4.143797,-8.489450,-4.105436,-8.555204,-6.311049,8.766292,-4.779242,1.140205,9.853834,-8.361114,-6.400564,-1.687201],[-8.515620,-0.774512,-4.650142,3.218265,0.728678,-7.175541,-0.750032,-0.119797,5.187322,-5.322103,-3.006896,-4.137914,-5.269059,6.547682,3.367824],[0.367555,-8.159957,0.633078,0.591765,1.417734,7.854722,-3.417864,-5.279429,-3.452415,-4.467345,-0.143044,7.438557,2.529761,7.510888,-7.490590],[-3.449649,-9.565150,8.569015,9.100225,-4.181757,-3.464757,-1.947177,-4.676401,4.378959,-5.475118,1.595600,-0.503913,5.102307,-6.312615,-1.082551]],[[0.576054,-7.905454,-8.770407,6.498124,-8.965631,-9.059111,0.906891,8.591137,-4.284016,4.320260,5.979002,4.922107,4.324934,7.375878,0.290156],[-3.116798,-1.224422,-7.011103,-5.346072,-9.632269,7.334618,8.600970,2.974327,-6.761721,7.156333,-9.060048,-9.803937,4.479644,-3.857066,9.253505],[-2.856293,-7.225627,1.969523,3.184714,-9.633489,-5.593224,5.367350,6.628039,0.739631,-5.705489,7.443367,9.832026,-9.996524,0.460233,4.446139],[-8.803962,-6.477030,-5.117774,4.631873,8.317223,0.290731,8.698416,-6.823642,4.897190,4.405845,-1.415966,-2.046492,-4.197359,-3.981478,3.148801]],[[1.977812,-6.147953,-2.817500,8.054280,-0.243875,4.747899,-7.446603,-3.082736,7.467126,-7.901219,3.033594,2.861638,-2.037949,-0.737286,1.115987],[-3.482775,4.955222,-8.518618,6.937763,0.162126,0.798220,2.010726,-5.409592,-0.199302,1.658233,-9.536775,8.098402,-5.161100,0.050845,1.206181],[-6.842456,5.853355,-3.155992,1.928331,0.103452,4.108082,-1.319663,6.922204,4.624878,-2.333686,-7.980633,4.567610,6.289531,-0.940145,4.245115],[3.174078,0.960669,2.250119,8.442521,-1.045373,-6.163117,0.805627,-6.337553,1.418115,-4.357109,0.037150,-0.224154,-0.704247,-9.243437,-7.218522]],[[-5.849011,-9.486865,7.073832,2.040993,-4.600639,5.948082,-8.820386,5.558986,6.528902,-5.388742,7.744976,3.986228,-9.042785,9.001027,-2.325234],[-8.499339,4.512405,-8.436283,3.208659,9.443974,8.818747,-2.260634,1.756042,0.139077,-4.477388,-8.539543,1.114088,3.001591,-6.376311,-9.673963],[-9.052126,2.000872,0.479428,-2.392390,-4.152403,2.240856,0.352366,7.543646,2.258568,6.396843,-5.777054,4.975964,5.844830,8.615049,2.316215],[-9.362953,7.907985,-4.238150,-3.174602,8.330676,-1.151335,-6.321865,-7.101430,0.346423,-1.773743,1.990579,-8.372242,-3.308003,6.533053,1.512796]]], dtype='float64')
module1.set_input('var_1221', input_1221)
input_1229= np.array([[[-10,-10,6,-8,3,-10,1,-2,-8,1,-8,5,-8,-5,8],[4,9,-8,-5,1,-4,-8,-8,-7,3,4,-5,-5,-8,1],[6,-5,-1,-1,1,-4,-3,-8,-5,7,5,9,-4,2,5],[-9,3,8,-9,10,-1,3,-7,4,9,1,-5,-3,3,1]],[[3,10,4,-9,7,2,-4,-1,-9,-4,-6,-2,3,10,-5],[5,2,5,5,10,-3,-1,9,-9,-5,-7,-10,-2,8,-1],[4,2,-5,-4,1,4,6,3,7,4,-7,-5,-1,1,2],[2,-2,-3,-3,7,9,-8,-9,10,2,-10,-4,7,-3,-5]],[[-2,10,-3,-1,10,-10,1,3,8,-6,9,1,-10,-7,7],[-7,-8,3,9,-8,3,-7,-6,4,8,-6,5,-8,-6,-9],[8,-1,4,10,9,-4,7,-7,-6,9,-9,8,-2,1,3],[10,8,10,7,-5,9,1,1,-1,6,-10,4,-3,6,2]],[[-5,-3,-6,-3,4,-1,9,8,-9,6,8,-2,-6,9,-8],[1,5,-4,-8,4,-7,4,-7,8,1,1,2,2,-8,-7],[-3,-8,4,-9,-1,6,-10,-5,-3,2,7,-3,-7,-6,-5],[-9,-3,9,3,2,3,-3,8,-7,-3,3,4,-10,1,6]],[[-8,8,-4,-1,-5,10,-2,-8,-2,-3,5,6,2,-8,9],[2,-1,-1,5,1,-8,7,-5,-2,1,-4,1,-4,4,-9],[8,-2,-10,-5,6,7,8,-6,1,3,-5,-8,7,-1,-6],[7,2,4,-4,-8,-4,6,1,6,-4,-3,6,-5,-3,-7]],[[7,-6,3,2,10,10,9,5,-10,3,10,2,7,-10,-4],[-1,8,1,-7,1,-6,-1,-8,4,-7,-3,3,4,1,-10],[8,-7,7,2,-10,1,-3,-1,-9,1,4,-5,-9,6,-1],[-6,-8,-7,-10,8,1,6,-2,-7,3,-6,-3,-3,10,-4]],[[-6,1,-5,8,9,-5,-9,-6,-9,-1,2,9,-10,8,4],[2,4,3,-6,-5,10,7,1,10,8,-2,1,-4,6,3],[-5,9,10,9,4,3,3,3,3,4,5,10,9,-6,-7],[6,-6,3,8,4,-7,-10,-6,2,6,-1,-2,-6,-6,-10]],[[3,-8,3,-7,-3,-7,-7,-9,-9,4,-9,-6,-7,-5,-7],[7,1,1,7,6,-10,-2,-9,-1,4,-4,2,5,4,-2],[5,5,7,1,-5,-5,2,-3,8,9,-3,4,-3,-3,-9],[10,-6,-9,10,-6,8,1,9,-1,1,-9,-3,8,-4,-4]]], dtype='int64')
module1.set_input('var_1229', input_1229)
input_1234= np.array([7,8], dtype='uint16')
module1.set_input('var_1234', input_1234)
input_1251= np.array([-8,6,-8,6,-6,-6,-2,9,8,-10,3,-8,-10,-3,-8,-10,-9,-6], dtype='int32')
module1.set_input('var_1251', input_1251)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1221, input_1229, input_1234, input_1251, )
res3 = intrp3.evaluate()(input_1221, input_1229, input_1234, input_1251, )
res4 = intrp4.evaluate()(input_1221, input_1229, input_1234, input_1251, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
module5.set_input('var_1221', input_1221)
module5.set_input('var_1229', input_1229)
module5.set_input('var_1234', input_1234)
module5.set_input('var_1251', input_1251)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1221, input_1229, input_1234, input_1251, )
res7 = intrp7.evaluate()(input_1221, input_1229, input_1234, input_1251, )
res8 = intrp8.evaluate()(input_1221, input_1229, input_1234, input_1251, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
module9.set_input('var_1221', input_1221)
module9.set_input('var_1229', input_1229)
module9.set_input('var_1234', input_1234)
module9.set_input('var_1251', input_1251)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1221, input_1229, input_1234, input_1251, )
res11 = intrp11.evaluate()(input_1221, input_1229, input_1234, input_1251, )
res12 = intrp12.evaluate()(input_1221, input_1229, input_1234, input_1251, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
module13.set_input('var_1221', input_1221)
module13.set_input('var_1229', input_1229)
module13.set_input('var_1234', input_1234)
module13.set_input('var_1251', input_1251)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1221, input_1229, input_1234, input_1251, )
res15 = intrp15.evaluate()(input_1221, input_1229, input_1234, input_1251, )
res16 = intrp16.evaluate()(input_1221, input_1229, input_1234, input_1251, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
module17.set_input('var_1221', input_1221)
module17.set_input('var_1229', input_1229)
module17.set_input('var_1234', input_1234)
module17.set_input('var_1251', input_1251)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1221, input_1229, input_1234, input_1251, )
res19 = intrp19.evaluate()(input_1221, input_1229, input_1234, input_1251, )
res20 = intrp20.evaluate()(input_1221, input_1229, input_1234, input_1251, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
module21.set_input('var_1221', input_1221)
module21.set_input('var_1229', input_1229)
module21.set_input('var_1234', input_1234)
module21.set_input('var_1251', input_1251)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1221, input_1229, input_1234, input_1251, )
res23 = intrp23.evaluate()(input_1221, input_1229, input_1234, input_1251, )
res24 = intrp24.evaluate()(input_1221, input_1229, input_1234, input_1251, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()

'''21: TVMFuncCall
20: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
19: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
18: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
17: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
16: tvm::transform::Pass::operator()(tvm::IRModule) const
15: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
14: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
13: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
12: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
11: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
10: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
9: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
8: tvm::transform::Pass::operator()(tvm::IRModule) const
7: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
6: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::Pass::operator()(tvm::IRModule) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
0: tvm::DiagnosticContext::Render()

'''