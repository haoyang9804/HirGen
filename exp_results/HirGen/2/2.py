import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_6 = relay.var("var_6", dtype = "uint16", shape = (6, 10))#candidate|6|(6, 10)|var|uint16
var_7 = relay.var("var_7", dtype = "uint16", shape = (6, 10))#candidate|7|(6, 10)|var|uint16
bop_8 = relay.right_shift(var_6.astype('uint16'), relay.reshape(var_7.astype('uint16'), relay.shape_of(var_6))) # shape=(6, 10)
output = relay.Tuple([bop_8,])
output2 = relay.Tuple([bop_8,])
func_12 = relay.Function([var_6,var_7,], output)
mod['func_12'] = func_12
mod = relay.transform.InferType()(mod)
var_13 = relay.var("var_13", dtype = "uint16", shape = (6, 10))#candidate|13|(6, 10)|var|uint16
var_14 = relay.var("var_14", dtype = "uint16", shape = (6, 10))#candidate|14|(6, 10)|var|uint16
output = func_12(var_13,var_14,)
func_15 = relay.Function([var_13,var_14,], output)
mutated_mod['func_15'] = func_15
mutated_mod = relay.transform.InferType()(mutated_mod)
var_17 = relay.var("var_17", dtype = "float64", shape = (11, 13, 4))#candidate|17|(11, 13, 4)|var|float64
uop_18 = relay.atan(var_17.astype('float64')) # shape=(11, 13, 4)
bop_21 = relay.bitwise_or(var_17.astype('uint16'), relay.reshape(uop_18.astype('uint16'), relay.shape_of(var_17))) # shape=(11, 13, 4)
var_24 = relay.var("var_24", dtype = "float64", shape = (11, 13, 4))#candidate|24|(11, 13, 4)|var|float64
bop_25 = relay.maximum(var_17.astype('uint8'), relay.reshape(var_24.astype('uint8'), relay.shape_of(var_17))) # shape=(11, 13, 4)
bop_30 = relay.less(uop_18.astype('bool'), relay.reshape(var_17.astype('bool'), relay.shape_of(uop_18))) # shape=(11, 13, 4)
uop_33 = relay.acosh(var_24.astype('float32')) # shape=(11, 13, 4)
uop_38 = relay.tan(uop_33.astype('float32')) # shape=(11, 13, 4)
func_12_call = mod.get_global_var('func_12')
func_15_call = mutated_mod.get_global_var('func_15')
var_41 = relay.var("var_41", dtype = "uint16", shape = (3, 20))#candidate|41|(3, 20)|var|uint16
call_40 = relay.TupleGetItem(func_12_call(relay.reshape(var_41.astype('uint16'), [6, 10]), relay.reshape(var_41.astype('uint16'), [6, 10]), ), 0)
call_42 = relay.TupleGetItem(func_15_call(relay.reshape(var_41.astype('uint16'), [6, 10]), relay.reshape(var_41.astype('uint16'), [6, 10]), ), 0)
uop_43 = relay.sinh(uop_38.astype('float64')) # shape=(11, 13, 4)
func_12_call = mod.get_global_var('func_12')
func_15_call = mutated_mod.get_global_var('func_15')
call_45 = relay.TupleGetItem(func_12_call(relay.reshape(call_40.astype('uint16'), [6, 10]), relay.reshape(var_41.astype('uint16'), [6, 10]), ), 0)
call_46 = relay.TupleGetItem(func_15_call(relay.reshape(call_40.astype('uint16'), [6, 10]), relay.reshape(var_41.astype('uint16'), [6, 10]), ), 0)
bop_47 = relay.bitwise_and(uop_38.astype('int64'), relay.reshape(var_24.astype('int64'), relay.shape_of(uop_38))) # shape=(11, 13, 4)
uop_50 = relay.asinh(uop_43.astype('float64')) # shape=(11, 13, 4)
var_54 = relay.var("var_54", dtype = "float64", shape = (11, 13, 4))#candidate|54|(11, 13, 4)|var|float64
bop_55 = relay.logical_and(uop_50.astype('bool'), relay.reshape(var_54.astype('bool'), relay.shape_of(uop_50))) # shape=(11, 13, 4)
bop_58 = relay.not_equal(uop_50.astype('bool'), relay.reshape(var_17.astype('bool'), relay.shape_of(uop_50))) # shape=(11, 13, 4)
bop_61 = relay.less(bop_55.astype('bool'), relay.reshape(uop_33.astype('bool'), relay.shape_of(bop_55))) # shape=(11, 13, 4)
uop_64 = relay.exp(uop_50.astype('float32')) # shape=(11, 13, 4)
var_66 = relay.var("var_66", dtype = "float32", shape = (11, 13, 4))#candidate|66|(11, 13, 4)|var|float32
bop_67 = relay.subtract(uop_64.astype('float64'), relay.reshape(var_66.astype('float64'), relay.shape_of(uop_64))) # shape=(11, 13, 4)
var_71 = relay.var("var_71", dtype = "bool", shape = (11, 13, 4))#candidate|71|(11, 13, 4)|var|bool
bop_72 = relay.logical_xor(bop_55.astype('int64'), relay.reshape(var_71.astype('int64'), relay.shape_of(bop_55))) # shape=(11, 13, 4)
output = relay.Tuple([bop_21,bop_25,bop_30,call_40,var_41,call_45,bop_47,bop_58,bop_61,bop_67,bop_72,])
output2 = relay.Tuple([bop_21,bop_25,bop_30,call_42,var_41,call_46,bop_47,bop_58,bop_61,bop_67,bop_72,])
func_77 = relay.Function([var_17,var_24,var_41,var_54,var_66,var_71,], output)
mod['func_77'] = func_77
mod = relay.transform.InferType()(mod)
mutated_mod['func_77'] = func_77
mutated_mod = relay.transform.InferType()(mutated_mod)
func_77_call = mutated_mod.get_global_var('func_77')
var_79 = relay.var("var_79", dtype = "float64", shape = (11, 13, 4))#candidate|79|(11, 13, 4)|var|float64
var_80 = relay.var("var_80", dtype = "float64", shape = (11, 13, 4))#candidate|80|(11, 13, 4)|var|float64
var_81 = relay.var("var_81", dtype = "uint16", shape = (3, 20))#candidate|81|(3, 20)|var|uint16
var_82 = relay.var("var_82", dtype = "float64", shape = (11, 13, 4))#candidate|82|(11, 13, 4)|var|float64
var_83 = relay.var("var_83", dtype = "float32", shape = (11, 13, 4))#candidate|83|(11, 13, 4)|var|float32
var_84 = relay.var("var_84", dtype = "bool", shape = (11, 13, 4))#candidate|84|(11, 13, 4)|var|bool
call_78 = func_77_call(var_79,var_80,var_81,var_82,var_83,var_84,)
output = call_78
func_85 = relay.Function([var_79,var_80,var_81,var_82,var_83,var_84,], output)
mutated_mod['func_85'] = func_85
mutated_mod = relay.transform.InferType()(mutated_mod)
var_91 = relay.var("var_91", dtype = "float64", shape = (10, 10, 8))#candidate|91|(10, 10, 8)|var|float64
uop_92 = relay.atanh(var_91.astype('float64')) # shape=(10, 10, 8)
uop_95 = relay.cos(uop_92.astype('float32')) # shape=(10, 10, 8)
bop_98 = relay.less_equal(uop_95.astype('bool'), relay.reshape(uop_92.astype('bool'), relay.shape_of(uop_95))) # shape=(10, 10, 8)
bop_101 = relay.bitwise_and(uop_95.astype('uint32'), relay.reshape(bop_98.astype('uint32'), relay.shape_of(uop_95))) # shape=(10, 10, 8)
bop_106 = relay.logical_xor(bop_98.astype('int16'), relay.reshape(var_91.astype('int16'), relay.shape_of(bop_98))) # shape=(10, 10, 8)
bop_109 = relay.mod(bop_106.astype('float32'), relay.reshape(var_91.astype('float32'), relay.shape_of(bop_106))) # shape=(10, 10, 8)
uop_112 = relay.rsqrt(uop_92.astype('float32')) # shape=(10, 10, 8)
bop_115 = relay.minimum(bop_109.astype('uint32'), relay.reshape(uop_95.astype('uint32'), relay.shape_of(bop_109))) # shape=(10, 10, 8)
output = relay.Tuple([bop_101,uop_112,bop_115,])
output2 = relay.Tuple([bop_101,uop_112,bop_115,])
func_118 = relay.Function([var_91,], output)
mod['func_118'] = func_118
mod = relay.transform.InferType()(mod)
var_119 = relay.var("var_119", dtype = "float64", shape = (10, 10, 8))#candidate|119|(10, 10, 8)|var|float64
output = func_118(var_119)
func_120 = relay.Function([var_119], output)
mutated_mod['func_120'] = func_120
mutated_mod = relay.transform.InferType()(mutated_mod)
const_127 = relay.const([[[-3.798230,6.238513,-2.457918,-9.344310,-3.798812,-0.592769,-0.444601,7.126589,6.414708,0.901452,9.631957,-4.602150,-8.793155,-0.033203,-6.997215],[1.390166,-2.859879,-9.384727,5.231846,5.609052,1.395704,-6.158397,5.150989,-6.003758,-1.833250,1.576761,8.170263,1.333838,-4.588938,-0.510547],[-8.212170,6.595269,-5.977374,4.001841,-7.863587,-0.719172,5.934761,-6.119719,-6.762964,7.832589,-5.067847,-1.856757,-3.557701,-1.325723,-1.030382],[5.711933,-3.278500,3.752373,4.813345,3.905669,5.996610,9.280855,-3.498911,-3.546034,-6.709236,7.812329,-7.787783,7.051320,-9.156368,-2.372732],[-8.847973,5.902577,-8.556973,6.431705,9.459380,-0.255505,-1.162249,2.241367,4.325230,-8.893602,-3.167825,-5.957611,4.700303,4.649944,0.464450],[-3.713030,-5.501356,8.765725,4.101510,-5.378850,3.513585,7.916020,-8.678972,-8.405062,-9.302383,-4.923723,4.849622,-5.449954,-2.386271,-2.212359],[5.594294,5.934151,-4.071182,-7.638181,7.346911,-0.626939,7.813956,0.685918,3.596805,0.283568,-0.622325,-3.472926,7.262438,-6.760683,-0.487057],[6.046988,-2.241019,8.544989,1.906572,-5.443311,-2.311170,0.154945,-0.887482,-4.093100,9.970992,-1.283069,2.406712,8.936472,6.755394,-9.613446],[-6.570995,5.009225,-6.593065,2.732515,-1.308722,-9.053453,-8.140788,2.825317,-8.495169,-0.941397,2.171211,2.510329,6.231387,7.282245,4.052304],[4.072663,-5.222392,-1.584987,3.523180,-1.361999,2.044752,2.480574,1.918905,-6.490141,-4.563593,6.344769,3.652764,-9.142480,1.797568,2.208507],[8.695317,-0.259874,0.573104,-2.820216,-5.659995,9.783989,6.449601,7.788609,2.519748,4.202399,1.628520,5.237287,1.640321,2.584488,-4.529549],[8.721981,8.075365,5.219875,-5.427135,-7.927330,-3.057029,-6.644894,-3.073165,-1.844817,-8.237162,3.489365,-4.394668,-4.912644,-9.677779,-1.979830]],[[1.839591,-7.270551,4.776246,0.307203,1.778975,-5.959183,6.196080,6.481798,3.778567,0.321746,0.667657,4.785718,-1.896124,-6.364581,3.909606],[3.725954,-2.553149,-7.125426,7.207688,-2.471222,8.484259,-4.868359,0.140893,-0.492380,-4.736497,-4.372435,-7.992281,6.179314,-6.142946,0.078536],[3.902579,-3.061840,-6.218815,9.265453,-6.566723,-8.766607,9.987225,8.372902,-8.722809,9.324220,8.136697,3.206814,5.114215,-6.023552,-7.040976],[1.055948,-4.205681,6.364423,-8.369599,-0.797115,-0.031030,-7.937795,-6.215164,7.597959,5.724211,0.423286,-1.475306,-2.931194,6.774612,9.012508],[-3.718451,8.930097,-3.079631,6.041659,-2.013854,-3.976545,-8.837593,-8.743918,-3.582477,-4.880175,-4.155848,-8.965392,-1.215165,-0.588538,-2.958491],[9.000034,-6.872682,6.433353,6.885897,-7.045485,6.823179,4.231554,4.188269,-7.860854,9.956628,-2.340410,-7.744001,-4.137756,7.458516,-0.918699],[4.552275,1.788888,9.565210,-8.678420,2.325473,-3.094298,7.987965,8.715448,4.528174,-4.661216,-3.432851,-9.809220,-9.659533,1.280990,2.650354],[5.882070,9.234343,-7.286600,3.730464,5.739381,9.444121,9.726073,6.254540,-8.062581,-9.025447,5.016184,1.973200,0.940313,2.311582,0.157711],[7.637250,1.284800,3.151127,3.866540,-2.007890,-1.297475,-0.679598,6.512201,-7.186504,-2.277872,-7.123402,0.823558,1.694209,4.556117,0.857623],[7.399627,7.637401,4.506938,-6.036453,-6.026779,1.626703,4.976938,-9.925410,-2.441055,-4.309379,-5.617091,-0.545531,-0.123139,-7.601601,-0.280977],[-4.022502,-4.174947,-5.097737,8.302780,-3.881317,-2.886032,-1.931696,8.363082,-1.221344,8.734768,-1.006522,5.932761,5.395205,-1.780134,-8.390666],[5.338070,-0.055577,-8.470901,7.604164,-5.754720,4.579333,3.535679,-0.884381,5.704113,-6.311892,6.638515,-1.467056,-8.140972,-0.658143,9.906554]],[[7.109237,1.130541,1.370993,2.002115,7.407162,-8.362627,-3.623401,-8.742296,1.319915,8.211658,-7.386690,-3.324826,3.954846,-3.729710,-3.776646],[-9.251919,-2.112212,7.392631,-6.906499,-9.586535,-4.377134,-2.541726,5.574661,3.839907,-6.734808,-6.508772,9.251635,4.255577,5.733215,-9.472127],[-6.862097,-2.400067,3.311615,-5.978291,-3.342542,7.192414,8.391530,8.708454,0.954155,9.450752,7.791351,-5.403593,8.446075,5.119632,-1.512193],[-9.884868,6.415485,9.316448,-1.974639,-3.039604,1.549335,-8.755718,2.045049,0.826377,-0.741206,8.548523,-0.648145,4.182871,1.615431,1.510070],[-3.564282,-5.514982,-5.628870,-5.862624,4.822008,7.973769,9.922404,-5.358802,7.538166,4.289706,-0.249264,7.506967,-1.324908,-9.682676,0.185354],[2.155845,0.599285,7.416968,-5.229928,2.421901,-8.384880,-7.093939,-2.881483,3.958697,-4.863929,2.739985,9.203590,4.926327,8.682553,1.899297],[6.888323,6.792818,2.525404,-5.700725,-2.057631,6.818710,-4.501965,-2.148017,-4.218496,-0.259966,-9.032410,-0.122225,-7.444105,-9.730787,5.951226],[7.941070,-5.710689,-6.311604,7.943736,3.456655,-6.780442,4.956312,-8.307834,2.294272,0.345817,2.355731,0.580452,8.382617,-7.407404,-3.013357],[8.601841,-5.184361,-8.616233,1.435512,-0.978552,8.434827,-3.789153,5.568739,0.975769,5.318935,4.092272,-1.320446,-3.193728,-5.334638,4.007510],[5.183469,-1.755363,0.374670,-8.791007,3.551591,1.495069,8.190070,4.655037,2.940687,2.414133,9.795312,3.285104,8.646500,4.731279,-2.374601],[-9.758434,1.478266,-0.864557,7.912378,-9.763638,2.695428,-2.229714,4.265198,9.055133,-1.840818,2.873956,4.683484,5.572832,3.628991,6.762725],[-8.487606,1.997090,-6.334767,-1.394732,-5.256749,-4.114463,-3.305583,-4.653229,-5.275251,-3.952451,-2.211905,-6.060947,4.315547,-5.066049,-7.467364]],[[-4.390550,-4.526105,7.942102,8.894653,-8.982665,-4.914463,8.872396,7.897275,-3.013757,-3.389923,-4.296195,-2.031383,-9.130620,2.127009,-0.263513],[-5.495171,-0.152576,-9.586903,-1.581084,4.171800,8.540802,5.392327,-8.459647,-7.915274,3.460272,-0.060992,1.740331,-8.067041,-3.497681,0.929223],[-7.279919,5.022138,-6.911797,-7.942416,-8.094875,1.156216,9.677989,-2.991722,-5.734329,-7.515545,1.949308,6.400631,9.280056,2.720763,9.103697],[1.727675,-3.851146,-6.653051,-4.667429,1.224978,-0.237518,9.617773,-1.525285,-7.211703,-7.703162,-2.659876,5.149349,1.060624,4.773626,-9.134957],[8.510247,-1.031186,-7.215997,-0.040086,4.480048,6.217054,-1.527791,7.959544,3.858462,7.438198,-0.303011,0.218169,-8.955108,4.041112,9.467581],[-3.041207,9.861741,2.815130,-0.453001,-4.460917,0.272136,3.339594,-3.186131,-7.755161,-0.227217,-8.027241,5.669568,-1.970954,-8.908317,-4.971667],[8.576244,-6.866171,8.326427,1.575732,8.487833,-8.645305,8.757107,-8.919823,-0.289500,6.340351,6.021585,-2.922929,-9.426330,-7.139526,-5.384744],[-3.740034,0.192114,-1.811346,-5.839942,-0.610199,7.095695,9.620108,1.284174,6.486126,-5.141176,-3.159734,-6.537832,6.022531,-8.174781,1.567341],[-3.121219,-0.119064,-4.117575,-0.528830,-5.065193,-8.023140,3.444234,8.569284,4.711217,2.891700,9.818846,9.383641,-0.131514,-9.696092,-6.597312],[3.653543,-8.281355,7.537180,-9.234005,1.700710,-2.068837,-3.006009,1.528665,-6.728436,-8.659499,4.415798,-9.476183,3.247812,6.342393,6.515061],[8.948334,-3.374821,-7.195583,-9.665155,8.303624,-0.002206,9.587002,-8.679054,-8.038492,-7.410190,-1.671060,-3.884922,-7.880127,3.780757,-5.863983],[-2.819707,7.840250,0.206823,-0.610887,-8.486858,6.770022,9.000862,3.460624,-8.509203,7.108967,3.908612,-5.821359,-3.705727,3.373269,-1.176777]]], dtype = "float64")#candidate|127|(4, 12, 15)|const|float64
var_128 = relay.var("var_128", dtype = "float64", shape = (4, 12, 15))#candidate|128|(4, 12, 15)|var|float64
bop_129 = relay.multiply(const_127.astype('float64'), relay.reshape(var_128.astype('float64'), relay.shape_of(const_127))) # shape=(4, 12, 15)
bop_132 = relay.greater(var_128.astype('bool'), relay.reshape(bop_129.astype('bool'), relay.shape_of(var_128))) # shape=(4, 12, 15)
output = relay.Tuple([bop_132,])
output2 = relay.Tuple([bop_132,])
func_137 = relay.Function([var_128,], output)
mod['func_137'] = func_137
mod = relay.transform.InferType()(mod)
var_138 = relay.var("var_138", dtype = "float64", shape = (4, 12, 15))#candidate|138|(4, 12, 15)|var|float64
output = func_137(var_138)
func_139 = relay.Function([var_138], output)
mutated_mod['func_139'] = func_139
mutated_mod = relay.transform.InferType()(mutated_mod)
const_164 = relay.const(-3, dtype = "uint8")#candidate|164|()|const|uint8
const_165 = relay.const([1,-6,-2,4,10,8,-9,-4,3,9], dtype = "uint8")#candidate|165|(10,)|const|uint8
bop_166 = relay.logical_xor(const_164.astype('uint8'), const_165.astype('uint8')) # shape=(10,)
bop_169 = relay.less_equal(const_165.astype('bool'), relay.reshape(bop_166.astype('bool'), relay.shape_of(const_165))) # shape=(10,)
output = bop_169
output2 = bop_169
func_174 = relay.Function([], output)
mod['func_174'] = func_174
mod = relay.transform.InferType()(mod)
mutated_mod['func_174'] = func_174
mutated_mod = relay.transform.InferType()(mutated_mod)
func_174_call = mutated_mod.get_global_var('func_174')
call_175 = func_174_call()
output = call_175
func_176 = relay.Function([], output)
mutated_mod['func_176'] = func_176
mutated_mod = relay.transform.InferType()(mutated_mod)
var_182 = relay.var("var_182", dtype = "float32", shape = ())#candidate|182|()|var|float32
uop_183 = relay.sigmoid(var_182.astype('float32')) # shape=()
output = relay.Tuple([uop_183,])
output2 = relay.Tuple([uop_183,])
func_189 = relay.Function([var_182,], output)
mod['func_189'] = func_189
mod = relay.transform.InferType()(mod)
mutated_mod['func_189'] = func_189
mutated_mod = relay.transform.InferType()(mutated_mod)
var_190 = relay.var("var_190", dtype = "float32", shape = ())#candidate|190|()|var|float32
func_189_call = mutated_mod.get_global_var('func_189')
call_191 = func_189_call(var_190)
output = call_191
func_192 = relay.Function([var_190], output)
mutated_mod['func_192'] = func_192
mutated_mod = relay.transform.InferType()(mutated_mod)
var_207 = relay.var("var_207", dtype = "int32", shape = (3, 8))#candidate|207|(3, 8)|var|int32
const_208 = relay.const([[-5,2,-9,9,-6,-5,-3,-1],[-4,-9,6,-3,-3,-4,2,-6],[-8,-8,-7,-1,1,-1,2,-9]], dtype = "int32")#candidate|208|(3, 8)|const|int32
bop_209 = relay.multiply(var_207.astype('int32'), relay.reshape(const_208.astype('int32'), relay.shape_of(var_207))) # shape=(3, 8)
func_118_call = mod.get_global_var('func_118')
func_120_call = mutated_mod.get_global_var('func_120')
var_213 = relay.var("var_213", dtype = "float64", shape = (800, 1))#candidate|213|(800, 1)|var|float64
call_212 = relay.TupleGetItem(func_118_call(relay.reshape(var_213.astype('float64'), [10, 10, 8])), 0)
call_214 = relay.TupleGetItem(func_120_call(relay.reshape(var_213.astype('float64'), [10, 10, 8])), 0)
bop_215 = relay.greater_equal(const_208.astype('bool'), relay.reshape(bop_209.astype('bool'), relay.shape_of(const_208))) # shape=(3, 8)
bop_218 = relay.less_equal(var_213.astype('bool'), relay.reshape(call_212.astype('bool'), relay.shape_of(var_213))) # shape=(800, 1)
bop_221 = relay.less_equal(var_213.astype('bool'), relay.reshape(call_214.astype('bool'), relay.shape_of(var_213))) # shape=(800, 1)
var_222 = relay.var("var_222", dtype = "bool", shape = (3, 8))#candidate|222|(3, 8)|var|bool
bop_223 = relay.add(bop_215.astype('int16'), relay.reshape(var_222.astype('int16'), relay.shape_of(bop_215))) # shape=(3, 8)
uop_229 = relay.sin(var_207.astype('float64')) # shape=(3, 8)
uop_233 = relay.log10(uop_229.astype('float32')) # shape=(3, 8)
output = relay.Tuple([bop_218,bop_223,uop_233,])
output2 = relay.Tuple([bop_221,bop_223,uop_233,])
func_235 = relay.Function([var_207,var_213,var_222,], output)
mod['func_235'] = func_235
mod = relay.transform.InferType()(mod)
mutated_mod['func_235'] = func_235
mutated_mod = relay.transform.InferType()(mutated_mod)
func_235_call = mutated_mod.get_global_var('func_235')
var_237 = relay.var("var_237", dtype = "int32", shape = (3, 8))#candidate|237|(3, 8)|var|int32
var_238 = relay.var("var_238", dtype = "float64", shape = (800, 1))#candidate|238|(800, 1)|var|float64
var_239 = relay.var("var_239", dtype = "bool", shape = (3, 8))#candidate|239|(3, 8)|var|bool
call_236 = func_235_call(var_237,var_238,var_239,)
output = call_236
func_240 = relay.Function([var_237,var_238,var_239,], output)
mutated_mod['func_240'] = func_240
mutated_mod = relay.transform.InferType()(mutated_mod)
var_242 = relay.var("var_242", dtype = "int32", shape = (2, 3, 7))#candidate|242|(2, 3, 7)|var|int32
var_243 = relay.var("var_243", dtype = "int32", shape = (2, 3, 7))#candidate|243|(2, 3, 7)|var|int32
bop_244 = relay.right_shift(var_242.astype('int32'), relay.reshape(var_243.astype('int32'), relay.shape_of(var_242))) # shape=(2, 3, 7)
var_249 = relay.var("var_249", dtype = "int32", shape = (2, 3, 7))#candidate|249|(2, 3, 7)|var|int32
bop_250 = relay.divide(var_242.astype('float32'), relay.reshape(var_249.astype('float32'), relay.shape_of(var_242))) # shape=(2, 3, 7)
bop_263 = relay.bitwise_or(bop_244.astype('uint16'), relay.reshape(var_242.astype('uint16'), relay.shape_of(bop_244))) # shape=(2, 3, 7)
uop_267 = relay.asinh(bop_244.astype('float64')) # shape=(2, 3, 7)
bop_269 = relay.logical_or(uop_267.astype('bool'), relay.reshape(bop_263.astype('bool'), relay.shape_of(uop_267))) # shape=(2, 3, 7)
bop_272 = relay.floor_mod(bop_263.astype('float64'), relay.reshape(var_243.astype('float64'), relay.shape_of(bop_263))) # shape=(2, 3, 7)
func_235_call = mod.get_global_var('func_235')
func_240_call = mutated_mod.get_global_var('func_240')
const_277 = relay.const([-4,-5,-3,6,-6,9,-3,-6,5,4,-4,-10,-3,-2,-2,-10,9,9,8,6,-6,-5,7,8], dtype = "int32")#candidate|277|(24,)|const|int32
const_278 = relay.const([-3.317625,-7.356979,-2.600514,8.645911,8.379164,-9.601334,-0.051123,-3.861237,7.447723,-0.697757,8.269985,-2.548465,8.944884,-0.987964,-6.691429,4.313792,-8.206064,6.017827,8.171493,4.835295,2.147876,-8.383998,-9.992888,-0.920365,-4.667616,3.375860,-5.418906,5.295516,7.545357,-8.657016,3.939539,-9.886920,-3.828932,-9.718989,7.111450,-2.823720,6.704123,-1.233704,-8.163303,5.909905,5.657801,-9.484240,-2.279286,3.107170,1.317968,-9.981684,-1.909388,9.260520,-1.524411,-5.071192,6.958738,8.581414,-1.229865,9.799683,-8.725829,6.928749,4.012633,9.300023,9.054706,3.086845,-7.580859,0.485898,0.937495,0.576865,-1.281482,6.500628,9.332771,-8.323536,-9.795701,-1.415017,-0.622161,5.308572,3.132731,5.488310,1.259702,-1.466417,-9.150477,-9.309993,-2.930745,-5.328617,-6.063609,-3.173317,-7.143903,8.604598,-9.365192,5.163125,0.962275,-1.313114,7.980812,1.056513,3.173768,-9.696075,7.622388,9.946268,2.039276,-1.752238,7.853302,6.902233,8.544022,-8.913061,-4.886428,-8.844703,-4.518191,-6.005554,-4.677887,7.046532,6.784884,-7.476405,-7.217605,-2.187140,1.930925,8.264421,-5.236453,-5.080344,3.155149,4.207119,-8.900362,6.968774,8.083092,-1.282730,8.289871,8.651614,5.163161,8.982044,3.471951,5.869187,-2.794877,5.236633,6.886393,-7.578877,-9.836735,-9.437743,7.187608,-5.488050,-6.959634,9.112339,-2.690874,-6.752192,-2.018947,2.774073,-7.313273,-6.460879,-2.706936,3.153723,7.816794,-4.341600,1.172810,-4.062638,0.277515,7.062139,0.165546,6.843107,2.348384,5.745954,-7.621155,9.307947,-0.442589,8.463326,0.432517,-2.386726,4.767752,9.278579,-7.665111,4.631074,-5.774183,4.175905,9.140555,2.578561,-3.724196,-5.858045,8.640828,2.512964,8.232953,-6.696296,2.604444,5.505261,-3.722181,-6.904786,-7.303611,-5.620786,-1.120692,-7.142095,-8.041027,7.326936,9.063372,3.417867,6.527028,-2.130547,-0.589403,-4.695152,7.317742,-7.091532,-0.688606,-2.178072,-5.749531,7.743881,-1.428400,2.119411,5.191193,-6.355662,-1.627195,3.596903,-5.666237,4.181517,2.142000,3.700559,9.585892,-4.677536,-4.338437,0.392214,5.760056,4.766469,-5.419795,-8.861726,3.209205,-7.932249,2.979736,-0.541598,6.354376,-9.121817,6.047535,-2.842445,1.899112,-5.214811,9.234081,-4.833634,-5.132635,7.420941,-2.586737,-1.588006,-8.159703,-8.662694,-7.532390,6.441208,-4.245876,-1.402006,9.675095,-3.294494,8.532442,-8.429401,-3.298009,6.498535,2.078994,-7.462239,0.669503,7.605882,0.167706,3.215315,-7.450445,-7.919520,-9.814353,-7.115313,1.694977,-3.285348,5.915168,7.316518,4.873317,-2.185274,2.175140,9.136176,9.053659,-5.728974,-8.393313,0.408286,8.100045,0.805391,-2.352592,9.332839,-5.335415,4.021353,9.855611,-2.422192,3.858975,6.038892,5.208823,0.556607,3.511157,6.917279,6.161383,6.648555,-1.953480,-6.544290,-5.240261,-7.631621,3.084036,7.916416,6.598631,-9.867781,-5.788085,5.534044,-0.083544,8.951142,1.487396,2.783220,0.625717,2.026027,1.315616,-0.729664,2.069841,-0.684875,-3.625555,2.550023,9.756529,3.915272,1.680518,5.193419,9.439424,-3.321891,-4.052433,-4.220806,-1.697534,9.881263,7.438500,1.028432,0.273655,-0.656161,3.926157,6.300066,3.515939,1.157523,3.134160,-3.440720,7.852813,8.803104,-1.776665,7.626576,0.141780,-1.692762,-9.628672,-4.252554,9.313990,-3.954488,-2.049944,-9.622706,-3.682727,9.620291,-3.112122,-2.530221,-9.100688,5.598428,9.048860,4.679980,-2.186880,-0.164078,5.265806,-9.762953,1.018588,-6.301747,-0.984890,4.935262,-2.046125,-5.260709,-8.341857,-2.713095,2.220996,0.631073,-4.409384,3.555920,-7.286932,4.698971,-8.485700,-0.662593,-9.303987,-1.295898,4.284133,1.478206,-1.509268,4.685480,3.038915,5.592575,8.858638,5.387705,5.073360,-9.838135,-5.767188,9.970973,6.296712,-9.351029,-0.132474,-5.126088,-0.104828,5.683862,-4.452536,1.982186,-3.229595,-7.855689,7.995121,9.676068,-7.602886,-3.965860,-2.616549,-9.034475,-0.794330,7.870026,7.890554,-0.339568,-4.428629,-8.718896,-5.329567,-0.998493,-9.035086,9.813099,-9.918203,-5.402720,-0.287254,-2.166228,-9.603635,7.981569,0.188019,-8.089681,-3.123813,1.801919,-7.202110,0.819656,7.476952,-0.089200,-5.073450,-8.675657,-6.147806,-4.247357,3.567706,4.033253,6.785342,-0.002187,-3.206011,1.975044,-8.787339,0.472555,-1.031813,4.838300,-5.492510,3.252489,7.756431,0.933634,-4.684146,5.429546,-0.026611,4.727167,6.050351,3.596579,-3.718603,-0.469499,4.380459,-5.842282,2.214478,7.459105,6.915943,-8.976007,-3.200849,-7.319852,7.558572,2.032686,4.790818,7.716083,-2.495016,-0.116829,8.560153,3.689803,-8.237202,-0.432496,-2.729565,8.162069,-7.562774,-9.871347,5.751918,8.504444,-3.742374,7.261366,-8.824365,-9.446770,1.131031,2.278735,-5.170444,6.752645,-1.114394,-4.949546,9.716124,-6.681234,9.496059,6.588657,-6.779347,-9.916396,1.557935,-3.140131,-3.875760,-2.201349,4.196227,4.424343,1.528100,-6.746375,-1.039899,-7.774846,-8.053371,-3.476927,1.358486,-0.626334,-4.795638,5.946542,-9.546406,3.444107,-3.664902,-6.679926,-1.518354,2.396334,-7.206152,2.181984,-4.872859,6.105434,9.493196,3.035396,1.908623,-7.486770,-0.652997,2.980353,0.539894,2.222173,-5.795274,0.603234,1.021894,-8.625672,-7.669145,0.840917,7.189745,0.983111,-4.158525,-1.706086,-4.741259,7.658338,-6.424587,-9.381816,-6.255561,9.687460,7.556919,6.680456,-6.351659,0.322916,1.071621,6.886819,6.299682,8.489855,5.299153,0.601232,-2.835056,-6.436933,0.142705,-9.216341,3.367206,-9.340514,-7.417876,2.761864,-7.084279,8.574960,5.699948,-3.771094,9.524982,-1.149761,1.663976,6.711024,4.871997,-7.951674,-4.991565,-0.824420,4.694390,-8.090558,-1.893569,-6.970016,-1.655630,-8.318589,-0.192954,-3.702782,5.231234,8.771569,-3.197675,-1.062095,-5.913905,-9.353615,-6.339979,-7.795500,-5.864433,2.679310,0.793550,2.573325,-7.362930,5.812138,-8.549403,-8.549931,1.475968,8.630430,-7.987934,2.087189,-9.761215,3.301922,-4.761507,-4.600928,6.513316,3.651210,1.644981,-6.767541,-3.137875,9.231854,-2.415211,-3.883093,7.541287,0.710266,-8.901205,-2.878166,9.280832,2.740647,-1.825297,-2.970579,7.633910,-5.728038,-3.258856,-4.325061,-7.436080,7.120359,-9.904811,-8.411719,2.458245,8.830900,-2.482246,1.516070,-3.606050,7.914411,-3.236449,-9.224721,7.105822,4.287994,3.584615,7.877184,4.893574,-6.488480,-1.535215,0.157854,7.292028,8.249228,-5.652197,1.048619,1.570936,5.630545,-7.659393,-6.315580,-0.432265,5.892137,9.568323,-0.948153,0.769018,-9.412406,3.834609,-1.363041,9.329003,5.087814,-7.093767,-2.532433,6.864233,2.191903,1.876049,-8.892449,6.980736,4.032781,-6.131603,5.001881,9.408709,9.958944,7.061806,1.857946,-0.904795,0.315033,8.426832,-5.596394,1.202367,-6.588105,6.121024,2.010204,-0.822420,-0.481154,-1.470379,-1.786388,3.097941,-7.455358,3.545524,9.206897,-8.914885,-0.251943,-8.862825,1.961052,2.022785,-7.213293,-5.347420,2.926265,3.122463,3.778375,-9.849427,0.361357,4.149606,-1.632505,0.255093,-9.154893,-7.168809,3.314753,-4.909929,4.227164,-6.263643,-0.323996,0.836269,3.987417,4.542672,-1.622527,-6.371230,-3.119197,1.649393,8.336684,-1.396404,8.097681,-3.282841,-3.812663,8.676784,-6.862779,4.536590,-4.147101,7.928024,7.526448,-5.814667,-3.784016,0.928861,-9.305254,7.664856,1.653307,-4.500523,4.209196,7.533727,9.712509,1.529559,-9.842480,-9.089772,9.096514,-3.855643,1.418623,-2.164866,-2.365162,-7.869131,-8.052721,-6.251582,4.556812,-1.655749,8.786898,-0.100940,-2.133954,7.266448,8.862107,1.488479,6.466149,9.099172,-8.700368,-6.513361,-5.306374,-6.702220,-5.623363,-8.735719,4.031719,-1.244839,8.670137,5.337425,-1.031402,-7.666653,-8.763290,-4.530688,-4.404027,-0.251715,1.974294,2.582387,9.929712,3.765582,-0.535022,-5.697766,-3.444273,-1.926634,6.960714,-6.607387,-5.923904,6.625652,-9.193713,-9.936845,-3.659401,-0.062244,9.185948,9.448874,2.313038,2.892153,-7.089398,1.405326,-1.713897,-2.089319,2.907720,-6.059628,-4.251110,-8.534851,9.607019,2.045280,-3.461517], dtype = "float64")#candidate|278|(800,)|const|float64
call_276 = relay.TupleGetItem(func_235_call(relay.reshape(const_277.astype('int32'), [3, 8]), relay.reshape(const_278.astype('float64'), [800, 1]), relay.reshape(const_277.astype('bool'), [3, 8]), ), 1)
call_279 = relay.TupleGetItem(func_240_call(relay.reshape(const_277.astype('int32'), [3, 8]), relay.reshape(const_278.astype('float64'), [800, 1]), relay.reshape(const_277.astype('bool'), [3, 8]), ), 1)
uop_280 = relay.cosh(bop_269.astype('float32')) # shape=(2, 3, 7)
var_282 = relay.var("var_282", dtype = "float32", shape = (2, 3, 7))#candidate|282|(2, 3, 7)|var|float32
bop_283 = relay.logical_xor(uop_280.astype('int8'), relay.reshape(var_282.astype('int8'), relay.shape_of(uop_280))) # shape=(2, 3, 7)
const_286 = relay.const([[[8.446571,2.838843,3.722910,9.995078,3.997515,-6.368565,-1.692755],[5.053062,8.539249,8.011013,-1.785498,-1.507599,5.213450,7.428651],[6.600902,3.705674,9.099946,-4.569910,-4.760730,5.566248,-9.966721]],[[1.339629,-4.339779,-9.043092,7.266195,-7.480184,1.652738,-2.817103],[-5.191705,0.346867,-9.280330,2.509491,6.822715,-4.515131,5.915653],[9.157637,-0.773566,-9.240520,6.653270,-6.803441,4.837968,-4.221002]]], dtype = "float32")#candidate|286|(2, 3, 7)|const|float32
bop_287 = relay.equal(uop_280.astype('bool'), relay.reshape(const_286.astype('bool'), relay.shape_of(uop_280))) # shape=(2, 3, 7)
const_290 = relay.const([[[6,-7,3,5,6,9,-3],[7,4,9,9,8,10,-3],[-1,8,5,6,-9,-2,-2]],[[-10,9,-6,-3,2,-4,1],[-6,-5,-5,8,10,-8,4],[3,10,-10,3,2,2,10]]], dtype = "int8")#candidate|290|(2, 3, 7)|const|int8
bop_291 = relay.floor_divide(bop_283.astype('float64'), relay.reshape(const_290.astype('float64'), relay.shape_of(bop_283))) # shape=(2, 3, 7)
const_294 = relay.const([[[2,-8,9,-7,6,1,6],[-2,9,9,2,6,-1,6],[6,5,7,9,5,-5,6]],[[2,-3,8,-6,9,1,3],[-6,5,-10,10,-4,-3,8],[9,3,6,8,9,-9,9]]], dtype = "int32")#candidate|294|(2, 3, 7)|const|int32
bop_295 = relay.greater(bop_244.astype('bool'), relay.reshape(const_294.astype('bool'), relay.shape_of(bop_244))) # shape=(2, 3, 7)
uop_298 = relay.atan(uop_267.astype('float32')) # shape=(2, 3, 7)
const_302 = relay.const([[[-4.064099,1.156838,8.212491,-3.788426,2.167048,-2.770762,-2.692605],[0.319780,8.478159,6.267140,2.099117,3.146507,-9.918096,4.655406],[-0.653117,-4.453797,0.366949,8.408072,-5.101034,5.201946,-2.342770]],[[-9.700550,1.996858,-4.094507,3.352176,1.994567,-9.423029,8.338918],[4.113243,-7.944122,1.347368,-1.771994,-2.930236,9.435183,8.191221],[-8.094572,6.287104,-4.014811,-6.619844,9.587096,1.405409,-1.581680]]], dtype = "float32")#candidate|302|(2, 3, 7)|const|float32
bop_303 = relay.less_equal(uop_298.astype('bool'), relay.reshape(const_302.astype('bool'), relay.shape_of(uop_298))) # shape=(2, 3, 7)
const_307 = relay.const([[[True,False,False,True,False,True,True],[True,False,True,True,True,True,False],[False,False,False,True,True,True,False]],[[True,True,False,True,False,False,True],[True,False,True,False,False,True,True],[False,False,False,True,False,True,False]]], dtype = "bool")#candidate|307|(2, 3, 7)|const|bool
bop_308 = relay.multiply(bop_287.astype('int64'), relay.reshape(const_307.astype('int64'), relay.shape_of(bop_287))) # shape=(2, 3, 7)
output = relay.Tuple([bop_250,bop_272,call_276,const_277,const_278,bop_291,bop_295,bop_303,bop_308,])
output2 = relay.Tuple([bop_250,bop_272,call_279,const_277,const_278,bop_291,bop_295,bop_303,bop_308,])
func_312 = relay.Function([var_242,var_243,var_249,var_282,], output)
mod['func_312'] = func_312
mod = relay.transform.InferType()(mod)
mutated_mod['func_312'] = func_312
mutated_mod = relay.transform.InferType()(mutated_mod)
func_312_call = mutated_mod.get_global_var('func_312')
var_314 = relay.var("var_314", dtype = "int32", shape = (2, 3, 7))#candidate|314|(2, 3, 7)|var|int32
var_315 = relay.var("var_315", dtype = "int32", shape = (2, 3, 7))#candidate|315|(2, 3, 7)|var|int32
var_316 = relay.var("var_316", dtype = "int32", shape = (2, 3, 7))#candidate|316|(2, 3, 7)|var|int32
var_317 = relay.var("var_317", dtype = "float32", shape = (2, 3, 7))#candidate|317|(2, 3, 7)|var|float32
call_313 = func_312_call(var_314,var_315,var_316,var_317,)
output = call_313
func_318 = relay.Function([var_314,var_315,var_316,var_317,], output)
mutated_mod['func_318'] = func_318
mutated_mod = relay.transform.InferType()(mutated_mod)
var_333 = relay.var("var_333", dtype = "int16", shape = (15, 2, 8))#candidate|333|(15, 2, 8)|var|int16
var_334 = relay.var("var_334", dtype = "int16", shape = (15, 2, 8))#candidate|334|(15, 2, 8)|var|int16
bop_335 = relay.multiply(var_333.astype('int16'), relay.reshape(var_334.astype('int16'), relay.shape_of(var_333))) # shape=(15, 2, 8)
bop_338 = relay.less(var_333.astype('bool'), relay.reshape(var_334.astype('bool'), relay.shape_of(var_333))) # shape=(15, 2, 8)
uop_341 = relay.log2(var_334.astype('float32')) # shape=(15, 2, 8)
uop_343 = relay.tan(uop_341.astype('float64')) # shape=(15, 2, 8)
bop_345 = relay.greater_equal(uop_343.astype('bool'), relay.reshape(var_334.astype('bool'), relay.shape_of(uop_343))) # shape=(15, 2, 8)
uop_348 = relay.rsqrt(bop_345.astype('float32')) # shape=(15, 2, 8)
bop_350 = relay.left_shift(uop_348.astype('uint16'), relay.reshape(var_334.astype('uint16'), relay.shape_of(uop_348))) # shape=(15, 2, 8)
func_137_call = mod.get_global_var('func_137')
func_139_call = mutated_mod.get_global_var('func_139')
const_354 = relay.const([-5.082955,-7.084945,-0.749882,-5.475609,-2.923667,5.665542,-2.053394,5.381447,8.104282,-1.827036,8.469548,-6.152552,0.837027,-6.188332,-2.001024,8.335894,-7.055547,4.800629,-6.570398,-9.082335,-7.644548,-6.439805,4.055953,-1.312816,-5.992704,-0.137977,2.311681,2.818607,-5.353783,1.154921,8.239760,3.461469,-3.292490,-9.360930,-5.489640,2.455930,5.438265,5.574913,8.605834,8.357427,8.674971,0.647731,8.839468,5.401553,4.046594,-3.030856,-1.634523,-3.506202,-1.522197,8.573225,4.962005,5.673711,-0.386399,-4.805912,-3.635795,-2.738775,2.079332,8.558680,-8.895856,9.855886,0.265065,5.203462,8.151291,6.107985,-1.022003,8.271012,6.884346,-0.615355,8.136164,-3.295859,3.616069,4.541481,-4.276499,3.016650,-0.023486,-9.261479,-9.750962,0.022346,4.914640,6.272787,9.497588,-6.216901,6.202171,2.507613,8.879678,-8.322302,-2.408653,5.655127,-9.635792,0.133682,7.419014,2.371470,8.360048,-2.607602,2.925669,0.869825,-8.791232,0.260744,-3.087703,-8.214623,-1.268073,-5.931878,9.544498,-1.812882,-9.533578,-8.195681,6.901097,1.093392,-6.141486,-0.604060,0.422027,-9.409759,6.769800,3.174106,-2.100360,7.558255,7.222344,3.766661,7.077142,-0.874284,-6.945930,-3.886492,-4.332547,-5.901054,7.906087,-9.036690,-0.119907,-3.932265,2.763538,-0.491859,5.674475,-1.222447,8.935854,4.195738,2.028127,0.449064,-6.618635,-9.557373,3.200754,1.016254,7.617659,-4.804491,6.840308,9.893692,-8.802089,-6.868133,8.725040,-1.632206,7.491484,8.170143,-2.773932,-5.284346,-2.474907,0.692447,9.177673,-0.375606,7.952135,3.749269,5.990645,7.085868,-1.894147,-7.889099,-9.475487,-4.102599,-0.582928,2.909469,-5.134843,-8.974492,-2.519068,5.508654,-8.230480,-4.026072,-1.529176,-5.082714,-2.904945,8.662305,-8.655055,-2.114530,7.423867,-3.749928,-0.011835,-9.666746,9.496691,-5.969955,-4.042014,0.565742,0.603886,-9.341455,4.784489,-7.379396,-6.942487,-6.268340,9.394815,-7.010586,-2.432346,-8.974916,-2.030172,0.467804,7.867733,7.944246,6.154830,5.738635,-7.705147,-1.783906,-4.897825,6.563983,4.059159,4.998172,-6.862400,2.901584,-6.801996,8.166796,-6.880833,-4.322331,-3.670292,8.202748,2.220227,3.753788,1.673080,5.438450,-1.666597,-2.032740,8.927559,-6.490892,0.134546,-5.068149,1.199149,-4.226583,-1.934959,-9.045841,-4.728975,8.769040,-5.236505,1.359199,-3.337839,3.947906,5.277662,-3.040400,-8.234837,-2.888994,-2.541973,5.329338,2.962655,3.820598,2.738190,-6.557817,-4.967557,7.612519,-9.061864,-3.210957,7.872724,4.871048,5.462875,7.776293,-8.066588,-6.215575,-3.536958,8.587372,7.077806,-7.233871,-5.397718,7.413457,-8.285728,3.380718,7.624544,1.416117,9.422885,-1.091551,1.885928,-8.887032,8.785117,-2.811360,2.671980,2.741843,8.126373,2.034912,1.012094,-0.912533,4.493631,-6.354193,2.349521,0.729390,4.092791,7.021380,-1.109317,-0.471862,-6.044552,3.794600,-2.771533,9.674033,-3.100982,8.145446,3.874052,3.870327,4.313879,2.715251,-5.707588,-5.680496,-1.276083,-7.817819,1.271130,6.573406,8.063925,2.305929,2.567631,0.088459,8.879395,7.082371,-7.656563,0.521806,1.483282,-4.322882,-4.240444,8.632596,7.613814,3.390701,-7.443870,-9.841524,3.108934,-7.610048,-9.689929,3.685438,-0.634865,-7.049356,9.259555,4.907888,0.301742,-9.517817,-2.278445,-9.699972,4.942225,-3.768191,-5.095488,-3.093609,0.252100,7.317451,-9.526032,8.399396,3.393667,-5.894069,-2.998695,3.665773,0.571260,6.377751,2.318004,6.665617,2.817547,3.303448,1.251351,4.843191,-7.865505,-1.969208,5.543875,0.300594,-3.180710,-8.202833,1.254084,-4.359658,5.857938,-8.980316,5.783484,-0.226861,-5.512313,0.779789,3.887148,-1.374446,2.047063,-4.971519,-4.368049,0.826976,9.753859,9.660275,-1.171345,-6.201298,8.208437,-3.899129,-7.221929,1.459208,-1.786125,-3.033859,-9.395869,6.817798,-4.988996,-8.642476,-8.351345,4.113432,7.377818,-7.307926,-9.383309,-5.792418,-8.501537,-3.826286,2.467147,0.644404,-4.641863,8.301680,-0.850052,-9.514497,-3.896302,6.090247,5.620545,3.959867,-2.733859,-2.288110,-2.213549,-6.797117,7.398127,7.202262,4.992360,4.800971,3.207067,-6.574400,3.549385,-4.684106,6.279747,-4.104973,-5.177646,-1.014520,-5.698988,5.210602,8.987505,0.869139,-5.188093,7.232633,0.737375,-1.252805,4.212500,-3.443475,4.254099,-5.622350,-7.128483,8.380170,-1.104989,6.818638,-5.880325,5.554408,6.190783,2.597923,-4.113958,8.030599,8.444263,-5.879700,-5.658432,2.063751,7.605860,-8.064169,9.310231,-1.382733,9.792565,-0.708791,-9.263419,0.061930,-5.749217,8.338771,7.490864,-3.566767,-5.866922,8.918155,8.808809,2.005536,4.141685,-2.510038,6.125827,-0.408164,6.868733,9.172686,4.715700,4.367444,0.856435,-7.048369,2.117640,6.738466,1.600629,-6.787810,9.285739,2.807832,8.254547,2.700481,-0.255887,-8.964809,-2.788383,5.661282,-8.984727,4.708321,1.498203,1.969676,-8.224497,0.633675,5.108705,-1.825063,5.853318,1.211571,-1.004252,0.786484,0.439887,-5.961205,6.792974,7.774618,-3.289590,0.130389,-6.458686,-3.390134,7.761803,-4.963387,9.327184,-2.193692,-5.014752,0.498651,-3.862200,6.139885,-4.294480,-9.766245,9.183020,-3.206748,-3.072199,9.312106,-3.514964,-6.250682,3.872983,-9.372600,2.159932,2.203602,7.608485,-4.111842,-5.277582,1.684730,5.975689,-3.496827,7.209375,-4.329591,8.698658,-5.052430,3.275253,7.695788,7.208874,8.149257,-3.595852,-0.315130,-5.941240,-8.584142,-4.414926,1.439919,4.357334,-3.012613,-8.613838,-5.475573,-2.727768,1.634508,4.828610,5.627075,3.694054,-6.849945,0.220038,3.115042,4.794740,-5.195460,5.751284,-5.678830,-9.353294,1.198376,9.621264,-8.744214,-1.051943,-1.982744,-6.348722,-4.812545,-7.144430,-8.517346,6.331540,9.893392,5.148489,-8.111093,-5.173704,3.328062,2.624778,2.236297,-1.414069,-2.457993,-3.755881,1.331259,-6.350504,-6.031725,-0.054330,7.678828,-9.773837,-0.094686,-3.536789,-3.831728,3.689470,7.322695,-3.739829,-8.485834,-6.668109,2.406879,9.168875,-4.677261,-6.211954,-2.321325,5.324979,-8.049215,3.362794,0.037835,1.753333,-1.139025,6.207645,3.201286,-0.798270,-1.559076,-0.858209,3.042657,-4.127079,-3.430927,-7.647490,2.744433,-5.592045,9.414358,9.477356,1.184538,-2.417994,8.691682,-3.962396,2.490451,-0.128218,6.354285,8.476586,-5.221835,-1.639934,-5.780147,-6.231669,-5.210573,2.538729,-3.666094,-3.538096,1.016883,1.381492,-6.976416,0.134943,-9.468306,-3.605373,9.881803,1.565639,5.530080,-2.430635,-9.209500,-0.932690,4.604626,0.025118,-7.153512,8.372220,-3.991627,-0.488891,-3.395816,4.280755,-7.513579,2.953668,5.091207,5.704884,-4.791140,5.654476,-5.762064,-3.334251,6.608849,4.755674,2.741709,-1.564038,7.260227,5.060660,-7.350259,2.270818,-9.794248,-2.907161,2.159906,-7.305768,9.770043,-1.143826,5.896326,5.639113,-6.323463,-0.886085,-5.002000,-9.786990,-0.040301,4.576502,-2.681115,2.692757,5.887357,-2.506821,9.882119,6.240277,-1.660536,7.878258,-3.599217,8.887074,2.099967,-8.153858,-7.790002,-5.330689,-5.742982,3.644527,-9.691180,4.743942,4.930597,-7.533147,1.794306,0.647980,7.579680,0.674511,-0.396447,1.781518,7.847383,9.126213,-5.991941,-0.951282,7.901211,8.229557,-5.118837,-7.747652,-3.724358,-8.429968,-8.558219], dtype = "float64")#candidate|354|(720,)|const|float64
call_353 = relay.TupleGetItem(func_137_call(relay.reshape(const_354.astype('float64'), [4, 12, 15])), 0)
call_355 = relay.TupleGetItem(func_139_call(relay.reshape(const_354.astype('float64'), [4, 12, 15])), 0)
bop_362 = relay.maximum(uop_343.astype('uint32'), relay.reshape(bop_338.astype('uint32'), relay.shape_of(uop_343))) # shape=(15, 2, 8)
bop_365 = relay.equal(bop_350.astype('bool'), relay.reshape(bop_338.astype('bool'), relay.shape_of(bop_350))) # shape=(15, 2, 8)
uop_368 = relay.acosh(uop_348.astype('float64')) # shape=(15, 2, 8)
var_370 = relay.var("var_370", dtype = "float64", shape = (15, 2, 8))#candidate|370|(15, 2, 8)|var|float64
bop_371 = relay.multiply(uop_368.astype('uint16'), relay.reshape(var_370.astype('uint16'), relay.shape_of(uop_368))) # shape=(15, 2, 8)
bop_374 = relay.less_equal(bop_371.astype('bool'), relay.reshape(bop_350.astype('bool'), relay.shape_of(bop_371))) # shape=(15, 2, 8)
bop_378 = relay.divide(bop_365.astype('float32'), relay.reshape(bop_335.astype('float32'), relay.shape_of(bop_365))) # shape=(15, 2, 8)
uop_381 = relay.cos(bop_374.astype('float64')) # shape=(15, 2, 8)
uop_387 = relay.asinh(uop_381.astype('float32')) # shape=(15, 2, 8)
uop_389 = relay.erf(uop_381.astype('float32')) # shape=(15, 2, 8)
bop_391 = relay.power(uop_381.astype('float64'), relay.reshape(bop_335.astype('float64'), relay.shape_of(uop_381))) # shape=(15, 2, 8)
var_394 = relay.var("var_394", dtype = "float64", shape = (15, 2, 8))#candidate|394|(15, 2, 8)|var|float64
bop_395 = relay.minimum(uop_381.astype('uint8'), relay.reshape(var_394.astype('uint8'), relay.shape_of(uop_381))) # shape=(15, 2, 8)
const_398 = relay.const([[[6,6,4,2,4,-4,-8,-5],[-3,-2,-9,4,-6,1,-7,-4]],[[8,-9,-5,6,-8,2,-7,5],[-5,6,-5,9,5,5,-3,-8]],[[-3,3,7,-9,-2,-3,8,-7],[-6,-7,5,6,6,-3,2,-9]],[[-8,5,4,4,-5,-4,-6,5],[4,-3,-10,9,2,-4,-5,1]],[[7,-1,-2,-8,-2,9,3,-10],[-8,8,-3,3,-10,10,-3,-9]],[[9,-3,4,9,6,-2,3,-10],[6,-10,-6,2,1,-3,5,7]],[[1,6,-3,-1,-4,-2,6,10],[9,-1,-3,2,7,10,-7,-5]],[[-9,6,-5,-3,-10,7,-6,-8],[-7,1,-1,5,10,9,4,-8]],[[6,-5,10,1,-4,4,3,6],[-10,-9,-1,9,2,1,-4,1]],[[4,3,7,-2,10,10,9,-3],[-2,-9,9,-8,-6,10,-9,-1]],[[8,-5,-8,3,-6,-1,-8,3],[1,7,-8,2,4,-5,3,-4]],[[-10,6,-7,-5,-2,7,3,2],[-9,-3,-3,-2,-6,-8,3,-8]],[[2,-10,-2,3,3,8,1,9],[10,-9,-8,-8,10,-1,-9,-7]],[[-4,-3,3,-4,7,2,1,-7],[7,4,7,-10,-9,1,2,10]],[[-6,-4,-8,-5,10,2,-3,4],[5,3,-9,10,-4,5,-8,1]]], dtype = "uint8")#candidate|398|(15, 2, 8)|const|uint8
bop_399 = relay.right_shift(bop_395.astype('int64'), relay.reshape(const_398.astype('int64'), relay.shape_of(bop_395))) # shape=(15, 2, 8)
var_402 = relay.var("var_402", dtype = "float32", shape = (15, 2, 8))#candidate|402|(15, 2, 8)|var|float32
bop_403 = relay.logical_and(uop_389.astype('bool'), relay.reshape(var_402.astype('bool'), relay.shape_of(uop_389))) # shape=(15, 2, 8)
output = relay.Tuple([call_353,const_354,bop_362,bop_378,uop_387,bop_391,bop_399,bop_403,])
output2 = relay.Tuple([call_355,const_354,bop_362,bop_378,uop_387,bop_391,bop_399,bop_403,])
func_409 = relay.Function([var_333,var_334,var_370,var_394,var_402,], output)
mod['func_409'] = func_409
mod = relay.transform.InferType()(mod)
var_410 = relay.var("var_410", dtype = "int16", shape = (15, 2, 8))#candidate|410|(15, 2, 8)|var|int16
var_411 = relay.var("var_411", dtype = "int16", shape = (15, 2, 8))#candidate|411|(15, 2, 8)|var|int16
var_412 = relay.var("var_412", dtype = "float64", shape = (15, 2, 8))#candidate|412|(15, 2, 8)|var|float64
var_413 = relay.var("var_413", dtype = "float64", shape = (15, 2, 8))#candidate|413|(15, 2, 8)|var|float64
var_414 = relay.var("var_414", dtype = "float32", shape = (15, 2, 8))#candidate|414|(15, 2, 8)|var|float32
output = func_409(var_410,var_411,var_412,var_413,var_414,)
func_415 = relay.Function([var_410,var_411,var_412,var_413,var_414,], output)
mutated_mod['func_415'] = func_415
mutated_mod = relay.transform.InferType()(mutated_mod)
const_422 = relay.const([[10,-8,-7,-10,4,2,-7,3,8,2]], dtype = "int8")#candidate|422|(1, 10)|const|int8
var_423 = relay.var("var_423", dtype = "int8", shape = (7, 10))#candidate|423|(7, 10)|var|int8
bop_424 = relay.right_shift(const_422.astype('int8'), var_423.astype('int8')) # shape=(7, 10)
uop_427 = relay.sqrt(bop_424.astype('float32')) # shape=(7, 10)
output = uop_427
output2 = uop_427
func_432 = relay.Function([var_423,], output)
mod['func_432'] = func_432
mod = relay.transform.InferType()(mod)
mutated_mod['func_432'] = func_432
mutated_mod = relay.transform.InferType()(mutated_mod)
var_433 = relay.var("var_433", dtype = "int8", shape = (7, 10))#candidate|433|(7, 10)|var|int8
func_432_call = mutated_mod.get_global_var('func_432')
call_434 = func_432_call(var_433)
output = call_434
func_435 = relay.Function([var_433], output)
mutated_mod['func_435'] = func_435
mutated_mod = relay.transform.InferType()(mutated_mod)
var_439 = relay.var("var_439", dtype = "float32", shape = (11, 13, 12))#candidate|439|(11, 13, 12)|var|float32
var_440 = relay.var("var_440", dtype = "float32", shape = (11, 13, 12))#candidate|440|(11, 13, 12)|var|float32
bop_441 = relay.greater(var_439.astype('bool'), relay.reshape(var_440.astype('bool'), relay.shape_of(var_439))) # shape=(11, 13, 12)
output = bop_441
output2 = bop_441
func_445 = relay.Function([var_439,var_440,], output)
mod['func_445'] = func_445
mod = relay.transform.InferType()(mod)
mutated_mod['func_445'] = func_445
mutated_mod = relay.transform.InferType()(mutated_mod)
func_445_call = mutated_mod.get_global_var('func_445')
var_447 = relay.var("var_447", dtype = "float32", shape = (11, 13, 12))#candidate|447|(11, 13, 12)|var|float32
var_448 = relay.var("var_448", dtype = "float32", shape = (11, 13, 12))#candidate|448|(11, 13, 12)|var|float32
call_446 = func_445_call(var_447,var_448,)
output = call_446
func_449 = relay.Function([var_447,var_448,], output)
mutated_mod['func_449'] = func_449
mutated_mod = relay.transform.InferType()(mutated_mod)
func_174_call = mod.get_global_var('func_174')
func_176_call = mutated_mod.get_global_var('func_176')
call_467 = func_174_call()
call_468 = func_174_call()
uop_484 = relay.sqrt(call_467.astype('float64')) # shape=(10,)
uop_486 = relay.sqrt(call_468.astype('float64')) # shape=(10,)
func_409_call = mod.get_global_var('func_409')
func_415_call = mutated_mod.get_global_var('func_415')
var_490 = relay.var("var_490", dtype = "int16", shape = (240,))#candidate|490|(240,)|var|int16
call_489 = relay.TupleGetItem(func_409_call(relay.reshape(var_490.astype('int16'), [15, 2, 8]), relay.reshape(var_490.astype('int16'), [15, 2, 8]), relay.reshape(var_490.astype('float64'), [15, 2, 8]), relay.reshape(var_490.astype('float64'), [15, 2, 8]), relay.reshape(var_490.astype('float32'), [15, 2, 8]), ), 0)
call_491 = relay.TupleGetItem(func_415_call(relay.reshape(var_490.astype('int16'), [15, 2, 8]), relay.reshape(var_490.astype('int16'), [15, 2, 8]), relay.reshape(var_490.astype('float64'), [15, 2, 8]), relay.reshape(var_490.astype('float64'), [15, 2, 8]), relay.reshape(var_490.astype('float32'), [15, 2, 8]), ), 0)
uop_492 = relay.acos(uop_484.astype('float64')) # shape=(10,)
uop_494 = relay.acos(uop_486.astype('float64')) # shape=(10,)
bop_495 = relay.floor_mod(uop_492.astype('float64'), relay.reshape(uop_484.astype('float64'), relay.shape_of(uop_492))) # shape=(10,)
bop_498 = relay.floor_mod(uop_494.astype('float64'), relay.reshape(uop_486.astype('float64'), relay.shape_of(uop_494))) # shape=(10,)
uop_499 = relay.erf(uop_492.astype('float32')) # shape=(10,)
uop_501 = relay.erf(uop_494.astype('float32')) # shape=(10,)
const_502 = relay.const([-2.398687,-2.351221,9.501026,6.113944,8.449804,4.778475,-2.883063,1.128492,-0.618461,-9.017316], dtype = "float64")#candidate|502|(10,)|const|float64
bop_503 = relay.maximum(uop_484.astype('float64'), relay.reshape(const_502.astype('float64'), relay.shape_of(uop_484))) # shape=(10,)
bop_506 = relay.maximum(uop_486.astype('float64'), relay.reshape(const_502.astype('float64'), relay.shape_of(uop_486))) # shape=(10,)
var_513 = relay.var("var_513", dtype = "float64", shape = (10,))#candidate|513|(10,)|var|float64
bop_514 = relay.add(uop_492.astype('int64'), relay.reshape(var_513.astype('int64'), relay.shape_of(uop_492))) # shape=(10,)
bop_517 = relay.add(uop_494.astype('int64'), relay.reshape(var_513.astype('int64'), relay.shape_of(uop_494))) # shape=(10,)
bop_518 = relay.logical_and(bop_503.astype('bool'), relay.reshape(bop_514.astype('bool'), relay.shape_of(bop_503))) # shape=(10,)
bop_521 = relay.logical_and(bop_506.astype('bool'), relay.reshape(bop_517.astype('bool'), relay.shape_of(bop_506))) # shape=(10,)
var_523 = relay.var("var_523", dtype = "float64", shape = (10,))#candidate|523|(10,)|var|float64
bop_524 = relay.minimum(uop_484.astype('int32'), relay.reshape(var_523.astype('int32'), relay.shape_of(uop_484))) # shape=(10,)
bop_527 = relay.minimum(uop_486.astype('int32'), relay.reshape(var_523.astype('int32'), relay.shape_of(uop_486))) # shape=(10,)
func_12_call = mod.get_global_var('func_12')
func_15_call = mutated_mod.get_global_var('func_15')
var_535 = relay.var("var_535", dtype = "uint16", shape = (60,))#candidate|535|(60,)|var|uint16
call_534 = relay.TupleGetItem(func_12_call(relay.reshape(var_535.astype('uint16'), [6, 10]), relay.reshape(var_535.astype('uint16'), [6, 10]), ), 0)
call_536 = relay.TupleGetItem(func_15_call(relay.reshape(var_535.astype('uint16'), [6, 10]), relay.reshape(var_535.astype('uint16'), [6, 10]), ), 0)
var_540 = relay.var("var_540", dtype = "float64", shape = (10,))#candidate|540|(10,)|var|float64
bop_541 = relay.greater(bop_495.astype('bool'), relay.reshape(var_540.astype('bool'), relay.shape_of(bop_495))) # shape=(10,)
bop_544 = relay.greater(bop_498.astype('bool'), relay.reshape(var_540.astype('bool'), relay.shape_of(bop_498))) # shape=(10,)
bop_545 = relay.bitwise_and(uop_499.astype('int16'), call_534.astype('int16')) # shape=(6, 10)
bop_548 = relay.bitwise_and(uop_501.astype('int16'), call_536.astype('int16')) # shape=(6, 10)
bop_551 = relay.divide(bop_545.astype('float32'), uop_499.astype('float32')) # shape=(6, 10)
bop_554 = relay.divide(bop_548.astype('float32'), uop_501.astype('float32')) # shape=(6, 10)
func_174_call = mod.get_global_var('func_174')
func_176_call = mutated_mod.get_global_var('func_176')
call_556 = func_174_call()
call_557 = func_174_call()
output = relay.Tuple([call_489,var_490,bop_518,bop_524,var_535,bop_541,bop_551,call_556,])
output2 = relay.Tuple([call_491,var_490,bop_521,bop_527,var_535,bop_544,bop_554,call_557,])
func_558 = relay.Function([var_490,var_513,var_523,var_535,var_540,], output)
mod['func_558'] = func_558
mod = relay.transform.InferType()(mod)
var_559 = relay.var("var_559", dtype = "int16", shape = (240,))#candidate|559|(240,)|var|int16
var_560 = relay.var("var_560", dtype = "float64", shape = (10,))#candidate|560|(10,)|var|float64
var_561 = relay.var("var_561", dtype = "float64", shape = (10,))#candidate|561|(10,)|var|float64
var_562 = relay.var("var_562", dtype = "uint16", shape = (60,))#candidate|562|(60,)|var|uint16
var_563 = relay.var("var_563", dtype = "float64", shape = (10,))#candidate|563|(10,)|var|float64
output = func_558(var_559,var_560,var_561,var_562,var_563,)
func_564 = relay.Function([var_559,var_560,var_561,var_562,var_563,], output)
mutated_mod['func_564'] = func_564
mutated_mod = relay.transform.InferType()(mutated_mod)
var_566 = relay.var("var_566", dtype = "uint64", shape = (6,))#candidate|566|(6,)|var|uint64
var_567 = relay.var("var_567", dtype = "uint64", shape = (6,))#candidate|567|(6,)|var|uint64
bop_568 = relay.equal(var_566.astype('bool'), relay.reshape(var_567.astype('bool'), relay.shape_of(var_566))) # shape=(6,)
bop_575 = relay.floor_mod(var_566.astype('float32'), relay.reshape(var_567.astype('float32'), relay.shape_of(var_566))) # shape=(6,)
func_558_call = mod.get_global_var('func_558')
func_564_call = mutated_mod.get_global_var('func_564')
const_579 = relay.const([3,-7,6,2,-7,-5,-1,-8,-9,5,-1,9,10,1,1,1,-7,2,8,-1,6,4,2,6,6,-3,6,4,-7,-3,-8,2,-3,-9,2,-8,7,-8,3,-2,9,-3,-9,-2,6,5,-8,-9,3,5,-9,6,4,-7,-9,-7,4,3,9,-10,-1,-8,1,-3,3,-2,1,-8,-1,4,-4,8,1,1,-1,4,5,-2,-7,-3,-10,-5,-4,-6,8,4,-10,-9,-8,-2,1,-10,10,-3,6,9,4,7,-9,-10,6,6,-10,9,-5,-6,9,-1,7,-5,-3,-9,2,-2,2,5,-7,3,6,-5,3,7,7,-10,-3,7,3,10,1,-4,5,-10,2,10,-7,1,6,1,-6,-8,-8,-7,-1,6,-1,7,-2,8,2,4,-1,-9,-2,10,5,-9,3,6,4,-7,4,1,-3,-10,5,4,8,4,-8,-10,-4,-6,6,2,3,5,3,3,-4,-1,-8,8,-2,6,9,-3,-6,2,2,-3,3,-4,3,4,-2,-8,-2,6,7,6,-9,-10,9,-8,6,-9,7,-9,5,-10,8,7,2,-6,7,-6,-10,-3,6,1,3,3,5,2,5,7,8,3,-9,-1,-10,5,1,8,-9,1,9,4,8,-6], dtype = "int16")#candidate|579|(240,)|const|int16
var_580 = relay.var("var_580", dtype = "float64", shape = (10, 1))#candidate|580|(10, 1)|var|float64
var_581 = relay.var("var_581", dtype = "uint16", shape = (60,))#candidate|581|(60,)|var|uint16
call_578 = relay.TupleGetItem(func_558_call(relay.reshape(const_579.astype('int16'), [240,]), relay.reshape(var_580.astype('float64'), [10,]), relay.reshape(var_580.astype('float64'), [10,]), relay.reshape(var_581.astype('uint16'), [60,]), relay.reshape(var_580.astype('float64'), [10,]), ), 4)
call_582 = relay.TupleGetItem(func_564_call(relay.reshape(const_579.astype('int16'), [240,]), relay.reshape(var_580.astype('float64'), [10,]), relay.reshape(var_580.astype('float64'), [10,]), relay.reshape(var_581.astype('uint16'), [60,]), relay.reshape(var_580.astype('float64'), [10,]), ), 4)
uop_590 = relay.sigmoid(bop_568.astype('float32')) # shape=(6,)
uop_593 = relay.log10(uop_590.astype('float32')) # shape=(6,)
bop_595 = relay.minimum(uop_590.astype('float64'), relay.reshape(bop_575.astype('float64'), relay.shape_of(uop_590))) # shape=(6,)
var_598 = relay.var("var_598", dtype = "float32", shape = (6,))#candidate|598|(6,)|var|float32
bop_599 = relay.multiply(uop_593.astype('int64'), relay.reshape(var_598.astype('int64'), relay.shape_of(uop_593))) # shape=(6,)
bop_603 = relay.logical_xor(var_567.astype('int16'), relay.reshape(bop_575.astype('int16'), relay.shape_of(var_567))) # shape=(6,)
var_608 = relay.var("var_608", dtype = "int64", shape = (6,))#candidate|608|(6,)|var|int64
bop_609 = relay.bitwise_xor(bop_599.astype('int32'), relay.reshape(var_608.astype('int32'), relay.shape_of(bop_599))) # shape=(6,)
uop_614 = relay.sin(bop_599.astype('float32')) # shape=(6,)
bop_620 = relay.right_shift(uop_614.astype('uint32'), relay.reshape(uop_590.astype('uint32'), relay.shape_of(uop_614))) # shape=(6,)
bop_623 = relay.divide(uop_614.astype('float64'), relay.reshape(bop_568.astype('float64'), relay.shape_of(uop_614))) # shape=(6,)
func_118_call = mod.get_global_var('func_118')
func_120_call = mutated_mod.get_global_var('func_120')
var_630 = relay.var("var_630", dtype = "float64", shape = (800, 1))#candidate|630|(800, 1)|var|float64
call_629 = relay.TupleGetItem(func_118_call(relay.reshape(var_630.astype('float64'), [10, 10, 8])), 0)
call_631 = relay.TupleGetItem(func_120_call(relay.reshape(var_630.astype('float64'), [10, 10, 8])), 0)
bop_634 = relay.logical_or(uop_590.astype('bool'), relay.reshape(bop_620.astype('bool'), relay.shape_of(uop_590))) # shape=(6,)
output = relay.Tuple([call_578,const_579,var_580,var_581,bop_595,bop_603,bop_609,bop_623,call_629,var_630,bop_634,])
output2 = relay.Tuple([call_582,const_579,var_580,var_581,bop_595,bop_603,bop_609,bop_623,call_631,var_630,bop_634,])
func_637 = relay.Function([var_566,var_567,var_580,var_581,var_598,var_608,var_630,], output)
mod['func_637'] = func_637
mod = relay.transform.InferType()(mod)
var_638 = relay.var("var_638", dtype = "uint64", shape = (6,))#candidate|638|(6,)|var|uint64
var_639 = relay.var("var_639", dtype = "uint64", shape = (6,))#candidate|639|(6,)|var|uint64
var_640 = relay.var("var_640", dtype = "float64", shape = (10, 1))#candidate|640|(10, 1)|var|float64
var_641 = relay.var("var_641", dtype = "uint16", shape = (60,))#candidate|641|(60,)|var|uint16
var_642 = relay.var("var_642", dtype = "float32", shape = (6,))#candidate|642|(6,)|var|float32
var_643 = relay.var("var_643", dtype = "int64", shape = (6,))#candidate|643|(6,)|var|int64
var_644 = relay.var("var_644", dtype = "float64", shape = (800, 1))#candidate|644|(800, 1)|var|float64
output = func_637(var_638,var_639,var_640,var_641,var_642,var_643,var_644,)
func_645 = relay.Function([var_638,var_639,var_640,var_641,var_642,var_643,var_644,], output)
mutated_mod['func_645'] = func_645
mutated_mod = relay.transform.InferType()(mutated_mod)
func_174_call = mod.get_global_var('func_174')
func_176_call = mutated_mod.get_global_var('func_176')
call_670 = func_174_call()
call_671 = func_174_call()
uop_681 = relay.cos(call_670.astype('float32')) # shape=(10,)
uop_683 = relay.cos(call_671.astype('float32')) # shape=(10,)
uop_690 = relay.log2(uop_681.astype('float32')) # shape=(10,)
uop_692 = relay.log2(uop_683.astype('float32')) # shape=(10,)
func_409_call = mod.get_global_var('func_409')
func_415_call = mutated_mod.get_global_var('func_415')
var_694 = relay.var("var_694", dtype = "int16", shape = (240,))#candidate|694|(240,)|var|int16
call_693 = relay.TupleGetItem(func_409_call(relay.reshape(var_694.astype('int16'), [15, 2, 8]), relay.reshape(var_694.astype('int16'), [15, 2, 8]), relay.reshape(var_694.astype('float64'), [15, 2, 8]), relay.reshape(var_694.astype('float64'), [15, 2, 8]), relay.reshape(var_694.astype('float32'), [15, 2, 8]), ), 0)
call_695 = relay.TupleGetItem(func_415_call(relay.reshape(var_694.astype('int16'), [15, 2, 8]), relay.reshape(var_694.astype('int16'), [15, 2, 8]), relay.reshape(var_694.astype('float64'), [15, 2, 8]), relay.reshape(var_694.astype('float64'), [15, 2, 8]), relay.reshape(var_694.astype('float32'), [15, 2, 8]), ), 0)
func_235_call = mod.get_global_var('func_235')
func_240_call = mutated_mod.get_global_var('func_240')
var_701 = relay.var("var_701", dtype = "int32", shape = (24,))#candidate|701|(24,)|var|int32
const_702 = relay.const([-9.625339,7.609347,0.467301,9.092944,4.182979,-9.570239,1.110646,9.540688,-1.544682,0.509639,-3.806451,4.758913,-8.426064,5.173608,2.512466,2.860301,-3.027932,-5.715405,-2.725939,-4.909166,-8.436110,-5.042698,4.490736,-5.394553,7.315638,2.356193,2.289344,9.795550,-4.040784,-6.648804,7.895318,6.897507,-2.591299,6.439529,9.201303,-6.789986,-3.280354,1.939180,-4.476174,8.047963,8.304501,5.553180,-6.132957,-0.828175,-8.437710,-0.312037,5.847080,4.991974,-1.289658,-5.524830,5.640839,5.322606,0.715580,0.245552,-1.874207,-3.702931,-8.340061,8.269312,-6.340017,6.272360,-1.241535,-8.440164,0.640198,6.681636,-8.556549,3.059005,1.631429,8.692168,5.976180,-3.641709,4.965470,-0.001068,5.495500,-0.996721,1.616462,-0.173459,-5.292536,8.603425,-7.044084,4.462542,2.560934,-8.330867,3.645434,9.482427,8.630646,-2.085300,-4.849944,-3.662568,-2.080482,5.562614,-4.762251,2.431713,-3.508719,-2.350240,-0.259998,3.122842,-9.068364,-5.418311,1.445007,-1.469216,5.913050,-1.953716,2.746993,7.033807,0.474216,-2.606288,-7.635672,-2.979692,-2.959108,-5.678117,-5.793968,-6.579993,8.718580,-2.400394,4.928786,4.898797,-6.954885,-2.592762,-8.217129,7.161864,4.984124,7.739957,-6.365717,-5.049351,-1.116177,3.109105,7.344336,3.289643,-5.750540,7.930017,9.734356,-4.750744,-2.991040,2.047247,1.793265,1.147900,-8.758123,-0.331093,-5.688258,-3.752337,6.529440,-1.813943,0.742077,-1.631488,0.940087,6.230308,-4.630016,-0.973275,8.141166,-9.037637,7.861141,5.978632,-1.387582,-2.252095,-7.897482,-3.259516,-1.062353,-0.054672,-5.844896,3.535351,8.039355,-0.464753,-3.992666,-0.863535,8.218028,-9.608403,-9.460031,-1.776631,-9.374251,-9.995725,8.870461,-0.018485,4.665056,-4.241347,4.466623,4.887756,-3.786377,4.321237,6.323259,-5.608531,-1.146902,5.201359,-5.210375,1.328213,-5.449383,-8.947132,-9.492281,2.471735,8.247288,-1.565950,4.663939,2.722501,2.348168,-1.937735,5.143951,8.371302,-9.475337,-7.645256,4.209681,6.249197,4.635323,8.833515,-0.350475,3.939497,-9.001294,7.573755,-6.798455,-3.654349,5.767672,-3.388501,1.674026,-2.966942,-9.306252,0.264071,-4.303756,4.804669,-3.846788,-6.933732,3.224730,-8.735015,2.611757,5.085204,1.560547,1.651515,-3.437902,4.010573,-8.770814,5.106615,-0.995428,-9.204481,0.178158,1.247301,-3.803883,7.606443,5.052802,-9.581396,0.844922,-8.203869,4.390089,6.096739,1.742951,4.467756,-7.555103,-1.121517,7.678590,4.818738,-2.696842,-1.650928,-7.776235,-5.779914,-4.794360,-4.278854,-1.508068,-3.708263,3.791205,-3.691267,-8.382251,-7.161764,-4.738121,1.785217,9.854559,0.968307,9.768764,-7.964079,9.621261,-5.459170,0.033058,5.990462,8.590780,2.118565,3.680222,-4.943769,-7.457471,-3.453522,8.729552,-6.050127,-5.097671,4.344506,-1.052810,-1.023708,-3.061792,7.706770,5.884901,-0.507834,-8.186776,1.057034,5.853640,8.421435,-8.094302,-7.372960,1.125761,-4.600579,-4.608597,-5.236829,-7.513804,-3.780112,5.208509,-5.710454,-2.161218,8.164528,3.001413,-2.684943,-1.347076,-5.362737,4.281611,7.468240,2.040830,7.275815,2.626717,-3.195714,-3.686933,-3.663732,-5.480350,-3.325594,9.555950,2.624075,6.670099,8.430545,8.446336,-4.990129,9.974360,-5.891614,-1.349401,-1.047008,0.619667,0.922941,-3.648455,0.457594,-4.112631,6.953937,7.618127,-4.213170,4.713647,4.610171,5.755945,1.122272,9.786315,-8.779570,7.132302,6.004574,7.967599,-6.087710,-8.490606,9.680040,-2.681172,0.630065,9.650994,-9.421774,6.619642,-5.162198,6.500213,5.478561,5.413329,-1.564054,4.029981,3.278213,-6.133072,-6.221273,5.848205,-0.853337,-3.850048,7.769478,4.309505,-3.767883,9.164066,-8.175760,6.842588,1.691577,3.122732,8.451038,7.452047,2.634783,3.533159,9.702109,2.294819,-1.059456,5.250917,-1.578587,7.972393,7.033863,6.248715,4.583760,-4.104503,9.163772,6.352727,-7.679254,8.059605,-6.806793,3.951129,0.490162,3.897246,-6.276600,0.250001,-9.733411,-6.795864,-8.999254,8.578343,-1.827440,-6.939085,2.499688,-0.598313,1.368873,1.944757,-6.084024,2.078229,-7.553743,0.732567,6.946604,7.432819,1.788103,6.480060,1.953500,-5.847660,-1.156742,9.737135,-2.752960,3.639049,6.592466,9.651879,8.801601,3.507028,-9.799649,0.664918,8.265113,4.684888,-6.954560,-3.818292,2.838965,2.453362,-9.972071,4.151893,-7.595819,-1.332907,3.974509,-0.731155,-7.760166,-6.832360,-5.952566,-6.521049,-2.303772,4.121365,-5.546459,-3.255455,-0.532932,-6.794640,-9.455872,9.072310,-1.769844,-7.714765,1.246005,7.618821,-9.907188,-3.602589,7.678638,7.731078,-8.380314,-5.150354,-5.554733,-5.644349,-4.667583,5.592620,-5.464481,8.848177,-5.193384,2.673221,-7.207296,0.032964,-9.715238,-7.005108,-3.739874,-1.841281,-3.521372,-7.253605,1.818193,9.023476,3.747296,7.639366,3.656538,-2.211209,-4.720974,1.837173,-8.353230,-7.353412,7.712948,-5.523219,-6.704435,-0.396610,0.365406,3.066365,-3.522002,-0.721990,-8.860496,1.398148,1.434672,7.107526,7.222385,-8.121528,-2.601094,0.395941,3.854725,0.176586,-7.422404,-0.559761,-6.470217,-5.360991,-7.321049,-3.155185,-4.312946,-4.762173,-5.727756,-3.765933,6.238284,1.717614,6.110289,6.692064,3.393552,-3.741189,-9.894496,6.713441,-0.369671,1.845541,4.563689,4.241474,-2.024868,2.093099,-0.590528,-3.254876,-1.979101,3.077926,-0.923892,8.716580,7.734434,5.002317,-8.265356,6.257842,2.950308,-0.459358,-4.756616,-1.354415,3.726267,8.988688,9.098140,2.391344,-3.265024,9.708552,6.517190,-6.043344,-1.791241,7.601906,-5.705661,-4.707337,7.509662,-8.651635,-2.773147,-3.311886,-2.200723,4.852726,-0.255650,-7.878030,0.961408,8.537191,-6.020123,-5.765810,-9.742486,6.396691,-5.126849,-4.459334,-4.244640,0.596835,9.635788,3.002719,-7.211213,-5.418013,1.787262,7.341546,-8.711449,-5.346370,-6.518811,-0.550640,-4.147874,7.974681,9.370875,-6.924901,8.639719,-6.944997,-8.225986,-8.528822,1.413359,9.848261,3.888522,7.198617,4.699229,-1.335331,-5.760784,-3.426411,8.184161,9.510903,4.298389,-9.576392,-1.848796,-6.490925,-9.246807,3.002498,5.125912,0.571677,0.530535,-0.628333,-4.015507,-1.531137,4.957517,5.609270,-0.290762,7.334388,-3.921995,-3.950504,0.532155,5.901046,-8.431637,5.217300,5.849911,-7.031370,8.522418,-9.405936,-8.482576,5.527781,6.661283,-8.247201,5.414696,-0.041677,2.748153,-7.918067,5.962640,2.664520,-4.983538,6.314341,8.150492,-2.321865,-0.993914,-8.298187,0.861446,4.193144,-7.989972,0.261195,9.036756,4.232779,-7.077459,0.754552,-2.424614,8.847462,0.380219,-1.559951,6.422385,-8.702556,9.944788,-0.330036,-8.607480,-4.525509,3.009945,-8.328335,4.577460,8.348651,-1.292831,4.490751,2.671219,0.210524,0.559288,4.297711,9.722551,-0.180594,-4.320732,1.244249,-4.952835,1.754415,0.455869,7.661651,-0.066682,2.588046,0.481618,3.472713,7.299265,-8.168406,-8.829453,5.983514,5.436323,9.799720,-6.069784,-5.420438,-2.239235,-5.491981,7.690375,-9.354168,3.240937,-5.228870,-7.859811,8.255640,0.731354,-0.402164,-9.428354,1.202630,2.942063,3.520009,4.477854,7.984650,-6.922458,-9.440001,3.198895,6.956259,-9.044094,5.866742,5.731738,-0.734315,-8.818209,-9.072758,9.862404,-3.834566,-4.456620,-1.593749,1.332138,9.936542,-6.170872,-2.694374,-6.261050,-5.937248,0.882431,4.704772,-4.143718,7.447801,-4.707314,6.915300,7.248532,9.383068,-4.828238,-6.998786,5.515415,1.470117,4.542733,4.533478,9.997766,-1.368674,6.497618,3.405287,1.626381,0.067892,-5.965175,1.091784,-2.229225,-1.558080,6.052366,8.362340,-3.321255,-5.980902,-5.392528,-6.105224,6.949299,-7.904548,-4.856297,-5.080491,7.944871,-7.096126,2.085446,0.140509,-9.968179,-5.058491,-8.182366,-8.691772,-1.070189,-8.956125,-3.234094,-6.758186,7.219937,-1.901291,-6.541242,-9.872211,-7.518420,0.892575,-4.319475,-2.652650,-9.420408,-8.939163,-9.051043,-9.600333,5.293555,1.205750,9.372274,5.173405,-0.006986,-1.004773,9.274391,-0.865266,0.443258,0.535752,5.335250,-9.042855,-5.615233,-8.572686,0.826621,4.907644,-5.812705,-1.004892,-4.947879], dtype = "float64")#candidate|702|(800,)|const|float64
call_700 = relay.TupleGetItem(func_235_call(relay.reshape(var_701.astype('int32'), [3, 8]), relay.reshape(const_702.astype('float64'), [800, 1]), relay.reshape(var_701.astype('bool'), [3, 8]), ), 1)
call_703 = relay.TupleGetItem(func_240_call(relay.reshape(var_701.astype('int32'), [3, 8]), relay.reshape(const_702.astype('float64'), [800, 1]), relay.reshape(var_701.astype('bool'), [3, 8]), ), 1)
output = relay.Tuple([uop_690,call_693,var_694,call_700,var_701,const_702,])
output2 = relay.Tuple([uop_692,call_695,var_694,call_703,var_701,const_702,])
func_706 = relay.Function([var_694,var_701,], output)
mod['func_706'] = func_706
mod = relay.transform.InferType()(mod)
mutated_mod['func_706'] = func_706
mutated_mod = relay.transform.InferType()(mutated_mod)
func_706_call = mutated_mod.get_global_var('func_706')
var_708 = relay.var("var_708", dtype = "int16", shape = (240,))#candidate|708|(240,)|var|int16
var_709 = relay.var("var_709", dtype = "int32", shape = (24,))#candidate|709|(24,)|var|int32
call_707 = func_706_call(var_708,var_709,)
output = call_707
func_710 = relay.Function([var_708,var_709,], output)
mutated_mod['func_710'] = func_710
mutated_mod = relay.transform.InferType()(mutated_mod)
var_712 = relay.var("var_712", dtype = "float64", shape = (3, 8))#candidate|712|(3, 8)|var|float64
uop_713 = relay.log(var_712.astype('float64')) # shape=(3, 8)
func_637_call = mod.get_global_var('func_637')
func_645_call = mutated_mod.get_global_var('func_645')
var_716 = relay.var("var_716", dtype = "uint64", shape = (6,))#candidate|716|(6,)|var|uint64
const_717 = relay.const([2.957555,-3.139786,-4.857268,1.685097,0.661046,1.922249,-8.202992,4.785468,-2.650430,-7.209761], dtype = "float64")#candidate|717|(10,)|const|float64
var_718 = relay.var("var_718", dtype = "uint16", shape = (60,))#candidate|718|(60,)|var|uint16
const_719 = relay.const([[6.101436,-3.334242,6.898348,7.548291,0.963742,-8.162200,-8.670330,-0.891588,9.514826,0.818646,1.969683,7.164794,7.264527,6.838981,2.700141,6.599805,0.694078,-3.552170,5.106400,0.029789],[6.883350,8.606032,-7.443937,-9.960056,-4.560796,-2.851365,-0.794992,-9.415294,0.398124,1.806977,-4.584791,0.644416,-2.163600,-2.230372,3.338767,3.305075,3.070260,7.460613,-3.374616,-3.727940],[7.238226,-9.590149,-6.285222,-4.779447,-9.311841,-8.232103,-5.961524,-7.354770,6.169914,-4.212993,-6.684551,3.440616,-5.222961,-2.404371,-9.506667,5.872484,4.267734,2.692765,-8.097955,7.889001],[4.781909,9.595544,-0.047903,8.285934,1.318410,-9.802962,2.764243,3.693804,-3.676548,-6.266456,-0.709176,5.413767,8.295848,4.223331,-9.350992,-2.751599,3.203899,6.392582,-6.835332,8.652266],[-6.537725,2.310547,-2.862262,2.660318,-2.780868,1.160738,4.617063,0.507369,-9.701902,4.013743,8.275979,-3.972896,6.219981,-2.460759,-3.573287,1.197608,-4.244861,-2.264877,-4.228438,7.109923],[6.287015,9.624642,8.098437,3.094030,-5.728425,-5.233170,7.033546,-3.281455,-1.459101,-8.003686,-6.572804,0.465819,-6.920390,4.024965,9.550846,-3.665681,-4.704076,-5.590990,-8.775043,5.094151],[-4.981786,-7.742858,-9.207978,-4.308868,-2.610581,-1.641777,1.160038,2.794632,9.630264,-4.779292,2.809397,-7.225356,-8.403509,-3.476705,-6.806423,5.600935,0.046765,-5.270912,-2.447120,5.348490],[2.223096,-8.470941,8.635228,8.977837,-1.752739,-4.429336,-2.088467,8.230422,6.647840,6.407351,8.280091,-6.656364,-6.267090,4.015089,9.947171,8.777013,-6.230775,1.658563,1.891703,-0.060538],[-5.855546,-8.095370,3.111486,-0.232854,9.008849,9.736418,-1.433993,0.535146,-4.128244,-8.803453,6.587728,5.075000,9.901016,-0.354052,6.743246,-8.464964,3.497434,-6.173045,0.269717,3.257252],[-7.678184,9.335963,-6.016150,7.291052,8.216105,-2.841759,-0.372649,-7.020576,0.365795,-2.524995,-9.244052,-2.697321,6.574486,-9.959768,4.030645,8.814891,-7.805623,9.441479,-0.854431,-1.693090],[-1.785142,-7.979053,-6.146721,-7.769316,1.002535,-0.069576,4.730225,7.284808,3.980279,7.875782,9.885150,-9.641731,-9.602117,-1.946811,-0.163697,-4.869950,-8.618762,5.110720,-8.196207,-5.981021],[4.064935,3.417534,1.279555,3.849048,-9.867319,-2.610418,-0.352520,-2.430090,-0.694898,7.403038,0.906569,3.684785,-5.693701,-5.141101,-9.889260,6.379719,4.497858,-7.606093,1.387484,7.723937],[9.793208,-5.094356,-0.169407,-7.424141,2.108666,9.281135,9.256578,-3.701073,-5.553444,-6.454781,0.865192,-1.983707,-7.411767,-4.380128,-6.324220,-0.648221,2.837651,5.398839,2.591387,-4.687778],[4.545170,0.894693,-0.729975,0.685889,-3.071943,7.602504,6.255006,-9.533020,-4.313768,3.794671,-0.502571,-5.254048,-8.138884,1.202443,6.336873,7.928662,3.484409,-0.216542,-2.349899,-5.763487],[8.930918,7.396496,9.184904,5.072862,-4.280890,3.616950,-9.095898,-1.347216,3.593493,-3.173449,4.888431,-8.865626,-7.612425,-9.688674,-7.670798,1.712361,-7.793457,-3.595313,-3.182121,0.572934],[-2.538319,3.460149,2.840998,-0.599642,1.095839,1.095054,-6.768867,2.442880,-7.243089,3.363945,7.698452,7.045706,8.710433,6.527072,5.504084,-7.089368,1.934514,-7.755715,4.670889,-7.715673],[9.288737,0.968700,3.909183,-0.705099,-9.927661,-1.229674,-3.219534,3.340311,6.106577,9.047427,-6.368348,-8.245472,4.515636,-7.354553,9.938410,5.389824,-0.417845,-6.421764,1.761984,-5.163944],[8.927236,8.785134,-0.725556,7.936912,-7.343864,-8.028320,0.234028,-6.028251,4.853836,9.064263,7.111138,1.797471,-5.959342,9.426921,-9.783322,8.041996,-7.846090,3.526724,-1.772309,-2.619284],[7.737211,3.564195,-4.499966,9.765158,-8.480372,-9.855513,0.760193,9.888967,-5.307524,2.325188,-4.076235,-6.416170,-9.996186,6.501227,-4.910409,1.081937,-5.072454,-9.036847,-6.057042,-1.739257],[2.542200,1.636183,-6.561273,-8.192417,0.854210,1.802583,-0.834762,2.034122,8.358407,2.565699,-9.107470,5.654285,1.772959,1.759050,0.653758,-6.112386,4.384431,7.656839,5.061120,-5.965959],[-8.834949,-3.048045,4.314726,7.089484,9.919589,-6.807198,6.530128,-2.050132,-2.258956,-0.229381,-7.915833,-4.451283,-4.938787,6.190618,0.220932,6.197649,-9.657533,-0.587260,0.698003,-7.334449],[6.777840,-2.050948,5.780349,6.161588,5.478754,3.080017,3.661226,2.461077,-4.841269,7.140445,-0.774312,5.005437,-6.057862,-3.923257,1.895460,-3.371192,3.778552,7.319429,-4.539781,-7.925901],[-2.843032,2.102729,9.979665,-8.830737,9.195651,1.448058,-7.744509,-7.225656,0.007852,-5.591215,-0.507940,0.618448,3.415125,-5.686064,1.767444,6.320131,-3.950737,5.363851,2.004206,4.481440],[4.025445,-4.587663,9.233282,6.206094,4.423685,3.924860,-7.404337,-6.893810,9.858243,6.635007,3.457613,0.727927,4.714148,-2.804769,-3.035740,-7.785352,-2.719123,3.105245,6.579465,-7.311855],[-7.191191,-4.811719,-1.174395,-2.578853,2.392880,0.896158,4.706217,4.869643,1.813155,8.201850,7.727893,-1.002831,5.602058,-6.470259,-7.120421,1.133540,-4.127953,6.057408,-3.167806,2.845348],[-8.916281,3.041398,7.083857,-9.947794,-8.977990,-1.517181,5.303549,1.299492,-0.475758,-9.518698,0.996835,9.172263,3.182475,-5.080833,-2.805222,-8.526837,-0.706203,-1.262482,-5.482424,0.531819],[6.567290,-2.715378,-3.032969,0.593805,0.179141,8.417890,2.477903,6.622785,0.944493,0.352066,2.044706,-8.778994,1.950199,7.856371,-8.953479,-9.251373,-3.022617,-1.133476,-8.566282,1.018379],[0.654168,-4.134374,5.150960,-2.819723,-6.915407,-3.596472,6.834506,6.754538,-5.983240,-0.889318,5.794374,-7.548437,5.495670,-9.797841,-3.704935,-3.803069,-7.611788,-7.377766,-7.075501,7.452797],[-8.074872,-2.973390,-4.497203,-8.537583,-3.600040,1.542589,2.522180,7.102264,3.037765,1.160555,2.410743,8.765750,-1.461540,5.459747,-8.877145,1.550896,-6.318129,-0.050983,-3.847629,6.608544],[7.657166,-1.387690,-8.185409,-7.127979,-3.806372,6.222743,4.233824,0.257965,3.761483,-9.067682,9.412331,-4.894126,4.427141,8.847321,-8.203744,-7.087752,9.309191,-4.113178,-9.967638,3.724033],[-5.716637,-6.745921,-0.712669,-1.181716,-0.067682,9.754311,-9.969485,3.055263,5.354386,0.643872,-8.327478,9.002268,0.265966,0.321513,-9.594268,-8.123752,-8.656217,-2.320212,-3.974804,-9.671924],[4.486499,8.863743,1.209922,1.390527,8.625988,-3.150847,-2.121343,9.103682,-1.688087,0.550224,-6.833270,6.327971,-1.981260,2.341426,-1.692345,4.720478,6.013444,-2.134006,-8.820918,7.390023],[-0.292054,8.038286,-5.247038,-5.361452,7.051286,0.780590,1.709018,-0.357273,0.412898,2.181884,6.241105,1.002513,3.836108,-5.567953,-2.228183,5.210936,9.198975,8.433765,8.452740,-7.784890],[-7.176947,-5.895297,9.884233,0.033262,-3.923486,-8.958689,-3.643720,9.777528,8.061963,3.984807,6.316432,5.938420,2.964566,-8.100549,-6.015155,1.909162,1.557892,0.949404,2.073297,0.348055],[7.224557,7.068198,0.490336,1.015981,-7.834723,-5.371547,1.350960,9.561043,7.979463,5.069915,-0.397820,-8.827452,5.721370,-1.881711,-4.119659,-4.610263,-7.697885,1.389228,-9.700331,-5.344357],[5.516869,8.790745,-8.542105,8.310197,-3.387647,-3.334967,-5.369654,-3.759521,-0.768344,-2.041514,-2.838680,-9.366402,-3.961249,4.890452,-0.175198,-8.804490,-2.507014,-7.232437,-0.431153,-9.711265],[-8.777997,1.661046,4.576061,-7.685802,2.346089,7.683003,-9.687314,-1.491112,9.199527,0.217326,7.554710,-6.531592,0.383752,5.559495,-9.598799,5.609425,-0.285718,6.074440,-6.191532,4.634963],[-1.571822,-2.006880,-1.234527,-1.360586,-6.264580,6.276836,8.094552,0.506199,-6.237910,-2.761858,3.027646,0.630704,-3.881381,6.102475,9.437515,-8.554153,8.099319,-5.493357,1.640786,-8.659982],[-5.999320,-0.015653,2.299173,2.444798,-3.313925,-0.182161,5.718095,1.903655,9.899288,-5.308577,0.726064,-7.011172,2.426388,-4.958176,0.382586,-2.856791,-6.157542,6.419461,3.547175,1.845308],[-8.117689,3.851672,8.807265,-6.933068,4.216040,7.823896,2.274068,-6.803284,-8.679102,-9.223072,5.345511,-9.923855,3.379583,9.743212,-6.153136,-3.232801,-8.846509,-1.370881,-2.548491,-9.508709]], dtype = "float64")#candidate|719|(40, 20)|const|float64
call_715 = relay.TupleGetItem(func_637_call(relay.reshape(var_716.astype('uint64'), [6,]), relay.reshape(var_716.astype('uint64'), [6,]), relay.reshape(const_717.astype('float64'), [10, 1]), relay.reshape(var_718.astype('uint16'), [60,]), relay.reshape(var_716.astype('float32'), [6,]), relay.reshape(var_716.astype('int64'), [6,]), relay.reshape(const_719.astype('float64'), [800, 1]), ), 6)
call_720 = relay.TupleGetItem(func_645_call(relay.reshape(var_716.astype('uint64'), [6,]), relay.reshape(var_716.astype('uint64'), [6,]), relay.reshape(const_717.astype('float64'), [10, 1]), relay.reshape(var_718.astype('uint16'), [60,]), relay.reshape(var_716.astype('float32'), [6,]), relay.reshape(var_716.astype('int64'), [6,]), relay.reshape(const_719.astype('float64'), [800, 1]), ), 6)
output = relay.Tuple([uop_713,call_715,var_716,const_717,var_718,const_719,])
output2 = relay.Tuple([uop_713,call_720,var_716,const_717,var_718,const_719,])
func_723 = relay.Function([var_712,var_716,var_718,], output)
mod['func_723'] = func_723
mod = relay.transform.InferType()(mod)
var_724 = relay.var("var_724", dtype = "float64", shape = (3, 8))#candidate|724|(3, 8)|var|float64
var_725 = relay.var("var_725", dtype = "uint64", shape = (6,))#candidate|725|(6,)|var|uint64
var_726 = relay.var("var_726", dtype = "uint16", shape = (60,))#candidate|726|(60,)|var|uint16
output = func_723(var_724,var_725,var_726,)
func_727 = relay.Function([var_724,var_725,var_726,], output)
mutated_mod['func_727'] = func_727
mutated_mod = relay.transform.InferType()(mutated_mod)
var_729 = relay.var("var_729", dtype = "float32", shape = (12, 13))#candidate|729|(12, 13)|var|float32
var_730 = relay.var("var_730", dtype = "float32", shape = (12, 13))#candidate|730|(12, 13)|var|float32
bop_731 = relay.floor_divide(var_729.astype('float32'), relay.reshape(var_730.astype('float32'), relay.shape_of(var_729))) # shape=(12, 13)
bop_734 = relay.minimum(var_729.astype('int8'), relay.reshape(bop_731.astype('int8'), relay.shape_of(var_729))) # shape=(12, 13)
output = relay.Tuple([bop_734,])
output2 = relay.Tuple([bop_734,])
F = relay.Function([var_729,var_730,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_729,var_730,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_729= np.array([[0.742976,-9.195299,-1.002975,-6.314246,0.401009,1.486976,-4.755330,-4.582719,3.865333,0.416419,-5.298125,-6.999159,-6.740318],[-9.914803,-1.085257,5.171459,-4.815729,2.658887,4.063003,1.704539,2.801171,9.366275,4.932144,8.649225,4.781958,3.266436],[4.051382,9.464275,-2.482821,6.528535,4.483207,-7.244400,-8.767639,-2.628365,5.294672,-0.491222,-1.375440,-6.866706,7.599512],[1.527033,-1.863207,7.779015,-2.059402,1.719344,-0.294544,5.517275,-6.829939,5.497690,-5.306318,-7.908356,-1.962616,-0.979751],[-2.601381,-7.061659,7.332859,4.690788,5.062921,0.204028,4.841688,-6.226644,4.924310,8.385486,-8.499712,-0.434548,1.026680],[-4.894194,5.917236,-5.901486,-4.163501,-6.460480,-1.572198,8.603476,-4.516192,6.794894,-5.470267,5.631903,-1.826823,6.093414],[7.426370,4.410957,-7.675957,-4.470524,-4.187820,-2.901772,-6.417843,-3.539227,-9.328159,-0.969051,8.339092,-5.242855,8.718131],[6.517311,-3.668235,-9.668627,9.117419,-9.725870,-9.345906,9.475939,-0.788397,8.493072,-9.722191,5.007383,0.112379,2.193372],[-5.538669,-3.556818,0.067467,7.481729,-3.186412,-5.737879,2.339105,-1.036317,8.778824,-0.784234,4.876319,-6.705257,-1.252352],[-0.010644,8.566997,-4.696562,4.134518,-4.140032,-5.818813,-9.737711,7.077426,-0.704775,-7.372735,-1.867715,9.815983,5.469234],[-3.282341,-3.287167,5.409034,8.302255,0.522381,-9.223335,-3.746261,2.950299,-0.832561,-1.335343,-4.075023,-8.268089,4.284240],[6.785397,-5.702689,0.663703,-7.828868,7.067356,-5.880795,7.048886,-9.978929,-1.512195,-2.439663,6.174984,7.600409,-5.650172]], dtype='float32')
module1.set_input('var_729', input_729)
input_730= np.array([[0.553653,-9.370488,-9.643490,1.732899,-5.434982,4.662422,-9.162835,3.872788,2.432475,-8.214987,-0.641035,9.111153,1.341253],[-7.665016,-0.057996,-2.416052,2.261002,-5.833643,-1.361789,-8.616765,-8.131065,-1.287782,-7.909565,4.758512,-8.245190,8.909329],[-8.264175,5.435158,-4.640443,-6.063444,-5.580188,-1.382894,-2.159687,5.884198,-1.809941,7.154286,-2.032019,5.801503,6.744470],[-9.857877,5.225984,5.739760,-2.233730,0.809010,-5.977186,4.447272,-8.856754,-9.233373,-7.937531,-2.051801,-0.523091,2.226691],[6.113657,0.215132,4.039794,-2.754541,-6.261986,-5.640752,-0.607255,2.917717,-9.464247,3.170939,-0.202007,8.558986,-2.000859],[2.969585,2.429603,8.841264,3.678887,-7.575341,-8.715049,2.053577,-4.506911,-5.793437,3.295194,1.254215,-5.273950,9.694209],[-4.723747,-6.799806,-2.918529,0.913377,-9.559160,-2.125913,-1.436938,6.556962,4.531089,4.742188,-0.830536,-7.362759,6.808679],[8.966615,-2.583281,-8.088340,0.747932,8.547024,-9.542939,-2.466946,4.616149,-6.158364,9.478268,3.415015,3.611839,-2.961724],[-8.606756,2.755915,-7.343266,8.622031,1.422410,2.608241,-8.990648,-3.655944,-1.534019,-7.201530,9.609631,4.624109,-7.047636],[9.531006,1.999289,1.371763,-1.351070,6.997209,-6.567775,-4.158774,-8.588071,-8.917304,-2.519843,0.003748,9.393487,4.867787],[-9.278053,4.062434,0.132482,-7.724406,-4.600019,-0.180059,6.161769,1.959750,-9.078449,4.057693,-8.275626,-3.727114,6.094735],[3.442805,4.175788,0.550141,6.849176,-8.870652,-5.537690,6.884890,-1.193244,3.225448,3.756997,2.425057,-9.038616,-9.318678]], dtype='float32')
module1.set_input('var_730', input_730)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_729, input_730, )
res3 = intrp3.evaluate()(input_729, input_730, )
res4 = intrp4.evaluate()(input_729, input_730, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input('var_729', input_729)
module5.set_input('var_730', input_730)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_729, input_730, )
res7 = intrp7.evaluate()(input_729, input_730, )
res8 = intrp8.evaluate()(input_729, input_730, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input('var_729', input_729)
module9.set_input('var_730', input_730)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_729, input_730, )
res11 = intrp11.evaluate()(input_729, input_730, )
res12 = intrp12.evaluate()(input_729, input_730, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input('var_729', input_729)
module13.set_input('var_730', input_730)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_729, input_730, )
res15 = intrp15.evaluate()(input_729, input_730, )
res16 = intrp16.evaluate()(input_729, input_730, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input('var_729', input_729)
module17.set_input('var_730', input_730)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_729, input_730, )
res19 = intrp19.evaluate()(input_729, input_730, )
res20 = intrp20.evaluate()(input_729, input_730, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input('var_729', input_729)
module21.set_input('var_730', input_730)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_729, input_730, )
res23 = intrp23.evaluate()(input_729, input_730, )
res24 = intrp24.evaluate()(input_729, input_730, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''49: TVMFuncCall
48: _ZNSt17_Function_handlerIFvN3tvm7run
47: tvm::runtime::TypedPackedFunc<tvm::runtime::TypedPackedFunc<tvm::runtime::ObjectRef (tvm::runtime::Array<tvm::RelayExpr, void>)> (tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target)>::AssignTypedLambda<tvm::runtime::TypedPackedFunc<tvm::runtime::ObjectRef (tvm::runtime::Array<tvm::RelayExpr, void>)> (*)(tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target)>(tvm::runtime::TypedPackedFunc<tvm::runtime::ObjectRef (tvm::runtime::Array<tvm::RelayExpr, void>)> (*)(tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
46: tvm::relay::EvalFunction(tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''