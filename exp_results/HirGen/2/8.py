import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_30 = relay.var("var_30", dtype = "float32", shape = (1, 10, 3))#candidate|30|(1, 10, 3)|var|float32
uop_31 = relay.rsqrt(var_30.astype('float32')) # shape=(1, 10, 3)
var_35 = relay.var("var_35", dtype = "float32", shape = (11, 10, 3))#candidate|35|(11, 10, 3)|var|float32
bop_36 = relay.logical_xor(var_30.astype('uint32'), var_35.astype('uint32')) # shape=(11, 10, 3)
bop_39 = relay.bitwise_or(var_35.astype('uint8'), uop_31.astype('uint8')) # shape=(11, 10, 3)
output = relay.Tuple([bop_36,bop_39,])
output2 = relay.Tuple([bop_36,bop_39,])
func_42 = relay.Function([var_30,var_35,], output)
mod['func_42'] = func_42
mod = relay.transform.InferType()(mod)
var_43 = relay.var("var_43", dtype = "float32", shape = (1, 10, 3))#candidate|43|(1, 10, 3)|var|float32
var_44 = relay.var("var_44", dtype = "float32", shape = (11, 10, 3))#candidate|44|(11, 10, 3)|var|float32
output = func_42(var_43,var_44,)
func_45 = relay.Function([var_43,var_44,], output)
mutated_mod['func_45'] = func_45
mutated_mod = relay.transform.InferType()(mutated_mod)
var_82 = relay.var("var_82", dtype = "uint64", shape = (9, 9, 15))#candidate|82|(9, 9, 15)|var|uint64
const_83 = relay.const([[[10,6,9,9,-5,-2,8,4,5,-9,10,6,10,-7,-6],[7,-7,9,-2,2,5,-10,9,4,-9,-6,8,-2,10,7],[10,-5,-7,-5,-3,8,2,-10,-1,6,-9,1,-4,4,-2],[-3,-5,9,3,2,-2,5,-8,4,-9,-9,3,-6,3,-3],[2,-7,-4,-2,-2,-2,-5,-8,-2,-2,1,9,-9,2,-6],[-9,3,-7,4,-4,4,-1,-5,-1,1,9,-3,5,5,6],[-6,-10,-10,-6,6,3,7,8,2,10,3,5,-8,-9,-2],[4,1,5,-1,-8,-2,-9,-4,3,-6,-1,-4,4,9,-5],[-8,8,-3,3,-3,-4,-1,-6,-10,2,3,5,-2,-9,2]],[[-5,-5,2,-6,-3,-5,6,10,10,2,-5,9,-4,9,-5],[9,5,-1,-3,3,5,-5,-3,-4,2,-7,3,-7,7,2],[10,10,-7,-2,7,6,-3,-3,-3,-9,3,4,-2,-4,-8],[10,8,-3,2,-5,1,1,2,10,2,-2,3,-2,-8,3],[5,-6,-5,7,-4,-6,-4,9,-2,-1,6,1,3,8,2],[-9,-7,9,4,1,8,3,6,-8,-10,-5,4,10,1,-9],[9,1,3,-10,-8,4,-10,-8,8,-5,4,-7,-5,-8,-4],[1,-6,-1,-4,7,4,8,8,-8,-1,-7,2,5,-10,6],[-9,9,-3,4,3,-9,-3,-9,-4,-9,10,2,-9,-3,-10]],[[-5,8,-6,-6,8,2,-4,-6,-7,-10,5,-2,5,-4,4],[-7,-2,-5,-6,9,-10,-1,9,9,-8,-4,-2,10,10,4],[-7,-3,6,9,8,-5,-2,-5,6,7,-5,-8,7,-4,3],[1,1,-9,1,-10,-8,9,5,-1,8,-6,-8,9,4,2],[-1,7,6,-8,6,8,-5,5,1,-1,-3,3,3,9,-5],[-7,6,8,-2,1,-6,-3,5,1,6,-6,-10,2,-1,3],[6,4,-3,-5,1,-4,-6,10,-7,-9,4,3,6,-7,10],[5,-1,-7,-1,1,8,-1,-4,-8,-3,-5,-2,-10,8,7],[9,-2,-1,9,1,6,-7,6,9,4,10,-10,2,3,9]],[[-7,-2,-1,8,-4,1,-10,10,-10,7,2,7,-2,-2,-8],[2,9,6,6,-1,-3,-2,-1,-9,1,8,5,-5,-6,-9],[10,-2,5,1,2,-4,6,-9,8,9,4,-3,3,-6,-7],[-5,-8,7,3,-7,-2,9,6,-5,6,4,-1,10,8,-5],[1,-3,-7,2,-6,6,-9,8,-2,10,6,9,2,5,5],[5,10,-5,-8,-8,8,-4,8,2,4,-10,-7,-10,-8,9],[3,-9,3,3,-3,-6,6,7,2,5,-3,-4,6,9,7],[7,-1,-6,-2,-6,1,-3,-1,-10,-2,-7,-2,5,-5,1],[-2,5,-7,-10,9,4,-5,4,9,-9,10,6,-6,-9,-5]],[[4,-3,3,-9,10,6,-9,-1,8,-8,-3,-2,-10,1,-9],[2,-6,-4,4,1,-3,-6,-9,-9,8,-4,6,1,-4,5],[-1,-9,-1,-7,6,9,-4,-6,-3,-9,-2,4,-1,-4,-9],[8,-10,-8,-10,8,-2,7,-3,8,8,8,4,-8,9,10],[4,8,7,-5,-1,-2,9,9,-4,7,-8,-2,7,7,-3],[-3,-7,1,5,10,10,-8,-3,10,-8,1,-9,8,4,-3],[-4,-4,-5,6,4,7,8,-10,6,10,6,-10,4,-3,3],[5,-2,2,-7,-9,-4,2,4,5,-1,-4,8,-4,-1,-3],[2,-4,9,2,-4,-5,-7,-10,-1,3,-2,1,-10,-4,-1]],[[-5,-5,9,-7,-9,4,-7,3,4,-4,7,3,-8,2,-3],[-7,8,-9,7,8,7,4,-2,3,2,-2,-3,-7,-7,-3],[2,1,3,8,8,-7,-9,8,9,-7,9,8,-6,3,3],[-6,-5,6,-8,9,10,8,-9,1,8,-7,-9,6,-9,1],[-4,-9,-3,-8,-9,7,-5,9,3,-1,9,-5,2,-4,-4],[-7,1,7,2,6,-2,-1,2,-10,1,6,-9,8,6,-6],[-8,-9,8,-4,-3,2,-5,-4,-6,-2,8,-8,-10,-10,-2],[-5,1,9,9,-2,4,-10,10,10,8,4,1,-5,-10,-7],[3,-1,7,-4,3,-1,-1,-10,4,-6,1,8,-1,4,8]],[[-2,-5,-5,-4,1,8,-6,2,9,-5,8,-6,1,1,-9],[-9,2,-7,-8,-10,8,-2,7,2,8,3,-7,-4,6,-4],[-6,7,6,-9,-5,-5,6,-9,1,-1,1,7,-2,-4,8],[-3,-10,-6,-6,-5,3,4,-7,-4,-6,-7,10,-3,-5,-1],[7,-1,6,-7,10,3,-2,-7,-2,5,-8,5,4,-8,-6],[-6,-5,-4,-2,-5,-3,-8,-7,-3,-5,-9,9,-9,-3,-6],[8,-6,6,-3,-2,-1,-7,1,-5,7,1,5,1,4,2],[4,1,2,1,4,-6,-10,5,8,-6,-1,2,-8,1,8],[-4,-5,4,10,5,-1,-10,-3,-2,6,8,6,5,-5,-8]],[[2,-7,6,-4,-9,2,-9,2,-9,3,-4,-5,10,-4,10],[8,-3,9,-8,-8,4,-6,-2,3,5,-7,6,7,5,1],[-5,-7,5,8,1,-2,-5,7,9,7,5,-10,7,9,3],[5,-10,-6,10,-10,-9,-5,-3,2,-2,3,-4,-10,-4,-10],[8,3,-10,5,-3,1,9,6,10,-1,6,2,9,-10,-1],[-8,-8,9,9,9,8,4,10,7,-8,2,4,-6,8,-6],[6,9,4,-5,-1,5,-6,7,8,8,6,-2,6,3,-3],[4,-2,3,-1,9,5,-1,10,9,-6,6,6,10,7,7],[-2,-7,-4,-10,-1,8,2,8,-9,-2,1,7,-7,1,-10]],[[-1,-9,-9,-3,9,8,1,-9,10,4,-3,9,6,8,-9],[6,-3,10,-10,-8,6,-8,-6,6,5,9,6,-9,-5,10],[5,1,2,1,4,-3,-7,-9,-10,-8,-4,-4,-4,-5,-1],[-10,2,8,5,-8,-9,9,-3,-7,-3,7,-10,8,-7,-3],[-1,-7,-6,-8,2,-10,-6,5,9,-2,6,8,2,2,-2],[-8,-9,5,-7,8,1,-10,-9,8,-8,-10,2,2,5,-3],[-8,1,5,-5,-1,4,1,10,-9,-7,9,-1,5,-6,5],[9,-2,5,6,-2,2,-8,-9,4,7,5,9,8,9,-6],[5,2,-8,7,-6,3,-6,-5,-9,3,10,-3,-5,-5,-7]]], dtype = "uint64")#candidate|83|(9, 9, 15)|const|uint64
bop_84 = relay.right_shift(var_82.astype('uint64'), relay.reshape(const_83.astype('uint64'), relay.shape_of(var_82))) # shape=(9, 9, 15)
const_87 = relay.const([[[-9,-4,-4,5,8,-4,-3,9,3,-7,-5,-10,10,6,-5],[-1,-5,-3,-10,5,-6,-8,9,2,-7,7,-10,10,10,4],[-1,10,-2,7,9,-1,10,-5,-7,1,6,9,-6,-5,-7],[4,4,5,4,7,3,-8,7,2,-2,9,4,1,-7,8],[5,-3,3,4,-2,-1,-9,10,4,-2,-6,4,9,9,10],[-1,7,-6,3,-10,-1,2,1,7,-3,-2,10,-8,-9,-6],[-4,8,2,-4,1,2,4,-3,-5,10,1,-6,8,-1,-2],[-10,5,-10,9,2,9,-4,-7,9,9,-1,-1,-1,-2,10],[1,-2,7,1,-9,7,-6,-2,10,-6,-1,1,-3,-5,-5]],[[1,-4,-2,7,8,-6,-6,6,5,1,6,8,8,-10,-6],[-9,-2,-10,-5,-6,6,5,-4,2,-8,-5,-9,-2,4,-1],[8,7,-4,-4,7,1,4,7,-9,-1,6,-5,-7,-3,10],[1,-5,-10,9,-7,4,10,-5,7,-8,3,2,-8,-7,-10],[-4,-7,-1,-7,8,7,-3,1,-5,-2,-5,-6,6,-6,4],[2,-8,8,-5,-2,-2,-7,7,3,-6,-7,-3,-8,9,-2],[1,-3,-2,-10,6,9,2,-3,6,3,2,-5,-4,-1,-8],[-4,-6,7,7,-2,1,3,1,-2,-1,-1,6,-7,10,1],[-3,-4,-3,-5,-10,3,2,3,-3,10,-4,8,-8,10,5]],[[3,-8,6,-10,2,-10,9,3,5,1,-2,8,-4,-5,4],[8,7,-8,9,-6,8,-8,-7,-3,6,10,8,8,-6,-10],[4,-2,6,-5,-8,6,6,4,-4,8,2,10,9,4,2],[10,2,10,-9,-4,8,4,-3,-9,-7,7,-8,9,-6,5],[-7,-5,-4,-8,3,-2,2,-7,6,2,-5,-1,7,-2,-5],[10,-9,-2,1,8,3,-5,7,2,7,5,2,-7,-7,1],[-6,-3,-7,8,6,3,7,6,1,-7,1,-4,-9,-5,2],[8,8,-2,8,-4,7,8,9,-10,-4,-1,-9,2,-8,6],[-3,-5,-8,6,9,4,9,-10,8,1,6,-8,6,5,-7]],[[3,5,-10,7,1,-8,-9,-7,-7,2,-6,9,5,4,-1],[-9,2,4,-7,10,4,2,-6,6,-3,-1,-5,5,-6,-10],[-1,-1,4,-4,6,-10,-1,4,3,-1,6,-7,10,3,-10],[-3,3,-3,1,10,1,-6,2,10,-1,2,-10,-2,-1,-6],[-9,2,-7,9,-4,5,-6,-10,2,6,10,3,-8,-2,-10],[-10,9,1,8,-4,-8,10,10,6,9,-7,1,10,-5,-8],[3,7,1,8,9,-6,2,5,-5,6,-3,6,3,5,10],[-6,-1,-5,-1,6,6,9,7,10,4,-9,-8,-3,10,-10],[1,-3,9,9,-10,1,6,-6,5,6,-1,-10,-7,-2,1]],[[9,-8,-6,-8,-10,-9,-8,3,9,-1,1,7,3,-4,-3],[6,9,-2,-2,2,-3,-5,8,-7,7,-2,-10,-2,5,7],[-3,9,7,-10,6,-3,5,-9,5,9,-4,4,10,-6,-2],[-4,-3,10,4,1,2,-8,1,7,5,-9,7,-10,7,-3],[-8,5,-9,3,5,-3,9,1,1,5,-5,3,-10,-10,-1],[-8,-9,-10,10,-2,-9,-9,10,-8,7,7,2,4,6,-8],[7,6,9,-6,1,-3,5,-9,-1,6,-4,1,-6,5,9],[9,-9,5,10,8,-7,2,-10,-9,-1,10,9,-9,-6,-6],[-8,-4,9,5,-9,3,-2,2,-7,7,-5,3,-8,-10,9]],[[-3,3,3,7,3,1,-5,-2,-8,-7,9,4,7,-6,-8],[5,1,-1,9,-4,-5,2,-9,7,5,4,6,-8,10,10],[-9,1,10,-6,-1,5,7,-6,-2,-6,4,9,-8,3,-10],[-7,-5,-3,-4,7,-1,-9,-10,7,-7,6,-2,3,3,9],[-6,-4,-9,-9,-8,-6,1,-7,2,2,6,-3,7,10,10],[5,10,-1,8,9,8,-5,3,-9,-8,6,-3,4,-3,-1],[-6,2,-8,2,-5,-4,-8,-2,-2,6,4,-2,1,6,-2],[8,3,-3,-3,1,-10,10,3,-9,-1,-5,-6,-1,-4,-10],[3,-4,8,-1,4,8,6,-2,-8,-6,-5,-5,7,-8,2]],[[-7,8,5,-9,-8,8,-7,-3,-7,-7,3,3,4,5,-1],[2,4,-9,7,-5,9,10,-10,-4,-8,-10,-4,1,3,10],[3,-3,-3,5,-10,-4,6,6,10,4,2,1,7,6,5],[7,9,4,4,-1,-2,3,2,7,-1,10,-7,1,-2,-5],[2,-5,-3,2,-8,2,-1,-9,6,5,-7,3,7,-7,1],[-5,7,4,1,-7,-3,1,6,7,8,-9,6,-8,-6,-9],[10,-9,-6,-6,3,5,4,9,8,4,-5,-10,5,-1,6],[9,6,2,3,8,-1,3,1,-5,-8,-6,2,-4,-5,-1],[7,-8,7,8,7,-5,10,-4,-10,1,-10,10,2,-10,-9]],[[1,-10,-2,8,5,7,-2,10,8,-6,7,-6,7,-9,7],[9,-7,-7,-4,-10,-8,2,1,-7,1,10,9,-3,5,5],[-3,10,-5,-10,9,9,6,-9,-3,-8,10,-10,-5,7,-8],[-2,9,10,8,-3,9,-6,3,-2,2,9,-9,10,6,5],[-2,-3,-10,4,-3,7,-9,5,-8,8,-6,-3,10,10,-1],[-9,4,3,-5,4,-4,-7,5,6,-8,5,-3,-10,2,-8],[5,-7,9,2,6,1,-6,2,-2,-7,3,8,-2,9,-8],[-8,-4,1,4,-7,-9,10,-1,-1,3,5,1,3,2,7],[9,-5,10,-8,1,-5,-4,-8,-9,7,-8,-9,-8,2,6]],[[-1,7,-10,10,-3,3,-3,-7,3,-1,-10,-5,-6,3,4],[-9,4,9,-7,4,-1,-2,-4,-5,-4,7,5,-5,8,1],[7,7,8,-7,-8,-6,8,5,-6,-8,9,4,-1,5,7],[1,7,-5,-5,-3,3,-4,-7,2,-9,2,6,-2,-7,6],[4,-5,-7,-8,-3,5,-10,7,-6,-9,-9,-5,-10,-4,3],[-8,9,-7,-6,-7,8,6,-1,-3,4,-5,6,-10,4,-1],[3,-3,-5,-9,7,-1,-9,1,4,8,10,2,3,10,5],[-4,1,3,10,-8,-9,2,-7,-8,8,10,-1,-4,6,2],[5,2,-5,-1,-6,-2,9,-2,8,9,10,-4,6,3,-1]]], dtype = "uint64")#candidate|87|(9, 9, 15)|const|uint64
bop_88 = relay.greater_equal(bop_84.astype('bool'), relay.reshape(const_87.astype('bool'), relay.shape_of(bop_84))) # shape=(9, 9, 15)
output = bop_88
output2 = bop_88
func_91 = relay.Function([var_82,], output)
mod['func_91'] = func_91
mod = relay.transform.InferType()(mod)
var_92 = relay.var("var_92", dtype = "uint64", shape = (9, 9, 15))#candidate|92|(9, 9, 15)|var|uint64
output = func_91(var_92)
func_93 = relay.Function([var_92], output)
mutated_mod['func_93'] = func_93
mutated_mod = relay.transform.InferType()(mutated_mod)
var_160 = relay.var("var_160", dtype = "float32", shape = (1,))#candidate|160|(1,)|var|float32
uop_161 = relay.log2(var_160.astype('float32')) # shape=(1,)
bop_164 = relay.minimum(var_160.astype('int64'), relay.reshape(uop_161.astype('int64'), relay.shape_of(var_160))) # shape=(1,)
uop_169 = relay.exp(uop_161.astype('float64')) # shape=(1,)
bop_175 = relay.bitwise_and(uop_169.astype('int8'), relay.reshape(bop_164.astype('int8'), relay.shape_of(uop_169))) # shape=(1,)
bop_179 = relay.less(var_160.astype('bool'), relay.reshape(uop_161.astype('bool'), relay.shape_of(var_160))) # shape=(1,)
bop_182 = relay.right_shift(uop_161.astype('int16'), relay.reshape(bop_175.astype('int16'), relay.shape_of(uop_161))) # shape=(1,)
bop_188 = relay.power(uop_169.astype('float64'), relay.reshape(bop_175.astype('float64'), relay.shape_of(uop_169))) # shape=(1,)
bop_193 = relay.not_equal(bop_179.astype('bool'), relay.reshape(bop_164.astype('bool'), relay.shape_of(bop_179))) # shape=(1,)
bop_200 = relay.left_shift(bop_193.astype('int8'), relay.reshape(uop_161.astype('int8'), relay.shape_of(bop_193))) # shape=(1,)
var_203 = relay.var("var_203", dtype = "int16", shape = (15,))#candidate|203|(15,)|var|int16
bop_204 = relay.power(bop_182.astype('float64'), var_203.astype('float64')) # shape=(15,)
bop_209 = relay.maximum(bop_179.astype('uint16'), relay.reshape(bop_182.astype('uint16'), relay.shape_of(bop_179))) # shape=(1,)
bop_212 = relay.greater_equal(bop_175.astype('bool'), relay.reshape(uop_161.astype('bool'), relay.shape_of(bop_175))) # shape=(1,)
func_91_call = mod.get_global_var('func_91')
func_93_call = mutated_mod.get_global_var('func_93')
const_218 = relay.const([-8,-1,8,-3,-7,6,5,3,8,2,6,-3,-3,-3,2,3,10,-2,7,-1,-8,-2,-9,-7,-6,10,-2,-2,-6,5,10,-7,-3,-3,4,3,-3,5,1,-6,-4,8,-1,-2,5,4,-5,-10,-2,7,6,-10,-8,-8,-10,5,-3,9,-5,-1,-8,8,6,2,-10,5,-2,5,-1,-8,-9,4,-9,-6,-6,5,-3,-7,-8,8,1,-3,8,2,1,2,-6,2,9,-8,-6,-9,5,-8,7,10,-9,3,-3,9,-7,-1,-5,-8,10,1,8,-3,-8,-5,-6,4,-2,-3,2,-6,-10,3,2,4,-7,8,-7,-10,3,-1,-4,4,-2,10,8,-4,-5,-8,8,10,8,-5,-10,-1,2,-4,5,-2,-5,-10,10,-5,-10,-3,6,-6,-1,1,-5,6,2,-4,6,-5,-10,-7,-8,-7,-7,9,-4,-10,-3,6,-3,5,-2,4,5,-10,6,-5,-10,-5,3,-2,8,-1,3,10,2,1,4,-2,9,-6,-9,-1,5,8,1,-4,10,-1,5,-8,5,-10,9,10,4,-2,6,4,1,-9,9,-1,-1,3,4,-2,3,9,-6,7,-2,-4,2,2,-7,-6,-4,-7,-1,-10,2,-5,-6,6,-3,3,-3,4,3,9,-6,-8,3,-5,6,9,-1,-2,1,10,-2,-7,-10,-10,-8,-4,-5,-7,10,5,9,-3,-10,-7,4,3,10,2,-5,-4,-3,-9,3,-9,10,-6,-7,9,-5,-8,-6,6,5,10,10,6,2,-4,-1,-7,-6,-10,-5,2,-7,-8,5,3,-10,3,4,-3,-3,5,-9,-7,-7,-10,7,-2,-4,9,4,1,-2,-6,-2,-7,6,-2,-4,4,5,-4,7,9,6,-3,10,4,8,10,-9,-8,-7,-3,-9,-2,10,9,2,1,5,-8,-7,7,-4,-9,6,-1,-10,-5,1,7,3,-1,3,-5,-5,5,9,1,-1,-8,2,9,4,-4,1,-10,-7,-1,4,-1,1,5,8,-3,8,7,1,-1,1,-1,5,9,2,-6,-8,-7,5,-8,8,3,1,4,-5,6,-10,-8,-8,-1,-7,-9,4,-3,-6,1,10,-9,-3,4,10,3,9,-7,6,-7,2,7,2,6,-1,-3,10,-6,7,-10,2,-4,-5,-9,-8,-6,-4,10,-5,5,3,10,10,-8,-8,3,-4,-2,-10,1,-7,10,-2,-7,-5,6,10,3,2,8,-4,1,-10,8,-3,-7,8,2,-8,-8,3,2,1,-5,1,-2,-4,2,5,-1,-8,9,-6,7,-3,-8,10,10,-7,4,-8,-2,9,-6,5,3,8,1,-6,-9,-5,5,-8,7,-10,3,9,-10,-1,-5,6,10,-3,-1,9,-7,-8,10,-5,-9,-1,-3,-10,-1,1,-7,-5,2,-8,-6,-2,3,-3,-4,-3,-5,7,-5,3,8,-9,1,-2,1,-6,10,9,-6,8,5,4,6,-10,-8,4,-8,-3,-10,-4,6,9,7,-9,2,-4,-1,-9,-10,7,-3,-6,-7,-2,3,-7,3,4,3,3,-3,2,-5,-10,-1,5,-1,7,-9,6,-2,-2,10,-6,-9,10,-8,-5,-5,-8,-5,2,-5,7,-7,-7,-7,-5,4,2,2,7,-6,3,-1,-8,5,4,9,5,4,5,2,10,3,3,-6,5,5,3,-8,-2,-1,4,-8,5,2,5,4,-4,-9,-2,9,5,5,10,9,6,-6,1,1,8,-10,9,-8,10,-2,-2,-10,-3,-5,8,-4,-7,7,6,5,-1,-7,-8,-5,-2,-1,-6,-1,5,1,-1,10,-7,7,-4,7,9,8,-9,-6,-8,7,-7,2,-4,7,-9,-5,-3,10,-5,3,-1,1,-3,-4,5,4,8,4,-10,1,-8,-8,9,8,-8,-7,-3,-10,-7,-7,4,4,9,7,-1,-3,-7,9,2,9,2,9,-8,4,-3,-8,6,2,4,-7,10,-3,10,10,-3,9,6,-3,-7,10,1,9,-3,-3,2,1,7,-6,10,-10,-8,-8,-9,1,-1,-7,2,-10,-7,-2,-10,-1,-9,-7,-5,-9,5,9,2,9,-10,8,2,-7,-10,10,-1,8,-7,8,9,7,9,-10,-8,4,7,10,-9,-10,5,8,10,8,2,-3,5,7,-8,3,-7,-3,-1,4,9,1,-4,4,7,-3,-7,-10,-6,6,-5,9,-10,-6,7,-2,-4,2,4,-3,-9,-1,-3,-1,-9,5,6,6,8,8,2,4,3,-5,4,-9,6,-9,1,10,-7,-4,10,-8,3,-6,5,4,-5,-6,-9,-2,-7,6,1,7,-10,10,4,2,3,6,-9,-8,1,3,-1,7,-6,-7,6,4,9,-9,1,2,-9,-1,-1,5,5,2,-5,-5,1,-9,-5,4,-6,-7,-4,10,-9,4,-10,-2,6,-2,-2,-3,8,-9,-4,9,5,4,6,3,-5,-7,-5,-1,-10,2,-9,-6,-7,-1,7,-1,-9,2,-1,3,3,2,-7,-8,5,3,-5,2,-2,-2,-7,3,-8,-1,3,4,4,-1,8,-9,9,6,1,-5,2,-3,-10,3,5,-8,8,2,7,-2,-3,7,-5,6,-2,-8,-10,-3,9,-10,-10,3,-10,9,-8,-2,5,3,-4,-5,-9,1,6,-10,10,9,8,-7,9,-6,10,-8,-9,7,1,2,-5,-9,-6,5,-9,-5,8,-5,-1,-4,9,6,-6,-3,-4,-6,7,9,-4,-9,-3,-10,-8,10,4,-8,7,-2,8,-9,-2,1,-10,-1,7,7,-6,-10,2,2,3,10,8,4,-1,6,10,1,8,-4,3,4,8,2,6,-7,-7,-1,-1,9,-2,3,2,3,7,-6,1,-2,6,1,9,10,-5,9,8,7,-2,-3,8,8,-3,8,6,3,3,5,9,9,8,9,-7,7,1,-6,6,-4,8,-1,1,8,5,7,-9,-10,-4,5,7,1,-2,5,-2,-4,-1,7,-8,-6,-8,-9,-7,4,-9,-3,10,4,-4,7,10,-8,-8,-10,2,9,9,7,-6,7,9,-2,3,-9,7,-3,-9,7,-8,4,-5,9,9,-7,-6,-10,4,2,-8,-4,-10,1,2,9,-4,-1,3,2,6,9,-6,7,-9,-7,3,-1,2,2,-9,-3,3,-4,4,10,-7,-1,6,-3,8,-3,3,4,7,9,-7,10,8,6,-4,-3,-5,-4,-4,-7,6,3,-7,5,3,1,8,-1,9], dtype = "uint64")#candidate|218|(1215,)|const|uint64
call_217 = func_91_call(relay.reshape(const_218.astype('uint64'), [9, 9, 15]))
call_219 = func_91_call(relay.reshape(const_218.astype('uint64'), [9, 9, 15]))
bop_220 = relay.logical_and(var_203.astype('bool'), uop_161.astype('bool')) # shape=(15,)
uop_223 = relay.rsqrt(bop_212.astype('float64')) # shape=(1,)
bop_225 = relay.less_equal(uop_223.astype('bool'), relay.reshape(uop_169.astype('bool'), relay.shape_of(uop_223))) # shape=(1,)
uop_233 = relay.log10(bop_220.astype('float32')) # shape=(15,)
func_42_call = mod.get_global_var('func_42')
func_45_call = mutated_mod.get_global_var('func_45')
const_236 = relay.const([5.067796,8.779606,-5.610860,-9.423991,3.491905,2.542077,-9.616407,7.758566,-5.984267,-1.986140,-5.104382,-0.142034,-0.364638,-0.957047,-3.453015,-9.342376,5.481889,-6.737362,6.664621,8.757770,4.313236,-2.743487,0.363169,8.970901,-0.631955,5.053145,6.858557,-8.586164,-7.970379,-0.530028], dtype = "float32")#candidate|236|(30,)|const|float32
const_237 = relay.const([-6.479670,8.706410,-8.716074,5.674626,7.227590,1.212163,2.108495,-5.902574,3.222647,-6.525662,6.180570,-4.674450,4.089687,-6.672020,9.999465,1.030726,-2.262115,-8.534606,-8.358577,-1.453737,1.864182,-5.853556,2.480392,-7.440386,-9.553686,5.447747,8.471599,2.819411,-7.437484,-4.568273,5.250451,-6.909688,-1.218299,4.430980,-3.223441,-3.298777,7.998703,-1.244728,7.185609,8.188006,7.968620,7.828769,9.854324,7.380304,-0.276102,9.151812,-0.303411,5.554333,-9.102183,7.271561,5.499823,0.662677,-7.490010,9.946625,-8.246407,9.535337,6.329308,4.720742,8.491536,6.695944,-9.693199,-2.561080,-7.123228,1.753404,-1.181839,1.251601,-8.939013,-4.009944,-5.260052,-4.677941,1.439601,-4.956971,-5.535147,6.443825,-9.652554,4.704567,0.332282,3.630821,-0.258269,8.023803,1.274925,-5.868102,2.544015,-5.669680,-5.165810,-4.992349,-8.264464,-5.507382,-8.010871,9.008862,-2.750650,9.892447,-7.007866,0.152407,2.210328,3.580281,6.489482,-8.769716,-7.895104,-1.766797,3.418690,-8.321792,8.686002,-4.550502,-5.901835,5.153704,0.097960,6.006640,5.411027,-9.813471,9.782430,-5.038944,7.739820,8.632861,2.686268,-1.301193,-1.212601,7.061742,5.023290,-9.949598,6.114638,9.548207,-3.328893,-9.753087,8.904117,9.262274,-5.330268,-2.669716,-7.506764,9.561152,7.962055,9.645262,8.348445,-0.822314,-0.430834,-5.919151,-0.097263,-4.503864,-0.650717,-5.908963,3.159108,-1.622863,9.624359,7.742773,-6.720141,-0.682951,-3.528911,-7.214188,-5.979552,4.595841,6.192861,-3.800961,5.078035,-0.857162,7.354142,8.413814,-2.210147,-0.665184,-5.160036,-6.117871,-1.724320,3.982826,-4.284490,-2.664266,-8.302548,5.445208,-8.975658,6.330614,0.016774,6.633169,-0.924324,6.433818,9.855579,2.140327,-6.755490,-7.236433,-7.949103,3.849697,8.160256,4.645295,3.928274,7.606107,-6.861727,5.148649,9.621580,-7.361543,-1.251231,-4.799569,6.148536,8.653965,1.948351,-9.690085,7.304076,-7.807227,-7.656028,-0.078195,9.019778,1.369585,-2.514012,1.947872,4.435097,-7.435995,6.388936,6.688952,-3.160405,-8.535698,5.999928,4.409735,3.253024,9.482346,4.279267,6.020613,-1.990908,-2.255533,-3.720245,-3.019972,2.769074,8.700936,8.520025,4.749666,5.000938,-4.996236,-0.308551,-7.996397,0.618014,2.028085,6.642136,7.193387,4.188765,0.055756,9.246131,-0.302425,-6.889867,-0.658171,-9.742204,1.988382,4.896121,-9.321422,4.188480,6.486995,9.956346,6.196534,-7.767563,-9.758065,-1.479437,3.561755,8.896476,-3.763258,0.685598,0.951063,-9.324184,3.854589,-9.966798,5.009683,-5.835542,7.277680,-2.929513,2.373570,2.061331,-8.607353,9.429581,-8.738624,3.107757,-0.785549,6.998714,2.706884,-1.119559,6.697393,-9.205123,-8.841178,-8.336303,-4.870653,-7.816517,9.309260,8.140147,5.771640,0.565147,6.842075,-9.445994,8.044187,-2.890074,6.915614,4.070976,1.483652,8.524555,8.450517,8.617864,-2.597762,7.342508,-5.197281,-5.233786,9.828889,4.836689,-7.756403,-9.221087,7.209873,-6.897382,4.938320,3.812076,-3.836012,-7.764587,-2.730459,6.811394,3.672697,-4.707450,-7.792707,4.113579,-0.817141,-8.008578,-5.801086,-0.091129,1.480895,-2.994206,3.774035,-0.242627,-0.726838,7.491193,-1.687377,-3.008444,6.830947,0.312375,1.723835,4.835686,6.801037,-8.045237,-2.305225,8.965934,-0.880583,-5.360026,-9.021265], dtype = "float32")#candidate|237|(330,)|const|float32
call_235 = relay.TupleGetItem(func_42_call(relay.reshape(const_236.astype('float32'), [1, 10, 3]), relay.reshape(const_237.astype('float32'), [11, 10, 3]), ), 1)
call_238 = relay.TupleGetItem(func_45_call(relay.reshape(const_236.astype('float32'), [1, 10, 3]), relay.reshape(const_237.astype('float32'), [11, 10, 3]), ), 1)
uop_239 = relay.tan(bop_179.astype('float64')) # shape=(1,)
func_91_call = mod.get_global_var('func_91')
func_93_call = mutated_mod.get_global_var('func_93')
call_247 = func_91_call(relay.reshape(const_218.astype('uint64'), [9, 9, 15]))
call_248 = func_91_call(relay.reshape(const_218.astype('uint64'), [9, 9, 15]))
uop_255 = relay.asin(bop_225.astype('float64')) # shape=(1,)
bop_257 = relay.add(uop_255.astype('float32'), bop_220.astype('float32')) # shape=(15,)
bop_262 = relay.divide(uop_223.astype('float32'), relay.reshape(bop_179.astype('float32'), relay.shape_of(uop_223))) # shape=(1,)
var_266 = relay.var("var_266", dtype = "float32", shape = (15,))#candidate|266|(15,)|var|float32
bop_267 = relay.floor_divide(bop_257.astype('float64'), relay.reshape(var_266.astype('float64'), relay.shape_of(bop_257))) # shape=(15,)
func_42_call = mod.get_global_var('func_42')
func_45_call = mutated_mod.get_global_var('func_45')
call_270 = relay.TupleGetItem(func_42_call(relay.reshape(const_236.astype('float32'), [1, 10, 3]), relay.reshape(call_235.astype('float32'), [11, 10, 3]), ), 1)
call_271 = relay.TupleGetItem(func_45_call(relay.reshape(const_236.astype('float32'), [1, 10, 3]), relay.reshape(call_235.astype('float32'), [11, 10, 3]), ), 1)
bop_273 = relay.bitwise_and(bop_225.astype('uint64'), bop_267.astype('uint64')) # shape=(15,)
bop_277 = relay.greater(bop_209.astype('bool'), bop_273.astype('bool')) # shape=(15,)
uop_280 = relay.acosh(bop_262.astype('float32')) # shape=(1,)
output = relay.Tuple([bop_188,bop_200,bop_204,call_217,const_218,uop_233,call_235,const_236,const_237,uop_239,call_247,call_270,bop_277,uop_280,])
output2 = relay.Tuple([bop_188,bop_200,bop_204,call_219,const_218,uop_233,call_238,const_236,const_237,uop_239,call_248,call_271,bop_277,uop_280,])
func_284 = relay.Function([var_160,var_203,var_266,], output)
mod['func_284'] = func_284
mod = relay.transform.InferType()(mod)
var_285 = relay.var("var_285", dtype = "float32", shape = (1,))#candidate|285|(1,)|var|float32
var_286 = relay.var("var_286", dtype = "int16", shape = (15,))#candidate|286|(15,)|var|int16
var_287 = relay.var("var_287", dtype = "float32", shape = (15,))#candidate|287|(15,)|var|float32
output = func_284(var_285,var_286,var_287,)
func_288 = relay.Function([var_285,var_286,var_287,], output)
mutated_mod['func_288'] = func_288
mutated_mod = relay.transform.InferType()(mutated_mod)
var_351 = relay.var("var_351", dtype = "float64", shape = (4, 1))#candidate|351|(4, 1)|var|float64
uop_352 = relay.log10(var_351.astype('float64')) # shape=(4, 1)
func_42_call = mod.get_global_var('func_42')
func_45_call = mutated_mod.get_global_var('func_45')
const_358 = relay.const([3.806557,4.402754,0.824937,1.811096,4.439135,7.468837,6.406210,1.310960,5.758878,0.252407,7.760311,-2.612708,-0.573494,5.438220,8.678120,-4.835354,1.032006,-4.819960,2.820252,7.928348,-0.538213,0.400795,-2.827118,7.791428,-9.277001,-4.725297,-6.445570,-4.215742,-8.910734,6.797396], dtype = "float32")#candidate|358|(30,)|const|float32
var_359 = relay.var("var_359", dtype = "float32", shape = (330,))#candidate|359|(330,)|var|float32
call_357 = relay.TupleGetItem(func_42_call(relay.reshape(const_358.astype('float32'), [1, 10, 3]), relay.reshape(var_359.astype('float32'), [11, 10, 3]), ), 0)
call_360 = relay.TupleGetItem(func_45_call(relay.reshape(const_358.astype('float32'), [1, 10, 3]), relay.reshape(var_359.astype('float32'), [11, 10, 3]), ), 0)
uop_361 = relay.sinh(const_358.astype('float64')) # shape=(30,)
bop_363 = relay.minimum(uop_361.astype('int32'), var_351.astype('int32')) # shape=(4, 30)
bop_368 = relay.bitwise_or(bop_363.astype('int8'), var_351.astype('int8')) # shape=(4, 30)
output = relay.Tuple([uop_352,call_357,var_359,bop_368,])
output2 = relay.Tuple([uop_352,call_360,var_359,bop_368,])
func_375 = relay.Function([var_351,var_359,], output)
mod['func_375'] = func_375
mod = relay.transform.InferType()(mod)
mutated_mod['func_375'] = func_375
mutated_mod = relay.transform.InferType()(mutated_mod)
func_375_call = mutated_mod.get_global_var('func_375')
var_377 = relay.var("var_377", dtype = "float64", shape = (4, 1))#candidate|377|(4, 1)|var|float64
var_378 = relay.var("var_378", dtype = "float32", shape = (330,))#candidate|378|(330,)|var|float32
call_376 = func_375_call(var_377,var_378,)
output = call_376
func_379 = relay.Function([var_377,var_378,], output)
mutated_mod['func_379'] = func_379
mutated_mod = relay.transform.InferType()(mutated_mod)
const_391 = relay.const([[[-9.049425,3.957566,-2.549209,-9.591542,-0.845196,-7.521729,-2.014971],[-1.261964,8.675875,1.117666,-9.949006,8.454386,6.770711,-5.789841],[8.537620,1.080498,-1.005002,-0.178726,-9.825505,-3.922262,5.186474],[8.731559,-5.366103,3.618021,4.827127,8.966587,-5.468040,-3.986727],[-3.603701,-0.729338,7.987175,9.443089,-5.977955,-4.058771,8.137329],[3.174564,1.242690,-5.265885,9.010821,8.677133,-4.829664,-3.860646],[-1.081202,-5.946256,1.831380,-5.898403,-9.118753,6.949566,0.718861],[-4.809180,-4.798734,9.104903,-5.757820,6.269074,7.100750,9.030384]],[[-3.379008,-4.429386,-7.499240,1.020486,-8.985785,-3.431416,-2.135337],[8.449451,-4.210923,-4.560224,-6.618291,-0.726936,3.759552,-7.348932],[2.253590,-2.050602,7.958396,-7.488896,-0.861344,1.205359,2.751938],[2.417503,2.344191,-9.527064,-8.164873,0.835122,-8.695404,-9.194489],[4.183582,3.740814,-9.466281,-6.240249,-6.688780,5.974907,7.263920],[3.462166,2.213008,-4.210530,-4.809262,-2.695829,4.165967,1.112636],[5.005518,9.185383,-5.088047,1.725154,-2.391108,-8.320437,-0.410272],[3.380948,-0.459792,2.323913,-3.983785,6.764451,-7.490369,5.417339]],[[8.346007,4.342350,-9.246882,5.122121,7.935950,3.696281,4.721819],[5.306361,-1.592301,1.798504,4.120877,-3.356519,-9.316311,-0.341794],[1.063295,-9.819276,-4.525780,1.065919,-1.069567,0.369917,-2.665960],[3.559609,-5.145349,4.714985,-5.023530,-8.370682,2.935073,2.667031],[-9.949408,-7.656526,9.266422,-5.063150,1.229149,0.479537,-0.914315],[6.288721,1.200658,-6.540890,1.195498,-3.468827,-6.112994,-5.243855],[8.340539,3.035706,4.240207,4.015109,-9.727093,1.598772,-8.082510],[1.555315,7.337813,6.577224,-6.495988,8.165095,8.759971,8.572987]],[[-4.467806,-4.898086,7.802745,3.763193,3.608212,0.809487,-6.683677],[0.330132,7.961965,9.403459,-5.965382,-8.825365,3.279010,-5.375250],[6.820990,-7.673632,3.376202,-7.194595,5.043529,-5.305637,-0.753919],[-7.267701,-7.877655,5.370627,4.658926,-5.296693,3.182219,-5.105448],[-6.012072,-4.388683,-4.476251,5.119019,3.187864,-7.116314,5.429446],[2.576631,-6.836515,-4.762716,-4.299058,9.519674,2.807855,5.000220],[-8.759060,5.459758,-3.503991,-3.925750,-8.290620,0.275791,0.854872],[-8.894980,-9.482561,3.686404,-7.902420,2.423259,2.543592,-3.684573]],[[-6.087534,-4.036705,8.805073,-1.564789,9.033038,-7.160432,-3.390575],[3.926198,9.228923,4.765400,1.869628,-1.048052,-7.187936,-7.866406],[-1.917934,-8.014632,-6.511272,6.419096,-3.873032,-9.369260,8.877854],[-9.017197,-1.851642,3.131366,7.228101,5.768396,4.934462,-5.986963],[1.408148,-4.998727,1.503121,-9.970184,6.850641,6.024659,3.402591],[9.270769,-9.925288,4.454188,6.687101,-8.360091,3.029127,2.034798],[-8.268090,-5.319612,0.072136,5.228527,-4.095797,-4.934601,-0.971039],[6.134128,1.523972,-0.340301,-8.676319,-3.691388,-0.587729,4.003751]],[[-2.603739,6.037218,-4.618597,-0.546129,-2.906828,6.191663,-4.140127],[-2.251745,3.925503,-3.851420,-9.823543,2.009181,-8.249556,-4.744966],[-8.914654,-2.059656,-7.074636,0.063035,-4.382242,-2.173050,-4.014482],[0.426734,-3.358200,1.238711,5.385659,-6.234387,-7.472396,2.372040],[-3.985135,8.087571,2.670106,4.990527,0.868446,-2.205595,8.374249],[-8.018728,-6.974820,-5.939241,1.054394,2.067207,9.481498,-1.083644],[6.077128,9.717060,4.060033,-2.794827,-0.346539,0.774587,5.167885],[5.474232,-1.259207,-3.837094,9.698950,7.578606,-5.671448,-4.204260]],[[6.846933,8.022326,-0.766730,-5.896564,4.517718,-3.187876,-7.848121],[-0.085257,4.462043,-4.496312,2.524985,8.946622,2.700806,-4.631150],[8.353969,-7.977692,0.395257,4.213792,-0.237600,-0.866123,-7.745404],[6.848342,-5.948266,-8.419389,-3.960486,3.921428,6.658236,-3.931634],[-3.647967,-3.429908,8.054973,-0.577148,-5.147923,-3.296888,2.520301],[4.592104,6.166860,-5.259198,-1.987274,-6.013383,-8.334847,-7.005488],[-6.189033,-2.377794,5.890874,-8.556528,6.998902,-2.884256,-3.331423],[-5.377195,5.701909,2.708789,2.423597,-6.726334,6.972627,-4.553050]],[[-8.717500,8.961790,8.170767,4.252095,4.871044,-4.263473,-8.847268],[-2.869652,2.774991,-8.713426,-8.800209,-1.545773,-7.111680,9.352204],[3.618842,9.186963,8.618790,-6.171906,-9.110360,2.415555,2.855408],[1.683571,-6.485190,-4.609587,-8.908044,-6.790053,-6.242662,-5.140283],[7.974723,-3.951950,2.015478,3.528353,9.534408,-5.912884,6.049665],[1.033029,7.311815,0.221897,-7.219061,7.604759,-1.384580,-6.667337],[-1.601170,9.696678,-7.460387,-2.360519,8.194613,-6.801601,5.649078],[0.529782,2.406673,1.889859,4.517559,-3.336956,-6.280954,-3.489359]],[[-4.477307,-9.072374,-0.421733,-6.923368,2.051966,-9.554208,-2.247063],[9.280825,5.234022,9.823460,5.098536,9.396813,6.138246,3.360514],[-6.242112,-2.893521,-7.536614,7.423756,7.448451,2.340083,6.381299],[8.197107,9.327634,5.007977,4.916895,5.497442,-1.567977,0.753414],[-7.804559,4.951396,8.550956,5.180749,-1.557004,-0.203741,7.277371],[9.627881,4.421355,-7.872790,6.578083,-8.193970,-4.934990,-4.527979],[-9.060477,-4.097001,-6.104841,6.214804,-6.786193,4.761529,-0.830522],[-6.423671,1.743025,-9.557135,-7.396044,3.430884,-6.276608,8.444388]],[[4.361829,5.520338,7.734413,5.433204,-6.236772,9.129975,3.253308],[2.107080,-9.856692,6.536421,6.130661,7.817611,2.206777,-3.528507],[-8.180272,-5.166022,8.552633,9.341556,-2.347293,-3.446339,-8.666112],[8.157015,-8.737465,5.186368,-3.501108,-8.984663,-2.030648,2.176198],[7.285813,3.732327,9.270332,4.185203,-4.805789,-3.955038,2.520121],[5.333504,-3.056037,-8.873733,7.344801,-5.546397,-2.335186,-1.864461],[-8.209957,-2.253963,9.481787,5.769259,-6.156493,7.376685,6.611490],[0.818841,-7.424495,-1.766629,8.858117,3.834778,-9.292177,-4.078827]],[[-6.569041,2.599130,-2.830035,-4.143316,-2.607336,1.247388,5.193910],[3.350183,-8.927193,1.314688,4.031256,9.638210,-3.664840,9.479574],[-3.041855,-4.896592,-1.880573,2.204030,1.554297,-8.478259,0.869155],[-3.472495,-0.167566,-2.821374,-9.737695,7.286683,9.106702,-2.220111],[8.228486,8.585911,3.325013,4.178744,4.255257,2.002818,-3.971417],[-4.208404,7.647308,-6.422756,-3.845996,-0.662395,7.222237,-6.919146],[-4.948545,-5.593541,4.332139,-1.223721,4.791996,-2.742793,-7.135624],[-5.891651,-4.476510,2.599300,2.280367,4.715719,-0.451374,0.122827]],[[-0.338440,-4.736453,-9.066081,-3.611533,-7.258717,3.973124,-4.596088],[5.424594,5.314239,-4.041329,-7.838550,0.730745,8.211280,-2.933792],[-2.811738,7.022021,7.052462,5.499635,8.357058,4.875112,-6.057979],[0.131577,7.311212,-2.407125,-8.812194,-4.388568,-1.764784,3.588390],[-0.675473,3.817711,2.258015,3.654776,-5.552904,-3.345887,1.243647],[-1.796078,-6.459952,-9.042217,-0.382718,-2.031378,9.086701,6.616266],[-3.968482,-5.084671,-2.607916,3.000336,-5.295344,8.840833,-1.741426],[-9.506916,2.267838,4.738320,5.313439,9.349678,-1.341431,-5.530819]],[[-3.018839,9.587487,-7.060408,-4.983668,7.852797,-3.955537,-0.319153],[9.508904,-7.454374,-1.400761,-9.423069,6.921918,-6.208181,5.265701],[4.763723,-7.572099,9.172250,-5.160115,9.205131,0.810777,0.120612],[3.908742,9.597357,-5.773312,-1.531806,9.230510,-1.104151,-4.512614],[-3.400286,-5.141063,-2.658042,8.145162,-2.463704,7.230482,-6.224128],[7.291462,5.232334,-8.871718,0.128071,-3.322049,4.600442,-4.835870],[-7.409343,-8.357360,-4.247476,-0.232915,-3.998386,-0.965251,-4.992563],[-9.754491,-9.497767,-7.864060,-3.723838,-2.285514,4.212926,-9.453984]],[[4.355443,-1.888769,1.615769,-0.888336,6.111314,-7.556072,-3.388223],[4.780202,1.083262,-1.889573,9.007840,3.605895,7.013919,6.596225],[-9.544880,8.432730,-4.982281,5.376845,2.037619,9.920613,0.447830],[-6.110305,-0.740424,-5.883152,3.135313,-1.649556,7.863542,6.385052],[6.705336,1.078901,-2.241768,7.865079,-7.730756,-2.074956,-7.107283],[9.655493,-8.160808,-0.618912,1.129924,-1.830405,8.408809,7.253254],[-9.648066,9.984200,5.780146,1.374282,4.537804,-1.432489,2.538728],[3.292372,-7.942331,9.286790,-9.647784,7.489947,-6.776512,4.274361]]], dtype = "float32")#candidate|391|(14, 8, 7)|const|float32
var_392 = relay.var("var_392", dtype = "float32", shape = (14, 8, 7))#candidate|392|(14, 8, 7)|var|float32
bop_393 = relay.power(const_391.astype('float32'), relay.reshape(var_392.astype('float32'), relay.shape_of(const_391))) # shape=(14, 8, 7)
uop_397 = relay.asinh(var_392.astype('float64')) # shape=(14, 8, 7)
bop_402 = relay.maximum(uop_397.astype('uint64'), relay.reshape(const_391.astype('uint64'), relay.shape_of(uop_397))) # shape=(14, 8, 7)
uop_405 = relay.log2(uop_397.astype('float32')) # shape=(14, 8, 7)
uop_407 = relay.cosh(bop_402.astype('float32')) # shape=(14, 8, 7)
uop_413 = relay.sinh(uop_407.astype('float32')) # shape=(14, 8, 7)
bop_415 = relay.multiply(uop_405.astype('int64'), relay.reshape(const_391.astype('int64'), relay.shape_of(uop_405))) # shape=(14, 8, 7)
uop_420 = relay.log(uop_413.astype('float32')) # shape=(14, 8, 7)
bop_423 = relay.less(uop_420.astype('bool'), relay.reshape(var_392.astype('bool'), relay.shape_of(uop_420))) # shape=(14, 8, 7)
output = relay.Tuple([bop_393,bop_415,bop_423,])
output2 = relay.Tuple([bop_393,bop_415,bop_423,])
func_428 = relay.Function([var_392,], output)
mod['func_428'] = func_428
mod = relay.transform.InferType()(mod)
mutated_mod['func_428'] = func_428
mutated_mod = relay.transform.InferType()(mutated_mod)
var_429 = relay.var("var_429", dtype = "float32", shape = (14, 8, 7))#candidate|429|(14, 8, 7)|var|float32
func_428_call = mutated_mod.get_global_var('func_428')
call_430 = func_428_call(var_429)
output = call_430
func_431 = relay.Function([var_429], output)
mutated_mod['func_431'] = func_431
mutated_mod = relay.transform.InferType()(mutated_mod)
var_442 = relay.var("var_442", dtype = "int16", shape = (2, 15, 12))#candidate|442|(2, 15, 12)|var|int16
var_443 = relay.var("var_443", dtype = "int16", shape = (2, 15, 12))#candidate|443|(2, 15, 12)|var|int16
bop_444 = relay.minimum(var_442.astype('int16'), relay.reshape(var_443.astype('int16'), relay.shape_of(var_442))) # shape=(2, 15, 12)
uop_450 = relay.log2(bop_444.astype('float32')) # shape=(2, 15, 12)
uop_452 = relay.erf(uop_450.astype('float64')) # shape=(2, 15, 12)
bop_457 = relay.bitwise_xor(uop_452.astype('int32'), relay.reshape(uop_450.astype('int32'), relay.shape_of(uop_452))) # shape=(2, 15, 12)
uop_460 = relay.acos(uop_450.astype('float32')) # shape=(2, 15, 12)
uop_462 = relay.log(bop_457.astype('float32')) # shape=(2, 15, 12)
uop_468 = relay.exp(uop_460.astype('float32')) # shape=(2, 15, 12)
bop_470 = relay.left_shift(uop_462.astype('uint16'), relay.reshape(uop_450.astype('uint16'), relay.shape_of(uop_462))) # shape=(2, 15, 12)
uop_474 = relay.cosh(uop_460.astype('float32')) # shape=(2, 15, 12)
func_284_call = mod.get_global_var('func_284')
func_288_call = mutated_mod.get_global_var('func_288')
const_477 = relay.const([[5.991605]], dtype = "float32")#candidate|477|(1, 1)|const|float32
var_478 = relay.var("var_478", dtype = "int16", shape = (15,))#candidate|478|(15,)|var|int16
call_476 = relay.TupleGetItem(func_284_call(relay.reshape(const_477.astype('float32'), [1,]), relay.reshape(var_478.astype('int16'), [15,]), relay.reshape(var_478.astype('float32'), [15,]), ), 6)
call_479 = relay.TupleGetItem(func_288_call(relay.reshape(const_477.astype('float32'), [1,]), relay.reshape(var_478.astype('int16'), [15,]), relay.reshape(var_478.astype('float32'), [15,]), ), 6)
uop_480 = relay.sigmoid(uop_474.astype('float32')) # shape=(2, 15, 12)
bop_482 = relay.floor_divide(var_443.astype('float32'), relay.reshape(uop_468.astype('float32'), relay.shape_of(var_443))) # shape=(2, 15, 12)
func_284_call = mod.get_global_var('func_284')
func_288_call = mutated_mod.get_global_var('func_288')
call_486 = relay.TupleGetItem(func_284_call(relay.reshape(const_477.astype('float32'), [1,]), relay.reshape(var_478.astype('int16'), [15,]), relay.reshape(var_478.astype('float32'), [15,]), ), 9)
call_487 = relay.TupleGetItem(func_288_call(relay.reshape(const_477.astype('float32'), [1,]), relay.reshape(var_478.astype('int16'), [15,]), relay.reshape(var_478.astype('float32'), [15,]), ), 9)
func_375_call = mod.get_global_var('func_375')
func_379_call = mutated_mod.get_global_var('func_379')
var_489 = relay.var("var_489", dtype = "float64", shape = (4,))#candidate|489|(4,)|var|float64
call_488 = relay.TupleGetItem(func_375_call(relay.reshape(var_489.astype('float64'), [4, 1]), relay.reshape(call_476.astype('float32'), [330,]), ), 2)
call_490 = relay.TupleGetItem(func_379_call(relay.reshape(var_489.astype('float64'), [4, 1]), relay.reshape(call_476.astype('float32'), [330,]), ), 2)
var_492 = relay.var("var_492", dtype = "float32", shape = (2, 15, 12))#candidate|492|(2, 15, 12)|var|float32
bop_493 = relay.floor_mod(uop_450.astype('float64'), relay.reshape(var_492.astype('float64'), relay.shape_of(uop_450))) # shape=(2, 15, 12)
bop_496 = relay.logical_and(uop_480.astype('bool'), relay.reshape(bop_482.astype('bool'), relay.shape_of(uop_480))) # shape=(2, 15, 12)
uop_499 = relay.sqrt(uop_480.astype('float32')) # shape=(2, 15, 12)
var_504 = relay.var("var_504", dtype = "bool", shape = (2, 15, 12))#candidate|504|(2, 15, 12)|var|bool
bop_505 = relay.equal(bop_496.astype('bool'), relay.reshape(var_504.astype('bool'), relay.shape_of(bop_496))) # shape=(2, 15, 12)
bop_512 = relay.bitwise_and(uop_499.astype('int8'), relay.reshape(bop_505.astype('int8'), relay.shape_of(uop_499))) # shape=(2, 15, 12)
var_516 = relay.var("var_516", dtype = "float32", shape = (2, 15, 12))#candidate|516|(2, 15, 12)|var|float32
bop_517 = relay.logical_or(uop_462.astype('bool'), relay.reshape(var_516.astype('bool'), relay.shape_of(uop_462))) # shape=(2, 15, 12)
uop_520 = relay.asin(uop_499.astype('float32')) # shape=(2, 15, 12)
output = relay.Tuple([bop_470,call_476,const_477,var_478,call_486,call_488,var_489,bop_493,bop_512,bop_517,uop_520,])
output2 = relay.Tuple([bop_470,call_479,const_477,var_478,call_487,call_490,var_489,bop_493,bop_512,bop_517,uop_520,])
func_523 = relay.Function([var_442,var_443,var_478,var_489,var_492,var_504,var_516,], output)
mod['func_523'] = func_523
mod = relay.transform.InferType()(mod)
var_524 = relay.var("var_524", dtype = "int16", shape = (2, 15, 12))#candidate|524|(2, 15, 12)|var|int16
var_525 = relay.var("var_525", dtype = "int16", shape = (2, 15, 12))#candidate|525|(2, 15, 12)|var|int16
var_526 = relay.var("var_526", dtype = "int16", shape = (15,))#candidate|526|(15,)|var|int16
var_527 = relay.var("var_527", dtype = "float64", shape = (4,))#candidate|527|(4,)|var|float64
var_528 = relay.var("var_528", dtype = "float32", shape = (2, 15, 12))#candidate|528|(2, 15, 12)|var|float32
var_529 = relay.var("var_529", dtype = "bool", shape = (2, 15, 12))#candidate|529|(2, 15, 12)|var|bool
var_530 = relay.var("var_530", dtype = "float32", shape = (2, 15, 12))#candidate|530|(2, 15, 12)|var|float32
output = func_523(var_524,var_525,var_526,var_527,var_528,var_529,var_530,)
func_531 = relay.Function([var_524,var_525,var_526,var_527,var_528,var_529,var_530,], output)
mutated_mod['func_531'] = func_531
mutated_mod = relay.transform.InferType()(mutated_mod)
const_553 = relay.const([-2.002033,-7.558713,7.402571,-2.769280,8.615433,-1.181208,-5.454111,-0.764701,6.087932,8.711706], dtype = "float32")#candidate|553|(10,)|const|float32
const_554 = relay.const([5.460798,-6.017358,8.403117,-8.425739,0.151223,9.542546,-4.420882,-9.264025,2.389236,-6.126324], dtype = "float32")#candidate|554|(10,)|const|float32
bop_555 = relay.power(const_553.astype('float32'), relay.reshape(const_554.astype('float32'), relay.shape_of(const_553))) # shape=(10,)
func_375_call = mod.get_global_var('func_375')
func_379_call = mutated_mod.get_global_var('func_379')
var_559 = relay.var("var_559", dtype = "float64", shape = (4,))#candidate|559|(4,)|var|float64
var_560 = relay.var("var_560", dtype = "float32", shape = (330,))#candidate|560|(330,)|var|float32
call_558 = relay.TupleGetItem(func_375_call(relay.reshape(var_559.astype('float64'), [4, 1]), relay.reshape(var_560.astype('float32'), [330,]), ), 2)
call_561 = relay.TupleGetItem(func_379_call(relay.reshape(var_559.astype('float64'), [4, 1]), relay.reshape(var_560.astype('float32'), [330,]), ), 2)
output = relay.Tuple([bop_555,call_558,var_559,var_560,])
output2 = relay.Tuple([bop_555,call_561,var_559,var_560,])
func_562 = relay.Function([var_559,var_560,], output)
mod['func_562'] = func_562
mod = relay.transform.InferType()(mod)
mutated_mod['func_562'] = func_562
mutated_mod = relay.transform.InferType()(mutated_mod)
func_562_call = mutated_mod.get_global_var('func_562')
var_564 = relay.var("var_564", dtype = "float64", shape = (4,))#candidate|564|(4,)|var|float64
var_565 = relay.var("var_565", dtype = "float32", shape = (330,))#candidate|565|(330,)|var|float32
call_563 = func_562_call(var_564,var_565,)
output = call_563
func_566 = relay.Function([var_564,var_565,], output)
mutated_mod['func_566'] = func_566
mutated_mod = relay.transform.InferType()(mutated_mod)
var_635 = relay.var("var_635", dtype = "float64", shape = (4, 4))#candidate|635|(4, 4)|var|float64
uop_636 = relay.sinh(var_635.astype('float64')) # shape=(4, 4)
uop_640 = relay.acosh(uop_636.astype('float32')) # shape=(4, 4)
bop_646 = relay.equal(uop_636.astype('bool'), relay.reshape(var_635.astype('bool'), relay.shape_of(uop_636))) # shape=(4, 4)
func_562_call = mod.get_global_var('func_562')
func_566_call = mutated_mod.get_global_var('func_566')
var_651 = relay.var("var_651", dtype = "float64", shape = (4,))#candidate|651|(4,)|var|float64
const_652 = relay.const([-4.494322,-9.329973,5.416195,-4.154898,-8.618167,-0.087092,-7.960040,-6.677494,2.520138,-9.466263,-4.680819,-2.238335,7.467797,6.493948,7.258649,-2.467725,-8.779983,9.654609,-0.271385,-7.006824,1.892456,6.068997,-5.165351,-3.024951,-5.812166,-1.506874,-7.510602,7.220532,-6.598762,2.093423,1.909195,7.475852,-8.902809,7.761358,8.022772,4.758507,7.344287,-1.731644,-3.213137,4.114625,0.493820,-9.348046,-8.748532,8.356520,-5.315075,-6.045681,9.279835,5.595393,1.131352,-8.324961,-6.860549,0.497911,-7.796403,7.200316,7.896259,-5.525186,3.171448,-7.547875,-1.147815,-7.142376,-5.581132,2.909110,-2.525199,7.130825,3.505167,-6.379484,-9.236891,0.391939,5.452622,8.396982,-0.148962,-4.594363,-2.711573,7.253440,-0.005491,0.959033,6.917771,-0.334596,-4.996032,2.313560,-7.524485,3.869221,0.564369,3.207464,-8.815220,0.701049,-4.893058,-5.701373,5.409480,-8.098905,0.060762,-4.917021,-0.925251,-1.468580,1.140864,-0.579684,-2.171790,-2.359996,6.780381,-7.769463,-2.436256,-1.959300,3.668711,-6.279551,-9.226023,5.596496,-2.329878,-0.609091,-7.557194,6.278019,-7.959720,8.285851,-5.908705,2.112186,-1.743135,8.680778,0.216468,6.602130,-0.923360,1.307055,-9.700320,-6.806463,5.961450,7.345819,6.422781,0.296838,6.793308,-6.071969,-9.825421,6.736997,-3.179474,1.173561,-9.760430,-0.495694,-1.923237,4.706839,-5.278956,-7.254763,0.692956,-1.975301,-6.541070,-9.502653,-6.500520,9.396354,-7.392762,6.776935,0.048201,5.202522,-8.415971,-3.345053,5.906363,2.787531,2.174000,4.135092,-5.575753,-1.553987,3.958334,-0.254494,5.849017,-0.291629,-3.021035,-6.622520,0.501999,0.713815,-6.406295,-3.037234,6.831106,5.874104,9.358799,4.254294,-8.105447,1.477424,5.620266,-2.792498,3.770909,-8.266455,-1.329321,-9.267339,-7.006906,1.772235,5.576998,9.791995,-5.360190,-7.695829,6.814952,4.145397,5.617268,-8.291397,-3.046101,2.522375,7.604238,1.253627,8.123453,2.451665,2.345759,-1.898400,7.543532,6.509893,-5.351828,1.554787,-4.515967,-0.831127,5.141969,-8.727493,6.451972,-8.323844,3.122140,-2.672554,0.914130,3.219700,1.721511,4.212462,0.044421,-1.112105,-9.428937,6.516984,-4.210750,-5.071173,-6.149865,8.320019,5.142836,4.904926,0.847506,1.031428,1.720535,4.433811,-0.636515,6.122504,8.386936,5.381966,-6.899612,-7.378359,-0.910261,-1.581105,2.259383,-8.098070,9.443887,-1.149862,-0.009477,7.764013,-9.891697,-8.156121,-5.858403,-0.440805,3.245047,3.814177,-6.817785,-7.177684,6.891286,-4.174322,-1.930980,7.673064,-7.061467,-0.558288,0.138603,-7.102205,-4.379591,-0.483193,3.342515,-7.760310,-7.523323,-3.046733,-0.513088,-6.323927,0.568348,-4.420519,0.457309,-2.439305,3.724985,-9.062695,-3.890335,-2.299663,1.827268,3.832454,5.924068,9.041789,-4.554796,6.067462,-1.437963,-1.818538,-7.402994,0.232579,-1.229934,6.382847,-7.451652,-0.241163,-3.042767,6.370086,1.830086,-5.609575,4.765977,-0.309904,6.256474,-6.651555,3.136281,-5.374992,2.342596,-6.044655,2.879831,-8.939340,0.157053,-9.847314,1.836990,-2.229772,7.731445,-3.674840,-7.420195,-6.243392,-0.903385,-4.393189,0.645307,2.236779,-5.687329,-0.180396,6.174131,-7.249878,5.792984,-5.068193,-0.610507,6.354991,-6.590284,-3.153222,-2.207546,-4.891750,2.952351,2.790735,5.150116,-2.506844,-3.160933,5.834066], dtype = "float32")#candidate|652|(330,)|const|float32
call_650 = relay.TupleGetItem(func_562_call(relay.reshape(var_651.astype('float64'), [4,]), relay.reshape(const_652.astype('float32'), [330,]), ), 0)
call_653 = relay.TupleGetItem(func_566_call(relay.reshape(var_651.astype('float64'), [4,]), relay.reshape(const_652.astype('float32'), [330,]), ), 0)
output = relay.Tuple([uop_640,bop_646,call_650,var_651,const_652,])
output2 = relay.Tuple([uop_640,bop_646,call_653,var_651,const_652,])
func_655 = relay.Function([var_635,var_651,], output)
mod['func_655'] = func_655
mod = relay.transform.InferType()(mod)
var_656 = relay.var("var_656", dtype = "float64", shape = (4, 4))#candidate|656|(4, 4)|var|float64
var_657 = relay.var("var_657", dtype = "float64", shape = (4,))#candidate|657|(4,)|var|float64
output = func_655(var_656,var_657,)
func_658 = relay.Function([var_656,var_657,], output)
mutated_mod['func_658'] = func_658
mutated_mod = relay.transform.InferType()(mutated_mod)
var_665 = relay.var("var_665", dtype = "float64", shape = (13, 6, 10))#candidate|665|(13, 6, 10)|var|float64
uop_666 = relay.asin(var_665.astype('float64')) # shape=(13, 6, 10)
uop_668 = relay.atan(uop_666.astype('float32')) # shape=(13, 6, 10)
output = relay.Tuple([uop_668,])
output2 = relay.Tuple([uop_668,])
func_673 = relay.Function([var_665,], output)
mod['func_673'] = func_673
mod = relay.transform.InferType()(mod)
mutated_mod['func_673'] = func_673
mutated_mod = relay.transform.InferType()(mutated_mod)
var_674 = relay.var("var_674", dtype = "float64", shape = (13, 6, 10))#candidate|674|(13, 6, 10)|var|float64
func_673_call = mutated_mod.get_global_var('func_673')
call_675 = func_673_call(var_674)
output = call_675
func_676 = relay.Function([var_674], output)
mutated_mod['func_676'] = func_676
mutated_mod = relay.transform.InferType()(mutated_mod)
var_689 = relay.var("var_689", dtype = "float32", shape = (2, 12))#candidate|689|(2, 12)|var|float32
uop_690 = relay.exp(var_689.astype('float32')) # shape=(2, 12)
uop_692 = relay.atan(uop_690.astype('float32')) # shape=(2, 12)
bop_695 = relay.bitwise_or(var_689.astype('uint16'), relay.reshape(uop_692.astype('uint16'), relay.shape_of(var_689))) # shape=(2, 12)
uop_698 = relay.log(uop_692.astype('float32')) # shape=(2, 12)
uop_700 = relay.asin(uop_698.astype('float64')) # shape=(2, 12)
const_702 = relay.const([[8.244223,-3.487084,9.173934,-3.039032,6.327943,6.268505,7.699547,3.467989,1.771963,7.223854,-7.638021,0.928483],[5.325881,-5.898400,-3.607276,-9.155331,1.746964,-5.993540,-9.520775,-2.596918,-7.920027,-7.240496,-9.754937,-5.209837]], dtype = "float64")#candidate|702|(2, 12)|const|float64
bop_703 = relay.greater(uop_700.astype('bool'), relay.reshape(const_702.astype('bool'), relay.shape_of(uop_700))) # shape=(2, 12)
func_91_call = mod.get_global_var('func_91')
func_93_call = mutated_mod.get_global_var('func_93')
const_708 = relay.const([9,-9,3,6,-3,6,-5,8,1,-6,-7,10,7,-2,-2,8,-4,-2,6,8,2,-1,-3,6,-8,-3,-5,10,10,4,-10,3,-9,9,-4,9,3,5,-8,1,3,3,-6,1,5,-8,-10,-9,8,6,-6,-10,-4,8,3,-10,-3,8,5,7,-7,-7,8,7,5,-9,-10,-4,1,-8,9,-5,-10,4,-2,-5,6,7,-7,9,8,5,-7,6,-10,4,-4,-4,10,10,-8,1,7,9,2,10,-8,-10,5,-2,-10,-4,3,-9,-7,5,3,1,-3,8,8,7,-2,-10,-3,-9,1,9,3,-7,8,8,-9,3,-1,1,-8,7,5,6,4,-3,3,6,-2,8,6,-1,-9,1,7,1,-10,7,8,1,3,4,8,1,5,-7,-9,10,-5,8,-4,-9,-7,-8,-10,-6,5,-8,-10,-2,-10,9,-9,7,-1,8,-4,-10,5,-4,8,-9,-10,5,-6,8,-8,-7,-8,-3,-9,-4,9,-4,3,1,-9,-6,5,-10,10,9,7,-5,2,3,10,-6,3,-3,-7,-8,3,5,7,1,5,3,7,6,7,-3,-7,6,-7,6,3,10,10,-8,-5,4,10,-4,7,-10,-7,9,-10,-4,4,-2,-8,5,-2,-4,-3,-6,6,-3,10,-7,-4,3,-1,-2,-8,2,-9,-3,1,7,-6,8,-5,-4,4,-1,8,-4,-2,-4,3,8,6,-2,-1,-2,1,8,2,-8,7,-7,-7,4,9,10,7,-5,-1,9,-3,-8,2,10,-10,-10,-10,-2,8,-6,7,1,6,-4,-3,9,-3,-2,-3,-6,-1,-1,-3,-9,10,-2,-1,-8,10,-6,-4,-9,-1,1,3,8,6,-4,2,-2,9,1,6,9,-3,9,9,4,8,4,5,-5,1,1,-3,8,-6,1,10,10,-6,-1,-6,7,-2,-7,-4,9,-4,-1,-3,8,-9,3,-1,-1,1,-4,-8,-3,3,-9,-4,2,-9,4,5,-3,-3,4,-9,-10,8,7,4,-6,4,4,4,-8,3,6,6,-10,8,-10,10,7,-4,6,6,5,-7,-10,6,-7,9,-5,-5,-1,-3,-7,-3,-3,-9,-8,-10,7,-3,2,2,-8,-3,6,-2,-10,-10,-9,3,3,-2,-9,6,-2,2,10,-3,4,3,-7,-9,-1,-4,-5,4,-1,8,9,-7,-3,-6,2,1,-9,-8,-3,-1,-7,7,-4,-9,-5,6,-3,4,-1,-8,2,-10,8,-5,-6,-5,3,-6,-3,5,-4,-4,5,2,10,10,-1,-1,10,-10,-4,1,7,6,2,9,-2,2,1,-3,4,-1,4,6,9,4,8,-1,-5,-6,8,-5,-8,-6,-1,-10,-2,3,-4,-4,2,-8,-3,7,8,5,9,-4,6,-6,1,-3,-6,1,-3,6,-2,6,-5,-1,8,-9,-5,4,5,8,5,-10,-10,-2,7,8,2,3,1,-2,-10,-6,6,-6,-1,10,8,6,3,10,-7,7,6,-9,-6,6,4,2,-1,4,5,-7,-5,2,4,-6,-4,-2,-7,-9,-4,10,8,-1,-2,-2,-10,-1,-3,-3,-9,-8,3,5,-1,-4,1,4,-6,8,-1,-5,9,-5,1,1,-6,2,9,3,2,-4,9,-2,-4,-3,1,5,3,4,8,3,4,-7,-3,-2,6,-7,5,-2,-10,-3,2,-10,-10,9,10,3,-5,5,-1,-4,5,5,-3,-1,3,-3,-6,10,-9,-3,8,1,8,-5,4,-7,-3,3,1,-10,-9,-9,-7,-10,-7,5,9,-3,3,8,-7,8,-9,-5,-4,7,9,-8,-7,3,1,9,4,-9,-10,-4,-3,-7,3,7,9,1,-9,4,-7,-10,-7,-10,-1,-7,7,-9,4,-7,8,-4,-5,4,-6,-10,5,1,8,-2,2,3,-1,-2,-6,3,10,-2,-4,10,5,3,1,2,7,2,5,9,-8,4,9,-10,7,-5,-10,-3,7,7,-3,-1,4,2,-9,-7,3,10,9,10,-4,8,-1,1,8,8,-8,2,2,-3,-6,-5,2,-2,7,-6,8,-7,5,-7,-5,-4,3,6,1,-6,10,7,-9,2,8,7,1,5,3,1,-6,-2,3,4,-9,-1,2,-10,5,-8,-9,-1,10,-6,-7,-2,4,-3,2,-10,-10,10,9,4,2,-10,-7,-1,6,-2,6,9,-8,6,-2,2,7,5,-2,1,10,-4,2,-6,3,-5,-1,-9,-7,-8,-9,-2,-2,2,5,-7,5,-4,7,5,-9,10,-5,7,-4,-2,5,9,10,-1,-7,1,-2,-8,6,-10,4,-5,9,-2,8,7,-7,-1,10,-1,2,8,7,-4,9,-10,-6,-1,-6,9,6,-9,10,7,2,6,10,-10,10,-9,-8,2,-3,-8,-6,5,10,-5,4,2,-2,1,-4,6,-5,-3,-4,-6,7,-6,-10,7,4,4,-5,-3,-9,-6,5,7,7,-2,2,-9,-1,-2,-7,5,-10,-1,-7,10,1,9,10,-8,5,-9,8,-7,-5,4,-7,-3,-7,-4,9,2,-1,-7,-6,-7,5,-1,-6,-5,-9,-2,7,-5,-10,-1,-2,10,-2,2,2,-3,7,-1,2,1,5,8,-9,-6,-2,1,-8,7,7,-9,1,7,8,1,2,-3,-7,8,-6,6,-9,-1,-7,-6,10,-5,-1,-8,-8,1,3,8,-5,-6,1,8,-1,7,-9,-2,2,9,8,2,-6,-8,7,7,-2,-4,6,-3,2,5,-4,-2,6,10,9,-2,5,4,-5,5,-5,-2,-2,10,-4,-7,3,5,-9,3,-6,-2,4,4,-6,-1,-7,-2,8,3,8,-2,-7,10,1,5,8,-10,-1,2,-3,-10,5,-1,5,-9,-4,-2,10,-1,5,10,-3,-4,3,4,10,-10,6,-2,-5,-2,3,-4,-5,-6,10,2,6,-10,5,-7,-7,-1,-8,2,5,-6,9,3,-6,-4,7,-10,5,2,-3,4,7,3,-2,1,-10,-6,-9,-4,-10,-1,-6,9,-2,-1,1,-5,3,-6,-2,2,7,2,9,-9,6,-5,3,-4,-5,10,-10,-6,2,10,2,7,-10,-3,6,-7,4,-5,-5,1,-1,8,5,-8,8,2,-8,9,-9,8,-8,8,-8,-10,9,3,-4,5,4,8,-9,-4,-9,-6,9,4,10,1,6,-3,5,-6,8,10,-7,4,9,5,-2,8,7,-9,7,-9,1,7,7,-7,-7,6], dtype = "uint64")#candidate|708|(1215,)|const|uint64
call_707 = func_91_call(relay.reshape(const_708.astype('uint64'), [9, 9, 15]))
call_709 = func_91_call(relay.reshape(const_708.astype('uint64'), [9, 9, 15]))
bop_711 = relay.equal(uop_692.astype('bool'), relay.reshape(bop_695.astype('bool'), relay.shape_of(uop_692))) # shape=(2, 12)
bop_714 = relay.logical_xor(bop_703.astype('uint32'), relay.reshape(uop_700.astype('uint32'), relay.shape_of(bop_703))) # shape=(2, 12)
output = relay.Tuple([call_707,const_708,bop_711,bop_714,])
output2 = relay.Tuple([call_709,const_708,bop_711,bop_714,])
func_717 = relay.Function([var_689,], output)
mod['func_717'] = func_717
mod = relay.transform.InferType()(mod)
var_718 = relay.var("var_718", dtype = "float32", shape = (2, 12))#candidate|718|(2, 12)|var|float32
output = func_717(var_718)
func_719 = relay.Function([var_718], output)
mutated_mod['func_719'] = func_719
mutated_mod = relay.transform.InferType()(mutated_mod)
var_728 = relay.var("var_728", dtype = "uint32", shape = ())#candidate|728|()|var|uint32
var_729 = relay.var("var_729", dtype = "uint32", shape = (7, 15, 15))#candidate|729|(7, 15, 15)|var|uint32
bop_730 = relay.logical_xor(var_728.astype('uint32'), var_729.astype('uint32')) # shape=(7, 15, 15)
uop_736 = relay.log(var_729.astype('float32')) # shape=(7, 15, 15)
uop_738 = relay.acosh(uop_736.astype('float64')) # shape=(7, 15, 15)
output = relay.Tuple([bop_730,uop_738,])
output2 = relay.Tuple([bop_730,uop_738,])
func_740 = relay.Function([var_728,var_729,], output)
mod['func_740'] = func_740
mod = relay.transform.InferType()(mod)
var_741 = relay.var("var_741", dtype = "uint32", shape = ())#candidate|741|()|var|uint32
var_742 = relay.var("var_742", dtype = "uint32", shape = (7, 15, 15))#candidate|742|(7, 15, 15)|var|uint32
output = func_740(var_741,var_742,)
func_743 = relay.Function([var_741,var_742,], output)
mutated_mod['func_743'] = func_743
mutated_mod = relay.transform.InferType()(mutated_mod)
var_764 = relay.var("var_764", dtype = "float64", shape = (10, 7))#candidate|764|(10, 7)|var|float64
uop_765 = relay.cosh(var_764.astype('float64')) # shape=(10, 7)
bop_767 = relay.floor_divide(var_764.astype('float32'), relay.reshape(uop_765.astype('float32'), relay.shape_of(var_764))) # shape=(10, 7)
output = bop_767
output2 = bop_767
func_771 = relay.Function([var_764,], output)
mod['func_771'] = func_771
mod = relay.transform.InferType()(mod)
var_772 = relay.var("var_772", dtype = "float64", shape = (10, 7))#candidate|772|(10, 7)|var|float64
output = func_771(var_772)
func_773 = relay.Function([var_772], output)
mutated_mod['func_773'] = func_773
mutated_mod = relay.transform.InferType()(mutated_mod)
const_778 = relay.const([[2.745658,-7.315482,-1.292477,-6.985992,-6.415936,-1.028486,1.999354,-4.773744,-1.694668,0.100441,-1.905297],[5.632913,-3.899278,-7.734117,7.974564,-5.717671,-7.127198,-8.639124,-0.685178,-7.035413,-6.439690,-4.598567],[-5.568008,1.622019,-2.417105,4.699949,0.103488,-6.441711,-5.855675,0.549937,-1.110573,4.345944,-6.883005],[8.645431,-5.055641,-8.730562,-6.614841,1.947621,0.907176,-7.769202,3.753172,-1.907597,-0.046679,-4.256986],[-7.403204,-5.740394,-0.971620,2.843345,1.176282,4.733106,-8.428046,2.275619,-0.481361,-5.097804,6.522422],[-1.760512,-7.792738,5.775123,8.128300,8.387089,1.112320,7.632196,3.977318,1.384799,4.184027,9.657159],[-7.141507,8.277908,1.031580,-6.327252,-9.163486,3.157338,0.061122,7.994667,-0.493740,-1.168319,-5.878876],[0.221781,-1.119801,3.306283,6.189548,-2.000537,0.525492,4.493580,1.432790,3.065322,-7.932929,-9.300332],[-0.771279,-8.425720,-9.380313,-5.765440,-3.771213,1.135764,-5.033384,0.250957,0.747817,1.134794,8.273140],[3.690441,-7.630587,-5.245324,5.081971,4.826535,-7.294366,-3.360160,-3.355774,2.346626,1.711673,-3.878023],[8.269156,2.986810,9.520350,2.336631,9.212838,8.399369,-5.412114,-4.621401,-7.341579,9.358786,-7.715587],[9.061984,-6.810507,7.537546,0.045476,-1.897484,9.782762,2.520694,-8.562131,7.809196,0.520197,-3.824296],[-9.681828,7.971880,-0.334051,6.086273,6.442116,9.765621,-0.390471,4.267147,-4.023654,-7.648919,9.121241],[-9.231101,8.891624,-7.965923,-2.361599,-2.544457,4.191913,0.507109,-1.657379,-0.472854,-7.307883,9.584490],[0.705940,-7.378740,-7.975582,4.777354,8.060773,-7.329088,-7.600201,9.609465,6.137257,4.286985,-6.837719],[-4.010298,-9.437198,-8.891530,-8.356492,9.404902,-7.429367,-9.036850,-0.029533,-6.903942,3.188258,-4.603445]], dtype = "float32")#candidate|778|(16, 11)|const|float32
uop_779 = relay.asin(const_778.astype('float32')) # shape=(16, 11)
bop_784 = relay.left_shift(const_778.astype('uint32'), relay.reshape(uop_779.astype('uint32'), relay.shape_of(const_778))) # shape=(16, 11)
bop_792 = relay.greater(uop_779.astype('bool'), relay.reshape(bop_784.astype('bool'), relay.shape_of(uop_779))) # shape=(16, 11)
bop_796 = relay.mod(uop_779.astype('float32'), relay.reshape(bop_792.astype('float32'), relay.shape_of(uop_779))) # shape=(16, 11)
func_428_call = mod.get_global_var('func_428')
func_431_call = mutated_mod.get_global_var('func_431')
const_801 = relay.const([7.970826,2.337371,-0.745443,8.562500,-8.187278,-0.567509,8.450911,-0.970859,-0.847495,9.936995,-2.337795,0.852385,-6.874632,-6.612318,5.238750,-5.825787,9.606555,-4.499291,2.863268,-1.534737,1.463319,-6.818180,-7.927408,1.653750,-0.772519,8.752299,1.625088,2.937874,5.816696,-3.424959,4.395887,-5.757150,-8.903409,-4.928087,-7.408946,4.227048,1.244892,9.437819,-7.411668,-1.851981,5.461941,1.898777,7.110678,-9.728058,-5.123516,8.691179,-7.563669,-9.756216,-7.732744,-1.428132,3.086508,-4.593070,9.747988,1.802615,-2.171365,6.637418,3.701573,4.436003,5.548452,3.380035,-6.411751,4.317955,-9.512907,3.513297,6.554200,-4.171391,0.445993,0.112269,-2.128692,-0.658510,9.738070,-5.989263,-6.085701,4.056035,-0.688852,1.419256,7.917830,6.949422,-0.313647,-4.284846,-1.927305,1.984519,-3.940307,-4.505272,2.358588,7.730807,-5.375137,1.520917,0.666959,-0.697066,4.173870,-9.010776,5.660806,2.474473,-7.466115,9.394818,-6.673685,-0.188813,3.216215,3.390131,7.176072,4.983793,-8.616964,-0.002503,4.270296,0.293695,-0.858008,7.484283,2.459588,-0.903005,7.206879,-6.278940,-5.244938,-8.239588,-5.986145,-7.997538,-1.295556,8.696761,-4.691112,6.330046,8.136765,-2.766149,-6.097777,6.847821,-5.740150,-4.124565,7.686279,5.190186,9.350412,4.055561,9.983189,-5.745882,-8.256000,3.819824,9.442544,-6.505374,4.296587,6.072294,5.056404,-9.478091,-7.387802,2.027490,2.936378,7.642137,-4.633461,-4.691771,-8.004587,0.302457,0.022888,6.618487,9.369159,8.996029,-6.206806,4.309905,1.355563,-6.663153,-1.333508,8.250217,-3.767985,-0.740726,5.969999,4.487288,7.710316,-3.861492,3.155656,-9.160082,-6.770482,8.125838,-7.906477,-6.459736,-1.824263,1.751292,-3.991619,1.158080,9.404845,1.961042,-0.654917,-0.696457,0.934002,-1.730024,-2.814436,-5.461650,-0.926724,4.245362,-2.125825,-3.496492,-4.496727,3.612873,-1.909165,-8.684212,-0.443507,9.559866,-7.516611,9.942412,-2.958467,-1.243326,-5.496297,8.605662,-1.301630,6.078108,-6.744161,-3.718953,4.993317,4.192263,-1.586387,1.001626,5.808199,3.622645,-3.035047,-6.151725,0.662940,5.236179,3.651172,-2.695982,6.988463,-0.335384,-7.641932,4.930237,-2.403350,9.648296,-1.393621,1.858769,8.450381,6.072828,4.462305,9.614487,-4.009830,-7.381849,5.243206,0.948147,-2.815505,8.280802,-4.184224,-1.752551,6.855111,8.155341,-0.221647,-6.583502,-4.884318,4.238817,2.145063,-6.849731,5.125380,5.788330,3.337389,-2.658139,-0.481613,-5.255040,-2.350604,5.203321,3.784936,3.317963,5.485151,1.379475,2.176148,-0.975481,3.036206,-2.303119,3.294016,-3.879488,-8.905135,8.978611,-4.318419,-8.588667,-7.827100,-3.407798,-1.393496,-3.969217,9.488081,8.895600,-3.116510,1.162739,-2.055962,6.624266,3.452892,9.011475,-5.954525,-5.790545,-8.449363,3.936338,-5.995742,-1.105851,8.214312,6.249086,1.213380,8.768028,-3.711538,7.887812,-3.278218,-1.686887,-6.396982,4.968222,-4.134866,9.239968,-4.220875,-4.554152,4.475329,-4.433136,6.476199,8.858320,-8.241918,-2.614837,-8.238909,-3.660074,-7.760344,-3.876421,-3.090054,5.482386,-0.182340,9.624916,8.834808,3.812123,9.316292,2.832286,2.390748,2.856821,9.455921,-1.843266,1.139122,-1.501604,-8.498375,6.602172,9.488858,6.476308,6.850156,-0.861212,-4.705556,3.093489,9.288574,-7.361271,-2.967528,3.540856,-2.415175,9.742133,-8.953581,5.309753,-0.840530,1.020325,-1.874723,6.599436,9.079551,-7.683343,-7.718531,1.178785,1.432147,-1.633764,4.437414,2.508603,-9.242504,-2.523332,7.550216,1.832102,-3.690721,3.176741,1.512361,-4.617897,-5.263024,9.722243,1.281538,4.226256,-1.728340,-2.190511,5.830802,4.769285,-5.000952,-3.879642,-2.130996,5.001483,-2.447298,7.847414,-5.430436,-4.963535,-6.447708,8.263939,8.688334,-1.501330,-1.782414,3.004003,0.899199,2.247921,-7.726032,3.258491,0.246131,7.679307,9.824951,-0.003592,6.058082,-7.735190,-0.655722,9.118622,-3.527398,0.130107,-0.025417,-5.092007,-5.898184,5.596626,6.544283,1.250942,2.646644,-8.217907,5.337809,-5.905386,-7.266746,-4.119684,-6.262808,-6.493848,-4.344775,-6.094829,-5.557987,-7.987241,-7.770852,-1.208345,-3.516027,7.704709,-1.035916,-4.639537,-9.931934,-0.130876,7.549106,0.370479,-7.967794,6.366344,7.229945,1.662112,-8.868251,-0.579004,1.518764,7.494957,-8.078491,-6.755730,-3.817257,-7.653332,6.715993,0.714008,-9.805869,3.898608,-9.835827,3.895718,-9.948100,-0.813587,-3.985127,5.332803,0.996299,8.496905,7.478907,-3.771961,-5.367824,-1.543753,-4.100631,-4.281305,-9.888453,3.568642,-3.224631,8.237966,-6.249559,-2.046147,-3.197217,-7.043195,-2.679015,-7.113745,0.680377,2.300834,8.410036,-5.692260,-9.811392,-0.591188,-4.637843,2.174751,-1.659021,3.801832,-4.269723,4.035847,7.331085,-7.005596,8.004957,-7.311743,-2.831525,-3.071730,0.284910,5.213716,-8.277204,9.467887,0.838488,8.273491,6.466071,-1.925768,-8.570465,-2.633389,-1.487843,7.612625,2.967694,-6.289361,-2.715107,-2.499203,9.743056,7.324338,5.398991,-0.478344,7.152630,4.124907,-1.916733,4.158435,3.067312,7.721412,-9.894221,-8.547342,-5.038024,6.472353,5.320423,-2.218596,1.805653,-1.890247,-4.991975,-2.452660,0.300892,-4.567499,9.209602,-6.854524,-4.574989,-9.681358,3.819558,-4.582409,-3.062460,-7.563515,6.296898,-3.419140,-8.518920,-2.646525,-3.214562,-2.949396,-1.167564,8.904408,-8.177313,-9.892073,7.887330,-5.946927,8.276325,-1.365077,-1.138490,-9.611031,-1.013119,1.435240,5.376559,6.722413,-8.462647,5.185144,2.979563,-1.737887,5.171323,-0.598858,-0.740352,9.653206,1.087533,0.967249,-4.526392,-7.060955,-1.765859,6.305185,7.874605,4.515677,-3.516868,-3.856539,-3.082850,-3.681354,1.510439,-7.931147,5.003556,-3.901468,-5.170581,-1.395514,8.641304,9.688239,-2.617060,0.095553,8.054201,1.860562,-0.378187,5.834612,3.367893,-0.599103,-4.437620,-5.790120,-5.445388,5.413348,-2.986146,7.673445,-8.343784,5.902065,9.216934,-3.514436,-6.069342,-4.807150,9.427330,7.930917,7.653960,8.419149,-8.711460,0.864705,-0.241112,5.184890,3.341221,-8.874996,6.914084,-2.794517,0.987632,-2.036766,5.990584,-2.134734,-1.971709,7.255432,7.411699,-2.896792,-4.005991,-7.347427,-2.072760,9.433890,-1.375916,5.758762,3.607650,-9.940028,-8.180531,-7.686884,7.826466,-7.474484,-5.854512,-0.663210,-3.100359,-2.429389,-4.826420,-5.225423,-1.555390,-0.852036,7.996845,9.639956,-2.114166,7.872519,-1.044026,-7.499343,-1.459353,5.164927,-4.684688,-5.319028,-9.861084,6.932107,7.924919,8.684765,5.186589,-9.578216,5.826000,5.263611,2.488827,-4.858976,3.342707,-9.241973,7.491935,-1.928252,6.973143,8.843477,1.310067,-4.666296,-5.330493,5.736768,-2.523164,-4.572951,3.698108,9.700034,0.560500,-3.036688,-1.048732,-5.276231,-3.121153,3.264840,-9.556378,-8.774915,4.120266,-5.037559,-6.856348,5.246422,-8.274104,1.418605,9.562176,-0.218207,-0.470595,5.641648,8.432697,6.028136,7.843087,3.702807,1.399847,7.829967,1.094130,-7.583285,1.644935,-6.240304,1.777680,9.414362,-6.927904,8.588815,-4.321574,3.968746,8.851308,-0.024751,2.125460,-2.050573,3.686016,2.025961,1.143606,-3.078971,8.109398,-1.234467,-2.727100,2.945235,-6.843278,-6.515912,-4.429796,-4.656663,-7.225713,-6.061953,4.696128,-6.848128,-4.121355,1.589725,7.236031,9.059136,-1.241581,6.686398,8.013540,9.496490,-4.031382,4.254588,0.009041,-9.241316,-1.406803,2.828360,2.132331,-3.081245,6.409265,8.467916,1.188689,4.062821,4.232925,4.798616,9.713632,-9.236122,-1.437200,-3.317156,2.804459,4.629039,1.101048,3.356353,-2.037498,1.996263,1.895164,-9.362103,7.451562,-0.054660,-1.815445,8.952569,-3.677324,0.354731,6.000949,-2.869469,-6.473347,-8.185054,-1.257876,-4.663829,7.261831,-2.925898,9.497807,-9.001170,-9.768228,8.846624,-5.740293,6.812497,-2.411279,1.311796,-2.496507,-1.596712,0.330542,6.077221,7.562737,-1.233880,4.687429,8.527945], dtype = "float32")#candidate|801|(784,)|const|float32
call_800 = relay.TupleGetItem(func_428_call(relay.reshape(const_801.astype('float32'), [14, 8, 7])), 0)
call_802 = relay.TupleGetItem(func_431_call(relay.reshape(const_801.astype('float32'), [14, 8, 7])), 0)
const_804 = relay.const([[-5,6,2,-4,-2,-5,-10,-2,8,2,-3],[-1,-8,10,-3,-10,9,-8,7,-9,7,-5],[-8,-9,-8,-6,-5,-3,9,-5,-2,-9,-10],[-3,10,-3,7,-3,6,1,-4,-4,-5,-4],[-2,5,3,-6,-2,7,4,-9,1,-6,-4],[8,6,-9,-8,-3,1,4,-3,-6,-3,9],[4,-6,9,-1,-1,-5,10,9,-6,-10,-2],[2,7,4,-10,7,10,10,-7,6,-9,-8],[6,8,-10,10,3,7,1,-1,-4,-6,4],[-8,6,-3,-7,-5,6,5,-4,-8,-9,8],[-8,-3,-7,-9,-7,-2,-10,-10,-5,10,-2],[7,-1,2,10,2,-9,10,-5,7,-5,7],[-5,4,3,9,-10,1,1,-5,-5,9,-3],[-10,-10,-2,-7,2,-5,-9,-2,-6,-7,8],[-4,9,2,-3,-8,7,1,5,-6,1,-5],[4,1,4,8,-5,4,10,-3,5,8,-1]], dtype = "uint32")#candidate|804|(16, 11)|const|uint32
bop_805 = relay.equal(bop_784.astype('bool'), relay.reshape(const_804.astype('bool'), relay.shape_of(bop_784))) # shape=(16, 11)
uop_809 = relay.erf(bop_796.astype('float32')) # shape=(16, 11)
var_811 = relay.var("var_811", dtype = "float32", shape = (16, 11))#candidate|811|(16, 11)|var|float32
bop_812 = relay.subtract(uop_809.astype('uint64'), relay.reshape(var_811.astype('uint64'), relay.shape_of(uop_809))) # shape=(16, 11)
output = relay.Tuple([call_800,const_801,bop_805,bop_812,])
output2 = relay.Tuple([call_802,const_801,bop_805,bop_812,])
func_815 = relay.Function([var_811,], output)
mod['func_815'] = func_815
mod = relay.transform.InferType()(mod)
mutated_mod['func_815'] = func_815
mutated_mod = relay.transform.InferType()(mutated_mod)
var_816 = relay.var("var_816", dtype = "float32", shape = (16, 11))#candidate|816|(16, 11)|var|float32
func_815_call = mutated_mod.get_global_var('func_815')
call_817 = func_815_call(var_816)
output = call_817
func_818 = relay.Function([var_816], output)
mutated_mod['func_818'] = func_818
mutated_mod = relay.transform.InferType()(mutated_mod)
var_823 = relay.var("var_823", dtype = "float64", shape = (13, 8))#candidate|823|(13, 8)|var|float64
uop_824 = relay.log10(var_823.astype('float64')) # shape=(13, 8)
output = relay.Tuple([uop_824,])
output2 = relay.Tuple([uop_824,])
func_829 = relay.Function([var_823,], output)
mod['func_829'] = func_829
mod = relay.transform.InferType()(mod)
var_830 = relay.var("var_830", dtype = "float64", shape = (13, 8))#candidate|830|(13, 8)|var|float64
output = func_829(var_830)
func_831 = relay.Function([var_830], output)
mutated_mod['func_831'] = func_831
mutated_mod = relay.transform.InferType()(mutated_mod)
var_869 = relay.var("var_869", dtype = "uint32", shape = (10, 10))#candidate|869|(10, 10)|var|uint32
const_870 = relay.const([[-7,-6,4,3,3,8,-2,9,10,10],[1,-5,7,-8,-9,8,6,10,1,1],[1,1,6,-5,-6,-8,-6,-1,-3,9],[-2,7,-3,7,4,8,-7,7,1,-10],[6,5,-10,-4,-7,-6,-9,6,-2,4],[3,1,2,-3,-1,-1,-10,-8,3,5],[2,9,-6,1,-10,-6,-8,-2,7,3],[-6,-5,-1,7,5,-3,5,8,9,-1],[-6,-1,-4,-5,6,-8,-2,-1,6,-6],[3,-7,5,10,-7,-2,-8,9,6,4]], dtype = "uint32")#candidate|870|(10, 10)|const|uint32
bop_871 = relay.greater(var_869.astype('bool'), relay.reshape(const_870.astype('bool'), relay.shape_of(var_869))) # shape=(10, 10)
output = relay.Tuple([bop_871,])
output2 = relay.Tuple([bop_871,])
func_874 = relay.Function([var_869,], output)
mod['func_874'] = func_874
mod = relay.transform.InferType()(mod)
mutated_mod['func_874'] = func_874
mutated_mod = relay.transform.InferType()(mutated_mod)
var_875 = relay.var("var_875", dtype = "uint32", shape = (10, 10))#candidate|875|(10, 10)|var|uint32
func_874_call = mutated_mod.get_global_var('func_874')
call_876 = func_874_call(var_875)
output = call_876
func_877 = relay.Function([var_875], output)
mutated_mod['func_877'] = func_877
mutated_mod = relay.transform.InferType()(mutated_mod)
var_890 = relay.var("var_890", dtype = "uint32", shape = (5, 3))#candidate|890|(5, 3)|var|uint32
var_891 = relay.var("var_891", dtype = "uint32", shape = (5, 3))#candidate|891|(5, 3)|var|uint32
bop_892 = relay.subtract(var_890.astype('uint32'), relay.reshape(var_891.astype('uint32'), relay.shape_of(var_890))) # shape=(5, 3)
bop_895 = relay.bitwise_or(var_890.astype('uint64'), relay.reshape(bop_892.astype('uint64'), relay.shape_of(var_890))) # shape=(5, 3)
bop_899 = relay.minimum(bop_892.astype('float32'), relay.reshape(var_890.astype('float32'), relay.shape_of(bop_892))) # shape=(5, 3)
var_902 = relay.var("var_902", dtype = "uint32", shape = (5, 3))#candidate|902|(5, 3)|var|uint32
bop_903 = relay.less_equal(bop_892.astype('bool'), relay.reshape(var_902.astype('bool'), relay.shape_of(bop_892))) # shape=(5, 3)
output = relay.Tuple([bop_895,bop_899,bop_903,])
output2 = relay.Tuple([bop_895,bop_899,bop_903,])
func_907 = relay.Function([var_890,var_891,var_902,], output)
mod['func_907'] = func_907
mod = relay.transform.InferType()(mod)
mutated_mod['func_907'] = func_907
mutated_mod = relay.transform.InferType()(mutated_mod)
func_907_call = mutated_mod.get_global_var('func_907')
var_909 = relay.var("var_909", dtype = "uint32", shape = (5, 3))#candidate|909|(5, 3)|var|uint32
var_910 = relay.var("var_910", dtype = "uint32", shape = (5, 3))#candidate|910|(5, 3)|var|uint32
var_911 = relay.var("var_911", dtype = "uint32", shape = (5, 3))#candidate|911|(5, 3)|var|uint32
call_908 = func_907_call(var_909,var_910,var_911,)
output = call_908
func_912 = relay.Function([var_909,var_910,var_911,], output)
mutated_mod['func_912'] = func_912
mutated_mod = relay.transform.InferType()(mutated_mod)
var_938 = relay.var("var_938", dtype = "float32", shape = (11, 15))#candidate|938|(11, 15)|var|float32
uop_939 = relay.sinh(var_938.astype('float32')) # shape=(11, 15)
bop_941 = relay.add(uop_939.astype('float64'), relay.reshape(var_938.astype('float64'), relay.shape_of(uop_939))) # shape=(11, 15)
bop_944 = relay.bitwise_xor(var_938.astype('uint64'), relay.reshape(uop_939.astype('uint64'), relay.shape_of(var_938))) # shape=(11, 15)
bop_951 = relay.subtract(bop_944.astype('uint16'), relay.reshape(var_938.astype('uint16'), relay.shape_of(bop_944))) # shape=(11, 15)
bop_954 = relay.equal(uop_939.astype('bool'), relay.reshape(bop_941.astype('bool'), relay.shape_of(uop_939))) # shape=(11, 15)
func_284_call = mod.get_global_var('func_284')
func_288_call = mutated_mod.get_global_var('func_288')
var_959 = relay.var("var_959", dtype = "float32", shape = (1, 1))#candidate|959|(1, 1)|var|float32
var_960 = relay.var("var_960", dtype = "int16", shape = (15,))#candidate|960|(15,)|var|int16
call_958 = relay.TupleGetItem(func_284_call(relay.reshape(var_959.astype('float32'), [1,]), relay.reshape(var_960.astype('int16'), [15,]), relay.reshape(var_960.astype('float32'), [15,]), ), 12)
call_961 = relay.TupleGetItem(func_288_call(relay.reshape(var_959.astype('float32'), [1,]), relay.reshape(var_960.astype('int16'), [15,]), relay.reshape(var_960.astype('float32'), [15,]), ), 12)
output = relay.Tuple([bop_951,bop_954,call_958,var_959,var_960,])
output2 = relay.Tuple([bop_951,bop_954,call_961,var_959,var_960,])
func_966 = relay.Function([var_938,var_959,var_960,], output)
mod['func_966'] = func_966
mod = relay.transform.InferType()(mod)
mutated_mod['func_966'] = func_966
mutated_mod = relay.transform.InferType()(mutated_mod)
func_966_call = mutated_mod.get_global_var('func_966')
var_968 = relay.var("var_968", dtype = "float32", shape = (11, 15))#candidate|968|(11, 15)|var|float32
var_969 = relay.var("var_969", dtype = "float32", shape = (1, 1))#candidate|969|(1, 1)|var|float32
var_970 = relay.var("var_970", dtype = "int16", shape = (15,))#candidate|970|(15,)|var|int16
call_967 = func_966_call(var_968,var_969,var_970,)
output = call_967
func_971 = relay.Function([var_968,var_969,var_970,], output)
mutated_mod['func_971'] = func_971
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1003 = relay.var("var_1003", dtype = "float32", shape = (12, 15, 8))#candidate|1003|(12, 15, 8)|var|float32
uop_1004 = relay.log2(var_1003.astype('float32')) # shape=(12, 15, 8)
uop_1010 = relay.sinh(var_1003.astype('float32')) # shape=(12, 15, 8)
uop_1012 = relay.atanh(uop_1010.astype('float32')) # shape=(12, 15, 8)
output = relay.Tuple([uop_1004,uop_1012,])
output2 = relay.Tuple([uop_1004,uop_1012,])
F = relay.Function([var_1003,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1003,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1003= np.array([[[-4.761949,-4.216172,-9.496556,7.555737,2.777770,3.651144,-8.574524,-9.405344],[-9.431816,2.930576,-1.761211,9.359886,-2.437293,8.099202,-1.135061,-8.546010],[-6.153043,-3.943152,-3.082212,-7.091670,-7.195667,0.580329,-6.277364,4.708069],[-2.098249,-9.096417,-6.906106,-5.115976,3.613320,-5.554036,2.774690,2.079661],[5.639903,-5.770094,4.492774,8.853531,-3.291251,-8.411964,4.112115,-9.516958],[-6.447353,-7.768495,-3.826207,-3.569297,-1.335225,8.568904,5.586456,-6.580182],[-4.124039,1.076915,6.576659,4.364089,4.870738,-5.632840,-1.675084,-4.013731],[2.327856,1.087839,1.590035,2.407932,6.420084,1.461551,2.663343,1.618976],[5.325246,3.254372,-6.096034,-1.014466,4.677778,-2.901573,8.958106,-1.915210],[9.709310,6.909649,2.763835,-9.351619,9.111293,-3.401306,8.808505,2.312679],[-0.769319,1.369268,4.946282,-1.851247,-2.873582,-7.770692,-6.091493,-5.031514],[2.117606,-7.656749,2.272258,2.353806,7.418865,2.905535,6.314037,5.610770],[-6.987746,-7.725838,-9.360769,-2.751589,1.103010,1.487232,1.065664,3.640476],[2.642056,-0.080367,0.416926,3.160032,4.254469,6.803447,3.883694,-4.591630],[-6.346062,-1.332184,8.395113,9.220687,3.915865,-0.203660,6.138366,9.166508]],[[-1.473731,5.327112,9.823152,-2.153650,7.775323,-5.727466,-8.393935,-3.580198],[7.368783,5.154016,6.438519,-8.059941,3.116267,-3.551466,-3.571239,1.394979],[2.535264,-1.431642,-9.444614,1.085526,3.921168,-9.724137,-0.197700,-2.824184],[1.616225,-5.248933,-9.482111,-0.286208,-5.989265,-5.231605,-4.541429,2.794364],[-8.153486,1.503811,-1.357110,3.409663,-9.749443,5.741249,-6.489778,-1.316508],[6.581754,2.363516,9.204334,-7.718103,-3.162545,9.643429,-4.334460,-9.168630],[-3.793066,6.875406,-1.917008,-8.811700,5.103235,8.614288,7.531617,4.475923],[-4.117255,8.902907,-3.634494,8.916895,-8.525579,-4.310123,8.439305,-5.725741],[-5.513242,-1.185250,-5.313754,9.775073,-8.953582,7.139715,-8.982252,3.798938],[6.899630,4.659325,-4.937978,-5.382263,0.745200,7.524585,7.283530,-7.787369],[-5.438148,-4.381020,-8.479199,-2.902038,-0.985854,-8.278530,-4.093197,-5.577454],[-3.330789,-6.899739,-0.025526,-9.594552,1.917698,7.913039,4.963488,-4.138471],[-8.457817,-6.139669,-1.822052,-4.155716,-5.268751,7.150715,-5.687902,8.114266],[2.953824,2.390303,-5.926382,8.280816,7.141998,9.347098,0.629477,-9.268918],[-6.701227,-0.776887,4.941151,-1.894432,1.010806,5.406850,6.065628,8.012954]],[[-4.471309,-6.840166,-1.565163,-1.059570,-4.016721,-5.362431,9.962298,-8.232744],[0.237636,-7.367224,0.919673,-6.435007,-5.743383,-7.913311,-7.786420,4.436351],[-0.740630,-2.097417,1.795047,-7.221811,-1.415684,4.788807,-2.591673,0.325016],[-9.209302,-4.375249,-6.032450,2.462904,-3.418013,-5.560929,3.121528,6.113874],[-3.837490,-5.307337,-8.075882,3.904461,6.085352,-8.255434,-7.665206,7.102477],[0.799693,-9.561510,-7.832127,3.309620,8.634487,-6.884625,0.873712,-8.419207],[0.365203,1.053008,-8.574719,-2.038335,-5.251208,2.968375,-9.769587,8.842916],[-3.696646,-4.627650,6.088605,-9.331766,8.114988,3.165830,-2.478063,-8.348671],[-3.687600,-6.416750,5.510504,-0.265909,1.594974,-4.943109,-1.850269,-6.373600],[-2.565839,-1.391192,-9.285521,-5.860920,6.641898,-4.428692,-4.337965,9.316424],[-6.574652,5.362406,-4.871004,4.290153,0.583589,3.365143,-0.365057,-4.005381],[-6.237539,-2.250155,9.247990,0.118504,3.691649,3.838801,-5.208459,-9.518876],[-0.305808,-7.350970,-7.276681,-8.737688,-5.254362,6.713466,3.450049,8.137314],[-8.578661,-5.566232,-4.759765,-3.909458,9.719308,9.394566,-2.098492,2.220941],[5.149650,3.556493,9.238481,2.086907,-0.421588,-3.451210,5.919919,3.276858]],[[-9.145562,8.357953,4.602059,-9.759985,5.029622,2.764168,0.516435,-4.750547],[-4.821213,-9.974227,-7.424335,6.519351,5.817261,-0.342099,9.983488,-6.910657],[-1.621826,5.106156,-2.400157,-3.172296,9.077116,1.856148,-5.544065,-2.474395],[-7.329799,6.312541,-0.086279,7.867909,-7.886569,-2.647453,7.007514,3.384015],[5.265918,-4.400339,-4.000783,5.215925,-1.558410,7.582682,4.338623,0.289849],[-3.279757,-8.696136,-9.222458,-3.874686,7.332575,-9.017685,-8.341240,-6.043606],[-6.628220,0.315727,-4.424627,6.615347,3.429553,0.641378,-4.776199,-6.214738],[3.489594,2.617257,-2.277490,0.009344,9.841406,8.854230,0.427227,6.670956],[-7.418401,9.230896,4.520513,3.760268,7.351629,9.348304,2.023891,-9.955391],[-4.635933,-4.615547,-3.376815,9.075836,-9.454977,8.373218,-6.146089,8.371216],[8.595962,7.942474,9.597028,1.934239,-8.118175,-6.057933,2.719913,-6.967552],[9.404434,-2.144583,-9.653606,8.786617,-9.397145,4.024553,6.405472,1.938645],[4.050742,1.520195,5.000271,0.701364,-2.201921,-9.632097,-6.022331,0.258993],[0.759748,2.460307,8.753340,-5.837434,3.091320,6.663885,6.892460,7.241759],[1.440777,8.481722,-0.058517,-6.117623,2.701682,-6.672154,-2.215927,2.542798]],[[1.665442,8.881368,1.950990,8.017560,3.272184,3.255598,9.390702,2.554786],[0.724416,-0.711410,2.614580,-9.016430,1.609471,1.062812,8.905892,5.484450],[1.642403,1.814872,5.498611,-3.302929,8.738785,0.227922,-1.585153,-8.756891],[0.344647,9.201571,3.691100,9.393716,-6.332982,-8.996466,4.627732,2.082189],[8.202702,8.950723,0.416749,0.598472,2.222822,8.142215,-4.995035,-1.411671],[-9.474188,-6.698952,9.673183,-9.260032,-7.614198,7.494046,6.108309,1.043543],[-1.177738,1.930231,-1.649001,-8.834915,0.006981,4.200232,3.753369,0.355049],[-4.941756,-1.696853,-3.451652,3.079276,9.429472,-4.273855,2.740804,6.912754],[5.985638,9.401799,-2.959317,5.548077,-8.395903,1.877115,-5.350938,8.007198],[-1.968435,7.132566,9.688701,-5.228150,5.082954,3.856779,-1.756168,-4.550611],[1.761059,6.562855,-5.808153,8.087878,5.289783,-2.963391,3.309782,-5.793430],[6.010690,-7.453467,5.521839,-9.806956,-9.297000,3.879641,-4.031359,-1.217310],[-4.138210,1.374803,-2.500777,7.571188,3.223013,-9.332347,5.527603,8.740766],[-1.486457,6.595136,-1.382924,-0.678206,0.362895,0.202212,-4.849990,8.339293],[7.343795,9.489059,6.687680,3.656843,-8.198063,-5.098962,1.663990,5.600146]],[[6.425974,8.499582,-4.803255,-7.285193,8.448742,1.658580,7.786679,-2.812309],[-8.814244,8.334279,-7.766301,-4.781028,-6.404673,5.027259,-9.493676,4.176547],[8.970345,0.949615,-4.429313,-3.682826,4.431071,3.432533,-0.767977,0.815039],[8.515549,7.481442,-6.568130,7.085997,-2.700159,-2.659594,3.088552,-6.707644],[-5.004523,-9.266403,-4.995248,-9.586899,-5.937566,-4.736392,-6.054050,2.315051],[-1.013264,5.137475,8.503496,6.744219,3.773522,-4.093274,1.712043,-0.539474],[4.126681,1.213587,6.091401,5.319419,0.296168,-7.050723,-4.829174,-1.784305],[-3.420788,5.074161,-5.794486,6.091291,-6.025439,-1.381826,8.689447,5.271473],[9.483249,-5.665726,-9.110252,-7.286306,2.078372,8.163625,2.379159,2.190691],[-0.970382,5.973268,8.109526,-0.219542,-4.723586,-4.789073,8.729541,-0.769632],[-2.760471,0.484488,4.505706,-8.823426,8.845920,-9.538482,5.349709,-6.823929],[-6.325116,-2.982893,0.909318,4.865340,6.489740,8.296918,6.780404,6.585979],[-7.525102,-3.423389,3.183226,-3.409097,3.592688,2.444864,-5.143725,-5.000026],[9.138427,2.828764,1.927126,-8.638202,-0.793554,-3.676708,-7.290596,6.064615],[-2.098000,-7.857763,-7.733236,-2.567916,3.520607,6.083177,-5.769325,-9.295155]],[[-7.329290,-8.650445,-9.591484,4.208817,-2.155538,-8.062588,4.228371,5.527732],[1.395320,9.520729,-2.878622,2.267023,0.135663,-3.797837,-6.679185,8.449047],[-5.345446,1.903230,8.264238,0.145285,-1.676836,-5.172795,0.898416,2.974793],[2.874433,-1.602598,3.470776,8.114699,-1.823625,-6.678589,-7.620911,-4.301429],[2.471161,1.399954,-2.283624,-6.572774,-4.300683,-5.771610,-8.569908,-5.280883],[8.817808,4.865153,3.628674,0.363496,-2.953181,-3.594771,-9.480740,6.555145],[-3.873676,-2.370042,7.524471,4.920498,5.407313,4.857867,-8.451045,9.160452],[0.287626,-6.348704,2.375753,-6.710621,2.677689,-2.749658,6.216505,2.156117],[-3.061323,-6.500784,-5.033907,1.422155,-8.853950,5.905505,-3.044405,-0.702565],[0.834960,-8.045625,-6.112727,9.252111,-7.481366,6.190809,4.824984,1.060501],[-5.296582,-9.719076,-4.506701,-6.640417,-0.589856,1.874659,-1.911117,-4.867759],[-3.176199,-3.644004,-8.122860,-8.293329,1.772061,-6.305832,-3.858011,-7.427160],[-4.222492,2.539907,-1.262759,5.446430,6.017990,-0.964545,-8.638985,5.235792],[2.137336,3.750493,2.813665,-5.918430,-4.199465,-0.435423,4.858929,6.250889],[5.863153,-4.302511,4.883919,-1.604004,-2.308305,-6.370519,-5.499395,5.162124]],[[-3.885141,2.138554,-1.549887,-2.606579,-6.254104,9.603889,-5.855843,3.018836],[2.889631,4.456148,0.606794,1.913822,-9.126427,-3.675280,3.213136,1.619799],[2.410710,-2.007367,-4.066981,-5.456737,2.052397,-2.599606,-1.253541,1.130155],[4.368584,-4.997038,-9.476984,-0.978093,-5.858595,2.914805,-1.279733,1.231497],[6.233513,0.887272,-0.247776,9.059832,1.227734,6.108347,2.476588,6.005918],[-5.671895,-8.032975,6.127167,8.978253,2.734668,-2.207558,6.089706,4.248404],[4.570126,9.765237,-2.018912,3.113226,-4.947833,-3.415057,1.914181,6.573985],[6.316053,-6.511925,-2.379937,-8.695373,6.137751,-4.198760,-7.149565,1.749233],[-8.791915,-6.329409,5.533341,9.096196,-2.030914,-8.159726,3.357296,4.747723],[7.002665,-4.742247,-7.581487,6.442115,1.050185,-3.154907,-8.061092,5.646570],[-1.508429,7.982968,0.252949,-0.025118,-8.851843,0.907262,-5.120827,2.806799],[-6.211818,8.757624,-3.805324,-0.702095,-0.266324,-9.526982,2.797765,-3.243400],[5.709996,7.565758,-3.136646,-8.776634,-2.235432,-9.642773,0.533687,-3.301509],[4.996788,-8.264505,8.398417,4.890726,6.198717,-8.325348,9.434412,6.383912],[-8.823109,3.459214,-9.679724,-8.026451,3.213506,9.213750,-9.301991,6.254599]],[[7.314529,5.381049,-0.652341,6.061622,-9.738176,-2.999474,-2.643089,-9.949880],[5.405614,6.421436,-6.573091,-5.589803,-9.284603,-5.826253,-1.291274,8.001265],[9.864914,-4.466947,0.337345,0.425621,8.885855,-0.690845,8.480354,-2.249207],[-7.897123,-0.716042,1.647318,0.069755,-7.190479,-4.979979,2.337581,5.400957],[8.007740,-6.235668,9.851575,-5.605629,-7.507371,-2.424495,-4.522841,-4.519759],[-9.043712,5.498617,4.505553,8.516510,-9.042696,-6.277542,2.066364,-2.379575],[0.624738,-7.885866,-0.531089,1.770296,7.295358,3.615438,0.496818,-9.791818],[-2.880123,2.083656,-1.122556,-6.940224,3.871984,-1.615041,-9.569657,0.057601],[-5.247086,-3.600095,-4.431933,4.175338,8.581185,8.193938,-2.443496,-9.623762],[7.793358,-3.043224,-1.864064,-8.894739,-0.330245,0.445429,6.156191,-8.191401],[-9.276536,4.903838,1.399352,-2.661110,5.474243,5.211601,4.471408,-2.011102],[6.284030,2.521096,0.197262,1.187803,-8.739095,-1.640767,0.017489,0.523777],[7.516307,4.564810,1.109542,7.788792,5.469300,-3.277818,-0.501667,-9.625228],[-3.884853,-2.716896,6.906574,3.037394,-2.317540,-2.353166,-5.635193,0.227332],[-3.416187,-3.335459,-3.800965,-2.392636,-2.952159,-8.430069,9.708652,0.226747]],[[-2.646949,-1.613612,0.128073,-4.945254,2.377265,-7.792942,-7.300852,-3.616420],[-9.829022,6.239227,-8.529533,-0.910176,-6.414858,-2.662746,1.566748,8.997265],[5.179258,-4.428407,7.756919,-8.328883,7.549584,4.927730,-4.659827,-3.949082],[-0.773171,4.363794,7.492364,-7.261359,-7.326803,6.971757,-0.511115,-0.963701],[-9.797820,-1.588897,5.918007,5.239382,1.640141,-4.476522,-6.781048,-0.702875],[-6.921064,0.700618,-1.072590,-1.994693,-1.959453,-4.346125,-2.856158,-2.233446],[6.784521,0.835722,8.313747,0.562039,1.101241,-1.591870,-8.355919,-2.895452],[-6.171127,-5.718583,2.905892,-8.007330,2.120634,-7.613630,7.454234,-8.695469],[-6.134215,0.369523,-9.817012,-8.817353,-1.330244,5.463773,-5.423837,-9.914611],[-7.688795,1.574650,4.004229,5.412045,-2.561732,-4.510083,8.738243,3.163606],[-9.016661,5.537352,0.431685,-3.358994,0.016720,5.623396,-5.657568,-8.613030],[-5.327906,-5.157590,4.288132,-9.373162,-7.970415,4.128448,-6.296274,6.465537],[0.212116,0.162265,-8.699068,9.122479,-2.356278,1.244287,-1.402964,5.430068],[6.338869,-9.871359,9.100875,7.091652,0.709405,2.526346,4.217554,8.770441],[-5.552052,1.984729,-9.896476,-5.691393,7.457985,8.388953,7.689378,8.110476]],[[7.468820,-6.632478,-6.244679,-2.902925,-4.773795,3.573530,-5.106311,3.189160],[-0.728379,1.294540,4.743008,3.220492,-0.078427,-7.846892,2.759245,-4.233257],[2.811763,2.358264,-6.777016,3.771266,-2.233091,-5.634000,4.288103,2.637344],[4.811416,5.357425,-2.726196,7.267492,5.538886,-8.306268,2.379203,8.245625],[0.854661,2.731863,-2.494339,9.325577,2.166033,6.853961,4.707511,-4.474123],[-2.360110,1.956982,-5.462923,6.064638,-4.745516,-2.128380,-6.043878,-7.721629],[7.997082,-0.461175,-5.407983,-8.492639,5.579163,6.271822,-5.172916,2.162606],[4.732949,9.248569,-6.801051,8.619900,-1.464458,-7.689652,-4.291632,6.264574],[-1.411607,7.444369,3.767274,8.892566,-0.074915,6.834064,-1.364848,1.989714],[2.323320,-3.662595,8.451761,-3.103553,0.671222,-3.848631,4.901770,1.036279],[7.476751,-5.324228,-1.017136,-0.698650,-9.338454,4.857457,-0.051222,-0.307619],[0.596455,5.975448,1.808087,4.451640,1.891590,-3.386104,3.056580,-0.075995],[-8.004592,1.416419,-8.101113,1.701856,8.521407,-7.944805,9.239777,2.624525],[2.594672,8.125288,-7.211959,5.805283,4.372993,-4.241635,-8.149987,7.005009],[3.478808,0.888789,-3.254448,1.953461,-3.734645,-9.419033,-4.518913,-8.596734]],[[-2.061902,-1.402169,-1.036511,-7.157332,6.809645,-2.604449,-8.573644,1.171771],[-4.635897,7.083995,5.795992,-5.715564,-8.706497,-5.864750,-5.656740,-9.532125],[-9.485838,5.663076,8.158475,-6.052189,-9.820303,-6.874349,8.803584,0.207082],[-2.256695,-1.752553,3.017661,2.840814,3.129047,-1.455728,2.618024,5.889633],[-9.164211,-2.682545,-5.868083,-2.882346,-7.843579,0.087587,-4.630001,2.225489],[-8.471841,9.543962,1.944702,4.962774,-9.927787,-0.231206,4.082289,7.187220],[1.713280,5.833358,0.570617,-2.810321,-6.671069,5.183101,-6.753055,0.675858],[-3.924839,-7.783873,-1.100168,2.643219,-7.642537,-4.295392,0.177266,0.535406],[5.682361,-5.208946,-5.963196,-1.983260,9.023733,-2.675046,4.356289,-0.272203],[-6.792510,4.421895,-1.812154,5.766770,-9.760158,-3.451169,2.494370,-1.116759],[-6.683643,2.090389,-1.429002,8.238892,4.619450,7.865484,-0.910427,1.947546],[7.410287,4.548569,8.234803,-8.119659,-3.246287,6.665230,-0.745604,-2.044820],[-4.907485,7.220890,-4.361677,-2.163744,-0.904377,-3.969940,5.171412,8.066084],[-5.208217,5.653030,2.044186,7.333776,-1.394159,-5.406597,8.652252,-5.691855],[-7.272092,-6.062261,-6.894869,3.587455,-9.762411,7.271106,4.286035,-2.604742]]], dtype='float32')
module1.set_input('var_1003', input_1003)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1003, )
res3 = intrp3.evaluate()(input_1003, )
res4 = intrp4.evaluate()(input_1003, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
module5.set_input('var_1003', input_1003)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1003, )
res7 = intrp7.evaluate()(input_1003, )
res8 = intrp8.evaluate()(input_1003, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
module9.set_input('var_1003', input_1003)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1003, )
res11 = intrp11.evaluate()(input_1003, )
res12 = intrp12.evaluate()(input_1003, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
module13.set_input('var_1003', input_1003)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1003, )
res15 = intrp15.evaluate()(input_1003, )
res16 = intrp16.evaluate()(input_1003, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
module17.set_input('var_1003', input_1003)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1003, )
res19 = intrp19.evaluate()(input_1003, )
res20 = intrp20.evaluate()(input_1003, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
module21.set_input('var_1003', input_1003)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1003, )
res23 = intrp23.evaluate()(input_1003, )
res24 = intrp24.evaluate()(input_1003, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()

'''9: TVMFuncCall
8: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::transform::Pass, tvm::IRModule)>::AssignTypedLambda<tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}>(tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
7: tvm::transform::Pass::operator()(tvm::IRModule) const
6: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::LazyGradientInit(tvm::RelayExpr const&, tvm::IRModule)
0: tvm::relay::CheckFeature(tvm::RelayExpr const&, tvm::relay::FeatureSet const&)

'''