import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_16 = relay.var("var_16", dtype = "float64", shape = (11, 15, 13))#candidate|16|(11, 15, 13)|var|float64
uop_17 = relay.asinh(var_16.astype('float64')) # shape=(11, 15, 13)
uop_22 = relay.log(uop_17.astype('float64')) # shape=(11, 15, 13)
uop_24 = relay.sigmoid(uop_17.astype('float64')) # shape=(11, 15, 13)
const_26 = relay.const([[[-2.301626,-1.663244,-5.913153,-9.455432,8.932933,5.988288,5.556631,4.571238,5.681480,0.389153,9.250765,-7.764195,3.767084],[6.098396,8.795568,-4.167930,4.201452,1.409248,-6.316584,3.327725,-3.274347,5.601611,4.155941,7.717008,-2.255731,4.795028],[-7.597571,6.443139,6.256782,-1.713415,-3.252948,-0.779548,7.654745,3.980760,2.536516,2.640016,-6.443513,-7.762606,2.403773],[-1.631058,-2.292535,5.169655,-6.561358,5.404584,4.461495,-3.860972,-0.126584,4.762982,8.128643,-7.279875,-7.263749,-8.045500],[-2.514220,-9.302633,-9.863803,0.838010,-8.609471,-5.186257,3.416904,-3.497713,9.149006,-4.951552,3.390685,2.160685,2.574185],[2.217307,3.248477,-6.985006,-8.924037,9.550713,1.675820,-6.107365,6.746583,-6.003555,-7.020677,-3.704320,-2.705009,0.555705],[-6.561820,-8.737835,-0.217508,7.501026,1.844083,6.148890,-1.895947,5.739459,7.947595,7.586290,-9.570175,-8.598844,-1.332532],[-4.896638,2.639710,-6.419699,-4.307201,2.897673,9.142121,-5.590379,-3.770340,-8.350975,-0.654380,0.270178,1.806045,-2.259032],[-8.153593,-1.115863,8.599835,2.360322,9.353646,3.807336,-3.296677,-2.687803,0.111445,8.601134,1.309940,7.734771,7.194794],[9.678289,6.109174,-0.020720,-6.783928,2.231666,4.412099,1.436750,-1.967422,-8.843840,4.486282,-3.866023,4.568547,4.998526],[-1.632997,-0.877549,3.096630,-7.511766,7.670772,-3.153331,-3.601074,-9.873938,5.291947,-7.406818,-3.115841,-4.714934,0.834061],[-0.768021,-6.584234,8.887563,-1.825928,-9.350115,-9.400087,9.178835,5.997838,5.221374,9.145481,3.857738,8.761354,-1.736210],[-8.577591,-2.538879,-8.731930,-1.433070,-5.005505,4.858866,2.378890,-2.418472,-0.385279,-5.467944,0.187648,4.804830,9.145656],[8.532705,-2.766964,-1.108243,7.574434,9.566028,7.820034,-5.368251,2.862756,6.042727,-8.371602,-7.395872,9.836826,-0.977660],[2.764471,2.751908,5.833097,5.975870,-6.852639,-7.857873,-4.550212,6.555958,-3.463221,9.927546,1.585716,-9.705457,-5.315590]],[[1.651350,9.874609,0.018952,1.028281,7.296358,9.425995,2.014007,-3.466567,6.054610,9.042231,9.447614,5.138770,1.249501],[4.451293,-6.646294,4.513559,9.686718,5.318151,0.617850,7.882550,9.304062,6.811952,-4.331156,7.594616,2.650781,7.799201],[-6.208707,5.208660,7.430397,7.622760,9.968760,6.482388,-9.922478,5.467742,-2.699064,-1.188308,3.898285,-0.971390,-6.965201],[-3.874592,-4.713757,-4.021901,-9.144319,-6.175035,-8.186623,8.502565,-3.566366,-4.793006,8.167669,-2.193894,-4.037509,-7.985492],[4.601715,8.975989,-5.564829,1.207618,3.414710,2.809482,9.960271,-3.317057,3.470261,1.016653,-2.765058,-2.408779,0.941767],[5.698910,-7.486827,-4.085786,-0.936117,6.872950,5.856509,4.573255,-5.377971,-0.507281,4.306751,5.390623,-1.953971,-5.971463],[-4.209892,-0.239291,-6.603237,0.848591,1.665373,-3.675794,4.982478,-5.906564,-8.697629,-7.123667,-9.473390,-0.091623,0.241035],[2.855308,6.511379,-4.305758,-7.433468,6.519799,3.322479,3.103527,-4.816874,-6.691729,7.160508,-7.630600,7.021674,-7.387547],[8.862878,5.239846,-0.965989,-6.715939,-1.346298,1.863991,-0.464771,6.278378,7.452860,-8.826783,-8.424003,-3.656102,-8.234382],[9.369233,8.267908,4.416173,0.500692,5.048126,5.494678,5.443217,-1.099050,4.976129,8.569972,-5.662680,2.639105,8.599994],[-1.436603,-8.953800,-0.728158,-0.653627,7.420203,3.976776,-3.784964,7.838679,-2.502960,2.172065,8.459133,8.209719,-1.137365],[-5.937719,3.077428,1.880954,4.548604,-0.192707,-2.235152,6.314499,-5.938514,-8.951428,2.560031,5.316084,-4.056290,-5.937444],[1.549674,-6.716179,-1.265715,1.065877,-4.499652,8.277021,-9.650921,-0.663123,-5.329388,4.223475,-4.482916,9.184511,0.068761],[2.210495,6.804040,9.217326,-2.484407,-7.240932,-4.835458,-8.007973,0.783535,-4.949267,5.175861,-3.059099,-6.022044,-3.192288],[1.101961,-3.190471,-9.568770,-7.200649,-9.351312,-4.715304,6.744151,9.551884,1.422726,7.589837,3.737159,-8.686847,-0.328975]],[[-0.044231,-4.378113,2.164576,-3.928474,-0.938031,3.932646,-2.178401,5.061056,-5.390958,-4.200244,-9.790790,6.531271,-5.179170],[-8.903536,1.279199,6.890384,5.098402,2.258612,0.411408,7.443761,-4.233730,-6.091741,-4.138768,-4.239830,-5.255434,-2.013603],[-5.032066,-3.811305,-1.374849,8.275553,8.748644,9.471152,7.552330,4.805594,-5.794904,-7.357527,-3.288674,9.155750,-9.984123],[3.629117,-8.767158,-5.068910,-4.953035,0.289085,7.781316,-2.210651,5.024707,2.516890,-4.897631,1.896252,4.077856,-9.779516],[-2.938242,-0.591545,2.070201,-8.211253,2.841873,-7.755432,8.309486,-4.339860,-2.897604,-2.727885,-2.437025,-6.539357,-3.094881],[2.864889,-7.326182,9.180512,-2.094248,5.473707,-3.351443,6.872728,-5.620161,6.385065,-6.517225,-3.648324,-9.093157,-3.242001],[4.741101,-0.240403,3.165805,7.487571,2.794208,-0.898083,5.750249,3.531314,8.497912,8.162831,-4.552151,-1.485675,2.054069],[9.607737,5.519189,-6.114120,2.633471,-8.087682,4.108437,-8.100992,3.548219,-3.830667,-3.107106,-0.383921,-3.813037,-1.020583],[-5.628596,6.784487,5.685540,4.396458,5.737458,8.429406,-2.977632,9.915200,-4.343617,-1.936720,-0.877416,-8.529806,-5.347244],[5.551360,-7.269700,6.262530,-5.335222,-2.825931,-6.026031,-5.906763,-2.780616,-6.733306,1.526662,-4.216473,4.636494,2.080621],[6.116718,-2.986922,-4.299302,-5.818987,5.044338,2.679507,3.488425,-1.630410,-5.678878,8.124511,-5.564727,1.452603,4.231267],[3.701995,8.369751,-0.435390,-2.879912,-3.110086,-7.285258,-5.470657,7.961707,7.022854,9.272132,-0.810267,-0.351325,-1.965130],[9.374971,7.248368,9.273745,7.320831,4.780900,1.336764,-9.204059,1.443016,4.626272,6.321788,8.458515,9.761834,-6.682548],[-5.525653,7.464592,7.544458,1.446952,5.195108,-4.572690,1.747164,-7.398930,6.809662,-6.530528,-0.947554,-0.362900,-8.629152],[-5.699361,4.151537,9.839163,-6.290405,-7.783256,9.699392,-6.742319,5.537769,9.357873,-6.601350,5.699794,1.672897,-6.004587]],[[2.452187,3.510674,7.855909,3.000688,-6.418780,-9.502390,0.255492,-0.591873,-7.446805,8.757209,4.055168,-7.714482,6.327316],[-4.944290,-1.824905,-9.225197,7.587956,5.340460,9.562908,1.022031,-4.747056,-9.786820,9.516523,-9.057221,3.381345,3.915637],[1.377163,9.076798,4.477940,5.172399,-3.625078,-3.660693,6.425578,-6.092720,-0.342551,-2.687733,-3.280007,8.294716,0.083162],[9.133162,9.889291,-0.364257,3.996304,4.776850,9.473196,-9.509143,-7.810850,6.689206,-9.087559,1.569119,-9.231293,4.279841],[-6.902007,-9.778222,3.160490,5.499155,-4.468218,5.347519,5.118145,-3.436909,9.703052,-0.887248,5.146163,5.715628,-6.715348],[8.691879,-9.404712,8.650653,8.176296,-7.704209,6.578522,1.543279,3.480462,7.710449,-3.495361,0.053555,-1.733377,1.606671],[-0.805166,-9.430095,1.059017,3.376161,-2.405595,5.131809,-7.334012,-6.400578,3.906867,5.741357,-5.312893,6.806814,-6.742761],[-8.902983,-2.317876,6.711260,-4.817509,6.513639,8.820513,3.596906,1.008584,6.902184,1.262182,-6.436681,5.722651,2.144387],[-8.731737,-2.523863,-4.040099,-9.801590,4.619470,3.463332,3.488889,4.612488,1.121729,-2.341770,6.993808,-8.784923,-1.155645],[7.423171,-2.432224,9.852175,0.390074,2.691662,5.581378,5.794802,3.148818,-8.188639,3.572377,9.021584,1.142820,-5.659399],[8.529422,5.321104,3.500755,-8.922062,6.486675,-4.919653,5.398548,-6.773127,6.530457,2.498945,-1.108963,7.973426,-9.054955],[-0.960923,8.618324,-4.980473,1.847113,-4.196734,0.633533,-7.184164,-7.302756,8.043564,2.011864,-0.181051,6.914716,1.339837],[-7.543783,-2.250547,-5.693047,-3.378131,7.965732,-3.884910,-9.351340,2.309374,6.503916,-2.038776,-0.858063,-4.298832,-6.918400],[8.361259,-8.500336,3.939704,9.453722,0.383297,3.388879,0.768320,0.406052,5.469666,-1.775219,9.381861,0.777148,-8.773639],[6.396705,0.008395,6.413755,-7.717633,7.397505,-3.605084,6.953361,-8.103930,4.816934,1.445826,-1.664314,-7.444505,2.994291]],[[-1.916713,-1.739439,-7.107309,6.138162,0.992635,-1.866953,0.770663,2.734291,3.680982,1.153086,2.213773,1.395631,7.573757],[-8.742278,4.055891,9.341289,-1.115813,-3.242869,-7.896530,-6.675064,-0.546341,3.506951,-9.005948,-1.763777,7.907329,-9.426111],[-7.881312,8.399303,8.031009,-8.080573,0.234240,-0.690309,5.772482,-3.656136,9.793593,8.203401,-6.520507,9.410740,7.735944],[-8.037196,1.336542,-5.410271,-1.203231,-4.422151,4.868887,-2.961187,-3.219723,-0.556568,7.821185,7.554547,5.640949,3.240545],[4.592781,-2.780722,-5.637033,5.704693,8.582678,5.933256,2.895983,6.680238,-8.736040,6.037732,5.871094,-7.191300,2.929121],[7.777954,-2.415911,-9.562961,9.069477,3.361909,1.246789,0.077780,-0.428161,-1.164671,-6.417633,-0.579542,-4.318731,-1.311530],[6.271825,-2.724693,-1.118428,3.787668,-6.668515,6.393360,-2.094344,3.140323,7.919646,8.210857,-2.565873,-7.630694,8.251336],[7.882633,-6.672234,3.940338,5.671175,-5.742775,4.612407,-3.418868,9.554224,1.459995,-8.128881,8.957153,-6.887948,8.517611],[8.789082,4.509893,-4.440189,-9.626903,-9.704726,-4.266277,0.364107,-7.387361,-0.297610,3.255536,-1.036728,-3.390585,8.529904],[-3.801709,-1.516317,-7.647794,3.901023,-5.645596,3.480089,8.528418,8.317111,8.651994,-7.486154,9.050260,-2.057203,8.102150],[-1.847526,-2.209712,8.644007,9.231831,-6.807398,4.707561,3.841886,-2.561035,-8.917386,8.714623,3.222802,6.243730,-2.220975],[7.255066,5.629274,1.944673,-7.254569,8.607257,-6.125923,4.778594,7.614117,3.860815,-0.982474,6.348076,0.810504,-5.818407],[6.748170,-8.336749,7.564039,-8.554675,-3.487262,-4.831207,7.357789,1.744378,-5.087275,9.054627,2.752650,-8.404949,-3.295163],[4.279637,-0.563760,-3.463730,1.490380,9.272184,-3.629093,2.736776,1.320528,5.577267,2.960200,8.453309,3.941831,7.449263],[1.624333,4.402071,7.118628,5.019800,-0.965406,6.283360,-8.872296,-6.953525,4.535141,-0.968343,7.430228,3.885461,-0.762793]],[[-6.926145,5.145434,-0.181341,-4.330066,-8.844188,-4.596476,8.906468,-7.833864,-3.711596,-7.488205,9.933876,-6.257065,-1.304160],[-7.050954,0.280305,-7.486348,-6.262247,8.081480,-2.733925,-2.371086,-8.130149,-3.009063,-2.472040,-0.102182,-5.640907,3.240999],[-1.819800,7.199205,-4.413602,9.304021,-6.438642,0.667591,2.987519,9.491991,-1.368383,7.253406,7.946018,6.248195,-4.703555],[-4.322424,-6.985438,-3.186025,-5.275701,4.915687,7.109062,-3.241953,4.878602,6.407804,-2.327593,-0.953128,-5.265334,1.762150],[-4.602695,9.998848,2.318614,9.908938,-6.477476,-0.524219,8.124812,2.236335,-1.538810,-6.981446,7.212613,6.738282,-9.954704],[9.052593,9.227497,-6.716127,2.458175,-0.158832,-6.658089,-8.176021,2.492452,5.277798,-8.312359,-0.418296,-9.091141,-1.710326],[-6.443768,1.854938,-2.912591,7.913651,-8.605313,0.145817,-5.573440,-7.584514,2.560444,9.901910,4.781362,1.419478,6.209230],[0.230915,-6.429384,5.859285,5.963254,7.523646,7.150035,4.462267,6.987747,2.411249,-4.452341,-7.194136,-9.622625,-2.243572],[-7.787200,-3.428472,9.137783,7.203899,8.901527,-3.214116,9.010179,-0.955256,0.693785,-1.046949,-9.111968,-1.972069,7.761269],[-3.937971,-2.803915,-9.892801,-2.815940,-5.794862,-6.417406,7.014832,-3.483277,-4.132696,-9.570344,4.265632,-9.057983,-4.416775],[3.911489,2.334669,4.202253,9.994336,-2.327115,-1.781116,-2.998544,4.800698,-3.941798,-3.315024,-8.662158,-0.326878,-1.079263],[-8.624174,-5.660543,8.547408,7.051766,-9.971914,5.222454,-4.855668,2.686907,-4.947269,7.425455,-5.347383,9.727174,7.335950],[6.015737,-3.065603,2.196837,-5.928781,8.636184,2.544400,-7.633248,1.078009,5.046244,-4.253218,-1.333477,-7.491038,-2.133072],[7.956520,-5.844732,9.449643,-0.443610,8.437194,9.027255,5.277441,1.490177,8.246415,1.998192,8.485352,9.460011,3.648834],[6.888509,7.082132,3.632116,9.030857,3.908256,9.599904,-4.888689,1.847314,4.998619,-1.385474,-5.873398,-8.659611,-5.161360]],[[-6.666771,2.682082,6.688750,-3.761840,-9.737408,1.061868,0.787740,7.856611,-1.313785,1.755230,8.444536,1.993158,5.725448],[8.496579,3.909233,-6.428797,5.315177,8.083259,-4.132400,-9.293540,3.262402,-5.395070,-1.375611,-4.934847,1.265369,9.845566],[-1.729047,-5.028712,-5.932427,7.115172,5.521926,7.467475,-3.219807,4.555357,-1.746766,7.793629,9.361225,-9.367324,1.106223],[-1.345289,-9.852851,4.092491,-7.849205,7.505711,-0.170923,-9.594615,-0.396138,-4.577320,2.273666,1.553436,8.832587,3.845965],[-7.931160,0.475409,-1.306817,-1.083067,4.105407,9.999859,0.719907,-5.640215,-4.638130,1.616132,-7.063621,9.094037,6.439249],[-4.026979,7.612631,0.870482,2.996569,-5.600920,-5.331909,1.673048,-7.542511,-0.253292,1.101184,7.798292,2.549378,-3.392181],[0.159196,6.332114,-7.564626,4.578914,-9.910349,1.914121,6.910596,2.964422,-1.215057,7.441427,-9.225730,-6.108842,-1.256991],[8.486817,-9.692152,-9.772900,5.204931,-6.366757,8.068310,6.580174,-7.313872,5.444627,-9.534890,4.628943,0.222625,-3.529988],[-4.260948,3.803552,-8.947723,8.799055,-8.213853,-7.476050,6.916879,5.217347,2.976624,-7.735705,9.587571,3.909367,3.750924],[-4.471912,-3.941418,-2.403962,2.743142,4.874306,-9.122339,-4.510041,-9.141399,-6.440247,8.090523,-7.318086,-4.642608,-6.520664],[4.203610,-6.080464,8.375703,0.249120,0.533356,-1.396235,-9.030953,-0.435633,-8.974984,1.459761,-0.539337,4.826150,-7.210586],[-7.808239,-6.614555,-5.031326,-2.615987,-3.139762,-8.087302,8.225012,8.945552,-2.432720,-4.337157,-3.951283,-5.035685,6.475179],[6.310565,-3.210754,9.989192,8.991065,-6.748037,8.558090,-4.835491,-4.384418,6.456073,-0.230889,3.271802,-3.498160,2.397795],[7.063331,4.742163,-0.558211,5.192259,-1.886489,5.467805,-7.917478,7.326191,5.357824,-9.662763,-0.615283,4.966158,-2.982159],[-6.956327,-4.165225,-7.093024,0.769441,4.868340,-6.650015,-7.338866,2.812436,-0.440116,7.394797,7.838326,1.283558,-4.860601]],[[7.305837,-9.234938,3.513994,6.863436,4.580204,0.485622,3.995050,-6.342962,2.209210,-4.771413,5.178886,-6.101697,-1.267207],[2.537495,9.003327,-4.205204,7.866553,4.780128,8.879686,4.177186,-2.045537,8.383348,7.089476,7.226831,-9.586493,0.137350],[2.651994,5.089740,3.877467,7.857832,-5.210592,8.890653,0.952233,-1.505967,5.931470,1.647954,-0.809814,1.934869,-2.534302],[-1.572395,-5.187155,-4.566385,-3.317300,-7.529592,-3.304138,-8.421969,0.109622,1.112782,-1.309354,7.417025,8.364104,9.983832],[0.932174,2.385926,-7.985099,-6.570134,6.340205,-4.353080,-1.930107,9.448595,-5.677068,-1.494389,6.856342,-0.861832,7.367452],[-9.214754,-6.857606,5.813047,-3.022691,-2.772679,-3.386996,-8.960996,1.863991,1.522238,3.307272,5.633274,4.794537,6.768420],[3.675080,-4.175387,0.591300,1.384674,2.864497,5.697924,6.246328,-0.680719,-9.555871,4.075120,5.672309,-5.268426,6.579795],[-6.655803,0.769395,4.848664,-8.823713,3.375383,-7.329972,9.620704,1.975039,-0.405483,-5.371550,9.978387,9.520292,5.252484],[8.746644,5.392028,7.286178,3.705898,4.812220,3.150410,1.285468,2.007088,7.938488,6.914580,3.910334,4.240925,-2.190182],[-1.914829,9.136526,-0.013887,1.977451,4.037122,4.417701,1.986186,2.093210,-2.541590,-8.934662,1.189498,3.552947,-8.505451],[-3.504701,-0.322103,-9.712534,-8.979082,-1.616771,8.107420,-6.471798,-9.583436,8.024508,-4.897852,-0.555573,7.442185,-3.913058],[-7.574300,2.620422,-2.311704,-4.746513,-7.382675,3.265816,-0.284664,6.720161,-0.055949,-4.796157,-7.096441,-2.075268,5.749894],[6.233475,2.907584,3.689647,4.021798,1.260051,-1.349376,5.631895,-8.834096,8.679925,-7.642309,-8.720936,-3.693464,-6.306198],[8.477417,3.103467,3.660516,7.624334,-9.246755,2.682019,-5.584169,2.494836,-4.884359,6.075258,2.421532,-0.950212,-9.471359],[-9.641996,6.443301,2.354413,-7.464397,5.306140,5.334359,-7.124681,9.059514,-8.610687,-3.917114,-0.503293,-9.973913,-7.480343]],[[-3.614227,8.751177,5.989995,3.311856,-2.846272,6.783618,9.372769,4.405912,-2.182727,-3.100729,9.947679,9.454624,-4.293695],[-9.591077,8.928139,7.829164,7.860390,-8.452936,-2.200980,-3.610418,-5.666550,6.423959,-9.754242,6.100122,8.491849,8.858717],[-8.098709,-6.992875,-2.190546,5.520755,1.871604,-9.292411,0.775538,-9.436257,-4.159836,5.751142,-6.215548,3.165813,9.678231],[6.891627,-5.025010,1.972312,9.019740,-7.004861,-6.236040,-5.717764,-8.108750,1.486434,0.823819,7.984318,-1.386053,8.819516],[-0.506319,9.527510,8.136344,-7.709596,9.151504,-6.876060,9.318085,3.692127,-2.391256,-6.615488,-9.400592,-0.775625,3.040901],[3.591933,-2.834771,-8.553041,7.351074,-6.526570,0.273131,3.388124,-7.462375,7.791902,-1.264674,-9.330575,-0.855410,9.788670],[-7.835612,4.547843,2.373776,3.138229,6.605624,-8.865314,2.389410,2.099645,6.008147,-3.101444,-3.261003,-5.134657,-4.511494],[7.852320,8.683102,5.821286,-0.437879,5.765967,7.888944,-5.488894,-7.618425,-3.805974,3.611163,-0.055183,-5.544057,2.519626],[6.276484,8.788115,-2.307399,-6.104763,2.147913,5.248177,-2.240791,5.160683,7.774520,-2.615478,1.597176,8.322558,-0.575352],[8.437203,-1.760765,8.375666,-0.424917,0.135242,0.275063,-7.389316,2.966621,8.034681,-6.047610,-4.979116,-3.667121,-4.408221],[0.292434,-0.297637,8.044749,-5.143225,-2.186746,7.516126,-6.505986,4.496655,4.029470,-0.943294,4.014541,-2.396126,-6.821942],[5.950478,-3.128581,-1.683178,-9.405410,0.408511,1.527477,6.261823,-0.237383,-0.869492,-8.435639,-9.196137,-3.559705,-1.754724],[-8.069561,2.621737,8.776223,6.471329,-2.186944,3.747569,3.217583,0.484179,-9.722943,-4.822157,5.695348,3.350138,3.088558],[4.879754,-3.848211,0.389962,0.154927,-7.722799,-1.865342,-3.812935,3.523244,7.332924,-3.367399,1.105178,7.827957,6.321113],[8.735693,-9.722095,8.969944,-6.638749,-3.284844,-3.604668,-0.591767,-7.519150,8.193386,-4.547308,1.141563,9.018731,-7.965701]],[[-5.214114,-3.996893,-7.227822,3.178143,-6.351214,4.477059,-3.967165,8.903312,5.707227,7.233376,-7.459219,-0.367766,-4.902311],[-3.336794,1.915329,-1.876775,-2.453928,-3.980573,-2.764232,-1.003330,-2.550664,8.423454,0.325020,1.904586,4.188681,-4.776716],[7.161757,-8.717272,-0.345944,1.851919,4.154041,-0.298775,8.552714,-0.351745,-7.469337,-6.170713,-2.412078,6.115964,-7.464688],[-0.168651,-7.407170,9.946376,6.888202,0.241006,-0.437234,-0.641292,-4.038645,-5.686241,1.327768,-2.717556,0.852891,-0.448742],[-9.518473,6.718612,-2.777445,-8.357725,-1.504968,3.160682,3.065959,-0.965647,3.502292,3.355223,7.042259,1.105682,6.069318],[-3.358304,6.913416,-0.848483,-0.987673,-6.687205,-9.330491,6.821048,3.848234,-0.694228,0.357933,-9.877624,0.508303,9.615073],[6.454682,6.397395,-2.166190,3.216294,-4.512068,0.074212,5.800611,-1.398422,0.289003,7.586594,-9.970333,3.470294,-0.173088],[-2.062815,-6.714209,-1.612340,0.297368,-2.173530,2.283946,7.055596,8.825908,-4.431842,-3.738208,-3.993632,2.422200,-6.485206],[-6.969802,6.535883,-2.157645,-1.441590,7.810945,-3.670646,7.459704,-5.408109,5.145208,-8.596751,0.348470,3.565577,8.375515],[6.124781,4.603710,-8.920312,4.315571,-1.906794,-9.904845,-9.135935,9.878619,-0.573106,2.269965,8.247403,-2.761276,-1.347634],[3.925104,7.030133,2.826820,9.243959,8.491803,-2.308312,5.696886,-1.848112,-9.222842,-2.183289,8.846684,-7.435606,4.528766],[8.838071,1.718828,8.272068,-4.416410,-1.162967,6.896311,-9.442072,7.142782,-0.169618,-9.510585,-7.511971,5.943426,-0.282956],[4.618851,-3.996081,7.513833,-9.045244,5.457815,6.097753,9.443632,7.383470,9.137256,1.880229,2.846440,6.892404,-0.318109],[-8.192597,-6.452581,-7.538552,7.155068,1.062018,9.289201,5.198894,2.531997,-9.968760,-1.270380,-2.951311,3.455053,7.476288],[8.774016,-3.065526,-5.176495,9.748888,-2.068302,8.904163,-7.382380,-0.339939,-8.640913,-5.421747,-4.058316,-7.914465,2.233402]],[[-5.921579,-8.551796,9.706552,-8.228504,0.331816,-4.595811,-4.482203,3.356357,-3.202002,-9.028015,5.671261,-7.701217,-8.072292],[-9.310679,-6.973074,9.961560,-3.117610,-5.688925,1.587457,-2.018878,2.109753,-0.347553,0.357452,9.848277,7.161042,-1.228609],[4.771251,1.943038,7.778672,-6.078107,7.326304,-4.735589,-9.640307,2.596103,0.688164,-1.963122,-0.201527,-9.557793,-6.285096],[2.540536,0.640995,-9.551525,-9.857270,2.694228,7.168973,4.146855,6.225160,6.990061,-2.301190,-7.884866,-2.158430,5.183761],[6.814947,-2.398666,6.555184,8.614546,0.111627,6.098022,1.472406,9.627326,6.977815,8.646535,-5.358966,-3.650912,0.636929],[-0.220557,3.730977,-4.278351,-5.752036,1.704540,-2.011412,-4.619648,-6.566757,-5.756490,-1.844657,8.981176,-0.780194,6.496682],[7.109450,-7.340202,-2.295842,-7.209442,-6.935879,-5.400532,6.819516,-1.784581,-4.990645,0.261244,6.993831,8.348290,4.577867],[0.442350,8.250380,-0.057817,-5.062663,-9.170245,7.382054,-8.606895,5.196475,-6.794035,-6.255410,0.016413,-5.073783,-1.948117],[-6.573938,7.821084,-8.860412,6.800791,0.192077,-9.506811,-2.332995,-1.127996,7.825106,7.209202,6.691083,7.065263,5.251994],[9.155515,5.865805,8.532171,8.298535,4.581384,8.283981,0.935810,-9.509026,-4.014971,-4.147783,-3.028461,8.663778,1.493262],[-9.568407,3.268322,8.605335,5.338455,-9.506908,-0.151530,7.334180,7.236374,-6.151244,-5.191106,-7.925628,-7.484677,7.383384],[-9.214658,-3.148556,-7.882378,-9.132826,-1.271745,-8.644340,-0.094494,-2.413775,-4.135491,-8.008960,-3.090539,-3.841888,0.726721],[7.689242,-7.823445,-6.469744,-2.110124,-3.203065,6.758153,-0.313953,-2.764890,4.080190,8.680693,9.403208,-1.822467,0.588319],[-7.367219,2.427903,-3.913556,9.484461,0.852016,7.413730,4.613679,-5.324247,-4.741199,-0.634570,6.986802,1.221208,-8.322708],[-0.592384,-4.686095,4.863860,-1.390531,-2.450184,-2.179335,5.680401,9.042499,7.063129,-6.313445,-1.832375,-2.384315,8.981705]]], dtype = "float64")#candidate|26|(11, 15, 13)|const|float64
bop_27 = relay.add(uop_22.astype('uint16'), relay.reshape(const_26.astype('uint16'), relay.shape_of(uop_22))) # shape=(11, 15, 13)
var_30 = relay.var("var_30", dtype = "uint16", shape = (11, 15, 13))#candidate|30|(11, 15, 13)|var|uint16
bop_31 = relay.greater(bop_27.astype('bool'), relay.reshape(var_30.astype('bool'), relay.shape_of(bop_27))) # shape=(11, 15, 13)
output = relay.Tuple([uop_24,bop_31,])
output2 = relay.Tuple([uop_24,bop_31,])
func_34 = relay.Function([var_16,var_30,], output)
mod['func_34'] = func_34
mod = relay.transform.InferType()(mod)
mutated_mod['func_34'] = func_34
mutated_mod = relay.transform.InferType()(mutated_mod)
func_34_call = mutated_mod.get_global_var('func_34')
var_36 = relay.var("var_36", dtype = "float64", shape = (11, 15, 13))#candidate|36|(11, 15, 13)|var|float64
var_37 = relay.var("var_37", dtype = "uint16", shape = (11, 15, 13))#candidate|37|(11, 15, 13)|var|uint16
call_35 = func_34_call(var_36,var_37,)
output = call_35
func_38 = relay.Function([var_36,var_37,], output)
mutated_mod['func_38'] = func_38
mutated_mod = relay.transform.InferType()(mutated_mod)
var_62 = relay.var("var_62", dtype = "int8", shape = (4,))#candidate|62|(4,)|var|int8
var_63 = relay.var("var_63", dtype = "int8", shape = (4,))#candidate|63|(4,)|var|int8
bop_64 = relay.greater_equal(var_62.astype('bool'), relay.reshape(var_63.astype('bool'), relay.shape_of(var_62))) # shape=(4,)
uop_69 = relay.erf(bop_64.astype('float64')) # shape=(4,)
uop_73 = relay.exp(uop_69.astype('float32')) # shape=(4,)
func_34_call = mod.get_global_var('func_34')
func_38_call = mutated_mod.get_global_var('func_38')
var_76 = relay.var("var_76", dtype = "float64", shape = (2145,))#candidate|76|(2145,)|var|float64
call_75 = relay.TupleGetItem(func_34_call(relay.reshape(var_76.astype('float64'), [11, 15, 13]), relay.reshape(var_76.astype('uint16'), [11, 15, 13]), ), 0)
call_77 = relay.TupleGetItem(func_38_call(relay.reshape(var_76.astype('float64'), [11, 15, 13]), relay.reshape(var_76.astype('uint16'), [11, 15, 13]), ), 0)
uop_78 = relay.asinh(uop_69.astype('float64')) # shape=(4,)
output = relay.Tuple([uop_73,call_75,var_76,uop_78,])
output2 = relay.Tuple([uop_73,call_77,var_76,uop_78,])
func_80 = relay.Function([var_62,var_63,var_76,], output)
mod['func_80'] = func_80
mod = relay.transform.InferType()(mod)
var_81 = relay.var("var_81", dtype = "int8", shape = (4,))#candidate|81|(4,)|var|int8
var_82 = relay.var("var_82", dtype = "int8", shape = (4,))#candidate|82|(4,)|var|int8
var_83 = relay.var("var_83", dtype = "float64", shape = (2145,))#candidate|83|(2145,)|var|float64
output = func_80(var_81,var_82,var_83,)
func_84 = relay.Function([var_81,var_82,var_83,], output)
mutated_mod['func_84'] = func_84
mutated_mod = relay.transform.InferType()(mutated_mod)
var_88 = relay.var("var_88", dtype = "uint32", shape = ())#candidate|88|()|var|uint32
const_89 = relay.const([[4,4,5],[-6,-9,6],[-1,9,-9],[-10,-6,-3],[-1,6,-6],[2,5,6],[3,4,2],[7,-10,3],[-9,-2,6],[-6,8,1],[-4,-4,8],[8,3,5],[-3,1,1]], dtype = "uint32")#candidate|89|(13, 3)|const|uint32
bop_90 = relay.logical_xor(var_88.astype('uint32'), const_89.astype('uint32')) # shape=(13, 3)
bop_94 = relay.maximum(bop_90.astype('int64'), relay.reshape(const_89.astype('int64'), relay.shape_of(bop_90))) # shape=(13, 3)
bop_102 = relay.equal(const_89.astype('bool'), relay.reshape(bop_90.astype('bool'), relay.shape_of(const_89))) # shape=(13, 3)
bop_108 = relay.divide(bop_102.astype('float64'), relay.reshape(bop_90.astype('float64'), relay.shape_of(bop_102))) # shape=(13, 3)
output = relay.Tuple([bop_94,bop_108,])
output2 = relay.Tuple([bop_94,bop_108,])
func_111 = relay.Function([var_88,], output)
mod['func_111'] = func_111
mod = relay.transform.InferType()(mod)
mutated_mod['func_111'] = func_111
mutated_mod = relay.transform.InferType()(mutated_mod)
var_112 = relay.var("var_112", dtype = "uint32", shape = ())#candidate|112|()|var|uint32
func_111_call = mutated_mod.get_global_var('func_111')
call_113 = func_111_call(var_112)
output = call_113
func_114 = relay.Function([var_112], output)
mutated_mod['func_114'] = func_114
mutated_mod = relay.transform.InferType()(mutated_mod)
var_131 = relay.var("var_131", dtype = "int8", shape = (11, 6, 1))#candidate|131|(11, 6, 1)|var|int8
var_132 = relay.var("var_132", dtype = "int8", shape = (11, 6, 8))#candidate|132|(11, 6, 8)|var|int8
bop_133 = relay.greater_equal(var_131.astype('bool'), var_132.astype('bool')) # shape=(11, 6, 8)
bop_136 = relay.left_shift(var_132.astype('uint8'), relay.reshape(bop_133.astype('uint8'), relay.shape_of(var_132))) # shape=(11, 6, 8)
output = relay.Tuple([bop_136,])
output2 = relay.Tuple([bop_136,])
func_139 = relay.Function([var_131,var_132,], output)
mod['func_139'] = func_139
mod = relay.transform.InferType()(mod)
mutated_mod['func_139'] = func_139
mutated_mod = relay.transform.InferType()(mutated_mod)
func_139_call = mutated_mod.get_global_var('func_139')
var_141 = relay.var("var_141", dtype = "int8", shape = (11, 6, 1))#candidate|141|(11, 6, 1)|var|int8
var_142 = relay.var("var_142", dtype = "int8", shape = (11, 6, 8))#candidate|142|(11, 6, 8)|var|int8
call_140 = func_139_call(var_141,var_142,)
output = call_140
func_143 = relay.Function([var_141,var_142,], output)
mutated_mod['func_143'] = func_143
mutated_mod = relay.transform.InferType()(mutated_mod)
var_184 = relay.var("var_184", dtype = "bool", shape = (6, 13, 2))#candidate|184|(6, 13, 2)|var|bool
const_185 = relay.const([[[False,False],[False,True],[False,False],[False,True],[True,False],[False,False],[False,False],[False,False],[False,False],[True,False],[True,False],[True,False],[True,False]],[[True,True],[False,True],[False,False],[True,False],[False,False],[True,False],[True,False],[False,False],[False,True],[False,True],[True,False],[True,False],[False,False]],[[True,True],[False,False],[False,False],[False,False],[True,False],[False,False],[False,False],[False,True],[False,False],[True,True],[False,False],[False,False],[True,True]],[[False,False],[False,False],[True,True],[False,True],[True,False],[True,True],[False,False],[True,False],[True,False],[True,True],[True,True],[True,True],[False,True]],[[True,False],[True,False],[False,True],[False,False],[False,True],[True,False],[True,False],[False,False],[False,False],[True,True],[False,False],[True,True],[True,True]],[[True,True],[False,True],[False,True],[False,False],[True,False],[True,True],[False,True],[True,True],[True,False],[True,True],[False,True],[True,True],[True,False]]], dtype = "bool")#candidate|185|(6, 13, 2)|const|bool
bop_186 = relay.logical_and(var_184.astype('bool'), relay.reshape(const_185.astype('bool'), relay.shape_of(var_184))) # shape=(6, 13, 2)
uop_192 = relay.atanh(bop_186.astype('float32')) # shape=(6, 13, 2)
func_139_call = mod.get_global_var('func_139')
func_143_call = mutated_mod.get_global_var('func_143')
const_195 = relay.const([5,9,4,-10,2,8,9,-7,10,8,-9,6,-6,4,-4,3,8,3,-1,5,-1,5,4,10,-3,10,1,-9,-3,-6,9,8,-3,-1,6,-10,-10,-6,-6,-10,5,10,-8,-7,-1,9,4,9,-8,4,6,-8,-8,5,-3,2,7,-5,10,-7,5,-4,3,6,4,3], dtype = "int8")#candidate|195|(66,)|const|int8
const_196 = relay.const([-8,-8,-4,8,-10,-7,-3,7,9,7,-2,-7,-2,-10,2,-8,4,-3,-8,2,9,3,6,3,-3,-9,1,-3,6,9,5,-8,5,7,6,1,1,-7,-5,2,-1,1,8,8,-7,4,4,3,5,3,1,7,8,-9,-6,-9,4,2,5,-8,5,-6,-3,-8,-1,10,-3,-4,-2,-5,5,-7,5,-3,-9,5,-2,-3,-2,-3,-10,-6,1,7,4,4,-6,-10,-2,5,3,-3,3,-10,-7,-9,-6,-3,7,-10,3,-10,-7,-2,-3,-8,7,1,-1,6,-2,8,-9,4,-2,5,-10,-4,5,-6,5,5,9,-3,-7,-8,-3,8,7,8,-8,-5,-9,-5,-7,3,7,5,5,6,-6,-2,1,10,6,9,10,2,3,2,-8,-3,4,-1,-5,-1,-9,1,-7,-10,-7,-4,-3,4,4,5,4,5,7,5,2,4,-10,-3,-3,7,2,-7,-8,10,-1,-3,4,-3,5,2,3,-9,2,-10,-3,-7,8,9,-8,-9,-3,-4,-10,7,-4,-1,6,1,-9,4,-8,10,-6,-4,-7,3,-3,6,-5,-9,1,-9,-9,6,-1,-4,9,7,-1,10,-3,-8,2,-10,-7,8,-10,-7,-7,-8,1,-9,4,-10,6,4,2,6,6,-3,-6,2,-9,-4,4,-7,4,9,-2,2,6,-7,-8,4,-10,10,9,-3,-3,-5,9,-1,-7,-10,9,9,9,-6,1,-4,1,9,6,-8,-9,7,6,10,10,4,-3,5,-1,1,-2,-4,-9,-3,-7,5,8,3,-9,7,4,-7,4,-10,-2,8,-4,-9,9,7,4,1,1,4,-8,9,4,-10,-7,-5,1,-5,6,-9,5,-1,7,1,-8,10,-7,10,3,2,-10,1,8,6,9,1,1,-2,-5,-8,9,-7,-5,10,6,-9,6,-10,7,2,-1,-9,6,1,-6,2,-5,4,7,9,5,-4,10,-5,7,-5,10,-1,7,8,8,-1,-1,4,-10,-3,-3,-3,-8,1,8,4,-10,-6,4,2,-6,-7,-1,-4,4,-3,-4,-1,7,-8,10,6,-8,8,-8,5,7,-10,-3,-7,-2,3,7,8,7,-10,9,-6,-8,-10,7,10,-7,10,3,-6,-8,-10,-2,10,4,6,-5,10,-7,2,6,-7,2,-3,-7,-9,8,1,-8,9,2,-7,6,-2,8,6,-6,8,-2,-3,10,3,3,-5,-4,7,10,3,-1,-8,1,-6,-10,-4,-5,-9,-3,2,6,-1,4,8,-9,-7,-8,-3,2,5,-2,-4,10,-2,8,10,-3,-8,-6,8,-7,-10,-3,-3,2,7,-9,-1,-6,1,-8,10,10,6,-4,5,-1,-6,8,9,5,4,-9,-2,-1,-1,-2,10,-10,-1,-3,6,1,-6], dtype = "int8")#candidate|196|(528,)|const|int8
call_194 = relay.TupleGetItem(func_139_call(relay.reshape(const_195.astype('int8'), [11, 6, 1]), relay.reshape(const_196.astype('int8'), [11, 6, 8]), ), 0)
call_197 = relay.TupleGetItem(func_143_call(relay.reshape(const_195.astype('int8'), [11, 6, 1]), relay.reshape(const_196.astype('int8'), [11, 6, 8]), ), 0)
func_34_call = mod.get_global_var('func_34')
func_38_call = mutated_mod.get_global_var('func_38')
var_199 = relay.var("var_199", dtype = "float64", shape = (2145,))#candidate|199|(2145,)|var|float64
call_198 = relay.TupleGetItem(func_34_call(relay.reshape(var_199.astype('float64'), [11, 15, 13]), relay.reshape(var_199.astype('uint16'), [11, 15, 13]), ), 0)
call_200 = relay.TupleGetItem(func_38_call(relay.reshape(var_199.astype('float64'), [11, 15, 13]), relay.reshape(var_199.astype('uint16'), [11, 15, 13]), ), 0)
func_111_call = mod.get_global_var('func_111')
func_114_call = mutated_mod.get_global_var('func_114')
const_204 = relay.const(1, dtype = "uint32")#candidate|204|()|const|uint32
call_203 = relay.TupleGetItem(func_111_call(relay.reshape(const_204.astype('uint32'), [])), 0)
call_205 = relay.TupleGetItem(func_114_call(relay.reshape(const_204.astype('uint32'), [])), 0)
var_206 = relay.var("var_206", dtype = "float32", shape = (6, 13, 2))#candidate|206|(6, 13, 2)|var|float32
bop_207 = relay.logical_xor(uop_192.astype('int32'), relay.reshape(var_206.astype('int32'), relay.shape_of(uop_192))) # shape=(6, 13, 2)
var_211 = relay.var("var_211", dtype = "int32", shape = (6, 13, 2))#candidate|211|(6, 13, 2)|var|int32
bop_212 = relay.left_shift(bop_207.astype('int32'), relay.reshape(var_211.astype('int32'), relay.shape_of(bop_207))) # shape=(6, 13, 2)
const_215 = relay.const([[[True,True],[False,True],[False,True],[False,False],[False,False],[False,True],[True,False],[True,True],[False,False],[False,False],[False,False],[True,False],[True,True]],[[True,False],[True,True],[False,False],[False,False],[False,False],[True,False],[True,False],[False,True],[True,True],[True,False],[False,True],[False,True],[True,False]],[[True,False],[False,False],[True,True],[True,True],[False,True],[True,True],[False,True],[True,True],[True,False],[True,True],[True,False],[True,True],[False,True]],[[False,False],[False,False],[False,False],[False,False],[False,False],[False,True],[True,False],[True,False],[True,True],[False,True],[False,True],[True,False],[True,True]],[[False,False],[False,True],[True,False],[True,False],[False,False],[False,True],[False,False],[True,False],[False,False],[True,True],[False,False],[False,False],[True,False]],[[False,True],[False,True],[False,True],[True,False],[False,False],[False,True],[False,True],[True,False],[False,False],[True,True],[False,True],[True,True],[False,True]]], dtype = "bool")#candidate|215|(6, 13, 2)|const|bool
bop_216 = relay.less(bop_186.astype('bool'), relay.reshape(const_215.astype('bool'), relay.shape_of(bop_186))) # shape=(6, 13, 2)
uop_219 = relay.log10(bop_212.astype('float64')) # shape=(6, 13, 2)
output = relay.Tuple([call_194,const_195,const_196,call_198,var_199,call_203,const_204,bop_216,uop_219,])
output2 = relay.Tuple([call_197,const_195,const_196,call_200,var_199,call_205,const_204,bop_216,uop_219,])
func_222 = relay.Function([var_184,var_199,var_206,var_211,], output)
mod['func_222'] = func_222
mod = relay.transform.InferType()(mod)
mutated_mod['func_222'] = func_222
mutated_mod = relay.transform.InferType()(mutated_mod)
func_222_call = mutated_mod.get_global_var('func_222')
var_224 = relay.var("var_224", dtype = "bool", shape = (6, 13, 2))#candidate|224|(6, 13, 2)|var|bool
var_225 = relay.var("var_225", dtype = "float64", shape = (2145,))#candidate|225|(2145,)|var|float64
var_226 = relay.var("var_226", dtype = "float32", shape = (6, 13, 2))#candidate|226|(6, 13, 2)|var|float32
var_227 = relay.var("var_227", dtype = "int32", shape = (6, 13, 2))#candidate|227|(6, 13, 2)|var|int32
call_223 = func_222_call(var_224,var_225,var_226,var_227,)
output = call_223
func_228 = relay.Function([var_224,var_225,var_226,var_227,], output)
mutated_mod['func_228'] = func_228
mutated_mod = relay.transform.InferType()(mutated_mod)
var_241 = relay.var("var_241", dtype = "float32", shape = (5, 16))#candidate|241|(5, 16)|var|float32
var_242 = relay.var("var_242", dtype = "float32", shape = (5, 16))#candidate|242|(5, 16)|var|float32
bop_243 = relay.maximum(var_241.astype('float32'), relay.reshape(var_242.astype('float32'), relay.shape_of(var_241))) # shape=(5, 16)
bop_252 = relay.bitwise_and(bop_243.astype('int64'), relay.reshape(var_242.astype('int64'), relay.shape_of(bop_243))) # shape=(5, 16)
bop_255 = relay.subtract(var_242.astype('int16'), relay.reshape(bop_243.astype('int16'), relay.shape_of(var_242))) # shape=(5, 16)
bop_263 = relay.bitwise_xor(bop_243.astype('uint16'), relay.reshape(bop_255.astype('uint16'), relay.shape_of(bop_243))) # shape=(5, 16)
uop_268 = relay.erf(bop_243.astype('float32')) # shape=(5, 16)
uop_270 = relay.acosh(bop_263.astype('float64')) # shape=(5, 16)
output = relay.Tuple([bop_252,uop_268,uop_270,])
output2 = relay.Tuple([bop_252,uop_268,uop_270,])
func_272 = relay.Function([var_241,var_242,], output)
mod['func_272'] = func_272
mod = relay.transform.InferType()(mod)
mutated_mod['func_272'] = func_272
mutated_mod = relay.transform.InferType()(mutated_mod)
func_272_call = mutated_mod.get_global_var('func_272')
var_274 = relay.var("var_274", dtype = "float32", shape = (5, 16))#candidate|274|(5, 16)|var|float32
var_275 = relay.var("var_275", dtype = "float32", shape = (5, 16))#candidate|275|(5, 16)|var|float32
call_273 = func_272_call(var_274,var_275,)
output = call_273
func_276 = relay.Function([var_274,var_275,], output)
mutated_mod['func_276'] = func_276
mutated_mod = relay.transform.InferType()(mutated_mod)
var_281 = relay.var("var_281", dtype = "float64", shape = ())#candidate|281|()|var|float64
var_282 = relay.var("var_282", dtype = "float64", shape = (7, 11, 15))#candidate|282|(7, 11, 15)|var|float64
bop_283 = relay.multiply(var_281.astype('float64'), var_282.astype('float64')) # shape=(7, 11, 15)
bop_289 = relay.less_equal(var_281.astype('bool'), bop_283.astype('bool')) # shape=(7, 11, 15)
uop_295 = relay.sin(bop_283.astype('float64')) # shape=(7, 11, 15)
func_111_call = mod.get_global_var('func_111')
func_114_call = mutated_mod.get_global_var('func_114')
call_297 = relay.TupleGetItem(func_111_call(relay.reshape(var_281.astype('uint32'), [])), 1)
call_298 = relay.TupleGetItem(func_114_call(relay.reshape(var_281.astype('uint32'), [])), 1)
uop_299 = relay.asin(uop_295.astype('float64')) # shape=(7, 11, 15)
func_139_call = mod.get_global_var('func_139')
func_143_call = mutated_mod.get_global_var('func_143')
const_302 = relay.const([-10,-5,10,-6,-2,-5,-10,-4,6,8,1,1,-2,2,1,9,6,8,9,6,8,2,-8,10,4,-8,-4,10,-7,-9,8,10,1,9,3,-5,7,-8,4,10,5,-4,9,8,-8,6,4,-1,-5,7,8,-8,9,-9,-3,-2,1,9,2,7,4,-8,-1,-3,3,-2], dtype = "int8")#candidate|302|(66,)|const|int8
var_303 = relay.var("var_303", dtype = "int8", shape = (528,))#candidate|303|(528,)|var|int8
call_301 = relay.TupleGetItem(func_139_call(relay.reshape(const_302.astype('int8'), [11, 6, 1]), relay.reshape(var_303.astype('int8'), [11, 6, 8]), ), 0)
call_304 = relay.TupleGetItem(func_143_call(relay.reshape(const_302.astype('int8'), [11, 6, 1]), relay.reshape(var_303.astype('int8'), [11, 6, 8]), ), 0)
bop_305 = relay.floor_divide(uop_295.astype('float32'), var_281.astype('float32')) # shape=(7, 11, 15)
bop_309 = relay.bitwise_and(uop_299.astype('int8'), relay.reshape(bop_289.astype('int8'), relay.shape_of(uop_299))) # shape=(7, 11, 15)
uop_312 = relay.atanh(uop_299.astype('float32')) # shape=(7, 11, 15)
bop_315 = relay.minimum(uop_312.astype('int8'), relay.reshape(bop_289.astype('int8'), relay.shape_of(uop_312))) # shape=(7, 11, 15)
func_111_call = mod.get_global_var('func_111')
func_114_call = mutated_mod.get_global_var('func_114')
call_318 = relay.TupleGetItem(func_111_call(relay.reshape(var_281.astype('uint32'), [])), 0)
call_319 = relay.TupleGetItem(func_114_call(relay.reshape(var_281.astype('uint32'), [])), 0)
uop_320 = relay.log(uop_312.astype('float64')) # shape=(7, 11, 15)
bop_322 = relay.divide(uop_312.astype('float64'), relay.reshape(var_282.astype('float64'), relay.shape_of(uop_312))) # shape=(7, 11, 15)
const_325 = relay.const([[[-4.616863,5.375196,6.708709,-6.351972,4.805926,0.899704,-9.449295,-3.450960,-9.610074,-9.968114,-3.542200,-4.843484,-7.382867,-1.084184,-2.415300],[-5.009084,7.748826,4.427610,9.175406,9.880435,-6.971618,9.062280,-4.485171,-7.116550,9.829284,-4.228393,-8.558245,6.378966,-8.731553,4.937418],[9.506129,5.863318,2.830990,3.609343,-1.860076,6.506403,5.967691,9.877329,7.385483,-6.463377,-8.910350,-5.748742,7.773809,8.549748,-0.211546],[7.606482,-2.407520,-6.586199,8.075397,0.079741,-1.265032,4.783644,8.825626,2.364280,-3.265220,-0.056117,-5.437826,6.483857,-0.308151,3.828618],[4.799298,-7.587876,8.988532,4.365885,-8.314938,-7.677716,-0.103392,-1.642672,-4.682534,-7.946058,1.479978,6.942895,9.222271,4.117688,5.207709],[-2.828085,8.881285,3.458410,0.559656,-0.974665,2.815371,-7.897799,-3.976084,8.146289,-9.101272,8.717084,-0.078494,-4.583765,5.760234,5.787871],[-6.310846,-4.675153,-8.286696,1.106485,-9.480564,2.589370,-6.594092,8.287883,-6.719183,-6.538347,-3.496674,-3.538288,-7.284217,0.812091,6.175993],[9.928326,-7.240749,8.032503,6.407160,0.442046,-6.872449,3.307004,-0.530923,2.527330,6.449994,-5.899069,7.933762,0.491264,4.071367,-1.837278],[9.256995,-1.469485,5.062314,6.035110,-1.911253,-8.525987,2.615810,-4.798537,2.493189,2.084147,5.611453,-2.214699,-1.854426,-2.872953,-9.802862],[-8.722672,-2.569963,-0.232627,1.253926,-2.758588,-8.947551,-5.343023,-2.634661,5.801019,5.636744,6.530865,-5.860314,8.347064,7.562041,-1.436410],[-5.100663,1.940763,-6.265740,-5.152648,4.342632,0.327797,-1.264749,-7.712430,-5.833672,-7.604258,-7.972704,-7.338076,3.907490,4.312535,-0.705867]],[[2.480156,8.218864,9.819571,-8.585946,2.564422,5.048301,5.717464,-1.138424,-7.050727,8.429859,-6.143494,-5.892084,0.484190,5.865644,-6.598448],[-2.212120,-5.121214,2.268923,9.633492,-7.369064,3.091694,-4.216258,0.389455,-1.971430,3.438197,-7.358456,1.068184,8.374189,-7.495179,-2.029242],[-3.705362,-7.928240,-8.497890,-0.857911,4.047588,-4.390495,-9.496727,0.175813,8.982794,-3.146111,-8.226312,0.582043,4.292158,-4.052074,6.325521],[8.443598,7.899902,-2.860049,4.511731,-7.814710,6.894268,6.873133,7.690169,9.806519,1.668494,5.696334,-0.334343,0.112634,3.452924,-4.945382],[-9.047503,-6.943143,2.864427,9.236935,-7.435314,-3.529636,-0.560444,8.300189,-2.222790,7.562191,-9.078965,1.497358,7.577832,2.171247,-1.067218],[0.327999,1.703013,5.083102,-2.774258,9.434867,-4.603820,6.560160,5.958792,-9.173848,0.644525,6.145658,-4.342108,6.093127,-9.448349,7.379577],[-0.360347,6.270337,-6.845907,-9.256801,-7.288941,8.177564,5.035202,2.524364,-5.715088,8.003111,2.228400,5.455219,9.936652,2.260712,5.150808],[1.738833,1.861267,4.821516,9.925544,9.463933,9.136990,-8.061408,3.371503,-5.953498,4.300149,8.675127,-2.044551,-5.793629,4.197170,5.270788],[-5.858308,-0.137236,-3.116169,-1.783553,-9.327067,5.982383,-6.029991,-0.581409,1.395191,8.449957,-5.219207,-0.325323,-5.392362,9.724484,-8.759149],[-8.518706,7.171092,2.843082,6.284621,5.253006,4.471531,4.948677,-1.484349,9.824272,-9.346664,-2.724045,2.302820,-4.866170,6.065714,-7.118141],[-5.680934,7.764276,1.438323,4.948259,-3.052658,-1.024457,9.334251,1.990980,-5.835092,-0.659813,-8.648793,0.974795,5.944067,3.140824,4.073882]],[[-6.982585,-0.831927,9.817493,-1.633872,-0.250655,7.168464,-8.058926,5.892367,-5.467518,-7.035897,-9.086962,2.028319,5.948923,8.267504,-0.938172],[-3.149919,7.135729,-6.214252,-3.872327,8.734484,3.890333,-7.296556,-0.966278,2.585908,2.116804,3.450071,-0.272417,0.280658,6.892414,-7.933284],[-1.925119,-3.602840,-6.629599,-9.955991,-4.697884,1.452756,0.197012,7.365211,9.199097,-1.911270,3.840258,3.077073,5.350930,6.045344,1.863053],[-0.632147,-0.952503,4.907726,3.701791,8.529237,-7.287040,5.817242,-4.550062,6.312920,6.251563,-9.860297,0.517718,7.738329,6.208168,6.366766],[-7.227237,-0.564678,-9.320332,1.787452,6.132785,7.287942,-7.644809,0.517380,-0.585387,-1.742073,4.412978,-5.358735,-7.497994,3.536770,-1.287465],[8.299898,-1.539750,0.025645,9.842773,-0.501673,6.283337,-9.284215,-4.182021,6.240199,-1.619502,-4.051451,-1.175043,-1.345567,-0.160749,-4.090215],[-4.677671,-6.178879,0.341954,-2.698782,-3.704974,-8.889514,-1.306815,7.979493,-2.266159,1.232912,6.979085,-6.452444,-9.047297,-8.920796,-9.535485],[1.807871,-6.706488,9.825469,1.577012,0.416687,-3.922310,-9.275813,-7.612086,5.570687,-8.658964,-2.888838,6.188412,0.567628,1.690796,-4.024232],[2.285020,7.043857,9.150612,1.754845,-2.284113,8.595628,-5.545407,9.664353,1.956292,-8.866812,-0.668817,4.142162,7.182158,8.529737,2.923254],[3.057408,-7.409361,-7.027207,0.995010,-6.632306,-5.094993,1.343793,1.619594,-4.012240,4.328446,-6.742117,5.147391,7.656374,5.244986,6.977313],[9.975932,9.179506,4.044156,4.211346,1.282801,-2.617340,5.614989,9.584379,8.122243,-3.522630,-1.799674,-7.108798,-6.909124,-0.116192,-2.407743]],[[-1.257129,-4.295628,5.447877,-9.759155,0.965445,2.798721,5.348505,5.231709,8.095213,-7.308474,3.417920,0.099543,-3.703908,-9.552291,4.822359],[9.953542,-0.950231,3.094469,8.246608,-1.998406,4.761925,8.024066,2.228757,9.269679,0.945513,-7.432631,-4.991436,-2.636943,4.284530,-6.399951],[8.862212,7.251518,5.222154,-5.593418,-3.847230,9.999337,-3.888145,-1.905648,8.204572,-9.677697,-3.509127,-8.469558,-2.283173,5.915146,5.943311],[-4.822763,5.726008,-6.988402,-5.299463,-8.917609,6.134148,7.436347,-4.532559,9.789332,0.879311,-9.608052,-0.354321,8.091430,0.515254,2.098649],[-1.131795,2.228414,4.498793,-2.466983,-1.087594,-7.547393,9.269453,6.354788,2.767499,7.165517,9.300357,-2.918838,-5.781866,-0.334626,3.592535],[-9.632423,-0.212654,8.094266,7.457406,4.092398,-0.540584,-0.874918,3.482339,8.950414,-0.393603,-7.790720,-6.723422,-9.280971,-4.205223,-0.557442],[-4.447727,1.375276,7.839118,-2.018669,-8.350460,-4.415458,3.339976,-5.627640,1.102361,0.454918,1.744006,6.862498,8.221564,-1.302549,-8.895973],[9.477925,-8.695743,9.955524,0.445897,-2.080130,-3.043447,0.250920,2.096512,-1.067175,0.956678,4.322197,4.669353,2.857997,-3.139959,-8.603993],[-3.706500,8.878743,-2.988625,-7.436797,-3.677009,-8.657282,-6.512134,-3.547864,4.368974,-4.286517,-4.761903,9.684184,-5.886075,-8.291149,6.945206],[9.500124,-5.207820,-6.164393,-3.215257,4.824939,4.716080,6.278588,4.200610,-2.729697,-7.712180,4.561015,-9.775900,4.110934,8.581367,5.691769],[-5.424598,1.279307,7.549058,-4.449228,-4.618663,-2.412072,1.012187,9.345590,2.441251,6.979771,-6.761715,-6.542127,-5.491230,4.866441,-6.122441]],[[-9.727968,-8.355317,8.060182,3.644229,4.205862,8.425055,4.262002,9.618615,0.025298,-1.901205,-1.480998,-6.512447,9.250604,-8.558284,-0.618164],[9.126770,-2.817018,-5.580269,5.560947,1.044985,-4.128655,-8.623245,1.625907,-8.213543,-5.892766,5.998905,-1.972850,-6.271214,-3.605680,-9.936369],[6.570491,5.809186,7.505925,9.331115,1.890586,7.062857,-1.968525,-2.292932,1.195139,-5.858477,4.577029,1.577835,1.230546,-5.936282,-3.931817],[0.822223,-4.167629,7.931113,-2.270422,0.722477,7.233084,3.721540,-2.362803,0.534935,9.650035,-8.729155,-7.240201,-7.217275,2.180155,7.662260],[9.689002,1.721197,-4.497802,-1.842199,6.714521,-7.048471,-6.359050,-8.340024,9.126522,4.053276,-6.078590,-0.869344,4.537964,-4.120466,3.901413],[-0.834613,-3.835429,-9.904555,4.726601,-6.029413,-7.600208,1.599212,-3.279210,-8.017617,-7.722262,-0.512650,9.682885,4.153604,4.048400,1.111845],[1.768918,-3.264788,4.204919,-8.007330,5.528619,8.549465,-8.642156,-7.377781,6.726279,-5.877919,-0.487829,-5.130354,8.629161,-4.631520,7.208057],[1.680669,-1.112667,2.682398,7.292231,-8.592251,-6.523914,-3.212328,-3.215715,1.902161,9.399189,3.992551,7.876258,1.514420,1.873783,6.043347],[2.284419,-7.219638,-0.189429,5.193163,3.204004,-8.063239,-4.954469,-2.914740,-0.623641,-7.249394,-2.663318,8.608884,8.481244,-6.733412,9.654404],[1.263823,8.092700,-7.518025,3.698764,5.946914,9.134393,-1.494843,-5.616872,-1.670098,6.244729,3.910378,9.177969,0.756234,5.932426,6.387620],[2.205857,-7.279553,-3.896468,7.955855,-5.822857,2.124521,-1.037606,3.465486,-5.580984,6.875802,-1.459448,3.075723,-7.240330,-6.808677,5.129779]],[[-1.322166,9.148559,9.532019,4.764540,4.566013,2.076197,5.394561,3.886747,-5.905544,-8.085770,7.065011,-0.265172,-2.945389,3.833715,6.912493],[9.972421,0.187349,-1.769643,-5.233382,6.992238,0.463939,-3.764425,5.123175,-9.326083,-0.016252,1.182222,7.943713,-8.816161,-7.107144,8.224696],[-2.139959,5.234786,5.002061,-1.428572,2.993321,7.160023,-4.307459,8.847964,5.171726,-8.366676,7.650463,3.931044,2.812173,-1.760166,9.543905],[7.557534,-4.243170,-1.984678,-9.138521,-8.204865,-9.238970,0.589583,2.176990,-5.674225,-5.886622,-1.764234,3.215465,-2.875401,-4.550011,-5.352127],[-2.757748,8.671620,2.924287,-4.402705,8.921889,2.985400,5.823639,-9.647887,-3.290711,8.737762,3.764481,-5.204459,-8.094337,-9.739271,4.445924],[-5.803383,-4.382750,0.862997,2.169214,-1.323586,-6.377987,9.038150,-2.280493,-3.581926,-8.169056,2.945654,-7.388722,-7.219646,-3.494372,8.070971],[-4.590520,-7.630339,4.680124,-2.109372,9.934763,4.557629,-0.897339,4.216010,1.152759,6.249234,-4.730338,1.937636,-8.834000,7.833686,-2.071369],[6.227157,-7.579153,-2.771970,5.425129,5.798403,0.637365,-7.728846,3.417615,-7.022610,3.204761,-6.452515,-9.347983,-4.218407,-1.757287,0.857709],[-9.061740,7.831909,-0.166505,0.866406,-8.807928,0.549571,6.403329,7.582056,6.291548,5.299454,-0.890210,-0.338296,-4.960065,2.992622,-3.086705],[0.904643,7.491850,-0.302187,-5.152694,0.196573,-9.170251,-1.782387,-9.006479,-5.636528,8.475453,1.138969,7.202597,-0.334778,-7.193141,-1.035373],[3.302399,-1.665550,-9.868470,-3.269349,-3.386163,7.994322,-7.534306,-5.888431,-6.913034,4.285778,8.426235,1.734865,-7.683495,-1.427443,4.044357]],[[-3.163522,-7.070986,-0.554230,2.405479,-8.540923,-6.550654,-3.988364,1.647269,-2.573886,5.886644,-4.943470,-1.487124,6.686828,1.608971,7.930439],[2.081860,2.211268,-6.614249,-7.244310,1.548478,6.075236,7.002260,-7.601976,0.466349,-5.710119,-4.422776,8.024616,-0.254862,-3.066917,-8.345543],[-2.726838,8.129208,9.750611,8.051590,6.292196,-0.758473,8.598418,-8.739789,3.669361,-2.477959,-0.781490,-0.145808,5.633732,-9.001497,-5.021602],[1.474773,-4.226499,3.666287,9.670254,-8.140392,8.307986,1.524813,-1.547961,-4.759476,3.485590,9.843029,-1.626275,7.901998,-6.401355,3.010535],[-5.200747,9.558703,1.034490,2.070954,-1.320234,1.054567,-4.073072,-3.387688,-4.995830,-6.833484,0.383496,2.547258,6.654529,9.507874,-5.299569],[2.477022,8.646150,-1.167541,0.720122,6.618827,7.387441,8.180798,-1.469802,-4.936422,-2.534033,-6.864536,-2.691997,5.971357,4.027804,2.978683],[8.866508,-1.146167,1.695724,4.346943,-8.755012,-5.985879,9.128208,-8.190627,0.071894,-7.152561,0.508595,7.567947,-1.619430,-3.554069,5.387210],[-9.811003,-8.368270,-0.258474,1.581844,-8.114432,-9.706369,7.788738,-9.507076,3.637320,-9.323760,0.581414,8.936675,6.337236,-3.694640,6.985201],[8.109259,-2.816928,-1.131768,8.844984,1.758617,-7.496590,3.367771,7.356288,9.471038,2.848255,5.320818,9.082586,-4.771074,-3.962409,-5.239318],[-8.772236,3.352700,0.834186,3.520055,1.763152,-9.608527,0.879672,2.217729,1.923737,2.902526,-2.389927,-1.802656,9.857376,-3.113064,9.357186],[7.296182,-6.893395,-3.535210,8.026206,8.364686,-8.409588,-0.644198,2.864495,6.801348,-0.537195,6.850960,8.407922,-1.920652,-9.249949,-7.758256]]], dtype = "float64")#candidate|325|(7, 11, 15)|const|float64
bop_326 = relay.equal(uop_320.astype('bool'), relay.reshape(const_325.astype('bool'), relay.shape_of(uop_320))) # shape=(7, 11, 15)
var_329 = relay.var("var_329", dtype = "int8", shape = (7, 11, 15))#candidate|329|(7, 11, 15)|var|int8
bop_330 = relay.floor_mod(bop_315.astype('float64'), relay.reshape(var_329.astype('float64'), relay.shape_of(bop_315))) # shape=(7, 11, 15)
uop_335 = relay.asinh(bop_330.astype('float64')) # shape=(7, 11, 15)
output = relay.Tuple([call_297,call_301,const_302,var_303,bop_305,bop_309,call_318,bop_322,bop_326,uop_335,])
output2 = relay.Tuple([call_298,call_304,const_302,var_303,bop_305,bop_309,call_319,bop_322,bop_326,uop_335,])
func_337 = relay.Function([var_281,var_282,var_303,var_329,], output)
mod['func_337'] = func_337
mod = relay.transform.InferType()(mod)
var_338 = relay.var("var_338", dtype = "float64", shape = ())#candidate|338|()|var|float64
var_339 = relay.var("var_339", dtype = "float64", shape = (7, 11, 15))#candidate|339|(7, 11, 15)|var|float64
var_340 = relay.var("var_340", dtype = "int8", shape = (528,))#candidate|340|(528,)|var|int8
var_341 = relay.var("var_341", dtype = "int8", shape = (7, 11, 15))#candidate|341|(7, 11, 15)|var|int8
output = func_337(var_338,var_339,var_340,var_341,)
func_342 = relay.Function([var_338,var_339,var_340,var_341,], output)
mutated_mod['func_342'] = func_342
mutated_mod = relay.transform.InferType()(mutated_mod)
var_372 = relay.var("var_372", dtype = "uint32", shape = (11, 9))#candidate|372|(11, 9)|var|uint32
var_373 = relay.var("var_373", dtype = "uint32", shape = (11, 9))#candidate|373|(11, 9)|var|uint32
bop_374 = relay.equal(var_372.astype('bool'), relay.reshape(var_373.astype('bool'), relay.shape_of(var_372))) # shape=(11, 9)
uop_381 = relay.exp(var_373.astype('float64')) # shape=(11, 9)
bop_384 = relay.logical_and(uop_381.astype('bool'), relay.reshape(var_373.astype('bool'), relay.shape_of(uop_381))) # shape=(11, 9)
uop_388 = relay.cosh(uop_381.astype('float32')) # shape=(11, 9)
bop_390 = relay.greater_equal(uop_388.astype('bool'), relay.reshape(bop_374.astype('bool'), relay.shape_of(uop_388))) # shape=(11, 9)
bop_393 = relay.logical_and(uop_388.astype('bool'), relay.reshape(uop_381.astype('bool'), relay.shape_of(uop_388))) # shape=(11, 9)
var_396 = relay.var("var_396", dtype = "bool", shape = (11, 9))#candidate|396|(11, 9)|var|bool
bop_397 = relay.add(bop_384.astype('uint16'), relay.reshape(var_396.astype('uint16'), relay.shape_of(bop_384))) # shape=(11, 9)
func_272_call = mod.get_global_var('func_272')
func_276_call = mutated_mod.get_global_var('func_276')
var_401 = relay.var("var_401", dtype = "float32", shape = (2, 40))#candidate|401|(2, 40)|var|float32
call_400 = relay.TupleGetItem(func_272_call(relay.reshape(var_401.astype('float32'), [5, 16]), relay.reshape(var_401.astype('float32'), [5, 16]), ), 0)
call_402 = relay.TupleGetItem(func_276_call(relay.reshape(var_401.astype('float32'), [5, 16]), relay.reshape(var_401.astype('float32'), [5, 16]), ), 0)
bop_404 = relay.subtract(bop_390.astype('uint16'), relay.reshape(bop_393.astype('uint16'), relay.shape_of(bop_390))) # shape=(11, 9)
bop_408 = relay.floor_mod(bop_393.astype('float32'), relay.reshape(uop_388.astype('float32'), relay.shape_of(bop_393))) # shape=(11, 9)
output = relay.Tuple([bop_397,call_400,var_401,bop_404,bop_408,])
output2 = relay.Tuple([bop_397,call_402,var_401,bop_404,bop_408,])
func_415 = relay.Function([var_372,var_373,var_396,var_401,], output)
mod['func_415'] = func_415
mod = relay.transform.InferType()(mod)
mutated_mod['func_415'] = func_415
mutated_mod = relay.transform.InferType()(mutated_mod)
func_415_call = mutated_mod.get_global_var('func_415')
var_417 = relay.var("var_417", dtype = "uint32", shape = (11, 9))#candidate|417|(11, 9)|var|uint32
var_418 = relay.var("var_418", dtype = "uint32", shape = (11, 9))#candidate|418|(11, 9)|var|uint32
var_419 = relay.var("var_419", dtype = "bool", shape = (11, 9))#candidate|419|(11, 9)|var|bool
var_420 = relay.var("var_420", dtype = "float32", shape = (2, 40))#candidate|420|(2, 40)|var|float32
call_416 = func_415_call(var_417,var_418,var_419,var_420,)
output = call_416
func_421 = relay.Function([var_417,var_418,var_419,var_420,], output)
mutated_mod['func_421'] = func_421
mutated_mod = relay.transform.InferType()(mutated_mod)
const_446 = relay.const([1.429763,6.679742,8.037509,-9.636409], dtype = "float64")#candidate|446|(4,)|const|float64
const_447 = relay.const([-7.237202,6.043579,-1.825509,-4.009937], dtype = "float64")#candidate|447|(4,)|const|float64
bop_448 = relay.subtract(const_446.astype('float64'), relay.reshape(const_447.astype('float64'), relay.shape_of(const_446))) # shape=(4,)
var_451 = relay.var("var_451", dtype = "float64", shape = (4,))#candidate|451|(4,)|var|float64
bop_452 = relay.minimum(bop_448.astype('uint8'), relay.reshape(var_451.astype('uint8'), relay.shape_of(bop_448))) # shape=(4,)
func_337_call = mod.get_global_var('func_337')
func_342_call = mutated_mod.get_global_var('func_342')
var_456 = relay.var("var_456", dtype = "float64", shape = ())#candidate|456|()|var|float64
var_457 = relay.var("var_457", dtype = "float64", shape = (1155,))#candidate|457|(1155,)|var|float64
const_458 = relay.const([3,9,10,-3,-3,-3,-8,-4,3,-8,4,-9,9,4,-5,-9,-8,-10,-8,9,7,-10,6,-9,-2,4,-3,8,7,5,-9,-8,5,-5,-2,-4,-6,-3,10,3,-1,7,2,-7,-7,10,-9,3,8,-6,-2,-7,-5,-5,2,-5,7,-8,5,-9,-8,-10,-7,10,3,-4,-4,-5,1,2,-8,-8,-8,5,10,10,4,2,5,5,-7,2,1,-10,5,-6,10,-9,8,4,1,5,-3,5,10,5,10,-9,-5,3,-1,-7,3,-1,-2,-1,10,8,-7,-3,-4,4,-8,-5,2,-4,-9,5,-7,-4,-3,3,5,7,4,-8,-8,2,-5,-10,-7,1,-5,7,-5,10,10,-9,5,-6,6,9,4,2,10,-6,6,10,-4,-1,10,4,7,4,1,-2,3,3,-3,-7,-8,-10,8,6,-7,-10,-2,-6,8,-2,-1,8,-8,-1,9,-5,-1,-3,-3,3,-8,8,5,-1,-7,6,9,-9,-6,-9,-8,-3,-9,8,-5,-3,-1,-5,8,-3,-8,10,4,6,10,6,2,-7,-6,-3,5,6,-9,-6,6,10,8,-1,9,-2,-3,-9,8,5,8,-4,4,-10,-2,9,-6,2,-9,8,-10,-9,9,-9,-3,-10,10,5,-6,8,3,-6,6,-5,-10,-5,3,5,-3,10,7,-6,-4,3,-7,-9,-8,-9,4,-1,7,7,1,6,4,-9,-6,10,-5,-1,5,3,7,-10,-6,-7,9,6,4,6,-8,3,-10,-3,7,9,5,9,-6,5,10,-8,6,10,6,1,1,-7,6,-9,-5,7,2,4,-5,-1,-2,5,-1,-9,-3,2,-4,-6,-10,-3,3,6,6,-5,-10,-7,5,10,8,-4,2,2,4,6,3,8,-9,-1,-4,-5,3,7,-3,4,8,2,-4,8,2,-4,3,-1,8,-9,-8,-7,8,9,-2,-5,-2,4,9,4,4,-8,-9,1,-1,-10,-5,-2,-4,4,-7,-8,-4,-5,-2,8,-8,-5,3,6,6,-5,-6,4,1,6,7,-6,-4,-7,1,-4,-10,-8,7,-1,2,4,4,-8,7,4,5,6,3,10,7,-5,-5,3,8,6,9,-10,9,-1,-1,8,-5,7,-8,-3,1,5,10,-1,-2,-8,7,8,-7,2,-4,-4,-7,-8,-10,-1,7,-8,-1,-5,5,6,5,-10,10,8,2,-4,5,-3,5,5,-7,-10,1,1,-3,10,10,-8,-9,6,-10,-10,4,-9,5,-2,-6,-1,10,-5,-9,-10,-4,-9,5,-4,-8,10,-6,-3,-3,-3,9,-8,-8,-3,7,-7,-10,-3,4,1,-2,3,2,-10,1,3,-9,-1,1,5,-5,-8,9,-1,-9,-2,-5,-10,1,9,-7,-3,3,-5,-8,-2,-1,10], dtype = "int8")#candidate|458|(528,)|const|int8
call_455 = relay.TupleGetItem(func_337_call(relay.reshape(var_456.astype('float64'), []), relay.reshape(var_457.astype('float64'), [7, 11, 15]), relay.reshape(const_458.astype('int8'), [528,]), relay.reshape(var_457.astype('int8'), [7, 11, 15]), ), 2)
call_459 = relay.TupleGetItem(func_342_call(relay.reshape(var_456.astype('float64'), []), relay.reshape(var_457.astype('float64'), [7, 11, 15]), relay.reshape(const_458.astype('int8'), [528,]), relay.reshape(var_457.astype('int8'), [7, 11, 15]), ), 2)
bop_460 = relay.floor_mod(var_457.astype('float32'), var_456.astype('float32')) # shape=(1155,)
func_415_call = mod.get_global_var('func_415')
func_421_call = mutated_mod.get_global_var('func_421')
const_469 = relay.const([7,3,-1,10,2,-3,-6,-9,10,5,1,-3,-7,-3,-10,-3,2,-7,-9,-2,-4,-5,9,-5,-8,-9,8,3,-3,-4,-1,-1,5,9,-4,-4,-8,-9,5,-6,-8,-1,10,-2,2,-7,-5,7,6,-5,-7,-1,9,9,-3,6,-1,8,1,-6,7,8,-2,3,9,8,-8,10,-8,3,6,-5,-6,-2,-2,-2,10,5,4,-9,8,10,6,-3,-1,-8,-6,7,5,-1,-6,7,4,7,10,1,-3,3,-1], dtype = "uint32")#candidate|469|(99,)|const|uint32
const_470 = relay.const([-1.258203,-6.781832,-5.123162,-1.714138,-2.467931,-6.951119,-0.422643,-6.724548,8.547582,0.741563,7.732587,6.804987,6.948583,-4.111271,-3.291253,4.990179,1.617385,0.744447,-6.084468,0.612345,2.925477,-9.011181,-5.481742,3.269814,-9.479080,-1.895173,-6.266861,9.713225,-2.699123,-9.340674,5.349562,9.941803,4.376842,-7.196622,3.303213,5.356500,2.032711,-7.380047,-9.768356,3.049361,7.284922,8.933149,-2.326531,3.803438,-4.892272,5.288429,-6.930944,-5.461049,0.043805,0.647622,-3.427171,9.173117,-0.003651,-9.172536,2.257395,-7.309331,8.744094,3.295443,-6.548866,5.558862,-8.252553,9.192704,5.309607,3.155445,-1.412534,3.309019,9.514907,8.047679,6.106046,-5.943048,2.534015,5.369268,-3.682270,-2.444994,0.032338,-3.856589,-6.009759,-0.130950,9.023398,-4.564066], dtype = "float32")#candidate|470|(80,)|const|float32
call_468 = relay.TupleGetItem(func_415_call(relay.reshape(const_469.astype('uint32'), [11, 9]), relay.reshape(const_469.astype('uint32'), [11, 9]), relay.reshape(const_469.astype('bool'), [11, 9]), relay.reshape(const_470.astype('float32'), [2, 40]), ), 4)
call_471 = relay.TupleGetItem(func_421_call(relay.reshape(const_469.astype('uint32'), [11, 9]), relay.reshape(const_469.astype('uint32'), [11, 9]), relay.reshape(const_469.astype('bool'), [11, 9]), relay.reshape(const_470.astype('float32'), [2, 40]), ), 4)
const_479 = relay.const([4.704893,-9.008340,6.944722,0.321072,5.649315,-1.617697,1.186471,2.000008,2.200188,-9.917844,-9.314933,-5.647063,-4.761912,-6.215356,3.808681,3.795959,-9.977244,-2.547989,-2.096579,-5.934122,-7.050614,-4.918308,-7.007588,2.274543,0.091791,2.689934,6.306106,-4.554957,9.699360,-4.511458,-7.278677,5.612135,3.906854,-5.650211,9.331327,-1.783717,2.147216,-7.201686,-8.628583,9.945493,2.090516,9.585929,3.635659,-3.241162,-0.966110,5.327714,8.820183,2.218144,-4.355905,-5.213965,-6.526547,7.279294,2.373124,2.311429,-8.046674,0.858308,4.658261,-8.305863,-9.553346,-0.758299,3.103363,6.640548,-8.800492,-4.630376,0.625557,5.945340,8.787983,5.493442,-7.419033,-3.534990,-3.056167,-9.595007,-6.075770,-1.605353,0.270098,5.919123,-2.794229,8.473530,-5.771789,-5.959191,-2.537604,5.746429,-2.127013,-0.927638,-7.519373,7.394778,-1.352804,-8.127858,-6.165747,0.306996,9.831368,1.926679,-9.185420,9.106018,-4.790104,-3.761657,4.174901,-2.935505,-1.586357,-5.953076,8.599951,4.174685,0.067389,-6.815002,-8.128327,5.577855,-8.563669,-0.222287,-3.134290,6.474663,2.814154,6.796495,-3.940131,-2.991304,3.126988,3.894630,8.988633,-3.127045,-8.947999,-5.475188,6.652820,7.446478,-3.514479,-0.412692,3.914511,7.421721,8.533300,2.726501,-6.295651,-7.789853,-3.227009,-8.690317,7.826618,-7.428791,7.192830,-1.278169,-3.270009,1.986879,0.458062,0.746343,0.727475,8.449641,-4.643060,-0.126154,4.809973,-2.640131,-8.570393,9.518897,8.441740,-4.057126,-7.547440,1.573960,-3.894735,-1.998164,-9.492486,-4.572177,-8.587611,-3.239369,-0.178633,-2.559102,-6.139286,5.803103,1.210070,-4.301291,-6.534068,-5.402983,4.473704,0.903868,-8.817421,-3.419671,-4.419862,-4.213480,-8.224872,3.316079,-9.345029,-1.051036,-1.751966,1.139180,-9.165447,-7.944336,-1.180697,-6.131117,9.440524,8.333449,2.893906,-8.445041,-4.328860,-0.052391,-1.558142,4.455979,5.971144,5.963374,7.546349,-5.225430,-6.819003,-3.171081,5.498571,-1.308994,7.272469,-2.628327,4.506431,-7.371363,9.944687,8.300787,-1.932418,-1.883981,-0.051863,2.150358,3.895245,-7.099924,-4.813234,-5.386605,7.165509,-8.292631,5.077840,4.160096,-3.533941,-2.148113,-3.855153,3.969797,1.479641,2.922596,9.189009,0.208269,-9.600239,-1.155361,6.781192,-9.256096,8.043083,1.370601,0.609782,-3.653571,-9.558254,8.133764,-9.933021,7.512853,1.259065,5.915443,6.364782,5.788248,-9.661234,-8.636136,-4.965492,-6.998695,-1.643713,-1.360057,-1.381068,2.202682,-2.206909,-5.391921,1.735685,-0.593732,-2.852898,4.386879,-5.614007,3.791394,-6.107274,-6.300452,-7.094483,-2.199482,-9.894795,-2.786598,7.023445,7.971315,-3.113206,-0.445419,1.522193,-4.536412,9.000649,7.341336,-7.259878,-9.221644,0.816005,-9.577432,-2.709108,-1.057894,7.386135,0.592619,-8.840279,-7.883582,-8.885426,-2.055689,4.407455,3.591004,-9.624773,8.121756,0.316606,5.488924,-7.019198,-1.932979,-8.587630,-9.196693,5.784383,9.349523,-3.172557,1.451072,-5.855024,1.758648,-6.806695,-4.915437,9.847660,-2.440034,-1.676328,8.279737,6.527315,4.350580,-8.186391,3.700818,5.005291,6.151535,0.230328,2.146056,-7.738676,2.410097,6.957109,4.056737,4.172244,-2.124268,7.367742,3.604778,2.745498,2.828375,-1.085216,-9.571581,2.005618,1.899277,-8.967690,-3.200361,5.306657,6.576421,-9.893982,-1.726590,-2.315985,9.143960,-6.098020,-8.999443,6.344362,-0.710404,2.402785,9.350500,-0.560028,2.799929,1.416615,-5.572184,4.501015,-2.476788,-1.298454,-8.993809,1.058105,8.162800,-0.439964,0.785526,9.710844,0.059079,-1.027190,7.730352,2.832774,6.415973,-7.294476,-6.747831,-7.977549,7.422634,6.634728,6.517046,1.618645,-6.097310,4.241728,4.066461,7.456822,9.970119,-5.753475,3.901134,9.667049,-5.889472,-9.257775,9.537906,6.891642,1.212434,-4.988135,5.415941,0.307839,7.952604,-3.355864,1.092524,7.599833,9.296885,4.416048,-2.529766,-8.607455,0.297112,2.072807,4.936386,8.747659,4.342573,0.049242,-6.559953,-1.421648,2.810516,-7.572668,2.733194,7.098562,8.161391,5.838909,8.995007,8.370371,-2.914882,-4.199397,4.343809,-8.706079,1.414869,-9.614778,7.022454,-1.712117,9.128930,8.861359,-4.821225,9.695314,-4.614519,0.947366,-7.031039,-4.940258,1.908947,-4.279543,-8.473099,4.189776,8.022182,5.739312,8.659870,3.887566,5.375668,4.158665,-1.067899,6.532371,5.627638,-1.795652,6.790338,-5.795785,9.692450,-1.363857,9.027346,-2.506265,2.376240,9.090676,4.508303,0.890373,-8.743917,-1.438929,4.390109,4.925015,2.530441,4.745446,-3.411206,9.910224,-7.912552,2.376775,-1.977080,-8.393098,-5.129897,-3.762815,4.945248,-2.590466,-0.651574,-8.375509,-7.553177,-8.310209,1.754086,2.218543,3.143394,-3.376812,-2.869695,3.436822,5.071788,-8.908152,-1.797300,2.909901,-0.275055,2.621245,-2.282910,-2.379149,5.731126,-7.095492,-3.394008,-2.548461,5.813016,-0.708271,-6.901205,-4.216794,0.340160,6.472938,3.640682,0.859644,-9.548270,-1.046799,-2.170041,-4.021812,5.029771,6.893253,-3.276534,9.181836,-5.909526,1.222578,7.721208,-5.862804,-8.427478,-0.095542,-6.601609,5.627335,-9.576300,3.240427,-5.035900,-7.859068,4.310930,-2.519672,9.953704,6.160200,4.205112,4.273003,-7.582042,8.319741,0.684827,-6.884648,-7.266501,7.733218,7.249113,7.839126,-9.242340,4.747693,1.561151,3.779768,9.683961,-6.462895,3.370973,9.995319,4.440528,-4.738881,9.921683,-2.686159,-8.461011,-1.536637,3.214312,2.064134,-3.031592,6.806137,-3.224250,-3.042580,5.338410,-0.850788,-2.384014,-3.125518,5.439043,5.287379,2.998196,-4.181712,2.671704,1.524177,-8.678419,-4.872863,1.476560,7.227111,-5.708070,4.696751,-7.378113,-4.548607,1.044857,7.667408,1.208854,1.495505,-3.429421,-6.399924,7.525343,-1.577667,-3.705446,-1.216193,-6.654009,-9.214101,0.776872,-8.095855,7.754866,4.578575,3.902617,9.579289,1.421056,1.649283,-9.653723,1.415430,6.272434,-1.105740,-3.178863,6.614203,-0.582342,7.094586,8.047070,5.404595,-7.319954,-0.436868,1.266715,-3.657040,-5.526677,2.991331,9.354027,-6.746280,-7.730486,-7.423658,9.097657,-7.709462,3.589651,-4.693363,6.274231,-4.866328,-0.837472,-4.788280,-8.560146,-7.256625,-9.445276,-6.795918,-9.369633,7.408595,0.240795,2.997121,3.449813,-1.153840,6.224521,-9.755872,-6.813902,-2.037715,0.164050,5.840053,0.442050,-7.080335,0.900934,3.588251,-9.699853,-7.450714,-0.462501,-8.189578,0.771394,3.869222,4.104388,-0.967542,-9.072510,-2.199933,7.063225,9.701234,1.885505,-3.819249,-0.606235,-1.906820,-2.171891,-0.558454,-5.697686,3.777028,3.121906,-0.469976,-4.231735,0.813500,0.233605,-2.466243,4.651822,7.531159,0.032454,6.330116,8.082861,-2.022038,-4.319633,4.618823,-5.030109,4.848322,6.278430,-0.593826,-8.078741,-5.798886,-9.445591,-2.649481,-2.161552,-4.883352,1.585353,-5.232613,-8.982746,4.043114,8.200001,5.306617,5.367144,-6.571266,7.787683,-6.951646,-1.829262,4.951718,9.857081,-3.422293,-9.150670,9.734538,-5.992233,-1.576164,5.253565,0.672168,-8.388030,-6.997422,3.838433,-1.263896,1.013154,-3.522839,8.451893,-3.093746,2.733777,9.401892,-8.521178,-7.210087,-4.383182,1.314044,-6.522574,-3.724074,4.992785,-9.043978,7.128538,5.352969,5.167129,-0.036209,-8.413326,9.955888,0.476659,0.618116,2.099470,-7.425155,-3.219692,4.950460,0.514901,-0.997578,-8.789583,3.847611,9.783087,5.353644,6.633817,-5.110797,-4.128154,5.452495,-0.821834,9.436583,-7.094742,4.441980,3.694450,0.426125,-1.189312,-6.226457,-3.589539,3.638425,-5.549564,-3.223836,-9.298693,3.568920,-5.908870,1.711299,2.336155,5.819999,-3.604811,4.809046,7.982292,-6.973747,-2.351427,0.458102,7.383515,-1.931343,7.681779,1.573794,4.852531,-5.260366,6.772448,-4.198486,2.293499,8.804870,-7.075693,1.093074,8.400623,-1.924896,-3.607090,1.071259,-6.141842,-6.175078,-3.135416,7.598407,-3.755414,-4.942571,6.657612,0.551246,-3.155841,3.560831,0.094939,-0.148448,-1.110767,-4.781941,-4.148713,-0.879589,3.687937,-3.147083,-2.968277,-7.705274,-7.300551,6.559343,7.803346,-5.730128,9.996916,6.237824,-8.010023,1.054390,-1.328139,-4.340757,8.365267,9.798555,0.852187,1.992942,7.309875,-4.714522,-4.836078,-7.792626,-7.236946,2.928742,-9.543968,-5.964179,-5.835759,3.962247,4.210364,-5.149753,8.233941,-6.918689,0.626304,-3.405184,4.921510,-9.747198,-6.529270,7.457492,7.221290,-1.489927,4.087298,5.398211,6.113625,-2.056473,-4.144569,4.524208,-2.413452,-1.110831,9.752122,8.751033,8.778343,-4.047455,-4.729393,0.683267,-6.629922,9.596348,-3.001275,-9.449814,4.330049,4.926886,2.316730,3.396345,-3.540339,4.234633,3.931433,-6.571935,3.727192,-0.931331,-7.735668,0.545733,-1.083309,9.251407,1.434937,-8.176085,-0.612584,-7.773953,-9.494650,-4.301560,8.483535,8.736715,-5.593554,-2.195651,-5.514533,5.838429,-2.290418,-6.203679,7.686268,2.255787,1.346030,9.868182,8.821200,5.144930,-1.428549,-6.422713,2.810973,-1.885318,8.058124,6.730824,2.722597,3.830416,-9.028146,-9.947992,9.700207,-6.092271,2.185103,-6.778360,-9.500859,9.635854,6.799886,-4.119774,6.641649,-1.291459,2.329579,-1.181207,-5.332701,-6.130930,4.917867,-4.201860,8.463702,1.745077,6.962856,1.820891,2.176905,-6.747566,6.774513,-4.691397,5.072218,2.508885,-5.549012,9.950526,0.594457,6.247947,3.661719,1.995056,9.173604,6.501513,8.629080,-8.157649,4.519686,1.475718,0.622809,4.116549,8.386004,-4.455775,1.658927,-5.094530,2.519671,1.614424,-8.175175,7.237761,-8.604238,-3.240728,-2.352235,-0.363787,3.079938,-9.964268,3.140634,6.425445,-3.798319,4.274106,3.120022,7.039755,8.630856,2.717136,3.302177,4.135831,-2.452795,1.964808,-4.010203,-9.587019,-1.006522,6.797199,3.798320,-3.441584,-0.262353,8.061786,5.273690,-4.614337,2.416143,-4.890687,4.927867,-2.062753,6.681214,-5.386260,-9.243934,0.268991,9.956340,-4.117038,7.225402,-7.485257,-7.365346,-7.300923,-3.807879,5.274554,-2.198195,7.767592,7.139975,6.907462,4.688164,7.114836,0.454140,-6.182959,0.327369,4.718342,5.556759,-3.682393,3.069636,-2.865003,7.638933,3.996313,2.152515,4.271506,1.897297,-7.482508,-4.157781,-5.131989,-2.681619,-2.191826,7.661763,5.490736,-6.871565,6.585445,-9.085950,5.255018,2.142352,4.602062,4.290273,5.157754,-6.799585,-1.854986,1.428000,-1.576876,1.921193,8.974437,-5.157267,-5.486014,-4.056374,-5.202579,2.566550,8.012146,-4.119405,7.577168,3.676270,-2.964447,-7.392102,3.374219,4.408079,-5.422244,-3.593007,-2.667814,-0.820085,2.244566,-5.782082,1.129513,-2.426034,-5.351400,4.417330,-7.001335,-1.002010,-4.264384,3.035937,0.860761,0.659590,-0.809115,6.023641,-4.914051,5.826358,5.508891,8.519670,5.617402,0.084512,6.554258,4.374622,3.114160,-3.528131,4.267437,5.090703,0.770576,-5.020522,5.110383,-9.644104,2.144201,1.482806,7.414885,7.817060,-7.195680,-0.994243,2.893864,-6.455662,5.741236,8.655226,-3.279070,1.821576,4.385847,2.604549,-6.884046,7.084322,4.647077,-2.721675,7.368912,9.424476,-7.871124,2.433359,-3.464168,-6.309069,8.250665,-3.443424,9.188403,8.927327,9.812290,2.665392,-9.561308,3.137298,7.857662,-1.238194,6.518083,4.737551,5.568912,4.942062,-2.208306,4.796637,5.932025,5.119782,-1.578427,-8.512235,-3.251789,1.624344,-5.486775,-9.818033,-0.754234,-0.585455,0.622517,7.600256,8.186401,-5.029828,-1.658578,6.944532,7.301028,-0.644611,3.109996,9.852756,-5.841759,-3.646039,4.888590,7.771560,2.988163,8.174593,1.131196,1.317985,6.342440,-9.392731,9.154992,-9.859692,-3.993490,-2.819574,5.801009,4.131069,-9.121976,-5.967035,8.817636,0.104296,3.222999,6.566804,2.554665], dtype = "float32")#candidate|479|(1155,)|const|float32
bop_480 = relay.maximum(bop_460.astype('uint16'), relay.reshape(const_479.astype('uint16'), relay.shape_of(bop_460))) # shape=(1155,)
var_484 = relay.var("var_484", dtype = "float32", shape = (1155,))#candidate|484|(1155,)|var|float32
bop_485 = relay.equal(bop_460.astype('bool'), relay.reshape(var_484.astype('bool'), relay.shape_of(bop_460))) # shape=(1155,)
uop_491 = relay.sqrt(bop_452.astype('float64')) # shape=(4,)
func_272_call = mod.get_global_var('func_272')
func_276_call = mutated_mod.get_global_var('func_276')
call_495 = relay.TupleGetItem(func_272_call(relay.reshape(const_470.astype('float32'), [5, 16]), relay.reshape(const_470.astype('float32'), [5, 16]), ), 0)
call_496 = relay.TupleGetItem(func_276_call(relay.reshape(const_470.astype('float32'), [5, 16]), relay.reshape(const_470.astype('float32'), [5, 16]), ), 0)
uop_497 = relay.rsqrt(uop_491.astype('float64')) # shape=(4,)
bop_504 = relay.subtract(const_469.astype('uint64'), relay.reshape(call_468.astype('uint64'), relay.shape_of(const_469))) # shape=(99,)
bop_507 = relay.subtract(const_469.astype('uint64'), relay.reshape(call_471.astype('uint64'), relay.shape_of(const_469))) # shape=(99,)
uop_508 = relay.sinh(uop_491.astype('float32')) # shape=(4,)
bop_511 = relay.bitwise_and(uop_508.astype('int16'), relay.reshape(uop_497.astype('int16'), relay.shape_of(uop_508))) # shape=(4,)
bop_517 = relay.greater(bop_485.astype('bool'), relay.reshape(var_484.astype('bool'), relay.shape_of(bop_485))) # shape=(1155,)
uop_520 = relay.cos(bop_511.astype('float64')) # shape=(4,)
bop_522 = relay.maximum(uop_520.astype('int16'), relay.reshape(uop_491.astype('int16'), relay.shape_of(uop_520))) # shape=(4,)
uop_525 = relay.log(uop_508.astype('float32')) # shape=(4,)
bop_527 = relay.bitwise_xor(bop_511.astype('uint8'), relay.reshape(bop_452.astype('uint8'), relay.shape_of(bop_511))) # shape=(4,)
uop_530 = relay.acosh(uop_491.astype('float32')) # shape=(4,)
bop_536 = relay.not_equal(bop_527.astype('bool'), relay.reshape(uop_508.astype('bool'), relay.shape_of(bop_527))) # shape=(4,)
uop_540 = relay.cosh(uop_520.astype('float64')) # shape=(4,)
uop_543 = relay.sigmoid(uop_530.astype('float32')) # shape=(4,)
output = relay.Tuple([call_455,const_458,const_470,bop_480,call_495,bop_504,bop_517,bop_522,uop_525,bop_536,uop_540,uop_543,])
output2 = relay.Tuple([call_459,const_458,const_470,bop_480,call_496,bop_507,bop_517,bop_522,uop_525,bop_536,uop_540,uop_543,])
func_545 = relay.Function([var_451,var_456,var_457,var_484,], output)
mod['func_545'] = func_545
mod = relay.transform.InferType()(mod)
var_546 = relay.var("var_546", dtype = "float64", shape = (4,))#candidate|546|(4,)|var|float64
var_547 = relay.var("var_547", dtype = "float64", shape = ())#candidate|547|()|var|float64
var_548 = relay.var("var_548", dtype = "float64", shape = (1155,))#candidate|548|(1155,)|var|float64
var_549 = relay.var("var_549", dtype = "float32", shape = (1155,))#candidate|549|(1155,)|var|float32
output = func_545(var_546,var_547,var_548,var_549,)
func_550 = relay.Function([var_546,var_547,var_548,var_549,], output)
mutated_mod['func_550'] = func_550
mutated_mod = relay.transform.InferType()(mutated_mod)
const_621 = relay.const(False, dtype = "bool")#candidate|621|()|const|bool
var_622 = relay.var("var_622", dtype = "bool", shape = (8, 10, 3))#candidate|622|(8, 10, 3)|var|bool
bop_623 = relay.logical_and(const_621.astype('bool'), var_622.astype('bool')) # shape=(8, 10, 3)
func_415_call = mod.get_global_var('func_415')
func_421_call = mutated_mod.get_global_var('func_421')
const_631 = relay.const([-6,-9,7,-7,-10,7,9,-5,6,-8,10,5,10,-10,-6,1,3,2,-4,7,10,-4,-5,3,-8,-6,-3,-4,-9,-7,1,-6,10,4,-9,-7,-7,7,10,3,-3,6,-2,-2,-7,7,-7,-4,-2,-2,-1,7,2,10,-6,-9,6,8,6,-10,-8,-2,-3,-3,-5,6,-4,4,9,-7,8,3,-1,-1,-10,1,9,3,8,-7,-1,-8,5,10,-5,8,-2,7,-3,-2,9,-9,7,-2,-7,7,-9,-4,7], dtype = "uint32")#candidate|631|(99,)|const|uint32
var_632 = relay.var("var_632", dtype = "float32", shape = (80,))#candidate|632|(80,)|var|float32
call_630 = relay.TupleGetItem(func_415_call(relay.reshape(const_631.astype('uint32'), [11, 9]), relay.reshape(const_631.astype('uint32'), [11, 9]), relay.reshape(const_631.astype('bool'), [11, 9]), relay.reshape(var_632.astype('float32'), [2, 40]), ), 1)
call_633 = relay.TupleGetItem(func_421_call(relay.reshape(const_631.astype('uint32'), [11, 9]), relay.reshape(const_631.astype('uint32'), [11, 9]), relay.reshape(const_631.astype('bool'), [11, 9]), relay.reshape(var_632.astype('float32'), [2, 40]), ), 1)
func_34_call = mod.get_global_var('func_34')
func_38_call = mutated_mod.get_global_var('func_38')
const_643 = relay.const([3.204813,-7.156712,9.340591,-5.824757,-6.437332,-6.246595,3.945521,-4.523886,-1.946151,-6.738246,-3.357796,-9.516485,-2.490575,2.919003,8.878795,6.992363,3.839156,-9.777907,7.960700,-2.597365,4.261503,9.840539,9.037438,-5.391501,8.033569,-6.581837,-2.074067,1.200359,4.773692,7.159825,7.925883,2.597742,-0.647399,5.181981,-2.646083,-3.644728,9.085321,-0.739278,8.112490,-4.857626,-0.743582,-8.112658,5.912441,4.811557,9.266733,5.600864,-3.684863,4.856366,-3.281846,-3.143525,-4.188361,-2.238076,-0.560136,-1.724039,-7.514450,-3.802790,-9.879589,8.126258,9.107856,-6.418250,2.677321,2.314821,-7.851486,3.129719,3.846535,4.775372,-3.574842,7.056477,-1.011110,-1.276888,-5.638539,1.000158,5.831438,-5.500364,-5.902706,5.940645,-5.448268,2.719336,-2.021348,9.169857,-2.789154,9.679104,0.605889,1.853972,8.191206,-3.032137,-2.889549,-5.227336,-6.855182,-9.337420,5.011373,7.903373,-3.520294,-5.621125,5.222876,7.285020,-1.659789,-8.681092,2.603670,2.493933,3.964991,6.935189,-4.967135,9.404736,-3.512831,2.970302,-2.497935,-6.699198,8.746081,9.841354,-5.883684,-0.407949,9.775464,-4.762373,-4.491906,9.029612,3.683338,7.938235,-2.883249,9.876491,6.114337,-8.109617,4.428507,-6.811707,0.338869,2.169637,-1.437051,-0.885807,-5.633459,0.639852,1.501603,-6.864749,7.369258,-9.997790,-0.334982,-3.239285,-5.418217,2.528098,9.846882,-8.743463,9.799378,2.987296,2.736500,-2.530936,-1.596286,-7.035098,-6.415702,7.868151,-8.364555,-8.562269,5.244379,-7.825826,9.436592,3.946484,-0.220703,-6.183316,5.763045,2.975667,6.923190,-3.157112,7.642103,2.186524,2.170471,3.454773,-1.822472,-2.028252,3.489319,7.792004,6.264479,5.422587,-2.662437,0.801750,7.991555,-3.827427,-7.872355,8.525382,6.586442,-6.024304,8.723694,3.353453,6.101516,8.702249,-0.821410,8.919227,0.755078,7.782814,-6.145089,0.860670,-0.752190,2.022913,-9.863893,-7.152296,7.865353,-2.629568,9.545232,1.694682,4.226353,3.760097,4.279305,3.727178,7.743301,7.125880,-1.138775,-7.282601,-1.623791,1.672134,-8.243082,1.147046,-8.963254,-8.219860,2.466023,-9.597344,-3.736256,-8.006025,0.431995,-0.107595,5.957823,-0.954806,-9.798603,-5.070880,-8.738714,7.882422,7.400039,9.660802,-0.586138,9.292828,4.743158,-8.672630,7.340341,8.968487,8.904229,-6.934342,5.188745,-4.507385,9.982068,0.502381,-0.926883,-1.907476,2.709791,-6.210011,9.954430,3.973088,4.038377,-6.593540,-7.246909,6.298598,9.168411,-3.306347,3.875369,-1.829328,1.798650,-5.651708,-3.416192,-3.904117,-6.483593,1.423942,-9.318396,-4.683484,-6.947796,6.894876,3.283942,-5.453903,-2.716746,5.277396,8.563447,-2.101576,5.174942,5.210740,8.864444,6.837417,-5.410729,0.946134,1.020723,-3.732919,-9.043460,0.450838,1.519324,-8.656781,-9.724572,0.915094,8.965420,6.849173,-9.951164,-7.223884,-3.056321,-9.492624,-6.307448,2.880609,8.852701,5.155668,2.526027,6.845007,7.575452,-8.748180,-6.812349,4.340810,1.713577,-0.641868,6.592545,1.728085,5.845471,-6.904144,0.322403,7.504592,-4.182913,-6.277551,3.195562,-3.691509,4.605596,5.852993,-0.285850,1.353992,6.372409,8.112975,-4.545083,-5.570154,-4.643443,6.696967,-5.313832,8.910489,-2.493987,7.029884,0.530205,-7.098977,-4.411904,-3.603171,-4.837695,0.854476,-4.129201,2.107946,4.736094,-9.707310,-8.457994,-6.938718,-6.505175,3.927207,8.955670,4.453843,-2.724355,-2.463158,7.823201,7.669394,-6.908802,4.087332,-1.869794,-5.484675,-7.949011,6.505593,-1.999322,2.637942,7.655327,8.153120,6.371985,-8.571167,-2.925895,0.953788,2.334253,-1.361692,0.130482,-1.171774,-7.794447,4.718304,9.993589,4.224503,-8.465249,7.261664,-9.613310,0.110575,4.362840,4.555165,-7.377436,3.860224,-3.230313,8.349577,0.774130,7.416434,-7.281779,-5.575670,3.398954,-6.153257,-3.420757,-6.726146,-2.915228,7.080023,7.409601,-1.314496,8.808383,4.983702,2.413701,1.696424,3.180080,-2.829319,0.741391,5.090998,-2.682352,4.005404,0.821372,7.406387,7.418445,9.712881,-5.204189,-0.466392,4.277874,9.753594,-0.029489,3.442220,6.063455,-0.496050,-0.293014,8.714801,6.922603,-6.865596,-5.575977,-1.300859,-3.993082,-4.591275,3.961685,-6.818287,3.701102,6.930499,-4.707812,3.338527,-1.710995,-0.837824,9.750789,-5.214013,-7.276533,-2.092378,-1.874058,-1.851357,-2.971954,4.243548,7.823887,7.908752,6.641157,5.978122,1.653328,7.242152,-4.962316,4.125303,-8.457167,-4.171594,-2.431451,7.156862,4.367905,5.553984,9.397038,-3.547091,-4.171203,2.844913,-7.914864,8.591871,0.531121,-6.207231,-1.097530,7.972111,3.310330,-5.456566,-4.018625,-3.057425,3.666026,-2.380123,7.616369,-5.088913,-0.783055,7.396883,-4.298132,-9.012332,-5.389643,8.604752,-1.383993,3.031589,-4.148706,7.714194,1.970971,-3.168304,0.516093,2.693252,0.768476,-8.951720,4.182185,6.432222,-4.438898,7.225876,-4.833785,-3.378511,-3.389323,-3.525247,5.902161,7.474575,5.274295,1.191835,-5.675883,8.539952,-2.574442,7.102380,-5.300745,7.364794,8.863645,5.176538,1.108865,-2.016577,7.466496,-1.835541,6.140464,2.150392,-8.162883,8.133562,-3.893536,-3.150722,9.122270,-3.454033,-6.349686,-4.201329,5.161946,5.984953,8.756462,-6.114496,-9.578184,8.441014,-2.213339,9.627533,-9.980351,-8.215202,5.115467,1.797874,-4.973993,-9.818254,-9.171249,-0.090099,-2.750758,-2.384302,-1.154653,-2.079841,-2.534133,-2.434705,7.825504,2.036983,-6.890851,-9.007720,-1.691385,-6.066403,5.721553,-4.808382,-5.960045,6.512931,-1.925044,-4.747301,-5.737555,-9.677106,3.635082,-2.950831,-1.956131,-6.112501,7.137239,-6.125251,-0.440363,-0.730281,-8.569256,1.563269,-9.170598,1.391795,5.378784,3.456793,6.865394,-5.329155,-4.401528,7.546560,-7.688426,5.935201,-0.991922,1.071571,6.204647,-0.414116,-5.367054,-3.696623,6.600177,-2.972937,2.472028,-0.190591,6.294079,8.538614,4.603379,-9.291320,-9.602572,6.815788,2.923650,-3.993708,3.990221,-4.332122,-3.225879,-2.583968,1.131383,-0.056434,-8.160056,2.674730,1.044026,3.139700,2.573911,-8.109307,2.606342,-3.932069,6.243080,4.447616,5.495135,-9.550875,-7.627840,8.070347,4.684909,1.489138,0.362494,0.848168,9.279292,0.352108,-9.912320,0.210334,-8.721057,7.511670,-5.091626,-2.624486,-5.855223,2.182922,1.794975,-2.903449,0.607652,-2.039720,-2.411329,6.186556,-9.469952,-0.607391,8.753230,-1.117644,8.113571,2.881858,4.012973,-8.324500,-2.993466,-3.831742,-7.036291,8.019556,-3.098728,-4.237873,1.422914,9.315967,6.118315,0.589292,7.582636,-2.483955,5.403750,-4.411272,0.099244,-6.264677,-9.522307,6.887559,-7.788115,-0.264555,-2.624987,8.410969,4.761514,4.843357,4.388899,8.685185,-0.614846,4.731669,1.833976,-0.417712,-8.004498,-4.627360,-7.525480,-6.704485,-2.205349,6.559026,8.079259,6.363358,4.049206,4.977690,4.981424,9.986776,-5.269049,8.783997,-6.606790,-1.426630,-9.029436,-4.923372,-6.668287,5.302499,4.360228,9.259913,-7.981820,8.537808,6.110944,-3.433144,4.870383,0.468408,-9.916176,0.885309,-1.409055,-9.948030,7.399892,7.593658,2.900792,-0.075608,-0.333100,3.631409,-3.056522,-0.967832,-7.241767,-9.486803,1.376889,8.351683,-4.598486,-1.010483,1.907245,-2.793985,6.742561,-2.897856,-5.267674,-8.823227,2.179542,9.868043,-5.079415,6.943439,-8.431548,9.003557,9.835332,-4.933257,0.850963,9.246608,7.249619,7.566645,4.197667,3.466802,9.118867,-9.385610,1.867425,-2.089593,-1.439451,-8.998190,-9.009801,-6.716498,5.779578,4.505371,2.884830,1.880540,-5.125467,-9.187045,-3.611314,-3.923266,1.619251,-0.491418,-2.201254,-4.931593,0.187624,-8.153475,-0.706319,4.490750,9.518186,7.601088,3.620977,2.437778,3.626988,-8.576742,5.100885,3.543539,2.432101,8.671009,9.745878,-9.479840,1.579006,-1.245801,1.793521,1.918326,-5.502516,-8.910652,0.199823,-9.813125,3.815802,-8.028321,6.607239,3.366395,-0.326658,-6.531825,-2.476285,-5.500848,7.919507,-0.380742,-5.083849,5.435995,-6.109494,1.378359,5.424339,-7.378623,-1.175866,7.453261,2.816797,-8.651338,-8.423784,4.035034,-5.081551,-1.162937,-1.441279,-4.713713,-3.004342,8.103376,3.626011,-3.256196,-3.765064,7.894343,4.540922,-9.382722,0.518215,-5.633913,-1.133451,0.203137,6.069322,-3.341654,-7.790147,2.896603,0.489521,3.833908,9.075104,1.441149,-7.858346,-8.173428,-7.531906,-9.795088,5.911702,2.918566,-1.218132,-1.890312,-1.776112,6.015963,-0.129887,0.806995,-4.502830,-5.832182,-5.918509,7.478574,3.035776,-5.968054,2.745146,6.240295,-7.376694,-5.943452,4.795314,-7.835322,6.657656,-4.850437,-8.931328,0.929178,-3.717233,-7.588843,-0.366738,-1.249464,9.891553,0.407266,8.724764,-4.526617,3.627300,8.124597,2.766002,-1.713789,0.147992,-9.509563,-4.168472,-8.515643,-8.633520,1.887829,0.137147,-2.750898,-5.462980,8.922904,-4.702594,7.897833,-2.908904,1.541735,9.834050,-3.729920,-9.271824,-4.157113,7.630097,-5.936625,-2.110443,-4.879775,5.423033,-1.355896,-6.065242,5.889587,3.698928,-7.992688,7.749981,-1.032621,7.833114,-2.408884,3.463560,-0.464714,6.800553,-2.651467,-2.518503,6.601515,6.748703,9.212692,3.721577,3.670218,-1.916724,-1.389858,3.510625,-9.217675,-7.525163,-4.154912,5.892854,-2.104054,0.617458,-0.380332,8.922170,6.002178,-9.316158,-4.460856,-4.157937,-5.475732,6.753334,-8.425556,7.713042,2.106528,9.287616,-2.997417,-7.868328,-2.186552,7.255473,2.670551,-7.387170,-8.568115,5.138605,0.128881,-4.813854,-7.392798,-4.501435,-1.492107,6.158059,0.611583,1.255949,-2.082339,-7.057180,-6.335154,7.039490,-5.470935,-4.268982,-7.588259,0.757744,1.664796,-7.125176,2.304741,9.667892,-6.997072,9.878658,6.657300,4.821860,-8.569303,-5.891093,-3.844932,-2.854200,-1.474772,2.975635,0.383776,-4.741944,-8.611040,-6.008626,5.903588,0.753337,9.060893,-0.452853,1.904338,-9.959323,2.915385,-2.342930,-7.029858,0.323233,-3.784125,-8.752896,8.855637,-7.946874,6.682404,-7.471258,-2.379607,-8.929373,-2.322686,7.920894,4.676209,-1.721405,-5.068983,-2.157201,2.984682,9.456995,-8.245730,5.781968,-0.586135,6.343966,6.798181,8.177099,1.647074,2.129950,-9.721679,6.715204,-3.869389,-4.590699,3.018607,8.674994,-5.725591,-1.350856,-9.176473,0.467576,4.687136,-8.318945,-9.677193,0.418982,-5.218575,7.091649,7.695672,-4.752114,-4.997457,-2.606528,5.108418,0.175241,7.622109,-5.423956,1.354534,-9.036013,-9.509849,3.278641,-8.954257,-7.024434,2.871307,8.727315,-0.603113,-1.246103,9.814931,-1.552408,1.752683,-4.375991,6.204045,-8.442755,-6.967358,-4.926003,-3.770299,4.863054,-4.309105,7.320737,-2.525071,-3.450913,-7.389828,4.396181,0.658528,-0.488677,7.910803,1.794434,0.546497,-6.800835,5.607906,-7.411856,-9.810076,-7.947352,2.239328,7.175870,4.637032,-4.218676,-2.142163,6.679683,-0.409536,-3.908264,-7.276627,-8.971543,-0.091201,-7.007366,3.145676,7.231166,-1.674231,-6.069410,9.696958,4.680403,3.146163,-1.629891,-8.864437,-2.253510,9.878977,-7.251195,-1.257360,3.576173,0.478749,-4.817747,-3.278494,5.873833,-1.104042,-6.199743,3.978821,-8.410899,1.849485,-2.947132,-1.444874,-3.582928,-3.248877,4.075804,-4.898027,0.761374,-7.745684,-8.905645,0.848680,-1.300677,-1.844174,1.756585,-9.768112,-2.500092,-0.254795,0.411521,7.329150,-9.652509,3.049905,2.175252,-8.432273,9.978154,-7.636515,0.487754,5.238425,3.227361,-5.788755,0.708621,-4.875568,-9.901474,7.045529,1.345717,-3.750680,-3.400046,-8.400803,5.682454,-1.722256,0.191721,-4.790508,-0.792361,-0.079673,1.568116,-4.185083,-8.331240,7.892901,2.147964,-4.079405,5.920094,-2.959037,-1.485615,7.573087,2.233164,6.618440,5.023593,6.415570,3.046574,2.039194,-0.440451,-8.894271,8.459735,0.018509,-5.794779,8.306791,-9.640016,7.748235,-6.062716,-5.122556,-4.761486,8.850864,-2.194923,6.599003,-4.834680,-2.270547,-7.794197,7.014806,-8.813088,-0.408444,2.813124,4.543780,9.587383,-1.289352,6.076629,9.295399,-2.488600,5.758329,9.766578,3.965969,-2.365214,-6.840312,-6.061805,-9.435129,-2.785835,8.096877,-6.917812,-4.004421,9.302291,-6.121609,1.769360,-7.660110,-0.308070,-9.188781,-0.886287,4.428956,-1.025513,4.604101,-2.825088,4.174795,-6.728594,-4.838045,9.643280,-2.478045,1.109111,-5.762859,-0.884334,0.480987,-8.751532,-2.315538,2.510251,2.586539,1.860682,-5.294617,-3.530555,-7.194904,-9.971106,-0.569813,5.467030,-0.372848,5.610807,-0.899256,4.566296,-5.071655,7.053716,-4.660964,-2.067002,-6.425874,-9.184053,9.569706,7.457967,5.683220,-9.809517,0.823255,-2.749841,5.668389,-0.518478,8.222010,1.385115,-7.761843,-7.238701,3.188720,-9.127342,-7.255497,-0.840422,-7.390918,4.982767,9.381877,9.628662,-1.391187,-0.964736,7.567076,7.871056,-0.070865,-4.753480,1.637477,2.394449,5.075996,4.529700,-6.406436,-2.687497,5.950572,-9.249219,7.507376,0.396491,6.323669,0.158354,9.385751,5.758179,4.671269,-1.785552,-0.219797,6.946745,5.943530,9.309643,-3.864412,-5.523586,9.965308,-5.280605,-5.950927,-9.925893,2.774774,-8.961930,-1.674362,-3.686178,5.303282,3.895942,-9.910835,-2.568031,9.470688,5.941490,0.780773,3.201337,-9.700345,7.490914,0.375544,-0.049129,-2.379416,1.457769,-2.668132,-4.870208,-4.504480,0.348716,2.618399,8.980907,3.205919,-7.400434,-5.911527,-0.906971,-5.417464,-1.403968,2.845838,-4.144771,4.996479,7.563576,-0.189574,-5.474653,7.974961,9.674736,1.676477,6.696044,-8.458456,9.967856,4.680078,8.996773,4.412751,9.795960,7.354667,-2.965524,-5.894265,-0.115809,-7.062147,4.146528,3.853654,-8.712633,4.791299,1.238480,1.195449,1.746584,-3.457705,-0.339664,-4.724325,6.998995,-8.809463,-5.532004,5.303429,6.082065,2.096698,2.865705,1.628032,6.643587,0.342088,-5.341092,9.507192,2.199256,4.011545,-1.636630,1.597104,4.289779,4.437128,-5.323719,-5.317654,-4.610536,1.683536,-6.194913,9.446508,5.899642,0.491308,-7.714455,3.361136,-3.279309,1.064303,-3.678134,-4.032024,-5.136264,-2.367356,-4.703829,-9.636066,-5.801169,-8.896938,6.666903,1.456384,-2.422167,-2.734452,3.191025,-8.363677,-0.441819,-6.848137,0.809005,-8.146447,5.685708,-6.868875,-6.407421,-0.417189,-3.559597,9.864513,3.894694,1.917159,2.345696,-6.904474,5.101030,2.492691,-0.372593,4.097363,-8.001950,-0.656493,-8.230923,-7.896500,0.128570,6.680585,6.165000,7.610304,7.446061,7.687575,1.745199,-9.974172,-7.974043,-8.498999,9.462682,-0.119860,-6.426119,7.756254,-5.958504,3.610008,1.086932,2.062167,4.968461,1.198072,5.891972,-8.277896,-1.393339,-1.639606,-2.739224,3.920481,-8.405998,7.881476,-7.921499,1.809657,-0.800264,5.183260,5.001645,3.430091,7.257004,-8.201542,4.808296,9.766010,3.945174,-7.312704,0.391011,8.716058,-0.524820,-3.935092,-2.360833,2.688437,-0.492554,-9.129691,5.727817,-6.635487,-0.830073,-3.976112,7.127833,1.403894,7.482764,-8.615802,2.490871,-1.364736,1.578713,7.517112,-9.654493,-1.369737,2.592626,-5.757846,-6.137604,0.800300,1.982826,-7.381965,-6.175738,8.116113,-6.267298,-7.921606,-0.300173,0.388878,3.272557,3.511044,3.157926,-8.813695,-1.819015,9.734604,1.304777,6.414754,-0.041730,-4.494172,3.249832,-2.273612,0.365857,2.306575,9.366657,5.062878,5.917304,-7.480512,1.716201,3.739444,-0.518964,-9.551528,-7.263306,-6.506596,-4.981625,3.679265,2.239992,8.052329,-2.180016,-9.631914,6.543928,-9.047521,-7.999593,6.718526,9.116131,9.639301,5.186105,2.287755,3.514991,7.812274,-2.827317,2.669949,-9.184169,1.401774,6.814436,0.510551,8.995188,-5.671208,-4.172876,2.953191,-5.969474,1.708583,1.856704,1.220294,3.758662,-6.125473,0.226556,8.207071,-2.455564,-8.832688,-8.866070,-4.347151,2.823740,4.927427,-7.538340,0.748016,3.587387,-4.368663,-5.225662,0.008359,-7.140361,2.064889,3.059794,-3.602344,0.387344,0.622079,-8.467806,-1.655743,-8.315011,6.622197,-0.859718,-2.303883,-1.091082,-2.262856,-9.016169,-6.426592,6.087934,2.648400,-9.983690,-5.607904,-2.426523,9.958132,6.168556,2.253437,7.301426,-7.735961,3.551187,7.887629,-5.222031,-6.777346,2.089403,1.862991,5.064289,4.382573,-7.960843,0.200410,4.369843,9.290359,-0.446799,9.892581,-8.680083,-6.829256,-4.411598,2.851291,0.554251,4.202484,-3.710979,-1.186253,9.864091,9.405102,2.145116,1.102190,9.953808,-1.648561,2.758519,0.715218,4.918984,8.895692,1.634251,-7.281131,3.532565,2.868366,8.792396,8.743459,8.219745,-6.475829,4.274112,6.465906,4.540948,9.355677,8.635821,-4.917413,-9.319149,-2.733179,-5.898503,-1.201809,4.118271,9.829132,5.341632,8.387494,3.747996,-8.967212,9.763600,5.811503,2.298828,3.815521,0.347970,5.352770,-0.845013,0.229166,5.816275,-2.609428,1.402337,4.792710,-9.182046,8.595891,-2.659251,-2.430814,6.863880,-5.804850,-8.072228,-0.657717,6.529796,4.164457,2.937475,-3.288730,9.455057,3.915811,-7.655749,3.512396,-9.192097,-3.964876,-9.538766,-7.935083,-2.525859,-0.178878,1.450785,-6.452867,1.745701,-4.722138,-8.196229,9.095313,5.606756,-4.435404,8.020078,-2.862561,-6.016232,-3.884337,4.072417,0.191245,-0.362269,9.123605,-0.663345,-1.809079,8.409483,-5.290596,-6.896068,1.656194,3.749006,9.907951,-0.638006,-2.685383,1.437275,7.997371,8.200329,-9.818470,0.183266,5.033363,-3.531009,4.668087,-3.566143,6.909551,1.713786,-2.708535,2.110716,5.262518,8.205195,-4.875048,-3.461007,-8.557718,-8.511575,1.934114,-7.134173,9.076884,8.374183,-9.237362,8.369121,-0.394005,6.775453,8.694212,-9.475259,-1.732148,-2.175003,-9.938471,-3.236923,-6.693424,-1.152519,-1.542482,3.771171,6.690895,-7.332535,-9.132925,2.618969,-6.274026,-3.269292,8.017888,-4.060660,-8.273419,6.555961,-6.310691,5.736846,-7.193557,-3.639174,-8.529631,8.643902,-7.858646,-4.994280,8.029104,5.340840,-1.854006,2.765410,2.999264,5.849793,-2.999015,-0.010438,-5.677615,5.301360,4.761196,-9.343218,4.482676,8.214320,3.233045,7.745560,-8.254457,0.746924,-1.276903,-3.994314,-5.737910,1.307194,-1.759020,2.591867,-0.485439,-3.210403,8.146939,9.675500,-6.755314,-8.309777,-8.420173,-2.034494,0.689438,9.458400,-9.938700,4.379653,1.654558,7.230762,-1.503376,1.896156,7.596511,4.954524,-7.812847,-8.687673,7.155216,-7.803605,-8.294723,-6.971091,-1.679332,4.566121,-2.435258,-6.156464,2.536169,1.236919,-6.367826,-7.504216,-6.782135,-7.075960,2.171241,7.900617,-7.289418,-1.895346,-7.492741,-6.971474,0.248174,9.042628,-5.823965,0.245884,9.882064,9.142384,3.990603,-0.460978,8.105008,-6.460399,0.479901,-6.394072,-7.145214,-5.522211,8.629596,5.828245,-4.636765,-5.158092,-1.063558,-3.035516,9.381635,-2.126879,-4.276821,-1.564161,5.604061,-9.671584,5.589357,-7.685364,9.439631,-1.337838,0.341973,0.285275,9.696686,-9.724055,-6.836228,1.326604,4.115383,-5.284304,-4.511680,6.556671,-5.887249,-8.087706,-4.454487,4.437904,3.223194,8.107385,5.446355,-5.605768,-0.500647,1.703404,-8.870926,-0.399416,-3.479421,4.150093,-7.446250,-5.858874,-6.134944,-9.605126,-2.100931,-4.428060,3.720570,-9.584902,4.093876,1.568838,-4.673763,-3.204403,-4.032351,-2.259628,0.223913,2.651393,-6.513306,-8.943708,6.799001,-5.745140,-1.147649,5.837618,-0.530587,3.351590,4.688896,9.327012,4.982853,-2.355711,3.098061,-2.277185,-6.850044,-2.187194,3.680938,8.570518,4.133461,-0.204199,-7.383456,3.638716,-4.082962,-6.140929,-5.102603,3.055630,6.938068,8.992458,-6.115950,-5.250730,9.477929,0.299438,7.857850,3.625406,-7.164678,5.765465,-5.861350,0.211534,3.035530,-4.999082,-8.699543,6.653526,8.851152,-2.552770,-4.997651,-2.755217,2.323376,-3.732691,-0.851463,7.695336,-7.372925,3.816045,8.195139,9.999975,0.662528,-3.490091,5.711224,4.085433,-8.044736,-8.998786,-1.834409,2.262813,-2.479288,4.400974,5.102179,-5.936085,6.854422,-5.489778,-1.028070,9.612255,7.205491,5.013059,3.234747,1.233912,-8.264318,-2.213882,-8.191989,-0.782734,8.542141,9.609814,-5.065821,-8.888355,-0.276077,3.951912,-5.737213,-9.924034,-0.364429,-6.999659,-0.173245,-8.822470,2.796051,-6.179292,-4.479457,9.792285,-6.592482,-2.584552,-5.687883,-4.148855,-7.865818,5.980781,-1.474974,-8.681553,-1.366046,-7.940790,1.007952,9.110527,9.159448,-7.793525,6.662671,1.662876,4.072081,-8.243377,1.929074,-0.686033,-7.785369,-4.994830,3.924789,-4.946267,-3.827072,-1.963231,1.266836,-2.117607,5.594333,-5.158164,-4.826736,-5.272404,3.196433,4.089348,0.217831,-3.524912,-5.751660,-7.522774,-4.835122,2.107264,6.678746,-6.571763,9.862801,6.366770,7.996785,8.535280,-2.329502,0.645517,8.041097,-9.956394,-7.894209,-0.019179,4.136837,-3.590561,8.927520,-4.162939,-2.963784,1.655041,-0.669568,-4.532989,-9.788078,1.964409,-3.809053,9.910717,-4.849013,-4.863979,-6.942729,9.705170,-2.764041,4.062955,6.055240,-4.288100,-1.233163,7.990637,6.020943,2.706310,-3.104428,-8.804484,5.661197,-6.561956,6.773539,4.826381,1.844337,9.048520,-8.623654,-7.352215,2.374519,6.318635,-7.989874,-9.430376,0.459166,-6.903461,-5.004611,-6.944752,-5.139762,8.203728,7.829297,5.303278,0.347443,-9.461632,-8.694432,5.634268,-5.697899,5.170144,-4.589953,-0.218265,8.119533,7.437175,2.412379,-0.462130,-5.622024,3.520480,-0.416110,-3.437713,1.986353,5.125181,4.457405,5.551507,-8.392990,5.351092,-9.659173,-5.876509,-1.607071,-4.756094,6.871896,6.175653,-8.819350,2.234481,6.892991,0.360397,7.439205,-2.626089,2.672123,-5.139850,0.632054,-2.576310,2.089528,1.557855,-3.147740,9.634232,-9.700892,2.405903,4.278749,2.055218,1.403695,5.765173,-1.314056,6.898289,-9.918948,9.823264,1.939361,5.839353,-9.890248,-2.783101,-2.685867,-9.263845,-6.696638,-6.660747,-3.749733,0.813980,-5.163575,-4.423903,-3.512877,-2.588164], dtype = "float64")#candidate|643|(2145,)|const|float64
call_642 = relay.TupleGetItem(func_34_call(relay.reshape(const_643.astype('float64'), [11, 15, 13]), relay.reshape(const_643.astype('uint16'), [11, 15, 13]), ), 0)
call_644 = relay.TupleGetItem(func_38_call(relay.reshape(const_643.astype('float64'), [11, 15, 13]), relay.reshape(const_643.astype('uint16'), [11, 15, 13]), ), 0)
func_545_call = mod.get_global_var('func_545')
func_550_call = mutated_mod.get_global_var('func_550')
var_650 = relay.var("var_650", dtype = "float64", shape = (1, 4))#candidate|650|(1, 4)|var|float64
var_651 = relay.var("var_651", dtype = "float64", shape = (1155,))#candidate|651|(1155,)|var|float64
call_649 = relay.TupleGetItem(func_545_call(relay.reshape(var_650.astype('float64'), [4,]), relay.reshape(const_621.astype('float64'), []), relay.reshape(var_651.astype('float64'), [1155,]), relay.reshape(var_651.astype('float32'), [1155,]), ), 8)
call_652 = relay.TupleGetItem(func_550_call(relay.reshape(var_650.astype('float64'), [4,]), relay.reshape(const_621.astype('float64'), []), relay.reshape(var_651.astype('float64'), [1155,]), relay.reshape(var_651.astype('float32'), [1155,]), ), 8)
output = relay.Tuple([bop_623,call_630,const_631,var_632,call_642,const_643,call_649,var_650,var_651,])
output2 = relay.Tuple([bop_623,call_633,const_631,var_632,call_644,const_643,call_652,var_650,var_651,])
func_666 = relay.Function([var_622,var_632,var_650,var_651,], output)
mod['func_666'] = func_666
mod = relay.transform.InferType()(mod)
mutated_mod['func_666'] = func_666
mutated_mod = relay.transform.InferType()(mutated_mod)
func_666_call = mutated_mod.get_global_var('func_666')
var_668 = relay.var("var_668", dtype = "bool", shape = (8, 10, 3))#candidate|668|(8, 10, 3)|var|bool
var_669 = relay.var("var_669", dtype = "float32", shape = (80,))#candidate|669|(80,)|var|float32
var_670 = relay.var("var_670", dtype = "float64", shape = (1, 4))#candidate|670|(1, 4)|var|float64
var_671 = relay.var("var_671", dtype = "float64", shape = (1155,))#candidate|671|(1155,)|var|float64
call_667 = func_666_call(var_668,var_669,var_670,var_671,)
output = call_667
func_672 = relay.Function([var_668,var_669,var_670,var_671,], output)
mutated_mod['func_672'] = func_672
mutated_mod = relay.transform.InferType()(mutated_mod)
var_674 = relay.var("var_674", dtype = "float64", shape = (10, 16))#candidate|674|(10, 16)|var|float64
uop_675 = relay.exp(var_674.astype('float64')) # shape=(10, 16)
func_139_call = mod.get_global_var('func_139')
func_143_call = mutated_mod.get_global_var('func_143')
var_678 = relay.var("var_678", dtype = "int8", shape = (66,))#candidate|678|(66,)|var|int8
const_679 = relay.const([-6,-9,-10,8,-2,-3,-7,-7,1,8,-8,-3,-2,7,8,-6,-6,9,7,-2,-8,-6,-10,-4,10,8,-8,6,-8,10,3,-8,2,-5,-5,-8,3,-9,-8,3,-5,-7,-4,3,-6,-5,10,7,1,10,10,10,-3,-8,2,-10,-4,1,10,9,-8,2,-8,-1,3,-4,1,-8,-4,7,2,6,4,4,-3,7,-7,-1,-10,-3,-6,-7,2,-1,-4,4,-6,1,-8,-4,-8,-4,4,10,-8,8,-10,10,10,10,-2,7,-3,-9,-5,-1,6,10,1,-5,-2,4,5,6,9,-9,-10,-8,7,5,-2,5,-2,-7,4,3,-4,10,4,7,1,2,-4,-4,10,5,6,8,-4,2,-9,-5,-3,-2,-10,8,-7,-5,-3,-6,-8,4,10,3,-1,3,9,10,-3,-1,-5,8,-1,3,-2,8,-9,-4,-6,-6,-2,-4,-8,-5,1,8,6,6,-7,-3,9,8,6,8,9,-7,-4,3,9,3,-5,6,6,-1,2,-1,7,-2,1,5,5,-2,4,8,-5,-3,-5,6,-10,4,2,6,5,2,-7,8,8,-8,-7,-6,-1,-7,-8,6,9,-2,5,2,-4,-8,1,3,-7,-4,9,-9,10,7,-8,-6,4,9,3,-1,-6,-10,-4,8,1,-6,-3,3,2,1,-4,10,-4,9,-10,6,9,3,-6,5,-3,2,-7,-9,-4,2,5,7,-10,-9,-7,6,-1,-7,2,-8,2,-10,2,9,-10,-5,-2,-6,-7,3,-10,-9,-8,9,8,-6,5,1,-5,-5,-1,2,3,6,-3,-5,7,-5,10,-6,3,-1,6,-8,-4,8,5,9,-7,7,3,4,-4,5,-5,4,-3,-8,9,-1,-1,8,-10,4,-3,9,3,-8,-4,-2,-5,9,-3,6,5,5,-10,-3,-2,-2,-8,-5,-6,-9,-7,1,7,-10,9,2,-5,1,8,8,1,-6,-10,-1,3,7,10,2,8,-10,7,-10,-7,-2,4,-6,1,-5,5,7,7,6,2,9,-9,4,10,-2,4,3,-3,5,5,5,8,-5,-8,4,-2,-9,-1,9,-6,10,7,9,4,-6,-4,8,4,6,-8,-1,5,-1,2,2,3,9,-5,1,-10,8,-7,5,2,3,-6,-8,2,-9,-9,4,3,3,-2,9,9,-6,-6,10,-4,5,7,1,3,6,3,6,-3,-5,-3,-7,-2,1,-5,5,3,-9,5,2,4,-4,7,-2,-8,3,9,-6,-2,10,-7,9,5,2,10,10,1,-10,3,-9,8,4,2,10,-4,-3,3,3,-10,10,9,3,-3,8,-4,8,-9,-1,10,-6,2,-9,3,-5,-7,4,-6,-5,1,-4,10,-9,4,-9,9,-3,5,6,-4,-1,-7,-8], dtype = "int8")#candidate|679|(528,)|const|int8
call_677 = relay.TupleGetItem(func_139_call(relay.reshape(var_678.astype('int8'), [11, 6, 1]), relay.reshape(const_679.astype('int8'), [11, 6, 8]), ), 0)
call_680 = relay.TupleGetItem(func_143_call(relay.reshape(var_678.astype('int8'), [11, 6, 1]), relay.reshape(const_679.astype('int8'), [11, 6, 8]), ), 0)
uop_682 = relay.sigmoid(uop_675.astype('float32')) # shape=(10, 16)
bop_686 = relay.logical_xor(uop_682.astype('uint64'), relay.reshape(uop_675.astype('uint64'), relay.shape_of(uop_682))) # shape=(10, 16)
bop_690 = relay.greater_equal(bop_686.astype('bool'), relay.reshape(uop_682.astype('bool'), relay.shape_of(bop_686))) # shape=(10, 16)
uop_693 = relay.rsqrt(uop_682.astype('float32')) # shape=(10, 16)
func_222_call = mod.get_global_var('func_222')
func_228_call = mutated_mod.get_global_var('func_228')
var_696 = relay.var("var_696", dtype = "bool", shape = (156,))#candidate|696|(156,)|var|bool
var_697 = relay.var("var_697", dtype = "float64", shape = (2145,))#candidate|697|(2145,)|var|float64
call_695 = relay.TupleGetItem(func_222_call(relay.reshape(var_696.astype('bool'), [6, 13, 2]), relay.reshape(var_697.astype('float64'), [2145,]), relay.reshape(var_696.astype('float32'), [6, 13, 2]), relay.reshape(var_696.astype('int32'), [6, 13, 2]), ), 6)
call_698 = relay.TupleGetItem(func_228_call(relay.reshape(var_696.astype('bool'), [6, 13, 2]), relay.reshape(var_697.astype('float64'), [2145,]), relay.reshape(var_696.astype('float32'), [6, 13, 2]), relay.reshape(var_696.astype('int32'), [6, 13, 2]), ), 6)
var_700 = relay.var("var_700", dtype = "float64", shape = (10, 16))#candidate|700|(10, 16)|var|float64
bop_701 = relay.floor_divide(uop_675.astype('float32'), relay.reshape(var_700.astype('float32'), relay.shape_of(uop_675))) # shape=(10, 16)
output = relay.Tuple([call_677,var_678,const_679,bop_690,uop_693,call_695,var_696,var_697,bop_701,])
output2 = relay.Tuple([call_680,var_678,const_679,bop_690,uop_693,call_698,var_696,var_697,bop_701,])
func_705 = relay.Function([var_674,var_678,var_696,var_697,var_700,], output)
mod['func_705'] = func_705
mod = relay.transform.InferType()(mod)
var_706 = relay.var("var_706", dtype = "float64", shape = (10, 16))#candidate|706|(10, 16)|var|float64
var_707 = relay.var("var_707", dtype = "int8", shape = (66,))#candidate|707|(66,)|var|int8
var_708 = relay.var("var_708", dtype = "bool", shape = (156,))#candidate|708|(156,)|var|bool
var_709 = relay.var("var_709", dtype = "float64", shape = (2145,))#candidate|709|(2145,)|var|float64
var_710 = relay.var("var_710", dtype = "float64", shape = (10, 16))#candidate|710|(10, 16)|var|float64
output = func_705(var_706,var_707,var_708,var_709,var_710,)
func_711 = relay.Function([var_706,var_707,var_708,var_709,var_710,], output)
mutated_mod['func_711'] = func_711
mutated_mod = relay.transform.InferType()(mutated_mod)
const_718 = relay.const([5.474953,8.114599,-9.269543,0.377375,-4.068558,9.668602,5.335978,-4.057582,5.310957,-3.666180], dtype = "float32")#candidate|718|(10,)|const|float32
uop_719 = relay.tan(const_718.astype('float32')) # shape=(10,)
bop_733 = relay.less_equal(uop_719.astype('bool'), relay.reshape(const_718.astype('bool'), relay.shape_of(uop_719))) # shape=(10,)
output = relay.Tuple([bop_733,])
output2 = relay.Tuple([bop_733,])
func_739 = relay.Function([], output)
mod['func_739'] = func_739
mod = relay.transform.InferType()(mod)
output = func_739()
func_740 = relay.Function([], output)
mutated_mod['func_740'] = func_740
mutated_mod = relay.transform.InferType()(mutated_mod)
var_750 = relay.var("var_750", dtype = "float32", shape = (13, 14))#candidate|750|(13, 14)|var|float32
uop_751 = relay.sin(var_750.astype('float32')) # shape=(13, 14)
output = uop_751
output2 = uop_751
func_753 = relay.Function([var_750,], output)
mod['func_753'] = func_753
mod = relay.transform.InferType()(mod)
mutated_mod['func_753'] = func_753
mutated_mod = relay.transform.InferType()(mutated_mod)
var_754 = relay.var("var_754", dtype = "float32", shape = (13, 14))#candidate|754|(13, 14)|var|float32
func_753_call = mutated_mod.get_global_var('func_753')
call_755 = func_753_call(var_754)
output = call_755
func_756 = relay.Function([var_754], output)
mutated_mod['func_756'] = func_756
mutated_mod = relay.transform.InferType()(mutated_mod)
func_739_call = mod.get_global_var('func_739')
func_740_call = mutated_mod.get_global_var('func_740')
call_766 = relay.TupleGetItem(func_739_call(), 0)
call_767 = relay.TupleGetItem(func_740_call(), 0)
uop_770 = relay.asinh(call_766.astype('float64')) # shape=(10,)
uop_772 = relay.asinh(call_767.astype('float64')) # shape=(10,)
bop_776 = relay.maximum(call_766.astype('int32'), relay.reshape(uop_770.astype('int32'), relay.shape_of(call_766))) # shape=(10,)
bop_779 = relay.maximum(call_767.astype('int32'), relay.reshape(uop_772.astype('int32'), relay.shape_of(call_767))) # shape=(10,)
output = relay.Tuple([bop_776,])
output2 = relay.Tuple([bop_779,])
func_785 = relay.Function([], output)
mod['func_785'] = func_785
mod = relay.transform.InferType()(mod)
mutated_mod['func_785'] = func_785
mutated_mod = relay.transform.InferType()(mutated_mod)
func_785_call = mutated_mod.get_global_var('func_785')
call_786 = func_785_call()
output = call_786
func_787 = relay.Function([], output)
mutated_mod['func_787'] = func_787
mutated_mod = relay.transform.InferType()(mutated_mod)
var_808 = relay.var("var_808", dtype = "float32", shape = (16,))#candidate|808|(16,)|var|float32
var_809 = relay.var("var_809", dtype = "float32", shape = (16,))#candidate|809|(16,)|var|float32
bop_810 = relay.greater_equal(var_808.astype('bool'), relay.reshape(var_809.astype('bool'), relay.shape_of(var_808))) # shape=(16,)
output = relay.Tuple([bop_810,])
output2 = relay.Tuple([bop_810,])
func_813 = relay.Function([var_808,var_809,], output)
mod['func_813'] = func_813
mod = relay.transform.InferType()(mod)
var_814 = relay.var("var_814", dtype = "float32", shape = (16,))#candidate|814|(16,)|var|float32
var_815 = relay.var("var_815", dtype = "float32", shape = (16,))#candidate|815|(16,)|var|float32
output = func_813(var_814,var_815,)
func_816 = relay.Function([var_814,var_815,], output)
mutated_mod['func_816'] = func_816
mutated_mod = relay.transform.InferType()(mutated_mod)
func_739_call = mod.get_global_var('func_739')
func_740_call = mutated_mod.get_global_var('func_740')
call_818 = relay.TupleGetItem(func_739_call(), 0)
call_819 = relay.TupleGetItem(func_740_call(), 0)
var_836 = relay.var("var_836", dtype = "bool", shape = (10,))#candidate|836|(10,)|var|bool
bop_837 = relay.greater(call_818.astype('bool'), relay.reshape(var_836.astype('bool'), relay.shape_of(call_818))) # shape=(10,)
bop_840 = relay.greater(call_819.astype('bool'), relay.reshape(var_836.astype('bool'), relay.shape_of(call_819))) # shape=(10,)
func_666_call = mod.get_global_var('func_666')
func_672_call = mutated_mod.get_global_var('func_672')
const_845 = relay.const([True,False,False,True,True,False,False,False,True,True,True,True,False,False,True,False,False,True,False,True,True,False,True,True,False,True,False,True,True,True,True,False,True,False,False,False,False,False,False,True,True,True,False,True,True,True,False,False,False,False,True,True,False,False,False,False,False,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,False,False,True,False,True,True,False,True,True,True,False,False,False,True,False,False,False,False,True,False,True,True,True,False,True,False,True,False,True,True,False,True,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,False,True,False,False,False,False,True,False,True,True,True,True,False,False,True,False,True,True,True,True,False,True,False,False,False,True,True,True,False,False,False,False,True,False,True,True,False,False,True,False,False,False,True,False,False,True,False,True,False,False,False,False,True,False,False,True,True,True,False,True,True,False,False,False,False,True,True,True,True,False,True,True,False,False,False,False,True,False,True,True,False,True,True,True,True,False,False,True,True,False,False,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False,False,True,True,False,False,True,True,False,True,True,False,True,False,True,False], dtype = "bool")#candidate|845|(240,)|const|bool
const_846 = relay.const([2.288594,-2.198630,7.714661,-9.449216,0.175270,-9.279810,-5.840121,-5.938571,5.020556,7.183786,6.061491,8.514290,6.721210,5.268206,-4.224463,-6.235651,-4.266094,-0.939067,-4.263599,-0.503023,4.918116,-9.868918,7.984656,-8.518238,-2.836563,-4.476000,-8.347628,-7.897772,-4.349124,1.924477,-1.318131,4.811117,-5.308297,-2.342140,-7.962828,-8.278418,5.972172,-8.417332,-8.468247,-9.683407,-6.837736,-4.519325,-9.513184,-0.914522,-1.440479,6.595238,6.852857,-2.662613,-7.213411,8.222200,6.788374,1.186425,-5.197863,2.856324,-1.291287,-9.741500,-9.401975,-1.965784,6.511802,-7.315879,-3.027964,-4.688015,-9.919397,8.645437,-5.326647,7.429662,-8.378425,-2.461367,-3.706212,4.180568,6.879864,-5.373762,-0.285017,0.182361,9.938101,-9.281938,2.277123,-6.977047,5.540371,8.857330], dtype = "float32")#candidate|846|(80,)|const|float32
var_847 = relay.var("var_847", dtype = "float64", shape = (4,))#candidate|847|(4,)|var|float64
const_848 = relay.const([4.969317,-6.500646,-2.182285,-0.277709,9.434404,-2.853082,3.015577,-3.602980,-3.016264,-0.517944,-3.829230,4.224171,3.568107,-5.724233,-0.631440,-4.030969,-9.804828,7.239210,2.947233,-5.535728,7.209093,-1.056359,5.349075,7.497739,7.787006,6.137058,6.401165,-7.800442,2.183990,8.339667,-3.274262,9.486808,5.838613,-8.221413,-2.158172,6.078379,4.523496,4.514482,0.225053,-6.149275,-0.204503,-1.991111,-6.546640,-2.347531,8.623272,-5.392840,-6.790179,0.372684,-0.214240,-1.878683,-3.146859,-1.726777,4.718036,-1.645230,-4.896201,4.390802,-5.808684,5.131434,-4.754714,-1.497773,0.539720,-5.296719,-9.814534,4.971228,2.196947,4.763024,-7.745023,2.475939,6.455186,-0.249544,4.021193,2.473266,9.481604,-2.771927,-8.141144,-6.195273,0.543031,6.640563,-0.758742,-0.845045,4.660207,5.035439,4.712666,7.345455,-8.283020,7.363679,-7.904816,0.581722,7.395128,9.603474,-0.490985,0.575530,-0.435701,1.261246,-4.500971,-3.004252,6.666066,8.316856,4.084006,-6.321608,-2.882231,3.912245,-9.836166,-8.687212,-2.131501,5.515444,4.034566,3.555097,-2.463128,-9.290092,-8.627506,-1.212712,-2.667721,5.625601,-5.303007,5.600136,0.590513,9.040917,9.870742,2.194016,-6.403592,-2.200360,0.931350,3.717305,-4.005203,-6.069362,0.608418,9.015386,-5.073680,0.253746,-6.860839,7.743204,7.483446,6.174941,7.556450,-4.124941,5.588803,5.742362,-9.640865,-6.221928,6.536012,-2.571150,0.239187,-9.128467,-9.362677,8.822019,1.100032,-0.849454,9.559489,7.477789,-3.274642,-0.361881,0.971261,-8.637101,9.540818,-1.562250,-2.914776,6.679234,-9.159929,2.952458,7.073047,1.555909,-2.499615,6.534446,8.015812,-0.978279,-4.727005,-5.534882,-9.242208,-6.869984,7.629374,-9.650077,1.135829,-8.799883,-6.201995,-2.201215,-2.363587,-9.744646,5.565260,-5.650683,-7.573306,-9.768519,-8.500292,-5.703615,5.149543,-4.115869,-7.426749,-7.437952,-6.777194,4.704699,2.437482,-1.896596,-1.852646,-6.435739,-5.486025,-8.429694,8.842120,5.612928,8.122275,-8.829866,-6.682931,-8.916382,-8.912206,-9.963921,9.910543,6.684782,5.227260,-0.375622,-0.903068,5.960402,0.235980,2.871165,-6.555592,-3.097955,6.605557,1.031299,6.790637,-1.570857,-2.640888,-2.535259,-1.617039,-5.163176,5.466383,4.438637,3.544830,-3.881455,4.194374,4.684402,9.387658,9.312394,7.679082,-2.600980,-0.042697,-5.711914,-0.311815,-0.440396,-4.739971,-0.714969,4.612978,5.711847,9.584426,-7.650798,4.906799,-4.635429,3.278095,7.824947,-4.691907,-7.864099,-9.973511,-6.231648,4.093867,-4.197018,4.761718,-4.887296,-0.299876,-7.733970,6.151738,-4.427521,-5.520876,0.096314,3.639040,-4.765184,8.531889,-9.546330,6.238582,-8.918054,-7.250646,-5.850292,7.377086,-8.574678,-7.105975,5.886171,2.325819,2.295285,6.974987,-7.468103,2.021065,-7.268829,8.750873,6.955505,8.193920,3.267690,-2.546968,-9.339856,-3.561344,3.316285,3.562641,3.008613,9.561596,-0.637367,5.651844,4.543074,-5.910590,5.057280,-9.146879,-2.214978,-8.682554,6.702713,-7.226423,5.287475,4.653126,0.523679,7.560124,4.633905,7.702138,2.365449,-0.587192,-0.581313,0.445946,-7.661613,-0.771788,3.497587,2.293032,1.599279,-6.237868,-5.203169,7.112979,-2.270905,-0.675269,5.593414,-4.958038,0.077553,5.245454,2.429061,6.050377,6.075393,-4.887553,0.845822,1.514465,1.335340,3.652094,7.414043,-4.393064,6.378655,-2.405983,-3.048483,-7.811496,6.610972,0.199603,-2.841593,7.675432,-2.909330,-7.460587,9.799389,-0.895127,-4.695553,-9.052144,6.873740,1.708269,-1.414065,0.943317,-0.580395,-4.472582,-7.506255,-1.440937,-2.712897,-8.499931,-0.882071,-5.777418,-0.890252,-8.653354,-8.448171,5.894020,1.069618,9.160555,-3.343422,6.605358,-4.937137,-1.951395,7.473737,2.610215,-4.813799,5.072770,-9.420599,-4.857873,-7.416819,2.757876,-2.546503,-3.502964,-1.419970,9.424413,2.706314,5.361764,-5.175506,-5.698363,9.639524,6.625413,4.161183,-7.584238,0.979423,-5.040435,7.530280,-6.151705,-2.009554,-6.555406,-8.381738,0.226473,-1.350590,7.762628,1.807579,-9.278366,9.862313,-6.604048,-3.125692,1.572536,-1.044586,-9.064825,0.177489,9.377132,2.483388,-0.827366,0.097804,2.550987,6.979668,-6.708279,-4.805698,7.789798,-9.495311,-1.334061,-5.875543,-7.253474,-9.707035,-6.381619,-2.387301,3.878536,1.007842,8.096054,-2.066629,-4.745359,-2.426087,-1.595106,-0.708286,-0.590159,2.913368,3.760305,-5.615993,-0.732736,-9.108399,5.207986,-0.778856,7.846648,-0.992754,-3.054300,2.275832,-1.088240,7.653775,5.312663,-0.640245,1.037990,-5.888680,4.433331,-5.341285,0.039738,9.716120,9.121361,-4.420052,1.519249,-3.494538,2.307710,2.465670,6.838718,-2.853310,-4.501754,-5.766698,-5.244709,-3.737390,-3.380637,-9.267352,-9.863764,-4.394402,6.088928,-1.739770,7.167363,0.777212,-8.366809,6.397854,8.310851,-3.470883,-9.643929,9.978500,-3.029593,1.578281,1.064557,-5.267537,9.525546,6.280271,8.749703,1.607358,-1.192719,9.019658,3.581022,-8.213344,-0.213207,-9.154147,-5.492360,-9.931995,-0.864692,4.597459,0.441063,1.801024,-2.322336,3.423796,-1.057159,-0.279923,1.079289,8.107445,-0.021409,-3.635377,7.892986,-7.378540,-6.990287,-3.916242,-9.814427,-8.092283,9.602509,-1.737181,3.817707,-7.008846,-4.303055,-3.655673,-1.601745,7.053909,-9.998063,-4.701865,-4.646337,3.021234,9.078170,2.387306,2.876279,3.193143,6.539905,-5.262762,3.218352,-9.874059,8.298525,-5.751154,8.636534,2.875379,0.903715,8.826084,-7.829791,-5.301134,-4.945020,8.375643,-4.707224,-2.349283,-6.102193,-2.537991,5.496398,7.412017,9.905681,1.797484,2.291399,-1.076271,-9.331217,6.413845,-2.659950,-6.432057,5.183290,-9.261254,-7.783054,-2.146375,3.862107,-9.649488,9.846385,-1.952453,4.723169,0.540193,-7.376330,3.960527,2.924339,0.760479,0.023563,-6.420018,1.251459,-0.282612,-9.818428,-7.360533,7.481713,-1.778349,-1.234923,3.666758,-4.803696,5.137875,7.343910,5.065027,8.186310,-2.163885,-6.146021,3.971025,-0.052459,4.171322,-7.813227,-3.967202,3.203881,9.391093,9.644320,5.405552,6.787875,-4.641407,-2.296310,-2.168772,-4.891044,-2.514528,6.560591,-1.422943,4.646296,-3.968023,0.756106,7.963827,-2.507391,5.038801,5.874776,2.984113,5.965593,8.344157,-8.067453,7.264420,4.055005,6.681794,9.637393,-1.073651,-3.233443,0.524686,9.873248,-9.996400,5.572341,-5.067951,-0.233498,4.335097,6.645842,6.080333,-1.526631,0.151900,-4.069722,9.884360,-0.045210,-8.015292,-6.129719,7.956729,-7.421318,0.682311,3.318410,4.865641,-8.845082,3.978066,8.883111,1.153467,5.790210,7.642626,7.845326,2.404717,-4.206768,-6.635419,2.318097,4.060069,3.317738,6.291802,-2.280431,2.332839,-1.084756,-5.934192,2.028925,9.508944,-0.930743,2.525120,4.680566,-6.323726,-9.604510,5.212135,-7.328895,-4.470283,4.896866,-2.851575,-6.171979,-9.424882,-6.731507,-1.867382,-8.154353,-3.138933,7.044529,9.395007,-2.665523,-3.861053,-9.910272,4.467017,-6.027037,7.063771,7.112310,8.245422,8.645126,-0.571804,2.211772,5.551669,8.764637,-4.013911,6.595265,1.688758,8.571570,1.566938,7.989267,-7.198912,-1.277982,-2.850453,1.025100,9.574669,7.596731,-8.540636,-9.274299,0.927603,2.873475,-4.951740,0.884823,2.075334,-0.199055,-1.372370,4.554153,8.376323,-5.703855,7.514818,-9.487891,-7.453357,0.554732,-3.694940,4.006291,7.509512,7.453931,8.626914,5.838820,-6.408240,7.150974,-6.920026,5.278388,-9.275769,5.705903,-0.434702,-1.229001,1.097393,8.382203,-3.177012,6.960697,-8.752770,9.778824,3.394125,-0.782860,-4.889424,1.730224,-0.132196,2.466764,-6.215368,-2.933476,-5.626574,-1.172416,-9.588818,9.657650,-0.233190,-3.423634,1.188637,-2.643616,9.566175,-9.890653,3.154887,-9.898526,2.576417,-9.824968,-5.301230,-3.509131,-1.500542,-2.760844,-8.302064,0.514990,7.834988,5.509853,0.700428,0.197666,-7.042901,5.880131,0.499699,7.248007,4.802517,9.280647,4.899560,-5.688971,-2.084783,-5.660107,-8.657684,8.821052,-0.594637,-6.351665,-6.893826,-2.619006,-2.511124,-0.878418,4.941947,-1.781523,-0.019170,-3.869325,7.224727,8.741459,8.558525,-9.695452,5.557100,2.365020,5.101135,3.950994,-2.955148,-1.301635,1.140859,-3.679779,5.998232,4.449415,-4.632014,4.207625,-1.799772,7.361891,-4.200278,2.365672,6.243367,1.979230,3.840554,6.457058,-8.699733,-1.876005,-4.674340,-0.641046,8.078554,7.227711,4.851793,5.912377,6.879532,-2.850429,-5.957089,9.461380,-7.954095,-7.174286,-2.348334,2.575616,-5.575451,-6.983200,1.306813,-6.514831,7.440453,-4.813567,-6.184086,-4.859904,2.001763,5.178716,4.438981,8.921102,-1.514801,6.513176,6.058244,8.765574,-9.301775,8.787825,1.533642,-3.778860,2.777836,5.538248,-7.222293,-5.925064,-4.622552,8.567666,-3.950984,-1.996066,6.348904,2.209733,-7.536797,-3.075981,2.168873,-4.335463,9.461116,2.820669,-9.594710,-1.315005,-8.624868,-0.255359,-8.724105,-7.284792,-7.308147,1.276003,-2.078893,8.552769,-0.201621,3.003190,9.275402,-0.309925,-0.980907,1.103458,-8.772451,3.854415,-8.067269,-7.053197,-0.748213,-3.611017,3.267425,-8.736808,-3.481337,-5.328818,1.668565,-9.835085,-6.348734,0.095127,-6.285374,9.946308,-5.619273,-6.974075,-1.370797,8.581513,0.124527,8.159906,-0.964196,4.692850,3.992670,4.636067,8.942788,1.829354,-1.060798,5.547979,-7.436249,6.549840,7.827070,5.341249,-3.363640,-6.098134,-4.638976,-1.654235,5.657190,-2.113372,-9.618341,9.884562,5.202229,0.287938,0.052436,6.661126,2.858386,-7.305723,-5.386555,-0.786546,1.234862,-5.420532,-0.502071,-6.510583,-2.633306,3.027580,-7.350714,4.231949,5.114424,9.602011,3.289855,-5.702735,8.436671,5.014358,9.445617,7.422766,5.975745,-8.624708,-3.903298,6.554231,4.845154,9.829194,-8.179775,-3.609005,2.050093,-0.731283,-2.805847,3.547026,-7.568427,2.470567,-7.239052,-1.508098,-9.749443,-9.741663,2.317117,-2.452680,-3.731785,-4.003603,-9.540247,-5.210716,-2.193358,-6.085431,-6.132337,-7.168759,-7.187654,-3.087000,-0.443961,-0.849877,4.070750,-9.436166,0.164001,-2.516628,-9.635284,-1.603362,7.910354,2.215487,6.151584,-8.291473,0.384889,-9.443856,-7.877631,1.345829,8.989150,7.219680,-3.178617,0.128112,-2.189493,3.595272,-2.937255,9.678565,-5.898398,3.183890,-7.699208,1.274646,8.259166,-6.629039,-0.027131,-4.178438,0.988861,5.094237,9.800954,4.645841,-9.754052,4.343362,-1.721352,-7.179374,1.201629,3.808000,4.855907,7.895715,-1.429820,-3.773201,1.288255,7.386890,-7.280780,-7.962264,7.031517,-7.356624,-5.119405,7.346029,-1.525356,-8.835096,0.779532,-2.358513,-9.798174,4.694126,9.041842,-3.163775,2.945263,7.377042,-9.828643,7.123104,-9.543824,3.111718,6.464276,8.895730,-4.584344,3.510625,1.944481,-1.743050,-0.954914,0.831689,9.282954,-6.800484,7.273787,-7.881511,-1.197753,9.543633,4.239684,2.421719,1.845401,3.093898,-3.230971,-8.925074,-7.750637,-6.254366,-2.818271,-5.330485,5.731966,-4.181207,-7.449792,-4.147848,2.445913,3.919941,-8.439621,0.120081,-2.633564,2.013444,-3.164455,-3.181560,-6.868326,0.702058,-5.320031,-1.350674,-5.915624,-9.009758,8.911274,6.710286,3.114503,-2.794032,-6.607500,1.348295,-3.976234,8.173303,-4.951557,8.156492,-7.799583,-8.893656,-6.221996,-7.070947,6.208050,7.317466,0.640828,8.543667,-0.655226,-4.849030,-7.553103,4.897706,-0.615351,7.190704,-3.935054,0.202607,1.632053,-0.608975,-5.742273,-7.714720,9.355900,4.246341,4.841897,0.788429,-3.443655,-2.101176,-5.522855,3.402596,-4.930631,2.230403,7.147899,-7.927371,-4.413653,-7.776809,6.307010,9.742997,-5.017508,-6.942694,2.405186,2.852069,4.411821,-4.451836,2.273759,5.615049,-8.249986,7.738257,9.654701,-5.351522,-6.309893,8.812606], dtype = "float64")#candidate|848|(1155,)|const|float64
call_844 = relay.TupleGetItem(func_666_call(relay.reshape(const_845.astype('bool'), [8, 10, 3]), relay.reshape(const_846.astype('float32'), [80,]), relay.reshape(var_847.astype('float64'), [1, 4]), relay.reshape(const_848.astype('float64'), [1155,]), ), 5)
call_849 = relay.TupleGetItem(func_672_call(relay.reshape(const_845.astype('bool'), [8, 10, 3]), relay.reshape(const_846.astype('float32'), [80,]), relay.reshape(var_847.astype('float64'), [1, 4]), relay.reshape(const_848.astype('float64'), [1155,]), ), 5)
output = relay.Tuple([bop_837,call_844,const_845,const_846,var_847,const_848,])
output2 = relay.Tuple([bop_840,call_849,const_845,const_846,var_847,const_848,])
func_850 = relay.Function([var_836,var_847,], output)
mod['func_850'] = func_850
mod = relay.transform.InferType()(mod)
var_851 = relay.var("var_851", dtype = "bool", shape = (10,))#candidate|851|(10,)|var|bool
var_852 = relay.var("var_852", dtype = "float64", shape = (4,))#candidate|852|(4,)|var|float64
output = func_850(var_851,var_852,)
func_853 = relay.Function([var_851,var_852,], output)
mutated_mod['func_853'] = func_853
mutated_mod = relay.transform.InferType()(mutated_mod)
func_785_call = mod.get_global_var('func_785')
func_787_call = mutated_mod.get_global_var('func_787')
call_880 = relay.TupleGetItem(func_785_call(), 0)
call_881 = relay.TupleGetItem(func_787_call(), 0)
output = relay.Tuple([call_880,])
output2 = relay.Tuple([call_881,])
func_887 = relay.Function([], output)
mod['func_887'] = func_887
mod = relay.transform.InferType()(mod)
output = func_887()
func_888 = relay.Function([], output)
mutated_mod['func_888'] = func_888
mutated_mod = relay.transform.InferType()(mutated_mod)
const_906 = relay.const([[[5.340163,4.232155,-6.454078,-8.529707,7.769426],[0.811719,4.043674,-4.787336,9.133997,7.521862],[3.910159,-2.613821,-1.739323,-4.776519,9.448410]],[[-8.937204,-2.952989,1.893939,-1.231399,3.445447],[3.089311,-1.341415,6.373335,-2.295024,-5.666240],[4.537104,4.747772,-7.678076,-3.034667,3.159876]],[[-3.182286,-0.017440,0.808433,-4.177852,9.255532],[8.379990,-0.981083,-4.506250,1.009536,-9.675550],[-0.263412,4.654017,1.950787,6.368411,6.366346]],[[-8.279921,-8.464932,-2.265580,-0.877795,0.164603],[-3.114239,-5.827268,-9.523336,-9.065260,2.716966],[-7.198422,2.077869,-9.664074,1.754571,-0.193132]],[[-5.099413,-7.263923,6.057350,2.000679,5.759264],[3.931935,5.516097,-5.604101,-2.607039,9.216649],[4.099434,1.709045,-3.275687,-0.396923,3.725271]],[[-9.469085,2.227792,8.284545,3.774771,-1.392089],[5.975645,-0.102336,-0.292312,2.891410,3.142191],[-4.005725,-6.816015,4.398110,2.039308,-7.103596]],[[-4.426139,5.381011,5.618277,-9.096311,3.369949],[-5.527252,7.621303,3.270544,8.871220,-2.920069],[-1.267219,-0.497455,1.481016,9.797288,1.839520]],[[9.568658,-5.255952,7.455674,0.387927,-1.184018],[-7.600927,-3.360847,2.865248,0.110627,-7.993571],[0.633625,0.538936,6.607899,-9.051152,6.263293]],[[-2.881557,3.177364,2.756985,-6.675375,2.146045],[6.778795,5.263532,5.193960,-1.989963,-6.075229],[-1.057235,6.444568,2.074678,-2.178642,8.698595]],[[5.585590,6.863718,-6.905767,3.905172,7.787806],[9.203724,-1.966905,-1.651682,2.214798,0.244059],[2.794365,5.655734,0.799920,4.201956,-5.213636]],[[1.453524,-0.771396,1.439980,-0.617744,-7.600695],[0.358570,-2.147486,-6.206481,5.008971,4.406434],[8.487382,-3.243255,4.090328,0.678386,-2.722736]],[[9.731689,0.798087,-8.547017,-4.940675,5.181014],[-7.169877,-4.766894,8.478950,-3.918293,-0.213913],[5.676893,-0.435198,4.233083,6.772709,7.682174]],[[-5.434066,5.643490,-3.893432,-2.949121,-2.147351],[9.752195,-7.049073,-1.916044,2.526310,-9.162913],[-2.939042,3.360999,-4.855233,6.707498,-6.513249]],[[1.260554,0.792724,-9.855506,-5.093668,8.092595],[9.464439,7.490515,-8.782981,7.043176,-9.374712],[-1.055495,8.515973,-9.607969,-5.683639,3.170313]],[[-8.412681,8.203960,5.162393,8.699245,5.558892],[6.456283,-5.075711,-2.283153,-2.235250,-4.148948],[-7.876249,3.959998,-4.948011,1.633742,2.721739]],[[5.057878,4.429513,-6.089959,1.875713,-6.693358],[-6.037009,7.639461,-1.411552,8.176281,8.927971],[-1.663010,-4.023401,4.231889,8.522020,2.660335]]], dtype = "float64")#candidate|906|(16, 3, 5)|const|float64
uop_907 = relay.sin(const_906.astype('float64')) # shape=(16, 3, 5)
func_753_call = mod.get_global_var('func_753')
func_756_call = mutated_mod.get_global_var('func_756')
const_910 = relay.const([-7.688946,5.688708,8.556433,1.330275,-3.965480,-2.879728,-2.069651,0.211303,-0.776131,-7.716369,3.390997,-0.294223,-6.788224,-3.283623,-8.316888,8.377273,7.897702,-0.117972,0.561288,-5.023321,-7.139607,-9.268924,2.314522,-1.707378,-6.526394,-3.523520,-3.885156,5.547017,0.264127,5.482840,-3.693491,-5.431345,0.109928,9.958293,-5.852695,3.631126,-1.382727,-7.923260,9.228161,8.886227,8.680741,2.672553,5.920207,5.525839,9.666179,-8.935678,5.856969,6.070064,-0.680806,5.257726,-8.368766,2.228846,-4.723392,3.459918,0.252593,8.856009,-8.095377,-7.775728,2.990835,-6.873677,-5.012046,3.574776,9.665810,3.566562,1.837137,-5.889453,9.343245,-7.194364,2.014427,0.292477,2.942483,-0.383765,7.594549,1.922193,-5.000998,5.033321,-3.589146,-5.882300,-4.319400,1.397862,0.531789,9.126627,-9.270082,-6.533206,7.748077,-1.212444,1.812037,-9.855490,6.722521,3.927863,6.976551,5.932684,5.394094,0.541691,0.383947,6.359698,6.581135,7.496505,9.407629,2.428724,7.919280,3.354682,-8.237828,5.531920,6.171965,4.539955,-6.250298,-5.810293,0.348245,9.332880,9.991118,1.048722,1.586600,-3.586855,-1.262110,-0.600707,2.220456,-6.998133,7.804053,8.113542,1.331178,-1.791705,1.810432,1.240953,-7.545033,8.620374,-2.290227,-7.477888,9.812896,-0.641145,7.467019,4.178967,-3.964404,-4.022958,-0.684754,-1.822480,2.824310,1.502923,1.720310,7.425656,5.403110,8.966640,0.279620,8.818025,-2.139596,-7.024977,-1.388539,-0.354188,-2.678845,6.053059,8.283839,-3.100266,-9.910691,3.999044,-8.683764,5.345239,-7.515226,8.962446,3.428963,-6.912563,-2.831432,1.791553,2.577560,5.071853,-7.115056,-2.962745,-8.604177,-2.539864,-3.978091,9.436949,-3.692762,-0.744722,8.000684,-0.223974,-7.977488,9.514742,-9.526329,-8.181413,-1.170969,6.744645,-7.024542,-3.958568], dtype = "float32")#candidate|910|(182,)|const|float32
call_909 = func_753_call(relay.reshape(const_910.astype('float32'), [13, 14]))
call_911 = func_753_call(relay.reshape(const_910.astype('float32'), [13, 14]))
uop_915 = relay.tan(uop_907.astype('float64')) # shape=(16, 3, 5)
var_919 = relay.var("var_919", dtype = "float64", shape = (16, 3, 5))#candidate|919|(16, 3, 5)|var|float64
bop_920 = relay.bitwise_and(uop_915.astype('int8'), relay.reshape(var_919.astype('int8'), relay.shape_of(uop_915))) # shape=(16, 3, 5)
bop_924 = relay.equal(uop_915.astype('bool'), relay.reshape(var_919.astype('bool'), relay.shape_of(uop_915))) # shape=(16, 3, 5)
const_927 = relay.const([[[True,True,True,False,True],[True,False,True,True,False],[False,True,False,True,False]],[[False,True,False,True,True],[False,True,True,True,True],[False,True,False,False,True]],[[False,True,False,False,False],[False,True,False,True,False],[False,False,True,True,True]],[[True,True,False,False,False],[False,False,False,True,False],[True,True,True,True,True]],[[False,False,True,False,False],[True,False,True,True,False],[True,False,False,True,True]],[[True,False,False,False,False],[True,False,True,True,True],[True,False,False,False,False]],[[True,False,False,False,False],[False,True,True,True,True],[True,False,True,True,True]],[[False,False,False,False,False],[False,True,False,True,False],[True,False,True,True,False]],[[True,True,False,True,True],[True,True,True,False,False],[False,True,False,True,False]],[[False,True,False,False,True],[True,False,True,True,False],[True,True,False,False,False]],[[True,True,True,True,False],[True,False,True,False,False],[True,False,True,False,True]],[[True,False,False,False,False],[True,True,False,False,False],[False,False,True,True,False]],[[False,False,False,True,True],[False,False,False,False,False],[False,True,False,False,True]],[[True,True,True,True,True],[True,True,False,False,True],[True,False,True,False,True]],[[False,False,True,False,False],[True,False,False,True,False],[True,True,False,True,True]],[[True,True,True,True,False],[False,False,True,True,False],[True,False,True,False,False]]], dtype = "bool")#candidate|927|(16, 3, 5)|const|bool
bop_928 = relay.bitwise_or(bop_924.astype('uint8'), relay.reshape(const_927.astype('uint8'), relay.shape_of(bop_924))) # shape=(16, 3, 5)
var_933 = relay.var("var_933", dtype = "float64", shape = (16, 3, 5))#candidate|933|(16, 3, 5)|var|float64
bop_934 = relay.bitwise_xor(uop_915.astype('uint16'), relay.reshape(var_933.astype('uint16'), relay.shape_of(uop_915))) # shape=(16, 3, 5)
var_940 = relay.var("var_940", dtype = "int8", shape = (16, 3, 5))#candidate|940|(16, 3, 5)|var|int8
bop_941 = relay.greater_equal(bop_920.astype('bool'), relay.reshape(var_940.astype('bool'), relay.shape_of(bop_920))) # shape=(16, 3, 5)
uop_944 = relay.atan(uop_907.astype('float64')) # shape=(16, 3, 5)
uop_946 = relay.cos(uop_907.astype('float64')) # shape=(16, 3, 5)
func_666_call = mod.get_global_var('func_666')
func_672_call = mutated_mod.get_global_var('func_672')
const_950 = relay.const([-8.577471,1.312522,-8.371986,9.739045,-9.445614,4.084973,4.742188,9.314753,-6.559182,3.473554,4.076003,-9.223977,4.609103,-4.247958,5.242007,1.973897,-7.172087,-4.177482,-3.618988,-8.965020,-7.484827,-8.962387,-8.932634,6.069626,-2.543972,-0.175508,0.419459,7.020240,-0.385233,6.215764,3.260885,1.733367,-8.671176,-5.756499,-5.867146,8.421524,9.866210,-7.482325,2.726216,-6.706335,-4.615849,2.615327,8.983472,-2.308546,-8.789297,9.652563,-9.193373,1.892034,-7.410796,6.373359,-4.366233,-5.327334,6.177598,-3.747555,-7.074392,-0.991603,7.028597,4.067780,-6.558903,-8.784678,7.377779,8.780718,6.669674,-9.511055,-1.408102,-9.864386,-3.644273,-5.027041,4.850221,8.406157,1.750729,9.320135,6.897465,9.461656,-1.155413,6.383122,-5.071507,-6.530312,0.935985,5.142289], dtype = "float32")#candidate|950|(80,)|const|float32
var_951 = relay.var("var_951", dtype = "float64", shape = (4,))#candidate|951|(4,)|var|float64
var_952 = relay.var("var_952", dtype = "float64", shape = (77, 15))#candidate|952|(77, 15)|var|float64
call_949 = relay.TupleGetItem(func_666_call(relay.reshape(uop_907.astype('bool'), [8, 10, 3]), relay.reshape(const_950.astype('float32'), [80,]), relay.reshape(var_951.astype('float64'), [1, 4]), relay.reshape(var_952.astype('float64'), [1155,]), ), 6)
call_953 = relay.TupleGetItem(func_672_call(relay.reshape(uop_907.astype('bool'), [8, 10, 3]), relay.reshape(const_950.astype('float32'), [80,]), relay.reshape(var_951.astype('float64'), [1, 4]), relay.reshape(var_952.astype('float64'), [1155,]), ), 6)
bop_961 = relay.logical_xor(uop_907.astype('uint16'), relay.reshape(bop_941.astype('uint16'), relay.shape_of(uop_907))) # shape=(16, 3, 5)
var_966 = relay.var("var_966", dtype = "float64", shape = (16, 3, 5))#candidate|966|(16, 3, 5)|var|float64
bop_967 = relay.power(uop_907.astype('float32'), relay.reshape(var_966.astype('float32'), relay.shape_of(uop_907))) # shape=(16, 3, 5)
bop_972 = relay.bitwise_or(uop_944.astype('uint32'), relay.reshape(bop_967.astype('uint32'), relay.shape_of(uop_944))) # shape=(16, 3, 5)
bop_975 = relay.power(bop_941.astype('float32'), relay.reshape(bop_972.astype('float32'), relay.shape_of(bop_941))) # shape=(16, 3, 5)
uop_982 = relay.sigmoid(bop_928.astype('float32')) # shape=(16, 3, 5)
output = relay.Tuple([call_909,const_910,bop_934,uop_946,call_949,const_950,var_951,var_952,bop_961,bop_975,uop_982,])
output2 = relay.Tuple([call_911,const_910,bop_934,uop_946,call_953,const_950,var_951,var_952,bop_961,bop_975,uop_982,])
func_986 = relay.Function([var_919,var_933,var_940,var_951,var_952,var_966,], output)
mod['func_986'] = func_986
mod = relay.transform.InferType()(mod)
mutated_mod['func_986'] = func_986
mutated_mod = relay.transform.InferType()(mutated_mod)
func_986_call = mutated_mod.get_global_var('func_986')
var_988 = relay.var("var_988", dtype = "float64", shape = (16, 3, 5))#candidate|988|(16, 3, 5)|var|float64
var_989 = relay.var("var_989", dtype = "float64", shape = (16, 3, 5))#candidate|989|(16, 3, 5)|var|float64
var_990 = relay.var("var_990", dtype = "int8", shape = (16, 3, 5))#candidate|990|(16, 3, 5)|var|int8
var_991 = relay.var("var_991", dtype = "float64", shape = (4,))#candidate|991|(4,)|var|float64
var_992 = relay.var("var_992", dtype = "float64", shape = (77, 15))#candidate|992|(77, 15)|var|float64
var_993 = relay.var("var_993", dtype = "float64", shape = (16, 3, 5))#candidate|993|(16, 3, 5)|var|float64
call_987 = func_986_call(var_988,var_989,var_990,var_991,var_992,var_993,)
output = call_987
func_994 = relay.Function([var_988,var_989,var_990,var_991,var_992,var_993,], output)
mutated_mod['func_994'] = func_994
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1000 = relay.var("var_1000", dtype = "int8", shape = (2,))#candidate|1000|(2,)|var|int8
var_1001 = relay.var("var_1001", dtype = "int8", shape = (2,))#candidate|1001|(2,)|var|int8
bop_1002 = relay.equal(var_1000.astype('bool'), relay.reshape(var_1001.astype('bool'), relay.shape_of(var_1000))) # shape=(2,)
uop_1006 = relay.acosh(var_1001.astype('float64')) # shape=(2,)
func_415_call = mod.get_global_var('func_415')
func_421_call = mutated_mod.get_global_var('func_421')
const_1010 = relay.const([[-9,-10,7,5,-3,-8,-8,10,-10],[10,6,-2,1,-3,-7,10,1,-4],[-7,4,2,1,-2,6,1,-6,5],[1,7,-4,10,-10,-6,-9,5,-3],[5,7,-4,-7,-10,-1,3,2,5],[-4,-2,5,-1,8,-10,-5,4,2],[6,2,-4,-2,6,-9,-7,-7,-9],[6,-9,-8,-7,3,6,9,7,-7],[-6,-10,-10,-3,-1,-8,5,2,10],[2,-2,7,2,-9,9,10,2,10],[-8,-1,-5,9,2,-3,-9,10,-2]], dtype = "uint32")#candidate|1010|(11, 9)|const|uint32
var_1011 = relay.var("var_1011", dtype = "float32", shape = (80,))#candidate|1011|(80,)|var|float32
call_1009 = relay.TupleGetItem(func_415_call(relay.reshape(const_1010.astype('uint32'), [11, 9]), relay.reshape(const_1010.astype('uint32'), [11, 9]), relay.reshape(const_1010.astype('bool'), [11, 9]), relay.reshape(var_1011.astype('float32'), [2, 40]), ), 2)
call_1012 = relay.TupleGetItem(func_421_call(relay.reshape(const_1010.astype('uint32'), [11, 9]), relay.reshape(const_1010.astype('uint32'), [11, 9]), relay.reshape(const_1010.astype('bool'), [11, 9]), relay.reshape(var_1011.astype('float32'), [2, 40]), ), 2)
uop_1017 = relay.erf(uop_1006.astype('float32')) # shape=(2,)
bop_1024 = relay.greater_equal(uop_1006.astype('bool'), relay.reshape(var_1001.astype('bool'), relay.shape_of(uop_1006))) # shape=(2,)
output = relay.Tuple([bop_1002,call_1009,const_1010,var_1011,uop_1017,bop_1024,])
output2 = relay.Tuple([bop_1002,call_1012,const_1010,var_1011,uop_1017,bop_1024,])
F = relay.Function([var_1000,var_1001,var_1011,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1000,var_1001,var_1011,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1000= np.array([1,6], dtype='int8')
module1.set_input('var_1000', input_1000)
input_1001= np.array([3,2], dtype='int8')
module1.set_input('var_1001', input_1001)
input_1011= np.array([1.543383,-8.060834,5.817451,-9.614134,-9.142183,4.366689,2.058856,-9.722260,3.418187,-8.975798,7.483653,1.399644,-4.144809,1.764390,9.125013,7.534604,-9.795227,-8.612237,-7.878647,-8.012227,9.824669,9.727694,-8.584961,3.766163,-7.118835,-4.222563,4.816713,-6.333290,-0.817062,-4.840049,-5.534549,8.010261,-9.588635,3.739855,-7.748429,3.700793,3.426300,2.112885,-5.237364,6.335699,-4.314633,-6.093146,2.981644,4.338883,-6.626825,5.835494,4.104467,4.499032,-6.950017,-2.560152,-3.615015,-4.757564,8.715565,-9.439224,-7.787993,-1.723399,1.449600,6.818292,7.060239,-8.904629,-3.848665,2.143261,-4.160081,6.418831,7.614122,-8.576272,0.647633,1.522878,-7.025519,-8.864437,-1.347566,4.666095,8.246001,-7.864390,3.812083,7.470905,0.244483,-5.776872,5.235659,-2.806367], dtype='float32')
module1.set_input('var_1011', input_1011)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1000, input_1001, input_1011, )
res3 = intrp3.evaluate()(input_1000, input_1001, input_1011, )
res4 = intrp4.evaluate()(input_1000, input_1001, input_1011, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
module5.set_input('var_1000', input_1000)
module5.set_input('var_1001', input_1001)
module5.set_input('var_1011', input_1011)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1000, input_1001, input_1011, )
res7 = intrp7.evaluate()(input_1000, input_1001, input_1011, )
res8 = intrp8.evaluate()(input_1000, input_1001, input_1011, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
module9.set_input('var_1000', input_1000)
module9.set_input('var_1001', input_1001)
module9.set_input('var_1011', input_1011)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1000, input_1001, input_1011, )
res11 = intrp11.evaluate()(input_1000, input_1001, input_1011, )
res12 = intrp12.evaluate()(input_1000, input_1001, input_1011, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
module13.set_input('var_1000', input_1000)
module13.set_input('var_1001', input_1001)
module13.set_input('var_1011', input_1011)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1000, input_1001, input_1011, )
res15 = intrp15.evaluate()(input_1000, input_1001, input_1011, )
res16 = intrp16.evaluate()(input_1000, input_1001, input_1011, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
module17.set_input('var_1000', input_1000)
module17.set_input('var_1001', input_1001)
module17.set_input('var_1011', input_1011)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1000, input_1001, input_1011, )
res19 = intrp19.evaluate()(input_1000, input_1001, input_1011, )
res20 = intrp20.evaluate()(input_1000, input_1001, input_1011, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
module21.set_input('var_1000', input_1000)
module21.set_input('var_1001', input_1001)
module21.set_input('var_1011', input_1011)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1000, input_1001, input_1011, )
res23 = intrp23.evaluate()(input_1000, input_1001, input_1011, )
res24 = intrp24.evaluate()(input_1000, input_1001, input_1011, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()

'''57: TVMFuncCall
56: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
55: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
54: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
53: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
52: tvm::transform::Pass::operator()(tvm::IRModule) const
51: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
50: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
49: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
48: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
47: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
46: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
45: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
44: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
43: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
42: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
41: _ZN3tvm5relay16MixedModeMutato
40: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
39: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
38: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
37: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
36: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
34: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
32: _ZN3tvm5relay16MixedModeMutato
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
27: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
26: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
25: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
24: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
23: tvm::transform::Pass::operator()(tvm::IRModule) const
22: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
21: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
16: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
15: tvm::relay::TypeInferencer::Infer(tvm::GlobalVar, tvm::relay::Function)
14: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
13: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
12: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
11: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
10: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
9: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::FunctionNode const*)
8: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
7: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
6: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
5: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
4: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
3: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::CallNode const*)
2: tvm::relay::TypeInferencer::GeneralCall(tvm::relay::CallNode const*, tvm::runtime::Array<tvm::Type, void>)
1: _ZN3tvm17DiagnosticContext9EmitFatalERKNS_1
0: tvm::DiagnosticContext::Render()

'''