import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_36 = relay.var("var_36", dtype = "uint64", shape = ())#candidate|36|()|var|uint64
var_37 = relay.var("var_37", dtype = "uint64", shape = (11,))#candidate|37|(11,)|var|uint64
bop_38 = relay.bitwise_and(var_36.astype('uint64'), var_37.astype('uint64')) # shape=(11,)
output = bop_38
output2 = bop_38
func_52 = relay.Function([var_36,var_37,], output)
mod['func_52'] = func_52
mod = relay.transform.InferType()(mod)
var_53 = relay.var("var_53", dtype = "uint64", shape = ())#candidate|53|()|var|uint64
var_54 = relay.var("var_54", dtype = "uint64", shape = (11,))#candidate|54|(11,)|var|uint64
output = func_52(var_53,var_54,)
func_55 = relay.Function([var_53,var_54,], output)
mutated_mod['func_55'] = func_55
mutated_mod = relay.transform.InferType()(mutated_mod)
const_83 = relay.const([9.677011,9.020001], dtype = "float32")#candidate|83|(2,)|const|float32
uop_84 = relay.tan(const_83.astype('float32')) # shape=(2,)
func_52_call = mod.get_global_var('func_52')
func_55_call = mutated_mod.get_global_var('func_55')
const_87 = relay.const(-6, dtype = "uint64")#candidate|87|()|const|uint64
const_88 = relay.const([-9,-3,-9,10,5,-9,1,-5,8,2,-1], dtype = "uint64")#candidate|88|(11,)|const|uint64
call_86 = func_52_call(relay.reshape(const_87.astype('uint64'), []), relay.reshape(const_88.astype('uint64'), [11,]), )
call_89 = func_52_call(relay.reshape(const_87.astype('uint64'), []), relay.reshape(const_88.astype('uint64'), [11,]), )
func_52_call = mod.get_global_var('func_52')
func_55_call = mutated_mod.get_global_var('func_55')
call_90 = func_52_call(relay.reshape(const_87.astype('uint64'), []), relay.reshape(call_86.astype('uint64'), [11,]), )
call_91 = func_52_call(relay.reshape(const_87.astype('uint64'), []), relay.reshape(call_86.astype('uint64'), [11,]), )
uop_92 = relay.atanh(uop_84.astype('float32')) # shape=(2,)
uop_94 = relay.sqrt(uop_92.astype('float32')) # shape=(2,)
uop_98 = relay.sigmoid(uop_94.astype('float64')) # shape=(2,)
uop_101 = relay.cos(uop_98.astype('float32')) # shape=(2,)
bop_103 = relay.power(uop_101.astype('float32'), relay.reshape(uop_84.astype('float32'), relay.shape_of(uop_101))) # shape=(2,)
func_52_call = mod.get_global_var('func_52')
func_55_call = mutated_mod.get_global_var('func_55')
call_109 = func_52_call(relay.reshape(const_87.astype('uint64'), []), relay.reshape(call_90.astype('uint64'), [11,]), )
call_110 = func_52_call(relay.reshape(const_87.astype('uint64'), []), relay.reshape(call_90.astype('uint64'), [11,]), )
output = relay.Tuple([call_86,const_87,const_88,call_90,bop_103,call_109,])
output2 = relay.Tuple([call_89,const_87,const_88,call_91,bop_103,call_110,])
func_118 = relay.Function([], output)
mod['func_118'] = func_118
mod = relay.transform.InferType()(mod)
mutated_mod['func_118'] = func_118
mutated_mod = relay.transform.InferType()(mutated_mod)
func_118_call = mutated_mod.get_global_var('func_118')
call_119 = func_118_call()
output = call_119
func_120 = relay.Function([], output)
mutated_mod['func_120'] = func_120
mutated_mod = relay.transform.InferType()(mutated_mod)
const_188 = relay.const([[[8.151202,2.681905],[0.339141,-2.303689],[-3.929192,-5.256685],[-0.580735,-7.537261],[3.310706,5.141364],[-5.019940,4.680517],[1.438082,6.628087],[6.200410,-3.783270],[9.042935,5.104474],[1.363931,-1.512607],[-2.370455,1.283607],[-8.102103,-7.169562],[-3.728190,-8.330484],[8.675942,7.023504],[8.496777,-5.562761],[5.368180,-3.397617]],[[7.631505,9.990228],[3.839770,-1.445461],[-8.237043,-6.240293],[4.780451,-4.911651],[-1.703617,-6.188219],[-5.332780,3.533422],[-5.884288,-5.337937],[-7.532968,-0.329883],[9.097111,-7.123959],[-2.470995,-1.631227],[-9.078818,1.557719],[-6.410421,6.344756],[-8.507337,-4.482587],[7.685413,5.926953],[-9.273850,3.465979],[-8.994273,-0.350977]],[[9.728662,-5.763245],[8.905596,5.834281],[7.702416,2.556435],[-0.349600,7.144778],[-7.879355,-3.425381],[9.791280,6.331220],[2.558516,-2.802260],[-1.539368,8.917177],[8.750753,6.262440],[8.402834,-8.262863],[-6.608217,-8.372456],[9.217252,2.206912],[6.321017,4.051547],[8.382750,-3.020169],[-8.023905,-7.704856],[2.274101,-5.755775]],[[2.868069,0.113029],[-8.172541,-5.967209],[3.448406,-7.928599],[-6.352848,-2.874520],[7.995871,-5.478714],[-3.216087,3.910789],[2.916065,-3.207974],[-1.693322,3.738111],[-3.031753,-6.169906],[-2.519036,0.031527],[5.431460,-6.437601],[-7.612737,5.794622],[2.818798,-2.487292],[0.948271,-5.250561],[-3.467341,4.306488],[0.237554,-1.674078]],[[-2.408551,6.576060],[6.934507,-4.157707],[-2.908753,-5.087498],[-5.786121,-8.674816],[5.691668,7.910294],[-1.289322,2.284454],[-1.834400,5.104930],[0.740522,-4.276077],[-9.479886,8.074170],[-0.536748,-4.744175],[-5.594555,6.107352],[9.350121,-6.063073],[7.447669,2.088916],[5.571657,-0.233726],[8.572825,-9.139203],[6.443488,-9.785048]],[[-5.785567,-9.277373],[-4.727928,1.435402],[6.998193,7.972067],[-3.834481,-7.032877],[4.032297,5.376595],[-5.883542,1.680644],[-2.321643,3.843550],[-6.099474,8.645513],[0.100685,3.965868],[6.140534,-5.441777],[-8.188843,4.494738],[-7.051836,-7.096801],[6.481799,-3.004899],[2.727436,3.913060],[1.337456,5.129589],[7.884620,-5.676129]],[[-0.950062,-6.940358],[-1.506901,0.881701],[-4.975919,2.940475],[-7.136581,-6.654713],[-3.751627,4.458368],[-7.123271,3.047169],[7.744582,3.705608],[5.710473,8.880031],[-1.582733,4.085024],[2.182273,7.947940],[0.489034,-4.392450],[-2.868773,7.149261],[1.872110,-6.701213],[-8.277467,-0.206390],[-7.852498,-4.374163],[3.179268,-3.769596]],[[3.045961,3.906962],[-7.217827,-4.817424],[6.470073,5.881926],[2.998946,-2.899938],[8.739123,0.129724],[-2.701837,-2.303791],[7.285068,7.432093],[-6.857168,-6.971750],[7.180914,-6.614848],[-6.250272,-5.098306],[5.036329,9.981465],[-0.367810,-3.229061],[-6.304975,0.029435],[4.748446,-2.171090],[-2.799107,7.734146],[5.174246,-1.546318]]], dtype = "float32")#candidate|188|(8, 16, 2)|const|float32
uop_189 = relay.atanh(const_188.astype('float32')) # shape=(8, 16, 2)
func_52_call = mod.get_global_var('func_52')
func_55_call = mutated_mod.get_global_var('func_55')
var_192 = relay.var("var_192", dtype = "uint64", shape = ())#candidate|192|()|var|uint64
var_193 = relay.var("var_193", dtype = "uint64", shape = (1, 11))#candidate|193|(1, 11)|var|uint64
call_191 = func_52_call(relay.reshape(var_192.astype('uint64'), []), relay.reshape(var_193.astype('uint64'), [11,]), )
call_194 = func_52_call(relay.reshape(var_192.astype('uint64'), []), relay.reshape(var_193.astype('uint64'), [11,]), )
var_204 = relay.var("var_204", dtype = "float32", shape = (8, 16, 2))#candidate|204|(8, 16, 2)|var|float32
bop_205 = relay.equal(uop_189.astype('bool'), relay.reshape(var_204.astype('bool'), relay.shape_of(uop_189))) # shape=(8, 16, 2)
bop_212 = relay.bitwise_xor(call_191.astype('int16'), relay.reshape(var_193.astype('int16'), relay.shape_of(call_191))) # shape=(11,)
bop_215 = relay.bitwise_xor(call_194.astype('int16'), relay.reshape(var_193.astype('int16'), relay.shape_of(call_194))) # shape=(11,)
bop_216 = relay.less(var_192.astype('bool'), uop_189.astype('bool')) # shape=(8, 16, 2)
func_118_call = mod.get_global_var('func_118')
func_120_call = mutated_mod.get_global_var('func_120')
call_219 = relay.TupleGetItem(func_118_call(), 3)
call_220 = relay.TupleGetItem(func_120_call(), 3)
output = relay.Tuple([bop_205,bop_212,bop_216,call_219,])
output2 = relay.Tuple([bop_205,bop_215,bop_216,call_220,])
func_221 = relay.Function([var_192,var_193,var_204,], output)
mod['func_221'] = func_221
mod = relay.transform.InferType()(mod)
var_222 = relay.var("var_222", dtype = "uint64", shape = ())#candidate|222|()|var|uint64
var_223 = relay.var("var_223", dtype = "uint64", shape = (1, 11))#candidate|223|(1, 11)|var|uint64
var_224 = relay.var("var_224", dtype = "float32", shape = (8, 16, 2))#candidate|224|(8, 16, 2)|var|float32
output = func_221(var_222,var_223,var_224,)
func_225 = relay.Function([var_222,var_223,var_224,], output)
mutated_mod['func_225'] = func_225
mutated_mod = relay.transform.InferType()(mutated_mod)
const_242 = relay.const([[[1.488041,-5.828482,-8.780407,7.883200,5.400632,-9.086890,-3.050857,0.727142,-1.392651,-7.939837,-5.312583,9.527946,0.784873,-3.789133],[8.158387,4.503934,-0.043103,4.638924,8.215443,-7.998566,-6.273635,-5.998067,-1.027791,-9.287699,0.779048,0.980070,-6.339800,4.703758],[-1.238963,5.736602,6.915242,-2.231305,-6.151961,-7.591443,-2.267357,7.190678,2.198676,-4.551209,1.208643,-4.672655,4.159224,-8.752576],[7.879268,2.985927,-4.596296,9.259473,8.285261,8.362150,-0.891471,6.227001,-0.761774,0.888838,-5.844212,-8.514132,-2.409519,-0.550559],[-8.221264,9.759731,-2.132367,7.745239,5.353355,-6.415529,-9.252466,7.207859,-9.672061,-0.939245,0.916830,-6.587265,5.657276,2.099290],[-9.557955,4.849742,9.666517,-7.299984,1.336841,-4.495503,-4.580716,4.759899,-6.516587,0.758395,6.129636,7.953333,0.812251,-5.077143],[-6.669398,1.624781,6.302985,1.942481,0.924071,-1.283789,9.101476,-5.730811,7.882106,5.870686,-4.279096,-4.048150,-7.738433,-4.502944],[-0.749603,-5.967462,-2.704338,1.758597,-7.987351,-2.859884,-9.551237,-6.702397,2.977448,8.092164,-7.593474,-0.597287,-1.668433,-1.252134],[7.880842,-8.893054,1.575967,-7.975523,-6.203892,5.323314,5.454580,6.998491,-2.651884,0.370600,-3.959654,-0.910220,9.323060,9.225070],[-0.698603,-2.079005,-8.756289,4.223282,4.091361,6.237515,7.733136,-7.822793,2.321617,-7.831802,6.028842,9.638904,-5.092139,-4.253946],[6.044741,0.311719,4.875824,5.686810,0.026397,1.737575,-1.382347,-9.768684,4.507035,-8.281336,-8.271449,-9.095318,7.059820,3.445333],[-1.143390,5.322933,4.091900,8.691706,9.152920,-5.704379,6.314892,2.335843,4.643985,4.139048,2.944020,2.635525,-0.760874,5.722394]]], dtype = "float64")#candidate|242|(1, 12, 14)|const|float64
uop_243 = relay.sqrt(const_242.astype('float64')) # shape=(1, 12, 14)
bop_248 = relay.floor_mod(uop_243.astype('float32'), relay.reshape(const_242.astype('float32'), relay.shape_of(uop_243))) # shape=(1, 12, 14)
uop_252 = relay.acosh(bop_248.astype('float64')) # shape=(1, 12, 14)
var_255 = relay.var("var_255", dtype = "float64", shape = (3, 12, 14))#candidate|255|(3, 12, 14)|var|float64
bop_256 = relay.right_shift(uop_252.astype('uint8'), var_255.astype('uint8')) # shape=(3, 12, 14)
bop_263 = relay.equal(bop_256.astype('bool'), uop_252.astype('bool')) # shape=(3, 12, 14)
bop_267 = relay.less_equal(bop_263.astype('bool'), const_242.astype('bool')) # shape=(3, 12, 14)
bop_274 = relay.equal(const_242.astype('bool'), relay.reshape(uop_243.astype('bool'), relay.shape_of(const_242))) # shape=(1, 12, 14)
var_277 = relay.var("var_277", dtype = "bool", shape = (3, 12, 14))#candidate|277|(3, 12, 14)|var|bool
bop_278 = relay.divide(bop_263.astype('float64'), relay.reshape(var_277.astype('float64'), relay.shape_of(bop_263))) # shape=(3, 12, 14)
uop_281 = relay.log10(uop_252.astype('float64')) # shape=(1, 12, 14)
uop_283 = relay.asin(uop_281.astype('float32')) # shape=(1, 12, 14)
uop_285 = relay.rsqrt(uop_283.astype('float32')) # shape=(1, 12, 14)
output = relay.Tuple([bop_267,bop_274,bop_278,uop_285,])
output2 = relay.Tuple([bop_267,bop_274,bop_278,uop_285,])
func_291 = relay.Function([var_255,var_277,], output)
mod['func_291'] = func_291
mod = relay.transform.InferType()(mod)
var_292 = relay.var("var_292", dtype = "float64", shape = (3, 12, 14))#candidate|292|(3, 12, 14)|var|float64
var_293 = relay.var("var_293", dtype = "bool", shape = (3, 12, 14))#candidate|293|(3, 12, 14)|var|bool
output = func_291(var_292,var_293,)
func_294 = relay.Function([var_292,var_293,], output)
mutated_mod['func_294'] = func_294
mutated_mod = relay.transform.InferType()(mutated_mod)
func_118_call = mod.get_global_var('func_118')
func_120_call = mutated_mod.get_global_var('func_120')
call_299 = relay.TupleGetItem(func_118_call(), 2)
call_300 = relay.TupleGetItem(func_120_call(), 2)
func_52_call = mod.get_global_var('func_52')
func_55_call = mutated_mod.get_global_var('func_55')
const_311 = relay.const(-4, dtype = "uint64")#candidate|311|()|const|uint64
call_310 = func_52_call(relay.reshape(const_311.astype('uint64'), []), relay.reshape(call_299.astype('uint64'), [11,]), )
call_312 = func_52_call(relay.reshape(const_311.astype('uint64'), []), relay.reshape(call_299.astype('uint64'), [11,]), )
uop_313 = relay.sin(call_310.astype('float32')) # shape=(11,)
uop_315 = relay.sin(call_312.astype('float32')) # shape=(11,)
output = relay.Tuple([call_299,const_311,uop_313,])
output2 = relay.Tuple([call_300,const_311,uop_315,])
func_322 = relay.Function([], output)
mod['func_322'] = func_322
mod = relay.transform.InferType()(mod)
output = func_322()
func_323 = relay.Function([], output)
mutated_mod['func_323'] = func_323
mutated_mod = relay.transform.InferType()(mutated_mod)
var_324 = relay.var("var_324", dtype = "int16", shape = ())#candidate|324|()|var|int16
var_325 = relay.var("var_325", dtype = "int16", shape = (16, 2, 15))#candidate|325|(16, 2, 15)|var|int16
bop_326 = relay.bitwise_xor(var_324.astype('int16'), var_325.astype('int16')) # shape=(16, 2, 15)
func_322_call = mod.get_global_var('func_322')
func_323_call = mutated_mod.get_global_var('func_323')
call_329 = relay.TupleGetItem(func_322_call(), 1)
call_330 = relay.TupleGetItem(func_323_call(), 1)
bop_337 = relay.add(var_324.astype('uint8'), var_325.astype('uint8')) # shape=(16, 2, 15)
func_322_call = mod.get_global_var('func_322')
func_323_call = mutated_mod.get_global_var('func_323')
call_341 = relay.TupleGetItem(func_322_call(), 2)
call_342 = relay.TupleGetItem(func_323_call(), 2)
uop_344 = relay.sin(bop_337.astype('float32')) # shape=(16, 2, 15)
uop_346 = relay.exp(uop_344.astype('float64')) # shape=(16, 2, 15)
bop_350 = relay.right_shift(uop_346.astype('int8'), relay.reshape(bop_337.astype('int8'), relay.shape_of(uop_346))) # shape=(16, 2, 15)
bop_354 = relay.bitwise_or(uop_346.astype('uint32'), relay.reshape(var_325.astype('uint32'), relay.shape_of(uop_346))) # shape=(16, 2, 15)
uop_359 = relay.sinh(bop_354.astype('float32')) # shape=(16, 2, 15)
bop_361 = relay.bitwise_xor(uop_359.astype('uint8'), relay.reshape(bop_337.astype('uint8'), relay.shape_of(uop_359))) # shape=(16, 2, 15)
uop_364 = relay.acos(bop_350.astype('float32')) # shape=(16, 2, 15)
bop_368 = relay.less_equal(uop_359.astype('bool'), relay.reshape(uop_344.astype('bool'), relay.shape_of(uop_359))) # shape=(16, 2, 15)
output = relay.Tuple([bop_326,call_329,call_341,bop_361,uop_364,bop_368,])
output2 = relay.Tuple([bop_326,call_330,call_342,bop_361,uop_364,bop_368,])
func_372 = relay.Function([var_324,var_325,], output)
mod['func_372'] = func_372
mod = relay.transform.InferType()(mod)
mutated_mod['func_372'] = func_372
mutated_mod = relay.transform.InferType()(mutated_mod)
func_372_call = mutated_mod.get_global_var('func_372')
var_374 = relay.var("var_374", dtype = "int16", shape = ())#candidate|374|()|var|int16
var_375 = relay.var("var_375", dtype = "int16", shape = (16, 2, 15))#candidate|375|(16, 2, 15)|var|int16
call_373 = func_372_call(var_374,var_375,)
output = call_373
func_376 = relay.Function([var_374,var_375,], output)
mutated_mod['func_376'] = func_376
mutated_mod = relay.transform.InferType()(mutated_mod)
const_390 = relay.const([[8.868340,-9.082898],[4.297410,8.080202],[-8.425617,-0.039474],[5.756479,-1.443441],[-0.104674,-3.263857],[9.798377,-2.420888],[7.573290,6.634989],[-8.069662,-7.761589],[-6.201095,9.234344],[1.716231,7.842596],[1.744040,-5.216142],[-5.953998,0.880901],[-6.819027,9.902158]], dtype = "float32")#candidate|390|(13, 2)|const|float32
uop_391 = relay.acosh(const_390.astype('float32')) # shape=(13, 2)
var_393 = relay.var("var_393", dtype = "float32", shape = (13, 2))#candidate|393|(13, 2)|var|float32
bop_394 = relay.logical_xor(uop_391.astype('uint64'), relay.reshape(var_393.astype('uint64'), relay.shape_of(uop_391))) # shape=(13, 2)
uop_397 = relay.asinh(uop_391.astype('float64')) # shape=(13, 2)
bop_399 = relay.less_equal(uop_397.astype('bool'), relay.reshape(bop_394.astype('bool'), relay.shape_of(uop_397))) # shape=(13, 2)
bop_402 = relay.logical_or(bop_399.astype('bool'), relay.reshape(uop_391.astype('bool'), relay.shape_of(bop_399))) # shape=(13, 2)
output = bop_402
output2 = bop_402
func_409 = relay.Function([var_393,], output)
mod['func_409'] = func_409
mod = relay.transform.InferType()(mod)
var_410 = relay.var("var_410", dtype = "float32", shape = (13, 2))#candidate|410|(13, 2)|var|float32
output = func_409(var_410)
func_411 = relay.Function([var_410], output)
mutated_mod['func_411'] = func_411
mutated_mod = relay.transform.InferType()(mutated_mod)
const_413 = relay.const([[-6.013485,-0.738933,-1.828129,5.549582,0.412624,3.134331,-2.589174,-9.559849,-6.020329,-5.884924,6.822289,-1.460915,-3.273257,4.756407,8.595480],[5.423520,-5.865545,2.027014,-7.323270,1.499228,-8.610046,-2.136924,-8.119319,-3.402685,1.689050,-1.929574,-2.031749,-4.812138,-1.471591,-3.949390],[-9.080085,3.431042,4.795739,3.755186,0.293122,-7.223221,5.066555,-7.880538,2.899505,-9.244602,-5.493774,1.818727,5.194427,0.751031,3.582561],[-9.393508,3.621085,-3.314166,-0.897492,-3.437148,6.476217,1.547245,6.397431,-7.237192,-9.858203,-6.616687,-7.887743,4.001197,0.304538,1.427373],[0.064201,-4.151122,1.615384,1.505046,-2.217717,6.843364,-4.845533,-2.375933,2.423441,6.100863,-2.923828,-4.808078,4.808178,-8.028404,-9.663336],[-0.769948,8.707417,-5.582776,0.610694,-5.333570,-7.128422,2.502811,-2.888716,-1.735646,6.729131,-5.473727,1.934313,-4.785162,-3.176608,1.952782],[-0.974488,-9.649720,-9.703065,-6.998986,1.421134,3.375084,-4.100594,-1.139804,8.556519,-0.511836,-8.146602,-6.796011,0.383665,7.947782,4.683182],[-9.073475,-9.341803,-2.875343,-9.619421,-5.137522,2.882382,0.150403,0.893463,6.721591,-4.955093,0.390513,-8.808379,7.829295,-2.917866,9.454638],[1.391067,8.473627,6.567248,3.103170,-0.124415,6.781592,4.771352,9.887149,-7.832127,1.086509,3.887827,-7.711132,-8.743734,9.069261,-9.866054],[9.856114,2.070320,5.955988,-4.172670,-9.113829,-7.035446,-7.900365,-4.576336,-1.542712,-0.872896,9.478716,-4.457989,6.697116,2.140300,7.740720]], dtype = "float32")#candidate|413|(10, 15)|const|float32
uop_414 = relay.atan(const_413.astype('float32')) # shape=(10, 15)
output = uop_414
output2 = uop_414
func_416 = relay.Function([], output)
mod['func_416'] = func_416
mod = relay.transform.InferType()(mod)
output = func_416()
func_417 = relay.Function([], output)
mutated_mod['func_417'] = func_417
mutated_mod = relay.transform.InferType()(mutated_mod)
func_322_call = mod.get_global_var('func_322')
func_323_call = mutated_mod.get_global_var('func_323')
call_438 = relay.TupleGetItem(func_322_call(), 2)
call_439 = relay.TupleGetItem(func_323_call(), 2)
var_454 = relay.var("var_454", dtype = "float32", shape = (11,))#candidate|454|(11,)|var|float32
bop_455 = relay.power(call_438.astype('float32'), relay.reshape(var_454.astype('float32'), relay.shape_of(call_438))) # shape=(11,)
bop_458 = relay.power(call_439.astype('float32'), relay.reshape(var_454.astype('float32'), relay.shape_of(call_439))) # shape=(11,)
uop_461 = relay.atan(bop_455.astype('float64')) # shape=(11,)
uop_463 = relay.atan(bop_458.astype('float64')) # shape=(11,)
func_416_call = mod.get_global_var('func_416')
func_417_call = mutated_mod.get_global_var('func_417')
call_476 = func_416_call()
call_477 = func_416_call()
uop_478 = relay.asinh(uop_461.astype('float64')) # shape=(11,)
uop_480 = relay.asinh(uop_463.astype('float64')) # shape=(11,)
output = relay.Tuple([call_476,uop_478,])
output2 = relay.Tuple([call_477,uop_480,])
func_482 = relay.Function([var_454,], output)
mod['func_482'] = func_482
mod = relay.transform.InferType()(mod)
var_483 = relay.var("var_483", dtype = "float32", shape = (11,))#candidate|483|(11,)|var|float32
output = func_482(var_483)
func_484 = relay.Function([var_483], output)
mutated_mod['func_484'] = func_484
mutated_mod = relay.transform.InferType()(mutated_mod)
const_486 = relay.const([[8.845103,6.537666,-0.456210],[1.607884,-7.824081,9.623513],[-6.648588,-3.027939,9.982691],[-4.369678,-6.403007,-5.995232],[-4.090735,-2.066938,5.580814],[7.527672,-0.346309,3.371708],[7.787041,5.236844,-5.337163]], dtype = "float64")#candidate|486|(7, 3)|const|float64
uop_487 = relay.asinh(const_486.astype('float64')) # shape=(7, 3)
func_409_call = mod.get_global_var('func_409')
func_411_call = mutated_mod.get_global_var('func_411')
const_491 = relay.const([-8.696285,-6.898695,0.947583,-4.908927,2.150807,7.660994,-7.572147,-3.759316,4.337351,6.669707,-2.553262,-2.480473,8.654981,0.692295,8.487532,7.125480,-4.618086,7.053687,0.123077,6.664977,0.291476,5.711643,-5.339952,2.303389,-6.253548,-4.733878], dtype = "float32")#candidate|491|(26,)|const|float32
call_490 = func_409_call(relay.reshape(const_491.astype('float32'), [13, 2]))
call_492 = func_409_call(relay.reshape(const_491.astype('float32'), [13, 2]))
func_291_call = mod.get_global_var('func_291')
func_294_call = mutated_mod.get_global_var('func_294')
var_496 = relay.var("var_496", dtype = "float64", shape = (504,))#candidate|496|(504,)|var|float64
call_495 = relay.TupleGetItem(func_291_call(relay.reshape(var_496.astype('float64'), [3, 12, 14]), relay.reshape(var_496.astype('bool'), [3, 12, 14]), ), 0)
call_497 = relay.TupleGetItem(func_294_call(relay.reshape(var_496.astype('float64'), [3, 12, 14]), relay.reshape(var_496.astype('bool'), [3, 12, 14]), ), 0)
bop_498 = relay.logical_and(uop_487.astype('bool'), relay.reshape(const_486.astype('bool'), relay.shape_of(uop_487))) # shape=(7, 3)
bop_501 = relay.bitwise_and(uop_487.astype('uint16'), relay.reshape(const_486.astype('uint16'), relay.shape_of(uop_487))) # shape=(7, 3)
var_504 = relay.var("var_504", dtype = "bool", shape = (7, 3))#candidate|504|(7, 3)|var|bool
bop_505 = relay.maximum(bop_498.astype('uint16'), relay.reshape(var_504.astype('uint16'), relay.shape_of(bop_498))) # shape=(7, 3)
uop_517 = relay.sinh(bop_498.astype('float32')) # shape=(7, 3)
uop_522 = relay.atanh(uop_517.astype('float64')) # shape=(7, 3)
const_525 = relay.const([[3.231636,-1.494927,8.756379],[7.021379,-3.003002,-7.122660],[6.525573,-5.263474,-2.989894],[6.245763,-8.878309,-0.628271],[-4.382619,5.457361,-6.177430],[4.324677,-0.377205,8.114305],[7.051364,7.018138,-3.251756]], dtype = "float32")#candidate|525|(7, 3)|const|float32
bop_526 = relay.right_shift(uop_517.astype('uint16'), relay.reshape(const_525.astype('uint16'), relay.shape_of(uop_517))) # shape=(7, 3)
var_529 = relay.var("var_529", dtype = "float64", shape = (7, 3))#candidate|529|(7, 3)|var|float64
bop_530 = relay.bitwise_xor(uop_522.astype('uint16'), relay.reshape(var_529.astype('uint16'), relay.shape_of(uop_522))) # shape=(7, 3)
bop_535 = relay.mod(bop_501.astype('float32'), relay.reshape(bop_530.astype('float32'), relay.shape_of(bop_501))) # shape=(7, 3)
uop_539 = relay.cosh(uop_522.astype('float64')) # shape=(7, 3)
bop_541 = relay.multiply(uop_539.astype('uint8'), relay.reshape(bop_505.astype('uint8'), relay.shape_of(uop_539))) # shape=(7, 3)
uop_544 = relay.log2(uop_539.astype('float32')) # shape=(7, 3)
uop_548 = relay.exp(uop_544.astype('float64')) # shape=(7, 3)
output = relay.Tuple([call_490,const_491,call_495,var_496,bop_526,bop_535,bop_541,uop_548,])
output2 = relay.Tuple([call_492,const_491,call_497,var_496,bop_526,bop_535,bop_541,uop_548,])
func_551 = relay.Function([var_496,var_504,var_529,], output)
mod['func_551'] = func_551
mod = relay.transform.InferType()(mod)
mutated_mod['func_551'] = func_551
mutated_mod = relay.transform.InferType()(mutated_mod)
func_551_call = mutated_mod.get_global_var('func_551')
var_553 = relay.var("var_553", dtype = "float64", shape = (504,))#candidate|553|(504,)|var|float64
var_554 = relay.var("var_554", dtype = "bool", shape = (7, 3))#candidate|554|(7, 3)|var|bool
var_555 = relay.var("var_555", dtype = "float64", shape = (7, 3))#candidate|555|(7, 3)|var|float64
call_552 = func_551_call(var_553,var_554,var_555,)
output = call_552
func_556 = relay.Function([var_553,var_554,var_555,], output)
mutated_mod['func_556'] = func_556
mutated_mod = relay.transform.InferType()(mutated_mod)
func_322_call = mod.get_global_var('func_322')
func_323_call = mutated_mod.get_global_var('func_323')
call_588 = relay.TupleGetItem(func_322_call(), 2)
call_589 = relay.TupleGetItem(func_323_call(), 2)
uop_592 = relay.rsqrt(call_588.astype('float32')) # shape=(11,)
uop_594 = relay.rsqrt(call_589.astype('float32')) # shape=(11,)
func_416_call = mod.get_global_var('func_416')
func_417_call = mutated_mod.get_global_var('func_417')
call_596 = func_416_call()
call_597 = func_416_call()
uop_603 = relay.asin(uop_592.astype('float64')) # shape=(11,)
uop_605 = relay.asin(uop_594.astype('float64')) # shape=(11,)
output = relay.Tuple([call_596,uop_603,])
output2 = relay.Tuple([call_597,uop_605,])
func_607 = relay.Function([], output)
mod['func_607'] = func_607
mod = relay.transform.InferType()(mod)
mutated_mod['func_607'] = func_607
mutated_mod = relay.transform.InferType()(mutated_mod)
func_607_call = mutated_mod.get_global_var('func_607')
call_608 = func_607_call()
output = call_608
func_609 = relay.Function([], output)
mutated_mod['func_609'] = func_609
mutated_mod = relay.transform.InferType()(mutated_mod)
var_631 = relay.var("var_631", dtype = "float32", shape = (14, 6, 15))#candidate|631|(14, 6, 15)|var|float32
uop_632 = relay.log(var_631.astype('float32')) # shape=(14, 6, 15)
output = relay.Tuple([uop_632,])
output2 = relay.Tuple([uop_632,])
func_635 = relay.Function([var_631,], output)
mod['func_635'] = func_635
mod = relay.transform.InferType()(mod)
var_636 = relay.var("var_636", dtype = "float32", shape = (14, 6, 15))#candidate|636|(14, 6, 15)|var|float32
output = func_635(var_636)
func_637 = relay.Function([var_636], output)
mutated_mod['func_637'] = func_637
mutated_mod = relay.transform.InferType()(mutated_mod)
func_118_call = mod.get_global_var('func_118')
func_120_call = mutated_mod.get_global_var('func_120')
call_651 = relay.TupleGetItem(func_118_call(), 5)
call_652 = relay.TupleGetItem(func_120_call(), 5)
output = relay.Tuple([call_651,])
output2 = relay.Tuple([call_652,])
func_683 = relay.Function([], output)
mod['func_683'] = func_683
mod = relay.transform.InferType()(mod)
output = func_683()
func_684 = relay.Function([], output)
mutated_mod['func_684'] = func_684
mutated_mod = relay.transform.InferType()(mutated_mod)
func_322_call = mod.get_global_var('func_322')
func_323_call = mutated_mod.get_global_var('func_323')
call_685 = relay.TupleGetItem(func_322_call(), 1)
call_686 = relay.TupleGetItem(func_323_call(), 1)
func_52_call = mod.get_global_var('func_52')
func_55_call = mutated_mod.get_global_var('func_55')
const_689 = relay.const([8,-1,1,-8,5,8,9,-4,10,-10,-10], dtype = "uint64")#candidate|689|(11,)|const|uint64
call_688 = func_52_call(relay.reshape(call_685.astype('uint64'), []), relay.reshape(const_689.astype('uint64'), [11,]), )
call_690 = func_52_call(relay.reshape(call_685.astype('uint64'), []), relay.reshape(const_689.astype('uint64'), [11,]), )
func_409_call = mod.get_global_var('func_409')
func_411_call = mutated_mod.get_global_var('func_411')
var_692 = relay.var("var_692", dtype = "float32", shape = (26,))#candidate|692|(26,)|var|float32
call_691 = func_409_call(relay.reshape(var_692.astype('float32'), [13, 2]))
call_693 = func_409_call(relay.reshape(var_692.astype('float32'), [13, 2]))
func_551_call = mod.get_global_var('func_551')
func_556_call = mutated_mod.get_global_var('func_556')
const_704 = relay.const([[0.072213,-6.955162,-4.574212,-9.023567,-5.815511,-7.483574,4.240012,7.867718,2.384955,-3.539594,-5.636139,4.623166,8.590552,5.907004,8.158282,0.542319,1.859178,-6.883577,6.711948,-4.582942,-3.468499,7.012035,5.156029,-6.473785,1.271395,2.004452,-3.963987,1.462345,-3.347062,7.686868,6.712385,-9.461019,-0.936388,-4.304963,-6.896846,7.572500,3.693661,-7.602715,0.356714,-2.597247,9.522567,2.268508,-6.990853,6.607941,7.163512,-4.603919,5.023256,7.687169,-9.223769,0.657151,-9.309576,5.779829,8.477955,6.771164,-6.195372,-0.645113,0.100032,7.548227,-1.115868,-0.202200,8.658355,-1.737107,-4.451045,6.473812,8.539063,3.594514,8.982794,1.783234,-7.517511,-5.712059,-9.628621,-9.088200,-4.305401,-5.167718,0.110348,-4.303809,8.352776,7.785630,6.205449,-0.954016,-4.039929,-7.969504,3.055036,-0.606459],[-8.026813,-9.241727,1.911025,1.383105,9.729857,-9.429557,-5.356433,2.834880,8.306437,0.317818,5.219462,2.017185,9.404768,-7.457216,-1.707710,-6.130050,4.997663,9.443378,-2.037500,-6.888222,-7.018257,-4.187887,3.113455,8.578523,-5.626180,1.945340,-1.803388,9.494493,4.829185,-2.223510,7.112547,-9.428295,-9.441693,0.134107,-0.405997,-4.209582,0.086782,-0.852106,-4.381476,5.414670,-8.730256,3.939210,-8.774547,8.966310,-9.616568,1.629917,-4.339494,-0.266967,7.461317,9.649390,7.252283,6.710310,-7.352935,6.183338,5.075018,-0.543102,-4.554457,-7.772207,-4.581360,-5.510990,-8.164431,-3.133527,5.361996,5.057423,6.606183,1.358934,-3.941215,9.657337,-6.466611,4.189052,0.334268,7.000934,4.873270,-6.994406,7.040419,-1.412517,-2.360222,2.636215,9.347493,3.161718,6.138911,1.006379,2.094916,0.281644],[-9.386727,6.726064,-6.935309,7.265591,-9.656581,2.699664,-7.671202,2.135313,7.924603,-5.810974,4.257001,6.620844,-3.335049,-1.058478,8.608039,6.438578,8.857403,2.079104,-7.048161,3.243993,3.614772,-9.484923,7.046329,-8.275347,-2.864730,6.207573,-7.459727,1.134316,-7.176979,-6.843908,1.504953,4.947179,-6.069770,-3.896920,3.256091,-9.048438,-8.412391,-8.881278,-9.317286,-1.966304,3.202081,4.047851,-4.898848,7.922669,-6.559419,-6.773996,1.414555,-3.466476,3.772034,-8.330471,1.463962,4.586214,-8.909763,5.384878,-0.437014,4.002758,8.574272,-7.662649,8.396125,-4.550977,9.997464,4.978637,-3.611877,3.191347,-9.684590,-0.565006,-9.209137,-4.508002,7.407392,8.329495,0.660301,-0.002950,1.132920,4.351273,-3.159990,5.956658,-9.492890,-8.937332,-7.345089,-6.967245,-8.030001,-1.064808,-7.295027,6.326237],[-3.208610,-1.658002,3.897671,3.288383,7.223236,-0.385550,-2.852454,4.418266,-5.539317,-6.234116,3.909800,-9.813029,6.386871,-2.166615,8.300289,-7.466003,2.848473,5.406490,9.050474,2.725255,1.316962,-4.473137,7.441214,5.685735,1.206181,1.267365,-1.132466,-1.897649,-4.381542,-7.329072,-4.560116,-5.926454,9.218300,6.855429,-4.598529,0.493373,-0.281719,1.025473,5.747101,2.545964,-8.969970,-4.118098,-2.720090,9.080313,0.928752,-7.021946,-8.924371,6.827442,7.455269,-7.230932,-2.481816,5.294185,9.811016,-7.866111,8.288559,8.818007,-4.724791,9.630829,7.112272,-2.269459,-7.014279,-1.627472,0.265897,-9.632432,-2.406769,-7.429033,-0.083856,1.606766,-6.972898,-5.524380,-9.867595,-5.945089,0.636228,1.185092,-0.296850,-2.376267,7.466150,7.920995,-5.860369,9.409610,-1.157598,7.765815,8.199958,-5.845185],[8.135576,-8.397333,-3.133312,-4.315800,-4.596245,-5.752286,9.858881,4.388016,-0.029193,2.622940,-7.000597,5.813847,-7.589157,4.949472,-6.892409,-1.302312,-6.791416,6.020504,3.705215,9.847660,2.272560,-2.268676,-7.469988,1.678906,-1.878451,5.191077,7.477835,4.245608,-3.357095,-3.685339,-4.625366,-4.900241,6.901349,8.807762,6.886332,-8.635515,7.139226,-3.220335,-2.193860,-3.550107,-8.412380,5.186880,-6.982161,-1.866440,2.244692,0.102022,2.060998,-1.641537,4.605991,6.474190,-6.557047,-2.641551,-9.555439,9.065006,-6.748874,9.429403,-2.045021,3.430703,6.207481,9.479165,-8.487388,-3.008988,-5.168149,-9.125744,-8.561660,-6.073037,0.628190,-2.802089,9.941956,-1.957901,5.922784,7.052645,-4.862664,9.345659,-1.176585,-1.264886,0.163265,-8.025140,5.613012,-0.448671,-7.893307,7.519191,8.741413,6.933111],[0.402413,-5.529740,0.341687,-3.187128,-9.840144,4.450676,-7.434156,1.172743,-5.906201,8.556745,-4.454734,0.965303,5.258823,-7.189670,4.157015,4.864018,4.509649,5.985794,7.835029,-2.018182,7.521461,-0.026828,7.419110,-0.803425,7.680618,-7.253059,1.683998,-7.881729,-5.244003,5.406341,-0.251737,-3.913578,-2.891147,-9.924963,-2.026300,-8.367718,-6.591043,5.078277,-6.648342,2.977928,-6.655811,-7.015936,-7.849691,-6.035353,7.341413,-6.117769,-3.549463,-0.943054,-4.132830,5.389361,8.573764,3.575387,-4.531636,-1.631644,-7.863605,1.938264,5.568509,-0.844607,-9.853180,-2.365829,-8.287361,-4.397327,2.689852,5.216384,9.811450,-0.938084,-8.616891,3.740400,2.203440,-4.421805,8.904297,-8.405894,2.547100,-7.224471,4.910225,8.496108,8.912039,-4.773189,-9.600015,2.377613,-9.034943,0.749203,0.593188,-1.363676]], dtype = "float64")#candidate|704|(6, 84)|const|float64
var_705 = relay.var("var_705", dtype = "bool", shape = (21,))#candidate|705|(21,)|var|bool
call_703 = relay.TupleGetItem(func_551_call(relay.reshape(const_704.astype('float64'), [504,]), relay.reshape(var_705.astype('bool'), [7, 3]), relay.reshape(var_705.astype('float64'), [7, 3]), ), 7)
call_706 = relay.TupleGetItem(func_556_call(relay.reshape(const_704.astype('float64'), [504,]), relay.reshape(var_705.astype('bool'), [7, 3]), relay.reshape(var_705.astype('float64'), [7, 3]), ), 7)
func_52_call = mod.get_global_var('func_52')
func_55_call = mutated_mod.get_global_var('func_55')
call_712 = func_52_call(relay.reshape(call_685.astype('uint64'), []), relay.reshape(call_688.astype('uint64'), [11,]), )
call_713 = func_52_call(relay.reshape(call_685.astype('uint64'), []), relay.reshape(call_688.astype('uint64'), [11,]), )
func_683_call = mod.get_global_var('func_683')
func_684_call = mutated_mod.get_global_var('func_684')
call_718 = relay.TupleGetItem(func_683_call(), 0)
call_719 = relay.TupleGetItem(func_684_call(), 0)
const_724 = relay.const([[5.751798,-9.257445,-4.022239,-8.519866,7.129767,-8.592434,0.203506,8.744370,4.535784,-0.448492,-5.961506,4.018953,6.783401,-7.045347,8.472099,6.209717,-1.422748,-8.639338,4.501967,5.782624,1.438345,4.097996,6.047172,9.833581,-5.269963,-0.012260,-0.956050,-3.005156,-5.874457,1.755006,5.888585,-2.693933,-3.820574,-9.832839,6.103378,2.872256,2.023734,3.616928,8.207778,-4.094192,-4.700629,-1.322585,-8.356497,-3.481850,3.515379,-9.374184,-5.827769,5.349461,4.715170,-1.939484,3.201656,-0.089594,8.836146,7.230974,-5.860785,-8.454320,9.448115,0.315354,6.449411,-1.541701,5.990282,2.120118,6.152085,4.985851,-0.077989,7.849422,1.646683,0.536008,-0.918077,2.276091,-8.898956,1.322214,-8.711062,6.757320,8.945820,8.570775,-5.215939,-5.291048,0.090089,-6.321800,-4.857194,4.206462,7.800824,-6.397841],[1.154198,-0.819543,2.367782,1.805343,1.477859,2.773604,-2.867754,8.287111,-8.916216,-7.607933,5.522710,0.846493,6.609568,6.063557,3.984035,-8.009375,8.088661,-4.640899,-2.433342,7.848598,-5.004041,-5.784018,0.378300,0.267138,-4.562281,0.046017,4.948758,1.972206,6.429662,7.796305,-8.019745,8.392614,6.018258,-9.702908,-5.057549,0.853564,-1.540667,9.041592,0.387965,1.103042,9.368002,-9.862296,-2.872207,8.468085,-2.142654,-6.673654,-8.666223,0.156843,-9.649861,0.541298,5.475903,7.979951,8.274644,6.739657,-2.496910,-2.827465,2.801439,-1.220242,-3.186390,7.521161,-0.533210,0.218105,5.362886,-2.157211,-9.520298,-5.083652,-6.570808,9.320347,2.833250,2.206443,-7.224691,5.280757,-0.771839,0.493767,7.661608,9.380857,-9.395299,-9.282988,6.091328,8.314937,-4.344986,3.556427,-2.617432,-3.220790],[5.361846,2.003762,4.242363,3.094607,-9.254800,-3.886158,9.478543,9.881725,-1.988383,-3.277760,5.278238,6.953732,3.543861,-5.263582,-4.757782,5.783693,-7.100850,0.069813,7.489862,9.806278,2.903728,9.328670,-2.428116,-9.210424,-2.580486,-6.799968,3.848973,-5.333647,6.766051,-1.397164,6.424761,8.695515,-8.504254,-1.444673,-7.482113,9.168810,9.009350,-3.895656,1.392350,3.707745,0.883557,8.987618,0.698856,-2.329095,9.460204,-5.173462,-1.790478,-1.022312,-2.357474,7.184821,6.703144,-6.301385,5.997869,-0.943713,-0.136935,0.386465,0.467741,-0.617495,-8.127805,5.400155,9.048380,-9.915466,-6.322415,-3.616729,2.059509,8.122339,-9.218311,-8.443597,-4.326249,-8.325876,-7.134922,2.024453,4.280510,-4.769781,-8.821821,9.083129,-9.366773,3.099925,-6.891433,9.381391,1.871374,-2.188255,6.239914,-5.414416],[0.688516,-6.829157,-2.473757,-9.815837,7.469307,4.253099,-1.089380,4.223606,-9.040825,8.625430,-2.532977,6.259668,6.468986,1.402571,-9.505472,2.507649,-7.316707,1.206610,2.584401,-9.248704,-9.478155,-8.733536,-6.493450,4.208077,-1.362612,-8.183996,-7.656705,6.977477,6.114508,-2.994917,-4.913736,-4.845798,3.360573,2.225868,9.763552,3.898001,1.125341,-8.592869,2.798276,-1.019486,8.874837,-8.449676,-4.163352,0.005374,-7.504878,6.042725,3.111976,4.773598,5.926066,4.239634,9.605627,9.771985,-7.766946,-1.027472,1.633771,-6.333843,2.451684,-9.157208,-6.336167,-7.267661,8.102356,2.202659,8.766325,2.822164,6.396498,5.903080,7.115609,6.440537,-6.716728,3.302281,-3.022541,-3.913051,-5.350783,-5.413282,2.432197,2.640938,-0.293200,4.809133,-8.666746,6.462196,-1.287259,-4.151748,7.522927,5.732782],[0.765562,1.659581,-6.859323,-1.219289,0.632780,7.314465,7.004640,8.616921,0.187856,2.855240,-3.691023,2.054281,3.234165,-1.912135,0.520443,-9.362405,7.225074,9.015682,-2.692462,-4.107792,-9.117914,-1.391383,7.425314,0.089682,-0.801870,-2.241363,4.339454,3.246686,8.866110,5.640700,-0.980116,0.615323,-6.805431,7.588232,-1.655943,-0.719484,-6.993331,-3.050035,-9.712371,-0.822070,-0.063933,2.288747,4.182383,-1.945237,2.133534,5.468018,-2.119205,4.575360,9.213288,5.587352,-6.802586,-6.911194,-2.363906,-0.472165,1.814151,7.184113,4.850522,6.866013,-2.927544,5.159498,-0.374274,1.082279,-5.540261,6.547649,6.511162,5.938736,-6.215069,-0.535929,7.654588,0.828288,-6.756682,-5.329296,-3.558043,-5.555296,-6.235178,-3.087006,-9.985571,1.081635,-3.733929,0.182082,8.946884,4.638315,-7.083571,-7.111903],[5.074033,-1.384363,-8.976827,9.665297,8.944771,1.796406,-0.213127,-7.542442,8.546265,2.100902,-6.784832,-7.406502,7.695563,5.779154,9.129209,7.062062,8.444850,-5.323234,2.175244,-8.515368,9.245198,-3.916873,7.222282,9.336946,-9.811879,-2.779736,7.545823,-6.448648,2.323657,-8.088047,0.101289,0.772307,-1.239324,-5.586873,9.385264,-8.107359,3.965342,-4.898259,0.414078,5.154489,-7.822126,-3.394753,-9.939608,5.169020,-3.426694,9.621728,4.180993,-9.492199,-5.728800,4.281318,-6.394419,5.674489,-8.125166,-1.916833,3.818724,5.022401,-8.034129,7.713274,-1.231203,-6.409147,-3.527717,-1.162202,-1.764297,8.841677,-3.317968,-8.582619,-2.990960,-9.898791,-7.440181,-2.499989,-5.794279,2.706792,9.044950,-8.617617,1.166886,-7.346922,-6.940987,-5.644095,-0.191167,0.080969,-7.365327,8.841218,9.665763,-1.513755]], dtype = "float64")#candidate|724|(6, 84)|const|float64
bop_725 = relay.less_equal(const_704.astype('bool'), relay.reshape(const_724.astype('bool'), relay.shape_of(const_704))) # shape=(6, 84)
output = relay.Tuple([call_685,call_688,const_689,call_691,var_692,call_703,var_705,call_712,call_718,bop_725,])
output2 = relay.Tuple([call_686,call_690,const_689,call_693,var_692,call_706,var_705,call_713,call_719,bop_725,])
func_743 = relay.Function([var_692,var_705,], output)
mod['func_743'] = func_743
mod = relay.transform.InferType()(mod)
mutated_mod['func_743'] = func_743
mutated_mod = relay.transform.InferType()(mutated_mod)
func_743_call = mutated_mod.get_global_var('func_743')
var_745 = relay.var("var_745", dtype = "float32", shape = (26,))#candidate|745|(26,)|var|float32
var_746 = relay.var("var_746", dtype = "bool", shape = (21,))#candidate|746|(21,)|var|bool
call_744 = func_743_call(var_745,var_746,)
output = call_744
func_747 = relay.Function([var_745,var_746,], output)
mutated_mod['func_747'] = func_747
mutated_mod = relay.transform.InferType()(mutated_mod)
var_749 = relay.var("var_749", dtype = "uint16", shape = (8, 14, 6))#candidate|749|(8, 14, 6)|var|uint16
var_750 = relay.var("var_750", dtype = "uint16", shape = (8, 14, 6))#candidate|750|(8, 14, 6)|var|uint16
bop_751 = relay.bitwise_xor(var_749.astype('uint16'), relay.reshape(var_750.astype('uint16'), relay.shape_of(var_749))) # shape=(8, 14, 6)
bop_755 = relay.bitwise_and(var_749.astype('int16'), relay.reshape(bop_751.astype('int16'), relay.shape_of(var_749))) # shape=(8, 14, 6)
uop_764 = relay.tan(var_749.astype('float32')) # shape=(8, 14, 6)
uop_769 = relay.cos(bop_751.astype('float32')) # shape=(8, 14, 6)
var_771 = relay.var("var_771", dtype = "float32", shape = (8, 14, 6))#candidate|771|(8, 14, 6)|var|float32
bop_772 = relay.logical_or(uop_769.astype('bool'), relay.reshape(var_771.astype('bool'), relay.shape_of(uop_769))) # shape=(8, 14, 6)
output = relay.Tuple([bop_755,uop_764,bop_772,])
output2 = relay.Tuple([bop_755,uop_764,bop_772,])
func_781 = relay.Function([var_749,var_750,var_771,], output)
mod['func_781'] = func_781
mod = relay.transform.InferType()(mod)
mutated_mod['func_781'] = func_781
mutated_mod = relay.transform.InferType()(mutated_mod)
func_781_call = mutated_mod.get_global_var('func_781')
var_783 = relay.var("var_783", dtype = "uint16", shape = (8, 14, 6))#candidate|783|(8, 14, 6)|var|uint16
var_784 = relay.var("var_784", dtype = "uint16", shape = (8, 14, 6))#candidate|784|(8, 14, 6)|var|uint16
var_785 = relay.var("var_785", dtype = "float32", shape = (8, 14, 6))#candidate|785|(8, 14, 6)|var|float32
call_782 = func_781_call(var_783,var_784,var_785,)
output = call_782
func_786 = relay.Function([var_783,var_784,var_785,], output)
mutated_mod['func_786'] = func_786
mutated_mod = relay.transform.InferType()(mutated_mod)
const_873 = relay.const([[[9.211107],[-2.949083],[0.996913],[-1.315350]],[[-6.428629],[-8.427076],[8.060022],[8.971422]],[[8.204445],[8.951865],[-1.604738],[6.689016]],[[-6.661077],[3.953217],[8.029116],[-7.190847]],[[5.373697],[2.231073],[-5.662257],[6.776115]],[[-4.404552],[-1.177641],[1.579611],[3.628536]],[[-3.797791],[-7.315904],[4.228537],[5.168552]],[[0.348058],[0.825027],[2.829377],[6.532384]],[[-0.972364],[-7.163526],[-1.034527],[9.731499]],[[7.472570],[6.980168],[9.649441],[2.030983]],[[9.391624],[2.543929],[-1.789702],[-7.235652]],[[7.900959],[-3.493070],[8.589579],[2.679342]]], dtype = "float64")#candidate|873|(12, 4, 1)|const|float64
uop_874 = relay.atan(const_873.astype('float64')) # shape=(12, 4, 1)
uop_877 = relay.exp(uop_874.astype('float32')) # shape=(12, 4, 1)
bop_880 = relay.less_equal(uop_877.astype('bool'), relay.reshape(const_873.astype('bool'), relay.shape_of(uop_877))) # shape=(12, 4, 1)
uop_889 = relay.acos(uop_877.astype('float64')) # shape=(12, 4, 1)
var_892 = relay.var("var_892", dtype = "bool", shape = (12, 4, 7))#candidate|892|(12, 4, 7)|var|bool
bop_893 = relay.left_shift(bop_880.astype('uint32'), var_892.astype('uint32')) # shape=(12, 4, 7)
var_896 = relay.var("var_896", dtype = "float64", shape = (12, 4, 11))#candidate|896|(12, 4, 11)|var|float64
bop_897 = relay.mod(uop_874.astype('float32'), var_896.astype('float32')) # shape=(12, 4, 11)
uop_900 = relay.sigmoid(bop_893.astype('float32')) # shape=(12, 4, 7)
var_902 = relay.var("var_902", dtype = "uint32", shape = (12, 4, 7))#candidate|902|(12, 4, 7)|var|uint32
bop_903 = relay.floor_divide(bop_893.astype('float64'), relay.reshape(var_902.astype('float64'), relay.shape_of(bop_893))) # shape=(12, 4, 7)
func_635_call = mod.get_global_var('func_635')
func_637_call = mutated_mod.get_global_var('func_637')
var_907 = relay.var("var_907", dtype = "float32", shape = (1260,))#candidate|907|(1260,)|var|float32
call_906 = relay.TupleGetItem(func_635_call(relay.reshape(var_907.astype('float32'), [14, 6, 15])), 0)
call_908 = relay.TupleGetItem(func_637_call(relay.reshape(var_907.astype('float32'), [14, 6, 15])), 0)
bop_909 = relay.not_equal(bop_903.astype('bool'), uop_889.astype('bool')) # shape=(12, 4, 7)
uop_912 = relay.erf(uop_900.astype('float32')) # shape=(12, 4, 7)
bop_914 = relay.logical_and(uop_912.astype('bool'), relay.reshape(bop_893.astype('bool'), relay.shape_of(uop_912))) # shape=(12, 4, 7)
bop_917 = relay.bitwise_and(uop_912.astype('uint16'), relay.reshape(bop_893.astype('uint16'), relay.shape_of(uop_912))) # shape=(12, 4, 7)
uop_923 = relay.asinh(bop_897.astype('float32')) # shape=(12, 4, 11)
func_322_call = mod.get_global_var('func_322')
func_323_call = mutated_mod.get_global_var('func_323')
call_926 = relay.TupleGetItem(func_322_call(), 2)
call_927 = relay.TupleGetItem(func_323_call(), 2)
func_551_call = mod.get_global_var('func_551')
func_556_call = mutated_mod.get_global_var('func_556')
var_931 = relay.var("var_931", dtype = "float64", shape = (6, 84))#candidate|931|(6, 84)|var|float64
const_932 = relay.const([False,False,True,True,False,False,True,True,False,True,False,True,False,True,True,False,True,True,True,False,True], dtype = "bool")#candidate|932|(21,)|const|bool
call_930 = relay.TupleGetItem(func_551_call(relay.reshape(var_931.astype('float64'), [504,]), relay.reshape(const_932.astype('bool'), [7, 3]), relay.reshape(const_932.astype('float64'), [7, 3]), ), 3)
call_933 = relay.TupleGetItem(func_556_call(relay.reshape(var_931.astype('float64'), [504,]), relay.reshape(const_932.astype('bool'), [7, 3]), relay.reshape(const_932.astype('float64'), [7, 3]), ), 3)
uop_934 = relay.sin(uop_889.astype('float32')) # shape=(12, 4, 1)
uop_940 = relay.rsqrt(uop_874.astype('float32')) # shape=(12, 4, 1)
uop_944 = relay.tan(uop_934.astype('float64')) # shape=(12, 4, 1)
const_947 = relay.const([[[1,-5,9,7,7,7,3],[3,6,-10,2,6,-7,-10],[4,10,-7,4,-4,-8,-4],[10,-8,1,-6,8,6,-10]],[[9,-3,-3,6,-7,-8,3],[1,10,7,6,-4,8,2],[8,-9,2,-9,3,7,-6],[-1,10,6,-3,9,-10,4]],[[7,-2,-8,1,10,-4,-5],[-3,3,-10,5,-4,1,-2],[6,-9,-1,-7,1,-8,-8],[-6,-3,-4,4,-1,1,9]],[[-9,-3,6,10,-2,-6,-5],[-5,-9,3,-1,-10,10,4],[-7,3,4,2,9,-7,9],[3,-8,-6,-1,-10,-8,9]],[[-2,-1,-8,8,2,3,-2],[-2,4,4,6,-2,8,3],[-10,6,-7,-4,1,8,2],[5,-4,4,4,3,-7,-9]],[[4,-3,-4,10,-3,-6,-6],[10,-8,1,-3,1,2,-7],[8,6,-8,8,-5,3,3],[-4,6,7,10,7,5,-9]],[[3,-6,2,4,-10,-1,-3],[4,-6,4,-2,-7,1,6],[-3,2,2,8,1,-5,-6],[-5,3,-4,-8,8,-3,4]],[[8,-9,6,-6,3,-4,5],[5,-6,-2,-10,5,-9,9],[9,-6,-5,7,-8,2,8],[-4,-3,-6,-1,-7,7,8]],[[6,-7,-3,1,8,1,-4],[5,-7,7,-2,-1,3,4],[2,7,-1,3,7,-4,-4],[1,8,-2,-7,-6,-1,-1]],[[-9,-6,7,6,-10,-2,5],[-4,-10,8,10,-4,-8,5],[-9,6,9,8,-7,-4,3],[6,3,-6,-4,3,-4,-9]],[[7,-2,2,6,-9,-9,-9],[7,-10,-2,4,10,-6,-10],[-1,-3,-4,-9,-2,-10,-9],[9,-2,4,9,7,-5,1]],[[-1,2,-1,10,-1,-4,4],[-5,-2,3,-3,8,-2,-7],[-1,8,9,-3,6,-6,4],[1,-3,-3,3,9,-2,9]]], dtype = "uint32")#candidate|947|(12, 4, 7)|const|uint32
bop_948 = relay.greater_equal(bop_893.astype('bool'), relay.reshape(const_947.astype('bool'), relay.shape_of(bop_893))) # shape=(12, 4, 7)
bop_955 = relay.subtract(uop_944.astype('int64'), var_907.astype('int64')) # shape=(12, 4, 1260)
uop_959 = relay.asin(bop_955.astype('float32')) # shape=(12, 4, 1260)
bop_962 = relay.equal(uop_889.astype('bool'), uop_959.astype('bool')) # shape=(12, 4, 1260)
bop_973 = relay.bitwise_and(uop_944.astype('int16'), bop_955.astype('int16')) # shape=(12, 4, 1260)
uop_978 = relay.atanh(uop_959.astype('float64')) # shape=(12, 4, 1260)
output = relay.Tuple([call_906,bop_909,bop_914,bop_917,uop_923,call_926,call_930,var_931,const_932,uop_940,bop_948,bop_962,bop_973,uop_978,])
output2 = relay.Tuple([call_908,bop_909,bop_914,bop_917,uop_923,call_927,call_933,var_931,const_932,uop_940,bop_948,bop_962,bop_973,uop_978,])
func_980 = relay.Function([var_892,var_896,var_902,var_907,var_931,], output)
mod['func_980'] = func_980
mod = relay.transform.InferType()(mod)
var_981 = relay.var("var_981", dtype = "bool", shape = (12, 4, 7))#candidate|981|(12, 4, 7)|var|bool
var_982 = relay.var("var_982", dtype = "float64", shape = (12, 4, 11))#candidate|982|(12, 4, 11)|var|float64
var_983 = relay.var("var_983", dtype = "uint32", shape = (12, 4, 7))#candidate|983|(12, 4, 7)|var|uint32
var_984 = relay.var("var_984", dtype = "float32", shape = (1260,))#candidate|984|(1260,)|var|float32
var_985 = relay.var("var_985", dtype = "float64", shape = (6, 84))#candidate|985|(6, 84)|var|float64
output = func_980(var_981,var_982,var_983,var_984,var_985,)
func_986 = relay.Function([var_981,var_982,var_983,var_984,var_985,], output)
mutated_mod['func_986'] = func_986
mutated_mod = relay.transform.InferType()(mutated_mod)
var_999 = relay.var("var_999", dtype = "int8", shape = (12, 9, 3))#candidate|999|(12, 9, 3)|var|int8
const_1000 = relay.const([[[-6,-2,7],[-6,5,-1],[-6,-4,5],[-5,-4,3],[-6,10,-1],[-3,-1,9],[-7,1,7],[-4,10,-9],[-8,10,-3]],[[3,3,1],[2,-2,7],[1,6,-7],[-5,-7,-8],[9,-3,9],[-1,-7,6],[8,-10,-2],[-2,4,-6],[-3,1,-3]],[[-10,-7,3],[-1,10,9],[-4,3,7],[-4,8,-9],[10,-5,-3],[1,3,8],[-6,10,-7],[-10,-6,-8],[10,-10,-9]],[[-5,10,-1],[8,-10,-10],[9,-9,1],[-8,10,6],[4,9,4],[-4,8,-9],[-1,-1,-10],[-9,-6,-7],[-6,-8,8]],[[-4,1,8],[-1,6,-6],[-8,-4,8],[-9,-4,-7],[4,8,2],[7,6,-9],[-5,7,-2],[8,2,1],[9,-6,7]],[[-6,1,-2],[-7,8,8],[10,-2,9],[-9,-5,1],[10,-6,-3],[-2,-3,-10],[-5,-5,-2],[2,8,-8],[7,-6,-10]],[[-8,8,-7],[-8,-9,-1],[7,8,8],[-7,-4,6],[4,9,6],[8,10,-2],[5,7,5],[5,-3,-6],[-6,3,9]],[[-10,-5,-2],[10,6,6],[-8,-2,-6],[-10,-8,7],[6,-4,1],[-10,-6,-4],[5,10,4],[3,-6,-7],[-9,5,-2]],[[9,6,-8],[-9,-10,5],[-7,7,-4],[-5,5,10],[-6,-10,6],[5,-1,1],[10,2,-8],[3,7,-5],[1,6,1]],[[-9,-6,-2],[-3,8,-8],[7,-2,7],[4,-7,9],[2,2,-7],[5,-2,5],[5,-10,3],[-3,-7,7],[-7,5,-4]],[[4,6,5],[10,9,2],[7,3,-10],[7,-5,10],[-2,5,-1],[-4,4,-2],[5,-10,6],[-8,9,2],[8,-7,-8]],[[6,-6,-9],[-1,-3,-5],[5,-8,4],[-5,1,-4],[7,4,4],[1,-2,-3],[3,6,-9],[2,8,-7],[6,-5,-9]]], dtype = "int8")#candidate|1000|(12, 9, 3)|const|int8
bop_1001 = relay.greater(var_999.astype('bool'), relay.reshape(const_1000.astype('bool'), relay.shape_of(var_999))) # shape=(12, 9, 3)
var_1004 = relay.var("var_1004", dtype = "bool", shape = (12, 9, 3))#candidate|1004|(12, 9, 3)|var|bool
bop_1005 = relay.greater_equal(bop_1001.astype('bool'), relay.reshape(var_1004.astype('bool'), relay.shape_of(bop_1001))) # shape=(12, 9, 3)
bop_1010 = relay.divide(bop_1001.astype('float64'), relay.reshape(var_999.astype('float64'), relay.shape_of(bop_1001))) # shape=(12, 9, 3)
bop_1013 = relay.bitwise_or(bop_1001.astype('uint8'), relay.reshape(const_1000.astype('uint8'), relay.shape_of(bop_1001))) # shape=(12, 9, 3)
bop_1026 = relay.logical_and(bop_1005.astype('bool'), relay.reshape(bop_1010.astype('bool'), relay.shape_of(bop_1005))) # shape=(12, 9, 3)
uop_1029 = relay.cosh(bop_1013.astype('float64')) # shape=(12, 9, 3)
bop_1031 = relay.bitwise_xor(uop_1029.astype('int8'), relay.reshape(bop_1010.astype('int8'), relay.shape_of(uop_1029))) # shape=(12, 9, 3)
var_1036 = relay.var("var_1036", dtype = "int8", shape = (12, 9, 3))#candidate|1036|(12, 9, 3)|var|int8
bop_1037 = relay.floor_mod(bop_1031.astype('float64'), relay.reshape(var_1036.astype('float64'), relay.shape_of(bop_1031))) # shape=(12, 9, 3)
uop_1041 = relay.tan(bop_1031.astype('float32')) # shape=(12, 9, 3)
bop_1043 = relay.logical_or(uop_1041.astype('bool'), relay.reshape(bop_1026.astype('bool'), relay.shape_of(uop_1041))) # shape=(12, 9, 3)
output = relay.Tuple([bop_1037,bop_1043,])
output2 = relay.Tuple([bop_1037,bop_1043,])
func_1046 = relay.Function([var_999,var_1004,var_1036,], output)
mod['func_1046'] = func_1046
mod = relay.transform.InferType()(mod)
var_1047 = relay.var("var_1047", dtype = "int8", shape = (12, 9, 3))#candidate|1047|(12, 9, 3)|var|int8
var_1048 = relay.var("var_1048", dtype = "bool", shape = (12, 9, 3))#candidate|1048|(12, 9, 3)|var|bool
var_1049 = relay.var("var_1049", dtype = "int8", shape = (12, 9, 3))#candidate|1049|(12, 9, 3)|var|int8
output = func_1046(var_1047,var_1048,var_1049,)
func_1050 = relay.Function([var_1047,var_1048,var_1049,], output)
mutated_mod['func_1050'] = func_1050
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1070 = relay.var("var_1070", dtype = "int32", shape = (6, 16, 6))#candidate|1070|(6, 16, 6)|var|int32
var_1071 = relay.var("var_1071", dtype = "int32", shape = (6, 16, 6))#candidate|1071|(6, 16, 6)|var|int32
bop_1072 = relay.less(var_1070.astype('bool'), relay.reshape(var_1071.astype('bool'), relay.shape_of(var_1070))) # shape=(6, 16, 6)
var_1075 = relay.var("var_1075", dtype = "int32", shape = (6, 16, 6))#candidate|1075|(6, 16, 6)|var|int32
bop_1076 = relay.greater(var_1070.astype('bool'), relay.reshape(var_1075.astype('bool'), relay.shape_of(var_1070))) # shape=(6, 16, 6)
func_416_call = mod.get_global_var('func_416')
func_417_call = mutated_mod.get_global_var('func_417')
call_1083 = func_416_call()
call_1084 = func_416_call()
var_1089 = relay.var("var_1089", dtype = "int32", shape = (6, 16, 6))#candidate|1089|(6, 16, 6)|var|int32
bop_1090 = relay.less_equal(var_1070.astype('bool'), relay.reshape(var_1089.astype('bool'), relay.shape_of(var_1070))) # shape=(6, 16, 6)
bop_1103 = relay.logical_or(bop_1090.astype('bool'), relay.reshape(var_1071.astype('bool'), relay.shape_of(bop_1090))) # shape=(6, 16, 6)
output = relay.Tuple([bop_1072,bop_1076,call_1083,bop_1103,])
output2 = relay.Tuple([bop_1072,bop_1076,call_1084,bop_1103,])
F = relay.Function([var_1070,var_1071,var_1075,var_1089,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1070,var_1071,var_1075,var_1089,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1070= np.array([[[5,-10,10,9,-5,4],[1,-3,3,-5,-7,2],[-1,-3,7,-1,-3,3],[2,-5,-8,-6,-2,3],[-10,-10,3,7,8,9],[5,-10,-2,2,-4,1],[-7,10,-8,7,-5,5],[8,4,-1,5,-4,4],[7,-9,2,2,9,-1],[7,6,-6,2,4,-3],[-10,3,-1,-7,3,-1],[10,-6,-5,7,-4,8],[6,5,-7,-7,5,10],[-8,-8,4,8,1,2],[-1,-10,4,7,7,1],[2,-2,7,5,-10,6]],[[10,-8,10,-9,-3,-7],[6,-8,-8,8,9,7],[1,-3,6,-4,5,-9],[4,-7,-6,5,-2,6],[3,2,-3,8,-2,4],[-2,6,10,4,3,2],[-10,3,9,-4,5,-4],[4,4,-5,-5,7,-4],[-7,3,-2,1,-2,-5],[-6,-5,4,3,3,5],[-8,-7,-4,-3,1,-2],[1,-6,10,5,-8,-8],[4,-10,3,-7,10,7],[4,6,4,-8,-1,-9],[6,6,-8,8,-8,-9],[6,1,1,-1,-7,-10]],[[-4,7,5,-6,-2,4],[-9,-2,-3,-9,8,-6],[-9,3,3,-7,2,-2],[-10,7,-1,1,-5,8],[-3,-6,6,-9,-8,-8],[-4,8,9,-2,-6,-10],[-9,-8,6,-2,-2,10],[-10,-2,-1,-9,-9,2],[5,-8,4,2,1,-10],[6,5,-10,-6,6,-7],[2,4,1,9,2,8],[5,1,-10,2,3,-3],[-2,3,9,-5,-6,-2],[6,4,9,6,-2,2],[10,-7,1,5,-9,3],[8,10,-6,-10,4,-10]],[[8,8,3,-3,2,-7],[1,8,2,-9,9,4],[-2,10,10,10,6,-9],[6,3,1,-4,-1,2],[4,-4,1,-10,6,-10],[10,4,7,-6,-5,-4],[-10,-9,-3,-6,2,-1],[2,7,-1,-4,-8,6],[2,-2,-4,3,7,7],[-3,-6,-7,-10,-8,6],[-8,10,-9,-3,8,-7],[-4,-8,-2,-10,10,-10],[4,-7,-8,4,1,2],[-8,-10,2,1,-8,8],[4,3,-5,4,-4,2],[3,-10,9,6,-8,-6]],[[-4,10,-5,-1,6,4],[10,9,-8,8,8,-8],[9,-4,10,1,6,7],[-8,2,-6,-5,4,-10],[8,6,3,3,-7,1],[9,-1,-3,-8,-9,-7],[9,-9,8,7,-5,-10],[-8,2,-3,1,5,9],[-10,-9,9,2,-7,-1],[2,9,-5,-8,5,6],[-3,8,-1,-5,5,-10],[1,-2,-6,-3,5,6],[4,-10,-3,5,-5,3],[-3,7,-4,2,-10,6],[-1,4,5,-7,3,-8],[-6,-2,7,5,4,7]],[[8,5,-8,-5,2,-7],[1,-5,-1,-1,-5,8],[-6,1,-4,2,-10,1],[2,6,-9,-10,-7,5],[6,-7,-6,-3,9,-6],[2,4,-9,-9,4,4],[6,-4,-8,3,6,7],[6,-8,-3,5,-4,-9],[-7,-3,-2,6,10,-5],[10,2,-7,-10,10,7],[2,-1,4,-1,-10,3],[1,4,-1,10,6,-9],[-3,-7,7,-6,-7,-5],[-1,-1,1,5,-3,-3],[-7,-8,-7,5,8,-2],[-5,1,-9,2,-3,3]]], dtype='int32')
module1.set_input('var_1070', input_1070)
input_1071= np.array([[[4,5,-6,-4,1,5],[10,7,1,10,10,-9],[-8,-9,1,-6,-9,-4],[9,-7,9,10,1,5],[7,-9,7,-5,6,-9],[-7,1,7,-10,-3,-9],[-10,-2,-6,-4,-2,-9],[-10,7,10,4,2,3],[3,6,-4,-8,3,7],[7,-2,4,-2,-8,2],[-5,-3,-4,-6,2,2],[-6,10,2,-1,-1,-10],[6,1,2,-2,-2,4],[3,-2,2,3,-6,-9],[2,-9,-3,-8,-2,-3],[-4,1,-9,-1,-7,-9]],[[1,-6,5,-7,-5,10],[7,9,6,-4,-6,-6],[2,-1,-2,-9,-2,-2],[-2,6,5,-5,3,-2],[7,-1,10,2,-5,-4],[-3,2,8,4,10,7],[-5,8,8,1,5,-10],[7,1,-3,1,-8,1],[6,5,-5,-3,-7,-10],[-2,-2,-3,6,-6,-4],[-1,-5,7,-4,1,-8],[4,-9,-2,-7,2,-3],[-6,4,5,-9,10,-5],[1,-1,1,-1,1,-5],[8,9,-3,-2,-9,-1],[4,-1,5,3,-5,10]],[[-4,-10,-10,-9,-7,8],[-9,3,9,-2,-3,7],[-9,5,5,-10,8,-5],[5,9,-2,-5,7,1],[-9,9,6,-1,-6,-10],[4,3,10,-4,-10,6],[-10,-3,9,5,6,10],[-9,8,-7,-8,8,7],[-7,-2,4,1,9,10],[-7,-5,-6,9,-6,-1],[-5,8,-2,1,5,-8],[-1,10,-4,-9,-7,6],[-1,-1,1,-2,2,-10],[-4,-4,4,6,3,-7],[-8,8,1,1,8,-9],[-3,-5,-10,9,-6,2]],[[7,7,-6,4,9,9],[5,-3,1,10,-2,9],[10,7,1,5,-7,-7],[-7,7,3,7,8,-1],[-2,3,5,-8,-9,10],[4,9,10,-4,-7,4],[-7,-7,10,5,8,6],[9,-8,-10,-2,6,8],[7,4,3,5,-6,4],[-10,-8,7,4,9,-8],[-2,5,-4,-5,-5,7],[6,7,-6,-10,1,7],[-3,6,4,-2,4,4],[10,-1,10,-2,-9,8],[9,-4,-7,8,1,-1],[8,1,3,-2,-7,-10]],[[10,-3,1,8,1,-10],[-10,-8,2,8,-5,4],[4,-4,10,10,-8,-2],[-8,8,-10,-8,9,-3],[-3,3,-10,9,4,7],[-7,-7,-1,3,9,9],[-4,-2,-10,3,8,3],[-2,1,6,-3,4,8],[-9,5,4,9,-10,8],[8,5,-7,1,3,-9],[-10,1,-2,-1,10,1],[1,-10,9,-3,1,-2],[-6,-10,-6,9,-3,2],[-9,-8,-1,3,-7,3],[2,4,3,4,10,10],[4,4,10,-3,-10,-8]],[[-10,-1,5,-6,9,2],[7,-1,1,4,3,-5],[5,1,-8,6,-9,6],[10,-1,-1,3,3,4],[-9,1,8,2,3,1],[-4,9,4,7,7,-7],[5,4,-5,-1,-1,-4],[-6,4,-2,1,2,9],[-7,-1,8,-1,-7,-8],[7,7,-10,7,-9,-7],[6,9,2,-5,6,-1],[4,-5,1,3,3,-6],[-1,2,5,-1,9,-10],[-9,8,-1,-10,-5,7],[-10,-3,-10,-7,1,-1],[9,7,3,9,-4,-7]]], dtype='int32')
module1.set_input('var_1071', input_1071)
input_1075= np.array([[[-7,1,-2,7,-9,-5],[9,-2,-1,7,6,-10],[-3,2,5,2,6,4],[-2,-2,-3,-1,-10,3],[5,-3,-7,-1,9,10],[3,-6,7,-7,-4,1],[-5,-10,-7,-6,4,-7],[-2,3,-2,-7,-5,3],[6,-3,8,-8,10,8],[10,2,-3,8,7,-9],[4,-3,-1,-3,4,-7],[-3,5,-2,1,-7,9],[1,-7,9,-7,-4,-4],[-5,-3,-6,-3,-5,2],[-1,1,-7,-8,-10,-7],[5,-3,-4,-5,5,-2]],[[-8,2,3,-3,9,10],[8,4,-5,6,9,-10],[-6,4,2,-4,10,8],[-10,-8,8,-4,-8,-2],[-1,4,8,3,-8,7],[2,2,5,-5,-2,-3],[9,-7,-6,-1,-7,-9],[8,1,8,7,7,-1],[-1,1,-7,6,-2,6],[-9,-6,-1,-3,6,6],[2,-5,-3,5,-3,9],[-1,-8,5,-10,1,3],[1,-5,-2,3,4,-4],[4,-3,4,-7,-5,7],[-10,-6,-4,-5,7,-4],[-10,-4,4,-3,5,-7]],[[6,-5,10,-2,-8,-3],[9,7,-9,8,9,6],[-8,-4,-5,-6,-5,-3],[-3,-7,-5,-3,-8,2],[-3,-9,-10,8,5,5],[-10,-10,-1,10,-10,-5],[7,9,10,7,2,8],[2,-4,-7,-7,-1,2],[4,6,-10,8,8,-5],[1,-4,7,-8,9,7],[2,-2,3,-5,-7,10],[1,-7,7,9,-5,2],[-6,-2,-4,-10,-3,1],[8,4,6,-7,1,-8],[-7,8,-2,3,-3,-5],[-3,5,-1,3,-2,-7]],[[2,5,-7,4,2,5],[2,-1,4,-2,-3,5],[1,3,7,-2,-3,4],[2,7,10,7,1,-7],[-4,-2,-5,-10,6,-10],[3,-2,10,10,4,7],[9,-5,10,5,-10,2],[5,2,3,-6,5,-7],[-6,1,2,3,10,2],[-10,5,-6,-5,-8,4],[-10,-2,-8,4,-3,3],[2,9,-4,3,9,-3],[-6,-8,5,8,10,-2],[6,-2,2,-6,-3,-6],[7,-10,9,1,-2,-2],[1,-4,-9,-1,4,-5]],[[9,1,-8,9,-8,2],[-2,5,-4,-1,-6,-5],[-3,9,10,-6,-5,2],[-3,9,-10,9,5,-6],[-8,5,-1,-8,-9,-4],[10,1,-6,-1,6,10],[-2,-9,-2,8,-1,-7],[-5,9,-1,4,-2,1],[8,8,-1,-9,9,1],[-3,3,-2,-8,-5,-3],[-1,-2,-2,2,-4,-3],[1,9,1,1,-9,-10],[7,9,7,10,1,-3],[-6,2,-7,8,-8,-8],[-9,5,-7,10,-2,-8],[5,9,2,8,8,10]],[[4,5,-7,2,-4,-3],[-1,5,-5,4,-2,5],[-4,-6,10,8,-3,7],[6,5,8,10,-2,5],[-9,9,-2,9,-7,8],[8,3,-7,-3,-4,2],[8,-3,7,2,-9,-9],[-5,-6,-1,2,-10,-5],[7,-1,-8,-3,5,9],[-4,-9,-1,-3,-7,9],[-5,1,7,-6,4,5],[8,-8,-6,4,7,-2],[-2,-5,5,-8,6,-10],[5,-9,-3,3,-4,6],[-10,-9,-4,5,7,-8],[7,-5,-7,-8,-2,1]]], dtype='int32')
module1.set_input('var_1075', input_1075)
input_1089= np.array([[[1,7,-5,-7,-3,-1],[-7,-6,10,7,10,-10],[8,9,-7,5,4,-5],[-5,3,-9,5,-3,-10],[-5,-8,-10,3,-10,-10],[-3,-5,7,6,-10,-9],[5,5,-7,1,-4,8],[-1,6,1,8,-2,-1],[-1,-2,9,-2,-7,4],[-5,-5,-6,-7,-4,-10],[-10,1,9,3,-10,-5],[-8,3,7,7,-2,1],[7,-9,-10,6,-5,-3],[8,6,-1,-8,9,4],[9,-6,-6,-3,6,6],[10,5,8,2,4,-5]],[[-1,5,4,-6,1,-8],[-2,3,-2,3,10,9],[-5,-7,9,5,-7,-1],[-10,-6,10,1,6,7],[3,-1,-7,-3,9,3],[-2,-9,-1,-1,-7,5],[2,9,-1,5,-8,9],[7,10,-3,-4,-5,5],[-5,-10,-3,2,-2,3],[-9,9,7,3,-3,-9],[-9,-5,-8,-10,-7,7],[-5,7,-10,-1,3,4],[-2,-3,1,-3,-7,-5],[-9,9,-3,-9,-5,-6],[-9,4,10,3,7,9],[9,10,-10,-10,10,-6]],[[10,-1,-2,-2,7,4],[-5,9,2,-2,10,7],[-7,-9,-8,1,-10,3],[-1,-2,10,-6,-10,7],[-3,-3,2,-2,-6,-7],[-6,4,-1,8,1,-2],[6,8,-3,10,-3,-8],[4,6,-1,-6,-1,2],[9,-6,2,3,-6,-5],[-5,4,9,-5,-9,3],[-3,-6,-1,-8,10,1],[2,9,-5,8,7,-10],[-1,9,3,10,5,10],[-6,-6,-2,8,3,3],[-10,-9,-10,-5,-1,3],[-10,-10,10,-9,-8,-3]],[[-2,-4,8,4,-10,-7],[10,-3,10,-7,-8,-3],[8,-3,9,-7,-8,-7],[-2,-8,-1,-3,9,-4],[-10,7,-7,-4,-4,-1],[6,-5,1,-3,-10,3],[8,-4,2,5,-8,-1],[7,-10,-4,-4,-9,7],[9,-10,2,4,-1,-6],[6,-6,8,-9,-3,-3],[-10,-9,6,-8,7,7],[3,-9,8,7,1,-8],[9,1,8,8,5,-6],[3,-7,2,-10,-3,-9],[-6,-9,-10,-5,6,-10],[2,-2,-9,-7,10,3]],[[-9,-9,3,5,4,8],[1,-4,9,-1,6,-9],[2,7,3,-4,-4,5],[10,-1,-6,-10,-2,5],[-8,6,2,9,5,-5],[-6,1,3,9,7,-10],[1,-1,-4,-6,-7,-8],[-2,-2,-3,-3,10,-8],[9,-6,1,1,-6,5],[-1,4,-7,-6,9,4],[-6,10,-3,9,-10,-10],[3,-1,6,-10,-10,4],[7,4,9,-8,7,3],[8,3,8,-7,7,-9],[7,-7,-4,-4,-2,-6],[8,-5,4,6,1,10]],[[-5,10,8,-4,-9,-1],[3,-1,-4,3,3,-9],[-10,-8,4,-10,-6,8],[10,-6,2,-1,5,-9],[10,-10,-2,1,4,2],[-7,5,-3,-7,5,-1],[3,4,-3,-6,5,-8],[-7,-10,8,8,-4,-1],[8,-9,3,1,-1,3],[-10,-9,-9,3,-5,8],[2,-9,9,-3,-7,-1],[2,6,9,-9,2,-3],[6,6,6,5,2,-6],[5,9,2,4,-1,9],[-2,6,-8,-5,-4,10],[-7,-10,10,-9,5,-10]]], dtype='int32')
module1.set_input('var_1089', input_1089)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1070, input_1071, input_1075, input_1089, )
res3 = intrp3.evaluate()(input_1070, input_1071, input_1075, input_1089, )
res4 = intrp4.evaluate()(input_1070, input_1071, input_1075, input_1089, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
module5.set_input('var_1070', input_1070)
module5.set_input('var_1071', input_1071)
module5.set_input('var_1075', input_1075)
module5.set_input('var_1089', input_1089)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1070, input_1071, input_1075, input_1089, )
res7 = intrp7.evaluate()(input_1070, input_1071, input_1075, input_1089, )
res8 = intrp8.evaluate()(input_1070, input_1071, input_1075, input_1089, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
module9.set_input('var_1070', input_1070)
module9.set_input('var_1071', input_1071)
module9.set_input('var_1075', input_1075)
module9.set_input('var_1089', input_1089)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1070, input_1071, input_1075, input_1089, )
res11 = intrp11.evaluate()(input_1070, input_1071, input_1075, input_1089, )
res12 = intrp12.evaluate()(input_1070, input_1071, input_1075, input_1089, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
module13.set_input('var_1070', input_1070)
module13.set_input('var_1071', input_1071)
module13.set_input('var_1075', input_1075)
module13.set_input('var_1089', input_1089)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1070, input_1071, input_1075, input_1089, )
res15 = intrp15.evaluate()(input_1070, input_1071, input_1075, input_1089, )
res16 = intrp16.evaluate()(input_1070, input_1071, input_1075, input_1089, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
module17.set_input('var_1070', input_1070)
module17.set_input('var_1071', input_1071)
module17.set_input('var_1075', input_1075)
module17.set_input('var_1089', input_1089)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1070, input_1071, input_1075, input_1089, )
res19 = intrp19.evaluate()(input_1070, input_1071, input_1075, input_1089, )
res20 = intrp20.evaluate()(input_1070, input_1071, input_1075, input_1089, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
module21.set_input('var_1070', input_1070)
module21.set_input('var_1071', input_1071)
module21.set_input('var_1075', input_1075)
module21.set_input('var_1089', input_1089)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1070, input_1071, input_1075, input_1089, )
res23 = intrp23.evaluate()(input_1070, input_1071, input_1075, input_1089, )
res24 = intrp24.evaluate()(input_1070, input_1071, input_1075, input_1089, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()

'''6: TVMFuncCall
5: _ZNSt17_Function_handlerIFvN3tvm7runtime7
4: tvm::runtime::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const [clone .isra.808]
3: tvm::runtime::GraphExecutorCreate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module const&, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
2: tvm::runtime::GraphExecutor::Init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
1: tvm::runtime::GraphExecutor::SetupOpExecs()
0: tvm::runtime::GraphExecutor::CreateTVMOp(tvm::runtime::TVMOpParam const&, std::vector<DLTensor, std::allocator<DLTensor> > const&)

'''