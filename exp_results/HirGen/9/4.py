import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
const_16 = relay.const([2,3,5,-5,-10,-9,1], dtype = "int8")#candidate|16|(7,)|const|int8
var_17 = relay.var("var_17", dtype = "int8", shape = (7,))#candidate|17|(7,)|var|int8
bop_18 = relay.add(const_16.astype('int8'), relay.reshape(var_17.astype('int8'), relay.shape_of(const_16))) # shape=(7,)
output = relay.Tuple([bop_18,])
output2 = relay.Tuple([bop_18,])
func_22 = relay.Function([var_17,], output)
mod['func_22'] = func_22
mod = relay.transform.InferType()(mod)
var_23 = relay.var("var_23", dtype = "int8", shape = (7,))#candidate|23|(7,)|var|int8
output = func_22(var_23)
func_24 = relay.Function([var_23], output)
mutated_mod['func_24'] = func_24
mutated_mod = relay.transform.InferType()(mutated_mod)
var_39 = relay.var("var_39", dtype = "float64", shape = (12, 8, 16))#candidate|39|(12, 8, 16)|var|float64
var_40 = relay.var("var_40", dtype = "float64", shape = (12, 8, 16))#candidate|40|(12, 8, 16)|var|float64
bop_41 = relay.floor_mod(var_39.astype('float64'), relay.reshape(var_40.astype('float64'), relay.shape_of(var_39))) # shape=(12, 8, 16)
uop_49 = relay.acosh(bop_41.astype('float32')) # shape=(12, 8, 16)
func_22_call = mod.get_global_var('func_22')
func_24_call = mutated_mod.get_global_var('func_24')
const_54 = relay.const([-8,5,-3,-4,-4,1,7], dtype = "int8")#candidate|54|(7,)|const|int8
call_53 = relay.TupleGetItem(func_22_call(relay.reshape(const_54.astype('int8'), [7,])), 0)
call_55 = relay.TupleGetItem(func_24_call(relay.reshape(const_54.astype('int8'), [7,])), 0)
uop_56 = relay.sigmoid(bop_41.astype('float32')) # shape=(12, 8, 16)
uop_59 = relay.acosh(uop_49.astype('float32')) # shape=(12, 8, 16)
uop_61 = relay.log(uop_56.astype('float64')) # shape=(12, 8, 16)
var_65 = relay.var("var_65", dtype = "float32", shape = (12, 8, 16))#candidate|65|(12, 8, 16)|var|float32
bop_66 = relay.divide(uop_59.astype('float64'), relay.reshape(var_65.astype('float64'), relay.shape_of(uop_59))) # shape=(12, 8, 16)
func_22_call = mod.get_global_var('func_22')
func_24_call = mutated_mod.get_global_var('func_24')
call_69 = relay.TupleGetItem(func_22_call(relay.reshape(call_53.astype('int8'), [7,])), 0)
call_70 = relay.TupleGetItem(func_24_call(relay.reshape(call_53.astype('int8'), [7,])), 0)
uop_71 = relay.erf(uop_56.astype('float64')) # shape=(12, 8, 16)
bop_73 = relay.multiply(bop_66.astype('uint32'), relay.reshape(var_65.astype('uint32'), relay.shape_of(bop_66))) # shape=(12, 8, 16)
bop_79 = relay.equal(bop_66.astype('bool'), relay.reshape(uop_59.astype('bool'), relay.shape_of(bop_66))) # shape=(12, 8, 16)
bop_83 = relay.add(bop_79.astype('float32'), relay.reshape(var_39.astype('float32'), relay.shape_of(bop_79))) # shape=(12, 8, 16)
bop_86 = relay.bitwise_or(bop_73.astype('uint64'), relay.reshape(uop_71.astype('uint64'), relay.shape_of(bop_73))) # shape=(12, 8, 16)
func_22_call = mod.get_global_var('func_22')
func_24_call = mutated_mod.get_global_var('func_24')
call_94 = relay.TupleGetItem(func_22_call(relay.reshape(call_69.astype('int8'), [7,])), 0)
call_95 = relay.TupleGetItem(func_24_call(relay.reshape(call_69.astype('int8'), [7,])), 0)
bop_96 = relay.minimum(uop_49.astype('float32'), relay.reshape(bop_73.astype('float32'), relay.shape_of(uop_49))) # shape=(12, 8, 16)
uop_100 = relay.tan(bop_73.astype('float32')) # shape=(12, 8, 16)
output = relay.Tuple([call_53,const_54,uop_61,call_69,bop_83,bop_86,call_94,bop_96,uop_100,])
output2 = relay.Tuple([call_55,const_54,uop_61,call_70,bop_83,bop_86,call_95,bop_96,uop_100,])
func_103 = relay.Function([var_39,var_40,var_65,], output)
mod['func_103'] = func_103
mod = relay.transform.InferType()(mod)
mutated_mod['func_103'] = func_103
mutated_mod = relay.transform.InferType()(mutated_mod)
func_103_call = mutated_mod.get_global_var('func_103')
var_105 = relay.var("var_105", dtype = "float64", shape = (12, 8, 16))#candidate|105|(12, 8, 16)|var|float64
var_106 = relay.var("var_106", dtype = "float64", shape = (12, 8, 16))#candidate|106|(12, 8, 16)|var|float64
var_107 = relay.var("var_107", dtype = "float32", shape = (12, 8, 16))#candidate|107|(12, 8, 16)|var|float32
call_104 = func_103_call(var_105,var_106,var_107,)
output = call_104
func_108 = relay.Function([var_105,var_106,var_107,], output)
mutated_mod['func_108'] = func_108
mutated_mod = relay.transform.InferType()(mutated_mod)
const_110 = relay.const([8.697238,6.545609,6.560289,-6.022955,7.445522,0.287493,7.902775,7.332764,-2.453304,6.559026], dtype = "float32")#candidate|110|(10,)|const|float32
var_111 = relay.var("var_111", dtype = "float32", shape = (10,))#candidate|111|(10,)|var|float32
bop_112 = relay.power(const_110.astype('float32'), relay.reshape(var_111.astype('float32'), relay.shape_of(const_110))) # shape=(10,)
uop_115 = relay.asinh(var_111.astype('float32')) # shape=(10,)
func_22_call = mod.get_global_var('func_22')
func_24_call = mutated_mod.get_global_var('func_24')
var_119 = relay.var("var_119", dtype = "int8", shape = (1, 7))#candidate|119|(1, 7)|var|int8
call_118 = relay.TupleGetItem(func_22_call(relay.reshape(var_119.astype('int8'), [7,])), 0)
call_120 = relay.TupleGetItem(func_24_call(relay.reshape(var_119.astype('int8'), [7,])), 0)
bop_121 = relay.right_shift(uop_115.astype('int64'), relay.reshape(const_110.astype('int64'), relay.shape_of(uop_115))) # shape=(10,)
bop_124 = relay.equal(var_111.astype('bool'), relay.reshape(uop_115.astype('bool'), relay.shape_of(var_111))) # shape=(10,)
bop_127 = relay.left_shift(uop_115.astype('int8'), relay.reshape(bop_121.astype('int8'), relay.shape_of(uop_115))) # shape=(10,)
uop_130 = relay.log(bop_127.astype('float64')) # shape=(10,)
var_132 = relay.var("var_132", dtype = "float32", shape = (10,))#candidate|132|(10,)|var|float32
bop_133 = relay.less_equal(bop_112.astype('bool'), relay.reshape(var_132.astype('bool'), relay.shape_of(bop_112))) # shape=(10,)
output = relay.Tuple([call_118,var_119,bop_124,uop_130,bop_133,])
output2 = relay.Tuple([call_120,var_119,bop_124,uop_130,bop_133,])
func_137 = relay.Function([var_111,var_119,var_132,], output)
mod['func_137'] = func_137
mod = relay.transform.InferType()(mod)
mutated_mod['func_137'] = func_137
mutated_mod = relay.transform.InferType()(mutated_mod)
func_137_call = mutated_mod.get_global_var('func_137')
var_139 = relay.var("var_139", dtype = "float32", shape = (10,))#candidate|139|(10,)|var|float32
var_140 = relay.var("var_140", dtype = "int8", shape = (1, 7))#candidate|140|(1, 7)|var|int8
var_141 = relay.var("var_141", dtype = "float32", shape = (10,))#candidate|141|(10,)|var|float32
call_138 = func_137_call(var_139,var_140,var_141,)
output = call_138
func_142 = relay.Function([var_139,var_140,var_141,], output)
mutated_mod['func_142'] = func_142
mutated_mod = relay.transform.InferType()(mutated_mod)
var_158 = relay.var("var_158", dtype = "uint64", shape = ())#candidate|158|()|var|uint64
const_159 = relay.const([4,-7,-10,1,1,10,-2,-1,-8,9,7,-8,1,-10], dtype = "uint64")#candidate|159|(14,)|const|uint64
bop_160 = relay.bitwise_and(var_158.astype('uint64'), const_159.astype('uint64')) # shape=(14,)
bop_165 = relay.mod(bop_160.astype('float32'), relay.reshape(const_159.astype('float32'), relay.shape_of(bop_160))) # shape=(14,)
uop_169 = relay.exp(bop_165.astype('float64')) # shape=(14,)
bop_175 = relay.less_equal(uop_169.astype('bool'), var_158.astype('bool')) # shape=(14,)
output = relay.Tuple([bop_175,])
output2 = relay.Tuple([bop_175,])
func_178 = relay.Function([var_158,], output)
mod['func_178'] = func_178
mod = relay.transform.InferType()(mod)
mutated_mod['func_178'] = func_178
mutated_mod = relay.transform.InferType()(mutated_mod)
var_179 = relay.var("var_179", dtype = "uint64", shape = ())#candidate|179|()|var|uint64
func_178_call = mutated_mod.get_global_var('func_178')
call_180 = func_178_call(var_179)
output = call_180
func_181 = relay.Function([var_179], output)
mutated_mod['func_181'] = func_181
mutated_mod = relay.transform.InferType()(mutated_mod)
const_244 = relay.const([[3.188577,5.916603,8.433805]], dtype = "float64")#candidate|244|(1, 3)|const|float64
uop_245 = relay.acosh(const_244.astype('float64')) # shape=(1, 3)
output = relay.Tuple([uop_245,])
output2 = relay.Tuple([uop_245,])
func_247 = relay.Function([], output)
mod['func_247'] = func_247
mod = relay.transform.InferType()(mod)
mutated_mod['func_247'] = func_247
mutated_mod = relay.transform.InferType()(mutated_mod)
func_247_call = mutated_mod.get_global_var('func_247')
call_248 = func_247_call()
output = call_248
func_249 = relay.Function([], output)
mutated_mod['func_249'] = func_249
mutated_mod = relay.transform.InferType()(mutated_mod)
func_247_call = mod.get_global_var('func_247')
func_249_call = mutated_mod.get_global_var('func_249')
call_256 = relay.TupleGetItem(func_247_call(), 0)
call_257 = relay.TupleGetItem(func_249_call(), 0)
func_103_call = mod.get_global_var('func_103')
func_108_call = mutated_mod.get_global_var('func_108')
const_271 = relay.const([-4.734673,-8.912370,-0.827465,3.621400,2.965056,3.982869,-5.662377,7.810789,8.871567,1.768780,2.671605,2.662771,-4.721664,5.803408,-8.577346,-7.287915,-4.660040,4.227646,9.553476,-6.707827,6.755237,8.728806,1.699147,2.687710,1.619155,-6.616228,-9.810491,1.129299,9.141510,-8.966712,0.696647,-5.487210,1.538489,-1.155944,-9.328398,9.356270,8.119494,-0.429525,-0.421600,0.875504,-2.823759,-0.771386,7.771955,-5.543433,-6.836996,-7.636134,5.695145,4.162174,0.111440,7.889291,-6.899845,4.392169,-8.651679,-6.753534,5.677704,-0.813983,4.840515,-9.894730,-8.267860,1.733098,2.337866,-9.677871,-3.196575,7.563001,0.827317,-2.942791,-7.541380,6.525898,1.868428,4.628252,4.948607,-1.272941,-0.913495,3.143947,8.689841,4.813382,6.012196,-7.017005,3.212200,9.288091,-5.657831,-4.270411,5.063200,8.919606,8.730555,1.165785,-7.095302,5.903971,8.531426,7.064830,-1.602024,1.818683,-4.583691,1.637474,-2.953189,1.072262,-4.341180,9.329763,4.209582,-2.785641,1.942023,-1.693321,-7.558266,-3.436081,-5.449587,-3.603840,-8.207578,-2.129562,0.826110,-0.331393,-8.863522,4.656800,7.944056,-6.001913,0.756230,0.527260,8.352342,0.031723,8.396827,5.503727,9.614334,-2.941245,1.676331,1.115994,8.168651,-8.537580,9.295546,-6.880065,-6.541527,6.491932,-9.240390,-6.348057,-2.162279,3.889922,5.765508,-7.655072,-1.237786,-5.112920,6.325766,0.671330,0.011560,9.887643,7.331347,7.675471,-6.896173,6.085306,3.841912,-2.161926,7.574649,-9.208410,-4.605309,-7.637327,7.532731,3.088734,-5.063649,8.651771,-7.122067,-7.946746,5.044152,-2.075831,-8.583083,-5.010002,7.676136,-5.790047,-7.909726,-6.354784,1.856042,1.166284,6.596396,7.748137,2.329558,-3.318132,5.032955,6.860204,-9.848963,8.572885,-5.643866,3.064793,-8.261518,-6.777829,-2.555570,-6.961659,3.016445,-3.871332,-2.541830,-5.783502,3.236153,5.885223,3.548015,2.551281,-4.843085,1.242378,-4.077064,0.999661,-4.492618,9.567446,-7.624203,-6.921383,7.535152,-5.060230,-7.750251,-6.897331,8.280934,4.930133,-9.947843,9.559192,1.000471,3.351555,7.717651,-2.325858,3.797689,-1.712088,3.203640,2.308158,8.564182,-8.243779,2.054489,2.722720,0.236147,9.344145,5.506602,-2.515844,4.776905,-8.408552,-9.201842,-4.532289,-2.437948,0.612185,8.536575,7.963391,9.818245,0.363809,-7.726915,7.745215,0.179505,7.266638,3.769023,7.816602,-9.954163,9.806103,-2.729651,-1.061828,-2.707526,1.624831,-0.330517,3.998419,-2.722288,-9.812261,8.002748,-1.805701,4.651675,-3.080849,-7.233490,3.001809,1.846361,0.137848,0.999417,6.870812,-5.877905,8.018746,1.808109,-2.200383,4.164152,-5.979969,-9.133384,8.849527,-7.452435,8.584673,4.386643,9.415708,5.991966,6.241322,-5.975317,1.871881,0.564567,-4.896348,5.738814,-3.144949,0.682974,4.059938,-6.584743,9.922290,-0.870222,6.462527,-0.639279,4.023200,2.203700,-1.833893,5.921712,-5.038687,-7.581128,1.586465,6.494628,9.338410,-1.367994,5.808488,4.081018,1.300846,8.748077,-3.622057,-5.666937,3.200374,-2.434652,7.648882,9.813822,-9.957700,-5.387443,7.475645,5.071723,9.016908,-6.778878,-5.941626,4.660836,7.625028,-1.119916,-3.225909,4.869886,7.516570,8.726113,4.224817,-4.364884,8.670304,1.884323,8.038699,1.877821,-8.549809,0.473271,1.461340,2.481336,0.138748,-9.528624,-1.331055,3.057640,1.624390,-5.901072,-4.272648,-1.119316,-9.278257,-7.994089,3.300650,-0.088001,2.100857,-1.655315,-6.237190,-1.772040,-6.063981,-1.364777,-1.282966,-6.523615,-6.601462,5.973713,7.866163,-8.561550,4.669015,2.793207,-7.180178,9.263017,0.344626,9.072768,0.976417,1.310501,-6.164487,-8.799765,-0.044797,0.937957,8.794136,5.056251,-7.939768,-9.324252,-8.698520,-8.561925,7.638537,1.161332,-7.100246,4.443435,-8.237086,5.089151,-4.424175,6.168348,-0.213804,0.596276,1.922140,-9.089564,6.120236,-0.403293,1.092658,-5.845033,-1.659020,7.231788,-5.776917,-7.136566,-2.339521,-2.879370,2.648280,0.249711,-1.226895,7.829249,6.710793,6.779988,0.377223,-0.212642,1.160143,8.933887,-5.934898,-6.639600,5.241234,8.764854,-4.606448,-4.295590,-2.980632,1.779383,7.128428,-9.344616,-6.951823,3.971082,8.004136,-8.148517,-3.248430,-8.386953,3.741536,-1.502818,4.582148,-4.137145,6.334381,5.847434,-7.576266,-3.921745,-2.759396,-5.085235,-7.348703,-8.717494,6.240098,-8.572476,-0.926301,1.060028,6.583269,0.417440,2.860842,-4.470285,-9.190698,-2.990057,-9.636388,-4.221547,-8.083122,-8.392519,-5.186131,-4.004476,8.997450,-1.193179,-8.404769,2.328699,4.713403,-5.983179,-9.785582,9.907045,9.528660,1.083210,-0.726312,-6.407043,-8.724469,1.264088,8.965270,6.863464,3.927938,-6.016056,1.082044,5.387738,-5.951861,1.280622,6.046434,-7.197015,0.309027,-0.568871,9.285714,-6.426788,8.029289,1.354929,8.152665,-7.457757,-0.560591,-3.986564,-6.670491,-0.880634,-9.687045,-3.064579,-5.944808,-6.374106,-1.648071,4.501183,0.262091,-1.703921,3.201025,2.462659,-4.712362,3.763382,-2.794707,-7.500850,-0.516991,-8.100167,-7.989685,-8.375555,9.052889,-0.064066,9.107673,4.563072,5.221058,-2.440961,0.470890,-1.687375,1.342459,-9.716286,9.198774,-3.910970,5.777840,-8.569115,3.476036,-0.672468,6.553164,8.529509,-1.004945,5.015888,-0.344464,2.744309,8.627522,2.879503,5.794700,1.845967,-2.692135,-4.079128,-7.203106,4.425992,1.266895,-4.614239,9.004950,-7.072877,-3.685708,1.683672,4.024661,5.271609,-0.670713,4.682750,-9.339896,9.172112,-3.825165,7.038889,-8.678518,3.027995,-0.772069,3.294420,5.953118,-6.457361,1.031802,-1.759176,-4.222556,-4.005852,-9.202070,-6.831009,-5.963136,5.124687,-7.997890,5.107801,9.103459,-0.951864,-6.090166,2.519973,8.948874,1.417587,-8.691173,1.834177,8.744552,6.869968,7.109213,3.089864,4.235011,2.084724,2.137989,3.095432,1.281585,-7.464156,8.200738,6.350483,8.211510,7.701667,-2.535853,-9.414400,-2.346596,6.903344,-1.486680,4.820067,8.178424,6.508807,4.532017,0.248649,-2.238731,-1.575267,-8.425412,1.426832,9.920199,2.121553,0.513663,7.320403,5.182253,-0.604675,1.921715,-3.632591,-2.199830,8.762101,-4.485414,-2.075338,7.275580,-3.266483,-1.838153,1.202269,-8.535970,8.916395,1.098283,-9.277654,2.245968,-1.585485,-4.741191,7.426398,-5.288689,8.471702,1.364786,1.120567,-2.637642,-2.968827,5.554520,-6.806585,-4.755266,-9.213774,1.300253,9.607479,0.594802,7.223643,-4.976996,-7.164082,-0.816179,2.619295,4.429911,-4.053478,-9.604275,-1.534634,-4.139482,1.662062,-6.719013,-0.284533,-1.646055,-0.868397,8.394863,-1.437208,-8.538584,-9.815406,-2.036109,-8.714654,5.551853,0.112858,-5.769110,6.148796,5.501171,8.551281,-5.820845,4.835174,5.567552,-3.870323,2.532621,-5.852732,5.143313,-4.262257,-9.122427,7.150432,1.574073,1.020108,-1.243916,2.722226,-3.329438,0.479617,-0.067799,6.016151,-7.952775,3.055402,-2.757460,0.054435,-7.386367,3.313905,2.285962,-2.343797,-2.655002,-2.283448,1.062731,-1.818569,-8.909949,-0.865815,-4.312537,4.992492,-2.630759,-4.601066,-2.185591,-7.517825,-3.347091,-1.188799,3.608525,-5.695898,-2.851573,-3.657740,-8.350112,3.469701,1.688816,-2.496357,-4.616128,-7.730299,-0.109254,6.342971,7.478945,7.226772,-4.999699,1.214338,3.304662,4.422602,-0.883314,0.320843,-5.784459,3.151807,-0.142647,0.465311,8.547223,5.373827,-5.344638,6.973712,8.329716,3.976285,-8.085774,3.028494,3.080362,9.159784,-5.371277,-1.173426,-8.871063,-8.086474,5.344178,4.701163,-3.339983,-2.234014,2.030379,-8.744319,3.109278,-0.252127,-3.447938,2.704798,-9.492619,8.068623,9.347811,5.689617,8.453354,-0.284661,3.284164,-2.213385,4.530406,3.326568,-4.698934,6.083750,8.951691,9.628686,6.808651,1.894016,2.064583,-2.730154,1.790526,-3.841432,-8.325177,6.395818,-0.399415,1.257298,9.063380,0.225174,-7.913661,1.880879,-2.732655,2.144058,8.816191,-3.533281,2.214690,3.843586,-1.879841,9.977895,-3.650564,1.396048,-1.684008,-4.334348,0.221719,7.834021,-0.570913,4.785035,1.210034,-6.608165,-0.814977,-9.798424,-1.756949,-9.032059,4.811862,7.958016,-9.345725,5.301749,3.989720,-9.674501,4.503631,-4.856119,-7.130849,-7.808236,-5.417824,-0.419607,2.775002,-7.351816,-5.039358,5.048678,-0.520229,-0.959716,5.812417,-0.398763,0.231593,4.305295,-0.789842,8.700396,9.229665,8.206351,-4.896210,-9.354325,-8.229572,3.396466,2.772756,-2.644306,0.171906,5.118538,-6.192103,1.690040,-7.432755,-7.651581,-2.935771,-6.021824,-3.772291,0.270039,6.065360,-1.749383,-3.167370,3.602917,-9.015101,-8.026185,-2.309151,-0.098100,1.256971,-8.298919,-5.368702,-9.914993,-1.602102,9.673126,-3.253124,-1.049596,-4.321268,4.989639,-1.892789,1.571317,9.143911,1.139438,1.067636,-2.000021,7.801971,-5.529137,-7.084036,4.924737,4.739707,1.553908,3.439904,-2.100449,-3.857587,4.700260,-2.857309,-5.643443,-9.474526,1.932410,0.127365,-6.325123,-0.844441,3.835038,8.506676,-6.921523,5.320587,6.551190,1.639246,-7.358231,0.424694,-2.222102,-6.904165,4.909076,-5.450135,-5.298622,0.817391,5.139910,-5.991030,-2.180541,7.438119,-9.513688,-4.346671,9.593016,7.149023,9.717751,3.461482,-6.770950,-7.896934,-3.289995,-5.362212,9.415234,1.471763,-0.300875,9.313896,-3.573754,3.180109,3.713971,-5.670876,2.101444,-6.732653,-7.867111,-6.060098,-6.546589,9.271463,-5.271791,3.250888,6.303795,-2.699205,-3.276255,-1.082229,-4.386931,-0.304812,9.567542,-3.878100,-9.063593,8.496506,7.763646,-1.706320,0.290964,-7.060305,7.470766,7.131619,7.692413,-8.470096,7.823064,-0.893561,-1.151662,5.312884,3.504300,-5.973129,-9.453058,-2.238400,-5.290332,3.354024,-9.288241,1.048018,-1.346780,-5.954994,-4.603021,9.386358,8.383666,4.495590,-6.881279,5.538697,-5.979778,-2.898274,-1.708181,-6.797369,9.705673,-7.048345,-4.239071,4.434983,-6.701550,-3.441488,3.279966,-5.343395,2.424741,-4.090677,-4.550716,5.423497,-9.595703,0.083007,-4.463011,1.264826,-2.552648,-3.480472,9.749369,4.851441,4.465039,-9.582530,1.457095,-5.838953,-7.304157,8.220483,-0.097841,4.741384,-8.214532,5.964644,1.155281,-9.096754,-7.681911,-0.565527,-0.559928,7.242566,5.117474,-3.738699,-0.740670,2.193360,-8.978988,0.190900,2.966471,1.430772,-0.295775,-3.653298,6.542116,8.619189,9.732000,7.394620,6.839564,-3.529180,-2.712561,3.686815,2.229658,4.261827,5.360686,-8.911298,4.299594,-5.703734,4.878305,2.646175,0.216916,-4.614616,-1.686831,0.514336,2.529103,-3.717839,-8.421674,-1.013787,-8.080093,0.975803,0.860960,-2.634636,6.648131,-6.709911,-7.525504,3.723519,-8.392836,-6.468325,6.869300,-6.192135,8.244855,-2.356589,-0.300802,9.383174,-9.522420,9.273593,5.385094,2.495061,-2.801207,7.493440,1.588388,6.501573,-2.131510,1.708221,2.395863,-4.534822,-2.797405,-4.591025,-1.761544,-1.252001,5.373940,-0.414677,9.812968,7.442857,1.244964,-2.000132,-6.271435,-5.900717,-3.111319,-2.231875,4.531530,-3.124751,-1.385612,-5.635184,3.795816,5.284719,-9.292409,9.798331,4.089060,-3.722760,1.615634,-3.686135,-3.997556,-4.966296,-6.889311,-9.726954,-3.652252,8.848440,6.746217,2.190419,-1.041911,3.546138,-0.180209,1.216023,-4.503427,-9.857871,-1.763577,8.558438,2.021653,8.142701,-2.485662,8.021714,0.532201,1.104951,-8.227522,9.528236,-1.658226,-8.667901,9.399067,-9.745438,1.520747,1.189460,5.859255,-9.752219,-4.328552,-6.957558,4.718008,2.815299,6.278809,4.489419,1.490296,-9.287783,-1.755295,-7.394292,-7.480529,7.782274,6.298644,-3.801717,0.787936,8.206353,-2.785628,-9.213403,8.703948,-2.801124,9.133132,0.613230,-4.983955,-8.652522,-7.858315,-1.489123,9.555229,-5.838625,-1.125080,-7.002970,8.828669,-3.700148,9.454467,9.651280,-1.141392,6.052345,7.839981,3.168195,3.382981,-6.724856,-5.255885,-0.731612,-8.110252,1.609811,1.649201,-4.195051,7.473741,0.607746,-7.155928,-4.527187,-5.870296,-5.851758,-1.753052,-5.582032,6.203729,6.498530,4.367473,3.735398,-1.372090,3.926163,-1.985433,-2.751245,-9.455825,4.732321,-2.818179,7.952202,5.699649,-2.633058,2.376860,2.524490,-5.254785,3.419986,0.272969,4.519941,7.222725,0.015079,7.669715,4.096818,7.669158,-7.820343,-5.007054,9.981497,9.158269,7.155351,-5.245256,8.745686,2.294712,-6.856266,8.105731,-0.174855,-2.226197,8.495835,2.139055,6.959985,9.177045,-8.346737,-6.487702,7.143893,-1.836841,-7.875647,-1.110583,3.237558,-7.607767,-0.262164,2.500533,-7.821049,-5.310657,4.237944,1.242948,9.799147,-5.077862,-0.963487,2.171513,-1.517101,2.983738,-3.119849,-3.558714,3.007465,2.347960,0.311345,4.493457,6.073446,8.658662,6.310847,9.163911,6.206953,0.149710,-2.879686,7.877306,-5.845262,-5.042213,-0.376756,-2.020960,4.788261,4.149873,-8.493701,5.414178,9.957152,5.264750,5.364942,4.635648,-5.930905,-2.693242,3.362374,-8.209631,-0.009118,-7.098230,8.087828,3.803955,-6.251278,6.399021,7.773445,-4.441259,0.596769,4.701168,8.254134,5.029812,1.561954,-9.152722,-5.165917,-8.441431,9.251233,0.239141,6.010152,-2.497893,-5.293612,6.071477,-3.655669,-4.418145,3.813326,-1.199797,-7.871940,-4.953130,5.598787,-5.330118,7.095510,5.333491,7.544502,-6.922365,6.788713,-1.765597,-7.287539,7.563677,-3.944443,6.270547,7.224332,-9.799942,3.888722,-1.844004,3.016636,-8.751444,1.118208,-1.619214,5.666321,-9.093577,6.463677,-3.540081,-2.258035,-8.256156,1.778237,-8.183057,6.528223,-2.898090,4.505616,4.462554,8.928447,-9.158888,2.273054,9.022805,3.500354,5.364194,-0.876321,-1.973330,9.233441,6.761551,-6.356609,-9.876697,-1.291443,2.980153,8.287281,7.428219,-5.471401,1.003063,-6.718705,-7.960348,-0.213254,-2.077768,6.399254,9.464275,3.127022,6.442086,-9.794430,8.378505,-7.549100,9.524089,4.822526,-6.081163,-2.941200,-9.953985,-4.931495,-7.918105,-8.043969,-0.195566,9.716424,8.153867,-2.635385,6.687147,-2.249384,-8.020111,1.113344,-7.724353,-8.378213,-0.629691,-5.514112,6.550391,-8.176626,-8.488739,-1.619100,-0.099557,-6.855978,-2.376158,5.542596,-0.860665,-9.402329,-4.735306,-5.962100,-0.102609,-4.238170,7.718684,3.972174,7.835146,-4.177596,2.035871,-7.900466,-3.989678,6.664516,-9.003131,-7.532702,-2.257456,0.329572,-1.806262,8.732883,-4.421830,-3.524272,-5.238297,-8.339254,9.649320,2.334102,3.911221,-0.031923,1.223399,-4.198909,-0.333884,-1.815035,2.938978,-1.355340,1.614705,-3.436117,8.153537,3.780194,9.056804,6.159957,-4.470877,0.277138,8.220339,1.456684,5.833473,-5.556841,7.992790,-9.542986,-0.497566,-7.311479,-7.216627,8.274419,4.120556,7.295139,-8.309886,0.928753,-7.176941,-0.717900,3.889851,-8.468496,0.116572,-2.979275,0.115520,8.778344,1.842260,8.191972,-4.772170,9.338427,2.865733,-9.412557,-0.650653,-2.414924,-2.874791,-7.713123,-8.984210,-8.631789,6.695442,-6.821904,6.241380,-2.430859,-5.494675,-1.103445,-8.227018,-1.790774,6.941476,7.952264,0.700412,-1.250982,-7.268013,3.102449,2.685988,-8.267692,-2.685956,7.135772,-7.899305,2.532527,3.025805,8.525073,1.940760,7.843238,3.582670,-7.853080,-5.366710,-6.369788,9.020381,6.490545,-2.643681,2.321290,9.125372,-2.757370,-5.476061,-5.084440,-6.425041,6.758406,2.328826,-3.158253,5.301081,4.742085,2.003377,-5.775407,0.071260,2.960486,0.654068,6.762064,3.780228,-7.817987,6.643962,1.606710,7.491194,4.643095,1.622163,5.261778,7.404308,-9.148914,-5.778179,4.393017,-9.239734,3.117876,-2.513125,-5.649978,7.388233,5.137080,6.875840,-1.380153,-6.232902,-6.502016,4.704514,-1.029546,-6.176644,7.464597], dtype = "float64")#candidate|271|(1536,)|const|float64
call_270 = relay.TupleGetItem(func_103_call(relay.reshape(const_271.astype('float64'), [12, 8, 16]), relay.reshape(const_271.astype('float64'), [12, 8, 16]), relay.reshape(const_271.astype('float32'), [12, 8, 16]), ), 4)
call_272 = relay.TupleGetItem(func_108_call(relay.reshape(const_271.astype('float64'), [12, 8, 16]), relay.reshape(const_271.astype('float64'), [12, 8, 16]), relay.reshape(const_271.astype('float32'), [12, 8, 16]), ), 4)
uop_273 = relay.log2(const_271.astype('float32')) # shape=(1536,)
func_247_call = mod.get_global_var('func_247')
func_249_call = mutated_mod.get_global_var('func_249')
call_280 = relay.TupleGetItem(func_247_call(), 0)
call_281 = relay.TupleGetItem(func_249_call(), 0)
bop_288 = relay.right_shift(uop_273.astype('int8'), relay.reshape(const_271.astype('int8'), relay.shape_of(uop_273))) # shape=(1536,)
uop_291 = relay.sinh(bop_288.astype('float32')) # shape=(1536,)
func_103_call = mod.get_global_var('func_103')
func_108_call = mutated_mod.get_global_var('func_108')
call_295 = relay.TupleGetItem(func_103_call(relay.reshape(const_271.astype('float64'), [12, 8, 16]), relay.reshape(call_270.astype('float64'), [12, 8, 16]), relay.reshape(uop_291.astype('float32'), [12, 8, 16]), ), 2)
call_296 = relay.TupleGetItem(func_108_call(relay.reshape(const_271.astype('float64'), [12, 8, 16]), relay.reshape(call_270.astype('float64'), [12, 8, 16]), relay.reshape(uop_291.astype('float32'), [12, 8, 16]), ), 2)
bop_299 = relay.logical_or(uop_291.astype('bool'), relay.reshape(const_271.astype('bool'), relay.shape_of(uop_291))) # shape=(1536,)
bop_302 = relay.equal(uop_291.astype('bool'), relay.reshape(call_295.astype('bool'), relay.shape_of(uop_291))) # shape=(1536,)
bop_305 = relay.equal(uop_291.astype('bool'), relay.reshape(call_296.astype('bool'), relay.shape_of(uop_291))) # shape=(1536,)
var_306 = relay.var("var_306", dtype = "bool", shape = (1536,))#candidate|306|(1536,)|var|bool
bop_307 = relay.multiply(bop_299.astype('int8'), relay.reshape(var_306.astype('int8'), relay.shape_of(bop_299))) # shape=(1536,)
uop_310 = relay.log10(uop_291.astype('float32')) # shape=(1536,)
bop_312 = relay.less_equal(uop_310.astype('bool'), relay.reshape(uop_291.astype('bool'), relay.shape_of(uop_310))) # shape=(1536,)
uop_315 = relay.cosh(bop_312.astype('float32')) # shape=(1536,)
uop_317 = relay.rsqrt(uop_315.astype('float32')) # shape=(1536,)
func_22_call = mod.get_global_var('func_22')
func_24_call = mutated_mod.get_global_var('func_24')
const_320 = relay.const([-4,-6,-5,-6,4,-3,-2], dtype = "int8")#candidate|320|(7,)|const|int8
call_319 = relay.TupleGetItem(func_22_call(relay.reshape(const_320.astype('int8'), [7,])), 0)
call_321 = relay.TupleGetItem(func_24_call(relay.reshape(const_320.astype('int8'), [7,])), 0)
bop_324 = relay.greater_equal(uop_317.astype('bool'), relay.reshape(var_306.astype('bool'), relay.shape_of(uop_317))) # shape=(1536,)
output = relay.Tuple([call_256,call_270,call_280,bop_302,bop_307,call_319,const_320,bop_324,])
output2 = relay.Tuple([call_257,call_272,call_281,bop_305,bop_307,call_321,const_320,bop_324,])
func_327 = relay.Function([var_306,], output)
mod['func_327'] = func_327
mod = relay.transform.InferType()(mod)
var_328 = relay.var("var_328", dtype = "bool", shape = (1536,))#candidate|328|(1536,)|var|bool
output = func_327(var_328)
func_329 = relay.Function([var_328], output)
mutated_mod['func_329'] = func_329
mutated_mod = relay.transform.InferType()(mutated_mod)
func_247_call = mod.get_global_var('func_247')
func_249_call = mutated_mod.get_global_var('func_249')
call_334 = relay.TupleGetItem(func_247_call(), 0)
call_335 = relay.TupleGetItem(func_249_call(), 0)
const_339 = relay.const([[-9.690595,3.182758,6.599007],[9.114983,-3.543056,-6.809090],[3.204785,-6.703881,6.937198],[-1.482253,1.489443,2.777908],[9.772569,9.523783,1.101906],[5.423846,-8.419093,-2.571452],[6.328683,8.034703,8.568937],[-5.080942,3.711148,8.315995]], dtype = "float64")#candidate|339|(8, 3)|const|float64
bop_340 = relay.minimum(call_334.astype('int64'), const_339.astype('int64')) # shape=(8, 3)
bop_343 = relay.minimum(call_335.astype('int64'), const_339.astype('int64')) # shape=(8, 3)
func_22_call = mod.get_global_var('func_22')
func_24_call = mutated_mod.get_global_var('func_24')
var_345 = relay.var("var_345", dtype = "int8", shape = (7,))#candidate|345|(7,)|var|int8
call_344 = relay.TupleGetItem(func_22_call(relay.reshape(var_345.astype('int8'), [7,])), 0)
call_346 = relay.TupleGetItem(func_24_call(relay.reshape(var_345.astype('int8'), [7,])), 0)
func_22_call = mod.get_global_var('func_22')
func_24_call = mutated_mod.get_global_var('func_24')
call_348 = relay.TupleGetItem(func_22_call(relay.reshape(var_345.astype('int8'), [7,])), 0)
call_349 = relay.TupleGetItem(func_24_call(relay.reshape(var_345.astype('int8'), [7,])), 0)
bop_358 = relay.logical_xor(bop_340.astype('uint8'), relay.reshape(const_339.astype('uint8'), relay.shape_of(bop_340))) # shape=(8, 3)
bop_361 = relay.logical_xor(bop_343.astype('uint8'), relay.reshape(const_339.astype('uint8'), relay.shape_of(bop_343))) # shape=(8, 3)
bop_363 = relay.subtract(call_334.astype('int8'), bop_340.astype('int8')) # shape=(8, 3)
bop_366 = relay.subtract(call_335.astype('int8'), bop_343.astype('int8')) # shape=(8, 3)
uop_370 = relay.sin(var_345.astype('float32')) # shape=(7,)
uop_372 = relay.erf(uop_370.astype('float32')) # shape=(7,)
uop_378 = relay.asinh(uop_370.astype('float32')) # shape=(7,)
bop_380 = relay.less_equal(uop_370.astype('bool'), relay.reshape(uop_372.astype('bool'), relay.shape_of(uop_370))) # shape=(7,)
bop_383 = relay.logical_and(var_345.astype('bool'), relay.reshape(call_348.astype('bool'), relay.shape_of(var_345))) # shape=(7,)
bop_386 = relay.logical_and(var_345.astype('bool'), relay.reshape(call_349.astype('bool'), relay.shape_of(var_345))) # shape=(7,)
output = relay.Tuple([call_344,bop_358,bop_363,uop_378,bop_380,bop_383,])
output2 = relay.Tuple([call_346,bop_361,bop_366,uop_378,bop_380,bop_386,])
func_387 = relay.Function([var_345,], output)
mod['func_387'] = func_387
mod = relay.transform.InferType()(mod)
mutated_mod['func_387'] = func_387
mutated_mod = relay.transform.InferType()(mutated_mod)
var_388 = relay.var("var_388", dtype = "int8", shape = (7,))#candidate|388|(7,)|var|int8
func_387_call = mutated_mod.get_global_var('func_387')
call_389 = func_387_call(var_388)
output = call_389
func_390 = relay.Function([var_388], output)
mutated_mod['func_390'] = func_390
mutated_mod = relay.transform.InferType()(mutated_mod)
const_397 = relay.const([1,8,2], dtype = "int64")#candidate|397|(3,)|const|int64
var_398 = relay.var("var_398", dtype = "int64", shape = (3,))#candidate|398|(3,)|var|int64
bop_399 = relay.bitwise_xor(const_397.astype('int64'), relay.reshape(var_398.astype('int64'), relay.shape_of(const_397))) # shape=(3,)
bop_405 = relay.bitwise_and(const_397.astype('uint8'), relay.reshape(var_398.astype('uint8'), relay.shape_of(const_397))) # shape=(3,)
func_387_call = mod.get_global_var('func_387')
func_390_call = mutated_mod.get_global_var('func_390')
const_409 = relay.const([2,1,-7,-8,-2,-9,-6], dtype = "int8")#candidate|409|(7,)|const|int8
call_408 = relay.TupleGetItem(func_387_call(relay.reshape(const_409.astype('int8'), [7,])), 0)
call_410 = relay.TupleGetItem(func_390_call(relay.reshape(const_409.astype('int8'), [7,])), 0)
uop_412 = relay.log2(bop_405.astype('float32')) # shape=(3,)
bop_418 = relay.multiply(bop_399.astype('int8'), relay.reshape(uop_412.astype('int8'), relay.shape_of(bop_399))) # shape=(3,)
func_103_call = mod.get_global_var('func_103')
func_108_call = mutated_mod.get_global_var('func_108')
const_427 = relay.const([2.352830,7.077392,-6.586166,5.727510,6.484554,3.989122,0.621940,-3.550547,-8.214750,-2.560998,2.226128,7.593532,-1.213263,-2.165202,-9.887903,9.500908,3.797071,-7.014275,2.964132,-5.429905,-7.724684,-2.474614,-6.089664,2.637401,3.322954,-3.533866,6.590409,-3.900924,-2.528799,8.996304,-7.903818,3.074848,-2.237828,3.169102,4.663630,-6.073356,-4.670752,0.688229,6.527781,7.170275,8.736827,4.182660,2.973357,-9.592100,-7.850019,-8.469292,5.039840,-0.901295,3.080454,8.887793,7.573443,-6.273300,-8.397919,7.633651,6.103961,-0.330202,-3.682146,6.058541,3.967283,3.263035,-1.013975,7.596192,2.789916,9.466001,7.740906,-3.900914,-7.224611,-6.254850,-4.113703,-3.541158,1.155387,-5.363490,-1.789575,9.041512,-1.162631,6.462108,5.937054,-4.884367,0.957598,1.098881,-2.282820,9.528573,6.846497,-7.706249,5.691178,6.305426,2.921848,-3.733975,2.200879,-2.526269,5.126740,-0.416810,-8.273684,0.732341,-9.569774,-2.566490,-4.104318,1.692194,-6.689718,-4.362901,-4.283280,-2.897655,8.426642,0.175725,-2.264171,-5.320884,-0.105405,-2.566330,9.552776,-3.926717,0.654772,7.968553,-8.692590,7.498226,-7.173559,3.849775,6.781823,-3.198296,-0.618049,8.833456,9.819778,-2.665731,5.625200,-6.730437,2.023843,-9.295148,-0.834471,-1.572316,4.940096,9.278601,3.083103,-3.806520,-4.820851,-1.429198,4.507311,8.822977,9.897255,-2.274905,6.148509,-1.861220,7.646952,3.428133,-6.224751,-9.337228,0.097271,8.114197,-9.272552,9.125686,-7.754699,-4.748870,2.578308,7.616647,3.938274,8.863525,-3.508875,0.146815,6.871567,9.692595,7.040397,2.921877,0.002594,4.263813,-7.782095,-7.493396,-0.972026,-1.126092,0.376112,3.930558,1.603024,2.702013,-2.836194,3.098022,0.331606,6.901561,5.286421,6.279820,3.463269,-5.133674,6.179859,-0.186769,1.023277,1.385555,-6.150752,-0.723847,-0.144813,-5.766542,-0.619443,-3.722127,-2.357859,-1.320833,-9.485860,2.195506,4.597119,9.431113,-7.063732,-7.765261,0.846108,-5.585065,-2.271524,4.949863,-8.193639,2.295122,-7.837026,-3.377446,1.182591,-2.342329,-6.005592,4.129812,6.629469,-9.954450,0.877242,-8.892753,7.520104,-3.263848,3.767805,-8.950245,1.831677,-6.839459,6.747663,1.886063,-0.897474,-2.524770,8.755484,-1.199450,-1.972891,-3.080872,2.920212,-0.719341,-6.787597,6.517676,7.701803,9.170181,9.402425,-1.102211,8.046027,-0.887785,2.741223,-5.464513,-9.820170,1.631841,-9.264443,-4.175396,-6.626838,-9.353019,-3.241705,-2.715002,3.477104,-6.574767,-0.437536,5.816741,-0.385115,6.173769,-8.283792,-6.554470,-4.336791,0.610146,-5.273224,-9.196124,6.100738,1.078932,-8.259170,1.501920,0.703539,8.552633,-6.028691,1.576784,-7.175714,-4.281228,1.449461,8.691545,-9.510497,-7.787262,4.720612,-7.283721,4.694395,-7.238930,5.479268,7.197314,8.543594,-8.773585,9.846255,1.045587,-4.433360,-2.248044,-5.820553,2.967108,-9.448719,4.431770,5.077671,-8.856504,9.802626,-8.742779,-0.956483,-3.673094,-2.132187,1.853991,-3.354345,2.725691,-6.072165,-5.180984,-2.601875,-1.736555,4.599802,-3.904167,4.903469,9.100429,3.520161,9.120983,3.801744,9.004493,1.966767,2.613546,6.413037,-8.192119,-2.952480,4.461932,4.520209,-7.430473,9.720122,1.733696,8.045728,-9.034050,-9.731333,0.229497,3.157020,-4.559504,2.599344,-7.458820,-3.832895,3.720068,-8.021252,9.909566,-4.860511,-0.184417,-0.272415,-9.682220,8.358334,-7.643763,-9.218575,7.043550,0.096274,-7.648668,-5.115677,6.723204,-1.480150,7.275304,0.562668,-4.493867,-3.078798,-8.545725,-8.117655,4.726438,5.251596,2.722554,8.502217,7.238420,-1.205243,6.956921,-9.800017,-0.281354,3.582106,9.370412,-9.490537,-1.951034,3.793789,-6.338028,1.687568,7.113950,3.177855,5.928981,7.264655,7.023749,-6.643381,-0.660382,-3.944869,4.534376,7.579883,-5.881290,-6.247158,-3.299674,8.558613,0.001109,-1.596633,0.141550,-3.260144,-0.242906,5.808507,1.455297,5.950711,8.337619,-0.274261,7.860141,3.749660,-2.858096,4.652982,3.785562,1.579282,4.966820,4.728153,7.164084,6.520733,-1.124577,-0.696208,1.933328,3.344216,5.073025,5.824130,3.724317,-3.577310,4.761576,1.590263,9.656696,8.150097,-4.124233,3.082288,-2.099327,-0.827275,-5.257935,6.147652,-5.336375,-4.857468,-1.528898,-1.531637,-2.398423,5.290529,-9.018272,0.901993,1.113786,1.020511,6.709180,-8.075775,8.717064,-5.373345,1.193506,0.094998,8.412577,5.140275,-4.551877,4.489574,-1.367200,-8.645710,7.405483,-0.043090,-0.567975,8.282749,4.145288,-2.686557,-2.092577,-8.755171,-1.057053,7.592375,7.513268,0.367860,-9.844958,-1.329439,-4.610920,-4.553623,-2.736787,-6.175993,-4.420838,0.905913,3.375162,-8.433588,-9.329927,4.474456,7.566909,-5.697651,3.554990,-1.330455,9.297227,8.470753,5.645378,4.565615,-8.879663,-5.570166,1.024373,-5.693956,7.860962,-2.989708,0.484980,-7.480278,-3.506732,3.905018,4.980919,-3.095863,7.323642,-3.039122,8.049742,-1.601161,5.953561,-6.714599,-7.106631,-2.340145,6.214254,-6.018004,-5.967231,6.236013,9.419080,7.735709,-1.244869,6.738663,4.125443,-8.561015,-4.452231,-5.846964,-2.123711,-1.296323,-5.281948,-3.255520,-7.255476,-8.380695,-1.589774,1.040162,2.565414,-8.521941,-5.150460,8.580869,5.169481,-2.028707,-2.349901,5.984244,4.727416,-3.575862,-3.396720,-3.231251,0.844191,-0.277449,-6.460346,2.791662,-0.985556,-2.849747,-3.726481,-5.499996,3.642690,4.328795,6.496721,-9.185254,-9.135218,-8.034011,-9.559097,2.685051,-5.249781,1.624333,-0.943584,-1.477002,-5.186966,6.599354,-7.994379,-1.615598,7.459045,5.927188,-2.850776,0.042509,-0.343034,-9.117844,-1.320040,-7.214052,6.948563,-5.429003,0.979844,-4.018764,6.158335,-0.635264,0.739823,0.730301,-6.759569,3.940270,8.968248,3.905388,3.579224,-5.187150,-8.753390,-8.333022,-4.222980,0.301889,3.335472,4.405440,2.192220,-4.388339,-2.077171,8.992631,-1.320196,3.721936,-8.084596,-3.466953,-9.595721,1.517795,2.247837,-1.822309,-3.432781,1.316926,0.460444,-1.303866,-4.129691,2.748263,4.566461,7.491022,-3.515253,9.093889,-5.000320,-7.080085,-4.860963,1.693009,4.005776,7.318587,6.271851,2.129027,0.377289,9.638197,-7.621247,-7.020049,-7.590581,9.340973,-9.190514,8.000395,-5.948712,-1.762776,8.669919,0.849465,7.261362,8.574923,0.943514,-5.488561,-6.677233,2.265631,-0.897926,-7.861059,2.472900,3.799603,-4.680571,-1.691974,-7.670810,9.733146,-5.511922,-3.718542,7.336037,-9.589566,-0.563195,7.601224,1.972917,2.197997,-9.776375,-6.631564,-7.963384,-8.784529,-2.588890,0.522462,4.735359,-1.074480,7.415374,5.108598,-4.326919,-1.838375,-6.249946,-4.907683,-2.798820,-0.510496,1.871231,-5.038578,-0.389872,1.908459,-9.618041,-4.785029,5.360576,5.755569,4.876786,-2.750396,1.710291,7.007839,-9.206755,1.954998,5.319142,-0.188319,-2.927667,-2.366025,1.777259,3.336809,7.826559,9.737259,-9.360427,2.664473,6.702787,-4.258480,-6.785617,1.644556,1.152355,1.430758,-8.314845,5.077517,4.085278,4.451721,6.136482,-2.062725,-8.495316,-6.463978,-4.092125,3.148261,3.156748,-2.805304,7.156535,-1.236556,-8.527772,5.625815,7.101692,8.377745,4.356651,6.445910,5.318245,3.065794,3.668174,9.788835,4.158778,-8.151543,-8.852163,8.331765,-0.255302,-2.132044,4.294466,1.738457,-6.195253,2.266915,4.047467,1.539925,-5.801149,3.682303,-7.553095,-7.599253,1.520789,-0.164766,1.798270,7.771935,0.557211,5.353803,2.802352,-4.656466,5.073706,7.339917,-6.776710,-9.840634,8.256265,9.550182,-4.512682,-2.995941,-2.525255,5.318089,-5.776718,9.138630,-2.902020,-0.122927,0.161592,1.359657,5.530735,5.571198,9.068077,-9.243966,7.658421,-9.352387,7.808291,1.016955,2.518637,-9.264472,4.366900,-2.652453,-7.555461,-2.902216,7.202347,-8.744228,-2.559275,-3.893894,4.523191,0.056511,-3.150658,-9.140772,-4.299693,9.642996,-7.285349,3.040639,9.212947,5.322121,-0.200418,9.767667,-1.105183,-1.363772,-6.170546,-1.043510,-4.892059,-3.162382,-5.044797,-3.987292,5.809082,-5.330536,6.641736,9.573949,9.489697,-2.494551,-1.896811,4.529833,-5.205603,-9.817900,6.605778,-6.378684,-5.086606,-7.883292,-4.167077,1.419347,0.854748,3.889829,5.661034,7.355711,-7.072682,-4.756754,-7.011068,9.113484,-3.093129,5.016153,-3.748579,6.745750,-0.553366,3.544692,-3.533083,-4.917661,7.911968,3.219236,6.824247,6.621002,-4.688614,-0.652385,-1.659366,8.412454,6.315073,-2.458554,1.508983,-8.121283,4.306771,-0.353633,-1.480499,2.774458,-6.128913,-9.200613,-7.079095,7.866035,-2.138905,5.489380,4.862725,4.866480,1.710582,5.649710,0.459513,-1.329995,0.673954,-5.224139,-4.643066,8.789910,-6.876376,-3.237278,-5.824245,-1.546640,6.129370,7.821620,-0.097042,-7.493334,-3.218126,-0.586967,6.731285,-5.571411,0.039609,1.556628,8.170276,5.770313,-4.894357,-8.296238,5.751861,5.596478,-3.094461,-9.301791,3.915836,-1.461512,-8.928703,5.573555,8.767815,-9.484271,1.139765,-2.005125,4.591749,-2.206991,5.409537,-4.593119,9.224620,-7.750151,-9.049197,6.231873,8.854194,7.943635,-9.692579,1.938882,-8.406846,1.267665,0.881131,-2.126828,4.786266,6.965905,2.781706,6.575007,5.158838,-4.980668,-9.682587,-0.636557,8.899968,8.547261,-0.554788,-0.539570,0.411679,-2.081860,8.842162,3.224491,-8.202834,-1.770512,-2.409571,-7.275500,5.252258,7.454438,-6.612775,4.206279,7.819257,-4.454216,9.451780,-4.529823,-5.981264,-7.790944,-3.411657,-6.299345,-9.365921,-2.944542,-3.939944,-0.844054,-9.145879,-9.783849,5.001653,-8.020884,-6.363851,8.049117,9.433352,-5.721364,-4.365341,-3.177940,-5.489629,5.849562,6.144624,2.602271,8.280060,8.302792,0.456272,-9.912996,4.726136,0.612030,5.948559,7.821231,5.497437,-9.204111,-3.677258,-0.020546,2.439353,0.900310,6.538202,0.466676,4.242314,-5.069870,-9.489189,3.086359,-5.372024,2.034847,1.623258,-0.334197,0.214609,8.045324,9.960279,-2.305378,9.655310,0.173901,4.623329,0.696888,1.223433,4.699144,8.277396,9.597282,-1.298390,1.463890,-9.195195,-3.813020,7.503739,9.144091,4.020643,7.962558,-8.602517,2.754387,3.676715,-3.462220,8.640783,-6.212548,-5.154707,-6.627020,4.940946,3.046682,9.225825,8.712629,4.381282,-5.934587,-0.364730,2.446107,-1.558173,-9.137657,-0.532180,8.605691,2.798722,-9.077090,7.217911,-5.671390,-7.936057,-6.344815,1.229695,-7.772816,9.291562,5.994934,9.621931,-7.928074,6.263129,0.732074,5.311754,5.777144,9.552891,-8.908676,-0.424833,8.414636,-0.493273,4.033968,9.392024,-6.670102,-8.622497,-9.294965,9.739280,7.029430,-3.524609,-3.027821,8.724186,-2.708839,2.257243,-8.242733,8.223369,-2.798062,4.253460,0.178497,-6.428388,2.868137,3.608465,-0.179856,-2.803666,3.914835,-5.404873,-2.982389,-6.728324,-3.259136,-0.027988,7.006053,-7.757111,3.805435,7.759768,-7.944580,6.816361,-8.119324,-4.925619,4.659326,6.943228,3.465572,-4.296480,4.138224,-2.720662,-6.719860,-5.997137,-7.261279,4.104876,3.359995,-9.520726,-3.678802,0.149692,-8.052849,5.872354,8.255074,-9.375794,1.476502,-4.205987,0.731964,-0.413180,1.194823,-1.881395,-7.510239,-3.362672,-2.759142,4.848998,-6.991445,-6.900694,-9.104466,-8.185982,-2.907672,-4.481076,5.175470,-9.063483,7.714816,-3.159794,-2.108264,-9.040980,-4.326796,-7.081936,5.362482,-0.761298,-8.683828,-6.068507,-7.740236,-1.007283,-5.609091,-7.277682,-3.650150,-0.065645,-8.446512,-7.273272,2.440664,0.422259,8.647946,6.676307,1.310737,-1.919874,-9.049309,8.341240,1.630147,5.154624,-6.465612,2.798673,-2.520649,0.069500,-8.628469,1.263502,-1.436050,-0.723871,-2.827109,0.913772,1.104606,-6.042736,-3.861071,-1.860302,6.775794,5.267605,-3.923122,-7.722870,7.995805,5.240100,-5.130212,0.492218,8.620987,-2.690260,4.840097,4.623757,-3.444498,-8.309131,0.547240,-6.383689,-1.246695,7.475564,7.705338,-7.383779,1.498318,-1.181119,-4.047932,-3.346582,6.634003,-6.878903,-4.034946,3.034228,2.500949,-1.013556,3.796252,4.674383,-8.093007,-2.665588,3.329787,-1.137414,-4.927905,-2.744203,9.587296,-1.053991,2.863727,8.887679,-7.635128,-1.840248,7.856327,2.136800,-0.595543,-1.221020,2.984077,-0.266784,8.359490,0.593163,7.569611,4.683772,-3.039768,-0.799485,-2.901567,-9.977487,-8.722736,-9.357432,3.853977,-9.697480,-2.128298,-4.523717,0.735926,-8.221730,-5.053079,-2.560993,4.334476,-7.989458,5.406597,-8.221700,-5.453543,1.178179,4.039120,-2.648971,5.520927,-5.458451,-4.030624,5.110478,5.538379,-0.331639,2.391688,-8.712758,-3.518602,-4.379654,3.123509,0.466686,6.529549,-2.524081,-5.492920,1.606643,-3.125997,-8.828589,6.531271,-6.648392,1.801845,-6.406471,-2.632013,-9.376327,6.865472,-8.243821,4.809245,-8.953648,-6.725891,8.743870,-9.412479,-9.883004,6.391638,4.499393,-8.514172,9.232874,-0.009477,-2.252343,-6.252729,-8.013762,-1.074928,-5.942172,-6.372848,-9.520982,-0.105776,-1.807339,6.809012,2.498236,6.936762,2.826768,-9.252345,5.967701,-0.171726,8.019219,-8.129101,-6.270666,1.672135,-4.544229,3.863522,-5.697835,1.442831,-0.840014,-3.050545,1.128256,-3.223726,2.695939,8.814649,-6.743501,1.760274,0.173409,5.361986,-2.698115,-8.131532,-5.206557,6.087300,2.275596,3.004367,2.152021,5.169284,0.872045,4.638160,9.723834,-0.822715,-4.743489,0.069669,3.679625,2.147839,0.329261,7.477494,-3.038368,4.069729,6.688771,3.675932,-2.698005,8.353319,7.276419,-0.469858,3.561795,-5.981207,-7.534130,4.008304,-8.065274,5.102055,6.719692,7.952749,-8.005476,1.261864,-2.303653,-5.021727,-9.251449,-4.678717,2.161989,-1.045131,6.183086,-1.037552,-6.935393,-8.836226,0.632660,0.504509,-3.216868,-1.144755,3.031230,-8.944660,-8.242452,-7.698949,-9.243876,-5.989376,2.898077,-5.074994,4.661396,6.828104,5.244844,-9.634412,4.874853,4.270241,7.635019,-0.709228,1.453397,-7.462015,-5.572028,-5.106388,8.884078,-3.403607,5.358084,-2.244784,2.504457,1.063297,6.868977,0.159964,7.380280,-5.601092,-0.619872,5.872450,8.114450,-2.379145,-9.364287,-0.126846,5.971459,-8.081895,3.096274,-5.200489,-5.141387,1.489247,3.465625,0.992580,9.978831,8.081436,-0.712730,-7.994868,-1.247821,1.048262,1.871887,1.824514,-5.178469,-6.051465,-2.707330,7.893478,-2.643863,-8.099349,9.132898,-7.667993,6.194623,1.519072,-7.222289,0.697692,-9.144455,9.330791,-9.753451,-0.771928,-3.864381,-9.548698,1.025365,-1.556902,0.066923,-4.763989,-1.695213,2.453419,-5.730169,9.403113,-0.318703,-3.730821,-0.134897,2.152043,-7.491690,7.851980,-6.627129,1.000239,0.618867,7.291132,-7.784994,-2.019665,-8.556333,-7.264603,-0.405838,2.611734,-4.858900,5.413075,4.100980,6.469020,-5.572780,-0.483372,-7.136820,0.775871,5.746146,-0.837862,-9.857092,-9.593970,1.887882,3.214221,9.768971,-9.518554,-2.548962,-1.689758,-5.038378,2.803975,-9.984434,3.825494,7.269245,2.721184,1.804480,-4.292759,-5.231579,-1.327382,8.278646,0.113797,-8.649718,-6.319136,2.994400,-5.692722,-1.952394,-2.848944,-8.520459,-5.702099,-8.735410,-0.356078,8.323533,5.808852,-5.679005,0.725987,-5.479195,-8.275332,1.043633,6.750741,1.530416,-1.806035,-0.825844,-4.728934,6.426143,-0.640660,-5.542980,2.278973,-3.313894,5.030702,2.297311,-6.576997,9.127585,-9.912425,-6.142508,2.868195,-3.752175,1.432944,3.159915,5.224535,-1.430600,-6.676749,-9.479508,4.346732,9.626333,9.975542,1.675249,-2.213724,-3.494225,7.894630,-4.624819,-5.126218,5.415756,6.587655,-5.502056,2.728597,1.202839,4.314524,5.282614,-7.744272,-0.243097,8.649038,5.941747,-5.880252,8.719598,-1.302672,0.183569,-0.476303,3.720992], dtype = "float64")#candidate|427|(1536,)|const|float64
call_426 = relay.TupleGetItem(func_103_call(relay.reshape(const_427.astype('float64'), [12, 8, 16]), relay.reshape(const_427.astype('float64'), [12, 8, 16]), relay.reshape(const_427.astype('float32'), [12, 8, 16]), ), 2)
call_428 = relay.TupleGetItem(func_108_call(relay.reshape(const_427.astype('float64'), [12, 8, 16]), relay.reshape(const_427.astype('float64'), [12, 8, 16]), relay.reshape(const_427.astype('float32'), [12, 8, 16]), ), 2)
bop_433 = relay.bitwise_or(bop_405.astype('int64'), relay.reshape(const_397.astype('int64'), relay.shape_of(bop_405))) # shape=(3,)
output = relay.Tuple([call_408,const_409,bop_418,call_426,const_427,bop_433,])
output2 = relay.Tuple([call_410,const_409,bop_418,call_428,const_427,bop_433,])
func_437 = relay.Function([var_398,], output)
mod['func_437'] = func_437
mod = relay.transform.InferType()(mod)
var_438 = relay.var("var_438", dtype = "int64", shape = (3,))#candidate|438|(3,)|var|int64
output = func_437(var_438)
func_439 = relay.Function([var_438], output)
mutated_mod['func_439'] = func_439
mutated_mod = relay.transform.InferType()(mutated_mod)
var_444 = relay.var("var_444", dtype = "float64", shape = ())#candidate|444|()|var|float64
var_445 = relay.var("var_445", dtype = "float64", shape = (1, 15))#candidate|445|(1, 15)|var|float64
bop_446 = relay.divide(var_444.astype('float64'), var_445.astype('float64')) # shape=(1, 15)
uop_449 = relay.log10(bop_446.astype('float32')) # shape=(1, 15)
bop_451 = relay.add(uop_449.astype('int16'), var_444.astype('int16')) # shape=(1, 15)
var_456 = relay.var("var_456", dtype = "float32", shape = (3, 15))#candidate|456|(3, 15)|var|float32
bop_457 = relay.maximum(uop_449.astype('uint64'), var_456.astype('uint64')) # shape=(3, 15)
func_387_call = mod.get_global_var('func_387')
func_390_call = mutated_mod.get_global_var('func_390')
const_464 = relay.const([[-9,7,-4,7,-1,-10,6]], dtype = "int8")#candidate|464|(1, 7)|const|int8
call_463 = relay.TupleGetItem(func_387_call(relay.reshape(const_464.astype('int8'), [7,])), 4)
call_465 = relay.TupleGetItem(func_390_call(relay.reshape(const_464.astype('int8'), [7,])), 4)
const_472 = relay.const([[-8.885170,-2.902922,-2.647325,-8.207905,-7.933097,1.974016,7.062386,5.149094,7.288906,-5.848460,8.829751,8.120708,5.638671,-0.898241,4.933179],[-7.054569,6.456433,-1.960104,5.058808,7.676005,-5.264101,-6.980440,6.440725,-6.397532,-7.985274,3.293940,6.156932,8.092969,0.397670,3.746690],[9.397255,5.220336,-6.434381,9.882845,-7.135719,2.802751,2.968262,-0.493026,-6.999329,2.689133,0.714824,-9.513251,1.401445,1.988571,-7.677988],[9.382129,-8.191088,-3.837160,6.900658,-3.008160,-3.572367,-7.203912,7.789803,-8.991208,7.143094,-2.997404,-2.736841,1.064096,1.299409,2.417182],[7.315445,2.008904,9.723430,-4.859584,1.101668,-1.943475,9.890592,-9.609954,1.456821,-6.856713,-5.697077,6.640090,7.641647,5.742641,2.908634],[-2.698637,4.223306,-4.003999,1.003279,8.421752,3.269506,1.127797,-9.631432,-1.057011,-0.077348,7.432290,3.322845,-1.042350,5.890033,8.964144],[-3.673625,-3.771683,-0.011571,-8.876501,1.707653,-6.746741,5.585144,6.728819,0.658979,9.967221,-8.124912,3.496044,8.519247,1.481804,1.222869],[3.373989,-8.193791,5.492542,-4.517566,6.531285,-5.610178,-3.922919,5.390390,4.567111,2.272979,-8.469661,2.854097,-8.286468,3.699458,-8.524482],[-0.818433,-5.724639,7.865268,3.326462,9.816345,4.032514,5.668026,5.579578,-7.831293,8.005392,7.803049,9.737154,2.432267,8.763140,8.779055],[7.541148,4.664848,6.517361,-6.310510,-9.230941,3.620434,9.625530,-7.711417,1.393328,7.056271,-7.796078,-5.670408,-9.231776,3.603059,3.200913],[2.522413,4.396182,-8.791425,3.197789,6.557834,0.669198,3.014206,3.607124,5.929152,-3.572243,-4.575275,-5.836855,8.788871,-5.761392,-6.968850]], dtype = "float32")#candidate|472|(11, 15)|const|float32
bop_473 = relay.left_shift(uop_449.astype('int64'), const_472.astype('int64')) # shape=(11, 15)
func_22_call = mod.get_global_var('func_22')
func_24_call = mutated_mod.get_global_var('func_24')
call_482 = relay.TupleGetItem(func_22_call(relay.reshape(call_463.astype('int8'), [7,])), 0)
call_483 = relay.TupleGetItem(func_24_call(relay.reshape(call_463.astype('int8'), [7,])), 0)
output = relay.Tuple([bop_451,bop_457,call_463,const_464,bop_473,call_482,])
output2 = relay.Tuple([bop_451,bop_457,call_465,const_464,bop_473,call_483,])
func_486 = relay.Function([var_444,var_445,var_456,], output)
mod['func_486'] = func_486
mod = relay.transform.InferType()(mod)
mutated_mod['func_486'] = func_486
mutated_mod = relay.transform.InferType()(mutated_mod)
func_486_call = mutated_mod.get_global_var('func_486')
var_488 = relay.var("var_488", dtype = "float64", shape = ())#candidate|488|()|var|float64
var_489 = relay.var("var_489", dtype = "float64", shape = (1, 15))#candidate|489|(1, 15)|var|float64
var_490 = relay.var("var_490", dtype = "float32", shape = (3, 15))#candidate|490|(3, 15)|var|float32
call_487 = func_486_call(var_488,var_489,var_490,)
output = call_487
func_491 = relay.Function([var_488,var_489,var_490,], output)
mutated_mod['func_491'] = func_491
mutated_mod = relay.transform.InferType()(mutated_mod)
const_514 = relay.const([[[9,-4,-6,4,8,-9,9,-4,5,9,5,-7],[-2,-3,-10,-4,1,-4,8,-10,8,-1,-5,4],[-10,-3,4,10,-6,-10,-2,-7,-10,-7,7,-7],[9,3,-5,-3,1,10,5,-1,2,9,-6,6],[5,4,-3,8,9,5,8,8,5,5,7,2],[9,-5,8,-1,-5,5,-8,-1,6,-2,5,4],[-8,-1,-8,6,6,4,-3,5,2,9,4,-10],[7,7,-1,-3,1,-6,8,-8,-3,6,-7,-5],[4,-2,5,1,3,-5,8,-3,-3,7,1,6],[8,-2,-5,-8,3,9,2,-10,-7,-7,-3,1],[-9,9,-6,6,7,8,4,-4,6,5,-3,-2],[9,3,-2,-10,-7,-3,-4,-6,6,6,2,9],[3,-5,-10,-5,10,5,-6,-5,3,-3,-8,9]],[[-3,-5,5,2,-9,-2,-7,2,-9,-7,1,6],[-1,-1,10,-2,7,9,-1,-7,9,3,-10,-1],[-9,4,2,4,-10,2,-6,-4,-4,-2,3,7],[-1,-6,-3,-10,9,2,3,-7,-2,-7,-5,-9],[4,-4,-3,9,-1,-8,5,-9,-1,6,-7,-9],[3,-7,-6,7,-10,-9,2,-10,6,-9,4,-5],[-9,1,3,-6,7,-5,10,5,5,-4,5,-1],[-9,-3,-8,-10,-9,-2,-2,-1,2,1,9,3],[-1,2,8,-8,4,2,10,-9,-2,3,1,-2],[-3,-6,-1,8,-3,-10,4,10,9,-1,5,-10],[-3,2,9,9,-8,-6,-2,-1,-5,-8,10,8],[-1,10,1,4,3,7,1,-5,1,-8,-6,-9],[-1,-7,-6,-4,-3,4,2,-7,-5,10,2,-7]],[[-7,-5,-3,1,1,8,-4,-4,-5,-3,8,6],[6,-1,1,1,-2,-8,-3,10,-8,1,1,1],[6,6,5,1,-8,-10,-2,-5,-9,9,4,6],[-10,-6,-4,8,2,-6,-6,8,1,10,-9,8],[-10,2,8,7,-6,-2,1,-10,4,2,5,3],[-8,-9,-10,6,4,3,7,2,5,4,4,3],[-2,-7,4,2,4,10,-6,3,6,2,8,-7],[-7,-2,-6,6,-9,6,-4,-7,10,2,4,8],[1,-3,5,3,10,-3,-2,4,-4,7,9,-8],[-1,-8,6,-3,9,6,-6,6,-6,-2,-7,-10],[-7,1,-2,8,9,-6,-4,-2,7,-7,-8,-8],[-1,3,-7,1,1,-3,-2,6,-8,6,3,5],[7,10,-6,-10,-1,6,-9,3,10,-2,-8,4]],[[3,8,-10,-4,6,2,4,-8,8,-2,-3,-6],[-2,5,-7,6,1,-5,-6,7,5,-3,-3,6],[6,-6,-5,-4,-1,9,-10,-9,8,1,3,5],[7,-8,10,2,4,-7,-10,-7,1,-2,-10,9],[5,3,8,-7,-7,-5,-3,-5,7,-3,6,-10],[6,8,-3,6,-7,-7,7,1,-10,-3,5,7],[1,-9,-2,3,-10,-5,-8,-10,-8,-1,10,-10],[-10,3,-10,-7,4,9,-4,-5,-5,-9,1,-9],[8,-5,4,1,8,-9,-6,-1,-2,-8,7,5],[6,-7,5,6,-8,2,-6,-7,-8,-5,5,-7],[-10,-3,10,9,2,-3,-1,-2,1,2,6,-6],[-8,-1,8,-9,-2,-3,10,10,-7,-3,-3,-9],[9,-6,3,-9,2,3,7,6,4,-6,3,-8]],[[-1,1,6,-2,3,9,-9,-6,-10,9,-1,-9],[-4,9,2,-10,-10,9,-2,8,9,1,8,7],[8,-5,10,-2,-10,-4,10,-5,6,6,-5,3],[-4,1,4,9,-5,9,-8,-4,3,1,3,-6],[2,-6,8,10,-4,3,-1,9,7,-3,-10,5],[6,-9,-4,7,6,-2,3,-8,4,-4,-4,-3],[1,-9,-3,-4,-2,8,-5,1,-8,-8,8,-9],[-7,-9,6,-3,-8,-7,7,-1,-4,5,6,3],[-3,-5,6,3,-7,-4,2,1,10,-10,1,5],[2,5,8,-10,-8,1,-10,-7,5,-3,1,-7],[-4,-9,10,-10,-6,8,2,6,-6,-6,-9,7],[-6,-1,4,7,6,-5,-10,7,-10,9,-5,-4],[1,-7,-4,-6,-3,-7,-6,-9,10,9,8,5]]], dtype = "uint8")#candidate|514|(5, 13, 12)|const|uint8
var_515 = relay.var("var_515", dtype = "uint8", shape = (5, 13, 12))#candidate|515|(5, 13, 12)|var|uint8
bop_516 = relay.greater_equal(const_514.astype('bool'), relay.reshape(var_515.astype('bool'), relay.shape_of(const_514))) # shape=(5, 13, 12)
bop_523 = relay.less_equal(var_515.astype('bool'), relay.reshape(bop_516.astype('bool'), relay.shape_of(var_515))) # shape=(5, 13, 12)
bop_528 = relay.greater(bop_516.astype('bool'), relay.reshape(var_515.astype('bool'), relay.shape_of(bop_516))) # shape=(5, 13, 12)
func_486_call = mod.get_global_var('func_486')
func_491_call = mutated_mod.get_global_var('func_491')
const_532 = relay.const(-3.604227, dtype = "float64")#candidate|532|()|const|float64
const_533 = relay.const([-5.012754,-8.559504,7.416209,4.936040,2.135871,-7.945501,-9.974301,1.760277,2.067418,-9.758075,8.828430,1.586002,2.526099,2.458927,5.867139], dtype = "float64")#candidate|533|(15,)|const|float64
var_534 = relay.var("var_534", dtype = "float32", shape = (45,))#candidate|534|(45,)|var|float32
call_531 = relay.TupleGetItem(func_486_call(relay.reshape(const_532.astype('float64'), []), relay.reshape(const_533.astype('float64'), [1, 15]), relay.reshape(var_534.astype('float32'), [3, 15]), ), 1)
call_535 = relay.TupleGetItem(func_491_call(relay.reshape(const_532.astype('float64'), []), relay.reshape(const_533.astype('float64'), [1, 15]), relay.reshape(var_534.astype('float32'), [3, 15]), ), 1)
output = relay.Tuple([bop_523,bop_528,call_531,const_532,const_533,var_534,])
output2 = relay.Tuple([bop_523,bop_528,call_535,const_532,const_533,var_534,])
func_537 = relay.Function([var_515,var_534,], output)
mod['func_537'] = func_537
mod = relay.transform.InferType()(mod)
mutated_mod['func_537'] = func_537
mutated_mod = relay.transform.InferType()(mutated_mod)
func_537_call = mutated_mod.get_global_var('func_537')
var_539 = relay.var("var_539", dtype = "uint8", shape = (5, 13, 12))#candidate|539|(5, 13, 12)|var|uint8
var_540 = relay.var("var_540", dtype = "float32", shape = (45,))#candidate|540|(45,)|var|float32
call_538 = func_537_call(var_539,var_540,)
output = call_538
func_541 = relay.Function([var_539,var_540,], output)
mutated_mod['func_541'] = func_541
mutated_mod = relay.transform.InferType()(mutated_mod)
var_563 = relay.var("var_563", dtype = "int32", shape = (4, 5, 13))#candidate|563|(4, 5, 13)|var|int32
var_564 = relay.var("var_564", dtype = "int32", shape = (4, 5, 13))#candidate|564|(4, 5, 13)|var|int32
bop_565 = relay.bitwise_xor(var_563.astype('int32'), relay.reshape(var_564.astype('int32'), relay.shape_of(var_563))) # shape=(4, 5, 13)
bop_569 = relay.left_shift(var_564.astype('uint64'), relay.reshape(var_563.astype('uint64'), relay.shape_of(var_564))) # shape=(4, 5, 13)
func_486_call = mod.get_global_var('func_486')
func_491_call = mutated_mod.get_global_var('func_491')
const_573 = relay.const(-9.219184, dtype = "float64")#candidate|573|()|const|float64
var_574 = relay.var("var_574", dtype = "float64", shape = (15,))#candidate|574|(15,)|var|float64
var_575 = relay.var("var_575", dtype = "float32", shape = (45,))#candidate|575|(45,)|var|float32
call_572 = relay.TupleGetItem(func_486_call(relay.reshape(const_573.astype('float64'), []), relay.reshape(var_574.astype('float64'), [1, 15]), relay.reshape(var_575.astype('float32'), [3, 15]), ), 2)
call_576 = relay.TupleGetItem(func_491_call(relay.reshape(const_573.astype('float64'), []), relay.reshape(var_574.astype('float64'), [1, 15]), relay.reshape(var_575.astype('float32'), [3, 15]), ), 2)
bop_578 = relay.greater(var_574.astype('bool'), const_573.astype('bool')) # shape=(15,)
output = relay.Tuple([bop_565,bop_569,call_572,var_575,bop_578,])
output2 = relay.Tuple([bop_565,bop_569,call_576,var_575,bop_578,])
func_583 = relay.Function([var_563,var_564,var_574,var_575,], output)
mod['func_583'] = func_583
mod = relay.transform.InferType()(mod)
mutated_mod['func_583'] = func_583
mutated_mod = relay.transform.InferType()(mutated_mod)
func_583_call = mutated_mod.get_global_var('func_583')
var_585 = relay.var("var_585", dtype = "int32", shape = (4, 5, 13))#candidate|585|(4, 5, 13)|var|int32
var_586 = relay.var("var_586", dtype = "int32", shape = (4, 5, 13))#candidate|586|(4, 5, 13)|var|int32
var_587 = relay.var("var_587", dtype = "float64", shape = (15,))#candidate|587|(15,)|var|float64
var_588 = relay.var("var_588", dtype = "float32", shape = (45,))#candidate|588|(45,)|var|float32
call_584 = func_583_call(var_585,var_586,var_587,var_588,)
output = call_584
func_589 = relay.Function([var_585,var_586,var_587,var_588,], output)
mutated_mod['func_589'] = func_589
mutated_mod = relay.transform.InferType()(mutated_mod)
var_593 = relay.var("var_593", dtype = "uint32", shape = (10, 11, 2))#candidate|593|(10, 11, 2)|var|uint32
const_594 = relay.const([[[-3,8],[1,4],[1,-7],[2,6],[-2,-5],[-6,1],[-3,9],[1,3],[-4,-10],[9,10],[9,-8]],[[3,-8],[-9,-6],[-4,-6],[-3,10],[3,-5],[-4,-4],[10,-4],[-3,-9],[-8,-9],[-4,1],[1,6]],[[2,-7],[-1,4],[9,10],[-3,-10],[7,-1],[8,10],[-7,1],[-10,-4],[-5,7],[-3,-1],[8,4]],[[6,-8],[-3,5],[-10,-5],[-8,7],[-3,8],[3,-6],[-6,-1],[-10,8],[6,6],[4,1],[6,3]],[[2,2],[2,-7],[-5,1],[10,8],[6,-6],[1,-4],[-5,8],[-10,-7],[-2,2],[-9,9],[2,7]],[[-4,3],[-2,-4],[3,5],[2,-9],[-4,-7],[-5,10],[-9,-10],[-3,-4],[6,8],[-8,-1],[8,-1]],[[9,5],[6,10],[2,-7],[-1,4],[8,10],[7,1],[10,-8],[-6,-1],[1,-10],[7,-10],[2,-1]],[[-6,6],[3,7],[-3,7],[8,2],[-6,-1],[-8,-4],[3,-3],[3,9],[-9,3],[-2,-3],[-9,-8]],[[10,1],[4,3],[-6,-6],[-2,5],[5,7],[2,7],[10,-1],[-4,6],[-1,-10],[-2,7],[-1,-9]],[[2,-10],[-10,10],[-9,-8],[-8,-10],[7,6],[4,3],[8,-5],[2,4],[8,8],[3,1],[-6,-10]]], dtype = "uint32")#candidate|594|(10, 11, 2)|const|uint32
bop_595 = relay.less_equal(var_593.astype('bool'), relay.reshape(const_594.astype('bool'), relay.shape_of(var_593))) # shape=(10, 11, 2)
uop_600 = relay.log(bop_595.astype('float32')) # shape=(10, 11, 2)
output = uop_600
output2 = uop_600
func_602 = relay.Function([var_593,], output)
mod['func_602'] = func_602
mod = relay.transform.InferType()(mod)
var_603 = relay.var("var_603", dtype = "uint32", shape = (10, 11, 2))#candidate|603|(10, 11, 2)|var|uint32
output = func_602(var_603)
func_604 = relay.Function([var_603], output)
mutated_mod['func_604'] = func_604
mutated_mod = relay.transform.InferType()(mutated_mod)
func_247_call = mod.get_global_var('func_247')
func_249_call = mutated_mod.get_global_var('func_249')
call_613 = relay.TupleGetItem(func_247_call(), 0)
call_614 = relay.TupleGetItem(func_249_call(), 0)
output = relay.Tuple([call_613,])
output2 = relay.Tuple([call_614,])
func_619 = relay.Function([], output)
mod['func_619'] = func_619
mod = relay.transform.InferType()(mod)
output = func_619()
func_620 = relay.Function([], output)
mutated_mod['func_620'] = func_620
mutated_mod = relay.transform.InferType()(mutated_mod)
func_247_call = mod.get_global_var('func_247')
func_249_call = mutated_mod.get_global_var('func_249')
call_668 = relay.TupleGetItem(func_247_call(), 0)
call_669 = relay.TupleGetItem(func_249_call(), 0)
uop_670 = relay.exp(call_668.astype('float32')) # shape=(1, 3)
uop_672 = relay.exp(call_669.astype('float32')) # shape=(1, 3)
bop_674 = relay.floor_mod(uop_670.astype('float32'), relay.reshape(call_668.astype('float32'), relay.shape_of(uop_670))) # shape=(1, 3)
bop_677 = relay.floor_mod(uop_672.astype('float32'), relay.reshape(call_669.astype('float32'), relay.shape_of(uop_672))) # shape=(1, 3)
var_683 = relay.var("var_683", dtype = "float32", shape = (3, 3))#candidate|683|(3, 3)|var|float32
bop_684 = relay.minimum(bop_674.astype('float32'), var_683.astype('float32')) # shape=(3, 3)
bop_687 = relay.minimum(bop_677.astype('float32'), var_683.astype('float32')) # shape=(3, 3)
uop_689 = relay.asinh(uop_670.astype('float64')) # shape=(1, 3)
uop_691 = relay.asinh(uop_672.astype('float64')) # shape=(1, 3)
bop_692 = relay.add(var_683.astype('int32'), bop_674.astype('int32')) # shape=(3, 3)
bop_695 = relay.add(var_683.astype('int32'), bop_677.astype('int32')) # shape=(3, 3)
uop_696 = relay.erf(uop_689.astype('float32')) # shape=(1, 3)
uop_698 = relay.erf(uop_691.astype('float32')) # shape=(1, 3)
bop_700 = relay.less_equal(bop_692.astype('bool'), bop_674.astype('bool')) # shape=(3, 3)
bop_703 = relay.less_equal(bop_695.astype('bool'), bop_677.astype('bool')) # shape=(3, 3)
const_704 = relay.const([[7.573286,9.450474,-5.070306],[7.158316,9.620576,9.103082],[0.861797,-3.631587,-1.024597],[-4.527492,-2.693504,-6.474892],[1.058567,0.981597,-1.056298],[8.559528,4.110650,-9.804207],[-9.384430,-0.537721,-5.307592],[2.406767,-0.816820,-5.958984],[-4.240571,-0.682820,-6.962335],[-4.539548,-2.007288,8.741507],[-6.285192,-1.228326,4.966928]], dtype = "float32")#candidate|704|(11, 3)|const|float32
bop_705 = relay.less_equal(uop_696.astype('bool'), const_704.astype('bool')) # shape=(11, 3)
bop_708 = relay.less_equal(uop_698.astype('bool'), const_704.astype('bool')) # shape=(11, 3)
bop_710 = relay.maximum(uop_696.astype('uint8'), bop_700.astype('uint8')) # shape=(3, 3)
bop_713 = relay.maximum(uop_698.astype('uint8'), bop_703.astype('uint8')) # shape=(3, 3)
bop_715 = relay.subtract(uop_689.astype('float32'), const_704.astype('float32')) # shape=(11, 3)
bop_718 = relay.subtract(uop_691.astype('float32'), const_704.astype('float32')) # shape=(11, 3)
var_726 = relay.var("var_726", dtype = "float64", shape = (14, 3))#candidate|726|(14, 3)|var|float64
bop_727 = relay.not_equal(uop_689.astype('bool'), var_726.astype('bool')) # shape=(14, 3)
bop_730 = relay.not_equal(uop_691.astype('bool'), var_726.astype('bool')) # shape=(14, 3)
uop_731 = relay.log10(bop_715.astype('float64')) # shape=(11, 3)
uop_733 = relay.log10(bop_718.astype('float64')) # shape=(11, 3)
bop_738 = relay.minimum(uop_689.astype('float32'), var_726.astype('float32')) # shape=(14, 3)
bop_741 = relay.minimum(uop_691.astype('float32'), var_726.astype('float32')) # shape=(14, 3)
uop_742 = relay.atanh(uop_689.astype('float32')) # shape=(1, 3)
uop_744 = relay.atanh(uop_691.astype('float32')) # shape=(1, 3)
var_745 = relay.var("var_745", dtype = "bool", shape = (11, 3))#candidate|745|(11, 3)|var|bool
bop_746 = relay.mod(bop_705.astype('float32'), relay.reshape(var_745.astype('float32'), relay.shape_of(bop_705))) # shape=(11, 3)
bop_749 = relay.mod(bop_708.astype('float32'), relay.reshape(var_745.astype('float32'), relay.shape_of(bop_708))) # shape=(11, 3)
uop_750 = relay.sigmoid(bop_746.astype('float64')) # shape=(11, 3)
uop_752 = relay.sigmoid(bop_749.astype('float64')) # shape=(11, 3)
uop_753 = relay.asinh(uop_696.astype('float64')) # shape=(1, 3)
uop_755 = relay.asinh(uop_698.astype('float64')) # shape=(1, 3)
bop_756 = relay.subtract(bop_738.astype('uint32'), bop_674.astype('uint32')) # shape=(14, 3)
bop_759 = relay.subtract(bop_741.astype('uint32'), bop_677.astype('uint32')) # shape=(14, 3)
func_583_call = mod.get_global_var('func_583')
func_589_call = mutated_mod.get_global_var('func_589')
const_763 = relay.const([-3,-1,-7,-7,4,-5,-4,8,1,5,-2,9,-7,-8,-3,6,7,-10,-2,9,4,9,-3,10,-6,1,1,7,2,-8,-8,2,4,2,-6,-3,6,-10,8,3,4,-5,-4,3,-10,1,-5,-3,-3,-6,5,9,1,8,-9,5,-7,-6,-3,-4,-2,-10,6,-8,8,7,-3,-5,-8,-4,-6,-10,-1,3,-7,-6,-2,8,10,8,-1,-1,3,-7,-9,-8,1,-9,4,6,-8,4,9,-7,-9,-4,10,-3,9,4,2,-4,-9,5,6,-9,-4,-2,5,9,-6,4,-8,9,-8,9,6,-5,8,-10,-1,-7,-2,-7,10,-10,-1,-2,-1,8,5,-1,1,-8,4,-3,7,-2,-1,-5,-5,9,7,-4,-4,10,-10,-2,7,-1,-8,-7,-4,-3,8,-8,-10,8,10,-10,6,4,2,-8,6,3,-4,6,-9,-5,-6,1,-1,5,-3,-6,6,-7,-3,-9,-6,2,3,8,-8,1,9,2,-1,1,-4,4,-6,10,6,10,-2,-2,10,-8,-4,-4,3,2,5,-7,-2,-10,-2,8,2,1,-10,-2,4,1,-1,10,-3,7,8,8,4,8,10,5,-4,9,-9,6,-1,1,2,-7,6,2,7,-3,7,9,7,-1,-10,7,-1,3,10,5,5,-8,5,4,9,5,9,5,-7,7,7,7], dtype = "int32")#candidate|763|(260,)|const|int32
const_764 = relay.const([0.725328,3.655919,-2.832533,8.751071,-8.799923,2.208334,-9.077765,9.320039,0.743311,-2.379358,5.375742,-6.428100,-4.575408,9.939968,-2.693360], dtype = "float64")#candidate|764|(15,)|const|float64
const_765 = relay.const([-6.335314,0.377700,5.233710,-1.721316,-9.683081,3.874755,-9.819339,-9.935091,6.206477,-8.622452,4.050327,2.558284,-8.882872,-0.622571,0.235944,3.645946,8.116892,-7.244157,-7.773868,3.713194,6.395820,-9.720979,-6.962225,1.697993,-8.297766,2.832773,-9.305463,-3.039448,-0.654356,-7.030869,-1.593333,9.386550,5.073432,1.055243,-7.533985,-8.151182,6.626869,-3.253697,-4.995646,-3.653889,3.592732,-0.273812,-6.923298,3.379109,6.339851], dtype = "float32")#candidate|765|(45,)|const|float32
call_762 = relay.TupleGetItem(func_583_call(relay.reshape(const_763.astype('int32'), [4, 5, 13]), relay.reshape(const_763.astype('int32'), [4, 5, 13]), relay.reshape(const_764.astype('float64'), [15,]), relay.reshape(const_765.astype('float32'), [45,]), ), 4)
call_766 = relay.TupleGetItem(func_589_call(relay.reshape(const_763.astype('int32'), [4, 5, 13]), relay.reshape(const_763.astype('int32'), [4, 5, 13]), relay.reshape(const_764.astype('float64'), [15,]), relay.reshape(const_765.astype('float32'), [45,]), ), 4)
bop_771 = relay.floor_mod(bop_746.astype('float64'), uop_689.astype('float64')) # shape=(11, 3)
bop_774 = relay.floor_mod(bop_749.astype('float64'), uop_691.astype('float64')) # shape=(11, 3)
uop_775 = relay.sqrt(uop_750.astype('float32')) # shape=(11, 3)
uop_777 = relay.sqrt(uop_752.astype('float32')) # shape=(11, 3)
uop_779 = relay.sin(uop_742.astype('float64')) # shape=(1, 3)
uop_781 = relay.sin(uop_744.astype('float64')) # shape=(1, 3)
output = relay.Tuple([bop_684,bop_710,bop_727,uop_731,uop_753,bop_756,call_762,const_763,const_764,const_765,bop_771,uop_775,uop_779,])
output2 = relay.Tuple([bop_687,bop_713,bop_730,uop_733,uop_755,bop_759,call_766,const_763,const_764,const_765,bop_774,uop_777,uop_781,])
func_782 = relay.Function([var_683,var_726,var_745,], output)
mod['func_782'] = func_782
mod = relay.transform.InferType()(mod)
var_783 = relay.var("var_783", dtype = "float32", shape = (3, 3))#candidate|783|(3, 3)|var|float32
var_784 = relay.var("var_784", dtype = "float64", shape = (14, 3))#candidate|784|(14, 3)|var|float64
var_785 = relay.var("var_785", dtype = "bool", shape = (11, 3))#candidate|785|(11, 3)|var|bool
output = func_782(var_783,var_784,var_785,)
func_786 = relay.Function([var_783,var_784,var_785,], output)
mutated_mod['func_786'] = func_786
mutated_mod = relay.transform.InferType()(mutated_mod)
func_247_call = mod.get_global_var('func_247')
func_249_call = mutated_mod.get_global_var('func_249')
call_801 = relay.TupleGetItem(func_247_call(), 0)
call_802 = relay.TupleGetItem(func_249_call(), 0)
uop_828 = relay.sinh(call_801.astype('float64')) # shape=(1, 3)
uop_830 = relay.sinh(call_802.astype('float64')) # shape=(1, 3)
output = relay.Tuple([uop_828,])
output2 = relay.Tuple([uop_830,])
func_843 = relay.Function([], output)
mod['func_843'] = func_843
mod = relay.transform.InferType()(mod)
output = func_843()
func_844 = relay.Function([], output)
mutated_mod['func_844'] = func_844
mutated_mod = relay.transform.InferType()(mutated_mod)
const_856 = relay.const([-3,-10,-10,-7,1,-6,-7,7,1,2,3,-5,3,7,9,9], dtype = "uint32")#candidate|856|(16,)|const|uint32
var_857 = relay.var("var_857", dtype = "uint32", shape = (16,))#candidate|857|(16,)|var|uint32
bop_858 = relay.left_shift(const_856.astype('uint32'), relay.reshape(var_857.astype('uint32'), relay.shape_of(const_856))) # shape=(16,)
func_178_call = mod.get_global_var('func_178')
func_181_call = mutated_mod.get_global_var('func_181')
var_862 = relay.var("var_862", dtype = "uint64", shape = ())#candidate|862|()|var|uint64
call_861 = relay.TupleGetItem(func_178_call(relay.reshape(var_862.astype('uint64'), [])), 0)
call_863 = relay.TupleGetItem(func_181_call(relay.reshape(var_862.astype('uint64'), [])), 0)
var_865 = relay.var("var_865", dtype = "uint32", shape = (16,))#candidate|865|(16,)|var|uint32
bop_866 = relay.maximum(const_856.astype('int64'), relay.reshape(var_865.astype('int64'), relay.shape_of(const_856))) # shape=(16,)
bop_872 = relay.logical_and(bop_858.astype('bool'), relay.reshape(bop_866.astype('bool'), relay.shape_of(bop_858))) # shape=(16,)
uop_876 = relay.sin(bop_872.astype('float64')) # shape=(16,)
bop_878 = relay.minimum(uop_876.astype('float64'), relay.reshape(bop_858.astype('float64'), relay.shape_of(uop_876))) # shape=(16,)
var_881 = relay.var("var_881", dtype = "uint32", shape = (16,))#candidate|881|(16,)|var|uint32
bop_882 = relay.less(const_856.astype('bool'), relay.reshape(var_881.astype('bool'), relay.shape_of(const_856))) # shape=(16,)
bop_885 = relay.subtract(uop_876.astype('uint16'), relay.reshape(bop_866.astype('uint16'), relay.shape_of(uop_876))) # shape=(16,)
uop_889 = relay.asin(uop_876.astype('float64')) # shape=(16,)
func_247_call = mod.get_global_var('func_247')
func_249_call = mutated_mod.get_global_var('func_249')
call_895 = relay.TupleGetItem(func_247_call(), 0)
call_896 = relay.TupleGetItem(func_249_call(), 0)
uop_897 = relay.tan(uop_889.astype('float32')) # shape=(16,)
var_901 = relay.var("var_901", dtype = "float64", shape = (16,))#candidate|901|(16,)|var|float64
bop_902 = relay.floor_mod(bop_878.astype('float32'), relay.reshape(var_901.astype('float32'), relay.shape_of(bop_878))) # shape=(16,)
bop_905 = relay.floor_mod(uop_897.astype('float32'), relay.reshape(bop_882.astype('float32'), relay.shape_of(uop_897))) # shape=(16,)
output = relay.Tuple([call_861,var_862,bop_885,call_895,bop_902,bop_905,])
output2 = relay.Tuple([call_863,var_862,bop_885,call_896,bop_902,bop_905,])
func_908 = relay.Function([var_857,var_862,var_865,var_881,var_901,], output)
mod['func_908'] = func_908
mod = relay.transform.InferType()(mod)
mutated_mod['func_908'] = func_908
mutated_mod = relay.transform.InferType()(mutated_mod)
func_908_call = mutated_mod.get_global_var('func_908')
var_910 = relay.var("var_910", dtype = "uint32", shape = (16,))#candidate|910|(16,)|var|uint32
var_911 = relay.var("var_911", dtype = "uint64", shape = ())#candidate|911|()|var|uint64
var_912 = relay.var("var_912", dtype = "uint32", shape = (16,))#candidate|912|(16,)|var|uint32
var_913 = relay.var("var_913", dtype = "uint32", shape = (16,))#candidate|913|(16,)|var|uint32
var_914 = relay.var("var_914", dtype = "float64", shape = (16,))#candidate|914|(16,)|var|float64
call_909 = func_908_call(var_910,var_911,var_912,var_913,var_914,)
output = call_909
func_915 = relay.Function([var_910,var_911,var_912,var_913,var_914,], output)
mutated_mod['func_915'] = func_915
mutated_mod = relay.transform.InferType()(mutated_mod)
var_927 = relay.var("var_927", dtype = "bool", shape = ())#candidate|927|()|var|bool
const_928 = relay.const([False,True,True,False,True,False,False,False,False,False,False], dtype = "bool")#candidate|928|(11,)|const|bool
bop_929 = relay.logical_and(var_927.astype('bool'), const_928.astype('bool')) # shape=(11,)
func_537_call = mod.get_global_var('func_537')
func_541_call = mutated_mod.get_global_var('func_541')
var_933 = relay.var("var_933", dtype = "uint8", shape = (780,))#candidate|933|(780,)|var|uint8
var_934 = relay.var("var_934", dtype = "float32", shape = (45,))#candidate|934|(45,)|var|float32
call_932 = relay.TupleGetItem(func_537_call(relay.reshape(var_933.astype('uint8'), [5, 13, 12]), relay.reshape(var_934.astype('float32'), [45,]), ), 3)
call_935 = relay.TupleGetItem(func_541_call(relay.reshape(var_933.astype('uint8'), [5, 13, 12]), relay.reshape(var_934.astype('float32'), [45,]), ), 3)
uop_938 = relay.log10(bop_929.astype('float32')) # shape=(11,)
bop_941 = relay.bitwise_and(uop_938.astype('uint16'), relay.reshape(bop_929.astype('uint16'), relay.shape_of(uop_938))) # shape=(11,)
uop_946 = relay.cos(uop_938.astype('float32')) # shape=(11,)
output = relay.Tuple([call_932,var_933,var_934,bop_941,uop_946,])
output2 = relay.Tuple([call_935,var_933,var_934,bop_941,uop_946,])
F = relay.Function([var_927,var_933,var_934,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_927,var_933,var_934,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_927= np.array(False, dtype='bool')
module1.set_input('var_927', input_927)
input_933= np.array([-7,5,-7,-10,5,-3,-2,2,-7,-4,-1,5,-3,-1,1,10,9,5,-8,-10,-8,-9,-9,-8,2,-9,2,-10,-3,5,1,3,-1,-5,-3,3,7,-4,2,3,3,-8,7,7,-9,5,-8,-1,7,1,8,-5,-7,-3,10,-5,-9,-7,-1,8,7,-3,4,-7,7,-10,1,1,-4,-6,-2,7,-4,-10,9,8,-3,-4,-2,-5,8,-7,3,-6,4,-3,-5,-8,5,5,-7,-1,-3,-5,-5,-7,10,-3,-3,1,-4,-4,5,7,1,3,6,-8,8,-7,4,7,7,-6,-10,8,1,1,5,5,4,3,1,-3,5,-1,4,-4,7,-1,-8,9,10,-7,-1,-10,10,5,5,2,7,-8,1,-2,-1,-3,2,10,5,-7,-8,9,10,-1,1,-2,7,9,-1,6,4,5,-3,-9,10,5,3,-10,-8,-6,4,-9,-10,-1,-1,-7,6,2,4,-10,-7,4,8,1,-5,-9,6,2,-8,9,9,4,-7,-7,-8,-5,3,-3,3,9,2,9,-7,4,-5,7,-8,-1,9,-5,-6,-2,-2,-2,-10,5,10,-1,-8,-4,-9,-6,2,-1,-5,8,9,-2,6,5,4,9,7,-1,-7,7,6,1,1,10,10,-7,9,-7,-3,10,-6,1,1,6,7,-1,7,4,6,1,-4,-5,10,-6,6,-10,7,4,3,5,5,6,10,7,-4,1,1,-8,10,3,2,-8,5,8,-4,-10,8,9,6,5,-8,-7,-4,9,-3,-10,6,-7,-2,2,7,-4,-8,7,3,-5,8,-8,-10,-6,9,-9,6,9,10,-3,-3,-6,-4,-8,-2,-7,-8,-3,-4,-1,-5,-10,-8,-8,-10,7,-9,-8,-5,1,-9,10,-5,-6,-9,2,9,4,2,-8,-2,8,10,-6,2,4,6,-9,-4,8,1,-7,1,-10,1,7,-4,5,-3,-9,-8,6,-7,-3,-9,-6,10,-3,-7,5,-2,3,7,8,-9,-5,-1,1,6,-1,-4,7,2,-4,-4,7,9,-2,8,-8,-8,-3,4,9,7,-6,6,-4,3,5,7,3,-2,6,-6,6,-7,-7,5,2,-3,-5,-2,-7,-7,4,6,3,4,-7,-2,-6,-4,-2,8,-2,-4,2,-6,-1,-3,10,-2,-9,-10,9,-1,-3,-8,7,10,-7,-6,10,-9,-8,8,4,-9,-8,-9,-3,2,7,-4,7,4,8,-4,6,9,-6,2,-9,-10,1,6,2,-3,-9,5,-9,-10,1,-5,-5,-10,3,10,-2,1,-2,9,-4,-4,7,6,8,-3,10,-3,2,6,5,7,6,1,4,1,2,10,-5,-7,4,2,-8,9,-8,7,-8,-1,4,-2,1,8,-1,5,9,-8,4,7,5,-3,-10,6,-7,-4,-8,1,10,-7,10,-8,5,-3,8,-10,7,-7,6,-9,-2,-3,-9,-4,-6,1,-4,-6,-7,-8,1,9,3,-7,1,3,-8,6,3,-8,10,4,10,-2,8,-3,10,-7,8,-4,-9,-2,3,6,-7,-4,6,10,-5,3,2,2,-8,7,-2,-4,-7,-10,6,8,-2,2,-10,4,-7,-9,-2,3,10,5,10,-5,-8,1,2,-7,2,2,2,-7,2,-9,9,-6,9,-2,-3,-8,-1,4,8,8,3,-4,-6,5,1,2,-4,-10,10,-4,7,3,-2,-1,-8,-4,9,-7,1,2,-6,1,-3,-2,2,-5,1,9,2,-6,1,5,-8,-4,4,10,-10,-9,3,-5,9,-6,-7,4,6,-2,-9,-6,9,3,-6,3,-5,1,4,-5,-8,-5,-7,-4,10,10,5,4,6,9,-2,1,5,-5,10,3,-10,-2,-9,10,4,-9,-5,-5,10,-4,6,-10,-7,-1,-5,-4,-5,4,3,-3,1,8,-5,-7,-8,-9,-8,7,-6,-2,-5,9,-1,5,-4,-10,10,-3,4,-2,-2,-7,2,4,4,-2,-10,-8,2,4,-2,3,6,-9,-5,-1,1,-7,-3,2,7,-6,-5,-10,8,4,-10,-1,4,-5,10,8,-5,6,-6,-7,4,-1,-8,7,5,-5,8], dtype='uint8')
module1.set_input('var_933', input_933)
input_934= np.array([7.899122,-6.516179,-2.888389,1.069396,8.090186,9.557163,5.490131,-4.564369,2.383309,2.775528,-3.158308,7.079447,-3.638835,2.305653,-7.304813,-3.401630,-8.616426,1.443888,-9.882403,-2.393214,5.011654,1.120004,-2.328708,8.778506,4.418573,-7.616870,4.432074,8.625148,2.424899,1.133159,-5.289720,-2.221899,-7.973090,0.717189,-3.296192,-9.228347,0.397797,9.933170,-8.142142,-2.725026,8.734987,6.895178,-1.868451,-5.091870,8.610203], dtype='float32')
module1.set_input('var_934', input_934)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_927, input_933, input_934, )
res3 = intrp3.evaluate()(input_927, input_933, input_934, )
res4 = intrp4.evaluate()(input_927, input_933, input_934, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
module5.set_input('var_927', input_927)
module5.set_input('var_933', input_933)
module5.set_input('var_934', input_934)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_927, input_933, input_934, )
res7 = intrp7.evaluate()(input_927, input_933, input_934, )
res8 = intrp8.evaluate()(input_927, input_933, input_934, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
module9.set_input('var_927', input_927)
module9.set_input('var_933', input_933)
module9.set_input('var_934', input_934)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_927, input_933, input_934, )
res11 = intrp11.evaluate()(input_927, input_933, input_934, )
res12 = intrp12.evaluate()(input_927, input_933, input_934, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
module13.set_input('var_927', input_927)
module13.set_input('var_933', input_933)
module13.set_input('var_934', input_934)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_927, input_933, input_934, )
res15 = intrp15.evaluate()(input_927, input_933, input_934, )
res16 = intrp16.evaluate()(input_927, input_933, input_934, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
module17.set_input('var_927', input_927)
module17.set_input('var_933', input_933)
module17.set_input('var_934', input_934)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_927, input_933, input_934, )
res19 = intrp19.evaluate()(input_927, input_933, input_934, )
res20 = intrp20.evaluate()(input_927, input_933, input_934, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
module21.set_input('var_927', input_927)
module21.set_input('var_933', input_933)
module21.set_input('var_934', input_934)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_927, input_933, input_934, )
res23 = intrp23.evaluate()(input_927, input_933, input_934, )
res24 = intrp24.evaluate()(input_927, input_933, input_934, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()

'''57: TVMFuncCall
56: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
55: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
54: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
53: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
52: tvm::transform::Pass::operator()(tvm::IRModule) const
51: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
50: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
49: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
48: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
47: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
46: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
45: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
44: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
43: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
42: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
41: _ZN3tvm5relay16MixedModeMutato
40: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
39: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
38: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
37: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
36: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
34: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
32: _ZN3tvm5relay16MixedModeMutato
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
27: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
26: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
25: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
24: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
23: tvm::transform::Pass::operator()(tvm::IRModule) const
22: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
21: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
16: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
15: tvm::relay::TypeInferencer::Infer(tvm::GlobalVar, tvm::relay::Function)
14: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
13: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
12: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
11: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
10: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
9: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::FunctionNode const*)
8: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
7: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
6: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
5: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
4: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
3: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::CallNode const*)
2: tvm::relay::TypeInferencer::GeneralCall(tvm::relay::CallNode const*, tvm::runtime::Array<tvm::Type, void>)
1: _ZN3tvm17DiagnosticContext9EmitFatalERKNS_1
0: tvm::DiagnosticContext::Render()

'''