import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
const_8 = relay.const([[[-9.162252,5.228903,-5.000954,3.652975,3.479590,-9.144123,1.837715,-3.986713,3.935056,-1.733182,4.380890,3.788902,2.158534,-1.220523],[2.511653,1.923850,1.061900,5.680530,-8.892021,-5.793573,-6.712741,4.809833,-2.712320,4.241076,9.809869,-4.451075,-5.789958,8.899428],[-5.894449,5.264038,6.496084,4.355079,9.034458,-9.439320,1.736294,7.609454,-9.027984,8.569295,-3.587945,-2.268357,-6.956870,-6.783467],[-5.278566,-5.900659,2.341581,-6.345810,2.662885,-9.277142,3.606601,-5.147242,8.801805,-8.913022,-8.595801,-8.755571,-2.923309,-5.579050]],[[-1.615970,4.180662,-3.011351,1.770857,8.580197,-2.409600,5.812714,5.233154,8.294407,-6.581112,5.624909,-1.030625,-6.381612,8.554354],[9.308769,-8.188027,-2.501885,6.603519,9.709909,1.470570,-2.686441,5.645544,-1.757480,-6.975592,-0.295299,-8.121229,-5.785087,2.963208],[4.636246,3.723126,-4.302372,-2.214048,-8.792183,1.659572,-5.854944,-0.981100,-7.756334,2.433069,4.656296,7.284426,-0.545133,9.446308],[-4.122458,0.400308,1.472311,6.788653,-0.288642,1.930725,6.955334,6.563250,5.694793,-9.086423,3.858975,-2.958510,-1.424417,4.471984]],[[9.289196,9.774949,1.151029,2.057203,3.111370,5.132946,6.824109,-9.002106,8.457075,-2.762109,-9.083849,9.174048,-3.705600,-3.644338],[2.679605,8.381412,-2.177454,-8.275241,-8.640018,8.241996,-6.221832,0.746734,2.521706,-3.560525,1.836286,5.028755,-6.172641,-5.902486],[-9.966871,4.350325,-8.462975,-5.524490,9.413641,-3.337766,-8.572291,0.171685,-3.689273,-8.609972,3.950407,1.914122,-4.827857,-3.774671],[3.340101,5.510993,4.229782,8.530626,-8.198032,-0.896424,-8.442748,8.444693,-5.162213,-2.604437,2.690238,-5.854683,8.664817,-1.032832]],[[-8.582238,-7.560332,3.396192,3.115695,-1.893313,-8.316839,-3.448937,-3.305221,0.398291,-8.837673,5.850821,5.165309,5.450133,8.056742],[0.406864,-0.747504,-1.388932,9.563032,5.423539,-9.373514,0.539721,-8.810602,9.433275,-8.731355,-6.087478,5.780757,6.715864,-2.429654],[-6.983268,-0.468269,8.257215,-5.543117,8.394144,6.988241,-2.432754,3.740929,-0.001788,-1.863196,-3.944927,0.101633,3.446643,-6.657979],[7.046288,0.114662,-0.753748,4.648396,2.156538,0.577830,1.200603,5.287299,-5.588518,0.614529,-1.978303,9.726104,-0.259921,4.613138]],[[3.009153,1.787709,-2.586044,-6.257864,-9.506022,8.422214,2.306620,-4.836876,5.564217,5.151730,-9.405058,0.497319,-7.111508,-1.391656],[8.092756,-2.518311,8.542188,1.116668,-7.462936,6.262998,9.835736,-5.336384,5.538948,0.395432,-0.346954,8.389129,3.934414,2.348979],[7.872131,-7.387026,8.436605,7.632433,-9.801629,4.236535,-3.022374,6.983826,1.972183,1.348101,8.775657,1.964312,8.144220,-5.729028],[6.474507,-0.508554,9.003617,4.815732,2.822961,-5.863540,8.881599,-9.041023,-0.381397,8.218571,-2.898481,-6.321036,0.400534,2.036844]],[[-7.293076,4.494272,-5.189562,-4.055743,0.052321,-8.323919,-1.538550,-3.999212,-5.050248,-8.126588,8.245884,-5.696555,-1.584660,6.688652],[3.779291,-9.289235,-9.448391,2.520161,5.123928,4.609562,-2.611484,4.267399,-0.079420,-4.599038,-9.771068,0.087167,2.512658,1.035870],[-7.696049,2.218609,-3.452691,-8.437696,-7.036353,5.120105,7.670047,-0.942508,-0.393871,7.968018,6.039409,-9.448830,-3.564680,7.139213],[2.802818,4.411853,5.541113,8.743873,-0.040344,0.986831,-1.942367,-5.873212,9.405953,5.727603,-8.135142,-0.514091,-9.373978,5.380737]],[[-6.143301,-3.808336,-5.761177,8.325826,2.004174,5.322106,-0.510349,-2.165624,9.142501,8.516732,6.592346,-9.462596,8.366098,7.994232],[9.095095,-7.930970,-8.577096,-1.143152,-7.295008,-1.891492,-5.451214,5.927417,-7.698797,8.933937,-1.823679,-6.037295,5.562821,1.756653],[4.611200,0.979760,4.025451,-7.964065,-1.377125,-3.097690,1.917532,-7.196186,-8.733124,-7.509245,8.585383,-3.538564,-4.399086,1.851534],[-5.682728,-7.360173,-5.054171,-7.097645,5.105612,0.704363,5.355604,-3.846896,-0.587977,7.623350,-2.674833,-1.074470,0.436634,2.490561]],[[8.372375,-8.419909,0.139677,-1.633946,-9.600200,-5.478246,3.599013,7.103668,8.001800,6.552192,2.755670,2.690057,5.392568,9.589399],[-3.248332,-0.901864,-6.757330,5.102393,-1.119545,5.197945,6.843782,-5.881069,4.003886,7.774698,-8.682388,-3.752852,8.525843,3.238550],[4.624982,-0.406640,-8.510235,-4.065297,1.642027,-9.793727,9.734942,-1.006285,4.416386,8.637383,-0.694337,-5.769567,-0.459831,-3.629605],[-5.821728,-9.155586,2.202299,3.292916,5.388650,-8.095493,-6.500843,-4.366567,-4.387803,-4.201212,-2.623921,-1.352412,-2.959002,5.611053]],[[2.378598,1.203832,6.512946,-4.078558,-0.977447,-4.131264,0.636908,-9.535120,-8.723689,4.218339,1.400565,-7.867724,6.123183,-1.711492],[0.893488,-0.064020,-5.559752,-4.811111,9.718743,-9.546685,6.779876,-1.449048,7.890541,-9.457065,7.900569,-5.120727,9.450953,-9.790143],[6.905566,-4.429382,-9.838458,5.092478,-0.590342,6.413700,-7.269617,9.955044,-1.519159,-8.494465,-7.861229,4.521179,-9.723946,-1.425537],[6.979175,8.521662,-9.915590,4.357377,-5.565477,8.803298,0.516811,9.645519,-6.303872,0.308595,-9.238518,-6.537641,-8.417999,-3.955715]],[[5.485269,-7.407374,-8.004150,8.638543,3.338236,3.327550,5.135668,3.849596,5.747096,7.863399,7.192375,4.150894,-9.440131,5.515717],[4.463687,-0.520586,-9.284690,9.436684,-4.030328,7.660691,-8.751775,7.514631,3.447004,-9.866319,1.721808,-7.154291,-0.366695,-1.672223],[4.183850,6.060279,-8.587572,1.405746,-9.515284,6.821205,4.990598,-7.727038,3.877821,-2.242411,-2.784696,-6.245617,-7.426975,8.485537],[-1.452724,8.948121,0.097646,-5.891913,-0.537538,-8.777780,9.086188,2.822761,9.766235,-8.908862,-9.355662,0.969097,3.758509,-6.407904]],[[8.320569,-4.907822,-4.626202,6.896132,-0.925210,9.427760,-9.312790,0.540906,3.782822,-3.469818,-0.421967,9.404291,8.854098,-9.803298],[-9.048248,-0.563625,-8.866714,0.133926,6.903862,-2.414386,2.813357,-7.645427,1.781091,4.258290,5.385900,9.911265,-4.303607,-2.031666],[-4.656793,-1.303688,5.549652,-8.104729,6.914755,-2.444090,-5.743931,-1.725172,-6.939745,3.990871,-1.295260,-0.708548,9.986602,3.249135],[2.767543,1.339331,-0.035013,-1.869771,0.847379,0.300861,7.150831,2.940249,-3.210995,2.733389,-9.984572,1.106477,0.619620,-6.071983]],[[2.583967,-5.746164,7.760028,-7.230899,1.102806,-4.813949,8.412892,8.065178,7.491994,8.613634,-8.951473,6.950785,9.770844,2.950636],[-4.305700,4.108924,6.433050,-0.782190,-9.157029,6.320407,-3.835399,-4.224015,6.311453,-8.065850,-0.963023,3.104335,-6.809988,4.429735],[8.287205,-5.962766,5.460402,0.407576,7.841124,9.531220,8.633161,5.268408,-4.746447,9.345004,2.791379,5.641418,1.218987,-4.085563],[1.512746,-8.381626,-4.137125,-2.531220,-1.362049,-7.860758,-3.576682,8.598694,-0.435660,5.064092,-9.102660,6.665784,-7.473954,2.303916]],[[1.459640,4.177428,-1.908170,9.112675,-2.160111,-1.360779,2.564762,-6.051066,-7.881793,9.268378,-3.953627,-6.924836,-2.714762,-2.002047],[-8.608331,-6.232836,7.212778,-1.345355,4.042447,-4.989715,2.063340,5.925847,4.802572,-8.596320,9.209015,5.264974,-4.235892,0.727176],[6.810912,6.724418,4.222221,1.557632,4.681465,-3.999800,1.437544,-7.906480,9.647765,7.409268,5.247023,7.397778,-2.007403,-0.766546],[-4.020953,2.560925,3.914517,9.137204,-5.507483,0.219208,-6.888730,9.461899,-3.015737,-0.890001,6.718011,7.802009,-7.453107,2.502310]]], dtype = "float64")#candidate|8|(13, 4, 14)|const|float64
uop_9 = relay.asin(const_8.astype('float64')) # shape=(13, 4, 14)
bop_11 = relay.less_equal(uop_9.astype('bool'), relay.reshape(const_8.astype('bool'), relay.shape_of(uop_9))) # shape=(13, 4, 14)
bop_14 = relay.multiply(bop_11.astype('int16'), relay.reshape(uop_9.astype('int16'), relay.shape_of(bop_11))) # shape=(13, 4, 14)
bop_17 = relay.add(bop_14.astype('uint64'), relay.reshape(bop_11.astype('uint64'), relay.shape_of(bop_14))) # shape=(13, 4, 14)
output = relay.Tuple([bop_17,])
output2 = relay.Tuple([bop_17,])
func_33 = relay.Function([], output)
mod['func_33'] = func_33
mod = relay.transform.InferType()(mod)
mutated_mod['func_33'] = func_33
mutated_mod = relay.transform.InferType()(mutated_mod)
func_33_call = mutated_mod.get_global_var('func_33')
call_34 = func_33_call()
output = call_34
func_35 = relay.Function([], output)
mutated_mod['func_35'] = func_35
mutated_mod = relay.transform.InferType()(mutated_mod)
func_33_call = mod.get_global_var('func_33')
func_35_call = mutated_mod.get_global_var('func_35')
call_42 = relay.TupleGetItem(func_33_call(), 0)
call_43 = relay.TupleGetItem(func_35_call(), 0)
output = relay.Tuple([call_42,])
output2 = relay.Tuple([call_43,])
func_57 = relay.Function([], output)
mod['func_57'] = func_57
mod = relay.transform.InferType()(mod)
output = func_57()
func_58 = relay.Function([], output)
mutated_mod['func_58'] = func_58
mutated_mod = relay.transform.InferType()(mutated_mod)
var_89 = relay.var("var_89", dtype = "float64", shape = (8, 3, 12))#candidate|89|(8, 3, 12)|var|float64
uop_90 = relay.exp(var_89.astype('float64')) # shape=(8, 3, 12)
func_57_call = mod.get_global_var('func_57')
func_58_call = mutated_mod.get_global_var('func_58')
call_93 = relay.TupleGetItem(func_57_call(), 0)
call_94 = relay.TupleGetItem(func_58_call(), 0)
uop_95 = relay.rsqrt(uop_90.astype('float32')) # shape=(8, 3, 12)
bop_99 = relay.not_equal(uop_95.astype('bool'), relay.reshape(uop_90.astype('bool'), relay.shape_of(uop_95))) # shape=(8, 3, 12)
bop_108 = relay.floor_mod(uop_90.astype('float32'), relay.reshape(var_89.astype('float32'), relay.shape_of(uop_90))) # shape=(8, 3, 12)
bop_118 = relay.multiply(uop_95.astype('int16'), relay.reshape(uop_90.astype('int16'), relay.shape_of(uop_95))) # shape=(8, 3, 12)
uop_123 = relay.tan(call_93.astype('float64')) # shape=(13, 4, 14)
uop_125 = relay.tan(call_94.astype('float64')) # shape=(13, 4, 14)
bop_131 = relay.greater_equal(uop_90.astype('bool'), relay.reshape(uop_95.astype('bool'), relay.shape_of(uop_90))) # shape=(8, 3, 12)
bop_136 = relay.less_equal(bop_108.astype('bool'), relay.reshape(uop_95.astype('bool'), relay.shape_of(bop_108))) # shape=(8, 3, 12)
uop_143 = relay.acos(var_89.astype('float32')) # shape=(8, 3, 12)
output = relay.Tuple([bop_99,bop_118,uop_123,bop_131,bop_136,uop_143,])
output2 = relay.Tuple([bop_99,bop_118,uop_125,bop_131,bop_136,uop_143,])
func_147 = relay.Function([var_89,], output)
mod['func_147'] = func_147
mod = relay.transform.InferType()(mod)
mutated_mod['func_147'] = func_147
mutated_mod = relay.transform.InferType()(mutated_mod)
var_148 = relay.var("var_148", dtype = "float64", shape = (8, 3, 12))#candidate|148|(8, 3, 12)|var|float64
func_147_call = mutated_mod.get_global_var('func_147')
call_149 = func_147_call(var_148)
output = call_149
func_150 = relay.Function([var_148], output)
mutated_mod['func_150'] = func_150
mutated_mod = relay.transform.InferType()(mutated_mod)
func_33_call = mod.get_global_var('func_33')
func_35_call = mutated_mod.get_global_var('func_35')
call_196 = relay.TupleGetItem(func_33_call(), 0)
call_197 = relay.TupleGetItem(func_35_call(), 0)
uop_198 = relay.cos(call_196.astype('float64')) # shape=(13, 4, 14)
uop_200 = relay.cos(call_197.astype('float64')) # shape=(13, 4, 14)
output = uop_198
output2 = uop_200
func_203 = relay.Function([], output)
mod['func_203'] = func_203
mod = relay.transform.InferType()(mod)
mutated_mod['func_203'] = func_203
mutated_mod = relay.transform.InferType()(mutated_mod)
func_203_call = mutated_mod.get_global_var('func_203')
call_204 = func_203_call()
output = call_204
func_205 = relay.Function([], output)
mutated_mod['func_205'] = func_205
mutated_mod = relay.transform.InferType()(mutated_mod)
func_203_call = mod.get_global_var('func_203')
func_205_call = mutated_mod.get_global_var('func_205')
call_232 = func_203_call()
call_233 = func_203_call()
func_57_call = mod.get_global_var('func_57')
func_58_call = mutated_mod.get_global_var('func_58')
call_248 = relay.TupleGetItem(func_57_call(), 0)
call_249 = relay.TupleGetItem(func_58_call(), 0)
bop_250 = relay.minimum(call_248.astype('uint64'), relay.reshape(call_232.astype('uint64'), relay.shape_of(call_248))) # shape=(13, 4, 14)
bop_253 = relay.minimum(call_249.astype('uint64'), relay.reshape(call_233.astype('uint64'), relay.shape_of(call_249))) # shape=(13, 4, 14)
output = bop_250
output2 = bop_253
func_256 = relay.Function([], output)
mod['func_256'] = func_256
mod = relay.transform.InferType()(mod)
mutated_mod['func_256'] = func_256
mutated_mod = relay.transform.InferType()(mutated_mod)
func_256_call = mutated_mod.get_global_var('func_256')
call_257 = func_256_call()
output = call_257
func_258 = relay.Function([], output)
mutated_mod['func_258'] = func_258
mutated_mod = relay.transform.InferType()(mutated_mod)
var_275 = relay.var("var_275", dtype = "float64", shape = (4, 7, 7))#candidate|275|(4, 7, 7)|var|float64
uop_276 = relay.log(var_275.astype('float64')) # shape=(4, 7, 7)
output = relay.Tuple([uop_276,])
output2 = relay.Tuple([uop_276,])
func_278 = relay.Function([var_275,], output)
mod['func_278'] = func_278
mod = relay.transform.InferType()(mod)
var_279 = relay.var("var_279", dtype = "float64", shape = (4, 7, 7))#candidate|279|(4, 7, 7)|var|float64
output = func_278(var_279)
func_280 = relay.Function([var_279], output)
mutated_mod['func_280'] = func_280
mutated_mod = relay.transform.InferType()(mutated_mod)
var_313 = relay.var("var_313", dtype = "float32", shape = (5,))#candidate|313|(5,)|var|float32
uop_314 = relay.atan(var_313.astype('float32')) # shape=(5,)
func_256_call = mod.get_global_var('func_256')
func_258_call = mutated_mod.get_global_var('func_258')
call_320 = func_256_call()
call_321 = func_256_call()
bop_322 = relay.less_equal(uop_314.astype('bool'), relay.reshape(var_313.astype('bool'), relay.shape_of(uop_314))) # shape=(5,)
uop_327 = relay.log(bop_322.astype('float64')) # shape=(5,)
func_147_call = mod.get_global_var('func_147')
func_150_call = mutated_mod.get_global_var('func_150')
var_334 = relay.var("var_334", dtype = "float64", shape = (288,))#candidate|334|(288,)|var|float64
call_333 = relay.TupleGetItem(func_147_call(relay.reshape(var_334.astype('float64'), [8, 3, 12])), 2)
call_335 = relay.TupleGetItem(func_150_call(relay.reshape(var_334.astype('float64'), [8, 3, 12])), 2)
output = relay.Tuple([call_320,uop_327,call_333,var_334,])
output2 = relay.Tuple([call_321,uop_327,call_335,var_334,])
func_336 = relay.Function([var_313,var_334,], output)
mod['func_336'] = func_336
mod = relay.transform.InferType()(mod)
var_337 = relay.var("var_337", dtype = "float32", shape = (5,))#candidate|337|(5,)|var|float32
var_338 = relay.var("var_338", dtype = "float64", shape = (288,))#candidate|338|(288,)|var|float64
output = func_336(var_337,var_338,)
func_339 = relay.Function([var_337,var_338,], output)
mutated_mod['func_339'] = func_339
mutated_mod = relay.transform.InferType()(mutated_mod)
var_378 = relay.var("var_378", dtype = "float64", shape = (16,))#candidate|378|(16,)|var|float64
var_379 = relay.var("var_379", dtype = "float64", shape = (16,))#candidate|379|(16,)|var|float64
bop_380 = relay.floor_divide(var_378.astype('float64'), relay.reshape(var_379.astype('float64'), relay.shape_of(var_378))) # shape=(16,)
output = bop_380
output2 = bop_380
func_394 = relay.Function([var_378,var_379,], output)
mod['func_394'] = func_394
mod = relay.transform.InferType()(mod)
var_395 = relay.var("var_395", dtype = "float64", shape = (16,))#candidate|395|(16,)|var|float64
var_396 = relay.var("var_396", dtype = "float64", shape = (16,))#candidate|396|(16,)|var|float64
output = func_394(var_395,var_396,)
func_397 = relay.Function([var_395,var_396,], output)
mutated_mod['func_397'] = func_397
mutated_mod = relay.transform.InferType()(mutated_mod)
const_415 = relay.const(2, dtype = "int32")#candidate|415|()|const|int32
const_416 = relay.const([[[-7,5,2,-5]],[[8,7,9,9]],[[-1,-8,-9,8]],[[-5,-4,2,7]],[[1,-1,3,-7]],[[3,1,6,-6]],[[6,-7,6,8]],[[-10,-2,-2,-2]]], dtype = "int32")#candidate|416|(8, 1, 4)|const|int32
bop_417 = relay.less(const_415.astype('bool'), const_416.astype('bool')) # shape=(8, 1, 4)
uop_429 = relay.atanh(const_416.astype('float32')) # shape=(8, 1, 4)
bop_431 = relay.bitwise_or(uop_429.astype('uint16'), const_415.astype('uint16')) # shape=(8, 1, 4)
bop_435 = relay.subtract(const_416.astype('float64'), relay.reshape(bop_417.astype('float64'), relay.shape_of(const_416))) # shape=(8, 1, 4)
uop_439 = relay.asin(bop_431.astype('float64')) # shape=(8, 1, 4)
var_442 = relay.var("var_442", dtype = "float64", shape = (8, 8, 4))#candidate|442|(8, 8, 4)|var|float64
bop_443 = relay.logical_and(uop_439.astype('bool'), var_442.astype('bool')) # shape=(8, 8, 4)
func_57_call = mod.get_global_var('func_57')
func_58_call = mutated_mod.get_global_var('func_58')
call_450 = relay.TupleGetItem(func_57_call(), 0)
call_451 = relay.TupleGetItem(func_58_call(), 0)
uop_452 = relay.sinh(uop_439.astype('float32')) # shape=(8, 1, 4)
func_394_call = mod.get_global_var('func_394')
func_397_call = mutated_mod.get_global_var('func_397')
var_459 = relay.var("var_459", dtype = "float64", shape = (1, 16))#candidate|459|(1, 16)|var|float64
call_458 = func_394_call(relay.reshape(var_459.astype('float64'), [16,]), relay.reshape(var_459.astype('float64'), [16,]), )
call_460 = func_394_call(relay.reshape(var_459.astype('float64'), [16,]), relay.reshape(var_459.astype('float64'), [16,]), )
bop_461 = relay.equal(uop_452.astype('bool'), relay.reshape(bop_435.astype('bool'), relay.shape_of(uop_452))) # shape=(8, 1, 4)
func_278_call = mod.get_global_var('func_278')
func_280_call = mutated_mod.get_global_var('func_280')
var_466 = relay.var("var_466", dtype = "float64", shape = (49, 4))#candidate|466|(49, 4)|var|float64
call_465 = relay.TupleGetItem(func_278_call(relay.reshape(var_466.astype('float64'), [4, 7, 7])), 0)
call_467 = relay.TupleGetItem(func_280_call(relay.reshape(var_466.astype('float64'), [4, 7, 7])), 0)
uop_468 = relay.sin(bop_461.astype('float32')) # shape=(8, 1, 4)
uop_473 = relay.sigmoid(uop_468.astype('float32')) # shape=(8, 1, 4)
uop_475 = relay.cos(uop_468.astype('float64')) # shape=(8, 1, 4)
output = relay.Tuple([bop_443,call_450,call_458,var_459,call_465,var_466,uop_473,uop_475,])
output2 = relay.Tuple([bop_443,call_451,call_460,var_459,call_467,var_466,uop_473,uop_475,])
func_477 = relay.Function([var_442,var_459,var_466,], output)
mod['func_477'] = func_477
mod = relay.transform.InferType()(mod)
mutated_mod['func_477'] = func_477
mutated_mod = relay.transform.InferType()(mutated_mod)
func_477_call = mutated_mod.get_global_var('func_477')
var_479 = relay.var("var_479", dtype = "float64", shape = (8, 8, 4))#candidate|479|(8, 8, 4)|var|float64
var_480 = relay.var("var_480", dtype = "float64", shape = (1, 16))#candidate|480|(1, 16)|var|float64
var_481 = relay.var("var_481", dtype = "float64", shape = (49, 4))#candidate|481|(49, 4)|var|float64
call_478 = func_477_call(var_479,var_480,var_481,)
output = call_478
func_482 = relay.Function([var_479,var_480,var_481,], output)
mutated_mod['func_482'] = func_482
mutated_mod = relay.transform.InferType()(mutated_mod)
func_256_call = mod.get_global_var('func_256')
func_258_call = mutated_mod.get_global_var('func_258')
call_504 = func_256_call()
call_505 = func_256_call()
uop_509 = relay.acos(call_504.astype('float32')) # shape=(13, 4, 14)
uop_511 = relay.acos(call_505.astype('float32')) # shape=(13, 4, 14)
var_512 = relay.var("var_512", dtype = "float32", shape = (13, 4, 14))#candidate|512|(13, 4, 14)|var|float32
bop_513 = relay.power(uop_509.astype('float64'), relay.reshape(var_512.astype('float64'), relay.shape_of(uop_509))) # shape=(13, 4, 14)
bop_516 = relay.power(uop_511.astype('float64'), relay.reshape(var_512.astype('float64'), relay.shape_of(uop_511))) # shape=(13, 4, 14)
func_278_call = mod.get_global_var('func_278')
func_280_call = mutated_mod.get_global_var('func_280')
const_521 = relay.const([5.484641,-8.379043,6.945103,7.062306,-8.696980,-6.981803,-7.240191,-5.112724,-0.300849,9.602787,-9.757546,-4.363592,-0.111025,-8.173972,1.883243,-0.521737,9.140026,-6.154149,4.844465,-0.599173,4.098920,9.696393,-6.761567,-5.715070,6.736480,4.297566,9.367674,6.187030,-6.973304,3.053895,-3.269823,-5.041437,4.082521,-6.143466,-7.449547,-5.777757,-8.138318,8.996676,-4.906987,7.254246,-9.529845,7.251259,-0.810486,6.404351,-0.597880,-7.485619,-7.598848,4.669175,3.354124,-8.577843,-7.797505,-8.016222,-2.813367,2.990946,1.322169,7.308795,6.038463,-4.459738,7.918287,-4.254149,-6.832764,0.225541,5.395642,-8.887162,-0.588744,-1.007062,-8.250143,9.258465,5.715874,3.296208,-4.135356,-0.532424,1.003777,4.270523,-5.676750,8.191778,8.795341,4.886504,5.562428,2.251250,0.046224,-0.590760,-1.208121,-3.155546,-0.392397,4.424473,-7.042676,-4.016257,-3.354752,3.016348,5.649690,9.924167,3.040584,2.858517,2.460768,-5.414680,-7.839470,-7.296113,3.856785,-0.566123,-4.832838,-1.162710,0.350949,-0.097971,-6.137748,-3.209672,-3.265618,-7.217857,8.958590,-7.621905,7.701515,0.227629,1.241575,-0.253360,-7.563294,-6.815238,-1.461225,-3.137033,2.261942,5.500367,-4.369490,6.762863,-5.004360,-9.111611,6.865635,-9.352341,7.056614,8.255731,1.996849,5.251334,-8.667589,-6.464582,-8.861313,6.350297,9.039003,-6.729008,-9.136819,6.799757,3.598536,-9.000063,-9.528154,6.707226,-3.943919,2.286551,3.811697,-0.183449,-8.003016,-6.446982,8.769628,7.425010,2.502987,-8.394953,6.045054,-3.803256,3.936928,-3.756879,4.745775,6.691661,-7.346950,6.393782,-7.323902,0.178177,-5.772545,6.957049,4.956683,-3.261394,-7.178681,8.456262,-0.496542,6.012940,-6.888827,-2.528050,1.554690,-7.688669,-0.411672,8.741426,3.537379,7.175674,8.448239,6.671665,9.714551,7.764828,-7.499101,-5.303141,-4.171827,-0.276153,3.737366,-1.383866,-2.983454,-9.030149,-2.930637,9.016365,-5.136838,1.018842,-0.544511,6.467306], dtype = "float64")#candidate|521|(196,)|const|float64
call_520 = relay.TupleGetItem(func_278_call(relay.reshape(const_521.astype('float64'), [4, 7, 7])), 0)
call_522 = relay.TupleGetItem(func_280_call(relay.reshape(const_521.astype('float64'), [4, 7, 7])), 0)
uop_525 = relay.sigmoid(uop_509.astype('float32')) # shape=(13, 4, 14)
uop_527 = relay.sigmoid(uop_511.astype('float32')) # shape=(13, 4, 14)
const_529 = relay.const([[[-6.558192,8.409128,-8.879956,-7.346445,0.266397,0.367584,-1.904753,-1.127095,7.582268,-9.196361,-2.621050,-3.836086,-5.668003,2.727245],[-7.793225,3.277743,-0.570346,5.505967,7.749009,-0.004147,2.724549,4.286830,5.669281,8.241810,9.045688,-4.030749,0.808511,8.795852],[-3.374698,7.232275,-2.407244,-9.543453,-3.146919,0.612414,7.598638,-3.882404,6.951088,9.141751,9.962438,-3.898594,-2.838833,-9.093256],[3.819204,4.061911,-6.844089,-6.465902,8.528174,9.960682,8.915898,-6.551646,2.935782,0.198286,-5.251019,0.882080,3.959431,-9.672056]],[[0.273411,2.186100,1.382353,-1.437340,-4.667005,-9.564162,5.624876,0.976752,-9.955713,-8.370103,-2.105992,8.134187,-2.506950,-4.696153],[-7.669565,8.126239,1.208705,-3.754230,6.912114,-8.611462,-6.350318,-2.552262,-6.998408,-8.875920,0.752021,-6.750167,-7.808263,-6.254097],[8.103198,-7.481975,8.287859,8.598861,5.496911,0.671511,-3.459030,-6.247408,-6.866754,5.727641,-4.511119,-6.988819,-2.934619,9.774239],[-5.168273,2.506679,-2.686954,2.184787,8.077243,-4.271894,-6.954609,6.033690,7.922001,8.362676,-8.982078,-5.083120,-7.984226,-4.783815]],[[-1.199028,5.804303,7.683907,-7.972602,7.269579,-2.899772,-2.309226,8.851683,-7.226899,3.288752,-9.927748,-1.439736,9.405271,2.402970],[8.447938,-6.814300,2.076652,-4.793402,-6.493815,-1.796862,-3.427796,-7.375602,0.341695,5.051099,9.559931,4.350642,-9.758391,-2.248473],[-0.568949,8.821345,-9.101025,0.071434,-0.047896,-6.312989,-9.094447,-6.453038,5.829701,0.326291,-8.251778,6.999401,-7.676393,7.001068],[-3.734120,-3.567066,7.558720,-3.920897,-9.258414,4.361656,0.565876,1.757821,-5.525402,-8.445648,1.469669,-9.612513,-0.889399,1.237251]],[[-7.499149,9.048069,-4.223894,5.311582,-9.842878,5.416686,-5.032548,5.248940,1.162201,4.408527,-3.402894,3.697318,-5.153473,8.603867],[2.544872,3.818103,3.582754,-5.041631,-2.980850,8.109431,3.730489,9.625870,0.667692,6.415983,-6.418825,-1.908280,-5.440860,-2.091721],[9.419058,-8.063391,-0.763577,-9.870607,-0.501559,3.857622,-3.104976,6.811779,-7.760521,1.645182,5.802566,-9.260137,-4.177859,-5.770854],[-0.114109,8.976056,-4.023229,6.721054,8.235234,-2.859666,-9.527170,-6.221131,-9.261237,2.410022,4.066610,-7.844095,8.276960,-0.311121]],[[7.789046,7.982892,7.291806,3.320666,-4.922716,-0.077663,-7.173174,7.343822,-4.902007,-9.348558,-3.779207,2.305033,-0.597486,-4.779469],[-1.072906,8.953590,-3.549619,-1.927591,2.537868,3.051154,-3.772573,9.022688,9.128746,0.336487,9.249031,-7.866205,3.556997,7.254697],[-4.522295,-6.468578,-1.774794,-8.535701,-7.282369,-7.467223,9.834609,6.519273,0.827857,-9.209209,4.741690,-0.424785,3.104294,-3.604069],[1.942114,4.541767,-5.943041,-6.783773,4.279248,8.437720,0.781002,-1.577775,2.631013,-5.234875,-3.307571,4.076041,1.455446,-3.357427]],[[3.442176,3.574124,-6.529080,-4.611233,-4.123565,2.736228,2.731314,3.143869,-9.467759,5.108416,1.646078,-7.859351,1.190508,-6.675293],[-0.181509,9.214928,1.679234,-6.171468,4.939952,-5.602908,5.937341,-1.856935,-2.113653,-2.521945,2.044123,8.187787,6.076023,-8.675680],[4.739144,6.112433,-5.024056,4.387951,-6.067949,1.582446,-0.681251,8.575532,-1.962168,7.300731,-0.661499,2.019330,0.396652,-9.072629],[2.841074,3.751306,3.411810,-4.894983,-9.569784,-3.533496,6.565162,-7.720419,5.113297,0.134487,9.989116,1.147659,-2.325800,3.484741]],[[2.427806,5.459389,5.913424,1.788537,8.735983,-8.801358,-6.903086,-8.763493,-3.801174,7.842670,1.216344,9.188128,7.838475,-1.966298],[-8.027951,-3.980281,4.200487,-8.764299,-9.216184,-9.200368,8.914941,2.670290,1.604198,3.779747,7.279899,5.231941,5.448061,6.370557],[3.555619,8.423134,-9.395707,9.099277,0.906700,-2.297017,-1.266617,1.542668,6.719208,4.538723,0.552129,-5.870915,9.796943,1.702492],[8.304308,-0.127493,-3.873873,-0.405960,8.992261,-9.283152,0.262728,-8.869871,6.990698,9.085204,0.350076,3.519697,6.803843,9.513588]],[[-9.806341,1.098894,7.571341,-5.248551,7.590436,-7.800717,9.757294,4.460686,9.036459,-3.830163,-9.775687,3.623490,-2.785059,-7.047938],[4.819420,-9.153577,-3.933676,9.859811,8.820254,7.343417,-6.903876,4.897230,-8.335935,-0.895285,4.970960,6.434609,-7.081226,3.369160],[2.340751,-5.526359,7.140200,-9.790675,-6.377055,5.739148,-0.211855,3.471869,8.420346,-9.477498,8.771552,5.249592,0.736700,-6.500923],[-8.795159,-2.492522,6.247562,-2.832662,5.858036,-1.342743,-8.536947,-2.339896,-3.640268,4.809429,-9.650604,-0.571760,-0.098925,-1.427424]],[[-3.562373,3.144369,-4.191558,-0.994114,-9.842884,-8.870762,-7.826491,8.094223,1.846223,5.978240,4.156634,2.222199,-9.179454,-9.818044],[9.557202,-3.796083,3.423506,-2.829223,7.076280,-4.887770,5.857011,7.613019,1.734859,-1.100080,-8.924121,6.596958,-8.166768,-3.455361],[-4.266776,5.035253,2.898668,7.531923,8.598817,3.312264,-7.168568,-4.800970,-9.781962,4.589356,6.295251,-4.986088,7.495843,3.914681],[-3.136292,-0.513675,-2.261431,4.564925,0.844818,9.163843,-3.969948,3.656065,-5.091607,2.251787,-3.221762,-8.421414,-3.834900,2.627586]],[[-0.762064,-9.346564,-1.570425,0.487840,-5.694362,5.185551,6.300607,4.476549,8.952545,7.512037,-2.052853,-1.152081,0.503428,-4.916317],[-7.747147,-9.614317,3.386548,4.081138,4.825283,-6.734456,2.265263,-5.089310,-0.958989,7.158061,-5.570701,1.332013,5.044210,4.586266],[4.398092,-0.991817,-7.148263,-9.838882,2.504478,3.849941,3.027890,6.960370,5.381302,3.743489,6.001846,4.504890,1.459763,-5.108525],[1.391118,-5.154517,-2.839931,-3.806881,2.860401,-5.902967,-2.604946,8.630680,2.982083,2.013666,-9.738099,1.337948,3.955973,-9.700133]],[[8.131734,9.781213,-9.846940,7.902608,-3.907748,1.568056,2.903303,6.464095,-4.144564,9.000055,8.045055,-7.793727,3.936913,9.617413],[8.366027,-8.042703,-2.288557,0.567339,0.752031,5.143938,-5.366094,4.881433,-2.586319,8.774326,1.957801,4.470424,3.868708,9.633873],[9.806296,2.108064,-6.798780,5.722946,7.408628,0.194135,-1.592780,1.777613,-3.501658,-7.276376,6.102770,6.176602,-8.640948,7.374887],[-3.746820,-7.932526,8.449052,-8.492393,6.402488,-4.019261,-3.222038,2.253480,0.443261,5.381626,5.588296,-5.831713,-5.321636,-4.508162]],[[-2.512680,-6.058071,-6.382710,-8.110079,9.177138,0.728671,2.068280,7.243640,5.788766,-1.721871,0.981475,-7.323673,7.967238,6.361718],[-2.710565,-3.173312,9.389302,-3.070671,1.408166,5.551254,8.521819,-6.224737,0.477083,3.683508,-5.132040,8.075168,9.829300,6.526499],[-4.462556,-1.924794,-6.484498,-9.174612,-3.767822,3.711305,1.872464,-3.190337,7.889682,1.008852,-0.042441,8.159184,-2.881815,8.945031],[2.394955,-9.981645,7.429579,-4.573371,0.380530,-8.087234,1.023331,-7.451767,-3.882065,-6.504962,6.676294,-6.975328,-2.470074,-3.000134]],[[-0.788831,-6.295839,-3.062738,-1.274540,-9.696692,4.584397,6.452512,2.277198,6.696171,6.931473,-2.514961,8.107192,-4.499069,4.730212],[-2.209031,3.169902,6.189374,-4.633001,9.851492,-1.390910,6.438055,2.606947,9.240899,-1.564606,-3.222091,-3.659933,6.258877,-3.978363],[-8.982337,-1.882448,-2.292167,9.929617,5.889889,1.030402,-2.804140,-6.046247,-7.608855,-1.825196,-1.833739,-5.072161,6.939360,9.314102],[4.373318,-5.698076,-9.302056,-6.271225,-0.487074,-2.237411,1.894701,-4.598735,7.399807,9.328333,3.120673,3.470596,-3.975579,-2.611601]]], dtype = "float32")#candidate|529|(13, 4, 14)|const|float32
bop_530 = relay.equal(uop_525.astype('bool'), relay.reshape(const_529.astype('bool'), relay.shape_of(uop_525))) # shape=(13, 4, 14)
bop_533 = relay.equal(uop_527.astype('bool'), relay.reshape(const_529.astype('bool'), relay.shape_of(uop_527))) # shape=(13, 4, 14)
bop_535 = relay.logical_or(bop_530.astype('bool'), relay.reshape(uop_525.astype('bool'), relay.shape_of(bop_530))) # shape=(13, 4, 14)
bop_538 = relay.logical_or(bop_533.astype('bool'), relay.reshape(uop_527.astype('bool'), relay.shape_of(bop_533))) # shape=(13, 4, 14)
func_477_call = mod.get_global_var('func_477')
func_482_call = mutated_mod.get_global_var('func_482')
const_544 = relay.const([4.793486,9.620520,-3.141204,-6.311516,-3.574632,0.357281,6.146985,9.873606,-8.208817,1.740662,-2.559668,1.654005,-8.811277,4.521489,-6.309762,-3.602177,-1.748344,-3.948224,0.252879,-5.933649,-6.455584,-8.684102,-6.525903,2.211807,6.985144,-9.277827,9.143090,-9.501126,0.005763,1.367318,-6.795419,-8.304757,7.337711,9.923453,8.473683,1.386729,9.226256,0.702772,2.160781,-3.312638,2.257872,-8.987050,-8.981414,-5.701404,-6.543362,-4.760239,8.844377,5.636893,5.605245,-0.140726,-2.045065,3.767001,7.454679,7.891609,8.044662,-9.106198,-0.676778,9.231153,0.251736,8.087305,3.127125,-5.881584,-8.402434,-4.088819,-2.161667,-2.506526,-9.015417,-6.192893,4.381692,-0.283132,3.719936,9.038333,3.503694,-6.025022,1.269725,-3.094476,6.529745,4.962890,-6.147167,-8.671318,-5.065170,7.236193,-6.988875,1.865477,1.670161,-7.304527,-3.526364,3.907546,8.738911,-1.474100,1.814712,3.965896,2.119234,-5.026460,-5.956996,-4.827539,9.950685,0.242004,1.161878,6.725329,-4.011521,7.895248,-1.538431,-1.371306,-9.695788,-1.913129,9.265896,0.475838,-2.430635,-9.925805,-3.406642,-3.631515,-1.263527,6.510979,-3.094194,2.296399,-2.220258,5.964608,7.534775,-5.835230,-5.335991,3.382405,8.659305,-6.435882,-0.784678,-9.583134,8.867803,-5.714873,8.291903,3.021727,8.320507,-9.714242,2.858311,-8.053908,-3.914745,-6.536461,6.733055,-1.945091,-8.200843,-2.546749,-5.592055,6.949266,8.169244,1.933986,0.910365,-4.785462,1.662103,0.962495,-2.791731,2.841810,-4.018576,1.356278,1.025896,-9.008822,-9.358641,-8.967030,-9.226161,-6.347127,-6.356185,-6.715537,-6.783277,-7.094295,9.592822,-5.982759,6.953776,-6.588621,-0.555173,1.417059,-4.990349,0.307401,-2.090761,8.069487,-6.544793,0.689440,8.541797,-6.921090,-3.804104,-8.266121,-3.880279,-6.511165,-8.226539,-1.478360,-0.509996,3.551358,4.034917,-4.976097,-1.064855,-5.287161,6.057775,9.372921,9.377119,6.144215,-9.098327,-9.293216,-8.977995,-8.483135,4.117971,8.981103,-6.338133,-0.865577,-3.751922,-2.772669,-4.873277,7.472488,-2.085375,8.954578,-7.584784,4.890027,-5.481632,-1.411022,-1.843483,2.055084,6.135686,-2.476183,3.427526,4.009481,3.280687,8.279594,2.228886,9.156869,1.076998,0.497925,1.178337,5.760072,-5.364978,0.047179,-3.896125,5.985492,5.496066,-6.692095,-9.108542,-7.252692,3.029863,-7.737676,-1.570391,-5.703217,-7.225641,-2.625139,-3.965275,0.941452,5.994483,-3.137230,1.205942,2.871667,5.056916,-0.846567,5.959727,9.754597,-3.776463,7.214889,9.982734,-1.076047,-9.483638,-0.458338,-6.782546,4.229053], dtype = "float64")#candidate|544|(256,)|const|float64
var_545 = relay.var("var_545", dtype = "float64", shape = (4, 4))#candidate|545|(4, 4)|var|float64
call_543 = relay.TupleGetItem(func_477_call(relay.reshape(const_544.astype('float64'), [8, 8, 4]), relay.reshape(var_545.astype('float64'), [1, 16]), relay.reshape(call_520.astype('float64'), [49, 4]), ), 7)
call_546 = relay.TupleGetItem(func_482_call(relay.reshape(const_544.astype('float64'), [8, 8, 4]), relay.reshape(var_545.astype('float64'), [1, 16]), relay.reshape(call_520.astype('float64'), [49, 4]), ), 7)
output = relay.Tuple([bop_513,call_520,const_521,bop_535,call_543,const_544,var_545,])
output2 = relay.Tuple([bop_516,call_522,const_521,bop_538,call_546,const_544,var_545,])
func_553 = relay.Function([var_512,var_545,], output)
mod['func_553'] = func_553
mod = relay.transform.InferType()(mod)
mutated_mod['func_553'] = func_553
mutated_mod = relay.transform.InferType()(mutated_mod)
func_553_call = mutated_mod.get_global_var('func_553')
var_555 = relay.var("var_555", dtype = "float32", shape = (13, 4, 14))#candidate|555|(13, 4, 14)|var|float32
var_556 = relay.var("var_556", dtype = "float64", shape = (4, 4))#candidate|556|(4, 4)|var|float64
call_554 = func_553_call(var_555,var_556,)
output = call_554
func_557 = relay.Function([var_555,var_556,], output)
mutated_mod['func_557'] = func_557
mutated_mod = relay.transform.InferType()(mutated_mod)
var_571 = relay.var("var_571", dtype = "float64", shape = (8,))#candidate|571|(8,)|var|float64
const_572 = relay.const([8.151621,-9.411490,-5.977137,2.324232,-0.660781,-6.009687,7.505788,-0.291199], dtype = "float64")#candidate|572|(8,)|const|float64
bop_573 = relay.mod(var_571.astype('float64'), relay.reshape(const_572.astype('float64'), relay.shape_of(var_571))) # shape=(8,)
output = bop_573
output2 = bop_573
func_576 = relay.Function([var_571,], output)
mod['func_576'] = func_576
mod = relay.transform.InferType()(mod)
mutated_mod['func_576'] = func_576
mutated_mod = relay.transform.InferType()(mutated_mod)
var_577 = relay.var("var_577", dtype = "float64", shape = (8,))#candidate|577|(8,)|var|float64
func_576_call = mutated_mod.get_global_var('func_576')
call_578 = func_576_call(var_577)
output = call_578
func_579 = relay.Function([var_577], output)
mutated_mod['func_579'] = func_579
mutated_mod = relay.transform.InferType()(mutated_mod)
func_57_call = mod.get_global_var('func_57')
func_58_call = mutated_mod.get_global_var('func_58')
call_589 = relay.TupleGetItem(func_57_call(), 0)
call_590 = relay.TupleGetItem(func_58_call(), 0)
func_553_call = mod.get_global_var('func_553')
func_557_call = mutated_mod.get_global_var('func_557')
var_596 = relay.var("var_596", dtype = "float64", shape = (16,))#candidate|596|(16,)|var|float64
call_595 = relay.TupleGetItem(func_553_call(relay.reshape(call_589.astype('float32'), [13, 4, 14]), relay.reshape(var_596.astype('float64'), [4, 4]), ), 6)
call_597 = relay.TupleGetItem(func_557_call(relay.reshape(call_589.astype('float32'), [13, 4, 14]), relay.reshape(var_596.astype('float64'), [4, 4]), ), 6)
func_256_call = mod.get_global_var('func_256')
func_258_call = mutated_mod.get_global_var('func_258')
call_600 = func_256_call()
call_601 = func_256_call()
func_147_call = mod.get_global_var('func_147')
func_150_call = mutated_mod.get_global_var('func_150')
const_607 = relay.const([-6.403982,-7.017253,-2.927216,-2.073481,5.839107,8.497829,-5.190877,-6.212622,0.725752,-6.150307,-8.462373,5.534822,-3.416818,-9.517703,1.612786,-6.000187,9.502938,-9.338763,-6.580207,-3.363197,3.632540,5.282063,-0.140912,-8.319167,6.468933,-9.022833,-1.736962,8.200583,9.366186,-3.633184,-9.781467,6.469798,-8.337776,2.420002,-4.171317,-4.177669,-8.826647,4.679695,9.672207,-0.941957,-8.926605,-6.113534,6.327986,-5.015234,7.082183,6.879439,3.911671,1.441289,7.950571,-3.506692,3.278785,1.080804,8.997071,-0.130923,-8.735234,2.451859,7.573072,-8.683694,0.687047,-4.931850,5.959712,-1.862722,-6.315317,-4.483994,2.065447,2.454742,9.601979,-0.604420,6.791766,5.252347,2.505634,9.686691,-9.402121,6.278196,-7.386431,-2.582545,-8.708307,-2.980714,0.622521,-2.058862,4.601091,2.085902,-2.650946,9.437545,-5.946608,-2.718975,2.467341,4.513270,9.425124,-4.576706,-9.798956,5.879448,0.489846,5.374557,5.293285,7.713707,4.921504,8.946066,-8.505358,5.021842,-5.048605,6.951683,4.044940,3.675465,4.751916,-0.715267,7.187252,-4.969258,1.300194,6.925719,9.559431,-1.946744,3.277855,9.683557,-6.869265,-6.372560,-1.254452,3.282855,-6.284496,-3.416871,-1.875542,1.661877,-2.200271,-0.510558,3.577782,-4.475896,3.408737,2.532714,3.880749,-3.847413,-8.563481,-8.867244,-6.490733,-1.337690,-9.336286,5.729830,-6.622519,-1.734310,-2.097806,-3.995852,-3.313642,6.174408,0.345428,-5.012475,1.670409,9.171826,-2.419529,-6.583597,0.807371,2.316860,3.899265,-3.162478,-4.167265,-3.469345,4.010906,-5.823089,-7.706495,0.983462,7.393382,-3.071311,8.160383,-5.641406,6.620270,-8.071391,1.069332,-1.094844,-9.639564,-0.153123,-7.512101,-4.782926,-8.513839,0.007607,-7.437898,-4.776316,6.579503,-8.454239,-8.514287,-9.781041,1.049101,-0.560012,-2.158527,4.244676,4.952598,6.902495,-4.049056,-7.870258,9.862002,0.069029,-9.340898,6.796777,-8.837569,-8.730541,-6.216875,-9.902675,-3.210435,-6.942119,-0.861760,8.560813,-9.854316,3.419756,-8.017219,3.185544,0.376531,8.857072,-3.511578,6.711828,-4.179681,-8.339601,-7.813937,-7.323277,7.338592,-6.235056,-0.299768,-6.536533,-7.643874,-6.023842,0.408988,-1.763512,-1.503492,-3.264927,-0.933458,-7.941670,-4.699116,1.176678,4.483943,8.548484,7.359343,-7.623824,2.648387,-7.914784,-7.996586,3.417852,-8.110468,7.020563,2.235461,4.215304,9.092448,9.827803,-9.037151,2.334329,-7.568636,4.814556,-3.404550,-5.416764,-1.633278,7.241897,6.536330,-3.135810,2.370825,-8.587344,8.036468,-2.800390,7.079861,-7.043586,7.417359,-9.066707,-7.673070,4.738844,1.799061,6.334556,-9.617457,3.795767,3.361285,5.043478,5.258212,2.809449,7.448848,3.984605,2.484831,6.936452,3.987691,2.848065,9.243087,-1.111807,-7.209126,-1.521642,4.853173,-6.324587,8.144958,9.401898,7.664630,0.426355,-7.874015,-8.794448,7.163463,-1.899154,4.158696,-4.641358], dtype = "float64")#candidate|607|(288,)|const|float64
call_606 = relay.TupleGetItem(func_147_call(relay.reshape(const_607.astype('float64'), [8, 3, 12])), 1)
call_608 = relay.TupleGetItem(func_150_call(relay.reshape(const_607.astype('float64'), [8, 3, 12])), 1)
func_256_call = mod.get_global_var('func_256')
func_258_call = mutated_mod.get_global_var('func_258')
call_611 = func_256_call()
call_612 = func_256_call()
bop_615 = relay.less(call_600.astype('bool'), relay.reshape(call_611.astype('bool'), relay.shape_of(call_600))) # shape=(13, 4, 14)
bop_618 = relay.less(call_601.astype('bool'), relay.reshape(call_612.astype('bool'), relay.shape_of(call_601))) # shape=(13, 4, 14)
func_477_call = mod.get_global_var('func_477')
func_482_call = mutated_mod.get_global_var('func_482')
var_636 = relay.var("var_636", dtype = "float64", shape = (16, 16))#candidate|636|(16, 16)|var|float64
const_637 = relay.const([-8.814403,0.220187,-7.499213,-3.784156,2.886520,-1.900433,-5.419686,7.030492,1.047030,-8.938939,2.517173,2.193985,5.598860,7.546900,-9.171454,-2.924965,5.605351,-0.768844,-9.158830,-2.955201,-4.446934,-5.459427,-5.373446,4.777257,-4.461107,7.050789,-5.146845,3.352892,-9.785734,-1.556418,1.899635,6.961670,-2.885240,-0.644493,-4.639854,4.327628,8.304144,4.696738,4.644908,5.496435,-6.982781,9.882349,1.955244,7.542823,-0.674790,-3.768665,-6.658537,-9.433903,-6.222984,-3.954972,7.068834,1.471185,7.871793,-6.655034,1.727379,-5.248533,-4.743488,-5.697904,-4.603267,7.315588,-1.559940,-2.094322,1.156473,1.523006,7.314149,-7.951425,7.659953,8.199608,-4.079512,-4.269226,9.055533,-3.412321,-4.376031,8.682689,-5.441919,8.545786,8.352709,2.524686,-2.479420,-6.598981,-8.271528,-3.850350,-4.666402,2.888570,2.479985,7.516161,-4.997438,5.841701,-4.890160,-4.520998,5.114858,3.731938,4.103836,-4.787941,-5.429844,-8.999921,5.453317,-9.937106,-5.597483,9.342709,5.514734,9.276136,-2.511509,0.438815,1.660631,5.577472,9.200468,1.000969,2.528324,9.995337,-4.896159,9.871032,-9.499819,-2.143418,4.734299,0.815915,-9.258914,-2.582285,2.720450,9.432567,6.624405,8.818741,-5.574369,-0.915435,-4.495726,9.072519,4.050333,3.392019,-8.574630,-2.061831,4.942298,7.993344,-1.170669,-9.748739,6.286837,9.786399,-7.428770,6.589746,7.480435,-4.452432,8.345342,3.859143,-1.243565,0.176766,-7.279221,-7.707846,3.887526,5.252055,-1.757746,2.583390,3.741158,-9.643664,0.602869,-5.875516,3.679401,0.931773,-4.744605,3.252538,8.398672,-8.173202,5.238550,9.951001,-0.475083,-8.884708,-2.148695,-5.938310,-2.861120,1.096864,-4.411181,9.215143,-6.065106,0.359595,5.014446,-6.571859,4.818942,-3.627281,6.400699,0.631399,-8.472141,-2.025122,5.081385,-7.507938,-7.483109,5.253782,-0.562447,-1.178031,2.469993,0.785002,5.494126,4.198372,-0.310910,2.947804,5.118020,4.704055,-8.717709,-8.310128], dtype = "float64")#candidate|637|(196,)|const|float64
call_635 = relay.TupleGetItem(func_477_call(relay.reshape(var_636.astype('float64'), [8, 8, 4]), relay.reshape(var_596.astype('float64'), [1, 16]), relay.reshape(const_637.astype('float64'), [49, 4]), ), 7)
call_638 = relay.TupleGetItem(func_482_call(relay.reshape(var_636.astype('float64'), [8, 8, 4]), relay.reshape(var_596.astype('float64'), [1, 16]), relay.reshape(const_637.astype('float64'), [49, 4]), ), 7)
func_147_call = mod.get_global_var('func_147')
func_150_call = mutated_mod.get_global_var('func_150')
call_639 = relay.TupleGetItem(func_147_call(relay.reshape(call_606.astype('float64'), [8, 3, 12])), 5)
call_640 = relay.TupleGetItem(func_150_call(relay.reshape(call_606.astype('float64'), [8, 3, 12])), 5)
bop_644 = relay.less_equal(call_600.astype('bool'), relay.reshape(bop_615.astype('bool'), relay.shape_of(call_600))) # shape=(13, 4, 14)
bop_647 = relay.less_equal(call_601.astype('bool'), relay.reshape(bop_618.astype('bool'), relay.shape_of(call_601))) # shape=(13, 4, 14)
uop_649 = relay.log2(call_595.astype('float64')) # shape=(4, 4)
uop_651 = relay.log2(call_597.astype('float64')) # shape=(4, 4)
func_57_call = mod.get_global_var('func_57')
func_58_call = mutated_mod.get_global_var('func_58')
call_662 = relay.TupleGetItem(func_57_call(), 0)
call_663 = relay.TupleGetItem(func_58_call(), 0)
bop_664 = relay.logical_xor(var_636.astype('int32'), var_596.astype('int32')) # shape=(16, 16)
var_667 = relay.var("var_667", dtype = "float64", shape = (4, 4))#candidate|667|(4, 4)|var|float64
bop_668 = relay.power(uop_649.astype('float32'), relay.reshape(var_667.astype('float32'), relay.shape_of(uop_649))) # shape=(4, 4)
bop_671 = relay.power(uop_651.astype('float32'), relay.reshape(var_667.astype('float32'), relay.shape_of(uop_651))) # shape=(4, 4)
bop_677 = relay.greater_equal(bop_668.astype('bool'), relay.reshape(var_596.astype('bool'), relay.shape_of(bop_668))) # shape=(4, 4)
bop_680 = relay.greater_equal(bop_671.astype('bool'), relay.reshape(var_596.astype('bool'), relay.shape_of(bop_671))) # shape=(4, 4)
func_147_call = mod.get_global_var('func_147')
func_150_call = mutated_mod.get_global_var('func_150')
call_681 = relay.TupleGetItem(func_147_call(relay.reshape(const_607.astype('float64'), [8, 3, 12])), 2)
call_682 = relay.TupleGetItem(func_150_call(relay.reshape(const_607.astype('float64'), [8, 3, 12])), 2)
bop_686 = relay.equal(bop_677.astype('bool'), relay.reshape(var_596.astype('bool'), relay.shape_of(bop_677))) # shape=(4, 4)
bop_689 = relay.equal(bop_680.astype('bool'), relay.reshape(var_596.astype('bool'), relay.shape_of(bop_680))) # shape=(4, 4)
uop_691 = relay.rsqrt(uop_649.astype('float64')) # shape=(4, 4)
uop_693 = relay.rsqrt(uop_651.astype('float64')) # shape=(4, 4)
output = relay.Tuple([call_589,call_606,const_607,call_635,const_637,call_639,bop_644,call_662,bop_664,call_681,bop_686,uop_691,])
output2 = relay.Tuple([call_590,call_608,const_607,call_638,const_637,call_640,bop_647,call_663,bop_664,call_682,bop_689,uop_693,])
func_699 = relay.Function([var_596,var_636,var_667,], output)
mod['func_699'] = func_699
mod = relay.transform.InferType()(mod)
mutated_mod['func_699'] = func_699
mutated_mod = relay.transform.InferType()(mutated_mod)
func_699_call = mutated_mod.get_global_var('func_699')
var_701 = relay.var("var_701", dtype = "float64", shape = (16,))#candidate|701|(16,)|var|float64
var_702 = relay.var("var_702", dtype = "float64", shape = (16, 16))#candidate|702|(16, 16)|var|float64
var_703 = relay.var("var_703", dtype = "float64", shape = (4, 4))#candidate|703|(4, 4)|var|float64
call_700 = func_699_call(var_701,var_702,var_703,)
output = call_700
func_704 = relay.Function([var_701,var_702,var_703,], output)
mutated_mod['func_704'] = func_704
mutated_mod = relay.transform.InferType()(mutated_mod)
func_203_call = mod.get_global_var('func_203')
func_205_call = mutated_mod.get_global_var('func_205')
call_716 = func_203_call()
call_717 = func_203_call()
output = call_716
output2 = call_717
func_719 = relay.Function([], output)
mod['func_719'] = func_719
mod = relay.transform.InferType()(mod)
output = func_719()
func_720 = relay.Function([], output)
mutated_mod['func_720'] = func_720
mutated_mod = relay.transform.InferType()(mutated_mod)
var_762 = relay.var("var_762", dtype = "uint16", shape = (3, 8, 3))#candidate|762|(3, 8, 3)|var|uint16
var_763 = relay.var("var_763", dtype = "uint16", shape = (3, 8, 3))#candidate|763|(3, 8, 3)|var|uint16
bop_764 = relay.right_shift(var_762.astype('uint16'), relay.reshape(var_763.astype('uint16'), relay.shape_of(var_762))) # shape=(3, 8, 3)
bop_767 = relay.bitwise_xor(bop_764.astype('int8'), relay.reshape(var_762.astype('int8'), relay.shape_of(bop_764))) # shape=(3, 8, 3)
output = bop_767
output2 = bop_767
func_770 = relay.Function([var_762,var_763,], output)
mod['func_770'] = func_770
mod = relay.transform.InferType()(mod)
mutated_mod['func_770'] = func_770
mutated_mod = relay.transform.InferType()(mutated_mod)
func_770_call = mutated_mod.get_global_var('func_770')
var_772 = relay.var("var_772", dtype = "uint16", shape = (3, 8, 3))#candidate|772|(3, 8, 3)|var|uint16
var_773 = relay.var("var_773", dtype = "uint16", shape = (3, 8, 3))#candidate|773|(3, 8, 3)|var|uint16
call_771 = func_770_call(var_772,var_773,)
output = call_771
func_774 = relay.Function([var_772,var_773,], output)
mutated_mod['func_774'] = func_774
mutated_mod = relay.transform.InferType()(mutated_mod)
func_256_call = mod.get_global_var('func_256')
func_258_call = mutated_mod.get_global_var('func_258')
call_818 = func_256_call()
call_819 = func_256_call()
output = relay.Tuple([call_818,])
output2 = relay.Tuple([call_819,])
func_822 = relay.Function([], output)
mod['func_822'] = func_822
mod = relay.transform.InferType()(mod)
mutated_mod['func_822'] = func_822
mutated_mod = relay.transform.InferType()(mutated_mod)
func_822_call = mutated_mod.get_global_var('func_822')
call_823 = func_822_call()
output = call_823
func_824 = relay.Function([], output)
mutated_mod['func_824'] = func_824
mutated_mod = relay.transform.InferType()(mutated_mod)
const_833 = relay.const([2.117903,-7.604935,6.733057], dtype = "float64")#candidate|833|(3,)|const|float64
uop_834 = relay.asin(const_833.astype('float64')) # shape=(3,)
output = relay.Tuple([uop_834,])
output2 = relay.Tuple([uop_834,])
func_847 = relay.Function([], output)
mod['func_847'] = func_847
mod = relay.transform.InferType()(mod)
mutated_mod['func_847'] = func_847
mutated_mod = relay.transform.InferType()(mutated_mod)
func_847_call = mutated_mod.get_global_var('func_847')
call_848 = func_847_call()
output = call_848
func_849 = relay.Function([], output)
mutated_mod['func_849'] = func_849
mutated_mod = relay.transform.InferType()(mutated_mod)
var_879 = relay.var("var_879", dtype = "float64", shape = (11,))#candidate|879|(11,)|var|float64
var_880 = relay.var("var_880", dtype = "float64", shape = (11,))#candidate|880|(11,)|var|float64
bop_881 = relay.mod(var_879.astype('float64'), relay.reshape(var_880.astype('float64'), relay.shape_of(var_879))) # shape=(11,)
func_553_call = mod.get_global_var('func_553')
func_557_call = mutated_mod.get_global_var('func_557')
var_911 = relay.var("var_911", dtype = "float32", shape = (728,))#candidate|911|(728,)|var|float32
const_912 = relay.const([-8.414008,4.408915,-4.170838,9.212367,0.224105,-7.956445,5.960804,-5.295633,-9.404750,-4.996642,-2.853468,-3.171734,1.177424,-3.650324,-2.395064,6.282089], dtype = "float64")#candidate|912|(16,)|const|float64
call_910 = relay.TupleGetItem(func_553_call(relay.reshape(var_911.astype('float32'), [13, 4, 14]), relay.reshape(const_912.astype('float64'), [4, 4]), ), 2)
call_913 = relay.TupleGetItem(func_557_call(relay.reshape(var_911.astype('float32'), [13, 4, 14]), relay.reshape(const_912.astype('float64'), [4, 4]), ), 2)
output = relay.Tuple([bop_881,call_910,var_911,const_912,])
output2 = relay.Tuple([bop_881,call_913,var_911,const_912,])
func_931 = relay.Function([var_879,var_880,var_911,], output)
mod['func_931'] = func_931
mod = relay.transform.InferType()(mod)
var_932 = relay.var("var_932", dtype = "float64", shape = (11,))#candidate|932|(11,)|var|float64
var_933 = relay.var("var_933", dtype = "float64", shape = (11,))#candidate|933|(11,)|var|float64
var_934 = relay.var("var_934", dtype = "float32", shape = (728,))#candidate|934|(728,)|var|float32
output = func_931(var_932,var_933,var_934,)
func_935 = relay.Function([var_932,var_933,var_934,], output)
mutated_mod['func_935'] = func_935
mutated_mod = relay.transform.InferType()(mutated_mod)
func_822_call = mod.get_global_var('func_822')
func_824_call = mutated_mod.get_global_var('func_824')
call_949 = relay.TupleGetItem(func_822_call(), 0)
call_950 = relay.TupleGetItem(func_824_call(), 0)
func_394_call = mod.get_global_var('func_394')
func_397_call = mutated_mod.get_global_var('func_397')
var_958 = relay.var("var_958", dtype = "float64", shape = (16,))#candidate|958|(16,)|var|float64
call_957 = func_394_call(relay.reshape(var_958.astype('float64'), [16,]), relay.reshape(var_958.astype('float64'), [16,]), )
call_959 = func_394_call(relay.reshape(var_958.astype('float64'), [16,]), relay.reshape(var_958.astype('float64'), [16,]), )
uop_960 = relay.asinh(var_958.astype('float64')) # shape=(16,)
output = relay.Tuple([call_949,call_957,uop_960,])
output2 = relay.Tuple([call_950,call_959,uop_960,])
func_964 = relay.Function([var_958,], output)
mod['func_964'] = func_964
mod = relay.transform.InferType()(mod)
var_965 = relay.var("var_965", dtype = "float64", shape = (16,))#candidate|965|(16,)|var|float64
output = func_964(var_965)
func_966 = relay.Function([var_965], output)
mutated_mod['func_966'] = func_966
mutated_mod = relay.transform.InferType()(mutated_mod)
var_982 = relay.var("var_982", dtype = "uint8", shape = (9, 3, 13))#candidate|982|(9, 3, 13)|var|uint8
var_983 = relay.var("var_983", dtype = "uint8", shape = (9, 3, 13))#candidate|983|(9, 3, 13)|var|uint8
bop_984 = relay.right_shift(var_982.astype('uint8'), relay.reshape(var_983.astype('uint8'), relay.shape_of(var_982))) # shape=(9, 3, 13)
func_847_call = mod.get_global_var('func_847')
func_849_call = mutated_mod.get_global_var('func_849')
call_987 = relay.TupleGetItem(func_847_call(), 0)
call_988 = relay.TupleGetItem(func_849_call(), 0)
bop_997 = relay.mod(bop_984.astype('float64'), relay.reshape(var_982.astype('float64'), relay.shape_of(bop_984))) # shape=(9, 3, 13)
output = relay.Tuple([call_987,bop_997,])
output2 = relay.Tuple([call_988,bop_997,])
func_1000 = relay.Function([var_982,var_983,], output)
mod['func_1000'] = func_1000
mod = relay.transform.InferType()(mod)
var_1001 = relay.var("var_1001", dtype = "uint8", shape = (9, 3, 13))#candidate|1001|(9, 3, 13)|var|uint8
var_1002 = relay.var("var_1002", dtype = "uint8", shape = (9, 3, 13))#candidate|1002|(9, 3, 13)|var|uint8
output = func_1000(var_1001,var_1002,)
func_1003 = relay.Function([var_1001,var_1002,], output)
mutated_mod['func_1003'] = func_1003
mutated_mod = relay.transform.InferType()(mutated_mod)
func_256_call = mod.get_global_var('func_256')
func_258_call = mutated_mod.get_global_var('func_258')
call_1016 = func_256_call()
call_1017 = func_256_call()
var_1035 = relay.var("var_1035", dtype = "uint64", shape = (13, 4, 14))#candidate|1035|(13, 4, 14)|var|uint64
bop_1036 = relay.greater(call_1016.astype('bool'), relay.reshape(var_1035.astype('bool'), relay.shape_of(call_1016))) # shape=(13, 4, 14)
bop_1039 = relay.greater(call_1017.astype('bool'), relay.reshape(var_1035.astype('bool'), relay.shape_of(call_1017))) # shape=(13, 4, 14)
bop_1040 = relay.floor_mod(var_1035.astype('float64'), relay.reshape(bop_1036.astype('float64'), relay.shape_of(var_1035))) # shape=(13, 4, 14)
bop_1043 = relay.floor_mod(var_1035.astype('float64'), relay.reshape(bop_1039.astype('float64'), relay.shape_of(var_1035))) # shape=(13, 4, 14)
uop_1050 = relay.atan(var_1035.astype('float32')) # shape=(13, 4, 14)
uop_1056 = relay.cosh(uop_1050.astype('float64')) # shape=(13, 4, 14)
const_1059 = relay.const([[[9.593498,7.885776,-0.277662,-2.671382,3.342727,-0.342268,-4.831407,-6.179504,1.487337,4.388320,9.692190,-2.697940,0.751485,2.154596],[-4.113442,-8.688950,-1.469990,-0.290759,3.804936,4.615903,2.934839,-5.014775,-0.965844,1.394327,-6.679360,-3.414103,-6.290321,1.746665],[1.158535,9.789582,-2.893891,-0.578020,6.607161,7.212841,3.838711,1.432581,-4.470898,5.935039,-6.245865,5.487402,4.073544,-6.616257],[-9.820078,-6.717786,-1.702513,6.501522,7.429436,8.439258,6.798604,1.499592,-7.914333,0.622065,-0.401273,3.761164,-4.984535,3.057599]],[[-0.371284,6.416457,-9.958397,8.517567,8.418144,0.936878,-0.613872,2.800535,7.473671,-0.502820,-3.462428,4.597553,-8.094065,4.884073],[8.308281,4.924276,7.933090,-1.508330,-8.187952,-1.624245,-5.722344,-8.385815,4.852855,-0.979428,-4.298360,-9.433503,3.624525,-8.924492],[-8.717068,-6.363899,-0.957987,2.960449,-5.369713,5.461381,5.804792,-4.783093,1.363408,-8.829905,-6.323798,-2.592311,-1.080697,9.473721],[-9.272566,5.663215,-8.216380,-1.565906,8.472564,-5.593140,1.094386,-4.193512,0.595839,-9.640098,8.193726,4.773893,-4.799959,7.917289]],[[-4.423884,-0.514833,-5.311243,7.346833,5.261724,6.230081,-9.017185,-3.962175,-0.937475,-1.190509,9.636433,-5.888137,-2.293671,-8.450484],[0.979227,4.872937,6.358345,-8.001544,1.978880,-6.039282,3.488128,-3.927826,9.874753,7.601200,5.966991,5.388850,7.337367,-6.619843],[-6.409904,-3.093300,-7.441507,5.237249,9.701346,8.639124,-7.282744,2.124635,3.271793,8.080165,-4.920186,-1.762461,-6.914286,-0.965157],[-2.092981,7.329082,5.333019,-2.535317,9.985875,9.617924,-8.153523,-2.972860,-3.588418,-7.861637,7.307839,-5.020245,2.686455,3.100408]],[[6.607236,4.502673,-9.862696,-5.766113,-0.183512,1.194332,-2.984010,-3.619228,6.583466,8.113519,-7.837507,-0.189969,0.465015,0.670753],[4.329721,4.514963,-3.387839,-9.768354,1.992873,-1.925050,-3.423666,-5.254591,6.706189,8.728374,3.082222,-6.539425,-6.404684,7.937873],[-6.970303,-2.399872,5.628558,-9.684327,-2.785297,1.453374,9.850987,5.343201,2.951869,-5.774072,-7.746232,-5.116469,8.424033,3.144474],[8.444679,2.625940,5.233571,1.584240,3.804353,-0.632752,0.150004,-6.625186,-8.152339,-5.021569,2.373680,-0.987450,-7.199885,1.265613]],[[6.584100,0.148777,3.265327,-5.140893,3.464225,0.198954,1.898211,-9.045880,7.878728,1.822288,3.290703,-0.912475,9.362104,-3.939922],[4.827637,2.517518,9.200476,1.054797,1.104605,3.897249,9.822795,-0.348339,6.906517,6.795979,6.170394,-2.727728,-1.410526,9.718615],[2.783162,3.978551,2.904867,9.309521,-2.009689,2.249305,7.430048,-7.380551,7.091092,7.973520,0.517108,-1.518852,-1.364200,6.763865],[2.035215,-0.524914,2.294908,5.444698,-0.251208,8.055072,8.538396,-9.787747,3.652808,2.867992,4.836692,1.447956,-1.432378,2.420508]],[[-1.363075,5.769061,0.553273,-9.639614,-2.528609,3.530392,1.225240,8.770813,1.893642,6.096610,-5.099146,-7.432331,1.083528,-7.926915],[7.033273,-7.573434,6.030482,5.415595,6.887413,5.282596,1.923336,-1.645852,7.564276,8.545713,-8.328556,0.377212,7.528390,-7.737835],[-3.976991,-7.199431,3.733939,5.630321,6.673207,9.936929,6.989533,-8.910378,-4.479012,9.130353,-1.739103,-1.220096,1.772861,1.012234],[2.913666,6.875156,-3.917889,9.543894,7.464576,-4.272740,1.615544,5.760974,-7.455439,0.441451,0.165301,-7.519828,8.827476,-0.372505]],[[4.223956,-2.797285,4.486374,-9.462608,4.657003,3.334850,-0.477171,9.864807,-0.098567,-1.721797,-8.379296,2.551400,-1.449172,1.133438],[-8.596378,-8.330702,1.162855,8.434133,0.200465,7.702036,5.995036,6.291792,-1.414852,-9.887809,3.147729,-7.335545,-9.987855,5.920820],[8.943242,9.488485,-4.622132,5.630197,-1.271821,5.947883,-2.462183,-3.496546,2.466775,-7.027077,3.075699,-9.502986,1.595018,-9.919448],[-5.829843,1.138278,8.611335,-0.064950,-5.088154,3.612691,-5.895990,-6.111295,3.802533,-6.687162,-8.784205,3.344011,9.840914,3.487269]],[[-2.762032,7.141858,1.655642,-4.451759,3.260371,2.197571,4.353550,-4.270527,3.674881,-5.318779,3.776338,3.217080,1.188153,6.542262],[8.023991,-8.431450,6.110399,-2.304797,-6.582607,2.923660,3.205571,1.466273,7.290394,-0.204340,0.707064,-0.438385,-0.573824,-2.025622],[-7.080881,-4.117568,-5.004287,2.787784,-0.887006,2.046132,-0.945248,-9.269518,7.876271,-7.113852,9.368360,5.159806,-8.059230,-5.222847],[9.095708,-5.106944,-3.650356,7.544251,7.733236,-3.818187,9.170129,-6.991895,-4.780342,5.691936,6.590972,6.684614,9.949616,5.192331]],[[-8.078746,-9.349217,-0.817476,2.904998,3.892641,-0.326126,1.781528,0.775262,-8.187208,-2.953473,-3.077629,-1.321528,-1.157442,0.065478],[-7.649299,3.110776,-7.122808,-6.489759,-3.320258,5.446965,9.004378,4.898848,3.779781,4.323975,-8.166046,-0.523186,2.361055,-2.172430],[-5.723958,5.842495,-7.303746,4.440720,-1.370880,-0.198488,0.565787,6.227624,1.648765,7.628688,2.635855,-1.903696,6.247080,-2.144213],[5.020860,-3.884228,-2.134826,-2.847115,-0.705902,7.444135,2.606763,1.104862,-1.498960,7.939052,1.358827,-1.374383,6.555364,9.296696]],[[4.426681,-2.972240,-7.819208,4.607088,-8.500914,-4.523819,9.878356,-1.203440,3.388064,-3.249531,-1.618553,2.494949,-7.962775,-7.786103],[-7.406412,-9.504123,0.414905,-6.864253,5.951558,2.154132,0.284743,-0.784502,6.496818,8.986410,4.595193,-3.624939,-4.218099,3.256243],[1.842090,-0.204139,7.388852,-2.701100,3.274921,7.309814,-9.641441,8.874810,-1.567678,-8.449384,-0.186406,-1.699033,6.817242,6.439486],[-8.615015,2.509932,-2.234245,9.043289,-3.435533,-0.341666,-0.327860,9.808721,-0.524531,-6.423092,-2.578180,6.466285,-7.722836,-1.659791]],[[-8.799334,3.101172,1.659990,7.931923,6.676141,7.338583,-1.885226,2.179313,6.205051,3.656171,5.485677,-6.217195,-8.701420,-0.438833],[8.401331,0.054150,-4.475439,-2.755333,8.818540,9.331802,-7.506800,-7.315391,2.237408,5.448823,-9.904730,-1.491522,-8.082766,-9.078081],[-5.607602,-8.559965,8.399570,-1.374787,-0.686282,7.321321,-8.198229,-9.830587,-1.083843,4.315895,6.551252,-7.226584,5.465755,2.774923],[-6.559252,-7.332425,4.404383,-0.033481,-0.198335,-2.315470,-5.187370,-2.287235,1.231588,7.273789,-1.675740,7.346857,-7.380271,2.833596]],[[-5.122864,1.604172,-1.666496,-8.307102,-4.456944,5.667536,7.975834,-8.342721,1.749399,-7.486610,8.477807,-2.137046,-7.813349,0.058783],[-2.711965,-6.656561,-2.847078,8.019164,6.321604,-7.969196,-4.423484,8.970301,3.488451,3.045570,-3.649784,0.360457,-4.193127,1.441528],[2.850651,4.340274,-1.893651,5.743852,7.380125,1.003763,-1.050218,7.152186,0.734838,-6.692955,-6.803938,-4.966429,8.500683,-1.590708],[4.304901,-6.323688,0.307130,-7.519648,5.329928,-2.474822,-9.562975,3.165888,9.821057,-3.174714,0.058341,8.473779,-5.153062,6.145997]],[[-8.242768,9.861254,7.373603,-5.759887,6.311721,-8.395396,-8.917343,-2.983922,8.328519,8.425872,-1.617210,7.043166,-3.428086,5.321700],[-2.410031,-4.057994,-1.116201,6.313119,0.865152,-0.353993,-5.176985,8.648165,5.515992,-4.201216,-4.211185,0.720307,7.820247,-7.120011],[-0.792484,-3.598915,-3.518252,4.208588,3.172320,1.221414,-1.226878,4.654422,-5.700163,-5.633004,-0.039224,-2.469935,-8.474052,5.399263],[7.112052,-7.398967,0.266407,-4.850396,5.935887,0.110020,-1.748092,-8.353054,-2.422692,-2.411310,-0.948489,6.774957,1.952055,7.636412]]], dtype = "float64")#candidate|1059|(13, 4, 14)|const|float64
bop_1060 = relay.bitwise_and(uop_1056.astype('int16'), relay.reshape(const_1059.astype('int16'), relay.shape_of(uop_1056))) # shape=(13, 4, 14)
bop_1063 = relay.left_shift(uop_1050.astype('int64'), relay.reshape(bop_1060.astype('int64'), relay.shape_of(uop_1050))) # shape=(13, 4, 14)
uop_1067 = relay.acosh(uop_1050.astype('float64')) # shape=(13, 4, 14)
bop_1084 = relay.divide(uop_1056.astype('float32'), relay.reshape(bop_1036.astype('float32'), relay.shape_of(uop_1056))) # shape=(13, 4, 14)
bop_1087 = relay.divide(uop_1056.astype('float32'), relay.reshape(bop_1039.astype('float32'), relay.shape_of(uop_1056))) # shape=(13, 4, 14)
uop_1092 = relay.erf(bop_1063.astype('float32')) # shape=(13, 4, 14)
var_1103 = relay.var("var_1103", dtype = "float32", shape = (13, 4, 14))#candidate|1103|(13, 4, 14)|var|float32
bop_1104 = relay.bitwise_xor(uop_1050.astype('uint16'), relay.reshape(var_1103.astype('uint16'), relay.shape_of(uop_1050))) # shape=(13, 4, 14)
bop_1107 = relay.logical_and(bop_1063.astype('bool'), relay.reshape(bop_1060.astype('bool'), relay.shape_of(bop_1063))) # shape=(13, 4, 14)
uop_1110 = relay.sqrt(uop_1092.astype('float32')) # shape=(13, 4, 14)
output = relay.Tuple([bop_1040,uop_1067,bop_1084,bop_1104,bop_1107,uop_1110,])
output2 = relay.Tuple([bop_1043,uop_1067,bop_1087,bop_1104,bop_1107,uop_1110,])
func_1116 = relay.Function([var_1035,var_1103,], output)
mod['func_1116'] = func_1116
mod = relay.transform.InferType()(mod)
var_1117 = relay.var("var_1117", dtype = "uint64", shape = (13, 4, 14))#candidate|1117|(13, 4, 14)|var|uint64
var_1118 = relay.var("var_1118", dtype = "float32", shape = (13, 4, 14))#candidate|1118|(13, 4, 14)|var|float32
output = func_1116(var_1117,var_1118,)
func_1119 = relay.Function([var_1117,var_1118,], output)
mutated_mod['func_1119'] = func_1119
mutated_mod = relay.transform.InferType()(mutated_mod)
func_33_call = mod.get_global_var('func_33')
func_35_call = mutated_mod.get_global_var('func_35')
call_1142 = relay.TupleGetItem(func_33_call(), 0)
call_1143 = relay.TupleGetItem(func_35_call(), 0)
output = call_1142
output2 = call_1143
func_1144 = relay.Function([], output)
mod['func_1144'] = func_1144
mod = relay.transform.InferType()(mod)
mutated_mod['func_1144'] = func_1144
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1144_call = mutated_mod.get_global_var('func_1144')
call_1145 = func_1144_call()
output = call_1145
func_1146 = relay.Function([], output)
mutated_mod['func_1146'] = func_1146
mutated_mod = relay.transform.InferType()(mutated_mod)
func_719_call = mod.get_global_var('func_719')
func_720_call = mutated_mod.get_global_var('func_720')
call_1155 = func_719_call()
call_1156 = func_719_call()
output = call_1155
output2 = call_1156
func_1159 = relay.Function([], output)
mod['func_1159'] = func_1159
mod = relay.transform.InferType()(mod)
output = func_1159()
func_1160 = relay.Function([], output)
mutated_mod['func_1160'] = func_1160
mutated_mod = relay.transform.InferType()(mutated_mod)
func_822_call = mod.get_global_var('func_822')
func_824_call = mutated_mod.get_global_var('func_824')
call_1161 = relay.TupleGetItem(func_822_call(), 0)
call_1162 = relay.TupleGetItem(func_824_call(), 0)
uop_1174 = relay.log2(call_1161.astype('float64')) # shape=(13, 4, 14)
uop_1176 = relay.log2(call_1162.astype('float64')) # shape=(13, 4, 14)
output = uop_1174
output2 = uop_1176
func_1182 = relay.Function([], output)
mod['func_1182'] = func_1182
mod = relay.transform.InferType()(mod)
output = func_1182()
func_1183 = relay.Function([], output)
mutated_mod['func_1183'] = func_1183
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1184 = relay.var("var_1184", dtype = "uint16", shape = (12, 4))#candidate|1184|(12, 4)|var|uint16
var_1185 = relay.var("var_1185", dtype = "uint16", shape = (12, 4))#candidate|1185|(12, 4)|var|uint16
bop_1186 = relay.logical_xor(var_1184.astype('uint16'), relay.reshape(var_1185.astype('uint16'), relay.shape_of(var_1184))) # shape=(12, 4)
uop_1191 = relay.atan(bop_1186.astype('float32')) # shape=(12, 4)
bop_1193 = relay.mod(uop_1191.astype('float32'), relay.reshape(var_1185.astype('float32'), relay.shape_of(uop_1191))) # shape=(12, 4)
bop_1198 = relay.floor_divide(uop_1191.astype('float32'), relay.reshape(bop_1193.astype('float32'), relay.shape_of(uop_1191))) # shape=(12, 4)
uop_1201 = relay.sigmoid(bop_1193.astype('float64')) # shape=(12, 4)
uop_1204 = relay.acosh(uop_1201.astype('float32')) # shape=(12, 4)
func_1116_call = mod.get_global_var('func_1116')
func_1119_call = mutated_mod.get_global_var('func_1119')
var_1216 = relay.var("var_1216", dtype = "uint64", shape = (728,))#candidate|1216|(728,)|var|uint64
call_1215 = relay.TupleGetItem(func_1116_call(relay.reshape(var_1216.astype('uint64'), [13, 4, 14]), relay.reshape(var_1216.astype('float32'), [13, 4, 14]), ), 1)
call_1217 = relay.TupleGetItem(func_1119_call(relay.reshape(var_1216.astype('uint64'), [13, 4, 14]), relay.reshape(var_1216.astype('float32'), [13, 4, 14]), ), 1)
uop_1225 = relay.asin(uop_1204.astype('float64')) # shape=(12, 4)
const_1232 = relay.const([[1.728808,-7.113189,4.781676,-5.426172],[0.078049,9.273370,3.078986,6.508270],[-7.684418,-8.026775,1.811653,-2.412737],[3.518292,-8.575648,3.814051,-7.320141],[9.793815,-1.230213,3.863852,-2.122439],[-3.291587,-8.855137,0.966547,7.469109],[-7.660273,2.090631,-5.397771,-0.433166],[-2.376674,-0.722457,4.913055,5.541820],[-4.280390,4.787869,-7.820094,-8.639724],[-6.096535,5.600998,-7.207887,6.911566],[-4.139670,9.283436,0.343758,-2.924740],[-5.119317,7.537070,-6.777116,7.953344]], dtype = "float64")#candidate|1232|(12, 4)|const|float64
bop_1233 = relay.not_equal(uop_1225.astype('bool'), relay.reshape(const_1232.astype('bool'), relay.shape_of(uop_1225))) # shape=(12, 4)
uop_1239 = relay.tan(uop_1225.astype('float32')) # shape=(12, 4)
output = relay.Tuple([bop_1198,call_1215,var_1216,bop_1233,uop_1239,])
output2 = relay.Tuple([bop_1198,call_1217,var_1216,bop_1233,uop_1239,])
func_1243 = relay.Function([var_1184,var_1185,var_1216,], output)
mod['func_1243'] = func_1243
mod = relay.transform.InferType()(mod)
var_1244 = relay.var("var_1244", dtype = "uint16", shape = (12, 4))#candidate|1244|(12, 4)|var|uint16
var_1245 = relay.var("var_1245", dtype = "uint16", shape = (12, 4))#candidate|1245|(12, 4)|var|uint16
var_1246 = relay.var("var_1246", dtype = "uint64", shape = (728,))#candidate|1246|(728,)|var|uint64
output = func_1243(var_1244,var_1245,var_1246,)
func_1247 = relay.Function([var_1244,var_1245,var_1246,], output)
mutated_mod['func_1247'] = func_1247
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1275 = relay.var("var_1275", dtype = "int8", shape = ())#candidate|1275|()|var|int8
var_1276 = relay.var("var_1276", dtype = "int8", shape = (11, 1))#candidate|1276|(11, 1)|var|int8
bop_1277 = relay.less_equal(var_1275.astype('bool'), var_1276.astype('bool')) # shape=(11, 1)
bop_1280 = relay.floor_mod(var_1276.astype('float64'), var_1275.astype('float64')) # shape=(11, 1)
func_1159_call = mod.get_global_var('func_1159')
func_1160_call = mutated_mod.get_global_var('func_1160')
call_1288 = func_1159_call()
call_1289 = func_1159_call()
bop_1293 = relay.right_shift(bop_1277.astype('int8'), relay.reshape(var_1276.astype('int8'), relay.shape_of(bop_1277))) # shape=(11, 1)
output = relay.Tuple([bop_1280,call_1288,bop_1293,])
output2 = relay.Tuple([bop_1280,call_1289,bop_1293,])
func_1297 = relay.Function([var_1275,var_1276,], output)
mod['func_1297'] = func_1297
mod = relay.transform.InferType()(mod)
mutated_mod['func_1297'] = func_1297
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1297_call = mutated_mod.get_global_var('func_1297')
var_1299 = relay.var("var_1299", dtype = "int8", shape = ())#candidate|1299|()|var|int8
var_1300 = relay.var("var_1300", dtype = "int8", shape = (11, 1))#candidate|1300|(11, 1)|var|int8
call_1298 = func_1297_call(var_1299,var_1300,)
output = call_1298
func_1301 = relay.Function([var_1299,var_1300,], output)
mutated_mod['func_1301'] = func_1301
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1313 = relay.var("var_1313", dtype = "int8", shape = (15, 5))#candidate|1313|(15, 5)|var|int8
var_1314 = relay.var("var_1314", dtype = "int8", shape = (15, 5))#candidate|1314|(15, 5)|var|int8
bop_1315 = relay.less(var_1313.astype('bool'), relay.reshape(var_1314.astype('bool'), relay.shape_of(var_1313))) # shape=(15, 5)
output = bop_1315
output2 = bop_1315
func_1319 = relay.Function([var_1313,var_1314,], output)
mod['func_1319'] = func_1319
mod = relay.transform.InferType()(mod)
mutated_mod['func_1319'] = func_1319
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1319_call = mutated_mod.get_global_var('func_1319')
var_1321 = relay.var("var_1321", dtype = "int8", shape = (15, 5))#candidate|1321|(15, 5)|var|int8
var_1322 = relay.var("var_1322", dtype = "int8", shape = (15, 5))#candidate|1322|(15, 5)|var|int8
call_1320 = func_1319_call(var_1321,var_1322,)
output = call_1320
func_1323 = relay.Function([var_1321,var_1322,], output)
mutated_mod['func_1323'] = func_1323
mutated_mod = relay.transform.InferType()(mutated_mod)
func_57_call = mod.get_global_var('func_57')
func_58_call = mutated_mod.get_global_var('func_58')
call_1345 = relay.TupleGetItem(func_57_call(), 0)
call_1346 = relay.TupleGetItem(func_58_call(), 0)
func_847_call = mod.get_global_var('func_847')
func_849_call = mutated_mod.get_global_var('func_849')
call_1348 = relay.TupleGetItem(func_847_call(), 0)
call_1349 = relay.TupleGetItem(func_849_call(), 0)
output = relay.Tuple([call_1345,call_1348,])
output2 = relay.Tuple([call_1346,call_1349,])
func_1357 = relay.Function([], output)
mod['func_1357'] = func_1357
mod = relay.transform.InferType()(mod)
mutated_mod['func_1357'] = func_1357
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1357_call = mutated_mod.get_global_var('func_1357')
call_1358 = func_1357_call()
output = call_1358
func_1359 = relay.Function([], output)
mutated_mod['func_1359'] = func_1359
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1362 = relay.var("var_1362", dtype = "float32", shape = (16, 9, 7))#candidate|1362|(16, 9, 7)|var|float32
uop_1363 = relay.erf(var_1362.astype('float32')) # shape=(16, 9, 7)
bop_1365 = relay.bitwise_or(uop_1363.astype('int32'), relay.reshape(var_1362.astype('int32'), relay.shape_of(uop_1363))) # shape=(16, 9, 7)
uop_1370 = relay.sigmoid(var_1362.astype('float64')) # shape=(16, 9, 7)
bop_1372 = relay.greater(uop_1370.astype('bool'), relay.reshape(bop_1365.astype('bool'), relay.shape_of(uop_1370))) # shape=(16, 9, 7)
var_1378 = relay.var("var_1378", dtype = "float32", shape = (16, 9, 7))#candidate|1378|(16, 9, 7)|var|float32
bop_1379 = relay.maximum(uop_1363.astype('uint64'), relay.reshape(var_1378.astype('uint64'), relay.shape_of(uop_1363))) # shape=(16, 9, 7)
func_1159_call = mod.get_global_var('func_1159')
func_1160_call = mutated_mod.get_global_var('func_1160')
call_1394 = func_1159_call()
call_1395 = func_1159_call()
bop_1399 = relay.minimum(bop_1379.astype('uint16'), relay.reshape(bop_1372.astype('uint16'), relay.shape_of(bop_1379))) # shape=(16, 9, 7)
var_1403 = relay.var("var_1403", dtype = "uint64", shape = (16, 9, 7))#candidate|1403|(16, 9, 7)|var|uint64
bop_1404 = relay.bitwise_and(bop_1379.astype('int16'), relay.reshape(var_1403.astype('int16'), relay.shape_of(bop_1379))) # shape=(16, 9, 7)
bop_1410 = relay.divide(uop_1363.astype('float32'), relay.reshape(var_1403.astype('float32'), relay.shape_of(uop_1363))) # shape=(16, 9, 7)
func_822_call = mod.get_global_var('func_822')
func_824_call = mutated_mod.get_global_var('func_824')
call_1418 = relay.TupleGetItem(func_822_call(), 0)
call_1419 = relay.TupleGetItem(func_824_call(), 0)
output = relay.Tuple([call_1394,bop_1399,bop_1404,bop_1410,call_1418,])
output2 = relay.Tuple([call_1395,bop_1399,bop_1404,bop_1410,call_1419,])
func_1422 = relay.Function([var_1362,var_1378,var_1403,], output)
mod['func_1422'] = func_1422
mod = relay.transform.InferType()(mod)
var_1423 = relay.var("var_1423", dtype = "float32", shape = (16, 9, 7))#candidate|1423|(16, 9, 7)|var|float32
var_1424 = relay.var("var_1424", dtype = "float32", shape = (16, 9, 7))#candidate|1424|(16, 9, 7)|var|float32
var_1425 = relay.var("var_1425", dtype = "uint64", shape = (16, 9, 7))#candidate|1425|(16, 9, 7)|var|uint64
output = func_1422(var_1423,var_1424,var_1425,)
func_1426 = relay.Function([var_1423,var_1424,var_1425,], output)
mutated_mod['func_1426'] = func_1426
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1445 = relay.const([[-8,4,10,-4,-7,4,4,-4,-9,8],[5,-8,-3,-5,-7,-4,-5,-4,-2,3],[1,7,9,8,-2,-9,-10,6,-9,10],[5,-3,-2,-7,-5,-4,-10,-4,2,6],[-10,-3,-3,4,9,7,5,8,7,2],[6,10,8,-4,8,6,-8,-6,7,2],[-1,-4,9,6,7,-9,7,-10,3,-7],[5,-9,-2,3,-5,7,-2,-4,3,8],[-9,3,-6,1,5,10,-1,5,4,-3],[1,-6,-9,5,-2,1,9,7,5,5],[-8,-1,6,2,-4,-8,3,9,4,-5],[8,-8,-8,-2,-7,-4,-6,5,1,-1],[-2,-9,4,-8,-1,-5,-7,-5,1,9],[-6,4,7,3,9,-2,-4,-4,8,-9]], dtype = "int16")#candidate|1445|(14, 10)|const|int16
var_1446 = relay.var("var_1446", dtype = "int16", shape = (14, 10))#candidate|1446|(14, 10)|var|int16
bop_1447 = relay.bitwise_or(const_1445.astype('int16'), relay.reshape(var_1446.astype('int16'), relay.shape_of(const_1445))) # shape=(14, 10)
func_1000_call = mod.get_global_var('func_1000')
func_1003_call = mutated_mod.get_global_var('func_1003')
var_1451 = relay.var("var_1451", dtype = "uint8", shape = (351, 1))#candidate|1451|(351, 1)|var|uint8
call_1450 = relay.TupleGetItem(func_1000_call(relay.reshape(var_1451.astype('uint8'), [9, 3, 13]), relay.reshape(var_1451.astype('uint8'), [9, 3, 13]), ), 1)
call_1452 = relay.TupleGetItem(func_1003_call(relay.reshape(var_1451.astype('uint8'), [9, 3, 13]), relay.reshape(var_1451.astype('uint8'), [9, 3, 13]), ), 1)
output = relay.Tuple([bop_1447,call_1450,var_1451,])
output2 = relay.Tuple([bop_1447,call_1452,var_1451,])
func_1456 = relay.Function([var_1446,var_1451,], output)
mod['func_1456'] = func_1456
mod = relay.transform.InferType()(mod)
var_1457 = relay.var("var_1457", dtype = "int16", shape = (14, 10))#candidate|1457|(14, 10)|var|int16
var_1458 = relay.var("var_1458", dtype = "uint8", shape = (351, 1))#candidate|1458|(351, 1)|var|uint8
output = func_1456(var_1457,var_1458,)
func_1459 = relay.Function([var_1457,var_1458,], output)
mutated_mod['func_1459'] = func_1459
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1475 = relay.var("var_1475", dtype = "float32", shape = (12, 13))#candidate|1475|(12, 13)|var|float32
uop_1476 = relay.acosh(var_1475.astype('float32')) # shape=(12, 13)
uop_1480 = relay.rsqrt(uop_1476.astype('float32')) # shape=(12, 13)
func_33_call = mod.get_global_var('func_33')
func_35_call = mutated_mod.get_global_var('func_35')
call_1489 = relay.TupleGetItem(func_33_call(), 0)
call_1490 = relay.TupleGetItem(func_35_call(), 0)
uop_1492 = relay.tan(uop_1480.astype('float32')) # shape=(12, 13)
func_477_call = mod.get_global_var('func_477')
func_482_call = mutated_mod.get_global_var('func_482')
var_1495 = relay.var("var_1495", dtype = "float64", shape = (16, 16))#candidate|1495|(16, 16)|var|float64
const_1496 = relay.const([8.899568,0.092667,-8.088066,-8.392984,-3.333301,2.594924,6.039376,-6.742525,7.705272,1.521954,-8.776692,-7.152163,7.316977,-6.119762,-7.296590,1.357850], dtype = "float64")#candidate|1496|(16,)|const|float64
var_1497 = relay.var("var_1497", dtype = "float64", shape = (196,))#candidate|1497|(196,)|var|float64
call_1494 = relay.TupleGetItem(func_477_call(relay.reshape(var_1495.astype('float64'), [8, 8, 4]), relay.reshape(const_1496.astype('float64'), [1, 16]), relay.reshape(var_1497.astype('float64'), [49, 4]), ), 1)
call_1498 = relay.TupleGetItem(func_482_call(relay.reshape(var_1495.astype('float64'), [8, 8, 4]), relay.reshape(const_1496.astype('float64'), [1, 16]), relay.reshape(var_1497.astype('float64'), [49, 4]), ), 1)
bop_1502 = relay.less(uop_1476.astype('bool'), relay.reshape(uop_1492.astype('bool'), relay.shape_of(uop_1476))) # shape=(12, 13)
var_1507 = relay.var("var_1507", dtype = "float32", shape = (12, 13))#candidate|1507|(12, 13)|var|float32
bop_1508 = relay.bitwise_and(uop_1480.astype('int64'), relay.reshape(var_1507.astype('int64'), relay.shape_of(uop_1480))) # shape=(12, 13)
bop_1511 = relay.minimum(bop_1502.astype('int32'), relay.reshape(uop_1476.astype('int32'), relay.shape_of(bop_1502))) # shape=(12, 13)
output = relay.Tuple([call_1489,call_1494,var_1495,const_1496,var_1497,bop_1508,bop_1511,])
output2 = relay.Tuple([call_1490,call_1498,var_1495,const_1496,var_1497,bop_1508,bop_1511,])
func_1519 = relay.Function([var_1475,var_1495,var_1497,var_1507,], output)
mod['func_1519'] = func_1519
mod = relay.transform.InferType()(mod)
var_1520 = relay.var("var_1520", dtype = "float32", shape = (12, 13))#candidate|1520|(12, 13)|var|float32
var_1521 = relay.var("var_1521", dtype = "float64", shape = (16, 16))#candidate|1521|(16, 16)|var|float64
var_1522 = relay.var("var_1522", dtype = "float64", shape = (196,))#candidate|1522|(196,)|var|float64
var_1523 = relay.var("var_1523", dtype = "float32", shape = (12, 13))#candidate|1523|(12, 13)|var|float32
output = func_1519(var_1520,var_1521,var_1522,var_1523,)
func_1524 = relay.Function([var_1520,var_1521,var_1522,var_1523,], output)
mutated_mod['func_1524'] = func_1524
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1531 = relay.var("var_1531", dtype = "float64", shape = (3, 3, 10))#candidate|1531|(3, 3, 10)|var|float64
var_1532 = relay.var("var_1532", dtype = "float64", shape = (3, 3, 10))#candidate|1532|(3, 3, 10)|var|float64
bop_1533 = relay.mod(var_1531.astype('float64'), relay.reshape(var_1532.astype('float64'), relay.shape_of(var_1531))) # shape=(3, 3, 10)
func_770_call = mod.get_global_var('func_770')
func_774_call = mutated_mod.get_global_var('func_774')
var_1537 = relay.var("var_1537", dtype = "uint16", shape = (72,))#candidate|1537|(72,)|var|uint16
call_1536 = func_770_call(relay.reshape(var_1537.astype('uint16'), [3, 8, 3]), relay.reshape(var_1537.astype('uint16'), [3, 8, 3]), )
call_1538 = func_770_call(relay.reshape(var_1537.astype('uint16'), [3, 8, 3]), relay.reshape(var_1537.astype('uint16'), [3, 8, 3]), )
func_1456_call = mod.get_global_var('func_1456')
func_1459_call = mutated_mod.get_global_var('func_1459')
const_1556 = relay.const([-7,1,-4,4,-2,2,8,-10,-5,9,-1,-8,-7,-6,-4,-10,3,3,-6,7,-9,7,8,2,-2,9,-3,4,9,6,-4,6,-8,5,8,-3,-10,-4,6,2,-8,-9,-7,3,-4,-1,7,-4,-6,10,10,1,-4,8,1,-7,-2,-2,-1,7,7,-2,5,1,6,7,7,-5,3,10,-5,4,3,-8,-2,8,3,4,-9,-1,-8,-2,-6,-5,-2,2,-10,-7,-2,-7,-8,-4,8,-10,4,-3,-8,7,-4,3,-7,-5,9,2,-7,-8,6,7,-1,-3,6,7,-3,-10,-9,4,7,-7,-3,10,9,-4,-1,1,6,6,9,8,10,-8,-2,-8,-2,-9,-3,-5,-8,-7,2,8], dtype = "int16")#candidate|1556|(140,)|const|int16
const_1557 = relay.const([[-2,-10,-1,-4,1,9,8,1,7,-9,8,-9,2,-7,-2,2,-3,8,3,-6,7,-10,-1,1,2,-9,1,-9,7,-5,9,4,-2,-6,4,1,-7,10,-2,6,-3,6,-6,-9,3,2,1,-3,-8,-8,-9,8,2,4,9,9,6,5,2,-4,6,-4,2,10,6,-6,10,1,-10,-5,-4,8,-2,3,-7,-7,-3,-1,-10,-8,-10,-1,8,2,6,6,4,3,9,9,3,8,-1,-4,2,7,-6,-4,-10,-2,-6,10,4,-5,7,8,2,-5,-7,-3,-1,-2,-9,-1,5,-7,2,10,-9,9,-10,6,-5,4,2,-4,6,-9,-4,-3,-4,9,-8,-3,3,4,3,5,3,-1,-7,-7,10,-7,8,3,-2,9,-1,-8,-8,-10,-4,-8,-6,-1,5,5,8,2,-4,8,-1,-10,1,9,-2,-10,-3,3,-1,-10,6,4,9,-8,4,1,-4,8,-8,-5,-3,7,7,-7,6,-5,-5,4,6,7,9,5,-8,9,7,8,-10,10,-7,-6,-4,-5,9,-3,3,-2,5,-6,-10,10,-8,1,-5,5,-8,5,1,1,1,-2,-3,9,-6,2,9,-5,-4,6,7,-1,4,7,8,-5,3,3,6,5,-6,-7,-10,-1,7,4,-9,-9,3,-8,7,7,-3,-5,2,-10,-8,1,-7,4,10,-10,-3,3,6,-6,-9,2,-5,10,8,6,-6,5,1,-9,-7,3,-7,-7,-10,-7,-6,-10,5,-8,9,-10,3,8,7,7,6,6,-6,10,4,4,6,2,-3,6,-4,-7,-6,-1,4,-6,7,8,5,-7,5,10,5,-3,-2,-8,-7,-3,4,5,3,-2,3,2,-10,-8,2,8,-10,6,2,-8,1,-2,-7,-4,-8,1,-8,1,5,5,-7,-7,-6,9,-6,-6,10]], dtype = "uint8")#candidate|1557|(1, 351)|const|uint8
call_1555 = relay.TupleGetItem(func_1456_call(relay.reshape(const_1556.astype('int16'), [14, 10]), relay.reshape(const_1557.astype('uint8'), [351, 1]), ), 0)
call_1558 = relay.TupleGetItem(func_1459_call(relay.reshape(const_1556.astype('int16'), [14, 10]), relay.reshape(const_1557.astype('uint8'), [351, 1]), ), 0)
bop_1564 = relay.floor_mod(var_1532.astype('float32'), relay.reshape(bop_1533.astype('float32'), relay.shape_of(var_1532))) # shape=(3, 3, 10)
const_1597 = relay.const([[-8,10,-5,-3,-4,-6,2,-2,-1,-6,4,4,5,-4,-6,7,-10,-5,-7,-4,1,-6,5,4,6,-4,1,6,10,7,3,-9,-8,9,-5,6,10,-8,10,2,2,-8,4,9,4,-7,9,-1,10,-2,-3,-10,-2,10,10,10,8,3,10,5,7,2,-9,2,-2,-6,-5,-8,5,-9,-9,-5,4,6,-1,1,-4,3,-7,3,-9,6,5,1,1,-3,8,7,7,10,-6,-5,4,-6,-2,2,-7,-5,2,2,-5,-8,-6,-7,-10,-10,-7,-9,-4,-4,3,10,-6,-4,-1,4,3,1,6,-2,-6,-3,1,4,6,-2,5,8,-6,-10,9,7,5,-3,7,-7,10,-5,-1,-6,10,5,9,9,-8,-4,-2,-10,10,-9,-7,-9,-6,7,5,4,1,-1,5,-8,8,9,-5,-10,-2,-4,-3,7,-9,-7,-10,-2,-2,-3,-4,1,7,3,-1,-8,9,-2,-5,2,-3,-10,1,6,-6,2,2,-1,5,10,6,7,-2,-10,7,-2,-2,-5,-6,-6,-10,2,4,-10,7,5,1,-9,-2,-9,2,1,-8,8,-7,-6,-5,-10,10,-9,3,-10,-9,-7,-9,-10,-2,6,-9,-3,1,5,8,6,-9,-6,-1,9,5,-1,-4,7,3,-3,-10,-1,6,8,5,-1,-10,-9,3,-1,3,3,6,-3,-5,-3,5,-5,-2,-4,-6,-3,1,-7,9,-3,1,-2,-7,-8,-3,5,-5,-6,3,5,-4,6,-10,10,-3,4,10,-3,-10,9,-1,1,7,4,7,9,-10,9,-8,-9,-3,-6,-8,-9,-7,-2,-3,6,-10,1,-2,1,7,-1,-10,-7,5,5,10,2,2,-6,4,-6,2,4,-10,-7,-6,2,-3,6,-10,-1,-6,-10,4,-5,7,5,-1,-7,-5,-7,-5,6,8],[5,-4,10,7,6,7,-2,-5,8,-9,8,-9,6,6,3,-3,-3,7,4,-5,-7,-6,-9,-9,8,9,-3,-10,6,10,-9,-10,-9,8,-2,8,7,10,4,10,7,-7,-10,9,3,5,-4,6,3,9,-9,5,-10,2,4,5,3,-4,-10,-1,4,-5,-3,2,-5,1,7,-9,-1,-2,-5,8,10,5,7,-3,3,1,-8,-2,-3,6,7,8,6,-2,-10,1,4,-2,-1,4,-2,10,6,-3,-2,-1,-2,-8,-1,-3,1,-1,-9,6,7,-4,4,8,-3,-1,10,8,10,-4,6,-10,-9,-2,3,10,7,-8,5,1,9,-7,-1,-2,-8,-2,4,-1,-4,-3,10,-8,7,-8,-5,2,-8,-2,-1,1,-3,-4,-6,9,-8,10,6,-5,-5,-5,1,-4,-6,1,5,9,-7,-4,-9,-5,-5,-7,5,6,-6,-2,-10,-9,5,6,-1,5,-7,3,1,-5,4,-1,-5,-1,-10,1,9,8,9,1,6,-10,-6,1,10,8,-9,3,8,6,-6,9,8,-7,-1,8,6,-2,-10,4,8,-6,-10,10,4,7,-4,3,-6,-8,-1,-6,-6,-3,-1,8,6,-8,-2,6,8,-6,-2,6,-1,2,-3,-1,7,5,1,-9,7,5,8,5,-7,-8,-2,-4,9,7,4,-10,3,1,9,1,9,-7,-7,5,-3,-2,9,10,-2,9,4,-9,7,1,1,-3,-5,-9,3,8,-7,3,-6,4,-9,-6,-6,-1,4,-10,3,-5,-6,-5,-6,-8,-3,1,-5,7,-9,8,7,-8,-3,-6,-6,9,5,2,4,6,-3,9,1,-2,9,6,1,-7,-6,5,3,-5,-5,-10,9,8,-3,9,-3,6,1,7,8,10,-8,6,-6,-2,10,-2,9,10,-9,8,8,-3,6,4,-6],[7,-7,7,-4,6,10,2,10,-3,-10,8,-7,-8,-10,10,-5,10,-10,9,6,9,-5,-7,-2,3,-3,10,3,6,10,-9,-3,-1,6,10,-5,-7,-9,-3,-7,4,9,-2,2,6,-6,-9,6,3,-7,-5,1,3,8,-2,2,5,-10,4,6,5,4,8,-3,-5,1,5,4,1,-3,5,9,-9,-6,10,-10,2,9,8,-1,4,-3,-6,-4,6,-2,-3,10,9,-4,8,5,9,-9,6,2,-6,7,-1,-10,8,-2,2,-4,10,1,-1,-7,10,9,-10,6,-5,7,-5,5,-9,-8,-8,4,-10,7,1,4,-2,5,-4,-5,5,-7,8,-8,10,10,8,-8,-6,10,9,-9,8,2,-7,1,10,4,1,-7,-6,10,10,4,3,5,9,2,8,-9,2,6,-9,1,2,2,-6,6,10,-4,-4,-6,1,-10,3,-3,-9,-6,1,8,-7,3,-3,-1,-9,-6,2,-5,10,-3,5,8,6,2,-3,-3,1,6,-5,6,2,6,-6,6,-8,-10,4,7,-4,-9,9,9,-8,-5,4,8,5,-7,-8,-8,-3,-9,8,8,7,9,7,-8,-3,-9,-4,10,-2,-10,-3,7,9,-4,4,-7,9,-8,3,3,-9,-2,1,10,-2,-4,-9,10,8,4,-4,-4,-8,9,-8,-9,5,10,5,1,-2,-2,-7,8,-4,9,5,3,6,5,4,-1,-7,-7,10,-10,3,3,6,-5,-6,-10,-8,6,-7,-7,7,4,-8,-6,8,-1,10,3,7,-8,-4,6,1,5,-5,1,-10,-5,5,-7,9,-6,-3,-7,-10,-5,-1,-8,5,2,-6,3,7,4,-9,-5,-2,7,3,-6,-7,9,6,-4,-1,-2,-1,-4,-2,10,-1,8,-7,9,-9,5,7,-7,1,5,-10,-10,-1],[9,5,3,-6,1,7,7,6,5,-6,-8,6,1,-8,6,7,3,7,-8,-8,-8,1,-5,7,-10,-2,2,-10,5,5,-9,9,4,9,-10,-3,4,-6,-10,-8,-8,9,-10,4,-8,7,3,9,-3,-1,5,-3,-9,7,4,10,-8,1,-7,-3,3,-2,7,4,-10,-5,1,4,-9,-9,-8,4,-5,4,-1,7,-9,10,8,8,-1,3,-2,-3,-9,5,-1,-3,-5,8,-4,-10,2,6,6,-10,-8,-2,-1,3,-7,-9,-9,-5,-9,-2,8,3,4,1,-5,8,5,4,-4,8,-5,-10,-1,-9,-7,-5,-5,-4,10,-8,8,8,7,-9,-9,6,8,-8,-2,1,-10,-4,-5,-1,-6,9,8,-5,-1,7,3,-4,9,2,-9,-1,-9,3,5,-8,4,3,7,8,-2,8,8,8,3,1,3,2,-8,8,8,2,-5,5,-3,-8,8,2,-9,5,2,-6,9,1,-3,-9,-4,3,6,-1,-1,-3,4,-6,10,5,-1,-9,10,-8,-8,4,-9,-3,-6,-3,-3,5,4,2,-7,7,9,6,5,-2,2,9,2,-6,6,5,-6,9,-4,-7,8,-6,-10,-8,-8,-2,-4,-2,10,-5,7,-6,-10,4,-5,-4,-5,-2,7,-1,-8,-7,-3,1,7,2,3,9,-4,-7,4,-2,4,-5,3,7,-1,6,-3,9,-2,-6,-10,8,7,-3,-9,-1,10,-5,4,-6,8,10,10,5,-4,-7,-5,-10,-2,-5,-9,-5,4,2,4,6,-4,5,-10,6,-1,-8,-9,1,3,-2,6,-9,-7,-10,-3,-5,5,-8,10,6,-8,10,-5,9,-10,-10,10,9,-2,-10,-7,1,7,-4,-5,10,7,3,4,-1,4,-3,1,-4,2,10,-1,9,10,6,-4,-1,10,-2,-5,-1,4],[-5,-7,-2,3,8,4,-3,-9,-2,-5,3,-6,-10,-7,3,-6,-8,9,3,1,7,7,10,7,10,-6,9,-9,4,-1,-9,5,-1,-7,-6,4,-4,3,8,7,-4,-10,-4,4,-4,4,4,-1,4,7,-6,3,-3,-5,8,8,6,7,-8,-7,7,-8,-3,-6,-8,-6,6,-6,10,10,5,2,-8,1,-1,8,2,-9,-4,-9,-7,-7,-8,2,6,4,1,-3,6,-7,-2,4,-1,-8,-7,-9,4,9,-1,-8,4,8,-7,-6,-5,-9,-8,-1,-10,-5,-6,3,-2,-9,-5,2,8,-7,-9,9,8,2,-5,-4,-2,3,-7,7,9,4,5,-3,6,-2,-5,-10,3,8,5,-4,-4,6,-1,1,-2,-6,-3,-2,1,5,-4,-8,4,-6,1,-7,-5,4,-7,8,4,-6,2,-5,9,10,2,2,-5,9,8,-9,-1,9,-2,7,10,2,-9,-7,-6,6,5,7,8,-6,-2,-9,9,-10,6,8,9,10,-8,8,3,3,-4,8,8,8,8,-2,-7,2,10,-3,-2,6,-1,-4,-10,2,1,4,1,-9,1,-10,4,4,-1,-2,2,-3,-4,-5,5,-8,7,-4,-6,-9,-4,7,-10,3,-10,4,-5,-2,3,-5,5,5,-5,-2,3,10,-2,-9,-10,4,7,1,-3,3,10,-6,-1,-9,-1,-1,-4,-4,-10,9,-5,-1,8,-6,-2,-9,-9,9,6,-8,1,-1,-10,1,8,-1,2,-7,3,3,2,-8,-9,-3,-9,1,-10,-6,9,-4,7,2,-7,-10,-2,-6,7,7,2,-10,-1,-10,-5,-5,4,-3,-5,10,4,4,3,10,5,7,-7,10,-9,-1,7,-9,5,1,7,-4,1,6,-8,-7,4,-2,-2,1,3,6,-9,-2,-8,-4,6,7,8,5,-2]], dtype = "uint8")#candidate|1597|(5, 351)|const|uint8
bop_1598 = relay.logical_or(const_1557.astype('bool'), const_1597.astype('bool')) # shape=(5, 351)
bop_1606 = relay.minimum(var_1537.astype('float64'), relay.reshape(call_1536.astype('float64'), relay.shape_of(var_1537))) # shape=(72,)
bop_1609 = relay.minimum(var_1537.astype('float64'), relay.reshape(call_1538.astype('float64'), relay.shape_of(var_1537))) # shape=(72,)
output = relay.Tuple([call_1555,const_1556,bop_1564,bop_1598,bop_1606,])
output2 = relay.Tuple([call_1558,const_1556,bop_1564,bop_1598,bop_1609,])
func_1610 = relay.Function([var_1531,var_1532,var_1537,], output)
mod['func_1610'] = func_1610
mod = relay.transform.InferType()(mod)
mutated_mod['func_1610'] = func_1610
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1610_call = mutated_mod.get_global_var('func_1610')
var_1612 = relay.var("var_1612", dtype = "float64", shape = (3, 3, 10))#candidate|1612|(3, 3, 10)|var|float64
var_1613 = relay.var("var_1613", dtype = "float64", shape = (3, 3, 10))#candidate|1613|(3, 3, 10)|var|float64
var_1614 = relay.var("var_1614", dtype = "uint16", shape = (72,))#candidate|1614|(72,)|var|uint16
call_1611 = func_1610_call(var_1612,var_1613,var_1614,)
output = call_1611
func_1615 = relay.Function([var_1612,var_1613,var_1614,], output)
mutated_mod['func_1615'] = func_1615
mutated_mod = relay.transform.InferType()(mutated_mod)
func_203_call = mod.get_global_var('func_203')
func_205_call = mutated_mod.get_global_var('func_205')
call_1645 = func_203_call()
call_1646 = func_203_call()
output = call_1645
output2 = call_1646
func_1664 = relay.Function([], output)
mod['func_1664'] = func_1664
mod = relay.transform.InferType()(mod)
output = func_1664()
func_1665 = relay.Function([], output)
mutated_mod['func_1665'] = func_1665
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1690 = relay.var("var_1690", dtype = "int32", shape = (2, 10, 1))#candidate|1690|(2, 10, 1)|var|int32
var_1691 = relay.var("var_1691", dtype = "int32", shape = (2, 10, 3))#candidate|1691|(2, 10, 3)|var|int32
bop_1692 = relay.bitwise_xor(var_1690.astype('int32'), var_1691.astype('int32')) # shape=(2, 10, 3)
func_1159_call = mod.get_global_var('func_1159')
func_1160_call = mutated_mod.get_global_var('func_1160')
call_1697 = func_1159_call()
call_1698 = func_1159_call()
uop_1701 = relay.atanh(bop_1692.astype('float32')) # shape=(2, 10, 3)
bop_1703 = relay.multiply(var_1690.astype('uint16'), uop_1701.astype('uint16')) # shape=(2, 10, 3)
output = relay.Tuple([call_1697,bop_1703,])
output2 = relay.Tuple([call_1698,bop_1703,])
F = relay.Function([var_1690,var_1691,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1690,var_1691,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1690= np.array([[[9],[-5],[10],[-6],[-8],[-9],[6],[-4],[9],[-5]],[[3],[10],[5],[6],[4],[-3],[8],[3],[6],[2]]], dtype='int32')
module1.set_input('var_1690', input_1690)
input_1691= np.array([[[-6,8,7],[2,6,-1],[-3,7,-2],[2,-6,9],[4,2,1],[3,9,1],[3,-3,1],[6,-6,2],[7,-4,-10],[7,-2,4]],[[-6,-1,8],[10,5,10],[9,10,8],[-1,-9,-10],[-5,2,7],[-1,3,-8],[3,-2,-3],[-4,8,-8],[-9,5,-6],[-6,-3,10]]], dtype='int32')
module1.set_input('var_1691', input_1691)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1690, input_1691, )
res3 = intrp3.evaluate()(input_1690, input_1691, )
res4 = intrp4.evaluate()(input_1690, input_1691, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
module5.set_input('var_1690', input_1690)
module5.set_input('var_1691', input_1691)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1690, input_1691, )
res7 = intrp7.evaluate()(input_1690, input_1691, )
res8 = intrp8.evaluate()(input_1690, input_1691, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
module9.set_input('var_1690', input_1690)
module9.set_input('var_1691', input_1691)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1690, input_1691, )
res11 = intrp11.evaluate()(input_1690, input_1691, )
res12 = intrp12.evaluate()(input_1690, input_1691, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
module13.set_input('var_1690', input_1690)
module13.set_input('var_1691', input_1691)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1690, input_1691, )
res15 = intrp15.evaluate()(input_1690, input_1691, )
res16 = intrp16.evaluate()(input_1690, input_1691, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
module17.set_input('var_1690', input_1690)
module17.set_input('var_1691', input_1691)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1690, input_1691, )
res19 = intrp19.evaluate()(input_1690, input_1691, )
res20 = intrp20.evaluate()(input_1690, input_1691, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
module21.set_input('var_1690', input_1690)
module21.set_input('var_1691', input_1691)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1690, input_1691, )
res23 = intrp23.evaluate()(input_1690, input_1691, )
res24 = intrp24.evaluate()(input_1690, input_1691, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()

'''42: TVMFuncCall
41: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
40: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
39: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
38: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
37: tvm::transform::Pass::operator()(tvm::IRModule) const
36: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
35: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
30: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
29: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
28: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
27: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
26: _ZN3tvm5relay16MixedModeMutato
25: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
24: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
23: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
22: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
21: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
20: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
19: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
18: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
17: _ZN3tvm5relay16MixedModeMutato
16: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
15: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
14: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
13: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
12: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
11: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
10: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
9: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
8: tvm::transform::Pass::operator()(tvm::IRModule) const
7: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
6: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::Pass::operator()(tvm::IRModule) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
0: tvm::DiagnosticContext::Render()

'''