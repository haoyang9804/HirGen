import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_24 = relay.var("var_24", dtype = "float64", shape = (9, 15))#candidate|24|(9, 15)|var|float64
var_25 = relay.var("var_25", dtype = "float64", shape = (9, 15))#candidate|25|(9, 15)|var|float64
bop_26 = relay.mod(var_24.astype('float64'), relay.reshape(var_25.astype('float64'), relay.shape_of(var_24))) # shape=(9, 15)
var_29 = relay.var("var_29", dtype = "float64", shape = (9, 15))#candidate|29|(9, 15)|var|float64
bop_30 = relay.not_equal(var_25.astype('bool'), relay.reshape(var_29.astype('bool'), relay.shape_of(var_25))) # shape=(9, 15)
uop_64 = relay.cosh(bop_30.astype('float32')) # shape=(9, 15)
bop_66 = relay.greater(uop_64.astype('bool'), relay.reshape(var_29.astype('bool'), relay.shape_of(uop_64))) # shape=(9, 15)
output = relay.Tuple([bop_26,bop_66,])
output2 = relay.Tuple([bop_26,bop_66,])
func_69 = relay.Function([var_24,var_25,var_29,], output)
mod['func_69'] = func_69
mod = relay.transform.InferType()(mod)
var_70 = relay.var("var_70", dtype = "float64", shape = (9, 15))#candidate|70|(9, 15)|var|float64
var_71 = relay.var("var_71", dtype = "float64", shape = (9, 15))#candidate|71|(9, 15)|var|float64
var_72 = relay.var("var_72", dtype = "float64", shape = (9, 15))#candidate|72|(9, 15)|var|float64
output = func_69(var_70,var_71,var_72,)
func_73 = relay.Function([var_70,var_71,var_72,], output)
mutated_mod['func_73'] = func_73
mutated_mod = relay.transform.InferType()(mutated_mod)
const_77 = relay.const([[9.010999],[4.151792],[4.408528],[-3.932085],[-0.837193],[-8.133501],[5.503222],[7.713767],[5.146408],[7.720864],[-9.117350],[3.970295],[-8.708710],[-7.742165],[-7.404162],[0.010371]], dtype = "float32")#candidate|77|(16, 1)|const|float32
uop_78 = relay.cos(const_77.astype('float32')) # shape=(16, 1)
uop_82 = relay.cosh(uop_78.astype('float64')) # shape=(16, 1)
uop_84 = relay.asinh(uop_82.astype('float64')) # shape=(16, 1)
bop_86 = relay.less(uop_82.astype('bool'), relay.reshape(const_77.astype('bool'), relay.shape_of(uop_82))) # shape=(16, 1)
uop_90 = relay.asin(uop_84.astype('float32')) # shape=(16, 1)
uop_97 = relay.tan(uop_84.astype('float64')) # shape=(16, 1)
bop_99 = relay.mod(bop_86.astype('float32'), relay.reshape(uop_84.astype('float32'), relay.shape_of(bop_86))) # shape=(16, 1)
bop_102 = relay.power(uop_78.astype('float32'), relay.reshape(uop_97.astype('float32'), relay.shape_of(uop_78))) # shape=(16, 1)
uop_106 = relay.sin(bop_102.astype('float64')) # shape=(16, 1)
bop_108 = relay.logical_and(uop_106.astype('bool'), relay.reshape(uop_84.astype('bool'), relay.shape_of(uop_106))) # shape=(16, 1)
bop_112 = relay.equal(bop_108.astype('bool'), relay.reshape(uop_84.astype('bool'), relay.shape_of(bop_108))) # shape=(16, 1)
bop_118 = relay.bitwise_or(bop_112.astype('int16'), relay.reshape(uop_106.astype('int16'), relay.shape_of(bop_112))) # shape=(16, 1)
func_69_call = mod.get_global_var('func_69')
func_73_call = mutated_mod.get_global_var('func_73')
const_123 = relay.const([[3.047081,-5.478570,-1.014524,1.251637,-1.316670,-4.980254,4.429200,4.004635,2.703224,0.756264,-8.068086,4.180068,-2.949686,-0.299240,8.401824,-0.136761,0.538818,-9.251289,-1.632610,6.614716,-5.615141,4.870822,6.588498,-4.822520,1.148219,3.389967,5.187693,-3.111376,-3.644611,-5.338756,7.200104,-1.370612,-5.455986,-4.366404,-5.040021,5.432030,5.050161,-3.711248,8.317537,3.030170,-8.469788,-6.083012,7.975639,-8.753570,-4.129992],[-2.517086,2.865290,-0.866087,6.413333,5.445585,-7.567503,-7.166430,6.197242,3.223583,6.270140,6.404271,4.933138,9.980567,-6.279756,-2.204255,-3.977184,-9.060417,1.310170,7.927777,4.011431,-6.440191,6.765351,1.502633,-2.132417,-1.295644,8.508481,8.677297,0.045237,5.704295,-6.566963,-9.835500,-5.902407,0.946350,5.856759,-7.599166,9.218233,8.509332,7.060559,9.842410,7.903731,8.515783,6.764115,8.143373,8.983409,-9.762979],[2.135533,9.875840,6.991407,8.594489,8.800561,0.003951,0.554187,-3.437336,4.441312,-3.310590,0.684485,5.533152,-6.700067,3.944826,7.196037,-5.504731,8.598932,6.784492,-2.481396,0.546262,-1.145556,-6.112848,1.052915,1.266042,-5.166866,1.139382,6.796197,-2.593822,-3.612371,-9.658168,5.412093,-3.632471,-9.869373,6.260561,-6.769535,-8.129424,4.841532,-8.365926,8.558225,2.068015,8.438402,9.713100,2.446265,0.251688,-9.906602]], dtype = "float64")#candidate|123|(3, 45)|const|float64
call_122 = relay.TupleGetItem(func_69_call(relay.reshape(const_123.astype('float64'), [9, 15]), relay.reshape(const_123.astype('float64'), [9, 15]), relay.reshape(const_123.astype('float64'), [9, 15]), ), 1)
call_124 = relay.TupleGetItem(func_73_call(relay.reshape(const_123.astype('float64'), [9, 15]), relay.reshape(const_123.astype('float64'), [9, 15]), relay.reshape(const_123.astype('float64'), [9, 15]), ), 1)
func_69_call = mod.get_global_var('func_69')
func_73_call = mutated_mod.get_global_var('func_73')
call_125 = relay.TupleGetItem(func_69_call(relay.reshape(call_122.astype('float64'), [9, 15]), relay.reshape(const_123.astype('float64'), [9, 15]), relay.reshape(call_122.astype('float64'), [9, 15]), ), 0)
call_126 = relay.TupleGetItem(func_73_call(relay.reshape(call_122.astype('float64'), [9, 15]), relay.reshape(const_123.astype('float64'), [9, 15]), relay.reshape(call_122.astype('float64'), [9, 15]), ), 0)
bop_127 = relay.divide(bop_112.astype('float64'), relay.reshape(uop_78.astype('float64'), relay.shape_of(bop_112))) # shape=(16, 1)
func_69_call = mod.get_global_var('func_69')
func_73_call = mutated_mod.get_global_var('func_73')
call_132 = relay.TupleGetItem(func_69_call(relay.reshape(call_122.astype('float64'), [9, 15]), relay.reshape(call_125.astype('float64'), [9, 15]), relay.reshape(const_123.astype('float64'), [9, 15]), ), 0)
call_133 = relay.TupleGetItem(func_73_call(relay.reshape(call_122.astype('float64'), [9, 15]), relay.reshape(call_125.astype('float64'), [9, 15]), relay.reshape(const_123.astype('float64'), [9, 15]), ), 0)
output = relay.Tuple([uop_90,bop_99,bop_118,call_122,const_123,call_125,bop_127,call_132,])
output2 = relay.Tuple([uop_90,bop_99,bop_118,call_124,const_123,call_126,bop_127,call_133,])
func_135 = relay.Function([], output)
mod['func_135'] = func_135
mod = relay.transform.InferType()(mod)
mutated_mod['func_135'] = func_135
mutated_mod = relay.transform.InferType()(mutated_mod)
func_135_call = mutated_mod.get_global_var('func_135')
call_136 = func_135_call()
output = call_136
func_137 = relay.Function([], output)
mutated_mod['func_137'] = func_137
mutated_mod = relay.transform.InferType()(mutated_mod)
var_146 = relay.var("var_146", dtype = "float32", shape = (16, 14))#candidate|146|(16, 14)|var|float32
const_147 = relay.const([[7.539561,-8.264259,6.786125,-9.104995,-2.040150,-2.305158,-0.101191,0.863485,1.467920,8.650327,-7.035829,-7.545880,1.032824,-6.448302],[-1.388342,7.965890,-4.498952,9.889862,2.805597,2.454868,2.587828,-3.829722,9.032755,-4.311551,7.437121,-3.896385,-0.252675,-5.456900],[8.157798,8.795405,-9.114967,-0.623717,3.508775,-9.403985,4.102326,-1.424708,0.347015,-0.290780,-0.993633,4.270208,-0.953541,9.487227],[-7.476403,7.240868,-2.157349,-5.771509,8.588841,-2.428776,-4.556206,8.037634,-6.655138,-8.227352,-9.653112,1.460755,-1.229557,-0.889221],[-8.784236,7.706453,0.688607,3.976457,-9.279134,-8.006778,-2.975570,-7.843807,1.033367,-0.506460,8.210863,8.316164,6.174363,0.938766],[4.256575,-6.691985,2.106877,9.133764,-0.516430,3.971001,-9.933926,-7.545119,-7.052912,6.840757,-4.929836,8.326277,-1.915882,-6.462597],[6.070106,0.775798,5.464737,4.142908,-8.381939,-4.150674,0.387288,6.954949,1.935582,-3.070671,-7.492374,-5.811418,6.966573,-9.876548],[-5.365022,1.800431,-1.924950,6.349193,-9.329634,8.667199,8.865418,-7.432948,4.333196,-3.203891,1.253446,-8.751807,-3.815649,9.934987],[-0.112544,5.305801,-8.785955,9.970136,-9.666310,-1.286997,2.081190,2.084375,6.728198,8.282921,2.930663,-0.951792,-5.503140,-1.949998],[8.194809,-5.115770,9.060096,-8.332303,-8.035069,5.771821,-1.905121,0.355269,8.378871,-8.766369,-9.344620,5.806411,4.984141,0.815409],[-7.844993,-2.480266,6.260406,5.342227,2.396850,-1.069102,1.810012,-2.032743,1.128771,9.558618,-3.117772,-9.604972,6.487689,-0.141359],[8.194548,-7.908222,5.618287,2.085554,2.304941,4.113015,-5.331732,-9.980951,7.006409,-7.928593,1.440489,6.524287,1.100092,-3.996727],[6.782536,-8.407339,-9.860591,-8.959035,7.961523,-8.375701,9.343414,8.002220,7.393405,9.803315,-2.099265,-7.279703,-4.975133,5.115291],[4.662058,-3.456785,-9.504709,9.528906,-0.165079,-6.681732,3.999900,-9.840998,3.613731,-5.798114,-8.168254,8.705065,5.522906,-5.863744],[-6.538424,-0.804554,0.270808,-2.422403,3.475184,2.990058,-9.274233,7.029258,-6.802347,-9.274805,-3.800718,1.217341,-0.780141,7.043009],[-2.777967,0.913031,-2.990087,-5.671865,6.717078,6.826937,-5.502357,-0.342845,3.338413,-5.522144,5.896344,4.469738,8.826900,-6.738944]], dtype = "float32")#candidate|147|(16, 14)|const|float32
bop_148 = relay.divide(var_146.astype('float32'), relay.reshape(const_147.astype('float32'), relay.shape_of(var_146))) # shape=(16, 14)
output = relay.Tuple([bop_148,])
output2 = relay.Tuple([bop_148,])
func_154 = relay.Function([var_146,], output)
mod['func_154'] = func_154
mod = relay.transform.InferType()(mod)
var_155 = relay.var("var_155", dtype = "float32", shape = (16, 14))#candidate|155|(16, 14)|var|float32
output = func_154(var_155)
func_156 = relay.Function([var_155], output)
mutated_mod['func_156'] = func_156
mutated_mod = relay.transform.InferType()(mutated_mod)
func_135_call = mod.get_global_var('func_135')
func_137_call = mutated_mod.get_global_var('func_137')
call_158 = relay.TupleGetItem(func_135_call(), 5)
call_159 = relay.TupleGetItem(func_137_call(), 5)
output = relay.Tuple([call_158,])
output2 = relay.Tuple([call_159,])
func_160 = relay.Function([], output)
mod['func_160'] = func_160
mod = relay.transform.InferType()(mod)
mutated_mod['func_160'] = func_160
mutated_mod = relay.transform.InferType()(mutated_mod)
func_160_call = mutated_mod.get_global_var('func_160')
call_161 = func_160_call()
output = call_161
func_162 = relay.Function([], output)
mutated_mod['func_162'] = func_162
mutated_mod = relay.transform.InferType()(mutated_mod)
var_177 = relay.var("var_177", dtype = "int64", shape = (14,))#candidate|177|(14,)|var|int64
var_178 = relay.var("var_178", dtype = "int64", shape = (14,))#candidate|178|(14,)|var|int64
bop_179 = relay.add(var_177.astype('int64'), relay.reshape(var_178.astype('int64'), relay.shape_of(var_177))) # shape=(14,)
output = relay.Tuple([bop_179,])
output2 = relay.Tuple([bop_179,])
func_182 = relay.Function([var_177,var_178,], output)
mod['func_182'] = func_182
mod = relay.transform.InferType()(mod)
mutated_mod['func_182'] = func_182
mutated_mod = relay.transform.InferType()(mutated_mod)
func_182_call = mutated_mod.get_global_var('func_182')
var_184 = relay.var("var_184", dtype = "int64", shape = (14,))#candidate|184|(14,)|var|int64
var_185 = relay.var("var_185", dtype = "int64", shape = (14,))#candidate|185|(14,)|var|int64
call_183 = func_182_call(var_184,var_185,)
output = call_183
func_186 = relay.Function([var_184,var_185,], output)
mutated_mod['func_186'] = func_186
mutated_mod = relay.transform.InferType()(mutated_mod)
var_188 = relay.var("var_188", dtype = "uint64", shape = (13,))#candidate|188|(13,)|var|uint64
var_189 = relay.var("var_189", dtype = "uint64", shape = (13,))#candidate|189|(13,)|var|uint64
bop_190 = relay.logical_xor(var_188.astype('uint64'), relay.reshape(var_189.astype('uint64'), relay.shape_of(var_188))) # shape=(13,)
bop_197 = relay.logical_and(var_189.astype('bool'), relay.reshape(bop_190.astype('bool'), relay.shape_of(var_189))) # shape=(13,)
bop_200 = relay.bitwise_xor(var_188.astype('int16'), relay.reshape(bop_197.astype('int16'), relay.shape_of(var_188))) # shape=(13,)
bop_208 = relay.bitwise_or(bop_190.astype('int32'), relay.reshape(var_189.astype('int32'), relay.shape_of(bop_190))) # shape=(13,)
const_214 = relay.const([False,False,True,True,False,False,True,True,True,False,True,False,True], dtype = "bool")#candidate|214|(13,)|const|bool
bop_215 = relay.floor_divide(bop_197.astype('float64'), relay.reshape(const_214.astype('float64'), relay.shape_of(bop_197))) # shape=(13,)
uop_224 = relay.sinh(bop_200.astype('float32')) # shape=(13,)
bop_226 = relay.mod(uop_224.astype('float64'), relay.reshape(bop_208.astype('float64'), relay.shape_of(uop_224))) # shape=(13,)
output = relay.Tuple([bop_215,bop_226,])
output2 = relay.Tuple([bop_215,bop_226,])
func_229 = relay.Function([var_188,var_189,], output)
mod['func_229'] = func_229
mod = relay.transform.InferType()(mod)
var_230 = relay.var("var_230", dtype = "uint64", shape = (13,))#candidate|230|(13,)|var|uint64
var_231 = relay.var("var_231", dtype = "uint64", shape = (13,))#candidate|231|(13,)|var|uint64
output = func_229(var_230,var_231,)
func_232 = relay.Function([var_230,var_231,], output)
mutated_mod['func_232'] = func_232
mutated_mod = relay.transform.InferType()(mutated_mod)
var_253 = relay.var("var_253", dtype = "float32", shape = (10,))#candidate|253|(10,)|var|float32
uop_254 = relay.acosh(var_253.astype('float32')) # shape=(10,)
bop_263 = relay.greater_equal(uop_254.astype('bool'), relay.reshape(var_253.astype('bool'), relay.shape_of(uop_254))) # shape=(10,)
uop_268 = relay.atan(bop_263.astype('float64')) # shape=(10,)
bop_274 = relay.power(uop_268.astype('float32'), relay.reshape(uop_254.astype('float32'), relay.shape_of(uop_268))) # shape=(10,)
func_154_call = mod.get_global_var('func_154')
func_156_call = mutated_mod.get_global_var('func_156')
const_278 = relay.const([[-7.671941],[6.154470],[4.774347],[-1.933756],[7.265624],[1.722879],[1.684865],[2.046794],[-5.985296],[-5.337038],[2.295035],[9.821595],[-6.749980],[9.482354],[-9.646651],[5.998519],[-4.463283],[2.238028],[7.446043],[-9.547773],[2.725193],[-3.406718],[-9.307176],[1.321382],[-1.196068],[6.308786],[1.682804],[0.032577],[5.148623],[-9.362942],[-0.161205],[8.822377],[-0.988618],[-4.615145],[-7.733717],[-1.265465],[-4.374088],[-8.246983],[4.860402],[8.014725],[2.187547],[9.433960],[5.811109],[-8.196635],[-9.984950],[-2.529478],[-7.041919],[0.442350],[8.245408],[-6.899181],[-3.463643],[7.187100],[-3.160027],[5.292086],[8.318984],[6.743812],[3.326124],[2.382246],[2.494998],[8.438307],[-1.479393],[-7.972054],[2.029239],[8.592187],[9.302735],[-0.723904],[-1.915184],[-7.893206],[7.618573],[-5.348620],[1.522531],[0.406061],[3.684588],[4.454225],[-1.872350],[-7.501295],[4.149621],[-2.951486],[-3.509400],[6.568748],[4.252554],[7.020961],[8.815063],[-8.512083],[2.280882],[0.920191],[-9.571864],[4.117390],[2.887274],[-3.066035],[9.888593],[-1.533458],[4.289927],[-1.216416],[-9.730855],[6.440063],[6.903990],[1.050672],[6.457707],[-8.106178],[8.508763],[4.117821],[-7.592234],[8.070419],[2.973240],[-4.450351],[-7.565573],[7.877399],[1.021342],[0.029446],[2.752869],[3.698821],[4.384261],[5.729269],[6.460110],[5.027413],[6.260288],[-7.186116],[6.469823],[4.241692],[-4.076448],[4.125415],[-2.672953],[-3.256274],[-4.909459],[4.911224],[7.886882],[1.192730],[-4.039229],[4.680255],[-9.719374],[-0.538856],[8.377107],[2.567595],[-3.980875],[5.116369],[-0.029117],[3.589853],[-3.121673],[-2.113961],[8.124328],[-3.233255],[3.653662],[3.221655],[3.363323],[9.690509],[2.678745],[6.379051],[-5.584077],[4.870617],[-5.278328],[4.750947],[5.358923],[6.204704],[1.897241],[2.618108],[-6.089927],[5.798317],[6.168515],[0.485245],[7.234362],[-1.439750],[-9.454136],[1.417588],[-7.614496],[3.915549],[9.606414],[-6.245297],[6.790678],[-6.945721],[0.819522],[1.142898],[-5.996446],[2.781715],[4.757832],[-3.295883],[0.249808],[0.060315],[-3.639002],[0.403656],[9.467932],[2.934200],[5.148908],[1.621928],[-6.062802],[6.092852],[6.282471],[4.048794],[3.566354],[4.432961],[1.426657],[0.875568],[-9.343583],[-2.197226],[0.335718],[-6.756788],[-1.032467],[-9.654942],[1.914286],[-3.884616],[7.712542],[5.650449],[-8.976743],[-5.695232],[-4.617555],[-9.976205],[6.803583],[-1.520470],[-8.631995],[4.719389],[-4.785428],[-5.056779],[4.025610],[8.486395],[-2.902941],[-2.232018],[8.532422],[6.196308],[-0.958107],[-1.668067],[9.422321],[-4.255867],[-6.735759],[9.796722]], dtype = "float32")#candidate|278|(224, 1)|const|float32
call_277 = relay.TupleGetItem(func_154_call(relay.reshape(const_278.astype('float32'), [16, 14])), 0)
call_279 = relay.TupleGetItem(func_156_call(relay.reshape(const_278.astype('float32'), [16, 14])), 0)
uop_283 = relay.sqrt(uop_268.astype('float64')) # shape=(10,)
uop_289 = relay.sinh(bop_274.astype('float32')) # shape=(10,)
func_229_call = mod.get_global_var('func_229')
func_232_call = mutated_mod.get_global_var('func_232')
var_293 = relay.var("var_293", dtype = "uint64", shape = (1, 13))#candidate|293|(1, 13)|var|uint64
call_292 = relay.TupleGetItem(func_229_call(relay.reshape(var_293.astype('uint64'), [13,]), relay.reshape(var_293.astype('uint64'), [13,]), ), 1)
call_294 = relay.TupleGetItem(func_232_call(relay.reshape(var_293.astype('uint64'), [13,]), relay.reshape(var_293.astype('uint64'), [13,]), ), 1)
output = relay.Tuple([call_277,const_278,uop_283,uop_289,call_292,var_293,])
output2 = relay.Tuple([call_279,const_278,uop_283,uop_289,call_294,var_293,])
func_295 = relay.Function([var_253,var_293,], output)
mod['func_295'] = func_295
mod = relay.transform.InferType()(mod)
mutated_mod['func_295'] = func_295
mutated_mod = relay.transform.InferType()(mutated_mod)
func_295_call = mutated_mod.get_global_var('func_295')
var_297 = relay.var("var_297", dtype = "float32", shape = (10,))#candidate|297|(10,)|var|float32
var_298 = relay.var("var_298", dtype = "uint64", shape = (1, 13))#candidate|298|(1, 13)|var|uint64
call_296 = func_295_call(var_297,var_298,)
output = call_296
func_299 = relay.Function([var_297,var_298,], output)
mutated_mod['func_299'] = func_299
mutated_mod = relay.transform.InferType()(mutated_mod)
func_135_call = mod.get_global_var('func_135')
func_137_call = mutated_mod.get_global_var('func_137')
call_304 = relay.TupleGetItem(func_135_call(), 6)
call_305 = relay.TupleGetItem(func_137_call(), 6)
output = relay.Tuple([call_304,])
output2 = relay.Tuple([call_305,])
func_309 = relay.Function([], output)
mod['func_309'] = func_309
mod = relay.transform.InferType()(mod)
output = func_309()
func_310 = relay.Function([], output)
mutated_mod['func_310'] = func_310
mutated_mod = relay.transform.InferType()(mutated_mod)
func_135_call = mod.get_global_var('func_135')
func_137_call = mutated_mod.get_global_var('func_137')
call_323 = relay.TupleGetItem(func_135_call(), 7)
call_324 = relay.TupleGetItem(func_137_call(), 7)
output = call_323
output2 = call_324
func_325 = relay.Function([], output)
mod['func_325'] = func_325
mod = relay.transform.InferType()(mod)
mutated_mod['func_325'] = func_325
mutated_mod = relay.transform.InferType()(mutated_mod)
func_325_call = mutated_mod.get_global_var('func_325')
call_326 = func_325_call()
output = call_326
func_327 = relay.Function([], output)
mutated_mod['func_327'] = func_327
mutated_mod = relay.transform.InferType()(mutated_mod)
var_346 = relay.var("var_346", dtype = "float32", shape = (13, 8, 3))#candidate|346|(13, 8, 3)|var|float32
uop_347 = relay.acosh(var_346.astype('float32')) # shape=(13, 8, 3)
bop_350 = relay.bitwise_or(uop_347.astype('uint16'), relay.reshape(var_346.astype('uint16'), relay.shape_of(uop_347))) # shape=(13, 8, 3)
output = relay.Tuple([bop_350,])
output2 = relay.Tuple([bop_350,])
func_354 = relay.Function([var_346,], output)
mod['func_354'] = func_354
mod = relay.transform.InferType()(mod)
var_355 = relay.var("var_355", dtype = "float32", shape = (13, 8, 3))#candidate|355|(13, 8, 3)|var|float32
output = func_354(var_355)
func_356 = relay.Function([var_355], output)
mutated_mod['func_356'] = func_356
mutated_mod = relay.transform.InferType()(mutated_mod)
var_418 = relay.var("var_418", dtype = "bool", shape = (11, 12))#candidate|418|(11, 12)|var|bool
var_419 = relay.var("var_419", dtype = "bool", shape = (11, 12))#candidate|419|(11, 12)|var|bool
bop_420 = relay.logical_or(var_418.astype('bool'), relay.reshape(var_419.astype('bool'), relay.shape_of(var_418))) # shape=(11, 12)
uop_426 = relay.rsqrt(var_418.astype('float64')) # shape=(11, 12)
func_154_call = mod.get_global_var('func_154')
func_156_call = mutated_mod.get_global_var('func_156')
var_429 = relay.var("var_429", dtype = "float32", shape = (224,))#candidate|429|(224,)|var|float32
call_428 = relay.TupleGetItem(func_154_call(relay.reshape(var_429.astype('float32'), [16, 14])), 0)
call_430 = relay.TupleGetItem(func_156_call(relay.reshape(var_429.astype('float32'), [16, 14])), 0)
uop_431 = relay.sin(uop_426.astype('float32')) # shape=(11, 12)
output = relay.Tuple([bop_420,call_428,var_429,uop_431,])
output2 = relay.Tuple([bop_420,call_430,var_429,uop_431,])
func_436 = relay.Function([var_418,var_419,var_429,], output)
mod['func_436'] = func_436
mod = relay.transform.InferType()(mod)
var_437 = relay.var("var_437", dtype = "bool", shape = (11, 12))#candidate|437|(11, 12)|var|bool
var_438 = relay.var("var_438", dtype = "bool", shape = (11, 12))#candidate|438|(11, 12)|var|bool
var_439 = relay.var("var_439", dtype = "float32", shape = (224,))#candidate|439|(224,)|var|float32
output = func_436(var_437,var_438,var_439,)
func_440 = relay.Function([var_437,var_438,var_439,], output)
mutated_mod['func_440'] = func_440
mutated_mod = relay.transform.InferType()(mutated_mod)
func_160_call = mod.get_global_var('func_160')
func_162_call = mutated_mod.get_global_var('func_162')
call_464 = relay.TupleGetItem(func_160_call(), 0)
call_465 = relay.TupleGetItem(func_162_call(), 0)
func_154_call = mod.get_global_var('func_154')
func_156_call = mutated_mod.get_global_var('func_156')
var_469 = relay.var("var_469", dtype = "float32", shape = (224,))#candidate|469|(224,)|var|float32
call_468 = relay.TupleGetItem(func_154_call(relay.reshape(var_469.astype('float32'), [16, 14])), 0)
call_470 = relay.TupleGetItem(func_156_call(relay.reshape(var_469.astype('float32'), [16, 14])), 0)
func_160_call = mod.get_global_var('func_160')
func_162_call = mutated_mod.get_global_var('func_162')
call_478 = relay.TupleGetItem(func_160_call(), 0)
call_479 = relay.TupleGetItem(func_162_call(), 0)
uop_480 = relay.atan(call_478.astype('float64')) # shape=(9, 15)
uop_482 = relay.atan(call_479.astype('float64')) # shape=(9, 15)
bop_485 = relay.right_shift(uop_480.astype('uint32'), relay.reshape(call_478.astype('uint32'), relay.shape_of(uop_480))) # shape=(9, 15)
bop_488 = relay.right_shift(uop_482.astype('uint32'), relay.reshape(call_479.astype('uint32'), relay.shape_of(uop_482))) # shape=(9, 15)
func_160_call = mod.get_global_var('func_160')
func_162_call = mutated_mod.get_global_var('func_162')
call_497 = relay.TupleGetItem(func_160_call(), 0)
call_498 = relay.TupleGetItem(func_162_call(), 0)
bop_507 = relay.add(bop_485.astype('int16'), relay.reshape(call_497.astype('int16'), relay.shape_of(bop_485))) # shape=(9, 15)
bop_510 = relay.add(bop_488.astype('int16'), relay.reshape(call_498.astype('int16'), relay.shape_of(bop_488))) # shape=(9, 15)
output = relay.Tuple([call_464,call_468,var_469,bop_507,])
output2 = relay.Tuple([call_465,call_470,var_469,bop_510,])
func_511 = relay.Function([var_469,], output)
mod['func_511'] = func_511
mod = relay.transform.InferType()(mod)
mutated_mod['func_511'] = func_511
mutated_mod = relay.transform.InferType()(mutated_mod)
var_512 = relay.var("var_512", dtype = "float32", shape = (224,))#candidate|512|(224,)|var|float32
func_511_call = mutated_mod.get_global_var('func_511')
call_513 = func_511_call(var_512)
output = call_513
func_514 = relay.Function([var_512], output)
mutated_mod['func_514'] = func_514
mutated_mod = relay.transform.InferType()(mutated_mod)
func_309_call = mod.get_global_var('func_309')
func_310_call = mutated_mod.get_global_var('func_310')
call_518 = relay.TupleGetItem(func_309_call(), 0)
call_519 = relay.TupleGetItem(func_310_call(), 0)
output = relay.Tuple([call_518,])
output2 = relay.Tuple([call_519,])
func_525 = relay.Function([], output)
mod['func_525'] = func_525
mod = relay.transform.InferType()(mod)
output = func_525()
func_526 = relay.Function([], output)
mutated_mod['func_526'] = func_526
mutated_mod = relay.transform.InferType()(mutated_mod)
var_537 = relay.var("var_537", dtype = "float32", shape = (3, 13))#candidate|537|(3, 13)|var|float32
const_538 = relay.const([[-1.100951,9.236407,-2.888019,8.447082,-6.605655,-4.495376,1.570676,-6.288236,-7.682138,-9.237591,-5.789319,2.629842,-7.827611],[0.219720,9.854399,5.133550,-7.838959,-7.605305,3.231184,1.661921,0.951095,-3.873536,1.104832,-2.091589,-4.081687,-7.692150],[-6.367100,1.920466,-9.864147,1.799566,6.803910,2.449585,-9.438384,-4.600396,-3.865964,7.673931,-6.163992,-2.967545,-6.395256]], dtype = "float32")#candidate|538|(3, 13)|const|float32
bop_539 = relay.less_equal(var_537.astype('bool'), relay.reshape(const_538.astype('bool'), relay.shape_of(var_537))) # shape=(3, 13)
uop_542 = relay.sinh(bop_539.astype('float32')) # shape=(3, 13)
func_511_call = mod.get_global_var('func_511')
func_514_call = mutated_mod.get_global_var('func_514')
const_546 = relay.const([-3.570960,-5.813128,-8.781581,-7.420155,9.561041,2.034930,-4.934918,-9.876867,-8.300634,-9.109124,4.173833,-3.324680,4.568922,-9.419456,-7.572414,4.624653,-1.379842,1.083346,-5.040140,-8.237231,-6.462842,-0.421646,-4.976169,-2.559575,9.104489,3.796915,3.589006,-6.012563,-7.596369,7.585923,-1.542514,8.347289,0.345881,6.525061,-7.149308,3.560783,8.118069,-4.424924,-8.093989,-3.876948,8.522332,-2.505428,-4.623996,0.837290,3.800474,1.385131,4.358869,4.771886,9.218583,1.214634,-1.826292,-4.935271,-0.996800,-1.911300,8.400323,-1.155304,-9.141687,9.122584,9.770051,9.223795,-8.211449,-5.610737,-8.511928,-8.925278,-0.720433,4.093349,-2.312794,8.165737,-0.472776,-2.553400,-5.687849,-3.053498,2.513832,8.119411,-1.783674,-2.044949,3.895250,8.921416,-5.382529,2.590336,1.681065,3.016123,-4.409024,-0.298087,-5.721460,9.663462,0.935988,4.874880,0.613403,0.607797,-9.382043,-4.005748,-0.753974,6.327450,1.688149,0.019998,8.700306,5.122353,9.444431,1.635471,-9.818518,7.992903,-1.677588,-7.197689,4.407671,-6.671087,2.557466,-3.579868,-3.135440,-0.588856,-5.592041,-7.016523,7.374254,-7.195738,5.252546,-3.122149,-3.839000,9.298426,6.912068,-5.343150,9.568823,-4.888828,-7.915155,-8.941455,-1.018738,-8.963887,-8.950964,-6.835801,-3.029521,5.719862,-6.220705,0.702678,9.648150,-5.149867,9.774406,5.385916,9.581714,0.172890,-7.122948,-0.801002,7.512012,-5.104984,0.780242,7.302311,7.689134,9.297687,-4.082469,-4.614612,0.411057,-7.804958,0.117091,0.352675,0.158990,-8.177844,-2.046237,-8.426905,-8.458534,9.860842,-5.158623,7.244752,1.178585,5.062298,-7.990370,2.949767,-9.179757,-9.294163,-8.001328,-8.568366,-5.332741,7.776177,2.884224,-2.744377,-7.125635,5.190164,-8.059261,-0.176518,2.670624,-6.853832,3.639301,3.183829,3.704729,-9.724388,4.490636,-3.551327,8.771051,-5.945502,9.830497,-2.585652,8.802679,-5.010776,7.978060,8.471994,8.108998,-0.563990,-6.083269,-8.704485,1.902661,0.812187,-4.291603,-7.431820,0.385428,-4.756539,-0.541371,4.140217,8.894696,4.992309,-5.393719,6.728956,-3.066689,4.136528,-3.059284,2.204804,-2.114744,-9.526153,-7.164950,-6.272337,-7.554300,-6.576231,-2.172983,-6.467246,-0.124077,-2.811138,-0.040308,-6.544664], dtype = "float32")#candidate|546|(224,)|const|float32
call_545 = relay.TupleGetItem(func_511_call(relay.reshape(const_546.astype('float32'), [224,])), 3)
call_547 = relay.TupleGetItem(func_514_call(relay.reshape(const_546.astype('float32'), [224,])), 3)
uop_550 = relay.atan(uop_542.astype('float64')) # shape=(3, 13)
bop_552 = relay.less(uop_542.astype('bool'), relay.reshape(const_538.astype('bool'), relay.shape_of(uop_542))) # shape=(3, 13)
uop_556 = relay.erf(uop_542.astype('float64')) # shape=(3, 13)
func_436_call = mod.get_global_var('func_436')
func_440_call = mutated_mod.get_global_var('func_440')
var_559 = relay.var("var_559", dtype = "bool", shape = (132,))#candidate|559|(132,)|var|bool
call_558 = relay.TupleGetItem(func_436_call(relay.reshape(var_559.astype('bool'), [11, 12]), relay.reshape(var_559.astype('bool'), [11, 12]), relay.reshape(const_546.astype('float32'), [224,]), ), 2)
call_560 = relay.TupleGetItem(func_440_call(relay.reshape(var_559.astype('bool'), [11, 12]), relay.reshape(var_559.astype('bool'), [11, 12]), relay.reshape(const_546.astype('float32'), [224,]), ), 2)
bop_562 = relay.left_shift(uop_550.astype('int8'), relay.reshape(bop_539.astype('int8'), relay.shape_of(uop_550))) # shape=(3, 13)
uop_567 = relay.log10(uop_550.astype('float64')) # shape=(3, 13)
bop_569 = relay.maximum(uop_567.astype('int64'), relay.reshape(uop_550.astype('int64'), relay.shape_of(uop_567))) # shape=(3, 13)
bop_578 = relay.minimum(uop_556.astype('int8'), relay.reshape(bop_562.astype('int8'), relay.shape_of(uop_556))) # shape=(3, 13)
bop_582 = relay.logical_xor(bop_569.astype('uint16'), relay.reshape(bop_552.astype('uint16'), relay.shape_of(bop_569))) # shape=(3, 13)
func_154_call = mod.get_global_var('func_154')
func_156_call = mutated_mod.get_global_var('func_156')
call_591 = relay.TupleGetItem(func_154_call(relay.reshape(const_546.astype('float32'), [16, 14])), 0)
call_592 = relay.TupleGetItem(func_156_call(relay.reshape(const_546.astype('float32'), [16, 14])), 0)
bop_593 = relay.floor_divide(bop_582.astype('float32'), relay.reshape(bop_562.astype('float32'), relay.shape_of(bop_582))) # shape=(3, 13)
uop_602 = relay.acos(bop_578.astype('float64')) # shape=(3, 13)
uop_605 = relay.log(bop_582.astype('float64')) # shape=(3, 13)
output = relay.Tuple([call_545,const_546,call_558,var_559,call_591,bop_593,uop_602,uop_605,])
output2 = relay.Tuple([call_547,const_546,call_560,var_559,call_592,bop_593,uop_602,uop_605,])
func_613 = relay.Function([var_537,var_559,], output)
mod['func_613'] = func_613
mod = relay.transform.InferType()(mod)
var_614 = relay.var("var_614", dtype = "float32", shape = (3, 13))#candidate|614|(3, 13)|var|float32
var_615 = relay.var("var_615", dtype = "bool", shape = (132,))#candidate|615|(132,)|var|bool
output = func_613(var_614,var_615,)
func_616 = relay.Function([var_614,var_615,], output)
mutated_mod['func_616'] = func_616
mutated_mod = relay.transform.InferType()(mutated_mod)
func_325_call = mod.get_global_var('func_325')
func_327_call = mutated_mod.get_global_var('func_327')
call_618 = func_325_call()
call_619 = func_325_call()
func_295_call = mod.get_global_var('func_295')
func_299_call = mutated_mod.get_global_var('func_299')
const_624 = relay.const([-1.046932,2.435712,-7.607561,0.500561,1.054655,-4.548807,7.857451,5.397298,-6.678833,7.573895], dtype = "float32")#candidate|624|(10,)|const|float32
var_625 = relay.var("var_625", dtype = "uint64", shape = (13,))#candidate|625|(13,)|var|uint64
call_623 = relay.TupleGetItem(func_295_call(relay.reshape(const_624.astype('float32'), [10,]), relay.reshape(var_625.astype('uint64'), [1, 13]), ), 2)
call_626 = relay.TupleGetItem(func_299_call(relay.reshape(const_624.astype('float32'), [10,]), relay.reshape(var_625.astype('uint64'), [1, 13]), ), 2)
var_632 = relay.var("var_632", dtype = "uint64", shape = (13,))#candidate|632|(13,)|var|uint64
bop_633 = relay.left_shift(var_625.astype('int16'), relay.reshape(var_632.astype('int16'), relay.shape_of(var_625))) # shape=(13,)
bop_643 = relay.floor_mod(bop_633.astype('float64'), relay.reshape(var_632.astype('float64'), relay.shape_of(bop_633))) # shape=(13,)
func_154_call = mod.get_global_var('func_154')
func_156_call = mutated_mod.get_global_var('func_156')
const_668 = relay.const([-5.835779,-3.829247,7.441480,6.862055,-6.470998,7.572819,5.227312,-3.712228,6.904210,-0.878553,5.984915,-9.269313,8.195270,-4.655180,-6.449340,-2.289943,8.086310,4.398713,7.960238,-2.891985,-9.360096,9.252010,-7.025689,3.795548,4.712414,4.553495,-0.279108,4.312062,-3.846585,-9.252957,-2.782026,-7.332503,2.957486,-6.189169,-8.641753,7.535122,4.015489,-8.482410,-9.982878,8.043733,-4.270531,-8.575460,0.711779,-1.216066,2.606526,-3.881256,1.803583,7.315724,6.456439,7.999820,-3.748715,-3.528808,-3.334261,-9.461569,-3.204749,-6.926991,-6.040844,0.424394,-0.892759,-6.402871,-4.812963,3.908667,8.814068,9.913479,0.066248,-7.259415,3.273457,4.516520,7.128240,-8.161340,5.121422,-7.935837,1.958276,8.583733,-9.385616,-7.955301,6.202927,-2.415226,-8.508590,7.202293,8.331282,-1.407140,-0.645138,-3.318061,6.025545,5.368160,7.228226,-8.655191,-2.869632,-2.708638,6.003605,7.721382,-4.057122,3.263801,3.358472,-4.835572,-5.214318,3.794387,-3.430251,3.519797,-0.519699,9.901071,-0.835886,0.311657,9.934382,7.696444,-5.195333,6.173679,7.024916,6.710265,7.879569,0.754607,-3.039368,-3.431981,-5.646684,-9.706839,2.068792,-0.384771,-0.732516,-9.854655,7.963531,-6.292304,-8.273703,-0.327263,4.353104,3.288516,-4.267920,-8.420754,5.534098,1.313645,-4.682604,4.216780,6.433155,-8.459881,7.463056,-2.006296,-2.544259,-8.104027,-9.494833,-8.291831,-5.645039,6.183124,-4.865233,-1.035028,-1.538341,5.887086,1.690915,-3.446792,-6.610340,-0.083168,4.364682,-5.627589,-6.500399,4.356037,-3.529829,-7.745209,1.143552,8.279269,5.773254,7.772525,5.564345,9.862334,2.127139,-0.059159,-7.143762,0.647261,2.543374,6.068542,-7.108849,-8.391511,5.307001,-9.512446,-3.877987,-0.666629,6.796450,-4.570462,6.560908,0.463387,5.451556,-9.963031,4.125098,-2.593226,-0.885662,-2.366610,-1.708483,4.714246,8.053872,-3.119420,4.082855,0.650058,-9.863500,0.344826,7.723387,8.823988,-1.949737,-2.048274,2.948962,-1.285902,0.613514,9.945180,-1.781840,5.965375,-8.349238,8.447882,-2.678031,-5.902740,-9.126430,-2.535742,-5.596984,2.117734,-3.604036,-0.126652,-6.539428,1.910348,7.840764,9.651385,1.995662,3.445125,-3.859612,4.133897,-2.804848,2.126498,3.295608,-9.129206], dtype = "float32")#candidate|668|(224,)|const|float32
call_667 = relay.TupleGetItem(func_154_call(relay.reshape(const_668.astype('float32'), [16, 14])), 0)
call_669 = relay.TupleGetItem(func_156_call(relay.reshape(const_668.astype('float32'), [16, 14])), 0)
bop_680 = relay.left_shift(bop_633.astype('uint8'), relay.reshape(var_625.astype('uint8'), relay.shape_of(bop_633))) # shape=(13,)
var_689 = relay.var("var_689", dtype = "float64", shape = (13,))#candidate|689|(13,)|var|float64
bop_690 = relay.multiply(bop_643.astype('int16'), relay.reshape(var_689.astype('int16'), relay.shape_of(bop_643))) # shape=(13,)
const_693 = relay.const([-5,3,6,3,9,-10,-7,-2,7,10,-4,7,-3], dtype = "uint8")#candidate|693|(13,)|const|uint8
bop_694 = relay.less(bop_680.astype('bool'), relay.reshape(const_693.astype('bool'), relay.shape_of(bop_680))) # shape=(13,)
output = relay.Tuple([call_618,call_623,const_624,call_667,const_668,bop_690,bop_694,])
output2 = relay.Tuple([call_619,call_626,const_624,call_669,const_668,bop_690,bop_694,])
func_699 = relay.Function([var_625,var_632,var_689,], output)
mod['func_699'] = func_699
mod = relay.transform.InferType()(mod)
var_700 = relay.var("var_700", dtype = "uint64", shape = (13,))#candidate|700|(13,)|var|uint64
var_701 = relay.var("var_701", dtype = "uint64", shape = (13,))#candidate|701|(13,)|var|uint64
var_702 = relay.var("var_702", dtype = "float64", shape = (13,))#candidate|702|(13,)|var|float64
output = func_699(var_700,var_701,var_702,)
func_703 = relay.Function([var_700,var_701,var_702,], output)
mutated_mod['func_703'] = func_703
mutated_mod = relay.transform.InferType()(mutated_mod)
var_708 = relay.var("var_708", dtype = "float32", shape = (11,))#candidate|708|(11,)|var|float32
var_709 = relay.var("var_709", dtype = "float32", shape = (11,))#candidate|709|(11,)|var|float32
bop_710 = relay.floor_mod(var_708.astype('float32'), relay.reshape(var_709.astype('float32'), relay.shape_of(var_708))) # shape=(11,)
func_613_call = mod.get_global_var('func_613')
func_616_call = mutated_mod.get_global_var('func_616')
const_714 = relay.const([-1.623383,1.378972,0.392276,3.343180,-8.708322,9.862393,-3.961629,-7.759984,0.179718,3.575936,-4.158135,3.715841,-6.183328,-5.440141,-4.194179,3.451873,8.856894,-0.357800,-5.700241,-3.324906,-9.947085,8.707016,1.243219,7.305580,-2.180790,-1.362982,-6.055126,7.646421,9.442980,-1.911535,9.633901,-0.551251,1.536572,-8.645937,-7.138469,-7.362511,-0.015573,-1.042377,-7.924420], dtype = "float32")#candidate|714|(39,)|const|float32
var_715 = relay.var("var_715", dtype = "bool", shape = (3, 44))#candidate|715|(3, 44)|var|bool
call_713 = relay.TupleGetItem(func_613_call(relay.reshape(const_714.astype('float32'), [3, 13]), relay.reshape(var_715.astype('bool'), [132,]), ), 1)
call_716 = relay.TupleGetItem(func_616_call(relay.reshape(const_714.astype('float32'), [3, 13]), relay.reshape(var_715.astype('bool'), [132,]), ), 1)
bop_722 = relay.add(bop_710.astype('uint8'), relay.reshape(var_708.astype('uint8'), relay.shape_of(bop_710))) # shape=(11,)
uop_730 = relay.asinh(var_709.astype('float32')) # shape=(11,)
const_732 = relay.const([5.347104,1.726940,6.430099,6.074263,-7.514667,-2.608475,1.489113,4.718652,4.823087,7.320678,-2.863217,-4.772649,2.416562,-5.432375,-0.952876,1.199928,-9.736674,-0.716992,-2.396421,5.884153,9.425326,7.755163,3.140046,7.345248,-1.464074,6.486665,1.876248,-7.581164,2.374697,-4.924437,-2.489067,3.153151,-5.897459,9.258505,-6.339694,0.924215,-1.154758,-1.839376,-4.588973], dtype = "float32")#candidate|732|(39,)|const|float32
bop_733 = relay.floor_mod(const_714.astype('float64'), relay.reshape(const_732.astype('float64'), relay.shape_of(const_714))) # shape=(39,)
func_325_call = mod.get_global_var('func_325')
func_327_call = mutated_mod.get_global_var('func_327')
call_738 = func_325_call()
call_739 = func_325_call()
bop_741 = relay.logical_or(uop_730.astype('bool'), relay.reshape(bop_710.astype('bool'), relay.shape_of(uop_730))) # shape=(11,)
output = relay.Tuple([call_713,var_715,bop_722,bop_733,call_738,bop_741,])
output2 = relay.Tuple([call_716,var_715,bop_722,bop_733,call_739,bop_741,])
func_744 = relay.Function([var_708,var_709,var_715,], output)
mod['func_744'] = func_744
mod = relay.transform.InferType()(mod)
var_745 = relay.var("var_745", dtype = "float32", shape = (11,))#candidate|745|(11,)|var|float32
var_746 = relay.var("var_746", dtype = "float32", shape = (11,))#candidate|746|(11,)|var|float32
var_747 = relay.var("var_747", dtype = "bool", shape = (3, 44))#candidate|747|(3, 44)|var|bool
output = func_744(var_745,var_746,var_747,)
func_748 = relay.Function([var_745,var_746,var_747,], output)
mutated_mod['func_748'] = func_748
mutated_mod = relay.transform.InferType()(mutated_mod)
var_763 = relay.var("var_763", dtype = "int32", shape = (13, 3, 6))#candidate|763|(13, 3, 6)|var|int32
var_764 = relay.var("var_764", dtype = "int32", shape = (13, 3, 6))#candidate|764|(13, 3, 6)|var|int32
bop_765 = relay.logical_xor(var_763.astype('int32'), relay.reshape(var_764.astype('int32'), relay.shape_of(var_763))) # shape=(13, 3, 6)
func_295_call = mod.get_global_var('func_295')
func_299_call = mutated_mod.get_global_var('func_299')
const_774 = relay.const([[-5.634773],[3.793578],[-7.264522],[-1.500923],[-4.402568],[8.693799],[5.006881],[1.339931],[1.949762],[5.883746]], dtype = "float32")#candidate|774|(10, 1)|const|float32
const_775 = relay.const([3,-2,-3,9,-10,-3,4,8,-3,-4,-10,3,-4], dtype = "uint64")#candidate|775|(13,)|const|uint64
call_773 = relay.TupleGetItem(func_295_call(relay.reshape(const_774.astype('float32'), [10,]), relay.reshape(const_775.astype('uint64'), [1, 13]), ), 4)
call_776 = relay.TupleGetItem(func_299_call(relay.reshape(const_774.astype('float32'), [10,]), relay.reshape(const_775.astype('uint64'), [1, 13]), ), 4)
bop_785 = relay.not_equal(const_775.astype('bool'), relay.reshape(call_773.astype('bool'), relay.shape_of(const_775))) # shape=(13,)
bop_788 = relay.not_equal(const_775.astype('bool'), relay.reshape(call_776.astype('bool'), relay.shape_of(const_775))) # shape=(13,)
uop_794 = relay.acosh(bop_785.astype('float32')) # shape=(13,)
uop_796 = relay.acosh(bop_788.astype('float32')) # shape=(13,)
bop_800 = relay.right_shift(bop_765.astype('uint64'), relay.reshape(var_764.astype('uint64'), relay.shape_of(bop_765))) # shape=(13, 3, 6)
bop_803 = relay.floor_divide(uop_794.astype('float32'), const_774.astype('float32')) # shape=(10, 13)
bop_806 = relay.floor_divide(uop_796.astype('float32'), const_774.astype('float32')) # shape=(10, 13)
uop_807 = relay.exp(call_773.astype('float32')) # shape=(13,)
uop_809 = relay.exp(call_776.astype('float32')) # shape=(13,)
bop_810 = relay.less(bop_803.astype('bool'), uop_807.astype('bool')) # shape=(10, 13)
bop_813 = relay.less(bop_806.astype('bool'), uop_809.astype('bool')) # shape=(10, 13)
uop_815 = relay.log10(uop_794.astype('float64')) # shape=(13,)
uop_817 = relay.log10(uop_796.astype('float64')) # shape=(13,)
bop_820 = relay.logical_or(uop_815.astype('bool'), relay.reshape(const_775.astype('bool'), relay.shape_of(uop_815))) # shape=(13,)
bop_823 = relay.logical_or(uop_817.astype('bool'), relay.reshape(const_775.astype('bool'), relay.shape_of(uop_817))) # shape=(13,)
uop_824 = relay.sigmoid(uop_807.astype('float64')) # shape=(13,)
uop_826 = relay.sigmoid(uop_809.astype('float64')) # shape=(13,)
bop_828 = relay.bitwise_xor(uop_815.astype('uint16'), bop_810.astype('uint16')) # shape=(10, 13)
bop_831 = relay.bitwise_xor(uop_817.astype('uint16'), bop_813.astype('uint16')) # shape=(10, 13)
bop_832 = relay.less_equal(uop_807.astype('bool'), relay.reshape(uop_794.astype('bool'), relay.shape_of(uop_807))) # shape=(13,)
bop_835 = relay.less_equal(uop_809.astype('bool'), relay.reshape(uop_796.astype('bool'), relay.shape_of(uop_809))) # shape=(13,)
bop_839 = relay.bitwise_and(const_775.astype('uint8'), bop_828.astype('uint8')) # shape=(10, 13)
bop_842 = relay.bitwise_and(const_775.astype('uint8'), bop_831.astype('uint8')) # shape=(10, 13)
func_154_call = mod.get_global_var('func_154')
func_156_call = mutated_mod.get_global_var('func_156')
const_848 = relay.const([-5.384054,4.007879,8.130703,-2.433796,-1.982776,-5.762273,-0.303824,-6.201244,-6.402558,6.396956,-3.605852,1.054285,-7.968678,1.960076,-5.039160,5.664688,4.901122,-5.992610,7.412286,9.822497,-1.251737,3.036216,-0.082924,0.677580,1.233344,3.977616,4.314819,-0.845682,-7.672893,-9.098715,-0.819320,9.258187,-9.765056,-4.632330,2.181941,-6.005945,5.413651,-6.908342,0.076395,0.842242,8.660908,-6.371729,6.537700,-6.468268,2.370378,7.390300,2.761850,3.382068,-1.270669,8.609782,-4.760557,-8.658069,4.921833,6.778313,-9.526676,2.200350,0.915287,1.332968,-9.573229,7.115906,-8.774679,-2.605134,3.889084,0.719903,9.388567,8.994719,-6.065342,-0.402326,5.532623,-8.387784,-7.460634,9.409348,-8.296080,-8.704454,-9.810037,-4.934026,-5.470014,-0.638123,-9.361762,-9.550135,-8.128751,1.613443,9.644324,-6.070815,-8.429568,-1.276892,2.997774,-3.637243,-0.795169,-7.878010,-7.464495,6.035030,3.760598,3.528350,-4.596824,-2.902807,9.864448,8.500016,1.178984,8.367352,6.546318,-0.690956,7.288748,-9.005721,7.191200,0.515321,7.842002,9.937767,-3.950933,-8.664032,-6.690014,-8.699805,7.394157,-0.829609,9.080637,-0.727091,9.238963,1.239690,5.674677,1.530256,4.615035,1.697653,8.567528,6.402272,8.673126,-5.038527,-7.671967,1.037653,1.644912,-0.313503,-3.820887,4.369953,9.909273,-4.891988,-3.504696,-3.503046,-3.511038,-1.439720,-7.220748,-3.650456,8.452272,4.611115,1.760981,1.749995,-0.802702,0.991582,-0.290813,-4.820896,-9.587296,2.575370,-1.187684,-2.742918,1.548366,9.418611,-2.108755,8.216988,-4.616458,-3.338950,5.446467,-6.107947,8.110064,-5.433761,-6.538166,-5.144833,-3.987031,9.858652,6.863131,3.384105,-1.967826,-7.960601,-8.550168,1.809942,-1.137087,-5.922345,1.633986,4.281791,1.682604,7.332609,-2.419470,-7.175598,5.643992,-8.440789,8.244867,1.887455,-2.737385,-2.768701,4.845837,1.111786,7.071871,4.706623,1.485124,-0.516569,0.030657,-1.064399,3.972518,-6.261458,1.658813,6.646209,-6.735353,-7.010799,-6.577409,-5.185140,-6.295667,2.752605,7.366505,1.921570,6.131044,1.460569,9.827380,-9.444848,-3.185116,6.402704,0.011132,-6.080335,1.059870,-0.352569,-9.855997,5.366325,4.782208,-6.055488,5.802203,4.863869,0.442176,0.454689], dtype = "float32")#candidate|848|(224,)|const|float32
call_847 = relay.TupleGetItem(func_154_call(relay.reshape(const_848.astype('float32'), [16, 14])), 0)
call_849 = relay.TupleGetItem(func_156_call(relay.reshape(const_848.astype('float32'), [16, 14])), 0)
func_154_call = mod.get_global_var('func_154')
func_156_call = mutated_mod.get_global_var('func_156')
call_850 = relay.TupleGetItem(func_154_call(relay.reshape(call_847.astype('float32'), [16, 14])), 0)
call_851 = relay.TupleGetItem(func_156_call(relay.reshape(call_847.astype('float32'), [16, 14])), 0)
uop_852 = relay.acos(uop_815.astype('float32')) # shape=(13,)
uop_854 = relay.acos(uop_817.astype('float32')) # shape=(13,)
uop_858 = relay.log10(bop_839.astype('float32')) # shape=(10, 13)
uop_860 = relay.log10(bop_842.astype('float32')) # shape=(10, 13)
func_325_call = mod.get_global_var('func_325')
func_327_call = mutated_mod.get_global_var('func_327')
call_864 = func_325_call()
call_865 = func_325_call()
output = relay.Tuple([bop_800,bop_820,uop_824,bop_832,call_847,const_848,call_850,uop_852,uop_858,call_864,])
output2 = relay.Tuple([bop_800,bop_823,uop_826,bop_835,call_849,const_848,call_851,uop_854,uop_860,call_865,])
func_868 = relay.Function([var_763,var_764,], output)
mod['func_868'] = func_868
mod = relay.transform.InferType()(mod)
var_869 = relay.var("var_869", dtype = "int32", shape = (13, 3, 6))#candidate|869|(13, 3, 6)|var|int32
var_870 = relay.var("var_870", dtype = "int32", shape = (13, 3, 6))#candidate|870|(13, 3, 6)|var|int32
output = func_868(var_869,var_870,)
func_871 = relay.Function([var_869,var_870,], output)
mutated_mod['func_871'] = func_871
mutated_mod = relay.transform.InferType()(mutated_mod)
const_898 = relay.const([-5.087183,5.887974,-7.324756,-4.380081,-5.053919], dtype = "float64")#candidate|898|(5,)|const|float64
uop_899 = relay.sin(const_898.astype('float64')) # shape=(5,)
output = uop_899
output2 = uop_899
func_904 = relay.Function([], output)
mod['func_904'] = func_904
mod = relay.transform.InferType()(mod)
mutated_mod['func_904'] = func_904
mutated_mod = relay.transform.InferType()(mutated_mod)
func_904_call = mutated_mod.get_global_var('func_904')
call_905 = func_904_call()
output = call_905
func_906 = relay.Function([], output)
mutated_mod['func_906'] = func_906
mutated_mod = relay.transform.InferType()(mutated_mod)
var_942 = relay.var("var_942", dtype = "float64", shape = (10, 9))#candidate|942|(10, 9)|var|float64
uop_943 = relay.cosh(var_942.astype('float64')) # shape=(10, 9)
bop_946 = relay.bitwise_and(uop_943.astype('int32'), relay.reshape(var_942.astype('int32'), relay.shape_of(uop_943))) # shape=(10, 9)
uop_949 = relay.log10(uop_943.astype('float32')) # shape=(10, 9)
uop_952 = relay.atan(uop_949.astype('float32')) # shape=(10, 9)
var_954 = relay.var("var_954", dtype = "float32", shape = (10, 9))#candidate|954|(10, 9)|var|float32
bop_955 = relay.bitwise_xor(uop_952.astype('uint32'), relay.reshape(var_954.astype('uint32'), relay.shape_of(uop_952))) # shape=(10, 9)
bop_959 = relay.floor_divide(bop_946.astype('float64'), relay.reshape(bop_955.astype('float64'), relay.shape_of(bop_946))) # shape=(10, 9)
bop_963 = relay.logical_and(uop_952.astype('bool'), relay.reshape(bop_955.astype('bool'), relay.shape_of(uop_952))) # shape=(10, 9)
uop_966 = relay.acos(bop_959.astype('float32')) # shape=(10, 9)
bop_968 = relay.add(uop_966.astype('uint32'), relay.reshape(bop_963.astype('uint32'), relay.shape_of(uop_966))) # shape=(10, 9)
bop_973 = relay.equal(bop_968.astype('bool'), relay.reshape(uop_949.astype('bool'), relay.shape_of(bop_968))) # shape=(10, 9)
output = relay.Tuple([bop_973,])
output2 = relay.Tuple([bop_973,])
func_979 = relay.Function([var_942,var_954,], output)
mod['func_979'] = func_979
mod = relay.transform.InferType()(mod)
mutated_mod['func_979'] = func_979
mutated_mod = relay.transform.InferType()(mutated_mod)
func_979_call = mutated_mod.get_global_var('func_979')
var_981 = relay.var("var_981", dtype = "float64", shape = (10, 9))#candidate|981|(10, 9)|var|float64
var_982 = relay.var("var_982", dtype = "float32", shape = (10, 9))#candidate|982|(10, 9)|var|float32
call_980 = func_979_call(var_981,var_982,)
output = call_980
func_983 = relay.Function([var_981,var_982,], output)
mutated_mod['func_983'] = func_983
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1004 = relay.var("var_1004", dtype = "int16", shape = ())#candidate|1004|()|var|int16
var_1005 = relay.var("var_1005", dtype = "int16", shape = (11, 15, 15))#candidate|1005|(11, 15, 15)|var|int16
bop_1006 = relay.less(var_1004.astype('bool'), var_1005.astype('bool')) # shape=(11, 15, 15)
bop_1009 = relay.less_equal(var_1004.astype('bool'), bop_1006.astype('bool')) # shape=(11, 15, 15)
const_1012 = relay.const([[[False,False,True,False,False,True,True,True,True,True,True,True,False,False,True],[False,False,False,False,True,False,True,True,False,True,False,True,False,True,True],[True,True,True,False,False,False,True,True,True,False,False,True,True,False,True],[False,True,False,True,True,True,True,False,False,True,True,False,False,False,True],[True,True,False,True,True,False,True,True,False,False,True,False,True,True,True],[True,True,False,True,False,True,False,True,True,False,True,True,False,True,True],[True,True,False,True,False,True,False,True,False,False,True,False,False,True,True],[True,False,False,True,True,True,False,True,False,False,True,True,True,True,True],[False,False,False,False,True,False,True,True,True,False,True,False,False,False,True],[True,True,True,True,True,False,False,True,True,True,True,False,False,False,True],[True,False,True,True,False,True,True,False,False,False,False,False,True,False,False],[False,True,True,False,False,False,False,True,False,False,False,True,False,False,False],[False,False,False,True,True,True,False,True,True,True,True,True,True,False,True],[True,True,False,False,True,False,True,True,True,True,True,True,False,False,False],[False,False,False,True,True,True,False,False,False,True,True,False,False,False,False]],[[True,True,True,True,True,False,True,False,False,True,True,True,False,False,True],[False,False,True,False,True,True,False,True,True,False,False,False,False,False,False],[True,True,True,False,False,False,True,False,True,True,True,False,False,True,False],[False,False,True,True,False,False,False,False,False,True,True,False,True,True,True],[True,False,False,False,True,True,True,False,True,False,True,False,False,True,True],[True,True,True,False,True,False,False,True,False,False,True,True,True,False,True],[False,False,True,False,False,False,True,True,False,False,True,True,False,False,True],[False,True,False,True,True,True,True,True,True,False,False,False,True,True,False],[False,True,False,False,True,True,False,True,False,True,True,False,False,False,False],[True,False,True,False,True,False,True,True,True,False,True,True,False,False,False],[True,True,True,True,True,True,False,True,False,True,False,True,True,True,True],[True,False,True,False,False,True,False,False,False,True,False,True,True,True,True],[True,False,False,True,True,True,False,False,True,False,True,True,True,False,False],[True,True,True,False,True,True,True,True,True,True,False,False,False,True,True],[False,True,True,False,False,False,False,False,False,True,False,True,False,True,True]],[[True,False,False,False,True,True,True,False,False,True,False,True,True,False,False],[False,False,True,True,True,True,True,True,True,False,False,True,True,False,True],[True,True,True,True,True,False,True,True,True,True,False,True,False,True,True],[True,True,False,False,False,True,False,True,False,True,True,False,True,True,False],[False,False,False,True,True,True,False,False,False,True,False,False,False,False,True],[True,True,False,True,False,False,False,False,False,False,True,True,False,False,False],[True,False,False,True,False,False,False,False,False,True,True,False,True,True,True],[True,False,False,True,False,False,False,False,False,False,True,False,True,True,False],[False,False,True,False,True,True,False,False,True,True,True,False,True,False,True],[False,True,True,True,True,True,True,True,False,False,True,True,False,False,False],[False,False,True,True,True,False,False,True,False,True,False,True,True,False,False],[False,False,True,False,True,False,True,True,True,True,True,False,False,True,True],[True,True,True,False,True,False,False,True,False,True,True,False,False,False,False],[False,True,True,False,True,False,False,False,True,False,False,False,False,False,True],[True,True,True,True,True,False,True,False,True,True,True,False,False,True,True]],[[False,False,False,True,False,True,False,False,True,True,False,True,False,True,False],[True,False,True,False,True,True,False,True,True,False,False,False,False,False,True],[True,True,True,True,False,True,False,False,False,False,False,False,True,False,True],[True,True,False,True,False,True,False,False,False,True,False,True,True,True,True],[False,False,False,False,False,True,True,False,True,True,False,True,False,False,True],[True,True,True,True,False,True,True,False,True,True,True,False,False,False,True],[False,True,True,False,True,True,True,False,False,True,False,False,False,False,False],[False,True,False,True,True,False,False,False,True,True,True,False,True,False,True],[False,False,False,False,False,True,True,False,True,True,True,True,False,True,True],[False,True,True,False,False,False,True,False,False,False,False,True,False,True,True],[True,False,True,True,False,False,False,True,False,False,True,True,True,True,False],[True,True,False,False,False,False,False,True,True,False,True,True,True,True,False],[True,True,False,False,False,False,False,True,False,False,True,True,True,False,False],[False,True,True,False,True,True,False,True,False,True,True,True,False,True,True],[True,False,False,True,False,False,False,True,True,False,True,False,True,True,True]],[[True,True,False,False,True,False,False,True,True,False,True,True,False,True,False],[True,False,False,True,False,False,True,False,True,True,False,True,True,True,False],[False,False,True,True,False,False,True,False,True,False,True,False,True,True,False],[True,False,False,True,True,False,False,False,False,True,True,False,False,True,True],[False,True,True,True,False,False,True,True,False,True,False,True,True,True,False],[True,True,False,False,False,True,False,False,False,True,False,True,True,False,False],[True,True,False,False,False,False,False,False,False,True,True,False,False,False,True],[True,False,False,True,False,True,True,False,True,True,True,True,False,True,False],[True,False,True,True,False,True,True,True,True,True,False,False,True,False,True],[True,True,True,True,True,True,False,False,True,False,True,True,True,True,False],[True,False,False,False,True,False,False,True,True,True,False,True,False,False,False],[True,True,True,False,False,False,True,True,False,False,True,True,True,False,True],[True,False,True,True,False,True,False,False,False,True,False,False,True,False,False],[True,True,True,False,True,False,True,False,True,True,False,False,True,False,False],[False,True,False,True,True,True,False,True,True,False,False,True,True,True,True]],[[True,False,False,True,True,True,True,False,True,False,True,False,False,False,False],[False,False,True,True,False,False,False,False,True,True,True,False,True,False,True],[False,True,False,True,False,True,False,True,True,False,True,False,False,True,True],[False,False,True,True,True,True,False,True,False,True,False,True,True,True,True],[True,False,False,True,True,True,False,True,False,True,True,False,True,True,True],[False,True,True,False,True,False,True,True,True,True,False,False,False,False,True],[True,True,True,False,False,False,True,False,False,True,True,True,True,False,True],[True,True,False,False,True,True,True,False,False,False,False,True,False,False,True],[False,False,False,True,False,False,False,True,False,False,False,True,True,False,True],[False,True,False,True,True,True,False,False,False,True,True,False,False,True,False],[True,True,False,True,True,False,True,True,True,True,True,False,False,False,False],[True,True,True,False,False,False,True,False,True,True,True,False,True,True,True],[False,False,True,False,True,False,True,False,True,False,True,False,False,True,False],[False,True,True,True,True,True,False,False,False,True,False,True,True,True,True],[False,True,True,True,False,True,True,True,True,False,True,True,False,False,False]],[[True,False,True,False,False,False,False,False,True,False,True,True,True,False,False],[False,False,False,False,False,False,True,True,True,False,False,False,True,False,False],[False,True,True,True,False,True,False,False,True,True,False,False,False,True,False],[False,False,False,False,False,False,False,True,False,True,True,False,False,True,False],[False,True,False,True,False,False,False,False,False,True,True,False,True,True,True],[True,False,True,False,False,True,False,True,False,False,False,False,False,False,True],[True,True,False,True,False,False,True,True,True,True,False,False,True,False,False],[False,True,False,False,True,False,True,False,True,False,False,False,False,True,False],[True,False,True,True,True,False,True,False,True,False,True,True,True,False,True],[True,False,True,True,False,False,True,False,False,True,False,True,True,False,False],[True,True,False,True,False,True,True,True,True,False,False,False,True,True,False],[True,False,False,False,True,True,False,False,True,True,True,True,False,False,True],[False,False,False,False,True,False,True,False,True,False,False,True,False,True,False],[False,False,False,False,False,True,True,True,False,False,False,True,True,False,False],[False,False,False,False,False,True,False,True,True,False,True,True,True,True,False]],[[False,True,True,False,True,True,False,True,False,False,True,False,True,True,False],[True,True,False,True,False,False,False,False,True,True,False,False,False,False,True],[True,False,False,False,False,False,True,False,True,False,False,False,False,False,True],[True,True,True,True,True,True,False,True,True,True,True,False,False,True,False],[True,False,False,False,False,False,False,False,True,True,False,True,True,False,True],[True,True,True,False,True,False,True,True,True,False,False,False,False,False,False],[False,False,False,False,False,True,True,False,True,False,True,True,True,False,True],[True,True,True,False,True,False,False,False,True,True,True,True,False,True,False],[False,False,False,False,False,False,True,True,False,False,True,True,True,True,True],[True,False,True,False,False,False,False,False,True,True,True,False,False,True,True],[False,True,True,False,False,False,False,True,True,False,False,True,True,True,False],[True,False,False,False,False,False,False,False,False,True,True,True,True,False,True],[True,False,False,False,True,False,False,True,False,False,False,False,True,True,True],[True,False,False,True,False,False,True,True,True,True,False,False,False,False,False],[True,True,True,False,True,False,False,False,True,False,False,True,False,True,True]],[[False,False,True,False,True,False,False,False,True,True,True,True,False,True,True],[False,True,False,True,True,False,True,True,False,True,False,False,False,False,True],[True,False,True,True,False,False,True,True,False,False,False,True,True,False,False],[True,True,True,True,False,False,True,False,False,True,True,False,True,True,False],[False,True,True,True,False,True,True,True,False,True,True,True,False,False,True],[True,True,False,False,True,True,True,False,True,True,False,False,True,True,True],[True,False,False,False,True,False,False,True,True,False,False,False,True,True,True],[True,False,False,True,False,True,False,True,False,True,False,False,True,True,True],[True,True,True,True,True,True,False,True,False,True,False,False,False,True,True],[True,False,True,True,False,False,True,False,True,True,False,False,True,True,True],[False,False,False,False,False,False,True,False,True,True,True,True,True,True,True],[True,False,True,False,False,True,False,True,False,False,False,False,False,True,True],[True,True,False,False,True,False,False,False,False,True,True,True,True,True,True],[False,False,True,True,False,True,True,True,False,True,True,False,True,True,True],[False,False,True,False,False,False,False,False,True,False,False,False,False,True,True]],[[True,True,True,False,False,False,False,True,True,False,False,False,True,True,True],[False,False,True,True,False,False,False,True,False,True,True,False,True,True,True],[True,False,False,False,True,True,False,True,False,True,True,True,True,False,False],[False,True,False,False,False,True,False,False,False,False,True,True,True,True,True],[False,False,True,True,False,False,False,True,True,False,False,True,True,False,True],[False,False,False,False,False,True,True,False,True,True,True,True,True,False,False],[False,False,False,True,True,False,False,True,True,True,False,False,False,True,False],[False,True,False,False,False,True,True,True,True,True,True,False,False,False,False],[False,False,True,False,True,False,False,True,False,False,True,False,False,True,True],[False,True,True,False,False,True,True,True,False,True,False,True,True,False,True],[False,False,True,True,False,True,True,True,False,True,True,True,True,True,True],[True,True,False,False,True,False,True,True,False,True,False,False,True,True,True],[False,True,True,False,False,False,True,False,True,True,True,False,True,True,True],[False,False,False,False,False,True,True,True,False,True,False,False,True,True,False],[False,False,True,False,False,False,False,True,False,True,False,True,True,True,False]],[[False,True,False,False,False,False,True,True,True,False,False,False,False,True,True],[False,False,True,False,False,True,False,False,False,False,True,True,True,False,False],[False,False,False,False,False,False,True,True,True,False,True,True,False,False,False],[False,False,False,True,False,False,True,False,False,True,False,True,False,False,True],[True,False,True,True,False,True,True,True,True,False,False,False,True,False,False],[True,False,True,False,False,True,False,True,False,True,False,False,False,True,False],[False,False,False,True,True,True,True,False,False,False,False,False,False,True,True],[True,False,True,False,False,True,True,True,False,True,False,True,False,False,False],[False,False,False,True,False,True,False,True,True,False,True,True,True,True,False],[False,False,False,True,False,True,True,False,False,True,True,False,False,True,False],[False,False,True,False,True,True,True,True,False,False,True,True,True,False,False],[True,False,True,False,False,True,True,True,True,True,False,True,True,True,False],[True,True,False,False,False,True,True,True,False,True,False,False,False,True,False],[True,True,True,False,True,True,True,False,False,True,True,False,False,False,True],[False,True,True,True,False,True,False,True,False,True,True,False,True,True,False]]], dtype = "bool")#candidate|1012|(11, 15, 15)|const|bool
bop_1013 = relay.logical_or(bop_1009.astype('bool'), relay.reshape(const_1012.astype('bool'), relay.shape_of(bop_1009))) # shape=(11, 15, 15)
uop_1017 = relay.log(bop_1009.astype('float64')) # shape=(11, 15, 15)
bop_1024 = relay.greater(uop_1017.astype('bool'), relay.reshape(const_1012.astype('bool'), relay.shape_of(uop_1017))) # shape=(11, 15, 15)
output = relay.Tuple([bop_1013,bop_1024,])
output2 = relay.Tuple([bop_1013,bop_1024,])
func_1030 = relay.Function([var_1004,var_1005,], output)
mod['func_1030'] = func_1030
mod = relay.transform.InferType()(mod)
mutated_mod['func_1030'] = func_1030
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1030_call = mutated_mod.get_global_var('func_1030')
var_1032 = relay.var("var_1032", dtype = "int16", shape = ())#candidate|1032|()|var|int16
var_1033 = relay.var("var_1033", dtype = "int16", shape = (11, 15, 15))#candidate|1033|(11, 15, 15)|var|int16
call_1031 = func_1030_call(var_1032,var_1033,)
output = call_1031
func_1034 = relay.Function([var_1032,var_1033,], output)
mutated_mod['func_1034'] = func_1034
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1063 = relay.const([[[8,-8,10,-1,4,-6,-9,4,-1,4,4,-9,3,-1,1],[-9,-1,-5,5,-8,5,6,10,6,2,-3,-1,3,2,-7]],[[9,4,-6,-8,5,10,1,6,5,-5,3,5,10,-1,5],[7,-7,1,8,-4,7,-4,9,10,-3,1,2,-3,-6,-7]],[[4,3,3,-3,-5,-5,-1,1,-1,4,-9,-2,-2,5,9],[9,4,-5,9,-9,4,-7,2,-7,-2,-7,-7,-1,-3,-9]],[[6,8,-1,8,-10,4,-10,-1,2,5,8,-6,10,3,4],[8,9,4,8,2,9,-5,1,-3,-3,-9,-2,-7,-2,10]],[[2,8,5,-5,-3,4,-5,5,3,8,-8,-9,2,7,-8],[-2,4,-6,-3,5,-8,-10,-5,10,2,-6,-9,-5,2,-6]],[[8,3,-9,2,-7,-8,3,1,-2,8,1,6,-10,10,10],[4,-4,-1,-3,-5,-9,7,-10,4,9,3,5,-9,-10,-8]],[[-7,-10,9,-5,4,5,2,9,-2,1,-2,-3,-6,3,5],[6,-6,-2,8,9,9,7,-6,3,-7,1,-3,-10,9,4]],[[-7,-6,9,-7,-7,-10,10,10,-2,-6,-9,2,-1,10,-6],[-8,9,7,3,-6,10,-9,-3,-6,1,-6,9,2,-10,4]],[[1,10,-3,9,-1,-6,-2,1,3,-8,7,5,-4,8,1],[2,1,1,9,1,6,-2,4,2,9,2,-8,4,1,-3]],[[-3,4,9,9,5,9,-9,10,2,-3,-5,-9,-9,2,6],[-4,-2,-2,-4,-10,-2,10,10,7,3,-5,2,-9,10,2]]], dtype = "int64")#candidate|1063|(10, 2, 15)|const|int64
var_1064 = relay.var("var_1064", dtype = "int64", shape = (10, 2, 15))#candidate|1064|(10, 2, 15)|var|int64
bop_1065 = relay.bitwise_xor(const_1063.astype('int64'), relay.reshape(var_1064.astype('int64'), relay.shape_of(const_1063))) # shape=(10, 2, 15)
uop_1071 = relay.tan(bop_1065.astype('float64')) # shape=(10, 2, 15)
var_1074 = relay.var("var_1074", dtype = "float64", shape = (10, 2, 15))#candidate|1074|(10, 2, 15)|var|float64
bop_1075 = relay.subtract(uop_1071.astype('float64'), relay.reshape(var_1074.astype('float64'), relay.shape_of(uop_1071))) # shape=(10, 2, 15)
func_613_call = mod.get_global_var('func_613')
func_616_call = mutated_mod.get_global_var('func_616')
const_1080 = relay.const([[-4.507873,6.820151,5.300822],[2.338247,3.450716,-0.792469],[4.048538,4.731721,-4.253531],[4.851181,3.596857,-8.586074],[-5.667807,1.854917,5.242275],[-8.007568,-6.292770,-8.523531],[-0.866490,2.226448,-7.597544],[7.139966,5.965530,-8.875403],[5.758957,-5.506530,2.103366],[-5.673629,-3.815065,3.726971],[2.005780,5.714442,1.533255],[0.764872,8.877762,4.094031],[-9.995942,2.997147,8.487618]], dtype = "float32")#candidate|1080|(13, 3)|const|float32
const_1081 = relay.const([[False],[False],[True],[False],[True],[True],[True],[True],[True],[False],[True],[False],[False],[True],[True],[False],[True],[False],[False],[True],[True],[False],[True],[True],[True],[False],[False],[True],[True],[True],[False],[True],[True],[False],[True],[False],[True],[False],[True],[False],[True],[True],[False],[True],[False],[True],[True],[True],[False],[False],[False],[True],[False],[True],[False],[True],[False],[False],[True],[True],[True],[True],[False],[False],[True],[True],[True],[False],[True],[False],[True],[False],[True],[True],[True],[False],[True],[True],[True],[True],[True],[False],[False],[True],[True],[False],[True],[True],[True],[False],[False],[False],[True],[False],[True],[True],[True],[False],[True],[True],[False],[False],[True],[False],[False],[True],[False],[True],[False],[True],[False],[True],[True],[False],[False],[True],[False],[True],[False],[True],[True],[True],[False],[True],[True],[True],[False],[True],[True],[True],[False],[True]], dtype = "bool")#candidate|1081|(132, 1)|const|bool
call_1079 = relay.TupleGetItem(func_613_call(relay.reshape(const_1080.astype('float32'), [3, 13]), relay.reshape(const_1081.astype('bool'), [132,]), ), 3)
call_1082 = relay.TupleGetItem(func_616_call(relay.reshape(const_1080.astype('float32'), [3, 13]), relay.reshape(const_1081.astype('bool'), [132,]), ), 3)
bop_1083 = relay.bitwise_and(uop_1071.astype('uint16'), relay.reshape(var_1074.astype('uint16'), relay.shape_of(uop_1071))) # shape=(10, 2, 15)
var_1086 = relay.var("var_1086", dtype = "float64", shape = (10, 2, 15))#candidate|1086|(10, 2, 15)|var|float64
bop_1087 = relay.equal(uop_1071.astype('bool'), relay.reshape(var_1086.astype('bool'), relay.shape_of(uop_1071))) # shape=(10, 2, 15)
uop_1090 = relay.asin(bop_1083.astype('float32')) # shape=(10, 2, 15)
output = relay.Tuple([bop_1075,call_1079,const_1080,const_1081,bop_1087,uop_1090,])
output2 = relay.Tuple([bop_1075,call_1082,const_1080,const_1081,bop_1087,uop_1090,])
F = relay.Function([var_1064,var_1074,var_1086,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1064,var_1074,var_1086,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1064= np.array([[[-8,1,5,-10,-6,-7,4,-10,10,5,-6,2,2,-9,-9],[-1,3,7,-9,-2,-8,8,6,-4,-6,2,8,8,-10,-8]],[[-9,8,-2,-3,-9,-8,1,10,-5,-4,3,-5,-2,9,-7],[10,10,1,10,5,-8,-8,-8,-8,3,4,-10,7,9,3]],[[-4,3,9,-6,-9,-2,-3,-5,9,3,-7,-7,3,8,-9],[9,4,-9,-7,5,7,2,6,-10,3,6,-8,9,-7,7]],[[-10,3,-10,10,-9,-5,10,8,-7,2,2,1,3,3,-9],[-9,-9,-4,5,8,6,-2,-1,6,-9,-7,8,-2,8,-2]],[[8,-5,-4,-5,10,2,-5,4,-7,5,9,-6,9,-10,3],[-3,5,-7,-6,7,6,-4,8,-8,-10,-10,4,-8,5,-2]],[[-1,-1,-3,-5,-1,-5,-6,7,-6,-8,7,-7,-5,5,-2],[10,2,-10,-10,-3,1,-9,6,-2,2,-1,9,1,1,-4]],[[5,-8,5,-3,5,9,4,3,-3,-2,-5,3,1,8,4],[-6,-7,-7,2,-1,-7,-3,8,3,-2,-6,10,-3,-7,-4]],[[2,-9,6,-5,-7,-5,5,-5,5,6,-5,-6,-4,-5,-7],[-10,-10,-2,-5,5,1,6,8,-1,-1,2,-9,-10,-5,-4]],[[5,5,-2,-2,-4,-9,-6,3,6,9,-2,3,9,-6,10],[9,3,1,-3,-4,-9,-1,8,9,7,1,-8,1,-10,2]],[[-7,5,6,-9,10,-5,-6,4,-10,8,-10,9,5,-5,-8],[-7,9,9,2,6,9,3,-10,9,-1,-9,6,-10,1,10]]], dtype='int64')
module1.set_input('var_1064', input_1064)
input_1074= np.array([[[-2.596256,-4.972226,-4.891365,8.895770,-6.121520,-8.306238,5.796120,4.716660,1.760698,-4.020524,-9.054638,2.171862,-0.053205,-6.238255,9.711341],[6.046759,2.722501,-9.406357,-5.329803,3.657732,1.950668,-7.277047,-0.994822,-3.668526,8.283923,5.849675,-1.325318,3.267349,5.153752,3.419952]],[[4.663861,7.773963,-0.609914,0.695268,1.970476,2.336883,-4.911622,4.140976,-5.388434,-6.616537,-1.220636,2.594995,6.231358,-5.118998,-1.715695],[3.452288,-8.526967,-0.805053,-7.527941,3.768080,-1.170911,7.867447,1.856272,1.458194,-0.701638,3.041616,7.452791,2.893010,4.623347,-8.031979]],[[3.801535,-8.887840,-6.588850,-1.287365,-0.697299,-2.969609,3.965237,8.569394,-1.512114,-9.006217,5.513899,2.459365,-6.193852,3.198042,-4.050319],[2.245258,8.216327,-3.063133,-4.710128,8.513956,-2.775818,4.895786,4.310780,-3.101887,1.090880,-5.972889,-3.283705,3.169854,7.926671,1.956911]],[[-7.498160,2.096430,-8.497662,0.562523,2.388401,3.702089,-5.733406,0.919279,1.505803,4.620772,-9.254496,4.795115,-1.964129,1.182732,7.539824],[7.552565,7.459688,-2.619311,-9.008420,-5.455248,-5.881642,-8.412475,-1.412811,-1.638165,3.506329,-5.456919,5.773627,0.138394,-7.905201,4.135206]],[[8.407868,-9.340478,-4.921847,-4.178296,-6.822939,-7.861396,-7.427160,-5.081243,-4.832687,-9.153524,-7.482803,9.418068,1.310072,5.291237,7.692538],[5.299294,-3.280040,2.548163,-4.166076,5.451553,-1.099106,6.147708,-7.876954,0.143868,-9.057918,6.265609,-4.435718,1.290032,8.724898,1.787647]],[[1.333212,6.736812,-3.009151,-3.592173,-5.292978,-6.792651,6.710330,3.603085,7.108739,-9.213694,-9.781599,-4.805748,-2.695884,-4.582604,5.204233],[-5.029301,5.419214,-5.290013,-4.280505,-0.898656,-9.755908,5.859621,6.272469,-4.477579,0.997492,-5.457008,-1.150698,-8.165386,-2.502211,-0.123178]],[[6.347840,8.707109,-9.700794,-4.794264,-6.508613,8.660416,1.578265,3.318980,7.551792,3.240608,-2.482819,-4.657168,4.253409,-0.788608,-3.591439],[7.486612,0.888008,-1.958066,-3.250434,4.998159,8.938247,4.269892,6.126585,7.516033,-3.221866,-7.618988,3.577956,8.677104,5.799598,-7.593346]],[[-0.296956,5.815806,-0.078449,7.410806,7.963764,-3.187972,8.531110,5.537495,-4.633355,9.818282,-0.225994,1.220008,0.558515,-3.598474,-6.226696],[-2.524330,-3.293459,6.759763,1.837097,4.728900,5.849917,2.294640,5.678673,3.302262,-2.804415,7.334174,-7.789784,-0.351448,4.711455,1.967962]],[[5.236064,1.781668,0.998930,7.373198,5.686862,3.368605,-9.861571,-5.834049,-4.389375,5.464843,-6.685457,2.435208,6.211078,-5.719188,-6.269107],[1.245566,8.403938,2.446521,0.782591,2.739153,1.095136,4.734861,-7.833879,0.285637,2.010397,0.948740,5.552794,1.981678,-7.855411,-5.855311]],[[8.143969,-8.363912,-2.715628,5.698518,-8.619431,-3.579427,-2.162755,6.717128,2.778238,6.454169,6.994638,4.735543,1.081397,-5.568741,-7.515416],[-4.597779,-5.383444,3.691057,-2.020407,-2.306059,2.210799,-6.701110,-1.652194,-5.896089,-7.659799,-9.657776,-1.531628,1.280811,-8.160635,4.889062]]], dtype='float64')
module1.set_input('var_1074', input_1074)
input_1086= np.array([[[-9.936608,-2.759931,7.917411,0.757767,0.087788,-8.748150,-9.414155,-9.708915,0.869500,1.280485,-6.798286,3.270246,8.677117,-0.997166,-0.158377],[-1.514300,3.892887,2.288810,-0.153493,-7.184504,-7.225421,1.850039,5.640727,7.155090,-1.768616,-2.463469,3.101918,-1.435826,-2.086520,-1.268140]],[[-2.866561,5.774231,-1.476663,-7.235690,3.990871,-5.758404,-9.899291,1.156925,9.879794,-1.041325,2.758878,-9.806314,-4.658626,7.303866,8.429357],[-3.613132,-9.052731,1.199239,-1.136702,-4.156249,-4.710761,-0.055683,-7.473137,-1.407005,-8.506997,2.360993,5.721633,-5.303397,-1.564321,6.026295]],[[-0.686037,-2.343611,0.814948,0.644525,2.474142,-6.742429,-3.748333,-4.732546,-7.408047,-6.806441,0.456337,-6.859966,2.266192,5.607717,-8.023566],[2.890880,-8.015674,1.344314,0.045685,5.104482,-7.445681,-5.241506,-6.065144,5.721954,9.288709,-9.716003,-4.594508,2.725444,4.642563,8.327823]],[[4.894748,-6.995488,-1.902417,-1.412043,-4.209262,5.153747,5.650375,5.881566,-4.780567,-5.937090,-3.734059,0.189733,2.289295,-9.528173,5.520485],[-7.891862,-0.464916,-9.931028,-2.106260,-2.770710,-3.835333,-6.539761,2.156500,-2.384700,-8.126440,8.297251,0.276348,3.363575,-3.324134,0.872832]],[[-0.363992,-0.172584,8.926514,2.940351,7.113332,-2.502918,9.548688,9.188170,1.213667,8.961529,-6.789349,-7.781143,1.490543,-7.865383,-0.084859],[2.773059,2.601466,4.025401,-8.400948,7.479740,5.147230,6.112639,-5.423438,5.291250,-8.618519,7.330265,-1.885935,-0.915403,-9.331482,0.391944]],[[8.725952,2.768526,-9.131837,6.647812,8.379851,6.657242,-4.644116,-9.362810,7.281311,-2.500613,-9.799244,3.300299,-5.243218,-5.300469,-9.132337],[6.705876,-9.432969,0.085800,0.627650,4.798902,5.316408,4.098503,1.705605,-5.469439,-5.480257,9.868076,-7.923473,8.818173,-6.420969,3.067681]],[[1.689571,-8.751724,8.871378,-6.022707,-7.474401,-8.668158,-6.603963,-4.844802,1.767508,7.109266,9.960883,-6.699171,5.711111,-0.761638,6.624270],[-9.819714,-1.403124,-6.496582,-9.161932,4.464609,-2.986423,-5.702611,0.786522,-3.676452,9.529624,-9.790487,-4.080041,5.531502,-7.221525,-2.998212]],[[7.016705,-4.075025,7.329884,-8.806657,-8.325938,3.150599,2.913507,4.328075,-3.480205,1.218394,4.164103,-6.186552,-4.279087,7.069743,-8.508359],[-9.577963,7.520151,8.225135,9.743478,-5.958532,8.496580,-4.128932,-7.374714,-6.866094,2.769603,-8.824087,6.381508,6.061857,-7.831095,5.993363]],[[-0.540379,8.492873,-9.688695,-4.657890,-5.871648,0.289320,-9.921879,-2.637325,-3.652917,4.168989,-2.451890,-1.116979,8.900039,5.712877,1.120688],[-1.723541,-2.502915,2.539599,-5.699920,-6.560673,-2.445507,7.058788,6.895355,0.303587,-0.330118,0.801265,5.770285,-7.006332,1.666435,-8.819397]],[[-6.987349,-0.511965,-1.823099,-6.182334,-7.339826,1.860317,-3.758777,0.485192,-5.412194,7.136482,-6.349289,4.385958,3.844069,-1.831357,6.696611],[6.737881,8.540910,-7.997547,9.487591,-5.880147,4.486337,-3.757260,-6.399200,7.088929,2.158280,9.357903,-3.696109,7.086913,5.076166,-3.567776]]], dtype='float64')
module1.set_input('var_1086', input_1086)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1064, input_1074, input_1086, )
res3 = intrp3.evaluate()(input_1064, input_1074, input_1086, )
res4 = intrp4.evaluate()(input_1064, input_1074, input_1086, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
module5.set_input('var_1064', input_1064)
module5.set_input('var_1074', input_1074)
module5.set_input('var_1086', input_1086)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1064, input_1074, input_1086, )
res7 = intrp7.evaluate()(input_1064, input_1074, input_1086, )
res8 = intrp8.evaluate()(input_1064, input_1074, input_1086, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
module9.set_input('var_1064', input_1064)
module9.set_input('var_1074', input_1074)
module9.set_input('var_1086', input_1086)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1064, input_1074, input_1086, )
res11 = intrp11.evaluate()(input_1064, input_1074, input_1086, )
res12 = intrp12.evaluate()(input_1064, input_1074, input_1086, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
module13.set_input('var_1064', input_1064)
module13.set_input('var_1074', input_1074)
module13.set_input('var_1086', input_1086)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1064, input_1074, input_1086, )
res15 = intrp15.evaluate()(input_1064, input_1074, input_1086, )
res16 = intrp16.evaluate()(input_1064, input_1074, input_1086, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
module17.set_input('var_1064', input_1064)
module17.set_input('var_1074', input_1074)
module17.set_input('var_1086', input_1086)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1064, input_1074, input_1086, )
res19 = intrp19.evaluate()(input_1064, input_1074, input_1086, )
res20 = intrp20.evaluate()(input_1064, input_1074, input_1086, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
module21.set_input('var_1064', input_1064)
module21.set_input('var_1074', input_1074)
module21.set_input('var_1086', input_1086)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1064, input_1074, input_1086, )
res23 = intrp23.evaluate()(input_1064, input_1074, input_1086, )
res24 = intrp24.evaluate()(input_1064, input_1074, input_1086, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()

'''104: TVMFuncCall
103: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
102: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
101: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
100: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
99: tvm::transform::Pass::operator()(tvm::IRModule) const
98: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
97: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
96: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
95: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
94: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
93: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
92: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
91: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
90: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
89: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
88: _ZN3tvm5relay16MixedModeMutato
87: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
86: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
85: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
84: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
83: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
82: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
81: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
80: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
79: _ZN3tvm5relay16MixedModeMutato
78: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
77: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
76: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
75: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
74: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
73: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
72: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
71: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
70: tvm::transform::Pass::operator()(tvm::IRModule) const
69: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
68: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
67: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
66: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
65: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
64: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
63: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
62: _ZN3tvm5relay16MixedModeMutato
61: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
60: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
59: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
58: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
57: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
56: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
55: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
54: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
53: _ZN3tvm5relay16MixedModeMutato
52: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
51: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
50: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
49: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
48: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
46: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''