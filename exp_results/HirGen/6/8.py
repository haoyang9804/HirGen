import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_31 = relay.var("var_31", dtype = "bool", shape = (14, 4, 2))#candidate|31|(14, 4, 2)|var|bool
var_32 = relay.var("var_32", dtype = "bool", shape = (14, 4, 2))#candidate|32|(14, 4, 2)|var|bool
bop_33 = relay.logical_and(var_31.astype('bool'), relay.reshape(var_32.astype('bool'), relay.shape_of(var_31))) # shape=(14, 4, 2)
output = relay.Tuple([bop_33,])
output2 = relay.Tuple([bop_33,])
func_38 = relay.Function([var_31,var_32,], output)
mod['func_38'] = func_38
mod = relay.transform.InferType()(mod)
mutated_mod['func_38'] = func_38
mutated_mod = relay.transform.InferType()(mutated_mod)
func_38_call = mutated_mod.get_global_var('func_38')
var_40 = relay.var("var_40", dtype = "bool", shape = (14, 4, 2))#candidate|40|(14, 4, 2)|var|bool
var_41 = relay.var("var_41", dtype = "bool", shape = (14, 4, 2))#candidate|41|(14, 4, 2)|var|bool
call_39 = func_38_call(var_40,var_41,)
output = call_39
func_42 = relay.Function([var_40,var_41,], output)
mutated_mod['func_42'] = func_42
mutated_mod = relay.transform.InferType()(mutated_mod)
var_73 = relay.var("var_73", dtype = "int16", shape = (12, 2, 1))#candidate|73|(12, 2, 1)|var|int16
var_74 = relay.var("var_74", dtype = "int16", shape = (12, 2, 7))#candidate|74|(12, 2, 7)|var|int16
bop_75 = relay.left_shift(var_73.astype('int16'), var_74.astype('int16')) # shape=(12, 2, 7)
output = bop_75
output2 = bop_75
func_78 = relay.Function([var_73,var_74,], output)
mod['func_78'] = func_78
mod = relay.transform.InferType()(mod)
mutated_mod['func_78'] = func_78
mutated_mod = relay.transform.InferType()(mutated_mod)
func_78_call = mutated_mod.get_global_var('func_78')
var_80 = relay.var("var_80", dtype = "int16", shape = (12, 2, 1))#candidate|80|(12, 2, 1)|var|int16
var_81 = relay.var("var_81", dtype = "int16", shape = (12, 2, 7))#candidate|81|(12, 2, 7)|var|int16
call_79 = func_78_call(var_80,var_81,)
output = call_79
func_82 = relay.Function([var_80,var_81,], output)
mutated_mod['func_82'] = func_82
mutated_mod = relay.transform.InferType()(mutated_mod)
var_127 = relay.var("var_127", dtype = "uint16", shape = (15, 11, 6))#candidate|127|(15, 11, 6)|var|uint16
var_128 = relay.var("var_128", dtype = "uint16", shape = (15, 11, 6))#candidate|128|(15, 11, 6)|var|uint16
bop_129 = relay.maximum(var_127.astype('uint16'), relay.reshape(var_128.astype('uint16'), relay.shape_of(var_127))) # shape=(15, 11, 6)
output = relay.Tuple([bop_129,])
output2 = relay.Tuple([bop_129,])
func_132 = relay.Function([var_127,var_128,], output)
mod['func_132'] = func_132
mod = relay.transform.InferType()(mod)
mutated_mod['func_132'] = func_132
mutated_mod = relay.transform.InferType()(mutated_mod)
func_132_call = mutated_mod.get_global_var('func_132')
var_134 = relay.var("var_134", dtype = "uint16", shape = (15, 11, 6))#candidate|134|(15, 11, 6)|var|uint16
var_135 = relay.var("var_135", dtype = "uint16", shape = (15, 11, 6))#candidate|135|(15, 11, 6)|var|uint16
call_133 = func_132_call(var_134,var_135,)
output = call_133
func_136 = relay.Function([var_134,var_135,], output)
mutated_mod['func_136'] = func_136
mutated_mod = relay.transform.InferType()(mutated_mod)
var_143 = relay.var("var_143", dtype = "float64", shape = (1, 1, 10))#candidate|143|(1, 1, 10)|var|float64
uop_144 = relay.sqrt(var_143.astype('float64')) # shape=(1, 1, 10)
output = uop_144
output2 = uop_144
func_155 = relay.Function([var_143,], output)
mod['func_155'] = func_155
mod = relay.transform.InferType()(mod)
var_156 = relay.var("var_156", dtype = "float64", shape = (1, 1, 10))#candidate|156|(1, 1, 10)|var|float64
output = func_155(var_156)
func_157 = relay.Function([var_156], output)
mutated_mod['func_157'] = func_157
mutated_mod = relay.transform.InferType()(mutated_mod)
var_167 = relay.var("var_167", dtype = "uint64", shape = (5, 7, 8))#candidate|167|(5, 7, 8)|var|uint64
var_168 = relay.var("var_168", dtype = "uint64", shape = (5, 7, 8))#candidate|168|(5, 7, 8)|var|uint64
bop_169 = relay.greater_equal(var_167.astype('bool'), relay.reshape(var_168.astype('bool'), relay.shape_of(var_167))) # shape=(5, 7, 8)
func_155_call = mod.get_global_var('func_155')
func_157_call = mutated_mod.get_global_var('func_157')
var_173 = relay.var("var_173", dtype = "float64", shape = (10,))#candidate|173|(10,)|var|float64
call_172 = func_155_call(relay.reshape(var_173.astype('float64'), [1, 1, 10]))
call_174 = func_155_call(relay.reshape(var_173.astype('float64'), [1, 1, 10]))
output = relay.Tuple([bop_169,call_172,var_173,])
output2 = relay.Tuple([bop_169,call_174,var_173,])
func_180 = relay.Function([var_167,var_168,var_173,], output)
mod['func_180'] = func_180
mod = relay.transform.InferType()(mod)
var_181 = relay.var("var_181", dtype = "uint64", shape = (5, 7, 8))#candidate|181|(5, 7, 8)|var|uint64
var_182 = relay.var("var_182", dtype = "uint64", shape = (5, 7, 8))#candidate|182|(5, 7, 8)|var|uint64
var_183 = relay.var("var_183", dtype = "float64", shape = (10,))#candidate|183|(10,)|var|float64
output = func_180(var_181,var_182,var_183,)
func_184 = relay.Function([var_181,var_182,var_183,], output)
mutated_mod['func_184'] = func_184
mutated_mod = relay.transform.InferType()(mutated_mod)
var_188 = relay.var("var_188", dtype = "float64", shape = (12, 8, 10))#candidate|188|(12, 8, 10)|var|float64
uop_189 = relay.rsqrt(var_188.astype('float64')) # shape=(12, 8, 10)
var_191 = relay.var("var_191", dtype = "float64", shape = (12, 8, 10))#candidate|191|(12, 8, 10)|var|float64
bop_192 = relay.subtract(uop_189.astype('int16'), relay.reshape(var_191.astype('int16'), relay.shape_of(uop_189))) # shape=(12, 8, 10)
var_195 = relay.var("var_195", dtype = "int16", shape = (12, 8, 10))#candidate|195|(12, 8, 10)|var|int16
bop_196 = relay.divide(bop_192.astype('float64'), relay.reshape(var_195.astype('float64'), relay.shape_of(bop_192))) # shape=(12, 8, 10)
var_205 = relay.var("var_205", dtype = "float64", shape = (12, 8, 10))#candidate|205|(12, 8, 10)|var|float64
bop_206 = relay.floor_divide(bop_196.astype('float32'), relay.reshape(var_205.astype('float32'), relay.shape_of(bop_196))) # shape=(12, 8, 10)
uop_209 = relay.atanh(var_205.astype('float32')) # shape=(12, 8, 10)
const_213 = relay.const([[[-3.639039,-1.038761,-1.790486,7.236149,7.668889,0.245226,-5.202901,-8.900780,-4.221334,4.886285],[2.272119,-0.105877,7.302889,8.086072,2.739267,-4.346240,7.199405,6.324606,-0.809303,-3.425116],[7.645066,3.085467,-3.449927,-6.604802,4.924514,-7.030183,3.008187,-3.269710,5.746485,6.265119],[-7.174259,2.022771,-7.757625,7.673981,9.924786,2.586550,9.576812,3.379143,-5.399774,8.297542],[3.118931,-6.119718,-5.790139,-7.845076,-5.517515,-5.146977,2.383920,5.091754,-6.818101,7.564096],[-2.068063,6.694123,8.744153,6.955807,-4.093250,6.847409,-8.262527,-7.354117,-7.690633,6.023761],[-8.857812,5.079024,4.725633,-5.427804,2.683105,9.311741,-7.849561,-0.719682,9.539730,8.465832],[-3.184523,-0.733346,-6.444892,5.831769,9.256678,1.058550,-9.657873,4.032581,4.579264,-5.781204]],[[6.475194,-4.499399,-5.830865,-1.991698,4.881977,5.492483,-0.700627,-9.203920,4.018127,-5.610746],[-5.532688,-7.993824,-5.794069,-1.726209,5.920571,9.084438,6.152184,-3.492517,-5.466798,5.812934],[-5.500875,5.668209,-6.163831,2.494311,0.093365,-1.096493,-3.323950,-6.991384,3.667349,-5.712555],[0.410847,8.265612,-6.128606,-5.992971,-7.814601,-7.034113,8.703359,-7.162464,9.060538,8.919481],[1.158241,7.779761,-8.928916,-8.424458,-8.031193,9.031735,-4.008983,-9.827721,-3.080377,6.727355],[4.442156,-2.387965,9.385321,-2.714776,-0.425583,0.245345,-1.901037,1.290950,2.072140,-9.176537],[8.489062,6.748768,-5.854192,-2.261237,5.638016,-2.642700,1.120968,3.509821,7.075017,2.281284],[6.252287,9.014403,9.746349,-8.198612,-3.382267,2.934707,-0.461929,-6.000135,-0.367786,-5.406412]],[[-0.359665,-9.471863,4.199978,0.907423,-5.247980,-4.225092,0.138105,4.338009,7.847805,6.066528],[-4.817810,2.988291,-0.918368,1.410295,-7.510493,-7.154889,-1.468359,-1.809660,-6.148327,-3.116975],[-0.512867,-0.146414,-5.364987,0.730560,8.178766,-9.392716,5.694300,0.245433,2.863902,-2.489674],[-9.605946,-8.207730,-9.101958,-8.191566,-1.812725,0.020025,9.726888,9.642666,3.817400,1.154357],[3.735520,-1.572563,3.941075,-9.094543,-2.806829,-1.982519,2.870316,-2.658147,0.570259,-9.954133],[0.915941,7.059365,9.630250,9.245903,4.028714,-4.389682,-4.419071,7.538594,-6.050007,-8.998346],[-0.727766,0.053765,3.434456,6.831352,-3.460389,9.158692,6.570618,-0.535254,9.445238,1.940675],[2.244827,8.193147,-5.401884,3.098527,2.968978,-8.163919,8.745970,7.367920,2.684581,1.881700]],[[9.058266,1.349773,7.244512,9.063237,8.736742,6.884621,-9.361985,-3.512331,6.830492,7.077951],[8.951143,5.135361,8.248800,-0.318874,8.279409,-9.842610,-5.444198,-9.783735,-4.871903,-4.451101],[-0.029221,-2.954291,-8.972392,-3.510116,-2.752292,-8.571220,8.662587,-1.810840,1.141093,6.961314],[5.356400,8.557543,8.855823,7.963977,1.310604,-4.755198,-7.568107,9.669447,2.857899,-0.883003],[6.476638,-9.832354,-6.666020,-2.934111,4.553277,4.733118,5.339340,-1.386412,-9.771525,-1.921106],[6.980579,3.459571,7.036815,-0.323055,-6.116932,5.959692,-3.276407,-1.466537,-1.142557,-3.752784],[-9.515259,-6.688171,-5.947446,3.715395,4.825377,-0.699071,-3.268572,-3.549024,-4.448579,-1.949633],[1.332477,9.312167,4.813844,7.514609,-7.959189,5.244414,2.167764,-1.833856,-0.712793,-0.687120]],[[-9.625567,-0.661381,-5.214904,-6.344128,-0.137857,-5.661455,-8.904178,7.927749,7.973329,-5.098929],[-0.539041,0.205300,2.204176,4.945861,4.066989,4.384933,-3.388627,-4.501507,-1.152892,-5.247776],[6.076984,4.358169,-1.652555,-9.662029,5.134114,3.006233,-5.802484,1.232471,-5.248957,-2.537775],[-3.419199,7.315558,8.283270,1.526563,9.164271,-6.236011,-5.102968,-8.063613,-2.693252,2.443854],[7.693399,8.265015,2.908865,-7.867183,3.116965,0.518361,-2.843320,0.437827,-2.687035,-8.599329],[-4.180117,-1.754348,-3.486632,8.932861,4.787191,-4.901084,4.151517,8.416353,-7.076733,-4.918833],[-6.048011,1.940819,7.572776,-4.254918,9.785595,2.251663,-7.788525,7.399371,-7.957133,0.256928],[0.104781,5.025778,-1.585955,6.895731,-8.825958,-1.902259,7.506010,0.393046,-4.494118,-1.439192]],[[-6.219748,3.185780,1.434963,3.997971,3.361311,-9.949078,-6.149408,7.446727,-4.862359,1.654203],[4.017975,0.281221,3.950464,8.356938,-2.561904,-8.514192,6.662896,6.253648,-1.758503,-0.386761],[-7.381536,-3.420946,-0.717347,0.845866,-5.293101,1.557187,-9.443433,-5.734679,-0.084299,-0.642562],[1.395848,5.413023,-7.697921,6.953046,-3.861066,6.636393,-1.899418,4.356378,9.715841,5.320897],[-7.436919,6.451870,5.171133,-5.109447,6.339001,7.949127,1.071375,3.177193,4.297846,-8.315585],[3.626597,-6.580652,0.928057,-0.995930,-7.989031,-3.039722,0.084880,-7.157010,9.330775,-8.857263],[4.011385,6.547112,-5.478795,-7.027639,-2.202544,3.888600,-6.191793,8.979167,-4.943879,7.642036],[-7.957732,1.132282,8.675102,-6.651244,-2.010371,-5.251515,-8.048115,2.373974,-7.824993,6.354206]],[[-3.613740,-4.679044,-4.706475,9.218753,-1.446768,-5.163763,-8.549028,-0.468231,1.350855,3.461698],[6.439024,2.203612,4.067245,-4.140487,-3.326515,-1.209162,8.709065,-9.269719,2.767111,-6.354130],[-2.223300,-6.909620,-8.509736,-0.730328,6.707565,2.263681,1.645924,9.954778,2.645035,3.449937],[2.692959,2.500288,-8.796784,-8.719115,7.098532,7.948364,7.953827,-5.234767,-0.180409,5.604058],[-7.611086,-2.020434,4.261696,7.962817,-2.268594,0.483401,-7.074500,-8.152763,-8.009104,-0.072698],[4.990421,8.385503,3.292033,-0.017402,-8.071989,-7.523049,-5.071309,4.768660,-8.790243,3.466260],[2.819152,-4.659417,3.667843,-9.757704,2.295497,8.219490,0.412103,-8.682465,-6.574574,-3.356435],[-1.047273,-9.376976,-5.306208,5.052534,-8.551951,6.507675,4.549755,0.256464,-5.112408,-1.688515]],[[8.183281,-3.890159,-8.761280,9.338004,3.515154,5.112587,-7.462445,-3.658180,7.028614,8.356973],[-0.554304,6.304274,-6.108584,-2.866822,8.043692,7.668370,-2.825911,7.646987,-5.335788,-0.468056],[-8.572241,4.111453,6.717454,0.775263,7.663107,-8.473209,4.442191,1.646234,-4.844409,-7.416005],[-0.624024,-7.806295,0.175755,9.909320,9.430713,2.639951,-0.067856,-4.202825,7.923485,-0.400558],[8.932310,-2.211373,3.372972,-1.272222,-1.971426,9.532828,-9.623388,3.145969,2.797609,5.517095],[-2.008292,-0.765260,-0.189775,-4.564814,4.007396,-8.253273,5.337389,1.065578,4.705972,1.423524],[0.022670,-3.562099,-7.421383,1.985746,5.497367,-5.484016,-3.540326,-1.398764,-4.241273,-0.386833],[8.875596,-6.749926,3.993449,6.824383,2.472809,-3.587586,7.512821,9.372089,2.435584,7.179392]],[[1.579531,-4.317635,1.599639,-6.543934,-3.539665,7.517363,-4.312532,-4.045500,0.047822,-4.872491],[-5.832457,4.563487,6.649521,-8.051919,-1.089273,1.863809,0.348942,2.538458,-9.085469,-6.661195],[-5.135078,3.805441,8.358926,-0.079561,4.490337,-0.339287,-7.670395,-6.730112,-7.431100,-6.643236],[-4.277032,-8.869855,3.060726,-8.643694,-4.869506,-3.032612,-1.132913,5.849857,-1.042384,4.804042],[-6.977908,3.652715,5.856855,-9.731017,-9.698814,-7.689308,3.336684,2.347350,-9.359301,-8.820150],[-8.835850,8.040517,-4.300631,0.904350,8.655074,4.322183,-2.406490,-9.519165,-0.367883,0.060801],[2.655678,3.702531,-7.119709,7.968860,5.427313,9.367157,0.155414,-0.001504,4.806264,-5.470021],[-5.225917,-5.846132,-4.948573,4.338957,-1.231427,-7.045056,-6.431434,-9.837177,-1.159775,-6.580727]],[[8.153408,8.581670,-5.444583,6.217924,5.558615,-9.395882,3.074257,-8.380095,9.847877,-0.445981],[-9.241467,3.363523,-4.198503,-0.808943,-2.190131,-1.594825,-5.006056,-7.049560,-3.928069,0.994897],[8.631784,4.700854,-1.561239,-3.860970,6.292614,0.733030,8.496340,8.254294,-6.955945,-1.061854],[-5.940378,3.146044,2.510016,7.791964,8.669790,3.239018,1.552085,6.735663,5.568739,6.423907],[-4.555449,-7.946986,-3.690470,1.762344,0.428809,3.113670,3.724476,3.845197,-3.569669,-3.075562],[9.725161,-4.856442,-5.731068,-9.231767,1.426410,2.140893,1.085241,-7.748709,3.315062,-9.602520],[3.697951,-7.168954,-7.808747,5.064626,-7.150745,-3.490400,-6.647779,-7.629992,-6.953555,-1.898226],[2.319021,4.980023,3.183797,-8.144910,-2.677507,-6.102818,-5.323585,-6.290837,-9.134355,8.930636]],[[6.042424,-2.226448,-0.883455,-6.487002,5.565553,-5.734973,-0.858370,5.267639,4.754057,-3.325480],[8.746497,-5.207070,5.779329,-8.929633,-4.313728,1.034865,-8.163686,0.093516,-5.470623,7.274190],[-5.644332,-6.474747,-1.054611,5.276190,4.100765,8.169977,-6.850861,-4.687043,-7.812775,6.529801],[-5.103968,-0.576016,-2.698903,3.678890,0.813241,-2.950845,5.838773,9.728293,6.842299,1.721078],[-3.659908,1.844445,-7.629780,8.889540,-2.049108,-7.817546,3.845387,9.481097,-8.499391,-3.020307],[-5.439910,-7.740852,-3.631229,8.827968,-2.113420,-2.418474,2.041126,4.953808,-0.207120,-7.619026],[0.550369,9.594444,0.350409,-0.927253,-2.804301,8.623406,5.335846,-6.165461,9.186378,9.639354],[-1.297260,1.060719,5.542155,-9.530675,4.046401,6.677782,0.441545,4.438922,5.864640,-0.785603]],[[-9.233777,-1.034401,7.631652,6.884631,-6.973504,-7.711060,9.893484,-9.930912,-0.355151,-5.333417],[1.389354,-2.634812,-2.019241,2.536241,5.529678,2.403279,-0.993846,-8.982664,-9.500852,-8.419035],[-9.302408,-9.978198,-9.914731,6.767890,7.689109,-9.860707,9.033569,4.053276,-7.714580,7.740345],[-2.704062,-0.876489,0.744453,6.311914,-6.184863,-5.266882,-7.872504,-7.914176,-4.898408,-1.353028],[3.216147,-0.210874,5.936157,0.544193,4.542028,-2.347590,5.831238,-6.027757,7.683695,8.709419],[9.627583,-1.302727,-5.856233,9.849519,-0.303508,-9.155212,-7.377126,-7.743682,-7.470286,-5.006184],[5.647143,3.471961,8.649762,0.582221,5.007805,-6.537152,-1.078698,8.102986,-4.337782,2.585796],[-2.940755,-8.010900,7.674161,-0.161559,-9.682505,6.970679,4.189346,9.369209,-1.986129,7.037582]]], dtype = "float64")#candidate|213|(12, 8, 10)|const|float64
bop_214 = relay.equal(bop_196.astype('bool'), relay.reshape(const_213.astype('bool'), relay.shape_of(bop_196))) # shape=(12, 8, 10)
func_155_call = mod.get_global_var('func_155')
func_157_call = mutated_mod.get_global_var('func_157')
var_218 = relay.var("var_218", dtype = "float64", shape = (10,))#candidate|218|(10,)|var|float64
call_217 = func_155_call(relay.reshape(var_218.astype('float64'), [1, 1, 10]))
call_219 = func_155_call(relay.reshape(var_218.astype('float64'), [1, 1, 10]))
var_224 = relay.var("var_224", dtype = "float32", shape = (12, 8, 10))#candidate|224|(12, 8, 10)|var|float32
bop_225 = relay.logical_and(bop_206.astype('bool'), relay.reshape(var_224.astype('bool'), relay.shape_of(bop_206))) # shape=(12, 8, 10)
uop_228 = relay.acosh(var_205.astype('float32')) # shape=(12, 8, 10)
const_235 = relay.const([[[-2.482441,-1.845592,3.344178,4.948349,3.292097,5.818199,0.085681,-4.409112,-9.690511,-3.501770],[4.195591,-1.932601,9.678197,6.481052,-9.983221,-9.873519,5.947427,-4.293411,2.927195,0.890063],[0.088474,7.328523,-1.101267,5.934103,-1.182648,-2.243583,-4.651473,-0.544969,-5.766844,-9.452811],[-5.828069,4.154330,9.458582,-2.733631,-9.173946,3.021741,-5.863170,-4.041827,-9.935130,8.458134],[5.921689,-4.219879,8.029261,-1.724096,-2.584440,-6.607032,5.507649,-4.536226,2.635076,2.393664],[-5.887591,0.109713,3.275276,4.405324,-1.478791,-6.256815,6.378543,6.057150,3.568653,-0.993141],[-0.318065,-0.236844,-8.049916,-8.146846,9.750468,9.029526,-5.110914,-5.310792,2.694677,8.274869],[6.094796,8.055744,-7.405695,3.497020,-3.484150,0.264126,-8.564607,-1.671301,1.812014,0.430926]],[[0.565786,-7.928932,3.222803,3.690833,5.857925,-3.891913,6.044439,9.536845,7.525862,7.059271],[-5.193007,-3.460125,3.420334,9.685075,-0.490626,2.159232,-0.774249,5.570633,5.498547,-2.263341],[-3.213328,3.685706,-3.112903,7.315489,7.141294,-3.144334,-6.587635,-4.283412,2.892137,-8.134047],[-8.820588,6.307713,5.194017,0.948718,-5.462449,5.911538,-0.784375,-9.608861,6.454096,-1.220005],[-6.717153,-3.499731,-9.212247,-3.847276,3.118997,1.844899,6.950719,-8.257617,1.217600,2.681185],[2.234264,-8.792165,2.095473,-0.192510,1.254721,9.979304,5.170905,-7.861716,-3.834426,-7.431834],[3.377697,-1.427818,-0.848639,8.193252,-2.862332,9.932722,-3.189933,5.735537,-1.403166,-4.875433],[2.363909,-9.634786,-9.647222,-2.839824,8.549288,-5.710578,-9.366521,9.856045,1.286614,-6.459753]],[[7.255112,4.973726,-3.562695,5.159852,-6.921862,-7.612104,5.612677,0.780691,1.165568,5.092701],[-7.078620,8.275180,-3.866405,4.473314,2.004249,3.708573,-6.851022,-8.344172,7.591298,3.705591],[-0.619293,1.313389,-2.989346,9.135762,-3.408490,5.132665,-0.484429,4.096016,9.133602,-4.410108],[2.485838,-9.236880,-7.963484,-2.061242,-9.681533,8.490151,6.067886,8.151090,4.071578,3.123746],[2.943974,-6.864196,9.758172,-2.569708,8.367196,8.931306,-7.656869,-1.093306,4.347285,-4.378020],[-9.479887,-5.321157,2.644630,-4.975880,-1.715235,-6.720412,-0.718020,9.002340,2.299747,-8.915488],[-3.612958,5.503354,0.592092,8.411753,-0.140673,6.654621,2.831377,-4.394700,0.896254,-6.092310],[-8.812424,4.254250,1.904249,-9.757229,-8.154486,9.434788,-3.059954,7.307099,-5.850523,-6.796763]],[[-3.110603,-0.848354,9.544759,-6.018705,1.219014,-7.120238,-7.571463,-5.181784,-4.900458,-8.186484],[5.733954,0.590755,-0.827093,-1.515855,9.900298,0.050235,-0.171919,-8.531973,-0.139068,-8.611450],[1.552134,9.450117,-9.349676,9.399764,-7.851534,5.676217,-5.408556,8.275004,8.015993,2.904647],[1.923053,-8.572727,-6.414535,6.874989,-9.416569,-0.284349,4.761177,8.616421,8.552862,-6.476045],[-3.386011,-6.683366,7.558379,3.383124,4.570472,4.394219,4.524736,-4.968644,-8.213370,-6.900968],[6.091887,-2.313416,-1.317366,-7.458902,6.743799,0.613875,-0.470687,-0.735803,0.262315,-4.477088],[-4.707892,1.877235,1.519536,-9.859662,-2.415259,-5.720106,5.300505,-9.871368,-5.833546,-9.634698],[5.401160,5.039446,9.119963,3.302337,2.571985,6.630657,-5.485179,0.073021,-6.686286,0.477076]],[[-0.065622,-8.700334,4.784746,2.536891,7.902701,7.952744,0.977728,-7.565591,-8.104922,-6.883801],[4.660542,8.713506,-1.271711,7.836847,-5.171609,6.528076,4.302918,8.876195,-9.186454,-4.626507],[-1.829989,5.186762,8.237926,-3.920588,7.216802,3.176951,-0.813093,-7.837099,-0.135734,4.289718],[9.395677,4.081211,-2.074735,1.098395,-0.218901,-0.494791,6.297127,-3.256817,2.322282,-5.527177],[4.322473,2.579705,-0.033370,4.035340,6.774907,-4.133163,6.216445,3.224209,-6.616152,4.026914],[0.085721,5.153460,5.781882,3.123727,-7.168367,7.988100,2.803325,9.575344,0.892170,-9.606459],[6.858997,1.748258,8.113342,-3.301103,4.997423,-5.162041,6.394547,3.899173,8.255539,9.736182],[-3.117112,-1.308313,2.143780,7.725535,-1.299720,4.040410,-6.767701,-3.747078,-4.846718,3.965007]],[[-1.445616,-5.377009,6.330243,-2.868995,-2.296067,-8.836678,9.482847,-1.832838,-1.925057,2.768170],[-5.131888,-3.076660,3.506155,-2.642858,9.074682,6.342332,8.667467,0.506099,7.171429,5.196973],[3.577804,-7.170579,-3.272589,7.877658,-2.065724,7.366411,-3.630663,-5.398085,2.913934,8.360456],[-5.293887,-2.592291,-0.956272,8.038950,-1.102610,3.991839,-1.962437,-3.198897,-3.845768,-5.094917],[-2.995830,8.843958,2.577466,-4.995962,-4.544425,-2.223974,-1.475458,-1.108961,-4.824542,-0.754361],[9.711276,0.296151,6.075921,-0.623924,3.993364,-3.855929,0.586662,-3.154576,8.834665,7.394585],[-6.354338,3.223247,-0.010925,9.430349,4.662805,6.241387,3.980610,-5.785691,-9.832346,0.220832],[8.550100,3.302742,5.276865,-4.222915,-7.778218,5.386406,4.681178,8.733579,-3.925818,-1.104320]],[[-6.845297,-7.663963,-2.594501,-9.119873,-2.446201,7.962050,-5.141561,-4.752169,-2.619846,-1.361331],[-6.444104,-0.576112,-0.009280,4.805522,-9.476116,-4.310300,-1.291787,7.138194,-2.036518,9.025784],[8.063604,-9.111332,-0.060455,6.310283,4.821079,8.595464,4.994191,0.192905,-3.830189,6.598754],[1.072612,8.066015,-2.375091,-3.569480,9.123358,5.549610,-7.387529,-1.721362,-3.436879,-2.354503],[9.487394,6.793340,5.453919,1.496801,-6.998321,-5.055736,-8.289507,6.326334,-7.151000,5.169619],[6.071006,-7.933262,6.819949,-9.215241,3.582362,8.247777,6.134602,7.005161,-2.369821,-3.591746],[0.906975,-9.623929,-4.141470,5.942755,0.632673,-5.815837,2.050555,2.890538,7.175573,5.323708],[-9.998286,-4.731214,3.807722,-8.826586,-5.400887,-3.476441,5.843489,7.834768,-2.186951,9.197840]],[[-8.014281,8.851222,-5.918500,-2.747482,-7.253755,-3.304696,-9.517887,-3.227103,7.995583,5.103027],[8.431452,7.475113,-0.181197,9.583408,4.370045,5.852830,-6.831314,-7.986433,0.267618,0.781084],[-1.405309,-7.885965,-0.898236,-8.237489,1.123236,2.191300,-9.836943,0.372830,4.855863,5.527643],[0.072925,-3.568665,1.325122,0.381795,8.609335,1.421461,-1.494435,5.169710,-5.384809,-4.758900],[6.048056,7.645745,5.350778,6.168741,4.547820,3.217404,0.773602,-2.878267,-2.460860,3.662736],[-3.091846,6.381622,-1.130249,0.142071,2.337131,-9.869880,6.366564,-3.404203,-1.457035,-0.307470],[-4.336466,5.833673,8.185085,6.167017,7.667081,-7.101977,5.780766,-8.106768,-8.991794,-3.054141],[-0.797913,-6.162772,-6.809690,-1.533130,-5.816683,-5.935898,-8.158387,-3.212607,-0.717176,-6.933428]],[[-3.406127,9.457146,-4.514460,2.875280,-0.502728,-4.668061,-3.334746,-5.238051,1.859962,-6.092983],[2.641059,8.591019,-6.592661,-9.783702,6.560633,-8.367379,7.950144,2.222003,0.317451,-6.659224],[-0.315131,-5.129857,9.839419,-1.520601,9.877009,2.541511,2.374985,3.345960,-2.831092,-0.346044],[-9.846407,-6.659801,0.651809,7.096810,-0.540951,-0.797760,2.340017,-9.930100,4.861415,4.120716],[2.850778,-8.969429,8.164425,-1.072032,6.178772,1.637954,1.961853,9.022345,3.290579,7.805551],[-4.587006,0.790399,3.036203,-4.946282,-4.520440,7.482264,-9.601140,-8.120829,3.873654,-9.415476],[-3.051464,-6.693565,9.861933,-6.902679,0.590116,-9.990421,0.099046,2.903213,0.121536,1.266963],[2.126745,9.712530,-2.729166,-5.454673,-5.443943,-9.535225,-5.187779,-3.640843,-7.397812,2.140717]],[[4.933340,6.421016,5.895587,1.804961,7.998701,-3.978724,9.169673,-7.893579,3.552828,-1.645420],[7.008352,-9.493638,4.029927,0.861469,2.907938,9.959257,0.244860,6.464817,2.115275,5.781817],[-5.955248,-0.608499,-2.721851,5.274081,8.456454,3.929970,8.405125,-2.131291,0.647260,-0.361940],[-9.126811,6.812474,5.127212,-2.655647,3.225749,9.855369,6.919257,6.731901,-7.443789,-9.172301],[-2.216955,5.946477,9.531019,3.666641,3.354684,-8.772671,6.442810,7.458285,-4.651199,-8.107085],[-3.341352,6.027311,5.381270,7.209305,-4.391724,8.288018,9.042229,-9.076225,-1.748578,0.617178],[7.213996,-6.002093,2.718279,5.375192,8.894878,7.080067,4.564209,-7.227052,-9.744656,2.265813],[9.636763,8.608691,5.836089,0.712557,4.258109,0.441816,-1.994706,-6.113396,-0.321690,-4.138852]],[[8.530574,3.279658,-3.351267,2.895679,7.877201,2.587471,9.389074,5.623952,-6.877926,-1.135310],[-2.108499,6.598481,3.941855,-5.652667,9.979341,-0.473979,2.580881,-0.773641,9.112206,-6.762094],[-3.364832,9.178133,-3.426440,-6.804698,3.691124,5.628463,-3.010282,5.848707,-3.159040,3.995084],[-4.857973,-6.781008,7.987501,1.947375,-4.900805,9.875459,-2.219907,-7.424730,-2.243418,4.582069],[4.044821,5.857838,3.873974,-2.671022,-8.123314,-6.497454,1.143303,-0.761531,0.598922,5.617700],[8.262564,-5.960231,1.762614,6.039377,0.996032,0.403143,5.778376,-2.391583,5.988797,-9.432125],[7.884111,-3.958961,2.769479,2.312743,3.878279,-8.165741,-1.997653,-5.876334,9.233755,7.305075],[-4.254270,4.959564,6.590612,3.143960,-9.711967,-1.399507,-1.557989,-4.392290,-3.224955,-1.423289]],[[-0.073324,-1.267861,1.479255,-7.167421,-2.930420,4.874776,3.119520,-4.647418,-7.200223,4.558697],[2.926391,-8.330923,8.652235,9.577519,1.472615,8.205648,-6.901743,-2.421340,-5.818045,-7.463858],[-0.127064,1.201244,6.286412,-5.240788,1.458481,-1.147420,5.381072,-7.727196,-0.301929,-1.706771],[9.585332,4.664243,-7.555160,8.629304,7.033762,7.557697,5.748520,1.029350,4.955468,5.031549],[5.727671,5.236328,-0.073543,3.253671,-6.638373,-3.608518,1.005401,3.370909,7.816208,-7.812166],[1.551607,-4.462998,9.363856,4.185144,2.578762,2.170503,-7.489687,-0.177727,3.218895,4.059965],[1.013099,9.530120,-4.659306,-0.374498,-9.352595,-7.545113,4.394372,-5.297362,-3.657520,1.242536],[-0.495438,-5.688109,8.971588,-9.461746,0.535232,-5.596926,4.893318,7.041540,4.543644,-1.473421]]], dtype = "float32")#candidate|235|(12, 8, 10)|const|float32
bop_236 = relay.bitwise_or(bop_206.astype('uint64'), relay.reshape(const_235.astype('uint64'), relay.shape_of(bop_206))) # shape=(12, 8, 10)
uop_239 = relay.cosh(bop_206.astype('float64')) # shape=(12, 8, 10)
output = relay.Tuple([uop_209,bop_214,call_217,var_218,bop_225,uop_228,bop_236,uop_239,])
output2 = relay.Tuple([uop_209,bop_214,call_219,var_218,bop_225,uop_228,bop_236,uop_239,])
func_242 = relay.Function([var_188,var_191,var_195,var_205,var_218,var_224,], output)
mod['func_242'] = func_242
mod = relay.transform.InferType()(mod)
var_243 = relay.var("var_243", dtype = "float64", shape = (12, 8, 10))#candidate|243|(12, 8, 10)|var|float64
var_244 = relay.var("var_244", dtype = "float64", shape = (12, 8, 10))#candidate|244|(12, 8, 10)|var|float64
var_245 = relay.var("var_245", dtype = "int16", shape = (12, 8, 10))#candidate|245|(12, 8, 10)|var|int16
var_246 = relay.var("var_246", dtype = "float64", shape = (12, 8, 10))#candidate|246|(12, 8, 10)|var|float64
var_247 = relay.var("var_247", dtype = "float64", shape = (10,))#candidate|247|(10,)|var|float64
var_248 = relay.var("var_248", dtype = "float32", shape = (12, 8, 10))#candidate|248|(12, 8, 10)|var|float32
output = func_242(var_243,var_244,var_245,var_246,var_247,var_248,)
func_249 = relay.Function([var_243,var_244,var_245,var_246,var_247,var_248,], output)
mutated_mod['func_249'] = func_249
mutated_mod = relay.transform.InferType()(mutated_mod)
var_274 = relay.var("var_274", dtype = "float32", shape = (2, 5))#candidate|274|(2, 5)|var|float32
uop_275 = relay.sin(var_274.astype('float32')) # shape=(2, 5)
uop_279 = relay.acosh(uop_275.astype('float32')) # shape=(2, 5)
bop_281 = relay.floor_mod(uop_279.astype('float64'), relay.reshape(var_274.astype('float64'), relay.shape_of(uop_279))) # shape=(2, 5)
bop_285 = relay.logical_or(uop_279.astype('bool'), relay.reshape(bop_281.astype('bool'), relay.shape_of(uop_279))) # shape=(2, 5)
output = relay.Tuple([bop_285,])
output2 = relay.Tuple([bop_285,])
func_292 = relay.Function([var_274,], output)
mod['func_292'] = func_292
mod = relay.transform.InferType()(mod)
var_293 = relay.var("var_293", dtype = "float32", shape = (2, 5))#candidate|293|(2, 5)|var|float32
output = func_292(var_293)
func_294 = relay.Function([var_293], output)
mutated_mod['func_294'] = func_294
mutated_mod = relay.transform.InferType()(mutated_mod)
var_304 = relay.var("var_304", dtype = "uint8", shape = (10, 8))#candidate|304|(10, 8)|var|uint8
var_305 = relay.var("var_305", dtype = "uint8", shape = (10, 8))#candidate|305|(10, 8)|var|uint8
bop_306 = relay.less(var_304.astype('bool'), relay.reshape(var_305.astype('bool'), relay.shape_of(var_304))) # shape=(10, 8)
output = bop_306
output2 = bop_306
func_310 = relay.Function([var_304,var_305,], output)
mod['func_310'] = func_310
mod = relay.transform.InferType()(mod)
var_311 = relay.var("var_311", dtype = "uint8", shape = (10, 8))#candidate|311|(10, 8)|var|uint8
var_312 = relay.var("var_312", dtype = "uint8", shape = (10, 8))#candidate|312|(10, 8)|var|uint8
output = func_310(var_311,var_312,)
func_313 = relay.Function([var_311,var_312,], output)
mutated_mod['func_313'] = func_313
mutated_mod = relay.transform.InferType()(mutated_mod)
var_346 = relay.var("var_346", dtype = "float64", shape = (16, 16))#candidate|346|(16, 16)|var|float64
uop_347 = relay.acosh(var_346.astype('float64')) # shape=(16, 16)
var_350 = relay.var("var_350", dtype = "float64", shape = (16, 16))#candidate|350|(16, 16)|var|float64
bop_351 = relay.right_shift(uop_347.astype('int8'), relay.reshape(var_350.astype('int8'), relay.shape_of(uop_347))) # shape=(16, 16)
const_354 = relay.const([[7,9,3,4,1,2,-6,-2,-8,3,5,1,4,9,8,-3],[-1,-4,6,-6,-4,6,-1,2,-3,3,10,7,-9,-5,-6,-1],[-1,-3,3,-3,8,-6,-6,-2,-5,6,-8,-1,-1,-3,3,6],[-7,2,-8,8,4,7,-4,10,6,7,9,3,4,-7,-8,-2],[1,6,9,-5,7,3,-3,-3,9,2,-7,9,1,-8,-10,7],[-4,-1,8,-4,-10,-8,-1,1,-10,9,-10,-7,-4,-1,7,6],[-2,4,2,4,-6,4,-3,9,-10,1,7,-2,-4,5,-2,3],[-7,1,-5,-1,7,-8,2,6,-6,-5,-4,5,-1,-9,3,-6],[-7,2,-4,-2,-10,-3,-10,6,5,-10,-8,9,5,-2,-10,-9],[-7,-8,3,4,-4,6,8,-1,-3,4,-6,-1,-10,1,3,-6],[2,3,-8,1,-6,6,-10,8,8,5,6,-6,8,6,-7,4],[-8,7,6,8,4,5,-10,7,7,-1,7,9,5,7,-8,3],[9,-4,7,-4,-5,-5,4,-3,4,-1,-3,6,-6,4,-3,-3],[-9,7,10,-7,2,2,-3,-4,10,10,10,3,-9,1,4,-6],[3,-6,-3,-10,4,1,-6,8,4,9,-2,-9,7,-2,-8,-3],[10,-5,-4,-9,8,10,7,-10,-6,5,1,-8,6,1,-10,6]], dtype = "int8")#candidate|354|(16, 16)|const|int8
bop_355 = relay.greater_equal(bop_351.astype('bool'), relay.reshape(const_354.astype('bool'), relay.shape_of(bop_351))) # shape=(16, 16)
output = relay.Tuple([bop_355,])
output2 = relay.Tuple([bop_355,])
func_358 = relay.Function([var_346,var_350,], output)
mod['func_358'] = func_358
mod = relay.transform.InferType()(mod)
mutated_mod['func_358'] = func_358
mutated_mod = relay.transform.InferType()(mutated_mod)
func_358_call = mutated_mod.get_global_var('func_358')
var_360 = relay.var("var_360", dtype = "float64", shape = (16, 16))#candidate|360|(16, 16)|var|float64
var_361 = relay.var("var_361", dtype = "float64", shape = (16, 16))#candidate|361|(16, 16)|var|float64
call_359 = func_358_call(var_360,var_361,)
output = call_359
func_362 = relay.Function([var_360,var_361,], output)
mutated_mod['func_362'] = func_362
mutated_mod = relay.transform.InferType()(mutated_mod)
const_464 = relay.const([[True,False,False,True,True,False,False,False],[True,True,False,True,False,False,False,False],[False,True,True,False,True,False,False,True],[True,False,False,True,True,False,True,True],[False,True,False,True,True,False,True,True],[True,True,False,False,True,True,False,False],[False,True,False,True,True,True,False,False],[True,True,True,True,True,True,False,True],[False,False,False,False,False,True,True,False],[False,True,False,False,False,False,False,False],[True,False,False,False,True,False,False,True],[True,True,False,False,False,False,True,True]], dtype = "bool")#candidate|464|(12, 8)|const|bool
const_465 = relay.const([[True,True,False,False,False,False,True,True],[False,True,False,False,True,False,True,True],[False,True,True,True,True,False,False,True],[False,True,True,False,False,False,False,False],[True,False,False,True,True,True,True,True],[False,True,False,True,True,True,True,False],[True,False,True,False,False,True,True,False],[False,True,False,True,True,False,True,True],[False,True,False,True,True,True,True,True],[False,True,True,False,False,False,False,True],[False,True,False,False,False,True,False,True],[False,False,False,False,False,True,True,False]], dtype = "bool")#candidate|465|(12, 8)|const|bool
bop_466 = relay.logical_and(const_464.astype('bool'), relay.reshape(const_465.astype('bool'), relay.shape_of(const_464))) # shape=(12, 8)
uop_472 = relay.sigmoid(bop_466.astype('float32')) # shape=(12, 8)
func_292_call = mod.get_global_var('func_292')
func_294_call = mutated_mod.get_global_var('func_294')
var_477 = relay.var("var_477", dtype = "float32", shape = (10,))#candidate|477|(10,)|var|float32
call_476 = relay.TupleGetItem(func_292_call(relay.reshape(var_477.astype('float32'), [2, 5])), 0)
call_478 = relay.TupleGetItem(func_294_call(relay.reshape(var_477.astype('float32'), [2, 5])), 0)
output = relay.Tuple([uop_472,call_476,var_477,])
output2 = relay.Tuple([uop_472,call_478,var_477,])
func_491 = relay.Function([var_477,], output)
mod['func_491'] = func_491
mod = relay.transform.InferType()(mod)
var_492 = relay.var("var_492", dtype = "float32", shape = (10,))#candidate|492|(10,)|var|float32
output = func_491(var_492)
func_493 = relay.Function([var_492], output)
mutated_mod['func_493'] = func_493
mutated_mod = relay.transform.InferType()(mutated_mod)
var_514 = relay.var("var_514", dtype = "float64", shape = (1,))#candidate|514|(1,)|var|float64
uop_515 = relay.asin(var_514.astype('float64')) # shape=(1,)
bop_517 = relay.left_shift(var_514.astype('uint32'), relay.reshape(uop_515.astype('uint32'), relay.shape_of(var_514))) # shape=(1,)
bop_522 = relay.logical_and(uop_515.astype('bool'), relay.reshape(var_514.astype('bool'), relay.shape_of(uop_515))) # shape=(1,)
bop_535 = relay.right_shift(bop_517.astype('int8'), relay.reshape(bop_522.astype('int8'), relay.shape_of(bop_517))) # shape=(1,)
bop_547 = relay.multiply(var_514.astype('int8'), relay.reshape(uop_515.astype('int8'), relay.shape_of(var_514))) # shape=(1,)
output = relay.Tuple([bop_535,bop_547,])
output2 = relay.Tuple([bop_535,bop_547,])
func_560 = relay.Function([var_514,], output)
mod['func_560'] = func_560
mod = relay.transform.InferType()(mod)
var_561 = relay.var("var_561", dtype = "float64", shape = (1,))#candidate|561|(1,)|var|float64
output = func_560(var_561)
func_562 = relay.Function([var_561], output)
mutated_mod['func_562'] = func_562
mutated_mod = relay.transform.InferType()(mutated_mod)
const_564 = relay.constdtype = "float64")#candidate|564|(15, 11, 16)|const|float64
uop_565 = relay.asinh(const_564.astype('float64')) # shape=(15, 11, 16)
uop_568 = relay.acos(uop_565.astype('float64')) # shape=(15, 11, 16)
func_491_call = mod.get_global_var('func_491')
func_493_call = mutated_mod.get_global_var('func_493')
var_574 = relay.var("var_574", dtype = "float32", shape = (5, 2))#candidate|574|(5, 2)|var|float32
call_573 = relay.TupleGetItem(func_491_call(relay.reshape(var_574.astype('float32'), [10,])), 0)
call_575 = relay.TupleGetItem(func_493_call(relay.reshape(var_574.astype('float32'), [10,])), 0)
bop_579 = relay.less(uop_568.astype('bool'), relay.reshape(uop_565.astype('bool'), relay.shape_of(uop_568))) # shape=(15, 11, 16)
var_582 = relay.var("var_582", dtype = "float64", shape = (15, 11, 16))#candidate|582|(15, 11, 16)|var|float64
bop_583 = relay.not_equal(uop_568.astype('bool'), relay.reshape(var_582.astype('bool'), relay.shape_of(uop_568))) # shape=(15, 11, 16)
output = relay.Tuple([call_573,var_574,bop_579,bop_583,])
output2 = relay.Tuple([call_575,var_574,bop_579,bop_583,])
func_586 = relay.Function([var_574,var_582,], output)
mod['func_586'] = func_586
mod = relay.transform.InferType()(mod)
mutated_mod['func_586'] = func_586
mutated_mod = relay.transform.InferType()(mutated_mod)
func_586_call = mutated_mod.get_global_var('func_586')
var_588 = relay.var("var_588", dtype = "float32", shape = (5, 2))#candidate|588|(5, 2)|var|float32
var_589 = relay.var("var_589", dtype = "float64", shape = (15, 11, 16))#candidate|589|(15, 11, 16)|var|float64
call_587 = func_586_call(var_588,var_589,)
output = call_587
func_590 = relay.Function([var_588,var_589,], output)
mutated_mod['func_590'] = func_590
mutated_mod = relay.transform.InferType()(mutated_mod)
const_654 = relay.const(-4.144675, dtype = "float64")#candidate|654|()|const|float64
var_655 = relay.var("var_655", dtype = "float64", shape = (5,))#candidate|655|(5,)|var|float64
bop_656 = relay.floor_divide(const_654.astype('float64'), var_655.astype('float64')) # shape=(5,)
func_358_call = mod.get_global_var('func_358')
func_362_call = mutated_mod.get_global_var('func_362')
var_663 = relay.var("var_663", dtype = "float64", shape = (256,))#candidate|663|(256,)|var|float64
call_662 = relay.TupleGetItem(func_358_call(relay.reshape(var_663.astype('float64'), [16, 16]), relay.reshape(var_663.astype('float64'), [16, 16]), ), 0)
call_664 = relay.TupleGetItem(func_362_call(relay.reshape(var_663.astype('float64'), [16, 16]), relay.reshape(var_663.astype('float64'), [16, 16]), ), 0)
output = relay.Tuple([bop_656,call_662,var_663,])
output2 = relay.Tuple([bop_656,call_664,var_663,])
func_670 = relay.Function([var_655,var_663,], output)
mod['func_670'] = func_670
mod = relay.transform.InferType()(mod)
var_671 = relay.var("var_671", dtype = "float64", shape = (5,))#candidate|671|(5,)|var|float64
var_672 = relay.var("var_672", dtype = "float64", shape = (256,))#candidate|672|(256,)|var|float64
output = func_670(var_671,var_672,)
func_673 = relay.Function([var_671,var_672,], output)
mutated_mod['func_673'] = func_673
mutated_mod = relay.transform.InferType()(mutated_mod)
var_737 = relay.var("var_737", dtype = "float32", shape = ())#candidate|737|()|var|float32
var_738 = relay.var("var_738", dtype = "float32", shape = (10, 5, 5))#candidate|738|(10, 5, 5)|var|float32
bop_739 = relay.subtract(var_737.astype('float32'), var_738.astype('float32')) # shape=(10, 5, 5)
func_38_call = mod.get_global_var('func_38')
func_42_call = mutated_mod.get_global_var('func_42')
var_745 = relay.var("var_745", dtype = "bool", shape = (112,))#candidate|745|(112,)|var|bool
call_744 = relay.TupleGetItem(func_38_call(relay.reshape(var_745.astype('bool'), [14, 4, 2]), relay.reshape(var_745.astype('bool'), [14, 4, 2]), ), 0)
call_746 = relay.TupleGetItem(func_42_call(relay.reshape(var_745.astype('bool'), [14, 4, 2]), relay.reshape(var_745.astype('bool'), [14, 4, 2]), ), 0)
func_38_call = mod.get_global_var('func_38')
func_42_call = mutated_mod.get_global_var('func_42')
call_749 = relay.TupleGetItem(func_38_call(relay.reshape(var_745.astype('bool'), [14, 4, 2]), relay.reshape(var_745.astype('bool'), [14, 4, 2]), ), 0)
call_750 = relay.TupleGetItem(func_42_call(relay.reshape(var_745.astype('bool'), [14, 4, 2]), relay.reshape(var_745.astype('bool'), [14, 4, 2]), ), 0)
const_758 = relay.const([True,False,True,True,True,True,False,True,True,True,True,True,False,False,True,True,True,False,True,True,False,False,True,True,True,True,False,False,False,True,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,True,False,False,True,True,False,True,True,True,False,False,False,False,True,False,True,True,True,True,True,True,False,False,False,False,True,True,False,False,True,True,True,True,False,False,True,False,False,False,True,False,True,True,True,False,True,False,True,False,True,True,True,True,True,False,False,False,True,False,True,False,True,False,False,True,True,True], dtype = "bool")#candidate|758|(112,)|const|bool
bop_759 = relay.bitwise_or(var_745.astype('uint64'), relay.reshape(const_758.astype('uint64'), relay.shape_of(var_745))) # shape=(112,)
func_132_call = mod.get_global_var('func_132')
func_136_call = mutated_mod.get_global_var('func_136')
const_769 = relay.const([8,1,-1,-10,-10,7,2,-5,-3,7,2,4,10,4,10,5,3,3,-6,7,10,5,-9,5,5,9,-1,3,-9,-5,10,-8,-7,7,8,9,-5,9,3,9,6,-5,10,-8,-7,-9,-4,10,-2,5,8,-7,8,-10,-10,1,6,2,-6,-5,5,9,-3,-3,5,-2,-3,7,-4,4,-5,-1,1,-7,4,-1,7,10,-1,2,2,9,4,-7,-5,4,6,-1,9,-5,1,5,7,8,10,-4,-8,8,-10,-10,-5,-5,2,-7,5,5,9,-5,-5,6,5,-8,2,-4,-10,-9,1,-6,-1,3,5,3,-7,-4,-3,2,10,-2,-5,-7,1,1,-2,-2,-8,-9,4,-10,-4,5,-5,-9,6,-7,8,-9,-2,10,5,-4,-8,9,9,-2,4,-2,6,-3,-3,-7,-4,1,-5,9,4,7,10,-5,-5,-2,6,-7,-5,7,3,-10,-10,-5,1,-9,7,8,-1,-6,10,5,-4,-2,-7,9,-5,-6,-8,-2,-3,4,4,-9,5,-1,-5,-2,-3,8,-3,7,-3,-3,-4,-10,5,-8,5,5,-3,4,-5,7,-1,7,9,2,-8,3,-9,8,-6,-2,-4,-3,-5,6,-7,9,7,4,1,10,-2,-3,5,-6,8,5,6,10,7,1,-1,2,6,6,3,-9,6,-7,-1,-3,2,2,6,-9,-10,-8,1,-8,5,4,-9,-4,-5,7,5,-9,-10,7,3,-10,8,-3,-8,-6,7,3,-7,1,8,-9,10,2,-9,7,-4,-4,-6,3,-9,9,1,2,-8,9,2,1,-8,-1,1,-8,6,-1,-8,-6,-3,3,-6,-1,7,-2,-10,9,7,2,10,7,1,-8,-10,3,9,7,-10,-10,8,4,-7,5,-4,4,-6,-10,8,-3,-10,4,-4,-5,-1,9,-8,-7,-7,9,-9,5,-5,-2,1,-3,-6,10,-8,-4,1,8,8,2,-8,-9,5,4,-7,3,4,10,-3,-1,7,-9,1,-6,5,-8,-1,1,9,8,-4,5,-8,-9,7,-1,-5,1,-10,-9,-6,-7,2,-7,-5,-10,-7,-8,-1,-6,-7,3,1,-10,-2,5,5,-9,2,-1,-2,-6,7,-5,-1,7,10,-1,-5,-2,-1,-6,-9,-7,-2,7,-9,-2,7,7,8,7,3,1,-1,6,9,2,7,-6,8,-3,-6,-5,4,-2,-3,2,-7,5,-5,-1,3,10,-3,-10,-10,7,-10,9,-2,6,-10,-5,-1,-6,-3,3,-10,-7,1,-1,-10,9,1,-2,8,10,6,4,8,-8,-7,-7,5,-10,-1,9,9,1,-3,5,-3,-9,2,8,5,1,6,9,-3,-6,-7,-8,-3,8,-4,-9,-8,5,4,-10,-9,9,10,-5,-6,-9,-7,1,6,6,-4,6,-3,-4,6,6,-6,1,2,8,8,-2,4,7,-5,-1,-9,-3,-10,1,-2,3,1,-3,-1,-2,-8,-8,-10,-4,9,5,4,2,6,2,-10,3,1,8,-9,-3,-7,-1,5,3,1,-1,6,9,-7,-10,-7,2,-1,10,-3,6,5,8,-3,3,8,10,-7,8,3,-1,-10,-8,3,8,-4,-5,-4,-6,-5,2,3,9,-5,2,-4,-8,-7,-5,6,-6,10,7,6,10,2,-5,7,5,-3,-8,1,9,-2,-10,-8,1,10,1,-1,9,4,-10,-10,-3,-1,7,-8,-10,3,-1,8,10,-7,-4,-1,-6,7,-5,1,7,10,-4,2,-9,5,7,-9,1,-7,8,8,-4,10,-1,1,2,3,8,-1,-2,6,-10,-8,2,-6,7,6,10,-3,6,-10,-5,-6,2,-9,-6,6,9,8,1,-4,7,-10,-6,9,-8,4,-4,6,10,10,10,3,-10,-3,-5,7,-6,1,1,6,9,-1,-10,8,-2,-7,2,2,-1,3,1,-9,1,9,-8,-1,4,-9,-1,-8,5,5,-7,1,3,3,-8,-1,2,10,6,6,-3,8,-4,-7,2,-6,1,7,3,-10,-4,-9,4,6,-9,3,1,-6,-8,4,6,-8,-1,-3,-9,-7,-5,-9,6,-10,-2,-8,2,8,6,-1,5,-1,8,-1,8,-10,-4,1,-6,4,-4,1,-6,-8,-2,-7,10,-3,4,3,-2,5,2,4,9,-6,-10,-10,7,-1,9,-5,-7,-7,-4,3,3,-10,5,5,-1,6,-9,10,-6,-4,-8,-4,-1,6,-9,-9,-4,-1,4,3,-8,-9,-7,4,7,-8,9,1,-1,5,-3,-6,5,8,-3,7,1,-10,-4,-6,2,-7,6,-3,3,10,-2,7,-4,-9,7,10,-1,-8,5,-5,8,10,-7,4,10,-10,-10,2,-1,3,-6,-5,3,1,9,-5,-5,2,7,-6,10,1,-2,-6,-5,-10,-1,-7,10,4,-3,6,-3,2,6,9,5,-8,5,1,-6,-1,7,3,8,-7,-6,9,-3,1,10,-7,-2,-3,2,4,-6,-5,5,-2,-5,3,6,-5,4,8,8,2,-2,-6,10,10,-7,1,-5,6,-6,3,3,-10,-6,3,-4,3,-10,10,-8,-8,-7,6,3,-4,-1,10,-7,-10,-9,-4,-8,8,-3,-7,-9,6,3,-8,2,-5,8,-6,6,-5,-7], dtype = "uint16")#candidate|769|(990,)|const|uint16
call_768 = relay.TupleGetItem(func_132_call(relay.reshape(const_769.astype('uint16'), [15, 11, 6]), relay.reshape(const_769.astype('uint16'), [15, 11, 6]), ), 0)
call_770 = relay.TupleGetItem(func_136_call(relay.reshape(const_769.astype('uint16'), [15, 11, 6]), relay.reshape(const_769.astype('uint16'), [15, 11, 6]), ), 0)
func_358_call = mod.get_global_var('func_358')
func_362_call = mutated_mod.get_global_var('func_362')
var_775 = relay.var("var_775", dtype = "float64", shape = (8, 32))#candidate|775|(8, 32)|var|float64
call_774 = relay.TupleGetItem(func_358_call(relay.reshape(var_775.astype('float64'), [16, 16]), relay.reshape(var_775.astype('float64'), [16, 16]), ), 0)
call_776 = relay.TupleGetItem(func_362_call(relay.reshape(var_775.astype('float64'), [16, 16]), relay.reshape(var_775.astype('float64'), [16, 16]), ), 0)
output = relay.Tuple([bop_739,call_744,call_749,bop_759,call_768,const_769,call_774,var_775,])
output2 = relay.Tuple([bop_739,call_746,call_750,bop_759,call_770,const_769,call_776,var_775,])
func_787 = relay.Function([var_737,var_738,var_745,var_775,], output)
mod['func_787'] = func_787
mod = relay.transform.InferType()(mod)
mutated_mod['func_787'] = func_787
mutated_mod = relay.transform.InferType()(mutated_mod)
func_787_call = mutated_mod.get_global_var('func_787')
var_789 = relay.var("var_789", dtype = "float32", shape = ())#candidate|789|()|var|float32
var_790 = relay.var("var_790", dtype = "float32", shape = (10, 5, 5))#candidate|790|(10, 5, 5)|var|float32
var_791 = relay.var("var_791", dtype = "bool", shape = (112,))#candidate|791|(112,)|var|bool
var_792 = relay.var("var_792", dtype = "float64", shape = (8, 32))#candidate|792|(8, 32)|var|float64
call_788 = func_787_call(var_789,var_790,var_791,var_792,)
output = call_788
func_793 = relay.Function([var_789,var_790,var_791,var_792,], output)
mutated_mod['func_793'] = func_793
mutated_mod = relay.transform.InferType()(mutated_mod)
const_795 = relay.const([3.172234,-6.855595,-1.393820,0.281356,-8.496088,-1.322495,1.692972,1.133089,-8.791231], dtype = "float64")#candidate|795|(9,)|const|float64
uop_796 = relay.rsqrt(const_795.astype('float64')) # shape=(9,)
func_242_call = mod.get_global_var('func_242')
func_249_call = mutated_mod.get_global_var('func_249')
const_808 = relay.const([-8.771861,-9.830899,1.451115,8.023839,-6.216840,2.394003,3.138678,-9.608352,0.594500,-3.678500,7.269352,-9.200576,-5.902727,7.929074,-2.980396,5.700757,0.609273,-9.682253,-1.324722,-4.874706,3.996625,7.294853,-4.289829,-6.677599,6.461290,1.125325,-1.912768,9.453349,-8.875669,1.969417,1.206443,-5.142375,-1.168923,4.118808,-7.047465,3.265836,1.428511,0.020338,-9.537473,5.709974,-7.745693,-0.960747,-4.490016,3.928650,-4.997713,5.574351,-9.957309,-1.239268,-4.532975,5.645122,6.412126,9.050464,-8.146628,-3.422226,-0.863528,-1.610831,-0.494009,7.176314,-4.637845,-1.566492,1.441271,-8.206957,8.971721,-9.530064,-8.508041,-9.263678,-5.352423,-5.006497,-1.945324,1.972877,-6.247150,9.376806,-6.968084,4.150763,-3.346200,8.388067,-4.942973,3.060450,-2.667597,1.543955,8.368444,-0.990153,5.269250,-2.590974,1.707367,-3.150519,-1.304552,3.693657,1.662951,7.640331,-9.403518,9.682026,1.302833,-1.994774,4.673620,-2.190315,5.341623,-6.477209,-5.502270,5.188110,5.804252,6.280480,6.442361,-5.402628,-6.790366,-5.796840,4.162935,3.035901,-3.474860,-9.094163,3.971466,3.765195,-4.177174,-7.931199,-9.834124,-3.890185,0.509203,4.416124,-3.797402,5.983533,-7.513183,9.166922,-6.054144,-8.782839,-4.728985,-5.653708,5.095205,7.132193,4.881944,-9.240228,7.864552,0.635119,4.568031,2.998656,0.660707,-2.045737,2.960046,8.527405,-7.471032,-3.161076,-5.768320,-1.456433,-1.777888,3.583094,7.711282,-4.024192,7.081163,-4.541231,-4.806984,-8.199730,-1.473094,9.173960,2.551194,8.559531,-2.275845,-0.346490,-8.462890,6.988525,-7.024893,6.458522,-1.368772,-0.313293,7.854605,-6.486339,9.481911,2.886292,1.086059,7.467446,9.334210,-7.755573,-1.233623,3.330663,-1.463870,-7.872987,7.185172,-7.735609,1.969485,4.721749,6.186169,-1.257688,3.220967,5.758881,8.961233,2.420407,4.741776,-1.911700,-9.874683,6.570286,-5.773815,-8.934651,8.891981,-9.166386,0.847391,4.612343,6.034344,1.838178,-7.778936,-5.184178,6.852630,-3.576735,5.768691,6.697888,-3.806744,-9.170909,-9.992069,6.687847,-8.940684,-8.710612,6.115987,-8.780633,9.342402,3.285706,-1.126147,5.354028,1.394456,1.454751,6.451412,8.053214,6.540940,-3.274601,-6.391838,4.592376,9.384207,-1.046313,5.909763,-6.045986,5.638269,-5.943447,6.193918,0.035149,-0.682064,3.305885,1.044544,7.617910,8.744894,-4.284824,1.529276,-2.996775,9.835471,-6.496438,8.976238,-7.531448,-4.782014,4.812958,-8.152635,2.328976,3.627247,-7.382914,5.670604,4.146610,-4.495589,-5.780030,4.972049,-8.293287,0.022190,8.795755,8.962839,6.426669,8.519650,3.744086,-8.422627,-9.616025,-4.379521,-3.036702,-8.598561,-4.243594,-5.308170,3.761404,6.186503,-2.791585,-5.419164,2.055032,4.142410,8.079484,9.122957,6.386876,0.920552,0.438778,-1.225390,1.195418,5.472365,7.307536,-9.301551,8.266452,5.323819,7.886524,-7.928026,9.878344,6.538670,-8.692019,-9.944721,-8.413253,0.355657,4.869359,-3.146717,-3.017289,-8.179902,8.419735,-6.961107,-8.096667,-5.042149,3.017987,-9.304450,6.003215,-9.307160,5.055519,1.008164,-8.647446,1.763099,-9.381871,6.171697,-9.419838,1.472001,-4.161648,-6.034374,7.868343,-3.177880,2.823300,4.682276,3.750703,-4.179672,-4.354260,-0.138172,-8.597693,-6.610879,1.758678,-7.019687,1.459396,9.107323,8.511655,-6.806978,1.524698,-4.470316,-8.070866,4.441966,0.095257,-4.638128,8.403259,-7.154350,-4.978449,-6.981755,-8.743162,9.074019,-1.761482,-5.360659,0.054621,-3.257202,5.119044,7.428671,2.301555,6.637151,2.959927,-7.918084,9.645020,-6.871707,-4.013736,7.647456,9.369836,-2.567178,-3.303642,-4.030557,-3.848383,-5.964642,3.031493,1.379491,-6.419172,9.406586,-7.097973,-9.931168,-8.288675,4.106880,3.469810,-0.438034,-5.562149,1.953833,3.901221,-3.538583,-8.975262,8.325173,-7.750413,-7.103196,-4.423889,-5.537069,-9.550099,-3.329897,-6.217471,0.492654,-1.074826,-9.731276,-9.299837,5.907060,8.137423,3.074925,-0.570149,1.769421,4.250402,8.176968,7.908100,-7.555439,-2.302164,9.634593,9.925158,6.452210,-4.460138,-1.801547,4.157999,-3.323257,7.073387,-1.110891,-3.563896,-4.919488,-1.619189,7.412092,-4.928715,3.620488,-8.159263,1.956468,3.430987,-8.343859,-5.531562,-6.156569,-4.451935,4.085172,7.900830,-4.595080,2.597395,1.560660,-2.350498,-0.438579,2.065491,-4.116687,-7.100356,7.687350,-1.248495,3.260198,-8.428224,-0.793776,-4.771178,-9.050135,1.483048,6.214304,0.276820,-3.841428,-8.381016,-9.586411,-0.935316,5.859459,-5.096673,-1.005021,-3.736366,-4.876094,-1.731051,-0.691663,-5.130805,-1.336278,2.106950,-0.563306,-1.684788,-0.645969,9.842322,-5.662648,9.140295,-5.258621,-3.698974,-8.105522,-4.623409,4.963372,7.286807,7.909739,-0.701816,-0.397249,-6.509084,4.156781,0.734432,0.988350,-1.786589,5.161991,6.411186,-2.594604,-0.550554,1.202408,0.078994,3.056537,-0.517139,-8.130822,-9.214972,-8.996095,8.983350,-0.177617,5.132885,-5.826408,8.518228,-6.146494,1.241360,4.462631,1.202825,8.953077,8.847855,-8.466639,1.853179,9.979422,5.817620,-7.623894,5.024289,0.538044,-0.696291,-6.466671,4.509143,0.455548,6.663320,5.155690,6.877979,3.120694,5.958672,-8.920440,-0.289261,4.564643,5.479678,7.412128,-0.150123,7.191800,-7.813464,-2.317157,-1.699166,-5.331708,-7.398546,1.053204,-3.435088,1.221386,-8.632897,1.351353,2.125095,-8.630169,-1.900504,8.864883,-1.525696,-8.173954,-7.505390,9.557344,-7.968331,1.787675,5.616430,-8.085416,8.777391,1.545344,5.451795,5.428561,1.550441,9.133898,3.780858,-8.398616,2.931641,-1.861590,-4.556055,6.907110,3.402632,5.873585,5.134068,8.448147,2.717409,-5.656441,9.918124,1.344489,0.527095,-9.902167,5.539617,-2.419646,2.833813,1.131174,-7.343554,-3.104394,4.491580,-8.240600,1.488964,1.385428,6.285440,5.359883,8.705748,1.686935,0.303961,3.588898,5.056307,-9.231431,-0.601891,-8.570086,-7.477314,9.491166,-0.742217,-6.970339,6.275924,5.790759,4.956404,9.321997,1.200629,0.089481,-8.468023,-9.726734,-8.145155,9.997538,-3.931465,-9.859243,-3.870911,-9.810026,9.554809,0.241017,-7.248082,3.278709,9.988903,1.410480,-6.129675,-1.218933,2.766689,-6.400852,8.534378,0.474515,2.336361,-3.063746,1.686763,-5.526475,1.683419,0.458399,-1.070712,9.942080,9.839120,4.482995,5.876396,-5.414209,-0.421724,-8.078908,-7.115487,2.733835,1.828863,-8.559089,-7.435831,-0.416390,-5.700413,2.907573,-5.557360,-8.593131,6.842026,8.792476,2.832057,-1.153203,-0.054265,8.872176,-8.984994,-9.078444,-2.336834,-8.898275,-6.697138,-7.445942,-9.886922,4.524835,-9.482367,-9.169973,9.293336,-1.455906,8.116462,-2.906756,-6.157696,6.177041,-3.514142,-4.581130,-3.385461,5.241078,2.613844,8.055862,-2.575711,2.885810,-2.934096,-0.419322,2.704159,9.882314,3.950598,0.910157,1.186634,-4.417192,-2.380950,6.596767,4.304604,7.915841,-3.562617,-2.565356,-9.185373,-5.963731,8.233851,-2.831820,8.599708,-2.662570,-7.129411,-4.903389,-8.321636,8.669002,-1.392063,9.459253,-9.030383,-8.551052,1.638101,3.261195,-2.251045,-8.712179,-6.239310,0.306788,-0.185639,8.177569,3.630689,3.584390,-1.016091,-8.116873,6.177972,8.320223,6.695615,-0.789767,-2.051394,-9.093646,9.040399,0.048513,0.501259,-9.757152,-0.262377,-3.907667,6.244718,9.214146,6.605717,-3.020310,4.288983,-1.890277,-9.154412,5.837234,-4.374442,3.862267,-9.753212,3.252609,1.903022,-7.879752,5.123966,9.039470,-0.437600,9.197090,7.571821,-1.980041,2.904887,0.838676,3.951803,-1.757642,-0.157387,-7.551954,-0.031689,-9.565848,5.629738,6.853181,-1.769217,4.081333,8.165706,-6.237523,6.633156,5.363042,2.214185,-3.406802,7.025089,-6.578879,-3.711861,7.979937,-7.605676,8.705986,-4.023018,1.885039,6.705380,1.673814,5.208135,9.135384,-4.164582,5.453407,1.609650,-4.876462,-6.029308,-6.403915,4.313413,-1.090367,-1.867179,7.505317,-5.706580,8.535853,-3.525671,3.809003,-5.306207,-2.480945,9.552933,-2.005453,4.446519,-5.484550,4.601002,-4.517513,-6.969541,-3.571045,-0.669997,9.366519,-6.782297,2.793743,2.964372,-8.154125,7.666866,-7.991643,-9.191407,-5.775914,2.759360,-9.054100,5.429008,-4.675513,5.114015,-8.757797,-2.540673,-1.656034,-5.444758,5.137544,-2.767212,9.630081,-6.099225,2.887682,-4.088232,-1.800685,-9.732408,-3.069178,-2.356565,4.550052,-3.206240,4.283191,1.221925,0.590394,1.971534,1.342610,8.886510,-0.491877,-5.178809,-0.315346,0.461088,-9.191822,7.531307,1.221856,2.933789,0.421495,8.194425,3.875924,3.422596,-7.434074,6.289786,-3.772141,5.023377,3.518481,-8.107379,-0.093466,-9.761677,7.508426,-7.545323,8.424684,8.134152,5.153360,-0.407401,0.768453,0.715325,-9.048158,1.730017,9.176242,4.380681,-1.049438,7.727633,7.240151,-1.288755,7.191214,-1.797020,-6.393642,-3.611828,-0.867451,-1.642641,-3.413327,4.997508,4.546194,5.860262,9.182143,6.810294,4.100776,0.227417,-1.858783,0.501849,-1.607113,2.903098,-4.533723,-8.871610,-6.495209,-7.771820,-4.395361,4.576555,3.378139,5.773640,-6.320720,-5.890272,8.135135,-8.275905,8.918220,9.012879,2.106102,4.245907,-3.451528,-7.554161,-8.383595,1.980497,7.461824,-4.612301,-0.754874,7.533425,-4.321841,-7.681548,8.242484,-9.244981,-8.214281,-3.314589,-3.229000,4.219619,3.809617,9.294948,3.893979,6.890611,8.783812,6.552850,1.816128,-3.428173,-6.996671,4.206865,-1.257012,6.284382,9.272935,-8.350019,4.152560,1.884054,-0.295273,-0.708489,4.977869,-4.476636,-8.947854,-4.369268,-0.942669,3.993476,7.713332,2.188320,-4.950771,7.100755,-0.006074,9.843945,0.186800,5.497134,7.779927,8.458682,7.815676,-6.099060,2.759247,9.801641,7.499902,5.972276,9.562164,-6.034482], dtype = "float64")#candidate|808|(960,)|const|float64
const_809 = relay.const([8.510047,-8.191632,-6.763794,-3.021727,1.062772,3.704545,1.851000,-4.841313,-3.694588,4.586697], dtype = "float64")#candidate|809|(10,)|const|float64
call_807 = relay.TupleGetItem(func_242_call(relay.reshape(const_808.astype('float64'), [12, 8, 10]), relay.reshape(const_808.astype('float64'), [12, 8, 10]), relay.reshape(const_808.astype('int16'), [12, 8, 10]), relay.reshape(const_808.astype('float64'), [12, 8, 10]), relay.reshape(const_809.astype('float64'), [10,]), relay.reshape(const_808.astype('float32'), [12, 8, 10]), ), 7)
call_810 = relay.TupleGetItem(func_249_call(relay.reshape(const_808.astype('float64'), [12, 8, 10]), relay.reshape(const_808.astype('float64'), [12, 8, 10]), relay.reshape(const_808.astype('int16'), [12, 8, 10]), relay.reshape(const_808.astype('float64'), [12, 8, 10]), relay.reshape(const_809.astype('float64'), [10,]), relay.reshape(const_808.astype('float32'), [12, 8, 10]), ), 7)
output = relay.Tuple([uop_796,call_807,const_808,const_809,])
output2 = relay.Tuple([uop_796,call_810,const_808,const_809,])
func_812 = relay.Function([], output)
mod['func_812'] = func_812
mod = relay.transform.InferType()(mod)
mutated_mod['func_812'] = func_812
mutated_mod = relay.transform.InferType()(mutated_mod)
func_812_call = mutated_mod.get_global_var('func_812')
call_813 = func_812_call()
output = call_813
func_814 = relay.Function([], output)
mutated_mod['func_814'] = func_814
mutated_mod = relay.transform.InferType()(mutated_mod)
func_812_call = mod.get_global_var('func_812')
func_814_call = mutated_mod.get_global_var('func_814')
call_832 = relay.TupleGetItem(func_812_call(), 2)
call_833 = relay.TupleGetItem(func_814_call(), 2)
uop_852 = relay.cos(call_832.astype('float32')) # shape=(960,)
uop_854 = relay.cos(call_833.astype('float32')) # shape=(960,)
uop_856 = relay.log(uop_852.astype('float64')) # shape=(960,)
uop_858 = relay.log(uop_854.astype('float64')) # shape=(960,)
bop_859 = relay.right_shift(uop_852.astype('int8'), relay.reshape(call_832.astype('int8'), relay.shape_of(uop_852))) # shape=(960,)
bop_862 = relay.right_shift(uop_854.astype('int8'), relay.reshape(call_833.astype('int8'), relay.shape_of(uop_854))) # shape=(960,)
uop_864 = relay.acosh(bop_859.astype('float64')) # shape=(960,)
uop_866 = relay.acosh(bop_862.astype('float64')) # shape=(960,)
bop_867 = relay.less_equal(uop_864.astype('bool'), relay.reshape(call_832.astype('bool'), relay.shape_of(uop_864))) # shape=(960,)
bop_870 = relay.less_equal(uop_866.astype('bool'), relay.reshape(call_833.astype('bool'), relay.shape_of(uop_866))) # shape=(960,)
bop_871 = relay.power(uop_852.astype('float64'), relay.reshape(bop_867.astype('float64'), relay.shape_of(uop_852))) # shape=(960,)
bop_874 = relay.power(uop_854.astype('float64'), relay.reshape(bop_870.astype('float64'), relay.shape_of(uop_854))) # shape=(960,)
func_812_call = mod.get_global_var('func_812')
func_814_call = mutated_mod.get_global_var('func_814')
call_878 = relay.TupleGetItem(func_812_call(), 2)
call_879 = relay.TupleGetItem(func_814_call(), 2)
func_78_call = mod.get_global_var('func_78')
func_82_call = mutated_mod.get_global_var('func_82')
var_884 = relay.var("var_884", dtype = "int16", shape = (24,))#candidate|884|(24,)|var|int16
var_885 = relay.var("var_885", dtype = "int16", shape = (168,))#candidate|885|(168,)|var|int16
call_883 = func_78_call(relay.reshape(var_884.astype('int16'), [12, 2, 1]), relay.reshape(var_885.astype('int16'), [12, 2, 7]), )
call_886 = func_78_call(relay.reshape(var_884.astype('int16'), [12, 2, 1]), relay.reshape(var_885.astype('int16'), [12, 2, 7]), )
func_155_call = mod.get_global_var('func_155')
func_157_call = mutated_mod.get_global_var('func_157')
var_888 = relay.var("var_888", dtype = "float64", shape = (5, 2))#candidate|888|(5, 2)|var|float64
call_887 = func_155_call(relay.reshape(var_888.astype('float64'), [1, 1, 10]))
call_889 = func_155_call(relay.reshape(var_888.astype('float64'), [1, 1, 10]))
func_670_call = mod.get_global_var('func_670')
func_673_call = mutated_mod.get_global_var('func_673')
const_892 = relay.const([[-3.679905],[-0.850127],[-5.567716],[7.324581],[-5.759419]], dtype = "float64")#candidate|892|(5, 1)|const|float64
const_893 = relay.const([-1.675245,0.078340,-6.425547,9.803273,8.354400,-3.471488,-1.032248,7.578322,5.382351,-1.401375,7.237526,-4.287556,-5.245194,4.544404,-6.741159,9.296641,0.071946,-4.293984,-0.124379,-3.067646,-2.625136,-4.786322,7.991569,3.174133,5.020300,-7.280907,5.453885,-3.127933,-9.275311,4.191165,-7.028680,4.256064,4.064161,4.900452,5.387547,0.976442,-1.641459,0.564848,-6.848805,9.582127,-6.042984,-6.026628,-5.609358,4.750901,-2.860725,6.184513,6.706094,7.205443,-7.142196,-4.167002,-9.302981,-8.381766,-8.395095,7.461793,-0.683348,-4.476384,-2.572681,-4.170159,0.142997,5.877684,-2.211395,-0.459424,4.545263,2.878189,9.578488,-7.208303,7.999213,-7.686931,-6.739834,-9.375299,-8.991480,5.049854,9.292280,-8.349854,4.765922,2.507834,-8.454311,5.913286,4.057922,-9.612720,-6.699651,-1.350277,7.222451,1.431689,-7.133445,-8.889553,7.372364,-7.524757,-8.113311,2.916367,-9.189517,5.223427,3.950206,8.683602,6.057889,3.337345,-2.027300,-1.104792,-4.898566,0.562567,9.864760,-3.967301,1.540083,-1.695655,7.652910,8.890818,-7.932215,-3.783181,9.019950,-4.737720,9.136427,-9.767133,4.341587,9.075497,1.469979,0.625981,7.232871,4.696898,-6.067107,-2.262507,6.339304,2.905312,-5.508430,6.939348,9.163190,5.216095,6.605245,-3.537758,-2.880070,1.904319,-4.772588,-6.695793,-4.637187,-7.159573,6.176172,-9.742734,-4.423309,-6.877390,3.198750,-4.297426,2.978679,-5.375186,-0.529816,-7.480285,-1.792170,-2.727921,-8.027872,-4.480463,-2.707266,6.118269,7.255154,-9.558028,6.354622,9.870279,1.505416,-5.778474,0.088867,7.342980,7.625892,-0.645251,3.792938,8.287176,3.479658,-0.714270,-0.965465,-0.201742,7.865441,-8.709911,1.689909,-9.972562,2.938528,-0.170180,1.222355,-1.150038,5.248851,-2.801029,3.554737,-8.207675,-9.313706,-9.850234,-7.035316,-2.151574,-7.046668,-2.235062,-7.958987,-5.060184,8.100981,-1.501786,-0.873284,-3.202209,6.667606,6.509253,-0.123309,-4.199945,-0.220386,6.711622,5.312796,1.809859,-3.847882,0.945983,-0.589144,0.388860,-4.075123,-7.498606,-9.895552,-2.998261,2.509620,0.512447,3.248724,-7.038534,-1.980735,-6.430869,-9.179211,5.493770,-0.389221,7.517452,-8.865494,-3.022330,5.775153,-1.687838,1.688144,2.253431,-8.190056,-2.852995,-5.073822,1.625097,3.354468,-4.955640,4.663822,-5.832152,9.269778,-1.979965,-8.353499,-9.785602,8.408271,-7.100866,-0.964038,-5.932001,-4.555731,-9.920540,4.593804,6.344188,-5.534032,-1.015906,-5.772222,3.067122,3.654627,8.373092,-7.535100,5.821955,-1.129839,9.553934,9.812964,3.849453,-1.351715,4.817186], dtype = "float64")#candidate|893|(256,)|const|float64
call_891 = relay.TupleGetItem(func_670_call(relay.reshape(const_892.astype('float64'), [5,]), relay.reshape(const_893.astype('float64'), [256,]), ), 2)
call_894 = relay.TupleGetItem(func_673_call(relay.reshape(const_892.astype('float64'), [5,]), relay.reshape(const_893.astype('float64'), [256,]), ), 2)
bop_896 = relay.floor_divide(bop_871.astype('float32'), relay.reshape(bop_859.astype('float32'), relay.shape_of(bop_871))) # shape=(960,)
bop_899 = relay.floor_divide(bop_874.astype('float32'), relay.reshape(bop_862.astype('float32'), relay.shape_of(bop_874))) # shape=(960,)
func_491_call = mod.get_global_var('func_491')
func_493_call = mutated_mod.get_global_var('func_493')
call_900 = relay.TupleGetItem(func_491_call(relay.reshape(call_887.astype('float32'), [10,])), 1)
call_901 = relay.TupleGetItem(func_493_call(relay.reshape(call_887.astype('float32'), [10,])), 1)
bop_903 = relay.power(uop_852.astype('float64'), const_892.astype('float64')) # shape=(5, 960)
bop_906 = relay.power(uop_854.astype('float64'), const_892.astype('float64')) # shape=(5, 960)
bop_907 = relay.bitwise_xor(uop_852.astype('uint16'), relay.reshape(uop_864.astype('uint16'), relay.shape_of(uop_852))) # shape=(960,)
bop_910 = relay.bitwise_xor(uop_854.astype('uint16'), relay.reshape(uop_866.astype('uint16'), relay.shape_of(uop_854))) # shape=(960,)
uop_911 = relay.asinh(bop_903.astype('float64')) # shape=(5, 960)
uop_913 = relay.asinh(bop_906.astype('float64')) # shape=(5, 960)
output = relay.Tuple([uop_856,call_878,call_883,var_884,var_885,call_887,var_888,call_891,const_893,bop_896,call_900,bop_907,uop_911,])
output2 = relay.Tuple([uop_858,call_879,call_886,var_884,var_885,call_889,var_888,call_894,const_893,bop_899,call_901,bop_910,uop_913,])
func_918 = relay.Function([var_884,var_885,var_888,], output)
mod['func_918'] = func_918
mod = relay.transform.InferType()(mod)
var_919 = relay.var("var_919", dtype = "int16", shape = (24,))#candidate|919|(24,)|var|int16
var_920 = relay.var("var_920", dtype = "int16", shape = (168,))#candidate|920|(168,)|var|int16
var_921 = relay.var("var_921", dtype = "float64", shape = (5, 2))#candidate|921|(5, 2)|var|float64
output = func_918(var_919,var_920,var_921,)
func_922 = relay.Function([var_919,var_920,var_921,], output)
mutated_mod['func_922'] = func_922
mutated_mod = relay.transform.InferType()(mutated_mod)
func_812_call = mod.get_global_var('func_812')
func_814_call = mutated_mod.get_global_var('func_814')
call_924 = relay.TupleGetItem(func_812_call(), 1)
call_925 = relay.TupleGetItem(func_814_call(), 1)
func_132_call = mod.get_global_var('func_132')
func_136_call = mutated_mod.get_global_var('func_136')
const_927 = relay.const([[-6,4,-7],[3,10,-8],[-9,10,-3],[3,-9,-1],[3,-6,6],[10,-9,5],[3,-1,9],[5,-6,-8],[-10,-10,-10],[-10,4,7],[2,-1,-4],[-4,2,1],[9,-9,-3],[-7,-6,1],[-9,-8,9],[-3,7,-1],[-2,-9,4],[-8,-5,9],[4,10,2],[-5,-4,-4],[-2,-3,2],[-9,1,-9],[-5,-8,-3],[-8,-1,-6],[-10,4,6],[7,4,7],[4,-10,-2],[-9,-5,-7],[2,-3,4],[5,-2,5],[6,8,-2],[6,8,10],[-5,9,4],[8,3,-10],[-3,-8,4],[5,-7,-2],[7,-6,5],[7,5,-2],[1,-6,3],[1,8,5],[7,6,4],[-3,-7,7],[5,6,9],[-8,9,-7],[7,-10,-9],[1,-6,10],[-4,-10,1],[6,3,-5],[-9,-5,6],[-1,-1,-10],[-8,6,7],[-4,8,5],[-3,-5,-1],[9,5,8],[-7,6,2],[8,-8,-3],[-10,-7,3],[8,-3,10],[-5,-5,2],[-4,2,7],[-8,3,-1],[1,5,10],[10,-4,10],[6,-3,-8],[4,-6,-5],[-10,9,-9],[4,-4,7],[-7,-1,-9],[-4,-8,4],[2,9,-4],[-2,-9,2],[3,-7,-4],[-10,-1,-1],[2,5,-2],[6,-7,-3],[-1,-7,-6],[-8,2,-6],[10,-7,-7],[-3,-4,8],[7,10,-1],[7,8,4],[-5,-2,8],[3,-6,-2],[1,-3,-6],[-10,5,1],[5,-1,3],[4,8,5],[4,7,-10],[-2,-6,7],[5,7,9],[9,-7,4],[6,6,-6],[3,10,-9],[-10,-3,-7],[10,-8,-6],[-6,-1,-7],[-1,-5,-6],[-9,-10,-8],[-9,-3,5],[-3,-5,-4],[7,8,-3],[3,8,2],[-8,3,-9],[-8,-1,1],[2,-3,-4],[-10,6,-7],[2,4,7],[-4,-6,4],[1,-4,-4],[8,-8,2],[7,10,-9],[2,-8,-9],[-2,-1,-1],[-6,6,5],[-4,5,2],[-3,-9,-2],[-4,10,-3],[-9,4,-7],[-5,-9,4],[3,5,-1],[5,-7,9],[-3,-8,-4],[-3,-7,-5],[6,-9,2],[-9,1,-1],[2,-6,-2],[-10,7,9],[-10,6,-3],[-4,-10,-4],[-6,7,6],[10,6,8],[-1,3,8],[-1,6,6],[8,-8,2],[-1,2,6],[4,5,1],[7,2,2],[-2,6,2],[-7,1,7],[7,2,3],[-5,-3,10],[4,6,7],[-5,10,-9],[3,-3,3],[-10,7,8],[-9,1,-5],[-5,-8,4],[10,-4,-1],[3,1,2],[7,4,5],[7,7,7],[-9,-9,-5],[2,-4,-6],[-1,1,-6],[-6,7,6],[-2,-6,-1],[8,-5,-8],[-2,6,9],[1,4,2],[6,-2,9],[-5,-2,-9],[3,-6,-6],[1,-7,6],[-2,7,-10],[3,-8,1],[4,10,6],[-1,-7,-9],[1,5,-8],[5,-9,-3],[3,8,-2],[1,-6,2],[-8,-3,1],[-2,-10,2],[9,6,-10],[-6,5,-4],[-5,-3,-4],[3,9,1],[-7,-2,-9],[5,-2,5],[-1,4,-6],[-5,5,-2],[-6,-3,2],[-4,-4,-6],[-3,-2,-5],[8,7,-6],[-4,6,10],[8,-4,10],[2,2,2],[-2,2,-3],[-10,-3,-7],[-2,9,-10],[-5,-2,9],[4,7,9],[8,8,5],[5,4,-4],[8,-2,3],[5,-2,8],[10,-3,10],[6,-7,-5],[6,8,9],[-1,-10,-3],[8,-3,-4],[2,-5,-1],[-10,4,-3],[-10,1,9],[1,-7,6],[4,-8,4],[7,8,-2],[-8,7,-8],[1,9,5],[3,1,-5],[-2,1,-5],[5,-3,-6],[1,-5,-8],[-9,2,-2],[-8,-3,9],[-4,-8,-2],[-1,4,10],[-9,8,9],[9,-6,8],[8,-6,-2],[10,5,-2],[10,4,7],[6,4,2],[-1,-3,-1],[-6,6,-1],[-5,6,-10],[7,-4,-4],[4,9,-3],[3,-9,10],[9,1,5],[4,5,-10],[-8,3,-9],[-3,8,-2],[10,-6,6],[-2,-1,10],[7,8,6],[6,-6,-6],[-9,-7,-10],[7,-6,2],[8,-7,-7],[5,-3,-5],[-2,2,4],[-2,-6,8],[-9,7,-8],[9,3,5],[3,3,2],[6,2,3],[-8,9,-5],[2,-3,-3],[-8,-7,6],[-10,-1,-8],[2,8,-4],[10,-7,5],[-7,9,-4],[1,3,-4],[9,10,6],[4,2,3],[-2,-7,3],[2,-7,-8],[-3,4,8],[-5,-3,-8],[2,8,-3],[-1,6,-5],[-8,-7,-9],[-7,-5,-8],[-10,-1,-9],[1,-8,-7],[-1,-7,6],[4,-8,-10],[-7,1,1],[-6,-4,3],[7,-5,6],[7,2,-4],[3,-2,-10],[-1,-1,-10],[2,3,-6],[-9,4,-7],[8,8,7],[8,-2,2],[5,9,-6],[8,9,-5],[-10,8,-10],[4,9,10],[4,6,8],[-5,3,-9],[-7,8,10],[10,2,4],[3,2,8],[7,-7,7],[5,8,-10],[-7,-6,2],[2,6,10],[-4,9,-4],[-9,8,-6],[-3,9,-8],[-10,3,-2],[2,6,6],[1,8,9],[7,-1,-3],[-2,-9,-8],[7,2,4],[6,7,-7],[10,6,-5],[8,-10,7],[-7,10,9],[2,5,-9],[-9,-8,-8],[1,2,4],[2,-9,2],[-8,6,-6],[5,2,-2],[-1,-5,9],[-4,1,-10],[3,-8,6],[10,-10,1],[3,2,6],[-8,6,7],[-7,6,7],[5,-9,4],[-3,-1,-1],[7,-8,1],[6,10,3],[5,-8,-9],[8,7,-7],[5,5,4],[-10,-2,-1],[-2,-2,-9],[2,4,7],[-7,5,4]], dtype = "uint16")#candidate|927|(330, 3)|const|uint16
call_926 = relay.TupleGetItem(func_132_call(relay.reshape(const_927.astype('uint16'), [15, 11, 6]), relay.reshape(const_927.astype('uint16'), [15, 11, 6]), ), 0)
call_928 = relay.TupleGetItem(func_136_call(relay.reshape(const_927.astype('uint16'), [15, 11, 6]), relay.reshape(const_927.astype('uint16'), [15, 11, 6]), ), 0)
output = relay.Tuple([call_924,call_926,const_927,])
output2 = relay.Tuple([call_925,call_928,const_927,])
func_930 = relay.Function([], output)
mod['func_930'] = func_930
mod = relay.transform.InferType()(mod)
output = func_930()
func_931 = relay.Function([], output)
mutated_mod['func_931'] = func_931
mutated_mod = relay.transform.InferType()(mutated_mod)
var_938 = relay.var("var_938", dtype = "float32", shape = (13, 8, 15))#candidate|938|(13, 8, 15)|var|float32
uop_939 = relay.sigmoid(var_938.astype('float32')) # shape=(13, 8, 15)
output = relay.Tuple([uop_939,])
output2 = relay.Tuple([uop_939,])
func_943 = relay.Function([var_938,], output)
mod['func_943'] = func_943
mod = relay.transform.InferType()(mod)
var_944 = relay.var("var_944", dtype = "float32", shape = (13, 8, 15))#candidate|944|(13, 8, 15)|var|float32
output = func_943(var_944)
func_945 = relay.Function([var_944], output)
mutated_mod['func_945'] = func_945
mutated_mod = relay.transform.InferType()(mutated_mod)
var_973 = relay.var("var_973", dtype = "uint8", shape = (8, 8, 8))#candidate|973|(8, 8, 8)|var|uint8
const_974 = relay.const([[[2,-7,8,10,8,6,-3,1],[-1,9,10,-8,2,9,-4,8],[-8,9,-9,-3,10,-6,4,-4],[-2,9,-2,4,2,9,-8,3],[10,-1,-10,7,6,10,5,-2],[-8,7,-9,-5,-6,8,9,-9],[-3,1,-7,-1,4,-2,7,5],[5,5,-5,-9,-5,5,8,3]],[[6,-3,2,7,-5,-6,1,8],[-5,3,5,3,9,-2,-3,6],[-10,-4,3,2,-8,-2,2,-8],[5,9,3,8,3,7,-6,7],[4,-10,-1,-6,-1,-2,8,-1],[1,-3,-5,8,-2,4,-10,3],[10,-8,6,-4,2,-1,5,-5],[2,-3,-8,5,-6,7,-7,9]],[[-6,10,2,-8,-7,-7,10,1],[2,1,4,10,-2,-7,9,-6],[-4,-6,8,3,4,-10,-3,-8],[-4,7,-4,2,-5,-5,-5,-1],[5,7,3,1,-9,-4,1,-9],[1,-2,2,1,3,4,-6,8],[2,7,5,-5,-8,-1,10,-3],[-6,6,-1,9,-10,3,-8,7]],[[8,7,1,-2,-10,-9,2,1],[-7,10,-1,-1,2,9,6,-3],[-2,-2,4,-4,-4,7,3,6],[3,7,2,9,3,-5,-3,-5],[-9,-8,10,9,2,-2,4,-6],[-3,-2,-2,-1,6,6,-6,-4],[10,10,-3,4,5,-10,-5,5],[-1,4,-8,8,3,-5,7,-6]],[[1,-6,6,-10,7,9,8,9],[1,-3,-10,-4,7,4,1,10],[7,-8,8,-2,-10,7,5,9],[9,8,5,2,3,5,-7,6],[2,7,-4,5,1,3,-7,-3],[-6,-6,3,10,-6,-10,3,9],[1,-7,4,-8,3,-1,6,7],[-5,1,-2,5,-10,-3,2,8]],[[7,-10,-7,-5,4,1,10,-1],[2,6,-7,-4,-8,7,10,-7],[1,9,6,6,-10,9,8,6],[4,-6,4,7,8,4,-1,6],[-8,8,8,3,5,-9,-4,3],[-8,-2,-10,4,4,7,-7,-5],[-9,-9,9,7,8,4,-1,-3],[-7,-9,3,-6,-1,10,7,5]],[[10,-5,9,-2,-5,10,-5,-5],[7,3,9,-5,-2,8,-2,-7],[8,3,3,-4,-2,-6,-7,-3],[-5,4,-6,4,-6,9,-7,2],[8,5,-1,-10,3,-1,-7,7],[-1,-7,10,4,6,-5,10,2],[-5,7,-6,-8,-5,1,3,5],[9,-2,-3,-8,-10,6,2,-7]],[[-5,-2,3,1,-9,9,2,-10],[6,-1,-8,10,2,7,-3,3],[-9,10,5,10,-4,7,-5,-7],[7,-1,-7,-5,6,4,-6,-9],[2,-9,-1,-10,-9,10,-2,-4],[5,5,6,-2,2,6,-5,-5],[4,-3,-4,-9,9,-7,-8,-3],[-8,-6,10,9,-6,-2,-1,7]]], dtype = "uint8")#candidate|974|(8, 8, 8)|const|uint8
bop_975 = relay.right_shift(var_973.astype('uint8'), relay.reshape(const_974.astype('uint8'), relay.shape_of(var_973))) # shape=(8, 8, 8)
uop_978 = relay.sin(var_973.astype('float32')) # shape=(8, 8, 8)
output = relay.Tuple([bop_975,uop_978,])
output2 = relay.Tuple([bop_975,uop_978,])
func_982 = relay.Function([var_973,], output)
mod['func_982'] = func_982
mod = relay.transform.InferType()(mod)
var_983 = relay.var("var_983", dtype = "uint8", shape = (8, 8, 8))#candidate|983|(8, 8, 8)|var|uint8
output = func_982(var_983)
func_984 = relay.Function([var_983], output)
mutated_mod['func_984'] = func_984
mutated_mod = relay.transform.InferType()(mutated_mod)
var_986 = relay.var("var_986", dtype = "float64", shape = (3, 16))#candidate|986|(3, 16)|var|float64
var_987 = relay.var("var_987", dtype = "float64", shape = (3, 16))#candidate|987|(3, 16)|var|float64
bop_988 = relay.mod(var_986.astype('float64'), relay.reshape(var_987.astype('float64'), relay.shape_of(var_986))) # shape=(3, 16)
output = bop_988
output2 = bop_988
func_996 = relay.Function([var_986,var_987,], output)
mod['func_996'] = func_996
mod = relay.transform.InferType()(mod)
mutated_mod['func_996'] = func_996
mutated_mod = relay.transform.InferType()(mutated_mod)
func_996_call = mutated_mod.get_global_var('func_996')
var_998 = relay.var("var_998", dtype = "float64", shape = (3, 16))#candidate|998|(3, 16)|var|float64
var_999 = relay.var("var_999", dtype = "float64", shape = (3, 16))#candidate|999|(3, 16)|var|float64
call_997 = func_996_call(var_998,var_999,)
output = call_997
func_1000 = relay.Function([var_998,var_999,], output)
mutated_mod['func_1000'] = func_1000
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1002 = relay.var("var_1002", dtype = "float32", shape = (8,))#candidate|1002|(8,)|var|float32
uop_1003 = relay.tan(var_1002.astype('float32')) # shape=(8,)
uop_1009 = relay.exp(uop_1003.astype('float64')) # shape=(8,)
var_1011 = relay.var("var_1011", dtype = "float64", shape = (8,))#candidate|1011|(8,)|var|float64
bop_1012 = relay.floor_mod(uop_1009.astype('float64'), relay.reshape(var_1011.astype('float64'), relay.shape_of(uop_1009))) # shape=(8,)
var_1020 = relay.var("var_1020", dtype = "float64", shape = (8,))#candidate|1020|(8,)|var|float64
bop_1021 = relay.right_shift(bop_1012.astype('int16'), relay.reshape(var_1020.astype('int16'), relay.shape_of(bop_1012))) # shape=(8,)
const_1025 = relay.const([7.782386,6.418409,3.191134,-8.471421,-9.735414,-4.888790,-3.973204,7.407519], dtype = "float64")#candidate|1025|(8,)|const|float64
bop_1026 = relay.less_equal(bop_1012.astype('bool'), relay.reshape(const_1025.astype('bool'), relay.shape_of(bop_1012))) # shape=(8,)
bop_1034 = relay.minimum(bop_1026.astype('uint8'), relay.reshape(uop_1009.astype('uint8'), relay.shape_of(bop_1026))) # shape=(8,)
uop_1038 = relay.acosh(bop_1021.astype('float32')) # shape=(8,)
bop_1045 = relay.divide(uop_1038.astype('float64'), relay.reshape(var_1011.astype('float64'), relay.shape_of(uop_1038))) # shape=(8,)
output = relay.Tuple([bop_1034,bop_1045,])
output2 = relay.Tuple([bop_1034,bop_1045,])
func_1049 = relay.Function([var_1002,var_1011,var_1020,], output)
mod['func_1049'] = func_1049
mod = relay.transform.InferType()(mod)
var_1050 = relay.var("var_1050", dtype = "float32", shape = (8,))#candidate|1050|(8,)|var|float32
var_1051 = relay.var("var_1051", dtype = "float64", shape = (8,))#candidate|1051|(8,)|var|float64
var_1052 = relay.var("var_1052", dtype = "float64", shape = (8,))#candidate|1052|(8,)|var|float64
output = func_1049(var_1050,var_1051,var_1052,)
func_1053 = relay.Function([var_1050,var_1051,var_1052,], output)
mutated_mod['func_1053'] = func_1053
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1084 = relay.var("var_1084", dtype = "float64", shape = (13, 11, 11))#candidate|1084|(13, 11, 11)|var|float64
const_1085 = relay.constdtype = "float64")#candidate|1085|(13, 11, 11)|const|float64
bop_1086 = relay.minimum(var_1084.astype('float64'), relay.reshape(const_1085.astype('float64'), relay.shape_of(var_1084))) # shape=(13, 11, 11)
uop_1092 = relay.log10(bop_1086.astype('float32')) # shape=(13, 11, 11)
var_1094 = relay.var("var_1094", dtype = "float64", shape = (13, 11, 11))#candidate|1094|(13, 11, 11)|var|float64
bop_1095 = relay.logical_xor(var_1084.astype('uint32'), relay.reshape(var_1094.astype('uint32'), relay.shape_of(var_1084))) # shape=(13, 11, 11)
bop_1105 = relay.power(uop_1092.astype('float64'), relay.reshape(var_1084.astype('float64'), relay.shape_of(uop_1092))) # shape=(13, 11, 11)
func_242_call = mod.get_global_var('func_242')
func_249_call = mutated_mod.get_global_var('func_249')
const_1110 = relay.const([[-5.361139,-8.456577],[6.048142,-6.861620],[3.862441,9.696467],[0.571553,5.505574],[-2.893342,4.955759],[-5.803690,3.096457],[-0.533730,-1.675117],[-1.228286,7.286867],[-4.068243,-0.886140],[5.800592,9.595326],[1.650703,-7.704085],[-2.689957,-9.570215],[0.892740,-2.263904],[6.125328,-0.362977],[-0.516582,6.038781],[4.433202,7.121424],[-3.070409,-3.194786],[-9.519690,-7.018094],[-3.208808,-4.426012],[-2.912381,7.511070],[-9.385096,-3.766490],[1.746680,8.393785],[6.292708,-5.850721],[0.356257,-6.108333],[-4.513652,8.487419],[-3.082002,-7.962430],[6.001255,0.792590],[-6.351049,6.196785],[-1.973019,-2.939827],[-7.582590,1.998449],[-5.230596,0.556900],[1.886146,3.610531],[-3.211332,-5.763110],[0.997699,4.678296],[6.919221,-3.531831],[7.530066,-0.345452],[2.932546,-0.453980],[-5.988714,0.072747],[9.041713,-9.043119],[-6.772306,-2.553265],[5.833430,1.352300],[-6.742095,3.983762],[9.477420,2.017987],[6.329730,-3.665349],[-0.119500,4.283261],[-1.153645,-2.117756],[2.055174,-2.849355],[-7.020031,-9.970749],[4.200766,-7.520253],[-5.034541,9.964931],[-5.530460,-5.470911],[-5.240044,-4.260895],[3.679342,3.833586],[2.343077,-5.287333],[1.712362,-7.565748],[7.424698,3.767866],[8.827883,-2.043711],[1.027807,0.622830],[-1.323693,1.841710],[7.201895,-4.955885],[7.816377,-4.058564],[3.359753,9.742748],[-6.165294,-1.337508],[-7.386479,-2.977840],[-2.144056,1.647389],[6.722073,8.139560],[5.913604,-9.737868],[-7.598061,2.472906],[4.836875,-4.167987],[-0.692373,9.798505],[-9.759152,5.460500],[8.945528,-0.691086],[-4.381684,7.355021],[-0.273680,-0.045613],[4.080298,-2.793531],[6.460812,-1.253592],[-1.620519,3.926249],[-9.624036,3.050046],[-2.515287,-7.684723],[-9.194714,7.874671],[-6.159784,-1.823353],[8.460733,-8.398591],[-1.838656,6.085455],[4.425377,-4.694290],[-4.753739,-1.518050],[-9.515887,7.217774],[-9.561451,-9.597522],[-9.440345,-8.318776],[-5.156125,-9.477901],[6.490567,-1.691553],[1.569309,3.183567],[7.923023,-3.566777],[3.991410,9.449493],[-0.591854,-0.818571],[-0.582119,-7.034233],[2.383842,8.474979],[0.083675,9.272599],[5.238153,-5.413243],[3.693072,8.198132],[1.569274,1.792469],[-5.691133,-5.801231],[4.766599,-8.705316],[3.370304,1.782454],[5.146983,-1.483126],[-2.921238,2.509214],[-1.293700,-2.867712],[7.171677,-3.353101],[-3.399775,6.709946],[-9.324032,1.100047],[-5.028132,3.486636],[-5.690157,-0.429203],[-1.853532,6.783388],[2.806003,-4.947009],[-4.538415,5.301199],[-6.749966,0.446722],[9.599393,4.280105],[-1.217362,-9.018441],[-6.955952,7.149391],[-8.942347,-6.868354],[-4.511305,0.049686],[-2.210515,5.609533],[-1.589116,-9.068369],[0.189566,5.315205],[-3.116964,-2.393897],[-1.686164,-2.512554],[0.248709,7.162906],[0.337976,-5.380078],[8.589163,4.787105],[4.857976,2.058901],[-5.281153,-3.274059],[6.277234,-6.898098],[-6.240847,-4.636365],[4.580621,-8.519703],[-3.498782,-0.981904],[0.436359,-0.280307],[-7.361395,1.837890],[-8.082699,-3.497131],[-0.671648,-3.463388],[-8.301250,-5.789386],[-3.312924,0.103809],[3.409320,-9.644508],[-9.079470,0.207242],[7.636971,-5.539849],[-8.095144,3.282929],[-1.098972,0.066327],[-8.663915,-7.239714],[-1.721040,4.794343],[-9.282812,3.621557],[-5.623096,0.262594],[-4.053258,6.263922],[-0.638676,-4.252523],[3.476707,-6.442244],[9.798963,-8.792660],[7.477192,-4.501751],[8.186341,-7.167325],[3.774019,8.398994],[2.499514,-7.733481],[-2.247717,3.130266],[3.069374,4.494364],[5.085129,3.978464],[8.471169,-7.502273],[-5.451840,-0.661911],[0.563972,2.139620],[-9.130514,-8.394024],[-8.608367,-0.816793],[-3.571931,6.745128],[6.286669,-5.104529],[-2.795122,1.455553],[-6.463406,6.664065],[-1.584156,-7.232161],[-7.702439,-7.035746],[9.198906,5.248665],[1.874501,-2.408695],[3.572941,-8.223645],[-8.833377,-1.889109],[-0.225881,-5.295359],[5.939220,1.497117],[6.874111,2.985991],[-4.794752,7.435187],[0.453707,6.371904],[-3.421961,-6.137800],[4.024808,-2.479608],[-7.878463,0.280940],[-6.377939,7.951567],[6.367649,9.699826],[-4.203687,-5.323690],[9.769314,-7.397590],[-7.245544,7.144809],[4.350949,7.324806],[-8.219995,-5.877471],[-1.785713,7.714213],[7.970362,-0.072991],[-7.950989,-6.452578],[2.151923,3.986706],[-1.808075,8.729323],[0.219471,7.236505],[-1.589327,5.107872],[-6.819114,5.377495],[2.966880,5.241527],[8.707393,9.882746],[6.807604,9.994299],[0.221414,1.038643],[-8.773405,-8.557546],[-1.821490,6.964032],[-8.433414,2.662313],[-5.131730,7.890788],[-2.179885,2.097689],[5.668483,9.459918],[-9.860943,0.520083],[4.012838,2.217372],[5.926162,3.971212],[1.059116,-0.189183],[5.999315,-7.746609],[4.386585,-4.326873],[-4.756008,4.309604],[-9.726230,-3.371262],[6.118385,-7.010592],[5.598971,0.064701],[-9.706356,-5.471623],[7.450619,9.219059],[-4.458814,-0.991388],[-2.396717,2.994874],[-6.936041,-8.935733],[9.667844,3.323454],[-7.672726,4.048497],[4.222398,-4.318872],[2.032119,0.879153],[5.571490,-2.668983],[-5.791919,5.153202],[5.534848,0.014760],[-8.428565,-9.534750],[0.600014,-8.447619],[-6.477448,3.933424],[-3.013472,4.141009],[-9.760091,-5.935401],[9.851088,7.757280],[-5.514161,-5.574948],[-9.954422,7.981583],[3.109857,-2.313486],[-2.770669,-0.756394],[7.322484,-3.911060],[5.146630,5.657530],[1.378446,-2.216357],[-1.313604,-4.417702],[-3.380999,-8.890208],[6.709242,1.138030],[-7.027165,0.172385],[7.462954,7.795028],[2.009632,-2.839965],[5.091211,-8.121625],[-3.610639,8.404185],[-5.984175,5.360985],[1.553001,7.016566],[4.919431,4.613080],[3.186866,-3.058336],[9.930004,0.183288],[-1.058055,2.865173],[5.355146,-0.046520],[-1.825084,1.154236],[2.703702,-9.765463],[-3.141674,2.758209],[-9.896967,6.173707],[5.969061,-4.111376],[3.005366,0.758939],[-7.853940,4.211474],[-8.226117,4.609694],[-0.125977,-8.642966],[6.745543,-0.235270],[-3.722652,3.161140],[-6.881306,-8.431432],[0.756420,-5.415930],[-8.478273,-0.687868],[6.448807,1.409672],[6.462048,-9.572882],[3.154564,8.766210],[6.214404,-7.249010],[-4.670999,1.977690],[4.025906,-8.831955],[-4.314729,8.133069],[6.320130,7.964818],[-4.797341,-4.516760],[4.324978,3.739278],[8.849651,9.936131],[-3.933101,9.745915],[-0.318274,7.034210],[-0.616806,-9.804850],[6.408390,-3.605561],[3.064614,9.383514],[-7.162697,0.891022],[-4.726022,-1.482379],[9.688301,4.970455],[6.475785,-8.560251],[3.172557,6.652784],[-1.331479,-4.761321],[-4.875832,-7.453974],[5.240358,0.372046],[4.749423,3.852356],[5.661622,-9.923809],[-5.476679,-4.969897],[-7.964128,3.779492],[-2.349462,1.677920],[-1.066941,-6.937376],[-8.402552,-2.479000],[-0.532039,8.736057],[-3.373634,-3.844849],[-7.705851,-2.462240],[-1.933604,1.319068],[-2.022210,-3.090570],[1.810914,3.875597],[5.968228,-8.409303],[-8.485214,9.695442],[-7.152146,-7.509726],[-4.156479,-3.847786],[7.543042,5.371308],[8.993817,-0.747372],[0.779552,2.728871],[6.008310,-0.478635],[-6.843597,-0.523963],[0.940140,-7.754420],[3.583676,-2.295478],[0.086544,-8.492428],[1.476291,-7.988863],[-1.449348,-5.979531],[9.212634,5.730213],[-5.399115,4.499359],[-3.850098,7.816106],[-3.591804,-3.475370],[5.985971,9.380781],[6.432443,4.949068],[3.140951,-4.358827],[6.452876,6.906439],[-6.124610,2.092020],[-0.560564,8.567751],[-0.717249,-8.528039],[-6.038160,-6.507008],[6.180076,-3.421230],[-8.686553,8.139990],[0.486244,8.474385],[5.726828,2.366920],[2.050205,-9.621145],[-1.106123,0.965069],[0.595729,7.578304],[-5.954753,3.934097],[8.352182,-1.115829],[2.017193,7.925671],[8.749095,8.317735],[7.605938,-9.462193],[5.049475,-4.826762],[2.288609,4.107041],[4.185995,-9.571066],[-5.908039,8.746785],[-0.765258,2.679842],[7.031813,-6.119340],[-7.903423,7.634246],[8.235742,-2.727863],[9.066371,-0.510797],[-2.124903,6.146537],[-7.021135,6.631239],[8.697882,-9.079746],[5.516815,2.703222],[-5.023970,1.465565],[-4.830970,-1.073717],[3.064513,-0.723412],[5.689188,6.056706],[-0.248749,2.844823],[-2.596449,-3.249614],[8.653916,2.766841],[-4.477171,9.742718],[4.700627,6.238519],[-9.153128,9.742352],[9.959897,-9.745736],[-2.182864,-8.501692],[-5.193349,6.006691],[3.460127,-4.888779],[-6.698152,2.027138],[-1.464897,6.879676],[7.036498,1.882395],[-6.941284,2.400370],[0.358653,-0.476240],[6.696255,-2.658217],[-9.137744,6.483117],[6.923202,-1.831792],[8.332893,3.212319],[-3.483291,4.545531],[9.321605,1.552266],[2.683870,2.418382],[-5.907058,-5.619100],[4.232781,9.169316],[-7.356850,1.930974],[-0.268261,9.635611],[4.360158,-8.422342],[4.129349,4.082451],[-9.288460,-6.071680],[-7.278748,-2.278654],[2.272947,-3.379947],[-8.956244,-9.621193],[-6.336415,-9.320265],[3.209903,5.350085],[-6.700778,2.996464],[1.799135,2.836694],[6.007306,-6.877067],[0.651516,7.281662],[0.973190,1.421074],[3.298390,6.314194],[8.677982,8.295977],[6.840820,7.707178],[-5.573728,-5.100878],[-2.781029,0.686610],[6.119072,9.107361],[9.148289,-6.484759],[-3.329002,-3.327113],[1.288752,-3.482524],[2.074800,-6.868151],[-6.584659,6.681432],[-5.696412,-2.654498],[4.766742,-0.782298],[4.190529,6.945014],[-3.323130,-6.263027],[-9.533018,0.444420],[-1.949084,-9.045165],[3.561613,-8.392340],[1.542025,-3.546619],[6.839576,-2.406044],[-5.841630,-1.715376],[-8.932135,-6.590129],[4.109493,2.436850],[8.973695,9.687870],[-1.825771,-4.722126],[-2.434429,4.519881],[-5.295373,4.550556],[7.122492,-8.417010],[8.071294,3.563983],[-3.069838,-4.173611],[-6.174357,8.671391],[-9.617292,5.847920],[1.723440,-0.800917],[9.852159,2.584192],[2.508635,1.167585],[-8.263871,0.477975],[-1.379641,8.777069],[-9.777802,-6.783313],[2.973099,1.801172],[1.110654,7.266426],[-3.498023,-2.939955],[8.887529,0.869735],[3.229203,3.967710],[-9.775189,4.843846],[-0.806457,2.037817],[-5.239698,2.590843],[-9.861668,-2.880472],[-4.662688,-2.434162],[3.555371,-3.837793],[-8.565918,-6.491511],[-0.250576,4.244286],[-8.473778,-6.125627],[5.974194,9.501563],[3.243617,9.089765],[0.894526,3.360765],[3.423925,-7.838912],[9.374774,-4.934221],[-3.073287,8.149997],[-6.522124,8.107601],[4.361344,0.923629],[-3.459949,-4.651997],[-7.847002,2.005252],[5.875680,1.574879],[-1.283298,-6.610397],[-3.797693,2.673105],[7.449892,2.167374],[9.341785,-0.599683],[-5.506262,3.653870],[-6.234676,1.060017],[3.680877,9.406631],[3.518387,-7.130680],[-0.617392,4.571560],[7.954543,-5.107809],[9.927661,-1.426695],[-8.382577,6.005877],[3.998788,5.797703],[5.540071,-7.315067]], dtype = "float64")#candidate|1110|(480, 2)|const|float64
var_1111 = relay.var("var_1111", dtype = "float64", shape = (5, 2))#candidate|1111|(5, 2)|var|float64
call_1109 = relay.TupleGetItem(func_242_call(relay.reshape(const_1110.astype('float64'), [12, 8, 10]), relay.reshape(const_1110.astype('float64'), [12, 8, 10]), relay.reshape(const_1110.astype('int16'), [12, 8, 10]), relay.reshape(const_1110.astype('float64'), [12, 8, 10]), relay.reshape(var_1111.astype('float64'), [10,]), relay.reshape(const_1110.astype('float32'), [12, 8, 10]), ), 2)
call_1112 = relay.TupleGetItem(func_249_call(relay.reshape(const_1110.astype('float64'), [12, 8, 10]), relay.reshape(const_1110.astype('float64'), [12, 8, 10]), relay.reshape(const_1110.astype('int16'), [12, 8, 10]), relay.reshape(const_1110.astype('float64'), [12, 8, 10]), relay.reshape(var_1111.astype('float64'), [10,]), relay.reshape(const_1110.astype('float32'), [12, 8, 10]), ), 2)
bop_1114 = relay.floor_mod(uop_1092.astype('float64'), relay.reshape(var_1094.astype('float64'), relay.shape_of(uop_1092))) # shape=(13, 11, 11)
uop_1117 = relay.atan(bop_1114.astype('float64')) # shape=(13, 11, 11)
var_1119 = relay.var("var_1119", dtype = "float64", shape = (13, 11, 11))#candidate|1119|(13, 11, 11)|var|float64
bop_1120 = relay.divide(uop_1117.astype('float64'), relay.reshape(var_1119.astype('float64'), relay.shape_of(uop_1117))) # shape=(13, 11, 11)
uop_1130 = relay.exp(uop_1117.astype('float64')) # shape=(13, 11, 11)
func_38_call = mod.get_global_var('func_38')
func_42_call = mutated_mod.get_global_var('func_42')
var_1141 = relay.var("var_1141", dtype = "bool", shape = (28, 4))#candidate|1141|(28, 4)|var|bool
call_1140 = relay.TupleGetItem(func_38_call(relay.reshape(var_1141.astype('bool'), [14, 4, 2]), relay.reshape(var_1141.astype('bool'), [14, 4, 2]), ), 0)
call_1142 = relay.TupleGetItem(func_42_call(relay.reshape(var_1141.astype('bool'), [14, 4, 2]), relay.reshape(var_1141.astype('bool'), [14, 4, 2]), ), 0)
bop_1145 = relay.greater(bop_1105.astype('bool'), relay.reshape(bop_1086.astype('bool'), relay.shape_of(bop_1105))) # shape=(13, 11, 11)
uop_1149 = relay.tan(uop_1130.astype('float32')) # shape=(13, 11, 11)
uop_1155 = relay.sigmoid(uop_1149.astype('float64')) # shape=(13, 11, 11)
func_930_call = mod.get_global_var('func_930')
func_931_call = mutated_mod.get_global_var('func_931')
call_1157 = relay.TupleGetItem(func_930_call(), 2)
call_1158 = relay.TupleGetItem(func_931_call(), 2)
func_38_call = mod.get_global_var('func_38')
func_42_call = mutated_mod.get_global_var('func_42')
call_1159 = relay.TupleGetItem(func_38_call(relay.reshape(call_1140.astype('bool'), [14, 4, 2]), relay.reshape(call_1140.astype('bool'), [14, 4, 2]), ), 0)
call_1160 = relay.TupleGetItem(func_42_call(relay.reshape(call_1140.astype('bool'), [14, 4, 2]), relay.reshape(call_1140.astype('bool'), [14, 4, 2]), ), 0)
output = relay.Tuple([bop_1095,call_1109,const_1110,var_1111,bop_1120,call_1140,var_1141,bop_1145,uop_1155,call_1157,call_1159,])
output2 = relay.Tuple([bop_1095,call_1112,const_1110,var_1111,bop_1120,call_1142,var_1141,bop_1145,uop_1155,call_1158,call_1160,])
func_1161 = relay.Function([var_1084,var_1094,var_1111,var_1119,var_1141,], output)
mod['func_1161'] = func_1161
mod = relay.transform.InferType()(mod)
var_1162 = relay.var("var_1162", dtype = "float64", shape = (13, 11, 11))#candidate|1162|(13, 11, 11)|var|float64
var_1163 = relay.var("var_1163", dtype = "float64", shape = (13, 11, 11))#candidate|1163|(13, 11, 11)|var|float64
var_1164 = relay.var("var_1164", dtype = "float64", shape = (5, 2))#candidate|1164|(5, 2)|var|float64
var_1165 = relay.var("var_1165", dtype = "float64", shape = (13, 11, 11))#candidate|1165|(13, 11, 11)|var|float64
var_1166 = relay.var("var_1166", dtype = "bool", shape = (28, 4))#candidate|1166|(28, 4)|var|bool
output = func_1161(var_1162,var_1163,var_1164,var_1165,var_1166,)
func_1167 = relay.Function([var_1162,var_1163,var_1164,var_1165,var_1166,], output)
mutated_mod['func_1167'] = func_1167
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1185 = relay.var("var_1185", dtype = "int32", shape = (4, 8))#candidate|1185|(4, 8)|var|int32
var_1186 = relay.var("var_1186", dtype = "int32", shape = (4, 8))#candidate|1186|(4, 8)|var|int32
bop_1187 = relay.bitwise_xor(var_1185.astype('int32'), relay.reshape(var_1186.astype('int32'), relay.shape_of(var_1185))) # shape=(4, 8)
uop_1196 = relay.rsqrt(var_1185.astype('float64')) # shape=(4, 8)
output = relay.Tuple([bop_1187,uop_1196,])
output2 = relay.Tuple([bop_1187,uop_1196,])
func_1206 = relay.Function([var_1185,var_1186,], output)
mod['func_1206'] = func_1206
mod = relay.transform.InferType()(mod)
mutated_mod['func_1206'] = func_1206
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1206_call = mutated_mod.get_global_var('func_1206')
var_1208 = relay.var("var_1208", dtype = "int32", shape = (4, 8))#candidate|1208|(4, 8)|var|int32
var_1209 = relay.var("var_1209", dtype = "int32", shape = (4, 8))#candidate|1209|(4, 8)|var|int32
call_1207 = func_1206_call(var_1208,var_1209,)
output = call_1207
func_1210 = relay.Function([var_1208,var_1209,], output)
mutated_mod['func_1210'] = func_1210
mutated_mod = relay.transform.InferType()(mutated_mod)
func_930_call = mod.get_global_var('func_930')
func_931_call = mutated_mod.get_global_var('func_931')
call_1215 = relay.TupleGetItem(func_930_call(), 2)
call_1216 = relay.TupleGetItem(func_931_call(), 2)
func_560_call = mod.get_global_var('func_560')
func_562_call = mutated_mod.get_global_var('func_562')
var_1222 = relay.var("var_1222", dtype = "float64", shape = (1,))#candidate|1222|(1,)|var|float64
call_1221 = relay.TupleGetItem(func_560_call(relay.reshape(var_1222.astype('float64'), [1,])), 0)
call_1223 = relay.TupleGetItem(func_562_call(relay.reshape(var_1222.astype('float64'), [1,])), 0)
bop_1225 = relay.greater(var_1222.astype('bool'), call_1215.astype('bool')) # shape=(330, 3)
bop_1228 = relay.greater(var_1222.astype('bool'), call_1216.astype('bool')) # shape=(330, 3)
bop_1236 = relay.left_shift(bop_1225.astype('uint32'), relay.reshape(call_1215.astype('uint32'), relay.shape_of(bop_1225))) # shape=(330, 3)
bop_1239 = relay.left_shift(bop_1228.astype('uint32'), relay.reshape(call_1216.astype('uint32'), relay.shape_of(bop_1228))) # shape=(330, 3)
bop_1244 = relay.less(bop_1236.astype('bool'), relay.reshape(call_1215.astype('bool'), relay.shape_of(bop_1236))) # shape=(330, 3)
bop_1247 = relay.less(bop_1239.astype('bool'), relay.reshape(call_1216.astype('bool'), relay.shape_of(bop_1239))) # shape=(330, 3)
uop_1250 = relay.atan(bop_1244.astype('float64')) # shape=(330, 3)
uop_1252 = relay.atan(bop_1247.astype('float64')) # shape=(330, 3)
uop_1265 = relay.sqrt(bop_1244.astype('float64')) # shape=(330, 3)
uop_1267 = relay.sqrt(bop_1247.astype('float64')) # shape=(330, 3)
func_358_call = mod.get_global_var('func_358')
func_362_call = mutated_mod.get_global_var('func_362')
var_1269 = relay.var("var_1269", dtype = "float64", shape = (256,))#candidate|1269|(256,)|var|float64
call_1268 = relay.TupleGetItem(func_358_call(relay.reshape(var_1269.astype('float64'), [16, 16]), relay.reshape(var_1269.astype('float64'), [16, 16]), ), 0)
call_1270 = relay.TupleGetItem(func_362_call(relay.reshape(var_1269.astype('float64'), [16, 16]), relay.reshape(var_1269.astype('float64'), [16, 16]), ), 0)
uop_1271 = relay.log2(uop_1265.astype('float64')) # shape=(330, 3)
uop_1273 = relay.log2(uop_1267.astype('float64')) # shape=(330, 3)
bop_1274 = relay.power(uop_1265.astype('float64'), relay.reshape(uop_1250.astype('float64'), relay.shape_of(uop_1265))) # shape=(330, 3)
bop_1277 = relay.power(uop_1267.astype('float64'), relay.reshape(uop_1252.astype('float64'), relay.shape_of(uop_1267))) # shape=(330, 3)
uop_1278 = relay.sigmoid(uop_1271.astype('float32')) # shape=(330, 3)
uop_1280 = relay.sigmoid(uop_1273.astype('float32')) # shape=(330, 3)
bop_1281 = relay.logical_and(uop_1278.astype('bool'), relay.reshape(uop_1250.astype('bool'), relay.shape_of(uop_1278))) # shape=(330, 3)
bop_1284 = relay.logical_and(uop_1280.astype('bool'), relay.reshape(uop_1252.astype('bool'), relay.shape_of(uop_1280))) # shape=(330, 3)
uop_1285 = relay.sin(uop_1278.astype('float32')) # shape=(330, 3)
uop_1287 = relay.sin(uop_1280.astype('float32')) # shape=(330, 3)
bop_1297 = relay.less(uop_1285.astype('bool'), relay.reshape(bop_1274.astype('bool'), relay.shape_of(uop_1285))) # shape=(330, 3)
bop_1300 = relay.less(uop_1287.astype('bool'), relay.reshape(bop_1277.astype('bool'), relay.shape_of(uop_1287))) # shape=(330, 3)
uop_1303 = relay.acosh(bop_1297.astype('float64')) # shape=(330, 3)
uop_1305 = relay.acosh(bop_1300.astype('float64')) # shape=(330, 3)
var_1308 = relay.var("var_1308", dtype = "bool", shape = (330, 3))#candidate|1308|(330, 3)|var|bool
bop_1309 = relay.bitwise_or(bop_1297.astype('uint8'), relay.reshape(var_1308.astype('uint8'), relay.shape_of(bop_1297))) # shape=(330, 3)
bop_1312 = relay.bitwise_or(bop_1300.astype('uint8'), relay.reshape(var_1308.astype('uint8'), relay.shape_of(bop_1300))) # shape=(330, 3)
output = relay.Tuple([call_1221,call_1268,var_1269,bop_1281,uop_1303,bop_1309,])
output2 = relay.Tuple([call_1223,call_1270,var_1269,bop_1284,uop_1305,bop_1312,])
func_1313 = relay.Function([var_1222,var_1269,var_1308,], output)
mod['func_1313'] = func_1313
mod = relay.transform.InferType()(mod)
var_1314 = relay.var("var_1314", dtype = "float64", shape = (1,))#candidate|1314|(1,)|var|float64
var_1315 = relay.var("var_1315", dtype = "float64", shape = (256,))#candidate|1315|(256,)|var|float64
var_1316 = relay.var("var_1316", dtype = "bool", shape = (330, 3))#candidate|1316|(330, 3)|var|bool
output = func_1313(var_1314,var_1315,var_1316,)
func_1317 = relay.Function([var_1314,var_1315,var_1316,], output)
mutated_mod['func_1317'] = func_1317
mutated_mod = relay.transform.InferType()(mutated_mod)
func_812_call = mod.get_global_var('func_812')
func_814_call = mutated_mod.get_global_var('func_814')
call_1354 = relay.TupleGetItem(func_812_call(), 3)
call_1355 = relay.TupleGetItem(func_814_call(), 3)
output = relay.Tuple([call_1354,])
output2 = relay.Tuple([call_1355,])
func_1376 = relay.Function([], output)
mod['func_1376'] = func_1376
mod = relay.transform.InferType()(mod)
output = func_1376()
func_1377 = relay.Function([], output)
mutated_mod['func_1377'] = func_1377
mutated_mod = relay.transform.InferType()(mutated_mod)
func_930_call = mod.get_global_var('func_930')
func_931_call = mutated_mod.get_global_var('func_931')
call_1378 = relay.TupleGetItem(func_930_call(), 2)
call_1379 = relay.TupleGetItem(func_931_call(), 2)
output = relay.Tuple([call_1378,])
output2 = relay.Tuple([call_1379,])
func_1384 = relay.Function([], output)
mod['func_1384'] = func_1384
mod = relay.transform.InferType()(mod)
mutated_mod['func_1384'] = func_1384
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1384_call = mutated_mod.get_global_var('func_1384')
call_1385 = func_1384_call()
output = call_1385
func_1386 = relay.Function([], output)
mutated_mod['func_1386'] = func_1386
mutated_mod = relay.transform.InferType()(mutated_mod)
func_812_call = mod.get_global_var('func_812')
func_814_call = mutated_mod.get_global_var('func_814')
call_1400 = relay.TupleGetItem(func_812_call(), 3)
call_1401 = relay.TupleGetItem(func_814_call(), 3)
func_943_call = mod.get_global_var('func_943')
func_945_call = mutated_mod.get_global_var('func_945')
const_1405 = relay.const([6.730514,-4.692807,5.676611,-7.964152,4.490332,-3.842536,-6.147414,8.461691,-5.273691,3.455907,3.823440,7.515295,4.782453,-2.684280,-3.565703,3.310867,5.837335,5.033015,-5.963443,-5.766587,7.714673,4.943902,4.104777,7.521142,-2.979693,-8.077331,9.285036,0.691041,9.738407,-3.426356,-9.281277,-8.561955,8.000025,-5.092056,3.006853,8.383439,8.627976,-2.022721,0.137324,9.106425,-9.287681,-9.547101,4.862102,-5.072874,6.826100,-0.836535,7.982660,-1.199400,-1.493361,-6.929644,4.730836,-5.128033,-6.357272,9.104537,-5.407235,5.819644,-7.056350,-6.783297,-3.242468,9.583874,2.927388,4.945922,-7.472609,3.852775,-2.142118,-2.168027,-1.570149,4.849631,1.207995,-8.144387,0.378059,-0.128987,1.754818,7.767085,-1.115738,-4.017496,-9.351347,-1.080495,6.726012,2.815578,9.929234,1.398625,-4.836860,3.855204,1.253469,1.175565,2.973478,-1.196881,-6.948295,-5.517724,-0.708711,9.126411,-5.010883,2.052826,5.690044,-0.457081,-2.185524,-6.188761,-5.738388,-8.865163,-9.584241,-0.697106,-7.547184,-9.786269,-2.788322,9.070943,1.142123,3.736872,-2.449757,6.242158,2.809224,-9.106995,4.882038,-1.960619,-0.978938,9.866257,-4.738032,4.146287,5.529455,9.835818,-9.718424,-9.402080,9.922091,-1.635454,8.449507,-5.314087,5.639053,-6.637284,1.185737,-7.333765,-6.981037,-6.760554,2.966556,5.489799,-9.728291,-3.814813,8.099240,-9.904159,-9.674130,-6.535108,2.903553,-0.476555,8.834345,3.882124,4.275750,4.885443,-7.715710,-4.111469,8.133198,-7.224614,-9.063194,-0.225583,0.721811,0.542691,5.436244,2.035853,-8.318916,3.606368,4.587051,-8.512843,-1.278493,-9.507347,-0.027889,-2.476574,-0.440296,9.485122,4.779833,-2.062793,-5.916560,-7.638770,5.946362,-4.282851,5.961702,3.734532,6.434090,9.164680,3.222702,-8.576709,-6.904308,2.774317,9.103784,-2.167539,9.531934,0.974494,-9.910774,2.477723,-3.197794,0.749431,-1.413920,-4.576420,-1.436116,4.255725,4.133830,5.648273,3.932176,-8.607914,2.376799,7.704420,9.960709,5.247011,5.604081,6.308493,-6.636990,8.519167,8.441000,-1.494994,-6.254409,-8.497089,6.601372,2.726900,-0.355680,5.148892,-5.690541,-0.268930,-3.350255,6.980109,0.575047,1.107838,4.424001,-5.279334,-1.353825,4.677669,-8.811359,-8.415234,2.517314,-1.603941,0.527194,-2.462736,4.304023,2.862201,-9.145112,7.055726,8.050758,7.954217,1.602453,4.579623,1.422897,-4.131342,-2.791873,5.887065,9.780851,-2.321828,-9.032776,-3.425542,2.481801,4.263266,6.457187,2.584031,3.919802,9.053799,-6.088175,-6.492974,5.886187,-6.062258,0.266952,-1.031562,6.421558,9.110425,6.445828,6.718601,1.018509,-8.180211,8.010155,5.765740,-7.144562,-7.652897,6.534121,-6.557309,3.175756,0.729637,7.122315,8.626349,-1.807499,-1.253276,9.090554,-6.784917,-2.157617,8.279959,1.361735,-3.050767,9.491644,-1.097806,3.736235,-7.130218,6.742460,7.620650,8.828655,-6.626770,2.602373,4.744045,-1.968515,4.244937,-6.716056,4.003673,2.954519,7.340211,-2.403233,0.187263,4.415651,-0.853837,6.549157,1.033591,4.188528,-3.510380,-8.145060,3.931516,-1.969545,6.270291,1.117260,-3.661217,-9.428856,6.365037,6.975211,-8.184180,-0.879525,-6.001180,-2.003361,-2.016271,4.241321,-6.300560,-9.520403,-0.070794,-1.566162,2.285357,-6.963276,-2.249269,-0.832018,4.607068,-9.206692,-2.723503,7.827203,9.306470,-0.133543,3.848229,-8.595962,3.054916,9.555649,9.827911,1.551334,2.559301,-7.765624,-9.804793,3.639326,5.623806,2.202399,7.837201,-2.434167,-8.519556,-0.743368,-1.553823,5.862478,-2.815095,1.912926,-2.351746,-7.892382,4.344366,2.791199,7.032170,9.329736,-2.292214,-5.823969,2.243433,-5.432388,3.052566,8.115079,-1.919217,3.716830,2.692848,-3.523539,2.879421,7.377777,-7.985205,-3.446035,-1.577102,-8.786420,-4.508335,-0.181546,6.119097,8.621755,2.128311,-7.753131,0.126478,-0.462620,-4.510340,-1.031154,-9.726384,-2.134014,-1.823851,-0.035287,0.449260,-9.886530,-5.023399,3.586015,4.620831,-4.888059,-3.709392,-9.889430,8.749250,-0.431865,-0.393682,8.508890,6.645499,0.013611,0.971776,-9.087730,-7.584547,-3.295962,0.396830,-9.869189,6.897339,1.177919,2.453456,8.368225,5.730334,-6.474609,5.615927,-5.640854,-6.459699,-2.465811,4.610322,-9.617611,3.725761,-2.641272,-9.153407,-8.691990,-8.511842,3.083560,2.104003,-3.317825,8.900054,-5.330040,-9.549650,4.320446,-6.466215,-9.177741,-2.447974,3.287193,-9.502127,-1.384039,-9.099901,-7.969120,-1.590513,-0.944787,-1.227171,-2.477372,-0.437774,-9.062827,6.263948,1.752554,-8.001627,-2.562622,-4.480715,-6.183670,6.399617,1.525376,3.430814,-6.655028,-1.479602,-4.569425,1.255149,-6.442169,8.678126,3.957952,-8.654336,3.428389,-8.774779,3.877437,4.586626,7.623912,-5.844804,8.952376,-0.288227,8.099673,-0.702890,-5.743156,6.520124,9.493668,7.679713,0.116198,1.475987,-7.243497,-3.428620,-9.682510,-9.842514,3.231599,1.205716,-7.724585,-1.915957,-1.590750,4.608661,5.592482,1.433947,-9.988684,5.285712,-9.258900,-1.757024,-2.696838,-2.182126,-2.834309,3.691179,3.059204,-8.124805,-4.840593,7.382691,-7.005659,2.552103,3.082168,-9.497274,-8.000850,-6.346036,3.869777,6.634593,0.784597,-9.837184,-4.130135,5.021603,-5.817303,-8.443459,5.040691,0.187958,-6.197452,7.107593,1.163506,6.487839,4.715227,-9.173012,-3.416396,-7.418489,6.825219,-3.308950,-8.939093,4.813496,5.620860,-1.671794,-9.164105,-9.338092,-8.982829,-3.865551,-2.383594,7.879113,3.479414,-8.866963,-7.757211,-7.266487,1.120692,4.669799,-3.390108,6.144292,-8.827510,-8.558939,4.137078,-3.073095,-1.242133,-4.144441,-3.330388,-8.349012,0.020307,-1.380724,-0.786628,-0.165726,7.890233,0.588119,-1.770475,1.733727,-2.884471,3.746322,8.684387,-6.023002,4.231778,-9.011810,-9.293840,7.716581,2.583258,4.171627,-5.684526,4.711971,-7.111306,-4.378146,2.577960,1.826250,2.627416,-7.845011,-4.246743,1.355601,9.089945,-2.361760,-6.232645,3.765406,4.834053,3.840100,-1.875906,7.113065,-7.709713,-0.961712,5.047071,5.002173,-2.361083,0.042528,-3.475338,-4.751561,-2.607323,-5.620717,2.201170,-1.457128,-9.768250,-4.766792,8.987047,0.637468,2.113125,0.781098,-4.594678,-9.887736,-0.771708,7.406686,-6.924084,-8.299619,-4.218868,0.988198,8.000318,-0.485853,-1.892230,-9.364986,-9.224556,2.006313,9.073503,3.207308,0.586252,3.760331,2.946299,3.080375,-3.403138,8.706013,-9.037151,-8.181417,-0.506498,8.263360,-0.782545,-6.636834,-7.842109,-2.020999,6.528969,5.308770,3.040729,-2.092508,8.781691,-4.858339,-8.437731,5.301692,8.100477,-7.013750,-5.698226,-2.862081,8.941950,-6.372232,-6.650562,-1.679645,-8.079235,-5.704672,-5.224355,-2.924575,-8.078673,5.152852,-5.039833,5.926988,1.303200,-1.860540,-3.548037,-0.196938,0.670118,4.450313,3.204396,4.234225,3.860117,-5.955478,4.871346,4.014143,0.708529,-2.415534,5.388941,6.772445,0.209297,5.739099,-5.779373,5.045827,-2.510538,5.085089,-5.227091,9.960489,8.602577,7.437227,-7.925895,-3.955828,-1.860051,-5.696670,0.693703,-3.467100,0.880987,-2.367801,3.005403,1.618839,-2.448326,9.285026,-7.386122,-2.551743,-9.331186,-0.268071,-5.309572,3.005539,9.602500,7.367851,2.119705,2.222594,7.249602,0.706076,6.816835,-7.767373,8.601719,6.113720,-1.267594,0.831990,2.750882,3.936745,0.194519,-6.133502,-9.209651,8.394597,7.300159,-5.682329,-4.899069,9.352702,0.054037,3.330329,-4.423206,-0.716038,-3.921093,2.782413,3.701162,3.088293,8.225486,1.800522,5.450300,-1.740985,8.789413,8.828473,-1.257628,2.146758,-5.156808,-5.856239,8.859895,2.810605,3.406615,-7.025819,-9.021585,2.946619,8.768578,9.162735,9.208181,-3.946024,6.409089,-4.496384,-9.079875,1.288735,-1.890234,3.312102,-0.894503,2.072243,-3.500779,-1.996775,2.008638,-9.150191,-9.513018,-3.480850,4.701499,-7.013922,-9.566914,-0.564387,-4.659931,-9.368323,-9.753300,0.331584,-9.413314,-0.580194,-7.562993,2.054693,-4.677679,-8.194561,-4.805021,-8.941181,7.422752,-0.560161,8.685286,7.606578,-1.697882,-0.409415,6.419101,9.129396,-0.046773,-9.566968,-4.844321,-0.832422,-7.673196,7.355436,0.421274,-1.156561,-7.802979,6.951737,-0.429869,9.886383,-2.671123,9.319810,0.644360,2.328664,-0.182480,-1.134294,-0.792268,3.063835,-8.922073,4.473207,-2.356907,-0.523924,-1.771700,-5.211643,-0.740202,2.085881,8.620346,9.752988,3.474493,-9.599811,-4.213353,-0.020224,0.247669,7.841988,-6.561167,-5.042470,6.045691,8.454157,-1.838185,-3.841564,7.799439,4.586818,-8.087131,-4.944401,6.003889,6.261209,2.939421,-2.026991,8.223472,-4.231490,-6.979582,-3.701140,-4.677598,4.325511,2.649716,0.573718,2.119320,3.474456,9.141617,4.703010,-6.285351,1.240876,-9.821694,-6.167101,0.369608,5.672174,2.466245,7.429812,5.800640,-6.194562,-5.500868,-2.551559,-7.954140,0.363093,8.058860,5.569813,2.835252,5.239689,-5.687154,3.379088,7.698182,-7.825669,-8.849044,-3.163072,-1.682979,-7.754633,-1.837991,9.416636,-1.089454,8.789721,3.646925,5.476543,1.500763,2.053428,8.146585,2.803864,0.762113,7.506464,-9.940097,-7.758642,2.623617,3.683033,1.407810,-0.998427,-6.553588,8.250741,-3.189992,-5.512006,1.733231,-5.579135,1.601961,8.936238,1.033870,-8.297324,-3.210766,-9.776292,-7.219269,-3.633948,-0.204357,6.792812,-8.212440,4.500188,-2.770869,-1.533982,6.386514,-2.495650,-7.557258,9.462815,-2.599244,4.166156,-3.139113,-6.794937,-4.600118,-9.179627,-5.241783,5.317192,-2.298338,1.512435,-0.441493,7.765264,-3.919619,-8.890730,4.403775,-7.079939,-7.829420,8.637791,-7.639086,1.634803,-7.671394,7.768821,8.381476,7.204015,6.318630,-5.636590,-6.480399,3.946562,5.315640,1.119558,-9.042397,5.673478,-3.290971,8.875802,-8.800624,9.971718,9.535931,2.200003,9.063090,-7.384943,-0.877464,-0.706848,-4.938534,0.007961,-9.366532,7.679154,5.726242,9.095390,9.736535,-4.130026,5.632218,-0.364294,-6.066057,9.309879,-4.318771,3.226420,2.199310,7.793312,1.822209,8.170161,9.392189,-3.539055,4.797245,-1.275890,5.578925,5.218169,-9.481930,7.422234,4.332098,-6.424655,-6.114171,-0.490335,-9.979902,-4.545594,3.645809,3.996464,-4.194938,7.239573,8.460907,-7.307101,-6.095777,4.415958,5.145640,7.090921,2.111076,-9.456361,7.125205,8.114197,-7.087169,-5.760202,-6.337850,-6.572512,7.761016,-6.976591,-3.054539,4.079141,-8.189758,6.862410,6.561304,9.643772,3.765156,5.496960,-0.633846,-5.768965,-7.776149,-6.946650,-0.241982,9.800149,-9.424579,-7.542104,-6.970135,0.183923,-7.866451,-5.839333,-0.406970,-5.576534,2.026246,-3.911240,1.281745,-4.219853,8.295216,-1.066528,6.326583,-0.775775,8.701030,-9.446446,-8.878566,5.702576,4.574310,0.708968,9.162586,4.631296,1.215206,-8.370872,-4.166218,-3.298161,-1.829671,3.735049,-1.472839,2.914940,-4.641440,4.465006,-5.695447,5.382200,-8.886344,7.983078,-9.910516,-5.499777,-9.848408,-6.678209,4.629992,6.197500,3.560946,8.746483,-8.637043,-6.782439,9.972945,5.305126,-7.101139,1.709180,5.556627,-6.555278,0.766213,3.228146,7.016734,-2.535623,-0.212262,-4.014026,-4.152436,5.339308,5.463674,2.121901,7.415096,-4.614769,9.166341,-2.008142,-6.052669,-4.901953,2.559302,5.793810,-6.443849,3.884030,9.831127,-5.592199,-7.718822,-0.879201,8.793630,-3.998027,7.965429,-1.161042,-5.040232,5.841301,0.601367,-0.173697,-9.862551,-6.885033,4.948095,0.328408,0.748678,-5.679262,-1.919951,2.330661,-9.360186,-6.252714,-6.786113,-0.624504,-5.334943,3.019882,0.513020,-5.742235,-5.372366,-3.544773,4.108385,-7.517858,-6.883014,-0.921214,-3.544725,-1.946511,3.446337,-9.783598,-6.404427,-6.344348,-4.371449,-7.714147,0.844465,4.529411,1.584873,8.493772,-5.049687,-5.407930,-9.246843,5.792301,-9.393021,8.389127,-2.922014,-4.584785,-0.344113,4.629311,-1.472488,-6.513283,8.368585,6.618511,-9.972797,9.424357,7.068658,9.814004,-5.377849,-1.214068,-1.673322,-5.413522,8.071360,2.511605,4.646299,-8.065725,5.292024,4.460005,0.363882,2.021608,4.766047,-3.740198,-8.927600,-6.150609,-6.713249,-6.646399,-6.880370,6.055537,7.633642,8.121544,-0.959952,-8.107504,-4.119948,-6.273117,0.014500,6.863091,-1.989146,4.919817,9.759142,0.142775,-8.446758,0.351006,-6.485994,-5.908274,4.768099,-3.975117,5.086390,3.924916,-6.715032,9.281902,-6.896010,-5.268012,-9.340352,7.177703,0.252713,3.091265,-1.156187,-5.639800,-5.679235,-9.519109,-1.258062,9.557856,-4.818573,7.046311,-7.272440,-0.052122,-2.004350,5.685415,-1.858945,-7.346485,8.594825,3.603402,-3.837534,-9.276792,-2.329539,0.045007,6.844219,-3.761333,9.829113,-9.203822,1.038711,-3.236361,7.835196,-2.173654,3.552216,1.674355,3.032353,-9.789233,-9.397582,-8.569821,-2.726526,8.008436,-2.348684,0.029617,0.674726,7.797152,-8.472477,-0.561971,7.075105,0.563832,-2.016042,2.914505,8.924087,4.053423,-6.000322,-9.951673,4.375505,-8.522280,8.554290,-5.419618,4.822021,6.113277,7.654410,7.499166,0.474092,5.842982,4.266027,0.271663,0.616250,-2.438073,-8.153146,-7.240525,-2.942087,0.734424,-8.908473,-6.543188,6.292747,2.341920,-2.099181,3.491348,4.438001,8.618526,8.211561,3.170255,0.494771,-4.945445,-7.546277,-6.170317,6.224157,-8.851760,2.998742,6.223134,0.167516,6.439779,4.378663,4.806798,-1.857902,2.458089,4.548026,-2.045018,-1.937522,-9.646608,4.411047,0.970289,-6.134621,-5.478207,-1.844822,-2.823684,-1.568480,8.589232,-2.430639,-4.143145,7.067280,-7.902192,-4.819415,-9.330006,2.920716,2.590788,9.476861,2.187749,-7.352269,8.325538,7.396556,-5.928865,0.874473,0.438780,-8.922539,-6.678225,6.142169,-6.026394,6.140256,-7.034344,9.204817,6.232821,-1.278539,-6.869051,-5.482016,7.600654,5.566409,4.037659,-8.880231,-2.072373,-9.262932,-1.485187,0.477765,3.563965,7.486435,7.119526,1.856192,9.076130,6.239231,4.762996,2.034438,5.736570,-3.307122,-2.955460,5.694384,-2.672392,8.254729,1.101243,2.638085,-4.777216,-0.417684,-3.470874,-6.596613,8.245519,3.476136,-7.791626,-2.178712,-4.312824,-2.949469,3.504426,5.003027,-6.670168,-5.326322,-3.261689,-2.032166,3.111530,-1.638933,0.714130,3.438821,3.391924,3.195510,-9.143930,5.787111,-1.199089,0.696521,-3.267212,3.820416,7.201893,-4.099611,-5.952318,-5.948647,-8.134102,1.997245,-5.617266,-4.155474,5.436923,6.500466,7.754010,-7.061064,-8.789346,1.858516,4.634249,0.416970,5.487708,-7.603723,5.221504,3.726444,6.928139,4.888101,2.543173,0.264196,2.087213,-7.102973,-5.494839,-2.597327,-5.391439,7.290761,6.166834,6.746007,-6.667796,-4.056129,-4.234164,1.503044,-4.130053,8.315189,4.748920,-7.933658,6.442840,3.202216,-6.151106,1.070769,-2.351695,-3.581783,7.486414,-3.214910,1.813878,9.290464,-7.811575,6.675872,8.585492,-9.021110,-2.114445,5.696845,-6.310636,4.192294,2.625819,4.659153,3.293341,0.778529,2.592195,-4.548068,-9.975240,2.679734,7.673639,7.040404,3.165343,7.009230,-4.156259,-8.984684,1.888795,3.629591,-9.684987,-2.647318,-1.535450,-9.097217,7.353113,-1.721650,2.692811,-7.472443,5.429138,7.956463,-4.783739,-0.508607,-6.767757,8.708925,-8.889033,-8.190584,9.111351,-1.339090,-2.291459,-8.279971,6.472122,7.764525,-5.993726,6.144522,3.040522,-6.785347,9.615426,-0.072290,6.791654,-4.798442,6.527690,-4.872766,9.065589,-8.593219,-6.801696,-7.441565,-4.430020,-9.459948,4.787191,-4.084107,-9.271689,-5.424339,0.676023,8.602662,-9.700027,-9.332214,-0.463901,6.006122,6.377006,4.021172,-7.361399,5.319968,4.098920,4.906139,-9.862943,0.460816,-6.097658,-7.321540,5.263868,5.908986,3.996825,4.023669,-5.380756,-1.693507,-5.801718,9.069138,0.715554,5.676920,-5.226979,2.660284,-9.788087,-3.102517,5.444777,-5.304277,-8.159337,-4.258453,4.511056,-5.006417,-7.164219,6.930982,-6.138348,5.579952,-9.953841], dtype = "float32")#candidate|1405|(1560,)|const|float32
call_1404 = relay.TupleGetItem(func_943_call(relay.reshape(const_1405.astype('float32'), [13, 8, 15])), 0)
call_1406 = relay.TupleGetItem(func_945_call(relay.reshape(const_1405.astype('float32'), [13, 8, 15])), 0)
func_918_call = mod.get_global_var('func_918')
func_922_call = mutated_mod.get_global_var('func_922')
const_1414 = relay.const([-8,-9,-6,-6,-8,2,2,-5,10,3,-5,1,-8,5,2,7,-1,-9,-3,-9,-6,4,-8,2], dtype = "int16")#candidate|1414|(24,)|const|int16
const_1415 = relay.const([[9,8,8,-5],[-10,5,-2,9],[-4,10,9,9],[-3,10,-2,8],[8,-1,-3,3],[9,-3,10,2],[6,8,-6,-3],[5,10,-10,7],[6,6,6,-1],[9,7,7,-3],[-3,-8,9,-7],[5,-2,-8,4],[-8,-1,10,-9],[-9,8,8,-9],[-6,2,-10,-10],[10,9,10,10],[-4,10,5,2],[-8,10,-4,8],[7,5,-3,-4],[4,1,-9,-2],[1,6,5,-2],[8,10,-2,-2],[-10,-8,-2,8],[-6,-2,7,7],[-9,-6,8,-7],[9,-10,6,1],[1,-1,-10,8],[5,2,-5,-1],[-9,-9,6,-5],[5,-7,-9,9],[6,10,-10,-5],[-10,8,-3,4],[-10,8,10,3],[9,8,-6,6],[8,9,6,-2],[10,-6,3,-2],[-4,10,-4,-1],[3,-10,6,-3],[6,2,-8,2],[8,-9,-7,-3],[3,-7,6,-3],[5,8,-3,-6]], dtype = "int16")#candidate|1415|(42, 4)|const|int16
call_1413 = relay.TupleGetItem(func_918_call(relay.reshape(const_1414.astype('int16'), [24,]), relay.reshape(const_1415.astype('int16'), [168,]), relay.reshape(call_1400.astype('float64'), [5, 2]), ), 3)
call_1416 = relay.TupleGetItem(func_922_call(relay.reshape(const_1414.astype('int16'), [24,]), relay.reshape(const_1415.astype('int16'), [168,]), relay.reshape(call_1400.astype('float64'), [5, 2]), ), 3)
output = relay.Tuple([call_1400,call_1404,const_1405,call_1413,const_1414,const_1415,])
output2 = relay.Tuple([call_1401,call_1406,const_1405,call_1416,const_1414,const_1415,])
func_1420 = relay.Function([], output)
mod['func_1420'] = func_1420
mod = relay.transform.InferType()(mod)
mutated_mod['func_1420'] = func_1420
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1420_call = mutated_mod.get_global_var('func_1420')
call_1421 = func_1420_call()
output = call_1421
func_1422 = relay.Function([], output)
mutated_mod['func_1422'] = func_1422
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1439 = relay.var("var_1439", dtype = "float32", shape = (10, 3))#candidate|1439|(10, 3)|var|float32
uop_1440 = relay.sin(var_1439.astype('float32')) # shape=(10, 3)
uop_1450 = relay.log10(uop_1440.astype('float64')) # shape=(10, 3)
var_1452 = relay.var("var_1452", dtype = "float64", shape = (10, 3))#candidate|1452|(10, 3)|var|float64
bop_1453 = relay.multiply(uop_1450.astype('uint64'), relay.reshape(var_1452.astype('uint64'), relay.shape_of(uop_1450))) # shape=(10, 3)
output = bop_1453
output2 = bop_1453
func_1456 = relay.Function([var_1439,var_1452,], output)
mod['func_1456'] = func_1456
mod = relay.transform.InferType()(mod)
mutated_mod['func_1456'] = func_1456
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1456_call = mutated_mod.get_global_var('func_1456')
var_1458 = relay.var("var_1458", dtype = "float32", shape = (10, 3))#candidate|1458|(10, 3)|var|float32
var_1459 = relay.var("var_1459", dtype = "float64", shape = (10, 3))#candidate|1459|(10, 3)|var|float64
call_1457 = func_1456_call(var_1458,var_1459,)
output = call_1457
func_1460 = relay.Function([var_1458,var_1459,], output)
mutated_mod['func_1460'] = func_1460
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1491 = relay.var("var_1491", dtype = "int8", shape = (9, 16))#candidate|1491|(9, 16)|var|int8
var_1492 = relay.var("var_1492", dtype = "int8", shape = (9, 16))#candidate|1492|(9, 16)|var|int8
bop_1493 = relay.less(var_1491.astype('bool'), relay.reshape(var_1492.astype('bool'), relay.shape_of(var_1491))) # shape=(9, 16)
output = bop_1493
output2 = bop_1493
func_1498 = relay.Function([var_1491,var_1492,], output)
mod['func_1498'] = func_1498
mod = relay.transform.InferType()(mod)
var_1499 = relay.var("var_1499", dtype = "int8", shape = (9, 16))#candidate|1499|(9, 16)|var|int8
var_1500 = relay.var("var_1500", dtype = "int8", shape = (9, 16))#candidate|1500|(9, 16)|var|int8
output = func_1498(var_1499,var_1500,)
func_1501 = relay.Function([var_1499,var_1500,], output)
mutated_mod['func_1501'] = func_1501
mutated_mod = relay.transform.InferType()(mutated_mod)
func_812_call = mod.get_global_var('func_812')
func_814_call = mutated_mod.get_global_var('func_814')
call_1524 = relay.TupleGetItem(func_812_call(), 1)
call_1525 = relay.TupleGetItem(func_814_call(), 1)
uop_1527 = relay.asinh(call_1524.astype('float32')) # shape=(12, 8, 10)
uop_1529 = relay.asinh(call_1525.astype('float32')) # shape=(12, 8, 10)
var_1530 = relay.var("var_1530", dtype = "float32", shape = (12, 8, 10))#candidate|1530|(12, 8, 10)|var|float32
bop_1531 = relay.add(uop_1527.astype('float64'), relay.reshape(var_1530.astype('float64'), relay.shape_of(uop_1527))) # shape=(12, 8, 10)
bop_1534 = relay.add(uop_1529.astype('float64'), relay.reshape(var_1530.astype('float64'), relay.shape_of(uop_1529))) # shape=(12, 8, 10)
output = bop_1531
output2 = bop_1534
func_1547 = relay.Function([var_1530,], output)
mod['func_1547'] = func_1547
mod = relay.transform.InferType()(mod)
var_1548 = relay.var("var_1548", dtype = "float32", shape = (12, 8, 10))#candidate|1548|(12, 8, 10)|var|float32
output = func_1547(var_1548)
func_1549 = relay.Function([var_1548], output)
mutated_mod['func_1549'] = func_1549
mutated_mod = relay.transform.InferType()(mutated_mod)
func_930_call = mod.get_global_var('func_930')
func_931_call = mutated_mod.get_global_var('func_931')
call_1556 = relay.TupleGetItem(func_930_call(), 2)
call_1557 = relay.TupleGetItem(func_931_call(), 2)
func_1420_call = mod.get_global_var('func_1420')
func_1422_call = mutated_mod.get_global_var('func_1422')
call_1567 = relay.TupleGetItem(func_1420_call(), 2)
call_1568 = relay.TupleGetItem(func_1422_call(), 2)
uop_1581 = relay.sinh(call_1556.astype('float64')) # shape=(330, 3)
uop_1583 = relay.sinh(call_1557.astype('float64')) # shape=(330, 3)
uop_1586 = relay.asinh(uop_1581.astype('float32')) # shape=(330, 3)
uop_1588 = relay.asinh(uop_1583.astype('float32')) # shape=(330, 3)
output = relay.Tuple([call_1567,uop_1586,])
output2 = relay.Tuple([call_1568,uop_1588,])
func_1591 = relay.Function([], output)
mod['func_1591'] = func_1591
mod = relay.transform.InferType()(mod)
mutated_mod['func_1591'] = func_1591
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1591_call = mutated_mod.get_global_var('func_1591')
call_1592 = func_1591_call()
output = call_1592
func_1593 = relay.Function([], output)
mutated_mod['func_1593'] = func_1593
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1594 = relay.var("var_1594", dtype = "float64", shape = (8, 4))#candidate|1594|(8, 4)|var|float64
const_1595 = relay.const([[8.042743,4.053164,6.826963,-1.929358],[4.917181,3.025386,1.210655,7.881115],[5.006730,-4.180766,0.934034,4.058695],[9.878385,-8.299425,2.254476,-3.796947],[5.548271,-2.109456,6.706321,-5.126267],[5.367855,-5.281921,-9.356317,2.237654],[3.315758,-5.151790,6.725173,-9.600420],[9.968885,-0.646507,8.592619,-5.040005]], dtype = "float64")#candidate|1595|(8, 4)|const|float64
bop_1596 = relay.divide(var_1594.astype('float64'), relay.reshape(const_1595.astype('float64'), relay.shape_of(var_1594))) # shape=(8, 4)
bop_1600 = relay.right_shift(bop_1596.astype('int16'), relay.reshape(const_1595.astype('int16'), relay.shape_of(bop_1596))) # shape=(8, 4)
uop_1604 = relay.atanh(bop_1600.astype('float64')) # shape=(8, 4)
bop_1610 = relay.power(uop_1604.astype('float64'), relay.reshape(bop_1600.astype('float64'), relay.shape_of(uop_1604))) # shape=(8, 4)
output = relay.Tuple([bop_1610,])
output2 = relay.Tuple([bop_1610,])
func_1616 = relay.Function([var_1594,], output)
mod['func_1616'] = func_1616
mod = relay.transform.InferType()(mod)
var_1617 = relay.var("var_1617", dtype = "float64", shape = (8, 4))#candidate|1617|(8, 4)|var|float64
output = func_1616(var_1617)
func_1618 = relay.Function([var_1617], output)
mutated_mod['func_1618'] = func_1618
mutated_mod = relay.transform.InferType()(mutated_mod)
func_930_call = mod.get_global_var('func_930')
func_931_call = mutated_mod.get_global_var('func_931')
call_1632 = relay.TupleGetItem(func_930_call(), 1)
call_1633 = relay.TupleGetItem(func_931_call(), 1)
uop_1638 = relay.sin(call_1632.astype('float64')) # shape=(15, 11, 6)
uop_1640 = relay.sin(call_1633.astype('float64')) # shape=(15, 11, 6)
bop_1648 = relay.logical_xor(uop_1638.astype('int8'), relay.reshape(call_1632.astype('int8'), relay.shape_of(uop_1638))) # shape=(15, 11, 6)
bop_1651 = relay.logical_xor(uop_1640.astype('int8'), relay.reshape(call_1633.astype('int8'), relay.shape_of(uop_1640))) # shape=(15, 11, 6)
output = relay.Tuple([bop_1648,])
output2 = relay.Tuple([bop_1651,])
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()()
res3 = intrp3.evaluate()()
res4 = intrp4.evaluate()()
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()()
res7 = intrp7.evaluate()()
res8 = intrp8.evaluate()()
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()()
res11 = intrp11.evaluate()()
res12 = intrp12.evaluate()()
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()()
res15 = intrp15.evaluate()()
res16 = intrp16.evaluate()()
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()()
res19 = intrp19.evaluate()()
res20 = intrp20.evaluate()()
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()()
res23 = intrp23.evaluate()()
res24 = intrp24.evaluate()()
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''57: TVMFuncCall
56: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
55: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
54: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
53: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
52: tvm::transform::Pass::operator()(tvm::IRModule) const
51: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
50: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
49: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
48: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
47: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
46: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
45: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
44: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
43: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
42: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
41: _ZN3tvm5relay16MixedModeMutato
40: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
39: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
38: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
37: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
36: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
34: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
32: _ZN3tvm5relay16MixedModeMutato
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
27: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
26: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
25: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
24: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
23: tvm::transform::Pass::operator()(tvm::IRModule) const
22: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
21: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
16: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
15: tvm::relay::TypeInferencer::Infer(tvm::GlobalVar, tvm::relay::Function)
14: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
13: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
12: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
11: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
10: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
9: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::FunctionNode const*)
8: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
7: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
6: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
5: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
4: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
3: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::CallNode const*)
2: tvm::relay::TypeInferencer::GeneralCall(tvm::relay::CallNode const*, tvm::runtime::Array<tvm::Type, void>)
1: _ZN3tvm17DiagnosticContext9EmitFatalERKNS_1
0: tvm::DiagnosticContext::Render()

'''