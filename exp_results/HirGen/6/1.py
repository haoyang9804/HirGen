import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (13, 6, 15))#candidate|0|(13, 6, 15)|var|float32
uop_1 = relay.acos(var_0.astype('float32')) # shape=(13, 6, 15)
var_3 = relay.var("var_3", dtype = "float32", shape = (13, 6, 15))#candidate|3|(13, 6, 15)|var|float32
bop_4 = relay.greater_equal(var_0.astype('bool'), relay.reshape(var_3.astype('bool'), relay.shape_of(var_0))) # shape=(13, 6, 15)
uop_7 = relay.erf(uop_1.astype('float64')) # shape=(13, 6, 15)
uop_9 = relay.cos(var_3.astype('float32')) # shape=(13, 6, 15)
var_13 = relay.var("var_13", dtype = "float64", shape = (13, 6, 15))#candidate|13|(13, 6, 15)|var|float64
bop_14 = relay.less_equal(uop_7.astype('bool'), relay.reshape(var_13.astype('bool'), relay.shape_of(uop_7))) # shape=(13, 6, 15)
const_17 = relay.const([[[6.485518,-6.184526,1.353572,2.441963,-3.004603,-2.884736,-9.585227,-6.734246,7.192975,-3.149487,-7.383076,3.663749,-8.223071,-2.594772,5.588376],[-0.495154,7.205256,3.596379,-4.253309,1.894984,-0.174337,-9.541045,-5.715030,-5.761874,-5.543172,7.468631,9.669940,-0.401082,-8.754744,-2.227552],[-6.722076,-4.348891,4.947784,-3.789775,-0.270522,0.255917,5.608973,-5.516022,-3.487204,-2.282872,4.370560,4.162877,-7.222465,-7.532840,-4.933412],[-5.007278,0.196065,-0.163087,-4.742864,-7.233872,-0.081355,-7.886139,-3.670742,6.930447,6.524735,3.922509,7.021451,7.100718,-5.494842,5.017034],[-4.148726,-8.490610,-2.593959,6.711240,7.057456,-4.795502,2.710462,-4.044233,5.806923,-2.767609,5.136475,4.381606,-2.473514,-6.739864,-7.007519],[6.952725,-3.298813,-3.014206,-7.075058,3.593232,-0.545125,0.193130,-7.013927,1.779570,1.577029,-2.556934,8.407011,-4.465417,-4.372664,7.522814]],[[-6.263285,-2.325951,-2.692648,7.366159,-1.640657,-6.280159,-5.239703,-1.452134,6.990885,-1.852455,5.403421,4.532443,-5.638180,-6.969691,8.748946],[6.438698,-6.472642,-8.168906,7.304910,6.621495,-1.669029,-4.502386,4.641565,-8.994816,-6.534813,4.245273,4.903479,-4.180232,-8.924386,2.549762],[-1.160478,5.045597,-9.379843,0.560129,-5.070252,6.916643,4.037649,3.259698,-7.079815,7.950602,9.160788,-4.415022,-2.424435,-0.767188,4.629108],[-7.623507,2.359078,-5.036772,3.704303,3.384145,-5.664191,-8.098526,-7.648369,-5.054480,3.413924,4.305003,-1.846792,-6.993044,-3.757312,-9.671788],[-1.910990,-9.643835,-1.281973,1.217499,-4.374259,6.295316,3.120079,-3.439180,-0.422735,-4.425584,7.715690,-8.686511,2.426478,-7.355698,3.763905],[0.620342,5.801557,6.908906,-5.458777,8.292215,8.540317,0.961630,-1.201948,-1.767055,-8.702920,5.420777,-4.502734,1.706095,-9.810016,-8.258272]],[[-8.677093,1.165652,9.912531,-3.927780,5.655278,-8.801365,-7.724798,9.215066,-7.136778,3.471442,-6.396163,-7.392241,-5.360419,-6.158433,0.261824],[4.580108,-3.627879,1.101144,1.684054,0.800455,9.212086,-2.071175,3.874793,-6.623376,9.379696,-6.000406,-5.406731,0.305721,-9.372943,9.652477],[-4.418277,-4.446849,2.117326,-4.378669,7.078480,2.359059,5.600454,-5.445978,1.140118,-1.184249,0.020608,-1.169871,1.978320,-8.472892,5.946670],[1.905835,-0.135346,-3.966991,3.272069,4.369560,-7.775936,9.207594,-9.296641,-6.096852,0.440594,-6.814046,8.411142,-2.110007,-3.072523,2.823980],[7.158196,1.929928,-5.867774,2.428987,-1.324382,-4.651602,-9.262700,9.803545,1.705596,-1.964453,-0.654956,8.800107,-7.063045,0.903697,3.204078],[-3.342017,2.160289,-9.809784,-1.514065,-9.133753,-4.905542,1.633577,-7.743062,8.902182,2.351077,-1.152137,3.848709,1.858818,-0.964171,-3.824419]],[[8.549396,-8.769645,1.817035,-0.731778,-4.782145,-4.091008,4.786996,3.190060,-3.059733,-8.249821,5.975771,-0.904128,-6.389876,-5.580136,-3.908187],[-5.646558,2.883770,-5.781539,-7.705305,-8.551579,8.761391,4.175513,4.236490,5.352243,-6.047749,2.933999,-1.052303,-7.580940,7.500818,4.989614],[6.099593,-9.548333,-8.505688,7.153766,6.530172,-8.716933,1.498794,-3.371790,-0.740067,-4.686867,3.635714,-0.353970,0.074167,-8.180414,6.385396],[-6.444220,-9.348112,-7.832227,-3.203196,5.862070,7.669439,-8.860767,8.797982,0.390735,-4.292860,-9.888569,6.967166,-2.757797,3.693983,-5.477702],[-5.035984,-7.202333,7.879256,-9.244996,-1.406445,3.844323,5.578602,-7.626132,-3.954183,-2.552124,-0.235953,-1.710791,-9.774887,-1.502395,-9.181707],[-0.038723,-2.036937,7.200885,6.080137,9.615215,6.797767,-0.193412,-1.323648,7.348865,-4.961882,-2.658253,5.070653,7.410362,5.124079,1.227388]],[[-1.210959,-7.544675,-0.557324,-5.564734,1.651757,-8.020215,-2.049545,2.411022,4.478069,-2.450038,3.222581,-4.534283,5.147317,-8.452676,-1.789425],[-4.677013,8.353847,5.443780,-8.472399,-2.706095,5.017108,-8.649620,9.766563,-9.343235,7.872703,-8.416026,4.097452,1.995100,-8.928178,2.989354],[0.284638,5.698676,3.457563,5.365428,-4.078476,8.661395,-1.533755,-4.852074,-3.276772,-0.202683,5.455059,-8.550413,-6.456305,1.117900,0.396392],[7.607297,0.232146,1.264829,6.109252,-4.462068,-6.073575,3.703282,-7.684348,-1.724444,-7.140065,-1.038335,-0.696984,5.659441,-0.759882,8.600547],[6.860161,-5.403192,-6.875983,0.917630,-0.211267,3.275999,-4.665438,4.722776,-7.309834,5.097267,0.098342,-3.869190,-0.567310,-9.751323,1.440422],[-7.023418,-8.232087,0.410448,-5.626805,-9.613429,-3.072126,-3.445498,-5.885679,0.690891,3.617000,7.648414,-0.391057,-2.405609,6.343141,9.864526]],[[5.725393,-2.744474,8.742092,-8.079316,-1.028604,-2.465091,-9.508502,8.943933,2.915169,-6.983670,3.378879,7.469648,6.720262,-7.607345,-1.622146],[0.562883,6.133401,1.213573,5.973491,2.200443,-1.095996,7.663090,-4.028243,2.600963,6.524533,-2.165108,0.700501,4.859586,-0.617039,-6.270584],[6.512573,-2.432721,0.529428,1.671094,1.131459,-8.110107,9.389027,-7.771834,4.773007,3.180324,1.014902,0.076106,2.969344,-0.462033,1.481801],[-4.277086,-1.624724,6.550868,-0.736919,4.310708,0.792028,8.074089,8.023908,-7.416018,5.910397,7.365801,-5.684936,7.242277,1.081134,9.654017],[-9.146208,-0.007828,-2.461323,-6.473273,-3.945847,-6.296942,-8.740451,-4.257206,9.861032,-4.644934,-1.952581,-4.055532,-6.795253,-7.439617,8.954539],[-8.803360,7.087759,-5.741041,7.552970,-5.438945,-7.571151,0.756763,-3.169756,-6.217432,0.729351,-9.786603,2.352081,-9.243017,0.647955,7.998428]],[[-3.061524,-1.661242,-2.182773,0.582059,-7.200953,-2.489664,-3.484207,2.357948,6.443267,-6.380677,-0.952153,3.486106,1.104147,6.205337,-7.485298],[2.543634,1.193622,0.447373,6.285763,9.564790,-0.389627,-9.827606,3.369485,-4.834768,-6.203889,6.875696,2.854537,-4.765353,-4.118287,4.795709],[-9.518837,9.719128,5.948105,-1.361504,5.247510,-9.624131,4.129691,-8.237404,-2.935472,5.014266,-2.381963,6.255409,4.603338,-3.459994,3.020426],[5.920600,4.546195,1.196276,1.465723,7.147258,7.219016,-7.778926,-6.368528,-4.746243,2.010525,8.620466,-2.930477,-9.032818,-1.475916,-5.814209],[-4.386552,-8.470833,-0.455050,-6.283799,3.488559,1.738139,9.591658,1.758277,-9.703799,-6.199378,0.836984,6.349332,-6.732185,-4.586650,3.707624],[8.469580,-8.560162,5.714574,0.855265,-9.187258,6.602123,-4.248518,3.444161,-3.544158,7.739760,-3.025175,9.408045,-1.125654,3.208315,-0.790329]],[[1.121906,-0.340712,7.652974,4.554274,-3.601523,4.446147,6.793565,-4.959089,4.704155,-2.947829,-0.450575,-2.634321,4.917093,7.943306,4.346048],[8.299012,8.856877,-7.331659,3.928952,-9.154275,8.894314,7.694382,9.622328,2.165432,-0.558797,8.714375,-7.067640,-5.268369,-1.261273,-3.781256],[-6.087956,8.508706,-6.477881,-0.762955,2.422354,7.379729,0.387723,2.443118,-9.788858,9.979990,-4.150611,8.973464,-5.988373,-7.307027,-0.454960],[-0.995965,-7.257425,-4.920867,1.953988,-9.967597,7.690378,3.588315,-4.176262,5.876356,-0.112881,-3.018036,9.329799,0.520150,2.196011,1.810221],[8.269573,-8.043994,1.472797,-1.965044,-6.367252,2.403229,-8.948239,-4.413555,8.744892,0.423975,-7.453813,-9.456867,-6.882662,-5.325279,-6.101944],[0.910652,5.710385,5.844572,-6.753255,-4.280541,9.010685,0.724381,-8.571946,-0.720844,0.559911,6.377693,0.975057,-2.937361,-0.524945,-3.241259]],[[-4.098946,-6.505786,6.240876,-4.461495,1.002037,-6.497324,-9.601345,-0.507126,9.610552,-3.674974,-8.756628,0.209629,7.453064,3.743948,-0.152265],[-8.230849,6.238101,-4.452270,9.594578,3.243726,5.662399,5.637635,1.618285,2.899175,-4.460762,1.950100,5.774195,4.743760,-4.866174,-0.365997],[-3.185467,2.069732,7.983849,-9.321472,-9.669001,9.573013,-0.170931,8.763950,-2.705554,-8.031780,-4.135000,-3.032288,-5.118644,3.246729,-3.160276],[3.552152,-3.093980,8.079845,4.374961,-2.202163,5.542679,7.259650,-2.254345,7.536020,6.476107,-2.450122,8.214132,-4.886232,-1.063578,5.405431],[7.888848,1.485307,0.120226,-6.372187,-9.988515,9.148803,-7.008234,8.261151,7.345304,-2.899123,6.215917,9.982985,5.808586,-0.877098,2.087466],[-4.837899,9.295237,-5.683807,-2.304168,2.503721,-4.601086,-1.712362,4.959006,7.662266,-3.662424,-9.352849,-0.744708,9.432629,0.047162,7.878117]],[[2.014336,9.209281,9.123744,0.424457,-4.852262,3.990483,2.464573,-7.305465,0.098131,-7.474628,8.497392,2.306208,-4.940705,0.840864,8.974129],[-1.764731,-2.416452,6.264894,3.873574,-0.866296,9.870009,-8.936705,2.010793,2.793437,8.810799,8.870679,-5.369654,-6.224297,0.224054,-0.099466],[8.125815,4.674868,1.077218,6.144348,9.315786,-0.862351,6.693818,-4.978871,7.665507,-3.715642,5.075962,5.309884,-7.403834,-0.700245,3.118110],[-1.025433,6.295371,7.148790,-0.804176,5.025283,-9.725670,-6.776860,5.977127,-0.363187,1.640182,7.287911,-9.619220,-3.817018,-4.269817,-0.303268],[-1.799069,-4.437610,-5.052304,-8.968671,7.450722,2.928348,0.442805,5.815053,-3.784759,-9.563349,-4.494161,-1.233286,-2.337437,-0.925862,1.670638],[5.350100,5.707929,8.367362,0.206337,8.632509,8.489207,-2.559430,-4.641287,9.359121,8.365323,-8.933290,6.352498,6.404591,-9.608657,0.929583]],[[-0.005928,5.856935,-0.042501,-1.131857,-3.803081,-6.389724,-4.852381,-6.325274,8.682126,0.162584,2.060035,-9.653035,-2.201687,2.717082,8.122597],[-8.121729,8.642226,-7.500698,-7.222347,0.746170,-6.878088,-4.265185,-6.065420,1.612862,6.008042,-2.111191,3.101852,0.242540,-8.015727,-0.498845],[5.212567,-9.305714,-1.742101,8.853217,4.348845,1.136527,-5.019431,-5.781414,-0.368210,-6.479466,-4.354778,1.275649,-0.752061,7.779403,1.823579],[-8.157454,-9.507119,9.121517,6.793668,9.539577,2.287062,-2.797257,-1.986821,-9.283166,1.101096,-7.915777,7.453794,6.193953,5.342848,1.681243],[-5.845873,4.891073,-4.515276,4.013607,6.666537,-0.810287,6.894313,2.511916,2.041946,-8.599513,-6.003084,-1.837638,-0.149170,9.514134,-9.680383],[-1.005070,9.900244,0.156522,-4.765382,9.206519,0.531150,-4.517718,3.850837,-3.068101,4.515571,0.021571,-1.728363,-7.442913,0.923896,-5.958849]],[[-2.020218,-1.016061,-5.844271,9.676393,-3.508501,9.117972,-0.841838,-7.611965,6.640109,-1.103587,4.819136,-3.596422,3.362122,9.873248,0.243949],[-2.050725,-5.210422,4.528949,-6.807132,-0.357403,2.290051,-6.672364,3.262264,3.139272,3.221418,-0.243422,9.108981,-5.536502,1.201084,2.573798],[1.120990,-1.274906,-4.262281,4.542392,-0.554610,2.488292,5.321956,9.405575,-5.024448,5.215059,-5.918406,8.145086,-8.132697,-2.839435,3.728560],[-4.024112,8.812246,-1.414260,-3.751854,-5.550094,5.036455,2.143778,1.571994,-9.715899,6.257782,8.544372,2.099753,-4.057635,6.391554,7.047965],[-9.839755,9.804634,-2.225538,-4.335875,5.879531,2.951677,-4.807595,7.969116,7.583340,-9.942736,4.597561,-3.753554,-7.958354,2.060159,6.678664],[-3.230269,-7.746346,4.227984,9.527892,-8.292635,-5.999508,-2.621791,-8.492162,-4.325797,0.034268,-5.751632,-7.083137,3.639500,1.869398,-1.155112]],[[0.307564,8.296135,2.337358,-9.920546,-3.112613,6.865671,-5.213927,9.432777,-1.483795,-6.906166,-2.082499,-5.184015,2.460499,7.499569,-5.585230],[4.686584,-6.693014,-9.553442,0.818339,1.133291,3.571591,-5.341436,-5.092437,-9.547230,2.152903,-2.257335,2.816405,-0.231433,-6.107817,-5.856476],[-9.871629,-8.805759,-7.858047,-4.699431,1.665848,9.589402,-4.210746,-0.312184,1.935437,7.149617,4.083749,3.177112,3.518417,5.620316,3.317160],[-5.009804,3.618481,5.309267,7.866936,3.308233,3.179195,0.707695,-7.714034,-5.026262,-6.109614,-9.967921,7.573810,6.858842,4.750085,-5.584816],[-0.604440,-4.952448,5.222651,9.708139,4.325560,1.882748,0.079833,3.829038,-8.724944,4.819333,0.010079,-3.248708,5.813542,8.096226,-9.381766],[-2.326167,6.693840,-2.447871,-0.058838,4.884380,-8.485368,-4.001640,-6.520359,2.207214,9.441898,4.422712,-2.672871,7.911062,0.981938,-5.685080]]], dtype = "float32")#candidate|17|(13, 6, 15)|const|float32
bop_18 = relay.right_shift(uop_9.astype('uint8'), relay.reshape(const_17.astype('uint8'), relay.shape_of(uop_9))) # shape=(13, 6, 15)
var_21 = relay.var("var_21", dtype = "bool", shape = (13, 6, 15))#candidate|21|(13, 6, 15)|var|bool
bop_22 = relay.logical_or(bop_14.astype('bool'), relay.reshape(var_21.astype('bool'), relay.shape_of(bop_14))) # shape=(13, 6, 15)
uop_25 = relay.sqrt(bop_14.astype('float32')) # shape=(13, 6, 15)
bop_27 = relay.mod(uop_25.astype('float64'), relay.reshape(var_13.astype('float64'), relay.shape_of(uop_25))) # shape=(13, 6, 15)
uop_30 = relay.log10(uop_25.astype('float64')) # shape=(13, 6, 15)
output = relay.Tuple([bop_4,bop_18,bop_22,bop_27,uop_30,])
output2 = relay.Tuple([bop_4,bop_18,bop_22,bop_27,uop_30,])
func_33 = relay.Function([var_0,var_3,var_13,var_21,], output)
mod['func_33'] = func_33
mod = relay.transform.InferType()(mod)
mutated_mod['func_33'] = func_33
mutated_mod = relay.transform.InferType()(mutated_mod)
func_33_call = mutated_mod.get_global_var('func_33')
var_35 = relay.var("var_35", dtype = "float32", shape = (13, 6, 15))#candidate|35|(13, 6, 15)|var|float32
var_36 = relay.var("var_36", dtype = "float32", shape = (13, 6, 15))#candidate|36|(13, 6, 15)|var|float32
var_37 = relay.var("var_37", dtype = "float64", shape = (13, 6, 15))#candidate|37|(13, 6, 15)|var|float64
var_38 = relay.var("var_38", dtype = "bool", shape = (13, 6, 15))#candidate|38|(13, 6, 15)|var|bool
call_34 = func_33_call(var_35,var_36,var_37,var_38,)
output = call_34
func_39 = relay.Function([var_35,var_36,var_37,var_38,], output)
mutated_mod['func_39'] = func_39
mutated_mod = relay.transform.InferType()(mutated_mod)
var_46 = relay.var("var_46", dtype = "uint32", shape = (8, 16, 1))#candidate|46|(8, 16, 1)|var|uint32
const_47 = relay.const([[[2,-5],[3,-9],[1,-10],[-4,7],[-9,10],[-6,-5],[-3,-3],[-7,-4],[-8,7],[1,8],[-9,2],[7,7],[-4,1],[2,-10],[-3,5],[-6,10]],[[-8,-3],[3,2],[10,-5],[-7,5],[3,-3],[10,-10],[-8,4],[4,8],[-10,-2],[4,5],[1,-1],[4,10],[-1,-2],[6,-5],[-5,-8],[4,-2]],[[9,-7],[1,7],[2,8],[5,5],[5,-7],[9,5],[5,-4],[1,1],[-1,1],[10,2],[5,8],[-2,-5],[10,7],[-8,-3],[8,-9],[-3,-9]],[[1,-6],[7,3],[-10,3],[5,6],[-4,5],[7,-4],[-5,-6],[-5,5],[-2,-9],[9,-2],[-4,-8],[4,4],[-10,9],[-7,4],[6,-4],[-2,9]],[[10,-6],[9,-7],[-2,-1],[2,6],[4,-9],[6,7],[-1,5],[10,9],[1,8],[-3,4],[-1,-6],[2,-2],[5,1],[3,5],[7,-9],[-3,6]],[[6,-5],[-10,-8],[6,3],[-4,-6],[6,-4],[5,5],[9,-8],[4,6],[9,-1],[-2,9],[3,-6],[7,-9],[1,-4],[-1,6],[-2,-4],[-2,8]],[[-4,2],[10,-6],[5,9],[5,-5],[-1,1],[-7,-4],[3,7],[10,7],[-4,2],[2,6],[-9,9],[5,10],[-4,-10],[10,-10],[-3,10],[-4,-9]],[[-8,4],[-8,-7],[-5,3],[-10,-8],[4,5],[-1,8],[-4,7],[-5,-8],[-7,5],[1,4],[-8,-10],[10,5],[5,9],[-7,-9],[-5,-10],[-3,5]]], dtype = "uint32")#candidate|47|(8, 16, 2)|const|uint32
bop_48 = relay.minimum(var_46.astype('uint32'), const_47.astype('uint32')) # shape=(8, 16, 2)
bop_53 = relay.mod(bop_48.astype('float32'), relay.reshape(const_47.astype('float32'), relay.shape_of(bop_48))) # shape=(8, 16, 2)
uop_56 = relay.erf(const_47.astype('float32')) # shape=(8, 16, 2)
bop_58 = relay.maximum(uop_56.astype('int8'), relay.reshape(const_47.astype('int8'), relay.shape_of(uop_56))) # shape=(8, 16, 2)
bop_61 = relay.bitwise_or(bop_58.astype('int64'), relay.reshape(const_47.astype('int64'), relay.shape_of(bop_58))) # shape=(8, 16, 2)
uop_64 = relay.log(uop_56.astype('float32')) # shape=(8, 16, 2)
uop_66 = relay.sigmoid(uop_64.astype('float32')) # shape=(8, 16, 2)
var_68 = relay.var("var_68", dtype = "float32", shape = (8, 16, 2))#candidate|68|(8, 16, 2)|var|float32
bop_69 = relay.less_equal(uop_66.astype('bool'), relay.reshape(var_68.astype('bool'), relay.shape_of(uop_66))) # shape=(8, 16, 2)
uop_73 = relay.asinh(uop_66.astype('float64')) # shape=(8, 16, 2)
func_33_call = mod.get_global_var('func_33')
func_39_call = mutated_mod.get_global_var('func_39')
var_76 = relay.var("var_76", dtype = "float32", shape = (1170,))#candidate|76|(1170,)|var|float32
call_75 = relay.TupleGetItem(func_33_call(relay.reshape(var_76.astype('float32'), [13, 6, 15]), relay.reshape(var_76.astype('float32'), [13, 6, 15]), relay.reshape(var_76.astype('float64'), [13, 6, 15]), relay.reshape(var_76.astype('bool'), [13, 6, 15]), ), 2)
call_77 = relay.TupleGetItem(func_39_call(relay.reshape(var_76.astype('float32'), [13, 6, 15]), relay.reshape(var_76.astype('float32'), [13, 6, 15]), relay.reshape(var_76.astype('float64'), [13, 6, 15]), relay.reshape(var_76.astype('bool'), [13, 6, 15]), ), 2)
uop_79 = relay.log2(uop_64.astype('float32')) # shape=(8, 16, 2)
uop_81 = relay.exp(bop_69.astype('float32')) # shape=(8, 16, 2)
bop_83 = relay.logical_and(uop_81.astype('bool'), relay.reshape(bop_61.astype('bool'), relay.shape_of(uop_81))) # shape=(8, 16, 2)
output = relay.Tuple([bop_53,uop_73,call_75,var_76,uop_79,bop_83,])
output2 = relay.Tuple([bop_53,uop_73,call_77,var_76,uop_79,bop_83,])
func_88 = relay.Function([var_46,var_68,var_76,], output)
mod['func_88'] = func_88
mod = relay.transform.InferType()(mod)
mutated_mod['func_88'] = func_88
mutated_mod = relay.transform.InferType()(mutated_mod)
func_88_call = mutated_mod.get_global_var('func_88')
var_90 = relay.var("var_90", dtype = "uint32", shape = (8, 16, 1))#candidate|90|(8, 16, 1)|var|uint32
var_91 = relay.var("var_91", dtype = "float32", shape = (8, 16, 2))#candidate|91|(8, 16, 2)|var|float32
var_92 = relay.var("var_92", dtype = "float32", shape = (1170,))#candidate|92|(1170,)|var|float32
call_89 = func_88_call(var_90,var_91,var_92,)
output = call_89
func_93 = relay.Function([var_90,var_91,var_92,], output)
mutated_mod['func_93'] = func_93
mutated_mod = relay.transform.InferType()(mutated_mod)
var_95 = relay.var("var_95", dtype = "int64", shape = (10, 5))#candidate|95|(10, 5)|var|int64
const_96 = relay.const([[4,-4,-2,9,2],[1,-9,5,-7,-3],[3,4,-10,-4,9],[-8,7,1,-6,-9],[6,-8,-6,-10,-8],[-5,5,-9,-4,-9],[6,8,-1,3,9],[-10,5,-9,2,5],[-2,-3,10,2,-6],[7,-2,5,3,-3]], dtype = "int64")#candidate|96|(10, 5)|const|int64
bop_97 = relay.maximum(var_95.astype('int64'), relay.reshape(const_96.astype('int64'), relay.shape_of(var_95))) # shape=(10, 5)
output = bop_97
output2 = bop_97
func_100 = relay.Function([var_95,], output)
mod['func_100'] = func_100
mod = relay.transform.InferType()(mod)
mutated_mod['func_100'] = func_100
mutated_mod = relay.transform.InferType()(mutated_mod)
var_101 = relay.var("var_101", dtype = "int64", shape = (10, 5))#candidate|101|(10, 5)|var|int64
func_100_call = mutated_mod.get_global_var('func_100')
call_102 = func_100_call(var_101)
output = call_102
func_103 = relay.Function([var_101], output)
mutated_mod['func_103'] = func_103
mutated_mod = relay.transform.InferType()(mutated_mod)
const_115 = relay.const([4.431271,-4.504683,-9.225196,8.693866,7.085538,1.354070,-9.699828,-2.132430], dtype = "float32")#candidate|115|(8,)|const|float32
uop_116 = relay.sin(const_115.astype('float32')) # shape=(8,)
func_88_call = mod.get_global_var('func_88')
func_93_call = mutated_mod.get_global_var('func_93')
var_119 = relay.var("var_119", dtype = "uint32", shape = (128,))#candidate|119|(128,)|var|uint32
var_120 = relay.var("var_120", dtype = "float32", shape = (256,))#candidate|120|(256,)|var|float32
const_121 = relay.const([2.370251,-2.288053,0.099119,-9.319476,5.672161,-9.987872,0.950125,1.173300,1.153485,8.203713,2.993758,-1.411772,0.726102,3.201168,9.024038,-7.561972,1.764047,-1.022645,-2.227269,1.900335,0.906619,0.720433,5.625919,0.700371,-1.852053,-1.358628,1.461290,-4.022772,9.494208,3.095821,-9.076257,9.415296,5.437765,-3.159973,7.874161,2.992700,2.800028,7.353597,-6.251854,5.799419,5.112198,-7.719060,-4.111765,8.973459,-2.194880,1.018263,-1.500315,9.167455,-2.667225,-0.531349,1.709249,-2.061967,-6.991814,7.033681,-1.623786,-8.685979,-7.058766,-7.892034,3.831753,-2.311968,7.815328,-7.144665,-1.531797,1.696695,9.112193,-7.872260,7.145081,-0.219177,3.463867,-9.977104,-7.470489,6.773466,3.366614,-1.242216,-7.004467,3.723803,-0.721455,7.583687,9.536535,3.219821,-1.865617,2.022808,-2.673888,-2.212019,1.604389,2.871190,3.024329,-0.203243,-1.085184,3.241437,5.322593,-0.920617,-2.566110,-1.305081,-0.087110,-7.385420,-0.325914,4.807453,1.482763,-3.182611,-6.707474,6.310027,-5.857370,1.890370,-8.238786,4.551077,4.041252,7.969014,-2.342753,4.246752,3.905259,4.632207,7.547293,-6.461563,-2.551297,0.175549,-2.121776,-8.219744,-8.016144,4.051811,-9.113804,-2.601710,5.982630,3.740932,1.627336,-4.966326,4.428317,-7.910547,-3.019353,1.520397,0.329029,-4.672190,9.620020,6.969856,-9.552297,-4.491723,4.927109,-8.886411,-4.834493,-4.614329,-0.148457,-0.866610,7.910432,-9.859393,9.966562,-8.916759,-2.511280,-4.681764,-7.922505,8.872476,6.850574,1.319005,-6.504726,3.672839,-8.445194,-9.348272,-4.814479,-2.746195,-2.315400,-9.820397,-2.735374,-8.241092,4.913466,2.126277,-7.294732,-4.046244,-9.729238,2.081901,8.926798,-6.683537,-9.054967,-6.987309,6.282010,-5.720044,9.806702,-0.275562,-6.691768,-9.555233,6.000939,7.559636,-4.005523,1.974884,1.753771,1.014359,2.011278,-8.025592,-4.455097,8.761259,2.585017,2.420055,-5.117628,7.628517,7.188335,-6.695074,5.425303,-2.442233,5.850524,-5.514477,-4.429399,9.793460,7.095836,-4.026065,-9.078547,-1.763979,6.172770,-5.839254,2.552871,-9.066648,6.644487,2.988678,-0.241031,-9.338698,-0.682923,6.588121,-1.858102,-5.259539,-9.261418,7.213177,-5.609933,0.897152,-5.193870,4.026236,8.957371,-9.552651,-1.371460,9.120896,4.543224,-0.887173,-0.531275,9.310333,-1.201761,4.495303,-4.014201,4.080744,-1.353863,-9.605134,-2.711443,-7.969040,-2.161878,-8.702830,-2.098346,0.730358,9.756750,9.796738,9.850231,-3.472212,0.354448,6.291106,4.821519,-1.218770,7.810391,-9.381120,9.331025,4.800527,8.575024,-4.807164,5.136750,5.454438,-1.132729,-3.123739,5.307442,3.209124,-9.402207,-1.637855,-9.246258,7.870068,-0.690807,0.130469,-9.844975,7.559797,5.308175,-9.221714,2.795741,1.365339,-0.410819,-2.551446,8.393369,-6.421875,-0.076787,0.834351,-0.098500,-0.969188,-9.835613,-1.775760,-9.742224,-6.201083,3.933165,-2.701787,-5.175891,-6.913540,2.810354,9.580132,8.337918,7.074227,-7.901536,-9.031830,5.996813,4.027422,-3.348163,3.729473,1.455265,-5.990468,-7.796565,-7.987061,5.318105,7.517406,1.580643,8.657855,3.219525,-6.334736,5.833608,-6.584570,3.949097,-3.181262,1.608037,-1.717761,4.162341,7.774464,3.866758,-4.910603,3.061140,6.517764,-9.415379,6.473635,8.839786,-0.338322,-7.491005,-7.513561,-7.761383,8.743331,-8.452708,6.560292,9.343984,9.660600,-5.805020,2.419943,3.652500,-2.574014,3.259516,2.286843,9.406155,9.532178,-6.147845,9.446425,-6.788500,-4.348069,-8.414923,-2.548655,2.203338,-6.129605,9.999992,6.251510,-8.166650,7.053277,8.590694,2.766283,-9.675687,-4.588489,-4.250935,9.462728,-1.414885,9.824802,2.814531,-2.304660,2.309077,-0.154899,-2.404072,6.178211,9.898944,-5.272692,-0.705326,5.982985,-8.288345,3.034617,2.932762,7.946430,6.582349,-9.779145,-5.832694,4.004467,4.899812,3.217810,7.716740,2.311352,9.939796,7.456413,4.007621,-0.647538,-7.516563,-8.326396,-2.772439,0.308186,-5.677458,2.523282,5.821446,-1.577949,-7.700025,-6.118457,-0.395645,1.937258,-3.310233,3.090462,9.797406,5.384736,-0.550806,-4.320110,-6.153852,-6.039522,8.166877,1.775828,-5.457710,-0.958718,2.084149,-8.594060,-1.470468,7.818274,-1.644773,-3.208264,-9.488085,8.547840,3.669387,-7.792878,0.998851,-7.643937,-8.496833,8.163314,3.253150,7.347377,2.781693,-6.561269,1.237397,-9.379422,8.693936,-1.786028,-1.944223,-4.164346,6.708131,4.838025,8.943407,5.534498,-8.782765,-2.978827,-3.870326,-7.889040,6.255461,2.654010,8.752202,-6.486271,-9.489545,-7.129131,-0.566707,-2.091532,4.297317,-9.751102,7.321503,-0.652518,9.442049,7.636004,7.691282,8.547351,2.043767,6.151439,-0.408995,9.512735,-8.795596,7.286116,-7.793181,-7.485956,-5.878078,-9.205894,7.263827,9.944420,1.884413,-0.751606,-2.219262,5.977222,5.570401,-4.117877,-5.202169,-8.500431,-4.645230,6.789331,-9.116346,-2.684632,-6.350456,-4.023903,-7.622801,-5.674209,7.863176,-7.617588,-1.888648,0.124494,-1.329736,4.230640,0.171517,-1.278024,-3.732815,-8.733369,9.632641,0.084511,0.941975,5.427664,4.122814,4.692461,6.666330,-3.613682,5.751364,4.230377,-3.639329,-2.549903,-6.382786,0.982415,-2.686148,4.802629,-8.600141,8.117284,2.729242,5.487465,8.675458,8.873259,-3.689848,-7.682192,8.980736,-8.794721,3.633579,9.378659,3.398726,-5.123359,-4.454536,7.630855,-3.101792,-6.824827,-3.965089,-5.028576,-2.662572,-9.432658,4.931801,-0.312132,-1.503875,-0.982714,3.863505,0.875681,-5.758456,-0.873923,-3.442026,-0.499942,-8.191824,-1.510084,-6.917060,-5.358336,-0.362279,-4.457158,-7.488752,-0.419617,7.080676,-4.371001,-8.168942,5.242014,4.240640,8.471453,8.744747,-4.896896,-3.292429,-3.912154,2.423135,9.325201,5.968738,0.120757,-0.828111,-6.005319,2.518655,-3.020150,9.546536,-0.514026,4.320633,-4.167783,6.585112,-0.510806,8.184957,1.616126,-9.963694,-3.137166,-2.136279,5.881867,5.000473,-6.625199,-6.558048,-0.658274,-3.966092,-0.442121,-9.147550,-3.751886,0.573736,6.093909,-4.773868,2.879433,6.930870,-1.175026,3.696106,-7.125209,-9.023048,3.642328,1.648775,-4.277289,8.702292,3.447927,2.657223,0.474683,-1.707879,1.761032,4.504577,1.537975,-7.632833,-7.907666,0.512690,-3.487711,6.672523,-0.779308,2.643702,-2.616112,7.043693,-0.303339,-6.849076,2.834117,-6.417713,2.216890,8.889545,-3.022595,-4.995933,-3.198386,0.103759,0.633771,-7.049787,1.316257,-9.685654,-6.254603,2.779759,-2.352183,7.990078,-0.007916,-8.566109,3.575966,2.262664,6.740388,3.383869,4.824280,-0.201566,1.214177,1.390495,-5.324030,1.690676,5.633661,7.599349,-1.767634,-9.413624,-9.477609,-7.865669,-1.449706,3.805903,6.479886,4.064882,5.307273,-9.320851,1.728406,8.391628,3.500847,-8.881903,1.558390,6.418760,-3.530688,0.364764,-3.231154,0.471936,7.186927,9.525965,1.156532,8.695336,-0.288225,9.669678,4.680274,-6.548053,6.044562,-2.341854,-3.449097,-8.008867,4.044696,-8.590618,9.398248,-2.295741,-9.494816,-6.687664,8.593907,4.773213,4.415822,4.378032,1.360995,8.166320,-6.259810,-6.543884,6.163494,-5.218151,-8.315188,9.414051,-6.624173,-0.168435,5.074747,-4.551859,-6.323881,-7.538746,-8.258453,1.054493,1.277513,2.089995,-1.907014,5.726741,-9.536611,-4.009137,-0.779807,8.277855,8.850169,9.461001,-9.266741,4.821545,3.959207,-8.741836,8.956529,-5.945836,-6.975825,6.267150,7.542331,5.745075,-1.030888,-5.020193,9.450731,7.239741,2.330127,6.292796,-0.313343,-2.852524,-8.866757,5.316873,-3.969046,9.989296,2.320441,6.604330,6.974431,1.641525,-7.630035,-1.445035,2.639671,3.556769,-8.617740,-1.798501,8.944516,0.379085,0.187110,-7.409593,-4.240746,-9.211630,-7.329419,-3.975067,-0.182123,0.734314,6.331114,-9.327721,2.143248,0.107741,-8.556328,-9.175241,-1.898107,-7.463960,-7.623583,-6.474884,-1.641423,0.302792,-0.152638,-6.928838,2.047679,-6.332456,3.213249,2.946188,-1.197836,-3.858981,-5.792235,-7.816829,-7.303755,-7.830438,7.093879,9.112830,2.141323,-6.020578,-0.649098,8.147875,-4.645514,-4.513353,-7.282360,-6.351937,-8.485630,-3.029775,4.232706,-5.657637,1.938889,3.590591,6.669993,-4.272387,2.295031,-8.484981,2.025932,3.441415,2.425023,4.599954,0.700076,-7.286651,-9.405806,-2.581568,-2.488349,-2.536059,2.332860,-2.015578,-4.468779,8.283707,-6.862522,-1.520790,6.774690,2.512935,3.179314,2.967135,9.936807,4.996534,-0.485083,3.468606,-2.957347,-4.095138,6.399790,-8.411291,8.661447,1.460649,9.983455,5.471600,0.142340,-2.761562,8.683457,3.238655,7.096315,-1.226325,-8.136956,-0.066805,2.726792,-6.425593,-1.824143,9.872194,9.401348,6.775139,-6.775765,3.953871,3.057830,-5.522255,8.519600,7.330383,-8.962084,-8.828744,-1.315207,1.676853,0.734558,-3.655792,-9.273560,5.648572,7.996316,2.029083,3.066589,5.259506,-4.741228,4.856711,-9.906622,-7.235492,9.637679,0.587676,-9.045512,8.629165,3.446986,2.302132,7.160426,6.918164,7.967563,-0.709336,1.202882,8.467136,-9.379656,-2.153084,-6.853666,7.410450,4.110769,7.800828,-1.149810,-7.678934,-2.255592,9.062631,-1.626616,-9.790533,6.845612,2.585361,0.163164,-7.249368,8.812092,-3.014804,-0.849720,1.316306,-9.147399,5.471115,-2.516382,-2.336663,7.082255,-9.722090,-5.749919,9.032243,-1.414771,5.845519,9.618880,4.786696,-1.946975,-2.281700,2.581682,-1.899400,-4.376643,-1.987903,8.667622,-1.797870,2.140538,7.710090,1.553802,6.173534,8.406209,9.816046,5.626580,8.571225,-5.627409,-4.635650,-1.246684,-0.891639,-1.203296,3.035525,5.874512,-8.775954,-3.857773,1.673438,-0.788380,8.796967,0.048202,-2.291225,6.923734,-6.147557,-3.725243,-8.315952,1.261258,8.345392,1.088212,-6.887548,-3.781628,1.490414,-5.194774,4.945507,-0.012208,-7.871102,4.603557,-4.052238,-9.417886,7.464440,2.780098,4.346823,-8.103241,-8.325252,7.273676,-4.481158,9.033222,8.371856,-1.697116,-9.851340,3.307061,-9.551749,7.313700,-5.980593,4.326029,-6.859374,2.768060,-0.512201,7.877964,3.011462,3.277859,-2.220033,-3.899767,-5.819930,-3.515851,0.074125,2.212185,7.681668,-6.529571,-3.537306,0.341128,-9.195061,6.639915,-0.500814,8.838933,9.915831,5.251678,6.106325,3.721983,6.670140,-5.943517,-7.501251,-3.440184,-9.141936,1.034326,1.718022,-9.591301,6.369209,-5.125693,-2.113490,8.486379,-7.784602,2.705239,-9.925114,8.229339,8.224114,-8.670956,8.327161,5.755155,9.701011,-8.767181,0.051414,-1.432272,-8.463888,-8.368767,-9.195179,3.575094,-0.473520,-7.174702,0.610950,-9.975955,6.686166,-1.377574,-6.769787,4.795871,-6.340379,-5.083005,-9.801367,-0.854393,6.689175,4.074693,4.775594,-6.621421,0.564241,-6.504491,-2.003780,3.424028,-8.595573,-9.805167,7.907398,-2.566136,4.798461,2.792554,-1.431203,8.336737,-1.115221,8.715454,5.740243,-8.257979,1.363049,5.920716,9.891400,7.961045,2.044646,-2.343280,6.672126,-0.373207,9.981071,-2.158818,-2.630886,0.708318,-7.126414,-2.130097,-8.914677,8.745008,7.134609,5.888851,0.536233,-2.492559,-0.469584,-1.289450,-9.253993,3.086713,-6.768381,0.010723,9.938784,-2.456439,1.524455,5.383819,5.553619,7.509414,7.764938,4.406718,-5.837557,5.261450,2.279377,-5.727599,3.631016,6.711030,-9.393626,-5.938870,-8.244847,9.346627,9.366159,0.939950,9.095880,4.786960,-8.108337,-9.713629,4.737000,2.897464,7.347820,-9.065046,7.373393,-6.604352,-7.356962,8.389855,5.625510,-1.899822,0.042416,1.743130,6.878510,-4.259448,-4.042508,-4.784968,-4.279559,-3.819084,3.872607,-8.651409,-3.247433,-9.750523,9.461250,1.473491,3.407872,7.332923,-9.607632,3.559209,-2.355878,8.641584,-1.738759,-7.808439,2.007545,-3.681920,5.536119,-1.137297,-8.354664,-1.855554,-6.883316,-6.923272,2.103387,7.007263,8.737988,4.600267,-4.943935,-2.575107,-4.733127,1.411245,6.130552,3.619612,0.138360,-4.045333,-2.515020,5.420186], dtype = "float32")#candidate|121|(1170,)|const|float32
call_118 = relay.TupleGetItem(func_88_call(relay.reshape(var_119.astype('uint32'), [8, 16, 1]), relay.reshape(var_120.astype('float32'), [8, 16, 2]), relay.reshape(const_121.astype('float32'), [1170,]), ), 3)
call_122 = relay.TupleGetItem(func_93_call(relay.reshape(var_119.astype('uint32'), [8, 16, 1]), relay.reshape(var_120.astype('float32'), [8, 16, 2]), relay.reshape(const_121.astype('float32'), [1170,]), ), 3)
bop_123 = relay.power(uop_116.astype('float32'), relay.reshape(const_115.astype('float32'), relay.shape_of(uop_116))) # shape=(8,)
output = relay.Tuple([call_118,var_119,var_120,const_121,bop_123,])
output2 = relay.Tuple([call_122,var_119,var_120,const_121,bop_123,])
func_127 = relay.Function([var_119,var_120,], output)
mod['func_127'] = func_127
mod = relay.transform.InferType()(mod)
mutated_mod['func_127'] = func_127
mutated_mod = relay.transform.InferType()(mutated_mod)
func_127_call = mutated_mod.get_global_var('func_127')
var_129 = relay.var("var_129", dtype = "uint32", shape = (128,))#candidate|129|(128,)|var|uint32
var_130 = relay.var("var_130", dtype = "float32", shape = (256,))#candidate|130|(256,)|var|float32
call_128 = func_127_call(var_129,var_130,)
output = call_128
func_131 = relay.Function([var_129,var_130,], output)
mutated_mod['func_131'] = func_131
mutated_mod = relay.transform.InferType()(mutated_mod)
var_133 = relay.var("var_133", dtype = "float64", shape = ())#candidate|133|()|var|float64
var_134 = relay.var("var_134", dtype = "float64", shape = (11, 6))#candidate|134|(11, 6)|var|float64
bop_135 = relay.floor_mod(var_133.astype('float64'), var_134.astype('float64')) # shape=(11, 6)
uop_138 = relay.rsqrt(var_133.astype('float64')) # shape=()
bop_140 = relay.bitwise_xor(uop_138.astype('int64'), var_134.astype('int64')) # shape=(11, 6)
var_143 = relay.var("var_143", dtype = "float64", shape = (11, 6))#candidate|143|(11, 6)|var|float64
bop_144 = relay.divide(var_134.astype('float32'), relay.reshape(var_143.astype('float32'), relay.shape_of(var_134))) # shape=(11, 6)
bop_147 = relay.floor_divide(uop_138.astype('float64'), bop_144.astype('float64')) # shape=(11, 6)
output = relay.Tuple([bop_135,bop_140,bop_147,])
output2 = relay.Tuple([bop_135,bop_140,bop_147,])
func_150 = relay.Function([var_133,var_134,var_143,], output)
mod['func_150'] = func_150
mod = relay.transform.InferType()(mod)
var_151 = relay.var("var_151", dtype = "float64", shape = ())#candidate|151|()|var|float64
var_152 = relay.var("var_152", dtype = "float64", shape = (11, 6))#candidate|152|(11, 6)|var|float64
var_153 = relay.var("var_153", dtype = "float64", shape = (11, 6))#candidate|153|(11, 6)|var|float64
output = func_150(var_151,var_152,var_153,)
func_154 = relay.Function([var_151,var_152,var_153,], output)
mutated_mod['func_154'] = func_154
mutated_mod = relay.transform.InferType()(mutated_mod)
var_169 = relay.var("var_169", dtype = "float64", shape = (5,))#candidate|169|(5,)|var|float64
uop_170 = relay.log(var_169.astype('float64')) # shape=(5,)
output = uop_170
output2 = uop_170
func_172 = relay.Function([var_169,], output)
mod['func_172'] = func_172
mod = relay.transform.InferType()(mod)
var_173 = relay.var("var_173", dtype = "float64", shape = (5,))#candidate|173|(5,)|var|float64
output = func_172(var_173)
func_174 = relay.Function([var_173], output)
mutated_mod['func_174'] = func_174
mutated_mod = relay.transform.InferType()(mutated_mod)
var_184 = relay.var("var_184", dtype = "float32", shape = (12, 8))#candidate|184|(12, 8)|var|float32
uop_185 = relay.atanh(var_184.astype('float32')) # shape=(12, 8)
func_172_call = mod.get_global_var('func_172')
func_174_call = mutated_mod.get_global_var('func_174')
const_188 = relay.const([-5.721213,-0.340218,-5.720633,-4.771811,3.950221], dtype = "float64")#candidate|188|(5,)|const|float64
call_187 = func_172_call(relay.reshape(const_188.astype('float64'), [5,]))
call_189 = func_172_call(relay.reshape(const_188.astype('float64'), [5,]))
bop_190 = relay.subtract(uop_185.astype('int32'), relay.reshape(var_184.astype('int32'), relay.shape_of(uop_185))) # shape=(12, 8)
uop_193 = relay.acosh(bop_190.astype('float64')) # shape=(12, 8)
output = relay.Tuple([call_187,const_188,uop_193,])
output2 = relay.Tuple([call_189,const_188,uop_193,])
func_195 = relay.Function([var_184,], output)
mod['func_195'] = func_195
mod = relay.transform.InferType()(mod)
var_196 = relay.var("var_196", dtype = "float32", shape = (12, 8))#candidate|196|(12, 8)|var|float32
output = func_195(var_196)
func_197 = relay.Function([var_196], output)
mutated_mod['func_197'] = func_197
mutated_mod = relay.transform.InferType()(mutated_mod)
const_199 = relay.const([-9.783056,3.249290,-4.383714,-6.276318,-3.332343,8.043321,8.288753,-2.736289,0.147979,-7.418779,-2.963905,-8.519448,7.923361,-0.817431], dtype = "float32")#candidate|199|(14,)|const|float32
uop_200 = relay.asinh(const_199.astype('float32')) # shape=(14,)
output = uop_200
output2 = uop_200
func_202 = relay.Function([], output)
mod['func_202'] = func_202
mod = relay.transform.InferType()(mod)
output = func_202()
func_203 = relay.Function([], output)
mutated_mod['func_203'] = func_203
mutated_mod = relay.transform.InferType()(mutated_mod)
var_211 = relay.var("var_211", dtype = "float32", shape = (15, 5))#candidate|211|(15, 5)|var|float32
uop_212 = relay.cosh(var_211.astype('float32')) # shape=(15, 5)
bop_215 = relay.less(var_211.astype('bool'), relay.reshape(uop_212.astype('bool'), relay.shape_of(var_211))) # shape=(15, 5)
uop_218 = relay.atan(bop_215.astype('float32')) # shape=(15, 5)
bop_222 = relay.right_shift(bop_215.astype('int32'), relay.reshape(var_211.astype('int32'), relay.shape_of(bop_215))) # shape=(15, 5)
output = relay.Tuple([uop_218,bop_222,])
output2 = relay.Tuple([uop_218,bop_222,])
func_225 = relay.Function([var_211,], output)
mod['func_225'] = func_225
mod = relay.transform.InferType()(mod)
var_226 = relay.var("var_226", dtype = "float32", shape = (15, 5))#candidate|226|(15, 5)|var|float32
output = func_225(var_226)
func_227 = relay.Function([var_226], output)
mutated_mod['func_227'] = func_227
mutated_mod = relay.transform.InferType()(mutated_mod)
var_229 = relay.var("var_229", dtype = "float32", shape = (12, 14, 9))#candidate|229|(12, 14, 9)|var|float32
uop_230 = relay.tan(var_229.astype('float32')) # shape=(12, 14, 9)
const_232 = relay.const([[[1.414887,5.571568,5.442636,1.707254,-9.466724,5.686434,0.049337,1.902974,-7.321438],[-9.587558,-7.624737,3.582714,8.864267,-4.824602,-0.152471,1.128606,3.146524,1.115112],[-6.400716,8.115602,5.642170,9.476189,1.823329,5.543589,9.117927,8.801528,-9.592968],[6.363777,-9.911576,-7.440779,4.002651,-6.353444,-0.316250,-9.577368,-0.017187,-0.239225],[-1.099294,-8.827137,-4.677436,9.192595,-2.505170,8.363580,1.825672,-7.967023,8.160876],[5.326553,-0.191385,2.281850,4.987671,1.136136,5.001186,3.383549,5.885784,8.944521],[0.206471,7.154905,-0.411494,5.913457,-9.722540,3.464183,-7.821348,-3.779241,-2.966118],[-3.458555,8.151654,8.017531,1.512925,5.005442,3.799259,-9.990857,8.339598,-8.485572],[5.648321,-6.662841,7.492583,5.644278,-0.630243,9.910352,6.442809,-2.518864,0.263769],[-9.353669,3.125074,-6.950760,-7.589619,8.618551,-2.776740,0.086964,8.672127,3.470799],[2.854554,8.840496,3.028612,-3.914072,-6.006862,5.222271,7.968511,-0.289231,2.618931],[0.650037,1.882725,-6.406025,-5.865177,9.429538,2.226245,-2.445542,9.897674,-2.195943],[-9.047121,-9.236466,6.075617,0.912222,7.876581,4.972354,-7.979306,-6.639478,-1.288620],[4.814607,6.124110,-6.056972,-4.903528,9.640715,-2.549166,-0.344402,4.076776,2.964204]],[[-9.959062,2.794093,-4.150715,1.921798,6.081655,7.971157,-7.466681,-4.038655,8.689030],[-3.387216,6.037064,-4.084490,2.382526,1.374803,2.809666,7.458902,2.465008,3.554733],[-4.941487,-6.538946,-1.375965,4.088072,-3.435238,-5.936392,-5.578848,4.690091,3.020597],[-2.173806,-6.445363,1.685490,-1.146192,-7.096659,9.542759,-6.861378,-0.394604,3.196741],[-2.799928,3.875217,-1.533481,-0.461078,-5.262712,-5.281360,0.993839,-4.166605,-5.258125],[2.605443,-3.428471,-8.779387,3.390212,4.575206,1.417603,4.654884,3.257555,2.815515],[-8.332814,8.466888,5.802355,-8.656041,-1.696560,7.860340,-6.984135,4.283398,-1.534594],[-0.299765,-0.634526,4.594183,-2.634041,4.028684,9.203887,1.160109,6.012557,-8.695266],[7.366581,3.720687,0.157853,-0.720967,-0.096412,-8.070212,-4.035254,-2.433336,2.840057],[-4.811904,-5.385476,0.027948,-4.214236,-4.477442,8.377388,6.217062,9.702566,-2.219135],[9.300921,2.877689,7.547716,-7.722765,-4.094716,-4.238547,-8.219591,-9.911526,8.179122],[-4.875651,-3.321413,1.739575,9.123326,-4.467520,6.697341,8.025113,-8.937103,-1.637284],[-1.214986,5.116196,-6.094328,-1.267164,-8.791297,9.597842,4.504600,-1.300482,-4.827077],[1.258263,-1.477204,4.099068,5.317476,-9.253691,9.444067,7.746212,6.360763,-7.862018]],[[-3.812504,-5.221831,3.030670,-1.464685,0.069158,6.768876,-9.362199,2.319432,-6.148914],[6.445750,4.609346,7.707769,-2.056381,-1.605495,4.709533,8.191538,-5.967561,1.040617],[-9.495815,-9.362637,-4.132102,2.230321,-6.213927,2.283443,0.939706,-2.201563,-9.746016],[0.794591,-7.515600,-0.398284,2.625950,-9.135520,7.804147,3.763007,3.897008,9.883893],[2.521318,9.650990,2.483904,2.900190,5.742540,0.224911,9.688901,-9.958715,-5.176614],[-6.515876,3.247992,5.274841,-8.949921,-8.697795,-4.732210,6.875318,-9.805339,-1.043898],[4.200787,6.737431,4.145249,-5.755012,8.107504,3.100362,7.693371,0.116854,-5.760347],[6.978217,-3.342110,-5.142006,5.394057,-1.851824,-6.718588,0.873274,-1.288465,-8.522425],[9.154604,8.863524,-0.125452,-1.119318,-8.575302,-2.801902,6.837161,8.247057,7.646866],[-9.940974,7.459162,-6.549765,3.259917,6.107608,-0.916977,-5.854007,-5.173158,5.163062],[-7.048296,-4.251005,9.560282,0.101042,-1.264849,-8.760381,-9.739678,-4.628985,-7.606713],[-9.270798,-8.531512,4.331722,6.402446,-8.544645,3.866593,-4.547119,5.077135,-5.566801],[6.682247,3.575825,-7.042031,4.311340,7.680496,-3.066811,8.322998,7.024000,-8.119354],[-6.824479,-9.732727,5.860127,-9.200980,8.175529,-9.609342,3.466940,9.413631,1.039758]],[[-5.212123,5.991779,-1.818411,5.097896,-7.395146,9.955782,-6.983872,-9.936591,-9.603456],[-1.934218,-1.068582,7.680387,-3.387554,-3.804439,6.535061,9.686269,8.743120,9.375511],[6.635298,1.110759,-7.236412,-9.921950,-0.876421,9.890431,7.391236,-2.505269,-3.911623],[-4.669179,-6.128750,-6.095946,6.495383,0.571198,-9.785842,-1.783864,-0.847012,6.243202],[6.687773,3.302432,3.220995,-5.848580,-1.840684,-0.481318,-5.489182,1.227551,8.274128],[6.672756,-8.987560,3.073381,6.941999,-0.772255,0.186827,-3.584215,7.147415,3.088146],[7.728506,6.512620,-3.753833,-5.210256,0.937632,3.532936,2.413079,6.352195,3.605621],[4.558367,-9.007011,-5.711895,0.899099,-4.769586,-6.804040,5.531315,-2.555604,-1.550007],[-1.837907,6.449296,-8.721089,8.396135,5.368810,0.990082,7.234671,-6.980763,-3.037963],[-0.999792,6.681935,3.190007,-4.549758,2.578689,7.120951,0.564004,-4.669752,7.775053],[1.572010,6.753857,0.387812,1.020582,1.842652,2.999235,4.843426,2.818364,-9.850312],[-1.788808,-6.626357,5.156298,3.263021,8.557188,-1.838684,6.940039,9.370636,-2.388379],[9.525570,-4.049795,3.708277,1.370474,1.646606,-0.336637,0.458478,-6.748399,-4.493146],[4.703308,-5.122467,-6.095640,-5.737796,-7.302647,-5.647472,-6.829854,-4.057233,-6.921627]],[[-6.908002,-7.852229,-8.844409,-7.912307,-6.749006,0.059805,-0.143954,-3.501222,-6.951805],[7.761529,-0.101812,-4.778044,6.075653,7.844899,9.185180,4.075922,8.309701,6.191648],[-0.563551,3.150095,-4.618784,-0.226872,2.231600,2.227761,9.899200,-6.309104,-1.499927],[-3.961471,-9.095144,-7.200907,9.414796,1.976735,9.280006,-4.851286,-9.620600,-1.981031],[8.035248,-1.621348,-7.394595,-4.102119,-3.549612,1.279594,6.449785,-7.113205,3.812799],[-5.838527,8.114338,3.222005,-0.433854,-3.167055,6.294195,-0.504740,5.295645,-9.790344],[-7.345788,8.973250,6.047335,-5.306656,-6.831838,-7.804470,0.740697,-8.882358,9.159138],[1.450920,-0.822215,-8.274567,5.432446,-3.611718,9.287373,-2.381430,4.150010,7.941787],[-4.343839,9.983917,-0.482614,7.727293,-3.329157,-4.457764,4.017868,-9.138993,-3.547209],[-0.873693,0.278662,-6.382062,6.226569,-2.147861,1.800757,8.277840,4.928158,-9.965724],[9.048653,9.695059,-0.385413,9.897682,-8.175577,5.874848,-0.155280,-5.128168,-2.863514],[5.763955,5.905638,-3.140812,0.380435,-3.853438,-0.281860,-5.162232,-1.303560,-0.584589],[-3.127311,1.406645,4.353743,0.320220,-9.121664,1.405109,-7.369010,-0.070637,-6.496850],[-9.443434,-9.455133,6.172835,-8.348689,-0.111904,0.134918,3.977727,-6.763184,-6.703752]],[[8.191870,-7.729832,0.401468,-8.718371,-1.976559,7.122790,1.240154,-1.343357,6.742122],[-7.042867,8.606342,-2.240591,8.589547,-0.406981,-3.731120,5.879254,-1.788249,9.027399],[1.136825,-1.039227,-0.680746,0.022603,6.860072,-1.404013,3.596085,-8.937470,1.600449],[9.039279,-2.618639,8.900959,6.436582,-4.525157,-0.679514,9.883892,1.462015,9.212420],[-7.930997,6.262610,-7.499737,-8.362154,9.473009,-3.143954,4.416704,4.938274,-6.046896],[2.370627,-3.800100,0.680810,5.718584,-2.478837,-0.093568,8.534933,-7.536058,9.380084],[-1.323874,-6.056385,-5.047508,-4.265155,5.801106,-7.217977,-0.073627,9.111785,5.118386],[2.540938,9.651679,-2.822379,8.816322,-8.188384,-4.242247,-2.603405,1.493267,-5.030243],[-9.881403,-9.359982,5.284138,3.245961,-6.918592,-9.045541,0.464695,-6.697256,7.859175],[0.509613,-2.234761,1.309376,4.387879,0.708702,-7.764383,-0.726008,6.275029,-3.596513],[9.407075,-6.949682,-7.387471,-9.788383,4.322406,8.925739,1.085702,4.981090,-7.206457],[-7.633763,1.024833,9.873106,-9.411302,-1.322298,-7.544674,-0.844088,-3.110357,7.850460],[3.201503,-0.910580,-3.528087,5.307933,-9.717195,-5.125232,5.959385,-6.000446,-5.982078],[9.943015,-6.877047,-9.173517,-6.048823,-5.028837,-2.828473,-5.261379,2.974795,-1.400037]],[[-0.674394,2.484511,-6.877617,4.391091,2.346304,-4.518779,1.445488,-0.340601,6.203966],[-3.821202,7.226700,-1.316815,-8.553198,8.720873,-0.588297,-1.509830,2.973092,9.670699],[7.386507,-6.649332,5.809495,-7.058098,-8.308493,-1.597445,-8.442409,5.704097,1.838784],[8.992418,-3.261492,-7.288366,-2.232884,6.560549,-7.645517,3.036506,-3.805769,-8.277423],[3.692828,-2.182971,7.621354,3.015081,-6.271808,8.306928,8.478549,0.942644,3.052784],[-4.944637,-2.878657,-1.440245,-6.413656,-6.309302,2.257789,-6.941328,-4.963387,-9.131002],[4.034724,4.582055,-7.255621,-4.744892,2.592323,-2.346254,4.276487,-7.655919,-2.098984],[-6.508443,-0.022916,7.216812,-6.370666,-3.241659,5.300257,-9.256284,6.348287,-0.734840],[4.180090,1.013773,-8.550506,3.473576,-3.311161,-2.699906,-2.395813,2.949358,9.520661],[-8.108014,8.970639,-4.116960,1.658238,0.687067,-4.322480,0.651429,-6.213976,-3.771656],[-5.426024,-6.422577,6.118776,8.502166,-3.269157,0.931815,-5.359876,7.272616,-1.592023],[-0.523911,-5.596800,-1.672570,8.619400,-3.663838,-1.711725,-5.843030,5.436859,9.400616],[2.106588,-9.068177,-6.315170,-1.821117,-8.448132,-0.352459,0.914449,-8.983276,-7.434784],[8.447860,-4.363780,-4.330208,-9.243437,7.855142,3.856156,3.029209,-3.945798,-0.790546]],[[3.333601,4.230785,-8.192396,-2.746817,-9.270091,-0.906244,-0.724692,-5.538794,1.366037],[6.366165,1.185187,1.042053,-7.147263,-5.458858,8.991644,5.219520,8.389814,-6.328562],[-3.573774,6.905883,1.509019,7.675021,3.676461,5.684613,-9.268218,7.580385,9.225483],[3.272070,4.274274,-3.473774,-4.281134,9.039356,-6.240325,-3.723731,-9.529563,1.043174],[5.572088,2.968338,-4.759530,4.567956,-1.944943,0.598420,-0.809029,5.261637,-1.964712],[-6.962699,2.036890,-0.195662,5.746187,-4.889504,-8.682251,8.422417,-6.558505,6.857986],[0.008276,-8.045016,6.248431,-7.447318,-7.904829,2.170277,9.846186,4.230731,6.108754],[7.557773,-8.599259,-5.158819,0.796525,-1.268559,2.952606,6.757035,6.775976,-6.309297],[7.258430,-6.132704,-4.678780,-2.211274,8.738153,-1.269841,6.619228,5.374143,2.125293],[-0.706935,3.949013,-8.707375,-8.797695,-0.878812,2.876890,-2.433331,7.446433,-6.079577],[-0.672866,1.299359,5.032321,-2.193223,2.836803,-5.677067,-4.767064,-5.769154,-6.422906],[-7.313417,-1.416830,-1.312230,6.244694,-1.440340,2.657741,-7.958467,5.040350,1.900473],[6.157720,2.553566,8.447309,3.022723,-8.322862,6.289188,-4.760353,-2.916872,-3.311443],[2.092191,6.228211,-0.563682,-3.037613,5.337821,6.410615,-2.832848,-1.433900,7.622913]],[[-0.130160,9.699884,-6.425063,1.894736,-6.241295,8.221465,-8.879110,-7.912797,-4.040682],[-0.246148,1.632320,-9.422634,-6.031405,4.799745,-2.275359,-8.284860,5.951378,-5.110309],[-6.757453,8.501595,8.752128,-6.644227,8.794680,5.541148,1.215600,-8.998339,2.307681],[0.538063,-8.197788,2.028834,-0.789697,1.537777,2.246958,0.110663,1.411997,1.393679],[-7.778208,-7.296952,-8.195160,7.330330,0.511293,8.676111,1.789215,-8.113044,3.851700],[-5.246185,9.569444,-1.692955,2.432727,-8.145257,-6.769893,2.703566,4.696176,-5.533483],[-3.375313,-6.970989,7.738817,-9.880171,-7.289832,-4.419314,-9.402068,3.662350,-1.828409],[4.246716,-9.389125,-9.622293,0.049143,1.547138,5.022784,-4.641797,8.000565,7.615248],[-4.978529,7.089787,-3.917189,7.031352,5.314198,-2.626938,-2.159850,6.814413,-1.501851],[1.455992,-1.277158,-6.069834,-2.961617,7.469353,7.388623,-2.146702,-1.055261,3.062361],[-3.017464,-9.667053,5.008942,8.134427,-4.887681,-5.741756,6.627639,-5.249036,-1.786449],[9.045222,0.954960,2.731564,-9.133882,4.858852,9.230572,3.368090,2.822661,1.037310],[7.961274,-9.639359,-9.751189,-5.526649,-9.039523,6.852049,9.482908,9.062203,2.021618],[-2.202919,-6.807666,-9.076401,-0.344166,1.024082,1.621913,-3.484073,-0.880248,-1.440626]],[[-9.843211,-8.800718,8.550959,2.600496,-9.204220,-1.881093,3.022142,3.427779,-4.380037],[-3.036032,-9.301637,-1.916783,-7.374207,-2.177335,0.631883,0.823128,7.974210,-0.188783],[6.329225,6.041948,-2.787220,9.339989,-0.174249,8.113556,1.614396,5.676571,-9.745236],[3.528146,6.830541,3.567856,5.624575,-6.716326,-6.220323,5.547452,-5.017895,1.070950],[-9.718339,8.958339,-7.067739,9.705630,-3.653521,4.221174,-6.670766,2.654416,-4.649362],[-4.123018,-6.082803,-9.799560,2.973826,-7.885777,-9.411300,-7.639492,0.947034,-9.350132],[3.732432,3.647088,-9.073812,-3.591231,6.429268,-3.983440,-8.628131,3.344236,8.394459],[5.772305,-4.848509,1.909402,7.944080,7.347770,7.924155,-0.527930,-6.381900,-1.353637],[-7.697824,1.549464,-5.061307,4.855440,2.540871,6.331339,-0.111500,8.774267,6.711959],[-0.959188,9.855922,7.651365,7.175745,4.882598,5.923920,-7.034620,-1.499455,5.700922],[-2.845429,9.938213,-3.356176,-2.681482,4.119399,8.846558,-5.684562,8.324013,5.974123],[-8.972934,5.722570,-3.834531,9.839877,-2.388226,9.725669,0.241519,9.756532,8.515236],[5.295363,-0.817397,4.176714,7.127122,1.962439,5.503822,0.565370,1.759178,3.373841],[4.351448,0.985620,-1.358067,-9.104344,-0.912329,-4.161401,1.418804,9.850576,-1.207442]],[[5.329201,9.238001,2.544420,4.740335,-3.428193,9.215086,6.782571,0.410015,-7.829041],[2.223088,2.104405,-6.456306,3.672987,4.950648,-7.007807,7.783378,-3.982294,-2.250028],[-1.634873,-7.321559,0.992539,-9.321991,2.028738,7.876732,-5.445454,-6.965194,-2.944950],[2.133338,-0.489622,-9.281372,1.481291,-9.320234,-3.469860,1.822480,-7.613632,-1.493000],[1.256382,-6.721859,-5.464681,-5.332733,-8.636019,-7.633584,-0.538596,-6.593999,-9.461237],[6.831846,2.662348,7.062700,-4.940605,-2.298795,1.225309,-0.177089,5.192908,5.751964],[-3.490974,-3.985112,-2.046282,6.896703,8.861055,4.615152,3.536420,0.009633,-8.914029],[-1.116395,4.477081,4.804188,5.279906,1.037796,6.089055,-5.530419,-4.806893,-3.528961],[7.497974,9.020164,-0.298075,2.901673,5.282222,-8.341159,9.011890,1.395225,6.606631],[8.475902,-5.044947,9.977615,2.447779,-5.085552,5.044713,-7.516620,-9.858531,1.310858],[-0.773027,-9.373900,9.946329,3.046708,-4.699408,3.316939,-4.362029,-9.705904,5.466566],[-4.959830,-8.721232,-1.982865,0.137916,-9.103319,1.137925,-1.463518,-0.203290,3.697712],[2.889241,8.248399,8.377460,2.243263,9.217626,9.779888,-4.053007,-8.546411,-1.558241],[-3.128241,5.939552,7.851875,-1.205071,4.204822,7.743109,-5.006686,1.316600,-0.058326]],[[-8.893442,-4.702877,0.443647,-3.816803,7.893761,-7.796636,4.908617,-2.671980,-5.653189],[8.489335,4.885369,5.391640,-5.850672,-5.280767,9.568667,-2.094478,-4.779584,-5.303995],[-0.996588,2.402091,8.494237,4.603573,-8.499252,3.097028,-8.571716,8.576571,6.741531],[-9.777848,-4.875622,-3.866006,4.087928,2.297222,9.718773,3.937276,-9.467754,-9.316308],[6.648590,9.838473,4.220446,-6.886311,6.836969,0.827903,-4.092945,-7.944969,-4.879196],[5.978979,-8.615261,-2.783789,-2.693693,4.891000,-8.278363,-7.096715,-9.294246,-3.677790],[-2.068877,8.423208,-0.169411,3.484028,-1.987142,-1.145085,-5.270117,-5.210738,-8.376926],[-4.162974,-8.488559,-4.396534,6.232951,-3.477094,-5.549951,7.207266,7.556229,-8.650654],[-4.572969,6.966109,-1.032200,1.015189,2.764473,6.466102,-0.415099,-4.363425,3.251557],[-3.877257,2.516684,-4.423145,3.573658,-4.150766,-5.797037,-8.926916,-2.789222,7.527667],[0.627746,9.912353,-7.285437,1.010984,5.206993,-6.572181,-4.837179,1.040558,9.427261],[4.434190,-5.062520,-7.933868,-0.435572,9.187838,-8.623823,5.043767,8.073072,-1.609571],[3.813134,7.374215,1.754704,-7.178949,-1.088393,1.659325,0.088890,-1.691846,-8.279993],[6.625014,4.727016,-2.022516,1.301048,-5.553441,-4.232848,5.258069,-1.431623,-6.630265]]], dtype = "float32")#candidate|232|(12, 14, 9)|const|float32
bop_233 = relay.greater(uop_230.astype('bool'), relay.reshape(const_232.astype('bool'), relay.shape_of(uop_230))) # shape=(12, 14, 9)
var_236 = relay.var("var_236", dtype = "bool", shape = (12, 14, 9))#candidate|236|(12, 14, 9)|var|bool
bop_237 = relay.not_equal(bop_233.astype('bool'), relay.reshape(var_236.astype('bool'), relay.shape_of(bop_233))) # shape=(12, 14, 9)
func_202_call = mod.get_global_var('func_202')
func_203_call = mutated_mod.get_global_var('func_203')
call_241 = func_202_call()
call_242 = func_202_call()
const_243 = relay.const([0.113483,-9.687104,2.922384,9.261403,4.095604,-5.088044,1.835011,-4.939876,5.914130,5.322440,4.781074,1.839312,-3.532384,1.145429], dtype = "float32")#candidate|243|(14,)|const|float32
bop_244 = relay.bitwise_xor(call_241.astype('uint32'), relay.reshape(const_243.astype('uint32'), relay.shape_of(call_241))) # shape=(14,)
bop_247 = relay.bitwise_xor(call_242.astype('uint32'), relay.reshape(const_243.astype('uint32'), relay.shape_of(call_242))) # shape=(14,)
func_33_call = mod.get_global_var('func_33')
func_39_call = mutated_mod.get_global_var('func_39')
var_251 = relay.var("var_251", dtype = "float32", shape = (10, 117))#candidate|251|(10, 117)|var|float32
call_250 = relay.TupleGetItem(func_33_call(relay.reshape(var_251.astype('float32'), [13, 6, 15]), relay.reshape(var_251.astype('float32'), [13, 6, 15]), relay.reshape(var_251.astype('float64'), [13, 6, 15]), relay.reshape(var_251.astype('bool'), [13, 6, 15]), ), 3)
call_252 = relay.TupleGetItem(func_39_call(relay.reshape(var_251.astype('float32'), [13, 6, 15]), relay.reshape(var_251.astype('float32'), [13, 6, 15]), relay.reshape(var_251.astype('float64'), [13, 6, 15]), relay.reshape(var_251.astype('bool'), [13, 6, 15]), ), 3)
bop_253 = relay.bitwise_or(bop_233.astype('uint64'), relay.reshape(var_229.astype('uint64'), relay.shape_of(bop_233))) # shape=(12, 14, 9)
bop_256 = relay.less_equal(uop_230.astype('bool'), relay.reshape(bop_253.astype('bool'), relay.shape_of(uop_230))) # shape=(12, 14, 9)
bop_259 = relay.divide(bop_256.astype('float64'), relay.reshape(var_236.astype('float64'), relay.shape_of(bop_256))) # shape=(12, 14, 9)
uop_262 = relay.log2(bop_259.astype('float32')) # shape=(12, 14, 9)
output = relay.Tuple([bop_237,bop_244,call_250,var_251,uop_262,])
output2 = relay.Tuple([bop_237,bop_247,call_252,var_251,uop_262,])
func_264 = relay.Function([var_229,var_236,var_251,], output)
mod['func_264'] = func_264
mod = relay.transform.InferType()(mod)
var_265 = relay.var("var_265", dtype = "float32", shape = (12, 14, 9))#candidate|265|(12, 14, 9)|var|float32
var_266 = relay.var("var_266", dtype = "bool", shape = (12, 14, 9))#candidate|266|(12, 14, 9)|var|bool
var_267 = relay.var("var_267", dtype = "float32", shape = (10, 117))#candidate|267|(10, 117)|var|float32
output = func_264(var_265,var_266,var_267,)
func_268 = relay.Function([var_265,var_266,var_267,], output)
mutated_mod['func_268'] = func_268
mutated_mod = relay.transform.InferType()(mutated_mod)
var_270 = relay.var("var_270", dtype = "uint32", shape = (7, 11, 1))#candidate|270|(7, 11, 1)|var|uint32
var_271 = relay.var("var_271", dtype = "uint32", shape = (7, 11, 4))#candidate|271|(7, 11, 4)|var|uint32
bop_272 = relay.bitwise_and(var_270.astype('uint32'), var_271.astype('uint32')) # shape=(7, 11, 4)
uop_275 = relay.sinh(var_270.astype('float32')) # shape=(7, 11, 1)
uop_277 = relay.atan(uop_275.astype('float32')) # shape=(7, 11, 1)
output = relay.Tuple([bop_272,uop_277,])
output2 = relay.Tuple([bop_272,uop_277,])
func_281 = relay.Function([var_270,var_271,], output)
mod['func_281'] = func_281
mod = relay.transform.InferType()(mod)
var_282 = relay.var("var_282", dtype = "uint32", shape = (7, 11, 1))#candidate|282|(7, 11, 1)|var|uint32
var_283 = relay.var("var_283", dtype = "uint32", shape = (7, 11, 4))#candidate|283|(7, 11, 4)|var|uint32
output = func_281(var_282,var_283,)
func_284 = relay.Function([var_282,var_283,], output)
mutated_mod['func_284'] = func_284
mutated_mod = relay.transform.InferType()(mutated_mod)
var_286 = relay.var("var_286", dtype = "int16", shape = (5, 13, 7))#candidate|286|(5, 13, 7)|var|int16
const_287 = relay.const([[[1,8,-8,7,-3,-8,5],[-9,4,6,3,8,4,-6],[1,6,-4,3,1,8,8],[2,3,10,-3,9,-2,6],[8,-3,-7,-3,5,5,-8],[10,8,1,3,-1,10,2],[10,10,-9,-6,-3,-9,9],[-4,6,-4,6,-8,-9,-7],[10,10,7,-7,-2,5,4],[-4,10,9,-4,2,10,-2],[6,9,9,5,1,2,-5],[-9,-5,-1,2,10,-2,-9],[10,-1,-1,6,2,-5,3]],[[6,-6,-8,-1,5,6,-1],[-8,1,2,-8,-4,10,-6],[-1,-2,-1,-4,-1,-6,8],[2,10,-2,9,5,-4,4],[7,8,-10,-4,1,10,3],[-8,7,10,9,-10,-3,-10],[6,-10,-3,-10,1,6,2],[-3,9,5,1,-5,7,-3],[-2,1,6,-2,10,-5,-6],[4,-4,-2,-8,3,2,2],[-5,4,-9,-7,6,5,1],[-8,9,-4,9,-10,-3,-8],[10,6,6,-5,5,-9,1]],[[-9,-6,-9,9,9,-1,6],[-1,9,-4,-9,7,5,-5],[-4,-2,1,2,-2,5,-10],[2,10,-8,-7,6,-5,7],[8,8,-10,-9,-8,-1,3],[-4,2,-8,-9,3,-1,1],[5,-5,2,7,4,3,6],[-2,3,1,-10,-10,-5,7],[2,-3,-6,10,-4,9,4],[9,7,-8,-5,-6,7,-6],[-8,10,10,9,-2,3,-9],[-3,6,10,1,-4,6,-3],[-7,-5,3,7,9,-1,-6]],[[-6,-9,-5,-10,8,4,10],[-5,2,4,-9,7,4,3],[-8,2,-3,4,7,6,5],[-9,-9,-8,8,-2,-10,-2],[-4,10,3,5,-4,-5,-3],[6,10,-1,-2,2,2,7],[-3,-6,2,-9,9,-1,5],[6,7,-3,9,-8,4,1],[3,8,4,3,2,-1,7],[6,9,9,-3,-5,-8,-3],[2,-8,9,1,10,9,5],[2,3,-4,-1,-10,-5,7],[7,-8,4,-4,-10,4,8]],[[-1,-5,-4,3,1,-1,8],[-4,-3,-7,-10,5,-1,6],[6,-1,6,1,4,-10,-6],[4,8,9,10,2,-6,-3],[-5,-6,-2,9,-5,-10,2],[4,8,2,-9,-9,8,9],[10,2,-1,-8,5,3,-8],[9,-10,10,2,-5,-4,9],[8,9,-8,-5,1,-3,9],[-8,-6,8,1,-3,-9,-3],[-5,-8,-10,2,10,-8,1],[7,7,8,4,7,-4,-8],[1,10,6,2,7,-6,1]]], dtype = "int16")#candidate|287|(5, 13, 7)|const|int16
bop_288 = relay.multiply(var_286.astype('int16'), relay.reshape(const_287.astype('int16'), relay.shape_of(var_286))) # shape=(5, 13, 7)
var_291 = relay.var("var_291", dtype = "int16", shape = (5, 13, 7))#candidate|291|(5, 13, 7)|var|int16
bop_292 = relay.right_shift(bop_288.astype('int8'), relay.reshape(var_291.astype('int8'), relay.shape_of(bop_288))) # shape=(5, 13, 7)
const_295 = relay.const([[[2,1,7,6,10,-6,1],[-3,-3,-2,4,10,-10,2],[-8,7,2,5,3,-5,5],[10,-5,2,9,6,-2,1],[5,-7,-10,2,-2,3,-6],[-8,4,-4,3,6,-10,7],[-9,5,-2,6,9,-5,-4],[-8,-9,-9,6,-1,-1,-3],[1,4,6,1,-4,-9,-6],[-3,3,9,8,4,-5,-3],[3,-9,5,2,5,-9,-2],[-9,3,7,3,-7,-7,-5],[7,9,5,4,-3,1,-10]],[[8,-1,10,-9,1,4,3],[10,-2,-5,8,-2,9,-9],[-5,3,10,-10,-9,7,3],[7,-1,-3,7,-7,-7,7],[4,8,-4,-5,-4,-3,8],[-2,-1,8,-9,8,-10,-3],[4,4,-8,1,3,6,-3],[-2,-1,3,-7,-6,1,-2],[-9,-7,-5,-4,3,-4,-3],[6,1,8,-4,4,1,8],[5,2,-7,8,-2,-6,10],[-3,-2,9,-7,-5,-8,-4],[8,1,-4,-7,4,2,2]],[[10,7,4,-2,-3,2,4],[7,-8,-10,8,4,2,3],[-3,-1,6,8,-9,5,-1],[-10,-6,3,-1,5,-6,7],[4,-3,6,1,3,-3,10],[-6,6,8,-2,8,-5,-5],[1,-10,-5,-3,6,-4,-3],[-3,9,-6,5,9,-6,-3],[9,5,-3,6,-7,-8,4],[3,-10,-10,6,-4,-1,-10],[-9,9,4,-9,-8,-4,5],[-1,-5,4,-1,-4,10,9],[10,-8,4,-8,-3,5,5]],[[10,3,-9,-6,-6,9,5],[10,3,-5,1,-2,8,-10],[-9,-6,5,10,10,6,2],[-7,-7,1,9,2,-7,-2],[10,-10,7,7,7,-5,-1],[2,8,-10,-8,-4,-1,8],[-9,-3,-2,-7,10,2,-3],[-4,-8,10,10,1,-5,5],[-1,1,5,8,-6,-8,-3],[6,7,-10,8,1,10,-4],[-6,8,-3,-7,3,-6,2],[-7,-4,1,-3,-6,-9,-7],[-10,-3,-3,2,-1,4,6]],[[-5,6,5,5,3,5,10],[-10,-2,-9,5,-7,8,7],[2,-6,4,-8,-3,-5,4],[-8,3,-1,-8,-1,2,3],[-5,-4,6,3,3,8,-6],[-4,2,-3,2,9,4,-3],[9,-8,6,3,-3,1,8],[10,4,-4,-8,1,-3,-7],[4,5,6,8,-5,-6,-7],[-4,10,-1,-8,1,4,-5],[4,-5,-4,2,4,-3,-2],[9,8,6,-7,-2,-2,2],[-7,-4,-9,-1,-1,-2,-4]]], dtype = "int16")#candidate|295|(5, 13, 7)|const|int16
bop_296 = relay.left_shift(const_287.astype('uint16'), relay.reshape(const_295.astype('uint16'), relay.shape_of(const_287))) # shape=(5, 13, 7)
bop_303 = relay.bitwise_and(bop_296.astype('uint64'), relay.reshape(bop_292.astype('uint64'), relay.shape_of(bop_296))) # shape=(5, 13, 7)
output = bop_303
output2 = bop_303
func_307 = relay.Function([var_286,var_291,], output)
mod['func_307'] = func_307
mod = relay.transform.InferType()(mod)
mutated_mod['func_307'] = func_307
mutated_mod = relay.transform.InferType()(mutated_mod)
func_307_call = mutated_mod.get_global_var('func_307')
var_309 = relay.var("var_309", dtype = "int16", shape = (5, 13, 7))#candidate|309|(5, 13, 7)|var|int16
var_310 = relay.var("var_310", dtype = "int16", shape = (5, 13, 7))#candidate|310|(5, 13, 7)|var|int16
call_308 = func_307_call(var_309,var_310,)
output = call_308
func_311 = relay.Function([var_309,var_310,], output)
mutated_mod['func_311'] = func_311
mutated_mod = relay.transform.InferType()(mutated_mod)
var_313 = relay.var("var_313", dtype = "float32", shape = (4, 3, 1))#candidate|313|(4, 3, 1)|var|float32
uop_314 = relay.asin(var_313.astype('float32')) # shape=(4, 3, 1)
bop_318 = relay.greater_equal(uop_314.astype('bool'), relay.reshape(var_313.astype('bool'), relay.shape_of(uop_314))) # shape=(4, 3, 1)
const_321 = relay.const([[[-6.120868,-3.200570,3.747122,7.474107,-4.626331,9.068049,0.589318,-9.387716],[-4.362999,-0.814645,8.469666,-9.953440,4.780605,2.278258,-4.756019,-8.329191],[-2.579367,-0.946076,8.339749,-5.968275,-4.713258,-9.420924,9.212906,7.467428]],[[9.705868,-1.695875,-0.700468,0.677412,4.771681,-0.320517,-8.286295,-9.087111],[7.240556,-5.067265,-0.453220,-4.165202,-2.383663,-1.223184,9.898929,9.686946],[0.740790,1.213418,-0.483800,1.558197,-7.007259,8.130100,-2.623494,4.620067]],[[8.678802,-5.128617,3.402139,-1.365269,4.790166,1.098423,-2.837582,-3.167221],[-9.625326,-6.497227,-8.397430,-0.362930,2.661942,4.293565,8.213272,2.374990],[-7.988793,-4.743529,-6.410618,7.746757,-1.012832,-1.209788,7.010163,-5.859341]],[[-5.024917,-2.752853,7.415218,9.676903,5.510962,-5.833022,-4.139471,5.626933],[-0.387935,-5.884008,-7.232408,-8.855921,-6.409414,-3.840890,0.413861,5.439980],[5.564330,1.138038,-8.995671,7.517108,3.123074,-6.576400,8.725111,4.376730]]], dtype = "float32")#candidate|321|(4, 3, 8)|const|float32
bop_322 = relay.right_shift(uop_314.astype('uint64'), const_321.astype('uint64')) # shape=(4, 3, 8)
bop_327 = relay.greater(uop_314.astype('bool'), relay.reshape(var_313.astype('bool'), relay.shape_of(uop_314))) # shape=(4, 3, 1)
func_127_call = mod.get_global_var('func_127')
func_131_call = mutated_mod.get_global_var('func_131')
var_331 = relay.var("var_331", dtype = "uint32", shape = (32, 4))#candidate|331|(32, 4)|var|uint32
var_332 = relay.var("var_332", dtype = "float32", shape = (256,))#candidate|332|(256,)|var|float32
call_330 = relay.TupleGetItem(func_127_call(relay.reshape(var_331.astype('uint32'), [128,]), relay.reshape(var_332.astype('float32'), [256,]), ), 1)
call_333 = relay.TupleGetItem(func_131_call(relay.reshape(var_331.astype('uint32'), [128,]), relay.reshape(var_332.astype('float32'), [256,]), ), 1)
uop_334 = relay.sqrt(call_330.astype('float64')) # shape=(128,)
uop_336 = relay.sqrt(call_333.astype('float64')) # shape=(128,)
uop_337 = relay.log2(bop_327.astype('float64')) # shape=(4, 3, 1)
bop_339 = relay.less(uop_337.astype('bool'), call_330.astype('bool')) # shape=(4, 3, 128)
bop_342 = relay.less(uop_337.astype('bool'), call_333.astype('bool')) # shape=(4, 3, 128)
uop_343 = relay.sigmoid(uop_337.astype('float64')) # shape=(4, 3, 1)
uop_345 = relay.sinh(bop_339.astype('float32')) # shape=(4, 3, 128)
uop_347 = relay.sinh(bop_342.astype('float32')) # shape=(4, 3, 128)
output = relay.Tuple([bop_318,bop_322,var_331,var_332,uop_334,uop_343,uop_345,])
output2 = relay.Tuple([bop_318,bop_322,var_331,var_332,uop_336,uop_343,uop_347,])
func_348 = relay.Function([var_313,var_331,var_332,], output)
mod['func_348'] = func_348
mod = relay.transform.InferType()(mod)
mutated_mod['func_348'] = func_348
mutated_mod = relay.transform.InferType()(mutated_mod)
func_348_call = mutated_mod.get_global_var('func_348')
var_350 = relay.var("var_350", dtype = "float32", shape = (4, 3, 1))#candidate|350|(4, 3, 1)|var|float32
var_351 = relay.var("var_351", dtype = "uint32", shape = (32, 4))#candidate|351|(32, 4)|var|uint32
var_352 = relay.var("var_352", dtype = "float32", shape = (256,))#candidate|352|(256,)|var|float32
call_349 = func_348_call(var_350,var_351,var_352,)
output = call_349
func_353 = relay.Function([var_350,var_351,var_352,], output)
mutated_mod['func_353'] = func_353
mutated_mod = relay.transform.InferType()(mutated_mod)
func_202_call = mod.get_global_var('func_202')
func_203_call = mutated_mod.get_global_var('func_203')
call_355 = func_202_call()
call_356 = func_202_call()
uop_357 = relay.rsqrt(call_355.astype('float32')) # shape=(14,)
uop_359 = relay.rsqrt(call_356.astype('float32')) # shape=(14,)
bop_360 = relay.mod(call_355.astype('float32'), relay.reshape(uop_357.astype('float32'), relay.shape_of(call_355))) # shape=(14,)
bop_363 = relay.mod(call_356.astype('float32'), relay.reshape(uop_359.astype('float32'), relay.shape_of(call_356))) # shape=(14,)
bop_364 = relay.greater_equal(uop_357.astype('bool'), relay.reshape(bop_360.astype('bool'), relay.shape_of(uop_357))) # shape=(14,)
bop_367 = relay.greater_equal(uop_359.astype('bool'), relay.reshape(bop_363.astype('bool'), relay.shape_of(uop_359))) # shape=(14,)
uop_369 = relay.cos(bop_360.astype('float32')) # shape=(14,)
uop_371 = relay.cos(bop_363.astype('float32')) # shape=(14,)
bop_372 = relay.greater(uop_357.astype('bool'), relay.reshape(bop_360.astype('bool'), relay.shape_of(uop_357))) # shape=(14,)
bop_375 = relay.greater(uop_359.astype('bool'), relay.reshape(bop_363.astype('bool'), relay.shape_of(uop_359))) # shape=(14,)
bop_378 = relay.right_shift(uop_369.astype('uint64'), relay.reshape(uop_357.astype('uint64'), relay.shape_of(uop_369))) # shape=(14,)
bop_381 = relay.right_shift(uop_371.astype('uint64'), relay.reshape(uop_359.astype('uint64'), relay.shape_of(uop_371))) # shape=(14,)
uop_382 = relay.log10(uop_357.astype('float32')) # shape=(14,)
uop_384 = relay.log10(uop_359.astype('float32')) # shape=(14,)
bop_385 = relay.not_equal(call_355.astype('bool'), relay.reshape(uop_369.astype('bool'), relay.shape_of(call_355))) # shape=(14,)
bop_388 = relay.not_equal(call_356.astype('bool'), relay.reshape(uop_371.astype('bool'), relay.shape_of(call_356))) # shape=(14,)
bop_393 = relay.bitwise_xor(bop_360.astype('uint8'), relay.reshape(bop_364.astype('uint8'), relay.shape_of(bop_360))) # shape=(14,)
bop_396 = relay.bitwise_xor(bop_363.astype('uint8'), relay.reshape(bop_367.astype('uint8'), relay.shape_of(bop_363))) # shape=(14,)
uop_399 = relay.sqrt(uop_382.astype('float64')) # shape=(14,)
uop_401 = relay.sqrt(uop_384.astype('float64')) # shape=(14,)
bop_405 = relay.multiply(uop_399.astype('int32'), relay.reshape(call_355.astype('int32'), relay.shape_of(uop_399))) # shape=(14,)
bop_408 = relay.multiply(uop_401.astype('int32'), relay.reshape(call_356.astype('int32'), relay.shape_of(uop_401))) # shape=(14,)
uop_410 = relay.atanh(bop_405.astype('float64')) # shape=(14,)
uop_412 = relay.atanh(bop_408.astype('float64')) # shape=(14,)
var_413 = relay.var("var_413", dtype = "float64", shape = (14,))#candidate|413|(14,)|var|float64
bop_414 = relay.power(uop_399.astype('float32'), relay.reshape(var_413.astype('float32'), relay.shape_of(uop_399))) # shape=(14,)
bop_417 = relay.power(uop_401.astype('float32'), relay.reshape(var_413.astype('float32'), relay.shape_of(uop_401))) # shape=(14,)
uop_418 = relay.acosh(uop_410.astype('float32')) # shape=(14,)
uop_420 = relay.acosh(uop_412.astype('float32')) # shape=(14,)
bop_421 = relay.equal(uop_410.astype('bool'), relay.reshape(uop_369.astype('bool'), relay.shape_of(uop_410))) # shape=(14,)
bop_424 = relay.equal(uop_412.astype('bool'), relay.reshape(uop_371.astype('bool'), relay.shape_of(uop_412))) # shape=(14,)
uop_425 = relay.tan(uop_418.astype('float64')) # shape=(14,)
uop_427 = relay.tan(uop_420.astype('float64')) # shape=(14,)
bop_428 = relay.divide(uop_418.astype('float32'), relay.reshape(bop_372.astype('float32'), relay.shape_of(uop_418))) # shape=(14,)
bop_431 = relay.divide(uop_420.astype('float32'), relay.reshape(bop_375.astype('float32'), relay.shape_of(uop_420))) # shape=(14,)
bop_434 = relay.left_shift(uop_425.astype('int8'), relay.reshape(bop_378.astype('int8'), relay.shape_of(uop_425))) # shape=(14,)
bop_437 = relay.left_shift(uop_427.astype('int8'), relay.reshape(bop_381.astype('int8'), relay.shape_of(uop_427))) # shape=(14,)
uop_439 = relay.sinh(bop_385.astype('float64')) # shape=(14,)
uop_441 = relay.sinh(bop_388.astype('float64')) # shape=(14,)
bop_446 = relay.minimum(bop_434.astype('int16'), relay.reshape(bop_428.astype('int16'), relay.shape_of(bop_434))) # shape=(14,)
bop_449 = relay.minimum(bop_437.astype('int16'), relay.reshape(bop_431.astype('int16'), relay.shape_of(bop_437))) # shape=(14,)
bop_451 = relay.bitwise_and(bop_446.astype('uint8'), relay.reshape(bop_405.astype('uint8'), relay.shape_of(bop_446))) # shape=(14,)
bop_454 = relay.bitwise_and(bop_449.astype('uint8'), relay.reshape(bop_408.astype('uint8'), relay.shape_of(bop_449))) # shape=(14,)
bop_459 = relay.equal(bop_451.astype('bool'), relay.reshape(bop_434.astype('bool'), relay.shape_of(bop_451))) # shape=(14,)
bop_462 = relay.equal(bop_454.astype('bool'), relay.reshape(bop_437.astype('bool'), relay.shape_of(bop_454))) # shape=(14,)
var_463 = relay.var("var_463", dtype = "int16", shape = (14,))#candidate|463|(14,)|var|int16
bop_464 = relay.left_shift(bop_446.astype('uint64'), relay.reshape(var_463.astype('uint64'), relay.shape_of(bop_446))) # shape=(14,)
bop_467 = relay.left_shift(bop_449.astype('uint64'), relay.reshape(var_463.astype('uint64'), relay.shape_of(bop_449))) # shape=(14,)
uop_468 = relay.cosh(bop_446.astype('float64')) # shape=(14,)
uop_470 = relay.cosh(bop_449.astype('float64')) # shape=(14,)
output = relay.Tuple([bop_393,bop_414,bop_421,uop_439,bop_459,bop_464,uop_468,])
output2 = relay.Tuple([bop_396,bop_417,bop_424,uop_441,bop_462,bop_467,uop_470,])
func_471 = relay.Function([var_413,var_463,], output)
mod['func_471'] = func_471
mod = relay.transform.InferType()(mod)
mutated_mod['func_471'] = func_471
mutated_mod = relay.transform.InferType()(mutated_mod)
func_471_call = mutated_mod.get_global_var('func_471')
var_473 = relay.var("var_473", dtype = "float64", shape = (14,))#candidate|473|(14,)|var|float64
var_474 = relay.var("var_474", dtype = "int16", shape = (14,))#candidate|474|(14,)|var|int16
call_472 = func_471_call(var_473,var_474,)
output = call_472
func_475 = relay.Function([var_473,var_474,], output)
mutated_mod['func_475'] = func_475
mutated_mod = relay.transform.InferType()(mutated_mod)
var_490 = relay.var("var_490", dtype = "float64", shape = ())#candidate|490|()|var|float64
var_491 = relay.var("var_491", dtype = "float64", shape = (7,))#candidate|491|(7,)|var|float64
bop_492 = relay.equal(var_490.astype('bool'), var_491.astype('bool')) # shape=(7,)
bop_497 = relay.logical_xor(bop_492.astype('int8'), var_490.astype('int8')) # shape=(7,)
uop_500 = relay.atan(var_491.astype('float32')) # shape=(7,)
bop_504 = relay.maximum(uop_500.astype('uint8'), relay.reshape(bop_497.astype('uint8'), relay.shape_of(uop_500))) # shape=(7,)
bop_509 = relay.divide(var_491.astype('float64'), relay.reshape(bop_497.astype('float64'), relay.shape_of(var_491))) # shape=(7,)
bop_512 = relay.maximum(bop_497.astype('float64'), relay.reshape(var_491.astype('float64'), relay.shape_of(bop_497))) # shape=(7,)
func_202_call = mod.get_global_var('func_202')
func_203_call = mutated_mod.get_global_var('func_203')
call_519 = func_202_call()
call_520 = func_202_call()
uop_521 = relay.acos(uop_500.astype('float64')) # shape=(7,)
bop_523 = relay.maximum(uop_521.astype('uint64'), relay.reshape(uop_500.astype('uint64'), relay.shape_of(uop_521))) # shape=(7,)
bop_527 = relay.floor_mod(uop_521.astype('float64'), relay.reshape(uop_500.astype('float64'), relay.shape_of(uop_521))) # shape=(7,)
bop_530 = relay.left_shift(uop_500.astype('uint16'), relay.reshape(bop_523.astype('uint16'), relay.shape_of(uop_500))) # shape=(7,)
uop_533 = relay.asin(bop_523.astype('float32')) # shape=(7,)
uop_535 = relay.sinh(uop_533.astype('float64')) # shape=(7,)
bop_537 = relay.subtract(uop_535.astype('uint32'), relay.reshape(uop_500.astype('uint32'), relay.shape_of(uop_535))) # shape=(7,)
output = relay.Tuple([bop_504,bop_509,bop_512,call_519,bop_527,bop_530,bop_537,])
output2 = relay.Tuple([bop_504,bop_509,bop_512,call_520,bop_527,bop_530,bop_537,])
F = relay.Function([var_490,var_491,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_490,var_491,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_490= np.array(-0.694769, dtype='float64')
module1.set_input('var_490', input_490)
input_491= np.array([-9.301222,9.651658,2.029365,-2.156519,4.318581,3.330273,1.136837], dtype='float64')
module1.set_input('var_491', input_491)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_490, input_491, )
res3 = intrp3.evaluate()(input_490, input_491, )
res4 = intrp4.evaluate()(input_490, input_491, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
module5.set_input('var_490', input_490)
module5.set_input('var_491', input_491)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_490, input_491, )
res7 = intrp7.evaluate()(input_490, input_491, )
res8 = intrp8.evaluate()(input_490, input_491, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
module9.set_input('var_490', input_490)
module9.set_input('var_491', input_491)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_490, input_491, )
res11 = intrp11.evaluate()(input_490, input_491, )
res12 = intrp12.evaluate()(input_490, input_491, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
module13.set_input('var_490', input_490)
module13.set_input('var_491', input_491)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_490, input_491, )
res15 = intrp15.evaluate()(input_490, input_491, )
res16 = intrp16.evaluate()(input_490, input_491, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
module17.set_input('var_490', input_490)
module17.set_input('var_491', input_491)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_490, input_491, )
res19 = intrp19.evaluate()(input_490, input_491, )
res20 = intrp20.evaluate()(input_490, input_491, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
module21.set_input('var_490', input_490)
module21.set_input('var_491', input_491)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_490, input_491, )
res23 = intrp23.evaluate()(input_490, input_491, )
res24 = intrp24.evaluate()(input_490, input_491, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()

'''6: TVMFuncCall
5: _ZNSt17_Function_handlerIFvN3tvm7runtime7
4: tvm::runtime::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const [clone .isra.808]
3: tvm::runtime::GraphExecutorCreate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module const&, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
2: tvm::runtime::GraphExecutor::Init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
1: tvm::runtime::GraphExecutor::SetupOpExecs()
0: tvm::runtime::GraphExecutor::CreateTVMOp(tvm::runtime::TVMOpParam const&, std::vector<DLTensor, std::allocator<DLTensor> > const&)

'''