import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_123 = relay.var("var_123", dtype = "float32", shape = (8, 13, 11))#candidate|123|(8, 13, 11)|var|float32
uop_124 = relay.exp(var_123.astype('float32')) # shape=(8, 13, 11)
output = relay.Tuple([uop_124,])
output2 = relay.Tuple([uop_124,])
func_129 = relay.Function([var_123,], output)
mod['func_129'] = func_129
mod = relay.transform.InferType()(mod)
mutated_mod['func_129'] = func_129
mutated_mod = relay.transform.InferType()(mutated_mod)
var_130 = relay.var("var_130", dtype = "float32", shape = (8, 13, 11))#candidate|130|(8, 13, 11)|var|float32
func_129_call = mutated_mod.get_global_var('func_129')
call_131 = func_129_call(var_130)
output = call_131
func_132 = relay.Function([var_130], output)
mutated_mod['func_132'] = func_132
mutated_mod = relay.transform.InferType()(mutated_mod)
var_159 = relay.var("var_159", dtype = "float32", shape = (6, 1, 14))#candidate|159|(6, 1, 14)|var|float32
var_160 = relay.var("var_160", dtype = "float32", shape = (6, 6, 14))#candidate|160|(6, 6, 14)|var|float32
bop_161 = relay.floor_divide(var_159.astype('float32'), var_160.astype('float32')) # shape=(6, 6, 14)
var_167 = relay.var("var_167", dtype = "float32", shape = (6, 6, 14))#candidate|167|(6, 6, 14)|var|float32
bop_168 = relay.logical_or(bop_161.astype('bool'), relay.reshape(var_167.astype('bool'), relay.shape_of(bop_161))) # shape=(6, 6, 14)
const_175 = relay.const([[[-3.877672,2.048873,-3.028514,-8.908705,0.060139,7.282499,2.779433,-8.596278,-3.224862,7.879649,-2.557498,-7.915425,8.223808,-0.074623],[3.374031,0.970038,-5.868815,-5.332398,-8.918455,2.003272,3.613358,-9.935128,4.734656,1.000358,-0.313550,-1.249167,-0.073629,2.208443],[-8.196105,7.383340,7.305505,-1.119661,6.071150,0.095809,9.066242,2.050382,0.282691,-1.299409,-9.000007,-2.148532,-4.735856,-1.022480]],[[9.633182,-9.571175,3.155981,-5.781360,-9.485272,-7.546375,9.468474,-3.326901,-6.432613,4.054371,2.673664,3.407760,4.402594,-1.657099],[-9.391136,1.649759,-3.385052,-0.424104,1.319804,0.622763,6.837181,8.514874,8.069564,4.737123,3.976090,0.602329,-7.900741,-8.990962],[-7.786388,-2.128566,8.761892,-4.205891,7.126181,5.856275,2.847440,2.763016,-9.189231,-0.638210,-3.060535,-9.506216,-1.788042,-0.497962]],[[-0.374690,2.841624,1.297580,2.150386,1.457149,-1.104933,-3.511075,4.601672,-3.306118,-8.722610,7.923022,-0.060776,1.601927,6.811739],[-9.670606,-2.633676,-1.316900,3.816636,8.718252,6.212323,2.345100,-2.502177,1.606086,2.487763,-5.186035,1.465276,-1.826065,4.204489],[-8.216908,-0.344516,-8.961346,6.249610,-5.003309,-9.732108,7.019842,-6.442421,0.968461,9.635049,-6.031514,1.643309,-9.326813,-8.978826]],[[-9.994841,-8.996131,-7.342610,-0.388859,-6.706679,2.652847,-9.200832,-4.488762,6.947493,-4.595884,9.529690,-0.615191,7.581901,-4.217872],[-6.924884,-5.821043,-2.261852,2.585859,4.519134,9.401356,5.260624,-3.628565,-8.281536,3.602346,8.359363,9.087620,1.551561,-7.569679],[3.239767,6.218348,5.380308,-6.062752,-7.988734,-9.054943,8.107441,3.283679,3.339116,4.851353,3.197784,8.575782,-8.629620,9.660144]],[[-0.030232,-9.313445,9.110320,8.810449,-1.262253,-5.429483,3.495351,-6.720900,3.252366,7.046370,-4.926004,-5.544436,-4.303577,-4.265271],[-2.445107,-1.955571,-2.521630,-3.719980,-6.844408,-0.109844,-1.008177,-5.313239,-4.893534,-3.041114,-7.535349,-5.842198,-6.758599,-1.715806],[-9.434020,-9.835002,8.056711,-1.412187,7.049430,3.544012,-2.855126,-5.608615,-6.179548,3.725497,-8.077455,-4.701547,9.401809,7.534191]],[[-0.991795,-8.033194,-8.821138,1.752345,-1.055236,9.982955,9.373648,6.734066,3.380131,-6.746224,-8.622755,-2.143241,9.224152,-0.512792],[2.855830,4.709362,5.577962,-7.733882,-8.619335,0.543320,9.863777,-7.279920,1.549911,8.572110,-1.349237,1.555104,0.868246,8.294110],[-6.651144,2.780651,1.848539,3.910325,9.618211,-4.144375,-7.703350,-0.321347,4.546608,-6.335443,-3.577926,4.774173,1.840516,-9.238851]]], dtype = "float32")#candidate|175|(6, 3, 14)|const|float32
bop_176 = relay.minimum(var_159.astype('uint16'), const_175.astype('uint16')) # shape=(6, 3, 14)
uop_181 = relay.atan(bop_168.astype('float32')) # shape=(6, 6, 14)
func_129_call = mod.get_global_var('func_129')
func_132_call = mutated_mod.get_global_var('func_132')
var_185 = relay.var("var_185", dtype = "float32", shape = (1144,))#candidate|185|(1144,)|var|float32
call_184 = relay.TupleGetItem(func_129_call(relay.reshape(var_185.astype('float32'), [8, 13, 11])), 0)
call_186 = relay.TupleGetItem(func_132_call(relay.reshape(var_185.astype('float32'), [8, 13, 11])), 0)
const_192 = relay.const([[[-6.083480,-9.586127,-1.770035,2.039136,-2.264477,3.515117,-7.538411,4.239313,3.429385,-0.741438,3.549487,4.941266,1.566335,-2.654204],[9.419782,6.069707,7.911524,0.324392,-2.308653,-3.311952,5.592388,0.249930,2.761725,3.986648,3.096786,5.879495,-4.849678,7.839040],[7.000160,-2.640340,-8.530194,5.922283,8.826778,7.581374,6.359206,3.578814,-8.533119,-2.794696,3.436569,-5.695312,-8.284810,8.980984],[-1.315705,-3.966912,-6.780579,2.873343,2.591193,-5.657605,1.007688,-0.055913,6.654926,8.328663,-5.538362,4.701969,-9.456501,-2.245912],[7.520947,2.625272,6.872620,-3.422371,-9.070551,-8.730455,-6.913414,-1.036272,-4.572331,-1.655977,-1.311646,0.995373,5.055457,-4.801871],[-4.714610,-2.486567,-2.568241,-3.760479,-1.164959,2.471520,-7.879523,-5.007835,-0.637912,-0.720843,7.618738,-7.495111,-4.337976,9.526132]],[[-6.862901,3.781397,-9.239745,2.846436,5.872696,-6.134805,-4.540085,-5.816910,6.164870,0.585131,-2.334124,0.747892,-2.173954,2.684055],[3.226395,-9.433963,8.046439,3.228562,-6.185647,-2.919826,-1.576279,9.737989,2.261229,2.110897,-2.425389,-7.206154,-9.207997,-2.295689],[-4.420652,3.415400,-4.696989,3.441725,-4.741419,-2.653976,6.455056,-3.077931,5.158888,-4.469160,-9.530133,-6.251525,-3.449641,1.505766],[-7.013873,1.418333,4.697407,-6.254893,8.697071,6.426290,-8.658649,-5.336882,5.875855,2.115876,-2.741730,1.327336,4.701987,9.965399],[-3.579613,-4.244104,-6.864569,0.359985,9.687034,-3.530824,-2.265552,-9.701058,5.878109,-1.632077,5.832175,8.627617,-7.091121,-8.493256],[-5.772754,9.000791,-3.407186,7.595513,-8.614853,3.383185,6.798234,-2.066703,7.350348,-9.227546,6.654238,1.520654,3.337985,-0.682193]],[[3.848166,5.452084,-0.284345,2.363846,5.390012,7.467223,9.337648,1.609682,-8.561478,-3.669423,-5.607295,-5.513943,-3.925136,-9.395778],[2.392606,7.445605,-2.315833,-7.413865,8.798489,2.916584,9.206073,-6.159003,1.555040,9.184837,8.515227,-4.957228,-1.338381,5.091568],[-1.304265,-7.523631,-5.848076,0.268798,8.689672,9.407367,7.149576,2.624235,-3.233280,4.981856,7.120843,2.279072,6.104012,-7.494539],[7.267411,-0.632370,4.833553,0.260079,-7.541004,-1.614717,-8.684928,-7.895092,3.085596,-5.139685,-1.206595,0.005883,-8.503059,-8.383608],[-7.710647,-3.719168,0.345626,-8.564844,2.649677,-2.868093,-7.178180,7.247736,7.300573,-5.123975,6.606663,-8.579917,-2.850765,1.577439],[-7.549737,-2.678749,-9.507239,-7.420147,5.794448,1.962004,-0.759413,-3.493316,-7.354206,-2.661119,-3.849190,-2.708797,7.870037,3.784185]],[[3.778213,3.484581,-9.852025,-8.830061,-3.786144,-2.044286,7.940318,-2.156044,-4.479619,-3.211831,3.977964,-2.344525,2.744396,7.420356],[4.096869,9.069849,-3.606040,-1.904586,-8.467546,9.898989,-2.896943,6.042814,8.617498,3.018600,-0.079605,0.644728,-0.506373,8.381439],[-4.008323,3.744281,5.251739,-6.323644,6.125343,2.805425,-4.674887,-6.180179,-6.069765,-4.407227,5.511922,6.981538,-5.768270,4.666724],[-5.579234,-1.552155,-4.652592,-8.465762,-1.994525,6.890458,-1.959165,-5.503359,2.951857,7.911546,-4.079305,-6.543410,1.906360,6.133325],[-1.211671,0.002567,-4.574562,6.655367,9.697833,-0.322015,8.372219,6.169637,-5.381225,-2.763949,-1.195863,-7.719801,5.357189,-5.692193],[-1.590482,-1.548909,8.333628,-1.377535,-1.377951,-2.749271,4.326274,0.665204,-7.386041,-4.625576,-4.355343,-3.386959,-9.659026,3.285415]],[[6.209612,7.531148,-5.201186,-1.648457,7.288376,4.380580,9.403739,4.775084,-9.031597,0.787422,7.056865,-4.132364,-2.180925,-3.752002],[5.122874,-0.961198,1.226486,-2.072213,-7.697414,8.325890,7.975736,4.496836,-9.884013,-9.920649,8.504961,0.656023,6.098014,2.282767],[1.363199,2.943878,6.562704,2.264643,4.894440,-4.873640,0.536523,2.660893,-3.014900,0.696147,7.951791,-9.357556,7.343168,2.492749],[4.599468,-4.209989,-2.298325,2.754470,8.430332,-7.760223,-0.558046,-3.480127,4.859783,7.708481,-9.257212,-8.349692,-5.959247,1.363304],[8.563239,-0.297131,9.997551,1.156174,-9.800954,3.657601,0.117653,-0.751609,5.525213,1.633122,-6.295944,-8.226568,0.496836,-8.114784],[9.905844,8.945374,-6.268593,1.339930,-3.264565,2.384086,3.187493,0.652324,5.017564,6.561015,-1.039763,3.473760,9.925123,-5.611494]],[[-0.398566,-1.438363,-2.900849,-6.226899,3.007086,-5.585903,-4.837348,3.665793,-4.278346,9.040514,-1.011377,-6.329378,6.036242,-6.109847],[-0.907399,-9.862649,0.285741,-2.443272,-3.917861,5.698235,1.594941,-2.385884,6.541379,8.586743,-2.303540,1.392052,1.048920,7.712871],[9.642331,6.840579,-0.474343,3.754131,-3.172549,0.630147,-2.479127,0.900732,-7.735060,-8.031004,5.861125,-6.790873,-0.565998,-2.110256],[6.332050,-8.647917,0.913822,-9.387709,0.298935,-8.867077,-6.484380,8.769578,-1.886262,-0.602204,-5.999775,-5.632250,-2.164921,8.694509],[9.855752,6.728050,5.613960,4.099492,9.709692,0.672558,0.245481,6.377413,8.049472,7.857644,5.768191,1.626218,-1.887458,8.099611],[-7.402932,2.259808,-3.031828,-6.376134,-0.401179,9.584023,-3.629157,7.489917,-9.022218,8.090026,7.115138,6.229110,-0.046558,-8.660048]]], dtype = "float32")#candidate|192|(6, 6, 14)|const|float32
bop_193 = relay.minimum(uop_181.astype('int64'), relay.reshape(const_192.astype('int64'), relay.shape_of(uop_181))) # shape=(6, 6, 14)
func_129_call = mod.get_global_var('func_129')
func_132_call = mutated_mod.get_global_var('func_132')
call_197 = relay.TupleGetItem(func_129_call(relay.reshape(var_185.astype('float32'), [8, 13, 11])), 0)
call_198 = relay.TupleGetItem(func_132_call(relay.reshape(var_185.astype('float32'), [8, 13, 11])), 0)
func_129_call = mod.get_global_var('func_129')
func_132_call = mutated_mod.get_global_var('func_132')
call_199 = relay.TupleGetItem(func_129_call(relay.reshape(var_185.astype('float32'), [8, 13, 11])), 0)
call_200 = relay.TupleGetItem(func_132_call(relay.reshape(var_185.astype('float32'), [8, 13, 11])), 0)
output = relay.Tuple([bop_176,call_184,var_185,bop_193,call_197,call_199,])
output2 = relay.Tuple([bop_176,call_186,var_185,bop_193,call_198,call_200,])
func_206 = relay.Function([var_159,var_160,var_167,var_185,], output)
mod['func_206'] = func_206
mod = relay.transform.InferType()(mod)
var_207 = relay.var("var_207", dtype = "float32", shape = (6, 1, 14))#candidate|207|(6, 1, 14)|var|float32
var_208 = relay.var("var_208", dtype = "float32", shape = (6, 6, 14))#candidate|208|(6, 6, 14)|var|float32
var_209 = relay.var("var_209", dtype = "float32", shape = (6, 6, 14))#candidate|209|(6, 6, 14)|var|float32
var_210 = relay.var("var_210", dtype = "float32", shape = (1144,))#candidate|210|(1144,)|var|float32
output = func_206(var_207,var_208,var_209,var_210,)
func_211 = relay.Function([var_207,var_208,var_209,var_210,], output)
mutated_mod['func_211'] = func_211
mutated_mod = relay.transform.InferType()(mutated_mod)
var_213 = relay.var("var_213", dtype = "uint32", shape = (16, 6))#candidate|213|(16, 6)|var|uint32
var_214 = relay.var("var_214", dtype = "uint32", shape = (16, 6))#candidate|214|(16, 6)|var|uint32
bop_215 = relay.greater_equal(var_213.astype('bool'), relay.reshape(var_214.astype('bool'), relay.shape_of(var_213))) # shape=(16, 6)
output = relay.Tuple([bop_215,])
output2 = relay.Tuple([bop_215,])
func_218 = relay.Function([var_213,var_214,], output)
mod['func_218'] = func_218
mod = relay.transform.InferType()(mod)
mutated_mod['func_218'] = func_218
mutated_mod = relay.transform.InferType()(mutated_mod)
func_218_call = mutated_mod.get_global_var('func_218')
var_220 = relay.var("var_220", dtype = "uint32", shape = (16, 6))#candidate|220|(16, 6)|var|uint32
var_221 = relay.var("var_221", dtype = "uint32", shape = (16, 6))#candidate|221|(16, 6)|var|uint32
call_219 = func_218_call(var_220,var_221,)
output = call_219
func_222 = relay.Function([var_220,var_221,], output)
mutated_mod['func_222'] = func_222
mutated_mod = relay.transform.InferType()(mutated_mod)
var_236 = relay.var("var_236", dtype = "bool", shape = (12, 11, 12))#candidate|236|(12, 11, 12)|var|bool
var_237 = relay.var("var_237", dtype = "bool", shape = (12, 11, 12))#candidate|237|(12, 11, 12)|var|bool
bop_238 = relay.logical_and(var_236.astype('bool'), relay.reshape(var_237.astype('bool'), relay.shape_of(var_236))) # shape=(12, 11, 12)
uop_242 = relay.cosh(bop_238.astype('float64')) # shape=(12, 11, 12)
bop_245 = relay.bitwise_or(uop_242.astype('uint8'), relay.reshape(bop_238.astype('uint8'), relay.shape_of(uop_242))) # shape=(12, 11, 12)
func_206_call = mod.get_global_var('func_206')
func_211_call = mutated_mod.get_global_var('func_211')
var_249 = relay.var("var_249", dtype = "float32", shape = (84,))#candidate|249|(84,)|var|float32
const_250 = relay.const([-2.291459,2.485497,-1.905646,8.290108,2.635372,2.220108,-9.253470,1.541620,-3.571501,7.921720,0.874557,-2.271371,-3.858083,7.462589,-9.554301,-9.049105,1.903930,0.264201,-2.482336,1.974146,4.396942,-8.131998,-5.859189,1.740897,-1.356490,-9.787926,1.763652,4.849229,-1.046860,9.295323,7.047585,-8.893568,-6.501978,4.604339,-3.609482,-3.350919,0.417256,-4.241738,-8.511706,-6.454011,-6.364907,-2.180201,7.482912,9.310042,4.669155,-1.728214,-1.246401,4.795052,-0.081801,-1.347741,5.299782,-1.757822,3.825710,-8.958411,-3.602425,-6.323847,0.492266,-0.810086,-7.767833,0.008284,5.243534,7.128515,-2.409479,-8.818465,6.920279,9.259451,0.941705,8.151001,-7.813134,-5.211611,-9.315507,1.631134,0.050833,-6.629083,-0.842406,5.027841,1.041121,4.872983,7.317937,-9.066129,-2.435332,1.562866,6.855014,6.099497,0.641580,-6.864897,-3.691412,1.066105,-0.719355,-3.040232,6.007025,-3.145147,-1.472112,-6.296410,9.985921,-6.543136,2.260522,3.266544,-4.237372,-3.522738,-3.577198,8.602023,6.106792,-7.194206,-4.546405,-4.968640,1.207590,-4.183298,-5.412799,2.505780,5.446611,-7.040269,-5.795460,9.203262,-4.657182,-3.431061,-5.329966,6.136611,-5.464487,4.572846,-9.070867,6.360551,-5.415127,6.892275,-3.056408,-9.073478,-3.909295,-4.611084,-5.801828,4.342045,-1.247636,3.435769,8.868645,-0.054040,6.860235,-4.482127,0.935859,1.121445,1.825969,-7.062757,5.425014,0.977575,0.490818,-8.165603,4.102291,-8.992567,5.624164,8.476864,8.897870,9.830750,7.212977,-8.615447,3.439258,9.482268,3.702763,-7.187567,-4.809760,-7.845031,-0.448505,-6.571409,7.416859,4.633465,-9.878916,0.817101,-3.564582,-9.754630,4.457023,-1.759027,-5.587556,5.232865,7.045990,2.456874,-7.658821,-1.723800,-8.199953,-6.433237,0.842538,3.486801,-4.700985,5.158474,1.614909,1.523260,4.571542,6.834717,6.244909,6.257073,-8.889734,-7.774526,-0.529711,1.221478,5.332422,-1.310300,1.725676,8.825252,4.917660,-5.283280,-5.644727,6.094372,2.824012,-5.199702,6.238384,-9.919990,-8.281048,-2.292928,2.358788,2.547539,-4.899415,8.369466,1.248629,2.388823,-9.497334,9.080336,7.115105,-9.857704,7.122154,3.264615,-2.380199,6.842112,4.635386,7.622694,9.024449,7.838049,9.634162,-8.860296,0.512807,2.381148,6.672949,2.739511,8.559138,-9.742555,-2.912416,8.445631,2.192599,4.779301,6.404612,5.644282,9.428147,-0.557947,6.692882,-7.880073,-6.534371,-7.045553,-6.604085,9.643704,9.556141,4.157357,0.235513,-0.851720,1.443570,6.555093,5.819698,7.072816,-6.968821,2.174711,-4.842326,-1.305349,2.359233,6.579529,-3.720216,9.797246,-5.737307,0.766715,5.246761,-9.780523,7.182900,7.366879,-4.798346,-8.810369,-2.835079,-8.499589,9.675779,-4.834096,-7.231505,-8.673392,-8.082021,-5.226712,-3.028567,-6.260086,-1.808963,-9.237028,8.081378,-6.006227,4.322268,-7.574787,-8.026474,-0.308675,8.529934,-1.428468,-9.250413,9.957205,-1.011395,9.819664,7.013085,-6.403493,-2.849728,-9.085203,9.588704,0.940797,4.777668,-3.226646,3.157024,2.173775,2.986490,-7.321352,-7.173818,-6.972280,1.795686,-8.924689,-8.301863,-4.717288,4.955118,-4.055208,4.981993,7.445861,7.851635,-2.078895,6.940882,0.830743,0.809649,-0.929086,9.318925,-4.045713,1.377509,-9.710312,-2.740513,-4.026545,9.604364,-5.357698,8.942942,1.925955,2.298584,9.791396,7.153510,-0.275226,-8.346970,-2.828894,0.738509,-3.428806,5.773636,-9.592454,-6.708185,-3.306381,4.623990,-8.743644,-0.658155,7.575804,-7.555437,-3.624395,-2.397806,-5.078597,-5.465421,-3.261565,-0.593575,-8.246123,8.319536,0.038661,4.860152,6.012547,-1.834563,2.233591,4.954493,-2.812837,8.295932,2.980378,5.414713,-3.673988,4.676194,-6.934355,-4.010210,7.696961,0.068923,0.372823,-4.848290,-9.065290,-8.633113,-0.609849,-0.415848,0.945500,9.546491,6.506515,2.918645,-8.293078,1.715677,-9.495436,0.269469,7.813194,-7.617594,-2.454314,-0.206699,3.107978,-8.892514,-0.583755,-5.804469,2.314420,7.338959,7.981514,-0.884360,2.229516,-5.431888,1.967129,5.673538,-6.497116,8.874064,2.820990,7.392354,9.735153,-7.058828,5.904252,7.099054,-6.388667,6.392706,6.553949,-5.933450,7.862236,-9.525551,-8.461168,-9.867431,0.577498,4.919509,4.808246,0.867864,9.886818,-4.314074,0.016950,8.467836,-9.864026,1.602006,-0.801102,-1.188263,-8.142212,5.516358,0.458736,3.750353,0.132778,1.780129,-5.940507,5.291197,-8.266352,-5.266569,-8.152538,6.668349,-4.990192,-3.156463,-6.694105,6.600323,-4.997402,-0.939507,-2.027344,-4.438457,-6.043845,-3.507777,1.762437,-0.244269,6.532715,0.867200,-2.046481,0.026330,4.657660,-6.320536,-5.869725,-8.428518,-3.672687,-6.393106,-0.314391,-9.442212,-8.236982,9.953199,8.009006,5.417793,-2.219661,-4.717125,-5.899229,-0.083162,6.342147,2.977565,-3.874853,-9.617244,-4.812263,9.824579,-3.732633,-7.302966,-6.685311,-8.738943,0.369628,-5.316093,-5.407509,5.979792,-5.297422,-9.468113,-5.644918,-9.436246,0.218015,1.378922,9.196642,-0.892018,-8.247223,1.857484,1.664651,-7.832726,0.006613,-5.411083,8.991478,-9.006353,0.971708], dtype = "float32")#candidate|250|(504,)|const|float32
const_251 = relay.const([[-2.973853,-2.622087,-4.758949,3.044598,0.045634,3.913402,-4.771216,6.068379,-1.008855,-6.095177,-6.993278,9.621799,1.078036,7.894421,2.022812,3.213147,-5.466425,5.262862,-9.368842,-1.520371,4.541848,-1.330086,-9.127226,-0.445246,-4.717433,-2.110885,3.553572,9.327378,-7.646474,-9.142208,-7.951157,5.677800,-1.207341,1.943047,-7.585529,-2.779083,-8.343980,4.548981,-4.750123,5.439971,-6.222816,-2.039447,-0.833851,-5.088247,-1.680466,-2.716076,-1.993038,9.676127,-8.962302,2.589620,-0.721392,-7.986568],[-8.590701,-9.035484,-5.214489,-4.186807,7.765436,-5.227850,-6.023644,-6.029649,4.565641,2.614439,-2.455157,-7.436070,-8.815713,7.267521,-0.777662,0.111923,8.000002,5.200580,7.803891,-9.034438,-1.514810,-5.560795,2.454425,-4.350033,-6.770677,-6.927893,-8.522073,4.411452,4.543822,-2.437522,5.149427,-1.422714,6.349225,-4.905488,7.864604,6.673720,2.067906,7.040153,-0.824935,7.187368,1.140980,3.923183,6.914251,-8.767849,-2.065409,-6.546532,-3.076135,-8.105011,-3.729403,9.317900,-2.034929,-4.241046],[-4.275808,-4.017419,6.563032,0.881610,-7.457781,-4.705747,-3.740269,-6.397223,6.705205,-3.957522,2.507798,9.309328,4.361694,-4.645290,4.088433,1.933760,-4.339329,-3.988497,7.835284,-3.962584,8.015439,5.408968,-6.640525,-4.933054,-4.822580,4.310375,1.150468,-1.921627,9.718203,-7.212488,8.238130,2.377827,-6.218146,9.027788,6.888984,6.727802,-6.439978,-0.593489,-5.583464,7.422525,5.522520,-3.103621,6.868604,1.724294,6.641314,-2.991701,4.757142,-5.048273,3.474466,-9.164144,-5.896688,6.933428],[-9.678738,0.817032,-0.176154,-8.029521,3.619805,9.137163,9.193039,-3.520525,-6.916868,3.338682,-2.038013,2.046851,8.044485,-0.673688,2.403274,-8.678703,-3.718633,-6.577761,-7.303612,-4.255586,-7.446485,9.975957,5.900349,-0.776636,-9.989437,2.109749,-1.367215,-4.680668,-9.461880,3.633427,2.341422,-8.239019,2.135857,-9.827188,8.980783,1.123689,-8.121007,4.551244,-4.197349,-2.416253,6.701123,7.033829,-7.267469,0.340444,5.055977,9.277445,-7.427728,-7.027002,-6.210728,-2.118877,4.791076,7.589412],[-2.864649,2.430738,2.196258,4.672832,-5.583330,-8.076064,-8.173676,5.485876,-3.782154,-6.154865,-4.267665,-1.392663,-5.497097,-9.963654,-2.980699,5.034807,-5.795547,-2.590021,-7.924547,-3.024623,-2.839060,-1.368098,-2.666262,-4.278209,-4.169370,-7.261249,2.337874,8.029295,1.222720,-5.042594,-2.809113,-5.527012,-4.706629,-8.370397,-0.575629,7.242114,6.121564,4.251135,-7.054062,-6.477038,2.828747,4.251712,7.016723,-9.055653,7.346959,-7.714921,-7.588421,-9.624400,4.061345,-1.734144,-4.339955,3.569887],[2.558674,3.619869,-2.476162,-0.249373,-3.797807,1.852328,-5.297940,-4.037876,-2.392907,3.099053,7.879504,3.734424,-5.496245,-9.622791,-3.859950,-9.365952,3.732990,9.522933,2.304474,0.727315,8.755098,8.008531,-3.620892,8.013647,9.114792,5.200907,4.159729,4.305372,-7.815612,-4.718887,0.291087,-3.155778,-1.606806,1.068368,0.399147,-2.083509,1.261878,2.619963,9.334681,-7.561043,9.369640,-4.021090,-7.035451,2.125087,3.604622,3.420703,-1.599068,8.762903,7.216156,2.846909,1.960901,-5.680967],[5.265518,-3.747625,-3.411655,9.381706,5.933876,-4.982120,-4.695789,-2.736258,8.554845,-2.227439,-3.685794,2.524116,-5.285684,-0.790120,-6.513106,-4.102122,-0.038485,-7.881246,4.273989,8.986198,6.167065,8.397211,8.591455,-3.196024,1.727398,-2.841453,-2.218233,-4.098395,-7.667138,6.611663,6.719744,1.661766,-0.657807,-2.490176,9.215786,-2.197339,-0.747594,-3.536656,-3.355511,-3.843143,-6.811446,0.413239,-7.107001,6.902964,-6.689696,6.677278,5.694139,-4.984655,9.846299,3.834230,-5.749471,2.609144],[7.064890,-8.794167,-3.132690,-6.981369,7.567312,-4.557730,8.355609,5.330192,-2.926297,0.884602,0.503408,3.431996,-0.728359,5.986673,9.941627,2.828601,4.789006,-8.473252,9.230370,-4.604343,-7.326110,-0.031694,-3.529883,1.496880,1.865168,-1.517469,-2.006960,2.634680,8.420964,9.277989,7.822456,0.446276,-4.608036,0.551091,-0.316816,4.283382,-6.633731,-5.096776,9.928022,4.483522,-9.382680,9.434368,7.886419,-4.470737,1.932880,9.265173,-6.316771,2.750435,-7.734280,-7.143330,-5.070605,5.328290],[-8.239909,-3.895763,-7.447322,-0.154690,9.716926,8.947061,-0.385011,7.659695,-4.086071,-4.427279,-2.908033,3.755906,-8.467159,3.672042,2.946008,5.660239,8.699197,4.647582,0.935256,-0.114715,9.855418,-6.289686,4.246490,-2.357161,-8.666655,9.216670,-8.263933,-6.300248,-8.962637,-4.217282,-1.170761,1.986915,3.186921,1.568621,-3.599570,4.429422,-6.267869,4.653009,-8.571526,2.366153,2.307441,8.793372,7.243116,-1.579790,9.529902,-8.676833,1.399188,6.505894,-2.172739,4.177126,1.393235,2.363100],[-6.018149,5.666963,-4.475880,-2.345998,1.170995,1.355344,2.804129,0.451138,-7.447199,-7.596123,3.508035,-4.363723,7.524052,6.094157,6.304364,-1.264231,7.390782,-3.522514,-1.752159,7.157294,-8.925272,-4.958105,3.384723,-5.167102,6.708787,2.044008,9.711009,0.401850,5.243423,9.632875,4.265850,4.000449,7.381116,-8.970878,-7.010439,-2.186406,-0.308347,-5.008152,-7.740570,-7.407589,0.893463,-0.387250,1.268888,5.185835,-4.818665,4.676083,-0.103785,9.417315,-0.458634,5.750280,7.300224,7.633961],[1.471654,8.971542,8.686970,4.728213,2.988726,1.820262,7.270893,-3.701986,6.867628,0.776264,-1.673380,9.100589,-0.583621,8.110846,-0.353914,-3.902171,-2.679727,3.355152,3.211869,-7.225850,7.266665,0.930643,9.693467,-5.489359,-2.753739,-9.581177,-8.890463,3.616893,1.873931,4.853408,-6.845266,9.244179,2.141238,-8.124889,4.804073,-2.570285,-2.340047,-4.843021,4.934010,-8.314659,-3.008602,-1.998596,-9.717011,-6.931132,-2.545998,-9.481415,0.594603,7.263551,-2.725350,6.228907,-8.860126,-9.695497],[0.138095,-3.714902,-5.549209,-7.266596,-7.759019,2.742640,7.547920,-7.403989,0.533985,-2.213355,-7.914025,-4.435358,6.141094,-7.311239,7.901992,-7.666182,1.082574,0.182274,0.146710,7.359798,-5.506574,-7.802244,-8.690478,4.424067,6.321302,-3.572846,5.789408,0.092279,-9.212821,-9.904279,-3.367449,-1.179926,-9.194435,9.015510,-8.867253,3.710397,-7.744225,-5.438368,-4.762350,-2.204907,9.421057,5.920053,1.401105,2.625046,-2.740934,9.256403,-8.890757,7.925680,1.268309,-8.773104,1.314049,-6.406669],[6.134682,-1.934025,-0.581041,-0.790748,3.863519,-1.410537,-6.301137,-6.161524,-0.593548,5.704763,2.662545,3.744828,-1.491950,-6.959416,5.865796,1.100894,2.481001,-3.021996,-3.663586,4.295309,-1.272745,9.136243,7.161093,8.135780,3.297894,-7.052325,6.723826,-8.012953,8.661647,6.628642,7.640139,-5.946590,-0.230665,9.678135,3.548068,-2.422284,-0.761094,-1.967698,5.766362,1.405573,-3.050877,-9.826911,2.951917,3.428741,4.759870,0.999704,2.127897,-2.343146,-0.271912,3.238506,-8.323348,8.778349],[6.373687,5.687537,-5.744371,8.156458,-5.878122,-8.994168,-8.561721,2.934571,0.436638,0.528011,-6.035466,-8.962361,0.424595,-5.586569,-0.005733,-5.206035,0.331687,-9.853566,8.749088,-7.043613,3.396469,3.106168,3.131806,-7.708501,-2.126163,4.270903,3.543331,4.968496,3.684320,-5.320512,-0.689676,0.364955,-3.568723,4.147914,-5.643496,-7.797343,-5.113468,7.776385,-7.407401,-8.183380,8.009465,0.781446,-5.673178,5.506116,-9.539195,8.497580,3.951475,-0.642954,-0.867103,6.901593,9.042284,9.636458],[0.671314,7.080973,-1.588992,-1.374350,-1.504115,-9.278858,3.165156,-1.556150,3.987576,-2.219381,1.710336,7.628779,-3.420809,-8.040838,-5.353718,7.486931,-9.038372,9.266988,7.899077,1.066539,5.434575,-5.869797,0.228905,-0.479459,-2.727004,7.018393,4.215739,2.898805,1.204873,1.668093,2.427715,-4.304314,-5.714536,-0.335065,3.081913,9.833125,1.613220,1.631436,-2.868027,-6.425882,-2.036439,-8.327232,-4.160811,4.834059,8.346341,8.525429,-9.547390,6.367459,3.200546,-8.338699,3.750030,5.662011],[7.034614,7.817314,-8.444163,-0.902610,-0.972944,-1.828580,-7.823606,-2.288921,-2.546421,2.631291,4.173865,2.895687,-7.422620,-1.188091,8.221767,1.174261,-8.617858,0.280166,-8.679443,-0.970891,-2.635833,1.059346,-0.500425,0.439418,3.955049,5.000538,0.316753,8.947441,-6.652426,6.081726,7.553525,-0.675230,7.094388,-9.973578,8.500564,-2.566939,0.445945,6.959246,-4.734520,-4.591479,5.848286,-3.247716,7.402537,-4.935419,6.661863,0.734747,-1.958164,2.706811,7.039089,9.866111,-1.532420,7.709258],[8.120106,3.707123,9.531208,0.116379,-5.854845,1.071070,8.958123,2.949884,0.158340,2.929471,1.629231,1.909437,-1.139505,7.208863,7.296777,-3.793292,6.796876,-5.259480,-7.915124,9.654444,9.295424,-5.361311,8.605408,-7.862145,-7.385313,-3.235387,-3.504413,9.866309,6.886906,5.541589,7.860084,7.811911,8.910551,6.485303,-7.681740,-4.148899,6.075792,-0.115201,2.740577,9.560099,7.989464,3.406899,1.567388,-3.436442,3.676936,5.742491,-3.739976,-1.078149,-6.729079,7.494977,-8.841106,0.642869],[-0.576115,-7.938835,-2.205600,4.274539,-0.834742,0.800118,0.770339,-2.628249,9.385396,3.292441,-9.103485,3.332453,6.199672,6.868054,9.545492,6.709732,5.257371,8.614781,8.257536,4.367979,8.628084,-2.422378,-3.731995,0.153737,-2.693348,2.421399,-2.239928,-2.261339,7.817937,-4.677080,-1.442456,-1.323705,8.373107,2.272459,6.697458,-6.689407,8.392723,8.217120,6.662198,5.727035,-8.475850,0.288575,1.752365,-9.707612,4.672490,5.507010,3.689149,8.216767,4.195098,2.812916,7.357233,2.431401],[-0.874946,5.592680,-5.393688,-6.147978,0.505948,5.450200,4.016640,-2.458048,-1.854934,-6.934334,8.248973,0.719825,-5.390496,8.666442,-1.886104,-8.275790,-8.292325,7.399825,-6.351962,5.363369,8.246294,-9.802215,-8.059504,3.308993,9.966537,-4.565420,-0.522491,7.226607,3.187340,-1.480508,-2.493444,-2.864210,-1.309605,5.171790,7.894234,8.594192,5.041021,0.697943,-7.288739,3.399742,-5.457626,-3.805067,3.868771,9.042106,2.614137,-6.583043,-6.393445,-4.099831,-8.740493,9.450868,-7.427409,-5.106034],[0.824731,1.384869,5.881113,2.510101,0.045614,-1.583106,6.486255,1.912245,2.493810,-0.211493,-3.930714,0.227894,-8.739261,7.061713,6.088406,0.382055,9.535112,-0.593936,8.086382,6.134825,0.953802,7.075216,5.768320,1.421542,-3.695442,6.251672,-9.532418,-6.453702,8.303633,6.721003,9.116653,4.275001,-1.132119,9.918174,7.679337,-0.070717,-2.947114,-1.817569,-2.660136,1.270762,6.457995,6.038219,9.732898,9.833992,8.279269,0.556471,5.281638,-1.043818,-8.946744,1.086233,-1.109561,-0.848367],[5.732364,-4.356812,9.418924,-0.311167,-3.763415,-7.296126,7.105558,8.026820,7.467369,-6.043957,6.887902,-0.297073,-8.270546,-4.674718,7.441347,-5.567853,8.409480,-5.595541,-0.583726,3.366424,-5.694508,-9.073578,4.655733,9.556252,-4.613861,2.396740,-2.524524,3.660081,9.730684,5.952096,-6.956874,2.742088,-4.019098,-3.024350,4.862951,-3.223024,-1.206743,5.232733,-2.086509,-3.700148,-5.694139,-7.318717,2.837923,-9.788105,2.960896,7.270181,0.388625,9.693041,-7.690794,-6.265927,-9.292731,4.578070],[8.444947,-2.966865,2.213673,-3.596956,5.395341,-5.200337,-8.325481,3.632552,-7.822526,5.612998,-5.472790,-3.709126,9.607051,-4.339633,3.370221,-4.897780,-8.726795,-7.779145,4.308799,-8.310433,5.778993,8.621123,6.657422,-1.507181,4.343453,9.079379,-7.109196,-1.026531,-9.225369,3.305202,-4.923216,-2.676818,8.398420,5.665268,5.463647,0.797945,-3.421817,-4.691254,1.074858,-4.309412,-3.237585,-3.307160,0.473820,-7.464136,5.469228,0.400084,5.245314,3.093313,-3.394667,9.590091,-5.492820,-9.784158]], dtype = "float32")#candidate|251|(22, 52)|const|float32
call_248 = relay.TupleGetItem(func_206_call(relay.reshape(var_249.astype('float32'), [6, 1, 14]), relay.reshape(const_250.astype('float32'), [6, 6, 14]), relay.reshape(const_250.astype('float32'), [6, 6, 14]), relay.reshape(const_251.astype('float32'), [1144,]), ), 3)
call_252 = relay.TupleGetItem(func_211_call(relay.reshape(var_249.astype('float32'), [6, 1, 14]), relay.reshape(const_250.astype('float32'), [6, 6, 14]), relay.reshape(const_250.astype('float32'), [6, 6, 14]), relay.reshape(const_251.astype('float32'), [1144,]), ), 3)
bop_253 = relay.left_shift(uop_242.astype('uint16'), relay.reshape(var_236.astype('uint16'), relay.shape_of(uop_242))) # shape=(12, 11, 12)
var_256 = relay.var("var_256", dtype = "float64", shape = (12, 11, 12))#candidate|256|(12, 11, 12)|var|float64
bop_257 = relay.equal(uop_242.astype('bool'), relay.reshape(var_256.astype('bool'), relay.shape_of(uop_242))) # shape=(12, 11, 12)
bop_273 = relay.bitwise_and(bop_257.astype('uint8'), relay.reshape(bop_253.astype('uint8'), relay.shape_of(bop_257))) # shape=(12, 11, 12)
bop_277 = relay.logical_and(bop_273.astype('bool'), relay.reshape(var_237.astype('bool'), relay.shape_of(bop_273))) # shape=(12, 11, 12)
func_129_call = mod.get_global_var('func_129')
func_132_call = mutated_mod.get_global_var('func_132')
call_282 = relay.TupleGetItem(func_129_call(relay.reshape(const_251.astype('float32'), [8, 13, 11])), 0)
call_283 = relay.TupleGetItem(func_132_call(relay.reshape(const_251.astype('float32'), [8, 13, 11])), 0)
output = relay.Tuple([bop_245,call_248,var_249,const_250,const_251,bop_277,call_282,])
output2 = relay.Tuple([bop_245,call_252,var_249,const_250,const_251,bop_277,call_283,])
func_284 = relay.Function([var_236,var_237,var_249,var_256,], output)
mod['func_284'] = func_284
mod = relay.transform.InferType()(mod)
mutated_mod['func_284'] = func_284
mutated_mod = relay.transform.InferType()(mutated_mod)
func_284_call = mutated_mod.get_global_var('func_284')
var_286 = relay.var("var_286", dtype = "bool", shape = (12, 11, 12))#candidate|286|(12, 11, 12)|var|bool
var_287 = relay.var("var_287", dtype = "bool", shape = (12, 11, 12))#candidate|287|(12, 11, 12)|var|bool
var_288 = relay.var("var_288", dtype = "float32", shape = (84,))#candidate|288|(84,)|var|float32
var_289 = relay.var("var_289", dtype = "float64", shape = (12, 11, 12))#candidate|289|(12, 11, 12)|var|float64
call_285 = func_284_call(var_286,var_287,var_288,var_289,)
output = call_285
func_290 = relay.Function([var_286,var_287,var_288,var_289,], output)
mutated_mod['func_290'] = func_290
mutated_mod = relay.transform.InferType()(mutated_mod)
const_295 = relay.const([[-7,-1,10,-7,-5,1,5,10,10,1,9,-5,-3,1,9],[5,-2,2,-4,-2,10,-2,-7,-8,4,-10,-9,7,5,-3],[1,2,-4,7,5,-10,-5,3,5,-8,1,1,4,-3,4],[-5,3,2,4,-9,1,6,-10,-7,-10,-3,4,4,-1,-6]], dtype = "uint32")#candidate|295|(4, 15)|const|uint32
var_296 = relay.var("var_296", dtype = "uint32", shape = (4, 15))#candidate|296|(4, 15)|var|uint32
bop_297 = relay.greater_equal(const_295.astype('bool'), relay.reshape(var_296.astype('bool'), relay.shape_of(const_295))) # shape=(4, 15)
uop_302 = relay.asinh(var_296.astype('float64')) # shape=(4, 15)
bop_304 = relay.add(bop_297.astype('int16'), relay.reshape(uop_302.astype('int16'), relay.shape_of(bop_297))) # shape=(4, 15)
output = relay.Tuple([bop_304,])
output2 = relay.Tuple([bop_304,])
func_310 = relay.Function([var_296,], output)
mod['func_310'] = func_310
mod = relay.transform.InferType()(mod)
mutated_mod['func_310'] = func_310
mutated_mod = relay.transform.InferType()(mutated_mod)
var_311 = relay.var("var_311", dtype = "uint32", shape = (4, 15))#candidate|311|(4, 15)|var|uint32
func_310_call = mutated_mod.get_global_var('func_310')
call_312 = func_310_call(var_311)
output = call_312
func_313 = relay.Function([var_311], output)
mutated_mod['func_313'] = func_313
mutated_mod = relay.transform.InferType()(mutated_mod)
var_338 = relay.var("var_338", dtype = "int32", shape = (11, 12, 2))#candidate|338|(11, 12, 2)|var|int32
var_339 = relay.var("var_339", dtype = "int32", shape = (11, 12, 2))#candidate|339|(11, 12, 2)|var|int32
bop_340 = relay.minimum(var_338.astype('int32'), relay.reshape(var_339.astype('int32'), relay.shape_of(var_338))) # shape=(11, 12, 2)
bop_343 = relay.less(bop_340.astype('bool'), relay.reshape(var_338.astype('bool'), relay.shape_of(bop_340))) # shape=(11, 12, 2)
uop_350 = relay.acos(bop_340.astype('float32')) # shape=(11, 12, 2)
output = relay.Tuple([bop_343,uop_350,])
output2 = relay.Tuple([bop_343,uop_350,])
func_370 = relay.Function([var_338,var_339,], output)
mod['func_370'] = func_370
mod = relay.transform.InferType()(mod)
mutated_mod['func_370'] = func_370
mutated_mod = relay.transform.InferType()(mutated_mod)
func_370_call = mutated_mod.get_global_var('func_370')
var_372 = relay.var("var_372", dtype = "int32", shape = (11, 12, 2))#candidate|372|(11, 12, 2)|var|int32
var_373 = relay.var("var_373", dtype = "int32", shape = (11, 12, 2))#candidate|373|(11, 12, 2)|var|int32
call_371 = func_370_call(var_372,var_373,)
output = call_371
func_374 = relay.Function([var_372,var_373,], output)
mutated_mod['func_374'] = func_374
mutated_mod = relay.transform.InferType()(mutated_mod)
var_413 = relay.var("var_413", dtype = "uint16", shape = (6, 14, 4))#candidate|413|(6, 14, 4)|var|uint16
const_414 = relay.const([[[-10,5,-9,6],[1,9,2,1],[10,8,-7,-10],[1,-3,6,2],[10,-2,8,-4],[-8,5,2,8],[5,8,8,-9],[8,1,5,-2],[1,-6,3,-10],[-3,-1,-8,-7],[-6,7,6,10],[-5,-8,4,-7],[-5,6,5,9],[10,4,-2,2]],[[-7,1,-2,5],[-1,2,-4,-2],[4,-7,3,-8],[9,-10,-3,8],[-1,3,-9,3],[-3,5,3,-6],[-5,-7,-10,-1],[7,1,-4,-9],[-7,10,-3,6],[-7,-1,8,9],[-2,-2,-1,1],[-4,7,-3,-3],[-9,6,6,-7],[-3,-5,-8,4]],[[9,10,7,-8],[-6,-1,3,9],[8,5,-9,9],[1,-5,-6,-8],[-5,7,-2,4],[-1,-6,8,-6],[3,10,-4,-6],[-3,-3,-7,6],[-9,-5,1,10],[-4,-6,-4,-9],[-6,10,8,-4],[-4,9,-9,-5],[-1,9,8,4],[6,4,-2,8]],[[2,7,-2,2],[-9,-9,-8,-7],[3,-1,-5,-4],[-2,-4,1,-4],[10,4,4,9],[-7,-4,-3,5],[6,8,10,-6],[-10,9,-2,6],[-6,-5,-8,-6],[5,1,-10,3],[-4,-1,2,-7],[8,6,10,-4],[-6,-7,-3,1],[-4,5,1,-1]],[[-8,-7,8,5],[-1,7,-6,-8],[-8,-7,9,-1],[2,-4,-6,8],[-5,-6,-1,10],[3,3,-6,2],[-5,7,8,-6],[5,-3,-5,5],[-6,-7,-4,-10],[6,-6,4,8],[-8,-5,4,7],[1,10,-1,-8],[-8,5,-3,8],[-8,-2,4,-4]],[[-7,-9,10,2],[-7,9,-9,-4],[-5,-8,-4,8],[3,-4,1,1],[9,-9,-7,-2],[5,-2,-10,1],[5,-4,6,-9],[-3,7,-3,2],[-8,10,-3,-10],[6,3,8,3],[-3,-10,-2,-9],[-4,-9,-5,-8],[5,10,4,8],[-4,10,-5,5]]], dtype = "uint16")#candidate|414|(6, 14, 4)|const|uint16
bop_415 = relay.less(var_413.astype('bool'), relay.reshape(const_414.astype('bool'), relay.shape_of(var_413))) # shape=(6, 14, 4)
bop_418 = relay.multiply(bop_415.astype('int8'), relay.reshape(var_413.astype('int8'), relay.shape_of(bop_415))) # shape=(6, 14, 4)
bop_422 = relay.bitwise_or(bop_418.astype('uint64'), relay.reshape(const_414.astype('uint64'), relay.shape_of(bop_418))) # shape=(6, 14, 4)
output = relay.Tuple([bop_422,])
output2 = relay.Tuple([bop_422,])
func_426 = relay.Function([var_413,], output)
mod['func_426'] = func_426
mod = relay.transform.InferType()(mod)
var_427 = relay.var("var_427", dtype = "uint16", shape = (6, 14, 4))#candidate|427|(6, 14, 4)|var|uint16
output = func_426(var_427)
func_428 = relay.Function([var_427], output)
mutated_mod['func_428'] = func_428
mutated_mod = relay.transform.InferType()(mutated_mod)
var_450 = relay.var("var_450", dtype = "bool", shape = (8, 8, 5))#candidate|450|(8, 8, 5)|var|bool
const_451 = relay.const([[[False,True,True,False,False],[False,False,False,True,True],[False,False,True,False,True],[False,False,False,True,False],[True,False,False,True,True],[True,False,False,True,True],[True,True,True,False,False],[True,False,False,True,True]],[[True,False,True,True,False],[True,True,False,True,False],[True,False,True,True,True],[False,True,False,False,False],[True,True,False,False,True],[False,True,True,False,True],[False,True,True,False,False],[True,True,False,True,False]],[[False,False,False,True,False],[False,True,True,False,False],[True,True,True,True,False],[True,True,True,False,True],[False,True,True,True,True],[True,False,False,True,False],[False,False,False,False,True],[False,False,True,True,False]],[[True,True,False,False,False],[False,True,False,True,False],[True,False,True,False,True],[False,False,False,False,True],[False,False,True,False,False],[True,True,True,False,False],[True,True,True,True,True],[False,True,True,False,True]],[[True,True,True,False,False],[False,False,False,False,False],[True,False,False,True,True],[False,False,False,True,False],[False,True,True,False,False],[False,False,False,True,False],[True,False,True,False,False],[True,False,False,True,True]],[[False,True,True,False,False],[False,True,False,False,False],[False,True,True,True,True],[False,True,True,False,True],[True,True,True,False,True],[False,False,True,False,True],[False,True,False,False,True],[False,False,False,False,True]],[[True,False,False,False,True],[True,False,True,False,False],[False,True,True,True,True],[False,True,True,False,False],[True,False,True,True,False],[False,False,True,True,False],[False,False,True,False,False],[False,True,True,True,True]],[[True,True,False,True,True],[True,True,False,True,True],[False,False,False,True,True],[False,False,True,True,True],[False,True,True,True,True],[True,True,False,False,True],[True,False,False,True,True],[True,True,False,False,False]]], dtype = "bool")#candidate|451|(8, 8, 5)|const|bool
bop_452 = relay.logical_or(var_450.astype('bool'), relay.reshape(const_451.astype('bool'), relay.shape_of(var_450))) # shape=(8, 8, 5)
uop_456 = relay.rsqrt(bop_452.astype('float64')) # shape=(8, 8, 5)
output = uop_456
output2 = uop_456
func_466 = relay.Function([var_450,], output)
mod['func_466'] = func_466
mod = relay.transform.InferType()(mod)
var_467 = relay.var("var_467", dtype = "bool", shape = (8, 8, 5))#candidate|467|(8, 8, 5)|var|bool
output = func_466(var_467)
func_468 = relay.Function([var_467], output)
mutated_mod['func_468'] = func_468
mutated_mod = relay.transform.InferType()(mutated_mod)
const_492 = relay.const([[[-6,10,-5,10,4,1,1,-2,5],[5,10,6,-6,-2,-4,3,-5,9],[-6,8,-8,-4,8,-9,2,2,1],[7,4,4,-4,8,-2,3,-6,7],[-1,3,9,-10,-6,-2,10,-4,-9],[-4,5,-4,9,-6,8,10,-6,-7],[-7,-5,9,1,7,6,4,-8,-2],[-8,10,7,-9,7,2,-2,3,3],[3,3,-7,-5,-9,-2,3,-1,5]],[[-1,4,2,2,-6,-9,6,1,3],[8,-1,-1,7,4,-9,5,3,-7],[-7,7,5,10,-10,-3,-1,3,10],[-4,9,5,6,9,-9,-4,-7,-10],[9,-4,-1,1,7,-3,-9,-4,-6],[6,8,3,2,-4,8,-1,-5,5],[-9,-7,4,5,-8,10,7,8,-1],[-3,-6,-2,-2,-3,-6,-3,9,-5],[-2,4,9,-6,2,-2,-4,-6,3]],[[-7,8,3,10,-3,8,2,6,1],[-2,2,2,-6,10,-9,9,9,5],[3,8,6,4,5,8,7,-7,-3],[-4,7,3,6,-1,-9,-5,-4,2],[8,-10,10,-10,-7,8,8,-10,-6],[1,5,5,6,10,-2,10,8,2],[7,5,-9,-3,-6,1,6,-4,-2],[6,-10,10,9,-3,-9,7,6,-7],[6,3,-4,4,6,2,-6,8,7]],[[7,7,4,-4,1,4,7,9,-2],[6,-3,-3,-10,5,2,-5,7,6],[7,4,-1,9,8,10,3,7,8],[-2,6,6,9,-6,5,-10,3,-4],[4,-10,3,2,6,1,9,2,-1],[1,2,-8,1,-1,2,7,-9,8],[-9,-8,-2,-6,-2,-4,9,-5,-5],[9,-1,-8,-6,-8,-4,-6,9,-5],[-3,-1,1,10,-5,2,9,7,2]],[[2,-2,4,7,6,-6,-8,-4,-5],[-6,-7,-1,-10,10,10,-5,-1,-1],[1,-7,-5,-10,1,1,10,-3,8],[-8,4,-8,-2,-7,9,10,-7,9],[-9,6,-2,7,6,-3,-4,7,-10],[4,-7,5,-8,-6,-1,6,3,-3],[1,-8,-10,1,1,3,2,-3,8],[-7,-4,-1,9,6,-1,6,9,-7],[7,10,-8,9,-2,-1,2,-7,2]],[[-1,7,-2,8,-10,-3,3,-9,-10],[-10,6,-1,2,-6,10,-9,8,10],[-6,-7,-5,-5,2,5,-10,-9,5],[-5,5,-8,-7,8,4,-5,-8,9],[5,-4,-8,7,2,-4,9,-5,-1],[1,-1,5,-9,-8,-5,10,2,6],[-1,-10,10,9,5,6,-9,6,-8],[-5,-1,3,3,5,7,7,-4,-10],[-5,6,5,8,2,3,-4,8,3]],[[-1,-7,2,-8,2,8,-8,3,4],[9,3,5,1,4,5,3,4,4],[5,-6,4,1,8,-8,-1,4,6],[9,1,9,3,-3,5,4,9,-7],[6,7,-1,8,-1,5,4,-7,7],[10,-1,6,2,3,10,4,-7,1],[5,-9,4,6,-8,-4,10,-5,-8],[-4,-1,-10,9,8,-7,6,-10,10],[1,-3,-8,3,10,-6,7,9,-1]],[[10,4,-9,-8,-5,-2,-4,1,-9],[4,-5,-10,-3,3,6,2,5,5],[-9,9,-3,10,-1,5,-8,-5,-3],[5,3,-9,-3,4,-9,2,-2,-3],[-1,4,-4,3,10,-6,-3,1,1],[5,-3,2,10,9,4,-8,-6,8],[-1,-1,-10,-4,-8,-9,6,-2,4],[10,-7,-7,2,-7,-8,-6,7,10],[6,10,-8,4,-4,-3,-10,4,2]],[[10,1,-2,-4,7,-8,9,-10,2],[8,4,-2,-2,-1,-2,2,-7,-1],[9,9,-7,5,-3,-2,5,-10,-4],[7,5,-4,1,10,6,-8,7,3],[6,-9,-2,-5,3,-7,10,-2,-2],[-1,-10,-2,2,-3,1,2,-3,8],[4,-4,1,-3,-7,-5,1,1,-6],[-2,-7,9,1,5,2,1,9,2],[-9,8,-2,-5,10,8,3,6,3]],[[9,-7,-9,-8,-5,-8,-6,2,2],[-8,8,-7,3,4,-9,7,10,2],[2,-10,8,4,4,7,-1,-5,2],[3,1,9,4,-9,9,-6,5,10],[3,-7,-1,4,-9,2,2,-9,3],[-4,3,5,-7,2,6,-5,-5,9],[7,1,4,-7,9,1,5,10,1],[7,6,-1,-1,-3,-9,6,8,1],[-9,8,6,9,-7,9,-4,-7,8]],[[-3,6,-7,10,10,1,10,2,5],[9,1,-2,-5,7,-7,2,5,-9],[5,-8,-9,-8,6,-9,2,-6,6],[-3,6,-5,-4,6,6,-4,7,8],[8,5,10,8,3,-2,5,10,-5],[6,-1,-1,-8,-10,6,10,-3,-9],[-2,4,-4,-4,2,-10,-10,-10,-1],[-10,5,-5,-5,6,-4,3,-3,-1],[3,-6,1,6,4,-4,7,5,1]],[[7,-7,-8,-8,-4,9,-10,3,9],[-1,5,3,10,3,-5,7,4,3],[-4,-4,3,-6,-6,-8,2,2,-3],[-9,6,-10,8,-3,1,4,-10,-6],[2,6,10,2,3,9,2,1,-10],[1,8,2,-1,-7,-7,-5,-4,4],[5,5,-4,4,-2,4,-5,2,10],[-3,2,-3,2,5,-9,9,7,-1],[-8,-6,1,-2,6,8,-10,6,-2]],[[9,7,1,5,9,5,4,7,6],[2,4,4,4,4,3,1,3,6],[-3,5,-4,3,6,7,-10,1,-9],[-6,10,4,-10,-7,-2,-7,5,-6],[4,4,9,-3,-2,-1,-3,5,10],[7,6,-1,9,3,1,3,-9,5],[-10,-7,7,5,-8,3,2,6,-6],[-8,6,-8,-3,2,8,1,8,-2],[9,-4,10,3,-7,-9,9,-7,9]],[[1,6,3,1,-6,4,-5,-5,-8],[-4,6,3,2,5,6,-5,-5,2],[-9,-3,-3,2,8,7,-4,-10,-10],[-8,-4,4,-6,-8,-1,8,-5,-6],[-8,8,-8,3,-6,4,5,-8,4],[8,2,10,8,5,9,-4,4,2],[-9,-5,7,8,-1,8,10,-7,3],[8,-7,5,-6,2,2,-1,-10,-5],[6,-6,4,4,1,-8,9,6,-9]],[[-2,1,-7,10,6,-4,7,-4,9],[-1,2,4,-8,6,-9,-6,-1,6],[2,6,8,-8,-4,-1,2,3,4],[4,2,-6,4,-3,9,-3,-7,-2],[2,3,-4,-6,6,10,1,-2,3],[-4,-7,2,-8,10,5,-4,2,3],[-2,2,-2,-10,6,4,7,6,6],[-4,6,-10,6,10,-1,-5,3,5],[-10,6,4,-5,1,4,1,2,4]]], dtype = "int64")#candidate|492|(15, 9, 9)|const|int64
var_493 = relay.var("var_493", dtype = "int64", shape = (15, 9, 9))#candidate|493|(15, 9, 9)|var|int64
bop_494 = relay.greater(const_492.astype('bool'), relay.reshape(var_493.astype('bool'), relay.shape_of(const_492))) # shape=(15, 9, 9)
var_513 = relay.var("var_513", dtype = "bool", shape = (15, 9, 9))#candidate|513|(15, 9, 9)|var|bool
bop_514 = relay.logical_or(bop_494.astype('bool'), relay.reshape(var_513.astype('bool'), relay.shape_of(bop_494))) # shape=(15, 9, 9)
uop_518 = relay.sin(var_493.astype('float32')) # shape=(15, 9, 9)
uop_522 = relay.sigmoid(bop_514.astype('float64')) # shape=(15, 9, 9)
func_284_call = mod.get_global_var('func_284')
func_290_call = mutated_mod.get_global_var('func_290')
const_527 = relay.const([True,False,True,True,False,True,False,True,True,True,True,True,True,False,True,True,True,True,False,False,True,False,True,False,True,False,True,True,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,False,True,False,True,False,True,True,True,False,True,False,True,True,False,False,False,True,True,False,True,True,False,True,False,False,False,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,True,False,True,False,False,True,True,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,True,False,False,True,True,True,True,False,False,False,True,True,False,True,True,False,True,True,True,False,True,True,False,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,False,True,True,True,True,False,True,False,False,False,True,True,True,False,False,True,True,True,True,False,False,True,True,False,True,False,False,True,False,True,False,False,True,False,False,False,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,False,True,True,True,True,True,True,True,False,True,False,True,True,False,True,True,True,True,True,False,False,False,True,True,True,False,False,False,True,False,True,True,False,False,True,True,True,False,True,True,True,True,True,True,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,True,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,False,False,False,True,False,True,True,False,True,True,True,True,True,True,True,True,False,False,False,True,True,True,True,True,True,False,False,False,True,False,False,True,False,False,True,False,False,False,True,True,False,False,False,True,False,False,False,False,False,True,False,False,False,True,True,True,True,True,False,False,True,False,True,True,False,False,False,False,True,True,False,True,True,False,False,True,False,False,False,True,True,False,True,False,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,True,False,False,True,True,False,False,True,False,False,False,False,False,True,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,True,False,False,True,False,True,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,True,True,False,True,False,True,False,True,False,True,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,True,True,False,True,False,True,False,True,False,True,True,True,True,False,True,True,True,False,True,False,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,False,True,False,False,True,True,True,False,False,False,True,False,True,False,True,True,False,True,False,False,True,False,False,False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,False,False,False,True,False,True,True,False,False,True,True,False,True,False,True,False,False,True,False,False,True,False,False,True,True,False,True,False,False,True,True,False,False,True,True,False,True,True,False,True,False,True,False,False,True,True,False,False,False,False,False,True,False,False,False,False,True,False,False,True,True,True,True,True,True,False,False,False,True,False,True,False,False,True,False,True,False,False,True,True,False,False,False,False,False,True,False,True,True,True,False,False,False,True,False,True,False,False,True,True,False,True,True,False,False,True,False,True,True,True,False,True,True,False,False,False,True,False,True,False,True,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,False,False,True,True,True,True,True,True,False,True,True,True,True,False,False,True,False,True,True,False,False,False,True,True,True,False,False,True,True,False,False,True,False,True,False,False,True,True,True,True,False,False,False,False,False,False,True,True,True,False,True,True,False,False,False,False,True,True,True,False,True,True,True,False,True,True,False,False,True,True,True,True,True,True,True,True,False,False,False,True,False,True,True,True,False,True,True,True,False,False,True,False,False,False,False,True,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,False,True,False,True,True,True,False,False,False,True,True,False,True,True,False,False,True,False,True,True,True,True,True,True,False,True,False,False,True,False,True,True,False,True,True,True,False,True,False,False,False,True,False,True,True,False,True,False,False,False,True,True,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,True,True,False,True,True,True,False,False,True,False,True,True,False,False,False,False,False,False,True,False,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,False,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,False,False,True,True,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,False,True,True,True,False,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,False,True,True,False,True,False,False,True,False,False,False,True,True,False,False,False,False,True,False,False,False,True,False,True,True,False,True,True,False,True,False,True,False,False,True,True,False,True,False,True,False,False,False,True,True,True,False,True,False,False,True,False,True,True,True,True,False,False,False,False,True,False,True,False,False,False,True,True,False,False,False,False,False,False,True,True,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,False,True,True,True,True,False,False,True,False,False,True,True,False,True,False,False,False,True,True,False,False,True,True,True,False,True,False,True,True,False,False,True,True,True,False,False,False,False,False,False,False,True,True,True,False,False,True,True,True,False,True,True,True,False,True,True,True,True,True,False,True,True,True,False,True,False,True,True,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,True,True,False,False,True,False,True,False,False,False,True,False,True,True,False,False,True,False,True,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,False,False,True,False,True,True,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,True,True,False,False,True,False,True,True,True,False,False,True,True,False,False,True,False,True,True,False,True,True,False,False,False,True,True,False,False,False,False,False,True,False,False,False,False,True,False,True,True,False,True,True,False,True,False,False,False,True,False,True,False,False,False,False,False,True,True,False,True,True,False,False,True,True,True,False,False,True,True,False,True,False,True,True,False,True,True,False,False,False,False,False,False,False,True,False,True,False,True,False,True,True,False,False,False,True,False,True,False,False,True,True,False,False,False,False,True,False,True,True,False,True,True,False,True,False,True,False,False,False,False,True,True,False,False,False,False,False,True,False,False,False,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,False,False,True,True,True,True,False,False,True,False,False,True,False,True,True,True,False,True,True,True,False,True,False,True,False,False,True,False,False,False,False,False,False,True,True,False,False,True,False,True,True,False,True,True,True,False,True,True,False,False,False,False,True,True,True,True,True,False,False,True,False,False,True,True,True,True,True,False,False,True,True,False,True,False,True,True,True,False,False,True,False,True,True,False,False,False,True,True,False,True,False,False,True,True,True,True,False,False,True,True,True,False,True,True,True,False,False,False,True,False,True,True,True,False,True,True,False,True,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,True,True,True,True,True,False,True,False,True,True,False,True,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,True,True,False,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,True,True,True,False,True,False,False,False,True,False,False,False,True,False,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False], dtype = "bool")#candidate|527|(1584,)|const|bool
const_528 = relay.const([-6.075883,-2.930744,-8.776483,7.975704,-4.551324,2.977302,0.348584,2.814370,5.972361,-4.810525,5.863888,-4.110889,-0.333255,5.849224,-2.809810,-1.012125,-4.183424,8.284137,2.111342,-8.216893,8.628463,9.724986,1.959431,-4.813697,7.539312,-4.079344,-0.688209,5.477397,9.425142,-5.863242,6.305875,-1.446984,8.554386,-9.316480,-0.052309,-9.240279,-7.884376,5.203915,-0.950010,-2.521222,-3.972093,-7.217222,-8.162100,6.960576,5.180401,3.928536,-8.369293,-9.887967,2.991892,-9.797409,9.901187,5.658256,-3.169332,4.972526,-9.289092,-3.390362,-1.647781,4.639457,6.483072,-2.228490,-0.457628,3.218929,-3.808234,-0.648696,-4.965690,9.957218,0.811793,-3.459178,4.840214,-6.449368,4.513242,-2.061004,-0.465490,-2.068180,-9.242847,-7.773768,-3.211038,2.382606,7.079659,-6.271805,-5.894089,0.800854,-0.478457,4.416361], dtype = "float32")#candidate|528|(84,)|const|float32
call_526 = relay.TupleGetItem(func_284_call(relay.reshape(const_527.astype('bool'), [12, 11, 12]), relay.reshape(const_527.astype('bool'), [12, 11, 12]), relay.reshape(const_528.astype('float32'), [84,]), relay.reshape(const_527.astype('float64'), [12, 11, 12]), ), 5)
call_529 = relay.TupleGetItem(func_290_call(relay.reshape(const_527.astype('bool'), [12, 11, 12]), relay.reshape(const_527.astype('bool'), [12, 11, 12]), relay.reshape(const_528.astype('float32'), [84,]), relay.reshape(const_527.astype('float64'), [12, 11, 12]), ), 5)
bop_536 = relay.multiply(uop_518.astype('uint8'), relay.reshape(bop_514.astype('uint8'), relay.shape_of(uop_518))) # shape=(15, 9, 9)
var_542 = relay.var("var_542", dtype = "float32", shape = (15, 9, 9))#candidate|542|(15, 9, 9)|var|float32
bop_543 = relay.less(uop_518.astype('bool'), relay.reshape(var_542.astype('bool'), relay.shape_of(uop_518))) # shape=(15, 9, 9)
bop_548 = relay.greater_equal(bop_514.astype('bool'), relay.reshape(bop_536.astype('bool'), relay.shape_of(bop_514))) # shape=(15, 9, 9)
func_310_call = mod.get_global_var('func_310')
func_313_call = mutated_mod.get_global_var('func_313')
var_552 = relay.var("var_552", dtype = "uint32", shape = (60,))#candidate|552|(60,)|var|uint32
call_551 = relay.TupleGetItem(func_310_call(relay.reshape(var_552.astype('uint32'), [4, 15])), 0)
call_553 = relay.TupleGetItem(func_313_call(relay.reshape(var_552.astype('uint32'), [4, 15])), 0)
func_310_call = mod.get_global_var('func_310')
func_313_call = mutated_mod.get_global_var('func_313')
call_554 = relay.TupleGetItem(func_310_call(relay.reshape(call_551.astype('uint32'), [4, 15])), 0)
call_555 = relay.TupleGetItem(func_313_call(relay.reshape(call_551.astype('uint32'), [4, 15])), 0)
uop_559 = relay.acosh(uop_522.astype('float32')) # shape=(15, 9, 9)
uop_565 = relay.acos(uop_522.astype('float64')) # shape=(15, 9, 9)
func_129_call = mod.get_global_var('func_129')
func_132_call = mutated_mod.get_global_var('func_132')
const_569 = relay.const([-1.966893,-9.796960,-1.895896,-9.680913,-9.551413,-5.525844,9.660317,6.920715,-6.016264,-6.381608,-9.285356,6.240998,2.144023,7.126749,9.069758,1.934337,-7.522554,-0.636887,-7.109948,7.144101,-0.561963,-3.004107,-7.557248,-5.905410,-8.401876,0.058394,-0.175631,-1.345429,8.795053,-8.312545,3.642848,-0.460931,6.062653,-5.471180,6.728172,-9.193332,9.541859,-5.498815,5.508442,8.762377,1.066505,-1.253809,0.884677,5.039379,-6.731685,-8.132369,-9.151301,3.880253,5.828445,6.437749,2.239084,-8.090210,-3.558812,0.493167,-8.628976,4.995992,9.974278,0.881505,3.853127,4.799912,-5.234415,8.679635,-8.764832,-8.763661,-5.794766,0.283324,4.760121,-9.719446,-5.631978,1.271295,-5.709144,-1.696674,-4.490539,5.992968,1.061266,5.020897,-9.808080,-4.295827,-1.709785,-9.769391,-8.450016,-6.140398,6.751490,3.485026,-9.484245,-5.299989,-4.048827,-3.756800,-6.349066,-2.200547,-6.603478,6.981276,-2.914839,-7.412503,-6.412124,2.102907,-1.661973,1.739547,-0.361601,3.813372,4.531267,-3.652230,-5.957410,7.512465,-9.071297,-9.010538,1.515157,6.752879,6.660063,-3.649007,-3.360614,-2.269758,-3.570332,-4.332030,9.121703,5.111042,-4.408175,-5.626018,8.878883,5.604034,0.219249,-3.303586,-8.869454,-3.140751,3.793568,5.303899,-5.561069,-6.487016,5.241278,7.440110,-7.937649,-1.179828,-5.942274,-2.497565,-1.362670,7.928670,5.598479,-2.186090,9.225944,-7.933901,-4.509576,-0.752407,5.462952,4.216507,-5.079650,4.016376,1.270384,6.736974,-2.662851,5.163969,1.821255,-9.096524,1.837000,-7.090917,1.038834,2.537770,9.214571,-1.295517,7.137638,1.552660,8.458662,-3.180454,-2.892118,-1.024281,4.001357,1.210934,1.566696,-4.342839,8.633301,5.514883,8.558887,-5.971492,1.613643,8.501365,-4.087173,-8.184710,-9.128916,-8.297912,-5.026674,3.526280,5.818924,-7.507741,9.477067,1.784907,-2.310040,0.579410,7.994084,-8.931843,3.806897,0.772211,-8.058360,3.598952,8.129969,-3.211189,-9.713085,3.093938,-7.624692,-0.692061,-4.909787,-0.041291,0.798139,-9.809653,0.305930,4.389015,1.375585,-8.230677,-6.220285,-3.151570,-0.503206,4.320177,-7.536098,-4.272409,-3.874770,-6.548039,-6.812687,5.808855,9.189030,-4.819133,-8.296388,1.006296,0.693879,-1.746663,1.902598,7.226027,5.805318,-0.887860,6.556036,-1.665618,-0.137741,6.184061,-0.214931,-4.684792,-4.158589,-2.549078,-1.362182,-7.210485,-0.746906,4.133007,7.744041,1.977961,3.423450,3.094297,-7.319298,-2.534758,-0.550399,0.061317,4.469586,-8.247776,-0.005745,-8.193913,-0.424359,-1.299399,1.948850,-5.311441,-1.848082,3.391761,-1.165775,6.881845,9.121261,3.865036,1.891560,-8.247673,-5.982129,-9.576372,9.146323,2.991111,-9.739479,-5.512209,6.508752,-9.735625,-0.792257,4.317124,-9.400934,8.018465,-7.709966,-7.652955,4.381382,-1.928844,1.950385,5.703024,-0.651518,2.943294,-7.462139,-0.746051,-2.548135,-1.743520,1.258789,4.802698,-5.577707,3.937244,5.902947,-4.831347,-9.677051,-6.469489,4.018664,-1.366726,-4.944037,-6.490698,-8.263842,-4.054838,-1.187112,9.969533,-1.146717,0.724682,-7.947725,-0.934447,-0.582934,-9.573828,9.329700,3.205243,-5.181471,-6.567519,1.923780,-7.059543,-2.443464,-8.917090,3.461770,-1.702633,0.528134,-8.501948,-9.361261,8.298414,8.199232,3.511136,4.405650,0.668586,-6.144304,-7.222814,4.649191,0.379018,-4.967313,-8.994394,-6.159840,5.528226,-7.375877,2.970967,-8.135902,-5.773100,-8.598737,6.446069,-9.781859,-0.180518,-3.733820,-6.845127,6.270119,3.306849,7.106090,5.230791,-5.300093,8.439047,-5.604473,0.497992,-5.385576,-0.554604,9.612362,-3.420783,-4.595310,8.427013,2.292224,-6.867559,8.441426,-2.319986,4.497460,-4.399092,1.827664,4.381702,-6.911068,-8.436588,-6.322107,-6.594901,-2.828654,2.991761,3.139436,-1.690703,-9.737251,9.220752,-4.234048,-1.409864,8.309507,-3.843343,8.615660,-9.158525,-9.085159,-3.298872,0.387287,4.975582,6.662126,-4.482629,8.380013,6.007170,-5.733077,6.716752,8.431558,-0.248488,5.907871,3.078382,-4.846720,-0.966975,-1.714799,4.705132,7.010175,-0.528480,9.670706,2.761701,5.954708,-4.627429,7.811897,-3.227353,-2.243197,0.067995,2.171786,-0.897395,-8.867215,0.160628,4.313438,-3.852874,0.095393,3.276176,-2.065153,5.866950,9.652528,1.751648,8.706968,0.039327,-2.101454,8.765137,9.513520,-6.688152,5.510170,8.684054,-4.567814,7.008189,-3.016426,6.870366,-9.237895,-9.732433,-8.167850,-1.134697,8.134299,6.288209,3.250741,-4.319168,-6.433912,-9.952415,-1.842356,-5.372287,-5.233175,-9.745213,-0.387996,7.263078,-1.332899,5.142338,0.427837,-5.423762,2.856585,-4.758680,4.745322,-4.819583,3.552478,4.905462,-7.015498,1.141370,1.054405,4.087818,9.175199,-9.438351,-3.731627,-2.394112,-6.814531,-5.667046,9.472643,-9.867132,4.962228,-8.442630,1.661933,-1.982548,-5.016536,-2.157303,9.280375,1.677399,-2.606202,-9.183076,1.865080,-1.590927,-2.983363,-5.734246,-3.839932,-0.400351,1.635494,-6.973711,-7.797322,-0.844520,-5.198196,-7.771717,-9.426039,-9.621241,-9.404953,0.458822,-2.628481,4.226456,-4.081061,-6.087635,-1.562269,9.843737,5.142865,-8.486729,-6.938821,-7.021146,-7.416979,9.751835,4.718782,9.895160,-2.399113,3.532190,9.691900,3.727519,-0.039949,-7.948416,-7.691795,-5.928557,0.562846,9.249086,1.587973,5.591788,4.532230,-8.050646,-9.482833,-9.043831,-4.362713,9.304459,-1.512036,-2.699403,-5.199503,3.085138,-5.095278,3.422710,-6.710488,2.861337,-1.166640,2.910537,9.225251,-8.295867,-9.869256,1.321889,9.370193,-8.563166,3.238412,-4.044541,1.535317,4.426409,-3.805318,3.983721,1.952465,-2.851318,1.748004,4.019663,-6.826814,4.758621,-7.291010,6.421615,5.195076,8.218148,-2.579922,4.322676,9.865030,6.638093,4.452600,0.262429,-7.154623,-0.474283,7.660138,-2.221612,-3.266740,-8.481696,-0.808102,-3.453482,4.909456,8.885707,6.493389,4.111099,4.475746,-5.332073,-1.273451,3.054136,-0.137372,-4.902086,-0.770151,1.612438,-2.945107,8.271718,0.414059,9.496389,-8.961005,9.586202,8.541176,-0.130845,7.478046,8.396276,-7.896210,-7.564128,-0.166402,1.829152,-0.411994,8.338569,-7.096464,4.279659,-5.071204,4.224883,9.856628,4.164750,8.803708,8.544897,-1.999218,-1.701283,-2.121397,0.242107,-8.643630,4.791458,9.743261,8.274120,2.289674,-9.801978,1.281964,-7.044377,-2.050013,4.167267,-3.224607,-5.331564,2.589829,1.570912,-1.061504,4.435102,0.972775,1.439442,1.659687,2.839590,1.328775,8.603975,0.739836,-9.375876,4.668256,5.271204,-9.306567,-0.809292,1.430127,7.953327,1.043677,-3.951333,8.272399,7.067912,-9.590730,-8.785434,-7.967866,0.671206,9.370303,8.789551,4.800858,-1.844122,0.606389,-7.213964,5.491817,-0.946682,-2.055646,0.269293,-5.102539,-9.330864,6.638894,-0.990745,-9.873004,6.290329,6.659053,-9.954761,-4.111449,2.302858,-2.464669,-8.380864,7.703002,-8.159484,5.119748,-6.385989,-2.534302,-1.124322,6.549375,-1.865988,-9.192212,4.035530,-1.242219,3.044633,5.639543,-9.028591,-8.455150,3.340408,2.441844,0.094977,7.462461,-4.403858,-4.403779,-8.169064,-6.892882,-6.243825,-0.083964,-3.737015,7.869165,5.431118,-6.917373,-2.212886,-9.061199,9.420689,7.944294,-2.214151,-7.153471,3.893849,-3.280006,-2.108053,-2.297592,1.119951,-7.612192,8.748578,1.170839,-6.548578,7.503929,-6.574400,-3.630200,4.223716,-4.804501,4.912891,8.223932,-9.206493,-8.387389,-8.768925,4.078095,8.415192,8.262153,2.617786,-8.118733,3.587496,6.899218,7.947097,4.188189,2.251220,8.289428,-1.301663,8.643752,-0.170522,2.111262,-5.757490,-5.019930,-7.986359,2.086005,2.442860,-3.180231,5.998821,-1.408535,8.961156,8.684377,-9.359050,4.612490,6.735450,8.751247,-3.292716,-4.118766,1.890025,9.825690,1.964417,5.132963,-2.907415,1.097368,5.218315,-9.288513,3.819204,-1.316318,-7.897365,-1.169550,-0.987541,7.627127,-1.136148,-1.584320,6.363766,8.158478,-6.256738,9.973588,-3.007378,-7.878658,-6.757827,1.138578,-7.561331,1.728426,6.792930,9.740768,3.136080,7.347788,-2.013403,0.393918,6.858590,-1.611552,-1.194573,-7.952471,-7.548893,-2.545817,9.457631,-0.343675,6.614175,9.298836,2.351557,6.160833,2.777839,-0.243953,-8.752763,5.276680,9.999429,1.805593,3.089962,-4.745096,-3.950977,0.762756,-0.299249,9.438730,3.085983,1.789213,6.072804,-6.533407,0.317209,6.905842,-9.865723,2.258320,-3.618928,9.759890,-9.868488,-6.157413,4.464451,-3.969829,1.728613,9.551746,-3.429482,-7.749776,6.435014,0.564509,2.565350,-5.322888,3.399179,2.465961,-3.291134,-5.181849,5.243276,5.604161,-3.908135,-0.917311,-9.753381,-9.027067,-9.007318,-8.630812,3.414530,-9.772042,-1.595355,7.109166,-9.573011,-3.759947,2.936815,4.644048,3.161238,6.717059,7.652394,7.602801,-2.060797,-4.808173,-0.117363,-5.818588,-4.258970,6.314546,-9.095874,1.235193,7.301545,0.012278,-1.010156,0.953114,-0.970582,9.648658,2.940184,2.853087,-5.602282,-0.495845,-8.858537,8.378623,-5.820963,-1.772976,2.438844,8.864497,4.124719,4.683905,-9.485415,2.135008,-8.360262,-3.611599,5.404214,7.431538,2.916556,8.854309,-9.838436,3.527908,9.953905,0.980101,8.277324,6.227576,-7.249071,-3.401786,-3.685453,0.310695,-5.239967,-0.229976,5.016699,5.598065,3.806872,-7.035887,9.078096,-7.850195,5.102839,8.204282,2.440091,6.690092,-9.433772,-5.518790,6.513664,0.861620,7.942635,-3.818832,6.409497,4.577100,-5.909198,-6.905731,2.259381,-9.614487,6.530669,5.021112,-5.695029,-6.145385,-8.882362,9.769652,-4.548661,9.350843,-7.347918,-4.070860,-0.780528,6.088162,7.389338,-7.584053,-4.769324,-8.597155,4.795893,-2.054147,-8.873488,-9.253565,7.327133,3.178488,-0.260820,2.831090,-0.129678,-6.761547,-8.520669,1.675883,5.079091,-5.535241,-4.774238,7.079725,7.383297,7.605322,-5.511036,-4.416307,-7.086235,4.796283,4.062688,0.126660,-7.356645,-5.371294,2.064779,0.793452,2.865322,1.201255,-0.838566,0.114120,-6.232057,6.304225,-9.075889,5.411771,8.488708,3.411260,7.092677,-6.228895,-4.594333,-2.377164,-1.333161,4.136914,-3.046602,7.508118,1.216508,-5.437442,-9.549712,5.138068,7.443986,6.751351,1.373681,6.389828,3.311047,1.589371,-4.252940,-2.041122,5.988888,9.695870,-9.872067,-9.908125,5.990399,8.455571,-4.882659,8.464000,6.643491,2.035556,3.241254,-3.912724,-5.942983,1.913450,9.902315,-4.996247,3.771584,-1.214290,-7.201406,0.239230,9.327385,4.756627,6.565358,-7.474347,7.024405,-5.848861,-4.523418,-1.318245,-5.204591,-2.228591,9.858032,-3.060442,-7.968391,-4.802994,3.139385,-7.661055,-5.245678,-4.273267,-3.932474,3.700864,-5.947847,6.641968,-3.342244,-3.949354,3.846796,-7.395944,5.661717,4.441122,-9.763184,-4.652296,8.646307,-4.563038,8.474137,-2.709533,7.254414,0.921873,5.871856,6.581155,-3.735896,-4.765214,-0.060113,-4.716301,3.060764,8.842557,4.579200,6.457008,-5.982421,8.735945,-0.971192,-9.524238,0.895032,-1.821328,-0.542269,-9.032142,8.091912,-7.779347,1.335361,8.250969,-6.678185,-0.847816,-3.953648,-7.169999,-6.508871,-4.820147,3.367437,-8.492839,8.625613,8.830138,-1.960829,-7.444459,-6.482643,5.442646,-1.364423,-1.973871,6.982593,-9.565559,-5.655597,1.968499,-8.772717,-1.575992,-5.275755,-5.874232,3.929400,6.637125,0.324757,8.850139,-6.972184,-9.026076,6.948330,3.854696,7.882327,-8.870866,-6.454115,-7.304041,-1.919938,5.181602,-3.308624,-0.936630,3.238915,9.211610,3.988558,0.673193,-7.926476,-5.736902,-4.670497,-3.221271,-0.064643,-8.041958,-2.701392,9.245497,3.811876,3.806585,3.826709,8.400837,0.599256,8.972444,2.509054,-6.008648,-5.702177], dtype = "float32")#candidate|569|(1144,)|const|float32
call_568 = relay.TupleGetItem(func_129_call(relay.reshape(const_569.astype('float32'), [8, 13, 11])), 0)
call_570 = relay.TupleGetItem(func_132_call(relay.reshape(const_569.astype('float32'), [8, 13, 11])), 0)
func_426_call = mod.get_global_var('func_426')
func_428_call = mutated_mod.get_global_var('func_428')
const_573 = relay.const([[4,2,-6,2,-3,10,-10,7,8,-6,-1,-4,9,-7,-10,5,2,-9,-10,-8,5,10,-4,-1,-4,-7,-3,9,4,2,7,-5,3,-9,3,9,-7,7,5,-6,-7,3,5,-2,10,-3,1,9,-2,-8,-6,-6,5,6,3,10,-4,-10,9,-10,-5,-9,10,10,-6,8,-7,-5,-8,-4,-3,-1,-9,10,2,-8,-2,3,5,-6,4,-3,10,5],[10,-1,4,-2,2,3,-1,-2,8,-6,1,-3,10,7,-3,10,-2,6,2,10,-9,9,-6,2,-6,-8,-4,3,-7,2,5,-5,2,4,1,-9,1,-10,-8,-10,5,-3,-8,-1,-9,7,4,2,5,-9,3,7,-3,-10,1,7,-7,3,9,2,-6,3,-1,7,2,-2,-3,9,-8,-8,9,5,6,-3,3,-2,-6,-10,-9,-5,-2,-3,8,10],[1,4,-3,-7,-8,-3,-8,1,-9,3,7,-6,4,3,-3,7,3,3,-10,-7,3,-1,-7,6,-3,-4,6,-1,-3,-4,9,8,3,-10,-2,-3,-6,-7,-7,1,-2,2,6,2,-10,-6,8,-3,-5,-7,-7,-3,7,6,-3,-3,3,-4,-1,-8,3,-9,8,-5,4,-2,-2,-4,3,2,8,-2,3,9,4,-4,-3,-9,7,-6,6,10,10,-9],[-5,-10,8,-5,10,4,3,-3,3,9,-8,8,2,-1,3,7,1,-2,-1,-10,1,5,4,-2,9,-4,6,-10,2,-3,5,5,-7,-5,-4,-9,10,8,-1,-10,2,9,8,6,-5,4,-9,6,-6,4,9,-4,9,-3,-4,3,9,-4,5,4,9,10,7,-5,8,-10,5,5,7,4,-3,7,-1,8,1,6,1,9,1,-8,5,7,5,-4]], dtype = "uint16")#candidate|573|(4, 84)|const|uint16
call_572 = relay.TupleGetItem(func_426_call(relay.reshape(const_573.astype('uint16'), [6, 14, 4])), 0)
call_574 = relay.TupleGetItem(func_428_call(relay.reshape(const_573.astype('uint16'), [6, 14, 4])), 0)
bop_575 = relay.not_equal(uop_565.astype('bool'), relay.reshape(bop_543.astype('bool'), relay.shape_of(uop_565))) # shape=(15, 9, 9)
output = relay.Tuple([call_526,const_527,const_528,bop_548,call_551,var_552,call_554,uop_559,call_568,const_569,call_572,const_573,bop_575,])
output2 = relay.Tuple([call_529,const_527,const_528,bop_548,call_553,var_552,call_555,uop_559,call_570,const_569,call_574,const_573,bop_575,])
func_578 = relay.Function([var_493,var_513,var_542,var_552,], output)
mod['func_578'] = func_578
mod = relay.transform.InferType()(mod)
var_579 = relay.var("var_579", dtype = "int64", shape = (15, 9, 9))#candidate|579|(15, 9, 9)|var|int64
var_580 = relay.var("var_580", dtype = "bool", shape = (15, 9, 9))#candidate|580|(15, 9, 9)|var|bool
var_581 = relay.var("var_581", dtype = "float32", shape = (15, 9, 9))#candidate|581|(15, 9, 9)|var|float32
var_582 = relay.var("var_582", dtype = "uint32", shape = (60,))#candidate|582|(60,)|var|uint32
output = func_578(var_579,var_580,var_581,var_582,)
func_583 = relay.Function([var_579,var_580,var_581,var_582,], output)
mutated_mod['func_583'] = func_583
mutated_mod = relay.transform.InferType()(mutated_mod)
var_665 = relay.var("var_665", dtype = "float64", shape = ())#candidate|665|()|var|float64
var_666 = relay.var("var_666", dtype = "float64", shape = (5, 11, 8))#candidate|666|(5, 11, 8)|var|float64
bop_667 = relay.divide(var_665.astype('float64'), var_666.astype('float64')) # shape=(5, 11, 8)
output = bop_667
output2 = bop_667
func_677 = relay.Function([var_665,var_666,], output)
mod['func_677'] = func_677
mod = relay.transform.InferType()(mod)
var_678 = relay.var("var_678", dtype = "float64", shape = ())#candidate|678|()|var|float64
var_679 = relay.var("var_679", dtype = "float64", shape = (5, 11, 8))#candidate|679|(5, 11, 8)|var|float64
output = func_677(var_678,var_679,)
func_680 = relay.Function([var_678,var_679,], output)
mutated_mod['func_680'] = func_680
mutated_mod = relay.transform.InferType()(mutated_mod)
const_698 = relay.const([[-2.956501,3.153680,-1.918735,8.981821,4.700027,8.342053,-4.418676,8.969709,-7.795673,3.431234],[-3.804918,-7.905969,-3.829599,-6.072116,-7.956568,1.798936,-3.275848,2.469910,7.327397,2.428857],[-4.463561,9.194633,-6.792297,1.595372,-1.488035,-1.997530,-5.909286,-0.006431,0.418759,9.959548],[9.438447,0.136040,-2.419860,-8.242393,5.054147,-1.503644,2.907910,-5.751965,-5.178830,-1.554997],[-8.708476,-3.187310,7.365538,-3.843691,8.019886,3.125857,-6.312901,-0.275764,7.879480,-0.483273],[-7.855214,4.398854,-4.662674,-4.420031,8.916892,-0.604588,5.981692,-6.975368,2.862351,8.943350]], dtype = "float64")#candidate|698|(6, 10)|const|float64
uop_699 = relay.cos(const_698.astype('float64')) # shape=(6, 10)
var_706 = relay.var("var_706", dtype = "float64", shape = (6, 10))#candidate|706|(6, 10)|var|float64
bop_707 = relay.right_shift(uop_699.astype('int8'), relay.reshape(var_706.astype('int8'), relay.shape_of(uop_699))) # shape=(6, 10)
output = relay.Tuple([bop_707,])
output2 = relay.Tuple([bop_707,])
func_715 = relay.Function([var_706,], output)
mod['func_715'] = func_715
mod = relay.transform.InferType()(mod)
mutated_mod['func_715'] = func_715
mutated_mod = relay.transform.InferType()(mutated_mod)
var_716 = relay.var("var_716", dtype = "float64", shape = (6, 10))#candidate|716|(6, 10)|var|float64
func_715_call = mutated_mod.get_global_var('func_715')
call_717 = func_715_call(var_716)
output = call_717
func_718 = relay.Function([var_716], output)
mutated_mod['func_718'] = func_718
mutated_mod = relay.transform.InferType()(mutated_mod)
var_744 = relay.var("var_744", dtype = "int8", shape = ())#candidate|744|()|var|int8
var_745 = relay.var("var_745", dtype = "int8", shape = (11, 11, 4))#candidate|745|(11, 11, 4)|var|int8
bop_746 = relay.subtract(var_744.astype('int8'), var_745.astype('int8')) # shape=(11, 11, 4)
bop_749 = relay.greater_equal(bop_746.astype('bool'), var_744.astype('bool')) # shape=(11, 11, 4)
bop_753 = relay.left_shift(bop_746.astype('int16'), relay.reshape(bop_749.astype('int16'), relay.shape_of(bop_746))) # shape=(11, 11, 4)
bop_758 = relay.power(bop_753.astype('float64'), var_744.astype('float64')) # shape=(11, 11, 4)
bop_767 = relay.logical_xor(var_745.astype('int64'), var_744.astype('int64')) # shape=(11, 11, 4)
bop_772 = relay.maximum(bop_767.astype('uint8'), var_744.astype('uint8')) # shape=(11, 11, 4)
output = relay.Tuple([bop_758,bop_772,])
output2 = relay.Tuple([bop_758,bop_772,])
func_775 = relay.Function([var_744,var_745,], output)
mod['func_775'] = func_775
mod = relay.transform.InferType()(mod)
var_776 = relay.var("var_776", dtype = "int8", shape = ())#candidate|776|()|var|int8
var_777 = relay.var("var_777", dtype = "int8", shape = (11, 11, 4))#candidate|777|(11, 11, 4)|var|int8
output = func_775(var_776,var_777,)
func_778 = relay.Function([var_776,var_777,], output)
mutated_mod['func_778'] = func_778
mutated_mod = relay.transform.InferType()(mutated_mod)
const_793 = relay.const([[[True,True,False,True,False,False,True,True,True,True],[False,True,False,False,True,True,True,False,False,True],[False,False,False,True,True,False,True,True,False,False],[True,False,True,True,True,True,True,False,True,False],[True,True,True,True,True,True,True,True,True,True]],[[False,True,True,False,False,True,False,True,False,False],[False,True,False,True,True,True,True,False,True,False],[True,True,True,False,False,True,True,True,False,False],[True,False,True,False,False,False,True,False,True,True],[False,True,True,True,True,False,False,False,False,False]],[[False,True,True,True,False,True,False,True,True,False],[False,False,False,True,False,False,True,False,False,True],[True,True,False,False,False,True,False,False,True,True],[False,True,False,True,True,False,True,True,False,False],[False,False,False,False,True,False,True,True,False,True]],[[False,False,False,False,False,False,False,True,True,True],[False,True,True,False,True,False,True,False,True,True],[False,True,True,False,False,False,False,True,True,True],[False,True,True,True,False,True,True,False,False,False],[True,False,False,False,True,True,False,False,True,False]],[[True,True,True,False,True,True,False,True,False,False],[False,True,True,True,False,True,True,True,True,True],[False,True,False,False,True,True,True,False,True,False],[False,False,True,True,False,False,True,False,True,True],[False,False,False,False,True,False,True,False,False,True]],[[False,False,False,False,False,True,True,True,True,False],[True,True,False,False,True,False,False,False,False,True],[True,True,True,False,True,True,False,False,True,False],[True,True,False,True,True,False,True,False,True,False],[False,False,False,False,False,True,False,False,True,True]],[[False,False,False,True,False,True,False,True,True,False],[True,True,True,False,False,True,False,True,True,False],[False,False,False,False,False,True,True,True,True,False],[False,True,False,False,True,True,True,True,False,False],[True,True,True,True,True,False,False,False,True,True]],[[False,True,True,False,True,False,True,False,True,True],[False,True,False,True,True,True,False,False,True,False],[False,False,True,False,True,True,False,True,True,True],[True,True,True,False,True,False,False,True,True,True],[False,True,False,False,False,True,False,False,True,True]]], dtype = "bool")#candidate|793|(8, 5, 10)|const|bool
var_794 = relay.var("var_794", dtype = "bool", shape = (8, 5, 10))#candidate|794|(8, 5, 10)|var|bool
bop_795 = relay.logical_or(const_793.astype('bool'), relay.reshape(var_794.astype('bool'), relay.shape_of(const_793))) # shape=(8, 5, 10)
func_578_call = mod.get_global_var('func_578')
func_583_call = mutated_mod.get_global_var('func_583')
var_799 = relay.var("var_799", dtype = "int64", shape = (1215,))#candidate|799|(1215,)|var|int64
const_800 = relay.const([-2,7,-7,-1,5,-6,3,7,1,-6,-4,-5,-4,-9,7,-10,-4,-2,9,6,9,3,5,9,7,-8,10,-9,2,-3,-3,-8,10,-8,3,3,9,-4,-5,10,-8,-3,10,5,2,-3,-3,-4,10,3,7,5,-1,10,-6,8,-7,-4,-4,10], dtype = "uint32")#candidate|800|(60,)|const|uint32
call_798 = relay.TupleGetItem(func_578_call(relay.reshape(var_799.astype('int64'), [15, 9, 9]), relay.reshape(var_799.astype('bool'), [15, 9, 9]), relay.reshape(var_799.astype('float32'), [15, 9, 9]), relay.reshape(const_800.astype('uint32'), [60,]), ), 2)
call_801 = relay.TupleGetItem(func_583_call(relay.reshape(var_799.astype('int64'), [15, 9, 9]), relay.reshape(var_799.astype('bool'), [15, 9, 9]), relay.reshape(var_799.astype('float32'), [15, 9, 9]), relay.reshape(const_800.astype('uint32'), [60,]), ), 2)
output = relay.Tuple([bop_795,call_798,var_799,const_800,])
output2 = relay.Tuple([bop_795,call_801,var_799,const_800,])
func_803 = relay.Function([var_794,var_799,], output)
mod['func_803'] = func_803
mod = relay.transform.InferType()(mod)
var_804 = relay.var("var_804", dtype = "bool", shape = (8, 5, 10))#candidate|804|(8, 5, 10)|var|bool
var_805 = relay.var("var_805", dtype = "int64", shape = (1215,))#candidate|805|(1215,)|var|int64
output = func_803(var_804,var_805,)
func_806 = relay.Function([var_804,var_805,], output)
mutated_mod['func_806'] = func_806
mutated_mod = relay.transform.InferType()(mutated_mod)
const_808 = relay.const([[[2.948446,-6.971680,-7.909432,-0.393807,5.658835,6.485216],[-8.654926,3.076794,-3.158289,-9.321876,-4.456646,7.995928],[8.224027,1.450446,-9.128812,2.416293,2.018368,-2.396628],[7.770782,3.880407,8.297912,-3.285446,4.566026,-6.444944],[-9.426025,1.703975,6.395557,-4.363820,-5.556734,-6.703030],[-3.235481,-4.618861,2.901688,9.594180,0.513351,3.727758],[5.146437,-0.382273,3.563189,-5.041142,0.764770,-2.614494],[5.047951,-5.749781,7.264433,-6.539659,-4.151503,4.803771],[5.783137,1.752671,6.473731,0.454538,-4.973623,-8.399787],[-5.209967,1.168394,-9.509878,-1.898475,-9.846231,4.791628],[4.561114,-4.506166,-1.711115,-3.175561,-1.832445,-1.880308],[-3.016549,1.999305,-9.479692,2.223037,-1.244945,-8.241603],[-7.741322,-1.403690,0.013843,-7.066713,0.264068,7.921063],[-6.254087,0.064543,7.009270,4.429048,4.882643,-2.272433],[-4.699556,-1.746333,2.937991,6.293951,7.633007,-7.924017]]], dtype = "float64")#candidate|808|(1, 15, 6)|const|float64
var_809 = relay.var("var_809", dtype = "float64", shape = (16, 15, 6))#candidate|809|(16, 15, 6)|var|float64
bop_810 = relay.divide(const_808.astype('float64'), var_809.astype('float64')) # shape=(16, 15, 6)
output = bop_810
output2 = bop_810
func_813 = relay.Function([var_809,], output)
mod['func_813'] = func_813
mod = relay.transform.InferType()(mod)
mutated_mod['func_813'] = func_813
mutated_mod = relay.transform.InferType()(mutated_mod)
var_814 = relay.var("var_814", dtype = "float64", shape = (16, 15, 6))#candidate|814|(16, 15, 6)|var|float64
func_813_call = mutated_mod.get_global_var('func_813')
call_815 = func_813_call(var_814)
output = call_815
func_816 = relay.Function([var_814], output)
mutated_mod['func_816'] = func_816
mutated_mod = relay.transform.InferType()(mutated_mod)
var_853 = relay.var("var_853", dtype = "int16", shape = (4, 9, 7))#candidate|853|(4, 9, 7)|var|int16
var_854 = relay.var("var_854", dtype = "int16", shape = (4, 9, 7))#candidate|854|(4, 9, 7)|var|int16
bop_855 = relay.bitwise_or(var_853.astype('int16'), relay.reshape(var_854.astype('int16'), relay.shape_of(var_853))) # shape=(4, 9, 7)
uop_859 = relay.log2(bop_855.astype('float64')) # shape=(4, 9, 7)
bop_862 = relay.mod(var_853.astype('float32'), relay.reshape(bop_855.astype('float32'), relay.shape_of(var_853))) # shape=(4, 9, 7)
output = relay.Tuple([uop_859,bop_862,])
output2 = relay.Tuple([uop_859,bop_862,])
func_869 = relay.Function([var_853,var_854,], output)
mod['func_869'] = func_869
mod = relay.transform.InferType()(mod)
mutated_mod['func_869'] = func_869
mutated_mod = relay.transform.InferType()(mutated_mod)
func_869_call = mutated_mod.get_global_var('func_869')
var_871 = relay.var("var_871", dtype = "int16", shape = (4, 9, 7))#candidate|871|(4, 9, 7)|var|int16
var_872 = relay.var("var_872", dtype = "int16", shape = (4, 9, 7))#candidate|872|(4, 9, 7)|var|int16
call_870 = func_869_call(var_871,var_872,)
output = call_870
func_873 = relay.Function([var_871,var_872,], output)
mutated_mod['func_873'] = func_873
mutated_mod = relay.transform.InferType()(mutated_mod)
var_875 = relay.var("var_875", dtype = "float64", shape = (12, 7, 5))#candidate|875|(12, 7, 5)|var|float64
uop_876 = relay.tan(var_875.astype('float64')) # shape=(12, 7, 5)
output = relay.Tuple([uop_876,])
output2 = relay.Tuple([uop_876,])
func_881 = relay.Function([var_875,], output)
mod['func_881'] = func_881
mod = relay.transform.InferType()(mod)
mutated_mod['func_881'] = func_881
mutated_mod = relay.transform.InferType()(mutated_mod)
var_882 = relay.var("var_882", dtype = "float64", shape = (12, 7, 5))#candidate|882|(12, 7, 5)|var|float64
func_881_call = mutated_mod.get_global_var('func_881')
call_883 = func_881_call(var_882)
output = call_883
func_884 = relay.Function([var_882], output)
mutated_mod['func_884'] = func_884
mutated_mod = relay.transform.InferType()(mutated_mod)
var_928 = relay.var("var_928", dtype = "float32", shape = (4, 6, 14))#candidate|928|(4, 6, 14)|var|float32
uop_929 = relay.sinh(var_928.astype('float32')) # shape=(4, 6, 14)
uop_932 = relay.log(uop_929.astype('float32')) # shape=(4, 6, 14)
bop_934 = relay.bitwise_xor(uop_932.astype('int8'), relay.reshape(var_928.astype('int8'), relay.shape_of(uop_932))) # shape=(4, 6, 14)
uop_938 = relay.asinh(uop_929.astype('float64')) # shape=(4, 6, 14)
bop_945 = relay.bitwise_and(uop_932.astype('int64'), relay.reshape(var_928.astype('int64'), relay.shape_of(uop_932))) # shape=(4, 6, 14)
output = relay.Tuple([bop_934,uop_938,bop_945,])
output2 = relay.Tuple([bop_934,uop_938,bop_945,])
func_948 = relay.Function([var_928,], output)
mod['func_948'] = func_948
mod = relay.transform.InferType()(mod)
var_949 = relay.var("var_949", dtype = "float32", shape = (4, 6, 14))#candidate|949|(4, 6, 14)|var|float32
output = func_948(var_949)
func_950 = relay.Function([var_949], output)
mutated_mod['func_950'] = func_950
mutated_mod = relay.transform.InferType()(mutated_mod)
var_959 = relay.var("var_959", dtype = "float32", shape = (13, 10, 14))#candidate|959|(13, 10, 14)|var|float32
uop_960 = relay.log(var_959.astype('float32')) # shape=(13, 10, 14)
bop_963 = relay.maximum(uop_960.astype('float64'), relay.reshape(var_959.astype('float64'), relay.shape_of(uop_960))) # shape=(13, 10, 14)
func_284_call = mod.get_global_var('func_284')
func_290_call = mutated_mod.get_global_var('func_290')
const_969 = relay.const([False,True,True,False,True,False,False,True,True,True,True,False,False,False,False,True,True,True,False,True,False,False,True,True,False,True,False,False,True,False,True,True,True,False,True,True,True,True,False,False,False,True,False,True,False,False,False,True,False,True,False,False,True,False,True,False,True,False,False,False,False,True,True,False,True,False,True,False,True,True,False,False,True,False,True,True,True,True,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,True,True,False,True,False,True,False,True,True,False,False,False,True,True,True,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,False,True,False,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,False,True,False,True,False,False,True,False,False,True,True,False,False,False,True,False,True,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,False,False,True,True,False,False,True,False,False,False,True,False,False,False,True,True,True,False,True,False,False,True,True,False,False,True,False,False,False,True,False,False,True,True,True,False,True,True,False,True,True,True,False,True,False,True,False,True,True,True,True,True,True,False,True,True,False,False,True,False,True,True,False,False,False,True,False,True,False,False,False,False,False,False,True,False,True,False,True,False,True,False,False,False,False,True,True,False,True,False,False,False,True,False,True,True,False,True,False,False,False,True,False,False,True,False,False,True,False,True,True,True,True,True,False,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,True,True,True,True,True,True,True,True,False,False,True,True,True,False,False,True,False,True,False,True,False,True,False,False,False,False,False,False,False,False,False,True,True,False,False,False,True,False,True,True,False,False,False,True,False,True,False,False,False,False,True,True,False,True,True,False,False,True,False,False,True,True,True,False,True,True,False,False,True,True,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,True,False,False,True,False,True,True,True,True,True,True,True,False,False,True,False,False,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,False,False,True,True,True,True,True,False,True,False,False,True,True,False,True,False,False,False,False,False,True,True,False,True,False,False,False,False,True,True,True,False,True,False,True,False,False,True,True,True,True,True,False,False,True,True,True,True,True,True,True,True,False,False,False,False,False,True,False,False,False,True,False,True,False,True,False,False,False,True,True,True,False,True,False,True,False,True,True,True,False,False,False,True,False,True,True,True,False,False,True,False,True,True,True,True,False,True,True,True,False,False,False,False,True,False,False,True,True,True,True,False,True,True,True,False,False,False,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,False,True,False,False,True,True,False,False,False,False,True,True,False,True,False,False,False,True,True,False,False,False,False,True,True,True,True,False,False,False,False,False,True,False,True,False,True,True,False,False,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,False,False,True,True,False,False,True,False,False,True,False,True,True,True,True,False,False,True,True,False,False,True,True,True,False,False,False,True,False,False,False,False,False,True,True,False,False,False,False,False,True,False,True,True,True,False,True,True,True,True,False,True,False,True,True,False,True,True,True,True,True,True,True,True,True,False,False,True,False,False,True,False,True,False,True,False,True,False,False,False,True,False,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,True,True,True,False,False,True,True,False,False,True,True,False,True,False,False,True,False,True,True,True,True,False,True,True,False,True,False,False,True,False,True,False,True,False,False,True,True,True,True,True,True,True,True,False,True,True,False,True,True,True,False,False,True,True,True,True,True,True,False,False,True,True,False,False,True,True,True,False,False,True,True,True,False,False,False,True,False,False,False,True,True,False,True,False,True,True,True,False,False,True,False,False,False,True,False,True,False,False,True,False,True,False,False,True,True,False,False,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,True,False,True,True,False,True,True,True,False,False,False,False,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,True,True,False,True,False,True,True,True,True,False,True,False,False,True,False,False,True,True,False,False,True,False,False,True,True,True,True,True,False,True,False,True,False,False,True,False,True,False,True,False,False,False,True,True,False,True,True,True,True,False,True,False,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False,True,False,True,False,False,False,True,True,False,False,True,True,True,True,False,False,True,False,False,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,False,False,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,False,True,False,False,True,False,False,False,True,True,False,True,False,False,False,True,False,True,False,False,False,True,True,False,False,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,False,True,False,False,True,False,True,True,False,True,False,True,True,True,True,False,True,True,True,False,True,True,False,True,True,False,True,False,True,False,False,False,False,False,False,True,False,False,False,False,True,True,True,True,False,True,True,True,False,True,False,True,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,True,True,True,True,True,True,False,True,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,True,False,False,False,False,True,False,False,True,True,True,False,True,False,True,False,False,False,False,True,True,True,True,True,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,True,False,False,True,True,False,False,True,False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,False,False,False,True,True,False,False,False,True,False,True,False,False,True,False,True,False,True,True,False,False,False,True,True,True,True,False,True,True,False,True,True,True,True,False,False,False,False,True,True,False,False,False,False,True,False,False,True,True,True,True,False,False,True,True,True,False,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,False,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,False,False,False,False,True,False,True,True,True,True,False,True,True,False,False,False,False,False,False,False,True,True,False,False,False,False,True,False,True,True,True,False,True,True,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,True,False,True,True,True,True,True,True,True,False,False,False,False,False,True,False,False,False,False,True,True,False,True,False,True,False,False,False,True,True,False,False,False,True,True,True,True,False,False,False,False,False,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,False,True,True,True,True,True,True,False,False,False,True,True,True,False,True,True,False,False,False,False,True,True,False,False,True,True,False,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,True,False,True,True,False,False,True,True,False,False,True,True,True,True,False,False,False,True,True,True,False,True,False,False,False,False,True,True,False,True,False,True,True,True,False], dtype = "bool")#candidate|969|(1584,)|const|bool
var_970 = relay.var("var_970", dtype = "float32", shape = (84,))#candidate|970|(84,)|var|float32
call_968 = relay.TupleGetItem(func_284_call(relay.reshape(const_969.astype('bool'), [12, 11, 12]), relay.reshape(const_969.astype('bool'), [12, 11, 12]), relay.reshape(var_970.astype('float32'), [84,]), relay.reshape(const_969.astype('float64'), [12, 11, 12]), ), 4)
call_971 = relay.TupleGetItem(func_290_call(relay.reshape(const_969.astype('bool'), [12, 11, 12]), relay.reshape(const_969.astype('bool'), [12, 11, 12]), relay.reshape(var_970.astype('float32'), [84,]), relay.reshape(const_969.astype('float64'), [12, 11, 12]), ), 4)
uop_973 = relay.atan(bop_963.astype('float32')) # shape=(13, 10, 14)
output = relay.Tuple([call_968,const_969,var_970,uop_973,])
output2 = relay.Tuple([call_971,const_969,var_970,uop_973,])
func_975 = relay.Function([var_959,var_970,], output)
mod['func_975'] = func_975
mod = relay.transform.InferType()(mod)
var_976 = relay.var("var_976", dtype = "float32", shape = (13, 10, 14))#candidate|976|(13, 10, 14)|var|float32
var_977 = relay.var("var_977", dtype = "float32", shape = (84,))#candidate|977|(84,)|var|float32
output = func_975(var_976,var_977,)
func_978 = relay.Function([var_976,var_977,], output)
mutated_mod['func_978'] = func_978
mutated_mod = relay.transform.InferType()(mutated_mod)
var_996 = relay.var("var_996", dtype = "int16", shape = (15, 4, 14))#candidate|996|(15, 4, 14)|var|int16
const_997 = relay.const([[[-5,10,10,10,7,-3,-10,-2,8,-9,3,-7,-5,-6],[-1,1,-1,-5,-7,6,1,-2,2,-6,-4,-7,3,1],[1,5,8,-10,-6,-4,10,-6,9,3,-4,4,-4,-6],[4,-4,-5,-9,-4,-3,-3,-5,7,3,-1,-9,-5,-4]],[[-3,5,10,-6,-8,-7,3,-5,9,9,-3,-3,-1,1],[5,-5,10,8,9,4,-1,10,-10,-2,6,6,6,-4],[-2,-2,-4,5,-7,3,-1,3,-7,5,9,8,-9,-3],[-6,3,-3,2,4,-1,-4,-8,1,-4,6,6,9,1]],[[10,4,-2,-1,3,-2,3,-1,10,-2,1,-9,-7,4],[-9,-3,-8,5,5,-5,-1,7,-2,1,-8,-3,8,5],[7,1,-4,-6,-3,-4,-7,7,8,2,-2,2,-5,-10],[6,-10,5,-8,-6,-3,5,7,6,10,10,6,4,-4]],[[2,3,9,1,-7,-5,5,-3,-5,4,6,7,-3,-10],[10,7,-5,-2,-6,-10,-3,-7,5,1,-2,-3,-9,4],[3,1,5,-5,-10,7,-9,-10,-4,-3,7,-10,10,-7],[6,-5,5,-4,5,5,8,1,2,2,-8,-4,-10,6]],[[-10,1,6,4,-1,6,-10,1,-4,5,-4,2,1,-9],[-2,3,9,7,9,9,-2,5,-7,-7,-1,-8,1,-8],[-8,5,1,-4,-1,6,-4,7,-1,7,-9,8,9,4],[8,2,9,7,-5,-2,4,6,2,-4,-6,-8,5,6]],[[6,6,3,1,7,-6,1,-1,-4,2,10,9,-5,2],[5,-8,9,-4,-3,-8,2,-3,10,7,10,-9,5,6],[-5,2,8,2,3,4,10,6,-4,7,4,-7,3,-7],[-6,-10,3,2,3,3,-1,-2,8,6,-9,-7,7,9]],[[2,10,-1,10,4,9,7,3,-8,-10,5,8,9,8],[9,-9,5,10,2,2,-1,1,-3,-7,-1,7,5,9],[1,3,5,3,-3,-6,3,3,8,-4,-10,2,-10,-5],[-2,-2,-2,-5,8,6,10,-8,-1,5,-7,-2,9,-6]],[[1,-5,-6,6,-3,4,8,3,-6,-1,4,-8,-6,-7],[2,-6,-7,-6,10,-2,4,2,-7,-1,8,2,7,-4],[-10,-8,4,-7,-4,3,-6,7,-2,3,-6,4,6,7],[-6,8,1,10,9,6,2,-9,6,-10,5,-8,10,4]],[[-8,1,1,1,7,-7,1,-2,-5,-1,5,9,-5,-10],[9,-2,6,-10,-5,10,2,-6,1,8,-9,6,10,-3],[-2,-1,8,7,-7,2,8,3,9,7,-9,7,3,1],[1,-2,6,4,-9,9,-10,9,3,1,1,-6,-2,8]],[[8,-3,-3,2,10,-5,-8,6,-5,9,-7,4,8,-10],[-4,-8,-8,-3,-7,10,2,-8,-10,-10,1,5,-8,8],[10,8,8,8,8,5,-6,-7,-8,9,-1,-5,8,2],[10,4,10,3,10,4,-5,-7,3,9,9,1,9,-4]],[[-5,-3,-6,4,8,6,1,8,-8,-6,9,4,3,7],[1,-9,8,1,8,2,5,6,9,-3,-10,-9,4,6],[7,9,7,-6,9,-10,5,5,-3,7,6,10,6,-5],[-1,10,-6,-7,9,9,3,7,3,-7,2,8,-3,-3]],[[6,-1,-1,-6,-2,-2,-8,-8,-2,8,-6,2,10,-9],[-10,6,-2,-4,10,2,5,-2,6,-6,7,-6,1,-3],[9,8,4,-5,10,9,-9,3,-6,-9,-5,1,-8,-4],[-4,-4,1,-2,3,-3,-7,7,5,2,-3,4,-7,-1]],[[-1,-6,4,-7,9,1,-1,8,-9,5,-5,5,-9,7],[1,1,-2,6,6,-10,7,10,6,-5,3,8,7,7],[2,2,-1,-5,9,-9,-7,3,-2,1,10,-2,-5,2],[-4,8,2,-9,-2,-4,-8,-7,3,8,-2,1,4,-5]],[[-6,1,-8,7,-10,3,-3,-6,-1,5,-2,7,-3,-5],[4,5,1,-3,8,8,-6,-1,-7,9,1,-10,-8,-8],[7,-9,-5,2,-2,-4,-5,-8,3,-8,-6,8,3,-10],[-7,4,-4,-5,-7,5,-2,-8,3,-7,-5,7,-4,-1]],[[-3,9,-1,-1,6,-4,-5,-2,9,-5,6,-9,7,-4],[-10,-9,8,-2,1,-2,1,9,4,-4,-9,-5,1,8],[9,10,-9,-2,-6,-5,-10,-3,-2,7,-2,-1,10,-10],[2,-8,1,2,-8,8,9,-3,2,-9,8,2,-7,-5]]], dtype = "int16")#candidate|997|(15, 4, 14)|const|int16
bop_998 = relay.subtract(var_996.astype('int16'), relay.reshape(const_997.astype('int16'), relay.shape_of(var_996))) # shape=(15, 4, 14)
func_948_call = mod.get_global_var('func_948')
func_950_call = mutated_mod.get_global_var('func_950')
const_1003 = relay.const([[4.297043,-1.982731],[-9.707884,6.754640],[5.307686,-1.277018],[-7.827297,2.318658],[5.648971,8.611101],[-7.897112,-7.696156],[-6.584323,-0.550385],[-3.279481,-1.238153],[1.747874,-2.532025],[3.322809,5.750504],[9.852444,-9.484851],[-7.721730,4.998133],[6.760539,7.192916],[7.258988,9.505771],[8.358686,-1.435855],[2.441318,3.864114],[2.164097,-7.920855],[-0.213174,4.815977],[5.280595,1.055039],[-2.551276,8.455578],[2.380387,2.643042],[4.424309,-7.307488],[-4.659850,-4.152621],[4.723403,-1.125557],[5.410029,2.014701],[-2.223667,0.055444],[-7.641302,7.081087],[0.677201,3.995228],[3.802060,-8.743097],[6.693310,8.834746],[7.016368,0.465758],[0.270132,-6.610997],[7.225313,-4.091193],[-4.783619,7.913713],[-7.323864,8.453439],[-9.973508,0.146936],[1.623855,-0.775105],[-8.714792,-2.068118],[5.009341,6.756130],[8.701927,1.509197],[9.135980,-0.611949],[5.251472,6.487440],[-6.786578,0.117055],[4.578745,-7.590827],[-2.166540,2.324871],[-0.227714,8.524344],[-5.595143,6.633449],[-4.419249,-6.927873],[-8.253222,5.519319],[-2.228679,-6.408437],[-0.543796,3.829558],[-2.328401,-8.962866],[-4.371646,3.426747],[-0.295980,-6.146839],[7.578720,-6.535205],[-5.457124,-5.452941],[-9.777192,-6.733640],[-7.448073,8.016579],[8.364684,-4.739803],[7.082576,-8.948165],[-6.717455,-4.882252],[-2.666669,9.559707],[-6.261628,8.476759],[-7.524031,-8.329720],[-9.820585,-7.950455],[7.376611,2.704794],[-4.215255,-9.894550],[-2.354377,-4.604754],[-0.863928,5.338402],[0.098621,9.194836],[9.438906,2.820717],[-2.248203,-2.961651],[-6.184762,6.628662],[-3.597995,-5.492556],[-8.898632,-0.512556],[-7.878304,6.441451],[-1.531141,7.576434],[-7.222708,0.054440],[-7.274742,0.689917],[-4.721720,3.280117],[-4.955249,-6.419978],[5.972868,-7.282040],[1.476476,-2.920329],[7.095886,6.713805],[3.298013,0.592165],[2.018428,2.245427],[4.154235,-6.804685],[-8.141168,4.676896],[-2.127892,9.504041],[-8.874144,7.175847],[7.477495,8.183181],[0.006826,-6.189462],[-5.536794,-6.378999],[-3.368220,0.968946],[4.028233,-0.419527],[8.886162,-2.757662],[0.138672,2.391629],[8.222487,-9.205635],[-5.350584,4.775090],[-0.848166,-0.780454],[-8.402606,-9.773716],[-4.236227,-6.495608],[0.668528,1.397557],[-9.080968,-0.785745],[-5.366052,-7.113292],[-3.554481,-7.374896],[-5.178539,-1.764187],[0.092290,0.068558],[-0.669739,-8.706357],[3.000017,-4.565843],[8.072745,8.051974],[6.381736,-6.735314],[5.722566,-0.825427],[6.324472,9.003729],[-6.968383,-4.776563],[-9.620630,0.650762],[8.037904,-2.431512],[3.208627,3.701696],[-4.978214,-1.131916],[-4.558974,0.840313],[7.158606,2.483675],[-5.577718,1.730565],[-2.686188,-9.817532],[6.164350,6.737966],[-4.983664,-5.748240],[-8.164438,-6.051916],[-9.781247,7.688828],[2.819843,3.966039],[-2.980098,8.480215],[7.483341,1.017972],[-4.754589,-8.847220],[-7.402448,-6.269778],[3.055776,-9.105572],[-0.313908,4.019981],[9.590015,9.470548],[8.040721,-1.430996],[1.716284,3.151352],[-6.330082,1.817306],[-3.207420,-3.542947],[5.686443,0.886183],[8.022333,6.033670],[1.508779,0.925871],[0.280186,9.577960],[6.908457,-8.985789],[-0.599631,2.863488],[-2.883598,9.265868],[-9.465282,9.791503],[9.456224,2.773771],[-4.851372,-2.261467],[8.667534,3.355418],[2.785421,7.636502],[-0.317326,4.867273],[2.423243,6.468803],[6.001787,0.109267],[-0.460230,-1.716921],[5.185445,4.951210],[-4.823472,2.442006],[9.217527,-0.358861],[-5.933808,4.890321],[4.806562,8.108377],[9.179333,-9.659167],[5.085565,-1.900511],[7.307481,3.619651],[-5.324412,-6.437932],[1.532762,-3.034615],[-4.565803,7.636805],[5.654999,5.223971],[9.958173,0.409488]], dtype = "float32")#candidate|1003|(168, 2)|const|float32
call_1002 = relay.TupleGetItem(func_948_call(relay.reshape(const_1003.astype('float32'), [4, 6, 14])), 0)
call_1004 = relay.TupleGetItem(func_950_call(relay.reshape(const_1003.astype('float32'), [4, 6, 14])), 0)
uop_1012 = relay.tan(call_1002.astype('float32')) # shape=(4, 6, 14)
uop_1014 = relay.tan(call_1004.astype('float32')) # shape=(4, 6, 14)
bop_1024 = relay.multiply(uop_1012.astype('int8'), relay.reshape(call_1002.astype('int8'), relay.shape_of(uop_1012))) # shape=(4, 6, 14)
bop_1027 = relay.multiply(uop_1014.astype('int8'), relay.reshape(call_1004.astype('int8'), relay.shape_of(uop_1014))) # shape=(4, 6, 14)
bop_1028 = relay.greater(uop_1012.astype('bool'), relay.reshape(bop_1024.astype('bool'), relay.shape_of(uop_1012))) # shape=(4, 6, 14)
bop_1031 = relay.greater(uop_1014.astype('bool'), relay.reshape(bop_1027.astype('bool'), relay.shape_of(uop_1014))) # shape=(4, 6, 14)
output = relay.Tuple([bop_998,const_1003,bop_1028,])
output2 = relay.Tuple([bop_998,const_1003,bop_1031,])
func_1035 = relay.Function([var_996,], output)
mod['func_1035'] = func_1035
mod = relay.transform.InferType()(mod)
var_1036 = relay.var("var_1036", dtype = "int16", shape = (15, 4, 14))#candidate|1036|(15, 4, 14)|var|int16
output = func_1035(var_1036)
func_1037 = relay.Function([var_1036], output)
mutated_mod['func_1037'] = func_1037
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1044 = relay.var("var_1044", dtype = "float32", shape = (1,))#candidate|1044|(1,)|var|float32
uop_1045 = relay.tan(var_1044.astype('float32')) # shape=(1,)
func_206_call = mod.get_global_var('func_206')
func_211_call = mutated_mod.get_global_var('func_211')
const_1050 = relay.const([6.918214,-4.359060,-4.380208,5.163050,9.634511,-2.800105,-9.105243,-3.786375,5.733358,7.346866,-6.006394,-7.400191,-8.226526,-0.666487,-6.320519,1.157822,-7.383394,7.734369,-2.294346,-1.313189,0.933150,-9.465644,-5.001564,-4.152419,-5.518056,6.340021,-4.919782,-3.355129,8.076796,-4.306584,3.543214,5.848006,5.765401,-1.362844,-5.837893,3.968483,4.489388,0.445001,0.155415,-4.542247,5.548560,-8.999332,2.490510,9.834597,9.910464,-4.378422,0.180455,3.715093,-7.675567,2.931782,-1.926800,-7.785890,-5.921693,-8.655958,1.902191,5.527124,-6.873840,3.418564,-2.679771,-6.897254,-8.753025,-0.402719,0.348674,7.573265,-6.071403,-6.353512,8.716923,-3.664875,-0.885064,1.681906,1.153836,-2.480929,6.632583,-4.560960,-4.303216,0.198071,3.375511,1.477124,6.806142,5.421208,6.565542,6.980441,-2.958439,-9.311243], dtype = "float32")#candidate|1050|(84,)|const|float32
var_1051 = relay.var("var_1051", dtype = "float32", shape = (504,))#candidate|1051|(504,)|var|float32
const_1052 = relay.const([-1.703422,-2.728761,-3.258344,0.412219,-8.250739,-7.759116,-5.827741,2.387916,0.727763,-0.946692,-3.746767,6.204024,-4.392510,-5.974873,9.322463,5.896651,8.262804,-6.611526,-4.701920,7.596499,-3.688324,-8.716767,6.859450,-6.250509,2.202298,-1.769413,4.101565,4.802489,-2.849076,5.356675,5.405244,2.190346,5.176969,7.767563,0.882097,-1.660577,-3.839740,4.687908,0.788987,-4.376780,-9.360621,-0.527750,8.684083,8.015271,9.201812,4.384030,-3.024777,-2.853125,-0.781101,4.616713,-6.273631,-2.754806,-8.708547,3.374965,0.697757,-1.646277,-4.371328,-0.129574,1.766499,2.486972,-5.950917,6.796789,5.419818,-6.482825,7.821653,-1.918146,-4.558419,8.117067,-2.245917,-3.152844,-3.266683,4.155533,1.555056,-9.929696,3.006363,-8.468937,6.945032,-3.358442,1.550158,-7.029966,-0.628394,-6.453076,8.279346,6.993039,-5.411911,-5.175916,5.302929,-7.095086,9.980049,6.778547,-5.568007,-6.716997,7.441141,7.234251,-8.658218,-5.117119,-7.150560,3.433247,-2.544678,2.770612,-3.211444,7.801700,9.890920,-4.625293,0.686360,6.843486,1.452750,9.096557,5.049128,8.323295,-1.263183,-0.976108,0.378233,2.297161,7.281781,-1.301412,-2.154196,4.901596,8.924900,-9.218215,3.878616,5.140113,5.048216,7.949869,5.234407,-7.196361,-2.039172,-6.580288,-8.218319,3.454127,-5.539612,5.717290,-2.792895,-4.653511,3.190095,-8.284476,-2.767214,0.565395,-4.275320,-7.550393,-8.314625,5.411177,-9.312756,-3.923343,7.994181,-2.345755,2.389163,-9.039200,-9.886378,-6.963974,9.486641,-6.575511,-7.115866,-8.533581,-6.451366,-9.934766,9.686904,-9.421116,2.084391,3.934507,-7.319033,-7.986131,4.223230,6.734865,6.900584,7.529831,-6.254664,-3.288038,-1.425601,3.889633,-8.799685,9.459563,-5.289634,2.289442,-6.996893,-5.518193,-7.927658,-5.214384,-2.648607,9.231463,2.282159,-7.585948,-8.579463,-6.075113,7.100496,3.333458,0.400592,-6.741468,-9.249963,2.969998,-6.230169,-7.262262,-2.172702,-9.562242,-7.541442,-0.251700,0.090521,-9.595423,-1.010922,-7.074279,-3.937355,7.131391,-0.184396,3.227194,5.359480,6.551940,1.505450,-0.948963,-9.525840,-9.486584,-2.858177,8.650071,4.702423,6.350249,-9.336277,-5.850408,8.947584,0.220950,6.456890,1.354067,9.975972,-1.689594,-1.254078,1.224831,7.079491,7.308620,-1.640370,5.528011,-0.779874,1.230592,-0.486251,-0.500320,2.784322,8.827393,-2.843207,3.444053,8.799148,-0.173538,-7.989823,3.465636,6.811842,4.106803,2.022527,-1.817512,1.932553,-5.556827,4.467727,-6.305701,-2.140148,6.104062,-5.178534,1.575984,-3.891174,6.505112,1.070729,-2.893435,2.299927,-6.048200,3.853291,8.220741,4.571421,-3.461058,-2.539111,2.171915,9.197597,9.102793,-1.164386,3.661033,3.327185,8.485368,3.375508,2.452135,-3.163552,0.547805,-7.132187,-6.426984,1.696001,-4.126577,1.435938,-1.466624,-3.776422,-3.875224,-1.977745,3.976123,-2.504923,-6.588481,9.368174,9.067403,-0.587859,0.502990,4.769406,-8.924215,-3.506672,-0.341160,-6.558483,-6.620077,-3.563011,1.424637,5.735251,-9.155053,-9.494220,5.233718,3.986933,0.933386,-7.088627,-4.722991,-4.835942,-4.256766,-5.646757,6.060667,6.114626,8.534494,-7.367968,9.315861,-3.987382,-9.975195,-0.305189,-6.377153,-0.692591,1.853411,-5.358344,-8.714994,-0.223738,4.006182,5.905152,-3.342395,6.213605,-1.650217,-0.313752,5.733092,-9.498029,4.732084,8.309856,-4.485983,4.549090,-9.603913,4.493656,3.751311,9.917657,-8.359299,6.062210,-0.414578,1.316398,-8.313662,-3.899185,-3.616360,7.668161,0.952707,4.355359,-1.517178,-1.739164,-3.610939,9.303521,7.986246,-4.356877,7.642593,-3.167833,-9.681567,2.935093,-4.529530,-1.320714,-3.947900,-7.691083,3.315732,1.587933,8.193481,-1.858175,0.108433,3.160118,0.129911,3.750080,1.447114,-8.347098,6.864895,-7.131678,4.503136,-2.757701,8.962105,5.850732,-3.547097,-6.434662,-3.331317,4.998140,1.804099,0.450271,-3.128444,1.830605,-2.066889,-0.327253,2.117074,8.555933,0.742036,-4.242066,5.361318,4.163470,-7.060611,1.664643,5.314512,7.139965,7.883743,2.330010,5.819668,8.214456,-1.136415,5.457828,-0.681405,-3.585126,-9.232257,-9.606166,-1.901661,8.840381,-4.464589,-1.506884,7.351537,-8.271619,-0.121762,-0.401885,-2.838397,9.222933,5.919291,1.604913,-0.098727,-2.793931,-1.101401,-1.791157,-4.479121,-5.201752,-6.028283,-3.773684,-2.515805,-6.868716,-3.786109,-8.193622,-6.435439,5.174218,-1.084003,3.780524,-8.305008,8.232525,8.212390,-5.159395,5.135902,-1.047858,4.894395,4.857561,8.551548,-7.170497,-3.369969,-6.162501,-1.213917,9.526793,-3.635368,6.088390,-3.216788,-5.086024,-9.901951,9.762292,2.933557,7.314581,2.524259,-4.176521,-4.395346,-7.202445,6.066736,7.506253,1.314658,-7.777346,-7.506469,-4.607246,-2.009719,-4.939651,0.196661,-8.710075,4.536626,7.458836,-9.372543,2.880283,-3.218529,2.656139,-9.810060,-9.173572,8.414192,-8.646924,-8.112256,-9.612265,1.772381,-4.401191,5.302011,1.240109,-2.047460,7.611779,-4.267806,-9.644745,-4.719842,-7.190988,-7.683266,-5.329005,7.610283,2.514691,-8.308485,-7.790267,-9.419220,-0.221262,5.968669,-0.062177,6.838018,-2.478576,-9.868759,-6.741972,-9.344371,-2.329096,1.990364,3.488917,2.248735,2.165646,-0.065768,2.063359,-9.682166,-9.873064,0.764820,8.118854,-8.442568,-1.726119,-6.234129,-4.396047,0.481299,-8.470638,9.729597,2.309574,-5.874688,-0.731345,-7.327204,-5.860621,-7.265939,-5.636863,7.903329,-0.404459,3.868358,3.618593,8.051059,-5.488161,-5.864426,-0.494148,-5.890260,-6.647641,-8.604017,-9.311732,-1.705552,9.972956,1.645947,-8.662879,9.408552,3.354601,7.560897,1.771955,-1.980157,4.890710,-2.304748,-4.802180,1.368548,9.978115,-8.521991,-0.182757,-5.531241,5.103535,4.945415,5.495443,-2.401141,7.822393,5.371045,-1.058845,-0.062363,-5.098727,5.677911,-3.632517,3.500127,-5.105322,0.176263,-5.419623,-7.890625,6.921087,4.282636,3.256402,2.010169,6.560171,9.331559,-5.369028,8.726843,-6.452407,-5.184304,5.784642,-3.282190,7.404263,-7.383344,-5.696179,5.783193,-0.923864,-3.689225,-8.565211,-9.873373,-9.106131,0.186416,3.447860,6.595173,-8.249036,-6.496507,3.553433,4.300684,-1.803480,-5.473706,8.291418,8.028907,-7.641140,8.991009,8.836382,-1.729818,1.374424,2.921361,-3.473836,-6.613858,-4.532009,-3.932452,4.415052,-9.302455,9.856975,-2.067625,-4.137265,-3.641904,4.451391,4.525610,0.529222,-7.471440,9.408805,9.675025,-6.282215,-3.835125,0.133239,-6.925420,0.328060,-0.182510,2.519800,1.690659,-5.370506,-0.139740,6.075431,0.367535,7.723222,6.838729,2.535337,-0.258773,-3.854875,-4.145955,2.187406,-0.563015,4.543902,5.355470,-3.336307,-9.265032,-0.099268,-4.718423,-7.682045,-4.251639,-8.817117,-3.962189,8.780735,3.594963,-2.579501,4.000850,5.930900,-4.102188,-0.551101,1.859695,-2.814414,-0.667930,7.003866,-8.751270,-0.392238,6.038430,-5.062432,-9.386259,3.294851,1.524621,1.198198,7.915223,-2.356334,8.191716,-6.567457,9.962679,-5.580682,6.468411,6.428869,4.858507,7.755693,-7.874216,-7.924186,2.459592,-7.481100,2.751944,9.478980,-3.601135,-3.702227,-5.955612,6.034327,8.300507,0.357012,6.329862,-9.425546,-0.448115,6.847544,0.447347,7.536229,6.430300,2.927577,8.051146,-8.648072,7.053741,8.738381,9.637632,3.688452,-7.966247,1.654107,2.087141,-2.285097,2.898454,-0.432301,-1.394279,7.926251,-5.532765,-5.519689,4.882150,9.565240,-7.435647,3.156790,2.811670,-3.259833,4.536073,0.554705,-4.207414,5.077571,-0.310539,-9.267692,2.087886,-3.968635,3.590554,-5.079578,2.502782,1.896969,-0.602002,3.223144,9.467918,-5.590036,-2.502682,-1.434574,8.649382,-1.855778,2.911386,-3.445750,4.619613,-0.287141,-0.889212,1.747763,3.648606,5.435873,8.144488,6.711272,-2.294935,-2.960044,-0.036246,8.114869,-7.059209,7.019188,8.884791,-1.683238,-5.473620,7.975409,2.363297,5.743534,6.244068,8.263088,5.483969,0.870277,-0.010186,-2.481869,-8.981785,-4.929583,-7.556006,3.794843,-7.518110,-1.579053,-6.727006,3.068847,-3.076727,-6.547873,0.802332,4.609838,7.860761,-9.135201,-5.402693,-2.064597,6.931900,0.405938,-0.795287,5.942058,-2.229059,4.653960,1.437365,1.917228,3.338330,0.336312,7.409702,-3.764323,5.914595,-9.055938,4.265457,1.923641,7.723973,-3.237682,0.813260,-1.127157,3.756523,-7.676441,-8.188660,9.540592,-0.274613,-3.546360,2.383781,-8.890524,-4.010252,-9.295868,2.841612,-2.837145,-0.954245,-3.389313,-9.363012,2.034837,-4.199972,-4.456300,9.950314,5.195259,-9.157462,3.445087,-7.847669,-4.243316,-2.448975,-9.324758,-8.692633,6.116673,-6.311411,-1.748751,-2.940491,-9.418937,-1.542013,-6.347191,-8.700406,9.038869,9.704906,-2.898586,-5.534801,-3.296985,2.878838,-8.210443,7.824203,-5.933096,9.868457,-5.369907,2.948068,-5.624433,7.103347,6.064069,-8.099695,-4.847564,-8.114080,4.808221,-8.002912,2.547802,5.288038,6.712788,1.385508,-1.707717,9.071651,3.690198,6.139850,-1.359576,-3.240198,3.690084,-2.112621,-3.958054,-7.427974,2.665377,-0.662435,1.014559,-5.235511,-7.566695,-8.639002,-8.548679,-0.790622,-4.899127,6.600148,-1.769639,6.628949,6.827633,-2.010979,-4.836570,8.205043,1.951613,-5.288139,2.446797,8.956964,5.790802,-3.033487,2.889079,3.292140,3.469314,-4.181451,-6.335442,8.787394,0.704361,9.857913,-8.639614,7.352418,-6.687118,-8.160007,-1.631278,-9.457059,-9.252808,1.185133,0.050548,3.780369,-5.892610,-5.728963,1.198524,-4.936742,3.411039,-7.959350,-2.158515,9.441439,-4.712219,3.201165,-1.881455,-6.629544,-3.552129,-1.797042,-3.428170,-5.169380,-2.874291,3.681659,-6.781939,-5.028347,4.214003,-4.994736,4.703834,3.204735,8.732547,-0.579763,-8.003217,-4.953414,6.450238,-6.699053,0.544430,-7.345951,3.749911,6.014701,0.567879,-8.205214,0.702094,-5.920657,-8.483874,-3.114315,-7.331784,6.701128,8.780992,-7.796351,8.153379,-5.453731,4.668722,-0.520147,-2.341375,0.769410,5.549900,-3.074652,-2.660125,3.289488,-7.779652,-6.376682,0.458538,6.989677,-6.928464,0.413031,-7.927839,-0.191430,-6.682679,5.483008,-1.875719,-5.446706,-6.813852,-1.103961,4.959526,4.980490,2.885273,1.283510,-4.589836,5.649161,-9.966874,-7.742398,-6.022628,-6.717398,4.500079,3.426241,-9.781523,4.585645,5.563886,5.497217,-4.243286,-9.707548,3.642309,-9.018423,1.852455,-9.690734,-5.502275,-9.261206,7.428731,7.677465,-2.526789,-2.277045,-6.999214,2.285797,-9.736186,-2.659001,-0.267219,-6.153143,-2.242846,3.336224,6.459059,9.704797,-3.369528,-5.977957,2.757204,-6.908172,3.974728,-8.680035,-0.656622,4.702070,9.676608,1.939096,-3.931343,5.525014,-0.657567,-1.219352,-6.687594,2.382390,-9.976890,-5.103544,5.454042,9.138273,3.336909,-7.313423,-4.303612,-4.046376,-8.697560,3.807824,-3.078626,3.468032,4.784832,-1.689559,-3.402426,-4.222149,1.408878,-0.276317,7.267037,3.841778,7.421549,-6.079440,5.690336,6.544286,3.545196,3.942824,1.846833,-4.164685,-0.639431,-4.983194,6.971588,8.899100,5.928682,6.094671,-9.505820,-9.172765,7.581868,5.541504,1.161113,-2.019413,0.728813,-9.733580,-2.334118,3.392308,8.942253,0.465481,-9.985829,-2.038043,-0.886726,-9.107335,-3.079928,0.044644,5.535925,9.325950,8.448487,7.958662,5.192780,-5.151615,5.052245,-1.308527,4.524846,5.323201,4.371270,-9.448966,9.085148,-5.352880,7.093067,9.104305,-4.340083,5.080883,-4.737513,-8.505251,4.913324,-4.236502,-9.975859,8.671349,-1.406758,4.854649,-6.859746,-5.284441,-1.260561,-1.127834,-4.759898,-1.706250,-6.482376,-8.418614,4.542690,-8.075095,0.732253,9.533141,0.594959,-0.742349,2.665858,4.121707], dtype = "float32")#candidate|1052|(1144,)|const|float32
call_1049 = relay.TupleGetItem(func_206_call(relay.reshape(const_1050.astype('float32'), [6, 1, 14]), relay.reshape(var_1051.astype('float32'), [6, 6, 14]), relay.reshape(var_1051.astype('float32'), [6, 6, 14]), relay.reshape(const_1052.astype('float32'), [1144,]), ), 2)
call_1053 = relay.TupleGetItem(func_211_call(relay.reshape(const_1050.astype('float32'), [6, 1, 14]), relay.reshape(var_1051.astype('float32'), [6, 6, 14]), relay.reshape(var_1051.astype('float32'), [6, 6, 14]), relay.reshape(const_1052.astype('float32'), [1144,]), ), 2)
func_578_call = mod.get_global_var('func_578')
func_583_call = mutated_mod.get_global_var('func_583')
const_1058 = relay.const([[-10,3,2,-9,7,3,-3,-7,5,-9,6,6,5,10,10,3,8,3,3,5,5,6,-10,6,-8,2,-5,10,6,9,2,7,9,-10,-3,4,10,-6,4,-8,1,6,8,-7,6,2,10,-7,-1,-3,9,4,9,2,6,-6,9,2,-2,4,6,7,5,-7,1,3,-1,-1,-7,-6,2,9,-5,-9,-3,-4,-6,7,5,10,-5,-5,-9,9,-1,10,-6,-3,1,10,4,3,7,5,-3,7,5,-6,-10,10,-9,-5,1,-8,1,-6,-3,6,10,-1,6,1,-2,8,2,-5,10,6,7,4,3,4,-1,-6,-4,2,-5,-3,-9,-2,1,-2,9,-2,1],[6,-6,-9,-1,-7,-2,-4,3,-5,-8,-5,-8,10,2,-6,8,6,2,-2,-10,7,8,-8,-9,-5,-4,8,5,9,-9,-2,-7,-2,6,4,-3,-8,4,-1,-1,-4,5,6,9,1,2,-7,-4,10,5,7,-8,-8,-3,7,-5,10,2,-4,-3,1,8,6,10,-5,-3,2,7,4,-1,5,-4,8,3,9,6,-3,9,-8,7,-4,4,-10,8,-3,6,6,3,6,-5,1,-6,-6,4,-3,-7,-1,-5,-4,-4,-3,-4,-8,1,10,10,7,-6,10,7,2,4,-7,-2,-3,7,-7,-5,6,1,-3,-9,-9,-5,6,-4,-6,-2,9,-3,2,-10,-10,8,-10],[4,-1,4,-10,9,-1,-6,3,-9,4,7,-1,-7,-10,9,-5,5,-7,-6,-8,-5,-1,-7,9,-9,9,8,-2,10,-1,4,-3,-2,8,7,4,-6,-3,9,10,-4,3,8,7,9,-9,4,2,2,3,-7,-1,1,-7,-5,-8,3,-1,9,8,-7,-3,-9,-6,-8,-10,5,-9,7,-9,-10,-1,10,-3,-9,-1,8,-5,2,7,10,4,-3,6,-8,2,1,2,-3,-4,-5,-7,10,1,-5,1,-8,-3,-9,-10,-3,6,6,-7,2,9,8,-10,10,-10,10,10,-6,10,3,2,-4,10,-4,-7,2,-4,6,9,-7,-10,-8,-6,5,-10,10,4,8,-4,-3],[-1,-10,5,10,1,3,-6,-4,-7,-2,7,9,-6,5,9,10,3,6,-6,-4,-6,8,1,-4,-1,5,8,7,-1,3,-10,-2,3,-3,-6,3,5,4,5,4,6,-4,-5,8,5,6,4,-10,-5,3,-1,5,-2,-2,9,-3,-7,-1,9,-8,9,-10,1,-10,-5,10,-3,-2,4,-2,-1,-9,-1,3,-10,-4,5,3,-6,-4,6,-8,9,-4,5,-9,10,-9,10,10,-2,-8,10,3,-4,6,-1,9,-4,4,-8,10,-10,-8,8,10,-4,-9,10,10,-8,-4,-3,-8,7,-8,6,-2,4,7,-1,6,-5,-10,4,9,-8,-3,-7,8,5,-8,4,7,3],[4,3,9,-2,5,1,-9,8,-10,5,8,5,-10,5,9,-3,1,-10,4,-1,7,4,1,-10,-6,8,-6,7,2,-5,-1,1,-4,2,2,-8,5,8,3,-6,4,10,-9,-6,-2,-1,9,5,-4,3,2,6,3,-3,4,3,5,8,4,-2,-6,7,4,9,1,-3,-3,-8,5,-1,3,8,9,10,1,8,-7,-3,9,9,3,-2,-5,3,4,-8,7,-4,2,-10,8,-2,-6,-5,6,6,-10,-8,-1,-2,2,-1,-5,-7,-1,-2,8,-1,9,-1,2,8,8,-6,6,3,9,9,10,-3,-7,-9,10,-1,-8,8,2,3,-2,10,-6,-6,-8,10,-2],[-9,1,4,-8,2,9,-5,6,2,6,5,-4,8,7,10,-5,10,6,9,1,9,3,-3,-3,-8,9,-2,8,7,-2,-9,-7,-4,5,7,5,7,2,-9,-9,4,4,-2,-8,10,-7,8,7,7,5,9,-9,-10,-8,-6,7,6,-7,-4,9,-6,2,-10,-6,-1,8,1,-8,-10,9,5,5,-9,-2,-7,8,7,7,-9,4,-2,-1,2,3,6,-6,-9,-4,5,-1,7,8,-9,3,10,9,-10,6,-2,3,-10,-10,-4,-5,-10,-1,-6,-3,6,5,1,-7,-6,4,1,-5,8,9,-2,1,3,-9,1,-5,7,-2,-6,1,1,10,-5,-4,-4,7,9],[6,-9,2,6,-8,7,-3,-8,-7,-2,-2,3,3,9,1,-7,-10,3,-8,-9,-4,-6,-1,3,-1,4,1,-9,5,4,6,5,2,7,-9,-8,-5,1,-7,4,7,-3,-5,5,-10,6,-2,9,-8,-6,3,1,-6,-3,-5,3,3,4,-8,-6,8,2,4,6,10,-9,3,10,-2,-2,-10,-3,-9,-10,4,5,9,-3,-9,-5,10,1,-5,1,-5,-6,-8,-5,6,3,-1,-5,6,-3,7,-5,1,-10,-8,-4,6,6,-1,-10,-8,8,-3,-2,-10,-5,3,6,5,-10,9,-6,6,-8,6,-5,-2,6,7,-4,2,-6,9,-9,-9,9,-5,-2,8,-9,7],[1,-8,-5,-4,3,-10,3,2,4,-2,-9,10,7,9,-4,-9,-8,-1,-1,-3,3,5,3,-1,-9,1,-10,-9,-9,-1,7,-8,-7,7,4,-4,3,6,-7,4,7,-3,-6,-4,-3,8,6,-6,-2,5,-2,6,8,-5,6,10,7,-2,6,-8,2,-10,9,-3,8,1,-7,-7,-9,-8,4,-2,-1,-3,-10,-7,-6,-1,10,10,-2,-8,-7,3,-9,-5,-1,3,-9,9,7,4,-3,-10,10,1,-8,2,5,-5,10,-9,-5,3,1,5,-9,3,5,7,1,9,8,-9,1,-1,-4,-2,-5,4,8,-5,-10,9,2,-3,3,-4,-7,5,-7,-9,-7,9,-7],[-7,4,-1,10,2,-7,7,-10,2,4,-5,4,-1,6,-2,-4,-7,-2,-7,-10,6,-7,-7,2,2,9,-6,-3,3,-10,4,3,-4,-10,9,1,7,-6,5,-6,-3,-6,5,7,-1,-2,-3,-6,1,-10,-4,-4,1,5,-8,-2,-3,2,-8,-7,-8,-3,5,-7,-3,-9,-10,-8,-4,4,6,-5,-2,9,7,-8,5,7,-9,8,-1,-9,-9,1,-3,-5,1,-8,-6,5,-10,-10,2,-5,-2,-5,10,-6,-2,-2,4,-4,7,7,6,9,-5,-3,8,10,-2,5,-10,3,-9,-6,2,7,-1,-3,8,-5,10,-2,7,-8,-8,3,5,-9,-8,-7,-7,2,-1]], dtype = "int64")#candidate|1058|(9, 135)|const|int64
var_1059 = relay.var("var_1059", dtype = "uint32", shape = (60,))#candidate|1059|(60,)|var|uint32
call_1057 = relay.TupleGetItem(func_578_call(relay.reshape(const_1058.astype('int64'), [15, 9, 9]), relay.reshape(const_1058.astype('bool'), [15, 9, 9]), relay.reshape(const_1058.astype('float32'), [15, 9, 9]), relay.reshape(var_1059.astype('uint32'), [60,]), ), 11)
call_1060 = relay.TupleGetItem(func_583_call(relay.reshape(const_1058.astype('int64'), [15, 9, 9]), relay.reshape(const_1058.astype('bool'), [15, 9, 9]), relay.reshape(const_1058.astype('float32'), [15, 9, 9]), relay.reshape(var_1059.astype('uint32'), [60,]), ), 11)
func_284_call = mod.get_global_var('func_284')
func_290_call = mutated_mod.get_global_var('func_290')
const_1065 = relay.const([False,False,False,False,True,True,True,True,False,True,True,True,True,False,True,True,False,True,True,False,False,False,True,False,False,False,True,True,True,True,False,True,False,False,False,True,True,True,True,True,False,False,False,True,False,False,False,False,True,True,False,True,True,True,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,False,False,True,True,False,False,True,True,True,False,False,True,False,False,False,True,False,False,True,True,False,False,False,True,True,False,False,False,True,False,True,False,False,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,True,False,True,True,False,False,False,False,False,False,False,False,True,False,True,True,True,True,True,False,True,False,False,False,False,True,False,False,True,True,True,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,True,True,True,False,True,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,False,False,True,False,False,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,False,False,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,True,False,False,False,True,True,True,False,False,True,True,False,True,False,False,True,True,True,True,False,False,True,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,True,False,True,False,True,True,True,True,False,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,True,True,False,True,False,False,False,True,False,True,True,False,True,False,True,True,False,False,False,False,False,False,False,False,True,True,True,False,True,False,False,False,True,True,False,False,True,False,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,False,False,True,True,False,False,True,True,True,True,False,True,True,True,True,False,True,True,True,True,False,True,True,False,True,False,True,True,False,False,True,False,False,True,True,False,True,True,True,False,False,True,True,True,True,True,True,False,False,True,False,True,False,True,True,True,True,False,False,False,False,True,False,False,False,False,True,False,True,False,False,True,False,False,False,True,True,True,True,True,False,True,False,False,False,False,True,False,False,True,False,True,True,False,True,True,False,False,True,True,True,False,False,True,False,False,False,True,False,True,False,False,True,True,True,True,True,False,True,True,False,True,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,False,True,True,False,True,True,True,False,False,False,True,True,False,True,True,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,True,False,True,False,False,True,False,True,True,False,False,True,True,False,False,False,True,True,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,False,True,True,True,True,True,False,False,True,True,True,True,True,False,False,True,False,True,False,True,False,True,True,True,True,True,True,False,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,False,False,False,True,True,True,True,False,False,False,True,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,False,True,True,False,False,True,True,False,False,False,False,True,False,False,True,False,True,True,False,False,False,False,False,True,False,False,False,False,True,False,True,True,True,False,False,False,False,True,False,False,True,False,False,True,False,True,True,False,False,False,False,True,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,True,False,True,True,False,True,True,False,True,True,True,True,False,True,False,True,True,False,True,False,False,True,False,False,True,False,False,False,False,False,False,True,True,False,True,True,True,False,True,False,False,True,True,False,False,True,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,False,False,True,False,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,True,True,True,False,True,True,True,False,False,False,True,True,True,True,True,False,False,True,False,False,False,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,False,False,True,False,True,False,False,False,True,True,False,False,False,True,False,False,False,False,True,False,True,True,True,True,True,True,False,True,True,True,False,True,False,True,False,True,False,False,True,True,True,True,True,False,False,False,False,False,False,True,False,True,True,False,True,False,True,True,True,False,True,True,False,True,True,False,False,True,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,False,False,False,True,True,False,False,True,True,False,True,False,True,True,False,False,True,True,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,True,False,False,True,True,True,True,True,True,False,True,False,False,False,False,False,False,True,False,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,True,False,True,False,True,False,True,False,False,True,False,True,True,True,False,False,False,True,False,True,False,True,False,True,False,False,False,False,False,True,False,True,True,False,True,False,False,False,True,True,True,True,False,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,False,True,False,True,False,False,True,True,False,True,False,True,True,True,True,False,False,True,True,False,False,False,False,False,True,False,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,True,False,False,True,False,False,False,True,True,True,True,True,True,False,True,False,False,True,False,False,False,False,True,True,False,True,False,True,True,True,False,False,True,False,True,True,True,False,False,False,True,False,True,False,False,False,False,True,True,False,True,False,False,False,True,False,True,True,True,False,True,True,True,False,False,False,False,True,False,False,True,True,False,False,True,True,False,True,False,True,False,True,True,False,True,False,True,True,False,False,True,True,False,False,True,False,True,True,True,True,False,False,True,False,False,False,True,False,False,True,True,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,False,False,True,True,True,True,True,False,False,True,True,True,True,True,True,False,True,True,True,True,True,True,True,False,False,True,True,True,True,False,True,True,False,False,False,True,False,True,False,False,False,True,True,True,False,False,True,True,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,True,False,False,True,True,False,True,True,True,False,False,True,True,False,False,True,True,True,False,True,False,False,True,True,True,True,False,False,True,True,True,False,True,False,True,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,True,False,False,False,True,True,True,False,True,False,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,True,True,True,False,True,False,False,True,False,False,False,False,True,False,True,True,False,False,True,True,True,True,True,True,False,True,True,False,True,False,True,False,True,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False,False,True,False,False,True,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,False,True,False,False,True,True,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,True,True,True,True,True,False,True,True,False,True,True,True,False,False,False,True,True,True,False,False,True,False,False,True,False,False,False,True,True,True,True,False,False,True,False,False,True,True,True,True,True,False,False,True,False,False,False,True,False,False,True,True,False,True,False,False,False,True,False,True,False,True,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,False,True,True,False,False,False,True,True,False,True,False,False,True,False,False,True,True,False,True,False,False,False,False,False,True], dtype = "bool")#candidate|1065|(1584,)|const|bool
call_1064 = relay.TupleGetItem(func_284_call(relay.reshape(const_1065.astype('bool'), [12, 11, 12]), relay.reshape(const_1065.astype('bool'), [12, 11, 12]), relay.reshape(const_1050.astype('float32'), [84,]), relay.reshape(const_1065.astype('float64'), [12, 11, 12]), ), 5)
call_1066 = relay.TupleGetItem(func_290_call(relay.reshape(const_1065.astype('bool'), [12, 11, 12]), relay.reshape(const_1065.astype('bool'), [12, 11, 12]), relay.reshape(const_1050.astype('float32'), [84,]), relay.reshape(const_1065.astype('float64'), [12, 11, 12]), ), 5)
bop_1070 = relay.logical_and(const_1050.astype('bool'), uop_1045.astype('bool')) # shape=(84,)
output = relay.Tuple([call_1049,var_1051,const_1052,call_1057,const_1058,var_1059,call_1064,const_1065,bop_1070,])
output2 = relay.Tuple([call_1053,var_1051,const_1052,call_1060,const_1058,var_1059,call_1066,const_1065,bop_1070,])
func_1082 = relay.Function([var_1044,var_1051,var_1059,], output)
mod['func_1082'] = func_1082
mod = relay.transform.InferType()(mod)
mutated_mod['func_1082'] = func_1082
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1082_call = mutated_mod.get_global_var('func_1082')
var_1084 = relay.var("var_1084", dtype = "float32", shape = (1,))#candidate|1084|(1,)|var|float32
var_1085 = relay.var("var_1085", dtype = "float32", shape = (504,))#candidate|1085|(504,)|var|float32
var_1086 = relay.var("var_1086", dtype = "uint32", shape = (60,))#candidate|1086|(60,)|var|uint32
call_1083 = func_1082_call(var_1084,var_1085,var_1086,)
output = call_1083
func_1087 = relay.Function([var_1084,var_1085,var_1086,], output)
mutated_mod['func_1087'] = func_1087
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1122 = relay.var("var_1122", dtype = "float64", shape = (2, 10))#candidate|1122|(2, 10)|var|float64
uop_1123 = relay.atanh(var_1122.astype('float64')) # shape=(2, 10)
func_813_call = mod.get_global_var('func_813')
func_816_call = mutated_mod.get_global_var('func_816')
const_1132 = relay.const([2.097859,4.148177,4.208817,2.181624,0.056402,9.971848,-0.334642,5.074005,-0.899633,8.111090,8.023760,1.996881,1.236974,9.062344,7.795115,0.456998,4.091487,-8.959825,1.207119,-5.309796,-5.370251,-8.622957,2.359418,1.462882,7.710219,3.733750,-8.671333,4.814336,-3.849354,-8.309108,-6.732131,5.993548,7.754157,-8.117070,9.949706,1.213990,-1.964821,-6.966600,2.659983,9.630159,-7.442619,7.308477,5.602519,0.843405,0.155023,-6.471226,5.789447,8.951187,9.927225,1.078825,8.777880,-8.948619,3.404798,2.257885,1.547653,6.193576,6.427864,-0.189960,-4.844254,2.065444,1.535630,2.866675,5.473534,1.794178,-1.171875,7.459336,-8.960795,5.927760,1.206715,-1.505121,-0.169208,-6.953827,4.912650,-4.616227,-0.171284,1.105718,4.573421,4.565831,-3.766413,0.480804,1.104856,-7.727751,6.021961,1.686423,-9.007294,9.938289,-3.022618,-9.278751,-9.945131,3.025503,-2.447636,-6.283292,2.001280,-2.240908,1.810643,-3.033091,7.659309,-2.056078,-4.787571,7.722217,1.614741,8.670074,-2.330075,3.777588,4.167425,-9.153441,-6.130687,9.971353,-7.762637,6.848725,-2.603319,-7.056704,-5.160156,-0.194808,2.391386,8.953153,-5.492020,-4.756698,-2.105104,4.890002,-8.951015,-7.521448,-0.904568,-6.770417,5.076129,-6.342236,4.815906,3.629631,7.882135,-2.898400,3.858159,-2.073622,9.245414,5.769268,-5.790967,5.932524,-3.303691,6.287919,3.388595,0.921590,9.636297,-4.792520,-0.145015,-2.700471,6.853165,-5.053778,-2.897129,-6.691335,0.666417,-8.823421,-6.583340,-7.845524,2.589206,-8.304025,9.847060,7.474986,8.192155,1.764694,-3.929189,-1.877108,0.091437,-1.718578,6.300290,0.130830,-9.601786,-9.007763,0.269953,9.076355,0.067122,9.080516,9.867160,2.978333,0.220824,9.325568,5.654843,0.293478,-9.358666,-5.418343,6.199963,6.301766,5.865790,-5.727937,-0.336389,8.199577,5.982134,2.966229,-4.893785,-6.562245,0.453177,4.378868,1.520569,2.045539,-7.719250,2.669087,2.386965,-1.913323,-3.978955,6.820028,-5.467608,-6.790307,-5.611844,5.241883,1.508764,-7.220377,2.634789,2.140059,-4.195326,-1.690533,-7.607848,-9.345062,-7.534516,0.985421,-3.712577,-5.613020,8.506515,-4.887824,-1.673573,-3.262088,8.217065,-2.802190,-0.686797,1.854081,6.028504,-0.855459,4.563708,5.669998,1.630902,2.835519,-1.706661,-8.313196,-5.395052,5.885193,-9.269764,-1.338104,-8.503005,-4.595503,-4.897571,7.169428,-6.025643,-3.764813,0.525125,5.009973,-1.535423,-3.343913,-7.132724,-1.497126,2.172916,4.285819,-1.775130,-5.923310,2.657467,9.385784,-4.474777,8.936515,-8.132360,0.374315,0.911961,-7.616009,9.770306,-7.333707,-8.290693,-4.423404,-6.059667,4.922706,-3.045195,5.178591,0.764440,2.876376,-4.713564,-3.168825,-4.734807,-1.030466,-3.209089,0.162004,7.397546,-4.946301,1.984054,5.215904,-0.001560,-4.859843,-5.725088,-3.378848,-2.985519,-7.446048,-0.922390,-2.676057,-1.903850,2.393509,3.013500,-0.861429,-0.295301,-4.464104,8.591328,-9.129587,5.842908,-7.804361,-4.943035,0.540827,4.511610,7.257144,-3.821157,-1.403473,-2.857679,8.537238,3.761307,-0.743030,-1.655580,7.014132,1.354823,-4.894289,-9.599451,-7.854283,7.937707,1.048798,1.064138,3.954342,-0.557288,-8.708684,8.427000,8.484094,0.809937,-8.357803,-7.144099,-6.850266,5.188347,-2.699939,0.951694,0.169799,-5.327190,7.460267,0.974563,1.623078,0.797834,2.778793,-1.134254,0.886137,-7.094640,0.930121,3.577104,-6.978064,-8.510944,-0.680694,-1.839434,1.920979,-1.329531,-5.268720,4.685481,-6.130230,-0.906152,3.999156,-6.101980,-5.279923,-0.520755,0.695530,7.568428,3.252830,2.004545,-1.518834,1.412255,-4.234719,-6.688082,6.259747,1.642709,-2.977115,6.216663,-5.088890,-2.148581,1.243218,-9.469376,-8.886338,-7.204053,-4.764606,7.415162,5.259726,-0.576114,0.545302,5.819781,-7.507156,-3.145960,-4.067126,-2.442824,2.420303,4.662027,6.749492,2.099297,-1.888476,1.783538,8.350278,0.689535,9.529146,5.489460,-9.139006,-0.620591,7.188960,-2.542859,-1.357148,-3.769135,5.278846,-8.229423,7.746875,0.609450,-7.072440,-9.284751,5.221815,-0.686780,9.824543,8.012623,-2.742036,-5.451477,-6.654261,3.531028,3.737009,-9.190584,-1.673131,-3.941955,4.597659,4.745553,-8.095347,9.867537,2.371064,3.724927,1.496213,-3.021567,-2.831924,7.295263,8.274157,9.471517,-6.130625,-9.153694,3.118191,4.471135,-4.479874,-1.171164,-8.018682,-8.213654,9.527012,1.221348,1.863233,0.620324,-1.610060,-2.899364,3.471216,8.903935,-2.364998,-2.461152,-6.899228,-7.958951,-9.666628,1.070199,-5.187697,-5.849235,8.710634,8.121987,-8.786012,-6.533955,6.307779,-5.719187,1.303730,0.093345,6.808097,0.484675,4.058628,-4.637334,-3.303654,-1.248763,-9.769222,-8.339186,-6.411278,-0.599517,-2.929429,-6.405671,5.675411,1.108122,-7.685820,-5.939483,-5.411377,1.831355,5.237218,-1.835533,0.610814,0.215331,8.053395,-2.094252,6.178225,-4.215551,8.405623,8.864731,-9.143341,2.570048,3.827487,-4.303485,0.294992,7.299908,-6.786376,-1.070592,4.338347,7.460139,-8.815967,-7.405910,-4.306215,2.168670,0.345766,-2.723168,2.733661,-5.645361,-6.556998,0.113716,-6.738040,-4.939224,-8.410815,0.663269,-9.574230,-5.404713,-0.450013,-0.710762,-3.290511,-8.195888,1.057925,4.978956,7.551067,5.507492,-1.393107,7.318909,-8.679523,7.055597,8.466114,-2.465570,2.050634,-3.412854,6.373717,-1.306922,-2.205877,-0.601669,-6.231552,7.707966,2.219134,6.461343,6.843584,6.290815,-4.056007,-5.544427,1.292451,-6.563703,5.658540,-6.666040,0.789469,-6.830288,2.413380,5.136874,-1.545347,0.517613,-9.451753,-2.771162,-1.793863,2.663647,-5.318101,-0.388447,-5.053368,4.110705,9.881864,-3.538944,-0.482154,-5.724675,8.106821,2.950012,-6.324701,-8.018046,7.071580,-3.341919,-0.059643,3.324247,4.550296,-5.068965,-6.910609,-0.516840,5.246570,-4.267070,7.219592,0.023375,7.682286,3.095995,-1.524335,-9.942902,-8.344459,9.310128,-0.093587,8.761126,-2.611789,6.413036,0.422640,-1.657391,-7.534339,1.969425,3.756297,9.503226,6.134320,3.570807,-5.987827,-8.264991,-7.445570,3.845105,-3.939940,3.513632,-0.491442,8.649798,-7.574604,-0.357571,-1.753262,-5.755711,-0.112777,-1.824295,-0.895936,3.436792,3.515004,8.069660,1.465904,-6.237570,-4.581816,-3.088873,-9.743661,-7.872103,1.363862,-5.477894,-7.359264,-1.438921,-3.824177,7.286723,-1.212825,5.710001,-7.456614,5.552946,1.066057,3.580996,4.408199,-0.066184,4.558987,-6.182926,8.001892,-7.067390,-8.577421,-8.700910,-6.534828,5.565392,0.114387,-4.753034,-7.768988,0.810891,-4.479975,2.720739,2.567821,5.898361,-7.050676,0.501877,-2.606670,-9.337591,-8.682902,4.715413,-0.068018,0.115743,1.721346,4.623067,-2.830028,2.388138,8.958603,-5.867567,-7.074416,6.521683,-7.800890,-8.286822,-2.377317,1.952487,-5.623168,7.636999,7.072455,-0.195325,9.630622,-1.024241,-3.997704,-5.051593,-8.485758,-4.200216,-2.783230,-5.635431,9.663158,-0.450175,9.292258,-0.251963,-9.887960,-9.227602,6.392607,3.939284,-6.179114,-9.532644,4.855131,-7.348496,6.183227,5.087385,-6.978718,-2.700507,-2.561880,7.829162,-5.871878,8.075770,-1.016639,8.766942,-7.271399,-6.325857,-8.968060,-8.331115,7.903323,-8.903464,0.358257,-0.936319,9.451832,4.818438,1.943330,6.072160,0.609087,4.957664,-8.129305,2.472120,4.983609,2.361165,-2.565489,1.896784,-4.637679,-1.007159,6.243042,7.514718,-8.608823,2.984274,2.346608,7.276956,1.952018,-1.920895,6.829043,0.657108,7.301223,8.307942,-8.065299,7.317784,-9.681769,-2.460625,0.129124,-1.791926,0.261981,7.629555,-7.363964,5.544166,2.259611,7.386244,1.775111,1.892043,5.228552,-1.695790,-5.621659,-7.543376,5.294793,-8.144137,-3.515200,-8.397723,-5.563167,-1.363891,4.832057,6.145569,-5.820480,0.379536,3.438956,-5.283382,6.300624,-0.857588,5.023055,-2.823788,5.626323,0.893600,6.095558,6.790200,9.203146,-6.342192,3.941805,-9.320097,-0.598667,1.163399,-3.161846,-1.467505,-7.168484,2.028564,3.047498,7.830337,3.857546,-2.625099,-3.338148,-2.505007,-8.248835,-4.246184,-2.541853,7.997261,2.733252,-4.702907,-1.413671,6.634188,9.115808,-0.877510,3.053303,-3.246781,-4.935686,1.406955,-0.381690,4.961570,0.031872,5.128957,-4.619579,-7.325589,1.427568,3.062939,-7.891883,6.364854,-0.134434,-4.937629,5.658670,-9.948868,-8.216149,-7.906891,6.887292,3.546386,-0.013273,3.534136,9.254952,-7.330973,-2.947926,-3.459382,-4.690882,9.063130,-3.742670,-5.038826,-5.153702,0.939929,0.273899,0.851745,1.791168,6.300670,4.253209,-6.668988,-6.987502,-7.162234,1.599345,5.909718,-7.386465,-2.784098,4.831854,-4.100840,2.783738,-6.802268,5.218866,5.091600,-0.305028,-3.286674,2.050031,-5.423590,8.160736,2.777437,2.625594,3.788757,7.583341,-2.722016,-4.179611,-0.766356,3.533421,-9.899219,-7.102680,1.840353,-3.881174,6.276473,6.716373,-3.876259,-2.715225,8.503240,-9.420071,4.617126,-1.478122,-3.826710,-4.215626,-2.606574,4.256758,-7.056931,-4.990282,-1.559925,-4.815701,3.858116,4.749016,-7.822967,4.586854,-0.490908,-3.482672,8.899442,1.459317,-1.030599,-6.817037,0.674225,4.006701,4.847248,-6.371955,4.471915,4.189130,-0.608469,-2.410806,-4.837850,-6.983102,9.201579,-9.998235,9.858127,0.798004,0.433896,-3.474074,8.976076,6.237971,5.755787,6.634484,-8.378652,5.820089,4.942402,4.537497,0.427355,-0.507679,5.690876,9.648400,6.543289,-5.431836,-5.743419,7.812154,-7.195703,3.343632,-0.607803,-9.683867,9.839234,5.160175,7.330591,7.812612,-6.429122,-5.436122,-8.577898,-1.878065,-8.422990,5.556576,7.237404,-6.324998,0.963240,-1.395454,-2.487853,-7.300606,-0.803189,4.920636,-3.042170,4.300804,-3.256369,-0.646132,7.262000,-8.379179,2.888390,6.726684,6.501027,5.506851,1.603701,-4.889294,-4.129246,4.872645,0.182676,5.087873,6.743771,-5.203667,-6.946819,2.104534,-6.823022,1.739793,8.429897,-2.887055,-3.881239,9.266591,5.757308,-3.002019,-4.255884,9.935447,-3.097359,1.914005,0.570625,9.401438,2.595915,5.534667,8.098193,2.282852,6.591866,8.703542,7.695366,9.123658,-0.786485,1.211145,-9.603120,-5.086463,4.316893,-6.249986,-7.272291,-2.615376,-9.976898,3.876376,-2.879194,-2.211804,-5.020704,7.028225,-7.496826,7.677415,-1.263760,9.504750,7.958836,9.931161,-5.857002,3.941275,-7.897574,-5.069149,3.903573,-8.703679,-7.158901,-7.884978,-0.586350,6.993958,-3.229699,1.070053,6.834524,5.987706,7.909743,6.084206,7.206981,-2.015522,-5.690992,-0.160308,-0.855954,9.340605,-3.844788,5.337211,8.903719,3.949064,0.760155,1.876803,-2.242849,0.685142,5.919212,2.653714,1.457653,-3.607390,-0.249769,-8.750170,9.810715,7.290977,8.811251,-9.580379,9.347448,-1.629328,7.840805,4.366990,5.725504,2.314542,3.998306,3.424643,-5.007241,-3.425721,-2.222740,7.502957,-6.085041,0.551330,2.262590,4.283573,-4.788633,-1.149925,5.138432,7.578040,-5.579378,4.578121,0.379852,0.628776,1.317255,-3.541127,-5.628357,2.898637,-9.393284,-2.180007,3.218349,9.595921,8.390941,5.215819,6.902524,8.674044,0.774290,-1.605456,7.731471,-9.045034,0.247631,4.833347,-0.767042,9.035946,1.486063,-1.571906,7.348256,-8.625201,0.936192,3.062909,-7.050976,7.866418,8.951177,-9.851235,4.600181,5.910814,5.625142,-0.097630,-7.063828,6.077310,3.419295,-8.095390,7.117020,2.254859,-2.472623,6.133103,-2.969901,-9.084440,-3.423449,-1.627917,7.957452,8.090575,-9.014999,-7.864164,3.142560,7.249363,5.742251,7.666228,-2.188920,-0.887004,7.088014,-3.720852,-0.099238,5.355481,1.665246,-9.153659,-4.461942,-2.621716,9.026242,8.768592,-2.164346,3.770787,-3.530293,-8.783844,7.259407,8.297356,-2.941585,-5.684516,-1.931400,-6.487884,-1.403311,-7.799360,-8.071371,1.302524,1.111585,-4.318562,9.862492,5.178953,-4.851276,9.215199,-5.036225,-8.390186,-0.959680,7.535166,-4.854749,-1.521462,-2.342372,5.859481,2.767938,-0.337750,6.514145,-2.743014,-2.508555,-8.509443,4.149919,0.880841,-2.875963,5.329986,-9.631089,7.162923,-9.112244,4.140496,-4.659104,9.648402,-4.886819,-1.865415,-4.136034,-2.242493,1.206329,4.841178,-0.877331,-3.228748,-3.478583,5.156135,4.140710,0.526525,8.964217,-0.531675,-3.031858,2.608168,-9.088891,-5.877251,4.516495,8.088133,-6.728648,3.240957,0.845620,6.141380,1.473617,9.961275,-3.171767,-2.894585,1.951014,1.904154,-4.048071,-3.966311,6.154131,9.415659,-7.190734,7.247196,6.196458,9.056771,-5.566758,-7.246623,-2.387338,-9.610596,6.041579,-5.523744,-0.621589,-7.402828,-5.707041,7.894603,7.438758,-2.954527,0.474985,-0.099171,7.416339,-8.640810,1.556696,1.216502,-8.860463,-3.259181,7.623225,-7.177288,-1.895284,-6.991723,-7.159175,-7.283173,9.304834,0.370016,-9.636417,1.184828,5.975019,-9.115747,9.931258,-8.166064,1.271778,3.827187,5.936376,-0.464912,-7.419808,1.536111,-6.569286,-1.428809,-8.625932,0.923972,-5.846727,-2.954771,-6.179095,-0.244719,2.652217,5.775497,5.896389,1.992395,-1.396032,-7.257337,-8.166995,4.282890,-3.848817,-0.231229,8.502126,6.081124,0.916145,-8.523017,-5.458811,2.503761,8.387990,5.498453,2.054066,-5.611516,-7.920565,-1.347866,-4.833701,-7.538999,6.891150,9.929658,-7.120582,-5.254482,2.580081,3.142895,8.522757,2.182650,9.886255,1.673883,9.862860,-3.164511,3.715358,-6.271415,2.551235,-3.637304,-6.777315,4.595135,-3.675824,-5.374471,-4.086264,-1.858366,-3.901390,7.189053,-4.530946,-0.807506,-5.554337,0.710884,6.754174,8.073607,-9.199845,7.340182,9.683795,3.658062,9.005619,8.125669,6.977891,6.015933,2.070928,7.874842,-2.958920,2.687243,1.124141,-6.814256,8.152705,0.340833,7.956225,-3.679087,2.853613,-1.805224,9.261631,7.343958,1.745180,-5.428818,8.375516,-4.133295,7.012456,-0.818067,0.108902,1.204440,-0.391362,-6.261625,3.819640,-6.392520,7.309424,6.050089,8.774525,2.698463,-5.744786,3.799636,-6.657317,6.301201,-2.783245,-3.348977,-1.473630,-4.220270,-0.310060,-5.646633,3.021967,-5.340939,2.652563,7.361303,-5.903175,-2.897480,-6.048070,-2.660704,3.647659,-7.406214,5.685801,2.668921,-8.581898,-6.951740,7.398998,-7.836279,-3.312558,9.409611,0.180909,-3.721797,3.904739,-7.369008,-3.641085,-5.089535,-3.129212,0.642786,9.835267,8.636069,-5.617342,-6.495428,-7.169526,-4.057604,-9.775175,-5.235660,-3.931381,8.644950,4.366796,0.854768,0.432382,-1.535376,-4.801221,4.806431,-2.429820,0.392190,5.292350,-8.177245,9.235243,-1.488951,-9.538695,6.451570,6.822619,8.801661,-5.545695,-4.139079,-7.138215,4.104796,6.971549,8.829752,2.751379,-2.957693,-2.210326,-3.901317,-4.442399,5.848373], dtype = "float64")#candidate|1132|(1440,)|const|float64
call_1131 = func_813_call(relay.reshape(const_1132.astype('float64'), [16, 15, 6]))
call_1133 = func_813_call(relay.reshape(const_1132.astype('float64'), [16, 15, 6]))
output = relay.Tuple([uop_1123,call_1131,const_1132,])
output2 = relay.Tuple([uop_1123,call_1133,const_1132,])
func_1134 = relay.Function([var_1122,], output)
mod['func_1134'] = func_1134
mod = relay.transform.InferType()(mod)
mutated_mod['func_1134'] = func_1134
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1135 = relay.var("var_1135", dtype = "float64", shape = (2, 10))#candidate|1135|(2, 10)|var|float64
func_1134_call = mutated_mod.get_global_var('func_1134')
call_1136 = func_1134_call(var_1135)
output = call_1136
func_1137 = relay.Function([var_1135], output)
mutated_mod['func_1137'] = func_1137
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1146 = relay.var("var_1146", dtype = "float64", shape = (2,))#candidate|1146|(2,)|var|float64
var_1147 = relay.var("var_1147", dtype = "float64", shape = (2,))#candidate|1147|(2,)|var|float64
bop_1148 = relay.multiply(var_1146.astype('float64'), relay.reshape(var_1147.astype('float64'), relay.shape_of(var_1146))) # shape=(2,)
output = bop_1148
output2 = bop_1148
func_1174 = relay.Function([var_1146,var_1147,], output)
mod['func_1174'] = func_1174
mod = relay.transform.InferType()(mod)
mutated_mod['func_1174'] = func_1174
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1174_call = mutated_mod.get_global_var('func_1174')
var_1176 = relay.var("var_1176", dtype = "float64", shape = (2,))#candidate|1176|(2,)|var|float64
var_1177 = relay.var("var_1177", dtype = "float64", shape = (2,))#candidate|1177|(2,)|var|float64
call_1175 = func_1174_call(var_1176,var_1177,)
output = call_1175
func_1178 = relay.Function([var_1176,var_1177,], output)
mutated_mod['func_1178'] = func_1178
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1182 = relay.var("var_1182", dtype = "float32", shape = (7, 5))#candidate|1182|(7, 5)|var|float32
uop_1183 = relay.tan(var_1182.astype('float32')) # shape=(7, 5)
const_1188 = relay.const([[-0.430465,6.674480,0.929264,-8.486182,4.948404],[5.873782,7.951390,-5.151010,2.293704,8.311214],[-0.998186,-2.973064,4.352693,-9.344668,-3.004761],[-0.516635,-9.048414,-4.785569,5.035373,-6.281127],[3.568700,8.702449,3.726061,1.014249,-9.087700],[8.008110,8.256091,-0.781847,2.416904,7.243783],[-6.254258,-5.102127,0.835391,-0.352726,-3.165885]], dtype = "float32")#candidate|1188|(7, 5)|const|float32
bop_1189 = relay.subtract(uop_1183.astype('uint32'), relay.reshape(const_1188.astype('uint32'), relay.shape_of(uop_1183))) # shape=(7, 5)
bop_1192 = relay.left_shift(uop_1183.astype('uint16'), relay.reshape(bop_1189.astype('uint16'), relay.shape_of(uop_1183))) # shape=(7, 5)
uop_1195 = relay.exp(const_1188.astype('float64')) # shape=(7, 5)
bop_1204 = relay.maximum(bop_1189.astype('int64'), relay.reshape(uop_1183.astype('int64'), relay.shape_of(bop_1189))) # shape=(7, 5)
output = relay.Tuple([bop_1192,uop_1195,bop_1204,])
output2 = relay.Tuple([bop_1192,uop_1195,bop_1204,])
func_1209 = relay.Function([var_1182,], output)
mod['func_1209'] = func_1209
mod = relay.transform.InferType()(mod)
var_1210 = relay.var("var_1210", dtype = "float32", shape = (7, 5))#candidate|1210|(7, 5)|var|float32
output = func_1209(var_1210)
func_1211 = relay.Function([var_1210], output)
mutated_mod['func_1211'] = func_1211
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1271 = relay.var("var_1271", dtype = "float32", shape = (4,))#candidate|1271|(4,)|var|float32
uop_1272 = relay.asin(var_1271.astype('float32')) # shape=(4,)
func_677_call = mod.get_global_var('func_677')
func_680_call = mutated_mod.get_global_var('func_680')
var_1278 = relay.var("var_1278", dtype = "float64", shape = ())#candidate|1278|()|var|float64
const_1279 = relay.const([[3.912942,-6.334779,-0.272299,6.463056,-7.281592,6.684896,3.701052,6.282218,9.243202,8.745651,7.749717,1.482667,3.336311,4.437168,6.168546,-5.133989,9.477867,4.017604,4.504999,8.575969,2.502371,-4.418458,-1.207339,8.043395,9.549739,9.089146,6.733897,-3.849544,-0.570416,0.721728,6.119226,-5.238898,-5.773392,-7.987782,-5.582672,5.650729,-1.602297,-0.451419,0.517781,2.997381,-0.862962,3.560586,7.679286,-6.412394],[7.952445,4.735077,4.013376,7.931424,6.498080,-8.283183,5.355416,7.397707,8.439447,-9.164397,-4.010799,6.812386,6.807349,-6.943008,5.231102,-9.070416,-3.055290,8.112246,7.673394,7.069535,-1.412840,-5.318382,3.145487,2.857755,-7.041501,4.349091,7.611627,7.617990,8.202597,5.595309,5.826883,7.551681,-0.656399,7.070129,-8.204745,-0.926518,-9.856150,-4.012169,0.621515,3.777881,-5.295102,-7.897664,6.141829,-3.960017],[1.787092,8.193620,6.090844,3.738335,9.910234,0.074456,5.569343,-5.794590,-2.247737,-2.270386,9.813462,9.958653,-6.587620,8.493722,-2.564724,9.040200,-6.046610,-3.121351,8.057102,0.960526,-0.358042,-8.630690,-0.036160,-4.850056,-5.406115,-1.744719,-6.920192,1.073730,4.165049,-6.803919,-5.328510,-9.989405,6.231303,-0.516588,-9.092910,0.251740,-5.458593,-2.521937,6.619653,2.852419,1.519809,8.372364,-3.437463,6.925446],[2.377490,7.354075,1.828799,-4.032134,-1.030535,5.812529,-0.171821,2.049533,2.372319,-4.341710,-2.214908,-9.072162,9.546002,2.060235,-7.064117,-3.628215,6.329641,9.170135,8.470148,9.739971,-7.802002,-0.239993,6.766605,7.394026,5.044518,2.576691,5.862952,-8.933371,5.668343,-6.129111,-1.223364,-4.646208,-2.290972,-3.093039,0.929836,0.759516,-4.550448,1.925929,-2.667167,-5.108540,-2.580763,1.414102,2.628917,-8.623692],[-2.779686,-5.451755,2.908353,-7.909739,-6.079307,2.790824,-0.351082,0.248582,-2.728560,-0.689250,8.003932,0.390205,3.290489,-3.805513,-3.764792,5.806501,7.823669,0.526426,-2.243213,4.548085,-9.971893,6.213543,4.299514,5.466357,9.724249,-2.371855,5.062705,-8.545341,9.712417,2.712920,1.285998,-4.988252,3.153172,-7.390936,1.063959,-9.713657,-9.207287,-4.247473,6.059356,-9.307297,3.923321,5.828447,-7.366515,1.260684],[-3.878530,1.198266,-6.676818,9.851164,1.435534,3.478593,7.062228,-7.246443,1.450228,5.165523,-1.576727,7.197368,1.786836,-9.076149,-7.531424,7.669125,6.500376,8.696389,-6.899173,7.353211,-4.252953,-7.040877,-1.306135,4.720373,6.231646,-3.436531,-4.272774,3.309299,4.750826,0.698085,-0.226276,-1.869050,8.640794,6.983992,-0.328145,5.251215,0.362723,-8.700596,-6.417602,-2.238346,3.516772,-7.468273,-0.868482,4.428746],[2.109040,-4.025397,1.397008,0.281556,-8.670651,-1.542212,5.821057,8.042954,3.374681,1.847913,4.346406,9.842350,-8.394852,3.156846,2.841725,-0.149836,5.987104,-0.479794,-7.095906,-3.039640,-4.979606,1.504513,-5.538035,9.085729,3.608611,-9.549819,-0.755272,2.252210,1.953698,6.342832,4.746221,3.716069,-2.234493,3.810838,-8.836370,5.919802,-2.049948,-8.529622,7.454699,-2.554399,-4.177564,-5.531324,-8.618114,-7.249484],[-8.868455,-2.597177,6.420239,-2.251644,-4.476844,-6.549569,2.146522,0.848742,6.947307,6.790773,9.412411,2.192517,-6.912110,-7.655026,1.956462,-3.045655,9.159336,8.945903,-2.636890,-8.421397,9.291085,3.610795,0.532797,-2.135893,4.746223,9.329559,0.418979,-9.654704,-2.808721,-4.174453,3.352867,4.837730,7.832148,-4.353716,3.166330,-9.915122,4.491903,4.850168,7.396280,1.551188,6.301671,3.008418,7.583942,-0.906053],[0.748430,6.949285,7.229852,2.661058,0.151533,2.167525,-6.690705,7.580491,7.723443,-2.457444,-5.701101,4.687138,5.490282,-3.842945,7.979689,-5.681641,0.448597,7.486729,6.720810,-9.512538,-0.834916,6.824148,4.084425,5.095487,0.087958,0.942541,5.109823,-9.386857,-7.535586,-8.956574,5.742024,-1.437556,-7.977372,-9.884174,-8.633202,7.540147,-9.217374,1.473817,4.248335,-9.323819,4.939323,4.700474,1.776359,9.516390],[-6.452035,0.490279,-8.773055,5.327070,9.399921,-4.769013,-3.206794,9.897968,-5.622546,-8.136736,9.008995,9.372534,9.890358,6.695668,-9.981839,-6.579312,-1.692905,-6.373091,0.108901,-6.203617,0.443414,-4.822817,-7.617722,-2.550958,-1.967116,-3.517246,-8.569869,-1.953658,-7.130330,-7.757851,-1.575995,-4.508929,-8.004435,-1.899182,-4.571403,-5.538206,7.590536,7.178167,-4.381313,4.527802,-7.331822,-6.996165,8.689612,-7.525139]], dtype = "float64")#candidate|1279|(10, 44)|const|float64
call_1277 = func_677_call(relay.reshape(var_1278.astype('float64'), []), relay.reshape(const_1279.astype('float64'), [5, 11, 8]), )
call_1280 = func_677_call(relay.reshape(var_1278.astype('float64'), []), relay.reshape(const_1279.astype('float64'), [5, 11, 8]), )
output = relay.Tuple([uop_1272,call_1277,var_1278,const_1279,])
output2 = relay.Tuple([uop_1272,call_1280,var_1278,const_1279,])
func_1282 = relay.Function([var_1271,var_1278,], output)
mod['func_1282'] = func_1282
mod = relay.transform.InferType()(mod)
var_1283 = relay.var("var_1283", dtype = "float32", shape = (4,))#candidate|1283|(4,)|var|float32
var_1284 = relay.var("var_1284", dtype = "float64", shape = ())#candidate|1284|()|var|float64
output = func_1282(var_1283,var_1284,)
func_1285 = relay.Function([var_1283,var_1284,], output)
mutated_mod['func_1285'] = func_1285
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1301 = relay.var("var_1301", dtype = "float64", shape = (9,))#candidate|1301|(9,)|var|float64
uop_1302 = relay.asinh(var_1301.astype('float64')) # shape=(9,)
bop_1312 = relay.logical_xor(uop_1302.astype('int32'), relay.reshape(var_1301.astype('int32'), relay.shape_of(uop_1302))) # shape=(9,)
func_881_call = mod.get_global_var('func_881')
func_884_call = mutated_mod.get_global_var('func_884')
const_1319 = relay.const([3.077193,9.590393,-9.493906,8.613893,0.584620,6.447762,0.758068,-6.597153,4.329457,2.021139,5.475403,-1.277862,4.525234,7.172666,3.418355,0.567960,-1.096103,-4.663060,-9.547330,9.850629,-9.521189,-1.669779,5.261017,-4.114904,8.889523,-9.414449,-2.400060,-8.822845,-3.330327,-7.555547,3.784268,1.786589,1.339287,-4.768053,2.056123,8.197387,-9.440086,6.452130,-0.584729,9.779177,2.325508,-6.736678,-5.767591,0.954109,3.409771,8.244253,-0.248897,-1.248399,-9.415708,8.348022,-8.639802,1.747736,-0.181304,-0.199985,8.951734,3.007765,1.624172,-7.171245,-7.649097,9.349024,-6.134074,-3.010562,3.907873,-5.154132,-3.072811,9.234416,-2.354240,4.084788,3.247353,9.201714,4.722812,6.556297,-0.083878,3.247153,5.637772,-5.130086,1.966105,-5.383842,-1.556501,-8.269372,9.733770,8.689580,-9.142023,-3.740207,2.725136,-8.553907,-7.265481,4.377267,-9.179104,-8.340441,3.028345,9.577039,7.769049,0.834044,-0.959526,-4.464169,5.304549,7.240718,5.299773,2.689679,5.052207,8.385291,4.155916,-0.848660,9.635829,-5.850167,-2.645285,2.648806,8.738952,0.265927,-4.523256,8.707164,7.809031,-8.836440,3.188435,0.127710,6.083578,-2.988369,-7.140619,-1.809523,8.639019,-0.558028,-4.072910,-6.338216,0.888728,2.598506,4.646596,4.582808,1.462484,3.595853,-0.973968,8.620643,-2.140708,-7.994261,5.482617,-9.670858,2.131877,-2.659376,8.005161,-2.798160,-2.301898,-3.954044,-8.829783,-2.822394,7.792218,-2.133359,2.704539,-3.283457,-1.337443,-6.291732,3.667973,-1.984885,0.006363,5.095613,6.320014,5.502261,4.961071,-8.663234,-5.144734,-9.352766,-7.981562,5.635133,-3.090015,5.614502,-6.359591,-5.575679,1.617152,2.983300,9.819196,8.955104,-4.191606,-3.900477,-1.911066,6.464899,-7.832406,6.022131,3.368699,-7.749536,-3.437741,-3.263102,7.101350,-1.620547,1.831049,8.352865,-5.754914,-7.674279,-4.226982,0.115928,6.659165,8.587574,-7.321899,-0.035026,0.843385,0.342266,4.055233,-8.154639,3.225643,3.163381,-1.988724,5.938586,9.498301,4.851428,1.594346,-9.076963,-8.896594,-2.058780,-8.597926,-9.770897,6.053308,5.677135,5.807917,5.339678,2.758610,7.689771,8.622667,-6.005699,-9.221787,-2.826102,-3.619530,-1.078651,-8.265230,1.169890,-7.606860,-5.726461,-2.268738,-2.278688,-8.598059,-6.860345,-0.878886,8.807636,-4.227752,-5.792964,-5.575417,-6.517541,9.628231,8.129330,9.732765,0.393745,-1.250826,0.179995,0.307386,-2.622927,2.236380,9.720063,-3.235469,-7.807658,6.133434,-7.153683,3.967969,-2.873795,7.132075,6.952605,8.739842,-9.585492,-2.659817,-1.986478,6.766911,5.766551,0.856639,-6.846167,-0.705985,-2.003905,9.345950,9.931172,-3.902702,-0.327849,2.216623,-9.113491,-0.219795,-6.696480,8.747099,-0.052434,4.394277,9.436840,2.902394,-4.824084,-1.030947,6.258006,0.661874,7.475314,-3.936565,-1.619904,7.096666,-7.763749,4.711197,-8.556954,8.716547,-4.673262,8.291157,4.451242,3.031471,-6.468841,8.626718,-8.215369,-7.219177,-6.810235,8.305085,-7.858386,8.953110,-1.428433,1.494542,8.103309,2.243544,5.773652,-7.638060,9.358673,-8.479710,3.622421,0.686729,0.790319,2.520787,6.709497,-3.915358,1.922919,-6.010784,-5.996890,6.608387,7.346896,7.057013,7.837693,4.338205,-2.629441,-0.862910,6.103315,5.794367,9.094483,-5.186107,3.882761,-9.364953,3.528320,-9.723195,-7.303251,5.948711,-6.458555,-4.601135,-1.274153,5.832170,0.089194,5.778542,4.841197,9.206189,2.999932,6.663570,-7.433659,-7.568097,4.157997,-3.152287,-7.209383,9.208889,-2.676480,-2.477787,6.535036,9.173082,3.127658,-1.863355,1.794797,1.681545,4.245780,8.300053,-5.819797,1.138730,-1.538526,2.902691,-9.573000,-7.004914,-1.591629,2.693114,-5.780996,-7.450303,9.736731,-6.405076,7.391971,-9.917826,2.600120,-4.820352,8.527501,8.371681,1.055628,-9.335945,6.683426,0.439455,2.291171,1.089686,6.177998,1.685212,-9.251509,-0.955572,1.795488,4.325395,-4.477384,-7.612886,2.654383,-9.384058,-0.885210,-7.552689,1.842551,6.399936,3.676721,-7.534043,-9.440241,1.447005,6.053830,-3.688169,-5.054665,8.364091,-5.211403,-6.952671,9.574532,-1.371770,3.660084,3.589597,-7.482514,0.594425,-9.149639,4.123843,6.881288,3.944386,-6.994252,6.202995,5.739515], dtype = "float64")#candidate|1319|(420,)|const|float64
call_1318 = relay.TupleGetItem(func_881_call(relay.reshape(const_1319.astype('float64'), [12, 7, 5])), 0)
call_1320 = relay.TupleGetItem(func_884_call(relay.reshape(const_1319.astype('float64'), [12, 7, 5])), 0)
uop_1323 = relay.asin(const_1319.astype('float32')) # shape=(420,)
bop_1330 = relay.bitwise_and(uop_1302.astype('int16'), relay.reshape(var_1301.astype('int16'), relay.shape_of(uop_1302))) # shape=(9,)
output = relay.Tuple([bop_1312,call_1318,uop_1323,bop_1330,])
output2 = relay.Tuple([bop_1312,call_1320,uop_1323,bop_1330,])
func_1333 = relay.Function([var_1301,], output)
mod['func_1333'] = func_1333
mod = relay.transform.InferType()(mod)
mutated_mod['func_1333'] = func_1333
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1334 = relay.var("var_1334", dtype = "float64", shape = (9,))#candidate|1334|(9,)|var|float64
func_1333_call = mutated_mod.get_global_var('func_1333')
call_1335 = func_1333_call(var_1334)
output = call_1335
func_1336 = relay.Function([var_1334], output)
mutated_mod['func_1336'] = func_1336
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1444 = relay.const([[-6.853294,0.629465],[-8.386717,-3.752814],[-5.577627,2.621298],[-3.676100,9.936567],[1.844689,3.073048],[8.762501,1.347052],[3.524236,-2.102561],[6.956170,7.468380],[-4.199379,2.901654],[2.568793,0.919281],[6.131307,-9.675799],[-1.383955,-6.532939],[4.021157,-6.106515],[-6.198831,0.516948],[-7.056603,7.013454]], dtype = "float64")#candidate|1444|(15, 2)|const|float64
uop_1445 = relay.cosh(const_1444.astype('float64')) # shape=(15, 2)
output = uop_1445
output2 = uop_1445
func_1451 = relay.Function([], output)
mod['func_1451'] = func_1451
mod = relay.transform.InferType()(mod)
mutated_mod['func_1451'] = func_1451
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1451_call = mutated_mod.get_global_var('func_1451')
call_1452 = func_1451_call()
output = call_1452
func_1453 = relay.Function([], output)
mutated_mod['func_1453'] = func_1453
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1456 = relay.var("var_1456", dtype = "float32", shape = (9, 14, 1))#candidate|1456|(9, 14, 1)|var|float32
uop_1457 = relay.acos(var_1456.astype('float32')) # shape=(9, 14, 1)
bop_1459 = relay.less_equal(uop_1457.astype('bool'), relay.reshape(var_1456.astype('bool'), relay.shape_of(uop_1457))) # shape=(9, 14, 1)
bop_1462 = relay.not_equal(var_1456.astype('bool'), relay.reshape(bop_1459.astype('bool'), relay.shape_of(var_1456))) # shape=(9, 14, 1)
uop_1465 = relay.sqrt(bop_1459.astype('float64')) # shape=(9, 14, 1)
bop_1467 = relay.bitwise_or(uop_1465.astype('int8'), relay.reshape(bop_1459.astype('int8'), relay.shape_of(uop_1465))) # shape=(9, 14, 1)
var_1471 = relay.var("var_1471", dtype = "float32", shape = (9, 14, 16))#candidate|1471|(9, 14, 16)|var|float32
bop_1472 = relay.bitwise_and(var_1456.astype('int64'), var_1471.astype('int64')) # shape=(9, 14, 16)
uop_1476 = relay.atanh(uop_1457.astype('float32')) # shape=(9, 14, 1)
bop_1486 = relay.right_shift(uop_1457.astype('int16'), var_1471.astype('int16')) # shape=(9, 14, 16)
bop_1492 = relay.power(bop_1462.astype('float32'), bop_1472.astype('float32')) # shape=(9, 14, 16)
bop_1495 = relay.bitwise_xor(uop_1476.astype('uint32'), bop_1492.astype('uint32')) # shape=(9, 14, 16)
bop_1500 = relay.divide(uop_1465.astype('float64'), bop_1495.astype('float64')) # shape=(9, 14, 16)
bop_1503 = relay.add(bop_1500.astype('uint32'), bop_1459.astype('uint32')) # shape=(9, 14, 16)
uop_1506 = relay.acosh(uop_1457.astype('float32')) # shape=(9, 14, 1)
uop_1514 = relay.exp(bop_1467.astype('float32')) # shape=(9, 14, 1)
bop_1518 = relay.not_equal(bop_1495.astype('bool'), relay.reshape(bop_1492.astype('bool'), relay.shape_of(bop_1495))) # shape=(9, 14, 16)
var_1522 = relay.var("var_1522", dtype = "float32", shape = (9, 14, 3))#candidate|1522|(9, 14, 3)|var|float32
bop_1523 = relay.multiply(uop_1457.astype('int64'), var_1522.astype('int64')) # shape=(9, 14, 3)
bop_1526 = relay.logical_xor(bop_1492.astype('uint32'), uop_1506.astype('uint32')) # shape=(9, 14, 16)
output = relay.Tuple([bop_1486,bop_1503,uop_1514,bop_1518,bop_1523,bop_1526,])
output2 = relay.Tuple([bop_1486,bop_1503,uop_1514,bop_1518,bop_1523,bop_1526,])
func_1531 = relay.Function([var_1456,var_1471,var_1522,], output)
mod['func_1531'] = func_1531
mod = relay.transform.InferType()(mod)
var_1532 = relay.var("var_1532", dtype = "float32", shape = (9, 14, 1))#candidate|1532|(9, 14, 1)|var|float32
var_1533 = relay.var("var_1533", dtype = "float32", shape = (9, 14, 16))#candidate|1533|(9, 14, 16)|var|float32
var_1534 = relay.var("var_1534", dtype = "float32", shape = (9, 14, 3))#candidate|1534|(9, 14, 3)|var|float32
output = func_1531(var_1532,var_1533,var_1534,)
func_1535 = relay.Function([var_1532,var_1533,var_1534,], output)
mutated_mod['func_1535'] = func_1535
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1451_call = mod.get_global_var('func_1451')
func_1453_call = mutated_mod.get_global_var('func_1453')
call_1567 = func_1451_call()
call_1568 = func_1451_call()
func_284_call = mod.get_global_var('func_284')
func_290_call = mutated_mod.get_global_var('func_290')
var_1577 = relay.var("var_1577", dtype = "bool", shape = (1584,))#candidate|1577|(1584,)|var|bool
var_1578 = relay.var("var_1578", dtype = "float32", shape = (84,))#candidate|1578|(84,)|var|float32
call_1576 = relay.TupleGetItem(func_284_call(relay.reshape(var_1577.astype('bool'), [12, 11, 12]), relay.reshape(var_1577.astype('bool'), [12, 11, 12]), relay.reshape(var_1578.astype('float32'), [84,]), relay.reshape(var_1577.astype('float64'), [12, 11, 12]), ), 0)
call_1579 = relay.TupleGetItem(func_290_call(relay.reshape(var_1577.astype('bool'), [12, 11, 12]), relay.reshape(var_1577.astype('bool'), [12, 11, 12]), relay.reshape(var_1578.astype('float32'), [84,]), relay.reshape(var_1577.astype('float64'), [12, 11, 12]), ), 0)
var_1582 = relay.var("var_1582", dtype = "float32", shape = (84,))#candidate|1582|(84,)|var|float32
bop_1583 = relay.logical_or(var_1578.astype('bool'), relay.reshape(var_1582.astype('bool'), relay.shape_of(var_1578))) # shape=(84,)
uop_1595 = relay.log2(var_1577.astype('float64')) # shape=(1584,)
output = relay.Tuple([call_1567,call_1576,bop_1583,uop_1595,])
output2 = relay.Tuple([call_1568,call_1579,bop_1583,uop_1595,])
func_1597 = relay.Function([var_1577,var_1578,var_1582,], output)
mod['func_1597'] = func_1597
mod = relay.transform.InferType()(mod)
mutated_mod['func_1597'] = func_1597
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1597_call = mutated_mod.get_global_var('func_1597')
var_1599 = relay.var("var_1599", dtype = "bool", shape = (1584,))#candidate|1599|(1584,)|var|bool
var_1600 = relay.var("var_1600", dtype = "float32", shape = (84,))#candidate|1600|(84,)|var|float32
var_1601 = relay.var("var_1601", dtype = "float32", shape = (84,))#candidate|1601|(84,)|var|float32
call_1598 = func_1597_call(var_1599,var_1600,var_1601,)
output = call_1598
func_1602 = relay.Function([var_1599,var_1600,var_1601,], output)
mutated_mod['func_1602'] = func_1602
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1451_call = mod.get_global_var('func_1451')
func_1453_call = mutated_mod.get_global_var('func_1453')
call_1629 = func_1451_call()
call_1630 = func_1451_call()
uop_1645 = relay.tan(call_1629.astype('float64')) # shape=(15, 2)
uop_1647 = relay.tan(call_1630.astype('float64')) # shape=(15, 2)
func_206_call = mod.get_global_var('func_206')
func_211_call = mutated_mod.get_global_var('func_211')
const_1649 = relay.const([2.870382,9.714880,5.179515,0.528987,-1.594862,-0.166868,1.202133,-8.336732,-1.062699,-5.174442,1.061734,-3.428898,-1.496587,-5.143397,9.826650,-9.716326,5.325336,0.541462,8.331447,1.364450,-8.411140,1.195219,4.906784,0.939219,-8.459737,6.351669,-6.212134,4.510881,-0.872250,-1.512025,4.121180,-3.462528,-3.050898,-0.862604,-1.237030,6.002640,0.282264,4.618340,-3.308707,-1.030458,-8.403090,-1.208367,3.600193,2.171274,3.284910,-7.920006,8.381785,-9.442218,-6.484447,3.494164,-8.189152,6.894035,0.511247,-3.148558,0.937842,5.123802,8.554428,2.382235,2.956093,-4.286331,-5.067793,-7.757007,9.578212,-6.963729,2.891152,5.904728,-8.259761,6.985907,8.356177,-7.245420,-2.182852,-0.246246,4.041620,-2.359130,4.964677,-3.595117,0.588930,5.204651,1.118425,-4.589131,7.582251,-3.306372,-2.271068,-5.358433], dtype = "float32")#candidate|1649|(84,)|const|float32
const_1650 = relay.const([-3.436179,5.528706,2.248423,-6.101385,-2.431015,-6.582354,5.455153,9.750506,0.400983,5.547366,4.711533,8.325357,8.651885,7.885464,-9.701157,-6.190400,-8.122464,-7.607493,-8.623302,-4.686181,6.211110,-4.758779,-8.687387,6.696146,-1.105054,7.271242,-7.217280,0.733699,-0.251541,5.601905,3.365808,3.710905,3.156676,0.577804,-7.369002,1.636072,2.472343,1.854091,3.237153,4.025889,7.440333,2.151157,7.052345,-6.729781,5.312934,-9.843236,4.167240,-4.450589,-5.354750,-7.148615,-0.305685,-2.220570,-5.657165,6.300319,7.083723,5.311263,7.027625,-2.017619,5.467086,-1.945794,-9.883507,-2.569544,-5.573887,8.127784,-9.329244,-6.882048,0.060797,-3.360718,-3.816012,8.195343,3.207734,-3.107262,4.513809,2.976707,9.993697,6.333091,1.641387,-3.103222,-4.405872,-1.444854,9.970339,1.899433,2.413055,-4.442601,-4.636652,6.277615,-6.251316,-1.760364,2.480226,4.588297,-3.416773,-4.445250,-8.664979,3.059743,-8.021962,4.911558,-4.769004,-5.965569,6.763863,0.884860,-5.287044,4.076012,9.487122,-2.212539,1.007983,4.879312,-0.923901,4.265640,-6.281811,-8.756090,-7.796867,5.897353,-7.095180,9.678117,-6.905593,4.050279,2.830807,-8.425407,9.626439,4.572001,-2.992913,-3.785098,4.491859,7.731682,-3.547468,-9.682666,3.707613,-0.444161,-9.243468,9.534605,-1.166864,5.365903,3.424568,-3.900572,3.916837,-7.243840,2.906063,-8.162689,-4.495536,-7.724554,9.399553,-2.386756,-7.688322,1.142021,-5.659672,-5.321252,3.569238,-0.780375,1.889567,8.214482,5.582112,-2.090080,-5.728400,8.737673,-4.098701,-4.028297,-9.947964,-2.293433,4.880575,1.158601,4.744429,-9.175979,-4.888396,0.460835,-4.946991,-7.416991,-4.453000,-0.608842,2.422608,-7.103430,0.781965,-2.281344,8.874340,5.419217,-6.102721,-9.591205,-6.844020,-8.368650,1.538904,-1.689329,8.107733,0.026301,6.779986,-8.042379,0.791297,-8.519818,9.787322,5.613664,4.852477,8.945146,8.468078,7.869016,3.000574,-6.352048,-0.093722,-9.971984,6.797899,8.424097,9.954282,-9.178381,-5.244452,8.109471,7.322796,-7.946107,8.798057,-3.357957,2.251580,-9.289074,5.422791,-3.048008,1.659173,6.812183,-0.017252,9.541379,0.162889,2.266282,-5.388501,5.433042,9.512382,3.535069,-4.093064,2.149988,5.992109,-9.590799,0.125460,-5.595476,2.878372,6.693880,7.226559,0.505904,-2.393392,-3.523801,4.945106,-2.190908,-1.685441,-1.397358,5.638336,-8.980127,8.039795,-0.829812,6.751710,-8.502873,-0.389639,5.886197,-3.952094,-4.446288,7.431414,-9.645318,0.686544,4.760021,-5.006556,-1.267377,8.726704,-9.567212,4.347883,4.224109,-6.914923,2.237718,-9.664968,-2.242198,9.571973,8.639914,4.519106,5.473528,9.086443,-3.530387,-5.084591,0.313890,-7.993847,5.339403,-3.865374,-9.438992,-1.001689,-6.999167,-5.316286,2.600793,0.596167,-7.647219,-5.303071,1.315652,-9.101812,6.998982,-4.771929,1.582398,8.672885,-3.151013,4.077226,-1.414121,-4.380886,-7.959321,5.219244,-7.930861,9.698348,9.345583,8.422720,3.850293,0.080303,-1.540205,6.248880,-7.965916,-0.590781,0.940814,1.877430,4.055215,-1.971794,7.792107,-5.146510,-8.805924,-6.162380,8.831992,2.423368,-2.811965,-7.475603,-9.947026,-7.780694,-4.700855,-3.767450,-1.371393,3.261219,8.047219,-3.775879,8.739527,8.818438,-0.133499,0.721656,8.580306,-9.879845,3.014379,-5.879525,-7.646178,-7.611746,-1.820324,-5.192838,7.112865,-8.950983,5.205949,2.083871,8.223089,1.208209,-7.256707,-1.049810,3.552657,7.120701,4.343584,-2.923771,-3.862167,-7.972927,0.301952,-4.305959,-7.632876,-0.899216,6.101426,-4.190058,-2.484507,-8.531123,-1.913540,-0.059943,0.939658,0.931506,9.921113,-8.404672,-2.354509,-4.418310,-3.552284,-3.005966,-1.874852,-1.615812,-8.020863,-8.303646,-8.393855,-4.404586,1.722933,-7.661574,-3.750855,1.151271,-1.359568,-1.557460,-5.340002,-9.652053,4.686277,8.389661,3.622603,0.462486,-0.968891,-0.228306,-3.942686,-8.654323,7.368529,-1.265402,-3.018367,-7.464892,1.638691,5.730549,6.670558,-1.827056,0.343521,-2.577242,-6.032861,-3.809286,-8.344112,0.696501,7.094839,-6.714569,5.032266,0.036587,0.809595,-1.692754,-5.677467,-7.278441,3.688188,-0.948954,9.749309,-5.357378,-3.569798,-5.791789,4.708438,0.878716,8.028358,-8.913549,-0.621241,-6.829342,3.476872,-4.538705,4.595418,8.095961,-5.708576,8.349454,3.319825,2.302789,-4.454437,-2.643360,5.994185,8.271225,9.655277,0.216182,1.100159,3.871164,-0.484819,-9.359130,5.940745,5.963672,3.478925,7.807707,-8.023735,-3.371111,-8.866448,-5.865522,-5.512494,2.838405,0.238026,6.150682,-6.394995,6.676133,-7.147726,-8.484917,-3.600101,6.377982,-7.205068,-6.267067,7.481532,-1.146917,4.050090,-0.990305,-0.525444,6.292771,-2.781286,-7.312224,-5.072890,-0.789097,6.176851,-0.812802,-2.078129,9.888686,-6.692040,3.145472,-1.836209,4.063961,-2.321553,3.884014,0.235945,3.729174,2.363995,3.974284,1.332257,-9.864320,-4.320308,-2.375689,7.455287,-2.864809,4.185683,4.031027,2.575841,3.261164,-9.405153,-9.793898,-5.875569,-1.080901,5.167610,5.361094,9.998345,6.204590,-7.480486,-2.642094,5.984478], dtype = "float32")#candidate|1650|(504,)|const|float32
var_1651 = relay.var("var_1651", dtype = "float32", shape = (572, 2))#candidate|1651|(572, 2)|var|float32
call_1648 = relay.TupleGetItem(func_206_call(relay.reshape(const_1649.astype('float32'), [6, 1, 14]), relay.reshape(const_1650.astype('float32'), [6, 6, 14]), relay.reshape(const_1650.astype('float32'), [6, 6, 14]), relay.reshape(var_1651.astype('float32'), [1144,]), ), 4)
call_1652 = relay.TupleGetItem(func_211_call(relay.reshape(const_1649.astype('float32'), [6, 1, 14]), relay.reshape(const_1650.astype('float32'), [6, 6, 14]), relay.reshape(const_1650.astype('float32'), [6, 6, 14]), relay.reshape(var_1651.astype('float32'), [1144,]), ), 4)
func_370_call = mod.get_global_var('func_370')
func_374_call = mutated_mod.get_global_var('func_374')
const_1654 = relay.const([-8,7,7,-10,-4,6,3,4,-5,-7,9,-10,6,9,4,10,10,7,3,-8,8,3,-4,-7,-8,-2,10,-4,-1,-4,-8,-6,2,-6,3,-2,-9,-4,1,-10,6,4,5,-2,-4,3,1,-10,5,7,-9,-10,-3,-1,-6,3,-4,9,6,8,-10,-2,2,-3,8,-6,-9,5,-3,-8,9,2,-8,-3,-6,4,1,6,-10,10,-9,4,5,1,6,-8,9,-8,-2,-1,3,-4,-3,-8,1,8,-6,-7,-2,8,8,-4,-5,3,-5,-6,2,-3,-10,8,8,-1,-10,7,9,-3,3,-3,2,-8,2,7,3,9,-10,-7,4,-5,10,-6,7,-7,9,-9,-8,9,-10,-4,-6,-10,-9,-7,7,-7,3,-8,-3,1,5,-2,-6,2,7,8,-6,-2,-5,10,-2,-1,-8,-3,3,4,3,-2,-7,2,-8,-9,-1,3,-1,-10,-8,6,-1,9,-5,4,9,5,-10,-9,-9,7,1,-6,1,-5,-8,-6,-2,-2,8,-4,-6,4,-6,-6,-3,-7,-5,9,10,4,7,-4,7,-7,-6,3,-10,7,9,-2,-8,-7,1,-8,9,8,4,-4,-10,5,10,7,4,-5,-9,3,8,-10,-5,-2,2,8,-4,8,-3,-1,2,4,-3,-9,8,10,4,-6,10,-3,8,10,-6,-5,3,4,5,3,9,-8,6,2], dtype = "int32")#candidate|1654|(264,)|const|int32
call_1653 = relay.TupleGetItem(func_370_call(relay.reshape(const_1654.astype('int32'), [11, 12, 2]), relay.reshape(const_1654.astype('int32'), [11, 12, 2]), ), 1)
call_1655 = relay.TupleGetItem(func_374_call(relay.reshape(const_1654.astype('int32'), [11, 12, 2]), relay.reshape(const_1654.astype('int32'), [11, 12, 2]), ), 1)
func_869_call = mod.get_global_var('func_869')
func_873_call = mutated_mod.get_global_var('func_873')
const_1661 = relay.const([9,4,9,4,-4,9,-4,-7,-2,-2,-6,10,-5,5,9,7,10,-7,5,-4,-10,-5,5,-7,8,-5,-6,-8,-9,2,7,-7,-3,7,-6,8,-5,8,7,-8,9,-9,10,4,4,-7,-7,7,9,-9,6,-2,-10,-2,-10,-2,-6,3,-2,-7,-5,7,-9,2,-10,-6,8,-1,8,5,-6,4,2,7,-6,-2,9,3,-4,9,-5,4,2,-2,-1,-6,-6,8,-10,3,1,9,5,-1,6,-6,-4,-6,8,-7,-7,-5,-5,-2,-7,-5,2,-10,3,-7,1,1,6,2,-5,10,-3,-4,7,7,3,-4,-3,2,-6,-6,4,2,5,1,-4,2,9,8,-2,-2,7,9,-10,6,2,1,-1,4,-9,-6,10,-10,3,-5,-3,1,-10,-9,-1,-6,-1,7,-10,-6,9,-1,9,10,-1,9,9,-5,-10,1,3,4,-4,4,3,-10,3,3,-5,7,7,10,-6,7,1,-7,7,6,2,3,1,8,-7,7,-6,-5,-10,9,2,-2,-5,-5,8,-2,-1,-4,10,-6,6,8,8,3,10,4,7,5,2,-4,1,-9,-5,-5,-8,2,6,6,-5,2,10,-9,9,-10,-2,-1,4,-5,6,4,3,-8,7,-3,-2,2,-10,-10,3,-1,-6,-9,-6,-9], dtype = "int16")#candidate|1661|(252,)|const|int16
call_1660 = relay.TupleGetItem(func_869_call(relay.reshape(const_1661.astype('int16'), [4, 9, 7]), relay.reshape(const_1661.astype('int16'), [4, 9, 7]), ), 1)
call_1662 = relay.TupleGetItem(func_873_call(relay.reshape(const_1661.astype('int16'), [4, 9, 7]), relay.reshape(const_1661.astype('int16'), [4, 9, 7]), ), 1)
uop_1666 = relay.rsqrt(uop_1645.astype('float32')) # shape=(15, 2)
uop_1668 = relay.rsqrt(uop_1647.astype('float32')) # shape=(15, 2)
var_1669 = relay.var("var_1669", dtype = "float32", shape = (15, 2))#candidate|1669|(15, 2)|var|float32
bop_1670 = relay.maximum(uop_1666.astype('uint32'), relay.reshape(var_1669.astype('uint32'), relay.shape_of(uop_1666))) # shape=(15, 2)
bop_1673 = relay.maximum(uop_1668.astype('uint32'), relay.reshape(var_1669.astype('uint32'), relay.shape_of(uop_1668))) # shape=(15, 2)
output = relay.Tuple([call_1648,const_1649,const_1650,var_1651,call_1653,const_1654,call_1660,const_1661,bop_1670,])
output2 = relay.Tuple([call_1652,const_1649,const_1650,var_1651,call_1655,const_1654,call_1662,const_1661,bop_1673,])
func_1679 = relay.Function([var_1651,var_1669,], output)
mod['func_1679'] = func_1679
mod = relay.transform.InferType()(mod)
var_1680 = relay.var("var_1680", dtype = "float32", shape = (572, 2))#candidate|1680|(572, 2)|var|float32
var_1681 = relay.var("var_1681", dtype = "float32", shape = (15, 2))#candidate|1681|(15, 2)|var|float32
output = func_1679(var_1680,var_1681,)
func_1682 = relay.Function([var_1680,var_1681,], output)
mutated_mod['func_1682'] = func_1682
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1684 = relay.var("var_1684", dtype = "float64", shape = (4, 5, 4))#candidate|1684|(4, 5, 4)|var|float64
uop_1685 = relay.sin(var_1684.astype('float64')) # shape=(4, 5, 4)
output = relay.Tuple([uop_1685,])
output2 = relay.Tuple([uop_1685,])
F = relay.Function([var_1684,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1684,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1684= np.array([[[8.421312,5.480819,-4.216181,8.205957],[4.791372,-2.184031,8.691587,-9.635484],[1.916594,-2.420032,8.843613,2.658070],[-4.267080,-6.872148,-4.692455,4.326938],[1.196584,-6.580025,8.125344,-8.699493]],[[3.297471,3.890061,-3.274112,-9.173566],[-4.615693,-8.935184,6.570256,-7.952791],[-3.450784,-0.452061,-8.569740,6.945132],[9.055322,2.039740,1.384509,4.886308],[3.659534,-7.424087,2.845926,1.719194]],[[1.978387,8.070268,-3.960414,-6.122047],[-5.985860,3.986289,-4.013865,-2.826439],[-5.728633,0.039884,2.412309,-0.308996],[9.139476,-8.271449,7.714938,2.187525],[-6.949294,-7.595899,-3.131896,6.435633]],[[0.240931,7.645581,8.560723,8.920884],[0.398212,-2.333099,-8.846488,8.619899],[3.984420,-6.908019,-5.015134,6.481038],[-3.449515,7.852852,-9.975804,9.412772],[3.648642,6.962741,-4.809080,-0.561803]]], dtype='float64')
module1.set_input('var_1684', input_1684)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1684, )
res3 = intrp3.evaluate()(input_1684, )
res4 = intrp4.evaluate()(input_1684, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input('var_1684', input_1684)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1684, )
res7 = intrp7.evaluate()(input_1684, )
res8 = intrp8.evaluate()(input_1684, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input('var_1684', input_1684)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1684, )
res11 = intrp11.evaluate()(input_1684, )
res12 = intrp12.evaluate()(input_1684, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input('var_1684', input_1684)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1684, )
res15 = intrp15.evaluate()(input_1684, )
res16 = intrp16.evaluate()(input_1684, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input('var_1684', input_1684)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1684, )
res19 = intrp19.evaluate()(input_1684, )
res20 = intrp20.evaluate()(input_1684, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input('var_1684', input_1684)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1684, )
res23 = intrp23.evaluate()(input_1684, )
res24 = intrp24.evaluate()(input_1684, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''45: TVMFuncCall
44: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
43: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
42: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
41: tvm::IRModule::FromExpr(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&)
40: tvm::IRModule::FromExprInContext(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >)
39: tvm::IRModuleNode::Add(tvm::GlobalVar const&, tvm::BaseFunc const&, bool)
38: tvm::WarnIfMalformed(tvm::IRModule const&, tvm::relay::Function)
37: tvm::relay::FreeTypeVars(tvm::RelayExpr const&, tvm::IRModule const&)
36: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
34: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
32: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
31: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
30: tvm::relay::ExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
29: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
28: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
27: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
26: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
25: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
24: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
23: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
22: _ZNSt17_Function_handlerIFvPKN3tvm5relay7LetNodeEEZNS1_15TypeVarEVis
21: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
20: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
19: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
16: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
15: tvm::relay::ExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
14: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
13: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
12: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
11: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
10: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
9: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
8: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
7: _ZNSt17_Function_handlerIFvPKN3tvm5relay7LetNodeEEZNS1_15TypeVarEVis
6: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
5: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
4: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9RelayEx
1: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::ConstructorNode const*)
0: tvm::IRModuleNode::LookupTypeDef(tvm::GlobalTypeVar const&) const

'''