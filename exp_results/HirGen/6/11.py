import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = ())#candidate|0|()|var|float32
uop_1 = relay.sin(var_0.astype('float32')) # shape=()
uop_3 = relay.sqrt(uop_1.astype('float64')) # shape=()
uop_5 = relay.exp(uop_3.astype('float32')) # shape=()
output = relay.Tuple([uop_5,])
output2 = relay.Tuple([uop_5,])
func_7 = relay.Function([var_0,], output)
mod['func_7'] = func_7
mod = relay.transform.InferType()(mod)
mutated_mod['func_7'] = func_7
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8 = relay.var("var_8", dtype = "float32", shape = ())#candidate|8|()|var|float32
func_7_call = mutated_mod.get_global_var('func_7')
call_9 = func_7_call(var_8)
output = call_9
func_10 = relay.Function([var_8], output)
mutated_mod['func_10'] = func_10
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12 = relay.var("var_12", dtype = "uint8", shape = (11,))#candidate|12|(11,)|var|uint8
var_13 = relay.var("var_13", dtype = "uint8", shape = (11,))#candidate|13|(11,)|var|uint8
bop_14 = relay.minimum(var_12.astype('uint8'), relay.reshape(var_13.astype('uint8'), relay.shape_of(var_12))) # shape=(11,)
output = relay.Tuple([bop_14,])
output2 = relay.Tuple([bop_14,])
func_17 = relay.Function([var_12,var_13,], output)
mod['func_17'] = func_17
mod = relay.transform.InferType()(mod)
var_18 = relay.var("var_18", dtype = "uint8", shape = (11,))#candidate|18|(11,)|var|uint8
var_19 = relay.var("var_19", dtype = "uint8", shape = (11,))#candidate|19|(11,)|var|uint8
output = func_17(var_18,var_19,)
func_20 = relay.Function([var_18,var_19,], output)
mutated_mod['func_20'] = func_20
mutated_mod = relay.transform.InferType()(mutated_mod)
var_22 = relay.var("var_22", dtype = "float32", shape = ())#candidate|22|()|var|float32
uop_23 = relay.exp(var_22.astype('float32')) # shape=()
func_17_call = mod.get_global_var('func_17')
func_20_call = mutated_mod.get_global_var('func_20')
const_26 = relay.const([6,-3,1,-7,3,9,6,-7,-8,-6,7], dtype = "uint8")#candidate|26|(11,)|const|uint8
call_25 = relay.TupleGetItem(func_17_call(relay.reshape(const_26.astype('uint8'), [11,]), relay.reshape(const_26.astype('uint8'), [11,]), ), 0)
call_27 = relay.TupleGetItem(func_20_call(relay.reshape(const_26.astype('uint8'), [11,]), relay.reshape(const_26.astype('uint8'), [11,]), ), 0)
uop_28 = relay.atanh(uop_23.astype('float64')) # shape=()
uop_30 = relay.atanh(uop_28.astype('float32')) # shape=()
uop_32 = relay.atan(uop_30.astype('float32')) # shape=()
uop_34 = relay.sqrt(uop_32.astype('float32')) # shape=()
uop_36 = relay.atanh(uop_32.astype('float32')) # shape=()
uop_38 = relay.exp(uop_36.astype('float32')) # shape=()
uop_40 = relay.tan(uop_38.astype('float32')) # shape=()
bop_42 = relay.not_equal(uop_40.astype('bool'), var_22.astype('bool')) # shape=()
uop_45 = relay.acos(uop_38.astype('float32')) # shape=()
uop_47 = relay.cosh(uop_38.astype('float64')) # shape=()
var_49 = relay.var("var_49", dtype = "float32", shape = ())#candidate|49|()|var|float32
bop_50 = relay.right_shift(uop_36.astype('int16'), var_49.astype('int16')) # shape=()
uop_53 = relay.acos(bop_42.astype('float32')) # shape=()
uop_55 = relay.sin(uop_53.astype('float64')) # shape=()
bop_57 = relay.logical_or(uop_53.astype('bool'), var_22.astype('bool')) # shape=()
var_60 = relay.var("var_60", dtype = "float64", shape = ())#candidate|60|()|var|float64
bop_61 = relay.divide(uop_55.astype('float64'), var_60.astype('float64')) # shape=()
bop_64 = relay.not_equal(uop_55.astype('bool'), bop_57.astype('bool')) # shape=()
const_67 = relay.const([[4.543271,-5.075348,6.032144,1.906446,6.126059,0.629594,3.788990,6.700372,-4.315419,-2.119815,5.690044,-8.294077,-8.753001,6.730813],[1.424178,0.636055,5.875263,5.410788,-8.999328,7.955406,3.384695,-4.671997,-7.252993,-1.927451,-3.868907,-6.417635,-4.995703,-3.388008],[3.379332,-8.414466,-9.004826,-8.959049,8.650712,8.578193,-1.029917,3.017145,0.289172,-5.415932,7.389677,-0.097118,-3.595198,8.525108],[-0.161757,8.036831,-2.129941,-6.794512,9.392005,-0.840304,-6.787384,-9.393905,-8.603886,-4.653054,6.936889,7.244864,-8.320155,5.969344],[8.474847,9.768322,-1.897473,5.520918,-4.589695,-9.606971,-2.443419,-9.492196,-9.519973,3.359064,-7.440897,-2.797092,8.757995,2.004249],[-7.782091,-7.625169,9.056252,7.849088,-7.081663,-7.283431,-2.909841,-9.863451,1.431215,6.993966,4.469591,-9.180582,2.989035,8.123778],[2.629682,-6.217573,4.493593,8.499372,-1.233893,0.466275,1.537605,-9.504752,-9.689816,6.323449,0.226901,6.475382,2.204501,3.179283],[-2.729379,2.151927,2.776404,3.453121,-3.084704,6.458923,3.363605,4.139570,0.723788,-3.996892,-3.183213,4.204332,0.034340,-8.397273],[9.866714,0.133791,4.532007,7.495006,-9.664509,4.225778,5.077976,4.568269,3.527643,2.187795,-6.410738,-3.754342,6.857048,8.178964],[-2.536784,-4.777957,8.266521,-0.247570,-7.583165,2.506801,-8.928529,-7.570457,9.610292,2.737839,-5.722301,0.861330,-9.849321,-0.476560]], dtype = "float32")#candidate|67|(10, 14)|const|float32
bop_68 = relay.less_equal(uop_53.astype('bool'), const_67.astype('bool')) # shape=(10, 14)
bop_71 = relay.minimum(bop_68.astype('uint8'), bop_42.astype('uint8')) # shape=(10, 14)
bop_74 = relay.floor_mod(uop_55.astype('float64'), uop_23.astype('float64')) # shape=()
uop_77 = relay.atanh(uop_55.astype('float64')) # shape=()
bop_79 = relay.mod(uop_77.astype('float32'), uop_23.astype('float32')) # shape=()
output = relay.Tuple([call_25,const_26,uop_34,uop_45,uop_47,bop_50,bop_61,bop_64,bop_71,bop_74,bop_79,])
output2 = relay.Tuple([call_27,const_26,uop_34,uop_45,uop_47,bop_50,bop_61,bop_64,bop_71,bop_74,bop_79,])
func_82 = relay.Function([var_22,var_49,var_60,], output)
mod['func_82'] = func_82
mod = relay.transform.InferType()(mod)
var_83 = relay.var("var_83", dtype = "float32", shape = ())#candidate|83|()|var|float32
var_84 = relay.var("var_84", dtype = "float32", shape = ())#candidate|84|()|var|float32
var_85 = relay.var("var_85", dtype = "float64", shape = ())#candidate|85|()|var|float64
output = func_82(var_83,var_84,var_85,)
func_86 = relay.Function([var_83,var_84,var_85,], output)
mutated_mod['func_86'] = func_86
mutated_mod = relay.transform.InferType()(mutated_mod)
var_88 = relay.var("var_88", dtype = "float64", shape = (3, 1))#candidate|88|(3, 1)|var|float64
uop_89 = relay.log(var_88.astype('float64')) # shape=(3, 1)
bop_91 = relay.mod(uop_89.astype('float64'), relay.reshape(var_88.astype('float64'), relay.shape_of(uop_89))) # shape=(3, 1)
bop_94 = relay.bitwise_xor(uop_89.astype('uint64'), relay.reshape(var_88.astype('uint64'), relay.shape_of(uop_89))) # shape=(3, 1)
var_97 = relay.var("var_97", dtype = "uint64", shape = (3, 2))#candidate|97|(3, 2)|var|uint64
bop_98 = relay.multiply(bop_94.astype('int64'), var_97.astype('int64')) # shape=(3, 2)
bop_101 = relay.logical_xor(bop_91.astype('int16'), relay.reshape(uop_89.astype('int16'), relay.shape_of(bop_91))) # shape=(3, 1)
uop_104 = relay.log10(uop_89.astype('float32')) # shape=(3, 1)
const_106 = relay.const([[-2.968440,9.282494,-2.176238,-9.119150,-8.583164,-5.420028,-7.367913,9.281888,0.394200],[4.995352,-6.801049,2.934459,7.795485,4.585102,-4.961768,3.536170,-0.234919,7.257936],[0.322750,0.759573,-2.119481,-7.232724,5.376974,8.069514,-9.264069,-6.277882,2.089918]], dtype = "float64")#candidate|106|(3, 9)|const|float64
bop_107 = relay.minimum(bop_91.astype('int16'), const_106.astype('int16')) # shape=(3, 9)
bop_110 = relay.less_equal(uop_104.astype('bool'), var_97.astype('bool')) # shape=(3, 2)
uop_113 = relay.rsqrt(uop_104.astype('float64')) # shape=(3, 1)
bop_115 = relay.logical_and(bop_101.astype('bool'), relay.reshape(var_88.astype('bool'), relay.shape_of(bop_101))) # shape=(3, 1)
output = relay.Tuple([bop_98,bop_107,bop_110,uop_113,bop_115,])
output2 = relay.Tuple([bop_98,bop_107,bop_110,uop_113,bop_115,])
func_118 = relay.Function([var_88,var_97,], output)
mod['func_118'] = func_118
mod = relay.transform.InferType()(mod)
var_119 = relay.var("var_119", dtype = "float64", shape = (3, 1))#candidate|119|(3, 1)|var|float64
var_120 = relay.var("var_120", dtype = "uint64", shape = (3, 2))#candidate|120|(3, 2)|var|uint64
output = func_118(var_119,var_120,)
func_121 = relay.Function([var_119,var_120,], output)
mutated_mod['func_121'] = func_121
mutated_mod = relay.transform.InferType()(mutated_mod)
const_123 = relay.const([-10,9,-4,2,9,-2], dtype = "uint16")#candidate|123|(6,)|const|uint16
var_124 = relay.var("var_124", dtype = "uint16", shape = (6,))#candidate|124|(6,)|var|uint16
bop_125 = relay.not_equal(const_123.astype('bool'), relay.reshape(var_124.astype('bool'), relay.shape_of(const_123))) # shape=(6,)
func_118_call = mod.get_global_var('func_118')
func_121_call = mutated_mod.get_global_var('func_121')
const_129 = relay.const([8.953936,-7.531202,7.585516], dtype = "float64")#candidate|129|(3,)|const|float64
call_128 = relay.TupleGetItem(func_118_call(relay.reshape(const_129.astype('float64'), [3, 1]), relay.reshape(bop_125.astype('uint64'), [3, 2]), ), 4)
call_130 = relay.TupleGetItem(func_121_call(relay.reshape(const_129.astype('float64'), [3, 1]), relay.reshape(bop_125.astype('uint64'), [3, 2]), ), 4)
bop_131 = relay.greater(const_123.astype('bool'), relay.reshape(bop_125.astype('bool'), relay.shape_of(const_123))) # shape=(6,)
uop_134 = relay.atanh(const_129.astype('float32')) # shape=(3,)
bop_136 = relay.logical_and(uop_134.astype('bool'), relay.reshape(call_128.astype('bool'), relay.shape_of(uop_134))) # shape=(3,)
bop_139 = relay.logical_and(uop_134.astype('bool'), relay.reshape(call_130.astype('bool'), relay.shape_of(uop_134))) # shape=(3,)
uop_140 = relay.rsqrt(call_128.astype('float64')) # shape=(3, 1)
uop_142 = relay.rsqrt(call_130.astype('float64')) # shape=(3, 1)
uop_143 = relay.log(uop_140.astype('float64')) # shape=(3, 1)
uop_145 = relay.log(uop_142.astype('float64')) # shape=(3, 1)
output = relay.Tuple([bop_131,bop_136,uop_143,])
output2 = relay.Tuple([bop_131,bop_139,uop_145,])
func_146 = relay.Function([var_124,], output)
mod['func_146'] = func_146
mod = relay.transform.InferType()(mod)
mutated_mod['func_146'] = func_146
mutated_mod = relay.transform.InferType()(mutated_mod)
var_147 = relay.var("var_147", dtype = "uint16", shape = (6,))#candidate|147|(6,)|var|uint16
func_146_call = mutated_mod.get_global_var('func_146')
call_148 = func_146_call(var_147)
output = call_148
func_149 = relay.Function([var_147], output)
mutated_mod['func_149'] = func_149
mutated_mod = relay.transform.InferType()(mutated_mod)
var_151 = relay.var("var_151", dtype = "float32", shape = (5, 12))#candidate|151|(5, 12)|var|float32
var_152 = relay.var("var_152", dtype = "float32", shape = (5, 12))#candidate|152|(5, 12)|var|float32
bop_153 = relay.divide(var_151.astype('float32'), relay.reshape(var_152.astype('float32'), relay.shape_of(var_151))) # shape=(5, 12)
uop_156 = relay.asinh(var_152.astype('float32')) # shape=(5, 12)
uop_158 = relay.rsqrt(uop_156.astype('float64')) # shape=(5, 12)
uop_160 = relay.log(uop_158.astype('float64')) # shape=(5, 12)
uop_162 = relay.tan(uop_160.astype('float64')) # shape=(5, 12)
uop_164 = relay.rsqrt(uop_160.astype('float64')) # shape=(5, 12)
bop_166 = relay.minimum(uop_160.astype('float64'), relay.reshape(uop_162.astype('float64'), relay.shape_of(uop_160))) # shape=(5, 12)
uop_169 = relay.sin(uop_162.astype('float32')) # shape=(5, 12)
uop_171 = relay.cos(uop_160.astype('float32')) # shape=(5, 12)
uop_173 = relay.sinh(uop_158.astype('float32')) # shape=(5, 12)
bop_175 = relay.multiply(uop_158.astype('uint64'), relay.reshape(uop_164.astype('uint64'), relay.shape_of(uop_158))) # shape=(5, 12)
func_17_call = mod.get_global_var('func_17')
func_20_call = mutated_mod.get_global_var('func_20')
var_179 = relay.var("var_179", dtype = "uint8", shape = (11,))#candidate|179|(11,)|var|uint8
call_178 = relay.TupleGetItem(func_17_call(relay.reshape(var_179.astype('uint8'), [11,]), relay.reshape(var_179.astype('uint8'), [11,]), ), 0)
call_180 = relay.TupleGetItem(func_20_call(relay.reshape(var_179.astype('uint8'), [11,]), relay.reshape(var_179.astype('uint8'), [11,]), ), 0)
bop_181 = relay.maximum(uop_169.astype('uint32'), relay.reshape(uop_160.astype('uint32'), relay.shape_of(uop_169))) # shape=(5, 12)
bop_184 = relay.not_equal(uop_160.astype('bool'), relay.reshape(uop_156.astype('bool'), relay.shape_of(uop_160))) # shape=(5, 12)
uop_187 = relay.sqrt(bop_166.astype('float64')) # shape=(5, 12)
output = relay.Tuple([bop_153,uop_171,uop_173,bop_175,call_178,var_179,bop_181,bop_184,uop_187,])
output2 = relay.Tuple([bop_153,uop_171,uop_173,bop_175,call_180,var_179,bop_181,bop_184,uop_187,])
func_189 = relay.Function([var_151,var_152,var_179,], output)
mod['func_189'] = func_189
mod = relay.transform.InferType()(mod)
var_190 = relay.var("var_190", dtype = "float32", shape = (5, 12))#candidate|190|(5, 12)|var|float32
var_191 = relay.var("var_191", dtype = "float32", shape = (5, 12))#candidate|191|(5, 12)|var|float32
var_192 = relay.var("var_192", dtype = "uint8", shape = (11,))#candidate|192|(11,)|var|uint8
output = func_189(var_190,var_191,var_192,)
func_193 = relay.Function([var_190,var_191,var_192,], output)
mutated_mod['func_193'] = func_193
mutated_mod = relay.transform.InferType()(mutated_mod)
var_195 = relay.var("var_195", dtype = "float64", shape = (10, 2, 8))#candidate|195|(10, 2, 8)|var|float64
uop_196 = relay.asinh(var_195.astype('float64')) # shape=(10, 2, 8)
uop_198 = relay.erf(var_195.astype('float32')) # shape=(10, 2, 8)
bop_200 = relay.mod(uop_198.astype('float64'), relay.reshape(var_195.astype('float64'), relay.shape_of(uop_198))) # shape=(10, 2, 8)
var_203 = relay.var("var_203", dtype = "float64", shape = (10, 2, 8))#candidate|203|(10, 2, 8)|var|float64
bop_204 = relay.logical_or(bop_200.astype('bool'), relay.reshape(var_203.astype('bool'), relay.shape_of(bop_200))) # shape=(10, 2, 8)
var_207 = relay.var("var_207", dtype = "float64", shape = (10, 2, 8))#candidate|207|(10, 2, 8)|var|float64
bop_208 = relay.less_equal(var_195.astype('bool'), relay.reshape(var_207.astype('bool'), relay.shape_of(var_195))) # shape=(10, 2, 8)
bop_211 = relay.floor_divide(uop_198.astype('float32'), relay.reshape(var_203.astype('float32'), relay.shape_of(uop_198))) # shape=(10, 2, 8)
bop_214 = relay.mod(uop_198.astype('float64'), relay.reshape(bop_211.astype('float64'), relay.shape_of(uop_198))) # shape=(10, 2, 8)
bop_217 = relay.not_equal(var_195.astype('bool'), relay.reshape(var_203.astype('bool'), relay.shape_of(var_195))) # shape=(10, 2, 8)
bop_220 = relay.left_shift(bop_200.astype('uint16'), relay.reshape(bop_214.astype('uint16'), relay.shape_of(bop_200))) # shape=(10, 2, 8)
uop_223 = relay.sqrt(bop_220.astype('float32')) # shape=(10, 2, 8)
uop_225 = relay.log2(uop_223.astype('float64')) # shape=(10, 2, 8)
bop_227 = relay.not_equal(uop_198.astype('bool'), relay.reshape(var_203.astype('bool'), relay.shape_of(uop_198))) # shape=(10, 2, 8)
bop_230 = relay.power(uop_223.astype('float64'), relay.reshape(bop_220.astype('float64'), relay.shape_of(uop_223))) # shape=(10, 2, 8)
bop_233 = relay.subtract(uop_225.astype('int8'), relay.reshape(bop_208.astype('int8'), relay.shape_of(uop_225))) # shape=(10, 2, 8)
func_17_call = mod.get_global_var('func_17')
func_20_call = mutated_mod.get_global_var('func_20')
const_237 = relay.const([4,-3,5,7,8,6,-5,-7,4,7,3], dtype = "uint8")#candidate|237|(11,)|const|uint8
call_236 = relay.TupleGetItem(func_17_call(relay.reshape(const_237.astype('uint8'), [11,]), relay.reshape(const_237.astype('uint8'), [11,]), ), 0)
call_238 = relay.TupleGetItem(func_20_call(relay.reshape(const_237.astype('uint8'), [11,]), relay.reshape(const_237.astype('uint8'), [11,]), ), 0)
uop_239 = relay.atan(uop_225.astype('float32')) # shape=(10, 2, 8)
uop_241 = relay.asinh(var_195.astype('float64')) # shape=(10, 2, 8)
uop_243 = relay.log2(bop_200.astype('float32')) # shape=(10, 2, 8)
output = relay.Tuple([uop_196,bop_204,bop_217,bop_227,bop_230,bop_233,call_236,const_237,uop_239,uop_241,uop_243,])
output2 = relay.Tuple([uop_196,bop_204,bop_217,bop_227,bop_230,bop_233,call_238,const_237,uop_239,uop_241,uop_243,])
func_245 = relay.Function([var_195,var_203,var_207,], output)
mod['func_245'] = func_245
mod = relay.transform.InferType()(mod)
mutated_mod['func_245'] = func_245
mutated_mod = relay.transform.InferType()(mutated_mod)
func_245_call = mutated_mod.get_global_var('func_245')
var_247 = relay.var("var_247", dtype = "float64", shape = (10, 2, 8))#candidate|247|(10, 2, 8)|var|float64
var_248 = relay.var("var_248", dtype = "float64", shape = (10, 2, 8))#candidate|248|(10, 2, 8)|var|float64
var_249 = relay.var("var_249", dtype = "float64", shape = (10, 2, 8))#candidate|249|(10, 2, 8)|var|float64
call_246 = func_245_call(var_247,var_248,var_249,)
output = call_246
func_250 = relay.Function([var_247,var_248,var_249,], output)
mutated_mod['func_250'] = func_250
mutated_mod = relay.transform.InferType()(mutated_mod)
const_252 = relay.const(-4.293770, dtype = "float32")#candidate|252|()|const|float32
uop_253 = relay.acos(const_252.astype('float32')) # shape=()
bop_255 = relay.add(uop_253.astype('uint16'), const_252.astype('uint16')) # shape=()
const_258 = relay.const([[3,-2,-4,-6,-8,6,-8,8,-6,-2,5,4],[-9,4,4,-7,8,9,4,2,10,-7,9,-10],[2,-7,-7,1,-3,-9,7,-8,-5,-6,-4,-10],[10,-1,-7,-3,2,-8,-1,6,-1,3,-8,4],[-7,4,-1,-6,-4,-10,-9,-9,-5,1,-5,-9],[9,-6,-4,4,-1,5,-3,-4,1,5,9,2],[-3,7,9,4,-10,8,-3,5,9,7,-2,-6],[-5,2,6,-5,6,-7,-1,-4,-3,5,3,1],[2,3,-9,7,-1,-7,5,-6,-5,6,5,-7]], dtype = "uint16")#candidate|258|(9, 12)|const|uint16
bop_259 = relay.minimum(bop_255.astype('int8'), const_258.astype('int8')) # shape=(9, 12)
var_262 = relay.var("var_262", dtype = "uint16", shape = (9, 12))#candidate|262|(9, 12)|var|uint16
bop_263 = relay.bitwise_xor(const_258.astype('int8'), relay.reshape(var_262.astype('int8'), relay.shape_of(const_258))) # shape=(9, 12)
func_146_call = mod.get_global_var('func_146')
func_149_call = mutated_mod.get_global_var('func_149')
const_267 = relay.const([5,5,6,-3,-5,2], dtype = "uint16")#candidate|267|(6,)|const|uint16
call_266 = relay.TupleGetItem(func_146_call(relay.reshape(const_267.astype('uint16'), [6,])), 0)
call_268 = relay.TupleGetItem(func_149_call(relay.reshape(const_267.astype('uint16'), [6,])), 0)
uop_269 = relay.sinh(uop_253.astype('float64')) # shape=()
var_271 = relay.var("var_271", dtype = "int8", shape = (9, 12))#candidate|271|(9, 12)|var|int8
bop_272 = relay.floor_divide(bop_259.astype('float32'), relay.reshape(var_271.astype('float32'), relay.shape_of(bop_259))) # shape=(9, 12)
uop_275 = relay.asin(uop_269.astype('float32')) # shape=()
uop_277 = relay.sinh(uop_275.astype('float64')) # shape=()
uop_279 = relay.sqrt(uop_275.astype('float64')) # shape=()
uop_281 = relay.asin(uop_277.astype('float64')) # shape=()
bop_283 = relay.logical_and(bop_272.astype('bool'), uop_277.astype('bool')) # shape=(9, 12)
uop_286 = relay.asin(uop_275.astype('float32')) # shape=()
uop_288 = relay.rsqrt(uop_281.astype('float64')) # shape=()
bop_290 = relay.right_shift(uop_269.astype('int8'), var_271.astype('int8')) # shape=(9, 12)
var_293 = relay.var("var_293", dtype = "float32", shape = (4,))#candidate|293|(4,)|var|float32
bop_294 = relay.mod(uop_286.astype('float64'), var_293.astype('float64')) # shape=(4,)
var_297 = relay.var("var_297", dtype = "float32", shape = (2, 3, 9))#candidate|297|(2, 3, 9)|var|float32
bop_298 = relay.bitwise_and(uop_286.astype('int32'), var_297.astype('int32')) # shape=(2, 3, 9)
bop_301 = relay.logical_and(uop_288.astype('bool'), bop_294.astype('bool')) # shape=(4,)
uop_304 = relay.exp(bop_301.astype('float32')) # shape=(4,)
bop_306 = relay.greater(uop_304.astype('bool'), relay.reshape(bop_301.astype('bool'), relay.shape_of(uop_304))) # shape=(4,)
uop_309 = relay.sigmoid(uop_275.astype('float64')) # shape=()
const_311 = relay.const([[0.093377,3.691373,-4.733702,4.270667,-0.554520,-8.482849,-5.274485,5.386434,6.700955,8.936639,-1.298141,-5.184811],[-2.069254,-7.698469,0.863939,-9.480530,9.461673,0.556486,-1.942836,-4.792707,8.336731,6.216203,7.266334,2.576699],[-0.740102,3.112218,2.061811,-5.368022,5.073379,-3.710837,0.705537,1.596554,-5.404422,-5.301906,8.176568,0.337515],[0.641037,-6.049845,9.044931,8.973840,-5.679557,4.456358,-9.568346,7.619071,-3.878503,-7.442089,-9.854254,1.160301]], dtype = "float64")#candidate|311|(4, 12)|const|float64
bop_312 = relay.floor_divide(uop_281.astype('float32'), const_311.astype('float32')) # shape=(4, 12)
uop_315 = relay.cosh(bop_306.astype('float32')) # shape=(4,)
var_317 = relay.var("var_317", dtype = "float32", shape = (4,))#candidate|317|(4,)|var|float32
bop_318 = relay.maximum(uop_304.astype('int16'), relay.reshape(var_317.astype('int16'), relay.shape_of(uop_304))) # shape=(4,)
bop_321 = relay.maximum(uop_281.astype('uint16'), bop_283.astype('uint16')) # shape=(9, 12)
var_324 = relay.var("var_324", dtype = "float32", shape = (4,))#candidate|324|(4,)|var|float32
bop_325 = relay.less(uop_315.astype('bool'), relay.reshape(var_324.astype('bool'), relay.shape_of(uop_315))) # shape=(4,)
bop_328 = relay.floor_divide(bop_325.astype('float32'), relay.reshape(bop_301.astype('float32'), relay.shape_of(bop_325))) # shape=(4,)
uop_331 = relay.log10(bop_301.astype('float32')) # shape=(4,)
output = relay.Tuple([bop_263,call_266,const_267,uop_279,bop_290,bop_298,uop_309,bop_312,bop_318,bop_321,bop_328,uop_331,])
output2 = relay.Tuple([bop_263,call_268,const_267,uop_279,bop_290,bop_298,uop_309,bop_312,bop_318,bop_321,bop_328,uop_331,])
F = relay.Function([var_262,var_271,var_293,var_297,var_317,var_324,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_262,var_271,var_293,var_297,var_317,var_324,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_262= np.array([[-3,6,-3,8,-10,7,1,5,4,-4,1,-2],[10,-3,-7,6,1,1,6,-1,10,-4,-5,-2],[-7,7,-10,8,-5,10,5,1,9,3,3,-2],[3,3,2,-7,10,4,5,1,-2,-9,6,-4],[-3,-10,10,-9,-5,3,6,6,-5,5,2,-7],[6,3,7,-6,-6,-7,8,1,6,1,-3,-7],[9,8,7,-6,-3,-4,-6,-1,9,-1,5,2],[-6,-5,-2,-7,6,2,1,6,-7,-4,-5,7],[6,2,-10,3,9,-4,10,-4,7,2,4,-3]], dtype='uint16')
module1.set_input('var_262', input_262)
input_271= np.array([[10,-5,-4,-8,-2,2,-5,9,4,-7,-7,3],[-4,3,2,-8,3,5,6,10,4,-2,-8,2],[-4,-6,-9,4,-1,3,3,6,-5,-5,-4,10],[8,6,-3,-8,9,-6,3,4,-7,7,-8,-7],[-6,7,1,8,9,5,-4,9,-7,4,6,-3],[-6,-4,5,-9,-6,-1,-4,-8,4,-7,8,-2],[4,4,5,-5,-10,-5,-2,8,-1,-7,-9,-1],[8,-1,-7,-1,10,-1,5,-4,-4,-1,-3,4],[-9,2,6,1,3,-10,7,-1,9,2,7,8]], dtype='int8')
module1.set_input('var_271', input_271)
input_293= np.array([-3.204095,-4.430153,-5.041878,7.213210], dtype='float32')
module1.set_input('var_293', input_293)
input_297= np.array([[[-8.619583,5.256869,9.827059,-8.996629,6.142080,2.580004,2.223531,-8.986769,2.460351],[0.996003,-9.221265,9.910032,1.053695,-3.025267,-0.836755,5.448279,-9.267263,2.534684],[0.637167,-6.329919,5.299249,-7.522965,-4.563135,-4.969691,-6.796482,3.192686,-0.526918]],[[0.608412,-8.217586,4.424564,4.030909,7.385373,7.658253,-8.553502,7.751821,3.341677],[-7.630037,1.544682,-7.976801,-7.624158,1.765564,-7.461307,-7.950826,9.794716,3.946842],[-1.435934,-5.305076,-7.733965,-6.249306,-5.890836,5.685949,-3.852513,3.283768,-4.415847]]], dtype='float32')
module1.set_input('var_297', input_297)
input_317= np.array([4.684296,-5.969879,-1.979315,-4.989070], dtype='float32')
module1.set_input('var_317', input_317)
input_324= np.array([-8.929597,7.258271,-1.490571,8.876708], dtype='float32')
module1.set_input('var_324', input_324)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_262, input_271, input_293, input_297, input_317, input_324, )
res3 = intrp3.evaluate()(input_262, input_271, input_293, input_297, input_317, input_324, )
res4 = intrp4.evaluate()(input_262, input_271, input_293, input_297, input_317, input_324, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
module5.set_input('var_262', input_262)
module5.set_input('var_271', input_271)
module5.set_input('var_293', input_293)
module5.set_input('var_297', input_297)
module5.set_input('var_317', input_317)
module5.set_input('var_324', input_324)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_262, input_271, input_293, input_297, input_317, input_324, )
res7 = intrp7.evaluate()(input_262, input_271, input_293, input_297, input_317, input_324, )
res8 = intrp8.evaluate()(input_262, input_271, input_293, input_297, input_317, input_324, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
module9.set_input('var_262', input_262)
module9.set_input('var_271', input_271)
module9.set_input('var_293', input_293)
module9.set_input('var_297', input_297)
module9.set_input('var_317', input_317)
module9.set_input('var_324', input_324)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_262, input_271, input_293, input_297, input_317, input_324, )
res11 = intrp11.evaluate()(input_262, input_271, input_293, input_297, input_317, input_324, )
res12 = intrp12.evaluate()(input_262, input_271, input_293, input_297, input_317, input_324, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
module13.set_input('var_262', input_262)
module13.set_input('var_271', input_271)
module13.set_input('var_293', input_293)
module13.set_input('var_297', input_297)
module13.set_input('var_317', input_317)
module13.set_input('var_324', input_324)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_262, input_271, input_293, input_297, input_317, input_324, )
res15 = intrp15.evaluate()(input_262, input_271, input_293, input_297, input_317, input_324, )
res16 = intrp16.evaluate()(input_262, input_271, input_293, input_297, input_317, input_324, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
module17.set_input('var_262', input_262)
module17.set_input('var_271', input_271)
module17.set_input('var_293', input_293)
module17.set_input('var_297', input_297)
module17.set_input('var_317', input_317)
module17.set_input('var_324', input_324)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_262, input_271, input_293, input_297, input_317, input_324, )
res19 = intrp19.evaluate()(input_262, input_271, input_293, input_297, input_317, input_324, )
res20 = intrp20.evaluate()(input_262, input_271, input_293, input_297, input_317, input_324, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
module21.set_input('var_262', input_262)
module21.set_input('var_271', input_271)
module21.set_input('var_293', input_293)
module21.set_input('var_297', input_297)
module21.set_input('var_317', input_317)
module21.set_input('var_324', input_324)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_262, input_271, input_293, input_297, input_317, input_324, )
res23 = intrp23.evaluate()(input_262, input_271, input_293, input_297, input_317, input_324, )
res24 = intrp24.evaluate()(input_262, input_271, input_293, input_297, input_317, input_324, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()

'''33: TVMFuncCall
32: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
31: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
30: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
29: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
28: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
27: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
26: tvm::relay::GraphPlanMemory(tvm::relay::Function const&)
25: tvm::relay::StorageAllocator::Plan(tvm::relay::Function const&)
24: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
21: tvm::relay::transform::DeviceAwareExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
20: tvm::relay::StorageAllocaBaseVisitor::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
19: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
18: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
17: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
16: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
15: tvm::relay::StorageAllocaBaseVisitor::VisitExpr_(tvm::relay::TupleNode const*)
14: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
13: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
12: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
11: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
10: tvm::relay::StorageAllocaBaseVisitor::VisitExpr_(tvm::relay::TupleGetItemNode const*)
9: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
8: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
7: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
6: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
5: tvm::relay::transform::DeviceAwareExprVisitor::VisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::StorageAllocator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
3: tvm::relay::StorageAllocaBaseVisitor::CreateToken(tvm::RelayExprNode const*, bool)
2: tvm::relay::StorageAllocator::CreateTokenOnDevice(tvm::RelayExprNode const*, tvm::VirtualDevice const&, bool)
1: tvm::relay::StorageAllocator::Request(tvm::relay::StorageToken*)
0: tvm::relay::StorageAllocator::GetMemorySize(tvm::relay::StorageToken*)

'''