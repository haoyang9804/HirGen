import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = ())#candidate|0|()|var|float64
uop_1 = relay.acos(var_0.astype('float64')) # shape=()
uop_3 = relay.sinh(uop_1.astype('float32')) # shape=()
uop_5 = relay.atanh(uop_3.astype('float64')) # shape=()
uop_7 = relay.atanh(uop_5.astype('float64')) # shape=()
var_9 = relay.var("var_9", dtype = "float64", shape = (15, 10, 8))#candidate|9|(15, 10, 8)|var|float64
bop_10 = relay.left_shift(uop_7.astype('uint16'), var_9.astype('uint16')) # shape=(15, 10, 8)
bop_13 = relay.divide(bop_10.astype('float64'), uop_3.astype('float64')) # shape=(15, 10, 8)
bop_16 = relay.logical_and(uop_7.astype('bool'), uop_3.astype('bool')) # shape=()
bop_19 = relay.floor_mod(bop_13.astype('float64'), uop_1.astype('float64')) # shape=(15, 10, 8)
var_22 = relay.var("var_22", dtype = "float32", shape = ())#candidate|22|()|var|float32
bop_23 = relay.less_equal(uop_3.astype('bool'), var_22.astype('bool')) # shape=()
output = relay.Tuple([bop_16,bop_19,bop_23,])
output2 = relay.Tuple([bop_16,bop_19,bop_23,])
func_26 = relay.Function([var_0,var_9,var_22,], output)
mod['func_26'] = func_26
mod = relay.transform.InferType()(mod)
var_27 = relay.var("var_27", dtype = "float64", shape = ())#candidate|27|()|var|float64
var_28 = relay.var("var_28", dtype = "float64", shape = (15, 10, 8))#candidate|28|(15, 10, 8)|var|float64
var_29 = relay.var("var_29", dtype = "float32", shape = ())#candidate|29|()|var|float32
output = func_26(var_27,var_28,var_29,)
func_30 = relay.Function([var_27,var_28,var_29,], output)
mutated_mod['func_30'] = func_30
mutated_mod = relay.transform.InferType()(mutated_mod)
var_32 = relay.var("var_32", dtype = "uint64", shape = (8, 16, 6))#candidate|32|(8, 16, 6)|var|uint64
var_33 = relay.var("var_33", dtype = "uint64", shape = (8, 16, 6))#candidate|33|(8, 16, 6)|var|uint64
bop_34 = relay.right_shift(var_32.astype('uint64'), relay.reshape(var_33.astype('uint64'), relay.shape_of(var_32))) # shape=(8, 16, 6)
uop_37 = relay.acos(var_32.astype('float64')) # shape=(8, 16, 6)
var_39 = relay.var("var_39", dtype = "uint64", shape = (8, 16, 6))#candidate|39|(8, 16, 6)|var|uint64
bop_40 = relay.greater_equal(var_32.astype('bool'), relay.reshape(var_39.astype('bool'), relay.shape_of(var_32))) # shape=(8, 16, 6)
bop_43 = relay.right_shift(uop_37.astype('uint8'), relay.reshape(bop_40.astype('uint8'), relay.shape_of(uop_37))) # shape=(8, 16, 6)
output = relay.Tuple([bop_34,bop_43,])
output2 = relay.Tuple([bop_34,bop_43,])
func_46 = relay.Function([var_32,var_33,var_39,], output)
mod['func_46'] = func_46
mod = relay.transform.InferType()(mod)
mutated_mod['func_46'] = func_46
mutated_mod = relay.transform.InferType()(mutated_mod)
func_46_call = mutated_mod.get_global_var('func_46')
var_48 = relay.var("var_48", dtype = "uint64", shape = (8, 16, 6))#candidate|48|(8, 16, 6)|var|uint64
var_49 = relay.var("var_49", dtype = "uint64", shape = (8, 16, 6))#candidate|49|(8, 16, 6)|var|uint64
var_50 = relay.var("var_50", dtype = "uint64", shape = (8, 16, 6))#candidate|50|(8, 16, 6)|var|uint64
call_47 = func_46_call(var_48,var_49,var_50,)
output = call_47
func_51 = relay.Function([var_48,var_49,var_50,], output)
mutated_mod['func_51'] = func_51
mutated_mod = relay.transform.InferType()(mutated_mod)
const_53 = relay.const([[[-0.757599,8.189697,2.808840,7.036592,3.749323,-2.306493,2.908588,-8.162358,-5.041180,-9.641277,-3.498532,9.009506],[-2.034859,5.348907,-0.995086,-1.281354,3.393231,3.915117,8.350819,4.549208,3.192338,-3.418567,-9.811606,6.044271],[-4.619779,-2.071433,1.097901,6.042778,2.155734,-8.561386,-1.134295,-7.565843,-9.474682,-2.644472,-8.777648,-1.377008],[4.532085,5.668207,3.319063,-4.939464,-3.135725,-0.864373,2.306993,1.453570,5.044803,-1.895308,-2.157370,5.817024],[-3.067277,0.497461,5.036261,-0.775951,-3.124094,0.591986,-7.024852,-6.158065,-8.164055,-6.377458,-1.389800,-0.535360],[6.627148,2.161013,9.989653,-1.284106,-1.254316,0.787312,7.701223,4.619391,5.029127,-4.633573,-3.748947,-8.789881]],[[8.498751,-1.566354,-7.817951,1.613666,6.691705,1.298192,9.942374,-1.028359,4.158306,-0.890589,5.257824,9.089259],[-3.177661,4.608218,-8.703512,9.556768,-1.384780,8.595244,-0.547211,5.045433,-3.855980,-9.928918,-3.441134,7.603291],[-7.033292,2.062619,4.101382,-4.382402,-1.484012,0.175412,0.303023,-5.046450,-2.359545,-0.398472,5.575567,8.141960],[8.797110,2.650709,-4.542029,7.335775,-1.121491,2.248075,0.511866,3.960758,6.963731,-5.157307,3.277663,-2.939196],[3.265624,-9.698628,-2.319484,-5.744031,-3.014740,-6.502992,-5.678683,1.862265,-1.637501,7.922344,5.888029,2.754350],[7.668523,3.230065,-8.226557,-9.794793,7.985138,-2.359439,-1.449261,5.523473,9.289713,-2.289444,5.783398,-4.702706]],[[-4.038310,-2.202083,9.229965,-0.923432,9.512740,2.256629,0.389545,3.381522,5.761524,0.972490,-4.747692,-3.306843],[-1.015523,-0.293154,-9.677731,8.493447,-3.933489,-3.096355,0.323500,-6.151424,7.105325,-0.710330,7.936667,2.775428],[-0.235334,8.749322,1.531676,-5.167004,-6.546464,7.950468,6.995840,3.122848,-0.767826,7.520440,-1.642257,4.317715],[-7.749503,-3.804305,5.442600,-0.678642,-0.684343,2.004362,3.017763,2.500751,-7.440833,-3.243432,4.388288,2.661181],[-5.249566,4.764807,-9.962983,-3.517122,3.161611,-3.257711,-5.607803,-6.315258,-3.577171,-8.938474,5.943009,4.436423],[-7.779809,7.820681,6.804426,-6.549097,-9.076775,-9.233953,-3.017171,2.955429,-2.659776,-5.749388,-1.275637,0.786163]],[[-5.592329,-2.191185,-7.311898,2.076350,1.011874,-1.082519,4.011601,-8.284212,3.454873,-8.934546,9.038177,9.608183],[-2.183543,-2.453428,-8.880888,3.759325,3.550222,-6.019062,-2.612356,1.651655,-8.085052,-5.452056,-7.276011,4.198535],[-0.453359,6.347473,5.748710,3.416863,-7.150697,-7.737854,7.747227,-1.800421,7.368005,-4.484346,-8.017607,-6.940806],[-2.103018,9.360602,7.552039,-6.153445,-6.481730,-9.316159,-7.607359,7.494655,4.887013,1.716250,-1.565928,-4.679241],[-8.341409,0.487115,-4.239848,0.138657,-4.992819,2.035032,-8.370702,2.539253,1.148116,-3.357042,8.865995,-5.863393],[-7.183146,-9.242099,4.094129,-3.782182,8.330125,8.630286,9.163355,-1.786507,7.856071,-1.429811,1.981570,-0.378423]],[[2.986294,-6.028355,5.852213,4.344459,-7.149686,-5.919481,-7.091901,8.990107,-6.991481,4.998336,-5.886628,3.517135],[4.548206,8.116617,-7.234838,1.238485,-3.350683,-1.922133,3.706319,5.872923,4.156867,0.597979,0.858908,-7.586850],[1.014360,2.144980,1.585461,8.251876,-4.311509,-1.002874,6.268654,-5.359796,3.754201,6.177215,8.207355,5.588117],[-3.671127,-2.618578,3.884756,1.571008,4.692158,-0.124567,6.792372,4.147197,-1.518651,-4.549170,-4.986726,-5.094987],[-3.786898,-5.306869,-4.211657,-7.711634,-3.220318,-6.434681,4.291837,9.665555,8.473620,-3.238319,9.057407,-8.422339],[5.221921,4.007566,-4.310724,2.197596,7.736451,-0.494877,0.963225,-3.303129,7.720714,-6.081739,-7.287241,2.253747]],[[4.098312,6.543857,-8.252963,6.166520,-3.114049,0.703821,-8.437527,0.292990,-8.510534,5.143664,8.569165,0.007528],[2.541492,0.890523,7.190520,8.307227,-8.533184,-2.763133,-0.851970,-8.546570,-5.841991,9.463486,2.941416,2.740267],[-0.294048,8.418631,-0.935309,1.730272,-8.476995,-7.235697,2.902570,0.768981,-7.756479,-0.181964,0.453857,0.368251],[-2.891134,-8.283289,-7.558267,0.549287,-2.964836,-3.205376,-4.225135,-1.635900,-0.684466,-9.520851,-2.147153,-0.049604],[7.806519,-2.563757,0.909372,2.889619,-5.720878,9.501323,3.530022,-8.497267,-6.584947,-5.858324,-6.571317,7.772281],[4.693173,-6.675130,3.955087,-0.086056,-2.590290,8.771229,0.227190,5.426128,-9.695609,-9.687709,-3.811183,-5.247460]],[[7.248039,6.062221,4.809320,-4.575061,-5.398707,1.391661,1.202127,1.597834,-6.154334,-9.956275,0.746027,0.136602],[-8.523225,4.665615,-5.389234,0.095295,-2.080328,0.486701,-4.800056,3.308449,6.196156,-5.676286,-7.507799,-5.343353],[2.569737,-6.633557,-4.792132,-3.897150,6.137864,9.617400,0.624017,0.809080,0.179436,-7.098750,9.259399,5.605495],[-2.932600,2.943917,4.909711,8.442012,-4.807872,0.405536,8.050028,-2.955579,1.385308,3.077573,-2.547454,-1.727263],[7.328401,2.666219,-4.808217,0.057708,6.618763,-1.464599,-5.364959,0.574373,9.267608,-0.684284,-8.257127,-7.717478],[-9.937405,1.445494,-2.998193,4.704584,-2.241273,-7.241751,9.403957,9.100871,1.557092,2.789107,9.415037,-7.458632]],[[8.945766,2.100069,8.272444,1.703585,3.094438,8.786771,-6.139368,-7.930608,1.859035,-6.668945,-2.891291,9.276727],[6.544476,-1.957069,6.121377,2.431414,4.520560,9.246451,-3.734768,-5.790194,5.333182,-5.285612,-3.195740,-6.919550],[1.406957,-4.220346,-8.277115,9.498423,-1.392014,-6.680479,8.238298,-3.568301,-8.077013,2.170134,-7.597884,7.359209],[7.474771,-0.696718,-8.363244,-7.342444,0.856674,2.868586,-9.867248,5.585154,-7.613026,2.581296,7.389956,-8.619418],[3.932225,0.699155,-9.251606,4.643655,-9.213665,4.829248,-2.038772,-0.499103,8.441716,9.706643,4.006029,-8.802210],[-1.499899,4.952651,-4.058924,2.686647,7.311435,7.058293,9.501080,-1.982882,-7.559323,-0.298515,4.228271,-8.149378]],[[9.486296,-7.579515,-0.883177,-5.107240,-5.403737,8.922141,-6.673664,-4.283486,8.511599,9.268841,-4.441671,-4.088891],[0.276904,1.822070,6.049106,9.993810,9.582946,3.093029,8.378775,-1.061535,2.916207,-9.960747,2.749855,-8.781075],[-6.899150,8.094238,3.176789,-8.966363,7.813908,7.802911,5.729803,2.114757,-5.431303,3.648312,-9.672523,-6.244053],[9.680346,2.702955,5.618659,5.166426,6.477053,2.262531,-1.955751,-5.658119,3.697858,-8.181247,-6.786002,-1.363820],[2.040322,-4.706175,8.242427,9.022220,8.767857,4.866473,-6.961134,5.362075,-8.758732,-8.353526,-0.590547,-2.916316],[-9.011248,-0.452560,-5.572228,-6.103106,-9.178553,4.381403,6.846481,-7.564482,-0.678180,3.329100,-6.402420,-9.575735]],[[3.196512,8.978086,2.231390,-8.645642,9.727113,4.571289,1.187341,5.430481,-5.972862,6.722839,4.000521,7.518190],[-6.621340,1.173822,5.605393,4.698784,-7.967463,-9.453467,-9.510829,-6.090525,6.162892,5.205623,0.672494,0.351448],[8.621452,2.468072,-7.068931,-5.518737,2.786943,-3.389247,-7.248828,-2.652560,-3.580912,-4.378678,6.996203,-6.541961],[-2.229413,4.345531,-2.369217,-4.627334,7.486539,1.448700,-8.216379,-7.008062,2.150318,-5.285907,-5.478610,-6.433588],[8.652324,9.606577,4.152571,5.940431,9.134526,5.471707,5.960425,-7.768157,7.977590,6.413628,1.354789,-9.107890],[-6.710637,-9.288541,2.656283,1.221034,-5.661358,4.658458,3.797042,4.563507,1.684282,-1.163515,-3.545588,8.128434]],[[-6.795930,3.507039,8.870397,-2.095822,-9.662071,-1.858916,-9.402273,-8.572436,7.160509,-0.060606,9.414420,5.377233],[8.574423,6.770152,-8.410173,3.381162,3.243310,7.314383,-7.377981,-4.428694,-0.906168,-4.794481,7.490554,1.900335],[-5.934045,4.419197,-8.734254,-1.992016,-1.794970,5.893726,4.193886,-9.482459,-3.791033,2.540558,4.284586,2.307533],[-5.760105,-2.738972,5.514399,-6.032108,-5.255964,0.070093,1.510366,-4.647269,6.380665,-1.398902,-6.935335,-6.692885],[-6.197051,-9.460474,1.769512,-8.863360,5.522689,0.664939,-2.194623,1.079433,7.679493,3.892576,-7.647349,8.989984],[-8.483728,-8.354257,-7.686997,5.738364,-3.010764,-9.942338,0.239970,-9.172322,-9.168276,7.377994,6.883125,0.773561]],[[9.067385,0.056464,-7.164693,-5.629125,4.121383,8.421020,0.599444,-0.571938,-9.770895,4.916644,7.122542,7.426086],[-3.728663,8.141969,2.256484,-1.188566,5.678490,-4.430379,-8.804071,-2.274355,-6.995475,3.095996,-2.404756,0.135162],[9.702420,4.429615,-7.099981,-3.762170,7.624179,0.799196,-6.212048,-2.902745,1.112690,5.176555,5.203517,2.274954],[2.973323,4.193863,5.162373,9.673678,7.830507,1.973952,1.454078,-1.836878,1.486930,4.477550,-1.187555,-6.218651],[-0.030010,4.480688,1.125016,0.134443,-8.665889,9.552325,-3.352140,-2.921918,3.708984,0.574839,2.855692,3.683404],[6.469538,-4.489837,-9.335292,-5.871457,-2.328582,-9.261740,-6.270069,-7.731544,-5.716195,-1.060635,-8.261165,2.396896]]], dtype = "float32")#candidate|53|(12, 6, 12)|const|float32
uop_54 = relay.atanh(const_53.astype('float32')) # shape=(12, 6, 12)
bop_56 = relay.not_equal(const_53.astype('bool'), relay.reshape(uop_54.astype('bool'), relay.shape_of(const_53))) # shape=(12, 6, 12)
bop_59 = relay.bitwise_xor(uop_54.astype('int64'), relay.reshape(const_53.astype('int64'), relay.shape_of(uop_54))) # shape=(12, 6, 12)
uop_62 = relay.atanh(bop_59.astype('float64')) # shape=(12, 6, 12)
uop_64 = relay.log2(uop_54.astype('float64')) # shape=(12, 6, 12)
uop_66 = relay.acos(uop_62.astype('float32')) # shape=(12, 6, 12)
bop_68 = relay.maximum(uop_66.astype('uint32'), relay.reshape(bop_56.astype('uint32'), relay.shape_of(uop_66))) # shape=(12, 6, 12)
bop_71 = relay.less(uop_62.astype('bool'), relay.reshape(bop_59.astype('bool'), relay.shape_of(uop_62))) # shape=(12, 6, 12)
uop_74 = relay.cos(bop_68.astype('float32')) # shape=(12, 6, 12)
uop_76 = relay.cosh(uop_66.astype('float64')) # shape=(12, 6, 12)
uop_78 = relay.acos(uop_76.astype('float32')) # shape=(12, 6, 12)
bop_80 = relay.power(uop_78.astype('float64'), relay.reshape(uop_62.astype('float64'), relay.shape_of(uop_78))) # shape=(12, 6, 12)
uop_83 = relay.rsqrt(bop_80.astype('float64')) # shape=(12, 6, 12)
const_85 = relay.const([[[-1.311027,3.693952,7.937897,6.589119,1.153767,0.865298,-8.514264,4.951508,1.811784,1.106570,-2.869374,-3.685164],[-0.504119,2.200866,1.906932,-8.620360,9.407123,-2.168933,-9.346597,-1.368732,-2.010824,-4.272933,-0.880757,4.676326],[-7.143753,-2.489719,-3.331447,3.195272,8.448707,0.636260,5.327948,8.039667,2.847032,4.186240,6.128431,6.804533],[1.239443,-1.050285,1.653363,7.629404,-9.196128,-2.317592,4.809131,1.153440,9.140356,7.467878,6.982809,8.951638],[-2.392290,-3.490538,-1.086941,-9.428064,-1.160240,6.379198,-6.949341,8.038501,-1.249445,-4.316785,1.555423,-2.785872],[-1.390471,1.865644,-8.982609,8.062117,-8.670325,4.898242,1.962300,-8.582336,-4.710733,-4.904469,9.913409,-3.147731]],[[0.234790,2.494174,-2.894529,1.679998,8.960269,-1.455913,5.527896,-3.645039,-3.005166,-4.118649,5.288301,6.988217],[-2.538108,0.494039,9.501828,4.807536,-9.096895,2.157491,2.321365,4.567191,2.964702,-8.693518,3.497909,-3.268258],[-4.466751,-5.177895,-8.602347,-7.772035,8.037229,-7.443529,3.728559,2.217217,-4.394691,-7.591915,-4.723234,-2.574205],[-5.318201,-1.678473,7.711191,1.974118,-2.275374,-0.657637,2.109887,9.376151,-9.679723,7.779060,-7.895194,2.207743],[1.176697,-0.951349,4.868005,6.986432,8.507640,-8.554066,7.555709,1.029081,8.456097,-9.296557,-7.425020,4.409175],[2.042394,-4.881118,5.742681,-4.278436,9.684282,-2.056778,0.420251,-8.199554,-9.447394,9.485723,-3.683146,0.833945]],[[-1.949640,-5.195870,5.854659,0.185271,-4.166794,-9.296134,2.615946,-9.441258,9.836614,-2.201976,9.575805,-5.777086],[3.934330,5.276621,-1.497211,3.843100,-6.916745,0.180866,2.057776,-5.882026,-4.596826,2.386000,2.214609,-1.345151],[9.419835,3.464117,-1.647627,-5.789477,9.588922,9.800843,-9.193867,0.809481,2.516549,-9.185194,9.936489,-8.319005],[-9.871138,-4.134832,-7.436300,-0.787414,4.204900,-8.413375,0.951522,6.702440,-7.560361,-6.092999,1.678495,7.469194],[-5.709497,1.766635,-9.518519,2.622304,9.331226,-5.566704,9.668731,2.531459,-7.560572,-4.510989,-6.287232,-8.361720],[-3.762442,4.858774,-3.743754,-1.112275,6.031421,0.054798,-7.500994,-3.658508,-7.744252,6.375595,0.462023,-9.126648]],[[-0.616597,-7.204306,-3.657868,5.660799,8.508246,-7.009576,1.985381,2.566493,-5.866596,-3.276198,9.296854,-6.362076],[1.205418,2.387271,0.841475,-2.470021,-6.855863,-4.600082,3.574767,-7.215058,7.671899,4.220664,0.043073,1.612831],[1.381431,-8.293339,-2.731191,-8.818856,-3.141613,-1.665173,9.216921,0.308787,9.886190,-7.965011,3.532002,-3.362485],[9.899180,3.950218,-2.894641,-3.005726,-5.157907,-5.202999,5.382831,-4.960268,9.500084,9.939141,3.083800,-8.706593],[0.488682,-2.216796,4.528851,7.727447,-4.512173,-6.453221,5.554824,-8.487619,4.046916,-5.127645,1.928233,6.670899],[3.235266,2.042928,1.827726,-6.754076,-0.594413,-0.284390,3.323266,-3.061744,-6.023043,-7.612468,6.736940,-9.066771]],[[1.076336,9.171444,7.135948,7.567715,-7.097299,-4.971852,3.073676,-2.590477,8.043408,7.288975,-0.238634,-2.540983],[-7.868864,-0.526790,6.382184,8.255518,2.051471,1.488490,9.437255,2.777204,1.867316,6.708995,-8.792929,-3.110158],[-1.038286,-3.431835,6.658129,-1.688721,5.740884,6.763865,3.761579,-4.412082,5.760584,7.711109,-4.441796,-9.860244],[-0.859377,-6.406713,2.008121,-2.909965,7.586292,-2.306715,3.357100,-7.813855,5.446529,2.330591,-1.643723,9.731689],[8.745717,-9.419586,-0.364546,5.477051,8.004403,9.704430,-4.911007,-4.231326,5.452456,-6.985192,5.389952,9.423661],[-2.996664,4.136375,-0.958205,6.462642,-6.991105,-6.288287,-1.635042,3.223788,0.718105,9.945938,4.465674,0.429417]],[[-5.664399,1.276726,8.466785,1.894222,-0.205092,-3.583673,1.671448,-5.407925,-1.156096,-3.275883,3.679161,-2.747964],[1.950343,-9.049142,8.858858,8.934622,-8.041537,-9.373012,9.014793,0.437588,-8.737711,7.150496,2.362151,7.617526],[-1.041718,9.482807,-1.517387,-3.538026,9.762837,-2.240599,0.031043,-3.083008,-3.984621,2.689658,-4.393764,2.966617],[-8.821333,5.133828,5.579472,6.806542,-6.738132,8.723839,-2.529684,-0.982240,-4.904766,1.092099,-1.109473,7.710758],[-5.402085,6.833648,-1.742116,2.317135,7.250344,-9.090188,-7.489621,-0.173410,-2.459114,6.411830,5.428277,-4.561727],[-6.697767,4.602549,-6.656453,9.978622,7.867208,3.700694,-2.819973,3.186911,4.172124,-7.722330,6.236743,8.992966]],[[-8.708647,4.066819,-7.097122,9.735097,9.983218,-7.049506,-9.878324,-1.722778,-5.416437,0.235693,-4.261973,-4.854842],[-8.176836,2.451828,9.377712,-0.149839,9.816590,8.483385,5.605023,-8.689647,-8.132334,-2.670878,8.859373,-8.963476],[6.531257,-5.220293,-1.877109,6.104031,0.790124,5.069273,6.130689,-3.111220,3.945045,1.993013,-3.019330,2.995562],[-4.569971,2.349634,-4.142476,3.950438,4.244032,5.649278,-8.827724,1.877156,-2.459925,-4.113007,-9.689023,-9.816689],[-4.437551,-6.321426,-7.817921,8.608712,-0.453960,-8.916847,2.718419,-3.757594,1.332354,-7.092442,-8.898664,5.416947],[-1.940917,4.110378,-6.573078,-7.099580,2.974747,4.341026,-5.821278,-1.970860,-5.897378,2.163210,-0.312004,-1.608676]],[[-5.375535,9.093684,-6.580572,3.029939,-5.396368,0.121356,-1.259269,2.296667,8.642175,8.690812,-0.137825,-2.941922],[-8.113825,-5.581533,3.015115,-7.439299,8.765180,-8.741102,-0.925025,6.080058,-8.152690,2.896385,-9.131509,-1.693791],[-0.204765,-9.415676,0.416671,3.705892,-2.819440,-1.609240,-7.240220,2.502335,-6.982638,-7.670218,4.618263,7.277115],[-0.362085,1.172544,-8.082559,-6.358335,7.845148,5.163671,8.816770,6.873000,-3.133943,1.798838,-0.471112,-3.560345],[3.118798,-5.428800,-2.650734,-3.515787,-6.711630,-9.438798,-2.849150,4.665075,8.738160,-6.601393,4.683209,-2.673763],[-6.063779,0.932483,1.293068,4.276201,-0.271093,0.123969,-9.036417,1.317061,5.992368,5.187634,3.073142,-3.437470]],[[9.201035,6.268900,-9.439592,-8.944705,-0.362838,6.556882,3.365652,-4.861945,-6.118912,8.971471,0.941392,-9.011384],[-3.932647,-6.441653,-7.208475,-7.702729,-2.621753,5.271545,5.048834,2.251423,8.189185,8.804865,4.717277,-9.932114],[-3.851659,-9.702901,-2.586497,-6.272623,-9.753667,-1.623725,2.083934,-3.536720,5.942506,-9.012178,6.579382,-9.694840],[9.306984,-5.371966,1.670070,-2.593822,-1.926399,0.168510,0.333425,4.314127,7.849773,3.138424,-7.250694,-2.218187],[9.965142,-0.281481,-2.325188,0.302714,5.335252,-1.767083,-3.250451,-5.937510,-5.273313,4.166945,3.752418,3.409270],[7.073899,-3.849663,4.255595,1.339951,5.663700,3.113158,-5.635824,2.535160,-1.264982,-4.936978,3.996556,3.341323]],[[-4.214342,1.623956,0.713442,-4.523967,7.906859,-6.693208,7.288651,9.439027,-8.225568,-4.969314,7.310998,-8.009572],[-6.997260,-5.147276,5.005627,2.913103,8.736955,5.212150,0.693091,2.429960,-4.076698,0.122069,5.347083,6.751283],[-1.029996,-8.798904,7.927616,1.900070,2.742931,1.404760,-0.039461,-1.512300,-3.500504,-4.048943,-6.199691,-0.553981],[-8.021074,-5.294787,8.404696,4.130625,-1.769869,9.847697,-1.688664,7.448108,1.396322,-7.356623,4.444261,9.821151],[-4.474228,6.991510,7.900628,-5.686064,-6.329450,1.053136,-5.609023,9.749849,-1.432656,-4.497066,2.419399,-5.318906],[0.873276,-3.664767,5.909327,-5.058313,-6.531594,-4.676631,5.026804,4.669914,-0.509456,7.714929,7.879014,0.641384]],[[-1.942241,-4.255564,8.926942,-9.078700,2.984288,7.530184,-3.970046,-1.170529,1.985264,-5.253636,4.724141,-3.150196],[-7.697265,-8.165830,-9.919389,0.199838,-7.622087,8.067851,-6.248245,-0.058568,-6.130031,-2.875317,0.567796,5.792057],[-5.690580,7.818529,5.219727,9.419854,-2.983463,6.799337,1.566885,3.500017,-8.486245,0.774186,-4.192226,-6.535027],[4.796579,8.803846,-3.210865,5.592380,-1.770508,-4.522717,8.455115,2.411833,-9.835079,-3.223200,3.637025,3.826868],[-0.555001,-4.285069,-9.162934,-2.436247,2.273028,-4.154881,-5.235124,-6.888923,-5.093540,4.878997,-6.083646,7.596443],[5.525775,-1.579058,5.352944,0.770956,-0.745911,-4.725074,-0.502247,-5.721599,-6.521216,5.675875,1.932268,5.177715]],[[3.466384,5.938827,2.298147,-1.116945,-0.827074,8.131220,-2.590897,-4.222737,-4.494999,9.191831,2.855076,6.267049],[-1.675029,-2.389955,-1.143017,8.440095,-9.581697,-9.805644,-7.726622,2.926777,1.680361,-9.302649,8.978529,2.126900],[-1.771767,-2.270707,-0.333212,9.571755,6.913404,-2.375517,-1.662150,4.740637,-6.468329,-8.507298,-0.931700,-4.502778],[0.983102,0.890965,7.971860,-7.965144,9.631182,6.872998,-4.798195,-8.866306,-9.598175,-9.854021,-6.663632,-3.231140],[4.673197,2.137834,-3.699833,7.277069,5.666030,-0.003142,4.217923,-8.004180,3.411049,0.305239,-7.437504,8.481565],[-3.902809,3.488291,0.716573,-3.091228,8.860504,-8.510073,6.879954,4.047462,-1.975587,5.516157,-1.600061,-8.224580]]], dtype = "float64")#candidate|85|(12, 6, 12)|const|float64
bop_86 = relay.mod(bop_80.astype('float32'), relay.reshape(const_85.astype('float32'), relay.shape_of(bop_80))) # shape=(12, 6, 12)
bop_89 = relay.right_shift(bop_80.astype('int64'), relay.reshape(const_85.astype('int64'), relay.shape_of(bop_80))) # shape=(12, 6, 12)
bop_92 = relay.maximum(uop_83.astype('uint16'), relay.reshape(uop_78.astype('uint16'), relay.shape_of(uop_83))) # shape=(12, 6, 12)
bop_95 = relay.power(uop_83.astype('float32'), relay.reshape(uop_78.astype('float32'), relay.shape_of(uop_83))) # shape=(12, 6, 12)
bop_98 = relay.bitwise_xor(bop_92.astype('uint32'), relay.reshape(uop_54.astype('uint32'), relay.shape_of(bop_92))) # shape=(12, 6, 12)
bop_101 = relay.less(bop_98.astype('bool'), relay.reshape(uop_64.astype('bool'), relay.shape_of(bop_98))) # shape=(12, 6, 12)
uop_104 = relay.log(bop_95.astype('float32')) # shape=(12, 6, 12)
bop_106 = relay.divide(uop_104.astype('float64'), relay.reshape(bop_98.astype('float64'), relay.shape_of(uop_104))) # shape=(12, 6, 12)
bop_109 = relay.bitwise_and(bop_98.astype('uint16'), relay.reshape(bop_92.astype('uint16'), relay.shape_of(bop_98))) # shape=(12, 6, 12)
bop_112 = relay.logical_or(bop_106.astype('bool'), relay.reshape(uop_78.astype('bool'), relay.shape_of(bop_106))) # shape=(12, 6, 12)
bop_115 = relay.right_shift(bop_112.astype('int64'), relay.reshape(uop_62.astype('int64'), relay.shape_of(bop_112))) # shape=(12, 6, 12)
uop_118 = relay.atan(uop_104.astype('float64')) # shape=(12, 6, 12)
uop_120 = relay.asin(uop_118.astype('float64')) # shape=(12, 6, 12)
uop_122 = relay.asinh(uop_104.astype('float64')) # shape=(12, 6, 12)
var_124 = relay.var("var_124", dtype = "float64", shape = (12, 6, 12))#candidate|124|(12, 6, 12)|var|float64
bop_125 = relay.logical_or(uop_118.astype('bool'), relay.reshape(var_124.astype('bool'), relay.shape_of(uop_118))) # shape=(12, 6, 12)
uop_128 = relay.erf(uop_120.astype('float32')) # shape=(12, 6, 12)
bop_130 = relay.mod(uop_128.astype('float64'), relay.reshape(bop_56.astype('float64'), relay.shape_of(uop_128))) # shape=(12, 6, 12)
uop_133 = relay.acos(bop_130.astype('float32')) # shape=(12, 6, 12)
var_135 = relay.var("var_135", dtype = "float32", shape = (12, 6, 12))#candidate|135|(12, 6, 12)|var|float32
bop_136 = relay.less(uop_133.astype('bool'), relay.reshape(var_135.astype('bool'), relay.shape_of(uop_133))) # shape=(12, 6, 12)
bop_139 = relay.bitwise_and(uop_128.astype('uint32'), relay.reshape(bop_89.astype('uint32'), relay.shape_of(uop_128))) # shape=(12, 6, 12)
uop_142 = relay.acosh(uop_133.astype('float32')) # shape=(12, 6, 12)
var_144 = relay.var("var_144", dtype = "bool", shape = (12, 6, 12))#candidate|144|(12, 6, 12)|var|bool
bop_145 = relay.logical_or(bop_136.astype('bool'), relay.reshape(var_144.astype('bool'), relay.shape_of(bop_136))) # shape=(12, 6, 12)
output = relay.Tuple([bop_71,uop_74,bop_86,bop_101,bop_109,bop_115,uop_122,bop_125,bop_139,uop_142,bop_145,])
output2 = relay.Tuple([bop_71,uop_74,bop_86,bop_101,bop_109,bop_115,uop_122,bop_125,bop_139,uop_142,bop_145,])
func_148 = relay.Function([var_124,var_135,var_144,], output)
mod['func_148'] = func_148
mod = relay.transform.InferType()(mod)
var_149 = relay.var("var_149", dtype = "float64", shape = (12, 6, 12))#candidate|149|(12, 6, 12)|var|float64
var_150 = relay.var("var_150", dtype = "float32", shape = (12, 6, 12))#candidate|150|(12, 6, 12)|var|float32
var_151 = relay.var("var_151", dtype = "bool", shape = (12, 6, 12))#candidate|151|(12, 6, 12)|var|bool
output = func_148(var_149,var_150,var_151,)
func_152 = relay.Function([var_149,var_150,var_151,], output)
mutated_mod['func_152'] = func_152
mutated_mod = relay.transform.InferType()(mutated_mod)
const_154 = relay.const(1.050061, dtype = "float64")#candidate|154|()|const|float64
uop_155 = relay.log2(const_154.astype('float64')) # shape=()
uop_157 = relay.log2(uop_155.astype('float64')) # shape=()
uop_159 = relay.sinh(uop_155.astype('float32')) # shape=()
bop_161 = relay.less_equal(uop_155.astype('bool'), uop_157.astype('bool')) # shape=()
bop_164 = relay.logical_and(uop_155.astype('bool'), uop_157.astype('bool')) # shape=()
uop_167 = relay.atan(uop_157.astype('float64')) # shape=()
bop_169 = relay.multiply(uop_157.astype('int32'), bop_161.astype('int32')) # shape=()
uop_172 = relay.acos(uop_167.astype('float32')) # shape=()
uop_174 = relay.sin(uop_172.astype('float64')) # shape=()
bop_176 = relay.power(uop_174.astype('float32'), bop_164.astype('float32')) # shape=()
bop_179 = relay.power(uop_157.astype('float64'), uop_172.astype('float64')) # shape=()
uop_182 = relay.rsqrt(bop_176.astype('float32')) # shape=()
uop_184 = relay.sinh(uop_182.astype('float32')) # shape=()
bop_186 = relay.logical_xor(uop_184.astype('uint64'), bop_164.astype('uint64')) # shape=()
bop_189 = relay.minimum(uop_182.astype('uint8'), bop_164.astype('uint8')) # shape=()
var_192 = relay.var("var_192", dtype = "float32", shape = ())#candidate|192|()|var|float32
bop_193 = relay.multiply(uop_184.astype('uint16'), var_192.astype('uint16')) # shape=()
uop_196 = relay.erf(bop_193.astype('float32')) # shape=()
uop_198 = relay.sigmoid(bop_179.astype('float64')) # shape=()
bop_200 = relay.greater(uop_196.astype('bool'), bop_164.astype('bool')) # shape=()
uop_203 = relay.sigmoid(uop_184.astype('float64')) # shape=()
uop_205 = relay.erf(uop_203.astype('float32')) # shape=()
bop_207 = relay.subtract(bop_186.astype('uint8'), uop_184.astype('uint8')) # shape=()
uop_210 = relay.rsqrt(uop_174.astype('float32')) # shape=()
bop_212 = relay.logical_or(uop_205.astype('bool'), bop_189.astype('bool')) # shape=()
func_46_call = mod.get_global_var('func_46')
func_51_call = mutated_mod.get_global_var('func_51')
var_216 = relay.var("var_216", dtype = "uint64", shape = (768,))#candidate|216|(768,)|var|uint64
call_215 = relay.TupleGetItem(func_46_call(relay.reshape(var_216.astype('uint64'), [8, 16, 6]), relay.reshape(var_216.astype('uint64'), [8, 16, 6]), relay.reshape(var_216.astype('uint64'), [8, 16, 6]), ), 1)
call_217 = relay.TupleGetItem(func_51_call(relay.reshape(var_216.astype('uint64'), [8, 16, 6]), relay.reshape(var_216.astype('uint64'), [8, 16, 6]), relay.reshape(var_216.astype('uint64'), [8, 16, 6]), ), 1)
bop_218 = relay.greater(uop_205.astype('bool'), uop_196.astype('bool')) # shape=()
bop_221 = relay.logical_xor(bop_218.astype('int16'), bop_179.astype('int16')) # shape=()
const_224 = relay.const(-6, dtype = "int16")#candidate|224|()|const|int16
bop_225 = relay.power(bop_221.astype('float64'), const_224.astype('float64')) # shape=()
var_228 = relay.var("var_228", dtype = "float32", shape = (4, 3))#candidate|228|(4, 3)|var|float32
bop_229 = relay.left_shift(uop_205.astype('int64'), var_228.astype('int64')) # shape=(4, 3)
bop_232 = relay.floor_mod(uop_174.astype('float64'), uop_172.astype('float64')) # shape=()
uop_235 = relay.sinh(bop_200.astype('float32')) # shape=()
bop_237 = relay.bitwise_and(bop_218.astype('int8'), uop_235.astype('int8')) # shape=()
uop_240 = relay.sin(bop_193.astype('float32')) # shape=()
bop_242 = relay.left_shift(bop_225.astype('uint8'), const_154.astype('uint8')) # shape=()
var_245 = relay.var("var_245", dtype = "int64", shape = (4, 3))#candidate|245|(4, 3)|var|int64
bop_246 = relay.less_equal(bop_229.astype('bool'), relay.reshape(var_245.astype('bool'), relay.shape_of(bop_229))) # shape=(4, 3)
bop_249 = relay.logical_and(uop_184.astype('bool'), uop_182.astype('bool')) # shape=()
uop_252 = relay.log(bop_200.astype('float64')) # shape=()
uop_254 = relay.log2(bop_229.astype('float64')) # shape=(4, 3)
const_256 = relay.const([[5.050280,-6.050786,-7.764359],[0.144178,-7.773214,-7.442253],[5.037774,-3.922745,-4.344440],[1.607649,8.691856,-1.781869]], dtype = "float64")#candidate|256|(4, 3)|const|float64
bop_257 = relay.bitwise_xor(uop_254.astype('int64'), relay.reshape(const_256.astype('int64'), relay.shape_of(uop_254))) # shape=(4, 3)
uop_260 = relay.acosh(bop_242.astype('float64')) # shape=()
bop_262 = relay.not_equal(uop_205.astype('bool'), bop_164.astype('bool')) # shape=()
bop_265 = relay.greater_equal(uop_254.astype('bool'), uop_184.astype('bool')) # shape=(4, 3)
uop_268 = relay.erf(bop_257.astype('float64')) # shape=(4, 3)
uop_270 = relay.sin(uop_254.astype('float64')) # shape=(4, 3)
var_272 = relay.var("var_272", dtype = "float64", shape = (4, 3))#candidate|272|(4, 3)|var|float64
bop_273 = relay.right_shift(uop_268.astype('int8'), relay.reshape(var_272.astype('int8'), relay.shape_of(uop_268))) # shape=(4, 3)
bop_276 = relay.maximum(uop_205.astype('int32'), uop_172.astype('int32')) # shape=()
uop_279 = relay.acos(uop_268.astype('float32')) # shape=(4, 3)
uop_281 = relay.sinh(uop_254.astype('float32')) # shape=(4, 3)
bop_283 = relay.divide(bop_273.astype('float32'), bop_212.astype('float32')) # shape=(4, 3)
bop_286 = relay.maximum(uop_279.astype('uint32'), relay.reshape(bop_273.astype('uint32'), relay.shape_of(uop_279))) # shape=(4, 3)
uop_289 = relay.tan(bop_276.astype('float32')) # shape=()
const_291 = relay.const([[8,6,8],[2,6,4],[1,-8,-3],[5,2,9]], dtype = "uint32")#candidate|291|(4, 3)|const|uint32
bop_292 = relay.less_equal(bop_286.astype('bool'), relay.reshape(const_291.astype('bool'), relay.shape_of(bop_286))) # shape=(4, 3)
var_295 = relay.var("var_295", dtype = "float64", shape = (4, 3))#candidate|295|(4, 3)|var|float64
bop_296 = relay.right_shift(uop_254.astype('uint16'), relay.reshape(var_295.astype('uint16'), relay.shape_of(uop_254))) # shape=(4, 3)
output = relay.Tuple([uop_159,bop_169,uop_198,bop_207,uop_210,call_215,var_216,bop_232,bop_237,uop_240,bop_246,bop_249,uop_252,uop_260,bop_262,bop_265,uop_270,uop_281,bop_283,uop_289,bop_292,bop_296,])
output2 = relay.Tuple([uop_159,bop_169,uop_198,bop_207,uop_210,call_217,var_216,bop_232,bop_237,uop_240,bop_246,bop_249,uop_252,uop_260,bop_262,bop_265,uop_270,uop_281,bop_283,uop_289,bop_292,bop_296,])
F = relay.Function([var_192,var_216,var_228,var_245,var_272,var_295,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_192,var_216,var_228,var_245,var_272,var_295,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_192= np.array(2.289089, dtype='float32')
module1.set_input('var_192', input_192)
input_216= np.array([3,1,1,-5,5,-3,-9,-1,7,2,-4,1,4,9,-5,-5,-8,-2,-10,-8,-6,1,-3,2,10,1,7,-4,-5,-6,-3,-9,-9,-4,7,4,-4,-1,-9,8,8,-5,-1,-9,-2,-7,8,-8,4,-6,5,-4,-6,5,-1,9,2,8,3,-10,-2,9,-10,7,-10,-4,-4,3,7,-9,3,-8,2,-8,3,9,2,5,7,-5,6,4,-2,-4,-9,5,-9,-6,-1,5,2,-9,-1,6,8,-9,-3,-6,1,3,-3,1,3,4,-2,2,-2,-8,-7,3,8,-2,4,-5,10,-5,8,6,3,-7,-8,9,-10,-4,-1,-4,10,9,8,1,4,2,1,-3,-7,-9,9,-6,5,8,9,-5,10,5,8,5,-9,1,-4,-6,5,7,-5,5,-4,-8,-6,4,-6,3,2,-5,-4,2,-1,8,-4,-1,9,1,-8,-8,1,-8,10,9,9,2,-2,-1,5,-10,4,9,5,9,-8,-8,9,-4,-9,-1,-8,-2,-9,3,2,-2,5,2,-1,3,-7,8,9,5,6,-6,10,5,3,-5,3,3,-9,8,-7,-9,2,-10,-9,8,-2,-10,-6,-4,-4,6,-6,-3,-6,-7,2,7,3,-6,4,-8,10,-1,-2,7,-3,3,-2,4,-9,-2,7,4,9,-2,6,1,9,-4,6,7,4,9,-8,7,4,-8,-1,10,-4,4,4,6,9,4,-3,7,3,-7,-8,8,-4,-2,-9,-6,7,-3,-7,-6,-2,4,-3,5,6,9,-4,8,3,4,4,-5,10,-6,8,5,-2,3,9,-3,10,1,-9,4,10,-4,-8,7,-6,6,7,-1,-10,6,6,4,-1,2,3,2,5,-10,-4,2,-2,-5,10,7,4,-1,3,6,2,6,3,-9,-5,-3,5,-10,-6,3,-10,-7,-4,-3,-4,2,7,1,7,10,10,2,1,-2,6,-4,-8,1,9,-8,4,-1,10,-1,-2,1,-4,-7,7,-3,-7,-1,8,-6,7,4,-5,-4,-4,4,-8,10,-9,9,6,-9,9,-7,-4,-7,-6,4,-3,6,3,-7,-6,3,4,9,3,5,10,10,5,-4,-6,4,-9,9,2,-3,3,-4,-9,10,-3,-6,7,6,1,6,-10,-7,3,-1,3,3,-1,6,-2,-3,-9,7,-3,9,4,-1,6,-1,5,-5,-5,6,-7,-7,-7,3,9,4,-4,-8,-2,1,7,8,4,-4,-4,-7,3,10,-4,9,-5,-9,-8,7,6,-8,10,6,-1,-4,-1,4,5,-5,8,-6,9,-2,-10,8,7,-8,-4,-2,5,8,9,1,7,-4,-1,10,4,6,-10,-10,10,3,-4,-9,-3,8,-10,-5,-6,3,-7,-7,4,-7,-8,9,-8,-4,-7,3,9,-1,10,-7,3,2,-3,-5,4,1,-2,2,5,2,8,-4,-7,-7,1,1,-5,5,4,7,3,-10,10,-5,-7,-9,-4,-3,7,6,-5,1,-2,8,-10,5,-2,-10,-6,-7,4,7,8,7,-1,3,-1,-4,3,-10,8,8,-2,-4,3,-1,-7,5,10,3,6,-7,-2,-2,4,10,9,2,6,2,-7,-8,-3,4,-4,5,2,-9,-3,-1,-4,1,-9,-7,-8,4,-9,-4,5,6,-4,1,2,-10,10,-6,-2,-10,-9,-4,3,6,2,6,5,-7,4,-5,-10,3,-6,-6,5,9,-10,-3,-3,-7,-9,2,-7,-5,9,-5,-6,-10,-7,-3,2,-6,-5,7,10,-4,-9,4,-5,4,10,-6,-8,-1,5,-7,5,9,-4,7,2,-2,-8,-4,-9,1,-8,8,-3,2,2,-5,5,-7,2,-3,-7,-5,3,-10,-8,2,7,-5,-8,8,-8,-8,-7,-2,-1,3,-1,-3,-8,7,-5,5,10,4,-6,-1,-5,5,-4,-1,1,-2,-2,9,1,9,6,8,3,5,4,2,-4,9,4,-2,-4,9,1,-8,-3,-8,1,6,-8,3,-6,-9,-2,10,-10,4,7,10,3,-2,-6,-7,6,1,4,-4], dtype='uint64')
module1.set_input('var_216', input_216)
input_228= np.array([[5.542744,-4.400304,7.951444],[-4.747826,4.061507,-4.269268],[-7.276400,9.713044,7.489706],[4.897461,6.446179,8.626180]], dtype='float32')
module1.set_input('var_228', input_228)
input_245= np.array([[-7,-2,6],[-9,4,-9],[9,2,6],[-4,-3,9]], dtype='int64')
module1.set_input('var_245', input_245)
input_272= np.array([[4.249382,-8.198982,0.179728],[-3.218295,-6.755434,-3.282715],[-6.549889,7.266673,5.857759],[9.229280,-4.946733,8.433128]], dtype='float64')
module1.set_input('var_272', input_272)
input_295= np.array([[-5.804810,-2.420932,-5.595835],[0.138222,-5.039352,-0.734774],[-0.314561,2.238366,2.077028],[-8.160175,8.629719,-8.657595]], dtype='float64')
module1.set_input('var_295', input_295)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_192, input_216, input_228, input_245, input_272, input_295, )
res3 = intrp3.evaluate()(input_192, input_216, input_228, input_245, input_272, input_295, )
res4 = intrp4.evaluate()(input_192, input_216, input_228, input_245, input_272, input_295, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
res1_14 = module1.get_output(14).asnumpy()
res2_14 = res2[14].asnumpy()
res3_14 = res3[14].asnumpy()
res4_14 = res4[14].asnumpy()
np.testing.assert_allclose(res1_14 ,res2_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res3_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res4_14, atol=1e-3, rtol=1e-3)
(res1_14 == res2_14).all()
(res1_14 == res3_14).all()
(res1_14 == res4_14).all()
res1_15 = module1.get_output(15).asnumpy()
res2_15 = res2[15].asnumpy()
res3_15 = res3[15].asnumpy()
res4_15 = res4[15].asnumpy()
np.testing.assert_allclose(res1_15 ,res2_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res3_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res4_15, atol=1e-3, rtol=1e-3)
(res1_15 == res2_15).all()
(res1_15 == res3_15).all()
(res1_15 == res4_15).all()
res1_16 = module1.get_output(16).asnumpy()
res2_16 = res2[16].asnumpy()
res3_16 = res3[16].asnumpy()
res4_16 = res4[16].asnumpy()
np.testing.assert_allclose(res1_16 ,res2_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res3_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res4_16, atol=1e-3, rtol=1e-3)
(res1_16 == res2_16).all()
(res1_16 == res3_16).all()
(res1_16 == res4_16).all()
res1_17 = module1.get_output(17).asnumpy()
res2_17 = res2[17].asnumpy()
res3_17 = res3[17].asnumpy()
res4_17 = res4[17].asnumpy()
np.testing.assert_allclose(res1_17 ,res2_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res3_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res4_17, atol=1e-3, rtol=1e-3)
(res1_17 == res2_17).all()
(res1_17 == res3_17).all()
(res1_17 == res4_17).all()
res1_18 = module1.get_output(18).asnumpy()
res2_18 = res2[18].asnumpy()
res3_18 = res3[18].asnumpy()
res4_18 = res4[18].asnumpy()
np.testing.assert_allclose(res1_18 ,res2_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res3_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res4_18, atol=1e-3, rtol=1e-3)
(res1_18 == res2_18).all()
(res1_18 == res3_18).all()
(res1_18 == res4_18).all()
res1_19 = module1.get_output(19).asnumpy()
res2_19 = res2[19].asnumpy()
res3_19 = res3[19].asnumpy()
res4_19 = res4[19].asnumpy()
np.testing.assert_allclose(res1_19 ,res2_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_19 ,res3_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_19 ,res4_19, atol=1e-3, rtol=1e-3)
(res1_19 == res2_19).all()
(res1_19 == res3_19).all()
(res1_19 == res4_19).all()
res1_20 = module1.get_output(20).asnumpy()
res2_20 = res2[20].asnumpy()
res3_20 = res3[20].asnumpy()
res4_20 = res4[20].asnumpy()
np.testing.assert_allclose(res1_20 ,res2_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_20 ,res3_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_20 ,res4_20, atol=1e-3, rtol=1e-3)
(res1_20 == res2_20).all()
(res1_20 == res3_20).all()
(res1_20 == res4_20).all()
res1_21 = module1.get_output(21).asnumpy()
res2_21 = res2[21].asnumpy()
res3_21 = res3[21].asnumpy()
res4_21 = res4[21].asnumpy()
np.testing.assert_allclose(res1_21 ,res2_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_21 ,res3_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_21 ,res4_21, atol=1e-3, rtol=1e-3)
(res1_21 == res2_21).all()
(res1_21 == res3_21).all()
(res1_21 == res4_21).all()
module5.set_input('var_192', input_192)
module5.set_input('var_216', input_216)
module5.set_input('var_228', input_228)
module5.set_input('var_245', input_245)
module5.set_input('var_272', input_272)
module5.set_input('var_295', input_295)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_192, input_216, input_228, input_245, input_272, input_295, )
res7 = intrp7.evaluate()(input_192, input_216, input_228, input_245, input_272, input_295, )
res8 = intrp8.evaluate()(input_192, input_216, input_228, input_245, input_272, input_295, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
res5_14 = module5.get_output(14).asnumpy()
res6_14 = res6[14].asnumpy()
res7_14 = res7[14].asnumpy()
res8_14 = res8[14].asnumpy()
np.testing.assert_allclose(res5_14 ,res6_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res7_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res8_14, atol=1e-3, rtol=1e-3)
(res5_14 == res6_14).all()
(res5_14 == res7_14).all()
(res5_14 == res8_14).all()
res5_15 = module5.get_output(15).asnumpy()
res6_15 = res6[15].asnumpy()
res7_15 = res7[15].asnumpy()
res8_15 = res8[15].asnumpy()
np.testing.assert_allclose(res5_15 ,res6_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res7_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res8_15, atol=1e-3, rtol=1e-3)
(res5_15 == res6_15).all()
(res5_15 == res7_15).all()
(res5_15 == res8_15).all()
res5_16 = module5.get_output(16).asnumpy()
res6_16 = res6[16].asnumpy()
res7_16 = res7[16].asnumpy()
res8_16 = res8[16].asnumpy()
np.testing.assert_allclose(res5_16 ,res6_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res7_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res8_16, atol=1e-3, rtol=1e-3)
(res5_16 == res6_16).all()
(res5_16 == res7_16).all()
(res5_16 == res8_16).all()
res5_17 = module5.get_output(17).asnumpy()
res6_17 = res6[17].asnumpy()
res7_17 = res7[17].asnumpy()
res8_17 = res8[17].asnumpy()
np.testing.assert_allclose(res5_17 ,res6_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res7_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res8_17, atol=1e-3, rtol=1e-3)
(res5_17 == res6_17).all()
(res5_17 == res7_17).all()
(res5_17 == res8_17).all()
res5_18 = module5.get_output(18).asnumpy()
res6_18 = res6[18].asnumpy()
res7_18 = res7[18].asnumpy()
res8_18 = res8[18].asnumpy()
np.testing.assert_allclose(res5_18 ,res6_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res7_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res8_18, atol=1e-3, rtol=1e-3)
(res5_18 == res6_18).all()
(res5_18 == res7_18).all()
(res5_18 == res8_18).all()
res5_19 = module5.get_output(19).asnumpy()
res6_19 = res6[19].asnumpy()
res7_19 = res7[19].asnumpy()
res8_19 = res8[19].asnumpy()
np.testing.assert_allclose(res5_19 ,res6_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_19 ,res7_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_19 ,res8_19, atol=1e-3, rtol=1e-3)
(res5_19 == res6_19).all()
(res5_19 == res7_19).all()
(res5_19 == res8_19).all()
res5_20 = module5.get_output(20).asnumpy()
res6_20 = res6[20].asnumpy()
res7_20 = res7[20].asnumpy()
res8_20 = res8[20].asnumpy()
np.testing.assert_allclose(res5_20 ,res6_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_20 ,res7_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_20 ,res8_20, atol=1e-3, rtol=1e-3)
(res5_20 == res6_20).all()
(res5_20 == res7_20).all()
(res5_20 == res8_20).all()
res5_21 = module5.get_output(21).asnumpy()
res6_21 = res6[21].asnumpy()
res7_21 = res7[21].asnumpy()
res8_21 = res8[21].asnumpy()
np.testing.assert_allclose(res5_21 ,res6_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_21 ,res7_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_21 ,res8_21, atol=1e-3, rtol=1e-3)
(res5_21 == res6_21).all()
(res5_21 == res7_21).all()
(res5_21 == res8_21).all()
module9.set_input('var_192', input_192)
module9.set_input('var_216', input_216)
module9.set_input('var_228', input_228)
module9.set_input('var_245', input_245)
module9.set_input('var_272', input_272)
module9.set_input('var_295', input_295)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_192, input_216, input_228, input_245, input_272, input_295, )
res11 = intrp11.evaluate()(input_192, input_216, input_228, input_245, input_272, input_295, )
res12 = intrp12.evaluate()(input_192, input_216, input_228, input_245, input_272, input_295, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
res9_14 = module9.get_output(14).asnumpy()
res10_14 = res10[14].asnumpy()
res11_14 = res11[14].asnumpy()
res12_14 = res12[14].asnumpy()
np.testing.assert_allclose(res9_14 ,res10_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res11_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res12_14, atol=1e-3, rtol=1e-3)
(res9_14 == res10_14).all()
(res9_14 == res11_14).all()
(res9_14 == res12_14).all()
res9_15 = module9.get_output(15).asnumpy()
res10_15 = res10[15].asnumpy()
res11_15 = res11[15].asnumpy()
res12_15 = res12[15].asnumpy()
np.testing.assert_allclose(res9_15 ,res10_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res11_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res12_15, atol=1e-3, rtol=1e-3)
(res9_15 == res10_15).all()
(res9_15 == res11_15).all()
(res9_15 == res12_15).all()
res9_16 = module9.get_output(16).asnumpy()
res10_16 = res10[16].asnumpy()
res11_16 = res11[16].asnumpy()
res12_16 = res12[16].asnumpy()
np.testing.assert_allclose(res9_16 ,res10_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res11_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res12_16, atol=1e-3, rtol=1e-3)
(res9_16 == res10_16).all()
(res9_16 == res11_16).all()
(res9_16 == res12_16).all()
res9_17 = module9.get_output(17).asnumpy()
res10_17 = res10[17].asnumpy()
res11_17 = res11[17].asnumpy()
res12_17 = res12[17].asnumpy()
np.testing.assert_allclose(res9_17 ,res10_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res11_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res12_17, atol=1e-3, rtol=1e-3)
(res9_17 == res10_17).all()
(res9_17 == res11_17).all()
(res9_17 == res12_17).all()
res9_18 = module9.get_output(18).asnumpy()
res10_18 = res10[18].asnumpy()
res11_18 = res11[18].asnumpy()
res12_18 = res12[18].asnumpy()
np.testing.assert_allclose(res9_18 ,res10_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res11_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res12_18, atol=1e-3, rtol=1e-3)
(res9_18 == res10_18).all()
(res9_18 == res11_18).all()
(res9_18 == res12_18).all()
res9_19 = module9.get_output(19).asnumpy()
res10_19 = res10[19].asnumpy()
res11_19 = res11[19].asnumpy()
res12_19 = res12[19].asnumpy()
np.testing.assert_allclose(res9_19 ,res10_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_19 ,res11_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_19 ,res12_19, atol=1e-3, rtol=1e-3)
(res9_19 == res10_19).all()
(res9_19 == res11_19).all()
(res9_19 == res12_19).all()
res9_20 = module9.get_output(20).asnumpy()
res10_20 = res10[20].asnumpy()
res11_20 = res11[20].asnumpy()
res12_20 = res12[20].asnumpy()
np.testing.assert_allclose(res9_20 ,res10_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_20 ,res11_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_20 ,res12_20, atol=1e-3, rtol=1e-3)
(res9_20 == res10_20).all()
(res9_20 == res11_20).all()
(res9_20 == res12_20).all()
res9_21 = module9.get_output(21).asnumpy()
res10_21 = res10[21].asnumpy()
res11_21 = res11[21].asnumpy()
res12_21 = res12[21].asnumpy()
np.testing.assert_allclose(res9_21 ,res10_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_21 ,res11_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_21 ,res12_21, atol=1e-3, rtol=1e-3)
(res9_21 == res10_21).all()
(res9_21 == res11_21).all()
(res9_21 == res12_21).all()
module13.set_input('var_192', input_192)
module13.set_input('var_216', input_216)
module13.set_input('var_228', input_228)
module13.set_input('var_245', input_245)
module13.set_input('var_272', input_272)
module13.set_input('var_295', input_295)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_192, input_216, input_228, input_245, input_272, input_295, )
res15 = intrp15.evaluate()(input_192, input_216, input_228, input_245, input_272, input_295, )
res16 = intrp16.evaluate()(input_192, input_216, input_228, input_245, input_272, input_295, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
res13_14 = module13.get_output(14).asnumpy()
res14_14 = res14[14].asnumpy()
res15_14 = res15[14].asnumpy()
res16_14 = res16[14].asnumpy()
np.testing.assert_allclose(res13_14 ,res14_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res15_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res16_14, atol=1e-3, rtol=1e-3)
(res13_14 == res14_14).all()
(res13_14 == res15_14).all()
(res13_14 == res16_14).all()
res13_15 = module13.get_output(15).asnumpy()
res14_15 = res14[15].asnumpy()
res15_15 = res15[15].asnumpy()
res16_15 = res16[15].asnumpy()
np.testing.assert_allclose(res13_15 ,res14_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res15_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res16_15, atol=1e-3, rtol=1e-3)
(res13_15 == res14_15).all()
(res13_15 == res15_15).all()
(res13_15 == res16_15).all()
res13_16 = module13.get_output(16).asnumpy()
res14_16 = res14[16].asnumpy()
res15_16 = res15[16].asnumpy()
res16_16 = res16[16].asnumpy()
np.testing.assert_allclose(res13_16 ,res14_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res15_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res16_16, atol=1e-3, rtol=1e-3)
(res13_16 == res14_16).all()
(res13_16 == res15_16).all()
(res13_16 == res16_16).all()
res13_17 = module13.get_output(17).asnumpy()
res14_17 = res14[17].asnumpy()
res15_17 = res15[17].asnumpy()
res16_17 = res16[17].asnumpy()
np.testing.assert_allclose(res13_17 ,res14_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res15_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res16_17, atol=1e-3, rtol=1e-3)
(res13_17 == res14_17).all()
(res13_17 == res15_17).all()
(res13_17 == res16_17).all()
res13_18 = module13.get_output(18).asnumpy()
res14_18 = res14[18].asnumpy()
res15_18 = res15[18].asnumpy()
res16_18 = res16[18].asnumpy()
np.testing.assert_allclose(res13_18 ,res14_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res15_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res16_18, atol=1e-3, rtol=1e-3)
(res13_18 == res14_18).all()
(res13_18 == res15_18).all()
(res13_18 == res16_18).all()
res13_19 = module13.get_output(19).asnumpy()
res14_19 = res14[19].asnumpy()
res15_19 = res15[19].asnumpy()
res16_19 = res16[19].asnumpy()
np.testing.assert_allclose(res13_19 ,res14_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_19 ,res15_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_19 ,res16_19, atol=1e-3, rtol=1e-3)
(res13_19 == res14_19).all()
(res13_19 == res15_19).all()
(res13_19 == res16_19).all()
res13_20 = module13.get_output(20).asnumpy()
res14_20 = res14[20].asnumpy()
res15_20 = res15[20].asnumpy()
res16_20 = res16[20].asnumpy()
np.testing.assert_allclose(res13_20 ,res14_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_20 ,res15_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_20 ,res16_20, atol=1e-3, rtol=1e-3)
(res13_20 == res14_20).all()
(res13_20 == res15_20).all()
(res13_20 == res16_20).all()
res13_21 = module13.get_output(21).asnumpy()
res14_21 = res14[21].asnumpy()
res15_21 = res15[21].asnumpy()
res16_21 = res16[21].asnumpy()
np.testing.assert_allclose(res13_21 ,res14_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_21 ,res15_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_21 ,res16_21, atol=1e-3, rtol=1e-3)
(res13_21 == res14_21).all()
(res13_21 == res15_21).all()
(res13_21 == res16_21).all()
module17.set_input('var_192', input_192)
module17.set_input('var_216', input_216)
module17.set_input('var_228', input_228)
module17.set_input('var_245', input_245)
module17.set_input('var_272', input_272)
module17.set_input('var_295', input_295)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_192, input_216, input_228, input_245, input_272, input_295, )
res19 = intrp19.evaluate()(input_192, input_216, input_228, input_245, input_272, input_295, )
res20 = intrp20.evaluate()(input_192, input_216, input_228, input_245, input_272, input_295, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
res17_14 = module17.get_output(14).asnumpy()
res18_14 = res18[14].asnumpy()
res19_14 = res19[14].asnumpy()
res20_14 = res20[14].asnumpy()
np.testing.assert_allclose(res17_14 ,res18_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res19_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res20_14, atol=1e-3, rtol=1e-3)
(res17_14 == res18_14).all()
(res17_14 == res19_14).all()
(res17_14 == res20_14).all()
res17_15 = module17.get_output(15).asnumpy()
res18_15 = res18[15].asnumpy()
res19_15 = res19[15].asnumpy()
res20_15 = res20[15].asnumpy()
np.testing.assert_allclose(res17_15 ,res18_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res19_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res20_15, atol=1e-3, rtol=1e-3)
(res17_15 == res18_15).all()
(res17_15 == res19_15).all()
(res17_15 == res20_15).all()
res17_16 = module17.get_output(16).asnumpy()
res18_16 = res18[16].asnumpy()
res19_16 = res19[16].asnumpy()
res20_16 = res20[16].asnumpy()
np.testing.assert_allclose(res17_16 ,res18_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res19_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res20_16, atol=1e-3, rtol=1e-3)
(res17_16 == res18_16).all()
(res17_16 == res19_16).all()
(res17_16 == res20_16).all()
res17_17 = module17.get_output(17).asnumpy()
res18_17 = res18[17].asnumpy()
res19_17 = res19[17].asnumpy()
res20_17 = res20[17].asnumpy()
np.testing.assert_allclose(res17_17 ,res18_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res19_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res20_17, atol=1e-3, rtol=1e-3)
(res17_17 == res18_17).all()
(res17_17 == res19_17).all()
(res17_17 == res20_17).all()
res17_18 = module17.get_output(18).asnumpy()
res18_18 = res18[18].asnumpy()
res19_18 = res19[18].asnumpy()
res20_18 = res20[18].asnumpy()
np.testing.assert_allclose(res17_18 ,res18_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res19_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res20_18, atol=1e-3, rtol=1e-3)
(res17_18 == res18_18).all()
(res17_18 == res19_18).all()
(res17_18 == res20_18).all()
res17_19 = module17.get_output(19).asnumpy()
res18_19 = res18[19].asnumpy()
res19_19 = res19[19].asnumpy()
res20_19 = res20[19].asnumpy()
np.testing.assert_allclose(res17_19 ,res18_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_19 ,res19_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_19 ,res20_19, atol=1e-3, rtol=1e-3)
(res17_19 == res18_19).all()
(res17_19 == res19_19).all()
(res17_19 == res20_19).all()
res17_20 = module17.get_output(20).asnumpy()
res18_20 = res18[20].asnumpy()
res19_20 = res19[20].asnumpy()
res20_20 = res20[20].asnumpy()
np.testing.assert_allclose(res17_20 ,res18_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_20 ,res19_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_20 ,res20_20, atol=1e-3, rtol=1e-3)
(res17_20 == res18_20).all()
(res17_20 == res19_20).all()
(res17_20 == res20_20).all()
res17_21 = module17.get_output(21).asnumpy()
res18_21 = res18[21].asnumpy()
res19_21 = res19[21].asnumpy()
res20_21 = res20[21].asnumpy()
np.testing.assert_allclose(res17_21 ,res18_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_21 ,res19_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_21 ,res20_21, atol=1e-3, rtol=1e-3)
(res17_21 == res18_21).all()
(res17_21 == res19_21).all()
(res17_21 == res20_21).all()
module21.set_input('var_192', input_192)
module21.set_input('var_216', input_216)
module21.set_input('var_228', input_228)
module21.set_input('var_245', input_245)
module21.set_input('var_272', input_272)
module21.set_input('var_295', input_295)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_192, input_216, input_228, input_245, input_272, input_295, )
res23 = intrp23.evaluate()(input_192, input_216, input_228, input_245, input_272, input_295, )
res24 = intrp24.evaluate()(input_192, input_216, input_228, input_245, input_272, input_295, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()
res21_14 = module21.get_output(14).asnumpy()
res22_14 = res22[14].asnumpy()
res23_14 = res23[14].asnumpy()
res24_14 = res24[14].asnumpy()
np.testing.assert_allclose(res21_14 ,res22_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res23_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res24_14, atol=1e-3, rtol=1e-3)
(res21_14 == res22_14).all()
(res21_14 == res23_14).all()
(res21_14 == res24_14).all()
res21_15 = module21.get_output(15).asnumpy()
res22_15 = res22[15].asnumpy()
res23_15 = res23[15].asnumpy()
res24_15 = res24[15].asnumpy()
np.testing.assert_allclose(res21_15 ,res22_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res23_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res24_15, atol=1e-3, rtol=1e-3)
(res21_15 == res22_15).all()
(res21_15 == res23_15).all()
(res21_15 == res24_15).all()
res21_16 = module21.get_output(16).asnumpy()
res22_16 = res22[16].asnumpy()
res23_16 = res23[16].asnumpy()
res24_16 = res24[16].asnumpy()
np.testing.assert_allclose(res21_16 ,res22_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res23_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res24_16, atol=1e-3, rtol=1e-3)
(res21_16 == res22_16).all()
(res21_16 == res23_16).all()
(res21_16 == res24_16).all()
res21_17 = module21.get_output(17).asnumpy()
res22_17 = res22[17].asnumpy()
res23_17 = res23[17].asnumpy()
res24_17 = res24[17].asnumpy()
np.testing.assert_allclose(res21_17 ,res22_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res23_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res24_17, atol=1e-3, rtol=1e-3)
(res21_17 == res22_17).all()
(res21_17 == res23_17).all()
(res21_17 == res24_17).all()
res21_18 = module21.get_output(18).asnumpy()
res22_18 = res22[18].asnumpy()
res23_18 = res23[18].asnumpy()
res24_18 = res24[18].asnumpy()
np.testing.assert_allclose(res21_18 ,res22_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res23_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res24_18, atol=1e-3, rtol=1e-3)
(res21_18 == res22_18).all()
(res21_18 == res23_18).all()
(res21_18 == res24_18).all()
res21_19 = module21.get_output(19).asnumpy()
res22_19 = res22[19].asnumpy()
res23_19 = res23[19].asnumpy()
res24_19 = res24[19].asnumpy()
np.testing.assert_allclose(res21_19 ,res22_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_19 ,res23_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_19 ,res24_19, atol=1e-3, rtol=1e-3)
(res21_19 == res22_19).all()
(res21_19 == res23_19).all()
(res21_19 == res24_19).all()
res21_20 = module21.get_output(20).asnumpy()
res22_20 = res22[20].asnumpy()
res23_20 = res23[20].asnumpy()
res24_20 = res24[20].asnumpy()
np.testing.assert_allclose(res21_20 ,res22_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_20 ,res23_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_20 ,res24_20, atol=1e-3, rtol=1e-3)
(res21_20 == res22_20).all()
(res21_20 == res23_20).all()
(res21_20 == res24_20).all()
res21_21 = module21.get_output(21).asnumpy()
res22_21 = res22[21].asnumpy()
res23_21 = res23[21].asnumpy()
res24_21 = res24[21].asnumpy()
np.testing.assert_allclose(res21_21 ,res22_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_21 ,res23_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_21 ,res24_21, atol=1e-3, rtol=1e-3)
(res21_21 == res22_21).all()
(res21_21 == res23_21).all()
(res21_21 == res24_21).all()

'''63: TVMFuncCall
62: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
61: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
60: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
59: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
58: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
57: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
56: tvm::transform::Pass::operator()(tvm::IRModule) const
55: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
54: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
53: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
52: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
51: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
50: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
49: tvm::transform::Pass::operator()(tvm::IRModule) const
48: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
47: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
46: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
45: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
44: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
43: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
42: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
41: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
40: _ZN3tvm5relay9transform22Devic
39: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
38: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
37: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
36: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
35: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
34: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
33: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
32: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
31: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
30: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
29: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
28: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
27: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
26: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::te::Tensor, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
25: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::runtime::ObjectRef, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
24: tvm::LowerWithPassList(tvm::IRModule, tvm::runtime::Array<tvm::transform::Pass, void>)
23: tvm::transform::Pass::operator()(tvm::IRModule) const
22: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
21: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
20: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
19: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: _ZNSt17_Function_handlerIFvN3tvm7
17: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
16: tvm::tir::DataTypeRewriter::operator()(tvm::tir::Stmt)
15: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
14: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::ForNode const*)
13: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::ForNode const*)
12: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
11: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
10: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::ForNode const*)
9: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::ForNode const*)
8: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
7: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
6: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::StoreNode const*)
5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
4: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
3: _ZThn16_N3tvm3tir16DataTyp
2: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::DivNode const*)
1: tvm::div(tvm::PrimExpr, tvm::PrimExpr, tvm::Span)
0: tvm::PrimExpr tvm::arith::TryConstFold<tvm::tir::Div>(tvm::PrimExpr, tvm::PrimExpr)

'''