import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
const_2 = relay.const([[[-7.954720,1.725282,-5.439001,1.324218,-0.362728,1.598295,-0.274620,-6.543304,-1.986105,4.704710,4.418246,1.745757],[2.198845,3.298534,3.946143,4.877239,-7.144580,3.729975,6.081635,3.307659,9.959005,5.856403,-0.318673,7.333177],[3.405412,0.331057,2.125195,-1.121179,-9.782497,-0.837151,-5.726049,-7.196929,-2.415837,-2.215815,-6.510998,4.490945],[-9.098819,-8.371204,-4.248953,2.265920,-2.375257,4.216937,2.423103,2.968574,8.477447,-4.452145,9.245719,-0.130089],[-6.059368,-5.003806,-2.691506,3.571096,-5.996539,1.037821,2.827120,-9.331745,1.840929,1.513524,3.988259,6.603525],[5.395360,6.630745,-7.172992,-9.221659,-3.398157,3.913481,0.996506,7.517479,-0.072702,-0.950256,1.015970,-8.319920],[-3.391316,5.336547,-7.342122,-4.774867,-9.419908,-9.648814,1.052926,-0.778939,0.794494,2.611522,-2.742946,-6.278232],[7.223484,-2.016387,-0.040420,-1.123297,3.376601,-8.927606,-2.853048,5.343285,-1.922865,7.201480,-0.194284,3.024576],[8.172602,-5.672885,0.494846,9.131018,-5.611706,3.468493,-6.846903,4.702328,-6.563888,4.801493,2.967577,1.562104],[-1.879761,2.410103,-7.166616,6.331984,8.531944,6.600774,-5.565127,-7.945248,4.480326,1.813391,7.149069,7.723189]],[[3.018701,-2.395967,1.632129,-9.376748,-8.664719,-1.764211,8.291061,-7.786621,-0.550027,6.898515,-6.546760,9.475828],[-2.290007,6.707546,6.581528,3.484159,0.241370,6.462928,8.474628,2.461564,-4.793265,1.507257,6.996684,-8.499598],[8.932190,-0.349850,0.753583,3.119863,5.141243,3.773979,1.197157,2.460980,-6.606223,3.556525,-5.819307,3.319119],[5.066278,-8.029896,6.833554,-7.062735,2.083550,-7.650092,-2.556664,-8.717035,7.621767,-5.226705,-2.709228,7.004015],[5.170615,-9.790120,0.820542,-6.129717,-6.192840,3.517321,7.314874,9.722680,1.781173,-1.693268,2.489764,7.009619],[-3.594929,-3.559536,1.825965,-5.087276,-9.576687,-4.054198,-8.970962,-1.686248,-8.344066,-9.551578,9.207877,-0.861492],[-1.959494,-9.478073,0.397965,-7.506269,-8.556192,-7.702835,-0.365961,-9.445374,4.022398,0.207704,2.251266,0.089031],[5.449435,0.353562,0.765493,5.866615,-4.167913,5.264385,1.510688,-8.508554,-2.006899,7.644397,5.026882,-9.611470],[9.114962,-0.114816,6.280252,-7.434276,-1.500202,-3.686738,2.220996,2.640516,5.778971,5.971775,-7.058340,-0.663697],[-2.934475,7.570799,9.000344,-6.094148,7.315538,9.868651,-2.362622,-8.797968,-1.476271,-3.573285,-9.587066,2.009566]],[[5.180716,2.779848,-0.132372,-6.486874,6.766848,-3.497718,2.149181,4.061446,-6.946529,-4.147361,-4.694693,7.764146],[5.958043,-0.458185,1.792365,3.416703,-6.522377,-2.760448,8.859544,6.943413,-0.603494,7.706899,9.759774,9.876835],[-7.016816,-8.323965,-3.247661,5.568149,-8.787435,6.161543,2.042709,-4.602866,2.524600,7.581325,8.271619,-3.549235],[-6.235309,-8.853198,-6.375679,5.328652,2.374584,-8.129907,3.488515,2.883699,2.511746,9.150405,2.716123,5.784415],[-0.708740,0.136494,8.632902,-1.710285,-5.790967,1.981862,-0.112596,6.858370,5.157933,1.249834,6.510016,-2.842933],[6.553943,8.610362,9.190056,-4.611427,5.245907,7.996223,6.118624,1.291504,-6.813442,-9.710697,4.595725,-5.728623],[4.993726,-0.417500,-4.843833,-7.626181,-5.635053,9.665482,-7.596092,-2.563780,0.585788,-3.951949,8.658996,-8.462731],[7.427563,-4.371388,-9.341134,4.326060,-6.638025,-5.796132,-0.168110,-2.554559,5.782524,-3.164020,2.845084,4.436253],[-6.025264,2.488786,0.259467,-3.235196,9.631070,-4.011957,0.293262,2.670135,5.761379,3.487371,-9.999270,-4.036496],[5.149018,8.754199,5.721117,6.961131,8.579097,7.658713,5.014341,9.891824,-8.345331,-0.243380,3.661336,7.478362]],[[-5.349527,-2.746337,6.542525,-0.752986,2.234989,6.572493,-9.551522,-8.061389,-1.059823,2.665525,3.189210,-1.543748],[-7.098956,-2.649364,-9.649682,-6.565227,-7.655443,-0.799778,8.158363,-1.298648,-3.270013,-6.966166,-3.249984,-2.833791],[-3.981225,-4.255770,-2.798336,-4.787741,-9.678035,-3.119200,-9.083014,1.222133,2.159303,-9.758682,-0.261686,6.249110],[9.895975,0.977874,6.701480,-0.244125,9.339977,5.640110,0.814011,-1.779170,-9.697489,-9.929676,7.420273,1.724265],[4.812737,-5.529719,-6.945014,6.934320,1.155315,-1.065484,-4.685823,-2.198190,8.136986,-2.491154,9.091907,-5.002262],[3.624579,7.273836,-0.131399,-9.558620,-6.339570,7.729145,-9.704987,-4.783944,-5.963028,-0.456484,5.101707,-4.247978],[3.972669,8.415361,-8.256800,-4.388912,9.677674,-1.999242,8.906439,4.854177,4.449195,-0.584006,2.779296,6.275473],[6.016245,4.263390,6.242556,-9.827233,-6.173304,5.793119,6.763744,-1.114567,2.083131,5.741701,8.562337,9.684708],[7.929054,7.408223,-1.585998,-8.831942,-3.722421,1.658552,-4.509231,-7.812244,5.037155,1.371496,-8.700130,8.588088],[-1.715568,-5.203031,-9.846391,1.480860,7.163715,-9.845471,3.478150,-6.948525,-9.298625,3.698179,7.810938,1.345170]],[[-0.825414,2.002490,3.944620,-1.951359,1.637230,7.653925,-8.263533,-9.080510,5.402722,-5.504090,5.935874,3.952708],[-2.318554,-5.196261,-9.814929,-6.848517,-9.108231,4.038959,8.563974,-1.799542,-8.369808,-7.108512,-3.518687,5.020799],[0.115750,-7.318320,-6.205769,9.429464,9.120194,-6.524484,3.223614,-3.388336,-9.099794,6.546684,6.718055,1.278955],[-9.218939,0.835632,-8.493644,-8.965239,-6.233002,-6.172936,-8.203760,7.866132,-9.351631,-1.471594,-7.578158,6.789660],[-9.184451,-8.467140,-0.191659,-3.032227,6.478796,3.822379,-7.297194,-3.908277,2.593768,3.049516,-6.970106,5.809597],[-8.576930,-1.975956,-2.431155,1.694927,3.518292,-5.528097,5.953347,-8.385833,-4.690060,-8.013264,9.025373,6.629658],[-2.302333,0.390701,4.648133,7.109715,-9.397644,4.267754,8.401059,8.435962,-1.018925,5.440213,-4.206473,1.173889],[8.768796,9.340607,-5.089235,9.789161,8.656193,8.551940,7.683349,-3.064796,-6.665804,-0.296667,4.850620,-2.915728],[-6.493046,1.877215,1.062108,9.222105,1.726610,-8.961973,-1.009994,-8.326180,-8.746036,-7.536680,-2.321060,0.592759],[-7.535122,-0.216267,1.255737,-1.688012,-3.589688,8.923165,-4.387717,8.792874,9.130464,5.190199,7.043639,-9.862302]],[[1.477923,-8.106228,7.064523,-4.877403,4.149735,7.731943,-0.594185,-8.835178,-2.860724,-2.237314,4.463297,-3.690645],[5.443145,-1.945043,5.086074,-8.515511,8.308472,-1.617350,-5.071479,2.653322,5.721920,4.604419,-9.315697,6.778585],[8.542518,4.515919,3.404998,2.443344,6.294989,8.261007,-2.081039,8.820522,-1.074238,2.357291,-1.847821,5.995018],[2.910927,3.866738,-7.229828,-1.405447,5.362954,-3.762569,0.740535,9.983188,4.658926,7.538833,2.173534,-7.544607],[-9.048631,-5.704023,-3.745559,3.620146,-2.508695,5.321598,9.408644,-6.916090,7.156353,3.646617,6.785482,1.111549],[2.328990,-6.714129,3.988228,7.689421,-6.064243,-2.247386,0.911325,2.526055,2.170811,-1.483084,-2.476498,9.214317],[-8.278901,3.279584,8.397843,-8.102045,0.042549,4.991816,7.214971,9.642531,3.200022,-0.031833,0.482380,-4.443554],[-3.916209,6.527843,-8.221003,-4.575645,7.272996,-3.097373,-5.392239,9.022800,9.565608,-6.827665,2.628535,9.221608],[-0.106915,6.826499,4.306152,-8.171023,7.945585,-8.621225,-6.122151,-8.307112,-5.750875,-7.807883,6.997508,0.152832],[4.254482,-0.433878,9.812703,1.401333,7.407539,6.637239,-8.992868,3.640549,8.066950,3.720737,-6.931269,2.193365]],[[-8.001306,-5.014941,2.778920,8.071538,9.872689,-9.662124,0.694554,-3.109084,-7.189781,6.658341,5.198972,-0.991858],[-2.508932,-6.874681,6.039362,-9.122583,-1.291739,-2.845313,-9.480789,-7.915245,0.728738,-3.663590,-2.129376,9.277755],[-6.902035,8.341105,2.093735,-6.295842,-1.525723,1.671960,-3.220054,7.558027,-4.658268,-2.556189,0.078352,-5.643252],[1.378301,1.355103,-0.415649,6.623826,2.521883,-3.906087,-7.918819,2.398715,-3.929168,0.906739,-8.589472,0.277468],[-8.568903,1.834366,-5.997990,-2.365493,-5.816040,9.856962,-8.627880,4.285196,6.225541,0.962358,-4.621830,-1.901292],[6.033393,9.682903,6.129430,-3.512849,-5.275072,8.865416,5.829309,4.645804,-5.508705,-0.003889,9.952259,-0.613560],[-8.046881,-7.638192,-6.863481,0.066532,-3.317001,4.349427,5.466549,0.472710,9.780669,-9.747883,-5.178136,-6.324456],[-4.654641,-1.034327,-7.127876,-7.742599,-1.582857,5.354121,-9.127534,-2.619717,3.293200,-2.792368,1.388121,1.736515],[-4.415131,7.756225,0.646082,0.100459,5.492257,0.991937,2.048624,-9.666815,-5.480034,-7.291938,-0.425911,-4.817831],[9.238834,-4.256556,-6.479013,2.680702,5.785887,-0.901999,4.089081,-0.399933,7.585761,-1.045740,0.209571,-7.531879]]], dtype = "float32")#candidate|2|(7, 10, 12)|const|float32
uop_3 = relay.exp(const_2.astype('float32')) # shape=(7, 10, 12)
output = uop_3
output2 = uop_3
func_6 = relay.Function([], output)
mod['func_6'] = func_6
mod = relay.transform.InferType()(mod)
mutated_mod['func_6'] = func_6
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6_call = mutated_mod.get_global_var('func_6')
call_7 = func_6_call()
output = call_7
func_8 = relay.Function([], output)
mutated_mod['func_8'] = func_8
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11 = relay.var("var_11", dtype = "float64", shape = (1, 2))#candidate|11|(1, 2)|var|float64
uop_12 = relay.asin(var_11.astype('float64')) # shape=(1, 2)
output = uop_12
output2 = uop_12
func_14 = relay.Function([var_11,], output)
mod['func_14'] = func_14
mod = relay.transform.InferType()(mod)
var_15 = relay.var("var_15", dtype = "float64", shape = (1, 2))#candidate|15|(1, 2)|var|float64
output = func_14(var_15)
func_16 = relay.Function([var_15], output)
mutated_mod['func_16'] = func_16
mutated_mod = relay.transform.InferType()(mutated_mod)
var_62 = relay.var("var_62", dtype = "float64", shape = (15, 14))#candidate|62|(15, 14)|var|float64
var_63 = relay.var("var_63", dtype = "float64", shape = (15, 14))#candidate|63|(15, 14)|var|float64
bop_64 = relay.multiply(var_62.astype('float64'), relay.reshape(var_63.astype('float64'), relay.shape_of(var_62))) # shape=(15, 14)
func_6_call = mod.get_global_var('func_6')
func_8_call = mutated_mod.get_global_var('func_8')
call_67 = func_6_call()
call_68 = func_6_call()
output = relay.Tuple([bop_64,call_67,])
output2 = relay.Tuple([bop_64,call_68,])
func_69 = relay.Function([var_62,var_63,], output)
mod['func_69'] = func_69
mod = relay.transform.InferType()(mod)
mutated_mod['func_69'] = func_69
mutated_mod = relay.transform.InferType()(mutated_mod)
func_69_call = mutated_mod.get_global_var('func_69')
var_71 = relay.var("var_71", dtype = "float64", shape = (15, 14))#candidate|71|(15, 14)|var|float64
var_72 = relay.var("var_72", dtype = "float64", shape = (15, 14))#candidate|72|(15, 14)|var|float64
call_70 = func_69_call(var_71,var_72,)
output = call_70
func_73 = relay.Function([var_71,var_72,], output)
mutated_mod['func_73'] = func_73
mutated_mod = relay.transform.InferType()(mutated_mod)
const_109 = relay.const([[0.258835,-2.980484,-3.115186,-9.364278,-8.754561,-6.769923,-4.275774,-2.956411,8.636073,-9.583655,8.510360,2.414674,-6.574362,5.057191,-3.928578,-6.317976],[8.924896,8.282612,-5.984423,-6.760278,5.151110,-3.428274,9.176054,1.902889,-8.874403,6.441694,-3.961035,-4.575743,5.756951,-7.916438,0.884559,2.337550],[6.610364,-5.868631,4.911485,-2.764983,8.709645,-3.273156,4.672160,-0.454078,-8.864446,-2.788231,-5.094508,1.470511,-5.634832,-2.561657,9.140339,-3.532699]], dtype = "float32")#candidate|109|(3, 16)|const|float32
uop_110 = relay.sinh(const_109.astype('float32')) # shape=(3, 16)
var_112 = relay.var("var_112", dtype = "float32", shape = (3, 16))#candidate|112|(3, 16)|var|float32
bop_113 = relay.multiply(uop_110.astype('int8'), relay.reshape(var_112.astype('int8'), relay.shape_of(uop_110))) # shape=(3, 16)
uop_124 = relay.sigmoid(var_112.astype('float32')) # shape=(3, 16)
bop_127 = relay.add(uop_110.astype('uint64'), relay.reshape(var_112.astype('uint64'), relay.shape_of(uop_110))) # shape=(3, 16)
bop_136 = relay.logical_and(uop_124.astype('bool'), relay.reshape(bop_127.astype('bool'), relay.shape_of(uop_124))) # shape=(3, 16)
bop_142 = relay.equal(const_109.astype('bool'), relay.reshape(uop_110.astype('bool'), relay.shape_of(const_109))) # shape=(3, 16)
const_148 = relay.const([[-5.381643,2.717261,-9.142526,8.111500,7.936816,0.854882,0.700515,-2.124027,5.421356,2.326063,3.391917,-2.207893,7.820497,6.390265,-1.893643,1.514201],[6.454091,2.337031,-7.341830,4.779426,-0.249728,-8.393806,1.762371,-0.279698,-9.422245,-9.757617,4.912834,-1.059586,-9.560557,6.151957,-9.380281,5.442240],[3.616553,9.299913,-3.126584,-7.155530,-1.955473,-5.655245,9.836161,-7.562412,-8.079113,0.494517,0.916261,-1.228204,-8.105739,2.770574,-6.605004,-4.978903]], dtype = "float32")#candidate|148|(3, 16)|const|float32
bop_149 = relay.less_equal(uop_124.astype('bool'), relay.reshape(const_148.astype('bool'), relay.shape_of(uop_124))) # shape=(3, 16)
func_14_call = mod.get_global_var('func_14')
func_16_call = mutated_mod.get_global_var('func_16')
var_160 = relay.var("var_160", dtype = "float64", shape = (2,))#candidate|160|(2,)|var|float64
call_159 = func_14_call(relay.reshape(var_160.astype('float64'), [1, 2]))
call_161 = func_14_call(relay.reshape(var_160.astype('float64'), [1, 2]))
output = relay.Tuple([bop_113,bop_136,bop_142,bop_149,call_159,var_160,])
output2 = relay.Tuple([bop_113,bop_136,bop_142,bop_149,call_161,var_160,])
func_170 = relay.Function([var_112,var_160,], output)
mod['func_170'] = func_170
mod = relay.transform.InferType()(mod)
mutated_mod['func_170'] = func_170
mutated_mod = relay.transform.InferType()(mutated_mod)
func_170_call = mutated_mod.get_global_var('func_170')
var_172 = relay.var("var_172", dtype = "float32", shape = (3, 16))#candidate|172|(3, 16)|var|float32
var_173 = relay.var("var_173", dtype = "float64", shape = (2,))#candidate|173|(2,)|var|float64
call_171 = func_170_call(var_172,var_173,)
output = call_171
func_174 = relay.Function([var_172,var_173,], output)
mutated_mod['func_174'] = func_174
mutated_mod = relay.transform.InferType()(mutated_mod)
const_199 = relay.const([[[1.710171,8.081376,-2.486374,-1.914891,-7.924969,9.232195,-1.542130,-5.156056,6.634620,-3.810657,3.557727,8.085640],[-2.229265,-2.714736,1.592336,6.955244,3.215021,-7.621902,8.049637,3.690558,-3.108932,-4.488154,2.924589,-8.131499],[-9.819222,2.906789,5.042225,-5.532539,3.771508,-9.580791,5.146802,3.187079,-3.910938,-0.482124,-7.295888,0.741788],[-6.984452,4.195268,2.590035,-6.177207,-5.971022,8.650887,5.341877,-1.626687,4.914779,6.909103,-2.572513,0.480319],[0.885273,4.517897,-7.150823,-9.012960,-1.357242,-2.211543,2.634907,6.577428,-0.811205,6.829102,-9.507133,-6.409121],[-1.005543,-8.659710,-2.364899,-1.048444,-3.553985,-5.148366,-9.861674,4.483288,-1.459447,-5.900723,1.021209,-3.987341],[3.207702,8.084072,4.835491,8.825554,5.604787,-7.146400,1.006406,5.766100,-5.849382,-1.489902,1.058224,4.368946],[7.286173,3.963888,4.329180,-2.196454,-4.496205,9.340990,0.081527,8.612993,-5.677081,8.123757,-6.809347,1.274291],[-4.940312,-3.853197,-4.133285,2.023937,5.783510,-5.881235,-2.995444,0.641037,-7.381842,-3.988020,8.039650,-0.820003],[-6.280085,-1.111897,6.433253,0.720864,6.610055,7.977243,-3.598878,-0.462110,4.048535,-1.188988,4.414401,-4.739373],[-3.732310,-6.058212,3.325898,-0.986042,-3.415427,-2.916848,-5.415529,2.386038,2.201407,6.409283,5.125230,-9.890054]],[[-7.739345,1.922839,-2.570392,0.028477,-8.031887,5.831144,7.881807,4.620033,-6.986803,3.173355,-8.722301,-7.140984],[3.164440,3.606431,7.271124,9.643016,-9.295769,-7.976518,4.319749,-6.522929,4.488794,0.687661,2.249792,-1.640437],[-9.645464,-3.932697,-2.227180,0.217403,1.295820,-2.094718,-3.965023,-3.926419,-6.364943,9.003811,1.936785,-8.131137],[7.861907,1.783655,-3.141322,-7.312476,8.483465,3.816132,-4.283045,8.345650,6.512107,-9.579489,3.443492,9.510049],[7.376586,6.989712,-9.584158,2.120349,3.898246,-5.315418,-8.187252,5.316833,9.862132,4.029011,2.287596,8.349489],[1.546643,-6.772709,7.935309,-9.700297,-8.236266,7.275256,3.647100,9.944509,7.863773,7.386637,-9.506198,9.218582],[2.463585,0.357272,4.123354,-8.563284,9.831240,7.683791,-2.728856,7.440472,-0.919384,4.930999,-6.246828,-7.730599],[-4.496398,3.971912,-9.115363,-6.119000,-1.516680,-5.000986,3.909229,-4.740807,6.145962,0.652353,5.557330,5.981999],[9.463298,-0.246690,9.036143,4.121801,-7.357840,-3.545803,8.563941,-5.156652,8.892940,8.500624,2.934607,8.812258],[8.307352,-2.129634,8.733831,-3.691155,-5.872224,-8.593186,-4.399816,0.639938,0.735682,7.467659,8.617428,-9.583363],[2.434555,1.083323,7.886744,9.832509,2.286386,8.491184,6.056156,1.881779,-8.766860,1.906558,0.531052,5.642619]],[[7.048666,5.942400,7.378267,4.379144,0.563377,8.121364,3.184392,4.966945,4.730619,5.818905,8.377456,-4.532453],[1.174494,-8.044331,7.404746,4.152990,-8.608896,7.510820,-9.762215,-7.011868,6.815713,-5.136165,9.719461,3.100870],[-5.996638,9.333569,4.818020,-3.105039,-4.713107,0.559271,-9.628609,-6.739293,9.845963,-1.896889,-7.697177,9.787796],[8.089843,-4.259420,4.809803,6.468259,-6.508631,0.292382,-1.019228,-7.604762,-2.611397,-0.049186,-1.736199,-8.578986],[-3.433108,6.860684,1.891909,-0.234586,-1.710394,8.059627,-0.624320,-9.724548,-6.840746,-2.400814,4.286868,0.052018],[-2.313636,-1.971768,-1.956551,-5.208805,-8.020265,0.847298,-8.751910,-5.952757,-5.600760,7.552152,-9.142375,3.234377],[9.495324,2.504701,8.472637,4.577393,5.855292,-3.849994,-3.502828,-7.469492,6.558459,-5.813967,-3.795178,-7.847979],[9.905304,5.906468,5.124236,-6.374505,2.143300,4.429509,-7.748420,-1.387612,1.737550,4.090435,-8.477487,-6.980647],[1.153514,8.366225,0.617041,-3.833956,6.305539,-5.444985,-3.339950,-6.937187,-7.058975,-1.015414,-7.336848,-0.552162],[-5.336992,9.746703,-4.111736,-1.415155,-5.391545,5.065827,8.604232,-1.555474,3.877211,-1.124047,7.816631,6.115555],[-3.854962,-6.917473,6.445959,-5.838195,-1.914595,-8.194356,3.174850,-3.001097,-7.013481,2.647151,0.846892,4.414694]],[[-2.494572,6.988412,-3.945230,-7.616161,-8.567016,1.903841,8.409223,0.164105,6.045162,-9.556145,-5.080893,-2.422772],[-9.031654,5.158075,-1.864741,1.851570,-4.626454,-4.008853,0.137828,5.403708,-6.795043,4.511429,2.009772,0.391029],[-5.135993,1.524833,5.626696,-0.299406,-3.393793,4.582110,-7.043184,7.896918,5.029090,9.845365,-5.217357,2.024187],[1.603516,1.033120,3.614443,1.888207,-9.296848,6.944881,-8.236371,-0.756603,7.563378,7.437206,-7.304044,-7.761545],[6.697063,-8.339566,-8.087302,-0.753686,6.016464,-8.180614,-2.882784,-8.305505,4.057455,-7.655053,2.969853,-1.998141],[8.833494,-4.367396,-5.796760,0.126601,-6.423749,-7.327033,1.660012,-7.116599,-3.407395,-8.431416,-4.135354,3.846189],[-6.354395,-3.614973,-7.886087,-9.456691,-7.660097,6.797573,8.571077,-7.474138,8.064361,-7.276617,5.223895,0.306530],[-4.441330,7.139287,-9.184694,-4.910944,-7.338102,6.390904,1.480845,-8.641516,-2.137153,-2.863550,3.320948,-3.473001],[4.426355,9.096402,1.892807,-0.185674,-6.153409,9.425012,1.688066,2.999965,-0.288371,-0.417205,-8.269164,3.427698],[6.010915,-2.379111,4.455548,4.232441,-3.218189,8.474517,7.914481,5.288071,0.529690,-5.055267,-9.795823,5.176224],[-4.981041,-2.402125,-8.260126,-6.870425,0.133971,-4.184284,0.664735,-9.672319,1.247848,5.648114,7.798535,-7.196864]],[[0.913133,0.342153,2.162213,-2.186317,7.568829,-5.643272,4.784852,7.839495,-1.010169,9.877159,4.124352,8.280908],[0.792567,0.728369,1.532283,-0.854234,-1.713591,-6.809313,-4.382191,-1.300183,9.256500,8.725136,5.885548,3.599743],[3.695607,9.125987,-4.179843,9.632904,1.732587,9.678300,-9.554886,-8.622813,6.552495,-8.298447,9.684074,8.666916],[-6.496474,3.039409,5.988183,4.725592,3.927754,2.931534,2.232121,-6.601185,8.369364,5.882453,3.345056,7.854082],[-4.321440,-7.484560,-7.935711,-9.825578,-1.221522,-7.306131,-6.861627,-3.419991,-1.428595,-9.960905,-1.148157,-0.573078],[-1.756382,-1.068824,4.159186,-1.650434,2.617183,-5.993500,8.788972,-3.639671,-6.878021,6.145406,-3.060904,3.035140],[-9.501246,-4.317051,-4.229924,-2.985422,-3.968843,-6.392084,-3.599361,0.637560,0.377533,1.483151,-6.201991,-3.453727],[-7.017970,-9.473853,-1.062936,5.754934,3.372348,6.052364,2.742479,-6.747286,-5.258216,5.401489,5.215277,6.309310],[-2.717632,3.853430,-1.809694,-4.026018,-2.319387,-7.977540,-5.070185,9.771766,2.577717,8.694395,-8.591274,8.490699],[-7.758615,-7.113068,1.677579,-7.503043,-0.448185,9.984207,6.528776,-5.596741,-1.528427,-8.639131,-4.718523,-8.922564],[6.373454,-6.045354,4.170281,-1.783926,8.498629,5.315340,-5.326154,-6.119400,-1.068421,-6.752704,9.772209,7.336512]],[[3.351912,-9.239602,8.056789,5.160546,-9.282928,-9.028420,9.459322,8.097965,5.672450,-2.788724,-7.323430,4.015262],[-1.787484,2.044779,-4.714510,8.566756,-8.450346,2.682292,-1.899466,-9.965442,0.880259,-8.682417,-4.767596,6.273288],[-8.627737,7.566617,-8.557259,6.576139,-7.319003,4.659263,5.527598,-9.041935,-0.816053,2.709912,9.040223,-3.050725],[8.855762,8.352023,-5.335035,3.004833,-4.146611,-9.169145,9.216338,5.357642,-7.369121,-7.879862,8.803928,7.828834],[2.117922,-6.535394,4.140902,6.865714,7.081321,-6.317229,0.874381,4.908034,-0.264299,-0.592308,0.910313,-5.671265],[-3.769384,-0.345119,2.251947,-3.285614,-3.222290,8.754527,6.080394,-8.432490,-9.080488,-6.731939,9.781310,4.476057],[0.612549,6.807995,-5.627171,-3.377405,9.335143,-7.386473,4.496406,5.773047,-0.619065,1.442294,8.764316,-4.391958],[-4.434825,4.589672,-0.590546,9.996288,-0.467107,4.418024,-0.829661,-2.110243,-4.439233,8.335604,0.521430,3.913112],[7.458371,3.548537,2.689582,-2.473757,-8.461755,3.188725,1.599337,2.902408,1.472199,-5.075398,-2.745978,7.292661],[9.450939,-9.087758,9.837016,-1.879044,-4.918557,9.931812,-0.405599,5.732446,3.395756,7.198241,-2.361000,5.277033],[6.426079,5.128463,-7.159364,-7.632527,7.584156,-4.192736,3.811328,-2.318892,-3.468606,0.119081,6.784657,8.809901]],[[0.997034,2.887888,9.382812,2.993492,-3.274328,1.496322,-3.359735,4.240859,-7.276743,-9.851316,-5.907748,-5.535215],[0.027007,7.117813,-8.489002,5.076952,-4.422650,5.857548,8.077530,-8.241652,-0.924078,-3.732567,-4.706433,-2.624209],[8.782720,-6.286479,3.420308,-3.725529,-0.809697,-8.674214,3.323783,-7.882014,-7.898156,6.458552,-7.612375,-1.386214],[5.130195,4.634189,-7.149832,6.353246,5.339045,9.528624,-9.507306,3.227519,-9.546613,7.803512,2.578524,6.966293],[-6.943262,-0.949265,-7.784192,5.247251,3.588972,2.301468,-3.573645,-7.835062,-0.182762,9.240218,8.320436,2.747845],[-6.128696,1.326188,-0.305273,2.052613,-0.204665,-2.906703,-2.188034,-9.234603,-6.147860,3.005621,-9.451128,-6.382510],[-7.558313,0.304083,-2.860907,0.691199,-6.509751,9.784416,1.207867,9.445221,-4.303884,-0.825388,9.000238,-3.266034],[1.726024,-8.090059,8.763067,-5.683941,-0.137781,-6.955963,1.855221,5.393082,-8.782570,-7.623560,-5.362948,6.742031],[7.646016,4.637165,0.423783,2.384741,-7.795362,-4.209187,-3.116142,5.440849,2.417465,-4.897536,3.117745,-5.473257],[-9.601685,2.772075,-6.688979,3.561324,-8.932380,-1.097208,-6.802079,-1.404120,4.525243,3.361564,-6.516203,2.266455],[-0.413826,-8.421465,7.900659,4.541559,1.380955,-2.129969,-1.139557,-9.785153,0.302632,-6.691712,-2.624239,-9.947171]],[[9.169524,4.676278,-8.592380,3.787692,-1.256586,-2.886720,-7.016490,6.793374,-0.204934,8.986158,8.441723,8.432424],[-7.475567,8.803022,8.209323,4.251594,8.986525,-7.528740,0.275407,-2.856646,6.067653,9.022071,-4.732518,2.039841],[9.814565,7.237566,-9.926450,8.276015,-7.313918,1.500299,-3.402875,9.252459,-0.143087,2.885723,5.211518,7.602327],[-9.007102,0.581578,-6.719523,1.693289,1.680862,-0.750474,2.058612,2.644922,-7.820400,4.641280,6.574328,-2.085722],[-3.413092,1.219924,6.839695,-5.675530,1.065005,0.544409,4.960349,1.773140,0.901511,-3.555315,9.442385,0.701162],[1.619730,-4.669144,2.365507,-5.644964,-8.531983,7.836847,-1.904018,4.130056,7.454491,5.349080,6.035961,-9.741317],[0.935890,-5.243755,-0.589008,-0.395186,-5.293616,-8.138700,-1.821906,-7.685257,-3.959982,-1.747113,9.150718,-3.317530],[-5.841361,5.160376,3.654620,9.434938,0.256005,0.373249,6.123456,7.764581,3.906129,2.682673,-8.080242,-4.126196],[9.315861,3.115170,7.427810,-3.575604,-4.788143,1.109190,8.120007,-2.360327,-4.090753,-4.090348,2.700072,-2.420136],[6.736720,-6.330491,0.804108,-2.047354,-2.496590,7.564405,5.120297,5.927063,-1.267977,9.950585,6.186656,-0.110076],[-6.939997,4.676990,-8.866215,-9.574735,3.999741,6.362583,2.701514,-5.885547,6.187729,0.300563,3.912835,-2.193354]],[[-2.712551,3.939095,9.865083,3.468347,-6.787335,-8.031740,-9.332202,-5.512077,3.597589,-3.604204,7.917550,-3.125349],[3.619089,3.888062,8.754991,-5.669053,-1.390670,0.699792,4.671149,3.192570,-3.134420,-9.997882,-2.913593,-0.679862],[-7.052386,-3.130741,5.641532,-8.715875,5.723168,7.839550,-0.182094,-2.877913,7.473765,-2.292332,-7.033777,-7.555296],[3.330509,-1.834074,7.952124,-2.136002,9.222163,6.862462,9.082081,3.018757,-4.103294,1.506553,-9.327151,5.302566],[-2.962605,-9.434222,5.606411,9.808629,9.987834,-6.317230,-6.207287,-3.201951,8.008179,4.548156,-7.057866,1.582088],[2.749971,4.946243,-3.404261,-3.426731,-5.571786,-6.841565,7.665233,2.257654,4.262411,-6.872888,-9.909976,8.849546],[-3.982421,-6.696059,-9.585851,7.027810,9.628370,8.384844,7.781896,-3.753139,5.935462,8.406517,-7.011043,7.947247],[-7.494683,4.609307,4.840437,0.649119,3.214929,-6.075978,7.250459,-5.802043,-3.317205,0.931430,7.154050,1.164118],[-4.892160,5.741377,0.795208,-4.297298,-9.339687,-2.449970,-0.544189,-4.146939,-0.286154,0.855488,-7.134065,-0.116547],[-5.160169,4.512117,7.284082,-2.804054,5.693381,-6.601747,-1.652257,2.239414,-3.346156,-0.755823,5.851409,8.240651],[6.268335,4.071345,-7.098787,-8.460121,6.676009,-5.292277,8.209278,-8.898221,-3.263104,4.560220,3.289618,-1.308490]],[[4.071906,6.091274,2.089988,-8.394242,0.945261,-5.501353,5.635462,-5.097215,-2.889986,2.973879,1.061407,9.924365],[-8.249620,2.384062,1.110281,1.345027,-7.371924,1.213520,8.736746,0.613321,3.289214,-3.503391,-1.920496,-2.763649],[9.366434,-2.905514,9.702469,5.512154,7.991038,-0.988233,-0.849306,0.696075,-2.517389,-5.669408,-5.798800,-4.367632],[3.076660,-8.694795,-1.727212,4.087039,-6.099965,-3.206117,0.772731,4.735260,-1.616913,0.223865,0.717497,-4.397314],[9.136930,-6.072944,-8.152845,4.275886,7.841422,9.499543,-1.355312,-7.391490,5.462112,3.874323,-9.273784,0.142956],[-5.120780,1.439856,8.952251,6.326037,-5.255418,-7.886148,-4.427985,-2.860511,7.156633,9.783338,-1.403903,-6.915090],[1.599371,-3.701278,-0.610589,-4.822352,-9.649544,-4.800123,0.992423,-6.217418,5.652237,-6.474445,3.092775,-0.195955],[2.243217,-7.924412,3.517381,1.812322,-2.849906,-6.833544,5.861796,9.134221,-6.729350,8.040373,8.813924,1.637794],[-6.363316,2.824025,-8.488743,-0.718402,7.876321,-4.276782,2.203344,0.381934,7.894317,-1.238917,7.129635,8.940463],[7.672852,2.727043,-1.256637,-6.619520,8.773907,-4.620048,3.007402,8.189520,-2.341934,2.102265,4.316744,8.119591],[-1.129165,6.173481,-5.092864,4.678438,5.842007,-6.220722,2.194184,-9.888767,-1.103367,-8.388115,4.128894,7.619534]],[[9.398455,6.620763,6.953942,-2.403395,-5.004932,6.392778,-0.870659,-7.616059,-4.088898,4.178483,8.522853,-9.771436],[7.368591,9.928013,-1.159733,-7.863032,9.080971,-6.256260,-6.119247,-3.520041,-2.639481,4.706868,-0.469525,-4.719944],[8.448874,-5.678002,1.002159,-8.107856,-3.591877,0.483909,-4.788494,-8.473228,9.438537,6.099058,8.610237,-7.527542],[9.105483,-4.998078,7.513758,-2.660058,3.433028,-2.502488,9.384855,3.665582,-2.596531,-9.694808,-6.255249,9.802942],[7.950000,8.304897,-1.366285,-0.944528,-7.828156,-6.988595,6.096342,-1.779881,5.422746,9.568625,8.250034,-6.261169],[2.098322,6.342904,-9.914049,6.525217,4.314652,-1.987991,-2.948778,7.091243,-0.321234,8.812306,4.020426,-2.483012],[-1.957787,9.217616,-3.337582,3.631841,6.990042,9.208874,8.589535,8.748825,1.307068,3.762412,1.985408,-7.239855],[-0.628270,9.177691,5.418912,-4.686345,-6.992651,-7.930814,-6.250390,-5.223855,-7.143282,5.236544,1.804592,-0.950723],[-3.151573,-3.340200,-2.585621,6.331188,-1.450025,-0.784283,-1.802220,3.009264,8.991871,4.088052,-1.948075,1.698703],[6.675220,-3.420806,3.763141,-1.760526,-3.004763,3.748114,1.229133,4.807311,-2.040191,-4.387341,3.688544,4.378648],[2.403639,-7.699525,-4.068535,-7.042699,-9.245445,-9.197087,7.248541,9.889705,-4.873604,-6.793256,-4.319181,3.829201]]], dtype = "float64")#candidate|199|(11, 11, 12)|const|float64
uop_200 = relay.asinh(const_199.astype('float64')) # shape=(11, 11, 12)
uop_203 = relay.atan(uop_200.astype('float32')) # shape=(11, 11, 12)
uop_213 = relay.rsqrt(uop_200.astype('float64')) # shape=(11, 11, 12)
func_69_call = mod.get_global_var('func_69')
func_73_call = mutated_mod.get_global_var('func_73')
const_228 = relay.const([[-4.913479],[-6.671541],[2.368835],[4.793058],[-6.441251],[6.738772],[-9.281657],[-5.837869],[7.081282],[-3.668462],[1.117520],[-9.869038],[6.298979],[-6.345476],[-2.839254],[4.747139],[1.397076],[9.305568],[6.237626],[0.391886],[0.212359],[0.266450],[-3.319185],[9.628648],[7.386685],[-7.523819],[3.766801],[0.773722],[-2.316100],[-9.953683],[-3.329464],[-2.955005],[6.452436],[9.037719],[-2.201597],[3.495394],[8.310418],[6.822611],[-4.453044],[6.684853],[-9.822587],[0.796333],[-5.961767],[-9.736688],[-6.042558],[-1.300580],[-4.642362],[1.734497],[-0.865149],[7.939102],[2.734340],[-7.887834],[4.767256],[-9.140792],[-4.038333],[3.458636],[0.602440],[7.343446],[6.045778],[4.397040],[-9.176952],[9.400378],[-3.407299],[7.208634],[0.381768],[3.094878],[3.151190],[2.224742],[5.981501],[-0.543948],[-2.038823],[-1.836656],[-8.038321],[5.469752],[-5.864797],[-7.508282],[-3.807601],[5.717377],[-4.593694],[3.210472],[2.485498],[-7.831822],[-9.778365],[8.371297],[-0.083949],[-6.262474],[0.787769],[-8.576186],[-0.639546],[-4.730841],[-9.244143],[4.895605],[-1.376591],[6.135372],[5.397566],[-0.052947],[1.177315],[9.717516],[-5.913301],[7.802928],[6.516789],[2.943741],[9.398632],[-7.309750],[-3.149959],[-4.671760],[2.747866],[1.123813],[-1.132644],[-1.586484],[-6.009434],[8.281679],[-8.629688],[6.289169],[1.493283],[4.438238],[-3.868704],[-2.329370],[-5.317769],[7.013723],[4.866052],[-5.085920],[-5.402493],[-8.646701],[-5.778073],[-9.711703],[8.978815],[3.734811],[5.204629],[-7.310451],[3.969432],[2.990548],[7.895100],[6.373479],[-3.985555],[-0.725235],[-5.965715],[7.707438],[-5.618767],[-8.465740],[-2.453862],[2.159318],[-0.559377],[9.103453],[-0.728379],[-6.801703],[8.057637],[7.628429],[3.884938],[9.228622],[-7.046480],[5.563464],[-7.194937],[4.891895],[-3.097475],[5.543510],[-7.166967],[-7.659190],[9.849676],[-8.448883],[-8.761597],[-7.217805],[-6.482015],[-5.315901],[-4.259449],[-6.292429],[3.522808],[-2.017379],[-7.922620],[-0.227832],[8.944775],[1.510501],[0.048230],[-5.728458],[-2.636672],[-7.077223],[2.125011],[-8.252281],[-7.532244],[-7.687276],[-5.494260],[7.757833],[-7.017181],[1.174921],[1.999257],[-6.646854],[-8.482021],[0.084399],[4.835756],[-7.238336],[-2.836004],[-2.754902],[6.625324],[-4.339183],[3.960042],[1.404321],[3.985907],[9.288317],[-5.030124],[-4.192431],[2.381887],[-6.305925],[-7.186016],[2.758141],[1.108856],[0.656366],[-8.170382],[1.855988],[4.053752],[0.768738]], dtype = "float64")#candidate|228|(210, 1)|const|float64
call_227 = relay.TupleGetItem(func_69_call(relay.reshape(const_228.astype('float64'), [15, 14]), relay.reshape(const_228.astype('float64'), [15, 14]), ), 0)
call_229 = relay.TupleGetItem(func_73_call(relay.reshape(const_228.astype('float64'), [15, 14]), relay.reshape(const_228.astype('float64'), [15, 14]), ), 0)
func_170_call = mod.get_global_var('func_170')
func_174_call = mutated_mod.get_global_var('func_174')
var_235 = relay.var("var_235", dtype = "float32", shape = (48,))#candidate|235|(48,)|var|float32
var_236 = relay.var("var_236", dtype = "float64", shape = (2, 1))#candidate|236|(2, 1)|var|float64
call_234 = relay.TupleGetItem(func_170_call(relay.reshape(var_235.astype('float32'), [3, 16]), relay.reshape(var_236.astype('float64'), [2,]), ), 3)
call_237 = relay.TupleGetItem(func_174_call(relay.reshape(var_235.astype('float32'), [3, 16]), relay.reshape(var_236.astype('float64'), [2,]), ), 3)
bop_242 = relay.power(uop_200.astype('float64'), relay.reshape(uop_203.astype('float64'), relay.shape_of(uop_200))) # shape=(11, 11, 12)
output = relay.Tuple([uop_213,call_227,const_228,call_234,var_235,var_236,bop_242,])
output2 = relay.Tuple([uop_213,call_229,const_228,call_237,var_235,var_236,bop_242,])
func_249 = relay.Function([var_235,var_236,], output)
mod['func_249'] = func_249
mod = relay.transform.InferType()(mod)
mutated_mod['func_249'] = func_249
mutated_mod = relay.transform.InferType()(mutated_mod)
func_249_call = mutated_mod.get_global_var('func_249')
var_251 = relay.var("var_251", dtype = "float32", shape = (48,))#candidate|251|(48,)|var|float32
var_252 = relay.var("var_252", dtype = "float64", shape = (2, 1))#candidate|252|(2, 1)|var|float64
call_250 = func_249_call(var_251,var_252,)
output = call_250
func_253 = relay.Function([var_251,var_252,], output)
mutated_mod['func_253'] = func_253
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6_call = mod.get_global_var('func_6')
func_8_call = mutated_mod.get_global_var('func_8')
call_267 = func_6_call()
call_268 = func_6_call()
output = call_267
output2 = call_268
func_269 = relay.Function([], output)
mod['func_269'] = func_269
mod = relay.transform.InferType()(mod)
mutated_mod['func_269'] = func_269
mutated_mod = relay.transform.InferType()(mutated_mod)
func_269_call = mutated_mod.get_global_var('func_269')
call_270 = func_269_call()
output = call_270
func_271 = relay.Function([], output)
mutated_mod['func_271'] = func_271
mutated_mod = relay.transform.InferType()(mutated_mod)
func_269_call = mod.get_global_var('func_269')
func_271_call = mutated_mod.get_global_var('func_271')
call_272 = func_269_call()
call_273 = func_269_call()
output = relay.Tuple([call_272,])
output2 = relay.Tuple([call_273,])
func_276 = relay.Function([], output)
mod['func_276'] = func_276
mod = relay.transform.InferType()(mod)
mutated_mod['func_276'] = func_276
mutated_mod = relay.transform.InferType()(mutated_mod)
func_276_call = mutated_mod.get_global_var('func_276')
call_277 = func_276_call()
output = call_277
func_278 = relay.Function([], output)
mutated_mod['func_278'] = func_278
mutated_mod = relay.transform.InferType()(mutated_mod)
const_290 = relay.const(-2.486710, dtype = "float64")#candidate|290|()|const|float64
var_291 = relay.var("var_291", dtype = "float64", shape = (8, 12, 16))#candidate|291|(8, 12, 16)|var|float64
bop_292 = relay.mod(const_290.astype('float64'), var_291.astype('float64')) # shape=(8, 12, 16)
bop_296 = relay.divide(const_290.astype('float64'), var_291.astype('float64')) # shape=(8, 12, 16)
func_6_call = mod.get_global_var('func_6')
func_8_call = mutated_mod.get_global_var('func_8')
call_309 = func_6_call()
call_310 = func_6_call()
func_276_call = mod.get_global_var('func_276')
func_278_call = mutated_mod.get_global_var('func_278')
call_313 = relay.TupleGetItem(func_276_call(), 0)
call_314 = relay.TupleGetItem(func_278_call(), 0)
uop_316 = relay.rsqrt(call_313.astype('float64')) # shape=(7, 10, 12)
uop_318 = relay.rsqrt(call_314.astype('float64')) # shape=(7, 10, 12)
bop_325 = relay.bitwise_or(uop_316.astype('uint16'), relay.reshape(call_313.astype('uint16'), relay.shape_of(uop_316))) # shape=(7, 10, 12)
bop_328 = relay.bitwise_or(uop_318.astype('uint16'), relay.reshape(call_314.astype('uint16'), relay.shape_of(uop_318))) # shape=(7, 10, 12)
output = relay.Tuple([bop_292,bop_296,call_309,bop_325,])
output2 = relay.Tuple([bop_292,bop_296,call_310,bop_328,])
func_331 = relay.Function([var_291,], output)
mod['func_331'] = func_331
mod = relay.transform.InferType()(mod)
var_332 = relay.var("var_332", dtype = "float64", shape = (8, 12, 16))#candidate|332|(8, 12, 16)|var|float64
output = func_331(var_332)
func_333 = relay.Function([var_332], output)
mutated_mod['func_333'] = func_333
mutated_mod = relay.transform.InferType()(mutated_mod)
var_357 = relay.var("var_357", dtype = "int16", shape = (1, 11))#candidate|357|(1, 11)|var|int16
var_358 = relay.var("var_358", dtype = "int16", shape = (1, 11))#candidate|358|(1, 11)|var|int16
bop_359 = relay.left_shift(var_357.astype('int16'), relay.reshape(var_358.astype('int16'), relay.shape_of(var_357))) # shape=(1, 11)
uop_365 = relay.sqrt(var_358.astype('float32')) # shape=(1, 11)
bop_367 = relay.less(uop_365.astype('bool'), relay.reshape(bop_359.astype('bool'), relay.shape_of(uop_365))) # shape=(1, 11)
bop_370 = relay.less_equal(uop_365.astype('bool'), relay.reshape(bop_367.astype('bool'), relay.shape_of(uop_365))) # shape=(1, 11)
bop_380 = relay.floor_mod(uop_365.astype('float64'), relay.reshape(var_357.astype('float64'), relay.shape_of(uop_365))) # shape=(1, 11)
bop_387 = relay.maximum(uop_365.astype('int32'), relay.reshape(bop_359.astype('int32'), relay.shape_of(uop_365))) # shape=(1, 11)
bop_390 = relay.bitwise_xor(bop_367.astype('uint64'), relay.reshape(bop_387.astype('uint64'), relay.shape_of(bop_367))) # shape=(1, 11)
func_14_call = mod.get_global_var('func_14')
func_16_call = mutated_mod.get_global_var('func_16')
var_403 = relay.var("var_403", dtype = "float64", shape = (2,))#candidate|403|(2,)|var|float64
call_402 = func_14_call(relay.reshape(var_403.astype('float64'), [1, 2]))
call_404 = func_14_call(relay.reshape(var_403.astype('float64'), [1, 2]))
func_170_call = mod.get_global_var('func_170')
func_174_call = mutated_mod.get_global_var('func_174')
const_406 = relay.const([6.320224,-6.034444,7.092321,2.008044,7.643927,1.674927,5.952255,-1.395111,3.849330,-1.365778,4.575373,-8.624775,-1.879795,1.104703,-3.149537,-7.715060,-8.248786,-2.705256,-7.712420,-9.853021,0.313984,-0.553238,1.099208,-9.885358,5.193467,4.625674,8.253335,-0.401611,-0.203553,4.100950,-3.802486,-0.028688,4.553023,-1.514380,-2.216149,7.831900,-9.569494,0.622980,-4.667564,-8.599297,-4.795898,-1.625861,-8.393365,7.769249,8.356496,5.653003,3.092833,-6.390453], dtype = "float32")#candidate|406|(48,)|const|float32
call_405 = relay.TupleGetItem(func_170_call(relay.reshape(const_406.astype('float32'), [3, 16]), relay.reshape(call_402.astype('float64'), [2,]), ), 5)
call_407 = relay.TupleGetItem(func_174_call(relay.reshape(const_406.astype('float32'), [3, 16]), relay.reshape(call_402.astype('float64'), [2,]), ), 5)
output = relay.Tuple([bop_370,bop_380,bop_390,call_402,var_403,call_405,const_406,])
output2 = relay.Tuple([bop_370,bop_380,bop_390,call_404,var_403,call_407,const_406,])
func_409 = relay.Function([var_357,var_358,var_403,], output)
mod['func_409'] = func_409
mod = relay.transform.InferType()(mod)
mutated_mod['func_409'] = func_409
mutated_mod = relay.transform.InferType()(mutated_mod)
func_409_call = mutated_mod.get_global_var('func_409')
var_411 = relay.var("var_411", dtype = "int16", shape = (1, 11))#candidate|411|(1, 11)|var|int16
var_412 = relay.var("var_412", dtype = "int16", shape = (1, 11))#candidate|412|(1, 11)|var|int16
var_413 = relay.var("var_413", dtype = "float64", shape = (2,))#candidate|413|(2,)|var|float64
call_410 = func_409_call(var_411,var_412,var_413,)
output = call_410
func_414 = relay.Function([var_411,var_412,var_413,], output)
mutated_mod['func_414'] = func_414
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6_call = mod.get_global_var('func_6')
func_8_call = mutated_mod.get_global_var('func_8')
call_542 = func_6_call()
call_543 = func_6_call()
var_556 = relay.var("var_556", dtype = "float32", shape = (7, 10, 12))#candidate|556|(7, 10, 12)|var|float32
bop_557 = relay.right_shift(call_542.astype('uint8'), relay.reshape(var_556.astype('uint8'), relay.shape_of(call_542))) # shape=(7, 10, 12)
bop_560 = relay.right_shift(call_543.astype('uint8'), relay.reshape(var_556.astype('uint8'), relay.shape_of(call_543))) # shape=(7, 10, 12)
output = bop_557
output2 = bop_560
func_561 = relay.Function([var_556,], output)
mod['func_561'] = func_561
mod = relay.transform.InferType()(mod)
var_562 = relay.var("var_562", dtype = "float32", shape = (7, 10, 12))#candidate|562|(7, 10, 12)|var|float32
output = func_561(var_562)
func_563 = relay.Function([var_562], output)
mutated_mod['func_563'] = func_563
mutated_mod = relay.transform.InferType()(mutated_mod)
func_269_call = mod.get_global_var('func_269')
func_271_call = mutated_mod.get_global_var('func_271')
call_565 = func_269_call()
call_566 = func_269_call()
uop_569 = relay.atan(call_565.astype('float64')) # shape=(7, 10, 12)
uop_571 = relay.atan(call_566.astype('float64')) # shape=(7, 10, 12)
bop_575 = relay.floor_mod(uop_569.astype('float64'), relay.reshape(call_565.astype('float64'), relay.shape_of(uop_569))) # shape=(7, 10, 12)
bop_578 = relay.floor_mod(uop_571.astype('float64'), relay.reshape(call_566.astype('float64'), relay.shape_of(uop_571))) # shape=(7, 10, 12)
uop_579 = relay.log2(uop_569.astype('float32')) # shape=(7, 10, 12)
uop_581 = relay.log2(uop_571.astype('float32')) # shape=(7, 10, 12)
bop_585 = relay.greater_equal(uop_579.astype('bool'), relay.reshape(call_565.astype('bool'), relay.shape_of(uop_579))) # shape=(7, 10, 12)
bop_588 = relay.greater_equal(uop_581.astype('bool'), relay.reshape(call_566.astype('bool'), relay.shape_of(uop_581))) # shape=(7, 10, 12)
uop_589 = relay.tan(bop_585.astype('float64')) # shape=(7, 10, 12)
uop_591 = relay.tan(bop_588.astype('float64')) # shape=(7, 10, 12)
output = relay.Tuple([bop_575,uop_589,])
output2 = relay.Tuple([bop_578,uop_591,])
func_597 = relay.Function([], output)
mod['func_597'] = func_597
mod = relay.transform.InferType()(mod)
mutated_mod['func_597'] = func_597
mutated_mod = relay.transform.InferType()(mutated_mod)
func_597_call = mutated_mod.get_global_var('func_597')
call_598 = func_597_call()
output = call_598
func_599 = relay.Function([], output)
mutated_mod['func_599'] = func_599
mutated_mod = relay.transform.InferType()(mutated_mod)
func_276_call = mod.get_global_var('func_276')
func_278_call = mutated_mod.get_global_var('func_278')
call_675 = relay.TupleGetItem(func_276_call(), 0)
call_676 = relay.TupleGetItem(func_278_call(), 0)
func_269_call = mod.get_global_var('func_269')
func_271_call = mutated_mod.get_global_var('func_271')
call_680 = func_269_call()
call_681 = func_269_call()
var_683 = relay.var("var_683", dtype = "float32", shape = (7, 10, 12))#candidate|683|(7, 10, 12)|var|float32
bop_684 = relay.bitwise_and(call_680.astype('int16'), relay.reshape(var_683.astype('int16'), relay.shape_of(call_680))) # shape=(7, 10, 12)
bop_687 = relay.bitwise_and(call_681.astype('int16'), relay.reshape(var_683.astype('int16'), relay.shape_of(call_681))) # shape=(7, 10, 12)
output = relay.Tuple([call_675,bop_684,])
output2 = relay.Tuple([call_676,bop_687,])
func_688 = relay.Function([var_683,], output)
mod['func_688'] = func_688
mod = relay.transform.InferType()(mod)
mutated_mod['func_688'] = func_688
mutated_mod = relay.transform.InferType()(mutated_mod)
var_689 = relay.var("var_689", dtype = "float32", shape = (7, 10, 12))#candidate|689|(7, 10, 12)|var|float32
func_688_call = mutated_mod.get_global_var('func_688')
call_690 = func_688_call(var_689)
output = call_690
func_691 = relay.Function([var_689], output)
mutated_mod['func_691'] = func_691
mutated_mod = relay.transform.InferType()(mutated_mod)
var_717 = relay.var("var_717", dtype = "float64", shape = (1, 5, 4))#candidate|717|(1, 5, 4)|var|float64
uop_718 = relay.acos(var_717.astype('float64')) # shape=(1, 5, 4)
func_69_call = mod.get_global_var('func_69')
func_73_call = mutated_mod.get_global_var('func_73')
var_724 = relay.var("var_724", dtype = "float64", shape = (5, 42))#candidate|724|(5, 42)|var|float64
call_723 = relay.TupleGetItem(func_69_call(relay.reshape(var_724.astype('float64'), [15, 14]), relay.reshape(var_724.astype('float64'), [15, 14]), ), 1)
call_725 = relay.TupleGetItem(func_73_call(relay.reshape(var_724.astype('float64'), [15, 14]), relay.reshape(var_724.astype('float64'), [15, 14]), ), 1)
func_249_call = mod.get_global_var('func_249')
func_253_call = mutated_mod.get_global_var('func_253')
const_735 = relay.const([-2.001438,-3.652289,5.503244,7.639989,7.704981,-7.435002,8.275031,4.633918,-9.948053,-2.646922,-4.518444,7.620142,-7.192377,4.101582,8.087320,2.002510,-8.490837,6.835272,-5.578938,-6.467380,3.511218,-7.221376,-1.291892,-6.554467,-1.708351,-8.761506,-8.684910,-2.691321,4.397709,-2.551521,-7.963109,-7.005182,9.388623,-6.035241,5.406840,4.818685,4.192336,8.755950,-5.098615,-1.968069,-9.623942,2.199563,-0.650730,5.876900,0.085925,8.970323,-4.388473,4.287785], dtype = "float32")#candidate|735|(48,)|const|float32
const_736 = relay.const([-1.393393,6.663863], dtype = "float64")#candidate|736|(2,)|const|float64
call_734 = relay.TupleGetItem(func_249_call(relay.reshape(const_735.astype('float32'), [48,]), relay.reshape(const_736.astype('float64'), [2, 1]), ), 2)
call_737 = relay.TupleGetItem(func_253_call(relay.reshape(const_735.astype('float32'), [48,]), relay.reshape(const_736.astype('float64'), [2, 1]), ), 2)
func_597_call = mod.get_global_var('func_597')
func_599_call = mutated_mod.get_global_var('func_599')
call_744 = relay.TupleGetItem(func_597_call(), 1)
call_745 = relay.TupleGetItem(func_599_call(), 1)
bop_746 = relay.mod(var_724.astype('float32'), relay.reshape(call_734.astype('float32'), relay.shape_of(var_724))) # shape=(5, 42)
bop_749 = relay.mod(var_724.astype('float32'), relay.reshape(call_737.astype('float32'), relay.shape_of(var_724))) # shape=(5, 42)
func_249_call = mod.get_global_var('func_249')
func_253_call = mutated_mod.get_global_var('func_253')
call_753 = relay.TupleGetItem(func_249_call(relay.reshape(const_735.astype('float32'), [48,]), relay.reshape(const_736.astype('float64'), [2, 1]), ), 3)
call_754 = relay.TupleGetItem(func_253_call(relay.reshape(const_735.astype('float32'), [48,]), relay.reshape(const_736.astype('float64'), [2, 1]), ), 3)
uop_763 = relay.cosh(uop_718.astype('float32')) # shape=(1, 5, 4)
output = relay.Tuple([call_723,const_735,const_736,call_744,bop_746,call_753,uop_763,])
output2 = relay.Tuple([call_725,const_735,const_736,call_745,bop_749,call_754,uop_763,])
func_779 = relay.Function([var_717,var_724,], output)
mod['func_779'] = func_779
mod = relay.transform.InferType()(mod)
var_780 = relay.var("var_780", dtype = "float64", shape = (1, 5, 4))#candidate|780|(1, 5, 4)|var|float64
var_781 = relay.var("var_781", dtype = "float64", shape = (5, 42))#candidate|781|(5, 42)|var|float64
output = func_779(var_780,var_781,)
func_782 = relay.Function([var_780,var_781,], output)
mutated_mod['func_782'] = func_782
mutated_mod = relay.transform.InferType()(mutated_mod)
func_269_call = mod.get_global_var('func_269')
func_271_call = mutated_mod.get_global_var('func_271')
call_786 = func_269_call()
call_787 = func_269_call()
const_794 = relay.const([[[7.304047,-8.266587,-0.843577,9.582891,-6.471461,0.635975,9.170201,-6.618812,-4.384211,-5.164152,-7.165801,-1.107635],[3.036001,2.254612,7.897164,-2.442057,5.721375,9.426422,1.915641,2.915726,2.213566,-0.539750,-8.568960,1.034240],[2.111806,1.767636,-9.988680,2.751286,-4.932986,-3.502275,-5.573359,-6.850208,0.962623,0.725563,-2.930551,-6.655458],[6.805458,-3.494392,4.960288,-7.494445,3.757351,9.750933,8.515102,-8.106857,4.427188,-9.163414,1.962951,4.357206],[-4.747183,-3.878192,7.051479,-5.746737,7.383710,-2.241575,-7.431803,8.821208,-9.300286,4.683649,-1.771852,2.234020],[-0.113258,1.360035,-4.439617,3.357989,2.394375,3.369886,-7.515767,2.593362,7.757082,1.497173,-7.085314,9.660934],[2.247918,-3.162165,-8.701826,2.403708,0.302954,6.475856,0.399412,-5.871213,-0.257927,6.930318,4.967129,-3.633024],[4.922489,-2.692541,-2.670452,-4.831751,-6.602000,2.731795,1.026078,-0.685111,8.449357,-1.317886,-2.288870,7.227505],[8.039363,9.540459,1.333603,4.558918,3.337296,-7.408669,7.337372,8.643367,-7.400115,9.597162,7.161099,-5.846320],[9.913254,2.383308,-3.597604,-4.967758,-6.315777,-1.558495,6.058107,-6.251116,-4.573180,-5.808317,4.095208,5.852327]],[[8.067108,3.736089,-6.252756,4.152228,9.300410,4.889962,-0.892918,7.816461,-0.459833,-7.336518,4.601824,-4.357769],[-3.201613,7.461237,8.179464,7.547479,9.569117,0.016257,-1.787489,7.227578,-3.191359,8.505501,-3.166094,0.095916],[2.412129,-4.380026,-4.199073,-8.505029,-1.984032,-7.471768,-1.951036,-8.852861,0.653157,-2.643389,-0.701260,3.440650],[-1.849598,3.189338,8.467123,2.554016,8.414249,6.637828,5.591295,-8.161752,1.796479,8.547059,-1.311451,-6.780635],[7.819828,7.972415,-3.973833,-4.367983,-8.353831,-8.538660,-3.578459,-9.139640,1.020226,2.596866,5.503169,-6.185131],[6.542974,-6.902956,7.094137,1.488791,1.158181,4.020118,4.205113,4.975293,5.616158,6.977852,1.711595,2.121954],[9.763452,7.261377,-5.134092,5.378034,0.839241,5.098355,-2.805173,-7.690808,-3.732715,-4.863428,3.234694,7.772554],[7.933982,7.001636,-5.994251,4.685985,7.418736,-0.969610,4.125795,4.393454,5.488940,4.025821,6.119493,-0.302472],[5.523178,0.457058,-0.018272,-5.765572,7.941354,-0.321755,-3.156567,2.467197,4.529412,-5.484239,-0.573487,3.306695],[-1.856602,2.714768,-6.336494,8.225892,-3.482180,9.209375,4.999990,-7.540201,4.682113,-9.886659,6.110693,2.172336]],[[4.935471,5.579034,-4.995775,-4.024785,2.266632,-9.385540,7.437849,-1.705402,9.383549,-4.543837,2.700923,4.955438],[1.088101,-8.569032,-1.846137,7.997879,2.437792,9.441989,-6.925279,4.153930,1.583467,7.431655,9.311741,6.523198],[2.947590,-1.885875,-7.628127,8.689855,2.376193,-2.747272,-3.072926,-0.336573,-5.789593,5.299058,0.433724,2.947984],[-2.953234,9.531605,-6.822184,-8.047361,-6.320816,-6.712355,8.447813,-3.647957,7.779679,-8.926330,9.716583,-0.869646],[-4.575082,-9.095796,-9.746720,-3.688855,-4.002064,-8.477102,-2.592771,0.094903,7.627731,-4.006251,5.943291,-6.760541],[0.572917,-6.164198,6.747729,2.398138,-9.147112,9.246924,2.636975,-8.545078,0.636013,-8.110994,1.033687,-4.525237],[3.738325,3.042751,4.415917,6.640241,-4.913528,9.099085,-8.046672,7.152674,-6.756823,9.295974,1.043774,-0.631349],[0.167497,-2.954499,-1.856078,5.287156,1.189084,-7.576013,-0.890706,-5.053719,-2.924633,-8.029098,-4.345802,9.326842],[-9.897188,-7.773895,-9.677027,-9.967206,0.366537,0.164073,6.162625,6.336411,9.393170,-6.625716,8.896019,9.032232],[-7.101563,1.468200,2.848456,-2.209279,7.263330,3.355338,0.071335,3.519098,1.804346,-1.062259,-9.448327,3.821929]],[[4.021572,3.138343,-9.145107,-5.818678,3.810005,2.335009,5.649139,-8.681605,-0.505034,-8.420983,-2.819746,-5.235178],[-0.027786,-4.866401,-3.122283,4.573091,1.867470,5.826266,8.713971,1.357265,8.037446,2.575545,-9.153444,5.998892],[-2.699174,-2.384291,-1.311674,-8.436427,7.175950,1.451656,-6.362871,1.480128,7.990498,-2.011403,2.240385,6.957936],[-8.299907,1.631274,7.962698,-8.748925,-3.609133,-6.773156,1.933070,-3.488246,4.447776,4.343729,-5.560815,-4.388277],[0.318845,-0.834233,-7.410041,9.706436,-2.594605,9.910637,3.342142,5.978008,-9.876235,-2.556837,-3.981556,-3.721572],[-2.707456,-4.742181,-8.007778,9.150631,7.000220,-7.467379,5.568746,-9.769332,-9.835350,6.257045,2.756656,-2.394528],[-2.543405,-3.003705,0.678555,7.377447,-5.986689,-0.916147,-4.426609,-9.274952,7.637387,6.919235,-4.673071,-4.294544],[5.743360,-5.811052,8.448388,-0.724332,-6.009416,-6.532779,9.564861,0.766862,4.937806,-9.858356,2.366074,9.566571],[-3.376183,-4.127942,0.743611,6.830630,-5.101708,7.001747,-2.052745,-1.662721,-4.979849,-0.498972,-8.466192,6.491787],[0.027617,5.639467,-1.381729,7.112127,7.804763,3.400769,0.355714,3.641126,6.002312,6.330464,-4.283371,-1.318422]],[[-1.978349,-7.955689,-4.088171,0.298804,7.280554,0.829471,2.611903,-1.283939,-1.272649,9.677254,1.429289,1.238224],[-0.901868,-8.422825,-9.179703,6.877860,-7.744032,7.958122,-7.976047,-8.317634,0.182341,9.044945,0.657139,2.564549],[-6.948075,8.633054,5.381571,-3.710777,9.274940,-8.132177,8.382841,-9.683645,2.673580,-3.090806,-5.856633,-1.845069],[-0.389414,5.972809,7.284966,0.569959,9.141014,3.610904,-8.897683,-6.358179,7.439233,0.062160,1.882567,-7.500414],[-5.348685,-9.073070,5.887849,-2.286408,-6.207878,4.133274,0.937568,7.694277,7.079844,2.415598,-5.364034,2.995933],[9.083483,-2.746969,7.216536,7.835688,-2.750944,-5.000658,-4.644934,5.696305,-7.770548,1.178497,-8.677212,2.587262],[9.123731,4.821183,-1.690706,9.413911,0.519563,-9.771673,-6.943498,-6.442982,0.524511,3.960446,-4.897185,5.846038],[3.986469,-6.841994,4.607373,-0.975645,-3.858706,7.140252,-7.406448,-4.159735,-4.369092,-3.781847,2.925270,8.016267],[-3.138225,-8.604773,-0.427615,0.104174,-9.730169,5.093950,8.037048,5.231825,0.052846,7.414671,4.863424,9.548853],[-6.878718,4.749499,0.625191,1.532171,0.077964,-9.503886,7.512322,7.072418,5.973483,5.637365,-4.924036,-8.029072]],[[2.480454,-9.951356,-1.174076,0.102093,9.965352,-1.655167,3.054659,-5.529784,8.542202,-8.119953,1.005574,5.584150],[-3.979577,3.283486,3.480536,-1.025377,2.383756,9.865910,4.133503,1.057606,8.832365,1.500882,9.711492,0.208124],[-5.346580,5.510272,-3.240296,-8.561232,5.139231,7.371891,9.766072,-8.290352,-6.876672,-6.598486,-1.060392,8.160576],[2.327969,-8.022338,-6.082857,-4.088390,-9.560452,-3.508289,-8.890303,7.017791,2.980572,-4.025679,3.639554,6.687362],[-9.276014,0.692505,0.151859,9.223456,0.530155,2.658745,8.744634,-0.291062,0.558949,-7.203881,1.487748,-1.637473],[6.509170,2.180984,2.037739,-1.142610,8.769588,-5.574470,-1.031214,2.672434,4.173353,-8.845209,-1.322081,-2.107768],[0.876461,2.531235,5.165173,4.992454,-2.085196,6.549790,-2.936396,-2.514143,2.538264,-2.654685,-5.688537,1.640449],[5.667090,-8.616968,-7.282321,7.148045,-8.934176,-0.723906,-1.831819,-6.278946,-5.035485,-3.679169,1.563912,-3.986306],[9.681588,0.490584,7.709319,-0.854805,-0.836149,-3.612058,9.426511,-3.085576,0.231026,9.668347,4.572652,-5.996366],[9.593050,-4.834807,6.293864,9.850643,1.385093,-9.039107,8.285789,2.643418,-2.056010,-8.472730,-4.884358,1.875547]],[[4.585513,5.895491,-6.041205,5.527150,4.643680,-4.135795,-4.829491,9.391460,-0.601757,-3.762707,-9.277898,2.535969],[-2.931835,9.485188,8.330628,-1.399652,0.450509,2.594209,7.942027,-9.742297,-8.586944,-0.409965,-9.502754,-7.272027],[5.792848,4.773896,6.103508,-4.057788,-5.185506,-1.843666,-1.810060,2.719867,-8.761281,0.230801,6.654478,-0.363942],[3.634123,-6.677964,4.647526,-4.954080,-7.949813,-8.879230,1.557467,9.585829,-3.720970,5.004792,-4.410041,7.948336],[3.109758,-9.531073,-7.792541,-7.774201,6.114652,2.110617,0.049992,-0.221834,8.089353,9.560603,8.609991,9.276622],[-7.474729,1.247297,0.935373,-2.117255,4.522861,2.353778,5.508362,0.810808,-9.178408,7.672125,3.463276,1.022549],[5.413728,0.949496,6.078843,-4.550807,7.090185,-3.114521,-9.954278,3.963479,-4.918727,9.177788,-2.163758,-8.574246],[-2.810058,-6.184811,4.284459,-3.243976,7.868005,-3.286368,-4.406450,-9.350567,-1.129037,-4.781167,0.588683,-0.537708],[-7.842665,-6.291119,7.860478,-1.238341,-2.329491,8.268656,-5.109688,-3.023924,1.540185,5.652653,-5.303146,6.816231],[-5.239832,2.632919,2.668476,6.996902,-3.676938,-3.381414,3.988694,8.315682,6.548679,6.152799,-5.120487,8.192632]]], dtype = "float32")#candidate|794|(7, 10, 12)|const|float32
bop_795 = relay.greater(call_786.astype('bool'), relay.reshape(const_794.astype('bool'), relay.shape_of(call_786))) # shape=(7, 10, 12)
bop_798 = relay.greater(call_787.astype('bool'), relay.reshape(const_794.astype('bool'), relay.shape_of(call_787))) # shape=(7, 10, 12)
bop_799 = relay.multiply(bop_795.astype('int8'), relay.reshape(call_786.astype('int8'), relay.shape_of(bop_795))) # shape=(7, 10, 12)
bop_802 = relay.multiply(bop_798.astype('int8'), relay.reshape(call_787.astype('int8'), relay.shape_of(bop_798))) # shape=(7, 10, 12)
output = bop_799
output2 = bop_802
func_807 = relay.Function([], output)
mod['func_807'] = func_807
mod = relay.transform.InferType()(mod)
mutated_mod['func_807'] = func_807
mutated_mod = relay.transform.InferType()(mutated_mod)
func_807_call = mutated_mod.get_global_var('func_807')
call_808 = func_807_call()
output = call_808
func_809 = relay.Function([], output)
mutated_mod['func_809'] = func_809
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6_call = mod.get_global_var('func_6')
func_8_call = mutated_mod.get_global_var('func_8')
call_855 = func_6_call()
call_856 = func_6_call()
var_857 = relay.var("var_857", dtype = "float32", shape = (7, 10, 12))#candidate|857|(7, 10, 12)|var|float32
bop_858 = relay.maximum(call_855.astype('uint32'), relay.reshape(var_857.astype('uint32'), relay.shape_of(call_855))) # shape=(7, 10, 12)
bop_861 = relay.maximum(call_856.astype('uint32'), relay.reshape(var_857.astype('uint32'), relay.shape_of(call_856))) # shape=(7, 10, 12)
output = bop_858
output2 = bop_861
func_869 = relay.Function([var_857,], output)
mod['func_869'] = func_869
mod = relay.transform.InferType()(mod)
mutated_mod['func_869'] = func_869
mutated_mod = relay.transform.InferType()(mutated_mod)
var_870 = relay.var("var_870", dtype = "float32", shape = (7, 10, 12))#candidate|870|(7, 10, 12)|var|float32
func_869_call = mutated_mod.get_global_var('func_869')
call_871 = func_869_call(var_870)
output = call_871
func_872 = relay.Function([var_870], output)
mutated_mod['func_872'] = func_872
mutated_mod = relay.transform.InferType()(mutated_mod)
var_891 = relay.var("var_891", dtype = "float64", shape = (8, 11, 13))#candidate|891|(8, 11, 13)|var|float64
const_892 = relay.const([[[6.402616,-9.640762,4.454551,0.924995,-6.266514,6.507761,-2.149662,-5.545409,4.997452,-1.187179,-8.527955,-3.792152,5.269501],[7.992376,-2.530852,-5.960552,8.747991,-7.199050,-8.989581,7.819668,-1.139184,6.941613,-3.986888,-2.425662,-8.751655,-0.611472],[8.586417,-7.862932,-4.847339,-9.563992,-8.821345,0.787454,1.194970,-1.363030,8.251051,-0.973552,0.440467,-2.597251,-6.064941],[5.560924,-2.131355,7.407865,-8.852171,-2.318405,1.148691,0.530913,6.119493,0.064103,-5.208869,-5.421653,-5.454847,8.815374],[7.236395,0.939970,9.478367,-9.884961,-0.351251,2.081130,1.773244,-7.107297,-8.947852,-8.332961,-5.236103,5.710321,-3.887635],[-0.187404,-4.937609,-8.097400,-3.947133,4.651240,-0.990771,7.046514,-5.331674,-9.115265,-0.784271,-1.265405,-3.411911,6.949245],[3.487033,-9.442825,-0.094740,-2.802672,-4.783094,-1.796244,-0.382450,-0.679779,3.498238,-4.179184,4.123070,8.338058,7.807898],[-0.340524,2.200740,-5.776751,-2.845769,-7.388656,0.225860,-1.938469,6.914541,-2.136906,-6.500585,-7.540482,-2.396698,7.915844],[5.344806,-7.326156,5.180545,0.845499,-6.616008,4.819310,-8.907006,7.862572,-3.478604,8.407736,6.660618,0.971583,5.534007],[9.910598,-1.066945,0.750786,-0.254444,-3.336649,-3.458306,-7.523566,9.520952,-1.375709,6.663733,-8.474980,3.018645,9.570283],[2.836473,-8.469663,-4.823496,2.221735,7.619211,2.811130,-4.800775,7.150460,7.717188,9.153293,0.411128,-4.729425,0.193473]],[[-9.334078,-7.315630,3.028794,-8.017202,-5.994768,-9.937043,-2.876400,-8.912497,9.346112,4.716655,-7.746491,-5.268183,-9.007116],[9.251191,-1.619773,1.759395,5.707493,-7.988361,9.387480,-5.521109,4.979751,4.275028,-7.801881,9.596929,-2.934795,-7.128853],[3.298765,-4.981748,-1.556968,-2.917911,9.311310,9.366067,-3.281582,9.618233,2.217256,4.548133,-1.685197,-0.743461,6.825287],[-5.430898,-5.494582,-0.697465,6.284240,4.241208,-5.450196,-9.443608,8.223763,-6.788183,1.541074,-2.549138,5.529855,-3.948819],[-8.482045,8.344587,-5.187416,-0.328827,-0.893425,0.957690,1.877111,-2.369888,-9.737702,5.740236,-9.795207,5.212839,-6.382138],[-2.624494,-6.175513,1.202804,9.491884,-8.785780,6.465368,5.826957,7.436358,2.298215,7.174908,-3.749683,6.095746,-6.128392],[9.631060,4.161590,6.919860,0.142665,-2.441579,-0.098222,8.074655,-3.355781,1.251905,2.468178,-2.915652,-3.092269,-9.281582],[5.941136,-5.106841,5.704810,-2.926245,4.268187,6.241093,1.575732,-1.004625,2.645491,-3.683366,-8.432469,2.612492,-3.382461],[-2.963054,-3.797961,0.731381,-7.378458,8.542630,2.076189,0.933592,1.310535,5.805214,-1.371810,-6.348081,-1.576002,0.449178],[7.495475,-6.955497,-3.414226,-2.064557,9.993734,4.943942,3.391943,7.717217,-9.056506,-4.940524,1.227504,-2.734372,8.184836],[-5.826474,4.654376,-6.725544,-3.728877,-2.432096,6.470168,0.923900,-6.429011,3.182604,3.558351,-1.545536,3.143094,2.061313]],[[-7.478563,-3.734569,2.741316,8.770061,9.570194,7.102759,-7.910463,-3.600414,-4.227416,-3.057585,-2.348551,-3.863030,6.912965],[9.789776,3.138394,1.764762,-0.337272,7.691878,-4.192014,-5.143752,-4.418116,-7.299520,5.121106,8.252762,-8.743604,-1.242953],[6.395252,4.855884,6.590475,9.148602,2.289085,4.806014,-3.181835,8.772317,8.744516,-6.801463,6.958338,3.715704,-7.834142],[-2.087867,-8.439647,2.419328,-0.910949,-1.914909,-9.751382,-2.509239,0.904306,5.689578,6.890595,-2.172491,6.962242,-0.817526],[4.169482,6.673730,-7.020588,9.072476,2.445640,-8.249320,3.046721,9.825146,-7.129036,4.800549,0.994789,-6.759190,-2.598131],[-1.631385,7.673322,-8.227093,-5.466644,-3.922844,-2.424704,4.944756,7.033913,7.334662,8.547207,-9.944903,-3.265463,6.970553],[-4.381817,-3.551645,-6.510496,-9.084614,-8.490276,2.393808,0.982072,8.237221,6.695382,5.538689,6.793233,1.691138,4.838075],[-3.687159,2.897002,-7.217752,1.914892,-1.273198,9.317464,-0.516211,-5.159546,-7.152979,1.547394,3.848331,-2.698744,7.365227],[1.391047,-5.771455,-9.674938,-6.819104,-1.354927,-2.734167,-0.817539,-4.341656,0.109243,8.500615,-8.070748,5.696291,7.637629],[-9.464443,9.034449,7.697619,-4.392370,-5.021968,2.860439,-0.236090,1.774019,4.715498,-4.748472,2.839342,-7.798205,0.534927],[-6.334169,9.011119,4.293567,1.108654,9.211045,3.061039,5.301729,2.575087,-6.747820,-8.382733,-5.840376,6.554060,2.369589]],[[-6.208581,6.608594,-0.758549,1.682802,-8.860106,9.587221,4.133010,-6.738997,-9.810065,-8.509237,-7.810292,-0.523921,-5.403656],[0.119241,0.977285,-6.938227,-3.640473,1.329974,5.032824,-5.902784,0.510772,-2.925294,0.292820,8.058655,-0.900418,2.897416],[-2.303961,0.465664,-6.696920,2.919487,-9.012629,7.837072,2.121494,0.370581,4.010773,-3.940004,-8.331917,-7.295645,-2.791668],[7.989762,4.764504,8.222868,-3.999398,5.865141,5.578937,-4.079825,-4.377940,8.866620,-2.130195,1.158248,-9.622533,-1.018605],[-4.832187,-2.234740,-3.190084,7.724604,-8.191040,-8.384903,5.298248,9.796541,-8.490767,-7.456535,-1.531211,-0.953860,9.547057],[-0.142058,-0.171695,-1.878626,2.528179,3.049347,-1.120248,-7.907678,0.528374,-6.332092,-5.793034,-4.434058,7.664836,0.946065],[-5.579217,5.116532,5.381446,5.609945,-5.446624,-3.552598,7.066626,-7.383249,-4.058587,-6.462967,0.934167,7.511548,7.135212],[-7.008912,-9.476950,-1.717245,5.308684,-9.789731,4.220587,-4.512966,5.035953,-7.623645,-9.843070,5.324399,0.058088,3.331012],[-6.410967,-4.694408,-9.450816,-7.140183,-0.170296,6.728635,-8.535189,1.652793,7.955757,-6.787694,-5.583748,3.958251,1.516612],[-5.202099,8.010662,6.385882,-6.954561,2.545981,-5.900602,4.926892,-5.683838,-2.925712,8.341633,-3.495480,-4.480950,4.519165],[5.689584,1.207512,4.777089,6.386791,7.265431,-7.607971,-8.967531,-1.649126,-0.754483,-3.736249,-2.062210,8.212698,-7.529548]],[[3.483299,-8.917162,2.374543,2.839947,-0.665786,-3.937173,1.262278,-1.552571,1.421159,8.042512,1.679842,-4.681490,-3.713359],[1.847047,-6.985525,-9.293139,-5.924383,-0.349688,-2.147141,-6.772968,2.555888,5.488164,8.905711,-4.908908,-0.226119,-5.841962],[1.046867,2.953172,-4.570169,-8.513212,-0.350711,-6.495650,4.653957,7.092615,-5.316949,9.948406,-5.158593,0.511452,-0.567155],[2.037444,6.284014,1.632225,-0.085271,8.399561,4.806579,8.884301,-2.209457,-1.485433,-4.188052,7.098589,6.756945,-2.276763],[0.291138,2.770121,-4.263849,4.737601,4.188434,-0.239599,1.774802,-0.889847,5.178068,1.936110,7.760856,-2.411144,4.197593],[-9.696790,-8.563553,-5.507072,-9.070744,3.765640,-8.071708,1.387145,7.005913,7.898310,8.547577,0.052373,5.673617,-6.990492],[-7.511971,9.292102,-7.485344,5.883082,-8.277278,7.502163,0.494176,0.010377,8.417788,0.108465,3.550210,1.307991,-9.665691],[3.902437,9.237251,-3.886288,-6.324154,8.850168,-0.834449,7.694303,3.688517,5.628594,-4.742901,-3.899431,9.870327,-5.024444],[7.844476,0.051638,6.779265,2.495398,-4.200339,-6.033369,1.540339,-9.093609,-4.884041,9.199591,-4.980957,6.477815,2.683198],[-7.067778,7.026599,0.850411,-6.487371,0.200399,-8.300411,1.823755,-2.409311,4.256706,3.903321,8.999235,-8.507230,0.179472],[-4.441554,5.351824,8.730099,-2.917062,-6.379778,4.591883,9.930027,-4.846841,3.859178,-4.215257,-2.928179,-1.707068,1.008334]],[[7.684499,-8.082141,-1.349656,9.521872,-5.642806,4.380278,-9.904134,9.240202,6.124051,-9.136265,-5.009188,9.650518,9.620327],[-3.124523,2.311918,-9.596330,8.551092,-6.524888,3.845935,3.220295,-6.707841,-3.079564,7.355612,-8.994772,-4.664945,-8.032102],[-9.426567,-3.535386,6.950440,5.598312,-4.191560,-7.786071,-9.654601,-9.039312,-3.210660,-8.515173,-4.456468,1.581297,-1.088949],[-8.655853,-9.955846,8.596574,-2.893847,2.571295,-4.104816,6.858809,-5.084509,9.163000,-5.319047,-4.631893,7.771741,2.144133],[1.152082,2.144034,-4.685765,7.788799,6.914898,3.018737,-3.169174,2.635643,-1.825541,7.237257,-1.906193,4.469291,-3.997235],[-5.558415,-4.189726,-2.896958,-6.762561,9.727840,0.986684,-2.779509,0.041406,4.032894,-6.099588,9.736295,1.820039,3.605981],[7.759159,-9.413780,-4.403146,1.559009,-3.754827,-1.047696,-7.288885,0.064391,-9.142848,-8.460549,7.103763,5.450200,-7.060208],[-6.625889,-7.405826,-3.960081,3.756680,6.135928,3.040607,-8.841619,-5.362100,-1.019718,3.420939,8.752929,6.838587,6.925534],[1.904020,-4.582487,7.767911,0.210768,-6.659426,8.750401,-1.627528,0.353774,-7.189272,7.816416,8.641820,6.391568,3.257412],[-0.705487,-3.034102,9.075182,6.784521,9.698096,7.658630,-2.664544,-6.253784,7.647200,-8.472156,-6.953007,-3.467760,-8.920439],[-3.270477,-2.265836,-1.342862,-6.254319,2.976270,-2.753029,-9.393519,4.066652,-5.561784,0.725208,-0.006551,2.138899,-4.366415]],[[1.461078,8.713736,-1.704472,3.916084,3.696957,4.713422,-6.009523,2.354803,2.780558,-7.702751,4.223628,-0.126443,-4.424614],[8.130149,-8.535744,1.744501,4.135644,4.893119,-3.331608,-0.935740,-3.004937,-6.634753,-4.933845,7.915841,3.259785,8.783851],[-9.479745,9.257584,-5.873951,-5.471729,-9.366558,-9.326860,-0.445413,4.444309,-5.641169,-1.515062,-4.959109,7.800042,-0.082320],[-7.520344,-2.798703,7.984171,-8.856061,4.696285,0.590664,7.274639,-9.936764,4.628947,4.740299,7.462799,8.066572,-0.106015],[-6.479769,-3.497268,-0.166741,-1.380871,-6.597951,8.472362,2.134257,8.129405,-9.032635,-4.622150,-7.603655,7.902194,9.079023],[2.410221,-2.079038,-6.330924,6.865059,4.961203,6.301766,5.477625,5.778294,-8.088545,5.012447,-5.696225,-4.116796,-3.276815],[-4.897802,-1.573921,1.700996,-9.502655,2.315379,-4.084144,-9.732282,-4.318463,-3.015166,7.336713,-0.415663,-8.651340,-3.256188],[8.448016,0.583368,5.514557,7.623629,3.819168,-9.817721,-8.265156,-5.715359,-2.772047,1.841148,6.080048,-7.969726,0.306470],[-9.794460,0.296231,-3.877116,-7.721875,-0.774062,-0.635161,7.277975,-5.370878,0.327348,-0.090136,-0.662752,-4.927004,6.096906],[1.194200,0.340968,5.461256,-9.292203,-2.263482,0.029315,-6.722619,-7.004736,-5.257148,0.198734,2.415507,1.448615,-7.588345],[2.019589,4.694072,-1.712532,-6.563039,-2.745381,-6.259146,-5.087563,3.472143,2.812105,-4.753748,-6.039939,9.956623,2.258827]],[[6.749325,-3.320594,-3.654423,-0.846597,7.125065,-9.468636,-2.800313,9.999884,4.383097,8.986898,7.802207,4.875509,8.048412],[-3.616508,2.688144,1.401278,4.674807,-5.073100,8.842359,7.809287,-2.841559,3.955664,-5.016969,1.791775,-0.553043,9.284147],[2.934554,6.448727,-6.062281,7.000280,-9.651304,-3.743226,4.480800,4.092737,-2.120794,1.135104,3.642367,5.811852,2.836883],[8.619039,-9.963403,3.280115,3.325427,-0.755861,9.365911,4.416417,-7.667725,9.075170,7.012333,7.054636,9.353677,-4.450188],[9.909769,7.164881,-1.818371,-9.358327,0.917554,-1.691274,8.752656,-6.023866,-4.664881,-1.238468,-8.658351,-7.937716,-4.274067],[3.129964,-6.005444,-8.602679,8.649693,-3.537443,2.415205,-9.540996,4.854327,1.661706,8.494276,8.426014,-9.124071,1.465924],[8.962955,-6.036396,1.622079,8.869289,3.036997,3.582063,0.263039,-8.090092,-5.888850,9.503979,4.409744,-8.123150,2.576673],[-1.510266,1.841640,-0.413144,-0.725837,7.187839,-0.319226,6.560691,-7.304025,-9.662329,0.225544,-0.244571,-3.351525,7.069626],[0.610609,-0.775027,1.364259,-0.905687,-8.584641,5.651598,9.338025,-8.520195,2.966642,6.235980,-3.709406,-9.736007,-4.996043],[-6.010163,-7.137815,-1.219501,4.003846,-0.878381,9.935140,-4.465534,4.999872,-5.143826,-9.227699,-4.735805,4.841288,3.291194],[-0.058952,8.234612,8.521143,1.891061,1.889669,5.963716,-9.921175,2.878222,-2.569705,-8.649801,1.803840,-3.071493,5.806872]]], dtype = "float64")#candidate|892|(8, 11, 13)|const|float64
bop_893 = relay.mod(var_891.astype('float64'), relay.reshape(const_892.astype('float64'), relay.shape_of(var_891))) # shape=(8, 11, 13)
bop_908 = relay.not_equal(var_891.astype('bool'), relay.reshape(bop_893.astype('bool'), relay.shape_of(var_891))) # shape=(8, 11, 13)
func_869_call = mod.get_global_var('func_869')
func_872_call = mutated_mod.get_global_var('func_872')
var_913 = relay.var("var_913", dtype = "float32", shape = (840,))#candidate|913|(840,)|var|float32
call_912 = func_869_call(relay.reshape(var_913.astype('float32'), [7, 10, 12]))
call_914 = func_869_call(relay.reshape(var_913.astype('float32'), [7, 10, 12]))
func_331_call = mod.get_global_var('func_331')
func_333_call = mutated_mod.get_global_var('func_333')
var_916 = relay.var("var_916", dtype = "float64", shape = (1536,))#candidate|916|(1536,)|var|float64
call_915 = relay.TupleGetItem(func_331_call(relay.reshape(var_916.astype('float64'), [8, 12, 16])), 0)
call_917 = relay.TupleGetItem(func_333_call(relay.reshape(var_916.astype('float64'), [8, 12, 16])), 0)
uop_919 = relay.asin(const_892.astype('float32')) # shape=(8, 11, 13)
output = relay.Tuple([bop_908,call_912,var_913,call_915,var_916,uop_919,])
output2 = relay.Tuple([bop_908,call_914,var_913,call_917,var_916,uop_919,])
func_921 = relay.Function([var_891,var_913,var_916,], output)
mod['func_921'] = func_921
mod = relay.transform.InferType()(mod)
mutated_mod['func_921'] = func_921
mutated_mod = relay.transform.InferType()(mutated_mod)
func_921_call = mutated_mod.get_global_var('func_921')
var_923 = relay.var("var_923", dtype = "float64", shape = (8, 11, 13))#candidate|923|(8, 11, 13)|var|float64
var_924 = relay.var("var_924", dtype = "float32", shape = (840,))#candidate|924|(840,)|var|float32
var_925 = relay.var("var_925", dtype = "float64", shape = (1536,))#candidate|925|(1536,)|var|float64
call_922 = func_921_call(var_923,var_924,var_925,)
output = call_922
func_926 = relay.Function([var_923,var_924,var_925,], output)
mutated_mod['func_926'] = func_926
mutated_mod = relay.transform.InferType()(mutated_mod)
func_807_call = mod.get_global_var('func_807')
func_809_call = mutated_mod.get_global_var('func_809')
call_938 = func_807_call()
call_939 = func_807_call()
uop_940 = relay.log(call_938.astype('float32')) # shape=(7, 10, 12)
uop_942 = relay.log(call_939.astype('float32')) # shape=(7, 10, 12)
output = uop_940
output2 = uop_942
func_948 = relay.Function([], output)
mod['func_948'] = func_948
mod = relay.transform.InferType()(mod)
mutated_mod['func_948'] = func_948
mutated_mod = relay.transform.InferType()(mutated_mod)
func_948_call = mutated_mod.get_global_var('func_948')
call_949 = func_948_call()
output = call_949
func_950 = relay.Function([], output)
mutated_mod['func_950'] = func_950
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6_call = mod.get_global_var('func_6')
func_8_call = mutated_mod.get_global_var('func_8')
call_966 = func_6_call()
call_967 = func_6_call()
output = relay.Tuple([call_966,])
output2 = relay.Tuple([call_967,])
func_978 = relay.Function([], output)
mod['func_978'] = func_978
mod = relay.transform.InferType()(mod)
output = func_978()
func_979 = relay.Function([], output)
mutated_mod['func_979'] = func_979
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1008 = relay.var("var_1008", dtype = "float64", shape = (4,))#candidate|1008|(4,)|var|float64
uop_1009 = relay.asin(var_1008.astype('float64')) # shape=(4,)
func_249_call = mod.get_global_var('func_249')
func_253_call = mutated_mod.get_global_var('func_253')
const_1026 = relay.const([0.369336,-9.351729,6.258382,7.117186,0.724990,-5.355244,9.571399,1.208518,0.917676,-5.702215,-8.075164,1.322749,-6.373892,4.030838,-8.479403,-9.894095,-5.392586,8.066199,-0.916363,4.274123,-9.422055,-5.562926,7.173767,5.212136,5.691729,-8.291973,4.988707,0.576202,5.312554,6.470599,-5.932318,2.688444,-3.818148,-9.514810,0.710680,9.359532,-4.225831,1.014401,9.463091,-3.163888,-6.711488,-5.180758,-2.830378,-0.801673,-8.665218,-9.416353,4.013229,0.106271], dtype = "float32")#candidate|1026|(48,)|const|float32
var_1027 = relay.var("var_1027", dtype = "float64", shape = (2,))#candidate|1027|(2,)|var|float64
call_1025 = relay.TupleGetItem(func_249_call(relay.reshape(const_1026.astype('float32'), [48,]), relay.reshape(var_1027.astype('float64'), [2, 1]), ), 5)
call_1028 = relay.TupleGetItem(func_253_call(relay.reshape(const_1026.astype('float32'), [48,]), relay.reshape(var_1027.astype('float64'), [2, 1]), ), 5)
bop_1039 = relay.maximum(uop_1009.astype('uint64'), call_1025.astype('uint64')) # shape=(2, 4)
bop_1042 = relay.maximum(uop_1009.astype('uint64'), call_1028.astype('uint64')) # shape=(2, 4)
func_276_call = mod.get_global_var('func_276')
func_278_call = mutated_mod.get_global_var('func_278')
call_1053 = relay.TupleGetItem(func_276_call(), 0)
call_1054 = relay.TupleGetItem(func_278_call(), 0)
output = relay.Tuple([const_1026,var_1027,bop_1039,call_1053,])
output2 = relay.Tuple([const_1026,var_1027,bop_1042,call_1054,])
func_1057 = relay.Function([var_1008,var_1027,], output)
mod['func_1057'] = func_1057
mod = relay.transform.InferType()(mod)
mutated_mod['func_1057'] = func_1057
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1057_call = mutated_mod.get_global_var('func_1057')
var_1059 = relay.var("var_1059", dtype = "float64", shape = (4,))#candidate|1059|(4,)|var|float64
var_1060 = relay.var("var_1060", dtype = "float64", shape = (2,))#candidate|1060|(2,)|var|float64
call_1058 = func_1057_call(var_1059,var_1060,)
output = call_1058
func_1061 = relay.Function([var_1059,var_1060,], output)
mutated_mod['func_1061'] = func_1061
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1074 = relay.var("var_1074", dtype = "int64", shape = (6, 6))#candidate|1074|(6, 6)|var|int64
var_1075 = relay.var("var_1075", dtype = "int64", shape = (6, 6))#candidate|1075|(6, 6)|var|int64
bop_1076 = relay.logical_xor(var_1074.astype('int64'), relay.reshape(var_1075.astype('int64'), relay.shape_of(var_1074))) # shape=(6, 6)
func_409_call = mod.get_global_var('func_409')
func_414_call = mutated_mod.get_global_var('func_414')
var_1090 = relay.var("var_1090", dtype = "int16", shape = (11, 1))#candidate|1090|(11, 1)|var|int16
const_1091 = relay.const([4.401643,-3.160178], dtype = "float64")#candidate|1091|(2,)|const|float64
call_1089 = relay.TupleGetItem(func_409_call(relay.reshape(var_1090.astype('int16'), [1, 11]), relay.reshape(var_1090.astype('int16'), [1, 11]), relay.reshape(const_1091.astype('float64'), [2,]), ), 6)
call_1092 = relay.TupleGetItem(func_414_call(relay.reshape(var_1090.astype('int16'), [1, 11]), relay.reshape(var_1090.astype('int16'), [1, 11]), relay.reshape(const_1091.astype('float64'), [2,]), ), 6)
output = relay.Tuple([bop_1076,call_1089,var_1090,const_1091,])
output2 = relay.Tuple([bop_1076,call_1092,var_1090,const_1091,])
func_1093 = relay.Function([var_1074,var_1075,var_1090,], output)
mod['func_1093'] = func_1093
mod = relay.transform.InferType()(mod)
mutated_mod['func_1093'] = func_1093
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1093_call = mutated_mod.get_global_var('func_1093')
var_1095 = relay.var("var_1095", dtype = "int64", shape = (6, 6))#candidate|1095|(6, 6)|var|int64
var_1096 = relay.var("var_1096", dtype = "int64", shape = (6, 6))#candidate|1096|(6, 6)|var|int64
var_1097 = relay.var("var_1097", dtype = "int16", shape = (11, 1))#candidate|1097|(11, 1)|var|int16
call_1094 = func_1093_call(var_1095,var_1096,var_1097,)
output = call_1094
func_1098 = relay.Function([var_1095,var_1096,var_1097,], output)
mutated_mod['func_1098'] = func_1098
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1119 = relay.const([[[2.376142,-0.646051,4.076470,-1.569264,1.190084],[-3.579368,-8.545051,2.707085,-1.665314,2.164456],[2.887255,9.476249,7.176183,-3.815890,-1.669047],[-7.598456,-1.230443,-8.255120,3.588735,8.288911],[-9.390525,4.141816,5.746224,-4.702617,-3.362303],[7.522596,4.749223,-9.530785,-9.571582,5.620243],[-6.694980,8.826498,-6.736621,-9.039048,-0.485626],[8.968173,-9.718374,9.689199,6.210556,2.818721],[4.286683,7.095057,-9.369568,-7.029617,5.855040],[8.890748,7.350870,-0.534206,-8.676979,8.771613]],[[9.076937,-7.290246,-6.108598,1.364733,1.833550],[5.891576,-1.181694,0.276521,-7.787301,8.381972],[3.046899,-5.393745,7.244347,8.433858,9.651115],[1.911941,7.048577,-3.865013,0.644714,9.347225],[0.991292,-0.693921,-6.128853,-5.735122,4.878616],[-0.404057,-5.393820,0.337057,0.885463,9.435457],[-2.455258,0.742573,-4.359186,7.840341,-4.803829],[-4.294533,8.110832,6.209552,-5.584503,-0.817423],[0.557174,8.091921,6.137029,-0.560804,3.718404],[-6.672253,-1.894630,2.024054,2.867827,-9.002650]],[[4.624109,2.125156,1.793935,-9.024764,-4.437024],[2.669242,8.944769,0.896005,-7.859148,-0.600353],[-0.862993,7.988633,-1.172260,9.426550,2.088856],[6.013583,6.690742,6.372542,3.980356,-2.187879],[-5.434949,-8.773433,-7.925352,5.839716,4.820181],[-5.820294,-3.823668,-2.546500,-5.033564,-9.422097],[3.436984,3.638411,8.684175,-8.944290,-0.560176],[-2.747631,-5.418061,7.982414,2.946202,9.987486],[-0.359029,-5.992520,4.632929,7.228320,-3.879248],[3.437794,-2.720599,-3.003738,5.998487,-5.362368]],[[-1.770632,7.709855,3.128343,4.637367,6.525189],[8.578724,8.112925,-8.618329,-3.843209,-3.861040],[4.515431,4.555944,-5.881239,3.608684,-1.897596],[-3.423554,9.646319,4.108862,-1.234129,8.595349],[-5.499667,2.985779,-6.417580,-0.693980,5.733780],[5.336589,4.215619,-1.069524,4.841222,5.477114],[-1.620722,-9.449103,9.654239,-8.243499,-9.890675],[7.376354,1.089936,-8.964370,-3.632225,-0.603143],[-1.596514,5.890077,-1.582099,8.434022,5.888720],[4.612580,-5.974986,9.596337,-4.641600,7.266334]],[[4.632327,9.584884,5.240160,-7.870779,-7.012773],[-8.999566,4.269352,-8.069859,1.489391,7.892089],[7.204699,-5.932483,-9.691743,4.721651,-5.117124],[2.587405,-3.793837,-7.042899,6.312259,5.530846],[2.265329,-5.715934,1.812287,5.602870,-6.455074],[-2.224837,0.773921,-4.202827,-4.186263,-4.024147],[-2.769362,6.646456,-0.118782,6.040400,-5.362395],[-6.903203,-3.340501,-4.208430,9.190950,-3.894799],[-9.487889,0.941263,-0.169325,6.055187,-7.473609],[1.932520,-6.503215,0.274921,-0.205640,-9.538171]]], dtype = "float64")#candidate|1119|(5, 10, 5)|const|float64
var_1120 = relay.var("var_1120", dtype = "float64", shape = (5, 10, 5))#candidate|1120|(5, 10, 5)|var|float64
bop_1121 = relay.minimum(const_1119.astype('float64'), relay.reshape(var_1120.astype('float64'), relay.shape_of(const_1119))) # shape=(5, 10, 5)
bop_1126 = relay.equal(const_1119.astype('bool'), relay.reshape(bop_1121.astype('bool'), relay.shape_of(const_1119))) # shape=(5, 10, 5)
bop_1131 = relay.mod(bop_1121.astype('float64'), relay.reshape(bop_1126.astype('float64'), relay.shape_of(bop_1121))) # shape=(5, 10, 5)
output = bop_1131
output2 = bop_1131
func_1135 = relay.Function([var_1120,], output)
mod['func_1135'] = func_1135
mod = relay.transform.InferType()(mod)
mutated_mod['func_1135'] = func_1135
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1136 = relay.var("var_1136", dtype = "float64", shape = (5, 10, 5))#candidate|1136|(5, 10, 5)|var|float64
func_1135_call = mutated_mod.get_global_var('func_1135')
call_1137 = func_1135_call(var_1136)
output = call_1137
func_1138 = relay.Function([var_1136], output)
mutated_mod['func_1138'] = func_1138
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1140 = relay.const([7.405474,1.971264,-1.625026,-7.002313,5.569427], dtype = "float64")#candidate|1140|(5,)|const|float64
uop_1141 = relay.sin(const_1140.astype('float64')) # shape=(5,)
func_249_call = mod.get_global_var('func_249')
func_253_call = mutated_mod.get_global_var('func_253')
const_1148 = relay.const([-2.469945,5.942099,-7.627098,6.780596,7.626992,5.650104,5.805739,-6.407823,0.579240,-5.067286,6.507109,9.430500,5.234669,-2.104552,-8.018011,-6.994960,7.487830,-2.659447,2.058122,3.713967,-7.077600,2.691120,-8.002079,-7.592545,-5.651643,-0.874882,-1.137647,-7.110768,-4.314954,-5.111066,-4.649558,5.049758,9.369294,1.646107,-5.207441,5.737751,5.198788,-5.400833,-9.254985,-1.459909,7.866163,-4.710348,-5.538866,-5.217651,5.834359,1.248754,6.039527,-2.711667], dtype = "float32")#candidate|1148|(48,)|const|float32
var_1149 = relay.var("var_1149", dtype = "float64", shape = (2,))#candidate|1149|(2,)|var|float64
call_1147 = relay.TupleGetItem(func_249_call(relay.reshape(const_1148.astype('float32'), [48,]), relay.reshape(var_1149.astype('float64'), [2, 1]), ), 4)
call_1150 = relay.TupleGetItem(func_253_call(relay.reshape(const_1148.astype('float32'), [48,]), relay.reshape(var_1149.astype('float64'), [2, 1]), ), 4)
uop_1154 = relay.sinh(uop_1141.astype('float32')) # shape=(5,)
output = relay.Tuple([call_1147,const_1148,var_1149,uop_1154,])
output2 = relay.Tuple([call_1150,const_1148,var_1149,uop_1154,])
func_1158 = relay.Function([var_1149,], output)
mod['func_1158'] = func_1158
mod = relay.transform.InferType()(mod)
mutated_mod['func_1158'] = func_1158
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1159 = relay.var("var_1159", dtype = "float64", shape = (2,))#candidate|1159|(2,)|var|float64
func_1158_call = mutated_mod.get_global_var('func_1158')
call_1160 = func_1158_call(var_1159)
output = call_1160
func_1161 = relay.Function([var_1159], output)
mutated_mod['func_1161'] = func_1161
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1230 = relay.const([[[-7,10,3,-10,6,-7,-1,-1,-3,4],[4,-8,-8,-9,-10,-6,8,-3,-9,7],[8,10,-4,2,6,5,-1,-2,-7,-2],[5,-4,-2,-5,3,8,-8,1,-9,-7],[-10,-6,7,-2,8,3,-1,-6,5,-6],[3,-2,-2,3,7,-8,-4,9,-2,-8],[-6,6,10,-2,5,-5,-2,1,9,7],[4,4,10,9,-6,-4,10,10,4,-6],[10,9,-8,9,-4,5,10,6,-3,-3],[6,1,-9,-7,-5,-4,-4,-10,-5,2],[-3,-7,-6,-4,8,10,-7,9,4,-1],[-8,-5,-7,-7,-1,-2,-7,9,10,4],[3,3,5,-5,9,-7,10,3,4,-2]],[[10,9,-2,5,-2,-3,3,6,-9,6],[-9,-7,2,8,2,2,5,3,2,9],[-5,10,8,5,-6,-7,3,-4,6,2],[4,-1,-7,-6,10,-2,8,4,-5,5],[-1,6,6,10,2,1,-10,-4,-7,-6],[6,4,10,-1,-1,8,-7,-8,4,7],[4,3,2,-10,10,6,4,1,1,10],[-6,-6,1,-8,-5,-3,4,-4,-7,-5],[-10,4,-4,9,7,-7,-8,-6,8,5],[10,2,-8,-2,9,-2,10,-7,1,10],[-7,-10,2,3,-1,-1,10,7,-8,-3],[-8,-9,10,-3,-4,-10,-1,-6,-6,1],[1,10,-5,-7,10,1,-4,-6,-8,9]],[[3,-3,-8,7,9,-5,2,-2,-6,2],[-9,-2,3,1,-7,3,8,4,6,3],[-1,-8,4,2,8,-6,6,4,-7,1],[3,-6,2,8,3,-7,-10,7,-6,-5],[-2,-3,-2,8,-2,-5,-6,8,3,8],[-9,-10,10,6,6,-10,4,-7,-2,6],[-5,-1,-2,-9,-8,10,-1,-8,-10,7],[-8,4,-2,-10,5,10,-9,-1,3,7],[-6,-7,-9,-8,-1,-3,-5,3,-8,-4],[9,3,9,10,-1,-1,3,-3,-5,1],[9,-5,3,-2,10,-5,1,8,9,10],[-2,8,9,10,-6,1,7,8,5,2],[-5,8,-3,4,2,-6,4,-2,7,10]],[[4,-9,-1,-2,6,-4,1,8,8,-9],[-7,7,-9,8,-4,1,2,-9,-4,9],[-7,2,-7,-3,4,5,5,3,-2,1],[-9,-4,-10,-2,-5,8,-6,-9,3,-7],[-4,-6,-6,-4,-2,-6,7,10,2,6],[4,1,-6,-4,4,6,6,6,3,-2],[-5,3,-8,-3,-8,-10,-5,-4,-3,10],[2,5,7,3,9,2,6,8,-10,-4],[2,-1,-9,5,-5,-1,-10,8,6,-5],[7,-3,-5,-6,-1,-5,6,-9,-3,9],[9,7,-6,5,6,-1,9,5,2,-1],[2,8,-2,-7,1,-2,-5,10,-4,5],[6,1,7,-1,9,-6,8,3,2,4]],[[3,6,5,-9,-2,6,-10,5,-7,8],[10,7,7,9,-7,5,-1,9,-8,6],[5,-9,-1,2,-3,-3,2,3,1,3],[9,9,-8,7,-9,5,4,-8,-8,-2],[1,-4,-7,-6,-10,-6,4,8,-6,-9],[7,8,10,6,-6,-9,-4,-10,9,-7],[3,-6,1,-3,9,9,-6,7,2,-3],[10,5,-2,-6,1,10,9,2,-1,4],[-7,-6,-1,-10,-4,9,-3,-9,9,10],[1,5,5,9,-4,-6,5,5,-4,-8],[8,-6,4,-7,-3,5,6,-1,9,9],[-2,-4,10,4,4,4,-1,-2,6,-8],[-8,-10,-10,9,2,3,-6,2,8,-10]],[[7,-6,-4,1,-10,8,9,6,10,1],[5,5,-4,-5,-2,7,-9,-8,-3,-1],[-10,-3,-7,-2,-4,9,8,-1,1,-7],[1,4,8,10,-3,-4,-10,-1,8,5],[8,-3,8,-1,8,-3,3,-8,7,4],[-9,-2,7,-7,9,-9,6,3,4,4],[-1,2,4,7,-5,3,9,-4,-1,1],[5,-8,2,8,5,-9,-8,-4,-8,-6],[-2,-9,-4,-9,-6,-8,-2,3,-8,-7],[2,3,6,4,8,9,9,-1,2,2],[2,-10,-6,6,3,-9,1,7,-7,3],[1,5,9,4,8,1,6,6,-4,8],[-8,-2,-8,10,2,-3,5,-4,6,8]],[[-4,7,2,-3,-6,4,7,6,-7,-3],[8,-1,-5,-9,-2,8,8,7,-7,-6],[9,-8,6,-4,-8,3,2,-1,8,10],[9,-8,-3,6,-3,-4,2,1,-4,2],[-1,-10,-8,3,-2,-8,3,9,10,6],[10,8,-2,2,5,7,-9,-2,-9,5],[-8,-4,8,6,3,-1,-2,6,1,9],[2,-5,-3,9,2,5,4,10,7,10],[-8,2,2,-5,6,1,9,10,-3,-4],[-1,-4,10,-7,-9,-4,7,-8,-8,4],[-6,3,-2,-7,-9,1,-2,5,8,7],[-10,-4,-1,-8,5,2,-10,7,5,1],[7,-4,-7,-10,-2,4,-2,-10,1,1]],[[-3,-7,9,7,10,-9,-9,5,-3,-3],[-4,8,-7,10,-8,6,-5,6,-9,-7],[10,5,1,7,8,1,-9,9,-1,8],[9,3,-8,-5,2,5,10,-3,-3,4],[-2,-3,-6,-1,-9,-6,-2,2,8,5],[1,-3,-4,-9,9,-6,8,4,-4,-3],[-3,-1,8,2,-3,5,1,-5,6,-9],[7,6,7,-3,6,-3,-5,-5,-10,-8],[-6,-6,-10,-9,5,1,-5,1,-10,2],[10,-8,-2,5,-10,6,5,10,-5,4],[-8,3,-6,5,9,-4,3,-2,-3,-8],[10,-8,7,2,8,3,-3,-9,-3,4],[4,-2,10,-3,-5,-5,-8,-1,2,9]],[[9,7,-10,-10,-3,-8,-2,3,8,-4],[-10,7,-3,-2,-2,-4,5,-3,-8,-10],[9,7,10,-5,7,-1,-2,2,7,-10],[-7,7,6,6,7,4,-4,9,-2,-4],[8,5,-4,-5,10,-7,8,8,-8,-7],[-8,2,3,-10,8,3,9,-5,-4,3],[4,3,-8,7,3,10,6,-7,-3,-5],[1,6,3,-5,4,2,-10,1,4,-3],[-5,-10,4,1,2,-8,-1,5,10,2],[7,-1,7,-2,-1,9,7,6,-5,-1],[-2,-2,-5,-10,6,-8,-5,10,10,-4],[7,6,3,7,8,8,9,4,6,9],[-5,-5,-6,4,-6,-7,-2,-1,7,-6]],[[8,-7,-4,10,-7,2,-8,4,-3,-1],[7,-6,-3,7,-6,6,-4,2,-8,-8],[3,-10,-10,-6,3,3,-5,2,-7,9],[9,-1,10,3,-6,-4,-2,2,9,4],[-5,-3,-8,-2,1,2,7,-4,-7,-7],[-9,-3,-5,2,3,5,5,-10,-2,-9],[4,-4,-5,9,7,-4,-9,7,4,-8],[-5,6,-3,-4,9,-8,5,5,2,1],[-2,-6,-3,-6,2,3,9,9,6,-8],[7,9,8,1,9,-9,-6,-3,10,6],[-3,3,-6,5,6,-6,-9,-4,-10,9],[6,4,5,-10,9,8,3,-6,-4,3],[-4,4,6,2,-10,9,9,7,-3,10]],[[3,7,-1,-8,-6,6,10,7,7,-5],[-10,-2,-10,-4,8,-6,-6,-8,8,4],[7,-5,-10,-4,-2,4,3,-1,-7,-5],[-1,-7,-6,3,-2,-9,9,-5,-6,5],[-6,-10,-5,2,-7,8,-10,6,1,-1],[8,-10,-3,5,-4,9,-7,10,1,-5],[-9,-8,-9,6,-6,3,-4,-3,9,-6],[6,4,-6,7,-6,-6,9,-3,-10,10],[-3,-2,-7,-6,10,-1,9,2,-2,3],[-5,-1,4,-5,-5,10,10,-7,-6,-5],[-4,5,-4,1,7,-3,4,9,10,-2],[-8,2,-6,-5,1,9,8,1,10,-9],[-5,-1,6,6,-3,10,-3,-1,1,-9]]], dtype = "uint32")#candidate|1230|(11, 13, 10)|const|uint32
var_1231 = relay.var("var_1231", dtype = "uint32", shape = (11, 13, 10))#candidate|1231|(11, 13, 10)|var|uint32
bop_1232 = relay.less_equal(const_1230.astype('bool'), relay.reshape(var_1231.astype('bool'), relay.shape_of(const_1230))) # shape=(11, 13, 10)
uop_1236 = relay.log(const_1230.astype('float32')) # shape=(11, 13, 10)
func_921_call = mod.get_global_var('func_921')
func_926_call = mutated_mod.get_global_var('func_926')
const_1243 = relay.const([-0.159017,-0.475750,-6.688340,9.045787,8.515350,5.708728,-4.061852,8.884408,3.635635,-3.300522,5.969254,4.622166,8.419394,3.397503,7.675798,5.732297,-8.228074,-2.645767,-9.325654,-9.453141,-5.438286,-6.843228,-9.313277,-4.382086,-4.075335,1.953360,-4.019197,3.576073,6.893418,-5.010130,3.536901,-5.122177,-8.258698,1.117055,-5.235774,-7.698883,3.905801,7.577992,1.050668,1.877721,0.956412,7.494479,5.149347,6.274980,7.499473,-0.174539,3.231349,-6.140089,5.945258,3.462845,6.703902,-6.040674,-1.773126,3.400586,-2.809075,5.136051,5.750340,1.319164,-5.879643,8.757216,-3.986078,-4.201899,-5.579258,7.198470,-1.726941,3.904331,9.609030,-9.036438,-5.201896,4.100562,-9.618688,-5.556446,4.784006,8.935051,-2.515327,6.679031,-0.365905,-6.338073,0.945660,-2.100748,-0.237612,2.777606,-6.101317,0.199168,1.783612,9.922663,-7.596738,-1.460698,0.604631,0.856096,-1.206929,-8.616803,-4.556831,-1.532813,5.422554,-8.567063,-3.917312,3.295391,1.098223,0.747721,6.818658,1.848953,-3.139423,7.542992,7.763800,4.120469,4.750174,-7.576362,6.873232,3.696212,1.412616,-3.708390,-0.945815,-8.658971,2.161224,-9.482831,-4.303861,-0.213185,1.372530,-8.497337,-4.217676,0.639369,-1.237701,3.358655,-5.216533,-4.592755,-8.836300,0.214541,-8.700747,2.098634,-6.649543,-2.919119,8.592201,5.928459,-5.587427,3.970154,-4.521089,-2.682429,-8.357327,-2.283578,0.677341,-8.139416,0.323569,-1.499087,-6.999047,6.031443,5.880367,9.899484,-1.070225,-1.625098,0.567768,6.983339,-8.127591,-6.439470,-4.452940,1.670878,2.544319,8.677804,3.372886,-8.818112,7.947414,-6.357570,9.721495,2.916209,7.138997,-3.523685,9.770150,-3.843630,4.776750,-6.731865,8.240205,8.177703,-3.912897,1.967773,-2.573520,1.111696,-8.277943,0.539179,8.996606,5.947563,-9.874556,0.422858,-3.454488,6.115235,-2.333609,8.011970,3.784337,-8.826952,1.879834,8.978334,4.427816,-2.479704,7.053325,7.185754,-3.601385,9.123464,-8.165145,7.984478,-3.142590,1.132247,-1.471043,-6.590933,5.428275,8.026759,-5.117598,3.776459,1.345486,9.437022,4.877363,-2.649773,-3.025451,-4.156623,-0.805327,4.241357,-1.070714,-6.988751,7.156204,-6.083472,3.760349,8.258122,-8.583668,-6.464274,-5.531114,-1.303017,-5.158960,-2.476308,-7.499511,-8.749671,-3.875048,0.284885,-0.399467,0.734554,-0.413777,-5.682421,-2.323369,-4.657628,-6.368421,-0.568151,-4.466077,-1.542391,4.059511,0.887255,6.872433,4.087233,1.153017,-0.667886,-9.409031,1.038544,4.391575,-7.853538,-5.754786,9.708505,5.408922,3.200584,-0.465302,1.652068,-3.450512,-8.230209,-8.931854,7.539719,-1.669282,8.085723,-1.312317,-8.244280,-2.174273,9.758136,3.624862,-3.806449,-3.632771,-1.546536,4.809361,4.570027,2.525538,-1.985755,6.010594,6.202820,2.976825,-0.511563,-5.009665,-8.185913,3.990022,2.743038,-1.428842,-4.600533,4.780426,0.844238,-6.882165,4.874939,-7.516131,2.347855,0.031141,-2.770270,1.398903,-5.075955,6.446684,-9.059586,-7.801196,5.129099,8.979464,-1.651744,-3.250115,-0.117015,-5.920786,-0.368234,3.496091,-0.090326,6.691649,7.560704,0.140964,-9.900120,-1.612892,5.393198,-6.112507,9.847409,-4.103176,-4.452078,-5.411580,6.832458,-9.446195,1.753922,3.939697,9.158668,-2.420685,9.572178,-2.810694,-5.613226,8.839738,-0.760616,-3.248475,9.971298,7.882784,-8.378718,-7.834549,-8.460725,8.026994,-3.674240,4.601228,8.914750,1.855366,1.281524,-8.638951,-7.574295,7.575011,1.226555,8.236055,5.102894,3.627428,-0.743190,7.803167,-4.223243,-5.803749,-6.905310,-8.318819,-0.934937,-8.349035,-1.663127,6.487436,-9.114707,7.269410,2.788931,0.651020,7.207307,-2.772031,-8.514760,-2.960912,-9.671237,-8.870460,-0.537892,9.943883,-5.561473,-1.475081,-0.632215,9.237611,-1.046729,1.436151,3.590148,-1.892648,2.487065,-2.114014,4.537749,-8.684349,-0.711250,-2.935991,-9.112340,9.044258,7.998905,4.414732,3.164135,2.385132,4.355953,7.177093,6.193466,2.755535,-0.441213,-6.402376,-5.947846,-4.198994,4.002401,3.209499,-9.510759,-5.771014,-8.542079,2.301904,4.159798,0.322139,3.574911,2.813884,2.707449,9.576192,9.829489,6.363423,6.001051,-7.176615,-7.926560,-3.486239,-6.386849,-9.561774,-6.770081,-9.985390,-5.092973,-4.632143,6.066326,-0.069437,-5.918154,-1.745649,-8.157700,6.028061,6.915221,-9.283934,4.021910,-2.165539,-7.878313,-4.003205,6.759425,-4.052279,-5.099698,5.650077,-8.792672,-6.250149,-3.751331,-2.013169,-2.304529,-8.705001,8.964949,6.911130,9.899980,-2.617291,2.737162,-0.670876,-9.286226,-6.931479,1.341685,-7.323014,-2.049435,-3.930952,0.754542,7.208944,-7.042279,-3.433196,-5.277390,-3.773925,5.978647,3.760255,0.770725,3.560325,-7.755075,-8.576684,-4.472804,-8.880557,-4.648732,6.134725,4.993358,7.687881,-1.833764,-5.671531,-2.314232,-1.365977,4.677250,-2.055989,2.306651,-9.817330,5.483287,1.786504,3.384552,-8.720375,-7.792561,-5.031748,-7.406996,4.465213,8.339919,-5.663272,-3.404816,7.347021,-4.528900,-7.712487,-6.481896,-8.038859,8.174679,3.598447,9.736203,-3.061689,5.456056,7.473336,9.071113,-4.522142,-0.703805,-9.707774,0.705272,1.190473,1.012091,7.189018,-9.916463,9.395692,3.195468,5.155251,5.760298,-0.987820,-0.602311,-2.722030,-1.930811,-4.440487,1.228478,3.336524,-3.116050,6.952964,-2.979141,9.139295,-1.263981,-1.766114,7.722567,-6.618808,-5.717789,3.860704,-5.919631,-2.787188,-9.346282,-5.281863,2.855778,-3.551649,-3.660620,2.361668,-4.804720,1.602072,9.759037,-5.701665,6.515315,6.984814,8.642709,-3.118375,3.533800,-6.798683,2.910084,9.112374,-7.187408,0.102446,6.358942,3.188212,0.078314,-8.058394,2.551280,-8.400349,8.017797,-3.437981,-2.193419,4.604777,4.183210,-2.139551,-6.811379,6.939132,4.322758,9.713415,3.442293,4.087406,0.483470,2.366008,-7.880829,-2.296370,-8.268027,5.715512,2.894207,-4.056265,-6.449845,-0.686680,-0.180309,-4.909228,-2.382772,7.266887,-5.025182,-3.532660,-2.195275,-3.219843,8.513407,4.858990,1.592090,2.981507,8.376380,9.374912,-7.848711,-7.339643,5.759018,-8.373919,-1.481119,6.621555,-3.780824,-8.987448,-0.117370,-4.210533,8.252037,7.117053,-3.677993,-0.953208,-2.537867,5.751867,1.092679,2.712318,-8.613984,-6.141323,4.615002,-6.264202,8.619238,8.664198,0.832487,-8.933764,5.241133,-0.510216,-8.973007,8.699626,-3.803451,8.605189,-2.284795,2.521036,-2.012441,9.300611,2.174594,-1.382948,-8.507698,-0.218727,7.315735,2.291005,-5.989882,-2.948417,-4.187389,1.958642,-2.075198,-4.610313,-9.252661,-4.558811,8.477782,-7.648711,3.285826,5.180393,-4.836381,3.717579,-2.142503,-1.251887,-7.574394,7.136798,-6.924445,-2.768994,6.946320,5.447507,-3.128043,9.680346,9.615880,-8.169758,-0.646760,9.765440,-8.749269,-5.299187,7.959690,1.588420,1.863743,-0.971070,-7.415774,-7.562986,3.645622,0.406417,3.507082,9.665815,-0.099341,0.561485,9.970998,-5.950108,-7.266278,7.686286,1.214823,9.747313,9.483572,9.029736,-3.699561,-7.533011,2.995597,1.473034,-4.773874,-5.371820,2.123922,1.723832,-5.287250,-6.848718,-7.026709,-9.640460,-7.789105,-9.362728,1.105222,5.091773,4.170720,2.695562,6.413084,-1.968763,5.746813,3.851113,-0.281540,7.980880,-3.196904,7.378214,2.558651,-8.935342,-9.698974,-2.261152,-3.490267,3.091985,9.619084,0.375865,-6.741452,-3.887150,-4.200603,-5.979070,-1.459404,6.344465,4.825327,4.460013,-4.925433,-2.163335,-1.169010,-9.109763,0.161949,-5.658495,-7.398028,6.336481,8.382293,-3.942417,6.727725,2.265404,-8.723389,-4.817365,9.587306,5.183946,-8.161411,-9.342488,-6.226975,5.225554,2.503057,-6.824486,5.858745,-7.863446,3.687017,-9.487978,5.543375,-5.049977,-2.748603,8.401345,-8.740521,6.984938,-1.573335,9.481729,-8.180383,-3.473390,-3.214896,0.203389,4.937218,2.728188,-0.951074,4.809823,9.770242,-2.766600,2.294673,2.501753,-8.101410,-1.688004,4.643223,0.314212,-0.045124,2.753129,-8.971569,7.305183,-9.960165,-5.615982,-2.074139,-7.185072,4.956065,-5.689740,-8.473231,-9.611306,-3.854519,5.558583,-7.351444,-2.232316,5.499779,1.123619,-3.860441,4.450022,7.470431,-5.548386,5.184659,5.465976,2.809985,9.833834,-0.687808,-8.769208,-8.401996,-7.040413,-2.088865,-7.382842,-3.836648,0.600156,-5.775281,0.507385,-5.079047,1.161958,-6.141692,-4.236799,-5.290865,4.337617,4.544388,-3.288927,9.097617,-6.611248,7.589758,6.995202,-1.293034,-1.148812,2.752657,9.036765,2.156513,-0.317825,0.050218,3.589185,-9.715814,-9.319736,-9.795950,-2.630277,4.808700,8.305029,9.328693,-1.409484,6.456638,-2.937913,-9.531906,-0.903268,-7.917250,2.829182,7.242826,-0.954946,6.341235,9.533569,6.208268,-5.926700,-2.946931,6.840600,-3.069391,-8.303583,-6.072738,6.318464,-2.410031,7.200471,-9.456048,-5.133099,0.815517,8.128910,-4.871722,6.365768,-6.896620,-7.006611,9.474942,-3.776863,-9.122166,-9.679352,5.501360,1.697323,7.945725,3.407684,-1.571471,-3.604378,-2.075894,-8.464332,-4.968072,-0.318796,2.946968,-9.360920,-2.338182,2.340892,4.517432,9.151355,9.755170,-5.294229,4.362438,-0.194376,5.883282,-0.982034,-2.455370,-0.822276,-9.921866,-7.795713,-0.461273,-7.431942,5.054271,5.268012,6.342213,-6.824584,4.509588,-1.372296,-6.371124,-8.023400,3.560093,9.431789,-6.572018,-7.850935,-7.694999,-4.363393,3.631004,2.627686,-2.854974,5.232622,2.740955,-5.994943,-2.362502,-1.983758,8.609559,6.333655,5.136600,8.430932,-4.904001,-3.161910,-2.336524,9.090692,3.256670,-8.558336,9.198602,-3.028597,6.343100,-2.481123,8.675326,-8.099818,7.785896,6.559079,-6.637304,-0.367131,-9.828358,6.234256,-1.218219,2.654816,8.515966,2.846071,9.645844,-4.388328,8.924597,0.058362,2.593370,3.832479,5.643420,5.330671,0.603349,-4.391003,-8.601321,-9.478699,7.384397,-9.440830,-3.366853,4.030013,8.541193,-2.275730,-0.543934,3.486064,-6.367901,1.720744,0.665346,9.708452,-0.471460,1.761621,-1.944160,4.887107,0.495388,-4.993840,-4.961534,0.851307,1.435830,-2.494123,2.538844,3.449303,-5.306012,1.817461,3.379790,7.180941,3.211464,-3.359630,-2.258407,8.459818,-1.741909,8.492991,4.481395,-5.132605,5.393197,0.473887,8.759032,-5.632680,0.128373,2.909735,-3.169557,-9.096075,5.397408,2.356940,3.738239,4.631753,4.070701,-5.019082,-4.948946,6.648110,9.135162,-4.481780,-5.533731,-9.569904,5.354345,-4.110885,-7.952714,5.473823,-9.272179,-9.698886,9.135646,9.680337,-5.932273,3.002634,-7.572016,-6.470600,8.373015,-9.014286,8.032757,6.192558,5.053300,1.339796,1.290301,4.343711,0.308399,0.421688,-4.828432,6.677034,-1.752823,7.721575,-9.032052,-7.017700,-8.237064,8.722835,6.285174,-7.550631,-7.277143,2.921878,-1.046515,0.094744,-2.748051,-0.697074,9.410737,5.309137,7.372119,0.801547,9.831394,0.386235,-0.158558,9.976295,-8.097201,-9.700968,9.492583,-4.524127,9.621973,-9.578996,-2.330717,-3.085708,-1.745232,5.254027,-4.694674,1.809117,-9.156628,1.900805,3.395736,-7.483631,9.749828,4.880961,-6.105005,-2.502149,0.668187,3.816362,-3.845623,-0.457202,-3.594518,-6.920834,-7.800229,-4.424352,-2.257192,4.746610,-1.213116,3.979305,9.706252,2.770057,-0.937060,8.484362,-8.380941,1.881896,-1.457027,6.832925,7.461367,2.242215,-8.643306,-4.270501,1.396760,-6.670769,-2.558016,8.243755,-0.755138,8.841518,2.764783,1.221254,-2.593654,-4.492865,-5.633648,0.144242,0.491676,1.451779,-5.435543,-2.807138,5.647021,1.957216,6.073476,7.185678,0.877607,-3.760203,5.692587,-4.739462,8.342334,-4.271361,2.162823,2.739375,-4.850452,-7.646588,7.539962,2.253322,3.232817], dtype = "float64")#candidate|1243|(1144,)|const|float64
var_1244 = relay.var("var_1244", dtype = "float32", shape = (840,))#candidate|1244|(840,)|var|float32
const_1245 = relay.const([3.449208,7.776000,5.074155,-3.228983,-3.934614,5.992611,-5.925999,-2.798089,-7.664113,-3.713956,-6.394497,9.880895,-4.008162,6.838408,0.854019,7.108027,7.478645,0.048882,4.200549,0.675517,6.781824,-3.719473,-9.947873,-1.754797,-9.331324,-7.377879,-6.761537,9.108565,3.405338,-9.851348,-8.656171,8.662921,-8.707689,8.876606,8.360877,3.204582,8.705455,-1.420717,-3.015274,8.547443,4.412238,-4.976557,7.239713,-4.268108,-7.138953,0.386175,6.975595,-5.077149,7.991893,2.568736,-5.824141,5.659866,-7.836913,-3.613699,-5.707717,9.148502,1.197605,-3.915982,8.763021,8.017167,2.888772,7.007042,-4.290643,7.385410,9.438171,-5.653758,0.114738,2.479830,3.107352,6.081971,8.761151,-3.801680,-1.605534,0.583489,1.381017,8.485874,-4.376682,4.117947,-6.812201,-2.461656,-5.871128,-1.969393,7.556950,7.915863,5.295117,-9.327726,-2.304657,3.161222,2.022077,-1.211608,-2.158708,-4.637802,-0.598881,7.371679,-2.897832,-6.583963,-0.893258,-5.069420,6.656262,-5.970151,-3.455769,7.339589,8.902066,0.919791,-6.731464,-4.924782,0.156678,7.681801,-4.274277,0.415221,-0.732326,9.096412,-4.900774,-6.742129,-9.005059,-9.633834,-8.214634,7.045677,-8.902883,-1.954893,-2.281803,9.620424,6.408378,-6.804864,6.417039,-9.971226,3.030014,-7.825372,-2.930436,2.420182,-0.001186,5.196952,-3.244745,-4.189079,-3.774142,6.906449,8.535412,-7.057186,9.103508,5.579652,-7.920865,-2.641001,6.549950,1.373378,-0.566580,-4.271685,-0.302131,0.208128,-6.787563,-5.004126,-9.298828,-0.764366,-3.086426,0.937795,6.713007,3.815754,-4.953687,7.914148,-7.168260,3.349724,-1.894004,8.799490,-7.429973,1.752173,8.306732,1.730539,1.112397,6.832363,-3.393009,0.926821,3.348534,-0.912374,-5.338601,-5.340145,-8.127272,0.664371,9.401959,-1.649352,5.784108,8.169764,5.102549,6.452846,-6.176646,-8.771235,5.994705,-2.788589,-5.484442,-3.120751,-4.071559,-1.124788,5.167701,8.648148,-5.673079,-1.891392,8.110766,-2.713207,-9.456458,4.557558,9.487396,8.547768,4.307144,6.847753,-0.152904,6.594508,-9.665650,-5.535813,0.052357,2.455393,4.822152,-0.460971,3.597790,9.136414,-0.298220,-2.649304,-8.804157,-4.836732,2.691335,-6.900875,0.994065,-5.157009,3.559744,2.488232,7.886214,-6.905218,-5.297198,5.363846,-8.478198,3.033029,-0.304677,-8.764500,-4.215962,-4.172589,-0.987362,5.860734,-8.188193,-5.259952,-2.233977,9.012996,-3.886444,-6.192168,-1.404205,-1.515328,-6.963746,5.205345,2.771272,-9.776802,-6.270230,7.987385,3.098640,-3.894026,-6.558932,5.624930,4.657616,-2.131337,-9.733317,-6.005227,0.253592,7.552303,2.288785,-1.101194,-9.240830,-3.653194,9.507295,-7.136682,-3.927100,1.471664,7.470048,-8.173470,1.092202,-5.942637,0.995541,-6.481212,3.057279,2.174071,-5.502321,2.038018,-7.751791,1.582259,3.900493,-7.728095,-5.215187,-4.999377,-3.491253,-6.585454,-8.655123,8.289641,-7.727760,-0.767594,-3.362263,-3.255512,8.124012,2.911378,7.497913,8.999978,-5.858383,-7.237501,3.114586,-9.702447,6.462362,8.240254,7.768446,-3.376615,-0.961204,2.440073,-0.830470,7.327383,1.961612,0.215309,5.999994,3.964229,-6.042543,7.543046,5.204923,5.480831,-0.950168,-9.926501,6.476505,7.514619,9.489096,-2.327510,-5.236135,6.592627,1.704737,-3.125070,6.007057,-7.936696,-7.073304,-4.543355,-5.725666,-4.936079,-2.621554,-2.507037,2.011295,-0.542157,6.103958,-1.545895,-1.740117,2.229813,-6.199904,6.644899,-6.648815,6.404403,1.901314,-6.010149,1.415545,-5.106873,9.381776,-5.790081,4.514208,2.185122,0.405841,-5.572846,8.168381,3.457050,-4.465434,4.448205,5.147078,8.473442,-4.493862,-6.457212,-0.289862,-4.940341,9.574337,1.356943,4.779590,5.702940,-9.723866,-4.485513,-9.364064,-0.305582,-1.693141,8.201748,-8.175218,-6.843732,-3.967753,0.643036,-3.260131,-1.275030,-2.507047,-1.760368,-6.001067,-4.281174,2.823470,-3.699488,1.864608,-9.902923,-2.560515,7.658900,-2.764837,-9.100823,-7.827408,-5.488186,6.762201,-4.851970,-6.411868,6.803308,8.785598,5.773208,-1.509555,-3.406518,-8.680351,-6.422067,-6.398246,-8.200895,3.831628,1.385823,-8.534389,-6.108047,-3.912422,0.231362,8.751687,6.898316,-9.083746,-8.756803,-7.827876,-3.927276,4.921323,8.488129,-1.110909,3.678004,-3.080969,4.482527,-8.009496,-2.557432,6.729568,6.393533,-0.510954,7.043931,6.512663,-4.108894,-9.150109,3.781495,2.339620,2.873438,-3.052520,8.236675,9.267748,4.110523,8.294386,-4.750966,2.739151,3.201704,-4.356417,-2.273838,-5.173407,0.334202,-6.523712,4.919048,8.601840,5.582614,1.619637,9.359537,-5.825636,-0.698276,-4.570016,-6.914919,-3.717746,-7.287284,-6.836245,-1.620970,5.523691,9.863539,-0.159242,4.997117,3.294749,1.288568,9.932035,1.700687,9.603339,7.351021,-9.852406,4.516801,-3.945231,5.374209,2.434798,2.381353,8.289255,-5.638337,6.465364,2.245424,-9.771899,4.968209,0.503174,3.562272,-5.583995,4.759648,-4.511189,6.538555,-7.238424,4.411010,1.902622,-3.974848,7.633366,-7.695662,-8.044430,5.172585,3.147213,-7.458920,4.218140,1.077141,4.305722,-4.481506,-6.600518,-5.568295,-0.834729,-6.876523,-3.702886,-1.399980,8.686544,8.123122,6.953326,-7.914884,1.955637,1.509653,4.952330,4.061922,0.898028,-2.486952,2.809807,-3.185666,9.195532,8.719698,3.104194,6.230099,1.941209,-2.436505,-1.695065,0.805456,-5.353244,-7.801283,8.038152,-0.747307,-0.725509,-0.981574,8.038328,4.490920,5.513041,-1.793691,3.761174,7.744063,-7.133763,5.277908,1.578337,9.246672,5.149458,2.216935,2.890014,-6.663077,-3.543639,5.981613,0.002794,-8.144899,-5.068597,-9.205041,7.264160,-3.320712,8.941461,-5.400527,-4.946812,-7.482756,2.842354,-6.423021,9.880961,-9.932746,-5.968307,5.715242,8.091784,-8.154760,4.719273,2.372813,7.280335,-7.003747,8.166440,4.890316,-1.295137,7.558370,6.240074,-7.654023,-4.160098,-1.694035,7.152438,0.098909,-6.966388,-1.566530,-9.357792,-1.990650,8.120990,-4.083704,4.103054,-1.194020,-3.308652,7.318022,0.153080,-0.419028,5.756628,-1.826468,7.551840,0.092961,-9.470311,3.500305,4.591737,-0.421336,-7.102878,7.765006,-8.634842,-1.558937,8.540752,-0.080108,7.863251,7.692842,7.969853,9.737307,2.132086,-9.498061,-1.217139,-8.088616,2.378639,-6.887669,6.062982,7.446450,4.846951,-7.584423,-8.042320,-1.171449,-3.327097,-1.611926,6.866404,-5.052314,-0.022471,-6.047629,-9.050416,-6.949013,0.932537,9.867738,-0.550711,-9.802398,-2.969459,-7.756774,1.489823,7.911380,-5.216877,-1.238854,8.727556,-0.813693,5.003972,8.373800,1.103144,-6.604043,-7.320337,-0.654117,-2.061186,1.322368,1.571655,1.382406,-7.261368,-8.924253,-1.677052,-9.093467,5.786286,9.515933,-8.858609,-4.459403,-9.733780,-7.266960,4.268009,7.513703,-5.614323,-2.686384,0.935714,-6.771891,-4.619506,-0.770459,7.100838,7.166997,-7.391180,-1.742816,5.869800,-0.387721,3.411744,-7.707482,0.636850,-0.886744,-9.221914,-7.280300,8.110275,2.212068,1.725695,-0.646119,7.430266,-9.084191,9.605414,-9.825127,7.795761,-4.877541,9.400959,3.413832,0.006951,-9.170435,6.118607,9.865794,-4.875944,-2.773504,-9.577076,-6.538026,-0.820640,4.064143,6.242119,-7.402997,4.129658,3.160440,-1.197390,7.784459,6.548551,8.836805,-4.930855,9.653267,-3.536828,2.399670,-4.074578,-4.438570,-1.186151,-0.892298,4.042191,-9.546351,-4.671279,2.991682,5.130336,-7.227062,7.162665,7.897846,-2.859076,-8.901589,-9.549335,3.642442,6.834170,-8.344860,-6.488066,-2.070221,9.722849,-4.973487,-3.010928,-2.538579,-2.790271,-1.221213,3.293620,-4.372620,-6.223783,-7.099439,-8.022986,-6.608543,4.382698,2.408845,5.610334,1.628115,-0.335929,-9.007929,8.933084,-0.602519,2.009359,8.435395,-5.210735,-4.380863,-1.728231,-1.095490,5.499130,3.806558,1.494897,-0.297602,-5.011727,6.388180,7.268576,2.760281,5.239015,-5.188168,9.538263,5.077765,1.443629,-3.597615,-6.059192,-6.213119,8.500493,-4.126201,-4.704000,-8.256119,-1.879023,-0.024124,0.118669,-9.242551,7.441600,-8.078498,2.327833,4.923167,2.537220,-0.962394,-0.288324,6.334145,-6.185748,-9.272373,-2.866517,6.541594,-7.666157,-9.894728,-8.981522,-4.340264,-8.464137,-1.701914,-8.548457,-9.555957,5.057202,4.950412,-8.637209,-6.554116,-7.970806,7.616628,7.390443,1.772185,-6.340193,8.847390,1.002897,2.060196,-4.470719,4.214286,7.192810,4.076406,-2.692669,-4.503034,1.774320,-3.467758,6.393462,5.274315,-8.832627,-3.746229,-5.438858,2.675301,-8.908781,2.887005,-9.528808,2.627893,5.563252,4.614530,-4.511318,-1.232035,-7.576650,9.391052,-5.263510,-2.815423,-0.542989,-4.257157,-8.545387,-5.617568,-8.437427,-5.698419,-4.780053,-0.455620,-0.117778,3.851629,3.936849,-2.842864,-8.539195,8.376976,-0.709260,-2.042569,-1.358799,-5.061766,-4.501923,8.772332,-0.493252,-5.687698,-0.880772,-5.981269,-7.854569,1.947963,9.804122,0.508752,5.448295,8.030384,-7.602026,-1.048048,-5.788946,7.740356,2.752335,7.216298,-3.489370,-3.634919,-5.764815,9.843369,6.864203,-5.179179,1.119259,-4.044753,-8.260376,-4.179147,8.288340,3.273058,3.105928,1.324453,-7.044680,4.637333,-8.162440,8.308741,-8.650985,9.084421,0.561536,5.076306,8.180822,4.058563,4.397977,-9.128703,0.648644,-7.601883,-2.991523,3.459882,-6.778055,-3.097197,1.022117,3.815754,-8.718955,4.473321,-9.245590,-0.337749,-1.624491,3.564927,-8.911382,0.198146,4.866600,-7.525390,3.000262,-6.085020,-2.321103,-4.394819,-0.390967,-2.587691,-2.504836,-0.357870,-3.970022,-4.445381,0.771803,-7.810814,6.057906,5.548077,0.571975,-8.914676,0.646620,-2.943391,7.288692,1.816748,-7.646884,3.159425,6.020194,5.286050,-4.364399,5.163623,2.724251,7.955861,1.420632,5.261133,5.076388,7.681414,2.147800,-0.859844,-6.015581,-9.667369,0.303289,6.643136,-6.185902,-1.776999,-5.922692,-2.965665,6.689000,-3.723759,-1.536005,6.180399,5.745916,-1.119585,-9.195362,-9.533665,0.237646,0.664673,-9.237398,2.497091,0.627187,0.834105,2.565099,7.493767,-2.714777,2.808839,-0.455861,-2.943491,1.965340,-2.666171,4.825343,-1.392775,2.417006,-8.239846,-3.520250,-9.815242,3.203974,1.124547,8.592835,-0.160034,-9.465996,-3.291427,-4.245427,4.638048,-8.116094,-7.883472,-5.125687,-7.605028,-5.328770,2.198494,-0.577963,7.034225,3.124800,0.062970,9.645920,-7.706273,2.707519,-0.707078,6.530891,-6.725763,8.351875,-7.163366,6.274828,-9.841851,6.309647,7.167027,0.762468,4.521412,2.509893,-9.608198,-1.809281,1.139681,9.244201,-4.552461,1.891125,-3.142365,8.369967,-6.661945,7.270358,-3.699902,-1.686849,1.112697,-0.294578,-2.674947,8.221852,7.658638,-0.266421,7.576895,-0.710168,-7.895437,-7.808288,8.057556,4.698163,8.810370,-7.339932,6.854703,7.764054,-7.945673,-1.849283,2.221293,6.763433,8.486685,9.690122,-9.217984,-8.630385,9.966893,0.017636,-7.136891,-5.817332,-4.714262,-6.241217,0.890241,-1.930724,2.896212,7.447532,-4.884498,7.629891,-9.850688,-3.142243,9.683143,7.403750,-3.305900,4.830274,-7.514203,-1.495607,-8.050924,-7.713335,-3.495354,5.043320,8.536464,-7.707372,-5.885440,-0.582003,4.642500,7.582213,9.478432,6.406508,7.055480,0.579176,6.228956,-7.950333,-2.955543,1.034035,5.014348,-6.563839,8.729489,-5.963081,8.175099,-7.951095,-1.225794,8.294564,6.356966,8.277119,5.643585,-4.188142,-1.391555,-2.343316,1.118309,6.314592,-5.012868,-8.317055,-2.638640,7.309890,1.388541,-8.509814,2.372938,2.288637,7.470319,-3.808255,1.746859,2.476236,9.205642,-6.475296,4.071344,-6.911405,-4.618500,-9.925363,7.575104,-0.351370,2.967876,-5.560300,-1.747704,7.141122,-7.174019,-3.512206,-6.239199,0.874670,4.982686,7.017787,2.027666,-7.819506,-9.162968,1.844658,5.948697,-4.622924,-8.188942,7.583392,-2.485235,-7.573901,-1.503778,6.119540,-3.712073,2.759396,-0.314869,3.442256,-2.703892,1.004422,-5.383890,-6.822433,-0.772343,-4.732052,-5.067420,2.114241,7.754533,4.547935,-8.445569,-5.993164,-6.214413,-5.058582,-9.763436,-4.102474,-5.369158,8.923960,-3.763942,-8.576036,-3.408058,-2.076637,-3.360166,-5.340365,1.974075,-3.177843,-7.471667,0.649780,-3.495213,6.529925,6.808787,7.315563,-3.781529,-2.561389,-0.593874,8.724267,9.909464,7.562983,-6.990891,6.183012,-8.919212,4.858130,0.114215,4.422641,7.274740,-3.746188,-3.329038,-2.543206,6.322016,-0.483799,7.944679,-1.648917,2.659871,-6.907020,6.841058,9.723580,2.486200,-6.481622,1.052565,-1.339111,8.420213,3.283054,-4.120736,-5.124877,-8.777639,-4.877315,-8.000941,5.767548,-1.952071,7.449924,3.722446,0.045767,-3.379182,1.216754,9.804083,-6.160568,9.802785,3.616835,7.281409,1.565669,-4.677417,2.167467,-9.868647,-4.787065,-4.928350,3.744392,-8.568530,0.457048,-6.259873,4.652655,-4.289525,-2.693592,3.190435,-0.332643,1.330583,8.091906,1.985117,7.525066,6.960788,-7.505452,8.344652,7.330670,9.857810,-1.552597,-0.961729,8.889333,8.162204,-6.759849,8.817679,1.574022,-5.230349,-3.579495,8.990645,2.877117,7.918721,5.269485,7.770717,0.364620,9.975045,8.792009,7.806142,-0.541461,-4.406391,3.941374,9.461905,4.376345,1.278323,7.717504,6.685326,1.200467,8.301693,9.944878,-7.917126,5.966801,1.014807,6.866346,6.100169,2.829809,-6.634415,-6.639686,-7.998821,3.525306,1.942206,-9.180982,6.522255,-7.270503,-1.038534,-3.696192,-5.240988,-8.100848,-7.414437,-6.929616,-3.281917,0.320457,-3.383796,-0.909011,6.856707,9.938500,5.830950,9.267078,5.175760,3.706213,-3.123370,-2.287578,6.997300,-0.360823,-6.168781,4.660572,-3.656756,1.225505,-3.777454,1.438257,8.721339,7.590410,9.952447,-9.369940,-2.260685,-1.786959,2.715089,2.209871,-5.136922,-9.858748,-3.859471,2.412641,-8.313075,6.095925,-3.435930,6.997048,1.750452,-3.074328,8.444220,-0.635330,-7.888063,-1.678411,0.907151,-8.062819,9.723868,2.075106,2.268418,1.933184,4.665276,-0.847810,1.812126,-5.311435,-0.501467,2.216556,5.048865,6.454032,1.483730,1.533221,5.426897,-2.289569,-3.530884,-7.820379,-4.609160,7.979160,8.124075,2.079812,9.484906,7.621609,3.975066,-5.162243,-5.731536,-2.266961,8.715885,7.649936,-3.443607,-1.427109,0.666049,-9.151359,-7.456832,9.452353,4.527437,-4.505217,-4.169940,6.689370,3.829792,-8.181998,9.509999,4.071967,-2.590060,-9.016228,-6.789477,7.223933,4.147784,2.575977,-0.569805,2.064577,4.910174,-3.037925,-1.617142,8.436320,0.048081,8.506566,8.501294,-1.276773,8.288112,-7.219624,1.005402,9.314874,1.718379,-9.808220,-2.869295,9.949001,8.178608,2.912141,4.351637,8.289044,5.122416,-5.236149,4.219805,-6.351129,9.284470,-0.586604,4.760433,3.067465,-6.209857,-6.268600,-3.166415,9.349387,4.295110,2.225822,9.614773,-5.901986,0.422698,3.212911,9.211133,-1.568320,-2.730245,2.655938,-2.887052,-7.637138,-3.435081,3.626716,6.005564,-3.282089,-5.384976,5.067391,0.710188,-4.004093,-1.164799,7.224086,2.128643,-6.875489,0.447841,4.013554,3.446640,-0.459648,-3.042522,-6.038924,-5.998899,6.226796,-9.381848,6.038839,-9.171032,-9.838638,5.427023,-9.476467,3.317304,7.346223,-6.190941,1.058282,-7.415928,4.318012,7.501404,-0.297221,-2.510842,-4.342518,6.464066,-2.833437,2.495482,-3.090886,1.642141,-6.130348,-3.439562,0.002991,-9.740092,-5.639870,-5.459051,-9.524195,8.154068,-1.977930,-3.833393,-5.186878,-9.000922,7.335152,0.074697,-6.317595,-1.424006,-7.281042,-4.900505,4.914812,-0.891063,-1.378487,6.492339,-4.318986,6.679782,-1.130553,-6.767273,9.390753,-4.877869,-9.336017,7.320969,-4.676336,2.055440,-3.232556,-9.111625,9.688746,2.043307,9.525398,-4.504121], dtype = "float64")#candidate|1245|(1536,)|const|float64
call_1242 = relay.TupleGetItem(func_921_call(relay.reshape(const_1243.astype('float64'), [8, 11, 13]), relay.reshape(var_1244.astype('float32'), [840,]), relay.reshape(const_1245.astype('float64'), [1536,]), ), 1)
call_1246 = relay.TupleGetItem(func_926_call(relay.reshape(const_1243.astype('float64'), [8, 11, 13]), relay.reshape(var_1244.astype('float32'), [840,]), relay.reshape(const_1245.astype('float64'), [1536,]), ), 1)
func_688_call = mod.get_global_var('func_688')
func_691_call = mutated_mod.get_global_var('func_691')
call_1249 = relay.TupleGetItem(func_688_call(relay.reshape(call_1242.astype('float32'), [7, 10, 12])), 0)
call_1250 = relay.TupleGetItem(func_691_call(relay.reshape(call_1242.astype('float32'), [7, 10, 12])), 0)
uop_1255 = relay.tan(const_1243.astype('float64')) # shape=(1144,)
uop_1257 = relay.rsqrt(uop_1236.astype('float32')) # shape=(11, 13, 10)
uop_1260 = relay.sinh(const_1230.astype('float32')) # shape=(11, 13, 10)
var_1262 = relay.var("var_1262", dtype = "float32", shape = (11, 13, 10))#candidate|1262|(11, 13, 10)|var|float32
bop_1263 = relay.floor_mod(uop_1257.astype('float64'), relay.reshape(var_1262.astype('float64'), relay.shape_of(uop_1257))) # shape=(11, 13, 10)
func_948_call = mod.get_global_var('func_948')
func_950_call = mutated_mod.get_global_var('func_950')
call_1273 = func_948_call()
call_1274 = func_948_call()
func_978_call = mod.get_global_var('func_978')
func_979_call = mutated_mod.get_global_var('func_979')
call_1276 = relay.TupleGetItem(func_978_call(), 0)
call_1277 = relay.TupleGetItem(func_979_call(), 0)
bop_1280 = relay.bitwise_xor(bop_1263.astype('uint32'), relay.reshape(uop_1257.astype('uint32'), relay.shape_of(bop_1263))) # shape=(11, 13, 10)
output = relay.Tuple([bop_1232,call_1242,var_1244,const_1245,call_1249,uop_1255,uop_1260,call_1273,call_1276,bop_1280,])
output2 = relay.Tuple([bop_1232,call_1246,var_1244,const_1245,call_1250,uop_1255,uop_1260,call_1274,call_1277,bop_1280,])
func_1283 = relay.Function([var_1231,var_1244,var_1262,], output)
mod['func_1283'] = func_1283
mod = relay.transform.InferType()(mod)
mutated_mod['func_1283'] = func_1283
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1283_call = mutated_mod.get_global_var('func_1283')
var_1285 = relay.var("var_1285", dtype = "uint32", shape = (11, 13, 10))#candidate|1285|(11, 13, 10)|var|uint32
var_1286 = relay.var("var_1286", dtype = "float32", shape = (840,))#candidate|1286|(840,)|var|float32
var_1287 = relay.var("var_1287", dtype = "float32", shape = (11, 13, 10))#candidate|1287|(11, 13, 10)|var|float32
call_1284 = func_1283_call(var_1285,var_1286,var_1287,)
output = call_1284
func_1288 = relay.Function([var_1285,var_1286,var_1287,], output)
mutated_mod['func_1288'] = func_1288
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1290 = relay.var("var_1290", dtype = "uint8", shape = (4, 9))#candidate|1290|(4, 9)|var|uint8
const_1291 = relay.const([[10,-1,10,-8,4,9,-10,10,7],[7,-3,8,8,7,-4,4,-2,2],[-6,6,-10,4,5,3,4,-8,10],[4,-2,2,7,-3,-10,2,7,-7]], dtype = "uint8")#candidate|1291|(4, 9)|const|uint8
bop_1292 = relay.greater_equal(var_1290.astype('bool'), relay.reshape(const_1291.astype('bool'), relay.shape_of(var_1290))) # shape=(4, 9)
output = relay.Tuple([bop_1292,])
output2 = relay.Tuple([bop_1292,])
func_1302 = relay.Function([var_1290,], output)
mod['func_1302'] = func_1302
mod = relay.transform.InferType()(mod)
mutated_mod['func_1302'] = func_1302
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1303 = relay.var("var_1303", dtype = "uint8", shape = (4, 9))#candidate|1303|(4, 9)|var|uint8
func_1302_call = mutated_mod.get_global_var('func_1302')
call_1304 = func_1302_call(var_1303)
output = call_1304
func_1305 = relay.Function([var_1303], output)
mutated_mod['func_1305'] = func_1305
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1319 = relay.var("var_1319", dtype = "float32", shape = (13, 4, 2))#candidate|1319|(13, 4, 2)|var|float32
uop_1320 = relay.acosh(var_1319.astype('float32')) # shape=(13, 4, 2)
uop_1325 = relay.asinh(uop_1320.astype('float64')) # shape=(13, 4, 2)
bop_1327 = relay.not_equal(uop_1325.astype('bool'), relay.reshape(var_1319.astype('bool'), relay.shape_of(uop_1325))) # shape=(13, 4, 2)
uop_1331 = relay.log(uop_1320.astype('float64')) # shape=(13, 4, 2)
bop_1334 = relay.floor_divide(uop_1331.astype('float64'), relay.reshape(uop_1325.astype('float64'), relay.shape_of(uop_1331))) # shape=(13, 4, 2)
bop_1337 = relay.minimum(uop_1320.astype('uint8'), relay.reshape(uop_1325.astype('uint8'), relay.shape_of(uop_1320))) # shape=(13, 4, 2)
const_1340 = relay.const([[[6,-8],[-9,-10],[-2,7],[7,5]],[[6,1],[1,3],[-5,-9],[-8,-3]],[[-4,-7],[9,10],[-6,-1],[6,5]],[[5,-8],[-1,4],[-5,7],[2,10]],[[-8,-9],[-4,-8],[-9,-5],[5,5]],[[-5,6],[-5,2],[-5,-5],[-6,1]],[[4,10],[-10,-10],[7,3],[3,-2]],[[4,-6],[10,1],[6,10],[-3,-7]],[[4,4],[-8,-4],[10,-9],[-5,5]],[[10,-10],[-9,6],[7,1],[-1,-6]],[[8,9],[-6,2],[-10,9],[1,7]],[[-5,-4],[8,-2],[-5,2],[1,-1]],[[7,6],[-4,-9],[1,-4],[-2,-8]]], dtype = "uint8")#candidate|1340|(13, 4, 2)|const|uint8
bop_1341 = relay.divide(bop_1337.astype('float32'), relay.reshape(const_1340.astype('float32'), relay.shape_of(bop_1337))) # shape=(13, 4, 2)
bop_1353 = relay.power(bop_1334.astype('float32'), relay.reshape(bop_1327.astype('float32'), relay.shape_of(bop_1334))) # shape=(13, 4, 2)
func_1057_call = mod.get_global_var('func_1057')
func_1061_call = mutated_mod.get_global_var('func_1061')
var_1363 = relay.var("var_1363", dtype = "float64", shape = (4,))#candidate|1363|(4,)|var|float64
var_1364 = relay.var("var_1364", dtype = "float64", shape = (2,))#candidate|1364|(2,)|var|float64
call_1362 = relay.TupleGetItem(func_1057_call(relay.reshape(var_1363.astype('float64'), [4,]), relay.reshape(var_1364.astype('float64'), [2,]), ), 0)
call_1365 = relay.TupleGetItem(func_1061_call(relay.reshape(var_1363.astype('float64'), [4,]), relay.reshape(var_1364.astype('float64'), [2,]), ), 0)
uop_1370 = relay.erf(uop_1325.astype('float32')) # shape=(13, 4, 2)
uop_1372 = relay.sinh(var_1319.astype('float32')) # shape=(13, 4, 2)
bop_1376 = relay.maximum(uop_1370.astype('uint32'), relay.reshape(bop_1341.astype('uint32'), relay.shape_of(uop_1370))) # shape=(13, 4, 2)
output = relay.Tuple([bop_1353,call_1362,var_1363,var_1364,uop_1372,bop_1376,])
output2 = relay.Tuple([bop_1353,call_1365,var_1363,var_1364,uop_1372,bop_1376,])
func_1388 = relay.Function([var_1319,var_1363,var_1364,], output)
mod['func_1388'] = func_1388
mod = relay.transform.InferType()(mod)
var_1389 = relay.var("var_1389", dtype = "float32", shape = (13, 4, 2))#candidate|1389|(13, 4, 2)|var|float32
var_1390 = relay.var("var_1390", dtype = "float64", shape = (4,))#candidate|1390|(4,)|var|float64
var_1391 = relay.var("var_1391", dtype = "float64", shape = (2,))#candidate|1391|(2,)|var|float64
output = func_1388(var_1389,var_1390,var_1391,)
func_1392 = relay.Function([var_1389,var_1390,var_1391,], output)
mutated_mod['func_1392'] = func_1392
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1397 = relay.var("var_1397", dtype = "float32", shape = (8, 12))#candidate|1397|(8, 12)|var|float32
uop_1398 = relay.log2(var_1397.astype('float32')) # shape=(8, 12)
uop_1400 = relay.log(uop_1398.astype('float64')) # shape=(8, 12)
uop_1403 = relay.asin(uop_1398.astype('float64')) # shape=(8, 12)
bop_1405 = relay.right_shift(uop_1398.astype('int32'), relay.reshape(uop_1403.astype('int32'), relay.shape_of(uop_1398))) # shape=(8, 12)
output = relay.Tuple([uop_1400,bop_1405,])
output2 = relay.Tuple([uop_1400,bop_1405,])
func_1408 = relay.Function([var_1397,], output)
mod['func_1408'] = func_1408
mod = relay.transform.InferType()(mod)
mutated_mod['func_1408'] = func_1408
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1409 = relay.var("var_1409", dtype = "float32", shape = (8, 12))#candidate|1409|(8, 12)|var|float32
func_1408_call = mutated_mod.get_global_var('func_1408')
call_1410 = func_1408_call(var_1409)
output = call_1410
func_1411 = relay.Function([var_1409], output)
mutated_mod['func_1411'] = func_1411
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6_call = mod.get_global_var('func_6')
func_8_call = mutated_mod.get_global_var('func_8')
call_1478 = func_6_call()
call_1479 = func_6_call()
output = call_1478
output2 = call_1479
func_1487 = relay.Function([], output)
mod['func_1487'] = func_1487
mod = relay.transform.InferType()(mod)
output = func_1487()
func_1488 = relay.Function([], output)
mutated_mod['func_1488'] = func_1488
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1516 = relay.const([[[-3.968695,3.359691,8.094037,7.627776,3.358215,3.505274,-8.667406,-4.194442,-1.175420,-5.231101,-7.871915,-8.716194,-4.237862,6.762702,3.830937]],[[8.825753,2.633731,-9.557368,7.396656,8.254965,5.552574,7.629275,-4.262797,-8.435867,6.702352,0.154928,4.829017,-4.052050,5.779972,2.376628]],[[-7.322388,-6.727225,0.701328,-9.280347,-5.395617,0.757164,2.688539,3.284181,9.475555,-0.136354,8.660989,-2.465604,2.467524,-1.455322,-9.521332]],[[-9.118680,-6.073894,3.879987,6.765783,-5.884244,3.867130,-1.921406,-7.672041,-9.027636,8.822694,-9.899010,-1.395369,6.177464,3.189054,-8.145412]],[[1.889313,1.648345,3.953203,-3.265234,-0.124907,8.173311,-0.852989,-4.627988,7.012912,-7.977754,1.010210,4.536254,0.505488,-6.952014,-5.041905]],[[9.716904,6.536196,9.063554,8.006990,4.365822,-6.540771,9.466757,-6.197962,3.695070,-4.310896,-0.977674,-2.448547,-1.593709,-7.143739,9.940889]],[[3.459138,7.224811,3.228050,-2.010591,-0.711589,-7.947579,-2.337435,8.379136,-0.991264,-5.193405,4.704119,-3.839766,8.779448,0.245824,2.854770]],[[-2.121658,3.573826,5.701974,5.892571,9.727393,-5.129711,-1.333473,0.919872,6.177386,9.702139,9.912481,9.872176,-2.214893,-5.132404,-9.317605]],[[-5.368740,-7.765497,-2.073493,-2.593104,3.321359,2.757849,-7.211173,-2.142476,-5.801616,9.814981,-6.084384,-7.074918,-5.118266,-5.404640,-2.484049]],[[3.592701,4.781030,9.493928,9.794520,7.455397,0.314561,-4.210160,9.592486,-8.287602,8.402057,3.711096,-6.926266,0.512011,-9.938172,7.028515]]], dtype = "float64")#candidate|1516|(10, 1, 15)|const|float64
uop_1517 = relay.erf(const_1516.astype('float64')) # shape=(10, 1, 15)
bop_1519 = relay.logical_xor(const_1516.astype('uint32'), relay.reshape(uop_1517.astype('uint32'), relay.shape_of(const_1516))) # shape=(10, 1, 15)
var_1525 = relay.var("var_1525", dtype = "uint32", shape = (10, 13, 15))#candidate|1525|(10, 13, 15)|var|uint32
bop_1526 = relay.less(bop_1519.astype('bool'), var_1525.astype('bool')) # shape=(10, 13, 15)
output = bop_1526
output2 = bop_1526
func_1532 = relay.Function([var_1525,], output)
mod['func_1532'] = func_1532
mod = relay.transform.InferType()(mod)
mutated_mod['func_1532'] = func_1532
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1533 = relay.var("var_1533", dtype = "uint32", shape = (10, 13, 15))#candidate|1533|(10, 13, 15)|var|uint32
func_1532_call = mutated_mod.get_global_var('func_1532')
call_1534 = func_1532_call(var_1533)
output = call_1534
func_1535 = relay.Function([var_1533], output)
mutated_mod['func_1535'] = func_1535
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1487_call = mod.get_global_var('func_1487')
func_1488_call = mutated_mod.get_global_var('func_1488')
call_1543 = func_1487_call()
call_1544 = func_1487_call()
func_6_call = mod.get_global_var('func_6')
func_8_call = mutated_mod.get_global_var('func_8')
call_1553 = func_6_call()
call_1554 = func_6_call()
output = relay.Tuple([call_1543,call_1553,])
output2 = relay.Tuple([call_1544,call_1554,])
func_1555 = relay.Function([], output)
mod['func_1555'] = func_1555
mod = relay.transform.InferType()(mod)
mutated_mod['func_1555'] = func_1555
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1555_call = mutated_mod.get_global_var('func_1555')
call_1556 = func_1555_call()
output = call_1556
func_1557 = relay.Function([], output)
mutated_mod['func_1557'] = func_1557
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1577 = relay.const([[[7,1,9,8,4],[-6,2,-6,-10,-5],[-6,9,6,-4,-7],[10,-9,3,2,1],[5,5,-9,-10,-1]],[[-3,-2,10,-10,-1],[-3,2,-2,1,-6],[10,-4,-9,-7,3],[2,6,6,1,8],[4,5,-3,-3,-2]],[[9,-8,-10,-5,6],[6,1,3,6,5],[10,-5,-7,3,-3],[7,-9,-4,-4,6],[4,-9,4,6,7]],[[-3,-1,1,7,8],[-1,3,-1,-10,5],[-6,-8,5,8,9],[5,10,2,-3,-7],[10,-7,-9,9,5]],[[5,-2,10,-4,-1],[4,7,-1,7,-8],[9,4,9,4,5],[2,3,-3,-1,1],[-2,-9,9,7,-6]]], dtype = "uint8")#candidate|1577|(5, 5, 5)|const|uint8
var_1578 = relay.var("var_1578", dtype = "uint8", shape = (5, 5, 5))#candidate|1578|(5, 5, 5)|var|uint8
bop_1579 = relay.equal(const_1577.astype('bool'), relay.reshape(var_1578.astype('bool'), relay.shape_of(const_1577))) # shape=(5, 5, 5)
uop_1583 = relay.asinh(var_1578.astype('float64')) # shape=(5, 5, 5)
uop_1585 = relay.sqrt(uop_1583.astype('float32')) # shape=(5, 5, 5)
bop_1587 = relay.minimum(uop_1585.astype('uint16'), relay.reshape(bop_1579.astype('uint16'), relay.shape_of(uop_1585))) # shape=(5, 5, 5)
uop_1594 = relay.erf(uop_1585.astype('float32')) # shape=(5, 5, 5)
func_1093_call = mod.get_global_var('func_1093')
func_1098_call = mutated_mod.get_global_var('func_1098')
const_1599 = relay.const([[-1,1],[-3,-3],[7,-3],[-4,-1],[7,8],[5,3],[-8,-5],[-2,3],[1,-3],[2,-1],[3,-6],[-8,-8],[2,6],[9,-3],[-8,-5],[7,-6],[-1,-3],[6,2]], dtype = "int64")#candidate|1599|(18, 2)|const|int64
const_1600 = relay.const([-5,-5,8,-8,-10,10,5,-10,-4,3,-1], dtype = "int16")#candidate|1600|(11,)|const|int16
call_1598 = relay.TupleGetItem(func_1093_call(relay.reshape(const_1599.astype('int64'), [6, 6]), relay.reshape(const_1599.astype('int64'), [6, 6]), relay.reshape(const_1600.astype('int16'), [11, 1]), ), 0)
call_1601 = relay.TupleGetItem(func_1098_call(relay.reshape(const_1599.astype('int64'), [6, 6]), relay.reshape(const_1599.astype('int64'), [6, 6]), relay.reshape(const_1600.astype('int16'), [11, 1]), ), 0)
uop_1603 = relay.sin(uop_1583.astype('float64')) # shape=(5, 5, 5)
bop_1608 = relay.bitwise_or(uop_1594.astype('int16'), relay.reshape(bop_1579.astype('int16'), relay.shape_of(uop_1594))) # shape=(5, 5, 5)
const_1617 = relay.const([[[False,True,False,False,True],[False,False,True,False,True],[False,True,False,True,False],[False,False,True,True,False],[True,False,False,True,True]],[[False,True,False,False,False],[True,False,True,True,False],[False,True,False,True,True],[True,True,False,True,True],[False,False,True,True,True]],[[True,False,True,False,True],[False,False,False,True,False],[False,False,True,True,True],[True,False,False,False,True],[True,True,True,True,True]],[[False,True,True,True,False],[False,False,True,True,False],[False,False,False,True,True],[True,True,True,False,True],[False,True,True,False,True]],[[False,True,True,True,False],[False,True,True,True,False],[True,True,True,False,False],[True,True,False,False,False],[True,True,True,False,True]]], dtype = "bool")#candidate|1617|(5, 5, 5)|const|bool
bop_1618 = relay.divide(bop_1579.astype('float64'), relay.reshape(const_1617.astype('float64'), relay.shape_of(bop_1579))) # shape=(5, 5, 5)
bop_1625 = relay.greater(bop_1587.astype('bool'), relay.reshape(uop_1585.astype('bool'), relay.shape_of(bop_1587))) # shape=(5, 5, 5)
output = relay.Tuple([call_1598,const_1599,const_1600,uop_1603,bop_1608,bop_1618,bop_1625,])
output2 = relay.Tuple([call_1601,const_1599,const_1600,uop_1603,bop_1608,bop_1618,bop_1625,])
func_1628 = relay.Function([var_1578,], output)
mod['func_1628'] = func_1628
mod = relay.transform.InferType()(mod)
var_1629 = relay.var("var_1629", dtype = "uint8", shape = (5, 5, 5))#candidate|1629|(5, 5, 5)|var|uint8
output = func_1628(var_1629)
func_1630 = relay.Function([var_1629], output)
mutated_mod['func_1630'] = func_1630
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1555_call = mod.get_global_var('func_1555')
func_1557_call = mutated_mod.get_global_var('func_1557')
call_1632 = relay.TupleGetItem(func_1555_call(), 0)
call_1633 = relay.TupleGetItem(func_1557_call(), 0)
func_1408_call = mod.get_global_var('func_1408')
func_1411_call = mutated_mod.get_global_var('func_1411')
var_1636 = relay.var("var_1636", dtype = "float32", shape = (96,))#candidate|1636|(96,)|var|float32
call_1635 = relay.TupleGetItem(func_1408_call(relay.reshape(var_1636.astype('float32'), [8, 12])), 0)
call_1637 = relay.TupleGetItem(func_1411_call(relay.reshape(var_1636.astype('float32'), [8, 12])), 0)
func_561_call = mod.get_global_var('func_561')
func_563_call = mutated_mod.get_global_var('func_563')
call_1640 = func_561_call(relay.reshape(call_1632.astype('float32'), [7, 10, 12]))
call_1641 = func_561_call(relay.reshape(call_1632.astype('float32'), [7, 10, 12]))
func_597_call = mod.get_global_var('func_597')
func_599_call = mutated_mod.get_global_var('func_599')
call_1644 = relay.TupleGetItem(func_597_call(), 1)
call_1645 = relay.TupleGetItem(func_599_call(), 1)
func_1487_call = mod.get_global_var('func_1487')
func_1488_call = mutated_mod.get_global_var('func_1488')
call_1648 = func_1487_call()
call_1649 = func_1487_call()
func_249_call = mod.get_global_var('func_249')
func_253_call = mutated_mod.get_global_var('func_253')
const_1651 = relay.const([0.398158,-0.432446,-0.229961,-0.601661,-5.102471,7.079003,3.464681,0.763634,-7.011963,-3.824160,6.283310,9.620526,0.922166,-9.072725,6.227953,7.278517,-9.865673,-1.603008,-3.248426,-7.665285,2.388729,9.777755,-6.407322,-4.283023,8.310054,-6.851872,-5.761322,-3.722990,1.014567,-7.017168,-6.788915,-8.213394,-1.332512,5.461749,0.124345,4.463299,2.185346,7.446791,3.945759,-1.598266,4.519318,-6.953840,-5.421702,6.623605,6.111208,-2.878349,4.604955,-1.037228], dtype = "float32")#candidate|1651|(48,)|const|float32
var_1652 = relay.var("var_1652", dtype = "float64", shape = (1, 2))#candidate|1652|(1, 2)|var|float64
call_1650 = relay.TupleGetItem(func_249_call(relay.reshape(const_1651.astype('float32'), [48,]), relay.reshape(var_1652.astype('float64'), [2, 1]), ), 6)
call_1653 = relay.TupleGetItem(func_253_call(relay.reshape(const_1651.astype('float32'), [48,]), relay.reshape(var_1652.astype('float64'), [2, 1]), ), 6)
func_1057_call = mod.get_global_var('func_1057')
func_1061_call = mutated_mod.get_global_var('func_1061')
var_1674 = relay.var("var_1674", dtype = "float64", shape = (4,))#candidate|1674|(4,)|var|float64
call_1673 = relay.TupleGetItem(func_1057_call(relay.reshape(var_1674.astype('float64'), [4,]), relay.reshape(var_1652.astype('float64'), [2,]), ), 2)
call_1675 = relay.TupleGetItem(func_1061_call(relay.reshape(var_1674.astype('float64'), [4,]), relay.reshape(var_1652.astype('float64'), [2,]), ), 2)
func_1283_call = mod.get_global_var('func_1283')
func_1288_call = mutated_mod.get_global_var('func_1288')
var_1680 = relay.var("var_1680", dtype = "uint32", shape = (1430,))#candidate|1680|(1430,)|var|uint32
call_1679 = relay.TupleGetItem(func_1283_call(relay.reshape(var_1680.astype('uint32'), [11, 13, 10]), relay.reshape(call_1632.astype('float32'), [840,]), relay.reshape(var_1680.astype('float32'), [11, 13, 10]), ), 3)
call_1681 = relay.TupleGetItem(func_1288_call(relay.reshape(var_1680.astype('uint32'), [11, 13, 10]), relay.reshape(call_1632.astype('float32'), [840,]), relay.reshape(var_1680.astype('float32'), [11, 13, 10]), ), 3)
output = relay.Tuple([call_1632,call_1635,var_1636,call_1640,call_1644,call_1648,call_1650,const_1651,var_1652,call_1673,var_1674,call_1679,var_1680,])
output2 = relay.Tuple([call_1633,call_1637,var_1636,call_1641,call_1645,call_1649,call_1653,const_1651,var_1652,call_1675,var_1674,call_1681,var_1680,])
func_1682 = relay.Function([var_1636,var_1652,var_1674,var_1680,], output)
mod['func_1682'] = func_1682
mod = relay.transform.InferType()(mod)
var_1683 = relay.var("var_1683", dtype = "float32", shape = (96,))#candidate|1683|(96,)|var|float32
var_1684 = relay.var("var_1684", dtype = "float64", shape = (1, 2))#candidate|1684|(1, 2)|var|float64
var_1685 = relay.var("var_1685", dtype = "float64", shape = (4,))#candidate|1685|(4,)|var|float64
var_1686 = relay.var("var_1686", dtype = "uint32", shape = (1430,))#candidate|1686|(1430,)|var|uint32
output = func_1682(var_1683,var_1684,var_1685,var_1686,)
func_1687 = relay.Function([var_1683,var_1684,var_1685,var_1686,], output)
mutated_mod['func_1687'] = func_1687
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1696 = relay.var("var_1696", dtype = "uint64", shape = ())#candidate|1696|()|var|uint64
var_1697 = relay.var("var_1697", dtype = "uint64", shape = (2, 2, 1))#candidate|1697|(2, 2, 1)|var|uint64
bop_1698 = relay.less_equal(var_1696.astype('bool'), var_1697.astype('bool')) # shape=(2, 2, 1)
bop_1707 = relay.bitwise_xor(bop_1698.astype('uint64'), relay.reshape(var_1697.astype('uint64'), relay.shape_of(bop_1698))) # shape=(2, 2, 1)
output = bop_1707
output2 = bop_1707
func_1710 = relay.Function([var_1696,var_1697,], output)
mod['func_1710'] = func_1710
mod = relay.transform.InferType()(mod)
mutated_mod['func_1710'] = func_1710
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1710_call = mutated_mod.get_global_var('func_1710')
var_1712 = relay.var("var_1712", dtype = "uint64", shape = ())#candidate|1712|()|var|uint64
var_1713 = relay.var("var_1713", dtype = "uint64", shape = (2, 2, 1))#candidate|1713|(2, 2, 1)|var|uint64
call_1711 = func_1710_call(var_1712,var_1713,)
output = call_1711
func_1714 = relay.Function([var_1712,var_1713,], output)
mutated_mod['func_1714'] = func_1714
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1487_call = mod.get_global_var('func_1487')
func_1488_call = mutated_mod.get_global_var('func_1488')
call_1716 = func_1487_call()
call_1717 = func_1487_call()
func_561_call = mod.get_global_var('func_561')
func_563_call = mutated_mod.get_global_var('func_563')
call_1724 = func_561_call(relay.reshape(call_1716.astype('float32'), [7, 10, 12]))
call_1725 = func_561_call(relay.reshape(call_1716.astype('float32'), [7, 10, 12]))
output = relay.Tuple([call_1716,call_1724,])
output2 = relay.Tuple([call_1717,call_1725,])
func_1727 = relay.Function([], output)
mod['func_1727'] = func_1727
mod = relay.transform.InferType()(mod)
output = func_1727()
func_1728 = relay.Function([], output)
mutated_mod['func_1728'] = func_1728
mutated_mod = relay.transform.InferType()(mutated_mod)
func_276_call = mod.get_global_var('func_276')
func_278_call = mutated_mod.get_global_var('func_278')
call_1746 = relay.TupleGetItem(func_276_call(), 0)
call_1747 = relay.TupleGetItem(func_278_call(), 0)
func_978_call = mod.get_global_var('func_978')
func_979_call = mutated_mod.get_global_var('func_979')
call_1769 = relay.TupleGetItem(func_978_call(), 0)
call_1770 = relay.TupleGetItem(func_979_call(), 0)
output = relay.Tuple([call_1746,call_1769,])
output2 = relay.Tuple([call_1747,call_1770,])
func_1772 = relay.Function([], output)
mod['func_1772'] = func_1772
mod = relay.transform.InferType()(mod)
output = func_1772()
func_1773 = relay.Function([], output)
mutated_mod['func_1773'] = func_1773
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1777 = relay.var("var_1777", dtype = "float32", shape = (2, 6))#candidate|1777|(2, 6)|var|float32
uop_1778 = relay.erf(var_1777.astype('float32')) # shape=(2, 6)
var_1780 = relay.var("var_1780", dtype = "float32", shape = (2, 6))#candidate|1780|(2, 6)|var|float32
bop_1781 = relay.equal(uop_1778.astype('bool'), relay.reshape(var_1780.astype('bool'), relay.shape_of(uop_1778))) # shape=(2, 6)
func_1628_call = mod.get_global_var('func_1628')
func_1630_call = mutated_mod.get_global_var('func_1630')
const_1790 = relay.const([5,-9,-9,8,8,4,8,-10,-5,6,3,3,-2,7,-2,1,-8,2,9,-5,-1,-8,4,5,-8,5,8,-5,-4,6,3,-5,-8,-10,-6,-3,-4,7,-1,-7,5,10,1,-6,10,-3,9,-7,5,-5,2,10,-1,4,-1,-8,-5,10,6,1,7,-2,-3,5,-6,-1,-10,-4,9,-2,-1,9,-1,-1,4,-4,7,-1,-2,-8,-9,-7,-9,-2,9,1,6,-7,6,3,-2,-4,2,-9,2,-3,6,9,-10,-4,-5,-2,-4,8,-7,-1,-8,9,-10,4,-6,2,10,-9,-4,-1,9,-10,2,-2,-10,7,-10,8,5], dtype = "uint8")#candidate|1790|(125,)|const|uint8
call_1789 = relay.TupleGetItem(func_1628_call(relay.reshape(const_1790.astype('uint8'), [5, 5, 5])), 6)
call_1791 = relay.TupleGetItem(func_1630_call(relay.reshape(const_1790.astype('uint8'), [5, 5, 5])), 6)
uop_1799 = relay.sqrt(bop_1781.astype('float32')) # shape=(2, 6)
func_331_call = mod.get_global_var('func_331')
func_333_call = mutated_mod.get_global_var('func_333')
const_1811 = relay.const([[0.332697],[-9.466841],[-1.068774],[-0.500729],[1.348190],[9.664610],[-0.318980],[3.814383],[1.562241],[-8.798854],[-5.055998],[-3.385518],[-9.776217],[-1.266828],[-3.756443],[5.427765],[-8.711675],[8.234319],[-3.566109],[-3.184645],[-1.682871],[-4.700742],[0.983570],[-4.588081],[-2.317809],[-8.034807],[9.144675],[7.178305],[-9.299510],[-6.123125],[-4.679928],[-4.775690],[5.552928],[-3.096024],[1.469579],[5.780823],[-8.296135],[8.454436],[-0.393645],[-1.261245],[-3.242450],[4.471119],[4.807840],[-8.053220],[-1.116132],[-6.638166],[-1.604565],[-9.703062],[4.316361],[-9.436838],[0.392995],[-0.948713],[3.456015],[2.186062],[1.220242],[-7.512185],[-0.300062],[-5.197441],[-9.983389],[1.817888],[1.888480],[7.307212],[6.097044],[-1.477607],[-2.146078],[4.098096],[-4.842319],[6.354139],[8.583414],[7.529734],[1.926073],[7.156631],[7.868552],[6.185720],[-7.314818],[6.401759],[8.779806],[1.757865],[-5.454266],[3.039538],[-4.279789],[-7.883818],[-6.209499],[-8.911934],[0.761193],[-4.167618],[6.997016],[-8.086065],[0.607227],[-1.217750],[3.876169],[-7.461468],[7.612348],[3.315716],[8.163130],[-9.552880],[7.626401],[-2.485891],[1.280698],[-4.348269],[9.191055],[1.287961],[-5.952991],[3.413017],[4.803429],[1.408729],[3.710029],[3.760955],[0.041199],[-2.356739],[3.091191],[4.424791],[-6.105330],[-7.898463],[-4.941882],[-9.127830],[-4.468297],[2.147751],[9.939650],[-8.117229],[-6.071108],[6.363429],[4.362175],[-5.529610],[9.231350],[2.940379],[-2.136156],[-4.589765],[8.562291],[-3.812746],[9.110562],[0.205974],[-1.947584],[-7.021061],[9.196517],[-4.939819],[-4.014723],[-4.371379],[2.928660],[-2.156453],[5.149791],[9.226912],[-0.994079],[-9.986273],[7.707990],[-0.837262],[1.445670],[-5.206770],[-8.968079],[-1.726491],[6.460073],[5.864062],[-0.961954],[-8.696788],[1.652877],[6.812418],[-9.537164],[-8.592543],[-4.595458],[-8.750326],[3.115633],[-7.869525],[-6.373809],[-4.009843],[7.650700],[6.207096],[1.223042],[-9.287120],[-6.127484],[3.560274],[9.837689],[-3.942599],[-6.595278],[0.900122],[-7.246446],[-1.322716],[-8.084221],[-9.360292],[8.413832],[2.329411],[3.190533],[4.176433],[7.881020],[5.796335],[-5.124326],[5.642073],[9.283196],[-8.863025],[-7.624531],[-7.894706],[4.887847],[-8.359652],[5.017087],[2.929836],[5.640703],[0.356422],[8.932392],[-7.395620],[-0.189391],[-4.403158],[-0.036223],[-0.590747],[5.601666],[9.633429],[-9.119339],[-1.084106],[-8.026014],[4.218453],[-8.887699],[-8.502650],[0.910288],[-9.478134],[9.246703],[-2.859589],[-0.503875],[-6.528249],[-0.445826],[-3.846371],[9.346021],[-3.438319],[0.493257],[-1.678555],[4.631635],[3.666870],[-9.910077],[-4.809564],[2.073285],[-3.302139],[8.542716],[-8.097525],[4.366637],[-9.068614],[-1.229540],[9.925469],[7.916878],[1.756583],[0.767973],[-4.222335],[-3.167058],[-6.955710],[-0.233226],[-5.313677],[1.105466],[-4.217703],[0.233609],[7.550864],[6.171120],[1.811282],[-7.512859],[-7.221710],[-6.393309],[8.077362],[8.293462],[-2.297109],[2.859684],[-7.520860],[6.910161],[-4.059218],[5.233309],[9.714651],[9.595477],[0.301166],[9.655507],[-3.325989],[4.070764],[0.175335],[8.432378],[4.399656],[-7.870042],[-7.113522],[-9.141139],[0.185540],[9.371381],[9.262782],[-6.376152],[-5.256674],[9.062719],[6.198417],[-3.934383],[-5.631825],[-7.129843],[8.483884],[-6.188901],[-2.750809],[-3.756271],[4.916685],[3.720765],[3.676617],[-0.476044],[7.412076],[3.704377],[-1.943855],[9.205168],[9.220660],[-7.195760],[9.649896],[0.915173],[-9.036524],[-1.054736],[1.638751],[5.691255],[1.062155],[1.436511],[1.330454],[5.992600],[8.067213],[-5.929782],[3.461905],[4.960187],[8.310637],[5.871527],[-1.682710],[6.184944],[-7.275785],[5.568955],[3.874584],[-0.192117],[3.474297],[7.749069],[8.386411],[5.890649],[9.940465],[6.787827],[0.408209],[-9.993696],[-4.383758],[1.312402],[-5.336152],[4.000394],[-7.536854],[-3.274643],[7.371843],[3.693657],[1.520194],[2.851291],[8.650031],[3.945249],[4.091175],[-6.933728],[4.563869],[5.374626],[-8.569641],[-7.754181],[-6.756907],[9.102098],[-1.462377],[-0.894109],[9.553732],[-7.915198],[-5.551433],[2.053271],[-8.557877],[-1.024200],[7.892391],[-5.051317],[7.538026],[-6.060447],[-0.982339],[2.205438],[-6.457163],[-6.215272],[-2.411634],[-6.627254],[-3.820115],[-2.890590],[7.823756],[-4.658693],[-1.376233],[3.137817],[7.987714],[-2.869879],[3.296509],[-3.826936],[0.997242],[-0.734891],[7.521546],[-3.198167],[4.032801],[2.213180],[7.723137],[-1.439305],[8.210229],[-6.805693],[-1.744921],[-0.429910],[5.194790],[-4.644592],[9.198571],[5.395801],[-5.390591],[7.939236],[-1.077826],[-3.058373],[-1.819526],[1.897628],[1.773179],[-2.628310],[-1.776011],[2.018001],[-1.588150],[7.115806],[-5.002927],[6.247798],[-4.157646],[1.309136],[-4.588735],[-7.292944],[-7.944272],[0.450259],[-8.945866],[9.686605],[-6.756270],[8.502924],[-7.145827],[1.269902],[-9.234341],[4.956295],[0.527328],[-6.800663],[3.784169],[-7.023824],[-5.111841],[-4.648865],[5.602803],[-3.971970],[-9.853751],[-0.373571],[2.992628],[8.629693],[-2.041531],[7.674909],[6.825587],[1.050706],[5.039311],[0.513225],[7.562187],[-5.250807],[-6.306926],[9.460127],[-3.879842],[-7.477885],[3.878511],[-5.290897],[-1.856376],[-3.617434],[-2.467616],[9.610592],[-2.651778],[-8.849651],[-6.288058],[-6.007871],[-0.679036],[-7.881155],[3.236053],[-7.029266],[5.451964],[-2.519939],[7.313282],[9.066153],[1.356750],[-7.796823],[7.882498],[7.231652],[5.920896],[0.268384],[2.689497],[7.695432],[8.791043],[5.598726],[3.850559],[-4.432087],[-9.761175],[2.717965],[1.450822],[6.638025],[5.453613],[4.631979],[4.433210],[-1.373105],[-7.832576],[-6.121136],[-5.464261],[7.555574],[8.285581],[-3.138657],[9.484647],[7.622826],[-9.707991],[7.956666],[-2.820537],[-8.775885],[4.895201],[-7.190858],[-3.202934],[9.323296],[4.377417],[1.224833],[3.993968],[7.978010],[6.461861],[-3.763826],[-5.400581],[-4.164295],[-0.384950],[9.987150],[-8.373033],[-9.693068],[2.911027],[-3.557203],[-3.824778],[-0.156830],[4.954732],[8.880916],[2.074052],[-1.505971],[-6.518569],[3.671485],[-6.874049],[5.429815],[9.272147],[2.531657],[-0.615773],[7.721624],[5.618360],[-0.626713],[2.032318],[2.411193],[-4.666327],[-8.147350],[4.368751],[-2.931280],[7.463898],[-5.513210],[6.164208],[-3.013731],[-2.387333],[-4.865125],[-0.494884],[-4.195683],[9.998629],[8.075484],[-6.252798],[0.571251],[8.913782],[-6.158333],[-2.260577],[-9.919031],[-2.496079],[-8.116824],[8.756273],[-5.064017],[-5.746370],[-9.499569],[9.491330],[-5.241938],[2.374502],[3.582741],[-3.740576],[-5.891840],[-2.462607],[-2.406332],[4.944786],[-6.266258],[-7.820008],[0.528121],[-3.109099],[3.119778],[-1.228832],[3.258176],[8.340312],[-0.530389],[9.886882],[-5.082064],[2.766883],[5.243463],[4.705589],[-6.432269],[-9.780037],[-6.292684],[8.307349],[-1.223594],[7.762426],[7.163786],[-9.851637],[4.735589],[-8.088053],[-1.178924],[-2.920761],[-1.362339],[-0.494697],[7.569075],[2.927412],[-8.165004],[5.027578],[-0.330232],[6.901636],[-2.206447],[6.909354],[-0.357280],[-3.743842],[2.586846],[-5.581422],[-4.407751],[-7.876553],[-9.818152],[-5.256482],[-7.074143],[0.681456],[4.642098],[9.386003],[-8.092506],[3.333119],[5.325198],[-7.619837],[-0.142862],[-7.208966],[0.082944],[1.606877],[3.730965],[-3.169416],[-8.261657],[0.791082],[6.887807],[-6.445079],[0.885294],[-4.265022],[-3.511979],[-1.409624],[-8.328940],[4.985037],[0.584146],[-6.290388],[-3.829868],[-3.333304],[1.002665],[0.061332],[9.739107],[-8.442231],[-1.999548],[-4.561536],[-6.887334],[1.055319],[-9.245453],[0.684890],[-7.998037],[7.727460],[-0.561028],[-6.872986],[4.365879],[-5.772063],[-9.950852],[2.951756],[-5.080617],[-7.170875],[-6.482602],[4.250193],[4.685979],[9.524158],[-9.336968],[1.149909],[8.838486],[5.107316],[-6.999808],[9.342168],[-2.328995],[6.375719],[8.182522],[6.308240],[-1.848837],[-8.527485],[-1.781087],[-5.307355],[-0.504701],[5.727110],[-7.964856],[7.424403],[9.537570],[7.600036],[7.877304],[7.016672],[-4.733744],[-1.672618],[9.448157],[8.365916],[3.026756],[-4.388955],[4.034211],[7.188832],[-2.000597],[3.252153],[5.655952],[5.554483],[9.907375],[6.459185],[4.869499],[-2.199579],[0.917975],[8.831490],[-5.285638],[-1.389600],[0.118568],[5.139554],[7.239821],[-1.523371],[5.820350],[-0.273571],[1.990500],[4.954870],[-8.100042],[9.625906],[-8.595760],[3.878347],[-8.986113],[-5.195046],[-4.671670],[-8.501226],[-3.910554],[-7.675472],[-6.480845],[6.327573],[-3.522506],[6.009842],[3.388677],[-4.328834],[4.292930],[1.779965],[-9.404659],[8.919908],[-4.172736],[3.266149],[-8.830663],[-9.239798],[-3.485174],[3.095764],[2.419930],[-6.330310],[-6.872043],[9.417651],[2.178064],[-7.558512],[7.610489],[-2.939666],[-8.866501],[-7.967354],[1.604516],[4.291918],[0.819036],[-9.958181],[6.750470],[2.273217],[8.295041],[-3.982157],[3.204867],[1.010244],[-0.617999],[7.962331],[-5.719818],[7.592112],[4.569476],[4.121206],[1.877022],[-1.815125],[-6.473508],[-1.698994],[-9.396288],[-6.832472],[-7.277141],[-9.993456],[4.838297],[-4.159567],[0.705111],[3.843558],[5.779964],[-9.883680],[8.780886],[4.713237],[0.587631],[4.297212],[3.771582],[2.351700],[6.432232],[6.442419],[-8.046973],[5.188498],[4.619531],[9.790857],[0.427456],[-6.823926],[2.166620],[0.923939],[-8.658685],[-7.559894],[4.695276],[5.510424],[6.998163],[-9.131856],[0.212385],[-0.423381],[4.012042],[9.891480],[2.154908],[7.539272],[5.999729],[4.455988],[6.693485],[4.141281],[-9.618750],[3.252854],[-2.464451],[-8.380686],[4.193986],[-2.860617],[-5.858623],[-9.798782],[1.819210],[-7.858431],[1.217761],[9.549670],[-4.546495],[5.911102],[-1.531161],[2.996020],[-7.220832],[-8.228323],[-1.724410],[2.205945],[0.184010],[-0.805845],[-3.057371],[-3.524734],[-8.778879],[1.890689],[-0.136805],[-4.375046],[1.072778],[-3.511785],[2.677928],[-6.193769],[-0.626484],[-1.491593],[4.772006],[-6.974152],[8.602078],[-8.889556],[-2.393324],[7.883838],[-4.499410],[-3.193008],[-8.329259],[9.917348],[-8.017165],[6.927375],[6.320073],[-4.448433],[-5.651268],[-1.646136],[-1.847490],[-8.978755],[8.994447],[5.556427],[7.089100],[-0.333450],[2.235051],[1.970921],[-1.592896],[-3.098382],[-0.389975],[-9.143578],[6.189653],[-2.797144],[8.723593],[-9.852219],[4.371188],[1.049250],[3.297478],[-1.895868],[-4.566870],[-2.118627],[1.329162],[7.663927],[-7.227673],[3.127235],[4.850911],[8.427174],[-8.555150],[-1.493750],[-8.629914],[1.851794],[6.671342],[1.973731],[1.404084],[-6.545434],[-4.690482],[-4.669434],[-7.643370],[3.199468],[2.584974],[7.510571],[-6.267677],[7.758580],[-3.650905],[-5.388892],[-0.177155],[3.505561],[0.572199],[7.428099],[-6.207747],[-0.983173],[-6.508669],[2.775292],[-6.043935],[-2.526098],[9.540802],[-2.750169],[-0.318412],[-0.642659],[0.902042],[0.864570],[-2.648359],[3.747809],[1.434431],[-4.521052],[-1.552215],[6.791694],[2.345957],[6.640635],[4.003387],[1.577145],[-7.835886],[9.834323],[-2.796893],[4.032343],[-5.300291],[8.906333],[5.883323],[-5.663438],[5.415332],[9.580049],[4.004528],[9.619460],[2.134374],[-2.440690],[-6.446317],[1.739184],[0.787133],[9.438333],[-1.662820],[9.504410],[3.931171],[1.517207],[-3.422596],[-7.542678],[-5.841281],[2.467204],[-0.889946],[9.341080],[-3.691005],[-3.267692],[9.703434],[3.619404],[-3.743114],[-6.410875],[2.254501],[-0.249972],[5.706353],[-2.603404],[0.134209],[0.227251],[-2.876261],[-3.963275],[8.980115],[-6.008402],[1.797206],[-0.575592],[-5.810752],[-7.255876],[-6.796837],[4.772825],[-3.674241],[7.494838],[8.137429],[5.330304],[-8.528862],[-8.504323],[-7.922419],[3.623204],[-5.028817],[7.695383],[-7.650034],[1.363299],[5.409625],[-9.558857],[-8.714799],[7.257732],[3.988814],[-6.362736],[-7.933800],[2.698922],[5.954141],[1.542282],[-0.356271],[9.270268],[-2.600737],[9.703653],[4.520352],[6.929437],[-0.703583],[-1.681962],[2.648063],[5.254495],[-8.649402],[5.210745],[-8.967101],[9.932269],[7.680106],[1.482112],[2.216021],[-9.096560],[4.040462],[6.697105],[-6.896338],[5.319750],[-2.822647],[-7.739868],[8.160750],[-3.135736],[1.084986],[3.882163],[-9.409945],[4.768106],[9.783265],[-8.954383],[-4.457902],[9.808461],[-1.750683],[-9.071822],[1.635011],[4.730101],[1.880737],[-3.421263],[7.008501],[9.305326],[-2.806275],[-3.723552],[0.058768],[-6.414368],[-3.516179],[-9.394944],[-3.806883],[-7.046224],[-6.998712],[2.391119],[-5.665418],[9.045056],[-1.419455],[4.310563],[-3.073607],[7.759189],[3.453245],[2.055792],[8.313276],[6.211401],[-5.595824],[-5.352278],[3.596807],[0.099873],[1.744912],[-9.416109],[0.458691],[-3.988077],[1.424951],[-0.429786],[-1.731595],[-1.514932],[5.816591],[-6.149078],[-5.700727],[8.519704],[4.647675],[8.406848],[-2.580309],[-0.774688],[4.940647],[-9.077509],[-4.541618],[6.251879],[-0.133804],[7.030728],[3.423684],[-8.954522],[-2.323067],[6.865219],[-6.154934],[0.230237],[2.341658],[5.639687],[-4.854595],[2.524245],[-7.148215],[-6.260093],[-7.353431],[-7.314464],[2.405158],[8.278471],[3.662373],[-4.020070],[8.122046],[-5.452735],[-1.218590],[1.422507],[-5.677181],[6.710265],[4.299983],[3.232714],[-9.848396],[-1.713952],[7.550139],[6.432092],[7.904441],[0.556921],[-7.444056],[-9.458390],[5.743102],[-4.075129],[-0.767894],[4.066510],[-7.237757],[6.416181],[-8.552824],[3.188852],[0.249695],[2.412959],[-8.253001],[1.733029],[-2.040451],[-8.469455],[-1.172743],[-9.163775],[-8.043102],[9.541934],[-9.356312],[1.832464],[-7.579693],[-8.211712],[1.650291],[4.979639],[-9.163567],[5.779262],[-6.753312],[-7.821738],[5.059797],[6.378791],[3.391540],[-3.196243],[-6.760112],[-1.396723],[-3.107832],[5.736605],[8.788366],[6.472708],[6.189761],[6.425904],[-5.863063],[-4.225757],[7.557398],[0.495673],[-2.528694],[9.535888],[-4.047623],[6.026196],[7.474602],[2.617559],[4.711331],[-4.750246],[4.132669],[-7.095568],[7.284366],[-1.501293],[-2.400452],[-3.864058],[2.645205],[9.999823],[-3.593255],[7.413363],[-7.201472],[-9.693017],[-2.927537],[5.621803],[-1.328405],[-4.129545],[-5.029313],[8.496141],[-7.116450],[2.370308],[-1.080541],[1.285974],[6.139877],[7.514838],[1.775670],[-9.922843],[5.989387],[9.795027],[-7.566682],[-8.753804],[8.612999],[-5.930543],[9.870620],[0.476055],[3.808519],[-1.731200],[-7.852584],[8.531062],[-0.434648],[0.645367],[2.710656],[0.088564],[-8.416966],[4.515839],[-1.135554],[-5.158758],[-7.821339],[0.623298],[-7.091937],[-0.164100],[1.303969],[4.388868],[-6.329515],[0.591857],[-3.587516],[-5.442832],[-6.778365],[-1.859221],[-3.248819],[5.697480],[6.974578],[-8.526006],[1.675951],[1.996905],[-5.015705],[2.605763],[3.623904],[2.736575],[-9.247978],[-7.854317],[-2.457716],[-9.262175],[3.204143],[7.546230],[-3.017999],[-4.472419],[-0.940594],[-4.173518],[-5.112505],[8.390178],[1.620751],[-7.687146],[-7.240270],[-5.081847],[-3.975938],[6.672697],[0.478850],[7.292070],[-7.076308],[-5.855931],[8.259840],[7.157128],[-3.444552],[5.081111],[1.164656],[5.075362],[-1.945875],[7.136310],[-5.452177],[2.399451],[7.336178],[6.281123],[-7.049958],[4.696120],[3.264621],[-2.900685],[-7.333420],[4.963284],[2.752027],[2.682149],[7.959997],[0.737820],[-8.126663],[-5.373329],[-5.612128],[2.398489],[-5.946647],[-4.297408],[8.996017],[-9.454134],[4.169455],[2.110706],[-2.913625],[-4.778138],[-0.257683],[-0.270250],[2.998589],[0.925777],[0.012016],[-9.856466],[7.876541],[0.577972],[-6.935646],[-6.161581],[3.058740],[-6.826336],[5.508268],[-8.912837],[-4.302581],[5.485639],[-1.955588],[6.814450],[0.873596],[5.487539],[-0.767403],[-6.870572],[4.481104],[-2.907757],[0.049099],[7.310378],[5.580729],[-8.438678],[4.789922],[-2.295518],[8.954660],[-0.238643],[4.143559],[6.194211],[-6.137114],[4.179081],[-1.895251],[-2.259696],[4.841433],[0.285108],[-0.189486],[4.208716],[2.157486],[-6.546938],[-0.212842],[-8.790796],[5.039079],[0.505333],[-1.669997],[2.509626],[3.934003],[-3.691102],[7.728754],[3.456005],[0.708572],[7.356715],[2.965365],[9.726739],[-5.718565],[-3.924611],[-3.593785],[8.162152],[4.230198],[-2.693580],[5.828250],[3.566442],[8.381430],[7.929115],[-4.890486],[3.030297],[7.540881],[6.364358],[-8.608294],[8.892367],[9.526616],[8.271194],[3.483130],[6.746090],[-8.268117],[-6.174028],[2.963238],[-4.664382],[3.243250],[9.377586],[2.954802],[3.605351],[-5.938009],[7.906083],[1.172218],[5.387569],[-1.507380],[-7.757200],[5.599394],[2.512501],[-9.318119],[-6.003118],[0.085250],[-8.476139],[-7.612284],[-8.877609],[-4.727277],[-9.321150],[4.941381],[0.969520],[4.685271],[6.728938],[-5.872683],[0.975063],[8.853692],[1.700736],[-9.508601],[9.749252],[-1.424712],[2.858404],[-3.186727],[-5.799804],[4.010694],[7.912717],[1.352014],[-6.331360],[1.276108],[-1.128928],[7.072264],[-8.789567],[-9.896483],[-6.735043],[7.491087],[-2.900683],[1.895743],[-7.145878],[-5.918071],[4.260412],[7.067703],[-2.361895],[1.493357],[8.473979],[-3.215328],[-2.787101],[9.334137],[-6.401588],[-0.300524],[2.161833],[-7.410919],[-3.053547],[4.210937],[5.651394],[8.768290],[2.346987],[3.763685],[7.467833],[-6.639979],[-2.118975],[2.373005],[2.439925],[3.808987],[-0.082508],[-8.801473],[0.483016],[-4.033384],[2.074839],[-5.557473],[4.212722],[2.439925],[-0.111380],[-1.329169],[9.402102],[2.894115],[2.982801],[7.885571],[3.764708],[-8.194686],[-8.395412],[3.377993],[7.216423],[0.949605],[8.456617],[-5.638454],[-4.890363],[-8.390635],[-7.900405],[-6.504329],[5.117512],[6.708581],[-4.764978],[3.513466],[1.462345],[-0.126726],[2.806686],[8.440334],[7.676877],[5.972438],[-4.319718],[0.884548],[8.796046],[-1.484221],[-9.530519],[4.190053],[-6.507499],[-2.355733],[2.719763],[-8.815399],[7.460375],[3.208386],[7.319395],[3.222007],[2.173301],[4.708959],[-9.753929],[-0.190564],[-4.526792],[-5.421526],[-8.618116],[3.503427],[-1.549551],[4.180150],[5.604656],[8.860709],[-0.441745],[3.899542],[2.874771],[-1.321923],[1.314591],[6.272433],[-2.918427],[6.994834],[-0.667342],[3.714436],[-7.912748],[0.222177],[-0.164152],[-4.527617],[-7.654643],[-6.320383],[-7.420306],[-4.724392],[7.599427],[9.633997],[9.377461]], dtype = "float64")#candidate|1811|(1536, 1)|const|float64
call_1810 = relay.TupleGetItem(func_331_call(relay.reshape(const_1811.astype('float64'), [8, 12, 16])), 1)
call_1812 = relay.TupleGetItem(func_333_call(relay.reshape(const_1811.astype('float64'), [8, 12, 16])), 1)
uop_1817 = relay.asinh(uop_1778.astype('float32')) # shape=(2, 6)
uop_1820 = relay.exp(uop_1799.astype('float32')) # shape=(2, 6)
var_1825 = relay.var("var_1825", dtype = "bool", shape = (2, 6))#candidate|1825|(2, 6)|var|bool
bop_1826 = relay.floor_mod(bop_1781.astype('float32'), relay.reshape(var_1825.astype('float32'), relay.shape_of(bop_1781))) # shape=(2, 6)
func_807_call = mod.get_global_var('func_807')
func_809_call = mutated_mod.get_global_var('func_809')
call_1829 = func_807_call()
call_1830 = func_807_call()
uop_1833 = relay.cosh(bop_1826.astype('float32')) # shape=(2, 6)
output = relay.Tuple([call_1789,const_1790,call_1810,const_1811,uop_1817,uop_1820,call_1829,uop_1833,])
output2 = relay.Tuple([call_1791,const_1790,call_1812,const_1811,uop_1817,uop_1820,call_1830,uop_1833,])
func_1835 = relay.Function([var_1777,var_1780,var_1825,], output)
mod['func_1835'] = func_1835
mod = relay.transform.InferType()(mod)
var_1836 = relay.var("var_1836", dtype = "float32", shape = (2, 6))#candidate|1836|(2, 6)|var|float32
var_1837 = relay.var("var_1837", dtype = "float32", shape = (2, 6))#candidate|1837|(2, 6)|var|float32
var_1838 = relay.var("var_1838", dtype = "bool", shape = (2, 6))#candidate|1838|(2, 6)|var|bool
output = func_1835(var_1836,var_1837,var_1838,)
func_1839 = relay.Function([var_1836,var_1837,var_1838,], output)
mutated_mod['func_1839'] = func_1839
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1857 = relay.var("var_1857", dtype = "bool", shape = (3, 3, 6))#candidate|1857|(3, 3, 6)|var|bool
var_1858 = relay.var("var_1858", dtype = "bool", shape = (3, 3, 6))#candidate|1858|(3, 3, 6)|var|bool
bop_1859 = relay.logical_and(var_1857.astype('bool'), relay.reshape(var_1858.astype('bool'), relay.shape_of(var_1857))) # shape=(3, 3, 6)
func_561_call = mod.get_global_var('func_561')
func_563_call = mutated_mod.get_global_var('func_563')
var_1866 = relay.var("var_1866", dtype = "float32", shape = (840, 1))#candidate|1866|(840, 1)|var|float32
call_1865 = func_561_call(relay.reshape(var_1866.astype('float32'), [7, 10, 12]))
call_1867 = func_561_call(relay.reshape(var_1866.astype('float32'), [7, 10, 12]))
uop_1875 = relay.atan(bop_1859.astype('float32')) # shape=(3, 3, 6)
func_269_call = mod.get_global_var('func_269')
func_271_call = mutated_mod.get_global_var('func_271')
call_1877 = func_269_call()
call_1878 = func_269_call()
uop_1884 = relay.acos(uop_1875.astype('float64')) # shape=(3, 3, 6)
func_1727_call = mod.get_global_var('func_1727')
func_1728_call = mutated_mod.get_global_var('func_1728')
call_1887 = relay.TupleGetItem(func_1727_call(), 1)
call_1888 = relay.TupleGetItem(func_1728_call(), 1)
var_1889 = relay.var("var_1889", dtype = "float64", shape = (3, 3, 6))#candidate|1889|(3, 3, 6)|var|float64
bop_1890 = relay.greater(uop_1884.astype('bool'), relay.reshape(var_1889.astype('bool'), relay.shape_of(uop_1884))) # shape=(3, 3, 6)
bop_1896 = relay.less(uop_1875.astype('bool'), relay.reshape(var_1858.astype('bool'), relay.shape_of(uop_1875))) # shape=(3, 3, 6)
bop_1901 = relay.right_shift(uop_1884.astype('uint8'), relay.reshape(bop_1859.astype('uint8'), relay.shape_of(uop_1884))) # shape=(3, 3, 6)
output = relay.Tuple([call_1865,var_1866,call_1877,call_1887,bop_1890,bop_1896,bop_1901,])
output2 = relay.Tuple([call_1867,var_1866,call_1878,call_1888,bop_1890,bop_1896,bop_1901,])
F = relay.Function([var_1857,var_1858,var_1866,var_1889,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1857,var_1858,var_1866,var_1889,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1857= np.array([[[False,False,False,True,False,True],[False,True,True,False,False,False],[False,False,False,False,False,False]],[[True,True,True,False,False,False],[False,False,True,False,True,True],[False,True,True,True,True,True]],[[False,True,False,True,True,False],[True,True,False,False,False,False],[False,True,True,True,True,False]]], dtype='bool')
module1.set_input('var_1857', input_1857)
input_1858= np.array([[[True,True,False,False,False,True],[True,False,True,True,True,False],[False,False,True,True,True,False]],[[True,True,True,False,True,True],[False,True,False,False,True,True],[False,False,True,False,True,True]],[[False,False,True,True,True,True],[True,False,True,False,True,False],[False,False,True,True,False,False]]], dtype='bool')
module1.set_input('var_1858', input_1858)
input_1866= np.array([[-4.556915],[-5.968114],[1.141439],[-7.991382],[-6.371686],[-5.585337],[-1.546859],[-8.116109],[-6.609178],[8.073541],[-1.815201],[4.242290],[-3.258376],[-6.045518],[-3.461411],[5.376270],[0.755052],[8.719851],[-0.760400],[-3.954297],[1.881035],[7.679168],[-5.035238],[-7.556793],[-1.637959],[-9.867190],[1.581231],[7.665640],[-8.346694],[9.301656],[-7.462824],[1.143927],[-3.754891],[-8.776512],[-8.299420],[4.426406],[0.484583],[3.131116],[-4.761066],[-7.402567],[9.298481],[-0.832726],[9.278172],[-3.996967],[2.762002],[-9.805582],[3.765547],[-8.622511],[-0.102203],[-8.131174],[1.661983],[6.978505],[0.453699],[8.217313],[-9.394163],[-7.358406],[-0.545206],[-2.283667],[-8.159713],[5.760870],[1.081841],[5.639814],[1.159962],[-7.066151],[-6.125188],[8.779248],[6.304364],[-0.906699],[1.022737],[-2.098068],[-7.902414],[-8.557961],[4.656386],[-8.150885],[2.839704],[-6.271779],[1.049215],[6.641667],[2.113077],[-7.967419],[1.270359],[3.116048],[-0.898700],[2.354231],[4.004530],[-3.656055],[-9.639081],[0.882248],[3.960575],[0.677978],[6.862627],[0.200681],[-5.000398],[-2.017330],[3.763171],[1.135812],[-7.587921],[7.319616],[0.052113],[-4.311810],[-6.366634],[-5.359015],[8.150493],[5.477225],[9.150412],[-5.434461],[-5.804208],[8.399223],[-3.703051],[-1.991715],[-3.708079],[-0.771571],[-5.852312],[-3.618339],[-3.393711],[5.579788],[7.345919],[5.401322],[2.841585],[5.367357],[-4.919385],[9.285455],[-1.594207],[9.102605],[-9.358983],[-1.050413],[3.239170],[5.826593],[-3.511382],[3.790904],[8.126955],[8.516844],[-4.059729],[7.920782],[2.230589],[-3.031687],[-6.228263],[-4.171275],[-9.516796],[-0.341860],[3.558727],[-4.854615],[1.581413],[1.722177],[7.984164],[3.036960],[5.299849],[9.451003],[9.532672],[8.920816],[8.230568],[-8.958856],[5.141371],[-5.022670],[-1.593685],[3.372027],[7.528064],[3.594353],[5.491266],[-6.043801],[3.170745],[5.570257],[8.735339],[9.546359],[-2.304529],[0.006518],[-5.921718],[6.855075],[8.068193],[-3.534709],[-9.455747],[7.030925],[2.853706],[7.299254],[6.475317],[0.835032],[5.179954],[2.978570],[3.873803],[4.612580],[8.301855],[9.678853],[1.453621],[-6.928292],[8.789132],[-9.025992],[-2.509924],[7.539215],[-9.052394],[-6.947071],[6.659407],[2.747005],[1.776999],[4.146311],[4.649807],[-8.258190],[1.882184],[-3.480192],[-1.904551],[8.454073],[6.580685],[-8.194608],[-0.670608],[9.779143],[-0.299905],[-8.288361],[2.610462],[-1.015235],[5.353895],[2.366548],[-9.331025],[3.820325],[-7.195006],[-0.919093],[-5.125367],[-5.790845],[-8.113004],[2.385189],[-9.566824],[6.965640],[3.226204],[-7.887177],[0.666624],[9.070159],[-3.541040],[6.233491],[-6.898423],[5.908366],[0.316089],[8.194854],[1.975879],[9.213432],[-3.872115],[-4.205705],[-8.614492],[8.519860],[-9.883265],[-9.188899],[-5.331370],[-9.100960],[0.932554],[-7.529887],[-6.906066],[-2.950997],[6.899117],[-1.232491],[9.993260],[-0.782948],[-2.923721],[-9.232050],[6.849484],[-7.988424],[-9.109238],[6.775549],[-1.246838],[7.838987],[-5.348250],[2.393396],[0.299991],[-3.218680],[-9.542378],[-1.060947],[-2.342696],[8.701024],[4.903616],[1.024246],[-7.826344],[-0.098341],[9.311985],[0.218214],[9.410524],[5.391171],[-1.484280],[3.652234],[-5.788497],[4.482665],[-5.264185],[-1.713025],[-9.635104],[0.483540],[8.400581],[-5.206397],[1.895332],[-1.749340],[4.067411],[-1.661060],[4.676252],[-4.820148],[2.570265],[7.766840],[5.075067],[-7.691973],[-1.964026],[-4.282258],[-4.826321],[6.114876],[3.367463],[0.795699],[-6.124411],[9.246210],[-3.027693],[4.436096],[2.294159],[7.919520],[7.224199],[-7.236360],[4.051680],[-1.395357],[7.714539],[4.580722],[-8.347920],[4.000811],[-0.994603],[-2.948358],[3.778983],[-7.858606],[-0.669024],[6.427594],[1.405227],[-4.612702],[5.938127],[2.223538],[0.490696],[1.072024],[9.173280],[-8.111503],[9.871288],[0.191805],[4.091109],[-5.245238],[5.038888],[-5.970903],[-0.975276],[4.400073],[-6.667537],[-1.247465],[-3.517727],[4.428205],[4.109353],[-3.253946],[6.892994],[3.875062],[-5.777045],[-1.811079],[-2.719972],[-7.137010],[-0.375585],[9.281271],[-5.556449],[-2.599796],[-2.039962],[6.287741],[1.660545],[-6.206119],[4.872135],[7.334802],[-6.491854],[1.789060],[6.574262],[-7.367733],[-0.024325],[4.294447],[9.850901],[-7.106254],[3.059228],[-8.293419],[7.615954],[-7.408332],[-3.699103],[-6.040986],[8.982839],[-5.187269],[-0.413278],[-7.343442],[-7.471054],[0.367263],[-9.240152],[4.433429],[-7.856008],[8.422220],[-3.607525],[1.810320],[8.817791],[-6.167241],[5.281649],[9.411506],[-1.833757],[-0.930670],[2.781227],[-2.704254],[8.068692],[8.013141],[-1.759675],[5.684510],[-5.326924],[-1.076933],[-9.099166],[-6.201472],[8.335493],[-9.913553],[3.684200],[9.157691],[9.537907],[-5.524406],[9.162000],[-3.337615],[8.819155],[-3.137996],[-6.384918],[-8.303194],[-0.460112],[-2.174670],[-3.429819],[1.731743],[9.211164],[-0.744800],[2.860779],[6.072088],[2.052810],[-3.671171],[-8.804422],[3.376220],[-8.954493],[-3.200013],[2.079911],[6.820589],[2.834578],[1.823184],[-8.576026],[-0.477836],[-8.708212],[5.698271],[-5.301769],[-0.814730],[-1.563118],[-5.099963],[-0.619865],[-8.401820],[1.286777],[0.045746],[9.853155],[1.228225],[-4.722829],[4.311568],[3.963274],[0.598415],[-4.536164],[9.758640],[7.870313],[9.049430],[-0.476070],[-5.101575],[2.118747],[6.376600],[0.604190],[-4.979930],[5.832848],[-3.213135],[-4.722574],[4.687476],[5.376694],[7.290428],[4.142997],[-6.814318],[-6.826830],[-2.445982],[-5.923987],[3.079969],[-3.196004],[-8.151495],[-0.898527],[-2.567344],[-3.761452],[9.187384],[-1.768387],[-5.883413],[3.136748],[-2.401419],[1.246305],[3.266329],[-8.048389],[-4.696632],[3.655921],[-7.701845],[7.916310],[0.572116],[0.664036],[7.582464],[-3.137095],[-1.241235],[1.457385],[-3.994171],[-8.851327],[1.521969],[-1.895856],[-3.278000],[3.775118],[3.861534],[-7.736431],[-0.059115],[-5.504072],[1.562150],[3.495768],[-7.888810],[-8.286830],[1.815740],[4.472765],[-1.267239],[-0.837426],[7.096250],[5.793405],[4.559787],[4.885190],[7.278305],[-8.982093],[2.712648],[9.216434],[7.846531],[6.267773],[8.699285],[-0.443224],[-0.781857],[-0.344924],[-9.910809],[-6.652022],[0.998415],[8.270685],[-9.898693],[3.748260],[-4.223649],[4.786128],[2.525436],[4.117805],[-4.055331],[-5.936475],[-8.281669],[-9.972043],[-5.763066],[8.907909],[0.776594],[1.129181],[9.762253],[7.741321],[9.914051],[0.388229],[-6.156855],[7.672178],[-6.583844],[-3.701174],[1.125199],[-6.687651],[-0.574244],[-6.875363],[6.629260],[9.002688],[-3.307117],[-9.554707],[8.218517],[2.953520],[-3.792659],[-6.124353],[-8.331148],[-2.890903],[-2.798078],[4.700677],[6.430062],[6.446007],[-6.980018],[3.935288],[-0.341658],[-7.258423],[5.980994],[-7.842381],[-2.335225],[3.949343],[1.001694],[1.057321],[9.635523],[-5.636932],[5.439418],[2.279468],[3.304980],[-9.225350],[6.385674],[0.832328],[-9.032789],[-0.686540],[-8.937189],[-1.498683],[-9.712672],[-1.518640],[2.707208],[4.487661],[1.403946],[3.639804],[1.728144],[-2.516992],[9.777698],[-6.476619],[-1.061665],[-8.100173],[5.033988],[-9.206224],[-0.456130],[-1.385868],[-2.026999],[-2.673174],[6.764223],[-7.861908],[6.665991],[8.616427],[-0.391379],[3.313690],[-7.007977],[-4.206678],[7.356256],[4.508253],[2.380440],[4.773219],[-1.515782],[0.691702],[-2.642419],[-0.395643],[4.347960],[-9.460847],[-7.874319],[-5.478850],[9.686038],[0.063622],[8.352621],[-5.812584],[-8.992924],[-7.594378],[1.362679],[8.830171],[6.846816],[-6.043959],[-7.371427],[7.358909],[1.657488],[-7.076917],[4.898417],[4.464009],[-4.131163],[-5.594683],[-5.145395],[6.299915],[-3.276899],[2.033925],[6.702194],[2.543260],[9.545586],[-0.936771],[5.312471],[1.107189],[4.629008],[-1.751568],[-8.917973],[-6.705726],[-2.829704],[4.163223],[7.551175],[-2.984269],[-4.530842],[-7.845108],[-8.792254],[-3.317383],[0.433228],[-1.528833],[9.229634],[-5.497076],[0.434554],[6.470654],[-1.972780],[1.745078],[9.466534],[4.209554],[9.687244],[-1.277947],[8.750407],[8.579517],[5.147429],[4.030433],[-4.123403],[2.067021],[-7.700279],[-5.542680],[-5.264126],[4.205524],[2.038658],[-1.724447],[7.533409],[-7.221112],[5.970186],[-8.651795],[1.369402],[-6.955147],[-4.075270],[5.852363],[6.492079],[-0.013491],[-8.088041],[-3.211619],[-3.535329],[4.634512],[-3.045926],[-5.690685],[-2.994213],[-8.740823],[-6.967326],[-9.339406],[-2.892874],[-7.506572],[5.040957],[6.236600],[-2.282680],[-8.872910],[-5.100892],[4.588257],[-0.292698],[9.532085],[-1.035132],[2.460968],[-3.888822],[-4.787126],[-1.913150],[-9.579516],[-5.084716],[5.325304],[-4.104671],[-9.652574],[-1.178818],[-6.426897],[6.652620],[-5.787751],[-8.367330],[-1.149095],[3.208075],[0.911789],[7.485544],[-2.075380],[6.072999],[-3.069128],[4.372261],[0.743945],[-7.139837],[-6.555725],[-6.425276],[-9.449153],[1.088127],[1.104024],[-1.159490],[-3.048184],[8.055052],[6.159937],[-3.523303],[5.466133],[-8.370634],[0.472546],[9.480286],[7.756285],[-9.798598],[4.026374],[-5.158181],[4.361191],[-9.424807],[-7.744316],[-0.171584],[-6.966923],[-9.842638],[0.666310],[-1.773262],[-2.682269],[-7.892368],[-2.938569],[-3.814740],[-8.900324],[-4.244514],[9.216777],[7.756744],[-0.843603],[-2.747792],[-4.653627],[7.014412],[-1.483382],[-1.274019],[-0.517665],[-5.489024],[4.556896],[-7.088001],[3.246193],[9.722434],[-1.393788],[1.143698],[0.181935],[-7.683461],[-4.945337],[-5.358780],[5.813771],[5.329348],[0.663151],[3.427462],[-1.411322],[5.785125],[4.136005],[-8.432489],[-6.197918],[-1.761162],[4.557639],[1.860001],[-2.120709],[-8.650417],[-8.241986],[5.224563],[-8.533762],[5.270734],[-8.411430],[-0.557527],[9.505318],[-1.832299],[3.661405],[3.337498],[-2.508588],[-8.972631],[8.098315],[-8.521295],[1.691417],[-3.336904],[6.396076],[-8.070775],[-2.783205],[-0.826688],[-8.559752],[-1.202765],[-7.507694],[-5.091854],[7.265511],[8.787713],[1.018000],[1.515514]], dtype='float32')
module1.set_input('var_1866', input_1866)
input_1889= np.array([[[7.495513,-5.088789,-1.139458,-7.765881,-6.872221,5.450279],[3.870209,8.476204,-7.382453,5.836145,-2.075888,3.662086],[3.267230,-5.092513,-6.584601,5.746152,3.717178,0.638233]],[[-3.067541,-6.185919,-1.822988,6.864806,2.439883,1.333671],[-3.314178,-6.746400,4.373602,-0.584077,-8.090149,0.882635],[-2.388460,6.212086,1.160914,0.755454,-5.694020,-0.400591]],[[-1.905119,-4.727232,6.295626,9.408441,-4.526016,-9.211653],[2.600444,-4.381479,4.322600,8.445664,-8.799785,-4.817989],[0.504460,1.748856,1.511959,-9.794080,-2.913304,2.027656]]], dtype='float64')
module1.set_input('var_1889', input_1889)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1857, input_1858, input_1866, input_1889, )
res3 = intrp3.evaluate()(input_1857, input_1858, input_1866, input_1889, )
res4 = intrp4.evaluate()(input_1857, input_1858, input_1866, input_1889, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
module5.set_input('var_1857', input_1857)
module5.set_input('var_1858', input_1858)
module5.set_input('var_1866', input_1866)
module5.set_input('var_1889', input_1889)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1857, input_1858, input_1866, input_1889, )
res7 = intrp7.evaluate()(input_1857, input_1858, input_1866, input_1889, )
res8 = intrp8.evaluate()(input_1857, input_1858, input_1866, input_1889, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
module9.set_input('var_1857', input_1857)
module9.set_input('var_1858', input_1858)
module9.set_input('var_1866', input_1866)
module9.set_input('var_1889', input_1889)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1857, input_1858, input_1866, input_1889, )
res11 = intrp11.evaluate()(input_1857, input_1858, input_1866, input_1889, )
res12 = intrp12.evaluate()(input_1857, input_1858, input_1866, input_1889, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
module13.set_input('var_1857', input_1857)
module13.set_input('var_1858', input_1858)
module13.set_input('var_1866', input_1866)
module13.set_input('var_1889', input_1889)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1857, input_1858, input_1866, input_1889, )
res15 = intrp15.evaluate()(input_1857, input_1858, input_1866, input_1889, )
res16 = intrp16.evaluate()(input_1857, input_1858, input_1866, input_1889, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
module17.set_input('var_1857', input_1857)
module17.set_input('var_1858', input_1858)
module17.set_input('var_1866', input_1866)
module17.set_input('var_1889', input_1889)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1857, input_1858, input_1866, input_1889, )
res19 = intrp19.evaluate()(input_1857, input_1858, input_1866, input_1889, )
res20 = intrp20.evaluate()(input_1857, input_1858, input_1866, input_1889, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
module21.set_input('var_1857', input_1857)
module21.set_input('var_1858', input_1858)
module21.set_input('var_1866', input_1866)
module21.set_input('var_1889', input_1889)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1857, input_1858, input_1866, input_1889, )
res23 = intrp23.evaluate()(input_1857, input_1858, input_1866, input_1889, )
res24 = intrp24.evaluate()(input_1857, input_1858, input_1866, input_1889, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()

'''21: TVMFuncCall
20: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
19: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
18: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
17: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
16: tvm::transform::Pass::operator()(tvm::IRModule) const
15: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
14: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
13: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
12: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
11: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
10: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
9: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
8: tvm::transform::Pass::operator()(tvm::IRModule) const
7: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
6: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::Pass::operator()(tvm::IRModule) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
0: tvm::DiagnosticContext::Render()

'''