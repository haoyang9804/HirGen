import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (9, 2, 16))#candidate|0|(9, 2, 16)|var|float64
var_1 = relay.var("var_1", dtype = "float64", shape = (9, 2, 16))#candidate|1|(9, 2, 16)|var|float64
bop_2 = relay.multiply(var_0.astype('float64'), relay.reshape(var_1.astype('float64'), relay.shape_of(var_0))) # shape=(9, 2, 16)
bop_5 = relay.less_equal(bop_2.astype('bool'), relay.reshape(var_0.astype('bool'), relay.shape_of(bop_2))) # shape=(9, 2, 16)
var_8 = relay.var("var_8", dtype = "float64", shape = (9, 2, 16))#candidate|8|(9, 2, 16)|var|float64
bop_9 = relay.right_shift(var_1.astype('uint32'), relay.reshape(var_8.astype('uint32'), relay.shape_of(var_1))) # shape=(9, 2, 16)
var_12 = relay.var("var_12", dtype = "bool", shape = (9, 2, 16))#candidate|12|(9, 2, 16)|var|bool
bop_13 = relay.left_shift(bop_5.astype('int32'), relay.reshape(var_12.astype('int32'), relay.shape_of(bop_5))) # shape=(9, 2, 16)
uop_16 = relay.cosh(bop_13.astype('float32')) # shape=(9, 2, 16)
uop_18 = relay.sigmoid(uop_16.astype('float32')) # shape=(9, 2, 16)
var_20 = relay.var("var_20", dtype = "float32", shape = (9, 2, 16))#candidate|20|(9, 2, 16)|var|float32
bop_21 = relay.equal(uop_18.astype('bool'), relay.reshape(var_20.astype('bool'), relay.shape_of(uop_18))) # shape=(9, 2, 16)
uop_24 = relay.atan(var_0.astype('float64')) # shape=(9, 2, 16)
output = relay.Tuple([bop_9,bop_21,uop_24,])
output2 = relay.Tuple([bop_9,bop_21,uop_24,])
func_26 = relay.Function([var_0,var_1,var_8,var_12,var_20,], output)
mod['func_26'] = func_26
mod = relay.transform.InferType()(mod)
mutated_mod['func_26'] = func_26
mutated_mod = relay.transform.InferType()(mutated_mod)
func_26_call = mutated_mod.get_global_var('func_26')
var_28 = relay.var("var_28", dtype = "float64", shape = (9, 2, 16))#candidate|28|(9, 2, 16)|var|float64
var_29 = relay.var("var_29", dtype = "float64", shape = (9, 2, 16))#candidate|29|(9, 2, 16)|var|float64
var_30 = relay.var("var_30", dtype = "float64", shape = (9, 2, 16))#candidate|30|(9, 2, 16)|var|float64
var_31 = relay.var("var_31", dtype = "bool", shape = (9, 2, 16))#candidate|31|(9, 2, 16)|var|bool
var_32 = relay.var("var_32", dtype = "float32", shape = (9, 2, 16))#candidate|32|(9, 2, 16)|var|float32
call_27 = func_26_call(var_28,var_29,var_30,var_31,var_32,)
output = call_27
func_33 = relay.Function([var_28,var_29,var_30,var_31,var_32,], output)
mutated_mod['func_33'] = func_33
mutated_mod = relay.transform.InferType()(mutated_mod)
var_35 = relay.var("var_35", dtype = "int64", shape = (7, 6, 14))#candidate|35|(7, 6, 14)|var|int64
const_36 = relay.const([[[-5,-6,10,-7,8,-10,10,-6,4,5,-10,-9,-4,4],[1,2,10,-4,-7,-9,-1,-10,8,7,-5,-1,9,-7],[10,10,9,7,3,10,-4,-5,-7,7,-4,9,-9,6],[2,-10,5,4,-4,-5,-4,-7,3,-7,-8,6,-9,1],[7,7,-1,10,6,1,-6,-7,1,-1,5,-7,-2,-2],[9,-10,-1,4,3,1,9,-7,8,5,7,6,-4,4]],[[-5,7,-10,-10,4,-6,-1,4,8,-5,7,-8,8,6],[-8,-7,7,-6,-1,-1,-2,1,3,-3,9,9,-8,4],[-4,7,3,4,-8,-8,-9,-3,5,4,1,10,5,-8],[8,-8,-2,-6,-1,-4,5,7,10,-4,-5,-4,-6,-6],[4,6,8,6,-1,7,-5,10,-5,-3,-10,-2,7,-1],[8,6,5,-6,5,5,6,-9,-4,-2,-7,-6,4,-4]],[[-3,6,6,5,-5,4,-5,-8,-2,-6,8,-7,-5,-4],[10,9,-4,-9,10,-2,7,5,-7,-6,1,-7,-10,-4],[7,3,5,-5,1,-9,-7,6,-9,7,5,6,7,-5],[-10,-1,8,-6,-10,-3,-4,1,-5,7,-9,9,10,-2],[-1,-4,-7,-7,3,-1,4,-3,8,10,-1,7,-1,-6],[4,-10,6,-5,10,-9,5,5,3,10,2,-5,6,4]],[[10,10,9,-10,-3,7,9,6,5,-5,-9,-10,-4,-5],[8,-10,1,-6,-2,-5,-5,8,-10,10,-8,-4,2,10],[-2,8,8,10,-10,2,-5,4,-1,4,9,-7,-8,5],[-8,6,4,7,2,3,-6,-3,-2,-8,1,4,-5,10],[3,-3,-4,8,5,-10,-5,-10,-10,9,-1,-6,-9,6],[-3,-7,-4,7,3,4,3,6,10,8,-10,1,5,8]],[[10,-10,-10,9,-9,-10,4,-2,-1,-4,6,-9,10,-2],[1,-1,-1,4,-9,-3,-1,-3,-8,-1,-3,8,-6,8],[10,1,7,2,2,-1,-1,1,9,9,9,6,5,-1],[-2,-7,10,-6,1,-7,6,-5,-2,10,-10,-7,-9,9],[9,-2,-1,-5,-8,-8,-9,-1,-2,-1,-3,-6,-10,-2],[-7,10,2,-7,5,-4,5,2,-8,10,-9,8,3,-7]],[[-8,1,-9,-3,7,4,4,-4,1,-4,9,2,-6,-4],[-4,-4,-9,10,-8,-8,3,-6,1,5,-6,-2,-2,4],[7,-6,8,-3,-5,-4,-6,-9,-4,5,4,9,10,6],[-8,-9,-10,-5,-5,5,3,-4,-2,9,7,-3,-5,-3],[-4,4,-3,6,-10,-2,-9,-6,10,3,-4,-10,-6,3],[5,-4,-7,10,5,-3,-7,9,-6,10,6,8,4,10]],[[2,1,9,6,-8,-8,-4,-8,-10,9,-4,1,-2,2],[8,-10,-7,-8,8,4,4,-9,-7,-3,3,-2,-3,-1],[-4,5,-6,4,5,2,8,9,10,-4,4,3,-9,6],[-9,-9,1,9,-6,-1,-5,-6,10,6,-5,8,-8,-9],[-7,-9,4,-3,1,-2,-3,9,7,10,3,9,8,7],[10,1,5,-6,-9,5,1,8,-2,3,-4,-1,10,-5]]], dtype = "int64")#candidate|36|(7, 6, 14)|const|int64
bop_37 = relay.bitwise_and(var_35.astype('int64'), relay.reshape(const_36.astype('int64'), relay.shape_of(var_35))) # shape=(7, 6, 14)
uop_40 = relay.atan(bop_37.astype('float32')) # shape=(7, 6, 14)
const_42 = relay.const([[[-0.995182,3.324883,6.987182,-4.627352,6.569298,4.409636,6.051489,7.385953,5.959917,5.820883,5.556892,5.339864,-2.585254,-3.874157],[9.310535,-5.273412,-3.097499,3.784944,-6.679779,0.758675,-8.555743,-7.915376,-1.696062,-8.760925,9.932223,-9.928444,-8.148527,-5.878757],[3.636025,7.883365,-0.985783,6.489244,3.562948,1.262335,-3.456019,-1.583810,3.485265,0.165261,-9.793885,6.177883,0.888233,5.062023],[1.995154,-5.876670,-9.589594,4.986564,4.061493,3.893421,-0.914910,-4.276872,7.676043,9.753225,-7.596886,8.125386,-5.878329,-8.269207],[-2.420652,3.801983,-5.872538,-7.944144,1.082895,5.883484,-4.135349,0.055702,4.436119,-1.277688,-0.593006,-0.673010,-3.970711,-0.607602],[-4.526623,-8.414138,-2.266447,4.680109,4.166535,3.202376,5.149643,-2.267762,-5.836344,-8.586112,2.407893,-7.358707,-5.869272,-8.641379]],[[-4.892398,1.340992,-5.500956,4.508633,9.909833,7.730839,9.118519,5.536427,9.437186,-1.329615,-8.852204,-0.247907,8.188153,5.428280],[4.689349,-9.863849,-7.278564,-5.256978,8.543398,1.720693,-9.925202,-8.790321,-7.728110,2.199050,6.152107,0.550428,-3.932684,9.021087],[-9.717858,-7.034257,1.184500,-6.412407,-2.850581,-3.536263,-5.252592,7.709463,-1.685586,-8.197300,6.507363,-7.532334,-5.959993,-0.513451],[0.491008,-3.591282,2.660169,5.186574,-1.667916,-6.847422,8.258544,-2.966132,9.401689,-8.436591,6.934281,-4.516740,-5.993839,6.810092],[-7.258145,-2.001975,-5.300825,9.999886,3.418005,-3.284110,-0.408854,-7.500982,8.110179,-9.025014,-1.145532,-0.003307,2.079970,1.976172],[8.421282,-2.227470,-1.013793,-8.337122,-9.967080,-0.653253,-4.508117,6.695354,-4.536906,-0.371473,-2.249814,-3.890554,-3.434912,6.246597]],[[8.024700,4.880457,4.373907,-0.898970,-3.568982,-0.855868,-3.547480,-4.422322,9.677795,-1.705026,-7.312040,8.552887,1.454102,3.003379],[-5.588484,4.166581,7.382836,3.399702,8.616440,9.541721,-6.313611,-0.263874,-1.430235,2.770881,-5.897208,8.905844,8.577521,0.308001],[-8.753849,-0.360047,7.540380,-8.097085,-7.614316,-5.941434,3.272081,-8.476209,0.423009,6.968797,1.060362,-5.083094,-5.688548,-5.564800],[-6.553034,-9.133660,9.315246,-5.063595,-1.822237,5.043784,-6.294216,-7.544623,4.980882,7.578140,8.744138,4.709159,8.687543,-4.481110],[6.263638,8.845524,0.388803,6.214769,-5.779073,4.872999,-8.602343,-2.028331,-5.434722,6.721737,6.377129,6.889524,1.702183,4.276331],[-2.777687,-5.573559,0.192028,7.727176,8.662921,7.517965,-1.150077,-3.392423,5.527718,9.489869,-0.239508,-8.588991,7.273122,-6.648367]],[[-0.901807,-5.698780,-9.514476,-8.308611,-8.141685,-4.534166,-7.932309,-7.536273,-6.694480,-5.382979,9.828968,-3.234048,-6.932679,5.041947],[-7.698261,-2.324524,2.112628,2.497919,6.029895,3.600356,7.392153,8.091281,8.143628,1.209601,-9.155650,-5.971224,4.881569,5.382320],[3.155693,-5.970904,8.581547,-1.204065,9.531719,-5.628235,4.050791,-4.013178,6.791586,3.539513,2.233657,-7.786906,-6.240738,0.500338],[6.507545,0.128779,0.540403,-5.944795,-4.582283,-5.995651,-0.452858,-8.139314,-1.460318,8.405529,-5.717000,7.279235,7.524936,7.055793],[-0.098659,1.784984,-3.278861,-6.300864,-9.460768,-9.933458,8.594405,-6.196524,7.987616,8.094060,-9.565789,7.956748,2.248479,-8.333703],[-4.023240,-2.651516,5.725012,9.254837,-8.074685,6.968638,-9.478641,1.156671,-8.111522,-0.480601,-7.692902,-8.897839,-4.015011,3.399084]],[[-6.903007,-4.059859,-5.499646,2.808170,-8.350618,2.207048,-5.936617,-5.987577,-1.693886,-3.053937,4.022797,-5.087589,-5.893733,-0.302700],[-5.436026,2.911270,-9.368732,1.384562,-3.224090,-9.321203,1.892582,-1.283861,-6.740827,9.573145,-9.923577,-9.143094,-1.551320,-5.541875],[6.105691,1.897608,-7.832187,-9.220778,-0.271658,9.798378,-3.007940,5.116378,9.945486,5.400827,-9.980342,-0.986119,-9.862961,2.113675],[4.311428,1.572876,-4.890369,-0.065419,2.307865,1.056989,0.111970,1.108934,-2.767089,4.573699,-6.652069,-7.303705,3.446936,6.953101],[3.694133,-7.038290,-6.253129,9.460872,-9.461989,-6.047425,-7.826303,2.002201,-6.908735,9.665605,-7.270427,4.492801,8.009447,2.967341],[-0.931112,-9.588710,3.637747,6.849440,-4.027600,7.296631,-7.900704,9.374402,7.525220,-8.789299,8.308648,6.395193,7.091645,-2.260357]],[[-3.855958,9.434538,-6.806649,-5.510382,1.520150,-1.769491,-6.531457,-7.669263,9.462735,8.106460,4.770569,-5.267333,1.009380,-6.988374],[-9.318489,4.247613,-5.469805,-5.251381,-9.858328,0.434409,-5.563912,7.871030,3.030486,1.872570,3.566759,1.034218,4.254299,3.272063],[8.605569,0.010081,-8.613209,-4.988088,4.587862,-8.982700,2.602060,8.353606,4.398074,-4.471432,3.871515,5.749371,-7.659073,5.150117],[-9.789095,-3.832985,-4.708884,-6.394274,-1.775625,7.071100,8.886147,2.925156,7.729167,-7.872976,-7.027888,7.131213,-4.375278,-6.417405],[-2.426305,-4.781853,7.435085,-4.919113,-2.744520,-1.126244,-2.474110,2.700151,2.626243,-8.126906,9.006078,9.025009,-7.183359,4.815855],[0.950370,5.096016,5.837357,0.287316,3.910253,-4.477279,-1.248587,-9.761649,5.018631,-9.018006,1.012977,2.537959,3.783277,-1.036363]],[[-0.187257,-7.352294,5.099122,2.210863,-0.951052,6.619412,-5.890700,1.645543,9.305950,9.764648,0.391408,8.752242,7.856581,-6.600331],[-7.127748,-8.701526,-7.130798,-2.652533,-0.984659,1.222170,-6.840874,-2.772536,-8.464615,3.196896,-4.078627,-2.336693,-0.407880,-6.644418],[6.281223,-8.637132,5.001859,-4.673957,-0.386367,0.367387,-1.680459,3.826417,-4.473674,9.696334,3.309510,-2.812203,-6.580378,-6.388553],[-6.536299,-1.119409,2.530638,7.908735,1.522780,-4.496295,4.619185,-8.404856,-6.642144,-5.452918,-1.498387,-0.544910,6.010511,9.117846],[8.113482,-5.607927,-6.642931,5.106731,-5.184292,-5.785392,-4.968975,5.013925,-2.751036,8.629299,2.585051,9.660790,-7.015532,5.329648],[-7.393964,2.994538,-8.478374,-9.734865,-3.849020,-0.160637,-1.902798,-1.524025,-2.205903,-7.485142,9.607978,3.977623,-9.674287,-6.761440]]], dtype = "float32")#candidate|42|(7, 6, 14)|const|float32
bop_43 = relay.subtract(uop_40.astype('int16'), relay.reshape(const_42.astype('int16'), relay.shape_of(uop_40))) # shape=(7, 6, 14)
var_46 = relay.var("var_46", dtype = "float32", shape = (7, 6, 14))#candidate|46|(7, 6, 14)|var|float32
bop_47 = relay.floor_mod(uop_40.astype('float32'), relay.reshape(var_46.astype('float32'), relay.shape_of(uop_40))) # shape=(7, 6, 14)
uop_50 = relay.acos(bop_47.astype('float32')) # shape=(7, 6, 14)
bop_52 = relay.less_equal(uop_50.astype('bool'), relay.reshape(bop_47.astype('bool'), relay.shape_of(uop_50))) # shape=(7, 6, 14)
func_26_call = mod.get_global_var('func_26')
func_33_call = mutated_mod.get_global_var('func_33')
const_58 = relay.const([8.657007,1.309942,7.290891,-9.108590,4.980094,-6.402443,-8.237626,8.083669,-6.856957,-4.607634,9.506259,-6.741236,-5.868826,1.299070,5.290996,4.885788,-4.476410,7.293123,-1.840869,3.125353,5.985054,3.576765,5.947658,-5.953661,4.460235,5.385381,3.135665,7.864412,0.394957,5.291208,-8.475607,5.867885,-9.202322,-9.114449,-6.454267,-2.988181,5.017492,2.195687,-9.670740,-3.460644,1.555080,-2.466909,9.566665,-9.956554,1.156578,-5.603559,-8.650945,-6.408406,-7.049113,5.307389,-3.243759,-4.272985,-8.109124,-8.735877,7.446061,-3.909519,6.055749,-1.545456,-4.440930,9.462999,-7.755765,8.226671,8.630334,9.642262,-7.974315,-7.646051,-1.838013,-6.157749,8.345208,4.955952,-1.915953,5.023635,8.370697,-0.331984,-3.355887,2.158534,7.127436,2.670682,-7.699236,-7.107308,7.403821,4.533290,9.621868,-2.889288,9.083337,-3.905960,-0.212965,5.041811,4.133954,1.925567,2.537086,-4.653935,-9.749224,8.250945,7.026249,4.790474,-5.083480,-9.886619,2.211484,-5.182800,4.352993,-4.148396,-8.974168,8.097116,3.889285,1.138227,3.285911,-6.653350,3.562056,-2.696662,8.378091,-0.117338,-3.041905,-3.582082,0.946480,-6.626266,5.732786,-8.503399,-2.356216,4.606709,9.516583,-7.109091,-5.084805,-2.344502,-4.027530,-2.231703,-0.307870,-1.093154,-7.699600,-9.190928,4.791576,-4.475325,4.999798,4.194047,-9.444375,-7.055396,6.052516,-3.493049,0.632579,-0.274026,7.916245,9.931067,9.011577,-8.110109,-8.168101,4.036910,-6.211421,-5.186128,1.795626,0.238727,-8.243135,9.022239,5.909271,-2.973589,-3.949068,-2.996520,9.753798,3.773046,1.321706,-0.106793,8.381107,-6.383443,8.788058,1.168990,-6.638514,-2.693165,-0.831445,-9.905334,9.139728,-6.509934,4.288286,2.169942,6.341306,0.700500,4.766339,-9.801498,-7.094102,-7.446560,-6.926323,-4.248394,-5.796436,7.387336,-8.951594,-0.005030,-3.911007,8.339623,-6.358821,5.921551,0.442545,-0.520283,-6.263212,3.633313,6.568782,2.010150,-6.795609,-6.381738,-9.214611,1.895324,-0.027348,1.122821,8.745037,-1.982210,0.146133,5.168540,9.108088,5.709563,-8.179090,-6.710814,-8.175223,6.218820,1.617107,-1.558751,-7.069385,-5.852446,4.295781,4.793375,-1.158232,-2.647241,5.862108,-2.900467,-9.372038,8.407220,7.703795,-3.419422,3.065547,-5.415010,-8.092960,-6.360851,-9.000857,9.900273,-8.247940,-7.534702,-3.038811,3.936660,-4.516551,-6.570016,2.594309,-6.717121,0.025292,3.400551,-4.309156,3.783314,-2.677065,6.955720,-8.821583,-3.759538,-4.798648,8.049752,-4.043974,-4.245310,7.727649,1.291296,-6.460545,9.064035,-5.230776,-8.834860,-2.834918,7.682315,-3.794374,4.751632,4.579111,1.271875,2.648774,1.773312,3.512236,-0.430976,-8.324404,-6.512965,4.157086,5.344251,-1.147930,6.533283,0.961765,9.229107,5.593729,0.568651,-2.990584,-5.087980,6.792689,1.085370,-4.585413,9.109762,5.713639,5.164206,5.507683,1.908888,9.853358,-4.422888], dtype = "float64")#candidate|58|(288,)|const|float64
call_57 = relay.TupleGetItem(func_26_call(relay.reshape(const_58.astype('float64'), [9, 2, 16]), relay.reshape(const_58.astype('float64'), [9, 2, 16]), relay.reshape(const_58.astype('float64'), [9, 2, 16]), relay.reshape(const_58.astype('bool'), [9, 2, 16]), relay.reshape(const_58.astype('float32'), [9, 2, 16]), ), 0)
call_59 = relay.TupleGetItem(func_33_call(relay.reshape(const_58.astype('float64'), [9, 2, 16]), relay.reshape(const_58.astype('float64'), [9, 2, 16]), relay.reshape(const_58.astype('float64'), [9, 2, 16]), relay.reshape(const_58.astype('bool'), [9, 2, 16]), relay.reshape(const_58.astype('float32'), [9, 2, 16]), ), 0)
uop_60 = relay.asin(bop_47.astype('float64')) # shape=(7, 6, 14)
uop_62 = relay.sin(var_35.astype('float64')) # shape=(7, 6, 14)
func_26_call = mod.get_global_var('func_26')
func_33_call = mutated_mod.get_global_var('func_33')
call_64 = relay.TupleGetItem(func_26_call(relay.reshape(const_58.astype('float64'), [9, 2, 16]), relay.reshape(const_58.astype('float64'), [9, 2, 16]), relay.reshape(call_57.astype('float64'), [9, 2, 16]), relay.reshape(call_57.astype('bool'), [9, 2, 16]), relay.reshape(const_58.astype('float32'), [9, 2, 16]), ), 0)
call_65 = relay.TupleGetItem(func_33_call(relay.reshape(const_58.astype('float64'), [9, 2, 16]), relay.reshape(const_58.astype('float64'), [9, 2, 16]), relay.reshape(call_57.astype('float64'), [9, 2, 16]), relay.reshape(call_57.astype('bool'), [9, 2, 16]), relay.reshape(const_58.astype('float32'), [9, 2, 16]), ), 0)
uop_66 = relay.tan(var_35.astype('float64')) # shape=(7, 6, 14)
bop_68 = relay.greater_equal(bop_52.astype('bool'), relay.reshape(uop_60.astype('bool'), relay.shape_of(bop_52))) # shape=(7, 6, 14)
uop_71 = relay.erf(uop_60.astype('float64')) # shape=(7, 6, 14)
var_75 = relay.var("var_75", dtype = "float64", shape = (7, 6, 14))#candidate|75|(7, 6, 14)|var|float64
bop_76 = relay.add(uop_60.astype('uint64'), relay.reshape(var_75.astype('uint64'), relay.shape_of(uop_60))) # shape=(7, 6, 14)
uop_79 = relay.log10(bop_47.astype('float64')) # shape=(7, 6, 14)
bop_81 = relay.logical_and(bop_76.astype('bool'), relay.reshape(uop_79.astype('bool'), relay.shape_of(bop_76))) # shape=(7, 6, 14)
bop_84 = relay.right_shift(uop_71.astype('int16'), relay.reshape(bop_37.astype('int16'), relay.shape_of(uop_71))) # shape=(7, 6, 14)
uop_88 = relay.acos(uop_71.astype('float64')) # shape=(7, 6, 14)
uop_90 = relay.cosh(uop_88.astype('float64')) # shape=(7, 6, 14)
const_92 = relay.const([[[-1.144937,-2.896606,3.891244,-3.707081,-3.049112,8.055200,-3.379139,4.394140,-4.299776,-6.777070,-0.789140,-5.981811,7.604228,5.369092],[-6.251666,-8.113283,-0.309001,-8.443666,5.600254,-0.149397,-2.628578,0.666714,-7.153626,-4.148474,-5.677527,-3.405948,-9.509943,6.490109],[3.164639,-6.033993,4.176879,-6.881779,8.191376,5.962985,5.172170,-0.210704,-9.417109,-0.763717,-4.859634,6.361804,8.548616,-3.996366],[-3.923898,4.651828,-6.473351,0.410559,9.459001,-1.741318,7.721772,4.070228,3.809421,-5.830608,1.350767,4.001173,7.454812,-2.753139],[-9.129184,-1.487660,4.526769,-5.500486,4.787902,1.919586,8.157398,4.534728,-1.230398,9.266164,4.146454,6.844032,-2.341179,-7.639609],[7.886610,-7.170013,6.066623,-1.572403,-1.059720,0.142299,7.333456,-7.229070,-3.826681,8.410749,-1.838108,-3.626068,-2.102265,5.112970]],[[-8.038457,-5.347929,-2.011098,6.888254,7.890035,-8.689002,-6.233507,-1.531861,2.794276,-4.924890,-6.741254,-4.349848,-9.892423,-4.362298],[-7.013343,9.569715,-5.852801,-0.582077,-1.170839,-8.449729,0.307205,-6.249982,-2.122868,5.869438,1.352567,0.771462,3.326818,9.057392],[6.908269,-3.519201,6.134529,-9.603182,2.229464,-1.076431,8.251822,-1.708065,-8.475991,-0.368210,8.755413,-4.827264,-6.076923,-2.310374],[1.080267,8.351464,-0.205340,-9.175991,-7.516453,9.943189,6.309800,6.569117,-6.768603,1.270930,-7.497176,-1.924115,-6.867487,9.002461],[-1.253812,-7.516699,3.081959,-3.392404,-2.143580,6.167370,-4.239623,-2.528405,-9.951369,-9.938803,1.177808,2.210746,5.831979,8.781414],[-7.466356,-8.251263,6.355304,-2.882208,6.984134,-3.871429,7.663391,-7.586462,-7.436055,8.122444,-8.188551,6.973024,-9.132404,-6.294416]],[[-6.797573,4.138845,-7.789456,-2.778561,-5.560184,-5.188805,1.944733,7.348374,-2.180872,-3.492880,5.108479,5.140797,8.469133,2.966786],[-1.133573,-9.657426,-4.906790,0.283215,4.072437,-0.780841,6.107494,7.622447,9.895128,9.985347,-0.470806,-6.698841,-7.522807,-2.320643],[-7.866954,0.331743,7.609206,-1.687793,3.048438,-3.697861,8.856303,-9.488399,6.775826,9.979701,2.606867,-2.817737,8.757220,1.619992],[-7.244228,4.172864,8.214162,9.225615,-3.528652,-1.610011,-9.186168,8.714303,3.348724,-4.095889,4.238631,4.599446,-8.145882,9.009043],[-1.096666,5.110941,-0.457423,-2.259092,5.465470,-1.695858,3.522277,5.118187,2.521150,3.957166,0.519070,6.687437,6.096776,1.245842],[-2.682477,3.682760,4.439014,2.303055,-9.354187,0.301398,-4.371447,5.301269,0.759388,0.437126,5.566149,1.569834,-4.306514,-4.389645]],[[-1.353385,3.593475,-2.721752,0.117424,-5.258002,8.373597,-4.048300,-5.106170,-5.945155,-2.528984,2.496592,-6.574169,-8.211501,2.018372],[-1.841754,3.044881,0.089320,4.564437,3.953624,8.624826,9.424510,-4.329032,2.210417,-2.874613,7.077610,7.673845,-5.214269,0.069455],[-4.383507,3.071869,-1.077809,7.203424,-0.076468,4.517326,3.993973,7.437119,6.305408,0.206747,-6.177622,-9.379171,-8.384623,-8.512012],[5.232599,-0.175235,-8.910888,-1.842045,-5.080545,-7.252121,-6.706823,-5.663446,-3.809087,0.246502,-2.415088,2.466686,-8.275751,-0.253053],[0.743378,-5.788516,-1.462660,-7.807567,-4.547791,-3.388726,-0.267573,6.860601,-1.290185,8.835811,6.710618,5.579174,8.884220,5.909659],[-4.851922,-2.796047,-1.660688,8.067547,3.791825,-7.679210,-2.433035,-8.752943,4.949579,-1.297748,-8.614535,7.978126,-8.369090,3.267763]],[[5.292291,7.069319,-0.705656,2.395921,-9.759827,2.701222,7.087421,-8.338903,-4.663972,-8.419270,-4.941209,-8.028072,-6.133778,7.000887],[-6.503204,-0.273449,6.160251,4.819840,-4.350870,-1.614891,4.165916,-4.011097,9.295211,1.733663,-7.631764,-5.156512,-7.947603,2.633393],[-9.888668,3.434929,2.595680,-6.570896,0.059292,-5.598528,-7.752579,1.857316,-6.678829,-4.933151,-0.060034,-0.980083,-0.089228,4.068186],[7.183548,6.959999,0.173907,-1.843211,9.585924,1.104105,-0.877463,-4.995119,0.752855,2.892021,2.772439,5.227867,4.398131,-7.494846],[-4.750393,-4.953369,-8.596935,9.879904,-3.736203,-5.350423,-1.901349,-9.639608,6.399319,-8.697651,-4.603357,4.051179,1.666295,8.124747],[-7.963164,-0.616532,-2.555246,-1.671794,0.913779,-3.652257,7.957373,0.591695,2.541956,-3.896712,-5.529407,8.528671,-8.008307,-1.419873]],[[6.100786,-2.173127,-8.594116,2.822880,5.068342,8.465873,8.018629,-2.604705,3.731276,2.385417,-3.782208,6.017176,-9.762822,6.560116],[2.915894,-0.622515,-7.790115,-5.983433,-6.622055,4.005121,1.377567,-4.548837,-5.663633,4.225947,-4.361865,-9.749218,7.060440,9.413704],[-8.665189,-7.811196,-5.054437,3.614400,-7.086751,3.932874,9.999551,-1.309317,-8.472702,2.267622,-6.414986,-6.035586,6.981098,9.518241],[-1.683926,-9.403895,5.264565,5.280609,-8.808414,-0.427802,-8.617947,5.645758,-3.655387,4.644616,-8.472926,-6.330620,4.498376,0.297968],[7.889099,1.615765,2.439429,6.899969,8.625700,-5.867565,4.170307,-3.783750,1.152769,4.729852,7.050006,-9.953318,8.093482,-8.688723],[6.286446,-4.598437,-4.681166,-1.770583,5.997458,3.356734,-2.916617,-7.309052,-2.979121,-6.650328,-1.001976,-9.829571,-6.319811,6.101610]],[[8.796318,-2.994853,4.877334,7.298870,6.285989,1.169600,7.022565,3.767726,2.077455,2.916318,-4.796084,3.475834,4.966215,-2.274660],[-4.516713,-5.729873,-2.511343,-1.043478,5.639260,8.606474,3.175647,6.722370,6.890858,5.983414,7.515443,0.122376,-8.293227,-9.905542],[-0.116410,0.435946,0.519590,-0.006659,-5.867219,8.506754,-4.884221,-7.664703,-0.879363,2.095391,-5.450513,-4.261371,1.303003,0.702241],[-5.386177,-0.683838,3.193837,3.911728,0.887119,-3.387159,-6.330278,8.393960,-2.004208,-7.931057,8.498427,5.953882,-1.116811,4.081594],[4.773995,5.231463,6.516743,-2.773407,3.521016,7.411499,5.918748,0.641512,6.356069,-4.975758,-9.963995,-8.415216,-6.252396,-8.809833],[5.096515,7.253992,-9.948003,-5.458013,-1.431682,-4.175469,-3.405807,-9.053753,0.906436,1.162183,-6.776080,9.545273,5.673989,-9.663483]]], dtype = "float64")#candidate|92|(7, 6, 14)|const|float64
bop_93 = relay.equal(uop_90.astype('bool'), relay.reshape(const_92.astype('bool'), relay.shape_of(uop_90))) # shape=(7, 6, 14)
var_96 = relay.var("var_96", dtype = "float64", shape = (7, 6, 14))#candidate|96|(7, 6, 14)|var|float64
bop_97 = relay.divide(uop_71.astype('float64'), relay.reshape(var_96.astype('float64'), relay.shape_of(uop_71))) # shape=(7, 6, 14)
bop_100 = relay.less(uop_90.astype('bool'), relay.reshape(bop_37.astype('bool'), relay.shape_of(uop_90))) # shape=(7, 6, 14)
const_103 = relay.const([[[4.526221,9.753176,-9.871917,0.440367,-5.667713,9.523246,7.317955,5.972208,-0.221334,2.476824,5.174159,2.532735,3.032263,-2.346457],[7.377090,5.870654,-5.142462,6.008660,-9.616771,7.965456,3.243419,3.574772,4.082305,-3.463620,-8.417878,7.978439,-4.010798,-1.291973],[-0.154953,-5.946705,-2.920600,1.318088,-8.802812,8.378550,4.457051,-5.168838,9.745897,1.182912,-5.227596,-5.161424,-1.343189,-3.944551],[-6.532132,-3.084425,7.167210,3.472299,6.940327,3.447269,0.532618,-2.045571,8.755762,-4.113296,2.198934,1.652168,6.322265,-9.873984],[-5.228557,-3.326180,4.294591,4.847784,6.532958,-7.378598,5.470019,2.129107,-2.593399,4.556310,-0.184619,-8.835853,-5.218641,7.905023],[4.531173,7.520521,-0.309598,-0.116494,-5.070500,-0.609969,-0.786002,-0.372798,-9.795982,7.851514,-0.487299,-5.531341,-7.459804,-8.942821]],[[9.034030,-7.396591,4.951429,-6.166035,2.059177,2.868388,-8.618957,9.149364,-4.310651,8.148653,7.679342,2.563533,1.585571,-9.061686],[-6.057146,-2.876999,-3.444281,-0.040558,-8.779341,8.322572,8.582372,-4.309427,8.659187,0.748777,5.986996,-4.925496,5.052912,-2.732841],[-6.428692,-8.214247,8.650398,-0.629895,2.874180,8.415173,4.877032,9.256300,0.627876,-4.681134,3.239653,-6.762601,-9.749697,-9.744658],[-7.469444,3.675065,9.680625,1.927383,-0.350219,2.919700,-9.797443,-3.663840,0.192869,3.072161,9.732144,9.375750,9.578410,4.684033],[7.071642,8.470873,6.818175,-1.164087,-9.819659,3.506752,5.229601,-7.466345,-7.960848,0.770216,-4.456425,-3.882379,-3.537609,-6.114059],[-5.732897,-2.028927,6.603153,7.012120,-4.687206,-6.851394,-0.079596,5.878158,-2.064352,0.299385,-9.923920,-7.052161,3.291402,-4.952272]],[[5.907757,8.807842,9.538575,5.761419,5.678508,9.592039,-6.739656,-0.402106,9.223210,-1.974255,8.454268,-3.037699,-2.802155,-4.748354],[-1.788727,7.664084,-7.245561,3.459936,-9.554708,-5.961654,8.637287,5.972506,5.094137,-2.544366,-3.109109,-7.827090,9.400285,4.236873],[-7.732886,6.140675,6.001736,-6.826575,-1.305334,8.226537,-1.654559,-3.241114,1.769852,5.371665,-4.028707,6.958496,-4.489902,-2.581101],[0.350074,8.139298,-8.227444,-2.289132,2.301576,1.765072,-9.091446,9.916593,-1.479724,-4.410398,9.837534,2.728894,-5.904316,-7.030595],[-7.959765,-4.551933,4.207085,7.325247,-9.791690,2.954841,-8.507482,1.977399,3.385156,0.346823,4.223163,4.150777,8.842378,-1.298574],[2.564615,-7.050268,7.382200,8.464041,-8.291513,-3.393569,-4.673007,2.249286,-8.974929,7.845959,1.395734,-1.788883,5.215421,5.790180]],[[-4.415250,-1.345109,2.545082,6.602517,8.305536,2.544788,-8.806019,-0.099616,0.232224,2.237432,5.785028,8.838957,-7.294390,1.818524],[5.921521,-4.474767,-3.894652,6.035780,-2.673871,-3.595924,-2.877401,0.512294,-3.923379,7.573912,3.024491,5.011059,-3.795623,2.061043],[-9.508249,-9.626104,-1.795824,3.480856,1.881625,-6.529179,-3.253158,1.220624,-5.349834,8.385345,-1.530565,-0.019704,5.550238,-7.718027],[-5.612653,-0.533208,-1.008711,-3.041458,-2.470051,3.812820,-6.317407,6.614286,4.673989,5.076953,9.619928,-5.251234,-1.578406,-1.696732],[-5.090887,6.206220,-5.866500,-4.504461,-4.211940,3.965724,-0.136755,-9.548129,-8.650537,4.021715,-6.329360,7.617922,6.717951,3.116381],[-2.197904,-5.546621,5.609536,6.043889,4.969765,-5.168800,-1.368242,-5.480781,1.148933,-2.624244,-6.641907,7.412158,-7.987624,6.001434]],[[-4.706194,0.739954,-6.685241,3.353190,4.139984,0.614496,-8.133378,-0.291549,-3.232239,-7.234936,2.414924,5.239225,-7.181027,-3.652884],[-2.232995,8.466914,7.543820,9.612621,-8.173647,4.987820,-9.911599,-5.620074,-0.813595,5.023788,-7.124147,-8.308403,-2.146827,5.650777],[-4.680044,-5.239128,4.810810,6.899793,-9.433188,-8.997942,-6.326735,9.394791,5.594109,8.352472,-8.322798,-3.788976,-9.517166,8.680172],[-5.402498,-4.850650,-9.373040,3.124161,-8.267224,-8.041985,-8.775459,5.972000,-3.008681,7.086181,-1.537742,-9.017329,9.370692,4.657331],[2.375104,6.498705,-5.073860,5.783870,-2.018746,-0.867949,7.377420,6.044097,-5.282748,-7.356657,9.777500,-9.367634,1.077257,8.823045],[1.679224,-7.301744,1.920572,-4.671196,2.826470,-5.393626,8.906681,-9.117876,-2.817110,-9.419360,-1.298692,9.658082,-4.044106,-4.594786]],[[-4.761161,-2.259464,-9.692968,1.149636,-8.859385,1.975208,7.582482,4.708366,3.830451,9.461765,-9.478409,-6.430368,3.849188,-3.992184],[4.126109,3.054153,-3.005184,9.081341,-0.373773,-7.458405,-4.241745,1.028374,-2.277906,-7.274201,-6.518158,3.252347,4.648521,-9.162705],[4.665981,-3.832913,4.478584,6.569765,-7.904494,-4.878645,6.087420,3.404924,7.778413,4.701228,-3.195539,0.076150,8.197393,3.665632],[-7.877720,9.222635,-3.310369,-2.394187,0.648326,-3.907911,-3.581380,1.047008,9.863749,6.441496,4.486454,-2.716932,0.852283,-0.193636],[-6.999450,3.410884,3.476509,6.821790,7.202278,3.449877,1.468736,-8.927882,0.461921,8.534596,-8.842895,0.211686,3.759461,7.949405],[7.377413,9.386945,1.105020,-6.673996,-4.458654,2.673595,1.597315,-1.228528,-5.075926,-1.987413,-4.335359,-2.772088,-7.652174,-2.920265]],[[-8.738754,-7.154062,-6.641851,5.213088,3.043664,-1.295153,4.029782,3.938647,1.091873,2.777807,-3.060785,6.786747,0.124714,7.097567],[1.931757,4.767671,-7.756427,1.096900,-2.853952,-1.171623,-2.428336,5.110113,-4.303910,-5.963895,-3.696809,5.815807,7.194293,-9.545602],[7.191912,-9.769353,2.433181,-1.736074,-7.205404,-9.723404,-9.822601,-9.659980,-8.019615,5.663574,-6.775328,-0.443000,7.035616,3.390312],[-0.790335,-6.115614,0.620850,-9.399147,-1.349220,-2.474374,-1.469453,2.844344,-7.775156,6.423548,3.602251,1.382196,-1.686358,6.554758],[-8.610436,-7.148122,-1.823261,-3.804319,8.626187,-2.506786,0.462019,-6.675428,-1.825064,-3.899294,7.695560,9.883283,-7.902155,-7.488690],[-9.278277,3.502340,-6.479820,9.060338,-0.415093,7.810219,-0.950262,2.672702,-7.842731,1.906175,-3.805789,6.034650,2.432780,-7.913834]]], dtype = "float64")#candidate|103|(7, 6, 14)|const|float64
bop_104 = relay.greater(uop_90.astype('bool'), relay.reshape(const_103.astype('bool'), relay.shape_of(uop_90))) # shape=(7, 6, 14)
bop_107 = relay.bitwise_and(uop_88.astype('uint8'), relay.reshape(uop_71.astype('uint8'), relay.shape_of(uop_88))) # shape=(7, 6, 14)
const_110 = relay.const([[[True,False,False,False,False,True,False,True,True,True,True,True,True,False],[True,True,False,False,False,True,False,False,False,True,False,False,False,False],[True,True,True,False,True,True,False,True,False,False,False,False,True,True],[True,False,False,False,True,False,True,True,True,True,True,True,True,True],[True,True,False,False,False,True,False,True,False,False,False,False,False,False],[False,True,False,True,True,False,False,False,False,True,True,True,False,False]],[[True,True,False,False,True,False,True,True,True,True,True,True,False,True],[True,False,False,False,False,False,True,True,False,True,False,False,False,True],[True,True,False,False,False,False,True,True,False,False,True,True,True,False],[False,True,True,True,False,True,True,False,True,True,True,True,False,True],[True,True,True,True,False,True,True,False,True,False,False,True,False,True],[False,False,True,False,True,False,True,True,False,True,True,True,False,True]],[[True,False,False,False,True,True,True,True,False,True,False,True,True,False],[False,False,True,False,False,False,False,True,False,False,True,False,True,False],[False,True,True,True,True,False,True,True,True,True,False,False,False,False],[True,True,False,False,True,True,False,True,True,True,True,False,True,False],[False,False,False,False,True,False,True,False,False,True,True,True,False,False],[True,False,False,True,True,True,True,True,False,True,False,False,False,True]],[[False,True,True,False,True,False,True,False,False,False,True,False,True,False],[True,True,False,True,True,True,False,True,False,True,False,False,False,False],[False,True,False,False,False,True,True,False,True,False,False,True,False,True],[True,False,False,True,True,False,False,True,True,False,False,True,True,False],[False,True,False,False,False,False,True,True,False,False,True,True,False,True],[True,False,True,False,False,True,True,False,True,True,True,True,True,True]],[[False,False,True,False,False,True,True,False,False,False,True,False,False,False],[True,False,False,False,False,True,True,True,False,False,True,True,False,False],[False,True,True,True,False,False,True,False,True,False,False,True,False,False],[True,False,False,True,False,False,True,True,True,False,False,True,True,True],[True,True,True,True,False,False,False,False,False,False,False,True,False,True],[True,True,True,False,True,True,True,False,False,True,True,True,True,True]],[[True,False,False,False,True,True,True,False,True,False,False,True,False,True],[False,False,False,True,True,True,False,True,False,True,True,False,False,False],[False,False,True,True,False,True,True,False,False,False,False,True,False,False],[False,False,True,False,True,True,False,False,False,False,True,True,True,False],[True,False,False,True,False,True,False,False,False,True,False,False,False,False],[True,False,True,True,True,False,False,False,False,False,False,False,False,False]],[[True,True,False,True,True,True,False,True,False,True,False,True,False,False],[True,False,True,True,True,False,False,False,False,False,False,False,False,False],[True,False,False,False,False,True,True,True,False,False,True,False,True,True],[True,True,True,True,False,False,False,True,False,False,True,True,True,True],[True,True,True,False,False,False,True,False,True,False,True,True,False,False],[True,True,True,True,True,True,False,True,True,False,False,False,False,True]]], dtype = "bool")#candidate|110|(7, 6, 14)|const|bool
bop_111 = relay.greater(bop_93.astype('bool'), relay.reshape(const_110.astype('bool'), relay.shape_of(bop_93))) # shape=(7, 6, 14)
bop_114 = relay.bitwise_or(bop_104.astype('int64'), relay.reshape(bop_97.astype('int64'), relay.shape_of(bop_104))) # shape=(7, 6, 14)
uop_117 = relay.acosh(bop_107.astype('float32')) # shape=(7, 6, 14)
bop_122 = relay.maximum(bop_111.astype('int64'), relay.reshape(bop_97.astype('int64'), relay.shape_of(bop_111))) # shape=(7, 6, 14)
uop_125 = relay.acos(bop_93.astype('float32')) # shape=(7, 6, 14)
uop_127 = relay.log(uop_125.astype('float64')) # shape=(7, 6, 14)
output = relay.Tuple([bop_43,call_57,const_58,uop_62,call_64,uop_66,bop_68,bop_81,bop_84,bop_100,bop_114,uop_117,bop_122,uop_127,])
output2 = relay.Tuple([bop_43,call_59,const_58,uop_62,call_65,uop_66,bop_68,bop_81,bop_84,bop_100,bop_114,uop_117,bop_122,uop_127,])
func_130 = relay.Function([var_35,var_46,var_75,var_96,], output)
mod['func_130'] = func_130
mod = relay.transform.InferType()(mod)
var_131 = relay.var("var_131", dtype = "int64", shape = (7, 6, 14))#candidate|131|(7, 6, 14)|var|int64
var_132 = relay.var("var_132", dtype = "float32", shape = (7, 6, 14))#candidate|132|(7, 6, 14)|var|float32
var_133 = relay.var("var_133", dtype = "float64", shape = (7, 6, 14))#candidate|133|(7, 6, 14)|var|float64
var_134 = relay.var("var_134", dtype = "float64", shape = (7, 6, 14))#candidate|134|(7, 6, 14)|var|float64
output = func_130(var_131,var_132,var_133,var_134,)
func_135 = relay.Function([var_131,var_132,var_133,var_134,], output)
mutated_mod['func_135'] = func_135
mutated_mod = relay.transform.InferType()(mutated_mod)
const_155 = relay.const([[-6.361117,9.772061,2.802190,-3.807086,-1.358930,-3.550689,-6.746369,5.345457,-2.788845,-1.243480,4.031174,3.146495],[0.826519,5.546866,-2.535730,9.240362,-3.492322,6.712175,-7.753220,-1.031451,-4.954579,8.169265,-8.449694,5.049938],[0.542392,-7.782882,-9.380564,-1.523492,-0.508131,3.200152,-9.576087,7.508987,-7.145433,7.147537,-7.745843,4.537700],[-6.674388,8.008717,9.458592,0.333915,9.242718,1.739839,9.376484,3.559289,9.601785,4.916874,7.346222,-0.434258],[6.385464,-3.176229,3.335560,8.654970,-2.212515,-7.255638,1.070940,-3.638383,1.602819,7.884648,8.562140,1.625900],[4.500701,6.773098,7.293083,-5.070620,7.960585,7.881731,-6.022298,-7.675896,0.596099,-6.668342,-3.523157,0.745032],[-1.247937,2.402510,9.311518,-3.529367,2.662628,2.446757,8.540570,2.095831,-3.149427,3.553969,3.095538,7.351097],[-3.637700,-6.141073,5.612363,5.937791,-1.565320,4.679725,5.717002,-5.835744,8.577724,3.303817,-9.417117,6.895106],[3.288905,9.525310,-2.739290,-9.499787,9.866081,-9.176685,-2.505291,-9.918295,-7.126261,6.539383,-8.532531,-4.754056],[8.383790,-6.050638,-8.846229,2.241078,6.118503,9.585937,2.639187,-8.279175,-7.541267,9.450026,-6.132636,6.247433],[-4.670007,-1.020575,-3.989224,-2.884314,2.755712,7.235241,7.272415,7.209201,-7.353986,-4.173073,-2.929731,-5.284255],[5.080617,-7.593251,0.926307,-5.515377,-0.465831,-2.613808,1.538468,-7.820778,-9.985519,0.975147,-2.639582,-6.723054],[0.708299,2.811876,5.280850,-8.113255,4.700915,3.733704,-6.966606,-5.770403,-4.599377,8.671289,-9.121078,-6.182679],[-0.408805,-9.366580,9.870304,0.635425,1.731020,-7.077674,-5.076116,-1.493273,4.795194,-9.872856,5.377593,-3.239516],[-9.905055,-2.545516,-6.250309,1.542023,-1.841877,8.959003,-3.758842,-1.555118,2.444148,-8.309915,3.645541,-7.162492]], dtype = "float32")#candidate|155|(15, 12)|const|float32
var_156 = relay.var("var_156", dtype = "float32", shape = (15, 12))#candidate|156|(15, 12)|var|float32
bop_157 = relay.floor_divide(const_155.astype('float32'), relay.reshape(var_156.astype('float32'), relay.shape_of(const_155))) # shape=(15, 12)
const_160 = relay.const([[7.982023,5.191724,1.100503,-2.507243,5.860596,-1.585310,2.951468,0.328022,-0.692769,0.734999,6.449678,6.994276],[-2.794098,-4.379227,9.412955,1.627846,-9.913783,-8.163941,-4.363943,0.355957,2.864769,-0.426295,-2.465016,5.726148],[4.627221,-2.446545,-6.697421,5.205052,-8.368259,-8.834808,9.596565,-0.309155,8.840777,-0.630367,9.079703,6.235674],[3.127343,4.039282,5.949354,-1.543943,-6.363912,7.385060,-5.009125,5.584846,-3.087629,-2.261837,-1.070033,-4.046702],[4.754302,6.847832,-0.138687,-8.698809,6.744902,8.023794,-6.296771,6.221773,-0.286747,2.412933,0.846362,5.436124],[-9.807722,-3.419578,8.426231,-6.386840,1.656308,5.455921,-9.708592,8.201018,-1.676033,8.382041,2.919849,0.552178],[8.764636,-7.040182,9.227108,3.451376,-5.644713,-4.123782,-8.939727,-1.691700,8.147861,8.163396,4.953408,7.911355],[0.780870,-9.563554,3.459931,-2.129930,-4.124873,-4.376847,8.621415,-9.332988,3.242740,4.062794,0.943104,1.857169],[5.547013,7.138565,1.087408,-3.235423,3.439797,1.397589,-9.696970,1.741794,2.377202,6.612047,2.726119,-9.628092],[-1.056153,-9.956720,6.087689,-9.930956,-5.146348,-8.412161,-4.463024,-1.725073,4.405801,4.431803,-9.792228,7.115823],[-2.406086,-8.913972,-9.443293,-5.705686,-6.160700,-0.100478,-3.928351,-4.176339,-5.664040,-2.856779,-1.499850,-3.091301],[7.436156,8.902013,7.731271,2.716907,6.479397,7.359842,-9.888367,5.682402,0.590770,-2.703315,-0.510757,-3.027758],[1.102487,-5.851808,-4.671506,-2.268179,-4.483260,7.068028,-7.522701,3.012140,-6.633712,1.558521,-5.003791,8.560973],[-1.929740,6.798909,-3.979962,-6.843311,-0.637141,0.355255,2.651321,-7.505436,-2.614264,6.494224,-6.235337,-0.866758],[-0.502972,0.417174,-8.153744,-4.131937,9.413400,-3.227268,1.666136,8.905070,3.921912,-1.191908,-5.454174,-6.806246]], dtype = "float32")#candidate|160|(15, 12)|const|float32
bop_161 = relay.logical_xor(bop_157.astype('uint32'), relay.reshape(const_160.astype('uint32'), relay.shape_of(bop_157))) # shape=(15, 12)
output = bop_161
output2 = bop_161
func_166 = relay.Function([var_156,], output)
mod['func_166'] = func_166
mod = relay.transform.InferType()(mod)
mutated_mod['func_166'] = func_166
mutated_mod = relay.transform.InferType()(mutated_mod)
var_167 = relay.var("var_167", dtype = "float32", shape = (15, 12))#candidate|167|(15, 12)|var|float32
func_166_call = mutated_mod.get_global_var('func_166')
call_168 = func_166_call(var_167)
output = call_168
func_169 = relay.Function([var_167], output)
mutated_mod['func_169'] = func_169
mutated_mod = relay.transform.InferType()(mutated_mod)
var_185 = relay.var("var_185", dtype = "bool", shape = (10,))#candidate|185|(10,)|var|bool
const_186 = relay.const([True,True,True,False,False,True,True,True,True,False], dtype = "bool")#candidate|186|(10,)|const|bool
bop_187 = relay.logical_and(var_185.astype('bool'), relay.reshape(const_186.astype('bool'), relay.shape_of(var_185))) # shape=(10,)
bop_190 = relay.logical_or(bop_187.astype('bool'), relay.reshape(const_186.astype('bool'), relay.shape_of(bop_187))) # shape=(10,)
uop_193 = relay.asinh(bop_187.astype('float32')) # shape=(10,)
bop_195 = relay.greater_equal(uop_193.astype('bool'), relay.reshape(var_185.astype('bool'), relay.shape_of(uop_193))) # shape=(10,)
uop_199 = relay.cosh(uop_193.astype('float64')) # shape=(10,)
func_166_call = mod.get_global_var('func_166')
func_169_call = mutated_mod.get_global_var('func_169')
const_203 = relay.const([7.790935,9.043654,7.282423,0.207726,3.009187,-3.068040,2.313392,-1.608899,-4.806167,-9.477973,3.600686,-4.300955,0.893495,8.766281,5.538248,3.839913,-4.268169,3.673806,7.255954,8.145802,7.921879,8.256991,8.860063,-8.964183,-1.356873,-0.121130,-4.843380,-8.083501,-5.837398,-9.767904,1.644835,-2.899145,-4.299202,2.902525,-5.285886,7.027119,-2.447219,-6.409125,-1.570977,4.135001,-8.876210,-1.462566,-4.091928,-3.778895,-4.751460,-5.908901,-5.399974,6.860716,-6.512271,6.801617,3.066693,-3.589711,8.375132,-0.217911,-3.846109,-5.444091,3.584407,0.618399,6.705864,-4.229087,-6.045606,-6.419090,-1.644593,-7.655088,-8.778870,5.616064,-4.849401,-4.309430,4.017407,3.067555,-8.446810,-9.494517,4.357270,-3.286011,5.390433,-9.115987,2.181438,4.391408,3.523971,5.683899,8.201961,0.096040,-8.751834,6.703150,-9.362659,3.629728,-4.918890,-4.824425,5.043596,-1.734979,-3.054352,9.703268,9.524735,1.425611,-7.296380,5.573555,0.377605,9.257778,-8.633796,2.351450,6.198986,9.880928,-2.072435,9.631667,-0.104993,3.450827,9.411011,5.808644,4.787551,5.858115,2.577399,4.751109,8.511676,-5.276776,2.193288,0.240583,6.226311,-4.203567,-3.125419,7.636348,9.418190,7.493176,3.780696,-3.501068,1.750011,-5.364856,-2.261631,-2.085934,-7.531260,7.413222,-9.376855,8.195100,0.648605,-5.906087,8.263547,8.323858,-6.913467,0.691269,5.596392,-0.470137,7.318885,8.874111,-8.970816,-8.098681,-4.646719,-3.235728,-6.121289,-7.374482,3.666741,4.348691,6.382810,7.773978,-5.521128,3.523088,-6.264063,-1.709297,5.451588,7.746447,4.915771,-9.534243,7.066157,5.891785,-8.445821,-2.768025,-1.622509,3.339526,-6.570676,7.389260,0.470922,-7.802190,-1.146401,-9.359770,-7.792377,6.774658,2.591664,6.722296,-4.985594,-9.469433,9.616664,-0.991172], dtype = "float32")#candidate|203|(180,)|const|float32
call_202 = func_166_call(relay.reshape(const_203.astype('float32'), [15, 12]))
call_204 = func_166_call(relay.reshape(const_203.astype('float32'), [15, 12]))
var_205 = relay.var("var_205", dtype = "float32", shape = (10,))#candidate|205|(10,)|var|float32
bop_206 = relay.subtract(uop_193.astype('int16'), relay.reshape(var_205.astype('int16'), relay.shape_of(uop_193))) # shape=(10,)
bop_209 = relay.less(uop_199.astype('bool'), relay.reshape(var_205.astype('bool'), relay.shape_of(uop_199))) # shape=(10,)
bop_212 = relay.mod(uop_193.astype('float32'), relay.reshape(bop_206.astype('float32'), relay.shape_of(uop_193))) # shape=(10,)
uop_215 = relay.log(uop_193.astype('float64')) # shape=(10,)
bop_217 = relay.logical_or(uop_215.astype('bool'), relay.reshape(uop_193.astype('bool'), relay.shape_of(uop_215))) # shape=(10,)
uop_220 = relay.atanh(uop_199.astype('float64')) # shape=(10,)
bop_223 = relay.less(uop_220.astype('bool'), relay.reshape(uop_199.astype('bool'), relay.shape_of(uop_220))) # shape=(10,)
bop_226 = relay.divide(uop_199.astype('float32'), relay.reshape(uop_220.astype('float32'), relay.shape_of(uop_199))) # shape=(10,)
var_229 = relay.var("var_229", dtype = "int16", shape = (10,))#candidate|229|(10,)|var|int16
bop_230 = relay.bitwise_and(bop_206.astype('int8'), relay.reshape(var_229.astype('int8'), relay.shape_of(bop_206))) # shape=(10,)
uop_233 = relay.log10(bop_223.astype('float32')) # shape=(10,)
uop_235 = relay.exp(uop_233.astype('float32')) # shape=(10,)
output = relay.Tuple([bop_190,bop_195,call_202,const_203,bop_209,bop_212,bop_217,bop_226,bop_230,uop_235,])
output2 = relay.Tuple([bop_190,bop_195,call_204,const_203,bop_209,bop_212,bop_217,bop_226,bop_230,uop_235,])
func_237 = relay.Function([var_185,var_205,var_229,], output)
mod['func_237'] = func_237
mod = relay.transform.InferType()(mod)
mutated_mod['func_237'] = func_237
mutated_mod = relay.transform.InferType()(mutated_mod)
func_237_call = mutated_mod.get_global_var('func_237')
var_239 = relay.var("var_239", dtype = "bool", shape = (10,))#candidate|239|(10,)|var|bool
var_240 = relay.var("var_240", dtype = "float32", shape = (10,))#candidate|240|(10,)|var|float32
var_241 = relay.var("var_241", dtype = "int16", shape = (10,))#candidate|241|(10,)|var|int16
call_238 = func_237_call(var_239,var_240,var_241,)
output = call_238
func_242 = relay.Function([var_239,var_240,var_241,], output)
mutated_mod['func_242'] = func_242
mutated_mod = relay.transform.InferType()(mutated_mod)
const_263 = relay.const([-2,3,-1,-10,-7,-8,-7,2,3,10], dtype = "int32")#candidate|263|(10,)|const|int32
var_264 = relay.var("var_264", dtype = "int32", shape = (10,))#candidate|264|(10,)|var|int32
bop_265 = relay.greater(const_263.astype('bool'), relay.reshape(var_264.astype('bool'), relay.shape_of(const_263))) # shape=(10,)
bop_268 = relay.floor_mod(var_264.astype('float32'), relay.reshape(bop_265.astype('float32'), relay.shape_of(var_264))) # shape=(10,)
func_26_call = mod.get_global_var('func_26')
func_33_call = mutated_mod.get_global_var('func_33')
const_272 = relay.const([1.442874,3.553032,-3.757543,6.622153,-2.694977,-1.631688,-9.422244,-1.534035,5.153293,-3.528070,6.480366,6.755134,-3.802214,0.590324,2.011374,-1.540104,1.568587,-4.852616,9.235777,6.958822,3.627845,-1.952671,5.791125,-3.550677,9.907980,-4.060213,5.424065,9.162291,-7.980794,6.640724,5.442981,3.781040,8.107570,-3.251208,1.744864,0.420420,7.901319,-2.622510,-6.331987,-5.193244,4.844608,-9.862888,-8.322565,-6.740772,-7.605807,-5.000713,1.699812,4.596169,7.777489,-7.586666,5.842606,4.949457,7.291101,1.651104,-7.462265,5.218532,-8.554872,-3.043299,-7.921725,-6.968735,-8.881534,-1.892806,-0.394750,4.289722,-3.285661,-3.686822,3.785836,-4.739733,6.547081,-2.733822,1.030483,3.036106,9.310613,-3.119779,-8.523629,-2.794933,3.390606,7.033930,-0.473099,7.424854,-4.704736,5.724311,5.341933,-2.677716,6.014530,8.927231,-5.729498,0.558194,-8.717388,1.808013,-1.429720,-3.811962,6.634664,8.861234,-2.117252,-2.868863,-8.928029,-4.923961,9.775090,-9.514006,7.305828,-4.854682,-3.031560,7.234433,4.062614,6.468195,-4.369879,-2.411385,1.684626,-8.872247,-9.117962,-4.355133,-4.048534,5.976365,5.225202,-6.578171,1.600950,5.595810,-9.187064,-5.377899,0.655637,5.980597,0.179847,9.346976,2.769898,-1.295883,-7.151324,-1.262044,7.555467,9.401900,2.770458,2.484462,-7.024008,-7.363059,6.530817,-5.568263,9.359051,2.867360,8.199269,3.315758,-5.641118,0.760337,7.857157,8.007667,2.929679,7.103383,-8.325017,0.356275,8.936233,-5.049324,-7.682891,-7.355695,-6.392418,1.032239,-0.252498,8.046107,-9.446005,-3.160471,-7.251289,3.071192,-3.761034,6.540223,1.219436,4.134239,-9.119801,-9.154837,-9.765307,-6.154119,-8.434974,3.633485,2.089647,0.516829,7.321909,9.964425,7.021538,2.443757,5.513733,-7.705258,0.436797,-1.185986,6.646208,-7.200120,5.881952,7.040281,-8.043043,-6.327155,7.004088,-2.499104,4.814780,-1.274682,-6.953618,-4.006361,-8.836497,-8.328098,-8.815166,-1.800649,7.620804,-8.672527,7.007679,-1.942493,-7.488606,9.676299,-1.577493,-0.648272,4.867385,-6.751674,-3.491044,-9.088342,-6.939405,-2.569200,7.023835,-3.488267,5.372324,6.173913,-8.791033,0.896322,-8.302460,-1.845349,-1.806108,2.159236,-3.223036,5.691113,-9.074410,8.844769,-1.965198,-3.168174,-2.811839,7.853211,6.114002,4.076531,-9.982659,-7.663988,1.163799,-0.230198,6.281285,-0.448753,9.442215,-7.555709,7.004276,-1.306127,4.861848,0.364315,-6.611146,6.160854,9.251162,2.194980,2.329658,-8.655862,8.255143,-5.130823,-3.938347,-5.463930,-0.715896,-9.390166,-9.809372,-0.137942,1.416372,-6.796133,-2.327327,4.956765,-0.368558,2.864360,-3.922510,-8.306672,-3.308613,-3.118476,3.974415,6.216590,3.925699,2.555061,-6.189174,4.121609,0.840059,8.696299,9.219134,3.285681,-9.877046,-0.242076,7.621133,-3.849880,9.359589,-9.238196,0.229592,0.606832,1.514263,-4.330180,-6.316387,3.702747], dtype = "float64")#candidate|272|(288,)|const|float64
call_271 = relay.TupleGetItem(func_26_call(relay.reshape(const_272.astype('float64'), [9, 2, 16]), relay.reshape(const_272.astype('float64'), [9, 2, 16]), relay.reshape(const_272.astype('float64'), [9, 2, 16]), relay.reshape(const_272.astype('bool'), [9, 2, 16]), relay.reshape(const_272.astype('float32'), [9, 2, 16]), ), 0)
call_273 = relay.TupleGetItem(func_33_call(relay.reshape(const_272.astype('float64'), [9, 2, 16]), relay.reshape(const_272.astype('float64'), [9, 2, 16]), relay.reshape(const_272.astype('float64'), [9, 2, 16]), relay.reshape(const_272.astype('bool'), [9, 2, 16]), relay.reshape(const_272.astype('float32'), [9, 2, 16]), ), 0)
bop_274 = relay.power(bop_265.astype('float32'), relay.reshape(bop_268.astype('float32'), relay.shape_of(bop_265))) # shape=(10,)
const_279 = relay.const([4.294974,-1.609033,-0.763148,-2.987930,-8.790652,6.300782,-0.653740,5.093792,-2.745714,5.193353,-9.939154,3.298075,8.615043,5.042037,3.024744,4.364070,8.067091,7.228902,-9.643428,-0.307145,6.052172,-7.248336,3.868557,-6.065092,2.767031,8.616084,0.130367,6.591507,8.863179,-6.135149,8.170703,-6.702131,1.325891,1.661456,8.552152,-0.844263,1.902675,8.981645,-8.663691,-9.411923,6.580533,-1.606294,1.691518,4.355551,-0.692681,8.789292,3.813756,-2.940068,7.324914,-6.401695,7.541254,4.692667,-1.334888,5.885401,1.542414,-8.005597,8.243860,4.808681,7.445506,-7.692640,-3.073481,7.546198,3.503048,-9.067671,0.983729,8.488546,-3.125257,3.582169,0.465965,7.772939,8.545217,2.753087,-7.344266,9.892822,4.852141,6.881382,9.177569,8.721725,0.205907,0.455918,3.042080,4.509342,2.444144,-7.087811,-7.609279,8.697384,5.148877,-5.729881,-5.252298,8.992477,0.353520,9.205764,-2.720235,2.267446,9.611103,-9.326079,-7.577779,-6.914388,1.608476,-4.445677,-2.562062,6.180949,4.481963,-4.112923,7.256445,1.332634,-7.471731,0.752287,-3.085438,-5.654965,9.820961,-0.349984,7.603560,0.762542,5.047515,-2.607724,-2.065931,8.102219,5.421608,6.079621,-2.277274,-5.189167,1.321663,7.486919,-2.804134,4.676962,-5.545511,3.152599,-7.954900,-3.064626,5.916393,-9.348372,-8.997680,9.245858,6.696427,-2.765187,5.418731,-4.196495,-9.210554,-9.550141,-5.339294,-6.280333,4.028283,-7.105922,3.858297,7.211397,1.705094,-4.775677,-9.083666,0.468992,-3.522936,1.907699,-5.644429,-8.105925,8.580996,-8.010739,8.745762,-6.506765,-3.507669,-3.911057,-7.843933,-4.663911,5.923445,4.996356,-5.229320,6.006977,3.713297,3.351776,8.083652,-4.758624,-8.653856,-2.903862,-6.608509,3.155063,4.389172,-0.302547,8.393102,1.124659,8.254608,-9.363348,5.950334,-7.851155,-9.620930,9.932415,0.497084,-6.028648,-4.918446,2.287975,-9.242163,5.752097,2.483374,4.567794,1.913055,1.133020,9.939807,-0.523891,-9.570330,8.575812,-5.657774,-4.742650,4.602182,-9.695494,6.160975,-0.338715,-9.259851,2.979122,0.871722,-8.683108,0.877975,7.803508,-7.977506,3.899602,-4.346263,7.215839,2.251742,-4.408601,9.814772,-5.506469,6.272489,-9.325628,6.700963,0.318169,-0.793802,7.355214,1.317848,-7.179604,-6.699836,-3.307810,9.923718,-0.769090,7.124763,2.581562,4.778552,1.141400,-9.831956,-3.691995,7.598561,-5.058394,4.090035,3.992566,-3.377038,-1.343889,-0.476376,3.173671,5.639950,-3.253424,-7.050156,2.755175,-1.819132,-2.650719,-4.530189,-5.657027,-6.399562,2.281201,-4.475191,5.186986,-2.820025,9.570396,-8.634307,-6.518586,-8.200109,5.827166,-2.709490,-6.185220,5.869477,2.178522,4.165588,-7.082182,-5.395026,-7.460872,-4.943390,9.928531,5.880390,7.717800,2.736238,4.713860,7.436741,0.981821,2.897254,-3.279147,-6.898767,-9.435216,3.942476,-9.265175,-0.275476,-3.333232,-6.533955,-6.682035], dtype = "float64")#candidate|279|(288,)|const|float64
bop_280 = relay.not_equal(const_272.astype('bool'), relay.reshape(const_279.astype('bool'), relay.shape_of(const_272))) # shape=(288,)
uop_284 = relay.sinh(const_263.astype('float32')) # shape=(10,)
var_287 = relay.var("var_287", dtype = "float32", shape = (10,))#candidate|287|(10,)|var|float32
bop_288 = relay.bitwise_or(uop_284.astype('uint64'), relay.reshape(var_287.astype('uint64'), relay.shape_of(uop_284))) # shape=(10,)
var_292 = relay.var("var_292", dtype = "float64", shape = (288,))#candidate|292|(288,)|var|float64
bop_293 = relay.greater(const_279.astype('bool'), relay.reshape(var_292.astype('bool'), relay.shape_of(const_279))) # shape=(288,)
func_166_call = mod.get_global_var('func_166')
func_169_call = mutated_mod.get_global_var('func_169')
const_298 = relay.const([-2.500346,1.438350,5.657294,5.637164,-9.081928,9.972226,-6.851956,-4.621600,-8.020149,-8.684720,2.933998,3.842192,-4.369362,7.198825,0.682178,-8.562670,8.092513,-4.519434,3.262484,6.149454,6.817115,2.795915,1.211637,-6.366385,8.522614,2.765238,-0.733060,-5.454375,-9.388611,-4.611910,-6.443867,2.903015,-0.322574,-5.932257,8.915953,-4.436519,-8.949449,-4.423108,7.084251,8.463335,6.396355,2.585831,3.861030,-0.487470,5.742427,9.284146,-8.439363,3.372891,-4.507401,-0.491292,7.574690,-5.849433,-1.698766,5.599457,3.897479,1.790493,-4.473376,-3.035064,-4.965810,0.149235,2.563232,2.588054,2.471161,7.035246,-2.086289,6.607129,-8.751493,5.303990,-8.679441,-4.223711,1.893315,-6.172053,-4.888740,5.567004,-0.744278,-5.228605,0.519344,8.700432,9.265778,-8.867590,-8.064135,0.569320,-1.502357,-0.187267,-3.851677,-2.300772,-3.467823,2.275826,-6.688092,8.212538,9.991161,-6.446223,3.152097,0.360666,-2.801499,-7.996055,6.140920,1.770646,-7.725330,-9.145686,-6.748177,-9.812683,7.049716,0.546221,-5.505507,-6.406423,1.791227,-3.784481,-7.213349,1.532849,3.826234,-3.303044,9.513336,-0.651027,9.350055,-3.202940,-2.719795,-1.017444,-2.551184,4.892794,-8.396796,-4.685947,-9.917662,-4.489694,-9.594130,-0.271742,8.323136,-1.130076,-5.695722,-6.893101,5.967846,-9.799638,8.454993,-0.649579,-6.730984,-8.882079,2.273697,-1.631628,4.907873,9.502776,-0.159781,1.810712,-4.785919,2.949177,3.282527,-6.057398,-8.469410,-8.963846,7.253828,-8.780936,-9.000963,-0.552011,4.074131,8.154081,8.671974,6.598868,-5.118200,6.084286,-6.098180,-0.342985,-9.303870,7.283213,6.259601,-4.666698,-6.792804,-4.220243,7.819343,-5.947738,-1.179569,4.182018,-4.216425,9.767145,3.849107,2.652725,3.694811,2.566933,-4.333970,5.536518,-5.192084,-8.216479], dtype = "float32")#candidate|298|(180,)|const|float32
call_297 = func_166_call(relay.reshape(const_298.astype('float32'), [15, 12]))
call_299 = func_166_call(relay.reshape(const_298.astype('float32'), [15, 12]))
const_300 = relay.const([4,-5,-6,-6,7,4,2,-1,-5,-4], dtype = "uint64")#candidate|300|(10,)|const|uint64
bop_301 = relay.subtract(bop_288.astype('int64'), relay.reshape(const_300.astype('int64'), relay.shape_of(bop_288))) # shape=(10,)
uop_307 = relay.log2(uop_284.astype('float32')) # shape=(10,)
bop_309 = relay.add(uop_284.astype('uint64'), relay.reshape(bop_301.astype('uint64'), relay.shape_of(uop_284))) # shape=(10,)
var_313 = relay.var("var_313", dtype = "float32", shape = (10,))#candidate|313|(10,)|var|float32
bop_314 = relay.less(uop_307.astype('bool'), relay.reshape(var_313.astype('bool'), relay.shape_of(uop_307))) # shape=(10,)
bop_317 = relay.maximum(uop_307.astype('uint64'), relay.reshape(bop_274.astype('uint64'), relay.shape_of(uop_307))) # shape=(10,)
uop_320 = relay.sin(bop_317.astype('float64')) # shape=(10,)
var_322 = relay.var("var_322", dtype = "float64", shape = (10,))#candidate|322|(10,)|var|float64
bop_323 = relay.less(uop_320.astype('bool'), relay.reshape(var_322.astype('bool'), relay.shape_of(uop_320))) # shape=(10,)
var_326 = relay.var("var_326", dtype = "uint64", shape = (10,))#candidate|326|(10,)|var|uint64
bop_327 = relay.mod(bop_309.astype('float64'), relay.reshape(var_326.astype('float64'), relay.shape_of(bop_309))) # shape=(10,)
bop_330 = relay.multiply(uop_320.astype('uint32'), relay.reshape(const_263.astype('uint32'), relay.shape_of(uop_320))) # shape=(10,)
uop_334 = relay.asin(bop_265.astype('float32')) # shape=(10,)
bop_337 = relay.maximum(bop_330.astype('float32'), relay.reshape(var_313.astype('float32'), relay.shape_of(bop_330))) # shape=(10,)
var_342 = relay.var("var_342", dtype = "float64", shape = (10,))#candidate|342|(10,)|var|float64
bop_343 = relay.left_shift(uop_320.astype('uint16'), relay.reshape(var_342.astype('uint16'), relay.shape_of(uop_320))) # shape=(10,)
uop_349 = relay.rsqrt(bop_343.astype('float32')) # shape=(10,)
var_351 = relay.var("var_351", dtype = "float64", shape = (10,))#candidate|351|(10,)|var|float64
bop_352 = relay.equal(uop_320.astype('bool'), relay.reshape(var_351.astype('bool'), relay.shape_of(uop_320))) # shape=(10,)
uop_355 = relay.cosh(uop_349.astype('float64')) # shape=(10,)
output = relay.Tuple([call_271,bop_280,bop_293,call_297,const_298,bop_314,bop_323,bop_327,uop_334,bop_337,bop_352,uop_355,])
output2 = relay.Tuple([call_273,bop_280,bop_293,call_299,const_298,bop_314,bop_323,bop_327,uop_334,bop_337,bop_352,uop_355,])
func_357 = relay.Function([var_264,var_287,var_292,var_313,var_322,var_326,var_342,var_351,], output)
mod['func_357'] = func_357
mod = relay.transform.InferType()(mod)
mutated_mod['func_357'] = func_357
mutated_mod = relay.transform.InferType()(mutated_mod)
func_357_call = mutated_mod.get_global_var('func_357')
var_359 = relay.var("var_359", dtype = "int32", shape = (10,))#candidate|359|(10,)|var|int32
var_360 = relay.var("var_360", dtype = "float32", shape = (10,))#candidate|360|(10,)|var|float32
var_361 = relay.var("var_361", dtype = "float64", shape = (288,))#candidate|361|(288,)|var|float64
var_362 = relay.var("var_362", dtype = "float32", shape = (10,))#candidate|362|(10,)|var|float32
var_363 = relay.var("var_363", dtype = "float64", shape = (10,))#candidate|363|(10,)|var|float64
var_364 = relay.var("var_364", dtype = "uint64", shape = (10,))#candidate|364|(10,)|var|uint64
var_365 = relay.var("var_365", dtype = "float64", shape = (10,))#candidate|365|(10,)|var|float64
var_366 = relay.var("var_366", dtype = "float64", shape = (10,))#candidate|366|(10,)|var|float64
call_358 = func_357_call(var_359,var_360,var_361,var_362,var_363,var_364,var_365,var_366,)
output = call_358
func_367 = relay.Function([var_359,var_360,var_361,var_362,var_363,var_364,var_365,var_366,], output)
mutated_mod['func_367'] = func_367
mutated_mod = relay.transform.InferType()(mutated_mod)
var_385 = relay.var("var_385", dtype = "uint8", shape = (15,))#candidate|385|(15,)|var|uint8
var_386 = relay.var("var_386", dtype = "uint8", shape = (15,))#candidate|386|(15,)|var|uint8
bop_387 = relay.not_equal(var_385.astype('bool'), relay.reshape(var_386.astype('bool'), relay.shape_of(var_385))) # shape=(15,)
output = bop_387
output2 = bop_387
func_391 = relay.Function([var_385,var_386,], output)
mod['func_391'] = func_391
mod = relay.transform.InferType()(mod)
var_392 = relay.var("var_392", dtype = "uint8", shape = (15,))#candidate|392|(15,)|var|uint8
var_393 = relay.var("var_393", dtype = "uint8", shape = (15,))#candidate|393|(15,)|var|uint8
output = func_391(var_392,var_393,)
func_394 = relay.Function([var_392,var_393,], output)
mutated_mod['func_394'] = func_394
mutated_mod = relay.transform.InferType()(mutated_mod)
var_396 = relay.var("var_396", dtype = "float64", shape = ())#candidate|396|()|var|float64
uop_397 = relay.acosh(var_396.astype('float64')) # shape=()
bop_402 = relay.maximum(uop_397.astype('int32'), var_396.astype('int32')) # shape=()
uop_406 = relay.exp(uop_397.astype('float32')) # shape=()
uop_409 = relay.exp(var_396.astype('float64')) # shape=()
func_357_call = mod.get_global_var('func_357')
func_367_call = mutated_mod.get_global_var('func_367')
const_412 = relay.const([-3,7,-10,-4,1,8,4,-4,-7,-9], dtype = "int32")#candidate|412|(10,)|const|int32
const_413 = relay.const([-3.550525,-3.042524,-1.813894,-0.446063,5.543903,-5.484310,-7.270976,2.739767,-2.426745,-0.179053,7.405128,-8.486588,8.084029,5.916680,6.961440,-2.315466,8.971601,6.299077,5.809593,5.312741,0.262136,-4.902373,-0.158613,-6.265605,-2.838227,-2.807168,-9.458434,-3.493538,2.303064,0.220876,-5.621566,-8.482141,-5.046085,5.005111,5.940531,-6.115165,-9.246245,3.948820,-3.532675,8.633644,-2.799966,7.735470,3.748927,-0.969697,4.093773,7.608815,3.447827,7.152866,-0.778486,7.076428,3.302672,-3.992685,-6.226859,5.540668,9.327230,-7.461828,-2.819528,1.544792,7.869576,-6.118211,0.107376,-3.108689,-3.037043,-1.259682,-9.682510,-7.824932,-4.895915,1.360906,-4.959497,6.128799,7.747090,3.250125,8.736520,3.981524,-8.361043,4.125578,-2.313715,-0.914540,0.197805,4.604695,0.962701,-1.488617,-0.983863,-7.924721,-9.260265,-1.849363,7.917323,4.960340,-7.940548,3.021287,-1.334568,-2.490175,-5.004245,5.153317,-1.085798,1.032991,6.547153,8.535896,1.021523,-1.069805,5.780609,-5.836291,3.423009,-2.281449,-1.476086,-2.741864,-3.519320,0.085724,-6.247269,4.763122,8.232514,-7.189296,-0.829467,-7.789870,0.429302,2.311929,-5.979180,-4.702127,1.676763,7.702905,-9.051987,-7.412629,4.830425,-2.855338,1.332053,-1.597869,-0.425844,4.724165,-1.609062,6.171339,-1.011930,-8.243250,-2.854022,-5.532954,2.203703,7.746137,-6.164671,7.150087,-0.802602,1.340033,1.087789,-2.779322,-3.159163,-8.364476,-9.656954,-8.702395,-7.219047,4.527791,5.701999,-7.988631,5.643218,5.944620,8.582672,9.686973,-7.386410,8.622535,-1.436276,9.040551,2.417256,7.269471,2.259261,1.129788,8.637167,-4.026871,-8.380449,0.813710,6.799850,3.018717,1.799247,-2.404564,0.538880,3.736692,5.107988,-2.818467,-0.610571,-1.935868,-7.120128,2.384842,-0.424046,-1.915272,-6.185720,3.412320,-3.412226,1.056771,5.881647,0.159380,8.811949,7.916095,-8.148015,-0.965278,8.831558,-1.716456,-7.341403,5.432064,-7.711234,5.880390,-0.026075,-2.543695,-2.966666,-8.444011,7.120114,-2.953594,9.914492,1.417133,-4.286438,-3.405446,5.805304,8.970251,3.355103,-1.380958,-1.284469,-4.459257,-1.109875,-3.710823,-2.408273,6.821454,-5.881223,4.095141,4.497471,7.100200,-9.553182,3.018522,9.387883,6.962910,-1.259726,-2.666634,3.261179,3.432787,8.539943,-1.283323,-8.641846,6.271910,-3.529742,-5.329575,1.701706,6.978769,-8.570368,6.509668,1.080570,-0.901834,6.260583,-8.589513,0.578056,-3.396247,9.538344,0.144357,-7.807654,2.722504,4.597032,-0.809565,9.197869,-5.804195,1.203082,3.571493,-5.973423,-5.343215,-3.337920,-2.424639,-5.268553,-1.890797,-2.683867,3.174018,-7.291614,8.602012,2.986100,8.787847,3.766471,-0.540304,3.855030,6.697772,6.566081,3.659195,-9.290470,5.923780,2.463583,3.557740,2.207309,-6.801642,4.220276,8.279997,-7.553163,5.445211,-5.157576,-7.100524,-1.012868,0.788704,5.554647,1.384546], dtype = "float64")#candidate|413|(288,)|const|float64
call_411 = relay.TupleGetItem(func_357_call(relay.reshape(const_412.astype('int32'), [10,]), relay.reshape(const_412.astype('float32'), [10,]), relay.reshape(const_413.astype('float64'), [288,]), relay.reshape(const_412.astype('float32'), [10,]), relay.reshape(const_412.astype('float64'), [10,]), relay.reshape(const_412.astype('uint64'), [10,]), relay.reshape(const_412.astype('float64'), [10,]), relay.reshape(const_412.astype('float64'), [10,]), ), 0)
call_414 = relay.TupleGetItem(func_367_call(relay.reshape(const_412.astype('int32'), [10,]), relay.reshape(const_412.astype('float32'), [10,]), relay.reshape(const_413.astype('float64'), [288,]), relay.reshape(const_412.astype('float32'), [10,]), relay.reshape(const_412.astype('float64'), [10,]), relay.reshape(const_412.astype('uint64'), [10,]), relay.reshape(const_412.astype('float64'), [10,]), relay.reshape(const_412.astype('float64'), [10,]), ), 0)
uop_416 = relay.sqrt(uop_397.astype('float64')) # shape=()
uop_422 = relay.sqrt(uop_406.astype('float32')) # shape=()
uop_425 = relay.tan(uop_422.astype('float32')) # shape=()
bop_428 = relay.equal(uop_425.astype('bool'), uop_416.astype('bool')) # shape=()
bop_433 = relay.logical_and(bop_428.astype('bool'), call_411.astype('bool')) # shape=(9, 2, 16)
bop_436 = relay.logical_and(bop_428.astype('bool'), call_414.astype('bool')) # shape=(9, 2, 16)
const_439 = relay.const(9, dtype = "int32")#candidate|439|()|const|int32
bop_440 = relay.add(bop_402.astype('int8'), const_439.astype('int8')) # shape=()
var_443 = relay.var("var_443", dtype = "float32", shape = (6, 1))#candidate|443|(6, 1)|var|float32
bop_444 = relay.mod(uop_425.astype('float32'), var_443.astype('float32')) # shape=(6, 1)
const_450 = relay.const([[[4.227649,-9.885577,8.524059,-1.043181],[-5.863300,-0.412454,5.487414,1.122478],[8.454580,7.486273,-0.491029,1.187716],[6.432231,0.026473,-1.720230,-3.004599],[2.436673,9.336307,8.796016,-0.106894],[-1.082212,1.708884,4.846347,6.460984]],[[8.267625,-4.770781,-6.647377,-7.680753],[6.175256,4.347582,4.409279,2.950459],[1.001556,7.787605,9.929376,-3.418180],[-2.629070,0.114787,-8.327571,-2.166349],[2.782552,1.101988,-8.708322,9.030946],[1.600637,-0.588598,-4.104295,-0.419026]],[[-2.480075,-6.316333,0.081776,3.650672],[-2.901312,7.099066,5.246329,-7.502067],[-2.454448,-6.682035,-0.171225,7.152097],[1.612392,-7.930306,1.923372,6.690820],[-3.424520,2.736869,-1.428721,-3.827592],[4.532784,-8.169856,0.656245,0.992162]],[[-0.757527,9.289398,-4.425048,1.321176],[-4.787530,8.493919,-1.569965,7.955689],[2.525611,-5.231704,2.008494,-8.867673],[3.441859,6.552327,-2.467951,-7.004198],[-9.024536,2.155317,-2.923894,-4.322389],[-6.242917,2.681177,-1.770278,4.872402]],[[0.117806,-3.291519,-1.345236,-7.397610],[9.070366,8.049834,-6.740173,-8.907991],[3.801839,9.542074,-7.160044,-7.023218],[-9.307450,4.108922,-6.991984,-1.965310],[5.229165,-9.945968,8.414469,9.109783],[-8.921476,-7.924919,-1.667979,7.841951]],[[-4.421403,-9.238163,1.330242,4.064447],[-8.651824,-1.821083,-8.248950,-0.295950],[8.629472,8.188159,3.660475,5.029210],[2.239860,6.143477,6.139868,5.074849],[9.187857,-5.067953,-3.531771,-9.163130],[5.966234,2.302536,1.311471,9.175249]],[[-5.238339,-5.399851,6.315332,9.361650],[4.661534,-4.405388,-8.343789,9.050139],[9.697849,-3.360619,8.458562,-3.768842],[1.430751,-1.344112,-1.877003,-8.991392],[7.770612,-9.990092,-7.056855,0.592157],[-0.344910,-6.475695,-2.978523,2.479486]],[[-0.777950,7.545420,-6.321692,-3.845183],[-5.971621,7.594589,-0.860017,1.628435],[-4.108296,-7.381030,-2.572690,-4.221187],[1.139382,4.804678,-3.041553,-8.346011],[-5.665537,7.663868,6.771151,-2.105835],[-8.177007,-2.002658,3.590184,-4.300365]]], dtype = "float64")#candidate|450|(8, 6, 4)|const|float64
bop_451 = relay.multiply(uop_409.astype('int64'), const_450.astype('int64')) # shape=(8, 6, 4)
output = relay.Tuple([const_412,const_413,bop_433,bop_440,bop_444,bop_451,])
output2 = relay.Tuple([const_412,const_413,bop_436,bop_440,bop_444,bop_451,])
func_456 = relay.Function([var_396,var_443,], output)
mod['func_456'] = func_456
mod = relay.transform.InferType()(mod)
var_457 = relay.var("var_457", dtype = "float64", shape = ())#candidate|457|()|var|float64
var_458 = relay.var("var_458", dtype = "float32", shape = (6, 1))#candidate|458|(6, 1)|var|float32
output = func_456(var_457,var_458,)
func_459 = relay.Function([var_457,var_458,], output)
mutated_mod['func_459'] = func_459
mutated_mod = relay.transform.InferType()(mutated_mod)
var_465 = relay.var("var_465", dtype = "float32", shape = (14, 1, 5))#candidate|465|(14, 1, 5)|var|float32
uop_466 = relay.exp(var_465.astype('float32')) # shape=(14, 1, 5)
output = uop_466
output2 = uop_466
func_468 = relay.Function([var_465,], output)
mod['func_468'] = func_468
mod = relay.transform.InferType()(mod)
mutated_mod['func_468'] = func_468
mutated_mod = relay.transform.InferType()(mutated_mod)
var_469 = relay.var("var_469", dtype = "float32", shape = (14, 1, 5))#candidate|469|(14, 1, 5)|var|float32
func_468_call = mutated_mod.get_global_var('func_468')
call_470 = func_468_call(var_469)
output = call_470
func_471 = relay.Function([var_469], output)
mutated_mod['func_471'] = func_471
mutated_mod = relay.transform.InferType()(mutated_mod)
var_491 = relay.var("var_491", dtype = "float32", shape = (6, 16, 14))#candidate|491|(6, 16, 14)|var|float32
var_492 = relay.var("var_492", dtype = "float32", shape = (6, 16, 14))#candidate|492|(6, 16, 14)|var|float32
bop_493 = relay.multiply(var_491.astype('float32'), relay.reshape(var_492.astype('float32'), relay.shape_of(var_491))) # shape=(6, 16, 14)
var_497 = relay.var("var_497", dtype = "float32", shape = (6, 16, 14))#candidate|497|(6, 16, 14)|var|float32
bop_498 = relay.logical_or(bop_493.astype('bool'), relay.reshape(var_497.astype('bool'), relay.shape_of(bop_493))) # shape=(6, 16, 14)
var_503 = relay.var("var_503", dtype = "float32", shape = (6, 16, 14))#candidate|503|(6, 16, 14)|var|float32
bop_504 = relay.bitwise_or(var_491.astype('uint32'), relay.reshape(var_503.astype('uint32'), relay.shape_of(var_491))) # shape=(6, 16, 14)
bop_507 = relay.less_equal(bop_498.astype('bool'), relay.reshape(var_497.astype('bool'), relay.shape_of(bop_498))) # shape=(6, 16, 14)
output = relay.Tuple([bop_504,bop_507,])
output2 = relay.Tuple([bop_504,bop_507,])
func_510 = relay.Function([var_491,var_492,var_497,var_503,], output)
mod['func_510'] = func_510
mod = relay.transform.InferType()(mod)
var_511 = relay.var("var_511", dtype = "float32", shape = (6, 16, 14))#candidate|511|(6, 16, 14)|var|float32
var_512 = relay.var("var_512", dtype = "float32", shape = (6, 16, 14))#candidate|512|(6, 16, 14)|var|float32
var_513 = relay.var("var_513", dtype = "float32", shape = (6, 16, 14))#candidate|513|(6, 16, 14)|var|float32
var_514 = relay.var("var_514", dtype = "float32", shape = (6, 16, 14))#candidate|514|(6, 16, 14)|var|float32
output = func_510(var_511,var_512,var_513,var_514,)
func_515 = relay.Function([var_511,var_512,var_513,var_514,], output)
mutated_mod['func_515'] = func_515
mutated_mod = relay.transform.InferType()(mutated_mod)
var_517 = relay.var("var_517", dtype = "float64", shape = ())#candidate|517|()|var|float64
var_518 = relay.var("var_518", dtype = "float64", shape = (16, 12))#candidate|518|(16, 12)|var|float64
bop_519 = relay.power(var_517.astype('float64'), var_518.astype('float64')) # shape=(16, 12)
bop_529 = relay.multiply(bop_519.astype('uint64'), relay.reshape(var_518.astype('uint64'), relay.shape_of(bop_519))) # shape=(16, 12)
const_532 = relay.const([[-3.394155,-2.198160,-5.520476,-5.097180,7.766051,-6.985461,-8.389023,4.644665,6.278374,2.112110,-8.622875,9.666335],[5.645749,0.186852,-2.845228,1.118826,-4.863719,-1.083045,9.006288,-6.270369,4.590151,4.873167,-8.969932,-9.596030],[-2.890401,-8.950316,6.571735,-1.855725,2.774330,6.103334,-8.859458,-4.195516,-2.560352,4.394537,1.366661,-8.028422],[-5.265672,-1.650163,-9.791462,2.592764,-5.443679,0.396175,9.000009,1.279501,1.048920,-6.499954,1.837069,-4.240118],[1.522531,-7.685789,2.071948,-6.138471,-4.703844,6.352859,9.592557,9.454442,-6.173210,-9.363475,-2.773720,-1.211509],[-5.202511,0.152585,-5.399900,-8.041920,9.583588,-8.523801,4.939639,2.450656,-8.229161,3.644137,2.769801,0.850766],[0.771701,2.220458,7.882691,-7.004437,-0.086497,-0.700688,7.150864,-3.176226,1.460502,-4.485886,2.111487,-2.853020],[-3.565629,-1.232710,-4.473446,9.494677,6.313019,-1.553373,-7.666932,-1.305455,-6.150163,5.248673,3.088597,2.259878],[3.670203,-9.012044,8.571424,-8.475249,-7.106542,2.251683,-3.198535,-5.482956,1.794234,0.499852,5.914607,-2.431660],[-6.263776,-7.377938,1.092045,-0.796874,4.610430,-9.302521,9.758389,-9.406964,1.263370,-6.239490,-0.442395,2.137222],[0.874662,2.897427,-1.044051,2.614402,-0.262920,4.547644,6.623281,-6.994363,-6.259469,2.070905,2.887625,0.989945],[1.687003,-5.845073,-8.712465,1.460882,-3.842662,5.787344,-1.597216,6.262169,-7.556719,-5.103579,-0.455972,-8.929300],[2.616003,-3.684257,7.646729,7.292162,-5.095876,-4.553542,5.091797,-7.155839,-7.745047,1.208464,-8.383525,2.537667],[7.382214,-5.293538,-8.007656,-2.902066,-7.991316,-3.849644,-0.530666,-8.079322,-7.194990,4.575359,-4.006586,8.806741],[7.926715,2.383301,-8.647953,-9.940061,3.952988,6.804157,9.440692,6.817724,3.514442,2.042590,-7.190030,-9.244655],[-6.220472,-0.308435,2.084723,-5.470123,-1.909151,8.888041,-1.626861,-6.308717,-2.839847,-7.274362,4.437962,-0.630510]], dtype = "float64")#candidate|532|(16, 12)|const|float64
bop_533 = relay.greater_equal(var_518.astype('bool'), relay.reshape(const_532.astype('bool'), relay.shape_of(var_518))) # shape=(16, 12)
bop_536 = relay.minimum(const_532.astype('uint32'), var_517.astype('uint32')) # shape=(16, 12)
uop_540 = relay.erf(bop_533.astype('float32')) # shape=(16, 12)
bop_543 = relay.subtract(uop_540.astype('uint16'), relay.reshape(var_518.astype('uint16'), relay.shape_of(uop_540))) # shape=(16, 12)
output = relay.Tuple([bop_529,bop_536,bop_543,])
output2 = relay.Tuple([bop_529,bop_536,bop_543,])
F = relay.Function([var_517,var_518,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_517,var_518,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_517= np.array(-7.878038, dtype='float64')
module1.set_input('var_517', input_517)
input_518= np.array([[-8.024210,6.285975,1.842052,1.920619,8.956573,9.461575,5.899935,3.787823,-5.603160,7.933550,-3.290429,-6.991375],[-2.647008,8.110056,-0.610227,9.869259,6.800024,9.589895,3.154656,8.800161,-5.810793,-6.639779,-2.657397,3.278294],[8.545152,5.212206,-1.051107,-7.286587,-1.543364,-3.659234,4.235355,6.532143,0.048133,9.043382,1.931780,5.024242],[-4.890615,8.418748,8.073532,9.692686,-5.969131,-3.283897,-6.947732,6.647628,-6.907756,3.496718,0.064184,-4.945668],[-3.678055,4.713377,2.997440,9.907265,-6.707498,-3.574932,7.325407,7.789887,6.908394,7.424746,-1.235356,-2.877801],[-0.568971,-7.691050,-5.075040,-4.964565,-1.284000,9.495446,-8.472773,0.269870,6.153606,-8.879894,8.400747,-1.625691],[1.814515,-8.378260,-0.057053,8.233889,6.417548,-6.240829,-2.673704,-1.099697,-0.848083,-4.753055,-8.417466,-8.080759],[-4.395284,-7.248644,-7.293948,-9.709367,-1.499277,2.670336,8.332543,-1.226508,-6.442467,-5.259370,6.603018,7.774245],[-7.949579,7.702360,-0.536513,4.845458,-9.006648,-3.911988,-3.822484,1.498904,-7.125825,-4.514493,1.749254,-3.629484],[0.792315,-3.221934,0.869614,7.061575,-1.226616,-4.446347,-7.293763,4.505800,1.713699,1.587982,-9.666294,1.254004],[4.477060,-8.922653,-9.574566,-7.596655,0.803283,-1.300354,-9.018669,7.245280,-4.647471,1.435885,4.306354,-9.422543],[9.224474,-7.860178,-3.941415,-6.228113,0.971052,-5.799128,9.613286,-5.186559,4.686757,3.828881,-4.546282,-3.679131],[-3.777939,6.959999,-1.159243,-5.738329,1.326055,5.919738,-5.674738,5.948051,-1.690886,7.131578,-7.734740,8.580147],[2.813352,1.206057,2.109903,-5.462291,-6.653404,0.463113,2.913455,-0.245022,-5.085950,-4.169173,5.723980,9.150543],[6.157304,1.275472,-7.649858,-4.533173,4.735808,9.970455,9.358043,-5.367550,4.709378,7.795062,1.978047,9.347311],[4.658887,7.644465,0.406808,8.448064,7.544015,-4.525333,2.138794,7.823650,-1.339024,5.811419,7.738383,7.687476]], dtype='float64')
module1.set_input('var_518', input_518)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_517, input_518, )
res3 = intrp3.evaluate()(input_517, input_518, )
res4 = intrp4.evaluate()(input_517, input_518, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
module5.set_input('var_517', input_517)
module5.set_input('var_518', input_518)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_517, input_518, )
res7 = intrp7.evaluate()(input_517, input_518, )
res8 = intrp8.evaluate()(input_517, input_518, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
module9.set_input('var_517', input_517)
module9.set_input('var_518', input_518)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_517, input_518, )
res11 = intrp11.evaluate()(input_517, input_518, )
res12 = intrp12.evaluate()(input_517, input_518, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
module13.set_input('var_517', input_517)
module13.set_input('var_518', input_518)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_517, input_518, )
res15 = intrp15.evaluate()(input_517, input_518, )
res16 = intrp16.evaluate()(input_517, input_518, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
module17.set_input('var_517', input_517)
module17.set_input('var_518', input_518)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_517, input_518, )
res19 = intrp19.evaluate()(input_517, input_518, )
res20 = intrp20.evaluate()(input_517, input_518, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
module21.set_input('var_517', input_517)
module21.set_input('var_518', input_518)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_517, input_518, )
res23 = intrp23.evaluate()(input_517, input_518, )
res24 = intrp24.evaluate()(input_517, input_518, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()

'''49: TVMFuncCall
48: _ZNSt17_Function_handlerIFvN3tvm7run
47: tvm::runtime::TypedPackedFunc<tvm::runtime::TypedPackedFunc<tvm::runtime::ObjectRef (tvm::runtime::Array<tvm::RelayExpr, void>)> (tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target)>::AssignTypedLambda<tvm::runtime::TypedPackedFunc<tvm::runtime::ObjectRef (tvm::runtime::Array<tvm::RelayExpr, void>)> (*)(tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target)>(tvm::runtime::TypedPackedFunc<tvm::runtime::ObjectRef (tvm::runtime::Array<tvm::RelayExpr, void>)> (*)(tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
46: tvm::relay::EvalFunction(tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''