import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
const_25 = relay.const([[[-5.412524,3.439811,-7.237466,-2.314280,-3.463136,-5.783342,-0.581108],[5.628028,-6.444140,2.393096,5.737958,-2.085537,9.189540,-8.476778]],[[8.478979,-9.344291,3.105415,1.703618,-1.100017,-9.940715,-0.947525],[-0.665403,4.429249,8.944068,4.585044,-7.360856,-3.661414,0.568044]],[[-0.554721,-5.874616,3.988340,5.504466,-3.436714,-7.928141,5.642402],[-8.566895,-5.213033,-0.635543,-1.890835,6.076025,-8.799644,7.486900]],[[3.138774,-6.663111,-5.505324,7.839932,2.494990,-0.429735,-4.390238],[1.745641,2.116712,0.309663,-9.901968,9.854811,4.145606,-8.687087]],[[8.049317,3.385651,-9.000328,-7.785376,-9.053935,-5.324591,-8.775276],[-8.286162,5.316607,-0.523785,5.829405,-2.820213,-3.116667,-6.988817]],[[3.345715,0.672878,-2.685300,3.623220,6.486325,5.498919,7.757667],[6.337062,-9.407194,-8.323052,9.927713,0.171700,9.787399,-6.759227]],[[4.102141,9.899064,0.262176,8.132039,2.570093,-0.190250,-4.574935],[5.435397,0.602867,-9.736986,-2.000041,-9.946963,9.044876,-3.800404]]], dtype = "float32")#candidate|25|(7, 2, 7)|const|float32
uop_26 = relay.asin(const_25.astype('float32')) # shape=(7, 2, 7)
output = uop_26
output2 = uop_26
func_28 = relay.Function([], output)
mod['func_28'] = func_28
mod = relay.transform.InferType()(mod)
mutated_mod['func_28'] = func_28
mutated_mod = relay.transform.InferType()(mutated_mod)
func_28_call = mutated_mod.get_global_var('func_28')
call_29 = func_28_call()
output = call_29
func_30 = relay.Function([], output)
mutated_mod['func_30'] = func_30
mutated_mod = relay.transform.InferType()(mutated_mod)
func_28_call = mod.get_global_var('func_28')
func_30_call = mutated_mod.get_global_var('func_30')
call_31 = func_28_call()
call_32 = func_28_call()
const_33 = relay.const([[[6.638887,-6.356479,6.511781,5.321592,3.587380,2.965900,-7.897884],[-1.342874,-9.855563,-7.497109,2.086912,3.763596,-7.126818,-5.520736]],[[-6.914573,9.901520,7.706525,7.647324,-3.621314,0.369297,-5.400796],[9.249284,-0.280784,-2.964435,3.570050,-7.805216,-5.019013,1.664073]],[[6.099856,6.642863,6.282901,-6.221229,-2.159119,3.976982,-3.116235],[-8.092299,-1.607540,4.550481,1.936767,3.472140,8.062647,-9.716708]],[[4.164855,-3.786796,1.022173,6.927497,4.933161,0.104525,1.298897],[-8.540990,5.004217,-9.474056,-3.822047,-3.177346,-0.138100,-3.044333]],[[-8.016298,9.306118,5.481200,-7.511490,9.911363,9.077237,1.666844],[-3.764092,-9.781536,7.809055,-2.145215,0.395390,6.660651,-4.340967]],[[0.636267,4.888816,8.554202,9.882327,5.125273,0.268523,2.957229],[5.089290,1.383462,7.622730,-7.077579,-1.858152,4.888047,-1.867870]],[[1.761354,-0.491468,6.256576,-3.501001,-4.200204,6.934895,-0.439445],[9.129590,-4.587353,-4.834840,-8.759202,5.723928,-1.550623,7.461068]]], dtype = "float32")#candidate|33|(7, 2, 7)|const|float32
bop_34 = relay.multiply(call_31.astype('int8'), relay.reshape(const_33.astype('int8'), relay.shape_of(call_31))) # shape=(7, 2, 7)
bop_37 = relay.multiply(call_32.astype('int8'), relay.reshape(const_33.astype('int8'), relay.shape_of(call_32))) # shape=(7, 2, 7)
uop_38 = relay.sigmoid(call_31.astype('float64')) # shape=(7, 2, 7)
uop_40 = relay.sigmoid(call_32.astype('float64')) # shape=(7, 2, 7)
const_41 = relay.const([[[-7.180188,-2.803524,6.441159,3.636407,-2.472299,-2.659705,-0.684398],[7.596857,-9.835824,1.376489,6.113883,5.499955,-8.559985,0.396020]],[[-4.208418,-2.570148,-1.382141,-1.316123,7.898038,4.337616,-1.441292],[7.089737,8.601047,-2.163474,-4.089187,9.937638,-1.681017,-0.541721]],[[-4.530233,9.306663,0.299330,-8.777967,1.307855,5.642448,-6.139210],[-8.967908,-3.928019,0.892778,5.617908,7.689019,-3.287257,7.819167]],[[1.180307,0.565034,0.829724,-1.917976,-5.898644,-0.927980,4.720617],[2.571183,-3.617838,-7.156591,0.283911,-2.131598,0.438975,-2.597512]],[[0.538672,9.330901,-4.447007,-2.725441,1.086517,-1.662218,1.647374],[2.633302,-9.631453,7.706571,4.059781,7.993924,3.536333,5.626808]],[[2.321147,-7.040459,6.016219,-6.772196,5.957408,8.148450,9.818557],[-4.280520,-8.162357,-0.803785,-0.854417,-8.651936,2.281986,3.802888]],[[7.552943,-2.460911,-5.285395,3.706855,-5.636471,4.851418,1.294690],[-8.560467,-6.388569,7.706733,1.848054,7.651944,7.215173,2.476395]]], dtype = "float64")#candidate|41|(7, 2, 7)|const|float64
bop_42 = relay.logical_and(uop_38.astype('bool'), relay.reshape(const_41.astype('bool'), relay.shape_of(uop_38))) # shape=(7, 2, 7)
bop_45 = relay.logical_and(uop_40.astype('bool'), relay.reshape(const_41.astype('bool'), relay.shape_of(uop_40))) # shape=(7, 2, 7)
bop_49 = relay.not_equal(bop_42.astype('bool'), relay.reshape(const_41.astype('bool'), relay.shape_of(bop_42))) # shape=(7, 2, 7)
bop_52 = relay.not_equal(bop_45.astype('bool'), relay.reshape(const_41.astype('bool'), relay.shape_of(bop_45))) # shape=(7, 2, 7)
func_28_call = mod.get_global_var('func_28')
func_30_call = mutated_mod.get_global_var('func_30')
call_56 = func_28_call()
call_57 = func_28_call()
output = relay.Tuple([bop_34,bop_49,call_56,])
output2 = relay.Tuple([bop_37,bop_52,call_57,])
func_58 = relay.Function([], output)
mod['func_58'] = func_58
mod = relay.transform.InferType()(mod)
output = func_58()
func_59 = relay.Function([], output)
mutated_mod['func_59'] = func_59
mutated_mod = relay.transform.InferType()(mutated_mod)
var_64 = relay.var("var_64", dtype = "float32", shape = (7, 5, 14))#candidate|64|(7, 5, 14)|var|float32
uop_65 = relay.cos(var_64.astype('float32')) # shape=(7, 5, 14)
output = relay.Tuple([uop_65,])
output2 = relay.Tuple([uop_65,])
func_75 = relay.Function([var_64,], output)
mod['func_75'] = func_75
mod = relay.transform.InferType()(mod)
mutated_mod['func_75'] = func_75
mutated_mod = relay.transform.InferType()(mutated_mod)
var_76 = relay.var("var_76", dtype = "float32", shape = (7, 5, 14))#candidate|76|(7, 5, 14)|var|float32
func_75_call = mutated_mod.get_global_var('func_75')
call_77 = func_75_call(var_76)
output = call_77
func_78 = relay.Function([var_76], output)
mutated_mod['func_78'] = func_78
mutated_mod = relay.transform.InferType()(mutated_mod)
var_146 = relay.var("var_146", dtype = "float32", shape = ())#candidate|146|()|var|float32
var_147 = relay.var("var_147", dtype = "float32", shape = (3, 9))#candidate|147|(3, 9)|var|float32
bop_148 = relay.greater_equal(var_146.astype('bool'), var_147.astype('bool')) # shape=(3, 9)
func_28_call = mod.get_global_var('func_28')
func_30_call = mutated_mod.get_global_var('func_30')
call_151 = func_28_call()
call_152 = func_28_call()
func_75_call = mod.get_global_var('func_75')
func_78_call = mutated_mod.get_global_var('func_78')
const_154 = relay.const([6.982070,-8.242784,-3.150033,-5.787653,-2.011264,1.102562,9.730658,-5.830431,-4.630553,-0.112347,5.728358,8.512534,3.412861,-9.152235,-9.629056,3.887591,8.234535,-2.661752,4.486171,-2.991331,7.675194,-4.366662,9.595214,0.047173,7.277129,8.098183,0.419768,-5.590806,-6.428307,3.585056,-3.517154,-3.745472,-3.095643,8.592401,-4.568963,6.167266,1.676725,-7.868885,7.039253,9.706771,-1.992670,3.079745,7.878134,-3.595498,-0.192132,-4.206424,-6.698382,-1.727974,-9.125339,9.453676,7.892373,-7.638861,-8.424559,-3.504837,-9.539053,-7.791391,-2.251490,-3.599669,0.191591,1.899575,-3.453845,-8.726503,9.006356,9.632455,-5.988969,-1.734691,-6.496942,1.616254,9.267218,-1.415459,5.341892,-1.446159,-8.113004,8.318336,4.382889,1.502026,3.163862,2.528040,-5.934562,-8.757830,8.183551,9.446086,1.866419,-8.056112,-0.309925,-1.894578,5.279361,4.234909,-5.098545,-0.048224,1.329105,3.509182,4.749042,9.648580,-2.346095,3.603747,-6.086470,2.481214,0.617700,9.386221,-5.496599,1.308345,-8.744757,6.328821,4.700493,9.762832,9.693105,2.328427,4.299876,-2.222604,-6.981910,8.875724,-1.438441,-8.695044,-0.346037,8.007817,-1.732080,-4.958289,1.117624,1.678342,0.491748,-0.120142,6.611673,-0.447869,-6.750737,-9.150631,-8.112779,-2.017481,-1.540887,-6.720937,-5.918778,0.214590,-3.051704,1.165809,7.350556,-7.739850,1.693619,8.816808,7.635947,2.445628,1.852536,-9.572534,1.663906,-5.703898,-9.389954,-5.416845,2.330598,6.707523,-0.861729,3.405691,4.460773,-5.465744,-5.408952,1.241679,0.405051,-9.700385,7.345411,-7.436468,6.048033,-2.302826,6.352803,-6.756069,7.935190,-6.055063,-4.478495,8.635555,-5.348678,1.895643,-6.008662,-8.965085,3.437975,-4.930287,8.806355,-5.842173,1.435001,-1.793129,1.128013,9.306795,-2.213669,-6.182675,-4.573746,-8.217910,-2.042912,6.121384,9.670006,-1.399142,-8.689205,8.010594,-3.101237,-1.637148,-4.493437,-6.861541,3.612858,-0.350737,-9.650397,0.627948,3.742550,8.511939,2.058218,-7.340169,-4.399878,5.381848,5.573509,-4.691732,-7.840726,3.997763,-2.765491,2.089190,-4.583869,0.111987,-5.735951,6.416609,8.440361,3.043275,9.407999,9.003642,2.316395,7.687770,8.184813,-0.434156,-7.304256,-3.341481,7.103125,6.146507,-0.399878,-6.738683,1.068788,-3.876818,-5.037862,0.358413,9.746157,3.191575,4.515906,5.024813,8.529524,3.298083,7.180156,-4.846361,6.398905,-9.590124,-8.009908,-0.818127,-1.079448,-2.242609,9.324639,0.448490,-0.972683,0.068040,3.018919,-6.094243,-5.014005,-0.982524,-5.265763,-0.634730,-5.212237,5.206743,-3.644009,-2.352274,-4.900666,4.506400,-1.703433,-7.417507,-1.545205,3.637935,-4.399356,-8.703539,4.555816,-5.146530,8.680793,1.221291,-2.656819,-4.819830,-5.282427,9.655484,-9.968928,-6.516195,0.097285,6.402545,-1.800883,8.521859,4.003575,3.580568,4.577827,-1.421150,2.840129,-7.161650,-8.316275,-0.788425,-9.117950,5.949375,-8.220267,0.048515,-1.334406,8.322710,2.089274,1.826052,-5.370379,4.443370,-4.018108,-5.684397,1.030176,4.429632,-7.291333,1.506215,-7.583739,9.840705,-7.420478,-2.650588,3.467147,-3.732811,9.731756,2.747681,-2.390706,1.373788,-6.579932,-0.749130,-7.148563,5.303112,0.731282,3.211670,1.781239,1.277186,-3.663413,-9.337590,1.417274,-0.119856,-7.548718,5.192397,2.370396,-5.228495,-4.511450,0.077415,-9.746755,3.650297,1.987418,5.355258,1.159732,4.717506,6.035460,-8.747864,-8.414092,7.404879,-5.000670,9.112590,9.950570,-6.798723,7.374562,-1.801194,-6.623053,7.765277,5.446755,8.767264,4.103074,-2.182668,-3.524990,-1.186555,6.410456,-1.267325,-6.719493,9.032977,7.064973,4.183265,-2.100143,-1.695247,-2.610211,-7.017840,4.178290,-2.478227,-2.928838,9.934028,0.545584,3.265289,9.293253,7.935954,-7.942999,7.243741,-6.914729,-3.965175,-0.077711,2.182260,-0.864302,-1.788659,2.363572,6.061906,5.056365,5.034414,-7.144830,-7.001076,-0.645640,4.272315,-5.802741,-1.562242,8.278714,5.188790,4.413479,-8.373121,6.258903,1.418792,-9.273720,-0.710000,1.955219,-5.450186,8.687916,7.440085,-1.690888,-4.781360,9.523400,9.007078,4.656353,5.497675,-9.496767,-1.160090,-3.954856,-6.736102,-2.709855,1.667490,-0.725157,2.781013,-9.428292,8.030112,6.340573,0.856157,-8.223899,-2.399860,-0.392841,9.755959,3.904400,-7.477003,4.407113,-3.508527,5.103079,-3.798344,-5.152799,6.719175,-3.866154,8.831402,-9.907102,0.465182,-1.372041,-8.132907,2.933310,2.626754,-2.222075,-7.673834,-3.345552,8.820833,-7.097136,-8.204912,-4.819643,2.171165,-0.526818,-5.157727,-0.611194,-5.047922,4.585694,4.766547,-3.980896,-9.658963,-0.943218,-8.003718,0.664433,-7.858018,3.233300,-8.882647,5.753318,5.559776,8.353081,-4.037795,3.999373,-6.764107,-5.159620,6.322886,-9.664309,0.456413,-4.509452,4.718166,6.637376,-2.705275,-1.035290,-0.563764,-1.561675,-8.912739,-9.095532,1.658010,3.713507,-9.517415,3.871634,-2.044057,3.039505,-8.070286], dtype = "float32")#candidate|154|(490,)|const|float32
call_153 = relay.TupleGetItem(func_75_call(relay.reshape(const_154.astype('float32'), [7, 5, 14])), 0)
call_155 = relay.TupleGetItem(func_78_call(relay.reshape(const_154.astype('float32'), [7, 5, 14])), 0)
output = relay.Tuple([bop_148,call_151,call_153,const_154,])
output2 = relay.Tuple([bop_148,call_152,call_155,const_154,])
func_164 = relay.Function([var_146,var_147,], output)
mod['func_164'] = func_164
mod = relay.transform.InferType()(mod)
mutated_mod['func_164'] = func_164
mutated_mod = relay.transform.InferType()(mutated_mod)
func_164_call = mutated_mod.get_global_var('func_164')
var_166 = relay.var("var_166", dtype = "float32", shape = ())#candidate|166|()|var|float32
var_167 = relay.var("var_167", dtype = "float32", shape = (3, 9))#candidate|167|(3, 9)|var|float32
call_165 = func_164_call(var_166,var_167,)
output = call_165
func_168 = relay.Function([var_166,var_167,], output)
mutated_mod['func_168'] = func_168
mutated_mod = relay.transform.InferType()(mutated_mod)
var_178 = relay.var("var_178", dtype = "float32", shape = (16,))#candidate|178|(16,)|var|float32
var_179 = relay.var("var_179", dtype = "float32", shape = (16,))#candidate|179|(16,)|var|float32
bop_180 = relay.power(var_178.astype('float32'), relay.reshape(var_179.astype('float32'), relay.shape_of(var_178))) # shape=(16,)
var_183 = relay.var("var_183", dtype = "float32", shape = (16,))#candidate|183|(16,)|var|float32
bop_184 = relay.minimum(var_178.astype('int8'), relay.reshape(var_183.astype('int8'), relay.shape_of(var_178))) # shape=(16,)
func_58_call = mod.get_global_var('func_58')
func_59_call = mutated_mod.get_global_var('func_59')
call_187 = relay.TupleGetItem(func_58_call(), 1)
call_188 = relay.TupleGetItem(func_59_call(), 1)
output = relay.Tuple([bop_180,bop_184,call_187,])
output2 = relay.Tuple([bop_180,bop_184,call_188,])
func_194 = relay.Function([var_178,var_179,var_183,], output)
mod['func_194'] = func_194
mod = relay.transform.InferType()(mod)
var_195 = relay.var("var_195", dtype = "float32", shape = (16,))#candidate|195|(16,)|var|float32
var_196 = relay.var("var_196", dtype = "float32", shape = (16,))#candidate|196|(16,)|var|float32
var_197 = relay.var("var_197", dtype = "float32", shape = (16,))#candidate|197|(16,)|var|float32
output = func_194(var_195,var_196,var_197,)
func_198 = relay.Function([var_195,var_196,var_197,], output)
mutated_mod['func_198'] = func_198
mutated_mod = relay.transform.InferType()(mutated_mod)
var_213 = relay.var("var_213", dtype = "float64", shape = (3, 8))#candidate|213|(3, 8)|var|float64
uop_214 = relay.atan(var_213.astype('float64')) # shape=(3, 8)
const_222 = relay.const([[-9.787383,4.160212,-9.303732,-1.354650,-0.014272,-4.780900,5.659190,-6.111158],[-1.658319,-8.444180,8.661495,-9.175721,5.311928,-7.542961,-9.044614,-7.858917],[0.851700,-1.093581,-0.518225,-8.363751,-1.149971,-7.668650,6.564547,4.756977]], dtype = "float64")#candidate|222|(3, 8)|const|float64
bop_223 = relay.less(uop_214.astype('bool'), relay.reshape(const_222.astype('bool'), relay.shape_of(uop_214))) # shape=(3, 8)
bop_231 = relay.bitwise_xor(uop_214.astype('int8'), relay.reshape(const_222.astype('int8'), relay.shape_of(uop_214))) # shape=(3, 8)
func_194_call = mod.get_global_var('func_194')
func_198_call = mutated_mod.get_global_var('func_198')
var_236 = relay.var("var_236", dtype = "float32", shape = (16,))#candidate|236|(16,)|var|float32
call_235 = relay.TupleGetItem(func_194_call(relay.reshape(var_236.astype('float32'), [16,]), relay.reshape(var_236.astype('float32'), [16,]), relay.reshape(var_236.astype('float32'), [16,]), ), 2)
call_237 = relay.TupleGetItem(func_198_call(relay.reshape(var_236.astype('float32'), [16,]), relay.reshape(var_236.astype('float32'), [16,]), relay.reshape(var_236.astype('float32'), [16,]), ), 2)
output = relay.Tuple([bop_223,bop_231,call_235,var_236,])
output2 = relay.Tuple([bop_223,bop_231,call_237,var_236,])
func_241 = relay.Function([var_213,var_236,], output)
mod['func_241'] = func_241
mod = relay.transform.InferType()(mod)
var_242 = relay.var("var_242", dtype = "float64", shape = (3, 8))#candidate|242|(3, 8)|var|float64
var_243 = relay.var("var_243", dtype = "float32", shape = (16,))#candidate|243|(16,)|var|float32
output = func_241(var_242,var_243,)
func_244 = relay.Function([var_242,var_243,], output)
mutated_mod['func_244'] = func_244
mutated_mod = relay.transform.InferType()(mutated_mod)
const_262 = relay.const([[5.039078,-6.318837,-5.154787,9.222776,-6.399870,-0.594310,-6.450861,7.420990,-8.353598],[-3.654389,-7.045909,2.585999,-7.491076,-4.424246,6.801964,-3.688852,-7.144887,-1.310773],[-4.590595,8.306197,-6.708298,-0.490147,6.150950,-7.595877,8.449804,-7.311232,8.408624],[3.701794,-1.891044,8.446485,-1.170197,-3.861462,-9.806703,8.115275,-2.843075,-9.698128],[-3.548943,-9.650530,-8.271918,0.045854,2.155172,4.961751,7.680490,-8.562921,7.949778]], dtype = "float32")#candidate|262|(5, 9)|const|float32
uop_263 = relay.sinh(const_262.astype('float32')) # shape=(5, 9)
output = uop_263
output2 = uop_263
func_274 = relay.Function([], output)
mod['func_274'] = func_274
mod = relay.transform.InferType()(mod)
output = func_274()
func_275 = relay.Function([], output)
mutated_mod['func_275'] = func_275
mutated_mod = relay.transform.InferType()(mutated_mod)
func_58_call = mod.get_global_var('func_58')
func_59_call = mutated_mod.get_global_var('func_59')
call_303 = relay.TupleGetItem(func_58_call(), 0)
call_304 = relay.TupleGetItem(func_59_call(), 0)
output = call_303
output2 = call_304
func_308 = relay.Function([], output)
mod['func_308'] = func_308
mod = relay.transform.InferType()(mod)
output = func_308()
func_309 = relay.Function([], output)
mutated_mod['func_309'] = func_309
mutated_mod = relay.transform.InferType()(mutated_mod)
const_357 = relay.const([3,-7,4,-1,-6,4,-6], dtype = "int16")#candidate|357|(7,)|const|int16
var_358 = relay.var("var_358", dtype = "int16", shape = (7,))#candidate|358|(7,)|var|int16
bop_359 = relay.left_shift(const_357.astype('int16'), relay.reshape(var_358.astype('int16'), relay.shape_of(const_357))) # shape=(7,)
output = relay.Tuple([bop_359,])
output2 = relay.Tuple([bop_359,])
func_364 = relay.Function([var_358,], output)
mod['func_364'] = func_364
mod = relay.transform.InferType()(mod)
mutated_mod['func_364'] = func_364
mutated_mod = relay.transform.InferType()(mutated_mod)
var_365 = relay.var("var_365", dtype = "int16", shape = (7,))#candidate|365|(7,)|var|int16
func_364_call = mutated_mod.get_global_var('func_364')
call_366 = func_364_call(var_365)
output = call_366
func_367 = relay.Function([var_365], output)
mutated_mod['func_367'] = func_367
mutated_mod = relay.transform.InferType()(mutated_mod)
const_388 = relay.const([[[-9.537918,1.401597,2.245858,-6.896663,-7.850778,2.909693,-8.304844],[6.687408,8.499326,8.622694,8.734366,1.325671,3.154610,-7.309406],[-1.921182,0.004940,-5.618400,5.452896,-3.143524,5.361788,-7.318768],[7.303221,-3.942690,-5.655917,-3.865253,-8.404102,6.645663,5.713597],[3.404396,9.093442,-4.409548,0.924190,-4.038408,-7.053221,-1.178006],[7.329344,-6.098487,0.801941,9.175754,-1.628345,-7.956953,1.270738],[-8.099774,-9.060946,4.981185,3.930441,0.955345,-3.161743,3.050364],[-7.340215,-2.332211,-1.546201,-6.609956,-4.646615,8.390126,-8.670968],[1.573059,3.635792,-6.388267,-9.113221,-0.296844,2.038284,-6.626493],[5.029517,2.837020,2.984097,1.408663,-2.740508,-8.692047,8.733263],[-7.210182,3.408304,-4.914337,9.214691,-9.472545,-3.332157,-7.464490],[-4.850623,5.900909,-5.118080,-0.370025,-3.513850,-5.872664,6.985582],[2.872109,-0.050950,-7.208559,-4.415939,3.608272,-1.713132,0.393855],[-4.428194,-9.767915,-8.228915,-1.097304,-3.447609,-7.657683,-4.946003],[-3.494395,9.049248,-6.918240,7.834269,1.041642,8.765568,3.817519],[8.587772,-7.081767,-6.574521,-0.474558,-8.686447,-4.713653,8.163714]],[[-1.257552,7.403447,-5.794622,-8.722445,-8.657050,7.946232,9.040746],[-9.140655,-0.649205,5.864722,6.110657,-0.108137,-9.106676,-3.335685],[5.535979,-1.895307,1.869560,-9.130484,-1.918203,9.521703,-3.634021],[4.790847,8.834691,4.232939,7.252803,5.520184,-9.617176,-4.859410],[-7.358241,1.345202,4.746769,0.426693,7.452922,-0.546790,3.076473],[5.446698,-4.507761,7.981690,-8.625733,-6.123332,-4.288719,5.946843],[6.093811,1.699125,-8.833219,3.022970,-5.413033,0.022046,5.471957],[-7.639967,9.562639,-1.756548,-5.677642,6.717448,-2.171062,-8.897663],[5.044702,-7.051778,1.056763,0.782830,-0.274767,2.752482,0.687143],[8.005080,-1.063033,2.105338,9.015964,-7.400507,-2.552830,-4.295405],[6.805507,3.892287,-3.828024,9.027496,9.117304,-1.124369,9.651210],[6.210911,-2.337199,6.361784,-4.568104,-8.811445,9.066586,9.701782],[-7.656250,-4.748476,-9.982877,5.341546,1.472704,-7.555852,8.397875],[0.461241,0.617858,6.291047,5.666102,-9.490642,-2.667961,7.358607],[7.414894,6.290097,-5.124781,5.356488,6.062595,-1.297950,1.633914],[4.612457,6.136270,-7.600624,1.262525,-9.082112,-3.246594,-6.624228]],[[2.745358,-6.178239,-3.622712,-1.805606,-3.324094,3.702743,-2.413233],[-6.279803,4.357599,-1.129094,-4.226950,3.827123,2.522611,-5.132421],[-2.424276,-1.516738,-6.404589,4.782051,-4.087600,-3.434428,7.179241],[-1.932455,7.808879,-6.444305,-8.371309,0.227239,8.295256,9.142156],[-9.076180,-1.134674,-3.342217,-5.357705,-0.521633,-3.289326,8.676644],[4.111893,-2.873261,9.172114,-1.287200,-0.379489,-4.770566,-9.267209],[-4.240184,-2.037276,9.780082,-1.547705,1.159573,0.164195,-6.466157],[-1.842259,-4.982093,-8.376615,9.414115,-7.847635,6.603453,8.641407],[-6.905747,7.121182,3.966496,2.615053,6.367851,-6.327523,-8.012038],[-2.407980,1.781652,-0.043890,-4.232352,7.853659,-1.022817,8.534105],[-6.252143,-8.733884,-0.798439,-7.539187,5.778225,2.186379,5.051577],[-0.025980,2.105649,-6.603280,2.824986,-6.898047,6.399969,-2.096474],[8.731345,-6.952512,-2.013936,-2.441008,-7.448118,-8.470903,-5.930569],[-3.105179,4.521931,3.977075,8.654795,-2.911785,-6.703165,-9.129267],[-7.126917,-4.284828,1.517214,7.153717,7.656469,-7.373820,-0.284958],[8.057190,-0.652124,-2.412086,-3.205545,-7.014501,7.615456,7.605685]],[[3.618378,-4.284597,-7.499717,2.339319,9.075195,3.768067,-3.945053],[-5.267325,-9.503975,8.607255,-9.058141,-3.868291,5.980402,-1.910054],[7.166853,5.159910,-0.091802,-5.616154,-5.074178,-4.920227,9.499680],[-1.285756,8.299092,-8.977776,-4.716829,8.500066,-2.906465,-7.266538],[-8.371090,-7.773047,-9.387065,3.718469,9.770968,2.358744,8.944677],[7.045529,3.976506,0.169396,8.129290,-6.568975,8.128631,-5.188944],[4.142251,-1.350195,1.836365,-7.349300,-0.840106,-4.433679,0.239516],[7.924729,5.743472,1.713974,-7.551331,-5.722866,5.062648,1.703553],[-5.566518,-0.722158,-8.947860,0.751837,9.116587,1.752839,6.231200],[-8.378398,3.531841,-0.904584,-1.764150,4.323369,-5.112438,-6.780637],[-0.518673,-1.423645,6.585511,7.882484,4.753923,-6.003004,-8.755255],[-3.377704,8.791002,-8.164537,-1.751408,-6.135818,4.051104,9.944353],[7.007199,9.255932,-7.676760,-8.449613,-3.128663,8.503292,-9.840464],[-1.585762,-4.804159,1.101592,3.506452,-7.367426,-2.030449,1.552306],[4.147566,8.990333,-5.441561,-2.133783,-7.702405,7.366803,-9.227723],[4.895050,-6.416712,2.636056,-3.770363,-5.277260,7.440721,-1.683054]],[[0.550706,7.862083,-5.558332,6.739936,9.058690,3.962967,-3.458443],[-4.887479,-3.996121,-6.399857,8.340858,9.562706,-8.434624,-8.736590],[-1.362270,5.121890,-9.669153,-2.145142,4.292874,3.498843,-8.556184],[-8.044460,4.194770,7.056851,-4.383407,-2.318926,-5.968468,-7.820033],[-7.127686,-7.789813,6.651987,-5.955944,-8.458785,-5.939090,3.411814],[-5.164178,4.095827,-2.537567,6.157837,-8.289404,5.766421,8.131230],[-5.632182,-9.511456,-7.910568,9.103807,-2.941790,4.356414,4.851287],[-4.773947,-2.307730,-8.669810,-6.569046,-2.291630,-9.975463,9.006078],[-8.164791,2.632366,-2.842048,9.198327,-9.990613,-1.539330,-4.149819],[0.828398,-3.694673,-5.998084,-2.432508,-6.823775,-8.918190,-1.780392],[7.319880,-0.500673,8.756540,-0.008129,-0.854117,-0.139830,-4.779390],[4.815061,7.875470,-2.717091,3.577332,-6.104125,4.665368,-0.360441],[4.919537,9.468684,-1.265567,-0.675465,0.235009,-6.387234,-1.631350],[3.714219,7.077287,-4.181173,2.999400,-6.415541,7.962101,9.103774],[3.793540,-1.192240,-8.869455,9.098785,-2.247230,-1.342500,-0.566006],[4.169368,-5.693586,-2.534697,2.441701,-0.304665,2.948216,1.171391]],[[1.531347,-0.060527,-5.143620,9.334432,-9.082133,-3.838211,9.130221],[-2.450676,6.351800,-3.413845,-8.747932,4.064142,5.173730,4.029385],[4.093400,-4.613231,7.900392,0.214673,2.919977,-8.204159,-3.764906],[-0.640414,-3.426082,8.296134,-3.107972,6.431060,-6.970936,5.502300],[-1.695962,2.481746,0.977525,-4.179288,-8.492484,7.355121,-2.989505],[3.732262,-7.601218,-8.812824,-3.988071,-2.422643,-7.448101,-2.788603],[-5.694896,-9.769847,-0.424637,-5.469218,0.465389,-6.647899,6.479978],[-7.888042,0.072545,-0.838417,7.669929,-9.541762,-1.166771,7.976866],[-3.646918,-5.311087,3.982204,4.689263,-2.304471,1.634078,-9.611958],[6.220979,3.676422,-2.186807,6.003372,-9.902319,4.635195,-2.176798],[9.854632,-9.391652,2.633243,4.637416,-8.066312,-3.683331,-7.275026],[-0.762444,2.742166,-7.676984,3.086078,-2.660213,3.517777,-9.292681],[1.800202,4.855021,-1.863862,2.307975,-3.302958,-5.136506,2.844684],[4.560916,-8.011085,8.609154,7.956765,4.118528,-0.091610,9.126527],[-6.284022,-1.299318,-0.451479,6.761909,-2.673729,5.150745,1.840089],[5.380857,-2.295505,-7.994031,-8.673333,4.740264,-0.490684,7.582604]]], dtype = "float64")#candidate|388|(6, 16, 7)|const|float64
var_389 = relay.var("var_389", dtype = "float64", shape = (6, 16, 7))#candidate|389|(6, 16, 7)|var|float64
bop_390 = relay.floor_mod(const_388.astype('float64'), relay.reshape(var_389.astype('float64'), relay.shape_of(const_388))) # shape=(6, 16, 7)
func_164_call = mod.get_global_var('func_164')
func_168_call = mutated_mod.get_global_var('func_168')
const_395 = relay.const(7.998194, dtype = "float32")#candidate|395|()|const|float32
const_396 = relay.const([4.878178,-7.773049,4.779320,9.324939,8.714550,7.141364,7.807466,-1.018778,0.874371,3.167121,-3.377066,-8.232250,-2.160552,-5.819212,-4.696517,7.239906,-6.152399,2.709278,9.927592,4.600041,8.457503,-4.872687,4.150198,-4.453967,8.719581,-7.879567,-6.263685], dtype = "float32")#candidate|396|(27,)|const|float32
call_394 = relay.TupleGetItem(func_164_call(relay.reshape(const_395.astype('float32'), []), relay.reshape(const_396.astype('float32'), [3, 9]), ), 2)
call_397 = relay.TupleGetItem(func_168_call(relay.reshape(const_395.astype('float32'), []), relay.reshape(const_396.astype('float32'), [3, 9]), ), 2)
output = relay.Tuple([bop_390,call_394,const_395,const_396,])
output2 = relay.Tuple([bop_390,call_397,const_395,const_396,])
func_405 = relay.Function([var_389,], output)
mod['func_405'] = func_405
mod = relay.transform.InferType()(mod)
mutated_mod['func_405'] = func_405
mutated_mod = relay.transform.InferType()(mutated_mod)
var_406 = relay.var("var_406", dtype = "float64", shape = (6, 16, 7))#candidate|406|(6, 16, 7)|var|float64
func_405_call = mutated_mod.get_global_var('func_405')
call_407 = func_405_call(var_406)
output = call_407
func_408 = relay.Function([var_406], output)
mutated_mod['func_408'] = func_408
mutated_mod = relay.transform.InferType()(mutated_mod)
func_308_call = mod.get_global_var('func_308')
func_309_call = mutated_mod.get_global_var('func_309')
call_434 = func_308_call()
call_435 = func_308_call()
func_274_call = mod.get_global_var('func_274')
func_275_call = mutated_mod.get_global_var('func_275')
call_438 = func_274_call()
call_439 = func_274_call()
func_75_call = mod.get_global_var('func_75')
func_78_call = mutated_mod.get_global_var('func_78')
var_461 = relay.var("var_461", dtype = "float32", shape = (490,))#candidate|461|(490,)|var|float32
call_460 = relay.TupleGetItem(func_75_call(relay.reshape(var_461.astype('float32'), [7, 5, 14])), 0)
call_462 = relay.TupleGetItem(func_78_call(relay.reshape(var_461.astype('float32'), [7, 5, 14])), 0)
bop_468 = relay.equal(call_460.astype('bool'), relay.reshape(var_461.astype('bool'), relay.shape_of(call_460))) # shape=(7, 5, 14)
bop_471 = relay.equal(call_462.astype('bool'), relay.reshape(var_461.astype('bool'), relay.shape_of(call_462))) # shape=(7, 5, 14)
output = relay.Tuple([call_434,call_438,bop_468,])
output2 = relay.Tuple([call_435,call_439,bop_471,])
func_475 = relay.Function([var_461,], output)
mod['func_475'] = func_475
mod = relay.transform.InferType()(mod)
var_476 = relay.var("var_476", dtype = "float32", shape = (490,))#candidate|476|(490,)|var|float32
output = func_475(var_476)
func_477 = relay.Function([var_476], output)
mutated_mod['func_477'] = func_477
mutated_mod = relay.transform.InferType()(mutated_mod)
var_498 = relay.var("var_498", dtype = "float64", shape = (7,))#candidate|498|(7,)|var|float64
uop_499 = relay.asin(var_498.astype('float64')) # shape=(7,)
output = uop_499
output2 = uop_499
func_505 = relay.Function([var_498,], output)
mod['func_505'] = func_505
mod = relay.transform.InferType()(mod)
mutated_mod['func_505'] = func_505
mutated_mod = relay.transform.InferType()(mutated_mod)
var_506 = relay.var("var_506", dtype = "float64", shape = (7,))#candidate|506|(7,)|var|float64
func_505_call = mutated_mod.get_global_var('func_505')
call_507 = func_505_call(var_506)
output = call_507
func_508 = relay.Function([var_506], output)
mutated_mod['func_508'] = func_508
mutated_mod = relay.transform.InferType()(mutated_mod)
func_308_call = mod.get_global_var('func_308')
func_309_call = mutated_mod.get_global_var('func_309')
call_510 = func_308_call()
call_511 = func_308_call()
output = relay.Tuple([call_510,])
output2 = relay.Tuple([call_511,])
func_514 = relay.Function([], output)
mod['func_514'] = func_514
mod = relay.transform.InferType()(mod)
mutated_mod['func_514'] = func_514
mutated_mod = relay.transform.InferType()(mutated_mod)
func_514_call = mutated_mod.get_global_var('func_514')
call_515 = func_514_call()
output = call_515
func_516 = relay.Function([], output)
mutated_mod['func_516'] = func_516
mutated_mod = relay.transform.InferType()(mutated_mod)
func_308_call = mod.get_global_var('func_308')
func_309_call = mutated_mod.get_global_var('func_309')
call_521 = func_308_call()
call_522 = func_308_call()
func_75_call = mod.get_global_var('func_75')
func_78_call = mutated_mod.get_global_var('func_78')
const_530 = relay.const([5.956543,-6.023604,6.061501,-4.023135,-2.604720,-4.903883,-0.958327,-7.021803,4.381747,6.740425,7.903428,1.655665,7.320301,-6.088759,2.628855,5.648279,8.325977,-5.212577,3.160632,8.435661,-4.543826,8.026610,4.333479,1.997909,-4.427610,9.143578,-3.551509,-3.310089,3.224352,4.192396,-6.270091,4.820401,-3.131747,8.927639,-5.813033,7.583435,-6.621677,8.436870,-1.992317,-4.363393,-1.348004,-3.311706,-4.921694,-8.208188,-4.164537,5.486783,-9.147389,-0.631622,-9.846820,-6.056994,-2.136478,1.038115,6.657409,-5.510831,8.105236,-2.454488,-0.565318,2.777621,3.151130,8.613425,3.370045,-3.493813,3.177301,-0.433793,-1.402789,0.216970,-8.353692,-1.896338,7.725877,1.135725,3.396090,-1.177776,4.750818,8.251428,9.930650,-9.586266,6.716645,0.937794,7.646640,-3.387571,-5.311472,6.849598,-4.014815,-5.348607,-4.210612,-6.015733,8.664855,-6.046671,-3.913037,5.157417,-5.856723,-4.602670,1.874776,-1.485612,4.196905,-8.904877,-4.503324,-1.835634,2.440672,6.291146,2.787842,-3.742185,-1.817361,6.607114,-0.663650,3.004240,-2.627799,-3.653791,2.754332,-1.071300,8.443910,-1.614779,-0.724058,-0.622112,-5.126208,-0.803074,5.298217,-7.821987,3.155050,9.936852,6.348048,-2.295297,-3.840121,0.656211,3.812946,2.964930,-8.688855,9.556580,-0.387468,0.749041,5.433932,-5.898186,-3.781862,-8.271350,-5.745017,6.215672,-4.566194,0.356654,-8.363891,-2.974178,6.892858,-5.066542,-3.502223,-3.438387,7.500848,0.001786,8.153835,1.527294,-0.098111,3.200959,0.427578,-2.659943,-0.707313,2.261639,-6.569993,1.016651,9.230414,-7.101167,5.210841,-2.823948,-8.439163,2.838227,-6.375321,5.906262,-2.637912,9.914447,9.203246,-3.738818,-2.767077,-6.025185,1.115576,-1.228615,7.965004,-7.996168,5.127331,7.903067,-8.372453,-3.880227,6.098443,-3.930160,-0.232550,-6.404719,0.800364,-6.236554,-9.879101,5.520768,-1.685416,-1.450630,-8.989295,-2.826713,7.024125,9.493790,-1.209078,-7.394456,3.823774,6.019188,6.015403,9.553036,-0.005554,-9.704464,-9.227377,0.888059,3.655828,-6.929773,-4.461379,7.628705,-1.625397,-9.430551,-4.689811,-4.622905,5.771809,-4.033600,5.105444,3.563770,2.392699,-4.080432,2.256309,-7.039472,2.851428,-6.956068,8.319173,-0.822888,-6.892411,-4.323887,9.989819,-1.552742,-6.450469,7.466278,-4.658491,-0.126020,-7.279639,1.286601,-8.943686,-3.265286,-6.936288,4.077725,3.124486,8.458476,-5.818527,-6.900849,7.037658,-6.353446,7.624144,4.573187,9.987470,4.534564,6.733709,1.296807,-6.432324,8.942231,1.864212,-4.445668,-1.426780,-0.953460,4.355922,1.427203,-5.074611,4.327535,5.290422,8.079566,-5.165082,3.022904,-8.406651,1.873476,-9.515035,1.780404,7.343987,-4.721884,-8.109029,6.038775,-1.271910,-1.944653,-2.403144,-5.621039,-8.362047,-6.478410,4.083411,-6.894550,0.649774,-6.085860,0.397907,5.432728,-7.630379,-6.730604,-0.018777,-0.596130,-7.967030,2.237016,-5.842148,9.586879,-3.636180,5.087027,4.130852,7.889000,1.112562,-0.570608,1.538026,-1.310312,-4.871130,-9.884500,-5.863266,3.015594,3.824783,2.348898,-8.074906,4.870780,3.093509,-4.308614,-7.600757,3.046092,-8.102488,-7.215802,3.165568,2.246082,-8.480535,-3.581631,-0.991886,0.069591,7.198504,-6.740466,7.541019,-6.489895,-5.984250,7.214627,-2.319519,0.922310,6.087268,-2.417690,-9.073681,-2.676419,-1.558003,6.374862,-0.617788,-5.463312,7.745538,7.228189,-8.714482,1.286579,9.129772,-6.623264,9.604662,-8.629660,6.221856,1.734230,-3.523091,-0.572078,3.375164,2.825641,1.472089,6.941119,-0.289499,3.306293,-4.169330,-3.085350,-7.265923,5.865018,-7.332638,-5.188544,-7.484031,9.639670,6.412614,2.760169,9.701017,-6.913401,6.063599,5.548614,-9.107923,-2.640060,-4.624829,-3.022598,7.507948,-1.775600,5.126795,-8.775267,7.345693,-8.774885,2.549928,6.394232,9.425707,8.911190,8.130385,-0.360685,-6.405703,-8.697376,0.763720,5.715249,-2.381739,-0.995127,-8.045207,5.071752,-2.476147,-8.723255,-5.390031,-7.950783,7.351688,-4.200163,1.263078,-2.642863,7.862276,-0.728658,-7.536166,-6.865544,7.910041,-0.608712,8.479710,5.191491,-3.173155,2.888193,9.773740,-3.271649,-9.968856,2.041319,5.385789,8.798269,-8.125304,-4.114929,7.998885,3.558042,0.552798,-8.557548,-2.060912,3.653875,4.543834,4.223396,-3.198820,7.163223,-2.030795,-2.139050,-7.535049,-4.126239,1.437902,0.148859,3.784310,-7.366446,5.488846,8.653328,-5.831308,-5.801097,-1.849048,2.927405,1.419084,4.475702,3.102078,3.397941,1.638130,0.229134,-0.244459,6.394854,9.349880,1.479873,-6.030744,-0.294274,3.893798,-0.198017,-3.195382,-1.905440,-7.936537,8.536894,-1.656651,7.361886,2.482936,-5.010681,-8.216677,1.693682,6.144103,-6.413452,-5.644703,4.881208,1.723872,0.381917,5.031020,3.816032,2.901196,6.278513,9.323256,3.602216,9.643752,8.470089,7.089478,-1.567235,8.164243,-6.477543,5.366014,9.444928,2.701117,8.919707,-9.916047,-0.404789,1.259060,7.427544], dtype = "float32")#candidate|530|(490,)|const|float32
call_529 = relay.TupleGetItem(func_75_call(relay.reshape(const_530.astype('float32'), [7, 5, 14])), 0)
call_531 = relay.TupleGetItem(func_78_call(relay.reshape(const_530.astype('float32'), [7, 5, 14])), 0)
func_28_call = mod.get_global_var('func_28')
func_30_call = mutated_mod.get_global_var('func_30')
call_541 = func_28_call()
call_542 = func_28_call()
uop_544 = relay.log10(call_521.astype('float64')) # shape=(7, 2, 7)
uop_546 = relay.log10(call_522.astype('float64')) # shape=(7, 2, 7)
bop_552 = relay.less(uop_544.astype('bool'), relay.reshape(call_541.astype('bool'), relay.shape_of(uop_544))) # shape=(7, 2, 7)
bop_555 = relay.less(uop_546.astype('bool'), relay.reshape(call_542.astype('bool'), relay.shape_of(uop_546))) # shape=(7, 2, 7)
bop_556 = relay.minimum(uop_544.astype('float64'), relay.reshape(bop_552.astype('float64'), relay.shape_of(uop_544))) # shape=(7, 2, 7)
bop_559 = relay.minimum(uop_546.astype('float64'), relay.reshape(bop_555.astype('float64'), relay.shape_of(uop_546))) # shape=(7, 2, 7)
func_58_call = mod.get_global_var('func_58')
func_59_call = mutated_mod.get_global_var('func_59')
call_565 = relay.TupleGetItem(func_58_call(), 1)
call_566 = relay.TupleGetItem(func_59_call(), 1)
func_514_call = mod.get_global_var('func_514')
func_516_call = mutated_mod.get_global_var('func_516')
call_571 = relay.TupleGetItem(func_514_call(), 0)
call_572 = relay.TupleGetItem(func_516_call(), 0)
func_505_call = mod.get_global_var('func_505')
func_508_call = mutated_mod.get_global_var('func_508')
var_574 = relay.var("var_574", dtype = "float64", shape = (7,))#candidate|574|(7,)|var|float64
call_573 = func_505_call(relay.reshape(var_574.astype('float64'), [7,]))
call_575 = func_505_call(relay.reshape(var_574.astype('float64'), [7,]))
bop_576 = relay.right_shift(bop_556.astype('uint8'), var_574.astype('uint8')) # shape=(7, 2, 7)
bop_579 = relay.right_shift(bop_559.astype('uint8'), var_574.astype('uint8')) # shape=(7, 2, 7)
func_364_call = mod.get_global_var('func_364')
func_367_call = mutated_mod.get_global_var('func_367')
call_580 = relay.TupleGetItem(func_364_call(relay.reshape(call_573.astype('int16'), [7,])), 0)
call_581 = relay.TupleGetItem(func_367_call(relay.reshape(call_573.astype('int16'), [7,])), 0)
uop_582 = relay.atanh(uop_544.astype('float32')) # shape=(7, 2, 7)
uop_584 = relay.atanh(uop_546.astype('float32')) # shape=(7, 2, 7)
func_28_call = mod.get_global_var('func_28')
func_30_call = mutated_mod.get_global_var('func_30')
call_592 = func_28_call()
call_593 = func_28_call()
uop_594 = relay.cos(uop_582.astype('float32')) # shape=(7, 2, 7)
uop_596 = relay.cos(uop_584.astype('float32')) # shape=(7, 2, 7)
bop_599 = relay.greater_equal(uop_594.astype('bool'), relay.reshape(uop_544.astype('bool'), relay.shape_of(uop_594))) # shape=(7, 2, 7)
bop_602 = relay.greater_equal(uop_596.astype('bool'), relay.reshape(uop_546.astype('bool'), relay.shape_of(uop_596))) # shape=(7, 2, 7)
bop_603 = relay.bitwise_xor(bop_599.astype('int64'), relay.reshape(call_521.astype('int64'), relay.shape_of(bop_599))) # shape=(7, 2, 7)
bop_606 = relay.bitwise_xor(bop_602.astype('int64'), relay.reshape(call_522.astype('int64'), relay.shape_of(bop_602))) # shape=(7, 2, 7)
bop_616 = relay.greater(uop_594.astype('bool'), relay.reshape(bop_599.astype('bool'), relay.shape_of(uop_594))) # shape=(7, 2, 7)
bop_619 = relay.greater(uop_596.astype('bool'), relay.reshape(bop_602.astype('bool'), relay.shape_of(uop_596))) # shape=(7, 2, 7)
bop_623 = relay.maximum(bop_576.astype('uint8'), var_574.astype('uint8')) # shape=(7, 2, 7)
bop_626 = relay.maximum(bop_579.astype('uint8'), var_574.astype('uint8')) # shape=(7, 2, 7)
uop_627 = relay.exp(uop_582.astype('float32')) # shape=(7, 2, 7)
uop_629 = relay.exp(uop_584.astype('float32')) # shape=(7, 2, 7)
uop_637 = relay.atan(uop_627.astype('float32')) # shape=(7, 2, 7)
uop_639 = relay.atan(uop_629.astype('float32')) # shape=(7, 2, 7)
uop_640 = relay.log(uop_637.astype('float64')) # shape=(7, 2, 7)
uop_642 = relay.log(uop_639.astype('float64')) # shape=(7, 2, 7)
bop_644 = relay.floor_mod(uop_640.astype('float64'), relay.reshape(call_571.astype('float64'), relay.shape_of(uop_640))) # shape=(7, 2, 7)
bop_647 = relay.floor_mod(uop_642.astype('float64'), relay.reshape(call_572.astype('float64'), relay.shape_of(uop_642))) # shape=(7, 2, 7)
uop_648 = relay.cosh(uop_637.astype('float32')) # shape=(7, 2, 7)
uop_650 = relay.cosh(uop_639.astype('float32')) # shape=(7, 2, 7)
var_654 = relay.var("var_654", dtype = "float32", shape = (7, 2, 7))#candidate|654|(7, 2, 7)|var|float32
bop_655 = relay.floor_divide(uop_637.astype('float64'), relay.reshape(var_654.astype('float64'), relay.shape_of(uop_637))) # shape=(7, 2, 7)
bop_658 = relay.floor_divide(uop_639.astype('float64'), relay.reshape(var_654.astype('float64'), relay.shape_of(uop_639))) # shape=(7, 2, 7)
bop_659 = relay.floor_divide(uop_648.astype('float64'), relay.reshape(bop_599.astype('float64'), relay.shape_of(uop_648))) # shape=(7, 2, 7)
bop_662 = relay.floor_divide(uop_650.astype('float64'), relay.reshape(bop_602.astype('float64'), relay.shape_of(uop_650))) # shape=(7, 2, 7)
bop_663 = relay.logical_and(bop_655.astype('bool'), relay.reshape(call_571.astype('bool'), relay.shape_of(bop_655))) # shape=(7, 2, 7)
bop_666 = relay.logical_and(bop_658.astype('bool'), relay.reshape(call_572.astype('bool'), relay.shape_of(bop_658))) # shape=(7, 2, 7)
bop_668 = relay.logical_xor(uop_627.astype('int32'), relay.reshape(call_541.astype('int32'), relay.shape_of(uop_627))) # shape=(7, 2, 7)
bop_671 = relay.logical_xor(uop_629.astype('int32'), relay.reshape(call_542.astype('int32'), relay.shape_of(uop_629))) # shape=(7, 2, 7)
output = relay.Tuple([call_529,const_530,call_565,call_573,call_580,call_592,bop_603,bop_616,bop_623,bop_644,bop_659,bop_663,bop_668,])
output2 = relay.Tuple([call_531,const_530,call_566,call_575,call_581,call_593,bop_606,bop_619,bop_626,bop_647,bop_662,bop_666,bop_671,])
func_677 = relay.Function([var_574,var_654,], output)
mod['func_677'] = func_677
mod = relay.transform.InferType()(mod)
mutated_mod['func_677'] = func_677
mutated_mod = relay.transform.InferType()(mutated_mod)
func_677_call = mutated_mod.get_global_var('func_677')
var_679 = relay.var("var_679", dtype = "float64", shape = (7,))#candidate|679|(7,)|var|float64
var_680 = relay.var("var_680", dtype = "float32", shape = (7, 2, 7))#candidate|680|(7, 2, 7)|var|float32
call_678 = func_677_call(var_679,var_680,)
output = call_678
func_681 = relay.Function([var_679,var_680,], output)
mutated_mod['func_681'] = func_681
mutated_mod = relay.transform.InferType()(mutated_mod)
func_274_call = mod.get_global_var('func_274')
func_275_call = mutated_mod.get_global_var('func_275')
call_696 = func_274_call()
call_697 = func_274_call()
func_505_call = mod.get_global_var('func_505')
func_508_call = mutated_mod.get_global_var('func_508')
var_700 = relay.var("var_700", dtype = "float64", shape = (7, 1))#candidate|700|(7, 1)|var|float64
call_699 = func_505_call(relay.reshape(var_700.astype('float64'), [7,]))
call_701 = func_505_call(relay.reshape(var_700.astype('float64'), [7,]))
func_164_call = mod.get_global_var('func_164')
func_168_call = mutated_mod.get_global_var('func_168')
var_722 = relay.var("var_722", dtype = "float32", shape = ())#candidate|722|()|var|float32
const_723 = relay.const([-1.957397,-0.997241,-5.028364,-3.816806,-9.498129,-0.319342,-4.837995,-9.047516,-8.623913,-0.881437,-8.305025,2.780354,-1.587228,5.399319,3.335318,0.183483,-1.467112,3.188049,-1.025474,-1.961348,-3.000240,-2.532096,3.606067,-1.029042,7.909934,8.733418,7.387882], dtype = "float32")#candidate|723|(27,)|const|float32
call_721 = relay.TupleGetItem(func_164_call(relay.reshape(var_722.astype('float32'), []), relay.reshape(const_723.astype('float32'), [3, 9]), ), 3)
call_724 = relay.TupleGetItem(func_168_call(relay.reshape(var_722.astype('float32'), []), relay.reshape(const_723.astype('float32'), [3, 9]), ), 3)
bop_725 = relay.floor_mod(const_723.astype('float32'), var_722.astype('float32')) # shape=(27,)
output = relay.Tuple([call_696,call_699,var_700,call_721,bop_725,])
output2 = relay.Tuple([call_697,call_701,var_700,call_724,bop_725,])
func_733 = relay.Function([var_700,var_722,], output)
mod['func_733'] = func_733
mod = relay.transform.InferType()(mod)
mutated_mod['func_733'] = func_733
mutated_mod = relay.transform.InferType()(mutated_mod)
func_733_call = mutated_mod.get_global_var('func_733')
var_735 = relay.var("var_735", dtype = "float64", shape = (7, 1))#candidate|735|(7, 1)|var|float64
var_736 = relay.var("var_736", dtype = "float32", shape = ())#candidate|736|()|var|float32
call_734 = func_733_call(var_735,var_736,)
output = call_734
func_737 = relay.Function([var_735,var_736,], output)
mutated_mod['func_737'] = func_737
mutated_mod = relay.transform.InferType()(mutated_mod)
var_793 = relay.var("var_793", dtype = "uint8", shape = (15, 16))#candidate|793|(15, 16)|var|uint8
const_794 = relay.const([[3,-2,4,-8,-3,1,2,-6,-1,10,6,8,-9,9,3,1],[-3,-4,2,-7,-5,-1,-10,-1,-7,-5,-7,2,-1,9,6,-10],[10,-5,-8,-1,5,-7,-8,-8,-9,7,-5,-1,1,-10,9,7],[-2,4,-9,2,-7,-8,9,-10,-8,4,8,-10,5,-8,-8,4],[9,1,-2,-9,3,-4,5,1,-2,7,-10,9,-6,10,1,-7],[1,-8,2,2,7,10,-9,-5,7,1,10,-3,-8,-2,6,-1],[7,1,-7,5,-6,-5,-7,6,-2,-1,10,9,-8,10,10,2],[3,5,4,-5,6,-7,-8,-6,1,-3,3,8,-2,-5,10,-10],[-3,-2,-6,9,-6,-6,9,-7,1,-9,1,-4,-8,7,-10,-10],[1,-10,-10,10,3,-10,-10,-3,6,-3,-1,-4,-10,8,6,-1],[-1,-2,9,-7,-8,5,6,8,1,-3,-10,3,5,-10,-9,-8],[1,1,3,-2,-7,-8,-8,6,-10,2,-5,-10,6,3,-10,-6],[-10,10,-5,4,-3,6,1,-9,-3,2,7,8,3,-9,-2,-5],[1,8,10,-7,-6,-4,-5,9,5,-5,3,-8,-7,-9,-3,3],[-10,10,-3,-2,-10,-8,-1,-2,-6,1,-2,-8,-9,8,-3,-7]], dtype = "uint8")#candidate|794|(15, 16)|const|uint8
bop_795 = relay.add(var_793.astype('uint8'), relay.reshape(const_794.astype('uint8'), relay.shape_of(var_793))) # shape=(15, 16)
uop_801 = relay.asin(bop_795.astype('float32')) # shape=(15, 16)
uop_803 = relay.erf(uop_801.astype('float64')) # shape=(15, 16)
bop_808 = relay.mod(uop_801.astype('float64'), relay.reshape(bop_795.astype('float64'), relay.shape_of(uop_801))) # shape=(15, 16)
bop_813 = relay.subtract(uop_803.astype('int8'), relay.reshape(var_793.astype('int8'), relay.shape_of(uop_803))) # shape=(15, 16)
bop_816 = relay.left_shift(bop_813.astype('uint32'), relay.reshape(uop_801.astype('uint32'), relay.shape_of(bop_813))) # shape=(15, 16)
output = relay.Tuple([bop_808,bop_816,])
output2 = relay.Tuple([bop_808,bop_816,])
func_824 = relay.Function([var_793,], output)
mod['func_824'] = func_824
mod = relay.transform.InferType()(mod)
mutated_mod['func_824'] = func_824
mutated_mod = relay.transform.InferType()(mutated_mod)
var_825 = relay.var("var_825", dtype = "uint8", shape = (15, 16))#candidate|825|(15, 16)|var|uint8
func_824_call = mutated_mod.get_global_var('func_824')
call_826 = func_824_call(var_825)
output = call_826
func_827 = relay.Function([var_825], output)
mutated_mod['func_827'] = func_827
mutated_mod = relay.transform.InferType()(mutated_mod)
func_308_call = mod.get_global_var('func_308')
func_309_call = mutated_mod.get_global_var('func_309')
call_832 = func_308_call()
call_833 = func_308_call()
uop_834 = relay.rsqrt(call_832.astype('float32')) # shape=(7, 2, 7)
uop_836 = relay.rsqrt(call_833.astype('float32')) # shape=(7, 2, 7)
var_837 = relay.var("var_837", dtype = "float32", shape = (7, 2, 7))#candidate|837|(7, 2, 7)|var|float32
bop_838 = relay.divide(uop_834.astype('float32'), relay.reshape(var_837.astype('float32'), relay.shape_of(uop_834))) # shape=(7, 2, 7)
bop_841 = relay.divide(uop_836.astype('float32'), relay.reshape(var_837.astype('float32'), relay.shape_of(uop_836))) # shape=(7, 2, 7)
bop_843 = relay.subtract(uop_834.astype('uint64'), relay.reshape(bop_838.astype('uint64'), relay.shape_of(uop_834))) # shape=(7, 2, 7)
bop_846 = relay.subtract(uop_836.astype('uint64'), relay.reshape(bop_841.astype('uint64'), relay.shape_of(uop_836))) # shape=(7, 2, 7)
bop_851 = relay.equal(bop_838.astype('bool'), relay.reshape(var_837.astype('bool'), relay.shape_of(bop_838))) # shape=(7, 2, 7)
bop_854 = relay.equal(bop_841.astype('bool'), relay.reshape(var_837.astype('bool'), relay.shape_of(bop_841))) # shape=(7, 2, 7)
output = relay.Tuple([bop_843,bop_851,])
output2 = relay.Tuple([bop_846,bop_854,])
func_855 = relay.Function([var_837,], output)
mod['func_855'] = func_855
mod = relay.transform.InferType()(mod)
var_856 = relay.var("var_856", dtype = "float32", shape = (7, 2, 7))#candidate|856|(7, 2, 7)|var|float32
output = func_855(var_856)
func_857 = relay.Function([var_856], output)
mutated_mod['func_857'] = func_857
mutated_mod = relay.transform.InferType()(mutated_mod)
func_28_call = mod.get_global_var('func_28')
func_30_call = mutated_mod.get_global_var('func_30')
call_879 = func_28_call()
call_880 = func_28_call()
func_514_call = mod.get_global_var('func_514')
func_516_call = mutated_mod.get_global_var('func_516')
call_894 = relay.TupleGetItem(func_514_call(), 0)
call_895 = relay.TupleGetItem(func_516_call(), 0)
output = relay.Tuple([call_879,call_894,])
output2 = relay.Tuple([call_880,call_895,])
func_899 = relay.Function([], output)
mod['func_899'] = func_899
mod = relay.transform.InferType()(mod)
mutated_mod['func_899'] = func_899
mutated_mod = relay.transform.InferType()(mutated_mod)
func_899_call = mutated_mod.get_global_var('func_899')
call_900 = func_899_call()
output = call_900
func_901 = relay.Function([], output)
mutated_mod['func_901'] = func_901
mutated_mod = relay.transform.InferType()(mutated_mod)
const_908 = relay.const([[[4.717581,-2.232576,9.375602,-3.831829,2.730878,7.352245,-7.412136,-7.102223,8.392691,-8.830313],[-5.280659,-5.480235,6.811000,-8.822816,-1.412810,3.214062,6.156252,-6.203376,-2.643363,4.918939],[0.568956,4.990695,6.856085,-0.917713,2.421605,6.854674,0.701105,-1.279290,8.153663,7.420400]],[[-7.691332,5.250923,-6.187476,-6.565543,-8.996339,-8.474345,1.025571,-9.746333,6.544436,8.278620],[4.613983,-4.088452,5.823491,-0.364498,1.194038,-2.577117,-8.256536,2.796390,3.855581,3.208607],[-7.262676,1.343403,4.703375,-3.241637,-0.745001,-2.401925,-1.121995,7.407076,8.851289,-8.252805]],[[3.808314,6.462136,1.666357,-5.878402,-6.570200,-5.055620,5.753202,-6.519349,2.996454,5.381522],[0.403521,-3.724700,4.635105,6.332502,2.718792,8.212537,-6.417505,-2.462551,-2.125589,-4.231449],[-8.648007,7.100477,-7.189139,7.939588,-0.252691,4.387852,-5.513169,0.756089,3.778089,-1.285584]],[[-8.212682,4.837845,-7.538133,-8.375007,-8.603628,-4.186238,-6.030266,-3.661428,4.696383,-3.327926],[0.908847,0.425593,1.200695,9.103115,5.109834,2.446445,3.733573,-5.734846,-3.205995,-6.701301],[8.613015,-5.674771,-9.151291,-9.742604,-1.084912,2.868285,4.838015,8.577032,0.151618,2.659466]],[[-0.530466,0.654258,-9.732048,-0.098509,-5.597073,5.303966,1.630793,4.930410,8.690040,9.554110],[6.730457,9.003082,-9.903910,3.982865,0.075185,-3.844161,-7.845388,7.249471,-3.238704,4.908036],[2.283614,-4.455581,-4.084857,-5.374634,-9.666632,2.115287,2.677798,-1.051187,2.131881,7.951168]],[[-0.903053,3.650769,2.222438,1.324069,-1.017075,5.161782,-0.872543,-3.595736,1.795331,-5.037943],[-8.379544,9.483978,-0.168247,6.850806,-3.803524,-8.786958,5.173790,0.835213,-0.860718,-0.462280],[9.251551,-0.032095,2.281785,9.878469,-6.815109,-7.770633,5.642668,-9.362398,0.011816,-6.776254]],[[-2.661968,1.813670,-9.087997,8.351680,7.570700,5.413356,3.022667,-0.527304,-0.743012,7.571081],[8.688656,3.860778,-9.978531,-1.284661,-2.270100,4.199167,2.739736,-1.193638,8.563656,7.892170],[0.822300,8.850669,-9.501404,6.419554,4.314460,1.751262,8.321909,-0.251385,-1.755606,6.584946]],[[1.465767,-9.199088,4.278605,-3.136676,-6.349722,-5.469919,-9.002286,-6.287926,4.274101,4.245013],[-3.890140,-9.546989,7.538548,2.396354,1.380390,-6.363547,4.870445,-4.504204,4.481000,3.017797],[-6.083775,1.015265,-8.417463,9.602434,-4.673751,-7.307547,-7.376120,-0.758486,7.670301,7.199750]],[[-0.483379,9.688827,-8.601970,6.628457,-0.003112,5.580202,-2.884278,1.641746,-0.199620,-8.853175],[0.175983,-9.631761,7.400515,-7.907228,-4.851017,-8.933088,4.075272,6.433127,6.930528,-0.466913],[5.937203,-9.436467,-3.804964,-7.510249,-6.845365,9.724921,-5.057748,6.540846,-2.058198,-2.717384]],[[-8.392883,-2.245337,5.314278,4.020991,-8.657032,-3.499113,-4.200640,5.925378,6.941642,5.795687],[-6.953681,8.657522,-6.005018,8.911394,-8.923978,-0.002351,-3.367305,1.127894,-8.619010,-2.159596],[-6.778139,-9.947725,1.318830,4.380865,-5.552722,-4.391401,-3.952865,9.075172,5.308496,9.260504]],[[-6.661100,-2.971634,-4.114050,-9.476653,-6.923820,8.953273,-8.728724,6.370288,2.224599,-8.380372],[-6.108321,6.916580,-1.472716,3.821918,8.256918,-6.169517,-4.187975,-9.359163,-4.093569,7.628403],[1.173323,5.886459,5.091169,4.900416,0.342674,-6.467018,-6.787509,-9.762613,-6.805307,-4.385066]],[[4.145341,2.055905,5.426823,-0.526824,7.195281,5.566024,5.392395,-4.463966,0.141003,7.102662],[9.753730,-1.436289,9.409433,-2.817562,2.246163,2.048496,8.082594,-3.390364,-1.196008,-9.334149],[1.969230,-0.263450,-1.278100,6.342192,-4.876956,6.722604,-7.765315,-0.585361,-6.765012,1.577530]]], dtype = "float64")#candidate|908|(12, 3, 10)|const|float64
uop_909 = relay.asinh(const_908.astype('float64')) # shape=(12, 3, 10)
bop_911 = relay.bitwise_xor(uop_909.astype('int64'), relay.reshape(const_908.astype('int64'), relay.shape_of(uop_909))) # shape=(12, 3, 10)
output = bop_911
output2 = bop_911
func_918 = relay.Function([], output)
mod['func_918'] = func_918
mod = relay.transform.InferType()(mod)
output = func_918()
func_919 = relay.Function([], output)
mutated_mod['func_919'] = func_919
mutated_mod = relay.transform.InferType()(mutated_mod)
var_928 = relay.var("var_928", dtype = "float32", shape = (8, 3))#candidate|928|(8, 3)|var|float32
const_929 = relay.const([[4.421022,5.723089,-3.058739],[5.167427,-8.136981,-4.618222],[2.213671,-4.544215,-1.517753],[2.679188,8.454073,3.367490],[3.109485,2.374489,2.438718],[6.278591,-4.408333,-3.514728],[-2.851122,-6.233137,-0.040379],[6.212550,8.116300,-2.232336]], dtype = "float32")#candidate|929|(8, 3)|const|float32
bop_930 = relay.divide(var_928.astype('float32'), relay.reshape(const_929.astype('float32'), relay.shape_of(var_928))) # shape=(8, 3)
output = relay.Tuple([bop_930,])
output2 = relay.Tuple([bop_930,])
func_938 = relay.Function([var_928,], output)
mod['func_938'] = func_938
mod = relay.transform.InferType()(mod)
mutated_mod['func_938'] = func_938
mutated_mod = relay.transform.InferType()(mutated_mod)
var_939 = relay.var("var_939", dtype = "float32", shape = (8, 3))#candidate|939|(8, 3)|var|float32
func_938_call = mutated_mod.get_global_var('func_938')
call_940 = func_938_call(var_939)
output = call_940
func_941 = relay.Function([var_939], output)
mutated_mod['func_941'] = func_941
mutated_mod = relay.transform.InferType()(mutated_mod)
var_953 = relay.var("var_953", dtype = "uint64", shape = ())#candidate|953|()|var|uint64
var_954 = relay.var("var_954", dtype = "uint64", shape = (7, 13, 1))#candidate|954|(7, 13, 1)|var|uint64
bop_955 = relay.bitwise_or(var_953.astype('uint64'), var_954.astype('uint64')) # shape=(7, 13, 1)
func_405_call = mod.get_global_var('func_405')
func_408_call = mutated_mod.get_global_var('func_408')
const_966 = relay.const([5.956704,-1.635256,6.021917,0.862754,-7.667804,1.707462,-6.514948,3.677032,-0.306192,-0.262666,-0.608755,0.065538,8.391056,-0.217704,-1.053657,7.391624,-0.282306,-2.536141,-8.937201,-7.877794,8.563270,-7.576720,5.107255,-4.208905,-9.420099,6.671108,-3.964677,3.567347,-7.184111,-9.241046,8.572069,-5.668784,2.098352,7.963697,2.408498,5.092422,3.538844,-0.298000,4.791597,3.379835,4.933903,-4.877187,7.742238,-6.928002,2.981283,-7.060054,-1.107899,-5.969178,-9.047771,1.270032,1.749807,-9.712485,5.838444,6.364783,-8.120673,-8.329172,5.078402,1.408001,-7.411444,-6.111800,7.243603,-7.988901,-5.149068,5.607459,3.299082,-0.983684,3.884008,0.400568,7.436038,0.982951,0.780173,-6.247828,8.794827,0.858493,5.936140,0.964030,2.347625,-7.921425,6.809340,-8.681233,-5.812769,9.855710,6.643470,-6.644064,-5.319409,-9.599854,0.934343,-1.527459,9.350457,-1.598213,-1.943022,1.890682,-9.443375,0.478209,3.701760,-4.568094,-4.082045,-1.987689,-2.543901,-3.741570,-9.082296,4.443107,3.725426,-5.972318,5.045870,8.994550,2.753916,9.674660,-7.352610,8.643922,-9.497031,-3.584423,1.422299,8.077012,6.690667,-9.000983,-8.275293,-7.368338,-9.847011,-8.828370,6.848222,2.724796,-8.118020,-9.937220,5.964548,1.239272,4.190449,-2.983380,-9.414762,1.704916,9.010873,8.664552,5.502383,-2.037023,1.777016,4.337081,-1.347251,8.823520,-8.187894,-0.857190,8.813616,7.693050,5.976293,3.324804,1.010022,2.158612,3.721147,4.926953,-6.527776,-7.268987,-9.734073,3.841069,-2.997872,-7.180460,-6.594228,-9.435796,-3.381235,0.145414,5.960543,8.389060,9.426125,6.486402,9.532625,8.898903,-8.245158,8.344766,8.238868,-6.375763,1.811341,-8.881765,5.286498,1.921137,5.208688,8.017091,-8.629486,3.502840,7.463301,-1.438642,4.509857,2.887512,3.986470,4.691363,8.984796,-7.740825,-8.656337,-3.677090,2.234316,0.121565,-7.266478,2.280172,2.641991,-5.089444,7.381421,6.118468,-7.455864,3.101405,-1.035087,8.759473,-4.432691,-6.319380,-5.388925,-4.499517,4.154828,-1.250302,-7.035433,-6.671684,6.800990,-2.703217,9.230218,7.643998,-7.907009,5.882349,3.449164,-8.767547,-4.338273,-5.705777,-6.396596,-0.250321,-0.725306,3.951309,-3.262742,-0.424878,6.121055,-4.380476,1.850128,-0.861648,-9.174121,-7.009246,-7.879839,6.879046,3.711190,-4.823341,-9.849746,0.696730,1.708644,4.120730,-8.691591,0.435627,9.093368,-3.317551,-4.774752,-7.276143,-8.925657,-7.890369,-2.886547,6.226775,-8.864197,6.066545,-1.219693,3.081326,3.492096,8.103755,4.679752,2.056346,1.500003,3.196882,5.715942,-0.239055,-0.839062,-5.710248,3.025309,-8.869368,6.226283,-5.646492,9.209477,-2.165517,6.160438,-0.521248,-3.137167,5.595267,-9.278896,5.618135,-9.006279,1.422278,7.648367,6.434855,-7.322141,-7.972648,0.060787,9.885790,-1.276691,-6.058081,-7.047098,-1.039959,-7.509223,-3.463348,-0.912756,-8.708965,6.577320,6.623694,-8.320945,8.422594,4.284310,-9.041502,8.431372,7.742107,1.455629,7.727799,-3.991845,6.843305,8.703912,0.220799,4.986719,-0.971851,-9.683727,5.218014,1.628318,0.897838,-0.770743,6.369940,6.065998,-7.932995,-7.595943,-6.943365,0.950052,-1.042157,2.927842,4.500462,2.808089,-8.221934,7.626690,-7.244402,-0.188961,4.625131,-7.839111,-9.897809,2.433165,-9.447758,-4.910005,9.072724,-5.981279,-9.129966,3.137611,2.725820,-2.107855,-0.430025,5.651648,-1.986218,-7.826054,3.498079,-9.586567,9.012092,-3.421188,-3.288384,-9.756680,-3.294749,2.389307,5.790520,-1.034131,1.844939,-0.732741,4.274910,2.379238,9.074365,2.006089,-6.451257,6.194204,-6.889485,3.912106,-1.608227,-3.719608,8.027699,-2.985002,-8.443905,2.214212,1.941928,-8.666392,5.422186,-6.802467,8.369470,8.906957,8.156915,4.501545,-7.930371,-3.975869,5.058542,-1.334629,-4.656447,2.040451,2.711025,3.799050,-8.526593,6.953468,7.684393,-2.787065,-3.388949,-7.769258,-3.136101,0.271588,-4.766863,-9.547247,-0.922248,-2.612783,3.928826,5.351638,-6.441591,2.926946,-3.890272,5.212450,-2.885314,6.252842,8.313103,-8.030887,7.584074,2.438800,-2.380393,3.438882,-4.685151,2.431513,8.184527,-0.161969,8.619900,-9.316394,0.454039,3.202384,-1.503008,-7.821971,-1.683400,1.179912,-0.511598,-2.144979,-0.990563,8.204721,5.542993,-9.534856,1.642429,1.755197,-9.052585,8.426209,6.367165,3.758523,0.621155,0.475488,6.288082,3.654148,0.373041,-8.806823,-4.151735,-1.281017,-4.654557,-8.729572,-2.539502,8.203501,-1.406840,-9.868542,5.552371,8.914727,7.593366,9.012181,4.321948,-6.686708,-2.763891,3.396394,-9.756323,-9.648446,-7.014753,-4.548210,-6.237905,-8.351023,-6.928652,-7.320509,-4.371037,-5.755851,9.844437,-3.034875,5.908487,1.346286,6.992131,-2.858761,7.953764,0.313096,7.855954,-5.684110,1.577758,-7.524008,4.029122,2.959977,-9.644091,4.947581,7.970965,1.656681,-3.705929,-4.697661,1.529004,3.927800,-8.216560,-7.765932,-4.418910,2.877405,4.951309,-0.143405,8.380081,3.973549,6.426356,5.431856,-4.793330,1.782483,4.674600,5.469647,-0.841407,2.682897,3.693625,6.224227,-7.048449,5.703573,-6.170065,-0.859727,7.610360,-5.134438,-2.486634,-7.478639,-8.355233,4.630883,0.636108,-2.557918,2.837529,-7.490224,2.587172,9.475321,3.001989,-9.195440,-8.423566,7.023695,-0.072269,-2.983744,7.664579,0.936374,8.468129,6.957734,0.088028,-0.795787,-0.903683,3.729787,-2.807846,9.582502,5.776364,-0.677029,2.634886,-1.055170,1.440465,-9.864601,1.493031,-5.116567,7.731597,7.773002,5.437265,6.069865,7.420604,4.602927,3.743137,7.360339,-9.388804,-7.542746,3.058478,3.602102,-3.078117,3.436016,-1.515653,-3.583740,0.753278,-8.084757,1.948062,-3.800041,4.519502,3.802514,9.500620,7.236402,-7.945387,5.581876,-1.674386,-5.638146,-0.407654,-3.284838,6.010454,-3.718846,9.606756,1.073933,9.785687,5.622900,7.770770,1.411304,7.620795,2.575466,0.795794,9.814582,5.585016,-7.461182,7.630546,-1.787511,8.055505,0.298522,-0.970639,9.740541,6.328414,-6.533026,2.779044,1.163970,-2.583563,-2.824068,4.260803,-4.153118,8.667079,-3.047220,3.089696,7.176237,-9.029729,0.535762,4.430979,-0.886947,6.611759,-0.262456,-6.634531,0.778642,-8.084224,-3.387461,3.893072,-6.546447,4.199909,3.039799,-1.643293,2.116887,-7.917462,4.960773,-8.560142,-8.699421,-5.222986,-9.041705,-5.491318,7.629362,-9.104361,-7.394909,-5.423440,-7.526835,4.664129,9.018830,6.212136,-6.548273,2.617414,4.257647,7.858459,-9.023576,-3.318742,7.909104,-6.949031,8.140985,-0.423554,9.175518,9.366950,5.938215,6.133199,-5.940915,4.885637,-1.300095,-2.438158,-6.895965,8.109283,0.421595,-2.923632,-0.164316,0.212272,7.017082,2.054626,3.563984,-7.777816,-7.302389,9.116453,-3.426083,7.762990,3.589721,8.975367,-5.934098,-7.959455], dtype = "float64")#candidate|966|(672,)|const|float64
call_965 = relay.TupleGetItem(func_405_call(relay.reshape(const_966.astype('float64'), [6, 16, 7])), 1)
call_967 = relay.TupleGetItem(func_408_call(relay.reshape(const_966.astype('float64'), [6, 16, 7])), 1)
uop_969 = relay.atanh(bop_955.astype('float64')) # shape=(7, 13, 1)
bop_971 = relay.multiply(const_966.astype('float32'), bop_955.astype('float32')) # shape=(7, 13, 672)
func_514_call = mod.get_global_var('func_514')
func_516_call = mutated_mod.get_global_var('func_516')
call_974 = relay.TupleGetItem(func_514_call(), 0)
call_975 = relay.TupleGetItem(func_516_call(), 0)
bop_976 = relay.not_equal(uop_969.astype('bool'), relay.reshape(bop_955.astype('bool'), relay.shape_of(uop_969))) # shape=(7, 13, 1)
output = relay.Tuple([call_965,bop_971,call_974,bop_976,])
output2 = relay.Tuple([call_967,bop_971,call_975,bop_976,])
func_979 = relay.Function([var_953,var_954,], output)
mod['func_979'] = func_979
mod = relay.transform.InferType()(mod)
mutated_mod['func_979'] = func_979
mutated_mod = relay.transform.InferType()(mutated_mod)
func_979_call = mutated_mod.get_global_var('func_979')
var_981 = relay.var("var_981", dtype = "uint64", shape = ())#candidate|981|()|var|uint64
var_982 = relay.var("var_982", dtype = "uint64", shape = (7, 13, 1))#candidate|982|(7, 13, 1)|var|uint64
call_980 = func_979_call(var_981,var_982,)
output = call_980
func_983 = relay.Function([var_981,var_982,], output)
mutated_mod['func_983'] = func_983
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1004 = relay.const(10, dtype = "uint16")#candidate|1004|()|const|uint16
var_1005 = relay.var("var_1005", dtype = "uint16", shape = (15, 13, 4))#candidate|1005|(15, 13, 4)|var|uint16
bop_1006 = relay.bitwise_xor(const_1004.astype('uint16'), var_1005.astype('uint16')) # shape=(15, 13, 4)
output = relay.Tuple([bop_1006,])
output2 = relay.Tuple([bop_1006,])
func_1009 = relay.Function([var_1005,], output)
mod['func_1009'] = func_1009
mod = relay.transform.InferType()(mod)
var_1010 = relay.var("var_1010", dtype = "uint16", shape = (15, 13, 4))#candidate|1010|(15, 13, 4)|var|uint16
output = func_1009(var_1010)
func_1011 = relay.Function([var_1010], output)
mutated_mod['func_1011'] = func_1011
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1083 = relay.var("var_1083", dtype = "float32", shape = (3, 11))#candidate|1083|(3, 11)|var|float32
uop_1084 = relay.log10(var_1083.astype('float32')) # shape=(3, 11)
func_677_call = mod.get_global_var('func_677')
func_681_call = mutated_mod.get_global_var('func_681')
var_1090 = relay.var("var_1090", dtype = "float64", shape = (7, 1))#candidate|1090|(7, 1)|var|float64
const_1091 = relay.const([-4.550760,-2.189022,7.634986,2.633633,3.165751,-5.346698,5.933173,9.122244,1.909375,-3.419295,-9.079108,9.929344,-2.093416,2.168967,-9.118725,4.462200,7.454080,6.510798,-7.468315,-7.964082,-6.684725,-3.781228,9.761798,2.654151,-0.339682,-0.303063,-3.641335,2.209021,3.346561,-1.531504,-9.305917,7.833011,1.211455,-1.050208,2.977707,3.839283,0.994286,2.670587,-8.000112,7.532731,-6.952555,6.696045,6.371713,-6.374311,-7.237994,-5.786331,-8.019675,-2.577932,-2.824483,5.970591,9.869029,9.558888,4.760898,0.563726,6.873497,-0.125454,-7.280003,-3.213750,-9.427826,7.579514,-5.811166,9.811259,3.203562,-0.994149,-7.861384,3.046834,5.833748,-8.193963,3.557490,-0.329869,-3.172398,-7.962600,-9.669330,-7.887067,6.962081,7.132678,3.407082,-4.877882,-8.505058,-8.236161,3.150434,0.151396,-4.593241,5.115718,5.288670,3.828097,-3.116706,1.500190,-1.845940,3.740698,0.406585,6.428405,4.927387,1.126634,8.263032,-2.719687,0.054558,4.132259], dtype = "float32")#candidate|1091|(98,)|const|float32
call_1089 = relay.TupleGetItem(func_677_call(relay.reshape(var_1090.astype('float64'), [7,]), relay.reshape(const_1091.astype('float32'), [7, 2, 7]), ), 0)
call_1092 = relay.TupleGetItem(func_681_call(relay.reshape(var_1090.astype('float64'), [7,]), relay.reshape(const_1091.astype('float32'), [7, 2, 7]), ), 0)
uop_1094 = relay.cos(uop_1084.astype('float64')) # shape=(3, 11)
func_979_call = mod.get_global_var('func_979')
func_983_call = mutated_mod.get_global_var('func_983')
var_1097 = relay.var("var_1097", dtype = "uint64", shape = ())#candidate|1097|()|var|uint64
const_1098 = relay.const([-4,5,6,-3,7,8,-4,-7,-2,7,9,-1,1,-8,8,-3,8,4,9,-4,9,6,6,2,2,-9,-1,-1,6,3,5,-6,-2,-6,10,-1,9,-4,-3,-6,-8,-6,-3,-3,-6,-3,-2,3,-1,-7,8,-2,5,5,-2,3,-4,-9,7,8,-8,-4,1,-4,-8,-3,-1,5,-1,-6,-1,-5,7,6,7,9,6,-6,3,-9,-3,7,-7,1,-5,3,5,3,-1,10,-2], dtype = "uint64")#candidate|1098|(91,)|const|uint64
call_1096 = relay.TupleGetItem(func_979_call(relay.reshape(var_1097.astype('uint64'), []), relay.reshape(const_1098.astype('uint64'), [7, 13, 1]), ), 1)
call_1099 = relay.TupleGetItem(func_983_call(relay.reshape(var_1097.astype('uint64'), []), relay.reshape(const_1098.astype('uint64'), [7, 13, 1]), ), 1)
uop_1100 = relay.erf(uop_1084.astype('float64')) # shape=(3, 11)
func_164_call = mod.get_global_var('func_164')
func_168_call = mutated_mod.get_global_var('func_168')
const_1104 = relay.const([8.703971,0.375829,-4.645482,6.953536,5.544409,-5.952110,-6.094150,9.232044,6.791940,3.652058,5.103881,-8.281764,-3.264726,-4.856211,-3.722447,-6.211603,8.276580,3.321516,6.390954,8.958188,5.176949,-4.155558,3.608412,-0.912026,-3.579584,2.626958,-5.722027], dtype = "float32")#candidate|1104|(27,)|const|float32
call_1103 = relay.TupleGetItem(func_164_call(relay.reshape(var_1097.astype('float32'), []), relay.reshape(const_1104.astype('float32'), [3, 9]), ), 2)
call_1105 = relay.TupleGetItem(func_168_call(relay.reshape(var_1097.astype('float32'), []), relay.reshape(const_1104.astype('float32'), [3, 9]), ), 2)
bop_1110 = relay.add(const_1104.astype('int64'), var_1097.astype('int64')) # shape=(27,)
func_364_call = mod.get_global_var('func_364')
func_367_call = mutated_mod.get_global_var('func_367')
call_1117 = relay.TupleGetItem(func_364_call(relay.reshape(var_1090.astype('int16'), [7,])), 0)
call_1118 = relay.TupleGetItem(func_367_call(relay.reshape(var_1090.astype('int16'), [7,])), 0)
func_58_call = mod.get_global_var('func_58')
func_59_call = mutated_mod.get_global_var('func_59')
call_1120 = relay.TupleGetItem(func_58_call(), 0)
call_1121 = relay.TupleGetItem(func_59_call(), 0)
func_274_call = mod.get_global_var('func_274')
func_275_call = mutated_mod.get_global_var('func_275')
call_1122 = func_274_call()
call_1123 = func_274_call()
uop_1125 = relay.log(uop_1084.astype('float64')) # shape=(3, 11)
uop_1135 = relay.log2(call_1122.astype('float32')) # shape=(5, 9)
uop_1137 = relay.log2(call_1123.astype('float32')) # shape=(5, 9)
bop_1140 = relay.bitwise_xor(uop_1094.astype('int32'), var_1097.astype('int32')) # shape=(3, 11)
var_1151 = relay.var("var_1151", dtype = "int32", shape = (3, 11))#candidate|1151|(3, 11)|var|int32
bop_1152 = relay.mod(bop_1140.astype('float32'), relay.reshape(var_1151.astype('float32'), relay.shape_of(bop_1140))) # shape=(3, 11)
uop_1159 = relay.atan(bop_1110.astype('float64')) # shape=(27,)
var_1162 = relay.var("var_1162", dtype = "float64", shape = (3, 11))#candidate|1162|(3, 11)|var|float64
bop_1163 = relay.minimum(uop_1125.astype('int32'), relay.reshape(var_1162.astype('int32'), relay.shape_of(uop_1125))) # shape=(3, 11)
output = relay.Tuple([call_1089,var_1090,const_1091,call_1096,const_1098,uop_1100,call_1103,call_1117,call_1120,uop_1135,bop_1152,uop_1159,bop_1163,])
output2 = relay.Tuple([call_1092,var_1090,const_1091,call_1099,const_1098,uop_1100,call_1105,call_1118,call_1121,uop_1137,bop_1152,uop_1159,bop_1163,])
func_1172 = relay.Function([var_1083,var_1090,var_1097,var_1151,var_1162,], output)
mod['func_1172'] = func_1172
mod = relay.transform.InferType()(mod)
mutated_mod['func_1172'] = func_1172
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1172_call = mutated_mod.get_global_var('func_1172')
var_1174 = relay.var("var_1174", dtype = "float32", shape = (3, 11))#candidate|1174|(3, 11)|var|float32
var_1175 = relay.var("var_1175", dtype = "float64", shape = (7, 1))#candidate|1175|(7, 1)|var|float64
var_1176 = relay.var("var_1176", dtype = "uint64", shape = ())#candidate|1176|()|var|uint64
var_1177 = relay.var("var_1177", dtype = "int32", shape = (3, 11))#candidate|1177|(3, 11)|var|int32
var_1178 = relay.var("var_1178", dtype = "float64", shape = (3, 11))#candidate|1178|(3, 11)|var|float64
call_1173 = func_1172_call(var_1174,var_1175,var_1176,var_1177,var_1178,)
output = call_1173
func_1179 = relay.Function([var_1174,var_1175,var_1176,var_1177,var_1178,], output)
mutated_mod['func_1179'] = func_1179
mutated_mod = relay.transform.InferType()(mutated_mod)
func_308_call = mod.get_global_var('func_308')
func_309_call = mutated_mod.get_global_var('func_309')
call_1197 = func_308_call()
call_1198 = func_308_call()
func_1009_call = mod.get_global_var('func_1009')
func_1011_call = mutated_mod.get_global_var('func_1011')
const_1216 = relay.const([-6,-9,3,5,-5,6,3,6,6,8,-4,5,-10,8,4,-3,-8,-3,10,10,10,-5,-9,6,-2,-1,5,8,5,-3,-3,-9,1,-4,1,6,-10,-6,-6,4,-9,4,3,1,-8,-8,3,4,9,-6,-9,-6,7,-2,6,-1,-1,1,5,-3,-8,-3,-6,4,-4,10,5,6,7,5,2,-10,-8,-8,-3,-7,-9,2,9,5,-10,-7,-8,-9,1,-10,-9,-7,-1,2,-7,7,-9,-5,8,-2,-4,3,3,9,-3,6,-9,-1,-9,6,-1,-4,-3,1,-9,-10,-3,5,3,8,4,10,-7,6,5,4,7,8,-4,-3,-3,6,-6,-10,8,6,3,5,-6,-8,5,7,-9,-3,-6,-6,1,-5,-4,5,4,-3,-7,9,-1,6,-8,-7,-10,9,-1,4,-10,9,3,-5,-5,-6,-9,6,1,-4,-5,-7,3,2,3,-6,-5,7,8,9,-2,-6,9,9,-3,2,-5,-4,4,-2,2,-10,-10,-6,-8,-2,9,3,1,1,-6,2,3,10,2,4,8,2,10,-8,5,3,9,6,-8,4,2,-5,-3,-2,-7,-8,10,-6,-10,-3,6,10,9,-5,-5,-1,4,1,1,2,-10,6,2,2,-6,-8,-10,8,-6,-6,-2,7,-3,3,4,5,-6,5,4,-2,4,-3,-10,-4,5,-9,-9,5,5,-7,3,-2,-4,9,-4,-8,-2,-3,-5,-1,10,-9,6,-10,-2,-1,-10,6,-2,2,5,-4,-5,3,7,10,6,4,-3,-5,3,2,1,-9,-2,-8,-3,5,-1,-5,4,4,5,2,-6,5,-2,-3,4,5,5,2,-6,-5,5,7,-7,9,-1,-2,-7,6,-5,-2,3,2,9,-5,10,3,-9,-9,1,10,9,1,-2,-3,6,-5,-1,6,-10,-6,-10,-10,-9,-5,6,-6,-1,9,4,10,9,10,2,-1,-6,5,-8,-4,3,-1,9,4,-4,3,6,7,-9,-7,-2,3,7,-3,4,-4,-9,8,4,-5,-6,4,2,-9,-10,-1,-5,2,4,-7,-5,9,-7,1,10,10,8,10,-7,10,5,2,8,2,-1,2,9,1,10,-9,-2,8,5,10,9,1,-3,-4,7,5,-2,-8,-10,-10,5,-3,-10,-6,9,7,8,-1,-1,4,-8,7,-7,4,-6,-8,-6,7,-1,9,1,-7,-3,9,-1,1,-1,-1,5,-6,2,1,6,-3,3,7,9,-2,-10,6,6,-3,6,-7,-3,-4,-8,2,5,9,9,-3,-9,1,-9,-3,4,6,-9,-3,-6,7,1,6,-7,7,2,-6,-6,10,-4,2,8,8,-1,-2,-7,10,10,-6,-2,7,-3,-5,-10,8,-10,3,-8,-5,-1,5,8,6,3,7,4,-9,6,10,3,-1,-8,-10,5,-5,-4,4,6,-10,-1,4,10,4,1,4,-2,6,-1,-4,4,3,-2,10,7,8,-4,5,8,-1,-5,-5,-10,-7,-1,-7,2,3,-9,3,10,5,-4,1,4,-4,-7,-6,-4,-9,-5,10,-8,-1,-5,-2,6,2,-8,3,-4,-10,8,7,-10,4,3,-3,6,-8,8,5,-5,-5,9,6,-7,-2,4,-6,8,-2,-4,1,-8,-1,9,4,5,1,-7,5,3,6,9,-4,4,7,10,9,9,8,-8,-1,10,-4,9,1,-9,1,-1,-2,-8,2,-6,-8,1,-2,6,1,-7,3,6,-8,-2,-10,4,5,-2,-2,8,-5,3,9,1,7,6,-4,5,5,2,8,1,8,2,2,-9,8,-4,-3,-6,-5,-2,5,2,3,-7,-8,6,-2,7,8,-10,-7,-3,1,3,-2,-6,10,-8,2,6,4,7,8,-9,-9,3,5,-8,-7,-2,-6,5,6,9,-9,-7,4,-10,-7,1,9,-4,1,-3,-5,-7,-3,4,-6,-7,-7,1,-8,6,-1,3,-2,-6,-1,1,-6,-4,1,-10,3,5,10,1,-6,-5,-5,-8,-7,2,-5,-3,-1,10,7,10,-7,-1,-10,7,1,-4,-2,5,-9,5,-10,-5,-5,3,-6,3,-8], dtype = "uint16")#candidate|1216|(780,)|const|uint16
call_1215 = relay.TupleGetItem(func_1009_call(relay.reshape(const_1216.astype('uint16'), [15, 13, 4])), 0)
call_1217 = relay.TupleGetItem(func_1011_call(relay.reshape(const_1216.astype('uint16'), [15, 13, 4])), 0)
func_918_call = mod.get_global_var('func_918')
func_919_call = mutated_mod.get_global_var('func_919')
call_1218 = func_918_call()
call_1219 = func_918_call()
uop_1225 = relay.atan(call_1218.astype('float64')) # shape=(12, 3, 10)
uop_1227 = relay.atan(call_1219.astype('float64')) # shape=(12, 3, 10)
output = relay.Tuple([call_1197,call_1215,const_1216,uop_1225,])
output2 = relay.Tuple([call_1198,call_1217,const_1216,uop_1227,])
func_1230 = relay.Function([], output)
mod['func_1230'] = func_1230
mod = relay.transform.InferType()(mod)
output = func_1230()
func_1231 = relay.Function([], output)
mutated_mod['func_1231'] = func_1231
mutated_mod = relay.transform.InferType()(mutated_mod)
func_58_call = mod.get_global_var('func_58')
func_59_call = mutated_mod.get_global_var('func_59')
call_1240 = relay.TupleGetItem(func_58_call(), 0)
call_1241 = relay.TupleGetItem(func_59_call(), 0)
var_1258 = relay.var("var_1258", dtype = "int8", shape = (7, 2, 7))#candidate|1258|(7, 2, 7)|var|int8
bop_1259 = relay.less_equal(call_1240.astype('bool'), relay.reshape(var_1258.astype('bool'), relay.shape_of(call_1240))) # shape=(7, 2, 7)
bop_1262 = relay.less_equal(call_1241.astype('bool'), relay.reshape(var_1258.astype('bool'), relay.shape_of(call_1241))) # shape=(7, 2, 7)
output = relay.Tuple([bop_1259,])
output2 = relay.Tuple([bop_1262,])
func_1270 = relay.Function([var_1258,], output)
mod['func_1270'] = func_1270
mod = relay.transform.InferType()(mod)
var_1271 = relay.var("var_1271", dtype = "int8", shape = (7, 2, 7))#candidate|1271|(7, 2, 7)|var|int8
output = func_1270(var_1271)
func_1272 = relay.Function([var_1271], output)
mutated_mod['func_1272'] = func_1272
mutated_mod = relay.transform.InferType()(mutated_mod)
func_308_call = mod.get_global_var('func_308')
func_309_call = mutated_mod.get_global_var('func_309')
call_1302 = func_308_call()
call_1303 = func_308_call()
func_855_call = mod.get_global_var('func_855')
func_857_call = mutated_mod.get_global_var('func_857')
call_1305 = relay.TupleGetItem(func_855_call(relay.reshape(call_1302.astype('float32'), [7, 2, 7])), 0)
call_1306 = relay.TupleGetItem(func_857_call(relay.reshape(call_1302.astype('float32'), [7, 2, 7])), 0)
output = relay.Tuple([call_1302,call_1305,])
output2 = relay.Tuple([call_1303,call_1306,])
func_1313 = relay.Function([], output)
mod['func_1313'] = func_1313
mod = relay.transform.InferType()(mod)
output = func_1313()
func_1314 = relay.Function([], output)
mutated_mod['func_1314'] = func_1314
mutated_mod = relay.transform.InferType()(mutated_mod)
func_514_call = mod.get_global_var('func_514')
func_516_call = mutated_mod.get_global_var('func_516')
call_1321 = relay.TupleGetItem(func_514_call(), 0)
call_1322 = relay.TupleGetItem(func_516_call(), 0)
output = relay.Tuple([call_1321,])
output2 = relay.Tuple([call_1322,])
func_1332 = relay.Function([], output)
mod['func_1332'] = func_1332
mod = relay.transform.InferType()(mod)
mutated_mod['func_1332'] = func_1332
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1332_call = mutated_mod.get_global_var('func_1332')
call_1333 = func_1332_call()
output = call_1333
func_1334 = relay.Function([], output)
mutated_mod['func_1334'] = func_1334
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1230_call = mod.get_global_var('func_1230')
func_1231_call = mutated_mod.get_global_var('func_1231')
call_1335 = relay.TupleGetItem(func_1230_call(), 2)
call_1336 = relay.TupleGetItem(func_1231_call(), 2)
var_1339 = relay.var("var_1339", dtype = "uint16", shape = (780,))#candidate|1339|(780,)|var|uint16
bop_1340 = relay.left_shift(call_1335.astype('uint32'), relay.reshape(var_1339.astype('uint32'), relay.shape_of(call_1335))) # shape=(780,)
bop_1343 = relay.left_shift(call_1336.astype('uint32'), relay.reshape(var_1339.astype('uint32'), relay.shape_of(call_1336))) # shape=(780,)
func_899_call = mod.get_global_var('func_899')
func_901_call = mutated_mod.get_global_var('func_901')
call_1352 = relay.TupleGetItem(func_899_call(), 0)
call_1353 = relay.TupleGetItem(func_901_call(), 0)
bop_1359 = relay.floor_divide(bop_1340.astype('float32'), relay.reshape(var_1339.astype('float32'), relay.shape_of(bop_1340))) # shape=(780,)
bop_1362 = relay.floor_divide(bop_1343.astype('float32'), relay.reshape(var_1339.astype('float32'), relay.shape_of(bop_1343))) # shape=(780,)
func_918_call = mod.get_global_var('func_918')
func_919_call = mutated_mod.get_global_var('func_919')
call_1371 = func_918_call()
call_1372 = func_918_call()
var_1376 = relay.var("var_1376", dtype = "float32", shape = (780,))#candidate|1376|(780,)|var|float32
bop_1377 = relay.power(bop_1359.astype('float64'), relay.reshape(var_1376.astype('float64'), relay.shape_of(bop_1359))) # shape=(780,)
bop_1380 = relay.power(bop_1362.astype('float64'), relay.reshape(var_1376.astype('float64'), relay.shape_of(bop_1362))) # shape=(780,)
func_405_call = mod.get_global_var('func_405')
func_408_call = mutated_mod.get_global_var('func_408')
const_1383 = relay.const([-2.373289,6.187341,-8.645419,-7.786288,-1.832620,-3.095799,9.506373,-3.141535,-1.903838,3.102480,0.139421,-4.494829,-8.087584,6.512699,-5.796080,-0.574518,8.250662,-7.817888,5.357070,-2.194028,-2.234683,1.544008,-1.734083,8.609882,-3.458924,-9.372448,-0.749368,3.873207,-8.480286,-6.872278,4.872518,-7.482190,5.420410,-7.954302,9.142180,-9.686575,1.071524,0.479384,-0.025950,-0.283628,7.184422,-2.517871,-8.136790,-2.369241,-2.577635,3.621509,-0.351918,5.262094,5.119003,-3.581434,-3.620242,-5.211427,-4.945497,6.723718,-4.974824,-3.117187,-7.755487,1.710461,-8.848890,4.927671,0.423302,1.483086,-6.974433,2.741400,-5.021075,-0.698595,-1.466435,7.795831,-1.629751,1.785623,-6.611822,0.259862,-3.527771,7.269266,-6.828888,-5.486411,-6.119710,1.539330,-8.570379,-5.950569,-0.327608,9.479610,5.094117,-5.155278,9.508092,-3.989203,3.292290,-9.880097,-6.554232,-5.637795,-6.327702,-3.631085,-0.717445,-3.246465,-3.634022,-2.250794,9.454495,-7.015403,-4.765098,5.615319,-8.960457,0.974833,2.451081,-1.711864,-2.517489,-3.369441,3.559734,0.304889,2.233324,-8.144971,-7.976333,-6.372259,-7.439509,-9.337198,4.795609,-9.766061,4.316112,6.504533,0.348478,-5.324125,4.917402,-7.635377,-8.776684,-3.197151,3.167793,2.951505,6.589727,-7.485572,-1.768649,-4.090836,-8.578366,-6.268816,1.435710,-9.061565,4.402148,-4.326697,2.243156,1.273873,-4.586677,3.767286,-5.252071,6.602896,1.269571,9.676042,-4.008058,1.765121,-3.531082,-6.201477,-5.400753,-9.034943,0.480627,-6.806115,8.962589,-9.975238,5.196687,-6.884566,1.574088,-6.455362,8.368487,-5.559138,5.381498,-6.029981,8.003680,0.437525,3.069434,8.103685,-9.910089,3.976733,7.175544,6.694524,-2.394795,-4.713437,3.134207,-1.105804,-4.946725,-0.555262,-2.292908,3.051329,3.477468,9.991555,-6.592567,-1.701875,-3.090537,4.422143,3.675989,1.379302,-8.835877,3.731206,-4.464547,-2.968927,6.939649,-3.603970,1.984535,7.462888,3.348550,9.780338,-4.570026,-2.657987,2.135742,-5.571310,6.552473,-9.469041,-6.334859,2.805564,9.587958,0.308330,4.848381,9.409434,-5.724107,6.701877,6.163004,1.030410,-5.999643,9.829795,0.286745,3.053783,8.533405,-8.885649,5.518104,-7.838633,1.732994,9.383971,5.930967,3.134364,-1.287467,9.863503,8.442636,7.769577,6.322454,-6.758280,-6.633307,8.754242,5.965326,4.023883,5.043395,-7.739196,-8.604965,1.942242,-3.671847,2.669259,-2.438722,-5.711794,2.104992,3.252764,-7.300146,-6.384357,4.965347,-6.726071,5.109663,-1.177139,7.910703,-5.519048,-8.305647,-2.091243,-4.655393,7.875050,-1.382198,9.112122,8.407790,-4.877016,-5.454322,8.280894,-2.047689,-2.810922,9.486712,1.905465,1.555509,-8.967980,1.752994,-1.923849,-4.921428,-1.902189,-5.716699,1.665270,7.958828,0.941346,-0.135902,3.863813,6.025159,-9.296857,-5.253643,7.392775,6.450398,-2.955998,-1.486637,8.568402,-3.670269,-9.585641,1.565591,3.150744,2.626859,-4.116054,5.162368,9.089713,0.773371,5.013043,7.722729,-7.556729,7.100543,7.682129,9.093919,-1.169828,7.084795,-2.834929,-3.299214,6.528258,6.854984,7.715234,3.886602,7.638208,8.129726,8.514441,6.614524,3.056696,-6.833290,0.260885,7.084238,4.011995,-4.871149,5.503038,3.341741,-8.234250,-7.594327,4.587089,-3.450703,5.032396,-6.244645,-7.901549,-3.328646,-6.205638,8.455899,-2.270068,0.613991,6.547949,-1.739741,1.737011,6.819686,-6.555654,1.694025,0.387256,-7.438938,6.941428,6.555156,-1.621407,-9.973488,-1.264197,-6.066914,-8.658717,4.529674,8.258731,4.862770,4.410399,0.363344,-1.645565,-4.069947,-8.406904,-9.386048,8.559955,-4.038157,7.830308,-2.213134,-1.015289,7.757863,-2.089847,-1.128625,-7.808326,-1.656858,-6.215987,4.371532,4.032275,-5.522174,-8.443078,8.431913,7.378548,8.515240,-6.738368,-3.334818,3.744966,-9.999027,-4.288082,9.892312,-2.446499,5.651542,8.758812,3.890287,-5.181073,8.715367,0.388856,-3.526556,-8.151568,0.404440,1.497185,7.317244,4.445323,-8.271082,-0.421005,-7.814698,-4.755742,6.865663,-4.015773,-8.507552,-9.080640,5.024200,-4.931997,-7.634328,-3.903314,-9.487344,-4.731742,-8.031760,8.128310,0.846377,-3.978464,-5.810636,3.119722,8.091943,-9.109958,-2.575996,2.697429,-1.274194,3.054025,-2.855177,1.412874,6.775470,-2.118273,7.755349,2.293886,4.586397,9.382144,-9.689140,6.616360,-9.805695,4.729349,-5.138533,0.520092,-0.442539,-5.581055,-0.767028,9.615221,6.516212,0.165995,1.812660,6.155958,-5.351487,-8.926938,-0.473003,-8.053021,-0.549034,2.910951,-5.579957,3.518031,-8.656923,1.487995,4.896478,-0.536104,-5.515614,-2.481539,-0.497873,-0.342247,-6.564187,8.119007,-4.686125,3.056647,5.853218,-6.557219,2.374337,4.886117,7.328769,-5.009513,6.649218,0.412766,-8.945147,-4.689826,9.223625,-6.564640,8.456863,-0.546197,1.799068,-4.100741,2.796030,5.743800,4.028095,-3.225035,6.158938,5.451865,1.383898,5.810281,-8.922166,3.558637,-5.630426,9.045706,2.574903,-8.907773,-1.384959,-1.035600,4.466034,-1.307877,-4.055716,4.364018,-7.738460,-4.944956,6.817540,5.079967,3.376320,8.103661,-5.529614,-0.316988,8.549230,3.896962,1.090236,2.144647,7.877313,2.306450,-6.887468,6.476358,-8.806604,-1.742055,1.007201,1.963380,-8.132093,9.896527,-2.650500,6.744943,-9.808336,1.018125,-6.761310,-9.323037,-6.057159,3.740281,-2.685292,2.456516,-9.538603,-5.919259,-8.519091,9.694310,-1.553439,1.498331,-8.943792,-9.753952,4.104846,-4.529026,-5.193927,2.140897,7.609820,9.988303,-2.486253,-2.466390,7.747499,-6.611975,-7.583677,-1.312795,-1.061320,6.355549,-3.426162,8.371481,4.640365,7.777083,-8.556109,1.491334,6.997252,1.310613,2.346897,5.956362,-9.725838,-3.458156,1.219407,-7.426067,3.803356,-6.723308,8.605649,9.607511,6.993480,7.665373,-6.127873,1.595153,8.168225,2.301384,-0.828214,1.973155,-8.064731,-3.832460,1.577141,-5.484780,-4.527747,-0.755868,-1.065542,6.261530,0.414351,-3.511852,8.515333,2.248993,-2.462712,5.516682,8.140825,-9.231659,5.221231,5.059729,7.678467,1.259891,-4.026349,6.648429,5.222420,2.747103,4.831341,-2.930213,2.920595,-0.925767,-9.021112,5.230537,-0.798378,-5.521254,-0.139077,-6.358841,6.872106,1.166553,-1.406771,-9.474648,9.445772,-0.385669,5.784055,9.619229,-1.757214,8.693372,-3.606299,7.526416,-0.881399,-0.340288,7.984945,-6.486684,-8.660706,8.283238,-5.228551,-2.055256,7.106871,1.028268,-5.925282,6.017263,-5.218609,5.050255,3.209756,1.230860,-0.939150,-7.176890,9.693143,-6.929550,8.570367,-4.805667,-6.599987,1.567023,2.415612,-0.078861,-6.317702,-9.082644,-9.130523,5.450624,-9.355685,5.172230,-1.407503,2.638248,-8.748720,5.820165,3.198948,-5.203628,-2.823851,2.774566,-1.494534,1.410182,9.665192,6.265051,-3.917654,-8.786844,5.628259,5.080735], dtype = "float64")#candidate|1383|(672,)|const|float64
call_1382 = relay.TupleGetItem(func_405_call(relay.reshape(const_1383.astype('float64'), [6, 16, 7])), 0)
call_1384 = relay.TupleGetItem(func_408_call(relay.reshape(const_1383.astype('float64'), [6, 16, 7])), 0)
func_75_call = mod.get_global_var('func_75')
func_78_call = mutated_mod.get_global_var('func_78')
const_1386 = relay.const([-2.380423,-3.532107,-2.520294,3.021643,0.669726,-7.632201,3.422398,5.507785,6.954419,9.213610,-7.711334,3.508849,3.414284,-0.096695,3.021717,-8.985789,0.152127,9.807337,0.209930,-4.328837,-0.622758,4.744114,9.987345,9.668798,2.624988,7.978133,8.509235,-4.611412,1.489554,-0.603347,1.293154,-1.961896,6.304731,1.764652,5.416617,4.820758,-4.236161,6.963723,9.247247,-0.774802,2.365451,-6.185489,5.298372,6.667964,1.533806,8.009452,-3.061391,6.205513,-8.054151,-8.307697,-1.842565,7.123406,-3.999502,-5.762151,7.637548,0.856102,9.211596,5.615150,-0.184621,1.827628,-5.842504,-2.895902,3.604104,-5.255010,-8.515130,4.258491,-3.145281,5.617794,7.710083,-4.232145,1.310142,0.357644,6.585846,8.696494,-3.008581,7.517585,7.181377,7.243158,-4.738656,-3.208754,9.960208,7.523535,-3.118904,-9.867238,1.964563,-4.391414,-0.022652,3.099083,3.904276,3.620892,8.379821,-5.015536,1.513820,2.113652,-4.624699,-6.386514,4.018344,2.136393,1.979083,2.011820,2.140152,6.059934,-3.367666,3.464917,2.928274,8.174224,-4.301100,8.930810,3.179111,6.327473,2.249560,9.976646,6.085188,-0.406045,9.162724,5.279525,-9.200340,-9.286619,1.189562,-0.853220,5.463461,-3.320149,1.045465,7.784137,-7.770560,-8.191254,-4.753267,7.004716,5.105710,-2.519556,5.213007,0.154049,-7.096324,-0.886319,4.374914,-7.482802,-0.884948,-3.086184,6.892864,5.621866,-3.230291,6.556088,9.379161,1.679398,-8.526622,0.302896,1.968287,8.409454,2.193657,-8.730356,-4.335175,1.318961,4.315188,6.446024,0.296749,-0.791859,-3.320372,-7.518380,-8.670598,-1.490923,-2.260774,3.966798,-3.253683,8.902594,-1.192243,4.445884,9.401491,-2.669626,-0.694289,3.281914,-2.232170,-5.790146,2.793949,-5.398772,-8.493588,-7.036682,9.533882,-7.668619,9.749162,8.681447,1.410497,-2.023711,6.465144,1.823606,-7.105750,5.670480,0.981329,-1.036277,-1.048163,-5.213577,8.097940,4.779486,-4.517456,8.262214,-2.913106,-9.010385,3.663136,-9.196510,7.276504,-1.081724,-0.632565,-6.033508,5.367371,-3.263381,9.826683,-9.288985,7.035953,8.134056,-4.466551,9.914964,9.118609,-0.659581,2.171614,9.429147,6.599192,-0.428235,3.110356,8.663358,3.152023,2.618188,-4.069732,-2.390243,8.007243,-4.534426,-8.759104,-0.946939,0.227251,-2.020924,9.004949,1.794340,0.313335,-4.796602,-9.533603,-0.773293,1.976950,-7.038685,8.382056,-0.633890,5.999605,-1.752035,-2.219008,9.906093,-7.238030,-4.127358,-1.564501,-4.869629,-0.236790,-6.828267,-8.438860,-1.590053,-4.690518,8.969804,7.903874,8.159515,-8.378454,-9.824523,-4.988156,-4.871172,3.199605,9.471481,-2.279632,-6.210264,-8.670720,3.644269,5.960876,1.061316,9.615822,4.054276,-0.954268,8.997322,7.108814,1.878874,6.763302,-7.546127,8.365184,-4.420354,3.624716,-6.945358,-0.079073,-4.294766,6.979513,5.945326,-7.757724,-7.340711,9.327412,-5.334439,3.515623,3.859090,0.342323,-6.295648,2.910275,5.273798,2.581102,-7.561671,5.805885,1.437045,-6.122520,1.542356,4.752668,6.458898,0.900874,3.497907,-9.635636,-3.025733,-4.595931,-0.540646,7.577996,-2.098573,0.352882,-1.603540,0.530925,4.622568,5.382064,1.983058,-2.868947,5.550612,-7.282140,7.617044,9.568231,-9.554069,-0.857571,5.184725,-3.411070,-7.800085,3.927870,8.580934,-5.114364,-4.844796,9.066506,-8.859196,2.662347,-3.618256,6.635493,-5.995023,4.092830,-6.336567,4.686463,4.765271,-7.830722,2.942842,3.063174,-7.126595,0.965542,4.915939,-7.872391,4.699843,4.897023,8.832469,1.446751,-0.556501,2.407879,-6.848629,-0.356411,-0.991322,2.975747,-2.159564,-1.359081,-6.515117,-8.067499,6.348457,4.259186,-9.986400,-8.869976,1.479331,7.793379,-8.472661,1.803870,8.091017,-7.918975,-4.670909,5.749795,-3.716767,5.410706,9.245927,-8.129223,8.306208,2.232251,0.394115,2.536707,5.320295,-3.061519,0.438175,-3.333276,0.916932,7.893231,-1.875184,9.601602,-6.322047,8.636457,-0.769903,-8.898705,-0.451661,9.182967,6.970274,-2.526444,8.339652,-6.655632,-3.341618,3.497758,-7.508891,1.489077,5.996197,9.133742,-4.000431,7.433654,4.323219,-8.297409,-0.716944,4.739450,-9.539577,-8.503612,-0.552088,3.119364,-7.235346,-3.456346,6.255871,4.030048,-7.076683,-0.842745,-0.143449,4.065029,-7.294002,3.954557,3.943976,-6.595075,-1.860094,1.609405,-0.238482,-5.369001,1.262447,1.783641,-7.106012,2.901390,7.396537,8.167394,-5.061152,3.278651,-0.432986,1.733531,0.852994,-0.894267,-4.327636,-1.612904,-0.304846,8.200316,-8.554724,-5.540915,-1.157493,1.191303,2.808544,3.682988,-0.198055,-3.680345,9.826619,-2.307625,-4.511900,-4.664595,9.671715,1.298710,1.591034,5.342448,1.979586,6.217912,-6.916375,0.226897,4.395575,4.019057,-7.118050,3.835828,9.638048,-6.630588,-3.781367,-3.223369,-4.026803,7.098631,4.309752,2.369126,-6.416134,-1.726434,7.656105,-7.696161,-4.618339,-2.332080,-2.173830,-2.889969,-1.939020,9.359445,8.908720,-8.591298,8.968980], dtype = "float32")#candidate|1386|(490,)|const|float32
call_1385 = relay.TupleGetItem(func_75_call(relay.reshape(const_1386.astype('float32'), [7, 5, 14])), 0)
call_1387 = relay.TupleGetItem(func_78_call(relay.reshape(const_1386.astype('float32'), [7, 5, 14])), 0)
const_1388 = relay.const([[[2,-6,-3,3,5,7,-6,-3,9,-3],[4,8,1,4,2,-9,9,-1,-4,-10],[-6,-8,-9,9,6,6,7,5,10,7]],[[3,4,1,-6,2,1,-2,-10,-4,10],[2,-10,-10,6,-8,-1,1,5,-5,-7],[9,-4,-1,-4,5,4,2,6,-1,-1]],[[9,10,-9,4,-5,10,-10,-5,-9,5],[4,1,3,7,2,-5,-2,-3,-9,5],[-5,-10,-9,8,-5,-2,-2,7,10,1]],[[4,5,10,-8,-4,-5,-10,-5,-9,7],[-6,4,-1,3,-7,-5,10,-6,7,-1],[9,-1,-10,-5,9,-4,-10,1,1,3]],[[10,-8,8,-1,10,-10,-6,7,7,-5],[-6,9,7,-9,8,6,-10,6,-8,6],[9,-6,-5,10,-5,-8,6,-8,9,-3]],[[7,-5,-4,6,-8,-2,8,-3,-3,7],[-10,8,2,2,3,-10,-7,-9,8,6],[10,4,-8,-5,9,-10,6,-8,-5,-2]],[[8,-9,9,-9,-7,-4,5,-9,4,-5],[-3,-6,4,-7,-6,7,3,2,-6,-8],[8,-2,-9,-7,2,-7,-8,5,-7,-8]],[[3,7,-3,-7,-10,2,8,-10,-4,9],[-10,2,-9,9,-9,-9,4,6,6,6],[10,-5,-1,-5,-3,-10,1,10,-9,6]],[[-8,10,-2,7,2,4,-1,-10,6,-9],[2,-4,3,4,5,-2,6,4,10,6],[5,4,10,8,1,-7,-9,5,4,-6]],[[1,3,9,5,-7,1,-10,-9,3,8],[-7,7,3,9,-3,-10,2,10,-9,1],[6,9,9,8,-7,5,9,-9,-6,-4]],[[1,3,-7,5,8,3,7,9,2,-9],[-4,-1,8,9,-8,3,9,3,9,-10],[-3,10,-7,-8,-8,5,1,9,8,3]],[[3,3,4,-5,-3,1,-10,-8,1,5],[10,5,10,1,2,-1,-4,4,-4,10],[-6,5,-1,2,-6,-5,-10,10,-4,7]]], dtype = "int64")#candidate|1388|(12, 3, 10)|const|int64
bop_1389 = relay.greater(call_1371.astype('bool'), relay.reshape(const_1388.astype('bool'), relay.shape_of(call_1371))) # shape=(12, 3, 10)
bop_1392 = relay.greater(call_1372.astype('bool'), relay.reshape(const_1388.astype('bool'), relay.shape_of(call_1372))) # shape=(12, 3, 10)
bop_1393 = relay.logical_xor(const_1388.astype('uint32'), relay.reshape(call_1371.astype('uint32'), relay.shape_of(const_1388))) # shape=(12, 3, 10)
bop_1396 = relay.logical_xor(const_1388.astype('uint32'), relay.reshape(call_1372.astype('uint32'), relay.shape_of(const_1388))) # shape=(12, 3, 10)
bop_1399 = relay.right_shift(call_1382.astype('int32'), relay.reshape(const_1383.astype('int32'), relay.shape_of(call_1382))) # shape=(6, 16, 7)
bop_1402 = relay.right_shift(call_1384.astype('int32'), relay.reshape(const_1383.astype('int32'), relay.shape_of(call_1384))) # shape=(6, 16, 7)
uop_1403 = relay.cos(bop_1393.astype('float32')) # shape=(12, 3, 10)
uop_1405 = relay.cos(bop_1396.astype('float32')) # shape=(12, 3, 10)
output = relay.Tuple([call_1352,bop_1377,call_1385,const_1386,bop_1389,bop_1399,uop_1403,])
output2 = relay.Tuple([call_1353,bop_1380,call_1387,const_1386,bop_1392,bop_1402,uop_1405,])
func_1409 = relay.Function([var_1339,var_1376,], output)
mod['func_1409'] = func_1409
mod = relay.transform.InferType()(mod)
mutated_mod['func_1409'] = func_1409
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1409_call = mutated_mod.get_global_var('func_1409')
var_1411 = relay.var("var_1411", dtype = "uint16", shape = (780,))#candidate|1411|(780,)|var|uint16
var_1412 = relay.var("var_1412", dtype = "float32", shape = (780,))#candidate|1412|(780,)|var|float32
call_1410 = func_1409_call(var_1411,var_1412,)
output = call_1410
func_1413 = relay.Function([var_1411,var_1412,], output)
mutated_mod['func_1413'] = func_1413
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1420 = relay.const([[[3.715325,9.403281,-5.031403,-1.779704,3.368504,9.483920,-4.886142,-5.953053,-8.043113,3.854052,5.266301,-8.563594,-2.815277,3.945312],[5.363191,-1.574583,-9.773230,-3.027685,-8.668912,5.579218,-9.710171,4.850618,-0.954104,8.842065,-2.067926,-9.937256,-8.037759,-4.188222],[-3.383394,3.709069,-6.805173,-5.204148,4.082975,8.773048,3.505635,3.736204,1.636213,-8.244007,-1.967431,-2.191228,-8.848681,-0.155729],[4.273976,6.686884,-7.125443,2.166055,3.798452,1.894321,8.780799,-4.127778,9.445761,-4.574884,-8.848604,-3.861299,-6.818527,3.571905],[-4.080221,5.607707,-2.754210,8.956676,7.113628,-8.809635,7.640245,8.092314,-5.839242,4.454246,2.266275,5.984194,6.899517,5.855206],[-9.265317,-9.504007,-3.475713,4.253195,0.174838,-0.004249,3.006266,8.725528,-5.039935,9.760555,-7.556144,7.370598,5.611561,-6.626685],[-5.617762,-8.775320,-2.460887,9.405161,5.737501,-0.923907,-5.641857,8.331304,6.567458,-5.495941,-2.686429,-9.469148,-4.902360,-9.576784]],[[-6.618554,-3.671879,-2.521935,-3.208098,-8.413604,-5.991257,-1.705764,-2.808578,2.698026,-5.263771,-1.393975,-9.516864,6.641971,0.360558],[-4.854124,6.347790,-3.560965,-0.378649,-2.851754,-2.201765,-8.792703,-0.666302,5.769182,6.860443,3.218392,1.060467,-4.672055,-8.111558],[-7.593094,-5.342243,0.992427,-7.849487,7.551570,6.859152,3.346476,-0.149803,-4.415122,-7.773590,7.814989,-1.836953,8.884383,-9.625301],[4.071153,9.261335,1.801984,8.598080,0.799008,-2.165913,-2.923623,9.684801,4.215796,9.748631,-6.777572,3.274395,-7.977490,-4.160510],[5.664986,1.293514,8.116159,2.793602,-5.562193,-5.333217,-4.937807,2.385492,-5.052350,-9.483829,-0.406771,4.691611,3.348239,9.575645],[-9.355228,9.413198,-2.740507,-8.863357,-4.258223,-1.200215,-9.717788,-9.231843,-4.504423,5.262626,-8.850226,-8.636249,-3.917338,-0.293356],[0.802005,7.757675,9.744366,9.003801,3.713006,-7.414810,1.761504,7.365704,7.514276,-8.464120,7.053962,-7.653970,0.777036,-5.831471]],[[-9.501016,9.546378,-4.509588,7.798344,-8.876539,-9.196531,-2.093434,6.647422,0.839547,-6.036031,-9.736138,-4.915916,-6.458464,-2.318199],[-5.768289,2.497423,6.920015,-0.032392,0.345073,7.300087,-3.756059,-0.719779,-4.017129,0.844873,-1.811002,-8.364964,-4.739479,-7.737644],[7.249289,8.870052,0.676124,-3.445016,6.971000,8.688892,-1.679937,-3.254941,-3.991397,-4.188762,-6.313721,-8.626124,9.828600,-4.947442],[-2.528086,-7.485344,6.282976,1.226522,5.654886,0.549510,-4.738783,4.639502,0.223761,3.486042,-4.145791,6.184481,6.634186,2.957218],[-5.223347,2.686950,-6.780303,7.468319,9.904263,7.530677,-4.613412,1.044400,8.016123,-2.981009,9.232341,-1.111738,3.082944,-7.130943],[7.804669,5.213768,5.097872,-5.799454,-5.800182,9.611718,-1.864574,-7.542598,2.885339,8.162615,9.871190,-5.315046,-8.232194,-2.805489],[-3.525667,-1.443612,2.719904,7.784535,-2.998066,-4.530362,0.121871,-1.987663,-1.323066,9.546639,8.173017,-0.638288,-3.779004,1.706060]],[[0.177390,-5.718260,-8.356857,-0.392092,-7.305617,4.029125,5.521489,2.541745,3.864218,7.020670,9.517092,-0.660174,4.234669,8.636938],[5.706337,-3.359622,-7.012029,-0.359377,-1.503965,-6.228304,-5.394762,3.889411,-8.548970,2.508331,5.291288,4.962989,4.350036,3.456608],[9.242802,-0.291667,5.661580,3.466218,1.649071,-7.771452,-5.472875,-9.014646,-2.577790,1.905100,-1.364847,0.737568,2.685424,-5.607490],[-6.829742,7.537806,-4.977013,-2.070549,9.506363,-2.634757,6.580949,-4.948191,6.249831,-6.486575,-5.898527,-5.533087,-5.060528,-6.296613],[7.306027,-2.659250,-5.913657,2.101624,8.194330,-9.248243,3.798194,3.110833,-3.040684,9.925942,-8.666160,6.534653,6.294863,-9.599071],[1.366331,5.838573,0.963523,-9.102249,5.032513,6.611899,3.718127,4.568593,-5.287799,6.401572,-7.506548,-8.575430,8.838688,-6.979352],[-7.550142,-8.318290,3.510778,-4.715801,-5.353759,5.966577,-5.555503,-4.678100,-8.451361,-2.009237,9.562597,3.411985,-4.904114,-5.907308]],[[-5.510387,-7.297918,6.802268,-6.906164,-4.330928,-8.533957,-8.678207,7.589851,-2.075470,-0.459952,8.576635,5.707596,6.697956,1.019461],[-6.996728,5.644571,-9.205256,5.504251,-1.860409,-0.407345,-9.735364,5.203556,-5.862343,6.986710,7.296560,-6.827350,5.807053,1.000079],[-8.887989,-2.329590,-6.445228,6.973423,-3.393936,9.607743,2.617722,5.696836,-9.612063,-5.640985,2.945047,8.891290,4.218611,-6.961734],[3.336910,1.885994,-3.524266,-6.900595,6.894947,3.452138,7.265712,7.610095,-6.702849,-0.567603,2.914119,-5.081912,9.076410,1.711606],[9.604040,1.862145,3.479146,-8.845602,-5.315060,8.068822,9.074632,3.445526,2.971470,4.506605,-4.611002,-2.923690,-0.262450,-0.583134],[-7.276208,-4.682022,6.929688,-7.919191,0.836997,-4.657371,2.314774,7.559693,-2.233809,6.574801,2.369936,-3.937192,0.094416,-5.613683],[7.664237,6.418549,-8.596541,5.911254,3.565584,3.354318,-0.886066,-6.412341,3.959828,-3.279179,9.340915,7.571094,-8.164834,-9.205977]],[[-4.496325,6.657283,8.043044,4.975072,3.605680,-3.601663,-7.903703,8.886767,7.928702,-9.469364,8.019006,0.494780,4.965542,-2.998916],[-7.285407,1.948243,8.428917,-6.291607,4.253468,-0.502078,-8.393670,9.527238,-8.383130,2.768072,-5.658618,-4.985426,4.029709,-2.743749],[-6.875567,-1.742093,2.698527,4.412946,1.474402,-1.762508,5.280750,9.072086,4.606232,-7.350756,1.939338,9.271255,-0.716877,0.912547],[8.090295,-8.098333,-5.571445,-4.962240,-9.815985,-6.329987,2.641150,-9.618215,-5.390393,-5.479396,-5.541054,0.327724,5.257478,5.008949],[8.332984,5.243142,1.082989,-8.191614,-0.231817,5.090949,4.314213,-8.028375,-0.050430,5.079936,-9.021867,-9.636959,9.884713,-1.339860],[3.535352,-4.640569,2.939106,0.692910,0.857549,-2.256560,8.358257,-3.024703,-6.758550,2.626440,1.775694,6.529730,3.883741,-8.053549],[2.757505,3.145328,-8.976704,1.057934,5.058756,-5.170511,5.585422,-4.734895,7.022308,0.380947,-3.551105,-3.210689,6.520057,1.107276]],[[-0.799505,8.565306,0.989367,-6.633621,-9.382457,1.115086,-8.435071,-7.526091,-9.149863,-0.631661,1.467694,2.249372,9.432986,5.787021],[1.220899,1.790538,-3.372372,-9.974993,6.937265,-5.866478,-8.609574,2.319971,3.952765,-1.254675,-5.827689,7.124425,-7.742951,6.526611],[0.116120,3.740122,-0.100351,-7.249002,8.754080,-1.594733,8.610252,1.952563,-2.799755,-7.631635,-3.247443,6.401978,-1.300075,8.822879],[-1.233426,-6.943693,3.692024,-2.353329,-2.456468,6.119754,6.762887,-7.712852,-0.105681,4.923712,-3.033272,-3.088166,-1.762912,4.366962],[6.997043,-3.064587,-9.743952,2.919480,-7.633086,9.366568,-1.557554,-7.364343,-6.389006,-5.270436,-2.606855,2.554210,8.050461,-5.519292],[3.670825,-2.497234,-8.543246,-4.729357,5.966941,-3.034242,-7.699425,-0.673342,-0.402438,-6.170620,1.757704,8.161089,-3.394847,-0.003804],[8.279400,-3.954945,8.704294,5.277750,6.829466,-7.037857,3.963479,-5.835798,-3.222077,-2.940738,6.438298,1.743442,4.478528,2.261161]],[[3.683219,2.868767,-5.049840,1.385762,8.631443,9.589123,9.624669,5.471749,-8.011107,-5.313774,2.341231,-0.954550,0.621970,1.467913],[-8.383753,2.320591,0.307582,-2.809657,-7.583692,4.549720,-4.282429,-6.162914,-1.433411,-4.398624,5.986342,4.633721,8.406029,5.330805],[3.716717,9.954239,8.422861,0.246107,-6.328185,-6.599997,3.706328,-0.790842,-0.621804,8.102480,-0.552653,-1.855604,-5.378698,-7.617060],[5.258866,4.918457,3.261060,-2.688750,2.845444,9.172953,-5.140576,-9.334463,4.374512,1.180005,1.569320,-5.843771,2.390835,6.324374],[-7.842446,1.381818,2.687817,-4.868032,-5.913187,-7.203676,-3.581795,8.516073,5.403887,-0.977665,-8.130855,6.071606,0.998387,4.348739],[-1.218703,-9.756965,5.482449,-0.410709,-0.702333,9.118693,3.646497,-8.919277,3.019946,-2.331871,0.260312,6.711223,8.423285,1.011187],[-2.732079,2.348038,1.149155,1.873025,7.195011,-5.474762,-4.167380,-9.864454,5.766193,1.866953,-8.092953,3.727323,-3.436075,4.872846]],[[9.242573,-2.914378,-9.437222,-0.216743,-2.222264,-6.838654,2.608265,4.863558,-9.664461,-7.587991,8.532869,-2.101242,9.890194,6.688212],[-2.229954,0.021783,-7.011960,0.806341,9.670177,-8.512713,6.958198,-3.716187,9.697437,-3.379840,9.059527,9.115013,-8.814238,5.703396],[-9.077191,7.035647,2.772705,-3.503815,8.430339,-8.673173,-2.973839,-4.015099,8.798789,-5.717781,-1.340797,-7.393841,5.535099,-8.332282],[9.063213,-6.621390,6.377657,-9.954986,-9.576785,-4.015743,-2.949004,8.281878,6.214237,-9.576582,-8.260675,-5.076471,4.215864,-6.770568],[-7.915850,-8.177465,-3.552807,1.705891,3.069329,6.528988,9.913554,9.454740,-7.910075,-6.056800,-1.852071,7.504726,3.642308,2.724829],[-1.537233,-7.734915,1.543486,0.567957,0.799296,0.358817,-3.840359,-7.167732,-7.229522,-9.120108,-7.742912,-4.643937,4.593267,2.927899],[2.218479,-4.338496,6.208804,3.388549,0.456909,-2.774424,3.673170,1.974195,-2.646687,5.342179,3.301626,-5.672495,-4.669724,-7.269923]],[[-8.650085,6.846842,0.349866,4.960204,-5.840540,1.736556,5.244155,-2.863253,5.632978,5.932433,4.411128,-9.953754,-5.636659,3.419538],[3.159209,-7.322446,0.186010,-3.078352,4.419256,2.649660,-6.077423,-1.124965,5.716595,-3.222423,-1.546477,-6.083356,8.190065,9.212164],[3.003848,-0.372140,-5.296371,-5.339857,-4.537867,-2.302167,0.741752,9.877684,-6.673093,6.988248,-3.118585,-8.069954,7.614803,7.717118],[8.897434,-8.222027,1.141666,-3.282508,-3.499771,2.474492,2.731643,-3.518503,-5.719555,-6.606572,6.196958,-0.984323,9.994665,6.970666],[1.318494,0.439543,9.949121,-9.358437,3.244535,-1.345996,5.836105,-9.647243,-0.692283,6.155656,1.211886,6.086047,-1.966420,-7.064973],[3.226206,-1.317827,-4.614000,1.188901,-8.288114,-8.301324,-6.796486,0.520997,4.956138,-3.653688,-9.538018,-9.381336,4.484602,7.642243],[7.008456,-7.981575,6.798689,3.606070,-1.428737,8.335713,-1.334829,-9.203987,-4.115485,4.555253,-5.655442,1.349761,4.387632,-9.450650]],[[-8.217734,-7.738108,9.188062,-1.596637,-8.657199,0.077061,-0.145073,7.865099,-6.278816,-7.112697,4.493266,-0.739810,9.618203,-4.044436],[1.681400,-6.939543,-0.880096,2.877722,6.385518,-2.881878,-4.366183,-3.494118,-1.334018,3.827690,-9.658341,-5.792139,0.448810,7.661494],[-4.944877,-7.265831,-9.872544,8.836842,3.285181,-2.549569,-1.993041,-1.323233,-0.178131,-2.026811,-4.278754,-9.395442,3.818696,-8.771083],[5.056843,0.685454,-6.296486,-7.088840,-0.195162,5.075903,-3.087424,-3.719013,0.497700,4.758092,-0.220813,-6.961427,-5.267486,2.791658],[0.916723,-8.849251,6.468436,8.406319,8.566807,-3.195420,6.410530,-4.619659,7.744809,7.188875,2.746726,5.463228,-0.303846,4.423858],[-0.675233,-9.528587,-1.731024,-2.323537,-2.961561,5.613032,1.880199,-3.580862,-3.690299,8.916469,8.047577,-3.683529,2.600127,-3.790189],[4.234663,-7.714610,-7.352031,-7.145879,-5.068509,-0.150726,-4.457206,-8.692720,5.052232,-1.363117,1.076707,-1.664798,-9.320782,-3.439031]],[[-4.635272,8.114557,-3.075441,8.072881,-9.718854,8.059794,-4.598453,-1.228346,-2.900620,2.044596,4.511505,8.298874,6.746320,4.672748],[-7.926945,1.275547,8.941797,-6.968533,4.329874,-2.089986,9.717522,-2.060119,-9.639182,-5.104474,7.990061,-5.041691,-9.068932,-5.761149],[6.671741,7.207020,6.630724,-8.347441,-5.133791,-8.666581,-2.245192,0.646257,-3.263932,-2.185803,-0.197812,1.679158,-9.738482,-3.592855],[0.964729,-8.056529,9.175172,-9.686723,-6.035616,1.771205,-8.088698,-3.648443,-0.120372,-3.376628,7.364675,6.168550,-4.905726,-0.935315],[4.029349,9.861441,9.463909,8.895177,7.739185,6.235220,8.510606,-3.562184,-0.640652,-4.641427,2.757735,8.929301,9.326351,-0.637181],[-2.072928,-6.563644,-6.977970,-3.441758,9.800922,-7.601984,-0.615388,4.482147,-5.920546,2.181317,-8.974164,6.430914,-3.852746,2.446636],[-1.038956,9.129738,-3.683075,-6.104087,2.566540,-4.025058,-0.992102,-7.029308,-5.741202,-7.366660,5.765255,5.479979,-7.717721,8.004337]],[[4.285867,-9.407492,7.445150,-4.963001,-2.346851,-5.962630,-8.786771,-0.788167,2.829090,5.146869,-1.064411,-6.380286,4.306204,-2.648694],[-4.190451,-1.611451,-3.526595,3.398468,1.565087,7.822770,-4.672182,8.976702,-5.933693,-3.844197,-6.593851,2.360776,1.202425,5.299901],[6.938837,-6.829533,2.245966,6.097528,-8.152281,7.424962,3.794761,7.997248,-1.123236,-4.066498,-0.098875,-4.970159,-3.753037,-6.808264],[2.195751,-2.372387,5.402673,0.054824,4.853167,-3.761991,1.601883,8.331973,-0.948263,2.166660,-3.155974,4.545790,-3.254629,0.464853],[1.981987,-7.426646,5.498035,7.974396,-3.288313,-2.688372,3.581236,2.689733,-1.949326,0.124850,5.617375,-8.778970,-9.453405,-3.851049],[5.271006,9.044911,7.592629,-1.582022,-9.067725,5.706076,-3.545869,6.095239,-4.767541,-2.124284,4.563855,2.391656,-4.307749,-5.638172],[9.311627,2.631423,9.212364,9.045203,3.702235,8.853825,7.239338,-7.552794,-2.069426,-3.761195,-2.598611,-7.434488,-7.610353,-9.150649]],[[6.960254,-8.974678,7.650321,3.017058,-0.941477,-6.848568,-6.588481,-9.825754,-1.913903,9.053693,-3.581675,-0.638276,8.480103,-6.140086],[-6.937248,-3.487672,-0.709940,2.121911,6.381781,-5.324447,1.789301,8.888888,-4.007044,-6.330300,-4.497370,-8.978887,9.545091,7.059538],[3.816307,-4.006754,-7.915320,3.326078,6.556019,-1.055666,6.095866,7.248932,5.158197,7.332153,-8.977470,0.880792,2.083693,6.389613],[-5.486308,9.292349,-1.142330,0.472300,6.893535,5.940254,3.210632,6.944490,-2.237614,-7.680755,4.124592,-0.137050,9.406181,-2.676166],[2.501464,4.002925,-2.859969,6.938893,-9.394315,1.695420,9.882299,4.068862,-2.975226,5.929343,0.134736,4.014866,5.496568,-1.836549],[6.286368,-7.491737,-5.438171,-0.340264,-3.633884,0.383740,-7.986716,-1.126589,-0.404366,5.756239,-8.476040,4.845850,-0.484008,-0.582118],[-0.907424,-7.376835,7.873649,-0.437271,-9.518343,-7.632572,-9.817990,8.351611,-7.622171,-2.048141,3.577119,-1.970865,1.659533,5.206482]],[[-2.188123,4.011560,-9.180699,-6.935969,-7.663291,4.896589,3.227764,-3.890544,-4.191238,-2.532098,4.173049,8.078403,-1.118634,2.963122],[7.930562,9.117240,-3.487528,9.503020,-1.233227,1.540502,-4.527088,3.740946,-5.251488,-5.862891,-2.161264,-6.309100,8.396870,-5.148102],[5.441494,7.786170,4.478492,-1.595510,-5.403419,-9.638648,4.426712,0.084216,7.342088,0.756594,-2.195501,-4.084675,-5.176166,4.731558],[-4.566113,-1.115297,4.602968,-0.697679,-8.802709,-0.691273,-6.968965,-2.358089,-3.586968,-3.557340,-5.244753,-6.926137,8.576796,5.743280],[2.000273,2.484315,2.338817,1.659668,-4.241267,9.647926,-3.902439,9.808803,-8.757582,-1.877489,4.263968,-0.552686,-5.070627,6.875197],[0.225169,0.250298,5.979595,-3.743200,-9.036331,4.584947,-7.656121,-0.625121,-3.504822,3.465892,9.350366,-9.588656,-3.072498,-7.988063],[9.127502,-5.893197,4.554612,3.932940,7.637006,6.237253,2.239073,-9.868333,0.584094,-2.602378,-3.189995,-2.564510,5.020929,-9.559823]]], dtype = "float64")#candidate|1420|(15, 7, 14)|const|float64
uop_1421 = relay.acosh(const_1420.astype('float64')) # shape=(15, 7, 14)
bop_1426 = relay.bitwise_xor(uop_1421.astype('int8'), relay.reshape(const_1420.astype('int8'), relay.shape_of(uop_1421))) # shape=(15, 7, 14)
bop_1429 = relay.logical_xor(bop_1426.astype('int64'), relay.reshape(uop_1421.astype('int64'), relay.shape_of(bop_1426))) # shape=(15, 7, 14)
const_1433 = relay.const([[[4.768400,5.046581,-4.958149,3.954442,5.864344,-9.322595,2.660579,0.990579,5.665990,-8.698852,4.163279,3.231621,-1.812586,6.928535],[3.238454,5.058708,-1.811124,2.814701,-5.269536,0.174649,-4.877429,-5.137437,6.207769,-8.025780,-4.245551,7.644951,-6.979783,-7.931041],[1.115479,-2.832019,5.313837,-5.596457,-1.689556,-4.463582,-9.738310,7.265911,9.441409,-1.074480,2.778640,0.139873,-9.568850,-1.119439],[6.045436,7.177810,-1.031268,-9.739546,6.783579,-7.957805,-7.149177,1.600060,-1.418604,9.620411,-5.354465,1.005779,-2.160082,2.571922],[4.534171,-6.256117,5.093515,9.062079,2.533227,3.464920,-7.028297,-7.113558,-0.635287,-2.255493,-4.003854,-5.194830,3.112241,1.004457],[-5.879215,-5.891281,-5.682757,5.190112,-5.318319,2.583286,-0.513442,9.057833,-9.148404,9.167870,8.638751,-5.719018,5.256663,-0.178298],[-0.527326,-4.286938,9.641319,-3.792442,3.557263,0.644881,-7.696965,8.204545,2.807057,-3.399352,7.871797,-9.401457,2.498119,-0.246943]],[[5.354412,8.286416,-2.080478,-1.008425,6.317724,0.837363,-4.592485,-3.655250,-6.522561,3.342335,-2.372097,8.839367,9.954876,-2.179434],[-3.698094,3.170419,-2.170436,2.335284,7.292872,-2.356013,-5.194546,1.070335,-1.185052,-0.962129,-5.361527,-1.524732,0.675839,-5.038226],[5.710713,7.078188,5.187833,8.781976,7.115940,6.900209,-5.832410,9.397544,7.606130,-4.784000,0.719612,-6.878660,-0.465248,-4.700431],[9.447308,8.723078,-5.546408,-6.511476,5.525584,3.947107,8.382174,3.159216,-3.741459,-8.633615,-3.197581,1.376579,5.924980,9.750519],[-6.889775,4.033846,-5.374479,-2.518638,2.437946,-8.009412,-5.327692,-9.703304,-9.381362,4.769527,-7.556568,1.107327,-7.355576,-0.572262],[-0.015498,-1.360239,-5.804615,-0.054878,-5.812260,4.337338,-7.347773,-5.896166,0.116821,-2.337744,2.047484,-0.899592,9.216039,-9.660367],[-9.027096,-8.492816,-4.024291,7.555181,-3.968248,6.680470,-8.815666,5.858930,-3.249958,7.550675,-6.020475,-7.106540,8.564831,2.702992]],[[-4.405182,9.933200,5.816987,0.278575,-9.696716,-7.458770,8.180790,4.645405,-3.064868,-8.252574,-5.769199,-1.145615,2.124221,-2.092251],[8.454495,0.989071,3.478741,-7.109616,-3.587701,-6.503379,-3.645179,-4.103559,-0.015654,9.122656,-7.451287,-5.101804,6.225840,5.481385],[6.044381,5.138320,1.790150,-4.384637,7.332587,6.938170,-2.402202,-0.748310,-2.250707,-1.471594,-9.437905,6.708996,4.306513,-7.505088],[-1.427161,4.095181,5.830007,-9.292939,-4.750281,-1.379397,1.718090,0.260077,6.365129,-8.013129,-8.718824,6.994579,-7.434915,8.047645],[-8.436711,-5.321879,6.824435,-2.347579,0.436902,-4.861327,8.049028,0.906202,-5.501416,-8.228743,2.450435,-8.365525,-9.674153,-1.939644],[-6.067553,-9.095008,4.566265,-2.412771,1.855463,-9.005200,1.044046,-7.510435,9.893190,-1.996709,-5.259589,9.786759,9.276235,-5.273797],[8.467153,1.676948,-7.241070,-6.942532,-3.263799,0.969371,5.140767,-6.538583,-2.700699,6.098639,4.239888,2.607638,4.886982,1.397842]],[[-5.420887,-9.502349,-5.008157,-9.621978,7.754856,6.380312,3.977480,4.500408,-8.761562,0.350020,-8.825568,-4.924710,-9.660939,-7.973886],[-7.012201,6.549479,3.239796,8.012624,5.366118,-7.253878,-7.947755,-5.021104,-0.844748,4.568339,-7.004502,4.332574,8.552661,-4.824666],[-3.221478,1.522044,-8.947246,6.303696,-4.017422,2.113749,-0.797099,0.344010,8.017208,-1.276195,2.541802,-6.591355,4.022035,3.974532],[3.968042,-2.797178,-9.700910,9.337524,-1.044374,-0.907471,4.262102,-7.374474,5.251822,-2.196368,-1.049827,6.093331,-2.316945,4.333374],[7.457015,8.465175,-6.129388,-8.716714,3.860292,7.372606,6.624208,3.190089,1.768757,-7.036670,5.935869,-7.943644,-0.985459,4.114633],[0.807677,-7.064683,8.234903,-0.842931,4.365119,-0.858570,-0.631995,5.472664,3.243661,-4.174629,-5.767778,-7.680716,1.858657,6.150596],[-5.807573,4.843220,8.220754,-5.613944,7.290288,-8.119039,-3.916018,3.056255,-9.457572,-6.056944,6.117112,8.583861,8.206647,6.230648]],[[-5.232391,-2.429352,-7.735425,-0.234454,9.849392,-3.655860,3.981447,-9.581828,-7.902440,-9.777095,-3.022511,-2.229924,1.929784,7.463449],[6.250819,-8.439406,-5.151015,-2.016471,-9.906805,-8.495627,-0.586753,-4.899555,-6.656642,4.401612,-3.215303,1.616087,-7.606946,1.098722],[9.094756,-0.122154,1.051098,-8.126804,-3.350269,-5.524313,-5.434621,-2.793671,-3.708160,-4.755052,3.411783,3.898868,-0.994604,-0.014425],[-8.434767,-9.398228,9.710278,2.574313,8.218214,-1.505058,-2.076361,-0.611704,1.947975,4.804756,1.072751,-8.187482,8.106570,9.298883],[6.860707,-3.290390,2.674425,6.936580,-7.188847,0.801093,3.899018,9.682984,0.218673,-0.424564,-9.110527,-6.471981,5.291136,9.598124],[-0.086012,-9.449248,-3.079907,6.651000,-2.436135,-7.069192,6.417638,-3.850674,8.469471,0.549901,-3.835098,-0.540699,9.697452,-2.600603],[8.670180,-1.100606,-6.050088,6.468746,2.087954,-6.539813,-7.526223,-6.283749,5.207706,-0.187404,-7.711764,8.201782,9.875755,-0.756897]],[[-1.762898,3.756689,-3.532841,4.972797,5.047476,2.896779,4.111550,-2.504784,4.175475,-3.598906,7.921961,1.825494,-2.548986,-4.272120],[-5.585032,-7.813998,-7.230715,9.134277,5.241080,2.320014,9.190380,-6.659248,2.020226,-9.461708,8.752378,0.874318,0.650566,3.369063],[5.117292,1.555847,-1.335789,-5.644280,-0.192954,8.735571,-4.608525,-2.984115,0.337281,-0.573605,3.843344,8.512495,7.592652,1.418284],[-9.964327,-4.542188,5.536379,3.583379,-8.459810,-9.945278,3.043297,-3.623020,-8.802251,-3.668990,8.277568,-3.871208,6.582221,-6.228781],[-9.100758,-4.296279,-1.689436,-2.617826,-4.729574,5.835765,0.419408,7.221070,1.047194,-2.607036,-0.442985,2.737219,-1.881691,-6.738486],[-4.262729,-3.453499,4.683028,3.817988,-5.721186,9.374994,0.372219,1.961198,-3.417906,-0.185421,-9.909933,0.418117,1.122871,6.910123],[5.245311,2.508336,-3.233880,-0.334993,-4.692331,7.811632,-8.784548,-5.961660,2.544841,-8.636327,-5.377767,9.755604,-1.268996,-8.151621]],[[4.045198,4.423902,2.292347,-7.299378,-7.074049,3.668427,-1.507286,5.555671,3.229880,9.885499,0.457897,-3.339414,-9.624777,3.440647],[2.601152,-9.474896,3.852048,9.261267,-1.327432,-8.613436,-0.442693,-3.164565,-2.142070,9.969892,1.588554,-6.709855,1.973271,-9.789643],[-4.439117,-2.370539,1.616844,-7.441460,-1.684680,-9.968147,-5.912679,9.657344,-4.185935,6.445757,-9.901952,0.737556,8.151955,-9.253405],[-5.877978,-4.256990,-5.452046,-8.721734,2.974381,-3.567053,-9.090085,7.016122,6.884033,-8.450515,-6.564616,-9.746244,-0.552766,-6.904222],[6.293405,-2.497878,5.802620,-3.812447,8.082384,-4.210020,-6.049828,-4.651678,4.519894,5.659172,7.183045,-8.551142,9.172374,-1.279512],[-4.353580,-2.050128,0.122015,-1.116498,7.796242,9.174437,8.255767,-0.268648,-1.716065,4.800045,-2.073810,5.681313,-2.639415,6.503938],[-3.820564,9.783197,-5.323527,7.096068,4.778661,-6.609977,-8.071462,2.350621,1.809737,4.902129,0.795957,9.111564,8.942241,2.178629]],[[8.506814,-8.567982,-5.904193,-3.527024,6.073287,-0.389394,8.508294,9.352670,-1.423135,-1.795808,-0.441895,-2.250880,-2.018257,3.440127],[-0.602540,4.654807,5.594726,2.184265,6.138351,-4.456220,2.386556,8.242501,-4.719206,0.037751,-6.128549,-3.482956,9.469055,-1.386320],[8.606368,-8.633749,-9.909593,8.957431,1.347137,9.519393,-0.640811,7.819500,-9.007477,3.540668,8.836729,-1.189737,-8.494803,7.489001],[2.141846,0.617968,3.036129,-1.638672,7.619815,-9.103024,-2.162154,6.991431,2.839499,0.605608,-2.170415,-1.269880,4.997308,6.706966],[-0.428342,7.303204,-8.387520,-3.207452,-3.632912,3.505769,-3.485829,-1.377483,8.387081,3.744987,-8.504564,-3.219865,1.866200,2.984434],[1.811159,-3.413786,8.168907,5.579392,-3.286552,8.782589,-6.318183,-4.731383,-6.289603,-3.539375,8.204292,4.551380,-8.715862,-4.930690],[-1.653675,-8.251476,-2.727492,2.707559,-1.485839,8.035993,-9.064273,-0.222168,1.162682,2.802608,7.179028,0.402145,-8.779998,4.200448]],[[-7.932091,-7.041442,9.498769,7.727702,-1.112722,0.544930,2.007307,1.941077,3.132652,1.493640,1.980772,8.956431,-9.960736,6.542642],[8.941233,8.661299,-9.218121,-8.694789,-6.029168,8.284687,9.700635,1.604943,8.573634,-3.749019,-7.381088,6.472399,8.979034,8.970445],[6.227852,-8.647744,6.762068,-7.118094,9.750327,0.089346,-2.138417,-7.402774,2.952987,1.217790,2.831894,3.570992,3.214397,6.280852],[1.209275,-5.043539,7.087482,9.987526,-5.093874,-5.107117,5.825076,4.461737,-9.705921,9.524021,7.849248,-7.660912,-2.248299,1.438298],[-2.776112,-9.074790,4.619632,-0.225612,7.629858,2.794313,8.690731,-7.774549,5.703116,9.467843,2.717663,0.033741,0.952983,1.860364],[2.275030,3.367129,5.802650,-8.951699,-1.519389,0.393233,-5.063539,4.720360,-3.023161,-5.190153,6.819760,0.362216,-6.893181,8.645766],[-0.228180,-5.976153,5.821028,5.673689,9.595882,4.910530,-8.467986,-3.318628,1.171962,3.456849,9.317310,5.762212,0.737305,6.028112]],[[2.383124,1.117449,-5.816340,-3.718260,1.495640,-1.583641,1.656649,-0.254216,0.555169,-9.406575,-6.070495,-7.332121,-4.440913,-5.994961],[3.516430,7.924513,-1.294630,-8.784809,-2.682585,9.981621,5.179180,7.490681,5.346751,-1.859067,-9.939932,-3.342962,-8.375865,-2.596428],[-7.784202,-4.754619,-2.204048,1.110705,-9.919905,6.933150,-6.229848,-4.170381,9.485869,-2.178470,4.563294,7.957565,5.582046,-8.047756],[-0.631557,-0.834267,0.831626,-7.877767,9.677968,3.975861,-1.842988,-2.970004,7.290186,-4.411162,-4.489599,5.769804,7.641999,8.244097],[-4.508510,8.399242,-0.149039,-1.893830,-7.595152,-5.622017,-8.188410,-7.497017,-0.693010,9.697280,0.182078,-7.253902,-0.744984,-1.480325],[-2.671103,-8.933362,5.622258,-9.007547,-0.680728,-7.401068,1.739302,-5.369183,-5.478489,-7.738258,0.998146,-6.401002,7.282886,5.700690],[-3.818372,-0.156985,4.385901,-2.538681,-7.694470,7.753088,1.205419,2.657047,-8.354967,-5.365154,-7.526704,0.851650,-3.951981,7.290182]],[[9.332915,8.340769,-8.308945,-2.178002,-9.752607,-4.847446,0.314841,3.496498,1.326249,-0.417604,-9.773896,-6.925857,6.256647,0.414362],[9.838720,-4.090733,9.568342,8.465363,0.844327,0.526953,-4.378551,-2.944713,5.106557,-2.232167,-9.036350,-5.115617,2.554852,-3.517022],[0.393484,-2.919602,-3.246888,4.512182,-5.555376,0.066592,-2.886000,0.433549,-0.448230,1.714214,-5.443999,1.416170,-9.097998,2.857276],[-5.594388,-3.022112,5.976720,7.517519,1.414716,3.576121,6.786083,9.197684,-2.615287,-7.284354,-3.902891,-6.274334,4.783508,-3.046554],[-6.221337,9.989879,2.844979,-0.565797,-4.577648,-9.490699,-3.598022,6.072364,-2.149417,3.398985,2.566047,0.522534,2.281988,-9.208490],[6.059027,-9.491861,9.874195,1.207369,-4.237947,2.177998,3.344371,-3.943640,-4.252236,9.034548,4.312423,3.863568,-2.601911,-8.103614],[-6.216245,-1.819379,2.186149,8.299199,-2.311401,8.157812,-0.540715,5.465818,-8.279554,5.293057,2.827392,2.454011,-2.541428,3.854463]],[[-6.382062,-0.283725,1.541867,-5.723220,-6.509628,3.037492,-2.695052,9.445615,5.685713,-0.816521,-8.440730,-1.254141,-9.407395,-5.656398],[-0.917294,9.131312,-3.156240,-1.098558,-5.431310,-9.693590,-3.747988,1.366220,4.764460,-0.726209,2.617601,-6.507774,-7.201499,2.052697],[5.238887,4.921650,-4.926777,-7.296218,3.041010,-5.633830,7.011671,-8.341121,-5.411376,7.013335,-2.241679,-6.821228,-4.518946,4.256176],[-0.175276,-2.596675,1.754964,6.318484,-4.070044,-4.770007,-4.374990,-2.602929,9.794985,-2.462452,-8.154372,1.177272,1.207405,4.233781],[8.364913,-7.810509,6.333417,2.740877,7.048206,-8.387589,-6.022896,2.552127,8.378912,-7.852109,-7.633412,-8.047427,-9.012066,6.659755],[-7.245771,-3.513909,7.558102,9.061607,4.633013,3.985719,6.279971,-3.264774,-6.682346,4.673418,9.418011,8.925555,-1.994491,2.210102],[4.562777,-1.204370,5.762307,0.414925,0.473540,3.657985,9.636729,3.950150,1.641086,-9.939147,9.385496,6.322185,-8.411149,-7.981478]],[[8.065559,1.822211,-2.014227,-1.349540,-0.467376,1.965073,-8.716032,-1.988597,0.703097,-6.141764,-5.928102,9.575132,-1.033875,-7.939178],[1.940168,3.393409,-0.695308,1.579812,-2.994598,-7.354421,-5.985892,4.061128,4.548310,-0.798991,1.611636,4.392875,-3.599562,-8.227441],[6.741401,3.279455,8.677895,7.943963,8.792203,8.183020,-4.176449,1.240757,8.432670,7.627126,-6.714115,5.602799,2.666981,9.577188],[8.435345,-5.476393,8.646440,8.664851,9.454853,-0.222467,-1.730543,-5.436648,-8.387785,3.914375,-0.548516,-8.763048,-8.612913,5.049120],[-0.344760,7.205341,-7.899798,-3.309781,3.249860,-0.586088,8.258365,-1.353632,-9.296676,-2.864667,-2.984950,-0.979652,9.976106,0.820062],[5.901943,0.269861,-7.589346,9.307497,-0.451185,-1.958633,-7.030713,-4.736813,9.126351,2.624745,-7.556041,-0.999947,4.489541,2.725074],[2.721085,-4.830612,6.755535,-1.054600,4.743224,-7.337903,-1.602906,4.639920,-5.387399,-3.620267,-4.622638,6.606091,8.462974,6.276343]],[[7.098675,6.708044,-5.168757,6.485289,2.401169,6.002389,5.831702,7.594603,-1.832019,-3.934933,-1.402032,-3.556951,-9.741082,4.973841],[-9.487245,-5.011123,-1.314336,-4.267297,-7.044106,-1.549956,-3.274525,-5.188476,-6.441394,4.023779,-4.330217,5.772535,-4.402414,-9.988277],[2.061849,-0.308812,-5.840686,9.717883,3.665816,1.213746,9.572216,5.368652,7.822839,-7.162319,2.837559,-6.338321,4.015103,7.603563],[-0.750864,2.792771,3.608693,8.373681,-4.641366,-6.108198,-9.183718,1.206984,-9.077900,6.746028,-1.550414,9.285289,1.697414,-9.278585],[3.194194,-6.011171,5.186181,2.342249,-9.759254,-8.045073,-2.335082,-0.281085,0.743272,-1.165282,-9.028376,0.714588,4.172247,0.081082],[6.658834,-5.971336,3.967440,-7.577359,-4.952206,2.342936,-6.285752,9.774897,9.660853,0.464402,-1.862004,-3.630472,-7.889197,8.348572],[-6.872714,-1.890895,-0.297862,-8.385156,-9.213708,-2.357496,-0.209037,2.515783,-5.799828,2.311982,-0.630111,-8.989664,7.240313,9.799415]],[[-7.643695,4.613904,6.670682,-7.635249,-7.275280,1.157344,8.721711,0.909848,-1.331336,-4.161238,-6.299261,-4.378188,5.941337,1.121593],[5.538454,-1.780616,1.538911,-3.817099,6.161809,1.988589,3.195626,-9.715062,-3.796278,-0.723809,-4.617648,6.704948,3.916187,6.494460],[-8.560930,3.507127,-4.836468,-6.370088,0.881504,-3.743926,5.195766,3.351707,1.727484,-8.999579,2.946788,-4.650561,6.743197,-0.928682],[8.927875,9.155880,-5.590434,0.261185,-2.874833,7.773881,-0.327050,7.182358,4.391988,-3.911399,-7.304001,-3.579580,6.445161,-9.709049],[9.655907,6.035063,-5.157708,-6.200818,5.014982,9.088764,7.875702,-2.295222,8.961084,-4.324225,-5.376926,6.941926,3.246543,-4.766312],[-2.083768,4.658767,-8.369578,-7.673452,-7.241228,0.223435,-9.641376,9.767489,4.960361,2.078160,3.041010,7.792873,-7.815973,9.869962],[1.186274,-2.335627,-3.588853,8.985238,6.406502,1.481894,-2.007896,6.961455,-5.389441,4.563903,-8.751598,-8.151010,-9.132315,4.517315]]], dtype = "float64")#candidate|1433|(15, 7, 14)|const|float64
bop_1434 = relay.power(const_1420.astype('float64'), relay.reshape(const_1433.astype('float64'), relay.shape_of(const_1420))) # shape=(15, 7, 14)
uop_1440 = relay.acos(bop_1429.astype('float64')) # shape=(15, 7, 14)
bop_1444 = relay.logical_and(bop_1426.astype('bool'), relay.reshape(bop_1434.astype('bool'), relay.shape_of(bop_1426))) # shape=(15, 7, 14)
uop_1447 = relay.atanh(uop_1440.astype('float64')) # shape=(15, 7, 14)
output = relay.Tuple([bop_1444,uop_1447,])
output2 = relay.Tuple([bop_1444,uop_1447,])
func_1450 = relay.Function([], output)
mod['func_1450'] = func_1450
mod = relay.transform.InferType()(mod)
mutated_mod['func_1450'] = func_1450
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1450_call = mutated_mod.get_global_var('func_1450')
call_1451 = func_1450_call()
output = call_1451
func_1452 = relay.Function([], output)
mutated_mod['func_1452'] = func_1452
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1455 = relay.var("var_1455", dtype = "uint32", shape = (1, 11, 15))#candidate|1455|(1, 11, 15)|var|uint32
var_1456 = relay.var("var_1456", dtype = "uint32", shape = (4, 11, 15))#candidate|1456|(4, 11, 15)|var|uint32
bop_1457 = relay.bitwise_xor(var_1455.astype('uint32'), var_1456.astype('uint32')) # shape=(4, 11, 15)
uop_1460 = relay.exp(bop_1457.astype('float32')) # shape=(4, 11, 15)
bop_1472 = relay.add(bop_1457.astype('uint32'), relay.reshape(uop_1460.astype('uint32'), relay.shape_of(bop_1457))) # shape=(4, 11, 15)
bop_1475 = relay.equal(bop_1472.astype('bool'), relay.reshape(uop_1460.astype('bool'), relay.shape_of(bop_1472))) # shape=(4, 11, 15)
output = bop_1475
output2 = bop_1475
func_1478 = relay.Function([var_1455,var_1456,], output)
mod['func_1478'] = func_1478
mod = relay.transform.InferType()(mod)
var_1479 = relay.var("var_1479", dtype = "uint32", shape = (1, 11, 15))#candidate|1479|(1, 11, 15)|var|uint32
var_1480 = relay.var("var_1480", dtype = "uint32", shape = (4, 11, 15))#candidate|1480|(4, 11, 15)|var|uint32
output = func_1478(var_1479,var_1480,)
func_1481 = relay.Function([var_1479,var_1480,], output)
mutated_mod['func_1481'] = func_1481
mutated_mod = relay.transform.InferType()(mutated_mod)
func_58_call = mod.get_global_var('func_58')
func_59_call = mutated_mod.get_global_var('func_59')
call_1495 = relay.TupleGetItem(func_58_call(), 0)
call_1496 = relay.TupleGetItem(func_59_call(), 0)
output = relay.Tuple([call_1495,])
output2 = relay.Tuple([call_1496,])
func_1499 = relay.Function([], output)
mod['func_1499'] = func_1499
mod = relay.transform.InferType()(mod)
mutated_mod['func_1499'] = func_1499
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1499_call = mutated_mod.get_global_var('func_1499')
call_1500 = func_1499_call()
output = call_1500
func_1501 = relay.Function([], output)
mutated_mod['func_1501'] = func_1501
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1499_call = mod.get_global_var('func_1499')
func_1501_call = mutated_mod.get_global_var('func_1501')
call_1523 = relay.TupleGetItem(func_1499_call(), 0)
call_1524 = relay.TupleGetItem(func_1501_call(), 0)
uop_1525 = relay.sin(call_1523.astype('float32')) # shape=(7, 2, 7)
uop_1527 = relay.sin(call_1524.astype('float32')) # shape=(7, 2, 7)
func_855_call = mod.get_global_var('func_855')
func_857_call = mutated_mod.get_global_var('func_857')
call_1533 = relay.TupleGetItem(func_855_call(relay.reshape(uop_1525.astype('float32'), [7, 2, 7])), 0)
call_1534 = relay.TupleGetItem(func_857_call(relay.reshape(uop_1525.astype('float32'), [7, 2, 7])), 0)
func_1478_call = mod.get_global_var('func_1478')
func_1481_call = mutated_mod.get_global_var('func_1481')
var_1544 = relay.var("var_1544", dtype = "uint32", shape = (165,))#candidate|1544|(165,)|var|uint32
var_1545 = relay.var("var_1545", dtype = "uint32", shape = (660,))#candidate|1545|(660,)|var|uint32
call_1543 = func_1478_call(relay.reshape(var_1544.astype('uint32'), [1, 11, 15]), relay.reshape(var_1545.astype('uint32'), [4, 11, 15]), )
call_1546 = func_1478_call(relay.reshape(var_1544.astype('uint32'), [1, 11, 15]), relay.reshape(var_1545.astype('uint32'), [4, 11, 15]), )
func_677_call = mod.get_global_var('func_677')
func_681_call = mutated_mod.get_global_var('func_681')
var_1554 = relay.var("var_1554", dtype = "float64", shape = (7,))#candidate|1554|(7,)|var|float64
call_1553 = relay.TupleGetItem(func_677_call(relay.reshape(var_1554.astype('float64'), [7,]), relay.reshape(uop_1525.astype('float32'), [7, 2, 7]), ), 4)
call_1555 = relay.TupleGetItem(func_681_call(relay.reshape(var_1554.astype('float64'), [7,]), relay.reshape(uop_1525.astype('float32'), [7, 2, 7]), ), 4)
func_241_call = mod.get_global_var('func_241')
func_244_call = mutated_mod.get_global_var('func_244')
var_1559 = relay.var("var_1559", dtype = "float64", shape = (24,))#candidate|1559|(24,)|var|float64
const_1560 = relay.const([[4.989923,9.539972,6.898094,0.652716],[-2.577560,5.610580,-1.648255,-3.300480],[-9.675541,-4.776146,2.030197,-0.981789],[4.472496,-6.745975,3.360012,5.911084]], dtype = "float32")#candidate|1560|(4, 4)|const|float32
call_1558 = relay.TupleGetItem(func_241_call(relay.reshape(var_1559.astype('float64'), [3, 8]), relay.reshape(const_1560.astype('float32'), [16,]), ), 1)
call_1561 = relay.TupleGetItem(func_244_call(relay.reshape(var_1559.astype('float64'), [3, 8]), relay.reshape(const_1560.astype('float32'), [16,]), ), 1)
bop_1563 = relay.bitwise_or(call_1533.astype('int16'), relay.reshape(uop_1525.astype('int16'), relay.shape_of(call_1533))) # shape=(7, 2, 7)
bop_1566 = relay.bitwise_or(call_1534.astype('int16'), relay.reshape(uop_1527.astype('int16'), relay.shape_of(call_1534))) # shape=(7, 2, 7)
output = relay.Tuple([call_1543,var_1544,var_1545,call_1553,var_1554,call_1558,var_1559,const_1560,bop_1563,])
output2 = relay.Tuple([call_1546,var_1544,var_1545,call_1555,var_1554,call_1561,var_1559,const_1560,bop_1566,])
func_1572 = relay.Function([var_1544,var_1545,var_1554,var_1559,], output)
mod['func_1572'] = func_1572
mod = relay.transform.InferType()(mod)
var_1573 = relay.var("var_1573", dtype = "uint32", shape = (165,))#candidate|1573|(165,)|var|uint32
var_1574 = relay.var("var_1574", dtype = "uint32", shape = (660,))#candidate|1574|(660,)|var|uint32
var_1575 = relay.var("var_1575", dtype = "float64", shape = (7,))#candidate|1575|(7,)|var|float64
var_1576 = relay.var("var_1576", dtype = "float64", shape = (24,))#candidate|1576|(24,)|var|float64
output = func_1572(var_1573,var_1574,var_1575,var_1576,)
func_1577 = relay.Function([var_1573,var_1574,var_1575,var_1576,], output)
mutated_mod['func_1577'] = func_1577
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1605 = relay.var("var_1605", dtype = "bool", shape = (15, 10))#candidate|1605|(15, 10)|var|bool
var_1606 = relay.var("var_1606", dtype = "bool", shape = (15, 10))#candidate|1606|(15, 10)|var|bool
bop_1607 = relay.logical_and(var_1605.astype('bool'), relay.reshape(var_1606.astype('bool'), relay.shape_of(var_1605))) # shape=(15, 10)
func_364_call = mod.get_global_var('func_364')
func_367_call = mutated_mod.get_global_var('func_367')
const_1613 = relay.const([2,8,-8,-3,-10,-8,-9], dtype = "int16")#candidate|1613|(7,)|const|int16
call_1612 = relay.TupleGetItem(func_364_call(relay.reshape(const_1613.astype('int16'), [7,])), 0)
call_1614 = relay.TupleGetItem(func_367_call(relay.reshape(const_1613.astype('int16'), [7,])), 0)
func_75_call = mod.get_global_var('func_75')
func_78_call = mutated_mod.get_global_var('func_78')
var_1640 = relay.var("var_1640", dtype = "float32", shape = (490,))#candidate|1640|(490,)|var|float32
call_1639 = relay.TupleGetItem(func_75_call(relay.reshape(var_1640.astype('float32'), [7, 5, 14])), 0)
call_1641 = relay.TupleGetItem(func_78_call(relay.reshape(var_1640.astype('float32'), [7, 5, 14])), 0)
output = relay.Tuple([bop_1607,call_1612,const_1613,call_1639,var_1640,])
output2 = relay.Tuple([bop_1607,call_1614,const_1613,call_1641,var_1640,])
func_1645 = relay.Function([var_1605,var_1606,var_1640,], output)
mod['func_1645'] = func_1645
mod = relay.transform.InferType()(mod)
var_1646 = relay.var("var_1646", dtype = "bool", shape = (15, 10))#candidate|1646|(15, 10)|var|bool
var_1647 = relay.var("var_1647", dtype = "bool", shape = (15, 10))#candidate|1647|(15, 10)|var|bool
var_1648 = relay.var("var_1648", dtype = "float32", shape = (490,))#candidate|1648|(490,)|var|float32
output = func_1645(var_1646,var_1647,var_1648,)
func_1649 = relay.Function([var_1646,var_1647,var_1648,], output)
mutated_mod['func_1649'] = func_1649
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1669 = relay.var("var_1669", dtype = "int8", shape = (3,))#candidate|1669|(3,)|var|int8
var_1670 = relay.var("var_1670", dtype = "int8", shape = (3,))#candidate|1670|(3,)|var|int8
bop_1671 = relay.subtract(var_1669.astype('int8'), relay.reshape(var_1670.astype('int8'), relay.shape_of(var_1669))) # shape=(3,)
output = relay.Tuple([bop_1671,])
output2 = relay.Tuple([bop_1671,])
func_1676 = relay.Function([var_1669,var_1670,], output)
mod['func_1676'] = func_1676
mod = relay.transform.InferType()(mod)
var_1677 = relay.var("var_1677", dtype = "int8", shape = (3,))#candidate|1677|(3,)|var|int8
var_1678 = relay.var("var_1678", dtype = "int8", shape = (3,))#candidate|1678|(3,)|var|int8
output = func_1676(var_1677,var_1678,)
func_1679 = relay.Function([var_1677,var_1678,], output)
mutated_mod['func_1679'] = func_1679
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1708 = relay.const([-10,7,9,3,-7,4,10,-10,6,5,-3,2,5,7,6,3], dtype = "uint8")#candidate|1708|(16,)|const|uint8
var_1709 = relay.var("var_1709", dtype = "uint8", shape = (16,))#candidate|1709|(16,)|var|uint8
bop_1710 = relay.add(const_1708.astype('uint8'), relay.reshape(var_1709.astype('uint8'), relay.shape_of(const_1708))) # shape=(16,)
func_308_call = mod.get_global_var('func_308')
func_309_call = mutated_mod.get_global_var('func_309')
call_1719 = func_308_call()
call_1720 = func_308_call()
var_1722 = relay.var("var_1722", dtype = "int8", shape = (7, 2, 7))#candidate|1722|(7, 2, 7)|var|int8
bop_1723 = relay.logical_or(call_1719.astype('bool'), relay.reshape(var_1722.astype('bool'), relay.shape_of(call_1719))) # shape=(7, 2, 7)
bop_1726 = relay.logical_or(call_1720.astype('bool'), relay.reshape(var_1722.astype('bool'), relay.shape_of(call_1720))) # shape=(7, 2, 7)
func_274_call = mod.get_global_var('func_274')
func_275_call = mutated_mod.get_global_var('func_275')
call_1732 = func_274_call()
call_1733 = func_274_call()
func_475_call = mod.get_global_var('func_475')
func_477_call = mutated_mod.get_global_var('func_477')
var_1736 = relay.var("var_1736", dtype = "float32", shape = (490,))#candidate|1736|(490,)|var|float32
call_1735 = relay.TupleGetItem(func_475_call(relay.reshape(var_1736.astype('float32'), [490,])), 1)
call_1737 = relay.TupleGetItem(func_477_call(relay.reshape(var_1736.astype('float32'), [490,])), 1)
func_1409_call = mod.get_global_var('func_1409')
func_1413_call = mutated_mod.get_global_var('func_1413')
var_1756 = relay.var("var_1756", dtype = "uint16", shape = (1, 780))#candidate|1756|(1, 780)|var|uint16
call_1755 = relay.TupleGetItem(func_1409_call(relay.reshape(var_1756.astype('uint16'), [780,]), relay.reshape(var_1756.astype('float32'), [780,]), ), 3)
call_1757 = relay.TupleGetItem(func_1413_call(relay.reshape(var_1756.astype('uint16'), [780,]), relay.reshape(var_1756.astype('float32'), [780,]), ), 3)
uop_1761 = relay.erf(call_1732.astype('float64')) # shape=(5, 9)
uop_1763 = relay.erf(call_1733.astype('float64')) # shape=(5, 9)
bop_1768 = relay.less_equal(uop_1761.astype('bool'), relay.reshape(call_1732.astype('bool'), relay.shape_of(uop_1761))) # shape=(5, 9)
bop_1771 = relay.less_equal(uop_1763.astype('bool'), relay.reshape(call_1733.astype('bool'), relay.shape_of(uop_1763))) # shape=(5, 9)
output = relay.Tuple([bop_1710,bop_1723,call_1735,var_1736,call_1755,var_1756,bop_1768,])
output2 = relay.Tuple([bop_1710,bop_1726,call_1737,var_1736,call_1757,var_1756,bop_1771,])
func_1772 = relay.Function([var_1709,var_1722,var_1736,var_1756,], output)
mod['func_1772'] = func_1772
mod = relay.transform.InferType()(mod)
var_1773 = relay.var("var_1773", dtype = "uint8", shape = (16,))#candidate|1773|(16,)|var|uint8
var_1774 = relay.var("var_1774", dtype = "int8", shape = (7, 2, 7))#candidate|1774|(7, 2, 7)|var|int8
var_1775 = relay.var("var_1775", dtype = "float32", shape = (490,))#candidate|1775|(490,)|var|float32
var_1776 = relay.var("var_1776", dtype = "uint16", shape = (1, 780))#candidate|1776|(1, 780)|var|uint16
output = func_1772(var_1773,var_1774,var_1775,var_1776,)
func_1777 = relay.Function([var_1773,var_1774,var_1775,var_1776,], output)
mutated_mod['func_1777'] = func_1777
mutated_mod = relay.transform.InferType()(mutated_mod)
func_918_call = mod.get_global_var('func_918')
func_919_call = mutated_mod.get_global_var('func_919')
call_1810 = func_918_call()
call_1811 = func_918_call()
var_1812 = relay.var("var_1812", dtype = "int64", shape = (12, 3, 10))#candidate|1812|(12, 3, 10)|var|int64
bop_1813 = relay.equal(call_1810.astype('bool'), relay.reshape(var_1812.astype('bool'), relay.shape_of(call_1810))) # shape=(12, 3, 10)
bop_1816 = relay.equal(call_1811.astype('bool'), relay.reshape(var_1812.astype('bool'), relay.shape_of(call_1811))) # shape=(12, 3, 10)
output = bop_1813
output2 = bop_1816
func_1824 = relay.Function([var_1812,], output)
mod['func_1824'] = func_1824
mod = relay.transform.InferType()(mod)
mutated_mod['func_1824'] = func_1824
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1825 = relay.var("var_1825", dtype = "int64", shape = (12, 3, 10))#candidate|1825|(12, 3, 10)|var|int64
func_1824_call = mutated_mod.get_global_var('func_1824')
call_1826 = func_1824_call(var_1825)
output = call_1826
func_1827 = relay.Function([var_1825], output)
mutated_mod['func_1827'] = func_1827
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1861 = relay.const([3.499814,-7.041028,-7.938406,7.389503,-6.749134,-3.679406,-8.204551,-3.138234,1.828386,-1.363655,-0.740541,9.576937,1.801185,-4.508492,-9.924735], dtype = "float32")#candidate|1861|(15,)|const|float32
uop_1862 = relay.sinh(const_1861.astype('float32')) # shape=(15,)
bop_1870 = relay.logical_xor(uop_1862.astype('int32'), relay.reshape(const_1861.astype('int32'), relay.shape_of(uop_1862))) # shape=(15,)
bop_1876 = relay.bitwise_xor(const_1861.astype('int32'), relay.reshape(uop_1862.astype('int32'), relay.shape_of(const_1861))) # shape=(15,)
func_1332_call = mod.get_global_var('func_1332')
func_1334_call = mutated_mod.get_global_var('func_1334')
call_1879 = relay.TupleGetItem(func_1332_call(), 0)
call_1880 = relay.TupleGetItem(func_1334_call(), 0)
func_164_call = mod.get_global_var('func_164')
func_168_call = mutated_mod.get_global_var('func_168')
var_1882 = relay.var("var_1882", dtype = "float32", shape = ())#candidate|1882|()|var|float32
var_1883 = relay.var("var_1883", dtype = "float32", shape = (3, 9))#candidate|1883|(3, 9)|var|float32
call_1881 = relay.TupleGetItem(func_164_call(relay.reshape(var_1882.astype('float32'), []), relay.reshape(var_1883.astype('float32'), [3, 9]), ), 1)
call_1884 = relay.TupleGetItem(func_168_call(relay.reshape(var_1882.astype('float32'), []), relay.reshape(var_1883.astype('float32'), [3, 9]), ), 1)
output = relay.Tuple([bop_1870,bop_1876,call_1879,call_1881,var_1882,var_1883,])
output2 = relay.Tuple([bop_1870,bop_1876,call_1880,call_1884,var_1882,var_1883,])
func_1886 = relay.Function([var_1882,var_1883,], output)
mod['func_1886'] = func_1886
mod = relay.transform.InferType()(mod)
mutated_mod['func_1886'] = func_1886
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1886_call = mutated_mod.get_global_var('func_1886')
var_1888 = relay.var("var_1888", dtype = "float32", shape = ())#candidate|1888|()|var|float32
var_1889 = relay.var("var_1889", dtype = "float32", shape = (3, 9))#candidate|1889|(3, 9)|var|float32
call_1887 = func_1886_call(var_1888,var_1889,)
output = call_1887
func_1890 = relay.Function([var_1888,var_1889,], output)
mutated_mod['func_1890'] = func_1890
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1450_call = mod.get_global_var('func_1450')
func_1452_call = mutated_mod.get_global_var('func_1452')
call_1894 = relay.TupleGetItem(func_1450_call(), 1)
call_1895 = relay.TupleGetItem(func_1452_call(), 1)
func_1824_call = mod.get_global_var('func_1824')
func_1827_call = mutated_mod.get_global_var('func_1827')
const_1897 = relay.const([2,3,-10,4,9,9,-10,-5,7,-1,9,5,6,4,5,-6,-9,-4,-1,8,-2,9,-9,-6,10,-9,9,-2,-5,3,-8,-9,-8,-9,-3,9,4,-7,4,7,1,4,-1,7,3,-8,-6,9,9,-5,2,8,-3,7,10,-3,4,-5,4,-3,-1,-7,7,3,1,-6,1,9,1,-1,-3,-4,-2,10,-8,-2,-3,7,2,-3,5,5,7,10,-1,-9,-9,-9,-9,-8,3,7,6,5,-4,-2,2,-7,-3,-7,1,-9,8,-1,1,7,7,2,-9,-3,7,-6,-3,8,-1,2,-8,10,3,6,-1,9,-6,-3,-10,-10,2,-6,8,-2,-6,10,-7,3,-4,-5,-9,-6,5,-3,-8,10,8,6,9,-6,-6,10,-9,-5,-1,1,-3,8,-6,3,-2,3,-10,-8,9,-5,-2,-8,9,5,4,-9,-3,-6,-7,-3,3,-1,-7,3,4,-2,-4,-7,-6,2,-10,-8,9,-4,-5,5,4,-3,6,-8,-6,9,3,-3,-10,-10,8,-5,-3,3,-7,8,-8,-6,-8,7,7,4,-3,8,3,-4,-5,10,-10,-6,5,10,-6,8,-1,6,2,-7,-6,-8,2,-2,3,-6,6,1,7,-5,-8,-5,-9,-8,-10,7,9,-6,9,1,-1,6,9,9,1,-7,6,-9,-10,9,1,7,-3,-4,-5,8,-9,1,4,-2,-3,-5,8,3,10,-9,8,-2,2,-5,8,-1,10,3,-4,-8,-3,-6,-4,10,-1,-4,8,3,-1,-7,2,3,3,-5,-2,-4,5,-7,-8,-4,7,-1,-5,5,3,-2,-1,8,-5,-1,-5,4,-4,8,8,-3,1,10,-8,-9,-8,-7,-7,4,-5,1,-9,-9,-3,-5,8,-8,3,4,-4,4,3,-4,4,4,-1,1,-9,-1,9,5,-5,8,-2,1,5,-9,-7,-1,-1,4,2,-1], dtype = "int64")#candidate|1897|(360,)|const|int64
call_1896 = func_1824_call(relay.reshape(const_1897.astype('int64'), [12, 3, 10]))
call_1898 = func_1824_call(relay.reshape(const_1897.astype('int64'), [12, 3, 10]))
output = relay.Tuple([call_1894,call_1896,const_1897,])
output2 = relay.Tuple([call_1895,call_1898,const_1897,])
func_1903 = relay.Function([], output)
mod['func_1903'] = func_1903
mod = relay.transform.InferType()(mod)
mutated_mod['func_1903'] = func_1903
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1903_call = mutated_mod.get_global_var('func_1903')
call_1904 = func_1903_call()
output = call_1904
func_1905 = relay.Function([], output)
mutated_mod['func_1905'] = func_1905
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1922 = relay.var("var_1922", dtype = "float32", shape = (15, 10))#candidate|1922|(15, 10)|var|float32
uop_1923 = relay.log2(var_1922.astype('float32')) # shape=(15, 10)
uop_1928 = relay.asinh(uop_1923.astype('float64')) # shape=(15, 10)
uop_1930 = relay.log10(uop_1923.astype('float64')) # shape=(15, 10)
output = relay.Tuple([uop_1928,uop_1930,])
output2 = relay.Tuple([uop_1928,uop_1930,])
F = relay.Function([var_1922,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1922,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1922= np.array([[6.013479,-9.675518,0.654187,5.678181,6.289663,6.307122,-2.070567,8.927522,-6.264256,-6.017250],[5.125358,-8.694326,9.561442,3.402616,2.151255,-7.436551,-7.646183,-5.366180,3.894015,1.677332],[1.368645,5.171444,2.621009,-9.132147,-0.964136,-9.171106,9.767502,-3.913834,-0.790431,-4.757098],[-0.944359,-8.570419,2.233201,-2.046264,-5.754774,-7.214673,-2.292999,9.692665,-0.145258,-8.754442],[-7.722681,-3.094322,3.764636,-3.685024,-8.586034,6.438810,-1.322305,2.309955,3.584383,-3.174581],[6.124742,6.582144,-9.388376,5.227194,7.348055,-8.663857,2.530477,3.043461,5.036074,-1.401038],[-6.918390,-2.029562,8.466149,0.316157,7.523165,2.416177,-8.095103,-4.610117,0.912908,6.165101],[8.513213,0.342673,-8.577883,3.807325,-9.000206,0.684605,-6.715836,5.484306,0.611615,-9.942117],[-3.537575,1.318365,-8.737890,-9.732136,9.538560,-8.976443,3.325944,3.413501,-6.000704,5.356897],[-8.188709,-3.674845,-7.123698,2.274630,-7.763387,-9.592444,0.178633,5.435726,2.109865,5.749576],[2.147059,-8.094698,3.671799,-3.705563,-5.217443,6.667482,-2.478005,1.598263,4.872975,-0.426453],[-6.011796,6.375408,-3.551862,-2.038139,-2.070968,-1.778651,9.621286,-2.229758,2.275558,3.519272],[-9.571143,-3.250564,-4.910035,0.960088,-1.900218,1.754481,-3.838135,-9.637168,7.138824,-2.415602],[2.781072,5.141681,4.805704,0.603411,-0.495813,4.607373,5.417348,5.169643,2.444193,-5.372420],[-8.981604,8.120365,-1.001570,1.303629,-6.865997,6.179232,-9.033470,-0.798702,-2.808568,-2.545060]], dtype='float32')
module1.set_input('var_1922', input_1922)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1922, )
res3 = intrp3.evaluate()(input_1922, )
res4 = intrp4.evaluate()(input_1922, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
module5.set_input('var_1922', input_1922)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1922, )
res7 = intrp7.evaluate()(input_1922, )
res8 = intrp8.evaluate()(input_1922, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
module9.set_input('var_1922', input_1922)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1922, )
res11 = intrp11.evaluate()(input_1922, )
res12 = intrp12.evaluate()(input_1922, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
module13.set_input('var_1922', input_1922)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1922, )
res15 = intrp15.evaluate()(input_1922, )
res16 = intrp16.evaluate()(input_1922, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
module17.set_input('var_1922', input_1922)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1922, )
res19 = intrp19.evaluate()(input_1922, )
res20 = intrp20.evaluate()(input_1922, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
module21.set_input('var_1922', input_1922)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1922, )
res23 = intrp23.evaluate()(input_1922, )
res24 = intrp24.evaluate()(input_1922, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()

'''9: TVMFuncCall
8: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::transform::Pass, tvm::IRModule)>::AssignTypedLambda<tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}>(tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
7: tvm::transform::Pass::operator()(tvm::IRModule) const
6: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::LazyGradientInit(tvm::RelayExpr const&, tvm::IRModule)
0: tvm::relay::CheckFeature(tvm::RelayExpr const&, tvm::relay::FeatureSet const&)

'''