import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_34 = relay.var("var_34", dtype = "float32", shape = (12, 1))#candidate|34|(12, 1)|var|float32
uop_35 = relay.tan(var_34.astype('float32')) # shape=(12, 1)
output = relay.Tuple([uop_35,])
output2 = relay.Tuple([uop_35,])
func_41 = relay.Function([var_34,], output)
mod['func_41'] = func_41
mod = relay.transform.InferType()(mod)
var_42 = relay.var("var_42", dtype = "float32", shape = (12, 1))#candidate|42|(12, 1)|var|float32
output = func_41(var_42)
func_43 = relay.Function([var_42], output)
mutated_mod['func_43'] = func_43
mutated_mod = relay.transform.InferType()(mutated_mod)
var_106 = relay.var("var_106", dtype = "float32", shape = (14, 14, 13))#candidate|106|(14, 14, 13)|var|float32
uop_107 = relay.sinh(var_106.astype('float32')) # shape=(14, 14, 13)
output = uop_107
output2 = uop_107
func_109 = relay.Function([var_106,], output)
mod['func_109'] = func_109
mod = relay.transform.InferType()(mod)
mutated_mod['func_109'] = func_109
mutated_mod = relay.transform.InferType()(mutated_mod)
var_110 = relay.var("var_110", dtype = "float32", shape = (14, 14, 13))#candidate|110|(14, 14, 13)|var|float32
func_109_call = mutated_mod.get_global_var('func_109')
call_111 = func_109_call(var_110)
output = call_111
func_112 = relay.Function([var_110], output)
mutated_mod['func_112'] = func_112
mutated_mod = relay.transform.InferType()(mutated_mod)
var_146 = relay.var("var_146", dtype = "uint16", shape = (6, 16, 10))#candidate|146|(6, 16, 10)|var|uint16
var_147 = relay.var("var_147", dtype = "uint16", shape = (6, 16, 10))#candidate|147|(6, 16, 10)|var|uint16
bop_148 = relay.maximum(var_146.astype('uint16'), relay.reshape(var_147.astype('uint16'), relay.shape_of(var_146))) # shape=(6, 16, 10)
output = bop_148
output2 = bop_148
func_163 = relay.Function([var_146,var_147,], output)
mod['func_163'] = func_163
mod = relay.transform.InferType()(mod)
var_164 = relay.var("var_164", dtype = "uint16", shape = (6, 16, 10))#candidate|164|(6, 16, 10)|var|uint16
var_165 = relay.var("var_165", dtype = "uint16", shape = (6, 16, 10))#candidate|165|(6, 16, 10)|var|uint16
output = func_163(var_164,var_165,)
func_166 = relay.Function([var_164,var_165,], output)
mutated_mod['func_166'] = func_166
mutated_mod = relay.transform.InferType()(mutated_mod)
const_254 = relay.const([[[2.334618,6.605994,5.294260,-5.517241,-7.734565,1.756344,-3.602386,2.728632,4.654760,1.773089,-8.454747,-4.486165,6.158631,-8.303803,-0.206105,6.452139],[-5.087112,2.778142,-8.973142,-9.530122,7.446026,3.792316,-8.110315,5.202014,7.824694,-2.924095,-4.912554,-9.680123,-1.956714,9.726961,-5.803292,1.530920],[-8.688408,-6.631458,-5.670293,4.494318,-6.245082,4.363531,-0.151906,-0.350327,-0.539028,8.895434,3.202081,-1.284550,-0.395083,-3.231241,2.081136,5.539881],[-0.382989,-9.634624,-5.186212,-7.555208,-5.550648,4.419843,-7.038309,-3.243257,-5.051301,8.749004,8.423095,-6.249306,5.588845,-9.932121,-9.526229,-7.265244],[1.678655,7.053649,0.964791,-1.849678,-8.624990,-8.942095,1.757478,0.766003,-0.162799,4.461390,-9.356580,-8.386067,-1.117289,-7.618588,-0.195896,1.233657],[1.225871,-9.290129,-0.068090,-5.849453,-2.469111,7.334362,-6.382425,-9.360455,3.487023,-7.136964,9.597735,-2.448288,-1.347330,-2.247801,3.215181,-7.612097],[-2.836733,2.896026,-9.109987,2.094193,-2.544654,-6.872005,4.786163,-7.685138,9.904585,3.595688,2.255384,-1.058445,-2.104503,-3.974247,7.707652,2.844403]],[[8.044768,-7.291653,-1.983942,6.139710,2.887364,6.510274,-2.649859,8.087455,5.154249,-0.527928,-8.236598,-5.686519,7.389897,2.541857,4.289907,-7.174071],[5.545360,-4.102546,9.039672,3.420177,-1.812695,4.203007,-2.677591,-2.859199,6.305040,-0.263730,6.161884,7.441438,2.595183,8.669390,9.247897,-5.846759],[4.313836,-6.159674,-4.917115,7.964963,3.383978,4.849375,3.115474,1.019007,-6.875425,6.134124,-7.670107,-0.353916,4.843914,-1.038631,1.975847,3.742754],[-6.640437,3.896090,9.400293,7.227287,-8.497261,-8.998564,-7.443344,-6.545568,2.525114,-7.528971,-5.551304,-6.696444,1.706072,-4.581870,2.426269,3.366773],[-4.225528,-8.040063,0.640205,-4.640479,-0.913499,2.231040,-4.351201,2.486760,3.897239,9.371831,-4.642876,1.486521,-3.391288,-3.298746,-4.248919,1.215133],[7.158101,-1.725983,9.851664,-4.412587,-7.653350,-4.732595,8.256319,-3.262934,-8.948838,7.193397,6.912434,-6.845570,-0.431391,2.826159,-0.372880,0.507002],[-9.530477,-3.504210,-0.506108,1.841250,-8.526972,7.407148,3.919080,4.068235,4.829694,-2.077829,6.179821,4.434296,-4.870993,-2.887112,3.211575,-1.507488]],[[-8.033940,-0.131230,4.059509,3.594364,7.504718,3.116988,-7.190234,-8.273988,6.704948,3.476672,1.285663,2.183430,3.850302,-1.608623,5.283031,9.508218],[3.979294,9.221473,7.594628,7.316755,8.966518,-0.481686,4.034778,-1.459069,8.500606,5.584789,-1.255408,-5.838263,4.182048,-4.314006,9.474732,-7.817353],[3.999060,6.738124,-6.670611,-7.553998,-7.638604,7.580972,9.068943,-9.943970,0.975398,-9.462467,-4.663892,-7.160216,5.415384,7.275599,-2.649887,-8.284734],[8.899046,-3.787415,-4.348533,1.516576,4.465355,-3.036885,-9.327806,-2.983256,-3.401156,6.036719,3.331977,-6.858751,2.457033,-6.825470,5.239257,7.537430],[-8.666716,-6.669209,-3.495844,1.579180,8.920433,9.609152,9.776468,4.264395,-9.086614,-4.267608,-3.370342,-4.308206,-9.198805,7.387197,6.385349,-3.473242],[4.547193,-6.339347,9.609416,2.775310,6.221600,-7.287642,-1.028937,6.917848,8.292989,8.682353,-6.389904,8.739601,-6.114082,2.142717,6.919289,5.951461],[-5.097963,6.154831,-7.222883,-6.636475,8.807597,-9.656400,1.952080,-9.310367,4.256380,-3.138845,1.862157,0.597605,1.867069,-7.784885,-1.422570,8.845492]],[[5.152669,-5.355738,2.143049,-7.008942,-2.182083,1.890755,-5.536098,-8.174280,9.545596,2.599702,-0.117412,-9.370781,3.170313,-3.112543,-3.522826,3.399511],[-0.468081,4.874669,-3.662212,-0.195121,-4.756509,-2.149539,4.862174,9.349441,-2.362574,-3.383964,6.131234,-8.418147,9.390863,-2.682483,-7.280979,0.524181],[-5.087474,-8.369069,-8.554289,6.431445,-5.172154,6.427605,-0.366040,-6.184997,-3.080589,2.601217,7.448575,-3.008034,-9.637257,0.226907,-3.953224,-3.121385],[5.068633,-9.503069,6.096166,2.907105,0.271948,-9.461548,4.749961,-4.236901,2.806814,3.717948,4.782122,8.934556,-6.170135,-7.022931,0.186454,8.468796],[-0.241083,7.102971,7.231356,0.286838,6.849108,-4.785897,8.107487,-8.415714,-0.440054,8.434505,-3.897411,-8.281473,7.328969,4.581299,2.080035,-4.176652],[-3.099270,7.057732,-2.880301,5.605733,-9.489671,-3.241292,-0.644817,-3.607373,-0.908045,7.385681,-2.128573,4.706813,-8.618169,1.174232,-4.504643,5.849826],[7.793199,-6.650438,-0.530008,9.865312,-8.170323,-3.006412,6.248091,4.986716,-2.427234,-8.555354,-2.751889,8.346209,-1.705423,-4.067836,-5.921394,-6.856469]],[[7.105448,2.341121,-9.831603,-6.193435,-0.457709,8.244118,-0.504885,2.040989,3.813976,5.905937,4.175762,2.365440,1.135631,-4.086470,1.527331,4.780866],[-7.444628,-3.987760,-3.392558,3.246821,0.107856,-4.651648,4.309830,9.965007,7.484521,5.090986,9.260446,-7.432720,-4.978208,-9.590405,9.859552,-6.092449],[-5.351555,-6.517765,-0.750618,6.167310,3.168309,2.977909,8.527746,5.448597,9.395240,9.713371,9.797002,-7.787480,3.970936,-6.681310,-6.395196,-9.448885],[2.057468,2.009869,-6.456607,-1.663787,-7.816669,-0.122593,-1.296097,-9.422354,-6.427150,-5.084806,-8.840773,-3.291645,8.936009,-4.555814,4.238285,-8.160812],[-8.550500,-8.772604,-4.533822,-0.700488,-5.080798,-9.908259,-0.333981,4.555123,-2.471602,5.353536,-8.733832,-1.306566,-9.845042,5.164999,7.647667,-0.584868],[-7.693204,-0.793896,2.933879,7.936076,-0.172386,-2.040863,5.445165,6.839882,5.723467,-4.595207,-3.478089,1.457710,6.400605,4.862632,-7.356389,-5.489859],[-1.759914,3.898098,4.076739,-5.516195,-8.709395,4.782288,-1.285942,-3.650072,8.866079,1.143127,9.143783,-7.964050,9.327487,-9.049060,0.648829,-1.737346]],[[6.334361,-3.905046,3.829828,-7.115849,2.958044,5.356602,1.372679,-0.288408,-6.073632,-9.395356,-0.243167,-8.759424,-0.364927,-0.459771,-3.823733,-5.510263],[-0.270178,-0.423791,2.665369,-5.317210,-0.520963,-1.404712,4.625420,-9.631074,-1.826304,2.945950,5.464112,-6.952484,-4.903741,-9.066678,-2.658291,1.517904],[6.304454,-4.164641,-6.439470,1.196043,-9.780009,-9.444936,-7.610211,5.486454,-3.347743,-8.137388,-6.798783,8.802853,6.665206,3.297516,-3.537924,-0.560119],[9.348604,-2.739403,1.960523,-4.961602,3.380462,2.650747,-4.982614,-8.973413,-1.357598,-9.067970,-7.763442,7.930099,9.659554,1.719111,9.167121,8.481139],[-8.168802,4.654695,-9.882456,3.274607,-1.436592,3.938760,5.246566,8.003170,-0.738420,-5.910373,-0.721755,-8.121502,6.467846,8.194370,-2.805421,4.786220],[1.891202,-4.079164,-6.342501,2.291593,6.447071,5.597525,9.981571,-6.434321,9.686849,-0.560166,-6.093993,9.615580,-1.355641,8.467010,-7.577757,2.376534],[8.617805,6.623672,2.478977,-3.296929,6.596363,1.610575,1.149527,4.784826,-5.395098,-4.064679,-8.012546,-1.326621,-1.206857,7.098770,-7.799744,-0.522957]],[[4.174704,-9.268084,1.616648,5.938077,-7.617122,6.514589,-0.887074,-4.954784,-3.350404,7.445911,2.536541,0.074220,5.751343,-1.941645,8.858050,0.669615],[-9.668395,2.638325,3.078784,-6.981259,7.993752,8.193785,-9.969341,-4.625479,-6.527705,-2.464929,-1.365171,1.489521,-2.254165,2.782989,6.667748,-1.340057],[-7.442449,1.307983,-7.909548,-9.867992,0.109880,3.876376,1.603735,-8.466226,-0.132797,1.224705,-5.140402,-4.668442,-2.097058,-1.324361,5.247257,9.675360],[-1.794962,4.646273,8.651537,-3.853986,7.465516,-4.249093,9.580665,-1.066442,3.058136,-1.734421,-1.539654,3.033717,5.053849,-1.108406,-4.413025,-9.498713],[-0.191862,-6.744783,0.614714,-0.838267,-4.723017,-0.662283,4.064878,5.688467,-9.433454,-2.197204,2.830592,-0.499584,3.770014,6.947756,-0.399613,-9.759560],[6.419435,-0.750359,6.234649,1.866118,-4.117593,-3.844185,-1.368923,-2.270551,3.541793,1.547606,-5.896815,8.045933,5.080376,-4.379709,8.586967,-8.532717],[9.844698,8.114008,-7.410652,-7.805343,-7.666519,-1.324385,1.836334,-5.866031,-7.417092,8.653597,9.296150,-2.892863,5.637159,-2.161455,-3.511834,6.996238]],[[-2.745337,-7.624088,8.124862,3.962251,6.196022,-3.316162,-3.506784,-0.604486,-8.915196,-0.504285,-5.793852,-0.379284,8.347919,-0.994673,-2.180383,0.564231],[7.009329,0.313851,-1.893093,-5.900257,-3.156019,-7.338929,0.251299,2.825034,-8.678300,5.367351,6.319474,-2.711029,3.753515,-2.682233,-9.226177,-4.959052],[2.258315,-7.216517,-2.992378,-1.462491,4.229740,5.373998,8.445450,3.244207,-8.874046,-6.222692,-1.791109,-0.351758,-1.197232,8.711959,-5.660881,-4.746577],[9.901639,-4.124667,8.348870,5.399175,8.204404,-8.754370,0.103234,6.554466,-9.712045,4.721346,-5.924731,-3.671468,-7.639488,-6.928877,9.705507,1.546401],[4.481840,-8.506524,-9.509524,-3.321945,4.148086,-4.591607,-3.651542,-4.074751,6.201287,0.839017,-0.515868,-7.359529,-3.711740,3.790778,2.515885,-7.667896],[-6.972079,-8.888864,-2.121769,6.323816,3.276661,5.232381,3.202197,-1.345706,9.725792,-5.183692,-7.459658,1.517244,4.888218,-8.012855,5.534333,-1.239385],[-2.162040,-6.458196,7.940410,-3.387438,3.956271,-1.431441,3.000814,4.996256,-8.074624,-8.617273,9.261123,5.284605,9.204527,7.659708,6.615439,-2.451586]],[[-0.593553,-4.334548,-6.567538,-7.753245,-5.031698,-5.582037,-4.211672,8.610759,-4.000447,8.684496,0.055810,-6.848614,-1.378426,9.967068,3.871404,2.329080],[-4.897180,5.835086,-8.693741,-9.483568,-4.420743,7.162226,-1.244599,-8.279188,-6.176569,-0.985228,-1.212884,-5.174770,9.959153,-2.927149,-6.738515,-9.245483],[-3.378687,3.571926,-7.293498,1.956372,9.773907,4.862464,9.813912,-7.872697,1.729039,1.725913,8.162667,-6.582812,1.636471,-2.457388,6.897967,-5.142097],[-8.477878,-8.683276,7.160398,-8.182993,-1.827787,4.331935,0.784162,-7.460324,-1.177428,-9.980661,8.707420,-4.738639,-4.777493,-5.550311,-3.787752,4.276858],[1.907333,6.100798,2.273492,0.314174,3.788816,-9.786061,-5.044024,2.365717,-5.782729,-1.475597,-0.676488,8.656743,7.897732,-4.658646,-2.965434,2.276358],[-2.625803,0.180555,-4.424711,3.495061,9.390584,-2.694332,-5.998225,-0.171372,4.346062,3.232226,-5.115153,-4.564981,-6.430960,2.750729,-8.791145,-1.062559],[2.774005,7.108697,-4.222395,2.302053,-2.695690,4.868174,8.201837,4.862117,5.028511,-9.920689,8.225096,3.741881,-1.477294,8.015084,2.751955,5.158669]]], dtype = "float64")#candidate|254|(9, 7, 16)|const|float64
uop_255 = relay.acos(const_254.astype('float64')) # shape=(9, 7, 16)
output = uop_255
output2 = uop_255
func_257 = relay.Function([], output)
mod['func_257'] = func_257
mod = relay.transform.InferType()(mod)
mutated_mod['func_257'] = func_257
mutated_mod = relay.transform.InferType()(mutated_mod)
func_257_call = mutated_mod.get_global_var('func_257')
call_258 = func_257_call()
output = call_258
func_259 = relay.Function([], output)
mutated_mod['func_259'] = func_259
mutated_mod = relay.transform.InferType()(mutated_mod)
func_257_call = mod.get_global_var('func_257')
func_259_call = mutated_mod.get_global_var('func_259')
call_318 = func_257_call()
call_319 = func_257_call()
output = call_318
output2 = call_319
func_320 = relay.Function([], output)
mod['func_320'] = func_320
mod = relay.transform.InferType()(mod)
output = func_320()
func_321 = relay.Function([], output)
mutated_mod['func_321'] = func_321
mutated_mod = relay.transform.InferType()(mutated_mod)
var_330 = relay.var("var_330", dtype = "uint16", shape = (4, 15, 4))#candidate|330|(4, 15, 4)|var|uint16
var_331 = relay.var("var_331", dtype = "uint16", shape = (4, 15, 4))#candidate|331|(4, 15, 4)|var|uint16
bop_332 = relay.greater(var_330.astype('bool'), relay.reshape(var_331.astype('bool'), relay.shape_of(var_330))) # shape=(4, 15, 4)
func_320_call = mod.get_global_var('func_320')
func_321_call = mutated_mod.get_global_var('func_321')
call_336 = func_320_call()
call_337 = func_320_call()
uop_343 = relay.sigmoid(var_331.astype('float32')) # shape=(4, 15, 4)
uop_354 = relay.atanh(uop_343.astype('float32')) # shape=(4, 15, 4)
var_361 = relay.var("var_361", dtype = "float32", shape = (4, 15, 4))#candidate|361|(4, 15, 4)|var|float32
bop_362 = relay.logical_xor(uop_343.astype('uint32'), relay.reshape(var_361.astype('uint32'), relay.shape_of(uop_343))) # shape=(4, 15, 4)
var_372 = relay.var("var_372", dtype = "float32", shape = (4, 15, 4))#candidate|372|(4, 15, 4)|var|float32
bop_373 = relay.bitwise_or(uop_354.astype('int64'), relay.reshape(var_372.astype('int64'), relay.shape_of(uop_354))) # shape=(4, 15, 4)
output = relay.Tuple([bop_332,call_336,bop_362,bop_373,])
output2 = relay.Tuple([bop_332,call_337,bop_362,bop_373,])
func_387 = relay.Function([var_330,var_331,var_361,var_372,], output)
mod['func_387'] = func_387
mod = relay.transform.InferType()(mod)
var_388 = relay.var("var_388", dtype = "uint16", shape = (4, 15, 4))#candidate|388|(4, 15, 4)|var|uint16
var_389 = relay.var("var_389", dtype = "uint16", shape = (4, 15, 4))#candidate|389|(4, 15, 4)|var|uint16
var_390 = relay.var("var_390", dtype = "float32", shape = (4, 15, 4))#candidate|390|(4, 15, 4)|var|float32
var_391 = relay.var("var_391", dtype = "float32", shape = (4, 15, 4))#candidate|391|(4, 15, 4)|var|float32
output = func_387(var_388,var_389,var_390,var_391,)
func_392 = relay.Function([var_388,var_389,var_390,var_391,], output)
mutated_mod['func_392'] = func_392
mutated_mod = relay.transform.InferType()(mutated_mod)
func_257_call = mod.get_global_var('func_257')
func_259_call = mutated_mod.get_global_var('func_259')
call_397 = func_257_call()
call_398 = func_257_call()
const_401 = relay.const([[[1.716613,5.553052,7.964703,-2.903064,6.090730,-0.827973,-1.894816,-5.576048,-0.629256,7.336671,-7.226237,-6.801896,8.588386,8.583502,1.943639,4.626524],[7.310379,-4.165465,1.401174,-6.359651,8.162578,-2.827513,4.413880,-1.182570,3.576892,-3.573730,-4.551732,6.943784,3.047823,-9.827938,1.328047,-1.091567],[-9.433218,-0.876603,1.275940,1.134766,9.013699,3.340818,-1.279570,-8.245601,2.462013,4.438954,4.194868,-9.397680,4.319960,0.021571,-3.647043,3.100579],[-6.061792,-1.358600,3.607636,-5.161012,5.856181,1.517770,-9.011433,-0.132367,-5.303801,4.690563,-2.678119,6.829143,-6.274966,3.381412,-6.202618,7.181941],[-2.421145,-4.061256,4.865508,-5.134699,-8.139174,-6.339597,3.927961,4.302693,-4.707352,-4.245295,-4.713059,1.240437,-3.301627,9.873347,0.826208,-4.953582],[-2.300211,4.907321,0.234022,-8.422049,-7.109373,-8.128376,8.573331,3.801506,-3.618607,7.166492,7.445419,4.081974,9.354098,-0.167028,-3.558927,-9.153539],[-6.622585,-6.845223,9.692208,7.381452,-3.757971,3.988977,9.919284,5.537276,-9.287860,-1.805358,4.417463,-6.850705,-4.644697,-4.988437,6.777925,6.304462]],[[-1.443843,3.479511,3.972141,9.378686,3.324386,4.253029,-0.645539,-8.289124,3.511333,-0.424942,5.058771,6.016434,-5.575126,-5.325638,-9.634679,4.642668],[1.027722,-5.123083,9.070359,-9.264844,1.489929,-1.023632,6.486361,-9.258157,6.412498,8.740702,3.999333,5.692794,-0.568554,4.725318,2.562902,-8.502428],[-4.033317,2.446517,-8.688790,-4.443526,-9.350269,4.612585,5.335652,-8.067886,2.558756,6.145740,9.350422,-5.424773,-3.944273,-6.067339,-2.804351,4.418917],[-2.647955,-5.655661,-9.183583,-0.979765,6.253616,-0.710900,0.850094,-7.500791,4.323311,-0.137195,-1.720904,-8.072187,-5.834867,-4.832051,3.359887,4.477525],[7.244456,3.278616,-4.350529,-6.777552,6.614046,4.809789,9.148098,3.945555,6.178732,9.053732,-0.976709,8.660557,8.880292,2.266145,3.221868,-1.433842],[3.268486,-0.945575,7.201589,8.068804,-3.139798,1.962438,-0.806366,-1.156691,-0.894675,7.896422,5.673903,-4.700983,2.895575,-1.371273,-5.245389,3.580511],[-4.443864,-7.668626,-2.610466,-8.040598,-3.699301,-9.661322,1.513240,-5.813054,1.527367,-5.920634,-6.948688,0.229083,8.090602,-2.690710,-2.654711,8.613891]],[[-8.962798,-0.197717,1.600950,4.480688,-6.875584,0.868646,-4.137577,-5.035022,5.405146,-6.492771,0.966592,0.903920,2.730240,-6.663921,7.992467,-7.560060],[6.172388,-9.488568,-0.743954,-8.958371,-2.721584,-2.647225,-6.154558,-2.493663,8.594374,8.920683,-1.482283,6.572647,6.052152,7.309779,6.724331,-7.449159],[-2.821031,-2.780099,-1.097124,0.735362,-8.334541,2.918328,-5.228208,-1.565525,-8.643510,-0.466276,3.480285,6.396174,-1.267090,6.316968,-2.754892,-9.645253],[4.107760,1.956013,-9.910934,-7.137893,-0.334346,1.958038,7.968715,0.074432,6.296606,-1.492224,0.615694,7.093980,-0.191073,-7.368781,-5.254090,1.288691],[3.275012,8.265422,5.448110,-7.678195,8.112413,6.219875,6.692948,9.286276,-6.248828,4.884837,6.805989,3.857230,-6.419011,-3.216791,2.920105,-5.574620],[0.261864,-9.905853,7.349568,-4.975614,-8.660336,7.491410,-0.847680,-1.949524,-9.955726,3.568410,5.891258,7.611979,-1.603436,-2.699002,9.695696,-1.445878],[7.090180,1.794670,3.946609,4.334936,6.857642,3.442341,6.725715,2.563199,-5.448389,1.279969,6.307950,7.980161,7.290728,7.679114,-7.080773,4.701449]],[[-9.781139,-0.671933,-1.268802,9.008693,-1.164984,-3.370192,8.132732,7.629582,-8.893297,4.288687,9.666886,8.637018,-2.488980,6.474441,-6.455283,-8.082235],[2.018398,-1.380373,5.340157,-8.331865,-8.923692,1.016803,-3.387482,4.539425,-6.919841,-4.326416,7.537371,-2.293141,1.784204,-9.133648,-9.058053,-0.213141],[1.002098,4.002810,2.903305,-6.207944,-3.050408,0.280155,-6.606954,9.485583,9.432184,-0.905176,8.472137,-0.721252,-3.814003,-1.371390,-3.424368,2.713917],[8.246643,-3.882249,-5.272590,2.970443,-2.704486,1.556546,4.474507,2.033975,-7.049596,-6.003895,-1.810573,-5.665959,8.399420,7.920666,-1.348592,-6.669240],[-0.867427,-4.463295,1.684838,7.026037,-2.194060,4.333729,-3.642405,-3.724091,-7.289351,-4.541448,4.962787,-1.330478,-6.038154,-5.408161,-9.434633,-7.593617],[1.675116,9.018417,-5.618547,7.293703,7.255901,7.488711,5.180578,-6.091014,-4.323221,6.275863,-4.708103,-0.017624,2.283435,7.274567,1.495132,-5.641923],[-6.867414,-8.618333,0.162825,9.709356,-1.073487,-1.679300,-0.036103,0.682811,9.413813,-5.849844,-1.785198,-6.512479,-4.280197,7.866124,-6.853914,-4.968232]],[[8.113277,9.923731,-7.330676,7.152186,1.624007,0.243675,1.536846,-8.504382,2.896566,-3.324131,-6.269150,0.968543,-9.366931,-6.721893,3.677756,0.161726],[3.745881,9.022303,4.705789,-1.949761,-9.349121,-8.842230,3.875612,-0.218062,7.666097,-5.000172,-6.093600,-0.602597,4.851736,5.792737,-6.989483,6.922681],[6.548947,3.521989,-7.710509,-5.556085,5.902261,-3.536809,4.718081,0.952377,7.430358,-9.934943,-3.959136,-7.042416,-7.785987,-2.850602,-2.840406,-5.456180],[-3.734025,-5.256348,-3.747620,4.343386,6.675160,-7.471706,-1.772728,2.979647,3.566600,3.197245,3.204479,9.929688,6.491046,-0.971528,-3.265909,-9.707664],[-2.843061,9.887719,9.696013,4.251773,-3.702184,9.023625,0.309450,-7.689697,8.759232,-4.026829,0.274158,-9.030102,6.871861,-6.303912,8.657626,-1.883199],[0.396809,-8.599957,-8.362095,7.732374,7.214490,-6.971390,1.051190,-6.592874,-2.012122,2.046039,-3.443676,1.635107,-1.313178,8.802473,-6.040882,-1.235836],[2.178576,-5.059564,-9.854686,-9.264379,-2.351474,-1.785333,2.066393,-2.833394,-8.455564,3.755862,7.667695,-6.335041,-3.774657,-9.487452,-0.306492,-3.186384]],[[3.853869,5.860395,-8.958202,-4.448256,-3.978174,6.255867,5.925226,-9.905039,5.436934,-4.324868,-1.404023,6.346420,7.732550,4.387585,-3.125865,0.719514],[-9.628015,6.224862,2.521736,3.049834,-8.042004,4.135503,4.845464,8.070260,-2.771533,3.792999,8.632354,6.056472,-3.054932,-9.331556,1.885940,9.551755],[-9.024841,-0.985319,-3.590471,-4.317414,-3.044163,-5.839348,2.362911,3.205955,5.194562,-1.189727,7.091377,4.921769,-7.152443,-8.531351,-0.356672,8.362414],[-4.383696,-1.085860,6.850955,2.222640,-6.923140,9.681481,-5.451684,5.309231,-7.011866,-1.136891,-7.204459,2.976163,3.672654,-3.120162,2.342413,-4.791067],[0.467262,-7.334169,8.054229,5.045464,4.316195,8.841415,8.710918,-1.165001,-4.312801,2.011025,-6.173321,1.813909,-0.514338,0.498612,6.530309,3.443265],[-9.372303,-2.372376,9.588187,-6.011391,-0.057771,-7.094930,-2.165916,8.843243,0.255357,5.709720,-3.866045,1.805768,-9.803530,-7.773739,0.224508,1.077325],[-1.536056,3.985850,2.069369,-7.771930,-7.029916,3.112428,4.038110,1.702341,7.414739,6.912888,-5.929327,-0.856446,2.082514,-0.718331,-3.061563,6.349914]],[[4.491825,-2.285757,-8.773313,7.437462,-1.561974,0.160728,6.190603,-5.732577,-3.056256,-0.153489,4.628143,6.899530,-4.698860,8.334902,4.168580,8.704408],[4.211749,1.830855,-4.131636,-7.111698,7.706140,3.048448,9.613150,9.374170,1.422605,-1.906825,-2.232056,4.564500,0.286879,0.771855,4.857501,-2.740248],[6.824569,-9.641408,-9.060562,-9.060791,4.273905,-5.254501,0.090560,-6.910889,-1.164965,5.040040,-8.078120,9.443703,0.452144,8.280208,8.246648,-0.329051],[9.658762,-6.839209,9.247431,-3.950318,-3.753571,2.203712,-8.061725,-6.497070,-1.819555,-9.329568,3.304605,9.652384,-2.842001,6.674917,-6.167934,-8.670896],[9.984157,7.300091,8.368362,5.386750,-3.879939,-4.462032,-1.925582,5.434687,-4.625074,8.082446,7.187445,7.416543,7.115278,0.816573,-2.164921,-2.609152],[9.998736,-0.918726,6.069634,-6.584296,4.202540,-5.068948,-9.037222,-6.521684,0.044970,-6.223310,-5.087760,0.931657,-6.259065,7.038681,-4.788366,-7.418728],[9.648830,0.067080,-3.905622,2.264454,-0.943905,0.066063,9.288496,6.899941,-1.241497,-2.097462,4.912522,-4.680131,-0.074164,-6.798254,3.541463,-8.209191]],[[-1.168670,8.908242,-8.655821,-2.709415,0.048170,6.553428,0.623871,0.671857,-7.541959,0.765387,4.579158,5.130036,9.977425,7.520349,2.680535,-9.728680],[6.442757,-1.353461,-0.819526,-1.428375,0.417804,-1.631382,-0.251880,-6.377400,6.194552,9.775809,9.459275,8.709697,-8.048303,-5.915173,-3.934418,8.395008],[-8.749883,9.853047,-0.635226,-0.055108,4.933890,6.473648,9.790255,-4.239798,5.013339,4.823288,6.946977,0.965820,8.630158,5.828719,-8.298418,8.306161],[-4.249119,2.401341,-5.978856,-3.209180,5.722274,-7.160669,7.029202,6.578335,-1.647062,-1.534725,8.123783,2.970130,3.331178,9.606193,-4.137899,-1.720573],[5.258282,5.173870,-8.170193,-6.875141,1.797186,-1.825318,6.808337,0.498153,-0.343307,3.020957,-7.450802,9.384610,3.735819,3.266554,7.469926,8.866179],[-3.332362,6.325561,-5.924954,-2.236645,-8.784766,4.270056,-7.971241,6.032639,-9.150891,5.867204,3.230170,-8.560952,9.252879,-1.063899,0.788211,8.586327],[0.886534,-0.315294,-8.870278,6.543605,6.164231,5.347563,-7.606340,8.206348,7.305712,3.611542,2.068771,-2.220841,0.751984,0.466371,-7.866635,-0.356499]],[[4.784926,8.739281,8.776183,-9.904081,7.633480,3.409240,-6.310749,-9.011985,7.936830,2.112786,9.781296,6.605931,-3.955727,-4.680173,8.674608,-1.589877],[6.784777,7.074573,6.450746,-4.116160,9.369644,-0.647641,-9.780352,7.729117,-5.042261,-6.866121,-4.026516,-0.360665,-1.725177,8.444916,-1.274459,9.506875],[-1.951736,-0.070681,-4.850493,-3.685945,-6.000526,-3.243072,-0.421340,-5.364532,-4.678722,-6.245915,-5.726156,1.810284,5.862379,6.598384,6.623723,-9.686921],[4.043355,8.469279,6.082411,4.361430,-2.310385,-0.442332,7.935906,2.237274,3.220860,2.122683,-2.088231,-2.433864,9.940867,0.921667,-6.089322,-6.298127],[2.537604,-2.654921,-7.611881,-3.321897,1.710597,3.871695,-5.845459,-9.849626,-4.501683,4.886000,-6.141986,6.678136,9.504629,-1.389500,-8.549792,4.956078],[-7.695083,-4.198340,0.098203,8.706855,6.929597,-0.921381,6.200541,1.869567,-6.564991,5.650198,-0.504854,-4.377220,3.158613,-3.266175,-5.896260,5.086427],[6.923027,6.047754,7.370500,9.518447,2.524314,-4.761653,-5.496282,-2.797541,-5.882399,3.451611,-0.439950,6.680694,5.832769,4.402790,1.711805,-9.069481]]], dtype = "float64")#candidate|401|(9, 7, 16)|const|float64
bop_402 = relay.greater_equal(call_397.astype('bool'), relay.reshape(const_401.astype('bool'), relay.shape_of(call_397))) # shape=(9, 7, 16)
bop_405 = relay.greater_equal(call_398.astype('bool'), relay.reshape(const_401.astype('bool'), relay.shape_of(call_398))) # shape=(9, 7, 16)
const_408 = relay.const([[[-0.001565,-3.921030,8.801009,-0.266711,5.687106,-2.957142,-3.284589,9.474624,-0.839034,3.701418,8.721970,-2.216229,-3.232361,0.210860,-3.371309,2.337597],[-3.219746,-0.093289,2.727874,-1.342562,-4.125164,-2.054736,9.576955,9.973562,1.353155,-5.617944,-2.049734,9.167273,3.254980,9.806551,6.663839,9.728292],[7.922305,7.836794,-7.710821,7.528676,-6.970735,6.646181,9.508341,-0.434268,-3.950058,0.157879,6.541788,4.456462,-2.257452,-2.232134,6.397471,4.520177],[3.522318,9.612401,1.382178,5.228150,4.720647,5.204782,1.374764,9.384808,-3.392747,-9.952660,-0.997534,3.153393,-4.392228,-7.127397,8.632156,-6.738833],[2.249232,-1.915098,8.944949,-1.169494,9.085239,3.394189,7.921431,-0.418391,-7.384532,-1.516775,-1.152072,1.082092,8.677218,-5.270204,1.345887,-1.162399],[5.795813,2.081505,-6.171771,5.049165,-5.324295,-7.177213,6.082653,9.011128,0.462418,-9.202562,8.235886,-8.183407,-9.943372,5.054136,-3.182733,-0.752700],[9.612429,-0.022182,7.300942,6.134847,-2.457733,-4.131291,-7.577906,9.739373,8.129824,3.876042,7.596349,4.166665,-8.087458,-2.319863,-1.866329,-6.142022]],[[-1.664922,3.154224,-9.823801,8.913614,-3.225489,2.146064,-6.407970,-3.860029,-7.407312,-5.365258,-7.836856,2.356711,7.508657,4.343309,-0.880113,3.369592],[-7.843653,4.430760,1.126029,1.018442,-1.626370,-6.203953,-2.662535,-5.281994,-1.119155,-4.308358,-0.731965,1.048079,6.692232,-9.780082,9.546263,7.801080],[-1.048743,-4.398113,9.452888,-1.214627,-1.119876,-0.811000,6.837728,-5.673064,-3.310942,-9.480603,-6.674620,-2.486673,-7.530847,-1.724670,-9.115014,9.645059],[-1.745770,-8.262710,-9.156994,2.901661,4.595181,8.271949,-1.795757,-4.827575,-4.064314,8.968030,-9.316694,0.640420,-2.555324,-8.781658,5.614165,-5.403937],[-8.911435,1.222163,1.456816,5.904233,6.341900,7.154012,-3.488986,-5.501594,5.186439,-0.859785,3.673025,-6.982786,2.724789,-5.972964,6.199528,-8.905863],[5.963632,-0.327727,-9.104347,7.322631,-2.701766,3.802554,-0.829618,7.506022,7.757734,9.611796,5.045148,9.114933,2.281563,0.672102,-8.602602,-7.893812],[-8.352042,-5.354846,-0.319232,-1.669263,-4.564979,-9.186487,2.557089,-2.170914,9.909281,9.832670,-7.213116,3.366435,-2.509281,-1.966432,-2.710142,-6.991918]],[[8.452578,6.422187,-3.581258,-1.648630,6.563335,7.937345,-7.763694,1.022934,4.912118,9.849635,3.871171,3.748506,3.773238,-5.742925,-2.150726,-9.608489],[0.830702,-5.852412,3.071638,5.786226,0.107809,4.101262,-9.131137,9.424685,9.986915,2.672640,2.175374,-2.631159,-2.159056,-5.499966,6.747051,-6.505877],[-2.040638,-1.423178,3.603289,-1.470093,-8.458740,7.265396,-7.912377,7.431698,8.015219,8.632951,7.585102,0.011511,-8.271166,6.463994,0.222723,1.381811],[-3.280484,9.679124,8.203599,-9.916695,-2.840448,-1.576877,-4.395911,-0.176038,0.782553,-5.669630,-4.642211,-4.577603,0.053421,-7.599842,-4.183093,-3.142672],[-6.738542,-9.900385,7.370198,8.033317,-3.412040,-7.134618,1.595313,-7.454619,-1.640291,-2.911637,2.840395,-6.746853,-7.462948,8.227915,-7.406927,8.565904],[9.777975,-2.772014,-0.094259,-0.150697,8.250790,4.699223,-1.780455,5.053212,-8.086318,0.774206,2.447958,-1.899377,-3.387701,-8.341067,5.428835,8.117317],[6.561137,0.168577,-8.410156,4.225205,-5.450751,-3.368980,-4.196998,-0.491027,8.526037,-5.742495,1.938150,-9.321533,-3.982876,-0.635010,-2.975379,2.917499]],[[0.608375,6.926543,-4.246715,4.716909,4.385389,0.790586,-1.333259,-3.462326,5.256015,-7.409407,3.253691,3.610386,2.609524,6.708589,1.672848,3.345840],[9.807524,-5.143747,8.969476,6.241027,-0.807360,7.858576,-2.776679,-7.586564,-8.589752,-4.438769,-1.984866,-0.266504,8.714063,6.567743,-8.973196,1.570874],[-4.488467,5.602648,3.534543,-9.456163,-7.325848,-6.941630,-1.407425,-6.183539,7.249468,-6.701622,-4.534988,9.641549,9.763845,7.035183,-1.505936,6.657035],[-9.012370,-9.394458,8.376330,2.601909,-0.444284,-7.979111,1.669923,-1.545954,5.286274,-1.936482,9.973790,6.970913,-0.619202,-5.810018,2.275518,2.956588],[-4.094689,-3.153275,3.425128,6.426288,6.752227,-0.544042,4.116203,-2.553129,0.385107,-3.857468,-7.109106,6.390115,-4.933035,3.344577,-8.353600,-5.140196],[2.147466,-8.663767,-5.519188,-9.894369,-3.905434,-6.928905,7.440811,-7.541515,0.339470,0.203860,4.180543,9.169283,-2.646801,1.306575,4.238456,-3.861098],[-6.987624,8.797834,-3.274044,3.598316,-4.606411,-5.093266,-6.855419,4.660849,-9.688620,5.181603,3.447301,6.209812,-9.359629,-3.619824,-8.470273,-0.157146]],[[-2.285053,-2.500901,8.975258,1.202621,9.919770,-6.085705,-7.823527,-3.274862,-0.934921,-6.109475,-2.498134,-8.196787,3.883878,-9.392263,8.705556,-4.185262],[9.904582,-8.074398,-1.264429,-6.475793,-1.382331,3.942702,-4.820365,0.359174,-6.907300,3.478544,7.212938,0.970876,-8.444665,5.202305,-1.585308,2.889728],[-0.421295,-4.309891,1.667088,-0.852206,6.917794,0.520036,8.958738,3.850847,-1.287464,-1.763799,-7.553091,-7.472085,-8.223683,-4.605454,-7.799534,-3.793338],[2.957560,9.389307,8.984072,-6.423409,-7.569700,6.730238,-2.425456,9.451876,6.982107,0.573030,5.613571,-9.525980,1.149230,-6.434086,6.321369,-0.120642],[8.765975,4.208768,5.651310,-1.985721,9.250812,-6.334910,-4.606433,3.192072,2.102199,0.906780,-3.422492,-6.185547,-6.066654,9.217553,2.321730,-8.429733],[-5.240963,-9.946042,-0.482771,0.413902,-9.566979,0.429685,9.622122,-1.404165,7.264541,3.430556,4.918743,1.535092,-8.172672,3.357259,-2.780703,-8.113795],[-6.551531,3.487959,4.455945,-2.294634,-5.135374,-6.047954,-6.114124,-5.538350,-2.012310,-8.690819,-7.923949,5.165427,-8.449880,-8.934371,9.590188,8.256062]],[[7.958440,-4.432150,3.160766,-0.472034,-1.413020,6.072562,2.519658,9.245110,0.153133,-6.007789,8.877850,-0.934689,-3.308844,0.425346,-8.124841,5.525879],[4.023601,-0.806703,6.018714,-1.663084,-8.309478,-4.824542,0.526865,0.301832,2.833525,-0.184232,-3.901021,4.320182,-7.997106,-1.081569,9.407354,-1.003077],[5.150177,-0.254855,-0.515986,-4.601327,-0.350822,-6.109377,-0.152476,9.204178,4.316682,8.278718,-1.211127,1.736527,6.814909,9.016961,2.044024,7.913556],[7.434469,5.841520,-0.672785,-2.470927,7.034334,-0.512156,-7.895549,1.380422,-4.033183,7.081561,9.699335,1.282706,-9.619737,-7.671209,-9.969303,-4.573507],[4.525371,9.514626,-3.048814,-2.433176,6.626070,0.107428,-5.514314,4.255021,9.247637,-2.250373,4.505685,8.740341,-8.340101,-6.418452,2.482451,-7.658307],[-5.839085,-9.854495,9.759420,-6.602853,-4.406064,8.208978,3.572322,7.752769,8.735380,1.636886,1.236752,5.009531,-0.424353,-3.730310,-8.217793,-4.505914],[7.546551,6.363051,-9.424773,0.923832,-8.051775,9.185040,9.172823,-3.131287,-1.300690,-7.951594,0.103963,-0.388069,1.966590,6.411630,1.199549,-6.489882]],[[8.620418,-7.060821,-2.272903,-1.684289,-1.041912,-6.006150,-0.173718,-3.204515,-1.267390,-8.337338,-8.227506,-4.945692,5.410220,-4.576818,2.311438,4.279179],[-1.992125,-9.301009,7.445285,7.947474,2.050031,-2.070668,1.152939,-1.892009,5.594667,9.969614,3.079020,8.807410,6.374363,-8.968303,-6.799877,7.349569],[8.936453,8.204629,-3.291634,-2.213580,-3.361763,2.654945,3.608092,-6.423372,-4.388840,5.034311,1.289944,9.563532,-6.215026,5.867487,7.450907,4.880336],[5.042089,-9.535548,-2.139945,5.288196,4.308257,-3.709349,-3.287375,3.197175,-6.200174,4.619309,8.297548,-7.042958,-4.515137,-2.347842,0.127123,-6.764904],[8.275575,-3.688476,7.716272,-3.738467,9.639120,5.799626,8.891696,-0.651637,7.518357,8.971374,-9.645381,-9.579759,-9.902229,9.343787,2.454300,-4.629930],[-0.625851,-8.925312,-4.143189,-5.388240,4.649645,8.161172,-7.571304,-6.997086,2.441894,-8.150545,9.637351,-9.504712,3.356102,4.785824,8.158376,2.330199],[6.189092,1.392101,8.726529,5.607402,-2.341974,9.506051,-8.676367,-0.314468,-9.811360,-1.593603,-6.870088,7.056798,-2.838665,-9.175085,-6.240960,6.353495]],[[7.024500,0.491736,-9.589942,6.166685,8.801586,8.843875,-1.455681,-4.939592,-7.079669,-1.725276,7.677820,-4.487408,0.167892,-7.692763,8.928409,7.803032],[-8.314664,6.196077,0.802894,9.985067,7.929645,-9.944521,4.078878,-7.157150,1.317623,-2.091081,-4.293063,-6.455635,6.130610,4.337730,-1.736300,1.680407],[4.892640,1.669862,7.567437,-3.171981,8.012910,-9.015356,6.137743,-2.192249,2.289584,5.607064,-3.388409,2.848688,-3.903915,-0.270233,1.150676,-1.806771],[-9.974639,4.371759,-6.467035,-2.452720,3.379748,-7.757962,-4.442125,3.715945,7.055032,5.926847,2.408022,2.935140,-3.479346,-7.827974,2.257200,-8.513352],[6.138630,4.284883,6.566096,6.177040,-3.990613,2.821976,2.519132,4.066591,-0.871168,-0.684335,0.892312,6.306750,4.229369,-1.731314,-7.463360,-4.704901],[-9.164573,-2.519174,3.541931,-7.561449,8.315442,-6.936202,4.808110,-3.378821,4.075434,6.691319,-1.965733,-9.225511,-5.324285,5.453240,8.355785,-0.636408],[6.373983,-9.046023,5.213556,5.209741,-8.521777,0.260291,8.201648,1.720559,-1.649329,4.881757,-5.011932,-4.777112,-6.570358,5.572856,4.881594,-5.706403]],[[-1.182055,1.878688,9.784637,0.845726,6.502740,7.144743,-2.344602,6.589225,4.781140,6.673163,-6.467703,9.210191,2.146526,-2.109145,-8.059965,-6.381886],[9.313892,-1.832343,-9.539199,8.160809,-0.086125,-7.731272,2.621011,5.031453,-6.927963,-7.716092,-5.824410,-5.865974,2.896681,-8.259197,0.463538,-1.922186],[2.516089,8.776804,-9.384116,0.337835,-7.771642,8.105854,2.915311,-4.220522,-0.038195,-0.530146,-0.467124,-3.196801,1.799111,-2.152551,2.564503,-5.387575],[2.262777,-5.649565,-0.503337,1.487690,3.636753,-4.238168,0.168482,0.826283,-9.881913,4.625733,-9.081012,-7.558228,-8.648202,-9.496287,5.358875,-3.486902],[-1.178954,4.833648,-2.611759,4.489781,5.271293,-8.388377,2.358017,-6.695249,5.426031,-0.679672,-4.132117,-9.771667,1.219140,-1.986952,7.794644,-2.078494],[-6.899389,-6.876616,-9.586606,-1.266242,2.156928,-6.889060,-8.918194,-0.756622,-0.642983,4.061812,3.025213,-9.546131,-4.585915,-4.605206,2.272988,-2.661187],[-9.787921,4.352870,-4.322374,-7.071772,-4.841703,-1.841889,-1.721616,6.736523,-9.978887,2.046201,-2.067745,-5.789258,-1.206614,-1.980041,0.366907,3.304050]]], dtype = "float64")#candidate|408|(9, 7, 16)|const|float64
bop_409 = relay.logical_or(const_401.astype('bool'), relay.reshape(const_408.astype('bool'), relay.shape_of(const_401))) # shape=(9, 7, 16)
func_320_call = mod.get_global_var('func_320')
func_321_call = mutated_mod.get_global_var('func_321')
call_415 = func_320_call()
call_416 = func_320_call()
bop_420 = relay.bitwise_xor(bop_402.astype('uint8'), relay.reshape(call_415.astype('uint8'), relay.shape_of(bop_402))) # shape=(9, 7, 16)
bop_423 = relay.bitwise_xor(bop_405.astype('uint8'), relay.reshape(call_416.astype('uint8'), relay.shape_of(bop_405))) # shape=(9, 7, 16)
output = relay.Tuple([bop_409,bop_420,])
output2 = relay.Tuple([bop_409,bop_423,])
func_424 = relay.Function([], output)
mod['func_424'] = func_424
mod = relay.transform.InferType()(mod)
mutated_mod['func_424'] = func_424
mutated_mod = relay.transform.InferType()(mutated_mod)
func_424_call = mutated_mod.get_global_var('func_424')
call_425 = func_424_call()
output = call_425
func_426 = relay.Function([], output)
mutated_mod['func_426'] = func_426
mutated_mod = relay.transform.InferType()(mutated_mod)
var_483 = relay.var("var_483", dtype = "float32", shape = (7, 16, 1))#candidate|483|(7, 16, 1)|var|float32
uop_484 = relay.asinh(var_483.astype('float32')) # shape=(7, 16, 1)
uop_491 = relay.asin(var_483.astype('float64')) # shape=(7, 16, 1)
func_257_call = mod.get_global_var('func_257')
func_259_call = mutated_mod.get_global_var('func_259')
call_493 = func_257_call()
call_494 = func_257_call()
func_320_call = mod.get_global_var('func_320')
func_321_call = mutated_mod.get_global_var('func_321')
call_495 = func_320_call()
call_496 = func_320_call()
var_498 = relay.var("var_498", dtype = "float32", shape = (7, 16, 16))#candidate|498|(7, 16, 16)|var|float32
bop_499 = relay.not_equal(uop_484.astype('bool'), var_498.astype('bool')) # shape=(7, 16, 16)
output = relay.Tuple([uop_491,call_493,call_495,bop_499,])
output2 = relay.Tuple([uop_491,call_494,call_496,bop_499,])
func_507 = relay.Function([var_483,var_498,], output)
mod['func_507'] = func_507
mod = relay.transform.InferType()(mod)
var_508 = relay.var("var_508", dtype = "float32", shape = (7, 16, 1))#candidate|508|(7, 16, 1)|var|float32
var_509 = relay.var("var_509", dtype = "float32", shape = (7, 16, 16))#candidate|509|(7, 16, 16)|var|float32
output = func_507(var_508,var_509,)
func_510 = relay.Function([var_508,var_509,], output)
mutated_mod['func_510'] = func_510
mutated_mod = relay.transform.InferType()(mutated_mod)
var_539 = relay.var("var_539", dtype = "uint16", shape = (6, 16, 15))#candidate|539|(6, 16, 15)|var|uint16
const_540 = relay.const([[[1,7,4,6,2,6,5,-4,-3,-10,-6,2,8,10,-10],[-7,-8,6,2,-2,10,-4,6,-7,7,-10,8,2,-7,-7],[-9,-9,1,-1,-9,-7,-2,5,-1,7,-2,2,2,-6,-6],[-8,-7,4,-2,3,9,-10,3,9,8,1,-4,7,-6,-6],[6,-7,-1,-5,5,4,-5,3,8,1,9,-5,6,-10,7],[-3,10,-7,1,1,7,-8,-10,2,4,-3,7,7,-1,4],[-2,10,8,-2,1,-3,-9,-3,-3,-6,-10,1,8,-1,-4],[7,-3,-10,8,8,-5,8,-3,4,9,2,-8,7,2,5],[4,-3,-10,-7,-5,6,7,6,8,-5,-8,8,-1,-2,-2],[8,8,2,6,-4,4,3,-7,-3,-8,4,7,-6,7,-3],[4,5,-5,-7,6,-4,-3,-4,-9,-7,-5,-5,-3,3,8],[8,-7,3,2,3,-5,-2,7,1,3,2,-9,2,-9,-1],[-1,10,-4,10,-5,7,3,10,-5,5,-7,10,6,-9,9],[2,8,7,-7,9,-1,3,4,-1,4,-9,-3,-8,-10,-3],[-6,-8,9,6,2,9,2,5,-7,8,-4,-4,-5,5,-9],[4,-5,10,8,1,1,-3,-6,-2,-7,-6,-5,-8,-3,8]],[[3,-9,-6,4,5,4,-9,-1,-5,8,3,-1,-4,-1,-3],[-1,2,-5,-7,2,6,9,1,8,5,6,-2,8,-9,3],[9,8,-1,10,2,3,-6,-3,4,-2,9,-7,-6,-5,6],[-7,-1,6,8,2,-8,7,-7,2,2,-10,-2,2,-4,5],[4,-4,-6,8,6,3,-7,1,-1,-5,7,-3,-4,10,-1],[-7,8,-1,2,10,1,4,-6,-2,-8,-1,2,-5,-9,4],[2,9,3,-6,-1,-4,10,10,5,-4,-9,-9,8,-7,10],[9,3,2,7,-4,4,3,-8,-1,-7,9,1,6,3,-8],[-3,5,-6,5,-4,-4,-6,4,1,8,-4,3,6,-5,-1],[2,-4,1,7,-3,-4,1,5,-2,5,-4,9,-4,-5,4],[4,1,6,-7,-9,-3,-9,-10,2,-9,-4,-3,10,-7,-8],[2,-8,9,-6,-4,7,7,2,10,-1,-10,-2,9,-2,-7],[-9,4,2,1,10,-3,3,-4,-7,-10,3,-3,-4,-9,1],[7,-4,5,-6,6,-2,-4,-10,3,-3,6,-4,3,3,4],[-7,-4,-4,1,-5,-6,7,-5,10,-4,2,1,3,4,5],[2,3,-6,-4,6,3,10,4,9,-5,9,7,5,-3,7]],[[-9,3,-4,-8,6,-8,8,3,3,-7,6,-8,-5,2,2],[-7,8,-4,9,-9,-7,-7,6,8,1,10,1,-8,-10,4],[10,4,1,8,-1,-8,7,3,5,-5,-9,4,2,4,-4],[6,10,-2,8,-3,-1,7,-6,9,4,-10,8,2,-9,4],[7,-9,-7,-1,3,6,-7,-1,-5,-6,6,-3,1,-6,6],[-6,-7,-1,8,-3,-8,-6,-4,-7,7,8,-9,-10,8,3],[-6,-6,-5,-9,-1,-5,-3,-3,8,-6,3,-10,6,-3,6],[10,-6,-4,5,4,-8,-6,-2,8,9,6,-7,-2,-8,1],[4,3,8,-9,-3,-9,-3,-1,-4,-4,-4,-2,-9,-6,-3],[1,6,5,3,7,8,6,2,6,-8,-6,-1,3,-5,4],[-6,5,-1,8,-4,-10,2,6,5,10,10,-6,-6,-10,-10],[9,1,9,-4,-4,3,-5,-9,-1,-10,-8,8,-3,4,7],[10,-9,-10,3,-7,-4,-2,-9,9,5,-2,-2,-10,-5,10],[8,8,1,8,-3,2,7,-6,4,6,-5,-6,-9,3,9],[-7,-5,4,4,1,-9,5,-6,-2,-8,-2,9,1,-2,-3],[10,-8,5,-3,6,-4,-7,-2,-2,3,-5,5,3,-1,2]],[[8,1,7,9,-5,-5,1,10,5,10,-3,5,8,-4,4],[2,-8,-7,-1,6,-5,-6,3,2,9,-9,6,2,3,4],[4,1,-2,-8,7,10,-4,-8,2,6,3,-8,9,-4,8],[2,-7,3,-1,2,-4,2,9,-7,-2,-4,8,4,2,2],[8,-1,8,2,-2,9,-9,5,1,-8,-3,-7,-4,10,1],[-5,9,3,9,-9,2,-8,9,8,5,6,-10,-1,-6,-2],[5,7,5,-3,5,-7,10,-9,-9,2,7,-2,-10,3,3],[4,-5,4,-1,6,7,-5,7,7,-3,9,-6,6,3,-6],[7,6,1,3,7,7,3,2,-6,-7,9,-10,7,2,7],[6,-8,-7,-4,-10,-2,-4,1,-6,-6,-7,-8,-9,2,5],[-9,-3,-5,7,-3,-10,-6,-1,-10,-3,9,-9,-6,4,-2],[-7,-1,-10,-3,6,6,2,-10,-10,-1,5,4,8,2,7],[-10,5,-9,8,3,-9,-9,10,7,10,-2,9,-8,-5,-7],[-6,-1,8,7,-3,9,-9,4,-8,9,10,-2,7,-3,2],[-5,9,-1,-5,3,9,9,-8,7,-5,-5,-8,-3,7,-7],[8,-7,-9,5,7,1,8,1,-6,-4,-5,-5,6,-5,-6]],[[9,-6,2,-5,9,-5,-7,2,-10,6,-9,-5,-3,-4,3],[3,-5,-10,-4,6,-6,-4,5,-1,-6,1,10,-2,6,-5],[8,-2,-9,-2,7,4,10,-6,-6,9,4,9,-7,-8,9],[-3,3,1,-8,-3,-10,8,-7,-4,1,-6,5,-10,-8,-5],[-2,-5,-4,7,9,6,-8,-1,9,9,3,5,-3,-2,3],[-8,-6,2,-9,-1,-8,10,-1,3,8,-10,-9,9,-7,-5],[-10,7,-7,-7,7,-5,-7,3,5,8,7,-4,-2,-10,-6],[3,-9,-2,-7,-5,9,1,6,-3,-7,-4,-10,3,-3,-5],[10,-7,-6,7,9,10,-3,-3,-5,10,9,8,-4,3,4],[8,-6,4,5,-9,-5,-2,2,-7,-4,-8,-1,-4,5,-2],[-7,-4,-7,-9,10,-7,-9,-5,-8,7,-9,7,-1,-5,-10],[7,1,-4,-10,3,3,6,10,-4,-4,-10,-5,-3,10,5],[4,9,5,-4,-6,-4,-8,2,2,6,-6,8,-5,-10,-8],[-5,10,10,7,8,-2,4,-5,-7,4,-2,2,-4,1,-2],[-2,3,-10,5,6,3,-10,-5,-5,1,-6,10,4,-4,9],[-6,-10,-10,2,8,-3,-6,-7,-7,5,-4,2,8,-7,3]],[[-8,-6,9,-1,-3,1,-1,8,-7,-2,2,3,7,10,-6],[1,-5,6,-3,7,7,10,2,-6,3,-3,-4,-7,-10,7],[3,1,5,1,6,1,-7,-3,-9,10,-7,-6,-9,-1,3],[4,8,-1,-7,-8,-4,8,10,-10,10,-4,3,7,-5,9],[-8,2,-10,-8,9,10,5,-3,-9,7,-5,8,8,-9,6],[1,-3,-10,7,-2,4,-10,-1,-3,7,2,8,9,-5,-1],[8,-7,-4,-6,6,7,-1,8,-9,-4,10,8,8,-8,-8],[6,-10,7,-1,-4,10,-7,-6,4,-6,2,8,6,9,-1],[-2,3,1,5,-10,10,-8,-4,2,10,8,-5,-3,-4,-4],[1,3,7,1,-7,9,-4,2,3,-6,3,-6,2,-9,4],[-3,-1,-9,10,2,-3,-5,-10,-5,-3,6,8,-4,1,-9],[9,10,-8,-2,-8,-6,-5,-10,-7,10,7,-6,9,-5,3],[7,-6,4,5,2,10,6,10,2,2,-7,-9,-4,-3,9],[5,-10,5,4,-9,5,8,-7,-7,6,-3,8,8,-8,-3],[8,7,8,1,-1,-10,-2,-8,-7,-9,2,-7,-2,2,-5],[1,2,1,-9,2,3,-6,10,-3,9,-9,-4,1,1,-7]]], dtype = "uint16")#candidate|540|(6, 16, 15)|const|uint16
bop_541 = relay.left_shift(var_539.astype('uint16'), relay.reshape(const_540.astype('uint16'), relay.shape_of(var_539))) # shape=(6, 16, 15)
uop_546 = relay.asinh(var_539.astype('float32')) # shape=(6, 16, 15)
uop_552 = relay.cosh(uop_546.astype('float32')) # shape=(6, 16, 15)
var_555 = relay.var("var_555", dtype = "float32", shape = (6, 16, 15))#candidate|555|(6, 16, 15)|var|float32
bop_556 = relay.not_equal(uop_552.astype('bool'), relay.reshape(var_555.astype('bool'), relay.shape_of(uop_552))) # shape=(6, 16, 15)
uop_559 = relay.sinh(uop_546.astype('float32')) # shape=(6, 16, 15)
bop_561 = relay.add(bop_556.astype('uint32'), relay.reshape(uop_552.astype('uint32'), relay.shape_of(bop_556))) # shape=(6, 16, 15)
bop_564 = relay.greater_equal(bop_556.astype('bool'), relay.reshape(uop_552.astype('bool'), relay.shape_of(bop_556))) # shape=(6, 16, 15)
output = relay.Tuple([bop_541,uop_559,bop_561,bop_564,])
output2 = relay.Tuple([bop_541,uop_559,bop_561,bop_564,])
func_568 = relay.Function([var_539,var_555,], output)
mod['func_568'] = func_568
mod = relay.transform.InferType()(mod)
mutated_mod['func_568'] = func_568
mutated_mod = relay.transform.InferType()(mutated_mod)
func_568_call = mutated_mod.get_global_var('func_568')
var_570 = relay.var("var_570", dtype = "uint16", shape = (6, 16, 15))#candidate|570|(6, 16, 15)|var|uint16
var_571 = relay.var("var_571", dtype = "float32", shape = (6, 16, 15))#candidate|571|(6, 16, 15)|var|float32
call_569 = func_568_call(var_570,var_571,)
output = call_569
func_572 = relay.Function([var_570,var_571,], output)
mutated_mod['func_572'] = func_572
mutated_mod = relay.transform.InferType()(mutated_mod)
func_257_call = mod.get_global_var('func_257')
func_259_call = mutated_mod.get_global_var('func_259')
call_577 = func_257_call()
call_578 = func_257_call()
func_568_call = mod.get_global_var('func_568')
func_572_call = mutated_mod.get_global_var('func_572')
const_584 = relay.const([[5,4,1,-2,1,5,-6,-8,-4,3,-6,6,3,-2,5,-9,-5,4,6,-7,1,8,6,4,10,10,2,-4,7,-5,2,-1,-8,7,2,-8,5,-2,-5,1,-2,3,-6,2,-5,-6,-3,-5,3,-3,-5,7,1,1,6,1,-4,3,-1,3,-3,10,5,7,7,-2,2,-10,-1,-1,2,4,-6,6,-1,3,8,-10,-1,1,-6,10,-6,-5,1,3,-7,1,-5,3,6,2,1,8,-8,10,4,5,10,9,5,-9,1,6,-7,-2,4,8,5,-7,-5,-8,-7,-10,-1,10,-3,8,9,9,-4,-2,6,-4,-5,3,-8,-2,-4,-1,3,10,-10,-9,-4,-4,9,7,-5,-6,1,-4,-10,3,-1,10,-4,10,-1,-3,-7,-5,3,10,2,10,-5,4,1,1,10,7,-2,-9,6,-9,-1,7,-6,-3,3,6,10,-5,-5,-4,-8,2,6,4,-5,4,9,9,-10,-6,6,3,9,-6,6,1,10,3,-7,9,2,-10,-7,-6,1,-4,-1,-2,6,-7,9,6,5,7,-8,6,2,-9,-4,7,-7,4,-7,10,-6,6,9,5,1,6,8,9,7,-6,5,8,-4,9,9,-5,-8,-8,-2,1,-5,-3,8,-1,-2,-9,4,-8,-8,-10,-8,-1,5,-3,4,-2,-2,4,-9,-6,5,7,-3,-6,1,9,2,-6,-9,5,5,-4,4,-7,-4,3,10,-9,-4,5,2,5,-2,-10,-1,8,-2,-3,2,-9,-4,-6,-2,-9,-9,-4,-8,4,1,3,-8,-8,-3,7,2,4,8,-2,4,-9,-6,5,-3,4,-4,7,-7,-2,-7,-10,5,-7,-3,-3,10,3,6,-10,8,4,2,-3,8,3,-6,-4,-6,-2,-10,7,7,-6,9,-4,1,-10,1,1,-1,-5,-7,6,10,10,2,-7,-9,-4,10,-5,7,-3,-9,8,-9,6,1,-7,9,10,7,2,2,-4,1,-3,-5,7,-1,3,-1,3,-1,3,-8,-3,10,-10,-1,-5,4,-3,4,-2,-8,-4,3,10,-8,8,-8,2,8,2,-6,4,-7,-8,6,8,6,10,7,-5,-5,-10,6,10,-4,5,-9,2,3,-9,-4,4,6,9,-4,-8,-9,-1,-2,1,3,-8,5,8,-3,-9,-1,7,5,-3,-2,9,1,8,-10,9,-7,6,8,9,3,8,-9,3,9,-6,-9,4,-6,3,-5,1,-1,5,-3,1,-2,-1,-4,-8,2,-5,2,1,2,-6,-6,9,6,-7,8,-6,-6,5,3,2,1,6,-7,-1,-1,-7,6,4,-2,10,10,-2,4,6,-5,5,-10,-7,-10,-7,7,-9,2,4,6,-5,9,5,-7,5,3,-7,-2,9,7,6,2,7,-1,-7,5,5,1,1,3,1,-5,7,5,1,2,5,3,7,3,2,9,-3,-7,10,10,4,-2,-3,8,8,-3,5,7,9,9,-9,9,9,-8,-4,10,4,-2,6,10,10,-9,9,-9,5,2,-6,-7,6,2,4,9,-2,4,9,-4,-9,-7,8,-9,-4,8,-1,-3,-2,7,6,5,-5,6,3,6,-2,10,-7,-4,1,10,-6,-7,9,4,9,3,-8,-9,-8,5,-6,-1,-6,-7,-6,-9,2,-1,-1,6,6,-6,-8,-9,10,8,1,-2,-6,-5,5,-7,1,8,4,-2,5,7,2,2,10,-9,-1,9,9,-10,-8,-1,-4,1,-5,10,-2,3,-3,-10,-5,7,10,-3,-1,-3,-1,-8,-3,5,-3,-10,-2,-10,8,-1,9,-8,3,9,-6,3,-9,2,-1,2,2,10,4,10,-2,-4,-6,-3,6,2,-6,-9,7,7,-8,3,-10,3,-5,-8,1,-1,6,7,5,6,-6,6,-8],[-3,-3,-8,9,9,-2,2,-10,-4,4,2,3,-3,-7,-4,4,-3,2,-2,-3,-7,-9,-10,-2,9,8,-7,1,1,9,-3,3,-9,-7,7,3,5,-1,-5,1,-10,5,-9,-7,6,-6,-10,5,3,2,2,-2,-9,5,-7,-8,-5,-4,1,5,-9,6,-9,9,-3,-9,-6,5,5,9,-6,9,-10,-8,-4,8,-5,3,5,5,10,-6,-7,4,-1,-4,-10,10,7,2,-4,-5,7,4,-9,-2,7,7,-9,5,-6,8,-1,-7,-8,-10,-1,3,4,-10,10,-3,-9,10,3,-9,4,6,-6,6,4,-8,2,3,-3,-10,-4,-10,3,-3,5,7,7,-7,-6,1,-10,7,2,-9,-4,10,1,-2,-7,-1,7,2,-1,9,1,-1,8,-2,-9,-9,-1,4,-6,6,-3,6,7,4,-8,-7,-2,9,-6,4,5,2,-10,-7,5,2,4,-6,7,-1,2,5,8,-5,8,-4,1,-8,-2,-9,-8,-5,-8,-3,2,1,4,9,9,-8,1,9,-8,5,2,9,5,-2,6,8,-3,-1,3,1,-3,-1,3,-8,-7,-2,-9,10,-4,4,2,-7,1,2,-9,-9,3,1,-2,-6,-4,-9,-1,6,1,-5,-4,-6,4,8,-2,-8,-9,-1,-7,-1,7,-5,-8,4,-1,-2,3,9,-7,-1,-5,4,-9,4,-1,-9,4,-5,-7,2,7,-4,-2,-8,-9,10,9,10,8,-5,1,-5,10,-7,-10,4,3,-8,10,-5,-6,-6,10,2,-2,-7,3,-7,-4,9,-3,1,-2,2,4,2,4,-4,2,2,-5,6,-1,-10,-9,-8,3,-8,-8,-6,10,4,-3,-8,-6,-10,9,10,3,4,-10,-4,-4,9,-5,-6,-4,8,-1,-4,-7,10,4,-4,2,7,-2,9,5,10,3,-6,-8,-4,-9,6,7,-9,-7,-6,-3,-3,7,-3,-9,4,-2,-1,-3,9,-5,9,4,3,-3,10,-5,4,-2,4,-1,3,9,4,-9,5,10,6,-3,5,9,5,6,-3,6,10,-6,-1,-9,8,-7,-3,-8,-1,9,1,9,9,-5,6,2,9,2,-4,4,-8,6,10,-2,8,-6,9,-5,5,-3,-3,8,4,3,-3,-9,-8,4,-10,8,8,-7,3,5,3,-8,2,8,8,-5,8,3,10,3,-4,10,-9,6,10,-10,9,9,6,9,-9,-6,-8,-3,6,10,1,1,6,1,-9,9,9,-1,-5,10,5,-9,4,-3,9,2,1,9,-3,3,1,1,-8,-4,5,7,1,4,7,8,9,6,-5,9,-5,-1,-2,6,-7,5,6,5,-9,1,-6,-3,-10,7,4,-3,-6,-3,9,2,-10,9,10,-3,2,-4,4,-3,8,10,-4,1,9,10,-5,-3,1,3,5,2,-10,4,-6,8,7,-6,-5,2,-2,4,-7,4,-9,1,3,-1,-10,6,-4,-9,-6,-3,-1,7,-9,1,-7,6,-2,-2,-10,9,-10,5,-1,6,-1,-8,-3,-6,-3,-8,3,-6,1,-9,3,-3,3,8,4,1,4,-8,6,9,2,-2,3,10,-8,-7,7,5,-9,5,-8,1,-10,8,4,5,-7,8,7,-8,-7,5,6,-5,2,2,-8,1,-1,-4,-10,-10,-6,-9,-8,-9,1,-10,-3,-3,5,-6,-8,3,-9,6,-5,-6,-7,-5,1,10,7,8,3,6,7,-4,-10,6,-3,-9,-9,1,-10,-10,10,3,-10,-7,4,-4,5,8,5,7,6,-8,10,2,-4,1,4,1,-6,-6,2,-1,-8,-6,-5,-2,-8,-8,8,10,-6,-7,-6,-4,-7,-1,2,7,3,2,-6,-10,5,-7,-10,8,-10,6,-3,6,-3,-10,1,5,-1,-3,-3,5,1]], dtype = "uint16")#candidate|584|(2, 720)|const|uint16
call_583 = relay.TupleGetItem(func_568_call(relay.reshape(const_584.astype('uint16'), [6, 16, 15]), relay.reshape(const_584.astype('float32'), [6, 16, 15]), ), 1)
call_585 = relay.TupleGetItem(func_572_call(relay.reshape(const_584.astype('uint16'), [6, 16, 15]), relay.reshape(const_584.astype('float32'), [6, 16, 15]), ), 1)
output = relay.Tuple([call_577,call_583,const_584,])
output2 = relay.Tuple([call_578,call_585,const_584,])
func_594 = relay.Function([], output)
mod['func_594'] = func_594
mod = relay.transform.InferType()(mod)
output = func_594()
func_595 = relay.Function([], output)
mutated_mod['func_595'] = func_595
mutated_mod = relay.transform.InferType()(mutated_mod)
func_320_call = mod.get_global_var('func_320')
func_321_call = mutated_mod.get_global_var('func_321')
call_683 = func_320_call()
call_684 = func_320_call()
const_700 = relay.const([[[-9.373967,5.731116,7.270274,-3.821728,-9.795828,0.107867,5.240094,5.853833,-6.830088,4.071453,-2.568970,-7.878326,-2.286349,-1.713413,-6.536043,6.587788],[-6.937112,-1.896613,5.512323,7.422151,7.751845,-5.395508,0.178770,9.213795,8.414105,-4.711864,5.482090,3.394654,9.082122,5.647566,-9.759172,0.145546],[-0.912881,-2.517358,-6.370257,6.929556,3.346914,-9.983003,5.771482,-4.888345,1.194934,9.048051,5.161590,-9.355969,-3.363086,-6.069663,-2.393989,8.678381],[4.382729,-3.484794,1.929543,0.419946,9.827928,-3.230855,-5.259694,1.877256,7.652030,-4.052929,-6.438370,-6.853294,9.728452,9.820828,-7.582764,-7.527945],[-6.375000,5.914046,-3.333738,-6.103511,-1.664277,6.275418,0.481900,-0.297318,4.357013,2.523922,5.015258,-8.513858,8.029705,4.765586,7.627048,9.541153],[-9.979302,0.242866,-2.040961,5.998283,-4.718168,7.143036,7.930939,4.039953,-6.957401,-0.519386,-7.570784,-9.602903,-6.488832,7.875583,4.291424,-1.791170],[7.914823,4.413594,4.906016,-3.299325,0.509739,-1.441103,-2.100985,9.928286,-2.831616,-1.054935,-6.531404,-2.537096,-6.118930,-0.420655,7.751340,-6.198173]],[[2.900333,-2.634562,-0.021269,-5.949843,-5.943697,-8.683283,-4.325089,6.634286,-6.464862,2.612865,9.332503,4.208642,4.214206,5.554609,-5.198871,9.574378],[4.820025,2.053654,7.343070,0.735854,-5.650720,-5.057721,9.254482,9.990047,8.281910,2.048048,1.999588,4.023880,-8.150770,9.918771,-2.337086,-3.513296],[-1.062388,6.455221,-5.085183,9.355597,-2.213114,5.459625,5.550633,4.391262,-4.760751,9.683169,-5.203791,-3.541129,-2.150368,9.360413,5.977306,-8.845841],[4.363513,0.645070,4.688447,-9.892783,-8.336734,6.552763,7.882685,-6.970921,4.580884,9.759975,-1.478820,1.175168,9.507612,8.229167,-0.168235,-1.034376],[1.646224,7.075608,-4.013257,2.762268,-5.062260,-4.623894,8.901720,4.996920,2.423874,-3.394076,-6.243128,-0.261646,5.325555,-0.755268,5.612025,8.491945],[-7.099581,4.638542,5.614618,5.100882,-6.500256,3.881327,6.989896,-4.013625,2.210388,-7.603177,-3.452104,8.253758,8.479916,-5.691016,-8.536223,3.089429],[-3.391542,9.379225,0.222849,8.010543,-6.190115,-2.635315,1.145038,-1.925668,9.211388,9.104599,8.266785,4.173433,-3.102767,-0.897972,-3.832175,-2.436252]],[[-3.050067,-8.677443,-3.696179,9.773435,-3.485953,-9.911536,4.694711,-6.703674,-7.701313,-6.185863,-3.894080,-0.674835,3.694762,2.389113,-6.597842,6.900924],[5.972040,4.120494,9.793541,-6.068561,-6.905405,-4.586432,-2.558302,-5.525495,-5.167564,-2.298861,9.880928,0.951180,8.244259,-0.861383,-5.288841,6.316064],[7.894229,-8.576289,6.187558,-1.973093,0.835542,6.869793,4.769938,-3.730069,8.623377,-8.164778,3.614853,2.410866,-5.340796,3.737133,9.680861,-5.109725],[1.343213,-1.115922,9.613135,-6.889484,9.732853,-9.355860,3.880937,-6.229706,-3.694449,2.344532,-7.715349,-8.076110,-2.390236,-9.810667,-2.129222,-6.354637],[4.566559,2.568716,0.037040,5.792262,2.954008,1.404874,4.034729,9.727227,-2.313840,6.131862,-8.178951,5.391552,4.136434,-0.677742,-6.084380,8.552784],[1.638793,9.349577,-8.075145,6.778343,-0.978277,0.069939,-9.236859,6.319769,8.519600,-7.763991,0.387962,0.964665,8.455134,-2.257548,-1.529065,2.457344],[-3.755325,4.750233,6.555767,8.936563,5.804522,7.411327,0.301898,4.136198,-8.467739,-3.531845,1.613832,-0.839569,-6.957290,6.551806,0.120711,-1.896071]],[[3.254634,-3.818323,0.472245,-3.696697,-4.700139,-9.448035,2.743643,6.751454,5.632611,4.919358,8.080349,3.627156,-1.050874,-9.657721,7.663715,-6.914442],[-2.184091,-5.827369,-4.449905,4.877729,-3.387571,-8.216439,2.912425,9.092376,-1.166948,1.646021,2.656066,7.143287,8.820204,1.119896,-7.856153,4.967237],[-6.768523,-5.975348,9.581288,-8.591188,-6.282714,7.200310,-4.106537,-3.848087,1.691027,-8.504018,0.484985,-4.240100,3.458586,4.835084,2.874062,6.225713],[-1.260541,-3.656616,9.661200,-9.550462,-1.207985,1.027065,-2.208249,5.195609,3.364203,-7.931375,8.260620,-2.860131,-5.006865,-1.563973,-2.709646,-4.492233],[-8.744070,-7.497188,8.426596,6.952818,-0.365992,-7.979190,-8.170837,-8.337628,7.248208,-7.886126,-0.410560,6.535050,8.558655,-8.468069,3.982208,-5.465960],[-9.124037,5.731373,6.940868,6.092774,1.911772,8.054472,3.719598,-2.681187,-5.936665,5.569676,4.286124,-5.885362,-6.551208,-3.263177,7.173831,2.432924],[-0.844832,4.235113,2.010781,8.331501,-0.652854,4.697419,5.818215,-6.777996,-8.976822,-2.789945,-2.351442,-7.441563,3.742513,3.853982,-4.224766,-1.711281]],[[2.472482,-7.005511,-7.009289,-9.876492,-5.375443,-6.042110,5.544464,-2.973994,-4.761066,0.699629,9.456323,-4.201670,-6.870281,3.462064,-6.675177,3.036714],[2.334558,9.216048,-2.272299,-2.793945,7.513864,-7.696525,3.632504,-9.926449,1.265954,-0.561774,-3.721346,9.520933,-6.465823,8.142980,1.376232,8.370319],[-9.025272,-3.140724,-9.187106,-8.062435,-7.735540,-1.406460,5.772675,0.862076,-2.899055,0.911418,-5.102182,1.295569,9.541673,-2.417530,-6.529718,7.663060],[-4.104925,4.252190,-6.173926,-7.071169,-9.805921,-6.889071,4.409598,-5.176342,3.352087,-3.636695,-0.828202,6.629060,-7.088291,-0.557223,8.000311,-7.106409],[-7.583929,-6.202686,6.946974,0.397195,1.505417,9.657106,8.089276,-5.446646,8.500455,0.959535,-7.524107,3.990867,-7.851361,7.360362,6.929202,0.296029],[3.154433,-7.683778,-3.517652,-3.872924,4.477765,-3.042663,7.362022,1.868673,-9.184897,6.852309,0.522297,3.426628,-9.846436,3.933277,-9.771797,3.184721],[-9.309846,-0.066304,3.268237,-8.838125,-2.154554,-6.865213,3.111777,-8.042098,-9.244448,4.701400,-5.753363,9.106905,0.067793,-0.393022,8.434180,-6.754229]],[[9.072146,-5.578582,1.351407,4.670287,2.004654,-7.666403,-3.381683,-0.280772,-4.563089,-5.463250,7.274886,7.404763,4.218380,-3.185517,-8.740519,-9.130107],[-5.013920,-4.848131,-7.073211,0.466495,5.315658,-0.736015,6.221655,-5.050020,-4.251939,-7.865142,-9.324393,8.388825,-0.226213,-0.519414,-4.108769,-9.865878],[8.159600,-7.356918,8.982379,-7.433259,8.073141,-7.472644,0.435985,-6.137643,6.759636,8.791884,5.821434,6.100872,7.118845,-1.332887,7.327664,-8.098342],[6.766085,-5.388439,-4.684120,-6.327329,9.346986,-6.053637,0.462367,0.564906,-1.845134,4.719823,8.879054,5.013036,-4.234255,-5.467965,-5.385025,1.896526],[8.642127,-3.875809,-3.035665,-7.625241,6.394210,-4.681761,7.021216,-1.712694,4.110583,6.292698,-0.523822,0.022315,-7.747862,-3.635773,-0.706727,1.186283],[2.792642,7.893556,-3.378520,-5.228912,1.651810,-1.847356,-1.962714,-3.388238,-6.612813,-5.354293,-2.970140,-2.110874,4.246990,6.284238,-0.485407,0.653213],[2.990690,2.149186,-8.656493,9.578541,-1.406936,4.310982,-0.250845,-5.468619,9.329611,-1.899797,-8.471273,6.496365,2.526941,3.356709,8.747489,-0.923039]],[[-4.040395,-6.473447,8.853074,-0.323720,3.061036,-9.870199,3.631968,2.630058,5.274884,-9.059178,-4.506626,8.270107,-6.032894,9.000994,3.167648,-2.328524],[3.335046,9.999174,8.544129,-9.124820,6.682053,-3.576994,-2.762550,3.886680,5.629015,3.222481,9.569301,-8.295231,-8.260536,9.624170,4.573281,3.398551],[-3.812434,4.667010,-0.934535,4.201567,-3.687907,-7.326808,6.656180,-1.898093,3.012755,-9.256099,-1.774329,-0.480523,-4.771502,-4.493396,-3.904929,-9.875815],[-3.798843,-3.243797,7.497709,-5.670586,3.146254,-0.278184,5.715514,-4.570183,4.778594,0.499554,3.901338,-5.335688,-0.743034,7.131562,-2.415648,4.517487],[4.919750,5.011032,4.611845,-7.535686,-7.588005,7.436893,2.629991,-9.421192,-8.703195,-8.654524,7.713330,5.527098,7.564028,-0.813777,-6.557639,5.632102],[0.121371,5.421962,-0.415263,-3.396724,-4.050833,-4.022404,0.397962,-4.266909,9.502578,2.442086,8.975162,-6.865341,6.854775,-6.775924,-5.078045,6.527095],[-9.169101,5.060259,-8.531151,3.659166,0.410935,-4.174238,-6.570906,0.776172,5.472313,0.151438,0.204350,0.413911,-6.280281,5.042373,2.103304,3.316782]],[[1.299052,2.748264,-0.095798,-0.827524,-2.184288,-5.893918,-0.923820,-4.430759,-2.902069,-6.793089,0.147654,-3.714589,-5.710094,8.595857,-3.727365,5.511125],[5.255858,0.860696,-8.404698,2.845548,-6.377891,2.768091,2.736945,-6.425347,6.505373,-4.877179,-5.432539,1.107216,-2.866010,1.830015,4.710268,-1.108440],[6.931715,-5.402039,8.763761,-0.955669,9.331518,-1.990264,-0.129137,-8.312388,-4.390986,-4.369327,1.782587,1.841574,-9.188881,-9.299633,0.023395,-8.675898],[-7.108363,-5.007212,4.374376,3.988196,7.145149,5.693808,-4.819104,2.620909,-9.518343,3.117318,5.096930,9.107512,8.673768,6.321674,-6.830903,7.240784],[-6.435212,6.660430,4.249022,-2.547715,-1.808238,-2.536463,4.658008,5.208195,1.718915,8.939097,7.651801,8.202882,-2.148326,-7.231498,-7.471264,6.380068],[1.616749,-5.570633,3.649861,8.187270,4.222141,-9.907625,-7.543092,-9.377818,4.377448,-5.232300,9.493341,7.347944,5.861277,-3.409410,-6.050231,-9.719788],[-4.239227,-8.520944,-2.419849,-1.156227,5.213789,-3.267539,-5.642327,3.359544,5.188555,3.548183,9.965435,-3.210678,-7.674773,6.702834,1.647070,-3.026278]],[[-9.890192,6.515413,2.502693,-6.880378,5.670798,-2.810490,-7.168068,1.131342,0.899805,-1.776193,2.391931,7.192875,7.610468,-8.970417,1.078365,1.971371],[2.468267,-0.340927,-6.197595,9.663246,2.698550,9.074506,-3.729922,9.441856,8.848505,-4.515548,8.368661,-5.031996,-8.203716,1.882519,-9.975582,-8.169975],[7.968273,-2.982645,1.786871,2.089304,0.406659,-5.236024,8.889462,9.772741,1.895477,-1.069391,-6.806301,-8.384803,8.888805,-1.923718,-3.566350,-4.441472],[4.153319,1.210051,-8.623686,7.623031,2.491595,1.828195,-6.790734,-4.104041,4.312324,-1.803329,0.328502,-4.874138,-8.815351,-3.892305,4.831819,-6.257217],[2.552694,-3.611280,4.614615,8.448123,5.603138,5.038876,-9.864737,-5.006126,-8.490824,8.752340,1.662081,4.408471,-9.292953,-1.352907,-6.910334,-0.289066],[-9.994887,7.293969,-5.468138,-2.040189,-6.759847,8.605110,8.783137,-3.442408,-4.867355,-2.257051,4.043073,6.220065,5.745086,-4.147484,7.197592,-4.684054],[7.475133,4.152666,-5.034180,9.367267,3.904087,3.101945,-2.550042,2.640575,0.225275,-8.125977,0.284454,-8.471914,5.692249,-1.571838,8.770664,-9.424819]]], dtype = "float64")#candidate|700|(9, 7, 16)|const|float64
bop_701 = relay.maximum(call_683.astype('uint32'), relay.reshape(const_700.astype('uint32'), relay.shape_of(call_683))) # shape=(9, 7, 16)
bop_704 = relay.maximum(call_684.astype('uint32'), relay.reshape(const_700.astype('uint32'), relay.shape_of(call_684))) # shape=(9, 7, 16)
output = relay.Tuple([bop_701,])
output2 = relay.Tuple([bop_704,])
func_713 = relay.Function([], output)
mod['func_713'] = func_713
mod = relay.transform.InferType()(mod)
mutated_mod['func_713'] = func_713
mutated_mod = relay.transform.InferType()(mutated_mod)
func_713_call = mutated_mod.get_global_var('func_713')
call_714 = func_713_call()
output = call_714
func_715 = relay.Function([], output)
mutated_mod['func_715'] = func_715
mutated_mod = relay.transform.InferType()(mutated_mod)
const_763 = relay.const([[[-4.795697,9.582056],[-2.983375,-4.002917],[7.519826,6.379623],[-7.560893,-4.416133],[-6.101484,5.971457],[-5.408346,8.763876],[8.796300,-7.842545],[-8.378610,-0.031635],[4.399132,-7.225406],[-8.632615,5.095667],[1.949515,3.353400],[-4.954723,-3.066305],[2.230201,5.046345],[8.322606,1.564845]],[[-4.379555,6.533312],[4.576036,-9.773505],[8.729184,5.012487],[8.209128,0.990972],[2.488675,-2.526446],[-5.235007,-0.674460],[-3.628794,8.119314],[5.237498,-0.463326],[8.618114,-9.236223],[7.172631,5.033589],[5.356706,-4.301537],[9.919495,-8.580864],[1.063188,-5.651852],[2.246888,7.767967]],[[-6.769025,8.882361],[5.784898,-4.027262],[3.646690,0.579768],[0.775596,4.874231],[1.933993,6.412112],[5.425690,-6.707053],[-6.355718,-1.740244],[5.751265,-0.673124],[9.387869,9.697232],[7.971939,4.519666],[2.807867,-1.420626],[4.941162,6.992755],[7.037829,3.030024],[-6.041022,4.333811]],[[9.921078,-7.283554],[8.150417,-2.030766],[6.404695,5.786236],[3.335102,2.550211],[-6.128534,7.592088],[-9.676973,-4.260774],[8.962674,-4.065540],[3.735765,6.358486],[-7.488088,-9.438600],[-5.583942,-0.020507],[-4.006585,-6.306738],[-5.972487,-5.870331],[5.714588,-0.133258],[5.065194,-4.667538]],[[-2.749654,-8.123901],[-1.917515,-0.157603],[-7.534901,3.600919],[-3.790951,-4.290328],[5.648017,-6.025274],[-1.554713,-4.552432],[0.320902,4.772850],[-3.955521,2.850104],[1.115763,-8.437265],[1.368939,-3.403622],[4.279083,-3.170731],[1.408545,2.205445],[-3.709111,-2.938534],[-6.678185,-2.280311]],[[5.222253,-6.884952],[7.151416,-3.522467],[-8.646035,2.996617],[-8.999308,0.746921],[7.207262,6.986411],[-2.694702,4.330354],[-7.707367,7.208518],[6.463665,-2.550893],[-2.965756,-7.183647],[8.670298,-3.860520],[6.950874,3.379466],[0.133642,-1.519194],[6.395154,0.191729],[-2.878734,-4.218569]],[[-1.048943,7.251570],[9.519170,-9.274718],[5.995747,-3.369840],[0.055748,-5.928690],[-6.316325,-0.893437],[-4.736417,-5.365124],[-0.336474,1.116550],[-6.369859,-3.751396],[0.193429,-1.462610],[2.124471,-1.846046],[7.204681,7.242366],[4.195110,-2.701457],[-4.591628,2.127215],[9.818564,-1.076142]],[[4.513024,-7.663850],[8.710923,-5.779451],[-2.145878,0.826686],[2.240212,-1.328082],[-0.611279,-8.031151],[2.222712,0.327266],[6.254342,-3.497031],[-1.562187,4.543476],[-0.436891,-5.592603],[-6.245006,4.415093],[3.041622,-6.140998],[-2.456830,-9.866150],[6.561066,2.999011],[4.158258,-2.540366]],[[4.777390,2.302944],[5.384300,-4.095235],[-5.662427,7.096650],[2.399478,7.508318],[3.674472,-8.085270],[8.441605,7.965254],[6.478058,4.092915],[1.828044,9.187985],[4.228084,4.228709],[9.817002,-0.711775],[-7.730184,-4.088050],[-7.815347,-1.780747],[-5.832894,-1.259677],[6.316263,-9.364078]],[[-5.032369,8.309653],[4.441077,-0.713888],[9.087259,5.167867],[6.303918,-7.941396],[9.840055,-2.463357],[3.346334,3.595657],[9.839518,7.600854],[1.306666,3.903002],[5.695815,-4.841256],[2.191910,3.258090],[-8.799197,-8.073541],[4.843847,5.953679],[4.494161,-3.805860],[-4.584594,-8.022384]],[[5.276627,9.579500],[7.515641,-1.717151],[7.175400,5.325450],[-3.072782,-6.773542],[2.769680,-4.641838],[3.644264,3.535049],[3.058039,6.277372],[-0.010355,8.900200],[6.432801,-8.385101],[0.368348,-9.061054],[9.104589,-3.327613],[-1.450005,-7.069824],[1.220384,-0.074649],[-4.246869,2.203822]]], dtype = "float32")#candidate|763|(11, 14, 2)|const|float32
uop_764 = relay.log10(const_763.astype('float32')) # shape=(11, 14, 2)
func_713_call = mod.get_global_var('func_713')
func_715_call = mutated_mod.get_global_var('func_715')
call_771 = relay.TupleGetItem(func_713_call(), 0)
call_772 = relay.TupleGetItem(func_715_call(), 0)
func_109_call = mod.get_global_var('func_109')
func_112_call = mutated_mod.get_global_var('func_112')
const_782 = relay.const([-1.149481,5.383883,4.742276,-6.185773,7.191547,9.741684,6.307945,7.020180,5.210271,5.073969,-1.589244,6.874093,8.039448,-2.460422,9.821000,5.621333,2.568042,4.383125,-2.269590,-7.763545,-2.605972,9.562041,5.357592,6.035983,-6.211481,2.839985,7.842005,4.679736,-5.048411,6.770797,5.748127,0.429548,0.787984,6.285300,-3.315084,-7.319500,9.763824,-9.024783,-8.159034,3.014166,-1.381189,2.788512,2.070549,-5.625744,7.687261,8.801928,-5.903254,0.950979,-4.482346,-5.050681,-1.336857,3.590314,-2.433237,-2.013297,-9.456370,6.786796,-2.431074,-0.097894,9.261297,2.756739,-7.864078,4.618323,7.816294,2.510509,3.554755,-2.043202,-8.072157,2.098879,4.008904,0.988180,-9.816055,4.209945,3.364507,-4.287009,-7.549957,5.812968,0.465313,-5.537206,9.499065,-6.305039,6.993093,-5.495121,-4.505895,-4.071348,-5.513732,0.961862,-0.684385,0.851338,-6.479441,-9.526705,-2.083974,-1.726083,-8.310634,-5.661458,-5.556787,-1.890556,-1.629381,6.456315,-4.839686,-6.831033,9.800937,0.224995,-1.867986,0.194569,6.330485,-2.223259,-7.096717,6.796711,6.455683,-2.361198,-6.190744,8.764433,-5.945092,9.885764,-9.983577,3.956462,-4.901830,8.663508,4.212315,6.359065,-8.258018,-1.397364,-9.613824,4.694258,-7.505499,7.877250,-9.404726,7.694216,2.790304,2.973419,-7.855597,3.808969,-7.553161,-1.509599,-1.594417,-7.028776,8.607373,3.550751,-7.374238,7.619350,-7.501755,7.215466,8.042487,2.191263,4.040313,-0.042856,3.991747,-1.844270,-7.974613,-4.534094,2.712784,6.321596,7.404679,-6.932984,6.968318,-0.330752,4.893000,-4.153593,-6.385792,9.774668,-0.514140,-0.849573,-2.388061,9.802516,7.257761,6.798667,-3.021930,3.449606,2.182920,9.324296,0.150376,-1.847071,0.410955,1.611858,0.062358,-7.365795,-0.273690,4.864333,0.033546,9.460059,-7.993124,7.690221,5.204549,3.842586,2.392934,6.373227,-5.001820,8.488248,-6.664527,-4.894122,1.820659,7.923379,7.741550,-0.744567,-6.145771,3.601496,-8.970040,2.119703,9.988881,-7.091418,-9.848958,9.194677,-3.433368,-8.081287,4.240394,-3.364221,9.361489,-2.307752,-7.139163,-2.008710,-7.252183,-5.878755,-3.299098,-6.995416,-2.304378,-9.002535,-3.070957,0.749159,-4.421936,9.568269,-5.797542,9.505403,4.711956,-5.229816,-6.762564,-3.871781,-6.712503,-7.635570,1.185617,-5.449753,4.258232,-7.925642,-3.416311,-6.312329,4.148009,-5.220310,0.314140,-5.088522,0.302547,0.554483,9.476377,-1.453988,-7.479533,-7.500609,2.695378,8.939954,-3.877459,-4.443628,0.793217,6.443807,-1.562917,2.277311,8.199742,8.722018,-8.573751,6.756646,-0.511375,-2.214370,-4.150429,-4.286935,5.475158,-7.754517,4.341850,7.460421,-0.788470,-5.419604,-3.648133,-6.866696,0.849281,6.016455,-6.801232,5.915436,-3.253800,8.990506,-7.899967,1.398305,7.797510,0.188227,-5.504687,-4.264340,-6.920022,-0.288416,-0.959999,-3.492748,-5.560257,1.674427,-9.653845,4.443050,-3.677957,9.498277,9.943647,4.669835,8.813931,9.866504,4.124341,-7.255489,-2.934515,-8.430000,9.087986,-3.944498,-9.895304,2.295668,-9.348724,-3.774427,4.049328,-4.024239,-6.726525,-2.727359,-6.360884,3.944887,2.464329,9.193040,-5.523819,-7.966379,7.935589,2.085350,-8.471883,-6.932065,-4.079989,-8.145132,3.443923,-5.184479,-8.469560,4.134553,-6.493516,-3.824463,-7.851488,-5.212570,1.625589,-3.406373,2.603644,8.864825,-7.299497,5.519781,-9.372781,9.467595,-9.849058,5.557194,-5.117094,6.734702,3.882727,-4.876611,-4.127031,3.846186,3.236044,-0.943778,9.468274,-3.393486,5.186649,-4.560473,9.738837,0.948749,5.964613,-8.974855,4.060238,4.278924,2.148459,-0.098730,-0.479072,-0.880220,-8.561661,-5.418815,-8.750929,2.520595,-1.710169,5.301171,3.120094,7.658060,5.126654,-3.983912,-0.255452,8.926221,5.520919,2.715567,2.247822,7.023285,-1.471636,-3.901027,6.400279,-5.686660,8.428194,4.612678,1.843691,-0.047343,7.384242,5.594131,-9.190002,7.927883,6.310282,2.740887,-6.293474,-5.975001,-1.428691,9.011981,-1.411605,-5.114818,0.311110,0.554201,-1.060450,9.402535,-7.793992,8.635041,-1.747345,1.023217,1.457495,-2.352331,3.290902,-4.300322,2.461739,4.885011,-9.162580,-1.728997,-7.689679,-8.324336,4.522849,-5.252371,-3.337893,-0.700258,-7.588623,-8.411721,-1.467095,-7.930696,0.210380,5.224011,-5.978254,8.006294,-6.872228,0.726021,4.709543,-7.151531,3.279237,-9.128192,-6.729417,-0.475733,-2.440127,0.920267,-5.321249,2.992617,-8.315463,-7.307752,4.700846,0.509921,8.576781,-8.937577,-5.961359,7.775507,7.149946,-7.577484,-0.965797,8.459138,7.375856,8.043840,-8.947175,-9.928403,-3.376936,9.763680,-1.635221,2.104963,3.041470,-9.079920,-2.014420,-4.033845,8.669593,-7.797754,6.337477,4.661853,-3.195268,-4.397705,7.464534,1.539844,-4.461769,0.798972,-6.017056,-1.261871,2.646783,1.483152,1.531962,2.016417,-9.823649,-1.255575,7.502135,6.740481,0.025560,-0.837649,-5.452651,-6.133081,2.206170,3.174578,-1.213246,3.323775,-9.106559,-3.585287,-3.692811,-9.479906,5.528679,4.407822,-4.454107,-6.246874,-5.804270,-3.697410,-0.266374,8.005303,7.661436,2.260952,1.711117,3.951922,-7.789866,4.403851,3.358958,0.376899,-6.930353,-0.816011,9.816993,-3.021903,5.642579,-9.296223,9.723462,5.474889,-3.739197,3.705961,-1.546768,4.452917,-7.807254,9.082384,1.806767,-0.470197,2.002679,-4.974775,1.017785,7.643312,-9.104310,-9.912467,6.841844,-6.307392,6.953529,7.637953,-5.601304,-6.616698,2.708785,-6.197066,-7.066153,2.480018,3.202321,2.403875,-8.905322,-1.344492,-9.731652,0.027584,-3.294705,-4.600058,8.126524,7.770125,-2.128229,-3.651508,-2.807146,-1.737596,2.762822,-7.610223,-5.821053,2.377523,-0.088530,3.046208,-5.619442,8.974912,-6.037722,-6.886358,4.139645,6.079342,2.613312,-5.656784,-3.152687,6.998426,-8.303057,4.535565,9.376962,0.282022,-8.920183,-3.525518,5.528276,8.951800,1.498546,6.317177,-0.740962,6.436299,-7.319827,6.369760,-0.817267,-1.668072,-5.210161,0.753077,-0.032676,-4.933206,1.095611,-6.732960,-9.406757,-9.876111,0.261491,-7.833867,-4.665488,-5.492210,6.885345,-7.009992,-5.249666,-0.692683,-1.829423,-2.661582,8.988813,4.943388,9.295301,8.992708,4.330182,-9.037315,-6.524310,-6.235465,-6.495258,6.802399,-9.244920,5.863005,4.385263,-3.110869,-5.166623,-9.852570,3.542726,-6.170577,7.675739,-2.539617,-1.357749,-4.869888,4.879687,6.552880,8.558065,-7.150025,-9.368639,-1.956315,6.889509,4.993431,8.449771,1.526848,7.989445,5.055890,-2.403004,-5.092806,-4.052254,1.147817,3.565995,7.933854,3.138605,5.183738,-2.275875,4.250495,-1.279587,0.590880,2.107828,-5.619813,-8.611607,6.482246,5.161729,7.854234,-8.704485,0.198649,-3.895335,-5.294649,-1.650197,2.338008,1.363299,9.313661,-2.971841,6.613641,1.820038,-9.739625,-0.946973,-4.243591,8.240733,5.846839,-9.356044,-0.291548,-6.188601,9.702224,-0.413455,5.648541,8.932366,6.799930,1.185797,7.129863,-3.760687,-1.853945,-5.880305,-9.254179,2.137721,4.364526,-6.778930,-4.580625,9.181784,-2.612424,-0.478102,9.210689,-3.914680,5.382662,-3.532434,-1.721172,3.250556,1.454897,-1.468257,8.682246,0.577000,1.221850,-7.720406,-9.466469,4.153036,3.375606,-8.733753,-0.386396,5.094657,-4.131076,-1.594714,-1.703363,-0.473115,9.328132,5.261097,-7.400706,-8.001725,5.005485,3.476393,-5.124558,-0.929488,-3.805884,-8.065537,9.915270,2.706812,0.705559,-2.342974,7.200706,6.089166,5.817126,5.437030,-2.739010,-6.950512,3.996838,3.948234,-5.507264,5.929383,5.170125,7.742521,-1.073816,-8.695154,3.968548,6.216326,8.109236,7.910371,-6.547968,-6.214709,-4.640638,-0.788909,-8.320523,5.350227,6.729911,-8.700275,2.630854,8.073557,-8.629051,1.937197,-0.381329,-7.011984,-4.535000,2.516887,-4.246110,6.372603,-1.022436,-3.296173,0.418316,8.062703,4.804868,4.104177,-1.072704,-5.060313,2.532780,-9.075197,-4.577963,7.011980,-4.377001,6.091244,3.317153,-9.492262,-0.892578,-9.458939,-5.099178,-0.688877,1.209857,-9.546243,-0.978067,-8.134810,4.889396,-1.912130,8.554344,-1.539517,-7.175009,3.458247,-9.308054,3.746368,-2.089494,-3.705909,2.288338,-6.248122,0.535675,-8.409009,8.146352,3.568798,3.285389,8.427286,3.802885,2.479031,9.281475,6.174338,-4.023698,3.605762,8.987643,2.333737,-9.671331,3.971529,1.075319,-0.003164,2.305831,2.169162,4.673156,6.678914,-9.589624,-6.284114,8.449440,4.934725,-4.152401,6.366499,-8.084600,-3.478440,-0.582691,-8.867946,-1.262969,3.657729,-8.045493,-3.486093,0.315525,3.624938,-5.337084,1.932253,4.325254,9.007421,5.389281,8.332283,-6.382288,5.205040,-1.435895,-4.376631,-7.059625,-5.972181,-2.208729,-3.674851,-3.465099,4.598593,8.412941,2.509218,8.261078,-2.738329,5.309242,-0.139269,8.106600,-7.869439,-5.524048,-3.537324,-9.868518,2.193949,-6.197051,-9.230258,0.011836,1.731295,4.847763,-6.508317,-0.835846,4.941924,-4.624079,3.884530,6.049584,9.317430,-6.505171,-9.632693,-2.096813,3.520883,9.265853,-3.864078,9.351547,7.616272,-4.964772,5.993625,-0.483048,-1.721997,-2.543637,0.095622,3.909804,3.739541,-3.307492,9.528833,-4.979889,7.512234,-4.978249,-6.985877,-5.670894,-9.399712,8.865629,9.911727,0.882027,2.418772,7.808342,4.364486,1.359418,-9.875501,5.259912,5.490997,-3.950359,1.525098,-2.706910,-9.299449,-6.916263,5.965542,-2.264627,1.116731,-7.844986,7.681421,2.807282,-5.233370,-6.427455,1.824423,-7.234313,5.369827,8.047095,-0.063722,-5.767990,-0.387417,3.316704,2.548743,-5.984077,1.569113,7.517645,-4.257146,-9.261011,8.551042,2.995201,-4.661390,9.290409,-7.905589,-7.967585,-9.460328,4.508359,5.094076,-1.590864,-9.348118,-0.562369,1.938198,6.637702,-2.773955,9.339645,-2.651297,-6.114671,-6.956281,-9.102414,9.718509,2.540940,7.650929,-4.169528,-0.986512,5.064890,-0.455404,-9.557393,8.266974,8.144888,3.188274,-0.967534,-2.415344,-7.044759,-0.606487,8.155214,-8.529452,-8.258530,-5.398063,-8.877925,5.072149,1.441851,0.665175,-9.420859,8.232337,6.419576,-4.198907,-3.764809,-7.207689,8.107129,5.125403,-5.571857,-8.001787,-2.712335,-9.861577,6.850654,-5.663329,7.928485,-9.265929,4.272499,0.715573,3.111558,-0.548096,-7.194008,-7.544484,7.725521,3.095265,7.545323,-5.555098,-2.828315,7.060896,3.747613,-7.417340,6.130951,-1.231672,0.674689,0.162483,4.853776,-6.399972,1.424047,9.853025,3.603429,-1.485919,-8.540051,-7.493679,9.758910,-2.369642,8.543206,5.618648,-6.407048,2.993051,-9.132340,-9.287738,-1.963778,4.474678,6.792616,4.706828,6.563687,-8.741892,-3.734411,-1.485337,-1.498240,-4.923743,-1.757652,-1.079163,2.025730,-7.754771,7.507092,2.397425,6.582663,5.613190,-3.632821,3.174576,-2.921109,1.662237,-2.758997,9.925378,0.141645,2.584119,4.648304,-8.801176,4.898271,-8.025693,4.983635,3.785104,9.958388,5.807136,7.274584,8.911744,-4.102139,-5.275528,5.329029,4.622761,-3.786939,-3.894539,3.093450,-7.501358,8.035734,8.121625,4.092612,3.536312,2.740152,-6.191779,-3.822552,-9.957497,-9.051089,9.651486,-7.383272,-6.541583,9.073735,7.704614,5.351217,-8.112687,-6.142978,4.449662,-6.602485,-3.466636,-1.511194,-0.907059,4.970012,9.368923,6.159999,1.095178,-3.493288,-3.141893,-4.590602,-3.518561,-9.497373,-0.326747,-3.891686,-9.938731,-1.782872,-4.298166,8.463630,8.787384,6.919584,-8.451883,-5.795683,5.139201,-8.413680,-4.542495,5.949583,-6.346207,3.978686,-8.225916,0.859990,-5.024006,-7.278729,-4.449154,3.148581,-4.934101,-8.812778,-5.385067,-4.484747,9.352143,5.813390,3.783934,-9.093386,-0.133865,-8.462764,9.801037,9.694629,6.548385,-9.982730,6.563304,-8.050200,9.437363,9.107454,7.940337,2.487310,-8.124435,-9.258750,6.883650,3.165654,5.136515,-2.662483,5.527673,-8.280273,7.298845,-7.020867,7.835060,-6.142155,-8.661127,-5.664722,9.008290,-3.188174,-9.992096,1.194586,-3.319523,-8.939118,-8.737104,-0.033104,-6.019636,1.475012,-2.247447,7.576538,-5.951459,-7.716568,3.539702,-4.568794,-7.784448,-6.055949,1.180271,-9.057822,-1.085900,1.155680,0.994359,6.792458,8.077346,-8.581304,-8.034123,5.268165,8.591472,8.280528,-3.026134,-8.809984,3.487402,2.944474,-7.468146,-9.895584,-1.644143,-1.916512,8.202203,-4.521110,-6.425498,-5.796774,-4.963230,8.304321,0.888048,-2.826029,-3.764198,-9.304057,7.409944,-6.912532,7.671417,-1.265681,4.322570,-9.707575,-6.479904,9.068635,6.076386,-6.923801,9.873077,9.729370,-9.878831,-8.973922,-8.978820,-4.281015,-7.669064,-4.354672,0.267406,-8.179215,4.936945,-0.514496,6.519989,-3.934959,7.482495,-4.404412,-1.258509,-6.703848,0.840880,6.461649,3.796988,3.939592,-5.319258,-2.551015,-3.169905,-6.683856,4.715562,-5.430113,-1.603077,1.098523,5.025552,-0.025188,6.614460,-8.986540,7.983433,1.271132,-5.968671,9.317432,-9.937753,-1.085453,-9.122015,-8.240129,0.371202,-6.459410,4.240107,-9.457972,2.334148,-9.175837,5.770873,7.619809,-5.301698,4.660796,8.927937,5.718935,-3.409050,-7.821717,6.891750,-4.595131,4.702603,-7.226580,-0.385924,6.102672,-1.977234,6.466672,3.336258,-8.209008,1.612751,-6.702036,-9.290652,-8.897414,5.477597,2.201134,6.419208,-8.538627,-8.512758,2.119958,9.072083,-2.028895,-6.984687,5.225953,-7.227408,8.327080,1.547681,-4.835036,0.653350,1.676061,-5.217983,8.787281,-5.698720,-9.407317,0.005804,-8.135373,5.340581,-0.350036,-3.783092,8.055931,4.339139,-5.729425,-3.937798,2.181615,2.449637,-8.874928,0.896124,6.354492,1.992774,6.633063,3.909528,2.575856,-8.024731,-6.261528,7.011915,-4.251631,-4.967970,-4.401175,1.656053,-2.393245,-7.951936,-7.155075,1.745063,1.193335,-0.790406,8.809241,-3.318733,-6.960710,-3.362702,6.324834,-9.493085,-8.274089,-1.677549,2.291833,-2.229955,-5.479807,-2.661588,4.537757,-5.012439,6.687056,9.574412,-4.354973,4.542674,-1.741862,9.964329,-6.915433,4.748367,-3.241309,0.689635,-0.810596,-8.297040,-5.712056,0.550927,-8.121144,-7.532097,-7.083677,-6.124713,-9.504505,6.478389,8.157227,-3.862538,-3.464044,-0.512990,-4.674078,-9.797339,-2.788230,8.676893,-1.919983,-6.885336,3.910723,-0.296367,-6.903635,-6.309211,-6.007959,7.663798,2.115788,4.287778,-6.253869,-8.297263,1.667504,2.922376,8.205462,-3.865584,3.387673,-8.225661,-8.414626,6.985333,7.949115,5.273644,2.787836,0.331357,-8.959870,0.145035,8.559208,2.888141,-3.200686,-5.761861,-1.104402,9.656430,5.429438,-1.708225,-3.091079,-2.447975,0.094083,-1.175635,-3.219044,2.533298,-0.686789,0.403216,2.360071,4.427102,7.713000,0.246236,-4.573059,-8.070102,1.662784,9.594259,-1.363921,7.284482,9.953417,-7.044645,-8.830377,3.799680,-5.374721,-9.098331,4.051546,-8.920959,4.568662,-1.949623,-5.298205,1.727147,7.620381,-8.535813,-9.199724,-6.520042,3.895463,0.400390,-5.689108,-2.861500,-7.054107,-6.501839,-7.913105,-4.439500,6.955932,-4.328164,7.796801,4.371911,-3.489575,-6.221743,6.774109,3.345237,-3.830237,-2.730615,3.282974,5.811513,2.767286,2.555019,-2.349141,1.205289,0.001800,-4.011474,3.964799,8.546441,1.500684,-1.312835,-2.336963,4.833657,2.336070,-1.047098,-9.075300,-1.667592,4.699071,-9.994484,0.844277,3.397267,8.755948,-2.175930,1.229961,-7.406020,0.870305,-7.896241,-5.572293,-2.707463,1.218526,-8.305853,6.824328,-7.616587,6.646870,-5.746922,-6.971735,8.317112,7.663256,7.205160,7.650902,4.158921,-3.276549,5.278690,0.236625,-7.446758,-9.066808,3.230528,3.890168,-2.791446,-2.876748,-8.753121,1.330024,-0.915722,4.703736,5.231087,8.149469,7.250677,-3.923020,3.971474,4.530432,2.762997,-1.495813,7.234873,-3.866317,-3.562001,-7.224239,5.082016,-2.879167,1.604765,4.489435,6.046915,6.634812,5.484460,3.475861,-3.648650,-8.453652,-3.359171,-8.627447,4.494783,3.934057,0.924018,-5.863528,5.005656,-0.396654,-2.664737,-6.062119,-4.219941,-1.532218,4.347383,-2.505653,-4.236725,4.566167,-4.783086,-0.439937,-9.918483,9.206199,-9.473201,5.778251,4.585905,-4.992867,4.078814,1.436374,-9.346892,3.912742,3.656205,6.544085,3.263297,-5.152261,-6.838719,5.253724,-7.733787,-3.791880,-1.900427,0.283018,1.204503,7.206588,-5.831137,7.948867,-2.212196,-6.964905,-5.624224,-5.872930,1.451492,8.716332,0.002413,-1.697377,-8.694197,-0.167278,-4.024448,-8.309931,9.565459,9.755871,-1.912285,5.091853,3.503578,-7.565088,7.580229,7.817037,4.027685,4.367753,9.269444,-7.214767,-3.205562,-4.944646,-8.315679,0.032604,-1.680690,3.786396,0.664024,-1.394736,0.372401,-9.786839,5.355671,2.103447,2.325843,4.760737,-6.193949,-8.111818,5.503811,-7.159875,6.716936,6.727276,-8.121325,-1.815019,4.940098,-5.213310,9.740155,-6.100305,2.237255,5.804992,-3.748875,7.132244,-1.939755,0.394742,7.575468,-1.048989,5.648566,-4.045037,-6.341072,4.683664,5.461044,-0.502168,9.818255,5.415750,-2.942016,6.507070,-4.204338,-8.714014,-0.988033,-3.459611,9.168842,-2.159743,-5.464915,-0.575285,2.829878,8.762334,1.401267,7.042905,-9.500242,6.722547,6.503030,0.580838,-7.006375,-5.523942,6.307252,-2.116312,1.817729,-1.913450,4.408955,8.156561,-6.204332,-5.501629,-0.967353,-6.399154,-5.125372,-3.906904,-2.195992,1.779056,6.734228,8.664046,-0.812010,8.190335,-1.079552,-6.522931,-6.394002,-6.939060,-7.515941,-9.392077,-6.561819,7.719301,7.355158,-0.706179,2.485470,-0.591960,-2.195473,5.378770,3.753254,-9.091496,-7.220589,6.282515,-1.739146,-2.982270,-7.173167,-0.350097,1.706757,-1.859483,6.325925,1.837093,-7.718303,2.478543,5.597782,-2.144182,2.504553,1.823437,0.145996,-8.347496,-9.532245,-5.888892,6.947870,-6.070196,-7.590460,5.406549,5.581898,-3.824179,-9.105631,-1.553524,-0.610849,-3.758814,-6.888229,-1.163924,9.855248,3.891770,9.304119,-7.547726,-8.316439,2.767634,4.969808,-6.430590,7.772450,2.653434,-8.318038,-3.700984,-9.767112,-6.269074,-5.576681,-2.710843,3.594563,9.570284,2.137461,-8.576110,-0.519374,-7.485164,-4.861935,9.255628,6.824170,-6.897321,-1.062286,-8.084345,9.804722,1.676781,6.566179,6.309374,-6.293671,3.335752,8.614815,1.824278,-1.835873,1.107687,1.924042,-9.876864,4.115046,-3.802569,7.132164,-3.598281,-4.844409,-1.706655,9.157411,-2.059879,3.094282,4.423892,9.412619,-5.143561,-3.381035,8.754242,-5.700686,-0.140594,-0.259327,-1.627872,-9.242145,-5.370667,-1.892119,-7.401220,5.412728,7.610404,4.949559,8.565917,-6.622732,-6.920133,3.100886,-3.392481,6.880529,-8.260829,0.436206,-5.503371,4.057143,-4.815106,3.594250,-4.759059,-1.756276,2.880886,-7.533472,-1.818774,3.935948,-6.700046,-4.092553,-9.302127,3.294690,6.184880,2.230619,-2.117298,0.046091,5.429728,-2.805566,6.044809,7.143471,-7.101055,2.622010,-7.264628,3.613066,6.998213,1.564093,1.812336,-2.855367,-4.867515,-4.683302,8.409458,4.068526,9.064304,-9.706506,-6.158264,3.184493,4.762875,-5.967242,2.669979,-5.826529,1.536332,5.255115,0.137468,-3.405929,8.054693,-1.392086,-4.446622,7.728533,3.931038,-8.274573,-0.988811,-8.490671,-3.700692,4.137194,-3.901312,-2.148520,-8.999221,8.855849,-7.783624,6.105110,-1.465539,-3.155517,2.984563,-2.285610,4.895274,9.651411,3.098436,6.616092,-8.530447,0.864001,7.171592,-1.524414,8.245616,2.093577,9.282019,-5.416456,-0.912996,-6.180505,-3.892293,0.677868,9.464850,3.889858,-7.289324,-7.425887,-0.621761,-6.233685,-9.234202,2.143933,-1.275834,5.913053,2.853821,0.331662,-2.756041,9.816536,5.903072,-5.454710,2.341212,8.272284,-0.311148,-0.475876,5.762669,-6.669696,-0.956454,-8.854078,-3.137577,-2.918465,8.975483,-5.734972,-3.122929,-8.478080,-7.555006,-1.511596,2.943477,9.999634,-7.611339,-6.517968,-7.839842,0.355891,-4.111010,6.268585,8.786083,-5.639259,-0.708400,-6.344320,-3.812918,-5.443735,3.796736,2.754505,-2.231240,-8.853139,-9.089764,-6.891368,-9.320881,9.898960,0.526514,7.705039,8.239484,5.864303,-2.609890,-6.295478,4.166716,0.824705,4.787694,7.379597,-3.080234,-6.109617,-4.604849,0.102776,-5.437694,8.573147,-5.883041,-0.586091,-2.300200,8.569899,6.245433,9.511782,-6.116339,6.928394,3.707721,4.595396,0.741929,0.213833,-8.689834,-9.795462,2.493699,0.023060,-4.174144,6.031082,2.851170,-3.272134,-1.333410,8.664534,-1.716420,4.325780,0.612760,8.388398,-7.023339,-7.309385,-5.228781,-6.220676,-5.364621,3.569628,0.255457,0.397866,7.207933,-5.937853,-0.547745,-8.404585,-2.730714,-1.891535,-2.368314,-7.636751,-5.059412,5.842383,9.568644,4.533535,1.300192,5.151638,6.341980,-5.838791,-3.722187,6.159978,-1.827436,4.724302,4.743415,0.815530,-1.408515,-8.092107,-2.186479,0.173564,7.770904,-0.660312,6.385017,-4.497632,-5.052665,5.905521,7.286491,4.897832,-7.939258,-3.175541,5.541336,2.015419,-0.731181,-2.543966,7.525012,-4.504851,-9.101518,-6.778756,-6.402873,0.950065,1.108882,7.485477,3.988451,-8.364396,-8.323617,6.107170,-6.448093,0.855149,-7.984679,-5.266591,2.982831,7.801218,8.523841,4.866015,-3.364766,-3.195387,7.072829,-5.711927,7.138840,-2.693598,7.675262,3.912708,-6.799847,-1.184959,-6.967218,-2.526388,-6.967973,-5.582156,1.400164,7.201165,-6.660439,2.856260,-6.252289,-0.594854,5.164317,8.611296,-2.498402,-3.362300,4.631166,3.528579,7.094740,8.630684,8.594706,0.524189,6.744136,-8.137434,1.523357,6.501693,6.779901,7.940645,-1.048170,-6.595947,5.284451,9.061367,1.658638,-6.282388,-4.701901,-1.804688,1.680747,2.966620,6.411018,-6.354912,4.997779,-7.123392,3.439530,5.651042,-3.386847,-4.024186,6.345569,-8.502027,7.104193,8.796744,-9.992745,2.142299,-6.391345,-4.373736,3.449802,-4.768458,-8.094148,8.361895,-9.736374,2.183054,-9.222160,-8.981377,2.168461,2.828931,0.236246,-8.991148,-2.385544,-5.457923,-4.197074,-0.196664,9.778981,6.158414,2.459096,-3.454527,9.199678,-1.485537,9.015845,0.512372,1.003057,2.696627,-1.359191,-3.804627,-3.798691,5.222884,0.764558,-7.774930,-3.407422,-6.475172,-4.811231,7.704542,-3.121849,-6.826698,-0.090607,-0.514860,-0.737621,-8.283302,-1.806065,5.503620,0.021754,1.274405,6.545321,-0.952929,2.143648,1.599707,7.348042,-0.696333,5.482856,6.015796,-4.418327,0.718972,-8.711814,4.177819,5.489153,6.036736,2.859594,3.090159,-8.461812,-0.575131,1.549870,2.735762,-7.565533,-7.882807,-2.130328,1.014902,-6.538138,4.220196,7.149298,0.557862,-7.180906,4.789445,7.466059,-8.660471,-8.024559,-9.614176,-0.894693,-9.896951,6.190037,-0.880786,5.685690,-7.685659,4.884156,-3.656526,8.221509,5.409237,-8.225830,2.303429,3.863328,9.910169,1.240434,1.532333,0.614648,-9.821126,9.625310,4.495452,9.426272,-9.621632,1.116559,7.310572,-6.380188,-7.635161,1.253494,-1.790439,2.641271,9.915332,0.309845,2.785466,-8.598644,5.300144,-5.282201,-1.484670,9.624646,-2.933093,6.674975,6.288184,-6.574433,-4.385542,0.928317,0.470248,-5.413603,1.903036,4.790398,2.964253,7.142102,9.090867,0.553148,1.579648,-5.884343,1.001552,9.604544,8.496575,4.692729,9.184495,3.148501,7.103441,2.437278,0.854074,3.288667,1.620988,-3.815042,0.409330,-3.709798,-1.395788,-9.057760,1.316544,-4.089554,-4.045413,-8.161376,-4.214743,-1.425611,-9.594770,4.433260,-7.800890,-8.049013,3.971216,3.268062,-9.413534,0.347557,-6.180699,-8.694003,0.988241,7.312941,-3.800645,6.491123,2.694840,4.882528,-1.288804,1.203614,5.278365,-6.119501,-5.739382,6.596349,9.672542,6.895586,5.557321,4.748709,-1.701401,-4.347021,1.565672,-7.224234,4.002475,-2.838119,-8.572542,-9.485514,6.305004,-0.766162,-7.634518,-7.231181,-6.879917,-0.879297,2.642559,-9.383088,-3.453741,1.474641,-1.495054,-3.383555,6.844328,2.798735,-3.563579,8.413364,-4.964325,-8.646556,-2.348542,5.651929,-4.463273,-4.857822,4.353914,-7.774881,6.202644,5.022814,7.446851,7.674220,-8.790476,-5.537951,-6.394172,-8.837133,4.765465,-4.762325,6.163445,-3.716185,5.898350,-9.650091,1.668040,-2.372658,-3.021006,-9.067944,2.663311,-0.181684,9.856918,-4.535980,-6.188207,-3.733231,9.300010,5.505962,-0.675375,8.148983,-0.801083,8.741646,-9.969127,-7.827627,4.491001,-7.640559,-1.778133,4.887428,4.917839,-8.344067,-0.458090,1.161854,7.306415,1.557595,-4.334867,7.609523,-1.304517,-1.243153,-4.347369,5.460021,0.531725,-4.371876,-5.628820,3.344012,7.153295,2.729828,3.444633,-7.504432,-8.354449,-3.070865,-1.815437,4.294418,-7.590225,6.611530,9.707557,6.088044,-2.570831,-1.645162,3.109219,-5.526034,1.268261,-7.731802,-7.566230,6.142144,-6.019257,1.551592,9.226534,1.371189,-9.049795,-6.600435,0.486506,-5.568247,4.395788,-5.629107,5.349679,-0.169846,2.324692,3.205228,9.759543,-6.597877,-6.901206,-5.046690,-0.703622,-9.953216,-4.194103,-2.587396,-2.589385,8.236740,-3.851694,-9.748425,-4.729977,-7.157609,7.797235,7.501555,5.268947,5.919310,4.145997,9.714763,8.402253,-3.070697,1.107977,-5.937361,9.196325,3.358048,0.741524,0.786286,-8.790769,9.328978,1.017922,-5.329994,-4.270058,8.870236,4.775740,-8.363392,-6.271307,-0.974086,2.103377,4.726103,-9.653462,-5.720122,-1.045370,6.131285,-0.166829,-7.334813,5.570599,-6.555374,-8.300166,8.961446,-0.388401,6.028613,-7.911449,-0.210075,-3.441277,7.951777,3.553590,-0.921390,4.280173,-5.660842,8.471898,-2.359698,-7.858866,-3.937149,-8.015627,-6.705446,0.382009,4.076466,-8.881483,-0.081006,4.824145,1.928608,6.469922,-7.486318,-3.910947,-9.925141,2.937846,-3.627696,1.172344,9.710403,4.519361,5.568151,0.168009,-4.377817,-2.581658,-3.063944,-1.832029,-3.776671,8.635871,7.965245,-0.136823,3.804684,-0.928266,6.373682,9.105940,8.670535,-2.491581,2.919553,2.087418,0.194517,-7.697008,2.066661,-8.585853,5.273579,-8.771413,3.745614,-8.846818,-6.373935,-2.106631,3.860934,-4.528530,-1.788397,0.050831,-3.778734,-1.406259,-6.474323,0.604964,5.370886,-3.706503,-7.826910,4.076575,0.713202,-2.046088,-7.900079], dtype = "float32")#candidate|782|(2548,)|const|float32
call_781 = func_109_call(relay.reshape(const_782.astype('float32'), [14, 14, 13]))
call_783 = func_109_call(relay.reshape(const_782.astype('float32'), [14, 14, 13]))
bop_785 = relay.right_shift(uop_764.astype('int64'), relay.reshape(const_763.astype('int64'), relay.shape_of(uop_764))) # shape=(11, 14, 2)
bop_789 = relay.floor_mod(uop_764.astype('float32'), relay.reshape(bop_785.astype('float32'), relay.shape_of(uop_764))) # shape=(11, 14, 2)
func_387_call = mod.get_global_var('func_387')
func_392_call = mutated_mod.get_global_var('func_392')
var_793 = relay.var("var_793", dtype = "uint16", shape = (240,))#candidate|793|(240,)|var|uint16
call_792 = relay.TupleGetItem(func_387_call(relay.reshape(var_793.astype('uint16'), [4, 15, 4]), relay.reshape(var_793.astype('uint16'), [4, 15, 4]), relay.reshape(var_793.astype('float32'), [4, 15, 4]), relay.reshape(var_793.astype('float32'), [4, 15, 4]), ), 0)
call_794 = relay.TupleGetItem(func_392_call(relay.reshape(var_793.astype('uint16'), [4, 15, 4]), relay.reshape(var_793.astype('uint16'), [4, 15, 4]), relay.reshape(var_793.astype('float32'), [4, 15, 4]), relay.reshape(var_793.astype('float32'), [4, 15, 4]), ), 0)
func_713_call = mod.get_global_var('func_713')
func_715_call = mutated_mod.get_global_var('func_715')
call_796 = relay.TupleGetItem(func_713_call(), 0)
call_797 = relay.TupleGetItem(func_715_call(), 0)
uop_800 = relay.cos(uop_764.astype('float64')) # shape=(11, 14, 2)
uop_802 = relay.sinh(var_793.astype('float32')) # shape=(240,)
output = relay.Tuple([call_771,call_781,const_782,bop_789,call_792,call_796,uop_800,uop_802,])
output2 = relay.Tuple([call_772,call_783,const_782,bop_789,call_794,call_797,uop_800,uop_802,])
func_806 = relay.Function([var_793,], output)
mod['func_806'] = func_806
mod = relay.transform.InferType()(mod)
var_807 = relay.var("var_807", dtype = "uint16", shape = (240,))#candidate|807|(240,)|var|uint16
output = func_806(var_807)
func_808 = relay.Function([var_807], output)
mutated_mod['func_808'] = func_808
mutated_mod = relay.transform.InferType()(mutated_mod)
var_835 = relay.var("var_835", dtype = "uint64", shape = (8, 14, 13))#candidate|835|(8, 14, 13)|var|uint64
var_836 = relay.var("var_836", dtype = "uint64", shape = (8, 14, 13))#candidate|836|(8, 14, 13)|var|uint64
bop_837 = relay.bitwise_and(var_835.astype('uint64'), relay.reshape(var_836.astype('uint64'), relay.shape_of(var_835))) # shape=(8, 14, 13)
bop_843 = relay.bitwise_xor(var_835.astype('uint64'), relay.reshape(bop_837.astype('uint64'), relay.shape_of(var_835))) # shape=(8, 14, 13)
func_594_call = mod.get_global_var('func_594')
func_595_call = mutated_mod.get_global_var('func_595')
call_847 = relay.TupleGetItem(func_594_call(), 0)
call_848 = relay.TupleGetItem(func_595_call(), 0)
uop_854 = relay.sigmoid(var_836.astype('float64')) # shape=(8, 14, 13)
func_806_call = mod.get_global_var('func_806')
func_808_call = mutated_mod.get_global_var('func_808')
var_862 = relay.var("var_862", dtype = "uint16", shape = (240,))#candidate|862|(240,)|var|uint16
call_861 = relay.TupleGetItem(func_806_call(relay.reshape(var_862.astype('uint16'), [240,])), 3)
call_863 = relay.TupleGetItem(func_808_call(relay.reshape(var_862.astype('uint16'), [240,])), 3)
output = relay.Tuple([bop_843,call_847,uop_854,call_861,var_862,])
output2 = relay.Tuple([bop_843,call_848,uop_854,call_863,var_862,])
func_873 = relay.Function([var_835,var_836,var_862,], output)
mod['func_873'] = func_873
mod = relay.transform.InferType()(mod)
var_874 = relay.var("var_874", dtype = "uint64", shape = (8, 14, 13))#candidate|874|(8, 14, 13)|var|uint64
var_875 = relay.var("var_875", dtype = "uint64", shape = (8, 14, 13))#candidate|875|(8, 14, 13)|var|uint64
var_876 = relay.var("var_876", dtype = "uint16", shape = (240,))#candidate|876|(240,)|var|uint16
output = func_873(var_874,var_875,var_876,)
func_877 = relay.Function([var_874,var_875,var_876,], output)
mutated_mod['func_877'] = func_877
mutated_mod = relay.transform.InferType()(mutated_mod)
func_424_call = mod.get_global_var('func_424')
func_426_call = mutated_mod.get_global_var('func_426')
call_893 = relay.TupleGetItem(func_424_call(), 0)
call_894 = relay.TupleGetItem(func_426_call(), 0)
func_507_call = mod.get_global_var('func_507')
func_510_call = mutated_mod.get_global_var('func_510')
var_905 = relay.var("var_905", dtype = "float32", shape = (56, 2))#candidate|905|(56, 2)|var|float32
var_906 = relay.var("var_906", dtype = "float32", shape = (1792,))#candidate|906|(1792,)|var|float32
call_904 = relay.TupleGetItem(func_507_call(relay.reshape(var_905.astype('float32'), [7, 16, 1]), relay.reshape(var_906.astype('float32'), [7, 16, 16]), ), 1)
call_907 = relay.TupleGetItem(func_510_call(relay.reshape(var_905.astype('float32'), [7, 16, 1]), relay.reshape(var_906.astype('float32'), [7, 16, 16]), ), 1)
func_806_call = mod.get_global_var('func_806')
func_808_call = mutated_mod.get_global_var('func_808')
var_912 = relay.var("var_912", dtype = "uint16", shape = (240,))#candidate|912|(240,)|var|uint16
call_911 = relay.TupleGetItem(func_806_call(relay.reshape(var_912.astype('uint16'), [240,])), 5)
call_913 = relay.TupleGetItem(func_808_call(relay.reshape(var_912.astype('uint16'), [240,])), 5)
output = relay.Tuple([call_893,call_904,var_905,var_906,call_911,var_912,])
output2 = relay.Tuple([call_894,call_907,var_905,var_906,call_913,var_912,])
func_915 = relay.Function([var_905,var_906,var_912,], output)
mod['func_915'] = func_915
mod = relay.transform.InferType()(mod)
mutated_mod['func_915'] = func_915
mutated_mod = relay.transform.InferType()(mutated_mod)
func_915_call = mutated_mod.get_global_var('func_915')
var_917 = relay.var("var_917", dtype = "float32", shape = (56, 2))#candidate|917|(56, 2)|var|float32
var_918 = relay.var("var_918", dtype = "float32", shape = (1792,))#candidate|918|(1792,)|var|float32
var_919 = relay.var("var_919", dtype = "uint16", shape = (240,))#candidate|919|(240,)|var|uint16
call_916 = func_915_call(var_917,var_918,var_919,)
output = call_916
func_920 = relay.Function([var_917,var_918,var_919,], output)
mutated_mod['func_920'] = func_920
mutated_mod = relay.transform.InferType()(mutated_mod)
const_946 = relay.const([[7,2,-3,7,-6,10,10,2,-10,5,-3,-7,-6,-7,-5,2],[10,5,5,-5,10,-8,1,-6,-10,10,5,-8,-8,-2,1,-4],[-8,-6,1,-5,9,3,-5,1,-9,-9,-10,9,-3,2,5,-4],[-5,5,4,-8,5,-10,-2,6,-2,8,-3,2,8,-1,-10,-5],[7,-2,1,-3,3,9,-6,7,-1,2,1,-1,7,-3,8,3],[-9,-10,5,9,9,-3,2,-3,-4,6,-6,-6,2,2,-5,-7],[10,-7,1,2,1,-4,-5,5,-1,-5,-9,-2,8,10,8,10],[-7,10,-2,-9,-10,-5,10,-4,-10,-8,10,1,-3,-3,-10,-9],[-9,-6,-3,-3,8,10,9,-10,3,-1,7,10,3,-3,8,4],[10,10,5,-10,3,-4,6,-3,-2,-1,-6,-1,6,-6,5,-4],[9,2,-9,-8,2,9,6,6,-8,-6,-2,5,-2,-4,10,4],[4,-5,10,-7,7,-2,-8,8,-7,-10,1,7,-8,-10,1,-8]], dtype = "int32")#candidate|946|(12, 16)|const|int32
var_947 = relay.var("var_947", dtype = "int32", shape = (12, 16))#candidate|947|(12, 16)|var|int32
bop_948 = relay.add(const_946.astype('int32'), relay.reshape(var_947.astype('int32'), relay.shape_of(const_946))) # shape=(12, 16)
func_320_call = mod.get_global_var('func_320')
func_321_call = mutated_mod.get_global_var('func_321')
call_953 = func_320_call()
call_954 = func_320_call()
func_109_call = mod.get_global_var('func_109')
func_112_call = mutated_mod.get_global_var('func_112')
var_960 = relay.var("var_960", dtype = "float32", shape = (14, 182))#candidate|960|(14, 182)|var|float32
call_959 = func_109_call(relay.reshape(var_960.astype('float32'), [14, 14, 13]))
call_961 = func_109_call(relay.reshape(var_960.astype('float32'), [14, 14, 13]))
const_962 = relay.const([[[9.137624,7.391121,3.405846,-4.157571,-6.543522,-2.472672,-9.097144,-5.579256,-7.855242,2.362964,5.689617,-5.902259,2.889176,7.042042,6.886675,5.646862],[-5.925127,0.787315,-1.464492,-5.841143,4.807289,5.803951,8.770482,-6.710184,4.332197,-8.131932,-3.087092,1.008062,2.991464,-9.918829,5.931943,-4.213171],[-7.302134,-0.612563,2.990233,4.202920,0.874273,0.165673,-3.679442,-6.643632,4.204733,-5.011482,2.169873,9.524391,-6.099355,0.097712,-5.604569,4.562251],[5.922203,6.001168,-6.100652,-4.893487,8.820225,1.697509,4.043662,-3.277895,-5.715039,6.803392,-8.044336,0.161435,-2.764729,-9.611560,-6.057229,8.372855],[7.298115,-3.084850,7.860637,1.872695,-5.524618,-4.470414,-6.195582,-7.165869,-6.897178,-7.339743,4.109742,1.168952,6.563958,-5.350369,-8.320628,6.046401],[-5.890076,5.147963,-0.167919,-4.896667,9.258888,6.865724,0.450861,6.104432,5.232720,-9.497271,4.901533,-7.532974,-2.746122,-3.852942,-9.332479,-5.400312],[5.751631,-0.751294,9.130754,6.104109,5.907078,-2.202748,-6.181896,-2.438580,-5.543564,-5.890518,5.859697,-6.297764,8.652514,-7.621303,-1.707561,-1.576766]],[[-3.176880,-8.827790,-3.788166,4.796028,-7.212412,-6.013042,3.686221,-6.740737,-8.904362,2.775938,2.589884,7.777539,-7.448520,-2.059476,-0.657843,-7.457910],[0.977666,-9.136457,-0.684256,3.581084,-9.924666,-2.743336,9.333713,7.999321,2.523009,1.890667,-8.348897,-9.014135,-1.045983,2.464446,9.856971,3.838822],[-2.237708,-1.226384,5.137906,0.165770,-5.488858,0.516173,-4.939641,7.999814,3.615139,-7.464920,2.382409,-2.815288,9.765181,-7.823922,-3.127229,8.795663],[-9.100152,6.389513,-8.013010,0.504391,-6.356419,-8.636140,1.903093,8.665461,-4.418730,-7.809630,-7.309386,1.636364,-4.274531,-3.141710,2.433664,-5.026922],[-3.203837,-6.766567,-9.247643,3.900537,-0.455198,-8.153148,8.653839,0.608483,4.386508,1.368497,-3.350235,-7.873859,-5.935497,7.321987,-0.844209,0.039178],[-3.021908,7.433152,0.455559,8.831578,-8.597390,2.662580,9.601638,9.260764,-6.360928,-3.967964,9.382925,-4.984364,-3.363848,-2.029123,6.399022,3.425017],[3.866868,-3.741033,7.395251,-4.482464,5.463654,7.288433,-6.922891,-5.193095,1.907560,-1.845926,0.549907,-3.764409,-2.908638,-8.890645,4.862529,7.804664]],[[1.574893,1.535086,-5.256639,-5.527853,-1.872899,-2.137317,6.939016,5.521737,-4.073942,7.589614,-8.545628,2.105261,-2.318767,-7.538104,6.684767,-8.191875],[-5.872517,2.462981,-3.448665,-7.702554,5.415167,9.122433,3.052451,8.015030,-0.779144,7.844332,-8.921686,-5.709983,3.227557,-2.615491,-2.527522,9.123696],[6.324351,3.920965,-3.167616,-5.094819,6.000215,-8.805315,-1.982402,-0.320124,0.526435,-5.514797,-3.439291,-8.983163,0.106329,-1.683983,-8.311296,-4.823083],[-5.491066,5.534610,-9.925334,-2.899777,9.559534,-0.393037,-2.101490,3.097155,7.082912,3.276224,-8.394292,9.314494,6.665232,2.706690,8.969539,5.575719],[-0.940345,-6.813374,-3.580239,-9.702004,-0.150854,4.986558,1.115551,-0.321924,-9.991891,-9.591284,8.628925,8.103757,6.667009,-5.985661,-6.112294,-3.815444],[-2.799649,6.922700,2.801827,6.750186,2.260662,-2.239843,5.326415,1.128822,-2.353865,-6.940481,3.624466,-9.251660,-6.858751,6.666945,-8.890427,4.068233],[-2.386053,7.982772,-2.398829,4.453289,-4.175089,-5.860500,-4.596652,0.009101,5.534487,0.989903,5.494037,2.383063,-2.919347,7.179447,-6.782453,-7.653563]],[[2.541836,-6.037510,-7.761124,6.597246,3.906298,-5.599718,6.083192,7.224485,8.242959,9.359366,-9.700252,-5.868484,4.516877,-9.427653,5.181503,7.922249],[-9.039851,-1.884735,2.622755,3.325170,-4.494250,5.367375,-9.116907,-6.714218,7.567427,-5.448066,2.493537,-5.705273,-7.879443,-0.794464,6.252985,0.054641],[-5.319192,-9.442180,7.466531,-3.240523,8.072917,-6.935456,-0.896405,7.854378,-4.246923,-0.448984,4.024719,5.990918,4.718608,3.185222,4.578194,-2.562994],[-6.155896,4.109396,4.536699,9.566931,1.703554,-7.696892,2.360582,7.896722,2.094028,5.583354,0.413381,9.109583,-8.324551,9.956953,1.213088,4.543330],[5.655942,9.923161,2.965193,1.145824,-8.304014,-8.401535,-4.592548,-3.201844,7.225486,-1.954895,-6.669002,3.924297,-3.427763,-1.306210,4.952394,4.527493],[-4.130422,2.784174,-5.980120,0.917430,-3.368727,-6.153303,0.085401,-0.441614,-9.275796,2.053626,-3.578637,4.910201,-4.857776,-2.554544,-9.395524,-8.486386],[4.024901,-3.159336,-4.815237,-5.707000,6.587496,1.876911,0.281427,-5.332681,-2.695383,-6.733087,-9.893168,5.482024,0.315142,-7.662006,-3.859266,9.027366]],[[-7.604413,0.074230,3.889448,6.339606,-4.503090,7.364960,0.779399,9.609647,-3.698151,-7.991503,7.713115,7.405302,-9.696900,-6.721906,-6.840020,-1.731359],[0.839891,5.456524,0.197182,-3.207476,-9.227998,-2.608653,7.366671,2.825795,5.479675,-0.035448,-8.311487,-2.766037,-4.348610,7.888217,-4.405086,1.233639],[4.104670,-0.305132,-3.954034,-8.925016,-5.620845,-5.892966,-8.527477,4.006621,5.779488,-3.677687,6.544460,-7.460483,-2.085003,-1.943860,6.220724,-1.696713],[3.052064,-7.472727,9.098342,-9.053155,9.622244,7.467838,-3.421376,7.998073,4.324838,3.499863,-4.696461,-3.431981,8.351195,3.350241,-4.694256,9.467726],[-4.439989,3.193784,-2.879440,-5.127364,-0.566925,4.645741,-4.522351,5.257983,1.931553,4.336552,-8.272535,-4.187425,-6.506742,5.381285,7.071705,-8.418370],[-7.644091,-2.617253,5.968197,-6.311654,-0.494252,8.792999,-6.980132,-9.453854,4.413953,-0.634704,1.605147,-1.710679,-2.349834,5.991237,-9.154979,-8.148074],[6.049589,-7.191889,7.351754,6.346911,-0.231049,-7.150523,1.544635,-0.760147,-8.439922,-4.856216,0.987008,-9.430952,-7.035684,-5.906766,2.694637,5.417191]],[[6.844716,-2.370341,-1.096797,-3.668990,-8.999398,-1.378451,-3.273945,-7.363149,9.667309,-2.809225,7.677728,-5.893269,-2.891373,8.641930,2.488232,9.343014],[-2.823793,1.634046,6.806765,1.798405,4.810847,3.427774,4.282367,-9.076296,-6.761009,1.419505,9.879731,-9.693594,-6.780739,-6.378301,-0.874313,-1.010031],[9.714493,-2.172599,-7.794532,-4.894347,7.567765,5.356922,5.775536,9.663438,-4.989039,-2.781904,-0.585269,-8.584884,-9.019550,7.128140,-7.875604,6.800992],[9.607777,-7.771350,3.669918,6.335719,-3.278164,2.370793,6.286958,9.298987,-3.516267,4.057089,-8.513670,8.690961,-7.862521,-4.957824,6.813315,-9.021689],[3.766457,-2.166466,1.745531,6.586257,-6.842979,-7.386698,6.139788,1.654122,6.049696,-7.934601,-9.901906,-1.220360,-9.934922,4.384417,-0.905663,0.069180],[-7.310581,-0.162854,3.485010,0.241759,7.860562,6.586232,-7.558873,-8.622185,-5.218561,9.072433,-7.725701,3.949761,-2.810564,-1.150059,2.753762,-9.431890],[2.623105,2.274660,-3.122511,-5.724872,-2.540422,-8.161231,5.552817,-8.525763,-8.327377,-3.217370,1.433356,5.766634,4.967815,-2.194662,8.990876,-3.683738]],[[-1.459626,-4.623562,6.244570,-8.796379,-8.599933,-3.338244,1.827334,5.635725,-8.417324,-3.254648,-4.033830,-1.113086,-0.400850,-8.646263,1.417043,-7.267738],[-4.051100,9.244053,-6.928923,-8.842053,-6.906591,-1.533648,2.905752,6.366009,7.718787,-9.942843,-0.376212,2.068060,6.291534,-7.987362,5.008082,-3.070920],[9.581444,3.482558,0.368777,1.246504,-9.091808,3.337936,8.141112,8.100081,8.548599,-3.743312,-5.699172,-4.881450,8.397197,0.200896,0.333296,5.268729],[7.993718,-3.471933,-0.645922,-0.170427,4.764019,-2.766876,2.596828,-0.047918,9.501740,-7.130554,-2.160568,-9.289817,6.987890,-8.972909,5.115544,-4.525224],[-6.458872,-3.410291,-2.029954,6.149565,-2.811669,-2.268644,-4.996985,-8.361313,-4.914536,9.588252,5.756208,-4.366259,3.653262,-6.376524,-6.078009,3.302360],[0.889425,0.112863,5.446965,-7.763334,1.898054,0.304396,9.430706,7.575675,-4.582155,-4.605979,-3.951205,-0.966358,-2.589174,8.208460,7.812439,8.974227],[-2.073430,-7.601311,-2.435948,1.979015,-2.645489,8.586093,4.141093,5.579645,7.199161,8.467656,-7.027141,-2.918758,-1.591212,-3.298278,-3.652813,4.031339]],[[-9.001934,-1.293736,-6.319498,-8.360285,-4.692621,-3.255673,7.273028,2.166942,2.202335,-8.668875,8.002539,-3.140117,-7.241249,1.646995,1.002099,5.814793],[5.221399,-3.540809,-0.729824,-7.328483,-0.089213,-5.916428,-9.872989,-7.920219,-5.518252,1.368362,5.217061,-7.926688,-2.552170,6.158025,-2.164622,-1.918215],[-1.407883,4.739674,6.838161,-3.784664,-8.954899,0.821204,-8.886591,-3.800250,3.807615,-8.953535,-3.957778,-6.267097,9.174930,-2.240060,3.464018,3.863506],[0.429773,-5.651115,-9.555319,-5.730386,9.231648,5.807546,1.075249,-4.250220,9.156219,-9.422202,8.552648,2.025406,-6.573368,-6.301382,-4.477007,0.865297],[-1.231744,-3.127788,-9.416374,3.424269,8.713486,-6.593637,5.451299,2.299185,7.481148,-3.147743,-6.442024,7.291678,0.013899,-4.548069,3.283806,4.179255],[0.355265,-5.348344,-2.353555,4.486319,-4.329127,-9.147546,5.032742,1.652024,4.832644,2.069731,8.329979,-1.269303,7.586243,-4.603368,5.362735,-3.662769],[1.207157,-2.170731,9.929063,7.180070,5.578277,5.288337,0.913809,-7.630559,-7.719414,7.855705,-7.099134,-5.839485,-1.342794,3.668746,-6.679249,9.119289]],[[-8.090792,5.784093,3.896233,-8.879574,-7.562725,8.745043,-2.838699,3.442536,-4.790210,-6.089183,-3.314137,-8.036379,9.124726,-8.882173,5.353310,1.586334],[-4.211905,5.741411,-6.747382,-2.944696,4.557374,-4.073251,6.771344,-2.311818,-3.150782,9.910678,5.528905,-6.408174,1.297810,-0.448882,-5.862082,-7.010175],[-2.386190,-3.995656,0.445270,-1.977002,4.514300,-7.807848,-7.751995,-9.640362,9.919741,7.551018,2.112016,2.552566,0.912719,9.370606,-2.292988,-5.066437],[-0.920129,0.643795,9.949174,-9.077174,-7.484643,-4.453425,-0.771337,-5.959846,-3.471501,-5.004433,0.167681,-1.360118,-3.883586,-3.321500,1.113130,6.451186],[2.333893,-6.968538,-7.110098,3.320673,6.597801,2.612584,-3.614242,-3.187441,-8.159336,-7.020678,-9.253557,-3.368936,3.534274,0.497152,7.997676,-5.073757],[6.194226,1.711089,0.824615,8.607152,-9.304819,-5.566630,-5.855644,2.157448,-1.125270,-7.163935,-5.088555,5.798207,7.496875,7.814981,6.175505,2.931955],[-2.675287,3.889474,-2.472599,-1.432527,0.745769,8.349161,7.398024,-3.067423,6.407199,9.537092,4.204507,8.842098,8.230024,0.351903,-8.130459,-7.648397]]], dtype = "float64")#candidate|962|(9, 7, 16)|const|float64
bop_963 = relay.add(call_953.astype('int8'), relay.reshape(const_962.astype('int8'), relay.shape_of(call_953))) # shape=(9, 7, 16)
bop_966 = relay.add(call_954.astype('int8'), relay.reshape(const_962.astype('int8'), relay.shape_of(call_954))) # shape=(9, 7, 16)
output = relay.Tuple([bop_948,call_959,var_960,bop_963,])
output2 = relay.Tuple([bop_948,call_961,var_960,bop_966,])
func_969 = relay.Function([var_947,var_960,], output)
mod['func_969'] = func_969
mod = relay.transform.InferType()(mod)
mutated_mod['func_969'] = func_969
mutated_mod = relay.transform.InferType()(mutated_mod)
func_969_call = mutated_mod.get_global_var('func_969')
var_971 = relay.var("var_971", dtype = "int32", shape = (12, 16))#candidate|971|(12, 16)|var|int32
var_972 = relay.var("var_972", dtype = "float32", shape = (14, 182))#candidate|972|(14, 182)|var|float32
call_970 = func_969_call(var_971,var_972,)
output = call_970
func_973 = relay.Function([var_971,var_972,], output)
mutated_mod['func_973'] = func_973
mutated_mod = relay.transform.InferType()(mutated_mod)
func_257_call = mod.get_global_var('func_257')
func_259_call = mutated_mod.get_global_var('func_259')
call_981 = func_257_call()
call_982 = func_257_call()
uop_983 = relay.cosh(call_981.astype('float64')) # shape=(9, 7, 16)
uop_985 = relay.cosh(call_982.astype('float64')) # shape=(9, 7, 16)
func_568_call = mod.get_global_var('func_568')
func_572_call = mutated_mod.get_global_var('func_572')
const_997 = relay.const([-3,2,-10,2,-1,10,-10,5,-6,5,4,6,4,7,7,-7,-5,-6,3,-7,-4,-2,-1,6,-5,-1,-6,1,7,5,10,-4,10,-1,8,7,-5,8,5,3,-6,1,3,9,1,-4,7,-7,-8,2,-8,-9,10,-1,1,7,6,9,-1,9,-4,5,3,-8,10,-8,-9,-3,4,5,6,3,9,3,-10,-2,-7,6,8,-10,6,-9,5,-5,4,4,-2,-1,-9,-1,-7,3,-9,-4,5,-7,4,-7,6,9,1,-9,10,-2,-6,-8,-5,9,-10,-10,8,5,3,-4,3,6,-7,-5,-7,-8,9,8,-6,9,-9,-2,-8,1,-10,-8,-8,-5,1,4,8,-3,-7,-2,-7,3,-1,4,-4,9,-8,7,3,-1,-3,-6,-6,-7,-1,9,1,5,9,-1,2,6,-9,8,-4,-10,-5,-5,7,-5,4,-6,8,-7,1,-9,-8,-7,-8,10,-5,1,7,10,-10,2,-10,9,2,-4,-3,-9,10,9,10,-3,10,-4,10,2,-2,-5,3,-2,-9,-9,1,-3,-4,10,2,1,-7,-2,3,-6,8,-7,5,-7,6,-7,6,10,2,7,5,-7,-5,7,3,-2,7,4,-1,-4,-9,-5,-1,-6,-5,9,1,2,7,5,-5,10,8,-1,5,7,-8,-10,7,4,-10,-2,10,-10,-3,4,-4,9,-10,-3,10,10,10,7,-9,9,-3,-4,-5,8,9,-10,-10,-7,1,-5,7,9,7,-7,6,-6,7,9,-4,3,-3,-8,-2,-3,-4,4,-4,-1,6,7,-3,10,-5,-3,-8,-2,-7,-3,-5,2,5,-1,6,1,-9,3,-3,2,-3,-7,-1,-1,-1,-7,-1,8,-4,6,-2,-3,5,-4,10,6,-1,4,4,-10,2,-5,-10,-10,1,-6,2,5,7,4,5,3,-3,-8,4,3,-9,8,1,-4,5,7,-9,-3,-2,-6,-8,-3,-7,9,-2,5,3,1,-3,-6,4,6,-6,2,5,-6,-8,-6,-1,4,9,3,5,6,8,8,7,-5,-10,-2,-6,10,7,-1,-10,10,-6,-1,-10,1,-1,9,-3,-3,-5,10,3,-7,5,-1,-3,-4,7,-2,-4,-4,-3,3,1,-9,-10,8,-8,-6,-3,9,9,4,1,-10,10,10,-6,9,8,4,8,1,-6,-10,5,4,-5,7,-6,-2,10,-2,-6,6,1,-10,-1,-5,-10,-6,4,-9,8,-6,-5,-3,-2,-3,-7,10,10,-9,3,-10,10,-7,5,5,2,-10,-10,1,-9,10,-7,8,-10,-10,10,5,-5,-6,8,6,3,-6,10,-4,-6,-8,5,-10,-10,8,-8,2,5,6,9,3,9,-4,-9,-9,-5,5,3,-4,4,5,-5,7,-6,1,-6,-7,4,-3,2,-5,9,4,5,-6,-10,-5,9,2,7,-1,10,8,-1,-8,-3,9,-4,5,-1,-10,-2,-5,-9,6,-2,8,7,7,-7,3,7,5,5,3,-10,8,-8,-3,-9,4,8,-5,-10,-4,-7,-8,-9,6,-2,1,-1,-6,-3,9,-9,-5,-7,-3,3,5,-2,-4,7,-6,-10,4,5,4,10,2,-6,-8,7,1,7,-2,10,-2,8,7,5,1,1,10,9,-1,-8,10,-10,-7,-7,-10,5,-4,-9,2,10,6,1,3,9,-6,4,-4,7,5,-2,-10,8,1,5,-3,-9,8,-6,-1,-6,-4,5,7,3,7,-9,-4,5,4,1,6,-6,-3,3,9,-2,-10,-3,10,-2,-1,8,-6,3,10,7,5,10,8,-1,-3,-2,-10,3,-10,9,-6,9,7,-1,-5,4,-4,9,8,-2,2,7,10,-4,-4,6,-7,1,-4,-2,3,-10,-2,10,10,2,-8,6,6,-2,2,-10,10,6,4,-4,5,3,-4,7,6,8,6,-4,7,-5,-4,9,-4,10,4,-4,-2,6,1,2,3,-1,-7,3,1,-2,-3,-8,7,-7,-4,7,8,-1,-7,6,4,-8,4,-4,9,9,6,-9,7,-1,-6,6,4,-5,-2,-10,10,-9,1,-9,-7,2,-8,-6,8,-8,8,8,-3,2,6,6,-1,-2,6,5,-2,9,-10,8,2,10,-2,-1,-5,-4,6,9,-3,-2,-2,4,-3,-7,8,1,-1,-2,-3,-8,8,9,2,-3,-7,-3,1,-5,10,9,7,-8,1,1,-2,2,3,-4,-9,9,2,-7,1,9,-5,-9,-8,-3,6,-5,-5,8,8,4,-9,-3,6,3,-3,-9,3,-3,7,-4,-9,3,5,5,-5,1,1,2,4,-7,2,-3,5,7,-1,-7,9,-8,3,-8,-2,2,-2,3,2,1,5,8,-10,-4,-6,-3,2,9,-5,-6,5,4,-2,3,6,-7,-8,3,-8,10,7,-8,7,8,4,10,-2,9,1,8,-6,10,-8,3,-9,1,-8,-7,-6,-8,-9,-4,-5,4,6,3,7,-5,8,2,-1,-5,1,6,9,2,2,-8,10,3,6,-10,-1,9,-3,7,5,4,4,-5,-4,10,4,1,1,-10,1,-1,4,-2,-10,-4,-10,3,10,8,7,-8,-7,-3,-4,-7,-4,7,-8,-7,-7,5,9,3,6,-3,-9,-1,1,-5,10,2,-10,-2,-8,-1,9,-4,4,10,-1,2,-4,-4,-1,-2,1,-3,-2,1,3,7,-8,2,2,-1,-3,-1,-9,3,-6,-9,10,-9,-8,-4,-4,4,-6,3,6,-9,10,7,-6,7,5,10,1,-8,4,9,5,-10,-10,6,-9,-7,6,-8,4,6,-3,-7,-10,3,-6,-1,-8,1,4,-3,4,-1,4,3,-5,1,9,-10,2,-2,8,1,-2,1,2,8,6,6,-7,1,-10,-9,8,-8,5,-1,1,6,-6,9,4,2,7,1,-7,-7,3,-5,-7,1,3,4,4,9,-10,-8,8,-4,9,2,-8,-4,6,1,-4,-7,6,3,3,10,2,10,9,6,9,-4,6,-7,-7,6,-1,-10,-4,7,-3,-3,-6,-5,-6,10,9,-2,2,-9,-8,-2,-8,5,5,1,8,3,8,-8,-10,-2,4,8,-5,-9,-2,1,-3,-3,-6,-6,-2,-8,-10,-5,-5,-1,-10,7,6,8,6,7,6,10,8,-6,-7,-9,1,9,-10,6,-9,-7,8,-2,-5,-8,1,-2,-3,9,7,9,3,-5,-8,7,6,4,-1,2,7,6,-7,-9,1,2,-8,-5,9,-8,-2,6,-10,4,9,7,6,-6,-6,-1,4,2,-6,-5,-8,4,9,-8,2,-10,7,-9,-3,-4,-9,-5,-2,-7,5,-3,-8,-2,1,-7,3,-6,-7,3,-7,10,-6,10,-1,6,10,8,10,-4,10,-4,1,5,-2,-1,-7,-8,5,3,-7,-1,-2,-5,-10,3,-2,-5,4,2,-8,6,3,10,-4,-3,6,9,4,-10,5,-4,-8,-2,9,-10,-9,4,-4,10,-1,-8,5,-5,-1,3,8,-7,-8,-1,-4,-6,1,5,-6,1,5,4,-9,1,4,10,-3,8,-3,-10,2,-2,-8,6,3,1,1,10,-6,1,-6,2,5,3,-1,-9,-1,-5,9,2,3,9,-1,-3,1,9,-5,9,2,-10,-4,-7,-9,3,6,-7,9,2,-5,8,-10,-5,7,5,-5,2,3,6,2,9,5,6,3,7,-2,6,-2,-7,5,10,-6,-1,4,2,-7,3,-8,-9,6,9,-2,9,5,5,-7,-8,-7,-3,-6,-6,-9,-6,-9,-8,-10,-2,3,6,-7,-6,6,-7,-4,-4,9,-5,9,3,-6,-3,-9,1,-6,8,10], dtype = "uint16")#candidate|997|(1440,)|const|uint16
call_996 = relay.TupleGetItem(func_568_call(relay.reshape(const_997.astype('uint16'), [6, 16, 15]), relay.reshape(const_997.astype('float32'), [6, 16, 15]), ), 2)
call_998 = relay.TupleGetItem(func_572_call(relay.reshape(const_997.astype('uint16'), [6, 16, 15]), relay.reshape(const_997.astype('float32'), [6, 16, 15]), ), 2)
func_873_call = mod.get_global_var('func_873')
func_877_call = mutated_mod.get_global_var('func_877')
var_1012 = relay.var("var_1012", dtype = "uint64", shape = (1456,))#candidate|1012|(1456,)|var|uint64
var_1013 = relay.var("var_1013", dtype = "uint16", shape = (120, 2))#candidate|1013|(120, 2)|var|uint16
call_1011 = relay.TupleGetItem(func_873_call(relay.reshape(var_1012.astype('uint64'), [8, 14, 13]), relay.reshape(var_1012.astype('uint64'), [8, 14, 13]), relay.reshape(var_1013.astype('uint16'), [240,]), ), 0)
call_1014 = relay.TupleGetItem(func_877_call(relay.reshape(var_1012.astype('uint64'), [8, 14, 13]), relay.reshape(var_1012.astype('uint64'), [8, 14, 13]), relay.reshape(var_1013.astype('uint16'), [240,]), ), 0)
output = relay.Tuple([uop_983,call_996,const_997,call_1011,var_1012,var_1013,])
output2 = relay.Tuple([uop_985,call_998,const_997,call_1014,var_1012,var_1013,])
func_1017 = relay.Function([var_1012,var_1013,], output)
mod['func_1017'] = func_1017
mod = relay.transform.InferType()(mod)
var_1018 = relay.var("var_1018", dtype = "uint64", shape = (1456,))#candidate|1018|(1456,)|var|uint64
var_1019 = relay.var("var_1019", dtype = "uint16", shape = (120, 2))#candidate|1019|(120, 2)|var|uint16
output = func_1017(var_1018,var_1019,)
func_1020 = relay.Function([var_1018,var_1019,], output)
mutated_mod['func_1020'] = func_1020
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1024 = relay.const([[-3],[2],[-9],[5]], dtype = "uint8")#candidate|1024|(4, 1)|const|uint8
var_1025 = relay.var("var_1025", dtype = "uint8", shape = (4, 1))#candidate|1025|(4, 1)|var|uint8
bop_1026 = relay.greater(const_1024.astype('bool'), relay.reshape(var_1025.astype('bool'), relay.shape_of(const_1024))) # shape=(4, 1)
func_713_call = mod.get_global_var('func_713')
func_715_call = mutated_mod.get_global_var('func_715')
call_1029 = relay.TupleGetItem(func_713_call(), 0)
call_1030 = relay.TupleGetItem(func_715_call(), 0)
uop_1031 = relay.cosh(var_1025.astype('float32')) # shape=(4, 1)
output = relay.Tuple([bop_1026,call_1029,uop_1031,])
output2 = relay.Tuple([bop_1026,call_1030,uop_1031,])
func_1038 = relay.Function([var_1025,], output)
mod['func_1038'] = func_1038
mod = relay.transform.InferType()(mod)
mutated_mod['func_1038'] = func_1038
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1039 = relay.var("var_1039", dtype = "uint8", shape = (4, 1))#candidate|1039|(4, 1)|var|uint8
func_1038_call = mutated_mod.get_global_var('func_1038')
call_1040 = func_1038_call(var_1039)
output = call_1040
func_1041 = relay.Function([var_1039], output)
mutated_mod['func_1041'] = func_1041
mutated_mod = relay.transform.InferType()(mutated_mod)
func_320_call = mod.get_global_var('func_320')
func_321_call = mutated_mod.get_global_var('func_321')
call_1098 = func_320_call()
call_1099 = func_320_call()
uop_1100 = relay.acosh(call_1098.astype('float32')) # shape=(9, 7, 16)
uop_1102 = relay.acosh(call_1099.astype('float32')) # shape=(9, 7, 16)
func_873_call = mod.get_global_var('func_873')
func_877_call = mutated_mod.get_global_var('func_877')
const_1104 = relay.const([-2,-7,4,-8,-9,1,-3,3,6,-10,7,-1,7,9,-7,1,3,-10,-4,-1,5,4,7,-5,-1,4,-1,4,10,1,10,-7,-10,1,5,6,-7,9,8,-9,-9,9,-9,9,10,9,1,-6,-4,4,-10,9,-9,-3,2,-9,8,2,-3,-9,10,5,-3,-2,-8,6,5,5,-6,4,-4,-1,-1,10,-2,8,-6,-5,4,5,2,-9,-1,-4,5,-6,-8,-9,-10,4,-7,-5,-5,-9,-8,10,10,-8,4,-7,-7,-7,-2,6,5,-5,4,3,-2,10,-1,-7,-10,1,6,-4,-4,10,7,-7,9,7,4,5,-4,-4,-7,-7,8,4,7,9,-9,7,-6,-10,-8,8,-9,-8,10,-8,-4,8,3,8,-10,-9,-5,-6,-1,-3,5,1,-4,7,-2,3,-1,10,2,4,-4,-2,-1,9,7,3,5,6,-4,3,9,3,-6,-4,10,2,-2,4,-1,7,7,1,-5,-1,-1,4,2,-2,10,-9,-5,-6,-5,2,5,5,-9,-6,-5,-3,1,8,5,-4,-5,5,5,-9,-4,-6,10,3,-10,-4,-5,-1,4,-2,9,-2,-10,-8,-8,5,8,1,3,-9,-4,-7,-2,5,-8,-5,-4,5,5,1,2,5,7,10,-1,-4,4,2,-10,3,8,8,8,8,-9,-7,4,1,-8,-5,1,-4,1,-2,4,2,5,4,5,7,2,7,7,-9,-10,-6,4,-8,3,-7,-5,-1,-10,6,-8,1,10,-7,-9,-4,3,-2,7,3,9,-8,-10,9,-5,-7,-9,-2,8,7,-8,-8,8,-9,9,-6,-3,-5,5,-4,8,-3,10,9,7,-5,7,-7,3,-2,9,3,4,6,3,-10,-1,-9,8,-7,3,3,7,-5,-7,5,4,-9,-9,8,5,2,-10,-7,10,-7,-7,-3,10,7,6,3,-3,10,7,3,-7,8,-5,-10,-8,-7,7,1,1,-5,3,9,-10,7,1,9,-2,-7,-1,-3,-6,-8,-4,10,-1,2,-3,-10,-4,-8,5,-4,6,8,-10,8,3,9,-7,3,-4,-9,-10,9,6,-10,7,-1,-5,10,-10,-9,6,-2,-7,-10,2,7,10,7,-3,8,8,3,-8,7,3,3,-4,-2,-10,1,4,5,3,-10,8,8,-7,1,6,-3,6,8,-1,-10,-3,-6,-6,-10,2,7,8,-7,-6,10,6,3,-1,1,-1,6,3,-2,-2,10,-4,5,-10,-9,-3,-2,-4,3,6,-1,7,3,-7,9,-9,3,-5,5,3,4,3,-4,-9,-4,3,1,3,9,1,9,-6,1,-3,7,-8,-1,-6,-10,4,-9,-9,4,-6,-2,-1,-7,3,8,-2,-1,5,3,-7,-6,7,5,-10,10,3,5,2,1,-7,3,-6,-2,-4,-2,-8,-1,8,4,8,3,5,5,7,-7,7,-6,2,-3,4,1,-8,8,-10,-1,6,10,-2,-3,1,7,-7,10,-4,-10,-2,2,-3,3,3,-2,10,2,-6,-4,2,4,6,-3,-1,-9,-1,-3,1,10,2,5,-3,-5,-4,6,2,-7,6,-9,2,9,8,10,8,5,1,3,1,-2,10,-10,8,1,9,10,-9,-7,-3,-8,4,-2,-7,8,6,2,-8,6,-4,-9,-8,-4,-1,6,7,-6,1,-5,-6,6,-3,-6,3,-6,-1,-7,7,8,4,2,9,-2,8,9,-10,-6,3,1,-5,10,3,7,-1,-6,8,-8,-7,-7,10,1,-1,3,8,-8,3,9,5,4,10,5,-9,6,5,-3,9,5,8,2,3,8,-7,-10,10,2,-5,9,2,-3,9,2,-9,-10,6,-4,-3,3,-7,4,-10,-9,-5,-10,-6,-4,9,4,4,7,-5,6,-1,-8,5,-10,-2,9,-9,-4,2,-1,5,-10,-1,-8,-6,-4,5,-7,-8,5,-6,-7,3,-2,-1,-7,8,5,2,6,8,-7,6,3,-3,-3,-3,5,-2,-3,10,1,-7,7,-10,9,7,-2,2,-6,-6,-5,9,-6,-9,-6,-9,8,3,-5,-10,-4,-10,9,-2,8,-4,-8,7,6,1,6,10,5,-9,10,-5,-6,1,-7,-2,2,2,-1,-1,4,2,1,-3,-7,7,2,2,-4,-5,5,-10,5,6,-8,4,9,3,8,-8,-8,4,4,-10,-6,-3,-4,9,-4,3,4,-5,5,-4,-4,10,5,4,8,2,-10,-9,10,2,-5,-8,-4,1,-3,-4,5,-10,8,4,9,3,2,2,10,-8,10,-3,8,-6,8,9,6,6,5,-1,7,-4,6,3,-9,-2,-6,7,-8,7,5,-7,-7,-6,-4,-7,-10,4,-6,-1,-7,-7,-7,-6,-7,9,9,4,3,-10,-6,-10,9,-2,2,-1,-6,1,-1,8,-2,-2,5,6,-8,4,5,-10,-9,-9,-8,1,9,9,1,-9,-4,-3,-9,-6,-7,-10,-8,7,5,-10,8,-6,3,6,3,-6,-10,-8,10,-5,6,-1,8,-4,6,5,-3,-1,-6,-2,-4,-6,9,-3,-9,8,-6,10,9,-6,-7,-10,-1,9,-8,6,9,-6,7,-9,-10,2,8,-1,-7,5,-5,4,-4,5,4,-5,5,-3,-3,-1,-9,-10,-4,-7,5,4,-7,-7,-1,-4,-4,-2,-10,-3,7,-5,-4,7,-3,10,-4,-9,-3,1,-1,-3,-4,5,-7,-5,10,-5,5,6,-4,-8,-3,1,-7,1,9,-4,8,5,8,2,-1,6,-6,-6,1,1,4,9,6,9,4,6,-3,-9,-2,10,-7,1,-9,6,-2,-1,10,-8,-1,-2,2,-9,1,-7,9,6,4,-1,-4,-2,-5,3,-4,-2,7,2,-3,4,8,-7,-1,-5,10,-7,-3,3,3,-3,-8,-1,-10,4,-3,7,2,-8,-7,-7,9,3,4,-9,-3,-3,9,4,5,5,10,9,4,-4,-10,-7,-8,8,6,6,-2,-8,3,4,-4,7,-9,-6,4,5,3,-1,-2,-3,-8,8,8,-5,-10,10,-6,-7,-1,-1,3,9,7,8,-8,-8,10,8,-3,-10,2,6,6,6,-6,-2,-10,-6,-10,-6,5,-7,-9,-4,8,5,3,9,-9,-7,-1,-4,2,9,6,10,-1,-4,-2,5,2,3,5,5,6,-7,-2,9,2,-6,5,-8,3,-9,2,-6,-3,-10,-10,10,-10,4,-9,8,4,2,9,8,-3,8,8,-10,4,9,8,1,-8,9,-1,1,-10,7,-2,-5,1,-10,9,3,-3,-9,-4,8,9,-9,4,-8,-2,6,-1,1,-4,4,-3,9,9,-9,-10,5,4,-2,6,3,-6,-4,-7,10,5,5,2,8,-1,4,-3,1,-5,-4,-2,10,5,6,6,5,1,-1,-5,-6,-5,-10,-1,4,5,-6,-6,-6,10,-6,9,10,-3,-4,-10,-9,-1,3,-1,8,6,4,10,-4,-3,7,-2,-1,-7,-5,5,4,-2,-6,4,8,7,10,5,8,-2,9,1,9,5,7,-8,4,5,-5,-3,7,-7,7,-2,-10,-1,10,-9,2,-5,-3,-7,6,-8,-3,4,-3,10,2,7,8,-1,2,9,1,10,-8,-3,-2,-5,-4,-6,9,8,-8,3,5,-4,3,10,7,10,-10,2,-5,-7,-4,-7,9,-4,2,-2,-3,-5,-8,-10,8,2,2,10,-9,-6,9,7,1,-4,-3,2,-3,-10,-6,5,10,-2,9,2,8,-2,3,5,-3,7,-7,1,7,-10,4,7,-1,8,8,10,10,-2,-3,5,10,-3,-2,-7,-6,4,-2,-5,9,-5,-5,-4,8,6,-5,-1,-6,1,7,-6,7,-2,-10,-6,-10,7,-7,-10], dtype = "uint64")#candidate|1104|(1456,)|const|uint64
const_1105 = relay.const([-3,-1,-5,8,2,1,7,-8,3,-3,-7,1,-10,-2,10,-5,10,9,10,9,9,7,-4,-2,9,9,10,-7,-3,-7,10,-6,-10,8,-4,-2,-9,-8,-4,-9,8,8,-10,-8,-5,5,-9,-10,6,10,6,-5,-3,-9,5,-7,-8,1,-9,8,-4,-3,-6,3,-10,-3,5,3,-1,4,-10,9,5,5,-10,1,-8,8,-5,5,6,-2,-6,-10,7,2,-4,-7,-4,-4,-5,-8,-7,-6,-9,-10,9,-5,-6,3,-6,3,8,8,10,6,-7,10,-1,8,9,3,9,4,-3,-9,2,1,-1,3,1,9,-4,-1,7,-4,-7,-4,-7,2,-5,-10,-4,-8,10,-8,-3,-8,-8,-1,-8,1,4,-2,4,-2,6,6,5,-6,-7,5,-5,-6,-1,10,-4,7,-6,10,4,7,-5,3,-8,2,-5,-5,9,-5,-10,2,-6,1,-9,-2,-2,6,-3,-5,7,-6,4,7,5,-6,7,-9,6,-4,1,-9,-6,-8,1,10,3,-4,-7,2,3,7,5,-2,3,7,4,7,-8,-9,-10,-1,-4,10,4,-3,10,-6,3,-8,-5,-2,-1,-9,6,10,-6,1,-3,-1,-4,5,-2,1,-8,4,5,2,-9,-3], dtype = "uint16")#candidate|1105|(240,)|const|uint16
call_1103 = relay.TupleGetItem(func_873_call(relay.reshape(const_1104.astype('uint64'), [8, 14, 13]), relay.reshape(const_1104.astype('uint64'), [8, 14, 13]), relay.reshape(const_1105.astype('uint16'), [240,]), ), 0)
call_1106 = relay.TupleGetItem(func_877_call(relay.reshape(const_1104.astype('uint64'), [8, 14, 13]), relay.reshape(const_1104.astype('uint64'), [8, 14, 13]), relay.reshape(const_1105.astype('uint16'), [240,]), ), 0)
bop_1107 = relay.divide(uop_1100.astype('float32'), relay.reshape(call_1098.astype('float32'), relay.shape_of(uop_1100))) # shape=(9, 7, 16)
bop_1110 = relay.divide(uop_1102.astype('float32'), relay.reshape(call_1099.astype('float32'), relay.shape_of(uop_1102))) # shape=(9, 7, 16)
func_568_call = mod.get_global_var('func_568')
func_572_call = mutated_mod.get_global_var('func_572')
const_1119 = relay.const([2,-10,9,-3,7,-5,-2,4,-10,-1,-5,8,2,-9,-8,-3,-10,-5,-8,10,-8,10,9,-9,2,6,7,-9,-7,-10,-7,-3,-7,-6,9,-10,4,6,6,2,9,7,-3,5,-5,3,9,10,6,-10,-3,3,2,9,-9,6,-1,4,-1,2,-7,9,2,-3,-5,-5,-3,6,-2,-3,-9,10,6,-4,6,-7,10,8,-7,-10,4,-3,-8,4,5,2,10,4,8,7,3,-7,-9,-6,-8,9,4,10,-10,-1,-6,10,4,4,-1,8,-4,-8,-3,-7,1,-2,-7,-8,-1,-3,3,-4,7,-1,-10,4,-5,7,7,9,-10,-6,7,6,-2,-6,-4,1,10,-4,2,-4,-10,-9,5,-8,10,3,-7,-5,2,5,-2,1,-10,-4,-3,-3,1,2,9,2,4,-7,6,2,-3,-6,-3,9,-2,-8,-3,-5,-3,10,-9,-1,8,5,-8,-4,6,-8,-6,4,1,-2,5,9,-6,-1,-9,-9,-8,1,-3,-9,-4,8,5,10,6,-2,-9,2,-10,-10,3,8,-6,-7,5,-8,4,-10,1,-7,-10,-9,-2,4,-2,-4,6,6,2,-2,1,3,7,-4,-3,-7,-2,2,7,-7,-2,6,3,-3,7,-2,-7,-4,10,5,1,-6,6,8,-6,6,5,10,-6,-5,-8,3,-1,10,-7,5,-4,-4,9,-8,6,-4,6,3,7,-4,6,-10,4,-8,-4,-2,6,-1,-7,-1,-2,8,-1,9,10,4,-1,-2,-8,-8,7,-3,8,-7,4,10,5,4,-10,5,-4,-7,-7,2,1,-8,-1,-9,-4,4,4,-3,-3,-4,-8,4,-10,-9,-9,-2,2,-9,8,4,6,-7,-3,9,7,-10,4,9,2,-3,-10,1,3,-6,10,3,9,6,2,9,-3,-4,-4,3,10,7,10,-3,10,4,-1,-3,6,-4,7,6,4,-8,-3,-6,-6,-7,3,-9,-1,-2,-7,3,-6,-10,2,-4,-7,7,-3,7,6,-6,-3,-3,-6,-7,3,6,6,-4,-5,-7,3,4,-6,5,-6,4,-6,4,-3,-4,-10,6,8,6,-2,-8,6,-9,5,-8,-5,-2,1,-2,6,1,-8,-4,8,-2,3,-5,3,3,10,-1,-4,-7,-9,-9,6,-3,-8,-3,-6,-7,6,-8,-8,9,2,4,-2,-1,1,-8,-10,1,7,-4,-8,4,5,-3,2,-2,3,-2,-8,-10,5,-3,-8,-2,-6,-1,-9,8,-4,-8,6,-5,-7,-6,2,-1,-5,-1,-7,-9,1,-9,3,-6,-2,-5,4,7,-7,-4,2,-5,10,-9,10,3,-8,-2,2,9,-10,-2,6,-8,6,-1,9,-3,-3,7,-10,5,-3,-8,2,-8,-4,1,-10,3,2,4,2,-10,8,8,-8,-6,9,5,-1,-8,-3,-5,7,-1,-1,-10,-10,8,8,8,1,6,-9,-1,-3,-7,7,1,9,-5,-7,-5,-3,-7,-1,8,10,-9,-6,9,-1,-6,-8,4,-9,10,-4,-2,-8,-10,7,-8,-2,6,-1,-7,-3,3,-2,-1,-8,6,5,-8,9,1,-6,3,-10,-5,-3,-3,7,-8,-5,-7,-1,2,1,1,8,5,3,-3,4,3,-2,4,2,-8,2,-9,-8,-8,-3,-10,3,6,-1,8,-8,-5,-9,2,2,8,3,8,8,-2,-5,3,-6,-3,-9,4,-5,-10,7,-6,9,-4,1,6,10,-2,10,4,-4,5,-1,1,-8,-8,2,-6,10,-3,-4,2,-9,-8,2,7,10,-1,2,4,-4,5,-8,5,2,9,-9,7,-7,-6,-8,7,6,-6,-2,8,-5,-2,-5,9,6,-1,-10,2,-5,8,-3,1,5,-8,10,-4,9,7,4,-9,-3,7,1,1,-10,-1,-4,-2,2,5,-6,-6,-5,-10,9,9,-2,-5,10,8,3,-4,-2,5,8,5,-8,-8,-3,2,-8,2,-9,-2,3,8,-9,-4,-9,-4,-8,1,-9,-9,-9,-2,1,-8,3,9,10,-3,-10,-10,5,-7,3,10,-9,4,-9,-9,-4,-1,7,-2,-7,-3,-3,5,-7,2,-2,-3,3,-1,6,5,6,-7,-7,-9,-6,-9,-7,7,-1,-5,-3,-6,-6,1,8,1,1,7,9,-2,10,3,10,-1,-1,3,-5,-10,-5,-2,-6,-9,3,5,-3,8,-10,3,1,8,2,-5,10,5,-6,-10,-2,-7,6,8,1,-5,8,-1,-3,2,2,-10,3,-10,4,9,-3,-2,10,-10,-7,4,-4,4,-5,1,-2,-10,8,-3,-3,8,-9,-5,-2,2,2,5,-10,-3,5,-2,7,-3,-3,-5,7,2,-8,6,6,1,3,-5,-5,8,4,-1,2,-4,-10,-3,4,4,-6,2,-8,9,-9,6,5,-7,6,8,2,4,2,-1,-5,-10,7,3,7,7,-10,-1,7,-4,4,2,3,-7,3,3,5,1,7,5,7,9,5,2,8,6,7,9,3,-7,4,-6,-3,-10,10,6,7,7,-7,-7,-3,8,-10,10,-3,-2,8,7,-7,-4,2,6,-5,-5,-2,-7,5,4,2,-1,-2,-3,2,-2,9,-6,5,-2,5,-1,10,-1,-3,2,-9,-10,7,1,-7,8,8,9,-6,-4,-10,7,4,5,-2,-1,-10,-4,-6,6,-10,9,8,3,-9,-6,-3,9,10,-3,10,5,-6,-9,-6,4,-1,5,-1,7,5,-8,-6,-6,-2,-9,4,4,-5,-10,10,-8,-9,4,1,-9,-5,-7,-6,7,5,-10,-2,-8,-9,-9,-6,-2,7,-2,-9,7,10,5,8,-5,8,9,-2,-8,-7,10,3,8,-9,-10,-3,-2,-10,2,9,-8,-3,-8,6,-3,-4,-8,-6,8,-7,4,5,5,-3,1,4,-8,8,3,-3,-1,-1,5,-5,3,-1,-4,-2,-10,-7,8,2,-10,3,6,-10,-4,-6,-8,-4,-5,-7,1,-9,6,-4,1,10,8,-5,-9,3,-7,4,2,-6,3,7,3,-5,-5,-1,8,-8,-3,3,9,7,7,-3,1,5,1,8,-9,2,3,-8,3,7,8,-9,-6,-7,10,-1,9,3,-9,3,3,1,9,8,5,7,5,-4,-2,5,9,1,3,8,-6,-9,-8,-6,8,-8,-9,-8,-1,-5,-3,7,6,2,3,-9,-2,-9,-9,-9,8,1,2,-2,-4,-8,-7,1,-2,-3,4,3,2,-8,6,9,-3,-1,-2,8,10,-6,-10,2,-1,-4,-9,-1,-10,2,-4,-9,-1,-2,5,-2,-7,-4,7,-6,1,1,10,10,1,-3,3,2,4,1,-7,4,1,-10,4,-7,9,-4,10,-6,-6,-5,-2,-4,-4,-8,8,-4,10,7,1,8,2,6,5,-4,-2,-9,8,3,-8,3,-2,7,5,5,-10,6,6,5,-6,2,9,-4,-7,-1,7,1,2,-1,-3,-3,-1,4,-2,9,-7,-6,2,-3,7,4,-9,3,-4,-10,-3,8,3,1,1,3,-9,-6,1,10,5,-3,-8,8,3,8,1,1,-10,-9,-10,-10,-3,2,6,-3,-5,-5,-5,4,1,5,8,5,-8,-10,9,1,-6,6,-4,-5,7,3,-5,9,9,-7,2,6,8,-8,5,9,-2,-7,5,-7,-4,-4,7,4,-9,-2,6,-1,-5,-3,10,-4,-8,1,3,-8,10,5,-5,-3,9,-7,3,-9,-9,-9,-6,-1,5,10,4,2,-9,-1,-5,1,8,-1,6,-1,2,-3,-4,3,-8,5,10,-6,-6,3,9,-7,2,2,-8,4,-5,-10,-3,8,5,-5,-5,-6,-8,-2,5], dtype = "uint16")#candidate|1119|(1440,)|const|uint16
call_1118 = relay.TupleGetItem(func_568_call(relay.reshape(const_1119.astype('uint16'), [6, 16, 15]), relay.reshape(const_1119.astype('float32'), [6, 16, 15]), ), 3)
call_1120 = relay.TupleGetItem(func_572_call(relay.reshape(const_1119.astype('uint16'), [6, 16, 15]), relay.reshape(const_1119.astype('float32'), [6, 16, 15]), ), 3)
output = relay.Tuple([call_1103,const_1104,const_1105,bop_1107,call_1118,const_1119,])
output2 = relay.Tuple([call_1106,const_1104,const_1105,bop_1110,call_1120,const_1119,])
func_1129 = relay.Function([], output)
mod['func_1129'] = func_1129
mod = relay.transform.InferType()(mod)
output = func_1129()
func_1130 = relay.Function([], output)
mutated_mod['func_1130'] = func_1130
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1134 = relay.const([[[-0.223997,-6.233221,4.077143,-3.363515],[0.515127,8.490395,8.944940,-7.948273],[-8.656638,3.383417,7.252703,7.288091],[0.057770,4.545153,-9.185098,-4.430287],[-1.247839,-9.337697,-7.323851,-3.552314],[1.411635,6.926206,-3.880141,-6.307457],[4.631366,-9.847272,3.962452,-2.745193],[-4.323806,-3.663884,1.422395,4.322165],[-1.253030,2.113411,-2.055592,-1.925430],[9.335667,4.137674,4.407991,8.252340],[3.023230,-2.058270,5.675954,1.288067],[-0.347816,-7.017909,-3.407487,5.512283],[6.146987,2.455434,-6.938299,8.960285]],[[5.402261,0.702807,-5.401488,6.221894],[-3.676314,-8.299631,0.804519,-3.392721],[-7.792486,0.523944,-7.945283,8.129648],[7.830116,-4.778123,-7.567439,-9.999874],[-3.225451,0.034313,-4.835046,-1.358955],[-6.919057,-8.956150,-5.087243,1.082120],[5.932043,1.576166,9.979675,-0.457457],[-2.617358,-2.793804,-9.592390,-8.382326],[2.175327,-4.196991,8.773649,-9.973365],[5.362088,4.405569,2.855718,-4.975490],[5.437677,5.926494,-5.819840,7.947495],[-8.280118,-0.527289,-5.829055,5.103821],[-4.115612,5.211505,-2.190795,4.490722]],[[-8.518257,4.191388,4.387485,3.620726],[6.768975,6.034535,-9.231085,-8.024796],[-3.658547,6.463633,-2.980545,-3.126533],[-3.257602,-1.507403,-2.245770,6.313086],[-9.106337,-3.657328,-6.310948,-2.026833],[-0.189164,-6.292153,-7.316373,3.661746],[3.126445,-4.852911,4.887342,-4.622660],[-0.646772,-9.562204,-5.567481,-6.827732],[-7.556333,-7.318012,-8.111757,0.667467],[-6.781091,5.542782,-4.812024,8.805763],[1.764293,1.352862,5.012210,6.246223],[-4.985712,-8.645900,9.757655,5.580987],[3.466472,-2.638783,-3.610711,7.215507]],[[9.948123,-7.477871,8.782763,0.375735],[1.725878,-8.303086,-2.629115,-1.460780],[8.761975,9.234428,0.787792,7.202477],[-6.664297,-6.047819,4.971023,2.473279],[-7.996445,-4.360442,-0.760026,7.813257],[0.674846,-6.309289,0.890693,-8.887557],[3.128827,4.533206,5.776175,7.484571],[-2.681975,-3.468155,6.995711,7.059333],[4.848043,-9.860677,5.953537,3.036540],[2.974660,6.634794,4.752881,8.292833],[5.820338,0.048605,9.329814,3.526603],[4.241023,3.889636,2.735615,-5.165395],[5.331671,-5.403306,-8.830229,4.847904]],[[3.830594,-0.427575,-5.540654,4.756295],[-2.476353,-1.447457,-7.185923,-1.725066],[-4.705083,-1.579619,-6.045688,-9.828662],[2.044454,-2.672095,0.078833,8.924123],[-9.955728,6.911382,-5.316036,2.192585],[8.032141,-6.709914,3.946185,7.344004],[8.416174,5.566571,3.077554,7.005849],[6.918679,-4.019645,9.138549,4.089086],[-8.166025,-6.884143,-3.794162,7.420637],[-1.987318,6.744408,-0.522243,2.061575],[-9.748340,6.776442,-5.811411,1.220524],[7.030389,-9.222115,5.376623,-6.268030],[-4.717944,-7.110038,-1.662925,8.459428]],[[-0.734734,-4.747417,8.130268,-3.826725],[0.253842,8.018503,-0.315191,3.505084],[5.425268,-8.436926,4.310547,-5.575042],[5.598051,-6.846572,-9.191990,-1.784789],[-4.484256,-7.231790,-0.584541,-5.226880],[-6.186163,-3.446514,-0.078451,-8.852236],[2.716383,-5.568258,-9.846585,2.865579],[-7.304343,4.857929,2.151526,0.576187],[2.782543,8.990584,-4.805488,6.333145],[-9.701519,1.401897,7.954136,-9.052487],[-2.728128,0.622557,7.666012,-6.829655],[3.802187,-1.484300,-0.554508,-9.493171],[0.011347,6.437762,3.295236,5.320568]],[[-8.415516,-6.478503,-9.108321,4.855062],[-3.667359,0.017637,4.246814,8.697233],[-1.604367,9.700356,9.240708,-7.530297],[1.557834,-9.468702,-1.737553,-7.472447],[-8.159623,-0.474428,0.818105,6.257581],[-7.314568,5.230150,-6.807510,-9.669607],[4.495809,7.255910,-5.370810,1.405693],[-5.540545,-3.102865,6.811919,2.593813],[-8.951634,5.485336,1.331163,3.534644],[9.649714,7.038025,0.688886,-1.342404],[2.870759,8.156286,3.376184,-3.207331],[-8.804119,-2.590176,2.347698,9.562197],[9.068604,-4.548254,6.322124,3.019918]],[[-8.525160,-5.712460,-0.063928,-1.549583],[5.948355,5.634277,3.134306,-5.867379],[5.864415,0.736246,-0.520376,-2.629470],[5.832510,5.163801,-5.349405,-5.400017],[0.526651,-9.156564,8.483372,-0.254823],[-1.506210,-6.844299,5.099212,5.331569],[2.978418,5.017090,1.621204,-2.807820],[-3.957658,8.682326,-5.970318,-0.302764],[-3.828322,4.463888,9.718894,-6.556426],[-3.578751,5.309108,2.672991,-3.004708],[-4.598101,6.517594,2.882229,-7.440498],[2.767548,-2.131279,8.281953,4.640728],[7.230507,-7.322933,-3.715667,-5.844042]]], dtype = "float64")#candidate|1134|(8, 13, 4)|const|float64
uop_1135 = relay.sqrt(const_1134.astype('float64')) # shape=(8, 13, 4)
bop_1139 = relay.logical_and(uop_1135.astype('bool'), relay.reshape(const_1134.astype('bool'), relay.shape_of(uop_1135))) # shape=(8, 13, 4)
bop_1145 = relay.logical_or(bop_1139.astype('bool'), relay.reshape(uop_1135.astype('bool'), relay.shape_of(bop_1139))) # shape=(8, 13, 4)
var_1162 = relay.var("var_1162", dtype = "bool", shape = (8, 13, 4))#candidate|1162|(8, 13, 4)|var|bool
bop_1163 = relay.greater(bop_1145.astype('bool'), relay.reshape(var_1162.astype('bool'), relay.shape_of(bop_1145))) # shape=(8, 13, 4)
output = relay.Tuple([bop_1163,])
output2 = relay.Tuple([bop_1163,])
func_1167 = relay.Function([var_1162,], output)
mod['func_1167'] = func_1167
mod = relay.transform.InferType()(mod)
var_1168 = relay.var("var_1168", dtype = "bool", shape = (8, 13, 4))#candidate|1168|(8, 13, 4)|var|bool
output = func_1167(var_1168)
func_1169 = relay.Function([var_1168], output)
mutated_mod['func_1169'] = func_1169
mutated_mod = relay.transform.InferType()(mutated_mod)
func_594_call = mod.get_global_var('func_594')
func_595_call = mutated_mod.get_global_var('func_595')
call_1190 = relay.TupleGetItem(func_594_call(), 2)
call_1191 = relay.TupleGetItem(func_595_call(), 2)
output = relay.Tuple([call_1190,])
output2 = relay.Tuple([call_1191,])
func_1196 = relay.Function([], output)
mod['func_1196'] = func_1196
mod = relay.transform.InferType()(mod)
mutated_mod['func_1196'] = func_1196
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1196_call = mutated_mod.get_global_var('func_1196')
call_1197 = func_1196_call()
output = call_1197
func_1198 = relay.Function([], output)
mutated_mod['func_1198'] = func_1198
mutated_mod = relay.transform.InferType()(mutated_mod)
func_713_call = mod.get_global_var('func_713')
func_715_call = mutated_mod.get_global_var('func_715')
call_1222 = relay.TupleGetItem(func_713_call(), 0)
call_1223 = relay.TupleGetItem(func_715_call(), 0)
func_1196_call = mod.get_global_var('func_1196')
func_1198_call = mutated_mod.get_global_var('func_1198')
call_1224 = relay.TupleGetItem(func_1196_call(), 0)
call_1225 = relay.TupleGetItem(func_1198_call(), 0)
func_257_call = mod.get_global_var('func_257')
func_259_call = mutated_mod.get_global_var('func_259')
call_1230 = func_257_call()
call_1231 = func_257_call()
output = relay.Tuple([call_1222,call_1224,call_1230,])
output2 = relay.Tuple([call_1223,call_1225,call_1231,])
func_1239 = relay.Function([], output)
mod['func_1239'] = func_1239
mod = relay.transform.InferType()(mod)
mutated_mod['func_1239'] = func_1239
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1239_call = mutated_mod.get_global_var('func_1239')
call_1240 = func_1239_call()
output = call_1240
func_1241 = relay.Function([], output)
mutated_mod['func_1241'] = func_1241
mutated_mod = relay.transform.InferType()(mutated_mod)
func_594_call = mod.get_global_var('func_594')
func_595_call = mutated_mod.get_global_var('func_595')
call_1266 = relay.TupleGetItem(func_594_call(), 2)
call_1267 = relay.TupleGetItem(func_595_call(), 2)
func_873_call = mod.get_global_var('func_873')
func_877_call = mutated_mod.get_global_var('func_877')
const_1276 = relay.const([[-10,-5,7,4,4,-7,2,-5,-1,8,8,5,2,-7,-9,-6,-9,-2,2,4,-6,5,7,6,-2,-7,10,2,-4,-5,-9,2,1,4,7,-1,9,3,-8,3,3,-10,2,7,2,-10,2,-1,-3,-6,3,7,5,-7,1,3,-1,-7,5,-8,-7,-10,-10,1,5,6,-7,9,5,7,7,-9,2,-1,1,6,8,4,6,-3,-5,9,4,-5,6,-4,-1,3,-9,2,4,6,3,-1,-9,10,-3,-5,-6,5,-2,5,4,-5,-2,10,7,9,-10,-1,-3,3,9,-5,8,-9,1,-2,-1,7,-7,1,-5,-4,-1,3,5,9,4,10,-6,-4,2,1,4,9,4,-5,-10,-5,-1,4,6,9,9,-4,6,-1,4,2,-7,1,-2,-2,3,-1,8,10,1,4,9,-3,5,-5,-6,-9,9,6,-6,4,-6,6,2,-7,-5,1,8,3,9,-4,-7,10,3,-7,-6,8,6,7,-10,-1,5,1,7,9,-1,1,-6,-4,-8,-5,4,6,7,-9,8,-2,-1,6,-6,-2,-10,7,-5,-4,-3,-7,4,8,7,-6,7,-5,2,4,10,5,10,-3,-4,-8,-6,4,8,-1,1,-9,-7,5,-10,7,7,-8,-5,-2,10,6,6,-7,-3,-1,-6,-1,7,-4,6,-6,3,-10,7,-7,-5,-2,-4,7,-7,-4,-1,8,2,4,3,-1,-4,-7,6,-7,-9,-3,-9,-2,9,1,-10,7,-3,2,-10,4,-7,-6,-7,3,3,-10,-6,-1,8,-4,-3,2,1,3,8,-9,6,-7,8,8,-6,6,-3,-7,-10,-1,2,-10,9,6,1,-4,9,-2,1,-10,8,-9,2,-2,-4,5,10,9,-9,9,-10,-6,4,8,8,2,-4,9,-4,-6,5,4,-7,5,8,5,-6,-9,-9,-6,4,4,-1,-4,3,-5,1,4,-2,5],[4,10,-3,2,5,-10,8,-9,-7,3,-2,8,8,3,-2,4,8,-6,2,-4,8,9,8,-4,-8,-2,-7,-4,-4,-7,-5,2,4,4,-6,4,-2,9,-1,-2,-1,-9,-7,-3,2,-7,10,8,-7,-9,-3,-6,-6,-7,-7,-7,-5,7,1,-5,10,8,1,-4,-2,-9,6,2,-10,10,-9,-6,-5,-8,-2,9,-3,4,7,-2,10,6,7,-9,-8,-4,8,-1,2,-9,-10,-8,7,7,-7,5,-10,-3,-10,6,1,-2,2,2,-3,-10,-1,-6,-8,4,-3,3,1,-4,10,6,-2,2,4,-9,5,9,-8,6,-7,-3,1,-6,4,3,10,5,10,7,1,2,-9,-4,4,-5,2,3,-6,6,-9,-3,-8,10,-6,-3,-6,5,-6,2,-8,-2,5,-4,4,-10,-6,-3,-1,-4,1,6,-4,1,-9,-9,10,-9,-9,-5,-10,-8,-9,-3,-4,-9,-6,-2,-7,10,8,5,3,2,-5,-6,3,5,3,-2,7,-3,6,5,8,1,7,3,-2,-3,-1,3,-3,6,6,-4,-9,6,-10,-1,6,-6,10,4,-4,8,-6,-1,-9,4,5,8,4,-9,5,-5,-2,6,10,-1,-9,-2,-9,-5,-10,-4,6,8,6,-4,-5,-1,-2,8,-9,8,9,-2,-5,-7,-5,-1,-2,10,-6,8,5,-10,-8,-9,-9,-4,1,7,2,-2,-4,9,3,6,6,-3,-7,10,-3,-2,-7,1,2,-5,-1,-1,-1,-2,10,6,-4,-8,3,-6,-8,9,5,-5,-7,9,-7,-2,1,-5,-4,8,9,8,-6,8,-3,1,-6,-2,7,10,4,-4,-8,9,-9,9,-4,2,9,6,-7,-7,3,8,3,-8,10,5,1,9,2,10,4,8,3,5,-10,5,-4,-5,-10,7,5,9,9,-7,-7,6,10,3,7,5,2,1,2,-4,-1,4],[4,-3,3,-3,9,-2,-5,-2,4,-2,-7,4,-10,-4,1,8,-3,-10,3,9,-5,10,-7,-4,10,-1,8,-6,4,-1,2,-2,-4,-3,8,-8,-6,-2,-1,-8,-2,-5,2,1,5,-3,-5,2,-9,-6,-9,-9,3,10,10,4,-4,-4,-4,4,-9,4,6,-3,1,2,-4,-6,2,2,3,6,6,-6,7,8,1,-1,-10,-1,-2,4,4,4,8,-10,1,-10,7,7,-10,-1,-9,-7,5,-9,-1,-4,2,4,5,3,-1,-4,1,-2,8,-3,4,-5,7,9,-6,-6,-2,-2,-4,4,8,-2,1,3,7,-6,5,1,5,4,4,4,10,-2,9,-8,6,-9,5,-6,-7,5,-4,-5,-8,-2,1,-8,-2,-3,-8,1,2,3,-1,10,-3,-1,1,8,9,10,8,8,8,-2,-4,-2,-4,-4,6,-4,-6,6,2,-7,-3,-10,-4,-10,2,3,-6,2,2,6,9,6,6,-3,5,-1,6,9,2,6,-5,9,4,3,9,-3,-1,4,-3,8,-6,6,2,3,9,7,-8,5,-8,-9,10,-5,-3,10,5,-1,1,-4,5,7,9,-7,-8,1,3,-5,2,-7,1,10,-7,9,-8,-1,10,-8,9,4,-8,-7,4,5,6,-2,9,-2,-3,-6,-4,6,4,1,-7,-5,1,-7,6,3,-4,-8,7,9,3,-10,2,-10,-2,-2,-7,6,-8,5,3,-7,-4,-9,-7,10,-4,8,8,4,1,9,-4,-8,-5,8,2,6,8,-9,-4,6,9,5,2,-7,7,10,10,4,2,7,5,2,-9,-2,-9,-2,-2,8,-8,6,-3,-7,-4,-10,10,10,1,3,-2,10,1,10,10,-7,2,-4,-10,8,9,-10,-5,8,-2,-5,-4,-6,8,-10,3,-5,-1,-2,7,6,-9,-6,-9,-10,5,-7,-10,-8,10,-7,7,10],[10,-10,-3,4,3,8,-6,4,4,2,4,-4,-10,-7,-4,5,-10,-10,1,5,-6,7,1,-5,1,-3,-7,-9,-10,4,-3,6,3,-6,-2,10,4,-9,-9,2,-2,-6,1,-8,2,-3,-10,-8,-6,9,5,-3,-9,4,7,-1,-8,-7,-2,10,-6,9,-1,-1,1,-5,1,5,-2,-1,4,7,-9,-1,-1,7,3,5,2,10,-8,-10,-3,-3,4,4,-6,-10,-7,-7,1,10,-7,5,-3,-5,-10,-1,9,-9,-8,9,-6,-10,-9,5,-9,3,10,-9,4,3,8,8,8,10,-2,9,-7,5,5,7,3,-2,-7,5,3,-5,1,-8,-3,-4,-9,-7,1,-4,9,10,9,-6,-3,6,-8,8,-6,-8,-7,8,-7,-2,-6,-5,-6,-9,-9,1,-4,7,-10,1,1,9,-4,-2,1,-9,10,1,9,3,5,-9,1,-10,10,8,-3,-9,-3,7,-7,-10,8,-5,3,6,-1,6,-2,-4,-10,-4,-1,-1,8,-8,-4,-3,2,-1,5,-3,-4,-8,-5,-9,-7,1,7,-4,-10,9,-3,-6,2,9,9,-4,1,1,6,-3,2,3,-8,4,9,1,6,6,7,5,-7,10,5,-4,-9,6,-2,1,-7,-7,-8,8,-6,-4,-2,-8,10,-7,-9,-5,-7,-2,-1,-9,7,5,-4,1,-7,-2,6,8,-10,-10,-3,7,-8,-2,-1,-9,7,-6,-7,9,-6,3,-5,-7,-3,3,-5,-9,-7,-4,-2,-9,-7,7,5,-5,1,2,-8,-8,-7,-8,-1,-5,-8,9,2,-8,-6,-2,-3,4,5,-9,-7,4,7,-6,1,-9,2,10,7,-4,4,-3,-3,2,-3,2,7,-5,10,-5,5,-1,-3,5,-8,2,-7,9,-4,-9,-4,-8,-7,-7,4,-7,7,10,-8,9,-5,9,8,1,1,-10,9,5,-10,-2,-6,5,-6,5]], dtype = "uint64")#candidate|1276|(4, 364)|const|uint64
var_1277 = relay.var("var_1277", dtype = "uint16", shape = (240,))#candidate|1277|(240,)|var|uint16
call_1275 = relay.TupleGetItem(func_873_call(relay.reshape(const_1276.astype('uint64'), [8, 14, 13]), relay.reshape(const_1276.astype('uint64'), [8, 14, 13]), relay.reshape(var_1277.astype('uint16'), [240,]), ), 1)
call_1278 = relay.TupleGetItem(func_877_call(relay.reshape(const_1276.astype('uint64'), [8, 14, 13]), relay.reshape(const_1276.astype('uint64'), [8, 14, 13]), relay.reshape(var_1277.astype('uint16'), [240,]), ), 1)
const_1280 = relay.const([[1,5,3,-10,-2,-1,-2,-6,-2,-3,-3,1,-7,9,7,3,-6,-5,6,2,-10,6,2,8,9,7,4,-1,6,-6,10,10,-8,4,8,1,-3,-1,1,8,-5,-9,-2,7,2,10,3,-9,5,-6,-1,5,5,8,-7,5,-1,8,7,-3,3,3,3,8,5,-3,10,-8,-3,-3,3,2,-6,-9,-10,-4,-6,-8,10,7,9,-10,9,5,6,-4,-10,5,9,-9,-6,3,-1,-1,8,-6,1,7,8,1,2,3,2,-5,1,3,8,-1,8,2,1,2,-6,1,-10,5,8,3,-5,-4,-4,-6,-2,3,-1,5,-3,-4,-5,-10,-9,-9,5,8,2,-8,8,1,1,9,9,3,-10,-10,4,-4,-6,-10,6,-1,-2,7,3,10,-3,7,3,-3,-9,-8,2,-7,-4,9,7,-10,-9,8,6,9,9,1,-7,2,7,10,3,-10,-4,-9,-9,3,8,3,1,5,-7,9,1,10,3,-9,-7,3,8,-6,1,-6,-1,4,10,-2,-6,-10,6,8,2,-6,-6,2,-1,2,10,-2,6,2,5,-2,-9,-1,4,4,7,-5,-1,9,-7,-5,-1,-7,4,3,-5,4,9,9,-5,9,3,8,-1,5,10,-5,8,7,3,-3,9,4,-3,3,-6,-3,-6,-2,-8,7,8,8,-5,-9,-7,7,-10,-3,-4,2,-9,-6,7,-4,-4,4,4,-9,9,9,10,1,9,-2,10,-2,2,4,7,-4,-10,2,-2,-4,8,-6,-1,8,-1,-2,6,-10,1,8,3,-8,2,-8,2,-5,7,-9,-8,-10,-7,10,8,4,7,9,5,4,9,4,-7,-4,-10,-5,-1,-9,-9,4,2,-7,3,10,3,-7,-7,-6,10,9,6,-2,10,5,-2,-5,8,-5,7,-9,9,-5,-9,-3,4,10,-7,-4,6,4,-10,-4,2,1],[5,2,-8,-2,-9,-5,-6,-10,9,-8,5,3,-1,-6,-8,-2,7,-7,-10,-1,4,1,-2,3,-7,6,-4,-9,-10,10,2,-9,8,3,6,9,9,-10,-1,2,-7,-1,-1,-8,7,-7,9,-7,5,-5,1,1,-3,3,-7,3,-7,-4,9,9,7,-3,5,5,10,-1,5,-3,4,-4,4,4,6,-10,-8,-8,-5,5,-3,-10,-2,3,2,10,3,6,3,-9,-7,-3,5,2,-4,-2,7,9,-10,1,-8,7,-4,1,2,-6,6,-4,9,-3,-2,10,-6,1,1,7,2,5,6,3,3,-4,7,1,3,10,10,5,1,1,9,-3,1,-6,3,4,-9,6,6,3,-5,5,5,1,-7,9,-10,8,2,8,-5,1,1,-9,9,6,-7,9,-2,-9,5,-6,10,-6,-8,-8,-7,9,10,-4,-2,-3,5,2,-4,-6,-8,-4,6,3,-6,-7,3,2,-5,-2,-9,5,-9,-1,5,2,10,4,-7,10,-9,6,-2,-5,5,4,-4,-7,-6,-6,6,6,5,1,-6,-3,7,-5,8,-8,9,6,-10,6,3,-9,-1,6,7,-6,-8,8,-10,4,4,2,3,5,-5,1,5,9,-7,2,2,-8,8,-4,8,-8,-2,-6,-10,-10,3,1,5,4,4,-7,3,-7,-9,9,10,2,10,9,-8,-3,4,9,-5,-3,-8,-5,4,-1,-4,-4,10,8,-3,-7,10,4,-3,3,-7,-7,7,-5,6,5,6,4,-5,-5,-3,-9,-4,7,9,7,6,-2,-8,5,-3,-3,2,-7,4,-5,-6,-8,-1,-8,-4,-6,-9,-5,-5,10,-3,-9,4,3,-9,5,-5,6,9,-6,-6,-7,-1,3,-5,6,-10,4,-2,-4,-3,8,3,6,7,6,6,-10,6,-5,-6,8,9,-10,8,3,4,-1,-5,-8,1,-6,7,-6,-1,5],[-3,5,-6,-2,-10,8,-8,8,8,-6,2,-5,-1,-6,-1,10,-6,7,-10,6,6,2,3,-7,-10,9,6,2,7,10,9,-4,-4,8,-10,4,10,-7,-7,-5,9,8,-10,-5,-8,-4,4,3,9,-4,6,4,-3,9,9,-9,-8,6,-9,6,7,-6,10,-10,1,-9,-9,2,-7,-4,-7,-3,-9,-2,1,6,9,-8,3,9,10,-2,-2,3,-7,4,-9,8,7,6,9,-5,-6,-7,-8,3,-2,-9,1,-4,10,-2,-6,-8,-2,2,-6,10,-7,-1,3,5,8,2,7,-10,3,-5,-4,-3,-7,10,9,5,8,4,-1,7,-4,-1,-4,-7,2,-5,7,3,-2,-7,-4,8,10,1,1,-1,6,6,-2,6,-7,10,-8,7,-7,-10,9,-3,10,-2,-4,3,-6,10,2,-2,7,-4,-7,7,-7,7,7,-7,-5,-5,4,7,-9,-8,2,-1,-1,8,-5,-4,-3,10,-2,-6,-8,4,-9,1,-9,-10,-10,4,5,1,-8,-4,-7,-1,-3,-4,8,-2,10,-6,4,-1,-6,-6,-6,2,-2,-5,1,8,2,7,-3,-8,4,-3,9,-3,-1,-5,7,-3,4,-10,3,-10,-3,7,-6,8,-1,10,-8,-7,3,-6,-9,-9,-6,-9,8,-5,6,4,9,4,4,-1,7,1,-2,-10,7,-6,-10,-1,-4,-9,8,-6,7,6,4,-6,-7,-2,-6,-10,4,6,-10,-4,3,7,-7,8,-3,-9,-4,-9,-2,8,5,-8,5,-5,-1,1,2,-7,1,5,10,2,-7,-4,3,-6,1,7,10,-3,1,-6,2,-2,-9,-10,2,-2,2,-9,-10,-3,-3,-9,4,-5,-5,-8,4,-3,-10,1,-4,1,1,-3,5,3,8,-10,-5,-7,-7,9,-6,6,7,6,-2,-9,6,-7,-10,10,2,8,6,10,-2,-5,-3,-4,8,-4],[-8,-7,-7,-5,3,-2,-5,4,8,5,3,6,-2,-8,2,-3,7,5,2,-10,7,-4,4,6,-4,-10,2,6,-10,-4,-8,-3,7,-10,1,-8,2,3,-1,-8,9,-3,5,4,-4,8,-7,9,-2,-7,-9,-1,6,-8,2,-4,-5,-1,6,8,6,-4,-10,9,1,2,10,2,-7,4,8,10,7,-6,9,-3,-1,-9,9,2,5,-2,7,-2,-8,-4,4,-2,7,4,-3,2,5,6,3,-5,-1,-3,3,-5,-2,9,-4,9,-10,-7,9,10,3,7,3,-4,9,5,5,-4,10,4,-2,-5,-5,7,4,-7,3,-2,-6,-1,6,-8,3,-7,-3,8,4,-10,-8,3,4,10,4,4,-10,6,8,-4,-5,-5,-4,6,6,8,-4,-7,-1,-8,1,-6,6,5,-5,4,-2,8,1,5,-3,3,-6,-8,7,3,-9,-7,10,-6,2,4,-2,-1,8,2,1,-9,-6,-3,4,-9,6,7,-9,-10,4,5,6,-8,-4,-6,-6,1,1,-4,-3,-9,10,-4,6,10,-7,7,-2,10,7,-2,-8,-4,-8,-5,1,9,-9,-10,8,6,-6,-1,-9,-6,-6,9,1,4,-2,-2,4,-4,-6,-7,-4,-2,-7,1,-3,-4,3,-2,7,-4,6,3,7,2,-4,10,5,10,-4,-9,6,-5,-7,3,-2,4,-3,9,-6,5,-1,8,4,9,9,-4,-1,5,-5,-1,-7,6,-4,10,-5,8,10,3,5,10,10,-10,3,9,6,-5,-5,-3,-4,-8,7,-9,1,-1,-6,10,-6,-8,-6,5,9,4,-10,2,9,-5,6,-3,7,-5,6,-10,-6,9,7,3,-5,9,-2,-9,3,-7,-9,-7,-6,-1,8,5,10,-5,10,-3,4,8,3,7,5,-6,-6,-3,5,-5,5,-6,-3,-4,-8,-6,8,-8,-5,-6,9,-5,5,7]], dtype = "uint64")#candidate|1280|(4, 364)|const|uint64
bop_1281 = relay.mod(const_1276.astype('float64'), relay.reshape(const_1280.astype('float64'), relay.shape_of(const_1276))) # shape=(4, 364)
bop_1288 = relay.bitwise_and(const_1276.astype('int16'), relay.reshape(const_1280.astype('int16'), relay.shape_of(const_1276))) # shape=(4, 364)
output = relay.Tuple([call_1266,call_1275,var_1277,bop_1281,bop_1288,])
output2 = relay.Tuple([call_1267,call_1278,var_1277,bop_1281,bop_1288,])
func_1292 = relay.Function([var_1277,], output)
mod['func_1292'] = func_1292
mod = relay.transform.InferType()(mod)
mutated_mod['func_1292'] = func_1292
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1293 = relay.var("var_1293", dtype = "uint16", shape = (240,))#candidate|1293|(240,)|var|uint16
func_1292_call = mutated_mod.get_global_var('func_1292')
call_1294 = func_1292_call(var_1293)
output = call_1294
func_1295 = relay.Function([var_1293], output)
mutated_mod['func_1295'] = func_1295
mutated_mod = relay.transform.InferType()(mutated_mod)
func_424_call = mod.get_global_var('func_424')
func_426_call = mutated_mod.get_global_var('func_426')
call_1303 = relay.TupleGetItem(func_424_call(), 0)
call_1304 = relay.TupleGetItem(func_426_call(), 0)
output = relay.Tuple([call_1303,])
output2 = relay.Tuple([call_1304,])
func_1312 = relay.Function([], output)
mod['func_1312'] = func_1312
mod = relay.transform.InferType()(mod)
output = func_1312()
func_1313 = relay.Function([], output)
mutated_mod['func_1313'] = func_1313
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1312_call = mod.get_global_var('func_1312')
func_1313_call = mutated_mod.get_global_var('func_1313')
call_1322 = relay.TupleGetItem(func_1312_call(), 0)
call_1323 = relay.TupleGetItem(func_1313_call(), 0)
output = call_1322
output2 = call_1323
func_1330 = relay.Function([], output)
mod['func_1330'] = func_1330
mod = relay.transform.InferType()(mod)
mutated_mod['func_1330'] = func_1330
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1330_call = mutated_mod.get_global_var('func_1330')
call_1331 = func_1330_call()
output = call_1331
func_1332 = relay.Function([], output)
mutated_mod['func_1332'] = func_1332
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1129_call = mod.get_global_var('func_1129')
func_1130_call = mutated_mod.get_global_var('func_1130')
call_1404 = relay.TupleGetItem(func_1129_call(), 3)
call_1405 = relay.TupleGetItem(func_1130_call(), 3)
output = call_1404
output2 = call_1405
func_1418 = relay.Function([], output)
mod['func_1418'] = func_1418
mod = relay.transform.InferType()(mod)
mutated_mod['func_1418'] = func_1418
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1418_call = mutated_mod.get_global_var('func_1418')
call_1419 = func_1418_call()
output = call_1419
func_1420 = relay.Function([], output)
mutated_mod['func_1420'] = func_1420
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1330_call = mod.get_global_var('func_1330')
func_1332_call = mutated_mod.get_global_var('func_1332')
call_1424 = func_1330_call()
call_1425 = func_1330_call()
func_1239_call = mod.get_global_var('func_1239')
func_1241_call = mutated_mod.get_global_var('func_1241')
call_1437 = relay.TupleGetItem(func_1239_call(), 2)
call_1438 = relay.TupleGetItem(func_1241_call(), 2)
uop_1441 = relay.asin(call_1437.astype('float32')) # shape=(9, 7, 16)
uop_1443 = relay.asin(call_1438.astype('float32')) # shape=(9, 7, 16)
func_163_call = mod.get_global_var('func_163')
func_166_call = mutated_mod.get_global_var('func_166')
var_1446 = relay.var("var_1446", dtype = "uint16", shape = (960,))#candidate|1446|(960,)|var|uint16
call_1445 = func_163_call(relay.reshape(var_1446.astype('uint16'), [6, 16, 10]), relay.reshape(var_1446.astype('uint16'), [6, 16, 10]), )
call_1447 = func_163_call(relay.reshape(var_1446.astype('uint16'), [6, 16, 10]), relay.reshape(var_1446.astype('uint16'), [6, 16, 10]), )
output = relay.Tuple([call_1424,uop_1441,call_1445,var_1446,])
output2 = relay.Tuple([call_1425,uop_1443,call_1447,var_1446,])
func_1453 = relay.Function([var_1446,], output)
mod['func_1453'] = func_1453
mod = relay.transform.InferType()(mod)
mutated_mod['func_1453'] = func_1453
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1454 = relay.var("var_1454", dtype = "uint16", shape = (960,))#candidate|1454|(960,)|var|uint16
func_1453_call = mutated_mod.get_global_var('func_1453')
call_1455 = func_1453_call(var_1454)
output = call_1455
func_1456 = relay.Function([var_1454], output)
mutated_mod['func_1456'] = func_1456
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1494 = relay.var("var_1494", dtype = "int8", shape = ())#candidate|1494|()|var|int8
var_1495 = relay.var("var_1495", dtype = "int8", shape = (1, 4, 12))#candidate|1495|(1, 4, 12)|var|int8
bop_1496 = relay.greater_equal(var_1494.astype('bool'), var_1495.astype('bool')) # shape=(1, 4, 12)
bop_1501 = relay.logical_xor(var_1495.astype('uint32'), var_1494.astype('uint32')) # shape=(1, 4, 12)
uop_1505 = relay.log(bop_1501.astype('float64')) # shape=(1, 4, 12)
func_320_call = mod.get_global_var('func_320')
func_321_call = mutated_mod.get_global_var('func_321')
call_1509 = func_320_call()
call_1510 = func_320_call()
bop_1516 = relay.not_equal(bop_1496.astype('bool'), var_1494.astype('bool')) # shape=(1, 4, 12)
uop_1522 = relay.asin(uop_1505.astype('float64')) # shape=(1, 4, 12)
bop_1526 = relay.right_shift(uop_1505.astype('uint32'), relay.reshape(bop_1516.astype('uint32'), relay.shape_of(uop_1505))) # shape=(1, 4, 12)
uop_1530 = relay.erf(uop_1505.astype('float64')) # shape=(1, 4, 12)
func_1017_call = mod.get_global_var('func_1017')
func_1020_call = mutated_mod.get_global_var('func_1020')
var_1534 = relay.var("var_1534", dtype = "uint64", shape = (1456,))#candidate|1534|(1456,)|var|uint64
var_1535 = relay.var("var_1535", dtype = "uint16", shape = (240,))#candidate|1535|(240,)|var|uint16
call_1533 = relay.TupleGetItem(func_1017_call(relay.reshape(var_1534.astype('uint64'), [1456,]), relay.reshape(var_1535.astype('uint16'), [120, 2]), ), 4)
call_1536 = relay.TupleGetItem(func_1020_call(relay.reshape(var_1534.astype('uint64'), [1456,]), relay.reshape(var_1535.astype('uint16'), [120, 2]), ), 4)
uop_1538 = relay.cosh(uop_1522.astype('float64')) # shape=(1, 4, 12)
uop_1547 = relay.asinh(uop_1538.astype('float64')) # shape=(1, 4, 12)
func_1129_call = mod.get_global_var('func_1129')
func_1130_call = mutated_mod.get_global_var('func_1130')
call_1549 = relay.TupleGetItem(func_1129_call(), 3)
call_1550 = relay.TupleGetItem(func_1130_call(), 3)
uop_1551 = relay.tan(bop_1496.astype('float32')) # shape=(1, 4, 12)
bop_1554 = relay.left_shift(uop_1547.astype('int64'), relay.reshape(bop_1516.astype('int64'), relay.shape_of(uop_1547))) # shape=(1, 4, 12)
bop_1567 = relay.bitwise_xor(uop_1547.astype('uint32'), relay.reshape(bop_1526.astype('uint32'), relay.shape_of(uop_1547))) # shape=(1, 4, 12)
bop_1572 = relay.divide(uop_1505.astype('float64'), relay.reshape(uop_1547.astype('float64'), relay.shape_of(uop_1505))) # shape=(1, 4, 12)
func_257_call = mod.get_global_var('func_257')
func_259_call = mutated_mod.get_global_var('func_259')
call_1582 = func_257_call()
call_1583 = func_257_call()
output = relay.Tuple([call_1509,uop_1530,call_1533,var_1534,var_1535,call_1549,uop_1551,bop_1554,bop_1567,bop_1572,call_1582,])
output2 = relay.Tuple([call_1510,uop_1530,call_1536,var_1534,var_1535,call_1550,uop_1551,bop_1554,bop_1567,bop_1572,call_1583,])
func_1587 = relay.Function([var_1494,var_1495,var_1534,var_1535,], output)
mod['func_1587'] = func_1587
mod = relay.transform.InferType()(mod)
var_1588 = relay.var("var_1588", dtype = "int8", shape = ())#candidate|1588|()|var|int8
var_1589 = relay.var("var_1589", dtype = "int8", shape = (1, 4, 12))#candidate|1589|(1, 4, 12)|var|int8
var_1590 = relay.var("var_1590", dtype = "uint64", shape = (1456,))#candidate|1590|(1456,)|var|uint64
var_1591 = relay.var("var_1591", dtype = "uint16", shape = (240,))#candidate|1591|(240,)|var|uint16
output = func_1587(var_1588,var_1589,var_1590,var_1591,)
func_1592 = relay.Function([var_1588,var_1589,var_1590,var_1591,], output)
mutated_mod['func_1592'] = func_1592
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1623 = relay.var("var_1623", dtype = "uint32", shape = (1, 2))#candidate|1623|(1, 2)|var|uint32
var_1624 = relay.var("var_1624", dtype = "uint32", shape = (1, 2))#candidate|1624|(1, 2)|var|uint32
bop_1625 = relay.bitwise_or(var_1623.astype('uint32'), relay.reshape(var_1624.astype('uint32'), relay.shape_of(var_1623))) # shape=(1, 2)
output = relay.Tuple([bop_1625,])
output2 = relay.Tuple([bop_1625,])
func_1649 = relay.Function([var_1623,var_1624,], output)
mod['func_1649'] = func_1649
mod = relay.transform.InferType()(mod)
mutated_mod['func_1649'] = func_1649
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1649_call = mutated_mod.get_global_var('func_1649')
var_1651 = relay.var("var_1651", dtype = "uint32", shape = (1, 2))#candidate|1651|(1, 2)|var|uint32
var_1652 = relay.var("var_1652", dtype = "uint32", shape = (1, 2))#candidate|1652|(1, 2)|var|uint32
call_1650 = func_1649_call(var_1651,var_1652,)
output = call_1650
func_1653 = relay.Function([var_1651,var_1652,], output)
mutated_mod['func_1653'] = func_1653
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1671 = relay.var("var_1671", dtype = "uint16", shape = (10, 6))#candidate|1671|(10, 6)|var|uint16
var_1672 = relay.var("var_1672", dtype = "uint16", shape = (10, 6))#candidate|1672|(10, 6)|var|uint16
bop_1673 = relay.equal(var_1671.astype('bool'), relay.reshape(var_1672.astype('bool'), relay.shape_of(var_1671))) # shape=(10, 6)
uop_1688 = relay.erf(var_1671.astype('float64')) # shape=(10, 6)
func_594_call = mod.get_global_var('func_594')
func_595_call = mutated_mod.get_global_var('func_595')
call_1698 = relay.TupleGetItem(func_594_call(), 1)
call_1699 = relay.TupleGetItem(func_595_call(), 1)
output = relay.Tuple([bop_1673,uop_1688,call_1698,])
output2 = relay.Tuple([bop_1673,uop_1688,call_1699,])
func_1700 = relay.Function([var_1671,var_1672,], output)
mod['func_1700'] = func_1700
mod = relay.transform.InferType()(mod)
var_1701 = relay.var("var_1701", dtype = "uint16", shape = (10, 6))#candidate|1701|(10, 6)|var|uint16
var_1702 = relay.var("var_1702", dtype = "uint16", shape = (10, 6))#candidate|1702|(10, 6)|var|uint16
output = func_1700(var_1701,var_1702,)
func_1703 = relay.Function([var_1701,var_1702,], output)
mutated_mod['func_1703'] = func_1703
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1129_call = mod.get_global_var('func_1129')
func_1130_call = mutated_mod.get_global_var('func_1130')
call_1759 = relay.TupleGetItem(func_1129_call(), 2)
call_1760 = relay.TupleGetItem(func_1130_call(), 2)
output = relay.Tuple([call_1759,])
output2 = relay.Tuple([call_1760,])
func_1768 = relay.Function([], output)
mod['func_1768'] = func_1768
mod = relay.transform.InferType()(mod)
mutated_mod['func_1768'] = func_1768
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1768_call = mutated_mod.get_global_var('func_1768')
call_1769 = func_1768_call()
output = call_1769
func_1770 = relay.Function([], output)
mutated_mod['func_1770'] = func_1770
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1786 = relay.var("var_1786", dtype = "float64", shape = (3, 2))#candidate|1786|(3, 2)|var|float64
uop_1787 = relay.rsqrt(var_1786.astype('float64')) # shape=(3, 2)
uop_1794 = relay.asinh(uop_1787.astype('float64')) # shape=(3, 2)
output = uop_1794
output2 = uop_1794
func_1803 = relay.Function([var_1786,], output)
mod['func_1803'] = func_1803
mod = relay.transform.InferType()(mod)
mutated_mod['func_1803'] = func_1803
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1804 = relay.var("var_1804", dtype = "float64", shape = (3, 2))#candidate|1804|(3, 2)|var|float64
func_1803_call = mutated_mod.get_global_var('func_1803')
call_1805 = func_1803_call(var_1804)
output = call_1805
func_1806 = relay.Function([var_1804], output)
mutated_mod['func_1806'] = func_1806
mutated_mod = relay.transform.InferType()(mutated_mod)
func_713_call = mod.get_global_var('func_713')
func_715_call = mutated_mod.get_global_var('func_715')
call_1833 = relay.TupleGetItem(func_713_call(), 0)
call_1834 = relay.TupleGetItem(func_715_call(), 0)
output = call_1833
output2 = call_1834
func_1839 = relay.Function([], output)
mod['func_1839'] = func_1839
mod = relay.transform.InferType()(mod)
mutated_mod['func_1839'] = func_1839
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1839_call = mutated_mod.get_global_var('func_1839')
call_1840 = func_1839_call()
output = call_1840
func_1841 = relay.Function([], output)
mutated_mod['func_1841'] = func_1841
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1768_call = mod.get_global_var('func_1768')
func_1770_call = mutated_mod.get_global_var('func_1770')
call_1861 = relay.TupleGetItem(func_1768_call(), 0)
call_1862 = relay.TupleGetItem(func_1770_call(), 0)
func_1330_call = mod.get_global_var('func_1330')
func_1332_call = mutated_mod.get_global_var('func_1332')
call_1877 = func_1330_call()
call_1878 = func_1330_call()
func_1292_call = mod.get_global_var('func_1292')
func_1295_call = mutated_mod.get_global_var('func_1295')
call_1879 = relay.TupleGetItem(func_1292_call(relay.reshape(call_1861.astype('uint16'), [240,])), 1)
call_1880 = relay.TupleGetItem(func_1295_call(relay.reshape(call_1861.astype('uint16'), [240,])), 1)
var_1881 = relay.var("var_1881", dtype = "float64", shape = (9, 7, 16))#candidate|1881|(9, 7, 16)|var|float64
bop_1882 = relay.not_equal(call_1879.astype('bool'), relay.reshape(var_1881.astype('bool'), relay.shape_of(call_1879))) # shape=(9, 7, 16)
bop_1885 = relay.not_equal(call_1880.astype('bool'), relay.reshape(var_1881.astype('bool'), relay.shape_of(call_1880))) # shape=(9, 7, 16)
output = relay.Tuple([call_1861,call_1877,bop_1882,])
output2 = relay.Tuple([call_1862,call_1878,bop_1885,])
func_1886 = relay.Function([var_1881,], output)
mod['func_1886'] = func_1886
mod = relay.transform.InferType()(mod)
var_1887 = relay.var("var_1887", dtype = "float64", shape = (9, 7, 16))#candidate|1887|(9, 7, 16)|var|float64
output = func_1886(var_1887)
func_1888 = relay.Function([var_1887], output)
mutated_mod['func_1888'] = func_1888
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1330_call = mod.get_global_var('func_1330')
func_1332_call = mutated_mod.get_global_var('func_1332')
call_1932 = func_1330_call()
call_1933 = func_1330_call()
uop_1936 = relay.asinh(call_1932.astype('float32')) # shape=(9, 7, 16)
uop_1938 = relay.asinh(call_1933.astype('float32')) # shape=(9, 7, 16)
output = relay.Tuple([uop_1936,])
output2 = relay.Tuple([uop_1938,])
func_1939 = relay.Function([], output)
mod['func_1939'] = func_1939
mod = relay.transform.InferType()(mod)
mutated_mod['func_1939'] = func_1939
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1939_call = mutated_mod.get_global_var('func_1939')
call_1940 = func_1939_call()
output = call_1940
func_1941 = relay.Function([], output)
mutated_mod['func_1941'] = func_1941
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1942 = relay.var("var_1942", dtype = "float64", shape = (3, 8))#candidate|1942|(3, 8)|var|float64
uop_1943 = relay.asinh(var_1942.astype('float64')) # shape=(3, 8)
func_713_call = mod.get_global_var('func_713')
func_715_call = mutated_mod.get_global_var('func_715')
call_1946 = relay.TupleGetItem(func_713_call(), 0)
call_1947 = relay.TupleGetItem(func_715_call(), 0)
uop_1952 = relay.exp(var_1942.astype('float64')) # shape=(3, 8)
func_41_call = mod.get_global_var('func_41')
func_43_call = mutated_mod.get_global_var('func_43')
const_1955 = relay.const([[-1.594183,-5.634076],[8.860000,2.427330],[-0.949801,-8.953743],[-0.502114,-1.755647],[-9.541123,3.614222],[0.226641,-0.674411]], dtype = "float32")#candidate|1955|(6, 2)|const|float32
call_1954 = relay.TupleGetItem(func_41_call(relay.reshape(const_1955.astype('float32'), [12, 1])), 0)
call_1956 = relay.TupleGetItem(func_43_call(relay.reshape(const_1955.astype('float32'), [12, 1])), 0)
func_109_call = mod.get_global_var('func_109')
func_112_call = mutated_mod.get_global_var('func_112')
var_1974 = relay.var("var_1974", dtype = "float32", shape = (2548,))#candidate|1974|(2548,)|var|float32
call_1973 = func_109_call(relay.reshape(var_1974.astype('float32'), [14, 14, 13]))
call_1975 = func_109_call(relay.reshape(var_1974.astype('float32'), [14, 14, 13]))
bop_1978 = relay.right_shift(uop_1952.astype('uint16'), relay.reshape(var_1942.astype('uint16'), relay.shape_of(uop_1952))) # shape=(3, 8)
func_1312_call = mod.get_global_var('func_1312')
func_1313_call = mutated_mod.get_global_var('func_1313')
call_1984 = relay.TupleGetItem(func_1312_call(), 0)
call_1985 = relay.TupleGetItem(func_1313_call(), 0)
bop_1988 = relay.divide(bop_1978.astype('float64'), relay.reshape(var_1942.astype('float64'), relay.shape_of(bop_1978))) # shape=(3, 8)
bop_1999 = relay.power(bop_1988.astype('float32'), relay.reshape(uop_1943.astype('float32'), relay.shape_of(bop_1988))) # shape=(3, 8)
output = relay.Tuple([call_1946,call_1954,const_1955,call_1973,var_1974,call_1984,bop_1999,])
output2 = relay.Tuple([call_1947,call_1956,const_1955,call_1975,var_1974,call_1985,bop_1999,])
func_2005 = relay.Function([var_1942,var_1974,], output)
mod['func_2005'] = func_2005
mod = relay.transform.InferType()(mod)
mutated_mod['func_2005'] = func_2005
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2005_call = mutated_mod.get_global_var('func_2005')
var_2007 = relay.var("var_2007", dtype = "float64", shape = (3, 8))#candidate|2007|(3, 8)|var|float64
var_2008 = relay.var("var_2008", dtype = "float32", shape = (2548,))#candidate|2008|(2548,)|var|float32
call_2006 = func_2005_call(var_2007,var_2008,)
output = call_2006
func_2009 = relay.Function([var_2007,var_2008,], output)
mutated_mod['func_2009'] = func_2009
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1330_call = mod.get_global_var('func_1330')
func_1332_call = mutated_mod.get_global_var('func_1332')
call_2084 = func_1330_call()
call_2085 = func_1330_call()
func_1312_call = mod.get_global_var('func_1312')
func_1313_call = mutated_mod.get_global_var('func_1313')
call_2115 = relay.TupleGetItem(func_1312_call(), 0)
call_2116 = relay.TupleGetItem(func_1313_call(), 0)
func_1649_call = mod.get_global_var('func_1649')
func_1653_call = mutated_mod.get_global_var('func_1653')
var_2122 = relay.var("var_2122", dtype = "uint32", shape = (2, 1))#candidate|2122|(2, 1)|var|uint32
call_2121 = relay.TupleGetItem(func_1649_call(relay.reshape(var_2122.astype('uint32'), [1, 2]), relay.reshape(var_2122.astype('uint32'), [1, 2]), ), 0)
call_2123 = relay.TupleGetItem(func_1653_call(relay.reshape(var_2122.astype('uint32'), [1, 2]), relay.reshape(var_2122.astype('uint32'), [1, 2]), ), 0)
output = relay.Tuple([call_2084,call_2115,call_2121,var_2122,])
output2 = relay.Tuple([call_2085,call_2116,call_2123,var_2122,])
func_2126 = relay.Function([var_2122,], output)
mod['func_2126'] = func_2126
mod = relay.transform.InferType()(mod)
var_2127 = relay.var("var_2127", dtype = "uint32", shape = (2, 1))#candidate|2127|(2, 1)|var|uint32
output = func_2126(var_2127)
func_2128 = relay.Function([var_2127], output)
mutated_mod['func_2128'] = func_2128
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2139 = relay.const([[[6,-3,1,3,-6,10,-7,-10,7],[5,8,2,4,-2,-9,-8,6,-8],[-3,-2,-5,6,-5,5,10,3,1],[-1,-9,1,5,3,-1,10,-5,4]],[[5,4,-4,4,-2,-2,-4,7,8],[-3,7,4,-8,-3,-9,3,-5,-3],[-7,-5,-4,1,1,-1,-5,-2,2],[-2,4,-3,2,-6,2,-8,-8,9]],[[9,10,-5,-9,-7,3,-10,-10,-10],[-5,9,-9,-1,-2,-9,1,-9,8],[-5,-6,-1,-4,4,5,-8,-6,2],[-10,2,1,2,-1,-4,9,-9,2]],[[4,1,1,-9,6,6,1,-8,9],[-8,3,4,-10,7,-7,-9,6,-8],[6,5,-3,8,8,-8,-7,-8,6],[8,-6,-5,-3,-8,6,5,3,4]],[[3,-1,9,-8,8,9,-9,-1,-1],[1,-3,-4,-3,9,-8,-4,-4,-2],[8,1,5,3,-6,-10,-1,2,8],[-10,-4,-8,3,-5,-1,-2,-8,-7]],[[3,-6,4,-8,7,-8,-6,7,-9],[-4,9,9,-8,-8,-4,-1,7,-7],[-3,6,5,-4,-4,10,-8,-8,-6],[6,10,4,3,2,-3,10,4,-8]],[[2,1,-5,-3,-7,-9,-10,1,-2],[-3,-10,-4,-5,-9,-2,9,10,-4],[-1,7,8,3,2,-7,8,-7,6],[-1,8,10,-8,-6,9,3,-6,7]],[[4,-1,5,1,9,-4,-1,-6,9],[-9,-8,-5,-4,4,7,-4,-3,-9],[3,2,8,-7,-10,-10,-2,6,-5],[-5,-1,10,4,1,9,4,10,3]],[[1,-8,6,2,6,-8,-10,1,5],[9,5,5,-10,5,-4,-7,-10,-5],[-1,-4,6,-8,-6,8,-10,9,7],[-9,-2,6,-5,-10,-5,3,4,5]],[[-9,6,1,7,9,7,9,-2,10],[-6,10,-2,-10,3,2,4,2,-7],[2,-4,-9,8,7,-8,7,-4,9],[-1,8,-3,-1,-2,-6,6,2,-8]],[[5,8,5,10,9,8,7,6,-1],[-6,5,7,-6,9,5,10,5,-1],[-5,2,-5,3,-10,-9,-8,-5,-2],[6,5,7,-5,9,8,-10,-1,10]],[[-5,-7,-2,5,-1,4,-3,3,-6],[-8,-1,10,-7,4,-5,3,7,-2],[-8,8,-9,5,5,-2,10,3,-8],[-3,-3,4,-1,-5,-9,-7,8,-6]],[[-10,-9,-9,-7,2,4,-2,7,-4],[-1,-6,-3,-7,-1,8,2,-8,-2],[-5,-10,8,6,-1,-5,-4,1,-5],[4,-7,-9,-4,-2,3,9,-2,4]],[[3,9,-3,-8,-1,6,3,9,8],[-4,10,-3,9,-10,3,10,6,-9],[-4,-7,-5,-2,-4,8,-1,-4,-8],[4,3,8,-8,1,10,4,-8,-2]],[[3,-9,6,-8,-4,8,1,1,7],[-9,10,10,1,-5,-2,-10,-10,1],[10,5,-6,-6,-8,-1,6,2,10],[-5,6,2,8,3,2,-6,-7,-6]]], dtype = "uint32")#candidate|2139|(15, 4, 9)|const|uint32
const_2140 = relay.const([[[-3,6,10,-6,10,9,7,-8,-4],[-5,-10,9,-1,-5,10,-2,6,2],[-5,4,2,-1,-7,-7,-7,7,9],[5,9,-6,7,-1,3,10,-6,7]],[[10,-6,6,9,10,-3,1,10,7],[-8,1,1,5,-3,-8,8,6,-6],[-7,-8,-10,-5,-10,-1,-10,-3,-8],[-6,4,3,-8,1,-5,8,1,-9]],[[10,3,1,-5,3,-4,2,6,-9],[-9,10,-3,-6,-6,-1,-9,-1,9],[8,-6,3,2,2,-3,-6,10,-2],[-10,-3,5,-3,5,9,-7,7,6]],[[3,-7,-7,-8,3,-1,-8,-5,-9],[-7,7,6,3,2,9,1,-7,9],[-9,9,4,8,10,4,-6,-2,10],[-8,5,4,8,-6,-4,-1,3,-6]],[[9,-8,9,-10,1,-5,-2,-6,3],[-9,-5,-5,1,3,-5,10,5,5],[-9,9,7,-3,-9,3,8,2,-8],[-4,5,4,8,-6,-3,-9,5,4]],[[-3,10,5,5,-7,7,-6,-6,-10],[-2,6,1,8,2,9,-7,5,8],[3,5,2,5,5,-10,-2,1,-8],[-7,-4,10,-9,8,4,-3,-1,7]],[[2,-3,3,-10,-4,3,5,10,1],[5,-7,-3,10,10,-4,-5,6,3],[-1,-4,-4,-9,-9,10,-9,9,9],[10,7,3,4,-10,-7,-2,6,5]],[[5,10,-3,3,7,-1,-3,6,-1],[-3,-8,-7,-8,3,-9,5,-10,-9],[7,-6,-3,1,-8,-7,-5,-3,-3],[-7,-3,4,-7,-7,6,-2,5,7]],[[7,-5,-4,-3,3,1,-10,9,-9],[5,-2,2,8,2,4,-3,-7,5],[3,2,5,1,2,-9,3,-6,8],[-4,6,10,-7,-2,-3,8,6,-1]],[[-3,-6,-4,-7,-1,-3,-3,-5,-5],[8,10,-6,8,9,4,-6,-4,-2],[-9,3,-10,-9,5,1,-9,-4,10],[3,4,1,-2,4,1,-4,3,-10]],[[-6,-7,5,3,-8,4,-6,7,9],[-7,4,8,-7,6,2,4,-7,8],[-10,5,-5,9,7,3,-3,8,-4],[-3,-1,-1,-4,-10,8,2,-9,10]],[[-7,-7,-5,2,-1,-5,9,5,6],[-2,5,-1,1,2,10,6,-3,4],[3,3,-6,-8,6,-4,3,3,9],[-10,-7,8,6,-5,-7,6,4,-4]],[[8,5,7,-8,-7,-6,-5,5,-1],[-9,9,6,4,-7,-1,-9,3,5],[-3,-2,-4,-5,7,2,6,-4,7],[2,10,-2,-10,-2,-6,5,-7,-10]],[[-5,1,6,7,5,9,-1,-5,-2],[-4,1,5,2,-5,-5,2,-1,-2],[-4,-10,-10,1,4,4,7,8,5],[-3,3,6,4,-10,10,-3,10,-3]],[[4,6,2,-2,10,-6,3,-2,1],[4,7,-2,5,1,-9,-8,8,9],[-3,-2,-10,10,10,-2,9,8,-2],[-2,4,-4,8,5,7,-8,6,-5]]], dtype = "uint32")#candidate|2140|(15, 4, 9)|const|uint32
bop_2141 = relay.right_shift(const_2139.astype('uint32'), relay.reshape(const_2140.astype('uint32'), relay.shape_of(const_2139))) # shape=(15, 4, 9)
func_387_call = mod.get_global_var('func_387')
func_392_call = mutated_mod.get_global_var('func_392')
var_2148 = relay.var("var_2148", dtype = "uint16", shape = (240,))#candidate|2148|(240,)|var|uint16
call_2147 = relay.TupleGetItem(func_387_call(relay.reshape(var_2148.astype('uint16'), [4, 15, 4]), relay.reshape(var_2148.astype('uint16'), [4, 15, 4]), relay.reshape(var_2148.astype('float32'), [4, 15, 4]), relay.reshape(var_2148.astype('float32'), [4, 15, 4]), ), 3)
call_2149 = relay.TupleGetItem(func_392_call(relay.reshape(var_2148.astype('uint16'), [4, 15, 4]), relay.reshape(var_2148.astype('uint16'), [4, 15, 4]), relay.reshape(var_2148.astype('float32'), [4, 15, 4]), relay.reshape(var_2148.astype('float32'), [4, 15, 4]), ), 3)
uop_2152 = relay.log(bop_2141.astype('float64')) # shape=(15, 4, 9)
bop_2157 = relay.logical_xor(var_2148.astype('uint16'), relay.reshape(call_2147.astype('uint16'), relay.shape_of(var_2148))) # shape=(240,)
bop_2160 = relay.logical_xor(var_2148.astype('uint16'), relay.reshape(call_2149.astype('uint16'), relay.shape_of(var_2148))) # shape=(240,)
var_2162 = relay.var("var_2162", dtype = "float64", shape = (15, 4, 9))#candidate|2162|(15, 4, 9)|var|float64
bop_2163 = relay.left_shift(uop_2152.astype('int16'), relay.reshape(var_2162.astype('int16'), relay.shape_of(uop_2152))) # shape=(15, 4, 9)
output = relay.Tuple([bop_2157,bop_2163,])
output2 = relay.Tuple([bop_2160,bop_2163,])
func_2168 = relay.Function([var_2148,var_2162,], output)
mod['func_2168'] = func_2168
mod = relay.transform.InferType()(mod)
var_2169 = relay.var("var_2169", dtype = "uint16", shape = (240,))#candidate|2169|(240,)|var|uint16
var_2170 = relay.var("var_2170", dtype = "float64", shape = (15, 4, 9))#candidate|2170|(15, 4, 9)|var|float64
output = func_2168(var_2169,var_2170,)
func_2171 = relay.Function([var_2169,var_2170,], output)
mutated_mod['func_2171'] = func_2171
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1839_call = mod.get_global_var('func_1839')
func_1841_call = mutated_mod.get_global_var('func_1841')
call_2201 = func_1839_call()
call_2202 = func_1839_call()
output = call_2201
output2 = call_2202
func_2204 = relay.Function([], output)
mod['func_2204'] = func_2204
mod = relay.transform.InferType()(mod)
output = func_2204()
func_2205 = relay.Function([], output)
mutated_mod['func_2205'] = func_2205
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2209 = relay.const([[[1,7,9,-10,10,-8,8,9,-8,3,-4,9,-10,-10,-4],[-10,-6,-2,9,-8,9,9,-10,3,5,-1,10,10,1,-1],[-2,9,-8,-4,4,5,8,5,4,-7,-5,7,-10,-7,8],[3,7,-7,4,-1,5,-4,-1,2,8,-6,8,8,10,-9],[1,6,8,2,-9,2,8,7,-4,7,-6,5,-6,-4,-10],[3,-8,1,4,-6,6,-7,4,6,-2,-2,-5,6,3,8],[-4,-7,9,6,1,8,-2,6,2,-7,-6,-5,-9,-2,3],[-6,-10,1,10,5,-3,-1,-10,2,8,8,-10,4,-6,-2],[8,-9,-10,8,-10,-1,7,-8,6,1,-1,7,2,1,-10],[8,-10,8,9,-9,-8,2,2,-4,-1,-2,2,2,-3,-3]],[[-5,-2,-9,-6,-6,-7,-5,2,8,6,9,-10,9,6,-6],[-6,-1,7,-1,-10,7,-3,-4,-2,9,2,7,-10,3,-10],[-8,-1,7,10,-10,-6,6,3,-2,-4,4,10,7,8,7],[-10,-4,-3,8,10,-4,7,6,1,5,-9,-1,-10,9,8],[-6,1,9,3,-9,-5,9,-4,4,-3,3,7,10,-4,-7],[-7,1,3,3,-7,-8,5,6,4,-9,8,8,-9,5,9],[4,-5,5,-6,5,-9,8,2,-7,4,3,9,-9,2,-10],[8,-9,10,2,-10,-1,-1,7,3,-10,-10,-8,4,7,-3],[-7,2,3,-9,2,-3,-2,-10,-6,3,-1,-10,-3,-8,10],[-9,2,4,5,-4,5,-10,10,6,-4,-3,-1,3,7,6]],[[3,-4,-7,2,-4,-9,-4,5,-10,9,7,6,-6,4,10],[-1,-3,8,5,-2,-8,7,-1,-3,1,-4,7,8,8,-7],[4,-9,-4,9,-9,-6,3,7,4,-4,4,-5,7,-4,-9],[-3,-10,-10,-3,2,9,7,1,-7,-5,-2,-10,-2,4,3],[-9,-6,3,1,-4,-8,-1,6,-10,-9,-5,-6,1,3,-3],[1,-5,1,5,-3,-5,4,5,-9,5,10,2,5,3,1],[4,-10,-10,-6,2,-6,10,4,1,10,5,8,-3,3,2],[-4,7,-7,2,2,5,-3,-9,10,-4,8,8,9,10,9],[-7,10,6,2,1,4,-3,10,-5,2,1,-9,5,-2,1],[6,-6,-1,-2,-10,9,10,10,4,2,-5,5,4,1,4]],[[1,9,6,10,4,-2,4,5,-6,9,4,-3,-7,8,4],[1,1,3,-1,5,2,10,-3,-2,-3,-7,7,7,-6,4],[-4,3,7,3,8,-3,7,-8,8,9,3,2,5,-3,-2],[-9,2,-4,-8,6,6,8,-3,-4,-6,-6,-9,8,6,5],[6,6,5,-8,-6,-9,-4,-6,3,9,4,-10,-2,7,10],[7,5,6,3,3,8,4,10,8,9,-5,-1,-8,-5,-2],[-6,-1,-4,2,-2,-1,-8,-2,-4,-4,-6,-5,-7,-1,-7],[-5,3,5,6,-7,4,-1,-2,3,-3,-8,-9,9,8,-6],[4,10,-1,7,4,-8,-3,-1,1,-8,2,-5,-10,6,-4],[-3,-8,-8,-7,6,10,-10,-2,7,-4,10,-2,8,9,8]],[[-10,4,3,7,-6,3,-9,-8,-1,-8,3,-4,3,6,8],[7,-6,-6,-10,1,7,1,-5,1,-7,3,-7,4,-1,-3],[-6,-8,9,1,8,7,-4,-5,1,-6,-5,8,-8,-1,3],[-7,-4,1,-9,-5,4,4,2,8,-5,2,3,-9,2,-9],[6,4,-1,3,9,8,-2,3,2,-9,-6,-7,1,-2,-8],[10,7,1,-8,9,-4,1,1,-10,-7,-10,-10,-4,2,5],[-8,-3,-8,-6,-9,-6,-2,-7,-2,6,5,-4,2,5,-5],[4,-5,2,-1,10,1,-3,4,8,8,-7,1,-8,-1,-8],[3,-2,1,2,10,2,-9,-6,8,10,1,2,1,6,-5],[8,8,-8,2,1,-3,5,1,-6,-7,-6,8,-10,-8,-10]],[[-3,-2,-8,10,-2,4,-5,7,10,4,2,6,7,-8,4],[-1,8,-8,4,8,8,-1,-1,-8,2,8,3,5,-4,7],[2,-5,-1,-7,-2,3,7,2,2,8,-3,1,4,5,10],[-6,-2,-3,7,-2,-4,-8,10,-8,-3,10,5,-1,9,7],[-10,2,-7,6,6,2,4,-3,-1,9,-7,9,2,3,3],[-9,-4,-6,-7,-4,2,-2,-5,5,6,-9,4,-7,7,8],[-9,-5,-9,3,-5,6,2,-6,-3,-2,-4,1,2,-4,7],[8,-10,-10,-6,-2,9,-6,8,-9,-2,7,3,-6,6,-3],[2,1,-6,1,-2,-3,-3,-4,-3,-1,4,-3,-7,-4,-8],[8,-10,-4,-7,-8,-7,2,10,-10,-10,7,10,3,-8,-2]],[[5,6,8,2,2,6,3,-9,5,5,10,-1,4,8,2],[6,-10,5,-2,-1,8,-6,-5,-3,4,-8,-2,5,-3,-7],[2,4,-8,8,-7,6,8,6,7,-6,9,-7,2,-8,6],[-2,1,-8,5,10,-7,-7,10,-8,5,2,-5,9,-3,-2],[4,-5,10,-7,1,8,6,3,-3,5,-5,3,5,9,1],[-7,7,-2,-7,-5,8,8,-3,10,-2,-3,1,8,10,-4],[-1,7,-2,5,10,10,5,2,9,-1,8,-9,-2,4,6],[-4,-10,-3,2,6,9,-9,-3,2,2,6,-9,-8,-4,4],[4,-7,1,-9,-1,4,-10,-6,-6,7,-2,-8,8,10,10],[-3,4,-1,1,9,-4,2,7,-8,-4,1,-8,7,-4,-9]],[[2,1,4,-2,-1,-7,-3,-10,6,-1,5,-8,-2,-10,-1],[3,2,1,3,3,2,8,8,6,-7,8,-1,-4,3,-9],[4,-10,-3,4,-2,-9,-6,10,4,2,4,-3,6,8,-1],[4,7,4,4,-6,-5,-1,-2,5,-10,7,-6,-7,-8,-4],[1,6,1,-8,8,-1,8,3,6,6,-6,-8,-3,-7,-1],[4,8,-10,2,3,-1,-2,-8,-1,-5,-10,9,-5,4,-7],[-2,7,-3,-8,4,-4,8,7,10,-10,-4,8,-8,-8,-5],[-7,6,-5,-2,3,-6,4,2,2,9,9,-2,-7,-7,5],[9,-9,8,3,8,-8,2,2,3,-6,-6,6,-9,2,-7],[10,-9,-3,4,8,4,10,-8,-10,6,1,-8,-2,9,4]],[[1,4,-4,6,4,10,10,4,2,-6,9,-2,6,5,-8],[-5,-5,-8,5,7,-9,-9,-8,-6,-8,-1,-4,3,7,-7],[-7,3,-1,-10,-6,-8,-3,4,2,4,-6,7,7,10,-8],[-8,-9,-6,1,-9,-3,2,5,-7,-9,7,7,-3,-5,-6],[-2,-7,-5,-1,9,3,-8,7,-2,10,-9,-5,2,9,-3],[-10,9,-5,-2,-1,8,-2,7,-10,8,-10,-7,-1,3,6],[-5,2,-6,10,-5,9,-3,2,2,10,-1,7,3,9,-10],[-3,-3,-2,-4,-7,1,2,6,-7,5,-10,-6,-6,-7,-9],[2,-3,-9,-4,-7,-1,4,4,9,-8,-9,-3,-5,7,2],[10,-8,-8,10,-1,4,5,5,-8,3,1,6,6,-2,5]],[[9,-9,2,5,1,1,7,-3,-7,9,9,-1,-3,-8,2],[-9,3,-9,5,-9,9,2,-5,-10,-8,-4,8,-3,4,4],[-7,6,-2,6,-10,-6,2,7,-2,10,4,6,9,3,-1],[1,1,-9,-4,-2,8,3,5,7,-7,-5,3,2,-3,7],[-3,3,6,9,-4,4,7,4,-7,9,-10,-6,-8,-4,3],[-4,-10,10,-8,5,10,-6,7,8,10,10,4,4,-4,4],[2,4,6,5,5,-7,-1,1,-2,-4,8,4,-1,3,-7],[-5,-6,10,-4,-7,-6,3,5,5,-3,-10,4,1,2,-1],[3,-7,-6,3,3,9,2,7,6,-7,-1,-7,2,-10,-4],[-3,-6,7,9,-2,-10,2,-4,3,10,-8,8,-8,3,-7]],[[1,-5,-2,1,-4,6,5,-10,-8,9,-5,-3,-10,5,10],[-2,2,8,-4,9,-1,4,4,4,-8,-2,-10,8,-5,-7],[5,-6,9,-4,2,-10,8,-10,9,4,7,-10,10,-8,1],[8,7,4,9,-8,1,5,-4,-2,8,-10,-2,3,10,-7],[-9,8,10,-1,-2,-9,8,4,8,5,-4,1,9,9,7],[2,-2,1,6,10,-10,-1,-2,10,-3,-6,-4,-4,-10,4],[-1,-3,-9,-5,-4,-3,4,5,-10,-8,2,1,-2,10,-10],[-9,-5,1,5,-10,-3,-7,8,-4,7,-3,-7,-6,9,-1],[4,-9,-2,-2,-8,-8,-5,7,7,2,-5,-2,9,-3,7],[7,-4,8,-7,-3,-3,6,-5,1,-4,5,-10,-2,-6,7]],[[-9,-3,-3,8,-3,6,1,-4,-3,-10,10,8,2,-8,5],[10,-2,-8,5,-6,7,4,4,-6,-5,-5,2,4,3,10],[9,-5,-6,7,-9,2,7,-5,8,-9,10,9,-7,-5,6],[2,7,6,8,-7,-8,-4,6,5,3,-6,-8,-4,-9,7],[6,1,-5,-9,2,-2,6,5,-5,6,4,2,9,7,7],[-1,3,6,-9,-5,-10,1,-2,8,7,-9,7,3,7,4],[-7,-7,-7,10,-8,8,1,4,8,-5,5,7,5,-8,1],[-8,-6,-9,-8,2,-6,-3,-10,4,-10,-2,-3,9,-9,2],[-10,10,-5,-1,-2,10,3,-6,-2,-2,1,7,5,4,4],[5,8,10,-8,8,-5,-7,2,3,6,-6,1,3,-9,9]],[[-4,-7,-2,6,1,-10,-2,7,4,10,7,-9,9,-4,8],[4,-8,2,2,-1,-2,9,10,8,10,-4,-3,-5,4,3],[-3,-3,1,-2,-3,-4,-4,9,-3,-7,-4,-7,-5,-9,4],[-10,2,7,-9,4,9,-9,3,8,2,6,-8,2,9,-2],[-5,7,6,-9,-2,8,-1,6,-4,9,-2,1,9,-5,5],[9,-10,7,4,-2,7,10,9,-3,2,7,6,-6,-1,3],[-8,8,-1,-5,-9,1,-9,5,7,-10,-9,-3,-7,9,-9],[6,5,5,-6,-2,9,2,-4,-7,6,-2,-4,-9,-5,1],[-1,1,-10,1,-7,3,-8,-6,-4,5,-10,-7,3,5,4],[-4,-2,8,-1,8,-6,6,5,-6,6,-9,10,1,1,3]],[[-4,10,-2,-8,9,-1,-6,-7,-10,10,-6,-2,-6,-2,-1],[-4,-4,10,1,8,-5,-5,7,-2,6,-3,-2,1,-10,-6],[-9,-5,-3,10,-5,5,1,-1,-3,7,6,4,-7,-7,-9],[7,1,5,-6,-9,-5,-3,6,5,6,9,-4,-9,9,7],[8,9,5,-5,-9,4,-1,-10,-10,4,-9,-9,9,3,5],[-7,-5,2,10,-10,4,-3,-10,1,10,-5,10,3,3,7],[-7,9,-3,-1,-10,2,-7,-10,1,-5,7,-1,4,-6,1],[5,10,-1,6,-7,-7,4,-5,-10,-6,-9,-5,-1,6,7],[5,-7,-7,9,4,-2,5,4,-10,8,9,2,8,4,3],[3,-7,-4,-1,-8,8,-6,5,3,-4,3,8,7,9,2]],[[-7,1,-5,6,7,-9,-5,-6,-4,-8,-9,2,-8,-3,-2],[-10,-8,-3,-7,9,5,9,-4,10,3,8,1,-1,-9,-6],[9,-10,-9,2,-1,10,-10,6,3,3,6,-1,-1,5,-5],[3,-1,3,-5,7,-5,-2,5,8,-5,-5,-2,7,-7,7],[3,7,4,-5,-2,-5,-7,-1,-6,-10,10,2,-2,-9,-9],[-10,-8,-8,5,-1,6,-6,-6,7,6,5,-5,-9,-5,-3],[-7,-1,-1,7,-4,5,-8,-3,7,-8,-7,8,9,-6,-6],[-1,5,-7,-10,-2,-5,-4,-7,-9,5,7,2,4,1,-8],[-3,9,10,4,-10,-6,-5,-10,-7,9,6,-6,9,10,3],[8,-8,6,3,-9,8,10,8,-6,-8,-9,-10,3,-8,-3]]], dtype = "uint8")#candidate|2209|(15, 10, 15)|const|uint8
var_2210 = relay.var("var_2210", dtype = "uint8", shape = (15, 10, 15))#candidate|2210|(15, 10, 15)|var|uint8
bop_2211 = relay.maximum(const_2209.astype('uint8'), relay.reshape(var_2210.astype('uint8'), relay.shape_of(const_2209))) # shape=(15, 10, 15)
uop_2230 = relay.sinh(var_2210.astype('float64')) # shape=(15, 10, 15)
bop_2235 = relay.power(uop_2230.astype('float32'), relay.reshape(bop_2211.astype('float32'), relay.shape_of(uop_2230))) # shape=(15, 10, 15)
uop_2241 = relay.exp(bop_2235.astype('float64')) # shape=(15, 10, 15)
bop_2243 = relay.right_shift(bop_2211.astype('uint16'), relay.reshape(const_2209.astype('uint16'), relay.shape_of(bop_2211))) # shape=(15, 10, 15)
bop_2247 = relay.not_equal(uop_2230.astype('bool'), relay.reshape(bop_2211.astype('bool'), relay.shape_of(uop_2230))) # shape=(15, 10, 15)
func_1167_call = mod.get_global_var('func_1167')
func_1169_call = mutated_mod.get_global_var('func_1169')
const_2258 = relay.const([True,False,False,False,True,True,False,True,False,False,False,True,True,False,False,True,True,False,True,True,True,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,False,False,True,False,True,False,True,True,True,True,True,True,False,False,False,True,False,False,False,True,False,False,False,True,False,False,False,True,False,True,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,False,False,False,False,False,True,False,True,True,False,True,False,False,False,False,True,False,False,False,True,False,True,False,False,True,True,False,False,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,False,True,False,True,True,False,True,False,True,True,True,True,True,True,False,False,False,False,False,True,True,False,False,False,True,True,True,True,False,True,True,False,False,True,True,True,True,True,False,False,False,True,False,True,True,False,True,True,False,True,False,False,True,False,False,False,False,False,False,False,True,True,False,True,False,True,False,True,False,False,False,False,False,False,True,True,False,False,False,True,True,False,True,True,True,True,True,True,True,True,True,False,False,True,True,False,False,False,False,True,False,False,True,False,False,True,True,False,True,True,True,True,False,False,False,True,False,True,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,True,False,False,False,False,False,True,True,False,False,True,False,False,False,False,False,False,False,True,True,False,False,True,True,False,False,True,False,True,True,False,False,True,False,False,True,True,False,True,True,False,False,True,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,True,False,True,False,False,True,False,True,False,True,True,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,False,True,True,False,False,False,False,True,False,True,False,True,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,False,True,True,False,True,False,True,False,False,True,False,False,False,True], dtype = "bool")#candidate|2258|(416,)|const|bool
call_2257 = relay.TupleGetItem(func_1167_call(relay.reshape(const_2258.astype('bool'), [8, 13, 4])), 0)
call_2259 = relay.TupleGetItem(func_1169_call(relay.reshape(const_2258.astype('bool'), [8, 13, 4])), 0)
bop_2263 = relay.less_equal(uop_2241.astype('bool'), relay.reshape(bop_2235.astype('bool'), relay.shape_of(uop_2241))) # shape=(15, 10, 15)
bop_2267 = relay.left_shift(bop_2263.astype('uint16'), relay.reshape(uop_2241.astype('uint16'), relay.shape_of(bop_2263))) # shape=(15, 10, 15)
output = relay.Tuple([bop_2243,bop_2247,call_2257,const_2258,bop_2267,])
output2 = relay.Tuple([bop_2243,bop_2247,call_2259,const_2258,bop_2267,])
func_2284 = relay.Function([var_2210,], output)
mod['func_2284'] = func_2284
mod = relay.transform.InferType()(mod)
var_2285 = relay.var("var_2285", dtype = "uint8", shape = (15, 10, 15))#candidate|2285|(15, 10, 15)|var|uint8
output = func_2284(var_2285)
func_2286 = relay.Function([var_2285], output)
mutated_mod['func_2286'] = func_2286
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2291 = relay.constdtype = "float32")#candidate|2291|(15, 15)|const|float32
const_2292 = relay.constdtype = "float32")#candidate|2292|(15, 15)|const|float32
bop_2293 = relay.mod(const_2291.astype('float32'), relay.reshape(const_2292.astype('float32'), relay.shape_of(const_2291))) # shape=(15, 15)
func_1649_call = mod.get_global_var('func_1649')
func_1653_call = mutated_mod.get_global_var('func_1653')
var_2299 = relay.var("var_2299", dtype = "uint32", shape = (2,))#candidate|2299|(2,)|var|uint32
call_2298 = relay.TupleGetItem(func_1649_call(relay.reshape(var_2299.astype('uint32'), [1, 2]), relay.reshape(var_2299.astype('uint32'), [1, 2]), ), 0)
call_2300 = relay.TupleGetItem(func_1653_call(relay.reshape(var_2299.astype('uint32'), [1, 2]), relay.reshape(var_2299.astype('uint32'), [1, 2]), ), 0)
func_507_call = mod.get_global_var('func_507')
func_510_call = mutated_mod.get_global_var('func_510')
var_2307 = relay.var("var_2307", dtype = "float32", shape = (112,))#candidate|2307|(112,)|var|float32
var_2308 = relay.var("var_2308", dtype = "float32", shape = (1792, 1))#candidate|2308|(1792, 1)|var|float32
call_2306 = relay.TupleGetItem(func_507_call(relay.reshape(var_2307.astype('float32'), [7, 16, 1]), relay.reshape(var_2308.astype('float32'), [7, 16, 16]), ), 1)
call_2309 = relay.TupleGetItem(func_510_call(relay.reshape(var_2307.astype('float32'), [7, 16, 1]), relay.reshape(var_2308.astype('float32'), [7, 16, 16]), ), 1)
output = relay.Tuple([bop_2293,call_2298,var_2299,call_2306,var_2307,var_2308,])
output2 = relay.Tuple([bop_2293,call_2300,var_2299,call_2309,var_2307,var_2308,])
func_2324 = relay.Function([var_2299,var_2307,var_2308,], output)
mod['func_2324'] = func_2324
mod = relay.transform.InferType()(mod)
var_2325 = relay.var("var_2325", dtype = "uint32", shape = (2,))#candidate|2325|(2,)|var|uint32
var_2326 = relay.var("var_2326", dtype = "float32", shape = (112,))#candidate|2326|(112,)|var|float32
var_2327 = relay.var("var_2327", dtype = "float32", shape = (1792, 1))#candidate|2327|(1792, 1)|var|float32
output = func_2324(var_2325,var_2326,var_2327,)
func_2328 = relay.Function([var_2325,var_2326,var_2327,], output)
mutated_mod['func_2328'] = func_2328
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1129_call = mod.get_global_var('func_1129')
func_1130_call = mutated_mod.get_global_var('func_1130')
call_2345 = relay.TupleGetItem(func_1129_call(), 5)
call_2346 = relay.TupleGetItem(func_1130_call(), 5)
output = call_2345
output2 = call_2346
func_2347 = relay.Function([], output)
mod['func_2347'] = func_2347
mod = relay.transform.InferType()(mod)
mutated_mod['func_2347'] = func_2347
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2347_call = mutated_mod.get_global_var('func_2347')
call_2348 = func_2347_call()
output = call_2348
func_2349 = relay.Function([], output)
mutated_mod['func_2349'] = func_2349
mutated_mod = relay.transform.InferType()(mutated_mod)
func_594_call = mod.get_global_var('func_594')
func_595_call = mutated_mod.get_global_var('func_595')
call_2366 = relay.TupleGetItem(func_594_call(), 2)
call_2367 = relay.TupleGetItem(func_595_call(), 2)
output = call_2366
output2 = call_2367
func_2373 = relay.Function([], output)
mod['func_2373'] = func_2373
mod = relay.transform.InferType()(mod)
mutated_mod['func_2373'] = func_2373
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2373_call = mutated_mod.get_global_var('func_2373')
call_2374 = func_2373_call()
output = call_2374
func_2375 = relay.Function([], output)
mutated_mod['func_2375'] = func_2375
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1330_call = mod.get_global_var('func_1330')
func_1332_call = mutated_mod.get_global_var('func_1332')
call_2403 = func_1330_call()
call_2404 = func_1330_call()
func_806_call = mod.get_global_var('func_806')
func_808_call = mutated_mod.get_global_var('func_808')
const_2414 = relay.const([-3,5,-10,-7,-9,-8,4,-5,-1,-10,3,-3,-6,10,-6,-2,-1,-7,9,-5,-8,9,10,4,8,-10,-6,2,10,9,-1,6,-8,-5,6,5,5,-5,-6,6,3,-5,-9,-2,-10,-6,1,-3,5,-4,-9,7,5,-1,-3,6,-3,6,9,2,8,-8,-1,6,10,9,10,-5,9,5,3,9,-2,1,-2,1,-2,-9,-2,9,6,1,-5,3,2,-8,-1,4,-4,5,7,-6,-4,10,-1,-8,-8,-4,-7,10,5,8,-7,-9,7,-6,1,3,-8,-1,-3,-5,8,-7,4,-6,-5,7,5,10,-2,-8,8,-8,6,5,-8,4,8,3,-7,3,1,2,7,-2,10,-4,1,7,1,9,-2,5,2,-4,-7,1,-8,-8,8,-8,9,-9,3,-8,-9,2,-1,1,-7,4,-3,-3,-9,8,8,6,-7,8,10,-2,4,-10,5,10,-8,5,9,-2,7,-6,7,2,6,4,7,-6,-4,-8,10,8,-2,9,2,-10,3,-6,7,-6,10,-10,8,8,4,8,3,2,-2,7,-2,3,-2,-10,8,3,-6,5,-10,-5,-10,-10,10,8,-3,-5,3,-4,6,-5,8,4,-2,-9,5,-1,-6,10,1,9], dtype = "uint16")#candidate|2414|(240,)|const|uint16
call_2413 = relay.TupleGetItem(func_806_call(relay.reshape(const_2414.astype('uint16'), [240,])), 5)
call_2415 = relay.TupleGetItem(func_808_call(relay.reshape(const_2414.astype('uint16'), [240,])), 5)
output = relay.Tuple([call_2403,call_2413,const_2414,])
output2 = relay.Tuple([call_2404,call_2415,const_2414,])
func_2429 = relay.Function([], output)
mod['func_2429'] = func_2429
mod = relay.transform.InferType()(mod)
output = func_2429()
func_2430 = relay.Function([], output)
mutated_mod['func_2430'] = func_2430
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1330_call = mod.get_global_var('func_1330')
func_1332_call = mutated_mod.get_global_var('func_1332')
call_2434 = func_1330_call()
call_2435 = func_1330_call()
func_2168_call = mod.get_global_var('func_2168')
func_2171_call = mutated_mod.get_global_var('func_2171')
const_2449 = relay.const([-5,-1,-7,-1,-9,3,6,-6,-1,2,-4,6,-4,-1,3,-10,-1,7,-9,6,-9,-5,-3,8,3,-3,-8,10,5,-10,9,9,10,7,4,-7,-2,-10,3,-10,-7,-5,10,-4,-7,5,4,-6,-10,4,-8,-1,-3,-5,8,-5,6,1,-3,3,1,8,2,10,8,-7,4,5,8,6,-5,2,-8,7,8,-3,-2,4,4,-7,9,9,2,3,-5,-10,7,-2,-5,-8,3,-3,10,-8,-5,-9,8,8,-3,4,9,8,5,10,-1,4,10,6,7,6,-10,6,2,-10,6,-3,-7,10,-1,4,1,-5,-7,10,-6,8,3,3,-10,10,-8,-9,-4,-9,-9,4,-10,10,-1,-3,-9,2,-5,-7,10,8,-2,5,6,-8,8,7,-2,-7,-7,9,-1,6,-4,10,-2,-3,5,-8,-5,-10,-10,-3,3,-5,-10,6,3,-9,7,-4,8,-3,5,-8,2,3,4,-6,6,7,6,-1,-5,10,10,3,1,-2,1,-7,7,-5,-8,8,-2,1,-8,1,-3,-7,4,10,10,-4,-2,-4,-2,10,9,5,-2,-1,1,4,-2,-8,3,-4,1,-3,-8,4,5,-2,-1,-8,-3,1,-1,-9,-6,-3,-4,3], dtype = "uint16")#candidate|2449|(240,)|const|uint16
var_2450 = relay.var("var_2450", dtype = "float64", shape = (540,))#candidate|2450|(540,)|var|float64
call_2448 = relay.TupleGetItem(func_2168_call(relay.reshape(const_2449.astype('uint16'), [240,]), relay.reshape(var_2450.astype('float64'), [15, 4, 9]), ), 1)
call_2451 = relay.TupleGetItem(func_2171_call(relay.reshape(const_2449.astype('uint16'), [240,]), relay.reshape(var_2450.astype('float64'), [15, 4, 9]), ), 1)
func_713_call = mod.get_global_var('func_713')
func_715_call = mutated_mod.get_global_var('func_715')
call_2460 = relay.TupleGetItem(func_713_call(), 0)
call_2461 = relay.TupleGetItem(func_715_call(), 0)
output = relay.Tuple([call_2434,call_2448,const_2449,var_2450,call_2460,])
output2 = relay.Tuple([call_2435,call_2451,const_2449,var_2450,call_2461,])
func_2463 = relay.Function([var_2450,], output)
mod['func_2463'] = func_2463
mod = relay.transform.InferType()(mod)
mutated_mod['func_2463'] = func_2463
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2464 = relay.var("var_2464", dtype = "float64", shape = (540,))#candidate|2464|(540,)|var|float64
func_2463_call = mutated_mod.get_global_var('func_2463')
call_2465 = func_2463_call(var_2464)
output = call_2465
func_2466 = relay.Function([var_2464], output)
mutated_mod['func_2466'] = func_2466
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2492 = relay.var("var_2492", dtype = "float64", shape = (2, 12, 4))#candidate|2492|(2, 12, 4)|var|float64
var_2493 = relay.var("var_2493", dtype = "float64", shape = (2, 12, 4))#candidate|2493|(2, 12, 4)|var|float64
bop_2494 = relay.floor_divide(var_2492.astype('float64'), relay.reshape(var_2493.astype('float64'), relay.shape_of(var_2492))) # shape=(2, 12, 4)
func_1292_call = mod.get_global_var('func_1292')
func_1295_call = mutated_mod.get_global_var('func_1295')
var_2499 = relay.var("var_2499", dtype = "uint16", shape = (240,))#candidate|2499|(240,)|var|uint16
call_2498 = relay.TupleGetItem(func_1292_call(relay.reshape(var_2499.astype('uint16'), [240,])), 0)
call_2500 = relay.TupleGetItem(func_1295_call(relay.reshape(var_2499.astype('uint16'), [240,])), 0)
func_1312_call = mod.get_global_var('func_1312')
func_1313_call = mutated_mod.get_global_var('func_1313')
call_2507 = relay.TupleGetItem(func_1312_call(), 0)
call_2508 = relay.TupleGetItem(func_1313_call(), 0)
func_2373_call = mod.get_global_var('func_2373')
func_2375_call = mutated_mod.get_global_var('func_2375')
call_2513 = func_2373_call()
call_2514 = func_2373_call()
func_1330_call = mod.get_global_var('func_1330')
func_1332_call = mutated_mod.get_global_var('func_1332')
call_2515 = func_1330_call()
call_2516 = func_1330_call()
output = relay.Tuple([bop_2494,call_2498,var_2499,call_2507,call_2513,call_2515,])
output2 = relay.Tuple([bop_2494,call_2500,var_2499,call_2508,call_2514,call_2516,])
func_2519 = relay.Function([var_2492,var_2493,var_2499,], output)
mod['func_2519'] = func_2519
mod = relay.transform.InferType()(mod)
var_2520 = relay.var("var_2520", dtype = "float64", shape = (2, 12, 4))#candidate|2520|(2, 12, 4)|var|float64
var_2521 = relay.var("var_2521", dtype = "float64", shape = (2, 12, 4))#candidate|2521|(2, 12, 4)|var|float64
var_2522 = relay.var("var_2522", dtype = "uint16", shape = (240,))#candidate|2522|(240,)|var|uint16
output = func_2519(var_2520,var_2521,var_2522,)
func_2523 = relay.Function([var_2520,var_2521,var_2522,], output)
mutated_mod['func_2523'] = func_2523
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1839_call = mod.get_global_var('func_1839')
func_1841_call = mutated_mod.get_global_var('func_1841')
call_2528 = func_1839_call()
call_2529 = func_1839_call()
uop_2530 = relay.rsqrt(call_2528.astype('float64')) # shape=(9, 7, 16)
uop_2532 = relay.rsqrt(call_2529.astype('float64')) # shape=(9, 7, 16)
var_2540 = relay.var("var_2540", dtype = "float64", shape = (9, 7, 16))#candidate|2540|(9, 7, 16)|var|float64
bop_2541 = relay.logical_or(uop_2530.astype('bool'), relay.reshape(var_2540.astype('bool'), relay.shape_of(uop_2530))) # shape=(9, 7, 16)
bop_2544 = relay.logical_or(uop_2532.astype('bool'), relay.reshape(var_2540.astype('bool'), relay.shape_of(uop_2532))) # shape=(9, 7, 16)
var_2547 = relay.var("var_2547", dtype = "bool", shape = (9, 7, 16))#candidate|2547|(9, 7, 16)|var|bool
bop_2548 = relay.greater(bop_2541.astype('bool'), relay.reshape(var_2547.astype('bool'), relay.shape_of(bop_2541))) # shape=(9, 7, 16)
bop_2551 = relay.greater(bop_2544.astype('bool'), relay.reshape(var_2547.astype('bool'), relay.shape_of(bop_2544))) # shape=(9, 7, 16)
bop_2553 = relay.floor_mod(bop_2548.astype('float64'), relay.reshape(var_2547.astype('float64'), relay.shape_of(bop_2548))) # shape=(9, 7, 16)
bop_2556 = relay.floor_mod(bop_2551.astype('float64'), relay.reshape(var_2547.astype('float64'), relay.shape_of(bop_2551))) # shape=(9, 7, 16)
output = relay.Tuple([bop_2553,])
output2 = relay.Tuple([bop_2556,])
func_2575 = relay.Function([var_2540,var_2547,], output)
mod['func_2575'] = func_2575
mod = relay.transform.InferType()(mod)
var_2576 = relay.var("var_2576", dtype = "float64", shape = (9, 7, 16))#candidate|2576|(9, 7, 16)|var|float64
var_2577 = relay.var("var_2577", dtype = "bool", shape = (9, 7, 16))#candidate|2577|(9, 7, 16)|var|bool
output = func_2575(var_2576,var_2577,)
func_2578 = relay.Function([var_2576,var_2577,], output)
mutated_mod['func_2578'] = func_2578
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2638 = relay.var("var_2638", dtype = "int16", shape = (9, 6, 11))#candidate|2638|(9, 6, 11)|var|int16
const_2639 = relay.const([[[-6,-1,8,9,7,-1,7,-9,4,-4,-2],[-10,-4,6,-4,1,-7,7,6,9,10,-6],[-9,5,-8,-2,-8,5,-1,-8,-10,-6,-5],[4,-1,-5,-5,1,8,9,4,8,-6,-4],[4,3,-10,8,-2,-7,5,7,4,4,-3],[-8,4,9,-7,-8,-4,4,8,9,6,6]],[[-7,1,-10,-3,-8,9,7,2,10,6,9],[-8,-1,10,5,1,8,3,-7,-10,-7,6],[9,-9,-10,-5,-2,9,-1,3,4,8,-5],[9,-5,-8,-9,8,6,1,10,-6,-10,-8],[-3,-9,-6,-8,-7,-7,-7,-7,-1,8,-10],[-5,4,5,-6,7,7,-8,-4,-5,5,-3]],[[7,1,-5,-7,-6,7,6,8,-8,-3,2],[7,-8,-6,4,-5,9,3,5,-3,4,2],[4,2,-6,5,6,3,6,-7,9,5,8],[-4,-8,3,-6,4,7,-4,-2,-3,2,-2],[-7,1,3,-4,4,3,6,5,-4,-6,6],[-6,-8,7,-4,8,-8,-7,-7,-1,10,2]],[[-1,-2,8,6,5,-2,-10,2,-8,5,-1],[8,-3,8,6,-3,-9,-1,-10,-2,-8,9],[5,-2,-4,-2,9,-3,-10,10,-1,2,8],[8,2,-7,8,10,7,-8,-1,6,-2,-6],[1,10,-1,-3,-8,10,-3,-2,-3,6,-6],[-1,-7,-9,-9,3,1,2,-6,2,6,-5]],[[7,1,10,9,4,-1,10,-1,-4,-7,-8],[6,3,-9,8,-7,-9,-6,-8,5,9,-4],[-7,-6,-9,-6,3,2,-10,3,5,4,2],[5,6,-3,-7,4,2,-4,4,-10,2,2],[-3,1,-7,-1,6,1,3,9,-1,-3,2],[5,-7,-4,7,2,-1,5,9,-8,-2,-9]],[[3,7,8,8,-9,-7,-8,-7,6,-4,-4],[8,-6,10,-5,5,4,1,-1,-3,2,7],[2,-4,5,9,8,5,-2,-4,-4,7,10],[-2,-7,-3,9,-10,6,-1,-3,-2,-8,8],[4,8,-2,7,-5,5,6,-2,10,7,-5],[8,-1,-2,1,-8,2,4,1,6,-2,9]],[[-8,4,2,-3,2,-6,4,-1,-5,-10,4],[-1,-7,2,-5,-9,9,-3,9,-9,-9,-3],[2,6,10,6,-1,-1,-1,8,-4,-1,4],[-6,-1,-3,10,1,-7,-1,6,5,2,6],[10,1,2,-1,-7,-1,-3,-7,10,7,9],[-6,-5,2,8,-3,1,2,-8,-2,-9,-3]],[[7,5,10,-5,-10,-5,4,2,-5,-10,-9],[-10,7,-1,-4,1,4,7,8,6,4,4],[-9,10,1,8,4,8,9,8,-6,5,4],[6,5,-3,3,9,-4,-8,10,-9,-6,-6],[8,10,-4,6,6,-2,-5,-2,-2,4,3],[-3,8,7,-8,-10,-8,2,5,10,3,-4]],[[6,-9,-10,-6,-5,-4,-8,-8,6,7,-10],[8,9,7,-1,-2,-9,-7,6,-2,2,-5],[-8,9,4,-2,6,-8,-9,7,-7,6,2],[7,-9,-8,-4,1,9,-10,7,5,-3,8],[-9,-1,-4,2,-2,-3,-7,-4,-5,7,-7],[6,10,-7,4,4,-10,10,1,1,5,6]]], dtype = "int16")#candidate|2639|(9, 6, 11)|const|int16
bop_2640 = relay.not_equal(var_2638.astype('bool'), relay.reshape(const_2639.astype('bool'), relay.shape_of(var_2638))) # shape=(9, 6, 11)
uop_2644 = relay.asin(const_2639.astype('float32')) # shape=(9, 6, 11)
func_2575_call = mod.get_global_var('func_2575')
func_2578_call = mutated_mod.get_global_var('func_2578')
var_2647 = relay.var("var_2647", dtype = "float64", shape = (1008,))#candidate|2647|(1008,)|var|float64
call_2646 = relay.TupleGetItem(func_2575_call(relay.reshape(var_2647.astype('float64'), [9, 7, 16]), relay.reshape(var_2647.astype('bool'), [9, 7, 16]), ), 0)
call_2648 = relay.TupleGetItem(func_2578_call(relay.reshape(var_2647.astype('float64'), [9, 7, 16]), relay.reshape(var_2647.astype('bool'), [9, 7, 16]), ), 0)
bop_2653 = relay.right_shift(uop_2644.astype('uint8'), relay.reshape(const_2639.astype('uint8'), relay.shape_of(uop_2644))) # shape=(9, 6, 11)
output = relay.Tuple([bop_2640,call_2646,var_2647,bop_2653,])
output2 = relay.Tuple([bop_2640,call_2648,var_2647,bop_2653,])
func_2663 = relay.Function([var_2638,var_2647,], output)
mod['func_2663'] = func_2663
mod = relay.transform.InferType()(mod)
mutated_mod['func_2663'] = func_2663
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2663_call = mutated_mod.get_global_var('func_2663')
var_2665 = relay.var("var_2665", dtype = "int16", shape = (9, 6, 11))#candidate|2665|(9, 6, 11)|var|int16
var_2666 = relay.var("var_2666", dtype = "float64", shape = (1008,))#candidate|2666|(1008,)|var|float64
call_2664 = func_2663_call(var_2665,var_2666,)
output = call_2664
func_2667 = relay.Function([var_2665,var_2666,], output)
mutated_mod['func_2667'] = func_2667
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2674 = relay.const([[[-4.544842,-2.692256,-6.222239,1.965636,-4.633402,6.916650,5.189146,-1.777114,-2.713455,-0.629898,8.405498,1.973201,-5.079680,2.969666],[-1.017313,5.772272,-3.151842,1.274579,-3.520242,-4.298078,-7.659882,2.336670,-8.176637,-2.301697,-8.796929,5.473604,1.745483,6.638275],[4.537341,-7.892196,1.855190,6.509099,7.478753,0.525134,8.580652,2.885499,4.386313,2.994572,-0.811040,-9.719250,-3.793707,4.267927],[-9.300127,2.835195,6.197394,-3.740984,6.785002,-1.249023,-9.246368,5.394189,4.940891,-6.028032,5.156842,-2.527361,1.576562,6.694723],[-0.896134,3.911487,8.152383,8.545446,7.277104,0.896548,9.099513,7.288571,8.791179,0.467544,1.494879,6.796692,-3.966048,7.350189]],[[3.209932,8.487678,7.511301,-8.516848,-4.303818,1.990306,3.871461,-9.020333,-8.809710,1.325412,-5.383186,-9.087982,-0.223785,0.638682],[8.008610,-0.723951,5.721072,8.866368,-6.122312,8.557098,0.443507,-8.436319,4.609873,3.573674,6.424955,-5.533156,3.617321,8.281951],[-9.208542,-9.615700,8.747531,-6.325774,5.641203,5.162321,-1.441492,-7.668879,1.008537,-3.319346,9.423524,-6.254006,-1.782367,9.567799],[6.045725,6.617353,7.452024,-4.006748,-2.609311,0.214544,-0.560323,-8.987448,6.741483,-0.320962,4.606366,0.647837,-5.089787,4.826764],[-8.615931,-0.391738,-0.729449,-5.022932,-2.220256,-4.233946,4.871445,-4.864214,4.316628,-8.921035,5.225051,3.776361,-0.594762,8.438054]],[[7.634530,7.162234,4.681021,6.840597,-9.620940,8.259618,-3.380471,9.479835,4.443172,6.744286,-5.261118,1.709157,-6.943410,0.379559],[-3.264618,1.542900,2.341919,6.337891,0.089645,-3.375806,-2.319559,-4.898949,-2.314562,8.213188,7.173606,-4.278678,-2.577432,6.986428],[-3.498136,1.906367,2.160978,-9.630741,-7.624380,-6.263362,1.354478,3.958578,-4.662424,-7.346856,5.442804,9.374030,8.343021,3.440884],[3.813564,-9.671369,9.978514,-6.833619,9.698037,5.727639,7.500726,4.098473,7.853740,-1.687251,-1.214205,-2.845018,-3.015034,-8.271920],[9.709310,-0.762683,-8.165135,-4.999952,-7.828034,-7.837765,-5.769491,5.152517,1.661867,-5.725983,2.376705,8.739695,7.470983,-1.158194]],[[9.174077,0.418085,-9.547073,0.926836,8.390921,-3.615473,5.561738,9.162575,-8.732084,2.450118,9.954981,-1.231725,-3.472371,-3.231786],[0.076496,-8.554331,7.971040,3.798471,9.550072,-9.633165,2.653971,-8.278356,4.576921,-2.066794,4.068155,-2.374922,4.515732,8.102734],[-7.127324,8.032439,-1.618145,-3.781527,-6.342527,6.102609,-2.326026,-5.845883,-5.179082,-3.228376,-7.180224,-4.028681,-6.114999,-3.539125],[6.394674,-3.876379,6.530450,-8.267105,0.121056,3.261718,-0.952992,3.933057,-9.974129,-2.094810,-7.218016,-8.001860,5.054294,-8.401029],[4.868025,6.438739,0.503179,-7.985670,-9.011172,-9.577767,8.733858,6.574693,1.811501,6.529704,-4.957296,-3.324540,-6.977997,3.840801]],[[2.531033,-3.486397,-9.685144,-7.178207,3.529763,-5.046440,8.455295,3.005631,-3.661711,-7.693988,9.864015,2.255272,-7.770463,-4.226451],[-1.021509,-2.048877,-7.984340,5.659965,5.749800,-7.711395,-4.492186,-1.086406,9.367468,9.512465,-9.973476,6.003485,7.221384,5.595646],[5.620441,-2.248451,9.822469,7.027781,1.295008,-1.012825,-7.028443,3.072373,3.063075,-8.699764,4.503719,-7.675074,-1.133336,2.337743],[-7.084238,7.527254,9.398092,2.384153,-6.884874,-7.915582,2.825389,-3.896423,5.616947,9.537605,9.021420,7.846516,0.747212,-6.452738],[-9.873539,2.698362,-4.719010,-5.447309,-7.833433,-9.686334,-3.222703,7.343039,2.058834,-2.176772,7.529213,9.289548,6.583035,-3.425464]],[[-4.044414,-2.189033,-2.602248,9.563847,-5.285566,-9.606422,-3.950598,-7.362402,0.689508,-0.638399,8.886590,2.810227,-7.428132,-9.841496],[-0.783060,-0.276496,5.208581,7.741635,-9.804663,5.601825,-7.743755,-8.928138,-9.035309,3.799344,-0.237644,4.749536,-2.060431,-8.960813],[8.182697,3.772369,3.559594,3.793561,-9.245657,1.537549,7.616695,-8.212921,-7.199258,-8.756986,2.265534,2.851728,-5.540606,5.217445],[3.888067,2.424570,-1.487238,-8.975415,3.536068,4.190418,-5.717478,-8.029200,2.144341,9.727288,1.692865,-8.886592,-5.311418,-0.627730],[-2.027942,3.542019,-0.895961,1.444773,0.726808,-3.930135,0.295604,5.853552,-7.524696,4.883339,-2.751266,-7.860015,7.313218,-0.479450]],[[-1.452984,-1.236063,-3.273482,-9.780485,-2.997327,-4.515607,-9.046527,-6.220061,-0.835209,6.722759,-2.253141,-4.564063,-5.026376,-7.063998],[6.452287,7.901028,-6.364513,3.369758,4.546873,4.945741,4.932092,-6.864825,-4.021089,6.277515,-8.367994,-3.168117,8.336142,4.376371],[2.834822,8.490103,-7.160689,-0.509511,-0.319938,2.997662,4.527348,-0.902139,-1.637756,-6.282721,9.690298,3.451118,8.810539,-4.950813],[-1.839040,-5.059591,-2.989883,5.942338,-7.616537,6.555797,1.651053,-9.073964,3.389039,5.751587,1.908922,-6.546053,9.595521,-0.068434],[0.788728,5.688268,-3.339119,0.334841,-1.381144,2.733573,-1.184493,4.371832,-6.030537,8.546621,-8.679696,0.926908,-2.886095,7.228179]],[[-7.814935,-0.500908,-3.894517,5.457197,9.657338,6.913095,6.991334,-1.260424,6.197517,1.927976,-9.265977,7.057118,4.601112,-7.842649],[8.133694,2.973213,-0.439003,6.479175,-9.522313,5.371389,-0.355272,8.458723,-8.514483,5.831285,3.495871,6.977427,2.897249,4.914030],[5.589864,8.050311,0.818850,-8.661462,-4.582684,-6.487285,8.746397,1.453249,8.420600,9.237130,-2.816210,5.454923,-0.627568,1.643129],[-1.134492,-4.142578,5.341143,-1.364882,5.275542,-7.023738,-3.507760,-7.089114,-8.902640,8.759643,-8.820858,9.400800,-1.901867,-3.934886],[3.937533,-1.439905,-3.942100,-7.082372,-4.423587,-2.292017,8.384849,-2.587341,-8.527815,0.645046,-6.246463,-7.378504,-5.734309,6.648352]],[[-8.814923,5.199872,-9.621687,7.735331,-8.475611,-1.915558,-0.502408,-1.805239,0.113337,-2.520369,3.704797,-4.790257,-2.272957,-4.294542],[0.100406,2.171274,-9.495887,2.911515,4.190993,2.573305,-9.002115,-4.943367,4.614105,7.989635,4.512194,-9.062642,0.530916,-4.430278],[1.703383,-0.973152,6.812678,-0.598868,-6.642048,-8.310742,1.042861,-7.371856,2.815014,-5.021830,5.123504,3.813689,2.288706,-4.657826],[-6.201062,1.801613,4.194848,-5.347222,2.830077,-0.533492,5.067048,2.324133,0.404741,-4.966035,5.415723,6.135822,-1.746625,4.389248],[-3.317505,6.947582,6.563613,-0.102518,-4.623527,8.750522,3.737027,-6.049590,-8.836097,0.239796,2.348157,-4.924172,3.680667,2.120854]]], dtype = "float64")#candidate|2674|(9, 5, 14)|const|float64
var_2675 = relay.var("var_2675", dtype = "float64", shape = (9, 5, 14))#candidate|2675|(9, 5, 14)|var|float64
bop_2676 = relay.mod(const_2674.astype('float64'), relay.reshape(var_2675.astype('float64'), relay.shape_of(const_2674))) # shape=(9, 5, 14)
uop_2679 = relay.sigmoid(const_2674.astype('float64')) # shape=(9, 5, 14)
uop_2685 = relay.atanh(uop_2679.astype('float64')) # shape=(9, 5, 14)
uop_2688 = relay.tan(uop_2685.astype('float32')) # shape=(9, 5, 14)
func_1196_call = mod.get_global_var('func_1196')
func_1198_call = mutated_mod.get_global_var('func_1198')
call_2690 = relay.TupleGetItem(func_1196_call(), 0)
call_2691 = relay.TupleGetItem(func_1198_call(), 0)
func_1803_call = mod.get_global_var('func_1803')
func_1806_call = mutated_mod.get_global_var('func_1806')
var_2693 = relay.var("var_2693", dtype = "float64", shape = (6,))#candidate|2693|(6,)|var|float64
call_2692 = func_1803_call(relay.reshape(var_2693.astype('float64'), [3, 2]))
call_2694 = func_1803_call(relay.reshape(var_2693.astype('float64'), [3, 2]))
uop_2695 = relay.cos(uop_2679.astype('float64')) # shape=(9, 5, 14)
bop_2697 = relay.maximum(uop_2688.astype('int16'), relay.reshape(uop_2695.astype('int16'), relay.shape_of(uop_2688))) # shape=(9, 5, 14)
func_2663_call = mod.get_global_var('func_2663')
func_2667_call = mutated_mod.get_global_var('func_2667')
var_2702 = relay.var("var_2702", dtype = "int16", shape = (594, 1))#candidate|2702|(594, 1)|var|int16
const_2703 = relay.const([3.750630,3.192906,4.903521,-9.720445,-5.238000,-5.797906,-6.062366,-1.511517,-6.488429,-8.278037,9.747089,8.719421,-0.938385,-6.441504,9.423282,-3.288936,6.788336,4.154947,8.192873,-0.884853,-8.137518,-4.559873,-2.012385,7.939411,-0.767571,-9.174989,-6.175406,8.474622,-9.965121,1.726518,4.112679,-0.110639,7.254688,3.646616,5.144762,-0.788522,0.634438,-3.936155,3.216825,-0.399435,-3.722134,6.980720,-0.602983,7.023466,-7.390233,-0.279778,1.587901,3.194090,1.084276,9.575941,-1.470710,-7.550238,-0.193194,0.024524,-7.321035,8.629688,1.234578,-9.201541,4.708909,-9.035479,-7.660080,-1.323638,7.861319,-3.120097,-9.195432,-1.572603,8.013311,-4.631827,0.163670,3.010438,1.813855,-4.817948,2.602541,3.715567,4.896347,-6.989672,-8.901060,4.672114,-6.412425,-0.838086,1.502505,1.122025,5.135257,-8.224886,-8.984332,3.193338,-9.998982,-1.692658,-6.800061,-3.835190,1.467957,5.419785,4.252641,3.008699,-5.559638,7.707186,-8.953587,-9.507703,-9.885950,5.519579,-8.173999,5.496316,-4.863601,-6.466722,3.086714,-8.311374,9.809299,-8.981640,-9.367051,4.966419,-7.180167,-7.664173,7.069610,-0.533078,0.331265,-0.157452,-0.310890,-8.435040,9.909870,4.107016,-9.969556,9.162862,5.078931,-5.240205,-1.194909,-5.392828,-3.429294,7.365698,6.493148,-6.733364,1.819618,-7.817951,-7.559296,7.687389,8.605218,-2.136807,-1.501423,-1.179766,6.743498,-8.262578,-8.136922,-3.027706,3.210060,-0.984397,-3.312555,-4.940202,-6.527655,3.079702,4.985540,-2.071205,-9.302139,-3.273540,7.580401,-3.927041,-0.896473,-8.208434,-0.917369,2.232872,-3.892564,-1.468398,-7.206449,7.937468,-4.202347,6.904332,1.896548,-9.119380,-3.907083,-6.069404,8.280703,7.252928,9.674624,-4.171911,-5.817046,-2.853655,-7.764491,9.497808,8.011989,9.235977,-7.096502,5.515311,-9.375412,5.871720,3.849632,-5.666821,-9.452994,-7.770520,6.523231,0.780000,-9.560845,0.694666,1.047741,-2.092389,7.447425,-3.887010,-3.653873,2.908699,2.479703,-0.663769,-5.869545,-1.229898,-4.406546,5.930233,9.483351,9.495176,-2.150344,-2.218761,-4.528777,-1.996031,-1.559306,1.586858,-5.036664,-3.661654,4.500937,-4.397711,0.319464,-5.875803,5.151653,-2.664383,9.366053,8.357536,-6.532910,9.268170,-7.145780,-8.722523,-8.673146,9.257425,-0.807295,-1.308578,-1.906252,8.651325,8.715056,5.375876,4.643861,-4.379279,-8.691278,-2.494911,8.299964,4.718504,1.717123,0.655347,8.484224,2.855221,-2.510790,1.190860,-3.688548,-2.461974,-1.631289,1.699431,2.283021,-4.996290,7.072723,-3.558223,-2.320189,-6.718244,9.114851,2.181377,-1.581101,-4.493765,5.836539,-1.221659,0.668963,6.917823,-3.114238,4.619013,-1.424509,7.889308,7.334772,1.478602,3.582856,8.497516,7.293829,2.296812,9.624324,-2.036553,8.558433,0.753157,0.592816,3.016013,5.944627,-9.859352,-5.794025,4.582750,8.002705,-7.692827,-0.170497,-0.810029,-2.839381,9.883668,8.407229,-5.034409,-4.967412,1.235904,9.086287,-0.847763,-2.442650,-0.362649,-3.185819,-1.846300,-8.893674,8.581514,-1.516401,-3.024997,9.577887,8.423103,3.927120,-3.540992,1.981038,-5.359590,-2.415228,7.091666,3.165397,8.209075,0.040539,8.368834,-5.799653,-3.978052,-5.347141,-8.821956,-4.512355,5.849758,0.685949,-3.701446,0.680344,4.014044,8.677364,-5.471811,1.435581,-2.668059,9.503747,-0.540536,-4.307585,4.544298,-8.384288,4.122413,4.031586,-6.097723,-6.037472,0.014063,0.201919,2.020394,1.651338,0.367410,9.738656,2.923095,-1.193453,6.395986,-8.781977,8.842473,-4.672445,8.733850,6.766491,-0.887033,-0.437502,-9.752174,3.829819,-8.484135,6.373813,8.936289,-6.664163,-7.494978,-0.454460,1.254629,-8.169488,1.481780,4.898228,-0.996146,6.429240,-6.247316,-5.749561,5.843351,-0.712290,-9.714781,-1.673034,4.039594,-2.350512,2.958525,5.642689,6.221130,9.090731,-4.661343,3.134695,-0.819518,9.254539,0.493632,3.355534,1.830773,-4.533252,3.253414,9.718584,0.159605,-6.848512,8.666365,-6.004993,8.032040,7.671404,-5.734913,-2.687381,5.077323,-3.216671,0.347703,-0.211031,7.239081,-4.833379,3.728053,0.612037,1.223094,2.842915,4.009679,8.911178,3.812326,-9.714562,-3.591765,-6.858945,3.454563,-3.087192,-9.591553,0.489298,4.780522,9.138419,-9.231165,-0.128563,-0.916197,-5.982352,5.459082,6.442037,-1.862259,-7.039804,-4.387640,7.063174,4.700751,3.965711,-9.772800,-2.470753,-1.125016,-1.393045,-5.372046,3.172301,-4.093024,2.322097,0.166721,-6.664419,-4.671622,-9.526365,-6.353822,-9.587375,9.631476,2.107903,1.501479,-5.978987,7.181898,-3.149582,7.927493,3.200103,1.131532,6.721493,2.082228,-8.065991,-2.224205,-6.840508,-7.205890,5.128358,-3.929660,3.597626,-2.585639,-6.018025,-4.636534,5.646526,-8.061619,7.661181,2.410264,-4.543569,0.731131,2.150236,-9.807455,-3.270445,-8.257032,-4.177445,-7.427768,-2.846998,3.011553,8.179612,9.233516,8.986740,8.722267,4.349923,7.113728,4.188159,7.865982,3.438368,-4.238608,-6.045426,6.910427,-3.382193,1.261876,-4.859087,6.475115,-2.521678,-7.913048,-1.824418,3.375745,0.463811,7.312899,9.923624,9.308803,-2.463167,-8.647679,-5.684235,-6.199186,5.095164,-3.979934,-3.228962,0.027907,-6.820838,0.718742,5.735381,8.172541,1.806444,7.988510,7.185776,3.596159,2.125540,-7.973213,1.601234,-5.833864,-3.579800,-3.282889,-1.957146,-6.176238,-5.443815,6.299559,-1.488063,-6.318237,5.672439,-3.907113,-7.048789,1.958127,3.523376,8.480480,-6.815553,1.481341,-5.534380,3.241728,-5.225060,-5.762289,4.680950,-3.766678,-3.659816,-7.054483,1.582305,-6.233814,-3.451821,2.787139,1.810843,5.012645,-8.039126,9.231566,-5.753615,4.262448,-5.641938,3.402692,5.862944,2.427155,-9.192603,1.364795,-8.680291,1.535615,2.125045,-2.072891,-2.191795,-2.270876,-3.863644,6.694647,9.252927,6.013082,-3.042628,9.022768,7.806789,4.700896,-9.769312,0.117610,-7.881503,-7.728374,8.189007,9.144275,-1.351451,-8.603997,4.734143,2.595770,-0.018585,-3.795516,-9.692052,-4.175676,-7.590596,8.637451,-2.248406,6.981494,-0.525504,8.052535,-1.699194,2.131210,-3.035289,3.109376,9.411719,-7.600385,-9.307251,7.437049,2.263690,-1.295781,8.660317,-8.336955,-2.069754,7.490319,4.047706,-8.742267,2.565608,-0.290409,5.201446,9.858271,4.548085,-5.942503,-8.103382,-8.748031,3.533072,1.003493,-6.376416,-9.032197,3.879225,0.153210,-5.583816,-2.204116,6.023451,-0.650250,-3.458176,-3.548250,3.069939,0.563506,-5.228318,0.015361,-9.633831,-6.307076,9.657421,8.149448,-6.316140,5.511394,-5.680832,-5.320027,5.461073,-9.291455,-6.237363,1.331111,9.740714,1.639308,-9.963143,4.205929,8.722291,6.507988,8.113213,8.233126,-5.523674,-1.969475,-8.065373,-7.766484,0.475807,-1.187584,1.273915,-4.394713,-1.626072,-5.197032,-0.492922,-0.617248,-0.180614,-1.678636,-4.609209,5.063535,6.229582,-8.390019,1.896779,0.389026,7.845172,-0.495659,7.851675,-5.691969,8.432448,-7.258968,-0.163792,7.308061,-1.100108,-0.145238,-1.273995,2.855565,-2.659192,2.923181,2.082077,-1.918958,-5.935921,6.807098,8.171681,-1.884021,8.750648,5.978648,0.657901,-3.240476,-9.804802,-0.957624,-5.628155,-0.847620,1.478456,-1.800821,-8.991941,-2.302567,-2.062858,-9.608349,3.087765,-8.199496,6.090767,-3.765163,-0.999829,5.469205,-4.626822,0.560558,7.194263,3.874261,-0.742276,0.868438,-6.617788,8.768542,-0.945347,2.406014,-5.649241,-2.337636,6.302694,-5.129179,9.785361,-7.526092,-9.164130,-6.213511,-2.544542,-8.006555,-4.274230,5.065713,7.827876,5.644888,4.626683,9.068196,-1.650515,9.644956,4.487111,3.794195,1.537856,-1.810136,-2.224113,-4.379481,-7.840151,9.014450,-6.555593,2.513506,2.355380,7.507003,6.388632,2.902588,-4.699132,4.413415,-0.888812,-2.566032,3.894451,8.529178,-5.511983,-7.106737,3.233913,4.585272,-3.845520,9.718395,8.747427,-1.777019,-0.239225,-0.876294,9.545830,-2.555548,-5.031131,9.355122,7.465182,1.922069,-5.794356,-6.641325,3.286739,-3.249017,-0.864680,-8.271455,-6.823092,4.603693,-8.690455,-2.948110,5.712189,3.008144,3.866252,9.956922,-2.630295,-6.341031,-9.991282,-9.564155,-5.980613,-0.384103,-3.779038,-2.184038,0.995475,6.933791,6.796979,6.955424,-8.696511,1.548854,-6.400471,-2.712352,3.937689,4.634963,2.949981,-1.380899,-1.991317,0.329103,1.301737,-9.642853,2.140127,-3.277637,3.419472,5.339118,-4.321134,0.842462,-5.830786,1.311840,0.110579,9.785490,-2.175345,-8.446716,-6.369598,-8.059171,-4.114758,2.717303,-9.396774,-8.239784,0.618017,-9.291273,-6.519406,-8.407944,4.476850,0.134238,3.426433,-2.322099,-5.049713,-2.826554,-0.147509,-1.702026,5.139763,-6.250293,1.505143,7.052485,-0.561980,-9.843818,-0.211021,6.297666,5.407054,-7.749531,-9.600251,-5.626984,3.269940,6.626873,6.549408,-3.698281,9.609685,9.653912,-9.540144,-3.867655,-0.974648,9.607367,2.363930,-2.907874,1.406200,5.627660,1.937849,-0.301799,5.177225,-1.392149,1.236600,5.100785,5.833569,7.714353,-0.941983,5.148330,9.447381,4.137341,1.939584,3.514419,-1.652827,-5.309060,-6.422839,-2.924123,8.488169,3.548595,-9.497047,9.987067,0.649501,9.284228,-7.202634,-4.830910,9.213494,3.158615,8.238616,-5.939411,9.033487,-7.168664,8.281250,2.709329,8.650717,-0.109528,-6.747271,-7.825493,-7.701907,9.235557,-8.242896,-6.160649,3.375951,-7.227652,-0.718648,-1.053029,-2.036309,-5.969472,6.656436,-0.976945,-9.922772,-0.160957,-1.610954,-9.696014,-7.043545,-2.609527,2.114310,5.218356,-4.439998,3.823382,-5.262654,-9.810961,-1.579158,-0.456985,3.623589,6.788773,3.250309,-7.643954,-6.981261,1.544137,-1.515520,7.645872,-3.360436,-0.913501,-6.654125,-5.136903,9.486457,6.609079,5.580072,5.817705,-1.614015,-1.621627,5.668397,-7.811901,1.432551,-0.657483,2.704040,2.507213,-8.648055,-8.626930,1.869265,0.741210,8.683886,3.155663,4.462311,3.013689,7.551317,9.773307,-0.458697,-6.450969,2.333947,1.671813,-3.303254,7.752935,-1.452151,8.415941,-5.537090,-2.512073,-5.552181,-5.850706,8.555298,5.476152,1.527274,4.206806,-5.081625,8.740507,-1.605671,-3.287684,3.644249,-1.375589,2.715660,9.520171,-4.262127,-0.620155,6.875216,-1.482162,-8.768510,4.092054,9.865579,-7.961612,-7.954932,5.670926], dtype = "float64")#candidate|2703|(1008,)|const|float64
call_2701 = relay.TupleGetItem(func_2663_call(relay.reshape(var_2702.astype('int16'), [9, 6, 11]), relay.reshape(const_2703.astype('float64'), [1008,]), ), 0)
call_2704 = relay.TupleGetItem(func_2667_call(relay.reshape(var_2702.astype('int16'), [9, 6, 11]), relay.reshape(const_2703.astype('float64'), [1008,]), ), 0)
func_163_call = mod.get_global_var('func_163')
func_166_call = mutated_mod.get_global_var('func_166')
const_2706 = relay.const([-6,3,9,7,5,3,6,10,8,-4,7,9,-10,-1,-7,-3,5,-4,-10,-8,10,-6,1,-10,4,-2,-9,2,-7,6,-1,-8,4,1,-5,-9,-2,3,-1,-10,6,5,-4,7,-7,-9,1,-7,1,9,8,-1,10,-4,5,-5,10,8,-4,7,-9,4,-4,-7,8,1,3,-6,5,6,-6,5,-1,-9,-8,-10,3,-9,2,3,1,6,7,-8,10,6,-7,1,2,6,-4,-10,-10,-5,-4,-4,2,10,-10,2,4,-7,9,-2,-7,4,3,-10,1,-7,2,2,1,-3,-10,-4,-3,9,8,4,8,-7,-9,5,-2,7,-4,-10,-2,-6,8,-9,1,-4,7,-4,-5,7,-2,6,-3,-10,3,-1,-2,7,7,2,4,-8,-3,8,-5,-2,7,1,-2,-6,10,9,-4,-4,2,10,-2,-9,-1,5,-5,-5,4,2,-8,10,-8,1,-3,7,-9,-3,5,7,10,2,-8,8,2,7,-2,7,4,-4,-1,2,7,-2,-7,8,1,-5,-8,9,4,-9,3,-6,4,-3,2,8,3,4,8,-9,2,6,-8,-10,-2,-7,-5,-1,-3,-7,-2,-4,4,4,10,1,-7,3,-5,-8,-2,-2,-7,9,9,-7,-8,5,9,-3,3,2,-2,-7,-10,4,9,-2,-10,6,-4,10,4,-3,5,5,-10,7,-3,-7,-7,-4,8,3,-6,9,4,1,7,2,-2,7,3,3,8,9,-4,4,-1,-10,-7,-7,8,-8,4,6,-6,-9,7,-7,6,2,10,-10,2,8,-10,-8,-2,5,8,-3,4,-5,6,8,7,1,-6,8,2,-7,10,-1,2,2,7,4,9,-4,1,-8,2,8,2,-7,-2,9,2,8,-7,-5,8,-6,1,4,2,2,3,5,4,2,-8,9,2,-3,-8,3,-8,-2,1,-10,-10,-10,-10,10,8,-3,-2,8,10,3,2,3,-7,10,1,-2,4,-5,8,10,5,4,-6,3,6,5,4,-9,-4,-8,10,-7,-5,-9,-6,-10,-4,10,9,-7,9,-4,-1,3,-1,-10,2,-7,10,9,7,-6,-4,-5,2,-9,-6,-4,-5,2,-8,8,10,9,1,5,-9,-3,9,-7,9,-2,8,-2,2,8,-8,4,-4,-7,2,5,5,6,5,5,-1,9,-2,2,-8,-6,9,-4,4,9,5,9,3,6,-3,2,-9,-3,3,-6,6,-7,1,-1,3,3,4,-8,9,5,-4,-6,-7,3,-2,2,3,6,-1,9,7,-1,-3,-7,2,4,8,-8,-7,-6,-2,-1,-10,-8,-4,-2,-10,1,2,6,10,2,2,-3,-3,-9,9,-9,-7,-7,-4,3,4,7,-1,-1,-7,-1,3,5,2,10,-6,-10,5,-5,8,5,1,1,-7,5,7,10,-9,-7,-2,4,-5,-2,-4,1,6,-6,-8,-1,9,-8,3,6,4,6,-10,4,7,-6,-3,-2,3,-6,-5,5,-4,-8,-2,10,8,3,-8,-3,-3,7,8,-6,9,3,8,8,2,10,2,9,6,6,-1,1,10,1,-7,-8,-7,-10,8,9,-6,3,9,-8,5,8,-2,9,5,9,-5,10,-7,-10,-8,6,-8,-10,2,1,-1,-5,-10,-7,4,-8,-5,2,-7,-9,-3,-9,-4,7,8,-7,-9,-3,5,-3,-8,-10,9,4,-6,3,8,10,2,1,-5,8,-9,2,-5,-4,8,-7,-8,5,4,3,1,-5,1,2,2,-2,4,-6,-3,-1,4,9,9,-6,-3,6,-4,-6,6,-3,-9,1,2,-2,8,7,-3,4,10,8,10,-5,4,-9,9,-1,10,-4,9,-7,-1,-9,-1,-8,-4,4,10,-6,3,7,1,2,9,-4,-2,-5,5,9,8,9,-6,4,2,-2,-9,-7,-4,10,7,-4,-4,3,-5,-7,2,5,-9,-5,10,6,-4,-10,5,4,5,-10,8,-10,4,8,-3,5,3,-3,-5,4,3,10,5,10,3,-1,-1,-6,8,2,-6,-5,5,1,6,-9,-1,-9,-2,-8,-8,6,10,4,-5,-1,-3,9,4,-8,-7,-3,6,9,-10,-1,-6,8,8,-5,-8,3,5,-9,-3,-9,-4,1,4,-5,6,5,-6,9,-4,-6,-5,4,-2,8,10,8,-2,1,10,2,-4,10,-9,4,7,6,3,-1,2,2,9,-3,2,6,-2,8,5,-7,-8,8,5,9,-3,-4,-10,-5,8,-9,-4,2,3,-3,7,3,-3,3,4,-5,-2,1,7,2,-8,6,6,-7,8,-7,1,2,-2,1,9,-4,7,5,-3,-7,-8,4,-1,-2,2,3,1,7,-2,-1,4,-2,-1,5,5,-7,-7,6,-2,6,-2,-7,-6,-8,3,-9,-3,10,-9,-7,6,-7,5,-2,4,8,7,-10,-10,-1,-6,-1,-1,-4,-5,5,7,6,-7,-6,4,-6,-1,-4,-5,-5,-5,-1,-9,-9,7,8,7,-7,-2,-5,9,9,-10,-5,10,-7,8,3,6,-4,9,-9,3,3,9,2], dtype = "uint16")#candidate|2706|(960,)|const|uint16
call_2705 = func_163_call(relay.reshape(const_2706.astype('uint16'), [6, 16, 10]), relay.reshape(const_2706.astype('uint16'), [6, 16, 10]), )
call_2707 = func_163_call(relay.reshape(const_2706.astype('uint16'), [6, 16, 10]), relay.reshape(const_2706.astype('uint16'), [6, 16, 10]), )
output = relay.Tuple([bop_2676,call_2690,call_2692,var_2693,bop_2697,call_2701,var_2702,const_2703,call_2705,const_2706,])
output2 = relay.Tuple([bop_2676,call_2691,call_2694,var_2693,bop_2697,call_2704,var_2702,const_2703,call_2707,const_2706,])
func_2713 = relay.Function([var_2675,var_2693,var_2702,], output)
mod['func_2713'] = func_2713
mod = relay.transform.InferType()(mod)
var_2714 = relay.var("var_2714", dtype = "float64", shape = (9, 5, 14))#candidate|2714|(9, 5, 14)|var|float64
var_2715 = relay.var("var_2715", dtype = "float64", shape = (6,))#candidate|2715|(6,)|var|float64
var_2716 = relay.var("var_2716", dtype = "int16", shape = (594, 1))#candidate|2716|(594, 1)|var|int16
output = func_2713(var_2714,var_2715,var_2716,)
func_2717 = relay.Function([var_2714,var_2715,var_2716,], output)
mutated_mod['func_2717'] = func_2717
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2719 = relay.var("var_2719", dtype = "float64", shape = (2, 15))#candidate|2719|(2, 15)|var|float64
uop_2720 = relay.atan(var_2719.astype('float64')) # shape=(2, 15)
func_1017_call = mod.get_global_var('func_1017')
func_1020_call = mutated_mod.get_global_var('func_1020')
const_2723 = relay.const([2,-8,1,-7,6,-10,-7,-5,1,-9,5,3,6,-3,4,8,3,6,2,3,-3,-4,4,-5,5,7,-3,9,10,10,3,-1,-5,-10,-8,5,-8,4,-2,-6,4,-8,6,6,1,-9,5,-1,-6,-9,8,8,5,-7,-10,4,8,10,-1,-9,4,7,9,4,-2,10,7,5,9,-10,7,-2,8,-9,10,-1,8,-8,5,4,4,-7,-3,4,-4,-2,10,4,-8,5,2,6,4,-1,-5,8,1,10,-6,8,1,-1,-6,9,9,-5,1,-3,5,-4,6,-10,7,-3,-8,-3,2,10,-8,-5,-2,-7,4,-8,1,1,-5,-6,-3,-5,3,10,3,-5,-8,7,-3,-4,4,7,-5,-5,-7,5,4,-1,-10,-2,10,6,-10,-9,-9,1,7,1,4,2,-10,3,7,-1,-4,1,-10,3,10,-4,-5,4,-1,-3,4,-8,4,-8,-7,9,-4,7,-7,-6,2,-6,3,8,7,-10,-9,-5,2,-4,-4,2,3,-2,10,7,-7,9,-7,5,8,-4,8,10,7,-10,-8,1,-2,4,-10,-1,6,-9,7,-6,1,-4,3,8,-1,-1,1,-2,4,2,-9,-2,-5,9,-5,8,6,7,-7,1,3,9,-3,-6,7,2,-3,2,-5,1,-5,-8,-1,2,9,-8,-5,-8,-7,7,2,-9,-4,-4,-1,1,-2,-9,-5,4,6,10,-8,2,-1,-1,-8,8,3,-3,7,-10,-4,-3,-10,6,-9,-7,-3,2,8,8,4,-8,-10,-1,6,5,8,10,4,-6,-2,-10,4,2,-5,-5,-8,8,-5,-6,-10,-10,8,-10,8,5,-1,-7,-9,4,-1,5,-4,-1,3,8,8,-4,8,1,10,-7,3,3,-5,5,5,-7,-6,8,4,3,-3,-10,-10,10,9,10,-1,3,9,-4,-2,5,-9,-7,8,7,-6,-6,-8,-6,-4,-10,-7,-3,-4,3,5,-4,-1,-9,9,-2,-1,-1,7,-7,-4,-5,1,-9,2,1,-10,-4,-5,1,9,9,4,-10,-7,-1,5,2,-6,4,-3,-9,-9,-5,6,-8,-9,-4,9,3,2,-7,-2,6,3,7,-5,8,-9,-10,-9,9,-7,9,8,2,-8,8,1,9,4,-8,2,6,-1,6,5,7,10,-6,10,8,-8,-1,2,10,7,6,-6,-1,-9,8,-4,-5,-3,-3,-8,2,-9,4,-2,-7,2,8,-6,-8,10,8,-1,8,-4,8,4,-10,2,2,6,-4,-5,-6,-3,-7,-10,-7,-5,-6,8,3,-3,-2,-4,-10,-6,-9,-7,3,1,5,2,-6,-6,10,-8,5,5,-8,-4,1,3,4,-9,3,4,3,9,6,2,9,-8,-1,4,4,-6,-1,-5,10,-1,-3,-1,2,4,5,-4,5,-1,-7,-4,4,-5,10,9,5,-4,-4,5,-5,5,-6,-4,-3,7,-7,-10,-2,5,7,3,3,-2,-4,-2,7,-9,-8,-6,-6,-2,4,6,-9,10,-7,9,2,-9,-10,7,10,-2,9,-1,1,-9,-7,2,10,-3,-5,-8,-6,5,-10,3,8,-10,5,3,-5,2,-9,-10,-6,-7,7,-8,-4,1,5,6,1,-10,7,4,-8,-6,3,-8,-8,8,2,-10,-10,4,7,9,-6,-6,-4,9,-9,9,-10,8,3,5,3,4,8,-9,8,5,-8,-10,-5,4,-3,-5,1,-1,3,-2,3,2,-5,-8,-10,10,-8,-10,-9,-9,1,-3,9,-7,-2,-3,-6,-8,-5,-6,1,-4,-4,2,-1,6,-4,4,-5,-10,-3,-3,7,10,10,-8,1,10,6,-1,-4,1,-5,3,-10,-8,7,2,7,-5,-7,7,-7,-5,10,4,-2,2,-1,-9,2,-4,1,1,7,4,-3,1,-8,2,2,-2,10,2,-2,2,10,-1,1,8,1,1,-3,-3,1,-8,1,9,-7,5,-4,3,5,5,-9,-6,-7,4,9,10,3,5,2,-7,5,-8,9,2,-5,-9,-10,-5,-2,-4,4,-3,5,-3,3,4,10,-8,-3,-2,-5,-3,8,1,-4,-2,-10,7,4,2,10,7,8,-8,4,-9,10,4,-7,7,2,2,-6,-9,9,-10,-7,-8,10,6,-3,-3,-7,3,5,-5,-1,9,8,-8,7,-5,-2,-9,-8,-8,-2,-5,9,-2,8,-1,6,6,8,-10,-9,1,-9,-6,7,-7,-5,5,2,10,7,-1,-1,-7,-1,6,-2,-3,-9,-8,-3,3,-9,3,8,-1,5,7,7,7,-1,-7,-3,-3,-1,9,8,-3,-2,6,2,-4,9,6,-5,3,-7,-8,3,3,6,10,-3,1,-1,-7,6,3,5,1,-2,8,7,4,-1,3,-8,-9,6,-8,7,-2,-9,8,6,-5,-4,-10,1,2,-10,7,-8,10,-6,-2,4,-8,1,-8,-7,-5,-6,-3,-10,6,8,9,2,1,-8,3,-7,6,8,4,6,8,8,-8,-4,10,10,9,9,-9,3,10,4,-9,-9,-10,4,-5,-7,3,-9,-7,-2,-10,8,-9,-1,10,-4,-10,2,6,-7,-10,-5,-10,-6,5,5,1,5,4,-9,-5,-5,-4,6,5,-2,-2,8,3,-8,3,4,-5,-4,-6,5,-3,-6,-9,6,8,9,-5,1,-2,-6,10,-1,-10,-8,-5,10,3,-5,-10,6,-1,9,3,-3,7,-4,-3,6,7,2,6,1,9,2,9,9,-3,5,6,-5,-9,-4,1,8,1,-9,3,6,8,-1,-6,-8,-1,-8,-2,2,9,6,5,7,3,2,-8,7,-8,4,1,4,-6,8,3,-9,-7,2,8,-7,7,-6,10,2,2,-2,1,-4,8,3,2,-4,1,-1,7,-2,7,-1,3,-3,-3,-7,-10,-1,3,-10,10,-5,1,-9,-2,-5,9,6,-3,-7,3,-3,5,9,-8,4,-2,8,-5,-4,-6,-7,-8,6,-9,10,-7,5,6,3,-3,-3,-7,8,6,10,2,-8,8,2,7,1,6,7,8,-8,-6,-5,2,5,-7,1,-2,-10,2,-10,-7,-2,-7,-2,8,7,1,-7,5,-2,-8,-4,3,-3,-7,4,5,4,5,-6,-8,-7,3,3,-5,-2,7,3,9,4,8,9,-6,-3,1,-3,2,-9,3,7,-6,-1,7,4,10,4,-8,1,-8,-4,-8,9,9,7,1,-10,-4,-1,-6,9,-4,6,-5,-5,-5,-3,10,-3,1,10,5,-8,-4,-10,-3,8,1,9,-3,1,7,-1,8,-5,5,3,-9,6,2,-6,4,-6,8,-3,2,-8,-7,-8,-4,-8,-10,6,-5,-5,-10,-6,2,1,7,-10,-7,-10,9,3,-10,-10,-3,-2,-1,-5,-5,-7,-3,9,-2,1,-1,-4,-8,4,8,-8,2,-9,-4,-6,-7,8,-9,10,-9,-1,-1,-1,-3,-6,-10,-10,-4,-7,-3,-9,-6,-10,7,-8,-2,-7,5,-3,4,9,-4,8,8,-6,2,3,4,5,-5,6,-4,-2,2,7,-5,-1,5,-4,-7,-8,-6,7,6,1,-4,3,-1,-7,10,-8,2,1,9,4,8,6,-3,-5,-4,-2,-5,-6,-10,9,9,-5,7,10,-3,-3,-4,-6,2,8,10,-6,-5,-1,-5,4,-8,-5,-5,10,-9,9,-3,-10,10,3,-8,-5,1,-7,-4,10,-8,-6,2,-10,-10,2,-8,10,-2,8,-4,-2,-8,-1,10,6,-8,2,2,-9,-3,-8,7,8,5,-9,10,-3,-4,5,-6,3,-5,4,-7,10,5,-2,7,2,-8,8,6,-8,-6,4,4,-5,-2,-8,1,-10,7,-9,-4,6,-3,1,8,10,2,5,9,7,-9,2], dtype = "uint64")#candidate|2723|(1456,)|const|uint64
const_2724 = relay.const([6,-6,8,-7,-3,-1,-10,2,2,-1,-2,-8,-4,5,9,-10,-4,10,-8,8,-7,-6,5,-6,1,-5,10,1,-2,-1,8,6,10,8,4,7,-3,8,-10,7,4,6,7,1,6,2,5,-10,7,1,1,5,-3,-4,-9,-8,-4,10,-4,5,-5,5,-7,5,10,7,5,5,-5,5,-1,9,-7,-9,10,-10,10,-4,-8,-3,4,10,-2,-1,6,-2,-9,2,-2,7,-4,-8,2,-3,1,-1,-6,8,7,-4,5,10,9,-2,-7,-4,9,7,-5,4,-8,3,-5,1,-2,5,-3,3,-8,-2,5,-6,-9,6,5,2,-4,-7,-7,10,-5,7,9,9,-5,4,10,-4,5,5,-1,-3,-3,3,1,1,6,4,-8,-5,-8,4,-9,7,10,3,-10,-6,1,4,3,-7,-5,-6,-8,7,10,-3,2,2,-3,-5,3,7,3,5,-9,6,-7,-9,3,-10,7,-1,-3,-3,8,-1,-1,7,2,-9,8,4,-8,-10,-9,4,-4,-7,8,5,-9,-8,-5,-4,1,-5,-1,-4,-4,-1,-9,-10,-10,1,-6,5,-3,6,2,-2,-5,1,7,-6,4,-5,4,5,2,-3,10,-4,3,-10,9,-7,8,2], dtype = "uint16")#candidate|2724|(240,)|const|uint16
call_2722 = relay.TupleGetItem(func_1017_call(relay.reshape(const_2723.astype('uint64'), [1456,]), relay.reshape(const_2724.astype('uint16'), [120, 2]), ), 1)
call_2725 = relay.TupleGetItem(func_1020_call(relay.reshape(const_2723.astype('uint64'), [1456,]), relay.reshape(const_2724.astype('uint16'), [120, 2]), ), 1)
output = relay.Tuple([uop_2720,call_2722,const_2723,const_2724,])
output2 = relay.Tuple([uop_2720,call_2725,const_2723,const_2724,])
func_2733 = relay.Function([var_2719,], output)
mod['func_2733'] = func_2733
mod = relay.transform.InferType()(mod)
var_2734 = relay.var("var_2734", dtype = "float64", shape = (2, 15))#candidate|2734|(2, 15)|var|float64
output = func_2733(var_2734)
func_2735 = relay.Function([var_2734], output)
mutated_mod['func_2735'] = func_2735
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1196_call = mod.get_global_var('func_1196')
func_1198_call = mutated_mod.get_global_var('func_1198')
call_2747 = relay.TupleGetItem(func_1196_call(), 0)
call_2748 = relay.TupleGetItem(func_1198_call(), 0)
uop_2749 = relay.atan(call_2747.astype('float32')) # shape=(2, 720)
uop_2751 = relay.atan(call_2748.astype('float32')) # shape=(2, 720)
output = uop_2749
output2 = uop_2751
func_2756 = relay.Function([], output)
mod['func_2756'] = func_2756
mod = relay.transform.InferType()(mod)
mutated_mod['func_2756'] = func_2756
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2756_call = mutated_mod.get_global_var('func_2756')
call_2757 = func_2756_call()
output = call_2757
func_2758 = relay.Function([], output)
mutated_mod['func_2758'] = func_2758
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2782 = relay.var("var_2782", dtype = "float64", shape = (1, 13))#candidate|2782|(1, 13)|var|float64
uop_2783 = relay.sin(var_2782.astype('float64')) # shape=(1, 13)
output = uop_2783
output2 = uop_2783
F = relay.Function([var_2782,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_2782,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_2782= np.array([[-0.247761,-3.051166,3.138905,6.148698,-9.365791,-5.448559,-4.824816,5.503710,5.079116,8.981749,-8.305194,-5.797290,-0.394121]], dtype='float64')
module1.set_input('var_2782', input_2782)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_2782, )
res3 = intrp3.evaluate()(input_2782, )
res4 = intrp4.evaluate()(input_2782, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input('var_2782', input_2782)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_2782, )
res7 = intrp7.evaluate()(input_2782, )
res8 = intrp8.evaluate()(input_2782, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input('var_2782', input_2782)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_2782, )
res11 = intrp11.evaluate()(input_2782, )
res12 = intrp12.evaluate()(input_2782, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input('var_2782', input_2782)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_2782, )
res15 = intrp15.evaluate()(input_2782, )
res16 = intrp16.evaluate()(input_2782, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input('var_2782', input_2782)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_2782, )
res19 = intrp19.evaluate()(input_2782, )
res20 = intrp20.evaluate()(input_2782, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input('var_2782', input_2782)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_2782, )
res23 = intrp23.evaluate()(input_2782, )
res24 = intrp24.evaluate()(input_2782, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''45: TVMFuncCall
44: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
43: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
42: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
41: tvm::IRModule::FromExpr(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&)
40: tvm::IRModule::FromExprInContext(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >)
39: tvm::IRModuleNode::Add(tvm::GlobalVar const&, tvm::BaseFunc const&, bool)
38: tvm::WarnIfMalformed(tvm::IRModule const&, tvm::relay::Function)
37: tvm::relay::FreeTypeVars(tvm::RelayExpr const&, tvm::IRModule const&)
36: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
34: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
32: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
31: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
30: tvm::relay::ExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
29: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
28: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
27: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
26: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
25: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
24: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
23: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
22: _ZNSt17_Function_handlerIFvPKN3tvm5relay7LetNodeEEZNS1_15TypeVarEVis
21: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
20: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
19: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
16: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
15: tvm::relay::ExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
14: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
13: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
12: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
11: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
10: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
9: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
8: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
7: _ZNSt17_Function_handlerIFvPKN3tvm5relay7LetNodeEEZNS1_15TypeVarEVis
6: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
5: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
4: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9RelayEx
1: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::ConstructorNode const*)
0: tvm::IRModuleNode::LookupTypeDef(tvm::GlobalTypeVar const&) const

'''