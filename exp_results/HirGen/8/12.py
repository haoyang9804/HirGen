import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = ())#candidate|0|()|var|float64
var_1 = relay.var("var_1", dtype = "float64", shape = (11,))#candidate|1|(11,)|var|float64
bop_2 = relay.power(var_0.astype('float64'), var_1.astype('float64')) # shape=(11,)
output = relay.Tuple([bop_2,])
output2 = relay.Tuple([bop_2,])
func_5 = relay.Function([var_0,var_1,], output)
mod['func_5'] = func_5
mod = relay.transform.InferType()(mod)
mutated_mod['func_5'] = func_5
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5_call = mutated_mod.get_global_var('func_5')
var_7 = relay.var("var_7", dtype = "float64", shape = ())#candidate|7|()|var|float64
var_8 = relay.var("var_8", dtype = "float64", shape = (11,))#candidate|8|(11,)|var|float64
call_6 = func_5_call(var_7,var_8,)
output = call_6
func_9 = relay.Function([var_7,var_8,], output)
mutated_mod['func_9'] = func_9
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11 = relay.var("var_11", dtype = "float32", shape = (8, 4, 1))#candidate|11|(8, 4, 1)|var|float32
uop_12 = relay.atan(var_11.astype('float32')) # shape=(8, 4, 1)
bop_14 = relay.mod(var_11.astype('float64'), relay.reshape(uop_12.astype('float64'), relay.shape_of(var_11))) # shape=(8, 4, 1)
uop_17 = relay.cosh(bop_14.astype('float32')) # shape=(8, 4, 1)
bop_19 = relay.maximum(uop_17.astype('int32'), relay.reshape(bop_14.astype('int32'), relay.shape_of(uop_17))) # shape=(8, 4, 1)
const_22 = relay.const([[[10,-7,8,-3,-8,9,3,2,-3,-8],[5,-8,-5,-6,-4,4,-10,10,-10,8],[-1,2,6,7,10,4,7,10,5,-8],[8,4,4,5,-8,-1,-2,4,-7,-9]],[[-6,-4,5,4,10,8,3,-4,-7,-10],[2,3,-4,-3,-7,10,3,6,-8,7],[-2,7,-8,-4,-2,7,8,9,6,5],[-2,7,-10,5,-3,7,-7,5,-7,-8]],[[3,-2,-5,5,3,-7,4,2,8,4],[-8,-9,5,-10,-2,1,6,-8,-4,-4],[-10,2,6,-10,1,-6,-4,8,8,4],[-6,5,6,-3,-6,-7,-8,4,7,8]],[[7,9,-8,3,-4,-6,-9,2,-6,-8],[-4,1,-6,-7,9,10,-9,9,7,1],[-8,2,8,5,-3,-6,-9,-10,-2,-9],[2,8,10,9,9,9,-7,-5,8,-10]],[[-4,-9,-5,-10,-6,9,8,-1,3,6],[-10,-9,7,-3,-5,-6,-3,-2,4,5],[-8,-9,-10,-5,-10,6,7,6,-9,-8],[6,-3,-1,-5,-8,-6,-7,-5,7,1]],[[-10,-5,2,10,4,6,-6,-7,6,1],[-4,-2,-3,-9,6,8,-9,-4,8,-2],[6,10,-7,-6,-9,-8,-7,4,-7,10],[5,9,5,-2,-9,-3,2,-4,8,-3]],[[10,-2,4,-7,-10,-2,9,6,-7,4],[5,-1,-1,-6,-7,-8,4,4,-5,-7],[-9,10,2,-1,8,-5,3,8,10,-2],[6,-6,9,8,-2,-1,-4,1,8,-5]],[[5,9,-3,-1,4,-2,3,-3,-7,-10],[-8,1,3,9,2,-8,-1,7,6,1],[-1,-10,-10,-9,-6,7,10,-5,10,4],[6,-2,-1,-5,7,6,-8,4,-1,-6]]], dtype = "int32")#candidate|22|(8, 4, 10)|const|int32
bop_23 = relay.floor_mod(bop_19.astype('float64'), const_22.astype('float64')) # shape=(8, 4, 10)
bop_26 = relay.bitwise_xor(uop_17.astype('uint32'), relay.reshape(uop_12.astype('uint32'), relay.shape_of(uop_17))) # shape=(8, 4, 1)
bop_29 = relay.logical_or(bop_26.astype('bool'), relay.reshape(var_11.astype('bool'), relay.shape_of(bop_26))) # shape=(8, 4, 1)
bop_32 = relay.right_shift(bop_23.astype('uint64'), var_11.astype('uint64')) # shape=(8, 4, 10)
var_35 = relay.var("var_35", dtype = "float64", shape = (8, 4, 10))#candidate|35|(8, 4, 10)|var|float64
bop_36 = relay.less(bop_14.astype('bool'), var_35.astype('bool')) # shape=(8, 4, 10)
bop_39 = relay.bitwise_and(bop_14.astype('int16'), var_35.astype('int16')) # shape=(8, 4, 10)
uop_42 = relay.atanh(bop_36.astype('float32')) # shape=(8, 4, 10)
uop_44 = relay.sqrt(bop_14.astype('float64')) # shape=(8, 4, 1)
uop_46 = relay.sigmoid(bop_14.astype('float64')) # shape=(8, 4, 1)
bop_48 = relay.divide(bop_23.astype('float32'), bop_19.astype('float32')) # shape=(8, 4, 10)
bop_51 = relay.mod(bop_39.astype('float32'), relay.reshape(bop_36.astype('float32'), relay.shape_of(bop_39))) # shape=(8, 4, 10)
func_5_call = mod.get_global_var('func_5')
func_9_call = mutated_mod.get_global_var('func_9')
const_55 = relay.const(-4.562792, dtype = "float64")#candidate|55|()|const|float64
const_56 = relay.const([-8.623325,1.450046,7.621417,-9.725966,-1.302247,1.018339,-4.601968,0.219871,-1.992681,-4.974393,-2.009362], dtype = "float64")#candidate|56|(11,)|const|float64
call_54 = relay.TupleGetItem(func_5_call(relay.reshape(const_55.astype('float64'), []), relay.reshape(const_56.astype('float64'), [11,]), ), 0)
call_57 = relay.TupleGetItem(func_9_call(relay.reshape(const_55.astype('float64'), []), relay.reshape(const_56.astype('float64'), [11,]), ), 0)
bop_58 = relay.right_shift(bop_36.astype('int32'), const_55.astype('int32')) # shape=(8, 4, 10)
uop_61 = relay.atanh(uop_46.astype('float32')) # shape=(8, 4, 1)
uop_63 = relay.acosh(uop_61.astype('float64')) # shape=(8, 4, 1)
uop_65 = relay.rsqrt(uop_61.astype('float64')) # shape=(8, 4, 1)
uop_67 = relay.cos(uop_61.astype('float32')) # shape=(8, 4, 1)
bop_69 = relay.subtract(uop_61.astype('float32'), relay.reshape(uop_46.astype('float32'), relay.shape_of(uop_61))) # shape=(8, 4, 1)
bop_72 = relay.floor_divide(uop_61.astype('float32'), bop_51.astype('float32')) # shape=(8, 4, 10)
bop_75 = relay.logical_xor(uop_12.astype('int8'), const_22.astype('int8')) # shape=(8, 4, 10)
var_78 = relay.var("var_78", dtype = "float32", shape = (8, 4, 14))#candidate|78|(8, 4, 14)|var|float32
bop_79 = relay.floor_mod(uop_67.astype('float64'), var_78.astype('float64')) # shape=(8, 4, 14)
bop_82 = relay.bitwise_and(bop_79.astype('uint16'), bop_26.astype('uint16')) # shape=(8, 4, 14)
bop_85 = relay.bitwise_xor(bop_72.astype('uint64'), bop_69.astype('uint64')) # shape=(8, 4, 10)
bop_88 = relay.not_equal(uop_67.astype('bool'), relay.reshape(uop_44.astype('bool'), relay.shape_of(uop_67))) # shape=(8, 4, 1)
bop_91 = relay.minimum(bop_72.astype('int32'), relay.reshape(bop_75.astype('int32'), relay.shape_of(bop_72))) # shape=(8, 4, 10)
func_5_call = mod.get_global_var('func_5')
func_9_call = mutated_mod.get_global_var('func_9')
call_94 = relay.TupleGetItem(func_5_call(relay.reshape(const_55.astype('float64'), []), relay.reshape(const_56.astype('float64'), [11,]), ), 0)
call_95 = relay.TupleGetItem(func_9_call(relay.reshape(const_55.astype('float64'), []), relay.reshape(const_56.astype('float64'), [11,]), ), 0)
uop_96 = relay.log10(bop_79.astype('float64')) # shape=(8, 4, 14)
uop_98 = relay.exp(uop_96.astype('float32')) # shape=(8, 4, 14)
bop_100 = relay.minimum(uop_98.astype('uint32'), const_55.astype('uint32')) # shape=(8, 4, 14)
bop_103 = relay.bitwise_and(uop_98.astype('uint16'), relay.reshape(bop_82.astype('uint16'), relay.shape_of(uop_98))) # shape=(8, 4, 14)
uop_106 = relay.log2(uop_96.astype('float32')) # shape=(8, 4, 14)
bop_108 = relay.not_equal(uop_106.astype('bool'), uop_12.astype('bool')) # shape=(8, 4, 14)
bop_111 = relay.maximum(uop_96.astype('uint64'), bop_14.astype('uint64')) # shape=(8, 4, 14)
func_5_call = mod.get_global_var('func_5')
func_9_call = mutated_mod.get_global_var('func_9')
call_114 = relay.TupleGetItem(func_5_call(relay.reshape(const_55.astype('float64'), []), relay.reshape(const_56.astype('float64'), [11,]), ), 0)
call_115 = relay.TupleGetItem(func_9_call(relay.reshape(const_55.astype('float64'), []), relay.reshape(const_56.astype('float64'), [11,]), ), 0)
bop_116 = relay.not_equal(bop_103.astype('bool'), const_55.astype('bool')) # shape=(8, 4, 14)
uop_119 = relay.rsqrt(bop_29.astype('float32')) # shape=(8, 4, 1)
var_121 = relay.var("var_121", dtype = "uint32", shape = (8, 4, 14))#candidate|121|(8, 4, 14)|var|uint32
bop_122 = relay.floor_mod(bop_100.astype('float64'), relay.reshape(var_121.astype('float64'), relay.shape_of(bop_100))) # shape=(8, 4, 14)
uop_125 = relay.atan(bop_122.astype('float64')) # shape=(8, 4, 14)
uop_127 = relay.log2(uop_96.astype('float64')) # shape=(8, 4, 14)
bop_129 = relay.not_equal(uop_127.astype('bool'), var_11.astype('bool')) # shape=(8, 4, 14)
uop_132 = relay.sigmoid(bop_108.astype('float32')) # shape=(8, 4, 14)
bop_134 = relay.equal(uop_125.astype('bool'), bop_26.astype('bool')) # shape=(8, 4, 14)
uop_137 = relay.sin(uop_106.astype('float32')) # shape=(8, 4, 14)
bop_139 = relay.bitwise_or(bop_85.astype('uint64'), uop_67.astype('uint64')) # shape=(8, 4, 10)
var_142 = relay.var("var_142", dtype = "float32", shape = (8, 4, 14))#candidate|142|(8, 4, 14)|var|float32
bop_143 = relay.maximum(uop_132.astype('uint32'), relay.reshape(var_142.astype('uint32'), relay.shape_of(uop_132))) # shape=(8, 4, 14)
var_146 = relay.var("var_146", dtype = "bool", shape = (8, 4, 14))#candidate|146|(8, 4, 14)|var|bool
bop_147 = relay.left_shift(bop_134.astype('uint8'), relay.reshape(var_146.astype('uint8'), relay.shape_of(bop_134))) # shape=(8, 4, 14)
bop_150 = relay.greater_equal(bop_116.astype('bool'), uop_17.astype('bool')) # shape=(8, 4, 14)
output = relay.Tuple([bop_32,uop_42,bop_48,call_54,const_56,bop_58,uop_63,uop_65,bop_88,bop_91,call_94,bop_111,call_114,uop_119,bop_129,uop_137,bop_139,bop_143,bop_147,bop_150,])
output2 = relay.Tuple([bop_32,uop_42,bop_48,call_57,const_56,bop_58,uop_63,uop_65,bop_88,bop_91,call_95,bop_111,call_115,uop_119,bop_129,uop_137,bop_139,bop_143,bop_147,bop_150,])
func_153 = relay.Function([var_11,var_35,var_78,var_121,var_142,var_146,], output)
mod['func_153'] = func_153
mod = relay.transform.InferType()(mod)
var_154 = relay.var("var_154", dtype = "float32", shape = (8, 4, 1))#candidate|154|(8, 4, 1)|var|float32
var_155 = relay.var("var_155", dtype = "float64", shape = (8, 4, 10))#candidate|155|(8, 4, 10)|var|float64
var_156 = relay.var("var_156", dtype = "float32", shape = (8, 4, 14))#candidate|156|(8, 4, 14)|var|float32
var_157 = relay.var("var_157", dtype = "uint32", shape = (8, 4, 14))#candidate|157|(8, 4, 14)|var|uint32
var_158 = relay.var("var_158", dtype = "float32", shape = (8, 4, 14))#candidate|158|(8, 4, 14)|var|float32
var_159 = relay.var("var_159", dtype = "bool", shape = (8, 4, 14))#candidate|159|(8, 4, 14)|var|bool
output = func_153(var_154,var_155,var_156,var_157,var_158,var_159,)
func_160 = relay.Function([var_154,var_155,var_156,var_157,var_158,var_159,], output)
mutated_mod['func_160'] = func_160
mutated_mod = relay.transform.InferType()(mutated_mod)
var_162 = relay.var("var_162", dtype = "int64", shape = ())#candidate|162|()|var|int64
var_163 = relay.var("var_163", dtype = "int64", shape = (4,))#candidate|163|(4,)|var|int64
bop_164 = relay.bitwise_or(var_162.astype('int64'), var_163.astype('int64')) # shape=(4,)
uop_167 = relay.erf(var_163.astype('float32')) # shape=(4,)
uop_169 = relay.acos(uop_167.astype('float64')) # shape=(4,)
bop_171 = relay.less_equal(uop_169.astype('bool'), relay.reshape(bop_164.astype('bool'), relay.shape_of(uop_169))) # shape=(4,)
uop_174 = relay.acos(uop_169.astype('float64')) # shape=(4,)
bop_176 = relay.bitwise_xor(uop_174.astype('int32'), relay.reshape(var_163.astype('int32'), relay.shape_of(uop_174))) # shape=(4,)
uop_179 = relay.asin(uop_174.astype('float64')) # shape=(4,)
uop_181 = relay.rsqrt(uop_167.astype('float64')) # shape=(4,)
uop_183 = relay.asinh(uop_179.astype('float32')) # shape=(4,)
func_153_call = mod.get_global_var('func_153')
func_160_call = mutated_mod.get_global_var('func_160')
var_186 = relay.var("var_186", dtype = "float32", shape = (32,))#candidate|186|(32,)|var|float32
const_187 = relay.const([-2.086244,4.906651,-1.779112,-4.357590,8.306199,-1.812320,2.037563,3.130955,-4.322648,5.535480,-5.603215,9.227545,-6.560688,-2.454182,-5.724663,-9.167490,-1.158329,-3.227450,9.526070,-3.599164,1.993996,-7.908781,-7.737406,-2.989217,-8.030614,-6.910592,6.463559,2.871669,3.209915,3.961383,7.982233,-6.051913,4.229104,-3.625035,-0.163329,-0.225928,5.078169,-1.269558,-8.242714,-9.855262,-4.863386,6.851095,-7.908426,9.853457,3.690362,1.312030,-9.938871,-4.077275,-5.152699,3.070946,-8.414651,-6.122583,-5.501166,6.941566,5.548991,1.443376,-6.799169,8.271194,9.572263,-4.458580,-2.847317,5.710997,-6.148165,-8.726197,-0.455141,3.261116,8.213052,-0.958887,-4.165267,2.021738,5.541595,-5.332244,5.045397,-2.616798,-2.092971,0.772762,-6.186641,-9.002748,7.195756,4.478718,-7.200484,-2.389972,-2.620915,8.096757,-0.803617,-4.141549,-1.509593,-2.981546,2.424431,-7.534290,2.884878,-7.206064,8.218262,-9.761594,1.994481,-7.843315,-5.825974,-3.597519,-4.120758,-3.344880,-1.788788,-1.116693,2.791967,-2.243474,-4.020676,-3.266826,5.295253,2.216459,0.359173,2.988402,-5.340216,-8.952794,-7.559372,3.107316,1.492509,6.772625,9.006116,-7.944440,-4.408334,8.362141,6.066633,8.788289,-6.219149,7.475350,-9.527772,-8.837740,5.327934,-2.382312,2.709626,-9.725280,3.138797,-1.917383,9.213491,6.367269,-0.668726,-3.406681,-8.166099,-6.928401,7.912970,0.325127,-4.233997,-5.368778,-6.506144,2.677228,-3.357782,-5.606168,5.950021,-9.383966,6.228930,6.356443,-9.510054,-9.171387,5.789222,0.605248,-5.205348,-6.115753,2.518537,-2.581703,3.015047,8.096552,6.003840,9.695418,1.738157,-9.906746,5.961606,-0.139889,9.189700,2.978341,7.381203,8.265589,7.025599,-6.399458,-8.950882,-7.319834,-9.939101,-4.438690,-3.882024,-0.896094,5.131584,-4.536106,-2.821383,3.880333,2.472244,-4.532839,5.745278,9.812814,-9.748951,4.888915,-8.113870,-5.337487,-7.738362,0.747503,0.653127,-3.829085,-0.902791,8.168793,7.581547,-9.608367,5.059885,3.053544,2.864832,0.146666,-7.106796,-9.124831,7.688969,5.692601,7.632587,-8.695689,-3.503972,-3.424461,2.883224,-0.063340,-1.371930,-6.865935,3.631103,-9.560627,-6.115287,-4.528790,0.953996,6.372572,-1.808346,-1.915523,8.449477,-4.653666,9.250540,-6.868019,-9.399701,1.490497,-6.349647,8.721722,2.364035,-9.817529,5.695098,-4.078746,5.636804,2.177517,-5.612137,-9.831927,-9.586895,5.850942,0.829788,9.924550,-9.296616,-9.967480,-2.114178,7.429290,7.071790,3.937243,-7.209189,8.282486,2.422316,2.212442,-2.843739,-8.710202,-1.347084,-6.867416,3.920256,-6.570469,-1.377757,-6.247153,-4.958594,-6.822973,8.558420,-6.543964,6.816422,-9.291124,1.005754,-9.428411,3.795251,-9.541562,6.001313,6.904380,-8.893894,-2.922213,-8.952109,5.274566,-7.038445,-4.414584,0.877696,-8.530628,1.735245,-7.142073,-1.008100,-4.091423,6.710772,-7.308233,-3.904738,6.416729,3.318285,4.465279,5.486493,-5.697394,3.200716,3.087431,7.604616,5.441341,-6.677997,2.961396,1.930255,-0.118143,7.410102,7.785818,-6.936583,-2.631899,-5.075477,9.906564,7.716023,-7.959198,0.011573,2.743461,0.356975,6.810263,-9.516237,-8.623495,-7.277862,-7.445171,1.162601,8.235392,5.320793,7.498556], dtype = "float64")#candidate|187|(320,)|const|float64
var_188 = relay.var("var_188", dtype = "float32", shape = (448,))#candidate|188|(448,)|var|float32
call_185 = relay.TupleGetItem(func_153_call(relay.reshape(var_186.astype('float32'), [8, 4, 1]), relay.reshape(const_187.astype('float64'), [8, 4, 10]), relay.reshape(var_188.astype('float32'), [8, 4, 14]), relay.reshape(var_188.astype('uint32'), [8, 4, 14]), relay.reshape(var_188.astype('float32'), [8, 4, 14]), relay.reshape(var_188.astype('bool'), [8, 4, 14]), ), 13)
call_189 = relay.TupleGetItem(func_160_call(relay.reshape(var_186.astype('float32'), [8, 4, 1]), relay.reshape(const_187.astype('float64'), [8, 4, 10]), relay.reshape(var_188.astype('float32'), [8, 4, 14]), relay.reshape(var_188.astype('uint32'), [8, 4, 14]), relay.reshape(var_188.astype('float32'), [8, 4, 14]), relay.reshape(var_188.astype('bool'), [8, 4, 14]), ), 13)
bop_190 = relay.logical_or(uop_179.astype('bool'), relay.reshape(bop_164.astype('bool'), relay.shape_of(uop_179))) # shape=(4,)
bop_193 = relay.multiply(bop_190.astype('int16'), relay.reshape(bop_176.astype('int16'), relay.shape_of(bop_190))) # shape=(4,)
bop_196 = relay.equal(uop_169.astype('bool'), var_162.astype('bool')) # shape=(4,)
func_5_call = mod.get_global_var('func_5')
func_9_call = mutated_mod.get_global_var('func_9')
var_200 = relay.var("var_200", dtype = "float64", shape = (11,))#candidate|200|(11,)|var|float64
call_199 = relay.TupleGetItem(func_5_call(relay.reshape(var_162.astype('float64'), []), relay.reshape(var_200.astype('float64'), [11,]), ), 0)
call_201 = relay.TupleGetItem(func_9_call(relay.reshape(var_162.astype('float64'), []), relay.reshape(var_200.astype('float64'), [11,]), ), 0)
func_153_call = mod.get_global_var('func_153')
func_160_call = mutated_mod.get_global_var('func_160')
call_202 = relay.TupleGetItem(func_153_call(relay.reshape(var_186.astype('float32'), [8, 4, 1]), relay.reshape(const_187.astype('float64'), [8, 4, 10]), relay.reshape(var_188.astype('float32'), [8, 4, 14]), relay.reshape(var_188.astype('uint32'), [8, 4, 14]), relay.reshape(var_188.astype('float32'), [8, 4, 14]), relay.reshape(var_188.astype('bool'), [8, 4, 14]), ), 16)
call_203 = relay.TupleGetItem(func_160_call(relay.reshape(var_186.astype('float32'), [8, 4, 1]), relay.reshape(const_187.astype('float64'), [8, 4, 10]), relay.reshape(var_188.astype('float32'), [8, 4, 14]), relay.reshape(var_188.astype('uint32'), [8, 4, 14]), relay.reshape(var_188.astype('float32'), [8, 4, 14]), relay.reshape(var_188.astype('bool'), [8, 4, 14]), ), 16)
uop_204 = relay.asin(bop_190.astype('float64')) # shape=(4,)
uop_206 = relay.sinh(uop_183.astype('float32')) # shape=(4,)
uop_208 = relay.log(uop_206.astype('float32')) # shape=(4,)
var_210 = relay.var("var_210", dtype = "float32", shape = (4,))#candidate|210|(4,)|var|float32
bop_211 = relay.bitwise_xor(uop_208.astype('uint64'), relay.reshape(var_210.astype('uint64'), relay.shape_of(uop_208))) # shape=(4,)
var_214 = relay.var("var_214", dtype = "float32", shape = (4,))#candidate|214|(4,)|var|float32
bop_215 = relay.floor_divide(uop_208.astype('float64'), relay.reshape(var_214.astype('float64'), relay.shape_of(uop_208))) # shape=(4,)
bop_218 = relay.less(bop_211.astype('bool'), relay.reshape(bop_171.astype('bool'), relay.shape_of(bop_211))) # shape=(4,)
uop_221 = relay.log10(bop_211.astype('float64')) # shape=(4,)
var_223 = relay.var("var_223", dtype = "float64", shape = (4,))#candidate|223|(4,)|var|float64
bop_224 = relay.greater_equal(uop_221.astype('bool'), relay.reshape(var_223.astype('bool'), relay.shape_of(uop_221))) # shape=(4,)
output = relay.Tuple([uop_181,call_185,var_186,const_187,var_188,bop_193,bop_196,call_199,var_200,call_202,uop_204,bop_215,bop_218,bop_224,])
output2 = relay.Tuple([uop_181,call_189,var_186,const_187,var_188,bop_193,bop_196,call_201,var_200,call_203,uop_204,bop_215,bop_218,bop_224,])
func_227 = relay.Function([var_162,var_163,var_186,var_188,var_200,var_210,var_214,var_223,], output)
mod['func_227'] = func_227
mod = relay.transform.InferType()(mod)
mutated_mod['func_227'] = func_227
mutated_mod = relay.transform.InferType()(mutated_mod)
func_227_call = mutated_mod.get_global_var('func_227')
var_229 = relay.var("var_229", dtype = "int64", shape = ())#candidate|229|()|var|int64
var_230 = relay.var("var_230", dtype = "int64", shape = (4,))#candidate|230|(4,)|var|int64
var_231 = relay.var("var_231", dtype = "float32", shape = (32,))#candidate|231|(32,)|var|float32
var_232 = relay.var("var_232", dtype = "float32", shape = (448,))#candidate|232|(448,)|var|float32
var_233 = relay.var("var_233", dtype = "float64", shape = (11,))#candidate|233|(11,)|var|float64
var_234 = relay.var("var_234", dtype = "float32", shape = (4,))#candidate|234|(4,)|var|float32
var_235 = relay.var("var_235", dtype = "float32", shape = (4,))#candidate|235|(4,)|var|float32
var_236 = relay.var("var_236", dtype = "float64", shape = (4,))#candidate|236|(4,)|var|float64
call_228 = func_227_call(var_229,var_230,var_231,var_232,var_233,var_234,var_235,var_236,)
output = call_228
func_237 = relay.Function([var_229,var_230,var_231,var_232,var_233,var_234,var_235,var_236,], output)
mutated_mod['func_237'] = func_237
mutated_mod = relay.transform.InferType()(mutated_mod)
var_239 = relay.var("var_239", dtype = "float32", shape = (7, 9, 5))#candidate|239|(7, 9, 5)|var|float32
uop_240 = relay.atan(var_239.astype('float32')) # shape=(7, 9, 5)
var_242 = relay.var("var_242", dtype = "float32", shape = (7, 9, 5))#candidate|242|(7, 9, 5)|var|float32
bop_243 = relay.subtract(uop_240.astype('int64'), relay.reshape(var_242.astype('int64'), relay.shape_of(uop_240))) # shape=(7, 9, 5)
var_246 = relay.var("var_246", dtype = "int64", shape = (7, 9, 5))#candidate|246|(7, 9, 5)|var|int64
bop_247 = relay.not_equal(bop_243.astype('bool'), relay.reshape(var_246.astype('bool'), relay.shape_of(bop_243))) # shape=(7, 9, 5)
uop_250 = relay.exp(bop_243.astype('float32')) # shape=(7, 9, 5)
bop_252 = relay.mod(uop_250.astype('float32'), relay.reshape(uop_240.astype('float32'), relay.shape_of(uop_250))) # shape=(7, 9, 5)
uop_255 = relay.rsqrt(var_239.astype('float64')) # shape=(7, 9, 5)
uop_257 = relay.rsqrt(bop_252.astype('float64')) # shape=(7, 9, 5)
bop_259 = relay.divide(uop_257.astype('float64'), relay.reshape(bop_243.astype('float64'), relay.shape_of(uop_257))) # shape=(7, 9, 5)
bop_262 = relay.add(uop_250.astype('int32'), relay.reshape(bop_247.astype('int32'), relay.shape_of(uop_250))) # shape=(7, 9, 5)
uop_265 = relay.cos(uop_257.astype('float32')) # shape=(7, 9, 5)
var_267 = relay.var("var_267", dtype = "float64", shape = (7, 9, 5))#candidate|267|(7, 9, 5)|var|float64
bop_268 = relay.power(uop_257.astype('float32'), relay.reshape(var_267.astype('float32'), relay.shape_of(uop_257))) # shape=(7, 9, 5)
bop_271 = relay.not_equal(uop_257.astype('bool'), relay.reshape(uop_255.astype('bool'), relay.shape_of(uop_257))) # shape=(7, 9, 5)
uop_274 = relay.tan(uop_265.astype('float32')) # shape=(7, 9, 5)
bop_276 = relay.bitwise_xor(uop_274.astype('int8'), relay.reshape(uop_257.astype('int8'), relay.shape_of(uop_274))) # shape=(7, 9, 5)
bop_279 = relay.minimum(uop_265.astype('int32'), relay.reshape(uop_274.astype('int32'), relay.shape_of(uop_265))) # shape=(7, 9, 5)
uop_282 = relay.cos(uop_265.astype('float64')) # shape=(7, 9, 5)
const_284 = relay.const([[[6,-1,-10,7,7],[-8,5,5,5,6],[-5,-4,8,-9,1],[1,7,-8,6,7],[-7,8,-6,-3,-3],[8,10,2,-3,-4],[-10,-6,1,-4,-1],[10,-5,-9,-1,1],[1,-1,1,-10,-4]],[[-1,-3,3,-10,1],[-7,9,-1,-2,1],[8,3,7,-5,-8],[-3,-5,-5,10,-5],[-9,4,-6,-6,-9],[4,-1,9,10,-6],[2,9,-8,8,-2],[-1,-7,8,-9,-6],[3,10,-6,5,2]],[[6,1,-3,-2,8],[-6,-6,3,-10,10],[3,-3,-9,-1,-7],[-6,-8,10,9,-4],[7,-6,-7,-9,-3],[1,4,8,-5,8],[3,6,-4,-5,-8],[7,-1,10,-4,-2],[-8,5,-9,5,-4]],[[-5,-10,8,-5,4],[2,-3,-8,8,2],[1,5,1,-10,5],[1,1,-8,3,2],[1,1,-6,6,3],[5,9,-9,-3,7],[3,9,1,-2,5],[4,-5,-9,-5,6],[5,1,3,-4,-9]],[[8,1,3,-7,8],[7,7,8,5,-10],[-1,-4,9,-2,-6],[6,-10,-9,8,-8],[-7,8,-10,-9,10],[-8,6,-3,9,-10],[6,-7,2,1,-4],[-8,-5,5,3,-10],[7,5,-10,-10,6]],[[2,-7,-10,6,1],[-10,1,5,1,-3],[-2,1,-4,10,9],[-8,-9,9,4,-1],[-7,5,-8,-5,-10],[-4,-7,-2,5,8],[7,5,1,-7,1],[-1,1,-6,8,-2],[10,-1,-10,-1,-6]],[[-8,-5,8,9,2],[-5,10,-10,-7,-2],[7,2,2,-4,8],[1,2,3,3,-7],[-3,9,6,-4,10],[-1,-7,-6,6,1],[7,-2,-10,-8,6],[-8,-6,6,6,7],[5,2,3,-10,-5]]], dtype = "int32")#candidate|284|(7, 9, 5)|const|int32
bop_285 = relay.greater(bop_279.astype('bool'), relay.reshape(const_284.astype('bool'), relay.shape_of(bop_279))) # shape=(7, 9, 5)
uop_288 = relay.exp(uop_265.astype('float64')) # shape=(7, 9, 5)
uop_290 = relay.asinh(uop_288.astype('float32')) # shape=(7, 9, 5)
uop_292 = relay.sqrt(uop_290.astype('float64')) # shape=(7, 9, 5)
bop_294 = relay.bitwise_and(uop_292.astype('int64'), relay.reshape(uop_240.astype('int64'), relay.shape_of(uop_292))) # shape=(7, 9, 5)
bop_297 = relay.logical_xor(uop_290.astype('uint16'), relay.reshape(bop_285.astype('uint16'), relay.shape_of(uop_290))) # shape=(7, 9, 5)
bop_300 = relay.logical_xor(bop_243.astype('int8'), relay.reshape(uop_250.astype('int8'), relay.shape_of(bop_243))) # shape=(7, 9, 5)
bop_303 = relay.equal(uop_290.astype('bool'), relay.reshape(uop_288.astype('bool'), relay.shape_of(uop_290))) # shape=(7, 9, 5)
func_227_call = mod.get_global_var('func_227')
func_237_call = mutated_mod.get_global_var('func_237')
var_307 = relay.var("var_307", dtype = "int64", shape = ())#candidate|307|()|var|int64
var_308 = relay.var("var_308", dtype = "int64", shape = (4,))#candidate|308|(4,)|var|int64
const_309 = relay.const([-7.840784,1.804059,2.363289,9.682628,-1.787677,-6.972093,-1.261946,-3.910346,-6.523337,-2.382657,-4.472535,4.018325,-4.493341,6.328804,-5.453553,2.222908,-4.642785,-6.876309,-0.693621,2.741371,-5.602488,0.945606,4.885804,-1.841033,-3.098126,0.779263,1.468205,3.974099,8.984836,8.267625,-5.751426,0.454271], dtype = "float32")#candidate|309|(32,)|const|float32
var_310 = relay.var("var_310", dtype = "float32", shape = (448,))#candidate|310|(448,)|var|float32
const_311 = relay.const([0.675619,-5.249827,-7.952428,-3.867908,-8.260984,4.217104,-4.348309,8.655700,-3.798800,-1.122037,3.323607], dtype = "float64")#candidate|311|(11,)|const|float64
call_306 = relay.TupleGetItem(func_227_call(relay.reshape(var_307.astype('int64'), []), relay.reshape(var_308.astype('int64'), [4,]), relay.reshape(const_309.astype('float32'), [32,]), relay.reshape(var_310.astype('float32'), [448,]), relay.reshape(const_311.astype('float64'), [11,]), relay.reshape(var_308.astype('float32'), [4,]), relay.reshape(var_308.astype('float32'), [4,]), relay.reshape(var_308.astype('float64'), [4,]), ), 8)
call_312 = relay.TupleGetItem(func_237_call(relay.reshape(var_307.astype('int64'), []), relay.reshape(var_308.astype('int64'), [4,]), relay.reshape(const_309.astype('float32'), [32,]), relay.reshape(var_310.astype('float32'), [448,]), relay.reshape(const_311.astype('float64'), [11,]), relay.reshape(var_308.astype('float32'), [4,]), relay.reshape(var_308.astype('float32'), [4,]), relay.reshape(var_308.astype('float64'), [4,]), ), 8)
bop_313 = relay.mod(bop_262.astype('float32'), relay.reshape(bop_243.astype('float32'), relay.shape_of(bop_262))) # shape=(7, 9, 5)
bop_316 = relay.right_shift(bop_297.astype('uint16'), relay.reshape(uop_257.astype('uint16'), relay.shape_of(bop_297))) # shape=(7, 9, 5)
var_319 = relay.var("var_319", dtype = "int64", shape = (7, 9, 5))#candidate|319|(7, 9, 5)|var|int64
bop_320 = relay.greater(bop_294.astype('bool'), relay.reshape(var_319.astype('bool'), relay.shape_of(bop_294))) # shape=(7, 9, 5)
const_323 = relay.const([[[6.747193,-5.067259,0.433322,-0.976744,-1.571394],[-7.505153,-8.615680,9.805317,2.943676,3.627451],[-5.926426,-6.643698,-8.458572,-9.415329,-8.028970],[1.164435,9.243321,6.164861,-4.686528,6.566111],[-0.108835,2.266069,-7.433312,-2.655959,0.648855],[8.302755,-5.258359,3.491507,-5.653549,2.710647],[-6.609715,-9.087884,6.480783,-6.821301,1.217648],[-6.732172,0.426121,1.747325,-3.739640,0.750513],[3.339540,2.679275,-8.134362,-7.611719,7.634947]],[[9.376499,-6.942475,9.365120,4.613457,3.009495],[5.653999,-2.506011,-7.148761,-7.359822,-8.528073],[-6.735558,5.412111,8.443963,7.462611,-3.985184],[-4.303069,-6.941333,4.894645,-8.521787,7.186913],[-6.885426,3.886318,8.097879,-6.772103,-5.498312],[-7.044163,-3.762690,-2.099873,4.163130,6.707286],[-0.553475,-9.080818,-6.764495,6.803600,-4.479086],[-0.669422,3.669034,-6.503210,4.639749,6.354048],[6.304559,0.132692,5.580391,1.941069,4.235275]],[[-4.163566,-3.037207,-3.605122,-2.700158,6.483373],[-1.799995,3.758692,0.473462,-5.406055,-6.255869],[-9.947198,0.483692,1.459631,-9.583993,-1.351866],[2.192510,2.256279,2.756131,-0.912643,1.658805],[-6.161497,-2.942956,-0.326637,2.925898,-9.850924],[-8.521166,8.007953,-4.619567,-9.350192,-1.362904],[-6.743567,3.794327,6.810247,9.817492,-4.742143],[-0.899201,-7.310798,8.001548,-4.777062,-7.948363],[-5.889399,-5.136465,-0.723317,5.766071,8.350350]],[[5.761540,6.799870,5.834542,3.274848,4.014426],[-8.815144,9.871970,-0.350557,8.121824,1.733565],[4.833723,-1.982256,-2.107716,2.867752,8.795877],[2.003539,-2.171803,8.820021,0.094007,7.484759],[-9.932469,-9.190580,-0.335463,-2.240461,-5.880218],[4.996386,-2.357675,7.838154,7.872335,-0.872686],[5.299073,2.648631,-3.073107,0.246485,-5.348751],[-3.507676,-5.470482,-8.863784,2.493758,-9.922424],[-1.654716,-4.747462,1.592294,2.512054,-0.997720]],[[5.200416,5.245858,6.931975,7.281314,-9.697668],[1.167192,0.012125,2.833818,6.519530,-6.162281],[-3.135184,2.464926,2.054395,-3.619534,3.981084],[-6.349673,-5.196400,-1.413439,-0.658330,5.898377],[8.130989,1.075980,-1.857522,-8.319395,-9.901523],[-8.502561,6.081930,2.685239,-0.412547,-9.524316],[-6.432368,5.344830,-8.825779,-6.464013,5.729637],[3.744183,8.571800,3.442158,-7.598722,9.019343],[1.480795,4.974083,3.041850,2.373724,6.303587]],[[-4.334109,8.576170,-3.203743,7.989240,-5.266769],[-7.649205,5.256610,-2.202721,-9.548710,-7.668137],[6.344242,7.312749,-3.644588,0.547246,-7.966558],[2.531292,-9.279767,-0.196130,3.132659,-8.145160],[9.542635,5.857861,-8.445067,9.216334,-9.453829],[-7.319939,8.978227,1.658249,-4.085133,-8.534660],[3.432587,6.923360,-6.810833,-4.408157,7.757980],[5.289455,-9.505863,3.077947,-0.592293,6.955949],[-0.784475,9.734869,3.250292,-9.052409,2.779577]],[[-9.482207,-4.757925,8.756204,-8.832609,-1.713944],[-9.516549,-0.110183,2.278372,1.454745,-9.359221],[-9.977651,-2.499625,8.411370,-5.128944,0.615865],[-6.489817,-7.491066,-0.807753,2.177765,-4.150812],[-5.714476,4.964614,3.744353,4.038838,-6.146200],[6.040270,-1.242212,-5.985854,1.098783,9.120782],[1.923815,-5.313511,5.710465,3.152495,4.154447],[-3.477134,-4.013225,-1.956939,-6.182760,-1.634574],[-7.672475,-7.090760,1.886606,-5.438104,3.569102]]], dtype = "float64")#candidate|323|(7, 9, 5)|const|float64
bop_324 = relay.multiply(uop_292.astype('uint32'), relay.reshape(const_323.astype('uint32'), relay.shape_of(uop_292))) # shape=(7, 9, 5)
func_153_call = mod.get_global_var('func_153')
func_160_call = mutated_mod.get_global_var('func_160')
var_328 = relay.var("var_328", dtype = "float64", shape = (320,))#candidate|328|(320,)|var|float64
call_327 = relay.TupleGetItem(func_153_call(relay.reshape(const_309.astype('float32'), [8, 4, 1]), relay.reshape(var_328.astype('float64'), [8, 4, 10]), relay.reshape(var_310.astype('float32'), [8, 4, 14]), relay.reshape(var_310.astype('uint32'), [8, 4, 14]), relay.reshape(var_310.astype('float32'), [8, 4, 14]), relay.reshape(var_310.astype('bool'), [8, 4, 14]), ), 5)
call_329 = relay.TupleGetItem(func_160_call(relay.reshape(const_309.astype('float32'), [8, 4, 1]), relay.reshape(var_328.astype('float64'), [8, 4, 10]), relay.reshape(var_310.astype('float32'), [8, 4, 14]), relay.reshape(var_310.astype('uint32'), [8, 4, 14]), relay.reshape(var_310.astype('float32'), [8, 4, 14]), relay.reshape(var_310.astype('bool'), [8, 4, 14]), ), 5)
uop_330 = relay.sqrt(uop_288.astype('float64')) # shape=(7, 9, 5)
uop_332 = relay.log(bop_324.astype('float64')) # shape=(7, 9, 5)
uop_334 = relay.cos(bop_285.astype('float64')) # shape=(7, 9, 5)
output = relay.Tuple([bop_259,bop_268,bop_271,bop_276,uop_282,bop_300,bop_303,call_306,var_307,var_308,const_309,var_310,const_311,bop_313,bop_316,bop_320,call_327,var_328,uop_330,uop_332,uop_334,])
output2 = relay.Tuple([bop_259,bop_268,bop_271,bop_276,uop_282,bop_300,bop_303,call_312,var_307,var_308,const_309,var_310,const_311,bop_313,bop_316,bop_320,call_329,var_328,uop_330,uop_332,uop_334,])
F = relay.Function([var_239,var_242,var_246,var_267,var_307,var_308,var_310,var_319,var_328,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_239,var_242,var_246,var_267,var_307,var_308,var_310,var_319,var_328,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_239= np.array([[[-4.219949,-0.159311,8.052014,-4.373075,-0.345092],[7.986255,-9.716747,-8.332673,1.102600,4.389053],[3.652835,9.739071,-6.577171,-6.104402,4.709458],[4.701016,-6.181233,-5.838082,-1.674662,0.439918],[4.314804,8.478567,-3.401007,-2.191551,-7.166624],[3.886223,-1.501158,-5.976166,1.867967,8.712694],[-9.816128,-4.477145,-9.383177,-9.715619,0.556005],[9.692100,5.787585,2.752244,-2.993130,2.247159],[1.850296,-8.837296,-9.799653,0.684505,2.927089]],[[-8.031714,9.852008,4.317885,3.341503,6.864907],[5.456812,3.847132,4.396106,8.233954,-6.989438],[-8.017961,9.563269,7.016621,1.847893,7.603154],[7.589734,-8.137038,-7.964037,-3.112094,-6.765033],[-1.368635,-5.804694,-1.778800,-4.951644,-9.022912],[-1.798400,4.846189,0.406532,1.415847,8.482503],[-3.487309,-3.987545,7.941677,-6.396094,-9.267513],[5.758924,-5.860854,-9.839178,8.114103,-0.363286],[8.868599,-5.661624,-0.137325,6.276385,4.364088]],[[-5.189239,7.526374,-4.912026,8.392642,-0.835916],[8.871060,4.899543,-7.971168,-1.074931,-2.037805],[7.572322,-4.230934,-9.765967,7.915929,-0.754321],[-4.585862,-2.225164,-3.009292,8.391367,7.252175],[8.620187,7.617607,9.447784,3.228217,-8.458229],[-8.932214,0.364258,4.545187,-4.259138,-9.633116],[9.582193,1.378336,-4.449353,8.429226,-1.608484],[-2.991886,1.630556,-2.036641,9.980877,1.835816],[2.132705,0.422083,-2.943165,0.252585,6.313719]],[[8.945802,-9.714749,0.930819,-1.509906,-5.219857],[8.577999,2.902410,3.038567,6.638312,9.738702],[-0.736277,3.793780,2.398803,-4.319799,-9.353981],[-5.171247,8.650025,-0.249451,-5.492333,9.939482],[6.831435,8.900414,2.430695,-9.558990,8.045361],[5.132399,0.711547,2.922045,-2.025980,6.967268],[6.378518,5.976156,-8.492873,5.187356,-1.513443],[-5.276338,-4.678416,-1.234744,-6.407302,-6.002656],[-3.635740,9.662161,-0.020274,1.204195,-9.721401]],[[8.651402,-8.415123,-7.252901,8.556921,4.201192],[-2.121335,6.281168,4.452067,1.394366,3.981694],[1.129430,8.488342,3.619811,3.136608,8.946900],[8.544214,-1.211774,7.715929,-5.892500,-5.053470],[-5.479351,2.248725,9.554596,-6.814706,-1.732951],[4.035406,1.021458,-7.508776,-0.045911,2.114472],[-2.246926,0.941825,7.331226,5.722521,6.318607],[5.291644,1.090398,0.670691,-8.850497,2.404327],[5.660665,-7.386751,9.576954,0.540350,5.067359]],[[6.015351,8.357633,-3.313442,9.248536,3.636299],[8.416615,9.306578,3.972912,-1.552519,-6.396601],[4.026954,-6.748874,-9.361080,-3.567714,9.226141],[3.681976,9.293885,8.997503,7.185449,-8.935205],[8.132179,9.965277,-4.463530,-5.383275,-8.057977],[-3.972261,-4.126740,-8.130306,-0.787156,9.948087],[-8.591575,9.543702,5.156517,2.427097,8.493968],[2.224343,3.526398,7.478683,-0.934453,-3.376409],[-1.620978,-7.645765,7.957921,-6.025926,4.412529]],[[-6.907010,-2.703306,-4.487151,-7.087124,-4.395301],[3.821637,3.525620,-8.737333,-7.829356,-6.171296],[-0.780304,3.419705,4.862517,6.238679,-9.998629],[2.681187,-6.078054,-9.196976,-1.547313,-9.787205],[5.829359,-6.644583,-8.500448,3.038096,3.402360],[-7.386967,0.533242,-2.595331,-6.491907,-7.463745],[0.847623,9.971255,6.664216,-3.342538,4.009454],[-8.168154,-9.006875,9.205231,5.442157,7.759360],[-0.847798,-8.463131,6.464451,-5.399282,-0.439550]]], dtype='float32')
module1.set_input('var_239', input_239)
input_242= np.array([[[-3.642720,2.621151,7.828590,-5.710797,-9.496074],[-7.631633,-9.699032,1.703998,-1.072368,-9.812235],[-8.158162,2.324438,-6.566348,2.733599,-0.288296],[1.988856,9.760258,7.523082,6.903790,-1.990696],[3.934326,-9.139654,1.359867,8.620539,2.206338],[9.038575,-8.783174,-2.406345,6.388843,2.559332],[-9.996032,3.220983,4.846634,-7.490189,-7.376612],[-5.252019,-0.620862,2.128598,6.249813,1.243691],[-2.649579,-5.019236,3.076778,-5.064608,-4.620338]],[[-4.881075,-5.672159,8.527528,-9.806548,9.557952],[-1.073986,-7.498497,-8.478923,6.190098,-2.907899],[-0.723609,9.197375,6.286728,-7.712029,-0.567592],[-5.136572,1.643920,-1.994086,-2.382996,-5.418787],[8.476665,-3.751612,1.612150,4.651338,-6.327094],[1.609235,-7.908035,5.971278,8.342240,5.679974],[-6.256443,2.071134,1.994750,-0.452737,-9.353040],[5.436934,-9.331232,-8.686833,-7.700768,-8.602760],[2.357518,-9.146535,-4.789229,-4.526021,2.057672]],[[0.186596,9.847374,6.309774,-0.063391,-2.140925],[-3.736545,-1.077389,3.346131,7.679917,-0.386149],[-4.025471,0.607690,-0.280419,-5.043677,-5.532448],[-7.505491,-1.005783,-3.575630,-2.748961,7.303629],[4.928525,-7.300385,-8.106340,-8.775507,-1.663620],[7.564007,4.715015,4.843015,9.215208,-4.918706],[7.314818,6.317752,-9.710840,1.259197,4.548692],[4.861919,-5.653132,-9.099095,-1.364473,-4.875368],[-6.436883,0.899125,4.616492,8.440273,7.005173]],[[-3.258743,-2.653321,-8.825496,5.616956,-4.579228],[-0.105413,9.873417,1.915841,-7.936637,3.069798],[-9.946496,-5.710843,3.215059,-5.023507,-1.484931],[-1.176224,-5.858130,5.091564,6.027570,-3.245221],[3.285718,6.252331,-8.705680,-7.573337,-3.182496],[5.273907,5.790422,2.369981,6.864388,7.026353],[4.084527,-7.448778,9.265164,-3.246211,-4.161797],[-3.997871,5.897056,6.542777,-7.249954,-5.212005],[4.060194,-2.760135,-7.144382,7.305055,4.847544]],[[4.904292,-1.145002,4.117653,3.081132,-0.212390],[-6.698427,8.014784,-4.428466,9.319711,7.267975],[-8.069049,-6.970074,6.907018,-4.872193,-9.148514],[-5.301391,-9.846206,-7.142292,-9.135872,5.570906],[1.784426,2.106447,1.043620,4.394769,-2.271736],[2.122956,5.551584,1.625837,-2.344681,2.552707],[-7.014860,-8.593193,-3.300664,-0.768499,8.438104],[4.544942,4.808740,8.792892,3.247999,-9.169732],[1.806355,-9.659228,4.450130,-3.262354,4.967344]],[[-7.615312,9.141645,-3.898188,7.869650,-7.458343],[-8.476629,-3.256465,-7.534485,-8.123465,-4.968079],[0.253207,-1.535422,1.434787,-9.182425,7.418770],[9.611939,1.678428,7.696504,3.304842,-2.007473],[5.628706,8.613851,-0.420637,4.096352,4.912920],[1.249620,-3.988220,-8.625300,5.682404,8.558923],[-7.487184,8.571592,7.992791,5.344143,5.642901],[-4.915840,-0.947154,-2.739100,1.107712,-6.202598],[-9.464384,0.004097,5.251037,-7.595704,-9.124466]],[[-7.236524,-5.583820,-3.777135,-2.752820,-7.360511],[6.278302,-9.795880,8.444174,9.302594,-3.213735],[3.881224,9.496758,6.322338,2.861567,-9.111980],[2.080906,-0.619023,-0.846511,2.372391,8.011110],[-7.823807,-1.884074,-7.597960,-7.383542,-2.662847],[4.112088,6.553508,0.716505,-5.390265,-8.265363],[-1.518057,2.384159,7.750210,-1.483898,-2.340042],[6.530687,-4.954131,9.954441,3.790358,-9.084267],[-8.045614,9.501610,0.440323,0.898911,4.439713]]], dtype='float32')
module1.set_input('var_242', input_242)
input_246= np.array([[[4,9,2,6,10],[1,7,-4,-6,7],[1,1,-9,10,-10],[4,-7,-5,8,4],[-5,-9,-10,-5,9],[6,-7,5,4,4],[4,-8,-10,1,6],[7,-2,-6,-9,-9],[-5,10,2,10,1]],[[-1,-1,-10,-4,8],[-8,-1,-1,-3,10],[-1,-6,6,8,-5],[-7,6,7,-8,6],[-3,1,7,3,-4],[-1,-5,-8,5,7],[7,-8,4,8,8],[-8,-2,-3,10,-6],[-8,-1,-4,-5,7]],[[8,-8,4,4,3],[-9,1,9,10,-1],[-6,-3,-3,8,-5],[10,6,4,1,5],[7,7,7,3,9],[-4,-4,-6,6,-5],[-8,6,6,-7,7],[-2,-9,-4,9,4],[5,5,-6,6,-2]],[[5,-7,-7,1,9],[9,2,-2,-4,8],[-9,7,2,-4,7],[1,-7,3,1,-1],[1,4,7,4,9],[9,-2,-3,-10,-3],[4,-9,2,6,-5],[6,6,-3,-9,2],[8,-7,8,5,8]],[[6,-1,2,6,-7],[-6,9,4,-5,-9],[-1,10,7,2,7],[9,-4,8,-4,-6],[7,5,-6,-10,-1],[7,7,-4,7,-8],[5,-10,10,7,-4],[6,-6,7,-3,10],[5,-8,7,9,-7]],[[10,4,3,8,9],[-2,3,-9,8,7],[-6,7,9,5,10],[2,-3,2,4,5],[-3,-10,5,-9,9],[-2,2,-10,-5,-6],[-6,9,-9,-7,-10],[-4,-1,1,4,-8],[-6,2,2,-7,-7]],[[-4,-3,4,1,-5],[-6,-7,-5,-3,-8],[6,1,-2,-7,10],[3,-9,-6,-10,-6],[1,6,-1,6,-10],[4,6,3,8,8],[6,-3,-2,9,7],[9,-9,6,5,-3],[4,-2,-5,-10,-5]]], dtype='int64')
module1.set_input('var_246', input_246)
input_267= np.array([[[1.803638,-9.443506,-4.725936,0.016869,2.886514],[5.797575,8.557039,2.535865,0.972671,4.100805],[1.088957,9.213929,-1.239480,-1.804604,-9.330793],[5.817118,-2.977287,1.651871,6.454464,2.374308],[-3.906001,3.262462,8.241093,-6.771597,-7.225424],[1.546100,4.275194,2.287149,-1.718963,9.639245],[-7.282617,-8.106982,-5.852346,7.379143,8.057217],[-5.178400,2.179592,4.491266,1.337281,-6.077258],[1.621754,8.756907,-0.478432,-7.554129,-0.593754]],[[-4.761362,-8.861328,-8.323665,-0.300370,9.929452],[-8.655394,9.572736,4.738790,-2.475080,-2.904469],[-2.723949,-0.663164,2.590319,-1.377022,2.833476],[7.289537,-4.199859,3.509382,1.357138,-2.263254],[8.660525,-6.772952,7.946591,4.155975,-3.532635],[-8.567190,1.594530,3.571407,2.485813,3.717831],[-9.271583,-6.865070,-9.575599,0.508176,2.847178],[-6.115016,-0.516817,-3.795586,-2.565722,1.480208],[9.590670,3.219001,-7.122358,0.111557,9.490084]],[[3.407572,-3.101994,-9.696725,3.267638,-4.451577],[8.900773,0.418321,7.820956,6.892206,9.631280],[2.652134,-4.864468,6.660094,7.016804,8.811485],[1.510055,-0.554008,-9.380025,5.129927,0.287954],[5.288719,-4.440645,-4.938914,-1.456906,-8.123648],[3.547154,-6.454808,-8.135316,-0.359669,0.200992],[-1.093655,-6.455785,-9.537814,5.725757,-1.424931],[0.688958,-6.542837,-9.209286,5.165677,-6.215508],[-0.785188,8.313701,-6.247434,4.093516,9.229494]],[[-0.152091,6.288678,4.237237,4.458147,8.939769],[9.361880,0.899582,6.384508,-1.673657,-7.318600],[-0.803301,-6.779142,-7.004781,7.419216,-3.680484],[-5.321368,0.634419,0.053521,1.084220,6.741983],[3.015667,7.773454,-1.167209,-6.063568,3.891484],[-3.786549,-7.826187,-8.753369,7.263654,-6.715579],[-2.949292,-1.111036,-4.833093,-0.241083,-2.054668],[9.190199,-9.027492,7.458633,3.773436,-0.769046],[-2.882574,-3.886351,9.557498,4.534773,-7.393995]],[[-1.838560,-5.527207,-8.736686,4.256680,-0.655364],[1.775992,5.094946,-8.578699,-5.473610,-1.819555],[0.517494,9.220814,8.247061,-4.693195,2.486182],[-4.939594,6.214149,-9.055518,-9.864732,7.472077],[-7.965514,-9.786921,-8.391355,-8.115674,-5.618417],[7.534370,8.140459,2.406293,-0.727220,-3.966705],[-4.351343,5.292293,4.706461,-7.326051,5.282366],[0.785314,-7.233308,6.477285,-5.023074,2.218101],[4.512479,-9.622778,-5.684534,8.708507,7.637735]],[[-5.239128,6.217131,-9.031075,-2.888394,-2.484190],[-6.347808,2.585253,9.926598,4.392710,-4.963807],[-7.726102,-9.498982,-9.480857,-9.001816,2.607883],[4.151360,7.706648,1.142321,-2.195456,-2.846890],[-3.409476,-1.526352,9.880105,-6.201247,9.351376],[-7.647341,-9.550186,1.393869,5.972297,3.178322],[2.234484,-8.987318,2.275248,-7.240386,7.259378],[-2.214343,0.058049,6.992585,-9.787388,-6.479057],[-5.704670,3.361953,8.763294,-3.997737,-1.406475]],[[2.697220,-8.964014,-3.666953,3.587991,1.362529],[-3.163052,-9.055266,-9.287859,-7.940876,-9.553485],[1.905494,1.228441,9.012378,2.997729,4.875381],[5.101554,6.588667,8.327860,5.528054,0.498565],[1.317949,-2.228413,7.771333,-6.557528,2.817762],[-2.577313,5.688895,5.921022,-4.518370,-1.470854],[-3.945368,-8.528957,-1.275348,-0.147966,1.055639],[-2.047060,8.313835,-4.315100,-8.708894,-8.028932],[5.497467,-5.983481,1.103200,-6.236073,-6.535488]]], dtype='float64')
module1.set_input('var_267', input_267)
input_307= np.array(-7, dtype='int64')
module1.set_input('var_307', input_307)
input_308= np.array([10,-5,-10,7], dtype='int64')
module1.set_input('var_308', input_308)
input_310= np.array([3.905071,-6.261138,9.152522,5.164035,-9.723242,3.133218,8.499950,3.904940,-4.464710,-8.381828,0.009639,2.428526,-4.426065,3.158185,-7.559070,0.291315,8.097759,2.198363,5.111779,-4.360997,-7.427977,-0.785617,-2.004155,-6.487264,-9.123040,-6.458367,6.204958,2.522915,4.613034,1.282655,3.328408,3.018166,3.516750,-9.432948,-8.250592,-6.752980,-1.495598,-7.635862,-6.450419,0.725030,3.687378,8.977293,4.691517,-1.883774,7.070339,1.905430,-7.742652,2.878643,0.203521,9.809696,0.380780,1.569702,-5.526363,-1.183978,-0.968592,6.060789,5.737411,-8.495301,-0.237177,8.596158,7.192769,-8.203901,-2.756944,4.082479,0.536380,4.590538,-6.664065,-8.648304,-6.750783,7.722774,-8.647667,-4.203067,6.831641,3.878885,2.021641,7.646171,8.502272,-6.980174,-5.098886,9.610244,-8.564310,-9.876690,1.462784,3.968953,0.761649,-3.433260,-3.881843,3.368605,-8.623108,3.605299,0.750622,-9.441987,-3.323162,-6.392252,-2.431814,9.694221,-2.430222,6.553129,-2.455816,1.095952,1.312568,-2.066004,-4.945297,-0.596197,-1.881846,-7.229433,-9.687618,-4.621244,-8.856852,1.918080,-0.828578,7.947363,-6.187510,9.431123,-2.389226,-3.746737,-1.618143,9.342263,-0.727715,5.148216,6.075600,6.156670,-5.112911,-7.838218,-5.908243,1.080927,-2.653738,-5.986484,1.586587,-0.807390,-4.792260,-4.831913,0.756721,-5.988268,9.818658,-0.444099,4.251114,-1.713839,5.367445,-0.225572,3.899199,-0.392985,2.920596,-9.829630,-1.395033,-9.249970,-1.182305,-7.161532,-3.103525,4.119198,-1.278565,-2.409706,8.446173,-9.915583,4.805604,4.281137,-6.007723,7.932805,-7.057435,9.514295,-0.766535,1.714778,-0.062836,-6.524406,-1.986730,-5.552768,5.802019,6.043526,6.923841,8.899795,-2.764801,1.093338,-2.595794,-2.867586,4.435850,-1.240390,8.466487,-9.458955,2.126904,-0.493547,-2.372619,-6.117587,2.761777,4.633857,4.444485,-2.676229,6.515649,9.027783,-3.318349,-9.007284,0.900267,2.095520,-8.446732,-3.206374,-7.202430,-2.963985,1.970291,-6.333056,-6.644916,0.044049,-3.070330,7.030705,-0.342451,8.745802,1.492209,-8.109513,-1.315440,6.395508,3.526476,-4.576316,3.372443,-9.113571,-5.573153,7.250676,-4.985102,-9.756801,-5.524102,-1.319360,-2.338427,5.067674,7.765876,-6.497817,3.894995,5.691323,1.683526,-5.458129,-1.030201,2.804811,9.121775,0.856350,-4.543636,-9.689380,3.581388,4.242397,7.839025,0.907024,-3.779484,-4.841162,-8.474522,-1.110183,-9.836872,-4.941042,8.873050,3.387196,-6.042696,3.738851,-3.327199,-3.061474,-6.261580,-0.867887,-5.576942,9.498227,4.811903,1.251927,4.341220,-9.573631,-8.511427,-9.405696,-0.465179,1.785291,-4.541225,9.265425,-5.626372,-0.048292,5.465138,-9.961524,3.676650,-3.400229,-4.005543,-2.398501,1.493980,8.093798,8.102960,-0.510233,2.210845,-0.226199,-3.284385,-7.712912,0.250929,3.577927,1.068504,4.479766,0.195419,-9.081176,2.722132,0.740143,0.188457,-4.389627,-1.235734,-8.295445,-9.918699,6.424475,4.708074,-3.360309,2.324817,4.460870,4.887976,5.382204,1.499183,-6.949624,-2.781946,3.847346,-1.513459,-3.493528,-1.361300,-4.356364,8.868067,8.744725,-0.761540,-9.209271,-7.200495,-0.908528,-8.245121,-2.395236,2.944677,-5.584632,1.356668,4.017590,2.425816,-1.857842,8.015750,2.394234,6.095060,5.368277,-3.623226,0.147186,9.553945,-9.274445,1.197257,9.726536,-7.500029,-0.061696,-4.961312,9.035119,2.620374,6.509792,8.075466,6.128510,-9.517239,-0.603069,-1.887493,6.279303,8.858559,2.242995,-3.930117,-7.149531,-7.419859,-1.707112,-5.824036,7.188134,-9.111183,-0.425658,4.851148,-1.774339,-6.233349,-3.826371,-3.977349,9.383890,7.513165,-0.654245,3.453611,-4.708510,0.967140,-8.607534,9.402865,2.283915,0.111723,5.415846,0.531973,-2.802664,-0.596354,7.826905,-5.962933,-0.134810,7.737717,7.870353,4.263976,4.368171,6.268242,1.699516,7.233908,-6.201101,-2.852600,7.218095,3.204337,-8.712316,-8.160364,-0.647941,-4.722555,-5.524329,8.060692,-7.572800,-9.428920,9.000292,-2.230025,-6.785895,9.588078,-3.800501,-2.511589,7.953787,0.023729,3.325451,8.880529,-2.380179,-3.301293,-1.943068,-1.862866,9.883944,-9.442776,-8.195542,4.583155,-9.096496,9.866624,-3.333740,-1.131861,1.637540,2.761584,3.794911,-9.024409,-3.738994,-1.442684,-3.816778,-6.242959,8.817150,-5.752263,1.099882,-0.127243,-0.667391,-1.199264,8.291138,0.330182,-5.313158,4.026863,7.498748,6.852373,3.189533,-7.663401,-4.033926,7.218133,4.911170,-2.743635,8.537412,-6.546671,-3.094296,-0.479370,7.051931,2.328251,2.936143], dtype='float32')
module1.set_input('var_310', input_310)
input_319= np.array([[[-9,10,4,7,1],[-3,1,-3,9,10],[-1,-5,10,9,3],[-7,9,-4,-5,-2],[-2,3,-8,10,10],[-3,4,9,-5,-1],[-6,-3,-6,-9,5],[5,-8,-3,-7,-6],[-10,8,-10,9,7]],[[2,-10,10,1,5],[3,-5,2,-9,-8],[6,7,5,10,1],[-6,1,-9,2,-2],[-7,-10,-8,-10,-9],[-6,-8,8,-10,-7],[-8,-5,9,-9,7],[-1,-8,7,-1,-7],[-5,9,5,9,8]],[[8,9,4,-1,-10],[-6,-1,1,-2,-6],[7,1,-7,3,-4],[1,8,9,-7,-7],[-7,9,-9,7,-5],[2,6,-7,-2,8],[3,1,-9,-3,9],[5,-3,5,7,5],[6,-3,1,-5,8]],[[10,-3,3,1,10],[6,-5,2,-2,5],[10,-3,6,-10,-8],[4,-2,-10,1,-10],[1,-6,4,-8,6],[2,-7,-8,-10,3],[9,-5,-6,-3,-6],[8,9,-4,2,9],[-7,6,7,-6,2]],[[-6,-7,-1,6,10],[9,9,-1,-10,7],[3,-2,10,4,-8],[-7,9,-5,-9,-6],[-3,6,-2,-5,10],[-6,7,-3,-7,7],[5,-2,-8,-5,-8],[-5,-6,2,-7,-4],[8,1,8,-6,-1]],[[2,7,-2,-1,-1],[8,1,-6,-5,10],[2,-1,-7,9,4],[6,-7,2,-7,6],[3,5,-1,-6,6],[8,-6,-2,-6,6],[-2,7,-5,-9,-3],[2,1,1,10,8],[7,-5,3,-8,10]],[[-10,-6,4,-8,-6],[9,9,7,2,1],[-3,-4,-1,-8,7],[-3,-2,3,-2,2],[2,-8,-3,-2,2],[5,-10,-4,7,10],[-1,10,-1,1,4],[3,-7,6,6,7],[1,-3,-2,-2,8]]], dtype='int64')
module1.set_input('var_319', input_319)
input_328= np.array([-8.001308,0.026442,-1.143398,4.387339,4.748467,-0.497337,-7.585793,1.856466,-4.775465,8.034198,5.448955,7.975695,4.985779,8.612847,-0.722826,-2.153804,-2.460283,5.354259,7.810020,-6.442263,-8.364058,5.262567,-7.798920,-8.055750,4.923257,8.481474,-0.071388,-9.795021,-4.651654,8.853891,-2.870420,7.749899,5.371712,3.381741,3.149421,7.551158,-1.444151,-5.169596,-3.681999,-7.797057,0.904356,-1.387110,-4.955842,6.079989,6.736294,4.554848,2.022042,-6.395490,-7.304193,4.710756,0.659140,9.378105,6.290067,-8.730767,-4.899345,1.124137,-2.044819,3.931662,-3.910343,2.145535,-2.580487,0.973931,9.789778,-8.832184,3.417248,4.614385,4.286526,4.518178,-7.534248,-2.827644,-6.512414,-7.626744,0.644475,7.486892,4.497156,8.257303,1.645986,2.512012,-4.808313,-2.680653,0.634280,-9.455918,-5.014514,7.248362,4.042924,-6.920964,-0.916402,-7.475743,-5.003238,4.982316,-3.608720,0.672986,-0.349236,-0.614313,5.889891,-4.845524,-5.661263,2.278816,-5.805091,-3.180279,-2.194978,5.198505,9.683722,-0.145193,6.118563,1.156452,1.308636,-5.978808,4.221423,-3.036981,0.034191,0.883282,-4.452493,5.401610,-3.727521,-5.504245,-9.099531,6.889008,-3.018255,6.115656,5.004726,5.776788,-4.842586,-9.127311,7.161842,-7.818592,-7.814088,-3.857928,-7.078610,5.660399,3.776027,1.405688,-3.691943,-4.688804,-1.013790,-6.825543,-3.723835,-3.467482,5.426688,6.635727,-4.964982,-9.372197,3.519867,0.316789,-0.066553,-7.298582,-5.846481,8.307931,-3.694967,2.502880,6.797655,7.733240,-0.209261,-8.559990,-2.037857,-9.624650,1.581722,6.412988,3.007555,-2.287840,-1.753850,-0.130233,-9.795389,9.973205,5.190087,-7.818556,-4.180369,-7.853044,7.153895,3.523876,-5.282670,-7.009763,-8.814636,2.978183,-5.929221,1.233144,-1.702549,-5.921220,1.605853,-2.966961,-2.504366,0.131759,-2.935305,3.185184,6.740729,3.754142,-5.157251,0.848865,-8.536101,9.052814,4.693863,0.162623,-9.052003,-7.917421,9.212419,-2.451110,5.731130,-0.387933,6.529717,-8.769071,-0.985871,2.614157,7.254584,7.369285,5.379645,9.040205,8.660048,-4.075404,-0.075073,4.640477,9.428750,5.975146,-7.297138,-2.996751,-3.888472,-1.606002,5.083876,6.738027,-8.252893,-9.654619,0.761077,-3.834662,-5.827811,-3.450470,-3.833958,-3.437377,5.647904,-1.808298,1.196378,-5.705744,4.949826,0.484965,-7.921556,-8.198407,6.982084,-5.059370,-3.766698,-3.884154,2.125247,5.678336,-6.053411,-5.351102,8.747553,8.761409,1.064695,-3.218476,-2.736616,0.722945,7.238930,-6.770098,-8.689188,7.675533,3.878252,2.784575,3.101223,-1.319739,-3.659183,7.345883,-1.009283,3.807955,-3.468904,-9.949518,7.876474,6.753637,2.566479,9.475377,-1.192391,-3.712772,-6.668574,3.744442,-0.323531,-5.444399,-7.433161,1.321489,-9.221304,-3.977042,-4.096456,-1.365944,5.094875,-4.598607,0.456838,-6.379366,6.736215,2.874231,6.927112,8.164207,2.595187,-9.798348,1.911373,-0.868000,-4.508682,6.092120,8.826624,-6.735603,3.823446,-9.164321,7.148025,4.319887,6.828972,-0.559876,8.343791,2.457218,1.075308,-5.341577,0.483083,3.307643,7.030548,-6.981097,-4.246601,3.041490,-8.363336,-2.134818,2.207766,-3.893003,-3.386416,9.009429,-7.928380,-9.798945,-5.062167,-2.422684], dtype='float64')
module1.set_input('var_328', input_328)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_239, input_242, input_246, input_267, input_307, input_308, input_310, input_319, input_328, )
res3 = intrp3.evaluate()(input_239, input_242, input_246, input_267, input_307, input_308, input_310, input_319, input_328, )
res4 = intrp4.evaluate()(input_239, input_242, input_246, input_267, input_307, input_308, input_310, input_319, input_328, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
res1_14 = module1.get_output(14).asnumpy()
res2_14 = res2[14].asnumpy()
res3_14 = res3[14].asnumpy()
res4_14 = res4[14].asnumpy()
np.testing.assert_allclose(res1_14 ,res2_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res3_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res4_14, atol=1e-3, rtol=1e-3)
(res1_14 == res2_14).all()
(res1_14 == res3_14).all()
(res1_14 == res4_14).all()
res1_15 = module1.get_output(15).asnumpy()
res2_15 = res2[15].asnumpy()
res3_15 = res3[15].asnumpy()
res4_15 = res4[15].asnumpy()
np.testing.assert_allclose(res1_15 ,res2_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res3_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res4_15, atol=1e-3, rtol=1e-3)
(res1_15 == res2_15).all()
(res1_15 == res3_15).all()
(res1_15 == res4_15).all()
res1_16 = module1.get_output(16).asnumpy()
res2_16 = res2[16].asnumpy()
res3_16 = res3[16].asnumpy()
res4_16 = res4[16].asnumpy()
np.testing.assert_allclose(res1_16 ,res2_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res3_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res4_16, atol=1e-3, rtol=1e-3)
(res1_16 == res2_16).all()
(res1_16 == res3_16).all()
(res1_16 == res4_16).all()
res1_17 = module1.get_output(17).asnumpy()
res2_17 = res2[17].asnumpy()
res3_17 = res3[17].asnumpy()
res4_17 = res4[17].asnumpy()
np.testing.assert_allclose(res1_17 ,res2_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res3_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res4_17, atol=1e-3, rtol=1e-3)
(res1_17 == res2_17).all()
(res1_17 == res3_17).all()
(res1_17 == res4_17).all()
res1_18 = module1.get_output(18).asnumpy()
res2_18 = res2[18].asnumpy()
res3_18 = res3[18].asnumpy()
res4_18 = res4[18].asnumpy()
np.testing.assert_allclose(res1_18 ,res2_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res3_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res4_18, atol=1e-3, rtol=1e-3)
(res1_18 == res2_18).all()
(res1_18 == res3_18).all()
(res1_18 == res4_18).all()
res1_19 = module1.get_output(19).asnumpy()
res2_19 = res2[19].asnumpy()
res3_19 = res3[19].asnumpy()
res4_19 = res4[19].asnumpy()
np.testing.assert_allclose(res1_19 ,res2_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_19 ,res3_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_19 ,res4_19, atol=1e-3, rtol=1e-3)
(res1_19 == res2_19).all()
(res1_19 == res3_19).all()
(res1_19 == res4_19).all()
res1_20 = module1.get_output(20).asnumpy()
res2_20 = res2[20].asnumpy()
res3_20 = res3[20].asnumpy()
res4_20 = res4[20].asnumpy()
np.testing.assert_allclose(res1_20 ,res2_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_20 ,res3_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_20 ,res4_20, atol=1e-3, rtol=1e-3)
(res1_20 == res2_20).all()
(res1_20 == res3_20).all()
(res1_20 == res4_20).all()
module5.set_input('var_239', input_239)
module5.set_input('var_242', input_242)
module5.set_input('var_246', input_246)
module5.set_input('var_267', input_267)
module5.set_input('var_307', input_307)
module5.set_input('var_308', input_308)
module5.set_input('var_310', input_310)
module5.set_input('var_319', input_319)
module5.set_input('var_328', input_328)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_239, input_242, input_246, input_267, input_307, input_308, input_310, input_319, input_328, )
res7 = intrp7.evaluate()(input_239, input_242, input_246, input_267, input_307, input_308, input_310, input_319, input_328, )
res8 = intrp8.evaluate()(input_239, input_242, input_246, input_267, input_307, input_308, input_310, input_319, input_328, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
res5_14 = module5.get_output(14).asnumpy()
res6_14 = res6[14].asnumpy()
res7_14 = res7[14].asnumpy()
res8_14 = res8[14].asnumpy()
np.testing.assert_allclose(res5_14 ,res6_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res7_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res8_14, atol=1e-3, rtol=1e-3)
(res5_14 == res6_14).all()
(res5_14 == res7_14).all()
(res5_14 == res8_14).all()
res5_15 = module5.get_output(15).asnumpy()
res6_15 = res6[15].asnumpy()
res7_15 = res7[15].asnumpy()
res8_15 = res8[15].asnumpy()
np.testing.assert_allclose(res5_15 ,res6_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res7_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res8_15, atol=1e-3, rtol=1e-3)
(res5_15 == res6_15).all()
(res5_15 == res7_15).all()
(res5_15 == res8_15).all()
res5_16 = module5.get_output(16).asnumpy()
res6_16 = res6[16].asnumpy()
res7_16 = res7[16].asnumpy()
res8_16 = res8[16].asnumpy()
np.testing.assert_allclose(res5_16 ,res6_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res7_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res8_16, atol=1e-3, rtol=1e-3)
(res5_16 == res6_16).all()
(res5_16 == res7_16).all()
(res5_16 == res8_16).all()
res5_17 = module5.get_output(17).asnumpy()
res6_17 = res6[17].asnumpy()
res7_17 = res7[17].asnumpy()
res8_17 = res8[17].asnumpy()
np.testing.assert_allclose(res5_17 ,res6_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res7_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res8_17, atol=1e-3, rtol=1e-3)
(res5_17 == res6_17).all()
(res5_17 == res7_17).all()
(res5_17 == res8_17).all()
res5_18 = module5.get_output(18).asnumpy()
res6_18 = res6[18].asnumpy()
res7_18 = res7[18].asnumpy()
res8_18 = res8[18].asnumpy()
np.testing.assert_allclose(res5_18 ,res6_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res7_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res8_18, atol=1e-3, rtol=1e-3)
(res5_18 == res6_18).all()
(res5_18 == res7_18).all()
(res5_18 == res8_18).all()
res5_19 = module5.get_output(19).asnumpy()
res6_19 = res6[19].asnumpy()
res7_19 = res7[19].asnumpy()
res8_19 = res8[19].asnumpy()
np.testing.assert_allclose(res5_19 ,res6_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_19 ,res7_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_19 ,res8_19, atol=1e-3, rtol=1e-3)
(res5_19 == res6_19).all()
(res5_19 == res7_19).all()
(res5_19 == res8_19).all()
res5_20 = module5.get_output(20).asnumpy()
res6_20 = res6[20].asnumpy()
res7_20 = res7[20].asnumpy()
res8_20 = res8[20].asnumpy()
np.testing.assert_allclose(res5_20 ,res6_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_20 ,res7_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_20 ,res8_20, atol=1e-3, rtol=1e-3)
(res5_20 == res6_20).all()
(res5_20 == res7_20).all()
(res5_20 == res8_20).all()
module9.set_input('var_239', input_239)
module9.set_input('var_242', input_242)
module9.set_input('var_246', input_246)
module9.set_input('var_267', input_267)
module9.set_input('var_307', input_307)
module9.set_input('var_308', input_308)
module9.set_input('var_310', input_310)
module9.set_input('var_319', input_319)
module9.set_input('var_328', input_328)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_239, input_242, input_246, input_267, input_307, input_308, input_310, input_319, input_328, )
res11 = intrp11.evaluate()(input_239, input_242, input_246, input_267, input_307, input_308, input_310, input_319, input_328, )
res12 = intrp12.evaluate()(input_239, input_242, input_246, input_267, input_307, input_308, input_310, input_319, input_328, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
res9_14 = module9.get_output(14).asnumpy()
res10_14 = res10[14].asnumpy()
res11_14 = res11[14].asnumpy()
res12_14 = res12[14].asnumpy()
np.testing.assert_allclose(res9_14 ,res10_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res11_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res12_14, atol=1e-3, rtol=1e-3)
(res9_14 == res10_14).all()
(res9_14 == res11_14).all()
(res9_14 == res12_14).all()
res9_15 = module9.get_output(15).asnumpy()
res10_15 = res10[15].asnumpy()
res11_15 = res11[15].asnumpy()
res12_15 = res12[15].asnumpy()
np.testing.assert_allclose(res9_15 ,res10_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res11_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res12_15, atol=1e-3, rtol=1e-3)
(res9_15 == res10_15).all()
(res9_15 == res11_15).all()
(res9_15 == res12_15).all()
res9_16 = module9.get_output(16).asnumpy()
res10_16 = res10[16].asnumpy()
res11_16 = res11[16].asnumpy()
res12_16 = res12[16].asnumpy()
np.testing.assert_allclose(res9_16 ,res10_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res11_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res12_16, atol=1e-3, rtol=1e-3)
(res9_16 == res10_16).all()
(res9_16 == res11_16).all()
(res9_16 == res12_16).all()
res9_17 = module9.get_output(17).asnumpy()
res10_17 = res10[17].asnumpy()
res11_17 = res11[17].asnumpy()
res12_17 = res12[17].asnumpy()
np.testing.assert_allclose(res9_17 ,res10_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res11_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res12_17, atol=1e-3, rtol=1e-3)
(res9_17 == res10_17).all()
(res9_17 == res11_17).all()
(res9_17 == res12_17).all()
res9_18 = module9.get_output(18).asnumpy()
res10_18 = res10[18].asnumpy()
res11_18 = res11[18].asnumpy()
res12_18 = res12[18].asnumpy()
np.testing.assert_allclose(res9_18 ,res10_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res11_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res12_18, atol=1e-3, rtol=1e-3)
(res9_18 == res10_18).all()
(res9_18 == res11_18).all()
(res9_18 == res12_18).all()
res9_19 = module9.get_output(19).asnumpy()
res10_19 = res10[19].asnumpy()
res11_19 = res11[19].asnumpy()
res12_19 = res12[19].asnumpy()
np.testing.assert_allclose(res9_19 ,res10_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_19 ,res11_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_19 ,res12_19, atol=1e-3, rtol=1e-3)
(res9_19 == res10_19).all()
(res9_19 == res11_19).all()
(res9_19 == res12_19).all()
res9_20 = module9.get_output(20).asnumpy()
res10_20 = res10[20].asnumpy()
res11_20 = res11[20].asnumpy()
res12_20 = res12[20].asnumpy()
np.testing.assert_allclose(res9_20 ,res10_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_20 ,res11_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_20 ,res12_20, atol=1e-3, rtol=1e-3)
(res9_20 == res10_20).all()
(res9_20 == res11_20).all()
(res9_20 == res12_20).all()
module13.set_input('var_239', input_239)
module13.set_input('var_242', input_242)
module13.set_input('var_246', input_246)
module13.set_input('var_267', input_267)
module13.set_input('var_307', input_307)
module13.set_input('var_308', input_308)
module13.set_input('var_310', input_310)
module13.set_input('var_319', input_319)
module13.set_input('var_328', input_328)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_239, input_242, input_246, input_267, input_307, input_308, input_310, input_319, input_328, )
res15 = intrp15.evaluate()(input_239, input_242, input_246, input_267, input_307, input_308, input_310, input_319, input_328, )
res16 = intrp16.evaluate()(input_239, input_242, input_246, input_267, input_307, input_308, input_310, input_319, input_328, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
res13_14 = module13.get_output(14).asnumpy()
res14_14 = res14[14].asnumpy()
res15_14 = res15[14].asnumpy()
res16_14 = res16[14].asnumpy()
np.testing.assert_allclose(res13_14 ,res14_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res15_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res16_14, atol=1e-3, rtol=1e-3)
(res13_14 == res14_14).all()
(res13_14 == res15_14).all()
(res13_14 == res16_14).all()
res13_15 = module13.get_output(15).asnumpy()
res14_15 = res14[15].asnumpy()
res15_15 = res15[15].asnumpy()
res16_15 = res16[15].asnumpy()
np.testing.assert_allclose(res13_15 ,res14_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res15_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res16_15, atol=1e-3, rtol=1e-3)
(res13_15 == res14_15).all()
(res13_15 == res15_15).all()
(res13_15 == res16_15).all()
res13_16 = module13.get_output(16).asnumpy()
res14_16 = res14[16].asnumpy()
res15_16 = res15[16].asnumpy()
res16_16 = res16[16].asnumpy()
np.testing.assert_allclose(res13_16 ,res14_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res15_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res16_16, atol=1e-3, rtol=1e-3)
(res13_16 == res14_16).all()
(res13_16 == res15_16).all()
(res13_16 == res16_16).all()
res13_17 = module13.get_output(17).asnumpy()
res14_17 = res14[17].asnumpy()
res15_17 = res15[17].asnumpy()
res16_17 = res16[17].asnumpy()
np.testing.assert_allclose(res13_17 ,res14_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res15_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res16_17, atol=1e-3, rtol=1e-3)
(res13_17 == res14_17).all()
(res13_17 == res15_17).all()
(res13_17 == res16_17).all()
res13_18 = module13.get_output(18).asnumpy()
res14_18 = res14[18].asnumpy()
res15_18 = res15[18].asnumpy()
res16_18 = res16[18].asnumpy()
np.testing.assert_allclose(res13_18 ,res14_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res15_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res16_18, atol=1e-3, rtol=1e-3)
(res13_18 == res14_18).all()
(res13_18 == res15_18).all()
(res13_18 == res16_18).all()
res13_19 = module13.get_output(19).asnumpy()
res14_19 = res14[19].asnumpy()
res15_19 = res15[19].asnumpy()
res16_19 = res16[19].asnumpy()
np.testing.assert_allclose(res13_19 ,res14_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_19 ,res15_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_19 ,res16_19, atol=1e-3, rtol=1e-3)
(res13_19 == res14_19).all()
(res13_19 == res15_19).all()
(res13_19 == res16_19).all()
res13_20 = module13.get_output(20).asnumpy()
res14_20 = res14[20].asnumpy()
res15_20 = res15[20].asnumpy()
res16_20 = res16[20].asnumpy()
np.testing.assert_allclose(res13_20 ,res14_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_20 ,res15_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_20 ,res16_20, atol=1e-3, rtol=1e-3)
(res13_20 == res14_20).all()
(res13_20 == res15_20).all()
(res13_20 == res16_20).all()
module17.set_input('var_239', input_239)
module17.set_input('var_242', input_242)
module17.set_input('var_246', input_246)
module17.set_input('var_267', input_267)
module17.set_input('var_307', input_307)
module17.set_input('var_308', input_308)
module17.set_input('var_310', input_310)
module17.set_input('var_319', input_319)
module17.set_input('var_328', input_328)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_239, input_242, input_246, input_267, input_307, input_308, input_310, input_319, input_328, )
res19 = intrp19.evaluate()(input_239, input_242, input_246, input_267, input_307, input_308, input_310, input_319, input_328, )
res20 = intrp20.evaluate()(input_239, input_242, input_246, input_267, input_307, input_308, input_310, input_319, input_328, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
res17_14 = module17.get_output(14).asnumpy()
res18_14 = res18[14].asnumpy()
res19_14 = res19[14].asnumpy()
res20_14 = res20[14].asnumpy()
np.testing.assert_allclose(res17_14 ,res18_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res19_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res20_14, atol=1e-3, rtol=1e-3)
(res17_14 == res18_14).all()
(res17_14 == res19_14).all()
(res17_14 == res20_14).all()
res17_15 = module17.get_output(15).asnumpy()
res18_15 = res18[15].asnumpy()
res19_15 = res19[15].asnumpy()
res20_15 = res20[15].asnumpy()
np.testing.assert_allclose(res17_15 ,res18_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res19_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res20_15, atol=1e-3, rtol=1e-3)
(res17_15 == res18_15).all()
(res17_15 == res19_15).all()
(res17_15 == res20_15).all()
res17_16 = module17.get_output(16).asnumpy()
res18_16 = res18[16].asnumpy()
res19_16 = res19[16].asnumpy()
res20_16 = res20[16].asnumpy()
np.testing.assert_allclose(res17_16 ,res18_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res19_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res20_16, atol=1e-3, rtol=1e-3)
(res17_16 == res18_16).all()
(res17_16 == res19_16).all()
(res17_16 == res20_16).all()
res17_17 = module17.get_output(17).asnumpy()
res18_17 = res18[17].asnumpy()
res19_17 = res19[17].asnumpy()
res20_17 = res20[17].asnumpy()
np.testing.assert_allclose(res17_17 ,res18_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res19_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res20_17, atol=1e-3, rtol=1e-3)
(res17_17 == res18_17).all()
(res17_17 == res19_17).all()
(res17_17 == res20_17).all()
res17_18 = module17.get_output(18).asnumpy()
res18_18 = res18[18].asnumpy()
res19_18 = res19[18].asnumpy()
res20_18 = res20[18].asnumpy()
np.testing.assert_allclose(res17_18 ,res18_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res19_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res20_18, atol=1e-3, rtol=1e-3)
(res17_18 == res18_18).all()
(res17_18 == res19_18).all()
(res17_18 == res20_18).all()
res17_19 = module17.get_output(19).asnumpy()
res18_19 = res18[19].asnumpy()
res19_19 = res19[19].asnumpy()
res20_19 = res20[19].asnumpy()
np.testing.assert_allclose(res17_19 ,res18_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_19 ,res19_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_19 ,res20_19, atol=1e-3, rtol=1e-3)
(res17_19 == res18_19).all()
(res17_19 == res19_19).all()
(res17_19 == res20_19).all()
res17_20 = module17.get_output(20).asnumpy()
res18_20 = res18[20].asnumpy()
res19_20 = res19[20].asnumpy()
res20_20 = res20[20].asnumpy()
np.testing.assert_allclose(res17_20 ,res18_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_20 ,res19_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_20 ,res20_20, atol=1e-3, rtol=1e-3)
(res17_20 == res18_20).all()
(res17_20 == res19_20).all()
(res17_20 == res20_20).all()
module21.set_input('var_239', input_239)
module21.set_input('var_242', input_242)
module21.set_input('var_246', input_246)
module21.set_input('var_267', input_267)
module21.set_input('var_307', input_307)
module21.set_input('var_308', input_308)
module21.set_input('var_310', input_310)
module21.set_input('var_319', input_319)
module21.set_input('var_328', input_328)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_239, input_242, input_246, input_267, input_307, input_308, input_310, input_319, input_328, )
res23 = intrp23.evaluate()(input_239, input_242, input_246, input_267, input_307, input_308, input_310, input_319, input_328, )
res24 = intrp24.evaluate()(input_239, input_242, input_246, input_267, input_307, input_308, input_310, input_319, input_328, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()
res21_14 = module21.get_output(14).asnumpy()
res22_14 = res22[14].asnumpy()
res23_14 = res23[14].asnumpy()
res24_14 = res24[14].asnumpy()
np.testing.assert_allclose(res21_14 ,res22_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res23_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res24_14, atol=1e-3, rtol=1e-3)
(res21_14 == res22_14).all()
(res21_14 == res23_14).all()
(res21_14 == res24_14).all()
res21_15 = module21.get_output(15).asnumpy()
res22_15 = res22[15].asnumpy()
res23_15 = res23[15].asnumpy()
res24_15 = res24[15].asnumpy()
np.testing.assert_allclose(res21_15 ,res22_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res23_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res24_15, atol=1e-3, rtol=1e-3)
(res21_15 == res22_15).all()
(res21_15 == res23_15).all()
(res21_15 == res24_15).all()
res21_16 = module21.get_output(16).asnumpy()
res22_16 = res22[16].asnumpy()
res23_16 = res23[16].asnumpy()
res24_16 = res24[16].asnumpy()
np.testing.assert_allclose(res21_16 ,res22_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res23_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res24_16, atol=1e-3, rtol=1e-3)
(res21_16 == res22_16).all()
(res21_16 == res23_16).all()
(res21_16 == res24_16).all()
res21_17 = module21.get_output(17).asnumpy()
res22_17 = res22[17].asnumpy()
res23_17 = res23[17].asnumpy()
res24_17 = res24[17].asnumpy()
np.testing.assert_allclose(res21_17 ,res22_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res23_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res24_17, atol=1e-3, rtol=1e-3)
(res21_17 == res22_17).all()
(res21_17 == res23_17).all()
(res21_17 == res24_17).all()
res21_18 = module21.get_output(18).asnumpy()
res22_18 = res22[18].asnumpy()
res23_18 = res23[18].asnumpy()
res24_18 = res24[18].asnumpy()
np.testing.assert_allclose(res21_18 ,res22_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res23_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res24_18, atol=1e-3, rtol=1e-3)
(res21_18 == res22_18).all()
(res21_18 == res23_18).all()
(res21_18 == res24_18).all()
res21_19 = module21.get_output(19).asnumpy()
res22_19 = res22[19].asnumpy()
res23_19 = res23[19].asnumpy()
res24_19 = res24[19].asnumpy()
np.testing.assert_allclose(res21_19 ,res22_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_19 ,res23_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_19 ,res24_19, atol=1e-3, rtol=1e-3)
(res21_19 == res22_19).all()
(res21_19 == res23_19).all()
(res21_19 == res24_19).all()
res21_20 = module21.get_output(20).asnumpy()
res22_20 = res22[20].asnumpy()
res23_20 = res23[20].asnumpy()
res24_20 = res24[20].asnumpy()
np.testing.assert_allclose(res21_20 ,res22_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_20 ,res23_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_20 ,res24_20, atol=1e-3, rtol=1e-3)
(res21_20 == res22_20).all()
(res21_20 == res23_20).all()
(res21_20 == res24_20).all()

'''33: TVMFuncCall
32: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
31: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
30: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
29: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
28: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
27: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
26: tvm::relay::GraphPlanMemory(tvm::relay::Function const&)
25: tvm::relay::StorageAllocator::Plan(tvm::relay::Function const&)
24: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
21: tvm::relay::transform::DeviceAwareExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
20: tvm::relay::StorageAllocaBaseVisitor::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
19: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
18: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
17: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
16: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
15: tvm::relay::StorageAllocaBaseVisitor::VisitExpr_(tvm::relay::TupleNode const*)
14: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
13: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
12: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
11: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
10: tvm::relay::StorageAllocaBaseVisitor::VisitExpr_(tvm::relay::TupleGetItemNode const*)
9: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
8: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
7: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
6: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
5: tvm::relay::transform::DeviceAwareExprVisitor::VisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::StorageAllocator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
3: tvm::relay::StorageAllocaBaseVisitor::CreateToken(tvm::RelayExprNode const*, bool)
2: tvm::relay::StorageAllocator::CreateTokenOnDevice(tvm::RelayExprNode const*, tvm::VirtualDevice const&, bool)
1: tvm::relay::StorageAllocator::Request(tvm::relay::StorageToken*)
0: tvm::relay::StorageAllocator::GetMemorySize(tvm::relay::StorageToken*)

'''