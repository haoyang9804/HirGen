import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_36 = relay.var("var_36", dtype = "float64", shape = (1, 9, 2))#candidate|36|(1, 9, 2)|var|float64
var_37 = relay.var("var_37", dtype = "float64", shape = (14, 9, 2))#candidate|37|(14, 9, 2)|var|float64
bop_38 = relay.floor_mod(var_36.astype('float64'), var_37.astype('float64')) # shape=(14, 9, 2)
uop_41 = relay.atanh(bop_38.astype('float64')) # shape=(14, 9, 2)
output = uop_41
output2 = uop_41
func_49 = relay.Function([var_36,var_37,], output)
mod['func_49'] = func_49
mod = relay.transform.InferType()(mod)
var_50 = relay.var("var_50", dtype = "float64", shape = (1, 9, 2))#candidate|50|(1, 9, 2)|var|float64
var_51 = relay.var("var_51", dtype = "float64", shape = (14, 9, 2))#candidate|51|(14, 9, 2)|var|float64
output = func_49(var_50,var_51,)
func_52 = relay.Function([var_50,var_51,], output)
mutated_mod['func_52'] = func_52
mutated_mod = relay.transform.InferType()(mutated_mod)
var_58 = relay.var("var_58", dtype = "float32", shape = (11, 11, 8))#candidate|58|(11, 11, 8)|var|float32
uop_59 = relay.log10(var_58.astype('float32')) # shape=(11, 11, 8)
output = uop_59
output2 = uop_59
func_61 = relay.Function([var_58,], output)
mod['func_61'] = func_61
mod = relay.transform.InferType()(mod)
var_62 = relay.var("var_62", dtype = "float32", shape = (11, 11, 8))#candidate|62|(11, 11, 8)|var|float32
output = func_61(var_62)
func_63 = relay.Function([var_62], output)
mutated_mod['func_63'] = func_63
mutated_mod = relay.transform.InferType()(mutated_mod)
var_65 = relay.var("var_65", dtype = "float32", shape = (9, 3, 3))#candidate|65|(9, 3, 3)|var|float32
uop_66 = relay.acos(var_65.astype('float32')) # shape=(9, 3, 3)
uop_70 = relay.sinh(uop_66.astype('float32')) # shape=(9, 3, 3)
output = uop_70
output2 = uop_70
func_72 = relay.Function([var_65,], output)
mod['func_72'] = func_72
mod = relay.transform.InferType()(mod)
mutated_mod['func_72'] = func_72
mutated_mod = relay.transform.InferType()(mutated_mod)
var_73 = relay.var("var_73", dtype = "float32", shape = (9, 3, 3))#candidate|73|(9, 3, 3)|var|float32
func_72_call = mutated_mod.get_global_var('func_72')
call_74 = func_72_call(var_73)
output = call_74
func_75 = relay.Function([var_73], output)
mutated_mod['func_75'] = func_75
mutated_mod = relay.transform.InferType()(mutated_mod)
var_95 = relay.var("var_95", dtype = "float32", shape = (8, 13))#candidate|95|(8, 13)|var|float32
uop_96 = relay.acos(var_95.astype('float32')) # shape=(8, 13)
bop_104 = relay.equal(var_95.astype('bool'), relay.reshape(uop_96.astype('bool'), relay.shape_of(var_95))) # shape=(8, 13)
bop_108 = relay.bitwise_and(var_95.astype('uint8'), relay.reshape(uop_96.astype('uint8'), relay.shape_of(var_95))) # shape=(8, 13)
output = relay.Tuple([bop_104,bop_108,])
output2 = relay.Tuple([bop_104,bop_108,])
func_115 = relay.Function([var_95,], output)
mod['func_115'] = func_115
mod = relay.transform.InferType()(mod)
mutated_mod['func_115'] = func_115
mutated_mod = relay.transform.InferType()(mutated_mod)
var_116 = relay.var("var_116", dtype = "float32", shape = (8, 13))#candidate|116|(8, 13)|var|float32
func_115_call = mutated_mod.get_global_var('func_115')
call_117 = func_115_call(var_116)
output = call_117
func_118 = relay.Function([var_116], output)
mutated_mod['func_118'] = func_118
mutated_mod = relay.transform.InferType()(mutated_mod)
var_243 = relay.var("var_243", dtype = "float32", shape = (10, 6, 14))#candidate|243|(10, 6, 14)|var|float32
uop_244 = relay.tan(var_243.astype('float32')) # shape=(10, 6, 14)
uop_252 = relay.rsqrt(uop_244.astype('float64')) # shape=(10, 6, 14)
uop_254 = relay.atan(uop_252.astype('float32')) # shape=(10, 6, 14)
uop_258 = relay.cos(uop_254.astype('float32')) # shape=(10, 6, 14)
uop_264 = relay.sqrt(uop_244.astype('float32')) # shape=(10, 6, 14)
output = relay.Tuple([uop_258,uop_264,])
output2 = relay.Tuple([uop_258,uop_264,])
func_267 = relay.Function([var_243,], output)
mod['func_267'] = func_267
mod = relay.transform.InferType()(mod)
mutated_mod['func_267'] = func_267
mutated_mod = relay.transform.InferType()(mutated_mod)
var_268 = relay.var("var_268", dtype = "float32", shape = (10, 6, 14))#candidate|268|(10, 6, 14)|var|float32
func_267_call = mutated_mod.get_global_var('func_267')
call_269 = func_267_call(var_268)
output = call_269
func_270 = relay.Function([var_268], output)
mutated_mod['func_270'] = func_270
mutated_mod = relay.transform.InferType()(mutated_mod)
var_310 = relay.var("var_310", dtype = "int32", shape = (1, 11, 14))#candidate|310|(1, 11, 14)|var|int32
var_311 = relay.var("var_311", dtype = "int32", shape = (10, 11, 14))#candidate|311|(10, 11, 14)|var|int32
bop_312 = relay.not_equal(var_310.astype('bool'), var_311.astype('bool')) # shape=(10, 11, 14)
bop_316 = relay.greater_equal(var_311.astype('bool'), relay.reshape(bop_312.astype('bool'), relay.shape_of(var_311))) # shape=(10, 11, 14)
bop_319 = relay.mod(bop_312.astype('float64'), relay.reshape(var_311.astype('float64'), relay.shape_of(bop_312))) # shape=(10, 11, 14)
uop_326 = relay.sqrt(bop_312.astype('float64')) # shape=(10, 11, 14)
bop_338 = relay.right_shift(uop_326.astype('uint16'), relay.reshape(bop_312.astype('uint16'), relay.shape_of(uop_326))) # shape=(10, 11, 14)
bop_352 = relay.add(uop_326.astype('float32'), relay.reshape(var_311.astype('float32'), relay.shape_of(uop_326))) # shape=(10, 11, 14)
uop_357 = relay.acos(bop_352.astype('float64')) # shape=(10, 11, 14)
bop_366 = relay.power(uop_357.astype('float32'), relay.reshape(bop_316.astype('float32'), relay.shape_of(uop_357))) # shape=(10, 11, 14)
uop_373 = relay.erf(bop_312.astype('float32')) # shape=(10, 11, 14)
func_61_call = mod.get_global_var('func_61')
func_63_call = mutated_mod.get_global_var('func_63')
var_378 = relay.var("var_378", dtype = "float32", shape = (968,))#candidate|378|(968,)|var|float32
call_377 = func_61_call(relay.reshape(var_378.astype('float32'), [11, 11, 8]))
call_379 = func_61_call(relay.reshape(var_378.astype('float32'), [11, 11, 8]))
uop_389 = relay.rsqrt(bop_316.astype('float64')) # shape=(10, 11, 14)
output = relay.Tuple([bop_319,bop_338,bop_366,uop_373,call_377,var_378,uop_389,])
output2 = relay.Tuple([bop_319,bop_338,bop_366,uop_373,call_379,var_378,uop_389,])
func_391 = relay.Function([var_310,var_311,var_378,], output)
mod['func_391'] = func_391
mod = relay.transform.InferType()(mod)
var_392 = relay.var("var_392", dtype = "int32", shape = (1, 11, 14))#candidate|392|(1, 11, 14)|var|int32
var_393 = relay.var("var_393", dtype = "int32", shape = (10, 11, 14))#candidate|393|(10, 11, 14)|var|int32
var_394 = relay.var("var_394", dtype = "float32", shape = (968,))#candidate|394|(968,)|var|float32
output = func_391(var_392,var_393,var_394,)
func_395 = relay.Function([var_392,var_393,var_394,], output)
mutated_mod['func_395'] = func_395
mutated_mod = relay.transform.InferType()(mutated_mod)
var_429 = relay.var("var_429", dtype = "float32", shape = (1, 5))#candidate|429|(1, 5)|var|float32
var_430 = relay.var("var_430", dtype = "float32", shape = (6, 5))#candidate|430|(6, 5)|var|float32
bop_431 = relay.power(var_429.astype('float32'), var_430.astype('float32')) # shape=(6, 5)
func_267_call = mod.get_global_var('func_267')
func_270_call = mutated_mod.get_global_var('func_270')
const_443 = relay.const([[-7.550463,-5.383008],[9.444794,-0.244007],[2.757567,-4.359281],[3.612683,8.135358],[3.773144,1.784694],[-3.335942,3.824690],[2.560964,-6.293729],[7.474317,6.686017],[-3.117252,-3.148200],[-8.504033,6.008996],[9.750682,-2.643778],[-4.561416,7.695494],[8.789998,-0.821865],[4.201960,-1.104760],[-9.777003,-2.563583],[-2.247520,6.423719],[-2.367032,9.554722],[-1.790351,-6.893470],[-6.462704,9.899071],[-4.679486,9.904556],[1.232070,-7.916564],[1.959400,1.671847],[6.965056,6.921054],[3.172287,6.675584],[5.734152,-0.568441],[0.060119,8.006065],[5.139943,1.931335],[-5.547893,0.283468],[-8.154910,-7.577603],[9.950878,4.054703],[-7.731059,-5.421684],[9.583627,9.151412],[-2.163692,3.096602],[-5.786202,-9.399956],[0.934154,-1.030096],[-2.491606,2.067531],[4.939415,-1.904867],[2.578456,7.838838],[-3.821369,8.124871],[4.284812,-5.499314],[-7.238263,-1.453120],[0.838576,6.661715],[-6.038160,-5.337354],[8.219709,2.115528],[5.528754,5.668925],[9.367316,-9.954963],[3.183195,1.377443],[-5.605159,-8.285314],[2.228385,-0.154981],[6.550087,5.875504],[8.207037,-7.279425],[2.759736,0.238351],[5.640410,8.155625],[3.427041,6.692673],[9.936493,-8.643265],[-6.077448,2.972425],[0.817446,-3.550227],[6.932458,-9.932441],[2.834507,9.629472],[-1.010229,-7.861608],[-0.117445,-0.782108],[4.689681,-7.358251],[-4.477171,9.789652],[8.506954,3.257625],[-0.569171,-0.409519],[3.216845,-8.101776],[5.375267,-6.322477],[-7.126722,-2.119903],[-6.108050,-6.190972],[-7.556768,4.328533],[9.717730,2.771154],[9.080513,5.897211],[1.571287,6.301643],[-4.937804,0.372068],[1.287235,1.859739],[-8.210602,-6.247974],[-1.013396,6.043646],[1.677628,-9.997446],[3.982283,-5.304637],[-8.100146,-2.091817],[4.461149,-7.772079],[1.067497,0.194114],[3.861803,-0.421848],[-5.629161,8.360098],[3.823642,2.143620],[7.359365,-6.098650],[-4.851530,0.333582],[-4.876657,-7.668424],[0.477135,-5.035287],[-6.351880,6.162491],[-3.580581,-0.142224],[2.180001,-6.733981],[-3.983609,3.513209],[9.685161,-2.923408],[-5.791819,-9.997604],[3.672454,-6.588219],[0.483964,3.955365],[0.051689,-5.629053],[-7.072187,-0.935764],[-4.933111,-7.518540],[3.038130,-4.446593],[5.847810,-1.073959],[-3.676719,6.800955],[7.709018,-1.687571],[-8.755525,-3.009618],[-8.119019,3.018606],[6.595614,-9.384793],[-6.512057,-9.996272],[0.631036,-2.972382],[4.700409,-8.506224],[7.606277,4.912956],[-5.742378,-2.108997],[1.008895,-4.645485],[0.134449,-3.630867],[0.396865,-0.283124],[-5.174218,5.284238],[8.853355,-3.436694],[-1.860225,-4.184468],[-0.148314,-2.319880],[8.589718,6.163856],[-5.235967,-2.559025],[-1.036777,-8.222623],[-2.646955,3.554523],[-7.824246,-4.553393],[8.821082,-4.440828],[8.959185,3.330826],[3.299615,-4.352613],[-7.989319,2.005386],[3.767203,-2.458732],[7.891330,-6.969100],[0.201202,-2.890126],[-6.966291,9.556179],[2.713086,-3.708141],[-2.016815,3.028854],[2.492509,-6.184093],[5.117722,-5.863829],[-4.058903,-5.602126],[-5.112502,6.009094],[5.172834,1.523548],[-0.104705,3.319164],[-2.304251,-6.537487],[9.883445,-0.981780],[-5.817674,9.531415],[8.868990,-1.749422],[-1.334480,0.973837],[1.411221,6.166321],[-7.832596,4.849696],[8.140943,-5.448361],[-6.402899,2.541847],[-7.895110,-4.494269],[-6.227118,1.772965],[-3.065482,6.264511],[-4.090737,0.103211],[6.403553,-9.974758],[6.924738,-8.391438],[-4.346052,-9.452257],[-7.719807,1.179364],[-0.046471,8.878688],[7.148138,-0.632366],[-4.481346,-5.418784],[-4.777081,1.842576],[-9.846828,9.574257],[5.532148,3.649058],[-5.671277,-2.869875],[7.456173,-8.363086],[0.265113,-2.204834],[-2.523584,-2.482771],[8.098352,2.653364],[-9.326458,9.461536],[9.962472,-4.809499],[6.130186,-6.682913],[-6.805520,-6.123388],[-8.815542,3.690245],[-6.333160,-0.441564],[-1.044183,4.660817],[-6.061853,1.828211],[5.599772,1.486358],[2.242085,5.329615],[7.308759,-9.040771],[-8.232595,6.751531],[5.918393,9.391379],[7.094777,-7.986872],[-0.901420,4.660662],[3.718309,-3.393523],[6.186903,1.164113],[6.266204,4.822547],[-2.077510,-1.831109],[-8.559838,-3.372223],[-8.147991,9.161487],[2.327433,2.345714],[-9.127301,-1.063051],[6.942688,-8.176521],[4.178362,0.678972],[6.533951,5.090805],[4.921819,-5.971373],[-6.531919,5.311519],[-0.822721,-5.031758],[2.059410,-1.124057],[-5.277518,8.549818],[7.224208,-8.859788],[0.790784,9.440236],[2.732068,-2.622628],[8.010370,-0.352922],[1.807733,-2.861899],[3.679613,-3.201991],[7.600821,-5.717813],[0.452233,3.966336],[5.602647,3.809191],[-3.837684,2.172786],[-1.166198,-6.594234],[5.901735,5.989576],[-1.788047,-3.761306],[-8.862105,-7.844574],[5.097584,5.360014],[-0.653223,7.092804],[-3.286462,-6.356162],[-8.799582,-2.457889],[-2.024449,-1.370812],[-7.811910,-7.524240],[3.344107,-0.235245],[7.741109,5.195222],[5.101998,-1.818201],[-6.166736,1.599593],[-0.488349,7.276489],[-7.695230,2.777852],[-1.499147,-8.778195],[2.259456,8.490979],[3.698250,-9.961782],[6.658029,-9.706824],[-7.973601,-0.688920],[-2.944873,-4.301210],[-3.673620,4.673941],[1.081716,6.114688],[-4.277734,-1.640454],[-8.847440,7.430860],[1.752412,9.585289],[8.093951,7.582649],[-8.147475,-2.077879],[-4.410182,8.080323],[-1.213768,4.793899],[-2.636097,3.066371],[-6.238415,-2.616231],[-9.893826,-5.456530],[-8.040121,-7.072746],[0.018024,7.627973],[6.273231,4.613139],[-1.817752,-1.382055],[9.271765,6.282411],[-3.439154,5.194150],[-7.905608,-1.325119],[3.188998,3.269272],[-2.290745,9.641830],[6.305024,3.841884],[5.626903,-6.764634],[9.168104,-7.684218],[-3.596705,-2.481732],[8.648355,9.903526],[-2.671517,-1.240696],[1.373948,2.843216],[2.224798,2.963091],[7.598005,6.362686],[6.290744,6.361701],[4.897598,-8.495779],[5.871276,-6.960740],[-4.400054,-2.022979],[9.455902,-6.140717],[-7.260726,-9.906107],[-7.791075,2.183370],[-1.864210,-6.787790],[-6.690611,3.543043],[-3.879358,-6.923105],[-8.393850,-3.658444],[-6.894483,3.456030],[8.327428,-8.026383],[3.517901,2.980463],[2.017314,-0.444116],[8.681554,6.499516],[-9.007234,8.318486],[-1.250871,-8.312590],[4.538895,3.150756],[9.678871,7.569243],[-5.076836,2.427577],[3.577889,-7.945085],[6.097853,-9.719671],[0.833109,-7.661100],[-3.595122,-8.798942],[8.509158,-0.894061],[6.675246,1.472495],[-3.013006,8.297921],[-1.041013,4.385158],[4.951042,-7.467313],[-1.944801,-1.576978],[6.919895,3.537418],[-8.952068,-2.951639],[-8.572516,-7.796762],[3.711373,-3.173650],[8.949012,-6.916392],[-9.817531,2.207191],[7.183938,-9.603185],[-5.430634,-3.452227],[-2.356461,-6.034439],[1.026506,-8.800785],[3.512963,-5.320422],[-3.848581,-2.035209],[-1.860190,-8.818575],[-4.620479,2.019357],[4.756152,9.260347],[-8.716772,6.565426],[7.174510,8.817311],[0.192452,-5.589119],[0.487704,4.641182],[-0.375866,6.976401],[-5.052451,3.305328],[5.533605,6.771396],[4.397699,-5.455805],[-4.391769,-3.633153],[6.748342,-9.440467],[5.282217,1.933733],[5.119669,8.306197],[6.985875,8.998707],[-2.614251,-2.607918],[5.851067,-7.545237],[8.029775,-2.690252],[2.924287,2.596675],[-0.833247,5.040531],[0.418271,-7.533822],[9.041213,-1.022258],[-1.045735,-8.185161],[-3.765798,-0.147445],[-7.044806,-6.237036],[-1.197103,3.649010],[6.068462,-1.625772],[4.705537,-2.307034],[0.290019,5.806592],[-2.597678,0.831225],[3.515029,6.695514],[-7.136259,5.309420],[-6.366985,-1.357190],[-1.632965,-2.232523],[3.854979,-5.004307],[-1.909745,8.348550],[4.290467,-3.552552],[-1.199307,1.246071],[-1.227305,9.240824],[-0.555290,2.773674],[2.457792,2.645678],[-2.381006,4.940743],[9.382380,-2.770425],[-3.608063,8.132323],[-9.643480,1.125414],[0.900000,8.803318],[1.574200,-8.607864],[8.772011,3.110880],[-9.857479,5.318794],[-1.346678,-9.101399],[-8.574833,-8.362723],[-7.525292,-1.931347],[2.789292,4.168462],[-0.415064,-5.795241],[5.887767,-2.194684],[5.534832,5.702536],[-3.820376,-7.500644],[-7.952636,-0.822240],[1.437861,8.598189],[-4.991851,-1.823823],[-8.356634,-0.750579],[-1.649509,-8.160741],[-1.563480,9.217540],[-7.655309,5.362641],[0.114623,-6.024947],[-1.723582,-5.302406],[9.419581,6.530828],[5.957549,2.464311],[9.103136,3.176233],[8.013445,6.435885],[-5.006436,1.503911],[-0.937149,4.628630],[-9.268302,2.565237],[7.606317,-1.473571],[2.981527,-5.356054],[7.134178,-7.643244],[-4.080076,3.629604],[-4.443732,9.055311],[9.929942,0.747853],[1.114826,1.830848],[-2.930000,-3.612625],[-4.548710,-3.660371],[-0.456192,-8.366464],[9.421920,-4.826529],[-3.345173,3.592299],[-2.099370,2.274776],[3.602325,4.375262],[-5.964624,-5.973645],[8.283887,-6.668386],[9.000493,-6.207012],[2.209913,3.930645],[1.983535,-5.505446],[5.959749,-1.986026],[-6.357307,1.675423],[7.186702,-8.853083],[4.535498,-2.651830],[5.995275,-8.599278],[-0.335632,-1.531734],[-7.657043,-8.019579],[2.460370,6.437882],[-6.228750,2.213110],[-5.237205,-0.924102],[6.867301,2.960941],[7.956440,-2.871109],[-3.160674,7.295652],[0.734459,-5.897110],[7.327340,9.491818],[-2.780543,-9.797181],[8.865254,5.461019],[-8.141258,6.111774],[0.360997,7.448367],[-0.097356,7.997168],[-3.170689,8.939165],[0.450936,0.521963],[-1.428824,7.541106]], dtype = "float32")#candidate|443|(420, 2)|const|float32
call_442 = relay.TupleGetItem(func_267_call(relay.reshape(const_443.astype('float32'), [10, 6, 14])), 1)
call_444 = relay.TupleGetItem(func_270_call(relay.reshape(const_443.astype('float32'), [10, 6, 14])), 1)
func_72_call = mod.get_global_var('func_72')
func_75_call = mutated_mod.get_global_var('func_75')
var_447 = relay.var("var_447", dtype = "float32", shape = (81,))#candidate|447|(81,)|var|float32
call_446 = func_72_call(relay.reshape(var_447.astype('float32'), [9, 3, 3]))
call_448 = func_72_call(relay.reshape(var_447.astype('float32'), [9, 3, 3]))
func_115_call = mod.get_global_var('func_115')
func_118_call = mutated_mod.get_global_var('func_118')
const_451 = relay.const([5.747175,0.438699,2.258240,7.326128,9.540644,5.942544,6.326221,4.668666,8.640472,7.989032,7.428099,-5.836948,-4.506158,0.270115,-6.848153,-5.962650,4.444746,0.499688,-7.175377,-3.442243,1.257477,1.937369,-3.438967,6.131919,-6.301381,-6.270464,-3.677279,9.787621,1.189475,-3.374856,5.271251,2.955064,1.582349,6.519565,-7.079081,4.529404,-8.195656,-3.414833,9.205834,-1.461691,-2.640389,8.855052,4.491244,-9.211642,-9.363259,8.990194,9.519071,-8.722928,6.656181,3.027964,5.916540,-6.365568,6.844535,-7.579720,-5.308178,-4.031424,4.633257,4.806412,4.483737,2.477449,4.627183,5.808856,-8.462318,6.058087,-0.829306,3.052717,4.709569,9.167306,-0.149689,3.320690,-0.109308,6.973965,-9.230404,1.436000,-3.441022,7.310850,4.364889,3.858260,-2.508568,4.916066,8.931061,-1.545518,-6.679687,8.003365,-7.610514,-9.225028,9.548932,-8.502647,-1.895158,0.387862,8.200264,-8.995393,5.518861,-7.755040,-3.287683,-6.976649,-8.892959,-2.951669,-2.640109,1.956122,3.096785,-1.083316,5.053904,-7.151916], dtype = "float32")#candidate|451|(104,)|const|float32
call_450 = relay.TupleGetItem(func_115_call(relay.reshape(const_451.astype('float32'), [8, 13])), 1)
call_452 = relay.TupleGetItem(func_118_call(relay.reshape(const_451.astype('float32'), [8, 13])), 1)
func_49_call = mod.get_global_var('func_49')
func_52_call = mutated_mod.get_global_var('func_52')
var_454 = relay.var("var_454", dtype = "float64", shape = (18,))#candidate|454|(18,)|var|float64
const_455 = relay.const([-4.860742,3.922592,-0.853354,-0.719462,4.282397,1.422238,2.463905,5.710047,3.222005,-0.953853,7.945097,6.584200,-8.298949,-5.242483,-5.835870,0.078519,3.492173,5.438114,9.975173,6.807970,6.418589,4.164475,-0.273736,1.010829,-7.173919,5.143633,4.095077,0.117200,-8.117289,2.886327,6.528733,4.705985,1.255651,-2.254003,-2.525391,-0.217892,1.835300,-0.675115,-9.722967,7.347407,-4.097229,7.822641,1.910660,0.175465,-6.759056,-7.344640,1.550189,-5.264070,-9.511263,9.017388,-9.513056,-8.260672,4.640782,1.235538,-5.820708,-1.549712,2.828424,0.253717,-7.372849,-4.491731,9.284420,-9.556352,3.270321,-6.643224,-6.097658,-2.663976,7.424489,-9.115480,-3.764328,-7.906747,-6.409191,9.759170,-1.397296,-4.537027,7.579101,9.141987,4.406007,8.556932,4.133849,-4.520859,-9.987529,-4.318830,2.155998,-9.852517,0.073125,-8.993147,-2.197484,5.538762,-4.666350,0.552614,4.842953,2.033175,6.680096,1.290338,-1.836976,-0.655538,-3.579766,-8.242897,1.159260,2.154881,9.790532,-0.195021,9.080053,5.849641,5.187646,0.405241,8.851758,5.754543,-7.501599,4.044406,-5.346269,8.733086,3.129260,-0.375356,-0.582563,3.717557,4.298564,1.123177,3.691952,3.790638,-5.014415,3.363202,3.220453,-9.035204,6.714914,-0.627620,7.822107,0.294636,1.207872,2.936221,5.790052,2.425467,-8.781632,-1.568039,0.176218,-1.295398,-4.896643,-1.571594,-5.336920,5.841882,-3.633790,9.915590,5.124199,-6.319309,-0.391102,9.132868,-9.849448,-9.572741,4.215871,3.887344,-1.814122,-3.684985,2.974988,-6.354340,1.930991,-4.461529,9.199462,3.702806,-5.617508,5.348806,2.885500,-4.265338,-4.802609,-9.335693,7.878705,-9.133954,0.439068,7.283994,4.704356,-2.584000,2.166222,6.897139,-8.801472,-6.189700,-0.856234,8.485607,-1.550021,-5.340646,5.308877,-2.647817,-6.113082,-2.024671,-1.476890,-7.766231,-9.661923,-1.402761,4.899622,-2.222841,9.650264,-9.184992,2.312087,1.596384,-6.233197,-0.709459,2.516580,-6.108970,7.836954,5.472617,-9.967877,-1.398107,6.569499,1.405330,-8.148704,-0.081055,-0.997478,9.370502,3.492617,1.282046,-3.842378,2.148787,-8.069640,6.659306,-9.836949,0.252385,3.706526,8.901911,0.808560,5.588364,9.584601,4.018360,4.464188,6.974986,7.140350,-6.538759,-4.519665,8.716616,4.085287,-9.850988,-7.848582,4.790243,1.400620,-5.515263,9.098069,-7.462493,0.295592,-8.868162,7.139892,6.649432,-0.818272,-1.361738,5.327735,4.045967,8.479810,3.228316,-5.811283,0.572072,1.342645,-7.733437,9.546936,3.214285,-2.805579,2.308686], dtype = "float64")#candidate|455|(252,)|const|float64
call_453 = func_49_call(relay.reshape(var_454.astype('float64'), [1, 9, 2]), relay.reshape(const_455.astype('float64'), [14, 9, 2]), )
call_456 = func_49_call(relay.reshape(var_454.astype('float64'), [1, 9, 2]), relay.reshape(const_455.astype('float64'), [14, 9, 2]), )
uop_457 = relay.sigmoid(call_453.astype('float32')) # shape=(14, 9, 2)
uop_459 = relay.sigmoid(call_456.astype('float32')) # shape=(14, 9, 2)
func_61_call = mod.get_global_var('func_61')
func_63_call = mutated_mod.get_global_var('func_63')
var_461 = relay.var("var_461", dtype = "float32", shape = (968,))#candidate|461|(968,)|var|float32
call_460 = func_61_call(relay.reshape(var_461.astype('float32'), [11, 11, 8]))
call_462 = func_61_call(relay.reshape(var_461.astype('float32'), [11, 11, 8]))
uop_465 = relay.acosh(uop_457.astype('float32')) # shape=(14, 9, 2)
uop_467 = relay.acosh(uop_459.astype('float32')) # shape=(14, 9, 2)
bop_468 = relay.less(uop_465.astype('bool'), relay.reshape(uop_457.astype('bool'), relay.shape_of(uop_465))) # shape=(14, 9, 2)
bop_471 = relay.less(uop_467.astype('bool'), relay.reshape(uop_459.astype('bool'), relay.shape_of(uop_467))) # shape=(14, 9, 2)
var_472 = relay.var("var_472", dtype = "bool", shape = (14, 9, 2))#candidate|472|(14, 9, 2)|var|bool
bop_473 = relay.power(bop_468.astype('float32'), relay.reshape(var_472.astype('float32'), relay.shape_of(bop_468))) # shape=(14, 9, 2)
bop_476 = relay.power(bop_471.astype('float32'), relay.reshape(var_472.astype('float32'), relay.shape_of(bop_471))) # shape=(14, 9, 2)
uop_477 = relay.sqrt(uop_457.astype('float32')) # shape=(14, 9, 2)
uop_479 = relay.sqrt(uop_459.astype('float32')) # shape=(14, 9, 2)
output = relay.Tuple([bop_431,call_442,const_443,call_446,var_447,call_450,const_451,var_454,const_455,call_460,var_461,bop_473,uop_477,])
output2 = relay.Tuple([bop_431,call_444,const_443,call_448,var_447,call_452,const_451,var_454,const_455,call_462,var_461,bop_476,uop_479,])
func_482 = relay.Function([var_429,var_430,var_447,var_454,var_461,var_472,], output)
mod['func_482'] = func_482
mod = relay.transform.InferType()(mod)
mutated_mod['func_482'] = func_482
mutated_mod = relay.transform.InferType()(mutated_mod)
func_482_call = mutated_mod.get_global_var('func_482')
var_484 = relay.var("var_484", dtype = "float32", shape = (1, 5))#candidate|484|(1, 5)|var|float32
var_485 = relay.var("var_485", dtype = "float32", shape = (6, 5))#candidate|485|(6, 5)|var|float32
var_486 = relay.var("var_486", dtype = "float32", shape = (81,))#candidate|486|(81,)|var|float32
var_487 = relay.var("var_487", dtype = "float64", shape = (18,))#candidate|487|(18,)|var|float64
var_488 = relay.var("var_488", dtype = "float32", shape = (968,))#candidate|488|(968,)|var|float32
var_489 = relay.var("var_489", dtype = "bool", shape = (14, 9, 2))#candidate|489|(14, 9, 2)|var|bool
call_483 = func_482_call(var_484,var_485,var_486,var_487,var_488,var_489,)
output = call_483
func_490 = relay.Function([var_484,var_485,var_486,var_487,var_488,var_489,], output)
mutated_mod['func_490'] = func_490
mutated_mod = relay.transform.InferType()(mutated_mod)
var_572 = relay.var("var_572", dtype = "float32", shape = (7, 6, 4))#candidate|572|(7, 6, 4)|var|float32
uop_573 = relay.log2(var_572.astype('float32')) # shape=(7, 6, 4)
func_72_call = mod.get_global_var('func_72')
func_75_call = mutated_mod.get_global_var('func_75')
const_576 = relay.const([-2.454048,4.815550,6.069077,-1.607000,1.261373,-3.841126,-1.212374,9.250587,6.630171,1.192064,-4.320616,3.220751,9.984495,7.562129,3.010671,-7.666932,7.028772,5.429306,-6.194040,3.010164,-4.481234,1.306085,8.882792,-4.211748,-5.334196,-1.691029,3.693753,2.476580,0.241618,9.463889,2.792791,-1.570320,2.169634,7.893362,3.372153,-6.927410,-5.576795,4.355581,-5.688084,-1.756635,6.272824,4.187109,-8.440804,6.128971,-0.468058,-4.007503,-0.551315,-9.613724,-8.800316,-1.578628,-4.714826,-5.463453,-2.417955,3.399058,6.021544,-3.492295,-0.875946,2.235591,-9.885546,-5.293271,-1.824101,-6.754545,-8.936350,-7.072588,6.386813,-6.860819,3.109600,-0.549749,-4.136317,2.352490,-4.050460,1.303031,8.824629,5.398858,8.464688,-7.329734,1.208587,8.264238,-7.573361,-2.797363,-8.597381], dtype = "float32")#candidate|576|(81,)|const|float32
call_575 = func_72_call(relay.reshape(const_576.astype('float32'), [9, 3, 3]))
call_577 = func_72_call(relay.reshape(const_576.astype('float32'), [9, 3, 3]))
bop_580 = relay.greater(uop_573.astype('bool'), relay.reshape(var_572.astype('bool'), relay.shape_of(uop_573))) # shape=(7, 6, 4)
bop_584 = relay.greater_equal(bop_580.astype('bool'), relay.reshape(var_572.astype('bool'), relay.shape_of(bop_580))) # shape=(7, 6, 4)
var_588 = relay.var("var_588", dtype = "float32", shape = (81,))#candidate|588|(81,)|var|float32
bop_589 = relay.minimum(const_576.astype('uint8'), relay.reshape(var_588.astype('uint8'), relay.shape_of(const_576))) # shape=(81,)
uop_596 = relay.cos(bop_580.astype('float64')) # shape=(7, 6, 4)
bop_603 = relay.bitwise_and(uop_596.astype('uint16'), relay.reshape(uop_573.astype('uint16'), relay.shape_of(uop_596))) # shape=(7, 6, 4)
bop_608 = relay.multiply(uop_573.astype('float64'), relay.reshape(bop_603.astype('float64'), relay.shape_of(uop_573))) # shape=(7, 6, 4)
bop_615 = relay.not_equal(bop_608.astype('bool'), relay.reshape(bop_584.astype('bool'), relay.shape_of(bop_608))) # shape=(7, 6, 4)
bop_618 = relay.bitwise_or(uop_596.astype('uint8'), relay.reshape(bop_580.astype('uint8'), relay.shape_of(uop_596))) # shape=(7, 6, 4)
output = relay.Tuple([call_575,bop_589,bop_615,bop_618,])
output2 = relay.Tuple([call_577,bop_589,bop_615,bop_618,])
func_623 = relay.Function([var_572,var_588,], output)
mod['func_623'] = func_623
mod = relay.transform.InferType()(mod)
mutated_mod['func_623'] = func_623
mutated_mod = relay.transform.InferType()(mutated_mod)
func_623_call = mutated_mod.get_global_var('func_623')
var_625 = relay.var("var_625", dtype = "float32", shape = (7, 6, 4))#candidate|625|(7, 6, 4)|var|float32
var_626 = relay.var("var_626", dtype = "float32", shape = (81,))#candidate|626|(81,)|var|float32
call_624 = func_623_call(var_625,var_626,)
output = call_624
func_627 = relay.Function([var_625,var_626,], output)
mutated_mod['func_627'] = func_627
mutated_mod = relay.transform.InferType()(mutated_mod)
var_668 = relay.var("var_668", dtype = "float32", shape = (2, 11))#candidate|668|(2, 11)|var|float32
var_669 = relay.var("var_669", dtype = "float32", shape = (2, 11))#candidate|669|(2, 11)|var|float32
bop_670 = relay.floor_divide(var_668.astype('float32'), relay.reshape(var_669.astype('float32'), relay.shape_of(var_668))) # shape=(2, 11)
bop_685 = relay.greater(bop_670.astype('bool'), relay.reshape(var_668.astype('bool'), relay.shape_of(bop_670))) # shape=(2, 11)
output = relay.Tuple([bop_685,])
output2 = relay.Tuple([bop_685,])
func_699 = relay.Function([var_668,var_669,], output)
mod['func_699'] = func_699
mod = relay.transform.InferType()(mod)
mutated_mod['func_699'] = func_699
mutated_mod = relay.transform.InferType()(mutated_mod)
func_699_call = mutated_mod.get_global_var('func_699')
var_701 = relay.var("var_701", dtype = "float32", shape = (2, 11))#candidate|701|(2, 11)|var|float32
var_702 = relay.var("var_702", dtype = "float32", shape = (2, 11))#candidate|702|(2, 11)|var|float32
call_700 = func_699_call(var_701,var_702,)
output = call_700
func_703 = relay.Function([var_701,var_702,], output)
mutated_mod['func_703'] = func_703
mutated_mod = relay.transform.InferType()(mutated_mod)
var_705 = relay.var("var_705", dtype = "int64", shape = (4, 7, 6))#candidate|705|(4, 7, 6)|var|int64
var_706 = relay.var("var_706", dtype = "int64", shape = (4, 7, 6))#candidate|706|(4, 7, 6)|var|int64
bop_707 = relay.greater_equal(var_705.astype('bool'), relay.reshape(var_706.astype('bool'), relay.shape_of(var_705))) # shape=(4, 7, 6)
output = relay.Tuple([bop_707,])
output2 = relay.Tuple([bop_707,])
func_710 = relay.Function([var_705,var_706,], output)
mod['func_710'] = func_710
mod = relay.transform.InferType()(mod)
mutated_mod['func_710'] = func_710
mutated_mod = relay.transform.InferType()(mutated_mod)
func_710_call = mutated_mod.get_global_var('func_710')
var_712 = relay.var("var_712", dtype = "int64", shape = (4, 7, 6))#candidate|712|(4, 7, 6)|var|int64
var_713 = relay.var("var_713", dtype = "int64", shape = (4, 7, 6))#candidate|713|(4, 7, 6)|var|int64
call_711 = func_710_call(var_712,var_713,)
output = call_711
func_714 = relay.Function([var_712,var_713,], output)
mutated_mod['func_714'] = func_714
mutated_mod = relay.transform.InferType()(mutated_mod)
var_733 = relay.var("var_733", dtype = "int8", shape = (7, 13))#candidate|733|(7, 13)|var|int8
var_734 = relay.var("var_734", dtype = "int8", shape = (7, 13))#candidate|734|(7, 13)|var|int8
bop_735 = relay.less_equal(var_733.astype('bool'), relay.reshape(var_734.astype('bool'), relay.shape_of(var_733))) # shape=(7, 13)
func_699_call = mod.get_global_var('func_699')
func_703_call = mutated_mod.get_global_var('func_703')
const_741 = relay.const([[-5.762083,-0.892842,3.792974,-1.367401,-3.208173,-1.195682,-0.962877,-2.242297,6.879661,-6.119956,-3.682710,1.305269,4.993484,-1.477606,-3.210025,-7.251560,2.999859,-2.377315,0.387916,4.517596,6.513045,-7.509288]], dtype = "float32")#candidate|741|(1, 22)|const|float32
call_740 = relay.TupleGetItem(func_699_call(relay.reshape(const_741.astype('float32'), [2, 11]), relay.reshape(const_741.astype('float32'), [2, 11]), ), 0)
call_742 = relay.TupleGetItem(func_703_call(relay.reshape(const_741.astype('float32'), [2, 11]), relay.reshape(const_741.astype('float32'), [2, 11]), ), 0)
output = relay.Tuple([bop_735,call_740,const_741,])
output2 = relay.Tuple([bop_735,call_742,const_741,])
func_744 = relay.Function([var_733,var_734,], output)
mod['func_744'] = func_744
mod = relay.transform.InferType()(mod)
var_745 = relay.var("var_745", dtype = "int8", shape = (7, 13))#candidate|745|(7, 13)|var|int8
var_746 = relay.var("var_746", dtype = "int8", shape = (7, 13))#candidate|746|(7, 13)|var|int8
output = func_744(var_745,var_746,)
func_747 = relay.Function([var_745,var_746,], output)
mutated_mod['func_747'] = func_747
mutated_mod = relay.transform.InferType()(mutated_mod)
var_790 = relay.var("var_790", dtype = "float64", shape = (8,))#candidate|790|(8,)|var|float64
uop_791 = relay.rsqrt(var_790.astype('float64')) # shape=(8,)
bop_793 = relay.add(var_790.astype('uint32'), relay.reshape(uop_791.astype('uint32'), relay.shape_of(var_790))) # shape=(8,)
bop_799 = relay.subtract(var_790.astype('float32'), relay.reshape(bop_793.astype('float32'), relay.shape_of(var_790))) # shape=(8,)
func_61_call = mod.get_global_var('func_61')
func_63_call = mutated_mod.get_global_var('func_63')
const_804 = relay.const([-0.761616,-1.587636,-0.017314,2.341791,-4.940594,3.971366,-6.992275,-0.035156,7.420249,-5.656447,-2.066042,2.674013,4.076859,6.811299,-2.137473,4.381027,4.115204,-1.575333,-2.425314,7.865231,7.868832,3.141024,3.548491,6.075658,0.020364,9.845965,8.248913,-8.314658,2.815341,5.067015,0.750759,-6.799495,-4.674111,-2.561273,-6.877524,9.028101,7.272127,9.946925,0.490866,5.459157,3.009166,-4.082614,3.913575,0.991494,-7.607272,-1.446856,6.359459,-7.271674,3.831231,3.651391,-7.057425,0.996584,4.302659,5.596156,4.356907,-3.025035,1.725237,6.950201,0.932418,-1.210243,6.897096,6.486832,6.996867,3.342891,1.395163,6.719554,8.156468,6.165084,7.300470,2.353163,4.830343,9.123463,-6.478729,9.729411,-6.036113,1.727598,-4.780554,-1.817539,-2.777398,-7.061033,-6.699041,-2.270096,-6.802882,5.187408,-1.434770,-2.244330,-3.242024,-1.554605,-2.275134,-0.670148,9.107095,-3.081788,-9.006847,-3.213011,-0.550481,-9.886617,-1.492094,9.126334,-9.091642,-0.137019,3.524435,-1.937299,7.846570,5.793617,-1.930068,-3.210071,3.069584,0.795370,0.951425,3.046925,-8.985363,5.793649,-9.081188,2.539622,5.216839,6.359304,-1.887639,-2.432877,-9.798273,8.741298,2.543351,6.650700,0.955069,-7.601583,-3.067615,-8.526975,-1.289133,4.276962,-5.844341,2.106251,-4.488210,9.333239,0.650231,-3.224414,8.677717,-1.559946,8.157238,6.021132,2.311993,-1.517934,6.282084,-6.573471,-5.658031,-0.986789,8.707085,-8.017757,-4.675381,-3.969166,3.077807,-8.432811,9.497706,1.722803,-1.402482,7.879987,-3.744517,0.631612,-5.849184,4.378607,0.009456,-6.482345,-1.118808,-9.462206,-1.913750,-2.835868,-0.684816,-9.970611,3.148473,-7.060755,-0.871573,5.336139,1.452143,0.494061,9.370539,-3.156895,-8.307328,1.774873,4.992870,-1.742778,-2.336376,5.693129,9.858400,-9.405873,4.950117,-3.836271,-1.739251,1.667301,-2.318848,-1.833557,1.673132,-1.371780,9.943139,-1.803167,1.988546,-9.371873,2.034684,-1.415899,1.902379,-6.215706,-4.503762,-5.631355,-2.771369,-0.208270,-9.343443,-3.758114,-6.537865,-0.272815,-3.736894,-2.752880,1.527359,-9.658248,3.913110,0.247174,0.884831,6.075238,-8.829046,4.312802,7.064909,9.475041,-4.257013,-9.180608,-9.076091,-0.137017,9.438124,-8.519010,8.591478,-3.721290,-1.649435,3.501530,5.159313,5.045092,-3.042760,-9.925232,-0.500908,-9.720357,-6.158922,4.916836,4.314216,7.639208,3.702984,3.645555,-0.603836,5.404747,1.167861,8.711016,7.556944,-5.423260,4.841976,-4.297891,-6.094341,-7.098086,3.243666,6.667500,9.527261,3.344629,-1.661096,4.094948,-4.716666,7.508681,3.554427,-0.617779,8.019233,-0.805909,-0.956211,8.377229,4.402872,4.234621,8.635862,1.510094,4.336377,9.679023,6.999253,4.457273,6.983017,3.132825,8.308293,-1.174883,-4.948009,9.183137,5.769061,2.238122,-1.090805,8.307804,7.583785,-1.473952,5.379717,2.911832,-7.705125,4.164437,2.475920,-2.948354,-9.090602,-5.995088,2.440123,5.247517,-4.928611,-0.296883,5.885763,-4.874861,-4.426581,-8.284496,9.421293,5.604412,-8.050356,0.505032,8.990467,-4.979097,-1.122823,5.597406,-5.020489,-1.189923,5.625907,9.158724,-5.261969,-9.354306,-8.860763,3.122794,-9.591523,5.439711,9.911406,-8.309085,-9.012438,-9.155816,6.366872,-5.412221,6.307681,-6.069136,6.633813,5.715626,-4.313218,2.862496,-4.451731,-9.405746,3.566623,1.767406,-7.519398,9.201831,-8.765461,-9.300453,3.065663,5.052159,8.854057,-4.529991,6.481139,7.006890,5.547815,-3.448377,4.767667,-8.943391,-0.828957,6.991127,8.007842,7.817492,-8.157040,-7.681266,3.496738,-5.751439,1.053712,6.345177,2.114716,-6.976391,6.122323,-5.953701,7.116302,2.401870,7.449569,2.874111,-2.564701,-8.847111,-1.647811,-2.273054,3.988145,-0.110460,5.184331,3.572108,-4.510873,4.425888,0.648010,-6.579170,-1.892694,-9.768932,-5.685948,3.238238,5.759741,-5.721047,-3.625009,2.374762,3.614840,-7.418375,2.208750,3.075434,-1.263758,-3.683251,8.066004,-8.086467,-4.552039,7.716202,-2.496480,6.752589,-2.126515,5.689786,8.179242,-8.202108,4.697760,7.093742,1.035595,-7.774310,-5.979780,1.294427,-1.415737,9.888304,-7.646489,2.599273,4.687876,-7.075671,-5.659865,-9.297000,-8.730837,0.210805,-5.294039,9.995139,3.931573,7.983253,-1.526335,4.227824,-2.206485,9.403770,6.501315,-0.532044,-1.937685,2.682486,-9.328169,-8.347837,-1.260342,-2.773473,-4.121735,-6.442329,-8.220757,5.459028,-8.657531,6.392119,-0.083066,-4.987878,5.338762,-1.469731,3.402638,2.794370,-8.045441,2.166913,5.434508,2.641269,0.729971,3.710422,9.516721,-6.876651,-3.203483,-5.209731,-9.274515,-4.598814,7.731033,4.255098,-8.045666,5.447451,-3.810520,-3.310884,-4.267590,-1.797771,0.753990,7.653555,-1.512337,4.783789,8.469679,0.258866,-1.192257,-4.515339,9.537825,-3.001060,-8.358688,-6.502390,-9.619866,-9.489512,-0.761167,-4.479312,-9.425468,-9.388854,8.074545,8.731150,9.093324,3.256013,5.675018,-0.930586,6.001557,-5.176496,-6.239974,8.900059,5.555518,4.478328,-4.487259,-9.097836,-0.096828,7.136859,-0.475537,-6.625858,-4.882854,8.684026,4.996002,-4.520881,-3.885302,-4.131701,1.537699,-3.502592,9.587226,-4.840201,3.137476,0.672158,6.844040,-3.475639,0.464025,6.963829,-2.208645,5.561639,-7.377775,-2.960843,0.683695,3.842552,-5.321037,2.447384,-7.250239,4.865027,-7.489275,5.006839,-3.578361,5.566541,-6.811867,4.708074,5.329320,9.281859,-9.579454,0.774129,-7.935056,-5.386303,-1.620377,8.492762,4.594811,-4.182631,3.631245,3.330008,1.870800,5.380329,0.758056,-7.538755,-4.707359,2.948043,-2.243173,-5.778361,9.177138,3.853183,-9.334890,-6.609997,-8.532865,-3.887572,-1.502273,8.193057,-3.282165,-2.634945,4.564365,6.773520,-7.816581,-7.062055,4.726062,8.723737,2.762045,-0.289070,1.984975,7.030468,8.023078,8.362886,9.353745,-6.750714,-1.465445,8.934933,1.212275,3.677132,5.363745,-2.840345,-8.071117,-1.331729,1.481589,6.735370,0.794471,-1.778246,-4.602795,5.761252,-7.379028,-3.815276,-8.789688,-8.632112,-9.853635,8.626941,8.714927,-4.658531,4.561340,7.150231,4.289298,-6.133200,9.293059,1.846555,-1.610039,3.390058,-8.125798,1.680453,0.832720,3.095811,5.404925,-5.304113,-5.290895,-7.172268,3.968132,-3.937060,0.834485,1.537479,1.537840,-0.891851,2.655992,-2.209300,8.340150,-7.520435,8.888167,-5.683249,-9.997482,6.692002,2.728212,1.739782,1.557275,5.538699,-9.043998,6.578744,-1.501422,5.453605,2.620051,1.211366,-9.258381,-6.951485,7.269939,-6.404202,1.235678,2.527269,-2.470939,2.157638,-6.215792,-7.897083,0.533817,8.409330,3.943347,-3.058478,-9.532646,-2.985008,9.834742,0.886036,8.030270,1.120895,1.411425,-9.845024,5.537651,-3.193150,-3.330609,-2.229416,-7.473964,2.476222,-6.296912,2.004926,-4.436704,4.505820,-7.453731,-9.668351,5.119288,-1.666530,-9.846456,-2.743342,-6.937595,-8.915205,5.533992,-1.263778,-2.489421,7.321067,1.438661,7.333426,-0.642064,-2.612289,4.899901,8.513792,-8.537958,-7.442188,-7.536272,-9.345573,4.385203,5.509037,4.066857,-9.653920,-4.257171,-9.231785,-1.978855,4.305484,8.368549,1.066567,-2.239899,9.827013,-7.742526,-2.222129,-0.299100,9.519167,2.701509,-8.318237,4.100183,-9.315505,-8.054238,2.485678,-4.949942,-0.645239,-2.905001,9.859668,-1.334238,0.470457,-5.281993,2.103968,-2.285260,-3.300978,4.604361,-6.268798,9.285010,-1.181056,-2.663351,6.660507,-9.587366,-3.871191,6.670965,-9.482147,-6.977136,8.179050,9.360249,8.479012,8.789591,5.068028,-7.632974,3.450588,-8.559267,4.147493,-9.685432,5.094073,-5.432380,7.733428,5.576817,8.907734,-7.830599,-6.006572,7.540001,6.633468,4.371437,-8.197710,4.165239,-6.518012,5.733858,-7.474933,-1.807686,2.646226,9.864116,-2.033548,-7.808048,-6.111900,-1.167236,-7.583902,-3.289914,7.572109,-7.133064,1.913779,8.819008,2.142483,0.162631,-8.164611,5.866646,4.299863,4.783971,-2.750993,6.143223,-7.790582,0.525209,-7.382480,-6.657035,-6.132518,0.699981,-6.416896,7.546498,9.546998,4.127217,-0.307736,3.944756,0.684650,8.281315,-3.040811,-3.905090,1.876185,3.208274,8.966146,1.171560,-1.605463,8.589815,9.232663,-4.509702,-2.870078,6.620282,7.832150,-5.820996,4.006692,-9.287191,-4.650755,-8.343329,-4.560942,2.335613,6.471053,5.723792,6.798839,0.367708,6.643699,-7.556469,2.480629,-3.641134,-1.274954,-7.552565,4.820077,-6.634104,8.813325,8.483145,-8.356659,-9.662200,4.595074,-4.790738,-5.388338,8.026817,8.013091,5.853641,5.475126,9.789182,-8.530720,3.068024,-7.150686,-2.243374,-3.820214,-1.227471,-2.558243,7.780474,-0.705895,9.130452,2.307821,6.745140,-6.398528,7.962776,-4.391345,8.869245,-5.371284,-8.674457,-2.519410,3.017164,-5.180325,-3.274867,-9.649786,-7.413236,9.818874,2.276088,8.537284,3.826312,-1.728044,8.147894,-1.851256,5.146613,-4.662527,0.026927,-5.836690,7.476606,-3.228384,-3.005859,0.553164,-6.378891,-9.593550,6.270080,-6.249075,2.576538,-4.481011,6.236143,9.624773,5.547835,2.382690,2.328947,6.731405,-4.790433,-4.974259,-1.974063,-1.056049,-4.274456,5.743472,-5.194103,-3.757497,-1.926604,-8.687418,0.639261,-1.005955,0.685112,-7.903893,-6.585625,-1.036696,6.526801,2.500295,-0.767192,-2.654973,-1.271289,3.919735,2.825088,-4.457198,-6.249281,-0.333915,-6.396985,-5.765117,-4.213738,-3.985278,3.641059,9.560949,0.869112,-5.282112,-0.830362,-8.170424,-2.492056,1.293572,-1.446486,3.270869,1.040629,-0.177995,3.515407,9.327035,5.307076,-1.922492,-9.086100,-8.277858,-3.449712,-2.423615,5.157772,4.510453,-5.386988,-8.781839,-7.243723,5.311431,7.715823,2.269119,-3.394572,-4.343521,3.970614,-1.144761,-9.480426,1.627701,-1.585678,-2.225478,6.648733,8.912347,-7.183565,-4.214360,-9.011414,-9.731628,0.306939,-2.162840,4.847826,-7.170426], dtype = "float32")#candidate|804|(968,)|const|float32
call_803 = func_61_call(relay.reshape(const_804.astype('float32'), [11, 11, 8]))
call_805 = func_61_call(relay.reshape(const_804.astype('float32'), [11, 11, 8]))
func_49_call = mod.get_global_var('func_49')
func_52_call = mutated_mod.get_global_var('func_52')
const_822 = relay.const([-7.883421,-0.473626,0.943610,6.543614,1.771034,9.033983,9.652879,7.308711,-8.953384,5.651301,8.428058,-8.671434,5.778592,-0.174452,1.019802,-3.849997,0.196967,0.673419], dtype = "float64")#candidate|822|(18,)|const|float64
const_823 = relay.const([7.676803,4.726091,-8.773365,-5.717675,5.892238,-3.326516,7.633660,4.314223,-4.444041,-0.897646,-7.165126,-9.073071,1.361854,-5.246137,-4.283698,9.081251,-2.744248,9.062809,-7.735085,7.449953,3.124566,-9.326826,-0.938980,-3.681983,-0.198165,-4.065182,9.653549,-4.362535,2.046436,5.456842,-4.764888,9.030244,4.424108,-5.106142,-7.535899,-5.050848,7.062458,6.125365,-2.119775,-9.485431,-8.425372,5.335867,6.433105,-4.816191,-5.468638,7.650499,0.168436,8.134801,5.692801,-9.024529,-2.563324,5.076432,9.469067,0.241240,-1.172011,-5.631552,3.882640,-7.189822,-0.511697,0.632046,7.918042,6.538111,2.224036,3.766136,-3.422889,1.776490,-9.304125,-0.214555,8.800257,5.507415,-6.742603,-9.380545,8.940721,-7.526944,1.441537,-3.388902,-6.422171,2.551559,0.596064,-3.952047,-1.745198,-9.621416,6.880408,7.565778,-2.763778,-1.831854,-8.071360,-8.517083,-1.922162,4.516488,-5.774334,-9.821688,-7.467586,1.788453,-4.480410,2.106445,3.606414,-4.891494,9.074022,2.316957,-3.682542,-8.516805,-6.112493,3.832145,4.795151,-8.544494,-3.300116,7.357414,5.783844,-9.917665,-3.479131,-0.024420,1.051330,-0.376776,-7.007676,3.614464,-3.478945,-6.531508,-3.624448,1.962865,-4.872097,-7.675041,-6.762911,5.452637,-9.628961,5.883811,-5.038594,-2.807742,-3.342099,-0.620289,-7.247493,-4.272016,5.467868,8.961391,-4.899015,9.553202,-1.304771,9.776972,5.380652,-8.867350,5.217288,5.141997,-8.297540,1.425751,-8.390951,6.071812,3.514443,7.175728,-6.685777,9.702000,7.467438,-2.252792,-8.777446,-2.894679,-6.057865,2.240182,8.611736,3.685974,-8.089649,-7.977575,-5.316039,9.191327,2.404194,-6.810058,0.046605,-2.663546,7.342866,-6.420955,1.502473,7.090405,-8.717406,7.719851,5.045218,5.179916,3.187527,2.868339,9.835066,-2.255708,3.234519,5.355486,-5.217200,-3.711860,-3.794237,9.704335,3.501157,3.338199,3.403538,1.469361,-9.545960,-2.655011,7.568085,2.387140,-3.082961,2.055398,4.084612,-6.428896,9.496639,4.748509,8.551714,1.870646,7.512070,-3.576595,2.689161,-8.305914,-7.515204,4.117513,-8.848859,9.798053,-5.946200,-5.217350,2.589206,0.602446,2.498527,-4.403087,6.119738,-5.953712,-8.582282,8.897777,-9.690591,0.423819,-1.051896,-2.439981,-7.544881,0.336319,2.319316,-6.211355,-4.899243,2.468529,-5.179924,5.664274,7.916720,-8.700376,-6.319540,8.268153,4.033091,-3.017897,8.382826,-3.818420,-6.489273,5.814152,-1.342360,-2.382599,8.499677,-5.168230,2.478838,-4.548077,3.513193,-0.108732,-6.099215,1.454562,6.973811,-9.789291], dtype = "float64")#candidate|823|(252,)|const|float64
call_821 = func_49_call(relay.reshape(const_822.astype('float64'), [1, 9, 2]), relay.reshape(const_823.astype('float64'), [14, 9, 2]), )
call_824 = func_49_call(relay.reshape(const_822.astype('float64'), [1, 9, 2]), relay.reshape(const_823.astype('float64'), [14, 9, 2]), )
uop_825 = relay.asinh(uop_791.astype('float32')) # shape=(8,)
bop_838 = relay.logical_xor(uop_825.astype('uint32'), relay.reshape(bop_793.astype('uint32'), relay.shape_of(uop_825))) # shape=(8,)
uop_841 = relay.rsqrt(bop_838.astype('float64')) # shape=(8,)
output = relay.Tuple([bop_799,call_803,const_804,call_821,const_822,const_823,uop_841,])
output2 = relay.Tuple([bop_799,call_805,const_804,call_824,const_822,const_823,uop_841,])
func_848 = relay.Function([var_790,], output)
mod['func_848'] = func_848
mod = relay.transform.InferType()(mod)
mutated_mod['func_848'] = func_848
mutated_mod = relay.transform.InferType()(mutated_mod)
var_849 = relay.var("var_849", dtype = "float64", shape = (8,))#candidate|849|(8,)|var|float64
func_848_call = mutated_mod.get_global_var('func_848')
call_850 = func_848_call(var_849)
output = call_850
func_851 = relay.Function([var_849], output)
mutated_mod['func_851'] = func_851
mutated_mod = relay.transform.InferType()(mutated_mod)
var_882 = relay.var("var_882", dtype = "float32", shape = (2, 16, 5))#candidate|882|(2, 16, 5)|var|float32
uop_883 = relay.atan(var_882.astype('float32')) # shape=(2, 16, 5)
bop_886 = relay.minimum(uop_883.astype('int64'), relay.reshape(var_882.astype('int64'), relay.shape_of(uop_883))) # shape=(2, 16, 5)
bop_892 = relay.mod(var_882.astype('float64'), relay.reshape(uop_883.astype('float64'), relay.shape_of(var_882))) # shape=(2, 16, 5)
output = relay.Tuple([bop_886,bop_892,])
output2 = relay.Tuple([bop_886,bop_892,])
func_898 = relay.Function([var_882,], output)
mod['func_898'] = func_898
mod = relay.transform.InferType()(mod)
var_899 = relay.var("var_899", dtype = "float32", shape = (2, 16, 5))#candidate|899|(2, 16, 5)|var|float32
output = func_898(var_899)
func_900 = relay.Function([var_899], output)
mutated_mod['func_900'] = func_900
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1055 = relay.var("var_1055", dtype = "float32", shape = (9, 9, 7))#candidate|1055|(9, 9, 7)|var|float32
uop_1056 = relay.cos(var_1055.astype('float32')) # shape=(9, 9, 7)
func_391_call = mod.get_global_var('func_391')
func_395_call = mutated_mod.get_global_var('func_395')
var_1059 = relay.var("var_1059", dtype = "int32", shape = (154,))#candidate|1059|(154,)|var|int32
var_1060 = relay.var("var_1060", dtype = "int32", shape = (1540,))#candidate|1060|(1540,)|var|int32
const_1061 = relay.const([-3.376341,-7.134232,3.257693,-4.318312,3.086571,4.965329,1.879576,2.678937,0.297035,5.368495,-1.219683,-1.278861,5.081878,1.565736,6.065689,-8.886676,-7.108024,-2.485308,-2.832034,-8.133102,3.457021,-8.369025,-9.898130,-8.362187,-2.389872,-5.894228,1.040800,6.713508,-3.721080,1.894817,-4.075614,-0.686918,-9.959500,-9.618801,8.400620,-8.898477,0.906478,4.978710,-0.498224,0.541339,9.318855,-9.113379,-3.135355,6.589902,-2.476359,7.876083,-5.181343,-7.077777,-3.591037,9.256004,4.256949,-7.806971,-0.705435,2.097416,8.942616,4.919346,-8.642859,6.451448,-2.483277,2.248844,-7.111295,7.773134,-3.034474,3.739717,-0.536882,-5.515878,2.483567,-1.643580,-2.867738,-2.960916,5.806877,-7.948049,8.008651,-3.365301,-0.577531,1.823934,-8.925669,6.581291,-8.050621,7.652736,5.434052,-4.085524,-2.896734,-2.960536,-3.579720,3.852520,2.934118,4.043716,4.319134,-1.320591,-3.569320,-6.242180,-4.908246,5.239901,5.290264,6.162586,6.685404,9.652516,3.377082,-3.737260,-8.731553,4.271090,-7.044694,8.012865,-4.130726,2.238994,8.963156,-0.673900,-8.354949,-9.371711,-6.008848,-3.464566,3.279909,-2.587314,-7.489206,1.337340,-1.745880,-1.132156,3.054546,-3.513463,3.295828,-7.794147,-1.336458,-8.521547,9.236762,-4.179448,-1.643694,6.209338,-4.150680,-3.942934,-3.655992,3.436073,-6.881064,6.452043,8.848436,-2.921058,-7.460369,2.072382,3.356653,6.328732,-8.094740,-6.556346,-9.629552,1.570598,3.760640,3.540284,0.736163,-2.484382,-1.341605,8.337766,-5.455242,-2.561367,0.623713,7.033296,1.583412,1.129752,-1.821438,0.286777,6.104849,9.110184,-5.908244,-0.963691,9.017962,-2.677036,9.764335,-8.621112,8.933193,-7.067882,-0.635115,9.075281,-5.702458,-9.981899,-1.749829,0.198030,-5.435753,3.336200,-3.740643,-9.349834,-0.213352,8.368342,-5.064111,2.196105,9.561423,-2.214900,4.248641,9.961875,-0.078780,-7.958212,8.738542,-6.007530,-1.084569,4.880927,-8.727266,7.256906,-0.912532,-9.382612,-7.240307,-9.443542,8.578197,9.737303,-8.807813,-0.724353,-1.654602,2.344061,-4.709044,4.549842,8.495148,7.995295,-5.160598,1.268429,-6.117176,-6.628706,5.087621,-0.121860,6.565827,-0.228302,-0.191300,1.428482,9.273714,4.321555,-9.139461,1.830524,8.704541,4.720178,1.245780,-9.802815,-9.390391,-9.060113,8.516961,-5.069488,-6.676068,-6.153367,5.881862,-9.600479,-5.956489,0.364018,-4.369461,2.693515,6.666070,-2.241999,2.846320,-3.518872,4.981612,6.874438,6.741145,3.749564,-0.064021,4.347622,4.530031,1.900035,0.740426,1.371264,3.549475,3.842137,5.232934,4.965029,-5.303108,0.505035,-9.296811,-0.239353,-0.356220,1.186168,0.249028,6.651665,-3.786396,-3.211363,0.963823,-2.949883,-9.258704,3.806332,7.022249,-1.752768,9.850615,5.630927,9.484234,8.310462,9.091367,-8.991651,2.822250,-5.545830,-2.450013,5.792224,-2.340932,-5.294394,9.086949,-5.173820,-3.291827,-1.049771,-9.141216,1.332596,0.824459,-3.892752,-9.679485,1.083939,-8.101959,0.125830,5.690687,-2.288036,-3.212015,-6.153759,-4.146109,-6.189610,-4.102241,-3.017335,-5.961014,-4.080282,3.169651,6.535566,6.228644,2.338285,-1.955906,5.331516,-0.626611,5.456678,-0.058216,-7.287405,-4.720205,-1.692845,-9.201781,-5.643400,-5.360854,-7.036369,8.770376,5.305360,7.240443,-4.151909,-9.815273,9.883444,3.540682,5.450016,-3.410340,-5.228911,9.783422,5.513102,-9.148817,-9.095179,-9.344483,-2.203413,-8.007911,4.635267,-5.191452,9.890859,5.181998,3.730090,7.547255,-1.703915,9.614549,0.721171,0.571649,-2.506089,-2.716970,9.460969,5.509038,-3.528865,7.331685,9.422848,1.574236,-0.394311,5.821731,5.078711,1.797819,0.282406,-1.145249,7.747655,7.553239,9.558426,-7.206834,8.074014,-9.765963,-4.752821,4.018286,-8.411827,-3.209562,6.677686,-6.717620,8.916538,-3.471181,-6.354284,8.437863,3.790260,2.055645,-6.866415,6.799275,-3.683386,8.957301,3.655109,-8.836507,2.075363,4.742007,5.196195,8.070432,8.608604,5.636203,-9.150350,3.407084,8.590325,2.239565,-8.516040,6.474274,-0.175117,3.978403,2.202228,4.157631,6.716262,3.279459,3.036925,3.655269,9.672357,-6.615389,0.526627,4.999872,3.331297,-6.372203,2.494536,-5.529425,-4.925567,8.083086,0.085567,-7.779611,5.479424,7.440263,-3.863528,7.262943,2.089071,1.568288,7.966101,-7.777219,3.743600,9.391195,-9.444779,7.722864,6.928509,1.889460,6.124163,8.555709,0.461786,6.219531,7.166578,1.039121,5.263659,7.267415,8.579629,9.755106,-8.067071,9.293723,-6.607193,6.076441,-5.272774,-9.828741,-2.999611,-9.203410,3.728332,9.466540,1.388606,8.413420,-5.098387,9.460101,-3.147804,-4.115588,5.289434,-3.063716,-0.718541,-8.783650,-1.150850,0.074990,-5.105995,-3.152695,6.009933,6.013195,6.703329,2.083221,2.862792,7.767082,3.097648,7.471667,-4.636283,-8.784620,8.881057,9.505704,-9.957280,8.777654,-4.259793,-5.030348,4.762358,-6.809864,-7.242619,-1.284881,7.264439,-5.576633,-2.904276,0.220385,3.771013,1.717488,-2.689703,-1.150389,0.630853,-8.638939,6.987348,-3.310797,-0.148319,4.160977,-8.229485,-4.357657,-9.626118,0.120715,-2.410693,9.903199,-2.235240,5.150731,8.071098,5.183700,0.456621,-0.922269,-7.605109,0.196088,-1.732774,-2.462980,3.412203,-2.087840,4.684897,-1.857115,-7.165996,7.473096,-1.637631,-0.387177,-9.722280,2.903285,1.215944,-8.648517,-5.256765,-9.036767,0.073677,4.887492,8.586828,-2.503271,9.565667,4.415679,-5.946408,6.713929,7.555217,-3.196365,4.098175,4.093512,6.485474,5.066188,4.668119,-5.026871,-1.951896,9.386159,2.799190,-2.729213,-5.105904,9.432419,-6.593369,-8.855305,-8.687058,4.971035,-5.677144,-2.229178,-2.395017,2.452493,3.083976,-8.613940,3.685403,5.271196,3.060914,-8.441128,1.158550,-3.326426,-5.595171,3.555390,6.928385,-8.033693,3.987446,-8.461155,-7.424033,-8.011596,3.101907,4.523927,-9.754147,-2.892674,-1.923760,-2.605764,-1.177493,7.773366,3.271530,5.857157,9.460393,-4.461811,-7.075098,4.590145,-3.632680,-1.436242,-2.551776,-3.894634,-7.587620,7.761459,1.737927,8.003001,-7.752136,-6.327862,5.747741,0.888642,-2.852893,-3.033009,-7.283944,3.054002,9.459459,-3.088805,-3.193638,-1.622801,9.621234,9.600475,4.517464,-9.146197,-7.890275,4.728886,-9.372646,-1.833840,-8.908436,1.036099,-2.991195,6.104044,-9.132862,-1.110568,0.953097,-9.516543,-4.511869,8.900813,-6.114169,4.764445,3.964969,-5.627556,6.154213,-1.746264,0.810648,-0.811640,-0.498252,8.850759,-0.251499,4.257968,4.164242,-5.045028,-4.754959,9.614133,-5.598263,8.190651,-9.175585,6.949199,-6.823233,6.771793,-6.166939,-3.160334,-5.819409,9.273375,2.788153,-0.081261,-6.504624,-1.078766,-6.907412,3.586776,-5.176000,-6.348474,7.348582,0.433831,5.316971,0.159077,-3.986878,0.133786,-7.017091,5.768664,7.794306,-9.891771,2.486102,-3.720738,-6.778895,-5.544348,-2.615508,3.838883,-6.537543,-5.199438,-4.012495,5.348800,4.862559,5.241623,-2.664827,4.617633,-9.738926,2.576787,-2.123907,4.371491,-0.324733,1.094710,3.468291,-0.912480,9.670829,6.934132,-5.595501,4.307373,9.045161,2.344131,6.127567,-7.825095,-1.911907,6.609903,3.252908,-9.313722,-0.340402,9.360915,-3.717244,-9.867602,-2.799141,1.301647,-5.922561,-3.758273,0.253568,4.207162,-6.427249,-7.995121,-8.881525,1.978533,2.203320,5.451856,5.747574,0.721711,-4.527201,-7.568986,3.975929,0.253056,-8.026994,-8.086813,-2.270404,-7.883881,0.502726,2.596585,8.077170,9.213855,-5.855832,-3.033392,5.322487,-8.477605,2.643339,-8.020492,-9.832344,3.063122,6.038803,5.361189,1.379909,-7.931480,-3.307865,-9.201428,-9.843703,-4.792388,-3.446651,1.291770,-7.208921,9.862464,-4.451647,1.785899,-7.334273,7.118456,-6.422735,4.394039,-5.063047,-7.071861,5.539486,-0.471456,-8.513717,4.863634,-9.004421,2.245178,-9.921924,-9.000316,-2.862675,1.545659,-7.234871,3.246905,7.783386,2.347687,-7.394461,2.764402,-6.519828,-4.951039,-1.777144,-9.670808,-2.794796,-2.300089,-7.052251,8.338433,-8.587182,7.663889,5.307023,0.495382,3.861283,-7.201375,-4.352542,-2.540203,-0.693258,7.001681,-8.225934,3.907065,4.010927,4.814619,-8.453335,8.613132,4.556957,-0.933022,8.898809,-5.929477,-6.696080,-1.500631,-4.272725,0.135551,1.638513,2.930277,-7.283204,-4.928345,-8.271459,-9.442454,-3.224210,3.803124,-3.549944,-0.262221,6.331016,6.767719,-1.735101,-4.484108,-0.267548,0.750972,0.571444,4.286022,2.635303,4.752211,1.107928,-6.738644,2.164569,9.077178,3.906577,7.016930,-5.232180,-6.257900,1.547110,3.531370,2.687921,1.620771,-5.513358,-6.222464,0.076951,3.962472,9.715302,-8.270283,-6.899557,8.921209,-2.168465,-0.359587,0.470976,2.740781,-9.753367,-0.502183,3.590269,-5.707455,-2.936928,1.871149,-6.932924,-2.426079,-5.620388,5.072091,-0.432112,5.142901,3.850162,-5.428247,-8.475736,1.935861,-3.161738,-8.461788,-1.373093,6.842010,-9.171500,-6.575307,-0.331196,-3.416579,0.353284,5.974399,-3.617609,-1.535494,-1.258298,-0.646144,-1.209447,6.813112,3.428855,-8.749864,-2.390369,-8.438473,-5.157377,-7.987577,1.557774,-2.557383,-8.070793,1.198560,-2.864031,-5.490684,-6.475883,3.655115,6.196277,9.054291,8.871276,-0.330452,-6.397872,-9.592910,6.583820,5.666261,8.023001,8.179972,7.863309,5.911645,6.852655,-0.560856,-5.953292,-1.548382,2.191284,0.535167,-3.573476,-9.052257,-3.537170,4.689340,9.553348,1.134592,-4.965595,-0.388677,1.938047,7.834025,-6.153079,-7.450565,-6.141871,-9.531881,-5.382616,-7.381290,0.054266,7.657499,3.872494,8.703038,8.558868,5.736844,0.846118,8.723807,3.590499,7.559678,6.179633,3.200242,9.640565,9.581386,5.454313,-3.416631,-8.136025,-7.327957,-9.635888,9.471932,-1.899633,-8.211626,-3.559933,-6.456424,-4.104327,3.973217,1.884679,3.777361,-1.564138,2.087810,-5.105834], dtype = "float32")#candidate|1061|(968,)|const|float32
call_1058 = relay.TupleGetItem(func_391_call(relay.reshape(var_1059.astype('int32'), [1, 11, 14]), relay.reshape(var_1060.astype('int32'), [10, 11, 14]), relay.reshape(const_1061.astype('float32'), [968,]), ), 3)
call_1062 = relay.TupleGetItem(func_395_call(relay.reshape(var_1059.astype('int32'), [1, 11, 14]), relay.reshape(var_1060.astype('int32'), [10, 11, 14]), relay.reshape(const_1061.astype('float32'), [968,]), ), 3)
uop_1063 = relay.log2(uop_1056.astype('float64')) # shape=(9, 9, 7)
bop_1067 = relay.bitwise_and(uop_1063.astype('uint8'), relay.reshape(uop_1056.astype('uint8'), relay.shape_of(uop_1063))) # shape=(9, 9, 7)
func_744_call = mod.get_global_var('func_744')
func_747_call = mutated_mod.get_global_var('func_747')
const_1071 = relay.const([[7,-8,-2,4,2,1,-9,7,7,-8,-7,-3,-7,7,8,-3,-5,-10,1,-4,-3,-6,6,-6,5,2,-2,-4,1,-7,9,4,2,-10,7,-5,9,-3,-5,9,-4,4,3,4,-3,3,-10,5,-10,-2,9,9,1,4,-10,7,-2,-7,3,9,10,-10,-10,2,-2,-6,4,-8,7,2,-4,1,-2,-3,2,2,5,-4,-7,-4,5,-9,-7,-5,-10,4,-5,-10,-7,-3,6]], dtype = "int8")#candidate|1071|(1, 91)|const|int8
call_1070 = relay.TupleGetItem(func_744_call(relay.reshape(const_1071.astype('int8'), [7, 13]), relay.reshape(const_1071.astype('int8'), [7, 13]), ), 2)
call_1072 = relay.TupleGetItem(func_747_call(relay.reshape(const_1071.astype('int8'), [7, 13]), relay.reshape(const_1071.astype('int8'), [7, 13]), ), 2)
func_49_call = mod.get_global_var('func_49')
func_52_call = mutated_mod.get_global_var('func_52')
const_1080 = relay.const([-0.835780,5.539305,1.621791,-4.500665,-8.703876,-8.081789,5.508960,3.706886,-1.125600,-4.200960,4.827252,-2.564061,-4.987196,-5.613940,-4.722130,-9.439250,-5.935511,-1.569982], dtype = "float64")#candidate|1080|(18,)|const|float64
const_1081 = relay.const([3.955343,-1.335153,-9.187083,2.946677,8.738394,5.841861,-7.859820,-9.316903,9.493127,-1.549462,2.756357,-1.253892,-7.334833,4.311419,2.418665,5.832724,7.598126,5.415740,2.602172,-5.376933,6.313311,-7.391481,7.084713,-8.417583,2.896830,-6.225056,3.491417,9.660483,0.467583,-3.162495,-4.801384,8.714601,1.539763,8.223884,4.930567,3.097926,0.563239,-9.450419,-1.938607,3.869284,0.232019,-1.901057,-1.059591,-6.396103,4.785509,5.331477,-3.529504,1.804952,7.143504,6.977344,-8.458798,3.559137,-8.731815,-8.887449,-0.166676,-2.473457,-3.516602,0.424086,-2.789931,-5.894878,-2.280393,9.759183,9.892276,-6.651872,3.319070,2.324102,-5.362397,-4.835886,5.140130,3.703262,-4.498528,5.339722,-4.451423,-3.899803,9.242372,-8.254752,-5.963054,-3.862880,-7.289355,-5.943153,-5.291357,5.110471,0.988423,5.822172,7.921173,-4.615085,0.087090,-8.332096,-1.215100,-0.906803,4.089800,3.559271,0.925899,8.351348,-6.510250,3.099645,-8.308890,2.772107,-4.067154,-7.985825,2.453106,-3.001388,-1.956633,0.274353,1.726253,-2.262606,-5.271386,-1.287670,-4.294653,-3.761399,1.314687,7.362913,-2.774938,5.710464,-0.111452,-5.483122,9.680603,-0.218650,5.515013,-9.599166,8.861257,-8.298762,5.467483,5.821273,-3.917274,-8.320037,-0.109740,6.741196,9.810656,1.858338,-5.478494,5.083128,-8.928042,-9.731808,1.141861,-8.454077,9.129223,2.648548,6.240694,-6.233145,-4.104129,-3.480849,5.643083,4.233694,-8.620217,-3.290175,5.896903,-8.206426,1.494648,0.085313,-9.292915,4.266534,-3.443593,-3.699679,-6.296575,-3.304852,0.085861,3.733554,-0.686211,3.400702,8.976523,-8.645402,-5.035008,8.726123,8.903911,-5.692792,-0.796120,3.852877,-8.444622,7.921043,4.957528,7.403852,-1.621260,2.172927,-3.913476,3.815982,-3.973562,-1.508331,0.671590,-0.924495,-1.122788,-8.565837,-1.689930,-3.098965,6.678004,3.213966,4.675735,8.930083,5.028064,-1.599094,-8.725606,-5.012223,9.749866,8.365073,-9.939847,1.097721,-4.635018,3.299966,-9.826048,-3.129717,7.109044,-7.000622,-1.105537,-3.337571,-0.251494,1.380889,9.229292,2.305493,-9.045100,4.770112,-0.487314,-5.989784,-1.339467,9.664880,7.613241,-7.098354,-8.644017,6.065296,-7.026483,-1.255307,-1.287456,2.617614,2.628453,4.571060,6.537164,-0.344280,3.250912,1.885608,9.515297,-5.819889,-9.198106,4.563348,1.695296,0.976381,4.483312,-7.863381,-1.315820,2.163506,-4.467122,0.005217,9.712000,1.810900,-4.828576,-6.705396,-8.965582,-0.885652,8.362289,5.819115,-8.025537,-3.754878,-8.795686,-9.981430], dtype = "float64")#candidate|1081|(252,)|const|float64
call_1079 = func_49_call(relay.reshape(const_1080.astype('float64'), [1, 9, 2]), relay.reshape(const_1081.astype('float64'), [14, 9, 2]), )
call_1082 = func_49_call(relay.reshape(const_1080.astype('float64'), [1, 9, 2]), relay.reshape(const_1081.astype('float64'), [14, 9, 2]), )
uop_1083 = relay.asin(uop_1063.astype('float64')) # shape=(9, 9, 7)
func_744_call = mod.get_global_var('func_744')
func_747_call = mutated_mod.get_global_var('func_747')
call_1086 = relay.TupleGetItem(func_744_call(relay.reshape(const_1071.astype('int8'), [7, 13]), relay.reshape(const_1071.astype('int8'), [7, 13]), ), 2)
call_1087 = relay.TupleGetItem(func_747_call(relay.reshape(const_1071.astype('int8'), [7, 13]), relay.reshape(const_1071.astype('int8'), [7, 13]), ), 2)
output = relay.Tuple([call_1058,var_1059,var_1060,const_1061,bop_1067,call_1070,const_1071,call_1079,const_1080,const_1081,uop_1083,call_1086,])
output2 = relay.Tuple([call_1062,var_1059,var_1060,const_1061,bop_1067,call_1072,const_1071,call_1082,const_1080,const_1081,uop_1083,call_1087,])
func_1088 = relay.Function([var_1055,var_1059,var_1060,], output)
mod['func_1088'] = func_1088
mod = relay.transform.InferType()(mod)
var_1089 = relay.var("var_1089", dtype = "float32", shape = (9, 9, 7))#candidate|1089|(9, 9, 7)|var|float32
var_1090 = relay.var("var_1090", dtype = "int32", shape = (154,))#candidate|1090|(154,)|var|int32
var_1091 = relay.var("var_1091", dtype = "int32", shape = (1540,))#candidate|1091|(1540,)|var|int32
output = func_1088(var_1089,var_1090,var_1091,)
func_1092 = relay.Function([var_1089,var_1090,var_1091,], output)
mutated_mod['func_1092'] = func_1092
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1094 = relay.var("var_1094", dtype = "float32", shape = (6, 5, 5))#candidate|1094|(6, 5, 5)|var|float32
uop_1095 = relay.asin(var_1094.astype('float32')) # shape=(6, 5, 5)
bop_1097 = relay.left_shift(var_1094.astype('int64'), relay.reshape(uop_1095.astype('int64'), relay.shape_of(var_1094))) # shape=(6, 5, 5)
bop_1100 = relay.logical_or(bop_1097.astype('bool'), relay.reshape(var_1094.astype('bool'), relay.shape_of(bop_1097))) # shape=(6, 5, 5)
bop_1103 = relay.bitwise_and(uop_1095.astype('int8'), relay.reshape(bop_1097.astype('int8'), relay.shape_of(uop_1095))) # shape=(6, 5, 5)
bop_1108 = relay.greater(bop_1100.astype('bool'), relay.reshape(bop_1103.astype('bool'), relay.shape_of(bop_1100))) # shape=(6, 5, 5)
func_1088_call = mod.get_global_var('func_1088')
func_1092_call = mutated_mod.get_global_var('func_1092')
var_1114 = relay.var("var_1114", dtype = "float32", shape = (189, 3))#candidate|1114|(189, 3)|var|float32
const_1115 = relay.const([9,-8,7,7,-5,-9,7,-1,2,-3,4,7,10,-6,-9,-5,-6,1,7,9,5,2,-8,6,-6,4,9,-3,-3,-1,-4,1,1,7,-1,1,-2,7,-7,9,2,-5,-5,1,-7,-2,-9,1,8,10,-2,-3,-4,-6,5,-4,9,7,-8,-3,1,4,-2,-1,-4,-8,-2,1,-3,-6,-2,-5,-10,8,1,10,9,-1,10,-1,-5,-1,2,-4,10,-5,-10,5,1,5,5,3,1,6,7,8,-6,10,2,7,4,2,2,-2,-3,6,-4,1,-2,9,-6,-5,7,-2,-1,-8,-1,-9,-10,-6,9,10,-1,-1,9,6,10,-10,7,3,-1,1,3,-4,2,-7,-4,-6,-9,-1,10,6,7,4,-5,1,8,-9,3,-4,-5,-8,8,-7], dtype = "int32")#candidate|1115|(154,)|const|int32
const_1116 = relay.const([[-2,10],[-2,-6],[-1,8],[3,-6],[-7,7],[6,-2],[-8,4],[10,-10],[6,6],[7,6],[-6,-5],[-10,-2],[-3,2],[8,8],[9,-10],[4,1],[-1,2],[9,-5],[-4,6],[3,-3],[-6,-8],[7,2],[7,-6],[3,-3],[-6,-2],[2,-2],[8,-2],[-5,-7],[-8,-7],[10,2],[3,-8],[-5,3],[-5,8],[10,4],[7,1],[9,-3],[3,-3],[-1,-10],[-2,3],[1,-1],[-8,-4],[9,10],[-5,6],[-7,2],[-8,4],[-9,6],[-5,9],[4,2],[8,-4],[-5,-3],[-3,4],[-7,-1],[1,-4],[2,-2],[-8,2],[-2,6],[2,9],[4,8],[10,-7],[-10,1],[8,4],[5,6],[8,7],[-4,-3],[3,-6],[3,-4],[9,9],[-4,3],[-6,-1],[-6,6],[6,-5],[6,-9],[-10,-10],[2,-4],[-7,-10],[-3,-4],[-1,-2],[1,10],[-1,10],[-3,-10],[7,-5],[-4,-7],[4,-4],[2,8],[5,10],[-5,-5],[-7,4],[7,2],[4,2],[8,8],[9,-1],[-2,-2],[-6,-4],[3,7],[-8,10],[7,-9],[1,6],[3,1],[8,10],[-10,8],[7,7],[3,1],[-7,7],[5,4],[9,5],[-5,-3],[10,-2],[8,-4],[-4,-4],[-5,10],[-6,-5],[-7,4],[8,-10],[-8,6],[6,8],[-10,6],[3,4],[-5,-1],[5,9],[-4,8],[6,5],[-10,-4],[8,8],[-4,3],[4,-7],[-4,-9],[4,-9],[-5,-2],[-6,7],[-7,10],[-10,-7],[-3,-4],[-10,8],[-1,2],[-9,6],[9,-6],[-7,1],[-1,1],[-9,8],[9,-1],[-4,2],[9,1],[-7,3],[6,-1],[10,7],[2,5],[-8,-3],[4,7],[-4,3],[5,3],[-2,-7],[4,1],[9,7],[10,3],[4,5],[2,8],[-3,1],[-7,-9],[9,-9],[-2,-8],[10,4],[-7,8],[-3,-9],[-8,-2],[8,-8],[-8,-3],[-3,-3],[-5,-7],[8,7],[-6,-7],[1,-5],[3,-10],[3,-5],[5,1],[2,-2],[-4,-4],[-10,-8],[-9,7],[-10,-8],[4,-3],[6,-9],[8,8],[3,-9],[-8,-9],[-7,5],[1,5],[-8,2],[1,-10],[-5,-5],[-10,-5],[2,2],[-10,-8],[-10,-4],[-9,-10],[-1,1],[-10,-8],[-2,10],[-5,-7],[-10,9],[-9,-8],[2,-10],[10,-9],[2,5],[-3,-9],[-6,-8],[-3,-2],[-3,-4],[7,-1],[-3,-9],[-1,-5],[8,-9],[3,-7],[6,-1],[-8,5],[-3,-4],[-10,-7],[-8,-7],[5,-5],[2,-6],[-1,-3],[6,-9],[9,6],[2,10],[6,4],[-6,-2],[3,-5],[-1,-7],[6,1],[-7,8],[2,-8],[3,6],[-7,-1],[3,5],[-3,8],[-5,-6],[8,3],[-8,1],[-3,4],[-7,5],[-3,9],[4,-2],[8,10],[-9,-4],[-6,2],[6,-3],[2,-8],[10,-5],[2,10],[9,4],[6,-1],[-2,3],[2,1],[-9,-10],[4,10],[-1,-8],[8,-10],[2,6],[-8,4],[-4,8],[-4,-7],[-3,-4],[4,10],[10,10],[-6,8],[-6,7],[-3,-6],[9,4],[-4,6],[7,4],[-5,-9],[-4,4],[-1,9],[7,1],[-8,9],[-10,-1],[-6,-2],[9,4],[-2,-1],[-2,-6],[7,10],[3,6],[-8,-1],[1,-3],[-2,-10],[10,-5],[9,-9],[-10,5],[2,3],[-7,-9],[5,-3],[5,-3],[-10,-8],[-1,5],[8,2],[-10,-9],[-2,-10],[-3,-4],[-2,-7],[5,-3],[-5,5],[3,-5],[-5,3],[3,10],[4,6],[10,8],[-9,8],[-6,-8],[2,-6],[-5,-10],[-9,-8],[4,-10],[9,-8],[8,-10],[10,2],[8,7],[-5,-9],[-4,-3],[-1,-5],[-10,-5],[-1,-7],[-6,7],[-4,2],[-8,2],[-1,-4],[-9,8],[-9,-4],[8,-7],[2,-9],[10,6],[2,3],[-6,3],[-5,10],[3,3],[1,-10],[-1,-9],[10,1],[1,-1],[-5,4],[1,-9],[-4,4],[9,9],[9,8],[-4,-10],[4,-4],[1,9],[-2,-7],[2,-3],[7,4],[-5,5],[-2,-1],[-9,-1],[-4,-7],[2,3],[10,-9],[8,-9],[-7,10],[-7,5],[9,6],[-9,-2],[-5,2],[-6,9],[6,10],[-10,-10],[3,-1],[6,-10],[4,-2],[6,-9],[-4,6],[5,8],[5,-7],[7,4],[-7,10],[10,8],[-7,-8],[6,-6],[10,2],[9,-9],[6,-1],[-3,-4],[-9,6],[6,5],[6,-10],[3,-5],[-8,-8],[-5,-3],[-3,7],[-1,-8],[7,2],[-8,1],[-10,-8],[-7,-8],[10,-1],[-5,7],[1,7],[4,4],[9,-7],[1,-3],[-8,-6],[6,9],[-1,10],[-7,5],[-2,9],[8,-9],[9,6],[-5,3],[-1,-8],[4,-4],[6,-3],[2,10],[-2,2],[-4,9],[-9,3],[5,7],[4,5],[-3,-5],[3,-1],[-7,1],[-3,9],[5,1],[4,-10],[-10,7],[2,-4],[-10,-3],[4,-10],[-6,10],[3,9],[9,4],[5,-2],[-10,-9],[-10,-7],[-1,-5],[-6,-5],[3,4],[-9,6],[2,-3],[5,-2],[-6,-9],[-5,9],[9,-10],[-7,9],[-4,-8],[7,-1],[7,8],[9,6],[2,-2],[-2,-4],[4,-5],[-10,-5],[-9,-5],[8,-7],[-10,-6],[6,6],[7,-6],[10,-1],[-3,7],[5,8],[-6,2],[1,-10],[4,-1],[10,-8],[-7,8],[-4,4],[-7,1],[-5,-6],[1,5],[-7,4],[1,-10],[5,7],[-2,-9],[-6,-4],[-4,-5],[-3,9],[8,8],[9,5],[-9,2],[-6,-6],[-4,7],[-8,2],[-5,10],[-9,3],[-3,3],[1,3],[-4,4],[3,-10],[-4,6],[-7,3],[-7,-1],[-4,-4],[-3,10],[-4,4],[7,9],[7,-7],[-4,5],[5,-3],[-5,-9],[-9,7],[-9,-6],[9,2],[-9,5],[8,-10],[-9,6],[-5,6],[-5,8],[-7,6],[1,10],[3,5],[1,-9],[-4,-5],[-4,-6],[-10,-8],[7,-9],[-10,-2],[-8,-10],[-2,-4],[-6,6],[-3,-4],[-2,5],[-1,6],[-10,2],[-3,-10],[7,-3],[-6,-4],[1,-4],[-10,1],[-7,3],[1,7],[8,1],[6,-2],[1,1],[-4,10],[6,-10],[-2,-8],[9,-8],[3,-2],[-7,-2],[-6,5],[2,7],[-1,-1],[-2,-5],[2,-3],[7,3],[-9,10],[-2,8],[-1,-7],[6,-6],[10,-8],[-8,7],[6,-3],[3,10],[-5,-7],[-7,4],[5,10],[3,2],[5,8],[-1,-5],[4,10],[8,-9],[-2,-9],[-1,-8],[2,2],[6,-1],[-4,-4],[5,-3],[-9,-6],[3,-7],[4,-6],[9,-5],[-2,8],[-1,-8],[-9,3],[2,-3],[-9,6],[-6,10],[9,7],[2,10],[-9,3],[-7,-8],[-3,-8],[-8,-4],[10,2],[-4,-8],[-8,2],[-6,-3],[9,8],[7,2],[-8,-5],[-1,-5],[10,9],[-10,9],[-1,-8],[-3,6],[9,10],[2,7],[4,10],[4,8],[-3,-8],[-3,10],[7,-3],[-9,4],[2,5],[6,8],[6,7],[3,4],[4,10],[-8,-3],[10,-7],[4,-6],[-3,-4],[5,-1],[10,-8],[5,3],[-3,-9],[5,8],[-8,4],[-6,8],[-3,10],[-4,8],[-1,9],[10,7],[4,6],[6,7],[-1,-5],[3,-6],[-8,6],[-1,8],[-3,-10],[-8,6],[-3,-3],[6,-2],[-9,4],[2,10],[-8,4],[1,3],[-8,6],[-10,-7],[-3,-1],[-8,-8],[1,1],[-1,5],[-9,1],[8,5],[9,-1],[-2,-3],[7,-5],[-8,-4],[-4,4],[7,-7],[6,-8],[3,2],[5,-2],[-10,-3],[8,3],[-3,-5],[-3,-2],[-8,-9],[-8,1],[-10,-3],[4,3],[10,-4],[4,-4],[-6,3],[10,2],[-6,-2],[-9,6],[-8,6],[6,-8],[3,-5],[-1,5],[-10,7],[-8,7],[9,8],[6,7],[5,-6],[1,7],[7,-5],[3,-6],[-10,4],[-1,10],[2,-7],[-6,-2],[8,-3],[-3,-4],[-4,-1],[-9,-9],[-7,7],[-4,7],[6,6],[-10,4],[6,8],[-8,4],[-3,9],[9,3],[3,-5],[6,4],[-9,6],[1,-7],[5,-8],[8,-5],[6,-5],[3,2],[-7,-2],[-10,6],[1,9],[4,-8],[-1,-4],[-10,-2],[-2,-9],[4,-9],[-10,-5],[-1,10],[-5,-1],[2,7],[-8,2],[9,-2],[2,6],[-5,-8],[-7,-5],[-6,-8],[3,1],[1,-1],[-9,4],[-9,-1],[-10,-9],[-9,1],[-2,4],[-3,-8],[-4,-4],[-8,-3],[-9,7],[5,-9],[2,-3],[-6,8],[-1,5],[-7,-10],[3,5],[8,8],[-4,5],[10,8],[3,4],[-6,-7],[-5,2],[-5,-2],[-6,-8],[2,2],[-1,-7],[1,5],[-7,-5],[-9,1],[-5,5],[-3,10],[3,-4],[4,-3],[2,-7],[7,1],[9,6],[-10,-6],[-10,-7],[-10,-4],[5,-8],[-5,5],[10,2],[-2,-1],[9,-2],[4,6],[-1,-7],[-7,3],[-9,10],[-1,1],[7,-9],[8,-1]], dtype = "int32")#candidate|1116|(770, 2)|const|int32
call_1113 = relay.TupleGetItem(func_1088_call(relay.reshape(var_1114.astype('float32'), [9, 9, 7]), relay.reshape(const_1115.astype('int32'), [154,]), relay.reshape(const_1116.astype('int32'), [1540,]), ), 2)
call_1117 = relay.TupleGetItem(func_1092_call(relay.reshape(var_1114.astype('float32'), [9, 9, 7]), relay.reshape(const_1115.astype('int32'), [154,]), relay.reshape(const_1116.astype('int32'), [1540,]), ), 2)
func_391_call = mod.get_global_var('func_391')
func_395_call = mutated_mod.get_global_var('func_395')
var_1122 = relay.var("var_1122", dtype = "float32", shape = (968,))#candidate|1122|(968,)|var|float32
call_1121 = relay.TupleGetItem(func_391_call(relay.reshape(const_1115.astype('int32'), [1, 11, 14]), relay.reshape(call_1113.astype('int32'), [10, 11, 14]), relay.reshape(var_1122.astype('float32'), [968,]), ), 3)
call_1123 = relay.TupleGetItem(func_395_call(relay.reshape(const_1115.astype('int32'), [1, 11, 14]), relay.reshape(call_1113.astype('int32'), [10, 11, 14]), relay.reshape(var_1122.astype('float32'), [968,]), ), 3)
const_1133 = relay.const([[[-7,2,4,9,-7],[-7,5,4,-10,-10],[8,4,10,7,-6],[1,-3,-5,6,-5],[5,1,1,-10,8]],[[3,-10,2,-8,-3],[5,-6,-7,-5,5],[8,-5,9,-6,-8],[-3,-2,10,2,3],[10,9,6,7,9]],[[-3,-1,5,6,-3],[6,7,-8,2,-5],[-5,-4,-1,10,-2],[-1,7,-5,3,6],[8,-9,-1,-4,-9]],[[9,3,8,-2,3],[9,-10,5,-3,-9],[-2,10,-3,-2,-6],[-3,-5,-8,10,5],[-5,5,-3,3,9]],[[-4,10,-4,-8,10],[-7,9,-1,9,7],[5,10,-7,2,-10],[3,-4,9,8,6],[9,2,9,5,5]],[[2,1,-1,7,-10],[6,1,6,8,7],[-3,9,-6,-1,6],[2,7,10,-4,3],[1,7,7,-2,-9]]], dtype = "int8")#candidate|1133|(6, 5, 5)|const|int8
bop_1134 = relay.bitwise_xor(bop_1103.astype('int32'), relay.reshape(const_1133.astype('int32'), relay.shape_of(bop_1103))) # shape=(6, 5, 5)
uop_1152 = relay.asin(const_1116.astype('float32')) # shape=(770, 2)
uop_1160 = relay.sin(bop_1108.astype('float64')) # shape=(6, 5, 5)
bop_1162 = relay.floor_mod(uop_1095.astype('float32'), relay.reshape(bop_1103.astype('float32'), relay.shape_of(uop_1095))) # shape=(6, 5, 5)
output = relay.Tuple([call_1113,var_1114,const_1115,call_1121,var_1122,bop_1134,uop_1152,uop_1160,bop_1162,])
output2 = relay.Tuple([call_1117,var_1114,const_1115,call_1123,var_1122,bop_1134,uop_1152,uop_1160,bop_1162,])
func_1168 = relay.Function([var_1094,var_1114,var_1122,], output)
mod['func_1168'] = func_1168
mod = relay.transform.InferType()(mod)
mutated_mod['func_1168'] = func_1168
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1168_call = mutated_mod.get_global_var('func_1168')
var_1170 = relay.var("var_1170", dtype = "float32", shape = (6, 5, 5))#candidate|1170|(6, 5, 5)|var|float32
var_1171 = relay.var("var_1171", dtype = "float32", shape = (189, 3))#candidate|1171|(189, 3)|var|float32
var_1172 = relay.var("var_1172", dtype = "float32", shape = (968,))#candidate|1172|(968,)|var|float32
call_1169 = func_1168_call(var_1170,var_1171,var_1172,)
output = call_1169
func_1173 = relay.Function([var_1170,var_1171,var_1172,], output)
mutated_mod['func_1173'] = func_1173
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1239 = relay.var("var_1239", dtype = "float64", shape = (12, 13))#candidate|1239|(12, 13)|var|float64
uop_1240 = relay.atan(var_1239.astype('float64')) # shape=(12, 13)
output = uop_1240
output2 = uop_1240
func_1242 = relay.Function([var_1239,], output)
mod['func_1242'] = func_1242
mod = relay.transform.InferType()(mod)
mutated_mod['func_1242'] = func_1242
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1243 = relay.var("var_1243", dtype = "float64", shape = (12, 13))#candidate|1243|(12, 13)|var|float64
func_1242_call = mutated_mod.get_global_var('func_1242')
call_1244 = func_1242_call(var_1243)
output = call_1244
func_1245 = relay.Function([var_1243], output)
mutated_mod['func_1245'] = func_1245
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1247 = relay.var("var_1247", dtype = "float32", shape = (2, 15, 1))#candidate|1247|(2, 15, 1)|var|float32
uop_1248 = relay.acosh(var_1247.astype('float32')) # shape=(2, 15, 1)
func_61_call = mod.get_global_var('func_61')
func_63_call = mutated_mod.get_global_var('func_63')
const_1260 = relay.const([6.721041,6.988242,1.293064,-0.220840,8.365851,4.477904,-0.623827,0.119977,-2.231998,-7.424561,5.299053,-4.179146,-6.065482,-2.242231,-2.374769,-8.258082,7.302022,8.436351,-6.360054,-9.009783,-9.286244,-9.802650,5.060075,5.485519,-5.429337,2.961187,-5.582041,4.797884,-5.174771,-6.748002,5.459977,-7.264295,-5.920372,1.568963,-5.072738,-6.100336,3.335249,7.888922,-3.647881,-8.149212,-9.726203,-9.168782,-3.382688,0.817772,4.926975,2.770699,-8.570265,-3.747287,1.036573,7.697488,6.093585,-7.866416,8.140158,-4.003803,2.561940,-8.050857,-2.958847,-4.976168,-7.807607,-6.912752,3.772342,-0.415186,0.315866,-7.611968,-8.552223,-7.026371,4.862984,-2.078622,-4.695301,2.993179,0.802670,-3.277258,-8.211096,-3.736721,-1.592869,5.931913,-7.419263,-9.147579,-3.770778,-4.788069,-2.879816,-0.526060,-3.517229,-1.039057,0.133407,-4.289156,1.479869,0.261870,5.878561,-2.031723,-8.599188,0.877217,3.435985,-2.871747,-8.375659,-4.318237,-6.173573,-9.681146,1.573496,8.371202,-7.484239,-1.357241,-0.613603,-5.149963,8.776059,-1.270471,-8.709070,9.477883,3.447882,0.022247,-4.596978,-1.401000,-8.574730,6.352966,-5.699812,4.103348,-5.522030,-9.116563,5.728208,-3.835671,-6.679936,-7.902839,-7.396954,-0.744245,0.223929,9.742768,-4.325361,-4.516582,6.007499,-6.420149,6.963082,-7.856475,6.194215,-4.615681,7.775664,-4.554890,6.112917,-8.232637,-6.442142,2.994582,-1.428552,7.785967,4.278352,-0.765864,-4.861810,-4.134002,-3.770104,0.156911,7.336729,-0.022669,7.144952,-2.548576,7.587033,-2.949773,-8.615857,4.365342,2.661652,2.068116,5.578529,4.755043,-2.417995,0.506674,-1.985673,8.958500,-6.717976,0.945753,-5.660518,0.477896,-9.264512,7.365829,2.050766,-9.441152,2.814428,4.500293,5.721333,-1.578168,-3.198719,-9.766001,5.594780,2.702390,3.972745,9.784899,-8.656106,1.913643,-0.594529,9.554212,9.355424,-4.974419,9.664701,0.614818,-5.846523,3.155861,7.676979,-2.919812,4.511776,9.732723,-6.216791,-2.556318,7.176760,7.812114,-9.370022,0.323806,-1.600055,-4.020978,-7.146177,-3.336332,-6.559956,5.582683,7.150052,-7.914060,9.281076,3.951307,-6.277782,9.153320,0.522854,2.206074,8.737872,-4.413867,6.383640,-8.431763,-5.841643,-1.060846,-4.987384,8.312515,2.031833,-1.878212,0.301014,-4.646490,6.015085,2.900566,4.384261,-0.267174,7.449980,-2.689135,8.985341,-3.516058,-8.366348,-2.360566,5.872467,-5.305802,7.868896,7.245805,1.143837,-1.047233,1.491190,7.967092,8.264983,-3.083405,-0.071673,5.985233,0.406176,-9.877864,-9.848422,-3.117793,-2.416609,3.893781,4.055812,-5.333540,-8.248376,3.196948,-7.028566,-0.371551,-7.921392,-5.716090,-6.991834,-3.511859,-8.626284,2.258692,-8.644382,-7.089642,-2.567555,-7.958203,-1.438857,-4.301517,-2.769790,5.469297,3.970866,-7.025063,-3.097620,-6.229809,-3.510669,-8.192518,1.157713,2.647251,2.257140,-7.594422,7.684332,3.556616,9.055287,1.886899,3.073328,-3.590144,-4.618584,-7.620415,-7.760942,7.390537,5.376863,8.843899,9.344608,-6.632447,-0.273597,7.421176,-9.742957,8.821044,-7.432671,6.916291,7.967396,-3.864582,-4.410707,-5.504035,-1.676855,0.915019,1.560540,-3.164133,1.947362,8.135611,-6.497147,-0.526221,5.022984,-5.106102,-0.733092,6.632800,-6.471997,2.010099,-5.603193,1.864110,-6.903175,4.471227,1.628866,-2.047210,-2.484611,-1.824507,-5.795825,5.629398,-4.782018,-0.848615,5.404286,2.030434,6.827464,-3.717889,-4.672684,-4.055310,-5.828498,7.997712,-2.489233,8.043627,4.116700,6.297925,-3.741943,-1.202457,-5.759159,0.724163,-3.613628,1.776741,4.608086,-1.474126,8.176604,-0.593501,-1.610573,5.438650,-3.528654,2.458132,-7.759187,0.948232,-8.118361,-4.501024,-2.377222,-4.300471,-8.919456,0.789581,-7.882171,8.542616,-6.720975,9.262543,2.103725,9.509315,0.452513,-7.991472,6.958015,-6.945291,9.154873,5.261007,-3.572693,-9.793661,9.762679,5.045022,5.779957,-6.794291,-5.892623,-1.893863,-7.448531,6.961648,1.076502,-7.826434,-7.253241,-6.924454,6.297420,3.851104,0.124898,-1.296650,4.571405,-6.300560,-5.535596,3.767535,2.186401,4.891146,0.478941,7.517784,-0.181157,-2.051421,2.276504,-0.555865,-7.031801,-3.546764,1.131590,-7.375850,-6.199401,-4.745315,3.967230,-8.062334,5.068531,2.840963,-1.294323,5.713109,-6.511136,2.095749,-1.669006,-1.219887,-4.901447,4.958352,1.894522,-0.221602,-5.905434,-2.839918,-8.260927,-8.566022,-8.445135,8.204545,3.301949,5.027758,-1.000384,1.581862,-7.642544,7.110752,-3.771631,2.049251,-1.444899,-8.882607,-4.143822,3.988816,2.690797,-7.118767,2.219221,-6.706603,1.395396,-1.294060,3.562484,-2.752531,0.229372,-6.188885,-5.069018,0.987860,3.996234,-2.202773,-8.356663,5.884200,0.875421,-6.857884,7.898697,2.540823,-1.763428,-7.898393,1.932276,-7.702862,-9.709694,9.438106,-2.015706,6.386005,-4.607676,3.733609,6.114415,-8.322439,-8.605765,7.957600,9.184679,-9.648313,-5.831465,4.582365,-5.204873,-8.961339,-9.824025,5.753856,-3.367458,0.190974,-8.245095,-9.091303,6.637135,9.692434,7.742776,1.154999,6.675781,-6.841230,-1.811041,-2.150894,1.976778,6.334941,-3.549386,-7.771814,2.062295,6.289336,-6.571232,-9.088475,-3.531294,-2.330647,-8.957238,-4.785968,6.505784,-4.349950,2.382870,-2.146469,3.230400,-0.477935,7.457504,9.607845,-3.460204,-7.520844,-2.719451,-6.458646,-4.226564,-4.311954,-0.379453,7.133038,5.171314,0.858922,-3.579036,-0.361887,6.536555,7.417209,2.043630,-9.185752,3.845658,6.034911,8.691615,-5.645326,-0.176135,-2.720868,8.681029,-8.383350,1.151321,7.938631,-2.187298,-2.854196,7.214700,-8.982802,-6.958578,-3.211664,3.009023,8.686765,-3.742159,4.802109,-1.920710,8.431493,7.578437,-5.606023,-9.627587,-4.584147,3.658530,-8.624897,-5.847879,-4.837284,1.466622,-9.923460,-6.515387,0.408000,8.462278,9.102442,7.335567,8.194496,-2.911409,5.095833,-8.488864,6.145627,-7.018448,-0.187250,-6.935938,3.114151,7.626932,2.927925,4.048756,-0.587134,9.732302,-6.568586,9.159119,9.393777,-7.513487,-7.299060,-5.636927,-0.697679,5.146863,3.861245,4.497211,-2.856557,-5.070859,-4.351883,-0.441902,-0.667129,-2.694259,-2.314311,-6.831177,-6.588832,3.419957,6.090351,-6.949634,-7.830021,-7.219177,-6.033262,8.386118,2.410850,-4.964158,2.620615,-3.078759,-9.945307,0.728115,-7.023269,-7.546125,-4.103596,9.177593,8.044584,5.698149,-8.451680,4.069914,-5.779044,8.593828,-2.371684,5.431115,-9.124079,4.460360,3.758153,-5.073256,-2.030796,-9.963309,-6.355579,7.541751,6.944791,8.319500,-1.015101,-2.054507,1.105193,-2.952533,0.847130,-4.928148,-7.675806,-2.446297,-8.270546,9.622246,5.262006,1.481039,-7.202676,1.895779,8.655339,5.760396,3.443642,-7.435850,6.080767,-5.821207,4.439108,-4.829746,-7.791442,7.681933,8.423084,-5.651725,-0.348410,-5.110006,-6.301535,-0.607577,7.408377,5.619757,-4.585583,3.219801,1.165275,-9.541838,-6.265369,-0.573748,-0.936295,6.019240,-7.517283,-4.842625,2.362109,7.112656,3.245483,-5.581590,5.066373,1.339515,5.338985,0.229801,7.393497,5.046803,2.889815,-6.768927,8.451792,9.283101,8.062961,-8.002069,9.169312,-4.913249,-5.125082,4.377228,1.676509,3.888182,5.754406,1.213903,-9.894089,8.389387,-8.571957,9.032306,1.793045,3.634121,0.046336,-7.274928,-8.570187,7.479139,3.632447,-5.222945,0.419119,9.381248,1.590382,3.370291,-1.904879,1.251275,8.444192,-2.631914,7.136387,2.370183,-4.003177,6.599013,2.076393,6.670776,2.673490,5.075641,6.220391,-1.107773,9.430987,-2.366080,-2.249056,-8.467112,5.489220,-0.637558,-4.010149,8.330276,1.430977,6.829440,3.544966,5.333535,3.806445,6.910710,-7.094818,6.648026,-2.904606,1.503423,2.409494,-0.425295,-8.151473,4.170478,-2.092719,2.301781,-7.255538,-8.962611,6.364611,-2.372157,-0.022260,1.168475,7.179027,-0.428606,1.001339,-2.151837,3.221631,7.316155,-5.426893,8.480148,5.252282,-1.324504,5.376089,6.441987,9.381290,5.816995,1.298203,-9.172131,1.718816,-6.741367,-7.605814,4.257608,7.025154,9.154377,-0.571069,7.500974,-1.805886,6.516830,-0.953053,-1.389915,-4.515661,-4.431204,1.378696,6.992815,9.851865,5.290689,-9.874692,-4.460829,3.868768,5.858703,-4.299315,0.104182,2.685177,-8.611672,5.601759,2.208596,9.827532,5.219849,-1.503195,4.090865,5.955142,5.760980,-3.202611,8.242712,2.565057,4.090241,1.578923,-6.856395,7.995870,2.854092,-7.735665,-3.706031,-8.333277,-3.825535,-3.867883,-9.818192,-3.604206,-1.133395,9.039664,-5.076655,-4.490390,-8.571045,-0.167805,-6.324885,-9.309762,-8.677912,-8.177353,-2.686433,-5.547221,5.292032,-6.004185,-3.150566,7.334834,5.402020,1.094171,-1.039188,5.409588,1.045119,6.703218,1.278275,6.547031,-0.522173,7.764224,-2.078561,9.096263,-0.512517,-5.847646,-6.993271,4.387524,-5.441367,9.180028,0.901112,-6.107555,-2.386107,-3.673914,7.109752,8.629101,-5.821854,-3.263230,1.825476,-2.452872,4.576784,-1.830505,8.447583,-7.869226,-8.555134,-6.618084,-1.700340,4.763603,-7.233756,6.789530,2.061441,-2.980297,1.336046,4.771517,-5.017624,-2.949976,-5.561750,-0.967075,5.712010,7.954581,-5.838887,1.789463,-2.035417,-2.027540,-1.418779,-2.649249,-9.794703,5.902680,2.672220,-2.835622,0.134030,-2.697289,-9.555600,6.403528,3.135450,3.144268,-9.418136,-5.780786,8.689629,5.550631,-2.511401,-6.963959,-2.149343,-5.265685,-2.620547,-5.863488,-2.119722,6.334009,3.380034,-7.589215,9.002189,-8.447129,-7.216431,9.029560,3.662045,5.208194,-9.265419,7.874164,-9.656905,6.207348,-0.798224,-8.432072,-6.727817,5.236972,-9.616509,-4.139084,-4.093439,7.635274,3.563562,-4.156548,3.877352,7.009058,4.590372,0.985404,-7.676062,-9.441584,-7.952746,4.478997,-5.804279,-6.106657,-2.896995,0.451915,3.452106,6.859402,3.149151,-8.204137,-7.419568,-4.215485], dtype = "float32")#candidate|1260|(968,)|const|float32
call_1259 = func_61_call(relay.reshape(const_1260.astype('float32'), [11, 11, 8]))
call_1261 = func_61_call(relay.reshape(const_1260.astype('float32'), [11, 11, 8]))
var_1263 = relay.var("var_1263", dtype = "float32", shape = (2, 15, 10))#candidate|1263|(2, 15, 10)|var|float32
bop_1264 = relay.floor_mod(uop_1248.astype('float32'), var_1263.astype('float32')) # shape=(2, 15, 10)
func_49_call = mod.get_global_var('func_49')
func_52_call = mutated_mod.get_global_var('func_52')
var_1268 = relay.var("var_1268", dtype = "float64", shape = (18,))#candidate|1268|(18,)|var|float64
var_1269 = relay.var("var_1269", dtype = "float64", shape = (252,))#candidate|1269|(252,)|var|float64
call_1267 = func_49_call(relay.reshape(var_1268.astype('float64'), [1, 9, 2]), relay.reshape(var_1269.astype('float64'), [14, 9, 2]), )
call_1270 = func_49_call(relay.reshape(var_1268.astype('float64'), [1, 9, 2]), relay.reshape(var_1269.astype('float64'), [14, 9, 2]), )
func_49_call = mod.get_global_var('func_49')
func_52_call = mutated_mod.get_global_var('func_52')
call_1271 = func_49_call(relay.reshape(var_1268.astype('float64'), [1, 9, 2]), relay.reshape(call_1267.astype('float64'), [14, 9, 2]), )
call_1272 = func_49_call(relay.reshape(var_1268.astype('float64'), [1, 9, 2]), relay.reshape(call_1267.astype('float64'), [14, 9, 2]), )
const_1279 = relay.const([[[2.901657,-9.482169,-9.297304,-0.348565,-4.199743,9.334701,-7.532825,-9.979381,-3.289661,-4.369208],[-1.189603,-8.856968,-9.411516,-3.775125,-7.479209,-6.838264,-5.409033,-5.876955,6.516337,-8.015097],[-8.785684,-6.290590,5.555301,-5.895545,1.340785,-8.153037,-4.197021,8.587903,1.858893,-8.765938],[1.311005,8.562902,9.475823,-7.178041,-3.276001,-3.959237,-6.257466,6.915258,-8.931587,0.215188],[-6.989203,4.777075,8.233231,7.571329,9.125155,-7.559760,5.328800,-6.877367,-3.040173,6.512804],[7.386137,7.480163,-4.049274,-3.285752,-1.774713,-6.508604,9.037623,2.030222,-3.793338,-7.749520],[1.314054,-6.588735,-1.839114,1.644715,7.975059,-5.762217,1.033295,1.476609,-7.144315,-7.378162],[2.343580,-8.768738,-9.810518,2.854410,-7.631397,-9.299804,0.723727,-0.150975,-9.359865,-9.219621],[0.876603,-9.558871,-9.266231,-9.666616,9.046715,6.609973,-5.762067,-4.039092,-1.685630,4.047529],[4.726505,-0.800171,9.019778,-8.737749,-0.904716,9.458828,8.215667,-9.747299,5.972634,9.370575],[1.304220,-9.064603,-9.699451,2.027612,-2.052677,3.674128,-4.929684,-6.491907,8.694917,9.219550],[5.177004,3.848100,3.741406,-1.263946,-0.538805,8.770684,9.943848,0.794751,-9.852181,-2.329999],[-6.691937,-8.945508,2.524370,-4.882262,-8.931944,-0.650951,-7.102380,-0.193672,-4.641141,5.309143],[-7.423594,-2.663809,-1.627856,1.430518,-1.682541,5.346379,-5.772922,-7.029647,8.667003,-8.887318],[-8.327356,5.229840,-7.588995,-7.382592,9.216879,5.967918,5.394762,1.677297,-3.044421,-5.835966]],[[-9.726619,6.905995,-3.675203,-0.050611,-4.339790,5.428761,5.671942,5.960746,-9.699759,-3.480590],[5.514196,-9.565326,-4.356497,-7.629280,-6.630841,1.433745,3.498568,1.882419,-2.001960,8.169110],[-0.934219,-8.746012,7.500037,9.669109,4.223097,9.327593,-6.080374,0.809156,6.103068,5.528407],[7.663095,-8.179048,4.182527,-8.634429,3.297022,-0.933237,-5.780864,-3.295830,-5.494871,1.853946],[7.424165,2.716084,-3.641634,-7.287682,-2.053914,-9.166159,8.713169,-2.575503,-3.720225,-0.371654],[-0.877692,-4.453621,9.203818,3.799618,-4.328312,-4.462817,4.044167,9.098591,-4.403128,-0.644126],[6.098621,-6.661294,0.905819,6.516163,0.368701,-8.826763,-3.974448,-0.995232,5.145962,-0.428623],[9.382497,7.014803,-6.711412,-5.094484,8.293306,4.974677,8.115893,6.283331,0.080801,2.472973],[-3.262663,-5.108992,-0.553545,5.921911,-9.336067,5.012850,-2.905446,7.689826,-9.813921,3.549693],[-2.028707,-9.727725,4.098746,-4.440055,0.115152,1.734528,4.849833,-7.285408,4.010299,4.206021],[8.350394,2.562542,-8.681485,-1.275040,-4.670009,-2.954409,9.865559,8.331581,-8.030552,7.666015],[2.554599,7.839690,-5.973849,-9.733519,6.792866,-2.152797,-2.306629,-6.942856,-8.388940,1.026120],[0.175730,5.865648,5.802132,3.920155,-3.666557,0.022457,9.734499,8.421502,-3.471250,0.902152],[7.976995,1.085487,7.064054,-1.997038,-5.109600,1.309550,3.892945,-9.772268,0.447509,-5.350194],[-0.510771,0.687664,9.961421,-6.149553,-3.335999,7.161122,6.544251,0.100692,9.722858,-9.801066]]], dtype = "float32")#candidate|1279|(2, 15, 10)|const|float32
bop_1280 = relay.add(bop_1264.astype('uint8'), relay.reshape(const_1279.astype('uint8'), relay.shape_of(bop_1264))) # shape=(2, 15, 10)
bop_1287 = relay.bitwise_and(bop_1264.astype('uint8'), relay.reshape(const_1279.astype('uint8'), relay.shape_of(bop_1264))) # shape=(2, 15, 10)
func_1088_call = mod.get_global_var('func_1088')
func_1092_call = mutated_mod.get_global_var('func_1092')
const_1293 = relay.const([-2.858195,9.209356,4.434257,-1.803322,-8.014229,-7.916909,7.283026,-9.813429,0.677165,-3.043603,1.459370,4.956144,-5.842309,-9.535868,-7.884470,-0.792842,1.953353,1.239837,7.931543,4.472012,-3.905763,7.689045,-1.900543,2.469936,-2.444659,-8.162752,0.526854,3.818167,-5.090803,5.770160,2.589807,9.143825,3.772765,7.047035,-5.711971,7.181789,8.440078,4.414330,-6.349112,5.164479,-3.789605,-7.107860,7.664133,-9.230213,5.316023,3.131266,3.072036,1.739396,9.149972,-7.760237,3.095782,5.147335,-4.955721,-7.625818,9.441215,3.944498,8.889899,0.164526,3.473906,5.053405,-3.042968,6.335045,8.783563,-7.618346,-9.255624,2.258792,-1.404218,-1.011490,3.875932,4.388739,-1.653937,-7.147591,6.154514,-6.153437,5.721563,2.985374,-0.153046,-1.560674,-8.527028,0.942402,0.506764,-2.414913,3.981879,-5.053243,-8.684159,2.298009,7.041555,-9.938428,-6.268689,6.045926,-7.633764,1.788229,-3.660610,4.393701,-1.247051,4.976079,2.009979,-3.123434,-7.205553,7.213341,-9.767321,0.236324,-8.793032,-3.691756,-2.924783,2.976875,1.421211,-2.174051,-2.561952,-8.809918,-5.022043,-1.335491,5.490942,-4.277717,1.429753,-5.612849,-6.717104,8.615410,-8.048281,3.158110,-0.531786,9.053755,7.305364,2.315343,3.361887,1.846212,6.386111,1.429925,-6.879191,-6.550845,3.581792,7.738334,-5.093116,2.946980,7.784599,4.132163,7.148140,1.472481,-5.646508,-3.130481,-0.966604,3.473643,2.433500,-2.524070,-1.826791,7.895308,-1.797289,-5.765189,-3.221483,1.024544,-1.396464,8.688319,5.481862,5.455356,8.015852,-0.509055,2.024670,8.713393,-6.319777,-7.795931,-1.689283,2.170830,-5.649593,9.533596,3.067963,-2.909212,4.392195,1.647212,-4.705685,0.406741,-7.951085,4.248971,8.390554,-9.810276,0.776248,9.674104,-6.624901,-5.531844,-1.756555,2.117919,-6.000137,1.755471,3.205442,-8.357572,6.336921,0.404368,9.026857,8.929335,6.029197,5.011407,-4.631428,-9.023924,8.815332,-8.697083,-3.305705,6.089445,7.551748,9.353996,6.928894,3.972523,8.940286,-9.161522,3.655425,5.540833,7.779091,7.412090,8.122032,-0.782235,-6.596818,-4.442934,8.411611,5.808320,8.286809,3.563706,2.484184,4.196959,-6.421235,7.899355,-7.949030,-5.517610,2.583427,0.404943,-7.980656,2.584898,-9.864579,5.798839,4.925562,2.538980,5.165227,4.740433,0.709604,3.540034,-4.854502,9.582815,-7.588198,-5.417116,-6.930568,-7.072603,-0.330136,3.164013,-5.387899,-7.751403,-7.558228,-4.839522,-1.938124,-7.925862,-7.185148,6.178273,-2.644336,3.149629,5.592265,8.596649,-3.172288,-6.506471,8.785367,6.355128,-0.104396,-1.864995,9.235772,7.804065,-6.052825,7.358227,7.821146,-1.898634,-7.823116,-0.288071,6.202485,1.146018,-1.803208,-4.594710,5.872795,3.486566,9.111718,-8.642576,-5.017477,5.675609,6.709263,9.312514,9.173681,8.945633,-3.358801,0.611441,1.707901,1.302496,-2.046956,9.376801,7.332919,-0.719087,-3.980955,-8.704252,-0.764541,-3.204274,-6.643655,-5.808361,6.221911,2.855865,-0.331194,7.294634,9.588500,2.621060,4.611766,-2.649261,5.942876,4.303439,7.379366,-8.481645,8.152804,-2.427867,-9.242426,-2.673691,-9.663165,9.466307,-0.876370,-8.815331,4.724568,-9.822268,-3.354816,-5.252200,7.045687,-3.578006,3.685531,-2.317096,5.880289,-3.664754,6.337961,1.395958,9.048455,-8.657198,5.474304,4.189783,-4.290968,2.935294,-3.154944,-7.769578,-6.017051,6.668005,4.089186,-1.574110,-4.790165,9.407573,3.518078,1.966634,3.930426,8.951997,-7.293978,-6.646678,-2.180964,7.253353,4.750159,-5.036389,-2.376201,2.487617,1.590016,-1.373684,-9.858523,5.645142,-5.508551,-4.119786,9.077915,7.435238,9.552085,-8.050177,7.903790,-7.392240,-3.059373,-5.416117,-9.112409,-7.438914,-9.648736,9.914565,-2.608145,-1.237604,7.272416,4.878306,-9.408762,-9.247236,-4.671008,1.252694,5.550611,-7.979721,-3.412530,-6.436513,-9.349042,-5.436824,-5.616279,0.433643,5.101147,5.159724,9.395034,7.741592,0.681252,5.693837,-7.221240,-5.581454,-4.764737,2.379350,5.345834,-8.671500,6.101189,-4.816308,-5.395292,-7.914212,-4.916823,9.474473,-4.139436,5.889057,-9.017456,9.015085,-7.763569,-4.600522,-0.701622,5.537411,-2.665599,4.414387,1.466253,2.558838,-1.497502,5.674694,3.264731,-6.515379,0.025619,-7.783779,-8.701353,-1.479857,1.589000,8.576161,6.438441,4.864215,-4.613618,2.726534,0.694461,-3.345346,-2.017479,-1.787175,-5.247816,-0.637160,-9.331673,4.957525,-9.175719,8.539574,6.421669,-9.060154,-8.871117,-9.466056,-9.972618,-7.417665,-2.761071,2.327087,-3.911323,-7.945342,-4.569688,-9.604478,6.218312,7.873126,8.514052,5.938729,-3.847207,2.638471,-3.854306,7.185095,3.792180,-6.934150,-6.324219,5.259042,6.962540,5.746629,-0.117405,-0.636850,-9.774466,1.409350,7.885857,-7.903537,-9.667862,-3.436381,5.152877,-2.123178,2.483571,-8.999948,-4.027781,-6.132132,6.821227,-6.988160,6.712477,-8.698564,-0.610210,6.741875,-9.876716,0.100506,-8.756086,1.756804,-7.045679,-2.362716,-3.444820,3.392923,-7.043407,-0.972578,-9.835384,2.608561,-1.042917,9.212674,-2.476830,-2.180570,-0.154444,3.633242,6.069047,-9.113587,-6.285604,4.557295,3.347270,-7.844337,-8.762158,7.719685,5.702512,-3.796702,-1.179598,-2.605274,-5.762619,-4.895487,4.220183,3.760300,-8.953794,-2.944634,4.171491,-9.362947,-5.595492,-9.527641,2.096417,0.062054,7.928367,-2.741407,3.621309,-8.605378,2.804945,-1.187146,-0.282985,5.290948,8.352896,-0.609864,8.918895,0.715639,8.086839,-7.684563,-3.578767,4.214610,3.074466,9.984507,-3.375086,3.900076,-0.821980,-8.061534,6.367623,-5.705984,4.414611,6.295665,0.545355,6.632097,7.715625,8.609580,0.124745,8.570894,4.893733,-0.413534,-9.994825,5.029202,3.399293,0.805739,-6.394793], dtype = "float32")#candidate|1293|(567,)|const|float32
var_1294 = relay.var("var_1294", dtype = "int32", shape = (154,))#candidate|1294|(154,)|var|int32
var_1295 = relay.var("var_1295", dtype = "int32", shape = (7, 220))#candidate|1295|(7, 220)|var|int32
call_1292 = relay.TupleGetItem(func_1088_call(relay.reshape(const_1293.astype('float32'), [9, 9, 7]), relay.reshape(var_1294.astype('int32'), [154,]), relay.reshape(var_1295.astype('int32'), [1540,]), ), 6)
call_1296 = relay.TupleGetItem(func_1092_call(relay.reshape(const_1293.astype('float32'), [9, 9, 7]), relay.reshape(var_1294.astype('int32'), [154,]), relay.reshape(var_1295.astype('int32'), [1540,]), ), 6)
const_1306 = relay.const([[[-7,4,-5,-2,5,6,-4,8,-7,-9],[-5,7,4,-8,-8,-8,3,-4,4,-9],[6,7,-2,-5,-9,7,7,8,2,2],[2,4,3,-6,-7,-3,10,2,5,2],[-6,-2,3,-4,5,-4,7,4,7,4],[5,-7,-9,9,-10,2,10,-9,-1,9],[-1,4,-2,-8,6,-2,-1,-10,-10,8],[1,-4,-3,5,5,1,8,4,2,8],[-5,-3,-9,-1,-1,7,-9,5,5,8],[-6,8,4,6,7,6,-4,8,-1,2],[-8,-5,1,10,2,10,9,-3,-3,9],[-3,-9,7,2,-8,1,3,-4,-10,4],[4,-7,1,4,-1,1,-1,2,-10,5],[9,4,5,-10,-4,-4,-6,9,-3,3],[-7,9,-7,-7,7,6,9,-10,10,9]],[[4,-2,8,-2,-4,6,-9,3,-6,-6],[-10,1,-4,6,-2,-10,10,-9,-3,9],[5,-3,10,4,-4,-9,3,-8,10,3],[-8,-10,-6,7,9,-1,3,1,-7,9],[3,10,9,-5,9,-3,-2,9,10,-7],[4,-5,1,-10,9,2,9,-10,-9,7],[2,6,3,-1,-3,-3,-8,6,2,-8],[5,-3,-3,3,7,-9,-2,-2,-2,7],[1,4,6,-9,-6,-9,8,-7,8,-2],[-2,3,-9,8,-8,-9,-4,-10,-3,-1],[7,-9,-6,7,-8,9,1,-7,-7,-4],[-9,7,3,8,-6,4,10,10,2,8],[-8,4,-10,-2,4,-3,-6,-10,8,5],[-6,-9,2,10,7,-6,8,-6,8,5],[-3,-9,-9,-10,-7,-4,3,9,3,3]]], dtype = "uint8")#candidate|1306|(2, 15, 10)|const|uint8
bop_1307 = relay.left_shift(bop_1280.astype('int32'), relay.reshape(const_1306.astype('int32'), relay.shape_of(bop_1280))) # shape=(2, 15, 10)
func_391_call = mod.get_global_var('func_391')
func_395_call = mutated_mod.get_global_var('func_395')
call_1311 = relay.TupleGetItem(func_391_call(relay.reshape(var_1294.astype('int32'), [1, 11, 14]), relay.reshape(var_1295.astype('int32'), [10, 11, 14]), relay.reshape(const_1260.astype('float32'), [968,]), ), 6)
call_1312 = relay.TupleGetItem(func_395_call(relay.reshape(var_1294.astype('int32'), [1, 11, 14]), relay.reshape(var_1295.astype('int32'), [10, 11, 14]), relay.reshape(const_1260.astype('float32'), [968,]), ), 6)
output = relay.Tuple([call_1259,const_1260,call_1267,var_1268,var_1269,call_1271,bop_1287,call_1292,const_1293,var_1294,var_1295,bop_1307,call_1311,])
output2 = relay.Tuple([call_1261,const_1260,call_1270,var_1268,var_1269,call_1272,bop_1287,call_1296,const_1293,var_1294,var_1295,bop_1307,call_1312,])
func_1314 = relay.Function([var_1247,var_1263,var_1268,var_1269,var_1294,var_1295,], output)
mod['func_1314'] = func_1314
mod = relay.transform.InferType()(mod)
var_1315 = relay.var("var_1315", dtype = "float32", shape = (2, 15, 1))#candidate|1315|(2, 15, 1)|var|float32
var_1316 = relay.var("var_1316", dtype = "float32", shape = (2, 15, 10))#candidate|1316|(2, 15, 10)|var|float32
var_1317 = relay.var("var_1317", dtype = "float64", shape = (18,))#candidate|1317|(18,)|var|float64
var_1318 = relay.var("var_1318", dtype = "float64", shape = (252,))#candidate|1318|(252,)|var|float64
var_1319 = relay.var("var_1319", dtype = "int32", shape = (154,))#candidate|1319|(154,)|var|int32
var_1320 = relay.var("var_1320", dtype = "int32", shape = (7, 220))#candidate|1320|(7, 220)|var|int32
output = func_1314(var_1315,var_1316,var_1317,var_1318,var_1319,var_1320,)
func_1321 = relay.Function([var_1315,var_1316,var_1317,var_1318,var_1319,var_1320,], output)
mutated_mod['func_1321'] = func_1321
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1337 = relay.var("var_1337", dtype = "float64", shape = (11, 3, 7))#candidate|1337|(11, 3, 7)|var|float64
uop_1338 = relay.asinh(var_1337.astype('float64')) # shape=(11, 3, 7)
bop_1341 = relay.bitwise_or(uop_1338.astype('int64'), relay.reshape(var_1337.astype('int64'), relay.shape_of(uop_1338))) # shape=(11, 3, 7)
uop_1344 = relay.acosh(uop_1338.astype('float64')) # shape=(11, 3, 7)
bop_1346 = relay.greater(uop_1344.astype('bool'), relay.reshape(bop_1341.astype('bool'), relay.shape_of(uop_1344))) # shape=(11, 3, 7)
uop_1354 = relay.tan(uop_1344.astype('float64')) # shape=(11, 3, 7)
bop_1358 = relay.less(uop_1354.astype('bool'), relay.reshape(uop_1338.astype('bool'), relay.shape_of(uop_1354))) # shape=(11, 3, 7)
bop_1368 = relay.bitwise_and(uop_1354.astype('uint64'), relay.reshape(uop_1338.astype('uint64'), relay.shape_of(uop_1354))) # shape=(11, 3, 7)
var_1371 = relay.var("var_1371", dtype = "uint64", shape = (11, 3, 7))#candidate|1371|(11, 3, 7)|var|uint64
bop_1372 = relay.floor_divide(bop_1368.astype('float32'), relay.reshape(var_1371.astype('float32'), relay.shape_of(bop_1368))) # shape=(11, 3, 7)
bop_1385 = relay.logical_xor(bop_1368.astype('uint16'), relay.reshape(uop_1338.astype('uint16'), relay.shape_of(bop_1368))) # shape=(11, 3, 7)
output = relay.Tuple([bop_1346,bop_1358,bop_1372,bop_1385,])
output2 = relay.Tuple([bop_1346,bop_1358,bop_1372,bop_1385,])
func_1389 = relay.Function([var_1337,var_1371,], output)
mod['func_1389'] = func_1389
mod = relay.transform.InferType()(mod)
var_1390 = relay.var("var_1390", dtype = "float64", shape = (11, 3, 7))#candidate|1390|(11, 3, 7)|var|float64
var_1391 = relay.var("var_1391", dtype = "uint64", shape = (11, 3, 7))#candidate|1391|(11, 3, 7)|var|uint64
output = func_1389(var_1390,var_1391,)
func_1392 = relay.Function([var_1390,var_1391,], output)
mutated_mod['func_1392'] = func_1392
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1421 = relay.const(8, dtype = "int64")#candidate|1421|()|const|int64
const_1422 = relay.const([[-3,6,-5,-6,8,8,-8,-8,4]], dtype = "int64")#candidate|1422|(1, 9)|const|int64
bop_1423 = relay.less_equal(const_1421.astype('bool'), const_1422.astype('bool')) # shape=(1, 9)
var_1426 = relay.var("var_1426", dtype = "bool", shape = (1, 9))#candidate|1426|(1, 9)|var|bool
bop_1427 = relay.divide(bop_1423.astype('float64'), relay.reshape(var_1426.astype('float64'), relay.shape_of(bop_1423))) # shape=(1, 9)
uop_1430 = relay.asin(bop_1427.astype('float32')) # shape=(1, 9)
bop_1433 = relay.not_equal(bop_1423.astype('bool'), relay.reshape(uop_1430.astype('bool'), relay.shape_of(bop_1423))) # shape=(1, 9)
output = bop_1433
output2 = bop_1433
func_1436 = relay.Function([var_1426,], output)
mod['func_1436'] = func_1436
mod = relay.transform.InferType()(mod)
var_1437 = relay.var("var_1437", dtype = "bool", shape = (1, 9))#candidate|1437|(1, 9)|var|bool
output = func_1436(var_1437)
func_1438 = relay.Function([var_1437], output)
mutated_mod['func_1438'] = func_1438
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1440 = relay.var("var_1440", dtype = "float64", shape = (12, 11, 16))#candidate|1440|(12, 11, 16)|var|float64
uop_1441 = relay.exp(var_1440.astype('float64')) # shape=(12, 11, 16)
bop_1443 = relay.add(uop_1441.astype('uint64'), relay.reshape(var_1440.astype('uint64'), relay.shape_of(uop_1441))) # shape=(12, 11, 16)
bop_1446 = relay.minimum(uop_1441.astype('uint64'), relay.reshape(var_1440.astype('uint64'), relay.shape_of(uop_1441))) # shape=(12, 11, 16)
output = relay.Tuple([bop_1443,bop_1446,])
output2 = relay.Tuple([bop_1443,bop_1446,])
func_1454 = relay.Function([var_1440,], output)
mod['func_1454'] = func_1454
mod = relay.transform.InferType()(mod)
var_1455 = relay.var("var_1455", dtype = "float64", shape = (12, 11, 16))#candidate|1455|(12, 11, 16)|var|float64
output = func_1454(var_1455)
func_1456 = relay.Function([var_1455], output)
mutated_mod['func_1456'] = func_1456
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1485 = relay.var("var_1485", dtype = "uint16", shape = (16, 6))#candidate|1485|(16, 6)|var|uint16
var_1486 = relay.var("var_1486", dtype = "uint16", shape = (16, 6))#candidate|1486|(16, 6)|var|uint16
bop_1487 = relay.equal(var_1485.astype('bool'), relay.reshape(var_1486.astype('bool'), relay.shape_of(var_1485))) # shape=(16, 6)
var_1491 = relay.var("var_1491", dtype = "bool", shape = (16, 6))#candidate|1491|(16, 6)|var|bool
bop_1492 = relay.not_equal(bop_1487.astype('bool'), relay.reshape(var_1491.astype('bool'), relay.shape_of(bop_1487))) # shape=(16, 6)
func_72_call = mod.get_global_var('func_72')
func_75_call = mutated_mod.get_global_var('func_75')
const_1497 = relay.const([-8.013487,-4.460290,7.376603,-0.209253,6.311051,-4.709310,-7.884910,-4.256057,9.342924,0.797999,9.554392,-4.971242,5.996518,-7.915437,5.836447,1.324553,-5.054585,8.481499,-0.672975,6.704257,7.200478,-6.976953,0.462280,-6.399844,8.048792,7.573465,6.835004,-5.727331,-4.857715,-4.541997,-6.745704,0.314843,0.322523,-8.815954,9.493452,1.016067,-5.323089,-5.262792,-9.274251,-5.164261,-0.659470,-5.170851,8.078026,1.662557,-8.264920,7.364604,7.047564,3.051625,-7.474457,-4.754950,-5.529132,-9.376411,-1.402358,-5.898400,-8.399680,-3.092272,-1.619372,-4.264225,5.129008,4.748134,3.127599,6.890764,-9.647801,5.363000,-5.199081,-4.263385,3.859609,7.392716,6.490328,1.004675,-1.288978,-3.685403,-9.566264,-9.237755,-7.086670,9.415262,7.854057,-9.323019,-7.293365,-4.739783,-3.678475], dtype = "float32")#candidate|1497|(81,)|const|float32
call_1496 = func_72_call(relay.reshape(const_1497.astype('float32'), [9, 3, 3]))
call_1498 = func_72_call(relay.reshape(const_1497.astype('float32'), [9, 3, 3]))
bop_1499 = relay.bitwise_xor(var_1486.astype('int16'), relay.reshape(bop_1487.astype('int16'), relay.shape_of(var_1486))) # shape=(16, 6)
output = relay.Tuple([bop_1492,call_1496,const_1497,bop_1499,])
output2 = relay.Tuple([bop_1492,call_1498,const_1497,bop_1499,])
func_1508 = relay.Function([var_1485,var_1486,var_1491,], output)
mod['func_1508'] = func_1508
mod = relay.transform.InferType()(mod)
mutated_mod['func_1508'] = func_1508
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1508_call = mutated_mod.get_global_var('func_1508')
var_1510 = relay.var("var_1510", dtype = "uint16", shape = (16, 6))#candidate|1510|(16, 6)|var|uint16
var_1511 = relay.var("var_1511", dtype = "uint16", shape = (16, 6))#candidate|1511|(16, 6)|var|uint16
var_1512 = relay.var("var_1512", dtype = "bool", shape = (16, 6))#candidate|1512|(16, 6)|var|bool
call_1509 = func_1508_call(var_1510,var_1511,var_1512,)
output = call_1509
func_1513 = relay.Function([var_1510,var_1511,var_1512,], output)
mutated_mod['func_1513'] = func_1513
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1515 = relay.const([[[0.262501,9.354110,-5.264332,-2.305463,-5.663072],[-2.893434,3.963300,-5.136617,-3.692058,9.428384],[-8.436082,6.054222,3.140466,3.558673,-2.967482],[5.777974,-8.442998,-8.087185,0.286300,-9.119257],[-5.764121,-8.825236,-2.744389,-8.985033,-0.905918]],[[0.289671,3.835778,-0.566542,1.255236,-2.584883],[-5.882719,9.726338,-4.378214,9.861099,-3.605433],[4.532040,2.495756,-0.073030,7.001169,-7.281528],[1.033529,-5.814563,-2.586116,5.530891,-9.565824],[8.778771,6.529478,-1.932837,-1.901174,-4.829882]],[[8.085819,7.206920,2.386231,-9.639958,2.401569],[-1.664057,4.991892,4.477886,0.330667,4.888186],[-8.424211,-4.229889,-8.771647,-1.687827,-6.606823],[0.367454,-6.566651,-2.765614,8.728162,-9.566098],[3.191509,5.262227,-8.458860,-6.015985,0.922450]],[[6.458817,-0.649942,-5.482674,-8.825254,6.746361],[5.907979,-8.998786,-5.052085,6.016174,-5.582302],[-0.316110,-9.842356,-6.310059,-9.928408,-1.311826],[-9.421732,-8.951404,3.182231,8.159546,9.151874],[-8.309948,-1.004479,-7.297106,-8.028441,-9.165945]],[[-3.123677,-3.550911,-7.995268,9.006794,-1.051722],[-8.118385,8.711685,2.547347,6.158779,2.583451],[-5.294539,5.850484,-3.080077,4.500874,0.374804],[3.597504,-0.223800,-8.150314,-3.605331,8.055998],[4.850972,-4.024403,-1.693339,5.176349,-1.309951]],[[-4.873592,6.828906,0.467070,-9.065499,-5.513127],[-5.175726,9.483758,8.194822,3.650628,3.845385],[-4.132278,6.501638,1.188023,0.439517,9.966708],[6.615002,-4.830898,-1.934566,5.352374,-6.728114],[-5.654707,3.156002,8.137278,-8.504743,3.240944]],[[6.379893,-7.312424,-4.787808,5.798905,2.268139],[9.105130,-6.996638,6.414979,-8.900944,7.533649],[-7.726040,1.160105,4.115301,-5.851851,-9.402368],[0.133256,-8.524363,-4.548493,-6.317082,-6.679256],[-2.607553,-0.297035,8.259486,1.032341,-8.324554]],[[-2.521147,2.021148,2.937617,-5.140858,-8.197677],[4.396373,-2.685300,0.238017,-4.656969,-3.412453],[7.169949,-2.856100,-5.599236,6.494925,6.148632],[-5.678837,-1.404870,-4.524577,0.872897,-7.726691],[2.736015,0.621698,2.363653,-9.013513,-9.654079]],[[-2.440495,0.800381,-9.288523,-8.548775,-7.725002],[9.797024,2.296700,-5.499054,3.527980,-3.842660],[6.082933,7.590706,1.808664,0.833634,-8.012868],[1.157175,-9.779939,-6.069024,-4.017617,-4.553773],[-7.234756,1.087131,-2.533540,4.605705,5.091572]],[[5.046990,1.021478,-6.548764,4.634209,-1.871828],[2.367399,-6.734579,5.149293,-7.475555,7.624090],[-0.451863,3.624971,2.044570,5.346228,4.950620],[-0.255927,3.832180,-0.111415,-5.545074,8.907952],[2.982026,-8.121958,-6.485516,-5.154313,8.332178]],[[-5.701478,-5.925909,-0.628378,0.181168,-1.078962],[-5.336177,7.663215,8.717518,3.898812,3.962056],[-3.929499,-1.248402,-3.416489,-0.612888,5.467933],[-0.334611,5.247694,8.329335,-9.464020,3.589495],[-6.449916,1.560199,2.702710,4.752139,-3.755089]],[[-4.309868,7.852034,-9.498934,8.416893,8.629254],[-2.779139,-5.463590,-0.804093,3.929793,-4.601769],[7.866923,5.601840,-3.576093,3.687732,9.425379],[-4.375318,0.871510,-6.049740,0.255708,-9.790878],[7.359462,-2.052935,4.446659,4.996463,3.264291]],[[5.886279,-0.261899,2.728046,-4.833012,-9.943289],[2.858223,5.662495,8.313701,-5.140386,4.491767],[0.897801,2.027871,8.977760,-9.148878,-0.818182],[-3.814447,-6.673367,-5.304083,-3.488844,2.616270],[-3.596578,4.920170,8.485675,-9.377084,-5.618863]],[[-3.701195,-2.207755,5.770981,-1.158568,-5.973844],[-3.601917,1.453250,-8.207103,-0.559067,-7.389361],[4.541105,-6.901571,-1.555348,5.776953,6.780454],[-2.318663,7.745150,-6.482165,-1.914225,-0.549751],[5.268961,-5.326828,-8.139061,-3.673407,9.832145]],[[-2.853238,8.732837,0.903707,-2.322611,-3.734459],[-1.349196,4.066763,2.732916,0.557946,0.299526],[3.482830,-2.184408,9.827112,-3.117956,5.720485],[-4.981805,-5.997787,9.261547,4.406328,3.992166],[5.925783,-5.981664,2.447376,-9.606951,-3.499159]]], dtype = "float32")#candidate|1515|(15, 5, 5)|const|float32
uop_1516 = relay.exp(const_1515.astype('float32')) # shape=(15, 5, 5)
bop_1520 = relay.right_shift(const_1515.astype('int64'), relay.reshape(uop_1516.astype('int64'), relay.shape_of(const_1515))) # shape=(15, 5, 5)
bop_1524 = relay.bitwise_and(const_1515.astype('int8'), relay.reshape(bop_1520.astype('int8'), relay.shape_of(const_1515))) # shape=(15, 5, 5)
func_1454_call = mod.get_global_var('func_1454')
func_1456_call = mutated_mod.get_global_var('func_1456')
var_1528 = relay.var("var_1528", dtype = "float64", shape = (44, 48))#candidate|1528|(44, 48)|var|float64
call_1527 = relay.TupleGetItem(func_1454_call(relay.reshape(var_1528.astype('float64'), [12, 11, 16])), 1)
call_1529 = relay.TupleGetItem(func_1456_call(relay.reshape(var_1528.astype('float64'), [12, 11, 16])), 1)
bop_1530 = relay.logical_or(bop_1520.astype('bool'), relay.reshape(uop_1516.astype('bool'), relay.shape_of(bop_1520))) # shape=(15, 5, 5)
bop_1542 = relay.maximum(bop_1520.astype('uint32'), relay.reshape(bop_1524.astype('uint32'), relay.shape_of(bop_1520))) # shape=(15, 5, 5)
output = relay.Tuple([call_1527,var_1528,bop_1530,bop_1542,])
output2 = relay.Tuple([call_1529,var_1528,bop_1530,bop_1542,])
func_1547 = relay.Function([var_1528,], output)
mod['func_1547'] = func_1547
mod = relay.transform.InferType()(mod)
mutated_mod['func_1547'] = func_1547
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1548 = relay.var("var_1548", dtype = "float64", shape = (44, 48))#candidate|1548|(44, 48)|var|float64
func_1547_call = mutated_mod.get_global_var('func_1547')
call_1549 = func_1547_call(var_1548)
output = call_1549
func_1550 = relay.Function([var_1548], output)
mutated_mod['func_1550'] = func_1550
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1714 = relay.const([[[4],[1],[-7],[-1],[9],[4],[-4],[-3],[5]],[[-4],[-7],[-2],[2],[1],[-9],[6],[-2],[-1]],[[-3],[1],[-8],[9],[4],[-3],[-4],[-7],[-5]],[[-7],[5],[3],[-4],[9],[-7],[5],[5],[-1]],[[3],[-9],[4],[7],[8],[-6],[-5],[2],[-4]],[[-3],[-3],[4],[-3],[7],[5],[2],[-9],[-4]],[[-2],[10],[4],[-5],[-10],[-10],[1],[3],[-6]],[[-3],[6],[-10],[1],[6],[3],[-5],[-10],[7]]], dtype = "uint8")#candidate|1714|(8, 9, 1)|const|uint8
var_1715 = relay.var("var_1715", dtype = "uint8", shape = (8, 9, 11))#candidate|1715|(8, 9, 11)|var|uint8
bop_1716 = relay.bitwise_and(const_1714.astype('uint8'), var_1715.astype('uint8')) # shape=(8, 9, 11)
var_1721 = relay.var("var_1721", dtype = "uint8", shape = (8, 9, 11))#candidate|1721|(8, 9, 11)|var|uint8
bop_1722 = relay.multiply(var_1715.astype('float32'), relay.reshape(var_1721.astype('float32'), relay.shape_of(var_1715))) # shape=(8, 9, 11)
uop_1726 = relay.cos(bop_1716.astype('float64')) # shape=(8, 9, 11)
var_1729 = relay.var("var_1729", dtype = "float64", shape = (8, 9, 11))#candidate|1729|(8, 9, 11)|var|float64
bop_1730 = relay.less_equal(uop_1726.astype('bool'), relay.reshape(var_1729.astype('bool'), relay.shape_of(uop_1726))) # shape=(8, 9, 11)
bop_1735 = relay.floor_mod(bop_1730.astype('float64'), relay.reshape(uop_1726.astype('float64'), relay.shape_of(bop_1730))) # shape=(8, 9, 11)
func_72_call = mod.get_global_var('func_72')
func_75_call = mutated_mod.get_global_var('func_75')
var_1752 = relay.var("var_1752", dtype = "float32", shape = (81,))#candidate|1752|(81,)|var|float32
call_1751 = func_72_call(relay.reshape(var_1752.astype('float32'), [9, 3, 3]))
call_1753 = func_72_call(relay.reshape(var_1752.astype('float32'), [9, 3, 3]))
uop_1755 = relay.log(uop_1726.astype('float64')) # shape=(8, 9, 11)
output = relay.Tuple([bop_1722,bop_1735,call_1751,var_1752,uop_1755,])
output2 = relay.Tuple([bop_1722,bop_1735,call_1753,var_1752,uop_1755,])
F = relay.Function([var_1715,var_1721,var_1729,var_1752,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1715,var_1721,var_1729,var_1752,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1715= np.array([[[10,-2,-6,10,-2,-3,10,-10,-7,-1,-4],[9,9,1,10,5,-8,4,3,1,3,-4],[3,5,-3,-8,5,5,5,-3,2,2,-5],[3,2,-3,7,10,-3,10,3,3,5,3],[-5,-2,-4,-8,-5,-7,6,-4,7,-5,-10],[8,-10,1,-2,5,3,-6,-6,-6,-7,7],[-2,8,-6,-4,7,8,-5,-3,7,4,-7],[-7,-7,3,-5,-9,3,8,2,4,4,-7],[4,5,9,-1,4,-1,-10,-6,5,2,7]],[[-5,-2,8,-2,-4,-6,10,-2,6,-9,-6],[-9,6,10,-2,-9,-7,8,4,2,-8,1],[-6,7,7,-6,8,7,-1,-3,-5,-2,1],[8,9,7,8,3,9,5,9,10,7,1],[-4,3,-7,4,2,-7,-1,8,2,-5,-3],[-8,-10,-10,-6,8,-5,3,-3,-10,-8,6],[1,1,7,-6,-6,3,-3,-4,-5,-2,3],[-2,2,-1,-1,2,-3,7,10,-10,-8,-4],[-9,-1,-3,5,-8,-2,1,3,-10,-5,-9]],[[-5,-6,5,10,-6,-10,-3,1,6,-7,2],[-2,1,9,7,10,6,6,1,-3,-5,3],[-5,-8,-4,1,-2,-10,-7,10,-6,5,-8],[7,9,6,2,-3,-4,8,-5,-3,-2,-9],[1,-2,-10,10,1,9,7,5,-5,-8,1],[-8,-7,-3,-3,7,-10,4,9,1,-3,-10],[-6,-2,7,-1,-6,-5,9,1,8,9,-10],[-1,-6,8,3,-10,5,9,1,-2,-10,-1],[5,-4,-3,-5,5,-9,8,-10,5,7,3]],[[-4,9,-3,-3,9,-8,2,-5,2,3,-1],[-9,2,-3,6,9,2,7,7,2,9,1],[1,8,-8,-7,2,1,3,-2,-2,10,9],[9,-9,-3,1,10,2,7,7,-8,-3,-2],[5,-5,5,8,5,9,8,-2,10,1,10],[-1,-4,-7,-9,3,-2,-10,-6,-10,-6,4],[-5,-3,10,6,-3,-6,-9,4,-3,2,7],[-4,-2,3,7,4,-6,4,2,-6,8,-2],[7,5,-6,7,10,-4,8,-10,5,-5,-10]],[[6,1,-7,-6,-6,-8,2,7,-5,1,-9],[9,1,3,6,7,7,6,8,4,2,4],[-4,-5,10,-2,-2,10,4,1,9,4,7],[10,9,-9,4,8,6,10,-7,7,-3,3],[2,-9,-2,-7,-2,-4,10,5,7,-3,5],[9,6,-1,4,-6,10,9,8,-2,-2,-3],[-2,-6,10,-1,5,-6,7,9,5,-10,-3],[-8,-5,-1,-9,-9,1,-9,7,7,-4,-4],[-2,4,10,-2,-3,2,-1,2,7,2,-9]],[[10,-4,7,-10,9,-3,9,9,6,2,-7],[-3,4,4,-10,6,6,-1,-8,-5,-4,9],[2,5,-9,8,-9,-9,-2,6,4,6,-1],[-7,7,-5,-10,4,-4,2,5,1,10,4],[3,-6,3,-10,-6,-5,-7,-3,9,-1,-6],[10,4,5,3,7,-3,-4,-2,5,1,10],[2,-5,1,-8,10,10,9,-9,7,8,-7],[-8,-7,9,-3,-6,-4,-8,10,6,1,-3],[1,3,-7,8,5,7,7,2,6,-6,10]],[[7,-9,-9,9,1,5,8,6,8,-3,3],[-10,1,2,8,1,-3,10,-9,5,9,-5],[-4,4,-10,6,9,10,-1,9,-8,7,-9],[5,-6,-1,2,1,-6,-9,-3,2,10,6],[-6,-3,3,6,-6,1,1,6,-7,1,-3],[-2,3,10,7,7,1,8,1,-8,-4,1],[-3,1,6,-5,-10,7,10,7,5,3,-7],[10,6,8,-6,-7,6,9,8,2,9,-1],[7,10,-3,8,5,-9,5,-3,6,10,-8]],[[5,10,-3,-7,2,2,5,-7,7,-8,-5],[6,4,1,-6,-10,4,10,-3,-10,10,6],[-9,-6,-7,5,-9,-3,2,6,1,-1,-10],[-2,8,7,-6,-3,6,-1,6,-4,-6,-10],[10,-8,-6,8,2,6,-4,9,-5,-4,4],[3,-3,6,5,8,6,6,9,-5,-4,2],[-3,9,-5,-1,10,10,-5,3,-4,5,8],[-9,5,-9,-6,-8,-4,-9,10,10,3,3],[6,-8,-8,-10,6,5,-5,2,-5,-10,-7]]], dtype='uint8')
module1.set_input('var_1715', input_1715)
input_1721= np.array([[[-2,8,7,1,1,-8,8,2,4,9,-9],[4,-6,2,-10,7,-6,-3,8,4,1,-8],[10,9,10,-3,-4,2,6,8,-5,-9,9],[5,-7,-9,-3,-9,1,-6,6,1,6,10],[1,1,2,-6,-3,-2,-10,-1,10,-7,-8],[1,2,-3,-9,-10,10,6,-3,-7,-3,-9],[10,7,9,-10,-5,-10,4,5,6,-4,9],[2,-2,8,-8,8,6,7,-9,2,-7,-1],[6,4,3,2,-8,2,3,-3,5,-8,-9]],[[6,-1,2,-1,-7,-10,10,-9,-5,-7,6],[9,9,-3,6,-4,-9,-1,1,5,8,8],[-1,10,-3,5,7,9,7,-4,5,5,1],[5,7,-9,-7,3,-4,-6,-10,-8,-4,-2],[2,-5,-4,-1,6,6,-7,-6,-3,-4,4],[6,2,2,3,-8,1,-2,-4,1,-8,-1],[3,-3,10,5,-9,9,-7,7,6,6,9],[-6,10,2,6,7,3,-8,-7,-9,4,-8],[-1,-2,2,-8,-6,5,2,6,-1,7,-10]],[[10,-8,4,7,4,6,-8,-3,-9,-1,-5],[-2,-8,3,-10,10,2,7,9,-9,5,-8],[6,-1,10,-9,-4,-7,5,-8,5,-3,8],[-5,7,2,1,-6,1,2,-9,6,4,-6],[5,6,-3,-7,10,-8,7,-10,9,-3,-3],[-2,8,4,3,-2,3,8,-6,7,-8,4],[4,-2,-10,-3,-2,5,-3,1,-8,-4,-1],[-7,9,5,-10,3,-5,-8,1,-9,-6,-10],[-3,5,-4,-2,-1,-3,4,8,-9,9,7]],[[10,-7,-1,-1,-2,-2,6,7,-2,-9,-9],[-5,9,9,7,-3,3,5,-5,-5,-3,-5],[4,8,-10,-2,-2,-9,10,-6,3,-5,-3],[10,-1,6,-3,-4,3,-4,-9,-4,-3,1],[-1,2,10,2,-2,-1,9,-8,6,-9,3],[2,2,-4,-8,-10,-6,5,-2,9,-1,-8],[6,3,7,5,-5,-4,4,2,5,-3,6],[4,6,3,-4,8,-6,-5,10,3,-6,4],[4,-4,-10,7,6,8,-7,-9,-4,2,-5]],[[3,7,-5,-10,5,-7,-3,5,-4,3,4],[3,-2,2,6,-1,7,2,2,-8,-8,-3],[1,2,2,-7,7,2,4,-3,3,7,3],[9,5,-10,4,5,5,3,3,4,8,7],[-3,-4,4,6,3,3,-5,-3,8,6,-3],[3,-9,-6,-4,-2,-3,3,8,-5,5,10],[-2,-10,-1,6,-7,10,5,-4,-8,7,-3],[-9,10,-1,-3,-6,6,-7,-4,8,3,9],[3,8,2,-3,8,5,7,4,8,6,7]],[[10,-8,5,8,9,9,-3,7,-5,9,4],[5,5,-9,9,4,-9,8,4,-6,-9,2],[-6,-9,5,-1,1,8,-1,-7,-5,10,3],[-8,3,-10,10,4,3,7,1,-7,-3,-10],[-6,-5,-10,-6,10,-2,9,7,7,7,7],[8,-3,-2,-1,-1,3,-7,8,8,9,-4],[3,8,-3,10,1,9,4,-10,-6,-4,-6],[2,6,3,1,4,9,7,-8,-1,6,3],[-3,-9,-2,8,5,2,-3,7,-2,-1,4]],[[2,-5,-3,5,3,6,7,-4,-8,8,-10],[-6,-4,-9,-1,10,-7,8,-8,-5,-3,4],[1,-6,6,-2,2,5,-10,10,9,7,-9],[-7,10,-7,-3,2,8,6,1,-2,5,8],[4,-9,1,1,2,6,-8,-4,5,-6,3],[1,-9,6,10,1,5,-9,5,8,-5,-9],[1,-5,-9,-1,2,-10,-5,-5,2,1,6],[-6,7,8,10,7,1,8,-3,-6,-1,6],[-3,-2,-8,4,10,-7,-6,1,4,-9,-9]],[[7,-8,-9,-9,6,7,-9,-9,-1,3,-8],[-4,-6,6,-3,2,7,5,8,2,-6,-2],[-5,7,1,-5,10,-5,-10,-2,6,-5,4],[10,3,-8,10,-5,-2,-3,2,-10,-9,-9],[-6,4,-6,4,10,-6,5,-6,-5,-1,1],[7,-2,-8,-4,2,9,-1,-6,7,-10,-10],[6,-3,5,7,8,3,-1,-4,7,4,-1],[-3,9,-2,-2,5,8,-10,-1,-3,10,-2],[-5,7,-2,10,-5,2,-10,4,-9,-1,-8]]], dtype='uint8')
module1.set_input('var_1721', input_1721)
input_1729= np.array([[[-5.543414,6.921954,3.828602,-8.379053,-4.495515,-8.629819,-5.018101,-3.503347,-5.858556,-9.581089,8.231231],[-4.369253,4.082317,-5.297559,-6.516901,-5.609947,-7.375889,-7.571109,0.683389,-9.546632,5.036568,-3.362316],[9.706478,-6.821697,-5.886025,9.041368,-2.637459,-4.266542,-3.319883,6.482678,8.635794,5.280893,5.506886],[0.608045,-2.699093,0.601399,-3.818551,-6.758773,-3.920062,1.833184,7.032000,-7.167414,9.016843,2.035923],[3.110727,-8.854501,-4.587009,2.379543,1.299756,-6.887565,-2.221702,9.351819,0.077032,-7.557648,5.365741],[-1.938254,-9.320806,-3.913808,0.968705,1.401212,-7.816196,5.099046,-2.487411,7.964910,4.798992,4.357426],[8.884761,8.466934,-5.751810,-5.010921,1.331412,3.219454,3.710920,8.711137,0.835501,9.018296,-9.576273],[7.558789,9.569885,7.008534,-4.875796,-7.923390,2.833146,6.292446,6.806469,7.575238,-7.562792,-9.113235],[-5.204806,3.371010,4.119885,-3.945286,4.433465,-2.177529,-2.746079,-7.761658,-1.376680,-1.014499,-6.942099]],[[-3.201560,3.075687,-9.330263,-9.708378,6.943380,3.219628,-9.280321,4.972767,-4.294635,-7.455454,-3.873104],[-2.292801,-7.540226,1.233421,0.224620,-8.031365,-8.336973,7.097041,6.068345,3.009300,5.164445,7.985796],[0.717557,-4.247797,-3.468598,-0.907760,5.891387,9.527112,-3.496713,-7.715213,-6.089639,8.544404,-4.780914],[2.676956,-5.863046,-3.022184,2.783433,8.635911,-9.882797,4.124822,1.035996,8.172451,-3.944288,-5.638295],[-0.674289,-7.063236,0.205130,9.114668,8.094486,3.088220,8.990363,6.403461,-8.148541,-1.454940,-3.663248],[2.806418,2.031032,-0.569032,7.906891,-8.794485,8.789237,-1.281491,-9.841495,-6.984939,-6.365532,9.497098],[4.507767,6.471132,-8.649440,-5.181045,4.913823,-4.380767,6.898675,-0.103923,7.174194,-7.107508,-5.326626],[2.955965,-3.711460,-9.788704,2.093921,-4.968801,-0.483063,-1.465612,3.727334,2.183495,-9.511152,-6.538026],[-5.425856,-4.649215,1.597158,-5.334411,2.158103,1.571132,5.283263,4.341672,0.949824,2.356538,4.342698]],[[-3.786460,-7.293905,7.898537,4.880909,-5.123278,-7.974380,6.390953,0.987985,7.221368,1.010491,-8.584894],[-9.086957,-4.166369,-0.978776,8.524762,0.085709,-9.318922,9.648692,2.869494,9.995195,-0.998634,-4.442095],[-7.833130,0.728379,0.611899,-4.077478,1.363281,8.039122,-4.154031,3.461648,2.225521,-7.313356,2.429360],[9.783806,-2.818836,-9.319321,-1.705902,3.355970,6.039329,4.665170,5.726865,-0.288343,-6.745515,-9.426921],[0.996822,7.424285,7.894362,1.500031,7.048578,3.695882,8.450028,2.140928,-5.426900,-3.749017,1.979077],[-6.130962,7.066267,-6.316770,-6.109753,2.766943,-9.991852,-4.222199,-7.983852,-0.926761,-7.554607,3.917702],[-0.569863,-8.421753,0.638115,-6.335147,-3.554515,-5.070862,8.755871,4.337040,5.403036,-6.278316,9.136256],[6.863537,-6.769047,-9.612635,2.750500,-2.282872,-2.617147,9.977482,-0.717080,-7.967480,-7.742176,-3.415810],[0.960851,-3.256260,-7.167436,3.921231,9.701179,0.967883,-8.667267,1.192855,-7.445022,1.971901,-5.844689]],[[-4.498305,-2.028648,4.196368,0.659340,2.705515,0.486618,-6.974825,-2.183848,-9.040182,-6.729129,8.452169],[2.499594,3.148198,-2.901746,-7.131248,8.084946,6.646089,6.094288,-8.528281,7.290285,-3.804335,4.243025],[-4.035784,-6.559241,-7.694201,2.324069,7.447711,-4.205254,-7.194271,-3.485657,5.156303,6.618771,0.606149],[0.489217,-9.498803,0.833482,1.115402,1.747888,-0.822810,-2.581800,-6.194184,-2.651410,-9.511979,-3.048898],[-4.726861,6.334082,-6.161296,-5.025807,-0.802979,-8.681249,-8.329280,1.445595,-9.340042,-6.530221,-8.895208],[2.659768,-7.856231,-8.602229,-6.712474,5.180903,9.662412,-9.165522,9.425122,-7.463316,-4.006845,-8.835260],[-8.798573,6.190960,-2.605357,-4.715958,-7.489670,-4.272576,0.898236,-6.278260,4.556411,-4.558952,-8.682161],[4.477167,-5.739510,8.397583,-8.259504,8.634378,2.818519,1.987166,-7.234298,-6.932723,-5.204178,1.240239],[-9.052394,0.477811,2.929075,-9.499075,2.360920,-9.498879,6.395427,-8.259611,2.203244,8.222397,-2.329272]],[[1.198528,-3.678122,-5.006636,-1.301930,-6.479456,7.454854,-4.903716,-5.327579,-7.052660,-0.798176,0.137702],[3.342731,0.175286,1.772361,6.367343,-8.477266,9.556871,8.004413,7.046945,4.425451,-0.843395,3.341171],[-8.947437,5.895280,4.340068,8.806336,-0.045095,3.323943,0.375497,-9.716632,-1.812179,2.586999,9.890404],[4.222953,-4.067413,-0.069552,7.282828,-9.606197,1.516346,7.431321,9.500557,3.827560,4.372619,-0.566031],[-3.823474,0.094325,6.548653,-6.041491,6.089807,1.549020,-5.231833,-0.832850,4.973356,6.812318,6.130302],[-7.404405,3.476100,-7.770588,-7.717913,-1.092303,4.819004,7.765984,-8.877265,5.711745,-1.878277,-2.858952],[-5.239971,-5.585252,0.746361,9.869853,-1.120020,4.285180,3.563533,-6.538176,-8.828563,-6.314007,4.441160],[-0.757668,0.162047,3.019246,-5.133489,4.822741,5.198536,7.395646,1.400070,6.380222,-9.015504,-8.799438],[-6.237256,5.088825,1.496048,-0.745182,9.593999,-2.378745,-8.002145,-1.369310,3.269215,6.003451,-7.742583]],[[6.389920,9.571852,6.078663,-3.066455,-8.970153,4.766502,1.707351,9.217219,4.094834,5.483452,-0.763239],[1.152366,-0.459358,-3.403578,0.304038,-0.258249,-0.231986,7.600419,3.070327,7.239140,-4.360064,3.331363],[8.130900,4.802337,-4.514814,9.963702,-0.196295,3.298257,1.961384,4.180691,-3.633090,-5.591491,2.809856],[5.204473,1.356861,-1.341023,5.131241,4.180169,5.716544,3.727823,3.252442,-0.679211,3.820110,6.376866],[8.920184,-3.869578,-8.528924,-3.346232,-4.527548,6.409061,6.285266,-4.495558,2.701210,9.591073,-3.920980],[-9.795790,7.904132,-0.153680,3.765091,-8.488461,-3.121905,-2.655531,3.363109,-4.138487,-9.259769,0.123870],[-6.267215,-4.063346,8.656175,-4.732788,-4.373826,-6.158194,1.821359,9.801636,-7.304603,3.136431,-5.624879],[5.356177,-5.590528,8.511113,5.805779,-3.604387,-6.638260,-4.144686,6.786887,-6.909907,7.326859,2.314639],[1.995009,2.539375,-8.133690,-0.685809,1.860078,-7.178506,8.811557,-2.632242,-8.915410,-8.568620,-6.718853]],[[6.512499,7.336350,3.558890,-2.386376,0.187013,7.593078,4.276630,9.093250,-6.051643,5.190627,8.071542],[7.373541,-2.625332,-0.123988,-4.451253,7.709445,-8.559566,5.846464,0.181540,7.154000,3.777176,-4.574127],[-0.606764,-3.333760,-3.719774,-1.657103,9.575048,6.773028,3.954625,-1.379417,-6.525081,9.014028,5.691310],[0.463298,-2.157519,7.150024,4.939103,-5.512029,-4.093938,6.409992,1.442858,-2.998923,6.452757,-2.374438],[7.891255,-7.225779,-3.955465,5.166390,8.002743,-5.322336,3.687253,1.544733,3.535261,-3.554074,6.266077],[-4.692990,1.323076,2.343541,9.652264,-8.086569,-0.337191,-5.429615,-3.952700,-0.313150,-9.695302,-6.041694],[5.863903,0.811665,1.559900,-1.626655,2.023329,0.709897,4.914879,7.575866,-3.969173,8.616218,-9.516301],[2.967494,0.098095,-2.550398,3.399644,2.247720,1.679331,2.572152,2.748394,2.834127,8.998499,2.194154],[3.831858,8.406987,-6.972992,-8.687424,-0.563927,-7.194799,-0.803893,-9.309147,0.041960,-7.923835,-0.154372]],[[9.115633,6.849327,-0.727103,-4.732868,1.566519,-1.056709,3.999391,5.535312,2.118167,-0.816250,-4.068490],[9.618504,-4.581507,-7.553195,6.766947,-7.180558,-0.502868,5.612488,-9.477666,7.361583,7.200995,-2.135498],[-7.013652,-3.539309,-3.954192,4.834435,7.629323,6.137359,1.298277,-2.337111,-1.338461,-0.060384,-7.350037],[8.576098,9.122079,-4.493971,-4.833347,0.633240,9.811145,-3.668999,-1.480722,-9.474492,-9.287657,5.785159],[4.876883,-2.188072,1.839452,1.104058,-3.208850,-7.239534,9.058492,-1.946265,-2.225565,-2.015229,-0.383898],[0.165660,5.942508,-0.907851,3.647909,5.372252,-0.054992,-9.221320,-3.674322,5.391974,-8.200317,-0.893125],[9.685957,9.045561,8.791338,6.800892,-7.827402,-6.619749,-4.060937,-4.063832,6.812683,-7.907121,9.318311],[5.372160,-4.732695,1.833544,-1.509753,-8.714559,-9.458943,0.787094,-2.394603,3.572780,6.460890,-7.913106],[4.346117,0.865462,-3.158963,-7.768538,-6.885251,-4.174914,-5.585785,5.509697,7.253819,-9.363812,8.062982]]], dtype='float64')
module1.set_input('var_1729', input_1729)
input_1752= np.array([6.392825,-8.282295,3.201769,4.135132,4.777135,-0.208265,5.218494,2.981512,-5.538783,2.959532,-4.898981,-6.879358,-0.389327,-0.718392,-2.338858,0.256882,5.527783,-9.334895,2.777099,-4.520186,-4.557531,-5.623924,5.629788,0.432210,7.150877,-8.085438,3.453567,-4.491642,9.574975,-1.924156,-3.995456,6.193390,-6.378055,-0.236550,3.733292,-6.494452,8.728805,3.538237,-5.247374,5.581929,7.384542,-3.843325,-1.833340,3.621194,5.896475,9.381881,6.409042,4.748964,8.084857,4.563693,-5.345448,-7.069890,-6.718185,-7.642981,3.696486,8.646912,-5.745519,1.818186,-6.862184,-9.306202,-9.663211,7.437733,-7.021510,6.367328,5.360091,8.329240,0.717276,3.611515,6.349829,-3.262027,1.638453,-4.612453,4.317033,9.190377,-4.768220,1.297780,3.540663,-9.310313,7.979484,1.586683,-3.466366], dtype='float32')
module1.set_input('var_1752', input_1752)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1715, input_1721, input_1729, input_1752, )
res3 = intrp3.evaluate()(input_1715, input_1721, input_1729, input_1752, )
res4 = intrp4.evaluate()(input_1715, input_1721, input_1729, input_1752, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
module5.set_input('var_1715', input_1715)
module5.set_input('var_1721', input_1721)
module5.set_input('var_1729', input_1729)
module5.set_input('var_1752', input_1752)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1715, input_1721, input_1729, input_1752, )
res7 = intrp7.evaluate()(input_1715, input_1721, input_1729, input_1752, )
res8 = intrp8.evaluate()(input_1715, input_1721, input_1729, input_1752, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
module9.set_input('var_1715', input_1715)
module9.set_input('var_1721', input_1721)
module9.set_input('var_1729', input_1729)
module9.set_input('var_1752', input_1752)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1715, input_1721, input_1729, input_1752, )
res11 = intrp11.evaluate()(input_1715, input_1721, input_1729, input_1752, )
res12 = intrp12.evaluate()(input_1715, input_1721, input_1729, input_1752, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
module13.set_input('var_1715', input_1715)
module13.set_input('var_1721', input_1721)
module13.set_input('var_1729', input_1729)
module13.set_input('var_1752', input_1752)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1715, input_1721, input_1729, input_1752, )
res15 = intrp15.evaluate()(input_1715, input_1721, input_1729, input_1752, )
res16 = intrp16.evaluate()(input_1715, input_1721, input_1729, input_1752, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
module17.set_input('var_1715', input_1715)
module17.set_input('var_1721', input_1721)
module17.set_input('var_1729', input_1729)
module17.set_input('var_1752', input_1752)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1715, input_1721, input_1729, input_1752, )
res19 = intrp19.evaluate()(input_1715, input_1721, input_1729, input_1752, )
res20 = intrp20.evaluate()(input_1715, input_1721, input_1729, input_1752, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
module21.set_input('var_1715', input_1715)
module21.set_input('var_1721', input_1721)
module21.set_input('var_1729', input_1729)
module21.set_input('var_1752', input_1752)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1715, input_1721, input_1729, input_1752, )
res23 = intrp23.evaluate()(input_1715, input_1721, input_1729, input_1752, )
res24 = intrp24.evaluate()(input_1715, input_1721, input_1729, input_1752, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()

'''6: TVMFuncCall
5: _ZNSt17_Function_handlerIFvN3tvm7runtime7
4: tvm::runtime::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const [clone .isra.808]
3: tvm::runtime::GraphExecutorCreate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module const&, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
2: tvm::runtime::GraphExecutor::Init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
1: tvm::runtime::GraphExecutor::SetupOpExecs()
0: tvm::runtime::GraphExecutor::CreateTVMOp(tvm::runtime::TVMOpParam const&, std::vector<DLTensor, std::allocator<DLTensor> > const&)

'''