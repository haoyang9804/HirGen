import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_44 = relay.var("var_44", dtype = "float32", shape = (7, 10, 14))#candidate|44|(7, 10, 14)|var|float32
var_45 = relay.var("var_45", dtype = "float32", shape = (7, 10, 14))#candidate|45|(7, 10, 14)|var|float32
bop_46 = relay.minimum(var_44.astype('float32'), relay.reshape(var_45.astype('float32'), relay.shape_of(var_44))) # shape=(7, 10, 14)
output = bop_46
output2 = bop_46
func_63 = relay.Function([var_44,var_45,], output)
mod['func_63'] = func_63
mod = relay.transform.InferType()(mod)
mutated_mod['func_63'] = func_63
mutated_mod = relay.transform.InferType()(mutated_mod)
func_63_call = mutated_mod.get_global_var('func_63')
var_65 = relay.var("var_65", dtype = "float32", shape = (7, 10, 14))#candidate|65|(7, 10, 14)|var|float32
var_66 = relay.var("var_66", dtype = "float32", shape = (7, 10, 14))#candidate|66|(7, 10, 14)|var|float32
call_64 = func_63_call(var_65,var_66,)
output = call_64
func_67 = relay.Function([var_65,var_66,], output)
mutated_mod['func_67'] = func_67
mutated_mod = relay.transform.InferType()(mutated_mod)
var_291 = relay.var("var_291", dtype = "float32", shape = (3, 1))#candidate|291|(3, 1)|var|float32
uop_292 = relay.tan(var_291.astype('float32')) # shape=(3, 1)
func_63_call = mod.get_global_var('func_63')
func_67_call = mutated_mod.get_global_var('func_67')
const_314 = relay.const([-1.391790,6.342302,-4.252127,-7.172092,-9.535105,-1.106656,2.806293,-3.925214,-9.916657,7.084479,4.514951,2.112446,1.030657,-4.375615,8.533226,-1.744189,7.381313,4.532756,7.898704,-6.422698,-6.154719,-2.537419,6.796266,-6.824273,3.958872,-6.286731,-8.187272,4.698613,2.687171,-9.315509,-7.950426,-0.527001,1.589490,5.453271,3.834029,-4.162743,8.717564,3.950690,9.721565,-4.753459,-4.914277,6.495916,-6.364617,-4.886879,9.534758,-6.610093,-6.257693,8.158792,8.511899,-6.851370,-2.247089,-5.975299,-2.015927,-6.266652,6.176915,-2.495087,5.984530,-5.301923,1.072518,5.742979,-7.186884,-1.954956,8.417286,-7.192447,-1.874921,9.581163,9.080034,-6.140665,-6.124538,-0.657553,-7.075027,4.520981,-5.464266,5.776079,-7.755215,-0.725050,1.336831,1.435905,-5.423429,2.196316,8.440646,2.282905,-5.144840,-3.254160,-4.815314,-2.053167,7.162367,-4.778173,6.862218,3.892163,5.033109,-7.413761,-3.029360,7.829392,8.358511,-5.335514,5.426240,-6.848766,9.739431,-3.994007,1.093043,-1.149164,-2.302277,-7.864464,4.949329,-0.696213,-8.433410,2.353958,-9.364116,2.174598,8.678766,-1.609244,-0.109541,-4.556921,2.295447,8.592358,7.477600,-1.852700,5.727583,9.659084,-3.629265,8.614161,6.377879,-7.349559,2.909448,2.107775,8.047128,4.415281,-5.471506,2.619863,8.077824,-8.464779,3.091036,-8.434621,-7.630768,4.851315,6.285792,0.678848,4.684916,7.164853,6.015093,9.360702,-5.955795,-1.695692,-5.621565,7.242194,5.655977,-4.207408,-0.292860,7.515376,-0.648970,9.954783,3.315894,-0.561787,-2.808097,5.939705,5.570657,-9.283962,5.401482,-9.378499,4.747736,8.259028,-4.305664,0.669061,3.732954,9.656293,9.303556,8.180236,3.426950,4.571490,8.645266,9.023094,4.385229,8.148152,5.241387,-9.446373,2.889266,9.160136,4.462534,-3.058711,7.174895,-9.407836,-9.122648,8.301773,-3.257463,-1.415253,0.198045,-6.420922,1.804186,7.942721,7.217047,9.230524,-9.380748,-9.859405,4.338600,-8.346401,-3.256301,2.684700,-4.511753,-7.523166,1.869913,2.371174,4.802124,5.036333,2.475988,0.168297,-1.597233,0.824840,0.699804,-6.290305,-0.778770,6.721873,-2.642126,4.826220,4.335955,1.503065,-6.863490,4.189594,-7.950308,5.210059,6.734711,-1.909388,8.667802,-8.274130,-3.860095,-4.420246,4.822339,7.015416,-3.646640,7.092309,2.168225,5.746238,8.585848,9.604848,8.731652,8.063569,0.636450,7.050819,0.136520,3.877373,-0.271236,-3.704216,9.842086,4.525869,-0.031657,6.404810,1.805568,-9.727958,8.452180,-1.830432,-3.983665,7.740189,-2.548878,-9.011213,5.488982,0.511813,4.673514,0.764951,2.542285,1.113501,7.682348,6.695330,2.145556,8.907974,7.403310,4.869487,1.914496,2.033442,6.307253,2.140558,8.270826,8.740517,-8.668483,4.866072,9.864358,-5.466774,6.890709,-2.319510,1.141090,9.514023,3.359375,-3.105807,-7.763942,-9.894983,3.025363,-2.838294,-7.325446,-5.972349,-4.159950,3.071309,-1.799367,3.234751,0.775753,-3.406040,6.026932,-2.746293,-3.601923,-3.811459,-8.973415,8.434677,-0.207591,6.054461,2.183804,-2.522054,9.014474,0.918667,9.087525,-9.762168,-7.636060,8.494386,-6.153209,4.285788,-4.059879,1.102303,-9.192233,-5.705860,-6.705194,-6.258823,2.567652,-7.311345,-4.954110,-0.287336,-7.828142,-0.507524,8.696402,-1.072981,6.242883,2.009792,2.350501,9.764517,0.539825,0.510717,7.645014,6.408542,-5.818040,2.719979,0.633886,-3.656755,-8.397514,6.156412,-1.540873,-0.042514,5.042254,6.110686,-8.795741,-3.316351,-1.481693,-3.367036,2.259896,0.872253,8.674900,-9.842985,-1.973135,-3.914350,-3.385270,7.117071,4.275730,-0.944218,5.754682,-9.491174,-5.810234,7.419814,-0.847800,-5.794578,4.928249,7.851442,5.071033,4.491116,-0.898990,-3.523909,5.376165,6.782234,6.540823,3.555948,8.849621,3.453553,6.493843,-3.305493,-3.657980,2.572919,-8.951933,-6.192707,9.459019,-0.685728,0.742133,-7.675278,-0.143085,7.807805,7.878683,-1.179739,-8.110064,6.027692,-1.859125,6.917907,-7.081251,-1.081423,3.380502,-5.780727,-1.086501,-6.708853,-6.404386,3.868520,-6.186760,-3.082228,9.964633,-4.999298,-3.886289,1.098147,-4.920264,5.188624,-8.072081,3.646198,-6.717279,-8.625728,-6.569326,-0.897861,6.349148,7.695565,9.787634,7.566805,-5.443635,-9.258122,9.625273,8.307656,3.028620,8.976867,-6.597631,1.661545,-0.586131,-9.004420,4.291861,7.941975,-8.056290,-3.352013,5.061649,-4.499128,-8.903148,-4.521823,1.417997,0.828008,0.769092,-4.885720,1.420766,-9.540636,0.742099,9.400052,-0.870737,3.052478,8.850224,-0.215692,6.223345,6.155016,7.923040,-1.131842,7.423224,0.249589,-6.478411,6.000499,-5.627841,5.362931,-0.417712,-4.660871,-9.959300,4.024667,7.779663,-5.993071,-7.004372,-0.075913,7.265166,-4.508130,-1.561832,0.233882,6.177490,2.301183,5.711454,3.787890,0.965100,-0.250984,9.406253,7.365209,6.062806,-3.938869,7.227783,8.360725,3.516898,-7.559838,-4.000689,-6.721873,-0.032441,7.582884,-5.345384,7.146558,-3.240157,4.894814,1.533623,-3.852243,-8.130237,-8.112483,-3.309525,0.681534,-7.713234,0.483128,4.645920,-2.017039,0.758856,7.767445,0.474125,1.250679,-2.903192,9.086440,-8.517300,-8.987072,-4.280687,-9.965708,3.974531,-1.513806,7.804598,-9.754857,8.230639,-1.914581,-7.617382,8.097067,-1.025095,3.405805,0.569250,-2.877819,-1.508066,8.751689,-0.118806,5.480825,5.854712,6.757564,-9.406511,7.004766,-7.774785,-9.561418,-4.977895,-9.028578,6.451845,9.711664,9.361205,-0.281832,7.745513,-9.042761,0.803782,2.705967,-1.940715,-9.190011,-8.548168,-9.855313,0.937199,3.829958,-0.792989,4.978930,2.919822,6.666932,-9.695759,-1.296183,4.394681,1.179120,3.604463,8.760522,7.743970,-0.376280,9.326042,6.768515,3.118986,-9.807041,-7.814834,8.352925,0.693973,-2.645532,-1.612840,6.476232,-6.657534,4.670631,0.355417,7.089063,-5.869584,-3.142952,-0.301439,-4.592537,-2.564524,-5.301384,-1.650872,-3.690524,-4.502820,-8.256788,9.441754,-2.767329,-5.393771,4.266421,-9.944868,8.095799,-7.747115,-5.134968,3.241272,0.789803,-2.867536,-1.646184,0.783831,-3.126232,-7.937333,3.524004,-8.335535,5.974870,2.961165,-1.653332,1.088526,-1.707821,9.697642,-3.605135,0.247869,-4.148562,7.737765,2.621627,0.669235,-7.669599,-7.823368,1.371117,4.630833,0.503422,-5.159847,-6.171540,4.683807,4.297250,-1.458639,2.923253,0.934904,5.476392,5.140010,-5.979213,-3.974995,-9.839927,-5.933643,4.047215,-0.484359,-5.712938,-7.654883,-5.287393,2.861667,-8.793457,3.569245,0.801883,8.971169,-5.420058,3.367040,4.494933,5.028722,-1.670568,8.592205,-4.373673,6.352866,-1.514673,3.633809,5.907513,8.494939,-1.594448,-4.526927,8.988827,-2.263235,-9.163427,-7.553539,0.277376,8.389785,4.267912,8.107128,-1.336468,-9.251133,-8.357018,0.662055,-5.320884,4.585824,0.236550,0.154507,7.843374,-5.786273,0.098928,2.669584,3.333996,7.775628,-5.877084,-2.629539,3.689257,9.373886,-0.214220,6.655118,0.745259,-0.662779,-5.281876,-8.036837,5.680028,0.064047,8.526538,-7.257200,5.982601,-1.612860,-5.234440,-9.105956,6.240051,-3.276990,-1.470302,5.428280,-0.791016,7.146737,1.821611,5.919811,-9.735476,8.806473,8.367024,-9.546722,7.188723,-8.996528,0.152561,4.201318,7.743327,6.949012,-5.964029,2.228475,-9.539940,6.048412,-3.478773,-1.853626,-5.411335,5.734855,5.845622,-1.031145,-2.123119,8.527094,-8.929323,-1.379774,-2.530599,5.298853,-3.424158,8.037416,8.208556,-1.200958,9.687387,2.603563,1.607012,-3.262355,-6.516310,1.496932,0.197952,2.832234,-5.737188,5.908669,1.154204,0.941066,-5.897545,-6.130827,8.110271,6.740491,1.914708,-7.363190,7.167623,-7.824918,-9.878339,-4.337587,-0.390448,6.441394,-4.079174,5.429695,3.970223,9.207365,1.848168,-2.639390,0.123022,-4.713371,-9.052407,2.834087,9.241256,3.177104,6.004555,4.811158,0.262496,-3.845607,-5.735639,8.339478,-6.882480,1.586656,-3.057801,8.052090,0.363525,1.954286,-0.395359,-2.201700,-8.536132,6.705104,2.552099,1.036954,5.777333,-3.242095,3.943538,-4.793503,2.896728,6.851088,1.605349,3.309091,-1.463227,-7.460813,1.069990,-1.728868,-7.377065,3.115052,0.659069,1.047214,1.546245,-3.917313,5.648155,-2.597103,-4.047950,7.176617,-7.157686,-6.463305,9.468544,-3.394618,6.726994,-6.709583,-5.593509,-2.106170,-7.555686,5.864323,2.521091,-2.331745,-7.162712,7.711601,-4.690454,-7.445338,7.523359,-3.071110,2.132499,4.621438,4.297976,-8.667966,-2.283810,1.584546,-2.985291,-1.848592,-8.611311,2.498595,6.416854,6.527340,9.798405,5.171988,9.675949,3.068484,-1.933808,1.986837,-4.812111,5.752622,-2.735590,7.601968,5.085621,9.721975,-7.640966,-9.019263,6.380951,9.747545,3.331597,-1.049627,-9.019491,7.359662,-9.773326,8.077590,3.301206,6.573601,5.286583,-5.519875,-3.840315,3.043173,-8.223402,0.480328,6.934429,-7.963843,7.398056,5.204439,-7.379162,-8.229591,-3.308779,3.897564,-4.542548,0.172269,7.861811,8.435229,7.431414,-3.453329,-2.764759,-0.275810,8.822897,9.555891,3.724181,-0.278951,1.088514,-4.767849,-3.207372,5.863046,8.621673,7.194525,8.150322,-9.881218,4.708889,-5.200409,-5.268400,4.377442,-1.692148,-4.423248,-7.625539,1.996379,6.754656,7.794839,-0.059905,5.043026,8.219430,-2.129361,3.419482,-1.766650,-7.268672,-0.816098,0.184494,-0.710105,-8.092907,4.022002,6.904516,2.665370,-1.768053,4.837790,0.465647,-2.825326,9.312505,4.025430,-5.457631,3.351415,0.516765,5.992968,6.956447,-3.717456,2.040268,-4.146281,-8.377788,5.457241,-1.200465,4.517297,6.149718,0.807101,3.165179,2.824575,-1.912617,-2.111801,1.686709,-7.546062,6.602081,-1.240513,-8.787523,5.714556,-2.819002,8.330099,2.311562,5.304279,1.678315,1.525675,0.731054,-1.884994,4.593146,4.442066,-9.596224,-6.577075,-2.945439,-2.073101,0.159375,-5.245756,6.272938,2.825938,-6.479624,1.205156,6.998952,-5.019558,-0.926400,-7.700827,5.612312], dtype = "float32")#candidate|314|(980,)|const|float32
call_313 = func_63_call(relay.reshape(const_314.astype('float32'), [7, 10, 14]), relay.reshape(const_314.astype('float32'), [7, 10, 14]), )
call_315 = func_63_call(relay.reshape(const_314.astype('float32'), [7, 10, 14]), relay.reshape(const_314.astype('float32'), [7, 10, 14]), )
const_316 = relay.const([-2.957837,-9.723279,0.688110,-0.672793,0.820974,7.118964,4.090896,5.682485,-2.802384,0.075382,-1.701320,1.730900,-6.273274,2.816431,-4.505910,-8.518163,4.085134,-5.011569,0.539762,4.094853,1.190293,-4.892263,-9.641109,-7.861695,8.725001,-1.608588,-1.745844,8.532246,6.108488,5.259731,0.697928,-3.456913,2.521637,2.133216,-2.794248,2.658309,-2.892656,-2.014753,2.533038,2.574313,-4.644269,7.356094,6.631365,-0.412653,9.677272,4.060762,2.028773,7.884424,-7.257098,9.263624,6.774555,-4.460803,-0.217641,-2.433531,0.816607,-9.099126,9.231085,6.119245,4.916516,3.887673,9.826522,2.875887,-1.875644,4.866141,-8.469599,9.153196,7.790074,0.023837,3.488736,-3.335682,1.212610,-3.327908,-9.741458,8.018450,6.920224,-4.051456,6.430949,-7.693983,-3.946437,-6.695781,-4.516235,-2.699559,-2.006745,-4.326475,2.754105,-1.696395,5.582031,5.927289,-7.436365,4.433503,2.181718,0.176038,-9.645810,-7.917500,2.631469,8.174696,7.232094,-0.080776,0.681913,0.595383,7.946844,3.005197,-3.481728,-5.531155,2.708509,5.859865,6.514531,-8.629162,-1.696023,-7.451922,2.796159,5.327817,8.884060,-7.089697,-0.969529,1.288108,-7.309658,9.741660,5.831692,8.628151,5.776904,4.325051,7.224822,-8.341913,-0.946131,-0.776298,-0.447204,-6.575153,3.541906,-4.916425,-2.417094,6.902163,-9.097064,-3.375551,-7.934242,1.145545,-3.553979,-9.728252,-6.721944,2.433921,5.066452,-7.225109,3.410766,6.947621,-1.480869,9.665263,1.835064,7.067073,0.334618,8.153558,5.640846,4.633774,9.319230,-4.945964,1.992928,-9.975500,8.358345,-7.738193,-8.827594,1.465810,-4.360432,2.730062,2.514355,5.677145,-3.670754,-2.647450,3.154169,9.695419,9.314800,-2.623287,5.018751,7.958393,-6.812226,-4.026892,3.651031,6.630606,-9.676705,3.739095,5.865030,-2.355920,4.121789,9.668705,-3.890217,1.233093,-3.685674,-9.028429,-7.580535,-8.577105,-1.485823,1.570918,-1.838151,3.683216,-6.315423,-6.562408,9.644632,4.551595,1.597178,-6.826483,-8.878219,1.934867,6.275419,-7.472772,3.858416,-7.770527,1.383187,0.854808,-6.635597,-8.517695,8.880484,-3.760505,5.421677,2.871109,7.524032,4.255638,4.173150,-8.830822,-9.883073,1.037256,-3.427809,3.329694,3.557424,6.665227,2.134351,-6.198828,1.911836,-1.253616,5.188430,5.191873,9.209735,-0.907286,-9.013466,0.604624,1.689125,-6.309715,9.503571,-8.950258,8.192480,-1.815711,1.315871,6.992076,-5.483172,-6.017923,-7.514667,-6.659095,-3.022655,-2.463675,4.007895,2.633960,-5.298564,-9.816885,-3.138528,2.113814,0.083308,-4.216350,-4.613695,3.802212,8.648734,-9.057503,1.751956,6.774387,5.670866,-5.624865,-7.282934,-1.691489,-3.608659,-2.749209,3.112216,-7.906035,2.880435,8.206331,-3.180535,-0.984615,-0.344714,4.134122,4.423913,0.809740,7.125523,-7.075724,-4.493094,-6.843117,9.776420,2.711348,-2.556185,0.638363,-8.229200,-1.990845,4.777233,9.412223,7.522049,-9.084990,3.906289,-4.475313,5.911354,-3.074471,9.340082,-8.551316,2.711777,1.118269,1.128446,-0.860668,8.553889,9.126258,3.408688,6.497172,3.247429,-8.063016,0.767678,7.270908,8.689797,-3.284039,4.656144,8.281722,-4.978147,-2.908380,-4.600190,-3.189814,4.580338,-8.524808,-8.654079,-6.640119,0.505052,-6.914278,7.778321,-3.481151,-3.013340,5.015495,7.238845,-8.130758,1.548073,-8.049386,0.019271,8.745303,-1.937378,-2.998321,5.176959,-9.759005,0.551735,-5.561145,1.348517,8.013445,5.520823,8.598268,4.639219,9.393488,-2.205268,-8.280307,-5.200551,5.500902,-9.783177,8.057840,-7.617733,-4.329456,-9.654136,-5.752425,2.221716,3.251880,-8.259955,-2.843529,9.557051,-1.385985,6.208516,4.033628,-8.524572,-4.815857,-6.775590,7.281703,4.119087,-4.522759,-8.333608,9.738957,-9.286680,-4.247686,1.102677,2.595734,-2.946775,5.485983,-5.733532,2.628667,3.549698,3.401447,8.015375,-6.601336,5.373436,3.994934,1.701324,6.297560,5.544907,-6.672529,-8.060477,8.804663,3.945101,-2.468973,-0.795855,-3.988566,3.257305,5.286729,-8.952151,-7.705895,4.858545,5.832119,-5.647328,-3.085029,3.795066,8.204809,-2.024469,-1.288542,7.054309,-7.239238,1.918706,4.372701,-0.792790,6.118762,-5.518198,-9.420797,3.244975,-1.906284,6.552324,-5.590558,8.184533,-0.473090,-1.899644,3.355821,-1.286464,1.846839,-0.412490,-0.666354,-5.280485,-2.144711,1.819345,-8.663034,-3.327477,9.177410,2.177827,-8.031263,3.017187,0.274955,-3.945683,0.079901,-9.813385,-9.623599,1.593507,0.650359,-8.890607,-0.638268,7.313783,2.193923,0.732360,1.213340,-1.088469,6.865075,-8.265400,3.709855,1.908307,7.811804,-0.022498,-7.115612,5.970221,6.766180,8.080655,9.667112,-5.788088,3.111261,1.858667,-8.811855,-3.999661,5.642835,-6.174408,3.884648,1.458786,9.902052,-9.625439,7.260773,-2.656592,-7.985206,-5.772681,-6.234605,-9.279506,-4.917234,-7.733942,1.333751,-5.030716,4.360395,3.122372,-4.123322,-9.647878,-6.281994,-8.755197,-1.439616,-1.679276,-1.551865,-9.239814,2.008490,-7.349531,1.795016,4.838443,-5.409499,7.648290,-3.688861,-2.474619,-3.024677,4.566244,-5.406766,-7.227875,-2.414070,6.902625,-5.334873,7.540788,-8.133752,8.671195,-9.824693,-7.988651,4.360988,-0.038926,-6.843881,-9.551924,4.129893,-8.617259,8.938164,-4.551806,3.474812,8.931251,-3.224274,-7.082585,-1.381767,-7.798620,-1.215402,0.212043,-7.539644,7.462254,5.258428,1.984185,9.866081,-7.799967,4.687940,-9.872932,-2.889717,-9.092339,-2.047330,6.690435,-8.148663,9.176332,-8.434310,-0.116120,8.548210,7.562730,-1.317562,1.941893,-5.583740,-5.075654,4.884813,2.437108,-7.906986,-1.962790,-6.026724,-9.237263,5.084884,0.801390,-9.452453,-8.843357,4.578584,-4.646459,3.042293,-4.963299,5.313167,5.420827,7.471643,-1.920321,-9.841710,5.354870,-7.076217,5.064807,2.783340,4.265808,1.653713,3.180477,-9.593885,-5.018337,-6.728772,9.680456,5.913815,-7.027796,9.048643,2.448134,1.815069,-3.020046,-7.095987,2.765440,-6.417270,7.164774,-1.868956,7.414264,7.869809,-2.073340,-8.170700,9.337487,-3.269620,-0.174459,1.846771,8.768534,-3.783968,-8.754298,-1.161849,2.050491,9.494135,-1.081951,6.114896,-1.103921,4.052972,-6.179532,-4.754619,7.214465,0.879054,4.136155,9.861927,3.081121,-7.726774,-0.499139,2.803297,-5.397129,8.246971,0.470135,-3.548101,8.656342,-3.595408,6.771204,9.694078,-8.708510,-3.402535,2.102830,-2.155935,-4.943944,6.278711,6.527795,-0.526776,2.556681,-9.257750,-7.670572,-9.252582,-8.454280,-4.242315,8.944403,3.080164,-1.688081,4.681816,0.811067,6.097129,1.584406,2.832577,0.082697,-9.993750,6.631275,3.369881,0.337248,9.853151,5.022040,1.389684,3.183938,-9.342620,-1.142037,-8.748521,1.670436,9.191915,-1.460515,-3.110601,-2.640554,-7.883145,5.019611,-5.015878,9.304055,1.114282,6.363339,9.721890,9.932039,-3.335370,-8.398571,0.403873,-6.805988,-2.804968,5.725286,3.201249,0.834796,0.983368,2.631700,0.689766,2.161174,4.263945,7.233919,-3.211146,-4.012485,-7.459260,6.832413,0.447827,2.510686,-7.926364,-4.638399,-2.048787,1.657148,-6.091849,3.841323,1.510480,-0.256094,3.667475,8.543577,-8.153129,8.282712,-6.701064,8.971544,-4.586522,3.181966,6.558915,-8.280311,6.863053,-6.924106,1.128525,8.583556,-4.236357,0.805367,8.593280,6.214228,3.520208,8.010742,5.767209,1.494921,3.039451,-5.515322,-3.243946,-1.083179,-9.709967,2.216546,4.976976,-3.297303,8.929271,0.689262,8.342647,-5.656932,4.744769,-0.701291,-8.831770,0.797470,0.730553,6.880748,-4.260116,8.361601,-4.022749,-0.785703,-6.785452,8.589708,2.930901,-1.291042,-2.597608,8.755703,-4.059795,-1.157971,3.394833,-7.459978,-8.365229,-7.668575,-0.826023,5.922486,-6.087408,-1.033763,1.831694,-6.195687,-0.199324,7.176280,-7.816420,4.549941,-5.758621,8.359908,8.714106,-1.284371,2.847270,-8.498778,9.861334,-7.900130,-4.895527,-6.736726,1.688451,-4.568106,3.462230,-0.449993,-9.540267,5.754289,4.052992,-5.615121,-2.804726,-0.586434,9.983165,6.314263,2.773865,-4.383944,-2.054267,7.463347,-8.860480,-7.133320,9.232692,9.297887,-2.292986,-7.127181,7.203443,-4.822989,-0.189135,-3.693468,5.701899,-7.715947,6.445307,-6.922684,4.898185,0.108803,5.794544,3.582418,-7.450647,-8.940622,3.696987,0.516052,9.883808,8.758045,-4.640516,0.987483,0.599241,-6.040041,0.859474,6.170327,-4.831969,-2.684987,-7.125959,-2.241010,-1.937416,0.395829,-2.686970,-5.783682,-3.753131,0.131835,2.308579,-9.799178,-2.136958,-4.874454,-9.439091,-2.160080,-0.591989,-4.379585,-7.590009,-7.160432,-6.969946,8.634346,-3.534660,-4.581129,2.125899,4.664050,6.914461,8.021392,6.219361,0.588197,8.799203,-8.247324,-3.993949,-8.968623,-2.183987,7.954462,-7.920456,2.838873,-4.876128,2.274489,3.695143,3.988856,2.441440,-2.308141,-2.850106,-2.331886,0.354073,1.301055,9.416560,-6.260768,-1.253259,-8.039736,-1.091634,0.302601,-8.251431,-0.212455,-3.262299,-3.491749,9.629153,-2.521985,-8.806298,9.209149,1.546949,1.794425,0.443805,-0.670026,3.513671,-6.528185,-8.430389,-0.390362,1.516820,-3.046477,-4.628874,6.852569,3.634977,6.924164,-1.953703,8.594862,-1.635874,-7.599379,5.180302,1.611345,-2.910923,-1.871886,-5.773737,1.477198,-4.315207,4.115665,-5.743588,-9.202404,-4.305455,8.853961,-0.294325,-5.108647,9.298296,-4.100534,-1.883470,5.959313,-7.543411,8.376897,-3.388475,-9.639935,4.417322,-6.997068,-7.588651,4.532676,-4.943948,3.069385,-9.855391,0.965709,-2.206978,-1.923189,-0.589101,3.710977,7.063744,3.297851,1.598058,-1.398178,4.730862,-5.569080,9.764090,-4.221536,-8.475116,6.132973,6.783800,-7.938753,-2.056254,-3.424474,-5.767317,0.197534,0.808823,-9.075610,-7.712569,1.574535,8.900033,7.414004,4.948555,-2.736402,8.795081,-9.980124,0.422050,3.293833,5.800753,-6.379678,6.710245,-5.623370,-3.693165,-8.791509,6.140290,-7.468154,0.553712,-9.508730,7.466739,4.610096,-8.515099,8.741616,-2.170459], dtype = "float32")#candidate|316|(980,)|const|float32
bop_317 = relay.bitwise_or(const_314.astype('int8'), relay.reshape(const_316.astype('int8'), relay.shape_of(const_314))) # shape=(980,)
bop_327 = relay.not_equal(uop_292.astype('bool'), const_314.astype('bool')) # shape=(3, 980)
func_63_call = mod.get_global_var('func_63')
func_67_call = mutated_mod.get_global_var('func_67')
call_330 = func_63_call(relay.reshape(call_313.astype('float32'), [7, 10, 14]), relay.reshape(bop_317.astype('float32'), [7, 10, 14]), )
call_331 = func_63_call(relay.reshape(call_313.astype('float32'), [7, 10, 14]), relay.reshape(bop_317.astype('float32'), [7, 10, 14]), )
func_63_call = mod.get_global_var('func_63')
func_67_call = mutated_mod.get_global_var('func_67')
call_338 = func_63_call(relay.reshape(const_316.astype('float32'), [7, 10, 14]), relay.reshape(call_330.astype('float32'), [7, 10, 14]), )
call_339 = func_63_call(relay.reshape(const_316.astype('float32'), [7, 10, 14]), relay.reshape(call_330.astype('float32'), [7, 10, 14]), )
bop_340 = relay.minimum(bop_317.astype('uint32'), uop_292.astype('uint32')) # shape=(3, 980)
output = relay.Tuple([call_313,bop_327,call_330,call_338,bop_340,])
output2 = relay.Tuple([call_315,bop_327,call_331,call_339,bop_340,])
func_350 = relay.Function([var_291,], output)
mod['func_350'] = func_350
mod = relay.transform.InferType()(mod)
mutated_mod['func_350'] = func_350
mutated_mod = relay.transform.InferType()(mutated_mod)
var_351 = relay.var("var_351", dtype = "float32", shape = (3, 1))#candidate|351|(3, 1)|var|float32
func_350_call = mutated_mod.get_global_var('func_350')
call_352 = func_350_call(var_351)
output = call_352
func_353 = relay.Function([var_351], output)
mutated_mod['func_353'] = func_353
mutated_mod = relay.transform.InferType()(mutated_mod)
const_382 = relay.const([[-6.844821,9.446611,-9.608188,7.799131,-1.138791,4.748480,-2.075856,1.243160,-9.602476,-8.133664],[-1.224673,8.418997,-9.592997,0.511618,8.727330,5.146617,-4.060093,4.597647,9.398471,6.112139]], dtype = "float64")#candidate|382|(2, 10)|const|float64
var_383 = relay.var("var_383", dtype = "float64", shape = (2, 10))#candidate|383|(2, 10)|var|float64
bop_384 = relay.floor_mod(const_382.astype('float64'), relay.reshape(var_383.astype('float64'), relay.shape_of(const_382))) # shape=(2, 10)
output = relay.Tuple([bop_384,])
output2 = relay.Tuple([bop_384,])
func_390 = relay.Function([var_383,], output)
mod['func_390'] = func_390
mod = relay.transform.InferType()(mod)
mutated_mod['func_390'] = func_390
mutated_mod = relay.transform.InferType()(mutated_mod)
var_391 = relay.var("var_391", dtype = "float64", shape = (2, 10))#candidate|391|(2, 10)|var|float64
func_390_call = mutated_mod.get_global_var('func_390')
call_392 = func_390_call(var_391)
output = call_392
func_393 = relay.Function([var_391], output)
mutated_mod['func_393'] = func_393
mutated_mod = relay.transform.InferType()(mutated_mod)
var_470 = relay.var("var_470", dtype = "float64", shape = (14, 13, 6))#candidate|470|(14, 13, 6)|var|float64
uop_471 = relay.asin(var_470.astype('float64')) # shape=(14, 13, 6)
output = relay.Tuple([uop_471,])
output2 = relay.Tuple([uop_471,])
func_477 = relay.Function([var_470,], output)
mod['func_477'] = func_477
mod = relay.transform.InferType()(mod)
var_478 = relay.var("var_478", dtype = "float64", shape = (14, 13, 6))#candidate|478|(14, 13, 6)|var|float64
output = func_477(var_478)
func_479 = relay.Function([var_478], output)
mutated_mod['func_479'] = func_479
mutated_mod = relay.transform.InferType()(mutated_mod)
var_481 = relay.var("var_481", dtype = "float64", shape = (10, 7))#candidate|481|(10, 7)|var|float64
uop_482 = relay.tan(var_481.astype('float64')) # shape=(10, 7)
output = uop_482
output2 = uop_482
func_484 = relay.Function([var_481,], output)
mod['func_484'] = func_484
mod = relay.transform.InferType()(mod)
mutated_mod['func_484'] = func_484
mutated_mod = relay.transform.InferType()(mutated_mod)
var_485 = relay.var("var_485", dtype = "float64", shape = (10, 7))#candidate|485|(10, 7)|var|float64
func_484_call = mutated_mod.get_global_var('func_484')
call_486 = func_484_call(var_485)
output = call_486
func_487 = relay.Function([var_485], output)
mutated_mod['func_487'] = func_487
mutated_mod = relay.transform.InferType()(mutated_mod)
const_617 = relay.const([[[8.109769,-8.570039,-1.599829,8.987963,3.663871,-7.123315,-3.454643,-8.619717,8.908553,7.042589,-8.163038,-6.951447],[3.017533,5.068310,3.644559,7.527209,-2.008783,-5.445105,6.371831,-9.327000,-4.244515,-0.491369,9.346814,0.364992],[-1.806471,1.163583,-9.122937,-6.284235,-5.643982,-1.337073,8.524037,-9.849705,7.754716,-0.814134,6.929375,-0.870236],[9.508514,-4.266236,2.949756,-0.200146,-6.369060,-2.955355,9.442926,-9.834939,-5.204161,0.332083,-9.673301,-8.077476],[-0.877968,7.007786,1.824683,4.854092,-5.653903,8.877463,0.160644,8.685886,8.337524,5.389611,1.789022,-4.013526],[-3.539546,4.435211,-6.108558,-0.509413,-2.020218,-1.081567,6.978322,-3.716906,7.289845,1.989963,3.997550,-1.072648]],[[-5.094865,7.604779,3.281943,-5.073664,1.990535,1.754204,8.032265,-5.559746,3.391769,3.569803,9.241752,-9.137711],[1.773579,0.997839,3.428038,7.740968,4.374125,1.468868,-9.480183,-7.225451,3.569659,4.614653,-5.633037,-6.337530],[-9.992286,-1.574357,0.375304,-1.594398,8.509485,-5.702404,2.982923,-2.572843,-4.843984,-2.717614,2.130548,1.655265],[-1.954916,0.955690,-0.561289,-4.893609,3.661411,-2.211296,5.507409,9.055164,1.346358,4.485612,6.059038,4.913867],[4.409936,9.243780,9.269765,8.373422,2.225441,-2.370315,-9.248510,9.450077,1.500275,6.968627,-1.923046,8.461337],[-5.827466,8.498039,4.588919,3.683291,-1.675930,1.782809,8.403396,0.779454,-5.841571,0.163250,-1.002914,-9.593233]],[[-4.918470,-2.785643,9.610415,-9.825794,5.383308,3.761717,5.096338,7.755761,3.721762,8.989516,-4.007196,-6.744587],[-4.937692,1.002765,-0.355031,-8.795487,8.667567,3.705322,8.184167,-4.801798,6.619325,6.116947,7.412950,-1.664325],[1.656864,2.582940,-3.480790,-2.836447,2.648424,0.014165,-2.973473,7.152178,2.539839,-6.172926,-2.759190,3.318127],[-8.586143,-6.171782,2.425481,1.683638,-7.217860,-6.322481,-3.463850,8.913283,8.598865,9.373181,3.475443,8.452566],[7.061983,0.364741,6.437806,-5.230727,6.661275,3.200565,0.935542,8.479349,1.598081,8.021260,1.878452,-7.736260],[7.572157,-6.638452,-0.196002,1.738816,6.605328,9.778900,0.241977,-3.964821,1.039614,-8.211397,-7.061792,-4.950870]],[[9.468611,6.725880,6.180693,9.059203,4.570674,8.086170,-9.233790,-6.500583,1.078813,-8.447878,7.580984,7.534306],[-6.991967,8.165350,8.076309,-6.395708,6.885560,8.130616,4.204890,-2.739069,-9.108649,-3.329528,-5.536932,-6.139640],[2.661288,9.382783,-9.813883,5.371462,-4.593847,5.308907,-9.150934,-8.034940,-2.297839,-7.043685,5.316534,-5.356092],[-4.805803,-6.918920,7.826422,-9.459273,0.306956,8.506810,-8.106968,-2.474480,-0.048483,0.456784,4.598116,-3.443611],[1.020995,-3.598256,1.959061,0.112651,1.353547,8.835250,-4.973134,6.451673,3.450916,4.323320,4.557734,-6.479083],[-6.819334,8.518608,0.796762,2.592804,-6.321180,0.855554,-3.141471,-5.228066,-3.613263,7.008906,6.156573,-7.909777]],[[5.593851,5.127435,9.667733,-8.499069,6.109573,-0.849681,-9.623623,3.985940,6.885383,-1.602444,5.557319,9.004178],[-7.150140,4.638717,-7.672503,-2.538971,0.777907,-7.010812,2.089885,-0.859511,-4.566260,-3.174871,-3.542922,-3.986964],[-7.066387,-3.216750,1.950587,-8.207991,-0.292359,7.201283,1.737530,-1.693668,9.529409,-7.922854,-8.758764,4.050236],[3.078783,1.748587,-2.208570,8.067709,-6.148676,-4.279423,0.261992,-6.932003,-1.622264,-7.141259,4.122914,4.640419],[-5.895929,-3.084805,-9.044831,2.354832,0.979956,-3.516962,-8.681852,-3.451746,0.125783,-3.219613,5.474347,-8.268399],[8.582759,-3.393316,9.444266,1.738545,6.250012,-7.829039,-8.963883,8.312815,-8.022293,1.251147,0.389977,-7.623324]],[[-7.036712,7.774215,7.104348,-3.968574,8.381471,8.177585,-5.795351,-8.941410,-6.195932,1.235913,-3.539438,-2.811564],[-6.129649,-9.219459,-0.556485,-2.705264,6.291464,-3.818876,8.849092,4.802496,0.204512,-2.173819,-5.645505,7.168440],[6.437658,1.945387,0.308829,9.422094,2.345009,2.088296,-0.629411,-1.365198,-9.313570,-2.457492,5.498943,-7.045223],[-8.638637,-0.302669,4.504487,-7.146320,6.354168,-7.240991,5.169443,-3.981146,7.324442,-7.717584,-3.045682,-3.382728],[-2.743461,-7.370568,-4.015388,-3.780061,8.883285,3.127951,9.467710,-3.010064,8.934391,4.332292,-2.171451,8.122315],[-5.450013,5.168179,1.517527,3.749651,-6.864526,7.789896,-8.918222,6.094134,7.199289,-1.014484,-4.050894,5.457281]],[[3.905936,4.159124,-1.001542,-2.210928,-1.247140,3.950970,2.454632,2.833957,6.428339,-5.006070,6.549471,9.038789],[6.048968,8.394854,-5.911581,4.479429,0.337244,6.866395,-0.777203,-6.557150,5.829632,-3.217978,-8.549804,-5.080316],[-2.390986,7.833260,3.235981,-1.503158,-9.670229,-2.377669,-8.364755,3.775127,-0.381272,-7.880742,-5.186085,-7.644304],[-4.678350,-0.253967,-4.887586,-8.685686,5.346727,-8.137992,3.221017,2.875317,-4.595732,-0.484567,-4.315049,5.090031],[3.825105,4.582274,-8.212101,9.890527,-4.754739,-4.924260,8.995356,2.967835,-6.689693,6.690716,1.826727,-8.919184],[-9.654217,-4.240260,-2.078361,-4.285105,6.648417,6.167229,0.833633,4.220322,-0.930804,-2.381505,-7.284928,-5.371617]],[[-7.122008,-2.035724,3.788183,5.951874,-2.513380,-1.344447,1.070097,-4.750388,-5.156632,1.410295,-4.629355,7.785213],[-8.576379,-2.713534,9.185814,6.631440,-7.373982,7.553305,-2.522964,-2.247833,9.117777,0.355023,5.658221,4.842051],[3.308626,5.295081,3.558478,-1.533866,-9.256660,6.741130,-6.086131,2.405361,-8.985052,-2.482326,-8.143533,8.843629],[0.003661,-8.596972,-5.935844,-3.551568,-2.959356,-7.367747,-8.885775,7.575268,6.231432,-2.186646,-5.707925,4.011613],[2.975844,5.483606,-3.569991,3.755144,-3.865336,-3.719901,0.464463,-6.837953,-6.801367,-1.890429,-7.845172,5.205103],[-7.889946,8.579631,-0.367437,0.580043,-0.782692,9.943712,-6.729432,-9.220734,-3.385499,1.612431,4.573191,-8.199454]],[[-4.728685,-1.250127,-2.917007,5.063028,1.501778,2.116312,5.136168,6.770776,-0.099679,-8.701849,2.400700,2.172273],[2.061364,-7.059862,-4.226456,-6.571838,7.360021,7.182342,-1.697557,-7.645491,3.403222,1.150909,-7.914390,-5.099833],[4.147403,2.801261,9.641177,8.418927,-5.501532,9.741642,-5.898693,9.768843,-8.580660,5.103054,8.335456,0.771597],[-2.718614,1.539761,6.804735,8.191798,-2.544357,-1.308807,0.542640,-4.657223,5.514508,-3.417955,4.317686,6.570518],[0.316418,3.841471,-4.782618,3.596750,1.811995,6.873429,4.289024,-5.730821,-4.675741,8.558760,-2.692623,8.262643],[-2.809158,4.913745,4.217314,7.097179,4.853069,-4.449663,0.913214,-4.922937,-7.389081,-0.481559,-8.106346,-3.114396]]], dtype = "float64")#candidate|617|(9, 6, 12)|const|float64
uop_618 = relay.acos(const_617.astype('float64')) # shape=(9, 6, 12)
func_63_call = mod.get_global_var('func_63')
func_67_call = mutated_mod.get_global_var('func_67')
const_621 = relay.const([-0.740579,9.291885,-3.344059,-6.180806,-8.533516,-0.151595,-4.838320,-9.015249,-5.918606,5.605759,9.880853,9.374061,-2.001102,9.648938,-8.033045,-0.384671,-3.320028,-9.203068,8.091578,5.875848,8.521003,-2.315213,-3.067768,-8.597061,-7.022176,5.710000,-7.855873,3.554188,-3.416105,-0.324800,-8.426046,9.890893,-0.308205,6.307137,-1.447800,9.640470,7.247006,0.020787,-8.664341,-3.457874,-8.747970,0.569183,-4.377085,3.835742,8.020248,3.408320,9.817238,-5.258402,8.469017,2.397576,-0.045447,8.961661,-4.263564,-2.582548,-8.689250,2.753422,-6.763061,9.596463,-4.400771,6.727764,-1.561822,7.610693,4.721543,9.334552,-9.665046,-0.405537,9.061307,-8.346030,8.678739,-1.578762,0.320068,-6.348247,-0.485739,0.181933,-6.270845,9.266246,6.093914,-5.059923,-2.649368,1.416831,-7.451089,-1.813910,0.050111,-3.485321,8.578174,-3.501585,-4.406781,-6.805574,-1.147046,4.509856,4.566248,1.156096,-1.528547,9.938977,7.314613,6.004615,7.853232,1.902226,-0.330267,6.435222,7.397062,-5.544651,-2.098813,-9.690227,-4.198094,6.877202,-4.841824,6.118124,8.740542,-2.749761,1.681031,-1.912501,5.046599,-4.763421,1.274242,8.899063,1.491445,3.246739,-9.935289,3.143930,4.566283,-4.796963,3.799892,-6.409182,8.372850,-6.767089,-5.232979,5.928144,-5.221961,9.445857,9.026213,-0.832461,2.269215,-0.580757,-4.796760,-2.468213,-2.014764,3.522906,-2.364105,-4.859004,-0.422120,5.498165,-3.475954,-2.763648,-6.030118,-5.900660,-4.061738,-7.248509,-5.860414,-1.022529,-9.577384,5.868680,3.183625,6.904696,-4.268816,7.846335,-7.424871,-6.557974,0.677420,4.169781,-8.870940,9.742355,3.562040,-6.891470,-5.561076,-6.352731,-3.311329,-9.613429,-4.990624,1.514175,4.916107,-8.532736,7.774231,-1.481248,7.951661,-4.876126,-0.893509,3.610692,-4.801978,4.944076,-2.513616,8.764200,1.237472,-3.500840,6.850476,6.604642,7.490628,-7.413345,-0.921752,4.918404,7.754950,6.706758,-1.875968,2.148482,5.209959,1.060061,-0.873794,-3.473148,-3.996435,1.949278,-6.982775,9.208605,-4.674164,7.436451,-2.680232,2.411822,-7.654279,5.719981,7.076771,4.238422,-9.905468,-8.264246,-4.756491,-0.043511,3.124299,-9.986587,-2.710797,7.157388,-0.287265,8.218085,-6.453343,-4.372623,-4.586484,2.361459,-9.953617,-5.373079,8.675533,1.304242,4.837820,0.953487,5.677037,-1.828487,4.204249,6.176950,-7.011964,-0.147037,4.358589,-0.380910,7.742118,5.132588,-4.139195,-7.713204,-2.495137,1.709939,1.517579,-4.638931,0.286575,7.092314,2.640014,-6.212051,6.513518,-9.198388,5.794798,-7.101535,-5.751709,-4.825169,6.811319,-7.951314,-7.444595,8.740222,-0.892291,-9.899532,1.612520,-1.184196,-9.627244,-5.970285,-2.918200,-5.999211,3.379210,-0.414803,-0.938747,1.613961,0.724837,2.434597,8.610749,9.589527,3.527060,9.026946,5.981160,4.170706,-5.478833,-5.741478,-9.572479,-1.710541,5.261400,1.390079,1.654817,-3.018526,-7.944753,-0.223079,-0.381946,-6.487801,-0.069643,-2.314699,2.735350,1.696294,-5.726858,-9.399947,2.363891,-9.873964,8.840923,-0.689848,-2.371228,0.339731,9.082075,0.841163,-7.202554,2.327381,2.772202,-9.463438,1.557691,3.842281,2.422262,-9.052237,-8.806140,-5.236979,-9.596889,1.496911,9.252205,9.413700,-8.871650,-5.698022,-9.669735,5.514624,-9.011411,6.938076,-9.712989,5.468753,-8.019223,-7.000975,-7.213619,6.823143,2.748198,-6.628877,5.686586,2.936280,-8.480646,-9.124303,2.066595,-5.077477,-7.227602,4.644893,-0.131378,-7.051186,-4.800021,-7.124241,7.504173,5.804310,-9.063117,4.772243,-9.237771,3.646137,7.557209,0.236399,-3.419229,-9.480928,0.370157,9.747763,-3.293520,9.307214,-8.050895,3.507800,4.951922,-3.612162,-7.363805,2.427455,2.405917,3.907070,3.368135,2.032333,0.856701,-4.633494,-5.072586,-6.316590,4.234203,6.277820,9.473501,-6.968704,-3.144994,-0.151914,-4.048514,9.996948,3.707393,-5.767113,8.243831,-0.150719,7.576387,-8.349960,-3.791104,-0.061837,-8.905545,1.428213,4.161833,-5.679480,-6.936345,-6.300256,-4.625530,-3.962803,7.211102,-5.700606,0.301665,9.068644,8.796158,-8.347362,-8.487602,-4.450812,-0.643988,7.339855,5.128880,0.805637,-1.004538,-9.013132,8.735541,-1.762971,-2.032659,-1.959156,5.155494,-1.745460,7.065902,-8.507306,-0.260441,-4.053609,-7.092929,-9.811769,6.776524,-7.220789,4.739252,-6.972128,4.965402,5.791303,-6.069988,0.806088,2.278424,-3.373090,-4.527062,3.718660,0.577219,-0.599473,8.530214,2.439289,-2.228608,-2.363875,5.514792,1.758779,-1.564529,-9.108711,-4.902279,-0.122013,8.617346,-7.944571,-4.234654,-6.318090,6.983458,3.158265,0.750303,0.344993,-1.828253,-7.776060,-2.630383,9.504872,-9.756063,2.594754,5.822111,5.378455,8.144578,2.582725,0.857821,0.169751,-2.261227,3.873149,-8.690142,1.096245,-0.510781,-7.367402,7.941916,1.581149,7.448764,-3.676709,7.887015,3.581934,6.119542,-2.173820,2.927767,7.134807,-1.968854,5.536941,5.548652,-4.397305,-0.031567,0.355530,-7.573254,-8.412295,4.670701,-0.477077,-4.114601,5.716156,-9.162663,-5.053959,-4.618728,5.985265,-6.600889,3.090651,-1.604336,2.731743,-8.880524,-2.575104,-6.448370,-4.279739,-5.740108,-5.417779,-7.680799,-1.077117,5.732305,-1.083383,0.492293,-2.425411,5.103301,3.576022,4.036228,-6.099167,8.027817,-4.714885,0.711372,-6.108176,-4.867600,-2.959309,-6.572757,3.102959,8.980411,6.311035,-3.958957,-0.718807,5.172195,3.577161,5.081862,-2.624742,-3.024672,-0.418097,1.138099,7.206779,5.274099,5.094310,8.803232,6.040258,-9.631786,4.681331,-9.316641,-9.397541,6.702700,1.112541,-0.180022,-9.178723,-2.355856,-4.261151,0.036881,3.488822,-3.598019,-8.658216,-7.858034,-5.513710,6.419233,5.246521,-4.151547,2.009087,0.824474,-2.940674,1.704233,-8.654911,4.819206,5.364459,3.745745,3.375811,5.070796,4.009190,6.977640,0.974354,5.189112,-1.772394,-9.928226,8.431978,-1.965622,3.043264,-6.164298,-1.891551,0.851327,-8.980323,-5.075811,-6.434386,-1.601677,7.460208,2.542851,-9.836087,0.639270,-9.330235,-6.734337,8.701239,6.654404,-0.298672,6.964816,6.281636,3.000917,4.282151,3.169675,2.222131,0.605297,6.713071,9.886650,1.099558,3.502061,8.803268,8.631333,-5.770486,1.024238,2.833992,4.548012,3.117470,-1.164750,6.515227,-2.148950,5.191649,7.976022,0.246701,-3.714842,-8.437340,-2.634428,-6.987361,-2.794679,9.845662,5.113495,-2.242372,0.164779,0.988120,-1.396152,-7.395969,-9.661983,-5.234459,-4.794149,-9.812715,-1.732513,-3.845790,-9.950266,0.235306,-0.186060,0.453486,6.315284,-1.270278,9.103709,-6.646552,-7.179033,1.807801,9.448425,0.871128,2.567832,-1.094610,-8.226978,-3.318091,8.790558,5.321100,-4.327211,-4.262889,4.120637,4.090450,-0.440491,-7.663948,-1.977655,3.899831,-4.552899,9.604590,4.927046,1.299254,7.228061,-5.632443,9.685952,-7.454966,-4.980636,6.947062,6.526014,1.750777,5.292979,9.058084,2.664564,9.057167,5.321488,1.880197,-1.400642,-2.029866,-9.974447,9.441110,-0.959016,-0.543111,-1.970045,-9.638364,-1.659189,0.786954,-3.262501,5.908554,-3.494587,9.256681,2.905131,-4.261485,6.142193,8.881052,3.864288,-8.942358,-8.948148,3.521655,-9.365330,6.699732,0.739188,-2.532027,3.854687,6.034442,-2.978347,6.267465,2.076427,-0.530474,-8.469768,-5.210992,-5.964978,5.939352,0.319364,7.446973,7.673152,-2.295321,8.357861,-2.304144,-5.762173,-3.609355,-0.363460,3.429443,5.491082,-6.703250,4.874840,-9.027191,2.640882,9.623091,-9.520075,2.718587,6.191853,-6.420361,-4.012484,9.759822,-8.261427,-4.760264,8.701397,-0.051155,0.980670,-2.304933,8.769746,-8.992538,-1.857300,-5.877121,-4.520403,-9.718536,5.814971,-6.551898,0.041278,8.503723,-7.139226,-8.048358,8.535540,-0.353667,-9.399968,4.230622,5.473195,-6.981326,6.889168,-5.425723,-4.413958,5.578391,7.776518,-0.808371,7.357900,-2.251719,2.838743,8.343638,9.061481,4.667996,-3.355781,-4.962832,-9.884327,-4.996315,4.706665,5.518754,6.136336,8.060178,-9.324445,-0.573651,0.516206,1.809771,0.356207,2.608536,5.175860,-3.622629,-7.233810,9.574952,-9.275858,-0.923479,5.247131,1.908826,1.180624,0.032857,-6.566437,8.413532,9.472023,-7.095799,-3.095392,6.375330,-5.240751,2.024428,-2.688542,8.988764,-9.695324,-3.796925,7.608686,4.289605,2.900289,6.142988,-5.565412,9.138098,3.689702,-2.262248,-5.534833,5.140297,-5.293731,7.679122,-1.717234,7.678257,-0.055862,-4.937704,8.868105,-6.975805,-6.068493,3.370835,8.803276,-3.870641,-5.842088,-8.215322,3.088421,-9.342925,-8.140032,-1.818173,-3.110431,-7.955855,-7.727722,5.661995,-0.626271,-5.977422,0.954453,8.953291,-2.733894,2.384081,-9.861085,8.241886,-8.669603,3.234108,6.739095,2.227010,7.050410,9.742585,-7.641136,-5.109627,-1.942095,3.647074,-0.432431,-9.113958,3.215259,4.594453,1.417006,2.252657,-7.620098,6.243571,-7.531647,-4.919846,-0.882926,0.002865,-2.307593,6.836927,-0.101225,-6.207335,7.943147,-4.159636,-2.420440,-3.986812,-0.363252,7.116613,3.703821,2.246668,3.987423,7.763589,2.683011,-5.259638,-8.291610,-5.307438,4.385260,0.370515,-3.653098,3.028062,-3.444684,-8.186270,1.412267,8.362718,-2.056693,-3.760249,-9.655061,4.460112,1.130453,0.248130,7.351756,-2.969456,-2.893648,6.681648,4.039362,-9.638626,1.114201,7.107518,-2.494565,3.575857,7.991737,1.203792,4.151805,7.865581,-0.066811,4.219971,-6.757214,-0.379848,7.661021,1.091785,-9.100848,-7.578695,8.438567,-7.695272,2.221237,-2.299725,-3.348908,-2.856694,7.794256,-4.715832,4.992925,2.396989,6.988615,-3.191166,-5.927387,-7.514815,4.042470,-2.227656,-1.133227,4.459784,-1.302492,-6.047500,9.365217,-1.489738,-1.890437,-8.831516,-2.533217,5.272225,-8.961021,1.825410,-7.861880,0.619766,-4.632724,-2.716634,5.147036,-0.777646,2.866774,-8.001150,-3.667498,5.108321,2.715154,-3.741224,-4.594699,3.675165,5.340879,0.860888,-7.363588,-4.084328,-4.929112,0.398531,-5.160570,7.530111], dtype = "float32")#candidate|621|(980,)|const|float32
call_620 = func_63_call(relay.reshape(const_621.astype('float32'), [7, 10, 14]), relay.reshape(const_621.astype('float32'), [7, 10, 14]), )
call_622 = func_63_call(relay.reshape(const_621.astype('float32'), [7, 10, 14]), relay.reshape(const_621.astype('float32'), [7, 10, 14]), )
uop_626 = relay.sinh(uop_618.astype('float32')) # shape=(9, 6, 12)
output = relay.Tuple([call_620,const_621,uop_626,])
output2 = relay.Tuple([call_622,const_621,uop_626,])
func_628 = relay.Function([], output)
mod['func_628'] = func_628
mod = relay.transform.InferType()(mod)
output = func_628()
func_629 = relay.Function([], output)
mutated_mod['func_629'] = func_629
mutated_mod = relay.transform.InferType()(mutated_mod)
func_628_call = mod.get_global_var('func_628')
func_629_call = mutated_mod.get_global_var('func_629')
call_649 = relay.TupleGetItem(func_628_call(), 2)
call_650 = relay.TupleGetItem(func_629_call(), 2)
func_350_call = mod.get_global_var('func_350')
func_353_call = mutated_mod.get_global_var('func_353')
const_660 = relay.const([2.282680,-7.811144,-0.554054], dtype = "float32")#candidate|660|(3,)|const|float32
call_659 = relay.TupleGetItem(func_350_call(relay.reshape(const_660.astype('float32'), [3, 1])), 1)
call_661 = relay.TupleGetItem(func_353_call(relay.reshape(const_660.astype('float32'), [3, 1])), 1)
func_63_call = mod.get_global_var('func_63')
func_67_call = mutated_mod.get_global_var('func_67')
const_666 = relay.const([[0.833892,-7.467212,9.073121,-3.511616,-5.002584,-2.115044,-6.604043,4.782524,-2.038865,-6.249155],[0.100095,3.938825,-2.227641,-0.921252,-2.368240,2.486633,-7.392829,0.753733,1.290584,3.826284],[5.659860,-0.328138,-3.873966,9.689630,3.627312,7.889119,7.388746,0.426922,-9.419892,3.409397],[0.903684,-1.634802,-3.982913,0.891843,7.593193,-0.884482,-9.189253,5.583705,-6.998042,3.893339],[-3.899046,-6.046864,-7.985353,0.189022,6.197332,0.754047,6.412469,-6.057337,2.638911,8.395250],[-2.803795,3.799347,-1.169424,5.195903,-8.157396,-9.616424,-6.664558,-7.616756,5.940803,3.342181],[-3.793152,8.298398,-0.073130,-2.347701,6.030895,-3.031365,8.379778,-4.797406,-5.214089,-8.397511],[3.841518,7.851783,0.560962,-1.858112,-1.632625,6.908823,-0.352302,-4.484557,-9.428405,8.617970],[1.163951,-4.601429,4.716165,-4.036299,-1.025472,-5.005996,-5.198941,6.951393,-0.116659,-8.068202],[0.574024,1.596677,-0.110802,-5.413426,-6.688305,-3.852978,-8.772383,-2.606013,9.532510,1.756786],[1.870044,2.908338,-5.234450,3.956715,-4.385371,3.019057,9.018503,-2.352567,-6.304720,8.570713],[-1.527800,-8.301526,-5.986945,-4.381713,-2.409449,8.180900,-9.411506,8.262906,-2.365958,6.924325],[-6.769273,-4.356969,5.224752,0.033741,-1.013118,5.329832,-5.697612,5.032152,-6.569946,-8.866777],[2.361417,1.551627,1.006215,-5.163107,1.673832,-9.154486,-7.211491,-4.889902,7.259770,-3.023882],[-8.846461,-1.750305,0.108813,7.004445,-2.615708,-0.903096,0.079187,9.651026,-0.360955,-4.733000],[7.756172,0.814591,-4.344114,9.434399,0.320661,9.480045,1.672813,-5.049554,4.386421,6.846289],[-5.725900,7.699845,4.580722,-8.887018,8.889484,0.509594,4.233990,-0.620021,-5.383753,-2.165834],[7.655592,2.878393,8.253485,-7.490267,5.177542,-0.103921,4.400355,-9.106681,-2.489550,7.854602],[3.494797,-3.340077,2.710239,-6.887410,7.682045,-1.904695,-8.871556,0.274137,2.039925,-6.332761],[3.870769,-8.974796,7.965263,7.358988,3.393836,0.887526,-3.460400,-3.302296,-8.809529,5.257803],[8.090258,3.435636,-4.708649,3.935944,-2.823620,-1.741541,7.358700,-7.570346,3.235455,-7.324033],[-2.735135,-9.642663,-3.311691,8.922729,6.611000,-1.581398,-3.873720,9.742289,-6.245614,-2.847041],[-6.527701,4.198055,-4.503432,-4.852345,6.704010,-2.722379,-2.663712,-1.356796,0.643235,-3.571843],[6.790528,0.815758,-2.654905,-5.872740,-5.736046,8.564803,1.754897,-6.148918,-4.833206,-3.113110],[4.822109,-7.126503,0.258899,-6.845039,-0.653632,4.272905,7.194160,2.735629,0.570303,9.250039],[-0.780009,8.540178,6.129394,4.000029,-5.120858,2.365328,3.652537,-3.511397,6.509283,6.036435],[9.649545,1.707343,-5.388333,-0.778696,-8.605245,1.642134,-3.996419,-9.154868,-1.716982,7.485131],[7.294230,-8.873297,-6.811325,0.365227,-8.261570,9.646090,-6.152388,-1.588039,0.503953,-0.995694],[-1.216729,0.186816,-8.364219,-5.481550,1.055240,-5.087976,9.191877,9.063883,4.751828,2.018429],[-5.567623,6.887264,3.999144,6.601675,-9.586172,-4.289633,7.817513,5.869148,8.315898,-4.552395],[8.376380,-0.264801,7.482221,7.684987,-3.955599,-3.313988,6.999365,6.647240,-2.992110,-2.232554],[1.239153,0.333271,-7.630412,-5.127733,8.765247,-9.205205,7.530481,7.059359,3.282942,6.734294],[6.576346,-8.601631,0.582791,3.302369,-8.573498,-1.393323,-2.981203,-4.885510,-6.344733,-6.078395],[9.827675,3.105440,9.185083,4.555590,3.738502,1.955315,3.843413,4.087903,0.212577,-4.656741],[-8.655850,4.570266,-1.166169,6.468236,5.504996,-2.691407,4.711691,3.945543,-6.826597,8.211839],[-7.959094,-2.873180,-0.043941,-7.296520,-4.368471,1.629300,-2.418359,5.415030,-0.883878,2.059735],[8.202658,-0.268520,0.037157,2.401035,-1.073237,4.980687,8.414041,-2.864995,-9.840171,-2.472878],[3.063350,4.708934,-5.177391,0.339574,-1.970436,-4.307915,-2.437150,-9.362127,1.900788,-4.907716],[-5.786059,-0.324079,9.152967,6.103759,9.099507,3.428112,1.230055,-2.631763,2.241227,-7.045675],[0.297768,5.444831,9.901040,6.729543,-3.995979,-8.771606,-1.896166,-8.636022,-4.815116,6.106364],[7.203214,-4.004090,5.309678,3.674378,-8.981116,-8.851959,-0.603988,-6.406454,6.504334,-6.505355],[1.763518,-6.402009,3.116473,2.315328,-1.624128,-2.147952,5.143620,-3.235378,4.627526,-4.617651],[8.870632,1.247429,-1.057309,1.336361,-9.004934,2.427063,3.121761,5.936534,0.005470,-6.386837],[4.775620,5.695535,0.891192,1.340150,7.785749,6.667481,5.811397,9.847749,-3.439691,4.793097],[-0.258502,-4.530153,3.943389,4.595582,-3.301871,-0.608940,-4.377562,3.935581,-6.404729,-5.504265],[-7.336095,-7.023462,7.737747,5.539860,4.409039,-7.124349,-3.526927,5.084930,-7.898809,-2.920307],[-8.123594,-3.139426,-8.149983,-1.488016,-5.892250,8.320309,-4.000926,-2.779606,9.015409,0.986715],[5.828170,-8.945941,-6.204215,7.476090,-3.871701,-4.152300,-4.997663,1.931111,-1.661332,6.550478],[7.122520,7.907519,4.674775,2.143326,9.200414,6.818458,-4.104269,-6.357459,1.402797,7.992666],[1.305060,-8.435969,-3.829076,1.634968,3.609788,1.328171,8.184232,8.755510,3.673367,8.124129],[8.095872,7.880287,-7.767072,6.190272,0.119791,-7.371130,-8.242086,-3.332117,-8.038230,5.931829],[2.427361,-0.548111,1.214960,5.883248,-4.008617,7.381467,2.686828,1.986313,4.862784,8.692266],[5.428600,6.569414,-7.642797,-7.464355,1.688241,-6.741893,7.415757,8.154835,-0.475280,8.739141],[8.728662,8.370349,8.171573,3.012397,2.364576,8.658118,-1.781712,-0.695312,-2.993665,8.725161],[-7.974099,-9.527196,9.400738,-1.121110,-4.751725,-0.058909,-7.488673,-9.976124,5.481070,-7.773877],[-9.959877,8.807310,2.468576,1.719585,6.130802,0.178990,0.943355,6.640254,-1.912821,-5.091485],[1.541763,-1.613741,-1.575981,1.824695,-7.602755,-6.878203,2.600926,0.162537,5.118137,-6.742086],[-7.574643,-5.148436,-6.906582,-9.000597,5.266681,2.879857,5.875903,4.461451,5.911047,0.362831],[-0.039907,-8.769740,-4.268598,-9.678098,5.434874,-0.039405,2.387250,1.991102,-2.480874,-5.111009],[-6.125694,-9.041987,6.721271,-7.575408,-1.957803,9.944833,5.238979,-0.625014,4.909290,-5.343608],[3.172664,-6.303264,8.263447,-3.449369,2.405609,-3.465526,6.202974,-2.026068,-2.320977,5.835053],[-9.837037,1.744103,-7.094380,9.675948,6.020372,-3.081364,-3.578922,9.347769,-1.604972,9.456049],[-9.581831,-6.858320,-0.341827,-6.180089,1.652316,3.090365,-3.453765,2.124484,-7.481346,5.768701],[-6.532528,9.813599,-1.341514,6.137411,-4.178573,9.418432,-1.877970,-8.165480,-2.008215,4.529215],[-8.583806,8.867454,4.824172,-2.752209,-4.288160,8.319734,4.600890,8.967391,1.098208,4.434708],[-1.954606,-3.968297,-5.214254,5.926222,-7.482747,-2.136652,-8.988263,3.226447,-3.039373,5.740448],[1.955400,-1.363469,7.134142,7.347756,-2.397763,6.968095,3.550338,3.775683,-1.106313,-4.385447],[5.604752,-3.175612,-9.469656,0.274119,8.365435,0.806201,-0.320429,3.578681,-1.589780,-9.811449],[9.496703,6.179409,-8.818955,-0.276818,0.967580,8.322061,7.517079,-0.170720,0.208591,0.838880],[2.850969,-9.125279,-6.909854,0.560859,-0.933023,9.601694,5.171902,-4.397892,9.690773,8.820331],[4.844021,7.739805,-3.942338,-4.086876,6.215948,-8.100396,7.696055,-2.859884,-9.340252,-9.270014],[-1.187039,1.608927,-8.024902,7.118771,-0.063192,-9.705004,4.338480,7.419297,-7.040173,2.020759],[9.554801,-6.081051,-7.039965,-3.093939,-4.387152,6.880900,-2.139763,6.105028,-6.274339,-1.913724],[5.525277,-1.119526,-2.315941,-9.837418,-1.601197,-5.313087,8.059353,-3.111500,-0.178069,-4.348991],[0.614498,0.531074,-4.926558,-0.241846,0.424570,-4.950213,1.140158,6.397287,-7.665811,-9.447567],[6.963104,-0.257393,4.174708,2.014925,5.172455,4.174538,8.735819,-4.140703,0.552596,9.307970],[7.564919,1.027777,-7.515541,-9.867899,-3.463180,7.308157,5.071366,-7.863716,-6.693736,-6.090770],[2.118670,-5.532052,-1.113020,7.579477,8.266706,-0.309104,-2.677996,-8.525915,-6.161806,5.066896],[0.774474,1.363507,-5.930931,-6.278442,1.547152,-9.145372,-0.765944,5.125182,7.067073,-6.819067],[9.916732,9.943967,-7.102701,7.346800,-8.078387,9.698288,4.190826,-6.510139,-2.782315,5.546581],[-0.898904,-2.135988,-0.250599,3.985023,-4.538762,7.969191,8.242521,8.950032,-8.841334,-9.406705],[7.744045,-8.920104,-2.803186,-1.007569,8.914372,-0.622822,9.525943,-4.822996,6.987772,1.609235],[6.018125,4.597393,6.515613,-4.566090,8.022681,-7.747448,-5.681538,-7.469114,-2.036656,2.503286],[-2.160145,2.671135,7.015721,3.605608,7.991184,-0.573631,0.697228,9.267928,5.672068,-8.977083],[6.359450,9.097616,-4.876457,-9.880676,5.375179,-1.430758,-8.801409,6.000863,-0.100899,-7.408581],[-3.356351,-9.641242,-0.271436,-9.701009,-8.966524,9.569187,-0.445867,7.548688,-4.979250,4.246287],[-5.533287,4.541828,6.748827,-3.716731,2.424752,1.796630,2.481526,-9.416705,-5.462630,1.697228],[2.154186,-1.456551,-0.023814,-2.360424,7.241514,-6.026416,-2.046382,-3.307747,-5.225965,0.863783],[0.008764,8.386072,-6.413080,8.141491,8.514594,9.872217,8.976648,-6.411408,-6.856851,-6.420013],[-8.189636,9.081805,-3.920568,-8.062482,-7.433807,-6.281330,-2.950643,-5.880515,4.711575,9.014613],[6.334683,-2.423758,-7.689967,-6.495438,4.762726,2.616366,0.923696,-7.848068,-2.712303,-2.178929],[-4.798908,6.011436,5.410824,-4.454902,9.454822,4.010511,-5.287612,4.629183,-5.672216,1.036221],[-8.798631,3.883428,2.148263,7.225957,-9.734461,-6.808998,-2.372608,9.153528,-6.736783,7.774362],[-2.420369,-2.947206,-9.091328,3.862533,8.476807,-2.016512,0.432550,4.122950,-3.384640,5.404531],[-3.197449,1.540810,4.546869,-4.309445,-1.629906,4.512304,-6.877692,-5.782197,0.186619,2.874569],[-5.251647,-8.183856,8.556486,9.981414,-9.057004,-3.963815,-8.356827,2.110861,4.217137,9.153373],[1.103947,-7.892986,-7.327693,-1.835241,-0.808781,-1.863312,-5.428523,7.556358,-7.241184,2.179426],[4.190593,-6.106063,7.237513,8.527095,3.492144,6.834254,7.087032,9.556011,-9.092373,4.702929]], dtype = "float32")#candidate|666|(98, 10)|const|float32
call_665 = func_63_call(relay.reshape(const_666.astype('float32'), [7, 10, 14]), relay.reshape(const_666.astype('float32'), [7, 10, 14]), )
call_667 = func_63_call(relay.reshape(const_666.astype('float32'), [7, 10, 14]), relay.reshape(const_666.astype('float32'), [7, 10, 14]), )
output = relay.Tuple([call_649,call_659,const_660,call_665,const_666,])
output2 = relay.Tuple([call_650,call_661,const_660,call_667,const_666,])
func_668 = relay.Function([], output)
mod['func_668'] = func_668
mod = relay.transform.InferType()(mod)
output = func_668()
func_669 = relay.Function([], output)
mutated_mod['func_669'] = func_669
mutated_mod = relay.transform.InferType()(mutated_mod)
func_668_call = mod.get_global_var('func_668')
func_669_call = mutated_mod.get_global_var('func_669')
call_693 = relay.TupleGetItem(func_668_call(), 1)
call_694 = relay.TupleGetItem(func_669_call(), 1)
uop_696 = relay.rsqrt(call_693.astype('float64')) # shape=(3, 980)
uop_698 = relay.rsqrt(call_694.astype('float64')) # shape=(3, 980)
uop_700 = relay.cos(uop_696.astype('float64')) # shape=(3, 980)
uop_702 = relay.cos(uop_698.astype('float64')) # shape=(3, 980)
uop_711 = relay.sigmoid(call_693.astype('float32')) # shape=(3, 980)
uop_713 = relay.sigmoid(call_694.astype('float32')) # shape=(3, 980)
func_484_call = mod.get_global_var('func_484')
func_487_call = mutated_mod.get_global_var('func_487')
const_719 = relay.const([0.026098,-5.876740,1.265560,-5.956299,-4.469597,-9.821888,-0.457014,2.222375,5.457235,1.138382,1.826153,8.788100,-3.644336,-6.256464,0.570168,-3.511477,7.992600,9.224688,-4.575937,-9.219236,5.755719,-7.237474,-5.593167,1.905582,9.745893,-9.066934,-1.399209,-3.549893,-9.714481,-6.132153,-8.795606,-1.954465,-2.163653,0.320889,0.055698,6.196445,-8.965977,-9.048793,-1.092717,-2.578594,5.152573,-9.690644,-9.200058,-0.807199,2.225873,0.545252,-0.204486,9.664649,4.318486,1.016429,-0.286101,0.017666,-6.536060,3.471355,7.421156,-7.027896,-8.581956,-7.999226,2.837930,7.654657,-0.147151,5.489403,-7.061077,2.317797,3.531607,6.332160,1.166058,-7.165463,-0.536299,-4.684306], dtype = "float64")#candidate|719|(70,)|const|float64
call_718 = func_484_call(relay.reshape(const_719.astype('float64'), [10, 7]))
call_720 = func_484_call(relay.reshape(const_719.astype('float64'), [10, 7]))
output = relay.Tuple([uop_700,uop_711,call_718,const_719,])
output2 = relay.Tuple([uop_702,uop_713,call_720,const_719,])
func_721 = relay.Function([], output)
mod['func_721'] = func_721
mod = relay.transform.InferType()(mod)
output = func_721()
func_722 = relay.Function([], output)
mutated_mod['func_722'] = func_722
mutated_mod = relay.transform.InferType()(mutated_mod)
func_668_call = mod.get_global_var('func_668')
func_669_call = mutated_mod.get_global_var('func_669')
call_723 = relay.TupleGetItem(func_668_call(), 2)
call_724 = relay.TupleGetItem(func_669_call(), 2)
output = relay.Tuple([call_723,])
output2 = relay.Tuple([call_724,])
func_727 = relay.Function([], output)
mod['func_727'] = func_727
mod = relay.transform.InferType()(mod)
output = func_727()
func_728 = relay.Function([], output)
mutated_mod['func_728'] = func_728
mutated_mod = relay.transform.InferType()(mutated_mod)
func_727_call = mod.get_global_var('func_727')
func_728_call = mutated_mod.get_global_var('func_728')
call_729 = relay.TupleGetItem(func_727_call(), 0)
call_730 = relay.TupleGetItem(func_728_call(), 0)
func_350_call = mod.get_global_var('func_350')
func_353_call = mutated_mod.get_global_var('func_353')
call_739 = relay.TupleGetItem(func_350_call(relay.reshape(call_729.astype('float32'), [3, 1])), 3)
call_740 = relay.TupleGetItem(func_353_call(relay.reshape(call_729.astype('float32'), [3, 1])), 3)
output = relay.Tuple([call_729,call_739,])
output2 = relay.Tuple([call_730,call_740,])
func_745 = relay.Function([], output)
mod['func_745'] = func_745
mod = relay.transform.InferType()(mod)
output = func_745()
func_746 = relay.Function([], output)
mutated_mod['func_746'] = func_746
mutated_mod = relay.transform.InferType()(mutated_mod)
func_721_call = mod.get_global_var('func_721')
func_722_call = mutated_mod.get_global_var('func_722')
call_747 = relay.TupleGetItem(func_721_call(), 1)
call_748 = relay.TupleGetItem(func_722_call(), 1)
const_751 = relay.const([[-1.398291,-0.485627,-1.314753,8.495509,-7.818940,9.480289,-5.808480,7.287912,5.609586,-2.393814,-1.465438,6.153878,1.407895,2.627431,0.933145,-5.286945,-2.797027,-1.438863,-6.432842,6.195907,-1.217259,8.725131,1.464112,5.672993,5.438169,-9.646315,-6.378536,3.173985,4.787042,6.116573,8.400172,-7.525572,1.248764,-3.207530,-9.414970,-8.050538,8.934006,-3.728109,-4.114251,1.486493,8.666628,-5.115225,7.083380,-0.206136,-7.902421,-2.735661,1.652016,3.864530,5.946434,-9.945030,5.205031,-9.325197,9.909715,3.918867,-1.410715,4.813322,-9.635422,0.865239,4.428126,-0.778592,-8.596278,-1.242996,-7.385288,-4.297409,9.472224,2.889465,7.615900,3.394135,-2.648091,5.198850,-7.310257,6.409538,-8.914203,-4.958427,-7.814248,0.214571,5.351757,-7.465022,5.822586,5.201762,-7.095550,3.734838,1.589382,-8.500605,-6.818292,-5.769489,-7.356365,7.737205,8.364216,9.592625,4.685460,-0.945848,-7.593913,-9.420344,7.249225,-7.703495,-8.912312,9.846748,7.171929,-8.113818,1.435999,-0.297744,-0.219516,-2.137433,7.838175,6.489884,-5.436834,-8.170038,-2.654978,-9.705343,-7.140652,2.236041,3.513237,-4.257648,-6.368595,-0.364871,-3.230705,-7.380958,-0.623241,-4.955859,-9.471072,-1.856774,1.771324,1.134296,3.695954,4.951052,-6.479543,8.274459,3.528018,-9.687718,-0.193397,-6.287161,4.879685,4.867061,8.628016,-2.070124,2.277203,2.835001,2.187243,-1.908950,-8.613562,-7.029634,2.697512,-1.993768,-1.864895,-8.755979,2.307346,8.638391,6.107452,2.195673,-5.974828,-3.268503,-8.806600,-6.916184,-6.679337,4.725614,-0.049390,-9.400070,0.164750,-4.825892,9.039385,-0.133310,0.427238,-4.174868,-6.267207,-4.508250,1.758950,-2.287584,-9.667022,5.224765,1.998607,3.279019,-5.973018,1.516383,7.065867,8.582900,8.326558,0.781133,5.840827,4.406827,0.915033,-5.516307,2.733205,3.459297,6.489009,-9.224779,0.418232,-8.739013,1.220298,6.335677,-8.005876,-4.059643,-6.218406,-8.023061,4.997146,4.115440,7.620267,5.213808,-0.019616,-5.886985,6.778031,-1.776783,5.942962,-6.574632,0.844990,8.681017,3.964861,1.025566,5.113355,0.454823,8.655784,-1.644137,5.993033,8.026186,-3.709292,5.382830,4.609558,-3.077406,8.534796,3.274257,-1.858178,-0.364035,-3.334904,4.558209,6.911348,-5.343419,6.826265,-7.062542,-1.656193,-5.038838,4.678195,-5.072436,6.244481,5.430422,-1.060725,9.747539,9.012684,-3.551505,4.282358,-1.748444,-7.801290,-7.814216,3.495663,-4.939159,-6.073740,-9.845652,7.690050,-5.691802,6.140253,8.539228,5.137904,-9.110661,-7.898780,-2.195165,-3.143252,-0.307271,-5.731015,-3.863119,9.704436,1.123710,7.883865,-1.973209,6.236874,0.438010,-2.455333,-9.310913,-7.088325,8.829446,0.212708,-6.267997,-4.996824,-3.235214,6.017649,-2.073460,-7.288548,8.081124,5.392855,-3.968679,-9.033139,3.567212,-7.556635,-3.851079,-8.227894,9.906854,-1.560330,6.288139,-0.891131,1.861170,-8.374754,3.833492,1.616152,-9.013578,-8.817116,0.585113,-8.997019,8.902931,-6.075777,7.744131,9.590727,-8.159360,4.541719,-9.420988,-1.609661,7.343421,4.227510,1.801736,6.545336,1.263807,-8.365563,8.162159,6.390282,6.524952,-9.822912,-1.403466,5.367352,5.358193,-5.295745,-6.102761,0.226706,7.695604,-3.773357,-4.770289,-7.597885,4.969705,-1.017114,-3.169796,-3.165923,-2.803489,-9.603700,-4.604697,6.079303,-4.768132,-9.070469,-3.095779,7.775304,-0.271034,-7.970822,5.162714,8.936597,2.125662,7.547386,7.368762,7.202665,9.068966,2.606293,6.183360,7.894559,-2.191246,9.128689,-7.681398,1.317768,-3.833801,9.628050,-9.472164,6.882367,-0.073821,1.193093,-5.429025,8.381235,3.739900,9.214430,-4.887993,-5.739214,-5.146502,5.606645,-5.452013,-5.418055,1.709500,4.222841,-1.341691,4.803178,9.701720,-9.455240,-0.288575,3.066167,-2.598202,-8.734004,-4.016281,-9.077825,-9.070307,7.889995,-7.182197,-3.835589,3.727141,8.469160,-4.485790,-6.772614,-8.340376,3.873519,8.109618,-9.851295,8.168678,-7.209580,8.999330,4.832612,-3.446181,8.147652,-4.891595,-8.908079,7.539904,8.805259,5.926014,1.948028,-6.593067,-1.942924,-5.271232,-0.275723,9.444427,7.342430,0.606216,7.298717,0.885461,-0.367361,-8.738741,9.124404,-6.625043,0.844133,-6.542422,3.268020,1.829211,-8.885349,-6.583010,4.631362,6.498974,0.031675,3.452317,8.981696,4.248571,-5.964267,-6.252806,9.753796,-4.057896,-7.451475,1.796322,-4.407972,8.176546,-2.978908,6.635580,-6.963057,-0.298905,1.023305,-3.057066,-7.917895,-7.898903,3.467586,-2.228644,5.432310,5.125760,-0.005992,-0.378771,8.393386,3.200868,0.431965,8.225439,-7.780079,5.592886,-1.328983,-2.342708,3.336982,1.488787,5.757294,4.677651,5.199893,0.132466,-7.606021,-2.760726,8.747958,8.763064,-0.240875,-8.992303,2.392604,-7.616953,2.979123,-6.809103,4.240763,0.883280,-9.354563,4.516644,7.989098,3.667621,-9.073309,7.283527,7.901409,6.533578,-5.409378,-5.894857,7.475814,1.056008,1.452165,-9.224169,6.807234,-5.768337,-8.107272,3.296399,-1.795068,6.519169,-8.238142,-9.150382,-3.184774,8.525219,-8.503448,-2.395715,-3.865992,-8.162120,6.359574,-9.228996,2.074288,-4.666204,6.023309,5.296649,-0.542922,-1.669699,-3.129785,3.822835,-0.182880,0.076936,-3.445149,9.244297,3.992821,8.881001,-2.637639,1.720139,-1.395287,7.914804,-6.805665,2.492786,-5.831348,1.910387,-4.783548,3.996850,-5.870423,1.614263,-5.221109,6.409430,4.225498,-2.493330,4.048432,5.043558,-1.304080,8.760051,9.377591,2.544374,-3.150168,-7.811360,6.769529,-7.013683,-2.927646,7.036193,-8.986879,-4.743066,0.854111,1.488905,7.532800,-6.599790,7.405183,-9.465223,-2.644794,-7.440515,-7.593403,8.959630,-1.781473,0.556998,-6.906502,4.874722,-5.009774,-9.257368,6.610841,-7.918079,-3.475228,-7.598153,-7.656931,-9.456976,-7.696782,5.057337,-2.761452,2.641137,-9.017037,4.267333,1.489052,9.643045,2.352303,0.492891,9.271541,2.091177,-9.624860,-8.927752,-2.821221,4.236737,3.311054,0.649285,0.889792,9.066737,-0.710934,-4.047541,3.788879,2.513473,4.043653,3.244364,-8.178283,-6.529154,-8.163986,4.614978,-1.844370,-8.778756,8.705954,4.438106,-6.049293,9.762867,5.062453,-5.332000,1.657722,8.622871,-6.370474,-2.160943,5.973808,2.407623,1.520913,-6.597519,0.666227,2.542511,4.493348,1.623313,4.987133,-5.317643,9.828041,-7.698147,-2.508814,0.992449,-2.123292,2.064554,3.982438,-8.822153,8.589609,-0.399077,8.689641,6.681970,-5.454314,-6.981919,4.128409,-9.148799,1.195009,-3.074374,4.041108,-1.211031,3.290985,1.622776,-9.425317,3.027969,2.236553,-6.432467,0.542573,7.903052,-5.807249,-2.950775,-5.835822,-7.200476,6.170562,6.464482,6.554194,-5.268703,6.552775,4.922827,6.312802,2.187909,-6.943642,1.773133,0.075596,5.769455,-7.134836,-6.007325,-6.116997,-8.902258,8.733128,-6.223357,2.303856,3.282327,8.942284,-5.429788,7.840496,1.168450,1.246474,9.507512,2.965988,4.928124,-3.816922,-3.865397,-8.665060,-9.177987,-4.574433,-4.889087,-7.908365,-7.473356,-8.395592,-2.161014,-2.338697,0.023185,3.296347,-5.856113,0.773645,-7.131921,4.648381,7.317019,-4.855700,7.044625,-4.267229,-3.319330,7.649934,-5.869344,-8.046212,1.622262,-0.496776,-6.486770,-2.180541,-1.914576,-5.401902,5.211649,4.034727,-0.353858,8.173853,-4.177603,6.697465,-9.627842,2.371170,5.763975,3.016387,-3.877298,0.268138,7.122260,-6.753145,-3.032583,1.195665,-2.818685,-3.390468,-9.365231,7.739484,7.144775,0.028442,9.672212,6.779525,-1.867624,-6.646509,-5.240239,-9.299366,4.353415,-8.465412,1.704766,3.253952,-6.321879,-1.592118,5.226466,-2.337551,9.057229,-3.797349,-7.981676,4.269602,9.480657,-6.313717,9.980906,9.802867,2.221950,-2.064043,2.660292,-2.917424,7.069297,-0.648135,-6.639184,-8.380832,6.148193,4.451197,-2.132345,-9.664659,-8.421698,8.433083,8.953177,-3.301436,-7.122420,-9.365470,-4.116701,-6.276661,9.014039,8.544218,4.256156,4.354833,-8.478196,-9.240268,3.515603,-3.601547,7.821485,-2.423374,3.636825,9.724130,1.636791,9.426512,7.985683,-2.929745,1.353109,-6.608774,4.543161,2.985295,-7.068886,-2.121558,-4.561506,0.339827,-5.657925,8.970920,-6.724323,-9.329105,-0.593627,-4.037794,7.901651,-3.409814,-7.568247,9.174007,6.584376,8.413375,-0.033978,1.128655,4.281748,7.523665,-2.376951,0.342161,2.441432,8.464385,4.066054,1.895831,-0.820925,4.914055,3.356773,-8.279066,1.213611,-7.429122,2.329333,4.353911,8.666857,-9.559240,8.303831,-0.614527,3.995465,-9.432045,5.708576,7.612144,3.175744,-0.106639,7.527298,4.741973,6.566289,7.443969,-3.327684,8.042295,9.977977,7.217179,8.333658,0.110509,0.915385,6.276214,-1.846942,-2.234685,-0.071881,-3.351315,9.742039,-6.875663,8.381360,4.038817,-1.223594,5.239943,0.949982,-2.820769,5.642406,1.914937,7.693068,4.243611,-1.939335,-5.960272,2.843754,-7.468184,-6.049152,0.082987,-4.359371,7.575446,4.114773,-6.639376,-5.983550,9.300405,7.309035,-1.759771,9.642391,-9.563263,-5.467672,-5.534129,3.579822,-0.702124,-6.032818,9.496850,1.655813,1.280051,-8.951913,7.078958,1.263177,-0.849831,5.481237,1.547328,-8.218289,-5.444228,-6.942101,-4.905700,-9.073989,-5.414418,-1.564255,8.937668,-4.228428,-7.512711,7.136127,0.685494,-8.242094,5.725825,1.360442,6.043277,-0.352721,-9.142654,-6.291593,-0.584769,4.472570,6.466938,-5.210756,8.547944,-8.164985,7.785327,6.527184,-5.100524,-7.848153,-5.255525,-5.484534,-3.834980,4.173408,-1.552709,1.541002,-9.652296,8.765418,7.024946,2.576470,-2.795909,-3.402610,2.188917,8.975717,-6.136919,0.599120,3.990003,-5.858516,-5.510989,-6.418326,9.048871,5.252658,-7.586058,-7.834711,-2.517366,8.645234,6.286710,4.026987,3.975702,-7.159036,-7.397656,-6.078165,8.753523,2.839622,4.072076,-8.916568,-4.713910,-3.309310,-1.160252,-5.518059,-9.527725,-0.664490,8.948585,-0.300158,-2.107125,-0.685910,-0.602927,-8.494997,8.698232,2.470975],[0.559713,-4.672902,0.795755,-4.958216,7.395589,1.451272,-9.128074,7.304540,2.045688,5.157512,-2.867309,-8.991457,-0.171114,-5.134952,8.170362,-4.995267,-5.968667,-0.616836,-1.524101,9.587754,7.882997,7.131424,-0.446978,6.922028,5.768307,1.392415,1.843984,-4.095095,-8.777882,8.093321,8.163393,-8.400230,-0.337976,2.725737,-4.949960,-4.221275,0.316945,6.325765,-7.822209,5.717192,7.431622,1.572214,3.879541,5.352456,8.225475,3.670045,-9.752817,-7.793948,-2.597864,0.410023,-7.391519,-5.952904,-2.719634,-2.409669,-4.729752,-4.989837,-4.223294,-7.097424,3.554269,-7.782512,3.385088,3.324130,3.792134,-6.177373,-8.931367,-6.848332,-0.006810,-4.857847,7.146009,6.550910,9.548474,7.715811,-1.880116,4.931613,2.967416,-8.210207,8.038911,1.512370,5.395899,-4.245206,2.770284,-7.189365,0.785445,-1.005536,5.206017,-0.726677,1.330252,0.226554,-5.082875,-8.601135,-9.161674,-8.196157,-1.855909,-4.837121,5.184348,3.710058,-2.686341,-6.269122,9.010267,-6.569738,1.986595,2.392141,-7.785879,-5.293423,6.131723,6.062388,0.229080,0.028736,3.198944,0.320683,-4.654201,9.278382,-5.751941,-1.804148,9.663477,2.820348,8.762431,2.451595,2.674190,-5.940882,-8.216710,-5.767024,1.281588,-9.784140,0.080963,-6.010119,-0.048523,-0.052182,1.526838,-7.387917,9.629934,4.359429,-6.199163,6.034158,-9.980948,-1.082505,1.138379,-7.305458,-2.408815,7.974163,-7.958423,1.917535,2.614882,-5.462475,-6.460651,4.247794,-7.937225,6.213464,-7.843293,-2.998357,-6.559278,6.380559,5.608488,9.567129,-3.200088,0.579870,-6.673205,-9.451951,2.820768,-8.458364,6.981164,4.946356,8.528101,2.477048,1.012433,-7.074777,-8.721061,9.801948,-0.062618,-4.694630,6.952551,8.464539,-7.168875,-1.585260,-7.159168,-4.558453,-1.483217,6.587474,-7.770147,5.221935,-1.334334,0.296805,-6.078507,-5.371101,0.902278,2.222717,4.253339,-5.695445,-1.959305,1.883155,-0.434881,0.790689,0.354214,-0.810057,1.252210,-3.132208,2.149092,-2.160695,-8.987420,-0.028136,0.793261,5.886518,0.683279,5.050164,-5.226394,-7.052396,-6.355810,3.329623,7.318561,9.768082,-8.033511,-3.074785,7.739786,4.296411,-3.836415,-4.188592,5.167664,-9.689049,7.083542,1.519391,-9.809184,-5.340819,1.412351,-2.098029,1.242748,5.659236,7.518664,-6.640601,-1.956996,3.169658,3.005247,2.462441,1.604038,2.837170,2.017387,-9.107905,2.338950,-1.893737,-5.127952,5.991883,-7.695171,4.142021,-7.335429,-9.839547,5.099055,5.889548,7.807755,-4.051328,-5.324302,-8.301354,-7.068523,8.230356,1.159900,-9.887712,7.552322,-5.800907,-9.476998,0.033051,7.928840,4.765189,2.378791,9.603658,6.905022,2.474791,-1.386390,6.309996,-2.595108,-9.439336,-4.945342,-9.242237,-3.211997,8.730108,-7.748938,3.511366,7.303299,3.352005,-6.022575,5.212297,-9.563065,5.969335,-4.388676,7.860796,-7.193394,4.851777,-6.312002,-8.089898,-4.206992,8.833503,-0.108681,-9.868014,6.214126,6.028034,-4.961257,-7.346906,5.046172,3.757649,-2.671343,0.865250,-8.491179,-3.232799,-5.432249,8.792535,-2.513819,2.363509,-8.185444,-0.973921,3.395233,5.948878,1.439274,-7.921059,3.850376,-0.397437,-6.246298,-2.516554,-0.325626,4.350010,4.353090,2.224121,2.828875,0.683899,-3.421222,-3.496556,4.749821,-2.489521,9.797616,1.909021,-0.597669,-8.138859,3.993771,-7.469180,5.793368,-9.889093,-2.167907,5.463982,2.588402,9.830243,-5.208545,7.859080,9.306989,-8.262126,2.889899,-6.515263,-0.496561,-0.675247,3.875736,1.206251,4.162881,-7.606974,-6.064916,0.301837,-7.352080,9.262408,-0.411948,-7.921756,-3.372155,-1.178449,-3.078950,-1.706948,-8.893958,9.777164,0.993874,-3.098029,-4.275642,-0.709517,-1.470168,-8.073421,4.666656,-3.827418,7.182189,7.112002,6.607961,2.780672,-1.982664,-1.831435,-7.086333,5.491360,8.022478,-4.268727,-1.736426,-5.259231,8.693048,8.265784,-7.714963,-2.219339,-4.160215,-3.982731,-9.816585,9.182363,9.970575,4.233233,9.981603,9.657740,-5.200351,1.205841,-9.029563,-8.405694,-7.505224,-4.235021,0.340033,-0.201339,5.896946,4.172679,-0.798089,-1.487062,1.407051,-5.652277,-1.399212,8.002356,3.730052,4.193782,-6.870204,5.449744,9.851205,4.555813,5.591007,-6.916027,-8.483610,-1.751969,4.314481,-5.286147,-7.020528,3.771422,-7.229202,6.338175,5.215948,-6.879476,-3.812646,8.023031,1.574029,-1.261035,-1.217812,7.907981,6.949474,-5.838608,6.702155,0.097159,5.055486,-7.624244,9.029836,4.717280,8.446332,-8.680392,-7.444114,8.995558,-8.253456,-5.777341,8.765287,-4.880236,9.734256,4.297898,2.605372,-0.459259,9.737587,2.930731,-8.165430,-7.156990,-1.518628,-1.584520,-5.958636,-2.521343,0.965929,7.671169,8.409207,3.589903,-0.853863,2.961080,2.316292,-7.815243,-0.052518,7.379575,5.232759,-7.343596,-1.129201,-0.105529,1.550182,-8.493822,8.785199,0.007601,5.688402,5.712459,3.621835,5.452033,-9.728102,0.568986,6.394356,0.804899,-1.568840,-5.130620,-0.168530,2.023012,-3.616470,3.956472,-3.506647,-7.179472,2.353893,8.940319,-2.208889,-7.439586,8.797288,3.444819,-0.005850,9.376143,8.864799,-8.593510,-4.634471,4.579586,3.200542,-9.323442,2.872671,7.247434,-5.241392,0.289449,3.766495,7.401981,5.422540,-5.343546,1.533330,9.835980,7.995559,7.564562,7.809542,-3.932930,2.204417,-4.189842,1.330873,9.198929,5.128057,-8.818913,-3.221040,3.115229,1.530971,-2.450999,8.885375,1.942657,2.230542,-1.478162,6.407142,6.886538,4.573665,8.557739,5.519476,-7.757017,0.649455,6.180630,-1.381052,2.628197,-9.968323,-7.804577,4.862573,6.626779,-7.315079,-7.210688,-4.616092,-4.960470,8.920800,2.834180,1.630926,9.889986,-4.437179,-3.802849,8.918829,-5.271803,7.486455,0.775813,-5.286724,4.874511,-2.679585,-3.288929,7.925144,-6.639187,-0.943249,6.492590,5.436628,-6.158117,-4.212057,-5.811509,7.945867,5.279685,-5.495581,1.313226,7.738202,0.418805,-4.551892,7.372500,0.624697,1.736089,3.762533,1.783454,9.991018,-9.499816,-8.536864,-6.162823,-6.991231,0.098132,-9.051882,0.027671,6.986044,-4.095017,5.026849,-0.573761,2.882338,-3.186978,-0.649179,-6.091788,-8.370468,4.548266,9.816647,-0.244540,-1.338725,-5.336417,-5.462332,-1.284357,1.221097,-6.177330,-0.444858,3.239551,-1.713184,-9.569706,7.761568,-0.540006,-5.833593,-2.923804,3.554803,1.360072,-3.555884,8.041890,3.729217,7.766727,-5.563828,3.642574,-5.819361,-6.846807,6.092011,4.068722,7.534496,-3.169467,-9.308760,-9.749183,0.271981,9.406221,8.909401,-9.241898,-0.944893,1.942001,8.819449,-1.217761,2.186497,-5.291506,6.185792,8.726557,-5.143818,-5.314079,4.521079,-1.027940,-3.227879,-7.263923,-2.443588,1.756448,-9.208714,9.587829,0.796431,1.788714,0.580877,9.399490,-6.050477,9.078941,-7.835758,7.523723,-3.938754,-2.721439,0.879937,2.390276,-0.483049,-1.163451,4.636423,-5.773407,1.526481,-3.906458,-1.125273,-6.338271,-4.148804,2.026584,4.064318,-5.503170,-2.345606,9.232918,-8.699854,-2.286995,9.350383,5.085504,-6.350926,1.138126,-5.937996,-5.110054,-1.857092,2.453464,2.906625,1.704775,1.029162,-2.079081,1.760526,9.245922,-4.365424,-6.528907,-2.704531,2.878058,4.411764,2.819408,-7.178966,-0.028394,-8.374335,2.026256,-1.053460,-4.325250,5.950099,-3.308411,-3.914644,-1.595426,0.391873,-3.347605,-5.075152,-5.677125,0.936551,4.972445,-0.494306,-9.108841,4.918137,-0.386297,-8.230268,6.341736,0.784086,-9.719746,9.203407,8.117858,4.213629,5.664169,2.639893,-0.946724,1.381748,-4.348203,3.940861,-0.219439,-6.438775,0.779458,0.626133,-1.901008,-5.055318,3.872729,1.609649,-5.895413,-4.391698,2.758160,7.878044,-6.246873,9.926063,-1.842480,2.099093,-5.455386,2.165056,4.998527,-1.291250,-3.470770,-2.084995,9.158585,-7.487631,7.276712,1.417227,-0.444018,-0.935012,2.251559,9.043123,-5.952161,-3.612448,-5.676779,-0.504026,-1.365521,-7.296311,9.889337,-3.170890,-4.890707,-1.349768,-3.237682,-7.453286,6.075082,0.618436,3.574796,-4.469911,-6.937546,-7.372191,3.507881,-0.116867,9.716720,-1.796842,0.347826,7.196023,7.056771,0.372597,3.544768,-0.272266,-5.994534,6.999987,-8.945272,-3.089576,-8.811168,2.142600,8.117302,-2.060206,-1.017431,-9.488017,2.164068,-7.119823,6.218809,-8.956789,4.403005,8.408323,1.395923,9.932383,6.024797,-6.802351,-0.950183,6.051032,0.032832,0.755523,-9.352134,1.806660,1.887348,-4.852735,-0.102237,-3.264582,8.568308,7.718971,-7.773577,-7.591916,-0.461874,-7.663384,-4.740549,1.366627,4.955198,-9.999485,-7.724377,4.510959,4.643944,-1.678050,1.657391,0.964158,8.089219,6.421934,-1.847157,0.412525,-1.693603,1.505640,4.423908,-9.176425,3.205706,-6.720959,-2.911927,-2.212783,3.658637,6.017980,7.117886,5.849550,-2.131787,-1.725640,-1.909244,1.545726,9.267371,9.102007,3.717126,9.862484,-1.004805,-6.468819,-6.043402,-6.513433,-0.413893,-9.729558,0.965802,-3.719027,-5.369897,-4.071605,-6.706761,0.075223,-9.392850,-2.101701,-1.932760,3.616638,2.612841,1.297245,-2.017059,0.407128,-8.421333,-6.654162,5.586202,1.597264,0.761797,-7.638732,5.752047,-8.697956,-2.809005,-6.916713,-2.646753,-9.629918,2.942789,5.063987,2.247404,-2.757359,-8.024969,2.916889,3.581029,6.414085,-4.100308,-5.937006,1.605747,-7.160235,3.980548,-8.380549,-8.754061,1.493244,6.388643,7.288509,7.463674,-3.992390,-7.953528,7.598985,-2.165983,-0.242051,-6.571182,-1.531594,1.253517,-8.278563,1.685045,7.726142,5.048916,-9.268758,8.963702,6.027357,6.104059,3.275414,-9.007729,-3.860571,9.477364,7.945366,2.599461,-2.791987,-2.616202,-6.363971,8.031871,7.230503,-2.704826,8.147974,0.427881,1.619086,-4.082384,-5.441660,7.344320,8.564449,-7.657130,0.700191,2.165034,-7.280862,-7.272233,1.752373,-1.483039,-3.195123,-6.310983,8.612955,-4.668215,6.115717,3.348266,3.312634,-2.392843,4.032012,-0.399788,-1.670624,-4.249538,8.501580,5.932608,9.471552,-8.582997,6.328588,3.018681],[-2.859686,8.817315,3.540634,-3.504771,4.709985,9.264327,0.596882,7.932640,7.122352,-9.436135,-5.613785,-9.583170,-6.542333,1.402917,5.279901,-7.520601,7.019758,1.558740,-7.759070,6.638411,-6.294965,-2.762329,-4.936042,-9.960185,-6.058951,3.686485,-3.795416,-7.490324,-0.303970,-4.914731,-7.367984,9.291400,-7.817251,-6.483900,-7.573293,8.577585,8.226457,-1.923439,1.336563,6.577672,-2.187741,3.403576,-2.307547,6.207454,1.371225,3.127701,-7.669059,8.433215,7.092845,0.216792,-2.611642,7.887863,-8.858037,9.737962,-8.626215,0.606932,1.884175,4.292054,-6.095931,-7.291519,8.125097,-8.342634,1.869329,-9.239819,1.492298,-6.597928,-8.979087,3.617076,-4.528364,2.604258,-3.355769,9.485139,4.939376,3.831621,8.414181,8.608627,7.974540,-7.253084,-9.402163,-6.788531,-2.414106,6.186870,-8.142317,8.729384,5.595719,2.749106,-1.123572,-9.838537,4.178356,4.621712,1.256276,4.528530,-7.625243,5.079658,2.023338,7.407444,8.401207,-1.756214,4.279982,-0.043318,-9.943381,-7.830870,-2.894385,-6.830412,6.799617,-7.217684,5.766366,5.135528,9.714521,-0.859330,-8.989003,-2.434526,-9.646852,9.222357,-2.342307,-0.777679,4.479823,9.001410,2.092666,-5.971039,-9.340002,-7.433732,-4.341690,9.512496,-1.830714,-7.382325,4.118975,-9.797929,-6.902787,-6.269157,9.682261,6.987813,5.836527,-2.358877,4.699510,3.666913,4.279410,0.357141,-0.355067,0.767949,-8.199875,8.978472,-4.255149,2.698278,-4.885610,-4.778115,-2.482660,-0.007659,-5.543436,6.299420,8.823250,1.858822,-0.340958,8.588514,-8.556358,3.203071,-7.281779,-6.121195,4.978029,8.624301,5.122010,0.970306,-7.347902,-6.223978,9.406533,-4.679829,-8.658318,7.983992,-3.977205,0.641829,-5.251819,7.150919,-0.933501,5.186614,0.200848,7.549369,-4.193039,-5.974171,-6.125303,-7.181948,-7.327330,7.635074,-9.016352,5.820272,2.772891,0.303590,-9.713433,-3.309509,0.351782,-3.359365,2.600606,6.339964,-4.825069,-5.167843,-2.394377,-5.314415,6.772339,-8.650062,8.174663,-2.634852,-5.670986,-7.416919,-2.219772,7.700683,-9.293561,-1.459245,2.553675,-6.134534,8.169161,5.677894,4.782496,8.039407,7.978509,-5.714502,0.712509,7.080170,9.156844,-6.222100,-8.711087,9.299324,8.682148,-1.029811,3.300273,8.266062,5.374051,7.925094,-5.087196,1.430441,-5.450678,-3.738143,-7.044100,3.697527,9.843187,9.067172,-5.957040,1.793932,-7.740717,-8.767055,-2.159143,9.655931,-9.220576,-1.179388,7.305278,-6.406273,3.640459,3.753094,-6.578909,9.650151,6.618248,-9.390102,9.810074,3.247610,9.778130,-3.546249,5.676357,-7.371098,-7.163105,6.135070,-3.957374,3.499187,-3.520883,-9.409634,1.473209,2.011072,-8.315152,-0.281483,1.140003,-4.782652,-5.005864,-9.343956,-1.696139,5.694944,7.768891,-2.773245,3.639946,3.876019,-7.261012,-0.049921,-3.207642,-3.641455,3.876879,-5.888575,8.772303,-7.881452,8.650413,6.283598,9.668162,-2.869840,1.412018,-3.113423,-4.965835,1.378562,3.897798,8.814196,3.265705,5.647577,-4.159370,1.560743,-4.572844,3.688553,-6.279824,2.289174,-3.137131,-7.931653,-0.467364,-2.051429,-5.155499,4.335891,7.940509,0.722550,5.957073,-9.544024,5.137074,2.586851,0.808633,9.006709,9.521403,7.884039,9.973808,-2.698475,-3.099959,-4.046327,-1.080725,7.731029,-5.591054,-0.412074,3.965255,-0.521548,-9.267421,-8.390077,-6.743552,1.608915,-3.783772,2.230232,-1.078081,4.321203,-3.845869,3.467069,1.561948,4.619307,-4.257723,3.193052,-3.414124,-7.753639,7.892351,-5.330245,-0.728164,-6.791065,-5.001290,-3.402783,1.414709,7.608270,-5.901097,-9.428937,6.538976,8.708358,2.699557,1.231568,-1.103715,-6.308661,-4.936414,-7.795780,-8.904427,0.725170,-1.256113,7.860677,2.687400,-1.913734,9.163942,-4.887160,-9.940776,-6.872401,-8.172413,7.828479,1.941763,3.711199,-7.888742,4.775145,-5.875127,6.126334,-0.817594,-7.833541,8.297775,2.107055,3.556182,-0.982853,-6.155197,5.755848,-2.400188,0.818400,-6.448003,-6.160367,-1.351113,0.640085,-9.829163,-6.113947,9.424396,3.626732,0.318111,6.472422,-6.793319,-0.642475,6.248718,6.323801,-5.685938,4.093914,0.690391,2.249404,8.694704,-6.066154,0.532126,9.630803,2.553206,9.286121,2.080071,7.155481,-2.281866,-8.695115,7.421034,-0.010870,5.508670,-0.151030,6.976682,-4.246342,-5.851277,-2.292660,3.979442,-5.177417,-4.910858,4.747248,9.171520,2.858492,-6.455475,9.230061,-2.470268,3.810844,3.211912,-1.506586,9.778203,-5.649507,-8.288732,1.858560,-2.412633,-0.631993,-8.411375,-8.852946,2.053136,7.542452,-0.334132,6.240987,-7.694109,-2.076768,5.819918,-5.468936,7.702291,-3.725706,-9.608529,-6.260872,-9.346916,3.524922,-3.503535,-3.792042,-0.954061,-1.055042,-1.212837,9.740101,-1.180610,-0.440947,-9.047325,7.846092,5.469450,8.708922,9.397263,-4.144782,5.546522,-8.567236,-0.202970,7.299112,0.827629,3.945178,7.725361,-2.350465,-6.141958,7.204626,-5.859806,-0.843983,1.552300,6.226244,7.882078,-8.229449,5.126212,8.941005,3.091627,-7.107469,-5.690950,-5.859061,-8.426239,9.744442,6.612765,-0.897973,4.195448,-4.373830,-7.691666,-1.618433,2.370957,-1.683770,4.481298,-6.798699,-8.914222,8.680024,-0.375531,0.234562,5.252640,5.015818,1.684376,-1.934465,5.003872,1.486607,-2.018154,7.073634,-4.222809,-0.307605,9.639202,-9.864138,-8.741182,-2.321640,5.667748,4.958368,9.669907,-6.873474,-4.044571,8.682522,6.737463,-5.591419,-6.301657,1.726476,9.816832,9.357313,3.014767,7.621836,6.614644,-8.725270,9.864537,2.317518,4.818977,4.881747,-2.307306,2.063148,-3.311224,4.051330,5.998945,5.605568,7.792100,-4.830219,9.426970,-8.741020,5.115447,9.482199,-9.370871,8.347952,-5.993289,-1.376772,-2.208083,-0.245600,1.201961,8.792020,9.122444,9.149969,9.695145,1.473347,4.361869,-9.471554,-9.653775,8.105931,-2.342862,-3.915523,-4.937138,-0.066366,-6.388870,8.162239,-5.951443,4.406810,1.566328,-0.512807,-9.279607,8.962538,7.342994,-6.249473,-2.466594,3.509505,5.428817,9.989528,-3.262710,-5.555586,7.912486,-8.043025,-6.457401,2.685824,-2.864027,8.256517,8.427559,0.129273,-8.174779,-0.479244,0.298321,4.439836,-3.735276,-0.442472,-2.842788,6.485351,-0.339370,-4.470164,9.867584,5.062176,3.830568,-0.798836,4.984521,-6.468789,-6.349142,-9.965383,-9.239573,-3.205246,4.003871,0.186288,9.552672,1.943287,-7.411327,-4.440013,8.446208,4.779677,-4.738934,1.634506,2.034705,8.215525,-6.586666,-8.615614,-5.687567,9.218035,0.769304,6.600425,-3.761248,1.776880,-4.957036,-9.189589,4.948891,3.904429,-8.404392,1.400725,-1.840042,3.963032,9.147215,7.922775,-7.420719,0.335303,4.127116,-0.411234,5.536477,-0.034112,2.153635,2.524598,-0.196806,1.727997,9.506501,3.228936,8.254156,-8.107011,-4.530241,-2.012359,4.390416,-5.640668,3.265488,-3.912385,-5.213329,-8.632690,2.484747,-7.187610,-0.190220,-2.472647,1.728031,5.552417,-4.716832,6.545587,8.856417,0.758238,1.046997,9.874043,-4.418315,8.176205,-9.370853,7.605829,9.126123,-1.209581,3.337135,4.954209,-6.789924,1.412267,-5.698487,6.646881,2.673028,-0.855816,-2.643161,7.023718,0.284541,-0.451910,-3.736759,-1.851848,1.412703,-2.776671,6.585286,9.966393,-6.769113,8.177602,6.550773,6.972456,2.005874,5.280377,4.263738,6.769199,7.485405,6.700371,5.500152,2.580068,-0.990426,5.331501,9.477834,9.956691,4.158694,7.815579,6.188354,1.616406,-7.551781,-3.380518,9.272789,8.932176,7.485554,2.054551,-6.604540,-3.030333,-6.412173,-2.197033,-2.035293,0.938972,-5.772096,3.802648,3.231319,4.957643,8.224155,-9.091455,6.465284,-8.544816,-6.177894,4.880139,-3.875374,0.783901,2.573339,5.654663,6.349155,7.429904,5.258965,3.681914,-8.031357,-0.700149,-2.780636,-1.640602,-9.348712,7.721403,-6.942926,8.969078,-0.910495,7.891843,0.271893,1.579290,-4.725393,-0.514361,0.311403,-3.912709,-9.467627,-1.368136,3.255655,-8.887280,1.660037,-0.243641,-2.093586,-4.472305,-1.654729,-6.501244,-7.122037,-1.493753,2.043803,-4.328849,-4.636038,-3.107416,-8.896697,-7.192020,8.988785,8.046093,-2.578973,2.154161,-8.393662,6.701272,8.100254,-4.986934,8.452316,-2.521141,3.524857,-5.673467,-0.693447,4.456130,3.349304,-9.780616,-6.040353,5.726256,-8.100564,-3.804841,-4.990146,4.957267,2.287588,-5.970314,6.416689,1.998252,7.963336,-0.122105,-1.614077,-6.506675,9.906407,9.261948,2.308484,-3.681432,9.212276,-1.878389,-5.880274,3.312705,7.519365,0.847698,3.932018,2.864038,-3.011398,-0.666765,5.239832,-2.899003,6.387735,2.893222,-4.235119,-9.627883,-4.122889,8.164638,6.563111,-9.544000,-5.296135,3.354230,7.707612,0.740714,-5.719374,-9.240714,-9.137762,0.864684,-9.236261,-7.420759,-1.469082,-6.534503,4.765412,-9.138252,8.721953,6.937414,-6.157419,3.759519,-2.341068,1.036580,-8.718895,-4.071651,-9.994445,-8.882994,-9.244784,4.154682,-9.700201,0.929370,0.662235,-4.523010,6.525572,4.607947,-0.396094,3.262049,3.232192,7.219187,-6.826036,-4.791592,6.666976,-9.155926,-4.526176,9.524744,0.944433,-9.029520,-7.630253,0.417895,8.219883,7.178666,9.165492,-7.318655,7.132927,-0.856523,3.142483,-5.704151,-3.082530,5.372135,-2.706991,6.533094,7.983471,-3.673769,-9.565376,8.496815,-2.060372,6.298581,6.462959,-8.684830,2.110896,2.533462,-4.806899,-0.344049,-9.684029,2.689338,-5.127823,-2.817750,-0.608543,1.950261,6.749365,-2.801091,5.728828,8.160871,4.047333,2.012660,7.092935,-1.613727,-8.309030,-8.676208,-7.198220,1.739826,-0.846263,-7.584731,-4.613609,6.260852,3.512064,-9.464635,4.236288,3.916536,7.238702,2.539695,7.311398,-2.645391,-7.533788,-5.843025,-2.418285,3.865426,-8.345066,-9.804008,5.775525,-0.508941,2.535499,7.054339,-9.961213,-3.161041,3.207057,-3.188033,3.194097,-1.256128,8.620567,-7.888187,-6.230318,-5.369869,1.610116,-6.895758,-0.579571,8.003410,0.455247,-4.602251,-1.927651,8.998326,1.196451,-1.842950,7.791707,-6.227497]], dtype = "float32")#candidate|751|(3, 980)|const|float32
bop_752 = relay.power(call_747.astype('float32'), relay.reshape(const_751.astype('float32'), relay.shape_of(call_747))) # shape=(3, 980)
bop_755 = relay.power(call_748.astype('float32'), relay.reshape(const_751.astype('float32'), relay.shape_of(call_748))) # shape=(3, 980)
func_727_call = mod.get_global_var('func_727')
func_728_call = mutated_mod.get_global_var('func_728')
call_758 = relay.TupleGetItem(func_727_call(), 0)
call_759 = relay.TupleGetItem(func_728_call(), 0)
func_477_call = mod.get_global_var('func_477')
func_479_call = mutated_mod.get_global_var('func_479')
var_769 = relay.var("var_769", dtype = "float64", shape = (1092,))#candidate|769|(1092,)|var|float64
call_768 = relay.TupleGetItem(func_477_call(relay.reshape(var_769.astype('float64'), [14, 13, 6])), 0)
call_770 = relay.TupleGetItem(func_479_call(relay.reshape(var_769.astype('float64'), [14, 13, 6])), 0)
func_721_call = mod.get_global_var('func_721')
func_722_call = mutated_mod.get_global_var('func_722')
call_784 = relay.TupleGetItem(func_721_call(), 0)
call_785 = relay.TupleGetItem(func_722_call(), 0)
bop_799 = relay.equal(call_768.astype('bool'), relay.reshape(var_769.astype('bool'), relay.shape_of(call_768))) # shape=(14, 13, 6)
bop_802 = relay.equal(call_770.astype('bool'), relay.reshape(var_769.astype('bool'), relay.shape_of(call_770))) # shape=(14, 13, 6)
uop_803 = relay.sinh(bop_799.astype('float32')) # shape=(14, 13, 6)
uop_805 = relay.sinh(bop_802.astype('float32')) # shape=(14, 13, 6)
func_745_call = mod.get_global_var('func_745')
func_746_call = mutated_mod.get_global_var('func_746')
call_808 = relay.TupleGetItem(func_745_call(), 1)
call_809 = relay.TupleGetItem(func_746_call(), 1)
var_813 = relay.var("var_813", dtype = "float32", shape = (14, 13, 6))#candidate|813|(14, 13, 6)|var|float32
bop_814 = relay.logical_or(uop_803.astype('bool'), relay.reshape(var_813.astype('bool'), relay.shape_of(uop_803))) # shape=(14, 13, 6)
bop_817 = relay.logical_or(uop_805.astype('bool'), relay.reshape(var_813.astype('bool'), relay.shape_of(uop_805))) # shape=(14, 13, 6)
func_668_call = mod.get_global_var('func_668')
func_669_call = mutated_mod.get_global_var('func_669')
call_826 = relay.TupleGetItem(func_668_call(), 3)
call_827 = relay.TupleGetItem(func_669_call(), 3)
output = relay.Tuple([bop_752,call_758,call_784,call_808,bop_814,call_826,])
output2 = relay.Tuple([bop_755,call_759,call_785,call_809,bop_817,call_827,])
func_828 = relay.Function([var_769,var_813,], output)
mod['func_828'] = func_828
mod = relay.transform.InferType()(mod)
mutated_mod['func_828'] = func_828
mutated_mod = relay.transform.InferType()(mutated_mod)
func_828_call = mutated_mod.get_global_var('func_828')
var_830 = relay.var("var_830", dtype = "float64", shape = (1092,))#candidate|830|(1092,)|var|float64
var_831 = relay.var("var_831", dtype = "float32", shape = (14, 13, 6))#candidate|831|(14, 13, 6)|var|float32
call_829 = func_828_call(var_830,var_831,)
output = call_829
func_832 = relay.Function([var_830,var_831,], output)
mutated_mod['func_832'] = func_832
mutated_mod = relay.transform.InferType()(mutated_mod)
func_745_call = mod.get_global_var('func_745')
func_746_call = mutated_mod.get_global_var('func_746')
call_840 = relay.TupleGetItem(func_745_call(), 1)
call_841 = relay.TupleGetItem(func_746_call(), 1)
func_477_call = mod.get_global_var('func_477')
func_479_call = mutated_mod.get_global_var('func_479')
var_843 = relay.var("var_843", dtype = "float64", shape = (1092,))#candidate|843|(1092,)|var|float64
call_842 = relay.TupleGetItem(func_477_call(relay.reshape(var_843.astype('float64'), [14, 13, 6])), 0)
call_844 = relay.TupleGetItem(func_479_call(relay.reshape(var_843.astype('float64'), [14, 13, 6])), 0)
uop_851 = relay.log2(var_843.astype('float32')) # shape=(1092,)
func_477_call = mod.get_global_var('func_477')
func_479_call = mutated_mod.get_global_var('func_479')
call_856 = relay.TupleGetItem(func_477_call(relay.reshape(var_843.astype('float64'), [14, 13, 6])), 0)
call_857 = relay.TupleGetItem(func_479_call(relay.reshape(var_843.astype('float64'), [14, 13, 6])), 0)
output = relay.Tuple([call_840,call_842,uop_851,call_856,])
output2 = relay.Tuple([call_841,call_844,uop_851,call_857,])
func_859 = relay.Function([var_843,], output)
mod['func_859'] = func_859
mod = relay.transform.InferType()(mod)
var_860 = relay.var("var_860", dtype = "float64", shape = (1092,))#candidate|860|(1092,)|var|float64
output = func_859(var_860)
func_861 = relay.Function([var_860], output)
mutated_mod['func_861'] = func_861
mutated_mod = relay.transform.InferType()(mutated_mod)
func_727_call = mod.get_global_var('func_727')
func_728_call = mutated_mod.get_global_var('func_728')
call_919 = relay.TupleGetItem(func_727_call(), 0)
call_920 = relay.TupleGetItem(func_728_call(), 0)
output = call_919
output2 = call_920
func_940 = relay.Function([], output)
mod['func_940'] = func_940
mod = relay.transform.InferType()(mod)
output = func_940()
func_941 = relay.Function([], output)
mutated_mod['func_941'] = func_941
mutated_mod = relay.transform.InferType()(mutated_mod)
func_668_call = mod.get_global_var('func_668')
func_669_call = mutated_mod.get_global_var('func_669')
call_959 = relay.TupleGetItem(func_668_call(), 4)
call_960 = relay.TupleGetItem(func_669_call(), 4)
func_828_call = mod.get_global_var('func_828')
func_832_call = mutated_mod.get_global_var('func_832')
var_964 = relay.var("var_964", dtype = "float64", shape = (1092,))#candidate|964|(1092,)|var|float64
call_963 = relay.TupleGetItem(func_828_call(relay.reshape(var_964.astype('float64'), [1092,]), relay.reshape(var_964.astype('float32'), [14, 13, 6]), ), 5)
call_965 = relay.TupleGetItem(func_832_call(relay.reshape(var_964.astype('float64'), [1092,]), relay.reshape(var_964.astype('float32'), [14, 13, 6]), ), 5)
func_828_call = mod.get_global_var('func_828')
func_832_call = mutated_mod.get_global_var('func_832')
call_969 = relay.TupleGetItem(func_828_call(relay.reshape(var_964.astype('float64'), [1092,]), relay.reshape(var_964.astype('float32'), [14, 13, 6]), ), 0)
call_970 = relay.TupleGetItem(func_832_call(relay.reshape(var_964.astype('float64'), [1092,]), relay.reshape(var_964.astype('float32'), [14, 13, 6]), ), 0)
uop_973 = relay.acos(var_964.astype('float64')) # shape=(1092,)
bop_984 = relay.less(var_964.astype('bool'), relay.reshape(uop_973.astype('bool'), relay.shape_of(var_964))) # shape=(1092,)
output = relay.Tuple([call_959,call_963,call_969,bop_984,])
output2 = relay.Tuple([call_960,call_965,call_970,bop_984,])
func_988 = relay.Function([var_964,], output)
mod['func_988'] = func_988
mod = relay.transform.InferType()(mod)
mutated_mod['func_988'] = func_988
mutated_mod = relay.transform.InferType()(mutated_mod)
var_989 = relay.var("var_989", dtype = "float64", shape = (1092,))#candidate|989|(1092,)|var|float64
func_988_call = mutated_mod.get_global_var('func_988')
call_990 = func_988_call(var_989)
output = call_990
func_991 = relay.Function([var_989], output)
mutated_mod['func_991'] = func_991
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1007 = relay.var("var_1007", dtype = "float32", shape = (7, 14))#candidate|1007|(7, 14)|var|float32
uop_1008 = relay.atanh(var_1007.astype('float32')) # shape=(7, 14)
output = uop_1008
output2 = uop_1008
func_1013 = relay.Function([var_1007,], output)
mod['func_1013'] = func_1013
mod = relay.transform.InferType()(mod)
mutated_mod['func_1013'] = func_1013
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1014 = relay.var("var_1014", dtype = "float32", shape = (7, 14))#candidate|1014|(7, 14)|var|float32
func_1013_call = mutated_mod.get_global_var('func_1013')
call_1015 = func_1013_call(var_1014)
output = call_1015
func_1016 = relay.Function([var_1014], output)
mutated_mod['func_1016'] = func_1016
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1049 = relay.const(-3, dtype = "uint32")#candidate|1049|()|const|uint32
const_1050 = relay.const([[[-7],[10],[2],[5]],[[9],[2],[-9],[-4]],[[-2],[-10],[-1],[5]],[[-6],[1],[1],[-9]]], dtype = "uint32")#candidate|1050|(4, 4, 1)|const|uint32
bop_1051 = relay.bitwise_and(const_1049.astype('uint32'), const_1050.astype('uint32')) # shape=(4, 4, 1)
output = relay.Tuple([bop_1051,])
output2 = relay.Tuple([bop_1051,])
func_1062 = relay.Function([], output)
mod['func_1062'] = func_1062
mod = relay.transform.InferType()(mod)
output = func_1062()
func_1063 = relay.Function([], output)
mutated_mod['func_1063'] = func_1063
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1093 = relay.var("var_1093", dtype = "int32", shape = (8, 9, 10))#candidate|1093|(8, 9, 10)|var|int32
var_1094 = relay.var("var_1094", dtype = "int32", shape = (8, 9, 10))#candidate|1094|(8, 9, 10)|var|int32
bop_1095 = relay.greater_equal(var_1093.astype('bool'), relay.reshape(var_1094.astype('bool'), relay.shape_of(var_1093))) # shape=(8, 9, 10)
bop_1108 = relay.mod(bop_1095.astype('float64'), relay.reshape(var_1093.astype('float64'), relay.shape_of(bop_1095))) # shape=(8, 9, 10)
uop_1115 = relay.cos(var_1093.astype('float32')) # shape=(8, 9, 10)
output = relay.Tuple([bop_1108,uop_1115,])
output2 = relay.Tuple([bop_1108,uop_1115,])
func_1117 = relay.Function([var_1093,var_1094,], output)
mod['func_1117'] = func_1117
mod = relay.transform.InferType()(mod)
var_1118 = relay.var("var_1118", dtype = "int32", shape = (8, 9, 10))#candidate|1118|(8, 9, 10)|var|int32
var_1119 = relay.var("var_1119", dtype = "int32", shape = (8, 9, 10))#candidate|1119|(8, 9, 10)|var|int32
output = func_1117(var_1118,var_1119,)
func_1120 = relay.Function([var_1118,var_1119,], output)
mutated_mod['func_1120'] = func_1120
mutated_mod = relay.transform.InferType()(mutated_mod)
func_668_call = mod.get_global_var('func_668')
func_669_call = mutated_mod.get_global_var('func_669')
call_1146 = relay.TupleGetItem(func_668_call(), 3)
call_1147 = relay.TupleGetItem(func_669_call(), 3)
var_1148 = relay.var("var_1148", dtype = "float32", shape = (7, 10, 14))#candidate|1148|(7, 10, 14)|var|float32
bop_1149 = relay.logical_xor(call_1146.astype('uint8'), relay.reshape(var_1148.astype('uint8'), relay.shape_of(call_1146))) # shape=(7, 10, 14)
bop_1152 = relay.logical_xor(call_1147.astype('uint8'), relay.reshape(var_1148.astype('uint8'), relay.shape_of(call_1147))) # shape=(7, 10, 14)
func_668_call = mod.get_global_var('func_668')
func_669_call = mutated_mod.get_global_var('func_669')
call_1153 = relay.TupleGetItem(func_668_call(), 3)
call_1154 = relay.TupleGetItem(func_669_call(), 3)
output = relay.Tuple([bop_1149,call_1153,])
output2 = relay.Tuple([bop_1152,call_1154,])
func_1155 = relay.Function([var_1148,], output)
mod['func_1155'] = func_1155
mod = relay.transform.InferType()(mod)
mutated_mod['func_1155'] = func_1155
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1156 = relay.var("var_1156", dtype = "float32", shape = (7, 10, 14))#candidate|1156|(7, 10, 14)|var|float32
func_1155_call = mutated_mod.get_global_var('func_1155')
call_1157 = func_1155_call(var_1156)
output = call_1157
func_1158 = relay.Function([var_1156], output)
mutated_mod['func_1158'] = func_1158
mutated_mod = relay.transform.InferType()(mutated_mod)
func_727_call = mod.get_global_var('func_727')
func_728_call = mutated_mod.get_global_var('func_728')
call_1239 = relay.TupleGetItem(func_727_call(), 0)
call_1240 = relay.TupleGetItem(func_728_call(), 0)
func_668_call = mod.get_global_var('func_668')
func_669_call = mutated_mod.get_global_var('func_669')
call_1251 = relay.TupleGetItem(func_668_call(), 3)
call_1252 = relay.TupleGetItem(func_669_call(), 3)
output = relay.Tuple([call_1239,call_1251,])
output2 = relay.Tuple([call_1240,call_1252,])
func_1257 = relay.Function([], output)
mod['func_1257'] = func_1257
mod = relay.transform.InferType()(mod)
mutated_mod['func_1257'] = func_1257
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1257_call = mutated_mod.get_global_var('func_1257')
call_1258 = func_1257_call()
output = call_1258
func_1259 = relay.Function([], output)
mutated_mod['func_1259'] = func_1259
mutated_mod = relay.transform.InferType()(mutated_mod)
func_940_call = mod.get_global_var('func_940')
func_941_call = mutated_mod.get_global_var('func_941')
call_1306 = func_940_call()
call_1307 = func_940_call()
output = call_1306
output2 = call_1307
func_1351 = relay.Function([], output)
mod['func_1351'] = func_1351
mod = relay.transform.InferType()(mod)
output = func_1351()
func_1352 = relay.Function([], output)
mutated_mod['func_1352'] = func_1352
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1062_call = mod.get_global_var('func_1062')
func_1063_call = mutated_mod.get_global_var('func_1063')
call_1374 = relay.TupleGetItem(func_1062_call(), 0)
call_1375 = relay.TupleGetItem(func_1063_call(), 0)
var_1393 = relay.var("var_1393", dtype = "uint32", shape = (4, 4, 7))#candidate|1393|(4, 4, 7)|var|uint32
bop_1394 = relay.logical_or(call_1374.astype('bool'), var_1393.astype('bool')) # shape=(4, 4, 7)
bop_1397 = relay.logical_or(call_1375.astype('bool'), var_1393.astype('bool')) # shape=(4, 4, 7)
func_1117_call = mod.get_global_var('func_1117')
func_1120_call = mutated_mod.get_global_var('func_1120')
var_1400 = relay.var("var_1400", dtype = "int32", shape = (4, 180))#candidate|1400|(4, 180)|var|int32
call_1399 = relay.TupleGetItem(func_1117_call(relay.reshape(var_1400.astype('int32'), [8, 9, 10]), relay.reshape(var_1400.astype('int32'), [8, 9, 10]), ), 0)
call_1401 = relay.TupleGetItem(func_1120_call(relay.reshape(var_1400.astype('int32'), [8, 9, 10]), relay.reshape(var_1400.astype('int32'), [8, 9, 10]), ), 0)
output = relay.Tuple([bop_1394,call_1399,var_1400,])
output2 = relay.Tuple([bop_1397,call_1401,var_1400,])
func_1415 = relay.Function([var_1393,var_1400,], output)
mod['func_1415'] = func_1415
mod = relay.transform.InferType()(mod)
var_1416 = relay.var("var_1416", dtype = "uint32", shape = (4, 4, 7))#candidate|1416|(4, 4, 7)|var|uint32
var_1417 = relay.var("var_1417", dtype = "int32", shape = (4, 180))#candidate|1417|(4, 180)|var|int32
output = func_1415(var_1416,var_1417,)
func_1418 = relay.Function([var_1416,var_1417,], output)
mutated_mod['func_1418'] = func_1418
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1423 = relay.var("var_1423", dtype = "float32", shape = ())#candidate|1423|()|var|float32
var_1424 = relay.var("var_1424", dtype = "float32", shape = (7, 4))#candidate|1424|(7, 4)|var|float32
bop_1425 = relay.floor_divide(var_1423.astype('float32'), var_1424.astype('float32')) # shape=(7, 4)
output = relay.Tuple([bop_1425,])
output2 = relay.Tuple([bop_1425,])
func_1431 = relay.Function([var_1423,var_1424,], output)
mod['func_1431'] = func_1431
mod = relay.transform.InferType()(mod)
var_1432 = relay.var("var_1432", dtype = "float32", shape = ())#candidate|1432|()|var|float32
var_1433 = relay.var("var_1433", dtype = "float32", shape = (7, 4))#candidate|1433|(7, 4)|var|float32
output = func_1431(var_1432,var_1433,)
func_1434 = relay.Function([var_1432,var_1433,], output)
mutated_mod['func_1434'] = func_1434
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1472 = relay.var("var_1472", dtype = "float32", shape = (3, 4))#candidate|1472|(3, 4)|var|float32
var_1473 = relay.var("var_1473", dtype = "float32", shape = (3, 4))#candidate|1473|(3, 4)|var|float32
bop_1474 = relay.power(var_1472.astype('float32'), relay.reshape(var_1473.astype('float32'), relay.shape_of(var_1472))) # shape=(3, 4)
func_628_call = mod.get_global_var('func_628')
func_629_call = mutated_mod.get_global_var('func_629')
call_1497 = relay.TupleGetItem(func_628_call(), 1)
call_1498 = relay.TupleGetItem(func_629_call(), 1)
output = relay.Tuple([bop_1474,call_1497,])
output2 = relay.Tuple([bop_1474,call_1498,])
func_1506 = relay.Function([var_1472,var_1473,], output)
mod['func_1506'] = func_1506
mod = relay.transform.InferType()(mod)
var_1507 = relay.var("var_1507", dtype = "float32", shape = (3, 4))#candidate|1507|(3, 4)|var|float32
var_1508 = relay.var("var_1508", dtype = "float32", shape = (3, 4))#candidate|1508|(3, 4)|var|float32
output = func_1506(var_1507,var_1508,)
func_1509 = relay.Function([var_1507,var_1508,], output)
mutated_mod['func_1509'] = func_1509
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1516 = relay.var("var_1516", dtype = "float32", shape = (13, 2, 1))#candidate|1516|(13, 2, 1)|var|float32
const_1517 = relay.const([[[8.929984,-5.620605,-3.522083,-0.254645,3.985153,-7.801282,9.554175,-4.684236,-7.640617],[-9.860048,2.169509,3.968944,7.970515,4.729128,-9.194025,-5.477626,-8.903227,-3.293705]],[[-6.965123,4.018790,2.361053,2.603151,1.571611,-3.526562,-0.819256,4.446701,2.999137],[-3.132249,5.279278,7.735580,-3.578226,6.183962,-8.218532,9.406477,-0.961364,-3.572198]],[[5.254338,9.812240,-9.201615,-5.221113,-0.116313,-4.661554,1.064952,-5.198002,-6.925352],[-0.850767,6.663437,3.177518,-6.099476,-4.979299,-9.288561,-6.510819,-8.803639,-4.783305]],[[3.673058,4.686952,1.417828,2.437732,2.322277,0.081097,9.836033,-0.169641,2.364451],[-2.473416,5.345763,6.148957,6.282246,7.085311,3.285459,-3.851329,-8.533379,-6.516597]],[[4.880840,-5.029538,-8.069391,-6.787417,-0.915285,-4.088304,4.234509,9.778313,-8.685151],[-0.215491,-2.870143,4.813706,3.546666,-5.197482,-0.992524,1.945927,-4.137370,-8.840738]],[[8.315491,-7.895269,6.574533,-6.294102,9.552703,2.620313,-6.397180,8.469626,9.133192],[-5.148456,5.638731,6.250665,3.710037,6.158257,-9.924530,-0.387638,7.950358,8.652515]],[[-9.479190,2.116864,4.249491,5.044935,-1.465494,-8.248552,9.964238,-4.592932,0.552847],[-9.129974,2.914225,-2.056647,9.444621,1.378831,1.307698,-2.550375,-7.803453,0.273967]],[[-2.443537,2.819911,-2.809091,3.874601,-2.817426,-7.065095,6.894252,2.057910,-7.385945],[-9.579067,-4.659784,-0.702295,8.006236,6.588355,-3.107426,1.127357,2.457138,3.611433]],[[7.562239,-2.083060,5.965957,4.812057,1.168628,8.658980,1.173201,-0.684828,5.661077],[6.468939,8.013240,7.664008,-3.036737,-2.441141,7.980029,0.808936,-0.563341,7.902156]],[[-2.985004,-5.172114,3.701994,7.663294,-7.253534,-5.214132,7.216138,-0.540437,9.846198],[-4.315984,-9.508608,8.135547,3.528587,-5.844633,-1.557975,1.267674,4.578932,7.200537]],[[2.534493,2.359670,-1.303801,1.266174,5.058063,-6.984962,6.472562,-1.403071,8.687445],[-7.471357,-3.776257,8.042358,-8.731801,5.333721,-6.476435,-0.300092,-5.542310,4.678918]],[[1.231317,-5.767400,-3.927843,6.039634,0.971230,-8.997019,-4.053952,9.643823,4.535065],[5.568163,0.664498,5.577027,2.001575,7.839572,5.493118,-8.053563,-7.627760,-2.271077]],[[0.644330,-9.862327,9.736982,-7.560358,2.483408,4.664801,-2.515032,-0.336901,4.343659],[5.204684,4.664413,-7.426574,-8.343105,-5.343232,5.292383,6.700292,-5.464585,-5.174472]]], dtype = "float32")#candidate|1517|(13, 2, 9)|const|float32
bop_1518 = relay.floor_divide(var_1516.astype('float32'), const_1517.astype('float32')) # shape=(13, 2, 9)
output = relay.Tuple([bop_1518,])
output2 = relay.Tuple([bop_1518,])
func_1521 = relay.Function([var_1516,], output)
mod['func_1521'] = func_1521
mod = relay.transform.InferType()(mod)
mutated_mod['func_1521'] = func_1521
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1522 = relay.var("var_1522", dtype = "float32", shape = (13, 2, 1))#candidate|1522|(13, 2, 1)|var|float32
func_1521_call = mutated_mod.get_global_var('func_1521')
call_1523 = func_1521_call(var_1522)
output = call_1523
func_1524 = relay.Function([var_1522], output)
mutated_mod['func_1524'] = func_1524
mutated_mod = relay.transform.InferType()(mutated_mod)
func_727_call = mod.get_global_var('func_727')
func_728_call = mutated_mod.get_global_var('func_728')
call_1571 = relay.TupleGetItem(func_727_call(), 0)
call_1572 = relay.TupleGetItem(func_728_call(), 0)
output = call_1571
output2 = call_1572
func_1583 = relay.Function([], output)
mod['func_1583'] = func_1583
mod = relay.transform.InferType()(mod)
mutated_mod['func_1583'] = func_1583
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1583_call = mutated_mod.get_global_var('func_1583')
call_1584 = func_1583_call()
output = call_1584
func_1585 = relay.Function([], output)
mutated_mod['func_1585'] = func_1585
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1641 = relay.const([[7,-3,-2,-6,5,1],[3,7,-2,-7,1,8],[-2,-4,1,7,6,6],[-9,8,-2,-3,1,-3],[3,5,7,9,-2,-8],[-7,-10,-5,10,9,-7],[7,9,1,2,4,-9],[5,-10,-1,9,-5,2],[5,3,1,6,3,-7],[9,-10,1,4,5,2],[-6,5,-7,-3,-8,6],[-8,7,-10,-8,6,-2],[5,-2,1,8,2,-9],[10,-3,8,-6,-4,10],[7,-2,7,-9,-9,-5],[-2,8,-6,-7,8,-5]], dtype = "uint64")#candidate|1641|(16, 6)|const|uint64
const_1642 = relay.const([[2,4,-6,-2,10,-2],[4,3,-9,7,1,-10],[9,-9,-3,-8,-2,9],[-9,-2,-6,2,-8,4],[-7,3,-4,8,-1,2],[4,9,2,4,10,2],[10,-8,8,-10,-4,4],[5,1,-1,-2,-3,-10],[10,10,-10,5,-6,-2],[4,9,4,8,-9,7],[-2,-4,-1,-3,10,10],[6,4,10,-6,8,4],[1,9,-9,-10,5,-7],[2,-9,3,-2,7,-1],[-10,3,2,-9,-9,5],[-7,10,-10,-10,9,3]], dtype = "uint64")#candidate|1642|(16, 6)|const|uint64
bop_1643 = relay.bitwise_or(const_1641.astype('uint64'), relay.reshape(const_1642.astype('uint64'), relay.shape_of(const_1641))) # shape=(16, 6)
output = bop_1643
output2 = bop_1643
func_1665 = relay.Function([], output)
mod['func_1665'] = func_1665
mod = relay.transform.InferType()(mod)
output = func_1665()
func_1666 = relay.Function([], output)
mutated_mod['func_1666'] = func_1666
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1679 = relay.var("var_1679", dtype = "float64", shape = (10, 15, 12))#candidate|1679|(10, 15, 12)|var|float64
uop_1680 = relay.log10(var_1679.astype('float64')) # shape=(10, 15, 12)
func_1351_call = mod.get_global_var('func_1351')
func_1352_call = mutated_mod.get_global_var('func_1352')
call_1688 = func_1351_call()
call_1689 = func_1351_call()
var_1694 = relay.var("var_1694", dtype = "float64", shape = (10, 15, 12))#candidate|1694|(10, 15, 12)|var|float64
bop_1695 = relay.not_equal(uop_1680.astype('bool'), relay.reshape(var_1694.astype('bool'), relay.shape_of(uop_1680))) # shape=(10, 15, 12)
bop_1702 = relay.right_shift(bop_1695.astype('int16'), relay.reshape(uop_1680.astype('int16'), relay.shape_of(bop_1695))) # shape=(10, 15, 12)
bop_1705 = relay.multiply(bop_1695.astype('float32'), relay.reshape(var_1679.astype('float32'), relay.shape_of(bop_1695))) # shape=(10, 15, 12)
output = relay.Tuple([call_1688,bop_1702,bop_1705,])
output2 = relay.Tuple([call_1689,bop_1702,bop_1705,])
func_1714 = relay.Function([var_1679,var_1694,], output)
mod['func_1714'] = func_1714
mod = relay.transform.InferType()(mod)
mutated_mod['func_1714'] = func_1714
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1714_call = mutated_mod.get_global_var('func_1714')
var_1716 = relay.var("var_1716", dtype = "float64", shape = (10, 15, 12))#candidate|1716|(10, 15, 12)|var|float64
var_1717 = relay.var("var_1717", dtype = "float64", shape = (10, 15, 12))#candidate|1717|(10, 15, 12)|var|float64
call_1715 = func_1714_call(var_1716,var_1717,)
output = call_1715
func_1718 = relay.Function([var_1716,var_1717,], output)
mutated_mod['func_1718'] = func_1718
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1665_call = mod.get_global_var('func_1665')
func_1666_call = mutated_mod.get_global_var('func_1666')
call_1743 = func_1665_call()
call_1744 = func_1665_call()
var_1745 = relay.var("var_1745", dtype = "uint64", shape = (16, 6))#candidate|1745|(16, 6)|var|uint64
bop_1746 = relay.minimum(call_1743.astype('float32'), relay.reshape(var_1745.astype('float32'), relay.shape_of(call_1743))) # shape=(16, 6)
bop_1749 = relay.minimum(call_1744.astype('float32'), relay.reshape(var_1745.astype('float32'), relay.shape_of(call_1744))) # shape=(16, 6)
uop_1765 = relay.cosh(bop_1746.astype('float32')) # shape=(16, 6)
uop_1767 = relay.cosh(bop_1749.astype('float32')) # shape=(16, 6)
output = relay.Tuple([uop_1765,])
output2 = relay.Tuple([uop_1767,])
func_1769 = relay.Function([var_1745,], output)
mod['func_1769'] = func_1769
mod = relay.transform.InferType()(mod)
mutated_mod['func_1769'] = func_1769
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1770 = relay.var("var_1770", dtype = "uint64", shape = (16, 6))#candidate|1770|(16, 6)|var|uint64
func_1769_call = mutated_mod.get_global_var('func_1769')
call_1771 = func_1769_call(var_1770)
output = call_1771
func_1772 = relay.Function([var_1770], output)
mutated_mod['func_1772'] = func_1772
mutated_mod = relay.transform.InferType()(mutated_mod)
func_727_call = mod.get_global_var('func_727')
func_728_call = mutated_mod.get_global_var('func_728')
call_1807 = relay.TupleGetItem(func_727_call(), 0)
call_1808 = relay.TupleGetItem(func_728_call(), 0)
func_63_call = mod.get_global_var('func_63')
func_67_call = mutated_mod.get_global_var('func_67')
const_1818 = relay.const([-2.858139,-1.181279,-4.216564,-1.034338,0.828364,-1.120788,3.892962,9.226924,-9.521864,-5.824451,0.039156,-9.425291,7.024712,8.896015,7.004588,-3.398844,4.785503,0.381093,-4.506494,-9.043999,4.415413,9.120769,4.733006,-5.868055,-2.950328,1.938365,1.974092,-2.803430,2.640966,3.616674,5.910793,-5.262961,-5.838889,-4.240564,8.894899,8.661332,7.309393,6.621166,7.173213,-2.478187,9.352195,5.378526,-8.904246,3.245146,-8.152443,-1.801160,-8.828392,-1.162573,4.074168,2.040646,7.153676,2.815651,8.374975,4.180602,3.611065,2.707776,9.635697,4.571062,-5.952940,4.899661,-3.909442,4.584760,-1.745864,5.389448,-2.140937,-9.555980,3.244112,2.502169,5.086383,1.455941,-1.244671,3.235064,-9.542980,7.648672,7.199416,9.937832,0.089395,-2.042596,-3.019395,1.407739,2.776252,-4.675510,4.637308,1.113731,-0.163789,8.877871,3.121421,6.780796,-7.045954,8.568188,2.726424,0.268946,4.581698,1.118862,1.037679,-2.314584,-8.079140,-8.322283,-2.057044,-2.554477,-7.744129,-7.667818,-6.501535,6.942242,-1.957956,-3.667152,7.640929,-3.202922,-7.230818,-6.215754,-9.083811,-0.348182,2.672259,2.007178,-7.235343,7.362214,6.901782,1.031825,2.120626,-0.800208,9.339949,5.621760,-4.282134,4.506723,4.981652,1.117409,-5.281430,6.589453,-2.655356,-1.022151,-1.967412,2.677018,4.271356,-4.228618,-7.393959,-2.409829,9.674016,-9.463983,-7.560398,-2.355134,-0.753355,2.672925,0.489889,-1.400239,7.890006,9.824306,-0.089811,-7.315532,1.784883,-1.779814,0.054144,2.756829,6.133583,6.061163,3.743029,3.912845,2.297135,-6.999953,3.977893,-8.843597,8.259143,3.782537,-3.397584,1.743603,-5.941399,4.859602,5.572506,-7.976015,6.232879,-4.920761,-6.767487,-2.890940,-2.866753,-1.179984,0.178556,9.610486,-8.765813,6.177983,-5.401408,-1.579199,-5.604318,-2.553795,-9.816819,-8.515283,-5.222367,-4.240099,9.907982,-3.034407,-0.802321,8.954177,6.638609,-9.595649,4.849793,1.399629,5.143362,-1.868438,5.721055,1.287533,-3.817164,4.056482,-3.108311,8.515326,-0.946065,5.257256,-6.698383,9.264031,7.410812,-1.654642,2.205116,-7.489073,6.317271,-7.605989,-7.802538,8.437627,-4.153887,9.553326,-3.815803,-0.451665,9.450968,5.701781,-8.883478,8.408778,5.640022,8.027916,5.570270,4.248191,-3.575142,-6.568274,5.514111,6.541481,-1.653877,-4.273667,0.018936,-4.733832,-5.951747,4.985815,-2.354406,2.553719,-4.503960,-4.723405,-4.764701,-2.155464,9.931522,7.886426,-4.015977,-1.173955,-4.764850,-4.219521,1.002737,-7.216173,-8.450639,8.549881,-4.999198,-5.615074,4.127144,9.796260,-7.976023,-4.515680,-8.434509,-1.914959,3.934213,8.732446,1.172468,8.125938,-3.436894,4.190805,6.531060,7.175229,2.881151,-1.620788,-0.877863,-2.063036,-4.424892,6.330303,9.519355,1.618685,-8.807900,-7.420475,-4.353468,3.694624,5.941762,-9.561874,8.677408,-3.371094,7.715483,0.559130,-0.056282,0.962248,-4.366222,2.346194,-7.622583,-3.323762,-7.881928,4.079012,0.628043,4.342973,0.598940,9.882551,-8.760712,0.603260,0.290611,5.604105,-0.776995,-3.838207,2.272627,-3.581469,-7.446258,8.165173,8.915588,-9.307625,9.643930,3.704025,6.864389,6.536297,3.287898,9.587855,7.747432,-7.469634,6.427898,-3.072184,2.165748,7.111677,-7.990144,-0.860427,9.039250,-6.456567,-0.994453,6.913163,-4.120276,9.929120,9.102004,-7.093737,-4.714649,-6.988701,1.043913,-9.062412,-2.415767,0.462581,-0.298834,-4.947599,-8.973331,-4.868738,8.928247,-0.712772,-4.028175,3.747069,-3.695798,-3.746984,-4.538034,5.173967,-2.058326,-2.700567,5.350939,9.968323,3.581628,1.376263,-5.823764,9.190750,2.763173,1.082116,9.028550,5.415385,6.438984,-1.327928,-1.683798,8.965517,-9.790474,8.933981,3.358895,5.999048,0.614939,-5.406543,4.194657,9.247621,4.641045,-3.360858,3.172401,1.590593,-8.401265,-4.745001,1.379593,6.489760,-4.904375,9.811022,6.133809,-1.129458,1.701789,-7.836710,-0.190839,7.206018,-2.268669,3.367978,5.171543,-5.471166,-6.442252,-7.895034,6.316551,4.101335,7.958363,4.839957,-0.649550,0.337984,0.569309,-8.795051,3.211757,5.671041,4.491520,3.728728,2.039305,-4.360841,-0.770939,5.519220,-2.811875,1.880044,4.166551,-3.289969,2.601340,7.187464,9.832255,-7.079257,7.526940,9.284480,-1.159066,6.596355,-9.584259,-3.775123,4.458251,-4.924110,-8.664926,4.688490,2.010017,4.357727,1.745355,9.042105,-0.726841,6.428499,6.064671,6.305579,5.485104,-6.797322,-4.828648,-3.085303,-6.225324,-3.190359,5.560790,5.107613,8.173669,0.903174,3.004905,-8.572392,-5.367318,-7.469805,-7.219285,-7.820510,-2.545311,3.284335,7.306212,-9.047051,6.801947,-2.939070,-2.724389,6.579235,1.822928,-8.666823,6.664601,-5.881130,-8.221943,0.821397,-5.662528,-4.521750,-6.295811,-3.710099,-7.488482,-5.790080,7.668781,-4.059362,-4.796854,2.774235,-4.264592,-2.264224,-6.906421,2.115717,1.880103,2.310353,-9.139009,5.850160,-1.507892,-0.226129,-4.277120,-9.400640,-3.404827,-9.504532,-4.185978,-3.886660,0.424192,-4.631420,2.451954,0.278981,-8.032626,7.558940,-1.024117,-3.403044,-4.100372,6.912191,1.985951,-9.820636,-5.072843,-6.504623,-0.890834,6.479342,2.495862,-6.188848,-6.395373,-5.590012,-2.368172,1.287457,-0.398983,3.839119,7.774167,7.336041,-3.575636,-0.167245,-5.793595,6.230228,5.845798,9.811335,-7.037291,6.428667,2.466662,-8.095952,7.605063,-4.344403,2.309374,-4.042979,9.716163,3.621269,4.806213,-4.485931,-4.826165,6.495500,8.033785,-8.352842,-4.017605,-7.194849,3.705699,8.783861,-0.808834,-9.699825,-6.727839,-6.634353,5.200464,6.650025,1.888873,-0.732146,-5.957783,1.864059,-8.926774,0.529843,-6.440370,-5.041605,-9.845787,-6.973468,-2.221845,-7.169976,-9.892713,-2.881064,-1.346303,-5.068436,8.991308,3.743676,-5.239463,1.919784,3.319281,4.529393,-0.016547,7.091960,-5.650135,-1.378910,8.160434,4.740295,0.563739,1.300273,5.403691,-1.066828,-9.683573,-6.962664,-0.662071,-3.445833,8.369548,3.950292,5.986589,-1.838207,1.691426,-0.510837,-8.751756,-3.640686,5.165077,7.604222,4.377751,-9.032456,-6.510982,4.857889,-2.641993,-1.162235,5.012719,-7.932444,-9.559338,-3.528536,0.464163,-4.205563,-7.717016,0.149897,-3.226887,4.473947,-9.277683,-3.399051,-2.676791,-3.667371,6.691805,-7.322561,-3.191108,8.005609,-1.707560,-4.620461,1.218522,7.765336,9.617158,5.500343,1.268894,-8.612176,-3.938607,-2.443148,-9.166657,-5.458759,1.087825,-3.159321,0.086382,0.426627,-2.886654,6.757245,-1.638910,8.905945,4.867668,-3.742462,2.977483,9.092239,3.596031,8.490061,-7.681870,4.383960,-4.509247,0.135642,9.860009,3.577408,7.688550,6.453189,2.968056,0.821191,-7.125924,-7.147598,-5.449913,8.766961,1.559866,2.586946,-4.203992,-2.024892,4.349352,-7.337078,-1.945815,-5.986729,-6.787430,4.352254,-5.901360,9.545595,-8.016311,1.513453,8.707089,-4.379179,8.066174,-9.463177,-4.148383,-5.197051,-7.607684,4.988110,8.240789,-3.885298,0.802260,8.144343,2.589577,-7.403934,-6.418064,-1.595450,3.273324,3.412147,8.731043,-7.397540,-1.941843,2.277780,-0.774527,2.809512,-9.657632,9.739838,0.187948,5.541890,9.584193,3.210085,8.083143,2.475228,-6.997121,1.977715,-0.067297,-9.157601,1.030092,-9.904734,-4.835538,6.568183,2.947429,-2.370088,9.645061,3.636454,-0.604972,6.027143,8.774308,-3.949745,5.295582,2.461497,7.416842,-6.959732,0.965189,-5.618194,-4.024094,-5.490041,4.041527,-1.999863,-7.640730,9.665938,-2.081560,3.111857,-2.556032,-0.109150,4.596004,9.414214,6.751021,8.798480,-1.724631,-0.873669,0.237558,3.359303,4.442298,-0.179841,0.475625,-9.536494,-0.787562,4.113890,4.268854,-4.881565,9.889526,-9.092800,4.255813,9.099709,9.988490,-8.153856,-0.866585,2.669166,3.621684,-1.764181,-2.016429,2.592356,-6.601413,3.272292,-1.713720,-6.793207,7.586883,-8.168191,1.891871,4.390731,7.197524,2.561995,7.015865,5.038075,-0.977921,6.782199,5.829853,4.085975,-2.734086,2.088800,-5.708050,-5.951773,-3.940270,-1.180461,1.419793,8.349514,2.447931,-8.634957,7.688622,-2.078486,0.068953,-5.361591,-3.895773,-9.888590,-9.221012,4.002544,-5.906165,8.323777,-9.414559,-0.542320,6.662552,-4.058122,-1.838934,5.929185,-2.702310,-4.412910,5.630081,-6.920191,-0.506377,-3.272708,2.740173,-2.219532,-1.227409,-4.105763,3.303081,-0.895917,-7.950956,-5.834695,6.334717,5.517631,9.238533,-5.642510,-9.364861,-2.540944,6.671737,-4.067869,-6.325437,-3.220601,-6.208875,5.505554,5.579038,-5.718571,-8.597301,9.788904,-4.154027,6.147769,-9.855109,-3.928379,2.272473,0.944607,-2.074616,1.586506,-7.591127,0.735304,-8.049993,9.745906,-7.720261,-7.664251,-3.088917,-4.494606,-7.776352,-1.985680,2.965891,5.840714,6.046918,-5.772109,-3.883675,-8.278925,5.336440,1.103648,-9.109613,-5.027404,-6.726054,0.764100,-3.298547,1.931027,5.810224,5.808037,5.801203,3.793598,5.697640,-1.344030,2.221933,5.335021,-3.289168,8.925244,1.371178,7.062776,-3.528894,-0.787977,-2.929892,9.877282,3.999285,1.090827,7.857610,0.143963,-5.828102,9.443179,-9.146271,-4.613527,1.951913,8.695849,6.790482,8.410119,8.631526,-0.282202,4.314650,5.903609,-7.531356,8.333584,-7.040604,6.200434,-4.254178,-7.668248,0.888479,7.203368,-8.290975,9.794052,3.394572,1.555477,-2.062569,9.979370,9.682939,-2.198009,4.102512,-3.312714,-6.052333,-2.432860,-9.027094,1.733297,3.208324,-0.909339,0.407386,-2.242813,-7.535473,2.376966,1.476463,1.510122,1.138399,8.938357,7.595506,-9.169624,9.689600,8.513861,-8.475161,2.505906,2.763320,6.922600,6.520669,-4.009733,-3.424701,-9.169837,-6.163732,-7.914937,5.085363,-1.943238,8.141125,-5.615157,2.171962,-6.881619,-4.958028,2.543733,-9.275625,-4.436797,-9.343987,5.641787,-7.012112,2.100657,6.763655,-2.073679,0.244464,-0.504370,-1.342979,5.140980,-7.672198,1.520309,7.814350,-5.555514,9.228507,3.639109,8.027608,-9.803706,-8.624383,-3.288696], dtype = "float32")#candidate|1818|(980,)|const|float32
call_1817 = func_63_call(relay.reshape(const_1818.astype('float32'), [7, 10, 14]), relay.reshape(const_1818.astype('float32'), [7, 10, 14]), )
call_1819 = func_63_call(relay.reshape(const_1818.astype('float32'), [7, 10, 14]), relay.reshape(const_1818.astype('float32'), [7, 10, 14]), )
output = relay.Tuple([call_1807,call_1817,const_1818,])
output2 = relay.Tuple([call_1808,call_1819,const_1818,])
func_1822 = relay.Function([], output)
mod['func_1822'] = func_1822
mod = relay.transform.InferType()(mod)
mutated_mod['func_1822'] = func_1822
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1822_call = mutated_mod.get_global_var('func_1822')
call_1823 = func_1822_call()
output = call_1823
func_1824 = relay.Function([], output)
mutated_mod['func_1824'] = func_1824
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1843 = relay.var("var_1843", dtype = "int32", shape = (15, 16, 1))#candidate|1843|(15, 16, 1)|var|int32
const_1844 = relay.const([[[-6,2,-6,5,-1,2,2,-1,10,9,-9,-6,-1,1],[-7,-1,-9,4,9,-5,-8,2,-1,-4,-10,-5,-3,5],[9,8,-9,10,4,-5,-5,-3,-9,6,-8,1,5,-9],[6,-4,10,-2,1,-8,7,-7,-4,-7,5,-3,6,-1],[7,-9,3,-9,-5,1,4,-2,1,-3,-2,-9,4,2],[-3,10,4,-6,-5,10,-5,-6,10,-8,-1,-7,-3,-2],[8,6,-8,5,8,-8,4,10,9,-8,8,-2,-9,2],[5,9,-9,-7,1,-8,1,1,8,-7,-9,-7,-1,6],[8,-1,3,8,-5,8,5,5,5,-3,7,-1,-3,3],[-7,-3,10,-10,2,-4,3,2,-1,-3,-5,1,-6,-8],[3,2,-4,-7,-9,-5,6,-9,-5,-6,2,-7,8,6],[-2,-3,-10,3,10,-6,8,3,3,3,-4,6,-2,2],[-1,-4,-5,-8,-1,-8,-10,3,6,-1,9,10,-5,-1],[1,7,-2,-7,-9,3,-5,-5,5,-2,-6,-1,9,10],[10,-10,-5,-3,9,5,2,-8,-10,1,-10,6,9,9],[-1,-1,10,-1,10,3,3,-5,-7,1,5,3,-8,9]],[[8,-5,-9,-9,-2,6,-4,1,-9,2,9,-3,9,10],[-5,-5,1,4,-8,10,5,2,-7,9,-7,-1,-6,5],[-10,-3,5,10,7,5,10,5,-3,7,10,-7,-6,-5],[5,-10,-4,2,10,-5,-9,-4,8,-4,-6,3,6,-3],[2,-5,-10,2,7,-3,-9,3,9,-6,-7,-9,1,9],[4,8,-1,-1,-9,7,10,-10,-8,-6,2,-5,-4,2],[-6,3,-4,-6,-5,8,-3,-9,-4,-1,-3,3,-2,-2],[3,-2,-6,1,-5,9,-5,5,3,-8,-2,-1,-9,-10],[-5,5,-8,-8,-9,6,-5,5,3,5,-3,-3,5,10],[10,-3,2,-2,-7,5,-9,-2,-8,-4,9,5,4,5],[-3,3,2,-10,-8,-5,5,10,2,10,-1,9,6,9],[3,9,-8,-1,2,5,2,-2,-9,-2,-4,-9,7,-2],[3,2,5,1,-6,6,-2,6,2,-4,2,-1,6,-9],[9,5,5,9,-9,-5,-5,-4,3,-4,10,3,-1,6],[6,2,1,9,-5,5,-1,10,3,-2,4,9,-1,5],[9,-1,9,2,1,5,2,-9,-4,6,10,4,-3,7]],[[-7,7,-6,-1,-2,-6,-6,8,-4,-8,5,-6,5,1],[2,3,-2,5,1,-2,9,-5,-10,-3,-9,3,-9,8],[-10,2,-7,-1,-7,7,-2,-2,-9,-8,-1,3,3,3],[6,4,2,-10,-2,10,-7,9,5,4,8,3,4,9],[-4,1,-6,6,2,-9,-6,6,-5,5,-6,-4,-3,-2],[-2,8,3,-6,4,-1,9,-1,-10,-10,-3,6,6,-4],[8,-9,6,8,5,-2,-7,5,2,1,-4,8,-6,7],[-8,-2,-6,1,-6,-3,5,10,-8,-8,-3,-6,-1,-4],[-1,-10,1,-9,5,-9,9,4,9,5,-10,-10,3,-10],[10,-3,7,4,-7,7,1,3,-9,-3,2,8,1,5],[-5,8,2,-8,5,9,5,2,-3,7,3,-2,7,6],[-7,-2,7,8,9,10,-10,-6,8,-2,-2,-3,-8,-9],[-5,3,-6,-6,2,4,-4,7,-7,10,10,6,-10,6],[-6,-2,-10,4,-7,10,-6,5,3,3,-5,-5,4,9],[-10,1,10,8,-6,7,-3,-5,3,1,3,6,-7,-3],[2,-5,6,8,-9,7,9,9,1,4,-5,10,9,6]],[[-6,-6,-2,1,-9,6,-7,3,9,1,7,5,-10,-2],[4,-4,-8,9,3,9,-10,10,-10,-5,-7,10,-4,10],[4,1,-9,-8,-7,-8,-8,-4,4,8,-9,4,1,-9],[-10,9,10,-2,6,7,-9,-4,2,5,-2,-9,-6,-6],[-6,2,-4,10,10,5,3,9,-5,-9,3,-2,-5,-5],[-3,-7,-7,-4,9,-7,7,-5,3,4,-1,6,7,8],[-10,-2,-7,1,8,-5,9,-6,-5,9,-8,-6,8,-10],[2,6,4,-7,6,3,3,-1,-3,1,9,-5,-4,4],[5,-6,6,2,-9,9,7,9,3,10,-6,-3,10,-2],[1,6,-3,-4,4,9,5,7,1,9,8,7,2,-1],[-7,9,-10,-3,-9,2,-5,5,8,-3,1,-10,-3,3],[6,-10,-6,1,5,-8,3,8,-8,7,6,-4,3,-6],[-10,4,10,3,6,-1,-7,5,-9,-5,7,-5,-3,-2],[1,-5,-4,1,4,3,7,10,2,-4,-10,10,-5,10],[1,6,-9,-7,9,-8,-3,4,-4,-3,-2,1,-8,-9],[5,-10,-1,-2,-7,-3,8,-3,2,-10,4,5,2,9]],[[-7,4,-8,-10,-3,9,-3,8,4,2,-1,-4,-8,2],[-7,4,9,-7,4,-6,-2,-7,-7,-6,-8,-9,-3,-3],[-4,-4,6,-6,-8,10,2,7,10,1,-10,-8,-7,7],[-10,4,-5,-4,6,4,2,-6,-1,-2,-8,6,-2,-8],[9,-1,-6,-2,3,2,5,5,-1,6,3,-10,-1,-1],[-3,3,4,3,-1,3,-1,5,-2,-5,-9,-4,9,3],[4,-4,-1,-9,3,7,6,-9,-4,3,7,10,1,8],[1,1,-5,2,-3,3,4,-3,-1,-7,9,2,10,-1],[7,10,-5,3,7,8,-6,-8,-4,-1,3,9,-8,9],[-2,-6,2,-8,8,-6,7,-4,8,5,3,4,-4,8],[-3,-9,-7,-7,4,7,5,6,1,6,2,-9,7,-10],[6,4,-7,6,9,-7,7,4,9,-5,-8,8,-2,4],[8,-2,-4,-4,1,-4,-3,3,5,5,5,-4,3,-4],[9,-6,-2,3,-7,6,1,8,3,6,-9,5,3,1],[-3,10,-5,-1,9,4,5,3,1,9,-5,5,-8,-1],[10,-4,9,5,4,-10,3,8,5,3,-5,2,-7,-5]],[[7,-5,-10,-10,-7,-2,4,-2,7,7,3,9,-2,7],[8,-6,2,4,2,-2,10,10,5,2,-3,-3,7,-4],[3,-10,-7,-9,-10,10,6,3,-5,1,8,-3,10,-9],[8,-8,7,5,6,3,-7,-10,-7,1,7,-2,-5,5],[-1,-4,8,-3,10,8,-1,2,6,-3,6,-4,5,-7],[3,8,8,6,-4,10,-6,-9,-1,-7,6,1,5,4],[-3,2,5,-1,-2,9,-5,-9,1,-2,-3,-1,-10,-9],[-8,-4,-6,-9,6,3,7,5,3,7,-6,-6,7,-7],[10,1,-1,-10,-3,9,9,9,-6,-9,2,2,-4,-8],[6,9,1,5,-5,10,-2,-7,-1,-8,-5,-5,-3,-7],[-7,-8,-8,10,-7,5,8,9,-6,-4,7,5,10,-8],[-9,10,8,1,-4,-9,-6,4,10,7,-2,-5,4,10],[2,-7,-3,-8,-6,8,2,3,-10,5,2,7,4,4],[2,1,2,-4,6,7,-3,-2,-2,4,-3,3,-10,9],[2,3,7,-9,-4,5,7,10,7,-4,8,-1,6,6],[4,-1,9,2,9,-7,6,-1,-4,-10,4,9,1,-4]],[[-6,2,-6,-8,-8,2,-4,10,-1,-3,-3,-7,7,10],[-8,3,-5,-3,8,7,-4,3,10,-9,4,7,3,6],[-9,-7,1,10,7,-8,-5,-2,7,-10,-9,-7,9,2],[-5,-3,3,1,4,-1,-5,5,-7,2,2,-9,10,-6],[10,-2,-6,-1,-9,-4,-6,-3,5,2,6,-4,-7,-1],[-10,6,7,-7,7,2,10,8,-1,8,8,8,5,4],[8,9,-2,-8,-4,-2,2,-6,9,10,-2,8,10,6],[9,-9,5,6,2,-8,8,-7,3,-3,-7,10,3,1],[-3,1,7,2,-8,9,10,-8,7,-9,1,1,-8,7],[-1,7,5,10,7,-4,-8,-7,-10,7,2,-10,-1,-3],[3,10,-8,10,2,7,-9,6,-4,6,-8,3,-2,-7],[3,-9,9,10,6,-3,7,-10,9,-6,9,-8,8,8],[-4,2,-4,2,2,-1,2,-7,-3,7,-2,-6,-6,7],[4,3,-2,-5,-8,10,-1,-10,-6,-1,-3,1,-5,6],[1,-5,-9,-3,7,-7,-7,7,-9,-10,-4,-4,-1,-2],[-1,-8,-2,-7,5,-3,-10,-7,7,-2,9,-1,-2,9]],[[9,-2,2,5,4,8,-4,10,-1,-8,1,7,3,-4],[-5,10,8,6,-1,5,-3,-3,-4,-10,1,5,9,3],[-10,-8,-2,8,-10,10,-7,9,10,6,6,-10,3,9],[5,-5,1,-1,2,2,8,-5,9,-5,-5,-4,7,10],[-9,-2,-2,-1,-10,5,6,4,-9,6,-5,10,2,-3],[-8,-8,5,-3,-7,-2,-9,-7,-6,8,1,5,5,-8],[-9,-5,-5,6,-1,8,5,4,-7,-10,3,-8,10,-2],[1,1,2,-9,-6,-8,-5,-6,-4,-6,-3,-6,2,3],[-9,8,-5,-10,-6,-6,3,1,10,-10,-10,-7,-3,-1],[7,7,-9,6,6,4,4,-4,4,6,-5,-10,5,9],[-2,-2,-4,-7,-6,10,-10,5,4,2,7,4,8,-8],[-3,10,-9,6,-3,-8,-7,-4,3,-2,9,5,-4,5],[-4,3,-1,-3,-7,-4,4,-3,10,-8,7,2,-4,9],[7,-7,8,-8,-7,9,-10,8,5,-4,9,10,4,1],[10,-7,7,-7,6,-5,-8,8,-5,3,10,-7,-1,-6],[-10,4,-8,-8,-5,-9,2,-5,-8,10,1,-5,1,9]],[[-2,9,-3,-3,-4,-5,8,9,10,2,-8,3,-6,-10],[4,-10,-6,10,2,10,6,4,-1,-8,8,9,2,9],[4,-6,-1,-5,-5,-6,-10,-2,2,-2,10,4,-10,8],[-6,-2,6,-9,4,6,8,-8,-10,5,-8,-5,-5,-8],[1,-6,3,-7,6,8,9,1,5,6,-2,7,7,10],[-10,-6,-6,-10,-10,10,3,10,-3,9,-2,3,-7,-4],[2,-4,-2,-5,-3,-9,-2,-1,-10,-6,1,9,2,9],[-4,-4,7,-1,8,-1,-9,-6,-1,5,-9,2,-8,-5],[-7,-10,7,7,1,7,4,-2,8,5,8,-3,-10,-9],[10,-9,-8,7,-4,-1,2,6,-6,10,-10,-5,2,-5],[5,-1,10,9,10,5,-2,-8,-6,2,-5,-6,-7,3],[-1,4,-4,8,-6,4,-4,-1,-5,1,-5,3,-7,-7],[2,-6,2,-8,6,10,4,7,3,6,-6,9,-2,-3],[5,-3,-4,1,-6,2,-4,3,8,-10,9,9,5,-9],[4,5,-6,6,7,3,6,-7,-10,10,2,7,8,-9],[7,9,3,-9,-4,8,4,-5,9,-9,-2,-4,-1,-8]],[[-8,9,6,-7,3,10,2,-9,1,5,5,8,-4,-4],[5,3,8,1,1,-4,3,-4,-2,-1,8,-3,-3,2],[1,-4,7,-2,-9,-10,-8,-7,-8,7,-5,-3,6,5],[4,7,-3,-2,6,5,4,8,-2,4,-7,10,-9,4],[-6,5,6,5,-2,-8,-10,6,10,9,-8,-2,4,-6],[2,10,-8,-7,-6,-4,1,9,-8,-9,-8,10,1,-10],[3,-8,5,-4,3,-1,-6,-9,8,-10,10,7,-6,-3],[-1,2,8,-3,-7,8,-10,1,4,7,-6,10,-4,4],[-6,-9,-10,2,-10,-3,-2,9,9,-2,-7,-9,-3,9],[-8,1,3,-2,10,3,9,-7,6,-4,5,2,-2,5],[1,-7,10,-4,6,6,-10,-6,-4,9,-10,-6,7,-6],[-8,8,-6,10,-1,-9,-10,4,3,-8,-2,6,10,-6],[-10,9,5,7,2,-7,2,1,10,-4,3,9,-1,-1],[7,-9,2,-4,5,8,1,-8,1,6,5,4,4,-7],[-8,-5,6,3,1,-4,-9,2,8,-4,1,10,-2,4],[-8,10,-7,-3,10,-2,-3,7,-9,-3,-1,7,7,-6]],[[2,4,2,7,2,4,-6,-4,5,5,10,-2,-7,1],[-4,4,10,5,-5,-1,2,10,2,-1,3,10,3,4],[-10,-3,-5,-2,6,-5,2,5,-1,-6,-9,9,-2,-7],[2,-5,8,1,-7,-8,-2,2,-9,8,4,-3,10,4],[5,-4,-5,-1,9,8,-5,-6,9,1,-7,-6,-4,1],[-4,-3,-8,-4,-10,-8,7,4,2,8,-10,-7,-9,-7],[5,6,-4,-6,10,7,-7,6,9,-7,-1,-2,6,-7],[4,10,3,9,-5,-4,-5,2,6,-5,1,5,8,5],[7,-1,-8,-2,-4,-2,4,-5,-7,-10,-6,-7,8,1],[1,10,-7,-1,-9,-8,2,4,-6,-4,6,3,8,3],[1,-1,-7,10,-9,9,-4,5,-6,9,-9,-2,-6,1],[6,9,5,10,1,5,3,-10,-2,-10,-5,8,-3,-9],[7,10,-3,1,-8,-9,4,-1,-10,3,-7,8,-3,3],[1,4,3,1,4,-3,4,-1,6,5,-2,-7,5,-10],[6,-6,-9,-4,4,-8,7,1,3,-10,-6,6,7,-9],[-3,-3,-4,5,-7,4,4,10,-3,-3,-4,5,1,-8]],[[-7,1,7,8,-2,3,-1,3,-8,7,3,-8,-6,-7],[-6,-5,3,2,1,9,4,3,8,-1,8,-10,1,-7],[4,-1,-8,-1,4,9,5,9,10,5,9,-6,5,7],[7,2,-8,2,-1,5,8,5,3,-1,7,3,-3,4],[-9,5,-4,7,-9,-8,-2,10,-8,-3,8,-6,-9,4],[9,1,8,4,-10,4,8,4,6,9,-8,6,6,4],[2,9,-3,-1,-4,-2,6,6,9,-5,3,-8,-8,-10],[8,-2,-1,6,-3,6,2,4,6,-5,1,10,5,6],[4,-10,9,7,-4,3,-9,-7,-8,10,-2,-1,-4,6],[10,-3,-5,1,4,3,8,-7,4,10,4,6,-3,-6],[7,-6,-3,5,3,-3,3,-7,1,-10,8,7,-9,8],[9,1,-8,-6,8,-9,7,-8,-8,-3,-10,6,-4,10],[3,5,3,-9,-3,-10,-6,3,-2,4,-7,1,-2,3],[-9,9,-10,5,2,-4,8,-7,-4,-8,1,-8,-10,4],[-7,10,-2,9,5,7,7,2,5,2,2,-8,1,-1],[-9,7,-6,4,-7,-1,-7,2,2,-1,-5,-8,2,-10]],[[-4,-6,-10,8,9,5,5,10,6,7,-6,-7,-3,10],[3,-8,2,9,-8,-9,9,7,-2,5,9,-8,-2,7],[-1,3,-6,-10,-7,-4,6,-4,-9,-8,-7,1,-8,-2],[5,8,-6,-2,1,3,-3,-5,-10,3,-1,10,-7,-6],[9,5,-7,2,3,-4,-7,4,-3,8,-9,3,-3,10],[6,-7,3,-9,-7,2,6,-6,-4,-3,-1,-2,-4,-4],[10,9,1,-2,-7,5,-3,-6,6,10,-6,8,-5,-2],[7,-6,-10,-6,-2,-5,9,-5,-8,9,-6,-5,5,-10],[6,-7,-7,-4,9,-8,-6,2,-5,-8,-7,-7,10,-5],[-5,-3,-8,4,5,-4,7,7,-9,9,-5,4,-5,-7],[1,10,-7,-7,-3,-2,-10,-5,2,-10,-1,2,-5,-10],[-7,7,-6,-6,-8,-2,5,-1,2,-9,8,-5,8,6],[6,-6,-2,-5,-10,3,-3,2,1,-2,-9,-9,-10,-9],[6,2,1,8,-4,4,-3,3,4,-5,-9,9,-8,9],[7,-6,3,-6,9,10,5,7,-10,4,-8,-10,8,6],[-8,-5,3,7,-1,-4,4,-4,-7,7,-3,-5,1,-7]],[[3,-6,8,-5,3,1,-4,6,9,9,3,7,-10,-7],[6,-2,7,1,9,10,-9,-8,6,-2,-6,-2,8,6],[-2,1,-7,8,-10,1,4,-1,-2,5,-3,-4,-10,1],[-8,8,-2,-7,-1,-4,3,-10,9,-7,8,-1,-10,3],[3,-10,3,-10,-8,-7,-3,9,8,-2,-9,-2,-2,-2],[-7,-4,1,1,3,-10,-10,9,-7,1,8,-6,2,-7],[-8,7,-6,-8,-5,10,4,-1,6,-10,-8,2,-4,-6],[4,-1,4,10,8,-8,10,-3,9,-1,-3,10,1,1],[8,-10,-3,-7,-8,9,-6,3,5,10,-9,9,-1,-5],[-2,-8,4,-5,10,1,8,5,7,9,3,3,2,6],[-2,-6,7,-7,1,-5,-5,-8,-6,-6,-1,4,6,-8],[1,10,4,10,-7,10,10,-8,4,5,-8,-5,-7,3],[-6,2,6,1,-7,1,7,-3,-9,-1,6,2,-8,-1],[6,8,6,7,1,1,-8,-5,6,-3,8,7,-1,-8],[-8,8,4,3,-6,-3,8,-7,8,3,-10,8,-2,4],[8,6,10,7,10,5,2,-4,-3,9,3,-5,8,-2]],[[2,6,7,-3,4,2,-10,9,-6,2,-4,-1,3,-1],[-1,3,-1,3,-1,-7,-6,8,-8,10,1,-3,5,3],[2,-2,9,6,6,-7,6,1,-3,-10,7,-6,3,5],[-3,-9,2,-10,7,-2,7,-10,-5,7,-2,-10,-8,-9],[-6,-1,3,-6,1,8,1,-3,-9,-1,3,-2,-4,6],[-7,-5,9,1,-7,-9,-2,8,-6,4,-3,-8,5,-3],[-2,-3,6,-3,-5,9,3,10,-4,1,-1,-5,-3,3],[7,-9,7,-10,-1,7,7,-7,3,-8,-8,-9,5,3],[1,6,-6,-8,8,-5,1,6,-10,-10,10,2,-6,-5],[8,-9,-6,8,-1,-4,-4,-1,-2,5,-9,7,-5,-7],[3,-2,-4,2,7,1,-8,-8,-7,-9,5,3,1,3],[-10,-6,6,3,-10,-9,7,-4,8,-9,-10,-4,-2,-9],[4,10,-4,-6,-4,-10,6,-3,1,9,-1,2,7,-6],[-2,6,9,-9,-10,-3,6,1,3,4,-1,-1,1,4],[9,9,-7,9,-8,-6,5,-5,3,10,1,-9,-7,5],[-4,-6,-10,-6,1,-2,-4,-9,10,-10,1,-8,-6,-7]]], dtype = "int32")#candidate|1844|(15, 16, 14)|const|int32
bop_1845 = relay.equal(var_1843.astype('bool'), const_1844.astype('bool')) # shape=(15, 16, 14)
func_745_call = mod.get_global_var('func_745')
func_746_call = mutated_mod.get_global_var('func_746')
call_1850 = relay.TupleGetItem(func_745_call(), 1)
call_1851 = relay.TupleGetItem(func_746_call(), 1)
func_1583_call = mod.get_global_var('func_1583')
func_1585_call = mutated_mod.get_global_var('func_1585')
call_1856 = func_1583_call()
call_1857 = func_1583_call()
uop_1858 = relay.asin(const_1844.astype('float64')) # shape=(15, 16, 14)
bop_1867 = relay.logical_xor(uop_1858.astype('int16'), relay.reshape(bop_1845.astype('int16'), relay.shape_of(uop_1858))) # shape=(15, 16, 14)
bop_1876 = relay.greater_equal(bop_1845.astype('bool'), var_1843.astype('bool')) # shape=(15, 16, 14)
output = relay.Tuple([call_1850,call_1856,bop_1867,bop_1876,])
output2 = relay.Tuple([call_1851,call_1857,bop_1867,bop_1876,])
func_1879 = relay.Function([var_1843,], output)
mod['func_1879'] = func_1879
mod = relay.transform.InferType()(mod)
var_1880 = relay.var("var_1880", dtype = "int32", shape = (15, 16, 1))#candidate|1880|(15, 16, 1)|var|int32
output = func_1879(var_1880)
func_1881 = relay.Function([var_1880], output)
mutated_mod['func_1881'] = func_1881
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1062_call = mod.get_global_var('func_1062')
func_1063_call = mutated_mod.get_global_var('func_1063')
call_1911 = relay.TupleGetItem(func_1062_call(), 0)
call_1912 = relay.TupleGetItem(func_1063_call(), 0)
output = relay.Tuple([call_1911,])
output2 = relay.Tuple([call_1912,])
func_1914 = relay.Function([], output)
mod['func_1914'] = func_1914
mod = relay.transform.InferType()(mod)
mutated_mod['func_1914'] = func_1914
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1914_call = mutated_mod.get_global_var('func_1914')
call_1915 = func_1914_call()
output = call_1915
func_1916 = relay.Function([], output)
mutated_mod['func_1916'] = func_1916
mutated_mod = relay.transform.InferType()(mutated_mod)
func_628_call = mod.get_global_var('func_628')
func_629_call = mutated_mod.get_global_var('func_629')
call_1964 = relay.TupleGetItem(func_628_call(), 1)
call_1965 = relay.TupleGetItem(func_629_call(), 1)
var_1976 = relay.var("var_1976", dtype = "float32", shape = (980,))#candidate|1976|(980,)|var|float32
bop_1977 = relay.bitwise_and(call_1964.astype('int16'), relay.reshape(var_1976.astype('int16'), relay.shape_of(call_1964))) # shape=(980,)
bop_1980 = relay.bitwise_and(call_1965.astype('int16'), relay.reshape(var_1976.astype('int16'), relay.shape_of(call_1965))) # shape=(980,)
uop_1988 = relay.cos(var_1976.astype('float32')) # shape=(980,)
func_477_call = mod.get_global_var('func_477')
func_479_call = mutated_mod.get_global_var('func_479')
const_1995 = relay.const([-5.187540,-5.559130,0.815984,-9.049884,3.082273,-8.719509,2.127312,2.086815,5.118725,4.948127,6.672197,-1.147536,0.605688,4.287004,-6.362425,-2.062619,4.109416,-8.167600,6.052805,-5.041988,4.211685,-7.740127,-3.182128,-0.965981,-4.149016,3.087846,5.933304,5.750275,-7.523062,6.361524,1.940049,7.031951,-5.674345,-0.388999,-9.581766,-2.042025,6.144365,0.706806,-0.128076,-0.810500,8.159848,-2.885338,0.404853,3.345478,-3.772820,-8.939347,8.929889,-9.937962,5.866087,4.401751,7.472932,6.009137,-2.368935,-1.045155,-1.710500,6.886634,2.988303,-5.397482,6.815308,-9.711871,-0.842999,-5.012953,3.645237,3.557990,2.106622,-3.766926,3.626616,5.263311,-9.294142,-9.070008,-5.978736,0.807514,-1.473755,3.593689,5.140873,8.649538,-6.738445,5.691982,5.659672,9.100461,-4.526231,7.844824,1.343958,8.886695,0.744935,8.811003,-3.312163,0.543491,-3.639900,-2.279117,-8.141672,-0.481594,7.029053,-0.608562,-9.509478,8.522716,-8.687588,-5.956127,-1.637441,9.864843,-1.985665,2.616312,0.447896,7.735073,0.612298,-6.464599,4.184267,7.428340,-8.691447,5.909043,7.859650,2.620805,-9.403163,0.474272,-2.628465,-4.173977,3.450084,8.766561,-3.747657,3.212458,-7.556367,9.362749,-8.960291,2.314756,6.697908,6.174636,9.142193,-6.097744,3.640720,-0.152288,-2.154962,-7.336556,9.553855,9.912199,-8.966646,7.753108,-1.807418,-3.534047,5.255309,4.851978,3.417156,2.937931,-1.817882,-3.393202,-7.172646,2.974236,6.721457,-6.109423,3.629372,-6.995415,-6.873012,-1.571660,-6.777092,1.392627,-3.655450,-7.963329,-4.687524,8.618043,7.462900,-4.584417,-1.126332,0.743429,5.407554,-5.956603,1.372485,-1.352504,5.737175,-3.295828,4.628253,9.892955,-8.251589,0.406340,-5.605061,0.373940,-1.382856,2.055928,9.969294,-9.091654,-9.198037,4.846580,2.197681,-7.368082,2.420056,7.958494,-4.280718,-9.485395,-4.890281,5.916360,-1.606614,0.247571,-0.044248,-4.254751,4.831974,-6.625691,8.235767,9.412753,3.717493,3.518126,-4.768892,-7.988397,-5.573020,9.253261,-8.265744,6.425144,-8.736440,-5.270518,7.265747,-3.669443,9.596753,-5.582726,5.771233,-6.067980,6.436401,2.545841,-5.889808,8.392515,-4.659949,4.516372,8.289188,-7.668807,5.172021,7.452217,6.257335,9.620426,-8.206020,6.209302,8.035410,1.908303,-7.349378,-1.473401,-3.724239,3.579688,2.675715,9.336733,2.366785,-1.012087,-2.141833,2.905457,7.476620,0.611862,-4.440002,0.283862,-2.549732,6.434224,9.251394,8.020897,3.988708,9.990595,8.783373,6.733822,-9.328982,-5.138399,1.724287,-8.779792,-9.388209,2.295432,-3.374143,2.189435,8.893622,2.652665,-7.475012,-1.638209,8.980310,-5.315775,-4.979586,7.175319,2.424606,-2.700919,0.251046,-5.461003,-2.335040,6.950329,-6.570560,5.136809,9.067028,7.595392,9.016275,2.817979,6.878876,8.446349,4.471662,-9.021346,-3.403233,-5.432203,8.225771,-9.756005,-8.294919,-1.651906,-7.203339,-4.754329,2.602180,1.293530,9.024475,5.196627,8.026919,-8.207282,-7.188286,8.644938,5.802080,-1.439453,-0.853950,-3.226226,-9.788562,-6.290044,-0.666626,-2.086463,-0.296405,-5.785266,-6.040959,-6.864414,9.080902,0.010974,5.053486,-8.997516,-1.016547,1.389099,5.121252,2.951291,-0.378391,-0.366968,-6.744386,-7.216930,2.271165,-5.865311,5.333245,6.252742,5.582687,-5.086903,4.594051,-5.696062,5.510026,0.568604,2.488143,9.863894,-0.744831,6.127884,-8.419831,1.375556,-3.425534,-7.215908,-6.436896,-4.187172,-6.047552,-8.001082,-2.416669,5.723173,-2.550446,-8.137366,1.790824,9.105728,-0.990736,-3.237084,6.534285,-2.058983,7.938956,2.073354,-2.845278,7.998796,-0.366109,-1.735700,-3.294326,-0.287624,-3.807943,6.186719,-0.669011,5.939947,2.291021,-8.236318,7.355148,-7.106557,1.756144,-1.768410,-4.522948,-0.170472,2.327587,4.955199,-7.561741,-1.104359,-8.686337,-9.353246,7.351421,3.758196,9.549955,3.753593,-8.369842,7.090876,1.282059,2.413098,7.206828,-3.792882,3.664428,9.439253,4.477478,-0.987177,4.494931,2.581727,7.841770,1.016188,-5.868717,9.790111,-9.078826,-1.332862,4.994935,4.133576,8.232275,7.312740,1.229849,-4.359652,0.151559,6.443242,7.547303,9.262036,6.721200,2.968731,9.311956,7.042763,5.075270,2.096417,5.223808,5.521195,-1.073143,3.191215,0.481288,-0.432202,9.063454,0.063512,-9.387100,4.684480,3.317046,3.599350,6.689670,8.027916,-3.908111,5.074771,9.474998,-9.157188,-1.144837,-1.894227,5.564594,-3.956802,-1.678748,0.285887,-1.972007,-1.420352,1.377321,-9.530220,-9.590753,9.637292,-0.998171,6.302460,-1.796572,4.280536,6.588816,-3.793346,-3.876688,1.994217,8.508601,-9.217482,0.198396,0.272580,-7.543987,-7.317166,0.639874,-6.401034,-5.551522,-1.926301,1.682353,3.401130,5.179638,-1.652221,-4.604390,-0.168313,-7.823799,6.992535,3.465651,5.302718,-5.063847,7.906132,5.350461,3.894853,9.277359,-5.105742,8.591635,7.945422,-4.263900,8.444201,-5.585239,-6.306901,-4.501578,-9.369633,-4.593727,2.503583,9.422957,5.059840,-2.202482,0.152958,-4.234272,1.804636,3.682316,-5.692908,-4.189520,7.366032,6.718204,2.175720,4.552241,8.459447,7.145074,9.381805,7.162726,-2.579042,0.686811,8.345667,6.308153,-5.342323,-6.922214,-3.993625,-1.513838,7.749482,9.333274,8.008396,-1.896788,7.563911,1.284661,7.809420,8.666872,9.366903,7.110361,-7.243670,8.968284,6.222898,6.939487,-2.943832,8.358650,9.574676,-2.234733,-8.771642,3.767310,4.622259,-1.251405,-5.650365,-0.638212,-5.231581,-6.759780,-1.215477,1.242766,8.903637,-2.317601,-9.407699,8.308454,-3.415486,-2.243158,4.277238,-2.774465,8.568493,0.066261,-0.839473,9.977185,7.144157,9.156191,3.765172,6.808517,9.812765,-9.730814,-8.345388,5.610882,0.136745,7.548397,-4.436674,3.010028,-4.060641,8.592656,-6.181938,7.657810,-5.968298,-7.707047,-6.586751,3.269596,7.399802,0.717993,7.151483,-3.299552,4.234860,3.411289,-6.109644,2.350345,9.416412,1.092154,8.164882,9.325698,-3.762961,4.221787,-2.097725,-9.427273,-0.403142,2.774856,7.845845,-0.131499,4.892089,-6.380276,7.422522,-9.943221,-1.664217,-6.101444,-0.630547,6.579770,4.102096,8.533364,3.404892,6.421080,-5.319080,-6.351060,8.010370,-5.092580,-2.282976,-1.192489,-3.969940,0.265166,-1.249892,-9.769664,4.678380,9.396295,-4.181245,-7.192521,4.501287,5.542942,-3.024435,5.667465,-9.978663,-8.742864,-4.086748,-6.987083,4.713487,1.950215,-2.338788,3.214425,9.033484,-4.931016,6.835860,-2.473166,8.311848,-7.539212,7.396355,6.917164,3.195263,-8.449082,-4.641771,-9.070629,-8.279659,2.583890,9.209428,7.319922,-7.179476,-5.344494,-9.282999,-8.080076,-6.683938,-8.677282,-9.154520,-3.243448,3.816658,4.544407,8.928071,-5.083830,5.798580,-6.352894,-4.224293,7.037202,-9.379194,-1.306595,-2.741308,-5.775192,-2.209326,-2.988192,-7.960312,-8.287411,-6.159213,2.488202,-3.415249,7.049409,7.924730,-3.717841,7.671856,-5.352497,-2.726413,7.584902,9.332112,4.970384,-5.413664,-1.857075,-4.357279,-6.230526,-4.413636,4.866221,1.372292,-5.175803,-0.187358,-9.496435,9.734559,4.839066,-8.106529,-2.040771,-0.224494,5.279339,-1.274791,5.664957,-9.746683,3.743097,7.100590,4.762535,2.894116,-0.080444,2.909956,-6.082881,8.939053,-9.655515,-0.338701,-8.247343,-2.355018,9.653736,2.249584,-0.236483,-3.765395,0.242378,-8.356330,8.602546,-1.234375,3.443252,-5.765963,-4.250478,-3.133825,9.196351,-3.507972,3.158127,4.055596,8.855695,-3.422304,0.768126,4.499235,-5.202655,4.415804,5.279991,4.508359,5.590572,-1.344246,-8.943515,-9.737563,9.290642,0.862961,-0.558888,6.688183,2.907093,9.231712,1.024905,3.981560,-1.080036,5.438167,3.194436,-7.583682,-9.191069,-3.841050,7.166487,1.306709,2.258780,-3.693397,6.380785,2.556182,2.629307,3.725629,4.085797,-7.399009,-6.866695,-8.470197,8.038460,-6.375220,5.096925,-5.168126,-9.015907,-3.387503,-2.589438,2.836206,-3.464566,-8.288672,4.434206,-8.091082,3.950401,-6.979224,-4.102737,3.165316,9.266426,-6.425810,-0.158528,-9.738147,-8.627503,6.192559,7.010112,-2.887623,9.666680,5.544583,2.994755,-0.843448,-4.612636,-2.755051,6.337730,-1.561661,6.639787,3.112121,9.613003,-2.560279,-1.441027,-2.356862,-2.952940,-1.971777,-7.079183,-2.174835,4.896181,-2.985049,2.564601,2.753585,-8.667604,-1.089002,-6.651884,6.754167,7.837868,3.255648,8.836395,4.858786,-1.942203,-2.106299,4.801970,-3.186916,2.268946,-0.842807,1.093533,2.679556,-6.493668,-3.959645,5.217751,-6.494455,4.830533,4.540248,-5.343644,2.882543,-1.955517,8.251230,-3.697347,-0.883877,-7.427569,7.210045,-6.746653,6.800242,-5.025907,2.450959,7.028586,-5.255081,8.549511,-3.080228,-5.232710,1.193041,7.941071,-8.131618,-5.962267,9.433361,6.718172,7.545795,8.530742,-4.426373,-7.415615,5.963052,-6.861755,-5.019678,3.102086,4.848889,-5.868757,-4.674380,6.537057,-8.378649,-8.065808,-1.973214,-0.591874,3.307305,-8.165476,9.011588,-2.759623,-6.191346,-1.259037,-2.134535,6.918752,0.039001,-3.140810,6.330890,-5.251369,-9.847601,4.000701,-9.525061,-0.594300,5.795766,-1.978091,5.322581,-3.497386,8.073811,-7.965676,-4.854756,2.049979,-6.972894,-9.728241,7.511267,6.184327,5.910200,-1.978761,-7.180679,7.913106,1.598067,-4.230413,-7.312457,-9.459278,4.175565,-7.680764,1.099397,7.632590,9.485509,6.431349,-2.826582,-4.080897,-6.192034,4.624323,7.792156,-6.137335,-1.632526,2.126116,1.758286,-7.652394,7.589209,2.653783,-0.869224,-1.931729,-0.636045,-6.188413,-1.411429,-3.712716,7.426567,2.810986,-8.467066,5.155587,-4.473596,-7.120582,7.684597,-6.262126,6.631338,4.652744,-7.318900,5.106415,5.113370,6.106246,1.731740,-4.201877,5.417196,8.135814,-5.665118,8.622768,-3.703738,-0.269495,-4.805119,-3.848605,-5.813282,-6.104569,0.274742,7.638013,0.345551,-1.150907,-7.786443,-1.677803,-9.001998,-6.668315,-7.844024,6.065043,0.059708,-1.288074,-6.467703,9.180024,-7.761670,8.484352,7.628820,7.691491,1.385297,3.998411,-5.031534,5.502761,-2.632564,5.248443,8.102832,0.745469,7.616195,1.775192,-9.790294,-7.392257,-7.863626,-9.656493,5.344416,-1.294071,0.189317,-3.044487,7.347236,-6.073465,1.427952,8.697408,-5.619209,4.584452,-8.776853,1.980559,0.844763,-5.604799,9.727960,-0.503091,-2.557479,4.244739,-0.932781,7.043676,9.221862,1.259171,-8.244737,-7.977173,2.433559,-6.451124,-8.053463,-3.015147,4.658351,0.654344,3.591253,0.757464,-4.682576,9.241532,2.695087,4.687809,-9.034251,2.059330,6.275783,0.008613,-0.608667,-0.016057,5.090397,-6.513542,1.078457,5.452110,0.979755,-7.612148,8.956573,5.444755,1.722076,-9.687852,9.669946,-0.303497,5.333234,-6.278766,5.699060,-3.936838,7.426732,6.038236,-3.661544,-7.625100,-6.589319,9.250352,-6.557430,-5.129185,6.013252,-1.277033,-3.408573,1.279007,-1.862608,1.550864,6.053384,1.082290,9.548428,6.045082,2.260346,1.466092,1.695148,-5.132195,1.461908,5.636857,9.889007,-3.678248,-0.065863,6.591783,3.344683,-8.611407,-0.879834,4.194333,-0.184401,7.816914,-8.747858,4.879318,4.030985], dtype = "float64")#candidate|1995|(1092,)|const|float64
call_1994 = relay.TupleGetItem(func_477_call(relay.reshape(const_1995.astype('float64'), [14, 13, 6])), 0)
call_1996 = relay.TupleGetItem(func_479_call(relay.reshape(const_1995.astype('float64'), [14, 13, 6])), 0)
output = relay.Tuple([bop_1977,uop_1988,call_1994,const_1995,])
output2 = relay.Tuple([bop_1980,uop_1988,call_1996,const_1995,])
func_1997 = relay.Function([var_1976,], output)
mod['func_1997'] = func_1997
mod = relay.transform.InferType()(mod)
var_1998 = relay.var("var_1998", dtype = "float32", shape = (980,))#candidate|1998|(980,)|var|float32
output = func_1997(var_1998)
func_1999 = relay.Function([var_1998], output)
mutated_mod['func_1999'] = func_1999
mutated_mod = relay.transform.InferType()(mutated_mod)
func_721_call = mod.get_global_var('func_721')
func_722_call = mutated_mod.get_global_var('func_722')
call_2004 = relay.TupleGetItem(func_721_call(), 1)
call_2005 = relay.TupleGetItem(func_722_call(), 1)
const_2010 = relay.const([[7.448967,1.574904,-9.694054,-8.395801,0.153604,1.413083,-7.460070,9.416802,0.146397,2.913594,-5.253983,-0.012808,4.064075,-8.038808,-5.705611,5.739176,7.277170,8.481682,6.365171,-8.256447,-9.938508,-0.557063,0.754149,-7.689815,-7.842352,9.463044,-4.615619,-7.568748,9.795339,8.371213,-8.163685,-1.586362,-5.806917,5.417802,6.134162,-2.948853,-2.107892,-7.154133,-7.398477,-6.263734,0.387994,-0.953410,9.172641,1.273061,2.038050,6.177540,-1.511173,-9.762099,0.813965,-1.298421,6.780805,-4.099203,-7.649704,-5.383785,3.825317,8.426530,-3.484467,-3.646860,-1.102197,5.619880,5.951090,6.826863,-6.276703,-2.642397,-1.868323,-3.607261,3.759556,4.910477,-1.220359,5.088044,-8.487289,-4.744618,-2.897942,-5.260009,-8.003028,-8.718971,-2.780429,2.240186,3.173092,-5.328848,9.851416,-9.859814,-2.408643,-6.647001,9.895401,-1.704301,-4.025638,-4.999128,-5.389510,-7.767030,-4.462051,-4.917464,-2.461994,7.164543,4.328770,6.925693,8.332884,6.822309,9.272082,-7.224971,4.877439,-7.962202,4.243190,-1.883695,-2.573495,-5.980696,-7.956700,7.373793,9.229167,-8.775631,9.203776,8.387311,4.809559,-8.128561,-2.397627,2.278880,6.575047,0.516341,2.635215,-5.399974,-0.828889,-1.122311,3.916320,-5.840555,0.417732,4.656411,-8.802478,0.498371,-6.111092,3.790433,-3.141538,-7.260887,-7.755077,-2.735140,-1.324032,7.821567,7.831151,1.738503,-1.000771,6.191601,-4.439929,-2.462262,6.102133,7.981163,7.683737,-9.492759,1.227673,4.025495,2.779109,8.118645,1.116107,-6.436781,1.259620,4.743074,8.439728,9.233567,-9.693211,9.635744,7.681954,1.064736,4.878909,-7.529015,-2.864171,-2.722029,0.120599,5.418613,9.579283,9.683033,5.391510,-1.944097,-6.027141,8.328298,5.941064,-2.696890,7.472951,1.777722,-4.355565,8.637181,8.157698,-3.922140,-8.152642,3.089498,5.481199,-8.375493,-5.268652,-7.657440,-2.104803,7.938636,-4.882590,-6.792515,1.810599,-7.389927,6.612966,-6.253007,4.264835,5.234097,3.783443,6.034980,4.968414,2.899404,-2.123307,-5.986611,3.027142,-8.909504,-4.083920,7.487885,-1.463308,7.966931,-7.860440,6.334566,-4.645600,8.951067,7.476505,-6.910460,-5.627200,-4.123000,9.851672,5.569715,-1.984505,-5.986868,-8.356071,-0.630667,5.609102,-9.870575,-5.153883,-7.001639,-1.175050,-6.799423,-8.287337,-6.656400,-3.553839,-2.268454,-6.605206,2.254395,4.632309,1.438002,8.261593,9.742924,6.087172,-7.966126,2.065066,-7.116588,-3.451425,4.334100,2.543148,3.565326,9.838099,-3.902659,3.883273,-8.239911,7.269466,-3.832690,-1.470605,-9.064187,7.215015,2.527320,3.755050,-4.391136,-2.455060,-8.023952,-8.413284,3.246181,6.607996,0.230864,5.720627,-6.810689,8.603025,-2.108852,-1.410523,7.950111,7.684248,-7.193646,-4.135499,4.607234,-6.317519,-8.967451,0.849717,-6.934956,4.590777,-2.341001,-3.825770,-2.768119,3.105783,1.129601,7.153549,-3.042015,4.161230,5.229333,8.875696,-8.185233,-6.695738,-6.237217,-0.412847,1.963348,-4.940206,7.124975,-4.668250,-9.757240,-0.801576,7.395986,-1.827262,-9.414942,-8.429554,7.746973,-7.550321,7.196302,5.809096,8.235717,3.928623,6.876167,-2.497007,-4.811882,-2.084770,-2.723796,-0.925682,-7.113589,1.074001,-0.533213,-4.916221,-3.498901,5.853892,-4.329287,6.011156,-4.961627,-4.626247,0.917894,-3.318642,0.311512,-8.976924,7.802145,2.238446,-3.050924,2.188154,-4.365421,-6.629170,-7.875703,-9.798823,-4.559606,-3.312398,-4.839937,2.551782,7.068721,9.337284,-3.145462,3.386565,-6.992794,-5.984317,2.416766,2.277883,4.210134,-9.799095,1.312161,-4.849506,0.413483,0.364884,4.550506,2.495226,-7.626490,5.677529,-7.338544,7.480916,3.626579,7.138319,0.024570,-6.132497,6.238187,-0.101807,-7.655942,-9.943136,-7.215971,1.674655,-4.507096,-5.662585,-3.751553,-4.132926,-7.418165,6.305970,2.991301,6.438938,-6.079669,9.882527,-8.608110,-9.630467,4.116809,-3.013740,-7.133647,2.143307,-4.596239,-4.539825,-5.605944,-7.609808,-7.780400,-1.999213,-4.292890,-8.465805,-5.704950,-3.952421,7.727245,3.596735,-8.424593,-5.357452,1.135440,7.166479,-0.455286,-3.394856,-1.456547,4.292832,9.529395,-0.970013,1.188915,-3.328793,5.874603,6.865107,5.648460,1.361373,-5.896931,3.553087,3.566150,-2.379609,-4.487065,-8.929819,0.352804,1.514894,-2.351476,-0.122705,-8.609607,6.124011,-4.588182,-9.016479,5.064011,6.230230,-5.319986,4.039364,6.334163,5.399390,4.230238,0.937281,0.182100,8.669364,-8.336468,-0.310076,-1.543012,-2.937359,-4.759925,-9.621271,-8.797897,9.721678,-4.671197,4.846810,-3.875843,0.161861,-4.075370,-9.501278,9.173856,1.198773,-8.262996,-8.649257,3.411659,4.163347,-6.085622,1.841667,4.692652,1.325590,-4.881157,2.482542,6.523829,-4.953868,6.496225,2.903407,-2.177767,4.373522,-9.116371,8.051013,-9.887572,0.117362,-0.303994,-5.344220,-7.137724,-9.495112,-3.293242,0.716778,-4.537581,0.967312,8.801414,0.333817,-2.924801,-4.600784,-5.329368,-7.599390,-6.592584,5.734969,4.733099,-7.033642,7.843400,-7.691661,-6.154263,9.034862,5.160964,4.917663,-9.950615,-9.891372,9.865683,5.387622,-3.014725,-4.916905,-0.106979,5.485574,8.193100,7.831809,-8.822656,-2.674444,5.431930,-3.325811,8.681856,0.837167,-5.380189,-5.988916,-7.624012,5.036351,4.085552,2.221937,-1.736304,0.858790,-4.382493,-1.381558,-3.893604,-7.842324,1.284423,-4.055507,-6.611221,-7.713673,6.412866,-6.987147,-3.357192,-4.748722,8.536253,3.196046,6.226599,-6.760291,0.784171,-7.501489,1.288753,-4.472552,4.896996,6.775453,-9.514699,-4.121902,-5.910559,-2.629370,9.681233,4.688612,-7.126442,-8.187202,1.809495,-9.021794,4.734106,5.893404,2.711184,3.080183,-5.792321,-4.992985,-3.553526,7.753571,2.988599,-3.177421,-0.242487,4.060301,-7.065253,-3.171773,-2.805481,7.790829,-6.792348,4.598665,-1.273619,-3.630176,4.458628,0.126826,-1.423222,1.428218,-5.914995,-7.357623,4.766693,-5.524130,4.382808,3.749851,6.910935,7.725972,8.966713,9.283346,-6.945427,7.169169,-4.546817,6.624214,9.335306,-5.678159,-0.362857,-6.542743,-1.373401,-0.071196,-7.084519,-1.944435,-6.174610,8.528012,-5.020145,2.329887,-8.835404,-9.371289,6.030034,3.684828,-4.623509,5.682191,-2.650592,-2.021324,-2.063311,-0.435857,4.699242,-5.320448,6.245489,9.136132,-1.992262,-1.269815,6.456406,0.548163,-8.175887,8.011334,-5.826527,-9.023660,4.900503,8.299048,4.709633,-7.378305,-8.239726,-3.489886,-8.363962,0.349363,-1.891924,9.870777,3.645415,-0.771371,-7.510027,-4.990303,-0.821264,3.823929,-2.686031,9.510221,2.822029,-0.413998,-6.322994,6.804344,-4.114106,5.649565,-7.381830,6.235549,5.527725,6.571804,8.698203,-8.434400,-2.477182,5.708755,9.847832,-5.738007,-9.516943,-6.333398,4.339530,0.808878,3.978219,-7.825411,-2.660812,2.563197,-6.467501,5.660948,-8.142607,6.773192,3.168446,2.681217,-7.285392,2.305829,-2.729524,3.147656,2.878673,-4.132550,-5.938095,-6.001141,-8.029425,-2.761439,2.388578,-6.493102,-4.716733,-7.735479,4.781828,-7.298618,-8.428476,-4.470232,6.973346,-5.339282,6.234664,0.204067,-0.033021,-0.113511,9.941276,2.356304,-7.159953,2.685536,8.171259,-7.851133,2.751162,-5.895015,2.243525,7.757474,4.407989,0.552777,-8.289652,-4.148413,6.052654,5.408683,8.187076,7.638316,-3.962071,-6.839107,-8.997619,-8.953848,6.300387,8.630648,-8.606668,-4.297409,7.835597,-1.558396,-0.842787,-5.094980,3.753259,3.680752,-5.707523,-5.913378,0.644235,-0.409929,5.795377,7.538624,-3.288968,2.920241,7.074117,-0.949220,-6.199374,-4.151771,7.588950,-5.665405,-6.366009,5.512572,-3.311834,-4.545582,6.523783,1.967018,8.266424,2.747950,-5.615074,-5.916133,-5.119726,-9.938808,4.702187,-9.466705,1.605589,1.662017,-8.497538,-4.779820,-4.888538,-6.018841,2.253753,6.777005,-9.307411,-7.085013,8.741309,0.083422,0.586196,-8.190575,-2.874420,0.388567,8.071209,-9.403628,-6.479140,-2.663444,9.592195,-2.187321,1.805181,4.531711,-1.408692,-1.616042,8.786245,-9.671683,3.164919,1.549895,6.589806,3.322514,-7.676989,-8.245375,-5.516695,3.332834,0.991136,-7.309335,3.094740,-5.324909,-4.525665,-8.038815,-0.988968,-2.705456,5.265352,-9.188923,1.353776,-2.882604,1.330980,-0.417673,9.060726,6.025676,3.086545,3.328979,3.541709,-9.608364,-2.657560,6.806275,1.412320,-0.154802,-7.745238,8.102590,-9.791371,8.862013,-0.826290,9.681651,7.713585,-7.215636,5.789432,-9.743859,-9.038298,-3.096471,8.934022,6.687276,3.703924,0.199065,-6.812914,4.825033,-6.677623,-1.641420,-4.445792,6.867610,-3.407808,-5.874690,1.587386,8.087038,-8.515220,9.860781,0.625878,-4.641402,-2.380241,-6.194742,1.992115,-0.395090,-9.497645,-5.193015,-0.064626,7.989374,-2.983127,-4.515042,-6.633136,0.704128,5.826548,-4.449334,6.651628,-6.873267,-5.322011,3.792725,-3.139933,-4.265823,-9.980744,-3.825740,-5.226823,-5.221313,4.664272,-7.563119,-7.467996,-3.676279,-3.780630,-5.094189,-1.108188,-3.430961,-8.553291,-5.869253,2.724156,6.898502,0.622862,-7.025298,4.689447,-4.118694,-8.042755,-8.006822,-4.341356,-7.522627,2.141806,0.723808,6.696304,3.186639,6.250879,8.560335,-9.430189,-2.853024,-0.484520,5.587546,2.405251,-3.158438,-7.339823,-2.170834,-5.902023,-2.225734,-8.831077,4.089124,2.902160,0.244376,-0.100123,4.178330,2.691882,-2.656730,-4.990865,-6.266980,-2.046386,4.478018,0.989265,0.010154,9.300925,-3.336565,1.567745,2.152089,-0.873054,5.809473,8.674660,4.669232,3.243713,-7.174885,3.153878,1.371630,-8.046834,-8.517934,0.581827,3.181605,4.626727,-1.182726,1.920204,1.761730,-7.222341,-3.499608,8.931286,-3.799804,3.718276,1.985798,2.519961,-9.830576,0.738989,-0.028303,9.312622,9.817456,2.760113,1.624482,-6.497024,-9.369097,-5.519622,-6.394585,-8.843558,-1.412485,-2.182021,-6.034741,-4.267572,8.527738,0.742014,-7.849280,0.179528,-6.465935,9.974428,5.736473,-4.615884,-3.337219,-0.983524,9.547683,-7.827880,-1.458913,8.690189],[-1.575111,-8.600825,8.899087,5.204473,-1.468988,-8.053967,4.903707,-9.612019,9.983810,-5.465597,0.768350,-1.064677,9.094877,-7.527783,0.018927,-9.596128,-9.916061,0.147120,2.598137,8.117455,5.855526,-1.198542,-1.992574,5.489919,2.985748,6.183034,-2.145092,1.564630,-3.953307,-2.895968,9.630158,-0.706860,0.611497,-6.289657,-5.267462,-0.600262,4.133882,6.996565,0.328559,9.953668,-2.098893,-1.395166,-7.039105,3.275766,0.334281,4.232105,-7.418191,-3.448644,5.575849,-4.561997,0.490621,-5.910122,3.798610,-5.199990,-9.948492,-8.862979,-3.895288,-0.760056,-9.682987,-6.045699,6.961326,9.509682,0.462751,6.923928,-9.260029,-3.834292,-3.501663,-2.363898,-3.004060,-6.887835,-0.690528,-2.196216,5.391069,9.120782,-4.116941,-5.246344,3.008327,0.907022,9.821168,-8.549437,2.758697,7.225406,9.777680,8.004565,-6.914579,-9.404224,-1.594512,-3.815846,1.806120,-1.144167,2.846494,8.293388,-7.142834,9.531291,3.064160,1.370791,-5.079845,-3.652715,-0.624442,-0.155783,-8.583357,1.914951,7.681722,-8.714896,7.077373,-9.510725,5.648019,-0.687191,-4.023014,-2.427185,1.998337,-1.024838,-5.702239,6.805013,2.635694,-7.556000,-6.577248,-1.286878,8.525953,8.353084,0.809605,4.983741,7.232026,-0.058644,7.101722,-9.775540,-0.253381,-8.547843,9.558774,5.900354,0.917139,-9.417941,1.844406,4.511575,-9.388634,-2.516010,-9.977189,-2.340352,2.738796,-0.429041,8.296257,2.308940,2.438822,0.511498,4.746022,4.179943,-0.048780,-6.705053,9.265071,-8.197886,-0.502576,8.665561,-6.053571,3.440268,6.332519,-3.880991,-9.174361,-9.369666,0.953204,-5.015177,9.267486,-1.765331,-7.157960,1.377710,-6.036531,7.259702,-5.681132,-8.237134,-1.216617,-7.423630,4.666642,6.980665,-7.384907,1.396348,0.601647,-1.434369,-1.440732,-1.575681,-0.497766,-0.101676,1.221437,6.659276,-3.637342,-8.993695,8.096165,-3.468340,2.168723,-8.513322,-9.057340,6.142859,-7.039749,-9.137611,-0.156213,7.103522,-6.606300,-5.333046,4.949463,-7.701140,4.565293,-7.128486,5.493813,6.427624,-5.196560,6.227766,2.589399,-0.971236,-5.287073,-8.227222,7.286157,9.636016,4.485913,6.384892,-2.495936,0.297034,-5.969521,-0.781090,-8.502736,-0.711202,-2.239404,1.277670,3.581567,9.767052,-7.146824,-0.589827,0.965990,-6.860922,8.380334,6.700993,3.699272,7.879549,-9.330497,4.965149,9.464773,-9.074530,7.626590,-0.985625,4.644914,7.965843,4.146248,-5.540378,3.099464,-0.610245,-2.909569,-0.903790,-2.895177,-7.304364,-3.677330,3.173805,0.844239,0.893407,-7.184389,0.659713,0.357905,9.499858,8.315690,5.129724,-1.746543,7.738298,0.323408,-1.691675,-8.027500,-6.281763,8.826068,-3.664830,0.504871,2.784071,5.145454,-5.720224,1.716510,-1.277384,9.571126,-1.981825,6.618314,-6.755397,8.597783,-6.899899,2.549268,-6.925812,-3.191218,-1.733490,-6.713701,2.498627,-4.734810,-2.785858,-3.268504,-8.866308,-8.031147,8.565178,2.270852,-6.930097,8.146752,-1.178512,-9.557256,9.030559,0.524763,-1.664302,7.430553,-8.345104,3.894815,-4.721560,4.808083,5.394813,7.434209,8.793443,4.515554,8.121977,-5.934957,1.262547,7.170268,5.167792,-9.559519,-7.338724,-5.307545,-2.755110,-2.893565,4.337848,8.845583,4.944697,3.039170,1.356051,9.180602,3.371962,-2.810921,-1.793623,8.292101,5.879481,1.827039,-5.665963,-5.304428,-5.688515,1.204902,-5.790972,-2.044844,1.597364,-6.917790,-3.271335,3.288170,9.193860,5.288692,2.262867,3.020950,-6.278209,9.370227,-2.742428,0.732420,-5.133770,-9.491883,-4.220817,-8.295156,5.598686,-6.996966,-1.609572,8.249914,-0.677197,9.002991,-4.940733,-7.974911,-2.020985,9.666629,6.914451,2.335721,9.899402,-0.497391,-3.552965,6.472011,8.826976,-8.809702,1.311965,8.815944,-5.694127,-5.741096,1.114233,9.823573,-2.088188,8.922511,-8.109764,4.673090,-9.702663,6.002884,-4.753004,-6.389161,-0.712150,-7.651765,4.357236,4.467251,-3.780143,-7.938554,-0.255621,9.338411,-1.809182,-8.011610,0.567760,-5.348103,5.777951,2.376194,-9.238779,1.328722,-0.154741,-1.850170,6.188799,5.186778,8.235903,-7.220218,6.887954,-9.110146,-9.411983,-6.826814,-0.321606,8.496652,-4.860945,-0.478502,8.507744,-7.001571,9.320027,3.490603,-9.806278,-1.528114,-2.085241,-9.333889,2.720268,5.403656,9.452406,2.090644,-7.090178,-8.463954,3.003423,0.547520,-3.318074,-2.726093,-3.384539,8.950253,-7.752801,5.347629,-8.875942,9.441620,-1.593101,8.619940,-7.712291,-0.455528,5.971243,-7.124642,4.886644,1.030099,8.071438,8.956179,9.750471,-2.724513,-5.008393,-2.528505,4.548362,-2.725127,-6.164659,-4.327942,3.366539,7.839865,4.216208,1.922961,7.192663,-7.110877,1.211077,1.542089,-6.080172,-7.293792,6.311841,7.366328,-4.977013,-0.287257,1.010435,-2.606751,0.520563,-5.415254,5.205488,7.334450,-7.806742,8.774737,7.904252,9.293628,-7.866537,0.901316,-9.357471,1.963708,-5.723511,-4.368280,-0.973579,-2.797782,-2.898736,-1.177411,2.453648,3.338421,3.849000,4.421924,8.943814,3.783792,-2.883340,5.150506,9.770398,-1.727546,-6.001568,-7.172366,2.336939,9.247210,6.659790,3.366347,6.057362,-4.346540,6.945517,-9.163824,-1.805122,-5.185174,-7.268402,-8.934380,-5.552291,7.423420,1.379137,4.402316,6.131665,-5.167914,-4.107407,6.100100,-9.787041,0.350682,9.297488,-1.568112,7.232111,-5.020027,-2.893180,5.480616,8.490321,-6.585602,-3.677717,8.931448,-5.413413,-1.298172,6.306430,-1.933260,-2.718298,2.352377,6.871377,2.635693,5.853339,-6.848697,-4.130061,-4.102035,3.499188,-1.480495,1.695964,6.465686,-5.110368,-6.113287,1.015425,1.082706,-5.052321,9.889149,2.031923,-9.420051,-8.715478,-4.543359,5.090880,9.706358,6.339509,-0.700539,7.805305,-7.997202,-3.414572,-7.411013,-7.490362,2.621006,-7.344140,-7.019027,6.939627,-7.698136,-3.737081,7.580329,-3.517986,-5.674008,-3.777049,-0.591889,-7.529551,0.531551,2.800584,-8.754578,-2.538966,2.849095,-4.815681,-9.020376,-3.425614,3.540369,1.569630,-2.398232,0.752770,-5.430278,-3.529483,-0.105757,9.249162,5.348849,5.916141,-4.354084,7.838843,-8.376327,-1.841915,9.683481,-1.345004,5.419872,5.063673,1.970596,-1.365286,0.883589,-9.517010,7.759092,8.944071,-4.663289,-2.390577,-7.210388,-6.489149,7.305185,6.329862,-5.044926,4.385138,-9.717320,0.371890,-2.649791,6.084486,-4.323708,4.993876,0.840125,-3.718837,9.074179,5.348471,-9.508057,-6.767146,-2.484030,6.105016,0.359282,-6.377580,8.147337,1.255836,8.263219,4.550877,-3.915579,9.500223,-9.824424,-1.616857,-3.440127,8.060780,8.528563,-9.632166,-5.927614,-2.210338,-6.004829,7.052179,3.544829,9.319003,0.106614,-9.023042,6.039004,3.677293,-5.262991,6.530521,5.640116,4.575171,9.192622,-8.503269,2.551512,1.844381,1.026214,-2.185099,-2.149455,5.105284,-7.912907,9.042810,9.619042,8.922492,-0.853927,-6.976796,-3.796466,7.540120,0.133755,0.457095,-9.359884,7.431684,8.456502,-9.165622,6.697678,7.887573,-5.891333,-7.101523,7.054281,4.007395,-8.294484,-7.953855,5.165445,-2.644953,5.315813,-3.120538,9.625054,-7.428016,9.708138,-4.568846,-0.780366,-1.334647,-8.967873,9.627442,0.435133,-5.218124,-3.759846,-0.748912,-5.332857,9.397584,-3.636708,3.494213,2.902413,-6.143920,1.218890,8.723854,-9.116937,-2.339503,-3.009844,-3.971450,-2.277166,-5.885367,2.076863,-0.261327,7.424336,-1.819108,2.751004,5.114824,9.248377,0.134191,-6.719228,-2.257378,3.075129,-6.265186,-8.984026,8.881575,2.366652,-5.933891,-5.342748,-5.144297,-2.128523,5.106130,-6.790186,-9.295826,-8.535070,-8.314846,-7.615294,6.466166,4.512652,-4.209259,-7.795272,-4.953023,8.012435,3.834671,-8.397120,1.605935,-2.319686,-0.332573,-1.143474,-1.203583,9.284187,9.211179,8.789243,2.732309,-4.998242,8.686549,4.593043,-1.833018,-1.750530,-0.303663,2.342961,3.583927,-3.465191,9.707185,-8.985892,8.356216,-7.827396,5.743551,1.377972,8.415889,-8.928716,-5.855679,-7.949687,-1.666182,-6.174529,6.431541,6.023020,1.014540,8.794638,-3.912123,-8.248566,5.030181,-1.520003,6.466466,0.449419,-4.205624,8.900535,5.192380,5.394646,-1.517324,-9.644998,-0.501020,-3.070319,4.696909,-4.860710,9.447960,0.573861,6.561369,1.858996,4.653904,5.261344,8.773366,-7.565975,3.261487,-5.846044,-6.893569,0.392404,-2.425765,-8.208476,0.170178,1.999907,-8.633309,0.330819,2.916133,-4.917556,9.748090,-9.648622,-5.682467,2.849854,-1.614589,9.134857,-5.011629,2.984747,-7.183929,-3.218246,-3.709450,-0.567355,-2.123367,5.877663,-6.722816,-7.932255,0.379096,-4.913141,-5.154583,0.569181,-3.296598,6.846286,-0.282223,4.464571,-5.009950,-2.305068,-3.381132,0.676365,0.044130,-1.986246,-3.491574,6.915821,3.734923,4.229849,-6.377219,-8.086874,6.701729,0.412794,7.124219,-9.606281,2.531233,-7.756369,4.839340,-5.210624,-1.354435,1.569375,-0.167381,2.377766,-7.469116,6.707451,4.160694,7.189550,9.436483,-2.179095,-9.217492,-9.416373,-1.680300,1.071226,3.425227,-8.119709,-0.866043,-0.482370,-7.275551,-6.796296,2.754650,3.960267,5.312959,3.617900,-7.432431,5.599092,3.431589,-5.132128,9.561432,6.178404,8.702882,-0.546073,7.283190,-8.082535,-7.417936,0.729395,-2.305568,5.480550,3.495105,-5.579923,-9.395968,-7.943949,-4.231954,5.069190,-3.184710,-2.525522,-1.541716,0.006432,2.578361,-4.843139,-9.643079,1.162759,-9.990802,4.691297,-3.907661,0.843320,0.770743,-1.637945,-9.791652,3.596838,-1.251099,0.533675,4.089680,7.983522,-7.201769,-0.813074,4.666346,-3.765277,-8.128057,5.133335,4.950140,-9.451944,1.077311,-1.395153,-1.494690,-9.963658,8.279536,-0.817438,9.215107,-5.841440,4.007594,-6.677846,-6.140046,-3.815262,-6.675551,6.786747,1.434534,3.187008,-7.697297,-7.761441,0.008762,-6.233847,-6.932245,1.748295,-3.629576,-7.171202,8.535721,-8.553969,8.899323,-6.735979,-0.069178,0.229876,1.458495,-0.365435,7.270335,0.508359,-3.307256,5.683149,-0.164621,-0.636541,-2.171094,-6.489691,3.445153],[-1.071353,7.513308,7.697195,-4.763493,9.864110,6.437484,-8.462289,2.341374,1.632917,7.039934,-7.165322,-1.875041,-2.424104,0.993009,-1.446875,2.098711,4.906195,0.903471,-8.772883,-1.043988,-7.166168,-5.052772,-4.239795,-9.605271,4.167537,-5.316422,7.245304,-4.233452,-4.557365,-8.280345,-7.914077,1.874244,-3.492066,-0.306170,-3.902343,3.134322,-0.527944,1.821239,4.687574,8.954889,2.782321,-1.933253,-4.105369,-5.988076,5.140665,6.568370,-2.893789,2.940595,5.363184,-0.242712,-9.206081,-2.816472,3.593577,3.449802,4.033522,1.973450,2.981349,3.454381,-6.866085,-7.875405,-4.617919,6.441610,-2.651404,-4.651573,2.233150,8.838815,-5.655832,-4.317744,-7.508198,-9.705643,-3.586256,-5.281355,9.115812,0.924781,-8.881702,7.648991,0.327616,6.658789,-1.963622,-9.071667,-5.958888,2.696807,9.531079,-5.527324,-3.980305,-0.167691,-0.942358,-3.869710,-2.990245,6.274534,3.288699,-3.374247,-7.073290,-7.081180,3.818873,-1.441916,-6.898595,-5.557734,3.291695,2.138640,6.501516,5.344922,2.125741,2.279263,4.859484,-7.800978,-6.658470,-4.581364,-8.759239,2.926427,3.954553,-6.836691,1.174010,5.032713,2.084010,-6.644071,-3.165206,7.418101,8.259176,-7.762321,7.377001,8.081549,6.479902,-3.085111,-5.119494,2.707616,4.381388,-2.087647,-5.178029,-7.293656,-7.680118,-3.106096,-0.283103,-4.610989,-3.861831,-2.472873,1.046403,1.015536,3.916296,4.570672,2.718098,9.152668,-8.865998,-2.882456,-0.797641,-8.936068,5.914799,5.845321,-7.388681,-0.253876,-7.508307,1.051184,-3.315455,-1.888864,-8.821031,-6.327269,-3.594944,7.811009,5.182671,5.036430,-9.384538,-4.308960,-1.039889,6.075245,-8.310229,-9.020634,-0.044073,-9.038481,-7.732133,5.657073,-1.480458,1.912400,8.606541,8.049424,-8.324553,-4.747981,8.099835,-6.406990,4.233895,-3.436227,6.154405,-9.548050,-2.523994,0.321740,-8.648545,-6.695707,-1.764697,5.325484,-0.427540,-0.851763,-2.760922,7.369362,1.434946,3.429086,1.677306,-3.104935,-7.634494,-2.919834,-3.451901,-2.152644,-6.894949,0.418700,-9.447771,6.582130,-5.272588,2.464520,-9.453877,-3.621199,-4.291638,-9.606113,2.267645,3.744092,-4.823327,7.255219,9.671584,3.095713,-2.906022,-2.365983,4.613567,8.999575,9.616053,-7.683004,1.974126,7.316281,3.988326,8.427221,9.806275,-5.745200,-5.959645,-2.640597,8.706221,-0.550999,-2.265834,-8.244688,-1.739131,4.561072,-8.447719,6.106017,-3.611779,-5.200057,6.200886,1.797922,-7.342664,-5.121824,2.147349,-8.359970,-6.578274,-8.842407,9.474640,-5.833720,-4.866012,3.988267,-4.899090,-8.607866,8.561978,-5.834657,-3.713003,9.937608,7.168349,6.172086,-0.578978,-1.990498,-8.683415,-4.031611,1.368870,4.430987,-7.827609,1.457308,-7.239551,-8.732045,-4.592463,-2.880195,-9.639289,3.974689,4.912200,-7.245157,-9.236663,-2.541902,2.975144,-1.895740,1.373719,-0.597043,-8.873976,-5.846178,6.991613,-9.340694,1.084238,-2.136718,7.046873,-6.061293,-2.754858,-8.596958,0.723829,-7.114565,0.547130,8.236674,-7.690223,0.264945,6.416019,5.243573,-6.869910,-1.883481,-4.780185,8.826532,-6.218757,-7.268056,-2.778263,9.636881,1.431784,-9.879649,-5.644542,-0.081091,2.703978,3.066693,1.467348,5.048099,0.648876,-8.645229,-4.829599,7.822032,3.694741,8.198619,-5.059673,6.104096,-0.409288,7.910336,2.096857,-4.637564,1.423868,-1.077407,-9.902813,-0.171875,7.277138,-3.411718,-7.365845,4.941354,7.354851,2.026848,1.342600,-1.730205,-2.998673,1.285537,9.424652,-1.981087,5.666923,4.617190,-4.342247,6.718145,-5.680174,4.962300,6.124914,-1.445850,5.500929,9.226280,-2.447033,1.272613,5.184394,1.023349,-6.424158,8.080714,-6.339140,5.476611,-1.965461,-0.740327,-9.807538,5.137840,-4.489867,4.862571,3.093923,7.262114,-7.666767,-8.814876,5.843360,-5.340234,5.771189,3.826499,-8.297257,-6.855246,-5.048383,-5.533245,-8.805201,-1.605706,4.967862,-3.980059,-6.604933,3.902005,-4.655953,-2.416100,2.495572,4.492277,-4.683453,-1.023894,-1.157328,6.819499,8.891648,0.705066,0.119873,5.939638,3.358891,2.608115,8.750762,-2.346992,-9.246702,8.297418,5.009274,-6.213545,9.594934,2.932130,5.710037,-0.346303,-6.959553,-1.670101,-0.933867,-5.648934,-9.850689,8.285859,-8.332217,4.138539,6.275590,-1.914996,-1.156776,-0.426189,5.285786,4.086407,7.547525,-9.615434,1.659321,2.837331,-4.776307,-2.745080,-6.747584,-8.116585,0.116614,4.472682,-1.871046,-5.030940,4.272328,-6.753807,-8.013444,7.945307,-7.750270,7.596100,2.880149,1.092650,-5.448350,-3.888532,9.586429,-8.454387,-5.032431,4.090627,5.123691,8.022830,7.668361,-0.291403,5.182361,6.040934,0.050264,-9.313917,8.404276,-1.074388,4.379405,-5.032538,7.606071,9.497185,5.354785,-5.955411,-3.036035,5.647722,5.151225,7.013815,6.018267,-7.477412,2.398461,4.890963,-8.800698,7.589675,-9.941535,2.314818,-8.442064,-4.208089,6.591193,-0.618597,-4.027964,0.067272,5.891710,1.583191,5.645444,9.276829,-5.274886,-5.659116,-7.026279,-5.579424,9.169601,-9.597087,-1.755473,0.957382,1.861955,-7.786600,9.861960,-1.880795,-2.956700,-7.199962,5.672447,9.476664,-7.769116,1.499856,4.547352,-1.592038,8.174685,-6.792884,0.516583,2.318155,1.830982,-7.060338,-4.354025,-9.829717,-5.458575,-3.502568,-9.733287,6.390519,9.459639,-6.516684,-7.119324,-2.218694,0.707877,-4.720916,-0.973855,-0.343024,7.531210,3.470560,1.231250,-5.762925,-8.618364,9.258468,-9.976828,0.455795,7.252433,-8.945064,-8.026377,2.327666,1.833271,-8.993087,-8.585021,-6.279134,-1.064113,6.009978,9.401158,9.002370,-0.112385,-8.684703,-5.783565,1.793836,9.885230,4.632340,-0.105409,-2.872936,-4.497734,7.480864,0.626087,-5.173309,6.393434,4.998647,-6.859248,-3.341187,3.195157,3.792004,3.814176,-2.742557,1.458143,-3.107196,-6.201046,1.673493,-6.083397,7.911477,-0.306511,4.543496,9.731888,-7.168575,2.397446,7.594509,-7.018151,-3.767023,5.997986,-1.684158,3.064851,-2.705775,7.329118,-5.650947,-1.589619,5.523186,-1.261482,6.384069,8.823366,1.595513,-0.969342,-2.741416,3.767339,-2.185455,2.926759,8.833840,-8.298565,-9.307168,-7.512189,8.554756,2.229491,0.742894,1.754812,7.142378,0.070427,5.556758,3.583104,-5.945559,2.067709,5.924734,7.093491,0.534177,-8.362751,-1.182831,-1.639746,-2.132597,-2.900453,5.303225,-0.588171,5.532413,3.125773,5.234512,-9.729381,-3.554395,6.187347,-7.615708,-9.997488,-1.586334,9.153142,8.011733,-9.603965,6.229636,-9.305773,-6.742915,-2.978324,-8.095209,-3.114007,-3.672985,8.285840,-7.383623,1.206114,3.672496,-1.648686,-8.038898,-5.674881,-4.918732,6.974398,-5.731551,-7.241826,-5.804805,-3.131371,6.643030,1.413610,3.751588,-7.957171,7.647637,-3.605704,5.156019,-1.083450,-2.780386,-6.576824,9.735275,1.303960,7.397487,-6.089607,-7.263601,-3.757488,3.958301,8.570222,-7.034477,2.174581,0.025284,-4.271100,-4.724665,0.188991,-0.300877,3.853856,1.190622,9.251294,3.466223,3.087908,-0.917347,5.784550,6.665803,-0.036808,-7.371951,6.577240,0.492139,-1.896626,-8.373189,-8.677605,7.639372,-1.780204,-8.663027,2.533454,6.544012,8.355333,-6.084902,4.922718,-7.079817,4.443589,0.358201,-3.758324,0.058146,3.651253,-9.747248,-4.858938,6.038167,1.768397,-9.613816,6.598224,9.526012,5.005561,6.255288,4.717444,-2.770368,-4.933056,5.484885,-7.783724,-7.336429,-4.959888,2.050253,-7.771325,4.662507,8.861498,7.203297,5.374452,0.963919,-0.041933,3.740310,-4.685165,8.430135,-2.411891,-2.203859,8.569550,-3.611286,4.410610,-5.626594,-9.991678,2.765084,8.987728,7.253034,8.823312,7.870220,3.785620,8.898555,-8.884533,5.764985,1.331155,0.171640,-8.751120,-1.501326,2.756319,5.349113,-7.379674,3.835154,5.638785,-6.167318,-2.147203,6.210002,4.138606,7.914649,6.652760,-3.736172,-4.711401,7.168271,7.131462,3.267564,-8.244856,-1.512235,7.990697,-7.102020,-4.076851,-1.291669,-6.431454,6.573963,-1.867174,8.126487,4.307594,7.399464,3.030804,-7.163346,-6.020738,2.652258,-8.679829,-5.519866,-9.309846,5.550712,9.439976,3.020161,7.335134,7.774182,5.339207,7.303790,-4.563348,5.443869,7.426683,-9.310221,5.306090,-0.121765,-2.184134,9.768406,4.185094,2.802171,-3.485685,-4.763230,7.657868,-8.087765,-1.696441,6.846706,-4.122319,-4.502607,-1.701065,7.830129,-8.849105,-5.959079,-0.036968,0.680622,-4.319487,2.958946,7.413758,-8.301010,4.528915,-6.680831,-7.294296,3.788757,-0.721358,-7.160492,-7.936192,-2.263180,5.563198,3.139568,-6.924054,2.777215,-6.433874,-2.298570,-0.612741,-3.290458,9.582879,2.324074,2.782278,-7.510127,-0.264045,-8.142334,-3.320461,0.537747,1.795650,-3.920989,-1.461666,-4.669640,-3.758065,-1.720875,7.406808,-0.495730,5.073732,-7.284623,-4.983785,-4.491858,4.950349,-3.992702,6.371028,8.210292,-1.867445,1.357748,4.951606,8.838798,-8.945841,-2.527709,2.392214,-7.184669,-3.459393,5.015620,5.719943,6.861009,-5.526271,-1.507473,-3.465214,3.602562,5.508866,5.075112,-2.726960,-4.313077,-6.775473,6.959173,-7.099238,7.140942,-9.447089,4.416922,-6.934045,6.078493,-8.881450,4.138302,3.289568,-7.406458,6.236430,-2.316883,-2.311074,-7.088333,8.690313,-2.488656,7.810177,3.343135,-0.139805,8.213363,4.696568,-7.556918,-1.157503,-6.248852,-1.420953,8.914165,-7.913306,4.592767,-4.791649,-7.941812,9.666997,4.345600,-8.881373,2.795872,-2.465732,3.412773,1.142522,4.820508,7.722186,7.113633,-4.624416,3.320916,-7.949549,-3.401354,-2.767793,1.540425,4.927362,-8.884417,4.761270,7.462450,-6.721056,3.254465,-4.042557,-7.178946,4.284026,2.994877,-1.905844,-6.696708,1.186754,3.671975,7.777331,-6.965078,-3.169088,-4.802014,-6.416559,6.098244,1.702904,-6.354517,4.836548,7.219581,-3.715147,9.100892,-8.312158,-0.255062,-8.426043,4.331413,-6.202885,-7.735677,0.436064,-9.176301,-8.246983,-4.955786,-3.064034,4.338230,1.996072,-9.167004,7.554366,-6.785133,-3.364861,-7.565635,6.306475,-4.117797]], dtype = "float32")#candidate|2010|(3, 980)|const|float32
bop_2011 = relay.less_equal(call_2004.astype('bool'), relay.reshape(const_2010.astype('bool'), relay.shape_of(call_2004))) # shape=(3, 980)
bop_2014 = relay.less_equal(call_2005.astype('bool'), relay.reshape(const_2010.astype('bool'), relay.shape_of(call_2005))) # shape=(3, 980)
func_1351_call = mod.get_global_var('func_1351')
func_1352_call = mutated_mod.get_global_var('func_1352')
call_2015 = func_1351_call()
call_2016 = func_1351_call()
output = relay.Tuple([bop_2011,call_2015,])
output2 = relay.Tuple([bop_2014,call_2016,])
func_2017 = relay.Function([], output)
mod['func_2017'] = func_2017
mod = relay.transform.InferType()(mod)
output = func_2017()
func_2018 = relay.Function([], output)
mutated_mod['func_2018'] = func_2018
mutated_mod = relay.transform.InferType()(mutated_mod)
func_721_call = mod.get_global_var('func_721')
func_722_call = mutated_mod.get_global_var('func_722')
call_2137 = relay.TupleGetItem(func_721_call(), 3)
call_2138 = relay.TupleGetItem(func_722_call(), 3)
var_2143 = relay.var("var_2143", dtype = "float64", shape = (70,))#candidate|2143|(70,)|var|float64
bop_2144 = relay.multiply(call_2137.astype('float32'), relay.reshape(var_2143.astype('float32'), relay.shape_of(call_2137))) # shape=(70,)
bop_2147 = relay.multiply(call_2138.astype('float32'), relay.reshape(var_2143.astype('float32'), relay.shape_of(call_2138))) # shape=(70,)
func_1521_call = mod.get_global_var('func_1521')
func_1524_call = mutated_mod.get_global_var('func_1524')
var_2159 = relay.var("var_2159", dtype = "float32", shape = (26, 1))#candidate|2159|(26, 1)|var|float32
call_2158 = relay.TupleGetItem(func_1521_call(relay.reshape(var_2159.astype('float32'), [13, 2, 1])), 0)
call_2160 = relay.TupleGetItem(func_1524_call(relay.reshape(var_2159.astype('float32'), [13, 2, 1])), 0)
output = relay.Tuple([bop_2144,call_2158,var_2159,])
output2 = relay.Tuple([bop_2147,call_2160,var_2159,])
func_2161 = relay.Function([var_2143,var_2159,], output)
mod['func_2161'] = func_2161
mod = relay.transform.InferType()(mod)
var_2162 = relay.var("var_2162", dtype = "float64", shape = (70,))#candidate|2162|(70,)|var|float64
var_2163 = relay.var("var_2163", dtype = "float32", shape = (26, 1))#candidate|2163|(26, 1)|var|float32
output = func_2161(var_2162,var_2163,)
func_2164 = relay.Function([var_2162,var_2163,], output)
mutated_mod['func_2164'] = func_2164
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2197 = relay.const([[-7.478156,-6.707416,-7.869182,6.241535,-4.281111,5.849522,8.641055,-9.019906,1.904012,5.114722,1.458002,-5.885111,-5.521729],[-8.719685,-6.084172,-2.453063,-0.980325,0.531038,-7.363733,8.587123,-7.552794,-2.257606,-3.444441,8.420163,6.587088,-6.195752],[4.356270,-9.475209,-1.734984,7.470427,-0.312982,8.203474,-3.441417,9.028357,0.163549,6.466547,3.682055,3.053902,9.162761],[2.889954,-9.157511,5.506294,-0.937006,5.967209,-6.129786,-8.000706,-2.507841,1.722797,-1.326234,3.823485,2.750084,2.060273],[-9.094918,6.738193,-4.990544,4.515478,-4.995717,-0.897936,-5.653508,9.989073,-8.793648,8.343038,7.473262,3.451360,2.194971]], dtype = "float32")#candidate|2197|(5, 13)|const|float32
uop_2198 = relay.asin(const_2197.astype('float32')) # shape=(5, 13)
func_828_call = mod.get_global_var('func_828')
func_832_call = mutated_mod.get_global_var('func_832')
var_2210 = relay.var("var_2210", dtype = "float64", shape = (14, 78))#candidate|2210|(14, 78)|var|float64
call_2209 = relay.TupleGetItem(func_828_call(relay.reshape(var_2210.astype('float64'), [1092,]), relay.reshape(var_2210.astype('float32'), [14, 13, 6]), ), 3)
call_2211 = relay.TupleGetItem(func_832_call(relay.reshape(var_2210.astype('float64'), [1092,]), relay.reshape(var_2210.astype('float32'), [14, 13, 6]), ), 3)
func_1714_call = mod.get_global_var('func_1714')
func_1718_call = mutated_mod.get_global_var('func_1718')
const_2215 = relay.const([-1.575600,-7.063007,8.554670,-7.751113,2.758153,-8.923068,1.206632,-1.900357,-3.172532,-8.882203,0.315701,6.790523,2.736596,-6.083634,7.762900,7.015431,-7.333951,5.781036,-7.745414,4.174072,7.370975,1.132327,8.539253,2.561910,-3.373253,-8.659882,-4.754882,-3.348108,3.971768,-0.690814,8.404335,-0.370522,-1.778384,6.432896,-2.501082,-8.272974,-4.785452,-8.435435,9.844367,9.496703,-5.970431,1.686085,2.841115,-4.621055,9.367631,2.328152,-4.525263,-3.244634,5.418801,-7.959879,3.461055,5.149701,-2.566557,2.735004,-6.167746,6.395897,-1.726796,1.579564,-9.769192,-4.790874,7.666086,-7.298275,6.403564,-8.949461,-7.947825,-8.838978,6.016956,7.551757,-3.869985,4.440996,0.746724,6.086985,9.339008,-2.898950,-0.607191,1.056762,-4.962598,9.002092,5.770844,1.101940,-9.625575,3.753234,4.497348,-5.405493,9.804988,-4.172847,-6.376709,-7.501010,9.943517,-8.863668,7.986744,6.447609,4.888584,7.989319,-9.074003,3.866227,0.747867,-9.187125,0.880253,-7.804046,-6.255622,-2.835006,-3.565221,-8.336094,7.403327,7.213233,4.169082,-6.961011,2.255405,8.413635,-4.248250,2.960811,5.436095,4.039218,-4.181915,6.412102,-9.569161,4.481686,-0.006706,-9.721732,-3.323251,-9.345102,-6.449850,5.124797,-9.967006,4.895164,5.535627,-1.490045,-8.363285,1.494192,0.194354,1.888078,-4.517866,-3.363696,5.526962,-7.773478,-4.316561,1.952214,-5.077754,6.310342,8.053816,0.986138,9.270471,9.106532,2.977079,-1.724798,5.492969,1.780795,-5.297155,-6.751234,-9.629898,-7.790106,3.207677,-1.342469,-8.794827,-8.060751,-7.686462,-6.204128,-9.487599,-5.450248,-1.391150,-2.456260,-0.336219,-8.835338,-2.724045,-2.805789,2.725602,6.267948,-6.288859,-2.548091,4.249330,-0.488781,9.099176,1.236278,-2.129204,4.198633,-1.644265,-4.240758,4.519157,-0.731629,9.679388,0.678501,9.791531,4.714358,-4.811481,-9.773980,2.873517,4.199799,5.180694,-8.842934,-8.479339,-0.348288,1.849871,-1.995017,3.958008,-4.770177,6.848107,-4.189651,2.239178,3.530772,3.032800,4.304744,-4.935792,3.138205,-4.263149,-3.617960,-7.191893,3.742637,1.884477,-4.677481,-0.203830,-2.192759,-2.655560,-8.104215,-6.063000,3.389779,8.069804,-0.970647,-3.525206,5.306302,0.838652,8.673614,7.362346,-0.185149,-2.679094,0.337433,6.391499,3.711613,-0.167491,8.158863,5.486956,6.133331,-2.023397,-6.254178,7.541169,3.921721,1.701121,-8.831588,7.617341,-3.276484,-7.525686,1.842067,1.596056,3.226565,-5.362737,-6.311517,-6.405775,4.473760,-2.637079,5.425557,2.568277,-8.600084,2.627130,1.076118,5.110308,2.441567,-3.421980,-0.430948,7.480256,4.074853,-7.890111,8.381026,9.807222,1.654654,-7.002632,-5.831345,4.000582,4.886294,4.914910,-4.997454,-8.663314,-6.076736,-8.224980,-7.449748,5.589127,3.237172,7.308430,-9.735409,1.556917,-8.469396,-4.435160,-7.228140,-4.298672,-7.601517,-8.184145,-0.375930,-1.961714,2.751404,3.491568,-6.384402,-0.818217,8.231554,-1.834161,-6.850886,4.003277,-8.034048,8.608257,-5.659725,-7.977830,-8.971460,4.484027,4.288024,7.246745,-4.266555,-0.194205,4.280709,-1.789395,-2.590605,-7.413897,5.068648,-9.063636,6.250550,-9.282555,4.172559,8.546741,4.226603,-9.678016,-5.707071,-4.968369,8.271575,-4.845422,1.821412,2.337036,0.834276,-5.737839,1.047082,-8.565125,6.269127,-6.943105,7.378923,-6.836689,-5.670748,6.755654,-3.923066,5.330149,-3.584636,1.724123,3.520261,-0.437633,-6.226312,0.658208,1.701591,1.094710,-8.513409,5.185381,5.315373,-9.123294,-8.015980,-2.471545,0.065412,-1.474919,7.953134,0.715746,-0.861254,-0.279217,6.606699,7.315140,5.161718,0.286313,-8.165657,-6.289887,-3.042076,-5.857042,-6.717565,2.887126,-1.815793,-3.985625,6.820223,-5.782100,3.677238,6.143125,-0.376860,0.950470,9.304644,0.017427,1.775450,7.844211,5.210028,-2.873381,-4.097273,8.907441,-4.679793,3.865256,-2.677228,4.874114,-8.429763,-7.189522,0.295462,-8.851158,-7.027403,9.018027,7.212386,9.349491,-3.646557,1.724474,6.163848,4.529286,-2.085428,-4.016568,1.577532,-4.567028,-6.583603,-9.867547,-3.712678,-7.964054,7.865082,-2.320293,-0.831910,5.379385,5.141113,2.547370,6.993590,-3.730714,9.768081,-3.474520,5.720725,-8.279417,6.290186,0.181877,-3.772223,-5.741005,7.660389,-4.471632,-6.711673,-2.107155,-3.114123,1.493457,7.128545,7.967076,-6.267581,4.802140,-8.029675,9.027476,-2.808385,5.660700,-2.614330,-8.698896,-5.290461,1.991592,-5.145039,5.760631,8.732044,3.706013,-2.761673,-0.844515,-1.833152,-6.715536,2.701270,5.655476,1.211163,-6.152871,-5.626025,9.557414,-8.538330,-1.969634,6.398901,4.279797,-3.374225,4.859373,-5.030938,4.316145,8.963287,6.391898,2.576830,-8.613835,-2.908577,-4.396987,-5.592265,9.335323,-1.054831,5.166027,1.710370,-0.181367,3.215061,1.245139,3.577441,3.987269,-4.680746,-6.764210,0.298218,-0.684395,3.119281,-3.729066,3.521060,-6.008775,6.183573,8.913946,4.819839,-3.580212,0.179041,-9.474842,-6.749590,7.072612,-3.491108,-0.996158,-8.343420,8.378777,8.272525,3.955569,-5.819262,-4.452677,-5.451318,-3.006792,-2.847715,-6.253800,-2.002547,-3.356622,-4.316056,-0.705766,2.193717,-5.201570,5.191632,-1.089952,-4.782342,3.409695,2.117787,-5.442522,3.493264,6.882586,-1.916883,3.219226,-8.353339,2.455043,3.651417,-2.101688,8.711249,5.922890,-7.244059,3.761849,1.917031,2.121156,1.646650,-0.461749,5.289869,-0.408443,-5.249053,-0.766409,9.764957,6.516131,0.621569,-1.828496,3.089548,-8.130503,4.052789,-5.812752,-1.377478,0.623823,9.097488,0.040544,-7.777313,-0.439455,9.171650,1.222035,9.206467,-3.714953,-3.778347,6.075641,-0.310633,-6.818736,8.231152,-0.593379,-6.058943,1.171374,-5.050195,-0.230484,-3.593238,0.350599,-4.434810,2.323615,0.022088,-1.657857,-2.824533,6.658373,8.083602,-8.520720,-4.919993,5.703830,-4.054845,3.416831,4.213488,7.751904,-1.447877,8.408921,-4.559328,-0.904004,-8.353593,4.795969,-4.663449,1.109016,-1.328860,1.044558,4.495722,-6.806310,6.646461,-5.717378,3.874331,6.797894,-8.791377,-6.912509,4.585242,-7.315832,-4.520283,-4.039566,3.461620,-3.262011,4.328381,-4.758173,-1.618651,-8.242508,-4.546368,-1.855775,9.506898,-2.935923,7.017265,-8.249642,0.032810,-6.450911,-9.062528,2.611940,5.494764,-7.498486,4.046163,7.897414,6.209122,4.424266,-8.962088,3.470309,4.736364,1.056202,5.181548,2.166969,-1.939290,-3.023634,-7.587259,-6.748495,3.552312,-6.473656,-6.755274,2.119791,-9.932633,3.609655,-7.334423,-7.864078,-7.064284,-1.679223,8.201050,1.422648,-7.528324,-9.868723,6.528156,-9.928129,3.901088,3.876712,-7.039861,0.326023,4.805112,3.740661,-3.668319,-0.484212,3.649324,-5.871247,-1.647493,-0.791402,6.472527,-9.468750,-7.898188,7.006499,0.379715,1.910866,5.865323,-3.834656,7.090994,1.985370,1.579690,9.960283,-2.566123,7.210037,3.878477,7.980528,7.003212,8.968514,-5.015760,5.655806,8.884333,5.090579,-5.358296,8.227202,7.648299,2.648333,-4.444777,9.515877,-4.430098,-8.289818,8.792398,-2.600718,1.640867,-0.253008,-3.539076,8.307401,-5.346258,3.437690,9.058515,-8.046762,3.053240,2.308170,-3.998260,-9.707569,-1.002616,-0.130198,6.773026,-8.152153,-2.035526,-0.572447,-5.484876,-0.680249,8.296100,9.377343,9.774738,5.436462,4.090097,-2.912247,-7.169884,-0.753109,4.871955,-8.545572,0.511929,2.804945,5.358320,5.874897,-3.370965,-7.785904,4.431865,-8.553846,5.875838,8.459716,-7.499124,9.610682,-1.822398,8.600901,-7.309731,-2.617957,-1.670672,-3.108067,-3.496765,-4.557933,1.648765,-0.156141,-8.766554,4.121061,-7.557253,4.890938,3.426699,4.069423,-1.025334,3.103921,-5.752360,8.323153,-6.169832,-9.470440,0.424690,1.540068,6.267519,1.243700,-6.698420,-8.991842,7.635096,0.433169,-9.215403,-6.763951,-3.108942,0.639873,-0.329241,3.432127,-6.831955,1.372857,-6.367396,9.878837,-5.298183,-2.915567,2.213385,1.998594,-4.404923,0.877732,-0.782558,5.312255,-0.606541,7.202859,2.222220,5.080738,4.256264,0.905652,2.172528,6.353305,0.992636,-9.492331,-3.512307,6.840090,-8.754706,0.095953,7.648476,7.055809,-1.921829,-0.431118,-5.183638,1.043054,-9.491363,6.043868,3.701964,3.003457,-5.078775,-4.375976,8.015432,0.134512,-7.526569,-3.721535,-5.584569,1.710803,8.415170,-9.407921,9.618739,8.261881,6.354890,2.777301,9.017161,7.182861,-1.231970,3.932451,-3.265155,-7.039975,3.829369,-2.249716,-6.984181,-8.819551,8.809461,8.694265,8.785948,-0.715982,-4.940612,2.775703,-6.210596,8.625188,-5.137242,-6.935470,-9.411131,-5.229895,-0.545486,7.243657,-3.763532,-5.780395,-3.409929,6.949787,-4.661142,-1.359638,5.514494,-5.559815,8.704906,1.931431,-1.543735,-2.867511,-5.681119,2.506211,0.709920,9.847797,-1.192127,6.035917,-2.698825,-2.720794,-9.476123,6.364933,6.204053,9.565195,5.432478,-3.577558,-1.828956,-4.882331,2.490348,1.469733,-9.009126,9.340340,-2.452084,-8.364191,9.883193,3.608602,7.175692,5.057888,1.067109,7.525116,6.570242,-5.597240,-4.505458,-3.338815,-6.873183,-5.340001,6.535488,-9.691664,-9.920152,-7.886532,1.734446,1.709497,-2.136608,0.686088,9.780267,-6.609225,4.580988,7.071460,-6.996665,9.035484,7.428924,7.440343,4.053458,3.219533,-5.609193,0.057464,7.671173,2.268677,-2.115850,9.290543,3.082912,-1.380395,9.803199,3.937288,-3.981054,-0.300710,-9.132297,-7.516635,7.930943,-5.902134,0.499135,-7.252852,-6.210653,-8.086369,-1.402198,4.850596,6.653729,-7.989703,8.220567,-9.486076,8.610132,8.735274,1.008408,5.710212,1.730147,-9.261988,-3.338031,-0.799718,-8.112515,0.514340,-7.086404,9.170559,-1.922323,-8.876919,8.606794,1.709075,-3.308213,-4.533519,-5.802098,-1.693283,0.221089,-5.844365,3.625072,7.552759,0.684775,3.749772,3.419417,-1.078835,-9.369878,3.266832,4.090833,-1.489777,8.513438,3.424461,3.405247,-6.749532,2.945570,-1.403206,8.614323,-5.387515,-9.659847,-0.372394,-2.215374,8.330549,-1.921419,-4.500212,-7.885617,6.997407,-4.828889,2.081441,-6.793897,-8.874170,7.863227,6.290818,-2.471623,3.784860,4.223279,-7.152126,-1.286813,-2.646203,-3.729549,9.595131,-0.326033,4.186067,6.458620,-1.805054,-7.642972,5.460514,5.538380,-9.206649,4.621029,-5.937076,9.680751,-5.715629,-8.579922,-4.891550,-9.239214,8.384708,-4.818584,9.853057,-5.832274,-3.018737,-1.578557,-4.818803,-7.867003,-9.857896,-5.437719,-9.106195,6.398206,-8.417535,9.901866,6.583823,-0.220631,-5.247254,7.729600,-0.145741,1.348167,-5.380406,6.368822,1.007095,7.958391,2.397840,-4.625942,6.183440,-8.599120,-6.115328,7.092216,4.151074,-0.698622,-5.480571,9.421625,3.977999,7.470367,1.348103,-5.265904,-2.646246,-0.238125,-3.868238,2.986465,-3.056332,9.178573,-8.384059,-6.004588,-7.900025,4.740147,-9.581494,3.262427,-0.403696,4.804052,4.407123,-6.115652,9.561853,5.252777,-1.014804,-7.001531,2.398854,7.422782,-9.764481,6.470621,-7.706859,4.666303,-9.904729,9.260335,-9.428271,-2.003932,-1.824449,1.954776,9.390938,0.973830,-7.977227,-0.586664,3.402891,9.376195,-3.540990,-5.228061,7.952341,5.318263,1.726693,-3.362601,-3.114511,3.454205,-1.941262,-0.506222,-8.686420,3.081736,8.073429,-7.292482,6.165006,-6.828104,-1.990242,-8.057339,6.576353,3.896073,-6.331979,-2.944773,-3.846262,-5.193514,-4.991940,-8.118748,-4.851276,0.758917,-8.099546,5.226067,1.433641,8.335187,-5.459877,-1.689145,2.569628,-3.085929,4.743022,-5.309516,3.238632,-7.538512,-9.181178,-9.867084,-9.391332,-6.423812,0.906611,-6.229555,-1.818861,-9.858363,-2.393817,-9.136584,8.754861,3.089447,5.541879,-3.651821,-7.689606,-1.278496,-3.285498,-2.008452,8.586733,0.038801,-7.729013,7.929680,8.364039,8.948315,-5.327617,5.654850,6.522424,6.818678,6.754901,7.449977,-7.083087,-4.618426,-2.420642,-5.636330,8.947066,-0.881813,8.906899,-5.746586,7.479121,-4.259227,3.401746,8.671390,9.327732,7.552986,4.726652,-2.851627,6.822982,-1.661620,3.523243,6.633584,-5.517661,-8.111164,3.343346,-7.162925,2.918795,0.317730,-2.978027,0.436996,1.501358,-3.399133,1.561014,-3.779722,1.551268,-6.434661,1.170013,-7.969171,7.440852,-3.687637,5.346255,6.148682,4.125536,-4.301376,-0.458915,3.145868,-8.683012,-5.776728,1.472520,-4.643326,8.211233,6.165756,-3.967441,-6.298727,6.074301,1.747725,6.262788,2.950256,0.340154,-8.109898,8.866208,3.276341,-8.796948,5.441588,-4.120198,-8.118236,-9.746810,5.598410,8.204850,-6.331751,-0.158452,-9.199557,-8.152539,-1.098357,7.188603,0.678827,1.763269,-4.051797,-3.418439,5.392762,-2.979957,-4.273296,5.332292,3.671942,5.564396,8.106135,0.084549,1.474314,1.845887,0.056917,0.687551,2.698637,8.676218,-5.876452,0.266814,0.671375,4.806726,-9.106672,9.672067,-2.032426,8.429797,-8.892116,7.045622,2.056063,9.856576,3.571496,1.448002,1.288459,-0.283169,9.226806,0.541973,4.309718,-0.604801,-1.056180,-9.859480,5.905107,-2.441696,-5.791984,3.513685,9.394234,8.031889,8.160532,7.183116,6.356731,-2.885703,-1.156590,6.705289,5.861864,5.833233,1.154072,-0.867074,-6.821712,-9.163626,-2.535168,-7.953306,2.102121,-4.404738,-3.996492,7.018810,6.702032,-0.454562,-8.965935,-8.920706,-0.930283,5.676458,0.808403,-7.292677,-3.430213,-1.974173,-2.893287,-3.121592,-0.630606,2.507484,0.731202,6.307528,-1.532631,-7.592210,1.583187,-6.825891,-0.075931,-2.462140,5.159993,0.677182,0.823628,-9.332639,-2.686401,7.284005,4.766136,-2.221137,-7.311479,-9.432930,8.823634,5.809604,0.244505,-7.206195,2.480650,1.850924,2.117679,-1.101948,-5.916180,5.806590,-9.566819,-8.558274,9.744758,-2.479946,-3.891414,-4.188769,0.126576,-6.376570,-1.277912,-6.462286,6.170734,-0.584038,0.417237,-9.552145,-0.224220,-2.165616,-5.366255,-1.573466,8.751631,3.230644,9.967060,-2.673048,6.197077,8.840918,2.280961,1.942060,8.852826,-5.229421,6.600192,5.011076,-4.633904,-2.649261,-5.353455,-6.101327,4.525346,3.235628,9.114036,7.997468,-3.478187,-8.528538,-6.273115,2.004277,-7.444315,-1.203137,-5.911405,6.115192,-6.838880,2.647973,-1.518896,-1.653831,-2.293242,6.488254,9.211097,-4.348021,8.995836,-6.567438,5.118823,-6.069902,5.801136,5.786101,-7.370196,-8.772482,-1.277073,3.360730,0.924828,-8.737883,8.247173,1.067716,-7.095083,-6.178767,0.086186,1.035449,-6.008372,-8.371284,3.910162,7.589011,-2.520793,-0.714269,-6.430971,0.301105,6.641396,7.376803,8.861831,-4.765439,-0.605381,-6.855124,2.601442,-3.035246,6.240916,0.739427,-3.872633,-4.425675,-3.222228,1.333712,-0.880915,-8.474160,-1.255913,-4.902350,-8.264110,2.550348,3.505726,-8.188790,-0.639984,4.516326,0.017977,-8.787132,0.862795,-7.260233,5.505892,-0.214148,1.814476,8.376731,-1.882044,9.174264,-9.542379,-1.628868,-3.673344,-7.659875,3.909541,-3.607380,-7.762561,9.693889,6.611398,5.920068,1.941350,-8.089957,-5.294733,5.597932,4.257576,-3.086636,0.232614,-1.764446,8.378402,-8.033547,-4.859228,-0.979500,5.051652,-2.681964,3.700875,5.877456,-7.836032,6.568740,-4.421630,3.752244,-4.507569,7.356180,-8.472791,8.903215,4.892824,4.044644,8.160400,-6.490979,3.836058,0.262588,5.518599,2.084562,0.415608,-7.011405,5.620531,8.592860,4.305246,-6.458670,-2.280436,-8.768532,7.143190,4.821974,1.556444,-2.292401,3.372252,3.509204,-7.356112,-0.273471,-2.453591,6.504922,-6.916360,7.041350,-5.169677,-4.258928,6.483648,-0.812102,-3.977385,4.125875,4.391137,-8.529605,-2.117296,1.293473,-2.891479,-3.881940,5.369960,0.197001,-6.216766,6.054106,-7.296949,-6.348532,-1.881449,-5.124752,-9.899740,-9.600399,0.845128,-8.053748,3.216687,7.832956,4.038604,-6.207666,7.300208,5.578161,-8.123996,-8.646747,-8.409789,-8.938207,3.228477,7.316280,9.792398,-8.503055,-9.813813,-6.613955,-0.426880,6.432337,6.607010,-4.346476,3.220737,-3.239117,6.402265,-9.088960,8.646902,-4.558613,-0.901074,3.748558,-0.872358,-7.038610,-9.404963,-2.874983,-2.897841,9.879659,6.716226,9.459405,4.350518,-0.873931,-7.098016,-9.630855,1.744958,6.365955,-0.183866,4.648557,-7.985645,8.615856,-3.720324,0.283822,0.324635,-7.788749,4.426254,-3.924722,-4.569245,8.117933,5.277774,-4.899199,-4.586011,-7.188326,-9.600191,2.862591,-9.695361,-7.258127,-5.270540,9.912205,-0.492928,-5.327940,1.460141,-7.314666,9.003025,2.642284,2.411905,-8.542668,0.788223,-3.803389,-4.257574,-4.053885,-7.450807,-9.829931,-6.250719,-6.385746,4.929129,-1.602699,5.393423,-7.351708,-5.603314,-3.672394,-3.496250,-6.008044,8.380132,3.470596,-2.240622,-0.376565,-8.667062,-9.976108,4.151718,5.700262,8.927696,9.726157,-1.096018,-5.294828,8.325108,-7.167515,8.966920,0.913104,9.703954,-2.364164,-9.274868,-1.007338,6.756436,-1.555823,-7.452561,-8.877496,3.250289,-5.790338,2.881948,2.571559,4.133351,-9.965368,-1.049410,-2.651612,8.220055,4.280387,9.264766,-5.264797,-7.279886,7.023459,0.461465,7.076872,-8.562344,-2.254668,-2.197377,-7.899872,-9.025573,-5.666824,5.702717,-1.663990,4.630465,-9.565775,-7.570303,-6.866769,2.227964,7.411190,9.535405,-3.513101,-9.658446,6.270422,-1.494933,5.713674,7.192762,1.111892,-7.282591,4.136702,3.659551,-8.597888,-6.378292,5.707932,5.159966,-8.416786,3.951774,-9.999684,-7.972598,-3.735829,7.548801,3.839764,5.702419,7.338788,-6.689220,5.467116,3.242808,3.948670,-3.248691,1.239787,7.652301,-7.705986,-4.136868,6.993082,6.732252,7.817044,3.352559,6.765747,1.895582,-5.934401,1.200674,-3.178402,3.192365,-7.085670,-6.996172,2.367259,-4.294584,-5.543726,-5.375964,9.455612,6.811429,9.334376,3.275909,4.961904,9.987715,-6.374345,4.095873,2.221387,9.268917,0.206768,-2.777321,4.681966,-8.018311,9.617000,4.676484,-4.329950,-5.095754,4.001480,-8.326405,-0.767454,-6.204070,-8.622657,0.131377,4.543072,-0.995629,-3.038456,1.459212,6.008708,6.108835,6.955496,7.548534,7.760054,4.885228,4.009730,9.688886,9.569592,-5.877356,-4.885136,-9.472552,-6.788797,-1.811550,9.195676,5.977535,1.029964,0.160110,1.956034,8.829221,-6.479694,-6.089991,-7.114408,-7.907279,7.396550,-6.808286,-7.530379,7.839026,8.175669,-2.189935,-5.125740,9.976870,-6.412124,-9.941818,9.205565,7.879455,-9.705937,9.844033,6.718853,-7.297940,-0.307394,-6.457241], dtype = "float64")#candidate|2215|(1800,)|const|float64
call_2214 = relay.TupleGetItem(func_1714_call(relay.reshape(const_2215.astype('float64'), [10, 15, 12]), relay.reshape(const_2215.astype('float64'), [10, 15, 12]), ), 0)
call_2216 = relay.TupleGetItem(func_1718_call(relay.reshape(const_2215.astype('float64'), [10, 15, 12]), relay.reshape(const_2215.astype('float64'), [10, 15, 12]), ), 0)
const_2225 = relay.const([[5.171728,6.939406,-6.570477,8.084089,1.807533,2.208141,9.283157,-4.795706,-6.322692,-8.776788,-1.297555,8.590381,-6.408542,6.936535,-7.906982,7.003252,6.842268,6.126421,1.735639,5.938365,8.720227,-5.031906,-4.434767,5.277167,-6.924197,-3.736852,-0.038828,8.530991,6.004567,-4.476697,5.346915,3.730028,3.822918,-0.983690,-6.817712,7.570712,-7.573269,-4.573760,-5.339216,-6.830027,0.141926,1.524577,-6.792974,-6.230094,4.703963,5.181624,0.478396,9.342806,2.260379,4.681042,4.341690,3.830673,-8.283261,9.796472,-8.154337,9.087594,-7.686106,4.027899,3.798656,3.735034,7.425972,8.362909,9.698270,2.410580,5.022547,-4.805509,3.818073,-3.259166,1.704260,-4.047210,6.619248,-0.441271,-2.994703,-6.022067,3.477850,-6.817407,1.618366,7.165650],[6.565850,3.650785,2.961967,3.863374,-2.604057,-9.920964,9.721205,8.421754,-0.370563,6.690022,3.040031,-0.546234,2.174004,9.763873,0.205162,4.547718,1.932537,0.665890,3.795407,7.777731,-1.564780,1.779412,-0.988874,1.514952,-1.747865,6.522196,-7.116595,6.751813,5.300255,-7.970497,9.329747,9.245815,7.504786,-9.312208,8.222849,-6.574862,3.814577,-2.264986,-9.662227,4.307962,-4.665310,-8.209087,-3.336272,-6.311746,7.825760,-8.998701,-6.809826,0.252280,-2.478946,-3.483884,-3.180503,-0.019015,2.192959,4.392690,-9.559457,-9.135896,-8.116962,3.136775,-9.318897,-4.040711,2.233730,8.347810,-7.681823,0.727232,-7.706693,-4.663469,-8.450348,-6.699780,6.902333,5.788412,-3.302454,-8.942811,-8.255739,-6.542193,9.577572,-9.014906,5.026851,3.086145],[7.702450,4.641163,-0.525767,-3.610169,-5.466249,-2.097186,-1.909381,0.483962,-6.371884,1.194497,4.795981,5.075206,-9.745578,4.017919,9.366087,8.888267,3.770256,-0.968090,0.889540,-0.062188,-9.989968,5.999191,-9.496419,1.686603,6.339325,-5.330284,-8.659074,0.897035,4.809306,2.529326,5.132585,6.873058,4.698735,6.868375,-6.244858,-0.362454,-0.235628,-6.207018,-6.299815,1.156780,-9.210112,-7.205374,-0.898406,-6.271706,0.339398,-0.947223,-2.319841,5.592634,-1.367336,-0.042387,9.761383,3.155808,8.727997,-0.985894,8.352250,1.385556,2.457518,7.695184,0.326899,-4.558924,5.093504,-0.070173,-5.802101,8.413684,-9.626062,-0.015515,-9.843938,6.689673,4.613892,8.109011,-0.864258,-1.757143,-3.610499,9.494331,6.118130,-0.304400,-1.152392,6.630535],[1.831421,7.321267,-4.846668,4.238372,3.719312,-4.981858,-5.102303,-4.445624,-9.807647,0.165893,-5.994830,7.279583,-7.698846,-5.226035,-1.520427,2.218081,-6.187033,5.638051,-7.318137,7.154100,9.150103,-7.515873,9.750772,-8.130324,-6.755564,-3.796966,-0.563965,-1.968905,-5.652228,-8.289983,-8.776056,-4.527239,-6.217890,-3.385057,-0.115450,5.819003,6.145006,0.344369,-2.909320,2.314115,8.428498,2.256800,7.465366,-6.085083,-9.442907,-4.388561,4.895631,9.453551,-4.866918,-8.502481,8.099493,-7.715557,-3.072990,5.569559,-2.064784,1.675811,-1.105868,5.273270,-5.451198,3.348764,-5.283721,-2.598252,-9.615784,-6.950371,7.129213,0.788191,-7.786424,6.721562,-6.641304,2.856122,1.875741,-9.874289,2.692398,0.662371,-9.792707,-4.861371,-7.018100,-9.652886],[-5.825429,1.003042,3.518876,-5.455139,9.509105,-6.730276,-3.317526,-6.712769,-8.993401,8.669421,-8.872937,-7.726318,-8.697771,-1.013430,8.958475,4.866848,3.581418,0.810072,-6.021470,-7.089558,8.656652,2.756389,-6.334706,-2.094838,-2.473910,-0.747057,-7.797322,5.383355,3.751242,-7.468208,-8.781770,-5.391810,-6.310395,3.816878,2.946068,-9.159088,-5.016019,-4.282723,7.487378,-8.020458,-2.191416,8.240111,5.778731,9.084336,-2.590302,6.073242,-2.111792,-3.412385,3.202974,5.257957,5.115560,9.805600,1.902578,-9.577944,-2.483905,-6.575100,7.726058,-4.229000,5.742939,5.726508,8.442736,-2.662015,-9.667791,-4.425453,-4.935588,-4.078204,-3.519383,-9.734256,5.686883,-4.396517,1.870013,-4.744221,-6.581978,7.361481,6.965747,9.744660,9.162618,-7.961227],[-6.408556,4.672596,-5.515314,-8.989245,0.688758,-1.401679,3.746879,4.435245,2.284989,5.738811,-4.913558,3.414991,5.668887,-4.564008,9.965541,-0.345724,1.950653,-3.951723,3.358135,-8.402177,4.682831,3.448228,-1.399413,3.675227,9.238002,6.777938,3.151360,3.885511,-0.092861,8.245328,-8.510558,2.981963,6.521950,8.857380,0.143530,-0.220033,-9.773507,5.403153,-5.025071,-7.757333,-3.801571,2.382303,4.527236,-8.498381,-2.245941,1.610193,-5.471225,-5.180884,-0.219485,-3.345213,-0.600254,3.314325,5.578882,7.939899,5.461960,1.460615,2.869066,-4.477666,1.531942,-6.975551,-3.565403,-1.180210,2.352154,8.838826,-6.953782,9.080095,-0.558805,1.752585,9.967297,6.873551,-9.768536,-3.317005,2.617436,-5.783252,-1.090200,-9.693086,-8.111642,1.390401],[2.860836,-0.333534,-5.568142,-5.097164,-2.944100,-4.111357,-0.338171,-3.855115,-3.194257,1.036205,4.183883,-6.245518,-7.421718,7.726764,4.203967,-1.423694,9.050361,-2.588159,-4.885331,-2.338579,-4.546055,2.667438,-5.616547,-0.644475,-0.908010,-3.042780,9.139419,8.557905,9.964894,6.648571,5.884570,6.870792,-3.320870,6.049387,9.186896,3.799969,-4.240052,-5.906112,-1.118214,-0.463213,-6.074368,7.046345,5.985077,-8.360895,5.915199,-8.027834,3.409958,6.837944,8.354117,4.141286,-2.467892,3.105067,6.692121,2.415046,-3.310895,-1.520230,-8.380132,-4.295157,2.006391,-0.476056,-6.768893,2.511768,-7.032626,8.712285,8.766787,-0.112044,4.908411,8.563783,-9.501732,2.014986,-3.175008,6.689142,2.344310,-2.702227,-7.989476,7.563888,5.098332,1.008658],[7.136593,-6.367436,3.214310,-0.063689,-3.506405,7.557942,-1.366730,2.388936,-9.064116,0.292636,-6.041666,-3.460770,-5.765509,-5.567713,6.877287,2.408070,-3.600513,4.255403,8.383022,3.387259,8.327436,-7.562002,8.005400,-1.867447,-1.331257,6.441839,-4.828666,-4.824038,9.834164,-3.288886,-9.299271,3.766208,9.369189,-3.878891,-1.484917,-2.889598,-0.166807,4.382325,-1.188669,6.887247,3.343304,-1.756928,7.377804,-8.467076,3.720943,1.424107,-8.655876,-7.245250,8.414045,-5.780352,-0.652085,-1.207762,5.724630,-0.061329,6.320374,4.989127,-5.237140,-8.581648,-3.801093,-5.454214,-3.210326,0.353534,-7.465272,-8.475595,-5.243278,0.125287,-7.548312,7.247646,2.247994,5.639989,4.282367,2.255069,-7.860294,4.547924,-7.507792,-3.245362,2.614770,-8.400574],[-3.195976,-3.508475,6.630082,6.213035,7.972864,-7.865628,2.820310,3.817044,-1.608257,-6.446487,0.168864,6.047906,-1.067553,-6.177330,3.267500,4.694008,0.676639,-5.991937,-6.221033,-5.564020,-3.109134,-0.720025,7.048310,-6.307598,1.477525,-2.189167,7.820466,-1.752740,-1.981037,9.002831,1.620356,5.617402,-9.035029,-3.109392,2.580611,-0.116578,3.607763,1.206732,4.510361,-9.241687,1.279150,7.851115,-8.285530,-0.675858,-5.493768,-9.065118,-5.087525,-4.546140,2.645349,2.388770,-1.412122,-3.029397,0.788284,-5.649840,0.995010,2.266408,3.667554,1.631331,-7.194155,-3.493401,-4.887576,0.693720,-7.940828,5.042265,-8.849501,8.625864,4.497866,-2.615759,6.336804,8.782938,0.079759,0.223915,2.479693,-7.035415,-9.298251,-8.597147,5.190820,-4.175890],[0.065554,1.292146,-7.037346,-3.018291,-3.611302,-0.721899,3.143643,-1.872794,-5.435621,-5.340611,5.937890,-2.473638,9.250851,-1.778998,-4.888635,9.350126,-4.570175,6.980527,0.492932,-8.876572,-0.461092,9.913722,-6.882137,-5.431104,-0.293384,-2.853274,1.735939,8.075469,7.496003,5.493050,-0.185672,-6.958314,7.882657,-9.999143,2.120499,-1.214557,8.215945,-9.058670,4.323358,5.590105,7.365914,1.640461,-5.087091,9.524597,-4.787257,9.268110,9.259547,-2.679245,3.011010,4.219555,2.097711,-9.723893,-4.086778,1.869618,1.568525,5.322812,-8.858403,0.991100,9.161353,1.119545,8.611577,8.144929,-0.330121,1.260296,-2.435292,-8.201445,-7.114011,-0.712094,5.260706,-2.006486,-0.298248,2.252928,7.769183,5.706456,-4.295766,-9.730258,4.725283,-7.620100],[3.173168,1.943441,2.417029,-4.148092,-3.263893,-6.979777,-1.682260,-9.509118,-5.770360,5.346178,-3.710899,-6.980659,9.063492,-1.445545,-4.437688,-5.289211,-3.653480,1.254142,-3.793200,8.953235,8.422198,-3.383719,4.283472,-2.638210,2.171350,1.608987,7.119512,-4.194604,-2.056464,2.516634,1.532424,2.022392,-6.335083,9.835535,-9.455468,7.790497,-9.757061,7.227229,1.949767,3.442995,0.128098,-6.434140,5.800376,-3.228988,-6.049429,-3.437698,6.270958,7.257608,1.903431,-5.408316,-4.227505,7.816018,-4.934901,-1.101118,-9.470989,-0.632972,-5.036413,-4.629579,9.187935,1.264827,3.286543,4.621221,1.960898,-5.467917,-7.729518,-3.591962,-2.806200,1.372108,-7.263366,-3.713943,-5.698164,9.890039,-8.231846,-5.557728,-5.277981,8.433438,9.358413,-8.042529],[7.336745,3.097846,-0.011742,-9.004185,0.043662,8.881563,9.574305,1.751194,-3.317974,-6.345344,-5.716130,-3.896059,3.396043,-7.317404,-0.260907,7.752139,1.690648,6.302134,5.810972,6.800451,-5.450927,-1.870960,-9.710650,0.292260,-1.356290,8.625610,-3.999826,3.261280,5.942565,-0.301703,1.352516,-8.732229,2.935909,-5.975089,1.009300,9.036260,-9.326769,-9.920475,5.555673,7.269612,5.154849,8.578849,-6.692582,5.522889,-5.091598,8.281508,-3.387267,5.415901,-8.605833,-5.783892,7.163380,2.975900,8.912190,-5.463289,5.650590,3.206449,0.799453,-1.930953,2.300523,5.272456,2.315875,6.210459,-3.503263,0.495715,-4.937700,1.786565,-6.848222,4.084200,-6.385198,-6.606611,0.816149,-8.890231,-6.530985,-3.225269,2.123437,-6.680308,3.207461,-0.815128],[-7.924719,-6.208937,9.134989,-3.823966,-5.183768,5.834512,6.821365,-0.148119,9.436227,5.463684,3.673163,-7.842366,-8.751229,7.483983,-6.431899,3.178237,-3.156419,-4.094264,3.925853,3.840677,-0.423934,-0.567713,-2.208805,0.207387,-7.661142,-7.143966,-4.081949,-4.937030,1.096383,-6.218597,3.350922,-0.710388,6.281686,8.444339,3.459599,-3.770346,9.025500,9.825379,0.681814,-7.528725,-8.982064,7.877325,6.821534,5.540340,-2.196104,-8.597775,0.467729,9.243311,5.146056,-7.061210,4.792178,1.882981,3.431922,-3.616092,5.912918,-9.472487,2.549910,-0.311112,0.447568,8.343477,-3.297338,5.770359,-5.079145,-8.700219,7.071579,-9.717648,-4.091989,-7.809196,5.816018,-8.442083,1.423772,-9.232089,9.737103,6.083650,-4.802005,-7.483867,-8.305976,-1.383204],[-6.623407,5.037648,2.326330,-3.144212,7.284250,-2.423905,1.051459,5.985648,7.164051,-6.891110,-4.815340,-3.186001,-8.136079,4.472781,-0.566516,-7.508232,7.644126,8.006973,1.635377,-6.911136,-4.411223,2.233852,3.470344,-3.085683,-4.120409,3.891417,-6.781509,4.916194,-9.724194,3.147193,2.425999,2.604694,7.117159,0.117711,-4.536446,6.020444,-5.753608,4.465583,8.350192,9.865675,-2.796891,9.938414,-1.870800,0.695996,0.143250,4.261704,-7.138753,1.773338,9.042896,4.037665,-4.354442,-1.886404,3.240916,2.784212,8.277278,0.973989,7.824539,-5.663625,7.050658,0.207990,2.543390,3.919344,1.921357,6.938118,-9.570565,1.781655,-3.389772,6.353423,9.279176,-2.540128,0.461552,-5.666411,-1.450745,-1.225270,-7.500299,7.458861,7.198817,-6.397984]], dtype = "float64")#candidate|2225|(14, 78)|const|float64
bop_2226 = relay.bitwise_and(var_2210.astype('uint64'), relay.reshape(const_2225.astype('uint64'), relay.shape_of(var_2210))) # shape=(14, 78)
output = relay.Tuple([uop_2198,call_2209,call_2214,const_2215,bop_2226,])
output2 = relay.Tuple([uop_2198,call_2211,call_2216,const_2215,bop_2226,])
func_2234 = relay.Function([var_2210,], output)
mod['func_2234'] = func_2234
mod = relay.transform.InferType()(mod)
mutated_mod['func_2234'] = func_2234
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2235 = relay.var("var_2235", dtype = "float64", shape = (14, 78))#candidate|2235|(14, 78)|var|float64
func_2234_call = mutated_mod.get_global_var('func_2234')
call_2236 = func_2234_call(var_2235)
output = call_2236
func_2237 = relay.Function([var_2235], output)
mutated_mod['func_2237'] = func_2237
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1351_call = mod.get_global_var('func_1351')
func_1352_call = mutated_mod.get_global_var('func_1352')
call_2291 = func_1351_call()
call_2292 = func_1351_call()
output = relay.Tuple([call_2291,])
output2 = relay.Tuple([call_2292,])
func_2295 = relay.Function([], output)
mod['func_2295'] = func_2295
mod = relay.transform.InferType()(mod)
output = func_2295()
func_2296 = relay.Function([], output)
mutated_mod['func_2296'] = func_2296
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1665_call = mod.get_global_var('func_1665')
func_1666_call = mutated_mod.get_global_var('func_1666')
call_2320 = func_1665_call()
call_2321 = func_1665_call()
func_484_call = mod.get_global_var('func_484')
func_487_call = mutated_mod.get_global_var('func_487')
var_2325 = relay.var("var_2325", dtype = "float64", shape = (70,))#candidate|2325|(70,)|var|float64
call_2324 = func_484_call(relay.reshape(var_2325.astype('float64'), [10, 7]))
call_2326 = func_484_call(relay.reshape(var_2325.astype('float64'), [10, 7]))
func_721_call = mod.get_global_var('func_721')
func_722_call = mutated_mod.get_global_var('func_722')
call_2331 = relay.TupleGetItem(func_721_call(), 0)
call_2332 = relay.TupleGetItem(func_722_call(), 0)
bop_2342 = relay.mod(call_2324.astype('float64'), relay.reshape(var_2325.astype('float64'), relay.shape_of(call_2324))) # shape=(10, 7)
bop_2345 = relay.mod(call_2326.astype('float64'), relay.reshape(var_2325.astype('float64'), relay.shape_of(call_2326))) # shape=(10, 7)
output = relay.Tuple([call_2320,call_2331,bop_2342,])
output2 = relay.Tuple([call_2321,call_2332,bop_2345,])
func_2359 = relay.Function([var_2325,], output)
mod['func_2359'] = func_2359
mod = relay.transform.InferType()(mod)
mutated_mod['func_2359'] = func_2359
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2360 = relay.var("var_2360", dtype = "float64", shape = (70,))#candidate|2360|(70,)|var|float64
func_2359_call = mutated_mod.get_global_var('func_2359')
call_2361 = func_2359_call(var_2360)
output = call_2361
func_2362 = relay.Function([var_2360], output)
mutated_mod['func_2362'] = func_2362
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2364 = relay.var("var_2364", dtype = "uint16", shape = ())#candidate|2364|()|var|uint16
var_2365 = relay.var("var_2365", dtype = "uint16", shape = (1, 11, 3))#candidate|2365|(1, 11, 3)|var|uint16
bop_2366 = relay.not_equal(var_2364.astype('bool'), var_2365.astype('bool')) # shape=(1, 11, 3)
output = bop_2366
output2 = bop_2366
func_2370 = relay.Function([var_2364,var_2365,], output)
mod['func_2370'] = func_2370
mod = relay.transform.InferType()(mod)
mutated_mod['func_2370'] = func_2370
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2370_call = mutated_mod.get_global_var('func_2370')
var_2372 = relay.var("var_2372", dtype = "uint16", shape = ())#candidate|2372|()|var|uint16
var_2373 = relay.var("var_2373", dtype = "uint16", shape = (1, 11, 3))#candidate|2373|(1, 11, 3)|var|uint16
call_2371 = func_2370_call(var_2372,var_2373,)
output = call_2371
func_2374 = relay.Function([var_2372,var_2373,], output)
mutated_mod['func_2374'] = func_2374
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2392 = relay.const([[[False,True,True,False,True,True,True,False,True,False,True],[True,False,True,True,False,False,True,True,True,False,True],[True,False,True,True,False,False,False,False,False,True,True],[True,True,False,False,True,True,False,True,False,True,True],[True,False,True,True,False,True,True,False,False,False,True],[True,True,True,True,False,True,True,True,False,False,False],[False,True,True,True,True,False,False,False,False,True,True],[True,True,True,False,False,True,False,False,False,False,True]],[[True,True,True,False,True,False,False,True,True,True,False],[False,False,True,True,False,False,True,False,True,False,True],[False,True,True,True,True,True,False,True,False,True,True],[False,False,False,False,False,True,True,True,False,False,False],[True,True,False,True,False,False,False,False,True,False,True],[False,False,True,True,False,False,False,True,True,False,True],[True,False,False,True,False,True,True,False,True,False,True],[False,False,True,False,False,True,False,True,True,False,True]],[[False,False,True,False,False,False,False,False,False,True,False],[False,False,False,True,True,False,True,False,True,True,False],[False,True,False,False,True,True,True,False,False,True,False],[True,True,False,False,True,False,False,True,False,False,True],[True,True,True,True,False,True,True,True,True,True,True],[True,True,False,True,False,False,True,True,False,True,True],[False,True,False,False,True,True,True,True,True,False,False],[False,True,True,True,False,False,False,False,True,True,True]],[[False,False,False,False,False,True,True,True,False,True,False],[True,False,True,False,True,False,True,True,False,True,False],[True,False,True,False,False,True,True,False,False,True,False],[False,False,False,False,True,True,False,False,True,True,False],[False,False,True,False,True,False,True,True,True,False,True],[False,False,False,True,False,False,True,True,False,False,True],[True,False,False,False,False,True,False,False,True,False,False],[True,True,True,True,False,False,False,False,False,False,True]],[[False,True,True,False,True,False,False,True,False,True,True],[False,False,True,True,False,True,True,False,True,False,True],[True,True,True,True,False,False,True,False,True,True,False],[False,True,True,False,False,False,False,True,True,True,True],[False,False,True,False,True,False,True,True,True,False,True],[True,False,True,True,True,True,False,True,True,False,False],[False,False,False,False,True,False,True,False,True,False,False],[True,False,False,True,True,True,False,False,False,True,False]],[[True,False,True,True,False,False,False,False,True,True,True],[True,True,False,True,True,False,True,True,False,False,True],[False,True,False,False,True,False,False,True,False,False,True],[False,True,False,False,True,False,True,False,True,True,False],[True,False,True,True,True,False,False,True,True,False,False],[True,False,False,False,True,True,False,True,False,False,False],[False,True,True,True,False,False,False,True,False,False,False],[True,True,True,True,True,True,False,False,True,True,False]],[[True,True,True,False,False,False,True,False,False,True,True],[False,False,False,False,True,True,False,True,True,True,False],[True,False,False,False,False,False,True,True,False,True,True],[False,True,True,False,False,True,True,False,True,True,False],[True,True,True,False,True,False,False,False,True,True,False],[True,True,False,True,False,True,True,True,False,True,True],[True,False,True,True,True,True,False,False,False,True,True],[True,True,False,False,True,False,True,False,False,False,True]],[[False,True,False,True,False,True,False,False,False,True,False],[False,False,True,True,False,True,True,True,False,True,True],[False,True,False,False,False,True,False,False,False,False,True],[False,True,True,False,True,True,False,True,True,False,True],[False,False,False,True,True,True,True,False,False,True,True],[True,True,True,False,True,True,False,True,False,True,True],[False,True,False,True,True,True,True,False,True,True,False],[True,True,True,False,False,False,True,False,True,False,True]],[[True,False,True,False,False,False,True,True,True,True,False],[False,False,False,True,True,False,False,True,False,True,False],[True,False,False,True,True,False,True,True,False,False,True],[True,False,True,True,True,True,True,False,True,True,True],[True,False,False,True,True,True,True,False,True,True,False],[False,False,True,False,True,False,False,True,True,True,False],[True,True,True,False,False,False,True,True,True,True,True],[True,False,False,True,False,True,False,True,True,False,True]],[[True,True,True,True,True,False,True,True,False,False,False],[False,False,False,False,True,True,True,False,False,False,True],[True,True,True,False,False,False,True,False,True,False,True],[False,False,True,True,True,False,True,True,False,True,True],[False,True,False,True,False,True,True,True,False,False,False],[True,False,False,True,False,True,False,False,False,True,False],[True,False,True,True,True,False,True,True,True,True,False],[False,False,True,True,False,False,True,False,False,False,True]],[[True,True,True,False,True,True,False,False,False,False,False],[True,True,False,False,True,True,True,False,True,True,True],[False,False,True,False,True,True,True,True,False,False,False],[True,False,False,True,False,False,True,False,True,False,False],[True,False,True,False,False,True,True,True,False,False,False],[True,False,True,True,True,True,True,True,True,True,True],[True,False,False,False,True,False,True,True,False,False,False],[True,False,False,True,True,True,True,True,True,True,False]]], dtype = "bool")#candidate|2392|(11, 8, 11)|const|bool
var_2393 = relay.var("var_2393", dtype = "bool", shape = (11, 8, 11))#candidate|2393|(11, 8, 11)|var|bool
bop_2394 = relay.logical_and(const_2392.astype('bool'), relay.reshape(var_2393.astype('bool'), relay.shape_of(const_2392))) # shape=(11, 8, 11)
uop_2399 = relay.asin(bop_2394.astype('float64')) # shape=(11, 8, 11)
func_988_call = mod.get_global_var('func_988')
func_991_call = mutated_mod.get_global_var('func_991')
var_2402 = relay.var("var_2402", dtype = "float64", shape = (1092,))#candidate|2402|(1092,)|var|float64
call_2401 = relay.TupleGetItem(func_988_call(relay.reshape(var_2402.astype('float64'), [1092,])), 0)
call_2403 = relay.TupleGetItem(func_991_call(relay.reshape(var_2402.astype('float64'), [1092,])), 0)
output = relay.Tuple([uop_2399,call_2401,var_2402,])
output2 = relay.Tuple([uop_2399,call_2403,var_2402,])
func_2405 = relay.Function([var_2393,var_2402,], output)
mod['func_2405'] = func_2405
mod = relay.transform.InferType()(mod)
var_2406 = relay.var("var_2406", dtype = "bool", shape = (11, 8, 11))#candidate|2406|(11, 8, 11)|var|bool
var_2407 = relay.var("var_2407", dtype = "float64", shape = (1092,))#candidate|2407|(1092,)|var|float64
output = func_2405(var_2406,var_2407,)
func_2408 = relay.Function([var_2406,var_2407,], output)
mutated_mod['func_2408'] = func_2408
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2421 = relay.const([[[6.114382,-4.403343,-4.071717,-7.466011,1.012458,4.931885,-7.787710,9.420024],[9.454170,8.643046,-6.331013,-6.880947,6.605939,4.604107,5.875662,-9.734779],[1.386340,-3.532374,3.528707,-6.921386,-6.876730,-0.449309,1.327667,8.914210],[2.554136,-9.787261,-3.516022,-2.064161,1.115731,2.022733,-0.415509,-7.208267],[-4.759810,-0.793059,2.147175,-1.050376,-6.715030,-9.316489,-6.787138,-3.734186],[9.460803,0.818230,5.145942,8.612112,-3.957276,-3.346308,-9.458205,-1.044489]]], dtype = "float32")#candidate|2421|(1, 6, 8)|const|float32
var_2422 = relay.var("var_2422", dtype = "float32", shape = (5, 6, 8))#candidate|2422|(5, 6, 8)|var|float32
bop_2423 = relay.add(const_2421.astype('float32'), var_2422.astype('float32')) # shape=(5, 6, 8)
func_1506_call = mod.get_global_var('func_1506')
func_1509_call = mutated_mod.get_global_var('func_1509')
var_2433 = relay.var("var_2433", dtype = "float32", shape = (12,))#candidate|2433|(12,)|var|float32
call_2432 = relay.TupleGetItem(func_1506_call(relay.reshape(var_2433.astype('float32'), [3, 4]), relay.reshape(var_2433.astype('float32'), [3, 4]), ), 0)
call_2434 = relay.TupleGetItem(func_1509_call(relay.reshape(var_2433.astype('float32'), [3, 4]), relay.reshape(var_2433.astype('float32'), [3, 4]), ), 0)
func_828_call = mod.get_global_var('func_828')
func_832_call = mutated_mod.get_global_var('func_832')
var_2445 = relay.var("var_2445", dtype = "float64", shape = (1, 1092))#candidate|2445|(1, 1092)|var|float64
call_2444 = relay.TupleGetItem(func_828_call(relay.reshape(var_2445.astype('float64'), [1092,]), relay.reshape(var_2445.astype('float32'), [14, 13, 6]), ), 1)
call_2446 = relay.TupleGetItem(func_832_call(relay.reshape(var_2445.astype('float64'), [1092,]), relay.reshape(var_2445.astype('float32'), [14, 13, 6]), ), 1)
output = relay.Tuple([bop_2423,call_2432,var_2433,call_2444,var_2445,])
output2 = relay.Tuple([bop_2423,call_2434,var_2433,call_2446,var_2445,])
func_2461 = relay.Function([var_2422,var_2433,var_2445,], output)
mod['func_2461'] = func_2461
mod = relay.transform.InferType()(mod)
mutated_mod['func_2461'] = func_2461
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2461_call = mutated_mod.get_global_var('func_2461')
var_2463 = relay.var("var_2463", dtype = "float32", shape = (5, 6, 8))#candidate|2463|(5, 6, 8)|var|float32
var_2464 = relay.var("var_2464", dtype = "float32", shape = (12,))#candidate|2464|(12,)|var|float32
var_2465 = relay.var("var_2465", dtype = "float64", shape = (1, 1092))#candidate|2465|(1, 1092)|var|float64
call_2462 = func_2461_call(var_2463,var_2464,var_2465,)
output = call_2462
func_2466 = relay.Function([var_2463,var_2464,var_2465,], output)
mutated_mod['func_2466'] = func_2466
mutated_mod = relay.transform.InferType()(mutated_mod)
func_668_call = mod.get_global_var('func_668')
func_669_call = mutated_mod.get_global_var('func_669')
call_2488 = relay.TupleGetItem(func_668_call(), 0)
call_2489 = relay.TupleGetItem(func_669_call(), 0)
uop_2495 = relay.cosh(call_2488.astype('float64')) # shape=(9, 6, 12)
uop_2497 = relay.cosh(call_2489.astype('float64')) # shape=(9, 6, 12)
func_2234_call = mod.get_global_var('func_2234')
func_2237_call = mutated_mod.get_global_var('func_2237')
var_2499 = relay.var("var_2499", dtype = "float64", shape = (1092,))#candidate|2499|(1092,)|var|float64
call_2498 = relay.TupleGetItem(func_2234_call(relay.reshape(var_2499.astype('float64'), [14, 78])), 4)
call_2500 = relay.TupleGetItem(func_2237_call(relay.reshape(var_2499.astype('float64'), [14, 78])), 4)
uop_2512 = relay.exp(uop_2495.astype('float64')) # shape=(9, 6, 12)
uop_2514 = relay.exp(uop_2497.astype('float64')) # shape=(9, 6, 12)
uop_2519 = relay.tan(call_2488.astype('float64')) # shape=(9, 6, 12)
uop_2521 = relay.tan(call_2489.astype('float64')) # shape=(9, 6, 12)
bop_2525 = relay.less(uop_2512.astype('bool'), relay.reshape(uop_2495.astype('bool'), relay.shape_of(uop_2512))) # shape=(9, 6, 12)
bop_2528 = relay.less(uop_2514.astype('bool'), relay.reshape(uop_2497.astype('bool'), relay.shape_of(uop_2514))) # shape=(9, 6, 12)
func_1583_call = mod.get_global_var('func_1583')
func_1585_call = mutated_mod.get_global_var('func_1585')
call_2536 = func_1583_call()
call_2537 = func_1583_call()
uop_2540 = relay.sin(bop_2525.astype('float64')) # shape=(9, 6, 12)
uop_2542 = relay.sin(bop_2528.astype('float64')) # shape=(9, 6, 12)
func_1665_call = mod.get_global_var('func_1665')
func_1666_call = mutated_mod.get_global_var('func_1666')
call_2563 = func_1665_call()
call_2564 = func_1665_call()
uop_2571 = relay.asin(uop_2540.astype('float64')) # shape=(9, 6, 12)
uop_2573 = relay.asin(uop_2542.astype('float64')) # shape=(9, 6, 12)
bop_2574 = relay.floor_divide(uop_2571.astype('float32'), relay.reshape(uop_2519.astype('float32'), relay.shape_of(uop_2571))) # shape=(9, 6, 12)
bop_2577 = relay.floor_divide(uop_2573.astype('float32'), relay.reshape(uop_2521.astype('float32'), relay.shape_of(uop_2573))) # shape=(9, 6, 12)
output = relay.Tuple([call_2498,var_2499,call_2536,call_2563,bop_2574,])
output2 = relay.Tuple([call_2500,var_2499,call_2537,call_2564,bop_2577,])
func_2581 = relay.Function([var_2499,], output)
mod['func_2581'] = func_2581
mod = relay.transform.InferType()(mod)
var_2582 = relay.var("var_2582", dtype = "float64", shape = (1092,))#candidate|2582|(1092,)|var|float64
output = func_2581(var_2582)
func_2583 = relay.Function([var_2582], output)
mutated_mod['func_2583'] = func_2583
mutated_mod = relay.transform.InferType()(mutated_mod)
func_721_call = mod.get_global_var('func_721')
func_722_call = mutated_mod.get_global_var('func_722')
call_2592 = relay.TupleGetItem(func_721_call(), 3)
call_2593 = relay.TupleGetItem(func_722_call(), 3)
uop_2610 = relay.exp(call_2592.astype('float64')) # shape=(70,)
uop_2612 = relay.exp(call_2593.astype('float64')) # shape=(70,)
var_2626 = relay.var("var_2626", dtype = "float64", shape = (70,))#candidate|2626|(70,)|var|float64
bop_2627 = relay.multiply(uop_2610.astype('int16'), relay.reshape(var_2626.astype('int16'), relay.shape_of(uop_2610))) # shape=(70,)
bop_2630 = relay.multiply(uop_2612.astype('int16'), relay.reshape(var_2626.astype('int16'), relay.shape_of(uop_2612))) # shape=(70,)
func_2405_call = mod.get_global_var('func_2405')
func_2408_call = mutated_mod.get_global_var('func_2408')
const_2634 = relay.const([True,True,True,True,False,False,True,True,True,True,False,True,False,True,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,True,True,False,False,True,True,True,True,False,False,False,False,False,False,False,False,False,False,True,False,True,False,True,True,False,True,False,False,False,True,True,True,True,True,False,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,False,True,True,True,False,True,True,False,False,True,True,True,True,False,True,True,False,True,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,True,True,True,True,False,True,True,False,True,False,True,True,True,False,False,True,False,False,True,True,False,True,True,False,False,True,False,False,False,False,False,True,True,True,False,False,True,True,False,False,False,True,True,True,True,True,False,True,True,False,False,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,False,False,True,False,False,False,True,False,True,True,False,False,False,False,False,False,True,True,True,False,False,True,False,True,False,True,False,True,False,True,False,False,True,True,False,False,True,False,False,False,True,False,False,True,True,False,True,False,False,True,True,False,False,True,False,False,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,True,False,False,False,True,False,False,True,True,True,True,True,False,True,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,False,True,False,False,False,False,True,True,True,True,True,True,True,False,True,False,True,False,True,True,False,True,False,True,False,True,False,True,False,True,True,False,False,True,False,False,True,False,True,False,True,True,True,False,True,False,True,True,False,False,False,False,False,False,False,False,True,False,True,True,True,False,False,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False,True,True,False,False,True,False,False,False,False,False,True,True,False,False,True,True,True,False,True,False,False,False,True,False,False,True,False,True,False,True,False,False,False,False,False,False,True,False,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,False,False,False,False,False,True,False,True,True,True,True,True,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,True,False,True,True,True,True,False,True,False,True,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,True,False,False,True,True,False,False,True,True,True,False,False,True,False,False,False,False,False,True,True,True,True,False,False,False,False,False,True,True,True,False,False,False,True,True,True,True,True,False,True,False,False,True,True,False,False,True,False,False,False,True,True,False,False,False,False,False,False,True,True,True,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,True,False,False,True,True,True,True,False,True,True,False,False,False,True,False,True,True,True,False,True,False,False,False,False,False,False,True,False,False,True,True,True,True,False,False,True,True,False,True,False,True,True,False,True,True,False,False,False,True,True,True,True,True,True,False,False,True,True,False,True,False,False,True,False,False,True,True,True,True,False,True,False,True,True,False,False,True,False,False,True,True,True,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,True,False,False,True,True,False,False,False,False,True,False,True,True,True,False,True,True,True,False,False,False,False,True,False,False,True,True,True,True,True,False,False,True,False,True,True,False,False,True,True,True,True,False,False,False,False,True,False,False,True,False,False,False,True,False,False,True,False,False,False,True,False,True,False,False,False,True,False,False,True,True,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,False,False,True,True,False,True,True,False,False,False,True,True,True,True,True,True,False,True,True,True,True,False,False,True,True,True,False,False,False,True,False,False,True,True,True,False,True,True,False,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,True,False,False,True,False,False,True,False,True,False,False,False,False,True,True,False,False,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,True,False,False,True,True,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,False,True,False,True,False,False,True,False,True,True,True,False,False,True,False,True,True,False,True,True,False,True,True,True,True,False,False,False,True,True,True,True,True,False,True,True,False,False,True,False,True,False,False,True,True,False,False,False,False,True,True,False,True,True,True,False,True,True,False,False,True,False,False,False,False,True,True,False,True,False,False,False,False,True,False], dtype = "bool")#candidate|2634|(968,)|const|bool
var_2635 = relay.var("var_2635", dtype = "float64", shape = (1092,))#candidate|2635|(1092,)|var|float64
call_2633 = relay.TupleGetItem(func_2405_call(relay.reshape(const_2634.astype('bool'), [11, 8, 11]), relay.reshape(var_2635.astype('float64'), [1092,]), ), 2)
call_2636 = relay.TupleGetItem(func_2408_call(relay.reshape(const_2634.astype('bool'), [11, 8, 11]), relay.reshape(var_2635.astype('float64'), [1092,]), ), 2)
func_2017_call = mod.get_global_var('func_2017')
func_2018_call = mutated_mod.get_global_var('func_2018')
call_2641 = relay.TupleGetItem(func_2017_call(), 0)
call_2642 = relay.TupleGetItem(func_2018_call(), 0)
func_477_call = mod.get_global_var('func_477')
func_479_call = mutated_mod.get_global_var('func_479')
call_2647 = relay.TupleGetItem(func_477_call(relay.reshape(call_2633.astype('float64'), [14, 13, 6])), 0)
call_2648 = relay.TupleGetItem(func_479_call(relay.reshape(call_2633.astype('float64'), [14, 13, 6])), 0)
var_2662 = relay.var("var_2662", dtype = "int16", shape = (70,))#candidate|2662|(70,)|var|int16
bop_2663 = relay.floor_mod(bop_2627.astype('float64'), relay.reshape(var_2662.astype('float64'), relay.shape_of(bop_2627))) # shape=(70,)
bop_2666 = relay.floor_mod(bop_2630.astype('float64'), relay.reshape(var_2662.astype('float64'), relay.shape_of(bop_2630))) # shape=(70,)
bop_2668 = relay.left_shift(uop_2610.astype('uint64'), relay.reshape(bop_2663.astype('uint64'), relay.shape_of(uop_2610))) # shape=(70,)
bop_2671 = relay.left_shift(uop_2612.astype('uint64'), relay.reshape(bop_2666.astype('uint64'), relay.shape_of(uop_2612))) # shape=(70,)
bop_2672 = relay.floor_divide(bop_2663.astype('float32'), relay.reshape(bop_2627.astype('float32'), relay.shape_of(bop_2663))) # shape=(70,)
bop_2675 = relay.floor_divide(bop_2666.astype('float32'), relay.reshape(bop_2630.astype('float32'), relay.shape_of(bop_2666))) # shape=(70,)
output = relay.Tuple([call_2633,const_2634,var_2635,call_2641,call_2647,bop_2668,bop_2672,])
output2 = relay.Tuple([call_2636,const_2634,var_2635,call_2642,call_2648,bop_2671,bop_2675,])
func_2679 = relay.Function([var_2626,var_2635,var_2662,], output)
mod['func_2679'] = func_2679
mod = relay.transform.InferType()(mod)
var_2680 = relay.var("var_2680", dtype = "float64", shape = (70,))#candidate|2680|(70,)|var|float64
var_2681 = relay.var("var_2681", dtype = "float64", shape = (1092,))#candidate|2681|(1092,)|var|float64
var_2682 = relay.var("var_2682", dtype = "int16", shape = (70,))#candidate|2682|(70,)|var|int16
output = func_2679(var_2680,var_2681,var_2682,)
func_2683 = relay.Function([var_2680,var_2681,var_2682,], output)
mutated_mod['func_2683'] = func_2683
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2734 = relay.const([[[3.311172,1.897784,5.511297,4.686265],[-9.758797,-7.285986,2.518996,9.072460],[8.009260,0.966178,-1.148324,-4.264199],[-8.393724,5.436053,2.101344,-9.697697],[-4.614481,7.793309,0.460806,7.747385],[9.045987,8.541454,9.323408,4.914101],[-1.311416,5.995092,-7.476981,-3.727333],[9.492760,5.781794,-9.011471,3.526136],[1.823080,-1.127614,9.649436,-5.432131]],[[-3.046571,-6.288218,5.287832,-8.245800],[-8.539404,-1.740729,-2.600007,1.731038],[3.098282,-9.420923,-1.958591,-5.501103],[-3.019572,-2.307510,-4.156731,7.709866],[-0.921736,2.792904,1.652666,6.120820],[5.069207,-6.002936,1.546401,2.062592],[-3.496444,-6.641915,9.593892,-4.925205],[-6.195969,-3.659197,3.637713,3.258581],[2.334736,7.582163,-8.850944,-5.547450]],[[5.365676,5.768151,-3.148313,2.668462],[-7.422133,9.266243,-7.306128,-7.914683],[-1.019603,-3.207242,-6.893591,2.796402],[-1.268555,-6.175072,-9.566000,-4.470910],[2.612443,-3.301386,-1.883733,-7.793639],[2.559220,-4.479862,9.111386,-8.643703],[0.392633,7.759378,-7.643549,8.986936],[-9.941710,-9.235548,-5.066882,-7.234677],[-0.883749,6.537799,-3.492679,-7.030404]],[[1.642586,2.305276,1.291046,-9.045065],[-7.554842,-5.795536,1.959136,4.988061],[3.817237,-8.262181,-2.253129,7.971254],[6.830029,7.736128,-9.042752,2.313125],[8.402250,-4.227972,9.750683,0.838123],[-3.608343,-9.962266,-7.491273,6.830136],[3.841502,2.963347,-4.765528,0.727321],[-5.725194,1.048683,-6.872804,-0.604350],[-9.646966,-2.497618,-2.882405,0.802389]],[[3.309918,-3.708593,-5.347292,3.593485],[3.086543,0.338021,3.467741,5.704703],[-0.216917,-2.505909,9.766459,-9.878449],[5.242296,7.504251,-4.974292,-5.787041],[4.613115,8.726446,7.059764,2.580362],[-5.317682,-1.910470,9.376062,9.800204],[8.142032,-7.974007,-5.962927,-5.816628],[2.712693,8.743985,-8.388202,1.539176],[-8.025761,6.469607,9.766432,-3.283845]],[[-7.044884,9.000581,-2.272234,7.482760],[-7.701827,4.641644,-4.462604,-7.662766],[5.468636,9.660203,-2.272597,2.046270],[-4.335369,-5.916418,-2.255786,7.107850],[7.735530,-3.553515,4.526858,5.906666],[-2.401184,-0.516107,-8.066086,-2.198799],[2.864960,-0.709972,2.106468,-4.571433],[-3.388521,8.951082,-1.913920,0.351098],[-4.496672,4.130408,0.133388,7.680860]],[[8.330464,-5.838922,2.599411,-2.637061],[5.923635,-1.336783,-6.617575,-6.170403],[9.157468,9.471348,-6.267569,7.518554],[9.352001,-6.595771,-6.431720,-0.002626],[2.685376,7.842181,0.325152,4.465352],[-2.543560,5.548518,3.334897,-7.193373],[-4.589563,-0.236102,-0.128752,0.855964],[-1.016141,3.136862,4.726229,1.836493],[-4.502298,8.018267,-7.198265,-1.589247]],[[-4.170105,8.967993,0.137675,-7.022359],[-2.443201,-4.372655,6.519225,-8.411214],[5.381163,-4.315345,9.289594,-0.528479],[-2.126653,5.469854,-6.263122,-2.214632],[-9.605297,-5.839144,4.034692,1.355200],[7.348704,-0.724583,9.351815,5.697458],[-7.174336,1.951410,3.928117,-8.346639],[-5.192001,-7.282013,3.453010,4.184685],[-8.271221,-5.498733,9.990378,9.602995]],[[0.329586,5.415284,-1.865404,-7.388859],[-3.049788,-9.122902,3.045099,0.399431],[9.978276,-7.398152,-8.244010,-9.258085],[-4.090786,-5.825707,-6.749558,-1.814581],[-8.683778,-4.357228,-6.724624,6.725296],[-9.723494,-4.984992,-0.865735,8.529558],[7.898651,4.963462,-9.004970,3.036801],[-9.102867,-3.309345,9.910564,-1.563395],[-1.720430,8.490929,8.110593,7.128387]],[[-0.763710,0.441798,1.425156,-7.862418],[5.164950,5.383132,8.322879,-4.263755],[-1.792298,-5.132473,8.718496,0.842950],[9.907265,0.903436,-3.447205,6.338735],[-7.250295,6.014456,5.053847,1.127879],[5.816075,-1.477738,7.771020,-7.671412],[2.293660,2.474510,-0.474326,-5.898222],[4.339451,-5.696154,-4.666066,1.788127],[2.262025,3.531183,-5.536583,4.049755]],[[0.681820,5.243992,-7.266505,-7.909493],[-7.096319,-1.816234,1.938999,1.742746],[-9.206996,-2.546647,0.536153,-8.579807],[-7.674604,8.226832,-6.678755,0.995357],[9.944576,-2.552265,-7.680701,8.470684],[-8.847843,4.633549,4.462247,4.439125],[0.507605,-0.870273,8.440633,6.175938],[-5.753596,-7.825109,5.123539,-2.054352],[-6.700346,-9.766531,-3.955407,-5.916064]]], dtype = "float32")#candidate|2734|(11, 9, 4)|const|float32
uop_2735 = relay.atan(const_2734.astype('float32')) # shape=(11, 9, 4)
bop_2740 = relay.minimum(uop_2735.astype('uint8'), relay.reshape(const_2734.astype('uint8'), relay.shape_of(uop_2735))) # shape=(11, 9, 4)
uop_2747 = relay.erf(const_2734.astype('float64')) # shape=(11, 9, 4)
bop_2752 = relay.logical_and(bop_2740.astype('bool'), relay.reshape(uop_2735.astype('bool'), relay.shape_of(bop_2740))) # shape=(11, 9, 4)
output = relay.Tuple([uop_2747,bop_2752,])
output2 = relay.Tuple([uop_2747,bop_2752,])
func_2758 = relay.Function([], output)
mod['func_2758'] = func_2758
mod = relay.transform.InferType()(mod)
mutated_mod['func_2758'] = func_2758
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2758_call = mutated_mod.get_global_var('func_2758')
call_2759 = func_2758_call()
output = call_2759
func_2760 = relay.Function([], output)
mutated_mod['func_2760'] = func_2760
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2781 = relay.var("var_2781", dtype = "int64", shape = (1, 5))#candidate|2781|(1, 5)|var|int64
var_2782 = relay.var("var_2782", dtype = "int64", shape = (10, 5))#candidate|2782|(10, 5)|var|int64
bop_2783 = relay.greater(var_2781.astype('bool'), var_2782.astype('bool')) # shape=(10, 5)
func_1997_call = mod.get_global_var('func_1997')
func_1999_call = mutated_mod.get_global_var('func_1999')
const_2787 = relay.const([9.199671,8.086317,-2.994821,-8.233174,-4.311088,0.429524,-2.776481,3.794471,4.405559,8.601962,-9.865824,1.159387,-9.189518,-1.572212,-9.239732,-5.440036,1.630788,-7.879166,-1.098451,-3.362918,-9.958366,-0.566803,-8.155623,-6.803858,2.919368,-0.295473,-5.300290,-8.416616,0.985132,-5.327296,3.161391,-8.173597,-4.002652,-8.329786,3.157945,3.343716,7.171934,8.611203,-2.634539,8.739000,8.863281,1.648083,3.066336,5.919797,5.913074,4.220748,-6.453518,6.959998,-7.420660,9.640248,-3.615006,6.281207,-3.387099,1.358657,-5.046653,-5.632934,6.219672,2.038994,-4.813742,7.597740,-6.376041,-7.229406,-8.023589,9.407773,8.129498,4.791895,-1.269695,0.175266,6.569981,3.872541,-0.043997,4.963242,8.094110,-9.181659,4.985742,5.022829,-0.232896,-4.129729,-7.449060,8.234751,-8.695575,8.424589,-2.086040,6.054200,-5.729612,8.251176,0.181336,-4.185711,-2.164999,-8.664057,-1.299502,7.787739,1.965845,-7.724775,-3.856715,9.579717,-8.568922,6.424165,-2.791710,-9.245614,8.008593,9.923484,-8.892757,2.399509,-8.791733,9.637136,-0.667728,-2.839052,-3.322384,8.765985,-4.687834,-4.960025,0.747460,6.320905,-8.815052,-7.273304,-4.032980,-5.837081,9.628290,1.326664,9.377010,5.814643,5.068681,8.749934,-1.411040,-4.999538,-9.945330,2.053626,-9.902025,2.570658,-6.160694,-3.712615,0.098652,9.996737,7.203924,-4.772828,7.473734,-2.063305,0.430199,3.386877,-5.880441,8.256155,-4.746428,-9.339898,1.869101,2.206707,-1.385891,-6.361860,0.100411,-8.006831,-9.936922,5.037421,-5.069248,6.282728,-8.690780,6.400914,-9.197336,2.020203,1.347106,-0.089783,7.027444,-0.395895,3.911666,3.085700,6.928005,4.868308,-8.799740,7.104667,-3.809689,5.057801,8.780190,9.853869,5.581553,-3.455227,7.627523,3.442312,7.235940,-0.544410,9.717905,7.286085,9.620577,-1.581199,8.117361,9.246786,-9.031551,-2.304972,6.720397,-5.801724,-9.533095,-2.145677,5.131999,-6.774984,1.380886,7.604511,-3.258231,3.932778,-7.214848,-0.064578,-7.211662,1.549354,-2.577583,-2.153636,-1.050727,-1.415972,-3.805139,-6.295433,-4.805608,-1.763082,6.203270,-5.967731,-2.625903,0.624804,-2.599587,-8.297380,0.917677,0.705377,-2.277713,-0.749944,-6.531278,0.328511,3.767318,-2.303067,5.972613,1.848528,2.834303,-1.005369,-0.389768,-7.571701,5.320594,3.343988,-4.325607,-6.352686,-8.614797,9.842418,1.390941,4.960833,-6.491240,3.149226,-0.835761,-5.213982,-6.619769,7.081168,7.752250,0.016370,2.417304,2.657561,-5.863887,-5.977004,-2.552654,3.483273,-9.655435,-4.290310,8.651407,-9.673939,2.838172,2.494631,-0.057571,-6.032882,-2.468719,-1.304981,-5.991152,9.951127,-7.371841,2.511384,-1.477668,-3.461344,-5.996635,8.868090,-7.064133,3.532914,0.601127,-5.834806,-2.876495,9.737021,-3.781124,-4.531866,0.364826,6.135025,4.663940,7.039876,-6.798780,-9.285654,-7.278573,-8.753308,-7.165471,-6.639612,-8.068070,8.809540,1.104349,7.428746,-6.259438,-0.724066,9.595501,2.154418,9.868251,-8.664592,4.291228,-5.386629,4.916255,-0.214340,-1.869887,9.311300,9.158526,4.915367,6.578074,9.000861,-1.811379,3.505181,5.249772,-9.164503,3.720504,-0.683133,-9.524942,7.148709,5.344948,4.896041,-2.175141,-8.096721,9.489817,5.875097,-9.795054,-1.733756,-0.399231,6.991547,1.589940,-2.363573,-6.244222,2.507624,7.487896,-0.539861,-1.815389,8.736923,-5.322184,5.777848,9.616225,-7.003268,1.663843,8.605679,1.047296,3.880223,-5.019215,2.616798,4.479009,6.781757,2.542103,0.312483,0.255387,5.453236,5.117718,5.973714,7.518155,-6.514178,3.425419,-7.190369,-9.759526,3.121397,-3.180675,-2.410659,1.107472,-8.306257,8.352435,-8.252314,-4.546082,3.528841,-7.111170,3.556376,-0.343631,-1.946575,2.029569,-9.007270,4.159234,-5.872405,9.301368,7.383710,2.406442,5.851913,0.525557,9.865006,1.497938,0.520458,-8.951753,6.365272,6.023008,-3.020806,3.417283,-5.250380,-0.401809,-2.730821,9.218465,-4.368329,3.439964,-6.448709,1.648372,9.798820,-0.112100,6.898802,4.042460,5.410462,-9.321368,2.047514,4.324458,-9.473386,-0.847734,2.048105,-0.139769,-9.193695,9.647728,3.374854,2.542615,-0.198026,5.241150,-5.841884,-3.374657,0.672078,1.621046,-0.283695,2.913977,-4.799699,1.462074,0.257007,9.448257,-4.717738,-1.788531,9.994924,-9.067499,6.868078,5.715189,-6.405451,-3.264590,4.204231,-0.194052,-4.966611,-9.448880,9.433711,-4.369788,-9.038975,3.089035,-3.541978,-1.334865,3.489325,0.744306,-7.596479,-3.151932,1.333821,5.517445,-3.091705,-9.134216,9.756146,4.856179,2.698628,9.468932,6.420657,-2.212508,0.965494,2.640124,0.376377,2.210599,-7.916554,-3.056314,-8.180209,-0.156714,7.421788,8.674589,6.156061,4.669877,-5.512351,-5.149821,4.770788,-5.590200,2.140324,6.143714,-6.884591,5.854391,-2.160098,-1.062655,0.587055,6.081516,-8.924115,7.378696,5.707013,-1.826291,6.368017,2.782827,4.835364,6.798846,-9.762312,4.782272,-1.894920,5.780375,-6.363177,4.257750,-5.740640,-6.837044,-7.840066,-2.029403,-6.200179,2.935689,-2.427499,0.555835,-5.998054,-1.227578,5.680878,-3.787217,-9.001694,0.095958,4.459285,-0.698199,0.758793,-3.891842,-4.060327,-5.159026,2.350979,1.403403,-1.769996,2.526060,2.056251,5.016708,4.598684,-9.653387,4.028071,-0.051819,6.505343,-0.100166,7.779760,-3.541378,-6.119004,6.486322,-2.813360,6.831145,8.970481,-5.704195,-8.053928,9.273661,3.360715,-0.171411,4.532692,2.862202,0.106746,-3.650410,0.905964,3.226381,6.724930,3.402058,7.984199,-0.846924,-1.891867,1.899929,0.540916,-8.454905,7.429162,9.630124,-9.001471,2.152065,2.918234,-4.250414,-3.045861,-7.397158,-3.805322,2.800632,-9.163962,-8.913927,-9.001989,2.310493,3.464357,-5.674794,-1.278540,2.312963,6.357599,6.380095,-9.618382,8.040819,2.808621,-2.234045,3.628959,5.902382,-5.910079,-4.127410,8.911898,-0.620471,-9.177604,9.942187,-9.488823,0.316462,2.677970,-8.287195,-0.563722,-3.497184,3.779330,-7.779283,0.411096,-4.828530,3.198420,-6.565976,5.212224,6.165050,-6.947117,-8.643377,-8.960890,-1.131933,-7.859072,0.365620,-1.301261,-8.039146,0.863235,-6.866166,-8.250894,-6.314543,-7.978759,5.688846,3.458404,5.353378,1.946107,-4.045835,2.750895,-0.726292,-8.124290,-4.541554,6.621712,-8.737049,5.492712,2.223469,-3.663475,-1.694249,8.187775,-3.599496,-1.315522,-3.227288,6.510433,8.041728,6.401791,7.118580,-9.160256,-6.396549,-6.799136,-4.847898,2.367387,-1.647082,9.684559,-8.445042,-1.222498,1.716944,-5.524635,-5.524849,-1.016347,-9.393227,1.406566,1.137699,-6.623931,-7.110977,5.547542,-0.828420,-2.867597,-0.506610,2.848006,-0.793659,4.411717,2.841226,9.324371,0.033296,5.067231,4.324179,0.261377,-4.355535,-7.587007,8.120972,0.984264,5.027788,-4.507162,8.567947,-1.352763,4.002056,9.883878,-8.970365,-6.991056,7.879224,4.315028,2.184633,5.906417,-6.147665,-2.250285,7.583744,-6.821552,8.207342,-4.058686,-6.198662,8.823819,-5.361794,-5.867132,9.671124,2.711751,4.061208,-7.016315,2.025382,-1.460133,7.336183,5.915607,8.117129,1.453555,-3.945968,5.287514,1.530105,-5.830671,-9.210427,-7.817581,-6.602959,-1.386504,-3.794604,-8.614097,-9.032414,-4.195556,7.909865,0.154635,6.481302,1.988874,-0.805128,-0.476363,1.724750,-5.232904,-4.378930,-3.790962,-8.143679,-8.546720,2.850307,-6.998380,2.910201,5.885924,7.467632,9.640893,-4.831991,-4.657638,-4.456425,-8.940491,-2.364052,0.012616,9.301754,4.744778,-6.477107,-6.608777,-7.294201,7.738052,0.625474,-6.857844,3.649981,6.226057,-3.089643,5.032648,2.040664,4.529553,-7.381121,-4.405287,-2.345745,1.246637,2.953478,-5.119013,-8.106342,6.926990,-2.319508,-2.180713,-4.505362,1.567709,-8.542882,4.910476,-6.448815,7.254739,3.325331,-5.032634,1.863906,-2.145097,-4.944627,-3.569628,-4.684709,-0.365274,4.664232,3.290291,4.396626,-7.312279,6.884723,5.746962,-8.102220,-3.665729,-2.436067,3.380846,-5.733221,-3.051048,-4.890319,8.332396,-6.602581,-0.884977,2.184450,8.323440,-9.871018,-7.238043,4.867526,-3.491748,-5.280547,4.312608,1.003833,-7.101331,-5.038011,-3.748795,6.615128,-1.719954,-7.817576,2.024397,-4.758429,-9.670169,-3.436048,-4.484488,-4.514646,-1.682600,2.030748,2.799414,-8.946867,-3.823874,-9.189632,-1.937460,-9.780166,5.191014,7.006533,-3.921723,-1.606852,-9.757890,2.448382,-5.451430,3.300245,-5.350532,1.675592,-2.768645,5.329843,-2.075685,9.651445,4.996511,7.405936,-1.913186,0.698194,-5.199225,2.990006,6.046705,5.856637,-1.281929,-5.895749,2.033443,-6.707220,1.223010,-3.640338,4.192726,-6.165336,-9.654672,-3.869178,-9.750467,2.179370,1.424839,-2.342438,-8.481140,-3.472771,-8.587470,0.726930,-6.029090,7.525177,-4.349655,-0.810268,-0.936168,-2.429061,-7.718548,7.416310,0.698873,-6.546415,-2.904534,1.894263,-5.396152,9.902982,-0.747227,8.360374,2.707076,-8.863486,-1.593848,5.224627,-0.303180,2.871941,-1.835436,5.843921,-6.887940,-5.613525,-5.164517,8.756219,-8.632282,-7.044737,6.999920,0.538470,-1.434350,-3.005122,-7.850740,1.554829,-5.084683,-6.479460,-6.427900,-0.630148,5.689329,2.553526,-1.548083,-1.427541,6.767434,5.313444,-1.140459,9.786025,-8.609723,-3.644076,-0.310137,0.028807,-6.076611,3.325540,-6.895743,5.678692,6.321476,9.767456,3.580721,-0.007018,-9.832446,-6.522544,-0.709927,-1.467947,5.823427,-6.003208,-6.142978,-5.812161,9.391452,0.388420,1.953757,5.355377,3.881119,-9.558063,-0.348147,-3.603627,-3.226826,-8.255049,-7.165425,-3.130055,4.153042,1.954641,-3.412950,-7.788759,-9.089003,8.203792,0.791098,-7.047095,-1.950084,4.115851,9.782568,0.972422,-1.160272,-2.976577,-4.016021,3.247238,3.453376,-1.670556,-4.524792,4.304026,-9.847683,2.960046,6.214916,1.923987,-2.185240,6.641821,-7.045221,-5.658492,-2.294415,5.492790,5.600299,-9.635302,-1.807563,-8.579902,2.715311,9.059314,1.076652,8.375558,-3.569125,-8.623809,-9.554909,-2.077915,-2.787200], dtype = "float32")#candidate|2787|(980,)|const|float32
call_2786 = relay.TupleGetItem(func_1997_call(relay.reshape(const_2787.astype('float32'), [980,])), 1)
call_2788 = relay.TupleGetItem(func_1999_call(relay.reshape(const_2787.astype('float32'), [980,])), 1)
output = relay.Tuple([bop_2783,call_2786,const_2787,])
output2 = relay.Tuple([bop_2783,call_2788,const_2787,])
func_2795 = relay.Function([var_2781,var_2782,], output)
mod['func_2795'] = func_2795
mod = relay.transform.InferType()(mod)
mutated_mod['func_2795'] = func_2795
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2795_call = mutated_mod.get_global_var('func_2795')
var_2797 = relay.var("var_2797", dtype = "int64", shape = (1, 5))#candidate|2797|(1, 5)|var|int64
var_2798 = relay.var("var_2798", dtype = "int64", shape = (10, 5))#candidate|2798|(10, 5)|var|int64
call_2796 = func_2795_call(var_2797,var_2798,)
output = call_2796
func_2799 = relay.Function([var_2797,var_2798,], output)
mutated_mod['func_2799'] = func_2799
mutated_mod = relay.transform.InferType()(mutated_mod)
func_628_call = mod.get_global_var('func_628')
func_629_call = mutated_mod.get_global_var('func_629')
call_2830 = relay.TupleGetItem(func_628_call(), 2)
call_2831 = relay.TupleGetItem(func_629_call(), 2)
uop_2842 = relay.atanh(call_2830.astype('float64')) # shape=(9, 6, 12)
uop_2844 = relay.atanh(call_2831.astype('float64')) # shape=(9, 6, 12)
var_2870 = relay.var("var_2870", dtype = "float64", shape = (9, 6, 12))#candidate|2870|(9, 6, 12)|var|float64
bop_2871 = relay.not_equal(uop_2842.astype('bool'), relay.reshape(var_2870.astype('bool'), relay.shape_of(uop_2842))) # shape=(9, 6, 12)
bop_2874 = relay.not_equal(uop_2844.astype('bool'), relay.reshape(var_2870.astype('bool'), relay.shape_of(uop_2844))) # shape=(9, 6, 12)
var_2875 = relay.var("var_2875", dtype = "bool", shape = (9, 6, 12))#candidate|2875|(9, 6, 12)|var|bool
bop_2876 = relay.subtract(bop_2871.astype('int8'), relay.reshape(var_2875.astype('int8'), relay.shape_of(bop_2871))) # shape=(9, 6, 12)
bop_2879 = relay.subtract(bop_2874.astype('int8'), relay.reshape(var_2875.astype('int8'), relay.shape_of(bop_2874))) # shape=(9, 6, 12)
bop_2881 = relay.equal(bop_2876.astype('bool'), relay.reshape(call_2830.astype('bool'), relay.shape_of(bop_2876))) # shape=(9, 6, 12)
bop_2884 = relay.equal(bop_2879.astype('bool'), relay.reshape(call_2831.astype('bool'), relay.shape_of(bop_2879))) # shape=(9, 6, 12)
uop_2893 = relay.sigmoid(bop_2871.astype('float32')) # shape=(9, 6, 12)
uop_2895 = relay.sigmoid(bop_2874.astype('float32')) # shape=(9, 6, 12)
bop_2901 = relay.less_equal(uop_2893.astype('bool'), relay.reshape(var_2870.astype('bool'), relay.shape_of(uop_2893))) # shape=(9, 6, 12)
bop_2904 = relay.less_equal(uop_2895.astype('bool'), relay.reshape(var_2870.astype('bool'), relay.shape_of(uop_2895))) # shape=(9, 6, 12)
var_2906 = relay.var("var_2906", dtype = "float64", shape = (9, 6, 12))#candidate|2906|(9, 6, 12)|var|float64
bop_2907 = relay.add(var_2870.astype('float64'), relay.reshape(var_2906.astype('float64'), relay.shape_of(var_2870))) # shape=(9, 6, 12)
output = relay.Tuple([bop_2881,bop_2901,bop_2907,])
output2 = relay.Tuple([bop_2884,bop_2904,bop_2907,])
func_2910 = relay.Function([var_2870,var_2875,var_2906,], output)
mod['func_2910'] = func_2910
mod = relay.transform.InferType()(mod)
var_2911 = relay.var("var_2911", dtype = "float64", shape = (9, 6, 12))#candidate|2911|(9, 6, 12)|var|float64
var_2912 = relay.var("var_2912", dtype = "bool", shape = (9, 6, 12))#candidate|2912|(9, 6, 12)|var|bool
var_2913 = relay.var("var_2913", dtype = "float64", shape = (9, 6, 12))#candidate|2913|(9, 6, 12)|var|float64
output = func_2910(var_2911,var_2912,var_2913,)
func_2914 = relay.Function([var_2911,var_2912,var_2913,], output)
mutated_mod['func_2914'] = func_2914
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2928 = relay.var("var_2928", dtype = "float64", shape = (4, 6, 11))#candidate|2928|(4, 6, 11)|var|float64
uop_2929 = relay.sqrt(var_2928.astype('float64')) # shape=(4, 6, 11)
output = uop_2929
output2 = uop_2929
func_2933 = relay.Function([var_2928,], output)
mod['func_2933'] = func_2933
mod = relay.transform.InferType()(mod)
mutated_mod['func_2933'] = func_2933
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2934 = relay.var("var_2934", dtype = "float64", shape = (4, 6, 11))#candidate|2934|(4, 6, 11)|var|float64
func_2933_call = mutated_mod.get_global_var('func_2933')
call_2935 = func_2933_call(var_2934)
output = call_2935
func_2936 = relay.Function([var_2934], output)
mutated_mod['func_2936'] = func_2936
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3003 = relay.const(-9, dtype = "int32")#candidate|3003|()|const|int32
var_3004 = relay.var("var_3004", dtype = "int32", shape = (8, 9, 9))#candidate|3004|(8, 9, 9)|var|int32
bop_3005 = relay.multiply(const_3003.astype('int32'), var_3004.astype('int32')) # shape=(8, 9, 9)
func_477_call = mod.get_global_var('func_477')
func_479_call = mutated_mod.get_global_var('func_479')
var_3009 = relay.var("var_3009", dtype = "float64", shape = (1092,))#candidate|3009|(1092,)|var|float64
call_3008 = relay.TupleGetItem(func_477_call(relay.reshape(var_3009.astype('float64'), [14, 13, 6])), 0)
call_3010 = relay.TupleGetItem(func_479_call(relay.reshape(var_3009.astype('float64'), [14, 13, 6])), 0)
output = relay.Tuple([bop_3005,call_3008,var_3009,])
output2 = relay.Tuple([bop_3005,call_3010,var_3009,])
func_3014 = relay.Function([var_3004,var_3009,], output)
mod['func_3014'] = func_3014
mod = relay.transform.InferType()(mod)
mutated_mod['func_3014'] = func_3014
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3014_call = mutated_mod.get_global_var('func_3014')
var_3016 = relay.var("var_3016", dtype = "int32", shape = (8, 9, 9))#candidate|3016|(8, 9, 9)|var|int32
var_3017 = relay.var("var_3017", dtype = "float64", shape = (1092,))#candidate|3017|(1092,)|var|float64
call_3015 = func_3014_call(var_3016,var_3017,)
output = call_3015
func_3018 = relay.Function([var_3016,var_3017,], output)
mutated_mod['func_3018'] = func_3018
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2295_call = mod.get_global_var('func_2295')
func_2296_call = mutated_mod.get_global_var('func_2296')
call_3041 = relay.TupleGetItem(func_2295_call(), 0)
call_3042 = relay.TupleGetItem(func_2296_call(), 0)
output = relay.Tuple([call_3041,])
output2 = relay.Tuple([call_3042,])
func_3047 = relay.Function([], output)
mod['func_3047'] = func_3047
mod = relay.transform.InferType()(mod)
mutated_mod['func_3047'] = func_3047
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3047_call = mutated_mod.get_global_var('func_3047')
call_3048 = func_3047_call()
output = call_3048
func_3049 = relay.Function([], output)
mutated_mod['func_3049'] = func_3049
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3073 = relay.const([[[-2.879807,8.915448,-9.295483,-7.938433,3.417418,-1.430913,5.279828,-6.463212,9.394828,-9.084942],[-2.080507,-9.463054,5.522283,6.290385,-2.847038,2.832793,-9.651561,-3.561229,-1.779803,-8.278983],[-7.744718,-1.936803,-3.089315,7.673694,7.577928,-2.535616,-8.728470,-8.939057,6.437568,9.610442],[-2.113541,-0.080937,6.710077,2.107925,-0.234549,6.390650,0.599097,-1.096630,-7.658205,0.393384],[7.337263,-5.936049,-3.914107,6.545805,-2.539700,3.113201,9.840224,5.665825,6.410110,-5.605574],[7.860436,-9.810495,7.167216,-5.421427,-0.026250,2.195653,-4.397085,-0.229875,-3.417560,-6.261392],[-8.290681,-5.967574,7.850691,7.611203,-9.513961,-6.413026,3.630939,-0.306074,7.543367,8.521386],[-2.553176,1.849618,-0.107655,9.667130,3.304093,0.312508,-9.265678,7.146071,4.679778,-0.832863],[4.472102,8.931546,5.228824,6.730051,7.727763,8.499873,-8.996528,-9.086550,-4.588675,4.860079]],[[5.658733,8.002219,-6.760287,9.046409,1.183257,-6.927431,5.980695,-0.451350,8.818455,9.878571],[-6.830424,4.870924,-6.112603,2.117938,7.612571,-3.866728,2.027818,-6.405187,1.828677,7.206082],[8.404268,4.956869,-0.582270,-5.530503,1.063521,-8.833172,-0.796857,-8.292861,2.346954,3.302309],[4.335795,6.409719,7.178584,-9.714110,0.538712,-1.789691,0.228564,4.010727,4.668403,-1.673592],[-1.460267,-1.578509,-2.036491,8.680792,-0.531164,-3.238357,-0.034470,-2.201952,-8.554211,-8.206662],[-7.295645,-5.680714,-0.059057,1.257298,5.089585,1.376585,-5.781618,-1.394156,-2.279438,-7.241696],[-6.697406,-9.948493,-9.344571,8.895518,-6.802828,7.500054,-9.668074,-0.771767,4.461910,-2.226329],[1.883144,-7.468583,0.283648,-4.761861,-9.027916,-5.230172,-4.840432,-7.732918,2.210884,0.571367],[2.954128,-0.106589,-7.865506,2.064363,7.982134,2.252529,7.857647,-6.537707,-2.059913,-8.759917]],[[-6.803169,-4.530250,-5.402467,9.749528,-5.628011,1.147642,3.289472,4.123836,-2.520099,-7.650309],[-2.044876,9.985116,3.342166,-5.256515,-1.586370,5.623369,0.886079,8.142725,-5.437791,9.175576],[7.296868,-3.668829,-5.585042,8.906014,-1.974809,-9.764705,4.165366,-2.850571,-9.569894,-6.408057],[-6.535540,9.503692,6.361076,6.887102,1.230583,-7.400200,6.252821,-9.663156,-9.566203,-9.140698],[3.185846,4.437180,-7.028332,2.749716,-1.033310,-2.612121,8.734396,-4.032122,-3.016672,-2.492028],[-9.774942,1.940074,-4.716182,-2.680706,4.617586,4.925697,6.989056,6.814698,4.123201,-2.782207],[-3.188761,-2.130508,-3.269820,8.880374,-9.486163,0.745626,-3.666581,-6.040673,-7.836595,-4.059434],[6.007964,-1.077565,-6.820314,1.697082,-1.948245,-8.164342,-5.481094,7.734146,2.379742,5.470933],[-4.358458,1.809478,9.433265,2.616795,-3.907750,9.451865,-6.799912,-0.939261,8.057148,-1.845171]],[[-9.835302,4.502724,0.058760,1.626571,8.096003,-8.581578,0.018572,-8.324992,7.045128,-2.875651],[9.172752,4.817432,7.272527,7.498498,9.962538,1.478704,-3.137732,-2.147234,3.687909,-0.757098],[2.823457,-6.326444,-3.996420,2.782738,3.147997,1.674959,-6.433947,-4.596940,5.785538,-1.217913],[9.505831,-5.440040,-6.045764,3.573453,-8.287763,-4.634525,-1.744157,5.661686,-2.658754,-2.976536],[-9.974367,-4.573037,-7.509659,8.801603,-4.336428,2.731574,4.126502,7.243503,-0.801654,1.202119],[8.822297,-0.341183,-1.363133,-4.814269,1.145563,-3.910930,7.683252,-0.538430,4.477693,4.216088],[0.113998,2.647032,-1.674837,9.231835,8.415667,9.455335,-4.871710,-7.543770,7.147600,5.898712],[4.885412,0.332382,3.946626,4.064240,0.471699,-3.909217,4.218036,2.864975,2.359105,-3.529926],[5.332297,2.637968,-8.738539,-4.343753,-6.948705,-6.492503,-8.428407,-6.072884,3.521227,-4.632660]]], dtype = "float64")#candidate|3073|(4, 9, 10)|const|float64
uop_3074 = relay.log(const_3073.astype('float64')) # shape=(4, 9, 10)
func_1013_call = mod.get_global_var('func_1013')
func_1016_call = mutated_mod.get_global_var('func_1016')
var_3088 = relay.var("var_3088", dtype = "float32", shape = (98,))#candidate|3088|(98,)|var|float32
call_3087 = func_1013_call(relay.reshape(var_3088.astype('float32'), [7, 14]))
call_3089 = func_1013_call(relay.reshape(var_3088.astype('float32'), [7, 14]))
const_3094 = relay.const([[[8.772368,-2.670720,0.195829,-0.485030,5.672000,-6.934144,2.633596,3.490085,-4.109435,4.701054],[6.544783,-1.965220,-1.538332,-0.816911,-3.668461,4.851924,6.995313,-1.169243,-8.063182,-2.284980],[2.465723,4.435086,-1.499174,-7.763718,-4.443844,-3.414477,-6.634125,-5.743737,-9.560504,2.634415],[-4.826897,-9.903219,9.082689,8.339201,8.447728,3.040078,-0.956702,0.575589,9.535348,-3.612105],[5.499260,-1.950300,0.525232,-2.881025,4.014224,-8.465323,5.355236,-7.754922,2.202480,-7.979789],[2.184147,8.594344,-1.647558,-9.016694,2.586430,8.659512,-5.788144,-3.616206,-3.150312,3.636503],[-9.184314,-0.091496,-4.739680,-0.653029,-3.820526,-2.594996,-9.918999,4.671848,-5.575475,5.948389],[-0.189337,-6.418613,-1.072869,-9.198703,8.597556,-2.365979,-7.348132,8.042078,9.065739,-0.455567],[-3.522495,7.812747,2.977416,2.864932,5.077384,7.113685,3.858046,-9.219956,-6.463128,9.212118]],[[-4.233011,0.828820,-4.947462,9.960006,6.447518,6.046109,-8.516345,-2.353773,9.964775,5.726313],[-1.398818,8.236250,-3.618601,6.019415,-3.604047,-6.047967,5.533168,8.099236,5.027167,3.754117],[6.438534,-8.758291,-8.485520,6.522680,7.301457,-5.501416,1.097175,2.716588,1.591636,-0.975897],[8.017186,-7.500398,-2.088326,-1.906441,-5.005328,-2.987169,-5.049762,6.602510,-9.890991,2.485542],[9.060507,0.143317,1.081993,-1.040196,-5.217048,-9.005137,5.305583,-4.123591,7.935773,8.082834],[-7.012591,7.452878,0.825362,5.539162,7.059857,8.896571,-8.530740,9.337112,5.976262,-8.924352],[-2.388830,-7.290221,8.019850,5.368117,7.865136,-6.065888,7.494603,4.795283,-3.876781,-6.312916],[5.454142,-8.784587,-9.575707,9.881134,9.359968,5.567219,-1.458509,-2.999693,-5.411199,-6.973244],[-5.035965,-8.842766,-6.705716,-6.448340,-6.634515,-2.580583,-8.423450,-1.767101,-4.722742,6.856398]],[[0.252794,5.310370,-0.095261,-8.169906,-5.534276,-0.361953,7.110082,-9.637181,-5.778858,7.646252],[5.932150,-8.205201,-2.609531,-2.906988,-6.585121,7.514507,7.218512,-2.948550,-5.775609,-8.447727],[0.248568,7.345055,0.210611,0.701102,0.522479,4.942198,-4.626297,-4.922855,-7.829056,-1.620303],[-0.317762,-2.969361,-0.746749,8.633744,5.588408,3.849298,7.912865,-6.824403,-6.475261,-8.582315],[-7.109559,-3.539650,-4.897025,8.365734,-8.073554,2.233592,3.183766,-1.721350,-3.987372,-3.522707],[1.239505,2.789382,9.549418,-8.506519,4.622455,7.579974,-5.306858,-0.943290,-5.700069,9.432780],[5.879773,-2.926576,-2.438913,2.655204,-1.548454,2.394898,0.004925,-8.344896,-7.712123,2.682750],[-6.728937,8.358906,-3.276871,1.746715,0.067109,0.781297,3.970451,-2.081792,-4.600374,7.405746],[5.748808,4.570127,9.241488,5.887684,-4.017078,4.049184,1.783428,4.741886,-7.692469,2.379059]],[[7.495288,1.373903,-6.500013,-1.686438,1.127598,1.276756,-6.445416,0.435596,1.751553,1.669303],[8.006337,-9.055186,4.440210,5.963018,-2.068080,-1.686212,7.341990,-0.692053,3.827343,7.900329],[-2.154572,7.926270,2.050451,-7.224332,-6.519082,-8.037025,-5.310034,-0.638163,-1.277919,-6.963042],[-7.185795,-4.729501,-2.765244,5.585014,0.416693,-2.741277,-0.425708,9.741029,-2.186619,-7.693545],[6.618569,1.957408,1.677281,-2.776057,4.162493,-6.607948,4.509028,9.531865,2.021524,0.075193],[5.530485,0.265700,3.021355,8.857826,-4.964385,-8.760434,-4.318584,-5.585959,-3.167067,2.267749],[6.865472,2.209016,-9.989082,-9.442544,-6.887404,9.152381,4.787287,7.351896,0.571818,-7.744644],[-5.574817,5.886904,-3.010802,-6.101796,-9.506084,-6.127758,2.954935,-5.554385,4.516520,6.721274],[-6.288427,6.753025,0.614271,0.619907,-3.101528,6.587451,-5.939047,2.899865,-7.220943,8.089855]]], dtype = "float64")#candidate|3094|(4, 9, 10)|const|float64
bop_3095 = relay.subtract(uop_3074.astype('uint64'), relay.reshape(const_3094.astype('uint64'), relay.shape_of(uop_3074))) # shape=(4, 9, 10)
func_2758_call = mod.get_global_var('func_2758')
func_2760_call = mutated_mod.get_global_var('func_2760')
call_3105 = relay.TupleGetItem(func_2758_call(), 1)
call_3106 = relay.TupleGetItem(func_2760_call(), 1)
uop_3107 = relay.exp(uop_3074.astype('float32')) # shape=(4, 9, 10)
func_390_call = mod.get_global_var('func_390')
func_393_call = mutated_mod.get_global_var('func_393')
const_3110 = relay.const([-4.758485,-4.883822,-1.772324,-8.701250,3.934730,4.854086,9.372354,2.913823,9.244149,-9.568696,-6.804161,1.484600,-7.005351,6.824415,-8.320907,5.408549,-0.953055,-5.603353,-6.543994,-7.897779], dtype = "float64")#candidate|3110|(20,)|const|float64
call_3109 = relay.TupleGetItem(func_390_call(relay.reshape(const_3110.astype('float64'), [2, 10])), 0)
call_3111 = relay.TupleGetItem(func_393_call(relay.reshape(const_3110.astype('float64'), [2, 10])), 0)
bop_3116 = relay.right_shift(uop_3107.astype('int8'), relay.reshape(uop_3074.astype('int8'), relay.shape_of(uop_3107))) # shape=(4, 9, 10)
bop_3122 = relay.bitwise_and(uop_3074.astype('uint32'), relay.reshape(bop_3116.astype('uint32'), relay.shape_of(uop_3074))) # shape=(4, 9, 10)
bop_3131 = relay.equal(bop_3095.astype('bool'), relay.reshape(const_3094.astype('bool'), relay.shape_of(bop_3095))) # shape=(4, 9, 10)
func_1665_call = mod.get_global_var('func_1665')
func_1666_call = mutated_mod.get_global_var('func_1666')
call_3140 = func_1665_call()
call_3141 = func_1665_call()
func_63_call = mod.get_global_var('func_63')
func_67_call = mutated_mod.get_global_var('func_67')
var_3145 = relay.var("var_3145", dtype = "float32", shape = (980,))#candidate|3145|(980,)|var|float32
call_3144 = func_63_call(relay.reshape(var_3145.astype('float32'), [7, 10, 14]), relay.reshape(var_3145.astype('float32'), [7, 10, 14]), )
call_3146 = func_63_call(relay.reshape(var_3145.astype('float32'), [7, 10, 14]), relay.reshape(var_3145.astype('float32'), [7, 10, 14]), )
bop_3153 = relay.bitwise_xor(bop_3095.astype('int16'), relay.reshape(bop_3131.astype('int16'), relay.shape_of(bop_3095))) # shape=(4, 9, 10)
uop_3159 = relay.erf(uop_3074.astype('float32')) # shape=(4, 9, 10)
bop_3164 = relay.bitwise_or(uop_3159.astype('uint64'), relay.reshape(bop_3095.astype('uint64'), relay.shape_of(uop_3159))) # shape=(4, 9, 10)
bop_3168 = relay.less(uop_3074.astype('bool'), relay.reshape(uop_3159.astype('bool'), relay.shape_of(uop_3074))) # shape=(4, 9, 10)
output = relay.Tuple([call_3087,var_3088,call_3105,call_3109,const_3110,bop_3122,call_3140,call_3144,var_3145,bop_3153,bop_3164,bop_3168,])
output2 = relay.Tuple([call_3089,var_3088,call_3106,call_3111,const_3110,bop_3122,call_3141,call_3146,var_3145,bop_3153,bop_3164,bop_3168,])
func_3192 = relay.Function([var_3088,var_3145,], output)
mod['func_3192'] = func_3192
mod = relay.transform.InferType()(mod)
var_3193 = relay.var("var_3193", dtype = "float32", shape = (98,))#candidate|3193|(98,)|var|float32
var_3194 = relay.var("var_3194", dtype = "float32", shape = (980,))#candidate|3194|(980,)|var|float32
output = func_3192(var_3193,var_3194,)
func_3195 = relay.Function([var_3193,var_3194,], output)
mutated_mod['func_3195'] = func_3195
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1914_call = mod.get_global_var('func_1914')
func_1916_call = mutated_mod.get_global_var('func_1916')
call_3217 = relay.TupleGetItem(func_1914_call(), 0)
call_3218 = relay.TupleGetItem(func_1916_call(), 0)
output = call_3217
output2 = call_3218
func_3221 = relay.Function([], output)
mod['func_3221'] = func_3221
mod = relay.transform.InferType()(mod)
output = func_3221()
func_3222 = relay.Function([], output)
mutated_mod['func_3222'] = func_3222
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1257_call = mod.get_global_var('func_1257')
func_1259_call = mutated_mod.get_global_var('func_1259')
call_3241 = relay.TupleGetItem(func_1257_call(), 1)
call_3242 = relay.TupleGetItem(func_1259_call(), 1)
const_3248 = relay.const([[[-0.540544,7.856709,-6.547118,-8.833591,-9.345829,3.859681,-2.068976,7.526756,6.984180,-7.592083,-3.416331,-3.711845,9.801738,3.587804],[-1.341912,9.156558,-8.035560,5.879581,-4.765260,4.986823,-3.486729,-1.999900,5.959225,0.871378,-2.994099,-9.322221,-2.579957,-6.813247],[-9.941519,9.008832,-6.215698,6.144845,8.133290,9.603544,-7.140689,-7.114663,5.087837,0.117984,-7.501013,-7.978926,1.362711,-1.343602],[6.395789,6.705180,-3.621174,8.659682,9.056755,2.179507,8.697244,6.869079,1.929849,-5.063512,-4.598435,3.783653,7.980486,-6.777051],[-8.529559,-9.831752,4.293745,4.105398,-6.656312,-6.381580,-0.352921,-4.875829,-1.813309,6.661149,-3.797520,0.640132,-8.428211,6.139786],[-0.734266,-6.431143,-7.584521,-1.081591,-6.571791,2.520464,-5.974316,-8.430719,2.487863,4.604069,-4.026343,-2.561717,-1.689662,-2.771704],[-6.488876,-7.783713,4.091141,-8.991214,-1.227723,5.569861,-1.997218,8.843221,-6.032002,8.483125,6.437309,4.311884,-3.877923,-7.554075],[8.522364,4.150474,-9.241472,-6.737102,-9.965165,-6.183112,-5.126327,2.390060,-4.949549,2.603664,-7.083982,6.431869,0.583240,-8.092719],[-0.558970,6.195630,9.363093,7.249175,-6.410132,6.191566,-8.178082,0.589849,8.054786,-9.223856,-5.993781,-0.243680,-8.661979,-1.339403],[-6.220031,3.396749,1.762574,6.520640,2.268423,-4.712922,-8.931250,-5.091295,8.316649,4.281214,-5.387708,0.120251,-1.357038,-0.242007]],[[5.579303,-4.260203,7.976002,-6.297358,-2.360601,1.579764,-7.591151,-6.821737,0.768021,-1.239799,-6.074594,8.508560,4.059274,5.448318],[-8.051270,-6.528598,-6.469631,8.926103,4.166237,-0.352169,4.767063,3.353194,-6.388811,3.746858,5.040344,-1.662802,5.801283,-1.413092],[-6.512014,-7.626798,5.390681,-0.902973,-6.222431,8.655061,0.674757,9.483365,8.025325,3.686658,-8.497760,1.178962,-6.554599,-4.612694],[8.308238,-1.616392,-6.714841,-7.911166,6.642054,-4.015026,6.547167,6.100615,6.440668,7.136996,-4.539845,-3.047549,2.491626,-0.557487],[-8.651627,-0.225485,4.890976,6.782683,3.048599,-3.454613,8.854129,-7.285463,-9.722159,7.757863,9.900529,5.457326,8.407236,-2.811536],[5.696071,-0.067143,8.834582,-4.193165,9.012987,5.055756,9.972326,-3.845750,-6.728795,4.525099,-4.991088,-1.218586,-6.870584,0.036945],[-6.795360,-9.135333,-6.343111,1.224314,6.462383,0.056276,9.617596,-6.579495,-3.241737,3.791605,9.987899,9.026369,-5.560229,8.025668],[0.340527,-1.509281,2.826251,-1.094064,-2.674296,5.300121,8.094594,-5.216913,3.200037,3.498050,7.546855,-8.909884,-1.483675,2.004842],[-1.953904,3.913375,0.359194,8.070801,-0.589505,7.075089,9.785275,2.532955,9.864968,6.704108,-7.403858,-0.504217,-0.833510,-0.204900],[-7.491035,1.656869,5.080557,1.861650,-3.863405,7.924366,-5.654347,5.005277,9.192559,-0.709323,3.645264,-4.431790,-4.282486,0.686594]],[[7.986854,9.530154,5.288191,-7.375589,2.361449,-1.436473,-0.505679,3.257656,-9.962137,-5.170971,7.629897,-7.098647,2.028386,-0.023653],[3.397111,-5.691544,0.405468,-2.913722,-2.246534,1.854341,-2.535467,4.101565,7.000023,3.304567,-9.302580,-1.816445,-5.254973,-3.004859],[9.944977,-2.853194,-4.184261,3.280059,-3.235707,5.278296,7.100034,3.411457,-1.433427,-7.148623,9.402429,5.828289,-3.219833,1.575706],[-4.472420,-3.276015,-5.523927,-3.963861,2.703858,-5.200849,8.129658,-4.587744,4.113487,3.980426,-5.304581,0.113330,7.375583,2.140122],[-7.500438,2.669072,-4.460772,-9.235324,-7.024931,-1.681106,6.969067,6.514594,-3.379447,3.674913,9.244105,3.456403,-3.286964,9.586193],[0.895764,1.070605,9.748524,-6.047309,-5.126601,-5.965973,4.793031,-2.271680,-4.948369,0.637883,9.787129,-8.316793,9.651726,4.312207],[-5.127892,-9.882865,9.210295,-4.837251,-2.565159,7.509812,3.024695,9.758299,-8.791564,9.705611,1.963154,1.595001,5.120127,-3.414617],[5.172448,7.951796,-8.227094,6.734849,7.430930,6.068091,-5.025916,0.186513,-8.114689,-9.842433,-1.482093,6.359909,-7.700120,2.955049],[-7.732742,4.175299,4.250681,-2.740499,-2.355837,7.112200,2.423235,7.559678,5.998062,7.868550,2.552755,-4.954947,-1.271809,2.616974],[-2.756962,-1.630908,-7.463828,-5.341741,-8.251522,-9.940866,-4.940145,1.117578,-9.504978,0.153139,0.066327,8.664642,-7.147631,-7.858722]],[[-0.547909,-6.499130,-1.119867,2.105300,-3.482511,-2.902353,-9.735476,4.484633,2.805136,-4.767038,9.442769,8.976687,7.603997,4.646584],[4.199252,-6.605087,9.234778,-0.650366,3.052101,6.395287,-6.887127,9.370901,-8.797858,4.510214,3.273533,5.485151,-0.757511,3.159748],[0.021307,7.791764,-9.293138,-9.023132,-0.665663,-8.697943,1.686980,1.124207,5.190565,-5.259191,2.038930,5.652305,-3.647387,7.510251],[-6.230780,-8.267900,1.527957,-0.196273,7.172799,-5.228862,2.576272,4.572685,-5.760546,-2.827745,9.102494,1.797894,2.680266,3.724914],[6.719388,-2.525752,4.276529,2.046679,-3.902956,0.570511,4.393669,-7.733632,-0.209095,6.313746,-4.781424,-9.937829,-2.330868,9.127118],[5.458141,2.534010,0.007542,-2.167908,-4.843084,-2.558185,7.706703,-3.445689,1.899265,7.248244,0.197531,-3.087359,6.416955,2.104449],[-8.738805,2.162567,-2.659106,-5.442414,-9.856558,-0.875074,-4.026648,6.395572,-2.080526,-6.854030,-8.360718,4.425409,-2.027314,-7.841406],[3.221778,-5.056953,-0.372519,0.802938,-5.822146,-6.905799,-1.427687,-5.437741,8.766935,-5.305917,1.895628,7.442134,-0.952181,8.451688],[-9.364493,-1.260218,-4.314336,5.718316,-1.543644,7.130476,-6.410654,5.436889,-0.587268,-3.884327,-1.170427,-3.050198,2.174278,8.224676],[-8.196772,5.096092,-3.652099,-1.786978,-3.538556,6.896935,-3.262081,6.435689,9.436901,0.475526,-3.369710,6.321470,-9.595954,3.605635]],[[-4.322629,-2.453416,1.983987,4.132108,5.619984,-1.974254,-0.268907,4.610034,-6.536076,0.700577,0.296312,-7.410205,-6.849205,-0.958992],[3.632415,3.458885,4.044946,-7.356171,0.179380,-6.598929,-3.972373,-7.451393,1.571685,8.279971,-4.593848,6.815701,-8.581055,-6.594779],[2.986586,0.728597,-6.159868,-1.994501,-5.068887,-8.546332,1.512065,2.500242,-4.681994,-9.063620,1.723735,7.690686,-1.989395,5.874649],[-3.400156,-0.833471,9.504248,-6.285221,-2.784273,7.947547,-7.089822,-0.737721,-1.402720,4.445748,8.069307,-4.724300,4.975005,-0.673125],[-6.494024,-0.542279,3.500474,8.043708,7.064646,-7.287888,-7.847510,-2.706509,-2.642966,-2.614543,-4.204153,1.425280,6.781255,-8.679955],[4.830575,1.731127,2.358820,4.449213,-0.184699,8.279823,-2.136994,2.480289,8.385383,1.908292,-0.181929,-1.069563,7.677447,-8.440302],[-0.228053,-2.837358,9.949928,3.653599,4.359651,-7.776269,7.352808,4.038780,3.806999,7.202006,1.494408,-3.145564,-9.341471,-8.225704],[-9.823237,6.275639,-5.118103,5.436199,9.579974,-8.508876,2.513719,-3.669847,-9.025138,-3.210677,-7.515042,-2.617028,3.783945,2.271160],[1.873337,5.247699,-3.387121,-0.329866,-6.178361,-9.061297,4.585441,2.570323,5.438852,2.388370,1.981893,-2.103799,5.689775,4.155858],[7.189707,3.914355,9.781883,1.846456,1.918572,-6.519826,6.626201,2.633821,5.961035,1.373350,-7.236484,-5.657881,-7.546860,3.654774]],[[4.573991,-8.099650,2.779691,2.706514,6.015556,-7.597826,0.739555,-4.176490,0.154990,2.393664,-8.928564,-3.042897,6.693523,3.752024],[7.537000,-2.416449,2.653054,2.399272,-4.417883,6.872519,3.988812,-9.775955,-4.667639,6.208863,-7.520020,-4.019196,4.788735,9.602750],[1.640204,0.023526,8.850596,9.706588,-2.003470,6.938662,-5.941607,-6.312473,-3.098651,-5.240051,-8.570260,-9.790767,-3.019478,7.622527],[9.789593,-3.915043,7.109364,3.510195,6.610647,-0.654580,-4.452216,-0.900854,-7.147318,-2.989632,8.959392,-9.125934,0.781943,-4.959963],[5.762744,3.323291,-5.280702,-6.137972,2.139634,-5.638499,-3.681161,2.670581,-3.515387,0.118261,-0.424452,0.515655,-8.796722,9.086445],[4.567193,9.712099,-9.637325,8.248517,0.180849,-9.940216,-4.181773,7.075233,8.493351,6.434608,8.291940,1.056200,-5.958305,6.113898],[-2.290985,-2.481835,8.893267,-9.719961,5.175678,-5.587158,2.928043,3.440041,-2.780456,4.993753,8.589451,5.859805,4.430121,9.624587],[-5.448772,4.981860,2.661980,-6.867473,5.446441,-5.989879,-8.819249,2.938962,-7.499409,3.466002,-4.739615,-4.310909,1.885388,-9.551473],[-6.046185,4.119905,-8.826724,1.714685,-0.634528,-2.606779,5.038664,-0.149338,-0.648611,5.948359,8.631183,5.361984,3.013617,1.280883],[2.507419,-4.235694,0.933756,-2.401933,-7.310522,-8.685177,3.701972,-9.643926,4.705972,7.815111,7.060088,-9.351209,2.754906,-6.573376]],[[-0.628218,-2.581647,7.505149,4.417842,-4.738449,-3.392362,-7.937481,7.880898,-6.376275,-4.089193,1.452086,6.164840,-4.434555,7.017818],[9.296686,8.439292,7.253974,7.704830,-9.186512,-0.763169,9.314630,0.494986,7.301609,9.072967,-7.361662,0.583909,0.611492,-3.552691],[5.767889,-7.403037,0.057792,-0.440793,9.082666,4.957097,-8.427384,-9.883300,1.610716,8.488745,-9.063296,-3.900594,-3.628860,-8.864650],[-8.890071,-6.194317,-5.346971,-4.736608,-2.693250,3.718709,-6.680868,0.606557,-7.127041,-5.559601,6.642802,-9.239854,7.451945,-6.177206],[-4.600387,8.388590,-8.561464,-3.514244,-3.599820,-4.629575,4.302478,-3.985931,5.057648,1.216696,1.284759,2.591038,1.930732,1.245630],[-0.969598,6.533935,-9.996709,6.326100,-1.302800,-2.081177,-1.618600,0.682716,-5.632387,9.054279,8.752749,9.120040,1.459770,3.162647],[-9.721834,3.171041,-6.241833,2.132900,7.374985,2.820892,9.291836,0.778471,4.732646,1.865380,-1.609320,7.109412,0.115930,7.085521],[7.731959,-4.563340,5.865332,-0.447604,-2.634399,-2.909846,-1.440346,7.559163,0.125993,3.285889,5.648832,-5.001666,5.168655,1.509523],[-6.310588,5.355509,4.160959,5.517626,5.494320,-0.902659,-1.130061,-3.304218,8.324057,-0.247079,-8.798277,3.365962,-8.534900,6.778126],[2.074075,9.837449,1.331100,2.101424,-2.590089,8.476707,-1.705653,8.553109,9.039092,1.523099,6.927660,2.865538,9.651636,6.516998]]], dtype = "float32")#candidate|3248|(7, 10, 14)|const|float32
bop_3249 = relay.less(call_3241.astype('bool'), relay.reshape(const_3248.astype('bool'), relay.shape_of(call_3241))) # shape=(7, 10, 14)
bop_3252 = relay.less(call_3242.astype('bool'), relay.reshape(const_3248.astype('bool'), relay.shape_of(call_3242))) # shape=(7, 10, 14)
func_2581_call = mod.get_global_var('func_2581')
func_2583_call = mutated_mod.get_global_var('func_2583')
var_3257 = relay.var("var_3257", dtype = "float64", shape = (1092,))#candidate|3257|(1092,)|var|float64
call_3256 = relay.TupleGetItem(func_2581_call(relay.reshape(var_3257.astype('float64'), [1092,])), 2)
call_3258 = relay.TupleGetItem(func_2583_call(relay.reshape(var_3257.astype('float64'), [1092,])), 2)
uop_3263 = relay.atan(const_3248.astype('float64')) # shape=(7, 10, 14)
var_3269 = relay.var("var_3269", dtype = "bool", shape = (7, 10, 14))#candidate|3269|(7, 10, 14)|var|bool
bop_3270 = relay.power(bop_3249.astype('float32'), relay.reshape(var_3269.astype('float32'), relay.shape_of(bop_3249))) # shape=(7, 10, 14)
bop_3273 = relay.power(bop_3252.astype('float32'), relay.reshape(var_3269.astype('float32'), relay.shape_of(bop_3252))) # shape=(7, 10, 14)
uop_3276 = relay.exp(uop_3263.astype('float32')) # shape=(7, 10, 14)
func_828_call = mod.get_global_var('func_828')
func_832_call = mutated_mod.get_global_var('func_832')
call_3280 = relay.TupleGetItem(func_828_call(relay.reshape(var_3257.astype('float64'), [1092,]), relay.reshape(var_3257.astype('float32'), [14, 13, 6]), ), 4)
call_3281 = relay.TupleGetItem(func_832_call(relay.reshape(var_3257.astype('float64'), [1092,]), relay.reshape(var_3257.astype('float32'), [14, 13, 6]), ), 4)
func_2933_call = mod.get_global_var('func_2933')
func_2936_call = mutated_mod.get_global_var('func_2936')
var_3283 = relay.var("var_3283", dtype = "float64", shape = (3, 88))#candidate|3283|(3, 88)|var|float64
call_3282 = func_2933_call(relay.reshape(var_3283.astype('float64'), [4, 6, 11]))
call_3284 = func_2933_call(relay.reshape(var_3283.astype('float64'), [4, 6, 11]))
output = relay.Tuple([call_3256,var_3257,bop_3270,uop_3276,call_3280,call_3282,var_3283,])
output2 = relay.Tuple([call_3258,var_3257,bop_3273,uop_3276,call_3281,call_3284,var_3283,])
func_3289 = relay.Function([var_3257,var_3269,var_3283,], output)
mod['func_3289'] = func_3289
mod = relay.transform.InferType()(mod)
mutated_mod['func_3289'] = func_3289
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3289_call = mutated_mod.get_global_var('func_3289')
var_3291 = relay.var("var_3291", dtype = "float64", shape = (1092,))#candidate|3291|(1092,)|var|float64
var_3292 = relay.var("var_3292", dtype = "bool", shape = (7, 10, 14))#candidate|3292|(7, 10, 14)|var|bool
var_3293 = relay.var("var_3293", dtype = "float64", shape = (3, 88))#candidate|3293|(3, 88)|var|float64
call_3290 = func_3289_call(var_3291,var_3292,var_3293,)
output = call_3290
func_3294 = relay.Function([var_3291,var_3292,var_3293,], output)
mutated_mod['func_3294'] = func_3294
mutated_mod = relay.transform.InferType()(mutated_mod)
func_940_call = mod.get_global_var('func_940')
func_941_call = mutated_mod.get_global_var('func_941')
call_3323 = func_940_call()
call_3324 = func_940_call()
func_2758_call = mod.get_global_var('func_2758')
func_2760_call = mutated_mod.get_global_var('func_2760')
call_3325 = relay.TupleGetItem(func_2758_call(), 0)
call_3326 = relay.TupleGetItem(func_2760_call(), 0)
output = relay.Tuple([call_3323,call_3325,])
output2 = relay.Tuple([call_3324,call_3326,])
func_3329 = relay.Function([], output)
mod['func_3329'] = func_3329
mod = relay.transform.InferType()(mod)
mutated_mod['func_3329'] = func_3329
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3329_call = mutated_mod.get_global_var('func_3329')
call_3330 = func_3329_call()
output = call_3330
func_3331 = relay.Function([], output)
mutated_mod['func_3331'] = func_3331
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3376 = relay.var("var_3376", dtype = "uint64", shape = (2, 16))#candidate|3376|(2, 16)|var|uint64
var_3377 = relay.var("var_3377", dtype = "uint64", shape = (2, 16))#candidate|3377|(2, 16)|var|uint64
bop_3378 = relay.equal(var_3376.astype('bool'), relay.reshape(var_3377.astype('bool'), relay.shape_of(var_3376))) # shape=(2, 16)
output = bop_3378
output2 = bop_3378
func_3383 = relay.Function([var_3376,var_3377,], output)
mod['func_3383'] = func_3383
mod = relay.transform.InferType()(mod)
var_3384 = relay.var("var_3384", dtype = "uint64", shape = (2, 16))#candidate|3384|(2, 16)|var|uint64
var_3385 = relay.var("var_3385", dtype = "uint64", shape = (2, 16))#candidate|3385|(2, 16)|var|uint64
output = func_3383(var_3384,var_3385,)
func_3386 = relay.Function([var_3384,var_3385,], output)
mutated_mod['func_3386'] = func_3386
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1822_call = mod.get_global_var('func_1822')
func_1824_call = mutated_mod.get_global_var('func_1824')
call_3391 = relay.TupleGetItem(func_1822_call(), 2)
call_3392 = relay.TupleGetItem(func_1824_call(), 2)
output = relay.Tuple([call_3391,])
output2 = relay.Tuple([call_3392,])
func_3414 = relay.Function([], output)
mod['func_3414'] = func_3414
mod = relay.transform.InferType()(mod)
output = func_3414()
func_3415 = relay.Function([], output)
mutated_mod['func_3415'] = func_3415
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1665_call = mod.get_global_var('func_1665')
func_1666_call = mutated_mod.get_global_var('func_1666')
call_3433 = func_1665_call()
call_3434 = func_1665_call()
output = call_3433
output2 = call_3434
func_3437 = relay.Function([], output)
mod['func_3437'] = func_3437
mod = relay.transform.InferType()(mod)
output = func_3437()
func_3438 = relay.Function([], output)
mutated_mod['func_3438'] = func_3438
mutated_mod = relay.transform.InferType()(mutated_mod)
func_628_call = mod.get_global_var('func_628')
func_629_call = mutated_mod.get_global_var('func_629')
call_3459 = relay.TupleGetItem(func_628_call(), 1)
call_3460 = relay.TupleGetItem(func_629_call(), 1)
uop_3497 = relay.atan(call_3459.astype('float32')) # shape=(980,)
uop_3499 = relay.atan(call_3460.astype('float32')) # shape=(980,)
func_1997_call = mod.get_global_var('func_1997')
func_1999_call = mutated_mod.get_global_var('func_1999')
call_3506 = relay.TupleGetItem(func_1997_call(relay.reshape(call_3459.astype('float32'), [980,])), 1)
call_3507 = relay.TupleGetItem(func_1999_call(relay.reshape(call_3459.astype('float32'), [980,])), 1)
output = relay.Tuple([uop_3497,call_3506,])
output2 = relay.Tuple([uop_3499,call_3507,])
func_3525 = relay.Function([], output)
mod['func_3525'] = func_3525
mod = relay.transform.InferType()(mod)
output = func_3525()
func_3526 = relay.Function([], output)
mutated_mod['func_3526'] = func_3526
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3414_call = mod.get_global_var('func_3414')
func_3415_call = mutated_mod.get_global_var('func_3415')
call_3552 = relay.TupleGetItem(func_3414_call(), 0)
call_3553 = relay.TupleGetItem(func_3415_call(), 0)
var_3559 = relay.var("var_3559", dtype = "float32", shape = (980,))#candidate|3559|(980,)|var|float32
bop_3560 = relay.logical_or(call_3552.astype('bool'), relay.reshape(var_3559.astype('bool'), relay.shape_of(call_3552))) # shape=(980,)
bop_3563 = relay.logical_or(call_3553.astype('bool'), relay.reshape(var_3559.astype('bool'), relay.shape_of(call_3553))) # shape=(980,)
uop_3565 = relay.erf(bop_3560.astype('float64')) # shape=(980,)
uop_3567 = relay.erf(bop_3563.astype('float64')) # shape=(980,)
bop_3570 = relay.bitwise_xor(uop_3565.astype('int64'), relay.reshape(var_3559.astype('int64'), relay.shape_of(uop_3565))) # shape=(980,)
bop_3573 = relay.bitwise_xor(uop_3567.astype('int64'), relay.reshape(var_3559.astype('int64'), relay.shape_of(uop_3567))) # shape=(980,)
func_2234_call = mod.get_global_var('func_2234')
func_2237_call = mutated_mod.get_global_var('func_2237')
var_3577 = relay.var("var_3577", dtype = "float64", shape = (1092,))#candidate|3577|(1092,)|var|float64
call_3576 = relay.TupleGetItem(func_2234_call(relay.reshape(var_3577.astype('float64'), [14, 78])), 3)
call_3578 = relay.TupleGetItem(func_2237_call(relay.reshape(var_3577.astype('float64'), [14, 78])), 3)
func_63_call = mod.get_global_var('func_63')
func_67_call = mutated_mod.get_global_var('func_67')
call_3579 = func_63_call(relay.reshape(var_3559.astype('float32'), [7, 10, 14]), relay.reshape(var_3559.astype('float32'), [7, 10, 14]), )
call_3580 = func_63_call(relay.reshape(var_3559.astype('float32'), [7, 10, 14]), relay.reshape(var_3559.astype('float32'), [7, 10, 14]), )
output = relay.Tuple([bop_3570,call_3576,var_3577,call_3579,])
output2 = relay.Tuple([bop_3573,call_3578,var_3577,call_3580,])
func_3581 = relay.Function([var_3559,var_3577,], output)
mod['func_3581'] = func_3581
mod = relay.transform.InferType()(mod)
var_3582 = relay.var("var_3582", dtype = "float32", shape = (980,))#candidate|3582|(980,)|var|float32
var_3583 = relay.var("var_3583", dtype = "float64", shape = (1092,))#candidate|3583|(1092,)|var|float64
output = func_3581(var_3582,var_3583,)
func_3584 = relay.Function([var_3582,var_3583,], output)
mutated_mod['func_3584'] = func_3584
mutated_mod = relay.transform.InferType()(mutated_mod)
func_668_call = mod.get_global_var('func_668')
func_669_call = mutated_mod.get_global_var('func_669')
call_3697 = relay.TupleGetItem(func_668_call(), 1)
call_3698 = relay.TupleGetItem(func_669_call(), 1)
func_3192_call = mod.get_global_var('func_3192')
func_3195_call = mutated_mod.get_global_var('func_3195')
var_3720 = relay.var("var_3720", dtype = "float32", shape = (98,))#candidate|3720|(98,)|var|float32
const_3721 = relay.const([0.108022,1.359445,-8.993155,9.898007,-4.835101,5.933178,9.300352,0.341284,0.372656,3.633938,0.783427,-0.105383,5.993725,-2.568808,4.714043,5.615950,7.860996,-3.178435,-3.609227,7.883733,3.139713,0.065409,-7.802982,-0.299879,2.905682,5.336331,-9.744634,-7.547275,1.497930,-8.090285,-9.811218,-8.659505,8.074801,3.755198,-5.689928,-2.534940,1.952259,7.080558,-8.841311,-1.841208,9.472859,-3.642469,4.935264,-1.922644,7.289582,-9.877440,-7.989415,-0.831560,5.237197,6.456769,-0.889278,1.307967,-2.040418,2.948362,-8.053414,-7.797506,-9.608066,8.820631,7.731313,-8.519494,1.668344,-6.023243,7.981650,9.451966,0.767557,4.244140,-3.208641,0.567205,1.183024,7.696472,-1.962997,8.429364,-5.819910,1.264114,-3.434051,3.966322,-2.517326,7.730098,-9.391911,-8.756299,-6.087256,7.363544,-5.617797,0.555773,-1.423660,-7.681995,-0.645691,7.739231,-8.992815,-8.911223,-4.375079,-5.029315,3.599320,5.942852,-9.333985,3.364587,4.699114,0.308872,-2.841584,5.184864,8.196837,2.870974,4.089551,1.587053,6.263192,7.743325,3.087222,-7.958303,1.599924,-2.288685,7.472403,-1.298101,-5.758765,2.769007,-0.893662,2.700972,-1.287101,7.900474,5.657177,7.544533,-4.811900,2.530319,7.832151,8.597388,3.047943,-5.981938,3.520567,5.132217,3.428694,-5.140469,4.546580,0.555753,4.045093,9.792785,8.578300,6.230557,2.957173,1.251755,0.673962,-4.480053,-4.258936,1.465948,6.775422,-7.315987,7.753521,5.897333,-9.816000,-1.797198,7.701818,0.971099,7.172923,8.039113,0.096172,1.217754,8.290771,9.592981,-0.964794,4.742026,1.422690,-6.390439,4.254852,6.845488,1.924804,9.169624,1.187820,4.026373,3.469732,-8.794009,-7.771624,1.532451,7.651673,4.186754,-1.530879,3.811851,-6.398650,-0.853851,7.721301,-1.124268,-9.696427,-0.933440,-5.126883,-5.183672,-9.678718,-2.735911,-3.402885,-1.129612,-0.677827,4.507156,-0.763193,-5.799948,1.214197,-0.254243,-2.069438,2.489852,-8.044225,-2.002809,4.550717,2.725123,5.153089,-1.244167,6.877694,2.855131,9.013923,-6.334326,-8.526545,-0.865509,-1.169560,-3.785445,9.523332,0.550233,8.640610,-1.230668,-7.054791,-4.683035,3.025715,3.173395,6.896980,-4.896881,2.300761,8.841854,8.344261,6.586179,-5.068056,-4.432471,5.168108,-9.147246,-5.034325,-5.796828,-7.408783,-4.774718,7.784312,-3.577919,1.939331,5.150462,-5.878179,-5.939429,9.719978,0.355014,6.774178,9.354734,1.429213,-2.360945,0.522508,-8.729935,2.097308,2.394656,-6.303226,-2.476846,1.432554,-7.855625,-1.820217,2.436906,8.484326,8.090811,3.413714,7.811029,-8.025330,-2.477497,-7.768584,9.176148,3.566891,1.706899,9.275510,6.444115,4.484543,-8.026855,-6.894216,5.381817,-2.667629,7.897982,-4.613328,-6.486514,-0.608932,-9.798708,0.725134,-0.389804,-9.719286,-6.020743,3.198864,-5.045634,3.737120,-3.492637,7.807869,0.916715,7.726105,8.168071,-6.715713,-3.860201,-3.458050,4.549872,5.958092,-8.312939,4.134301,6.904252,4.573808,-0.919879,-0.477629,-6.682797,-2.395953,0.747641,-2.067431,3.563890,-1.484156,5.790165,-8.656056,-3.383183,6.331002,-3.605931,3.878308,9.343170,0.641446,8.045975,0.026203,2.549393,-0.290413,9.620860,9.694121,7.294623,-0.442519,-5.555513,3.239332,-6.207375,-7.662539,-2.037521,-3.823944,-6.752769,2.838312,7.449795,6.005293,-4.740415,9.266908,4.209136,9.845883,-1.061783,2.312459,-6.653749,3.909996,4.712198,9.635355,8.276410,-3.109238,-9.418807,-2.820479,-8.628730,-0.100924,9.733563,-3.460255,5.185071,7.343003,1.544898,-8.079040,5.584313,2.031056,6.072355,-5.697812,-5.809647,-8.785275,-7.074295,5.259222,1.246572,-9.410315,4.959686,8.859192,-1.579127,8.332233,6.074665,5.847560,1.659673,-9.205949,-1.503065,-6.351591,6.439645,4.665957,2.999043,-6.835762,-0.788236,3.393856,2.495375,-2.798786,3.394029,4.220686,-8.920481,8.695498,8.805033,-4.061182,4.014884,9.888512,-8.563573,-8.177442,3.719489,-3.973741,8.276376,1.367591,-2.065302,-2.311399,2.284996,-9.139700,3.030184,-0.171742,4.021847,-8.880509,3.542128,5.599536,-9.364199,8.105718,-7.920009,9.336462,1.742752,-3.072459,9.767256,5.968317,1.718456,-0.393178,4.226068,2.712677,1.058549,7.647029,6.296715,-1.718264,0.355084,8.782727,3.569398,7.986679,-4.725455,-8.382903,6.990147,-5.681710,-6.471170,9.187528,8.672353,-6.852648,-1.239133,5.544891,5.833532,6.561763,9.106412,-8.458455,8.342946,3.318635,-1.540805,5.275541,4.902951,-6.346091,-9.113816,-1.573128,-7.400543,0.581313,-0.427979,8.307458,-9.195891,-1.559915,8.532660,5.269073,0.751164,-5.830758,-1.275824,6.951710,-8.927019,3.256363,0.203362,-1.805045,1.431966,-8.847071,9.931053,3.697654,-9.993764,2.370648,-1.521409,-8.046850,-1.855973,9.849697,4.282352,-0.904295,-7.658186,-8.363390,9.368978,-4.889081,-4.224294,5.522899,-8.171623,-4.818939,-6.108136,-1.654200,-2.537977,-9.240654,-9.359298,8.119260,-3.991086,1.528272,-0.324172,-5.818012,-0.723517,-2.800557,8.082018,-9.853390,-9.830149,-3.699561,1.439256,5.569648,-3.739940,-4.393337,-8.963970,-5.363736,1.831674,5.664200,2.499750,-9.499790,-7.261699,7.891593,-2.694510,8.586099,-4.239601,4.927675,0.693098,2.026694,3.792545,-3.760872,7.757969,-3.687934,-4.005958,-8.862367,-0.580698,2.175789,9.623056,-0.377535,6.089823,-0.366068,-1.776800,0.154380,9.394686,2.532021,-7.695778,-7.765919,-4.648472,-8.985924,-1.846259,-3.455344,8.322926,-4.007077,-9.698467,-3.559544,-3.846859,2.726117,4.272368,-9.846016,4.890959,0.437326,5.358020,-7.392541,-8.968213,-7.643697,3.470619,1.699749,2.683106,-6.543034,0.578238,8.849571,1.109859,-7.981325,9.158501,0.179244,-7.721082,-7.653570,-9.541862,7.059020,4.373768,-0.484633,-7.445478,-3.399074,7.104172,-9.196734,3.485490,-8.182099,-0.117933,7.188764,-0.325496,4.505284,7.189939,-3.558581,-6.324399,6.892518,-1.835693,-0.594327,2.756177,-8.498773,8.039876,4.577702,-9.542360,-8.910542,-5.376178,-7.892928,-0.314987,3.456640,4.238981,-0.647643,3.959985,9.024971,3.189417,8.448788,-1.416741,1.944565,-5.412665,6.711391,-1.423170,2.519968,2.705559,9.457366,2.258599,-1.159216,8.289638,-1.231535,-2.394604,-8.817484,-8.786692,-6.834570,1.911000,-8.807250,1.607143,-1.451182,2.678218,-0.888942,3.064854,1.958122,4.156674,3.492598,-6.846209,6.596943,2.163869,-7.741504,5.608073,0.719414,-0.192178,-3.946446,9.119776,6.774873,1.270206,3.208181,-7.662177,3.819662,-6.800926,-6.645881,8.516622,1.281567,8.961912,-4.570124,0.994313,5.660363,6.212259,1.415806,-4.480828,-6.336247,-3.649901,-6.020098,-4.219113,-7.785780,-2.031655,8.415469,7.427387,-7.173696,-5.539405,0.755559,-9.747584,8.080488,5.106335,-8.163507,0.219017,1.195116,6.330344,-9.940786,3.713468,-9.607412,7.286436,9.182733,0.995906,8.619698,-5.744959,8.744727,0.423690,8.436962,6.135908,-0.293707,-1.064540,-4.379584,2.628257,2.127719,-2.844273,-9.820350,3.955346,-6.326936,-8.563090,-8.199345,-4.321869,8.849198,-0.043687,-2.281448,2.434626,-8.077200,-2.688533,1.091557,-1.240091,0.843049,-7.358532,-3.732329,5.251813,-9.335818,4.045666,9.560334,-4.865924,8.074785,4.078670,-5.245348,6.683530,-0.888958,-7.893481,5.918435,-6.279972,4.410835,9.728519,-8.929707,-9.165769,-6.093790,1.937249,9.479029,-4.940727,-1.004196,8.844688,-5.140881,0.073252,-0.649821,-8.004554,-6.085207,-9.773759,-4.375907,-0.556963,5.948496,8.900612,-2.144921,1.238515,9.464534,-1.861951,6.915833,-8.167736,-9.386133,-1.651131,2.913436,6.051615,9.629657,8.969074,2.079555,-1.786514,-1.707685,-7.585888,-0.444383,6.667508,5.782040,5.054205,3.058843,5.227210,2.573892,-3.766956,-6.752268,9.742939,-1.590292,9.371415,-3.982028,-1.281611,-5.043353,4.737775,-5.034246,-8.669625,-5.481836,-1.417922,0.688190,-5.581874,3.154513,-3.500283,-3.756663,4.433433,-2.298104,-8.976424,-6.649728,-0.299159,5.770475,4.609255,-5.881816,2.990114,7.593679,-1.693098,9.812011,7.155759,1.835180,0.564632,7.302707,-1.155309,2.690561,-7.369599,1.624406,-4.646920,-9.230204,-2.775799,1.144148,-5.278617,9.330524,-3.222898,5.160180,0.047279,2.780142,-2.591485,5.198697,-5.950614,5.772549,-2.465461,1.959023,0.159537,-8.706570,-5.189142,5.746475,-6.600830,0.985148,-0.083452,2.638904,-7.911872,-0.531786,5.866126,1.864380,-9.512631,6.198744,-7.772209,-8.601758,-6.663066,0.941525,-6.887671,4.540761,-7.718708,0.718757,1.728467,-4.287282,2.403576,-8.271813,8.108659,9.156809,-3.067456,-9.872385,9.343774,-3.919316,-6.434999,5.057517,6.766660,5.378588,4.990301,-5.702154,6.747060,-3.356012,9.850744,-2.441035,8.008717,-1.145356,-9.359515,-5.154541,1.515990,5.764642,-7.559599,4.135999,-3.851420,6.804629,9.306602,-7.390022,4.839130,-0.787806,-7.674444,9.356536,-0.540627,7.490385,-7.873911,-1.899664,6.315566,6.996566,-8.947076,2.351923,-9.377450,2.139936,-4.722280,-3.770728,-2.735029,-1.111166,2.894577,-4.839908,2.516815,-1.689140,1.987426,-3.442509,3.037466,3.356751,-7.149527,-2.638369,2.474728,-5.001041,1.894664,2.976474,2.031548,-3.293859,3.229523,-1.719563,1.038835,2.503889,-9.324723,3.691777,3.280117,4.381134,4.124258,-8.869914,3.933418,-3.960297,-8.398729,8.840585,8.145809,-1.298663,-6.487039,8.262141,-3.517200,3.243437,-3.838318,-3.786491,6.926918,7.314225,5.242208,2.633983,9.673511,8.942715,-6.045866,8.157305,9.137564,-3.059311,6.451943,2.554164,-1.491710,-8.090193,9.754353,5.868676,-5.552318,4.294349,-6.063656,4.937063,-1.040849,3.297681,7.830961,-4.158395,4.531242,-1.885212,-2.216197,-0.623220,-7.582188,-6.743675,2.268491,-1.592243,-7.179867,1.236320,2.336180,-6.550856,8.172648,-5.226388,0.135596,1.895621,3.604241,5.905466,3.141136,5.642549,-5.857747,5.730740,2.579151,1.863918,0.515260,-8.272798,4.985905,-1.602546,5.823778,0.150535,5.887233,6.351708,5.359531], dtype = "float32")#candidate|3721|(980,)|const|float32
call_3719 = relay.TupleGetItem(func_3192_call(relay.reshape(var_3720.astype('float32'), [98,]), relay.reshape(const_3721.astype('float32'), [980,]), ), 8)
call_3722 = relay.TupleGetItem(func_3195_call(relay.reshape(var_3720.astype('float32'), [98,]), relay.reshape(const_3721.astype('float32'), [980,]), ), 8)
func_3329_call = mod.get_global_var('func_3329')
func_3331_call = mutated_mod.get_global_var('func_3331')
call_3723 = relay.TupleGetItem(func_3329_call(), 1)
call_3724 = relay.TupleGetItem(func_3331_call(), 1)
bop_3725 = relay.less(call_3719.astype('bool'), relay.reshape(const_3721.astype('bool'), relay.shape_of(call_3719))) # shape=(980,)
bop_3728 = relay.less(call_3722.astype('bool'), relay.reshape(const_3721.astype('bool'), relay.shape_of(call_3722))) # shape=(980,)
output = relay.Tuple([call_3697,var_3720,call_3723,bop_3725,])
output2 = relay.Tuple([call_3698,var_3720,call_3724,bop_3728,])
func_3729 = relay.Function([var_3720,], output)
mod['func_3729'] = func_3729
mod = relay.transform.InferType()(mod)
mutated_mod['func_3729'] = func_3729
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3730 = relay.var("var_3730", dtype = "float32", shape = (98,))#candidate|3730|(98,)|var|float32
func_3729_call = mutated_mod.get_global_var('func_3729')
call_3731 = func_3729_call(var_3730)
output = call_3731
func_3732 = relay.Function([var_3730], output)
mutated_mod['func_3732'] = func_3732
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3047_call = mod.get_global_var('func_3047')
func_3049_call = mutated_mod.get_global_var('func_3049')
call_3741 = relay.TupleGetItem(func_3047_call(), 0)
call_3742 = relay.TupleGetItem(func_3049_call(), 0)
output = call_3741
output2 = call_3742
func_3812 = relay.Function([], output)
mod['func_3812'] = func_3812
mod = relay.transform.InferType()(mod)
mutated_mod['func_3812'] = func_3812
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3812_call = mutated_mod.get_global_var('func_3812')
call_3813 = func_3812_call()
output = call_3813
func_3814 = relay.Function([], output)
mutated_mod['func_3814'] = func_3814
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3329_call = mod.get_global_var('func_3329')
func_3331_call = mutated_mod.get_global_var('func_3331')
call_3837 = relay.TupleGetItem(func_3329_call(), 0)
call_3838 = relay.TupleGetItem(func_3331_call(), 0)
output = relay.Tuple([call_3837,])
output2 = relay.Tuple([call_3838,])
func_3881 = relay.Function([], output)
mod['func_3881'] = func_3881
mod = relay.transform.InferType()(mod)
output = func_3881()
func_3882 = relay.Function([], output)
mutated_mod['func_3882'] = func_3882
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3525_call = mod.get_global_var('func_3525')
func_3526_call = mutated_mod.get_global_var('func_3526')
call_3891 = relay.TupleGetItem(func_3525_call(), 1)
call_3892 = relay.TupleGetItem(func_3526_call(), 1)
output = call_3891
output2 = call_3892
func_3901 = relay.Function([], output)
mod['func_3901'] = func_3901
mod = relay.transform.InferType()(mod)
output = func_3901()
func_3902 = relay.Function([], output)
mutated_mod['func_3902'] = func_3902
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3221_call = mod.get_global_var('func_3221')
func_3222_call = mutated_mod.get_global_var('func_3222')
call_3925 = func_3221_call()
call_3926 = func_3221_call()
output = relay.Tuple([call_3925,])
output2 = relay.Tuple([call_3926,])
func_3942 = relay.Function([], output)
mod['func_3942'] = func_3942
mod = relay.transform.InferType()(mod)
output = func_3942()
func_3943 = relay.Function([], output)
mutated_mod['func_3943'] = func_3943
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3944 = relay.var("var_3944", dtype = "float64", shape = (3, 2, 8))#candidate|3944|(3, 2, 8)|var|float64
uop_3945 = relay.cos(var_3944.astype('float64')) # shape=(3, 2, 8)
output = relay.Tuple([uop_3945,])
output2 = relay.Tuple([uop_3945,])
func_3949 = relay.Function([var_3944,], output)
mod['func_3949'] = func_3949
mod = relay.transform.InferType()(mod)
var_3950 = relay.var("var_3950", dtype = "float64", shape = (3, 2, 8))#candidate|3950|(3, 2, 8)|var|float64
output = func_3949(var_3950)
func_3951 = relay.Function([var_3950], output)
mutated_mod['func_3951'] = func_3951
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3414_call = mod.get_global_var('func_3414')
func_3415_call = mutated_mod.get_global_var('func_3415')
call_3953 = relay.TupleGetItem(func_3414_call(), 0)
call_3954 = relay.TupleGetItem(func_3415_call(), 0)
output = call_3953
output2 = call_3954
func_3957 = relay.Function([], output)
mod['func_3957'] = func_3957
mod = relay.transform.InferType()(mod)
mutated_mod['func_3957'] = func_3957
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3957_call = mutated_mod.get_global_var('func_3957')
call_3958 = func_3957_call()
output = call_3958
func_3959 = relay.Function([], output)
mutated_mod['func_3959'] = func_3959
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3963 = relay.var("var_3963", dtype = "float64", shape = (16, 11))#candidate|3963|(16, 11)|var|float64
var_3964 = relay.var("var_3964", dtype = "float64", shape = (16, 11))#candidate|3964|(16, 11)|var|float64
bop_3965 = relay.multiply(var_3963.astype('float64'), relay.reshape(var_3964.astype('float64'), relay.shape_of(var_3963))) # shape=(16, 11)
output = relay.Tuple([bop_3965,])
output2 = relay.Tuple([bop_3965,])
F = relay.Function([var_3963,var_3964,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_3963,var_3964,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
	relay.transform.DefuseOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_3963= np.array([[-0.911308,-3.068856,-4.314006,6.406383,3.167134,-6.850518,8.856309,-7.495545,-4.088577,2.344324,-6.939158],[-4.322998,-3.888378,6.200769,3.600401,4.832332,-6.366533,-4.911346,9.432481,-7.665603,-8.220430,1.675500],[-8.241068,-0.196621,-5.836126,1.571692,-0.761613,-6.770115,-3.299165,7.435259,-6.106547,2.436721,-5.612667],[3.588273,-4.696715,-3.731848,-5.672104,-7.446410,-7.597262,7.648999,-2.992504,5.567131,5.358428,-4.088677],[3.048795,3.257652,-9.966196,1.240801,-9.913076,0.595957,-4.963068,3.084730,7.893254,-5.143069,6.842435],[-4.655219,-7.332555,-2.160067,-1.327571,4.147644,-5.489696,1.608296,-4.016646,1.137537,6.637888,4.236183],[-1.173774,3.718591,-0.594009,5.576117,6.677737,-5.210306,-4.273624,1.804555,5.348479,-5.041164,1.111976],[-2.368586,-9.858361,5.612698,-3.620003,-8.216085,6.628399,-1.132649,3.838624,8.849004,-0.312941,-4.875840],[-9.189872,0.733165,-1.637430,6.269188,8.651180,5.491305,7.987241,4.096108,9.816837,5.372933,6.446615],[6.958698,7.649757,-5.810802,-7.885805,-6.215377,-9.597427,-8.687383,-0.339717,2.213701,9.719324,1.686571],[8.927524,4.142607,-0.663361,0.441990,-8.035130,-7.893981,-6.148985,3.675531,8.852997,4.833418,3.955588],[5.230030,-8.859023,7.398927,1.460631,-3.836745,-3.740314,-6.164317,-3.454139,-4.438974,-9.291794,8.359620],[9.938165,4.287199,-7.526197,2.084573,-9.649276,8.006603,2.598441,-0.462869,-3.719418,4.368389,-1.281185],[5.909158,9.613012,-9.542931,9.505556,-4.896896,-6.140222,6.878682,9.527874,5.113195,9.883919,-4.529042],[7.076438,-3.759017,4.254166,-6.797734,5.799328,6.260587,-3.276027,-9.921741,1.196214,-0.898156,-3.329454],[-4.380391,-1.357775,3.081411,2.079963,-1.028211,-9.365165,-1.341444,-5.084622,-7.792415,-3.379732,3.995206]], dtype='float64')
module1.set_input('var_3963', input_3963)
input_3964= np.array([[3.246543,-6.433632,-4.268345,-0.949855,3.057303,-8.807436,-7.465165,6.263838,5.774886,0.899814,-1.084895],[-2.927560,-6.604072,-5.199915,-4.600380,5.457064,1.195820,-5.046283,0.551932,-3.948617,8.883531,-6.088767],[-6.608531,7.533364,-2.858924,-9.780314,-3.275556,3.419161,3.414511,-9.417662,0.386465,3.404688,4.685815],[5.669778,-7.450641,3.121239,-0.769270,-3.164002,-7.941136,8.360229,-7.040946,3.115056,-2.096042,8.826497],[2.066766,6.505721,-4.534255,3.000792,-8.829406,-3.605785,4.210910,-3.073439,7.833890,-3.682284,9.376163],[-8.205172,2.382099,-2.497072,3.955325,2.815036,4.854804,8.623374,0.459369,-9.807347,5.990970,6.763331],[-0.210392,9.160324,-3.659847,2.319457,9.257099,5.387981,-2.481336,-1.730638,1.724127,-9.831532,-4.502182],[-5.090493,-9.651490,1.805770,7.617613,-0.206706,-3.701825,-3.219700,-0.790537,-4.390191,1.417692,-3.479575],[-8.475073,9.428893,3.938428,-9.392070,-3.743519,5.706188,4.032338,-3.611042,6.422568,8.217758,-0.278125],[-3.369630,8.957127,-5.071853,-1.313950,-3.890308,6.728497,0.926388,4.226915,-9.430144,-6.842842,0.157853],[-3.542753,8.010723,-5.885043,-2.912213,-4.396683,7.502399,0.881946,-7.596006,8.972386,-8.358823,6.552233],[1.153230,-0.455890,-6.421886,4.706490,-1.982858,5.075137,-1.367034,-2.211609,1.481190,1.860429,3.662281],[-0.476983,7.628641,-2.470453,1.852507,0.005401,3.642606,-0.553932,-1.925355,4.285871,-9.723345,-4.244744],[-0.101029,7.373717,1.083098,9.237758,8.354476,2.638020,7.578285,1.936335,4.748587,5.623361,-5.958887],[-3.047149,3.632863,0.518129,-8.254515,-1.692337,7.364226,-0.522659,5.878037,9.470570,-0.442714,3.209409],[-0.352189,-9.891991,5.076401,-6.662796,2.725682,-1.048753,-3.285974,-5.928313,-0.354660,-6.616954,-0.545337]], dtype='float64')
module1.set_input('var_3964', input_3964)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_3963, input_3964, )
res3 = intrp3.evaluate()(input_3963, input_3964, )
res4 = intrp4.evaluate()(input_3963, input_3964, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input('var_3963', input_3963)
module5.set_input('var_3964', input_3964)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_3963, input_3964, )
res7 = intrp7.evaluate()(input_3963, input_3964, )
res8 = intrp8.evaluate()(input_3963, input_3964, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input('var_3963', input_3963)
module9.set_input('var_3964', input_3964)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_3963, input_3964, )
res11 = intrp11.evaluate()(input_3963, input_3964, )
res12 = intrp12.evaluate()(input_3963, input_3964, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input('var_3963', input_3963)
module13.set_input('var_3964', input_3964)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_3963, input_3964, )
res15 = intrp15.evaluate()(input_3963, input_3964, )
res16 = intrp16.evaluate()(input_3963, input_3964, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input('var_3963', input_3963)
module17.set_input('var_3964', input_3964)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_3963, input_3964, )
res19 = intrp19.evaluate()(input_3963, input_3964, )
res20 = intrp20.evaluate()(input_3963, input_3964, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input('var_3963', input_3963)
module21.set_input('var_3964', input_3964)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_3963, input_3964, )
res23 = intrp23.evaluate()(input_3963, input_3964, )
res24 = intrp24.evaluate()(input_3963, input_3964, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''47: TVMFuncCall
46: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
45: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
44: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
43: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
42: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
41: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
40: tvm::transform::Pass::operator()(tvm::IRModule) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
36: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
35: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
34: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
33: tvm::transform::Pass::operator()(tvm::IRModule) const
32: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
31: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
30: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
29: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
28: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
27: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
26: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
25: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
24: _ZN3tvm5relay9transform22Devic
23: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
22: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
21: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
20: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
19: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
16: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
15: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
12: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
9: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
8: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
7: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
6: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
5: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
3: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
2: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
1: tvm::relay::tec::PrimFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
0: tvm::relay::tec::ScheduleBuilder::Create(tvm::relay::Function const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)

'''