import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_2 = relay.var("var_2", dtype = "float64", shape = (6, 13, 11))#candidate|2|(6, 13, 11)|var|float64
var_3 = relay.var("var_3", dtype = "float64", shape = (6, 13, 11))#candidate|3|(6, 13, 11)|var|float64
bop_4 = relay.divide(var_2.astype('float64'), relay.reshape(var_3.astype('float64'), relay.shape_of(var_2))) # shape=(6, 13, 11)
bop_12 = relay.minimum(var_2.astype('int32'), relay.reshape(var_3.astype('int32'), relay.shape_of(var_2))) # shape=(6, 13, 11)
uop_17 = relay.acosh(var_3.astype('float64')) # shape=(6, 13, 11)
uop_27 = relay.log(uop_17.astype('float64')) # shape=(6, 13, 11)
const_29 = relay.const([[[-3.457332,-7.564964,7.142514,-2.274676,2.560217,5.444961,-9.764047,8.157559,1.841959,-1.300107,-9.086725],[1.974021,-6.625532,-9.444020,3.520366,5.983170,-1.488490,4.976119,9.154563,-5.983351,2.209212,-0.207073],[-9.685096,3.965374,-9.336975,-7.113067,-3.099075,-9.442825,5.116399,6.389978,-1.205437,8.055505,1.784780],[-6.621494,-5.351893,2.815429,3.786415,9.141701,6.082677,1.267190,-8.729819,7.103635,6.106070,-0.916529],[-7.998994,2.824980,-4.504165,4.885726,-9.475797,3.043093,-6.204523,-1.852244,-3.295092,-5.420075,-2.477169],[0.458007,6.774599,-9.195297,-8.527948,-9.673787,-3.059841,-5.549918,-6.952893,-7.033161,3.059857,9.038764],[8.144597,8.587626,7.743316,6.172601,8.851062,2.394359,0.339502,9.166805,-8.012433,-2.783927,-3.808613],[7.453957,6.287369,7.988045,9.327202,-0.762621,-8.842156,-5.570972,0.304445,1.607748,1.810047,-5.797786],[-1.167859,-2.601212,9.705695,-2.307333,7.377853,-7.777863,7.771288,-5.353649,-7.745938,9.181653,-7.752817],[-5.733648,-4.799732,1.851616,-1.963510,-6.697161,9.857980,5.619603,-6.918863,-4.387605,-7.039845,-8.367981],[-6.004993,-4.435250,3.454383,1.596204,-7.453015,-8.390775,-1.406398,-0.296928,8.343476,0.091923,9.587622],[1.128116,-1.999880,-7.660105,-1.984184,9.644631,0.151943,7.608962,0.327831,-6.016260,-0.391562,-6.679479],[-3.400365,-5.833291,-5.621268,6.226436,-4.490261,8.925840,-9.120364,5.776141,-6.393202,-8.481716,6.194721]],[[-4.802674,-1.853396,-0.904864,0.374170,4.599015,3.302320,4.359438,-9.240168,7.102161,9.630232,3.065018],[-6.318187,-7.651883,1.802158,-6.946005,-7.833576,-8.554968,-5.150900,-2.742993,2.513961,4.607623,7.050377],[-3.267997,7.517327,-2.637481,-0.674248,0.841428,0.906911,8.959147,-9.416735,3.913178,6.346196,5.439573],[-1.000195,6.211246,-3.180838,-6.342815,-6.496741,2.627184,-3.105838,-5.081232,2.172976,-5.171882,-2.269920],[-2.363925,1.682748,3.099356,4.829674,-4.297627,-3.740298,6.301872,9.881797,-7.625446,2.915871,6.138531],[-9.457825,-3.250980,9.181203,-3.901326,7.049252,-1.025720,-2.851884,1.400108,2.963300,0.656118,7.422849],[-4.156993,-1.543033,-8.148360,-7.343623,8.521956,-7.112889,-7.724877,-9.296198,2.152385,8.616641,3.249363],[6.155512,9.244703,-7.847456,5.112769,-4.387387,-6.582467,-2.827586,-0.102100,4.765626,5.214803,6.392028],[7.355986,-3.489321,4.664406,3.178604,6.517278,9.664433,5.964205,0.329724,-3.311464,-3.450319,-7.541165],[2.103668,7.667313,5.917110,-5.128215,-0.590117,-6.521896,-2.740092,2.431634,-7.746089,4.955066,3.619034],[-0.580349,2.604189,-6.027071,4.191546,-9.626723,1.994694,8.192916,4.903831,-4.285420,-7.991969,-6.122469],[-6.816340,-4.025981,2.126528,1.552445,-7.550201,2.602803,-3.475789,0.158579,7.172985,-5.322894,9.805369],[2.669678,-4.205919,-6.189145,-0.750214,7.023612,-6.027784,-9.051715,9.222040,5.355687,3.169027,9.320567]],[[-5.221685,3.991303,7.695370,0.020447,-6.804384,5.474549,-3.237778,8.136334,-0.632084,6.016229,-5.723308],[-0.667636,1.893123,4.447718,3.099666,-2.039082,2.054990,4.340562,-9.167655,7.522162,1.047734,9.557393],[-6.478579,-1.899138,8.973450,-3.875193,8.614487,-1.276441,-8.753699,3.426876,-0.689211,4.640212,-5.312613],[-4.495307,6.769941,7.239967,-7.795616,-9.831654,2.169803,-6.221196,6.414161,-2.574170,8.769687,3.117578],[-5.486147,1.900304,7.715244,-4.379491,5.884727,-0.194883,-7.609279,2.813280,-6.119454,4.658273,3.848500],[-2.447495,-1.941326,3.547061,2.086779,7.785713,-1.857360,3.865115,-6.047297,2.069842,-4.128508,-1.277683],[1.466328,-3.468736,-9.253474,7.462936,8.071821,-1.256750,-1.332388,0.085601,-9.167414,8.217114,-5.427860],[-0.824017,-4.780652,-3.822499,8.152053,2.110217,5.319711,-1.074795,5.348391,3.847205,-5.693118,7.391820],[5.557392,-3.523700,4.827457,-2.166039,-6.273813,-4.925564,-1.985735,-8.452286,-4.063157,-8.205495,2.167710],[2.707851,-9.520054,0.335465,-1.985985,0.767196,0.365043,4.366925,7.255476,-5.570020,4.168006,-4.565069],[-0.246866,9.908914,-3.252187,-9.056528,8.206368,3.069392,-4.033124,-7.735959,5.639667,-3.397517,9.325200],[0.126409,-3.104048,9.425365,1.607861,8.536822,-6.954639,-2.760155,7.294787,-3.197158,-7.297039,-2.995676],[-7.208450,7.694226,2.144937,-2.284653,1.718034,7.698278,-3.699197,8.055802,1.879562,6.873456,-7.039323]],[[-4.807785,-1.368145,-7.538686,-5.491074,5.574024,6.024938,-8.062299,-5.464170,8.014459,6.837554,9.831900],[7.310228,1.008074,-6.641525,-4.138045,-8.117476,-7.282442,9.009894,4.527660,6.561496,-6.979400,8.875246],[2.798230,-4.221320,9.509739,-7.591936,2.073403,-7.540725,-7.762305,4.434133,6.657854,0.647673,-9.939272],[-3.382332,7.772635,-0.358633,-7.723838,-6.062012,7.352330,-4.719995,-3.146758,-4.132643,9.600462,-8.603175],[0.775620,-9.184381,9.217008,-2.089475,2.580157,8.848993,-6.238242,-2.632448,4.085536,7.484036,0.996722],[-1.213801,-1.942063,0.094243,8.214942,8.877756,8.976723,2.344281,4.880245,-9.918158,-8.309888,2.313533],[9.817035,1.029561,2.687228,-4.186071,-4.250408,-5.326860,8.110776,-6.156923,-8.453184,1.874419,-8.596486],[-3.451285,-1.758328,-2.339795,8.857146,8.753528,7.417379,4.252560,6.261161,-1.384145,-6.867625,-4.649510],[-2.029264,-7.471400,-7.910719,9.239602,-4.760580,4.734924,-6.657736,4.923798,6.020862,8.261388,4.508505],[9.520214,-9.211843,6.378003,9.703550,-8.155617,-6.931234,-5.387976,-9.437438,3.342690,2.028006,4.237240],[-6.642690,7.273835,0.027344,5.565233,-9.427119,-6.848827,-0.144308,9.067044,4.115609,8.950766,8.990442],[3.883309,3.053431,-3.643195,0.257400,7.663419,6.692068,3.698677,7.365893,2.052812,-7.364273,-6.048818],[1.871002,-5.163825,7.775137,9.399214,2.655639,-2.700300,0.623688,1.970060,-6.954142,4.726991,-2.184505]],[[-7.148704,9.231136,9.827022,8.565627,-4.944290,3.516290,-1.719970,-8.489713,9.243434,-4.786937,2.934034],[4.292815,-7.193496,4.118410,9.005265,-7.675610,5.659720,9.041608,0.902267,-5.181934,-3.807030,-9.508245],[-8.160076,-9.232719,-8.730714,8.433091,-7.989097,8.433235,-3.557311,-8.442935,-6.458059,2.628630,-4.071720],[-9.858978,-9.474733,6.646837,-6.623981,7.633575,6.946491,6.683845,-0.732910,8.750911,4.240124,6.891200],[6.349055,1.481618,-4.461985,9.158156,0.636526,3.604096,-7.887959,-4.416268,-5.899002,3.621531,7.300028],[-4.197293,4.081378,1.000759,-0.682850,-2.914685,-9.043174,9.665257,-6.159742,-1.359119,-7.047418,6.692905],[-8.520384,1.214869,7.722085,-1.491744,3.240657,-9.171361,-8.753154,9.924213,-5.609965,-3.867672,0.285256],[-4.210428,-4.000647,-1.926327,-2.466398,9.545385,4.593832,7.764242,4.733358,-1.608916,-4.343787,0.545173],[-4.014075,6.480211,-0.477624,2.085702,0.944600,-4.331071,-4.487923,-3.653989,-6.671422,-4.714308,5.394047],[6.373356,6.628266,3.365689,-7.785558,4.426245,-4.542836,-2.371271,-4.973958,-2.751286,9.819400,-9.165554],[4.091881,-3.773810,-7.712781,-4.584351,-5.824995,5.371210,5.005936,-1.290394,9.179764,-9.817005,-9.720457],[8.861191,-1.140967,3.401659,-5.480126,-2.233233,-5.109702,6.744742,7.223754,-2.163502,0.253119,3.043559],[5.983504,4.012674,7.098155,-0.318619,-5.191696,1.648822,2.762062,-3.576072,-0.459235,-6.099257,1.603309]],[[3.843508,7.867127,-8.228488,1.134384,9.807251,4.790675,-6.713331,-5.774753,1.576985,-1.065388,9.993129],[5.929490,5.555965,-5.371416,-9.888146,6.733251,-6.116216,-8.899217,-0.224888,6.699255,-9.356621,-4.909534],[5.979871,2.555642,2.864553,3.420268,2.579546,-2.638652,-0.816582,-8.732439,-7.589309,1.359008,-2.919804],[0.353801,2.723871,-9.988126,-7.550025,-0.128046,5.238159,-8.596931,6.285470,-4.776864,-3.009700,7.976719],[6.110475,1.922197,-1.990241,3.584271,-5.434476,2.506357,1.898573,0.485395,-8.758562,1.258534,4.710906],[-9.184609,-9.788311,-6.082435,9.062185,2.710744,6.796768,-3.777407,7.363032,9.253628,-4.300086,-0.694305],[-8.689601,5.103633,6.255259,2.310829,-3.164828,-7.318212,-9.503710,7.920607,-4.893381,-7.402386,-9.677221],[3.367719,-8.807980,8.226816,1.195357,-8.655854,-2.493527,-8.424693,7.804260,-4.976073,1.012396,-4.623982],[7.578362,1.274101,-9.741723,-2.618219,-6.892046,7.758930,-2.148861,-0.707615,-8.671631,7.052610,-6.699331],[-0.740240,3.159316,-5.190000,0.098680,-6.279407,-0.676397,3.170622,-6.602467,2.927752,3.446415,2.198445],[-0.887886,-5.128098,6.676302,8.608305,0.519152,8.830336,-7.287587,-9.742431,-8.297346,4.111806,-9.515967],[4.904361,-9.922923,-3.484864,3.699545,0.096868,6.376753,-0.274572,8.767040,-0.106466,-6.075602,-4.527464],[1.538987,-8.948958,2.644674,3.434121,-0.569149,-4.551861,5.557765,1.077439,4.142350,-1.969239,-7.484125]]], dtype = "float64")#candidate|29|(6, 13, 11)|const|float64
bop_30 = relay.add(uop_27.astype('uint8'), relay.reshape(const_29.astype('uint8'), relay.shape_of(uop_27))) # shape=(6, 13, 11)
bop_33 = relay.left_shift(uop_27.astype('int8'), relay.reshape(const_29.astype('int8'), relay.shape_of(uop_27))) # shape=(6, 13, 11)
var_39 = relay.var("var_39", dtype = "float64", shape = (6, 13, 11))#candidate|39|(6, 13, 11)|var|float64
bop_40 = relay.logical_xor(uop_17.astype('uint32'), relay.reshape(var_39.astype('uint32'), relay.shape_of(uop_17))) # shape=(6, 13, 11)
uop_44 = relay.asin(uop_17.astype('float32')) # shape=(6, 13, 11)
output = relay.Tuple([bop_4,bop_12,bop_30,bop_33,bop_40,uop_44,])
output2 = relay.Tuple([bop_4,bop_12,bop_30,bop_33,bop_40,uop_44,])
func_51 = relay.Function([var_2,var_3,var_39,], output)
mod['func_51'] = func_51
mod = relay.transform.InferType()(mod)
mutated_mod['func_51'] = func_51
mutated_mod = relay.transform.InferType()(mutated_mod)
func_51_call = mutated_mod.get_global_var('func_51')
var_53 = relay.var("var_53", dtype = "float64", shape = (6, 13, 11))#candidate|53|(6, 13, 11)|var|float64
var_54 = relay.var("var_54", dtype = "float64", shape = (6, 13, 11))#candidate|54|(6, 13, 11)|var|float64
var_55 = relay.var("var_55", dtype = "float64", shape = (6, 13, 11))#candidate|55|(6, 13, 11)|var|float64
call_52 = func_51_call(var_53,var_54,var_55,)
output = call_52
func_56 = relay.Function([var_53,var_54,var_55,], output)
mutated_mod['func_56'] = func_56
mutated_mod = relay.transform.InferType()(mutated_mod)
var_58 = relay.var("var_58", dtype = "float64", shape = (2, 9))#candidate|58|(2, 9)|var|float64
uop_59 = relay.cosh(var_58.astype('float64')) # shape=(2, 9)
uop_66 = relay.sin(uop_59.astype('float32')) # shape=(2, 9)
uop_71 = relay.atanh(uop_59.astype('float32')) # shape=(2, 9)
func_51_call = mod.get_global_var('func_51')
func_56_call = mutated_mod.get_global_var('func_56')
const_76 = relay.const([0.134899,-4.799603,1.632765,5.226556,-3.512798,2.186879,4.750647,2.115551,-2.715432,-2.780887,4.624995,-0.379366,4.828914,4.701789,-7.338687,7.010204,5.684691,-4.983186,-6.254812,8.328582,-6.939223,-7.505223,2.549087,5.103084,0.094703,2.441436,-2.775614,-0.441791,-5.009874,-1.742899,-6.634960,-8.639819,-1.734308,-1.242242,5.794255,9.930501,-2.217208,5.357628,2.002011,5.908128,-7.198837,-4.257424,-9.538584,1.260958,-3.494661,-8.694052,3.159655,-2.889114,2.066881,-6.362894,-1.655020,3.380930,-0.010444,-8.498048,2.581913,-8.808008,-5.196340,0.442803,8.902200,-4.236508,-7.782742,-6.139107,9.039235,8.167854,-3.698683,6.949799,-9.466978,9.369467,-7.679414,-5.877862,-2.968332,7.151540,2.518453,0.305956,9.282640,-9.039767,-7.281611,-1.464975,2.003208,2.521638,4.598876,-2.170957,6.242638,-6.184862,7.631370,6.783381,8.185724,4.148571,8.654873,5.099091,-0.704343,7.268734,0.797812,-0.411067,0.007741,-6.195869,2.366687,-0.703452,-9.079952,-0.055823,-7.805586,7.949421,-3.435243,-2.333307,-2.962333,8.460759,-3.096182,2.252176,-7.404260,-0.512277,1.272399,-6.532137,-2.935443,0.418873,-5.418781,-2.007545,-4.785058,-4.566834,-5.826541,-6.979006,2.418590,6.333494,-5.175662,3.686141,4.253246,7.819847,-5.518717,9.154735,-7.126739,8.619790,-1.393399,5.383512,-3.105469,1.230643,5.873814,0.717587,9.446514,-7.836559,2.620216,-3.892531,5.840972,-1.694434,-6.128294,-4.334532,-3.241719,5.363618,-3.589293,7.778766,-5.966518,3.625694,8.500247,-9.743347,-6.265655,-3.147366,-1.223645,-2.139568,-4.659736,6.048152,-9.592002,-8.902388,-2.128154,7.424126,-9.773441,4.992204,4.936049,-3.961179,7.290742,-9.846111,1.298532,1.047593,7.178453,-7.628528,-9.257984,-4.131631,8.116293,-1.114708,-3.754456,-7.731694,-2.265976,-9.045135,0.083251,-9.428882,2.483644,-2.208698,-0.129816,0.355200,0.385395,0.932930,7.989893,-9.439693,-2.074441,-9.306213,-0.701672,-1.156281,-9.936736,-7.819791,4.017442,-9.115274,7.934736,-7.284444,3.287131,-4.786544,6.842149,-5.217645,0.756536,4.066883,0.376621,8.608437,0.717461,7.655063,-3.987270,0.423186,-5.293022,-5.087282,-3.384395,7.638120,-1.516403,-4.799177,-5.383039,1.637070,9.542019,4.162605,-6.969489,-0.429645,-4.065748,-7.287421,4.811071,4.403507,9.956802,-4.468950,-3.138827,6.235983,4.491465,-2.220935,3.360367,6.328385,-4.145218,3.280772,7.061683,-9.672800,6.902672,-4.301455,-5.743604,1.588831,-3.354130,1.931963,2.585482,6.183732,-2.546906,-6.966694,7.079553,-8.565537,3.143797,6.552457,1.407716,-3.230538,-6.335226,-6.156728,-8.118300,-4.179907,4.768152,3.244895,6.423886,6.209380,-4.394502,1.619180,5.192665,-7.814775,8.275960,-8.337524,7.234700,-7.191786,8.920790,5.421095,-2.540478,-9.582366,6.117872,-0.480574,1.013520,5.416005,-0.397950,1.094416,-9.531589,-3.050624,8.945383,5.116385,6.420679,-7.294753,-7.325550,4.259850,-4.594066,-2.960202,2.455838,-1.622210,-5.607570,0.861000,-4.649757,-5.013538,-3.802981,-4.604988,1.193908,-8.852745,6.991292,-9.543093,-4.704877,-8.753905,3.568586,1.067278,-6.666133,9.937051,6.037044,8.028708,-6.806077,-3.593665,-9.313878,-3.314729,-6.556373,-8.431761,-2.384567,0.579349,-8.936780,8.581552,-3.855385,2.946344,-7.669150,8.847162,9.145786,1.937891,7.936577,-1.317755,-6.672856,6.225569,5.393536,3.546894,-0.739220,6.364034,-7.338868,6.692727,6.867737,4.698806,7.993464,8.452926,1.096955,-7.052116,-1.244799,-3.960411,-4.954013,-5.317362,-9.723203,7.320061,-7.174541,5.691458,5.695884,-9.406503,6.688047,-9.554107,-7.801500,5.882517,-2.210051,-2.690537,-1.600283,2.431593,1.473378,5.477184,4.553352,-1.898299,3.435230,1.685366,-2.745239,1.261537,2.366776,5.203473,9.842206,-4.200022,-0.800820,-7.039144,0.607502,6.546191,6.615893,-1.019553,8.274189,1.449024,0.506523,4.892624,-4.137034,4.094664,-0.353692,9.358244,-8.529522,4.764887,0.510180,1.994554,-9.380653,0.226959,9.154383,-8.589674,-4.346407,7.399431,-7.020749,-7.679389,6.755921,6.749056,-3.868049,3.988814,-4.734938,5.695521,2.613085,-6.977394,-4.839614,3.599483,-1.358550,-6.203659,8.173526,-5.355861,8.834971,-0.693957,-9.972310,-9.437381,0.943330,9.200226,7.107448,8.114800,-2.767007,-4.632453,3.083467,-4.351324,6.171338,-8.514221,0.301491,4.193120,5.800687,3.656680,4.608549,-7.384176,-1.939062,-9.165219,4.318276,-8.571112,8.009188,-4.210241,-3.500600,-3.207357,4.253069,4.388467,6.448754,2.131373,-8.419655,2.223312,2.814412,-9.980153,7.277478,0.245063,-1.705585,-1.188227,-1.395917,-4.394551,-8.176500,-1.482602,-8.283914,-5.928731,-4.820259,-7.246046,-7.372106,-1.626360,-6.130368,8.124111,1.191615,-7.088366,-4.435041,-0.306139,4.890743,-8.206814,4.393867,5.430838,-3.038387,-3.735134,-7.264797,1.677930,-8.944681,-5.227215,3.745706,-4.055342,-9.298855,-2.387407,-9.574451,7.485529,-2.205637,6.784723,-1.193140,9.609665,-4.897980,-0.672206,-0.083859,2.944094,6.611984,7.913095,-1.848544,-0.124484,-5.480281,6.956655,9.813170,-4.289180,-6.720224,3.403261,7.482986,5.615890,-6.511510,-5.156064,-1.302112,4.475274,2.633351,-1.592123,3.960127,-4.294549,4.279610,-9.281056,-7.924054,-1.674900,-5.063422,4.711898,-7.154568,8.082096,-7.579986,-5.448825,9.713565,8.109835,-2.907114,-6.042793,-8.891206,-9.644676,0.213656,-0.229173,4.338791,-8.533098,-9.639905,0.111019,8.614846,-0.903883,-5.915650,-5.042025,-1.943018,-4.583830,4.035236,-8.817936,8.285414,7.422465,5.836802,-0.843350,9.400309,-3.748701,4.913167,-1.842465,-6.844609,-2.621402,2.772686,3.932612,-7.532901,8.338169,-4.533860,2.957002,-6.094967,-1.480796,-1.835314,-9.652731,-2.271980,-9.735716,5.193237,-3.203534,6.903993,-1.934463,4.924117,-6.851169,-0.817977,2.353166,-9.124889,-9.059331,7.318810,-8.837178,-5.882108,3.190851,-7.878356,-1.005440,6.299942,8.271713,2.231257,4.673032,0.833355,6.679427,1.214525,7.047334,7.952678,-8.752202,-4.365343,9.004199,-8.210095,9.177413,-2.339733,-5.754392,-9.305186,-9.213722,1.759832,-5.323451,9.527918,-1.450417,-2.481050,-9.147459,-8.093648,9.125226,-6.194070,2.200255,8.809826,7.099260,-5.455384,7.718711,8.480387,-5.825742,-6.910342,-0.197685,-2.627019,-3.697731,-4.709702,6.729383,-3.574608,9.282206,0.288250,3.023075,-8.489309,-4.227080,-3.088873,3.953703,4.017358,-8.248653,5.641354,7.430606,-2.659914,-8.928523,4.389315,6.116247,-1.950397,-1.544095,0.465988,9.593947,-4.139213,-9.800533,8.427453,-1.720356,0.298886,-7.317989,8.215607,6.473099,-0.365707,-5.744871,9.839124,2.420414,9.588223,2.264622,0.743003,-1.701026,-0.731567,-0.754774,-3.960948,-5.204117,8.402520,-0.113088,-9.302939,-8.481402,-1.277623,-5.103938,-7.333241,1.322086,7.201167,-7.580013,5.397689,-2.278351,0.416082,-4.866460,-9.047582,-5.562903,4.847023,-2.691756,-0.505693,-7.438981,-0.876817,-8.555171,-3.617325,-4.414773,-4.185735,-9.202981,0.869247,4.866061,9.503548,-5.734123,-8.522819,-1.727905,-3.439275,1.578114,0.715143,3.781090,8.226711,1.669898,2.349617,2.247308,-7.358118,-4.370992,6.882616,0.026796,7.495930,-5.818540,-2.256745,2.237286,3.641485,0.834532,8.139563,-2.468991,-4.994854,-0.465298,9.199678,6.023089,-0.923390,8.608275,6.353038,-7.041838,8.040844,-4.600979,2.680894,-4.297253,-5.003130,-5.794617,-4.958831,-2.552142,-1.268007,-6.071670,4.764239,3.990285,2.261147,4.915476,1.442217,1.034874,-4.416699,-6.934129,-6.035530,-4.973391,-4.170339,-2.352255,-9.038294,5.997089,7.228731,-3.785867,1.279034,-4.524669,2.794949,9.749200,-3.145939,8.568897,-4.339751,-4.553688,-4.104928,-8.566330,9.211934,7.468398,0.713898,-6.120714,-6.081238,4.220438,3.782824,9.564374,0.020466,1.714408,3.569557,-1.169007,1.101393,-8.357260,-3.162979,-9.716986,3.976286,1.577814,2.084192,-2.149293,-7.984381,9.663053,6.414798,-5.118531,-7.457928,-3.702740,-8.762493,5.819128,-0.765128,8.699867,-9.951778,-7.810040,1.215916,1.807314,-1.956373,9.712986,4.371360,-3.014378,6.575867,-6.444932,-9.480317,8.646744,1.122944,-2.039844,3.983967,-9.906104,-9.917199,3.836651,-5.744531,-2.799682,-7.843348,-8.136793,-4.614772,6.064525,3.550860,1.098572,-8.047481,5.512997,-2.025403,7.923385,8.247784,9.174917,3.069125,-3.281790,7.106259,-1.967543,-1.426573,-8.693659,4.964121,-0.104344,1.561274,-0.629233,-5.893871,4.598576,-1.749591,-2.406893,5.860416,9.840115,7.725469,-8.255299,-8.162538,-5.370329,9.777973,9.100605,-5.641507,-0.677342,-2.240818,-9.544782,-8.153267,1.096310,-4.224139,-7.608362,9.111842,-1.773698,3.913525,-2.903249,1.869433,-5.218254,8.522039,4.060704], dtype = "float64")#candidate|76|(858,)|const|float64
call_75 = relay.TupleGetItem(func_51_call(relay.reshape(const_76.astype('float64'), [6, 13, 11]), relay.reshape(const_76.astype('float64'), [6, 13, 11]), relay.reshape(const_76.astype('float64'), [6, 13, 11]), ), 3)
call_77 = relay.TupleGetItem(func_56_call(relay.reshape(const_76.astype('float64'), [6, 13, 11]), relay.reshape(const_76.astype('float64'), [6, 13, 11]), relay.reshape(const_76.astype('float64'), [6, 13, 11]), ), 3)
bop_78 = relay.multiply(uop_71.astype('int8'), relay.reshape(uop_66.astype('int8'), relay.shape_of(uop_71))) # shape=(2, 9)
bop_83 = relay.floor_divide(uop_66.astype('float32'), relay.reshape(uop_71.astype('float32'), relay.shape_of(uop_66))) # shape=(2, 9)
func_51_call = mod.get_global_var('func_51')
func_56_call = mutated_mod.get_global_var('func_56')
call_87 = relay.TupleGetItem(func_51_call(relay.reshape(const_76.astype('float64'), [6, 13, 11]), relay.reshape(call_75.astype('float64'), [6, 13, 11]), relay.reshape(const_76.astype('float64'), [6, 13, 11]), ), 1)
call_88 = relay.TupleGetItem(func_56_call(relay.reshape(const_76.astype('float64'), [6, 13, 11]), relay.reshape(call_75.astype('float64'), [6, 13, 11]), relay.reshape(const_76.astype('float64'), [6, 13, 11]), ), 1)
bop_89 = relay.maximum(uop_71.astype('int64'), relay.reshape(bop_83.astype('int64'), relay.shape_of(uop_71))) # shape=(2, 9)
const_94 = relay.const([[[9,6,-7,-5,-8,7,-10,-7,2,-5,-2],[6,10,2,3,1,-7,6,-6,7,5,3],[2,8,-6,8,3,-5,-5,-6,-10,8,5],[-3,6,7,5,-9,-2,3,-9,5,7,8],[6,10,-10,-5,-4,-10,-8,2,-6,2,-9],[5,10,-1,-9,-10,-2,3,9,-8,6,-1],[-4,-10,5,10,1,-3,5,-7,-10,1,7],[5,4,9,1,8,5,6,4,-6,-1,-5],[3,-3,10,7,2,3,5,-9,2,-2,7],[-8,3,-5,5,1,3,10,-1,-1,9,10],[6,10,5,4,9,-3,6,-7,10,-8,3],[6,-7,9,-3,-1,6,-4,3,-5,9,-5],[7,-7,-1,2,5,9,7,9,5,-8,1]],[[-4,-9,9,8,-3,9,4,5,3,5,1],[10,-3,-1,-7,-2,-9,9,-9,5,4,1],[3,5,7,9,-6,-1,-5,-10,5,3,-5],[5,3,-5,3,6,-6,-1,3,-3,1,9],[-4,-10,3,6,-8,-3,10,-8,5,-8,-5],[4,-1,8,-10,-7,8,-7,1,-10,-2,-9],[-10,-5,1,6,2,-7,-8,4,3,-4,7],[1,-5,-8,-1,-9,-6,-6,10,4,-1,-7],[-7,6,-2,-9,4,-8,9,5,-3,-1,-9],[-5,-8,-2,-1,9,-8,7,7,-9,-4,-7],[-3,4,-7,4,-3,-6,1,1,5,-1,7],[4,-2,5,2,-10,6,-2,3,10,8,-1],[6,-10,-4,-5,-8,4,-4,7,-1,-10,3]],[[2,9,-5,10,5,-8,6,-7,-10,9,-5],[3,8,9,2,1,1,6,8,-10,3,-9],[7,-9,1,2,-3,-7,10,-1,1,6,2],[6,9,5,3,10,-10,-8,1,8,-5,-4],[-5,7,7,-8,5,-10,-9,6,-9,-1,-9],[1,-10,-3,7,10,-2,-8,10,7,9,10],[2,-1,6,9,2,5,-8,7,-6,7,-3],[7,10,-7,-3,8,-6,-8,2,8,-7,6],[-3,-3,9,9,7,-3,3,-8,8,-4,7],[-9,-9,-3,-9,-4,-1,3,6,-1,-9,-2],[6,-9,-7,1,4,5,6,-10,8,-9,-10],[8,-4,1,-5,6,-4,-8,-9,-7,10,8],[9,-2,1,-5,-4,1,3,-3,-6,2,3]],[[10,-10,5,-10,-3,-3,5,6,7,4,10],[-9,-10,2,-2,1,-9,3,-8,-8,-2,-7],[5,9,-3,-9,4,8,2,3,4,-7,6],[8,-5,-6,5,5,7,1,9,-5,-7,-5],[2,2,6,9,-1,6,3,-2,3,6,3],[2,-7,-5,9,-3,9,-6,-5,7,-4,-4],[2,5,3,-9,-1,8,-7,4,2,8,-1],[8,-3,-5,-7,6,-5,9,2,-6,-7,3],[-7,4,2,-3,-8,2,8,-8,6,-8,-5],[-3,-3,2,-3,-7,-1,2,-1,-8,-9,-10],[-10,4,4,-9,7,8,10,1,6,-8,9],[10,-6,-8,-1,-2,9,-6,-7,2,8,-7],[1,-4,8,-3,3,-6,2,-5,-4,-1,-4]],[[8,4,7,-1,10,2,8,-7,6,4,8],[6,8,-10,-5,-6,6,-2,-9,9,4,3],[-3,2,-10,-1,-2,-2,9,9,-8,8,6],[9,2,5,1,-1,-10,-4,-9,1,-4,-2],[-6,-10,8,10,-7,-9,9,8,-4,4,1],[-8,-5,-2,1,5,-6,6,2,-6,-5,9],[-1,-5,3,10,-9,4,7,-6,-3,10,7],[-3,-9,7,4,-1,-4,-9,-6,-1,-9,-3],[-5,7,-10,-5,-10,-6,-7,-7,1,-7,4],[2,-7,7,1,4,-6,2,-5,-5,-5,-8],[-3,7,-4,-1,-10,-8,-7,5,-4,-4,10],[-10,-2,2,3,-4,-6,4,-3,8,-7,4],[-3,4,8,2,3,-2,7,4,7,-8,-7]],[[3,-7,-7,9,-10,10,2,3,5,7,1],[-3,-4,3,3,6,3,-9,10,2,2,6],[-10,-9,-5,4,10,10,-8,-8,4,1,7],[-8,9,7,-9,-5,-1,4,1,-1,5,-5],[-6,-8,-6,8,8,-10,-3,8,9,-5,-10],[-8,8,3,3,-8,10,-9,-6,10,2,-1],[-7,1,2,8,-4,2,6,-5,3,9,-1],[2,5,9,1,4,-9,-6,8,3,-10,2],[-2,6,10,1,-4,-9,6,-10,-10,-7,-7],[9,6,-7,-1,-2,-8,8,-4,1,3,-10],[-8,6,-3,6,-5,-7,-9,7,5,-2,-8],[3,1,-1,-4,1,-1,1,-9,6,-3,5],[9,-3,1,-9,6,-2,-8,1,-6,-5,1]]], dtype = "int8")#candidate|94|(6, 13, 11)|const|int8
bop_95 = relay.equal(call_75.astype('bool'), relay.reshape(const_94.astype('bool'), relay.shape_of(call_75))) # shape=(6, 13, 11)
bop_98 = relay.equal(call_77.astype('bool'), relay.reshape(const_94.astype('bool'), relay.shape_of(call_77))) # shape=(6, 13, 11)
bop_101 = relay.equal(uop_66.astype('bool'), relay.reshape(bop_89.astype('bool'), relay.shape_of(uop_66))) # shape=(2, 9)
uop_109 = relay.atan(uop_71.astype('float32')) # shape=(2, 9)
bop_113 = relay.floor_divide(uop_59.astype('float64'), relay.reshape(bop_78.astype('float64'), relay.shape_of(uop_59))) # shape=(2, 9)
func_51_call = mod.get_global_var('func_51')
func_56_call = mutated_mod.get_global_var('func_56')
call_136 = relay.TupleGetItem(func_51_call(relay.reshape(bop_95.astype('float64'), [6, 13, 11]), relay.reshape(const_76.astype('float64'), [6, 13, 11]), relay.reshape(call_87.astype('float64'), [6, 13, 11]), ), 1)
call_137 = relay.TupleGetItem(func_56_call(relay.reshape(bop_95.astype('float64'), [6, 13, 11]), relay.reshape(const_76.astype('float64'), [6, 13, 11]), relay.reshape(call_87.astype('float64'), [6, 13, 11]), ), 1)
bop_149 = relay.logical_or(uop_59.astype('bool'), relay.reshape(uop_71.astype('bool'), relay.shape_of(uop_59))) # shape=(2, 9)
bop_173 = relay.less_equal(uop_109.astype('bool'), relay.reshape(bop_113.astype('bool'), relay.shape_of(uop_109))) # shape=(2, 9)
uop_176 = relay.asinh(uop_109.astype('float64')) # shape=(2, 9)
output = relay.Tuple([const_76,call_87,bop_95,bop_101,call_136,bop_149,bop_173,uop_176,])
output2 = relay.Tuple([const_76,call_88,bop_98,bop_101,call_137,bop_149,bop_173,uop_176,])
func_178 = relay.Function([var_58,], output)
mod['func_178'] = func_178
mod = relay.transform.InferType()(mod)
var_179 = relay.var("var_179", dtype = "float64", shape = (2, 9))#candidate|179|(2, 9)|var|float64
output = func_178(var_179)
func_180 = relay.Function([var_179], output)
mutated_mod['func_180'] = func_180
mutated_mod = relay.transform.InferType()(mutated_mod)
const_193 = relay.const([[[7.608832,-2.613373,-0.218707,-7.721520,-6.068941,9.139406,2.728249,-8.245300,-1.879119,4.028218,7.767988,2.162769],[-4.801043,0.465707,2.169525,1.502612,1.033819,-8.326507,-3.997781,4.941965,5.500115,9.923475,-0.740998,6.373406],[4.521686,-9.942643,2.747861,-1.362894,-6.887419,-7.721965,-5.063316,-2.672028,1.117549,0.460300,9.036989,-7.145803]],[[-0.513465,2.255921,-7.301896,6.534199,-0.532099,-4.192386,5.267990,6.714146,5.470268,-6.810575,1.170655,2.699691],[1.226559,-6.323434,5.784010,0.925130,9.914121,-3.363016,-4.989818,6.998060,4.191173,-4.251905,2.753497,5.972911],[9.913218,-0.480472,-2.168240,-5.173285,9.565684,5.649820,6.554138,-9.405549,3.838761,-8.514137,-2.211208,-9.320835]],[[-9.327157,7.011385,-3.384317,-4.128276,-5.646329,-7.799378,-9.892771,-6.713880,-7.690054,-8.700590,-9.789817,-6.498378],[2.329042,3.696044,-8.079046,9.924355,-0.982799,-5.477400,0.645796,4.123843,-8.418664,7.524091,-0.107873,-3.255936],[8.676981,-9.155235,5.930328,8.763008,-9.089255,-9.393449,1.459830,8.442043,-0.327827,-2.667484,-5.728116,5.857352]],[[-0.228188,2.060098,-2.141826,5.719259,-2.106577,-9.128177,-8.012198,-3.920442,-1.939206,6.371025,-9.149440,-1.435925],[5.065271,4.889586,-9.402620,-0.060663,6.065692,1.689379,4.399799,3.727969,-2.890752,1.506070,7.749590,2.604811],[-2.398444,6.374088,1.109495,-2.038253,9.382305,-3.334593,-9.128850,-5.406251,-9.927289,-0.528855,-6.435836,9.383179]],[[2.208214,0.869242,-8.856334,-0.652664,2.714160,-6.356013,5.772144,4.762523,-3.082065,-5.956816,-7.165074,-0.332077],[-6.016523,-5.890386,-5.983073,-2.777839,-4.899264,-5.690301,-4.047764,-7.335052,2.568025,2.015675,4.740984,2.948517],[-8.149846,-3.381753,-3.887064,-3.033669,2.908858,8.607455,-4.301851,1.051827,0.110899,-5.849382,3.199755,3.161064]],[[6.700260,8.699807,-7.746486,-7.769631,8.629396,5.200011,4.742051,-3.897399,3.482438,-6.053663,4.535287,-8.019659],[0.370390,8.436656,3.332395,8.156806,4.282998,8.352055,8.523136,-1.235718,2.066816,-0.547538,2.163181,7.735314],[-2.399630,0.674078,-4.950999,-2.021436,-1.077370,-7.359238,1.531911,-2.196913,-4.802547,-4.427601,9.870730,-4.497242]],[[-0.588486,0.567818,-0.594816,-1.309384,-8.066855,-1.176253,-1.277019,-8.711345,-6.854097,-7.165851,3.008389,-4.354020],[5.915852,8.325938,-5.774639,8.770214,5.572464,-5.995320,1.466290,-2.820158,-7.317170,-5.191109,-4.437554,7.154864],[7.278673,-2.134388,-1.379417,1.061391,9.291693,-4.703420,-8.410057,-2.939081,-5.169908,5.097070,-8.419052,2.947893]],[[7.915660,2.801707,0.514185,-4.768329,-9.864871,4.461390,-9.852842,-6.536656,5.367732,1.519811,-2.368240,5.924046],[-3.755752,6.674506,7.491936,-3.760450,-2.264832,-3.882834,-1.657584,6.216106,1.604824,-2.395076,4.568982,7.345595],[6.236599,-8.896886,-7.779427,0.629565,1.925418,8.702267,2.383972,9.110170,5.521387,2.833353,-7.309791,1.896350]],[[0.163361,9.747570,-3.155111,-6.877754,1.577893,-6.206340,-6.209543,7.198791,-2.600417,-1.055843,-7.336040,3.400600],[8.111252,8.061412,1.845833,8.616231,-1.520606,3.669356,3.183685,2.656248,6.948816,1.808705,5.463240,7.638048],[4.092461,1.591759,1.889097,-2.003500,-6.591328,-1.710429,-1.976421,-2.536271,0.443933,7.640211,2.045612,8.798216]],[[-9.597664,2.081751,9.073553,4.972399,-0.337253,-8.931054,-1.980661,0.890834,2.106395,-0.998548,4.008499,-0.001648],[7.216544,-8.389762,-3.756898,5.888116,-7.277363,-8.523528,2.229424,-1.873876,1.107198,0.719727,0.467354,-8.989002],[-7.415540,-0.496583,0.638612,-6.176188,5.887015,-0.210397,2.112521,-4.852508,-1.791646,6.849766,0.328758,5.728114]],[[8.724593,-3.158038,2.953320,2.173717,6.479193,-1.889982,-5.489826,9.875594,7.378155,-2.806773,8.573066,-4.288813],[7.266676,5.377342,8.461646,2.303569,6.880030,-2.926491,-2.786364,6.094299,7.592486,7.695458,-2.954099,7.557302],[-3.301541,-4.580591,1.977070,6.398114,6.014243,6.373094,7.761207,3.946622,-3.730016,-4.945743,5.073365,-9.150101]],[[4.238129,-8.580051,7.264429,3.804038,1.719325,9.157266,-2.878271,-9.947482,-5.939281,-3.576412,-6.356635,-2.288626],[4.017281,-0.677957,-2.380884,-8.783746,-8.996840,-7.128058,-3.335945,9.495926,6.889585,-2.471429,9.544845,0.378135],[-3.761110,0.198517,5.995769,6.467672,-1.760150,3.340838,1.879172,-9.169326,3.455993,1.806225,-9.011462,4.375278]],[[0.793970,1.217921,-0.749652,-1.224167,7.921858,-8.600486,-5.442325,7.207887,0.905454,3.291543,-4.320320,-7.998783],[-4.035376,-2.067345,-1.615639,6.352624,5.780967,-7.465622,6.474359,8.500414,-9.064147,-9.095883,2.360520,-2.154456],[-3.372756,4.311810,8.499401,-0.587097,8.478740,0.097395,4.731837,-7.002730,5.495061,-7.537985,4.835394,8.948325]],[[5.872909,-2.936722,-2.834549,1.672956,2.075490,5.159229,-1.124030,-4.274116,-3.183481,0.910134,-2.674271,4.702030],[-3.132331,4.390768,2.881983,-6.770228,-0.768929,8.200251,3.837311,5.112960,-8.135394,6.686339,8.613007,-8.848102],[3.044503,5.442795,1.423317,-2.697860,-7.922871,-3.396944,-8.156202,3.732184,3.071751,1.962634,1.661209,8.721916]],[[-6.436432,1.842661,8.258227,7.933351,9.277874,-9.578328,4.194994,2.211598,-5.417307,5.693563,-4.204407,9.800448],[-6.057483,-5.426368,-9.239054,8.616504,-7.083904,-5.460400,-1.862731,6.347981,-3.392262,9.857085,-6.842608,7.646318],[-2.459108,9.353810,2.431291,-7.329381,-8.179616,-9.023073,2.289403,3.513799,-1.160031,1.341774,4.234256,-3.827523]],[[-3.923814,-9.043013,-7.491910,-8.759497,-2.122737,4.160394,-6.580420,5.968209,-0.528943,1.851128,1.464343,-9.953059],[-5.781294,1.924599,-8.266687,2.367869,6.819286,7.661790,-0.490758,-8.732035,3.279501,-8.618043,8.616427,-9.645125],[8.216210,0.997995,-4.808790,-4.798451,4.579870,4.269394,-7.522437,4.272971,-2.209550,1.829115,-5.685832,2.328395]]], dtype = "float64")#candidate|193|(16, 3, 12)|const|float64
uop_194 = relay.sqrt(const_193.astype('float64')) # shape=(16, 3, 12)
func_178_call = mod.get_global_var('func_178')
func_180_call = mutated_mod.get_global_var('func_180')
var_204 = relay.var("var_204", dtype = "float64", shape = (18,))#candidate|204|(18,)|var|float64
call_203 = relay.TupleGetItem(func_178_call(relay.reshape(var_204.astype('float64'), [2, 9])), 1)
call_205 = relay.TupleGetItem(func_180_call(relay.reshape(var_204.astype('float64'), [2, 9])), 1)
bop_219 = relay.greater(uop_194.astype('bool'), relay.reshape(const_193.astype('bool'), relay.shape_of(uop_194))) # shape=(16, 3, 12)
func_178_call = mod.get_global_var('func_178')
func_180_call = mutated_mod.get_global_var('func_180')
call_226 = relay.TupleGetItem(func_178_call(relay.reshape(var_204.astype('float64'), [2, 9])), 7)
call_227 = relay.TupleGetItem(func_180_call(relay.reshape(var_204.astype('float64'), [2, 9])), 7)
func_51_call = mod.get_global_var('func_51')
func_56_call = mutated_mod.get_global_var('func_56')
call_233 = relay.TupleGetItem(func_51_call(relay.reshape(call_203.astype('float64'), [6, 13, 11]), relay.reshape(call_203.astype('float64'), [6, 13, 11]), relay.reshape(call_203.astype('float64'), [6, 13, 11]), ), 4)
call_234 = relay.TupleGetItem(func_56_call(relay.reshape(call_203.astype('float64'), [6, 13, 11]), relay.reshape(call_203.astype('float64'), [6, 13, 11]), relay.reshape(call_203.astype('float64'), [6, 13, 11]), ), 4)
func_51_call = mod.get_global_var('func_51')
func_56_call = mutated_mod.get_global_var('func_56')
call_235 = relay.TupleGetItem(func_51_call(relay.reshape(call_203.astype('float64'), [6, 13, 11]), relay.reshape(call_203.astype('float64'), [6, 13, 11]), relay.reshape(call_203.astype('float64'), [6, 13, 11]), ), 2)
call_236 = relay.TupleGetItem(func_56_call(relay.reshape(call_203.astype('float64'), [6, 13, 11]), relay.reshape(call_203.astype('float64'), [6, 13, 11]), relay.reshape(call_203.astype('float64'), [6, 13, 11]), ), 2)
func_51_call = mod.get_global_var('func_51')
func_56_call = mutated_mod.get_global_var('func_56')
call_242 = relay.TupleGetItem(func_51_call(relay.reshape(call_203.astype('float64'), [6, 13, 11]), relay.reshape(call_203.astype('float64'), [6, 13, 11]), relay.reshape(call_203.astype('float64'), [6, 13, 11]), ), 4)
call_243 = relay.TupleGetItem(func_56_call(relay.reshape(call_203.astype('float64'), [6, 13, 11]), relay.reshape(call_203.astype('float64'), [6, 13, 11]), relay.reshape(call_203.astype('float64'), [6, 13, 11]), ), 4)
func_51_call = mod.get_global_var('func_51')
func_56_call = mutated_mod.get_global_var('func_56')
call_244 = relay.TupleGetItem(func_51_call(relay.reshape(call_235.astype('float64'), [6, 13, 11]), relay.reshape(call_233.astype('float64'), [6, 13, 11]), relay.reshape(call_233.astype('float64'), [6, 13, 11]), ), 4)
call_245 = relay.TupleGetItem(func_56_call(relay.reshape(call_235.astype('float64'), [6, 13, 11]), relay.reshape(call_233.astype('float64'), [6, 13, 11]), relay.reshape(call_233.astype('float64'), [6, 13, 11]), ), 4)
bop_249 = relay.equal(bop_219.astype('bool'), relay.reshape(uop_194.astype('bool'), relay.shape_of(bop_219))) # shape=(16, 3, 12)
func_178_call = mod.get_global_var('func_178')
func_180_call = mutated_mod.get_global_var('func_180')
call_253 = relay.TupleGetItem(func_178_call(relay.reshape(var_204.astype('float64'), [2, 9])), 5)
call_254 = relay.TupleGetItem(func_180_call(relay.reshape(var_204.astype('float64'), [2, 9])), 5)
func_51_call = mod.get_global_var('func_51')
func_56_call = mutated_mod.get_global_var('func_56')
call_255 = relay.TupleGetItem(func_51_call(relay.reshape(call_235.astype('float64'), [6, 13, 11]), relay.reshape(call_235.astype('float64'), [6, 13, 11]), relay.reshape(call_235.astype('float64'), [6, 13, 11]), ), 2)
call_256 = relay.TupleGetItem(func_56_call(relay.reshape(call_235.astype('float64'), [6, 13, 11]), relay.reshape(call_235.astype('float64'), [6, 13, 11]), relay.reshape(call_235.astype('float64'), [6, 13, 11]), ), 2)
func_178_call = mod.get_global_var('func_178')
func_180_call = mutated_mod.get_global_var('func_180')
call_257 = relay.TupleGetItem(func_178_call(relay.reshape(call_253.astype('float64'), [2, 9])), 0)
call_258 = relay.TupleGetItem(func_180_call(relay.reshape(call_253.astype('float64'), [2, 9])), 0)
func_178_call = mod.get_global_var('func_178')
func_180_call = mutated_mod.get_global_var('func_180')
call_263 = relay.TupleGetItem(func_178_call(relay.reshape(var_204.astype('float64'), [2, 9])), 7)
call_264 = relay.TupleGetItem(func_180_call(relay.reshape(var_204.astype('float64'), [2, 9])), 7)
func_178_call = mod.get_global_var('func_178')
func_180_call = mutated_mod.get_global_var('func_180')
call_273 = relay.TupleGetItem(func_178_call(relay.reshape(call_226.astype('float64'), [2, 9])), 7)
call_274 = relay.TupleGetItem(func_180_call(relay.reshape(call_226.astype('float64'), [2, 9])), 7)
uop_277 = relay.asinh(bop_249.astype('float64')) # shape=(16, 3, 12)
bop_283 = relay.floor_divide(bop_249.astype('float64'), relay.reshape(uop_277.astype('float64'), relay.shape_of(bop_249))) # shape=(16, 3, 12)
output = relay.Tuple([call_203,var_204,call_226,call_233,call_235,call_242,call_244,call_253,call_255,call_257,call_263,call_273,bop_283,])
output2 = relay.Tuple([call_205,var_204,call_227,call_234,call_236,call_243,call_245,call_254,call_256,call_258,call_264,call_274,bop_283,])
func_291 = relay.Function([var_204,], output)
mod['func_291'] = func_291
mod = relay.transform.InferType()(mod)
mutated_mod['func_291'] = func_291
mutated_mod = relay.transform.InferType()(mutated_mod)
var_292 = relay.var("var_292", dtype = "float64", shape = (18,))#candidate|292|(18,)|var|float64
func_291_call = mutated_mod.get_global_var('func_291')
call_293 = func_291_call(var_292)
output = call_293
func_294 = relay.Function([var_292], output)
mutated_mod['func_294'] = func_294
mutated_mod = relay.transform.InferType()(mutated_mod)
const_299 = relay.const([[[-7.504261,-9.788872,-8.963641,0.413724,-7.834911,7.926212,9.557933,1.773259,7.502865,-9.281706,-0.931161],[1.609868,7.522734,3.857678,-2.311315,0.307571,-7.799003,0.626671,5.456367,-2.668509,3.733635,0.023117],[5.257914,-2.090130,-9.778469,5.896151,2.835719,-3.815907,4.350979,0.672588,-7.186649,-9.687613,-0.768065],[-5.234096,-1.944219,-6.412163,-2.339628,-4.832439,-2.910650,-7.932306,-5.585929,6.119775,1.410445,-5.458005],[-1.275428,-6.766117,-7.559025,4.095032,-8.405659,-3.315073,9.198136,-4.820530,-2.926609,5.685637,-1.935638],[-5.407689,8.996828,-0.814301,2.252369,8.710057,9.722554,-3.225069,-1.572452,-7.353324,3.006403,4.580631],[7.565433,6.387282,8.026830,6.130078,-1.224812,-8.864216,9.838396,-9.391212,6.999670,-5.531513,-9.928128],[-0.979534,4.661076,7.585528,1.980681,8.436137,1.824942,1.819838,9.311468,-4.989832,-5.463407,-4.951848],[7.619923,-1.216883,-6.773962,4.685114,3.779943,-4.829305,4.942860,-5.337218,-7.175724,5.115714,-1.535713]],[[-6.851779,2.578136,6.043694,1.748560,-3.428795,1.337876,1.587430,9.741430,-0.667987,-7.176514,7.983498],[-9.105347,1.362416,2.968235,-8.132650,9.807963,-9.714961,2.529602,-3.442102,9.666019,-1.815862,5.707372],[-4.527270,-4.622076,9.509048,0.948901,-3.352855,-2.162609,7.497219,6.644582,6.162169,-1.388713,0.591119],[-6.687969,4.929351,-6.629220,-1.129864,2.268280,2.352741,6.541053,6.433766,7.213931,-6.948860,7.103976],[-4.315194,-0.990171,6.434529,1.359248,-4.432879,-3.322540,3.402104,4.579622,-5.487838,-0.097237,0.745097],[-6.517031,7.938399,-9.516233,-6.553592,9.850879,-3.942866,-6.906815,-8.659575,4.003533,1.655399,-0.860201],[-7.225265,-1.865191,0.053648,-2.645740,-3.326597,7.984543,7.598396,-1.140429,3.845604,-6.941949,3.060411],[8.878752,-0.638407,-9.559442,-4.168312,-3.447935,1.322522,4.211330,7.564814,9.771515,-8.859260,7.176078],[-6.966350,6.752837,4.849405,-0.692533,2.584029,5.228876,-6.311122,3.470896,-9.797599,3.815426,7.189494]],[[-6.001439,1.174498,-9.393751,-3.833801,2.473581,8.061144,-2.810400,-9.064637,7.541936,-0.808504,8.982687],[6.911085,5.734381,-6.723721,5.582336,1.930940,-0.450210,3.587489,6.073134,3.874364,-5.608643,7.602863],[8.076654,9.921395,8.653565,3.018247,-6.257766,-1.423584,8.723707,3.028229,-3.503879,-2.987703,6.344224],[8.261512,-5.199913,5.205539,-2.611537,2.875699,-2.483296,-8.567456,9.677409,-5.543711,-8.933920,3.917277],[7.529176,-8.127579,-4.267257,-0.421694,-7.888977,-8.624570,-1.215504,-8.997147,-9.462855,5.410874,-7.306617],[5.763951,1.755256,-6.486998,-8.821329,3.009163,-7.290220,9.893863,7.348469,-3.930777,3.886217,-4.562850],[-5.915691,-1.143079,-3.996257,4.553794,-6.209749,-0.032900,-0.698334,3.186062,1.046776,-2.618385,8.996188],[-6.604334,7.807184,-8.046637,6.922481,0.628902,7.445763,-0.639160,4.434398,4.304438,-1.494293,1.757541],[-1.046971,5.894186,-3.961551,5.775734,6.186757,-3.014090,-3.669053,-0.484733,2.199146,3.113667,0.505461]],[[-7.795726,2.771120,-1.709801,-5.726909,-3.789308,5.467526,-0.498910,9.441615,8.368613,0.726662,5.784394],[-3.943325,8.804768,3.323672,9.389930,-6.596846,2.430624,5.266581,-5.399167,-8.101633,-1.310861,-2.707550],[1.948321,-5.569567,4.027351,-5.931601,9.722145,-4.853368,-2.012278,8.662706,-8.206323,1.796741,5.566695],[-3.487421,-7.548253,-2.228816,-8.209243,1.714497,-9.450773,-0.537719,7.501477,-4.370885,1.212444,0.125449],[6.106044,6.883726,6.527477,5.753159,9.526303,-1.501990,-5.298076,-3.402538,2.509907,-2.802609,6.494704],[8.185998,3.370535,0.676128,-0.322932,-4.882453,7.426113,-5.265256,6.980386,5.916478,0.301431,-3.059807],[-5.781012,-7.738431,5.623868,9.921775,7.983438,9.130979,6.344707,3.182271,-8.118173,7.820413,-7.655266],[-7.110555,9.682395,-9.610570,2.649518,7.703772,-3.558481,3.824422,-6.443202,-3.241166,-1.109160,7.767416],[9.643045,1.383984,-7.722020,1.500972,-2.461720,-4.373070,-3.877622,-0.921369,-2.102742,3.064405,2.601740]],[[-1.002482,-9.581533,1.070421,-8.878819,-9.227918,-9.726540,4.638548,-0.152539,1.427104,-4.018375,-7.676291],[-8.462667,-4.027782,-0.354978,9.005764,3.698627,-3.686203,0.559588,-2.636642,-8.719299,7.576165,-9.533155],[6.180226,0.015345,-9.386334,8.223710,-9.620209,6.431696,-9.090932,4.291000,-7.010624,9.648596,-5.486885],[-4.543615,-5.212440,8.764783,2.447768,6.287547,-8.883738,1.036553,-4.298597,6.127535,1.025701,-0.136792],[7.631045,5.207405,-1.763096,-1.202027,9.116247,3.175871,5.420446,5.435542,-8.491408,3.064939,-1.198703],[4.918551,8.730356,4.489675,-2.529560,-9.001707,2.412966,8.485398,-4.904846,-2.275542,-4.017549,-0.358120],[-6.555668,4.836644,-4.344103,4.796645,1.324899,2.975509,-9.291121,1.698916,-7.036259,-6.792612,-2.691880],[1.426900,3.923751,-4.413773,8.109390,9.699880,5.878387,9.857180,8.269057,-2.132335,7.804041,-9.067358],[-4.858688,-8.102184,4.489080,9.963975,-4.307391,4.316468,-0.600126,-8.022015,-7.607776,-9.176650,-2.066633]],[[9.255147,-2.179423,-8.777555,0.605499,8.834265,3.920606,1.167188,-2.383846,-7.761393,0.127472,-2.052024],[6.838079,-4.361600,-8.946254,5.267493,-8.967124,1.534730,-2.102803,-7.298329,-2.842144,-7.004475,-2.070693],[-0.472399,-6.093601,3.473014,-0.204923,1.216219,-9.968258,8.321782,-8.836227,3.113077,7.984712,-9.909512],[8.130859,-5.574768,-3.566655,5.405432,-1.513834,-1.598274,-7.287543,-7.435772,5.024130,-4.387339,5.754481],[2.523851,1.538635,-6.205620,5.210598,-1.841471,-0.881975,-7.782133,5.912262,1.254276,3.844692,-6.619573],[3.434277,0.239179,4.297241,5.092566,4.550779,-3.634488,3.881739,-9.698085,8.143781,5.474759,0.743142],[6.587825,5.178395,-6.132859,-2.698368,-7.606703,6.832968,-8.631794,-5.324930,-9.821404,-8.330336,-8.788523],[8.208742,-9.921061,7.646447,-5.084902,2.360341,-5.183492,-0.042507,-2.444181,5.508819,2.445282,-6.306008],[4.494745,3.336401,-1.642904,6.556593,0.644243,5.151511,2.570802,-9.449868,9.664603,6.262491,-1.851742]],[[-1.322790,-2.789480,-5.561097,3.935450,-4.107459,1.306207,-6.710297,4.691015,-7.199473,-2.726667,8.486266],[-1.826834,-8.371887,1.006517,7.056409,5.792851,-4.192070,-0.465567,3.648319,8.161099,-3.531240,2.442072],[5.075770,-3.877106,-9.010969,0.236475,3.704521,8.125805,-1.135807,1.449944,-7.790660,6.669169,5.837006],[5.581838,8.139895,-0.764156,7.195009,-3.486426,-9.331446,-4.121115,-6.488032,-3.598297,-0.028626,3.403822],[6.978322,-9.338216,5.430675,-2.949513,6.238118,-7.044886,4.825403,8.568729,-7.698252,9.491332,-2.740983],[2.252736,1.043709,-9.820280,7.541695,-0.883699,4.825481,7.756760,8.621153,7.917135,7.182221,8.872060],[-7.538184,-3.786351,2.097640,3.071311,6.466223,-7.686182,0.696184,-7.788181,-1.041687,8.124513,-4.230706],[-7.225283,-5.993292,-6.764493,7.834508,-6.562175,-1.158940,8.420487,-8.096222,-9.416711,1.133584,5.638326],[0.756868,-4.768899,-2.719207,1.822561,-6.468693,-7.249888,4.328452,-7.939942,7.316352,-6.318899,9.866626]],[[5.868221,2.318456,-1.222407,-4.029015,0.089729,1.260873,4.627801,6.309193,-2.082022,-0.978287,-4.809155],[-6.232628,9.731501,-4.432428,4.535221,5.525659,6.914413,-7.804339,5.143248,0.181341,8.120622,-2.827487],[4.446251,8.799561,2.715683,-8.501872,-9.867976,5.030593,-8.528673,2.305211,0.563444,-3.913853,6.070150],[-1.057741,1.248394,2.263628,6.566245,3.032631,5.548852,-6.901449,2.251430,2.163777,1.047680,4.743974],[-1.882400,-0.047687,7.351239,-6.051375,0.441552,0.955270,2.731438,6.246340,0.180179,8.918219,-4.304253],[9.434146,-1.210724,0.290260,2.947482,-0.287725,1.279702,-9.790469,2.806379,-2.736930,7.754286,-8.547292],[-2.161746,5.520271,-4.180653,1.189375,1.505270,-1.306059,8.170822,5.197532,-6.501935,-1.182343,-4.928927],[-8.898326,6.043343,6.108986,9.862755,0.184418,6.355793,6.736636,4.349131,-0.722565,1.623403,7.983432],[-2.119393,-8.367342,-4.689641,3.673645,1.026551,-6.846739,-2.664423,1.992672,6.492581,7.947739,-5.850883]],[[0.835677,1.748033,-1.010983,-0.452174,5.754776,-2.392751,-5.040937,-6.042312,-7.695101,2.205093,0.826697],[-4.601393,7.857501,9.628018,-5.940796,6.548830,-5.895965,-7.860956,-2.620566,-3.101926,7.211895,7.753857],[9.486454,5.021766,9.014397,-5.762628,-8.269918,9.232961,6.038521,6.511718,-8.563245,8.741442,9.267058],[3.964197,-9.884076,-4.678543,0.812318,4.632527,9.656292,-4.993143,-8.930839,4.747895,2.732894,-4.102096],[-6.180921,-3.680327,7.398198,2.311354,7.646473,-2.140846,-3.748120,-3.670755,-9.165151,-5.351015,-6.960510],[-2.311976,6.475677,-4.701093,-1.904629,4.680424,-6.264806,-1.978892,4.345947,-4.368308,-7.499860,0.147762],[0.675437,-8.233766,3.007533,-1.164891,8.345743,-1.314089,-8.634024,1.491936,-2.306009,7.078744,0.110116],[-9.106413,6.321605,1.628346,7.665897,-8.978706,-2.034278,-2.246934,1.333991,-0.140088,9.150810,-6.895277],[1.848711,-2.507486,-8.542037,-4.995560,1.494207,2.095949,4.261307,4.322640,2.069501,-8.170910,-3.533836]],[[6.083539,8.746570,6.471610,5.458668,-8.450820,3.306439,-0.077193,6.567466,7.164136,3.627832,9.323017],[-9.722838,7.037204,9.877139,9.520581,-0.179266,4.412392,-8.137935,-7.779237,-1.592910,-6.127100,3.511685],[-6.504725,6.307482,-7.142696,-5.397253,-7.796068,-1.788645,-4.285768,7.448128,2.660295,-8.295522,0.583214],[8.506607,-1.749562,-7.699017,-6.223889,2.707103,-7.316696,-0.396182,4.573598,0.614204,0.902342,7.060555],[2.589968,-9.715424,-1.191698,6.189936,1.983613,1.574123,7.468819,0.416340,-4.007278,-9.728591,1.519422],[0.387176,4.037616,-1.575466,-6.776887,-4.515864,-2.656902,-9.055250,9.522253,-6.080814,1.396480,0.561176],[-5.036299,-7.872944,4.345357,8.589834,0.889101,-8.816912,2.098869,-2.897648,-6.375957,2.963840,0.046738],[-3.729920,-0.781852,7.798880,-0.781258,-2.232804,7.951241,4.026436,4.897543,-0.183423,3.376925,7.349612],[6.501612,-5.398134,-3.946386,9.107351,-9.616157,-3.557410,-6.992667,-0.169175,-0.187475,0.086126,3.354683]],[[5.816210,-8.036952,1.308125,-9.808538,-3.240720,-3.456368,7.015988,7.010354,-7.170367,-7.313280,-9.401062],[4.620784,-2.141919,4.739272,4.893781,-8.098334,3.181640,-1.577488,2.425526,2.821594,0.791964,-6.460904],[-8.769013,5.618352,8.752970,3.631009,-5.237226,-2.681823,1.934565,6.746361,-3.638881,7.191452,-0.490958],[3.383667,-0.208916,4.904380,-4.884299,-5.161759,2.901071,-8.654906,-7.826673,-3.953519,-9.462178,4.422546],[-9.331808,-1.120525,-8.827636,-2.317463,-4.481518,-3.166742,-6.224742,-0.959761,-5.954329,5.651109,-9.967584],[-4.655287,-6.275078,8.858717,-7.977754,-6.064613,7.716499,0.769743,-5.467237,-4.174416,4.576439,3.370263],[8.648887,4.028012,-9.210223,9.060526,-9.886528,9.563565,3.532687,4.004967,2.469355,-2.867273,-7.938779],[6.917527,-1.732208,5.961560,-5.160780,7.550315,-8.188344,6.998412,-7.834105,7.207631,0.875904,9.481748],[-8.478861,-8.829756,-5.565469,-5.723047,-4.304802,3.801692,-0.718585,6.280705,0.279829,-7.239121,3.266746]],[[-6.251222,-1.504715,-0.377501,8.012641,-2.689281,-5.373790,6.004347,-4.508224,9.525523,5.117477,5.375008],[-8.622600,4.723056,9.548305,9.266731,3.874138,-0.842461,-6.204604,0.472420,-3.263200,9.623097,-8.109440],[3.441479,-2.559535,-1.119107,2.214015,8.323384,-1.196189,7.365126,-3.371451,-1.172719,6.330867,-0.060873],[6.725353,3.367950,2.379066,-2.056662,3.678147,-6.888386,-3.986378,-2.372430,-1.880108,1.595713,-6.470068],[0.969138,-0.466820,-0.784561,-5.525546,1.757914,5.382875,-5.988883,1.037769,-9.930286,-9.804730,-0.001880],[3.737219,9.329447,7.311760,-7.919203,4.542173,-4.545104,4.764410,8.792252,9.128046,7.738337,2.254677],[-9.727360,-5.110074,-7.837440,9.458158,-3.304979,5.948106,2.983474,-6.043287,-9.335737,9.123141,0.182001],[9.872151,-4.068566,9.545218,2.631901,1.082516,3.271506,6.056808,1.759695,5.769405,1.814160,4.884980],[5.515993,2.960919,1.712375,-1.993031,6.323973,-9.037253,2.620876,-7.824649,-4.264127,-8.953252,7.296607]]], dtype = "float32")#candidate|299|(12, 9, 11)|const|float32
uop_300 = relay.acos(const_299.astype('float32')) # shape=(12, 9, 11)
bop_302 = relay.add(const_299.astype('float32'), relay.reshape(uop_300.astype('float32'), relay.shape_of(const_299))) # shape=(12, 9, 11)
bop_305 = relay.power(uop_300.astype('float64'), relay.reshape(bop_302.astype('float64'), relay.shape_of(uop_300))) # shape=(12, 9, 11)
bop_310 = relay.maximum(const_299.astype('uint32'), relay.reshape(bop_302.astype('uint32'), relay.shape_of(const_299))) # shape=(12, 9, 11)
bop_324 = relay.right_shift(bop_302.astype('uint8'), relay.reshape(bop_310.astype('uint8'), relay.shape_of(bop_302))) # shape=(12, 9, 11)
bop_327 = relay.less_equal(uop_300.astype('bool'), relay.reshape(bop_305.astype('bool'), relay.shape_of(uop_300))) # shape=(12, 9, 11)
output = relay.Tuple([bop_324,bop_327,])
output2 = relay.Tuple([bop_324,bop_327,])
func_334 = relay.Function([], output)
mod['func_334'] = func_334
mod = relay.transform.InferType()(mod)
output = func_334()
func_335 = relay.Function([], output)
mutated_mod['func_335'] = func_335
mutated_mod = relay.transform.InferType()(mutated_mod)
func_334_call = mod.get_global_var('func_334')
func_335_call = mutated_mod.get_global_var('func_335')
call_346 = relay.TupleGetItem(func_334_call(), 0)
call_347 = relay.TupleGetItem(func_335_call(), 0)
uop_348 = relay.sigmoid(call_346.astype('float64')) # shape=(12, 9, 11)
uop_350 = relay.sigmoid(call_347.astype('float64')) # shape=(12, 9, 11)
output = relay.Tuple([uop_348,])
output2 = relay.Tuple([uop_350,])
func_359 = relay.Function([], output)
mod['func_359'] = func_359
mod = relay.transform.InferType()(mod)
output = func_359()
func_360 = relay.Function([], output)
mutated_mod['func_360'] = func_360
mutated_mod = relay.transform.InferType()(mutated_mod)
func_359_call = mod.get_global_var('func_359')
func_360_call = mutated_mod.get_global_var('func_360')
call_361 = relay.TupleGetItem(func_359_call(), 0)
call_362 = relay.TupleGetItem(func_360_call(), 0)
func_178_call = mod.get_global_var('func_178')
func_180_call = mutated_mod.get_global_var('func_180')
var_384 = relay.var("var_384", dtype = "float64", shape = (1, 18))#candidate|384|(1, 18)|var|float64
call_383 = relay.TupleGetItem(func_178_call(relay.reshape(var_384.astype('float64'), [2, 9])), 3)
call_385 = relay.TupleGetItem(func_180_call(relay.reshape(var_384.astype('float64'), [2, 9])), 3)
uop_392 = relay.acos(call_383.astype('float32')) # shape=(2, 9)
uop_394 = relay.acos(call_385.astype('float32')) # shape=(2, 9)
func_51_call = mod.get_global_var('func_51')
func_56_call = mutated_mod.get_global_var('func_56')
var_414 = relay.var("var_414", dtype = "float64", shape = (858,))#candidate|414|(858,)|var|float64
call_413 = relay.TupleGetItem(func_51_call(relay.reshape(var_414.astype('float64'), [6, 13, 11]), relay.reshape(var_414.astype('float64'), [6, 13, 11]), relay.reshape(var_414.astype('float64'), [6, 13, 11]), ), 1)
call_415 = relay.TupleGetItem(func_56_call(relay.reshape(var_414.astype('float64'), [6, 13, 11]), relay.reshape(var_414.astype('float64'), [6, 13, 11]), relay.reshape(var_414.astype('float64'), [6, 13, 11]), ), 1)
var_416 = relay.var("var_416", dtype = "float64", shape = (12, 18))#candidate|416|(12, 18)|var|float64
bop_417 = relay.divide(var_384.astype('float32'), var_416.astype('float32')) # shape=(12, 18)
var_420 = relay.var("var_420", dtype = "float32", shape = (2, 9))#candidate|420|(2, 9)|var|float32
bop_421 = relay.not_equal(uop_392.astype('bool'), relay.reshape(var_420.astype('bool'), relay.shape_of(uop_392))) # shape=(2, 9)
bop_424 = relay.not_equal(uop_394.astype('bool'), relay.reshape(var_420.astype('bool'), relay.shape_of(uop_394))) # shape=(2, 9)
func_178_call = mod.get_global_var('func_178')
func_180_call = mutated_mod.get_global_var('func_180')
call_428 = relay.TupleGetItem(func_178_call(relay.reshape(bop_421.astype('float64'), [2, 9])), 6)
call_429 = relay.TupleGetItem(func_180_call(relay.reshape(bop_421.astype('float64'), [2, 9])), 6)
output = relay.Tuple([call_361,call_413,var_414,bop_417,bop_421,call_428,])
output2 = relay.Tuple([call_362,call_415,var_414,bop_417,bop_424,call_429,])
func_431 = relay.Function([var_384,var_414,var_416,var_420,], output)
mod['func_431'] = func_431
mod = relay.transform.InferType()(mod)
var_432 = relay.var("var_432", dtype = "float64", shape = (1, 18))#candidate|432|(1, 18)|var|float64
var_433 = relay.var("var_433", dtype = "float64", shape = (858,))#candidate|433|(858,)|var|float64
var_434 = relay.var("var_434", dtype = "float64", shape = (12, 18))#candidate|434|(12, 18)|var|float64
var_435 = relay.var("var_435", dtype = "float32", shape = (2, 9))#candidate|435|(2, 9)|var|float32
output = func_431(var_432,var_433,var_434,var_435,)
func_436 = relay.Function([var_432,var_433,var_434,var_435,], output)
mutated_mod['func_436'] = func_436
mutated_mod = relay.transform.InferType()(mutated_mod)
var_461 = relay.var("var_461", dtype = "float32", shape = (12, 12))#candidate|461|(12, 12)|var|float32
uop_462 = relay.log10(var_461.astype('float32')) # shape=(12, 12)
bop_470 = relay.bitwise_and(uop_462.astype('int64'), relay.reshape(var_461.astype('int64'), relay.shape_of(uop_462))) # shape=(12, 12)
uop_493 = relay.asin(uop_462.astype('float32')) # shape=(12, 12)
func_334_call = mod.get_global_var('func_334')
func_335_call = mutated_mod.get_global_var('func_335')
call_495 = relay.TupleGetItem(func_334_call(), 0)
call_496 = relay.TupleGetItem(func_335_call(), 0)
const_503 = relay.const([[3.463967,-1.182551,-2.011540,2.029400,5.428907,-0.059632,2.541282,9.131097,3.794497,7.543143,3.497699,-1.768895],[-7.060295,-4.792226,3.226833,2.360930,9.584753,1.158915,-7.631545,5.967846,-4.942976,-2.764563,-2.146889,-6.441007],[3.111463,-3.257987,-5.661269,8.121131,-3.891682,2.387059,5.547753,-2.527550,3.966548,9.462499,-7.962553,4.782013],[-5.938989,-8.595013,-6.525723,-3.364439,6.192889,-2.626288,8.681600,-7.584253,9.953416,-2.051609,-3.113225,2.471716],[-1.176013,6.763224,-3.693034,1.215554,0.927884,6.288691,-2.363220,8.834295,-8.275143,0.362523,2.951881,7.682990],[-8.272453,-2.362163,8.594042,-8.593978,-7.424218,-9.968646,-6.950165,1.129554,-2.704319,6.260527,-7.881836,-8.230480],[-5.813724,-1.943698,1.508278,6.333507,3.710684,8.267660,1.052591,-7.381636,3.686897,-1.844987,-7.438010,1.202750],[-2.475638,7.816108,6.355622,1.256179,-5.888348,-6.371007,-0.835290,9.891605,2.849794,-3.028580,-3.050044,-4.753837],[4.206096,0.938487,-9.231156,-0.851489,-0.605741,9.940629,1.395458,1.877045,-4.238266,-9.487191,7.477770,3.352903],[-8.294194,-8.798664,-7.244225,-8.687610,8.067898,-9.640869,4.867906,8.991789,-3.774302,4.571816,4.040470,5.374606],[-5.182752,-2.123503,4.719693,-3.873968,5.237952,-3.067847,5.962640,-1.967738,2.086757,-4.522460,4.499743,-4.468515],[-9.519277,-9.835608,-9.104300,-0.459326,7.926823,8.565484,-7.460208,-1.918868,-6.768080,4.701929,8.777075,-0.553603]], dtype = "float32")#candidate|503|(12, 12)|const|float32
bop_504 = relay.floor_divide(var_461.astype('float64'), relay.reshape(const_503.astype('float64'), relay.shape_of(var_461))) # shape=(12, 12)
uop_519 = relay.erf(uop_493.astype('float64')) # shape=(12, 12)
bop_521 = relay.maximum(uop_519.astype('int64'), relay.reshape(uop_493.astype('int64'), relay.shape_of(uop_519))) # shape=(12, 12)
output = relay.Tuple([bop_470,call_495,bop_504,bop_521,])
output2 = relay.Tuple([bop_470,call_496,bop_504,bop_521,])
func_527 = relay.Function([var_461,], output)
mod['func_527'] = func_527
mod = relay.transform.InferType()(mod)
mutated_mod['func_527'] = func_527
mutated_mod = relay.transform.InferType()(mutated_mod)
var_528 = relay.var("var_528", dtype = "float32", shape = (12, 12))#candidate|528|(12, 12)|var|float32
func_527_call = mutated_mod.get_global_var('func_527')
call_529 = func_527_call(var_528)
output = call_529
func_530 = relay.Function([var_528], output)
mutated_mod['func_530'] = func_530
mutated_mod = relay.transform.InferType()(mutated_mod)
const_548 = relay.const([[1,9,-4],[7,-8,6],[-10,-7,9],[8,-4,-9],[4,-3,5]], dtype = "uint32")#candidate|548|(5, 3)|const|uint32
var_549 = relay.var("var_549", dtype = "uint32", shape = (5, 3))#candidate|549|(5, 3)|var|uint32
bop_550 = relay.logical_xor(const_548.astype('uint32'), relay.reshape(var_549.astype('uint32'), relay.shape_of(const_548))) # shape=(5, 3)
bop_554 = relay.maximum(const_548.astype('int16'), relay.reshape(bop_550.astype('int16'), relay.shape_of(const_548))) # shape=(5, 3)
var_564 = relay.var("var_564", dtype = "int16", shape = (5, 3))#candidate|564|(5, 3)|var|int16
bop_565 = relay.minimum(bop_554.astype('int8'), relay.reshape(var_564.astype('int8'), relay.shape_of(bop_554))) # shape=(5, 3)
output = bop_565
output2 = bop_565
func_568 = relay.Function([var_549,var_564,], output)
mod['func_568'] = func_568
mod = relay.transform.InferType()(mod)
var_569 = relay.var("var_569", dtype = "uint32", shape = (5, 3))#candidate|569|(5, 3)|var|uint32
var_570 = relay.var("var_570", dtype = "int16", shape = (5, 3))#candidate|570|(5, 3)|var|int16
output = func_568(var_569,var_570,)
func_571 = relay.Function([var_569,var_570,], output)
mutated_mod['func_571'] = func_571
mutated_mod = relay.transform.InferType()(mutated_mod)
func_334_call = mod.get_global_var('func_334')
func_335_call = mutated_mod.get_global_var('func_335')
call_573 = relay.TupleGetItem(func_334_call(), 1)
call_574 = relay.TupleGetItem(func_335_call(), 1)
func_334_call = mod.get_global_var('func_334')
func_335_call = mutated_mod.get_global_var('func_335')
call_583 = relay.TupleGetItem(func_334_call(), 0)
call_584 = relay.TupleGetItem(func_335_call(), 0)
uop_602 = relay.log10(call_573.astype('float32')) # shape=(12, 9, 11)
uop_604 = relay.log10(call_574.astype('float32')) # shape=(12, 9, 11)
func_178_call = mod.get_global_var('func_178')
func_180_call = mutated_mod.get_global_var('func_180')
const_609 = relay.const([[-9.738536,-2.996403,-2.366317,4.866500,9.020371,-5.747060,-9.197439,4.211788,-0.087586,2.459701,-3.353753,4.444540,-6.550391,0.492537,-5.304843,8.085102,-1.818116,6.681832]], dtype = "float64")#candidate|609|(1, 18)|const|float64
call_608 = relay.TupleGetItem(func_178_call(relay.reshape(const_609.astype('float64'), [2, 9])), 1)
call_610 = relay.TupleGetItem(func_180_call(relay.reshape(const_609.astype('float64'), [2, 9])), 1)
func_431_call = mod.get_global_var('func_431')
func_436_call = mutated_mod.get_global_var('func_436')
var_622 = relay.var("var_622", dtype = "float64", shape = (216, 1))#candidate|622|(216, 1)|var|float64
call_621 = relay.TupleGetItem(func_431_call(relay.reshape(const_609.astype('float64'), [1, 18]), relay.reshape(call_608.astype('float64'), [858,]), relay.reshape(var_622.astype('float64'), [12, 18]), relay.reshape(const_609.astype('float32'), [2, 9]), ), 2)
call_623 = relay.TupleGetItem(func_436_call(relay.reshape(const_609.astype('float64'), [1, 18]), relay.reshape(call_608.astype('float64'), [858,]), relay.reshape(var_622.astype('float64'), [12, 18]), relay.reshape(const_609.astype('float32'), [2, 9]), ), 2)
output = relay.Tuple([call_583,uop_602,call_608,const_609,call_621,var_622,])
output2 = relay.Tuple([call_584,uop_604,call_610,const_609,call_623,var_622,])
func_626 = relay.Function([var_622,], output)
mod['func_626'] = func_626
mod = relay.transform.InferType()(mod)
mutated_mod['func_626'] = func_626
mutated_mod = relay.transform.InferType()(mutated_mod)
var_627 = relay.var("var_627", dtype = "float64", shape = (216, 1))#candidate|627|(216, 1)|var|float64
func_626_call = mutated_mod.get_global_var('func_626')
call_628 = func_626_call(var_627)
output = call_628
func_629 = relay.Function([var_627], output)
mutated_mod['func_629'] = func_629
mutated_mod = relay.transform.InferType()(mutated_mod)
var_639 = relay.var("var_639", dtype = "float32", shape = (9, 15, 15))#candidate|639|(9, 15, 15)|var|float32
uop_640 = relay.tan(var_639.astype('float32')) # shape=(9, 15, 15)
bop_648 = relay.floor_mod(uop_640.astype('float32'), relay.reshape(var_639.astype('float32'), relay.shape_of(uop_640))) # shape=(9, 15, 15)
bop_661 = relay.logical_xor(bop_648.astype('int16'), relay.reshape(uop_640.astype('int16'), relay.shape_of(bop_648))) # shape=(9, 15, 15)
output = bop_661
output2 = bop_661
func_666 = relay.Function([var_639,], output)
mod['func_666'] = func_666
mod = relay.transform.InferType()(mod)
var_667 = relay.var("var_667", dtype = "float32", shape = (9, 15, 15))#candidate|667|(9, 15, 15)|var|float32
output = func_666(var_667)
func_668 = relay.Function([var_667], output)
mutated_mod['func_668'] = func_668
mutated_mod = relay.transform.InferType()(mutated_mod)
func_359_call = mod.get_global_var('func_359')
func_360_call = mutated_mod.get_global_var('func_360')
call_675 = relay.TupleGetItem(func_359_call(), 0)
call_676 = relay.TupleGetItem(func_360_call(), 0)
var_697 = relay.var("var_697", dtype = "float64", shape = (12, 9, 11))#candidate|697|(12, 9, 11)|var|float64
bop_698 = relay.mod(call_675.astype('float64'), relay.reshape(var_697.astype('float64'), relay.shape_of(call_675))) # shape=(12, 9, 11)
bop_701 = relay.mod(call_676.astype('float64'), relay.reshape(var_697.astype('float64'), relay.shape_of(call_676))) # shape=(12, 9, 11)
bop_720 = relay.floor_mod(var_697.astype('float32'), relay.reshape(call_675.astype('float32'), relay.shape_of(var_697))) # shape=(12, 9, 11)
bop_723 = relay.floor_mod(var_697.astype('float32'), relay.reshape(call_676.astype('float32'), relay.shape_of(var_697))) # shape=(12, 9, 11)
bop_726 = relay.bitwise_and(var_697.astype('int32'), relay.reshape(bop_720.astype('int32'), relay.shape_of(var_697))) # shape=(12, 9, 11)
bop_729 = relay.bitwise_and(var_697.astype('int32'), relay.reshape(bop_723.astype('int32'), relay.shape_of(var_697))) # shape=(12, 9, 11)
uop_736 = relay.cos(bop_720.astype('float64')) # shape=(12, 9, 11)
uop_738 = relay.cos(bop_723.astype('float64')) # shape=(12, 9, 11)
func_51_call = mod.get_global_var('func_51')
func_56_call = mutated_mod.get_global_var('func_56')
var_741 = relay.var("var_741", dtype = "float64", shape = (858,))#candidate|741|(858,)|var|float64
call_740 = relay.TupleGetItem(func_51_call(relay.reshape(var_741.astype('float64'), [6, 13, 11]), relay.reshape(var_741.astype('float64'), [6, 13, 11]), relay.reshape(var_741.astype('float64'), [6, 13, 11]), ), 5)
call_742 = relay.TupleGetItem(func_56_call(relay.reshape(var_741.astype('float64'), [6, 13, 11]), relay.reshape(var_741.astype('float64'), [6, 13, 11]), relay.reshape(var_741.astype('float64'), [6, 13, 11]), ), 5)
func_291_call = mod.get_global_var('func_291')
func_294_call = mutated_mod.get_global_var('func_294')
var_745 = relay.var("var_745", dtype = "float64", shape = (18,))#candidate|745|(18,)|var|float64
call_744 = relay.TupleGetItem(func_291_call(relay.reshape(var_745.astype('float64'), [18,])), 4)
call_746 = relay.TupleGetItem(func_294_call(relay.reshape(var_745.astype('float64'), [18,])), 4)
func_527_call = mod.get_global_var('func_527')
func_530_call = mutated_mod.get_global_var('func_530')
var_748 = relay.var("var_748", dtype = "float32", shape = (144,))#candidate|748|(144,)|var|float32
call_747 = relay.TupleGetItem(func_527_call(relay.reshape(var_748.astype('float32'), [12, 12])), 3)
call_749 = relay.TupleGetItem(func_530_call(relay.reshape(var_748.astype('float32'), [12, 12])), 3)
func_291_call = mod.get_global_var('func_291')
func_294_call = mutated_mod.get_global_var('func_294')
call_754 = relay.TupleGetItem(func_291_call(relay.reshape(var_745.astype('float64'), [18,])), 1)
call_755 = relay.TupleGetItem(func_294_call(relay.reshape(var_745.astype('float64'), [18,])), 1)
uop_757 = relay.log(uop_736.astype('float64')) # shape=(12, 9, 11)
uop_759 = relay.log(uop_738.astype('float64')) # shape=(12, 9, 11)
output = relay.Tuple([bop_698,bop_726,call_740,var_741,call_744,var_745,call_747,var_748,call_754,uop_757,])
output2 = relay.Tuple([bop_701,bop_729,call_742,var_741,call_746,var_745,call_749,var_748,call_755,uop_759,])
func_760 = relay.Function([var_697,var_741,var_745,var_748,], output)
mod['func_760'] = func_760
mod = relay.transform.InferType()(mod)
mutated_mod['func_760'] = func_760
mutated_mod = relay.transform.InferType()(mutated_mod)
func_760_call = mutated_mod.get_global_var('func_760')
var_762 = relay.var("var_762", dtype = "float64", shape = (12, 9, 11))#candidate|762|(12, 9, 11)|var|float64
var_763 = relay.var("var_763", dtype = "float64", shape = (858,))#candidate|763|(858,)|var|float64
var_764 = relay.var("var_764", dtype = "float64", shape = (18,))#candidate|764|(18,)|var|float64
var_765 = relay.var("var_765", dtype = "float32", shape = (144,))#candidate|765|(144,)|var|float32
call_761 = func_760_call(var_762,var_763,var_764,var_765,)
output = call_761
func_766 = relay.Function([var_762,var_763,var_764,var_765,], output)
mutated_mod['func_766'] = func_766
mutated_mod = relay.transform.InferType()(mutated_mod)
func_334_call = mod.get_global_var('func_334')
func_335_call = mutated_mod.get_global_var('func_335')
call_770 = relay.TupleGetItem(func_334_call(), 1)
call_771 = relay.TupleGetItem(func_335_call(), 1)
output = call_770
output2 = call_771
func_772 = relay.Function([], output)
mod['func_772'] = func_772
mod = relay.transform.InferType()(mod)
output = func_772()
func_773 = relay.Function([], output)
mutated_mod['func_773'] = func_773
mutated_mod = relay.transform.InferType()(mutated_mod)
func_772_call = mod.get_global_var('func_772')
func_773_call = mutated_mod.get_global_var('func_773')
call_823 = func_772_call()
call_824 = func_772_call()
func_568_call = mod.get_global_var('func_568')
func_571_call = mutated_mod.get_global_var('func_571')
var_832 = relay.var("var_832", dtype = "uint32", shape = (15,))#candidate|832|(15,)|var|uint32
call_831 = func_568_call(relay.reshape(var_832.astype('uint32'), [5, 3]), relay.reshape(var_832.astype('int16'), [5, 3]), )
call_833 = func_568_call(relay.reshape(var_832.astype('uint32'), [5, 3]), relay.reshape(var_832.astype('int16'), [5, 3]), )
output = relay.Tuple([call_823,call_831,var_832,])
output2 = relay.Tuple([call_824,call_833,var_832,])
func_835 = relay.Function([var_832,], output)
mod['func_835'] = func_835
mod = relay.transform.InferType()(mod)
var_836 = relay.var("var_836", dtype = "uint32", shape = (15,))#candidate|836|(15,)|var|uint32
output = func_835(var_836)
func_837 = relay.Function([var_836], output)
mutated_mod['func_837'] = func_837
mutated_mod = relay.transform.InferType()(mutated_mod)
func_334_call = mod.get_global_var('func_334')
func_335_call = mutated_mod.get_global_var('func_335')
call_841 = relay.TupleGetItem(func_334_call(), 1)
call_842 = relay.TupleGetItem(func_335_call(), 1)
const_852 = relay.const([[[True,False,True,False,False,True,False,False,False,False,False],[True,True,False,True,False,False,False,True,True,True,True],[True,False,True,True,True,True,True,True,True,True,True],[False,True,True,False,False,True,False,False,True,False,True],[True,True,False,False,True,True,True,True,False,True,True],[False,False,False,True,True,True,False,False,False,True,False],[True,True,False,False,True,False,False,True,True,True,True],[True,True,False,False,True,True,True,False,True,True,False],[True,False,True,True,False,False,True,True,False,True,False]],[[False,True,False,False,True,True,True,True,False,True,False],[True,True,True,False,False,True,True,True,True,True,True],[True,False,False,True,True,True,True,False,False,True,False],[False,True,True,True,False,False,False,True,True,True,True],[False,True,True,False,True,True,True,False,False,False,False],[False,True,True,False,False,False,False,True,False,False,False],[True,True,True,False,True,False,True,False,True,True,False],[True,True,True,False,True,True,False,True,True,True,True],[False,True,True,False,True,True,False,True,True,False,False]],[[False,False,False,True,True,False,False,False,False,True,False],[True,True,True,False,False,False,True,True,True,False,False],[True,False,True,False,True,False,True,True,False,False,True],[False,True,False,True,True,False,True,True,False,True,False],[True,True,False,False,True,True,True,True,True,False,True],[False,False,False,False,False,True,True,False,False,True,True],[False,False,False,True,False,True,True,True,False,True,False],[False,True,True,False,False,False,True,True,False,False,True],[False,False,True,False,True,True,False,True,False,True,True]],[[True,False,True,False,True,False,False,False,True,True,True],[False,True,False,True,False,True,True,False,False,True,True],[False,True,False,True,False,True,False,True,True,True,True],[False,True,False,True,False,True,False,True,False,False,False],[False,True,False,True,False,True,False,False,False,False,True],[False,True,True,False,True,False,True,False,True,True,False],[False,False,False,True,False,True,True,True,True,False,False],[True,True,True,False,True,True,False,True,False,True,True],[False,True,False,False,False,True,False,True,True,False,False]],[[True,True,False,False,False,True,True,False,False,False,False],[True,True,True,False,True,True,False,False,False,False,True],[False,True,True,True,True,True,False,True,True,True,False],[True,True,False,True,False,True,True,True,True,False,False],[False,False,True,True,False,False,True,True,True,False,False],[True,True,True,False,False,False,True,True,False,False,True],[False,True,True,True,False,False,False,False,False,True,False],[False,False,True,False,False,False,True,False,False,False,True],[True,False,True,True,True,True,True,False,False,True,True]],[[True,True,False,False,True,False,False,False,True,False,True],[False,False,True,False,False,True,False,False,False,True,True],[False,False,False,True,True,False,True,False,False,False,True],[False,False,True,False,True,True,True,True,False,True,False],[True,True,False,False,True,False,True,False,True,True,False],[False,False,True,False,True,False,False,True,True,False,False],[False,True,True,False,False,False,False,False,False,False,True],[False,False,True,True,True,True,False,False,False,False,False],[True,True,True,True,True,True,True,False,True,True,True]],[[False,True,True,False,False,True,True,False,True,True,False],[False,False,False,True,True,False,True,True,True,True,False],[False,False,False,True,True,False,False,True,True,False,False],[False,True,False,False,False,False,True,True,True,True,False],[True,False,True,True,False,False,False,True,True,True,True],[True,False,True,True,True,False,False,True,False,False,False],[True,False,False,True,True,False,False,False,False,True,True],[True,True,True,True,True,False,False,False,True,True,True],[False,False,False,False,False,True,True,True,False,False,True]],[[False,True,True,False,False,True,False,True,False,True,False],[True,True,False,True,True,False,True,True,True,True,True],[True,False,False,True,True,True,True,True,False,True,False],[True,False,False,True,False,False,True,False,False,True,True],[False,False,False,True,True,True,False,True,True,False,True],[True,True,False,False,False,True,False,True,True,False,True],[False,True,False,False,False,False,False,True,True,True,False],[True,False,True,True,False,False,False,False,True,True,True],[True,True,True,False,True,True,False,True,False,False,False]],[[False,False,True,False,False,False,True,True,False,True,True],[False,False,False,False,False,False,False,True,False,True,False],[True,False,True,False,False,True,True,False,True,True,False],[False,False,False,True,True,False,True,False,True,True,False],[True,False,False,False,False,True,False,True,True,True,True],[True,False,True,False,True,True,True,False,True,False,False],[False,True,False,False,False,False,True,False,True,True,False],[True,True,False,True,True,True,False,False,True,True,False],[False,True,True,False,True,False,True,True,False,True,False]],[[False,True,False,True,True,False,False,False,False,True,True],[False,False,False,False,True,False,True,False,True,True,False],[False,True,True,False,True,False,True,False,False,True,False],[False,False,True,True,False,True,True,False,False,False,False],[False,False,True,False,True,False,True,False,False,False,False],[True,False,True,True,True,True,True,True,True,True,True],[False,False,False,True,False,False,True,False,False,True,False],[False,False,True,False,True,True,False,True,True,True,False],[False,False,True,False,True,False,True,False,False,False,True]],[[False,True,True,False,True,True,False,False,True,False,False],[False,False,False,True,False,True,True,True,True,True,True],[True,True,False,True,True,True,True,True,False,True,False],[True,True,True,False,False,False,True,False,False,True,True],[False,False,True,False,True,True,True,True,False,False,False],[True,False,True,False,True,False,False,True,True,True,False],[False,True,False,False,False,True,True,True,False,True,True],[True,True,True,False,True,False,True,True,False,False,True],[False,False,True,False,False,False,True,True,False,False,False]],[[True,False,False,False,True,True,False,True,False,True,False],[True,False,True,True,True,True,False,True,False,False,True],[True,False,True,True,False,False,False,False,False,True,False],[False,True,False,True,True,True,True,False,True,True,False],[True,False,True,False,False,False,False,False,True,False,True],[False,True,True,False,True,True,False,False,True,False,True],[True,True,False,False,True,True,False,False,True,True,False],[True,True,True,True,True,True,True,True,False,True,True],[True,False,False,False,False,True,False,True,False,True,False]]], dtype = "bool")#candidate|852|(12, 9, 11)|const|bool
bop_853 = relay.subtract(call_841.astype('float64'), relay.reshape(const_852.astype('float64'), relay.shape_of(call_841))) # shape=(12, 9, 11)
bop_856 = relay.subtract(call_842.astype('float64'), relay.reshape(const_852.astype('float64'), relay.shape_of(call_842))) # shape=(12, 9, 11)
output = relay.Tuple([bop_853,])
output2 = relay.Tuple([bop_856,])
func_868 = relay.Function([], output)
mod['func_868'] = func_868
mod = relay.transform.InferType()(mod)
output = func_868()
func_869 = relay.Function([], output)
mutated_mod['func_869'] = func_869
mutated_mod = relay.transform.InferType()(mutated_mod)
var_874 = relay.var("var_874", dtype = "uint8", shape = (13, 14))#candidate|874|(13, 14)|var|uint8
var_875 = relay.var("var_875", dtype = "uint8", shape = (13, 14))#candidate|875|(13, 14)|var|uint8
bop_876 = relay.minimum(var_874.astype('uint8'), relay.reshape(var_875.astype('uint8'), relay.shape_of(var_874))) # shape=(13, 14)
uop_885 = relay.sigmoid(var_875.astype('float32')) # shape=(13, 14)
bop_888 = relay.left_shift(uop_885.astype('int8'), relay.reshape(var_875.astype('int8'), relay.shape_of(uop_885))) # shape=(13, 14)
bop_895 = relay.equal(bop_888.astype('bool'), relay.reshape(bop_876.astype('bool'), relay.shape_of(bop_888))) # shape=(13, 14)
func_291_call = mod.get_global_var('func_291')
func_294_call = mutated_mod.get_global_var('func_294')
var_899 = relay.var("var_899", dtype = "float64", shape = (18,))#candidate|899|(18,)|var|float64
call_898 = relay.TupleGetItem(func_291_call(relay.reshape(var_899.astype('float64'), [18,])), 1)
call_900 = relay.TupleGetItem(func_294_call(relay.reshape(var_899.astype('float64'), [18,])), 1)
bop_905 = relay.floor_mod(uop_885.astype('float32'), relay.reshape(var_875.astype('float32'), relay.shape_of(uop_885))) # shape=(13, 14)
output = relay.Tuple([bop_895,call_898,var_899,bop_905,])
output2 = relay.Tuple([bop_895,call_900,var_899,bop_905,])
func_916 = relay.Function([var_874,var_875,var_899,], output)
mod['func_916'] = func_916
mod = relay.transform.InferType()(mod)
mutated_mod['func_916'] = func_916
mutated_mod = relay.transform.InferType()(mutated_mod)
func_916_call = mutated_mod.get_global_var('func_916')
var_918 = relay.var("var_918", dtype = "uint8", shape = (13, 14))#candidate|918|(13, 14)|var|uint8
var_919 = relay.var("var_919", dtype = "uint8", shape = (13, 14))#candidate|919|(13, 14)|var|uint8
var_920 = relay.var("var_920", dtype = "float64", shape = (18,))#candidate|920|(18,)|var|float64
call_917 = func_916_call(var_918,var_919,var_920,)
output = call_917
func_921 = relay.Function([var_918,var_919,var_920,], output)
mutated_mod['func_921'] = func_921
mutated_mod = relay.transform.InferType()(mutated_mod)
var_951 = relay.var("var_951", dtype = "float32", shape = (6, 8))#candidate|951|(6, 8)|var|float32
uop_952 = relay.log10(var_951.astype('float32')) # shape=(6, 8)
output = relay.Tuple([uop_952,])
output2 = relay.Tuple([uop_952,])
func_954 = relay.Function([var_951,], output)
mod['func_954'] = func_954
mod = relay.transform.InferType()(mod)
mutated_mod['func_954'] = func_954
mutated_mod = relay.transform.InferType()(mutated_mod)
var_955 = relay.var("var_955", dtype = "float32", shape = (6, 8))#candidate|955|(6, 8)|var|float32
func_954_call = mutated_mod.get_global_var('func_954')
call_956 = func_954_call(var_955)
output = call_956
func_957 = relay.Function([var_955], output)
mutated_mod['func_957'] = func_957
mutated_mod = relay.transform.InferType()(mutated_mod)
func_868_call = mod.get_global_var('func_868')
func_869_call = mutated_mod.get_global_var('func_869')
call_993 = relay.TupleGetItem(func_868_call(), 0)
call_994 = relay.TupleGetItem(func_869_call(), 0)
output = relay.Tuple([call_993,])
output2 = relay.Tuple([call_994,])
func_995 = relay.Function([], output)
mod['func_995'] = func_995
mod = relay.transform.InferType()(mod)
output = func_995()
func_996 = relay.Function([], output)
mutated_mod['func_996'] = func_996
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1024 = relay.var("var_1024", dtype = "int16", shape = (6, 9, 11))#candidate|1024|(6, 9, 11)|var|int16
const_1025 = relay.const([[[9,9,3,10,4,-8,-4,2,10,-6,-10],[-4,4,-7,9,-8,7,-2,1,-4,7,-7],[-9,-2,4,-1,-6,-9,8,5,1,10,1],[8,-3,-10,2,-3,6,-9,1,5,6,-8],[-9,4,6,-5,3,2,-4,8,10,9,7],[4,-10,9,-10,-10,2,6,7,7,-5,-10],[3,-6,-9,7,-3,-8,-8,10,-4,7,-6],[3,6,-5,-1,1,3,5,2,-2,2,9],[4,10,-10,3,-1,1,-8,-8,3,3,9]],[[-10,9,-10,-1,-3,-10,5,9,8,-6,-7],[7,-3,7,6,3,10,9,5,1,-7,10],[-3,-1,10,1,-4,-5,7,-3,1,-1,10],[-3,2,-2,6,-10,-4,1,-10,3,9,3],[3,2,-3,-5,5,-7,-3,-3,-2,8,-5],[2,-1,1,5,7,9,-2,-2,-3,-6,-3],[1,7,-10,1,-4,-1,10,-5,6,-2,3],[5,-10,4,3,2,5,7,-4,1,3,-5],[5,-7,3,-4,-1,4,1,7,5,-8,-1]],[[-8,-5,-5,2,-1,-1,6,8,-2,10,2],[2,-5,-1,9,-8,-8,-5,-1,-4,-2,1],[-1,-9,-7,9,-10,9,9,-6,1,-7,-7],[2,9,-10,-1,10,-7,-4,-8,4,-3,-3],[2,-3,5,1,-4,10,7,6,-1,1,-7],[-4,10,-5,10,7,7,-4,2,4,8,-9],[6,-4,-4,-4,-2,6,-6,-6,8,8,-5],[-10,10,3,8,3,-9,-10,4,2,2,-7],[-10,5,-6,5,-7,-8,-9,-3,5,2,2]],[[5,-5,1,6,8,-3,-3,-7,-10,-1,9],[1,6,9,2,-9,-9,-5,-4,10,-6,-6],[-2,7,-5,-2,10,-8,1,-4,9,9,10],[8,-4,7,-3,-1,3,-9,-8,-5,-4,5],[-2,-8,4,1,-3,1,9,-9,10,9,10],[4,-9,-8,-5,8,-4,10,-6,-4,-10,-8],[3,-3,-1,-8,10,-1,-2,2,2,5,-8],[3,-6,5,-2,-6,4,9,4,6,-9,3],[-8,1,4,-5,2,8,-5,-5,10,5,3]],[[-9,1,-10,-4,2,-7,1,8,6,4,-8],[-1,-9,4,-4,7,-3,9,-7,-8,5,3],[-9,-2,2,2,-6,-5,-3,8,-6,-3,3],[4,-4,-10,-8,-5,-7,1,-4,1,6,-8],[5,-10,-10,3,4,-3,10,7,10,4,-2],[7,9,-9,-4,-8,10,-3,9,-6,-3,-3],[-4,-2,4,-2,-2,4,8,8,8,-2,-4],[-1,-1,7,-5,9,-3,-6,7,-3,10,4],[-1,-2,10,9,1,6,6,7,6,-5,-7]],[[5,-10,6,-8,-7,-3,-7,-5,5,-8,-7],[6,8,-2,-10,5,-4,4,6,-10,-2,-2],[-8,-7,2,-5,10,4,5,10,-4,1,-1],[-10,8,9,-7,-10,9,-7,1,-9,5,-8],[9,6,-6,-3,-1,-3,5,10,5,6,-5],[5,2,8,9,-8,5,-2,-10,-7,10,-1],[-2,-8,8,2,-4,1,3,5,-5,-2,6],[3,-1,-6,-2,7,-5,2,-6,9,1,7],[-7,-8,5,5,4,-7,8,-5,8,4,-4]]], dtype = "int16")#candidate|1025|(6, 9, 11)|const|int16
bop_1026 = relay.bitwise_or(var_1024.astype('int16'), relay.reshape(const_1025.astype('int16'), relay.shape_of(var_1024))) # shape=(6, 9, 11)
output = bop_1026
output2 = bop_1026
func_1032 = relay.Function([var_1024,], output)
mod['func_1032'] = func_1032
mod = relay.transform.InferType()(mod)
var_1033 = relay.var("var_1033", dtype = "int16", shape = (6, 9, 11))#candidate|1033|(6, 9, 11)|var|int16
output = func_1032(var_1033)
func_1034 = relay.Function([var_1033], output)
mutated_mod['func_1034'] = func_1034
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1051 = relay.var("var_1051", dtype = "float64", shape = (5, 11))#candidate|1051|(5, 11)|var|float64
uop_1052 = relay.exp(var_1051.astype('float64')) # shape=(5, 11)
uop_1062 = relay.tan(uop_1052.astype('float64')) # shape=(5, 11)
func_868_call = mod.get_global_var('func_868')
func_869_call = mutated_mod.get_global_var('func_869')
call_1064 = relay.TupleGetItem(func_868_call(), 0)
call_1065 = relay.TupleGetItem(func_869_call(), 0)
func_334_call = mod.get_global_var('func_334')
func_335_call = mutated_mod.get_global_var('func_335')
call_1066 = relay.TupleGetItem(func_334_call(), 0)
call_1067 = relay.TupleGetItem(func_335_call(), 0)
output = relay.Tuple([uop_1062,call_1064,call_1066,])
output2 = relay.Tuple([uop_1062,call_1065,call_1067,])
func_1080 = relay.Function([var_1051,], output)
mod['func_1080'] = func_1080
mod = relay.transform.InferType()(mod)
var_1081 = relay.var("var_1081", dtype = "float64", shape = (5, 11))#candidate|1081|(5, 11)|var|float64
output = func_1080(var_1081)
func_1082 = relay.Function([var_1081], output)
mutated_mod['func_1082'] = func_1082
mutated_mod = relay.transform.InferType()(mutated_mod)
func_334_call = mod.get_global_var('func_334')
func_335_call = mutated_mod.get_global_var('func_335')
call_1207 = relay.TupleGetItem(func_334_call(), 1)
call_1208 = relay.TupleGetItem(func_335_call(), 1)
func_954_call = mod.get_global_var('func_954')
func_957_call = mutated_mod.get_global_var('func_957')
const_1210 = relay.const([7.603218,-3.550761,-1.569114,-1.580220,6.897261,1.105246,4.963771,-6.545736,1.483877,-5.550480,-1.664466,1.063845,-3.284122,-9.401176,8.618518,1.975908,4.454638,9.472284,-2.244972,3.601300,2.583576,6.037920,-0.694986,9.930031,5.587067,1.036613,-2.652593,4.990113,0.757511,-8.758690,-1.460655,7.654770,7.313757,9.336748,-3.443548,-2.564266,2.091894,-4.975161,3.850929,-9.309985,-0.899553,6.720887,-6.219487,2.762703,-5.317317,-0.718814,8.465585,-0.298028], dtype = "float32")#candidate|1210|(48,)|const|float32
call_1209 = relay.TupleGetItem(func_954_call(relay.reshape(const_1210.astype('float32'), [6, 8])), 0)
call_1211 = relay.TupleGetItem(func_957_call(relay.reshape(const_1210.astype('float32'), [6, 8])), 0)
var_1213 = relay.var("var_1213", dtype = "float32", shape = (6, 8))#candidate|1213|(6, 8)|var|float32
bop_1214 = relay.less(call_1209.astype('bool'), relay.reshape(var_1213.astype('bool'), relay.shape_of(call_1209))) # shape=(6, 8)
bop_1217 = relay.less(call_1211.astype('bool'), relay.reshape(var_1213.astype('bool'), relay.shape_of(call_1211))) # shape=(6, 8)
func_1032_call = mod.get_global_var('func_1032')
func_1034_call = mutated_mod.get_global_var('func_1034')
var_1221 = relay.var("var_1221", dtype = "int16", shape = (594,))#candidate|1221|(594,)|var|int16
call_1220 = func_1032_call(relay.reshape(var_1221.astype('int16'), [6, 9, 11]))
call_1222 = func_1032_call(relay.reshape(var_1221.astype('int16'), [6, 9, 11]))
uop_1225 = relay.sqrt(var_1221.astype('float32')) # shape=(594,)
func_760_call = mod.get_global_var('func_760')
func_766_call = mutated_mod.get_global_var('func_766')
var_1238 = relay.var("var_1238", dtype = "float64", shape = (858,))#candidate|1238|(858,)|var|float64
var_1239 = relay.var("var_1239", dtype = "float64", shape = (18,))#candidate|1239|(18,)|var|float64
var_1240 = relay.var("var_1240", dtype = "float32", shape = (144,))#candidate|1240|(144,)|var|float32
call_1237 = relay.TupleGetItem(func_760_call(relay.reshape(call_1207.astype('float64'), [12, 9, 11]), relay.reshape(var_1238.astype('float64'), [858,]), relay.reshape(var_1239.astype('float64'), [18,]), relay.reshape(var_1240.astype('float32'), [144,]), ), 3)
call_1241 = relay.TupleGetItem(func_766_call(relay.reshape(call_1207.astype('float64'), [12, 9, 11]), relay.reshape(var_1238.astype('float64'), [858,]), relay.reshape(var_1239.astype('float64'), [18,]), relay.reshape(var_1240.astype('float32'), [144,]), ), 3)
func_954_call = mod.get_global_var('func_954')
func_957_call = mutated_mod.get_global_var('func_957')
call_1242 = relay.TupleGetItem(func_954_call(relay.reshape(var_1213.astype('float32'), [6, 8])), 0)
call_1243 = relay.TupleGetItem(func_957_call(relay.reshape(var_1213.astype('float32'), [6, 8])), 0)
output = relay.Tuple([call_1207,const_1210,bop_1214,call_1220,uop_1225,call_1237,var_1238,var_1239,var_1240,call_1242,])
output2 = relay.Tuple([call_1208,const_1210,bop_1217,call_1222,uop_1225,call_1241,var_1238,var_1239,var_1240,call_1243,])
func_1257 = relay.Function([var_1213,var_1221,var_1238,var_1239,var_1240,], output)
mod['func_1257'] = func_1257
mod = relay.transform.InferType()(mod)
var_1258 = relay.var("var_1258", dtype = "float32", shape = (6, 8))#candidate|1258|(6, 8)|var|float32
var_1259 = relay.var("var_1259", dtype = "int16", shape = (594,))#candidate|1259|(594,)|var|int16
var_1260 = relay.var("var_1260", dtype = "float64", shape = (858,))#candidate|1260|(858,)|var|float64
var_1261 = relay.var("var_1261", dtype = "float64", shape = (18,))#candidate|1261|(18,)|var|float64
var_1262 = relay.var("var_1262", dtype = "float32", shape = (144,))#candidate|1262|(144,)|var|float32
output = func_1257(var_1258,var_1259,var_1260,var_1261,var_1262,)
func_1263 = relay.Function([var_1258,var_1259,var_1260,var_1261,var_1262,], output)
mutated_mod['func_1263'] = func_1263
mutated_mod = relay.transform.InferType()(mutated_mod)
func_359_call = mod.get_global_var('func_359')
func_360_call = mutated_mod.get_global_var('func_360')
call_1273 = relay.TupleGetItem(func_359_call(), 0)
call_1274 = relay.TupleGetItem(func_360_call(), 0)
func_954_call = mod.get_global_var('func_954')
func_957_call = mutated_mod.get_global_var('func_957')
var_1280 = relay.var("var_1280", dtype = "float32", shape = (48,))#candidate|1280|(48,)|var|float32
call_1279 = relay.TupleGetItem(func_954_call(relay.reshape(var_1280.astype('float32'), [6, 8])), 0)
call_1281 = relay.TupleGetItem(func_957_call(relay.reshape(var_1280.astype('float32'), [6, 8])), 0)
output = relay.Tuple([call_1273,call_1279,var_1280,])
output2 = relay.Tuple([call_1274,call_1281,var_1280,])
func_1286 = relay.Function([var_1280,], output)
mod['func_1286'] = func_1286
mod = relay.transform.InferType()(mod)
var_1287 = relay.var("var_1287", dtype = "float32", shape = (48,))#candidate|1287|(48,)|var|float32
output = func_1286(var_1287)
func_1288 = relay.Function([var_1287], output)
mutated_mod['func_1288'] = func_1288
mutated_mod = relay.transform.InferType()(mutated_mod)
func_868_call = mod.get_global_var('func_868')
func_869_call = mutated_mod.get_global_var('func_869')
call_1293 = relay.TupleGetItem(func_868_call(), 0)
call_1294 = relay.TupleGetItem(func_869_call(), 0)
func_178_call = mod.get_global_var('func_178')
func_180_call = mutated_mod.get_global_var('func_180')
var_1305 = relay.var("var_1305", dtype = "float64", shape = (3, 6))#candidate|1305|(3, 6)|var|float64
call_1304 = relay.TupleGetItem(func_178_call(relay.reshape(var_1305.astype('float64'), [2, 9])), 3)
call_1306 = relay.TupleGetItem(func_180_call(relay.reshape(var_1305.astype('float64'), [2, 9])), 3)
func_868_call = mod.get_global_var('func_868')
func_869_call = mutated_mod.get_global_var('func_869')
call_1311 = relay.TupleGetItem(func_868_call(), 0)
call_1312 = relay.TupleGetItem(func_869_call(), 0)
uop_1313 = relay.cosh(call_1311.astype('float64')) # shape=(12, 9, 11)
uop_1315 = relay.cosh(call_1312.astype('float64')) # shape=(12, 9, 11)
func_431_call = mod.get_global_var('func_431')
func_436_call = mutated_mod.get_global_var('func_436')
const_1321 = relay.const([[5.467050],[1.210111],[7.732539],[-3.883559],[6.047608],[2.132902],[-2.194052],[-1.085134],[-0.877079],[8.410489],[-0.878814],[-1.193453],[2.179693],[7.169621],[5.878687],[-2.790607],[6.522329],[-6.710553],[-0.133547],[7.948669],[-1.395408],[6.651418],[-5.968271],[7.072055],[6.223299],[9.108659],[-7.462389],[-2.601607],[6.513163],[6.333228],[8.022222],[4.078559],[0.395891],[-4.901680],[1.441421],[0.945702],[-3.384178],[-2.369360],[7.405812],[0.566866],[-1.385081],[-7.440682],[-8.500132],[-5.351692],[9.813051],[-7.354620],[5.118554],[8.400504],[-4.869085],[-2.182708],[-3.749436],[5.205828],[-2.051830],[7.113841],[-8.437643],[2.436151],[5.468001],[5.388280],[-2.540232],[-2.558042],[9.300404],[9.965870],[-5.373612],[-9.313874],[-8.756434],[-1.613254],[-8.032193],[4.204643],[7.638485],[-1.741314],[-4.515540],[4.711751],[-8.751347],[9.721517],[-7.498871],[-9.294784],[0.754382],[5.903555],[-1.246118],[-2.909802],[-9.370481],[0.338332],[-9.318222],[-4.538559],[3.288454],[7.942581],[-1.012075],[-7.509025],[0.548239],[2.133535],[6.977570],[-1.679066],[5.399172],[-6.848508],[6.785378],[-4.179004],[-5.414240],[-5.379398],[1.345050],[-9.915459],[-2.193324],[-3.305622],[-6.135916],[4.094786],[-5.798370],[-1.730318],[-8.595071],[-4.799841],[-0.408734],[8.756147],[7.272287],[9.470858],[-3.389851],[6.844853],[-6.669272],[-1.611169],[3.995620],[1.008439],[8.660516],[-2.329737],[-4.313835],[2.058596],[0.782740],[-4.190333],[7.310532],[3.081664],[-4.657610],[-9.426424],[-9.659061],[-2.468134],[4.939334],[5.800457],[9.695443],[4.154387],[7.227921],[-7.893058],[-6.651261],[-5.469427],[-3.113362],[4.727647],[1.564397],[-4.534290],[3.374869],[-4.821327],[-9.997828],[9.595466],[7.667433],[2.441893],[6.654678],[-2.938126],[-2.279019],[-4.652196],[-9.589779],[-9.647110],[-1.670461],[-0.088769],[-8.665975],[8.523721],[4.682939],[7.007170],[-8.288624],[-7.327125],[-7.979608],[-7.613515],[-2.010334],[-7.788546],[4.027092],[2.215086],[-5.156718],[-2.166140],[0.350857],[-5.183406],[-0.512460],[7.428209],[8.583219],[4.618613],[5.878079],[0.191054],[7.868612],[-6.023714],[-0.566939],[-4.129093],[4.419203],[-3.217720],[6.741632],[-2.553633],[2.597091],[-5.343624],[-9.435253],[-1.858499],[9.938330],[7.418994],[6.947795],[-4.353786],[-8.180948],[-8.820594],[9.847694],[2.233560],[-6.851191],[-3.340798],[-3.404677],[-9.320872],[2.983788],[5.317732],[-1.265233],[0.898088],[-5.423390],[3.791311],[-2.094354],[-7.674102],[-2.404574],[8.891109],[-4.906624],[-0.061266],[-9.167456],[-7.073554],[-7.907461],[9.613624],[-8.731763],[2.502628],[-3.428115],[-9.226164],[-6.857654],[-5.777861],[0.686547],[2.168847],[4.718935],[7.858366],[9.614144],[-1.990074],[5.009844],[9.526406],[0.230884],[3.919455],[6.751914],[-3.917358],[-4.893383],[-7.149333],[-9.118262],[6.896496],[-1.394237],[2.095135],[5.734668],[6.788430],[4.609414],[9.812322],[-0.841264],[-8.964132],[1.960923],[4.112955],[-6.024761],[-3.242117],[-9.629069],[3.997411],[3.433102],[-5.197040],[-2.755280],[6.100645],[9.237712],[-3.857419],[-9.047768],[1.913036],[-7.111020],[-7.840381],[0.620752],[9.880622],[9.371478],[-0.842562],[-6.930906],[2.319225],[-8.629689],[1.092535],[9.854592],[8.276563],[9.612803],[5.423080],[6.317187],[5.727082],[-6.343982],[4.228762],[5.416673],[-4.877862],[-7.531525],[7.839845],[-3.802098],[-4.556574],[-9.322901],[6.850846],[-6.033034],[-4.276737],[0.844086],[1.221793],[-8.582402],[-7.317824],[-4.992809],[8.723275],[-4.904130],[-0.092410],[-5.239141],[-4.422982],[-2.601259],[-3.411602],[-4.977833],[0.155704],[-0.028397],[4.357674],[2.788533],[-9.528556],[9.383149],[4.894509],[-1.483345],[1.068910],[-7.478520],[4.054008],[8.833591],[6.461912],[-0.548128],[2.020193],[-7.289490],[7.379315],[-9.884602],[-1.919929],[7.095994],[-1.674017],[7.441776],[-0.179333],[-6.005643],[2.869675],[3.988953],[3.614378],[-3.797543],[9.695959],[-9.889662],[1.458961],[3.321056],[4.068420],[6.401056],[6.388027],[-8.083818],[8.235994],[6.442690],[9.210812],[-7.565005],[-2.538831],[5.862996],[-7.390704],[5.566240],[-8.545064],[-2.893537],[-2.516584],[-5.834749],[-5.634925],[7.292305],[-8.820428],[7.846358],[6.511475],[1.620810],[-2.846475],[0.242880],[-0.635643],[-2.470708],[-6.567739],[-4.485669],[-2.111253],[6.262706],[-8.286130],[-3.452034],[7.992040],[-0.909388],[-1.678762],[-1.379898],[6.069378],[-2.611808],[8.391146],[-4.303573],[9.856869],[-3.934465],[-3.410532],[-9.172239],[-5.969693],[5.871390],[-7.379960],[2.605736],[3.168410],[5.846434],[9.449970],[-8.607467],[-9.769767],[-0.412404],[-2.221908],[5.855687],[7.472971],[-4.361980],[-8.113129],[-8.003860],[-7.367407],[0.967322],[-1.210612],[-8.482904],[-0.605364],[2.069265],[0.801252],[-3.616404],[-8.112613],[9.457335],[-1.123689],[-9.475426],[1.845734],[8.691342],[-2.554339],[-1.222210],[-9.629627],[5.717719],[-1.363983],[-7.927618],[5.113261],[-6.052284],[2.420472],[-5.537837],[4.047114],[4.068745],[-6.891427],[4.140555],[-3.341123],[7.479039],[2.422687],[2.472101],[7.382641],[-3.027415],[-7.136847],[8.458004],[-0.713998],[4.671748],[-3.314902],[2.466525],[5.219841],[7.624818],[0.512243],[9.933850],[-8.057341],[-7.371330],[-4.295645],[6.132861],[-6.601417],[9.938405],[-2.878876],[-3.364768],[-3.673947],[1.774974],[-6.648405],[-7.868394],[8.087877],[9.069107],[6.817457],[-4.598174],[-0.015294],[6.694849],[-8.273228],[-0.806697],[-4.205865],[5.849117],[-7.234822],[9.648457],[7.053858],[-0.133185],[2.451337],[-6.552861],[-9.607644],[1.865880],[-4.331933],[0.581825],[-8.899473],[-0.758103],[2.559596],[2.713906],[-5.242974],[8.573085],[3.835572],[-4.624908],[9.385662],[-3.332466],[7.278208],[0.506454],[-3.845153],[1.088378],[-0.842882],[9.033096],[5.888619],[5.817528],[1.177300],[-8.730116],[7.789920],[-9.509468],[-9.223218],[-4.544470],[6.268388],[7.486290],[0.793352],[8.391695],[9.889109],[-0.467775],[7.855006],[8.762962],[2.030190],[-2.854411],[6.392971],[8.424863],[-0.979192],[5.578501],[-8.783307],[-1.207200],[-2.206740],[-3.747617],[-2.307448],[-0.946846],[3.060164],[4.110816],[-1.436627],[7.613507],[2.308153],[-2.280099],[4.480762],[3.790461],[-4.013900],[-2.012836],[-5.075787],[-4.777160],[-5.328069],[-5.836823],[-0.687010],[2.861757],[-5.201615],[6.789121],[1.572473],[-5.505538],[-6.951209],[8.218490],[-9.954036],[1.202705],[-7.811925],[5.827870],[-4.952949],[1.301179],[3.752777],[6.785793],[-3.181700],[5.082218],[5.657903],[-0.154115],[2.521525],[0.018610],[8.979386],[9.017863],[9.739021],[-5.604517],[8.982982],[0.478970],[-3.549854],[-5.065986],[-8.509433],[0.887980],[-6.525761],[8.389376],[0.005782],[-0.117372],[5.800252],[-8.822685],[9.417644],[-7.074517],[-8.212230],[-3.265994],[6.235234],[2.258945],[-6.901110],[4.185291],[5.502094],[-7.965615],[7.331498],[1.869313],[9.001958],[9.135722],[5.842006],[5.080082],[-0.409429],[-6.950699],[7.636706],[-4.495373],[-4.807306],[-2.754411],[2.468559],[4.597636],[-7.472703],[0.940305],[-8.660244],[8.821520],[-0.936574],[-4.533981],[-3.661774],[-7.682630],[3.133078],[-2.539802],[0.354353],[7.611881],[-5.786867],[9.571017],[0.418716],[8.272758],[-0.233753],[7.916838],[0.316528],[-5.082245],[-1.503802],[-1.089523],[-9.196916],[8.514425],[9.729459],[-0.113216],[-3.249424],[-1.211272],[3.940534],[-8.662318],[-8.607923],[4.868037],[-1.162695],[5.152533],[9.580904],[-1.529655],[-5.167423],[-3.193919],[3.713662],[5.497386],[7.526369],[-9.796796],[2.784032],[9.935228],[-6.613821],[-5.734249],[7.559349],[5.457339],[-8.128547],[1.704844],[-4.128322],[6.468208],[-6.652197],[8.467842],[9.078091],[-9.579542],[2.496052],[-4.314729],[4.974477],[4.020062],[-9.752234],[9.363211],[8.624307],[9.960016],[1.539177],[7.330438],[-2.398183],[2.359164],[7.554787],[9.631966],[7.665069],[0.934323],[-9.166112],[6.547823],[4.223104],[4.604102],[-6.394916],[4.859286],[1.306342],[-6.078755],[-7.602283],[-7.566885],[-1.793424],[7.233332],[-7.546334],[3.804195],[0.905898],[-3.042945],[-1.724412],[5.643063],[7.400646],[0.963963],[3.565642],[8.903748],[-4.958137],[-0.009395],[-7.596397],[5.166066],[-4.644510],[-1.987245],[8.855549],[-6.671099],[-3.141360],[-9.678911],[-4.432661],[1.269846],[-3.429997],[-5.145421],[1.757638],[-3.162616],[7.452839],[-0.336121],[3.489726],[-5.259978],[1.222906],[8.428887],[-5.869349],[9.858962],[-9.372104],[-6.762565],[7.821736],[-2.955641],[-7.451834],[-0.337784],[4.925698],[8.753577],[0.928003],[-3.513400],[-4.099756],[-3.999771],[4.984377],[-3.168192],[0.017269],[-7.220897],[-3.497600],[-7.017039],[-2.454317],[5.042195],[0.525628],[8.529545],[1.718566],[3.175705],[-0.178978],[8.673641],[0.436073],[-5.076398],[6.697325],[-3.227636],[-0.918614],[5.686123],[0.323805],[2.429509],[-9.831903],[5.829266],[-7.337444],[-0.791970],[8.036729],[-0.009838],[6.014698],[-6.604393],[8.916543],[0.881756],[-9.261895],[8.473862],[7.059230],[0.892718],[-4.177100],[-1.186273],[6.279213],[2.191962],[-0.549827],[0.301702],[3.934395],[-5.277779],[-6.831654],[8.856053],[9.393652],[-6.454637],[0.382599],[0.957200],[-4.363474],[4.729162],[5.314265],[-0.408632],[2.196002],[-4.911284],[5.057598],[-0.209767],[5.864783],[-6.907579],[8.386977],[5.553575],[-4.585259],[-1.546666],[0.645463],[-6.107793],[-9.412519],[-6.108912],[-6.565989],[7.948914],[-9.267666],[1.666538],[4.742379],[9.298485],[-1.547431],[-6.291916],[6.414790],[3.919160],[-2.195098],[9.062481],[5.631621],[0.081175],[-1.475031],[1.755373],[-1.208893],[-7.184976],[-0.642985],[4.888933],[4.407711],[-9.954029],[-7.879884],[-0.312256],[-9.080826],[4.732846],[0.094505],[-4.554404],[6.531652],[9.542594],[5.246987],[-6.467479],[6.966179],[9.954276],[-5.303550],[9.190655],[2.785994],[-8.204461],[3.745991],[4.204342],[-4.202608],[-0.635238],[-8.495526],[-7.579711],[-3.869773],[3.644664],[-4.396038],[-0.515858],[-8.395976],[4.728520],[-2.218872],[7.555785],[-7.943972],[6.535790],[-2.439445],[1.090564],[7.593430],[-6.725527],[-7.150572],[4.047307],[-6.514468],[-3.214019],[-3.927283],[-5.372046],[-6.762280],[-8.016036],[6.964373],[-6.931158],[7.858205]], dtype = "float64")#candidate|1321|(858, 1)|const|float64
const_1322 = relay.const([-3.940235,-8.812345,-3.827740,5.251061,5.517567,-4.105915,-5.244033,-7.724799,4.426006,-2.874036,4.707142,1.802003,1.157160,1.991102,-5.774418,8.525324,-2.750736,-1.199882,-3.764237,-2.566432,5.038020,4.331883,-0.658042,5.901813,9.082075,6.572526,6.991377,-8.023713,3.959062,5.065963,-4.449615,-7.998257,-0.067593,4.285162,-4.646243,-6.337557,-0.954808,8.159951,-8.880246,8.688640,-2.460008,-8.001378,5.192549,-4.340194,4.519497,1.003038,-3.729949,-7.629991,-9.826954,9.301317,4.164354,-6.806983,2.632135,-0.931425,-8.939130,3.191153,-6.461341,-4.429514,2.664019,-1.974514,-6.944312,-7.798094,3.107502,0.489746,1.630483,-0.474177,4.173912,-4.971495,-5.866807,-3.877226,-2.622208,7.604738,0.896831,6.316764,-8.201568,7.090430,6.162925,8.965668,-0.655808,-1.982785,8.321125,5.918084,9.135507,-6.067027,-6.112990,4.809426,-3.335467,-4.014353,-2.628057,-7.259119,8.638778,-4.394712,-9.494146,-8.684165,-2.610349,-9.004291,9.367955,-4.626035,7.383321,1.233708,7.786055,5.471883,4.810028,-8.268684,1.110062,0.799122,-7.675720,0.533868,2.865372,-2.922005,-4.307828,-0.047280,-6.061504,-9.236757,3.467976,3.908055,-4.642320,-8.995166,-3.701642,-2.015248,-1.930545,3.112538,7.879619,2.499362,-3.563632,-8.149253,-7.919110,-4.946060,-5.889605,-3.904444,-1.131984,-2.223645,-6.294086,0.107649,4.930373,-1.053940,6.151826,8.925720,-4.556371,8.243215,-1.715303,1.810623,-4.510052,1.821055,9.807396,-1.807077,7.152932,-2.836865,-6.528852,7.018093,4.885198,0.038281,3.679204,0.541093,0.303582,-0.641236,5.971022,-0.141810,6.254018,-6.833746,3.261602,9.322246,6.950973,3.127187,5.433733,-7.767227,-6.434700,4.134289,-5.918524,-7.227261,6.472332,3.987778,-2.854905,2.229385,5.359240,-9.992503,-1.972535,4.112919,-1.481513,3.296727,7.628179,-8.571938,3.815474,9.718965,5.679766,2.844583,-7.248147,7.946578,-5.980834,3.585509,-8.225806,7.714321,4.600086,-4.491937,8.012750,3.232884,0.222266,-9.409789,6.887322,-8.382780,4.543261,8.341752,-6.279037,8.886388,5.199542,-2.985376,-2.218048,0.463533,1.652073,8.686812,0.872223,8.156441,3.130868,-7.634068,-3.572705,2.396307], dtype = "float64")#candidate|1322|(216,)|const|float64
call_1320 = relay.TupleGetItem(func_431_call(relay.reshape(call_1304.astype('float64'), [1, 18]), relay.reshape(const_1321.astype('float64'), [858,]), relay.reshape(const_1322.astype('float64'), [12, 18]), relay.reshape(call_1304.astype('float32'), [2, 9]), ), 0)
call_1323 = relay.TupleGetItem(func_436_call(relay.reshape(call_1304.astype('float64'), [1, 18]), relay.reshape(const_1321.astype('float64'), [858,]), relay.reshape(const_1322.astype('float64'), [12, 18]), relay.reshape(call_1304.astype('float32'), [2, 9]), ), 0)
output = relay.Tuple([call_1293,call_1304,var_1305,uop_1313,call_1320,const_1321,const_1322,])
output2 = relay.Tuple([call_1294,call_1306,var_1305,uop_1315,call_1323,const_1321,const_1322,])
func_1324 = relay.Function([var_1305,], output)
mod['func_1324'] = func_1324
mod = relay.transform.InferType()(mod)
mutated_mod['func_1324'] = func_1324
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1325 = relay.var("var_1325", dtype = "float64", shape = (3, 6))#candidate|1325|(3, 6)|var|float64
func_1324_call = mutated_mod.get_global_var('func_1324')
call_1326 = func_1324_call(var_1325)
output = call_1326
func_1327 = relay.Function([var_1325], output)
mutated_mod['func_1327'] = func_1327
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1329 = relay.var("var_1329", dtype = "int32", shape = (4, 11, 1))#candidate|1329|(4, 11, 1)|var|int32
var_1330 = relay.var("var_1330", dtype = "int32", shape = (4, 11, 1))#candidate|1330|(4, 11, 1)|var|int32
bop_1331 = relay.left_shift(var_1329.astype('int32'), relay.reshape(var_1330.astype('int32'), relay.shape_of(var_1329))) # shape=(4, 11, 1)
output = relay.Tuple([bop_1331,])
output2 = relay.Tuple([bop_1331,])
func_1338 = relay.Function([var_1329,var_1330,], output)
mod['func_1338'] = func_1338
mod = relay.transform.InferType()(mod)
mutated_mod['func_1338'] = func_1338
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1338_call = mutated_mod.get_global_var('func_1338')
var_1340 = relay.var("var_1340", dtype = "int32", shape = (4, 11, 1))#candidate|1340|(4, 11, 1)|var|int32
var_1341 = relay.var("var_1341", dtype = "int32", shape = (4, 11, 1))#candidate|1341|(4, 11, 1)|var|int32
call_1339 = func_1338_call(var_1340,var_1341,)
output = call_1339
func_1342 = relay.Function([var_1340,var_1341,], output)
mutated_mod['func_1342'] = func_1342
mutated_mod = relay.transform.InferType()(mutated_mod)
func_868_call = mod.get_global_var('func_868')
func_869_call = mutated_mod.get_global_var('func_869')
call_1362 = relay.TupleGetItem(func_868_call(), 0)
call_1363 = relay.TupleGetItem(func_869_call(), 0)
output = relay.Tuple([call_1362,])
output2 = relay.Tuple([call_1363,])
func_1364 = relay.Function([], output)
mod['func_1364'] = func_1364
mod = relay.transform.InferType()(mod)
mutated_mod['func_1364'] = func_1364
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1364_call = mutated_mod.get_global_var('func_1364')
call_1365 = func_1364_call()
output = call_1365
func_1366 = relay.Function([], output)
mutated_mod['func_1366'] = func_1366
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1370 = relay.const([[[0.810810,-6.107758,8.606107],[-6.140494,6.335857,-5.114972]],[[-6.101529,-5.095763,-9.223450],[6.482123,9.468714,6.077160]],[[2.288733,-3.626007,-3.048226],[1.055810,-1.213521,2.397842]],[[0.296338,-7.044263,6.323622],[7.913553,-2.317848,-5.077478]],[[-1.641770,-4.628033,-7.669006],[-4.461418,-8.926161,-7.472705]],[[-0.429539,-7.721056,-7.962855],[-6.029049,-4.174713,-8.005719]],[[1.158444,1.420845,3.051346],[-5.935982,8.682584,4.524549]],[[-5.104275,6.128512,7.065337],[-6.094498,-4.849647,-0.454717]],[[-6.876154,-7.431481,-9.868699],[5.223294,-8.985225,0.358905]],[[-5.891798,-7.246946,3.470421],[7.151164,9.725851,-1.607623]]], dtype = "float64")#candidate|1370|(10, 2, 3)|const|float64
uop_1371 = relay.acos(const_1370.astype('float64')) # shape=(10, 2, 3)
func_1338_call = mod.get_global_var('func_1338')
func_1342_call = mutated_mod.get_global_var('func_1342')
var_1374 = relay.var("var_1374", dtype = "int32", shape = (44,))#candidate|1374|(44,)|var|int32
call_1373 = relay.TupleGetItem(func_1338_call(relay.reshape(var_1374.astype('int32'), [4, 11, 1]), relay.reshape(var_1374.astype('int32'), [4, 11, 1]), ), 0)
call_1375 = relay.TupleGetItem(func_1342_call(relay.reshape(var_1374.astype('int32'), [4, 11, 1]), relay.reshape(var_1374.astype('int32'), [4, 11, 1]), ), 0)
uop_1380 = relay.atanh(uop_1371.astype('float32')) # shape=(10, 2, 3)
output = relay.Tuple([call_1373,var_1374,uop_1380,])
output2 = relay.Tuple([call_1375,var_1374,uop_1380,])
func_1382 = relay.Function([var_1374,], output)
mod['func_1382'] = func_1382
mod = relay.transform.InferType()(mod)
mutated_mod['func_1382'] = func_1382
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1383 = relay.var("var_1383", dtype = "int32", shape = (44,))#candidate|1383|(44,)|var|int32
func_1382_call = mutated_mod.get_global_var('func_1382')
call_1384 = func_1382_call(var_1383)
output = call_1384
func_1385 = relay.Function([var_1383], output)
mutated_mod['func_1385'] = func_1385
mutated_mod = relay.transform.InferType()(mutated_mod)
func_772_call = mod.get_global_var('func_772')
func_773_call = mutated_mod.get_global_var('func_773')
call_1387 = func_772_call()
call_1388 = func_772_call()
func_1257_call = mod.get_global_var('func_1257')
func_1263_call = mutated_mod.get_global_var('func_1263')
const_1391 = relay.const([-9.197026,-0.852016,-1.562432,5.860556,7.245190,0.846466,6.737801,-2.646779,-3.099493,2.422349,4.885202,-2.672089,-0.989616,-0.273590,5.903027,-8.181425,-8.216509,2.814071,9.460265,-6.780263,-6.759840,6.164464,-3.272160,4.586855,-2.669319,-9.415882,-2.988606,4.888524,-2.236666,-8.228790,5.037697,3.741475,-8.554441,2.556894,-9.059096,-4.413080,5.472835,-9.091615,1.652348,-1.606716,3.349667,6.622153,6.658525,-1.788758,-0.561487,9.987523,5.416131,3.849876], dtype = "float32")#candidate|1391|(48,)|const|float32
const_1392 = relay.const([6,-10,3,-5,-7,5,-7,-7,4,-9,5,3,-7,6,-5,-2,10,-3,7,5,-3,5,-5,-6,-4,-10,-9,1,-9,1,-9,3,6,-4,6,-6,2,-8,6,6,6,-9,10,-10,6,-1,4,-6,-9,-3,2,3,-5,-10,4,-10,-3,-7,10,10,-9,-1,-4,-7,-1,-8,-2,-6,-2,7,-4,8,10,10,3,6,-2,6,5,-1,-4,9,9,-4,-4,9,-1,-5,2,-1,-7,6,-5,7,8,8,6,1,-5,-6,-7,6,2,1,9,9,-8,-9,-9,-4,-2,-2,-2,-4,7,7,-7,-6,-6,-4,-6,3,10,-10,8,-10,8,1,-3,10,-6,-8,10,3,8,1,2,1,-7,3,-4,-8,-2,-6,-1,-9,-1,-10,-10,7,2,-3,1,6,-4,3,-9,4,-7,8,-7,7,-3,-9,1,10,-3,8,8,1,-3,2,7,-3,4,-6,-10,9,1,-6,-3,6,1,9,9,9,-8,4,-7,-2,10,-4,-1,4,2,-4,6,2,-7,-5,4,-8,7,10,1,-6,9,3,-4,2,7,-2,10,-10,-6,-3,1,5,-3,3,-4,-5,1,-5,-5,3,-4,4,-1,-9,9,9,3,-1,6,10,-5,5,3,2,-6,9,-2,-4,-7,-9,-6,8,2,-8,3,2,-3,5,8,3,2,6,4,6,4,8,6,1,-9,-10,-7,10,9,3,3,-3,-7,-1,-8,2,2,6,-10,-8,6,-1,10,2,-9,9,2,-8,-1,-1,6,5,-5,-6,7,-4,-3,7,-6,-3,5,-8,-5,9,-5,-7,4,-7,-2,-4,10,-4,-10,-6,-2,-3,2,8,-8,-5,5,-2,-3,-8,3,-6,9,-5,2,7,-2,-5,-2,2,-7,-10,9,3,-2,-9,-2,-9,-4,2,-8,2,-9,-4,7,10,-3,10,6,-5,6,-3,-10,1,-7,-2,10,-4,-10,-2,4,-4,-6,-2,8,9,3,2,4,-9,-6,7,4,7,-2,10,-10,-7,-9,-9,8,10,-9,5,6,8,5,-8,-9,-3,-3,-8,-7,1,4,2,-7,-3,5,-2,4,-2,7,7,6,-8,-3,6,-1,-6,9,7,10,-4,8,5,6,-10,-9,9,-9,6,3,-3,-1,9,9,-7,4,2,-9,-5,-4,8,-3,9,-5,-3,-9,1,5,1,6,3,-1,-3,3,5,-2,-1,1,-5,8,-5,4,8,-7,-1,9,4,-10,10,4,1,10,3,3,-8,-5,8,10,-9,7,10,6,7,1,-9,5,-3,1,6,3,5,-8,9,10,-5,-10,2,8,-1,-7,8,-8,6,-8,-3,10,-10,2,-8,-9,-9,7,2,1,6,2,9,-4,1,-9,2,-4,-8,4,-1,9,10,3,1,5,-1,3,9,5,9,4,-1,-6,9,5,4,1,-9,-8,-6,10,-4,-7,10,4,-4,-3,-9,6,-2,7,4,-2,2,-5,-4,8,-8,2,-5,-9,5,7,-2,3,3,-8,9,2,-9,-2,2,3,-4,-7,-1,9,-8,-1,9,-2,5,-1,-1,8,2,5,9,-3,2,4,-8], dtype = "int16")#candidate|1392|(594,)|const|int16
const_1393 = relay.const([8.088260,-5.753909,3.255681,-1.056102,-6.930333,-6.158554,6.700183,5.799757,2.494375,8.035683,-6.659875,9.269377,7.476289,9.428644,-5.673373,-4.392404,9.625402,-1.103181,-3.637949,3.316347,-4.536899,-8.723842,-9.631349,7.843456,-1.006959,3.847732,8.029229,-8.859928,8.867132,-3.742198,7.034984,6.442532,3.977896,6.389827,-3.071811,-7.744439,-1.049897,-8.707069,-8.908134,-1.032441,0.445214,7.503906,7.327941,4.151438,9.942363,-1.956415,-0.815712,6.798146,4.052881,4.358681,1.027216,-4.433374,-6.842025,5.012981,-0.678781,1.101225,7.377726,4.845013,-6.264814,4.207280,-0.320154,-4.590555,-7.177999,-2.281398,-9.413418,0.660943,3.123494,-2.394659,3.251927,2.899915,8.961487,5.139802,3.549915,3.134126,4.463018,-0.832252,-3.959045,-1.122983,-2.622112,-2.574773,-1.543537,5.197851,5.854805,8.029513,9.151317,1.825708,6.278171,2.180458,1.551761,1.376931,-6.676981,-9.669047,-1.358061,2.301186,0.891491,-4.848797,6.620978,1.277372,8.714808,2.680149,5.689859,1.614207,2.898088,-3.596022,-9.143099,5.809425,1.899234,6.120713,-1.537185,-0.012708,9.359321,7.917538,-5.635258,9.902519,2.828857,-8.016517,3.247115,-9.008150,9.455773,3.696577,-8.400319,-6.340790,-9.521325,0.606900,-9.517042,-2.851168,-2.562472,-7.275066,5.586591,-2.440383,7.635463,8.532629,7.295133,6.108904,-6.224918,-3.614547,-2.327211,-6.005092,-7.969747,5.376742,-9.965566,-3.790375,-6.288562,6.858422,0.579916,-1.396273,4.672384,5.616222,7.838211,3.995272,-4.204413,-5.069953,-1.860420,0.046954,5.316664,1.751700,2.523773,-2.413010,-7.926015,2.859664,-1.193218,-7.145121,8.842520,-1.943796,2.874363,5.740236,7.027969,-2.318642,-4.108936,-4.928730,-5.663220,0.427476,-9.247786,5.408850,-1.055611,-2.051894,6.034584,-4.669515,-9.687099,4.532486,-8.637597,6.450347,1.950022,9.671927,-8.208993,7.373143,7.429429,-7.360968,-0.041012,-1.059953,-1.846041,1.653335,-9.387481,-7.096352,-2.290714,-3.420323,-0.158757,-6.359644,4.901640,-9.299222,-9.568195,-7.160817,-1.983004,9.943860,7.706725,5.584600,-9.892846,0.652876,-7.950616,0.346888,8.572320,2.184997,-6.824651,0.508692,9.757927,9.055291,2.520056,8.419911,-1.333444,2.849924,3.882835,3.878244,3.390134,-2.996966,-8.556887,0.719520,8.314321,-2.495859,-7.547522,7.377993,2.576220,5.407619,-5.222649,-0.741133,0.076214,-0.246819,5.194397,-4.404338,-2.090479,-6.335157,7.686200,6.085671,4.589100,-9.377376,3.323849,0.455378,-9.962449,-9.693815,-0.190069,7.464393,-7.888951,-1.882788,4.014449,-8.380246,6.794929,-7.714766,-6.184930,4.299574,2.228382,-1.111876,6.368637,2.922548,-0.585505,-6.449815,8.677644,2.269355,-2.641204,0.045522,-0.544337,0.430448,-9.827895,-2.115893,7.510552,-9.470728,3.775391,-9.333859,1.505151,-2.119809,8.913628,-1.680815,-0.657306,-0.222905,1.953345,-0.959118,5.378619,2.682577,-2.139048,2.426379,2.187075,-7.840650,-3.775104,4.784440,4.432424,9.504579,-6.792135,0.757886,9.924013,9.060028,6.579836,0.381468,-7.544666,-1.998238,-9.384552,-8.338988,-0.648136,4.582909,8.402488,-6.215454,-0.523392,2.417032,4.206119,-4.097003,-5.229933,3.625910,9.302863,7.568941,8.925347,-5.104723,1.918065,0.756028,-7.075207,-3.987836,6.079288,-0.454230,-2.117995,-2.915233,-2.940241,9.449398,4.118201,-1.142365,0.719112,-2.193205,8.859229,-5.495675,4.990781,-6.239945,-1.643437,-7.646193,6.594124,-3.859234,-1.970494,6.565903,5.150799,-2.252962,2.915327,2.017407,-9.726159,5.301674,3.529699,-3.278619,2.315111,-9.421134,8.790585,2.600187,3.127760,-3.958172,7.281786,-6.664278,-5.554922,9.946691,7.587796,-6.815093,-9.865215,3.277527,-7.842466,-4.940959,5.279762,3.366094,2.800884,8.241420,-5.086040,1.471941,-8.693147,-0.979603,-6.698805,-4.454604,3.720329,8.226454,2.079488,5.839215,-9.372992,0.411797,-1.706600,-5.232534,-4.286691,-0.968410,1.451074,-7.550672,3.090247,1.527664,-6.437617,7.696441,-7.865925,7.270837,7.208427,5.438543,-4.804585,7.424835,-4.643566,1.396649,-5.402584,1.719303,9.775444,2.292795,8.585266,-1.371086,-3.972344,4.354910,-9.339346,-1.432152,6.774393,0.865526,5.846192,-1.782123,-5.922885,-6.453930,4.457628,-8.851790,0.117915,1.374479,-1.396064,-6.098082,7.923042,-5.121793,-0.659056,0.347988,-6.863624,3.670206,-6.291376,0.774609,2.490962,0.163375,-8.186687,6.374832,6.628094,-4.281746,-1.112232,-1.281592,-4.400511,5.181683,-5.159386,-4.116097,0.465082,-6.895758,8.972946,-2.650251,9.961527,8.424973,-6.308903,8.849496,4.356842,4.883142,-0.207804,2.988284,-7.056109,8.593872,7.102463,-5.758674,5.770670,-0.959786,-6.074556,-3.741359,-4.335636,7.472011,-8.883725,-1.049583,-5.242841,-7.083693,-9.994284,4.299746,-4.497111,6.697976,-4.091029,4.615511,-3.784563,-7.374851,-5.384280,-0.067904,-1.777713,3.224066,-9.454176,-6.942446,-4.278007,2.791518,-7.347289,7.174908,4.244936,5.420902,-8.955761,1.510234,-0.083442,-0.269661,-0.704648,-2.981487,-2.098409,-2.764124,4.477694,-0.246274,4.780236,-5.011423,-7.849270,-0.893176,-9.449177,-5.155955,-3.957694,7.323529,6.028980,-7.117176,-3.156704,2.181021,-8.599314,5.677451,-5.871160,4.612366,6.340072,-1.518874,-1.531005,5.913111,-4.051235,7.401760,-4.467690,8.178130,-5.584253,2.118361,-0.479113,-0.780063,-8.555858,4.497982,8.059745,-3.875227,-5.439736,-3.628867,-2.566008,-9.644819,8.597199,7.393700,-7.299320,-5.817985,-0.989852,-1.265193,-5.692681,-8.001228,-7.550701,4.778224,-4.131646,9.001121,-9.987742,5.578036,6.283998,9.306104,-0.640458,-0.949174,-3.994761,3.225953,0.856930,6.510562,-6.193913,-1.443310,9.960790,-7.808763,-1.784929,6.497884,-4.918886,9.244345,-0.807767,-8.488782,3.087138,1.327158,7.224636,2.742832,-4.082201,-5.098372,-9.815024,-7.475808,7.040019,2.174942,-9.796702,-1.825282,-8.575172,-8.776662,7.481071,7.418465,-9.582863,-7.229174,9.262735,-1.136636,-3.837344,7.206856,9.751427,0.187794,-4.867949,-9.519673,9.400230,5.625796,-1.952038,-1.538619,0.413600,1.073581,-9.372419,4.081817,2.565904,-9.367466,7.103168,-5.271520,4.746234,7.165484,-1.975742,-5.625165,-8.721825,8.314647,9.917564,-6.620577,1.015945,-1.827467,0.328926,-2.551010,3.671700,2.417038,-5.093646,-3.397799,7.921749,8.607209,5.625452,7.251013,-1.084855,9.099789,-9.330692,-3.843332,8.806555,8.288855,-5.070276,5.850774,-8.795785,-6.381114,-4.437864,-9.786322,-7.643596,7.686549,3.991789,-1.789523,-2.589782,-8.847071,6.504023,-5.076908,3.819917,-7.800140,7.843712,-2.341862,-7.831635,-6.051980,7.954167,-7.625880,1.212586,6.320040,-2.873509,-7.521392,6.376682,2.684620,6.374911,2.805958,7.613018,-3.584026,9.052907,2.216866,-3.025684,-5.740723,-7.290726,9.125071,0.580570,2.142269,-3.750760,-9.954286,-9.906300,4.335327,3.583150,-9.154986,-6.610797,-9.120789,5.052421,0.274348,6.988302,4.278001,-6.460856,7.499549,-1.789346,5.273064,-5.819663,-5.509005,8.912032,-6.836758,2.222236,2.612538,-2.263345,5.494027,7.461446,5.444246,7.761149,9.203116,6.921465,4.682948,4.960790,4.113881,-2.781861,-1.056043,6.393238,-0.034036,4.643546,-7.090298,8.708941,-7.289418,-3.634092,-9.452651,-0.332696,6.245915,-3.497040,7.585905,7.659246,-1.989990,4.962891,9.496107,1.741335,2.047283,2.088277,-4.666352,3.380267,-5.746738,-9.379979,5.615866,-0.427728,4.007743,2.854393,-3.900243,8.596476,-7.857081,2.250582,8.847979,-6.745288,8.015523,-6.479461,-2.622977,-5.235823,1.575498,3.847939,-6.231921,3.127027,7.994646,-4.528679,9.481689,-6.211787,-2.610662,9.119377,-0.671220,-1.231307,1.733053,-9.339244,7.352670,-0.112362,0.064977,6.734209,1.264408,2.682127,-9.606351,-3.617495,3.290194,6.232050,-2.273463,9.486398,-8.851705,6.630624,-3.162589,-4.614583,-8.093187,-4.235512,-3.440624,5.105224,-7.383458,-3.523173,9.145350,-3.694774,9.788837,-1.872149,-8.260225,6.902606,-4.931997,8.668461,-4.225237,-0.887885,-6.214999,-1.939323,-6.039312,1.302081,3.514678,4.851358,-4.884002,6.917175,-3.269133,-1.578707,-3.269092,0.624375,-5.962802,4.830593,-1.909847,5.288388,4.641902,-6.710435,-4.071661,-0.551978,7.570418,-7.627574,-9.024609,-9.490144,2.538210,8.016350,-7.716784,-8.111904,1.442999,8.118605,5.267273,2.183263,-8.667006,3.198272,2.972954,-2.470491,4.363500,-0.481827,3.021738,-2.649964,3.424164,-3.146864,2.509181,-4.646140,-7.370775,-8.838066,6.164074,-1.895999,2.685149,-1.090801,-4.292875,-8.758344,5.071178,4.967977,0.478166,6.738566,5.545798,-1.820677,5.481931,-0.519463,-5.680680,7.192385,-4.718273,5.782735,6.053374,-4.830903,5.236896,-9.575126,2.448679,2.952983,7.349453], dtype = "float64")#candidate|1393|(858,)|const|float64
var_1394 = relay.var("var_1394", dtype = "float64", shape = (1, 18))#candidate|1394|(1, 18)|var|float64
const_1395 = relay.const([0.578827,8.045240,3.476865,3.962041,-1.100739,-9.267374,-1.562076,-2.764264,-2.836006,-4.825897,8.887216,-3.435790,4.457701,3.497821,8.271009,-3.354497,9.788096,-9.929474,4.921121,-4.614229,2.823210,6.488500,8.890103,-7.418775,5.053647,8.327000,4.449000,-7.845090,-0.054906,0.065577,-2.945001,-7.656647,-1.503983,-5.315990,-8.954951,5.073388,0.954805,-6.196829,0.265788,-7.596753,6.674782,1.093756,-8.404379,-4.097082,1.436197,-5.376391,1.526631,9.543851,-1.342653,7.468329,-2.127014,-4.890275,1.401026,-2.593296,6.211008,6.586932,1.726625,1.275442,-2.104397,-7.611652,-1.267632,-9.050908,1.430463,9.502230,8.685487,-8.878055,2.207392,-7.409640,5.226715,4.881247,7.426342,-3.638889,9.502690,-9.025189,2.587841,0.520661,-2.491284,1.702421,-1.946036,5.461738,-2.615167,7.612016,-4.536639,-2.543434,6.417299,6.417760,3.318222,4.164179,5.445087,-8.271050,-4.102195,-2.204247,2.415999,-5.884989,-9.024419,-2.931627,5.848323,7.155398,7.393037,-0.607969,3.229408,8.472855,1.544442,-3.985923,4.662349,4.341245,-0.984904,-2.992053,1.695968,8.781526,-4.916745,-0.067911,-6.483016,2.810251,-4.086823,-0.720385,0.146123,-1.908812,-4.317954,-9.560656,9.292448,3.203968,2.151593,-9.103822,-9.787636,7.534175,6.191775,-5.859201,8.966285,8.030364,8.323523,6.558211,3.757695,6.377888,-0.130273,7.652800,8.809562,-1.868600,-9.302609,-4.973586,-7.477499,4.191016,1.480492,1.342453], dtype = "float32")#candidate|1395|(144,)|const|float32
call_1390 = relay.TupleGetItem(func_1257_call(relay.reshape(const_1391.astype('float32'), [6, 8]), relay.reshape(const_1392.astype('int16'), [594,]), relay.reshape(const_1393.astype('float64'), [858,]), relay.reshape(var_1394.astype('float64'), [18,]), relay.reshape(const_1395.astype('float32'), [144,]), ), 6)
call_1396 = relay.TupleGetItem(func_1263_call(relay.reshape(const_1391.astype('float32'), [6, 8]), relay.reshape(const_1392.astype('int16'), [594,]), relay.reshape(const_1393.astype('float64'), [858,]), relay.reshape(var_1394.astype('float64'), [18,]), relay.reshape(const_1395.astype('float32'), [144,]), ), 6)
var_1397 = relay.var("var_1397", dtype = "float64", shape = (858,))#candidate|1397|(858,)|var|float64
bop_1398 = relay.bitwise_and(const_1393.astype('uint16'), relay.reshape(var_1397.astype('uint16'), relay.shape_of(const_1393))) # shape=(858,)
uop_1401 = relay.log(var_1394.astype('float64')) # shape=(1, 18)
uop_1403 = relay.acos(uop_1401.astype('float64')) # shape=(1, 18)
output = relay.Tuple([call_1387,call_1390,const_1391,const_1392,const_1395,bop_1398,uop_1403,])
output2 = relay.Tuple([call_1388,call_1396,const_1391,const_1392,const_1395,bop_1398,uop_1403,])
func_1406 = relay.Function([var_1394,var_1397,], output)
mod['func_1406'] = func_1406
mod = relay.transform.InferType()(mod)
mutated_mod['func_1406'] = func_1406
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1406_call = mutated_mod.get_global_var('func_1406')
var_1408 = relay.var("var_1408", dtype = "float64", shape = (1, 18))#candidate|1408|(1, 18)|var|float64
var_1409 = relay.var("var_1409", dtype = "float64", shape = (858,))#candidate|1409|(858,)|var|float64
call_1407 = func_1406_call(var_1408,var_1409,)
output = call_1407
func_1410 = relay.Function([var_1408,var_1409,], output)
mutated_mod['func_1410'] = func_1410
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1415 = relay.var("var_1415", dtype = "float32", shape = (15, 13, 2))#candidate|1415|(15, 13, 2)|var|float32
uop_1416 = relay.cosh(var_1415.astype('float32')) # shape=(15, 13, 2)
uop_1418 = relay.asinh(var_1415.astype('float32')) # shape=(15, 13, 2)
bop_1426 = relay.bitwise_xor(uop_1416.astype('uint16'), relay.reshape(uop_1418.astype('uint16'), relay.shape_of(uop_1416))) # shape=(15, 13, 2)
output = bop_1426
output2 = bop_1426
func_1436 = relay.Function([var_1415,], output)
mod['func_1436'] = func_1436
mod = relay.transform.InferType()(mod)
mutated_mod['func_1436'] = func_1436
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1437 = relay.var("var_1437", dtype = "float32", shape = (15, 13, 2))#candidate|1437|(15, 13, 2)|var|float32
func_1436_call = mutated_mod.get_global_var('func_1436')
call_1438 = func_1436_call(var_1437)
output = call_1438
func_1439 = relay.Function([var_1437], output)
mutated_mod['func_1439'] = func_1439
mutated_mod = relay.transform.InferType()(mutated_mod)
func_334_call = mod.get_global_var('func_334')
func_335_call = mutated_mod.get_global_var('func_335')
call_1484 = relay.TupleGetItem(func_334_call(), 0)
call_1485 = relay.TupleGetItem(func_335_call(), 0)
output = relay.Tuple([call_1484,])
output2 = relay.Tuple([call_1485,])
func_1486 = relay.Function([], output)
mod['func_1486'] = func_1486
mod = relay.transform.InferType()(mod)
mutated_mod['func_1486'] = func_1486
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1486_call = mutated_mod.get_global_var('func_1486')
call_1487 = func_1486_call()
output = call_1487
func_1488 = relay.Function([], output)
mutated_mod['func_1488'] = func_1488
mutated_mod = relay.transform.InferType()(mutated_mod)
func_359_call = mod.get_global_var('func_359')
func_360_call = mutated_mod.get_global_var('func_360')
call_1532 = relay.TupleGetItem(func_359_call(), 0)
call_1533 = relay.TupleGetItem(func_360_call(), 0)
uop_1542 = relay.sinh(call_1532.astype('float64')) # shape=(12, 9, 11)
uop_1544 = relay.sinh(call_1533.astype('float64')) # shape=(12, 9, 11)
bop_1549 = relay.less(call_1532.astype('bool'), relay.reshape(uop_1542.astype('bool'), relay.shape_of(call_1532))) # shape=(12, 9, 11)
bop_1552 = relay.less(call_1533.astype('bool'), relay.reshape(uop_1544.astype('bool'), relay.shape_of(call_1533))) # shape=(12, 9, 11)
bop_1553 = relay.multiply(call_1532.astype('float64'), relay.reshape(uop_1542.astype('float64'), relay.shape_of(call_1532))) # shape=(12, 9, 11)
bop_1556 = relay.multiply(call_1533.astype('float64'), relay.reshape(uop_1544.astype('float64'), relay.shape_of(call_1533))) # shape=(12, 9, 11)
bop_1559 = relay.bitwise_or(uop_1542.astype('uint16'), relay.reshape(bop_1553.astype('uint16'), relay.shape_of(uop_1542))) # shape=(12, 9, 11)
bop_1562 = relay.bitwise_or(uop_1544.astype('uint16'), relay.reshape(bop_1556.astype('uint16'), relay.shape_of(uop_1544))) # shape=(12, 9, 11)
var_1567 = relay.var("var_1567", dtype = "float64", shape = (12, 9, 11))#candidate|1567|(12, 9, 11)|var|float64
bop_1568 = relay.minimum(call_1532.astype('int16'), relay.reshape(var_1567.astype('int16'), relay.shape_of(call_1532))) # shape=(12, 9, 11)
bop_1571 = relay.minimum(call_1533.astype('int16'), relay.reshape(var_1567.astype('int16'), relay.shape_of(call_1533))) # shape=(12, 9, 11)
bop_1572 = relay.left_shift(bop_1549.astype('uint16'), relay.reshape(call_1532.astype('uint16'), relay.shape_of(bop_1549))) # shape=(12, 9, 11)
bop_1575 = relay.left_shift(bop_1552.astype('uint16'), relay.reshape(call_1533.astype('uint16'), relay.shape_of(bop_1552))) # shape=(12, 9, 11)
output = relay.Tuple([bop_1559,bop_1568,bop_1572,])
output2 = relay.Tuple([bop_1562,bop_1571,bop_1575,])
func_1578 = relay.Function([var_1567,], output)
mod['func_1578'] = func_1578
mod = relay.transform.InferType()(mod)
var_1579 = relay.var("var_1579", dtype = "float64", shape = (12, 9, 11))#candidate|1579|(12, 9, 11)|var|float64
output = func_1578(var_1579)
func_1580 = relay.Function([var_1579], output)
mutated_mod['func_1580'] = func_1580
mutated_mod = relay.transform.InferType()(mutated_mod)
func_334_call = mod.get_global_var('func_334')
func_335_call = mutated_mod.get_global_var('func_335')
call_1594 = relay.TupleGetItem(func_334_call(), 1)
call_1595 = relay.TupleGetItem(func_335_call(), 1)
uop_1607 = relay.erf(call_1594.astype('float64')) # shape=(12, 9, 11)
uop_1609 = relay.erf(call_1595.astype('float64')) # shape=(12, 9, 11)
uop_1611 = relay.acosh(uop_1607.astype('float64')) # shape=(12, 9, 11)
uop_1613 = relay.acosh(uop_1609.astype('float64')) # shape=(12, 9, 11)
func_51_call = mod.get_global_var('func_51')
func_56_call = mutated_mod.get_global_var('func_56')
var_1622 = relay.var("var_1622", dtype = "float64", shape = (858,))#candidate|1622|(858,)|var|float64
call_1621 = relay.TupleGetItem(func_51_call(relay.reshape(var_1622.astype('float64'), [6, 13, 11]), relay.reshape(var_1622.astype('float64'), [6, 13, 11]), relay.reshape(var_1622.astype('float64'), [6, 13, 11]), ), 1)
call_1623 = relay.TupleGetItem(func_56_call(relay.reshape(var_1622.astype('float64'), [6, 13, 11]), relay.reshape(var_1622.astype('float64'), [6, 13, 11]), relay.reshape(var_1622.astype('float64'), [6, 13, 11]), ), 1)
output = relay.Tuple([uop_1611,call_1621,var_1622,])
output2 = relay.Tuple([uop_1613,call_1623,var_1622,])
func_1654 = relay.Function([var_1622,], output)
mod['func_1654'] = func_1654
mod = relay.transform.InferType()(mod)
var_1655 = relay.var("var_1655", dtype = "float64", shape = (858,))#candidate|1655|(858,)|var|float64
output = func_1654(var_1655)
func_1656 = relay.Function([var_1655], output)
mutated_mod['func_1656'] = func_1656
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1669 = relay.var("var_1669", dtype = "int32", shape = ())#candidate|1669|()|var|int32
var_1670 = relay.var("var_1670", dtype = "int32", shape = (13, 7))#candidate|1670|(13, 7)|var|int32
bop_1671 = relay.right_shift(var_1669.astype('int32'), var_1670.astype('int32')) # shape=(13, 7)
output = bop_1671
output2 = bop_1671
func_1675 = relay.Function([var_1669,var_1670,], output)
mod['func_1675'] = func_1675
mod = relay.transform.InferType()(mod)
mutated_mod['func_1675'] = func_1675
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1675_call = mutated_mod.get_global_var('func_1675')
var_1677 = relay.var("var_1677", dtype = "int32", shape = ())#candidate|1677|()|var|int32
var_1678 = relay.var("var_1678", dtype = "int32", shape = (13, 7))#candidate|1678|(13, 7)|var|int32
call_1676 = func_1675_call(var_1677,var_1678,)
output = call_1676
func_1679 = relay.Function([var_1677,var_1678,], output)
mutated_mod['func_1679'] = func_1679
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1768 = relay.const([[[2,-4,-5,-4,-6,3,7,-9,-4,6,5,4,10,-8,-8,2],[2,9,-4,6,-2,-5,6,5,-2,4,10,5,5,-9,-10,5],[9,-7,-8,3,6,2,-4,2,9,-3,-3,-9,2,5,10,-3],[-3,10,-5,-3,10,3,-2,10,-10,-4,-1,-3,-2,-4,8,9]],[[-10,-3,3,6,-1,9,-1,-9,-4,-3,-6,10,7,-10,3,-4],[-10,8,5,7,10,-1,7,-3,3,-7,-4,-8,-5,6,8,1],[-9,1,2,9,-6,-6,-10,-3,4,-5,9,9,-2,1,5,9],[-2,7,10,9,-6,-6,-1,1,-1,4,-10,1,10,-3,4,10]],[[-2,-2,-2,-8,-6,-5,5,2,2,3,1,-3,8,5,-8,9],[-3,-4,-4,1,7,6,-2,8,-6,-8,-7,-9,9,-6,-10,-6],[-8,6,-3,1,-5,-3,-5,4,4,-10,5,5,-5,10,7,-8],[8,-6,-5,10,4,-8,6,4,-4,-8,-6,-2,5,-6,-9,7]],[[10,-6,-10,4,2,7,-4,8,5,-8,1,2,1,8,2,-7],[9,-5,2,7,1,-3,-4,4,9,10,3,7,10,4,-1,2],[4,10,-9,3,-10,-9,-9,4,7,7,-6,4,10,-5,8,-10],[9,2,7,-9,2,-9,-3,7,7,-9,-10,8,-10,-10,2,-5]],[[-2,-10,10,3,-7,3,7,9,-5,8,1,5,1,-2,-9,-6],[1,9,-5,-5,9,4,7,-2,2,-10,-6,-4,2,1,-10,2],[1,5,6,-8,-10,-10,6,9,-2,10,-4,4,-10,-1,10,-2],[-7,-8,-8,7,-9,-5,9,-4,5,-8,10,-8,6,1,-3,8]],[[-1,-4,-3,9,7,10,1,8,9,6,-7,2,-4,-9,5,8],[6,-6,-10,-2,10,7,-7,7,9,7,-8,9,-9,10,8,1],[7,-4,4,-7,9,6,-9,3,-8,3,-9,-9,-1,-4,8,-4],[5,-5,-5,3,-6,-9,4,2,2,10,-8,-2,10,9,-1,5]],[[10,-5,10,-8,-7,-1,10,-4,9,-4,5,-7,3,-2,-8,2],[-5,-2,5,3,-6,4,2,-8,2,-9,1,-1,-1,-9,-2,-8],[8,-5,-9,-4,7,-2,-7,-9,6,7,3,10,-3,-4,1,-5],[1,1,-8,-6,4,1,10,-10,7,4,5,5,-4,-6,-8,-4]],[[-1,-8,2,6,-4,7,9,2,7,8,-9,-2,10,8,9,9],[-8,10,3,-8,-5,2,-4,-9,-10,5,-10,2,6,-9,3,6],[-7,1,-4,-8,6,2,6,-3,8,6,6,7,-8,-9,-4,-2],[3,10,4,6,-10,2,-10,4,4,6,-10,9,9,10,-5,2]],[[-8,5,10,4,2,10,2,1,-6,5,2,-5,-4,-4,-9,-6],[9,-1,-5,-3,-4,10,-6,3,10,9,1,-2,-1,3,3,9],[1,4,-8,4,9,9,6,9,-9,9,2,-7,8,-5,7,4],[3,-5,-3,2,-2,-7,-2,-6,5,-2,-7,-2,-9,7,-10,-6]]], dtype = "int8")#candidate|1768|(9, 4, 16)|const|int8
var_1769 = relay.var("var_1769", dtype = "int8", shape = (9, 4, 16))#candidate|1769|(9, 4, 16)|var|int8
bop_1770 = relay.bitwise_or(const_1768.astype('int8'), relay.reshape(var_1769.astype('int8'), relay.shape_of(const_1768))) # shape=(9, 4, 16)
output = relay.Tuple([bop_1770,])
output2 = relay.Tuple([bop_1770,])
func_1776 = relay.Function([var_1769,], output)
mod['func_1776'] = func_1776
mod = relay.transform.InferType()(mod)
mutated_mod['func_1776'] = func_1776
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1777 = relay.var("var_1777", dtype = "int8", shape = (9, 4, 16))#candidate|1777|(9, 4, 16)|var|int8
func_1776_call = mutated_mod.get_global_var('func_1776')
call_1778 = func_1776_call(var_1777)
output = call_1778
func_1779 = relay.Function([var_1777], output)
mutated_mod['func_1779'] = func_1779
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1926 = relay.const([[-5.937455,-9.806131],[7.247447,0.973867],[-8.935541,1.877097],[-2.589911,2.305298],[9.336338,-0.425704],[3.041612,6.001867]], dtype = "float64")#candidate|1926|(6, 2)|const|float64
uop_1927 = relay.atanh(const_1926.astype('float64')) # shape=(6, 2)
const_1932 = relay.const([[4.602842,-0.954087],[-4.184253,4.470004],[-0.833906,-1.768701],[6.344952,0.202556],[1.177367,5.716440],[8.390959,-1.906047]], dtype = "float64")#candidate|1932|(6, 2)|const|float64
bop_1933 = relay.bitwise_or(uop_1927.astype('uint32'), relay.reshape(const_1932.astype('uint32'), relay.shape_of(uop_1927))) # shape=(6, 2)
func_1286_call = mod.get_global_var('func_1286')
func_1288_call = mutated_mod.get_global_var('func_1288')
var_1945 = relay.var("var_1945", dtype = "float32", shape = (2, 24))#candidate|1945|(2, 24)|var|float32
call_1944 = relay.TupleGetItem(func_1286_call(relay.reshape(var_1945.astype('float32'), [48,])), 2)
call_1946 = relay.TupleGetItem(func_1288_call(relay.reshape(var_1945.astype('float32'), [48,])), 2)
bop_1972 = relay.floor_mod(uop_1927.astype('float64'), relay.reshape(bop_1933.astype('float64'), relay.shape_of(uop_1927))) # shape=(6, 2)
uop_1975 = relay.sinh(bop_1972.astype('float64')) # shape=(6, 2)
uop_1977 = relay.acos(var_1945.astype('float32')) # shape=(2, 24)
output = relay.Tuple([call_1944,uop_1975,uop_1977,])
output2 = relay.Tuple([call_1946,uop_1975,uop_1977,])
func_1986 = relay.Function([var_1945,], output)
mod['func_1986'] = func_1986
mod = relay.transform.InferType()(mod)
var_1987 = relay.var("var_1987", dtype = "float32", shape = (2, 24))#candidate|1987|(2, 24)|var|float32
output = func_1986(var_1987)
func_1988 = relay.Function([var_1987], output)
mutated_mod['func_1988'] = func_1988
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1993 = relay.var("var_1993", dtype = "float32", shape = (16, 2, 7))#candidate|1993|(16, 2, 7)|var|float32
uop_1994 = relay.acos(var_1993.astype('float32')) # shape=(16, 2, 7)
uop_2000 = relay.log2(var_1993.astype('float32')) # shape=(16, 2, 7)
func_1257_call = mod.get_global_var('func_1257')
func_1263_call = mutated_mod.get_global_var('func_1263')
const_2003 = relay.const([-2.673653,3.886132,1.790103,-0.669474,0.758748,2.628974,3.670031,1.928429,1.853563,-2.683897,1.301382,4.820889,7.230251,-4.429167,-8.104712,7.302616,7.915841,-9.917074,-2.136028,9.520052,-9.200830,-7.910882,-2.500126,0.106216,-3.542884,1.947032,-3.437132,-4.931754,6.143903,-6.841336,3.579571,-5.140496,-7.531731,0.709901,4.726576,-0.165090,2.147617,0.915819,8.052328,1.940409,-1.400433,6.930009,1.880464,-0.582475,-3.663654,-7.345705,-9.758712,-2.381302], dtype = "float32")#candidate|2003|(48,)|const|float32
var_2004 = relay.var("var_2004", dtype = "int16", shape = (594,))#candidate|2004|(594,)|var|int16
var_2005 = relay.var("var_2005", dtype = "float64", shape = (858,))#candidate|2005|(858,)|var|float64
const_2006 = relay.const([-6.965609,-2.310112,1.493933,2.442462,4.104149,8.538871,-0.737421,3.606099,5.250196,1.849725,-7.443516,1.397145,-6.785718,-8.480332,-3.380384,-1.387343,0.765046,4.681205], dtype = "float64")#candidate|2006|(18,)|const|float64
var_2007 = relay.var("var_2007", dtype = "float32", shape = (144,))#candidate|2007|(144,)|var|float32
call_2002 = relay.TupleGetItem(func_1257_call(relay.reshape(const_2003.astype('float32'), [6, 8]), relay.reshape(var_2004.astype('int16'), [594,]), relay.reshape(var_2005.astype('float64'), [858,]), relay.reshape(const_2006.astype('float64'), [18,]), relay.reshape(var_2007.astype('float32'), [144,]), ), 6)
call_2008 = relay.TupleGetItem(func_1263_call(relay.reshape(const_2003.astype('float32'), [6, 8]), relay.reshape(var_2004.astype('int16'), [594,]), relay.reshape(var_2005.astype('float64'), [858,]), relay.reshape(const_2006.astype('float64'), [18,]), relay.reshape(var_2007.astype('float32'), [144,]), ), 6)
uop_2011 = relay.exp(uop_2000.astype('float64')) # shape=(16, 2, 7)
bop_2014 = relay.mod(call_2002.astype('float64'), relay.reshape(var_2005.astype('float64'), relay.shape_of(call_2002))) # shape=(858,)
bop_2017 = relay.mod(call_2008.astype('float64'), relay.reshape(var_2005.astype('float64'), relay.shape_of(call_2008))) # shape=(858,)
output = relay.Tuple([uop_1994,const_2003,var_2004,const_2006,var_2007,uop_2011,bop_2014,])
output2 = relay.Tuple([uop_1994,const_2003,var_2004,const_2006,var_2007,uop_2011,bop_2017,])
func_2020 = relay.Function([var_1993,var_2004,var_2005,var_2007,], output)
mod['func_2020'] = func_2020
mod = relay.transform.InferType()(mod)
mutated_mod['func_2020'] = func_2020
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2020_call = mutated_mod.get_global_var('func_2020')
var_2022 = relay.var("var_2022", dtype = "float32", shape = (16, 2, 7))#candidate|2022|(16, 2, 7)|var|float32
var_2023 = relay.var("var_2023", dtype = "int16", shape = (594,))#candidate|2023|(594,)|var|int16
var_2024 = relay.var("var_2024", dtype = "float64", shape = (858,))#candidate|2024|(858,)|var|float64
var_2025 = relay.var("var_2025", dtype = "float32", shape = (144,))#candidate|2025|(144,)|var|float32
call_2021 = func_2020_call(var_2022,var_2023,var_2024,var_2025,)
output = call_2021
func_2026 = relay.Function([var_2022,var_2023,var_2024,var_2025,], output)
mutated_mod['func_2026'] = func_2026
mutated_mod = relay.transform.InferType()(mutated_mod)
func_359_call = mod.get_global_var('func_359')
func_360_call = mutated_mod.get_global_var('func_360')
call_2036 = relay.TupleGetItem(func_359_call(), 0)
call_2037 = relay.TupleGetItem(func_360_call(), 0)
uop_2056 = relay.atan(call_2036.astype('float64')) # shape=(12, 9, 11)
uop_2058 = relay.atan(call_2037.astype('float64')) # shape=(12, 9, 11)
var_2059 = relay.var("var_2059", dtype = "float64", shape = (12, 9, 11))#candidate|2059|(12, 9, 11)|var|float64
bop_2060 = relay.logical_or(uop_2056.astype('bool'), relay.reshape(var_2059.astype('bool'), relay.shape_of(uop_2056))) # shape=(12, 9, 11)
bop_2063 = relay.logical_or(uop_2058.astype('bool'), relay.reshape(var_2059.astype('bool'), relay.shape_of(uop_2058))) # shape=(12, 9, 11)
func_2020_call = mod.get_global_var('func_2020')
func_2026_call = mutated_mod.get_global_var('func_2026')
var_2074 = relay.var("var_2074", dtype = "float32", shape = (224,))#candidate|2074|(224,)|var|float32
const_2075 = relay.const([-10,10,7,-6,4,-10,-6,1,-1,4,-7,-8,2,2,-5,-6,3,6,-1,-7,-6,3,9,4,10,-4,4,7,-3,6,10,-2,9,5,10,2,-2,-10,3,-2,1,-2,-9,1,-10,9,-8,-6,-9,-4,4,7,-4,-8,-10,-10,8,5,10,9,-2,3,9,8,10,-1,1,10,-6,2,9,-8,-5,4,9,-7,-2,-5,-10,1,7,2,-9,-1,1,4,7,-8,-4,-8,-6,6,-7,-8,-5,7,-10,-8,-3,7,-4,3,10,-4,4,7,-6,7,-5,-10,-6,10,6,-7,1,-1,5,-8,7,-9,-3,2,-1,-5,-6,5,-10,7,7,4,-10,-6,-3,7,-6,3,-5,1,4,10,-10,1,4,-9,4,10,10,-6,-10,-3,1,8,-10,2,6,5,9,-10,-6,5,-2,-1,-10,-5,1,-7,-3,10,5,-1,-4,-10,4,5,9,-9,4,5,-8,4,-8,4,7,7,6,6,-4,-4,-6,-8,10,10,-9,9,3,9,-6,3,8,9,5,7,-10,8,1,-5,-5,-6,7,-2,-9,-2,-5,-2,4,-9,5,-10,7,4,-8,-9,-1,-7,-10,-1,-1,6,9,-1,9,3,3,10,-3,-8,-3,-4,-9,5,2,-10,8,-1,4,-9,1,7,-7,-6,1,-1,-8,-9,8,10,-1,-4,-6,5,6,-5,7,-3,-8,5,2,6,-3,-10,-10,-2,9,-9,1,-7,1,6,-3,-2,-7,-2,5,8,4,8,8,-4,-5,4,-8,-5,-10,-7,-9,5,8,-6,7,10,3,7,9,8,6,-10,-10,3,5,4,1,-1,-7,1,-10,-7,-8,-4,-6,2,4,-4,8,-6,-1,8,-10,-2,-5,-4,1,-8,6,9,4,-1,3,3,-7,4,-1,-10,1,-1,3,3,-7,-7,3,-2,-7,-5,10,-10,1,3,-8,5,4,-8,-1,5,2,-10,9,-3,-5,-5,-10,-2,-2,-3,7,-10,3,-2,-10,4,-10,-8,8,-5,2,10,6,-3,6,-9,-3,5,-8,2,-5,-10,3,-4,-9,-4,9,-1,5,-5,9,3,2,7,7,8,10,-9,-5,-3,-3,5,10,-9,9,5,8,9,-8,-2,8,10,-9,10,-1,-8,10,8,-9,-7,3,-6,2,10,2,6,1,9,-5,4,9,-2,-7,-3,9,9,-1,-2,-10,2,6,5,4,-7,-10,6,-5,2,-1,2,-4,4,6,8,-10,-2,-8,4,-1,-2,-2,-4,-7,2,-1,9,-5,-9,-1,-1,-7,7,-9,1,2,3,-4,-4,3,-10,-2,8,-2,-10,-5,-3,-3,-2,-3,-4,-6,2,4,-10,2,1,-9,-1,7,-3,4,7,-10,4,1,10,-7,-7,8,9,-9,4,-1,-8,-8,-3,9,-4,6,-4,-7,4,7,-4,1,5,-6,-8,5,5,9,8,7,-8,-1,2,7,10,9,10,-9,-2,5,-4,-9,6,7,7,7,9,-10,-5,-8,4,1,1,-1,7,-4,8,9,1,-9,2,-6,5,-3,-4,5,10,1,6,-4,-2,3,2,-6,-8,3,-3,2,-8], dtype = "int16")#candidate|2075|(594,)|const|int16
var_2076 = relay.var("var_2076", dtype = "float64", shape = (858,))#candidate|2076|(858,)|var|float64
const_2077 = relay.const([0.949142,5.375487,1.236007,-1.294039,3.861425,-8.342331,-9.910567,-9.520226,6.740503,4.353920,9.980896,7.410422,-0.048300,-2.222804,-8.453553,0.585069,-8.744084,8.271926,-3.504289,-0.370182,5.050283,-1.361357,-0.435222,-8.294735,6.829724,5.137727,1.673207,-3.583901,-4.012084,0.179117,-5.552208,-8.300534,3.401297,7.677986,7.053559,8.118255,-4.536096,9.887010,5.965714,7.152999,0.065502,7.410469,9.693225,-8.003076,7.877126,-2.811194,-5.258622,-3.202882,-0.773661,-0.712516,9.647894,-4.819041,9.338807,-3.009291,5.396422,8.378066,0.705544,3.820481,2.043222,-0.940411,-8.310938,-8.733662,9.956631,-7.452905,-4.794531,-0.207337,3.136683,-6.925818,-1.852398,5.857698,-4.955844,-6.487689,3.089349,-3.262083,-1.399813,2.436290,-7.391228,5.026423,-1.941102,4.365729,-6.387414,2.721845,1.942260,0.094911,-1.301627,2.301420,0.666790,-8.465730,-0.540718,3.633894,1.045524,6.248139,9.553362,-4.980583,-2.507932,-7.893935,0.088295,-8.995338,1.921768,-7.288721,-3.032077,-8.375566,4.910958,0.082759,-2.409457,-0.371141,2.917216,1.538994,4.172389,7.000930,6.817385,-8.388113,9.606338,9.330910,-0.475669,-0.442011,-0.863283,4.133472,-2.723178,8.507931,1.327810,-8.184480,7.934820,4.403559,2.466197,-3.474001,7.469081,4.359983,-8.947882,8.751605,-3.018337,5.470398,4.171973,8.072361,8.498795,-5.484615,-5.454153,-8.866917,-1.292227,-1.924011,-3.490634,-6.962832,-1.070772,-0.373805], dtype = "float32")#candidate|2077|(144,)|const|float32
call_2073 = relay.TupleGetItem(func_2020_call(relay.reshape(var_2074.astype('float32'), [16, 2, 7]), relay.reshape(const_2075.astype('int16'), [594,]), relay.reshape(var_2076.astype('float64'), [858,]), relay.reshape(const_2077.astype('float32'), [144,]), ), 6)
call_2078 = relay.TupleGetItem(func_2026_call(relay.reshape(var_2074.astype('float32'), [16, 2, 7]), relay.reshape(const_2075.astype('int16'), [594,]), relay.reshape(var_2076.astype('float64'), [858,]), relay.reshape(const_2077.astype('float32'), [144,]), ), 6)
output = relay.Tuple([bop_2060,call_2073,var_2074,const_2075,var_2076,const_2077,])
output2 = relay.Tuple([bop_2063,call_2078,var_2074,const_2075,var_2076,const_2077,])
func_2080 = relay.Function([var_2059,var_2074,var_2076,], output)
mod['func_2080'] = func_2080
mod = relay.transform.InferType()(mod)
var_2081 = relay.var("var_2081", dtype = "float64", shape = (12, 9, 11))#candidate|2081|(12, 9, 11)|var|float64
var_2082 = relay.var("var_2082", dtype = "float32", shape = (224,))#candidate|2082|(224,)|var|float32
var_2083 = relay.var("var_2083", dtype = "float64", shape = (858,))#candidate|2083|(858,)|var|float64
output = func_2080(var_2081,var_2082,var_2083,)
func_2084 = relay.Function([var_2081,var_2082,var_2083,], output)
mutated_mod['func_2084'] = func_2084
mutated_mod = relay.transform.InferType()(mutated_mod)
func_772_call = mod.get_global_var('func_772')
func_773_call = mutated_mod.get_global_var('func_773')
call_2088 = func_772_call()
call_2089 = func_772_call()
output = relay.Tuple([call_2088,])
output2 = relay.Tuple([call_2089,])
func_2103 = relay.Function([], output)
mod['func_2103'] = func_2103
mod = relay.transform.InferType()(mod)
output = func_2103()
func_2104 = relay.Function([], output)
mutated_mod['func_2104'] = func_2104
mutated_mod = relay.transform.InferType()(mutated_mod)
func_772_call = mod.get_global_var('func_772')
func_773_call = mutated_mod.get_global_var('func_773')
call_2125 = func_772_call()
call_2126 = func_772_call()
uop_2137 = relay.sin(call_2125.astype('float32')) # shape=(12, 9, 11)
uop_2139 = relay.sin(call_2126.astype('float32')) # shape=(12, 9, 11)
bop_2142 = relay.not_equal(call_2125.astype('bool'), relay.reshape(uop_2137.astype('bool'), relay.shape_of(call_2125))) # shape=(12, 9, 11)
bop_2145 = relay.not_equal(call_2126.astype('bool'), relay.reshape(uop_2139.astype('bool'), relay.shape_of(call_2126))) # shape=(12, 9, 11)
var_2149 = relay.var("var_2149", dtype = "bool", shape = (12, 9, 11))#candidate|2149|(12, 9, 11)|var|bool
bop_2150 = relay.equal(bop_2142.astype('bool'), relay.reshape(var_2149.astype('bool'), relay.shape_of(bop_2142))) # shape=(12, 9, 11)
bop_2153 = relay.equal(bop_2145.astype('bool'), relay.reshape(var_2149.astype('bool'), relay.shape_of(bop_2145))) # shape=(12, 9, 11)
output = bop_2150
output2 = bop_2153
F = relay.Function([var_2149,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_2149,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_2149= np.array([[[True,True,False,False,True,False,True,True,False,False,True],[False,True,True,True,False,False,True,True,True,True,False],[False,False,False,True,True,False,True,True,False,False,True],[False,False,False,False,True,True,False,False,False,True,True],[True,False,True,True,True,False,True,False,False,True,True],[False,True,False,False,False,False,False,True,True,False,True],[True,False,True,False,True,True,True,False,False,False,False],[False,False,True,False,True,False,True,False,True,True,True],[True,False,False,True,False,True,False,True,False,True,True]],[[True,False,False,False,True,False,True,True,False,True,True],[False,True,False,False,False,True,True,False,False,False,False],[False,False,False,True,False,True,False,False,True,True,False],[True,False,True,False,True,False,False,False,False,False,True],[False,False,False,True,True,False,False,False,False,False,False],[False,False,False,False,False,False,True,True,False,False,True],[True,False,False,False,True,False,False,True,False,False,False],[False,False,True,False,False,True,False,False,True,False,False],[False,False,False,False,True,False,True,False,True,False,False]],[[False,False,True,False,False,True,False,True,True,False,True],[False,False,True,False,False,True,True,True,False,True,True],[False,False,True,False,True,True,False,True,True,False,False],[True,False,False,False,True,True,True,True,False,True,False],[True,True,False,True,True,True,True,False,True,True,False],[False,False,True,True,False,True,False,False,True,True,False],[True,True,True,True,False,True,True,False,True,True,True],[True,False,False,True,True,True,False,False,True,False,False],[True,True,False,False,True,False,True,True,True,False,False]],[[False,True,True,True,True,True,False,False,False,False,False],[True,True,True,False,True,True,True,True,False,False,False],[False,False,True,True,True,False,False,False,True,False,True],[False,False,False,True,False,False,True,False,False,False,True],[True,False,False,True,False,True,True,False,True,True,True],[True,False,False,True,False,False,False,True,False,False,True],[False,True,True,True,True,False,True,True,True,True,False],[False,False,False,True,True,False,True,False,True,False,True],[False,True,True,False,False,False,False,False,True,True,False]],[[True,False,True,True,True,False,False,False,False,False,False],[False,False,True,True,True,False,False,True,True,False,False],[False,True,False,True,True,True,False,False,True,True,False],[False,False,False,False,True,False,True,True,True,True,True],[False,False,False,False,True,True,True,True,False,False,False],[False,True,False,True,True,False,False,True,True,False,True],[True,True,False,True,False,False,False,True,True,True,False],[False,True,True,True,True,False,True,True,True,False,False],[True,True,True,True,False,False,False,False,False,True,True]],[[False,True,True,False,True,True,False,False,True,False,False],[False,True,True,False,True,False,True,True,False,False,False],[True,False,False,False,False,True,False,False,False,False,True],[False,True,False,True,True,True,False,True,True,False,False],[False,False,True,False,False,False,False,False,True,True,False],[True,True,True,False,True,True,True,False,False,True,True],[False,False,False,True,False,True,False,False,True,False,False],[True,False,False,True,False,True,False,False,True,False,True],[False,False,True,True,True,True,True,False,False,False,False]],[[False,True,False,True,False,False,False,False,True,True,True],[True,True,True,False,True,True,False,True,True,False,False],[False,False,True,True,True,False,True,True,False,True,True],[True,False,True,True,False,True,False,False,False,False,True],[False,False,False,True,False,False,False,True,False,False,True],[True,True,False,True,False,False,False,True,True,True,True],[False,False,False,True,True,False,False,True,True,False,True],[True,True,False,True,False,True,True,False,False,True,False],[False,False,False,False,False,False,True,True,True,True,False]],[[True,True,True,True,True,False,False,True,True,False,False],[True,True,False,False,True,True,False,False,True,True,False],[True,True,True,True,True,False,True,False,False,False,True],[True,False,False,True,False,True,True,False,False,False,False],[False,True,True,True,True,True,False,False,True,False,False],[False,True,True,True,False,True,True,True,True,True,True],[True,False,True,True,True,False,True,False,False,True,True],[True,True,False,False,True,True,True,True,True,False,True],[False,True,True,True,False,False,False,True,True,False,False]],[[True,True,True,True,False,True,True,True,False,False,False],[True,False,False,False,True,True,True,True,False,True,False],[False,False,True,False,True,False,False,True,False,True,False],[False,False,False,True,True,True,False,True,False,True,True],[False,True,False,True,False,False,False,True,False,False,True],[True,False,False,False,False,True,False,True,True,False,True],[True,False,False,True,False,True,True,True,False,True,False],[True,False,False,True,False,True,True,False,False,True,True],[True,True,True,False,True,True,False,False,False,True,False]],[[True,False,False,False,True,True,True,False,True,False,True],[True,True,True,False,False,False,False,True,True,True,False],[False,False,False,True,False,False,False,True,False,True,False],[False,True,True,True,False,False,False,False,True,True,True],[False,True,False,False,True,True,True,True,False,False,True],[False,True,True,False,True,False,False,False,False,False,False],[False,True,False,False,True,True,True,False,False,True,True],[False,False,False,False,True,True,False,True,False,False,True],[True,False,False,False,False,True,False,False,True,False,True]],[[True,False,False,False,True,False,True,True,True,True,True],[True,True,False,True,True,False,True,True,True,True,True],[True,True,True,False,True,True,True,False,False,True,False],[False,True,False,False,False,True,True,False,False,True,True],[False,False,True,False,True,False,True,False,False,True,True],[True,True,True,True,True,True,True,False,True,False,True],[True,False,False,False,False,False,False,True,True,True,True],[False,True,False,True,True,True,True,False,False,False,True],[True,True,False,False,True,False,False,True,False,True,True]],[[False,False,True,False,False,False,True,True,True,False,True],[False,True,False,True,False,False,True,False,True,True,False],[False,True,True,False,True,False,False,True,True,False,True],[True,False,True,True,False,True,True,False,False,True,True],[False,False,True,False,True,True,True,False,True,True,False],[False,False,True,False,False,False,False,True,True,True,True],[True,False,True,False,True,True,False,False,False,False,False],[True,False,False,True,True,False,False,True,False,True,True],[False,True,True,False,True,False,False,False,False,True,True]]], dtype='bool')
module1.set_input('var_2149', input_2149)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_2149, )
res3 = intrp3.evaluate()(input_2149, )
res4 = intrp4.evaluate()(input_2149, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input('var_2149', input_2149)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_2149, )
res7 = intrp7.evaluate()(input_2149, )
res8 = intrp8.evaluate()(input_2149, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input('var_2149', input_2149)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_2149, )
res11 = intrp11.evaluate()(input_2149, )
res12 = intrp12.evaluate()(input_2149, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input('var_2149', input_2149)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_2149, )
res15 = intrp15.evaluate()(input_2149, )
res16 = intrp16.evaluate()(input_2149, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input('var_2149', input_2149)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_2149, )
res19 = intrp19.evaluate()(input_2149, )
res20 = intrp20.evaluate()(input_2149, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input('var_2149', input_2149)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_2149, )
res23 = intrp23.evaluate()(input_2149, )
res24 = intrp24.evaluate()(input_2149, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''42: TVMFuncCall
41: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
40: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
39: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
38: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
37: tvm::transform::Pass::operator()(tvm::IRModule) const
36: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
35: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
30: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
29: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
28: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
27: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
26: _ZN3tvm5relay16MixedModeMutato
25: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
24: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
23: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
22: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
21: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
20: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
19: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
18: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
17: _ZN3tvm5relay16MixedModeMutato
16: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
15: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
14: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
13: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
12: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
11: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
10: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
9: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
8: tvm::transform::Pass::operator()(tvm::IRModule) const
7: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
6: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::Pass::operator()(tvm::IRModule) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
0: tvm::DiagnosticContext::Render()

'''