import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_2 = relay.var("var_2", dtype = "float64", shape = ())#candidate|2|()|var|float64
var_3 = relay.var("var_3", dtype = "float64", shape = (8, 5))#candidate|3|(8, 5)|var|float64
bop_4 = relay.mod(var_2.astype('float64'), var_3.astype('float64')) # shape=(8, 5)
uop_7 = relay.cos(bop_4.astype('float64')) # shape=(8, 5)
bop_9 = relay.not_equal(uop_7.astype('bool'), var_2.astype('bool')) # shape=(8, 5)
var_12 = relay.var("var_12", dtype = "bool", shape = (8, 5))#candidate|12|(8, 5)|var|bool
bop_13 = relay.right_shift(bop_9.astype('int8'), relay.reshape(var_12.astype('int8'), relay.shape_of(bop_9))) # shape=(8, 5)
uop_16 = relay.sigmoid(bop_4.astype('float32')) # shape=(8, 5)
uop_20 = relay.acosh(bop_9.astype('float32')) # shape=(8, 5)
bop_23 = relay.less_equal(uop_7.astype('bool'), relay.reshape(bop_9.astype('bool'), relay.shape_of(uop_7))) # shape=(8, 5)
bop_26 = relay.greater(uop_20.astype('bool'), relay.reshape(uop_16.astype('bool'), relay.shape_of(uop_20))) # shape=(8, 5)
uop_35 = relay.log10(uop_20.astype('float64')) # shape=(8, 5)
uop_37 = relay.cosh(uop_7.astype('float64')) # shape=(8, 5)
uop_40 = relay.atanh(uop_35.astype('float64')) # shape=(8, 5)
bop_42 = relay.bitwise_or(uop_40.astype('int64'), relay.reshape(bop_9.astype('int64'), relay.shape_of(uop_40))) # shape=(8, 5)
uop_47 = relay.sin(bop_42.astype('float32')) # shape=(8, 5)
bop_49 = relay.add(uop_47.astype('float64'), relay.reshape(bop_23.astype('float64'), relay.shape_of(uop_47))) # shape=(8, 5)
bop_52 = relay.left_shift(bop_49.astype('int16'), relay.reshape(uop_35.astype('int16'), relay.shape_of(bop_49))) # shape=(8, 5)
uop_61 = relay.log(uop_40.astype('float32')) # shape=(8, 5)
uop_63 = relay.log2(uop_40.astype('float64')) # shape=(8, 5)
uop_69 = relay.rsqrt(bop_26.astype('float64')) # shape=(8, 5)
uop_73 = relay.sin(uop_61.astype('float32')) # shape=(8, 5)
uop_77 = relay.sin(uop_40.astype('float64')) # shape=(8, 5)
var_82 = relay.var("var_82", dtype = "float32", shape = (8, 5))#candidate|82|(8, 5)|var|float32
bop_83 = relay.greater(uop_47.astype('bool'), relay.reshape(var_82.astype('bool'), relay.shape_of(uop_47))) # shape=(8, 5)
uop_87 = relay.exp(uop_7.astype('float32')) # shape=(8, 5)
output = relay.Tuple([bop_13,uop_37,bop_52,uop_63,uop_69,uop_73,uop_77,bop_83,uop_87,])
output2 = relay.Tuple([bop_13,uop_37,bop_52,uop_63,uop_69,uop_73,uop_77,bop_83,uop_87,])
func_89 = relay.Function([var_2,var_3,var_12,var_82,], output)
mod['func_89'] = func_89
mod = relay.transform.InferType()(mod)
var_90 = relay.var("var_90", dtype = "float64", shape = ())#candidate|90|()|var|float64
var_91 = relay.var("var_91", dtype = "float64", shape = (8, 5))#candidate|91|(8, 5)|var|float64
var_92 = relay.var("var_92", dtype = "bool", shape = (8, 5))#candidate|92|(8, 5)|var|bool
var_93 = relay.var("var_93", dtype = "float32", shape = (8, 5))#candidate|93|(8, 5)|var|float32
output = func_89(var_90,var_91,var_92,var_93,)
func_94 = relay.Function([var_90,var_91,var_92,var_93,], output)
mutated_mod['func_94'] = func_94
mutated_mod = relay.transform.InferType()(mutated_mod)
const_125 = relay.const([2.305290,-3.131907,9.637286,4.563706,-1.197568,-4.100343,5.559334,-8.262955,1.337866,6.046266,0.570708,2.623708,4.459091,-8.236655,-4.855145,-5.809028], dtype = "float64")#candidate|125|(16,)|const|float64
uop_126 = relay.log2(const_125.astype('float64')) # shape=(16,)
bop_128 = relay.logical_or(uop_126.astype('bool'), relay.reshape(const_125.astype('bool'), relay.shape_of(uop_126))) # shape=(16,)
bop_131 = relay.add(const_125.astype('uint32'), relay.reshape(bop_128.astype('uint32'), relay.shape_of(const_125))) # shape=(16,)
uop_142 = relay.rsqrt(bop_131.astype('float64')) # shape=(16,)
bop_144 = relay.power(uop_142.astype('float64'), relay.reshape(bop_131.astype('float64'), relay.shape_of(uop_142))) # shape=(16,)
bop_147 = relay.not_equal(bop_144.astype('bool'), relay.reshape(uop_126.astype('bool'), relay.shape_of(bop_144))) # shape=(16,)
uop_150 = relay.sin(bop_147.astype('float32')) # shape=(16,)
bop_156 = relay.equal(uop_150.astype('bool'), relay.reshape(uop_126.astype('bool'), relay.shape_of(uop_150))) # shape=(16,)
bop_159 = relay.greater_equal(uop_142.astype('bool'), relay.reshape(bop_147.astype('bool'), relay.shape_of(uop_142))) # shape=(16,)
uop_164 = relay.asinh(bop_156.astype('float64')) # shape=(16,)
func_89_call = mod.get_global_var('func_89')
func_94_call = mutated_mod.get_global_var('func_94')
const_170 = relay.const(-3.806174, dtype = "float64")#candidate|170|()|const|float64
const_171 = relay.const([[-7.872279,7.831552,4.513685,8.486329,-7.962581,4.040422,8.248856,1.558590,-3.955066,-3.933788,-5.135947,-2.482618,0.616470,4.720404,9.958714,3.859631,-4.359388,-0.911333,9.850774,-4.057216,7.497711,-0.025799,-2.683971,3.397240,-0.228867,-1.796017,0.827655,4.627498,4.067327,2.052230,-7.158406,-8.162129,7.460042,-9.449847,-4.269536,-1.081227,8.274923,4.733521,-3.174405,-6.132403]], dtype = "float64")#candidate|171|(1, 40)|const|float64
call_169 = relay.TupleGetItem(func_89_call(relay.reshape(const_170.astype('float64'), []), relay.reshape(const_171.astype('float64'), [8, 5]), relay.reshape(const_171.astype('bool'), [8, 5]), relay.reshape(const_171.astype('float32'), [8, 5]), ), 1)
call_172 = relay.TupleGetItem(func_94_call(relay.reshape(const_170.astype('float64'), []), relay.reshape(const_171.astype('float64'), [8, 5]), relay.reshape(const_171.astype('bool'), [8, 5]), relay.reshape(const_171.astype('float32'), [8, 5]), ), 1)
uop_173 = relay.log(bop_159.astype('float32')) # shape=(16,)
uop_175 = relay.cosh(uop_164.astype('float64')) # shape=(16,)
func_89_call = mod.get_global_var('func_89')
func_94_call = mutated_mod.get_global_var('func_94')
call_177 = relay.TupleGetItem(func_89_call(relay.reshape(const_170.astype('float64'), []), relay.reshape(call_169.astype('float64'), [8, 5]), relay.reshape(call_169.astype('bool'), [8, 5]), relay.reshape(call_169.astype('float32'), [8, 5]), ), 0)
call_178 = relay.TupleGetItem(func_94_call(relay.reshape(const_170.astype('float64'), []), relay.reshape(call_169.astype('float64'), [8, 5]), relay.reshape(call_169.astype('bool'), [8, 5]), relay.reshape(call_169.astype('float32'), [8, 5]), ), 0)
output = relay.Tuple([call_169,const_170,const_171,uop_173,uop_175,call_177,])
output2 = relay.Tuple([call_172,const_170,const_171,uop_173,uop_175,call_178,])
func_179 = relay.Function([], output)
mod['func_179'] = func_179
mod = relay.transform.InferType()(mod)
output = func_179()
func_180 = relay.Function([], output)
mutated_mod['func_180'] = func_180
mutated_mod = relay.transform.InferType()(mutated_mod)
const_190 = relay.const(7, dtype = "int16")#candidate|190|()|const|int16
const_191 = relay.const([-3,3,-1,-5,10,-4,-4,3,8,3,-5,7,10], dtype = "int16")#candidate|191|(13,)|const|int16
bop_192 = relay.bitwise_and(const_190.astype('int16'), const_191.astype('int16')) # shape=(13,)
uop_201 = relay.log(const_191.astype('float32')) # shape=(13,)
func_179_call = mod.get_global_var('func_179')
func_180_call = mutated_mod.get_global_var('func_180')
call_205 = relay.TupleGetItem(func_179_call(), 0)
call_206 = relay.TupleGetItem(func_180_call(), 0)
var_207 = relay.var("var_207", dtype = "float32", shape = (13,))#candidate|207|(13,)|var|float32
bop_208 = relay.equal(uop_201.astype('bool'), relay.reshape(var_207.astype('bool'), relay.shape_of(uop_201))) # shape=(13,)
bop_211 = relay.bitwise_and(bop_208.astype('uint16'), const_190.astype('uint16')) # shape=(13,)
uop_214 = relay.atanh(bop_192.astype('float64')) # shape=(13,)
bop_219 = relay.mod(bop_211.astype('float32'), relay.reshape(uop_201.astype('float32'), relay.shape_of(bop_211))) # shape=(13,)
var_224 = relay.var("var_224", dtype = "bool", shape = (13,))#candidate|224|(13,)|var|bool
bop_225 = relay.floor_divide(bop_208.astype('float64'), relay.reshape(var_224.astype('float64'), relay.shape_of(bop_208))) # shape=(13,)
bop_229 = relay.not_equal(bop_225.astype('bool'), relay.reshape(bop_192.astype('bool'), relay.shape_of(bop_225))) # shape=(13,)
var_234 = relay.var("var_234", dtype = "float32", shape = (13,))#candidate|234|(13,)|var|float32
bop_235 = relay.greater_equal(uop_201.astype('bool'), relay.reshape(var_234.astype('bool'), relay.shape_of(uop_201))) # shape=(13,)
bop_239 = relay.bitwise_and(bop_219.astype('uint32'), relay.reshape(uop_201.astype('uint32'), relay.shape_of(bop_219))) # shape=(13,)
uop_242 = relay.sqrt(uop_201.astype('float32')) # shape=(13,)
var_248 = relay.var("var_248", dtype = "float32", shape = (13,))#candidate|248|(13,)|var|float32
bop_249 = relay.logical_or(uop_242.astype('bool'), relay.reshape(var_248.astype('bool'), relay.shape_of(uop_242))) # shape=(13,)
uop_252 = relay.erf(bop_211.astype('float64')) # shape=(13,)
var_254 = relay.var("var_254", dtype = "float64", shape = (13,))#candidate|254|(13,)|var|float64
bop_255 = relay.subtract(uop_252.astype('float32'), relay.reshape(var_254.astype('float32'), relay.shape_of(uop_252))) # shape=(13,)
bop_259 = relay.less(bop_255.astype('bool'), relay.reshape(bop_229.astype('bool'), relay.shape_of(bop_255))) # shape=(13,)
bop_264 = relay.power(bop_255.astype('float32'), relay.reshape(var_254.astype('float32'), relay.shape_of(bop_255))) # shape=(13,)
const_271 = relay.const([-2.236924,3.229930,2.770804,-1.553976,6.788331,-8.344392,8.833088,-6.414854,8.540490,8.572161,-9.122225,-2.513670,0.997772], dtype = "float64")#candidate|271|(13,)|const|float64
bop_272 = relay.less(uop_252.astype('bool'), relay.reshape(const_271.astype('bool'), relay.shape_of(uop_252))) # shape=(13,)
const_278 = relay.const([True,False,True,True,True,False,True,False,True,True,False,True,False], dtype = "bool")#candidate|278|(13,)|const|bool
bop_279 = relay.minimum(bop_272.astype('int8'), relay.reshape(const_278.astype('int8'), relay.shape_of(bop_272))) # shape=(13,)
uop_282 = relay.sigmoid(uop_214.astype('float32')) # shape=(13,)
bop_284 = relay.logical_xor(bop_225.astype('int64'), relay.reshape(bop_219.astype('int64'), relay.shape_of(bop_225))) # shape=(13,)
bop_287 = relay.bitwise_or(bop_229.astype('int32'), relay.reshape(bop_211.astype('int32'), relay.shape_of(bop_229))) # shape=(13,)
bop_293 = relay.subtract(bop_272.astype('int64'), relay.reshape(bop_225.astype('int64'), relay.shape_of(bop_272))) # shape=(13,)
output = relay.Tuple([call_205,bop_235,bop_239,bop_249,bop_259,bop_264,bop_279,uop_282,bop_284,bop_287,bop_293,])
output2 = relay.Tuple([call_206,bop_235,bop_239,bop_249,bop_259,bop_264,bop_279,uop_282,bop_284,bop_287,bop_293,])
func_297 = relay.Function([var_207,var_224,var_234,var_248,var_254,], output)
mod['func_297'] = func_297
mod = relay.transform.InferType()(mod)
mutated_mod['func_297'] = func_297
mutated_mod = relay.transform.InferType()(mutated_mod)
func_297_call = mutated_mod.get_global_var('func_297')
var_299 = relay.var("var_299", dtype = "float32", shape = (13,))#candidate|299|(13,)|var|float32
var_300 = relay.var("var_300", dtype = "bool", shape = (13,))#candidate|300|(13,)|var|bool
var_301 = relay.var("var_301", dtype = "float32", shape = (13,))#candidate|301|(13,)|var|float32
var_302 = relay.var("var_302", dtype = "float32", shape = (13,))#candidate|302|(13,)|var|float32
var_303 = relay.var("var_303", dtype = "float64", shape = (13,))#candidate|303|(13,)|var|float64
call_298 = func_297_call(var_299,var_300,var_301,var_302,var_303,)
output = call_298
func_304 = relay.Function([var_299,var_300,var_301,var_302,var_303,], output)
mutated_mod['func_304'] = func_304
mutated_mod = relay.transform.InferType()(mutated_mod)
var_325 = relay.var("var_325", dtype = "float32", shape = (12, 8, 14))#candidate|325|(12, 8, 14)|var|float32
uop_326 = relay.tan(var_325.astype('float32')) # shape=(12, 8, 14)
var_330 = relay.var("var_330", dtype = "float32", shape = (12, 8, 14))#candidate|330|(12, 8, 14)|var|float32
bop_331 = relay.subtract(uop_326.astype('float32'), relay.reshape(var_330.astype('float32'), relay.shape_of(uop_326))) # shape=(12, 8, 14)
bop_342 = relay.bitwise_and(bop_331.astype('uint32'), relay.reshape(var_325.astype('uint32'), relay.shape_of(bop_331))) # shape=(12, 8, 14)
var_345 = relay.var("var_345", dtype = "uint32", shape = (12, 8, 14))#candidate|345|(12, 8, 14)|var|uint32
bop_346 = relay.maximum(bop_342.astype('float32'), relay.reshape(var_345.astype('float32'), relay.shape_of(bop_342))) # shape=(12, 8, 14)
uop_349 = relay.log(bop_331.astype('float32')) # shape=(12, 8, 14)
func_89_call = mod.get_global_var('func_89')
func_94_call = mutated_mod.get_global_var('func_94')
var_353 = relay.var("var_353", dtype = "float64", shape = ())#candidate|353|()|var|float64
var_354 = relay.var("var_354", dtype = "float64", shape = (2, 20))#candidate|354|(2, 20)|var|float64
call_352 = relay.TupleGetItem(func_89_call(relay.reshape(var_353.astype('float64'), []), relay.reshape(var_354.astype('float64'), [8, 5]), relay.reshape(var_354.astype('bool'), [8, 5]), relay.reshape(var_354.astype('float32'), [8, 5]), ), 2)
call_355 = relay.TupleGetItem(func_94_call(relay.reshape(var_353.astype('float64'), []), relay.reshape(var_354.astype('float64'), [8, 5]), relay.reshape(var_354.astype('bool'), [8, 5]), relay.reshape(var_354.astype('float32'), [8, 5]), ), 2)
output = relay.Tuple([bop_346,uop_349,call_352,var_353,var_354,])
output2 = relay.Tuple([bop_346,uop_349,call_355,var_353,var_354,])
func_356 = relay.Function([var_325,var_330,var_345,var_353,var_354,], output)
mod['func_356'] = func_356
mod = relay.transform.InferType()(mod)
mutated_mod['func_356'] = func_356
mutated_mod = relay.transform.InferType()(mutated_mod)
func_356_call = mutated_mod.get_global_var('func_356')
var_358 = relay.var("var_358", dtype = "float32", shape = (12, 8, 14))#candidate|358|(12, 8, 14)|var|float32
var_359 = relay.var("var_359", dtype = "float32", shape = (12, 8, 14))#candidate|359|(12, 8, 14)|var|float32
var_360 = relay.var("var_360", dtype = "uint32", shape = (12, 8, 14))#candidate|360|(12, 8, 14)|var|uint32
var_361 = relay.var("var_361", dtype = "float64", shape = ())#candidate|361|()|var|float64
var_362 = relay.var("var_362", dtype = "float64", shape = (2, 20))#candidate|362|(2, 20)|var|float64
call_357 = func_356_call(var_358,var_359,var_360,var_361,var_362,)
output = call_357
func_363 = relay.Function([var_358,var_359,var_360,var_361,var_362,], output)
mutated_mod['func_363'] = func_363
mutated_mod = relay.transform.InferType()(mutated_mod)
func_179_call = mod.get_global_var('func_179')
func_180_call = mutated_mod.get_global_var('func_180')
call_367 = relay.TupleGetItem(func_179_call(), 1)
call_368 = relay.TupleGetItem(func_180_call(), 1)
output = call_367
output2 = call_368
func_376 = relay.Function([], output)
mod['func_376'] = func_376
mod = relay.transform.InferType()(mod)
output = func_376()
func_377 = relay.Function([], output)
mutated_mod['func_377'] = func_377
mutated_mod = relay.transform.InferType()(mutated_mod)
func_376_call = mod.get_global_var('func_376')
func_377_call = mutated_mod.get_global_var('func_377')
call_378 = func_376_call()
call_379 = func_376_call()
var_383 = relay.var("var_383", dtype = "float64", shape = (15, 10, 3))#candidate|383|(15, 10, 3)|var|float64
bop_384 = relay.bitwise_or(call_378.astype('int8'), var_383.astype('int8')) # shape=(15, 10, 3)
bop_387 = relay.bitwise_or(call_379.astype('int8'), var_383.astype('int8')) # shape=(15, 10, 3)
bop_391 = relay.equal(var_383.astype('bool'), relay.reshape(bop_384.astype('bool'), relay.shape_of(var_383))) # shape=(15, 10, 3)
bop_394 = relay.equal(var_383.astype('bool'), relay.reshape(bop_387.astype('bool'), relay.shape_of(var_383))) # shape=(15, 10, 3)
func_297_call = mod.get_global_var('func_297')
func_304_call = mutated_mod.get_global_var('func_304')
const_396 = relay.const([8.097375,-9.412032,-7.946032,-2.460906,-6.341640,2.821637,-1.007381,-6.977994,1.970941,-6.733766,3.886868,-0.805499,8.675000], dtype = "float32")#candidate|396|(13,)|const|float32
call_395 = relay.TupleGetItem(func_297_call(relay.reshape(const_396.astype('float32'), [13,]), relay.reshape(const_396.astype('bool'), [13,]), relay.reshape(const_396.astype('float32'), [13,]), relay.reshape(const_396.astype('float32'), [13,]), relay.reshape(const_396.astype('float64'), [13,]), ), 4)
call_397 = relay.TupleGetItem(func_304_call(relay.reshape(const_396.astype('float32'), [13,]), relay.reshape(const_396.astype('bool'), [13,]), relay.reshape(const_396.astype('float32'), [13,]), relay.reshape(const_396.astype('float32'), [13,]), relay.reshape(const_396.astype('float64'), [13,]), ), 4)
bop_400 = relay.logical_or(var_383.astype('bool'), call_378.astype('bool')) # shape=(15, 10, 3)
bop_403 = relay.logical_or(var_383.astype('bool'), call_379.astype('bool')) # shape=(15, 10, 3)
uop_404 = relay.acosh(call_395.astype('float32')) # shape=(13,)
uop_406 = relay.acosh(call_397.astype('float32')) # shape=(13,)
uop_407 = relay.cos(uop_404.astype('float64')) # shape=(13,)
uop_409 = relay.cos(uop_406.astype('float64')) # shape=(13,)
bop_410 = relay.right_shift(uop_407.astype('uint32'), relay.reshape(call_395.astype('uint32'), relay.shape_of(uop_407))) # shape=(13,)
bop_413 = relay.right_shift(uop_409.astype('uint32'), relay.reshape(call_397.astype('uint32'), relay.shape_of(uop_409))) # shape=(13,)
uop_415 = relay.exp(bop_410.astype('float64')) # shape=(13,)
uop_417 = relay.exp(bop_413.astype('float64')) # shape=(13,)
output = relay.Tuple([bop_391,const_396,bop_400,uop_415,])
output2 = relay.Tuple([bop_394,const_396,bop_403,uop_417,])
func_420 = relay.Function([var_383,], output)
mod['func_420'] = func_420
mod = relay.transform.InferType()(mod)
var_421 = relay.var("var_421", dtype = "float64", shape = (15, 10, 3))#candidate|421|(15, 10, 3)|var|float64
output = func_420(var_421)
func_422 = relay.Function([var_421], output)
mutated_mod['func_422'] = func_422
mutated_mod = relay.transform.InferType()(mutated_mod)
const_430 = relay.const([3,-8,8,10,8,3], dtype = "int16")#candidate|430|(6,)|const|int16
var_431 = relay.var("var_431", dtype = "int16", shape = (6,))#candidate|431|(6,)|var|int16
bop_432 = relay.bitwise_xor(const_430.astype('int16'), relay.reshape(var_431.astype('int16'), relay.shape_of(const_430))) # shape=(6,)
bop_437 = relay.minimum(const_430.astype('int64'), relay.reshape(bop_432.astype('int64'), relay.shape_of(const_430))) # shape=(6,)
func_420_call = mod.get_global_var('func_420')
func_422_call = mutated_mod.get_global_var('func_422')
const_443 = relay.const([[5.998518,-4.944556,6.653678,2.022396,2.918112,4.034587,-7.429872,8.309145,-0.116986,-9.892762,7.477086,1.769172,8.850010,-2.814258,6.685815,4.054491,-8.390831,5.644127,7.452655,-3.606522,-7.827512,2.079599,3.466962,-1.306133,-6.005730,-7.831779,2.398952,8.208354,0.692108,-1.219033,4.215982,4.317613,9.727859,8.061724,2.337815,4.158969,-0.344901,-5.742740,-9.773342,8.402059,-4.884870,-4.527772,8.578647,-9.219545,2.238658,8.173072,9.283528,-2.408296,5.441700,3.886376,-3.344390,-8.470928,4.339939,-8.559859,2.552519,-6.125856,4.774301,-5.829203,4.630480,7.638312,4.763404,2.433930,-5.534031,-0.344043,-1.481636,-3.040540,-8.072488,1.346732,-6.034349,1.976744,1.127101,8.140714,2.998586,1.827356,-1.114117,6.917258,3.576297,-5.328732,3.662861,0.988194,-7.157391,-3.321069,-2.254922,-9.558464,5.040953,0.950673,-3.482196,1.652561,-1.147317,-9.388491,-0.877973,-5.604927,-8.495954,3.489092,7.976465,6.910658,-1.361745,0.672460,2.329033,6.956240,0.707307,1.791547,1.206688,0.866951,8.447247,0.729516,-5.177211,4.565700,-9.822304,-4.438966,7.826299,-4.790010,5.373434,4.015338,9.418924,9.849325,2.999537,-0.444272,1.859129,-3.323771,6.766882,-2.648451,5.898026,7.890408,-9.028246,-6.668030,3.262176,-5.651222,-0.101601,-0.935261,-5.327280,-8.663902,-4.315755,0.263896,7.024394,5.924406,1.131684,-1.652772,5.977566,-9.428966,7.455629,-5.398083,0.412398,8.742036,-6.330495,-2.729504,0.247555,-2.532354,8.244522,0.355884,8.489953,-5.545118,8.180243,4.548358,-7.247790,-4.584421,-9.477899,-7.912237,2.133152,8.102428,7.297590,5.290332,7.774872,4.086563,3.940598,0.630527,0.487220,3.148532,-6.281278,6.936705,-8.135250,-7.807886,-6.264743,8.305726,-6.320550,4.013451,-1.969814,-5.167736,-7.896466,-1.078010,-1.547181,-5.099558,8.836344,-0.767302,0.612088,-2.422112,-6.599127,-2.044508,-6.205053,-0.792240,0.876332,-8.239305,-8.357024,0.558918,-8.881844,-6.167443,2.480727,-4.962757,-1.480842,-0.378141,5.328901,-9.947934,6.695587,-4.018086,-1.709722,-3.682523,2.363979,3.181308,3.595399,-9.396902,-4.840273,-3.471402,-7.274208,4.989751,-3.559188,-1.072031,-6.289991,7.256334,4.534102,3.969528,-9.382954,2.805049,0.091867,-8.578705,9.442412,-9.392752,9.721697,2.745177,-0.315075,6.013099,-5.915836,-7.915883,-5.794472,-6.883337,9.583499,0.139213,8.583502,0.035816,3.957834,3.955808,2.980136,-3.186712,4.635801,-1.613010,-8.855551,-9.798456,9.343628,-7.057099,-6.904994,8.439926,-8.160408,9.444255,-0.116296,-0.942788,-0.995570,-6.890278,-0.240398,5.334388,9.514658,0.468250,8.886398,-7.261237,-6.182257,-3.811197,-4.300587,-6.194873,-9.162803,-9.864801,1.126156,-2.059957,4.320250,9.628670,9.950028,2.579030,-4.008362,3.456665,-9.358687,-7.524542,-2.325911,2.105872,-2.019457,0.289478,5.247558,5.949207,3.975917,2.566187,6.304020,-5.817198,7.906793,4.399826,-7.081361,9.733016,-7.077317,6.767693,-2.508851,6.940230,-2.454744,4.441876,0.394685,-2.613098,-5.773356,5.005540,-4.278051,-4.328198,7.740705,4.873240,-1.902903,-8.069471,-1.440948,8.028447,-0.354539,-4.560432,-6.552477,-3.521286,-8.669306,-4.403650,-3.441011,-3.571585,8.103335,-5.311929,-8.361962,-3.038534,-3.230391,-7.952602,-5.107490,9.645825,-4.544938,9.013309,3.685975,-4.046825,4.959653,-4.287078,-2.091724,-6.685455,-3.061235,-1.507285,7.587204,9.581407,7.080723,-3.977334,-2.575670,-4.311207,7.550364,6.190746,-2.123939,7.471678,-2.977020,8.100113,-6.268862,-2.522329,4.052352,-1.090617,8.054701,-1.486935,4.624422,-4.033318,0.716337,-8.071295,-8.626633,1.426405,-7.812511,-3.865323,8.523873,5.989918,-1.687101,-9.922196,5.389010,-8.677656,-3.729642,0.328608,4.042061,2.576720,8.480214,-3.808253,0.030498,-4.967400,-7.602479,-8.791721,-8.173118,2.354310,0.645197,-6.857762,-7.303740,2.283878,-9.790840,-4.902376,-1.283322,-5.861202,-3.838224,-8.747803,-1.016439,0.556953,3.214300,-2.563317,4.685426,-2.177537,0.964054,5.621665,5.487531,3.392011,-8.911166,-3.778232,6.810206,-0.902121,9.704871,-3.672898,9.268165,-2.082253,3.164247,-2.134027,-1.758720,-6.671879,-9.668653,-9.062522,-9.420542,4.876641,0.932860,-5.011834,-3.303612,-1.398299,9.190998,8.244788,-1.783534,8.535710,7.628170,6.418301,9.542683,4.898206,1.107838,1.205455,1.075820,-4.465542,-0.789477,-1.322204,8.696477,-6.475011,1.797433,4.879191,3.611854,6.081656,7.908759,0.298169,-9.696225,-6.979389,-5.604713,-6.241460,-6.096238,-6.222116,7.605957,1.732438]], dtype = "float64")#candidate|443|(1, 450)|const|float64
call_442 = relay.TupleGetItem(func_420_call(relay.reshape(const_443.astype('float64'), [15, 10, 3])), 1)
call_444 = relay.TupleGetItem(func_422_call(relay.reshape(const_443.astype('float64'), [15, 10, 3])), 1)
var_446 = relay.var("var_446", dtype = "float32", shape = (13,))#candidate|446|(13,)|var|float32
bop_447 = relay.maximum(call_442.astype('uint32'), relay.reshape(var_446.astype('uint32'), relay.shape_of(call_442))) # shape=(13,)
bop_450 = relay.maximum(call_444.astype('uint32'), relay.reshape(var_446.astype('uint32'), relay.shape_of(call_444))) # shape=(13,)
bop_458 = relay.logical_and(call_442.astype('bool'), relay.reshape(bop_447.astype('bool'), relay.shape_of(call_442))) # shape=(13,)
bop_461 = relay.logical_and(call_444.astype('bool'), relay.reshape(bop_450.astype('bool'), relay.shape_of(call_444))) # shape=(13,)
output = relay.Tuple([bop_437,const_443,bop_458,])
output2 = relay.Tuple([bop_437,const_443,bop_461,])
func_465 = relay.Function([var_431,var_446,], output)
mod['func_465'] = func_465
mod = relay.transform.InferType()(mod)
var_466 = relay.var("var_466", dtype = "int16", shape = (6,))#candidate|466|(6,)|var|int16
var_467 = relay.var("var_467", dtype = "float32", shape = (13,))#candidate|467|(13,)|var|float32
output = func_465(var_466,var_467,)
func_468 = relay.Function([var_466,var_467,], output)
mutated_mod['func_468'] = func_468
mutated_mod = relay.transform.InferType()(mutated_mod)
var_470 = relay.var("var_470", dtype = "float64", shape = ())#candidate|470|()|var|float64
var_471 = relay.var("var_471", dtype = "float64", shape = (11, 11, 6))#candidate|471|(11, 11, 6)|var|float64
bop_472 = relay.floor_divide(var_470.astype('float64'), var_471.astype('float64')) # shape=(11, 11, 6)
const_476 = relay.const([[[2.914230,6.799443,-5.787494,-2.498196,-3.495474,9.139345],[3.068740,-0.717092,-0.947243,8.838340,9.723405,7.687201],[0.959570,-2.811606,3.863916,-3.535310,-7.736687,-3.203961],[-2.112619,-0.617291,6.014554,-6.257968,7.695621,1.460499],[-4.352155,-8.046116,4.492139,-3.014554,9.961486,9.424056],[-0.248944,5.414918,8.661278,5.951809,5.791183,-3.251514],[-1.917651,6.087239,0.543578,6.130915,6.948848,-4.439181],[7.475710,-5.741588,4.810234,-5.444130,8.428520,-3.733058],[6.515237,-2.623746,-7.022925,5.759112,-8.454629,-4.290831],[0.615324,2.307076,6.115398,7.640819,7.935863,-0.406775],[2.801521,-7.891113,-3.294521,5.993438,2.159399,-2.007368]],[[5.318858,-6.114052,-4.512730,6.829861,-2.815806,7.757026],[-4.410509,-6.365583,-7.429565,-2.347903,0.555244,-4.189935],[-6.598913,4.477302,-2.796945,0.451301,2.330598,0.561796],[-1.781434,2.829069,7.306536,5.308017,3.992112,6.136676],[-2.741573,5.071324,3.859893,4.627002,-1.296118,3.471103],[6.105474,-2.619249,-7.450373,-4.441306,-6.089808,1.434400],[-1.608562,-4.622531,-8.590374,0.190221,6.369635,4.032924],[9.308714,-3.380410,0.591713,-1.152199,-3.662500,-8.645742],[-9.370204,-0.408403,-1.278641,-9.368358,-8.253282,3.735658],[0.726521,4.112008,4.690828,9.706110,6.417898,-9.018300],[6.768860,3.759797,1.670871,-9.778344,1.636941,2.458354]],[[-6.456487,-6.936967,-2.775533,4.765220,9.252964,-7.893517],[0.399767,4.062337,-9.600989,-1.910769,-7.810830,5.975005],[8.136879,0.677418,-6.706218,-6.519650,-7.347837,5.079420],[-2.899870,-8.836233,3.369701,1.723247,-7.537139,-9.682025],[-8.838952,-7.269346,-3.360675,5.432043,5.815203,-3.321561],[6.873952,-5.806819,-4.633659,-6.153387,1.809033,-1.191364],[3.684714,1.488243,-6.715310,-8.583245,-9.630088,6.201135],[4.813468,-0.705114,7.189400,-5.238018,-4.993511,-1.666555],[9.588062,6.625613,-0.521920,9.588103,8.032933,8.025150],[-4.915635,3.450590,9.810986,-8.721347,0.587447,2.454572],[9.131880,2.146995,8.677128,-1.900142,-1.575275,9.758252]],[[3.430713,-5.923480,0.213232,-8.520482,-9.681005,7.359948],[-5.683364,-0.301869,-6.720046,-1.135517,6.784908,5.768001],[-5.109599,3.814065,-8.558693,0.574285,-6.861518,-0.625485],[9.149060,7.266219,-0.828829,2.892772,-4.802031,-2.410240],[-0.165511,1.557141,-0.939802,-0.076962,-6.052714,4.878861],[-5.936347,7.897243,6.744982,-3.607323,-2.954343,-3.980121],[-7.474627,-5.977362,5.706992,-2.002288,4.876169,1.635491],[-2.283511,-7.313746,-3.854414,8.545576,-6.530584,4.994582],[2.820195,2.001160,1.525951,-3.430324,3.141918,1.086315],[-8.507448,-7.526069,7.748078,5.995382,3.354723,-9.941395],[-4.164910,-5.941120,-0.284776,-9.488995,-0.500427,-8.331950]],[[6.008879,5.005282,9.137789,1.275434,-9.694400,5.996606],[0.922738,-2.037758,3.318291,-1.962343,-8.261666,-2.073408],[-7.321274,-9.869687,-1.422773,5.636178,-5.205940,7.278669],[9.443286,0.443382,-7.233376,4.264738,4.727131,3.180981],[-7.484922,-4.220073,-2.632688,-6.211540,4.208575,4.155242],[7.849322,3.605307,-1.634026,7.327357,1.188030,3.914248],[0.411652,-1.818406,-2.206925,2.631985,0.440827,-2.275239],[1.768041,8.792259,4.213218,-6.450700,0.041790,-3.925410],[-7.088386,6.503327,-3.101845,-7.968090,9.940948,6.699357],[-3.193294,-8.145804,-5.930839,6.132945,1.400593,1.918696],[-9.511915,0.541489,0.712927,3.858376,1.665236,-6.798874]],[[8.603227,-6.182822,4.085104,5.023423,-2.196996,9.720213],[-6.062874,-9.004094,1.996644,-8.235523,-4.164164,7.261976],[-5.351893,2.180630,3.291777,3.459880,-0.728405,7.047892],[3.520010,9.536576,8.801538,4.208727,-5.578504,2.586214],[3.422885,9.490842,-7.548583,5.759284,1.027322,-8.332326],[-3.952322,7.339830,7.241820,-2.901573,5.308237,3.330410],[7.241466,-7.933721,-8.490844,1.662051,-1.994551,6.780660],[-1.506669,5.218570,-0.080793,-5.843297,6.470757,2.822677],[3.025346,-4.944127,-8.512645,6.628300,-0.230481,3.747715],[1.148597,-9.489992,5.848871,-9.778864,-9.820041,0.709162],[-7.864317,-1.508282,3.836340,-8.378786,2.892485,-6.079068]],[[-5.504434,1.782450,2.049218,-0.848793,-4.901927,-5.752292],[-1.569754,0.512408,-9.626939,6.160171,-7.313176,8.189252],[-1.334176,-5.459558,-6.305514,2.223788,-0.510618,0.181147],[2.796914,6.389133,-9.074045,5.317452,-8.875715,0.506047],[5.662742,5.758366,-7.386891,0.732258,5.542684,7.465227],[-5.965756,-2.562217,4.088148,8.739096,1.997442,-4.259333],[-9.607742,3.794784,-0.722084,-7.463212,1.500983,-4.141289],[-1.190115,-8.748505,8.663189,7.499338,-9.591728,5.111647],[2.703453,-4.528810,7.420618,-5.097207,-3.182059,-6.471568],[-1.155965,-9.880617,7.180377,-2.618596,4.021052,6.596608],[-6.834227,-0.649467,-8.549290,-3.317826,-6.602727,0.596067]],[[-0.464769,-2.723447,0.703413,3.703431,5.759096,3.565746],[-1.886497,-4.873635,4.830882,4.347885,-1.293537,-1.689533],[9.914037,-9.330461,-4.061439,4.030263,3.503345,2.056877],[-2.959571,-9.948644,6.481913,-7.896473,7.922245,6.317543],[-1.162910,-8.722012,-5.308069,-0.377044,-2.374725,-5.506716],[-3.400893,8.702333,2.914365,-4.192175,9.952014,8.424174],[-2.031526,2.379118,-8.121760,-1.711671,3.883540,3.948147],[-7.871114,2.420524,-2.893214,1.185596,1.430462,-2.969819],[4.638399,-4.199454,1.704019,4.742610,-8.915788,-8.587296],[8.551598,1.640676,5.306079,8.827679,-0.262564,-4.539139],[-3.968168,9.324976,-7.140298,-8.508849,-6.736258,6.798226]],[[-9.026977,-2.512882,0.965897,5.374676,6.388073,7.699011],[7.504650,-8.788338,5.411368,-4.691786,-8.623717,7.648391],[6.436313,4.131562,-5.092009,0.487330,8.373152,9.618904],[-5.973823,-5.330246,-8.584646,9.985552,-9.158990,7.909511],[-0.077937,7.968345,-8.166817,-1.520576,-3.788686,8.780832],[-7.994856,9.554530,-8.939866,-7.417396,7.555178,2.033072],[-2.814146,7.260930,-9.243719,-5.461427,-8.495589,-1.243190],[-2.162276,-4.653600,-5.904496,0.623578,-1.676409,-2.323989],[-1.921848,-7.868122,5.037322,5.377469,-9.335062,-3.869975],[1.870328,8.358601,-3.926097,-2.296125,-2.620459,9.857910],[5.441643,6.732418,9.557199,-6.563303,-6.072666,1.074895]],[[-3.698065,7.185924,4.384310,-4.942682,-3.470192,-1.781316],[7.389140,2.803330,2.903800,-0.271265,-3.288167,4.960569],[3.984347,2.238957,-2.803670,-7.720684,4.298705,8.136058],[0.650585,1.300522,5.146875,2.952622,9.828266,0.606205],[1.646985,7.292508,9.415596,-2.907043,-9.235278,8.497428],[-2.558286,-1.774684,3.497222,6.081983,2.371952,3.419752],[-8.608997,3.000942,3.402758,5.031050,-6.240744,-7.022379],[3.091257,-2.671943,-9.380832,-4.106195,7.609096,-9.077705],[-1.025110,-2.187160,3.715187,-7.568797,-7.555054,9.172850],[-2.458991,-8.781695,1.163148,1.581319,6.071628,-6.265978],[8.198918,2.726322,7.784928,9.766646,3.611450,0.697495]],[[1.936989,-6.405760,1.666898,-7.891450,-9.412618,-6.040557],[7.065027,-6.652657,-3.098351,5.504033,8.097511,-2.073962],[-9.390950,-9.684095,1.050031,-9.091648,-7.406266,-6.820085],[-4.791767,4.225140,-5.384867,-6.414615,6.767829,-8.479872],[-9.944223,7.762288,-8.953234,-8.439424,-2.221483,-3.856451],[2.756270,-1.754877,-9.564935,9.697765,8.360587,5.524604],[3.815229,-2.861606,1.814081,-4.749017,-8.079221,6.842578],[9.301520,2.741503,0.733879,-4.206095,2.714170,-6.411246],[5.961985,-5.893447,-1.115754,-0.478013,-9.830023,8.707717],[-7.806993,9.455358,2.733112,6.653411,-2.140081,-1.821104],[5.118096,-9.733486,-5.498383,-9.147173,1.430061,-6.855590]]], dtype = "float64")#candidate|476|(11, 11, 6)|const|float64
bop_477 = relay.greater(var_471.astype('bool'), relay.reshape(const_476.astype('bool'), relay.shape_of(var_471))) # shape=(11, 11, 6)
uop_480 = relay.exp(bop_477.astype('float64')) # shape=(11, 11, 6)
uop_482 = relay.acos(uop_480.astype('float32')) # shape=(11, 11, 6)
var_486 = relay.var("var_486", dtype = "float32", shape = (11, 11, 6))#candidate|486|(11, 11, 6)|var|float32
bop_487 = relay.bitwise_and(uop_482.astype('int64'), relay.reshape(var_486.astype('int64'), relay.shape_of(uop_482))) # shape=(11, 11, 6)
bop_490 = relay.logical_and(uop_480.astype('bool'), relay.reshape(bop_472.astype('bool'), relay.shape_of(uop_480))) # shape=(11, 11, 6)
uop_495 = relay.atan(bop_472.astype('float64')) # shape=(11, 11, 6)
uop_497 = relay.sin(bop_487.astype('float32')) # shape=(11, 11, 6)
bop_499 = relay.floor_divide(uop_497.astype('float32'), relay.reshape(bop_477.astype('float32'), relay.shape_of(uop_497))) # shape=(11, 11, 6)
bop_503 = relay.less_equal(var_486.astype('bool'), relay.reshape(uop_482.astype('bool'), relay.shape_of(var_486))) # shape=(11, 11, 6)
bop_506 = relay.subtract(bop_490.astype('uint64'), relay.reshape(uop_497.astype('uint64'), relay.shape_of(bop_490))) # shape=(11, 11, 6)
bop_510 = relay.logical_xor(bop_506.astype('int32'), relay.reshape(bop_503.astype('int32'), relay.shape_of(bop_506))) # shape=(11, 11, 6)
uop_513 = relay.sigmoid(uop_482.astype('float64')) # shape=(11, 11, 6)
bop_515 = relay.add(uop_482.astype('uint64'), relay.reshape(uop_480.astype('uint64'), relay.shape_of(uop_482))) # shape=(11, 11, 6)
uop_522 = relay.log10(uop_497.astype('float64')) # shape=(11, 11, 6)
var_524 = relay.var("var_524", dtype = "int64", shape = (11, 11, 6))#candidate|524|(11, 11, 6)|var|int64
bop_525 = relay.divide(bop_487.astype('float32'), relay.reshape(var_524.astype('float32'), relay.shape_of(bop_487))) # shape=(11, 11, 6)
var_530 = relay.var("var_530", dtype = "float64", shape = (11, 11, 6))#candidate|530|(11, 11, 6)|var|float64
bop_531 = relay.floor_divide(uop_522.astype('float32'), relay.reshape(var_530.astype('float32'), relay.shape_of(uop_522))) # shape=(11, 11, 6)
uop_535 = relay.sinh(bop_531.astype('float32')) # shape=(11, 11, 6)
uop_537 = relay.asin(bop_490.astype('float64')) # shape=(11, 11, 6)
output = relay.Tuple([uop_495,bop_499,bop_510,uop_513,bop_515,bop_525,uop_535,uop_537,])
output2 = relay.Tuple([uop_495,bop_499,bop_510,uop_513,bop_515,bop_525,uop_535,uop_537,])
func_539 = relay.Function([var_470,var_471,var_486,var_524,var_530,], output)
mod['func_539'] = func_539
mod = relay.transform.InferType()(mod)
mutated_mod['func_539'] = func_539
mutated_mod = relay.transform.InferType()(mutated_mod)
func_539_call = mutated_mod.get_global_var('func_539')
var_541 = relay.var("var_541", dtype = "float64", shape = ())#candidate|541|()|var|float64
var_542 = relay.var("var_542", dtype = "float64", shape = (11, 11, 6))#candidate|542|(11, 11, 6)|var|float64
var_543 = relay.var("var_543", dtype = "float32", shape = (11, 11, 6))#candidate|543|(11, 11, 6)|var|float32
var_544 = relay.var("var_544", dtype = "int64", shape = (11, 11, 6))#candidate|544|(11, 11, 6)|var|int64
var_545 = relay.var("var_545", dtype = "float64", shape = (11, 11, 6))#candidate|545|(11, 11, 6)|var|float64
call_540 = func_539_call(var_541,var_542,var_543,var_544,var_545,)
output = call_540
func_546 = relay.Function([var_541,var_542,var_543,var_544,var_545,], output)
mutated_mod['func_546'] = func_546
mutated_mod = relay.transform.InferType()(mutated_mod)
var_550 = relay.var("var_550", dtype = "float32", shape = (9, 3, 13))#candidate|550|(9, 3, 13)|var|float32
uop_551 = relay.erf(var_550.astype('float32')) # shape=(9, 3, 13)
bop_554 = relay.bitwise_xor(uop_551.astype('uint16'), relay.reshape(var_550.astype('uint16'), relay.shape_of(uop_551))) # shape=(9, 3, 13)
output = bop_554
output2 = bop_554
func_557 = relay.Function([var_550,], output)
mod['func_557'] = func_557
mod = relay.transform.InferType()(mod)
mutated_mod['func_557'] = func_557
mutated_mod = relay.transform.InferType()(mutated_mod)
var_558 = relay.var("var_558", dtype = "float32", shape = (9, 3, 13))#candidate|558|(9, 3, 13)|var|float32
func_557_call = mutated_mod.get_global_var('func_557')
call_559 = func_557_call(var_558)
output = call_559
func_560 = relay.Function([var_558], output)
mutated_mod['func_560'] = func_560
mutated_mod = relay.transform.InferType()(mutated_mod)
var_602 = relay.var("var_602", dtype = "float64", shape = (12,))#candidate|602|(12,)|var|float64
var_603 = relay.var("var_603", dtype = "float64", shape = (12,))#candidate|603|(12,)|var|float64
bop_604 = relay.divide(var_602.astype('float64'), relay.reshape(var_603.astype('float64'), relay.shape_of(var_602))) # shape=(12,)
output = relay.Tuple([bop_604,])
output2 = relay.Tuple([bop_604,])
func_607 = relay.Function([var_602,var_603,], output)
mod['func_607'] = func_607
mod = relay.transform.InferType()(mod)
mutated_mod['func_607'] = func_607
mutated_mod = relay.transform.InferType()(mutated_mod)
func_607_call = mutated_mod.get_global_var('func_607')
var_609 = relay.var("var_609", dtype = "float64", shape = (12,))#candidate|609|(12,)|var|float64
var_610 = relay.var("var_610", dtype = "float64", shape = (12,))#candidate|610|(12,)|var|float64
call_608 = func_607_call(var_609,var_610,)
output = call_608
func_611 = relay.Function([var_609,var_610,], output)
mutated_mod['func_611'] = func_611
mutated_mod = relay.transform.InferType()(mutated_mod)
var_613 = relay.var("var_613", dtype = "uint32", shape = (10, 12, 12))#candidate|613|(10, 12, 12)|var|uint32
var_614 = relay.var("var_614", dtype = "uint32", shape = (10, 12, 12))#candidate|614|(10, 12, 12)|var|uint32
bop_615 = relay.bitwise_or(var_613.astype('uint32'), relay.reshape(var_614.astype('uint32'), relay.shape_of(var_613))) # shape=(10, 12, 12)
uop_621 = relay.acosh(bop_615.astype('float64')) # shape=(10, 12, 12)
func_465_call = mod.get_global_var('func_465')
func_468_call = mutated_mod.get_global_var('func_468')
const_624 = relay.const([[1,4],[5,2],[-9,1]], dtype = "int16")#candidate|624|(3, 2)|const|int16
const_625 = relay.const([1.888357,-0.826924,2.092401,-4.094526,4.807760,-2.123994,1.960871,6.734369,-9.220004,1.257284,-4.159732,-8.499676,4.515136], dtype = "float32")#candidate|625|(13,)|const|float32
call_623 = relay.TupleGetItem(func_465_call(relay.reshape(const_624.astype('int16'), [6,]), relay.reshape(const_625.astype('float32'), [13,]), ), 0)
call_626 = relay.TupleGetItem(func_468_call(relay.reshape(const_624.astype('int16'), [6,]), relay.reshape(const_625.astype('float32'), [13,]), ), 0)
var_627 = relay.var("var_627", dtype = "float64", shape = (10, 12, 12))#candidate|627|(10, 12, 12)|var|float64
bop_628 = relay.less(uop_621.astype('bool'), relay.reshape(var_627.astype('bool'), relay.shape_of(uop_621))) # shape=(10, 12, 12)
const_631 = relay.const([[[True,False,False,True,True,False,True,False,False,False,False,True],[False,False,False,True,True,False,True,False,True,True,False,True],[False,True,False,False,False,True,False,False,False,True,True,True],[True,True,True,True,True,True,False,False,True,True,True,False],[True,False,False,False,True,True,True,False,False,False,False,True],[True,True,True,True,False,False,False,True,True,True,False,True],[False,False,True,True,True,False,True,False,False,False,True,False],[True,False,False,True,False,False,False,False,True,True,True,True],[False,False,False,True,True,False,False,False,True,True,True,False],[True,True,True,False,True,False,False,False,False,False,True,True],[False,False,True,False,True,False,True,True,False,False,True,False],[False,True,False,True,True,True,False,False,False,True,False,True]],[[True,False,True,True,False,True,False,True,True,True,True,False],[False,False,False,False,False,True,False,True,False,False,False,True],[False,False,False,False,True,False,False,False,True,True,False,True],[False,False,False,True,False,True,False,False,False,False,False,False],[True,True,True,True,True,False,True,True,False,True,False,False],[True,False,False,False,True,False,False,False,True,False,True,True],[False,True,True,False,True,True,False,False,False,False,False,False],[False,True,True,False,False,True,False,True,True,True,False,True],[True,False,True,False,False,False,True,False,False,False,False,True],[False,True,False,False,True,False,False,True,True,False,True,True],[True,False,False,True,True,False,False,False,False,True,True,True],[True,False,True,True,True,False,True,True,True,True,True,False]],[[True,False,True,False,False,False,True,True,False,True,False,True],[False,False,False,False,True,True,True,True,True,True,False,False],[True,True,True,False,False,True,False,True,True,True,True,True],[True,False,False,False,False,True,True,False,True,True,False,True],[False,False,False,False,True,False,False,False,False,False,False,False],[True,False,False,False,True,True,True,False,False,True,False,False],[False,False,False,False,True,False,True,False,False,True,False,True],[True,False,True,True,False,True,False,True,True,False,True,False],[True,False,True,True,False,True,True,False,True,True,False,True],[False,True,True,False,False,True,False,False,True,True,True,False],[True,True,True,False,True,True,True,True,True,False,False,True],[True,False,False,True,True,False,False,True,False,True,False,False]],[[False,False,False,True,True,False,True,False,True,True,True,True],[False,False,False,True,False,False,True,True,False,True,False,False],[True,False,True,True,True,True,False,True,True,False,True,True],[False,False,True,False,True,False,True,True,False,True,True,False],[True,False,False,False,True,False,False,False,True,True,False,False],[True,False,False,False,False,True,True,True,True,True,True,True],[True,False,False,False,True,True,False,False,True,False,False,False],[True,False,True,False,False,True,False,True,True,False,True,True],[True,True,False,True,False,True,False,True,True,False,True,False],[False,False,True,True,False,True,False,True,False,True,True,False],[False,False,True,True,False,False,False,False,True,True,True,True],[False,True,True,False,True,False,False,True,False,True,True,True]],[[True,True,False,True,False,False,True,False,False,False,True,False],[False,True,False,False,False,True,True,True,False,False,True,False],[True,True,True,True,True,False,False,False,True,True,True,True],[True,False,True,True,False,False,True,False,False,False,False,False],[True,False,True,False,False,False,False,True,False,True,True,True],[False,True,True,True,False,False,True,True,False,False,False,False],[True,False,False,True,False,True,True,True,True,True,True,True],[True,True,True,True,True,False,False,True,True,True,False,False],[True,True,True,True,False,False,True,True,False,False,False,False],[True,True,True,False,False,True,True,False,False,False,True,True],[False,False,False,False,True,True,False,True,False,True,False,False],[True,False,True,True,False,True,True,True,True,True,True,True]],[[False,False,True,False,True,True,False,True,True,False,True,False],[True,True,True,False,True,False,False,False,False,False,False,False],[True,True,True,False,False,False,False,False,False,True,True,True],[False,True,True,True,True,False,False,True,False,True,True,True],[True,True,True,True,True,True,True,True,True,False,True,True],[False,True,False,True,True,True,False,True,False,True,True,True],[False,True,False,False,False,True,True,False,True,False,True,False],[False,True,True,True,True,True,False,False,False,False,True,True],[True,True,True,True,True,False,True,True,True,True,True,True],[True,False,True,False,False,True,False,False,False,False,True,True],[True,False,True,True,False,False,True,False,False,False,True,True],[False,False,False,True,False,True,False,True,True,False,True,True]],[[True,True,False,True,True,True,False,False,True,False,False,False],[False,True,False,False,True,True,True,True,False,True,False,False],[False,False,True,True,False,False,True,True,True,True,False,True],[False,True,True,False,True,True,False,True,False,False,False,True],[True,True,False,True,True,False,True,True,True,False,True,True],[False,False,True,False,True,True,True,True,False,False,True,True],[False,True,True,False,True,True,False,True,False,False,False,True],[True,False,True,False,False,False,True,True,False,False,True,True],[False,False,False,False,False,False,False,False,True,True,True,True],[False,True,False,False,True,False,False,False,False,True,False,True],[True,False,False,True,False,True,False,False,True,False,True,True],[False,True,False,False,False,True,True,False,False,True,False,True]],[[True,False,False,False,True,False,True,False,False,True,True,True],[False,True,True,True,False,False,False,False,True,False,False,True],[True,True,True,True,False,False,True,False,False,True,False,False],[True,True,False,False,False,False,True,False,True,False,True,True],[True,True,False,False,False,False,False,True,False,True,True,False],[True,False,False,False,True,False,False,False,True,False,False,True],[False,True,True,False,False,False,True,True,False,True,True,False],[False,True,True,False,True,False,False,False,False,True,False,True],[True,False,False,True,True,False,False,True,False,False,True,False],[False,True,True,False,False,False,False,False,False,False,False,True],[False,True,True,True,False,False,False,True,False,False,False,True],[True,True,True,True,True,False,True,True,True,False,False,False]],[[False,False,False,False,False,True,True,True,False,True,False,False],[True,False,True,True,True,False,True,False,True,False,True,False],[False,False,True,False,False,True,False,False,False,False,True,False],[True,False,True,True,True,True,True,False,False,True,False,True],[True,True,True,False,True,False,False,True,False,True,True,False],[True,True,False,True,False,True,True,True,False,True,True,True],[False,False,False,False,True,False,True,False,True,False,False,False],[False,False,True,False,False,True,False,True,False,True,False,False],[False,True,False,False,False,True,False,True,True,False,True,True],[False,True,True,True,True,False,True,False,False,False,False,False],[True,True,True,False,False,True,False,False,True,False,True,True],[True,True,False,True,True,False,False,True,True,True,False,False]],[[True,True,False,False,True,True,False,True,False,False,True,False],[True,True,False,False,False,True,False,True,False,False,False,True],[False,False,False,True,False,False,False,True,True,False,True,True],[True,False,False,True,False,True,True,True,False,False,False,False],[True,False,False,False,False,False,True,True,True,False,False,True],[False,False,False,False,True,False,True,False,False,True,False,False],[False,True,True,False,True,True,True,True,True,True,True,False],[True,False,True,False,False,True,True,True,False,False,True,True],[False,False,True,False,True,True,False,True,True,True,True,False],[True,False,True,False,True,False,False,True,True,True,True,True],[True,True,False,True,True,True,False,True,True,True,True,False],[True,True,True,False,False,True,False,True,True,False,False,True]]], dtype = "bool")#candidate|631|(10, 12, 12)|const|bool
bop_632 = relay.not_equal(bop_628.astype('bool'), relay.reshape(const_631.astype('bool'), relay.shape_of(bop_628))) # shape=(10, 12, 12)
bop_636 = relay.greater_equal(bop_628.astype('bool'), relay.reshape(uop_621.astype('bool'), relay.shape_of(bop_628))) # shape=(10, 12, 12)
var_639 = relay.var("var_639", dtype = "bool", shape = (10, 12, 12))#candidate|639|(10, 12, 12)|var|bool
bop_640 = relay.logical_xor(bop_628.astype('int8'), relay.reshape(var_639.astype('int8'), relay.shape_of(bop_628))) # shape=(10, 12, 12)
output = relay.Tuple([call_623,const_624,const_625,bop_632,bop_636,bop_640,])
output2 = relay.Tuple([call_626,const_624,const_625,bop_632,bop_636,bop_640,])
F = relay.Function([var_613,var_614,var_627,var_639,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_613,var_614,var_627,var_639,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_613= np.array([[[9,-3,-6,-5,2,-1,6,-10,4,1,6,2],[9,-6,4,5,7,6,-10,8,-3,-7,-10,3],[10,5,5,4,5,-10,-7,2,3,-7,-3,5],[5,-4,-10,9,8,-3,-3,8,8,-9,-3,9],[1,10,-3,9,-10,5,7,-7,-9,-1,-9,10],[-6,-4,-2,-6,-1,8,-5,5,9,3,-3,-2],[-3,5,-1,-1,6,6,8,-10,10,6,4,-9],[1,-8,4,-5,4,-9,6,9,-5,1,-7,-6],[-8,10,-4,-4,5,-7,3,-6,-3,1,-6,5],[-5,7,-5,9,-5,-5,2,-4,-1,-3,-5,1],[-5,1,-3,5,3,2,-6,3,-1,-2,8,-7],[-9,3,-3,-5,-7,2,-5,9,-2,5,-1,-1]],[[7,-5,-3,3,-7,9,-1,8,3,5,8,5],[5,10,-6,-8,8,7,-6,-5,-5,2,-9,3],[2,-1,3,2,5,4,3,-4,5,-2,2,-5],[10,-4,-10,2,-6,-2,-8,-7,-4,-4,-2,8],[2,2,7,-2,7,-5,-4,6,-1,-6,-3,-10],[3,6,2,5,-3,-7,-6,-7,-4,7,1,-7],[2,-9,-6,1,-3,-7,10,9,10,-4,-5,-9],[-5,-9,10,1,9,6,-1,7,2,8,-7,-5],[-3,5,-2,-8,-9,-5,3,10,6,-7,10,10],[7,6,-7,3,2,1,-10,-10,6,-7,-9,-10],[2,-3,-9,-4,3,10,-1,-3,1,-6,10,2],[-9,-6,-8,5,-2,-2,-1,7,6,-3,2,-9]],[[-9,4,1,7,4,8,2,2,10,-6,10,-5],[3,-5,-4,-8,1,4,5,-10,7,-5,-9,-4],[10,-10,-5,9,2,5,-8,1,-4,-1,-8,-9],[9,5,-2,-9,-9,5,5,-6,-7,5,3,-7],[2,-7,7,5,-2,5,9,6,-4,-4,4,6],[-10,-9,6,1,1,10,3,-5,-6,-9,-4,-3],[-6,5,-8,3,1,-2,-5,-7,-10,-6,2,10],[-2,3,5,-2,4,3,10,9,-8,-8,-3,-1],[2,7,-9,-10,-7,-6,-8,5,8,3,4,7],[10,-6,10,7,7,6,1,6,10,10,2,1],[3,-8,-5,-10,-2,-9,6,-4,7,8,7,-6],[5,4,-1,-7,-8,-1,10,7,10,4,-1,-8]],[[10,8,9,4,-10,-1,-5,5,-3,-6,8,7],[-9,-1,-9,1,-4,-9,-3,-6,3,-5,-8,-2],[7,-8,-1,-10,-3,-1,1,-6,-10,-7,-9,-5],[-10,1,-1,3,-10,2,3,2,-4,-2,4,9],[4,7,6,-6,-4,-8,-9,-4,1,8,7,-2],[2,5,4,10,-9,1,-8,-6,3,7,5,9],[-7,-10,9,-7,-9,-7,-8,3,3,-5,-3,3],[-4,-8,-4,-5,-5,7,-6,-5,7,-8,-8,-4],[-6,-1,-1,3,-7,-4,-9,3,-3,-8,-3,4],[4,8,-4,2,-3,-7,9,2,2,-6,7,6],[10,-9,-6,4,6,3,-6,1,8,-6,9,-3],[-3,3,10,8,-3,2,1,-1,-10,10,-9,-5]],[[-9,6,-8,1,9,1,-3,-9,9,6,-9,-8],[3,-7,9,1,-5,-7,7,-4,2,-8,-8,9],[-10,7,4,-10,-3,1,-9,1,-9,-6,-4,5],[-10,1,1,3,-7,-3,-4,-9,-10,-1,1,4],[8,-10,-2,10,-9,-10,-3,4,-1,-2,-9,-4],[-1,1,-6,-4,7,-1,-9,1,-4,-8,3,-10],[8,1,-2,8,1,5,-4,-4,-5,2,-7,-3],[5,9,-1,2,10,-9,-8,8,-8,-9,-6,-5],[-9,6,-9,7,8,2,7,-1,7,1,-6,-7],[4,9,8,-10,9,2,-4,-2,7,4,-7,-10],[6,10,-2,8,-2,5,-1,8,10,-9,-9,7],[-4,9,-9,-8,10,-8,-4,8,5,7,-6,-5]],[[-4,-3,5,10,-2,-3,-8,5,-8,10,-1,-7],[10,10,10,6,-10,-9,-8,4,-8,2,-5,-5],[2,-4,-4,9,8,1,7,-10,-6,-9,9,-6],[-10,4,5,-10,-5,-2,-9,2,-2,-3,-10,-5],[-3,-1,-10,1,5,-5,5,9,-10,-8,6,4],[4,-9,2,1,10,8,-8,8,-4,-6,-8,8],[10,7,-7,3,10,-6,-6,8,8,4,4,-3],[-2,-9,6,8,-5,-1,8,4,6,10,4,5],[-5,1,-10,-10,-3,-5,-8,6,-10,6,3,-5],[9,-10,-5,-6,-4,10,1,-8,-8,-3,6,10],[8,-3,5,1,-5,-6,8,1,-8,7,10,4],[-8,4,10,-9,9,1,-2,-7,-3,-9,4,-2]],[[8,4,5,-6,8,-7,6,-7,8,9,10,8],[9,-6,-7,5,-10,-5,-8,-7,3,-3,10,5],[9,9,-10,-7,-8,1,-1,-1,7,7,-9,10],[-8,2,-4,-7,1,-2,-7,-9,2,-10,-8,6],[-9,9,-7,9,-3,-7,-5,7,2,-6,-10,4],[7,-7,-5,10,-5,-1,9,10,-8,-6,1,9],[-7,-4,2,-1,4,-3,10,-4,-4,7,-4,5],[6,-6,-7,2,-2,2,-8,10,-10,2,8,-5],[10,8,-1,-7,6,-3,10,8,-4,3,-3,4],[8,3,2,10,10,-8,-1,-5,10,-2,3,-2],[2,9,-10,9,8,6,2,4,4,-2,-8,-1],[-4,9,-3,-6,-6,-10,-7,6,5,-7,-8,8]],[[2,-6,-6,7,10,-1,8,-9,2,3,-2,-9],[1,-1,-5,-10,8,7,4,8,-1,10,4,-4],[-1,-10,-5,8,-2,-6,2,8,-3,6,9,3],[10,-1,-3,5,-1,-6,1,-2,-5,-4,6,6],[6,-9,7,7,5,4,-3,3,3,10,-3,10],[3,-6,-5,8,-6,6,-1,3,-1,6,-7,7],[8,5,-10,-3,9,1,2,5,8,-3,6,-5],[-4,-10,9,10,-5,-3,10,-9,3,-2,9,7],[9,-8,-8,2,3,-3,-3,4,-8,4,-10,6],[1,10,-5,1,9,-1,-2,10,-6,10,4,7],[10,9,-2,-3,2,7,2,-3,7,1,6,-5],[-2,4,-10,9,2,-7,-2,-1,6,4,-8,-1]],[[1,-4,-3,3,-5,-1,-8,2,8,-8,10,5],[-7,-5,5,10,8,-5,3,6,5,-1,-10,4],[-2,8,-2,-9,-3,-6,10,6,-7,9,-1,8],[-4,10,1,2,8,9,-5,9,-3,-6,-10,-1],[3,9,-6,-9,-7,2,5,-3,-4,-1,1,6],[-6,6,-5,4,-8,-4,-9,5,-4,-6,-3,-9],[1,7,-1,-7,7,4,-10,-2,1,-5,10,6],[8,-10,1,1,1,-8,-3,1,6,-2,4,-7],[9,-5,1,-3,-5,4,-4,10,3,8,-10,-3],[-4,5,8,-3,3,8,-9,-6,5,10,5,5],[-9,5,3,8,-5,-7,4,-2,8,-2,10,-1],[6,-2,-3,-10,-1,-2,2,-4,-2,10,1,-2]],[[1,-7,-9,-3,10,-9,-4,5,-3,2,8,4],[6,-5,-5,7,-10,6,3,-8,7,-7,-6,8],[1,9,-5,9,-7,8,9,10,10,-1,-7,5],[4,-7,-4,2,-5,5,3,9,8,6,7,-9],[3,-9,6,-4,-7,3,-6,-9,7,10,7,2],[1,5,3,4,-1,-6,-8,-9,1,-6,-8,-7],[8,5,-9,5,4,-7,-3,2,-3,-2,9,5],[7,7,8,-10,-3,6,-3,-3,8,-5,10,-6],[8,-5,-1,-6,-6,4,9,2,1,8,-8,1],[3,-8,5,-8,-2,-9,7,-9,-10,-9,-7,5],[-1,-1,5,5,-10,-1,-7,-8,-5,-9,-4,-7],[3,7,9,5,-4,8,-10,7,6,-5,-8,1]]], dtype='uint32')
module1.set_input('var_613', input_613)
input_614= np.array([[[1,8,-10,2,-5,3,-1,-3,-7,-6,2,9],[1,2,-8,-5,-6,-6,9,10,-9,7,3,6],[-9,-9,6,-2,1,-6,-8,9,3,-10,7,8],[5,9,5,8,-8,6,4,-10,-1,-5,5,-5],[-3,-5,-5,8,8,9,-3,-7,5,-6,3,-5],[2,5,6,-10,-5,9,5,3,7,7,9,2],[1,-5,5,1,10,7,-8,-4,9,4,-3,9],[6,-1,-4,-1,2,-9,5,-4,-8,2,-7,8],[10,-2,-8,4,-1,-3,7,-9,-1,7,10,3],[-2,1,-9,-7,-2,5,-4,-6,-3,9,2,-10],[8,-8,-9,-4,4,-4,8,-4,-2,10,10,-8],[-2,5,-5,-8,-4,-1,7,-6,3,-6,1,9]],[[10,9,5,3,4,-3,6,-2,-6,-5,-8,-4],[3,2,-1,-7,-2,9,4,5,3,-9,-9,-9],[-3,10,5,2,3,2,-9,-4,-7,-8,-6,-1],[1,8,-10,-7,-9,-6,-10,-2,4,-6,3,4],[5,-3,5,10,3,-7,4,7,8,10,4,10],[6,-1,-8,-10,-8,-3,-6,-2,2,-5,-3,10],[8,1,1,-9,9,-5,6,-1,-8,-9,9,5],[-1,8,5,-7,-9,2,-10,-7,1,-10,-7,3],[-5,-2,-4,-8,9,8,5,6,2,1,1,4],[2,-2,3,6,8,4,9,6,7,4,7,-5],[-2,-4,-6,6,10,-7,-3,-5,-3,2,3,1],[-10,-2,-5,-10,5,9,-2,-7,2,7,9,8]],[[-3,5,8,5,-1,7,-6,-2,-10,-2,7,-5],[5,8,-6,-7,5,-4,-6,-1,10,4,6,8],[-8,-8,-10,-7,9,-1,10,-3,-8,7,7,-2],[7,-2,-1,-1,-1,-5,4,-7,7,-7,4,1],[-8,-7,-8,2,4,-8,-6,-7,8,1,-3,-6],[-6,7,-4,3,9,-8,10,10,-6,2,-7,-3],[10,8,2,-6,-8,10,3,3,5,7,-3,-1],[7,-5,2,-3,1,8,7,2,8,7,-5,-3],[2,-8,-9,6,-4,-2,6,-1,-7,10,2,7],[-4,-1,-5,-1,-4,-3,-8,9,-9,-10,-6,-2],[1,-7,6,5,8,-8,2,-1,-8,9,3,-10],[1,-9,-3,2,-5,-7,2,-8,7,3,-7,6]],[[-9,1,-7,4,3,6,4,-7,6,-9,-5,-9],[5,4,6,-9,-8,-9,-3,4,-6,-9,-10,-3],[-2,9,9,2,1,10,-7,-4,-9,-2,6,8],[6,-6,6,7,10,-5,-3,7,-4,-1,3,-8],[8,7,-5,8,4,10,-1,-8,-4,-4,-4,10],[7,9,-1,-4,-6,-3,-6,4,2,10,2,6],[2,2,-10,-4,-8,-9,-1,-7,4,9,10,-1],[-9,8,10,-7,6,10,6,5,8,-2,-6,9],[-1,-3,-4,-5,-7,4,9,-2,5,-4,-8,6],[10,-9,8,-8,10,10,-6,-9,-8,-2,8,-5],[-8,3,-6,5,8,-4,-4,5,-4,8,-10,4],[-9,8,-10,10,1,-5,-4,-5,-4,1,3,-10]],[[3,-8,-6,-4,9,-2,-4,-7,10,2,-2,-8],[-7,-4,5,7,3,-2,10,-4,7,-7,2,5],[-8,4,5,-8,-1,3,8,5,-7,-10,2,-3],[-2,9,6,4,1,8,1,8,-8,-7,1,8],[10,3,2,10,-8,-7,-3,10,10,9,4,3],[-6,-8,6,-3,4,6,-3,9,7,8,9,-3],[-6,10,8,1,8,1,7,-8,-1,6,-3,7],[-3,10,-1,-10,-3,-8,-6,5,10,5,1,10],[-10,-7,-3,2,7,9,5,6,8,9,5,-7],[1,4,-5,-3,3,7,2,4,-3,9,2,6],[-1,3,10,-3,-2,-2,-3,4,-2,-4,2,6],[-2,-3,-2,4,5,-9,9,-5,-1,2,1,4]],[[8,-8,7,-8,-8,-5,10,-4,-9,10,-9,9],[-4,-5,-6,8,8,-6,1,6,-3,-2,10,-9],[-10,-7,8,8,6,6,-4,-7,10,9,-5,1],[-8,4,8,7,6,9,-1,-5,2,-10,-4,9],[10,5,5,-7,10,10,-5,-8,-2,-5,3,9],[-1,-2,-6,1,10,-3,-6,7,2,-6,6,-9],[2,-1,-4,-2,9,-4,-6,-3,4,1,-6,6],[6,4,9,-8,7,-7,10,-10,3,4,-8,6],[-2,-2,5,-6,-3,3,-6,-2,-10,6,8,9],[-9,-3,-1,-8,7,-3,1,5,4,3,-9,-2],[4,1,3,5,6,-8,-6,1,-10,10,-8,3],[-1,1,-3,-2,-1,1,4,6,2,8,10,-5]],[[-6,2,-10,-7,5,-2,10,-7,7,-7,-2,3],[-6,-5,-2,9,-5,-3,7,-5,-9,1,3,4],[-6,2,-3,3,8,8,-10,10,-9,10,5,8],[-4,-5,7,-6,-10,2,-5,-5,-4,-3,-1,10],[7,7,5,8,-6,-8,-4,-7,-3,8,-5,1],[7,4,6,-9,3,-9,-3,2,1,4,4,-10],[2,7,10,-7,-1,-4,-6,-1,10,9,-6,5],[-1,-3,-2,-4,-10,2,-6,-4,3,-5,2,7],[-6,5,7,1,9,-5,-6,3,-9,-3,-7,3],[6,6,3,-8,-2,-3,3,9,6,10,4,-8],[-2,7,10,9,7,4,9,-9,6,-9,5,-10],[-3,-5,-8,9,1,-9,-9,7,-2,-6,-4,3]],[[8,-9,-2,-4,-1,-4,-1,9,3,3,6,8],[2,10,-8,5,7,-8,5,7,-2,-7,6,-5],[3,2,9,-7,3,-6,-4,-8,-5,1,-2,-7],[1,-7,9,-7,1,2,-9,-10,10,-3,9,5],[-10,5,5,6,6,-3,5,-9,-9,-6,-2,1],[4,-6,5,-6,-8,-7,-3,-10,-4,3,-5,6],[3,-2,-8,-9,-7,3,8,7,8,-10,-4,-9],[-5,8,7,4,5,7,1,4,-10,-9,6,-4],[-7,7,-7,2,1,2,3,9,3,1,-1,1],[-2,2,4,2,4,-5,-6,-5,-6,-8,-4,-8],[3,3,4,9,-2,-4,1,-10,-5,-8,-3,-1],[-1,-9,-6,-3,10,-4,10,2,8,-10,2,-4]],[[6,-10,-4,-7,2,9,7,-6,8,1,7,9],[9,-4,9,8,7,-6,2,5,1,1,-6,3],[9,1,7,-3,9,-7,-3,-8,6,-3,-5,-2],[4,4,-10,-5,3,7,8,-8,5,-7,-4,-1],[7,9,-6,-10,-2,-4,1,1,7,-8,10,-2],[-3,5,2,-8,-4,2,-5,2,-5,2,-8,-4],[3,-10,7,-9,-10,10,2,10,-4,-8,5,8],[6,7,-3,9,-4,10,-10,4,5,4,1,-5],[-8,-3,3,-2,1,3,2,-3,-10,10,2,-1],[-9,6,9,-2,-2,-10,8,4,-3,5,-10,4],[1,-1,9,2,9,5,-9,4,3,6,6,-3],[8,6,8,7,3,4,2,-9,6,-8,2,6]],[[-8,9,4,-2,-1,8,8,1,-5,-5,-3,-7],[-6,-3,9,-6,-2,10,8,-8,-2,-10,-4,-2],[-6,-4,-9,7,8,-8,9,-1,-8,9,-4,-6],[-5,-7,-5,-8,5,-1,4,4,10,-6,-5,-4],[-9,10,1,-2,-10,7,-9,8,6,-2,7,-2],[-7,8,7,-6,2,-2,2,1,-4,-9,1,6],[-9,10,4,3,-10,7,10,4,1,-8,3,-7],[8,-7,-7,8,3,2,-8,3,5,-3,-3,-10],[4,-1,7,-3,6,-4,7,9,-8,9,7,3],[-10,-10,5,1,-7,-8,10,1,-3,1,7,-8],[-2,-10,-9,-10,1,-3,-9,8,7,-4,7,-3],[10,-8,5,-1,-5,5,-6,-2,-6,-3,-1,4]]], dtype='uint32')
module1.set_input('var_614', input_614)
input_627= np.array([[[7.783761,-9.341683,7.829325,5.151403,-9.187117,4.730184,-8.708559,2.975555,7.951055,-4.126816,4.971896,7.817741],[-4.775183,4.336446,-8.853026,-5.541952,6.600847,-5.399550,-4.021269,-3.860417,3.122358,0.214449,9.860326,-8.428918],[8.998225,-6.525565,1.633742,8.282566,5.632138,-7.531209,-4.687925,7.334322,6.343546,-1.629379,-0.882773,-9.265656],[-1.812383,8.863780,6.691867,-4.167607,-8.003199,4.320160,-5.988692,-7.042193,3.380448,0.656570,4.292850,9.342857],[-5.542655,6.473952,-1.042628,-4.118142,8.874870,6.029994,0.151777,4.941229,-3.195582,3.764303,-8.833808,-9.483081],[-2.397251,7.937060,4.097226,3.928836,-3.418496,-8.154135,-4.207677,8.344566,-2.086642,-0.590801,-4.997883,-9.429278],[-9.053813,2.151060,3.004540,6.193875,2.730427,3.368497,1.327387,-0.493153,2.632018,2.002137,4.071338,-4.351685],[1.050082,1.768243,-7.066369,-3.674751,9.205363,4.049446,6.269657,-6.679370,3.927038,1.660035,-3.692129,-8.924530],[-4.670070,-2.031031,-5.592585,-6.952279,9.707936,8.675198,9.751905,0.133254,0.537163,0.740926,4.452263,3.785136],[2.935503,6.903344,-2.821331,-5.638352,9.344948,-8.456509,9.924766,7.882939,-5.864750,-8.226443,-7.773017,-7.699807],[1.405801,3.791304,-0.593725,4.845791,4.994218,7.179057,2.125182,0.595509,-8.111651,-9.252423,-8.869316,2.589247],[3.255845,-2.234373,0.213413,7.261236,-0.306914,5.093116,-5.532560,-9.111290,5.428187,5.755004,4.321364,-6.540211]],[[1.204953,8.778145,-4.940919,-0.852858,8.939845,-8.539619,-6.511489,5.787864,-6.810757,3.970701,7.334440,-9.621184],[3.183537,1.695802,-0.714922,7.234597,1.691116,1.488736,7.989405,5.334741,-4.102394,7.039340,0.375314,3.906004],[6.778715,-2.618699,2.288999,1.742578,0.407589,7.112532,-4.497489,4.309066,-6.983231,-9.279795,-3.471846,-1.570982],[5.188642,1.675393,-0.942063,-6.332019,4.240969,-2.302664,5.575588,-2.649858,1.386902,4.565853,-6.821643,8.820412],[9.916911,-4.953578,7.322434,6.292614,-3.141261,2.726874,0.708618,-6.663182,1.763549,7.547285,-0.959984,5.016721],[-2.944166,-4.774013,6.736672,0.769082,9.499095,-2.951593,-8.299822,2.621289,6.935810,5.003722,-4.545557,5.271411],[-0.946627,-9.409699,-1.067665,-7.363630,-0.314435,2.584228,-0.481491,3.988957,-0.485015,-7.961694,7.936073,7.633457],[1.264148,5.829638,-9.986644,3.709071,-8.546412,-9.337152,2.455438,4.758254,3.787367,4.240518,7.711938,1.356522],[-7.788056,-1.362500,0.865244,-8.324815,-2.245768,-7.097251,2.927646,8.310319,1.835709,-8.542282,8.029749,7.917558],[7.915705,-1.362576,5.890312,-3.998057,-9.625290,4.476789,7.487070,-0.404038,3.595271,-4.662909,-9.723673,-0.376940],[6.278424,-2.429531,-4.845582,7.968451,-5.774691,-5.899283,2.560929,9.604768,3.514338,8.910809,4.160138,-4.205449],[-6.192743,5.415150,3.287982,5.503772,-3.213592,5.964410,3.107555,-7.347414,-4.798552,2.046932,-7.008333,0.726079]],[[5.385910,-1.727972,-5.835155,6.155534,9.139514,8.797715,1.370334,-2.513071,-6.864325,-9.101381,-1.388571,0.294278],[-6.029839,0.535685,-9.460378,-3.861278,3.833077,-1.518211,-0.258532,2.305340,-1.679661,-4.287225,4.203598,5.306592],[-4.318724,0.248519,4.780267,1.663894,1.823887,-7.384523,-4.065171,9.273133,9.425123,6.358259,1.044043,1.376166],[-2.581690,6.123984,-5.510383,9.292633,6.523566,-8.999481,-9.115634,-7.847911,-4.694743,3.337180,2.807192,-8.142076],[-3.294932,-8.620837,-3.404615,5.075971,2.820502,-6.978144,0.689860,-8.193793,-2.963133,0.213547,5.689758,-2.180212],[-7.728718,-7.452670,-1.747996,-8.666298,-2.814965,3.292006,5.778249,2.955226,1.804883,-9.774318,-7.133202,5.537381],[8.448633,3.591208,-6.145801,-1.565602,1.899091,6.085690,-1.090270,-3.036540,-1.333602,7.160138,-3.235046,0.999805],[3.288595,-6.039439,-5.232046,-0.183077,6.460825,-1.951792,-7.533647,-5.414173,9.580530,9.204335,-8.780139,9.625687],[2.812169,-5.365101,3.756685,-0.746783,9.561325,-6.450761,-3.846134,-5.590840,-2.145156,-0.122247,2.694392,-5.088212],[-4.736828,-1.861937,6.181296,5.094696,7.645840,-5.452351,2.671466,7.175231,-4.105591,5.625194,-0.498060,-8.866547],[-4.445198,2.274888,2.969867,6.398075,-8.253556,-7.917267,7.447041,-3.632629,9.349034,0.304033,9.533030,-3.635709],[6.569779,8.291336,9.516920,-0.396533,-7.903748,1.368528,-5.350527,3.875896,0.518329,-2.251868,4.296981,2.369197]],[[-9.855546,-8.841628,2.273182,4.892160,-1.799147,-5.393434,-4.994219,0.914238,6.975807,-3.707185,5.087229,-7.459581],[-3.118993,4.716141,3.064353,-7.217029,-5.309261,-8.435196,0.254310,-3.065251,-2.272016,6.682920,5.926800,5.368275],[-6.811775,-5.516872,5.860884,-0.426687,-2.005760,1.438005,-2.051407,3.010110,-3.849279,-8.695657,5.432112,7.421107],[4.200116,-6.903173,-4.461699,0.552802,1.737269,-0.898926,-9.842738,-3.055975,5.610862,1.512606,-9.981486,-1.365585],[-6.588222,-0.088306,7.011643,3.089513,8.188067,9.001101,4.985715,-3.052767,5.132265,5.380952,0.082782,-3.384969],[0.297549,-3.454143,-2.626209,6.757628,4.393722,-5.521190,2.789066,3.164284,6.641718,-1.530343,-7.677572,2.421697],[-8.111300,6.842018,8.704160,-1.652080,7.641577,-5.920554,1.750037,-6.189735,1.926788,3.210391,-6.020155,8.479037],[3.557779,-7.438535,-8.695662,6.942021,-3.332554,-5.880960,-6.442005,2.551739,7.147556,5.690510,7.762655,2.623761],[-6.782943,3.323699,-0.835282,-0.745499,8.181493,3.142267,6.577015,-8.224758,1.239965,0.129493,0.647767,-3.813498],[-3.001922,3.291816,9.318893,-1.306650,1.732424,0.048363,9.224969,5.476850,-8.615818,-3.435349,-1.373521,-4.065111],[-8.743642,6.582653,-5.284861,-3.493179,-6.880618,-2.079111,4.470402,9.891608,-5.306475,-8.695708,3.020068,-3.702134],[-4.238841,3.254016,1.600191,-4.480890,4.834329,3.285169,2.373320,-2.939973,2.192992,-9.769144,7.475832,2.649503]],[[-6.505047,8.343519,-2.912960,9.723710,4.452482,1.281110,-6.171658,-4.981834,8.570897,4.215347,4.898359,-1.779396],[-8.133470,7.739764,2.355185,-9.727391,-3.377125,6.716708,6.838117,9.405548,9.465904,-9.219913,1.101554,0.289390],[-5.905797,7.699773,-1.987372,5.337183,-3.453375,-7.577213,3.675056,9.826805,9.574747,-9.810299,-7.790865,5.238132],[-9.096462,2.359003,-6.841222,2.533329,-8.616828,-1.833871,-2.154195,1.827208,5.758774,-1.570880,-0.249438,-7.128259],[-5.922913,2.718303,4.065744,-2.665206,-5.714072,6.512710,-6.899819,7.096203,4.274088,7.842568,1.454993,8.882473],[3.474707,-8.496838,6.512589,8.247687,6.110026,-9.496132,3.677395,8.577438,1.548206,-5.829570,9.351351,-5.727147],[5.981781,-7.478236,-4.202303,6.539007,-1.064319,-6.780465,0.314547,1.787941,-0.330745,1.243057,3.276440,7.450969],[3.601960,-9.697315,0.102539,8.201903,2.515651,-1.924758,3.359281,1.760666,6.929386,-3.984526,6.481383,4.010317],[2.726324,7.603209,3.040155,0.146990,-8.710991,1.349931,-2.257965,-6.741399,2.845201,-9.330360,8.427988,-0.797687],[2.729322,0.071155,-4.105269,-5.888292,8.397068,-8.199300,-6.031524,1.992056,-1.218680,-3.190432,8.372874,-8.317798],[7.205607,-6.347894,-8.573420,1.988872,2.580974,-8.135763,-2.348154,3.560901,-5.912286,-8.745410,-8.194237,1.733889],[2.388664,7.010719,-1.815215,9.499756,-9.062347,-1.755439,-5.593928,-7.350073,-5.542212,3.950887,6.770389,-7.723851]],[[2.683781,-4.674762,-8.501897,-9.471168,-9.630785,1.706940,9.856184,-1.902741,-5.301458,-8.500214,2.437099,-6.418354],[4.947530,-7.675979,-6.517234,-1.760716,6.776258,7.124505,-7.128196,7.846671,-5.647802,8.679159,1.771076,2.597588],[6.542003,-6.277485,1.783547,-5.236644,5.775148,4.820894,-2.166312,8.574605,0.032409,1.937625,-5.989715,-7.047354],[1.784311,-6.421476,6.969146,-4.075643,5.196335,3.517590,8.881468,6.864131,-7.583175,9.894751,-1.751364,8.966613],[9.863961,9.955201,4.398780,-3.994511,7.169491,-0.381880,4.987073,2.133346,3.924639,6.858265,8.230604,2.287361],[0.805039,-6.694435,7.614485,3.088798,-1.988090,-9.845044,-2.407122,5.103499,7.121100,5.557927,-1.371125,2.372977],[2.717514,1.234231,4.593301,7.191666,7.380443,-0.834292,0.899906,3.479524,-2.287754,2.976078,1.900532,8.002165],[-3.237145,6.809033,1.166026,9.676713,2.471155,7.567308,9.815017,8.349811,-8.098526,-7.220371,-5.897312,-7.285612],[3.872109,8.082177,-2.966461,-4.699560,6.697087,2.804133,-5.382194,-4.964262,7.340288,3.241619,-7.013961,1.017133],[-2.263410,-8.545611,-8.319473,-8.595217,-8.485494,-5.352823,-6.535550,-6.264739,-2.590380,-6.892871,-3.287078,-8.048994],[1.275064,-1.522324,-5.329738,-1.978369,5.168404,0.881393,2.095687,-6.727563,-2.520706,-9.279651,7.552260,-0.980745],[7.767943,-9.878277,2.965814,0.535047,-8.043485,-3.307889,-5.165766,-1.126421,6.446603,5.988306,5.758411,4.263121]],[[-4.747521,-2.303964,-7.304607,0.898671,6.627294,6.390891,-4.464343,3.626747,-6.470235,9.537065,8.299022,4.993648],[-8.290382,1.823551,-6.850913,0.114449,5.105787,-3.777900,-7.272253,7.600853,5.838085,6.781903,9.613072,6.056868],[-7.068950,-6.696163,-9.841174,4.150273,-3.542245,-8.485427,5.024242,9.161141,8.958914,-7.240838,4.452439,1.862560],[-7.774240,-0.134364,-7.055598,0.848708,7.285163,-1.438797,4.399470,-1.999353,-9.371265,-2.765832,-3.392175,-4.198385],[0.625990,7.672910,-4.405816,-9.035394,1.671365,3.078856,-9.184214,9.696984,-9.035114,7.550345,4.333469,-9.391105],[-5.264130,6.230619,-7.534142,-9.087238,-2.762567,7.048168,-7.267381,6.424312,-7.595017,5.841389,5.792594,-7.126185],[-9.369033,-7.989852,9.541689,-2.942847,7.771140,-2.537510,5.079590,-0.023358,5.898139,7.729521,9.639568,2.503692],[3.831960,-3.083358,1.601761,-6.087901,-0.690868,5.691879,6.601615,9.963676,9.023455,4.837452,-4.711500,-4.778468],[2.544450,2.582904,-7.946857,-1.933598,-2.598674,8.655179,-7.394966,7.321438,-7.358706,-7.992759,-3.384565,-9.003815],[-6.897859,0.293717,9.538633,-5.372934,5.642679,1.354112,-5.217636,1.673592,-3.678021,1.602766,-3.536632,9.594192],[7.579221,2.156238,8.871922,-7.616925,0.959365,-9.519134,2.420331,3.393053,6.058345,1.794790,-9.168186,-4.373664],[1.129685,2.254462,-0.821243,-7.735758,5.872337,-9.736441,4.969549,-5.607589,-5.567162,-2.300044,0.454401,-4.659859]],[[-5.202907,-4.319351,-9.757660,-8.383541,-9.766196,9.596790,-2.149124,4.281891,5.076159,8.359505,-4.694569,0.979227],[-5.383596,-0.018223,0.187844,-0.205596,-3.114062,7.509191,0.915763,-6.000547,6.283756,4.906768,7.127655,2.160703],[-3.775465,-1.992285,-7.043437,3.791525,6.731169,-1.389553,-8.965465,-0.311420,-5.633384,4.130057,4.376534,8.284942],[2.623682,2.807157,7.357000,-2.457431,7.922973,-2.031217,-0.647079,-6.046023,-9.483465,4.059162,-9.529713,9.281454],[9.557305,-5.049999,0.561495,3.036883,-9.603305,3.741097,-5.928608,8.887648,-8.698197,5.667427,9.549626,-2.230144],[7.268796,-3.751885,-2.934421,-8.737810,-1.325851,-7.010470,-3.982421,8.003508,-0.781805,5.851010,-4.383640,-9.293788],[-7.835475,2.824706,-7.879841,1.728591,7.624657,3.277124,-1.262532,4.847306,-0.907571,-8.384898,-1.456580,-3.319064],[-4.890519,8.512845,-8.027630,-3.701456,6.575182,1.578056,4.490087,2.699953,-2.507402,-0.961697,-1.195106,-5.171215],[-4.690357,-0.403528,-5.367233,1.717331,-6.806504,6.054044,9.011695,3.701346,5.201551,-2.392491,-4.983903,-5.250238],[-5.303276,8.680226,-9.830315,9.224999,-4.384383,6.891981,-4.281640,9.386367,5.970722,-9.775656,-4.826024,-0.676321],[-1.551122,9.737365,-7.813717,1.759310,-5.657748,-8.583771,-3.412219,5.748339,6.652054,2.313882,-0.643754,-2.962282],[0.197531,-4.612286,-1.290221,-1.944296,6.048193,3.940536,0.100841,-5.726016,7.741473,-8.281112,-0.306589,-6.741579]],[[9.594585,-0.701025,4.177320,0.674171,8.460336,-5.806006,-5.629015,-6.797626,-9.335281,-7.802032,-3.923926,-9.144853],[8.732783,-8.622679,-3.996131,3.354853,-3.765125,1.466195,-1.494559,2.070974,-1.299574,9.795602,-5.133072,-2.205528],[-8.409586,-7.247388,7.555600,-5.605876,7.050376,9.547441,-4.458132,8.964798,-9.174572,-0.488266,-9.714482,-8.547080],[2.717267,2.583984,9.312950,7.974347,-3.655496,-1.486087,-3.918497,-9.634842,4.579067,7.812011,-8.380450,7.953581],[-1.880547,6.737657,7.506105,8.163323,-5.665255,-9.718448,3.154304,7.324302,5.884446,1.294652,-9.688345,8.018280],[2.523573,8.167410,-8.388257,-1.460167,-6.131590,1.882462,9.044614,3.592231,4.106240,6.264395,5.151638,5.348462],[9.761466,-4.438919,-1.539457,2.652280,-3.978012,-6.311541,3.195738,2.053970,-9.212859,2.770714,-1.851863,0.983233],[-4.011085,-7.427952,7.235758,-5.613458,-9.325197,7.425840,0.301927,3.511611,9.535830,-3.545210,-2.972108,4.685650],[-1.189808,4.054981,4.891863,-8.595663,0.031998,9.366249,-3.424362,1.199485,-3.729013,-5.900920,-8.162876,8.549497],[5.977814,-2.840810,-3.188540,-9.004158,3.039478,6.719322,0.126822,-0.677388,-2.446697,8.860489,-2.578941,4.471846],[6.191086,-7.031621,2.395040,-9.869961,2.387950,5.343494,-7.354557,-4.424264,3.469709,-3.140262,1.334524,6.809591],[-0.507605,9.808976,-5.162682,1.674626,-8.067402,9.047102,6.233412,-3.872179,-3.289228,-9.503594,0.574747,-1.421326]],[[-5.297097,4.534076,-3.883703,7.277165,-8.514226,6.628993,-6.914581,-5.825552,-3.807930,-1.867437,7.857757,-5.710551],[-4.365909,-9.074960,9.537886,-9.654487,9.275895,1.471001,7.889468,-9.366681,4.860760,-9.747731,-8.060072,-0.732189],[-7.429332,5.425090,8.879245,1.248591,-8.670627,-3.789961,1.068065,-5.378518,-7.129104,-2.023089,-0.588551,6.052517],[-2.636270,8.331434,5.367670,3.510743,1.850053,5.782735,-9.272274,-5.661983,0.472540,-9.405405,-1.694959,3.154532],[-3.875072,-8.537623,1.011939,8.302065,5.421225,-1.298549,-6.013442,-8.646413,-3.606573,1.243066,-8.476185,-7.982657],[-8.317904,-4.973671,1.361687,5.072910,4.077896,-2.065837,-0.240589,-2.218261,9.360545,-0.221328,-3.164426,2.834776],[-0.853304,7.253079,-9.041673,-3.135481,-4.771999,5.859717,5.634181,-2.805519,-1.004624,0.681042,-7.294372,-3.901438],[-8.141687,9.715246,1.733298,-2.607994,5.687451,5.303192,3.084322,-9.565270,-3.776716,5.627690,0.478058,1.375033],[-5.717705,-1.610325,-9.002022,-1.941715,1.123289,-4.751891,-2.690419,-9.248671,-5.950822,-4.714021,-3.072035,-5.011022],[-5.002724,-4.481827,8.112022,-1.490990,-8.761647,-6.233724,7.004452,5.829230,-9.398380,-0.526232,-6.996594,7.813674],[-7.096634,-0.310241,-7.305353,3.800140,-6.790018,-4.220220,9.197006,-3.210122,7.509484,6.433453,6.121011,8.231003],[-8.314482,4.588395,5.248628,9.701995,-5.222042,-5.849432,-3.097953,3.191638,2.767802,-2.666762,-5.802908,-3.957072]]], dtype='float64')
module1.set_input('var_627', input_627)
input_639= np.array([[[False,False,True,False,True,True,False,False,False,True,False,False],[True,True,True,True,True,True,False,False,True,False,False,False],[True,False,True,True,True,False,False,False,False,True,False,True],[False,False,True,True,True,False,True,False,True,False,False,False],[True,False,False,True,False,False,True,True,False,False,False,False],[True,False,False,True,True,False,True,False,False,False,True,True],[False,False,False,True,False,False,True,True,False,True,False,False],[False,False,True,False,False,True,False,True,True,False,True,False],[False,False,False,False,False,True,False,True,True,False,False,True],[False,False,True,False,True,True,False,True,True,True,False,False],[False,False,True,True,True,False,True,True,False,False,False,True],[True,False,False,True,False,False,False,False,False,True,False,False]],[[True,False,True,False,True,True,False,True,False,False,False,True],[False,True,False,True,True,False,False,True,False,False,False,False],[False,False,False,True,False,False,True,True,False,False,True,True],[False,False,False,False,False,False,True,False,False,True,True,True],[False,True,False,False,True,False,True,False,True,True,True,True],[False,False,False,False,False,True,False,False,True,False,False,True],[True,True,False,True,True,True,False,True,True,True,True,False],[True,False,False,False,False,True,True,False,True,True,False,False],[True,False,False,False,True,True,False,False,False,False,True,True],[True,True,False,False,False,False,True,False,False,True,False,False],[True,False,False,False,True,True,False,False,True,True,True,False],[False,True,False,False,True,True,False,False,True,False,True,True]],[[False,False,True,True,True,False,True,False,False,False,True,True],[True,True,False,False,False,True,True,False,False,True,True,True],[True,True,True,False,True,False,True,False,False,True,True,False],[True,False,False,True,False,True,False,True,True,False,False,True],[True,True,False,True,False,True,False,True,False,False,True,True],[False,True,True,True,False,False,True,True,True,True,False,True],[True,False,True,False,True,True,True,False,False,True,False,False],[False,False,False,False,False,True,False,True,False,True,False,False],[False,True,True,True,False,True,False,True,False,True,True,True],[False,True,True,False,False,True,True,True,False,True,True,False],[False,True,True,True,True,True,True,True,False,True,False,True],[False,False,False,False,False,False,True,False,True,True,True,True]],[[False,False,False,False,True,False,True,True,True,False,False,False],[False,False,True,False,True,True,True,True,False,False,False,False],[False,True,False,True,False,True,False,True,True,True,True,False],[True,False,False,False,True,False,True,True,False,False,True,True],[False,True,True,False,True,True,False,True,False,False,False,True],[False,False,False,True,True,True,False,False,False,False,True,True],[False,False,False,True,False,True,False,False,False,True,False,True],[False,False,False,True,True,False,False,True,True,False,False,False],[True,False,True,True,False,False,False,True,False,False,False,False],[False,False,True,False,False,True,False,False,False,False,True,True],[True,True,False,False,True,False,False,True,True,True,False,True],[True,True,False,True,True,False,False,True,True,True,False,True]],[[False,False,True,False,False,True,True,True,False,True,True,False],[False,False,True,True,True,True,False,True,False,True,False,False],[True,False,True,False,True,True,True,False,True,True,False,False],[False,False,True,False,True,True,False,True,True,True,False,False],[True,True,True,True,False,False,True,True,False,True,False,False],[False,True,False,False,False,False,False,False,False,True,True,False],[False,True,True,True,True,False,False,False,True,True,True,True],[True,True,False,False,False,False,False,False,False,False,False,False],[False,False,True,True,False,False,True,False,True,False,False,False],[False,False,False,True,True,False,False,True,True,True,True,True],[True,True,True,True,True,False,False,True,False,True,False,False],[True,True,True,False,False,True,True,False,True,True,False,False]],[[True,False,True,False,True,False,True,True,True,True,False,False],[True,False,False,True,True,False,False,False,False,True,True,False],[False,False,False,True,True,False,True,True,True,True,True,False],[True,True,True,True,False,False,True,True,False,True,False,False],[False,False,False,False,True,True,False,True,True,False,False,True],[True,False,False,False,True,True,False,False,False,False,True,False],[False,True,True,False,False,False,False,False,False,True,False,False],[False,False,True,False,True,False,True,False,False,True,False,True],[False,False,True,True,False,True,True,False,False,True,True,False],[True,True,True,True,False,True,True,True,False,True,True,True],[True,False,True,True,True,True,False,True,True,True,False,False],[False,False,False,False,True,True,True,False,True,False,True,True]],[[True,True,False,True,False,True,False,True,True,True,False,False],[False,False,False,False,True,False,False,False,False,False,False,True],[False,True,True,True,True,True,False,True,False,True,False,False],[False,True,True,False,False,True,False,True,True,False,True,False],[True,True,False,True,True,True,True,True,False,False,False,False],[True,True,True,True,False,True,True,False,False,False,False,True],[True,True,False,False,True,True,True,False,False,True,False,True],[False,True,True,True,True,True,True,True,False,False,False,False],[True,False,True,False,False,True,True,False,False,True,False,False],[False,True,False,False,True,False,True,True,True,False,False,True],[False,True,False,False,True,False,True,True,False,False,True,True],[True,False,True,False,True,True,False,True,True,False,True,False]],[[True,False,True,False,True,False,True,True,True,True,True,True],[False,False,False,False,False,True,True,False,True,False,False,False],[False,False,True,True,False,False,True,True,False,False,False,True],[False,True,False,False,True,False,True,True,False,True,True,True],[False,True,True,True,True,True,True,True,True,False,False,True],[False,True,True,False,False,True,False,False,False,False,False,True],[False,True,False,True,False,False,False,False,True,True,True,False],[False,False,False,True,False,False,False,False,False,True,True,False],[False,True,False,True,True,True,False,False,False,True,True,True],[True,True,True,False,False,True,False,False,True,False,True,False],[True,True,False,True,True,True,True,True,False,True,False,False],[False,True,False,True,False,True,False,True,False,True,True,False]],[[False,True,False,False,False,True,False,True,False,False,False,True],[False,True,True,False,False,True,False,True,False,False,False,False],[True,False,True,True,True,False,True,False,False,True,False,False],[False,False,True,True,False,True,False,False,False,True,True,False],[True,True,True,True,False,True,False,True,True,True,True,True],[False,False,True,False,False,True,False,False,True,True,True,True],[False,False,False,False,True,True,False,False,False,False,False,False],[True,False,False,True,True,True,False,True,True,True,True,True],[False,True,False,True,False,True,False,False,True,False,False,True],[True,True,True,False,True,True,False,False,True,False,True,True],[True,True,False,True,False,False,False,False,True,False,True,False],[False,False,False,True,False,True,False,False,False,False,False,True]],[[True,False,True,True,True,True,False,False,False,False,True,True],[False,False,True,False,False,True,False,False,True,False,False,True],[True,False,True,True,False,True,False,False,False,False,True,True],[True,True,True,True,True,True,False,False,True,False,False,True],[True,False,False,False,False,False,True,False,False,True,True,True],[False,False,True,False,False,False,True,True,True,True,False,False],[False,True,False,True,True,False,False,False,False,False,False,True],[False,True,True,True,False,False,False,True,False,True,True,False],[True,True,True,False,False,False,False,False,True,True,True,False],[True,True,False,False,False,False,True,False,True,False,True,False],[False,True,True,True,False,False,True,True,True,True,True,True],[True,False,True,False,True,False,False,False,False,False,False,False]]], dtype='bool')
module1.set_input('var_639', input_639)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_613, input_614, input_627, input_639, )
res3 = intrp3.evaluate()(input_613, input_614, input_627, input_639, )
res4 = intrp4.evaluate()(input_613, input_614, input_627, input_639, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
module5.set_input('var_613', input_613)
module5.set_input('var_614', input_614)
module5.set_input('var_627', input_627)
module5.set_input('var_639', input_639)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_613, input_614, input_627, input_639, )
res7 = intrp7.evaluate()(input_613, input_614, input_627, input_639, )
res8 = intrp8.evaluate()(input_613, input_614, input_627, input_639, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
module9.set_input('var_613', input_613)
module9.set_input('var_614', input_614)
module9.set_input('var_627', input_627)
module9.set_input('var_639', input_639)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_613, input_614, input_627, input_639, )
res11 = intrp11.evaluate()(input_613, input_614, input_627, input_639, )
res12 = intrp12.evaluate()(input_613, input_614, input_627, input_639, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
module13.set_input('var_613', input_613)
module13.set_input('var_614', input_614)
module13.set_input('var_627', input_627)
module13.set_input('var_639', input_639)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_613, input_614, input_627, input_639, )
res15 = intrp15.evaluate()(input_613, input_614, input_627, input_639, )
res16 = intrp16.evaluate()(input_613, input_614, input_627, input_639, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
module17.set_input('var_613', input_613)
module17.set_input('var_614', input_614)
module17.set_input('var_627', input_627)
module17.set_input('var_639', input_639)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_613, input_614, input_627, input_639, )
res19 = intrp19.evaluate()(input_613, input_614, input_627, input_639, )
res20 = intrp20.evaluate()(input_613, input_614, input_627, input_639, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
module21.set_input('var_613', input_613)
module21.set_input('var_614', input_614)
module21.set_input('var_627', input_627)
module21.set_input('var_639', input_639)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_613, input_614, input_627, input_639, )
res23 = intrp23.evaluate()(input_613, input_614, input_627, input_639, )
res24 = intrp24.evaluate()(input_613, input_614, input_627, input_639, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()

'''104: TVMFuncCall
103: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
102: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
101: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
100: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
99: tvm::transform::Pass::operator()(tvm::IRModule) const
98: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
97: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
96: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
95: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
94: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
93: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
92: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
91: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
90: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
89: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
88: _ZN3tvm5relay16MixedModeMutato
87: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
86: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
85: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
84: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
83: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
82: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
81: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
80: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
79: _ZN3tvm5relay16MixedModeMutato
78: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
77: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
76: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
75: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
74: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
73: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
72: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
71: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
70: tvm::transform::Pass::operator()(tvm::IRModule) const
69: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
68: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
67: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
66: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
65: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
64: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
63: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
62: _ZN3tvm5relay16MixedModeMutato
61: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
60: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
59: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
58: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
57: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
56: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
55: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
54: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
53: _ZN3tvm5relay16MixedModeMutato
52: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
51: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
50: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
49: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
48: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
46: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''