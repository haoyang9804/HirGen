import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_69 = relay.var("var_69", dtype = "float32", shape = (10, 10, 9))#candidate|69|(10, 10, 9)|var|float32
uop_70 = relay.atan(var_69.astype('float32')) # shape=(10, 10, 9)
output = relay.Tuple([uop_70,])
output2 = relay.Tuple([uop_70,])
func_73 = relay.Function([var_69,], output)
mod['func_73'] = func_73
mod = relay.transform.InferType()(mod)
mutated_mod['func_73'] = func_73
mutated_mod = relay.transform.InferType()(mutated_mod)
var_74 = relay.var("var_74", dtype = "float32", shape = (10, 10, 9))#candidate|74|(10, 10, 9)|var|float32
func_73_call = mutated_mod.get_global_var('func_73')
call_75 = func_73_call(var_74)
output = call_75
func_76 = relay.Function([var_74], output)
mutated_mod['func_76'] = func_76
mutated_mod = relay.transform.InferType()(mutated_mod)
var_83 = relay.var("var_83", dtype = "float32", shape = (3, 12, 7))#candidate|83|(3, 12, 7)|var|float32
uop_84 = relay.rsqrt(var_83.astype('float32')) # shape=(3, 12, 7)
func_73_call = mod.get_global_var('func_73')
func_76_call = mutated_mod.get_global_var('func_76')
var_87 = relay.var("var_87", dtype = "float32", shape = (900,))#candidate|87|(900,)|var|float32
call_86 = relay.TupleGetItem(func_73_call(relay.reshape(var_87.astype('float32'), [10, 10, 9])), 0)
call_88 = relay.TupleGetItem(func_76_call(relay.reshape(var_87.astype('float32'), [10, 10, 9])), 0)
uop_92 = relay.atan(uop_84.astype('float32')) # shape=(3, 12, 7)
const_95 = relay.const([[[3.582781,0.865772,8.233784,1.999521,-6.631320,-4.696372,-3.193318],[-3.511777,3.231565,-9.238014,-8.857109,8.664910,-6.067772,8.251563],[-8.802461,8.486442,1.737391,8.306490,-2.477707,-3.294853,7.584571],[5.293018,-7.923521,9.149136,-0.223229,-5.002944,1.459766,0.610193],[1.728002,-8.307733,3.927056,3.615914,-7.742514,-4.437228,6.813928],[-4.967800,2.561062,3.242370,3.430476,7.852435,-1.267897,-4.919791],[6.089263,0.960821,-0.247976,-6.871282,-2.776668,8.795562,-3.521190],[7.047205,-9.768356,3.430358,3.460401,-8.372792,5.655078,8.282095],[1.361778,-8.572944,8.405810,2.026436,4.783333,-6.173201,-7.646036],[-8.400080,0.841322,-6.014456,9.164932,1.211257,-9.832528,4.950386],[8.125753,2.082920,3.661288,1.163267,-6.860118,-7.939013,-9.973349],[5.548518,-1.615827,9.712267,9.950045,-3.392862,8.833254,6.549316]],[[0.499779,-0.751967,9.910666,3.877800,8.677783,-4.811092,-8.590536],[5.461946,3.627796,4.818374,-0.044553,4.857547,-6.735807,4.361594],[7.436929,-2.308204,0.523451,8.351452,-1.903277,5.281898,9.636727],[4.521013,0.062665,-8.799120,5.406836,-7.271529,-2.156537,8.415439],[3.287286,3.996062,-7.747604,5.916795,-8.858774,-5.089976,-4.559739],[-2.171590,7.827426,4.918962,-4.749175,3.863801,4.802599,7.592909],[2.281203,-2.024177,4.898406,5.331631,4.030228,-8.718571,9.723033],[9.270427,-5.474080,9.658306,7.494823,-9.587636,-0.427514,-3.350728],[-4.459262,-3.584043,-0.262836,-1.347885,-0.694946,3.157678,0.120547],[8.115298,5.382232,-6.591378,-0.354024,7.274444,-5.074432,6.119602],[-8.707608,-4.862992,0.892835,-2.439148,0.268340,-7.171574,4.757908],[-2.473886,1.464288,9.359551,-8.492644,-9.394362,-1.152056,-8.384923]],[[-2.662361,0.774524,7.331778,3.665731,-2.256740,3.289458,-3.035235],[3.425137,7.163256,-4.344239,3.472545,9.406890,4.047478,-7.062485],[-9.021712,-8.976391,-8.992813,1.787964,7.711274,0.320246,-5.466973],[-0.809946,-8.443785,-5.561964,6.010382,-1.837326,2.403653,-3.901853],[9.051385,-5.580542,3.776000,-9.359493,-2.170322,-5.713113,-9.536744],[-8.893865,-5.597714,-5.769050,-3.999572,-6.258848,7.512334,5.707148],[8.633450,-9.458691,-8.695039,-4.887607,3.450291,-2.755969,-9.078862],[-8.622464,-2.612017,8.010649,0.131438,4.238672,2.858028,4.735205],[-6.357240,6.976698,-1.279837,-0.991695,-3.831200,-1.460573,-8.458803],[9.152871,8.366963,7.685728,-2.942271,-0.005846,-1.632857,-6.843383],[-0.253623,6.896119,-1.212824,-1.669980,-6.376246,7.972461,1.210897],[-2.804625,-9.493789,-8.039842,6.468826,2.337826,-8.324246,6.399572]]], dtype = "float32")#candidate|95|(3, 12, 7)|const|float32
bop_96 = relay.subtract(uop_92.astype('float64'), relay.reshape(const_95.astype('float64'), relay.shape_of(uop_92))) # shape=(3, 12, 7)
uop_102 = relay.log10(uop_92.astype('float32')) # shape=(3, 12, 7)
bop_106 = relay.divide(bop_96.astype('float32'), relay.reshape(uop_92.astype('float32'), relay.shape_of(bop_96))) # shape=(3, 12, 7)
output = relay.Tuple([call_86,var_87,uop_102,bop_106,])
output2 = relay.Tuple([call_88,var_87,uop_102,bop_106,])
func_109 = relay.Function([var_83,var_87,], output)
mod['func_109'] = func_109
mod = relay.transform.InferType()(mod)
mutated_mod['func_109'] = func_109
mutated_mod = relay.transform.InferType()(mutated_mod)
func_109_call = mutated_mod.get_global_var('func_109')
var_111 = relay.var("var_111", dtype = "float32", shape = (3, 12, 7))#candidate|111|(3, 12, 7)|var|float32
var_112 = relay.var("var_112", dtype = "float32", shape = (900,))#candidate|112|(900,)|var|float32
call_110 = func_109_call(var_111,var_112,)
output = call_110
func_113 = relay.Function([var_111,var_112,], output)
mutated_mod['func_113'] = func_113
mutated_mod = relay.transform.InferType()(mutated_mod)
var_147 = relay.var("var_147", dtype = "uint16", shape = (2,))#candidate|147|(2,)|var|uint16
var_148 = relay.var("var_148", dtype = "uint16", shape = (2,))#candidate|148|(2,)|var|uint16
bop_149 = relay.equal(var_147.astype('bool'), relay.reshape(var_148.astype('bool'), relay.shape_of(var_147))) # shape=(2,)
uop_152 = relay.cosh(bop_149.astype('float32')) # shape=(2,)
output = relay.Tuple([uop_152,])
output2 = relay.Tuple([uop_152,])
func_157 = relay.Function([var_147,var_148,], output)
mod['func_157'] = func_157
mod = relay.transform.InferType()(mod)
var_158 = relay.var("var_158", dtype = "uint16", shape = (2,))#candidate|158|(2,)|var|uint16
var_159 = relay.var("var_159", dtype = "uint16", shape = (2,))#candidate|159|(2,)|var|uint16
output = func_157(var_158,var_159,)
func_160 = relay.Function([var_158,var_159,], output)
mutated_mod['func_160'] = func_160
mutated_mod = relay.transform.InferType()(mutated_mod)
var_195 = relay.var("var_195", dtype = "float64", shape = (2, 12))#candidate|195|(2, 12)|var|float64
uop_196 = relay.cosh(var_195.astype('float64')) # shape=(2, 12)
func_109_call = mod.get_global_var('func_109')
func_113_call = mutated_mod.get_global_var('func_113')
const_200 = relay.const([9.212588,-9.096999,6.941435,-8.357268,1.611178,5.833477,7.607430,7.615361,-7.507850,5.098120,-5.813124,1.541995,1.061762,-1.459036,9.635069,-0.158694,-7.139704,1.987609,6.110297,-7.149028,9.692236,1.187116,-2.615432,3.303106,-1.149489,1.380356,-5.475443,-8.161866,-1.567004,-6.174944,9.629658,-1.988378,-7.226743,9.449703,7.256461,-5.611669,0.410234,1.041268,-9.422482,7.692580,2.377343,6.681974,1.702934,-6.794296,-3.116126,0.991548,7.065972,3.160416,4.440243,-4.455120,-1.863626,5.661863,-3.650053,0.689288,3.452936,2.751748,-7.227112,-7.168270,3.242481,4.752690,-8.758319,9.151204,-7.066140,8.324924,1.339199,-7.835999,-3.602189,9.820797,8.933994,9.969187,3.149397,2.196382,2.692848,1.460644,-0.338206,-7.644116,2.756677,5.212612,9.145057,-0.011597,-8.450131,-2.550938,-2.011952,7.639684,8.822779,8.772652,3.444461,-3.777564,-0.209413,2.018611,-9.255578,9.246398,3.358970,9.152911,5.562359,7.819074,-0.544163,-7.979694,-2.929084,-3.636912,-1.534060,-5.194838,4.321221,-7.089701,7.700300,-5.301738,-9.431724,2.554424,-0.323032,-3.641272,-0.972106,1.567641,0.399509,-6.217637,5.210225,0.469173,-9.234535,-7.452793,-6.017265,2.113040,-8.526593,1.382646,-9.299947,0.847789,3.349286,-2.170645,8.516601,1.506361,-5.837715,-1.143301,-8.713870,9.473935,-8.711316,-4.109968,1.825305,-8.846875,-9.830265,-8.604860,-3.338003,2.171218,0.002719,-8.650049,-7.820101,7.349814,1.958112,-2.481234,-8.812108,-4.876151,2.324464,4.580320,-0.903436,1.830726,-9.980555,5.517780,7.472955,-1.131435,3.098765,8.885793,-9.343812,-3.302382,5.786642,-5.473853,-2.095449,-8.428560,6.491577,-4.997634,3.688603,-3.952992,6.477215,-5.493890,2.482545,0.718931,5.836251,-9.191593,-3.086612,4.214447,7.775305,5.520584,-9.697556,-3.697729,4.266091,-7.539190,-5.318642,-1.745552,-7.694397,-7.590541,-6.281753,-5.092489,-3.658166,9.668316,4.725225,-2.004677,-6.750411,2.110987,8.587971,8.746023,-0.497320,9.195749,-2.670227,1.991852,2.109450,-5.608827,7.268340,6.132789,9.841641,-3.191272,-5.977775,-9.219387,-2.332784,7.326838,0.039230,4.280246,-0.921581,-7.420806,-4.476767,-6.104072,6.584760,6.703611,9.602634,-3.356958,-7.783638,-5.844728,-1.263493,8.762191,-7.345818,-4.978733,0.531177,5.640783,6.110832,0.077286,8.635444,8.066422,-5.190572,-2.396550,8.783005,0.232778,0.690014,-3.034336,-9.709473,5.876243,3.429961,-2.639226,5.230890,-2.104878,7.011545,-1.849904,2.895574,4.057492,4.634110,-2.195078,-8.834110,-2.656698], dtype = "float32")#candidate|200|(252,)|const|float32
const_201 = relay.const([-1.348646,-5.612394,2.242944,0.895848,-4.917520,2.045438,3.935938,1.948766,0.060092,-2.970075,-8.802692,9.302846,-8.644402,-7.486076,2.883515,6.043513,-9.491078,0.337906,-3.240710,-4.569230,-9.521508,-1.220158,-1.966745,0.151827,-2.805472,-4.421836,-2.916871,-8.356405,4.549696,-4.519305,-5.559600,-6.455995,5.487585,-1.604696,-6.399270,-2.122183,-7.975961,-4.143958,-2.574469,-0.524737,-4.097192,2.809849,6.686049,6.434551,2.262307,3.082690,-8.576221,-1.064616,8.908049,2.427884,-0.972329,-8.780963,5.216207,4.900464,-4.406504,-8.488263,-3.978041,6.839988,7.455398,-0.509050,-6.969449,5.159028,0.543013,-3.294413,-8.641027,3.697226,-9.724782,-3.270443,-3.285143,5.509925,8.406851,3.517847,-0.753152,3.188569,-2.282023,-5.046359,7.004942,4.273230,8.127245,3.473460,4.676067,-2.569581,8.713306,1.437484,-8.747260,-4.050630,4.501951,7.473925,1.521910,9.650818,-9.299200,-3.293889,9.466385,5.577204,-2.949075,0.341413,3.528195,3.382609,-2.044125,-3.112326,5.487045,-8.220292,3.430173,-3.862190,2.790549,-5.519020,4.914337,8.995845,-6.411222,-4.663855,-1.994365,-7.053619,8.860322,-0.631315,9.242788,0.078468,5.576089,9.236011,9.535862,3.150346,5.479560,3.511572,5.104140,-7.330078,6.617294,-3.355923,-4.513740,0.900139,-1.175401,8.266654,-4.065974,-9.316439,-8.512345,-6.586008,-9.769764,-6.901411,8.935021,-9.524567,2.404755,-0.933889,4.206047,-9.356953,-0.716346,-9.504205,3.983577,-2.288787,-1.157882,2.550782,-6.736552,-8.710001,-5.352006,-8.658901,-8.716955,-4.049493,0.147311,-3.869699,6.880414,-9.261780,-0.055162,-8.009533,-4.233432,-3.523498,4.537997,-7.072500,2.258150,-2.844709,8.859692,-6.493436,-7.313000,4.073111,2.225011,-3.848256,-7.772995,-8.671423,8.616290,-7.496206,0.073635,-1.796224,4.857490,-9.037083,-2.141020,-0.057282,-4.955309,1.302956,4.562802,-3.429508,7.521108,5.636217,-3.463263,-0.548491,-0.938404,4.866913,2.737625,-3.880368,-0.031746,-8.657751,-3.353054,9.178632,3.390038,5.833875,6.244051,1.508577,-6.979056,9.663005,4.669931,5.459090,-3.115943,7.165170,-5.615237,-5.310571,4.630455,5.755742,4.330636,-9.323912,-1.254891,5.375850,3.272958,-6.248833,7.952355,-0.867629,5.697922,-3.274776,4.105116,-7.457101,-6.426041,-6.369554,0.577706,2.729556,-9.522832,9.057902,6.490249,4.819964,9.399267,-3.432247,9.113449,8.664489,-5.309574,-0.050788,-4.868515,-8.768986,-2.988827,-7.463305,-9.618695,-9.493331,8.720347,6.294783,8.993113,9.441702,-1.254364,4.689067,1.753661,2.497430,1.183445,1.744157,-5.228957,-4.011807,-1.400205,-8.720745,-5.545290,-5.057021,-4.141573,-9.617045,-5.996444,-3.543438,5.923056,-8.312547,4.158737,5.823745,9.545867,-3.143829,-3.448361,-7.442205,5.779206,1.281255,-1.055671,0.915711,-0.549006,-1.464223,6.927088,9.729264,-0.276097,7.265178,7.914943,-2.069736,2.970134,-4.995769,2.158540,7.748820,1.964455,-3.024470,-6.452221,-5.640985,4.852051,8.398569,-0.648775,-8.140621,-5.524152,-6.615852,-3.295729,-8.985591,7.821924,3.227244,-7.727356,8.870580,0.006078,0.885218,4.795652,-0.423598,-5.926809,2.858021,9.084630,9.558832,-6.200160,4.288096,9.714375,-7.308646,3.232534,0.319753,-8.428546,4.696838,7.492776,1.556434,7.160543,1.164832,1.477914,-4.382266,-5.472231,-4.493861,1.600294,8.419376,-1.407874,4.777356,2.475453,2.212556,7.812626,-5.376613,4.683629,1.791287,0.888091,-2.303825,4.033883,1.692521,-2.497537,-1.889254,-0.716647,-3.676419,-5.872949,-6.345088,3.662713,6.585020,-5.620107,5.040745,-8.565054,-5.147723,1.876621,-9.756988,2.563201,3.643147,-2.616096,3.588837,1.338495,5.202496,4.067379,-6.043731,0.591910,4.370629,4.655858,8.847701,0.680618,0.313429,-3.172307,-5.454173,-6.910834,6.409645,3.451602,5.653470,3.369738,-1.888023,-3.171213,9.754835,3.729450,3.997977,7.038970,-3.548807,3.197779,0.347540,2.457147,4.055420,4.539065,-4.259730,-0.243570,-4.976611,-2.005738,-8.368980,1.168951,-5.119514,0.330339,9.830100,-1.262163,9.813253,9.557279,5.319516,-3.970851,-3.107211,-3.666360,0.849948,-3.338772,-4.547540,-7.481000,7.140712,-5.248806,-9.074626,-7.267238,-5.430688,6.456618,-7.185813,-1.755747,-7.631959,-9.761829,1.785549,1.876334,1.361292,-6.210554,3.502984,9.004236,-4.445826,-2.801299,8.172900,-5.314857,-8.626636,9.885080,-1.495332,-8.204685,8.908051,-6.593979,4.047319,7.236262,9.065443,-4.843960,-1.994611,-0.678942,3.487707,-1.597073,0.901526,-3.801603,-2.122400,-7.341853,-9.836169,0.398208,5.732147,-5.808148,-7.960850,-1.601287,1.459656,-1.665944,-0.804469,-3.520551,7.281694,-3.335300,4.556908,-6.898487,-2.628564,-2.168349,-2.032603,-6.268195,4.592794,-6.212899,-8.536191,-8.741206,-4.598785,-7.973035,4.946229,-6.935921,2.632116,8.025484,-2.955342,-2.266692,-5.322731,5.841443,0.952035,-0.440317,-1.916654,-4.118956,1.591248,-0.918110,2.543487,-2.298735,7.016740,8.774767,4.013782,6.557186,0.783994,4.749721,-2.409567,-7.926103,-5.923640,3.229481,1.529385,-3.650143,-3.269841,-0.536667,2.055184,-0.666900,-7.892120,3.374671,-0.395072,3.171499,-6.355820,7.234386,6.008564,-2.441659,-2.941815,-0.476275,2.919051,2.904606,0.424400,6.410127,-5.185421,4.539407,-7.276973,9.706715,7.461506,-6.249667,2.469949,-7.053848,2.982562,-6.711878,-2.417836,1.392947,8.020385,3.775902,4.309867,6.217983,-9.008921,-9.465960,5.792868,6.189399,-3.224623,8.365540,4.203759,-8.418536,-6.386051,0.954148,8.467893,0.428109,6.473678,5.203345,3.248987,-4.641517,1.237491,-7.860222,-0.760947,2.552602,4.368572,-9.951998,-1.609581,1.658108,-1.933871,-2.272867,-7.597973,-6.757286,-7.209837,-2.716250,3.163271,-8.865726,6.752522,5.168252,-7.659529,-5.833501,6.375640,0.704707,8.028902,0.598983,8.165633,1.596860,0.720506,6.797054,7.179160,9.686954,-7.119350,5.966587,2.180882,-4.836769,6.137952,5.329621,9.067920,-1.972242,-9.369529,-5.002410,7.289496,5.715292,-0.346831,1.198844,-9.859635,-5.875029,-3.797610,-9.867450,-6.006397,9.930165,9.616051,0.929152,9.370264,7.774656,9.152877,5.542938,1.201753,2.047737,2.084715,4.415940,8.478138,3.449729,9.261762,0.167004,-4.171972,2.436637,-5.982338,-9.866876,-8.934301,6.258247,-3.985637,2.503255,3.637509,9.194551,8.730005,-3.928315,-7.928762,-7.071222,5.285885,2.069159,-8.154361,3.898054,2.094700,6.119159,6.503034,1.813995,2.983524,8.743409,5.116553,-9.110725,3.761734,-9.864745,-6.475688,6.139205,-6.066751,4.401943,8.460884,6.091100,-9.777029,-9.975537,1.844314,3.257494,-2.817159,4.083453,2.819585,-9.067626,-4.928783,-1.830709,1.391858,-0.045938,1.070513,7.984399,-4.279327,2.203772,2.744212,-3.536537,-1.860195,8.427499,-1.782879,-4.638329,-5.561242,-3.471416,1.198617,0.426293,-9.951025,2.402376,9.297112,-1.931817,3.350306,0.328935,-5.470828,-8.965495,8.324719,0.377610,-5.860622,-9.165734,0.197264,-0.873286,9.780833,7.682038,1.916162,3.251814,7.362060,6.555591,-9.906363,1.886003,-8.569472,0.118043,-8.163887,-3.054620,-8.224158,2.052655,3.517559,3.648331,-4.725364,4.076088,0.362141,-7.897360,-0.166788,1.298328,-2.078043,0.601486,-2.187605,5.623184,-6.777412,-3.887931,-0.176081,-3.554792,9.983191,-9.080576,-9.073706,0.124561,7.618234,9.082884,8.981531,-5.692042,4.569181,7.349012,-4.256247,-1.625729,-5.218093,4.924826,1.592587,-3.750993,9.950488,-8.294087,-0.480203,7.108845,5.949159,-5.760249,-9.418770,2.830433,-8.088111,3.864812,6.260408,2.059615,-8.462752,-2.518132,-1.017305,-5.545356,5.540339,-4.613314,4.813977,1.315744,-2.078224,3.664721,-5.654258,-4.493766,7.872635,8.727269,-8.884872,-0.591469,-3.336178,-4.916227,-8.025855,-9.272968,7.475542,1.443385,8.527273,0.426990,-3.953802,-9.136375,2.777217,-6.537439,-2.259377,8.332266,-1.587904,-6.644494,-1.859938,-7.987178,2.843244,7.334573,1.017358,8.248858,4.208382,-4.749530,-2.374097,5.042505,3.353964,-1.758865,1.292993,-5.624808,-0.291551,-1.313671,2.115051,7.458473,-7.744125,3.702972,4.891244,-2.675638,-2.372929,7.489809,7.859401,-6.599648,-6.216554,-2.174190,2.813313,7.449660,4.120834,-0.470660,-6.355167,-9.675820,-9.783603,-8.037896,-6.928334,4.459433,1.232039,8.493939,4.374239,-8.358965,0.966627,4.960108,8.391222,-3.151923,0.289121,-5.578300,-2.701645,-1.024416,-2.147590,-8.508231,8.762923,0.183721,-3.981429,6.899422,3.102640,5.277031,-7.556995,0.963947,-0.917439,0.671515,-7.478045,8.223701,-0.278875,-5.082001,4.191446,4.122054,-5.906388,2.597287,-7.628343,-6.271529,-9.425552,-1.275509,-3.497263,1.330705,2.497909,-9.960239,-6.365430,-9.548081,0.085992,4.661694,0.576617,7.725520,-9.691340,2.272200,2.116029,-3.282270,8.449917,0.656734,-7.307907,-7.416041,9.432296,4.110045,9.132483,-7.680604,-3.934615,1.338712,-3.749971,9.922278,7.649431,6.697274,-2.433575,4.636887,-0.666448,-8.260339,8.024294,-8.175561,1.750275,-5.099886,0.254211,-9.834796,-3.092248,-1.000733,-7.455944,7.748533,-2.625275,7.905832,-6.575718,-3.010747,7.258096,5.816602,-9.261789], dtype = "float32")#candidate|201|(900,)|const|float32
call_199 = relay.TupleGetItem(func_109_call(relay.reshape(const_200.astype('float32'), [3, 12, 7]), relay.reshape(const_201.astype('float32'), [900,]), ), 0)
call_202 = relay.TupleGetItem(func_113_call(relay.reshape(const_200.astype('float32'), [3, 12, 7]), relay.reshape(const_201.astype('float32'), [900,]), ), 0)
bop_205 = relay.less_equal(uop_196.astype('bool'), relay.reshape(var_195.astype('bool'), relay.shape_of(uop_196))) # shape=(2, 12)
func_109_call = mod.get_global_var('func_109')
func_113_call = mutated_mod.get_global_var('func_113')
call_209 = relay.TupleGetItem(func_109_call(relay.reshape(const_200.astype('float32'), [3, 12, 7]), relay.reshape(const_201.astype('float32'), [900,]), ), 1)
call_210 = relay.TupleGetItem(func_113_call(relay.reshape(const_200.astype('float32'), [3, 12, 7]), relay.reshape(const_201.astype('float32'), [900,]), ), 1)
func_157_call = mod.get_global_var('func_157')
func_160_call = mutated_mod.get_global_var('func_160')
var_213 = relay.var("var_213", dtype = "uint16", shape = (2,))#candidate|213|(2,)|var|uint16
call_212 = relay.TupleGetItem(func_157_call(relay.reshape(var_213.astype('uint16'), [2,]), relay.reshape(var_213.astype('uint16'), [2,]), ), 0)
call_214 = relay.TupleGetItem(func_160_call(relay.reshape(var_213.astype('uint16'), [2,]), relay.reshape(var_213.astype('uint16'), [2,]), ), 0)
bop_219 = relay.multiply(uop_196.astype('uint32'), relay.reshape(bop_205.astype('uint32'), relay.shape_of(uop_196))) # shape=(2, 12)
bop_225 = relay.logical_xor(bop_219.astype('uint16'), relay.reshape(bop_205.astype('uint16'), relay.shape_of(bop_219))) # shape=(2, 12)
bop_229 = relay.greater_equal(bop_219.astype('bool'), relay.reshape(uop_196.astype('bool'), relay.shape_of(bop_219))) # shape=(2, 12)
output = relay.Tuple([call_199,const_200,const_201,call_209,call_212,var_213,bop_225,bop_229,])
output2 = relay.Tuple([call_202,const_200,const_201,call_210,call_214,var_213,bop_225,bop_229,])
func_232 = relay.Function([var_195,var_213,], output)
mod['func_232'] = func_232
mod = relay.transform.InferType()(mod)
var_233 = relay.var("var_233", dtype = "float64", shape = (2, 12))#candidate|233|(2, 12)|var|float64
var_234 = relay.var("var_234", dtype = "uint16", shape = (2,))#candidate|234|(2,)|var|uint16
output = func_232(var_233,var_234,)
func_235 = relay.Function([var_233,var_234,], output)
mutated_mod['func_235'] = func_235
mutated_mod = relay.transform.InferType()(mutated_mod)
const_317 = relay.const([[-4.904746,-8.645453,-7.321941,6.929374,6.377263,-9.694588,-5.212972,-7.019606,-2.532557],[-6.996364,3.400968,-1.938962,-9.197115,8.677644,-2.342684,9.084535,-0.087248,0.426597],[5.578436,9.044557,0.136707,3.187517,-8.961054,0.521862,9.265991,2.445400,-7.307111],[2.084661,-4.985644,7.651008,1.551028,6.041210,-4.796368,-4.820392,3.880799,-7.249242],[-6.979593,-8.788072,9.147867,5.726515,-1.583772,-9.901283,-8.780692,8.715830,-9.076840],[9.603107,9.153586,-1.112816,-9.988447,6.106892,-7.408637,-5.336936,-0.123234,7.059362],[-9.038260,-3.910259,9.580702,9.501722,-1.430855,-9.643636,4.019521,-3.436223,-9.816690],[-3.747523,6.594715,-7.706471,8.655893,-8.597749,-0.729993,-6.564620,-0.582021,4.543006],[2.550547,4.911380,9.651542,-6.680523,-4.260017,0.147557,9.085993,4.288167,5.280847]], dtype = "float32")#candidate|317|(9, 9)|const|float32
var_318 = relay.var("var_318", dtype = "float32", shape = (9, 9))#candidate|318|(9, 9)|var|float32
bop_319 = relay.floor_divide(const_317.astype('float32'), relay.reshape(var_318.astype('float32'), relay.shape_of(const_317))) # shape=(9, 9)
func_232_call = mod.get_global_var('func_232')
func_235_call = mutated_mod.get_global_var('func_235')
const_323 = relay.const([1.225649,-2.409864,-0.675131,-8.122330,2.288674,-3.934585,4.396083,-5.692812,6.584835,-4.753068,2.037540,-9.682041,4.101906,3.507664,-8.068202,1.309471,8.747738,-6.250107,-5.528744,-9.321988,-5.536487,4.640694,-3.033287,6.085954], dtype = "float64")#candidate|323|(24,)|const|float64
var_324 = relay.var("var_324", dtype = "uint16", shape = (2,))#candidate|324|(2,)|var|uint16
call_322 = relay.TupleGetItem(func_232_call(relay.reshape(const_323.astype('float64'), [2, 12]), relay.reshape(var_324.astype('uint16'), [2,]), ), 4)
call_325 = relay.TupleGetItem(func_235_call(relay.reshape(const_323.astype('float64'), [2, 12]), relay.reshape(var_324.astype('uint16'), [2,]), ), 4)
func_109_call = mod.get_global_var('func_109')
func_113_call = mutated_mod.get_global_var('func_113')
const_327 = relay.const([[-7.697531],[4.773063],[3.846748],[6.392686],[-0.709382],[6.206589],[-1.636623],[6.636800],[-8.114673],[-0.953480],[-5.160131],[-1.696916],[-1.411795],[-6.818051],[-6.693581],[4.569522],[3.983379],[-9.787830],[-0.663683],[1.704931],[-4.137800],[-2.109596],[8.562774],[3.534297],[-1.663877],[-9.952991],[-0.830961],[0.402930],[-8.779936],[7.165800],[-8.446693],[-0.701762],[-7.323998],[-4.518330],[-0.028290],[7.205632],[-0.229218],[1.033551],[5.538917],[-8.515357],[-1.100665],[4.197814],[6.268446],[-5.568194],[-3.096152],[7.974089],[-7.725602],[-7.364706],[-5.089513],[0.286685],[-0.017282],[0.249672],[-0.415592],[-8.002299],[3.969582],[-9.729061],[-4.163905],[7.581406],[-1.003986],[8.407092],[6.022704],[5.521026],[-4.553932],[-3.726304],[-9.623391],[6.602359],[2.216644],[9.365264],[2.733942],[4.642330],[-1.870368],[9.342172],[8.576439],[6.211140],[-9.028005],[-3.964715],[2.617927],[0.870528],[-0.985418],[-3.070076],[8.457435],[2.296759],[-6.757346],[1.641602],[3.989415],[-0.471224],[-0.255185],[-2.676448],[-8.100422],[2.025042],[-8.432760],[9.217491],[5.620155],[-0.863258],[-3.364094],[-6.351268],[-0.321911],[-0.873866],[-6.958994],[8.494159],[1.913055],[-1.597475],[8.417641],[5.781956],[-6.307698],[-4.826419],[7.409678],[-2.453346],[-3.066590],[-8.618928],[7.156032],[-8.106779],[-8.828577],[-7.569063],[-5.028022],[-9.930512],[7.252396],[1.203114],[9.631495],[3.284116],[2.979371],[0.363797],[1.430213],[5.576451],[-3.806562],[-4.860789],[-6.290374],[2.044563],[-4.400725],[-7.351042],[0.795099],[-9.462988],[6.020277],[7.632621],[-9.449567],[-7.786455],[-8.887583],[-1.648626],[3.097786],[0.705159],[7.861712],[4.216648],[4.501432],[0.121301],[-9.579191],[-6.066648],[-8.625788],[-8.430623],[4.752698],[5.966994],[-5.345754],[8.799752],[5.972448],[-0.698144],[-5.934168],[-8.576142],[-2.324476],[0.359061],[-5.241946],[9.444116],[-2.706646],[2.549534],[-0.976147],[-6.184996],[4.537932],[0.086716],[6.588506],[9.200481],[7.871427],[3.002657],[2.709818],[7.089127],[0.718630],[4.456907],[6.564405],[-3.332270],[4.503872],[4.833631],[-4.247727],[6.746083],[9.811362],[7.861250],[9.860028],[9.924220],[8.465662],[-9.019663],[-1.223994],[-0.545539],[4.382682],[2.564490],[-1.975338],[-0.026060],[3.622753],[0.166879],[-4.265561],[-2.140673],[5.107723],[-9.624073],[-2.317983],[1.926486],[1.340755],[-6.842272],[-9.508586],[2.874223],[0.509317],[-2.314081],[0.612543],[2.182829],[-7.763518],[-2.063320],[7.479116],[-1.116468],[-7.206023],[6.239464],[-1.009148],[-9.722876],[0.803976],[3.445686],[7.842093],[8.958634],[-4.371679],[-1.080829],[-9.656419],[-9.576175],[-1.282286],[3.057838],[0.826239],[6.697706],[2.735564],[-5.205724],[7.038375],[1.542378],[-5.967175],[-6.430395],[4.542445],[-9.427791],[-1.131988],[5.051992],[-1.810032],[6.178590],[-5.660622],[-3.893114],[3.632033],[-8.557919],[-1.062100],[-7.881780],[4.307178],[-7.959148],[5.686807],[-7.895887],[-6.787857],[-0.903814]], dtype = "float32")#candidate|327|(252, 1)|const|float32
const_328 = relay.const([6.551610,1.198635,-5.119331,-1.833576,3.279886,-2.890325,9.784560,4.961978,-6.212312,-1.268441,4.310637,5.655469,1.114551,-9.294956,1.897468,-9.266749,-3.194109,5.254009,4.610949,-2.156937,-5.626435,8.571799,-5.505642,-9.864690,-7.922477,-9.582103,3.183907,-0.466239,1.379467,-0.034788,7.615198,2.853025,-2.738079,-3.914470,-8.165608,-2.507984,-5.087293,0.868650,-4.150668,1.745453,-2.659646,-9.927372,8.001925,1.499696,9.343627,-4.748105,-9.779078,1.500513,-9.355632,7.968380,-9.157167,3.676160,8.668707,0.144907,-7.866039,-9.166268,-9.215819,5.776457,9.252802,-6.277266,-7.176189,4.277909,1.411976,2.308253,0.634935,-6.563084,-4.305133,-0.436952,-0.972468,3.964899,-0.605036,-2.183586,9.006253,3.420751,-2.071021,0.474135,-7.952535,5.337217,9.224504,1.892310,8.577365,9.975061,3.105696,8.041919,0.951421,-2.006773,4.324775,1.075104,-2.026114,7.887369,-9.765120,2.823457,-8.786927,-6.230346,6.146180,-5.177478,-4.612296,-1.502237,2.433992,0.692518,3.033784,-6.330898,-0.328407,8.730989,-1.767703,8.759382,3.146873,3.251150,-1.984691,-5.908160,2.759298,-4.773425,-7.427024,0.483722,2.772828,-8.262877,1.870552,7.511350,-5.453016,-4.541072,8.194349,-3.185126,9.744325,-1.585186,1.640638,6.978097,4.883599,-8.162657,7.096321,8.189070,7.507830,8.931640,2.827806,-1.475897,9.848078,-0.544656,3.491392,3.102772,9.505170,-3.738802,-4.448369,6.952975,6.652609,3.055099,-5.805269,9.980197,0.825165,-7.997594,2.571426,-2.836155,5.582258,-2.369583,0.217894,5.246744,5.194276,-8.964503,-3.534657,-2.377960,0.855630,-8.421133,-1.050245,0.764402,-2.149858,-9.220958,5.227848,-3.788090,-0.359342,0.248449,-5.302101,-1.628020,-2.312650,-9.112156,-5.931748,-8.097343,-9.087843,6.695328,6.990926,-2.874356,-0.947306,1.143736,-9.773113,3.445325,-1.231115,-1.728093,9.947712,7.316408,1.202866,-1.883738,-5.985224,-0.314591,9.496994,6.065515,-8.506052,-7.074110,9.034233,-8.416222,6.826993,-6.559993,-3.112795,6.663947,6.555908,6.164719,-4.702566,-2.223033,3.424362,2.978948,0.675369,0.119077,4.766586,-7.613020,7.283279,-9.135363,-6.632811,7.468832,9.160488,0.938742,1.965576,-2.301578,-1.592903,-7.066288,1.788940,0.671967,-5.655438,-6.193327,-7.342949,-8.461632,-1.071794,2.038123,8.139201,3.514135,9.558174,4.587311,-7.587207,-0.927509,9.190064,-3.569312,-9.971796,1.760614,-4.916812,-0.634867,-6.099262,-5.772245,5.906562,-6.854714,-0.495004,-6.452614,-9.364993,-9.332930,0.218790,1.620456,4.926948,9.793884,5.430796,1.936970,-8.108079,7.550587,-9.167697,1.005732,3.163747,0.297864,-0.037232,0.408478,4.403649,8.776762,-9.024832,1.328126,-1.682546,5.483866,3.672249,8.578811,7.966174,5.580228,-4.365665,9.819174,-8.180940,-3.578962,-0.806066,7.181351,9.888534,-9.637385,3.352180,-2.830823,-8.247981,-4.885055,-6.823325,-9.032360,-7.800066,1.675456,-9.206803,-9.072375,9.524085,7.100677,-2.576607,-1.875738,1.946386,2.344758,-7.985109,-5.468441,8.398936,6.488110,-4.250487,7.551349,9.526087,-2.591487,-6.459977,-4.314652,5.383901,3.724007,-8.590705,8.112852,2.879647,-7.739487,-7.925938,-5.544793,1.635937,3.080380,1.240374,-4.032986,-1.804664,2.890824,0.187242,-6.600898,4.472397,-9.701886,4.922255,-8.114981,-1.274427,7.209328,4.204960,3.681048,6.526890,1.404151,6.709729,1.857390,-4.795449,-7.703129,-2.047794,-0.677807,9.961401,9.215583,-2.109574,5.799534,-5.065606,-1.163658,-6.900750,5.999526,-2.682082,0.103894,-6.204448,6.032816,7.870735,4.588133,4.426568,8.216886,-5.234822,1.559103,-3.113986,-8.191774,8.347170,9.713346,-6.242253,7.000630,0.239583,-8.120971,0.789786,-1.499625,-9.683352,-2.653387,8.172710,-4.117765,-8.086809,-5.951044,-0.891208,-0.932098,8.633170,6.456886,-9.183598,1.006400,7.859087,9.844411,9.851635,6.677318,0.081855,4.524395,-0.242891,3.062167,-6.277565,8.802737,-8.439485,-6.576322,2.164599,6.288490,0.522842,9.636042,-5.557508,7.513395,-0.670458,9.497342,6.625195,-2.287797,-6.570603,-6.534061,-2.677711,5.615798,6.087675,-3.687965,-9.707606,-1.232675,-4.780057,-5.989295,9.056866,7.634747,4.043627,1.943627,1.985226,-5.187819,6.505859,-5.947758,-4.585361,-8.945104,-3.609165,8.641529,-5.227067,-6.862665,0.600939,-6.265027,-3.819611,7.311679,-9.470716,-2.927176,-8.345861,-0.460715,-4.476587,9.201148,-0.757457,-6.077574,9.339174,4.713266,-3.992077,-6.918017,9.461627,-2.161090,-2.105559,7.633530,-9.582406,6.109465,-4.993151,6.280717,-1.113430,0.317247,-9.649345,7.478124,4.902206,-8.241439,-7.121509,-8.572549,0.653839,-2.326349,-1.201523,-3.801986,3.824124,1.950652,5.029065,-1.101490,-5.571489,4.257487,-7.912640,-5.994107,2.100029,2.259024,8.499920,2.427080,-4.958074,7.183851,3.061807,8.399873,6.954078,-0.748964,9.095384,-4.263878,4.839220,8.502670,3.879022,8.092225,-8.570178,-3.595007,-8.629106,-8.860102,1.552168,5.278732,8.898239,-9.784278,-0.781069,-9.780475,7.309408,9.430346,-9.211668,-3.639463,-7.255415,-7.316704,-3.215346,-2.837237,2.904508,6.435662,-1.765978,7.262541,-8.909099,-9.357144,8.849276,-6.730120,-2.644367,5.806169,-6.820362,-1.360403,3.700640,0.323242,9.798197,3.932576,-2.532956,-8.350569,6.256433,4.001094,6.429618,-1.582450,-4.613688,0.676008,-9.302378,4.743927,3.585715,7.774506,-2.893447,-8.518079,6.422341,-1.217636,1.143260,-7.920182,1.893202,-3.033084,-0.079121,9.873243,0.412146,9.637305,4.887507,7.117872,-7.584721,9.582909,5.597010,-9.237339,7.371481,5.899588,2.125863,-6.051581,8.621730,4.635638,8.446796,-7.036213,-4.506112,1.766155,-8.524331,-6.001021,1.605833,2.589914,1.362084,6.806880,2.767629,6.271107,3.677041,8.013300,-8.274216,-7.279903,9.866468,6.742910,-6.294539,8.041315,7.347579,7.625854,3.697088,9.654562,-0.553087,-2.138014,7.663769,0.809039,1.823576,7.602097,6.844636,1.199090,-3.965052,-5.616962,8.257630,8.587082,2.620378,-0.188063,-5.764239,-7.689863,-6.030812,-5.357685,-5.985748,-4.277022,-0.275979,-2.825278,8.483550,-0.798905,-9.449595,-8.059266,-0.944312,-8.229364,-0.291334,-5.839853,-7.006551,-9.273106,3.341417,7.501507,-6.245206,2.116049,5.960822,-3.355244,-8.880230,3.660273,-6.248318,-8.772011,0.910529,-4.967329,1.882529,-6.365686,7.266065,0.054484,6.506130,5.590981,-4.903911,-3.504443,-1.200355,8.822996,6.146777,3.861101,-7.095905,-5.987993,-5.917122,-1.449037,-0.101642,7.595547,8.136423,-4.639733,2.475267,-8.763568,4.973039,-2.489011,9.128397,-7.731993,-0.871981,-4.181836,8.424133,-9.428816,-2.221169,-2.467229,-2.191823,-5.671240,-5.951663,-0.550298,-0.536468,3.783863,-5.578180,6.656529,2.519899,-9.052956,3.200826,1.505590,-4.417479,-0.025253,-2.921078,2.068816,8.308422,-4.908446,-0.168469,1.259331,7.804783,-9.171224,-0.322412,3.932005,7.214033,9.152378,6.209552,-9.596020,1.592527,-9.735989,5.989316,-6.540711,7.154147,-3.597623,6.036462,8.211214,-3.777163,-6.707040,8.937474,9.180615,-1.810955,-3.760850,5.715456,5.198391,6.593928,-7.679445,2.952028,9.783770,9.915868,-9.095408,-8.843686,6.565155,-9.342468,1.738469,8.723836,-1.963554,-7.652953,6.883828,1.321536,-4.406655,-3.935042,2.071999,1.183626,1.543204,-5.387505,4.775130,7.291901,-0.062494,0.776267,8.597315,-5.603068,-5.885601,-9.116382,-1.995459,-1.140538,8.855273,6.919270,-9.750890,7.455355,6.749247,5.444348,-5.099986,0.661820,-0.420409,5.790025,5.135441,-5.389586,-8.254528,-5.127396,-1.778626,2.647343,5.438157,5.304576,5.398704,1.898904,-6.587892,4.953741,2.184417,1.704812,2.965688,-8.354404,-7.395922,-7.324034,1.275862,3.496882,0.349573,2.629948,7.330763,-2.982280,-5.036884,4.823792,3.454353,7.132569,2.041606,-5.485677,5.168807,-5.538032,2.459980,-9.051941,7.536253,6.657135,-4.812617,6.538015,6.212899,-7.227470,-0.181894,-8.199382,6.360773,-0.669801,5.094056,6.902204,4.856129,-4.730008,3.166713,-9.913514,2.037321,2.648443,-1.379390,5.641500,8.058044,0.263650,-4.371739,6.938968,-7.430390,-3.849984,-3.001252,-5.884102,8.077232,8.136293,-6.720586,6.053248,9.277573,5.957395,-2.915474,6.638449,7.490157,8.757921,-6.516615,4.236624,-7.835582,-8.683518,8.996830,6.805665,-0.960376,7.432767,-7.899873,-7.072973,-7.855930,7.579053,-5.243874,-2.474174,-7.528042,6.662076,-0.154133,6.610446,8.272968,6.223544,-5.298570,2.238791,5.508516,2.233094,-8.712175,9.735808,-2.771008,5.720661,3.288860,-5.800211,1.243928,4.377522,-8.773477,-2.466317,-3.085337,-2.162482,-7.286879,3.791925,4.073988,1.954477,-7.311077,-3.145799,-8.954370,-8.532861,5.762093,0.411510,-1.420898,-3.594709,2.604543,-9.239426,-8.883389,-8.788401,4.380981,8.661234,9.133273,-1.846741,0.656378,-1.823393,-9.193567,-9.104728,0.480400,-2.858049,-2.784654,-4.754522,3.694015,4.237570,2.193463,0.669192,-4.995749,2.431547,2.826275,3.499452,-7.740941,-4.157775,-1.544313,-7.697784,-8.959249,-1.032766,4.387622,-6.593819,4.164175,0.900329,-2.396401,5.906221,5.770039,-5.165890,-7.683661,2.547827,3.470583], dtype = "float32")#candidate|328|(900,)|const|float32
call_326 = relay.TupleGetItem(func_109_call(relay.reshape(const_327.astype('float32'), [3, 12, 7]), relay.reshape(const_328.astype('float32'), [900,]), ), 0)
call_329 = relay.TupleGetItem(func_113_call(relay.reshape(const_327.astype('float32'), [3, 12, 7]), relay.reshape(const_328.astype('float32'), [900,]), ), 0)
uop_330 = relay.tan(const_327.astype('float32')) # shape=(252, 1)
output = relay.Tuple([bop_319,call_322,const_323,var_324,call_326,const_328,uop_330,])
output2 = relay.Tuple([bop_319,call_325,const_323,var_324,call_329,const_328,uop_330,])
func_332 = relay.Function([var_318,var_324,], output)
mod['func_332'] = func_332
mod = relay.transform.InferType()(mod)
mutated_mod['func_332'] = func_332
mutated_mod = relay.transform.InferType()(mutated_mod)
func_332_call = mutated_mod.get_global_var('func_332')
var_334 = relay.var("var_334", dtype = "float32", shape = (9, 9))#candidate|334|(9, 9)|var|float32
var_335 = relay.var("var_335", dtype = "uint16", shape = (2,))#candidate|335|(2,)|var|uint16
call_333 = func_332_call(var_334,var_335,)
output = call_333
func_336 = relay.Function([var_334,var_335,], output)
mutated_mod['func_336'] = func_336
mutated_mod = relay.transform.InferType()(mutated_mod)
var_370 = relay.var("var_370", dtype = "float32", shape = (14, 2, 2))#candidate|370|(14, 2, 2)|var|float32
var_371 = relay.var("var_371", dtype = "float32", shape = (14, 2, 2))#candidate|371|(14, 2, 2)|var|float32
bop_372 = relay.divide(var_370.astype('float32'), relay.reshape(var_371.astype('float32'), relay.shape_of(var_370))) # shape=(14, 2, 2)
output = relay.Tuple([bop_372,])
output2 = relay.Tuple([bop_372,])
func_377 = relay.Function([var_370,var_371,], output)
mod['func_377'] = func_377
mod = relay.transform.InferType()(mod)
var_378 = relay.var("var_378", dtype = "float32", shape = (14, 2, 2))#candidate|378|(14, 2, 2)|var|float32
var_379 = relay.var("var_379", dtype = "float32", shape = (14, 2, 2))#candidate|379|(14, 2, 2)|var|float32
output = func_377(var_378,var_379,)
func_380 = relay.Function([var_378,var_379,], output)
mutated_mod['func_380'] = func_380
mutated_mod = relay.transform.InferType()(mutated_mod)
const_431 = relay.const([[-4.378862,1.539107,-6.424002,0.381963,7.106457,7.252989,2.313519,9.886890,-8.228958,-0.573520,-4.093310,-7.975095],[-3.915699,-5.361545,-6.313042,2.915295,5.390233,7.750332,-9.384546,4.554136,9.700130,4.595667,-3.819405,0.844216],[1.210670,4.617026,-6.018904,-8.341742,7.700158,2.127417,-3.561659,1.402871,-6.589433,1.987997,2.954896,-7.137813],[2.310525,6.649285,-3.278906,-8.521491,-6.560275,-6.368998,4.180745,1.034905,0.615296,8.853156,6.543721,3.393403],[6.940906,-5.113144,3.067579,5.331916,-2.940077,7.708561,8.188185,5.881515,8.313636,8.297819,-0.125418,6.177010]], dtype = "float32")#candidate|431|(5, 12)|const|float32
uop_432 = relay.log10(const_431.astype('float32')) # shape=(5, 12)
bop_434 = relay.floor_divide(const_431.astype('float64'), relay.reshape(uop_432.astype('float64'), relay.shape_of(const_431))) # shape=(5, 12)
bop_441 = relay.right_shift(uop_432.astype('int16'), relay.reshape(bop_434.astype('int16'), relay.shape_of(uop_432))) # shape=(5, 12)
uop_446 = relay.asinh(uop_432.astype('float64')) # shape=(5, 12)
output = relay.Tuple([bop_441,uop_446,])
output2 = relay.Tuple([bop_441,uop_446,])
func_448 = relay.Function([], output)
mod['func_448'] = func_448
mod = relay.transform.InferType()(mod)
mutated_mod['func_448'] = func_448
mutated_mod = relay.transform.InferType()(mutated_mod)
func_448_call = mutated_mod.get_global_var('func_448')
call_449 = func_448_call()
output = call_449
func_450 = relay.Function([], output)
mutated_mod['func_450'] = func_450
mutated_mod = relay.transform.InferType()(mutated_mod)
var_458 = relay.var("var_458", dtype = "float32", shape = (8, 8))#candidate|458|(8, 8)|var|float32
const_459 = relay.const([[-4.101187,3.190110,4.679129,-8.022666,-9.725037,8.684058,-4.039784,3.651315],[-2.057920,3.625352,5.303679,-3.654070,7.338794,8.495443,-6.948719,1.251427],[3.033161,4.208995,8.276746,3.567648,-1.300154,-5.658653,-3.952371,1.898879],[8.453753,7.446250,6.388469,-5.767211,-5.426920,9.504598,-6.877715,6.717317],[4.988311,3.971076,4.412856,-0.702272,0.011700,-9.764064,-0.361699,9.285425],[-6.657438,-7.938306,-3.297014,-2.629083,-5.662552,4.632478,3.964502,-4.403871],[5.638939,5.186575,3.883502,0.534340,-2.738753,-8.191666,4.192257,1.447647],[-4.125235,-7.723295,-9.446563,7.603769,-8.032597,-2.437137,-3.488816,-2.799684]], dtype = "float32")#candidate|459|(8, 8)|const|float32
bop_460 = relay.greater_equal(var_458.astype('bool'), relay.reshape(const_459.astype('bool'), relay.shape_of(var_458))) # shape=(8, 8)
output = bop_460
output2 = bop_460
func_464 = relay.Function([var_458,], output)
mod['func_464'] = func_464
mod = relay.transform.InferType()(mod)
mutated_mod['func_464'] = func_464
mutated_mod = relay.transform.InferType()(mutated_mod)
var_465 = relay.var("var_465", dtype = "float32", shape = (8, 8))#candidate|465|(8, 8)|var|float32
func_464_call = mutated_mod.get_global_var('func_464')
call_466 = func_464_call(var_465)
output = call_466
func_467 = relay.Function([var_465], output)
mutated_mod['func_467'] = func_467
mutated_mod = relay.transform.InferType()(mutated_mod)
func_448_call = mod.get_global_var('func_448')
func_450_call = mutated_mod.get_global_var('func_450')
call_508 = relay.TupleGetItem(func_448_call(), 0)
call_509 = relay.TupleGetItem(func_450_call(), 0)
var_513 = relay.var("var_513", dtype = "int16", shape = (5, 12))#candidate|513|(5, 12)|var|int16
bop_514 = relay.logical_xor(call_508.astype('int16'), relay.reshape(var_513.astype('int16'), relay.shape_of(call_508))) # shape=(5, 12)
bop_517 = relay.logical_xor(call_509.astype('int16'), relay.reshape(var_513.astype('int16'), relay.shape_of(call_509))) # shape=(5, 12)
bop_525 = relay.equal(bop_514.astype('bool'), relay.reshape(var_513.astype('bool'), relay.shape_of(bop_514))) # shape=(5, 12)
bop_528 = relay.equal(bop_517.astype('bool'), relay.reshape(var_513.astype('bool'), relay.shape_of(bop_517))) # shape=(5, 12)
bop_530 = relay.floor_mod(bop_514.astype('float32'), relay.reshape(call_508.astype('float32'), relay.shape_of(bop_514))) # shape=(5, 12)
bop_533 = relay.floor_mod(bop_517.astype('float32'), relay.reshape(call_509.astype('float32'), relay.shape_of(bop_517))) # shape=(5, 12)
func_377_call = mod.get_global_var('func_377')
func_380_call = mutated_mod.get_global_var('func_380')
const_543 = relay.const([7.387162,-2.487679,-4.703603,-1.291130,-9.146615,-6.761786,8.411683,7.989234,8.908147,-2.863608,5.782256,1.712851,2.401089,0.554760,4.220600,-8.079957,-9.441813,-2.127856,3.653690,-1.383878,6.573562,9.519973,4.419890,-4.051962,2.900376,-3.252920,-9.137054,-5.792974,-9.616742,-6.605033,-5.799385,-6.320928,-6.180187,1.856493,2.108002,4.717407,-0.743588,-8.352548,8.289742,-0.903689,5.406255,8.462769,-7.260715,-2.524333,-0.287878,-8.735588,7.203417,4.644768,3.259644,8.690665,-4.073780,5.791382,5.019985,-9.214508,-5.935593,8.668491], dtype = "float32")#candidate|543|(56,)|const|float32
call_542 = relay.TupleGetItem(func_377_call(relay.reshape(const_543.astype('float32'), [14, 2, 2]), relay.reshape(const_543.astype('float32'), [14, 2, 2]), ), 0)
call_544 = relay.TupleGetItem(func_380_call(relay.reshape(const_543.astype('float32'), [14, 2, 2]), relay.reshape(const_543.astype('float32'), [14, 2, 2]), ), 0)
bop_547 = relay.logical_or(var_513.astype('bool'), relay.reshape(bop_514.astype('bool'), relay.shape_of(var_513))) # shape=(5, 12)
bop_550 = relay.logical_or(var_513.astype('bool'), relay.reshape(bop_517.astype('bool'), relay.shape_of(var_513))) # shape=(5, 12)
output = relay.Tuple([bop_525,bop_530,call_542,const_543,bop_547,])
output2 = relay.Tuple([bop_528,bop_533,call_544,const_543,bop_550,])
func_552 = relay.Function([var_513,], output)
mod['func_552'] = func_552
mod = relay.transform.InferType()(mod)
mutated_mod['func_552'] = func_552
mutated_mod = relay.transform.InferType()(mutated_mod)
var_553 = relay.var("var_553", dtype = "int16", shape = (5, 12))#candidate|553|(5, 12)|var|int16
func_552_call = mutated_mod.get_global_var('func_552')
call_554 = func_552_call(var_553)
output = call_554
func_555 = relay.Function([var_553], output)
mutated_mod['func_555'] = func_555
mutated_mod = relay.transform.InferType()(mutated_mod)
const_571 = relay.const([[5.847916],[-2.190610],[7.496503]], dtype = "float64")#candidate|571|(3, 1)|const|float64
uop_572 = relay.sigmoid(const_571.astype('float64')) # shape=(3, 1)
bop_575 = relay.right_shift(uop_572.astype('int8'), relay.reshape(const_571.astype('int8'), relay.shape_of(uop_572))) # shape=(3, 1)
uop_578 = relay.sin(uop_572.astype('float64')) # shape=(3, 1)
uop_584 = relay.atan(uop_578.astype('float32')) # shape=(3, 1)
bop_586 = relay.divide(bop_575.astype('float32'), relay.reshape(const_571.astype('float32'), relay.shape_of(bop_575))) # shape=(3, 1)
bop_595 = relay.add(uop_578.astype('uint64'), relay.reshape(uop_584.astype('uint64'), relay.shape_of(uop_578))) # shape=(3, 1)
bop_598 = relay.multiply(uop_584.astype('int64'), relay.reshape(uop_572.astype('int64'), relay.shape_of(uop_584))) # shape=(3, 1)
bop_601 = relay.less_equal(bop_598.astype('bool'), relay.reshape(uop_584.astype('bool'), relay.shape_of(bop_598))) # shape=(3, 1)
bop_606 = relay.greater_equal(bop_601.astype('bool'), relay.reshape(bop_575.astype('bool'), relay.shape_of(bop_601))) # shape=(3, 1)
bop_611 = relay.bitwise_and(bop_598.astype('uint32'), relay.reshape(bop_601.astype('uint32'), relay.shape_of(bop_598))) # shape=(3, 1)
bop_619 = relay.greater(bop_598.astype('bool'), relay.reshape(bop_595.astype('bool'), relay.shape_of(bop_598))) # shape=(3, 1)
uop_622 = relay.atanh(bop_611.astype('float32')) # shape=(3, 1)
const_625 = relay.const([[-2.199333,0.361336,3.373500,-2.805626,5.099487,-9.499050,8.383061,4.391533,3.058513,-6.467641,-8.549799,8.370585,-8.797800,9.763196],[9.779458,0.941156,-0.201759,9.074230,-2.306341,8.849933,5.274998,9.390436,0.289362,-3.136922,1.069468,5.199820,7.884267,0.597323],[-5.169064,-3.621446,0.986744,-5.210927,9.984114,1.866673,9.084206,9.218920,9.351272,9.339913,3.150659,8.257693,-7.118876,-1.028751]], dtype = "float32")#candidate|625|(3, 14)|const|float32
bop_626 = relay.subtract(uop_622.astype('int8'), const_625.astype('int8')) # shape=(3, 14)
bop_630 = relay.minimum(uop_578.astype('int32'), relay.reshape(bop_601.astype('int32'), relay.shape_of(uop_578))) # shape=(3, 1)
bop_633 = relay.mod(uop_578.astype('float64'), bop_626.astype('float64')) # shape=(3, 14)
uop_636 = relay.sigmoid(bop_633.astype('float64')) # shape=(3, 14)
var_638 = relay.var("var_638", dtype = "float64", shape = (3, 14))#candidate|638|(3, 14)|var|float64
bop_639 = relay.subtract(bop_633.astype('int64'), relay.reshape(var_638.astype('int64'), relay.shape_of(bop_633))) # shape=(3, 14)
output = relay.Tuple([bop_586,bop_606,bop_619,bop_630,uop_636,bop_639,])
output2 = relay.Tuple([bop_586,bop_606,bop_619,bop_630,uop_636,bop_639,])
func_643 = relay.Function([var_638,], output)
mod['func_643'] = func_643
mod = relay.transform.InferType()(mod)
var_644 = relay.var("var_644", dtype = "float64", shape = (3, 14))#candidate|644|(3, 14)|var|float64
output = func_643(var_644)
func_645 = relay.Function([var_644], output)
mutated_mod['func_645'] = func_645
mutated_mod = relay.transform.InferType()(mutated_mod)
var_660 = relay.var("var_660", dtype = "float32", shape = (2, 14, 3))#candidate|660|(2, 14, 3)|var|float32
const_661 = relay.const([[[-9.834792,-4.998629,-7.405377],[-3.366523,-3.219350,7.901980],[9.809107,-4.855283,-6.096672],[-3.758589,1.143213,-7.185535],[-4.452638,-5.052741,7.213644],[-1.022716,2.842109,2.100536],[-2.166798,2.913034,3.755733],[-3.244514,0.757679,-6.965668],[0.531883,-3.253074,2.488953],[-3.172271,-6.811965,9.967116],[4.951074,2.177576,-9.800114],[-0.615057,-9.408702,4.202065],[9.972857,-2.555143,8.135603],[-0.973947,6.953707,3.467969]],[[9.259075,-5.063626,-5.632632],[5.222285,-9.553352,8.061838],[6.374239,4.189983,1.710414],[-8.113167,-4.530539,1.623127],[8.093958,-6.406446,-8.216328],[1.070222,-5.179343,2.660036],[8.015669,-9.221136,-6.355161],[-6.851469,5.523145,9.889552],[4.529228,9.467954,0.440398],[7.159693,-4.272221,4.316368],[5.256208,-5.804760,4.473707],[-1.207762,-7.202937,-7.063357],[-0.287204,4.970252,-5.829061],[-1.094443,-5.581271,-1.984228]]], dtype = "float32")#candidate|661|(2, 14, 3)|const|float32
bop_662 = relay.floor_divide(var_660.astype('float32'), relay.reshape(const_661.astype('float32'), relay.shape_of(var_660))) # shape=(2, 14, 3)
func_157_call = mod.get_global_var('func_157')
func_160_call = mutated_mod.get_global_var('func_160')
var_666 = relay.var("var_666", dtype = "uint16", shape = (2, 1))#candidate|666|(2, 1)|var|uint16
call_665 = relay.TupleGetItem(func_157_call(relay.reshape(var_666.astype('uint16'), [2,]), relay.reshape(var_666.astype('uint16'), [2,]), ), 0)
call_667 = relay.TupleGetItem(func_160_call(relay.reshape(var_666.astype('uint16'), [2,]), relay.reshape(var_666.astype('uint16'), [2,]), ), 0)
output = relay.Tuple([bop_662,call_665,var_666,])
output2 = relay.Tuple([bop_662,call_667,var_666,])
func_684 = relay.Function([var_660,var_666,], output)
mod['func_684'] = func_684
mod = relay.transform.InferType()(mod)
var_685 = relay.var("var_685", dtype = "float32", shape = (2, 14, 3))#candidate|685|(2, 14, 3)|var|float32
var_686 = relay.var("var_686", dtype = "uint16", shape = (2, 1))#candidate|686|(2, 1)|var|uint16
output = func_684(var_685,var_686,)
func_687 = relay.Function([var_685,var_686,], output)
mutated_mod['func_687'] = func_687
mutated_mod = relay.transform.InferType()(mutated_mod)
var_715 = relay.var("var_715", dtype = "int64", shape = (6,))#candidate|715|(6,)|var|int64
const_716 = relay.const([-2,-4,9,-5,2,-3], dtype = "int64")#candidate|716|(6,)|const|int64
bop_717 = relay.less(var_715.astype('bool'), relay.reshape(const_716.astype('bool'), relay.shape_of(var_715))) # shape=(6,)
func_232_call = mod.get_global_var('func_232')
func_235_call = mutated_mod.get_global_var('func_235')
var_728 = relay.var("var_728", dtype = "float64", shape = (24,))#candidate|728|(24,)|var|float64
var_729 = relay.var("var_729", dtype = "uint16", shape = (2,))#candidate|729|(2,)|var|uint16
call_727 = relay.TupleGetItem(func_232_call(relay.reshape(var_728.astype('float64'), [2, 12]), relay.reshape(var_729.astype('uint16'), [2,]), ), 0)
call_730 = relay.TupleGetItem(func_235_call(relay.reshape(var_728.astype('float64'), [2, 12]), relay.reshape(var_729.astype('uint16'), [2,]), ), 0)
output = relay.Tuple([bop_717,call_727,var_728,var_729,])
output2 = relay.Tuple([bop_717,call_730,var_728,var_729,])
func_731 = relay.Function([var_715,var_728,var_729,], output)
mod['func_731'] = func_731
mod = relay.transform.InferType()(mod)
mutated_mod['func_731'] = func_731
mutated_mod = relay.transform.InferType()(mutated_mod)
func_731_call = mutated_mod.get_global_var('func_731')
var_733 = relay.var("var_733", dtype = "int64", shape = (6,))#candidate|733|(6,)|var|int64
var_734 = relay.var("var_734", dtype = "float64", shape = (24,))#candidate|734|(24,)|var|float64
var_735 = relay.var("var_735", dtype = "uint16", shape = (2,))#candidate|735|(2,)|var|uint16
call_732 = func_731_call(var_733,var_734,var_735,)
output = call_732
func_736 = relay.Function([var_733,var_734,var_735,], output)
mutated_mod['func_736'] = func_736
mutated_mod = relay.transform.InferType()(mutated_mod)
var_799 = relay.var("var_799", dtype = "float32", shape = (14,))#candidate|799|(14,)|var|float32
var_800 = relay.var("var_800", dtype = "float32", shape = (14,))#candidate|800|(14,)|var|float32
bop_801 = relay.subtract(var_799.astype('float32'), relay.reshape(var_800.astype('float32'), relay.shape_of(var_799))) # shape=(14,)
output = bop_801
output2 = bop_801
func_804 = relay.Function([var_799,var_800,], output)
mod['func_804'] = func_804
mod = relay.transform.InferType()(mod)
var_805 = relay.var("var_805", dtype = "float32", shape = (14,))#candidate|805|(14,)|var|float32
var_806 = relay.var("var_806", dtype = "float32", shape = (14,))#candidate|806|(14,)|var|float32
output = func_804(var_805,var_806,)
func_807 = relay.Function([var_805,var_806,], output)
mutated_mod['func_807'] = func_807
mutated_mod = relay.transform.InferType()(mutated_mod)
func_448_call = mod.get_global_var('func_448')
func_450_call = mutated_mod.get_global_var('func_450')
call_816 = relay.TupleGetItem(func_448_call(), 0)
call_817 = relay.TupleGetItem(func_450_call(), 0)
func_332_call = mod.get_global_var('func_332')
func_336_call = mutated_mod.get_global_var('func_336')
var_824 = relay.var("var_824", dtype = "float32", shape = (81,))#candidate|824|(81,)|var|float32
const_825 = relay.const([-7,3], dtype = "uint16")#candidate|825|(2,)|const|uint16
call_823 = relay.TupleGetItem(func_332_call(relay.reshape(var_824.astype('float32'), [9, 9]), relay.reshape(const_825.astype('uint16'), [2,]), ), 5)
call_826 = relay.TupleGetItem(func_336_call(relay.reshape(var_824.astype('float32'), [9, 9]), relay.reshape(const_825.astype('uint16'), [2,]), ), 5)
output = relay.Tuple([call_816,call_823,var_824,const_825,])
output2 = relay.Tuple([call_817,call_826,var_824,const_825,])
func_834 = relay.Function([var_824,], output)
mod['func_834'] = func_834
mod = relay.transform.InferType()(mod)
mutated_mod['func_834'] = func_834
mutated_mod = relay.transform.InferType()(mutated_mod)
var_835 = relay.var("var_835", dtype = "float32", shape = (81,))#candidate|835|(81,)|var|float32
func_834_call = mutated_mod.get_global_var('func_834')
call_836 = func_834_call(var_835)
output = call_836
func_837 = relay.Function([var_835], output)
mutated_mod['func_837'] = func_837
mutated_mod = relay.transform.InferType()(mutated_mod)
var_841 = relay.var("var_841", dtype = "float64", shape = (13, 6))#candidate|841|(13, 6)|var|float64
uop_842 = relay.log(var_841.astype('float64')) # shape=(13, 6)
bop_845 = relay.mod(uop_842.astype('float64'), relay.reshape(var_841.astype('float64'), relay.shape_of(uop_842))) # shape=(13, 6)
bop_849 = relay.logical_or(uop_842.astype('bool'), relay.reshape(bop_845.astype('bool'), relay.shape_of(uop_842))) # shape=(13, 6)
var_852 = relay.var("var_852", dtype = "float64", shape = (13, 6))#candidate|852|(13, 6)|var|float64
bop_853 = relay.bitwise_or(uop_842.astype('int64'), relay.reshape(var_852.astype('int64'), relay.shape_of(uop_842))) # shape=(13, 6)
uop_856 = relay.log10(bop_853.astype('float32')) # shape=(13, 6)
bop_858 = relay.bitwise_xor(uop_856.astype('uint8'), relay.reshape(var_841.astype('uint8'), relay.shape_of(uop_856))) # shape=(13, 6)
func_109_call = mod.get_global_var('func_109')
func_113_call = mutated_mod.get_global_var('func_113')
var_865 = relay.var("var_865", dtype = "float32", shape = (3, 84))#candidate|865|(3, 84)|var|float32
var_866 = relay.var("var_866", dtype = "float32", shape = (900,))#candidate|866|(900,)|var|float32
call_864 = relay.TupleGetItem(func_109_call(relay.reshape(var_865.astype('float32'), [3, 12, 7]), relay.reshape(var_866.astype('float32'), [900,]), ), 1)
call_867 = relay.TupleGetItem(func_113_call(relay.reshape(var_865.astype('float32'), [3, 12, 7]), relay.reshape(var_866.astype('float32'), [900,]), ), 1)
uop_868 = relay.log(bop_853.astype('float32')) # shape=(13, 6)
var_870 = relay.var("var_870", dtype = "bool", shape = (13, 6))#candidate|870|(13, 6)|var|bool
bop_871 = relay.greater_equal(bop_849.astype('bool'), relay.reshape(var_870.astype('bool'), relay.shape_of(bop_849))) # shape=(13, 6)
bop_879 = relay.less_equal(uop_856.astype('bool'), relay.reshape(bop_845.astype('bool'), relay.shape_of(uop_856))) # shape=(13, 6)
bop_892 = relay.left_shift(bop_858.astype('int8'), relay.reshape(uop_856.astype('int8'), relay.shape_of(bop_858))) # shape=(13, 6)
var_895 = relay.var("var_895", dtype = "uint8", shape = (13, 6))#candidate|895|(13, 6)|var|uint8
bop_896 = relay.subtract(bop_858.astype('float64'), relay.reshape(var_895.astype('float64'), relay.shape_of(bop_858))) # shape=(13, 6)
bop_899 = relay.greater_equal(bop_871.astype('bool'), relay.reshape(bop_892.astype('bool'), relay.shape_of(bop_871))) # shape=(13, 6)
const_902 = relay.const([[-7,-1,2,9,-4,-8],[1,10,-6,4,-7,-4],[9,3,5,7,-8,-8],[4,10,4,-6,8,1],[-2,3,-9,10,-6,-5],[-4,-3,-3,-1,-10,-6],[1,-9,5,2,-6,1],[-1,-5,-3,8,-5,8],[-1,4,3,6,-9,2],[7,-5,8,-8,6,6],[6,-7,-2,-6,5,4],[7,2,5,1,-6,4],[-2,-3,-8,8,-10,4]], dtype = "uint8")#candidate|902|(13, 6)|const|uint8
bop_903 = relay.divide(bop_858.astype('float32'), relay.reshape(const_902.astype('float32'), relay.shape_of(bop_858))) # shape=(13, 6)
func_731_call = mod.get_global_var('func_731')
func_736_call = mutated_mod.get_global_var('func_736')
const_908 = relay.const([[-5,-4],[-8,4],[10,10]], dtype = "int64")#candidate|908|(3, 2)|const|int64
var_909 = relay.var("var_909", dtype = "float64", shape = (24,))#candidate|909|(24,)|var|float64
var_910 = relay.var("var_910", dtype = "uint16", shape = (2,))#candidate|910|(2,)|var|uint16
call_907 = relay.TupleGetItem(func_731_call(relay.reshape(const_908.astype('int64'), [6,]), relay.reshape(var_909.astype('float64'), [24,]), relay.reshape(var_910.astype('uint16'), [2,]), ), 3)
call_911 = relay.TupleGetItem(func_736_call(relay.reshape(const_908.astype('int64'), [6,]), relay.reshape(var_909.astype('float64'), [24,]), relay.reshape(var_910.astype('uint16'), [2,]), ), 3)
bop_915 = relay.floor_divide(bop_899.astype('float32'), relay.reshape(bop_871.astype('float32'), relay.shape_of(bop_899))) # shape=(13, 6)
uop_923 = relay.tan(bop_849.astype('float64')) # shape=(13, 6)
output = relay.Tuple([call_864,var_865,var_866,uop_868,bop_879,bop_896,bop_903,call_907,const_908,var_909,var_910,bop_915,uop_923,])
output2 = relay.Tuple([call_867,var_865,var_866,uop_868,bop_879,bop_896,bop_903,call_911,const_908,var_909,var_910,bop_915,uop_923,])
func_926 = relay.Function([var_841,var_852,var_865,var_866,var_870,var_895,var_909,var_910,], output)
mod['func_926'] = func_926
mod = relay.transform.InferType()(mod)
var_927 = relay.var("var_927", dtype = "float64", shape = (13, 6))#candidate|927|(13, 6)|var|float64
var_928 = relay.var("var_928", dtype = "float64", shape = (13, 6))#candidate|928|(13, 6)|var|float64
var_929 = relay.var("var_929", dtype = "float32", shape = (3, 84))#candidate|929|(3, 84)|var|float32
var_930 = relay.var("var_930", dtype = "float32", shape = (900,))#candidate|930|(900,)|var|float32
var_931 = relay.var("var_931", dtype = "bool", shape = (13, 6))#candidate|931|(13, 6)|var|bool
var_932 = relay.var("var_932", dtype = "uint8", shape = (13, 6))#candidate|932|(13, 6)|var|uint8
var_933 = relay.var("var_933", dtype = "float64", shape = (24,))#candidate|933|(24,)|var|float64
var_934 = relay.var("var_934", dtype = "uint16", shape = (2,))#candidate|934|(2,)|var|uint16
output = func_926(var_927,var_928,var_929,var_930,var_931,var_932,var_933,var_934,)
func_935 = relay.Function([var_927,var_928,var_929,var_930,var_931,var_932,var_933,var_934,], output)
mutated_mod['func_935'] = func_935
mutated_mod = relay.transform.InferType()(mutated_mod)
func_448_call = mod.get_global_var('func_448')
func_450_call = mutated_mod.get_global_var('func_450')
call_942 = relay.TupleGetItem(func_448_call(), 1)
call_943 = relay.TupleGetItem(func_450_call(), 1)
var_961 = relay.var("var_961", dtype = "float64", shape = (5, 12))#candidate|961|(5, 12)|var|float64
bop_962 = relay.greater_equal(call_942.astype('bool'), relay.reshape(var_961.astype('bool'), relay.shape_of(call_942))) # shape=(5, 12)
bop_965 = relay.greater_equal(call_943.astype('bool'), relay.reshape(var_961.astype('bool'), relay.shape_of(call_943))) # shape=(5, 12)
bop_966 = relay.maximum(call_942.astype('float64'), relay.reshape(bop_962.astype('float64'), relay.shape_of(call_942))) # shape=(5, 12)
bop_969 = relay.maximum(call_943.astype('float64'), relay.reshape(bop_965.astype('float64'), relay.shape_of(call_943))) # shape=(5, 12)
func_804_call = mod.get_global_var('func_804')
func_807_call = mutated_mod.get_global_var('func_807')
var_975 = relay.var("var_975", dtype = "float32", shape = (14,))#candidate|975|(14,)|var|float32
call_974 = func_804_call(relay.reshape(var_975.astype('float32'), [14,]), relay.reshape(var_975.astype('float32'), [14,]), )
call_976 = func_804_call(relay.reshape(var_975.astype('float32'), [14,]), relay.reshape(var_975.astype('float32'), [14,]), )
bop_979 = relay.add(var_961.astype('int16'), relay.reshape(call_942.astype('int16'), relay.shape_of(var_961))) # shape=(5, 12)
bop_982 = relay.add(var_961.astype('int16'), relay.reshape(call_943.astype('int16'), relay.shape_of(var_961))) # shape=(5, 12)
var_990 = relay.var("var_990", dtype = "int16", shape = (5, 12))#candidate|990|(5, 12)|var|int16
bop_991 = relay.power(bop_979.astype('float32'), relay.reshape(var_990.astype('float32'), relay.shape_of(bop_979))) # shape=(5, 12)
bop_994 = relay.power(bop_982.astype('float32'), relay.reshape(var_990.astype('float32'), relay.shape_of(bop_982))) # shape=(5, 12)
output = relay.Tuple([bop_966,call_974,var_975,bop_991,])
output2 = relay.Tuple([bop_969,call_976,var_975,bop_994,])
func_1000 = relay.Function([var_961,var_975,var_990,], output)
mod['func_1000'] = func_1000
mod = relay.transform.InferType()(mod)
mutated_mod['func_1000'] = func_1000
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1000_call = mutated_mod.get_global_var('func_1000')
var_1002 = relay.var("var_1002", dtype = "float64", shape = (5, 12))#candidate|1002|(5, 12)|var|float64
var_1003 = relay.var("var_1003", dtype = "float32", shape = (14,))#candidate|1003|(14,)|var|float32
var_1004 = relay.var("var_1004", dtype = "int16", shape = (5, 12))#candidate|1004|(5, 12)|var|int16
call_1001 = func_1000_call(var_1002,var_1003,var_1004,)
output = call_1001
func_1005 = relay.Function([var_1002,var_1003,var_1004,], output)
mutated_mod['func_1005'] = func_1005
mutated_mod = relay.transform.InferType()(mutated_mod)
func_448_call = mod.get_global_var('func_448')
func_450_call = mutated_mod.get_global_var('func_450')
call_1021 = relay.TupleGetItem(func_448_call(), 1)
call_1022 = relay.TupleGetItem(func_450_call(), 1)
func_464_call = mod.get_global_var('func_464')
func_467_call = mutated_mod.get_global_var('func_467')
var_1034 = relay.var("var_1034", dtype = "float32", shape = (64,))#candidate|1034|(64,)|var|float32
call_1033 = func_464_call(relay.reshape(var_1034.astype('float32'), [8, 8]))
call_1035 = func_464_call(relay.reshape(var_1034.astype('float32'), [8, 8]))
func_643_call = mod.get_global_var('func_643')
func_645_call = mutated_mod.get_global_var('func_645')
const_1043 = relay.const([4.685468,9.069287,8.252470,-7.252992,0.692837,-7.823297,-1.662666,-7.324169,-0.169423,2.669604,6.594626,3.402302,-9.881718,-1.456720,-0.817342,-0.108229,7.541572,7.272219,-6.096518,-5.242696,-7.209413,-1.409909,0.573603,5.899412,-0.296413,-3.400369,-4.567967,-0.686831,-3.669463,-3.698009,-9.494978,-7.849954,-6.578033,5.653036,-5.355542,-9.270436,-3.567254,8.900919,0.450522,-1.746005,7.493161,7.077237], dtype = "float64")#candidate|1043|(42,)|const|float64
call_1042 = relay.TupleGetItem(func_643_call(relay.reshape(const_1043.astype('float64'), [3, 14])), 3)
call_1044 = relay.TupleGetItem(func_645_call(relay.reshape(const_1043.astype('float64'), [3, 14])), 3)
output = relay.Tuple([call_1021,call_1033,var_1034,call_1042,const_1043,])
output2 = relay.Tuple([call_1022,call_1035,var_1034,call_1044,const_1043,])
func_1046 = relay.Function([var_1034,], output)
mod['func_1046'] = func_1046
mod = relay.transform.InferType()(mod)
mutated_mod['func_1046'] = func_1046
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1047 = relay.var("var_1047", dtype = "float32", shape = (64,))#candidate|1047|(64,)|var|float32
func_1046_call = mutated_mod.get_global_var('func_1046')
call_1048 = func_1046_call(var_1047)
output = call_1048
func_1049 = relay.Function([var_1047], output)
mutated_mod['func_1049'] = func_1049
mutated_mod = relay.transform.InferType()(mutated_mod)
func_448_call = mod.get_global_var('func_448')
func_450_call = mutated_mod.get_global_var('func_450')
call_1060 = relay.TupleGetItem(func_448_call(), 0)
call_1061 = relay.TupleGetItem(func_450_call(), 0)
func_109_call = mod.get_global_var('func_109')
func_113_call = mutated_mod.get_global_var('func_113')
const_1075 = relay.const([-6.243994,-8.896878,-4.306505,5.421674,1.885695,3.717222,-3.798703,2.501115,2.182882,1.219473,1.313998,-5.935406,7.718888,1.800292,1.902072,-1.549693,7.868171,-0.098414,5.116019,5.852023,9.433651,-7.512785,-4.391428,8.166296,-9.968874,7.909000,-2.217476,-5.088287,5.904810,-0.333340,-2.245492,-6.406188,8.800346,-1.166134,-1.427492,-0.339076,-1.685545,-5.566139,-2.605585,-6.795837,-7.623677,2.232315,-4.883544,-3.463609,6.727096,-1.902299,-1.633286,2.565310,5.033064,-2.871168,-6.888974,-7.225413,8.843071,6.554384,-1.017265,2.567403,-4.333623,0.358149,-1.314081,-4.865004,1.960906,1.380721,-5.329884,4.866789,-7.871880,1.892268,-4.615140,-7.488311,-6.685001,-7.085016,3.055093,0.793515,-7.946798,-4.399419,4.147524,-3.490134,0.371183,-0.610407,-2.403820,-1.667356,7.787101,3.908911,6.471401,4.901534,-9.471782,-3.644141,6.212206,0.457222,-7.480358,-3.008328,-4.931555,-3.349212,6.213384,8.422843,2.711075,-5.113798,-7.688792,-7.154161,3.050093,8.312970,3.718607,-3.013052,-0.216987,-9.125386,9.104559,-8.979912,0.946751,-2.800252,4.712702,8.170762,7.343506,2.937884,1.907659,8.668109,7.848767,-7.940948,-3.078296,-9.885370,-4.805617,2.108515,7.792229,-0.665477,8.493500,9.820219,-1.071291,9.105757,5.874990,5.836561,-3.066891,4.485562,-7.579439,2.629111,-4.893504,6.029160,-0.370274,4.918769,-9.955298,3.301063,-3.922834,-5.808460,6.570407,-2.666492,-0.745546,4.149893,-7.426546,-0.395776,5.501740,5.928983,6.527150,-5.067283,0.279226,-2.788693,5.271514,1.137782,-1.264347,3.564693,0.303226,-8.211233,7.609996,2.963716,1.680177,-0.090109,6.501457,-3.576680,-4.202136,-3.380485,-8.112792,5.467172,-1.193167,1.968187,-3.917355,-5.590151,-8.043767,1.342678,4.401315,0.903547,5.584797,5.479197,4.801913,1.143010,-2.079639,-0.598782,-3.858508,2.543745,-7.083310,-2.517869,7.235755,2.775126,8.402014,5.686468,5.211538,0.816386,8.055872,9.334487,4.361936,-0.277054,-5.110480,-2.012667,6.904221,-4.775493,3.594246,-0.370959,0.894494,-8.865808,5.818026,1.923595,4.895459,7.213250,5.390353,9.327045,6.156987,6.563659,-5.059812,4.935194,0.724639,-1.293519,-9.891927,7.858460,-0.520898,-1.323587,4.520913,-2.285351,7.135119,9.424757,-3.225337,5.779562,2.670537,1.717554,-7.030799,1.748894,-7.376941,-4.488578,-6.952481,9.662302,-3.071357,-1.443945,8.324128,-8.297304,-9.840986,-6.003571,-6.480094,1.420867,-6.291709,-1.321281,1.427117,-9.700020,4.879062,-7.777570,-7.403779,-8.411885,5.563867,-8.903500], dtype = "float32")#candidate|1075|(252,)|const|float32
const_1076 = relay.const([3.194637,-1.652780,5.096684,3.886889,-5.610214,3.164103,9.125481,-0.432357,-5.332544,-8.825736,-7.517054,9.469423,-3.811014,-7.169506,-7.605669,5.781857,1.570952,-8.594864,0.261451,-1.737122,9.190962,7.936058,4.940957,7.218530,-0.718319,-3.964983,-2.556023,7.645268,-4.455639,-0.605412,8.711916,-8.717263,2.173392,-8.338947,-5.266823,-0.318180,-0.367065,-4.487168,4.914428,1.394357,2.935703,-5.419319,-8.908042,-7.411403,-7.455304,8.700303,5.580608,-0.702317,-0.070564,2.436366,-4.255368,-8.662364,-1.103642,-6.434367,-8.859823,6.768836,-0.536551,9.690064,3.856548,5.667231,-7.558885,-7.249564,-2.301070,-0.032279,5.066138,3.286653,-0.708550,-5.034658,-1.357640,-9.564292,-1.665985,-3.916696,-4.734527,1.379243,-6.689916,1.491767,-4.972971,-6.256488,-2.287744,0.171206,-7.450304,5.166137,0.432858,6.822113,3.396414,-9.293347,-4.138450,-2.323601,2.588031,-5.653462,-5.836058,-6.815504,4.020684,3.986618,-2.943793,3.206916,0.742649,0.599592,-9.798265,-9.687145,-9.986160,-8.371493,1.168073,0.820093,-2.048772,-2.074209,9.644821,0.755362,8.344411,7.420017,-8.744288,1.929638,2.259614,-5.622080,4.538191,6.561737,3.376999,-7.872143,-1.668694,3.142948,-2.493272,5.436641,0.676114,-0.878499,3.920894,-0.455527,1.949728,9.530096,-6.739064,-9.664602,-8.772521,0.887354,4.364040,8.425344,-0.583413,9.996650,-9.918417,-1.525259,3.509958,8.782962,-5.123550,-3.361565,2.647067,5.208453,8.117018,9.733737,8.009051,-2.465802,8.542679,2.401518,-7.254539,-9.398337,8.367034,-8.064188,8.422772,-3.074831,0.100305,3.325471,-6.945978,-7.760864,1.300392,-6.542138,1.651193,8.290208,-9.613610,-5.798099,9.567127,8.112706,4.429778,-6.481964,6.326195,4.159549,2.700297,0.767022,1.276586,-0.293960,-0.885828,3.699274,8.425582,-4.264358,2.961997,-8.031915,0.711297,-7.718458,-3.212484,4.882056,0.233663,-7.077203,-0.431050,-0.590584,-3.864552,-1.217457,5.151282,-6.900861,-9.974093,-8.116893,4.322462,1.925036,4.027306,9.988388,-4.367350,6.348893,0.891128,-4.738395,-6.582394,1.139650,0.317184,5.128652,-4.463602,3.924946,-2.595452,-2.585117,8.848000,-0.918515,9.333300,-1.293012,-7.163737,6.567174,1.621041,7.475500,0.344579,-6.309469,-0.723100,9.670901,6.462896,-5.003324,5.086711,8.905461,-7.515729,5.259750,-1.571398,8.521556,2.769488,-4.305537,-3.762059,-6.664155,3.832052,0.842246,-5.136029,-0.400544,5.568918,6.329124,6.232554,3.729108,-4.279667,-4.180935,-1.562649,-8.475434,-2.214077,5.489667,-7.080684,-8.601882,-8.452874,-2.991855,6.688718,5.659061,0.603561,6.403412,2.181664,-5.263007,9.928440,-8.209209,-1.068213,0.886152,-0.037257,8.957720,2.675466,-0.765873,9.816496,-4.009104,8.317639,-5.789534,2.246571,1.720243,-9.703439,-6.548719,-7.980851,-5.603502,4.089270,-0.988242,-6.324004,5.558624,6.930020,8.407401,-3.333099,8.031341,9.617456,-4.529166,1.047574,-6.298295,1.254619,2.013200,9.877121,-2.214582,-2.375432,-8.969738,-5.948224,-3.260551,8.621866,5.423042,5.352051,4.125569,-4.138287,3.761487,-6.710944,3.661501,3.795815,7.427144,-6.333749,1.832978,-6.795460,8.697092,5.531671,1.575223,-6.489251,-8.630006,6.602485,-6.363850,6.675388,-8.400879,0.224790,5.156131,-8.005800,-2.786871,-3.084780,4.109572,2.374133,-6.526662,-1.372584,-1.694339,-6.043399,3.819198,-3.145095,4.238186,7.412951,4.256707,4.617239,3.001407,-1.323277,2.661372,-1.155604,2.718199,3.252325,-5.744600,3.840138,-7.718411,-4.987799,-5.397169,-3.618935,-8.582801,4.942997,-2.094935,7.656314,-9.284497,8.851589,-9.126900,2.192786,-8.345033,0.968073,-9.205358,9.035952,-0.997062,-8.987462,-4.537984,-9.952963,2.258255,5.490599,4.592740,9.488895,-6.391835,2.644020,-0.769818,-4.659603,9.028542,-8.497929,6.509083,3.241147,8.903431,-6.730673,-1.386627,-7.528771,-5.764140,9.750178,-2.434128,8.442167,-6.006471,-0.167370,6.465726,8.913982,-5.568019,5.774125,5.354133,-5.492077,-0.253744,-9.039576,9.284010,-8.714838,-5.314115,9.798528,5.245660,4.541183,0.928493,-9.108374,2.162574,-8.713917,2.748362,7.270066,-5.045797,5.179284,-3.171620,6.547760,6.532345,7.707556,6.110253,-8.457739,4.001571,-0.490727,4.043977,-6.771965,-7.584411,4.345787,-1.161016,-1.674898,-9.465987,0.214354,-5.026047,-5.681313,2.184425,0.074131,6.826163,8.493362,-7.296712,1.418678,-5.225718,-8.017657,-0.003446,5.686436,-4.574597,7.944673,2.213127,5.135982,2.337823,9.268404,0.979689,-1.512819,0.757454,8.852416,0.360114,9.261149,-0.428437,7.686556,9.638799,2.381123,-0.836504,-7.767406,-8.367489,7.531398,-9.330805,-0.135941,-2.712032,-7.270631,-8.932451,2.699568,-9.219101,7.510409,-2.909167,-4.335019,8.184039,1.015662,-4.717466,-3.476559,6.747574,5.159070,-3.662894,0.656591,-4.925997,-9.015778,1.563677,-6.486641,2.475292,7.358203,-5.091836,8.279575,5.201226,-2.580859,0.218198,-3.500546,-9.475005,-6.913018,3.969132,1.380400,2.862376,-9.961435,6.017488,-0.118774,4.870133,-6.777283,4.914766,3.883145,-9.415339,3.898534,-8.455178,-1.778123,4.841385,-9.444354,-7.051137,-9.837502,1.012623,3.745074,0.240885,5.466476,0.171056,4.578910,-8.497500,4.450283,-9.144007,-1.193598,9.160597,5.585330,2.426766,7.634204,-9.536460,1.396612,9.573273,-7.204225,-1.620466,6.377304,-0.531219,3.746511,7.006841,5.905740,4.401848,7.637129,6.239851,3.521316,-7.925229,-1.873375,-8.055532,-9.937785,-3.660736,-8.517859,6.120177,-8.210119,-8.799996,-8.553931,1.935948,6.204135,0.549516,9.065812,-3.583586,2.789724,9.391136,1.617892,9.424820,5.942012,-9.903916,-2.619802,7.295448,5.867999,-2.366038,-6.748157,-8.870325,-1.938424,-1.718122,-8.739547,-2.256178,6.113363,6.762275,5.626646,-8.532224,3.922899,8.991429,-0.147948,-7.441587,-7.730193,2.529085,-8.547416,4.850565,8.498238,-9.072357,-6.751287,4.634579,4.652888,-3.412603,9.972746,1.995768,5.985360,6.296575,-1.871561,-3.020595,-9.939242,5.975311,4.941997,-4.956469,-5.632832,-5.444683,3.007751,-2.737117,-7.356556,-2.833557,4.430886,-0.433630,-4.942887,0.443413,-3.258676,5.165451,6.786193,5.623030,2.999225,-0.333136,7.904994,-8.589217,-0.115889,3.189886,5.104360,6.670983,3.741905,-5.688131,9.651004,-7.310078,7.447281,-9.676078,-8.017858,4.375643,4.930762,1.344882,-6.696580,-4.823548,-9.314042,1.848977,1.923167,4.751656,4.772207,-3.130275,7.834695,-6.465603,-0.443347,6.183763,-3.099080,7.662996,-6.000926,-9.536734,-6.632772,-8.352812,-4.667050,3.493613,-7.517760,9.306663,-2.592627,-7.522217,-3.947721,-6.124113,3.047413,-3.646164,-6.363863,-0.077657,-9.036026,8.123380,9.127410,-5.258836,8.510896,5.485871,-0.420144,0.860691,-4.957677,-5.314475,-2.540205,0.930654,-3.832932,-4.118565,4.802235,-3.802511,2.722991,5.853641,5.739199,6.072931,9.326773,-6.972185,2.478563,-7.594577,9.971421,-9.017649,4.900048,7.836316,7.650358,-9.303089,-6.243650,8.426173,-6.966592,-8.530492,-2.525060,-3.133517,-5.091302,2.026988,1.382673,7.651629,-6.124679,-3.901292,-7.773071,3.504909,3.325764,-1.618545,-2.073215,-0.425585,-5.143726,-2.079021,-4.158609,-8.356720,8.711309,-6.892949,2.561499,2.455400,8.729570,2.611016,-7.984567,-9.445300,-1.055023,5.681028,-5.545102,1.176924,6.644599,0.637903,0.593569,-5.224639,0.591382,7.235780,5.425529,-4.014739,-2.684533,-4.028197,-1.278098,2.149488,1.258477,-4.325554,-1.007398,2.468224,1.658534,5.365815,-0.565649,-2.263274,-3.969301,7.417730,-7.661707,-2.616562,9.499653,0.138797,7.170709,5.488218,-5.344501,-5.033888,7.394640,-3.796804,-1.231723,3.228468,1.106297,-3.165837,0.449910,4.959700,4.183608,9.303819,-1.997396,1.309830,3.660811,1.647668,-7.794658,-4.949065,5.501679,-6.212764,-6.332233,-5.086940,1.229672,4.024619,-7.929425,3.869524,-1.891306,4.264410,3.083351,0.633192,4.764833,-2.276830,-1.655777,6.179439,2.600972,-8.902119,-7.663335,-0.509305,4.676784,-1.630777,-8.898295,-2.716562,-7.281902,-6.900718,-6.974124,-5.972163,-7.275813,7.023979,0.496799,-8.436740,-2.554548,-0.847287,3.486789,3.207831,-3.707915,6.722404,7.389092,-7.596997,8.275321,2.832033,-0.079649,1.751126,8.191406,2.523986,3.533083,4.295649,-7.297256,-1.701337,-0.720715,2.009722,-1.465850,-0.893297,-4.833824,5.130163,4.908901,5.199800,8.670938,-6.170848,1.794333,0.909249,0.252287,-1.627838,9.813187,8.671492,-7.697566,-2.176956,4.103006,-8.428290,9.553344,8.123876,6.772979,-7.737129,6.630959,7.193803,6.204613,-5.980665,7.034330,-2.785361,3.203402,7.707668,-8.699430,-7.014295,-2.508066,3.103571,6.598944,-2.790744,4.761745,9.723639,3.960456,9.857301,4.755105,7.688288,6.876598,4.353853,3.726720,-5.031103,1.817981,-5.129680,-0.606853,4.409215,-6.783352,-6.114972,7.106868,5.701986,-8.457768,9.248687,-0.602983,-8.415245,-7.888359,-3.638213,-0.344703,-8.710722,-7.489076,5.990198,-1.531994,-6.079865,-9.673053,6.795069,-2.814496,-0.451129,5.894288,-6.710726,-0.571375,7.427628,6.218536,4.366376,9.116467,0.701654,-8.995963,-3.191563,2.211275,1.569472], dtype = "float32")#candidate|1076|(900,)|const|float32
call_1074 = relay.TupleGetItem(func_109_call(relay.reshape(const_1075.astype('float32'), [3, 12, 7]), relay.reshape(const_1076.astype('float32'), [900,]), ), 0)
call_1077 = relay.TupleGetItem(func_113_call(relay.reshape(const_1075.astype('float32'), [3, 12, 7]), relay.reshape(const_1076.astype('float32'), [900,]), ), 0)
output = relay.Tuple([call_1060,call_1074,const_1075,const_1076,])
output2 = relay.Tuple([call_1061,call_1077,const_1075,const_1076,])
func_1090 = relay.Function([], output)
mod['func_1090'] = func_1090
mod = relay.transform.InferType()(mod)
mutated_mod['func_1090'] = func_1090
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1090_call = mutated_mod.get_global_var('func_1090')
call_1091 = func_1090_call()
output = call_1091
func_1092 = relay.Function([], output)
mutated_mod['func_1092'] = func_1092
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1093 = relay.var("var_1093", dtype = "float32", shape = (8, 6))#candidate|1093|(8, 6)|var|float32
var_1094 = relay.var("var_1094", dtype = "float32", shape = (8, 6))#candidate|1094|(8, 6)|var|float32
bop_1095 = relay.divide(var_1093.astype('float32'), relay.reshape(var_1094.astype('float32'), relay.shape_of(var_1093))) # shape=(8, 6)
bop_1099 = relay.multiply(var_1094.astype('int64'), relay.reshape(bop_1095.astype('int64'), relay.shape_of(var_1094))) # shape=(8, 6)
bop_1102 = relay.minimum(bop_1099.astype('float64'), relay.reshape(bop_1095.astype('float64'), relay.shape_of(bop_1099))) # shape=(8, 6)
output = relay.Tuple([bop_1102,])
output2 = relay.Tuple([bop_1102,])
func_1112 = relay.Function([var_1093,var_1094,], output)
mod['func_1112'] = func_1112
mod = relay.transform.InferType()(mod)
mutated_mod['func_1112'] = func_1112
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1112_call = mutated_mod.get_global_var('func_1112')
var_1114 = relay.var("var_1114", dtype = "float32", shape = (8, 6))#candidate|1114|(8, 6)|var|float32
var_1115 = relay.var("var_1115", dtype = "float32", shape = (8, 6))#candidate|1115|(8, 6)|var|float32
call_1113 = func_1112_call(var_1114,var_1115,)
output = call_1113
func_1116 = relay.Function([var_1114,var_1115,], output)
mutated_mod['func_1116'] = func_1116
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1127 = relay.var("var_1127", dtype = "int16", shape = (8, 9, 10))#candidate|1127|(8, 9, 10)|var|int16
const_1128 = relay.const([[[1,7,9,-6,-4,-8,6,-10,5,-5],[-9,5,1,4,2,9,6,-9,-4,1],[5,-7,-5,7,6,-8,9,10,3,-9],[8,10,-3,-8,-1,7,10,-6,-2,6],[-7,5,-10,-5,1,-7,1,10,6,5],[6,-3,5,-3,6,-6,-6,8,-6,-8],[-6,-5,-4,-3,4,8,-9,8,4,-10],[1,-3,7,-2,6,-9,6,-9,10,3],[-1,3,3,3,-3,8,-9,8,4,-8]],[[-9,-1,2,9,6,-5,2,7,1,5],[-1,5,-3,5,-4,-6,-1,-10,-10,6],[-9,-3,2,8,-7,7,-5,-9,7,6],[8,-4,2,1,-3,8,-9,4,-8,-5],[5,-5,4,1,-10,5,-10,5,3,3],[-3,7,-9,-3,3,-4,-10,1,4,7],[10,2,-9,3,2,-7,5,1,2,3],[-2,6,-5,-5,-10,5,-4,-1,3,-6],[-7,4,-6,-6,-8,6,5,1,-10,2]],[[-9,-9,1,6,1,1,-5,-10,7,-1],[-6,-5,8,2,10,-5,1,2,3,6],[-1,2,1,9,9,-2,-5,-7,-1,-1],[4,-10,2,-9,-1,1,-1,10,-6,-9],[-6,-1,6,-6,-10,7,-6,1,10,-5],[4,-5,-8,6,-1,-10,-5,-10,10,7],[-6,5,3,2,-3,-6,-2,3,-3,3],[-5,-3,-3,-3,-2,2,-7,1,-3,7],[9,-5,4,10,-9,3,5,6,10,10]],[[2,-9,-1,2,1,-1,3,-1,6,-4],[4,2,-3,9,10,3,-3,2,3,9],[-3,6,8,3,-9,-2,-4,6,3,-1],[5,6,6,-2,-5,-5,-1,6,-8,-3],[8,2,10,-1,3,7,-8,6,4,-5],[8,7,8,-1,4,5,-1,-6,-5,5],[9,-8,6,10,-1,-9,4,-10,-1,1],[5,9,-3,7,10,-7,-4,7,-6,-2],[-2,8,10,8,-9,9,5,1,3,-5]],[[10,3,5,-5,-6,2,9,4,7,3],[3,1,-1,3,10,6,-9,3,-8,-9],[-7,-2,8,-8,-10,-3,4,-10,-6,-7],[-2,-8,4,5,2,-8,-4,9,-8,6],[-9,-2,5,-8,-6,9,9,-7,1,-7],[-7,-3,-5,2,9,-3,9,1,-7,6],[5,-9,3,7,1,6,-9,10,1,-9],[-4,-9,8,-8,1,8,7,10,5,-3],[-3,6,-8,-8,-10,9,9,-6,10,-2]],[[8,-8,-7,-7,8,-9,-9,-3,-3,5],[-7,-7,2,5,-9,-4,-7,4,-3,-6],[-4,-1,2,-1,-6,8,1,-2,-1,7],[-4,-9,-5,6,-7,-8,1,-4,-7,10],[9,9,-5,3,5,-8,-2,1,1,5],[2,-6,7,6,5,7,3,-6,-6,4],[10,2,8,-9,-3,-6,-2,-5,-4,-2],[6,5,-5,8,1,-5,-4,4,2,-1],[-10,9,-1,8,7,6,-9,-5,-3,8]],[[-4,6,-1,8,-4,10,7,-5,-6,-4],[4,10,-3,10,5,10,4,-5,-6,10],[-5,-3,10,1,-2,-2,-6,-2,5,-5],[-1,-10,-2,-9,2,-8,2,9,1,9],[-6,-10,3,-1,3,9,-4,-10,-7,-5],[-10,8,-6,3,7,-3,-5,5,-6,-6],[-4,-6,7,-5,6,-3,-6,-8,8,-2],[-7,9,-9,-10,1,-5,-1,5,6,2],[1,8,-8,2,2,-10,10,-1,-4,-5]],[[4,-1,-10,3,-8,5,2,-9,-4,4],[-6,4,-6,8,-3,6,-2,2,-5,7],[2,5,9,-2,-4,8,-3,-9,-7,-2],[9,-8,6,4,-7,-7,6,4,-3,-6],[-5,10,-7,8,5,4,7,-8,4,-6],[-4,1,-2,-5,1,5,-8,-3,-5,10],[-2,-5,-6,4,6,10,-3,-2,-6,-4],[-8,5,4,-2,-1,-1,7,-2,9,-3],[-5,7,-4,5,-5,10,-7,-1,3,2]]], dtype = "int16")#candidate|1128|(8, 9, 10)|const|int16
bop_1129 = relay.right_shift(var_1127.astype('int16'), relay.reshape(const_1128.astype('int16'), relay.shape_of(var_1127))) # shape=(8, 9, 10)
bop_1135 = relay.power(const_1128.astype('float64'), relay.reshape(bop_1129.astype('float64'), relay.shape_of(const_1128))) # shape=(8, 9, 10)
bop_1138 = relay.logical_xor(bop_1129.astype('uint32'), relay.reshape(var_1127.astype('uint32'), relay.shape_of(bop_1129))) # shape=(8, 9, 10)
bop_1142 = relay.less(bop_1135.astype('bool'), relay.reshape(const_1128.astype('bool'), relay.shape_of(bop_1135))) # shape=(8, 9, 10)
const_1147 = relay.const([[[6,-1,5,2,-3,-1,-7,6,8,3],[-9,-10,8,6,-7,1,1,4,7,1],[2,-10,-9,-6,-2,10,-7,10,10,-5],[8,-10,9,2,1,-6,5,1,-4,-1],[-8,-10,3,-8,-3,-10,8,-8,4,-3],[-5,-8,-8,-6,-8,1,-2,-8,-8,-10],[9,1,-7,-4,-1,6,5,8,-4,6],[-3,-7,7,-10,2,-5,7,6,-7,9],[-7,-3,10,8,6,-6,-10,-4,8,1]],[[3,1,-3,7,9,-5,-10,1,-10,2],[2,4,10,-10,-1,8,-8,-3,-8,-1],[6,-5,4,4,4,9,5,7,-9,-6],[9,-4,5,-8,-8,1,-4,-10,-2,-4],[2,10,5,5,-8,6,-6,-4,8,5],[-2,-9,5,-7,-4,3,4,-5,3,-5],[-10,-8,-1,-7,-8,-4,1,9,3,-10],[8,-6,9,3,1,4,-9,6,-7,-9],[-7,7,6,-1,1,9,7,2,-7,7]],[[-3,9,-3,3,10,-7,7,-3,10,-6],[-7,10,10,-7,7,5,5,3,1,-10],[-2,-9,2,1,-8,-3,-2,9,7,1],[2,-5,1,4,5,-4,4,-5,-5,-8],[-5,-8,-4,-9,2,4,-5,10,-6,-8],[10,-10,-5,-1,-1,-3,-10,3,5,6],[3,1,10,4,6,8,5,-10,-3,1],[10,4,5,5,-1,-7,-2,2,8,9],[-9,-9,7,3,2,7,7,3,9,2]],[[-10,2,-7,-3,2,10,1,4,-1,-9],[2,-5,5,3,-6,2,3,-8,-10,-7],[5,4,9,3,8,2,-5,-10,-5,-4],[7,-6,2,5,5,6,1,5,1,-1],[7,8,-10,-4,-1,-7,4,3,7,10],[9,-1,8,-10,3,6,5,-4,2,2],[-6,-6,-4,6,4,-5,-4,3,4,10],[7,9,-2,8,3,-9,-1,-1,3,-6],[3,-4,-10,8,-2,-3,-6,10,-7,2]],[[-10,-1,8,-6,9,-2,5,-3,2,-9],[10,3,4,2,4,3,6,5,-6,-7],[-2,1,-2,4,-6,10,7,-1,-9,-4],[10,-6,-1,-10,-1,6,-5,-5,-1,-3],[-4,-4,8,-1,2,-1,3,9,-10,3],[-8,-7,5,-2,-10,5,9,2,7,-4],[1,1,3,-7,1,-4,-6,3,-2,-8],[-1,-4,-4,-10,2,-10,-9,6,-3,7],[-1,-2,-2,8,10,-8,-1,-3,-1,-4]],[[7,5,-6,-2,-1,2,9,-1,-7,-7],[-5,9,-7,10,3,2,-1,10,7,-6],[-10,-2,-10,-2,-10,-7,-5,-2,7,2],[-10,-4,1,-6,-5,-7,-9,-3,-2,10],[-3,-8,1,3,-5,-10,9,-4,7,9],[2,-4,-4,4,2,-7,-10,3,8,1],[-3,8,4,-2,-2,2,6,-9,-5,-6],[8,1,-10,-9,-2,-2,1,5,-2,10],[-8,9,10,-6,-4,9,-8,10,-5,-8]],[[9,-2,-10,10,5,-7,2,-9,-6,7],[-7,-2,9,3,-10,2,1,-2,4,2],[-3,2,-6,10,-6,-4,7,6,-5,-1],[9,6,1,10,3,-5,-2,-2,10,2],[2,8,9,5,-4,3,-4,-3,7,10],[-5,6,2,8,1,7,-4,-3,1,-1],[6,10,2,-7,-7,9,-10,1,-5,3],[7,-9,6,-7,10,6,1,8,-9,2],[-1,-8,-6,-4,-8,-6,8,-9,9,-5]],[[-4,-7,-7,6,-9,10,1,-1,-8,9],[2,2,-3,8,5,-1,4,-3,4,-7],[-10,-2,-6,8,-8,10,2,-1,3,9],[3,-8,-9,-8,-2,5,-1,-3,-10,2],[7,7,6,-6,-9,8,4,-9,-8,-5],[3,4,-7,-2,7,-4,-6,6,8,10],[7,-9,7,-6,-6,-7,3,4,10,6],[8,4,10,5,-9,7,-4,-9,-6,-7],[-5,3,10,9,-3,-7,-6,4,-8,8]]], dtype = "int16")#candidate|1147|(8, 9, 10)|const|int16
bop_1148 = relay.logical_and(bop_1129.astype('bool'), relay.reshape(const_1147.astype('bool'), relay.shape_of(bop_1129))) # shape=(8, 9, 10)
bop_1153 = relay.left_shift(const_1128.astype('uint16'), relay.reshape(bop_1135.astype('uint16'), relay.shape_of(const_1128))) # shape=(8, 9, 10)
uop_1158 = relay.log(bop_1142.astype('float32')) # shape=(8, 9, 10)
bop_1160 = relay.minimum(uop_1158.astype('uint16'), relay.reshape(bop_1142.astype('uint16'), relay.shape_of(uop_1158))) # shape=(8, 9, 10)
func_464_call = mod.get_global_var('func_464')
func_467_call = mutated_mod.get_global_var('func_467')
var_1167 = relay.var("var_1167", dtype = "float32", shape = (64,))#candidate|1167|(64,)|var|float32
call_1166 = func_464_call(relay.reshape(var_1167.astype('float32'), [8, 8]))
call_1168 = func_464_call(relay.reshape(var_1167.astype('float32'), [8, 8]))
func_731_call = mod.get_global_var('func_731')
func_736_call = mutated_mod.get_global_var('func_736')
const_1173 = relay.const([7,6,-9,-1,4,4], dtype = "int64")#candidate|1173|(6,)|const|int64
var_1174 = relay.var("var_1174", dtype = "float64", shape = (24,))#candidate|1174|(24,)|var|float64
const_1175 = relay.const([[10,-7]], dtype = "uint16")#candidate|1175|(1, 2)|const|uint16
call_1172 = relay.TupleGetItem(func_731_call(relay.reshape(const_1173.astype('int64'), [6,]), relay.reshape(var_1174.astype('float64'), [24,]), relay.reshape(const_1175.astype('uint16'), [2,]), ), 3)
call_1176 = relay.TupleGetItem(func_736_call(relay.reshape(const_1173.astype('int64'), [6,]), relay.reshape(var_1174.astype('float64'), [24,]), relay.reshape(const_1175.astype('uint16'), [2,]), ), 3)
var_1180 = relay.var("var_1180", dtype = "uint16", shape = (8, 9, 10))#candidate|1180|(8, 9, 10)|var|uint16
bop_1181 = relay.bitwise_and(bop_1160.astype('uint8'), relay.reshape(var_1180.astype('uint8'), relay.shape_of(bop_1160))) # shape=(8, 9, 10)
bop_1185 = relay.divide(bop_1160.astype('float64'), relay.reshape(bop_1153.astype('float64'), relay.shape_of(bop_1160))) # shape=(8, 9, 10)
func_684_call = mod.get_global_var('func_684')
func_687_call = mutated_mod.get_global_var('func_687')
const_1189 = relay.const([0.101467,8.632714,-4.578411,0.146108,4.565938,-5.914994,-9.860188,1.206513,8.872931,-1.332310,-3.948580,-7.576179,8.807560,5.945967,8.072576,-9.914797,-2.834224,-2.131622,-8.439552,-1.139438,5.129932,-0.255630,9.046798,-3.049459,-9.905889,-4.471564,2.991160,1.001956,8.460074,-9.722368,4.263936,0.399633,-3.188835,-5.570716,-8.549764,1.643048,8.150632,4.424326,6.531288,6.066204,-7.984647,9.753055,-2.595689,8.492890,5.160861,-8.242949,-6.438186,-3.301845,-0.559330,4.327422,8.844555,-9.371885,-0.196664,-4.039461,6.702152,7.354519,4.444937,-1.053962,6.989183,8.115227,5.456016,3.166276,-8.594204,-4.198153,-3.353479,7.861992,-6.883315,-9.560705,9.027961,9.081112,9.584878,-3.884476,4.895629,-6.991898,-0.642380,5.928235,-9.273473,6.142131,-5.039622,9.513147,9.226111,9.959945,-4.055995,6.706361], dtype = "float32")#candidate|1189|(84,)|const|float32
call_1188 = relay.TupleGetItem(func_684_call(relay.reshape(const_1189.astype('float32'), [2, 14, 3]), relay.reshape(call_1172.astype('uint16'), [2, 1]), ), 2)
call_1190 = relay.TupleGetItem(func_687_call(relay.reshape(const_1189.astype('float32'), [2, 14, 3]), relay.reshape(call_1172.astype('uint16'), [2, 1]), ), 2)
output = relay.Tuple([bop_1138,bop_1148,call_1166,var_1167,call_1172,const_1173,var_1174,const_1175,bop_1181,bop_1185,call_1188,const_1189,])
output2 = relay.Tuple([bop_1138,bop_1148,call_1168,var_1167,call_1176,const_1173,var_1174,const_1175,bop_1181,bop_1185,call_1190,const_1189,])
func_1191 = relay.Function([var_1127,var_1167,var_1174,var_1180,], output)
mod['func_1191'] = func_1191
mod = relay.transform.InferType()(mod)
mutated_mod['func_1191'] = func_1191
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1191_call = mutated_mod.get_global_var('func_1191')
var_1193 = relay.var("var_1193", dtype = "int16", shape = (8, 9, 10))#candidate|1193|(8, 9, 10)|var|int16
var_1194 = relay.var("var_1194", dtype = "float32", shape = (64,))#candidate|1194|(64,)|var|float32
var_1195 = relay.var("var_1195", dtype = "float64", shape = (24,))#candidate|1195|(24,)|var|float64
var_1196 = relay.var("var_1196", dtype = "uint16", shape = (8, 9, 10))#candidate|1196|(8, 9, 10)|var|uint16
call_1192 = func_1191_call(var_1193,var_1194,var_1195,var_1196,)
output = call_1192
func_1197 = relay.Function([var_1193,var_1194,var_1195,var_1196,], output)
mutated_mod['func_1197'] = func_1197
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1199 = relay.const([[[-3,-1,5,4,-1,-9,-4,-3],[4,4,1,-10,4,9,-7,4],[-3,-9,-1,8,-4,10,-3,-6],[7,8,-9,-4,-4,-7,-4,-3],[7,5,4,1,2,6,6,-4],[-6,-3,-3,-8,-10,7,5,8],[9,4,-7,-1,-6,-4,-1,-5]],[[1,1,-5,-10,-3,8,5,4],[1,7,-2,-7,-7,3,9,4],[6,-5,-4,7,-2,-7,-2,10],[8,-1,6,-1,9,1,-3,-10],[-2,-9,10,6,-10,-8,6,6],[-5,-6,-5,4,-4,3,-3,4],[10,4,1,3,-4,6,8,6]],[[6,-6,1,-6,8,10,-2,7],[-2,-3,2,8,8,-6,5,2],[3,4,-8,1,-10,7,7,-6],[-6,6,7,-6,10,-1,-3,6],[-9,-2,-3,-4,3,-6,7,3],[-3,3,-5,-2,10,-7,6,-9],[-6,-3,1,1,-9,6,9,9]],[[-10,-9,-1,7,-6,-2,-10,7],[-1,6,-6,-8,3,8,5,1],[2,-10,3,-2,-4,1,-7,-1],[-7,-2,3,7,-6,-8,-6,8],[-3,9,-6,6,7,-5,6,-3],[-4,-7,5,-4,10,-3,3,2],[-2,3,-4,-9,8,7,3,-6]],[[-5,5,-6,-4,-1,3,-10,3],[8,9,4,-4,3,6,-1,2],[-7,9,-6,-2,-10,4,-9,-2],[-2,10,-1,8,-8,-2,9,7],[1,-1,-9,-5,-7,-8,5,-7],[3,2,-4,9,-7,10,-5,5],[-5,4,-9,-4,7,5,2,-6]],[[9,-8,-8,-2,-8,-4,1,10],[4,-1,-2,-1,9,-8,6,-5],[-3,8,1,-8,-2,1,-2,1],[-2,10,1,2,5,-10,-5,-8],[9,-10,5,9,-10,3,9,9],[10,5,9,9,9,-9,-6,3],[-2,-8,-2,-6,-5,-6,7,-8]],[[-3,8,2,9,9,-8,-6,2],[3,-7,-7,9,4,-8,1,7],[1,-7,5,6,6,10,-4,-2],[-4,-4,-1,-5,-8,-5,-9,2],[-10,-6,-9,-8,8,-8,2,-1],[-8,9,8,6,5,7,-6,7],[-2,-10,7,7,-7,8,-5,-8]],[[-4,6,-9,9,8,1,9,-1],[-2,1,8,-5,-4,-4,9,-4],[9,6,4,1,3,7,1,-4],[-6,10,-4,-1,-7,-7,-9,1],[3,-3,5,1,7,2,4,10],[-1,-8,-7,-1,-3,3,9,7],[3,9,7,6,7,-1,3,3]],[[-4,-1,9,5,2,4,-4,-3],[5,5,-3,-6,-8,-3,10,9],[6,-5,3,7,-10,7,5,10],[-6,-2,5,-1,-6,-6,-10,-2],[-4,-3,9,-2,-4,10,9,-7],[-5,5,-8,-1,-1,-3,-3,-1],[-2,-3,6,-9,-4,-8,-8,-7]],[[-6,1,1,8,-10,-4,6,1],[10,10,-9,4,7,-6,9,-8],[-10,-8,-2,2,9,-6,-1,-4],[2,5,-4,-5,-1,8,8,6],[4,8,2,1,-6,-6,-5,-8],[-8,-8,-3,5,-8,7,-8,6],[7,-1,4,10,-8,-8,1,-2]],[[10,3,-7,-1,-9,2,9,1],[-2,7,-4,-7,-5,7,-1,-5],[1,6,6,10,4,-5,2,1],[8,-1,4,7,2,-7,3,6],[10,9,-1,-3,2,10,-4,7],[8,6,-5,3,-7,2,2,3],[4,-10,-2,10,1,-10,-4,10]],[[-7,5,-1,1,9,-9,3,-5],[-3,-2,9,3,-5,-6,-1,10],[-5,2,-5,6,-8,7,7,10],[6,-9,5,5,-4,-6,9,5],[-3,4,1,4,-4,-5,-10,3],[7,2,-3,-2,8,-3,6,-5],[-8,8,8,1,10,3,10,-7]]], dtype = "uint32")#candidate|1199|(12, 7, 8)|const|uint32
var_1200 = relay.var("var_1200", dtype = "uint32", shape = (12, 7, 8))#candidate|1200|(12, 7, 8)|var|uint32
bop_1201 = relay.minimum(const_1199.astype('uint32'), relay.reshape(var_1200.astype('uint32'), relay.shape_of(const_1199))) # shape=(12, 7, 8)
output = relay.Tuple([bop_1201,])
output2 = relay.Tuple([bop_1201,])
func_1206 = relay.Function([var_1200,], output)
mod['func_1206'] = func_1206
mod = relay.transform.InferType()(mod)
mutated_mod['func_1206'] = func_1206
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1207 = relay.var("var_1207", dtype = "uint32", shape = (12, 7, 8))#candidate|1207|(12, 7, 8)|var|uint32
func_1206_call = mutated_mod.get_global_var('func_1206')
call_1208 = func_1206_call(var_1207)
output = call_1208
func_1209 = relay.Function([var_1207], output)
mutated_mod['func_1209'] = func_1209
mutated_mod = relay.transform.InferType()(mutated_mod)
func_448_call = mod.get_global_var('func_448')
func_450_call = mutated_mod.get_global_var('func_450')
call_1217 = relay.TupleGetItem(func_448_call(), 0)
call_1218 = relay.TupleGetItem(func_450_call(), 0)
output = relay.Tuple([call_1217,])
output2 = relay.Tuple([call_1218,])
func_1232 = relay.Function([], output)
mod['func_1232'] = func_1232
mod = relay.transform.InferType()(mod)
mutated_mod['func_1232'] = func_1232
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1232_call = mutated_mod.get_global_var('func_1232')
call_1233 = func_1232_call()
output = call_1233
func_1234 = relay.Function([], output)
mutated_mod['func_1234'] = func_1234
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1248 = relay.const([[-5.855988],[0.222735]], dtype = "float64")#candidate|1248|(2, 1)|const|float64
uop_1249 = relay.atanh(const_1248.astype('float64')) # shape=(2, 1)
bop_1260 = relay.multiply(const_1248.astype('uint16'), relay.reshape(uop_1249.astype('uint16'), relay.shape_of(const_1248))) # shape=(2, 1)
uop_1263 = relay.tan(uop_1249.astype('float64')) # shape=(2, 1)
bop_1267 = relay.logical_or(uop_1263.astype('bool'), relay.reshape(uop_1249.astype('bool'), relay.shape_of(uop_1263))) # shape=(2, 1)
bop_1275 = relay.equal(const_1248.astype('bool'), relay.reshape(uop_1263.astype('bool'), relay.shape_of(const_1248))) # shape=(2, 1)
uop_1280 = relay.sin(const_1248.astype('float32')) # shape=(2, 1)
uop_1283 = relay.atan(uop_1263.astype('float64')) # shape=(2, 1)
uop_1287 = relay.log(uop_1283.astype('float64')) # shape=(2, 1)
bop_1289 = relay.equal(bop_1275.astype('bool'), relay.reshape(bop_1267.astype('bool'), relay.shape_of(bop_1275))) # shape=(2, 1)
bop_1292 = relay.multiply(uop_1263.astype('uint64'), relay.reshape(uop_1280.astype('uint64'), relay.shape_of(uop_1263))) # shape=(2, 1)
bop_1296 = relay.left_shift(uop_1287.astype('uint16'), relay.reshape(uop_1249.astype('uint16'), relay.shape_of(uop_1287))) # shape=(2, 1)
bop_1299 = relay.bitwise_xor(uop_1283.astype('int8'), relay.reshape(bop_1267.astype('int8'), relay.shape_of(uop_1283))) # shape=(2, 1)
output = relay.Tuple([bop_1260,bop_1289,bop_1292,bop_1296,bop_1299,])
output2 = relay.Tuple([bop_1260,bop_1289,bop_1292,bop_1296,bop_1299,])
func_1302 = relay.Function([], output)
mod['func_1302'] = func_1302
mod = relay.transform.InferType()(mod)
mutated_mod['func_1302'] = func_1302
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1302_call = mutated_mod.get_global_var('func_1302')
call_1303 = func_1302_call()
output = call_1303
func_1304 = relay.Function([], output)
mutated_mod['func_1304'] = func_1304
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1302_call = mod.get_global_var('func_1302')
func_1304_call = mutated_mod.get_global_var('func_1304')
call_1326 = relay.TupleGetItem(func_1302_call(), 2)
call_1327 = relay.TupleGetItem(func_1304_call(), 2)
func_1000_call = mod.get_global_var('func_1000')
func_1005_call = mutated_mod.get_global_var('func_1005')
var_1332 = relay.var("var_1332", dtype = "float64", shape = (60,))#candidate|1332|(60,)|var|float64
const_1333 = relay.const([7.153103,-3.024913,1.517405,-5.318192,9.485693,1.109544,5.109375,-3.660083,3.215088,-6.883605,9.976417,-4.314327,-8.491829,-9.952516], dtype = "float32")#candidate|1333|(14,)|const|float32
call_1331 = relay.TupleGetItem(func_1000_call(relay.reshape(var_1332.astype('float64'), [5, 12]), relay.reshape(const_1333.astype('float32'), [14,]), relay.reshape(var_1332.astype('int16'), [5, 12]), ), 0)
call_1334 = relay.TupleGetItem(func_1005_call(relay.reshape(var_1332.astype('float64'), [5, 12]), relay.reshape(const_1333.astype('float32'), [14,]), relay.reshape(var_1332.astype('int16'), [5, 12]), ), 0)
bop_1335 = relay.subtract(call_1326.astype('int8'), const_1333.astype('int8')) # shape=(2, 14)
bop_1338 = relay.subtract(call_1327.astype('int8'), const_1333.astype('int8')) # shape=(2, 14)
uop_1344 = relay.erf(bop_1335.astype('float64')) # shape=(2, 14)
uop_1346 = relay.erf(bop_1338.astype('float64')) # shape=(2, 14)
uop_1350 = relay.atanh(uop_1344.astype('float64')) # shape=(2, 14)
uop_1352 = relay.atanh(uop_1346.astype('float64')) # shape=(2, 14)
bop_1353 = relay.floor_divide(uop_1350.astype('float32'), relay.reshape(uop_1344.astype('float32'), relay.shape_of(uop_1350))) # shape=(2, 14)
bop_1356 = relay.floor_divide(uop_1352.astype('float32'), relay.reshape(uop_1346.astype('float32'), relay.shape_of(uop_1352))) # shape=(2, 14)
uop_1357 = relay.exp(bop_1353.astype('float32')) # shape=(2, 14)
uop_1359 = relay.exp(bop_1356.astype('float32')) # shape=(2, 14)
output = relay.Tuple([call_1331,var_1332,uop_1357,])
output2 = relay.Tuple([call_1334,var_1332,uop_1359,])
func_1360 = relay.Function([var_1332,], output)
mod['func_1360'] = func_1360
mod = relay.transform.InferType()(mod)
var_1361 = relay.var("var_1361", dtype = "float64", shape = (60,))#candidate|1361|(60,)|var|float64
output = func_1360(var_1361)
func_1362 = relay.Function([var_1361], output)
mutated_mod['func_1362'] = func_1362
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1302_call = mod.get_global_var('func_1302')
func_1304_call = mutated_mod.get_global_var('func_1304')
call_1368 = relay.TupleGetItem(func_1302_call(), 0)
call_1369 = relay.TupleGetItem(func_1304_call(), 0)
output = relay.Tuple([call_1368,])
output2 = relay.Tuple([call_1369,])
func_1394 = relay.Function([], output)
mod['func_1394'] = func_1394
mod = relay.transform.InferType()(mod)
output = func_1394()
func_1395 = relay.Function([], output)
mutated_mod['func_1395'] = func_1395
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1406 = relay.var("var_1406", dtype = "float32", shape = (3,))#candidate|1406|(3,)|var|float32
var_1407 = relay.var("var_1407", dtype = "float32", shape = (3,))#candidate|1407|(3,)|var|float32
bop_1408 = relay.divide(var_1406.astype('float32'), relay.reshape(var_1407.astype('float32'), relay.shape_of(var_1406))) # shape=(3,)
bop_1411 = relay.less(var_1406.astype('bool'), relay.reshape(bop_1408.astype('bool'), relay.shape_of(var_1406))) # shape=(3,)
uop_1417 = relay.asin(bop_1408.astype('float64')) # shape=(3,)
output = relay.Tuple([bop_1411,uop_1417,])
output2 = relay.Tuple([bop_1411,uop_1417,])
func_1423 = relay.Function([var_1406,var_1407,], output)
mod['func_1423'] = func_1423
mod = relay.transform.InferType()(mod)
var_1424 = relay.var("var_1424", dtype = "float32", shape = (3,))#candidate|1424|(3,)|var|float32
var_1425 = relay.var("var_1425", dtype = "float32", shape = (3,))#candidate|1425|(3,)|var|float32
output = func_1423(var_1424,var_1425,)
func_1426 = relay.Function([var_1424,var_1425,], output)
mutated_mod['func_1426'] = func_1426
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1432 = relay.const([[-10,10,-8,1,-5,-10,-4,3,10,-5,-2,2,2,9,10],[-5,-8,2,-3,10,10,10,3,-10,-9,-3,9,4,3,7]], dtype = "int16")#candidate|1432|(2, 15)|const|int16
const_1433 = relay.const([[-3,9,9,-3,-6,3,-3,9,-7,-4,4,-1,9,5,9],[1,4,-1,-6,7,-7,9,7,6,10,-8,-5,5,2,-7]], dtype = "int16")#candidate|1433|(2, 15)|const|int16
bop_1434 = relay.subtract(const_1432.astype('int16'), relay.reshape(const_1433.astype('int16'), relay.shape_of(const_1432))) # shape=(2, 15)
bop_1437 = relay.not_equal(bop_1434.astype('bool'), relay.reshape(const_1432.astype('bool'), relay.shape_of(bop_1434))) # shape=(2, 15)
output = relay.Tuple([bop_1437,])
output2 = relay.Tuple([bop_1437,])
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
	relay.transform.DefuseOps(),
	relay.transform.SimplifyExpr(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()()
res3 = intrp3.evaluate()()
res4 = intrp4.evaluate()()
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()()
res7 = intrp7.evaluate()()
res8 = intrp8.evaluate()()
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()()
res11 = intrp11.evaluate()()
res12 = intrp12.evaluate()()
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()()
res15 = intrp15.evaluate()()
res16 = intrp16.evaluate()()
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()()
res19 = intrp19.evaluate()()
res20 = intrp20.evaluate()()
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()()
res23 = intrp23.evaluate()()
res24 = intrp24.evaluate()()
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''49: TVMFuncCall
48: _ZNSt17_Function_handlerIFvN3tvm7run
47: tvm::runtime::TypedPackedFunc<tvm::runtime::TypedPackedFunc<tvm::runtime::ObjectRef (tvm::runtime::Array<tvm::RelayExpr, void>)> (tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target)>::AssignTypedLambda<tvm::runtime::TypedPackedFunc<tvm::runtime::ObjectRef (tvm::runtime::Array<tvm::RelayExpr, void>)> (*)(tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target)>(tvm::runtime::TypedPackedFunc<tvm::runtime::ObjectRef (tvm::runtime::Array<tvm::RelayExpr, void>)> (*)(tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
46: tvm::relay::EvalFunction(tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''