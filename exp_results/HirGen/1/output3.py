import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
const_73 = relay.const([[[True,False,False,False,False,False,True,True,True,True],[True,True,False,True,True,False,True,False,True,True],[True,True,False,False,False,True,True,False,True,True],[False,False,True,True,False,True,True,False,False,True],[True,True,False,True,False,False,True,True,False,False],[False,False,False,True,False,False,False,False,False,True],[True,False,True,False,True,False,True,True,False,True],[False,True,False,False,False,False,False,True,False,True],[False,False,True,False,True,True,False,True,True,False],[False,False,False,False,False,False,False,True,True,False],[False,True,True,False,True,True,True,False,False,True],[True,False,True,False,False,True,True,False,False,True],[False,True,True,True,True,False,True,True,True,False]]], dtype = "bool")#candidate|73|(1, 13, 10)|const|bool
const_74 = relay.const([[[True,False,False,False,True,True,False,True,False,True],[False,False,True,False,True,True,True,True,False,True],[False,True,False,True,True,True,False,True,True,True],[True,False,True,True,True,False,True,True,False,True],[True,False,True,False,False,False,True,True,False,True],[True,False,True,True,False,False,True,False,True,False],[False,False,True,True,False,False,False,True,True,False],[False,False,False,False,True,False,False,False,False,False],[False,True,True,True,False,True,True,True,True,True],[False,True,True,True,True,True,True,True,False,False],[True,True,True,True,True,False,True,True,False,True],[False,False,False,True,True,True,False,True,False,True],[False,False,True,True,True,False,True,False,True,True]],[[True,False,False,False,True,True,False,False,True,False],[False,True,True,False,False,False,True,False,True,False],[True,True,False,False,True,False,False,False,False,True],[True,True,True,False,True,False,True,True,True,False],[False,True,True,True,True,True,True,True,True,True],[True,True,False,True,True,True,True,False,True,False],[True,True,True,True,True,True,True,False,False,False],[True,False,True,False,True,True,False,True,False,True],[False,True,False,False,False,False,False,False,False,True],[False,True,False,True,False,True,False,False,False,True],[False,True,True,False,True,True,True,True,False,True],[True,False,False,True,False,False,True,False,False,True],[False,False,True,False,False,True,False,False,True,False]],[[True,False,True,True,False,False,False,True,False,False],[False,True,False,False,False,False,False,False,True,True],[True,True,True,False,True,True,False,True,False,True],[True,True,True,False,False,True,True,False,False,True],[False,False,False,False,False,False,True,True,False,False],[False,False,True,True,False,False,True,False,False,True],[False,True,False,True,False,True,True,True,True,True],[False,False,False,False,False,False,False,True,True,True],[True,True,True,False,True,True,True,False,False,True],[True,False,False,True,True,False,False,False,True,False],[False,True,False,False,True,False,False,False,False,False],[True,True,True,False,False,False,True,True,False,True],[False,True,True,False,True,True,True,True,True,False]],[[True,True,False,True,True,True,False,False,True,False],[False,False,True,True,False,True,False,False,False,False],[True,False,False,True,True,True,False,False,False,True],[False,False,True,False,True,False,False,True,False,True],[True,False,False,True,False,False,False,False,False,True],[False,False,True,False,True,False,True,True,False,False],[False,True,False,True,True,True,False,True,True,False],[True,False,True,True,True,True,True,False,True,False],[True,True,False,False,False,True,True,True,False,True],[True,False,False,True,False,False,True,False,True,False],[False,False,False,True,True,False,False,True,False,True],[True,True,True,True,True,True,False,False,False,False],[False,False,False,False,True,False,False,False,False,False]],[[False,True,False,True,False,False,True,True,True,True],[False,False,False,True,True,True,False,True,False,True],[True,False,True,True,False,False,False,True,True,False],[True,True,True,True,False,False,True,True,True,False],[False,True,False,False,True,True,False,True,False,False],[False,True,False,True,True,False,False,True,True,True],[True,False,False,True,False,True,True,True,False,False],[False,True,True,False,True,False,False,True,False,False],[True,False,False,True,False,True,False,False,False,True],[True,True,False,True,False,False,False,True,True,True],[True,True,False,True,False,True,True,False,True,True],[False,False,False,False,False,False,True,False,False,True],[True,True,True,True,False,True,True,True,True,True]],[[False,False,False,False,True,False,True,True,False,False],[False,True,True,False,True,True,False,True,True,False],[False,False,True,True,False,False,True,True,True,False],[False,True,False,True,True,False,True,False,True,False],[True,True,True,False,False,False,True,False,True,False],[True,False,False,False,True,False,False,False,False,True],[False,False,False,True,True,True,True,True,False,False],[True,True,True,False,True,True,False,False,False,False],[False,True,False,False,True,True,True,False,False,True],[True,False,True,False,True,True,True,False,False,True],[False,True,False,False,True,True,True,True,True,True],[True,True,False,True,False,False,True,True,False,True],[False,True,True,True,True,True,False,True,True,False]],[[False,False,True,True,False,False,False,True,False,False],[True,True,True,True,True,True,True,False,False,True],[True,False,True,False,False,False,True,False,True,True],[True,False,True,False,True,True,True,True,False,True],[True,True,False,True,True,True,False,False,True,True],[False,False,True,True,True,True,True,False,False,True],[True,True,True,False,True,False,True,False,True,False],[True,True,True,False,False,False,True,False,True,True],[True,True,True,True,False,False,False,True,True,False],[False,False,True,True,True,True,True,False,True,True],[False,True,False,False,True,False,False,False,False,True],[True,False,False,True,True,False,True,True,False,False],[False,False,True,True,False,False,False,True,False,False]],[[False,True,True,False,True,False,False,True,False,True],[True,False,True,True,True,False,False,False,True,False],[True,True,False,False,True,False,False,True,False,False],[True,False,True,False,True,False,False,True,False,True],[False,True,True,True,False,False,True,False,False,True],[False,True,False,True,True,True,True,True,True,True],[False,False,False,True,True,True,False,True,False,False],[False,True,True,True,False,True,True,False,False,False],[True,False,True,True,True,True,True,True,False,False],[False,False,False,False,False,True,True,False,True,False],[False,True,True,True,True,True,False,False,True,False],[False,False,True,False,False,False,True,True,True,True],[True,False,False,True,False,False,True,False,False,False]]], dtype = "bool")#candidate|74|(8, 13, 10)|const|bool
bop_75 = relay.logical_or(const_73.astype('bool'), const_74.astype('bool')) # shape=(8, 13, 10)
uop_80 = relay.acosh(bop_75.astype('float64')) # shape=(8, 13, 10)
bop_96 = relay.logical_xor(uop_80.astype('int16'), relay.reshape(bop_75.astype('int16'), relay.shape_of(uop_80))) # shape=(8, 13, 10)
bop_100 = relay.maximum(const_74.astype('uint16'), relay.reshape(uop_80.astype('uint16'), relay.shape_of(const_74))) # shape=(8, 13, 10)
uop_103 = relay.tan(bop_100.astype('float64')) # shape=(8, 13, 10)
uop_105 = relay.cosh(uop_103.astype('float64')) # shape=(8, 13, 10)
output = relay.Tuple([bop_96,uop_105,])
output2 = relay.Tuple([bop_96,uop_105,])
func_108 = relay.Function([], output)
mod['func_108'] = func_108
mod = relay.transform.InferType()(mod)
output = func_108()
func_109 = relay.Function([], output)
mutated_mod['func_109'] = func_109
mutated_mod = relay.transform.InferType()(mutated_mod)
var_143 = relay.var("var_143", dtype = "float64", shape = (1,))#candidate|143|(1,)|var|float64
uop_144 = relay.sigmoid(var_143.astype('float64')) # shape=(1,)
uop_146 = relay.asinh(var_143.astype('float64')) # shape=(1,)
bop_148 = relay.floor_divide(uop_144.astype('float64'), relay.reshape(uop_146.astype('float64'), relay.shape_of(uop_144))) # shape=(1,)
bop_151 = relay.greater_equal(uop_146.astype('bool'), relay.reshape(uop_144.astype('bool'), relay.shape_of(uop_146))) # shape=(1,)
uop_154 = relay.exp(uop_146.astype('float64')) # shape=(1,)
bop_156 = relay.less_equal(uop_154.astype('bool'), relay.reshape(uop_144.astype('bool'), relay.shape_of(uop_154))) # shape=(1,)
var_162 = relay.var("var_162", dtype = "float64", shape = (2,))#candidate|162|(2,)|var|float64
bop_163 = relay.bitwise_or(uop_146.astype('uint32'), var_162.astype('uint32')) # shape=(2,)
uop_166 = relay.sinh(uop_154.astype('float64')) # shape=(1,)
bop_168 = relay.bitwise_or(uop_166.astype('int16'), relay.reshape(var_143.astype('int16'), relay.shape_of(uop_166))) # shape=(1,)
uop_171 = relay.log10(bop_168.astype('float64')) # shape=(1,)
output = relay.Tuple([bop_148,bop_151,bop_156,bop_163,uop_171,])
output2 = relay.Tuple([bop_148,bop_151,bop_156,bop_163,uop_171,])
func_173 = relay.Function([var_143,var_162,], output)
mod['func_173'] = func_173
mod = relay.transform.InferType()(mod)
mutated_mod['func_173'] = func_173
mutated_mod = relay.transform.InferType()(mutated_mod)
func_173_call = mutated_mod.get_global_var('func_173')
var_175 = relay.var("var_175", dtype = "float64", shape = (1,))#candidate|175|(1,)|var|float64
var_176 = relay.var("var_176", dtype = "float64", shape = (2,))#candidate|176|(2,)|var|float64
call_174 = func_173_call(var_175,var_176,)
output = call_174
func_177 = relay.Function([var_175,var_176,], output)
mutated_mod['func_177'] = func_177
mutated_mod = relay.transform.InferType()(mutated_mod)
var_181 = relay.var("var_181", dtype = "float64", shape = (2,))#candidate|181|(2,)|var|float64
var_182 = relay.var("var_182", dtype = "float64", shape = (2,))#candidate|182|(2,)|var|float64
bop_183 = relay.less(var_181.astype('bool'), relay.reshape(var_182.astype('bool'), relay.shape_of(var_181))) # shape=(2,)
var_186 = relay.var("var_186", dtype = "float64", shape = (2,))#candidate|186|(2,)|var|float64
bop_187 = relay.minimum(var_182.astype('uint64'), relay.reshape(var_186.astype('uint64'), relay.shape_of(var_182))) # shape=(2,)
const_192 = relay.const([-10,-2], dtype = "uint64")#candidate|192|(2,)|const|uint64
bop_193 = relay.bitwise_and(bop_187.astype('int32'), relay.reshape(const_192.astype('int32'), relay.shape_of(bop_187))) # shape=(2,)
output = relay.Tuple([bop_183,bop_193,])
output2 = relay.Tuple([bop_183,bop_193,])
func_198 = relay.Function([var_181,var_182,var_186,], output)
mod['func_198'] = func_198
mod = relay.transform.InferType()(mod)
var_199 = relay.var("var_199", dtype = "float64", shape = (2,))#candidate|199|(2,)|var|float64
var_200 = relay.var("var_200", dtype = "float64", shape = (2,))#candidate|200|(2,)|var|float64
var_201 = relay.var("var_201", dtype = "float64", shape = (2,))#candidate|201|(2,)|var|float64
output = func_198(var_199,var_200,var_201,)
func_202 = relay.Function([var_199,var_200,var_201,], output)
mutated_mod['func_202'] = func_202
mutated_mod = relay.transform.InferType()(mutated_mod)
func_108_call = mod.get_global_var('func_108')
func_109_call = mutated_mod.get_global_var('func_109')
call_217 = relay.TupleGetItem(func_108_call(), 1)
call_218 = relay.TupleGetItem(func_109_call(), 1)
const_224 = relay.const([[[4.832900,-4.624270,-2.094016,6.297229,0.601457,-4.039937,7.967910,-2.164965,9.871900,1.189214],[-3.880006,9.453272,-4.134807,-0.393380,-3.340495,3.291462,-7.375373,-7.208702,-5.663719,-8.330850],[-0.513111,-9.727061,7.241298,8.820436,9.744812,-9.935200,-5.579782,1.414844,0.002324,7.934471],[-8.761562,-8.104129,0.024448,9.603757,-4.598164,8.035638,-8.354432,4.964945,9.282417,-8.707013],[4.013492,-4.216962,-8.354888,-0.943209,8.589504,-0.399236,-4.457354,8.349302,2.063203,6.952063],[-0.709201,-2.099413,6.650597,-6.718024,-0.155875,6.790431,5.997467,1.471029,-9.425782,-6.901616],[-9.694411,8.680328,2.674625,-0.354389,4.277595,-9.600950,-3.446864,0.136428,-7.858038,-3.589269],[-0.095903,-4.883489,-1.532801,-7.583714,5.846020,-4.557015,6.665118,2.202961,-4.865364,8.541607],[2.132221,6.205402,-5.832504,6.672454,4.182856,0.186909,-1.704644,5.219685,0.879668,3.429605],[-6.422302,-1.849211,1.204834,-4.474297,6.096789,8.248693,-8.730348,0.504422,7.372719,2.977826],[-7.950614,7.071194,3.399885,9.594078,-5.603538,2.865888,4.411784,-6.394396,4.052553,-0.481652],[-1.541640,-4.510458,9.265329,8.657273,-3.303227,3.492066,2.931706,1.140320,9.738320,4.426553],[7.629969,8.173997,4.205070,9.244848,-3.387265,2.551271,-9.724262,7.971197,9.291349,-4.586959]],[[-5.723385,9.943435,-7.418650,-9.606492,9.308297,0.854481,-3.656715,3.357710,-8.753978,0.151951],[5.799954,1.101748,-2.903606,7.265857,4.503146,9.754611,4.380853,1.230907,-0.020699,8.672637],[-8.878748,-3.275941,2.784246,-0.790928,8.063061,6.517372,-2.860222,-2.475086,8.673382,3.131658],[2.607266,-8.836684,3.356200,6.440188,0.584862,7.409445,5.641033,5.072573,-4.595321,4.571610],[5.302906,-7.534753,5.075256,-0.995877,-8.790465,-6.944724,-4.987424,-8.507162,-4.607101,3.067746],[-1.341252,2.313739,8.517177,6.884455,-9.425018,9.462801,4.045028,-8.399394,-4.259796,8.413056],[-9.346465,-4.435921,4.868629,-6.183859,-1.601600,1.049673,-2.103964,3.028395,2.739824,7.446052],[5.423871,7.859663,-5.329617,4.246082,-4.143969,2.466828,-1.469490,-3.598328,-1.551362,-9.498121],[-6.011916,-0.837978,-5.706770,-1.720903,-7.581684,-7.485214,-0.521876,-4.942342,6.505705,8.178540],[-8.069209,-5.908450,6.145772,-6.847266,2.509194,-7.003263,9.200086,-2.678600,-4.648550,3.854297],[8.202232,-1.494015,-1.526060,-0.107346,4.907178,2.837356,1.860415,-9.185851,-1.876290,-7.769472],[0.284991,-0.803948,9.705022,8.115418,8.529150,-1.470598,-8.863774,0.803773,7.273442,-7.425525],[9.866847,5.719473,0.188755,4.001585,-8.695330,9.547374,6.909236,-6.654331,-7.532152,-1.684569]],[[8.511088,-4.802881,-9.493142,-4.052783,-0.918302,-4.264471,-6.178733,-5.818588,4.892597,-6.705096],[7.330587,-6.681290,5.276691,-8.791471,-4.763285,5.617681,2.003240,4.409290,1.923935,-2.083086],[-5.117588,-0.364215,-8.544312,-0.073895,-4.619443,7.831444,-8.812661,-0.525337,5.225681,1.406311],[-2.622312,3.926300,1.957255,1.332118,-3.129035,-4.318098,-3.001239,2.906257,4.343574,-9.011177],[-2.442806,8.397804,3.719164,-2.258459,-2.651214,-1.962513,7.658103,0.443015,-8.103462,4.509077],[-3.273922,7.278903,-6.508323,7.066991,-5.916104,-5.330898,2.547345,1.888174,1.923791,7.522418],[-2.861752,-2.742031,5.070896,-9.001824,-6.956633,-9.574111,2.754754,9.486346,6.905643,5.680978],[4.141413,-7.986255,2.861788,9.558699,-3.258839,3.618306,4.359891,-7.609320,1.610733,-2.021874],[-5.444225,-8.714964,0.444520,-5.817427,-9.618525,-6.084789,1.973499,-7.396313,3.930290,2.675584],[8.150200,-2.038302,5.154769,7.118113,8.813120,-9.616956,3.616495,1.804672,0.392909,6.343782],[2.715628,7.886779,-5.035523,4.361919,3.096606,3.885743,6.290681,5.459938,-8.325105,2.012646],[2.369141,-4.311256,-8.423928,8.995008,1.006567,9.653000,-5.765498,7.567876,7.847903,-6.518651],[0.808272,6.588630,4.608681,8.659535,8.929600,4.357531,5.238644,9.426751,4.158240,3.411453]],[[9.732916,5.595369,6.590316,0.612252,-4.281750,5.402281,0.798009,-0.827356,-7.211163,1.190117],[9.101028,-7.827443,-6.708538,-8.722182,-1.633496,-3.173101,1.502353,0.970532,-5.325159,9.391844],[2.849034,-9.380230,8.092271,9.174131,6.080135,3.546983,-3.179795,7.220051,-0.348549,-8.153469],[2.571405,-2.725784,9.509141,0.179248,-2.958514,-6.227639,2.449968,1.351391,7.367515,-0.489854],[3.132461,1.895446,4.807769,-9.877112,3.236889,-3.049795,5.648103,0.265107,7.425405,-6.020878],[7.933835,7.575916,0.115584,0.981249,5.755764,6.051175,7.931907,-2.031522,6.463636,-5.213107],[-9.056935,4.750803,-7.851630,-4.513265,5.118273,2.134621,4.597356,-6.810058,0.728966,4.644383],[8.907515,2.960078,-2.645869,-1.507341,-4.651864,-2.046833,9.641106,-4.761217,-8.351147,5.292058],[6.661764,-9.537082,1.050217,-4.984895,-7.842958,-0.624435,-9.830451,-5.054604,0.925954,5.753108],[-2.570089,-7.331628,6.677895,7.382905,1.904733,-8.543790,9.479178,5.128693,0.832624,-9.579474],[-8.767180,9.472097,-4.547472,3.315626,-8.500526,-1.669907,-8.752838,7.014186,2.186619,2.317323],[7.552779,-4.126947,-8.804810,-4.587869,1.030337,4.949282,8.926770,-3.892358,-2.571371,3.236762],[-4.275727,8.065519,5.644407,4.435634,9.349448,7.936723,-2.003681,-1.113194,-5.195801,-9.210146]],[[8.855988,3.591052,-1.704605,-9.286073,8.210901,-2.627893,1.066263,-8.567868,-9.430660,-5.823207],[-9.105206,-2.907744,6.269108,3.868838,6.721304,6.242700,8.516601,7.792224,-5.146692,-4.819667],[-8.674556,-3.861169,5.553012,-7.195909,-3.775604,2.988840,-7.604748,9.558880,-3.383170,6.661125],[-8.892364,-8.460161,3.946932,2.735816,-3.282000,2.788322,-0.869282,-2.938295,-8.748391,2.048031],[6.110619,6.977342,4.417278,5.878989,9.551595,7.008193,5.331092,2.419266,-3.750366,0.949341],[5.425457,7.736624,-9.283083,5.173031,-7.009848,9.888360,8.719940,3.728706,7.604041,9.149141],[-3.497071,-9.912234,-1.785521,-9.202116,-4.413187,0.622720,9.748027,-5.154169,2.066988,-5.010909],[-8.897452,9.938973,1.460408,-4.505180,-7.431407,9.259924,2.344986,-2.345222,-2.555203,-5.091385],[-0.515052,-5.763486,-3.604742,2.131103,-7.714064,1.537934,8.493961,-9.947397,2.514267,3.356109],[-7.321624,-5.393853,-9.782303,-5.770759,-3.790942,-2.819985,-7.810236,-7.113263,9.342053,-2.269694],[5.528976,-3.875901,8.154916,6.627202,-5.912090,-0.163078,-3.117384,-9.544548,4.025163,5.935815],[5.853474,5.817674,-7.484775,-5.289354,1.289410,9.965248,-3.135583,-5.778954,-4.338134,-9.814450],[-2.823853,-1.958254,-0.386408,-7.131592,3.150679,1.264435,9.991698,-5.733754,-2.522891,4.462290]],[[-8.852196,-8.082239,-2.668559,-5.909867,7.916051,7.981452,4.247682,-0.736598,-1.627195,0.124842],[-9.787955,-7.138645,3.450734,4.701103,7.934267,-1.808767,9.988408,-6.770783,0.999056,-7.163644],[-2.785945,-2.556587,5.010607,4.457691,1.218999,5.058808,6.943273,9.040538,4.442348,-1.362770],[2.775106,-9.670700,1.992013,8.720381,2.804408,3.313998,7.022259,0.928845,-1.801672,8.366484],[1.274436,7.833226,-1.422235,-7.090345,7.373253,1.685158,3.832415,3.179756,-0.728656,0.163946],[1.578893,4.006118,-1.116273,8.327689,6.036548,5.391538,-9.518429,3.809416,1.284723,-4.507752],[-2.904463,-7.150186,1.033098,5.564470,-5.039396,9.214007,8.792083,-3.920814,5.101767,2.231418],[-0.787640,7.114184,7.101076,-0.774264,-3.778828,-3.467759,-0.952624,-4.550665,-3.779608,2.054902],[-3.043214,-2.379633,-6.641415,-7.930663,4.102213,-0.667228,-0.051324,-3.183695,8.815469,-4.504530],[3.449983,-2.305411,5.179035,7.601325,-8.846815,-3.385839,3.061770,2.883940,-8.876463,9.847517],[1.565764,7.141504,5.818278,1.283195,-3.972213,9.179701,-8.303010,6.609494,-5.922322,-9.934404],[-8.583959,-3.698598,3.285768,8.880881,0.554861,7.333608,-7.618199,-5.684255,-0.531213,-6.108081],[0.513885,-3.626402,-8.461524,-5.579131,-3.733681,1.894016,0.942413,-8.478052,9.740917,-2.418214]],[[-2.308612,2.093920,7.996405,3.073281,-6.035728,-4.964445,8.130897,1.678324,9.528997,-0.027974],[-0.208226,-0.523042,7.318031,7.063541,-9.094366,7.762570,5.784483,9.822023,-8.750453,4.584296],[7.487488,1.736298,-0.725576,-9.282483,-9.463833,-5.645801,-1.736973,-0.371682,0.309799,9.881031],[-0.429283,9.313585,4.098646,-9.769004,4.377740,-1.306710,2.122557,7.670650,0.438224,0.020563],[-0.337567,-2.656365,-6.907209,4.397702,-2.154601,6.386728,1.816604,5.533924,-8.552485,7.478704],[0.845458,-7.455512,6.927810,-0.701172,6.756506,-2.524456,6.022564,-4.599642,7.601454,-1.632345],[-4.645790,-2.306940,-7.917905,5.031484,3.638761,-8.010907,-7.001178,-0.061359,-4.792220,-3.783251],[-6.393806,9.777407,-1.837669,-8.076299,6.412613,3.802425,-1.978914,-2.520444,1.506764,3.855847],[-0.250690,7.733742,-9.999883,-7.941446,8.186909,-4.390058,2.359762,4.446209,-2.773165,4.299267],[-8.525101,7.724230,6.127257,7.752255,8.628961,2.993687,-6.401123,7.104363,-2.352050,3.027711],[-6.571197,-8.388891,-5.532665,6.613638,9.406662,-2.210981,-7.114625,-7.069641,4.365824,-5.615941],[3.971804,-2.232507,3.152519,-6.272478,8.034926,7.950351,-3.314755,6.421633,6.123860,4.634844],[-1.304627,1.119578,5.990669,-5.701003,4.727481,-0.323557,-4.686579,4.128900,-5.535294,-0.767873]],[[7.106224,8.710947,6.194992,-9.097203,-9.366588,4.190040,-4.775091,9.849071,-5.647514,-4.545287],[-0.331137,-9.083139,-7.616627,-3.564574,-1.717658,-6.974665,-3.116988,6.004020,8.497385,3.811355],[2.706570,-5.030299,2.462513,7.078616,8.361480,7.664085,-8.423985,-5.474104,5.735267,2.858449],[4.679024,-4.954124,-6.800548,9.309281,5.729873,5.883939,4.693991,-0.013478,1.689033,2.079991],[-6.416084,-4.347217,-5.508180,4.845407,-9.200449,1.603421,-1.338084,7.187504,2.126118,-0.852607],[1.344933,3.928294,9.584885,2.424843,-2.416848,1.955011,-3.950457,9.335852,1.904727,-3.259298],[-9.946630,5.103934,3.424353,4.973564,-8.872252,-9.290162,5.608586,-1.968604,1.509773,5.323018],[-9.423586,-4.754558,-8.771108,-5.974960,-8.438008,9.457649,-7.613016,-1.086777,-6.555132,3.195077],[5.056661,-3.043365,3.888502,-3.266302,9.979057,-4.979323,-2.338374,-5.315906,8.179186,-8.203514],[0.558688,-7.723923,2.065390,-2.199121,-4.728484,-8.650748,9.840007,-5.395282,2.044787,3.320964],[-1.024345,1.774149,9.956535,8.111124,-7.596338,-4.602062,-0.937221,5.725291,0.985428,7.678012],[9.665381,-7.383917,-7.120073,-6.274293,5.422035,-4.112838,0.546180,-2.908194,4.241607,6.457456],[-2.751316,-9.327863,-5.271652,-6.633768,0.419441,6.338558,0.415057,2.358207,-6.963364,4.792696]]], dtype = "float64")#candidate|224|(8, 13, 10)|const|float64
bop_225 = relay.not_equal(call_217.astype('bool'), relay.reshape(const_224.astype('bool'), relay.shape_of(call_217))) # shape=(8, 13, 10)
bop_228 = relay.not_equal(call_218.astype('bool'), relay.reshape(const_224.astype('bool'), relay.shape_of(call_218))) # shape=(8, 13, 10)
bop_229 = relay.greater_equal(call_217.astype('bool'), relay.reshape(bop_225.astype('bool'), relay.shape_of(call_217))) # shape=(8, 13, 10)
bop_232 = relay.greater_equal(call_218.astype('bool'), relay.reshape(bop_228.astype('bool'), relay.shape_of(call_218))) # shape=(8, 13, 10)
bop_235 = relay.floor_mod(bop_225.astype('float32'), relay.reshape(const_224.astype('float32'), relay.shape_of(bop_225))) # shape=(8, 13, 10)
bop_238 = relay.floor_mod(bop_228.astype('float32'), relay.reshape(const_224.astype('float32'), relay.shape_of(bop_228))) # shape=(8, 13, 10)
uop_239 = relay.atan(bop_235.astype('float64')) # shape=(8, 13, 10)
uop_241 = relay.atan(bop_238.astype('float64')) # shape=(8, 13, 10)
bop_245 = relay.floor_divide(bop_235.astype('float32'), relay.reshape(uop_239.astype('float32'), relay.shape_of(bop_235))) # shape=(8, 13, 10)
bop_248 = relay.floor_divide(bop_238.astype('float32'), relay.reshape(uop_241.astype('float32'), relay.shape_of(bop_238))) # shape=(8, 13, 10)
bop_251 = relay.less(bop_245.astype('bool'), relay.reshape(bop_229.astype('bool'), relay.shape_of(bop_245))) # shape=(8, 13, 10)
bop_254 = relay.less(bop_248.astype('bool'), relay.reshape(bop_232.astype('bool'), relay.shape_of(bop_248))) # shape=(8, 13, 10)
output = relay.Tuple([bop_251,])
output2 = relay.Tuple([bop_254,])
func_256 = relay.Function([], output)
mod['func_256'] = func_256
mod = relay.transform.InferType()(mod)
output = func_256()
func_257 = relay.Function([], output)
mutated_mod['func_257'] = func_257
mutated_mod = relay.transform.InferType()(mutated_mod)
func_108_call = mod.get_global_var('func_108')
func_109_call = mutated_mod.get_global_var('func_109')
call_274 = relay.TupleGetItem(func_108_call(), 0)
call_275 = relay.TupleGetItem(func_109_call(), 0)
func_173_call = mod.get_global_var('func_173')
func_177_call = mutated_mod.get_global_var('func_177')
var_285 = relay.var("var_285", dtype = "float64", shape = (1,))#candidate|285|(1,)|var|float64
const_286 = relay.const([[1.124354,7.655637]], dtype = "float64")#candidate|286|(1, 2)|const|float64
call_284 = relay.TupleGetItem(func_173_call(relay.reshape(var_285.astype('float64'), [1,]), relay.reshape(const_286.astype('float64'), [2,]), ), 2)
call_287 = relay.TupleGetItem(func_177_call(relay.reshape(var_285.astype('float64'), [1,]), relay.reshape(const_286.astype('float64'), [2,]), ), 2)
uop_288 = relay.log(var_285.astype('float64')) # shape=(1,)
uop_290 = relay.rsqrt(uop_288.astype('float32')) # shape=(1,)
bop_292 = relay.bitwise_xor(uop_288.astype('uint16'), call_274.astype('uint16')) # shape=(8, 13, 10)
bop_295 = relay.bitwise_xor(uop_288.astype('uint16'), call_275.astype('uint16')) # shape=(8, 13, 10)
bop_300 = relay.bitwise_and(uop_288.astype('int16'), call_274.astype('int16')) # shape=(8, 13, 10)
bop_303 = relay.bitwise_and(uop_288.astype('int16'), call_275.astype('int16')) # shape=(8, 13, 10)
bop_304 = relay.power(bop_300.astype('float32'), relay.reshape(bop_292.astype('float32'), relay.shape_of(bop_300))) # shape=(8, 13, 10)
bop_307 = relay.power(bop_303.astype('float32'), relay.reshape(bop_295.astype('float32'), relay.shape_of(bop_303))) # shape=(8, 13, 10)
var_310 = relay.var("var_310", dtype = "float32", shape = (7,))#candidate|310|(7,)|var|float32
bop_311 = relay.bitwise_and(uop_290.astype('int16'), var_310.astype('int16')) # shape=(7,)
func_256_call = mod.get_global_var('func_256')
func_257_call = mutated_mod.get_global_var('func_257')
call_315 = relay.TupleGetItem(func_256_call(), 0)
call_316 = relay.TupleGetItem(func_257_call(), 0)
bop_321 = relay.right_shift(uop_290.astype('int64'), bop_304.astype('int64')) # shape=(8, 13, 10)
bop_324 = relay.right_shift(uop_290.astype('int64'), bop_307.astype('int64')) # shape=(8, 13, 10)
const_325 = relay.const([[[-5,9,5,7,-3,-10,10,4,-2,-5],[7,-6,6,-10,-10,-6,-3,2,-8,3],[4,4,-3,-7,1,4,9,4,7,4],[10,-4,-7,-3,9,-6,-1,7,1,9],[-4,-10,4,-10,10,10,-6,-5,3,7],[5,-5,6,-2,-3,-6,7,-2,2,2],[10,3,6,-10,-5,-1,2,9,-7,2],[-4,-9,-8,10,6,3,-3,1,-4,6],[-8,10,-2,-8,9,-1,10,-4,2,8],[7,2,-8,7,6,1,-4,-5,-1,-7],[3,-5,-7,-3,6,-7,-5,-3,3,-4],[7,2,8,8,-10,-2,-3,8,-10,1],[2,-1,6,-9,5,-8,1,-6,5,10]],[[10,-8,3,-5,7,-10,-3,-4,-6,7],[-6,-6,5,6,7,-5,2,-2,-9,9],[-4,-5,-10,7,3,9,-9,6,6,-3],[-10,2,4,-8,-2,1,3,-4,-4,-1],[4,-6,-5,-6,6,6,10,9,-5,-6],[-1,-4,2,9,10,3,-2,-9,-1,9],[-6,3,-6,-9,9,-7,-2,-5,10,10],[-8,4,-4,-6,-7,2,2,9,-8,-7],[4,7,5,-2,-8,5,-5,-5,-1,4],[7,-1,-1,-5,1,-8,-7,2,-7,-7],[7,10,-10,-3,-7,8,4,3,4,-8],[1,1,-9,10,-9,10,8,2,-6,-8],[3,-6,-7,-4,-6,-5,8,-5,-9,2]],[[3,-4,1,-8,10,-9,3,-3,2,-1],[-2,5,10,-7,-4,-7,-1,7,-8,9],[2,4,-3,4,-4,4,-1,6,-9,-4],[-9,2,-3,-2,-6,2,10,1,-3,-1],[-4,-3,-5,10,-1,1,-5,-10,3,-3],[4,7,9,9,7,-9,6,7,10,-9],[10,-10,4,7,-1,-8,-4,-9,7,5],[8,6,-7,-7,-8,9,-6,-7,1,10],[2,7,7,1,5,-9,-1,9,5,4],[-2,-5,3,1,-4,6,-2,-4,-10,-2],[-10,-10,-5,-8,2,-6,-6,-5,5,-1],[-8,6,1,-7,-4,7,-10,-6,3,7],[-5,-4,-6,-10,-4,9,-7,9,7,-8]],[[-7,-7,-2,-3,-5,4,3,-1,-4,1],[1,7,-7,7,-6,-6,-9,-3,-6,-8],[7,2,-8,1,5,10,-2,-5,7,2],[6,8,1,-8,6,-9,-8,6,-6,-9],[-1,-9,10,-3,-8,10,-4,-1,10,3],[7,-10,3,-2,3,9,2,8,-4,9],[-5,-7,-9,-4,-10,-4,7,2,10,-8],[-5,8,7,-9,6,-2,-9,7,-9,-7],[-8,-6,5,-6,3,-1,-2,-8,-4,1],[-7,10,-4,-5,10,2,5,4,9,8],[-5,-2,7,-8,-9,10,4,3,8,10],[4,-7,-1,10,2,-2,4,-6,6,-1],[-4,2,-2,5,4,10,-9,-6,10,8]],[[1,-1,-4,5,2,4,8,4,-10,10],[6,4,6,6,6,-10,-6,4,-7,-9],[-7,-4,10,5,-9,-7,-6,2,1,-10],[2,5,-10,-7,2,-5,-10,3,7,1],[6,2,-9,4,2,8,-3,-1,4,9],[3,-4,-2,-6,-7,-6,-5,5,-3,-5],[-4,-9,7,-1,8,-8,3,-8,1,8],[1,2,-4,-1,7,-4,-2,-7,2,4],[7,3,-4,-7,-4,-6,8,-2,-5,1],[-2,3,9,3,-10,-3,8,7,8,-10],[10,7,4,-2,4,-10,-10,10,-5,-1],[1,1,2,3,5,-2,7,-1,-1,-9],[6,-3,4,-6,-8,7,-2,7,8,4]],[[1,-8,-7,1,-4,7,10,8,3,7],[10,-9,2,-6,7,-6,6,-9,5,-5],[10,8,-1,-6,-8,-6,-8,-3,-2,-3],[-9,-9,4,-9,8,5,5,-10,10,1],[-10,8,-1,-8,-8,-3,-1,1,10,4],[6,-8,5,-7,3,-2,-2,-8,-9,-9],[-9,-5,7,-8,10,7,-3,6,2,-2],[-9,7,-5,8,5,-3,2,-5,-8,5],[6,3,-8,7,10,6,-4,-3,-10,-4],[-10,9,7,-10,8,-2,-9,4,-3,9],[2,5,10,6,-10,-7,9,2,-2,10],[10,-4,8,8,1,-5,5,-1,-9,-7],[7,-9,9,-2,-6,1,-8,-4,-3,8]],[[-2,-6,-4,-3,4,-9,-3,-9,2,5],[8,5,-1,2,3,-7,-4,1,-10,8],[4,6,10,4,-9,-1,7,10,-8,3],[2,-6,2,6,-2,5,4,5,-9,7],[10,-2,5,-6,-4,-4,-10,7,-10,6],[-7,-9,-4,-6,-5,-8,10,-3,-4,2],[9,-6,-8,3,-4,-1,-9,4,7,8],[-1,-9,8,10,3,10,7,3,1,-3],[-4,-7,-5,8,-9,5,5,-4,8,-5],[-5,-6,-2,-8,-6,7,-3,5,-5,1],[-1,5,10,9,3,-2,-8,1,-9,1],[9,-7,4,2,7,5,-10,6,-10,-10],[6,3,10,3,2,3,4,6,2,-7]],[[-1,-10,5,-1,-10,9,-2,-9,-4,-10],[-8,10,2,10,-3,-6,-1,5,2,-10],[6,-8,10,9,-2,4,1,-10,9,-1],[-6,7,3,3,10,6,3,-4,-1,-10],[-1,1,-8,7,10,2,-4,5,-10,1],[-4,-6,8,3,-3,2,-9,6,-3,-7],[-2,1,7,-1,6,9,-8,-10,-4,-8],[6,-9,-3,4,-9,-7,9,6,3,3],[1,1,6,10,4,5,7,9,-2,-6],[-4,-3,-2,-9,8,6,5,-1,-1,-10],[-8,-9,2,7,-10,6,-7,-7,8,5],[9,5,1,6,6,10,-3,-1,8,-9],[-4,-2,-4,9,4,-7,-7,8,10,-3]]], dtype = "int64")#candidate|325|(8, 13, 10)|const|int64
bop_326 = relay.floor_mod(bop_321.astype('float64'), relay.reshape(const_325.astype('float64'), relay.shape_of(bop_321))) # shape=(8, 13, 10)
bop_329 = relay.floor_mod(bop_324.astype('float64'), relay.reshape(const_325.astype('float64'), relay.shape_of(bop_324))) # shape=(8, 13, 10)
func_173_call = mod.get_global_var('func_173')
func_177_call = mutated_mod.get_global_var('func_177')
call_330 = relay.TupleGetItem(func_173_call(relay.reshape(uop_290.astype('float64'), [1,]), relay.reshape(const_286.astype('float64'), [2,]), ), 3)
call_331 = relay.TupleGetItem(func_177_call(relay.reshape(uop_290.astype('float64'), [1,]), relay.reshape(const_286.astype('float64'), [2,]), ), 3)
bop_339 = relay.logical_xor(bop_300.astype('uint16'), uop_288.astype('uint16')) # shape=(8, 13, 10)
bop_342 = relay.logical_xor(bop_303.astype('uint16'), uop_288.astype('uint16')) # shape=(8, 13, 10)
func_108_call = mod.get_global_var('func_108')
func_109_call = mutated_mod.get_global_var('func_109')
call_344 = relay.TupleGetItem(func_108_call(), 0)
call_345 = relay.TupleGetItem(func_109_call(), 0)
uop_347 = relay.log2(bop_326.astype('float32')) # shape=(8, 13, 10)
uop_349 = relay.log2(bop_329.astype('float32')) # shape=(8, 13, 10)
uop_352 = relay.cos(bop_321.astype('float64')) # shape=(8, 13, 10)
uop_354 = relay.cos(bop_324.astype('float64')) # shape=(8, 13, 10)
func_108_call = mod.get_global_var('func_108')
func_109_call = mutated_mod.get_global_var('func_109')
call_355 = relay.TupleGetItem(func_108_call(), 1)
call_356 = relay.TupleGetItem(func_109_call(), 1)
bop_357 = relay.maximum(bop_292.astype('int64'), uop_290.astype('int64')) # shape=(8, 13, 10)
bop_360 = relay.maximum(bop_295.astype('int64'), uop_290.astype('int64')) # shape=(8, 13, 10)
var_361 = relay.var("var_361", dtype = "float32", shape = (8,))#candidate|361|(8,)|var|float32
bop_362 = relay.logical_or(uop_290.astype('bool'), var_361.astype('bool')) # shape=(8,)
bop_366 = relay.subtract(uop_347.astype('int16'), relay.reshape(bop_292.astype('int16'), relay.shape_of(uop_347))) # shape=(8, 13, 10)
bop_369 = relay.subtract(uop_349.astype('int16'), relay.reshape(bop_295.astype('int16'), relay.shape_of(uop_349))) # shape=(8, 13, 10)
uop_371 = relay.exp(uop_347.astype('float64')) # shape=(8, 13, 10)
uop_373 = relay.exp(uop_349.astype('float64')) # shape=(8, 13, 10)
uop_374 = relay.asinh(uop_352.astype('float64')) # shape=(8, 13, 10)
uop_376 = relay.asinh(uop_354.astype('float64')) # shape=(8, 13, 10)
uop_379 = relay.rsqrt(uop_352.astype('float64')) # shape=(8, 13, 10)
uop_381 = relay.rsqrt(uop_354.astype('float64')) # shape=(8, 13, 10)
func_198_call = mod.get_global_var('func_198')
func_202_call = mutated_mod.get_global_var('func_202')
call_382 = relay.TupleGetItem(func_198_call(relay.reshape(call_330.astype('float64'), [2,]), relay.reshape(const_286.astype('float64'), [2,]), relay.reshape(const_286.astype('float64'), [2,]), ), 1)
call_383 = relay.TupleGetItem(func_202_call(relay.reshape(call_330.astype('float64'), [2,]), relay.reshape(const_286.astype('float64'), [2,]), relay.reshape(const_286.astype('float64'), [2,]), ), 1)
bop_387 = relay.bitwise_or(uop_379.astype('int16'), relay.reshape(bop_339.astype('int16'), relay.shape_of(uop_379))) # shape=(8, 13, 10)
bop_390 = relay.bitwise_or(uop_381.astype('int16'), relay.reshape(bop_342.astype('int16'), relay.shape_of(uop_381))) # shape=(8, 13, 10)
uop_391 = relay.asin(bop_339.astype('float32')) # shape=(8, 13, 10)
uop_393 = relay.asin(bop_342.astype('float32')) # shape=(8, 13, 10)
uop_394 = relay.log(bop_362.astype('float64')) # shape=(8,)
bop_398 = relay.add(uop_352.astype('uint16'), relay.reshape(bop_304.astype('uint16'), relay.shape_of(uop_352))) # shape=(8, 13, 10)
bop_401 = relay.add(uop_354.astype('uint16'), relay.reshape(bop_307.astype('uint16'), relay.shape_of(uop_354))) # shape=(8, 13, 10)
bop_402 = relay.floor_mod(bop_387.astype('float32'), relay.reshape(call_315.astype('float32'), relay.shape_of(bop_387))) # shape=(8, 13, 10)
bop_405 = relay.floor_mod(bop_390.astype('float32'), relay.reshape(call_316.astype('float32'), relay.shape_of(bop_390))) # shape=(8, 13, 10)
bop_409 = relay.greater(uop_374.astype('bool'), relay.reshape(uop_391.astype('bool'), relay.shape_of(uop_374))) # shape=(8, 13, 10)
bop_412 = relay.greater(uop_376.astype('bool'), relay.reshape(uop_393.astype('bool'), relay.shape_of(uop_376))) # shape=(8, 13, 10)
var_413 = relay.var("var_413", dtype = "uint16", shape = (8, 13, 10))#candidate|413|(8, 13, 10)|var|uint16
bop_414 = relay.right_shift(bop_292.astype('int16'), relay.reshape(var_413.astype('int16'), relay.shape_of(bop_292))) # shape=(8, 13, 10)
bop_417 = relay.right_shift(bop_295.astype('int16'), relay.reshape(var_413.astype('int16'), relay.shape_of(bop_295))) # shape=(8, 13, 10)
bop_418 = relay.less_equal(uop_352.astype('bool'), relay.reshape(bop_414.astype('bool'), relay.shape_of(uop_352))) # shape=(8, 13, 10)
bop_421 = relay.less_equal(uop_354.astype('bool'), relay.reshape(bop_417.astype('bool'), relay.shape_of(uop_354))) # shape=(8, 13, 10)
uop_422 = relay.sqrt(bop_402.astype('float64')) # shape=(8, 13, 10)
uop_424 = relay.sqrt(bop_405.astype('float64')) # shape=(8, 13, 10)
output = relay.Tuple([call_284,const_286,bop_311,call_330,call_344,call_355,bop_357,bop_366,uop_371,call_382,uop_394,bop_398,bop_409,bop_418,uop_422,])
output2 = relay.Tuple([call_287,const_286,bop_311,call_331,call_345,call_356,bop_360,bop_369,uop_373,call_383,uop_394,bop_401,bop_412,bop_421,uop_424,])
func_428 = relay.Function([var_285,var_310,var_361,var_413,], output)
mod['func_428'] = func_428
mod = relay.transform.InferType()(mod)
var_429 = relay.var("var_429", dtype = "float64", shape = (1,))#candidate|429|(1,)|var|float64
var_430 = relay.var("var_430", dtype = "float32", shape = (7,))#candidate|430|(7,)|var|float32
var_431 = relay.var("var_431", dtype = "float32", shape = (8,))#candidate|431|(8,)|var|float32
var_432 = relay.var("var_432", dtype = "uint16", shape = (8, 13, 10))#candidate|432|(8, 13, 10)|var|uint16
output = func_428(var_429,var_430,var_431,var_432,)
func_433 = relay.Function([var_429,var_430,var_431,var_432,], output)
mutated_mod['func_433'] = func_433
mutated_mod = relay.transform.InferType()(mutated_mod)
func_108_call = mod.get_global_var('func_108')
func_109_call = mutated_mod.get_global_var('func_109')
call_446 = relay.TupleGetItem(func_108_call(), 1)
call_447 = relay.TupleGetItem(func_109_call(), 1)
var_461 = relay.var("var_461", dtype = "float64", shape = (8, 13, 10))#candidate|461|(8, 13, 10)|var|float64
bop_462 = relay.left_shift(call_446.astype('int16'), relay.reshape(var_461.astype('int16'), relay.shape_of(call_446))) # shape=(8, 13, 10)
bop_465 = relay.left_shift(call_447.astype('int16'), relay.reshape(var_461.astype('int16'), relay.shape_of(call_447))) # shape=(8, 13, 10)
output = relay.Tuple([bop_462,])
output2 = relay.Tuple([bop_465,])
func_470 = relay.Function([var_461,], output)
mod['func_470'] = func_470
mod = relay.transform.InferType()(mod)
var_471 = relay.var("var_471", dtype = "float64", shape = (8, 13, 10))#candidate|471|(8, 13, 10)|var|float64
output = func_470(var_471)
func_472 = relay.Function([var_471], output)
mutated_mod['func_472'] = func_472
mutated_mod = relay.transform.InferType()(mutated_mod)
const_484 = relay.const([[[-1.344842],[6.588967],[5.213853],[-5.667890],[4.188541],[7.715186],[-3.842231],[1.430705],[-6.989490]],[[0.547366],[3.761871],[-9.903722],[6.994860],[-0.314887],[-6.091614],[3.782492],[4.882830],[3.635391]],[[-0.622555],[-6.415142],[-6.911782],[6.702611],[5.937622],[-9.393825],[8.599430],[-5.744806],[6.278551]],[[-0.341202],[-7.971379],[2.670538],[8.238641],[2.996441],[8.474183],[2.138613],[-9.510321],[7.361188]],[[-4.163878],[9.669687],[-8.316749],[5.628107],[-3.955918],[-4.796331],[-5.590017],[-1.748077],[4.815317]],[[5.959912],[-5.769263],[7.389203],[2.798784],[7.310787],[6.965586],[4.147816],[5.958914],[9.071909]]], dtype = "float32")#candidate|484|(6, 9, 1)|const|float32
uop_485 = relay.acosh(const_484.astype('float32')) # shape=(6, 9, 1)
bop_487 = relay.greater(uop_485.astype('bool'), relay.reshape(const_484.astype('bool'), relay.shape_of(uop_485))) # shape=(6, 9, 1)
uop_493 = relay.sinh(uop_485.astype('float64')) # shape=(6, 9, 1)
uop_495 = relay.asin(uop_493.astype('float64')) # shape=(6, 9, 1)
uop_497 = relay.sigmoid(uop_495.astype('float64')) # shape=(6, 9, 1)
bop_499 = relay.subtract(uop_497.astype('int32'), relay.reshape(uop_493.astype('int32'), relay.shape_of(uop_497))) # shape=(6, 9, 1)
uop_502 = relay.tan(uop_495.astype('float64')) # shape=(6, 9, 1)
func_198_call = mod.get_global_var('func_198')
func_202_call = mutated_mod.get_global_var('func_202')
const_506 = relay.const([1.869176,0.364059], dtype = "float64")#candidate|506|(2,)|const|float64
call_505 = relay.TupleGetItem(func_198_call(relay.reshape(const_506.astype('float64'), [2,]), relay.reshape(const_506.astype('float64'), [2,]), relay.reshape(const_506.astype('float64'), [2,]), ), 0)
call_507 = relay.TupleGetItem(func_202_call(relay.reshape(const_506.astype('float64'), [2,]), relay.reshape(const_506.astype('float64'), [2,]), relay.reshape(const_506.astype('float64'), [2,]), ), 0)
var_508 = relay.var("var_508", dtype = "int32", shape = (6, 9, 3))#candidate|508|(6, 9, 3)|var|int32
bop_509 = relay.minimum(bop_499.astype('uint64'), var_508.astype('uint64')) # shape=(6, 9, 3)
bop_513 = relay.greater(uop_502.astype('bool'), const_506.astype('bool')) # shape=(6, 9, 2)
bop_520 = relay.maximum(uop_495.astype('float32'), bop_513.astype('float32')) # shape=(6, 9, 2)
uop_523 = relay.rsqrt(bop_520.astype('float64')) # shape=(6, 9, 2)
uop_525 = relay.log(uop_523.astype('float32')) # shape=(6, 9, 2)
bop_527 = relay.greater_equal(uop_525.astype('bool'), uop_493.astype('bool')) # shape=(6, 9, 2)
func_198_call = mod.get_global_var('func_198')
func_202_call = mutated_mod.get_global_var('func_202')
call_531 = relay.TupleGetItem(func_198_call(relay.reshape(const_506.astype('float64'), [2,]), relay.reshape(const_506.astype('float64'), [2,]), relay.reshape(const_506.astype('float64'), [2,]), ), 0)
call_532 = relay.TupleGetItem(func_202_call(relay.reshape(const_506.astype('float64'), [2,]), relay.reshape(const_506.astype('float64'), [2,]), relay.reshape(const_506.astype('float64'), [2,]), ), 0)
bop_534 = relay.left_shift(bop_527.astype('uint16'), relay.reshape(bop_520.astype('uint16'), relay.shape_of(bop_527))) # shape=(6, 9, 2)
bop_538 = relay.logical_and(uop_502.astype('bool'), bop_513.astype('bool')) # shape=(6, 9, 2)
uop_545 = relay.log10(uop_523.astype('float32')) # shape=(6, 9, 2)
bop_547 = relay.bitwise_xor(uop_523.astype('int64'), relay.reshape(uop_525.astype('int64'), relay.shape_of(uop_523))) # shape=(6, 9, 2)
uop_550 = relay.acos(bop_520.astype('float64')) # shape=(6, 9, 2)
bop_553 = relay.subtract(bop_547.astype('int32'), uop_502.astype('int32')) # shape=(6, 9, 2)
func_470_call = mod.get_global_var('func_470')
func_472_call = mutated_mod.get_global_var('func_472')
var_558 = relay.var("var_558", dtype = "float64", shape = (1040,))#candidate|558|(1040,)|var|float64
call_557 = relay.TupleGetItem(func_470_call(relay.reshape(var_558.astype('float64'), [8, 13, 10])), 0)
call_559 = relay.TupleGetItem(func_472_call(relay.reshape(var_558.astype('float64'), [8, 13, 10])), 0)
output = relay.Tuple([bop_487,call_505,bop_509,call_531,bop_534,bop_538,uop_545,uop_550,bop_553,call_557,var_558,])
output2 = relay.Tuple([bop_487,call_507,bop_509,call_532,bop_534,bop_538,uop_545,uop_550,bop_553,call_559,var_558,])
func_560 = relay.Function([var_508,var_558,], output)
mod['func_560'] = func_560
mod = relay.transform.InferType()(mod)
mutated_mod['func_560'] = func_560
mutated_mod = relay.transform.InferType()(mutated_mod)
func_560_call = mutated_mod.get_global_var('func_560')
var_562 = relay.var("var_562", dtype = "int32", shape = (6, 9, 3))#candidate|562|(6, 9, 3)|var|int32
var_563 = relay.var("var_563", dtype = "float64", shape = (1040,))#candidate|563|(1040,)|var|float64
call_561 = func_560_call(var_562,var_563,)
output = call_561
func_564 = relay.Function([var_562,var_563,], output)
mutated_mod['func_564'] = func_564
mutated_mod = relay.transform.InferType()(mutated_mod)
var_600 = relay.var("var_600", dtype = "float64", shape = (16, 1))#candidate|600|(16, 1)|var|float64
uop_601 = relay.sin(var_600.astype('float64')) # shape=(16, 1)
bop_604 = relay.less(uop_601.astype('bool'), relay.reshape(var_600.astype('bool'), relay.shape_of(uop_601))) # shape=(16, 1)
uop_607 = relay.atanh(bop_604.astype('float64')) # shape=(16, 1)
const_609 = relay.const([[0.132081,-9.649146,4.936663,1.314461,-3.173409],[0.002391,0.050596,3.408574,-7.227828,-3.651032],[5.811975,-3.856137,3.058965,3.337854,-1.356177],[-1.534434,-2.453490,5.552473,-5.732770,-1.109578],[7.370071,4.588649,-6.634628,-5.850005,-1.489993],[-6.269452,6.116850,-3.579896,-1.486226,1.350306],[-6.735962,-9.457745,3.909491,-7.611176,6.916148],[-4.752973,-1.370280,2.942628,-4.242967,3.883153],[-9.143870,5.703124,3.442032,2.713399,9.568792],[-3.737028,-7.721878,5.705264,-3.126125,-7.759982],[-5.502802,-6.343859,-3.718197,-4.280888,5.878525],[7.965118,5.223950,4.396823,-4.235695,4.262904],[-3.672768,5.057430,-7.829417,-6.966112,-4.306527],[-0.461079,7.220499,0.103361,7.156551,-1.037385],[-0.717100,-2.571191,-4.969845,-1.957869,-9.646147],[9.412113,7.512432,-5.992450,5.595042,-4.065581]], dtype = "float64")#candidate|609|(16, 5)|const|float64
bop_610 = relay.logical_or(uop_607.astype('bool'), const_609.astype('bool')) # shape=(16, 5)
const_616 = relay.const([[2.242324,4.387346,-2.506987,-0.549662,-5.105286,-2.254698,-8.434737,-7.235522,8.799124,-8.246883,4.591524,1.089355,-2.574699,2.495188,-3.889720,-9.024111],[4.177532,3.229466,1.597102,-3.775457,-1.358328,-9.765926,5.353182,-0.841062,4.339864,-2.609431,4.167323,5.897670,-2.123369,-1.396266,1.350224,-6.151110],[9.535253,-3.819213,-5.029569,-7.200091,5.742408,5.172406,-9.723412,8.510689,1.087222,-9.668981,4.031805,-6.602603,8.728962,-7.139090,1.177790,5.084151],[2.504378,-8.449243,-4.317769,-9.555113,5.234921,6.452257,9.201319,9.220122,-8.982329,6.885199,7.632167,5.578535,2.848349,7.825353,8.318633,2.047202],[9.281343,-9.056106,-8.377821,0.519295,-3.026069,4.928347,-9.586769,-0.316986,6.775061,-4.107091,5.980698,7.361352,-8.368978,-4.514354,9.404912,-6.611192],[6.974282,6.183589,9.275830,6.678636,8.852956,-8.569826,-0.318169,-6.750404,-1.250666,-7.983725,-9.921343,-1.915755,9.064850,-1.741942,-0.016073,5.977004],[3.340325,-2.070044,8.223615,5.200459,-6.521602,-6.438588,-7.149821,-3.096407,-2.444632,9.217101,-0.294499,7.591769,-9.135719,0.110475,-6.731277,-2.308122],[0.403579,-3.771369,-3.623656,4.727002,4.612504,4.867192,-1.269697,8.417247,3.511944,3.399524,-4.876343,6.146690,4.440768,-3.916719,9.391541,7.496946],[2.115260,1.393477,3.058221,-3.474665,3.411727,1.888103,-8.601091,-9.098117,5.878601,3.690621,-6.682642,-8.939883,2.430494,8.237378,7.970402,9.778598],[-8.896686,-0.413483,2.135858,5.671616,3.883806,-8.389062,8.021546,7.574560,8.962014,-3.989500,5.271286,6.288801,1.480783,4.458893,9.115006,7.742982],[0.845271,-2.175440,4.506551,2.431591,-9.230357,-0.692999,-5.476600,-6.574605,-4.454277,7.889953,9.871422,6.247321,6.771751,9.660208,5.210733,0.196483],[-4.373032,-1.027361,9.597339,-5.533087,7.015967,3.496945,-6.422676,4.427852,-4.389419,-2.756818,1.234440,1.517568,-8.182960,-3.824288,2.175368,9.456304],[9.156627,7.263191,8.580907,-4.745417,-4.637762,9.017900,8.083848,-4.726840,2.361083,4.497974,-3.958134,-1.768012,3.925250,-1.305408,-7.342476,-8.051067],[9.708222,-0.103490,-3.263869,-2.963186,-8.192050,4.093128,-3.307257,8.896137,6.689473,3.626916,4.137480,-6.041513,-3.061524,-6.671644,-3.751660,-6.578210],[-0.189447,5.612204,4.606586,-4.754799,7.496977,7.600176,6.327835,3.553437,1.743858,-6.798024,-6.958595,5.245568,4.689157,2.616599,-9.619307,-2.716889],[-4.612379,8.721948,4.966450,4.697282,-9.180785,-7.918566,-2.169197,-8.892311,-7.391475,-3.227458,2.818769,7.723410,2.905277,0.325908,-1.028876,7.718127]], dtype = "float64")#candidate|616|(16, 16)|const|float64
bop_617 = relay.subtract(uop_607.astype('int16'), const_616.astype('int16')) # shape=(16, 16)
var_622 = relay.var("var_622", dtype = "float64", shape = (16, 7))#candidate|622|(16, 7)|var|float64
bop_623 = relay.right_shift(uop_607.astype('int64'), var_622.astype('int64')) # shape=(16, 7)
bop_626 = relay.add(uop_601.astype('uint32'), relay.reshape(bop_604.astype('uint32'), relay.shape_of(uop_601))) # shape=(16, 1)
output = relay.Tuple([bop_610,bop_617,bop_623,bop_626,])
output2 = relay.Tuple([bop_610,bop_617,bop_623,bop_626,])
func_629 = relay.Function([var_600,var_622,], output)
mod['func_629'] = func_629
mod = relay.transform.InferType()(mod)
mutated_mod['func_629'] = func_629
mutated_mod = relay.transform.InferType()(mutated_mod)
func_629_call = mutated_mod.get_global_var('func_629')
var_631 = relay.var("var_631", dtype = "float64", shape = (16, 1))#candidate|631|(16, 1)|var|float64
var_632 = relay.var("var_632", dtype = "float64", shape = (16, 7))#candidate|632|(16, 7)|var|float64
call_630 = func_629_call(var_631,var_632,)
output = call_630
func_633 = relay.Function([var_631,var_632,], output)
mutated_mod['func_633'] = func_633
mutated_mod = relay.transform.InferType()(mutated_mod)
func_256_call = mod.get_global_var('func_256')
func_257_call = mutated_mod.get_global_var('func_257')
call_674 = relay.TupleGetItem(func_256_call(), 0)
call_675 = relay.TupleGetItem(func_257_call(), 0)
output = call_674
output2 = call_675
func_689 = relay.Function([], output)
mod['func_689'] = func_689
mod = relay.transform.InferType()(mod)
output = func_689()
func_690 = relay.Function([], output)
mutated_mod['func_690'] = func_690
mutated_mod = relay.transform.InferType()(mutated_mod)
func_108_call = mod.get_global_var('func_108')
func_109_call = mutated_mod.get_global_var('func_109')
call_736 = relay.TupleGetItem(func_108_call(), 1)
call_737 = relay.TupleGetItem(func_109_call(), 1)
output = relay.Tuple([call_736,])
output2 = relay.Tuple([call_737,])
func_749 = relay.Function([], output)
mod['func_749'] = func_749
mod = relay.transform.InferType()(mod)
mutated_mod['func_749'] = func_749
mutated_mod = relay.transform.InferType()(mutated_mod)
func_749_call = mutated_mod.get_global_var('func_749')
call_750 = func_749_call()
output = call_750
func_751 = relay.Function([], output)
mutated_mod['func_751'] = func_751
mutated_mod = relay.transform.InferType()(mutated_mod)
const_758 = relay.const([[[1.409898,6.732497,-7.351842,-9.611536,-8.099921,8.466348,7.868558,9.431094,1.514516],[3.875726,-5.273831,-7.045181,-6.212584,-3.871921,-4.185468,-8.298558,-9.654746,2.534840],[0.856081,6.898692,7.927596,-4.325568,-0.349467,8.004830,1.466033,8.083145,-4.430672],[-1.969941,0.217409,-6.420062,-0.295890,8.834456,-4.852544,2.252658,-2.067639,6.834302]],[[-4.903211,-3.869787,1.898658,-2.894809,2.532329,4.276436,8.315878,-2.257180,-2.939845],[-0.853075,2.253179,-5.007106,-7.203456,8.121798,-5.179452,-0.569258,-3.761894,7.586158],[-2.196357,3.165244,5.056335,7.564099,-2.370071,9.226293,-5.038923,9.781030,9.294024],[0.942008,3.447055,2.486453,-0.041874,-1.903001,-8.017124,-0.378386,3.403831,-1.052818]],[[-8.732354,3.591959,7.245722,-6.725265,-5.593237,-8.328521,4.680046,6.774656,-5.945794],[-9.438250,1.259676,-1.888920,-6.369472,-1.310944,-3.558300,-4.057794,9.784967,3.609217],[2.716616,-5.640664,3.554255,1.071961,3.442029,5.439905,5.791854,-4.277535,6.997956],[3.388504,9.755871,9.804630,-4.944886,8.934964,-3.321897,4.142381,-7.530811,2.679742]],[[-9.474331,-5.556003,-9.284801,9.811803,1.437945,-6.080667,-0.001010,-1.156490,4.027729],[1.570134,6.144910,0.228625,4.964672,2.829981,5.949518,8.123762,-1.812718,9.083862],[-4.231879,-7.959533,-0.962729,-0.315778,-7.457125,-1.965005,-4.653803,-6.443939,-3.333494],[0.914903,-3.172777,8.724552,-6.416216,5.001095,-6.801649,0.922078,3.600014,-6.368436]],[[-6.152822,2.876321,5.506261,-8.808406,6.391197,-7.281626,2.292820,-7.821529,-2.710553],[2.597311,-2.533550,2.751682,4.316143,6.500351,8.591915,-6.691788,-4.509063,-2.506231],[7.018028,-3.182112,1.623988,2.406248,-0.536300,-0.670053,7.457335,3.508985,-2.175006],[5.440536,7.000699,5.076304,-8.734073,-2.696967,1.308306,0.743626,-8.000499,6.209780]],[[-5.185651,-8.490805,-6.778843,7.121704,-1.830905,-9.943282,-5.378405,-2.930498,-3.476145],[-7.506326,5.621710,-2.226578,6.522573,5.660164,6.304288,-5.080639,8.359568,-6.404647],[1.045608,-7.844413,4.161053,4.893832,-3.091561,3.021050,0.354190,9.175379,7.345979],[2.585011,4.994885,-4.332122,5.080080,-3.260415,4.843036,9.148999,9.573958,-6.172290]],[[-3.197971,-1.215637,7.172577,3.660596,7.954673,7.236214,-8.221751,4.895010,4.025754],[-8.027542,-9.390134,-1.067713,-1.698249,5.322782,7.479140,-8.920123,6.204233,-0.936357],[-2.835046,1.741697,-4.998023,-2.855519,5.050793,7.394747,9.628589,5.892133,-7.675454],[0.627895,9.313188,-8.553004,-5.333648,-2.519654,2.681403,-9.265283,2.474261,3.295686]],[[-4.381219,-7.515266,-2.504517,9.831141,-5.086910,9.037488,-5.002953,9.607927,8.067386],[-0.654318,-1.980988,0.008552,0.820288,0.413447,1.898248,-6.574042,4.947668,5.075334],[-0.401554,4.854948,-7.805699,-1.034049,-2.574896,-2.668374,5.033131,3.369844,-4.671719],[-8.283661,7.242831,-3.007599,-6.689591,-9.386870,6.466424,7.930747,-5.207481,-7.436181]],[[-1.010610,5.680227,-6.661170,-0.604639,-3.218058,8.338576,6.726518,-4.846952,-1.280535],[6.347731,-7.225593,-3.414523,-5.174527,7.007730,-8.956414,8.117612,-8.248329,8.115423],[-1.885256,2.175674,-3.534691,2.379003,-2.002837,-0.482181,-9.413283,2.433104,1.410264],[3.502514,-3.755946,8.936758,-6.965767,5.927724,9.112433,-6.997450,-8.642007,5.897853]]], dtype = "float32")#candidate|758|(9, 4, 9)|const|float32
uop_759 = relay.asin(const_758.astype('float32')) # shape=(9, 4, 9)
var_761 = relay.var("var_761", dtype = "float32", shape = (9, 4, 9))#candidate|761|(9, 4, 9)|var|float32
bop_762 = relay.minimum(uop_759.astype('uint64'), relay.reshape(var_761.astype('uint64'), relay.shape_of(uop_759))) # shape=(9, 4, 9)
bop_772 = relay.power(const_758.astype('float32'), relay.reshape(var_761.astype('float32'), relay.shape_of(const_758))) # shape=(9, 4, 9)
bop_776 = relay.logical_and(bop_772.astype('bool'), relay.reshape(bop_762.astype('bool'), relay.shape_of(bop_772))) # shape=(9, 4, 9)
func_428_call = mod.get_global_var('func_428')
func_433_call = mutated_mod.get_global_var('func_433')
const_780 = relay.const([-6.519691], dtype = "float64")#candidate|780|(1,)|const|float64
const_781 = relay.const([-7.002573,-1.506408,1.812610,-6.202155,-5.370168,2.109085,7.815307], dtype = "float32")#candidate|781|(7,)|const|float32
const_782 = relay.const([-4.402351,-7.837636,9.167130,4.497309,-8.876814,2.732776,-4.474156,4.219096], dtype = "float32")#candidate|782|(8,)|const|float32
var_783 = relay.var("var_783", dtype = "uint16", shape = (1040,))#candidate|783|(1040,)|var|uint16
call_779 = relay.TupleGetItem(func_428_call(relay.reshape(const_780.astype('float64'), [1,]), relay.reshape(const_781.astype('float32'), [7,]), relay.reshape(const_782.astype('float32'), [8,]), relay.reshape(var_783.astype('uint16'), [8, 13, 10]), ), 13)
call_784 = relay.TupleGetItem(func_433_call(relay.reshape(const_780.astype('float64'), [1,]), relay.reshape(const_781.astype('float32'), [7,]), relay.reshape(const_782.astype('float32'), [8,]), relay.reshape(var_783.astype('uint16'), [8, 13, 10]), ), 13)
uop_797 = relay.asinh(bop_776.astype('float32')) # shape=(9, 4, 9)
var_799 = relay.var("var_799", dtype = "bool", shape = (9, 4, 9))#candidate|799|(9, 4, 9)|var|bool
bop_800 = relay.left_shift(bop_776.astype('uint16'), relay.reshape(var_799.astype('uint16'), relay.shape_of(bop_776))) # shape=(9, 4, 9)
bop_804 = relay.bitwise_and(uop_797.astype('int16'), relay.reshape(bop_776.astype('int16'), relay.shape_of(uop_797))) # shape=(9, 4, 9)
uop_809 = relay.cos(uop_759.astype('float64')) # shape=(9, 4, 9)
uop_814 = relay.log2(bop_776.astype('float32')) # shape=(9, 4, 9)
func_470_call = mod.get_global_var('func_470')
func_472_call = mutated_mod.get_global_var('func_472')
call_816 = relay.TupleGetItem(func_470_call(relay.reshape(var_783.astype('float64'), [8, 13, 10])), 0)
call_817 = relay.TupleGetItem(func_472_call(relay.reshape(var_783.astype('float64'), [8, 13, 10])), 0)
uop_818 = relay.sin(bop_800.astype('float32')) # shape=(9, 4, 9)
bop_820 = relay.divide(uop_797.astype('float32'), relay.reshape(bop_804.astype('float32'), relay.shape_of(uop_797))) # shape=(9, 4, 9)
bop_823 = relay.floor_mod(uop_809.astype('float64'), relay.reshape(bop_800.astype('float64'), relay.shape_of(uop_809))) # shape=(9, 4, 9)
uop_829 = relay.log10(bop_776.astype('float32')) # shape=(9, 4, 9)
uop_835 = relay.tan(uop_818.astype('float64')) # shape=(9, 4, 9)
output = relay.Tuple([call_779,const_780,const_781,const_782,var_783,uop_814,call_816,bop_820,bop_823,uop_829,uop_835,])
output2 = relay.Tuple([call_784,const_780,const_781,const_782,var_783,uop_814,call_817,bop_820,bop_823,uop_829,uop_835,])
func_837 = relay.Function([var_761,var_783,var_799,], output)
mod['func_837'] = func_837
mod = relay.transform.InferType()(mod)
mutated_mod['func_837'] = func_837
mutated_mod = relay.transform.InferType()(mutated_mod)
func_837_call = mutated_mod.get_global_var('func_837')
var_839 = relay.var("var_839", dtype = "float32", shape = (9, 4, 9))#candidate|839|(9, 4, 9)|var|float32
var_840 = relay.var("var_840", dtype = "uint16", shape = (1040,))#candidate|840|(1040,)|var|uint16
var_841 = relay.var("var_841", dtype = "bool", shape = (9, 4, 9))#candidate|841|(9, 4, 9)|var|bool
call_838 = func_837_call(var_839,var_840,var_841,)
output = call_838
func_842 = relay.Function([var_839,var_840,var_841,], output)
mutated_mod['func_842'] = func_842
mutated_mod = relay.transform.InferType()(mutated_mod)
var_864 = relay.var("var_864", dtype = "bool", shape = (3, 16, 10))#candidate|864|(3, 16, 10)|var|bool
var_865 = relay.var("var_865", dtype = "bool", shape = (3, 16, 10))#candidate|865|(3, 16, 10)|var|bool
bop_866 = relay.logical_and(var_864.astype('bool'), relay.reshape(var_865.astype('bool'), relay.shape_of(var_864))) # shape=(3, 16, 10)
bop_869 = relay.maximum(var_864.astype('int16'), relay.reshape(bop_866.astype('int16'), relay.shape_of(var_864))) # shape=(3, 16, 10)
func_689_call = mod.get_global_var('func_689')
func_690_call = mutated_mod.get_global_var('func_690')
call_872 = func_689_call()
call_873 = func_689_call()
uop_877 = relay.erf(bop_866.astype('float32')) # shape=(3, 16, 10)
var_881 = relay.var("var_881", dtype = "float32", shape = (3, 16, 10))#candidate|881|(3, 16, 10)|var|float32
bop_882 = relay.floor_mod(uop_877.astype('float64'), relay.reshape(var_881.astype('float64'), relay.shape_of(uop_877))) # shape=(3, 16, 10)
var_885 = relay.var("var_885", dtype = "bool", shape = (3, 16, 10))#candidate|885|(3, 16, 10)|var|bool
bop_886 = relay.minimum(var_864.astype('float32'), relay.reshape(var_885.astype('float32'), relay.shape_of(var_864))) # shape=(3, 16, 10)
bop_891 = relay.logical_or(bop_882.astype('bool'), relay.reshape(var_885.astype('bool'), relay.shape_of(bop_882))) # shape=(3, 16, 10)
uop_894 = relay.log(bop_866.astype('float32')) # shape=(3, 16, 10)
uop_896 = relay.cos(bop_882.astype('float32')) # shape=(3, 16, 10)
output = relay.Tuple([bop_869,call_872,bop_886,bop_891,uop_894,uop_896,])
output2 = relay.Tuple([bop_869,call_873,bop_886,bop_891,uop_894,uop_896,])
F = relay.Function([var_864,var_865,var_881,var_885,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_864,var_865,var_881,var_885,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_864= np.array([[[True,True,True,True,False,True,True,False,False,False],[False,True,True,True,False,True,False,False,False,False],[False,True,False,False,True,True,False,True,False,True],[True,True,False,False,True,False,False,False,True,False],[False,True,False,True,False,False,False,False,False,False],[False,False,True,False,True,True,True,True,False,True],[False,False,False,False,False,True,True,False,True,False],[True,True,True,True,False,True,True,True,True,True],[True,True,True,True,True,False,False,False,True,False],[True,True,False,True,False,True,True,True,True,False],[True,False,False,False,True,False,True,False,True,False],[True,True,True,True,False,False,True,False,False,True],[False,True,False,True,False,False,False,True,True,True],[False,False,False,False,False,True,False,True,False,False],[True,True,True,False,False,True,False,False,True,False],[True,True,True,True,False,False,False,False,True,True]],[[False,True,False,False,True,False,True,False,False,True],[False,True,True,True,False,True,False,False,True,True],[True,False,False,False,False,True,False,False,True,False],[True,True,True,True,True,True,False,True,True,False],[False,True,True,True,False,True,True,False,False,False],[True,True,True,True,True,True,False,False,True,False],[False,False,True,True,False,True,False,False,False,True],[False,False,False,True,False,False,True,True,False,True],[True,True,False,False,True,True,True,True,True,False],[True,True,True,True,True,True,False,True,True,False],[True,True,False,True,False,False,False,True,True,False],[False,True,False,False,True,True,False,True,False,True],[True,False,True,False,True,False,True,True,True,False],[True,False,True,True,False,False,False,False,True,True],[False,False,False,False,False,False,True,False,True,False],[False,False,False,True,True,True,True,False,False,False]],[[True,True,True,False,False,True,False,False,True,False],[False,True,False,False,False,False,False,True,True,True],[True,True,False,True,False,True,False,True,True,False],[True,False,True,False,True,False,True,True,False,False],[True,False,False,True,True,False,False,True,True,True],[True,True,False,True,False,False,False,True,True,True],[True,False,False,True,True,True,True,False,False,True],[True,False,False,True,True,True,True,True,False,False],[False,True,True,False,False,False,False,False,True,True],[False,False,False,False,True,True,True,False,True,True],[False,False,True,False,True,True,True,False,False,True],[True,True,True,False,True,True,False,False,False,True],[True,False,False,True,False,True,False,True,False,False],[False,False,False,False,False,False,True,True,False,True],[False,True,False,True,False,False,True,False,False,True],[False,True,True,False,True,True,True,True,False,True]]], dtype='bool')
module1.set_input('var_864', input_864)
input_865= np.array([[[True,False,True,False,False,True,False,True,False,False],[True,True,False,True,False,False,True,True,False,True],[False,False,True,True,False,False,False,False,True,False],[True,True,True,True,True,True,False,True,True,True],[True,False,False,True,True,False,True,True,False,False],[False,False,False,True,False,True,True,False,True,True],[True,False,False,False,True,True,True,False,False,False],[True,True,False,True,True,False,True,False,True,True],[False,True,False,True,True,False,False,False,False,True],[True,True,True,True,True,True,False,True,True,False],[True,False,False,False,True,True,False,False,True,True],[False,False,False,False,True,True,False,True,False,False],[False,True,False,True,True,True,False,True,False,True],[False,False,True,False,False,False,True,False,True,False],[True,True,False,True,True,True,True,True,False,True],[True,False,False,True,False,True,True,False,True,True]],[[False,True,True,True,True,True,False,False,True,True],[False,False,False,True,False,True,False,True,False,True],[False,True,True,False,True,True,False,False,False,True],[True,False,False,True,True,True,False,True,True,False],[False,True,False,False,False,False,True,True,True,True],[False,True,True,True,False,False,True,False,False,True],[True,True,True,True,False,False,False,True,False,True],[True,False,False,True,True,True,False,False,False,True],[False,False,True,True,True,True,True,False,True,True],[True,False,False,False,True,True,True,True,False,True],[False,True,True,False,False,False,True,False,True,True],[False,True,True,True,False,True,False,True,True,True],[False,True,True,False,True,False,True,False,True,True],[True,True,False,True,True,True,True,True,True,False],[False,True,True,False,False,True,True,False,False,False],[True,False,True,False,True,True,False,False,True,True]],[[False,True,False,False,False,False,True,True,True,True],[False,True,False,True,True,True,True,False,True,True],[True,True,False,False,True,True,True,False,True,True],[True,True,False,False,False,False,False,True,True,True],[False,True,False,True,True,False,False,False,False,True],[True,True,False,True,False,False,False,True,False,False],[False,True,True,False,True,True,False,True,True,False],[False,True,True,True,False,False,True,False,False,True],[False,False,True,False,True,True,False,False,False,False],[False,True,False,True,True,True,True,False,True,False],[False,True,True,True,False,False,False,True,False,False],[True,False,False,False,True,False,True,True,False,True],[False,False,False,False,True,False,True,False,False,False],[False,False,False,False,True,False,False,True,False,False],[False,True,True,False,True,False,False,False,True,False],[True,True,False,False,True,False,False,True,False,False]]], dtype='bool')
module1.set_input('var_865', input_865)
input_881= np.array([[[-0.278214,-2.434645,2.819654,-6.466852,-1.285474,-6.447596,0.086749,-7.281046,-0.264466,0.535924],[-8.092293,-6.976503,-8.314767,9.368384,-9.263472,1.619745,4.869380,5.675750,5.018610,8.086915],[0.560393,-0.116396,-6.314910,-7.558923,-7.255714,-5.036124,-1.324768,-1.894348,1.879525,-0.771546],[-8.903040,-3.195358,8.709066,-8.223965,-6.427288,-1.152456,-9.748993,-7.717660,2.318408,0.636886],[-2.197551,7.303261,-8.476583,2.109138,3.265062,0.687183,7.081977,-4.484789,5.267090,9.125240],[-9.795366,-6.705559,-5.542772,9.600819,6.257126,-2.081413,-6.159699,-4.175804,3.922946,-0.121571],[1.497484,6.790284,-2.516576,-4.582469,-0.020587,0.280719,0.646347,4.279331,-0.276164,-6.278125],[6.759116,6.601148,-6.483198,-9.406109,3.439060,-7.746848,5.023240,8.555957,7.952578,2.804995],[4.231652,-5.053319,-7.589961,-1.969121,3.896538,-1.214027,9.254079,-1.685986,3.586239,-9.121039],[-1.029970,-4.830462,-9.113273,4.598603,0.427683,5.444034,0.537981,3.430170,-7.984841,-1.138359],[-4.077215,-2.372633,-2.332607,1.510018,-9.877654,-4.174284,8.691550,-9.720892,-6.312512,6.983503],[-9.724216,-7.795813,6.141913,-2.427854,2.324830,9.085923,1.581472,-0.480230,-6.760682,-2.504035],[4.143478,8.021941,2.864266,-6.922087,7.539625,8.753987,-6.224639,3.765836,4.261875,2.809348],[-1.013395,9.764970,7.103982,1.247462,4.511042,-7.065500,-5.928336,4.203234,3.603699,6.141117],[-0.779425,-5.007454,-2.330722,-8.198073,9.567193,7.652969,-4.061264,-9.608748,-2.220046,7.646928],[9.905398,-8.498085,-2.005257,9.007919,8.897303,-5.848584,0.585661,-3.877207,4.664115,8.074115]],[[6.626207,-4.441066,2.899766,7.394764,6.477372,-8.850318,-3.489179,-6.327703,-1.565918,-0.528544],[0.672331,6.810073,9.102938,-6.983119,-8.373003,-5.572334,-7.018070,6.115729,2.573507,4.478598],[-2.961800,2.790651,-3.060312,3.960688,8.677735,-8.190183,-9.882504,8.143761,-7.855560,-1.297013],[1.194448,-2.955131,-8.130557,-0.350558,-2.296141,-0.141329,5.510178,3.273920,6.489516,-7.745493],[-9.777479,9.150127,6.521546,-8.954362,1.715565,-1.270745,6.591981,-0.038488,4.719278,8.612069],[1.937137,-0.046815,1.364053,-8.189655,-1.919767,7.562791,-4.438465,6.236965,5.173602,7.400026],[9.539423,-8.412645,-1.661992,-3.718731,1.263588,4.468911,2.992710,2.464949,4.615037,5.595025],[-7.068162,-5.624982,-5.349050,-7.186503,1.438012,-1.707300,-3.203615,-1.905310,4.809921,-6.812841],[-2.085470,0.305101,5.627908,9.406033,5.692221,-9.103525,6.587752,-4.098471,-0.182097,-9.870887],[-5.265239,-0.481649,7.636603,8.239477,6.329235,7.347959,3.502351,9.338978,1.480500,7.053359],[-6.203943,-1.294785,-0.932083,8.451398,-8.812311,-2.874605,-6.198409,6.998524,6.228387,-1.982035],[-9.797584,6.080885,3.938307,-2.848294,3.730204,1.593660,2.398841,5.102751,-6.017936,-3.233859],[-1.654260,5.415385,-1.139287,-5.225118,0.720335,-3.540093,-3.110892,2.428229,0.898216,-1.632589],[3.329063,-0.292540,-7.258834,-5.655646,-0.550143,5.659727,6.961262,7.921401,6.563548,-4.508397],[-0.740515,-0.809252,-2.878255,-5.821267,5.187202,-4.352697,-4.466827,3.876205,-4.645752,6.363787],[-1.764677,-1.324106,2.983355,0.933612,8.779698,1.638021,7.608433,2.367400,6.560149,7.564531]],[[-2.643503,5.610140,-8.642806,8.343349,-8.174115,0.230863,6.142035,2.407181,5.372968,0.888947],[-1.287764,-3.185884,-9.318026,0.059625,-8.393814,-2.792771,-9.898517,2.419888,-6.515134,7.909240],[-2.261006,-4.416211,-6.140723,-6.331691,-9.543867,5.183461,3.272150,-6.745421,8.052239,7.105057],[-4.657577,-3.338019,-5.402280,6.289639,4.107731,2.970784,2.550684,6.180149,8.214755,1.830293],[-6.429482,-6.093444,5.449581,1.626429,-0.961831,-8.319395,8.815015,2.435728,-6.013191,-0.573186],[-4.869422,5.773466,0.153152,5.983679,8.341269,8.881621,0.143984,3.900428,-8.300664,5.776984],[2.215577,-4.303383,0.537482,-5.040489,-1.978014,7.513023,3.715332,2.363985,5.742875,8.729697],[1.050231,-0.393001,5.471198,3.617231,1.903336,-5.891454,-9.290892,9.878128,5.676746,-9.832582],[-9.606456,-4.300697,-7.504279,8.550698,-4.687893,-5.020857,9.168477,3.067709,-3.869864,-5.850238],[3.576506,6.935180,3.279484,1.185959,-2.847507,3.504910,3.782777,-2.529046,6.164333,-1.884201],[4.562358,3.573801,4.260866,0.211547,-8.073589,9.211284,-8.278244,8.077084,3.052651,-1.129848],[-0.619596,6.146551,6.338569,-9.541765,1.454520,5.984200,6.766406,5.375871,4.312364,5.233786],[-4.830641,9.036682,5.628702,3.257919,-0.867472,-5.269293,2.908550,-2.733406,-7.936642,1.071712],[0.790056,-2.392582,5.743824,-3.303924,-9.819865,-1.695626,-9.903240,9.725427,4.105613,4.232645],[8.644459,-8.512250,3.679142,7.984304,8.801193,7.043714,1.524905,-6.305759,1.046849,9.773995],[-8.627713,-9.674110,-5.849051,-0.631771,-8.754824,2.310506,0.056042,-3.161281,-3.813196,-0.025096]]], dtype='float32')
module1.set_input('var_881', input_881)
input_885= np.array([[[True,False,False,False,True,True,True,False,False,True],[False,False,True,False,False,True,False,True,False,False],[True,True,False,False,False,True,False,True,True,False],[False,False,False,True,False,True,False,False,True,False],[True,False,False,False,False,True,False,True,False,False],[True,True,False,True,False,False,True,False,True,False],[False,False,False,False,True,True,True,True,True,True],[False,False,True,False,True,True,True,True,False,True],[True,False,True,True,True,True,False,False,True,True],[False,False,True,True,False,False,False,False,False,True],[True,False,True,False,False,False,True,False,True,False],[True,True,False,False,False,True,True,False,False,True],[False,False,True,True,True,True,False,True,True,False],[False,False,False,False,False,False,False,False,False,False],[False,False,True,False,False,True,True,False,False,True],[True,False,False,False,True,True,True,True,True,True]],[[True,True,True,True,True,False,False,False,False,False],[False,False,False,True,False,True,False,True,True,False],[True,False,False,True,False,False,False,True,True,True],[False,True,True,False,False,False,False,False,False,False],[True,False,False,True,True,False,False,False,True,True],[False,False,True,True,True,True,True,False,True,False],[True,True,True,False,True,False,True,True,False,True],[True,True,False,True,True,True,True,True,True,True],[True,False,True,False,True,True,False,False,True,True],[False,False,False,False,True,False,False,False,True,False],[True,True,False,True,False,True,True,False,False,False],[True,True,False,False,False,True,True,False,True,False],[True,False,True,True,False,False,True,False,False,True],[False,True,False,False,True,False,True,False,False,False],[False,True,True,True,False,True,False,True,True,False],[False,False,False,True,False,False,True,True,False,True]],[[False,False,False,False,True,True,True,False,True,True],[False,False,True,False,True,True,True,True,False,True],[True,False,True,True,True,True,True,False,True,True],[True,True,False,False,False,True,True,True,True,True],[False,False,True,True,False,False,False,True,True,True],[False,True,True,False,False,True,True,False,True,False],[True,True,False,True,True,False,False,False,True,False],[True,True,False,False,True,False,False,True,True,False],[False,False,True,False,False,True,True,True,True,False],[False,True,True,False,False,False,False,True,True,True],[True,False,False,True,True,True,True,True,True,False],[True,True,False,False,True,False,False,False,False,True],[True,False,False,False,False,True,True,False,False,False],[True,True,False,True,False,True,True,True,True,False],[True,False,True,False,True,True,False,True,True,False],[False,False,False,True,True,False,False,False,False,False]]], dtype='bool')
module1.set_input('var_885', input_885)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_864, input_865, input_881, input_885, )
res3 = intrp3.evaluate()(input_864, input_865, input_881, input_885, )
res4 = intrp4.evaluate()(input_864, input_865, input_881, input_885, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
module5.set_input('var_864', input_864)
module5.set_input('var_865', input_865)
module5.set_input('var_881', input_881)
module5.set_input('var_885', input_885)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_864, input_865, input_881, input_885, )
res7 = intrp7.evaluate()(input_864, input_865, input_881, input_885, )
res8 = intrp8.evaluate()(input_864, input_865, input_881, input_885, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
module9.set_input('var_864', input_864)
module9.set_input('var_865', input_865)
module9.set_input('var_881', input_881)
module9.set_input('var_885', input_885)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_864, input_865, input_881, input_885, )
res11 = intrp11.evaluate()(input_864, input_865, input_881, input_885, )
res12 = intrp12.evaluate()(input_864, input_865, input_881, input_885, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
module13.set_input('var_864', input_864)
module13.set_input('var_865', input_865)
module13.set_input('var_881', input_881)
module13.set_input('var_885', input_885)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_864, input_865, input_881, input_885, )
res15 = intrp15.evaluate()(input_864, input_865, input_881, input_885, )
res16 = intrp16.evaluate()(input_864, input_865, input_881, input_885, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
module17.set_input('var_864', input_864)
module17.set_input('var_865', input_865)
module17.set_input('var_881', input_881)
module17.set_input('var_885', input_885)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_864, input_865, input_881, input_885, )
res19 = intrp19.evaluate()(input_864, input_865, input_881, input_885, )
res20 = intrp20.evaluate()(input_864, input_865, input_881, input_885, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
module21.set_input('var_864', input_864)
module21.set_input('var_865', input_865)
module21.set_input('var_881', input_881)
module21.set_input('var_885', input_885)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_864, input_865, input_881, input_885, )
res23 = intrp23.evaluate()(input_864, input_865, input_881, input_885, )
res24 = intrp24.evaluate()(input_864, input_865, input_881, input_885, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()

'''83: TVMFuncCall
82: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
81: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
80: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
79: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
78: tvm::transform::Pass::operator()(tvm::IRModule) const
77: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
76: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
75: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
74: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
73: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
72: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
71: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
70: tvm::transform::Pass::operator()(tvm::IRModule) const
69: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
68: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
67: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
66: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
65: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
64: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
63: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
62: _ZN3tvm5relay16MixedModeMutato
61: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
60: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
59: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
58: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
57: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
56: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
55: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
54: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
53: _ZN3tvm5relay16MixedModeMutato
52: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
51: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
50: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
49: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
48: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
46: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''