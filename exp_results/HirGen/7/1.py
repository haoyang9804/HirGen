import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_3 = relay.var("var_3", dtype = "uint8", shape = (11,))#candidate|3|(11,)|var|uint8
var_4 = relay.var("var_4", dtype = "uint8", shape = (11,))#candidate|4|(11,)|var|uint8
bop_5 = relay.logical_xor(var_3.astype('uint8'), relay.reshape(var_4.astype('uint8'), relay.shape_of(var_3))) # shape=(11,)
output = bop_5
output2 = bop_5
func_8 = relay.Function([var_3,var_4,], output)
mod['func_8'] = func_8
mod = relay.transform.InferType()(mod)
mutated_mod['func_8'] = func_8
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8_call = mutated_mod.get_global_var('func_8')
var_10 = relay.var("var_10", dtype = "uint8", shape = (11,))#candidate|10|(11,)|var|uint8
var_11 = relay.var("var_11", dtype = "uint8", shape = (11,))#candidate|11|(11,)|var|uint8
call_9 = func_8_call(var_10,var_11,)
output = call_9
func_12 = relay.Function([var_10,var_11,], output)
mutated_mod['func_12'] = func_12
mutated_mod = relay.transform.InferType()(mutated_mod)
var_22 = relay.var("var_22", dtype = "float32", shape = (12,))#candidate|22|(12,)|var|float32
var_23 = relay.var("var_23", dtype = "float32", shape = (12,))#candidate|23|(12,)|var|float32
bop_24 = relay.greater_equal(var_22.astype('bool'), relay.reshape(var_23.astype('bool'), relay.shape_of(var_22))) # shape=(12,)
uop_28 = relay.acosh(bop_24.astype('float32')) # shape=(12,)
bop_30 = relay.add(uop_28.astype('uint64'), relay.reshape(var_22.astype('uint64'), relay.shape_of(uop_28))) # shape=(12,)
bop_34 = relay.bitwise_or(bop_30.astype('uint32'), relay.reshape(uop_28.astype('uint32'), relay.shape_of(bop_30))) # shape=(12,)
uop_39 = relay.sigmoid(bop_34.astype('float64')) # shape=(12,)
output = uop_39
output2 = uop_39
func_41 = relay.Function([var_22,var_23,], output)
mod['func_41'] = func_41
mod = relay.transform.InferType()(mod)
mutated_mod['func_41'] = func_41
mutated_mod = relay.transform.InferType()(mutated_mod)
func_41_call = mutated_mod.get_global_var('func_41')
var_43 = relay.var("var_43", dtype = "float32", shape = (12,))#candidate|43|(12,)|var|float32
var_44 = relay.var("var_44", dtype = "float32", shape = (12,))#candidate|44|(12,)|var|float32
call_42 = func_41_call(var_43,var_44,)
output = call_42
func_45 = relay.Function([var_43,var_44,], output)
mutated_mod['func_45'] = func_45
mutated_mod = relay.transform.InferType()(mutated_mod)
var_50 = relay.var("var_50", dtype = "int16", shape = (9, 13))#candidate|50|(9, 13)|var|int16
const_51 = relay.const([[-7,7,1,-4,-5,3,8,6,6,-1,7,-7,8],[5,-4,-3,5,8,9,-10,-2,4,2,7,3,2],[1,1,5,-7,4,-2,9,4,4,4,-6,4,-8],[7,1,1,1,1,9,-9,-7,3,-2,4,2,2],[6,-7,-8,-8,-6,-1,3,6,-2,-7,5,5,-7],[-5,-6,-7,4,-9,-10,3,7,4,-8,6,-3,-10],[-4,-8,-3,2,-2,4,-4,-10,1,10,-9,-10,3],[8,-10,8,3,-5,-1,-8,5,-10,-6,-3,6,-6],[10,-4,3,-10,-2,7,4,-2,10,-7,3,-3,-8]], dtype = "int16")#candidate|51|(9, 13)|const|int16
bop_52 = relay.add(var_50.astype('int16'), relay.reshape(const_51.astype('int16'), relay.shape_of(var_50))) # shape=(9, 13)
func_41_call = mod.get_global_var('func_41')
func_45_call = mutated_mod.get_global_var('func_45')
var_56 = relay.var("var_56", dtype = "float32", shape = (1, 12))#candidate|56|(1, 12)|var|float32
call_55 = func_41_call(relay.reshape(var_56.astype('float32'), [12,]), relay.reshape(var_56.astype('float32'), [12,]), )
call_57 = func_41_call(relay.reshape(var_56.astype('float32'), [12,]), relay.reshape(var_56.astype('float32'), [12,]), )
func_41_call = mod.get_global_var('func_41')
func_45_call = mutated_mod.get_global_var('func_45')
call_58 = func_41_call(relay.reshape(var_56.astype('float32'), [12,]), relay.reshape(call_55.astype('float32'), [12,]), )
call_59 = func_41_call(relay.reshape(var_56.astype('float32'), [12,]), relay.reshape(call_55.astype('float32'), [12,]), )
bop_60 = relay.minimum(const_51.astype('float64'), relay.reshape(var_50.astype('float64'), relay.shape_of(const_51))) # shape=(9, 13)
bop_63 = relay.power(bop_60.astype('float32'), relay.reshape(bop_52.astype('float32'), relay.shape_of(bop_60))) # shape=(9, 13)
bop_66 = relay.logical_xor(bop_60.astype('uint8'), relay.reshape(bop_52.astype('uint8'), relay.shape_of(bop_60))) # shape=(9, 13)
bop_69 = relay.floor_divide(bop_60.astype('float64'), relay.reshape(bop_66.astype('float64'), relay.shape_of(bop_60))) # shape=(9, 13)
uop_73 = relay.atanh(bop_63.astype('float64')) # shape=(9, 13)
bop_77 = relay.less(uop_73.astype('bool'), relay.reshape(bop_63.astype('bool'), relay.shape_of(uop_73))) # shape=(9, 13)
var_80 = relay.var("var_80", dtype = "bool", shape = (9, 13))#candidate|80|(9, 13)|var|bool
bop_81 = relay.right_shift(bop_77.astype('uint16'), relay.reshape(var_80.astype('uint16'), relay.shape_of(bop_77))) # shape=(9, 13)
uop_87 = relay.asin(bop_81.astype('float32')) # shape=(9, 13)
uop_89 = relay.log(uop_87.astype('float64')) # shape=(9, 13)
uop_91 = relay.acosh(uop_89.astype('float64')) # shape=(9, 13)
uop_93 = relay.log10(uop_89.astype('float64')) # shape=(9, 13)
uop_96 = relay.cosh(uop_87.astype('float64')) # shape=(9, 13)
bop_98 = relay.left_shift(uop_87.astype('uint8'), relay.reshape(const_51.astype('uint8'), relay.shape_of(uop_87))) # shape=(9, 13)
func_8_call = mod.get_global_var('func_8')
func_12_call = mutated_mod.get_global_var('func_12')
const_103 = relay.const([[-7,-6,-9,-8,-3,5,-5,3,-7,9,8]], dtype = "uint8")#candidate|103|(1, 11)|const|uint8
call_102 = func_8_call(relay.reshape(const_103.astype('uint8'), [11,]), relay.reshape(const_103.astype('uint8'), [11,]), )
call_104 = func_8_call(relay.reshape(const_103.astype('uint8'), [11,]), relay.reshape(const_103.astype('uint8'), [11,]), )
bop_107 = relay.less_equal(uop_93.astype('bool'), relay.reshape(uop_96.astype('bool'), relay.shape_of(uop_93))) # shape=(9, 13)
bop_110 = relay.not_equal(var_80.astype('bool'), relay.reshape(uop_73.astype('bool'), relay.shape_of(var_80))) # shape=(9, 13)
uop_114 = relay.asinh(uop_91.astype('float32')) # shape=(9, 13)
const_116 = relay.const([[7.508565,5.133828,-7.189123,-3.497684,0.220669,9.565379,-2.646953,1.755171,-7.677019,-9.417393,2.513706,-3.423782]], dtype = "float32")#candidate|116|(1, 12)|const|float32
bop_117 = relay.logical_xor(var_56.astype('int8'), relay.reshape(const_116.astype('int8'), relay.shape_of(var_56))) # shape=(1, 12)
bop_120 = relay.greater(bop_98.astype('bool'), relay.reshape(bop_110.astype('bool'), relay.shape_of(bop_98))) # shape=(9, 13)
bop_124 = relay.maximum(uop_89.astype('float32'), relay.reshape(uop_87.astype('float32'), relay.shape_of(uop_89))) # shape=(9, 13)
const_127 = relay.const([[-0.961194,6.404528,-0.713951,9.251210,2.658466,-1.212945,-0.435471,-9.556186,9.332466,-0.887371,9.701017,0.518731,-0.444721],[-4.550711,1.079436,-8.637063,0.084109,1.639904,-6.937005,-5.506889,5.731453,-2.157222,-5.596102,-1.928922,6.253419,-8.721536],[-9.156872,-1.970256,7.311622,0.837668,-5.181139,-2.330969,8.071263,-4.603987,8.136154,4.418188,5.082380,-9.193999,-7.080388],[5.546637,9.760226,5.661493,-2.510887,7.887437,-5.734208,-6.764107,-3.925913,-1.801676,-5.026514,8.537688,6.595891,-0.672855],[-1.009578,-6.096864,-4.657734,-1.180429,3.650644,5.242047,-2.616216,-1.343852,5.969847,5.020780,7.593723,-8.505015,-8.814595],[3.593380,-2.878462,-3.769542,5.566930,-1.759840,3.748699,7.338293,-4.304773,-6.702358,5.831569,4.213468,9.977378,-8.489588],[0.188778,-0.910257,-0.941853,1.762352,2.102035,-3.643985,3.066846,-5.678560,2.025132,2.155105,-7.200136,-2.018200,-0.498128],[8.947554,5.713266,9.946023,-9.786261,-7.496858,0.620744,5.913561,-4.268652,4.350371,-6.566729,-1.974144,-9.725269,7.385439],[3.157416,-8.578725,-8.795117,7.197877,-2.891407,-6.805382,-4.062677,4.311866,-0.424127,-5.029788,-1.986730,-4.681573,-6.709555]], dtype = "float64")#candidate|127|(9, 13)|const|float64
bop_128 = relay.floor_mod(uop_91.astype('float32'), relay.reshape(const_127.astype('float32'), relay.shape_of(uop_91))) # shape=(9, 13)
uop_132 = relay.sqrt(uop_93.astype('float32')) # shape=(9, 13)
bop_134 = relay.right_shift(uop_114.astype('int16'), relay.reshape(bop_120.astype('int16'), relay.shape_of(uop_114))) # shape=(9, 13)
bop_138 = relay.logical_or(uop_91.astype('bool'), relay.reshape(uop_132.astype('bool'), relay.shape_of(uop_91))) # shape=(9, 13)
var_141 = relay.var("var_141", dtype = "bool", shape = (9, 13))#candidate|141|(9, 13)|var|bool
bop_142 = relay.maximum(bop_107.astype('int32'), relay.reshape(var_141.astype('int32'), relay.shape_of(bop_107))) # shape=(9, 13)
const_145 = relay.const([[5.388066,-6.405520,4.044921,0.469005,2.295773,-4.095816,-5.129934,-4.244701,-6.761021,-3.638702,-8.497706,-1.006064,-8.421842],[2.477734,-8.258545,3.906436,-3.176418,-9.886764,-0.227927,2.130700,-1.734072,-8.958032,-7.860607,9.050333,-1.753756,7.355910],[6.999920,-9.563215,-5.910866,8.212989,8.161981,8.425982,-7.844508,1.860769,8.361564,-0.104372,-9.102531,1.955799,9.250944],[4.287450,-8.841167,-0.663575,-0.299926,4.662967,-3.798308,-7.542116,4.514616,8.470983,9.656082,-8.913870,1.926192,-0.796121],[-0.693777,0.592765,-8.598034,5.200732,0.904629,-5.895731,7.554414,4.436730,-8.856297,0.849244,6.280163,0.931218,7.888960],[0.049051,-7.283498,-6.100504,3.932855,-6.912620,-6.842920,9.396177,7.983531,3.576102,0.395787,8.932380,-3.122298,-8.728989],[7.996114,9.175940,6.421303,-4.015148,-1.586519,-5.796315,-9.354195,-4.898313,9.143882,-4.678981,7.999845,8.518689,-4.641414],[8.633445,4.707571,-3.601055,7.615361,8.174373,0.499459,4.003480,-9.107974,4.872431,-7.929878,9.803955,4.830135,0.578155],[7.918940,-2.559305,0.173116,4.580673,1.450671,9.388792,4.824594,4.326901,-5.856492,-8.996125,1.425677,3.725377,8.147223]], dtype = "float32")#candidate|145|(9, 13)|const|float32
bop_146 = relay.multiply(bop_128.astype('int8'), relay.reshape(const_145.astype('int8'), relay.shape_of(bop_128))) # shape=(9, 13)
bop_149 = relay.logical_or(bop_124.astype('bool'), relay.reshape(bop_60.astype('bool'), relay.shape_of(bop_124))) # shape=(9, 13)
uop_155 = relay.sinh(uop_132.astype('float32')) # shape=(9, 13)
uop_157 = relay.sin(uop_155.astype('float32')) # shape=(9, 13)
const_159 = relay.const([[True,True,True,True,False,True,True,True,False,False,False,True,True],[False,False,True,True,True,False,False,True,False,False,False,True,True],[True,False,True,True,True,False,False,False,False,False,True,True,True],[False,False,True,True,True,False,False,False,True,True,True,False,False],[True,False,False,False,True,False,False,False,True,True,True,True,False],[True,True,True,False,False,True,False,True,True,False,True,True,False],[True,False,True,True,True,False,True,True,False,False,True,True,True],[False,False,False,True,False,True,False,False,True,False,True,False,False],[False,False,True,True,False,False,False,False,True,True,False,False,False]], dtype = "bool")#candidate|159|(9, 13)|const|bool
bop_160 = relay.divide(bop_138.astype('float32'), relay.reshape(const_159.astype('float32'), relay.shape_of(bop_138))) # shape=(9, 13)
bop_163 = relay.subtract(uop_157.astype('float64'), relay.reshape(uop_89.astype('float64'), relay.shape_of(uop_157))) # shape=(9, 13)
var_166 = relay.var("var_166", dtype = "int8", shape = (9, 13))#candidate|166|(9, 13)|var|int8
bop_167 = relay.bitwise_xor(bop_146.astype('int64'), relay.reshape(var_166.astype('int64'), relay.shape_of(bop_146))) # shape=(9, 13)
uop_176 = relay.acos(bop_163.astype('float32')) # shape=(9, 13)
bop_178 = relay.mod(uop_157.astype('float64'), relay.reshape(var_50.astype('float64'), relay.shape_of(uop_157))) # shape=(9, 13)
uop_181 = relay.tan(uop_176.astype('float32')) # shape=(9, 13)
const_183 = relay.const([[4.858291,-7.777060,-2.378735,1.563414,-4.499318,0.647580,2.127149,9.939819,4.580503,-0.560571,-4.910230,-2.843003,7.212892],[-1.701613,8.088189,1.750238,6.787898,-0.682836,-2.893367,-0.577702,0.384988,5.553359,8.637065,-6.982645,-9.204348,-9.456180],[5.759327,-4.249371,-2.729114,-4.505894,-3.474515,-5.378000,0.605730,2.837576,-4.385054,4.745070,5.433330,-5.267045,7.478985],[4.417660,3.939493,-2.574030,-8.298913,1.959710,4.746828,6.294484,-1.443654,4.667866,-4.408222,1.940406,-4.779123,-6.968691],[7.954465,-4.880348,3.935345,-4.705313,0.421258,-5.345147,5.245723,-9.505980,0.970227,6.186754,1.702775,-1.852036,6.236419],[-3.459209,-5.309734,-0.280208,1.240179,-4.948022,-2.410900,3.160774,7.275856,-0.728839,-6.351934,8.119756,-1.671513,9.038555],[8.806364,2.738541,9.699827,-2.003492,-9.330733,1.540281,-3.301477,-5.972081,5.766017,-1.793355,8.765215,6.323302,-9.029909],[-8.582938,2.211908,-0.933059,3.116905,-7.428712,-3.125394,-2.089612,2.219824,-2.797631,8.788037,-8.485326,4.921046,6.876907],[1.558359,-3.343172,2.220937,-3.154645,-2.593569,0.900837,-2.266220,-9.368892,-5.279354,1.830046,-5.581887,2.487612,6.177621]], dtype = "float32")#candidate|183|(9, 13)|const|float32
bop_184 = relay.bitwise_xor(uop_155.astype('uint16'), relay.reshape(const_183.astype('uint16'), relay.shape_of(uop_155))) # shape=(9, 13)
func_8_call = mod.get_global_var('func_8')
func_12_call = mutated_mod.get_global_var('func_12')
call_187 = func_8_call(relay.reshape(const_103.astype('uint8'), [11,]), relay.reshape(call_102.astype('uint8'), [11,]), )
call_188 = func_8_call(relay.reshape(const_103.astype('uint8'), [11,]), relay.reshape(call_102.astype('uint8'), [11,]), )
uop_189 = relay.atan(uop_181.astype('float64')) # shape=(9, 13)
func_41_call = mod.get_global_var('func_41')
func_45_call = mutated_mod.get_global_var('func_45')
call_192 = func_41_call(relay.reshape(const_116.astype('float32'), [12,]), relay.reshape(var_56.astype('float32'), [12,]), )
call_193 = func_41_call(relay.reshape(const_116.astype('float32'), [12,]), relay.reshape(var_56.astype('float32'), [12,]), )
output = relay.Tuple([call_55,call_58,bop_69,call_102,const_103,bop_117,bop_134,bop_142,bop_149,bop_160,bop_167,bop_178,bop_184,call_187,uop_189,call_192,])
output2 = relay.Tuple([call_57,call_59,bop_69,call_104,const_103,bop_117,bop_134,bop_142,bop_149,bop_160,bop_167,bop_178,bop_184,call_188,uop_189,call_193,])
func_195 = relay.Function([var_50,var_56,var_80,var_141,var_166,], output)
mod['func_195'] = func_195
mod = relay.transform.InferType()(mod)
mutated_mod['func_195'] = func_195
mutated_mod = relay.transform.InferType()(mutated_mod)
func_195_call = mutated_mod.get_global_var('func_195')
var_197 = relay.var("var_197", dtype = "int16", shape = (9, 13))#candidate|197|(9, 13)|var|int16
var_198 = relay.var("var_198", dtype = "float32", shape = (1, 12))#candidate|198|(1, 12)|var|float32
var_199 = relay.var("var_199", dtype = "bool", shape = (9, 13))#candidate|199|(9, 13)|var|bool
var_200 = relay.var("var_200", dtype = "bool", shape = (9, 13))#candidate|200|(9, 13)|var|bool
var_201 = relay.var("var_201", dtype = "int8", shape = (9, 13))#candidate|201|(9, 13)|var|int8
call_196 = func_195_call(var_197,var_198,var_199,var_200,var_201,)
output = call_196
func_202 = relay.Function([var_197,var_198,var_199,var_200,var_201,], output)
mutated_mod['func_202'] = func_202
mutated_mod = relay.transform.InferType()(mutated_mod)
var_212 = relay.var("var_212", dtype = "uint64", shape = (9,))#candidate|212|(9,)|var|uint64
const_213 = relay.const([4,3,-10,-8,10,6,-2,5,10], dtype = "uint64")#candidate|213|(9,)|const|uint64
bop_214 = relay.maximum(var_212.astype('uint64'), relay.reshape(const_213.astype('uint64'), relay.shape_of(var_212))) # shape=(9,)
func_8_call = mod.get_global_var('func_8')
func_12_call = mutated_mod.get_global_var('func_12')
const_220 = relay.const([-8,-3,5,-9,-4,2,-1,-2,-6,-9,-6], dtype = "uint8")#candidate|220|(11,)|const|uint8
call_219 = func_8_call(relay.reshape(const_220.astype('uint8'), [11,]), relay.reshape(const_220.astype('uint8'), [11,]), )
call_221 = func_8_call(relay.reshape(const_220.astype('uint8'), [11,]), relay.reshape(const_220.astype('uint8'), [11,]), )
uop_223 = relay.cos(var_212.astype('float32')) # shape=(9,)
bop_225 = relay.bitwise_or(uop_223.astype('int8'), relay.reshape(bop_214.astype('int8'), relay.shape_of(uop_223))) # shape=(9,)
output = relay.Tuple([call_219,const_220,bop_225,])
output2 = relay.Tuple([call_221,const_220,bop_225,])
func_228 = relay.Function([var_212,], output)
mod['func_228'] = func_228
mod = relay.transform.InferType()(mod)
mutated_mod['func_228'] = func_228
mutated_mod = relay.transform.InferType()(mutated_mod)
var_229 = relay.var("var_229", dtype = "uint64", shape = (9,))#candidate|229|(9,)|var|uint64
func_228_call = mutated_mod.get_global_var('func_228')
call_230 = func_228_call(var_229)
output = call_230
func_231 = relay.Function([var_229], output)
mutated_mod['func_231'] = func_231
mutated_mod = relay.transform.InferType()(mutated_mod)
const_233 = relay.const([-3,-10,-7,-9], dtype = "uint16")#candidate|233|(4,)|const|uint16
const_234 = relay.const([-7,-7,-4,-7], dtype = "uint16")#candidate|234|(4,)|const|uint16
bop_235 = relay.bitwise_or(const_233.astype('uint16'), relay.reshape(const_234.astype('uint16'), relay.shape_of(const_233))) # shape=(4,)
var_239 = relay.var("var_239", dtype = "uint16", shape = (4,))#candidate|239|(4,)|var|uint16
bop_240 = relay.equal(bop_235.astype('bool'), relay.reshape(var_239.astype('bool'), relay.shape_of(bop_235))) # shape=(4,)
func_41_call = mod.get_global_var('func_41')
func_45_call = mutated_mod.get_global_var('func_45')
const_245 = relay.const([-8.810324,-3.550087,7.165330,1.175869,0.362651,-2.172496,-7.232656,-9.700959,2.771953,-8.806381,-2.637304,-6.357310], dtype = "float32")#candidate|245|(12,)|const|float32
call_244 = func_41_call(relay.reshape(const_245.astype('float32'), [12,]), relay.reshape(const_245.astype('float32'), [12,]), )
call_246 = func_41_call(relay.reshape(const_245.astype('float32'), [12,]), relay.reshape(const_245.astype('float32'), [12,]), )
var_247 = relay.var("var_247", dtype = "bool", shape = (4,))#candidate|247|(4,)|var|bool
bop_248 = relay.minimum(bop_240.astype('float32'), relay.reshape(var_247.astype('float32'), relay.shape_of(bop_240))) # shape=(4,)
const_251 = relay.const([True,True,False,False], dtype = "bool")#candidate|251|(4,)|const|bool
bop_252 = relay.less_equal(bop_240.astype('bool'), relay.reshape(const_251.astype('bool'), relay.shape_of(bop_240))) # shape=(4,)
bop_258 = relay.not_equal(var_247.astype('bool'), relay.reshape(const_233.astype('bool'), relay.shape_of(var_247))) # shape=(4,)
var_263 = relay.var("var_263", dtype = "bool", shape = (4,))#candidate|263|(4,)|var|bool
bop_264 = relay.subtract(bop_258.astype('uint8'), relay.reshape(var_263.astype('uint8'), relay.shape_of(bop_258))) # shape=(4,)
uop_267 = relay.sin(const_245.astype('float32')) # shape=(12,)
bop_269 = relay.add(uop_267.astype('uint16'), relay.reshape(const_245.astype('uint16'), relay.shape_of(uop_267))) # shape=(12,)
const_272 = relay.const([10,-7,8,-4,-4,-9,-1,-6,-3,2,5,5], dtype = "uint16")#candidate|272|(12,)|const|uint16
bop_273 = relay.logical_and(bop_269.astype('bool'), relay.reshape(const_272.astype('bool'), relay.shape_of(bop_269))) # shape=(12,)
bop_277 = relay.logical_or(bop_269.astype('bool'), relay.reshape(uop_267.astype('bool'), relay.shape_of(bop_269))) # shape=(12,)
output = relay.Tuple([call_244,bop_248,bop_252,bop_264,bop_273,bop_277,])
output2 = relay.Tuple([call_246,bop_248,bop_252,bop_264,bop_273,bop_277,])
func_280 = relay.Function([var_239,var_247,var_263,], output)
mod['func_280'] = func_280
mod = relay.transform.InferType()(mod)
mutated_mod['func_280'] = func_280
mutated_mod = relay.transform.InferType()(mutated_mod)
func_280_call = mutated_mod.get_global_var('func_280')
var_282 = relay.var("var_282", dtype = "uint16", shape = (4,))#candidate|282|(4,)|var|uint16
var_283 = relay.var("var_283", dtype = "bool", shape = (4,))#candidate|283|(4,)|var|bool
var_284 = relay.var("var_284", dtype = "bool", shape = (4,))#candidate|284|(4,)|var|bool
call_281 = func_280_call(var_282,var_283,var_284,)
output = call_281
func_285 = relay.Function([var_282,var_283,var_284,], output)
mutated_mod['func_285'] = func_285
mutated_mod = relay.transform.InferType()(mutated_mod)
const_318 = relay.const([10,7,3,7,7,-1,-9], dtype = "int8")#candidate|318|(7,)|const|int8
var_319 = relay.var("var_319", dtype = "int8", shape = (7,))#candidate|319|(7,)|var|int8
bop_320 = relay.subtract(const_318.astype('int8'), relay.reshape(var_319.astype('int8'), relay.shape_of(const_318))) # shape=(7,)
bop_323 = relay.left_shift(bop_320.astype('uint16'), relay.reshape(var_319.astype('uint16'), relay.shape_of(bop_320))) # shape=(7,)
func_280_call = mod.get_global_var('func_280')
func_285_call = mutated_mod.get_global_var('func_285')
var_327 = relay.var("var_327", dtype = "uint16", shape = (2, 2))#candidate|327|(2, 2)|var|uint16
call_326 = relay.TupleGetItem(func_280_call(relay.reshape(var_327.astype('uint16'), [4,]), relay.reshape(var_327.astype('bool'), [4,]), relay.reshape(var_327.astype('bool'), [4,]), ), 2)
call_328 = relay.TupleGetItem(func_285_call(relay.reshape(var_327.astype('uint16'), [4,]), relay.reshape(var_327.astype('bool'), [4,]), relay.reshape(var_327.astype('bool'), [4,]), ), 2)
bop_330 = relay.multiply(const_318.astype('int32'), relay.reshape(bop_320.astype('int32'), relay.shape_of(const_318))) # shape=(7,)
bop_335 = relay.bitwise_xor(bop_323.astype('uint64'), relay.reshape(const_318.astype('uint64'), relay.shape_of(bop_323))) # shape=(7,)
uop_338 = relay.sigmoid(bop_323.astype('float32')) # shape=(7,)
bop_341 = relay.add(bop_335.astype('float64'), relay.reshape(bop_320.astype('float64'), relay.shape_of(bop_335))) # shape=(7,)
bop_344 = relay.bitwise_and(uop_338.astype('uint64'), relay.reshape(bop_341.astype('uint64'), relay.shape_of(uop_338))) # shape=(7,)
func_41_call = mod.get_global_var('func_41')
func_45_call = mutated_mod.get_global_var('func_45')
var_348 = relay.var("var_348", dtype = "float32", shape = (12,))#candidate|348|(12,)|var|float32
call_347 = func_41_call(relay.reshape(var_348.astype('float32'), [12,]), relay.reshape(var_348.astype('float32'), [12,]), )
call_349 = func_41_call(relay.reshape(var_348.astype('float32'), [12,]), relay.reshape(var_348.astype('float32'), [12,]), )
var_350 = relay.var("var_350", dtype = "float32", shape = (7,))#candidate|350|(7,)|var|float32
bop_351 = relay.greater_equal(uop_338.astype('bool'), relay.reshape(var_350.astype('bool'), relay.shape_of(uop_338))) # shape=(7,)
uop_355 = relay.sin(uop_338.astype('float64')) # shape=(7,)
uop_357 = relay.rsqrt(uop_355.astype('float64')) # shape=(7,)
uop_361 = relay.log10(uop_357.astype('float32')) # shape=(7,)
bop_363 = relay.logical_or(uop_361.astype('bool'), relay.reshape(bop_335.astype('bool'), relay.shape_of(uop_361))) # shape=(7,)
var_368 = relay.var("var_368", dtype = "float64", shape = (7,))#candidate|368|(7,)|var|float64
bop_369 = relay.right_shift(uop_357.astype('uint32'), relay.reshape(var_368.astype('uint32'), relay.shape_of(uop_357))) # shape=(7,)
bop_378 = relay.multiply(const_318.astype('float32'), relay.reshape(bop_335.astype('float32'), relay.shape_of(const_318))) # shape=(7,)
uop_389 = relay.acos(uop_355.astype('float32')) # shape=(7,)
uop_391 = relay.atanh(uop_361.astype('float64')) # shape=(7,)
output = relay.Tuple([call_326,var_327,bop_330,bop_344,call_347,var_348,bop_351,bop_363,bop_369,bop_378,uop_389,uop_391,])
output2 = relay.Tuple([call_328,var_327,bop_330,bop_344,call_349,var_348,bop_351,bop_363,bop_369,bop_378,uop_389,uop_391,])
func_393 = relay.Function([var_319,var_327,var_348,var_350,var_368,], output)
mod['func_393'] = func_393
mod = relay.transform.InferType()(mod)
mutated_mod['func_393'] = func_393
mutated_mod = relay.transform.InferType()(mutated_mod)
func_393_call = mutated_mod.get_global_var('func_393')
var_395 = relay.var("var_395", dtype = "int8", shape = (7,))#candidate|395|(7,)|var|int8
var_396 = relay.var("var_396", dtype = "uint16", shape = (2, 2))#candidate|396|(2, 2)|var|uint16
var_397 = relay.var("var_397", dtype = "float32", shape = (12,))#candidate|397|(12,)|var|float32
var_398 = relay.var("var_398", dtype = "float32", shape = (7,))#candidate|398|(7,)|var|float32
var_399 = relay.var("var_399", dtype = "float64", shape = (7,))#candidate|399|(7,)|var|float64
call_394 = func_393_call(var_395,var_396,var_397,var_398,var_399,)
output = call_394
func_400 = relay.Function([var_395,var_396,var_397,var_398,var_399,], output)
mutated_mod['func_400'] = func_400
mutated_mod = relay.transform.InferType()(mutated_mod)
var_418 = relay.var("var_418", dtype = "float64", shape = (8, 13, 11))#candidate|418|(8, 13, 11)|var|float64
uop_419 = relay.atanh(var_418.astype('float64')) # shape=(8, 13, 11)
bop_421 = relay.left_shift(var_418.astype('int32'), relay.reshape(uop_419.astype('int32'), relay.shape_of(var_418))) # shape=(8, 13, 11)
uop_426 = relay.log10(bop_421.astype('float64')) # shape=(8, 13, 11)
var_428 = relay.var("var_428", dtype = "float64", shape = (8, 13, 11))#candidate|428|(8, 13, 11)|var|float64
bop_429 = relay.equal(uop_419.astype('bool'), relay.reshape(var_428.astype('bool'), relay.shape_of(uop_419))) # shape=(8, 13, 11)
func_393_call = mod.get_global_var('func_393')
func_400_call = mutated_mod.get_global_var('func_400')
var_433 = relay.var("var_433", dtype = "int8", shape = (7, 1))#candidate|433|(7, 1)|var|int8
const_434 = relay.const([5,-1,-6,-7], dtype = "uint16")#candidate|434|(4,)|const|uint16
var_435 = relay.var("var_435", dtype = "float32", shape = (1, 12))#candidate|435|(1, 12)|var|float32
call_432 = relay.TupleGetItem(func_393_call(relay.reshape(var_433.astype('int8'), [7,]), relay.reshape(const_434.astype('uint16'), [2, 2]), relay.reshape(var_435.astype('float32'), [12,]), relay.reshape(var_433.astype('float32'), [7,]), relay.reshape(var_433.astype('float64'), [7,]), ), 7)
call_436 = relay.TupleGetItem(func_400_call(relay.reshape(var_433.astype('int8'), [7,]), relay.reshape(const_434.astype('uint16'), [2, 2]), relay.reshape(var_435.astype('float32'), [12,]), relay.reshape(var_433.astype('float32'), [7,]), relay.reshape(var_433.astype('float64'), [7,]), ), 7)
uop_437 = relay.asinh(uop_426.astype('float64')) # shape=(8, 13, 11)
bop_440 = relay.logical_or(uop_437.astype('bool'), relay.reshape(bop_421.astype('bool'), relay.shape_of(uop_437))) # shape=(8, 13, 11)
output = relay.Tuple([bop_429,call_432,var_433,const_434,var_435,bop_440,])
output2 = relay.Tuple([bop_429,call_436,var_433,const_434,var_435,bop_440,])
func_443 = relay.Function([var_418,var_428,var_433,var_435,], output)
mod['func_443'] = func_443
mod = relay.transform.InferType()(mod)
mutated_mod['func_443'] = func_443
mutated_mod = relay.transform.InferType()(mutated_mod)
func_443_call = mutated_mod.get_global_var('func_443')
var_445 = relay.var("var_445", dtype = "float64", shape = (8, 13, 11))#candidate|445|(8, 13, 11)|var|float64
var_446 = relay.var("var_446", dtype = "float64", shape = (8, 13, 11))#candidate|446|(8, 13, 11)|var|float64
var_447 = relay.var("var_447", dtype = "int8", shape = (7, 1))#candidate|447|(7, 1)|var|int8
var_448 = relay.var("var_448", dtype = "float32", shape = (1, 12))#candidate|448|(1, 12)|var|float32
call_444 = func_443_call(var_445,var_446,var_447,var_448,)
output = call_444
func_449 = relay.Function([var_445,var_446,var_447,var_448,], output)
mutated_mod['func_449'] = func_449
mutated_mod = relay.transform.InferType()(mutated_mod)
var_451 = relay.var("var_451", dtype = "float32", shape = (6,))#candidate|451|(6,)|var|float32
uop_452 = relay.sin(var_451.astype('float32')) # shape=(6,)
bop_457 = relay.less(var_451.astype('bool'), relay.reshape(uop_452.astype('bool'), relay.shape_of(var_451))) # shape=(6,)
uop_461 = relay.log(uop_452.astype('float32')) # shape=(6,)
var_469 = relay.var("var_469", dtype = "float32", shape = (6,))#candidate|469|(6,)|var|float32
bop_470 = relay.floor_divide(uop_461.astype('float64'), relay.reshape(var_469.astype('float64'), relay.shape_of(uop_461))) # shape=(6,)
bop_473 = relay.mod(bop_470.astype('float32'), relay.reshape(uop_461.astype('float32'), relay.shape_of(bop_470))) # shape=(6,)
uop_477 = relay.atanh(bop_473.astype('float64')) # shape=(6,)
func_195_call = mod.get_global_var('func_195')
func_202_call = mutated_mod.get_global_var('func_202')
var_480 = relay.var("var_480", dtype = "int16", shape = (117,))#candidate|480|(117,)|var|int16
var_481 = relay.var("var_481", dtype = "float32", shape = (12,))#candidate|481|(12,)|var|float32
call_479 = relay.TupleGetItem(func_195_call(relay.reshape(var_480.astype('int16'), [9, 13]), relay.reshape(var_481.astype('float32'), [1, 12]), relay.reshape(var_480.astype('bool'), [9, 13]), relay.reshape(var_480.astype('bool'), [9, 13]), relay.reshape(var_480.astype('int8'), [9, 13]), ), 2)
call_482 = relay.TupleGetItem(func_202_call(relay.reshape(var_480.astype('int16'), [9, 13]), relay.reshape(var_481.astype('float32'), [1, 12]), relay.reshape(var_480.astype('bool'), [9, 13]), relay.reshape(var_480.astype('bool'), [9, 13]), relay.reshape(var_480.astype('int8'), [9, 13]), ), 2)
bop_483 = relay.power(uop_461.astype('float32'), relay.reshape(bop_470.astype('float32'), relay.shape_of(uop_461))) # shape=(6,)
uop_487 = relay.sigmoid(uop_477.astype('float64')) # shape=(6,)
bop_489 = relay.greater(bop_483.astype('bool'), relay.reshape(bop_470.astype('bool'), relay.shape_of(bop_483))) # shape=(6,)
uop_492 = relay.sinh(uop_487.astype('float32')) # shape=(6,)
bop_495 = relay.equal(uop_487.astype('bool'), relay.reshape(bop_470.astype('bool'), relay.shape_of(uop_487))) # shape=(6,)
bop_500 = relay.subtract(uop_492.astype('uint32'), relay.reshape(uop_452.astype('uint32'), relay.shape_of(uop_492))) # shape=(6,)
bop_503 = relay.add(bop_500.astype('uint32'), relay.reshape(bop_483.astype('uint32'), relay.shape_of(bop_500))) # shape=(6,)
bop_506 = relay.bitwise_or(bop_500.astype('uint32'), relay.reshape(uop_452.astype('uint32'), relay.shape_of(bop_500))) # shape=(6,)
uop_511 = relay.log2(uop_477.astype('float64')) # shape=(6,)
const_513 = relay.const([5,10,-9,8,-2,-2], dtype = "uint32")#candidate|513|(6,)|const|uint32
bop_514 = relay.logical_and(bop_503.astype('bool'), relay.reshape(const_513.astype('bool'), relay.shape_of(bop_503))) # shape=(6,)
func_393_call = mod.get_global_var('func_393')
func_400_call = mutated_mod.get_global_var('func_400')
var_518 = relay.var("var_518", dtype = "int8", shape = (7,))#candidate|518|(7,)|var|int8
var_519 = relay.var("var_519", dtype = "uint16", shape = (4,))#candidate|519|(4,)|var|uint16
call_517 = relay.TupleGetItem(func_393_call(relay.reshape(var_518.astype('int8'), [7,]), relay.reshape(var_519.astype('uint16'), [2, 2]), relay.reshape(var_481.astype('float32'), [12,]), relay.reshape(var_518.astype('float32'), [7,]), relay.reshape(var_518.astype('float64'), [7,]), ), 10)
call_520 = relay.TupleGetItem(func_400_call(relay.reshape(var_518.astype('int8'), [7,]), relay.reshape(var_519.astype('uint16'), [2, 2]), relay.reshape(var_481.astype('float32'), [12,]), relay.reshape(var_518.astype('float32'), [7,]), relay.reshape(var_518.astype('float64'), [7,]), ), 10)
bop_522 = relay.greater(bop_503.astype('bool'), relay.reshape(uop_487.astype('bool'), relay.shape_of(bop_503))) # shape=(6,)
bop_526 = relay.equal(bop_495.astype('bool'), relay.reshape(var_451.astype('bool'), relay.shape_of(bop_495))) # shape=(6,)
bop_529 = relay.floor_divide(bop_503.astype('float64'), relay.reshape(bop_470.astype('float64'), relay.shape_of(bop_503))) # shape=(6,)
var_532 = relay.var("var_532", dtype = "float64", shape = (6,))#candidate|532|(6,)|var|float64
bop_533 = relay.greater_equal(uop_477.astype('bool'), relay.reshape(var_532.astype('bool'), relay.shape_of(uop_477))) # shape=(6,)
bop_538 = relay.logical_xor(bop_514.astype('uint8'), relay.reshape(uop_492.astype('uint8'), relay.shape_of(bop_514))) # shape=(6,)
bop_543 = relay.bitwise_or(bop_526.astype('int16'), relay.reshape(bop_473.astype('int16'), relay.shape_of(bop_526))) # shape=(6,)
output = relay.Tuple([bop_457,call_479,var_480,var_481,bop_489,bop_506,uop_511,call_517,var_518,var_519,bop_522,bop_529,bop_533,bop_538,bop_543,])
output2 = relay.Tuple([bop_457,call_482,var_480,var_481,bop_489,bop_506,uop_511,call_520,var_518,var_519,bop_522,bop_529,bop_533,bop_538,bop_543,])
F = relay.Function([var_451,var_469,var_480,var_481,var_518,var_519,var_532,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_451,var_469,var_480,var_481,var_518,var_519,var_532,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_451= np.array([4.560068,1.935307,-3.629158,-8.234700,-6.303299,9.348351], dtype='float32')
module1.set_input('var_451', input_451)
input_469= np.array([-7.413700,4.974064,7.672738,7.181881,5.290577,-1.923471], dtype='float32')
module1.set_input('var_469', input_469)
input_480= np.array([-7,8,-7,-9,7,4,8,5,1,-2,-3,3,-2,-3,4,-9,-7,3,8,-2,-8,9,4,9,5,-2,-4,2,-1,-9,8,-9,7,-8,-4,9,7,-7,-3,-8,10,9,-4,-7,7,-3,-6,-10,4,7,8,-7,-4,-8,3,-9,8,4,-8,-1,1,-2,6,-7,1,6,1,-6,10,-4,-2,3,-1,-3,1,8,8,6,-3,4,-10,5,8,6,7,-8,-5,6,1,8,3,-6,7,5,-7,-6,-1,-8,-4,6,8,-10,-6,-2,-8,-1,-8,2,-8,-7,-7,-4,6,9,10,-3,9], dtype='int16')
module1.set_input('var_480', input_480)
input_481= np.array([6.008455,7.342251,-0.248583,8.990130,-0.532744,6.525057,-7.983100,-6.913285,-7.280355,2.796938,8.638376,6.289099], dtype='float32')
module1.set_input('var_481', input_481)
input_518= np.array([1,-8,8,1,-6,-6,1], dtype='int8')
module1.set_input('var_518', input_518)
input_519= np.array([10,4,9,-7], dtype='uint16')
module1.set_input('var_519', input_519)
input_532= np.array([4.866991,-2.523211,-5.992589,-0.324248,-5.362020,-0.573368], dtype='float64')
module1.set_input('var_532', input_532)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_451, input_469, input_480, input_481, input_518, input_519, input_532, )
res3 = intrp3.evaluate()(input_451, input_469, input_480, input_481, input_518, input_519, input_532, )
res4 = intrp4.evaluate()(input_451, input_469, input_480, input_481, input_518, input_519, input_532, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
res1_14 = module1.get_output(14).asnumpy()
res2_14 = res2[14].asnumpy()
res3_14 = res3[14].asnumpy()
res4_14 = res4[14].asnumpy()
np.testing.assert_allclose(res1_14 ,res2_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res3_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res4_14, atol=1e-3, rtol=1e-3)
(res1_14 == res2_14).all()
(res1_14 == res3_14).all()
(res1_14 == res4_14).all()
module5.set_input('var_451', input_451)
module5.set_input('var_469', input_469)
module5.set_input('var_480', input_480)
module5.set_input('var_481', input_481)
module5.set_input('var_518', input_518)
module5.set_input('var_519', input_519)
module5.set_input('var_532', input_532)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_451, input_469, input_480, input_481, input_518, input_519, input_532, )
res7 = intrp7.evaluate()(input_451, input_469, input_480, input_481, input_518, input_519, input_532, )
res8 = intrp8.evaluate()(input_451, input_469, input_480, input_481, input_518, input_519, input_532, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
res5_14 = module5.get_output(14).asnumpy()
res6_14 = res6[14].asnumpy()
res7_14 = res7[14].asnumpy()
res8_14 = res8[14].asnumpy()
np.testing.assert_allclose(res5_14 ,res6_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res7_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res8_14, atol=1e-3, rtol=1e-3)
(res5_14 == res6_14).all()
(res5_14 == res7_14).all()
(res5_14 == res8_14).all()
module9.set_input('var_451', input_451)
module9.set_input('var_469', input_469)
module9.set_input('var_480', input_480)
module9.set_input('var_481', input_481)
module9.set_input('var_518', input_518)
module9.set_input('var_519', input_519)
module9.set_input('var_532', input_532)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_451, input_469, input_480, input_481, input_518, input_519, input_532, )
res11 = intrp11.evaluate()(input_451, input_469, input_480, input_481, input_518, input_519, input_532, )
res12 = intrp12.evaluate()(input_451, input_469, input_480, input_481, input_518, input_519, input_532, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
res9_14 = module9.get_output(14).asnumpy()
res10_14 = res10[14].asnumpy()
res11_14 = res11[14].asnumpy()
res12_14 = res12[14].asnumpy()
np.testing.assert_allclose(res9_14 ,res10_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res11_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res12_14, atol=1e-3, rtol=1e-3)
(res9_14 == res10_14).all()
(res9_14 == res11_14).all()
(res9_14 == res12_14).all()
module13.set_input('var_451', input_451)
module13.set_input('var_469', input_469)
module13.set_input('var_480', input_480)
module13.set_input('var_481', input_481)
module13.set_input('var_518', input_518)
module13.set_input('var_519', input_519)
module13.set_input('var_532', input_532)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_451, input_469, input_480, input_481, input_518, input_519, input_532, )
res15 = intrp15.evaluate()(input_451, input_469, input_480, input_481, input_518, input_519, input_532, )
res16 = intrp16.evaluate()(input_451, input_469, input_480, input_481, input_518, input_519, input_532, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
res13_14 = module13.get_output(14).asnumpy()
res14_14 = res14[14].asnumpy()
res15_14 = res15[14].asnumpy()
res16_14 = res16[14].asnumpy()
np.testing.assert_allclose(res13_14 ,res14_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res15_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res16_14, atol=1e-3, rtol=1e-3)
(res13_14 == res14_14).all()
(res13_14 == res15_14).all()
(res13_14 == res16_14).all()
module17.set_input('var_451', input_451)
module17.set_input('var_469', input_469)
module17.set_input('var_480', input_480)
module17.set_input('var_481', input_481)
module17.set_input('var_518', input_518)
module17.set_input('var_519', input_519)
module17.set_input('var_532', input_532)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_451, input_469, input_480, input_481, input_518, input_519, input_532, )
res19 = intrp19.evaluate()(input_451, input_469, input_480, input_481, input_518, input_519, input_532, )
res20 = intrp20.evaluate()(input_451, input_469, input_480, input_481, input_518, input_519, input_532, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
res17_14 = module17.get_output(14).asnumpy()
res18_14 = res18[14].asnumpy()
res19_14 = res19[14].asnumpy()
res20_14 = res20[14].asnumpy()
np.testing.assert_allclose(res17_14 ,res18_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res19_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res20_14, atol=1e-3, rtol=1e-3)
(res17_14 == res18_14).all()
(res17_14 == res19_14).all()
(res17_14 == res20_14).all()
module21.set_input('var_451', input_451)
module21.set_input('var_469', input_469)
module21.set_input('var_480', input_480)
module21.set_input('var_481', input_481)
module21.set_input('var_518', input_518)
module21.set_input('var_519', input_519)
module21.set_input('var_532', input_532)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_451, input_469, input_480, input_481, input_518, input_519, input_532, )
res23 = intrp23.evaluate()(input_451, input_469, input_480, input_481, input_518, input_519, input_532, )
res24 = intrp24.evaluate()(input_451, input_469, input_480, input_481, input_518, input_519, input_532, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()
res21_14 = module21.get_output(14).asnumpy()
res22_14 = res22[14].asnumpy()
res23_14 = res23[14].asnumpy()
res24_14 = res24[14].asnumpy()
np.testing.assert_allclose(res21_14 ,res22_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res23_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res24_14, atol=1e-3, rtol=1e-3)
(res21_14 == res22_14).all()
(res21_14 == res23_14).all()
(res21_14 == res24_14).all()

'''104: TVMFuncCall
103: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
102: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
101: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
100: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
99: tvm::transform::Pass::operator()(tvm::IRModule) const
98: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
97: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
96: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
95: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
94: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
93: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
92: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
91: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
90: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
89: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
88: _ZN3tvm5relay16MixedModeMutato
87: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
86: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
85: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
84: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
83: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
82: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
81: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
80: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
79: _ZN3tvm5relay16MixedModeMutato
78: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
77: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
76: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
75: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
74: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
73: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
72: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
71: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
70: tvm::transform::Pass::operator()(tvm::IRModule) const
69: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
68: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
67: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
66: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
65: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
64: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
63: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
62: _ZN3tvm5relay16MixedModeMutato
61: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
60: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
59: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
58: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
57: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
56: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
55: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
54: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
53: _ZN3tvm5relay16MixedModeMutato
52: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
51: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
50: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
49: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
48: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
46: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''