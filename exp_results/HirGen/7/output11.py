import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
const_16 = relay.const([[0.628832,-0.786311,1.771989,-0.775685,-7.560920,1.706567,-3.253223,-7.645160,6.146369,-5.704927,5.389873],[5.454578,-0.413362,4.379283,7.989749,8.162169,8.211381,3.419384,-0.201448,2.187897,7.007700,8.011925],[3.204433,3.184902,-3.003540,1.528448,-5.796672,-0.242333,-0.711170,-3.803399,0.951418,-9.251830,7.854104],[5.367540,1.839689,-4.282680,-3.151601,6.554281,3.642100,-0.968298,-0.922993,0.231866,4.006535,2.338202],[-3.032217,7.383309,9.620078,-9.299409,8.633182,-3.381188,-5.338278,7.435920,-4.024004,-1.071867,-8.155548],[1.841800,-1.232461,6.104854,2.727590,-9.783382,-8.331433,9.133595,3.196072,6.254407,6.246463,-9.014937],[-4.074192,-4.066191,-7.359248,7.555118,-1.074550,5.623384,5.483104,-7.164044,8.781072,-8.028275,-6.509390],[-0.390879,3.126161,-8.201232,8.322744,5.212089,-6.807594,6.962168,-7.242458,4.108035,4.546272,-9.541636],[9.962585,7.815012,1.145008,3.815518,9.091555,4.658448,8.316811,-7.649982,-2.672065,-7.234459,8.470371],[6.441919,-6.682253,-4.180473,2.849468,0.969060,2.081412,-1.842175,-7.137867,-0.550543,1.470082,0.964453],[9.191376,4.925924,2.190643,5.855447,3.230275,-8.445119,4.454471,-8.075775,6.420270,-3.165522,-5.434020],[4.859015,-1.322402,2.719797,-4.827946,-3.130780,-5.886250,4.567027,4.138885,-4.858136,-2.935672,4.051403],[-8.657636,-7.009039,9.054768,-1.139460,3.880090,-8.472047,-9.118038,9.199128,-5.844368,-4.681127,-5.737516],[-0.306742,-9.837526,-7.724743,-8.762235,6.419418,7.897003,-8.830695,-9.177084,0.118455,3.512204,7.374302]], dtype = "float64")#candidate|16|(14, 11)|const|float64
uop_17 = relay.asinh(const_16.astype('float64')) # shape=(14, 11)
uop_22 = relay.log10(uop_17.astype('float32')) # shape=(14, 11)
uop_28 = relay.sigmoid(uop_17.astype('float32')) # shape=(14, 11)
output = relay.Tuple([uop_22,uop_28,])
output2 = relay.Tuple([uop_22,uop_28,])
func_30 = relay.Function([], output)
mod['func_30'] = func_30
mod = relay.transform.InferType()(mod)
mutated_mod['func_30'] = func_30
mutated_mod = relay.transform.InferType()(mutated_mod)
func_30_call = mutated_mod.get_global_var('func_30')
call_31 = func_30_call()
output = call_31
func_32 = relay.Function([], output)
mutated_mod['func_32'] = func_32
mutated_mod = relay.transform.InferType()(mutated_mod)
var_42 = relay.var("var_42", dtype = "float32", shape = (9, 16, 2))#candidate|42|(9, 16, 2)|var|float32
uop_43 = relay.acosh(var_42.astype('float32')) # shape=(9, 16, 2)
output = relay.Tuple([uop_43,])
output2 = relay.Tuple([uop_43,])
func_45 = relay.Function([var_42,], output)
mod['func_45'] = func_45
mod = relay.transform.InferType()(mod)
mutated_mod['func_45'] = func_45
mutated_mod = relay.transform.InferType()(mutated_mod)
var_46 = relay.var("var_46", dtype = "float32", shape = (9, 16, 2))#candidate|46|(9, 16, 2)|var|float32
func_45_call = mutated_mod.get_global_var('func_45')
call_47 = func_45_call(var_46)
output = call_47
func_48 = relay.Function([var_46], output)
mutated_mod['func_48'] = func_48
mutated_mod = relay.transform.InferType()(mutated_mod)
var_54 = relay.var("var_54", dtype = "bool", shape = (12, 6))#candidate|54|(12, 6)|var|bool
var_55 = relay.var("var_55", dtype = "bool", shape = (12, 6))#candidate|55|(12, 6)|var|bool
bop_56 = relay.logical_or(var_54.astype('bool'), relay.reshape(var_55.astype('bool'), relay.shape_of(var_54))) # shape=(12, 6)
output = relay.Tuple([bop_56,])
output2 = relay.Tuple([bop_56,])
func_62 = relay.Function([var_54,var_55,], output)
mod['func_62'] = func_62
mod = relay.transform.InferType()(mod)
var_63 = relay.var("var_63", dtype = "bool", shape = (12, 6))#candidate|63|(12, 6)|var|bool
var_64 = relay.var("var_64", dtype = "bool", shape = (12, 6))#candidate|64|(12, 6)|var|bool
output = func_62(var_63,var_64,)
func_65 = relay.Function([var_63,var_64,], output)
mutated_mod['func_65'] = func_65
mutated_mod = relay.transform.InferType()(mutated_mod)
var_77 = relay.var("var_77", dtype = "int64", shape = (6, 8, 3))#candidate|77|(6, 8, 3)|var|int64
const_78 = relay.const([[[-3,2,-1],[-4,2,-7],[8,9,-5],[5,-3,4],[3,-6,-1],[2,-3,7],[7,-9,7],[-9,-6,-8]],[[-3,10,10],[-5,-3,1],[7,7,-6],[-4,-8,-4],[-8,1,3],[7,-4,3],[3,6,10],[-10,-9,-7]],[[-3,-1,-3],[-7,-10,-7],[10,3,2],[-10,4,1],[-1,3,7],[-8,10,-3],[-6,5,1],[-3,7,6]],[[9,-6,-2],[-9,7,-5],[-3,-7,6],[-5,10,-10],[-2,-1,8],[8,-3,-4],[-1,-8,-6],[-5,7,9]],[[9,6,4],[10,1,-2],[-9,10,-7],[7,-9,8],[-7,4,4],[9,-9,-5],[-5,8,-8],[-6,-3,9]],[[1,9,10],[-5,8,-2],[5,6,-6],[-7,-7,8],[-7,10,-1],[3,-6,3],[-8,4,-10],[-8,8,6]]], dtype = "int64")#candidate|78|(6, 8, 3)|const|int64
bop_79 = relay.right_shift(var_77.astype('int64'), relay.reshape(const_78.astype('int64'), relay.shape_of(var_77))) # shape=(6, 8, 3)
bop_85 = relay.bitwise_or(bop_79.astype('int32'), relay.reshape(const_78.astype('int32'), relay.shape_of(bop_79))) # shape=(6, 8, 3)
uop_88 = relay.acos(bop_85.astype('float64')) # shape=(6, 8, 3)
output = uop_88
output2 = uop_88
func_92 = relay.Function([var_77,], output)
mod['func_92'] = func_92
mod = relay.transform.InferType()(mod)
mutated_mod['func_92'] = func_92
mutated_mod = relay.transform.InferType()(mutated_mod)
var_93 = relay.var("var_93", dtype = "int64", shape = (6, 8, 3))#candidate|93|(6, 8, 3)|var|int64
func_92_call = mutated_mod.get_global_var('func_92')
call_94 = func_92_call(var_93)
output = call_94
func_95 = relay.Function([var_93], output)
mutated_mod['func_95'] = func_95
mutated_mod = relay.transform.InferType()(mutated_mod)
var_131 = relay.var("var_131", dtype = "float32", shape = (8, 15, 15))#candidate|131|(8, 15, 15)|var|float32
uop_132 = relay.log10(var_131.astype('float32')) # shape=(8, 15, 15)
output = relay.Tuple([uop_132,])
output2 = relay.Tuple([uop_132,])
func_137 = relay.Function([var_131,], output)
mod['func_137'] = func_137
mod = relay.transform.InferType()(mod)
var_138 = relay.var("var_138", dtype = "float32", shape = (8, 15, 15))#candidate|138|(8, 15, 15)|var|float32
output = func_137(var_138)
func_139 = relay.Function([var_138], output)
mutated_mod['func_139'] = func_139
mutated_mod = relay.transform.InferType()(mutated_mod)
func_30_call = mod.get_global_var('func_30')
func_32_call = mutated_mod.get_global_var('func_32')
call_170 = relay.TupleGetItem(func_30_call(), 1)
call_171 = relay.TupleGetItem(func_32_call(), 1)
func_92_call = mod.get_global_var('func_92')
func_95_call = mutated_mod.get_global_var('func_95')
const_175 = relay.const([8,-9,9,-2,8,7,7,6,8,7,3,9,2,-9,8,3,4,-6,-10,5,4,6,6,5,3,-4,-9,-4,-6,1,3,-1,9,-9,10,9,-9,-5,8,1,-5,8,7,-2,-4,-8,-10,3,8,10,-9,-2,-3,3,9,3,-6,-8,4,7,-5,-7,4,6,-4,-10,5,-1,-8,-2,-6,-1,-9,-7,-8,-2,-9,-10,1,-3,-2,7,-6,8,1,-1,6,-3,-10,7,-5,3,-10,-7,6,-3,4,6,8,-3,3,-8,-5,-3,1,5,10,2,-8,8,-8,4,5,-1,5,4,8,-8,-4,8,-4,-3,-10,4,-3,-3,7,4,-1,-5,-7,-8,-2,7,-9,3,-9,-8,3,-8,6,9,3,7], dtype = "int64")#candidate|175|(144,)|const|int64
call_174 = func_92_call(relay.reshape(const_175.astype('int64'), [6, 8, 3]))
call_176 = func_92_call(relay.reshape(const_175.astype('int64'), [6, 8, 3]))
var_183 = relay.var("var_183", dtype = "int64", shape = (144,))#candidate|183|(144,)|var|int64
bop_184 = relay.maximum(const_175.astype('int8'), relay.reshape(var_183.astype('int8'), relay.shape_of(const_175))) # shape=(144,)
bop_195 = relay.power(var_183.astype('float32'), relay.reshape(call_174.astype('float32'), relay.shape_of(var_183))) # shape=(144,)
bop_198 = relay.power(var_183.astype('float32'), relay.reshape(call_176.astype('float32'), relay.shape_of(var_183))) # shape=(144,)
func_137_call = mod.get_global_var('func_137')
func_139_call = mutated_mod.get_global_var('func_139')
const_204 = relay.const([[-9.066367],[8.302776],[-8.463030],[8.513775],[-8.769805],[-4.871076],[8.697208],[4.438541],[0.315412],[2.393733],[6.566675],[-4.448669],[3.204643],[0.595446],[-9.339151],[-7.522016],[0.622666],[-4.296978],[-3.042366],[7.562191],[0.564502],[5.707978],[3.322015],[2.943834],[1.748785],[-0.367759],[3.271452],[-8.433277],[-9.259245],[-7.551673],[0.617030],[-4.498675],[-5.264634],[5.037199],[-5.070701],[1.691297],[-7.031770],[2.556414],[-7.699281],[-8.969080],[5.776501],[-0.188514],[5.782198],[7.512389],[-2.349018],[-0.882057],[-8.474907],[-0.698088],[-5.524516],[3.650274],[0.981141],[-8.409220],[3.455749],[7.851014],[-9.344307],[5.234200],[-5.511377],[-5.522110],[-1.792788],[2.279450],[9.820204],[5.447768],[-8.435645],[-0.356274],[3.309519],[-1.034718],[0.829928],[-6.055897],[-1.497863],[-9.178597],[8.865924],[-1.761511],[1.586515],[5.183788],[-2.343985],[2.670458],[-5.648635],[5.214118],[-1.284030],[8.564811],[0.327403],[-5.139285],[8.742508],[1.390840],[-2.195481],[-0.852050],[9.733732],[9.199308],[-5.434805],[-2.355919],[-1.574052],[-7.159768],[-2.353293],[9.843799],[-7.652386],[-9.739003],[-9.278507],[-9.642155],[6.482779],[7.677887],[5.052288],[0.925224],[-1.675609],[9.426812],[7.356440],[9.078705],[6.335511],[4.051314],[0.477251],[4.500507],[9.141858],[7.455646],[-9.206923],[2.534080],[7.529081],[-8.189652],[0.441836],[4.974519],[-1.583269],[-5.468869],[8.423441],[8.983499],[3.137226],[-8.883281],[-8.391514],[-5.613927],[-3.894297],[3.958098],[4.790010],[-7.239489],[-3.500261],[4.907327],[0.082421],[4.299890],[-2.978205],[4.737377],[-2.475649],[-3.054258],[1.227736],[-7.803553],[-1.640782],[-6.185634],[6.976122],[-1.401963],[-4.148980],[9.253820],[3.655246],[-8.225248],[-5.729699],[-7.347194],[5.026399],[-8.233852],[0.699531],[-4.814428],[8.815136],[-3.403519],[7.425741],[-0.974980],[-0.125009],[-9.309652],[-3.911758],[4.435937],[-5.375410],[-9.755275],[-7.089665],[3.377689],[-9.303207],[5.755884],[1.831292],[7.826396],[-5.686823],[-7.688342],[-1.729002],[-6.110763],[8.087561],[4.188185],[3.577107],[7.436556],[9.265732],[-7.893272],[3.117730],[9.121218],[1.395112],[6.619701],[-9.350546],[2.115188],[-8.137085],[4.688256],[9.618654],[1.839744],[-5.683824],[-5.363675],[-0.799412],[0.894448],[7.181839],[5.063977],[-1.416164],[-2.372062],[5.714260],[-9.798708],[-3.686683],[-2.818317],[9.494471],[1.988552],[-8.870002],[-2.641260],[-5.457392],[-5.381646],[-7.748667],[-7.406855],[2.281665],[-1.012601],[-4.626551],[3.674806],[-3.895466],[-5.979383],[9.518343],[0.575747],[-2.304305],[4.297771],[-0.371697],[1.133202],[-8.685598],[5.438425],[6.828504],[-7.472226],[5.012826],[-8.249867],[-9.985296],[8.901318],[7.652260],[3.805940],[-3.052066],[-9.348931],[-0.354702],[4.687290],[8.083625],[0.118554],[-3.660486],[-6.183056],[-5.233473],[-6.484600],[-1.803214],[4.988863],[-2.936196],[1.319578],[-0.733708],[7.854301],[-7.618279],[6.992942],[0.785187],[4.973367],[2.653739],[1.422397],[1.099126],[-1.010528],[-9.285167],[1.179714],[3.405582],[3.884624],[2.374356],[-3.492898],[-4.734777],[-2.683107],[9.617801],[5.934765],[1.783171],[8.830472],[6.928622],[-9.526435],[-3.186987],[-9.076551],[-1.589722],[5.603747],[-3.033964],[2.008746],[-5.824935],[-8.869593],[0.992574],[5.342957],[-3.088761],[-6.888967],[5.125075],[0.128091],[-6.046369],[8.815283],[-6.060078],[7.622949],[6.968005],[-8.840948],[-9.153899],[4.310338],[5.024181],[3.607978],[-3.780393],[3.736708],[3.872008],[-0.658585],[0.368269],[5.734617],[-5.103415],[5.978500],[-6.200123],[1.944210],[4.555846],[1.225074],[2.015776],[-5.020224],[-9.517139],[-4.284313],[-0.753620],[-8.386903],[4.511538],[-6.330213],[-4.755754],[-0.769115],[-5.569337],[5.402343],[-1.518623],[-9.356278],[-0.715744],[4.744377],[-9.356706],[2.492502],[6.626274],[-6.236829],[4.945041],[1.461555],[7.168623],[-2.642961],[1.400174],[-1.443471],[-5.895835],[-0.229953],[-2.462537],[-2.888256],[5.781931],[2.051937],[-4.284919],[-1.761826],[-2.392271],[2.404695],[2.378992],[-0.944557],[0.001680],[-2.240084],[5.524455],[-8.894508],[-6.013742],[-1.418778],[-4.585787],[-1.322586],[0.401126],[0.178474],[-7.576138],[8.659825],[-6.722907],[-8.766248],[-4.906468],[8.527502],[1.003180],[-3.855791],[-7.238701],[-0.336635],[-8.566943],[-8.055470],[-6.175891],[-5.737148],[-7.897093],[3.568895],[0.603852],[3.267414],[3.807765],[-9.273252],[-9.371707],[5.547369],[0.681802],[-6.507800],[6.566106],[6.025915],[1.305406],[-8.713338],[-2.598917],[8.757163],[-4.364602],[8.312200],[-2.545796],[-4.687663],[-1.893107],[6.121196],[-7.077522],[4.872487],[-7.952704],[8.677516],[-0.993602],[3.107623],[-2.904347],[5.702641],[-5.698198],[1.742257],[4.272126],[7.117006],[3.199921],[-4.750125],[-3.034761],[-9.650534],[-2.903425],[-1.460950],[5.326854],[-9.826264],[-7.560956],[-4.600867],[3.875453],[3.498548],[-3.846189],[6.739456],[0.328865],[4.053607],[-9.616377],[9.282005],[8.254114],[2.745134],[3.534412],[5.263462],[7.549978],[-6.820961],[7.887013],[8.600378],[1.765578],[8.744895],[6.738306],[8.284802],[4.837457],[-8.076560],[-8.100128],[-9.872534],[5.709124],[-8.264935],[0.071971],[-2.377996],[4.560329],[9.947010],[5.781759],[-2.903699],[5.040969],[-6.013122],[-5.604634],[-0.464377],[9.999671],[0.776140],[-9.365707],[0.984284],[6.459040],[-4.198026],[6.325804],[7.268379],[5.480924],[-3.141295],[3.841412],[3.641242],[-4.944717],[-2.582502],[-2.494783],[-9.856274],[3.355300],[6.287842],[6.599163],[6.389690],[-8.565392],[6.098260],[-0.491927],[4.640401],[3.642596],[-8.132387],[-6.307844],[-5.299995],[-8.449559],[8.126045],[1.132893],[-0.136222],[6.289308],[-9.377166],[-5.688579],[5.533872],[6.993025],[3.293201],[9.642107],[2.715627],[-2.939660],[-0.500135],[-9.284316],[7.979207],[5.724770],[9.144044],[-9.524317],[6.410419],[8.705943],[-5.732446],[3.574812],[4.093147],[-9.068195],[5.744965],[4.793113],[5.580777],[-7.973968],[-5.292028],[-2.436723],[1.799902],[-4.549268],[-8.804291],[-2.003331],[-1.842722],[8.377722],[-9.957039],[-5.777227],[0.729899],[-3.791437],[-5.454374],[2.374691],[9.840556],[6.703893],[-4.033190],[1.091740],[7.530570],[-1.734411],[-7.395782],[1.605182],[2.464552],[8.139578],[-4.452422],[5.583442],[-8.249352],[-1.059624],[3.812844],[-9.109875],[6.360937],[-3.696581],[2.209380],[-5.503989],[3.504232],[-4.964865],[0.984383],[-3.314518],[-1.284865],[-9.645325],[1.448989],[-4.947483],[4.212432],[-5.001262],[1.957732],[2.377090],[1.584111],[-8.843012],[8.715060],[1.038188],[-7.405072],[-6.318719],[-5.530651],[-1.276498],[-0.395602],[7.304944],[-9.835665],[-0.625619],[-0.856555],[-0.135231],[2.180286],[-7.200249],[0.414187],[-3.862554],[1.722692],[7.530322],[6.934694],[-2.090178],[-0.072438],[9.578971],[3.108177],[-9.858693],[-1.266166],[-7.492537],[4.326237],[-2.649350],[-2.076640],[0.454124],[-0.081411],[2.620283],[-0.680810],[8.867177],[-2.127848],[6.235289],[-3.464250],[-1.325929],[6.206096],[7.234868],[8.582359],[-1.138003],[-8.463741],[5.580521],[4.298473],[-8.116005],[-4.861023],[-4.396316],[-4.603668],[7.781482],[6.568092],[8.393468],[4.168442],[5.570281],[-2.431212],[-8.555044],[-2.190556],[-8.822179],[-7.326204],[-1.777584],[5.235895],[5.250241],[-9.525857],[-1.754127],[3.748964],[0.785200],[-4.279323],[-8.723937],[-0.417748],[-7.755439],[-5.333468],[-9.742626],[0.627652],[8.322089],[8.428625],[9.326671],[-8.149319],[-2.981281],[-7.294702],[5.416922],[-8.859292],[-5.759446],[3.373101],[-5.942684],[6.717246],[-1.553526],[-3.610300],[-5.262616],[2.981883],[0.501708],[6.812976],[6.407084],[9.612847],[-5.244994],[-0.307095],[3.909722],[3.154610],[7.354897],[-5.477070],[-4.967206],[-4.354606],[2.505236],[-7.021088],[-6.447148],[3.716625],[-6.616268],[9.248760],[-1.090214],[7.404546],[-2.378685],[-1.318529],[5.410946],[-1.536807],[-5.915289],[-6.359212],[-0.100258],[7.187816],[9.578529],[2.839028],[3.196654],[8.158574],[-2.433264],[-9.527620],[9.606845],[8.032520],[6.190371],[0.079058],[9.575185],[-1.871949],[-8.822971],[8.437583],[9.365316],[-9.787987],[-8.021259],[1.561902],[-7.068960],[5.112506],[9.454819],[7.045105],[3.715348],[-5.235537],[-4.626806],[4.549182],[3.597412],[2.003548],[5.600866],[-6.042229],[8.932499],[1.973272],[1.965330],[-8.444779],[-5.977100],[-5.655239],[8.781088],[-2.967296],[-8.516557],[1.163168],[9.762086],[1.502020],[-7.514938],[-1.870709],[8.876997],[3.495418],[-3.933455],[-2.762454],[3.512070],[8.584002],[-1.623189],[7.784559],[-8.082600],[-2.738842],[-4.345296],[1.900622],[7.938807],[8.734476],[-7.805883],[4.856872],[-4.271362],[-5.190855],[0.847123],[-2.595983],[5.230747],[-4.242792],[8.579045],[6.117910],[-5.727285],[7.429614],[-9.861332],[-8.604519],[0.007912],[9.126551],[0.490473],[9.845004],[9.575749],[-3.888715],[-0.486695],[8.325219],[8.517776],[3.062659],[2.732114],[-2.628457],[-1.059076],[1.794473],[-5.165840],[-5.986008],[6.754593],[4.046749],[-1.650050],[-6.666306],[5.550209],[0.290389],[-8.264752],[6.541173],[-2.133714],[-4.133706],[-2.289216],[1.768170],[-4.725334],[5.230903],[-9.668158],[-4.564634],[7.339508],[8.557263],[-7.359752],[-5.427185],[-5.984538],[1.462362],[-6.252361],[-2.902722],[0.894209],[3.332457],[8.123201],[5.826260],[5.480623],[7.997526],[-2.379369],[2.164579],[7.698636],[-6.243970],[-7.182955],[7.401208],[-7.229658],[3.550570],[-8.306017],[2.707194],[8.243374],[6.574878],[-1.354080],[-2.265450],[0.859580],[9.725014],[-5.951530],[3.072029],[6.884432],[3.588887],[-9.580571],[1.796821],[-5.719336],[-7.565566],[-5.294840],[-1.040026],[-5.935626],[2.767776],[-3.783500],[-2.160318],[4.426616],[-6.191443],[-7.366944],[0.942064],[6.927458],[9.401460],[-5.365850],[-2.478725],[-3.528459],[1.426668],[-3.143719],[-6.578474],[6.210802],[1.542334],[2.532546],[7.962749],[-8.144312],[-8.244185],[6.758229],[-9.685498],[8.396892],[5.571417],[-8.518196],[-3.905080],[-2.115713],[-9.492335],[4.933687],[9.625907],[-8.223526],[8.010015],[-9.163506],[-8.110140],[-8.843098],[7.531469],[-4.292503],[-8.591646],[5.264731],[7.126487],[5.806831],[-9.059879],[4.798387],[-3.159769],[2.597841],[2.289214],[7.127067],[-8.016158],[0.420431],[-3.854171],[5.903276],[-3.305995],[0.573621],[8.491108],[-2.599672],[2.439772],[-3.043909],[4.895485],[-6.953413],[8.327422],[0.177070],[2.413938],[4.893154],[-7.410876],[-1.644170],[-5.364524],[-3.703093],[7.378679],[0.753234],[-5.709015],[-4.760884],[1.956657],[-1.183774],[-8.145513],[-7.325445],[-5.195298],[6.769082],[-9.624882],[4.843232],[4.896721],[7.261323],[-9.561594],[-0.158368],[-9.118852],[-1.659895],[9.212374],[-2.231742],[-4.612711],[0.455351],[9.076061],[-9.557871],[2.985963],[5.525176],[-3.020542],[-9.623629],[-5.666576],[1.525248],[5.509891],[-6.347482],[1.404458],[4.925850],[4.202110],[2.049399],[-7.061887],[3.074005],[-8.228772],[7.790781],[6.962469],[-8.509630],[-2.879041],[2.852092],[-2.853296],[6.061032],[8.137160],[4.505779],[-5.191420],[8.013865],[-6.154202],[3.753202],[-4.129794],[-9.052329],[-3.044247],[-9.602183],[-3.783543],[0.677612],[-9.792444],[7.964439],[4.884491],[-1.293239],[4.701001],[6.394999],[-8.249391],[4.967528],[9.184671],[4.225484],[7.867742],[8.739788],[-1.804524],[7.204400],[-9.967686],[1.905193],[-1.988641],[9.302020],[0.832270],[-1.464364],[-1.380828],[-7.498232],[-9.691221],[0.878421],[3.273827],[1.038061],[5.288482],[-3.803725],[0.194478],[-6.091986],[8.754522],[-0.809940],[9.291377],[8.103166],[5.423598],[4.958727],[-9.652772],[5.260815],[8.450139],[-4.762888],[9.059560],[-7.526063],[-7.402493],[-0.512520],[-9.604036],[0.868719],[-3.640258],[1.481448],[-7.158366],[-8.504884],[-8.251283],[9.751270],[-5.317592],[-0.534914],[7.125302],[-1.183877],[-2.685789],[8.581631],[7.387629],[-4.786575],[2.432139],[2.636982],[5.567534],[9.420581],[-8.051140],[-7.781558],[7.057324],[9.739748],[-0.997665],[1.605901],[-4.563833],[-6.854059],[-8.185500],[-3.971816],[-4.611860],[-2.484327],[-0.270480],[7.434353],[-6.840166],[9.605908],[4.431786],[-7.595488],[0.429954],[-0.200141],[4.472982],[-6.386484],[6.289749],[-0.671876],[-9.783968],[4.075467],[-5.706115],[-1.391158],[-8.148190],[-8.148284],[-7.597390],[0.183868],[8.482136],[-3.350406],[8.601928],[-4.450372],[9.049659],[-1.264247],[-1.992978],[-8.173512],[9.827848],[6.259186],[4.231075],[0.851679],[3.777357],[6.246033],[1.314894],[0.740473],[-4.086570],[-9.875365],[-7.222645],[-3.262984],[2.762112],[-5.492930],[9.371207],[-3.439983],[7.020598],[-9.010824],[-2.845040],[-8.038401],[-7.001487],[6.534799],[-0.905044],[-9.837122],[8.268441],[-2.933684],[-0.795116],[8.199902],[2.806290],[7.431976],[-9.259862],[-6.612436],[1.569287],[9.289444],[-2.374468],[1.030160],[3.617367],[-2.813102],[-6.236463],[-2.680633],[4.006339],[1.498554],[2.116615],[9.813717],[7.142694],[5.103030],[7.264074],[3.114612],[0.430388],[-7.974215],[-8.078454],[-7.795244],[-4.534418],[1.325209],[7.263465],[-4.013118],[-7.050860],[-8.083528],[-1.701469],[-2.463985],[-9.239606],[-9.299810],[4.909753],[-0.322535],[-6.053251],[-4.584155],[1.453666],[-9.720741],[-7.172975],[-8.897344],[8.913978],[-4.053214],[-1.772524],[3.136368],[5.216705],[-2.063940],[7.407353],[2.992150],[-8.204745],[2.608136],[-7.804921],[2.437070],[-1.942570],[6.023859],[0.328038],[2.117897],[8.288285],[-0.621529],[-5.207760],[-3.595032],[-6.532136],[-3.443053],[4.878314],[-7.235810],[7.533491],[-4.268193],[-9.866821],[9.788017],[2.211637],[6.818941],[-5.522197],[7.210898],[-9.962639],[-9.702007],[7.216414],[-9.011061],[8.567106],[-9.852421],[-7.253012],[4.914757],[-1.431555],[7.812878],[6.501496],[-9.497384],[-7.642798],[-6.527497],[-9.426460],[-6.754263],[3.491171],[3.407336],[2.355248],[-6.457288],[-3.359782],[-5.104062],[-0.447330],[4.455416],[5.100678],[6.698857],[4.088854],[-0.783443],[3.702809],[7.719934],[-2.045222],[-5.830286],[-4.608336],[3.246927],[-3.740137],[-7.007658],[-9.138124],[0.414773],[-3.714327],[3.572276],[-9.811377],[9.341266],[-5.418745],[5.277489],[-8.414165],[4.785561],[-7.809910],[-0.874702],[-3.828595],[-9.435201],[-5.945443],[1.838395],[0.385401],[3.310289],[7.370716],[-3.147327],[9.029403],[-4.454025],[1.126477],[5.251261],[-4.519250],[-9.090116],[-6.317354],[3.112918],[-9.103303],[7.680902],[-0.104758],[0.794876],[-1.069212],[-5.017153],[-4.255878],[6.766522],[-5.536781],[9.337827],[8.400830],[7.085023],[-8.945544],[-8.014388],[-2.747569],[4.335537],[8.985648],[1.945504],[4.932900],[-9.615864],[6.469510],[-8.330565],[6.557402],[7.255262],[1.579978],[6.084909],[2.409024],[-4.478169],[-7.231898],[0.107593],[-0.425656],[-5.362744],[1.348487],[6.353649],[-6.184490],[-8.414153],[-9.095150],[3.885786],[-5.347733],[4.640540],[-7.288756],[-2.791755],[8.552041],[2.976918],[1.658204],[3.904225],[8.878447],[-0.826532],[4.709901],[1.470428],[1.072914],[-9.654577],[-9.365158],[8.295079],[-0.926502],[-2.421431],[2.279013],[6.639896],[5.882615],[-9.553300],[1.169453],[-3.382948],[6.087059],[5.753796],[5.963606],[5.421611],[0.652677],[-9.949970],[9.668122],[-0.073817],[5.801554],[-9.486446],[-2.012373],[4.190787],[-6.302266],[-6.574125],[8.855468],[-1.299202],[7.181303],[-8.845883],[6.644183],[8.012531],[7.766294],[-7.853045],[5.203411],[-2.125555],[-4.707183],[5.585625],[-3.552249],[-8.243535],[1.050956],[-1.509813],[-6.908769],[7.072343],[0.064586],[-7.942662],[6.903386],[6.711477],[9.445092],[-2.380835],[-7.793285],[4.058105],[6.913440],[1.474069],[-8.165962],[4.763865],[9.488104],[-4.036215],[-1.385431],[9.231630],[6.183894],[-1.775148],[-1.360909],[0.270057],[-8.010774],[-3.010873],[4.101143],[2.784351],[9.877932],[-9.658268],[-1.485787],[2.115157],[-2.308117],[3.016152],[5.562044],[-6.937815],[-8.849963],[-6.302345],[-0.599456],[9.960664],[9.287921],[4.369603],[7.033247],[3.998187],[-9.528948],[-5.490496],[8.325153],[-4.200749],[-0.566671],[9.350689],[-9.924070],[-5.213281],[-8.388715],[3.443709],[0.579061],[7.595634],[7.509305],[5.351994],[9.423533],[3.056618],[-8.730633],[6.764235],[3.366122],[8.042729],[3.210258],[0.186422],[-3.998852],[6.011798],[-4.816085],[6.299742],[7.186092],[-6.040664],[-4.838855],[1.120440],[4.249104],[5.906947],[7.797702],[8.698335],[-7.901523],[-4.114106],[5.175466],[1.482810],[5.206165],[2.699172],[-9.582233],[1.460214],[5.769332],[-7.534937],[1.939543],[-4.197245],[-8.432385],[9.939828],[-5.772366],[-6.627800],[8.152724],[-0.285751],[-6.269360],[4.666400],[-1.307628],[-3.760935],[2.605083],[-7.436016],[2.942171],[-6.298722],[7.516472],[9.859054],[-3.710936],[2.569080],[-4.019776],[7.848387],[-1.866988],[-9.713458],[-3.872815],[-3.453041],[-9.636197],[8.495539],[5.646543],[6.476974],[-0.579852],[0.572767],[-1.105473],[0.552960],[2.759493],[5.991672],[-1.624036],[-5.468436],[-2.134256],[6.546802],[-6.227388],[-5.558821],[-8.054177],[-6.630398],[6.865272],[1.687446],[-1.240587],[3.627465],[5.929520],[4.593179],[9.371874],[-0.909223],[-3.021534],[-3.826472],[-7.046577],[4.345555],[-0.904400],[4.994034],[3.636323],[-9.791025],[0.266412],[-0.798344],[-5.628142],[-2.621791],[-2.989137],[4.392439],[-8.152964],[6.938131],[-8.337416],[-1.310713],[3.193146],[7.374432],[5.524863],[9.687791],[-7.530769],[4.897765],[7.645379],[7.667496],[-9.120791],[9.248258],[-1.730109],[-0.526585],[6.696621],[5.102463],[-6.734477],[-5.404841],[8.612436],[4.511992],[-4.958212],[5.318565],[-4.959681],[7.711852],[-7.972096],[9.242228],[-6.865791],[5.548274],[4.727652],[-5.562402],[1.071304],[-2.334197],[0.919017],[0.874836],[-4.490000],[0.486824],[4.410672],[-9.242401],[4.953377],[1.073181],[-0.167179],[-0.596662],[-4.507376],[9.244744],[-0.863783],[-8.057927],[7.314294],[0.322359],[8.275006],[1.139598],[8.592728],[-4.423409],[8.191663],[-9.771330],[-6.957867],[-1.591614],[-5.789431],[-8.781445],[-2.603840],[4.525423],[0.253388],[-8.804761],[-4.918397],[5.241076],[5.220201],[-3.054278],[1.996024],[8.502474],[6.089861],[4.011817],[-6.614877],[-0.322386],[9.907369],[2.111355],[5.620213],[-1.555443],[-6.409119],[4.872762],[-0.764038],[-5.692243],[-0.399383],[-3.806502],[0.110227],[-9.623619],[6.783956],[7.345738],[-3.968036],[-4.593027],[-9.907947],[6.984901],[-0.314970],[-8.143672],[2.875064],[-1.999816],[-5.761123],[3.527532],[8.368068],[-1.271514],[8.097224],[3.221427],[-9.671418],[-9.253144],[-8.989111],[-7.500283],[-2.766158],[-7.510561],[5.656169],[7.408899],[2.216497],[-1.149780],[-4.390071],[-5.540653],[7.907472],[4.785759],[4.622254],[9.220390],[9.711442],[-3.655407],[6.537363],[-5.126962],[9.340323],[-0.360594],[4.153579],[6.653885],[7.863948],[-0.722576],[1.887574],[9.281436],[7.437866],[2.218603],[1.319810],[-7.293422],[0.926331],[6.160563],[-3.380459],[-5.231526],[-1.538650],[-8.738190],[8.758458],[-8.867968],[-7.705595],[-1.167348],[0.707881],[-1.278145],[-4.728197],[-8.327371],[4.808889],[-9.670365],[7.971159],[5.157490],[9.251363],[7.044357],[-4.265289],[0.285525],[2.401411],[9.843427],[-7.980924],[8.752754],[5.919602],[-3.053082],[-5.277637],[-0.662014],[-6.844427],[-4.064418],[-3.836869],[5.868082],[7.626076],[5.657748],[-7.594150],[1.463236],[6.922102],[2.684053],[7.587272],[2.658671],[5.247242],[-8.865423],[-8.457248],[5.070374],[-3.860194],[6.120285],[9.665395],[-8.839474],[1.315962],[-1.622363],[3.994493],[-6.537033],[-7.359475],[-6.253000],[-0.775941],[1.647420],[-5.686095],[6.349779],[-3.350207],[7.822546],[-3.402286],[4.986152],[2.303698],[8.827687],[1.688745],[-4.873950],[0.426976],[3.123549],[6.250110],[6.640263],[-6.697021],[9.944764],[6.069430],[9.594354],[8.912855],[-8.929662],[2.941254],[9.523321],[9.440797],[-7.155208],[-6.772659],[0.422526],[1.368354],[-5.391129],[0.280917],[-8.635910],[-3.837453],[-9.164682],[2.511417],[6.343598],[-1.856013],[-7.252887],[6.896114],[-6.540772],[-8.680844],[8.961332],[3.974518],[5.147513],[-9.229260],[6.821107],[2.275266],[9.989150],[4.967195],[0.163803],[2.003857],[9.995376],[-1.399189],[-6.345254],[2.222368],[7.911324],[2.964242],[2.121780],[9.819343],[7.904402],[-5.542053],[1.803724],[-2.054265],[7.960933],[-6.362158],[-9.274124],[3.546455],[5.400630],[-0.560950],[6.405947],[-9.719236],[9.086373],[8.526742],[0.292986],[2.621372],[-8.212736],[4.502919],[-7.612874],[-3.515244],[-1.710403],[-3.323820],[5.399848],[-6.054764],[-4.987919],[-4.265714],[4.033904],[-1.745639],[-9.452651],[2.657141],[-8.597603],[-8.293717],[-0.794218],[6.361931],[7.053001],[-4.943342],[-8.122260],[0.559563],[-0.089444],[7.538455],[-0.486607],[-2.795665],[-9.929250],[-8.218511],[-6.120526],[-1.905765],[0.239785],[-0.105012],[2.581870],[-3.713229],[2.125138],[-9.062627],[1.119447],[6.335406],[0.056680],[-9.580518],[-7.218599],[7.187927],[6.242352],[1.665683],[8.023431],[8.870875],[-3.787897],[-9.527833],[6.052964],[0.835141],[5.572658],[-5.255069],[9.141197],[-5.538991],[-5.167573],[-3.742410],[3.126593],[-8.405064],[7.042705],[9.320642],[6.438628],[6.838592],[-8.902492],[1.849430],[-4.849048],[-4.357409],[-9.802983],[2.782732],[3.669120],[6.649505],[-9.675646],[-0.697040],[4.527747],[1.927153],[5.485649],[-3.910421],[4.432649],[-5.997372],[4.954377],[6.506466]], dtype = "float32")#candidate|204|(1800, 1)|const|float32
call_203 = relay.TupleGetItem(func_137_call(relay.reshape(const_204.astype('float32'), [8, 15, 15])), 0)
call_205 = relay.TupleGetItem(func_139_call(relay.reshape(const_204.astype('float32'), [8, 15, 15])), 0)
uop_207 = relay.log2(var_183.astype('float64')) # shape=(144,)
output = relay.Tuple([call_170,bop_184,bop_195,call_203,const_204,uop_207,])
output2 = relay.Tuple([call_171,bop_184,bop_198,call_205,const_204,uop_207,])
func_209 = relay.Function([var_183,], output)
mod['func_209'] = func_209
mod = relay.transform.InferType()(mod)
mutated_mod['func_209'] = func_209
mutated_mod = relay.transform.InferType()(mutated_mod)
var_210 = relay.var("var_210", dtype = "int64", shape = (144,))#candidate|210|(144,)|var|int64
func_209_call = mutated_mod.get_global_var('func_209')
call_211 = func_209_call(var_210)
output = call_211
func_212 = relay.Function([var_210], output)
mutated_mod['func_212'] = func_212
mutated_mod = relay.transform.InferType()(mutated_mod)
var_235 = relay.var("var_235", dtype = "int32", shape = (15, 15))#candidate|235|(15, 15)|var|int32
var_236 = relay.var("var_236", dtype = "int32", shape = (15, 15))#candidate|236|(15, 15)|var|int32
bop_237 = relay.maximum(var_235.astype('int32'), relay.reshape(var_236.astype('int32'), relay.shape_of(var_235))) # shape=(15, 15)
bop_242 = relay.multiply(bop_237.astype('int64'), relay.reshape(var_235.astype('int64'), relay.shape_of(bop_237))) # shape=(15, 15)
func_45_call = mod.get_global_var('func_45')
func_48_call = mutated_mod.get_global_var('func_48')
var_247 = relay.var("var_247", dtype = "float32", shape = (288,))#candidate|247|(288,)|var|float32
call_246 = relay.TupleGetItem(func_45_call(relay.reshape(var_247.astype('float32'), [9, 16, 2])), 0)
call_248 = relay.TupleGetItem(func_48_call(relay.reshape(var_247.astype('float32'), [9, 16, 2])), 0)
uop_251 = relay.sigmoid(var_236.astype('float64')) # shape=(15, 15)
func_92_call = mod.get_global_var('func_92')
func_95_call = mutated_mod.get_global_var('func_95')
var_254 = relay.var("var_254", dtype = "int64", shape = (144,))#candidate|254|(144,)|var|int64
call_253 = func_92_call(relay.reshape(var_254.astype('int64'), [6, 8, 3]))
call_255 = func_92_call(relay.reshape(var_254.astype('int64'), [6, 8, 3]))
bop_256 = relay.greater(uop_251.astype('bool'), relay.reshape(bop_237.astype('bool'), relay.shape_of(uop_251))) # shape=(15, 15)
output = relay.Tuple([bop_242,call_246,var_247,call_253,var_254,bop_256,])
output2 = relay.Tuple([bop_242,call_248,var_247,call_255,var_254,bop_256,])
func_259 = relay.Function([var_235,var_236,var_247,var_254,], output)
mod['func_259'] = func_259
mod = relay.transform.InferType()(mod)
var_260 = relay.var("var_260", dtype = "int32", shape = (15, 15))#candidate|260|(15, 15)|var|int32
var_261 = relay.var("var_261", dtype = "int32", shape = (15, 15))#candidate|261|(15, 15)|var|int32
var_262 = relay.var("var_262", dtype = "float32", shape = (288,))#candidate|262|(288,)|var|float32
var_263 = relay.var("var_263", dtype = "int64", shape = (144,))#candidate|263|(144,)|var|int64
output = func_259(var_260,var_261,var_262,var_263,)
func_264 = relay.Function([var_260,var_261,var_262,var_263,], output)
mutated_mod['func_264'] = func_264
mutated_mod = relay.transform.InferType()(mutated_mod)
const_266 = relay.const([[-4,9,-6,-10,2,3,7,-2,7,5,10,-2,10],[-1,10,2,-3,-3,-1,7,-5,9,10,-6,-7,6],[4,6,9,-6,5,4,-1,9,2,-7,-6,8,-10],[-2,-9,4,-8,7,10,-6,-5,3,9,-10,-9,9]], dtype = "uint64")#candidate|266|(4, 13)|const|uint64
var_267 = relay.var("var_267", dtype = "uint64", shape = (4, 13))#candidate|267|(4, 13)|var|uint64
bop_268 = relay.right_shift(const_266.astype('uint64'), relay.reshape(var_267.astype('uint64'), relay.shape_of(const_266))) # shape=(4, 13)
func_30_call = mod.get_global_var('func_30')
func_32_call = mutated_mod.get_global_var('func_32')
call_272 = relay.TupleGetItem(func_30_call(), 0)
call_273 = relay.TupleGetItem(func_32_call(), 0)
output = relay.Tuple([bop_268,call_272,])
output2 = relay.Tuple([bop_268,call_273,])
func_276 = relay.Function([var_267,], output)
mod['func_276'] = func_276
mod = relay.transform.InferType()(mod)
mutated_mod['func_276'] = func_276
mutated_mod = relay.transform.InferType()(mutated_mod)
var_277 = relay.var("var_277", dtype = "uint64", shape = (4, 13))#candidate|277|(4, 13)|var|uint64
func_276_call = mutated_mod.get_global_var('func_276')
call_278 = func_276_call(var_277)
output = call_278
func_279 = relay.Function([var_277], output)
mutated_mod['func_279'] = func_279
mutated_mod = relay.transform.InferType()(mutated_mod)
const_305 = relay.const([[[8.375135],[-9.362343],[9.486376],[-8.618067],[-7.895661],[7.754906],[-4.846614],[-5.294086],[4.251706],[-6.023833],[-5.161769],[1.150174],[-1.292676],[5.858308],[2.692690],[4.942513]],[[-6.346314],[-2.404580],[5.092964],[1.208477],[9.519033],[-3.733747],[8.980787],[2.147445],[5.333867],[-0.979852],[8.779101],[0.273854],[5.369423],[1.218988],[2.494919],[4.906954]],[[-5.232151],[2.443570],[-1.091513],[8.724349],[8.507182],[3.471289],[-9.272599],[1.705215],[5.120215],[6.205440],[-4.949917],[-9.564441],[2.371013],[-9.397639],[-6.703583],[2.990958]],[[1.332705],[4.394456],[7.436277],[-1.645657],[-3.419678],[2.722222],[-7.344128],[2.747375],[-2.472358],[-0.030584],[8.965390],[-5.937108],[-3.251061],[9.743224],[-2.003478],[3.862442]],[[0.056560],[-8.959678],[1.764231],[-0.402138],[-7.318991],[6.136729],[-3.794246],[-0.481494],[9.976272],[7.942474],[1.723177],[-0.270825],[1.245978],[3.592137],[-9.959608],[0.356831]],[[3.116560],[-4.786607],[-2.212573],[-0.738514],[-3.237209],[-6.727050],[-9.896503],[-2.622841],[3.171693],[-3.623288],[6.787224],[4.783662],[-0.380569],[3.846982],[5.937234],[7.410985]],[[-2.017463],[-1.935786],[-9.865988],[3.889205],[-5.673930],[8.559982],[9.430202],[-8.199809],[-9.819840],[8.060338],[7.384332],[-4.026291],[9.304636],[-0.092044],[-7.358422],[5.264711]],[[2.327173],[-8.244011],[8.290694],[3.035542],[1.052398],[-5.296651],[-0.944888],[5.405767],[-6.644045],[-5.839065],[9.920821],[2.425317],[-4.415971],[-1.436705],[3.886211],[7.781848]],[[3.604900],[-2.606839],[-1.903421],[-5.236144],[5.769167],[-0.938606],[0.973877],[-9.097680],[-1.957904],[-3.218505],[0.077591],[2.333051],[8.983040],[-7.264873],[0.183088],[-7.180343]],[[9.644630],[8.083129],[-5.467486],[4.938064],[0.105433],[1.402077],[-9.310471],[-3.779158],[-0.452958],[-1.167033],[-3.146460],[-3.404486],[3.377981],[1.160255],[-0.637739],[5.834341]],[[-9.213157],[0.155768],[-4.597263],[-2.584071],[-7.130358],[8.290878],[3.758095],[-4.332790],[-3.170700],[1.072316],[-4.851186],[-8.975330],[3.923429],[-0.830958],[5.772257],[1.537322]],[[4.681189],[-0.688819],[-8.034305],[2.845305],[-6.414430],[0.196411],[-8.350409],[-4.844648],[-7.709030],[5.395827],[8.048425],[4.862650],[9.988037],[-8.270286],[0.123007],[4.875426]],[[2.008740],[7.618778],[-9.211716],[-7.563930],[1.363566],[8.815989],[0.043545],[-3.626202],[3.972344],[-9.286734],[1.799696],[6.855172],[-1.495703],[-1.092346],[-5.940478],[-4.250876]],[[4.116389],[4.028106],[-2.385824],[0.061596],[2.881893],[8.816214],[-9.717190],[-8.278386],[5.162842],[-6.955987],[-0.471778],[-6.119380],[5.805406],[5.508212],[-6.224346],[0.507946]]], dtype = "float64")#candidate|305|(14, 16, 1)|const|float64
const_306 = relay.const([[[9.053922,2.212065,1.916883],[8.446215,-5.777604,-3.727317],[0.977693,-8.383862,-1.810643],[-3.452059,7.939857,6.993759],[2.332317,-6.931986,2.142466],[-1.150715,-1.145749,3.291057],[-9.862508,0.922200,9.110090],[-3.063457,-3.939778,-5.148260],[6.612133,-3.662520,-1.777179],[-1.784212,1.043340,-4.690071],[4.895856,9.110865,-5.831157],[5.464821,2.577914,4.200577],[-5.007198,5.928445,6.178880],[-4.482681,-2.738942,3.761867],[-2.534132,-3.789167,-2.562548],[4.111812,4.339446,4.563334]],[[4.497259,-3.512997,9.208559],[2.761171,-3.170644,-2.932849],[8.005724,-2.408468,-0.841424],[-8.283228,-9.098290,-7.826941],[-1.058842,-0.377530,-5.109298],[3.307096,-3.067932,-7.452025],[-1.130493,-9.679270,7.681529],[-0.021386,5.034770,-3.969337],[-7.382203,-1.969417,-5.011196],[-1.884330,-7.256400,-2.509759],[-4.753759,2.198299,-8.179580],[5.599806,7.929676,8.034119],[-4.863447,3.268473,-5.847333],[9.985459,2.848031,6.590572],[-9.091095,-0.301915,-8.231569],[2.352686,-5.894607,-6.790320]],[[8.209350,1.100920,4.249046],[7.574955,-4.076274,0.654891],[-1.825975,-0.505915,-3.332889],[2.020195,0.001062,-5.882448],[8.314854,-4.342032,-3.255401],[-5.871176,-1.569589,-5.079969],[-0.005865,-4.410736,4.662679],[4.475470,-5.359745,3.762012],[-8.718862,-6.330338,-0.394578],[8.909419,-8.622952,9.362622],[-0.094607,-8.028594,-4.673665],[-5.861457,-5.421182,4.307274],[-7.178477,-6.070236,-3.272622],[-4.730431,-4.407465,-8.544358],[9.122218,-5.509393,-2.778052],[-2.396261,1.301171,5.860679]],[[9.921268,-5.213572,-0.295734],[3.912277,3.554282,-8.730838],[8.973793,-9.663349,3.093838],[-0.208009,-2.386574,-2.861080],[9.751944,-8.988885,-6.602535],[-3.202924,7.265502,0.897969],[-2.544636,2.818143,-8.851385],[-8.134136,-4.504369,-5.230609],[2.205082,-6.673329,2.766794],[-1.450151,2.275733,-0.626212],[3.109366,7.174326,0.331362],[-4.972279,-9.476087,0.064798],[4.574575,-9.943873,-8.151034],[3.975747,-4.775530,-5.056435],[3.916216,-6.786177,0.749161],[-2.983809,7.751075,4.007305]],[[-9.299388,-1.842844,4.345966],[-3.126445,9.006635,-6.726204],[4.496256,-5.916408,2.465683],[6.669548,7.171319,7.064887],[-4.877005,7.848823,-8.746459],[0.287073,4.940414,8.549874],[3.263734,1.184062,-7.770115],[5.191040,-0.030732,4.304528],[-7.546885,-9.934312,-4.680611],[-0.181909,3.735334,-5.148772],[-2.001675,-0.185837,-3.832864],[0.911535,2.141559,-7.550251],[-5.043517,3.208890,5.399355],[9.620832,-1.563597,-2.973054],[2.301219,9.153276,-1.362050],[-9.278236,5.823539,-2.996387]],[[-2.552711,-2.431237,6.398777],[-3.785309,-8.156487,-2.805363],[-5.088145,2.784117,3.431966],[-1.316184,-7.129524,7.422346],[4.193578,7.374514,-1.871503],[-9.914150,4.258071,3.312621],[-2.725922,0.784081,4.601539],[-8.402720,4.682606,-3.421883],[1.461076,0.524063,7.184665],[8.640770,7.762966,4.776415],[-8.664547,-4.113848,-9.673253],[-3.915377,2.061368,5.872494],[8.348888,6.694129,0.540256],[1.049428,-7.344458,-1.724935],[6.604693,-8.018885,5.105582],[1.466804,-7.249256,4.721235]],[[4.985263,8.410210,1.459768],[2.250251,-2.415286,1.983550],[5.550370,5.432954,-2.662358],[1.534457,3.399315,-6.885789],[3.574718,-5.998478,7.469747],[1.327457,-9.634720,-9.914694],[9.190595,-3.553770,-9.471264],[-8.572206,5.895055,0.887536],[8.874579,9.120599,-9.349023],[2.569374,2.545434,4.627878],[-1.678185,4.385335,8.830885],[-5.683752,-4.824215,0.193715],[0.717229,-8.854701,0.404966],[-9.819376,-7.536584,2.223589],[8.477932,-7.500913,-8.133996],[7.276608,-2.387168,9.511459]],[[-2.912142,4.928573,2.385663],[3.128135,-5.188343,5.697478],[9.064068,-9.490674,1.933661],[8.338285,8.216347,-1.925063],[2.520035,-4.267068,-7.060680],[-2.779073,6.787752,2.042389],[-1.896128,0.942325,-8.655798],[-6.405112,-0.994721,3.681998],[-5.193503,-7.157883,9.643471],[5.376620,6.429162,-3.982930],[-4.192471,-4.328559,-4.004440],[-6.769661,6.573470,9.305298],[-5.641138,4.911236,5.633426],[-1.691472,6.371432,2.100604],[1.284128,-4.746712,-7.749590],[2.474088,9.275094,-1.846542]],[[8.135907,-2.382239,5.251833],[3.938599,9.351752,-8.317302],[6.890088,-9.736394,-2.738553],[2.796198,-0.458621,-8.051228],[1.301998,8.346436,7.490563],[-9.031531,-9.889515,3.519115],[0.366503,3.762037,-7.042807],[2.298644,8.631306,-5.771654],[8.180371,8.797298,1.770524],[-7.727298,4.302643,5.895212],[9.214959,-0.775397,-4.673977],[1.014800,-3.602412,-7.394307],[9.935454,-8.597068,9.770152],[-6.499568,8.444430,3.520800],[8.254677,3.853628,6.384307],[7.172071,-6.289192,6.196277]],[[-8.066555,-1.499372,4.510476],[4.712420,-3.588444,1.983693],[-8.340234,-4.697516,-4.266472],[7.657937,1.231974,-4.708496],[3.871214,-4.079921,8.801132],[4.827750,-2.786817,-9.722333],[-7.269701,-6.017984,-7.893946],[0.386419,9.628718,-5.738875],[2.090519,9.027123,-2.035307],[8.828391,-6.556489,8.290215],[9.774969,6.429404,4.259879],[-4.983236,4.963494,-0.329959],[-2.279458,-5.997422,-7.579961],[3.223834,-0.497894,-3.106450],[3.330498,7.118921,5.421749],[3.145384,3.951298,3.363517]],[[3.134732,-0.247478,-9.406688],[-2.148263,-3.789153,5.471866],[7.534040,-7.569284,9.434276],[-6.937721,8.754020,-4.913074],[-2.038284,1.913606,-0.636772],[-0.884515,-2.961204,-8.522269],[-6.900759,-9.430390,-3.911345],[7.545596,-7.769094,2.581103],[-2.142093,-8.345323,5.478216],[4.942250,3.100151,3.188493],[6.161775,3.784632,2.605669],[-0.234690,-3.222052,-0.165582],[-8.377864,-2.895083,-2.795084],[9.642233,6.972065,-7.793799],[-8.743895,-2.053431,-5.971487],[-6.152066,-4.887673,-2.388432]],[[4.020293,3.922018,8.715926],[-5.286709,4.722453,-2.336677],[4.846033,-9.901170,-3.524122],[4.507506,-5.727866,-1.168241],[-5.563695,-2.247666,-6.457177],[-5.540085,-9.944083,4.250600],[8.432558,6.068467,-5.896528],[-2.219944,7.430829,-8.017740],[6.604314,4.854008,6.007296],[4.457851,-2.410302,-9.422878],[-7.267128,-6.598063,-7.501956],[-4.931310,-8.737295,-8.343649],[1.533957,-0.494503,-6.664819],[-8.478197,-0.714817,9.593999],[6.643152,4.441845,6.629546],[-8.543780,-9.400966,-0.152735]],[[-2.398093,3.540683,-2.518362],[1.801911,-7.072513,5.840492],[-1.318462,1.836773,3.290505],[7.098306,3.157651,-6.415323],[-7.925665,-8.898362,1.274659],[-2.078094,2.412019,-1.565758],[7.745666,9.184313,4.201346],[-7.884110,3.140684,3.294684],[1.276907,9.415288,8.981978],[8.593509,1.164894,7.102786],[-3.218054,-7.622272,1.308458],[0.399501,6.131818,-4.996829],[1.085927,-6.901316,-2.421481],[8.626132,-2.925994,-9.640313],[-0.580496,-3.527155,3.575199],[2.568243,7.846913,5.105710]],[[-2.336069,1.101373,-3.686530],[4.722203,6.714559,-2.905771],[1.303272,5.136957,-5.935473],[2.529975,5.363613,-0.316230],[4.531286,-2.621608,-3.689750],[8.413131,-9.676331,-0.990508],[7.266648,2.654628,7.741725],[-2.098798,5.670296,5.179729],[-5.571739,6.173302,-3.063729],[-5.625932,9.497107,-7.088036],[8.715934,-5.374882,-8.668324],[-2.403386,-0.229168,-1.158863],[0.467370,-5.298355,-0.388802],[-9.362182,6.533947,-5.675374],[-2.763011,6.229575,6.802665],[2.983303,-5.453851,2.119053]]], dtype = "float64")#candidate|306|(14, 16, 3)|const|float64
bop_307 = relay.equal(const_305.astype('bool'), const_306.astype('bool')) # shape=(14, 16, 3)
uop_310 = relay.log2(const_305.astype('float64')) # shape=(14, 16, 1)
uop_312 = relay.atan(uop_310.astype('float32')) # shape=(14, 16, 1)
uop_318 = relay.rsqrt(uop_312.astype('float64')) # shape=(14, 16, 1)
bop_324 = relay.bitwise_and(uop_312.astype('uint16'), bop_307.astype('uint16')) # shape=(14, 16, 3)
uop_327 = relay.sin(bop_324.astype('float32')) # shape=(14, 16, 3)
output = relay.Tuple([uop_318,uop_327,])
output2 = relay.Tuple([uop_318,uop_327,])
func_331 = relay.Function([], output)
mod['func_331'] = func_331
mod = relay.transform.InferType()(mod)
mutated_mod['func_331'] = func_331
mutated_mod = relay.transform.InferType()(mutated_mod)
func_331_call = mutated_mod.get_global_var('func_331')
call_332 = func_331_call()
output = call_332
func_333 = relay.Function([], output)
mutated_mod['func_333'] = func_333
mutated_mod = relay.transform.InferType()(mutated_mod)
var_338 = relay.var("var_338", dtype = "float32", shape = (15,))#candidate|338|(15,)|var|float32
var_339 = relay.var("var_339", dtype = "float32", shape = (15,))#candidate|339|(15,)|var|float32
bop_340 = relay.floor_divide(var_338.astype('float32'), relay.reshape(var_339.astype('float32'), relay.shape_of(var_338))) # shape=(15,)
bop_349 = relay.less(var_339.astype('bool'), relay.reshape(bop_340.astype('bool'), relay.shape_of(var_339))) # shape=(15,)
output = bop_349
output2 = bop_349
func_359 = relay.Function([var_338,var_339,], output)
mod['func_359'] = func_359
mod = relay.transform.InferType()(mod)
mutated_mod['func_359'] = func_359
mutated_mod = relay.transform.InferType()(mutated_mod)
func_359_call = mutated_mod.get_global_var('func_359')
var_361 = relay.var("var_361", dtype = "float32", shape = (15,))#candidate|361|(15,)|var|float32
var_362 = relay.var("var_362", dtype = "float32", shape = (15,))#candidate|362|(15,)|var|float32
call_360 = func_359_call(var_361,var_362,)
output = call_360
func_363 = relay.Function([var_361,var_362,], output)
mutated_mod['func_363'] = func_363
mutated_mod = relay.transform.InferType()(mutated_mod)
var_383 = relay.var("var_383", dtype = "int16", shape = (12, 12))#candidate|383|(12, 12)|var|int16
var_384 = relay.var("var_384", dtype = "int16", shape = (12, 12))#candidate|384|(12, 12)|var|int16
bop_385 = relay.bitwise_and(var_383.astype('int16'), relay.reshape(var_384.astype('int16'), relay.shape_of(var_383))) # shape=(12, 12)
uop_388 = relay.asin(var_384.astype('float32')) # shape=(12, 12)
func_30_call = mod.get_global_var('func_30')
func_32_call = mutated_mod.get_global_var('func_32')
call_390 = relay.TupleGetItem(func_30_call(), 0)
call_391 = relay.TupleGetItem(func_32_call(), 0)
output = relay.Tuple([bop_385,uop_388,call_390,])
output2 = relay.Tuple([bop_385,uop_388,call_391,])
func_392 = relay.Function([var_383,var_384,], output)
mod['func_392'] = func_392
mod = relay.transform.InferType()(mod)
mutated_mod['func_392'] = func_392
mutated_mod = relay.transform.InferType()(mutated_mod)
func_392_call = mutated_mod.get_global_var('func_392')
var_394 = relay.var("var_394", dtype = "int16", shape = (12, 12))#candidate|394|(12, 12)|var|int16
var_395 = relay.var("var_395", dtype = "int16", shape = (12, 12))#candidate|395|(12, 12)|var|int16
call_393 = func_392_call(var_394,var_395,)
output = call_393
func_396 = relay.Function([var_394,var_395,], output)
mutated_mod['func_396'] = func_396
mutated_mod = relay.transform.InferType()(mutated_mod)
func_331_call = mod.get_global_var('func_331')
func_333_call = mutated_mod.get_global_var('func_333')
call_417 = relay.TupleGetItem(func_331_call(), 1)
call_418 = relay.TupleGetItem(func_333_call(), 1)
uop_427 = relay.sqrt(call_417.astype('float32')) # shape=(14, 16, 3)
uop_429 = relay.sqrt(call_418.astype('float32')) # shape=(14, 16, 3)
bop_433 = relay.left_shift(call_417.astype('uint32'), relay.reshape(uop_427.astype('uint32'), relay.shape_of(call_417))) # shape=(14, 16, 3)
bop_436 = relay.left_shift(call_418.astype('uint32'), relay.reshape(uop_429.astype('uint32'), relay.shape_of(call_418))) # shape=(14, 16, 3)
output = bop_433
output2 = bop_436
func_437 = relay.Function([], output)
mod['func_437'] = func_437
mod = relay.transform.InferType()(mod)
output = func_437()
func_438 = relay.Function([], output)
mutated_mod['func_438'] = func_438
mutated_mod = relay.transform.InferType()(mutated_mod)
var_439 = relay.var("var_439", dtype = "float32", shape = (15, 3))#candidate|439|(15, 3)|var|float32
uop_440 = relay.erf(var_439.astype('float32')) # shape=(15, 3)
var_442 = relay.var("var_442", dtype = "float32", shape = (15, 3))#candidate|442|(15, 3)|var|float32
bop_443 = relay.greater_equal(uop_440.astype('bool'), relay.reshape(var_442.astype('bool'), relay.shape_of(uop_440))) # shape=(15, 3)
const_450 = relay.const([[3.502732,3.432737,-3.150243],[-0.411653,2.333472,-9.351664],[-6.041748,3.141652,-4.271830],[6.838066,6.379364,9.636363],[-5.187174,5.374039,-4.380913],[6.021830,-6.026336,-2.623606],[-0.259932,-8.161139,5.563682],[8.886222,-2.969369,1.655252],[9.324613,-3.592354,-9.537079],[-0.211829,-5.202807,-1.425435],[-8.321052,-3.872433,-8.201008],[-7.743351,1.234969,0.191729],[9.628958,-9.285586,0.019716],[1.192541,-5.202539,4.981542],[0.640857,0.403235,-3.413734]], dtype = "float32")#candidate|450|(15, 3)|const|float32
bop_451 = relay.logical_or(uop_440.astype('bool'), relay.reshape(const_450.astype('bool'), relay.shape_of(uop_440))) # shape=(15, 3)
bop_458 = relay.bitwise_and(bop_443.astype('uint8'), relay.reshape(uop_440.astype('uint8'), relay.shape_of(bop_443))) # shape=(15, 3)
output = relay.Tuple([bop_451,bop_458,])
output2 = relay.Tuple([bop_451,bop_458,])
func_462 = relay.Function([var_439,var_442,], output)
mod['func_462'] = func_462
mod = relay.transform.InferType()(mod)
var_463 = relay.var("var_463", dtype = "float32", shape = (15, 3))#candidate|463|(15, 3)|var|float32
var_464 = relay.var("var_464", dtype = "float32", shape = (15, 3))#candidate|464|(15, 3)|var|float32
output = func_462(var_463,var_464,)
func_465 = relay.Function([var_463,var_464,], output)
mutated_mod['func_465'] = func_465
mutated_mod = relay.transform.InferType()(mutated_mod)
var_522 = relay.var("var_522", dtype = "float64", shape = (12, 1, 8))#candidate|522|(12, 1, 8)|var|float64
uop_523 = relay.log10(var_522.astype('float64')) # shape=(12, 1, 8)
var_527 = relay.var("var_527", dtype = "float64", shape = (12, 15, 8))#candidate|527|(12, 15, 8)|var|float64
bop_528 = relay.mod(uop_523.astype('float32'), var_527.astype('float32')) # shape=(12, 15, 8)
uop_542 = relay.log2(uop_523.astype('float32')) # shape=(12, 1, 8)
bop_544 = relay.right_shift(uop_542.astype('int8'), bop_528.astype('int8')) # shape=(12, 15, 8)
uop_550 = relay.exp(uop_523.astype('float64')) # shape=(12, 1, 8)
output = relay.Tuple([bop_544,uop_550,])
output2 = relay.Tuple([bop_544,uop_550,])
func_552 = relay.Function([var_522,var_527,], output)
mod['func_552'] = func_552
mod = relay.transform.InferType()(mod)
var_553 = relay.var("var_553", dtype = "float64", shape = (12, 1, 8))#candidate|553|(12, 1, 8)|var|float64
var_554 = relay.var("var_554", dtype = "float64", shape = (12, 15, 8))#candidate|554|(12, 15, 8)|var|float64
output = func_552(var_553,var_554,)
func_555 = relay.Function([var_553,var_554,], output)
mutated_mod['func_555'] = func_555
mutated_mod = relay.transform.InferType()(mutated_mod)
func_331_call = mod.get_global_var('func_331')
func_333_call = mutated_mod.get_global_var('func_333')
call_565 = relay.TupleGetItem(func_331_call(), 1)
call_566 = relay.TupleGetItem(func_333_call(), 1)
var_569 = relay.var("var_569", dtype = "float32", shape = (14, 16, 3))#candidate|569|(14, 16, 3)|var|float32
bop_570 = relay.logical_and(call_565.astype('bool'), relay.reshape(var_569.astype('bool'), relay.shape_of(call_565))) # shape=(14, 16, 3)
bop_573 = relay.logical_and(call_566.astype('bool'), relay.reshape(var_569.astype('bool'), relay.shape_of(call_566))) # shape=(14, 16, 3)
uop_575 = relay.sigmoid(bop_570.astype('float64')) # shape=(14, 16, 3)
uop_577 = relay.sigmoid(bop_573.astype('float64')) # shape=(14, 16, 3)
func_437_call = mod.get_global_var('func_437')
func_438_call = mutated_mod.get_global_var('func_438')
call_584 = func_437_call()
call_585 = func_437_call()
const_587 = relay.const([[[5.564740,-7.918367,-4.944650],[-5.404877,-5.520768,-5.536123],[1.526701,-5.550844,-0.197716],[-4.811086,1.948455,6.319688],[1.610033,-5.670406,7.943234],[1.003761,-0.527039,-9.219046],[-8.303563,-1.242180,-7.789053],[5.070926,7.815499,-0.890033],[-3.241586,4.571727,-8.304204],[7.181330,-1.883119,9.027349],[7.380494,-3.016328,-8.027027],[6.157744,-9.620469,2.916050],[-9.361902,-1.287553,9.394330],[6.165128,3.351267,8.706027],[7.473259,7.036052,6.786033],[-9.963959,2.539868,-3.378943]],[[2.092727,0.835639,-6.021513],[4.535735,3.272220,-2.511431],[-1.261988,-0.495148,7.285525],[-4.866607,-8.908760,-2.617381],[-4.976393,8.489752,-0.967136],[3.558736,9.749427,2.360146],[-0.614378,-9.511445,-8.262797],[-2.817855,-3.359340,-1.808903],[-6.060550,7.010478,-8.323030],[-9.582608,-6.682247,9.288035],[-6.151987,-1.314862,3.127575],[0.446309,-6.992452,3.953333],[-8.734711,-3.113529,4.330512],[-0.764035,4.555605,-4.356343],[-2.525226,-5.632584,-7.882280],[0.634490,-2.433364,-4.656801]],[[7.155798,9.016635,3.567563],[-1.602831,-6.092140,3.185072],[8.689684,-6.770430,5.570649],[-5.516039,2.061686,-3.146728],[-2.243322,-2.333780,4.136508],[-7.385705,-0.905274,3.853771],[0.688969,-1.029986,-4.742011],[9.960960,5.365250,-7.832735],[-2.597524,-5.556556,4.878923],[-6.617677,-9.265608,-3.246177],[2.701312,-4.535706,5.369203],[-6.996246,9.584326,-5.095512],[-6.922890,2.399426,0.265765],[-0.836465,7.927611,-2.062234],[9.969833,-6.309945,9.459148],[1.630476,-7.941493,5.935453]],[[7.667171,-3.985519,-5.280931],[-8.585015,-3.877401,-0.762758],[3.645615,2.283842,-0.898705],[1.263496,-6.464312,8.738934],[0.210802,9.085139,9.267682],[8.768589,-2.270413,7.996158],[-1.973965,4.862774,-7.355631],[0.492000,-6.425299,-4.263304],[-4.398666,-4.472316,8.196258],[-5.279769,-5.091297,-7.357955],[-9.918491,5.323535,2.982948],[6.127548,-1.201085,-6.645895],[9.497337,1.305393,3.905441],[-5.514808,0.107264,-9.754857],[-1.209570,6.670175,-0.601668],[-5.750901,8.672690,7.752460]],[[8.000856,6.845951,6.571943],[-3.088208,6.635627,-9.638048],[7.795391,-7.535590,3.650018],[0.914390,6.844706,2.569207],[2.732390,0.465375,1.506140],[8.921107,5.874135,-2.005085],[7.235159,1.433972,-3.783413],[4.202339,-4.817069,6.966401],[-8.630519,-7.835773,5.876256],[-1.212595,6.374011,-2.070000],[-8.961868,9.161132,-3.402297],[3.557556,-3.814784,-7.376422],[-6.064991,-5.168863,5.457135],[0.573513,1.350278,1.951777],[5.148365,1.767562,7.205110],[5.546694,9.302198,-0.655297]],[[-1.189178,7.190372,-7.252870],[-3.588573,3.035742,-7.110220],[-7.772249,4.124579,9.446794],[-8.670804,-8.519481,0.796383],[3.531705,8.972525,-8.194990],[-8.854498,8.931407,0.103586],[5.973905,8.901741,1.238769],[2.544748,9.105550,1.050141],[-4.384619,1.628635,6.960779],[-2.656854,8.716367,1.502342],[5.886365,-3.884618,-2.154540],[2.780193,3.354428,-8.841560],[-8.099893,-0.911254,-9.780470],[-0.708412,-8.872295,6.426141],[-3.880443,-5.724104,-2.297598],[9.419319,-0.845326,-1.401386]],[[-9.872676,-6.318212,-0.270967],[-5.445823,2.353287,-6.545794],[-9.686584,-7.449828,-6.182484],[-4.246422,1.207178,-3.109967],[-3.283470,-8.212663,-9.926102],[0.427625,-5.889829,-4.513998],[8.540451,6.342116,-8.671581],[-9.049052,-2.700589,7.287011],[0.518124,1.454300,-6.417522],[-2.417869,-3.450292,5.794677],[8.202594,2.649628,4.954022],[5.729462,-0.515042,3.344347],[-6.530587,8.178743,-7.857209],[-3.605854,-7.895686,-0.289730],[7.677441,2.251048,2.014691],[-9.764880,-4.731065,-4.274659]],[[-8.857510,-6.389064,-6.430317],[5.010288,7.849568,5.856238],[2.553177,3.104673,-5.224829],[-3.153283,-5.481401,9.136215],[7.429756,9.800802,4.835181],[5.088845,7.993992,-5.425776],[9.466540,-7.661035,-3.356479],[-1.130312,7.304743,8.852077],[1.542417,-2.985095,5.816737],[-2.595763,5.425627,-9.834775],[9.254736,-2.890558,9.284562],[6.299733,-8.328134,-9.032548],[9.499616,-2.089242,-1.324859],[-5.741941,-8.459040,-8.230285],[-5.089100,-3.406083,-9.459012],[-0.766565,-0.659885,-1.792811]],[[2.029405,-6.510015,6.032882],[-6.188151,0.612061,-3.599349],[-4.653714,1.055766,0.003514],[0.961938,-9.490306,6.160005],[-3.149559,2.504931,8.425624],[4.793155,7.600991,-1.745105],[-6.986934,8.392206,-0.430968],[9.323741,6.168568,3.862059],[-3.108728,-8.995243,-0.759959],[5.081336,-8.660127,7.772074],[-0.584874,-1.362035,-9.950778],[5.532942,-1.938118,-0.351769],[-1.175297,6.607625,-0.641461],[-1.236146,8.321029,-9.052244],[-8.936494,5.641898,-0.947399],[-9.019043,9.337461,-4.060969]],[[-1.404877,-6.076358,-8.227418],[4.957078,-4.648005,-6.249704],[4.864650,-9.304095,-0.683685],[-1.692141,-0.471910,3.313102],[-8.202857,-2.371883,-8.158731],[2.602216,-5.172283,3.491810],[-7.023966,0.501615,-9.043275],[1.958051,-6.262810,-6.547028],[-5.880036,9.741228,-2.169447],[0.194673,4.997842,-0.471583],[-4.970360,-7.494893,6.813784],[-5.709724,-5.630368,3.522009],[1.243646,-3.199800,-5.222089],[-6.783247,7.640415,6.243833],[-4.200895,-3.752226,-3.264470],[-1.929367,-9.057294,8.193210]],[[-8.858513,0.146119,2.610360],[2.895490,2.240071,-2.463336],[4.741259,6.109663,5.739021],[-8.283069,3.637422,6.433757],[-4.321421,3.207688,-1.569940],[-1.265275,-6.396394,2.120093],[-6.777820,-4.419866,-1.804751],[9.119692,-1.493875,-9.051546],[-2.444382,5.617720,3.956300],[0.927896,-2.132224,-2.417962],[-7.331861,-1.039879,-6.792092],[-9.785671,-9.294300,-0.574523],[-2.625743,-9.553290,-3.388119],[-3.217654,-4.824836,0.384876],[-5.148568,4.862293,5.622854],[0.008936,-7.596759,-5.413744]],[[3.477572,-2.618953,0.709616],[-7.002601,-7.638980,-5.263577],[4.708551,3.491949,7.738640],[3.509061,-4.455753,-8.038958],[-9.315882,4.828660,6.861806],[2.499490,-4.942022,1.192800],[-2.904229,9.160257,-0.866563],[-7.629278,-8.010435,6.157090],[-8.204368,4.681944,6.747519],[-9.652095,1.675601,7.582483],[7.439969,6.341541,-1.094040],[3.116561,-1.225635,1.861081],[8.939936,-7.931441,-9.615149],[1.254922,-5.180277,3.817261],[-2.875070,9.290458,4.734966],[0.683377,7.261653,-5.907839]],[[1.384294,7.149104,1.892418],[-7.577119,-8.740530,-1.482214],[7.484956,6.421681,5.817410],[7.740449,-2.388279,0.798572],[6.808379,-2.662937,-3.160691],[-9.445620,-2.700826,1.095732],[0.709271,-3.130572,4.266556],[-5.448706,-2.237670,-4.909411],[-4.458733,-6.881460,2.169369],[-4.701189,-6.091706,3.705973],[7.702328,-9.761883,9.453935],[1.144070,8.386632,-3.065496],[5.239015,2.666471,-0.416262],[4.006277,-2.839262,7.060732],[8.973832,-6.583738,-0.824034],[-0.755437,-3.957731,-3.047578]],[[1.453569,-0.984595,5.934300],[4.929437,3.816951,0.569872],[-4.694973,-7.541271,-1.068317],[-0.371447,7.398208,8.578260],[8.046181,2.772666,-9.442287],[9.976019,-2.670695,-7.497680],[0.966269,-0.792132,2.318754],[-3.744830,-7.569118,-9.059643],[3.383140,-5.648184,7.089540],[-8.444998,-7.260470,-0.528835],[6.246387,-0.236921,6.121865],[-2.852748,-9.740157,2.291327],[-0.975505,3.521161,-1.269398],[4.510374,9.418445,-2.909970],[2.509632,5.453156,5.377151],[-2.675455,0.919784,-3.560645]]], dtype = "float64")#candidate|587|(14, 16, 3)|const|float64
bop_588 = relay.mod(uop_575.astype('float64'), relay.reshape(const_587.astype('float64'), relay.shape_of(uop_575))) # shape=(14, 16, 3)
bop_591 = relay.mod(uop_577.astype('float64'), relay.reshape(const_587.astype('float64'), relay.shape_of(uop_577))) # shape=(14, 16, 3)
output = relay.Tuple([call_584,bop_588,])
output2 = relay.Tuple([call_585,bop_591,])
func_598 = relay.Function([var_569,], output)
mod['func_598'] = func_598
mod = relay.transform.InferType()(mod)
mutated_mod['func_598'] = func_598
mutated_mod = relay.transform.InferType()(mutated_mod)
var_599 = relay.var("var_599", dtype = "float32", shape = (14, 16, 3))#candidate|599|(14, 16, 3)|var|float32
func_598_call = mutated_mod.get_global_var('func_598')
call_600 = func_598_call(var_599)
output = call_600
func_601 = relay.Function([var_599], output)
mutated_mod['func_601'] = func_601
mutated_mod = relay.transform.InferType()(mutated_mod)
var_606 = relay.var("var_606", dtype = "uint32", shape = ())#candidate|606|()|var|uint32
var_607 = relay.var("var_607", dtype = "uint32", shape = (15, 7, 16))#candidate|607|(15, 7, 16)|var|uint32
bop_608 = relay.bitwise_xor(var_606.astype('uint32'), var_607.astype('uint32')) # shape=(15, 7, 16)
bop_614 = relay.multiply(bop_608.astype('float32'), relay.reshape(var_607.astype('float32'), relay.shape_of(bop_608))) # shape=(15, 7, 16)
output = bop_614
output2 = bop_614
func_619 = relay.Function([var_606,var_607,], output)
mod['func_619'] = func_619
mod = relay.transform.InferType()(mod)
mutated_mod['func_619'] = func_619
mutated_mod = relay.transform.InferType()(mutated_mod)
func_619_call = mutated_mod.get_global_var('func_619')
var_621 = relay.var("var_621", dtype = "uint32", shape = ())#candidate|621|()|var|uint32
var_622 = relay.var("var_622", dtype = "uint32", shape = (15, 7, 16))#candidate|622|(15, 7, 16)|var|uint32
call_620 = func_619_call(var_621,var_622,)
output = call_620
func_623 = relay.Function([var_621,var_622,], output)
mutated_mod['func_623'] = func_623
mutated_mod = relay.transform.InferType()(mutated_mod)
const_654 = relay.const([[8,-7,3,-5,9,-7],[-6,-6,3,5,-1,5],[10,2,8,5,10,-10],[-5,-8,-1,-9,7,7],[9,7,-1,-1,2,-2],[3,-6,-1,-6,3,3],[10,-1,7,9,2,-7],[-8,-3,4,-3,-5,10],[9,-4,-1,-8,-9,7],[9,-2,-2,1,1,-4],[-9,2,8,-2,7,1],[1,8,-8,-5,-3,-5],[10,-6,-2,-6,7,-9],[-3,6,-4,-9,-4,-6]], dtype = "uint64")#candidate|654|(14, 6)|const|uint64
var_655 = relay.var("var_655", dtype = "uint64", shape = (14, 6))#candidate|655|(14, 6)|var|uint64
bop_656 = relay.add(const_654.astype('uint64'), relay.reshape(var_655.astype('uint64'), relay.shape_of(const_654))) # shape=(14, 6)
bop_661 = relay.logical_xor(var_655.astype('int64'), relay.reshape(bop_656.astype('int64'), relay.shape_of(var_655))) # shape=(14, 6)
output = bop_661
output2 = bop_661
func_671 = relay.Function([var_655,], output)
mod['func_671'] = func_671
mod = relay.transform.InferType()(mod)
mutated_mod['func_671'] = func_671
mutated_mod = relay.transform.InferType()(mutated_mod)
var_672 = relay.var("var_672", dtype = "uint64", shape = (14, 6))#candidate|672|(14, 6)|var|uint64
func_671_call = mutated_mod.get_global_var('func_671')
call_673 = func_671_call(var_672)
output = call_673
func_674 = relay.Function([var_672], output)
mutated_mod['func_674'] = func_674
mutated_mod = relay.transform.InferType()(mutated_mod)
func_437_call = mod.get_global_var('func_437')
func_438_call = mutated_mod.get_global_var('func_438')
call_679 = func_437_call()
call_680 = func_437_call()
uop_719 = relay.asinh(call_679.astype('float64')) # shape=(14, 16, 3)
uop_721 = relay.asinh(call_680.astype('float64')) # shape=(14, 16, 3)
bop_723 = relay.logical_xor(call_679.astype('int8'), relay.reshape(uop_719.astype('int8'), relay.shape_of(call_679))) # shape=(14, 16, 3)
bop_726 = relay.logical_xor(call_680.astype('int8'), relay.reshape(uop_721.astype('int8'), relay.shape_of(call_680))) # shape=(14, 16, 3)
var_727 = relay.var("var_727", dtype = "int8", shape = (14, 16, 3))#candidate|727|(14, 16, 3)|var|int8
bop_728 = relay.subtract(bop_723.astype('uint16'), relay.reshape(var_727.astype('uint16'), relay.shape_of(bop_723))) # shape=(14, 16, 3)
bop_731 = relay.subtract(bop_726.astype('uint16'), relay.reshape(var_727.astype('uint16'), relay.shape_of(bop_726))) # shape=(14, 16, 3)
func_30_call = mod.get_global_var('func_30')
func_32_call = mutated_mod.get_global_var('func_32')
call_735 = relay.TupleGetItem(func_30_call(), 1)
call_736 = relay.TupleGetItem(func_32_call(), 1)
var_758 = relay.var("var_758", dtype = "int8", shape = (14, 16, 3))#candidate|758|(14, 16, 3)|var|int8
bop_759 = relay.floor_mod(bop_723.astype('float32'), relay.reshape(var_758.astype('float32'), relay.shape_of(bop_723))) # shape=(14, 16, 3)
bop_762 = relay.floor_mod(bop_726.astype('float32'), relay.reshape(var_758.astype('float32'), relay.shape_of(bop_726))) # shape=(14, 16, 3)
uop_771 = relay.acos(bop_728.astype('float32')) # shape=(14, 16, 3)
uop_773 = relay.acos(bop_731.astype('float32')) # shape=(14, 16, 3)
uop_774 = relay.sinh(uop_771.astype('float64')) # shape=(14, 16, 3)
uop_776 = relay.sinh(uop_773.astype('float64')) # shape=(14, 16, 3)
bop_778 = relay.greater_equal(uop_774.astype('bool'), relay.reshape(uop_719.astype('bool'), relay.shape_of(uop_774))) # shape=(14, 16, 3)
bop_781 = relay.greater_equal(uop_776.astype('bool'), relay.reshape(uop_721.astype('bool'), relay.shape_of(uop_776))) # shape=(14, 16, 3)
var_782 = relay.var("var_782", dtype = "float64", shape = (14, 16, 3))#candidate|782|(14, 16, 3)|var|float64
bop_783 = relay.greater(uop_719.astype('bool'), relay.reshape(var_782.astype('bool'), relay.shape_of(uop_719))) # shape=(14, 16, 3)
bop_786 = relay.greater(uop_721.astype('bool'), relay.reshape(var_782.astype('bool'), relay.shape_of(uop_721))) # shape=(14, 16, 3)
const_792 = relay.const([[[True,False,True],[False,False,True],[False,False,True],[False,False,False],[False,True,False],[False,True,True],[False,False,False],[False,False,False],[False,True,True],[True,False,True],[True,False,True],[False,False,True],[False,False,True],[True,False,False],[True,False,True],[True,True,True]],[[True,True,True],[True,True,True],[False,True,False],[True,False,True],[False,True,True],[True,False,True],[False,False,True],[False,True,True],[False,False,True],[True,True,False],[False,False,False],[False,False,True],[True,False,True],[False,True,True],[True,True,True],[False,False,True]],[[True,False,True],[False,False,False],[True,False,False],[False,False,True],[True,False,False],[True,False,False],[False,False,False],[True,False,True],[True,True,False],[False,True,False],[True,False,False],[False,False,True],[False,True,True],[False,True,True],[True,False,False],[True,True,False]],[[True,False,False],[True,True,False],[False,False,True],[False,False,False],[False,True,False],[True,True,False],[False,True,True],[True,True,True],[True,True,True],[True,False,True],[True,False,True],[False,True,False],[False,False,True],[False,False,True],[False,True,True],[True,False,False]],[[True,False,False],[True,True,True],[False,False,False],[True,True,True],[False,True,True],[True,True,False],[False,True,False],[True,True,True],[False,False,False],[True,True,False],[False,False,False],[False,True,True],[True,True,False],[False,True,True],[True,True,False],[False,True,True]],[[False,True,True],[True,False,False],[False,False,False],[False,False,True],[False,False,False],[False,False,True],[True,True,True],[True,True,False],[True,False,True],[True,False,False],[True,True,True],[False,False,True],[False,False,False],[True,False,False],[False,False,False],[False,False,False]],[[False,True,True],[True,True,True],[True,False,True],[False,True,False],[True,False,True],[False,False,True],[False,True,True],[False,False,True],[False,False,True],[False,True,True],[False,True,False],[True,False,True],[False,True,True],[False,True,True],[False,False,True],[True,True,False]],[[False,True,True],[True,True,True],[False,True,True],[True,True,False],[False,True,True],[False,False,True],[False,True,False],[True,True,False],[False,True,False],[False,False,True],[False,False,False],[True,True,True],[False,True,False],[True,False,True],[False,False,False],[True,False,True]],[[True,False,False],[True,False,True],[True,False,False],[False,False,False],[True,False,False],[False,True,True],[True,True,False],[False,True,False],[True,True,False],[False,False,False],[True,True,True],[True,True,True],[False,False,True],[False,False,False],[False,False,False],[False,False,False]],[[True,True,True],[True,True,False],[True,True,True],[True,True,False],[True,False,True],[False,True,False],[True,True,True],[True,True,True],[True,True,True],[True,True,True],[True,False,True],[True,True,False],[True,False,True],[True,True,False],[True,False,False],[False,True,True]],[[True,False,False],[False,True,True],[True,False,False],[True,False,True],[False,True,True],[True,False,False],[False,False,False],[True,True,True],[False,False,False],[False,False,True],[False,True,True],[False,True,True],[False,True,True],[False,False,True],[False,False,True],[True,False,True]],[[False,False,True],[False,True,False],[False,True,False],[False,False,True],[True,False,False],[False,False,False],[True,False,True],[True,True,True],[False,True,True],[True,False,True],[True,False,True],[False,True,True],[True,True,False],[True,True,False],[False,False,False],[True,False,True]],[[True,False,True],[False,True,False],[True,True,True],[False,True,False],[False,False,False],[True,False,True],[False,True,False],[True,True,True],[True,True,True],[False,False,False],[True,True,False],[False,True,True],[True,False,False],[False,True,True],[False,True,True],[True,False,False]],[[False,True,True],[True,False,False],[False,True,False],[False,True,False],[False,False,False],[False,True,True],[True,False,False],[True,False,True],[True,True,False],[False,False,False],[False,False,True],[False,True,True],[False,False,True],[False,False,False],[True,False,True],[True,False,False]]], dtype = "bool")#candidate|792|(14, 16, 3)|const|bool
bop_793 = relay.less_equal(bop_778.astype('bool'), relay.reshape(const_792.astype('bool'), relay.shape_of(bop_778))) # shape=(14, 16, 3)
bop_796 = relay.less_equal(bop_781.astype('bool'), relay.reshape(const_792.astype('bool'), relay.shape_of(bop_781))) # shape=(14, 16, 3)
uop_798 = relay.tan(bop_759.astype('float32')) # shape=(14, 16, 3)
uop_800 = relay.tan(bop_762.astype('float32')) # shape=(14, 16, 3)
func_30_call = mod.get_global_var('func_30')
func_32_call = mutated_mod.get_global_var('func_32')
call_801 = relay.TupleGetItem(func_30_call(), 0)
call_802 = relay.TupleGetItem(func_32_call(), 0)
uop_803 = relay.sigmoid(bop_793.astype('float64')) # shape=(14, 16, 3)
uop_805 = relay.sigmoid(bop_796.astype('float64')) # shape=(14, 16, 3)
bop_807 = relay.power(uop_803.astype('float64'), relay.reshape(call_679.astype('float64'), relay.shape_of(uop_803))) # shape=(14, 16, 3)
bop_810 = relay.power(uop_805.astype('float64'), relay.reshape(call_680.astype('float64'), relay.shape_of(uop_805))) # shape=(14, 16, 3)
bop_811 = relay.not_equal(bop_807.astype('bool'), relay.reshape(uop_771.astype('bool'), relay.shape_of(bop_807))) # shape=(14, 16, 3)
bop_814 = relay.not_equal(bop_810.astype('bool'), relay.reshape(uop_773.astype('bool'), relay.shape_of(bop_810))) # shape=(14, 16, 3)
uop_818 = relay.atan(uop_803.astype('float64')) # shape=(14, 16, 3)
uop_820 = relay.atan(uop_805.astype('float64')) # shape=(14, 16, 3)
func_62_call = mod.get_global_var('func_62')
func_65_call = mutated_mod.get_global_var('func_65')
const_823 = relay.const([[False,False,True,False],[False,False,False,True],[True,True,False,False],[False,True,True,False],[False,True,False,False],[False,True,False,True],[True,False,False,False],[False,True,True,True],[True,False,True,True],[True,True,False,False],[True,False,True,True],[False,False,False,False],[True,False,False,True],[True,False,True,False],[True,True,True,True],[False,False,False,True],[True,False,False,False],[True,True,False,False]], dtype = "bool")#candidate|823|(18, 4)|const|bool
call_822 = relay.TupleGetItem(func_62_call(relay.reshape(const_823.astype('bool'), [12, 6]), relay.reshape(const_823.astype('bool'), [12, 6]), ), 0)
call_824 = relay.TupleGetItem(func_65_call(relay.reshape(const_823.astype('bool'), [12, 6]), relay.reshape(const_823.astype('bool'), [12, 6]), ), 0)
output = relay.Tuple([call_735,bop_783,uop_798,call_801,bop_811,uop_818,call_822,const_823,])
output2 = relay.Tuple([call_736,bop_786,uop_800,call_802,bop_814,uop_820,call_824,const_823,])
func_825 = relay.Function([var_727,var_758,var_782,], output)
mod['func_825'] = func_825
mod = relay.transform.InferType()(mod)
mutated_mod['func_825'] = func_825
mutated_mod = relay.transform.InferType()(mutated_mod)
func_825_call = mutated_mod.get_global_var('func_825')
var_827 = relay.var("var_827", dtype = "int8", shape = (14, 16, 3))#candidate|827|(14, 16, 3)|var|int8
var_828 = relay.var("var_828", dtype = "int8", shape = (14, 16, 3))#candidate|828|(14, 16, 3)|var|int8
var_829 = relay.var("var_829", dtype = "float64", shape = (14, 16, 3))#candidate|829|(14, 16, 3)|var|float64
call_826 = func_825_call(var_827,var_828,var_829,)
output = call_826
func_830 = relay.Function([var_827,var_828,var_829,], output)
mutated_mod['func_830'] = func_830
mutated_mod = relay.transform.InferType()(mutated_mod)
var_834 = relay.var("var_834", dtype = "float64", shape = (15, 15, 7))#candidate|834|(15, 15, 7)|var|float64
uop_835 = relay.atanh(var_834.astype('float64')) # shape=(15, 15, 7)
func_462_call = mod.get_global_var('func_462')
func_465_call = mutated_mod.get_global_var('func_465')
const_838 = relay.const([8.999846,-4.161048,-9.031411,-1.115930,-3.845690,-1.830193,-1.325334,9.806337,8.378788,-2.901004,-3.756638,7.946229,-7.475771,-0.449252,-9.309198,3.799061,-7.106142,-9.196801,-4.505020,-0.845560,6.035869,-6.927743,-2.283579,8.359901,3.660838,6.240788,-9.358233,1.385363,-3.347949,6.002236,4.505336,-0.410171,-7.824674,-5.995546,3.769402,7.177332,4.914946,-5.364725,3.954741,-7.220254,-2.787851,-0.554441,-2.697033,7.755078,4.987349], dtype = "float32")#candidate|838|(45,)|const|float32
call_837 = relay.TupleGetItem(func_462_call(relay.reshape(const_838.astype('float32'), [15, 3]), relay.reshape(const_838.astype('float32'), [15, 3]), ), 1)
call_839 = relay.TupleGetItem(func_465_call(relay.reshape(const_838.astype('float32'), [15, 3]), relay.reshape(const_838.astype('float32'), [15, 3]), ), 1)
uop_841 = relay.atan(uop_835.astype('float64')) # shape=(15, 15, 7)
func_259_call = mod.get_global_var('func_259')
func_264_call = mutated_mod.get_global_var('func_264')
const_844 = relay.const([-4,-7,-9,-10,-7,1,4,-10,1,7,10,-7,2,-9,5,-5,5,7,9,4,-2,6,2,-10,-3,-2,7,-4,-1,-3,6,-7,-10,-4,4,6,2,-5,9,-9,2,-3,-3,7,3,2,8,2,-6,4,4,-7,4,-3,7,3,-3,10,7,-2,5,-2,3,-10,2,-10,-6,5,1,2,9,-1,6,-10,7,5,-8,-7,-1,-4,3,-9,3,8,3,-5,-5,-5,-6,-4,-1,-8,-6,-1,-4,-1,-1,5,-6,9,2,10,-8,8,3,10,-9,-4,7,-3,2,-7,4,-4,-4,-8,7,-4,4,-3,-2,-1,-3,-7,10,-1,-1,5,10,-6,4,-1,-1,-6,-4,1,3,-10,-5,-7,6,9,-6,-3,-4,1,2,-9,-6,5,5,10,8,-4,-5,-9,-9,-10,-3,-1,1,-6,-3,-5,9,3,-6,10,10,-8,-5,8,7,8,1,8,-1,-5,9,-5,2,10,10,-1,-6,-7,-5,-4,3,4,-1,-5,7,7,2,4,-2,1,8,2,10,-4,4,-9,2,-10,6,-5,7,-10,-4,2,-1,-7,6,3,-1,-3,9,-4,5,-3,-9,-5,8], dtype = "int32")#candidate|844|(225,)|const|int32
const_845 = relay.const([[5.003018,-5.539356,-7.423467,-6.699142,3.248579,-3.198387,-5.989961,6.742330,-3.569911,-7.433780,5.560121,-5.616298,7.074726,9.492681,8.552797,-9.144497,-7.409106,7.570992,1.437451,-2.463613,7.884687,1.008182,9.540347,3.109060,-2.050091,8.297569,0.291279,7.650409,0.900712,-1.855312,7.801544,-1.203688,3.625007,-4.512512,2.286606,-4.671185,4.745973,-9.107519,-9.061824,3.241347,0.584101,-8.289108,-4.364446,4.832615,-2.872352,-0.192438,6.212757,3.596103,8.437300,8.256095,4.759721,8.006883,7.342267,3.201975,1.556849,7.954959,3.352003,-0.705272,3.994096,-9.981844,1.708228,4.615193,2.457126,-4.750382,-1.947766,0.561223,7.693751,6.124887,-9.568733,-2.160564,3.037763,-6.386428],[-8.815038,-0.122757,-1.447703,2.938721,-1.897612,-9.132500,-2.411256,-6.383391,-5.433730,-4.518865,-0.587885,3.133004,-1.038829,-6.561191,0.706383,7.415324,0.955913,8.481954,-6.017528,-9.097414,6.116354,-8.303955,7.175979,-4.217979,-3.233373,5.926363,-1.426550,6.747504,-7.134058,-9.907566,-4.966396,2.089133,-8.887400,2.797471,-9.396348,7.053614,7.902888,0.397910,-3.286492,-6.997266,-1.167566,0.059752,-3.356802,7.213246,-8.749057,-5.228229,2.012622,7.416946,-4.053183,-9.437566,-6.672110,-0.903405,4.661155,-8.991149,-7.312526,-8.622363,-6.086256,3.602562,-1.248658,9.971435,4.465103,4.539927,-6.667232,-6.965754,-7.923703,3.720390,-7.317019,-4.638144,0.004303,7.371526,1.187202,-6.168512],[9.788708,1.299730,-0.693010,-0.527819,-0.175287,0.328097,-6.691805,-3.886976,-1.486045,9.155760,5.429383,0.082635,-5.631415,-7.473091,-0.538458,4.528236,8.024306,-9.634619,-8.508640,5.161044,-1.997559,5.831866,-2.032395,8.514579,0.295909,7.527809,-8.929164,6.563863,3.324547,0.511629,-2.158849,5.360088,7.593859,7.297638,-3.374396,-1.773225,4.612300,-9.378517,2.452473,9.145136,-5.781090,-6.986508,9.431155,-7.178999,2.234324,-0.260011,-9.989177,4.254062,3.155941,8.014963,4.506051,7.209080,1.570753,-5.713526,8.318820,0.123630,-7.847334,1.316442,2.369780,-7.559380,8.667560,-1.421237,-8.514978,6.445609,4.209410,-5.989388,-1.582663,2.410253,5.481614,5.878959,6.280800,-8.199777],[-0.043098,3.975363,7.405353,-7.253898,7.883118,9.887482,3.835109,9.578069,9.958815,4.968804,9.048173,-7.252258,5.980524,-2.790684,-6.685460,-5.504959,-0.937855,4.928667,-3.174612,-8.427741,-2.881865,5.134120,-0.682316,-5.734634,-7.330990,2.657061,5.933750,-4.119515,0.698603,5.220565,-4.307511,-9.411297,-8.070504,-6.531098,-0.026406,-4.900449,-4.669720,-2.296822,-6.969277,4.381599,-0.602916,2.342183,-2.122579,-5.977014,-9.306021,3.199057,-7.149489,0.866785,6.008107,7.289384,-3.451789,8.683209,1.358497,7.625904,-7.380194,7.726089,1.329983,-9.388637,-0.197317,-2.240593,0.284857,5.593549,0.835998,-7.365424,9.467850,-6.294500,0.153602,-4.377447,5.841253,-3.750714,-3.950516,3.257529]], dtype = "float32")#candidate|845|(4, 72)|const|float32
var_846 = relay.var("var_846", dtype = "int64", shape = (144,))#candidate|846|(144,)|var|int64
call_843 = relay.TupleGetItem(func_259_call(relay.reshape(const_844.astype('int32'), [15, 15]), relay.reshape(const_844.astype('int32'), [15, 15]), relay.reshape(const_845.astype('float32'), [288,]), relay.reshape(var_846.astype('int64'), [144,]), ), 0)
call_847 = relay.TupleGetItem(func_264_call(relay.reshape(const_844.astype('int32'), [15, 15]), relay.reshape(const_844.astype('int32'), [15, 15]), relay.reshape(const_845.astype('float32'), [288,]), relay.reshape(var_846.astype('int64'), [144,]), ), 0)
var_850 = relay.var("var_850", dtype = "float64", shape = (15, 15, 7))#candidate|850|(15, 15, 7)|var|float64
bop_851 = relay.greater(uop_841.astype('bool'), relay.reshape(var_850.astype('bool'), relay.shape_of(uop_841))) # shape=(15, 15, 7)
output = relay.Tuple([call_837,const_838,call_843,const_844,const_845,var_846,bop_851,])
output2 = relay.Tuple([call_839,const_838,call_847,const_844,const_845,var_846,bop_851,])
func_854 = relay.Function([var_834,var_846,var_850,], output)
mod['func_854'] = func_854
mod = relay.transform.InferType()(mod)
var_855 = relay.var("var_855", dtype = "float64", shape = (15, 15, 7))#candidate|855|(15, 15, 7)|var|float64
var_856 = relay.var("var_856", dtype = "int64", shape = (144,))#candidate|856|(144,)|var|int64
var_857 = relay.var("var_857", dtype = "float64", shape = (15, 15, 7))#candidate|857|(15, 15, 7)|var|float64
output = func_854(var_855,var_856,var_857,)
func_858 = relay.Function([var_855,var_856,var_857,], output)
mutated_mod['func_858'] = func_858
mutated_mod = relay.transform.InferType()(mutated_mod)
func_30_call = mod.get_global_var('func_30')
func_32_call = mutated_mod.get_global_var('func_32')
call_862 = relay.TupleGetItem(func_30_call(), 1)
call_863 = relay.TupleGetItem(func_32_call(), 1)
var_866 = relay.var("var_866", dtype = "float32", shape = (14, 11))#candidate|866|(14, 11)|var|float32
bop_867 = relay.multiply(call_862.astype('float32'), relay.reshape(var_866.astype('float32'), relay.shape_of(call_862))) # shape=(14, 11)
bop_870 = relay.multiply(call_863.astype('float32'), relay.reshape(var_866.astype('float32'), relay.shape_of(call_863))) # shape=(14, 11)
uop_873 = relay.exp(call_862.astype('float64')) # shape=(14, 11)
uop_875 = relay.exp(call_863.astype('float64')) # shape=(14, 11)
bop_877 = relay.bitwise_and(uop_873.astype('int32'), relay.reshape(var_866.astype('int32'), relay.shape_of(uop_873))) # shape=(14, 11)
bop_880 = relay.bitwise_and(uop_875.astype('int32'), relay.reshape(var_866.astype('int32'), relay.shape_of(uop_875))) # shape=(14, 11)
const_881 = relay.const([[3.316044,-4.257021,1.621500,-3.934114,-9.572659,2.887247,9.057767,8.144503,7.949732,-9.045781,8.269894],[7.316112,2.064730,-7.479515,0.172223,-1.440770,1.572279,-9.551150,8.873554,2.999706,-1.907533,-1.608186],[9.204055,-1.873803,-1.846266,-5.134823,-7.708332,9.439012,1.697420,5.255164,4.655026,2.595625,6.646536],[1.804304,-7.056183,-7.804182,1.364663,6.776441,-9.957855,-3.563512,-8.379821,-9.140966,-2.668589,-8.102350],[6.574621,-0.751547,7.921459,-8.904402,-6.823443,8.754628,-3.458287,6.460084,9.250792,-0.238541,-7.202772],[-5.104392,-4.144858,-1.499010,-3.507403,-0.111786,-1.450608,-6.672627,-6.275427,-5.601634,-6.593751,-6.784121],[2.324685,2.003708,-2.865035,-3.545621,-6.929965,2.660968,2.068975,8.431208,-5.648585,-8.991505,-2.697260],[-7.752766,6.694300,0.308350,-0.839000,-7.588836,-5.085379,-5.599850,-7.632643,4.213683,-5.148630,6.211653],[-7.984305,9.216455,-2.889334,-1.324955,9.469242,8.550712,4.375215,-0.832214,-1.620931,-4.061388,-4.198428],[1.052891,0.735532,4.489740,7.269265,-6.997660,7.459865,-8.497242,4.460398,0.103540,2.163692,8.208219],[2.959049,9.548930,-9.169833,-3.621119,-7.922639,0.330876,9.969865,7.313205,4.839096,-2.672108,-2.717142],[-9.555628,9.758524,-2.700616,3.755428,-0.475115,7.774237,-1.486314,0.549639,4.177233,2.997347,1.350381],[8.803810,1.551288,-3.903424,-6.552966,0.212731,-1.459669,-3.156307,2.314066,-0.622067,-0.770011,9.624620],[-3.403266,-1.309505,9.944045,-7.347762,-1.342794,8.104164,5.921962,0.165172,-6.969246,-8.001427,-3.225860]], dtype = "float64")#candidate|881|(14, 11)|const|float64
bop_882 = relay.left_shift(uop_873.astype('int64'), relay.reshape(const_881.astype('int64'), relay.shape_of(uop_873))) # shape=(14, 11)
bop_885 = relay.left_shift(uop_875.astype('int64'), relay.reshape(const_881.astype('int64'), relay.shape_of(uop_875))) # shape=(14, 11)
bop_886 = relay.floor_mod(bop_882.astype('float64'), relay.reshape(var_866.astype('float64'), relay.shape_of(bop_882))) # shape=(14, 11)
bop_889 = relay.floor_mod(bop_885.astype('float64'), relay.reshape(var_866.astype('float64'), relay.shape_of(bop_885))) # shape=(14, 11)
bop_890 = relay.add(bop_867.astype('uint16'), relay.reshape(var_866.astype('uint16'), relay.shape_of(bop_867))) # shape=(14, 11)
bop_893 = relay.add(bop_870.astype('uint16'), relay.reshape(var_866.astype('uint16'), relay.shape_of(bop_870))) # shape=(14, 11)
bop_895 = relay.right_shift(bop_877.astype('int64'), relay.reshape(bop_890.astype('int64'), relay.shape_of(bop_877))) # shape=(14, 11)
bop_898 = relay.right_shift(bop_880.astype('int64'), relay.reshape(bop_893.astype('int64'), relay.shape_of(bop_880))) # shape=(14, 11)
output = relay.Tuple([bop_886,bop_895,])
output2 = relay.Tuple([bop_889,bop_898,])
func_902 = relay.Function([var_866,], output)
mod['func_902'] = func_902
mod = relay.transform.InferType()(mod)
mutated_mod['func_902'] = func_902
mutated_mod = relay.transform.InferType()(mutated_mod)
var_903 = relay.var("var_903", dtype = "float32", shape = (14, 11))#candidate|903|(14, 11)|var|float32
func_902_call = mutated_mod.get_global_var('func_902')
call_904 = func_902_call(var_903)
output = call_904
func_905 = relay.Function([var_903], output)
mutated_mod['func_905'] = func_905
mutated_mod = relay.transform.InferType()(mutated_mod)
func_437_call = mod.get_global_var('func_437')
func_438_call = mutated_mod.get_global_var('func_438')
call_912 = func_437_call()
call_913 = func_437_call()
func_331_call = mod.get_global_var('func_331')
func_333_call = mutated_mod.get_global_var('func_333')
call_918 = relay.TupleGetItem(func_331_call(), 1)
call_919 = relay.TupleGetItem(func_333_call(), 1)
func_209_call = mod.get_global_var('func_209')
func_212_call = mutated_mod.get_global_var('func_212')
const_922 = relay.const([-4,4,-2,-6,7,10,-9,-10,10,9,8,-7,-8,3,4,1,4,7,4,-10,-9,-7,-7,-7,-8,5,8,1,10,9,5,-3,7,-4,1,-2,-4,1,9,2,-6,5,8,9,9,3,10,-10,4,-10,8,7,2,-5,8,10,4,-8,-1,-2,5,-2,-9,-3,-6,2,-4,10,-9,-9,-2,-2,6,9,-7,6,6,8,-2,-2,4,6,3,6,-9,-2,7,7,2,-9,-9,-2,4,-2,-10,7,-8,-4,7,6,6,-8,10,6,-3,4,1,9,-5,-2,-7,9,-9,8,-4,3,2,4,-7,7,-5,-2,-4,-10,3,-4,-10,-6,7,-7,10,-2,1,6,4,8,4,-4,10,-9,-7,-3,-9,7], dtype = "int64")#candidate|922|(144,)|const|int64
call_921 = relay.TupleGetItem(func_209_call(relay.reshape(const_922.astype('int64'), [144,])), 2)
call_923 = relay.TupleGetItem(func_212_call(relay.reshape(const_922.astype('int64'), [144,])), 2)
output = relay.Tuple([call_912,call_918,call_921,const_922,])
output2 = relay.Tuple([call_913,call_919,call_923,const_922,])
func_927 = relay.Function([], output)
mod['func_927'] = func_927
mod = relay.transform.InferType()(mod)
output = func_927()
func_928 = relay.Function([], output)
mutated_mod['func_928'] = func_928
mutated_mod = relay.transform.InferType()(mutated_mod)
var_929 = relay.var("var_929", dtype = "float32", shape = (8, 9, 10))#candidate|929|(8, 9, 10)|var|float32
var_930 = relay.var("var_930", dtype = "float32", shape = (8, 9, 10))#candidate|930|(8, 9, 10)|var|float32
bop_931 = relay.divide(var_929.astype('float32'), relay.reshape(var_930.astype('float32'), relay.shape_of(var_929))) # shape=(8, 9, 10)
output = bop_931
output2 = bop_931
func_935 = relay.Function([var_929,var_930,], output)
mod['func_935'] = func_935
mod = relay.transform.InferType()(mod)
var_936 = relay.var("var_936", dtype = "float32", shape = (8, 9, 10))#candidate|936|(8, 9, 10)|var|float32
var_937 = relay.var("var_937", dtype = "float32", shape = (8, 9, 10))#candidate|937|(8, 9, 10)|var|float32
output = func_935(var_936,var_937,)
func_938 = relay.Function([var_936,var_937,], output)
mutated_mod['func_938'] = func_938
mutated_mod = relay.transform.InferType()(mutated_mod)
func_30_call = mod.get_global_var('func_30')
func_32_call = mutated_mod.get_global_var('func_32')
call_965 = relay.TupleGetItem(func_30_call(), 0)
call_966 = relay.TupleGetItem(func_32_call(), 0)
func_331_call = mod.get_global_var('func_331')
func_333_call = mutated_mod.get_global_var('func_333')
call_971 = relay.TupleGetItem(func_331_call(), 1)
call_972 = relay.TupleGetItem(func_333_call(), 1)
output = relay.Tuple([call_965,call_971,])
output2 = relay.Tuple([call_966,call_972,])
func_973 = relay.Function([], output)
mod['func_973'] = func_973
mod = relay.transform.InferType()(mod)
mutated_mod['func_973'] = func_973
mutated_mod = relay.transform.InferType()(mutated_mod)
func_973_call = mutated_mod.get_global_var('func_973')
call_974 = func_973_call()
output = call_974
func_975 = relay.Function([], output)
mutated_mod['func_975'] = func_975
mutated_mod = relay.transform.InferType()(mutated_mod)
func_437_call = mod.get_global_var('func_437')
func_438_call = mutated_mod.get_global_var('func_438')
call_985 = func_437_call()
call_986 = func_437_call()
var_989 = relay.var("var_989", dtype = "uint32", shape = (14, 16, 3))#candidate|989|(14, 16, 3)|var|uint32
bop_990 = relay.floor_divide(call_985.astype('float32'), relay.reshape(var_989.astype('float32'), relay.shape_of(call_985))) # shape=(14, 16, 3)
bop_993 = relay.floor_divide(call_986.astype('float32'), relay.reshape(var_989.astype('float32'), relay.shape_of(call_986))) # shape=(14, 16, 3)
func_359_call = mod.get_global_var('func_359')
func_363_call = mutated_mod.get_global_var('func_363')
const_996 = relay.const([-5.450330,-4.155209,-6.104722,-9.737883,-7.453775,4.467314,3.284812,-7.075084,-5.004998,-9.362618,-1.185899,9.945065,-7.041530,3.811998,7.237670], dtype = "float32")#candidate|996|(15,)|const|float32
call_995 = func_359_call(relay.reshape(const_996.astype('float32'), [15,]), relay.reshape(const_996.astype('float32'), [15,]), )
call_997 = func_359_call(relay.reshape(const_996.astype('float32'), [15,]), relay.reshape(const_996.astype('float32'), [15,]), )
func_331_call = mod.get_global_var('func_331')
func_333_call = mutated_mod.get_global_var('func_333')
call_1001 = relay.TupleGetItem(func_331_call(), 0)
call_1002 = relay.TupleGetItem(func_333_call(), 0)
output = relay.Tuple([bop_990,call_995,const_996,call_1001,])
output2 = relay.Tuple([bop_993,call_997,const_996,call_1002,])
func_1009 = relay.Function([var_989,], output)
mod['func_1009'] = func_1009
mod = relay.transform.InferType()(mod)
mutated_mod['func_1009'] = func_1009
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1010 = relay.var("var_1010", dtype = "uint32", shape = (14, 16, 3))#candidate|1010|(14, 16, 3)|var|uint32
func_1009_call = mutated_mod.get_global_var('func_1009')
call_1011 = func_1009_call(var_1010)
output = call_1011
func_1012 = relay.Function([var_1010], output)
mutated_mod['func_1012'] = func_1012
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1017 = relay.var("var_1017", dtype = "bool", shape = (14, 13, 11))#candidate|1017|(14, 13, 11)|var|bool
var_1018 = relay.var("var_1018", dtype = "bool", shape = (14, 13, 11))#candidate|1018|(14, 13, 11)|var|bool
bop_1019 = relay.logical_and(var_1017.astype('bool'), relay.reshape(var_1018.astype('bool'), relay.shape_of(var_1017))) # shape=(14, 13, 11)
uop_1023 = relay.atan(bop_1019.astype('float64')) # shape=(14, 13, 11)
var_1025 = relay.var("var_1025", dtype = "float64", shape = (14, 13, 11))#candidate|1025|(14, 13, 11)|var|float64
bop_1026 = relay.equal(uop_1023.astype('bool'), relay.reshape(var_1025.astype('bool'), relay.shape_of(uop_1023))) # shape=(14, 13, 11)
bop_1031 = relay.bitwise_or(uop_1023.astype('uint8'), relay.reshape(bop_1026.astype('uint8'), relay.shape_of(uop_1023))) # shape=(14, 13, 11)
output = bop_1031
output2 = bop_1031
func_1034 = relay.Function([var_1017,var_1018,var_1025,], output)
mod['func_1034'] = func_1034
mod = relay.transform.InferType()(mod)
var_1035 = relay.var("var_1035", dtype = "bool", shape = (14, 13, 11))#candidate|1035|(14, 13, 11)|var|bool
var_1036 = relay.var("var_1036", dtype = "bool", shape = (14, 13, 11))#candidate|1036|(14, 13, 11)|var|bool
var_1037 = relay.var("var_1037", dtype = "float64", shape = (14, 13, 11))#candidate|1037|(14, 13, 11)|var|float64
output = func_1034(var_1035,var_1036,var_1037,)
func_1038 = relay.Function([var_1035,var_1036,var_1037,], output)
mutated_mod['func_1038'] = func_1038
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1047 = relay.var("var_1047", dtype = "int64", shape = (14, 3))#candidate|1047|(14, 3)|var|int64
const_1048 = relay.const([[7,6,-9],[7,6,10],[7,9,3],[-6,-10,-10],[8,4,-3],[-3,-5,10],[-4,10,6],[7,-6,-5],[2,-10,8],[7,-1,-3],[5,7,-7],[-4,6,4],[-5,-5,-5],[10,2,10]], dtype = "int64")#candidate|1048|(14, 3)|const|int64
bop_1049 = relay.subtract(var_1047.astype('int64'), relay.reshape(const_1048.astype('int64'), relay.shape_of(var_1047))) # shape=(14, 3)
bop_1056 = relay.greater(var_1047.astype('bool'), relay.reshape(const_1048.astype('bool'), relay.shape_of(var_1047))) # shape=(14, 3)
bop_1060 = relay.less(var_1047.astype('bool'), relay.reshape(bop_1056.astype('bool'), relay.shape_of(var_1047))) # shape=(14, 3)
const_1063 = relay.const([[9,7,1],[-1,1,10],[-4,-2,4],[8,-7,3],[-3,-2,-10],[4,-6,5],[10,-2,6],[9,-7,-4],[3,10,-9],[3,-6,6],[8,9,2],[3,2,2],[-5,7,-6],[-2,-5,6]], dtype = "int64")#candidate|1063|(14, 3)|const|int64
bop_1064 = relay.floor_divide(const_1048.astype('float64'), relay.reshape(const_1063.astype('float64'), relay.shape_of(const_1048))) # shape=(14, 3)
bop_1069 = relay.right_shift(const_1063.astype('int64'), relay.reshape(bop_1056.astype('int64'), relay.shape_of(const_1063))) # shape=(14, 3)
uop_1072 = relay.sinh(bop_1056.astype('float64')) # shape=(14, 3)
output = relay.Tuple([bop_1049,bop_1060,bop_1064,bop_1069,uop_1072,])
output2 = relay.Tuple([bop_1049,bop_1060,bop_1064,bop_1069,uop_1072,])
func_1078 = relay.Function([var_1047,], output)
mod['func_1078'] = func_1078
mod = relay.transform.InferType()(mod)
mutated_mod['func_1078'] = func_1078
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1079 = relay.var("var_1079", dtype = "int64", shape = (14, 3))#candidate|1079|(14, 3)|var|int64
func_1078_call = mutated_mod.get_global_var('func_1078')
call_1080 = func_1078_call(var_1079)
output = call_1080
func_1081 = relay.Function([var_1079], output)
mutated_mod['func_1081'] = func_1081
mutated_mod = relay.transform.InferType()(mutated_mod)
func_331_call = mod.get_global_var('func_331')
func_333_call = mutated_mod.get_global_var('func_333')
call_1153 = relay.TupleGetItem(func_331_call(), 0)
call_1154 = relay.TupleGetItem(func_333_call(), 0)
output = call_1153
output2 = call_1154
func_1160 = relay.Function([], output)
mod['func_1160'] = func_1160
mod = relay.transform.InferType()(mod)
mutated_mod['func_1160'] = func_1160
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1160_call = mutated_mod.get_global_var('func_1160')
call_1161 = func_1160_call()
output = call_1161
func_1162 = relay.Function([], output)
mutated_mod['func_1162'] = func_1162
mutated_mod = relay.transform.InferType()(mutated_mod)
func_331_call = mod.get_global_var('func_331')
func_333_call = mutated_mod.get_global_var('func_333')
call_1189 = relay.TupleGetItem(func_331_call(), 0)
call_1190 = relay.TupleGetItem(func_333_call(), 0)
uop_1216 = relay.asinh(call_1189.astype('float64')) # shape=(14, 16, 1)
uop_1218 = relay.asinh(call_1190.astype('float64')) # shape=(14, 16, 1)
bop_1219 = relay.bitwise_or(call_1189.astype('int16'), relay.reshape(uop_1216.astype('int16'), relay.shape_of(call_1189))) # shape=(14, 16, 1)
bop_1222 = relay.bitwise_or(call_1190.astype('int16'), relay.reshape(uop_1218.astype('int16'), relay.shape_of(call_1190))) # shape=(14, 16, 1)
bop_1229 = relay.maximum(uop_1216.astype('uint32'), relay.reshape(bop_1219.astype('uint32'), relay.shape_of(uop_1216))) # shape=(14, 16, 1)
bop_1232 = relay.maximum(uop_1218.astype('uint32'), relay.reshape(bop_1222.astype('uint32'), relay.shape_of(uop_1218))) # shape=(14, 16, 1)
func_619_call = mod.get_global_var('func_619')
func_623_call = mutated_mod.get_global_var('func_623')
var_1235 = relay.var("var_1235", dtype = "uint32", shape = ())#candidate|1235|()|var|uint32
const_1236 = relay.const([-4,5,-8,-8,-4,-2,4,1,5,10,4,3,-2,8,-3,-5,9,-4,6,10,1,-10,-5,1,-3,-6,-3,-2,9,8,-8,10,-2,4,6,-9,-8,-4,-2,-7,-5,3,-3,2,5,-5,-2,10,-1,3,10,6,3,-3,4,1,2,-7,8,-8,-9,8,9,-7,-4,-8,2,-4,-4,1,6,7,-5,4,6,-8,6,8,6,6,4,6,-7,-1,9,9,6,-5,10,4,-1,1,-10,3,-2,6,4,-2,-4,4,-6,1,6,-3,-5,-2,-1,6,-2,5,-9,-2,5,-5,-8,4,-1,8,-3,6,9,-6,3,-2,-2,-10,10,-7,-7,-7,1,-1,-8,-10,1,9,-3,10,9,-2,-9,-6,-4,5,5,-6,-3,9,-7,2,-6,-8,6,-7,-10,-7,-1,9,4,-7,-5,-7,2,-2,8,7,-5,-5,4,5,2,2,-3,-9,6,9,-10,2,4,-1,7,4,-4,2,-2,-10,9,8,-5,-2,-4,4,7,6,-1,-2,4,2,-7,-3,-1,5,-9,1,-3,-4,-4,-1,-6,10,1,-6,10,-2,-2,7,-10,-3,-7,-2,9,-7,6,-2,4,-10,4,1,-3,10,-8,1,1,-8,10,9,7,2,6,6,8,7,1,5,-1,-3,3,-8,10,5,3,1,1,-3,-7,-1,6,-6,-5,3,7,-6,10,7,7,9,-7,10,-4,-7,6,8,5,7,7,10,7,-8,-8,-6,6,-5,-8,3,1,-4,7,7,6,-5,-5,8,-9,-9,-1,1,2,2,-2,1,6,-10,-9,-6,10,-9,6,-9,6,-1,-4,-6,-10,-6,5,8,7,4,-5,-1,4,2,-7,-3,10,2,8,-10,-8,3,-6,-7,-8,-6,-3,-10,7,5,4,9,-5,7,8,-4,-2,2,-1,-10,1,-2,3,1,5,-5,7,-2,-4,-8,4,9,-10,-5,-1,9,-3,6,4,-7,5,-7,-8,5,-8,6,-6,2,-7,8,-4,-10,10,4,-5,-5,6,5,3,-8,4,4,9,7,-5,-4,1,-7,-9,-5,5,-7,3,7,-5,-6,-10,-8,-8,-7,-9,3,4,-1,4,-9,5,10,-9,4,3,-2,4,-6,-8,-7,-5,-5,2,-3,-1,5,-10,7,-5,5,3,-3,-9,9,-3,4,-9,-6,-6,-9,-3,6,1,-5,4,-4,-7,-4,-7,6,1,5,-1,-1,2,-4,4,8,-3,2,3,4,5,6,3,2,-2,-2,-2,9,-4,-8,-5,6,1,3,5,2,7,4,2,2,6,8,-10,1,2,-2,8,-2,7,-1,-5,4,2,2,5,1,-9,-7,-6,2,-10,4,4,4,-1,4,9,10,6,-9,-7,2,9,-6,10,4,6,-7,-2,-2,8,-3,-3,-2,6,-2,10,-10,5,-6,5,4,-8,2,4,6,-9,8,-1,-1,-2,9,-6,2,6,6,-2,5,-3,-1,-10,-6,-6,-8,-7,-6,-3,2,8,1,-4,5,9,-5,6,7,4,4,-2,-9,-3,-9,-3,-6,-4,3,3,-3,10,3,5,4,7,-9,2,9,4,4,6,-6,-6,-10,1,-9,3,-10,4,-6,-4,10,-5,-5,-7,-4,-8,5,3,1,9,4,-4,8,8,10,1,10,-9,2,-4,8,1,4,-7,8,6,7,6,-7,9,8,7,5,5,-3,8,-8,5,2,8,-7,2,6,9,-4,-1,10,2,-6,-5,-3,10,-1,-5,6,-3,-10,9,2,-9,6,-9,-10,4,-6,-6,-1,2,1,6,-3,-2,-3,8,7,-2,-9,-1,-1,-8,-3,8,1,7,9,1,10,4,-2,-1,-2,-4,-5,2,2,-7,-4,-1,6,9,9,7,1,7,6,4,10,-8,7,-2,-2,3,3,3,4,-7,1,-4,-5,-8,8,8,-4,-2,-8,9,5,-8,-8,10,-2,-4,-8,7,-9,4,-9,-5,1,-3,4,-1,-3,-7,-9,-2,-3,3,-5,7,-7,3,-5,10,-6,5,4,10,4,-10,-4,5,7,1,10,7,-8,5,9,-9,10,-6,3,-4,3,1,4,-7,4,4,5,-1,-4,-8,2,7,-5,-6,10,5,-2,3,2,9,-1,10,-8,10,-7,-4,-8,-1,-5,1,-7,-9,5,-8,-5,3,-4,9,-3,-4,9,-9,7,10,-9,7,9,6,7,1,3,-7,8,-6,7,3,-6,-3,-2,-6,5,-6,9,-10,-8,-10,6,5,-3,7,3,-6,-2,-3,-3,7,4,4,-7,-4,7,5,1,-9,3,4,6,4,-10,-4,9,1,-7,9,-9,-1,4,10,-8,-10,5,-6,8,10,-8,-9,8,-10,-4,10,-1,8,9,-3,-6,-9,-8,5,6,4,-4,10,-2,8,9,-9,-1,8,-6,-8,-3,-5,-1,-7,-8,10,3,-3,-2,10,10,-4,8,-10,10,-7,4,-3,4,3,-2,-3,5,-9,6,-10,1,-7,7,-3,7,1,-2,10,6,-8,-6,-3,-7,-2,6,-1,-8,-7,-8,-4,-10,10,-9,10,2,6,-6,-3,-5,-8,-6,7,-7,-9,-5,-4,7,-9,-4,6,6,8,-4,7,-3,-10,3,-3,2,-7,-6,-5,7,-3,-4,7,-2,-2,-5,6,3,6,-3,-6,2,5,-6,-3,4,-2,-7,-8,5,5,-10,-7,-9,9,-4,9,10,-6,-4,-7,-6,-9,-9,2,-1,-5,10,-6,-7,-10,-1,8,5,-8,-4,-9,6,-5,-9,1,6,2,10,-6,4,9,-7,9,-3,-10,3,-1,-9,4,-5,-7,2,8,7,10,-10,-9,8,-6,4,-9,-5,-6,7,2,8,5,-9,6,7,-7,7,-1,-3,-5,2,6,4,-2,5,-3,3,4,10,-6,-6,-1,9,5,10,-1,-3,2,8,-8,-7,-5,-10,-10,9,-7,-1,5,2,-3,1,5,-8,1,10,-10,-2,-5,6,-3,3,9,8,-5,-7,3,10,-1,-6,8,-4,2,5,-8,-5,7,1,-2,-3,7,5,5,-9,-8,1,-2,-4,10,-4,-4,1,6,1,-9,5,2,10,-7,-6,-6,9,-3,-2,6,-3,-6,-4,-6,-10,-9,3,-7,1,-1,-9,5,5,-4,-2,5,-3,-2,3,1,-3,2,-2,-10,-5,1,10,-3,-3,-3,9,2,1,8,2,-7,2,4,10,-6,-6,8,-2,-2,10,-1,7,9,-7,-2,-8,5,-10,-3,-2,-3,5,-6,-4,3,-6,-3,8,-9,-10,-6,-1,8,2,10,-10,4,-8,-4,9,-8,-2,7,2,-6,8,9,-5,-9,-8,-2,-5,6,9,6,9,-4,-5,-2,-7,-7,2,-4,-5,-7,3,-3,-8,-10,9,6,1,9,-8,-3,3,2,8,-4,9,7,-3,-10,9,7,-7,-6,-2,6,-9,-9,-9,-8,6,-3,5,9,-10,8,-9,7,-9,-8,-9,-3,1,9,-2,8,-10,5,1,-3,2,-2,10,9,-2,2,-9,-10,-6,2,-5,-10,-3,10,8,7,-9,-1,8,-8,-4,4,5,6,2,-3,-2,1,7,-1,9,5,9,-4,-3,-9,-5,4,6,3,-10,6,9,-7,-1,1,6,-7,-1,4,-5,3,-8,10,-9,-4,1,-10,7,9,6,9,6,-1,-9,1,9,-4,2,-3,-8,9,6,2,-9,-5,-2,10,-2,-5,5,-5,-3,-1,2,8,-10,-9,-8,-2,-3,5,1,3,6,4,-7,4,-5,-5,-9,-7,9,5,-9,6,2,-7,-7,-6,-2,2,7,-7,3,3,4,2,8,-1,-4,10,8,-9,-10,6,5,-1,-6,-9,10,-4,2,8,-3,8,7,3,5,-8,1,9,4,2,-8,-2,3,-5,-1,-6,3,2,-3,-3,1,5,7,-9,2,2,2,-8,-9,-1,-5,5,-4,8,-3,4,-4,7,-3,-4,-6,4,-2,3,7,-2,-5,-2,5,4,1,-4,-9,8,-5,-6,3,-9,4,6,9,4,6,-3,-6,-9,-9,3,3,-1,-6,-9,8,-3,3,-6,9,6,-5,-6,-10,-9,-9,-6,-4,1,5,-6,-10,-7,-10,7,2,9,-4,10,2,-2,10,3,6,-3,-4,6,-9,10,4,3,1,-5,6,1,-5,-1,3,-8,-8,10,1,9,-8,1,4,-8,-5,2,-8,-3,5,7,-8,7,-7,9,2,10,-4,-2,7,5,-4,-5,-9,-5,-4,4,-9,-9,7,-4,7,1,-5,2,-6,5,-4,-2,1,-9,10,-9,6,5,6,-4,-5,4,9,-3,-3,-5,-9,1,-4,6,-6,3,3,-5,7,-3,6,2,3,2,-4,-4,4,4,6,2,-7,5,-2,8,-2,2,8,5,9,-1,4,7,-1,-8,3,10,-4,9,-5,-5,-7,7,1,9,1,5,5,5,-3,2,2,5,7,4,-10,-9,8,-4,-9,-10,-5,6,-5], dtype = "uint32")#candidate|1236|(1680,)|const|uint32
call_1234 = func_619_call(relay.reshape(var_1235.astype('uint32'), []), relay.reshape(const_1236.astype('uint32'), [15, 7, 16]), )
call_1237 = func_619_call(relay.reshape(var_1235.astype('uint32'), []), relay.reshape(const_1236.astype('uint32'), [15, 7, 16]), )
func_935_call = mod.get_global_var('func_935')
func_938_call = mutated_mod.get_global_var('func_938')
var_1239 = relay.var("var_1239", dtype = "float32", shape = (720,))#candidate|1239|(720,)|var|float32
call_1238 = func_935_call(relay.reshape(var_1239.astype('float32'), [8, 9, 10]), relay.reshape(var_1239.astype('float32'), [8, 9, 10]), )
call_1240 = func_935_call(relay.reshape(var_1239.astype('float32'), [8, 9, 10]), relay.reshape(var_1239.astype('float32'), [8, 9, 10]), )
const_1241 = relay.const([[[-5.305990,-3.795597,-2.923154,-0.964596,9.261151,6.776273,-1.268331,3.208873,-3.320899],[3.194205,-5.027743,-3.715753,-4.653827,-5.390912,9.723142,2.096932,4.081022,9.742030],[-2.293866,-3.687818,8.128852,8.981949,-6.930483,5.933580,-5.035010,5.581641,9.452577],[7.400943,-5.024825,8.117157,4.247553,-7.278223,-9.113992,-5.052127,1.021838,2.566999],[7.715820,8.074802,9.586856,-0.009183,6.009267,-9.890083,1.339737,-7.164422,-2.337430],[-7.758884,-7.833186,-2.757848,-9.782300,4.604950,4.807549,5.575573,-4.182590,-8.751899],[6.630548,7.088530,2.485878,-9.010677,4.964420,-2.902975,-0.067460,6.174028,8.194936],[-7.114186,-2.360073,-5.662269,-1.445407,-6.567729,-8.746551,-8.184660,-1.825035,-2.656653],[2.677811,-2.483366,4.557072,-1.015732,3.742079,-7.577726,8.920814,1.800611,-2.444517],[7.634787,7.074584,1.908270,6.549707,7.264215,2.039515,5.829723,-3.243794,9.408355],[-7.217820,-1.014406,1.753188,5.940835,9.902533,3.428329,-7.761757,-5.127044,-1.134716],[3.243926,1.349243,5.876847,-7.701167,6.426221,2.152331,-7.313883,8.944093,3.547635],[1.330848,0.107510,9.592925,-1.691574,-8.452233,7.264058,0.259567,-7.366617,-4.789729],[8.425192,-0.915223,8.347667,-1.283682,7.762338,-9.665451,-9.574818,3.510423,-3.104143],[-1.082788,-9.687957,5.104380,-2.430733,-9.243217,4.051772,-2.509825,9.631929,-6.553863],[-0.869438,-6.383322,-9.798541,9.761413,-5.688077,-3.746079,2.862232,-8.292617,5.889074]],[[-4.950384,-7.198542,-8.965511,8.888482,-6.488037,4.123728,2.242590,5.427313,-1.556146],[7.673875,5.338553,-4.817694,-4.412874,-6.613676,-1.334701,4.709983,3.885519,0.823142],[7.378958,0.366697,-5.452053,-3.554891,-3.480463,3.927380,2.104966,-6.527798,6.485035],[0.962597,9.587152,-2.479545,0.323513,-9.518048,1.294551,1.709649,-0.853640,-0.591084],[3.601825,-5.733957,3.859476,-0.493377,-0.073333,3.209388,-5.455125,-8.512800,-5.214562],[5.536189,-7.773634,0.455003,3.016557,-1.254955,9.087164,-6.681351,-6.353392,-8.188338],[3.811055,-0.471820,-0.373069,3.142115,-1.055420,-2.479664,-3.431018,4.323191,5.815941],[-9.320063,6.634818,-6.531108,7.948194,9.867555,3.382409,8.303307,6.326079,3.799172],[4.024664,-3.573999,-6.777225,5.027308,-0.806378,1.638785,3.677834,-4.172869,-5.076472],[8.881074,-8.687253,6.814292,-7.296902,-9.845348,5.252583,7.963958,-5.212586,-9.451622],[-7.113808,7.676048,-4.840164,-6.729337,-2.141551,-7.256650,9.301894,-7.548501,0.128639],[-1.070002,7.038309,0.726914,-9.427729,4.991417,-7.837768,3.389157,4.328379,3.843383],[1.995285,6.319217,-3.971706,-1.388843,9.189504,9.079525,3.715176,1.154742,-7.724714],[9.277828,4.058906,8.814115,-1.680517,7.050282,1.675828,-5.571287,-4.877024,-4.653046],[2.724452,5.060221,-7.690554,1.583934,-9.966273,-0.473052,9.836757,4.063147,-7.136801],[-6.318445,3.458741,1.922081,-6.162323,3.996425,1.392107,-6.722921,-0.128332,-3.040851]],[[-6.269061,-1.410976,-5.560411,-3.275568,-6.409088,-5.151750,-9.967118,-9.269758,-7.557510],[5.723455,6.995895,-1.340197,-9.649117,3.448213,-5.546617,6.387345,-2.191784,7.750238],[-8.502877,-2.210198,5.683655,-0.242460,-3.763772,4.162718,-0.258678,4.201665,4.997399],[-6.579916,-9.801775,-6.577673,8.196167,-0.214082,-4.690331,-2.155559,0.939039,4.239136],[-0.925215,-5.114641,-4.540960,7.119630,-4.941941,-4.987512,-7.007254,-1.269504,8.557147],[4.480759,-9.878596,-0.330181,2.701114,-5.631281,6.400237,2.655007,1.950401,-6.984136],[4.205380,-7.490355,4.218941,3.735831,7.902169,-3.628002,7.462705,-2.942844,1.126963],[-2.865206,0.370850,4.932300,-5.337434,-2.709875,8.958908,-5.418634,0.494955,-4.357818],[2.136185,-5.017293,7.485058,4.979520,4.057293,8.470571,-7.487859,8.373277,-0.878275],[6.009554,-6.093158,-4.655633,-3.333481,-0.482218,6.088237,-6.944320,5.900415,2.718165],[-2.856552,1.247649,-7.885986,-9.904350,-3.266534,8.751607,2.107916,9.512636,-8.793043],[7.317896,-0.528377,-7.112733,-9.414719,2.098036,-0.051807,2.848895,5.221730,-7.160478],[1.887799,0.612256,-0.714881,-0.157283,4.205610,2.340055,2.935472,-8.839551,3.948385],[7.080469,-2.958982,8.576367,8.489231,7.273174,5.147654,3.560649,-2.356657,-7.267322],[8.769501,-2.760814,-7.855303,-0.786966,-1.153261,-8.064785,-3.211118,-1.237455,-9.451306],[9.825720,-3.902489,-9.464345,-7.332432,-1.204608,-9.726739,6.811027,1.221987,-3.609694]],[[-7.151095,2.245458,-2.196032,-2.382196,4.680247,7.452988,-5.734150,9.219609,6.736740],[-0.515718,1.628332,-4.676429,5.296841,6.988200,-0.118936,-0.222592,6.681342,6.125360],[7.207269,-5.177017,-2.318788,-1.368596,-6.878944,1.969782,-1.920652,7.711087,-5.767359],[0.177950,7.524011,-2.554284,5.856758,-1.406904,-7.012977,-6.484816,3.136858,-7.904849],[-1.061439,-8.969260,0.331944,-9.945766,3.603691,0.044436,2.664410,6.769648,-7.255904],[-1.062605,2.475722,-3.340207,7.201675,7.172750,1.967174,-2.066468,3.404410,-4.116140],[0.732163,-7.391512,-8.816858,-5.155591,-2.734044,-9.765084,-1.451025,-0.057662,-0.872783],[2.050181,9.656425,-2.005661,4.162493,-7.267012,-5.664199,2.031025,5.647782,-3.943244],[1.976581,-2.159987,6.088572,-3.788191,9.854820,9.034901,8.804466,0.680388,5.059758],[8.347628,9.750309,0.393760,-5.637671,8.976036,-8.482055,0.754392,-2.477149,-6.344683],[8.929065,0.591719,0.990873,-1.442749,-6.349795,-5.130696,0.029631,-8.725159,5.090966],[-4.170769,-7.054045,-9.986277,-5.218922,-4.595910,5.915862,-4.503136,-6.226161,8.788699],[-3.904797,-2.935144,-2.980938,-4.098273,0.583907,-9.007735,2.063067,-8.241776,-3.110557],[-8.436276,6.796893,6.062491,8.881242,6.704501,-7.905881,-6.440535,-5.057014,9.880080],[0.193042,-6.820249,-8.218294,4.295399,-0.228361,7.086284,-0.508362,5.239165,-5.373363],[-3.551698,-1.924999,4.396622,5.724410,0.967707,4.760038,-5.465446,-6.425752,0.151967]],[[0.686819,-5.834229,-3.788158,-7.496101,-7.582886,-0.709717,-0.495901,-3.449462,-4.311293],[2.163446,7.613632,0.852157,3.926746,7.438747,3.311141,-5.663217,-8.971931,-6.563341],[-8.529379,3.404042,-6.323487,-6.392310,7.660127,5.723679,-8.998675,4.246322,4.092596],[-9.746943,-6.510909,-2.301753,-0.965287,-4.710771,-0.023843,-6.035195,5.179947,2.063030],[5.858943,-4.218132,-0.332057,6.676124,3.313639,2.033833,3.045761,8.770730,6.554722],[6.343827,4.910447,-9.310650,-5.585677,-5.244298,7.023795,4.005025,5.705040,4.123022],[7.211735,9.951987,3.428303,5.739909,-4.526441,-1.522171,7.506325,-6.571384,0.745337],[-3.583032,1.201672,3.713000,-0.655393,7.184117,-0.065325,8.851580,8.567244,-7.700722],[2.255444,-9.860835,0.123293,-5.666465,-2.870053,6.485086,7.281206,-6.766054,-1.988073],[0.209124,-4.793626,5.069510,1.341092,8.779394,5.488665,6.335291,4.831558,-8.511148],[-6.778041,6.356046,5.818592,-0.514067,-2.480576,6.612712,-4.726946,2.820376,-7.214251],[-6.640692,-1.626490,-4.684428,5.011318,-4.619021,0.166633,0.644690,8.551486,8.002189],[2.186408,-3.347787,-9.985474,7.672734,-1.952365,1.504027,7.241333,4.455240,7.599914],[7.741284,0.017018,-3.658320,-4.423694,3.738278,-9.515028,8.071272,-6.286584,-2.375456],[3.478545,-9.183166,-5.605410,-5.161570,7.010754,2.755486,-3.540284,1.081225,6.529459],[-4.187138,-1.657090,2.917954,-7.336817,-7.473973,-1.752876,8.648342,-3.657436,-3.421526]],[[-0.174568,-9.832051,-9.568894,-2.442811,-8.247924,-6.722025,7.086785,-1.551304,-5.544509],[0.848751,-7.751000,-9.355145,-7.746207,-3.736296,7.718246,6.118447,-1.343637,9.649388],[-5.565224,1.625734,2.937215,-3.281412,-3.428408,-7.600299,-7.492629,-9.129110,-9.999754],[-1.080644,-7.898852,4.986892,0.661046,2.719312,0.480359,-2.550935,7.182658,-8.911149],[9.439750,3.008273,4.067209,8.081318,2.121849,-3.230781,-1.336231,-7.037169,-6.004380],[-8.291884,2.836461,2.946724,-4.315992,-1.264383,5.398671,-4.037976,5.499988,-3.220485],[-2.674771,-7.814687,8.745425,2.322024,0.098663,3.359527,9.069829,5.401169,8.607360],[1.554131,-7.845602,3.356047,2.108966,2.934382,-9.078352,2.339581,0.572567,-2.997757],[4.435499,-2.637260,-4.496010,-4.848297,5.319181,-7.139280,-5.049448,-8.381787,0.043690],[-1.195444,3.940879,7.216666,6.445047,-2.118623,-8.588459,-0.843889,-6.533503,0.909558],[-6.562617,1.467980,1.801277,-3.224853,0.907410,7.307826,0.842730,0.054576,2.111178],[-2.338662,-1.342914,9.064221,9.075583,-4.271484,-6.114507,-5.977185,3.348237,-0.663308],[9.020553,-1.397699,5.838099,4.671469,5.537788,1.290572,1.538799,3.209153,3.383650],[8.819875,-1.310193,-3.550474,5.781105,4.205872,-2.942360,5.151487,2.264535,7.476558],[9.924159,0.054226,5.986141,6.853222,-6.699472,-5.421316,1.006466,-2.504973,6.136743],[-2.081594,-6.053773,6.293698,1.611242,-6.056173,-9.775566,1.943495,9.337041,-0.500490]],[[-0.677114,6.264821,5.462718,-2.438051,2.677672,-6.011762,8.073089,5.637194,9.842667],[1.337181,-6.247089,4.641997,4.474623,-9.075924,0.373021,6.387218,9.449917,-4.710470],[1.407135,1.195851,0.341785,0.586845,6.120340,-3.365270,-3.204548,2.363274,-2.093698],[2.949197,-5.026796,-3.069946,0.543613,6.818557,-7.056187,6.492571,-9.279248,0.985401],[-9.116562,-6.235959,7.426072,-7.191109,-7.918070,-4.160216,-8.855185,-5.367197,-2.232101],[-2.449008,0.430641,-5.880874,1.835599,6.816216,-1.957516,-4.373863,6.611179,-9.509369],[3.052813,-8.454869,0.448810,-1.176349,7.015179,-0.952194,7.854548,2.114513,-6.741081],[9.690681,7.173879,1.279014,0.883556,-7.284697,-7.099689,2.902490,-3.845463,-3.819044],[3.064459,8.789228,2.759517,-1.985640,9.892911,5.279859,9.401308,7.863461,5.177102],[-8.327030,-9.787619,-6.912591,-3.072025,4.320338,1.708848,-9.886239,-3.548115,0.690683],[8.220478,4.512967,4.888078,-9.911568,3.095430,7.207219,-6.673023,3.615183,9.039183],[0.667793,9.207661,-0.390554,-2.206010,2.176298,-6.849339,3.412336,-2.144008,-7.818587],[6.810644,-2.572756,8.881427,-8.748379,-9.299659,-0.662196,7.455163,9.039188,-0.223118],[3.494158,-0.314738,-2.417902,-9.023549,-7.733927,-3.989785,-9.358799,5.487591,-9.987548],[4.895771,-2.481840,-6.368494,9.283605,-4.404955,-6.740018,-8.059882,-2.097152,8.430741],[6.903095,-9.148066,-7.764734,2.515306,-7.317147,-6.001255,6.977283,5.142075,4.144162]],[[-7.868226,3.928552,1.707048,-3.039868,-3.547598,-3.080752,0.024700,4.494651,6.451789],[-9.763248,-5.289201,5.336870,6.524082,-5.792922,-5.676911,-4.095909,-3.146713,0.198026],[0.608824,6.604297,-5.619497,0.373627,-7.556513,8.322946,8.977795,-8.465762,9.214086],[-1.871207,-5.149630,9.578869,-6.909971,2.688930,-9.523647,-9.713490,-1.853851,7.608029],[7.825269,-8.919028,7.952917,4.755292,0.172289,-0.728438,6.099699,3.147821,-7.478805],[-2.849199,-1.719002,9.828456,-1.876000,1.653463,-8.884412,-7.869489,5.914446,1.183494],[-0.298575,9.179562,-0.338984,-9.694928,-0.694659,3.072603,5.797256,0.584127,3.958537],[-6.663817,-7.247050,6.401757,-1.655278,-2.784268,-1.968614,-4.556296,-5.581129,8.897527],[3.839242,-7.539526,2.860720,-6.966127,3.056428,4.080052,1.333905,4.892343,4.000705],[-7.740060,-7.946512,6.328003,-1.635794,2.451231,-6.674630,6.239894,0.040246,8.631959],[3.064362,4.016703,-1.363689,7.538739,-3.690953,2.332861,1.103005,9.619382,8.914588],[3.998694,-7.908144,-2.463866,8.450618,-7.744688,-4.099739,0.011603,-1.134230,-8.962975],[2.544254,-4.292261,-4.543975,3.969189,5.199031,4.312506,-9.137707,-7.553979,-5.538579],[5.429963,-1.079761,-7.312743,6.861752,-7.776812,-4.069853,-3.685037,-1.575834,4.366644],[1.177348,2.822922,6.599738,7.803395,0.410530,-3.083381,-4.590961,0.427310,7.254862],[3.986442,8.497491,-4.711905,0.833271,-0.808235,1.337634,-5.446913,-0.289438,4.225194]],[[2.386448,6.949523,-0.819759,-2.455902,5.656169,1.663037,3.959483,-8.696315,-0.645057],[-3.798071,7.108124,-2.311311,-3.470236,5.302579,-5.066142,-1.555130,6.904151,-0.906357],[1.087135,6.154142,-1.840480,0.126954,5.188971,-3.683129,2.873800,7.286352,4.848319],[5.667825,8.153334,0.826649,-4.091312,4.378326,9.651993,3.099093,-9.131967,-6.183232],[-4.983914,-4.148880,8.813972,6.885164,7.331338,7.519379,-6.647484,-5.229768,-1.396618],[1.601523,6.561381,-4.622432,-8.565488,9.180941,-8.901142,1.409140,9.036832,9.814447],[5.758441,6.129466,6.972410,0.917302,-0.295226,9.037777,6.151822,8.472707,5.661931],[-4.076613,8.825310,-9.695243,5.849669,-2.723942,0.366877,2.583217,0.542042,9.672751],[7.867257,-1.693718,-8.257403,-0.701747,0.654330,-8.998409,-6.080101,-2.950244,-9.188232],[0.849345,4.075068,6.169614,8.632607,0.935794,8.423213,-3.078275,8.800863,-0.091778],[-3.996563,-8.586425,-2.084165,0.570031,3.335565,9.005218,-8.304061,2.464193,-3.249585],[0.681389,0.472806,-7.326550,0.982775,1.357416,-6.388646,5.150230,7.035185,-2.800612],[-1.491545,-1.688232,6.584812,-7.921573,-0.143240,0.676468,-6.849221,1.762919,2.031848],[-2.185879,-0.614228,-1.461095,-5.746762,6.359286,2.317506,6.859324,5.975535,7.013274],[2.224306,9.077557,3.275411,1.892676,4.694432,8.408192,-9.226660,2.295288,1.284076],[8.351958,3.234980,3.381847,-1.296090,1.229664,-9.512524,2.565308,-2.898503,-5.131966]],[[2.067646,6.813670,-4.692218,-1.976051,-9.291148,3.521753,7.244255,7.279910,6.212248],[7.447746,-5.296667,-9.204775,1.264519,-0.988973,-6.177829,1.611909,-7.553072,-1.368024],[0.333986,-8.582463,-2.978414,7.728451,-8.292433,4.723001,-4.913147,-4.937896,6.904346],[5.386180,-7.399782,-8.543162,-7.749468,-9.404174,-1.685534,9.680481,7.662092,2.523333],[9.628939,4.057456,-5.237212,-0.393747,0.600466,3.960056,8.481686,9.547480,-3.936949],[-2.854035,1.613666,-4.066397,6.448539,3.316695,3.795532,-5.758313,-1.789101,-4.928322],[-3.611022,2.877584,5.075607,-8.641521,8.470110,-8.968253,3.440296,3.442737,-6.200343],[-2.805456,8.814807,-6.626327,0.373709,-1.197759,1.119579,-7.710711,5.631260,8.396485],[-7.712185,7.502431,-9.656811,4.702286,-9.797418,-0.450477,-1.659665,-4.542618,8.752854],[-5.552742,2.339198,-3.385247,-0.185097,6.088291,-7.896447,-2.928904,-4.141348,-7.984381],[-6.038127,1.751401,-4.314746,5.673497,-1.208006,1.240812,-1.637925,-7.133401,-9.105157],[-3.874031,4.096263,-7.674771,3.446883,-8.236411,-4.773658,-7.309346,2.629741,3.181294],[9.788306,-9.543616,-6.234531,4.613397,-3.248003,-4.620151,-2.910509,2.043552,-7.174266],[2.633228,-5.659752,-0.768811,3.762465,3.033073,-7.173605,-2.475435,5.181015,2.239435],[-5.638836,1.791314,6.848651,3.059410,-9.828731,1.134854,-7.643575,-9.494082,2.946022],[7.599345,6.006599,2.892773,2.182971,-3.758361,-2.529621,-5.838123,-5.491069,4.231430]],[[-6.106406,-3.449484,1.799186,5.023769,-4.584802,3.628752,-6.630306,-6.117302,0.050876],[4.753127,-3.674008,-1.265401,-1.563325,1.857476,-9.188866,-5.140179,-9.708027,7.230589],[-2.050380,5.900413,4.557527,-0.364130,-6.108018,6.429555,-0.934932,-3.613778,-1.182682],[-7.076287,-2.945392,-0.850930,-3.630225,6.010162,1.157509,8.844290,3.897199,-2.490886],[8.242776,6.928074,-8.730308,1.951869,3.727543,0.942665,-5.321828,-7.497421,5.915860],[6.460865,4.911655,-1.337224,-4.263515,7.435999,8.566949,-2.298518,-9.907110,-0.450922],[-2.891704,-4.805596,9.617169,-0.736420,2.668887,-9.224487,0.014136,-4.973468,-5.872710],[6.545702,-0.306461,0.391805,-8.395918,-7.850648,7.826203,3.497959,2.020466,8.018721],[3.696085,-7.727361,7.119506,-5.305057,3.657169,0.729658,3.113474,-5.131849,4.645322],[8.961091,4.322671,1.144802,-8.161532,-0.985038,-3.524109,6.499489,7.589070,-8.804918],[-4.578008,6.438593,1.896310,-7.882608,7.274116,2.224477,-9.463443,9.199639,-5.983897],[-6.056210,2.040219,-0.781891,-1.717142,-8.289312,-6.196605,-7.024211,1.050889,-4.254011],[3.708161,4.765984,7.931563,3.003561,-3.256064,2.471943,1.396268,5.190416,-6.456994],[-3.830107,6.512404,1.687942,6.860634,4.963403,4.326983,-0.460821,-7.792889,-0.630827],[-3.702864,4.424020,-2.301517,7.448143,-4.458681,-4.092034,3.757469,4.634628,2.917103],[-3.432082,1.643620,9.770204,5.908839,9.374260,-9.134835,2.142976,5.934804,6.654691]],[[2.857650,-8.106350,9.702708,-1.623921,7.804177,-9.969073,-4.428570,-3.056963,-0.011494],[2.851815,9.855906,6.927336,-8.864565,-2.284246,8.730427,0.197234,-3.560981,-6.593453],[-8.723167,-1.740477,-5.950215,4.803343,1.417851,-1.597137,5.625064,2.511773,-8.488646],[-7.550386,7.305920,8.922034,-0.935658,7.514309,-3.640226,3.146008,6.908275,-8.002797],[-8.699148,-0.483321,7.513688,0.104998,-2.143319,4.000900,9.461466,3.667839,-1.599643],[0.085115,6.378420,-8.851922,-2.175946,8.170515,9.385327,1.531056,2.654984,-4.978309],[0.401706,1.273091,-7.063597,-2.938486,1.918991,0.025693,-0.051945,-3.603186,6.430315],[4.570427,-9.379686,9.075515,9.837607,8.876641,6.099062,5.397872,0.822436,-2.598847],[-2.546215,6.833542,2.981450,5.586879,0.462922,1.779075,-5.852264,-5.773924,0.681121],[1.361578,7.287658,0.462647,-1.102166,9.739893,-2.341456,5.591458,-4.927980,-0.882305],[8.634669,-0.053616,2.098377,-8.565130,-4.895620,0.932268,-7.703576,-5.493529,1.881835],[-4.380632,8.555934,-1.146099,-8.033548,-0.015797,-7.951825,-9.913035,-4.177116,5.914036],[-6.563102,-5.877255,-1.471132,7.011621,-8.079839,-3.887897,8.020748,3.002131,-0.337412],[-0.353779,5.759578,-6.280732,3.936461,-7.144969,9.286635,-9.799241,9.469668,-4.778942],[-3.997297,-8.125246,-4.368291,-6.578531,-5.683203,-5.398258,1.315103,7.133364,0.694937],[2.903772,-4.162024,-0.501817,5.106105,8.209967,0.097034,-1.084472,0.573282,-4.115650]],[[-6.634497,-9.842400,-4.833613,0.329150,4.240701,3.877231,-2.336323,-0.951235,-6.444847],[-2.212221,3.076922,-1.045230,-7.397233,-6.478176,4.324792,1.168303,2.802987,-5.324415],[-6.502996,-8.261900,-9.982549,-6.386460,-8.272392,0.066503,3.589750,-7.479492,-4.545045],[-3.670640,7.308200,-5.642581,8.224838,-8.461659,6.618482,5.862581,3.456094,-2.554859],[1.265144,-8.341703,6.459311,-4.143675,-9.003123,9.466800,4.400863,1.349358,-9.735674],[2.156664,2.190594,-0.917482,7.044496,-1.149019,5.832213,-3.285947,9.540765,-3.976645],[8.767664,6.384258,5.464883,-1.373842,-6.011708,-0.432092,0.528013,5.932830,3.509080],[-7.386594,8.360973,4.924905,4.564409,2.194150,3.806240,7.571403,-8.236142,-3.738290],[1.300066,-4.610021,-1.278570,-3.402859,-0.529535,-0.008253,6.647365,-5.106615,2.538231],[-0.386224,-1.742405,7.867148,3.794399,-3.321715,3.343481,-7.348564,5.451004,5.043134],[9.259975,7.223864,2.970987,4.632241,-0.060290,8.933251,-8.556325,-8.445029,8.545126],[-9.388791,-8.473283,-6.039668,6.973695,-9.868473,4.266453,-7.714073,3.737681,-8.306690],[2.755917,-3.338662,-1.967739,3.061569,6.309114,2.456205,3.871593,3.060827,-1.038200],[8.929714,-5.436912,-4.130474,5.827533,-2.669419,-0.788096,3.866221,7.834991,-6.149322],[9.425299,-7.747517,6.097806,4.114287,7.533012,9.815676,-5.396791,7.919514,-3.065682],[-0.095808,-3.394972,0.228931,-8.614215,-8.997583,-8.828471,7.743074,-2.619914,-5.545683]],[[1.518548,-3.089168,-5.887771,-3.327382,-0.569244,-0.069649,4.639984,7.191673,7.612774],[-1.050712,1.493446,2.153463,8.193333,-8.631939,-3.674940,-8.339631,-4.785131,-3.079141],[-5.077515,-2.444247,-3.973827,9.175831,2.802208,3.511759,6.738107,-3.711268,-9.374512],[-2.412766,-0.038495,1.524979,5.932709,-6.712008,-6.162828,3.528919,2.698114,-2.965857],[-7.769507,9.621051,-5.789717,-6.865265,8.338507,-7.823479,7.875291,6.037522,4.645668],[-3.849815,-8.817023,5.394680,-2.321606,1.882064,-4.106909,4.349260,-8.873920,-1.244746],[-9.242173,-0.853180,-3.316874,0.466899,-8.579512,5.715918,-9.016091,-9.350285,2.332973],[0.489030,-7.433076,1.218373,-4.140709,6.772049,-7.935417,8.815968,4.441870,-8.002987],[3.854523,1.619695,-0.878039,2.365116,-7.389452,-5.221008,2.864088,9.142285,-2.627251],[-6.235413,-9.029416,9.654328,-8.493599,9.155212,3.347874,4.538043,1.490989,-9.664845],[3.467016,-0.871946,4.043556,7.425784,9.313848,1.631853,-7.417691,-5.702609,9.787750],[6.306159,1.117440,7.135399,-3.627065,6.201284,5.416488,1.927269,3.641199,5.582549],[-2.347363,-9.476994,5.762082,-9.938415,0.291096,-0.473610,-4.153181,-7.479635,-6.741065],[-2.405918,-3.412637,1.117333,9.123435,4.079506,-3.331652,-8.292016,3.624398,-9.115966],[-0.492036,-8.879980,-6.873761,-2.494190,-9.615736,-6.930006,7.766879,8.061689,-7.345881],[4.081904,-2.371993,-0.775111,9.159622,8.163342,2.663115,-9.766529,-2.506757,-5.538401]]], dtype = "float64")#candidate|1241|(14, 16, 9)|const|float64
bop_1242 = relay.bitwise_xor(uop_1216.astype('uint8'), const_1241.astype('uint8')) # shape=(14, 16, 9)
bop_1245 = relay.bitwise_xor(uop_1218.astype('uint8'), const_1241.astype('uint8')) # shape=(14, 16, 9)
var_1256 = relay.var("var_1256", dtype = "uint32", shape = (14, 16, 7))#candidate|1256|(14, 16, 7)|var|uint32
bop_1257 = relay.greater_equal(bop_1229.astype('bool'), var_1256.astype('bool')) # shape=(14, 16, 7)
bop_1260 = relay.greater_equal(bop_1232.astype('bool'), var_1256.astype('bool')) # shape=(14, 16, 7)
func_1078_call = mod.get_global_var('func_1078')
func_1081_call = mutated_mod.get_global_var('func_1081')
const_1263 = relay.const([-6,2,4,3,4,2,-4,-7,1,4,-5,2,-8,-6,-5,-8,5,-8,-5,-7,-7,-8,9,7,-5,7,2,7,-8,-2,10,-5,-4,-6,-4,-10,1,1,-1,-2,-7,-8], dtype = "int64")#candidate|1263|(42,)|const|int64
call_1262 = relay.TupleGetItem(func_1078_call(relay.reshape(const_1263.astype('int64'), [14, 3])), 1)
call_1264 = relay.TupleGetItem(func_1081_call(relay.reshape(const_1263.astype('int64'), [14, 3])), 1)
uop_1285 = relay.exp(call_1238.astype('float32')) # shape=(8, 9, 10)
uop_1287 = relay.exp(call_1240.astype('float32')) # shape=(8, 9, 10)
bop_1288 = relay.left_shift(bop_1242.astype('int16'), uop_1216.astype('int16')) # shape=(14, 16, 9)
bop_1291 = relay.left_shift(bop_1245.astype('int16'), uop_1218.astype('int16')) # shape=(14, 16, 9)
const_1296 = relay.const([[[1,-7,-9,3,-5,-2,9,-2,7],[-8,-6,10,-6,-8,-4,-6,-2,3],[-1,-1,-9,7,-7,8,-10,7,-1],[-10,3,-7,-10,-9,-7,-8,-3,7],[2,-2,2,-2,-4,-8,9,-2,-6],[9,-4,-10,5,1,7,-9,-1,9],[-1,-8,2,-2,6,3,-2,9,1],[9,9,3,8,-6,-5,4,6,4],[2,8,1,9,4,-1,9,-2,-2],[6,-8,-2,-7,-10,-10,2,-2,9],[4,9,8,-4,2,7,2,5,-8],[-3,-3,8,9,7,-2,5,4,3],[-3,-1,4,10,-3,-8,-4,-6,5],[-2,5,6,-6,1,-4,-4,-3,2],[4,5,-7,-6,5,-9,5,-5,-1],[-8,-1,-8,5,-9,-6,-8,-5,8]],[[8,-4,-6,-3,4,-3,-8,-3,10],[-1,-1,3,-5,10,6,1,-3,-6],[6,2,-7,5,6,2,9,-10,8],[-10,4,1,9,3,5,-1,-9,2],[-9,-9,5,2,-7,-4,6,7,5],[2,-10,-6,-4,-7,-3,7,8,-9],[-9,6,-3,-2,8,3,-9,-9,-9],[7,5,8,-5,-10,-3,5,-9,-8],[3,3,1,-7,10,1,-3,7,-2],[-4,10,-7,4,-4,3,5,-2,-9],[6,-3,-4,-8,-3,-2,9,-2,-1],[-3,3,8,-9,-3,-3,4,-2,6],[1,10,-2,-1,-8,2,-3,4,2],[3,-5,2,3,-9,-3,9,-2,10],[-3,3,-5,3,-1,6,-9,5,-7],[3,-3,5,7,1,-6,1,5,1]],[[2,10,10,-7,6,4,10,-5,10],[-10,7,6,6,3,5,1,-9,-1],[6,-10,1,-10,-9,-6,9,6,9],[9,3,-7,7,6,-9,-5,-6,-9],[-8,9,-6,-6,1,10,8,-5,1],[-9,-8,-4,-3,-3,-5,7,-1,-1],[-9,3,1,-8,-1,9,-5,-2,-1],[-1,7,-3,-6,6,-7,6,5,6],[3,6,8,-7,2,-7,8,-9,-2],[9,-3,7,3,-5,-5,6,-4,-3],[8,5,-1,-4,2,4,-6,-6,-8],[-10,-8,-1,6,4,-10,2,7,7],[-4,9,-4,2,7,-10,10,-8,-5],[-5,6,2,-4,-3,4,3,3,-3],[-4,-7,-10,-8,5,1,4,-2,3],[6,8,2,-1,1,-4,9,1,1]],[[-2,-4,-4,8,8,10,-4,1,-8],[-8,-8,3,5,-2,-9,-10,1,-8],[6,4,-6,9,1,-3,-5,-7,2],[-4,3,5,-8,-3,-6,5,6,8],[-4,-1,-7,3,5,-4,2,-4,-4],[7,2,1,8,2,5,-6,-6,-3],[1,-6,10,5,-6,6,-8,1,2],[9,-6,-4,2,-10,-8,3,1,-8],[-7,-2,4,4,1,-3,7,-3,-5],[-6,10,5,-10,-7,-8,-1,-10,10],[3,7,1,-8,-3,3,-1,-5,4],[-7,10,5,-3,-5,-3,8,-10,1],[4,-2,-2,5,4,4,-1,2,9],[1,6,-6,10,-5,6,2,7,6],[-8,3,-2,10,10,-7,9,-10,2],[4,-7,-2,4,6,9,1,3,-9]],[[-2,8,-1,2,3,-5,-7,6,-7],[-10,2,2,-6,-7,10,-5,5,6],[-10,-5,10,7,10,-1,10,8,7],[-1,7,-3,-6,-9,4,8,-4,7],[5,-1,-5,-2,6,-7,3,8,-10],[7,1,-10,3,-1,10,-3,3,-10],[8,7,5,9,-4,8,-9,-3,-10],[9,8,10,-9,-5,-9,-5,8,-5],[6,2,2,-5,4,-3,-10,10,2],[7,5,6,-6,2,-2,8,-8,9],[10,-1,3,-1,-6,-2,4,-2,1],[2,-10,3,1,2,-2,1,5,8],[-8,1,-1,2,2,6,-1,-1,3],[5,-5,-3,-5,1,-8,10,-8,-10],[3,4,-6,-9,1,2,-3,-7,-3],[5,9,-10,5,-3,-10,-1,4,10]],[[-8,-1,-8,2,-9,10,-3,1,-3],[7,2,10,-2,7,-6,10,-6,10],[3,7,-3,7,4,-6,-1,-6,2],[5,4,-1,-10,4,-1,2,-8,-7],[6,5,-2,-8,5,-3,7,-10,-1],[1,2,-9,-2,7,10,1,8,7],[-8,-2,-6,-9,-5,5,-1,-9,-2],[6,-7,-5,8,4,-1,-7,-3,-3],[6,-5,-2,8,7,-8,6,-4,-10],[-2,5,6,5,7,4,1,2,2],[-4,-9,10,1,-3,8,4,-2,8],[-4,-3,2,-1,-7,7,-6,10,4],[-3,3,-10,1,-5,-4,3,3,-9],[1,-10,-2,8,9,-3,7,8,4],[-4,-3,-10,-9,4,-6,9,-2,8],[5,2,-3,9,-1,-1,-6,-1,-4]],[[-7,-1,7,6,7,-4,-4,10,-4],[-2,-4,-1,-9,-1,-7,1,-8,-7],[-10,-10,10,1,-4,1,3,-1,6],[1,9,8,-7,-10,-1,-7,-9,-7],[10,5,8,-1,9,7,4,-3,-2],[-10,9,-1,6,-1,-6,4,-8,-9],[4,1,-2,3,8,2,8,-6,-2],[7,-6,1,-9,-7,5,-5,-4,4],[-5,-3,-4,3,-6,1,10,4,-8],[-8,-1,4,-1,-4,-5,2,-7,5],[1,-5,8,5,-6,4,3,1,-8],[-9,-3,-5,-3,-2,-5,4,-4,-3],[9,-2,6,-8,-9,4,-5,-8,7],[-9,-2,1,-8,5,7,8,-7,-10],[-8,1,-9,-7,-9,-3,10,-5,6],[2,-2,-8,7,5,-8,-5,5,-6]],[[-5,9,7,8,-7,-10,2,7,-10],[-5,2,-9,4,9,-1,4,-7,10],[4,-1,-3,-3,4,-9,4,-9,3],[-7,3,-6,10,-10,4,10,8,-10],[4,-5,1,3,7,10,-10,-7,-4],[7,7,-10,7,-9,-1,7,-10,4],[-6,5,-8,3,3,-1,5,10,7],[-10,-1,-3,-6,8,1,-7,8,10],[8,-4,-3,7,-6,1,6,10,-10],[10,3,4,-1,-1,-5,-4,4,2],[-6,-5,-6,8,10,1,-10,10,2],[-9,6,-1,3,-4,7,4,6,6],[8,8,-1,-7,-2,6,10,-7,7],[7,-5,-7,-6,-6,2,4,7,7],[-1,-10,-1,8,-4,-10,-5,3,8],[4,2,-6,-3,4,4,-5,6,-9]],[[2,10,2,-8,-5,-7,-10,-8,-1],[5,-7,-2,-10,6,-4,5,-4,-3],[3,3,2,-2,3,7,4,-9,-2],[-2,10,10,-4,-2,-8,-5,8,-8],[2,-7,1,10,-5,-6,2,9,7],[7,-2,2,-6,10,8,8,-9,-6],[6,-6,5,-8,-2,-8,-6,-2,4],[10,-4,-5,8,2,-8,-6,4,-7],[-3,-7,-6,6,10,2,-4,5,3],[-10,-5,8,1,-2,-7,-8,-6,7],[-8,5,9,-3,2,-10,-9,-7,5],[10,1,-2,10,9,3,-9,-7,2],[-4,10,2,-2,-2,-7,-6,2,-6],[-6,-4,-4,10,-1,-8,6,5,-9],[-8,10,-1,7,-2,3,-5,6,-3],[-8,4,4,2,5,6,6,6,-5]],[[3,-2,-5,4,-3,1,3,-3,-1],[-8,-6,10,-8,7,-2,-8,-8,-9],[7,-3,6,-8,-5,5,-7,7,-7],[-5,-3,8,7,-10,6,8,-5,-4],[4,1,5,3,8,-7,-9,1,-7],[7,4,-8,9,6,6,-6,-3,2],[-2,4,-7,6,-5,9,-5,-5,6],[-1,-1,2,6,2,4,9,-10,-7],[-4,-4,9,1,2,4,1,-4,2],[-2,3,-8,-7,-4,-10,6,3,4],[-3,-7,-1,4,8,-6,3,7,-1],[2,3,-7,-6,-8,-4,10,-7,2],[-10,10,4,8,-4,-3,1,-5,3],[9,6,8,-10,-7,7,-3,-8,5],[-8,1,-10,-9,2,-5,-7,-6,-2],[2,3,8,-1,-7,5,2,6,7]],[[10,7,1,8,-8,2,-9,3,6],[-3,4,9,-1,3,6,3,8,-7],[4,7,-2,-4,-5,-2,-8,-1,5],[2,-1,-5,-6,1,10,1,5,-8],[8,5,-8,-6,4,-1,-5,8,7],[-3,4,7,1,-10,7,-3,-9,-10],[-7,-5,4,-1,8,-5,3,-10,-1],[2,4,-10,9,9,2,-7,6,2],[-8,8,-2,-3,-10,-3,7,-5,-9],[-5,6,8,-1,-9,-7,-6,-3,10],[-7,2,3,8,-5,4,-8,4,-1],[2,-7,3,-1,6,-3,-1,9,-8],[1,6,-1,-9,7,2,6,-4,-6],[-7,-5,-1,1,-9,-5,5,-4,-3],[-1,-3,8,10,1,6,-10,6,-6],[-2,-1,7,9,-4,-5,8,-1,-8]],[[-8,2,-2,-9,-3,-8,4,-6,-2],[-2,9,3,-7,1,4,7,-8,5],[9,-2,1,-1,-1,-1,-4,-3,-3],[8,-1,-7,10,9,5,10,8,-6],[4,-5,6,8,-2,-2,9,-4,1],[-5,7,9,-8,6,10,6,-9,7],[-10,7,7,-7,-1,7,4,3,6],[1,-8,3,-9,2,-1,-5,-3,2],[-6,-6,-10,9,5,-3,-1,-6,-1],[6,9,10,-6,-2,9,-1,-3,-10],[-2,-6,10,-7,-6,-1,-5,9,-7],[-5,-3,-6,-10,-5,-5,-5,5,-3],[3,-9,6,-9,9,4,-8,10,5],[4,-2,8,6,-4,9,10,-9,4],[-9,6,-1,-5,-1,-10,1,-2,3],[-10,-7,1,-4,-9,-10,-10,-6,-8]],[[-9,5,7,6,9,1,-2,-10,7],[-5,4,4,9,-4,2,-9,6,1],[-1,-3,5,-2,-7,5,6,5,-6],[-6,4,-7,6,7,3,-7,-3,3],[-6,-4,-7,-5,9,-5,-10,9,4],[10,5,4,-3,10,-3,5,-8,-2],[-8,-10,-8,3,9,-2,1,3,-7],[-3,9,-8,8,4,2,3,-5,-8],[-1,3,-4,-2,-4,10,3,-4,7],[-5,-5,1,6,-7,8,-6,-8,-6],[5,-7,3,2,1,8,-8,-10,-3],[10,4,2,5,-10,8,-5,-4,-2],[2,-4,-2,8,5,-2,-1,-8,4],[-7,-10,3,-3,-3,-3,-7,-10,5],[-1,-9,4,-5,-6,10,-6,10,-3],[4,-1,6,-1,-8,-2,-1,7,9]],[[3,-6,10,-10,10,2,3,3,4],[-8,10,6,-1,5,8,1,2,2],[-1,10,-2,-9,8,-1,-9,7,-6],[-3,9,7,6,9,-5,-9,5,2],[-2,2,-10,2,3,1,2,6,-2],[9,3,5,10,4,5,-3,-6,-9],[-2,-8,-10,-4,-2,6,-5,3,6],[6,4,-3,8,8,-5,-10,7,9],[6,-4,6,-2,6,1,-5,-9,-8],[10,10,-8,4,-9,-6,2,4,10],[-5,-10,-10,-4,7,4,6,9,-1],[-1,9,-7,8,8,-5,-1,3,-3],[2,7,-1,-5,4,-2,-3,1,-3],[-6,10,-3,2,-5,-5,9,-6,-7],[9,3,-7,10,10,-1,-10,3,3],[-4,2,-2,-10,4,-9,-2,-4,2]]], dtype = "int16")#candidate|1296|(14, 16, 9)|const|int16
bop_1297 = relay.equal(bop_1288.astype('bool'), relay.reshape(const_1296.astype('bool'), relay.shape_of(bop_1288))) # shape=(14, 16, 9)
bop_1300 = relay.equal(bop_1291.astype('bool'), relay.reshape(const_1296.astype('bool'), relay.shape_of(bop_1291))) # shape=(14, 16, 9)
bop_1301 = relay.logical_or(bop_1242.astype('bool'), bop_1229.astype('bool')) # shape=(14, 16, 9)
bop_1304 = relay.logical_or(bop_1245.astype('bool'), bop_1232.astype('bool')) # shape=(14, 16, 9)
bop_1307 = relay.bitwise_xor(uop_1285.astype('int16'), relay.reshape(call_1238.astype('int16'), relay.shape_of(uop_1285))) # shape=(8, 9, 10)
bop_1310 = relay.bitwise_xor(uop_1287.astype('int16'), relay.reshape(call_1240.astype('int16'), relay.shape_of(uop_1287))) # shape=(8, 9, 10)
func_359_call = mod.get_global_var('func_359')
func_363_call = mutated_mod.get_global_var('func_363')
var_1315 = relay.var("var_1315", dtype = "float32", shape = (15,))#candidate|1315|(15,)|var|float32
call_1314 = func_359_call(relay.reshape(var_1315.astype('float32'), [15,]), relay.reshape(var_1315.astype('float32'), [15,]), )
call_1316 = func_359_call(relay.reshape(var_1315.astype('float32'), [15,]), relay.reshape(var_1315.astype('float32'), [15,]), )
bop_1317 = relay.mod(bop_1219.astype('float32'), relay.reshape(uop_1216.astype('float32'), relay.shape_of(bop_1219))) # shape=(14, 16, 1)
bop_1320 = relay.mod(bop_1222.astype('float32'), relay.reshape(uop_1218.astype('float32'), relay.shape_of(bop_1222))) # shape=(14, 16, 1)
output = relay.Tuple([call_1234,var_1235,const_1236,var_1239,bop_1257,call_1262,const_1263,bop_1297,bop_1301,bop_1307,call_1314,var_1315,bop_1317,])
output2 = relay.Tuple([call_1237,var_1235,const_1236,var_1239,bop_1260,call_1264,const_1263,bop_1300,bop_1304,bop_1310,call_1316,var_1315,bop_1320,])
func_1322 = relay.Function([var_1235,var_1239,var_1256,var_1315,], output)
mod['func_1322'] = func_1322
mod = relay.transform.InferType()(mod)
mutated_mod['func_1322'] = func_1322
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1322_call = mutated_mod.get_global_var('func_1322')
var_1324 = relay.var("var_1324", dtype = "uint32", shape = ())#candidate|1324|()|var|uint32
var_1325 = relay.var("var_1325", dtype = "float32", shape = (720,))#candidate|1325|(720,)|var|float32
var_1326 = relay.var("var_1326", dtype = "uint32", shape = (14, 16, 7))#candidate|1326|(14, 16, 7)|var|uint32
var_1327 = relay.var("var_1327", dtype = "float32", shape = (15,))#candidate|1327|(15,)|var|float32
call_1323 = func_1322_call(var_1324,var_1325,var_1326,var_1327,)
output = call_1323
func_1328 = relay.Function([var_1324,var_1325,var_1326,var_1327,], output)
mutated_mod['func_1328'] = func_1328
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1360 = relay.var("var_1360", dtype = "int32", shape = (8,))#candidate|1360|(8,)|var|int32
var_1361 = relay.var("var_1361", dtype = "int32", shape = (8,))#candidate|1361|(8,)|var|int32
bop_1362 = relay.logical_xor(var_1360.astype('int32'), relay.reshape(var_1361.astype('int32'), relay.shape_of(var_1360))) # shape=(8,)
func_259_call = mod.get_global_var('func_259')
func_264_call = mutated_mod.get_global_var('func_264')
var_1366 = relay.var("var_1366", dtype = "int32", shape = (225,))#candidate|1366|(225,)|var|int32
var_1367 = relay.var("var_1367", dtype = "float32", shape = (288,))#candidate|1367|(288,)|var|float32
const_1368 = relay.const([[5,-5,4,4,10,2,3,-6,-1,3,7,3,1,6,6,-1,-4,2],[4,1,7,5,-7,6,-2,-4,-8,-8,-8,5,8,7,-4,10,-4,-3],[-6,2,1,-3,-4,4,5,3,8,-9,5,8,6,7,-1,-10,9,2],[7,-5,-2,3,10,-1,5,5,-8,9,-1,2,7,10,-2,-7,10,10],[-8,-9,2,-5,2,6,2,-1,-4,-4,-5,-8,-9,-7,-5,-10,3,-1],[9,-1,7,10,5,-2,-4,-9,-1,9,-1,8,5,-9,7,-1,-8,-9],[2,-4,-1,-5,3,8,-2,-5,-1,-9,10,5,9,-6,-10,2,4,-6],[-2,-2,6,10,-4,9,5,4,-5,5,-4,-1,-7,4,-10,-8,3,9]], dtype = "int64")#candidate|1368|(8, 18)|const|int64
call_1365 = relay.TupleGetItem(func_259_call(relay.reshape(var_1366.astype('int32'), [15, 15]), relay.reshape(var_1366.astype('int32'), [15, 15]), relay.reshape(var_1367.astype('float32'), [288,]), relay.reshape(const_1368.astype('int64'), [144,]), ), 1)
call_1369 = relay.TupleGetItem(func_264_call(relay.reshape(var_1366.astype('int32'), [15, 15]), relay.reshape(var_1366.astype('int32'), [15, 15]), relay.reshape(var_1367.astype('float32'), [288,]), relay.reshape(const_1368.astype('int64'), [144,]), ), 1)
func_671_call = mod.get_global_var('func_671')
func_674_call = mutated_mod.get_global_var('func_674')
const_1372 = relay.const([6,7,-3,-8,2,10,-7,-4,2,-2,-8,-3,5,3,3,-2,-1,4,7,-8,-6,-4,-3,-3,-8,8,-6,-4,10,-10,1,-3,-9,8,-8,7,-7,8,-1,7,-4,5,5,-10,9,7,4,-4,-6,2,-1,10,2,-1,9,-2,10,-4,9,9,5,-7,9,-3,6,-1,-6,6,-10,-1,-5,-3,-2,-10,-10,6,9,8,7,-3,9,-9,-6,1], dtype = "uint64")#candidate|1372|(84,)|const|uint64
call_1371 = func_671_call(relay.reshape(const_1372.astype('uint64'), [14, 6]))
call_1373 = func_671_call(relay.reshape(const_1372.astype('uint64'), [14, 6]))
bop_1389 = relay.maximum(var_1361.astype('int16'), relay.reshape(bop_1362.astype('int16'), relay.shape_of(var_1361))) # shape=(8,)
output = relay.Tuple([call_1365,var_1366,var_1367,const_1368,call_1371,const_1372,bop_1389,])
output2 = relay.Tuple([call_1369,var_1366,var_1367,const_1368,call_1373,const_1372,bop_1389,])
func_1396 = relay.Function([var_1360,var_1361,var_1366,var_1367,], output)
mod['func_1396'] = func_1396
mod = relay.transform.InferType()(mod)
mutated_mod['func_1396'] = func_1396
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1396_call = mutated_mod.get_global_var('func_1396')
var_1398 = relay.var("var_1398", dtype = "int32", shape = (8,))#candidate|1398|(8,)|var|int32
var_1399 = relay.var("var_1399", dtype = "int32", shape = (8,))#candidate|1399|(8,)|var|int32
var_1400 = relay.var("var_1400", dtype = "int32", shape = (225,))#candidate|1400|(225,)|var|int32
var_1401 = relay.var("var_1401", dtype = "float32", shape = (288,))#candidate|1401|(288,)|var|float32
call_1397 = func_1396_call(var_1398,var_1399,var_1400,var_1401,)
output = call_1397
func_1402 = relay.Function([var_1398,var_1399,var_1400,var_1401,], output)
mutated_mod['func_1402'] = func_1402
mutated_mod = relay.transform.InferType()(mutated_mod)
func_331_call = mod.get_global_var('func_331')
func_333_call = mutated_mod.get_global_var('func_333')
call_1435 = relay.TupleGetItem(func_331_call(), 0)
call_1436 = relay.TupleGetItem(func_333_call(), 0)
output = call_1435
output2 = call_1436
func_1441 = relay.Function([], output)
mod['func_1441'] = func_1441
mod = relay.transform.InferType()(mod)
output = func_1441()
func_1442 = relay.Function([], output)
mutated_mod['func_1442'] = func_1442
mutated_mod = relay.transform.InferType()(mutated_mod)
func_927_call = mod.get_global_var('func_927')
func_928_call = mutated_mod.get_global_var('func_928')
call_1451 = relay.TupleGetItem(func_927_call(), 3)
call_1452 = relay.TupleGetItem(func_928_call(), 3)
uop_1453 = relay.sqrt(call_1451.astype('float64')) # shape=(144,)
uop_1455 = relay.sqrt(call_1452.astype('float64')) # shape=(144,)
uop_1462 = relay.atanh(uop_1453.astype('float64')) # shape=(144,)
uop_1464 = relay.atanh(uop_1455.astype('float64')) # shape=(144,)
output = relay.Tuple([uop_1462,])
output2 = relay.Tuple([uop_1464,])
func_1466 = relay.Function([], output)
mod['func_1466'] = func_1466
mod = relay.transform.InferType()(mod)
output = func_1466()
func_1467 = relay.Function([], output)
mutated_mod['func_1467'] = func_1467
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1468 = relay.var("var_1468", dtype = "float32", shape = ())#candidate|1468|()|var|float32
var_1469 = relay.var("var_1469", dtype = "float32", shape = (7, 10))#candidate|1469|(7, 10)|var|float32
bop_1470 = relay.divide(var_1468.astype('float32'), var_1469.astype('float32')) # shape=(7, 10)
func_259_call = mod.get_global_var('func_259')
func_264_call = mutated_mod.get_global_var('func_264')
var_1474 = relay.var("var_1474", dtype = "int32", shape = (225,))#candidate|1474|(225,)|var|int32
var_1475 = relay.var("var_1475", dtype = "float32", shape = (288,))#candidate|1475|(288,)|var|float32
var_1476 = relay.var("var_1476", dtype = "int64", shape = (4, 36))#candidate|1476|(4, 36)|var|int64
call_1473 = relay.TupleGetItem(func_259_call(relay.reshape(var_1474.astype('int32'), [15, 15]), relay.reshape(var_1474.astype('int32'), [15, 15]), relay.reshape(var_1475.astype('float32'), [288,]), relay.reshape(var_1476.astype('int64'), [144,]), ), 3)
call_1477 = relay.TupleGetItem(func_264_call(relay.reshape(var_1474.astype('int32'), [15, 15]), relay.reshape(var_1474.astype('int32'), [15, 15]), relay.reshape(var_1475.astype('float32'), [288,]), relay.reshape(var_1476.astype('int64'), [144,]), ), 3)
var_1480 = relay.var("var_1480", dtype = "float32", shape = (7, 10))#candidate|1480|(7, 10)|var|float32
bop_1481 = relay.logical_and(var_1469.astype('bool'), relay.reshape(var_1480.astype('bool'), relay.shape_of(var_1469))) # shape=(7, 10)
output = relay.Tuple([bop_1470,call_1473,var_1474,var_1475,var_1476,bop_1481,])
output2 = relay.Tuple([bop_1470,call_1477,var_1474,var_1475,var_1476,bop_1481,])
func_1486 = relay.Function([var_1468,var_1469,var_1474,var_1475,var_1476,var_1480,], output)
mod['func_1486'] = func_1486
mod = relay.transform.InferType()(mod)
var_1487 = relay.var("var_1487", dtype = "float32", shape = ())#candidate|1487|()|var|float32
var_1488 = relay.var("var_1488", dtype = "float32", shape = (7, 10))#candidate|1488|(7, 10)|var|float32
var_1489 = relay.var("var_1489", dtype = "int32", shape = (225,))#candidate|1489|(225,)|var|int32
var_1490 = relay.var("var_1490", dtype = "float32", shape = (288,))#candidate|1490|(288,)|var|float32
var_1491 = relay.var("var_1491", dtype = "int64", shape = (4, 36))#candidate|1491|(4, 36)|var|int64
var_1492 = relay.var("var_1492", dtype = "float32", shape = (7, 10))#candidate|1492|(7, 10)|var|float32
output = func_1486(var_1487,var_1488,var_1489,var_1490,var_1491,var_1492,)
func_1493 = relay.Function([var_1487,var_1488,var_1489,var_1490,var_1491,var_1492,], output)
mutated_mod['func_1493'] = func_1493
mutated_mod = relay.transform.InferType()(mutated_mod)
func_331_call = mod.get_global_var('func_331')
func_333_call = mutated_mod.get_global_var('func_333')
call_1519 = relay.TupleGetItem(func_331_call(), 0)
call_1520 = relay.TupleGetItem(func_333_call(), 0)
uop_1521 = relay.acos(call_1519.astype('float64')) # shape=(14, 16, 1)
uop_1523 = relay.acos(call_1520.astype('float64')) # shape=(14, 16, 1)
var_1526 = relay.var("var_1526", dtype = "float64", shape = (14, 16, 10))#candidate|1526|(14, 16, 10)|var|float64
bop_1527 = relay.logical_and(uop_1521.astype('bool'), var_1526.astype('bool')) # shape=(14, 16, 10)
bop_1530 = relay.logical_and(uop_1523.astype('bool'), var_1526.astype('bool')) # shape=(14, 16, 10)
output = bop_1527
output2 = bop_1530
F = relay.Function([var_1526,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1526,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1526= np.array([[[-2.243364,-9.830264,8.518958,6.202072,-6.554578,2.334204,3.142349,5.975711,-3.777692,-8.672538],[6.498187,-5.247268,-0.144441,4.613158,-6.676643,7.896480,8.406652,8.141206,-7.766909,-1.272401],[2.400314,3.370928,-9.964576,6.503164,-0.529400,7.862606,-1.513935,0.778991,0.862594,-9.313461],[4.426253,-6.260702,0.205356,1.864973,6.928610,1.815911,-2.491859,6.825104,6.244919,7.632331],[-3.225343,0.486652,-4.510317,5.515481,-9.364130,4.601700,0.859834,-7.082729,-0.544335,-6.751713],[2.451160,-9.257301,-0.721666,-3.213948,-4.576096,-2.164684,9.559242,2.099353,-3.054462,7.108301],[0.585701,3.860818,0.724883,3.733740,5.349199,3.129258,3.822021,-2.489731,9.608254,-3.387190],[0.883248,1.376763,-0.869826,-6.258288,4.981163,4.042049,6.177669,-7.317585,-8.426562,-9.063982],[9.730638,-4.228739,1.632491,8.532496,-8.773478,-0.918059,-8.747351,-3.738864,-4.599424,6.850327],[-0.439715,-5.015418,6.029124,-1.370794,1.942730,-6.403196,-7.725496,9.989985,4.890216,6.148932],[-0.738999,0.762832,6.975262,-9.070118,7.211933,9.603349,-3.059815,9.393679,-9.806694,-7.224783],[-5.568045,7.605281,3.964108,-2.858745,0.340048,-3.650733,4.944579,-8.759676,1.479087,-1.497791],[-3.453587,3.452125,-9.998764,1.802182,-4.100708,-0.713905,-2.172529,-8.525995,-8.320804,-5.552324],[-9.218310,-3.428763,7.296521,-9.736071,8.033065,3.894860,-8.113313,-1.180904,9.910091,-5.292260],[2.371547,-9.423510,-8.018817,-5.056524,7.031441,-9.601887,7.532636,1.342595,6.953196,-8.131797],[-1.309179,-7.698938,-0.013035,7.521888,-5.438955,3.177297,-3.029489,8.981311,-0.218304,-1.792844]],[[1.889818,3.582801,8.387252,5.171259,-0.206403,4.407208,1.652909,-7.069631,-4.885055,4.137989],[8.921788,2.832596,-5.420033,-7.138249,-6.959223,-0.931896,9.224096,-9.041916,-5.229129,7.150989],[6.561699,6.538168,-2.815650,-1.059946,-6.694957,-2.046418,5.126842,9.210431,-8.919970,-8.452933],[-5.830131,-3.640306,2.041475,-8.662283,-2.932197,-8.331761,-3.244598,-7.566415,9.426997,-7.246060],[-3.282503,8.893191,-1.997388,0.548332,-4.524577,0.226062,-6.154074,-0.583073,-1.002206,5.821265],[-6.894503,8.038991,-8.903269,-2.211891,-5.398313,7.682673,1.976651,-4.888471,8.110472,-4.537883],[-2.739597,6.376899,-6.796825,-2.453791,-6.240369,8.709149,2.958475,-5.533476,7.892788,-6.531684],[5.514463,-4.719490,-8.963624,-2.894949,1.828731,-3.037063,-6.066157,-1.567958,8.706713,7.099530],[7.444547,3.622113,1.052557,-5.954579,-1.468302,5.888696,-7.726485,-1.500406,-9.779629,-7.260387],[5.994958,5.493689,-8.091285,-8.385350,-9.375425,-5.071965,4.152757,8.664466,4.047642,9.518133],[-6.376353,9.062927,-3.532737,5.019707,-8.574146,-1.367882,-2.687961,3.689872,-1.092653,3.297133],[3.892748,-1.555304,8.234978,-6.060603,6.647857,-5.410121,-7.905165,-1.854151,6.265986,2.067262],[9.533104,2.889908,-1.583665,7.025732,2.237960,6.536537,-3.092321,1.995212,1.929108,-3.013249],[0.621132,-1.937075,-8.221249,-7.137530,9.666101,5.590172,-7.811014,-4.526962,9.674324,9.217942],[-2.097423,1.659126,-1.817491,-3.693131,-5.750103,-9.384971,6.322634,2.315924,1.116282,4.634072],[-6.504258,0.604864,-6.784226,4.245737,5.955642,-1.373397,5.766650,-6.612020,-2.074020,-7.208210]],[[5.920876,-4.377233,5.668045,-2.305934,1.868179,6.671772,-4.592050,-5.760301,8.924735,-1.193309],[-4.785786,-2.095753,2.936339,2.897716,-7.673668,-6.170910,-1.220832,-3.094064,0.675241,-2.218298],[0.994981,-8.161840,9.725112,-4.495674,-5.297138,4.726427,1.551993,-2.071629,1.637265,-6.746189],[4.585015,1.890709,0.892753,-5.222910,5.893459,3.180338,-7.890069,-2.106999,5.461521,-4.857186],[-9.152901,-7.630776,-0.627458,-8.308945,0.825777,9.600234,5.992576,-8.085120,-7.407092,3.220539],[-5.268441,-5.345422,-2.397161,-7.911526,8.520000,0.405133,-2.954291,6.066427,3.464499,-3.874163],[-0.888314,8.768486,0.424724,-8.371492,-1.984287,4.637741,6.218983,-9.914483,-4.658467,6.892203],[9.806452,3.026964,-8.166885,-0.956899,-0.490135,-9.558665,-9.396859,6.140578,-7.281545,-3.202679],[1.104347,1.211184,0.949361,8.066447,-4.361083,-0.638920,1.124602,4.322118,-9.912934,0.859970],[6.078362,-5.761599,-3.816589,4.546635,3.338227,1.722580,3.210210,2.912240,-5.948059,-0.733715],[1.684232,7.057591,6.532078,6.798100,-0.089944,-5.263756,-3.245373,-3.260612,-9.591193,3.944124],[8.553665,8.615638,4.346899,2.463319,1.038436,-7.092288,-0.584255,5.975381,2.117974,-4.818680],[-8.823590,4.014074,7.579346,6.345697,0.563872,7.407342,9.167682,0.546814,-9.354203,0.419288],[-3.790426,-2.133394,1.452059,-9.573898,-8.072202,-1.615221,-7.873316,-4.787918,9.082752,8.347875],[-8.074320,6.275972,4.817997,2.968787,-6.264632,1.787284,-4.427337,6.170521,-3.144761,-7.750855],[-1.293876,7.180168,-4.467970,-4.800665,1.851511,-3.891713,1.659189,5.428963,-7.731798,-1.778275]],[[2.603691,-3.186064,2.633346,5.723090,1.670524,8.903651,2.059305,-3.636265,-4.308574,6.897231],[3.812884,0.667124,-7.070043,5.600636,4.301626,6.578115,-8.516590,2.781586,4.082955,4.783028],[-3.156336,6.867251,2.687581,-2.799682,-2.644969,9.851139,5.747358,-2.031364,1.530013,6.962237],[7.691516,-9.146177,-5.083695,-9.958316,-2.245081,-1.153362,-5.336681,-5.822568,-7.588797,6.964770],[7.353365,-0.637988,8.344921,-2.929542,-0.629826,-8.905411,-2.334269,9.001663,-6.959036,-3.398695],[2.375391,5.180817,-6.411852,4.640540,-0.999540,-3.643105,0.557538,6.796244,8.326459,-3.765235],[4.686044,-0.906792,1.178891,-3.535764,0.568489,-4.267196,6.007688,-3.309432,-0.367853,-9.172440],[-1.528148,-6.451304,9.311149,-2.023757,0.017308,0.705560,0.845789,-7.163754,5.392344,-8.560335],[3.344654,-2.578986,3.392814,1.118807,-1.506305,-6.877056,-8.757642,0.287839,-8.487520,-5.226330],[-5.401890,-1.892079,5.530057,-5.247657,5.359060,8.812234,3.487608,-5.101595,-3.111680,-3.816270],[1.718024,1.311701,9.432437,-5.464386,5.157700,0.640386,-2.965506,0.679433,-8.518034,-5.703925],[4.622085,2.337591,5.004866,3.835217,3.506818,3.094325,-0.627142,-9.827140,9.243198,-0.755808],[4.395582,-3.532376,6.200863,-3.125823,1.801529,-8.859689,-4.255992,0.943689,9.872786,-5.420894],[2.308566,0.839649,-1.378909,2.606054,-3.376129,-5.511456,-8.237103,6.911228,1.705536,0.677319],[6.991339,6.648305,0.930831,9.816696,8.438568,6.949761,0.058293,-9.983855,-1.620141,7.231426],[3.642943,0.934864,-5.494165,-2.040983,-0.817497,-7.145483,7.773577,1.969922,5.917616,9.952687]],[[-3.287342,3.445309,8.575277,-4.993549,3.838931,5.785954,6.378890,-4.490297,3.120994,6.039672],[6.283083,6.127746,4.951555,1.042172,-0.526326,3.196660,-0.941687,-4.439464,8.341622,9.446994],[0.550409,3.308554,3.929737,-2.581390,-0.140014,-4.256534,-4.727593,-6.153930,5.776146,-3.155967],[-7.383133,-4.196513,-1.286096,1.563599,7.366859,-8.381022,2.178738,-9.481059,-8.725811,1.254574],[-4.480514,-0.120374,-3.932144,4.647602,-4.969884,5.304114,5.088018,8.246119,-2.499641,0.495337],[-8.017677,-4.877436,-8.655520,-6.983574,-8.080901,6.879109,-1.995048,4.200002,3.990236,-5.016962],[-4.700116,-4.344896,8.052551,8.153653,-0.881321,-6.180296,-8.167853,-5.334151,0.341529,3.291961],[3.044849,-8.272896,-6.000014,-7.774896,-2.885701,-4.953182,-9.265796,2.124035,-5.989114,0.338874],[7.884242,1.482675,0.874144,-8.781449,8.968821,-6.722044,7.248343,-2.067363,-7.771111,0.683933],[6.901590,3.423866,-9.630325,5.764468,2.711421,-5.296021,-4.804510,-4.966725,8.031875,-9.997601],[6.880947,4.878883,-1.604753,-4.832684,-4.034514,2.042676,1.784191,6.160500,3.850024,6.424818],[-5.164049,-0.150516,7.010093,-1.574274,0.520919,0.533195,4.649874,4.996333,-2.546391,-1.371201],[2.829141,-5.174685,-9.792109,8.910111,6.041173,-1.935788,-5.958212,-2.625841,9.906654,-6.040812],[-5.488697,6.916066,2.510685,8.476995,1.971053,-0.959255,6.770054,4.383073,5.915384,-6.449984],[1.299526,-1.112278,3.259748,-4.070418,5.443060,9.176044,-0.691785,4.280190,-3.359194,-6.356890],[-0.303169,-2.885656,7.361602,9.483032,-4.824181,3.974608,-8.674532,0.343334,4.002036,-7.366636]],[[6.982446,-3.946215,2.311308,4.665278,-5.065403,0.501604,-9.202854,-7.570950,9.546073,-8.995432],[5.001269,-1.988245,5.739063,2.345029,2.896727,4.920928,-5.386861,-5.132003,0.397761,1.465318],[9.418871,-7.723129,-1.738259,-6.678064,-0.243714,-3.705248,-6.388142,4.364150,-5.559665,-3.677155],[7.663776,-0.395143,3.423330,6.984195,-2.623469,-7.443124,9.419956,-9.101259,-7.060821,4.697132],[2.434761,-5.804367,-2.026314,-9.115582,5.483926,-5.085330,-1.106063,-8.598764,-7.471762,9.173967],[-6.678665,-2.498344,-0.752794,0.565987,5.569787,-4.378278,-1.417527,1.776727,-2.405554,-3.038898],[-2.109882,-5.723501,6.154096,2.381402,-9.857541,8.205447,-1.550313,-8.975408,-5.366262,8.216683],[5.985097,-3.169997,7.410053,-4.873833,3.165752,8.040047,-1.505333,5.140960,-2.008247,9.637774],[4.587512,4.369007,-7.969307,-9.669927,0.294022,8.116789,8.096170,7.859135,9.488533,2.234406],[-0.927210,-5.217253,-2.818297,-9.191046,-3.921143,-0.184673,-1.625425,-8.133945,8.031784,9.217990],[-2.273504,6.304833,0.229558,-9.389077,4.198811,1.299833,-1.621552,-3.416947,3.280436,3.946302],[-6.006015,7.732308,2.653890,8.773806,2.545776,-0.611763,1.192601,4.281609,-4.335465,7.549124],[5.014715,1.883994,5.270456,7.823646,-1.969487,-1.491922,-7.264712,-2.420761,4.839195,-9.949641],[-3.956087,5.797369,2.672131,-0.660192,-2.788095,6.101226,0.894805,-1.105743,-5.464721,9.782178],[-3.843368,8.986126,-3.211034,3.491535,5.023658,-8.870414,-3.037384,-7.375847,-8.375649,1.377212],[-4.369742,9.791507,2.559108,-8.047394,5.997740,-6.768979,-6.726187,-2.176968,6.210927,-9.813480]],[[4.115983,1.830389,-4.282901,2.929177,-2.886679,-3.206586,3.403276,-0.630865,5.406609,-3.402001],[7.534869,-2.617806,-7.779629,-5.621764,-3.623050,2.864757,8.885864,0.059178,-8.002652,-2.065511],[7.973171,5.500348,-7.137419,0.084043,1.367357,-5.706453,6.831183,-1.801627,9.824460,6.198489],[4.477318,-7.649146,8.391131,5.010024,-4.482095,0.972285,-7.445612,6.082968,-8.825684,-7.291627],[-1.258346,-6.145015,5.183615,-1.098160,5.094185,9.530046,-8.968684,3.105257,7.914289,6.280845],[1.127814,-0.494491,6.877543,-0.408856,-1.784152,3.664996,-0.312275,-6.793751,-5.983895,-0.498835],[5.435995,2.935973,6.372949,0.972073,2.854537,4.472460,5.477084,-2.649162,3.564938,3.383355],[2.799350,-3.870754,-2.560230,4.457224,7.534129,9.747826,6.143655,-9.641535,9.745016,-7.735826],[-4.393741,9.970734,8.599561,3.408966,4.790330,-1.079086,9.283750,-4.259131,-1.374043,6.910843],[3.508226,-1.336416,3.551369,-7.338946,-5.254279,7.496896,-1.782016,0.762964,-6.569170,-9.038919],[2.915691,-4.178880,9.700809,-7.742518,-1.249168,-4.585539,-1.082146,9.774858,1.043862,5.292118],[-6.043561,4.348523,5.755908,-8.807506,4.556897,5.644502,9.150124,0.107283,-7.510384,-0.352697],[9.921517,0.879961,6.910690,2.157320,-8.921040,5.727860,7.090936,0.725519,0.275271,-8.108019],[-3.330076,8.550516,9.007452,-5.064452,-8.816236,0.164451,0.964548,-3.207753,5.819919,-9.671523],[-6.219839,-5.067441,-2.820081,-0.955634,9.057111,-4.845322,1.432160,2.776985,-2.032607,-1.352518],[5.862140,0.125601,-0.192636,4.665535,2.475914,2.673593,0.796255,-4.494069,2.212998,7.853612]],[[9.091808,-6.288300,3.189093,-2.084675,-5.391490,6.106020,-4.028579,-1.529728,-3.044049,-9.727258],[5.415824,5.764540,6.575133,-0.347489,-2.458177,8.537866,1.531499,-1.144162,2.986159,4.075122],[-1.381800,2.890296,8.064712,5.880000,-7.770364,5.730563,-6.683610,-2.489105,-4.683216,-8.410781],[5.998210,4.092080,-9.435136,4.482371,-9.061253,6.213015,5.884303,4.406807,-3.597758,-8.149232],[-4.875145,9.360972,-9.688475,-7.391308,-6.251044,-6.253416,-8.373921,3.393660,0.825879,-8.771571],[4.681264,-2.325990,5.729573,3.836835,8.878439,-3.646893,8.372065,-4.109517,2.581302,1.137115],[1.915924,0.814412,7.830646,-1.301778,-7.949880,-6.463981,-2.243077,-4.204036,-6.801313,-9.181534],[-0.517611,1.131436,-8.154744,1.933270,-1.251664,8.667378,-8.144630,9.697590,2.531178,6.989113],[-3.464818,6.532192,-3.775516,-7.768004,3.615672,-6.705497,3.897398,-5.602682,2.927529,-3.994852],[-9.404281,-6.465377,-0.643593,-7.195190,7.871180,1.950311,1.928929,9.304700,0.419478,-2.305915],[-4.138250,-0.124932,-1.584835,7.424523,-5.197460,5.696655,0.015498,-5.332343,6.913617,-1.733119],[-8.379154,-3.259514,-1.319007,2.266653,-3.953746,0.131271,9.706621,-3.260011,-9.357613,7.320852],[3.075549,1.269697,-8.837125,6.428557,-7.274634,5.322830,6.554765,-8.856711,1.378792,6.521554],[0.389969,-4.094451,-0.249917,-1.862644,-1.153529,-8.724881,-8.066572,-8.689819,3.664265,-1.137586],[2.320441,-9.223028,8.671454,9.279223,-1.510266,-8.939015,3.291425,-3.830636,-6.496549,-4.586036],[5.028530,-1.502470,-2.984465,-7.004412,-3.489228,1.220762,-3.641271,1.166242,-0.306549,-4.140075]],[[5.035690,-0.207608,9.509898,2.553799,1.935541,-3.399460,-3.675458,-7.117700,-2.502910,-3.759019],[6.027393,-6.716407,2.317958,8.027473,-7.813268,-9.399628,8.069215,-4.298545,-6.090272,-2.646427],[4.918024,-5.805959,9.686780,-6.562391,0.429747,3.663307,-3.768861,6.420474,4.776506,2.950055],[-2.614814,0.277587,-9.766923,3.636249,3.486094,-6.263021,-7.289569,-3.893536,9.498950,8.400639],[0.709331,7.357237,4.353287,6.138560,-7.925388,-6.956454,2.749358,-0.273802,-3.068375,-3.407971],[3.404508,-5.773829,4.321231,9.570057,-4.002688,6.757901,6.312594,6.246619,0.015283,1.330027],[-8.741166,7.151451,-3.190868,7.966443,8.385334,-8.332776,8.376824,-0.598793,-4.571191,3.852985],[8.089255,-0.420067,-0.701638,9.394704,4.313331,6.308170,-9.426843,6.319197,-9.152538,8.322678],[-5.956256,-6.182618,1.021381,-8.999409,-0.638866,-8.800205,-0.235835,1.642874,-5.326768,7.907534],[8.532699,9.453530,7.652515,-1.454695,-4.405009,2.935198,-9.313947,-4.639710,-1.167498,3.542176],[-7.712683,-4.948846,-2.608967,3.688219,-8.310414,-8.619411,2.406934,-1.715548,-4.488082,-6.416014],[-6.185120,0.785872,3.558427,-7.225922,-2.295416,3.757114,2.375547,-1.733694,1.098431,3.938696],[-3.534012,6.437752,7.139872,-5.890171,2.667492,-8.629419,-4.380156,-9.302491,6.937841,5.567579],[-2.799151,5.637887,2.922509,4.992835,1.050500,-7.519425,6.793235,-2.788423,2.834204,-3.353782],[2.703086,6.984247,5.259791,-5.383812,-1.252155,-2.792380,-0.821789,4.257788,1.355587,-6.881348],[1.632639,-0.440797,-7.006959,3.942892,4.242996,-7.524540,7.413097,-1.928811,9.949515,7.220134]],[[9.125420,-1.957036,0.955873,1.354519,6.986876,-2.985369,-6.379536,9.857481,4.781777,1.901539],[-3.331675,7.538174,6.491007,-6.039752,-6.342399,-5.878515,-7.511197,3.693020,-4.201093,-6.771470],[-3.937068,-1.278140,-0.929520,-1.071253,8.568430,-7.374442,5.085603,9.858758,-1.110464,-4.432853],[8.549741,-9.191387,7.115203,-7.478054,-4.031701,6.137519,7.575509,2.223855,4.518400,8.558491],[0.460175,4.674453,3.878239,6.097489,-3.749258,4.554537,7.632521,9.217545,4.053236,-6.321903],[7.579595,4.006241,-8.356887,-6.579637,-7.568548,-3.291162,4.412948,-6.906525,-6.852932,-8.489016],[5.118622,-7.734103,7.047648,-9.985680,2.498337,-5.158773,-0.348883,0.650802,2.144030,2.705275],[0.046039,2.717816,5.351564,-9.334179,-4.604766,-2.422818,-4.906777,-9.533513,3.645037,-8.175785],[7.142239,0.572734,-2.000319,-4.707100,-9.355060,5.879803,4.291213,-9.632260,0.096616,-5.318980],[-7.411307,6.553583,-0.860480,-3.085747,-2.909755,-1.216016,-4.817115,-7.013813,7.004259,-1.387400],[-3.785914,2.134957,-4.189964,-6.423184,-3.713287,4.313670,2.550742,3.048713,-8.602921,0.501854],[3.135772,1.574040,6.041756,-9.521779,-9.217614,-4.336231,5.369302,7.904486,-7.817256,2.190144],[-6.972079,7.595604,4.970356,2.436087,-7.962367,7.239461,1.803888,8.785169,-3.375633,8.563916],[-9.197208,5.388304,6.023081,-9.648744,-4.736783,2.302265,-1.622437,-8.403198,6.447240,-6.107376],[1.887487,1.260021,-1.966393,3.723463,1.322778,9.594305,3.245385,4.951874,2.881933,-5.211478],[6.236859,4.481924,-6.131792,7.275107,6.886027,7.655478,3.589558,2.307727,-0.981461,-1.069752]],[[9.530300,0.393647,-3.341667,-0.803453,-4.333302,6.074297,-5.877403,-0.337416,2.818074,-8.566593],[7.077287,0.922110,8.057334,-3.536790,7.151124,7.199372,-8.413827,0.128480,8.621840,9.441814],[-0.204229,4.186177,7.164081,7.823007,1.919909,5.878036,-1.040240,-3.602536,-7.675739,5.174476],[2.862197,-7.915778,6.792365,9.478659,0.309037,0.081814,8.530998,-8.813682,-8.619267,8.229760],[-7.922696,-9.876584,7.856640,-9.321044,4.837692,-5.544831,-2.251734,-7.160955,-0.723648,-5.105595],[-1.193676,-3.254152,-9.395983,-3.331811,-9.574183,-5.675419,1.172796,7.618776,6.446167,-6.389083],[3.750285,-3.876559,0.598759,-0.030630,-8.590935,-5.123015,-0.356878,-5.854612,7.688805,8.318999],[4.969395,-8.859434,-0.009026,5.847854,5.415903,-1.897902,-4.171316,-3.451326,8.728545,-5.100515],[6.831299,9.023294,2.809700,-4.724602,-2.542899,-8.310622,-1.292404,-1.660981,6.067249,-7.414704],[2.711087,0.326638,8.656332,-5.265675,-4.657414,-8.701563,2.592604,0.221165,-1.077859,9.922372],[7.518677,-9.147767,8.246750,-5.678838,-5.662908,1.008328,4.040619,-2.247097,4.333618,-6.048598],[6.766662,4.158500,-8.399111,8.618649,5.210522,3.877981,-5.570787,-3.595905,4.231405,-4.621563],[8.869309,0.552086,1.935556,-3.650662,-4.631136,-5.961769,4.163987,-1.501603,5.189784,-9.409291],[2.455206,9.720981,0.123272,3.847577,6.538018,9.587967,5.123922,4.682382,-0.722909,4.125964],[-3.376499,-0.697390,-6.739543,0.919559,-8.119169,-1.388114,-9.286836,7.140670,7.647570,-8.518763],[4.018494,2.336378,-5.754645,0.077428,-1.289562,-8.437934,-5.619029,9.708945,4.545962,-9.633126]],[[-6.263627,3.481085,0.984333,7.645914,9.559252,7.181412,0.879201,-2.462025,1.940517,-2.463186],[-5.880932,9.454814,5.835534,9.708638,0.433343,-3.856297,-1.817742,-8.565451,-5.448864,-7.861365],[6.892085,-6.681237,4.100384,9.633086,-3.686541,-5.968371,-7.520262,-3.791313,-7.967006,-7.038937],[6.596518,-1.221841,9.579093,8.932180,-4.737246,6.462411,8.933781,-6.761457,-1.167899,-7.369215],[6.985877,-9.781150,-1.328700,7.512306,-2.476243,-0.771130,-4.169674,-0.639779,-8.062526,7.666873],[1.963676,-6.964672,2.874829,7.002910,-2.604227,-5.500184,6.874435,7.089422,4.937857,-7.632049],[5.980468,-1.613065,0.414572,2.282557,-5.738063,-3.685321,3.164488,1.472935,4.885064,3.029829],[-9.906355,0.070700,-2.028058,8.764712,7.966825,4.527552,-7.633574,-6.354094,-9.250576,3.389607],[2.342243,3.283922,5.989084,7.826810,3.242663,-8.914418,-8.595330,7.140176,8.081910,3.468143],[7.662782,5.102756,-0.005375,4.266547,9.040695,4.629714,2.880886,5.039364,7.685148,8.239622],[8.883790,-5.593647,-4.284874,-6.888592,-1.287746,-2.982606,3.068172,-5.203783,-0.338857,-9.361397],[-5.847537,-7.701471,-2.254727,-7.299589,-8.721172,1.068580,-4.225731,0.758792,8.092594,-6.788566],[0.840736,3.786832,-6.145559,-7.581219,-8.487610,-7.213440,4.925638,-9.584926,-9.075779,8.287093],[-5.551023,1.830607,5.288852,3.736902,-7.889337,-1.318155,3.624338,-9.012684,3.692470,-5.054127],[-7.573273,3.363731,5.739826,6.617394,-3.298177,-3.643915,9.857720,5.644257,-4.703814,-4.391468],[-9.037082,3.843669,-3.403156,9.531531,-3.750463,3.231539,-5.342949,-2.494042,-9.749490,-9.719328]],[[3.230280,-2.485387,-2.498693,0.527414,-3.977039,4.157363,-3.009036,-5.540522,9.551155,3.343959],[9.013269,-6.338088,6.454235,6.729828,-4.078285,-7.932826,-8.111324,7.076659,1.021559,-5.158391],[-3.697326,-4.764209,-4.128316,9.569905,2.986557,3.132650,-3.943240,-6.368215,5.290037,8.000429],[3.167958,0.702819,-5.114822,-1.269111,9.760619,-0.417697,5.136851,-0.533482,2.533510,3.577922],[-9.520794,-9.087496,-4.417600,-1.557339,-1.109824,9.264584,-1.759247,-6.971897,9.151326,-1.536979],[0.133528,-4.015133,8.543053,-6.472647,5.061375,2.271226,-8.193542,-1.969276,3.723110,-1.787322],[-1.105564,8.172621,-7.346426,-8.248764,0.505538,-3.079274,2.819554,5.828315,-0.358419,8.409237],[3.809519,0.734306,-8.962018,-4.034074,8.723176,-8.741472,-8.666553,-0.191431,7.352135,3.005307],[8.350582,1.314541,-9.559136,6.532205,-8.936599,-3.797785,-7.775070,5.930141,2.731369,-9.657160],[2.357647,2.586694,-4.168905,-0.382112,-5.438317,-2.771160,-8.831240,-6.494644,-7.830381,5.391376],[-0.929866,-6.396866,6.244520,-8.935642,0.290296,0.161539,0.165264,9.390325,-8.800555,7.035905],[9.703124,-6.770516,7.357681,-5.484792,6.245311,-5.368833,-5.413703,-0.996944,-1.881276,-3.455941],[3.805286,-8.382586,-4.968782,-1.436066,-9.379469,3.226798,-5.689253,3.243360,-8.156181,0.552596],[1.257551,-6.560138,6.233245,7.764911,2.384155,5.752100,-5.976245,9.028859,1.945492,7.368925],[4.918987,2.803290,7.716928,8.501282,7.875107,4.384124,-4.088955,-6.420811,-3.195587,6.954768],[2.239668,-3.090875,0.347901,5.223965,8.816404,-2.761751,4.384416,-6.685107,-5.081329,5.715233]],[[4.623619,-8.571652,-5.686000,9.038068,-1.782778,-6.107662,3.020872,3.673574,-1.376835,-2.776641],[-4.421968,-9.115981,-2.843596,-9.727364,-4.071414,-4.135289,-5.102511,7.338926,1.075583,8.557644],[2.959299,-6.089911,-6.104095,0.576084,-9.586114,-0.643937,-7.365867,-7.685870,-2.254563,5.816269],[-3.783082,-3.071238,-7.118745,6.038921,-5.876723,-2.948796,-6.528318,-8.267614,-2.088761,2.939462],[5.853467,8.475231,-3.227768,0.702085,-9.777386,5.067822,-0.702288,5.931818,0.421890,5.397745],[1.608642,-7.180011,-1.822489,-2.301241,-2.873423,7.570212,-7.603216,-3.494151,-0.839961,4.454280],[-3.057194,-0.998063,-0.897173,-5.125092,-0.944307,7.322150,3.749855,-5.582367,-7.965525,-9.127135],[-4.472143,2.598520,7.300962,-8.171628,6.022237,-2.051627,-2.215441,-8.162740,6.530932,9.100099],[-1.363375,5.474518,-0.005202,4.123748,8.561889,0.808275,0.728745,-6.805846,-5.697318,9.917224],[-2.695094,-4.431931,-1.040132,8.767997,1.540975,3.172737,3.202697,3.726808,-8.730483,-4.696417],[-5.583383,-6.634393,-7.111665,-9.488977,5.461964,-5.958575,-7.787350,-7.784997,-4.623545,-6.362967],[-8.423459,0.988388,-9.675193,6.269854,-3.847876,-9.200822,-0.503242,-4.168196,9.297846,0.890219],[-9.134774,-1.552130,-4.866893,4.348800,-6.917082,-0.968375,-9.654150,-8.910200,-3.726138,8.445295],[-8.409476,-4.846536,-8.149150,2.992615,9.566973,-1.075298,2.340996,-9.689809,-8.703786,-8.960394],[8.229852,6.143752,-5.184471,4.109309,-6.757112,8.374421,-4.764273,1.982183,0.402417,4.190473],[6.699424,-4.944924,-0.550110,1.089504,9.455609,-4.880767,-0.346993,-7.574410,4.789453,-0.700205]]], dtype='float64')
module1.set_input('var_1526', input_1526)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1526, )
res3 = intrp3.evaluate()(input_1526, )
res4 = intrp4.evaluate()(input_1526, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input('var_1526', input_1526)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1526, )
res7 = intrp7.evaluate()(input_1526, )
res8 = intrp8.evaluate()(input_1526, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input('var_1526', input_1526)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1526, )
res11 = intrp11.evaluate()(input_1526, )
res12 = intrp12.evaluate()(input_1526, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input('var_1526', input_1526)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1526, )
res15 = intrp15.evaluate()(input_1526, )
res16 = intrp16.evaluate()(input_1526, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input('var_1526', input_1526)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1526, )
res19 = intrp19.evaluate()(input_1526, )
res20 = intrp20.evaluate()(input_1526, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input('var_1526', input_1526)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1526, )
res23 = intrp23.evaluate()(input_1526, )
res24 = intrp24.evaluate()(input_1526, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''21: TVMFuncCall
20: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
19: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
18: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
17: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
16: tvm::transform::Pass::operator()(tvm::IRModule) const
15: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
14: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
13: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
12: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
11: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
10: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
9: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
8: tvm::transform::Pass::operator()(tvm::IRModule) const
7: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
6: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::Pass::operator()(tvm::IRModule) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
0: tvm::DiagnosticContext::Render()

'''