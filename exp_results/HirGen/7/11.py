import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (6,))#candidate|0|(6,)|var|float64
uop_1 = relay.acosh(var_0.astype('float64')) # shape=(6,)
bop_3 = relay.multiply(uop_1.astype('uint8'), relay.reshape(var_0.astype('uint8'), relay.shape_of(uop_1))) # shape=(6,)
bop_6 = relay.greater(var_0.astype('bool'), relay.reshape(bop_3.astype('bool'), relay.shape_of(var_0))) # shape=(6,)
bop_9 = relay.bitwise_and(bop_6.astype('int16'), relay.reshape(var_0.astype('int16'), relay.shape_of(bop_6))) # shape=(6,)
uop_12 = relay.tan(bop_6.astype('float64')) # shape=(6,)
var_14 = relay.var("var_14", dtype = "float64", shape = (6,))#candidate|14|(6,)|var|float64
bop_15 = relay.bitwise_or(uop_12.astype('uint64'), relay.reshape(var_14.astype('uint64'), relay.shape_of(uop_12))) # shape=(6,)
uop_18 = relay.sin(bop_6.astype('float64')) # shape=(6,)
var_20 = relay.var("var_20", dtype = "float64", shape = (6,))#candidate|20|(6,)|var|float64
bop_21 = relay.subtract(uop_18.astype('int8'), relay.reshape(var_20.astype('int8'), relay.shape_of(uop_18))) # shape=(6,)
var_24 = relay.var("var_24", dtype = "float64", shape = (6,))#candidate|24|(6,)|var|float64
bop_25 = relay.bitwise_or(uop_12.astype('int32'), relay.reshape(var_24.astype('int32'), relay.shape_of(uop_12))) # shape=(6,)
const_28 = relay.const([5,-5,-4,2,8,5], dtype = "int32")#candidate|28|(6,)|const|int32
bop_29 = relay.less_equal(bop_25.astype('bool'), relay.reshape(const_28.astype('bool'), relay.shape_of(bop_25))) # shape=(6,)
bop_32 = relay.less(bop_3.astype('bool'), relay.reshape(var_20.astype('bool'), relay.shape_of(bop_3))) # shape=(6,)
var_35 = relay.var("var_35", dtype = "float64", shape = (6,))#candidate|35|(6,)|var|float64
bop_36 = relay.multiply(uop_12.astype('int32'), relay.reshape(var_35.astype('int32'), relay.shape_of(uop_12))) # shape=(6,)
bop_39 = relay.divide(bop_9.astype('float32'), relay.reshape(var_20.astype('float32'), relay.shape_of(bop_9))) # shape=(6,)
uop_42 = relay.asinh(bop_3.astype('float32')) # shape=(6,)
var_44 = relay.var("var_44", dtype = "uint64", shape = (6,))#candidate|44|(6,)|var|uint64
bop_45 = relay.bitwise_xor(bop_15.astype('uint16'), relay.reshape(var_44.astype('uint16'), relay.shape_of(bop_15))) # shape=(6,)
var_48 = relay.var("var_48", dtype = "bool", shape = (6,))#candidate|48|(6,)|var|bool
bop_49 = relay.maximum(bop_32.astype('uint16'), relay.reshape(var_48.astype('uint16'), relay.shape_of(bop_32))) # shape=(6,)
bop_52 = relay.right_shift(bop_21.astype('int16'), relay.reshape(uop_12.astype('int16'), relay.shape_of(bop_21))) # shape=(6,)
bop_55 = relay.less_equal(bop_25.astype('bool'), relay.reshape(bop_36.astype('bool'), relay.shape_of(bop_25))) # shape=(6,)
bop_58 = relay.greater_equal(uop_42.astype('bool'), relay.reshape(uop_12.astype('bool'), relay.shape_of(uop_42))) # shape=(6,)
const_61 = relay.const([2.353663,-1.180471,7.596757,-1.215406,-9.937899,-3.561408], dtype = "float64")#candidate|61|(6,)|const|float64
bop_62 = relay.logical_xor(var_24.astype('uint32'), relay.reshape(const_61.astype('uint32'), relay.shape_of(var_24))) # shape=(6,)
uop_65 = relay.acos(uop_18.astype('float32')) # shape=(6,)
uop_67 = relay.asin(var_20.astype('float64')) # shape=(6,)
var_69 = relay.var("var_69", dtype = "uint16", shape = (6,))#candidate|69|(6,)|var|uint16
bop_70 = relay.add(bop_45.astype('int8'), relay.reshape(var_69.astype('int8'), relay.shape_of(bop_45))) # shape=(6,)
uop_73 = relay.log2(uop_65.astype('float32')) # shape=(6,)
bop_75 = relay.bitwise_and(uop_73.astype('uint8'), relay.reshape(var_48.astype('uint8'), relay.shape_of(uop_73))) # shape=(6,)
bop_78 = relay.right_shift(bop_75.astype('uint16'), relay.reshape(bop_49.astype('uint16'), relay.shape_of(bop_75))) # shape=(6,)
uop_81 = relay.log2(bop_75.astype('float32')) # shape=(6,)
bop_83 = relay.logical_or(bop_78.astype('bool'), relay.reshape(var_69.astype('bool'), relay.shape_of(bop_78))) # shape=(6,)
var_86 = relay.var("var_86", dtype = "float32", shape = (6,))#candidate|86|(6,)|var|float32
bop_87 = relay.floor_mod(uop_73.astype('float64'), relay.reshape(var_86.astype('float64'), relay.shape_of(uop_73))) # shape=(6,)
uop_90 = relay.asin(uop_81.astype('float64')) # shape=(6,)
const_92 = relay.const([-6.686138,-0.755842,4.357130,7.925203,-5.884993,7.336315], dtype = "float64")#candidate|92|(6,)|const|float64
bop_93 = relay.multiply(uop_90.astype('int16'), relay.reshape(const_92.astype('int16'), relay.shape_of(uop_90))) # shape=(6,)
uop_96 = relay.rsqrt(bop_45.astype('float64')) # shape=(6,)
uop_98 = relay.atanh(uop_81.astype('float32')) # shape=(6,)
uop_100 = relay.asinh(uop_81.astype('float32')) # shape=(6,)
bop_102 = relay.power(uop_81.astype('float32'), relay.reshape(var_14.astype('float32'), relay.shape_of(uop_81))) # shape=(6,)
uop_105 = relay.cosh(uop_81.astype('float64')) # shape=(6,)
var_107 = relay.var("var_107", dtype = "uint16", shape = (6,))#candidate|107|(6,)|var|uint16
bop_108 = relay.add(bop_78.astype('uint16'), relay.reshape(var_107.astype('uint16'), relay.shape_of(bop_78))) # shape=(6,)
output = relay.Tuple([bop_29,bop_39,bop_52,bop_55,bop_58,bop_62,uop_67,bop_70,bop_83,bop_87,bop_93,uop_96,uop_98,uop_100,bop_102,uop_105,bop_108,])
output2 = relay.Tuple([bop_29,bop_39,bop_52,bop_55,bop_58,bop_62,uop_67,bop_70,bop_83,bop_87,bop_93,uop_96,uop_98,uop_100,bop_102,uop_105,bop_108,])
func_111 = relay.Function([var_0,var_14,var_20,var_24,var_35,var_44,var_48,var_69,var_86,var_107,], output)
mod['func_111'] = func_111
mod = relay.transform.InferType()(mod)
var_112 = relay.var("var_112", dtype = "float64", shape = (6,))#candidate|112|(6,)|var|float64
var_113 = relay.var("var_113", dtype = "float64", shape = (6,))#candidate|113|(6,)|var|float64
var_114 = relay.var("var_114", dtype = "float64", shape = (6,))#candidate|114|(6,)|var|float64
var_115 = relay.var("var_115", dtype = "float64", shape = (6,))#candidate|115|(6,)|var|float64
var_116 = relay.var("var_116", dtype = "float64", shape = (6,))#candidate|116|(6,)|var|float64
var_117 = relay.var("var_117", dtype = "uint64", shape = (6,))#candidate|117|(6,)|var|uint64
var_118 = relay.var("var_118", dtype = "bool", shape = (6,))#candidate|118|(6,)|var|bool
var_119 = relay.var("var_119", dtype = "uint16", shape = (6,))#candidate|119|(6,)|var|uint16
var_120 = relay.var("var_120", dtype = "float32", shape = (6,))#candidate|120|(6,)|var|float32
var_121 = relay.var("var_121", dtype = "uint16", shape = (6,))#candidate|121|(6,)|var|uint16
output = func_111(var_112,var_113,var_114,var_115,var_116,var_117,var_118,var_119,var_120,var_121,)
func_122 = relay.Function([var_112,var_113,var_114,var_115,var_116,var_117,var_118,var_119,var_120,var_121,], output)
mutated_mod['func_122'] = func_122
mutated_mod = relay.transform.InferType()(mutated_mod)
var_124 = relay.var("var_124", dtype = "uint8", shape = (7, 7, 13))#candidate|124|(7, 7, 13)|var|uint8
var_125 = relay.var("var_125", dtype = "uint8", shape = (7, 7, 13))#candidate|125|(7, 7, 13)|var|uint8
bop_126 = relay.multiply(var_124.astype('uint8'), relay.reshape(var_125.astype('uint8'), relay.shape_of(var_124))) # shape=(7, 7, 13)
uop_129 = relay.sin(bop_126.astype('float64')) # shape=(7, 7, 13)
const_131 = relay.const([[[7,7,1,-3,-2,2,5,9,2,-10,-10,-4,2],[2,-5,-7,10,-4,-2,3,10,-4,-7,-8,-4,3],[-7,-6,-6,3,7,-6,4,10,-6,9,-10,10,-7],[6,7,9,8,-5,6,-6,7,-1,-1,-6,8,3],[-10,5,9,1,3,-2,-5,-5,-2,-5,-4,-10,9],[-2,-1,5,5,-9,3,2,9,-7,10,7,-5,-1],[-9,6,8,7,2,-3,3,-5,3,10,-1,8,9]],[[3,6,-4,8,-4,-9,-8,-2,10,-2,-2,2,6],[-9,7,8,3,-6,10,9,2,5,-1,-10,4,5],[6,-8,-3,9,-6,-9,-2,9,1,-5,8,-3,-9],[-1,5,-1,-3,5,7,-7,-10,5,3,5,-4,9],[2,-2,-6,-6,-8,6,-7,9,-5,-8,-3,1,8],[4,-6,-5,-6,1,-9,7,-5,9,3,3,-4,-7],[5,7,-3,5,-5,-10,-5,-4,-10,-2,-3,-5,10]],[[-6,-1,5,8,9,-2,-1,-3,9,1,-4,6,6],[-8,-8,8,-5,5,-9,2,4,-2,-3,7,-7,-7],[9,-9,-5,-5,5,6,-6,-10,4,3,-7,7,2],[-4,-2,9,6,-8,3,3,1,-8,10,2,-9,4],[-9,-6,4,-7,-10,-2,4,-9,-7,5,-4,5,-2],[-8,9,6,4,9,1,8,4,-10,-2,-5,3,-7],[4,1,-6,-6,-2,2,-4,7,9,-1,-5,-1,-1]],[[-8,-6,-1,4,6,-2,6,5,-3,-1,6,-6,-2],[7,-10,10,5,10,8,-10,5,-7,8,-8,-10,-9],[-10,-5,-6,8,1,1,-5,1,-6,-8,-3,-1,-6],[1,-10,6,5,-2,4,-6,-9,-10,-9,-10,4,-7],[2,9,1,-7,10,10,-3,-8,-6,1,-5,-2,5],[-1,-9,-5,10,-10,-4,3,10,-3,8,1,10,-9],[-4,9,-2,-8,3,-1,-9,-6,-10,1,2,5,5]],[[-6,-10,10,-6,5,3,9,7,1,-3,-1,5,2],[-5,-7,-5,-7,-8,8,8,-1,5,9,10,-9,6],[-5,-1,-6,6,-7,6,3,-3,-7,-2,-3,8,2],[9,-2,-3,-6,6,1,7,10,-3,7,-3,6,5],[-6,-9,-5,-10,-5,-4,7,3,9,-7,-3,-3,6],[-7,5,10,-6,-10,9,-8,2,5,9,7,-8,-10],[-3,-1,10,1,-9,9,-2,-6,8,5,-5,9,-8]],[[3,-9,7,7,2,4,-5,4,8,-2,7,10,9],[-2,-9,-3,6,-7,-7,-9,-2,-2,-7,2,2,-4],[3,1,-7,-10,-3,1,6,-4,-2,2,7,-4,2],[-4,9,5,1,-4,1,7,9,-5,7,8,4,7],[5,10,7,-2,-3,8,5,4,-6,-1,-10,9,-8],[9,6,5,-5,-9,-8,-9,-1,5,-9,-3,-10,7],[3,-9,3,-4,2,-2,-4,-1,5,-3,7,2,9]],[[-10,-10,-10,4,-5,-5,-8,8,-6,-5,5,9,4],[-8,-3,-2,5,-1,-4,-4,4,7,8,5,8,-3],[8,10,7,10,4,-4,-3,-4,1,-5,-7,8,8],[9,3,-8,3,5,-8,1,-7,1,-1,-7,2,9],[6,5,3,9,-8,-7,7,-1,6,-6,-9,3,1],[2,1,5,1,1,-5,-7,9,2,-9,10,-6,-10],[-5,-5,-10,10,-10,-1,4,-2,2,10,7,-7,6]]], dtype = "uint8")#candidate|131|(7, 7, 13)|const|uint8
bop_132 = relay.logical_and(var_125.astype('bool'), relay.reshape(const_131.astype('bool'), relay.shape_of(var_125))) # shape=(7, 7, 13)
uop_135 = relay.sqrt(var_125.astype('float32')) # shape=(7, 7, 13)
var_137 = relay.var("var_137", dtype = "float32", shape = (7, 7, 13))#candidate|137|(7, 7, 13)|var|float32
bop_138 = relay.minimum(uop_135.astype('int64'), relay.reshape(var_137.astype('int64'), relay.shape_of(uop_135))) # shape=(7, 7, 13)
const_141 = relay.const([[[-3,2,-5,1,-1,4,-9,-4,2,-4,2,2,7],[-2,3,4,-4,-1,-9,8,9,-9,-9,-1,-1,-4],[6,-2,9,10,4,8,-2,7,-1,-1,-9,1,5],[8,10,8,-9,9,-6,2,4,-10,-10,8,-3,4],[-1,-1,8,4,-3,-1,5,-2,10,-3,-5,1,-1],[7,-1,-8,-5,-1,-6,10,-7,4,3,-3,2,-9],[10,-2,-2,4,9,4,-1,-8,9,-8,9,8,-8]],[[6,8,8,-7,10,-1,-1,-8,-6,-1,6,2,-8],[-6,4,-9,7,-6,-9,7,-2,-6,1,-9,3,-3],[2,2,8,-8,5,3,-7,7,1,5,-2,-8,3],[4,-7,-6,4,-1,-8,-5,6,-5,6,-9,5,10],[-5,2,6,-5,-5,-2,-8,1,1,9,3,-2,-7],[6,7,9,6,9,7,5,-2,1,1,6,-10,-1],[2,-2,6,-8,7,2,-1,5,4,10,-10,-8,4]],[[3,10,7,-7,8,10,-6,-7,10,1,4,7,3],[-4,8,-4,2,-7,5,-1,-9,1,5,6,-4,1],[4,3,-7,10,-6,8,-8,8,-1,6,-9,-5,-5],[-2,-10,8,-2,3,9,-7,-6,5,-10,-7,4,-10],[10,-7,-6,5,-3,2,-5,7,6,9,10,8,-6],[10,-6,-3,4,3,-1,10,1,-1,4,-2,-1,4],[4,-1,7,-2,-10,1,-5,7,-3,1,-8,-2,-8]],[[5,-5,3,3,2,7,-2,9,2,8,-1,8,-4],[-2,-9,1,4,-4,-5,-2,4,-1,6,-10,3,10],[8,5,2,-8,-10,6,-7,2,7,9,5,10,9],[10,9,-5,7,8,-9,-4,-7,2,1,8,-8,-3],[-8,-4,4,-8,-5,-9,6,6,4,-2,-10,-7,-8],[1,1,-1,-7,-5,-1,4,-9,-2,10,8,-8,7],[5,-9,10,-3,3,1,10,-1,-8,-9,-7,9,9]],[[-3,8,-4,-5,-9,2,7,5,5,1,-6,-2,7],[-6,-9,6,3,-4,-8,-10,4,-7,7,-9,7,10],[-3,8,6,-8,2,-8,7,-2,1,-2,-3,-7,10],[5,-10,-3,-7,-2,-7,-7,4,2,7,6,5,2],[6,-10,-9,-6,-10,-1,9,10,-6,3,-4,1,10],[-9,5,4,-5,8,9,-1,4,-6,7,-9,4,-3],[8,2,-1,-2,4,-8,10,3,3,-8,7,-9,1]],[[7,9,-6,4,-2,8,-3,-10,3,8,-3,1,-7],[-7,-3,2,4,10,8,-7,-2,4,1,-8,-8,-2],[9,-2,2,-3,-6,6,8,-9,1,7,-4,1,-7],[-10,7,-3,5,-5,5,-1,2,-10,-3,-7,8,2],[-6,-5,-3,-5,-9,9,6,-1,1,-1,-1,-5,1],[-1,-7,10,7,6,2,-10,-2,5,2,-10,-9,-6],[-3,5,7,4,10,-7,1,6,-5,-6,-3,8,8]],[[8,8,-8,-9,4,10,9,-1,-8,10,-8,8,3],[-7,-9,-8,4,5,6,4,7,9,5,-2,4,7],[-6,-8,-10,-1,-1,8,-4,7,8,-1,7,-10,-10],[7,6,-8,1,-3,-10,-10,1,6,4,7,-3,6],[8,4,10,-2,5,9,5,-7,-4,5,8,3,3],[3,-8,-7,4,-4,3,1,5,4,-9,4,1,-1],[1,2,-5,1,1,-10,9,9,2,-8,9,-7,-6]]], dtype = "uint8")#candidate|141|(7, 7, 13)|const|uint8
bop_142 = relay.divide(bop_126.astype('float64'), relay.reshape(const_141.astype('float64'), relay.shape_of(bop_126))) # shape=(7, 7, 13)
uop_145 = relay.atanh(uop_135.astype('float32')) # shape=(7, 7, 13)
func_111_call = mod.get_global_var('func_111')
func_122_call = mutated_mod.get_global_var('func_122')
var_148 = relay.var("var_148", dtype = "float64", shape = (6,))#candidate|148|(6,)|var|float64
call_147 = relay.TupleGetItem(func_111_call(relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(var_148.astype('uint64'), [6,]), relay.reshape(var_148.astype('bool'), [6,]), relay.reshape(var_148.astype('uint16'), [6,]), relay.reshape(var_148.astype('float32'), [6,]), relay.reshape(var_148.astype('uint16'), [6,]), ), 8)
call_149 = relay.TupleGetItem(func_122_call(relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(var_148.astype('uint64'), [6,]), relay.reshape(var_148.astype('bool'), [6,]), relay.reshape(var_148.astype('uint16'), [6,]), relay.reshape(var_148.astype('float32'), [6,]), relay.reshape(var_148.astype('uint16'), [6,]), ), 8)
bop_150 = relay.maximum(bop_138.astype('int8'), relay.reshape(bop_142.astype('int8'), relay.shape_of(bop_138))) # shape=(7, 7, 13)
uop_153 = relay.sigmoid(uop_145.astype('float32')) # shape=(7, 7, 13)
uop_155 = relay.asinh(uop_153.astype('float64')) # shape=(7, 7, 13)
bop_157 = relay.logical_xor(uop_155.astype('uint64'), relay.reshape(bop_138.astype('uint64'), relay.shape_of(uop_155))) # shape=(7, 7, 13)
bop_160 = relay.bitwise_or(bop_157.astype('int16'), relay.reshape(var_124.astype('int16'), relay.shape_of(bop_157))) # shape=(7, 7, 13)
bop_163 = relay.maximum(bop_160.astype('float64'), relay.reshape(bop_138.astype('float64'), relay.shape_of(bop_160))) # shape=(7, 7, 13)
uop_166 = relay.sigmoid(bop_160.astype('float32')) # shape=(7, 7, 13)
uop_168 = relay.asin(uop_153.astype('float64')) # shape=(7, 7, 13)
bop_170 = relay.left_shift(uop_145.astype('uint32'), relay.reshape(var_124.astype('uint32'), relay.shape_of(uop_145))) # shape=(7, 7, 13)
bop_173 = relay.greater_equal(uop_145.astype('bool'), relay.reshape(bop_160.astype('bool'), relay.shape_of(uop_145))) # shape=(7, 7, 13)
uop_176 = relay.sinh(uop_153.astype('float32')) # shape=(7, 7, 13)
uop_178 = relay.sigmoid(uop_166.astype('float64')) # shape=(7, 7, 13)
uop_180 = relay.sinh(uop_178.astype('float32')) # shape=(7, 7, 13)
bop_182 = relay.multiply(uop_166.astype('int16'), relay.reshape(uop_180.astype('int16'), relay.shape_of(uop_166))) # shape=(7, 7, 13)
uop_185 = relay.sigmoid(uop_166.astype('float64')) # shape=(7, 7, 13)
bop_187 = relay.floor_mod(uop_166.astype('float64'), relay.reshape(bop_163.astype('float64'), relay.shape_of(uop_166))) # shape=(7, 7, 13)
var_190 = relay.var("var_190", dtype = "float64", shape = (7, 7, 13))#candidate|190|(7, 7, 13)|var|float64
bop_191 = relay.maximum(uop_185.astype('int32'), relay.reshape(var_190.astype('int32'), relay.shape_of(uop_185))) # shape=(7, 7, 13)
uop_194 = relay.atan(uop_166.astype('float32')) # shape=(7, 7, 13)
func_111_call = mod.get_global_var('func_111')
func_122_call = mutated_mod.get_global_var('func_122')
call_196 = relay.TupleGetItem(func_111_call(relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(call_147.astype('uint64'), [6,]), relay.reshape(var_148.astype('bool'), [6,]), relay.reshape(var_148.astype('uint16'), [6,]), relay.reshape(var_148.astype('float32'), [6,]), relay.reshape(var_148.astype('uint16'), [6,]), ), 4)
call_197 = relay.TupleGetItem(func_122_call(relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(var_148.astype('float64'), [6,]), relay.reshape(call_147.astype('uint64'), [6,]), relay.reshape(var_148.astype('bool'), [6,]), relay.reshape(var_148.astype('uint16'), [6,]), relay.reshape(var_148.astype('float32'), [6,]), relay.reshape(var_148.astype('uint16'), [6,]), ), 4)
var_198 = relay.var("var_198", dtype = "int16", shape = (7, 7, 13))#candidate|198|(7, 7, 13)|var|int16
bop_199 = relay.logical_or(bop_182.astype('bool'), relay.reshape(var_198.astype('bool'), relay.shape_of(bop_182))) # shape=(7, 7, 13)
bop_202 = relay.minimum(bop_182.astype('int16'), relay.reshape(const_141.astype('int16'), relay.shape_of(bop_182))) # shape=(7, 7, 13)
uop_205 = relay.sqrt(bop_170.astype('float64')) # shape=(7, 7, 13)
bop_207 = relay.mod(uop_145.astype('float64'), relay.reshape(bop_170.astype('float64'), relay.shape_of(uop_145))) # shape=(7, 7, 13)
uop_210 = relay.log2(bop_199.astype('float64')) # shape=(7, 7, 13)
const_212 = relay.const([[[-5.346950,-1.331421,-7.368482,9.848910,9.468185,7.071137,4.739541,0.704108,3.218524,0.232877,-9.027692,5.377267,-7.618896],[-5.650029,-9.484449,-1.286262,-8.022984,7.135548,-2.027843,0.539974,-2.237818,4.869469,5.852653,-2.988036,-6.134882,4.203167],[-4.995705,-7.276968,-5.079302,-4.109586,-3.827169,7.573204,0.384820,9.951216,2.776231,2.992627,9.358982,2.471688,-3.345549],[6.567445,7.913711,6.289068,3.948148,0.017972,1.923138,-8.294864,-6.826171,-1.724640,4.394447,-9.265639,-5.260590,-6.237591],[-2.181857,9.987518,2.336975,7.540373,2.926241,-8.185408,-9.400947,-8.287768,-0.408857,9.311377,2.451919,-6.814959,1.295281],[4.332543,5.017395,-7.947405,-3.647694,-0.171715,-7.053369,-8.188926,-8.081962,1.432060,-7.948707,-3.907334,-3.996223,-3.927893],[-7.356966,-9.870154,2.589813,6.636461,5.303704,-6.162081,5.661737,-1.310473,-8.036481,9.240819,6.272831,9.061241,0.907703]],[[-6.034796,9.325953,3.053989,-3.213052,8.837556,4.057832,-9.085536,-9.921304,-4.706372,5.871400,-4.642251,-6.858855,-0.305434],[-8.672650,3.173008,-3.563422,3.074117,-8.360945,8.786254,4.873448,-5.949336,1.950883,6.920235,4.031414,-7.328086,-6.021182],[-3.851047,-7.518907,0.994859,-3.643185,-3.262260,-0.750053,-1.175395,-6.378062,5.487005,3.295646,1.881508,-2.823272,-9.256454],[-6.239177,-8.747811,4.720755,2.374546,-8.476821,-5.117010,-5.636776,9.483959,0.083347,4.846862,9.449006,8.457311,4.395042],[2.949691,0.693545,0.672580,-4.695022,4.080394,6.497684,-4.768018,1.610203,-6.881838,7.222944,-5.860536,-6.875207,3.778429],[5.689958,-2.829442,9.149043,-0.027386,4.515823,-8.084353,-2.840017,-6.488841,6.096815,4.220586,4.116202,-1.019611,0.535058],[7.371922,-1.702135,5.942926,0.766107,-9.618508,8.361306,-2.948771,1.075522,4.304161,-8.268687,6.207116,-0.428821,-9.867998]],[[-8.272859,-9.355683,2.300425,7.025835,-8.175782,7.684468,-5.557242,-2.607147,5.062774,0.088966,-6.922397,-1.527376,-1.807168],[-4.492852,-6.933803,-4.001792,7.903573,-2.506168,3.881099,-4.935228,-6.888207,5.167341,-5.898171,-3.679476,-6.926066,-6.674821],[-6.874290,1.355436,-7.931851,4.838892,-6.837474,5.605608,1.346845,9.041903,-6.309894,-3.668056,6.741323,1.663460,-5.880119],[4.632640,4.399859,0.691395,-1.804484,-2.073321,-4.283435,9.334255,-0.996336,-3.123451,-6.192402,-0.596845,9.356977,3.080629],[-9.834292,-0.724126,0.092100,-2.379128,8.450404,-5.381360,-0.421384,-8.357236,1.960098,-4.304903,9.154829,9.814461,-5.398725],[-5.565159,-9.479529,-7.341042,-9.870188,1.214659,6.065316,2.408087,9.990271,-4.558368,-4.397329,-6.013471,7.568929,3.619266],[9.190897,-8.115539,-5.735695,-8.767640,6.705169,-0.585285,1.395730,3.634627,5.643601,-3.048343,-3.582415,-9.308072,8.651632]],[[-2.992200,8.981426,4.578105,-5.143924,-0.256707,-7.639728,-3.458104,-1.010738,-2.278843,-5.492793,-3.877661,-8.046233,7.237438],[9.674264,9.004035,-5.751009,1.616023,-6.133106,4.431481,9.114782,4.262894,-0.803096,9.112234,-0.059595,-3.655693,1.464850],[-0.251295,9.076782,-4.137886,-2.291339,-9.830664,-2.200212,-1.267767,-0.702381,8.673544,-4.126522,-7.358671,-1.280151,5.014907],[3.919464,-7.876009,-0.039015,-4.541264,-7.057056,-6.546058,-7.524050,7.957945,4.322846,9.574441,3.536618,8.611378,-8.478069],[-7.083241,3.116874,9.306669,-5.482583,2.639280,9.930290,-6.330483,-5.674529,-6.436963,2.196321,7.279118,3.484207,3.496794],[-7.685188,-9.694819,-4.495417,4.988005,-9.688832,-9.690494,-4.985990,0.061015,3.229606,6.816804,6.752326,-8.726076,-1.902759],[8.906599,0.727712,-0.581295,5.433409,-2.834155,-7.348169,0.863307,-2.602477,4.288774,1.729509,-4.735985,-1.326460,-0.510153]],[[0.128403,3.562875,0.447463,-7.672357,9.213711,-2.485591,8.317951,-6.583432,-8.078092,4.161324,1.408604,-2.478521,6.071838],[7.883913,-2.125107,6.657770,-3.393728,9.865848,4.038722,-4.097768,1.519063,2.823538,3.012298,-0.812546,2.674944,6.045093],[-1.831931,5.485020,-1.936960,3.913191,6.065262,6.284749,6.018407,1.711778,-7.335487,1.972537,-3.057137,-5.865478,-3.734125],[3.911301,-0.922440,-6.949476,-8.402257,7.972600,-5.141353,-8.532179,7.119641,-6.334883,-9.090098,-4.133028,9.339895,-0.918319],[-4.131794,-1.474675,7.439786,9.141237,-0.504330,-2.966961,9.008606,3.880386,9.807900,4.016644,6.042743,6.322594,3.472922],[-2.203986,-3.675628,-3.388273,-4.771041,7.368988,6.880232,0.207089,1.786994,-7.812204,0.571649,-1.940255,6.886535,-8.676952],[1.801937,0.946998,0.941155,-2.554181,-7.281627,-9.254095,8.606910,7.900676,-2.592832,-4.571863,-0.204101,2.076561,-8.280337]],[[-7.036794,4.739023,0.267401,7.130612,-4.997826,-7.538920,-5.760036,6.769094,0.525547,-1.753516,3.663433,-7.752664,-3.135012],[6.635396,-1.003610,-4.359364,1.806096,0.285848,-1.425004,2.756536,2.384634,6.963612,4.985920,1.459021,6.975064,9.458173],[-4.009041,-9.369508,-7.758710,-1.481130,-8.378308,-0.326162,7.106694,-6.343496,-2.760007,-3.055511,4.163301,2.449141,-0.047190],[-1.929433,-1.157431,4.322795,8.071135,-7.940993,3.377217,-1.657243,8.244896,8.459600,7.963157,-6.321442,-0.575429,4.912132],[4.430949,-7.608803,5.952746,6.046209,-6.149634,8.380205,0.322757,2.143400,-4.245050,-3.108807,-6.252572,-6.255845,6.448758],[9.989888,7.726856,5.548332,7.984170,3.955258,-7.766126,2.080137,9.615591,-1.162150,-3.459116,8.656838,-3.667640,-6.409445],[8.571667,-0.267322,3.544239,-9.178953,-5.175344,8.846775,2.316402,2.137805,-8.789539,-3.518418,6.396838,-9.074404,1.300379]],[[-9.468775,0.276599,-5.935587,-2.739238,3.650190,5.198574,-3.229361,7.547726,3.100011,-1.507997,0.141810,4.080712,-5.839403],[-7.226183,-7.731671,-6.649858,0.492384,2.836764,8.117258,-8.005214,-7.534761,-8.098650,-1.778531,-2.515567,6.601267,-0.200052],[1.458035,-8.758446,-4.293630,-6.358524,-7.542831,1.917395,-7.253474,-6.002118,-7.381197,-8.033935,-3.381713,-1.052112,3.895833],[-7.202069,1.142659,4.096990,2.635394,7.970746,-4.785040,-0.264417,-4.123634,1.096564,8.511624,-3.768500,-0.592940,-1.542653],[-9.079276,6.925267,8.892435,-8.539640,-9.174604,-5.110481,4.070543,4.459124,8.683375,7.808488,-5.300671,8.241455,-9.760639],[1.366901,-9.917984,5.981771,-4.958686,-8.084339,-8.312098,8.264428,-1.187563,-0.217486,8.233411,-1.779643,-5.764070,-0.407037],[-6.216615,-6.789272,-3.878525,1.606177,9.247236,3.155003,-7.044287,6.596269,-1.923584,7.292911,-6.222324,-6.985660,-5.183190]]], dtype = "float64")#candidate|212|(7, 7, 13)|const|float64
bop_213 = relay.bitwise_or(uop_210.astype('uint64'), relay.reshape(const_212.astype('uint64'), relay.shape_of(uop_210))) # shape=(7, 7, 13)
bop_216 = relay.floor_mod(uop_178.astype('float32'), relay.reshape(uop_176.astype('float32'), relay.shape_of(uop_178))) # shape=(7, 7, 13)
uop_219 = relay.atanh(uop_210.astype('float32')) # shape=(7, 7, 13)
uop_221 = relay.log(uop_219.astype('float64')) # shape=(7, 7, 13)
output = relay.Tuple([uop_129,bop_132,call_147,var_148,bop_150,uop_168,bop_173,bop_187,bop_191,uop_194,call_196,bop_202,uop_205,bop_207,bop_213,bop_216,uop_221,])
output2 = relay.Tuple([uop_129,bop_132,call_149,var_148,bop_150,uop_168,bop_173,bop_187,bop_191,uop_194,call_197,bop_202,uop_205,bop_207,bop_213,bop_216,uop_221,])
func_223 = relay.Function([var_124,var_125,var_137,var_148,var_190,var_198,], output)
mod['func_223'] = func_223
mod = relay.transform.InferType()(mod)
var_224 = relay.var("var_224", dtype = "uint8", shape = (7, 7, 13))#candidate|224|(7, 7, 13)|var|uint8
var_225 = relay.var("var_225", dtype = "uint8", shape = (7, 7, 13))#candidate|225|(7, 7, 13)|var|uint8
var_226 = relay.var("var_226", dtype = "float32", shape = (7, 7, 13))#candidate|226|(7, 7, 13)|var|float32
var_227 = relay.var("var_227", dtype = "float64", shape = (6,))#candidate|227|(6,)|var|float64
var_228 = relay.var("var_228", dtype = "float64", shape = (7, 7, 13))#candidate|228|(7, 7, 13)|var|float64
var_229 = relay.var("var_229", dtype = "int16", shape = (7, 7, 13))#candidate|229|(7, 7, 13)|var|int16
output = func_223(var_224,var_225,var_226,var_227,var_228,var_229,)
func_230 = relay.Function([var_224,var_225,var_226,var_227,var_228,var_229,], output)
mutated_mod['func_230'] = func_230
mutated_mod = relay.transform.InferType()(mutated_mod)
var_232 = relay.var("var_232", dtype = "float32", shape = (3, 13, 5))#candidate|232|(3, 13, 5)|var|float32
uop_233 = relay.erf(var_232.astype('float32')) # shape=(3, 13, 5)
var_235 = relay.var("var_235", dtype = "float32", shape = (3, 13, 5))#candidate|235|(3, 13, 5)|var|float32
bop_236 = relay.multiply(uop_233.astype('float32'), relay.reshape(var_235.astype('float32'), relay.shape_of(uop_233))) # shape=(3, 13, 5)
bop_239 = relay.equal(bop_236.astype('bool'), relay.reshape(var_235.astype('bool'), relay.shape_of(bop_236))) # shape=(3, 13, 5)
uop_242 = relay.tan(var_232.astype('float32')) # shape=(3, 13, 5)
uop_244 = relay.atanh(uop_242.astype('float64')) # shape=(3, 13, 5)
bop_246 = relay.subtract(uop_244.astype('int16'), relay.reshape(bop_236.astype('int16'), relay.shape_of(uop_244))) # shape=(3, 13, 5)
uop_249 = relay.sin(bop_246.astype('float64')) # shape=(3, 13, 5)
bop_251 = relay.less(uop_249.astype('bool'), relay.reshape(uop_244.astype('bool'), relay.shape_of(uop_249))) # shape=(3, 13, 5)
output = relay.Tuple([bop_239,bop_251,])
output2 = relay.Tuple([bop_239,bop_251,])
func_254 = relay.Function([var_232,var_235,], output)
mod['func_254'] = func_254
mod = relay.transform.InferType()(mod)
var_255 = relay.var("var_255", dtype = "float32", shape = (3, 13, 5))#candidate|255|(3, 13, 5)|var|float32
var_256 = relay.var("var_256", dtype = "float32", shape = (3, 13, 5))#candidate|256|(3, 13, 5)|var|float32
output = func_254(var_255,var_256,)
func_257 = relay.Function([var_255,var_256,], output)
mutated_mod['func_257'] = func_257
mutated_mod = relay.transform.InferType()(mutated_mod)
var_259 = relay.var("var_259", dtype = "float64", shape = ())#candidate|259|()|var|float64
uop_260 = relay.cosh(var_259.astype('float64')) # shape=()
uop_262 = relay.log(var_259.astype('float64')) # shape=()
const_264 = relay.const(-4.141295, dtype = "float64")#candidate|264|()|const|float64
bop_265 = relay.left_shift(var_259.astype('int64'), const_264.astype('int64')) # shape=()
uop_268 = relay.sinh(uop_262.astype('float64')) # shape=()
uop_270 = relay.log(uop_268.astype('float32')) # shape=()
uop_272 = relay.sigmoid(uop_268.astype('float32')) # shape=()
uop_274 = relay.log10(uop_272.astype('float64')) # shape=()
var_276 = relay.var("var_276", dtype = "float64", shape = (15, 10, 8))#candidate|276|(15, 10, 8)|var|float64
bop_277 = relay.floor_divide(uop_274.astype('float64'), var_276.astype('float64')) # shape=(15, 10, 8)
uop_280 = relay.log(uop_274.astype('float64')) # shape=()
bop_282 = relay.subtract(uop_280.astype('float32'), uop_268.astype('float32')) # shape=()
bop_285 = relay.subtract(bop_282.astype('int32'), uop_272.astype('int32')) # shape=()
func_254_call = mod.get_global_var('func_254')
func_257_call = mutated_mod.get_global_var('func_257')
const_289 = relay.const([0.993435,7.225187,-6.866863,6.523481,1.698795,4.247430,1.395728,-2.096875,-5.314684,-0.578787,6.509466,8.194078,4.111726,6.090670,-3.690111,-5.914671,-1.666380,-3.455498,7.720568,-9.919537,8.183722,-8.295530,-8.291229,-8.971371,-9.986938,3.382881,6.127602,0.804692,5.753824,1.411542,-2.204809,8.659278,-2.173692,2.043282,6.430145,-3.634439,2.830062,-3.223313,-7.937202,-9.606404,4.596277,-2.245308,-8.954845,-4.064853,-2.101097,-0.858175,6.971027,1.986094,1.758065,7.386037,-9.850618,1.261463,-5.805984,-9.824907,-8.399570,-4.807112,-3.431561,-4.517882,-7.272621,-7.738627,-6.967474,9.836127,6.180423,5.760538,0.879856,1.526115,3.224890,0.099765,-4.214734,-4.302377,3.028455,3.235847,9.894424,-0.750945,-3.209206,-8.086493,5.115554,-8.584968,9.106811,3.404481,8.486804,-5.190517,6.007909,-7.034624,6.559869,-5.611767,0.317994,6.894535,3.988321,2.764475,-6.647963,4.743510,4.725939,-6.960206,8.313196,-3.730814,2.984415,6.204725,-5.789004,-8.896921,-2.542203,-3.618993,-4.956850,-5.280653,-0.970199,9.092464,-9.950788,-6.437176,9.921067,-3.672342,8.826015,9.773126,1.058905,9.468941,-1.964218,-1.997103,1.642407,3.305468,-5.009801,4.318936,6.255236,5.361490,3.347182,5.833167,1.920260,-9.039336,-6.676949,6.877086,-1.932074,-6.355362,-9.707942,-4.376162,0.042012,-3.955309,3.634358,-5.293439,-9.041909,-5.650637,-9.856103,-9.731660,9.512341,-8.312055,-7.571638,-2.424140,-4.453184,-6.473906,0.003608,-6.540151,-2.243969,-2.707859,7.659573,-1.768229,-9.109655,4.268090,-1.735659,-7.945686,-1.918233,-2.150806,-6.167891,-9.462408,9.704920,-5.002957,8.558492,4.688773,1.478710,8.578243,7.768827,-6.891456,8.076107,-8.004436,-1.619518,0.959516,6.742271,3.101707,-9.203372,-5.385631,-8.504740,-7.270235,-3.683809,9.074732,0.010757,-1.905393,-7.318118,4.986925,-1.644620,-1.034100,-9.533697,-3.986440,5.731281,-5.133659,2.080038,1.865194,1.735675,8.376661,0.750591], dtype = "float32")#candidate|289|(195,)|const|float32
call_288 = relay.TupleGetItem(func_254_call(relay.reshape(const_289.astype('float32'), [3, 13, 5]), relay.reshape(const_289.astype('float32'), [3, 13, 5]), ), 1)
call_290 = relay.TupleGetItem(func_257_call(relay.reshape(const_289.astype('float32'), [3, 13, 5]), relay.reshape(const_289.astype('float32'), [3, 13, 5]), ), 1)
var_291 = relay.var("var_291", dtype = "int32", shape = ())#candidate|291|()|var|int32
bop_292 = relay.equal(bop_285.astype('bool'), var_291.astype('bool')) # shape=()
func_254_call = mod.get_global_var('func_254')
func_257_call = mutated_mod.get_global_var('func_257')
call_295 = relay.TupleGetItem(func_254_call(relay.reshape(call_288.astype('float32'), [3, 13, 5]), relay.reshape(const_289.astype('float32'), [3, 13, 5]), ), 0)
call_296 = relay.TupleGetItem(func_257_call(relay.reshape(call_288.astype('float32'), [3, 13, 5]), relay.reshape(const_289.astype('float32'), [3, 13, 5]), ), 0)
bop_297 = relay.divide(uop_274.astype('float64'), uop_272.astype('float64')) # shape=()
uop_300 = relay.sqrt(bop_277.astype('float64')) # shape=(15, 10, 8)
var_302 = relay.var("var_302", dtype = "float64", shape = (15, 10, 8))#candidate|302|(15, 10, 8)|var|float64
bop_303 = relay.subtract(uop_300.astype('float32'), relay.reshape(var_302.astype('float32'), relay.shape_of(uop_300))) # shape=(15, 10, 8)
uop_306 = relay.rsqrt(bop_297.astype('float64')) # shape=()
uop_308 = relay.acosh(bop_282.astype('float64')) # shape=()
uop_310 = relay.erf(uop_308.astype('float64')) # shape=()
uop_312 = relay.sigmoid(uop_308.astype('float64')) # shape=()
uop_314 = relay.asinh(bop_297.astype('float32')) # shape=()
bop_316 = relay.floor_divide(uop_312.astype('float32'), uop_272.astype('float32')) # shape=()
output = relay.Tuple([uop_260,bop_265,uop_270,call_288,const_289,bop_292,call_295,bop_303,uop_306,uop_310,uop_314,bop_316,])
output2 = relay.Tuple([uop_260,bop_265,uop_270,call_290,const_289,bop_292,call_296,bop_303,uop_306,uop_310,uop_314,bop_316,])
F = relay.Function([var_259,var_276,var_291,var_302,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_259,var_276,var_291,var_302,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_259= np.array(5.520500, dtype='float64')
module1.set_input('var_259', input_259)
input_276= np.array([[[-1.940819,9.253219,7.926721,1.451024,5.117944,-0.219233,1.732092,-4.443604],[-2.388751,-7.800068,2.189134,3.120243,-6.507321,1.691750,-7.146637,3.682772],[0.080467,-8.140551,-2.171180,-6.934209,-1.223311,-8.749813,3.632024,-6.974382],[-8.845915,-8.385222,4.327662,6.521947,-3.921037,-8.100379,6.435815,6.211173],[7.806135,-4.217322,5.611288,1.688785,4.829018,9.464132,-6.697435,-8.440350],[4.860494,8.790624,-2.695371,-8.577482,4.275767,0.502380,-9.080770,-3.806221],[8.842289,-8.137977,7.274803,-3.384576,8.149248,6.852091,3.388243,-0.199645],[-6.030794,4.337720,-8.584838,9.412755,1.611717,9.623520,2.517702,8.421572],[-5.427067,0.972486,5.782642,-8.991132,8.943420,3.505867,5.591133,2.069366],[9.401327,-3.752919,0.344658,1.148850,8.893136,-3.631808,-8.972474,4.093995]],[[3.227356,-7.948157,-4.091460,-1.528920,-0.774739,-8.093252,0.169288,9.618228],[-5.298946,4.900093,7.168661,-8.743425,6.573397,3.685722,-1.826895,-0.528492],[8.559476,2.038333,4.894893,-4.044311,1.050553,5.117688,-2.764782,5.679629],[-5.568266,-9.937827,7.531428,-9.137550,-3.384929,2.100015,-9.718912,-6.949512],[-2.618630,1.395738,2.551078,-1.910532,-8.461954,-9.330416,-0.710029,-6.234674],[-6.752640,4.745488,3.282791,-2.404084,4.091948,0.479006,3.900575,-6.245298],[8.653289,7.879813,1.265201,9.104962,2.601163,-4.416569,1.466048,-9.377340],[-8.919140,1.157441,-9.518419,0.974300,2.886559,5.011850,-8.594744,1.233225],[-0.472812,0.627265,-2.625936,7.622400,-7.782673,3.741506,-1.549133,9.690227],[6.885377,5.377527,-6.945583,-3.383828,9.931763,-8.892595,6.995127,2.325641]],[[-3.542870,7.637810,8.790614,-4.348240,-4.834407,5.569909,1.002846,2.761912],[2.297579,-6.052813,8.742391,-8.833078,0.931463,9.013789,-1.100574,-4.285984],[3.511779,5.196080,-2.911247,-0.111889,7.586089,-8.528762,-7.636868,-5.713921],[-6.651820,8.623180,0.986370,-8.108194,-4.778794,0.459894,-0.094660,5.320155],[5.694013,-4.450313,-5.850265,-7.491671,-7.319292,-2.236597,9.070034,-4.279419],[-4.095643,1.190559,4.783159,-8.566853,7.230173,-7.966893,4.591991,8.462268],[-5.013076,-3.680324,-1.944292,5.206766,7.537506,4.459402,-0.303174,-6.084512],[0.025220,-9.728667,0.376447,-2.471636,-7.663280,-4.966563,-6.774303,-1.431669],[8.062239,2.053008,0.136572,-5.268569,7.123760,5.078287,-7.942590,-1.445626],[-4.170905,-2.507102,4.789667,-8.789336,-1.431173,6.288208,6.222151,8.516022]],[[-8.680580,-3.512388,3.606029,0.903448,0.294089,-4.189361,-5.864874,5.665552],[3.253622,1.256920,2.251347,-7.962128,-1.218959,-5.010123,3.254290,7.110802],[3.578413,-1.669755,-3.928507,4.287717,-5.163174,9.354117,-3.239670,4.542961],[8.619498,-2.223215,3.449398,-0.196441,-7.700738,9.857640,-8.854592,8.483141],[-7.720037,1.502878,3.239611,-4.503752,-3.551740,2.203325,5.734122,3.735704],[2.661366,8.783940,-5.158043,-1.523359,-8.959126,1.836799,-1.497016,-2.705931],[-9.313707,-6.821781,-0.934378,9.931308,-9.144926,1.359977,-2.403099,-4.780455],[-1.024073,-9.410139,3.295371,8.361821,-1.497378,7.293815,-6.530806,0.488577],[7.696376,-1.514718,4.272113,-5.084503,-3.189741,9.009134,-1.632573,-4.133433],[6.656034,-0.208566,-5.450687,-7.013384,-8.921790,7.148087,-9.592874,3.871196]],[[-6.391945,9.050048,3.002896,-2.866694,-9.485502,-6.589056,9.560658,7.058457],[1.966035,-9.146636,-2.320314,-4.743705,-4.716655,3.445990,7.075745,-5.755494],[-3.593093,5.231015,1.742240,-3.828416,2.253275,3.340665,8.718785,0.868411],[-7.189961,-8.464053,-8.488655,5.054190,1.032209,5.663074,5.965976,-9.232586],[-2.775292,6.209809,3.057664,8.536571,4.687413,-6.925138,9.296965,1.582363],[9.698945,-8.115840,8.483197,-8.620891,-5.068165,1.568085,8.814181,-4.474426],[0.071306,2.628412,2.221305,0.126610,7.209561,1.636999,9.787209,-5.074847],[6.040313,-9.727603,-7.753741,5.420399,1.116069,-1.092614,-2.132620,-5.017497],[7.851664,2.220364,-8.753516,3.382539,-3.285468,-9.034870,5.073916,-8.976553],[-1.063174,4.233700,7.551679,2.338836,0.321909,4.931100,-3.201399,9.341957]],[[5.454946,-4.043805,8.809414,-1.354005,6.710969,0.522138,9.262218,3.739721],[9.184613,4.266466,8.022974,4.629661,-0.654874,-9.593046,-3.694857,-3.067169],[-3.583466,6.257878,-6.006202,2.331546,-7.766847,2.044405,-5.556754,0.489272],[6.480155,-0.598772,-9.368927,-5.222039,-1.644862,5.514841,-2.422408,1.643344],[7.433373,5.180012,-1.806113,5.470074,9.366873,-4.266275,7.484274,0.716112],[-1.515297,7.755178,4.319917,-9.639944,-8.916979,-4.459529,7.760780,-5.361938],[-6.670708,8.682401,-5.385935,-9.752586,2.598494,-8.226114,-7.263869,5.858509],[2.226029,5.934189,-3.627140,7.092580,-0.349391,-4.233861,1.323899,-6.979174],[-1.653917,-2.802900,-9.107741,-9.727823,7.762034,-2.013241,2.678290,2.242107],[-9.969281,5.823410,-3.514641,8.579450,5.617959,-9.333275,-4.956186,-4.533332]],[[-6.458723,-9.505971,4.756449,-2.525984,2.500589,0.369974,9.410414,3.346071],[1.914546,-4.362158,9.802008,-0.972667,5.128584,0.657180,5.069936,-6.800494],[-1.205423,-7.220523,-5.956361,9.999480,7.818002,-0.357508,8.020385,-7.049221],[-6.821900,-7.933860,6.327375,-8.563853,8.752021,-4.246044,-3.793990,9.658952],[4.465357,-7.991692,-2.979551,7.787442,-0.038269,-1.016497,-3.853095,2.388205],[-1.899856,-3.460554,-1.074158,-3.255856,9.865470,9.964408,-6.989562,-1.262862],[-9.017712,4.060813,-0.173151,7.545567,-1.322658,-9.542825,-4.409361,2.963106],[3.983501,-3.781336,9.943139,-6.015269,-3.725019,-5.916534,-0.099374,-4.402158],[0.017058,3.647790,1.089623,4.233966,0.552396,-4.232218,3.196729,-7.872740],[7.477753,-5.317903,4.338246,9.724779,-9.673933,-1.452335,0.863864,-1.767998]],[[-9.453769,-9.111034,-8.761298,6.120380,-0.579902,5.663284,-6.333888,-9.764292],[9.038611,-6.439217,7.020706,-8.118245,0.237675,-5.107697,5.406857,3.111414],[6.463505,0.606172,9.320787,3.582344,-3.611433,1.150907,-8.040474,5.983391],[5.610294,-6.879926,2.428775,-7.469360,-9.281042,5.582362,2.778503,5.501208],[5.786977,-1.114565,-9.739452,-2.852378,8.705033,0.268966,8.673569,4.151016],[-2.804155,-1.838189,-3.692514,-7.652825,0.458116,-0.191142,-2.954657,7.042866],[7.199173,9.548596,5.753509,-0.025137,4.564209,-0.539737,-1.798373,8.506931],[-4.882144,5.325420,3.865489,5.656453,4.140180,5.156286,5.821982,7.130692],[3.247550,-1.525294,-6.441103,6.325033,-4.979672,9.090236,1.060219,6.173341],[-0.572117,-9.944349,-4.032194,-4.576907,5.856652,-0.205008,0.395442,6.774775]],[[-1.884424,2.939617,3.907232,-9.337849,5.116771,-5.893965,3.842351,-5.743424],[-1.164986,7.471828,-6.181899,2.440239,1.037856,-9.436992,1.864968,4.087329],[-4.709084,3.830316,6.217040,7.171494,4.578329,4.569217,-5.538806,-4.619091],[-0.901791,6.940475,1.589176,5.236209,-6.637968,7.919467,2.034576,4.280150],[-0.306452,2.933928,2.805089,-4.518634,3.065468,0.703690,6.211939,-8.398485],[4.018548,-4.059180,-9.218089,2.651256,1.563553,1.884401,-9.287022,-0.416520],[9.467719,-7.754017,4.161905,0.512634,3.722196,-1.201364,-6.305024,-5.977105],[-2.028407,-9.061069,-6.216865,-7.038318,2.745118,5.232178,-0.587232,-2.184616],[7.703328,-5.710623,6.202857,6.635789,-6.312083,0.419515,5.807182,-2.419400],[-5.356750,-5.601019,6.477723,-1.562315,-3.047208,-0.549902,-7.564368,-6.635746]],[[0.186501,-1.041526,-5.429426,4.994027,9.782802,5.357725,7.018190,-9.129613],[1.855078,-8.204569,6.619030,2.482537,-2.817556,5.798279,-7.677119,7.194843],[-1.170021,-0.174217,7.166428,-5.280996,-6.499272,4.958862,7.587617,3.127714],[6.803852,9.373570,-3.057893,-0.465428,-3.092487,6.906471,-0.340515,3.118375],[-6.725433,7.558291,5.211606,-3.588521,-1.526032,0.747606,-3.977307,-1.918042],[7.581583,-3.034547,-6.849265,-6.010773,-4.326745,2.870139,-4.184177,-7.041382],[-2.138683,1.472364,8.278325,6.867691,7.527782,6.802115,6.185042,7.424288],[-5.113907,-5.903112,2.140114,4.996951,8.734899,-0.818903,4.853531,-8.064141],[-7.640832,-3.180083,-7.685460,1.553170,-8.719498,6.920223,-8.354898,-9.607128],[-0.064111,1.918312,-9.431609,-1.082430,0.999095,7.252145,1.964340,-7.378467]],[[0.145512,0.200297,-6.166254,-9.149241,8.801161,-7.866415,-5.782801,-2.909117],[-9.522787,-6.385189,4.328618,-4.264537,9.830203,8.492026,8.485442,6.602288],[-5.450352,-8.152774,2.953090,-4.232174,-1.045161,7.224395,2.900206,-2.987258],[2.624941,-5.902296,2.103015,-4.865472,6.333370,9.661551,1.217965,6.656351],[1.073881,8.293513,-4.728761,0.135686,-6.219002,-0.916804,1.555652,0.751843],[3.469775,5.304026,-1.721487,-4.627052,1.651093,5.042819,-8.794488,7.504226],[-1.487000,-3.554621,-0.980947,-8.131380,-4.919536,-6.798777,7.256398,5.206457],[-2.760687,8.728340,-1.381400,-2.266720,9.946682,-3.659397,-2.925726,1.141517],[-5.289529,-4.724101,6.359388,-6.680880,7.433022,6.579484,-1.021631,8.567285],[9.999837,-4.880004,-6.178697,-3.152057,-5.275634,6.386694,-7.569908,6.513089]],[[3.433295,2.515231,-5.647990,-8.085715,-7.310797,-7.328592,-8.122072,7.732605],[-0.284660,4.118899,-2.197452,-8.919086,3.871079,-6.036508,-1.868269,-8.859451],[1.797986,1.183703,8.302090,4.031982,8.530286,3.006196,1.278309,-1.542984],[-3.083504,9.267407,0.084621,9.677809,9.357154,-5.439730,9.662774,6.986182],[-8.805085,5.779949,0.612099,6.040115,-8.554740,-3.037036,-8.994307,-0.523475],[2.803070,7.457763,0.645482,2.997225,-0.173468,4.611245,-2.015979,-6.668521],[9.729812,6.377851,-4.675827,3.845566,3.730742,8.278224,-2.934610,-2.990125],[4.587438,-6.893647,-4.136484,7.910957,9.373867,-9.005094,-9.767221,-7.071685],[-4.457569,-6.377933,1.270477,-0.265653,3.707872,-1.045574,0.675213,9.768096],[-1.500003,8.568389,7.630050,-3.358015,2.562098,4.889764,8.072801,9.461035]],[[1.093829,3.453804,-1.537622,7.038189,1.545760,4.237843,-7.250961,2.274535],[9.079660,2.331311,4.366999,6.260172,-8.353429,-5.219582,1.742092,-0.761674],[3.313661,2.533876,1.236785,-7.498976,-9.426416,0.982964,-7.808220,6.558149],[2.962983,3.379951,-6.118927,-6.574376,3.404610,1.759470,-4.081008,2.198199],[4.291859,1.897798,3.057354,1.610755,-0.944566,-3.361316,7.917906,-4.490621],[-3.045152,6.984750,-6.251000,0.406048,8.830793,-9.426013,-1.753280,9.277188],[-7.320504,-5.370792,-6.889853,3.486285,-7.264194,-1.911821,-7.043360,4.278969],[-5.752286,2.098241,-5.569053,-6.515464,3.937900,7.600363,-8.811798,4.214751],[-9.023404,-6.740100,3.578632,2.597489,3.424148,5.147337,-9.291509,-2.307569],[-1.446144,1.926063,-5.731013,-6.927881,9.177549,-0.321275,-2.792471,-8.422822]],[[1.976292,-3.379282,2.587608,6.003511,0.009477,-0.498579,6.552011,-1.405819],[-1.962904,-9.875324,2.238596,8.766914,-1.439717,-8.335802,7.247282,4.008469],[7.718090,-3.817283,1.825932,9.191182,-0.053202,-4.872977,-1.934989,9.354660],[9.181189,7.272963,-2.992547,2.682572,-8.387805,-6.506732,-9.207334,2.670505],[3.028719,-3.619019,8.016943,0.767699,1.837289,4.966343,-0.301922,1.258050],[-3.787703,-8.251816,9.957188,4.755802,0.212002,4.792082,-3.821720,7.090164],[-9.612709,-9.709481,2.183174,-6.498603,-0.586065,-5.767299,-5.641470,-9.990372],[-5.737007,-9.715226,-7.701391,-8.775449,3.187161,8.428265,-9.113040,5.901077],[5.046249,-7.288000,5.284192,5.112184,-0.126718,-5.358673,3.743037,2.476389],[3.390993,6.682589,7.145020,2.847534,-4.675672,-0.462646,3.471648,0.019392]],[[-3.366516,3.542745,-7.384646,2.912936,-9.769638,-4.232558,-5.590163,4.448228],[7.514089,0.958400,-0.669654,1.470794,9.759300,1.201541,7.404895,9.388783],[-4.672217,5.869218,-9.126294,8.043631,-9.839826,-9.085938,8.158204,-8.715600],[6.764133,-6.188276,-2.999265,-4.631199,4.360925,-2.645147,-7.871866,-8.734445],[-7.747485,-1.461526,-5.329035,6.969498,5.901706,7.478190,8.038889,9.122222],[4.788808,0.791510,8.089567,-4.215776,6.380742,2.541901,-3.975403,5.354078],[1.245176,5.373605,6.706200,-2.487979,4.903293,-3.976851,3.523849,9.438497],[8.867448,-2.810410,-0.103722,7.715269,2.360355,8.489580,7.205154,-4.725382],[-6.215436,-9.291401,-9.772332,-5.079914,6.741835,-0.974618,-1.948849,7.912913],[-0.011825,-9.368828,-3.477313,4.238298,-4.014231,-6.271729,3.659538,-2.692170]]], dtype='float64')
module1.set_input('var_276', input_276)
input_291= np.array(6, dtype='int32')
module1.set_input('var_291', input_291)
input_302= np.array([[[6.044776,-0.588692,-2.027666,8.941834,-1.799085,-2.103984,-3.660285,2.574455],[4.242445,-3.744923,-3.493654,0.035762,6.232562,0.189235,-3.036342,-0.509740],[4.994163,-7.797547,-4.918611,-1.051614,5.710705,5.524708,-5.329552,-9.736256],[6.920216,9.075659,2.430515,1.029551,1.963311,0.056359,-0.966677,4.638873],[-8.120198,9.061164,-8.540035,-1.277639,8.501874,4.493858,-5.771185,4.611716],[0.852710,3.716565,4.688108,6.321474,-0.281657,-8.119536,7.761579,-1.290997],[-3.151963,-4.468549,2.403431,-9.371144,-2.989296,-4.703209,3.698044,2.759921],[0.350146,-6.463090,8.726226,2.662328,-6.259330,-8.081465,6.256305,9.987827],[6.915054,-3.425759,-0.518378,8.089515,1.501997,-8.801897,0.533589,9.448151],[-4.204222,4.247346,8.323838,9.381661,-2.095305,2.415449,-3.905559,6.854166]],[[-2.130300,8.077728,-2.772487,-7.563591,-5.314835,1.409742,-2.983553,-6.384995],[-1.421827,-3.201053,-5.613593,3.697050,-3.014596,4.039762,0.702356,-3.811272],[-1.303282,4.781878,-2.561821,-2.989737,-4.052311,-3.450101,-4.418948,4.202364],[-7.006299,9.622229,-9.504319,6.247385,1.954575,7.234984,-6.247506,1.709067],[4.668906,6.897085,-6.409820,1.316797,5.940786,4.352541,-8.084482,-3.395579],[-7.322822,-6.280200,-8.747071,4.332259,-9.517236,3.991125,-1.146803,4.917307],[2.661414,4.683972,3.749085,-5.485356,-3.887421,-4.470734,-2.903825,1.269958],[-4.993764,8.518371,-8.264261,0.429294,-4.387688,0.381532,0.718583,-6.450930],[2.261553,-3.019805,-8.474433,-4.129914,-6.858891,-3.183819,4.482854,5.060428],[4.850939,7.990186,-4.290847,-5.304340,7.216681,2.687418,-3.513868,8.886190]],[[-2.793516,-1.740849,-1.866076,7.005121,-6.430753,0.032815,-1.478436,4.129571],[-0.637457,5.614579,4.778764,6.260493,2.010337,7.955386,-8.265895,8.848645],[-2.038896,-8.222945,-4.524525,9.887152,0.696962,7.487594,-3.459284,1.355489],[0.601149,6.184085,-8.232022,2.143819,7.906969,7.276658,6.623407,-2.348876],[8.907556,-5.790392,7.905066,-2.015460,-0.856677,-0.135958,-6.849332,9.799940],[-2.768331,3.980868,6.669014,-3.617270,5.070468,6.912832,-7.159088,8.937902],[-6.353314,-5.620739,7.066551,-8.943979,-1.860376,-7.782110,-5.593601,-7.509410],[-4.914998,1.416572,-1.329762,4.191296,5.841421,-2.773547,-4.908902,3.576964],[7.654533,-6.200607,-0.032197,-9.515514,8.925548,-2.281781,1.070120,-5.596154],[-3.692226,1.752666,0.795016,-0.627396,8.357034,6.304083,-3.219299,-1.876421]],[[-5.738050,5.629290,1.095127,6.342571,-3.351925,-5.100927,-1.063360,-3.007235],[-6.281428,9.442375,-6.900870,9.512751,-5.836251,9.635383,8.467079,-8.315069],[6.029365,2.310378,4.851081,4.525608,-4.659379,6.846019,5.450323,6.566928],[-2.918735,5.443989,-2.465126,-4.566910,2.914069,-4.598422,-7.836991,-9.690291],[-8.376064,-2.244810,-2.453784,7.417706,-5.591781,0.045535,-6.589865,6.292177],[9.561268,3.721424,6.526559,-1.753672,-2.197428,-1.271798,4.565554,-9.677130],[-0.992981,-4.151535,-3.074483,3.470312,-4.231125,-9.001986,6.094902,6.440706],[9.015970,-6.148554,7.290355,4.697055,5.320463,-4.247397,2.377009,-9.359121],[9.613183,-5.677885,9.490216,-5.189743,7.092292,-9.408153,7.621096,2.514012],[7.767916,1.209539,2.239227,-4.367257,-9.099853,9.278447,6.540812,3.858870]],[[-9.325208,-1.244062,4.602099,-6.099515,-6.034902,2.906865,-4.158337,-7.991465],[0.693274,-0.515217,-4.170807,5.970197,3.603765,-5.073031,3.507997,-3.841904],[-7.466773,1.764883,9.733007,-3.221481,-5.896353,9.568317,-1.480833,-1.926964],[-6.613823,-9.628750,8.206869,1.512198,3.566195,2.321212,-0.250152,-8.308159],[0.192261,-4.601713,3.938327,-5.011357,2.863196,6.881774,5.547137,6.992245],[-9.515070,-7.321569,3.641494,7.525223,-3.634873,8.075007,-9.480822,0.969268],[7.960952,-2.794650,-4.629578,0.092998,4.330406,5.880991,-9.481491,-3.599980],[5.684092,1.923290,-9.818374,5.690282,5.203941,9.715362,-6.220493,5.723769],[7.543152,3.815630,-6.332208,9.383070,9.650476,-7.480923,6.206407,-4.504337],[-8.083991,7.374852,-7.827445,1.419226,-8.448885,3.308410,7.436664,-7.280234]],[[6.597852,-4.022380,-4.175167,5.469891,-4.781443,-5.506800,-6.523132,-2.828910],[-3.954927,2.907056,-5.761446,-0.326378,-6.634830,-1.565054,2.666647,-4.572076],[-0.491219,-7.307110,-6.369737,-6.953415,-8.081738,-3.522293,2.459913,8.412014],[-1.484032,3.835507,4.041083,8.354223,0.368063,3.035964,2.266516,4.558139],[-5.632764,-9.054603,3.845710,1.167681,0.428014,-4.979999,5.426348,-1.136196],[6.426888,-9.309750,-7.135739,-0.996424,9.591938,-8.437175,2.399368,-4.238367],[6.553898,-5.295893,5.985815,-3.562829,5.679231,-4.444246,-9.846870,-9.160755],[-9.482873,-1.027194,8.167666,-6.544447,-9.620652,3.519622,8.677556,1.026802],[-4.956943,3.646094,-4.318763,5.665578,3.122836,-8.227834,-1.796136,2.197948],[5.794889,3.812517,-9.485240,-8.840182,-7.212141,-3.657793,7.984744,0.317389]],[[4.382948,-6.857362,-6.554877,8.945170,3.357673,-2.910456,-0.819626,-8.843116],[6.684791,-1.493276,9.581373,0.796028,-5.090686,1.162717,9.258302,-3.094146],[-2.225802,-7.211768,-5.169263,-9.428874,1.210495,2.261544,-9.960377,-1.451641],[-8.126936,4.649942,8.312513,3.352324,-4.800046,9.259749,7.282948,-3.108934],[-5.195702,2.632883,-2.725043,-5.508067,-6.428564,3.112129,4.133379,-1.723018],[9.226170,-3.517721,-1.781521,-2.141018,-1.817047,3.855011,9.229695,9.164560],[-0.262875,-6.798871,-3.284858,2.808551,6.648581,2.892376,-6.376336,-1.226088],[8.149485,-5.457593,-7.517033,-5.539997,-4.395269,7.168691,0.530197,-5.201876],[9.137441,-6.016430,9.724902,-5.221270,3.428524,-8.985181,4.236717,3.574490],[8.037488,9.194850,-8.432191,-3.213865,2.617640,5.054870,3.723559,-9.840276]],[[-5.874123,-3.798508,-3.751928,-5.691130,9.030578,2.950605,2.122250,2.157660],[-8.011633,9.643389,4.140420,-4.358001,0.076372,8.560478,8.845150,8.085175],[0.441698,1.707629,-2.393946,7.078825,-9.239937,-4.025018,0.341370,-1.266443],[-5.456885,-6.875194,-6.628589,-6.712806,-7.625048,-7.427918,-5.022392,-8.285786],[0.207402,6.349908,4.745603,8.290580,-0.438023,-0.705326,-1.643081,7.806672],[-6.920309,-4.596240,-4.485673,-9.542380,-6.260787,-6.505155,-2.343915,-2.929349],[4.445528,6.637552,-5.175315,-2.208235,-5.856129,-8.741282,-2.570485,-0.150919],[-9.430047,3.255905,0.472193,0.583283,-7.648386,-4.348247,-6.685705,-9.487204],[2.038714,8.658632,4.618339,-3.266882,-4.953122,-7.734328,-8.404316,5.509651],[1.945623,-3.829039,-2.446526,-7.606133,9.617218,8.987054,-1.491734,3.661536]],[[0.137271,4.507537,6.251238,-2.199240,8.750850,-3.529252,7.702871,-3.972580],[-0.625806,-0.421792,-7.365032,9.687473,2.534191,-0.915154,-5.559936,9.124521],[-0.696620,-6.067742,-9.416044,4.132694,1.267475,-0.314436,5.896305,4.997025],[3.309490,-4.463308,2.344333,8.822483,-6.090812,-5.130313,-1.735583,-5.114869],[-7.612263,-5.315478,3.609602,-6.788969,4.235656,-3.031103,1.780129,-4.694167],[1.632137,2.097273,-1.006485,8.769093,-6.659075,1.117906,-0.432082,6.889735],[8.528818,5.158266,6.214315,5.068208,-7.802306,2.097639,-5.883110,-6.313746],[-1.493143,-8.307403,7.341165,3.716077,3.067452,-1.242328,-3.235931,-3.895820],[5.303042,-2.861352,-0.592975,5.205330,0.787497,-6.042359,-7.290557,9.828688],[-0.990261,3.234925,-7.505641,6.642655,1.187923,0.910640,2.943349,7.368209]],[[3.526181,6.098118,-7.110189,6.612615,7.395882,1.126424,-9.433897,-8.020075],[-8.544821,-0.387876,-5.552636,-0.231294,6.041680,3.863582,5.033586,8.264191],[7.451214,-3.350942,7.930805,8.333626,-5.356265,-0.806106,-4.648527,6.012341],[-3.634594,8.860051,-9.826805,9.268934,4.464882,-3.287537,1.022782,6.538387],[0.241090,-7.452113,0.964154,1.432145,-0.499762,2.952410,6.472540,0.724343],[-2.158107,-9.926572,-4.498851,6.092233,4.361116,8.971503,2.846216,9.223739],[-5.640962,-1.772260,5.030488,2.916814,8.907429,-6.542659,-1.315313,2.653736],[-5.076432,1.503874,0.440945,-3.934371,-2.285749,6.014269,4.272541,-2.109491],[2.383988,4.213045,4.545747,-0.295239,0.197861,3.310342,2.161815,0.755400],[-2.487689,-0.700909,8.807775,-3.099173,-5.884916,9.242783,-4.963744,-6.445763]],[[-9.438021,7.521414,-6.744588,5.259670,-4.963215,2.522580,4.445433,-3.939869],[9.167511,6.276343,5.480493,2.839749,2.684670,6.870954,-1.871428,0.935926],[-4.344820,-2.214133,4.961587,-2.589810,-5.224953,3.803893,-8.085482,-8.333556],[-1.812815,-7.566051,2.398027,-4.569870,2.734369,6.779568,8.303165,-0.447220],[0.449228,-6.747410,-0.629689,-4.200838,5.221699,-6.600324,3.784085,8.315636],[-6.435032,-6.260172,4.082102,4.453775,-5.551256,0.024932,7.001800,5.174729],[-0.195914,0.454698,2.908961,-9.569438,0.629415,-7.619048,4.386028,5.518675],[-3.510092,8.553445,-4.614667,-2.296896,0.669690,-4.775109,3.241645,5.120306],[6.694495,5.403437,9.639337,1.112054,-3.591810,4.601731,-6.203968,-3.153555],[-1.801055,-3.141569,-7.790841,-9.474504,-9.942337,-6.096708,-1.479543,-2.113539]],[[0.805063,-9.465428,9.616582,0.099963,-0.358023,0.466467,1.924536,1.891126],[1.117925,-4.192083,-8.806222,-0.817086,9.454950,-4.284353,-9.158291,-0.366013],[-3.774056,-4.488738,-7.088018,-1.266920,3.460566,3.037120,2.349138,-5.513947],[8.042734,-9.245579,4.450161,-4.177053,3.806153,3.236775,3.916585,0.573243],[-2.304390,3.616820,-3.839787,1.068973,9.819703,-3.438414,1.853500,-2.819306],[-0.077414,-5.912643,1.107152,-6.395104,-6.664161,-1.936836,9.642878,7.490732],[-0.093829,1.735484,-8.877235,-9.101945,3.273375,-5.490377,6.415705,8.329145],[3.915650,-0.258108,9.781175,-8.803691,-7.044406,5.175715,-1.969825,1.903685],[-6.893542,0.876456,-4.013597,-4.950058,0.942489,-3.011093,5.986682,-5.439263],[-9.581106,9.131832,0.524780,1.113901,8.987043,-9.207476,4.901148,-2.789283]],[[-8.418378,7.649329,2.281083,-8.789710,-0.835518,9.412025,1.438893,6.746256],[-8.954245,4.069231,-3.268291,6.818189,2.698819,8.587384,-1.182448,-1.007859],[-1.451442,2.061327,-1.072973,-3.702630,-4.900047,-0.918356,6.506795,3.121091],[5.442705,4.304661,2.644359,3.756168,-1.930433,-5.131367,-1.753577,1.049892],[-6.389608,-7.322416,4.802646,0.716552,-1.896652,1.056474,8.911908,-2.930420],[3.160907,-5.935905,-7.344553,4.945707,6.711485,6.416525,5.417585,-1.671370],[9.494402,-4.762336,4.427525,8.903778,7.233967,0.652211,9.544023,1.738633],[6.415276,-5.384940,2.379205,3.506246,6.895380,-6.504794,2.539372,-1.391019],[4.265149,6.819931,-5.855342,4.258500,8.862144,9.288406,-8.102137,7.115340],[-5.758270,4.195828,-5.335685,-7.623443,-3.732857,-5.690589,1.994790,-7.601462]],[[4.098888,3.086742,-4.869939,7.818866,7.565811,5.078741,-2.597181,-8.585195],[-2.403121,-2.409579,-6.293660,-8.442025,-8.263568,-5.895163,2.172252,-3.010384],[1.502449,-1.249616,-7.656803,9.001977,-5.862628,5.848783,-7.521261,-9.422077],[-6.165361,0.851880,5.810505,9.969036,-8.835732,-2.604709,-6.887096,-4.327742],[-8.086678,-3.194420,-6.741171,3.131998,-9.350334,0.021433,-0.498867,9.441445],[0.442776,2.530415,-6.442854,-3.074213,-6.502534,-8.760903,0.952927,-7.375031],[9.592819,7.516981,7.377234,5.310504,2.997291,-2.763208,-0.059862,-7.793327],[-3.162319,-2.451237,-8.728390,0.667822,2.813943,-8.423924,-3.482091,6.110550],[5.019624,6.846068,1.651347,-9.957809,-2.206713,-4.971889,-4.817791,-3.422707],[-2.547009,5.307170,0.827686,6.519419,-2.318763,9.934810,2.797710,-0.374463]],[[5.411745,9.453394,-0.854611,-2.948455,-4.494683,9.943479,0.738593,7.292669],[0.828398,7.863864,3.360104,9.209240,-2.374014,-7.808269,7.732019,-3.160487],[-3.335834,2.288017,7.654341,8.522592,-8.151577,-4.192409,-6.805926,5.474527],[-3.201789,-7.019817,-4.658899,3.901142,2.569184,-7.184707,-6.789571,1.105889],[-0.644401,-1.162901,-9.274064,3.630179,-4.905136,0.819116,6.915005,-5.207215],[2.612381,2.186665,9.821761,-7.724915,-2.893075,4.387135,3.916850,4.474481],[-5.435006,7.072469,-8.699364,7.349857,-6.959292,6.036434,-2.855903,5.325317],[0.337526,5.580193,8.834184,9.255226,-1.087829,-3.383935,8.067999,9.502187],[1.131254,5.999332,8.769948,4.217485,7.983014,4.460452,-0.019329,3.613186],[3.581109,-9.316720,-0.768085,-4.677406,7.031355,-8.753364,-9.629531,-7.516813]]], dtype='float64')
module1.set_input('var_302', input_302)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_259, input_276, input_291, input_302, )
res3 = intrp3.evaluate()(input_259, input_276, input_291, input_302, )
res4 = intrp4.evaluate()(input_259, input_276, input_291, input_302, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
module5.set_input('var_259', input_259)
module5.set_input('var_276', input_276)
module5.set_input('var_291', input_291)
module5.set_input('var_302', input_302)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_259, input_276, input_291, input_302, )
res7 = intrp7.evaluate()(input_259, input_276, input_291, input_302, )
res8 = intrp8.evaluate()(input_259, input_276, input_291, input_302, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
module9.set_input('var_259', input_259)
module9.set_input('var_276', input_276)
module9.set_input('var_291', input_291)
module9.set_input('var_302', input_302)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_259, input_276, input_291, input_302, )
res11 = intrp11.evaluate()(input_259, input_276, input_291, input_302, )
res12 = intrp12.evaluate()(input_259, input_276, input_291, input_302, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
module13.set_input('var_259', input_259)
module13.set_input('var_276', input_276)
module13.set_input('var_291', input_291)
module13.set_input('var_302', input_302)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_259, input_276, input_291, input_302, )
res15 = intrp15.evaluate()(input_259, input_276, input_291, input_302, )
res16 = intrp16.evaluate()(input_259, input_276, input_291, input_302, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
module17.set_input('var_259', input_259)
module17.set_input('var_276', input_276)
module17.set_input('var_291', input_291)
module17.set_input('var_302', input_302)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_259, input_276, input_291, input_302, )
res19 = intrp19.evaluate()(input_259, input_276, input_291, input_302, )
res20 = intrp20.evaluate()(input_259, input_276, input_291, input_302, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
module21.set_input('var_259', input_259)
module21.set_input('var_276', input_276)
module21.set_input('var_291', input_291)
module21.set_input('var_302', input_302)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_259, input_276, input_291, input_302, )
res23 = intrp23.evaluate()(input_259, input_276, input_291, input_302, )
res24 = intrp24.evaluate()(input_259, input_276, input_291, input_302, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()

'''55: TVMFuncCall
54: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
53: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
52: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
51: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
50: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
49: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
48: tvm::transform::Pass::operator()(tvm::IRModule) const
47: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
46: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
45: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
44: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
43: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
42: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
41: tvm::transform::Pass::operator()(tvm::IRModule) const
40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
37: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
36: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
35: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
34: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
33: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
32: _ZN3tvm5relay9transform22Devic
31: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
28: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
27: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
26: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
25: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
24: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
23: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
22: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
21: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
20: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
19: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
18: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::te::Tensor, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
17: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::runtime::ObjectRef, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
16: tvm::LowerWithPassList(tvm::IRModule, tvm::runtime::Array<tvm::transform::Pass, void>)
15: tvm::transform::Pass::operator()(tvm::IRModule) const
14: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
13: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
12: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
11: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
10: _ZNSt17_Function_handlerIFvN3tvm7
9: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
8: tvm::tir::DataTypeRewriter::operator()(tvm::tir::Stmt)
7: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
6: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::StoreNode const*)
5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
4: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
3: _ZThn16_N3tvm3tir16DataTyp
2: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
1: tvm::operator<<(tvm::PrimExpr, tvm::PrimExpr)
0: tvm::left_shift(tvm::PrimExpr, tvm::PrimExpr, tvm::Span)

'''