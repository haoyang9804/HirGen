import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (14, 12))#candidate|0|(14, 12)|var|float64
uop_1 = relay.sinh(var_0.astype('float64')) # shape=(14, 12)
bop_3 = relay.subtract(uop_1.astype('int16'), relay.reshape(var_0.astype('int16'), relay.shape_of(uop_1))) # shape=(14, 12)
output = relay.Tuple([bop_3,])
output2 = relay.Tuple([bop_3,])
func_6 = relay.Function([var_0,], output)
mod['func_6'] = func_6
mod = relay.transform.InferType()(mod)
mutated_mod['func_6'] = func_6
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7 = relay.var("var_7", dtype = "float64", shape = (14, 12))#candidate|7|(14, 12)|var|float64
func_6_call = mutated_mod.get_global_var('func_6')
call_8 = func_6_call(var_7)
output = call_8
func_9 = relay.Function([var_7], output)
mutated_mod['func_9'] = func_9
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11 = relay.var("var_11", dtype = "float32", shape = (6,))#candidate|11|(6,)|var|float32
var_12 = relay.var("var_12", dtype = "float32", shape = (6,))#candidate|12|(6,)|var|float32
bop_13 = relay.greater_equal(var_11.astype('bool'), relay.reshape(var_12.astype('bool'), relay.shape_of(var_11))) # shape=(6,)
bop_16 = relay.logical_or(bop_13.astype('bool'), relay.reshape(var_11.astype('bool'), relay.shape_of(bop_13))) # shape=(6,)
bop_19 = relay.left_shift(bop_16.astype('uint16'), relay.reshape(bop_13.astype('uint16'), relay.shape_of(bop_16))) # shape=(6,)
bop_22 = relay.bitwise_and(bop_13.astype('uint8'), relay.reshape(var_11.astype('uint8'), relay.shape_of(bop_13))) # shape=(6,)
bop_25 = relay.floor_mod(var_12.astype('float64'), relay.reshape(bop_16.astype('float64'), relay.shape_of(var_12))) # shape=(6,)
uop_28 = relay.acos(bop_16.astype('float32')) # shape=(6,)
func_6_call = mod.get_global_var('func_6')
func_9_call = mutated_mod.get_global_var('func_9')
const_31 = relay.const([3.215811,-6.233436,-5.786821,8.791536,-2.465942,5.373033,-0.122590,-6.615859,-1.341553,-2.177434,9.884612,7.574138,-9.825809,4.158201,1.019726,3.836343,3.267626,-9.816286,3.780512,-2.020106,7.714733,-6.311223,-3.334787,8.411318,4.636055,6.229947,-4.569555,8.668415,-4.971194,-6.050397,6.665529,6.222662,8.739927,-0.146943,7.219959,2.007423,6.662180,5.749068,-9.156860,-4.388460,-4.152476,-0.604980,-6.563621,-2.254061,-9.537480,-4.385210,-2.437859,-9.893560,7.688876,-6.530906,8.195916,-6.566977,0.707403,-1.641047,-9.379148,2.367702,-2.150461,5.761048,3.954793,-4.716774,-4.901008,-2.157254,-1.380628,5.275389,5.139608,-7.596277,5.110953,1.392369,-6.269357,-9.248332,-5.774604,-8.316282,4.112645,9.698566,6.910055,-3.392816,7.609968,-6.364328,0.741479,1.256112,3.477880,5.360289,-1.538687,9.299150,-4.470752,8.662238,-6.114236,8.153125,7.844973,-7.052492,-4.392809,8.748476,2.024557,5.003234,7.110751,-2.827892,6.239361,8.248231,-3.018853,-8.265922,-4.815218,-6.502108,1.804159,-5.110884,-6.080891,6.647931,0.993582,-3.370792,-4.942188,3.546398,4.894190,-2.338871,0.714575,-8.241505,8.406315,-3.376415,8.808443,-1.284622,-2.716687,5.035574,1.231416,-5.672110,3.569776,-5.257282,-2.700912,9.113437,0.220760,-8.034048,5.598394,-7.589851,-3.464704,-9.266168,4.411080,-9.871541,0.070366,5.011011,6.343821,8.947730,-4.198078,-0.080150,0.769973,-1.764560,-7.652136,6.440366,-4.194831,-0.036923,-7.641452,-6.156687,6.012725,-1.638989,-2.035187,3.357768,8.946080,1.481735,-9.803097,-5.577942,6.750328,-8.290313,-5.884770,-0.907116,-4.383506,0.751433,1.109396,-7.484081,-0.117086,-6.516317,-4.775768,-2.460084], dtype = "float64")#candidate|31|(168,)|const|float64
call_30 = relay.TupleGetItem(func_6_call(relay.reshape(const_31.astype('float64'), [14, 12])), 0)
call_32 = relay.TupleGetItem(func_9_call(relay.reshape(const_31.astype('float64'), [14, 12])), 0)
uop_33 = relay.sin(bop_22.astype('float32')) # shape=(6,)
uop_35 = relay.log2(var_12.astype('float64')) # shape=(6,)
var_37 = relay.var("var_37", dtype = "float64", shape = (6,))#candidate|37|(6,)|var|float64
bop_38 = relay.floor_divide(uop_35.astype('float64'), relay.reshape(var_37.astype('float64'), relay.shape_of(uop_35))) # shape=(6,)
bop_41 = relay.add(bop_22.astype('uint64'), relay.reshape(bop_38.astype('uint64'), relay.shape_of(bop_22))) # shape=(6,)
uop_44 = relay.tan(var_37.astype('float32')) # shape=(6,)
func_6_call = mod.get_global_var('func_6')
func_9_call = mutated_mod.get_global_var('func_9')
call_46 = relay.TupleGetItem(func_6_call(relay.reshape(call_30.astype('float64'), [14, 12])), 0)
call_47 = relay.TupleGetItem(func_9_call(relay.reshape(call_30.astype('float64'), [14, 12])), 0)
bop_48 = relay.logical_xor(uop_35.astype('int16'), relay.reshape(uop_28.astype('int16'), relay.shape_of(uop_35))) # shape=(6,)
const_51 = relay.const([-3.225354,2.475023,-1.658126,5.950272,1.270863,-4.621581], dtype = "float32")#candidate|51|(6,)|const|float32
bop_52 = relay.bitwise_or(uop_44.astype('int64'), relay.reshape(const_51.astype('int64'), relay.shape_of(uop_44))) # shape=(6,)
bop_55 = relay.equal(bop_22.astype('bool'), relay.reshape(uop_35.astype('bool'), relay.shape_of(bop_22))) # shape=(6,)
uop_58 = relay.log(uop_35.astype('float64')) # shape=(6,)
uop_60 = relay.tan(bop_52.astype('float32')) # shape=(6,)
const_62 = relay.const([True,True,True,False,True,False], dtype = "bool")#candidate|62|(6,)|const|bool
bop_63 = relay.subtract(bop_55.astype('int64'), relay.reshape(const_62.astype('int64'), relay.shape_of(bop_55))) # shape=(6,)
uop_66 = relay.sin(uop_58.astype('float32')) # shape=(6,)
uop_68 = relay.asin(uop_66.astype('float32')) # shape=(6,)
bop_70 = relay.bitwise_or(uop_66.astype('uint32'), relay.reshape(bop_19.astype('uint32'), relay.shape_of(uop_66))) # shape=(6,)
bop_73 = relay.right_shift(uop_60.astype('uint16'), relay.reshape(uop_28.astype('uint16'), relay.shape_of(uop_60))) # shape=(6,)
uop_76 = relay.cos(uop_68.astype('float32')) # shape=(6,)
uop_78 = relay.log10(uop_76.astype('float32')) # shape=(6,)
uop_80 = relay.atanh(uop_68.astype('float32')) # shape=(6,)
func_6_call = mod.get_global_var('func_6')
func_9_call = mutated_mod.get_global_var('func_9')
call_82 = relay.TupleGetItem(func_6_call(relay.reshape(call_30.astype('float64'), [14, 12])), 0)
call_83 = relay.TupleGetItem(func_9_call(relay.reshape(call_30.astype('float64'), [14, 12])), 0)
uop_84 = relay.rsqrt(uop_68.astype('float32')) # shape=(6,)
var_86 = relay.var("var_86", dtype = "float32", shape = (6,))#candidate|86|(6,)|var|float32
bop_87 = relay.greater_equal(uop_78.astype('bool'), relay.reshape(var_86.astype('bool'), relay.shape_of(uop_78))) # shape=(6,)
output = relay.Tuple([bop_25,call_30,const_31,uop_33,bop_41,call_46,bop_48,bop_63,bop_70,bop_73,uop_80,call_82,uop_84,bop_87,])
output2 = relay.Tuple([bop_25,call_32,const_31,uop_33,bop_41,call_47,bop_48,bop_63,bop_70,bop_73,uop_80,call_83,uop_84,bop_87,])
func_90 = relay.Function([var_11,var_12,var_37,var_86,], output)
mod['func_90'] = func_90
mod = relay.transform.InferType()(mod)
var_91 = relay.var("var_91", dtype = "float32", shape = (6,))#candidate|91|(6,)|var|float32
var_92 = relay.var("var_92", dtype = "float32", shape = (6,))#candidate|92|(6,)|var|float32
var_93 = relay.var("var_93", dtype = "float64", shape = (6,))#candidate|93|(6,)|var|float64
var_94 = relay.var("var_94", dtype = "float32", shape = (6,))#candidate|94|(6,)|var|float32
output = func_90(var_91,var_92,var_93,var_94,)
func_95 = relay.Function([var_91,var_92,var_93,var_94,], output)
mutated_mod['func_95'] = func_95
mutated_mod = relay.transform.InferType()(mutated_mod)
const_97 = relay.const([[-2,-4,2,6,-1,-9,3,7,9,-6,-4,-4],[7,2,9,7,-6,-8,4,6,-7,6,-10,-7],[4,4,2,-2,9,8,-7,1,5,-2,5,6],[4,-1,-2,3,-2,3,-4,-2,10,3,4,-1],[-3,-9,4,10,5,2,2,5,-4,-7,-5,3],[10,3,10,-4,-8,3,8,7,9,-3,5,-4],[-6,7,-1,-7,8,4,3,-5,10,-2,-3,4],[-10,-2,4,-6,-8,-4,-3,9,-2,-1,2,-7],[-4,-1,-9,9,-1,-4,7,-7,-3,4,-1,-9],[-8,7,6,2,-2,9,7,1,-6,-3,7,8],[1,7,-4,5,9,-4,6,7,7,1,3,-2],[-1,4,4,-7,3,-5,10,-1,-1,-6,-10,-9],[10,-1,-4,-3,-9,-10,-8,-6,-10,-10,-2,-1]], dtype = "int16")#candidate|97|(13, 12)|const|int16
const_98 = relay.const([[-8,6,-2,-10,6,5,-6,9,-7,-3,-7,-6],[5,-1,9,4,-8,9,5,-10,5,-10,-2,7],[9,-6,4,5,-9,-8,-2,8,-5,9,-10,10],[4,-6,-10,-10,2,-5,-8,-8,7,-9,-8,-8],[-6,2,7,9,3,-10,8,-4,-5,-9,-1,2],[-10,-8,8,1,4,7,-5,-5,-4,3,-6,-4],[-8,-6,9,9,-10,10,-5,-1,-4,2,-5,-10],[-3,-2,-10,2,1,-6,-7,-10,2,-5,2,-5],[4,-8,4,9,2,8,10,-9,9,1,-2,5],[10,-8,5,9,-3,-10,6,6,-3,-2,-6,3],[-8,-3,5,2,-7,-8,-8,-4,5,-7,5,10],[10,10,3,-3,-8,-9,6,8,6,8,2,-2],[-5,-9,2,8,-1,8,-2,5,9,2,-7,-9]], dtype = "int16")#candidate|98|(13, 12)|const|int16
bop_99 = relay.greater_equal(const_97.astype('bool'), relay.reshape(const_98.astype('bool'), relay.shape_of(const_97))) # shape=(13, 12)
uop_102 = relay.exp(bop_99.astype('float32')) # shape=(13, 12)
var_104 = relay.var("var_104", dtype = "float32", shape = (13, 12))#candidate|104|(13, 12)|var|float32
bop_105 = relay.multiply(uop_102.astype('int16'), relay.reshape(var_104.astype('int16'), relay.shape_of(uop_102))) # shape=(13, 12)
bop_108 = relay.minimum(uop_102.astype('uint16'), relay.reshape(bop_105.astype('uint16'), relay.shape_of(uop_102))) # shape=(13, 12)
uop_111 = relay.sin(const_97.astype('float32')) # shape=(13, 12)
uop_113 = relay.log10(uop_111.astype('float64')) # shape=(13, 12)
var_115 = relay.var("var_115", dtype = "float64", shape = (13, 12))#candidate|115|(13, 12)|var|float64
bop_116 = relay.divide(uop_113.astype('float32'), relay.reshape(var_115.astype('float32'), relay.shape_of(uop_113))) # shape=(13, 12)
uop_119 = relay.sin(uop_113.astype('float64')) # shape=(13, 12)
uop_121 = relay.asin(uop_119.astype('float32')) # shape=(13, 12)
uop_123 = relay.acos(uop_121.astype('float64')) # shape=(13, 12)
bop_125 = relay.floor_mod(uop_123.astype('float32'), relay.reshape(var_104.astype('float32'), relay.shape_of(uop_123))) # shape=(13, 12)
output = relay.Tuple([bop_108,bop_116,bop_125,])
output2 = relay.Tuple([bop_108,bop_116,bop_125,])
func_128 = relay.Function([var_104,var_115,], output)
mod['func_128'] = func_128
mod = relay.transform.InferType()(mod)
var_129 = relay.var("var_129", dtype = "float32", shape = (13, 12))#candidate|129|(13, 12)|var|float32
var_130 = relay.var("var_130", dtype = "float64", shape = (13, 12))#candidate|130|(13, 12)|var|float64
output = func_128(var_129,var_130,)
func_131 = relay.Function([var_129,var_130,], output)
mutated_mod['func_131'] = func_131
mutated_mod = relay.transform.InferType()(mutated_mod)
var_133 = relay.var("var_133", dtype = "float32", shape = (15,))#candidate|133|(15,)|var|float32
var_134 = relay.var("var_134", dtype = "float32", shape = (15,))#candidate|134|(15,)|var|float32
bop_135 = relay.floor_divide(var_133.astype('float32'), relay.reshape(var_134.astype('float32'), relay.shape_of(var_133))) # shape=(15,)
uop_138 = relay.acos(var_134.astype('float32')) # shape=(15,)
uop_140 = relay.rsqrt(uop_138.astype('float32')) # shape=(15,)
uop_142 = relay.log(uop_140.astype('float32')) # shape=(15,)
uop_144 = relay.rsqrt(uop_142.astype('float64')) # shape=(15,)
bop_146 = relay.right_shift(uop_142.astype('int32'), relay.reshape(var_134.astype('int32'), relay.shape_of(uop_142))) # shape=(15,)
var_149 = relay.var("var_149", dtype = "float32", shape = (15,))#candidate|149|(15,)|var|float32
bop_150 = relay.less(uop_142.astype('bool'), relay.reshape(var_149.astype('bool'), relay.shape_of(uop_142))) # shape=(15,)
bop_153 = relay.greater_equal(uop_140.astype('bool'), relay.reshape(var_134.astype('bool'), relay.shape_of(uop_140))) # shape=(15,)
bop_156 = relay.divide(uop_144.astype('float32'), relay.reshape(var_134.astype('float32'), relay.shape_of(uop_144))) # shape=(15,)
bop_159 = relay.multiply(bop_153.astype('uint64'), relay.reshape(var_149.astype('uint64'), relay.shape_of(bop_153))) # shape=(15,)
uop_162 = relay.log10(uop_144.astype('float64')) # shape=(15,)
uop_164 = relay.asinh(uop_162.astype('float32')) # shape=(15,)
uop_166 = relay.sinh(uop_164.astype('float64')) # shape=(15,)
uop_168 = relay.tan(uop_166.astype('float64')) # shape=(15,)
uop_170 = relay.erf(uop_168.astype('float64')) # shape=(15,)
uop_172 = relay.asin(uop_170.astype('float32')) # shape=(15,)
const_174 = relay.const([8.453197,5.663151,2.971422,-3.356524,1.995486,8.843791,1.620488,2.640998,5.444708,3.693928,-3.360712,9.035095,-1.648111,-8.356637,2.498925], dtype = "float32")#candidate|174|(15,)|const|float32
bop_175 = relay.subtract(uop_172.astype('uint64'), relay.reshape(const_174.astype('uint64'), relay.shape_of(uop_172))) # shape=(15,)
uop_178 = relay.acosh(uop_162.astype('float64')) # shape=(15,)
output = relay.Tuple([bop_135,bop_146,bop_150,bop_156,bop_159,bop_175,uop_178,])
output2 = relay.Tuple([bop_135,bop_146,bop_150,bop_156,bop_159,bop_175,uop_178,])
func_180 = relay.Function([var_133,var_134,var_149,], output)
mod['func_180'] = func_180
mod = relay.transform.InferType()(mod)
var_181 = relay.var("var_181", dtype = "float32", shape = (15,))#candidate|181|(15,)|var|float32
var_182 = relay.var("var_182", dtype = "float32", shape = (15,))#candidate|182|(15,)|var|float32
var_183 = relay.var("var_183", dtype = "float32", shape = (15,))#candidate|183|(15,)|var|float32
output = func_180(var_181,var_182,var_183,)
func_184 = relay.Function([var_181,var_182,var_183,], output)
mutated_mod['func_184'] = func_184
mutated_mod = relay.transform.InferType()(mutated_mod)
var_186 = relay.var("var_186", dtype = "float32", shape = (9, 15, 13))#candidate|186|(9, 15, 13)|var|float32
uop_187 = relay.atanh(var_186.astype('float32')) # shape=(9, 15, 13)
bop_189 = relay.subtract(uop_187.astype('uint32'), relay.reshape(var_186.astype('uint32'), relay.shape_of(uop_187))) # shape=(9, 15, 13)
uop_192 = relay.log(bop_189.astype('float64')) # shape=(9, 15, 13)
bop_194 = relay.multiply(uop_192.astype('float64'), relay.reshape(var_186.astype('float64'), relay.shape_of(uop_192))) # shape=(9, 15, 13)
uop_197 = relay.acosh(bop_194.astype('float64')) # shape=(9, 15, 13)
bop_199 = relay.logical_or(uop_192.astype('bool'), relay.reshape(var_186.astype('bool'), relay.shape_of(uop_192))) # shape=(9, 15, 13)
bop_202 = relay.greater(uop_197.astype('bool'), relay.reshape(bop_194.astype('bool'), relay.shape_of(uop_197))) # shape=(9, 15, 13)
bop_205 = relay.bitwise_or(uop_187.astype('uint64'), relay.reshape(bop_194.astype('uint64'), relay.shape_of(uop_187))) # shape=(9, 15, 13)
uop_208 = relay.sin(bop_205.astype('float64')) # shape=(9, 15, 13)
bop_210 = relay.maximum(bop_199.astype('uint16'), relay.reshape(bop_205.astype('uint16'), relay.shape_of(bop_199))) # shape=(9, 15, 13)
bop_213 = relay.floor_divide(uop_197.astype('float32'), relay.reshape(bop_205.astype('float32'), relay.shape_of(uop_197))) # shape=(9, 15, 13)
var_216 = relay.var("var_216", dtype = "bool", shape = (9, 15, 13))#candidate|216|(9, 15, 13)|var|bool
bop_217 = relay.left_shift(bop_202.astype('int8'), relay.reshape(var_216.astype('int8'), relay.shape_of(bop_202))) # shape=(9, 15, 13)
uop_220 = relay.sqrt(bop_217.astype('float32')) # shape=(9, 15, 13)
uop_222 = relay.tan(uop_220.astype('float32')) # shape=(9, 15, 13)
func_128_call = mod.get_global_var('func_128')
func_131_call = mutated_mod.get_global_var('func_131')
const_225 = relay.const([-4.477609,-8.305841,-9.027699,-9.399900,1.297050,4.567720,9.437313,3.063873,-0.103263,5.207278,7.856177,-2.631722,5.481806,-5.728185,8.020681,6.556567,1.344432,-3.237896,1.903930,0.159548,-7.369089,-5.503927,-3.391830,0.774085,-8.513431,6.317235,-0.468119,-1.930554,-3.491859,3.778986,-9.691670,-2.031864,-0.806241,9.151150,3.955831,-6.978426,4.445723,8.032645,-1.867418,4.432511,-8.017764,-0.987941,-1.121130,-1.072145,4.456812,-0.037896,-1.737641,-9.902348,-6.941073,5.400719,-0.897009,6.959007,-1.131987,-8.913027,8.407279,5.124911,-6.581073,9.545983,-9.325854,4.782902,6.281613,2.311302,-5.747647,-4.875672,-3.203557,-6.521104,-5.195356,-3.690365,2.781034,6.536097,-7.616867,-2.359901,6.711416,-1.009682,5.498780,3.050063,3.506244,-0.847874,-4.341234,-0.593408,-3.453856,-2.262176,2.228243,-0.906984,4.287553,6.981798,-5.156238,-4.209720,1.657132,-0.524650,-8.820805,3.360928,-3.350668,-2.487704,2.797800,2.894644,6.931382,-1.760854,9.471660,0.321591,-4.109776,-4.937955,-1.868238,-4.026356,3.946970,-4.569818,0.979395,-3.078635,-0.373951,-9.009194,2.981369,5.887968,2.356722,0.136474,-5.990121,0.131117,-4.635040,-0.631274,-4.056995,-0.612518,8.773872,-3.447592,1.744670,-2.779875,2.134153,8.297792,4.863795,9.949066,-5.260852,0.516487,-3.177598,4.773980,-6.586015,5.745383,9.334627,0.902715,7.124785,2.007258,-9.125172,-8.642772,-2.247230,-5.188557,-9.730544,7.047112,8.015021,-8.296348,3.816310,-2.655620,6.052401,4.206238,4.291005,5.037278,-2.007751,6.045323,-3.474979,-2.845744], dtype = "float32")#candidate|225|(156,)|const|float32
call_224 = relay.TupleGetItem(func_128_call(relay.reshape(const_225.astype('float32'), [13, 12]), relay.reshape(const_225.astype('float64'), [13, 12]), ), 0)
call_226 = relay.TupleGetItem(func_131_call(relay.reshape(const_225.astype('float32'), [13, 12]), relay.reshape(const_225.astype('float64'), [13, 12]), ), 0)
uop_227 = relay.log10(uop_222.astype('float32')) # shape=(9, 15, 13)
uop_229 = relay.log10(uop_227.astype('float32')) # shape=(9, 15, 13)
bop_231 = relay.less(uop_229.astype('bool'), relay.reshape(uop_192.astype('bool'), relay.shape_of(uop_229))) # shape=(9, 15, 13)
bop_234 = relay.multiply(uop_227.astype('float64'), relay.reshape(bop_205.astype('float64'), relay.shape_of(uop_227))) # shape=(9, 15, 13)
bop_237 = relay.multiply(uop_229.astype('int32'), relay.reshape(bop_231.astype('int32'), relay.shape_of(uop_229))) # shape=(9, 15, 13)
uop_240 = relay.exp(uop_227.astype('float64')) # shape=(9, 15, 13)
bop_242 = relay.mod(bop_231.astype('float32'), relay.reshape(uop_222.astype('float32'), relay.shape_of(bop_231))) # shape=(9, 15, 13)
uop_245 = relay.rsqrt(uop_222.astype('float64')) # shape=(9, 15, 13)
uop_247 = relay.sigmoid(uop_222.astype('float64')) # shape=(9, 15, 13)
uop_249 = relay.asinh(uop_222.astype('float32')) # shape=(9, 15, 13)
bop_251 = relay.subtract(bop_217.astype('uint64'), relay.reshape(bop_189.astype('uint64'), relay.shape_of(bop_217))) # shape=(9, 15, 13)
bop_254 = relay.divide(uop_247.astype('float64'), relay.reshape(bop_194.astype('float64'), relay.shape_of(uop_247))) # shape=(9, 15, 13)
func_128_call = mod.get_global_var('func_128')
func_131_call = mutated_mod.get_global_var('func_131')
call_257 = relay.TupleGetItem(func_128_call(relay.reshape(call_224.astype('float32'), [13, 12]), relay.reshape(call_224.astype('float64'), [13, 12]), ), 0)
call_258 = relay.TupleGetItem(func_131_call(relay.reshape(call_224.astype('float32'), [13, 12]), relay.reshape(call_224.astype('float64'), [13, 12]), ), 0)
uop_259 = relay.erf(bop_237.astype('float64')) # shape=(9, 15, 13)
const_261 = relay.constdtype = "float64")#candidate|261|(9, 15, 13)|const|float64
bop_262 = relay.logical_or(uop_259.astype('bool'), relay.reshape(const_261.astype('bool'), relay.shape_of(uop_259))) # shape=(9, 15, 13)
func_180_call = mod.get_global_var('func_180')
func_184_call = mutated_mod.get_global_var('func_184')
const_266 = relay.const([6.930141,-5.033948,-6.773332,-0.093529,5.882803,-4.603672,-9.613187,7.748747,-4.316858,7.751334,-9.597162,-4.535183,-7.388107,-6.978478,9.582233], dtype = "float32")#candidate|266|(15,)|const|float32
call_265 = relay.TupleGetItem(func_180_call(relay.reshape(const_266.astype('float32'), [15,]), relay.reshape(const_266.astype('float32'), [15,]), relay.reshape(const_266.astype('float32'), [15,]), ), 4)
call_267 = relay.TupleGetItem(func_184_call(relay.reshape(const_266.astype('float32'), [15,]), relay.reshape(const_266.astype('float32'), [15,]), relay.reshape(const_266.astype('float32'), [15,]), ), 4)
var_268 = relay.var("var_268", dtype = "bool", shape = (9, 15, 13))#candidate|268|(9, 15, 13)|var|bool
bop_269 = relay.divide(bop_262.astype('float64'), relay.reshape(var_268.astype('float64'), relay.shape_of(bop_262))) # shape=(9, 15, 13)
const_272 = relay.const([[[True,False,True,False,True,True,True,False,False,False,False,True,True],[False,True,False,True,True,True,True,False,True,False,True,False,True],[False,False,False,False,False,True,False,False,False,True,True,True,True],[True,False,False,True,True,False,False,True,True,True,True,False,True],[False,False,True,False,False,True,False,False,False,False,True,False,False],[True,False,False,True,True,True,True,True,False,False,True,False,False],[False,False,True,True,True,True,True,False,True,True,False,True,True],[False,True,True,False,False,False,False,False,True,False,True,False,True],[False,True,True,False,True,True,False,False,False,False,True,False,False],[False,True,False,True,True,False,False,False,True,False,False,True,False],[False,True,False,False,True,False,True,False,False,False,True,True,False],[False,True,True,False,True,True,True,False,False,False,False,True,False],[True,True,True,True,False,True,False,False,True,True,False,True,True],[False,True,True,True,False,True,False,True,True,False,True,False,False],[True,True,False,False,True,False,False,False,True,False,True,True,False]],[[True,True,False,False,False,False,True,True,False,True,False,False,True],[True,False,False,False,False,True,True,True,False,False,True,False,True],[False,False,False,True,False,True,False,False,True,True,False,True,False],[False,False,True,True,True,False,True,True,False,False,True,True,True],[True,False,False,True,True,False,True,True,True,True,True,False,True],[False,True,True,True,True,False,False,False,True,True,True,False,True],[True,False,False,True,True,True,True,True,False,False,True,True,True],[True,False,False,True,True,True,False,False,False,True,False,False,False],[True,False,True,False,True,False,False,True,True,False,False,False,True],[False,False,True,True,False,False,True,False,True,False,True,True,False],[False,False,True,False,False,False,False,True,False,True,False,True,False],[True,True,False,False,False,False,False,True,True,False,True,False,True],[False,False,False,True,True,False,False,False,True,False,False,True,False],[True,True,False,False,True,True,True,False,True,True,False,False,True],[False,False,False,False,True,True,True,False,False,False,False,False,False]],[[True,True,False,True,True,True,False,True,True,True,False,False,True],[False,False,False,False,True,False,False,True,False,False,False,True,False],[True,True,False,True,True,False,False,False,True,True,True,True,False],[True,False,True,True,False,True,True,False,True,False,False,True,False],[False,True,False,False,True,True,True,False,True,True,False,True,True],[True,True,False,False,True,True,False,False,True,False,True,False,False],[False,True,False,False,True,True,True,True,True,True,True,False,True],[False,True,True,True,False,False,False,True,False,False,False,False,False],[True,True,False,False,True,False,True,False,False,False,True,False,True],[False,True,False,False,False,False,False,True,False,False,True,False,True],[True,False,False,True,True,True,False,True,True,False,True,False,False],[False,False,True,False,False,True,True,False,True,True,True,True,False],[True,False,True,True,True,False,False,True,True,True,True,False,False],[False,False,True,True,False,True,True,True,True,True,False,False,False],[True,True,True,True,True,False,True,False,True,False,False,True,False]],[[False,False,True,False,False,True,False,False,False,False,True,False,True],[True,True,True,True,True,False,True,False,True,False,False,False,True],[False,True,True,True,True,True,False,False,True,False,True,True,False],[False,True,False,False,False,True,True,True,False,True,False,True,True],[True,False,False,False,True,False,True,False,True,False,False,True,False],[True,False,True,True,False,True,False,False,True,True,True,True,False],[False,False,False,True,True,False,True,True,False,False,True,True,True],[True,True,True,False,True,False,False,False,True,True,False,False,True],[True,True,True,False,True,True,False,False,False,False,False,False,True],[False,False,True,True,True,False,False,False,False,True,True,True,True],[False,False,True,False,True,True,True,False,True,True,True,False,True],[False,False,True,False,True,True,False,False,False,False,False,False,False],[True,True,True,False,False,False,False,False,False,True,True,False,False],[False,True,True,False,False,True,False,True,True,False,False,False,False],[False,False,True,False,False,False,True,False,False,True,False,False,True]],[[False,True,False,False,True,True,True,True,True,True,False,False,False],[False,False,False,False,False,False,False,True,False,False,True,True,False],[True,True,False,True,False,True,True,True,True,False,False,True,True],[True,False,False,True,True,False,True,True,False,False,False,False,True],[False,False,True,False,True,False,True,True,False,True,False,True,False],[False,True,False,True,True,False,True,True,True,False,True,True,False],[True,True,False,True,False,False,True,True,False,False,False,True,False],[False,True,False,True,True,False,False,False,True,True,False,True,False],[True,True,True,False,True,False,True,True,True,False,False,True,True],[False,True,True,False,True,True,True,False,False,False,False,True,False],[False,False,False,True,True,False,False,False,False,False,True,False,True],[False,False,True,True,True,False,True,True,False,False,False,True,False],[True,True,True,False,False,True,False,False,False,True,False,False,False],[True,False,True,True,False,True,True,True,True,False,True,False,True],[True,False,False,False,True,True,False,False,True,False,True,True,False]],[[True,True,True,True,True,False,False,False,True,False,True,False,True],[False,False,True,False,False,False,True,False,True,False,True,True,False],[False,True,True,True,True,False,False,False,True,True,False,True,True],[True,True,True,True,True,True,False,False,False,False,False,True,False],[True,True,True,False,True,True,True,False,False,True,False,True,True],[True,False,False,True,False,True,False,True,True,True,False,True,True],[False,True,False,True,True,True,False,False,False,True,True,True,True],[True,False,True,False,False,True,True,False,False,True,True,False,False],[False,False,False,True,True,True,False,True,False,True,True,True,True],[True,False,False,False,False,False,True,True,False,True,False,True,True],[False,False,False,True,False,True,True,True,False,False,False,True,False],[False,False,True,True,False,False,False,False,False,False,False,True,True],[True,False,False,False,True,False,True,False,True,True,True,False,False],[True,True,False,False,True,True,True,False,False,True,False,False,True],[False,False,False,False,False,True,False,False,True,False,False,False,False]],[[False,False,True,False,False,False,True,True,True,False,False,False,False],[False,True,False,True,False,True,True,False,True,True,True,True,True],[True,True,False,True,True,False,True,False,False,False,True,False,True],[False,False,True,False,True,True,True,True,False,True,False,False,False],[True,True,True,True,True,False,False,True,False,False,True,True,False],[True,True,True,True,False,True,False,True,True,True,True,False,False],[True,False,True,True,False,False,True,True,True,False,False,False,True],[False,False,False,True,False,True,True,False,True,True,True,True,True],[True,False,False,True,False,True,True,True,True,True,False,False,True],[True,False,True,True,True,True,True,True,False,False,False,True,False],[True,True,True,False,False,False,False,False,False,True,True,True,False],[False,True,False,False,False,False,False,True,True,True,False,True,False],[False,True,True,False,True,False,True,False,True,True,True,True,True],[True,False,False,False,True,True,True,True,True,True,True,False,False],[True,True,False,False,False,True,True,True,True,False,True,False,False]],[[False,True,True,False,False,False,False,False,True,True,True,False,True],[True,False,False,True,False,True,False,True,True,False,False,False,True],[True,False,True,True,True,True,False,False,True,False,True,False,False],[False,True,False,False,False,True,False,True,False,True,False,False,False],[False,True,False,False,False,True,True,True,False,False,True,False,False],[False,False,True,False,False,True,False,False,False,False,True,False,True],[True,True,False,False,True,False,True,True,False,True,False,True,True],[False,True,False,False,False,False,False,True,True,True,True,True,True],[True,True,True,True,True,False,True,True,False,False,True,True,False],[True,True,False,True,False,True,False,False,True,False,False,False,False],[True,True,True,False,False,False,False,True,True,True,False,False,False],[False,True,True,False,True,False,True,True,True,True,False,False,True],[False,False,True,False,False,True,True,True,True,True,True,True,True],[True,False,True,True,False,True,False,True,True,True,False,False,True],[True,True,True,True,False,True,False,False,True,False,True,False,False]],[[False,False,True,False,True,False,False,False,False,True,True,False,False],[True,False,False,True,True,False,True,False,True,True,False,True,True],[True,False,False,False,False,True,False,True,True,True,False,True,True],[False,False,False,False,True,True,False,True,True,True,True,False,False],[True,True,False,False,True,True,False,True,True,False,False,True,False],[True,False,False,True,True,False,True,False,False,False,True,True,False],[False,False,True,False,False,False,False,False,True,True,False,True,False],[True,False,True,True,False,False,True,False,True,True,False,True,True],[False,True,False,True,True,True,False,True,True,False,True,True,True],[False,False,True,False,True,False,False,False,True,False,False,True,False],[False,False,False,True,True,False,False,True,False,False,False,False,True],[False,False,False,True,True,True,False,False,True,True,True,True,True],[False,True,True,True,True,True,True,True,False,False,True,True,False],[True,True,False,True,False,False,False,False,False,True,True,False,False],[False,True,True,True,False,True,False,True,True,True,True,False,False]]], dtype = "bool")#candidate|272|(9, 15, 13)|const|bool
bop_273 = relay.right_shift(bop_231.astype('uint32'), relay.reshape(const_272.astype('uint32'), relay.shape_of(bop_231))) # shape=(9, 15, 13)
var_276 = relay.var("var_276", dtype = "bool", shape = (9, 15, 13))#candidate|276|(9, 15, 13)|var|bool
bop_277 = relay.less_equal(bop_262.astype('bool'), relay.reshape(var_276.astype('bool'), relay.shape_of(bop_262))) # shape=(9, 15, 13)
const_280 = relay.const([[[False,True,False,False,False,True,True,True,True,True,False,False,False],[True,True,False,False,True,True,False,True,False,True,True,False,False],[False,False,True,False,False,False,False,False,False,False,True,False,True],[False,True,True,False,True,True,False,True,True,True,True,True,False],[True,False,True,True,True,False,True,False,False,True,False,False,True],[True,False,False,True,False,False,False,True,True,True,False,True,False],[True,False,True,False,False,True,True,False,False,False,False,False,False],[False,True,True,True,True,False,True,True,True,True,False,True,True],[True,False,True,False,False,True,False,False,True,False,True,False,False],[True,False,False,True,True,True,True,False,False,False,False,True,True],[True,True,True,False,False,False,False,True,False,False,False,False,False],[False,True,True,False,True,True,True,False,False,False,True,True,False],[True,True,False,False,True,True,True,False,True,True,True,True,True],[True,True,True,False,False,True,True,True,False,False,False,True,False],[True,True,True,False,True,False,False,True,True,True,False,False,True]],[[True,False,False,False,True,False,True,False,False,True,False,True,True],[False,True,True,True,False,False,False,True,True,True,False,True,False],[True,False,False,True,True,True,True,False,True,False,False,False,True],[False,False,True,True,True,True,False,False,False,False,True,False,False],[False,True,False,True,True,True,True,True,False,False,False,False,False],[True,False,False,True,True,False,True,False,True,False,True,False,True],[True,False,False,True,False,False,False,False,True,True,True,False,False],[False,False,False,False,True,True,False,True,True,False,False,False,False],[True,True,False,True,False,True,False,False,True,False,False,True,True],[True,True,False,True,True,False,True,False,False,False,True,True,False],[False,True,False,True,True,True,False,True,True,False,True,True,False],[False,True,False,True,False,True,False,True,False,False,True,True,False],[False,False,True,True,False,False,False,False,True,True,True,True,True],[False,True,False,True,True,False,True,True,True,True,False,False,False],[False,False,False,True,False,False,True,True,True,True,True,True,True]],[[False,False,True,True,True,True,False,True,True,True,True,False,False],[True,True,False,True,False,False,True,False,False,True,False,True,False],[True,True,False,False,False,False,False,True,False,False,True,False,True],[False,False,True,False,False,False,True,True,True,True,True,False,True],[True,True,True,True,True,False,False,True,False,False,False,True,False],[False,True,True,False,False,True,False,True,True,True,True,False,False],[False,False,True,False,True,True,True,True,False,True,True,False,False],[False,False,False,True,False,False,False,True,True,False,False,True,False],[True,False,True,False,False,False,False,False,False,True,True,False,False],[True,True,False,True,True,False,True,False,True,False,False,True,True],[True,True,False,True,True,True,True,True,True,False,True,True,False],[True,True,True,True,True,False,False,True,True,False,True,False,False],[False,False,False,True,False,False,True,False,True,False,True,False,True],[True,False,False,False,False,False,True,True,True,True,True,False,False],[False,False,False,True,False,False,True,False,False,True,False,True,True]],[[True,True,True,False,True,False,False,True,False,True,True,False,False],[True,True,False,True,True,False,True,True,True,True,False,True,True],[False,False,False,True,False,True,False,True,True,True,True,False,True],[True,True,False,True,True,True,False,True,False,False,False,True,True],[True,False,True,False,False,True,True,False,False,True,True,True,False],[True,False,True,True,True,False,False,False,False,True,True,False,True],[False,False,True,True,False,False,False,True,True,False,True,False,False],[True,True,True,False,True,False,True,False,True,False,False,True,False],[False,True,False,True,False,False,True,True,True,True,True,True,True],[False,True,False,False,True,True,True,True,False,False,True,True,False],[True,True,True,False,False,True,True,False,False,True,False,False,False],[True,True,False,True,False,False,False,False,True,False,False,False,True],[False,True,False,True,True,True,False,False,False,False,False,True,False],[False,True,False,False,True,False,False,True,True,False,False,True,True],[True,True,True,True,False,True,False,True,False,False,False,False,False]],[[False,True,False,False,True,True,True,False,True,False,False,True,False],[True,False,False,False,True,True,False,False,False,False,True,True,True],[True,True,False,True,True,False,False,False,False,False,True,True,False],[False,False,False,False,False,True,False,False,True,True,True,True,True],[True,False,False,False,True,True,True,True,False,True,False,True,True],[False,True,False,False,True,False,False,True,False,False,False,False,False],[True,True,True,True,False,False,True,False,True,False,True,False,False],[False,True,False,True,False,False,False,False,False,True,True,False,False],[True,False,False,False,False,True,True,True,False,False,False,True,False],[True,False,False,True,False,False,True,False,True,True,False,True,False],[True,False,True,True,False,False,False,False,False,False,True,False,False],[False,False,False,True,False,True,True,False,False,True,False,True,True],[True,True,False,False,True,True,False,False,False,False,False,False,False],[True,True,False,True,True,False,True,True,True,True,False,True,False],[False,False,False,False,False,False,True,False,False,False,True,True,False]],[[True,True,False,False,False,True,True,False,False,False,False,True,True],[True,True,True,False,True,True,True,True,True,True,True,False,True],[False,False,False,True,False,True,False,True,True,False,False,False,False],[True,False,False,False,True,False,True,False,False,False,False,True,False],[True,False,True,False,True,True,False,True,False,True,True,True,False],[False,True,False,True,False,True,True,False,False,True,False,True,True],[True,False,True,False,False,True,True,True,True,False,True,True,False],[True,False,True,False,False,True,False,True,False,False,False,False,False],[False,True,True,False,False,False,False,False,False,False,True,True,True],[False,False,False,True,False,False,False,True,False,False,False,False,True],[True,False,False,True,True,False,False,False,False,False,False,False,False],[False,False,True,False,False,True,False,False,True,False,False,True,True],[True,True,True,True,True,False,False,True,True,True,True,True,True],[False,False,True,False,False,True,True,False,True,True,True,True,True],[False,True,False,True,False,True,True,False,False,False,False,False,True]],[[False,True,False,True,False,False,True,True,True,False,True,False,False],[False,True,True,False,False,False,True,False,True,False,True,False,False],[False,False,False,False,True,False,False,False,False,False,False,True,False],[True,True,True,True,True,True,False,True,True,True,True,True,True],[False,True,True,True,True,True,True,True,True,True,False,True,True],[False,False,True,True,False,True,True,True,False,False,False,True,True],[False,False,False,True,True,True,False,False,False,True,True,True,False],[True,False,False,False,True,False,False,True,False,False,False,True,True],[False,True,False,True,True,False,True,True,True,True,False,True,True],[False,False,True,False,False,False,False,True,False,False,True,True,True],[True,True,True,False,True,True,False,True,True,True,True,False,False],[False,True,True,True,True,True,True,False,True,True,False,False,False],[False,False,False,True,True,True,True,False,False,False,True,False,True],[False,True,False,True,True,False,False,False,True,True,False,False,True],[True,True,True,True,False,False,True,False,True,False,True,False,False]],[[True,False,False,True,True,False,False,True,True,False,True,False,False],[False,True,False,False,True,False,False,False,True,False,False,True,False],[False,True,True,False,False,True,True,False,False,False,False,True,False],[False,True,True,False,True,False,True,False,False,False,False,False,True],[True,False,True,False,False,True,False,False,False,False,True,True,False],[True,True,False,False,True,False,True,True,False,True,True,False,True],[True,False,True,False,True,False,False,True,True,True,False,True,True],[False,True,False,True,True,True,True,True,False,False,False,True,True],[False,False,False,False,True,False,True,False,False,False,True,False,True],[False,True,False,True,False,False,False,False,False,True,False,True,False],[False,True,False,True,True,True,False,True,True,True,True,False,False],[True,True,True,False,False,True,True,False,False,False,True,False,False],[True,True,False,False,True,False,True,False,False,False,True,False,False],[False,True,True,True,True,True,False,False,True,False,True,False,True],[True,False,False,True,True,True,False,True,True,False,False,False,False]],[[False,True,True,False,True,True,True,False,False,True,True,False,True],[False,True,True,True,False,False,True,False,False,False,True,False,False],[False,False,False,False,False,False,True,True,False,False,True,True,True],[True,False,False,False,False,True,True,True,False,True,True,True,True],[True,False,False,False,False,False,False,False,False,True,False,False,False],[False,False,True,True,True,True,False,False,True,False,True,False,True],[True,True,False,False,False,False,False,False,False,False,False,False,False],[False,True,False,False,False,False,True,True,False,False,False,False,False],[True,False,True,True,True,False,False,True,True,False,True,True,False],[True,False,False,False,False,True,True,True,True,True,True,False,True],[True,True,True,True,True,True,True,True,False,False,True,True,False],[False,True,True,False,False,True,False,False,True,False,True,False,True],[True,False,True,True,True,False,False,False,False,False,True,True,True],[False,False,False,True,False,True,False,True,True,False,False,True,True],[True,True,False,False,True,True,False,False,True,True,False,True,True]]], dtype = "bool")#candidate|280|(9, 15, 13)|const|bool
bop_281 = relay.multiply(bop_231.astype('int32'), relay.reshape(const_280.astype('int32'), relay.shape_of(bop_231))) # shape=(9, 15, 13)
var_284 = relay.var("var_284", dtype = "float64", shape = (9, 15, 13))#candidate|284|(9, 15, 13)|var|float64
bop_285 = relay.floor_divide(uop_259.astype('float32'), relay.reshape(var_284.astype('float32'), relay.shape_of(uop_259))) # shape=(9, 15, 13)
uop_288 = relay.log2(bop_277.astype('float64')) # shape=(9, 15, 13)
bop_290 = relay.not_equal(uop_288.astype('bool'), relay.reshape(bop_210.astype('bool'), relay.shape_of(uop_288))) # shape=(9, 15, 13)
uop_293 = relay.erf(bop_290.astype('float64')) # shape=(9, 15, 13)
var_295 = relay.var("var_295", dtype = "float64", shape = (9, 15, 13))#candidate|295|(9, 15, 13)|var|float64
bop_296 = relay.add(bop_269.astype('int8'), relay.reshape(var_295.astype('int8'), relay.shape_of(bop_269))) # shape=(9, 15, 13)
output = relay.Tuple([uop_208,bop_213,call_224,const_225,bop_234,uop_240,bop_242,uop_245,uop_249,bop_251,bop_254,call_257,call_265,const_266,bop_273,bop_281,bop_285,uop_293,bop_296,])
output2 = relay.Tuple([uop_208,bop_213,call_226,const_225,bop_234,uop_240,bop_242,uop_245,uop_249,bop_251,bop_254,call_258,call_267,const_266,bop_273,bop_281,bop_285,uop_293,bop_296,])
func_299 = relay.Function([var_186,var_216,var_268,var_276,var_284,var_295,], output)
mod['func_299'] = func_299
mod = relay.transform.InferType()(mod)
var_300 = relay.var("var_300", dtype = "float32", shape = (9, 15, 13))#candidate|300|(9, 15, 13)|var|float32
var_301 = relay.var("var_301", dtype = "bool", shape = (9, 15, 13))#candidate|301|(9, 15, 13)|var|bool
var_302 = relay.var("var_302", dtype = "bool", shape = (9, 15, 13))#candidate|302|(9, 15, 13)|var|bool
var_303 = relay.var("var_303", dtype = "bool", shape = (9, 15, 13))#candidate|303|(9, 15, 13)|var|bool
var_304 = relay.var("var_304", dtype = "float64", shape = (9, 15, 13))#candidate|304|(9, 15, 13)|var|float64
var_305 = relay.var("var_305", dtype = "float64", shape = (9, 15, 13))#candidate|305|(9, 15, 13)|var|float64
output = func_299(var_300,var_301,var_302,var_303,var_304,var_305,)
func_306 = relay.Function([var_300,var_301,var_302,var_303,var_304,var_305,], output)
mutated_mod['func_306'] = func_306
mutated_mod = relay.transform.InferType()(mutated_mod)
const_308 = relay.const([-8.216618,-6.948219,6.957812,-1.484451], dtype = "float64")#candidate|308|(4,)|const|float64
uop_309 = relay.sin(const_308.astype('float64')) # shape=(4,)
bop_311 = relay.equal(uop_309.astype('bool'), relay.reshape(const_308.astype('bool'), relay.shape_of(uop_309))) # shape=(4,)
bop_314 = relay.bitwise_and(uop_309.astype('int8'), relay.reshape(bop_311.astype('int8'), relay.shape_of(uop_309))) # shape=(4,)
bop_317 = relay.minimum(const_308.astype('uint64'), relay.reshape(uop_309.astype('uint64'), relay.shape_of(const_308))) # shape=(4,)
uop_320 = relay.cos(const_308.astype('float32')) # shape=(4,)
uop_322 = relay.sinh(uop_320.astype('float32')) # shape=(4,)
output = relay.Tuple([bop_314,bop_317,uop_322,])
output2 = relay.Tuple([bop_314,bop_317,uop_322,])
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
	relay.transform.DefuseOps(),
	relay.transform.SimplifyExpr(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()()
res3 = intrp3.evaluate()()
res4 = intrp4.evaluate()()
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()()
res7 = intrp7.evaluate()()
res8 = intrp8.evaluate()()
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()()
res11 = intrp11.evaluate()()
res12 = intrp12.evaluate()()
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()()
res15 = intrp15.evaluate()()
res16 = intrp16.evaluate()()
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()()
res19 = intrp19.evaluate()()
res20 = intrp20.evaluate()()
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()()
res23 = intrp23.evaluate()()
res24 = intrp24.evaluate()()
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()

'''9: TVMFuncCall
8: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::transform::Pass, tvm::IRModule)>::AssignTypedLambda<tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}>(tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
7: tvm::transform::Pass::operator()(tvm::IRModule) const
6: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::LazyGradientInit(tvm::RelayExpr const&, tvm::IRModule)
0: tvm::relay::CheckFeature(tvm::RelayExpr const&, tvm::relay::FeatureSet const&)

'''