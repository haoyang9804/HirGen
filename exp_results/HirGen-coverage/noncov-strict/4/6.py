import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "int64", shape = ())#candidate|0|()|var|int64
var_1 = relay.var("var_1", dtype = "int64", shape = ())#candidate|1|()|var|int64
bop_2 = relay.less(var_0.astype('bool'), var_1.astype('bool')) # shape=()
uop_5 = relay.cosh(bop_2.astype('float64')) # shape=()
uop_7 = relay.tan(var_1.astype('float64')) # shape=()
bop_9 = relay.subtract(uop_7.astype('uint64'), var_1.astype('uint64')) # shape=()
bop_12 = relay.maximum(uop_7.astype('int16'), uop_5.astype('int16')) # shape=()
output = relay.Tuple([bop_9,bop_12,])
output2 = relay.Tuple([bop_9,bop_12,])
func_15 = relay.Function([var_0,var_1,], output)
mod['func_15'] = func_15
mod = relay.transform.InferType()(mod)
mutated_mod['func_15'] = func_15
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15_call = mutated_mod.get_global_var('func_15')
var_17 = relay.var("var_17", dtype = "int64", shape = ())#candidate|17|()|var|int64
var_18 = relay.var("var_18", dtype = "int64", shape = ())#candidate|18|()|var|int64
call_16 = func_15_call(var_17,var_18,)
output = call_16
func_19 = relay.Function([var_17,var_18,], output)
mutated_mod['func_19'] = func_19
mutated_mod = relay.transform.InferType()(mutated_mod)
var_21 = relay.var("var_21", dtype = "uint16", shape = (4, 14, 1))#candidate|21|(4, 14, 1)|var|uint16
var_22 = relay.var("var_22", dtype = "uint16", shape = (4, 14, 2))#candidate|22|(4, 14, 2)|var|uint16
bop_23 = relay.bitwise_and(var_21.astype('uint16'), var_22.astype('uint16')) # shape=(4, 14, 2)
uop_26 = relay.asin(var_21.astype('float32')) # shape=(4, 14, 1)
bop_28 = relay.mod(uop_26.astype('float32'), relay.reshape(var_21.astype('float32'), relay.shape_of(uop_26))) # shape=(4, 14, 1)
const_31 = relay.const([[[-1.680246,5.589393,2.636866,7.148635,-8.841687],[-1.650368,-0.341726,-3.417038,-6.818457,1.944952],[-4.269122,-1.138827,-5.886455,6.222413,3.065313],[1.786679,7.162343,-2.616634,9.856373,9.600183],[5.922665,-0.295461,-3.322751,-7.807167,0.218474],[5.908956,0.438260,1.150740,-5.465739,9.655587],[8.025452,3.573645,2.300474,-3.175988,8.008528],[-3.679832,9.485708,-4.531114,-4.334801,-3.414401],[-8.402215,1.387198,0.325442,-3.638125,9.175733],[-8.092399,-9.749405,-0.209795,3.195932,-2.077566],[-3.504503,6.329466,-7.323114,-5.448091,-3.831649],[-5.298049,-9.890689,-9.673204,-3.408287,7.440892],[-5.374978,-4.963267,-6.462489,-7.153365,2.664990],[-3.141922,-8.038871,-8.564087,-7.018840,8.527889]],[[3.903660,8.662279,1.998812,-2.336961,-7.483744],[5.332665,4.410305,-9.941462,-8.910976,9.232526],[4.386135,-8.193759,-5.880447,-6.223180,3.758362],[4.928774,7.612728,-6.292565,9.905583,-5.304404],[-7.538071,-5.984135,-2.162510,3.420033,-0.343635],[-3.078843,9.318474,9.514570,0.460174,-1.277307],[3.448364,-6.817193,-1.873969,9.021847,6.532115],[-7.323801,5.862609,6.146804,4.527766,0.634788],[0.857046,9.725351,-1.762966,-6.449685,6.642652],[-9.989767,9.695867,8.732866,0.201228,3.693782],[6.983114,-6.224674,-0.668524,-8.424014,8.987633],[2.352441,0.001926,5.723623,2.490136,-3.251994],[-8.973077,2.913788,3.204364,1.994837,8.541697],[8.253615,-3.160053,-8.474459,0.675894,-4.446000]],[[-9.592604,4.668861,5.070179,2.319571,7.910152],[5.765485,-6.106211,2.544066,4.515006,-4.940550],[9.469538,6.963336,4.193303,-7.203020,-6.077881],[7.897365,6.781694,6.462083,2.487969,9.783137],[-1.875219,-0.849492,-6.006546,-1.684725,9.756845],[-7.353458,-6.356847,-8.480276,8.507049,-9.105877],[-5.436234,-4.469360,-9.798290,-7.469172,-6.931408],[-5.868235,-8.058738,8.503814,-9.707397,-6.782074],[-2.810732,-2.730429,2.090376,6.205494,-0.249503],[-9.678430,0.108824,-9.491592,-9.138327,-9.919104],[-9.018805,6.802097,2.250240,9.636112,-2.879531],[9.309301,6.479573,9.120035,3.157438,3.680735],[-4.616504,-8.849076,3.716371,-7.318826,6.490175],[-0.548942,8.793556,-4.698313,0.867433,7.218494]],[[3.612591,-1.059668,-3.263594,0.672787,-4.340130],[0.261103,4.268845,6.870756,-2.062353,-6.353951],[-9.637303,-0.311000,1.924992,-7.852019,-8.616911],[-5.173961,5.420578,-0.708602,8.197753,7.005518],[9.039399,-5.402402,-2.312155,1.727632,7.436325],[-6.711008,-9.477289,-7.642129,5.759287,-3.097913],[-4.118005,1.505797,-6.985751,9.600499,-9.870064],[0.327451,-3.633647,-3.989247,4.997639,9.001134],[2.453858,-8.433440,-4.407840,7.397164,-8.695791],[-5.513499,4.599983,-9.769543,2.942602,3.885279],[-7.833537,4.222838,-6.295735,7.259540,5.751483],[4.067370,-8.257224,0.715061,-7.561009,-1.421374],[-7.119344,4.644336,-3.514177,1.845810,5.581953],[4.377030,-7.798969,-8.236861,-0.580293,-7.743911]]], dtype = "float32")#candidate|31|(4, 14, 5)|const|float32
bop_32 = relay.multiply(uop_26.astype('uint32'), const_31.astype('uint32')) # shape=(4, 14, 5)
uop_35 = relay.tan(var_21.astype('float32')) # shape=(4, 14, 1)
var_37 = relay.var("var_37", dtype = "float32", shape = (4, 14, 3))#candidate|37|(4, 14, 3)|var|float32
bop_38 = relay.left_shift(uop_35.astype('int8'), var_37.astype('int8')) # shape=(4, 14, 3)
uop_41 = relay.log(uop_26.astype('float64')) # shape=(4, 14, 1)
var_43 = relay.var("var_43", dtype = "float32", shape = (4, 14, 5))#candidate|43|(4, 14, 5)|var|float32
bop_44 = relay.bitwise_and(const_31.astype('int8'), relay.reshape(var_43.astype('int8'), relay.shape_of(const_31))) # shape=(4, 14, 5)
var_47 = relay.var("var_47", dtype = "int8", shape = (4, 14, 3))#candidate|47|(4, 14, 3)|var|int8
bop_48 = relay.power(bop_38.astype('float32'), relay.reshape(var_47.astype('float32'), relay.shape_of(bop_38))) # shape=(4, 14, 3)
bop_51 = relay.bitwise_or(bop_48.astype('int32'), bop_28.astype('int32')) # shape=(4, 14, 3)
uop_54 = relay.sqrt(bop_28.astype('float64')) # shape=(4, 14, 1)
const_56 = relay.const([[[-4,-8,8],[2,2,5],[5,10,6],[7,-1,-7],[-9,-6,7],[4,6,2],[2,9,-3],[8,2,3],[-3,5,-7],[-6,3,7],[4,1,-3],[-4,-6,7],[-9,-9,-4],[-1,3,2]],[[8,-8,2],[1,7,5],[-7,-3,2],[-2,6,4],[-4,-10,2],[-6,-1,-9],[2,-8,4],[-6,-4,3],[10,9,-9],[-7,-9,-9],[-8,9,-9],[-2,-10,9],[6,6,4],[-6,-7,10]],[[9,8,-4],[-6,1,-2],[6,1,-6],[2,6,2],[9,6,-2],[-3,-4,8],[7,-2,7],[-1,10,9],[-2,6,10],[10,5,-7],[-2,9,-3],[-6,8,1],[4,10,-3],[9,-1,5]],[[-4,-3,1],[-7,2,1],[-2,-6,-4],[10,6,-3],[-3,4,7],[5,6,-2],[8,2,-7],[5,-9,-4],[9,-3,5],[6,8,2],[-1,9,-7],[-4,2,6],[8,-1,-6],[4,-10,-10]]], dtype = "int32")#candidate|56|(4, 14, 3)|const|int32
bop_57 = relay.divide(bop_51.astype('float32'), relay.reshape(const_56.astype('float32'), relay.shape_of(bop_51))) # shape=(4, 14, 3)
uop_60 = relay.sinh(uop_54.astype('float64')) # shape=(4, 14, 1)
uop_62 = relay.acos(uop_26.astype('float32')) # shape=(4, 14, 1)
bop_64 = relay.less_equal(uop_60.astype('bool'), relay.reshape(var_21.astype('bool'), relay.shape_of(uop_60))) # shape=(4, 14, 1)
uop_67 = relay.rsqrt(uop_62.astype('float64')) # shape=(4, 14, 1)
var_69 = relay.var("var_69", dtype = "float32", shape = (4, 14, 15))#candidate|69|(4, 14, 15)|var|float32
bop_70 = relay.bitwise_xor(uop_62.astype('int32'), var_69.astype('int32')) # shape=(4, 14, 15)
bop_73 = relay.bitwise_and(bop_70.astype('int64'), uop_62.astype('int64')) # shape=(4, 14, 15)
uop_76 = relay.rsqrt(uop_60.astype('float32')) # shape=(4, 14, 1)
bop_78 = relay.maximum(uop_76.astype('float32'), relay.reshape(uop_41.astype('float32'), relay.shape_of(uop_76))) # shape=(4, 14, 1)
output = relay.Tuple([bop_23,bop_32,bop_44,bop_57,bop_64,uop_67,bop_73,bop_78,])
output2 = relay.Tuple([bop_23,bop_32,bop_44,bop_57,bop_64,uop_67,bop_73,bop_78,])
func_81 = relay.Function([var_21,var_22,var_37,var_43,var_47,var_69,], output)
mod['func_81'] = func_81
mod = relay.transform.InferType()(mod)
var_82 = relay.var("var_82", dtype = "uint16", shape = (4, 14, 1))#candidate|82|(4, 14, 1)|var|uint16
var_83 = relay.var("var_83", dtype = "uint16", shape = (4, 14, 2))#candidate|83|(4, 14, 2)|var|uint16
var_84 = relay.var("var_84", dtype = "float32", shape = (4, 14, 3))#candidate|84|(4, 14, 3)|var|float32
var_85 = relay.var("var_85", dtype = "float32", shape = (4, 14, 5))#candidate|85|(4, 14, 5)|var|float32
var_86 = relay.var("var_86", dtype = "int8", shape = (4, 14, 3))#candidate|86|(4, 14, 3)|var|int8
var_87 = relay.var("var_87", dtype = "float32", shape = (4, 14, 15))#candidate|87|(4, 14, 15)|var|float32
output = func_81(var_82,var_83,var_84,var_85,var_86,var_87,)
func_88 = relay.Function([var_82,var_83,var_84,var_85,var_86,var_87,], output)
mutated_mod['func_88'] = func_88
mutated_mod = relay.transform.InferType()(mutated_mod)
const_90 = relay.const([[3.424068,7.101983,6.408743,3.602116,8.408961,-0.186876,-0.252790,6.085073,1.159317],[-8.530334,-8.649329,-2.266003,8.323881,-3.551312,8.526380,9.340266,-3.650906,-8.755942],[-6.988544,9.251623,-6.049986,-4.167320,1.902393,5.818545,8.110493,2.627668,8.307556],[-7.859928,6.149021,9.941846,-2.658181,-2.643272,7.074191,-6.671063,-4.890042,4.547743],[-9.650892,-0.983944,6.022228,-7.445177,6.693704,-5.644411,6.674628,-6.002127,-2.371211],[8.044098,-7.107070,3.657629,3.333591,6.762054,2.275823,-7.237905,-6.956979,2.892236],[4.933108,8.780032,6.336938,4.089139,-4.111195,-7.866415,3.109712,8.739745,7.513676],[6.700032,8.839286,-8.652411,7.742244,-0.871254,6.262979,-8.719338,9.401464,-9.628814],[0.158197,1.252584,3.463371,-0.675102,6.036510,-2.365986,-2.655049,3.725863,-2.763557],[-7.020947,4.656121,-8.554257,-0.364758,9.933791,-8.970541,1.668808,5.825257,5.441641],[-4.018022,2.817438,2.800467,-2.166069,2.138654,9.091127,2.234539,0.088170,-1.198843]], dtype = "float32")#candidate|90|(11, 9)|const|float32
var_91 = relay.var("var_91", dtype = "float32", shape = (11, 9))#candidate|91|(11, 9)|var|float32
bop_92 = relay.mod(const_90.astype('float32'), relay.reshape(var_91.astype('float32'), relay.shape_of(const_90))) # shape=(11, 9)
uop_95 = relay.erf(bop_92.astype('float32')) # shape=(11, 9)
uop_97 = relay.sigmoid(uop_95.astype('float64')) # shape=(11, 9)
output = relay.Tuple([uop_97,])
output2 = relay.Tuple([uop_97,])
func_99 = relay.Function([var_91,], output)
mod['func_99'] = func_99
mod = relay.transform.InferType()(mod)
mutated_mod['func_99'] = func_99
mutated_mod = relay.transform.InferType()(mutated_mod)
var_100 = relay.var("var_100", dtype = "float32", shape = (11, 9))#candidate|100|(11, 9)|var|float32
func_99_call = mutated_mod.get_global_var('func_99')
call_101 = func_99_call(var_100)
output = call_101
func_102 = relay.Function([var_100], output)
mutated_mod['func_102'] = func_102
mutated_mod = relay.transform.InferType()(mutated_mod)
const_104 = relay.const([[3,5,4,6,-1,-7,-2],[1,10,-1,3,-9,-1,-4],[-5,-6,8,10,7,-9,-1],[-3,5,2,-4,-6,6,5],[-8,-4,2,1,1,-6,-1],[9,9,-6,-7,-8,1,7],[9,-5,-1,-10,-8,4,6],[2,-3,9,2,-6,4,-10],[-10,-4,-9,6,9,4,10],[-9,-10,-2,-1,-6,-6,9],[-8,7,-8,-9,-10,-8,2],[8,-1,-8,9,5,3,-10],[4,1,10,4,-8,6,7],[-9,-7,-2,-6,-1,-2,-3],[-6,8,-2,-3,-8,10,-9],[6,-10,6,-1,-8,-1,-2]], dtype = "uint32")#candidate|104|(16, 7)|const|uint32
const_105 = relay.const([[-4,10,-1,-9,-5,-9,3],[-3,10,2,-7,-6,9,-8],[4,3,-6,-6,-4,-7,7],[3,10,3,-6,-4,5,9],[-5,2,-10,-9,-8,1,-9],[2,-4,10,-1,-4,5,1],[9,5,-8,5,-2,4,9],[-1,-4,6,7,2,6,-8],[-3,4,-8,7,-6,2,5],[5,1,-2,-8,-7,-4,-7],[-2,-5,2,8,-8,4,5],[1,3,-6,3,-3,8,-8],[-6,5,7,-4,9,9,-7],[9,-10,-6,8,9,-1,2],[2,-4,-2,8,-8,8,-6],[-5,1,-7,-4,-4,-4,-4]], dtype = "uint32")#candidate|105|(16, 7)|const|uint32
bop_106 = relay.multiply(const_104.astype('uint32'), relay.reshape(const_105.astype('uint32'), relay.shape_of(const_104))) # shape=(16, 7)
uop_109 = relay.atanh(const_105.astype('float64')) # shape=(16, 7)
const_111 = relay.const([[4.204333,-6.757280,-1.722708,2.034926,-1.091120,-6.068541,-4.224893],[-1.026523,6.850208,2.470082,-0.774406,7.546133,-2.517187,-3.095225],[-7.611299,9.691066,1.799595,7.080192,6.650359,-3.512573,1.616980],[8.014417,-5.951930,-9.432896,8.691886,0.321705,4.421969,-9.918765],[-9.021817,-8.495731,3.072419,-3.558420,1.646015,-6.617690,-6.922496],[-0.698680,7.087795,-3.866805,3.244778,-2.404608,-2.863575,3.300814],[-8.157791,3.134134,-8.841780,-7.499297,-7.130662,-4.813849,-8.541573],[-6.369255,9.463737,-7.876083,-3.718971,-7.914465,-7.775484,8.312728],[4.021373,-3.483985,-1.663803,-6.498770,0.539714,-9.842323,4.561910],[-0.389402,-9.586277,3.719032,7.912583,-8.628615,-9.330655,-2.377290],[9.235679,1.375741,-0.469394,8.780368,5.801233,7.081912,-9.204967],[-2.020952,-4.024494,7.414745,2.510434,-9.957235,6.273721,7.384572],[5.049893,-2.440742,5.609616,5.536242,6.846268,-0.543066,-6.686242],[1.356349,-4.535014,3.918244,-1.819721,3.691240,4.139846,3.103245],[-7.788666,-6.278716,-6.658889,2.733665,-1.057312,4.781718,4.858336],[-9.019408,7.481652,-7.319312,-5.977503,-2.073868,-1.945555,-0.635264]], dtype = "float64")#candidate|111|(16, 7)|const|float64
bop_112 = relay.subtract(uop_109.astype('int8'), relay.reshape(const_111.astype('int8'), relay.shape_of(uop_109))) # shape=(16, 7)
bop_115 = relay.left_shift(uop_109.astype('uint16'), relay.reshape(bop_112.astype('uint16'), relay.shape_of(uop_109))) # shape=(16, 7)
uop_118 = relay.log2(bop_115.astype('float64')) # shape=(16, 7)
uop_120 = relay.erf(uop_118.astype('float64')) # shape=(16, 7)
bop_122 = relay.bitwise_or(uop_120.astype('uint32'), relay.reshape(const_104.astype('uint32'), relay.shape_of(uop_120))) # shape=(16, 7)
bop_125 = relay.mod(uop_118.astype('float32'), relay.reshape(bop_112.astype('float32'), relay.shape_of(uop_118))) # shape=(16, 7)
const_128 = relay.const([[8,4,3,-3,-1,7,4],[-1,-3,-6,-8,-8,-1,-4],[-5,-2,6,-8,-2,-4,-5],[5,10,-4,6,10,7,3],[-6,-10,7,-3,-10,2,10],[-4,-8,6,4,-1,-2,-4],[-8,6,-6,-5,8,8,1],[-1,7,-7,8,-2,-3,-5],[-1,-3,8,5,6,8,9],[6,-5,2,4,-6,-3,5],[3,-1,10,5,3,-1,9],[-7,-3,-10,-9,2,-2,-8],[-9,8,-4,6,5,10,-1],[-1,10,3,-8,-4,5,-2],[6,-9,4,9,-8,-2,8],[3,4,-2,-9,-10,7,-7]], dtype = "uint32")#candidate|128|(16, 7)|const|uint32
bop_129 = relay.minimum(const_104.astype('uint32'), relay.reshape(const_128.astype('uint32'), relay.shape_of(const_104))) # shape=(16, 7)
var_132 = relay.var("var_132", dtype = "float64", shape = (16, 7))#candidate|132|(16, 7)|var|float64
bop_133 = relay.less(uop_118.astype('bool'), relay.reshape(var_132.astype('bool'), relay.shape_of(uop_118))) # shape=(16, 7)
output = relay.Tuple([bop_106,bop_122,bop_125,bop_129,bop_133,])
output2 = relay.Tuple([bop_106,bop_122,bop_125,bop_129,bop_133,])
func_136 = relay.Function([var_132,], output)
mod['func_136'] = func_136
mod = relay.transform.InferType()(mod)
mutated_mod['func_136'] = func_136
mutated_mod = relay.transform.InferType()(mutated_mod)
var_137 = relay.var("var_137", dtype = "float64", shape = (16, 7))#candidate|137|(16, 7)|var|float64
func_136_call = mutated_mod.get_global_var('func_136')
call_138 = func_136_call(var_137)
output = call_138
func_139 = relay.Function([var_137], output)
mutated_mod['func_139'] = func_139
mutated_mod = relay.transform.InferType()(mutated_mod)
var_141 = relay.var("var_141", dtype = "uint64", shape = ())#candidate|141|()|var|uint64
var_142 = relay.var("var_142", dtype = "uint64", shape = (4, 11, 11))#candidate|142|(4, 11, 11)|var|uint64
bop_143 = relay.logical_xor(var_141.astype('uint64'), var_142.astype('uint64')) # shape=(4, 11, 11)
bop_146 = relay.power(var_141.astype('float32'), var_142.astype('float32')) # shape=(4, 11, 11)
uop_149 = relay.asinh(var_142.astype('float32')) # shape=(4, 11, 11)
uop_151 = relay.log(bop_143.astype('float32')) # shape=(4, 11, 11)
output = relay.Tuple([bop_146,uop_149,uop_151,])
output2 = relay.Tuple([bop_146,uop_149,uop_151,])
func_153 = relay.Function([var_141,var_142,], output)
mod['func_153'] = func_153
mod = relay.transform.InferType()(mod)
var_154 = relay.var("var_154", dtype = "uint64", shape = ())#candidate|154|()|var|uint64
var_155 = relay.var("var_155", dtype = "uint64", shape = (4, 11, 11))#candidate|155|(4, 11, 11)|var|uint64
output = func_153(var_154,var_155,)
func_156 = relay.Function([var_154,var_155,], output)
mutated_mod['func_156'] = func_156
mutated_mod = relay.transform.InferType()(mutated_mod)
var_158 = relay.var("var_158", dtype = "int16", shape = (11, 16))#candidate|158|(11, 16)|var|int16
var_159 = relay.var("var_159", dtype = "int16", shape = (11, 16))#candidate|159|(11, 16)|var|int16
bop_160 = relay.add(var_158.astype('int16'), relay.reshape(var_159.astype('int16'), relay.shape_of(var_158))) # shape=(11, 16)
uop_163 = relay.cos(var_159.astype('float64')) # shape=(11, 16)
bop_165 = relay.floor_mod(uop_163.astype('float64'), relay.reshape(bop_160.astype('float64'), relay.shape_of(uop_163))) # shape=(11, 16)
func_15_call = mod.get_global_var('func_15')
func_19_call = mutated_mod.get_global_var('func_19')
var_169 = relay.var("var_169", dtype = "int64", shape = ())#candidate|169|()|var|int64
call_168 = relay.TupleGetItem(func_15_call(relay.reshape(var_169.astype('int64'), []), relay.reshape(var_169.astype('int64'), []), ), 0)
call_170 = relay.TupleGetItem(func_19_call(relay.reshape(var_169.astype('int64'), []), relay.reshape(var_169.astype('int64'), []), ), 0)
bop_171 = relay.logical_xor(bop_165.astype('uint32'), call_168.astype('uint32')) # shape=(11, 16)
bop_174 = relay.logical_xor(bop_165.astype('uint32'), call_170.astype('uint32')) # shape=(11, 16)
bop_175 = relay.floor_mod(bop_160.astype('float32'), relay.reshape(bop_165.astype('float32'), relay.shape_of(bop_160))) # shape=(11, 16)
var_178 = relay.var("var_178", dtype = "float32", shape = (11, 16))#candidate|178|(11, 16)|var|float32
bop_179 = relay.add(bop_175.astype('uint16'), relay.reshape(var_178.astype('uint16'), relay.shape_of(bop_175))) # shape=(11, 16)
func_136_call = mod.get_global_var('func_136')
func_139_call = mutated_mod.get_global_var('func_139')
var_183 = relay.var("var_183", dtype = "float64", shape = (112,))#candidate|183|(112,)|var|float64
call_182 = relay.TupleGetItem(func_136_call(relay.reshape(var_183.astype('float64'), [16, 7])), 4)
call_184 = relay.TupleGetItem(func_139_call(relay.reshape(var_183.astype('float64'), [16, 7])), 4)
uop_185 = relay.sigmoid(bop_165.astype('float64')) # shape=(11, 16)
uop_187 = relay.log2(uop_185.astype('float32')) # shape=(11, 16)
bop_189 = relay.minimum(uop_187.astype('int16'), relay.reshape(bop_165.astype('int16'), relay.shape_of(uop_187))) # shape=(11, 16)
uop_192 = relay.log2(uop_187.astype('float64')) # shape=(11, 16)
bop_194 = relay.subtract(uop_192.astype('uint64'), relay.reshape(var_159.astype('uint64'), relay.shape_of(uop_192))) # shape=(11, 16)
uop_197 = relay.cos(bop_194.astype('float32')) # shape=(11, 16)
output = relay.Tuple([var_169,bop_171,bop_179,call_182,var_183,bop_189,uop_197,])
output2 = relay.Tuple([var_169,bop_174,bop_179,call_184,var_183,bop_189,uop_197,])
func_199 = relay.Function([var_158,var_159,var_169,var_178,var_183,], output)
mod['func_199'] = func_199
mod = relay.transform.InferType()(mod)
mutated_mod['func_199'] = func_199
mutated_mod = relay.transform.InferType()(mutated_mod)
func_199_call = mutated_mod.get_global_var('func_199')
var_201 = relay.var("var_201", dtype = "int16", shape = (11, 16))#candidate|201|(11, 16)|var|int16
var_202 = relay.var("var_202", dtype = "int16", shape = (11, 16))#candidate|202|(11, 16)|var|int16
var_203 = relay.var("var_203", dtype = "int64", shape = ())#candidate|203|()|var|int64
var_204 = relay.var("var_204", dtype = "float32", shape = (11, 16))#candidate|204|(11, 16)|var|float32
var_205 = relay.var("var_205", dtype = "float64", shape = (112,))#candidate|205|(112,)|var|float64
call_200 = func_199_call(var_201,var_202,var_203,var_204,var_205,)
output = call_200
func_206 = relay.Function([var_201,var_202,var_203,var_204,var_205,], output)
mutated_mod['func_206'] = func_206
mutated_mod = relay.transform.InferType()(mutated_mod)
const_208 = relay.const([1.230443,3.456525,9.512386], dtype = "float32")#candidate|208|(3,)|const|float32
uop_209 = relay.atanh(const_208.astype('float32')) # shape=(3,)
uop_211 = relay.log(uop_209.astype('float64')) # shape=(3,)
func_15_call = mod.get_global_var('func_15')
func_19_call = mutated_mod.get_global_var('func_19')
const_214 = relay.const(-3, dtype = "int64")#candidate|214|()|const|int64
call_213 = relay.TupleGetItem(func_15_call(relay.reshape(const_214.astype('int64'), []), relay.reshape(const_214.astype('int64'), []), ), 1)
call_215 = relay.TupleGetItem(func_19_call(relay.reshape(const_214.astype('int64'), []), relay.reshape(const_214.astype('int64'), []), ), 1)
bop_216 = relay.subtract(uop_211.astype('float64'), const_214.astype('float64')) # shape=(3,)
uop_219 = relay.erf(uop_209.astype('float32')) # shape=(3,)
bop_221 = relay.subtract(uop_219.astype('int32'), const_214.astype('int32')) # shape=(3,)
uop_224 = relay.log2(bop_221.astype('float32')) # shape=(3,)
bop_226 = relay.right_shift(uop_224.astype('int32'), relay.reshape(bop_221.astype('int32'), relay.shape_of(uop_224))) # shape=(3,)
uop_229 = relay.acosh(bop_226.astype('float64')) # shape=(3,)
const_231 = relay.const([6,6,-5], dtype = "int32")#candidate|231|(3,)|const|int32
bop_232 = relay.logical_or(bop_221.astype('bool'), relay.reshape(const_231.astype('bool'), relay.shape_of(bop_221))) # shape=(3,)
uop_235 = relay.asinh(uop_229.astype('float32')) # shape=(3,)
bop_237 = relay.not_equal(uop_209.astype('bool'), relay.reshape(uop_229.astype('bool'), relay.shape_of(uop_209))) # shape=(3,)
bop_240 = relay.mod(uop_229.astype('float64'), call_213.astype('float64')) # shape=(3,)
bop_243 = relay.mod(uop_229.astype('float64'), call_215.astype('float64')) # shape=(3,)
bop_244 = relay.left_shift(bop_226.astype('uint64'), relay.reshape(uop_235.astype('uint64'), relay.shape_of(bop_226))) # shape=(3,)
output = relay.Tuple([bop_216,bop_232,bop_237,bop_240,bop_244,])
output2 = relay.Tuple([bop_216,bop_232,bop_237,bop_243,bop_244,])
func_247 = relay.Function([], output)
mod['func_247'] = func_247
mod = relay.transform.InferType()(mod)
mutated_mod['func_247'] = func_247
mutated_mod = relay.transform.InferType()(mutated_mod)
func_247_call = mutated_mod.get_global_var('func_247')
call_248 = func_247_call()
output = call_248
func_249 = relay.Function([], output)
mutated_mod['func_249'] = func_249
mutated_mod = relay.transform.InferType()(mutated_mod)
const_250 = relay.const([[[3.231915,4.491911,6.150197,8.875865],[-2.680643,5.060342,-2.176967,-6.804283],[-3.718384,-7.786545,-3.361412,-7.920865]],[[8.349325,7.619234,1.079823,-8.579581],[5.628327,-1.990491,-6.656122,-5.250722],[-3.603381,-7.909118,-3.509057,5.410301]],[[7.915245,-2.702495,-0.179131,-1.572164],[-5.842656,9.547163,9.528242,-4.681014],[5.328740,7.597773,-7.098293,-8.800220]],[[4.265425,-1.853175,7.825721,5.354360],[1.980999,6.357374,-2.009629,-2.924870],[6.068536,-6.363116,7.752918,8.098274]],[[8.367200,-9.670292,-8.022506,6.589569],[5.671520,2.365077,0.904619,3.954233],[-8.420465,-8.875213,0.492243,0.823113]],[[-6.594380,2.633802,-1.433150,-3.690525],[4.991921,-8.869466,-4.149937,-0.202522],[4.804779,-9.113219,-7.647611,2.766976]],[[-1.187991,9.587678,-4.265041,-2.407520],[7.264072,-8.344247,-9.386719,1.597672],[2.451245,5.361708,5.175775,-5.655432]],[[-3.451729,9.341898,-3.358564,0.956531],[-6.079437,-1.651190,-7.497035,8.405160],[-3.126668,1.520751,1.687365,1.488512]]], dtype = "float32")#candidate|250|(8, 3, 4)|const|float32
uop_251 = relay.exp(const_250.astype('float32')) # shape=(8, 3, 4)
bop_253 = relay.floor_mod(uop_251.astype('float32'), relay.reshape(const_250.astype('float32'), relay.shape_of(uop_251))) # shape=(8, 3, 4)
uop_256 = relay.acosh(uop_251.astype('float32')) # shape=(8, 3, 4)
var_258 = relay.var("var_258", dtype = "float32", shape = (8, 3, 4))#candidate|258|(8, 3, 4)|var|float32
bop_259 = relay.greater_equal(const_250.astype('bool'), relay.reshape(var_258.astype('bool'), relay.shape_of(const_250))) # shape=(8, 3, 4)
const_262 = relay.const([[[3.028539,-6.874075,2.985799,2.125672],[-2.038618,3.289760,-3.653593,7.854635],[-1.688957,-5.309147,1.128426,-3.651112]],[[-3.682906,0.589105,-2.286013,-2.814309],[-8.083628,2.697960,8.579637,6.557778],[-3.788183,-3.088311,-2.368168,1.630724]],[[5.542452,-0.600236,7.725873,-1.865730],[-0.184921,-5.206792,-0.563055,-0.931921],[5.301562,-2.253751,-6.659646,-5.930157]],[[-1.558709,3.779314,-7.913954,-0.016487],[-0.719480,-7.865994,5.604415,-1.698846],[1.268593,-5.288415,6.958287,-2.774175]],[[-5.099194,2.095059,-7.955027,-4.250379],[-7.794902,9.747349,-0.942540,-6.125374],[4.749810,-8.776735,7.233496,-8.479849]],[[5.764990,-3.729090,2.173661,-3.656628],[-3.997235,-6.239610,5.221137,3.749289],[-7.750977,7.686639,-7.791637,9.262229]],[[-4.489533,4.988834,-3.044788,-9.507191],[-3.281644,-5.531258,3.049708,-0.625414],[-1.681834,-7.721768,9.609701,-6.082666]],[[3.183890,-7.908272,8.907850,9.146679],[4.931207,-8.645664,-7.773950,0.518634],[3.200261,-4.426226,-5.424399,-3.743595]]], dtype = "float32")#candidate|262|(8, 3, 4)|const|float32
bop_263 = relay.multiply(var_258.astype('float64'), relay.reshape(const_262.astype('float64'), relay.shape_of(var_258))) # shape=(8, 3, 4)
output = relay.Tuple([bop_253,uop_256,bop_259,bop_263,])
output2 = relay.Tuple([bop_253,uop_256,bop_259,bop_263,])
func_266 = relay.Function([var_258,], output)
mod['func_266'] = func_266
mod = relay.transform.InferType()(mod)
mutated_mod['func_266'] = func_266
mutated_mod = relay.transform.InferType()(mutated_mod)
var_267 = relay.var("var_267", dtype = "float32", shape = (8, 3, 4))#candidate|267|(8, 3, 4)|var|float32
func_266_call = mutated_mod.get_global_var('func_266')
call_268 = func_266_call(var_267)
output = call_268
func_269 = relay.Function([var_267], output)
mutated_mod['func_269'] = func_269
mutated_mod = relay.transform.InferType()(mutated_mod)
var_271 = relay.var("var_271", dtype = "uint32", shape = (2,))#candidate|271|(2,)|var|uint32
var_272 = relay.var("var_272", dtype = "uint32", shape = (2,))#candidate|272|(2,)|var|uint32
bop_273 = relay.multiply(var_271.astype('uint32'), relay.reshape(var_272.astype('uint32'), relay.shape_of(var_271))) # shape=(2,)
uop_276 = relay.acos(var_272.astype('float32')) # shape=(2,)
uop_278 = relay.atan(bop_273.astype('float64')) # shape=(2,)
uop_280 = relay.exp(uop_278.astype('float32')) # shape=(2,)
uop_282 = relay.sqrt(uop_280.astype('float32')) # shape=(2,)
bop_284 = relay.logical_and(uop_280.astype('bool'), relay.reshape(uop_282.astype('bool'), relay.shape_of(uop_280))) # shape=(2,)
bop_287 = relay.bitwise_or(uop_280.astype('uint64'), relay.reshape(uop_282.astype('uint64'), relay.shape_of(uop_280))) # shape=(2,)
uop_290 = relay.sigmoid(uop_282.astype('float32')) # shape=(2,)
uop_292 = relay.log10(uop_290.astype('float32')) # shape=(2,)
var_294 = relay.var("var_294", dtype = "float32", shape = (2,))#candidate|294|(2,)|var|float32
bop_295 = relay.logical_xor(uop_276.astype('int16'), relay.reshape(var_294.astype('int16'), relay.shape_of(uop_276))) # shape=(2,)
uop_298 = relay.log(uop_292.astype('float32')) # shape=(2,)
bop_300 = relay.mod(uop_298.astype('float64'), relay.reshape(var_294.astype('float64'), relay.shape_of(uop_298))) # shape=(2,)
uop_303 = relay.atan(uop_298.astype('float32')) # shape=(2,)
bop_305 = relay.equal(bop_287.astype('bool'), relay.reshape(uop_280.astype('bool'), relay.shape_of(bop_287))) # shape=(2,)
output = relay.Tuple([bop_284,bop_295,bop_300,uop_303,bop_305,])
output2 = relay.Tuple([bop_284,bop_295,bop_300,uop_303,bop_305,])
func_308 = relay.Function([var_271,var_272,var_294,], output)
mod['func_308'] = func_308
mod = relay.transform.InferType()(mod)
mutated_mod['func_308'] = func_308
mutated_mod = relay.transform.InferType()(mutated_mod)
func_308_call = mutated_mod.get_global_var('func_308')
var_310 = relay.var("var_310", dtype = "uint32", shape = (2,))#candidate|310|(2,)|var|uint32
var_311 = relay.var("var_311", dtype = "uint32", shape = (2,))#candidate|311|(2,)|var|uint32
var_312 = relay.var("var_312", dtype = "float32", shape = (2,))#candidate|312|(2,)|var|float32
call_309 = func_308_call(var_310,var_311,var_312,)
output = call_309
func_313 = relay.Function([var_310,var_311,var_312,], output)
mutated_mod['func_313'] = func_313
mutated_mod = relay.transform.InferType()(mutated_mod)
const_315 = relay.const([[[-5.442146,9.487274,-9.316222,9.632305,-4.727360,-8.052286,-3.988320,-6.145016,-3.863303,-1.682317,0.002634],[6.360478,0.072349,5.799255,3.798134,6.741575,0.213144,6.135382,-4.170783,5.726508,-1.354284,4.703950],[-7.921940,-6.274815,-9.328213,-8.833779,9.487516,-9.106659,5.176779,0.166126,-5.115082,-2.334685,5.007209],[9.893866,-4.886149,6.914450,-7.846012,0.941731,-7.260867,1.541644,-1.919623,2.327847,2.408918,-2.836067],[4.380839,3.034141,-1.982470,3.996285,9.965988,0.947382,9.007971,1.754795,-7.189948,-7.532050,-0.752149],[5.800378,-7.148814,3.032483,1.100404,-1.859295,4.784966,-5.576407,9.903491,-2.546353,8.504811,-4.839831],[-9.741490,-4.778254,0.267087,9.903351,9.676427,-7.640308,8.166510,1.353069,-4.200219,6.372725,-4.009004]],[[1.610464,3.997284,-3.446389,-5.425962,4.528511,-9.645458,4.608181,8.207012,-9.748480,7.133781,-9.269071],[-9.004432,7.794553,1.987610,-0.944876,6.229989,4.544734,9.604198,6.088163,-3.529075,-2.312114,-3.049567],[-9.065312,2.256515,-9.501247,-1.719543,5.981463,6.516276,0.502137,-4.566896,-0.582178,5.725947,-4.401792],[0.598131,-7.540164,1.478142,2.990371,-0.336185,5.495267,-1.182343,0.926053,-4.315628,4.762472,8.981293],[-3.061522,-3.636353,2.294433,-9.599515,9.478004,6.048004,4.698727,-4.641219,7.497031,0.892532,-5.544004],[-5.341700,-6.830452,8.452262,-1.080280,-5.660744,-0.075362,9.435400,-0.410377,2.265695,-1.071719,-5.233569],[8.981506,-5.578003,7.144511,7.671533,4.613175,2.496845,-0.509286,0.490295,-3.782809,1.540619,-0.996445]],[[-6.757198,-5.582124,-6.132133,1.884173,5.848758,-5.681079,5.688939,7.125736,4.913903,-3.306363,-0.788949],[9.514222,-9.081741,1.762118,-5.491806,-9.915778,-6.547924,4.521542,5.664261,5.778605,9.087933,-6.271130],[-1.404177,-8.339532,-3.742853,-4.626118,0.053681,-8.064596,1.847041,-8.926266,-7.854602,8.980500,4.482666],[0.168233,9.804593,3.912870,-3.730531,4.376266,2.124624,8.124746,-4.730823,-6.218489,5.777424,1.003135],[-4.936893,0.822669,5.967325,-3.401475,0.796559,2.249804,-9.451219,6.123935,2.061041,6.866051,-1.723779],[-5.660920,6.417890,5.194746,-4.069033,4.341871,-1.247185,7.727021,7.088628,-9.585023,4.604862,0.094947],[6.900734,8.623773,3.938401,1.081271,4.854367,8.505876,5.982108,1.522325,7.934967,-7.921887,1.339557]],[[7.852106,5.891974,8.752998,-4.522747,2.004160,-3.059648,-1.715843,1.312270,7.875581,3.345091,9.912134],[9.501640,-7.714842,-7.626101,-5.312979,-6.870456,-5.346512,-5.674408,1.619048,7.240671,-3.807381,3.667984],[8.560704,-4.873503,0.066329,6.122933,-1.864254,1.005381,-4.987848,-5.718399,-8.484256,-0.170473,-2.686785],[-1.047457,3.397157,-4.820495,0.862153,-9.386778,5.999216,-1.840222,8.157553,4.487043,-4.902575,-9.372828],[-1.092113,-3.720507,-4.817140,-5.016307,0.444577,-2.668434,-2.484718,-1.582298,-6.280429,-8.912795,8.825921],[-8.845301,5.671169,6.021861,-6.730942,-2.591253,-8.754063,1.123956,3.109191,4.254208,3.675852,-0.259916],[8.059867,2.640132,8.482146,1.307941,-4.460223,7.083193,9.969492,-6.080430,6.329264,8.866086,0.531042]],[[-0.435117,-4.849047,4.816674,9.478245,7.707153,-0.231550,-7.074031,-4.998542,-6.265719,9.823074,-4.589706],[-8.219707,-2.597715,6.435884,7.175212,1.564662,-5.649140,-4.148959,8.304232,9.539933,-2.825324,0.550227],[0.434001,-6.898029,6.489685,-0.981084,-5.936304,-9.954341,-7.320240,-6.807718,-9.032450,3.811242,0.562228],[-9.210385,5.691770,0.375726,4.400265,-9.140931,8.984118,-3.124650,-0.029139,-0.976404,-7.566069,0.354575],[4.268646,-3.856836,8.744002,-3.014426,2.332640,5.794465,-2.038654,-4.345100,-8.518190,-3.404026,0.028286],[-8.162175,3.932598,9.728109,7.657487,-1.123702,-9.445228,-8.164323,-7.106029,2.590231,9.733195,-6.759229],[6.757958,3.569365,5.539562,6.355396,-0.901450,-3.342397,1.976740,8.053842,0.771982,9.715041,8.828074]],[[7.331184,-1.186848,7.711523,-2.754814,3.959869,3.997690,6.757070,-8.786662,9.435621,-8.122823,0.406797],[7.362109,-9.742511,-3.751134,6.600468,2.195575,-5.980264,9.461349,9.099564,6.113771,6.486659,2.204928],[-6.070272,-3.162808,-5.489085,7.091470,-7.322774,5.845730,8.601684,-3.485007,3.734542,-3.278137,5.960597],[9.862551,9.876673,0.799160,4.267148,0.973690,-9.906374,-2.617621,-7.624820,-5.744372,-0.087863,3.603107],[-0.082540,-1.644873,1.401307,8.986815,-1.728954,9.805733,3.791101,4.294381,4.347765,-7.460847,-6.278263],[-4.938127,9.698068,8.031206,-6.668545,5.728377,-6.747730,-1.338112,-0.467675,-3.087203,2.848383,-4.566054],[-3.949536,5.542083,-8.977880,9.989701,-7.104437,0.512992,3.377192,-4.568090,2.689718,-0.101165,0.523107]],[[7.948588,-4.337300,3.421445,2.233863,-7.886725,4.658390,2.593698,-3.045768,-3.196274,3.412140,-4.438523],[-1.823731,-8.504570,-7.707460,7.228993,-8.527189,-1.543314,-0.103960,-6.683259,5.233942,2.220064,-8.096874],[2.059797,9.834301,-9.223093,1.643070,7.960725,6.586631,-2.210706,-7.047303,1.926584,-3.568272,1.308104],[8.163849,6.284003,7.428822,2.208296,3.778418,-4.504646,-7.978160,8.342653,2.659637,7.539747,2.973104],[-1.153096,4.434305,-9.883828,9.083283,-8.789667,6.350449,-7.004343,-0.157717,-0.617932,-3.834002,6.740674],[6.012276,-0.894480,2.380669,9.772721,8.016383,6.211170,-0.182368,3.744662,7.280648,-9.478639,6.866287],[5.779059,9.946780,4.830759,-0.762807,-2.292870,-8.903265,-5.885193,5.816856,-6.571243,-0.917785,1.890829]],[[2.624963,-7.750417,8.408092,2.815843,1.406897,-3.465526,-3.048185,-4.346539,-7.588501,6.890737,-2.555323],[6.769032,0.455409,-1.897347,4.610927,-5.148249,-1.555074,1.680526,-5.339703,-7.422735,-2.023069,-7.508469],[2.835523,6.910025,7.374092,-2.421650,7.178402,5.113383,5.730379,-6.435901,-4.966046,1.194675,5.315540],[-3.650855,1.491965,-7.243798,9.495613,-5.918100,4.484172,8.168022,-2.480223,-7.648689,6.453164,0.040982],[-7.363221,8.468001,-8.915307,8.220803,6.361305,1.821949,0.577616,-8.000313,-1.055365,4.550364,6.154702],[8.776840,-6.799143,9.392089,4.444944,-6.862694,-2.720347,-4.886829,-0.093311,-1.329571,5.943480,-5.140047],[1.326431,-7.636146,4.201494,-5.563273,-5.285873,7.792911,4.087138,-1.366644,0.102680,-3.390883,-4.485323]],[[-1.786652,2.706880,-1.088293,6.456773,4.116723,-7.839643,-3.024493,7.664056,-4.649801,-0.085411,-0.911843],[-7.376148,6.235037,9.994950,1.072866,-0.780632,-2.805738,-0.247025,1.977742,4.610767,8.016121,-3.268940],[4.848308,-6.412803,4.224461,4.688983,-9.302664,-8.053532,7.216340,-5.494046,0.974954,3.573074,-6.046590],[-2.000926,1.613227,-9.253925,9.079434,-8.658220,-8.016010,-0.360696,-4.299337,7.267200,4.465643,-8.735778],[2.268600,7.847527,0.204920,-2.739705,8.321353,4.280841,-3.590516,8.531875,-4.605553,-0.331792,-7.744581],[-4.956008,1.466176,3.473089,1.588022,9.359600,-7.167313,1.196188,8.447427,6.530647,6.891295,9.297155],[-7.037529,8.621748,5.412850,0.535271,4.822368,-4.508750,4.226679,4.019665,1.627101,3.971306,-4.419565]]], dtype = "float64")#candidate|315|(9, 7, 11)|const|float64
uop_316 = relay.rsqrt(const_315.astype('float64')) # shape=(9, 7, 11)
uop_318 = relay.rsqrt(uop_316.astype('float32')) # shape=(9, 7, 11)
uop_320 = relay.sin(uop_316.astype('float64')) # shape=(9, 7, 11)
var_322 = relay.var("var_322", dtype = "float32", shape = (9, 7, 11))#candidate|322|(9, 7, 11)|var|float32
bop_323 = relay.minimum(uop_318.astype('int16'), relay.reshape(var_322.astype('int16'), relay.shape_of(uop_318))) # shape=(9, 7, 11)
uop_326 = relay.tan(bop_323.astype('float32')) # shape=(9, 7, 11)
uop_328 = relay.atanh(uop_326.astype('float64')) # shape=(9, 7, 11)
uop_330 = relay.atan(uop_328.astype('float64')) # shape=(9, 7, 11)
bop_332 = relay.floor_divide(uop_330.astype('float64'), relay.reshape(var_322.astype('float64'), relay.shape_of(uop_330))) # shape=(9, 7, 11)
uop_335 = relay.sinh(bop_332.astype('float64')) # shape=(9, 7, 11)
var_337 = relay.var("var_337", dtype = "float64", shape = (9, 7, 11))#candidate|337|(9, 7, 11)|var|float64
bop_338 = relay.bitwise_and(uop_335.astype('uint8'), relay.reshape(var_337.astype('uint8'), relay.shape_of(uop_335))) # shape=(9, 7, 11)
func_15_call = mod.get_global_var('func_15')
func_19_call = mutated_mod.get_global_var('func_19')
const_342 = relay.const(3, dtype = "int64")#candidate|342|()|const|int64
call_341 = relay.TupleGetItem(func_15_call(relay.reshape(const_342.astype('int64'), []), relay.reshape(const_342.astype('int64'), []), ), 0)
call_343 = relay.TupleGetItem(func_19_call(relay.reshape(const_342.astype('int64'), []), relay.reshape(const_342.astype('int64'), []), ), 0)
uop_344 = relay.rsqrt(bop_332.astype('float32')) # shape=(9, 7, 11)
bop_346 = relay.floor_mod(const_342.astype('float32'), bop_332.astype('float32')) # shape=(9, 7, 11)
bop_349 = relay.subtract(call_341.astype('uint64'), const_315.astype('uint64')) # shape=(9, 7, 11)
bop_352 = relay.subtract(call_343.astype('uint64'), const_315.astype('uint64')) # shape=(9, 7, 11)
bop_353 = relay.logical_and(uop_328.astype('bool'), relay.reshape(bop_323.astype('bool'), relay.shape_of(uop_328))) # shape=(9, 7, 11)
output = relay.Tuple([uop_320,bop_338,uop_344,bop_346,bop_349,bop_353,])
output2 = relay.Tuple([uop_320,bop_338,uop_344,bop_346,bop_352,bop_353,])
F = relay.Function([var_322,var_337,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_322,var_337,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_322= np.array([[[6.245325,8.737968,-5.494278,6.735140,5.284900,-9.276064,-9.540313,-2.691936,8.917878,-4.316464,-1.340213],[-1.514093,-3.416394,2.022103,-8.286991,1.654532,-4.423035,8.136151,-5.832522,7.408491,-3.735802,-9.179346],[8.739184,-3.975887,-6.845459,8.241512,-2.336692,2.843891,9.331388,-4.388518,-4.720586,8.472936,-3.257184],[-8.928537,2.865370,-6.767010,5.202316,3.597103,2.412334,-3.828665,-5.891233,-1.826594,1.380636,-6.889980],[3.294594,1.202226,-6.129242,-6.326060,2.446188,8.415527,-1.184281,-5.191547,-7.867969,5.282108,8.187343],[2.046163,3.871589,-4.473245,4.463768,6.284027,4.141698,-5.458843,6.938881,3.672322,7.445599,3.486194],[-4.626627,-3.388972,0.192349,0.135157,9.332512,7.567213,-0.335860,1.524280,-8.736178,-3.280455,5.629738]],[[0.892522,-9.013627,-9.686749,2.851544,0.553709,1.951840,-7.735929,3.450734,-7.669598,-1.200453,4.176173],[1.282351,-7.950743,5.556914,-4.049241,7.304789,1.832813,-7.773841,-0.451530,-5.171287,4.923267,5.834952],[-0.356904,5.909977,1.207206,-6.064343,6.017515,2.328927,0.736428,-4.129505,-3.529477,0.711745,4.050689],[5.097913,2.772576,-8.403633,9.911268,-3.773471,-9.755176,-5.577795,7.466392,1.929214,3.140977,-4.594351],[1.501221,-1.944752,0.156570,-2.078089,9.121284,-0.549805,3.122713,6.919798,-7.981651,-9.741374,-0.114192],[-8.982196,-2.490816,-0.291487,-2.602437,-9.813642,1.237541,6.539026,4.735708,-5.268602,4.861569,5.959692],[6.425871,-8.291325,7.366491,-9.912287,6.775575,0.953400,-1.565456,9.821360,2.620513,9.069493,-0.287927]],[[7.156562,-9.990356,-5.048162,-5.137369,-0.776709,0.293910,1.748451,6.953639,-4.865185,-3.932047,-5.909240],[8.332475,6.277811,-7.896676,1.558959,-4.011421,-2.477477,-6.780475,-0.173291,-5.224973,-3.846112,4.984155],[-9.715758,-6.301886,-6.725470,1.786394,2.589232,-9.576455,3.561969,9.843064,-5.509947,3.499114,-7.066790],[7.668964,-0.694509,7.376538,2.511655,-9.960055,-5.487619,-0.793375,6.876076,4.885832,-2.248698,6.686618],[-5.362324,0.077356,-2.614963,5.780633,-9.583952,-0.108826,4.710115,-6.195039,-7.921581,-7.698603,4.253590],[0.511659,-2.414753,6.390640,6.509342,-2.825327,-1.496184,-0.577780,-1.325867,3.181021,-5.281255,0.699842],[-2.055114,9.125019,-2.835443,7.433558,-6.311764,-0.359939,3.778731,-1.656994,5.235894,8.456639,-3.726452]],[[-0.337642,1.125031,1.680029,1.914126,9.178709,-1.307089,6.249459,6.149099,-6.476668,4.251121,-0.725590],[8.373489,3.004738,-2.900417,-8.002786,-4.620436,4.063186,-3.973669,-4.363137,-0.761047,8.217452,-9.193061],[0.187854,1.076292,7.144554,8.980584,-3.177809,-8.430558,0.044857,-0.277826,9.134338,-4.761682,-7.083887],[-3.649220,1.293151,6.755289,3.458550,9.872561,6.659197,5.855642,7.370127,-7.258965,5.152135,-6.890644],[3.229738,-7.602577,4.997011,-7.378390,3.295525,-2.606511,8.325514,-5.013868,5.701295,0.929686,-8.622901],[-9.737689,8.906211,3.124987,8.579347,5.481174,-5.533275,-6.672904,5.702573,-3.666896,6.751191,7.533388],[-1.306411,1.807289,0.055598,-1.780612,9.922306,4.698148,1.277875,6.285978,-6.809808,-6.579682,-7.472913]],[[7.319607,4.275416,8.207005,-9.762220,2.465248,-1.317178,7.327982,6.189569,3.360942,-5.832180,-6.849156],[-3.056852,-9.675828,-3.596063,1.685569,4.391448,-5.235028,-3.593203,5.238345,-9.480912,8.669574,-9.923540],[-8.855961,-8.505458,-9.477673,3.702720,9.656972,4.843657,-1.945933,-5.236371,-7.180522,-3.652669,-3.270825],[-9.585376,-2.194859,-3.666701,6.196625,-9.710553,-7.082897,-8.658340,8.376928,4.704291,4.818495,-4.223700],[2.911566,6.380015,1.763050,-6.045253,4.006851,4.419806,-5.451652,2.087115,-0.854487,0.480199,9.135017],[-7.112432,7.778034,4.058217,-8.278111,1.028944,-5.137691,8.771444,-0.649112,5.649531,6.064071,0.981022],[-9.736566,0.660284,-0.972782,6.730806,-0.713182,-6.209790,-9.894163,-1.112237,-7.843981,-6.353318,5.577628]],[[-2.986592,4.482301,2.332351,-6.080775,-8.049652,6.997457,-7.849955,2.774745,4.281925,0.943794,9.704946],[5.786718,-9.067327,1.279789,-0.249416,-5.964973,2.224797,-7.878224,-2.362157,2.003917,4.547585,4.499735],[2.305581,-8.047089,-9.680472,-4.657539,3.108297,-3.079758,1.718477,-8.947530,-1.314767,-2.130573,-5.656842],[-2.750343,-5.923105,-4.997936,-4.365627,9.142515,-7.989300,4.871687,8.568212,-9.481006,7.505813,-8.431366],[7.618041,0.822186,4.979322,8.623862,-5.047234,6.569542,7.437881,8.154663,9.408913,6.335377,-6.668608],[-2.914883,6.907016,-2.976225,2.273988,5.106368,2.200224,-5.226215,4.564582,-7.628956,9.007977,-4.885579],[1.104750,8.157806,-4.603590,-5.638275,3.506741,-7.637675,-9.549409,8.941324,4.209337,-6.261854,1.596866]],[[5.766830,-8.099211,9.164807,1.313922,-7.862627,7.008319,2.374912,7.721992,-4.176260,5.229092,1.105334],[4.127475,0.735470,1.882115,6.205031,7.809097,6.687394,-6.730820,5.842080,-3.741031,2.160018,0.724894],[4.532295,-7.304470,3.843760,-3.936134,8.868155,-9.340717,-1.182712,-3.890550,-7.658858,4.120546,2.736411],[-4.946755,1.119410,7.098244,-4.280062,-7.679921,0.381159,3.651204,-1.476469,5.468595,0.372993,-1.181674],[0.697292,5.104956,-3.629494,-3.533443,7.233791,5.240378,7.787121,8.981140,0.606452,-5.664288,-5.402701],[-4.867338,6.661537,4.121296,8.354058,3.453494,-6.141020,-2.269263,5.688095,9.774451,-9.330640,6.465408],[1.267175,5.929562,-1.229023,8.710314,-4.478357,6.512969,3.447870,-1.452839,4.474921,0.521631,2.094265]],[[-0.840884,-7.883672,3.543998,-3.448212,1.639667,2.814640,1.039432,-7.153086,-9.789664,-8.142578,-0.194434],[-2.909035,-4.728711,-7.293387,-1.669962,7.785186,-2.500468,-2.633708,-7.817789,4.069976,-8.213052,9.890081],[-1.549015,-7.665176,-8.757005,2.433678,-2.520499,3.791164,6.210091,-0.791874,9.186198,-9.572486,-8.620405],[5.782060,-0.555869,-4.152831,9.212233,-7.189544,9.549565,9.883650,4.496191,-3.044166,-3.343524,-6.329119],[-9.229411,7.840084,-1.041977,3.096043,-0.565820,-5.981021,9.629036,6.813955,-5.866907,7.698231,-4.309018],[0.877531,9.521225,6.279445,4.641410,9.077572,2.983859,-9.539402,-6.375836,-1.854274,-2.350405,0.965369],[0.661869,5.193622,-2.158595,6.388749,1.592045,-9.058979,-8.838621,-7.018730,8.187401,5.486722,2.472276]],[[5.436162,-2.698925,-4.938133,-3.480069,-4.998707,9.740458,9.413137,-0.590817,-6.778522,5.852284,-4.685181],[9.124648,2.731773,-2.217430,3.346461,-3.849054,-9.825090,-4.938298,-2.656746,-6.450860,-1.051854,-9.018001],[-2.665052,-5.173345,-0.125016,1.631795,8.191007,2.721891,-5.405044,-9.412782,9.060032,-3.091040,6.953980],[4.370013,3.948027,-3.272796,2.904029,2.572835,-7.158855,-0.302126,2.799810,6.349552,-0.627495,4.294989],[2.366288,-3.644815,6.280490,-8.453169,8.413000,-5.987273,1.251408,-5.885226,4.710242,-1.888819,9.096524],[-9.902841,7.261301,-6.033285,-8.265600,-7.346507,4.875638,0.864456,7.896615,2.090930,9.708978,7.122902],[-0.293990,9.565802,8.656855,5.843417,-0.014269,5.770673,-0.165563,-0.170322,5.318962,-5.122687,3.166348]]], dtype='float32')
module1.set_input('var_322', input_322)
input_337= np.array([[[5.012488,6.619520,-7.240996,-5.733869,9.965803,0.426191,-4.821324,3.198199,-7.131392,1.505357,2.853438],[7.577934,0.549621,-0.369970,5.477290,7.032743,-7.718020,6.219304,5.211198,-1.953812,-7.149253,0.734940],[-2.136575,9.074080,-3.613940,-1.872999,-2.990843,4.683919,-4.631148,6.493142,-2.618373,0.657923,2.967009],[0.831580,-8.715096,9.972420,3.885511,-8.411462,5.441690,-8.362178,-5.527520,3.879667,-2.861300,-8.421071],[-0.384983,-7.683502,-3.693422,0.353827,-0.426050,-8.126022,-4.127796,-6.683221,-0.575846,6.157344,-8.117651],[-3.635680,-8.728801,3.933019,-8.434872,-9.363541,5.733365,8.353668,-5.457881,9.778410,3.703212,4.228073],[2.472330,-0.209686,-5.532603,-7.834852,1.965533,-0.043976,-8.463494,3.272238,4.297512,-1.865908,-8.033479]],[[2.710294,-5.650559,-0.664758,-3.573424,-4.429414,0.274197,-4.467185,-8.903709,-3.797488,6.175714,-5.870657],[-1.948465,-0.210318,5.589154,-7.457953,6.618590,-5.645297,-8.470159,3.646276,-0.289734,-9.977547,-8.448343],[-1.237715,9.806560,3.577232,5.083053,0.629542,3.023143,6.404654,-7.501891,-4.190138,0.777217,6.513876],[6.867183,0.373012,-7.686976,9.349233,-1.649061,-8.864760,-8.308636,-9.941284,1.973322,6.510274,6.479902],[1.087637,-8.544224,2.880547,-0.208691,0.815335,-6.108131,2.094344,2.861985,2.475788,-0.240828,3.975628],[3.987886,-1.342765,4.081510,6.134366,8.549132,-8.192309,3.064867,0.698262,0.519791,9.115446,1.860497],[-3.124105,-9.935845,-6.160285,2.447765,2.611801,9.042773,3.349614,-9.209137,-5.100167,0.719466,2.468547]],[[-5.533405,-8.492059,-9.805791,4.054679,5.209506,-1.131680,-1.915293,-7.636703,-8.995379,-3.250345,-6.346060],[2.810392,7.313337,-3.713605,-0.163378,3.306105,-4.248281,-7.881201,6.350503,1.157261,-0.611796,-6.131254],[-6.047774,-3.349263,8.149854,4.004210,6.387334,-5.427640,-8.895144,9.181701,-4.525984,9.679211,1.638939],[0.555729,-0.767560,5.947371,-0.337703,1.164474,-1.041572,-0.470270,-1.219410,2.644239,-6.922492,-9.384010],[-1.983273,2.356665,-3.916354,-3.582037,4.619729,7.415928,-3.093098,-9.450436,-6.255633,3.600672,3.429724],[-4.350721,0.166449,0.494371,3.631359,-6.837573,-8.679758,0.527427,9.799884,-7.649105,5.816527,-5.045214],[-4.892472,3.939333,-5.594763,9.630675,-2.377470,0.339785,-3.056649,0.478942,7.250633,2.140488,4.000204]],[[-0.691535,-0.995950,1.864681,-5.740791,5.916134,-4.879440,-0.211352,-9.520985,1.512010,2.900829,-1.944572],[4.206436,-1.356775,-8.183510,-9.712783,-5.398763,-0.837662,5.807710,-8.431247,6.330425,-9.193955,-8.717647],[-6.063945,4.932786,1.925556,-4.750391,-6.944150,5.420812,-2.635722,-8.460680,-3.540645,-7.544299,-4.847709],[-3.266349,5.232852,-6.031841,-9.900152,-2.347986,4.910506,-2.561588,7.438897,0.348502,-6.197413,-7.500933],[-9.295459,-2.772318,8.696575,7.831198,-8.564980,-6.645907,1.018691,-5.965612,-1.601488,-6.935514,-4.910620],[-1.250525,3.271505,9.846441,6.841971,9.843406,-8.180180,-4.179920,-9.692732,8.939592,6.494316,-9.543119],[9.783494,-1.961379,-5.316181,7.451453,3.005471,-7.591101,1.537412,0.989726,8.443801,-4.649602,-1.479965]],[[1.675169,-1.096488,7.157012,-5.463010,-4.777792,-7.549413,5.484159,1.286518,0.179247,3.198042,-3.149424],[9.510118,5.158375,-3.751576,3.188107,-1.836911,2.014563,1.657927,-5.786953,-0.460494,1.138719,-2.752172],[2.617416,-8.697075,-1.046342,-8.756535,-8.284846,-5.895630,-4.932550,-0.964917,4.163641,-7.303769,8.559997],[-8.611893,-0.859352,3.945201,0.937293,-2.468759,2.518043,-6.281454,-9.243962,-1.985582,-9.371634,-7.763067],[2.664595,-9.374966,9.753855,5.189554,1.126594,8.248521,7.600311,9.862800,-7.065419,8.135079,-6.990619],[7.835285,2.848586,-5.290364,6.475971,-9.225512,8.438617,2.695498,-5.942275,7.157623,-8.474046,9.840752],[7.820546,1.717434,-1.665645,-0.529486,-4.144586,-0.726347,7.393802,7.433037,9.379469,-8.749327,8.010613]],[[-9.198475,-8.701176,0.039244,-0.050791,-5.854143,8.552715,2.073789,5.475566,1.115421,1.426231,5.113497],[-8.995708,1.562768,-5.956703,-5.885673,-6.223783,3.330249,-8.880920,8.947788,8.833018,3.952640,4.368093],[8.210402,-9.974315,-5.721020,-2.537569,-9.796733,4.818546,-1.343936,6.441082,0.629884,8.016233,9.196454],[7.266206,-3.659044,-6.203143,6.907488,-6.766779,-2.757136,4.967081,2.234133,-0.622097,-5.570520,0.496621],[-6.297004,6.634651,-9.068365,-3.478166,8.193089,4.630686,6.677229,6.614322,3.545707,5.855911,-6.578277],[0.142378,-5.377058,2.174440,6.243987,5.811796,-3.253863,5.633131,-8.157471,-5.636037,2.186764,1.631748],[3.950435,0.211364,9.164906,0.988467,-8.143064,0.970481,-6.987447,4.558674,3.720197,1.296677,-9.381972]],[[6.364124,0.340400,-1.595618,3.766474,8.362243,-3.594137,9.645491,8.397319,4.710779,9.298999,-5.531753],[6.249932,6.524475,-8.577505,-5.648784,3.505414,6.745249,0.189577,5.637857,-4.009647,-9.362788,-4.627714],[-0.555766,-7.651468,0.171437,-4.726152,9.588322,7.811723,-1.516026,-9.845145,-9.410957,-9.539479,-4.623761],[3.916522,-1.721944,-5.908839,-0.290522,5.771605,-5.147303,-1.067530,5.939871,6.907879,4.447707,-5.039036],[-8.149896,-6.028624,-3.116585,0.243850,1.323761,8.765802,-1.143633,-9.602472,-9.389951,1.441432,9.388153],[-0.438973,-2.216415,8.444859,-2.083163,1.362250,-2.622294,-2.696650,3.340846,9.389128,-8.939060,-5.519710],[-2.398904,-2.377580,-4.544886,5.830611,8.287809,8.530136,5.351930,1.848204,-7.916360,2.993485,5.708118]],[[3.340215,6.994657,1.214128,0.954617,-9.166854,-1.638131,-5.383880,-1.453803,-6.028624,5.263114,1.758004],[-7.312717,8.572229,3.956870,-6.393602,-1.028449,2.259565,-9.210557,9.182367,1.769335,-8.850462,-2.190856],[-1.791604,-7.858531,1.361699,-4.204488,5.763943,0.309420,2.295029,0.149714,7.133762,-4.183823,3.766613],[3.381629,-4.773896,-7.361979,-8.380327,-0.017603,3.025189,5.887451,-1.133477,0.856352,9.344984,-0.928124],[2.330675,-9.294782,5.742053,-6.922623,8.976076,-0.002555,-7.733855,-0.760925,0.901818,1.554862,-0.199174],[5.378563,1.920485,-8.976568,-9.133775,0.325605,-4.794444,-4.105369,-1.148494,-9.230142,8.538206,-2.409186],[2.676957,-8.142382,4.637898,8.439948,3.835705,-3.772412,3.505390,4.719587,-4.154487,8.537555,-4.178794]],[[-4.508938,-9.923268,-0.540327,9.872911,2.455877,-8.370654,-3.087449,-3.646805,9.680468,-2.719715,-0.915896],[-2.772071,0.491057,-4.499240,8.362915,5.093333,-0.606373,-7.841961,9.551221,4.776159,-6.289426,-3.724270],[9.916032,-1.122510,-7.023973,-8.382442,-3.100056,-2.661083,8.197679,-8.603766,9.240120,7.688850,-4.923663],[8.363333,3.554567,-7.227003,-8.291808,-7.117977,0.950622,-6.248845,-5.791969,-1.441568,4.440385,-8.453874],[-9.738004,1.156699,-1.003715,5.908188,-5.501928,-1.633169,5.203471,2.568550,-3.149927,5.635012,-9.842840],[3.756794,-5.631455,0.283513,4.101452,2.198679,-2.334897,3.980339,3.062632,0.825857,6.912812,4.332298],[3.310467,-4.843585,5.976167,8.284565,2.642166,-7.028788,3.571149,8.943433,8.549626,-1.849932,0.029249]]], dtype='float64')
module1.set_input('var_337', input_337)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_322, input_337, )
res3 = intrp3.evaluate()(input_322, input_337, )
res4 = intrp4.evaluate()(input_322, input_337, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
module5.set_input('var_322', input_322)
module5.set_input('var_337', input_337)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_322, input_337, )
res7 = intrp7.evaluate()(input_322, input_337, )
res8 = intrp8.evaluate()(input_322, input_337, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
module9.set_input('var_322', input_322)
module9.set_input('var_337', input_337)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_322, input_337, )
res11 = intrp11.evaluate()(input_322, input_337, )
res12 = intrp12.evaluate()(input_322, input_337, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
module13.set_input('var_322', input_322)
module13.set_input('var_337', input_337)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_322, input_337, )
res15 = intrp15.evaluate()(input_322, input_337, )
res16 = intrp16.evaluate()(input_322, input_337, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
module17.set_input('var_322', input_322)
module17.set_input('var_337', input_337)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_322, input_337, )
res19 = intrp19.evaluate()(input_322, input_337, )
res20 = intrp20.evaluate()(input_322, input_337, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
module21.set_input('var_322', input_322)
module21.set_input('var_337', input_337)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_322, input_337, )
res23 = intrp23.evaluate()(input_322, input_337, )
res24 = intrp24.evaluate()(input_322, input_337, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()

'''6: TVMFuncCall
5: _ZNSt17_Function_handlerIFvN3tvm7runtime7
4: tvm::runtime::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const [clone .isra.808]
3: tvm::runtime::GraphExecutorCreate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module const&, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
2: tvm::runtime::GraphExecutor::Init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
1: tvm::runtime::GraphExecutor::SetupOpExecs()
0: tvm::runtime::GraphExecutor::CreateTVMOp(tvm::runtime::TVMOpParam const&, std::vector<DLTensor, std::allocator<DLTensor> > const&)

'''