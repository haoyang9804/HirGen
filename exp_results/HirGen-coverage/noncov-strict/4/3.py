import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = ())#candidate|0|()|var|float32
uop_1 = relay.asinh(var_0.astype('float32')) # shape=()
uop_3 = relay.sin(uop_1.astype('float64')) # shape=()
uop_5 = relay.log2(uop_1.astype('float64')) # shape=()
uop_7 = relay.sqrt(uop_3.astype('float32')) # shape=()
var_9 = relay.var("var_9", dtype = "float32", shape = (3, 8))#candidate|9|(3, 8)|var|float32
bop_10 = relay.multiply(uop_1.astype('int32'), var_9.astype('int32')) # shape=(3, 8)
bop_13 = relay.greater(uop_3.astype('bool'), uop_7.astype('bool')) # shape=()
bop_16 = relay.less(uop_1.astype('bool'), var_9.astype('bool')) # shape=(3, 8)
const_19 = relay.const(False, dtype = "bool")#candidate|19|()|const|bool
bop_20 = relay.right_shift(bop_13.astype('uint64'), const_19.astype('uint64')) # shape=()
uop_23 = relay.log2(bop_13.astype('float32')) # shape=()
uop_25 = relay.cos(uop_23.astype('float64')) # shape=()
output = relay.Tuple([uop_5,bop_10,bop_16,bop_20,uop_25,])
output2 = relay.Tuple([uop_5,bop_10,bop_16,bop_20,uop_25,])
func_27 = relay.Function([var_0,var_9,], output)
mod['func_27'] = func_27
mod = relay.transform.InferType()(mod)
mutated_mod['func_27'] = func_27
mutated_mod = relay.transform.InferType()(mutated_mod)
func_27_call = mutated_mod.get_global_var('func_27')
var_29 = relay.var("var_29", dtype = "float32", shape = ())#candidate|29|()|var|float32
var_30 = relay.var("var_30", dtype = "float32", shape = (3, 8))#candidate|30|(3, 8)|var|float32
call_28 = func_27_call(var_29,var_30,)
output = call_28
func_31 = relay.Function([var_29,var_30,], output)
mutated_mod['func_31'] = func_31
mutated_mod = relay.transform.InferType()(mutated_mod)
var_33 = relay.var("var_33", dtype = "int16", shape = (8,))#candidate|33|(8,)|var|int16
var_34 = relay.var("var_34", dtype = "int16", shape = (8,))#candidate|34|(8,)|var|int16
bop_35 = relay.greater_equal(var_33.astype('bool'), relay.reshape(var_34.astype('bool'), relay.shape_of(var_33))) # shape=(8,)
uop_38 = relay.atan(var_34.astype('float32')) # shape=(8,)
uop_40 = relay.sinh(uop_38.astype('float32')) # shape=(8,)
bop_42 = relay.floor_mod(uop_38.astype('float32'), relay.reshape(var_33.astype('float32'), relay.shape_of(uop_38))) # shape=(8,)
bop_45 = relay.less(uop_38.astype('bool'), relay.reshape(bop_35.astype('bool'), relay.shape_of(uop_38))) # shape=(8,)
uop_48 = relay.sinh(bop_42.astype('float64')) # shape=(8,)
bop_50 = relay.logical_and(uop_40.astype('bool'), relay.reshape(var_33.astype('bool'), relay.shape_of(uop_40))) # shape=(8,)
uop_53 = relay.exp(uop_48.astype('float32')) # shape=(8,)
uop_55 = relay.acos(var_34.astype('float32')) # shape=(8,)
uop_57 = relay.cosh(uop_53.astype('float64')) # shape=(8,)
output = relay.Tuple([bop_45,bop_50,uop_55,uop_57,])
output2 = relay.Tuple([bop_45,bop_50,uop_55,uop_57,])
func_59 = relay.Function([var_33,var_34,], output)
mod['func_59'] = func_59
mod = relay.transform.InferType()(mod)
var_60 = relay.var("var_60", dtype = "int16", shape = (8,))#candidate|60|(8,)|var|int16
var_61 = relay.var("var_61", dtype = "int16", shape = (8,))#candidate|61|(8,)|var|int16
output = func_59(var_60,var_61,)
func_62 = relay.Function([var_60,var_61,], output)
mutated_mod['func_62'] = func_62
mutated_mod = relay.transform.InferType()(mutated_mod)
const_64 = relay.const([-10,-7,-3,-6,-9,-10,7,7,-8,5,-10,-1,-8], dtype = "uint16")#candidate|64|(13,)|const|uint16
const_65 = relay.const([1,-3,4,2,3,-2,6,3,3,-3,-6,4,8], dtype = "uint16")#candidate|65|(13,)|const|uint16
bop_66 = relay.left_shift(const_64.astype('uint16'), relay.reshape(const_65.astype('uint16'), relay.shape_of(const_64))) # shape=(13,)
var_69 = relay.var("var_69", dtype = "uint16", shape = (13,))#candidate|69|(13,)|var|uint16
bop_70 = relay.add(const_64.astype('float64'), relay.reshape(var_69.astype('float64'), relay.shape_of(const_64))) # shape=(13,)
uop_73 = relay.sinh(bop_66.astype('float64')) # shape=(13,)
const_75 = relay.const([-2.972874,2.142061,3.681563,-4.178198,2.224537,-1.487304,4.657646,7.441857,1.373911,-3.501367,7.560630,-1.596734,-3.877474], dtype = "float64")#candidate|75|(13,)|const|float64
bop_76 = relay.bitwise_xor(uop_73.astype('uint64'), relay.reshape(const_75.astype('uint64'), relay.shape_of(uop_73))) # shape=(13,)
uop_79 = relay.asin(bop_76.astype('float64')) # shape=(13,)
bop_81 = relay.maximum(uop_73.astype('int16'), relay.reshape(const_75.astype('int16'), relay.shape_of(uop_73))) # shape=(13,)
uop_84 = relay.acos(bop_81.astype('float32')) # shape=(13,)
uop_86 = relay.asinh(bop_81.astype('float64')) # shape=(13,)
var_88 = relay.var("var_88", dtype = "float64", shape = (13,))#candidate|88|(13,)|var|float64
bop_89 = relay.subtract(uop_79.astype('int32'), relay.reshape(var_88.astype('int32'), relay.shape_of(uop_79))) # shape=(13,)
bop_92 = relay.divide(const_65.astype('float64'), relay.reshape(bop_81.astype('float64'), relay.shape_of(const_65))) # shape=(13,)
bop_95 = relay.less(uop_79.astype('bool'), relay.reshape(const_64.astype('bool'), relay.shape_of(uop_79))) # shape=(13,)
bop_98 = relay.left_shift(bop_81.astype('uint32'), relay.reshape(bop_70.astype('uint32'), relay.shape_of(bop_81))) # shape=(13,)
bop_101 = relay.logical_or(bop_81.astype('bool'), relay.reshape(uop_73.astype('bool'), relay.shape_of(bop_81))) # shape=(13,)
var_104 = relay.var("var_104", dtype = "float64", shape = (13,))#candidate|104|(13,)|var|float64
bop_105 = relay.greater_equal(uop_79.astype('bool'), relay.reshape(var_104.astype('bool'), relay.shape_of(uop_79))) # shape=(13,)
bop_108 = relay.less_equal(bop_101.astype('bool'), relay.reshape(const_64.astype('bool'), relay.shape_of(bop_101))) # shape=(13,)
var_111 = relay.var("var_111", dtype = "uint32", shape = (13,))#candidate|111|(13,)|var|uint32
bop_112 = relay.bitwise_and(bop_98.astype('int16'), relay.reshape(var_111.astype('int16'), relay.shape_of(bop_98))) # shape=(13,)
bop_115 = relay.logical_or(bop_95.astype('bool'), relay.reshape(uop_73.astype('bool'), relay.shape_of(bop_95))) # shape=(13,)
var_118 = relay.var("var_118", dtype = "float64", shape = (13,))#candidate|118|(13,)|var|float64
bop_119 = relay.maximum(var_88.astype('uint32'), relay.reshape(var_118.astype('uint32'), relay.shape_of(var_88))) # shape=(13,)
const_122 = relay.const([6.139167,-7.669409,8.534496,1.151386,-8.253059,-5.863436,-2.127611,0.911508,-0.678693,-0.045740,-2.338846,-4.543053,1.126992], dtype = "float64")#candidate|122|(13,)|const|float64
bop_123 = relay.add(uop_73.astype('uint8'), relay.reshape(const_122.astype('uint8'), relay.shape_of(uop_73))) # shape=(13,)
uop_126 = relay.asin(bop_95.astype('float64')) # shape=(13,)
bop_128 = relay.mod(uop_126.astype('float32'), relay.reshape(uop_79.astype('float32'), relay.shape_of(uop_126))) # shape=(13,)
bop_131 = relay.add(uop_86.astype('int8'), relay.reshape(bop_108.astype('int8'), relay.shape_of(uop_86))) # shape=(13,)
const_134 = relay.const([0.065911,1.266501,-4.171051,1.864032,-6.765748,8.373709,-9.021462,-9.991374,3.427791,7.709237,-7.629216,1.398733,-6.886028], dtype = "float32")#candidate|134|(13,)|const|float32
bop_135 = relay.power(bop_128.astype('float32'), relay.reshape(const_134.astype('float32'), relay.shape_of(bop_128))) # shape=(13,)
uop_138 = relay.atan(bop_128.astype('float64')) # shape=(13,)
bop_140 = relay.less(uop_126.astype('bool'), relay.reshape(var_118.astype('bool'), relay.shape_of(uop_126))) # shape=(13,)
bop_143 = relay.floor_mod(uop_126.astype('float64'), relay.reshape(uop_84.astype('float64'), relay.shape_of(uop_126))) # shape=(13,)
uop_146 = relay.sigmoid(bop_135.astype('float32')) # shape=(13,)
func_27_call = mod.get_global_var('func_27')
func_31_call = mutated_mod.get_global_var('func_31')
var_149 = relay.var("var_149", dtype = "float32", shape = ())#candidate|149|()|var|float32
const_150 = relay.const([5.835477,3.716246,-7.034108,0.631415,0.038296,-3.953321,6.169913,6.377045,-4.592290,-6.413543,-0.147687,-2.280408,-2.461966,0.034000,-0.361572,2.160230,9.324902,5.387799,3.957874,-8.405670,-4.053428,-7.927940,-7.619840,-2.338106], dtype = "float32")#candidate|150|(24,)|const|float32
call_148 = relay.TupleGetItem(func_27_call(relay.reshape(var_149.astype('float32'), []), relay.reshape(const_150.astype('float32'), [3, 8]), ), 4)
call_151 = relay.TupleGetItem(func_31_call(relay.reshape(var_149.astype('float32'), []), relay.reshape(const_150.astype('float32'), [3, 8]), ), 4)
uop_152 = relay.atan(uop_138.astype('float64')) # shape=(13,)
bop_154 = relay.bitwise_or(uop_152.astype('int16'), relay.reshape(uop_126.astype('int16'), relay.shape_of(uop_152))) # shape=(13,)
var_157 = relay.var("var_157", dtype = "float64", shape = (13,))#candidate|157|(13,)|var|float64
bop_158 = relay.less_equal(uop_152.astype('bool'), relay.reshape(var_157.astype('bool'), relay.shape_of(uop_152))) # shape=(13,)
var_161 = relay.var("var_161", dtype = "bool", shape = (13,))#candidate|161|(13,)|var|bool
bop_162 = relay.greater_equal(bop_158.astype('bool'), relay.reshape(var_161.astype('bool'), relay.shape_of(bop_158))) # shape=(13,)
uop_165 = relay.exp(uop_152.astype('float32')) # shape=(13,)
uop_167 = relay.sinh(uop_165.astype('float64')) # shape=(13,)
var_169 = relay.var("var_169", dtype = "float64", shape = (13,))#candidate|169|(13,)|var|float64
bop_170 = relay.power(uop_167.astype('float64'), relay.reshape(var_169.astype('float64'), relay.shape_of(uop_167))) # shape=(13,)
func_27_call = mod.get_global_var('func_27')
func_31_call = mutated_mod.get_global_var('func_31')
call_173 = relay.TupleGetItem(func_27_call(relay.reshape(var_149.astype('float32'), []), relay.reshape(const_150.astype('float32'), [3, 8]), ), 3)
call_174 = relay.TupleGetItem(func_31_call(relay.reshape(var_149.astype('float32'), []), relay.reshape(const_150.astype('float32'), [3, 8]), ), 3)
bop_175 = relay.bitwise_or(bop_170.astype('int32'), relay.reshape(uop_165.astype('int32'), relay.shape_of(bop_170))) # shape=(13,)
uop_178 = relay.sigmoid(uop_165.astype('float64')) # shape=(13,)
bop_180 = relay.bitwise_or(bop_162.astype('int32'), relay.reshape(var_104.astype('int32'), relay.shape_of(bop_162))) # shape=(13,)
func_59_call = mod.get_global_var('func_59')
func_62_call = mutated_mod.get_global_var('func_62')
var_184 = relay.var("var_184", dtype = "int16", shape = (8,))#candidate|184|(8,)|var|int16
call_183 = relay.TupleGetItem(func_59_call(relay.reshape(var_184.astype('int16'), [8,]), relay.reshape(var_184.astype('int16'), [8,]), ), 0)
call_185 = relay.TupleGetItem(func_62_call(relay.reshape(var_184.astype('int16'), [8,]), relay.reshape(var_184.astype('int16'), [8,]), ), 0)
uop_186 = relay.cos(bop_175.astype('float64')) # shape=(13,)
var_188 = relay.var("var_188", dtype = "float64", shape = (13,))#candidate|188|(13,)|var|float64
bop_189 = relay.greater_equal(uop_186.astype('bool'), relay.reshape(var_188.astype('bool'), relay.shape_of(uop_186))) # shape=(13,)
var_192 = relay.var("var_192", dtype = "float64", shape = (13,))#candidate|192|(13,)|var|float64
bop_193 = relay.logical_and(uop_186.astype('bool'), relay.reshape(var_192.astype('bool'), relay.shape_of(uop_186))) # shape=(13,)
bop_196 = relay.divide(bop_193.astype('float32'), relay.reshape(var_104.astype('float32'), relay.shape_of(bop_193))) # shape=(13,)
bop_199 = relay.mod(uop_186.astype('float32'), relay.reshape(bop_76.astype('float32'), relay.shape_of(uop_186))) # shape=(13,)
uop_202 = relay.cosh(uop_165.astype('float32')) # shape=(13,)
uop_204 = relay.sigmoid(bop_180.astype('float32')) # shape=(13,)
uop_206 = relay.log10(bop_193.astype('float32')) # shape=(13,)
output = relay.Tuple([bop_89,bop_92,bop_105,bop_112,bop_115,bop_119,bop_123,bop_131,bop_140,bop_143,uop_146,call_148,var_149,const_150,bop_154,call_173,uop_178,call_183,var_184,bop_189,bop_196,bop_199,uop_202,uop_204,uop_206,])
output2 = relay.Tuple([bop_89,bop_92,bop_105,bop_112,bop_115,bop_119,bop_123,bop_131,bop_140,bop_143,uop_146,call_151,var_149,const_150,bop_154,call_174,uop_178,call_185,var_184,bop_189,bop_196,bop_199,uop_202,uop_204,uop_206,])
func_208 = relay.Function([var_69,var_88,var_104,var_111,var_118,var_149,var_157,var_161,var_169,var_184,var_188,var_192,], output)
mod['func_208'] = func_208
mod = relay.transform.InferType()(mod)
var_209 = relay.var("var_209", dtype = "uint16", shape = (13,))#candidate|209|(13,)|var|uint16
var_210 = relay.var("var_210", dtype = "float64", shape = (13,))#candidate|210|(13,)|var|float64
var_211 = relay.var("var_211", dtype = "float64", shape = (13,))#candidate|211|(13,)|var|float64
var_212 = relay.var("var_212", dtype = "uint32", shape = (13,))#candidate|212|(13,)|var|uint32
var_213 = relay.var("var_213", dtype = "float64", shape = (13,))#candidate|213|(13,)|var|float64
var_214 = relay.var("var_214", dtype = "float32", shape = ())#candidate|214|()|var|float32
var_215 = relay.var("var_215", dtype = "float64", shape = (13,))#candidate|215|(13,)|var|float64
var_216 = relay.var("var_216", dtype = "bool", shape = (13,))#candidate|216|(13,)|var|bool
var_217 = relay.var("var_217", dtype = "float64", shape = (13,))#candidate|217|(13,)|var|float64
var_218 = relay.var("var_218", dtype = "int16", shape = (8,))#candidate|218|(8,)|var|int16
var_219 = relay.var("var_219", dtype = "float64", shape = (13,))#candidate|219|(13,)|var|float64
var_220 = relay.var("var_220", dtype = "float64", shape = (13,))#candidate|220|(13,)|var|float64
output = func_208(var_209,var_210,var_211,var_212,var_213,var_214,var_215,var_216,var_217,var_218,var_219,var_220,)
func_221 = relay.Function([var_209,var_210,var_211,var_212,var_213,var_214,var_215,var_216,var_217,var_218,var_219,var_220,], output)
mutated_mod['func_221'] = func_221
mutated_mod = relay.transform.InferType()(mutated_mod)
var_223 = relay.var("var_223", dtype = "float64", shape = (11,))#candidate|223|(11,)|var|float64
uop_224 = relay.exp(var_223.astype('float64')) # shape=(11,)
uop_226 = relay.acosh(uop_224.astype('float32')) # shape=(11,)
uop_228 = relay.exp(uop_226.astype('float32')) # shape=(11,)
uop_230 = relay.atan(uop_228.astype('float32')) # shape=(11,)
uop_232 = relay.acos(uop_228.astype('float32')) # shape=(11,)
bop_234 = relay.subtract(uop_226.astype('float32'), relay.reshape(uop_232.astype('float32'), relay.shape_of(uop_226))) # shape=(11,)
bop_237 = relay.greater_equal(var_223.astype('bool'), relay.reshape(uop_230.astype('bool'), relay.shape_of(var_223))) # shape=(11,)
uop_240 = relay.log10(uop_232.astype('float32')) # shape=(11,)
func_27_call = mod.get_global_var('func_27')
func_31_call = mutated_mod.get_global_var('func_31')
const_243 = relay.const(-3.556251, dtype = "float32")#candidate|243|()|const|float32
const_244 = relay.const([7.368448,-0.350670,8.713191,-5.383471,0.137838,-2.688861,-8.818964,-0.483360,-6.952447,6.603966,-0.329761,0.515570,-3.535995,0.003700,3.949732,0.741550,1.780953,3.593348,-1.324381,-0.843320,-2.646753,-2.821454,3.111460,6.647250], dtype = "float32")#candidate|244|(24,)|const|float32
call_242 = relay.TupleGetItem(func_27_call(relay.reshape(const_243.astype('float32'), []), relay.reshape(const_244.astype('float32'), [3, 8]), ), 2)
call_245 = relay.TupleGetItem(func_31_call(relay.reshape(const_243.astype('float32'), []), relay.reshape(const_244.astype('float32'), [3, 8]), ), 2)
var_246 = relay.var("var_246", dtype = "float32", shape = (11,))#candidate|246|(11,)|var|float32
bop_247 = relay.floor_mod(uop_240.astype('float64'), relay.reshape(var_246.astype('float64'), relay.shape_of(uop_240))) # shape=(11,)
output = relay.Tuple([bop_234,bop_237,call_242,const_243,const_244,bop_247,])
output2 = relay.Tuple([bop_234,bop_237,call_245,const_243,const_244,bop_247,])
func_250 = relay.Function([var_223,var_246,], output)
mod['func_250'] = func_250
mod = relay.transform.InferType()(mod)
var_251 = relay.var("var_251", dtype = "float64", shape = (11,))#candidate|251|(11,)|var|float64
var_252 = relay.var("var_252", dtype = "float32", shape = (11,))#candidate|252|(11,)|var|float32
output = func_250(var_251,var_252,)
func_253 = relay.Function([var_251,var_252,], output)
mutated_mod['func_253'] = func_253
mutated_mod = relay.transform.InferType()(mutated_mod)
const_255 = relay.const(-5.949032, dtype = "float64")#candidate|255|()|const|float64
uop_256 = relay.sin(const_255.astype('float64')) # shape=()
uop_258 = relay.asinh(uop_256.astype('float64')) # shape=()
bop_260 = relay.multiply(uop_256.astype('float32'), uop_258.astype('float32')) # shape=()
uop_263 = relay.sigmoid(bop_260.astype('float32')) # shape=()
uop_265 = relay.acos(uop_258.astype('float32')) # shape=()
uop_267 = relay.cos(uop_256.astype('float64')) # shape=()
bop_269 = relay.greater(uop_267.astype('bool'), uop_263.astype('bool')) # shape=()
bop_272 = relay.left_shift(uop_265.astype('uint16'), uop_267.astype('uint16')) # shape=()
bop_275 = relay.maximum(uop_265.astype('float64'), uop_263.astype('float64')) # shape=()
uop_278 = relay.acosh(uop_256.astype('float64')) # shape=()
uop_280 = relay.log(uop_258.astype('float64')) # shape=()
var_282 = relay.var("var_282", dtype = "bool", shape = (12, 5, 2))#candidate|282|(12, 5, 2)|var|bool
bop_283 = relay.subtract(bop_269.astype('uint32'), var_282.astype('uint32')) # shape=(12, 5, 2)
uop_286 = relay.cosh(var_282.astype('float64')) # shape=(12, 5, 2)
func_59_call = mod.get_global_var('func_59')
func_62_call = mutated_mod.get_global_var('func_62')
const_289 = relay.const([[-4,-10,-3,-4,8,-2,-2,1]], dtype = "int16")#candidate|289|(1, 8)|const|int16
call_288 = relay.TupleGetItem(func_59_call(relay.reshape(const_289.astype('int16'), [8,]), relay.reshape(const_289.astype('int16'), [8,]), ), 0)
call_290 = relay.TupleGetItem(func_62_call(relay.reshape(const_289.astype('int16'), [8,]), relay.reshape(const_289.astype('int16'), [8,]), ), 0)
uop_291 = relay.tan(uop_267.astype('float32')) # shape=()
uop_293 = relay.sqrt(uop_280.astype('float64')) # shape=()
uop_295 = relay.log(uop_256.astype('float64')) # shape=()
uop_297 = relay.tan(uop_293.astype('float64')) # shape=()
bop_299 = relay.right_shift(uop_297.astype('int8'), uop_258.astype('int8')) # shape=()
bop_302 = relay.left_shift(uop_293.astype('int8'), bop_272.astype('int8')) # shape=()
uop_305 = relay.sqrt(call_288.astype('float32')) # shape=(8,)
uop_307 = relay.sqrt(call_290.astype('float32')) # shape=(8,)
uop_308 = relay.log10(bop_299.astype('float64')) # shape=()
bop_310 = relay.bitwise_or(bop_299.astype('int64'), uop_278.astype('int64')) # shape=()
bop_313 = relay.mod(bop_299.astype('float64'), uop_280.astype('float64')) # shape=()
bop_316 = relay.minimum(bop_313.astype('float32'), var_282.astype('float32')) # shape=(12, 5, 2)
uop_319 = relay.log10(uop_308.astype('float64')) # shape=()
var_321 = relay.var("var_321", dtype = "float64", shape = (14, 16, 7))#candidate|321|(14, 16, 7)|var|float64
bop_322 = relay.power(uop_308.astype('float32'), var_321.astype('float32')) # shape=(14, 16, 7)
output = relay.Tuple([bop_275,bop_283,uop_286,const_289,uop_291,uop_295,bop_302,uop_305,bop_310,bop_316,uop_319,bop_322,])
output2 = relay.Tuple([bop_275,bop_283,uop_286,const_289,uop_291,uop_295,bop_302,uop_307,bop_310,bop_316,uop_319,bop_322,])
F = relay.Function([var_282,var_321,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_282,var_321,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_282= np.array([[[False,True],[True,True],[True,False],[False,False],[True,True]],[[True,True],[True,True],[True,False],[True,False],[True,True]],[[True,False],[True,True],[False,False],[False,False],[True,False]],[[False,False],[True,True],[True,True],[True,True],[True,False]],[[True,True],[True,False],[False,False],[False,False],[True,True]],[[True,False],[False,False],[False,False],[False,False],[False,False]],[[False,False],[False,False],[True,True],[True,False],[False,False]],[[True,True],[True,False],[True,False],[True,True],[False,False]],[[True,True],[False,True],[False,False],[True,False],[True,True]],[[False,True],[False,False],[True,True],[True,False],[False,False]],[[True,True],[True,False],[True,True],[False,False],[False,False]],[[False,True],[False,True],[False,False],[True,True],[False,False]]], dtype='bool')
module1.set_input('var_282', input_282)
input_321= np.array([[[-8.967141,-4.852649,6.373836,-4.842607,-1.304002,-9.784042,6.591160],[-8.157359,1.372425,6.965674,-5.468330,-4.660036,-5.425054,0.979081],[-8.912162,-2.024820,-6.417071,2.265951,-4.044836,8.677464,4.665600],[0.450498,-1.094758,6.055502,-9.027580,1.072026,0.486718,3.506378],[-8.038886,-4.782712,-9.048776,6.158676,5.121883,-9.238782,-0.613056],[-9.471337,5.336350,6.425330,6.707205,2.559579,2.458991,-7.355805],[-6.153384,2.612491,8.201941,-7.437388,-5.081583,-3.527137,-2.157744],[8.653880,-7.820628,-6.581343,2.817707,-4.006854,1.132961,-1.296039],[-5.574645,8.373258,7.073106,1.261925,-2.970755,-0.953275,-9.387974],[-7.503152,3.267876,0.554966,-6.528930,0.621616,2.028423,-8.529418],[-5.422285,-6.965365,-1.485102,7.283772,-3.910611,-1.761932,-8.044192],[4.339255,7.425669,5.651552,4.999620,3.949496,5.264301,-7.724318],[-3.593299,7.145375,1.540896,1.085510,6.917259,4.217789,4.928742],[8.875709,-0.381925,-7.839844,-8.784449,-1.296729,7.108446,4.807287],[1.582363,2.480508,1.491786,-4.869255,-9.588088,-2.040237,-3.910360],[9.531398,1.346365,-2.739738,1.499880,5.353247,-8.607174,-0.219030]],[[1.742217,-4.216455,6.866680,-1.697296,-8.023917,7.241241,-3.416978],[2.446182,-2.356594,6.831574,8.294679,4.327501,-2.103049,-4.058862],[2.338577,-0.235519,5.282504,9.632470,4.006134,5.495327,-6.555578],[-6.460260,-2.264749,6.676432,7.957596,-9.193593,-9.530773,4.675637],[-8.953301,-5.104237,-2.633761,1.578466,4.343452,-7.392342,-0.367736],[0.926564,1.828829,-2.723451,7.539505,-4.556225,-1.861817,6.673718],[-5.299596,5.322520,-2.867071,-9.801575,9.202679,-6.695779,-3.760532],[4.066292,-3.585306,1.660143,-5.791765,8.433658,-3.553801,-2.872436],[-6.794739,1.631492,2.769149,-5.761646,-6.103392,-3.964033,-5.101690],[4.833390,-1.773614,5.727622,2.998087,-6.626080,-7.789162,5.687669],[3.146757,1.940726,3.861445,-8.017227,-7.753520,-4.814650,-4.580434],[-9.395496,-8.637314,6.242518,-6.342342,3.067792,-3.818169,5.700593],[-4.858812,2.124376,3.178979,7.338624,2.124227,8.932403,-9.054621],[5.613068,-5.172105,5.516948,3.807244,3.504309,-8.192635,6.374090],[-3.503358,2.096584,0.308778,-8.216921,-6.235160,7.922975,-4.710257],[9.532779,-3.617904,8.873973,-8.959364,0.753531,1.980349,3.767079]],[[-5.298735,-6.912976,3.390848,2.752162,-9.568471,6.985624,1.303723],[6.820909,3.625289,2.316565,2.788756,3.688473,4.978370,1.111144],[6.385606,-5.364983,2.992810,1.226031,7.134467,9.858790,-7.156160],[-4.087890,4.484422,9.201739,-8.836339,-5.768625,5.286975,7.572616],[2.381771,-7.734356,3.695703,-1.381749,1.305550,5.703904,-1.363563],[2.333736,-2.410579,-5.031561,5.824816,-9.293127,-0.784059,8.029231],[-1.649637,5.705288,2.557023,1.846700,-9.699903,5.972132,3.950473],[-3.345920,8.303333,-0.902199,5.023764,1.030270,1.062453,-2.081844],[-5.690869,7.816159,-0.650486,-3.579065,-4.424776,-1.803245,7.561735],[3.807389,8.759151,-3.819424,5.746751,-1.928250,-0.518332,1.577054],[5.833010,7.596659,6.728747,9.165145,9.236819,9.009443,3.461991],[2.458426,7.377190,1.723978,-3.490373,6.174281,-1.425206,2.876801],[4.333166,-3.864883,-2.210593,-8.347890,2.965146,-5.703964,-6.444532],[-4.658599,3.702174,-6.146088,-2.099605,8.886724,-4.251328,-2.222447],[-7.135789,0.395617,-3.291766,6.207363,2.686448,-8.876536,2.619108],[-4.987005,-3.499957,6.506389,-3.152290,-8.136278,0.967395,5.013634]],[[-1.072453,-3.005684,3.678421,-6.681019,-4.455848,7.129069,-5.959417],[-5.870624,-6.318280,5.238548,0.420734,-7.702410,-8.532174,7.976596],[8.925261,6.660949,-9.967307,-5.770968,5.542711,-2.226512,-0.641091],[-0.554357,0.460471,-8.915348,1.200843,2.217490,-3.960535,-4.821858],[-8.023156,-3.793022,-0.880791,-3.666326,-4.593412,2.020855,3.355022],[8.162404,6.880929,-9.002236,-2.079233,-5.074077,-1.826161,-3.181225],[6.771380,-1.912878,-8.869570,8.331513,-2.897108,-7.794749,4.134962],[8.751184,6.639556,-1.324118,-7.484874,6.187783,-6.009366,-4.449808],[2.337567,6.832304,2.456837,0.574156,3.279482,-2.548194,-5.064066],[-3.978661,-6.095611,-6.015563,-2.146812,-9.448838,-2.390110,7.632416],[7.290271,8.330764,-6.013484,-5.915922,-3.214993,-7.873400,-7.490798],[-3.143267,0.233881,-8.003592,-0.289155,3.674649,-1.675662,4.136240],[9.277883,6.487654,-9.685687,-5.780206,3.792570,-4.778925,-2.633247],[1.686922,0.181064,0.779216,-9.146483,7.240106,-0.423773,7.788743],[-8.724572,0.237013,7.014981,0.958194,-2.544809,6.955998,-3.621930],[0.736887,-0.605613,0.290933,-5.408430,-9.334230,4.851234,5.447740]],[[-9.448387,-9.295180,3.631610,-3.095762,-2.861280,-4.137767,9.219998],[-3.436387,4.641845,-7.555256,2.725777,-8.573788,-7.638453,-8.064763],[-4.850912,-3.610448,1.506703,7.129924,-3.878579,7.108476,8.811743],[3.107111,5.578638,-7.583753,-7.980187,-1.278724,7.869467,1.917587],[0.035605,2.883376,-3.810836,-2.382892,-3.472110,-5.869762,-9.525759],[1.871868,-2.687381,-8.642914,-7.450796,-8.568971,-5.544765,-4.731529],[1.368006,5.949627,-7.876510,-8.473495,-4.494782,-5.663207,3.705965],[-1.907501,-2.713572,4.030741,-7.614994,4.508309,4.233491,6.286699],[-4.170783,8.327808,-8.049671,0.380231,1.877211,9.599218,-7.807662],[-7.082574,-9.628627,8.450767,-0.004627,8.856136,8.864317,7.819581],[9.247147,-8.637168,7.405179,2.199711,-9.166658,-5.580448,4.269153],[-2.559385,7.651336,3.904506,2.003003,-9.845459,6.563426,-2.736223],[-5.971577,1.847207,7.246387,-8.082035,6.279117,-3.738006,-4.776058],[8.931478,-5.126745,1.581685,-7.888833,7.951039,-5.067690,3.375378],[-6.336766,-3.075939,-0.933445,-9.901706,8.957760,-4.139456,-1.848285],[-6.226033,9.202750,-6.019745,3.718331,2.324384,-7.038228,6.645158]],[[-5.879504,4.807575,4.561820,-2.044213,2.201907,6.816539,7.961652],[-9.820699,-4.047723,-0.552282,-3.371871,1.261338,-3.338357,-5.785289],[2.638434,1.722808,-6.961053,-5.787932,-8.580815,2.720240,8.203347],[-0.982914,-2.114570,2.068698,-4.910164,-7.315975,-0.752232,-7.320016],[-7.841592,-0.784109,8.381224,-2.144386,-9.147407,4.601366,1.135067],[-3.861590,4.422320,1.962792,4.189567,-3.444993,-7.542903,1.978740],[-7.028560,0.552410,-6.019520,-1.231312,-6.093730,9.235546,-6.562256],[3.277312,-6.136082,-9.642749,5.439704,3.823829,-3.148050,-6.764045],[0.352273,-2.967966,2.932212,-7.378231,8.286407,0.832420,8.676157],[-5.133752,0.619727,2.847232,0.868755,1.843214,5.361537,-1.013461],[-8.632628,-6.336408,-0.502166,3.785857,8.546400,8.830029,0.864242],[-2.225293,0.648411,-1.863371,-9.906502,-5.768562,6.328961,-1.730402],[0.843421,8.982399,2.553679,5.311268,-8.605807,-0.503588,-2.898964],[-0.187598,-4.880136,5.174205,0.353091,4.650485,2.967981,3.302612],[4.527047,-1.344133,-2.126457,2.875770,3.411404,1.679989,4.741633],[1.509747,9.788177,1.690234,-2.133923,-1.703878,-3.701244,-6.375872]],[[7.540729,9.250012,2.430310,2.092790,5.917581,-8.418360,8.175543],[-2.466192,3.803254,6.266648,7.167503,-2.081192,4.605121,3.886298],[-0.339529,5.749997,2.861335,6.187945,-5.159707,2.049450,3.830650],[1.600906,8.331360,5.962524,9.421590,-5.504368,-0.187778,9.669503],[1.585699,8.171604,-6.102181,0.600285,3.144595,-2.763790,-2.455995],[9.548733,0.955956,-3.003251,-4.267555,3.273648,-4.147975,-4.602131],[9.225244,-4.342434,-7.479380,-2.821827,5.804695,7.561578,-4.285013],[-3.832153,3.443245,-6.200473,-9.966765,6.634459,1.572308,6.540288],[-3.053611,-6.190821,3.133033,-6.995893,-4.336539,-4.636595,5.722563],[3.105183,2.630818,-1.895782,3.865365,-3.572803,6.191497,2.252300],[-8.493120,8.119430,-7.198679,-4.765194,-2.320782,-5.663385,-7.162141],[-3.220502,-5.113729,0.010824,-6.934437,-0.618529,6.351276,2.923263],[-0.543673,7.115832,0.374492,-3.147511,-6.297700,1.065170,6.730128],[5.674543,-5.558625,3.289556,3.628668,3.445217,-5.807884,-6.668275],[-1.058635,1.048489,-9.020681,3.155942,5.420183,9.360062,7.189719],[-8.830118,-2.434184,-5.132065,-8.642795,1.068739,-5.913976,6.860670]],[[-0.801681,-5.731538,7.232727,-7.670034,-9.901160,-1.658166,3.407597],[5.659154,-7.026501,7.533971,-5.904160,-6.784606,-3.416419,-0.447251],[-1.337132,6.577212,0.504022,8.107391,7.044952,-7.403010,4.851353],[1.093347,8.598748,3.947749,4.790364,-3.928231,-8.311910,-2.219357],[8.381019,-6.704056,-7.267375,-0.436006,7.049696,-6.828715,9.009049],[3.524638,8.419542,0.990049,6.970144,1.537799,-0.066499,-2.945390],[-3.384184,1.010352,-3.016014,2.283779,2.563808,-6.587176,7.904228],[-8.307575,-3.165207,9.908146,-7.016433,-3.694010,-5.867314,-8.697589],[1.641562,0.633090,6.125530,6.264841,-0.387778,-7.171298,9.406909],[2.520922,-2.741309,0.016367,2.711424,-2.287361,-4.841607,5.748174],[-9.641932,7.185090,8.221485,0.070643,5.431591,-1.330403,5.854476],[4.621177,0.726572,6.499192,-2.662831,-7.754117,-7.071594,-5.738072],[6.337440,4.740257,1.485814,-8.198470,3.468681,-3.346673,-6.207259],[7.348867,8.335139,-7.241428,8.049981,-5.689876,5.590124,2.572003],[-6.836214,-2.061725,6.032328,3.930696,-8.172922,0.683957,-9.906225],[-5.053590,-6.593660,-6.879112,-6.023463,8.254819,8.805581,-0.555449]],[[-7.319278,-5.127100,5.542682,2.923956,-7.699339,9.079964,-5.599839],[-9.812116,-2.180677,2.535318,-4.329221,1.264100,4.340571,-3.460327],[-7.174957,7.444107,-0.430362,5.132101,-0.593781,3.793871,-4.198435],[9.338525,9.873301,7.975377,-5.941715,2.360091,-7.277192,6.615976],[8.421494,-5.303256,-8.657247,-3.989136,9.471545,-1.849549,-1.766370],[-9.577812,1.575072,3.698408,-2.228132,-0.135659,-1.627198,6.599344],[-7.802128,-5.515555,5.560750,-9.475011,-3.512672,-7.727945,-6.747306],[0.140135,-9.449620,4.877311,9.634446,0.665295,9.501304,-5.140224],[3.719533,8.759837,-3.628002,4.865097,-2.938715,-9.263624,-7.625460],[8.304658,2.838347,-0.582461,-4.597232,3.587682,-6.883352,1.573585],[6.966173,4.651398,-7.679549,-5.155014,-1.748100,-9.306720,5.144840],[2.815165,9.132064,6.806624,3.438235,9.713261,7.420667,7.378699],[2.133124,-4.539320,-9.359067,9.338144,-6.081309,-6.661979,2.137246],[3.119714,2.794564,-9.414773,2.944432,8.235092,4.449951,9.877242],[-9.651600,0.496334,7.521807,-4.091588,3.586275,-6.070776,1.839075],[4.047362,0.586085,-8.638663,1.491422,-7.852598,-0.395917,-6.206289]],[[-6.579519,-1.893882,-6.034658,-9.922620,6.690173,-2.929738,-0.487643],[-9.939203,4.650650,-0.963175,9.892880,6.570065,2.233955,1.989639],[9.558402,-6.574632,0.098579,-7.838487,-6.545353,-0.288949,0.516912],[-0.435583,1.833216,-0.775839,-3.068434,-6.272767,4.458247,9.236065],[1.970691,-0.467343,-1.421335,-6.283644,6.060458,1.109077,7.419752],[-1.880523,-2.829738,-4.660759,2.255433,-4.949710,5.582732,4.058772],[-3.328259,6.650748,-8.945670,9.187843,-4.391103,-5.548397,-1.260781],[0.932254,5.183278,3.994834,9.765153,-6.201534,-6.934993,-9.979847],[9.774076,-9.602037,-5.413515,8.118262,1.226534,9.579719,-1.742227],[5.579063,-9.473287,-5.689931,-0.041448,5.664552,3.790120,5.630943],[9.180593,0.657738,8.878033,-8.740272,5.659429,-0.579432,-9.439458],[6.464840,-6.924584,-0.563178,7.962592,-9.388816,-7.323751,6.973136],[4.668723,8.641789,7.558825,6.345206,-4.074124,-4.305549,1.706140],[-1.026794,6.282584,-9.754885,-4.634895,-1.332501,9.501363,-6.006560],[-4.149501,8.604088,-6.682577,-8.734830,5.031262,-5.562998,-3.235617],[-2.139402,-6.697258,1.694379,-1.543645,4.921544,-0.911884,-6.909158]],[[-1.906518,0.188533,5.087366,1.838714,3.840597,0.041270,9.367746],[-0.688557,-4.176187,-2.165334,0.779319,-8.717431,3.175061,3.730240],[5.448857,-7.124438,-7.241554,8.449909,-4.447885,3.037851,-3.475992],[0.620078,-6.630662,9.268294,-6.476570,2.149034,-5.662607,7.361611],[1.628958,4.108143,-7.695965,4.731454,-1.665702,-1.597367,9.321249],[-1.872856,-4.932691,9.407470,-9.276962,-2.396542,-1.106332,-9.176670],[8.370665,9.428748,-5.786752,-5.967673,-7.802312,7.744601,-0.349989],[8.217863,3.360399,7.686186,5.744820,5.950284,-9.891288,-2.474169],[8.116584,8.135495,-0.935510,-6.956549,7.569432,-6.274598,-4.175734],[-7.628209,0.745838,-5.915171,-7.193784,9.297473,-7.916586,3.352469],[-0.562108,-9.817813,-0.562313,-3.465753,-9.641916,-9.000927,5.718161],[2.377411,-4.094228,-4.498015,4.419958,0.553600,9.460422,-1.895383],[6.093527,-8.410961,1.681745,2.268094,-8.253159,9.288243,-6.838228],[-1.424643,-3.559262,7.294261,-3.574052,-2.789901,-1.338841,7.576110],[-6.574415,-8.149860,4.606675,0.658560,6.631436,-1.208217,4.036980],[-0.476532,0.322139,3.171535,-3.653016,4.282638,3.186713,-6.246617]],[[9.944887,2.092137,0.887945,9.881147,-0.916367,-2.257569,4.713700],[7.000202,-4.037543,9.260475,-0.984289,8.787792,5.553210,9.331859],[-4.861049,7.853987,5.037891,-5.123923,-6.263158,5.237229,-0.974773],[-8.574330,4.145934,-0.743589,0.890680,1.904997,1.643342,-2.138630],[7.519896,3.046129,1.070046,7.705648,3.735963,-5.558971,8.023778],[-4.532549,9.110493,-2.119022,-6.270587,-9.285552,-3.842451,4.399023],[-8.087039,-3.162546,-3.844413,9.647253,-2.534892,-0.423910,-0.931763],[0.043835,5.699996,-4.196410,-0.838196,8.327694,6.492124,-8.478481],[2.539328,0.768789,7.432323,-5.345831,1.577895,-5.140322,-3.999884],[8.622392,6.808777,8.167977,-8.776856,6.213270,-5.768002,4.746495],[-0.184585,9.423287,-4.193829,1.075659,-6.556417,1.871630,4.186186],[-0.202248,-2.535636,2.012899,-2.859139,-8.425327,-4.467002,-8.816764],[-8.333341,-7.524011,5.826243,4.594043,0.422783,-9.438561,-1.860912],[8.400650,2.768523,1.307670,-3.227406,8.653272,3.776057,1.500969],[8.949139,-1.269790,-7.252232,-0.741160,-8.118235,9.340276,-9.828465],[-7.795672,0.844898,-8.033885,2.395535,-3.517110,-3.307507,-1.088559]],[[-2.570953,9.107363,9.514672,5.335783,0.710510,-8.889921,0.593672],[0.007807,5.707921,-3.785498,4.221736,2.006443,5.630412,-5.736478],[4.225163,3.277174,1.616694,8.256551,7.747654,-7.547681,-6.293511],[-3.817904,-8.459381,6.753853,6.448433,-7.062279,-3.039932,6.658701],[3.818432,-9.763353,6.907430,-1.032589,-3.152542,6.035504,5.237684],[-5.786569,-8.517345,6.174588,-2.513194,-4.613057,3.791885,9.585431],[-8.194733,9.693921,-0.121294,-2.501179,2.515518,-3.701014,-5.000969],[2.777970,6.496035,3.248284,9.371287,-7.878699,7.920277,9.651293],[5.321381,4.784962,-7.934412,-2.094485,-2.194410,-0.471528,9.344226],[8.673550,-0.547547,0.355521,6.915720,-7.022319,-3.925829,-6.505197],[9.310978,-0.299793,-3.468277,5.871417,-4.165597,-5.008210,-6.070047],[-0.013638,7.638378,-0.326264,4.589815,-0.408877,-5.297802,0.048819],[0.486203,4.422301,5.511082,-6.416945,3.729140,-4.631785,5.176679],[-2.806922,5.555917,7.285138,-3.042106,4.306774,-4.697377,-5.358824],[-3.760324,3.928721,-1.375399,-6.960932,-4.688221,3.738131,-2.597694],[8.887951,-8.818513,-6.830242,-4.244559,6.321108,2.741898,-9.581355]],[[-5.967657,-4.852366,-2.940862,-9.007862,-1.747155,7.407141,7.014141],[-7.874545,-2.732250,7.321821,3.689247,1.675952,-0.584712,6.967908],[9.134464,2.455864,-9.309674,-0.903825,2.253221,2.860327,0.169063],[-0.723688,-4.125988,1.007146,-9.275160,4.236323,-3.873289,3.269181],[1.351972,-5.719845,1.107929,-8.478934,4.351330,-5.105758,-7.678063],[1.822832,-2.485021,-1.533039,-0.609618,-9.556950,4.105508,6.237399],[-4.379427,-5.627526,1.552445,-2.333149,-9.950505,-0.971773,2.797644],[-0.051749,4.046014,4.389089,2.335939,-1.262269,4.836610,-7.446551],[-4.556552,-6.424813,-4.364371,3.813831,8.608315,-5.859939,-6.101833],[-9.800882,-3.404747,5.612935,-1.627037,8.365818,8.368853,3.901096],[-1.807130,2.449870,5.494878,7.978693,-0.886879,9.232020,-4.406371],[0.107629,9.398803,-8.381753,-1.961680,1.457436,9.094409,-0.201090],[-0.516131,6.507474,9.665856,0.019026,2.360447,-2.607021,2.165103],[0.133422,-9.820097,9.979230,-0.383097,5.729447,4.327717,5.457280],[2.279609,8.570146,-5.463667,4.607055,0.341168,-6.269048,7.516912],[-7.676474,9.924747,5.826429,-9.339831,1.083760,-7.780502,6.336254]]], dtype='float64')
module1.set_input('var_321', input_321)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_282, input_321, )
res3 = intrp3.evaluate()(input_282, input_321, )
res4 = intrp4.evaluate()(input_282, input_321, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
module5.set_input('var_282', input_282)
module5.set_input('var_321', input_321)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_282, input_321, )
res7 = intrp7.evaluate()(input_282, input_321, )
res8 = intrp8.evaluate()(input_282, input_321, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
module9.set_input('var_282', input_282)
module9.set_input('var_321', input_321)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_282, input_321, )
res11 = intrp11.evaluate()(input_282, input_321, )
res12 = intrp12.evaluate()(input_282, input_321, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
module13.set_input('var_282', input_282)
module13.set_input('var_321', input_321)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_282, input_321, )
res15 = intrp15.evaluate()(input_282, input_321, )
res16 = intrp16.evaluate()(input_282, input_321, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
module17.set_input('var_282', input_282)
module17.set_input('var_321', input_321)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_282, input_321, )
res19 = intrp19.evaluate()(input_282, input_321, )
res20 = intrp20.evaluate()(input_282, input_321, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
module21.set_input('var_282', input_282)
module21.set_input('var_321', input_321)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_282, input_321, )
res23 = intrp23.evaluate()(input_282, input_321, )
res24 = intrp24.evaluate()(input_282, input_321, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()

'''57: TVMFuncCall
56: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
55: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
54: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
53: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
52: tvm::transform::Pass::operator()(tvm::IRModule) const
51: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
50: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
49: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
48: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
47: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
46: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
45: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
44: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
43: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
42: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
41: _ZN3tvm5relay16MixedModeMutato
40: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
39: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
38: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
37: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
36: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
34: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
32: _ZN3tvm5relay16MixedModeMutato
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
27: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
26: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
25: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
24: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
23: tvm::transform::Pass::operator()(tvm::IRModule) const
22: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
21: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
16: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
15: tvm::relay::TypeInferencer::Infer(tvm::GlobalVar, tvm::relay::Function)
14: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
13: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
12: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
11: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
10: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
9: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::FunctionNode const*)
8: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
7: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
6: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
5: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
4: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
3: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::CallNode const*)
2: tvm::relay::TypeInferencer::GeneralCall(tvm::relay::CallNode const*, tvm::runtime::Array<tvm::Type, void>)
1: _ZN3tvm17DiagnosticContext9EmitFatalERKNS_1
0: tvm::DiagnosticContext::Render()

'''