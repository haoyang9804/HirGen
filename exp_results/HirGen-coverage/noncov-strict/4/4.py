import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (2,))#candidate|0|(2,)|var|float64
var_1 = relay.var("var_1", dtype = "float64", shape = (2,))#candidate|1|(2,)|var|float64
bop_2 = relay.minimum(var_0.astype('float64'), relay.reshape(var_1.astype('float64'), relay.shape_of(var_0))) # shape=(2,)
uop_5 = relay.erf(var_1.astype('float64')) # shape=(2,)
output = relay.Tuple([bop_2,uop_5,])
output2 = relay.Tuple([bop_2,uop_5,])
func_7 = relay.Function([var_0,var_1,], output)
mod['func_7'] = func_7
mod = relay.transform.InferType()(mod)
mutated_mod['func_7'] = func_7
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7_call = mutated_mod.get_global_var('func_7')
var_9 = relay.var("var_9", dtype = "float64", shape = (2,))#candidate|9|(2,)|var|float64
var_10 = relay.var("var_10", dtype = "float64", shape = (2,))#candidate|10|(2,)|var|float64
call_8 = func_7_call(var_9,var_10,)
output = call_8
func_11 = relay.Function([var_9,var_10,], output)
mutated_mod['func_11'] = func_11
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13 = relay.var("var_13", dtype = "float32", shape = (6, 6, 14))#candidate|13|(6, 6, 14)|var|float32
const_14 = relay.const([[[-6.144258,-7.412993,0.430342,0.008827,1.109422,0.904781,-0.429261,-3.480703,-4.081883,-5.277874,0.571403,-4.537837,6.205442,-6.010214],[4.717511,-5.850827,-8.270059,-2.650704,-6.702607,-3.743003,-9.035233,8.043041,3.459664,-7.235310,-4.259837,-8.803774,8.033443,7.426388],[-5.557153,-9.448022,-4.378923,6.559622,-5.085326,-2.590674,-7.287406,-5.491654,-9.670544,5.225584,9.800957,9.813868,5.606463,3.009721],[-3.819913,7.999897,5.013229,9.100353,-7.071721,-9.718496,-2.066998,-2.340959,3.571468,4.747015,-0.252060,2.111822,-4.632901,4.376946],[4.977830,-8.059986,8.285571,-1.771259,-5.709008,-3.749278,-4.889628,0.450350,3.403025,6.883992,-2.787745,-1.928649,-6.351511,-9.031571],[-8.669884,-4.026521,8.279846,-6.200401,-5.657921,3.925895,-8.729877,6.273356,-9.934487,6.803693,-7.948431,-8.282249,2.503385,9.601167]],[[2.244686,9.930491,4.051781,9.891494,-3.351856,-1.693683,-9.046583,5.435773,8.987901,3.145897,2.767692,-2.787792,-0.557860,-0.738473],[3.172790,5.695738,-6.487516,2.830649,-6.164283,-6.313790,-2.867372,3.715756,-4.380636,7.641973,6.150788,2.256236,1.573667,9.781677],[-9.707506,0.625710,9.167643,-3.825858,7.506872,-1.304620,-0.690149,6.791715,5.427866,1.989489,1.206116,7.821057,-2.436263,-9.551094],[-6.525236,3.040586,4.952955,2.368979,1.750405,-5.891676,9.801893,-0.668150,8.799170,-6.298993,-3.012420,-2.153985,-9.720226,-4.262576],[-0.552513,-9.059825,-4.372637,-7.828549,-3.654909,9.763798,2.290203,1.425459,-1.519088,9.099233,9.343543,-1.155503,7.925603,0.666577],[-9.587851,-0.955932,-7.845851,-3.377722,-1.944962,2.362020,-7.481906,-0.481050,-4.156834,-4.368593,2.371342,2.884648,9.696758,-6.179840]],[[-6.647414,-3.574138,-4.294944,-0.265736,4.561704,0.773212,8.191525,-5.311643,1.980302,0.928268,-1.266985,-1.601282,1.192704,-9.708912],[9.719719,-8.017027,4.424445,2.945568,7.983073,-6.870052,-2.456989,2.670921,-1.326699,5.579509,-1.815600,-7.264928,-7.876404,0.981625],[-7.968989,-7.921314,-3.577710,9.610580,7.016176,1.938462,-5.658438,4.882187,-9.462801,-4.164343,-9.306537,-5.617976,0.405298,-4.521339],[-8.139576,3.711706,7.169727,-8.856675,-8.417079,5.521680,-0.058370,7.180598,0.793391,6.776533,1.711002,-5.558695,5.093773,-0.550489],[7.524872,-8.715320,-3.725003,-7.540362,7.179221,-0.269115,2.788963,3.182048,-8.739660,-5.210649,6.338097,4.494381,-1.662925,1.867286],[4.618779,-9.132166,-8.993956,-9.736657,-2.854646,-4.351812,9.861985,-7.664622,9.309235,9.415440,-2.589595,8.210165,8.927724,-0.476740]],[[-2.289820,-7.125404,5.741716,2.790527,6.573285,5.235735,-2.486022,-9.864498,-9.232051,-9.586259,-3.322629,9.674174,-7.958912,0.882474],[-6.758237,5.184463,2.422394,-5.784882,-2.721632,-4.613162,6.357682,9.852162,8.977618,1.389851,-8.435301,9.909157,9.266907,1.700589],[7.851988,-2.447217,-8.720027,0.224635,8.064154,0.759239,4.724882,9.796808,6.264744,-9.759219,-1.939634,-0.118856,-4.591604,-6.595334],[-7.416754,2.467859,-8.251150,2.183482,5.049590,-6.692134,-9.415538,-5.636542,9.104263,-6.157403,-3.285292,8.120382,6.609429,-9.653938],[-6.251683,3.888596,-1.650814,-6.479601,-9.617258,-0.672601,-1.991246,-7.795701,-1.188771,-7.445850,7.379464,-0.466580,-6.926506,-3.392701],[8.873284,4.460489,4.701514,-0.416068,5.303361,-9.726688,0.701335,4.333902,8.322543,-5.197287,-6.152436,9.568937,-5.413128,6.018562]],[[-7.269616,-3.121918,-8.292427,4.642049,-1.375604,-2.549225,-3.846788,-8.067851,7.429514,-4.077721,5.067505,-8.467159,3.630640,8.832818],[0.665255,-5.655592,3.985937,2.203291,-8.296445,3.047607,-9.359751,-3.452971,1.121681,-9.980125,-6.585892,9.567548,-7.449461,1.600364],[-1.261640,5.088035,-0.991967,2.865892,-0.543508,2.742940,2.291250,5.782310,-5.461991,-0.147885,-9.750314,-2.608019,5.336021,8.079564],[4.866807,-2.241493,9.741002,6.262126,2.579723,8.031382,1.466011,9.898677,-9.012527,5.794718,-5.667995,-9.850548,-1.083880,-6.455656],[-7.233310,2.243778,-3.485604,2.348534,5.941900,7.852840,5.530494,-6.618886,-9.432295,5.539596,1.932360,4.434216,6.141959,-5.695390],[4.853396,8.654707,-3.817588,2.419839,-5.894353,3.123648,-2.545679,4.635043,1.947694,-4.569053,6.853801,-1.311983,-0.507972,-6.353370]],[[1.693720,-0.027022,2.295030,3.797472,-4.489897,2.166375,5.699653,8.670213,9.653098,-5.924249,-7.732049,-2.580714,-3.921559,-7.651912],[6.555936,-5.710514,-7.843295,2.252326,9.397254,5.100839,0.170112,-0.871822,3.223564,-0.130957,-4.916333,-3.007022,-3.475069,-8.580283],[7.433795,2.038104,-8.148006,-1.803504,-8.012330,-5.459735,-9.446478,-8.522834,-5.209918,-0.596334,-3.765368,5.898839,7.889410,1.819041],[-7.236125,1.225903,8.757013,-2.019066,-2.750687,-9.019536,-1.220132,-2.400988,-9.004405,0.546975,-7.679279,3.195989,-0.802878,0.036734],[-3.107551,9.352386,1.357288,-1.862944,-4.661149,-1.748421,6.645895,3.837594,6.983606,-8.886140,-0.109411,1.745913,-2.039161,4.800710],[0.831834,-7.873206,-8.350819,-1.817526,-5.006890,-0.539749,-1.751559,-4.885006,4.069952,5.605226,8.392489,-0.165792,5.857086,-5.791495]]], dtype = "float32")#candidate|14|(6, 6, 14)|const|float32
bop_15 = relay.floor_mod(var_13.astype('float32'), relay.reshape(const_14.astype('float32'), relay.shape_of(var_13))) # shape=(6, 6, 14)
uop_18 = relay.log(var_13.astype('float64')) # shape=(6, 6, 14)
output = relay.Tuple([bop_15,uop_18,])
output2 = relay.Tuple([bop_15,uop_18,])
func_20 = relay.Function([var_13,], output)
mod['func_20'] = func_20
mod = relay.transform.InferType()(mod)
var_21 = relay.var("var_21", dtype = "float32", shape = (6, 6, 14))#candidate|21|(6, 6, 14)|var|float32
output = func_20(var_21)
func_22 = relay.Function([var_21], output)
mutated_mod['func_22'] = func_22
mutated_mod = relay.transform.InferType()(mutated_mod)
var_24 = relay.var("var_24", dtype = "float64", shape = (12, 7))#candidate|24|(12, 7)|var|float64
var_25 = relay.var("var_25", dtype = "float64", shape = (12, 7))#candidate|25|(12, 7)|var|float64
bop_26 = relay.floor_mod(var_24.astype('float64'), relay.reshape(var_25.astype('float64'), relay.shape_of(var_24))) # shape=(12, 7)
bop_29 = relay.logical_xor(var_25.astype('int16'), relay.reshape(bop_26.astype('int16'), relay.shape_of(var_25))) # shape=(12, 7)
bop_32 = relay.floor_mod(bop_29.astype('float64'), relay.reshape(var_24.astype('float64'), relay.shape_of(bop_29))) # shape=(12, 7)
var_35 = relay.var("var_35", dtype = "float64", shape = (12, 7))#candidate|35|(12, 7)|var|float64
bop_36 = relay.logical_and(bop_32.astype('bool'), relay.reshape(var_35.astype('bool'), relay.shape_of(bop_32))) # shape=(12, 7)
uop_39 = relay.cosh(var_35.astype('float32')) # shape=(12, 7)
var_41 = relay.var("var_41", dtype = "float32", shape = (12, 7))#candidate|41|(12, 7)|var|float32
bop_42 = relay.left_shift(uop_39.astype('uint32'), relay.reshape(var_41.astype('uint32'), relay.shape_of(uop_39))) # shape=(12, 7)
uop_45 = relay.exp(bop_29.astype('float64')) # shape=(12, 7)
func_7_call = mod.get_global_var('func_7')
func_11_call = mutated_mod.get_global_var('func_11')
var_48 = relay.var("var_48", dtype = "float64", shape = (2,))#candidate|48|(2,)|var|float64
call_47 = relay.TupleGetItem(func_7_call(relay.reshape(var_48.astype('float64'), [2,]), relay.reshape(var_48.astype('float64'), [2,]), ), 1)
call_49 = relay.TupleGetItem(func_11_call(relay.reshape(var_48.astype('float64'), [2,]), relay.reshape(var_48.astype('float64'), [2,]), ), 1)
bop_50 = relay.less_equal(bop_29.astype('bool'), relay.reshape(bop_42.astype('bool'), relay.shape_of(bop_29))) # shape=(12, 7)
func_20_call = mod.get_global_var('func_20')
func_22_call = mutated_mod.get_global_var('func_22')
const_54 = relay.const([3.517339,-1.293579,-5.706810,-6.430958,-0.209144,9.895710,-2.847793,-5.501732,-2.508603,8.869767,-5.724782,7.079254,-9.607577,0.551385,8.306242,5.898958,-5.204128,4.403797,-7.427275,-3.380943,-4.106041,-8.103767,-6.687940,-7.138785,-6.754056,-3.167691,5.609443,2.011185,5.287540,3.795885,7.498806,6.324481,-9.708298,-4.304907,-9.408349,5.031630,2.483733,6.864691,-7.487836,-2.134127,-3.914766,9.973127,-2.451552,3.244008,6.515054,1.059012,9.049611,4.593243,2.321707,5.673765,-2.774398,-9.685405,-5.686792,2.259173,8.833047,3.866721,8.532630,3.122636,9.522661,2.350877,6.883619,7.092127,-9.213122,0.292358,-1.719691,1.077930,2.556871,-6.740894,-9.880868,4.671600,-9.203212,0.080023,4.090811,5.545450,1.623001,-0.531381,6.043292,-3.299866,-2.794351,7.828557,-0.950248,9.440433,0.656465,6.112163,9.889107,3.211725,6.176995,8.648466,-0.553101,6.462166,-3.485139,-3.727357,6.825998,3.660551,-7.517567,-4.387059,5.924961,4.920281,-9.267171,-3.816285,0.478767,1.493169,-0.501863,2.212933,9.193059,9.419328,-3.918555,-1.022011,-9.793563,7.714423,-3.350750,6.614193,9.065732,-4.349409,7.776397,-1.713069,2.808567,6.943530,-3.118806,-3.058495,2.795627,5.444880,8.185405,0.134276,1.190035,7.012655,-8.467120,-1.621617,1.073363,5.142391,0.661934,2.982178,9.094592,9.591510,0.093190,-2.330116,2.793263,6.928256,7.604698,-7.127385,1.149071,-5.786425,-4.821329,-3.464817,-4.078105,-7.408408,7.182590,-9.342105,-3.454590,-3.811594,5.812673,-3.842364,5.900064,5.544538,-0.157580,3.051692,8.622222,9.993866,-4.020728,9.373188,-8.218455,6.142454,2.513961,-9.514702,0.281627,-7.932107,3.586206,2.718625,-1.360885,7.994097,-6.113978,-8.749551,3.734761,7.927016,2.057165,-9.162881,-8.454769,6.829220,4.079772,8.449145,0.317828,0.352648,-8.463439,6.631591,5.911832,4.308494,5.373981,-2.318994,9.112784,4.493604,-3.034167,-9.421245,5.534557,0.514232,-3.597334,5.365633,-0.384282,-8.949685,2.129090,5.192786,4.932689,-7.503557,-1.258828,1.612309,-5.006899,1.929782,-2.634461,1.675827,5.260177,-7.928265,4.679995,8.880232,-2.830485,-0.923883,4.008966,-4.474843,-6.434026,-1.300007,3.193287,-4.979563,-3.512434,1.338459,-1.862320,-2.917590,7.438024,9.667519,-6.165198,-1.044145,-7.622576,-8.933786,-2.854518,-1.105438,1.333912,6.128583,-2.197130,-8.796563,5.971960,2.493964,-8.481866,-6.794875,-5.986477,-1.526799,-2.867536,5.551441,0.244477,1.290261,8.609797,-7.800194,-9.654384,6.320799,1.822082,2.184201,3.383495,-1.601567,-1.200769,7.221291,-1.542706,0.627614,-4.143780,-6.178484,-7.687721,2.906140,3.736375,-8.601638,-1.087353,8.287528,2.204226,-2.555402,9.445537,-9.619265,4.702824,3.765764,8.360899,2.530213,1.934066,6.869365,7.879819,0.500849,-0.798209,-6.187667,-4.018296,-3.885225,-4.310397,-7.532248,-2.264414,3.607454,1.593018,2.490656,9.151160,-0.866354,-1.070326,-7.450761,2.337041,1.007257,6.318953,-8.667498,6.188140,6.244367,6.508610,4.306940,-7.063659,-7.698624,5.647251,-1.218307,-8.845184,-1.390250,-9.446680,-2.350112,-7.616943,3.622233,1.150794,9.556519,-2.766200,-9.158542,5.456090,3.282374,-1.137712,5.592762,-0.798637,-7.407665,-5.828554,3.750661,8.234112,-2.462230,0.570884,3.282139,7.820317,5.241568,6.465167,-5.129538,-1.344552,-0.647133,3.322994,-1.830537,4.095126,-6.168567,6.924845,-0.149280,1.883726,8.229411,-4.878108,7.570046,9.075418,8.941805,-3.244675,7.522133,-6.294622,5.025973,6.103469,7.240239,-4.216159,3.735504,7.162035,-7.233181,-7.323902,-1.819947,-0.472398,5.974335,-7.692605,-6.883194,-8.481951,1.186150,4.834828,-4.872534,8.607552,7.812863,6.512468,5.915535,-6.550423,8.546736,0.511218,7.136891,7.792310,-7.417767,0.788465,-8.460266,-5.847230,-1.371727,-5.727875,3.229352,-2.375314,5.356479,3.109630,2.152012,-1.500114,-1.348661,-7.273761,5.737903,-7.550036,2.851750,-5.092410,0.796498,-5.603464,-3.778830,-8.604458,-6.874188,-4.639194,-1.037857,-2.597591,8.165711,-7.730688,8.235414,9.417086,-3.709636,-8.257788,8.304696,5.742541,1.106894,9.878586,-6.091305,1.953487,-5.074941,-5.327625,2.068798,-0.707328,8.769849,6.160085,1.807095,2.565499,-8.844697,-4.684864,-9.143517,3.775774,2.563067,5.165624,-5.070640,-0.122611,-9.400407,-4.487256,9.748645,-3.625505,7.958119,7.891619,-5.179590,4.239627,-7.947714,6.119728,0.686163,9.376546,1.836973,5.404431,1.098953,-7.482236,-0.818825,-0.962825,-2.358127,8.009245,-7.585822,-5.283193,8.742831,5.625776,7.756344,9.410370,3.908423,9.659041,3.936899,2.270072,-7.184904,8.280284,-6.089044,1.655692,-9.453579,-3.397907,9.360265,-5.876220,-3.972791,3.685278,-5.682245,6.502612,6.759581,-3.156028,9.280264,0.433729,1.416615,-2.470976,-6.937072,-2.530094,-0.272339,7.705197,-9.590534,2.941378,-5.179148,-3.528896,8.805084,-5.658753,1.323814,4.735782,-1.054396,-3.013291,1.768477,0.051179,-0.439195,9.684982,0.446478,1.567046,-2.011720,-5.881391,4.676870,4.960207,-6.020404,6.500650,-9.792724,-1.761280,4.557282], dtype = "float32")#candidate|54|(504,)|const|float32
call_53 = relay.TupleGetItem(func_20_call(relay.reshape(const_54.astype('float32'), [6, 6, 14])), 1)
call_55 = relay.TupleGetItem(func_22_call(relay.reshape(const_54.astype('float32'), [6, 6, 14])), 1)
uop_56 = relay.acos(call_53.astype('float32')) # shape=(6, 6, 14)
uop_58 = relay.acos(call_55.astype('float32')) # shape=(6, 6, 14)
const_59 = relay.const([[-5.912214,-4.207254,-2.641675,1.732647,-1.397279,-7.574923,-6.470700],[8.597722,-0.219441,-7.064411,5.286456,6.266159,2.342571,2.021522],[0.700995,8.783331,6.309813,-1.638510,-4.496998,-6.863741,-0.869854],[2.779361,-5.571099,3.502698,-5.941504,-3.286317,5.861192,-4.377061],[-4.507355,-9.647679,3.611488,1.760219,-7.840610,-3.093259,5.118236],[4.729452,2.320185,-2.153411,1.110709,1.058691,4.588221,-3.081306],[1.609621,-9.514273,-8.935501,-8.209244,-2.840492,1.451349,7.914833],[4.344217,-3.950150,-0.068452,-5.469878,6.863612,-4.119105,3.020574],[-9.743789,-1.096102,-4.824933,7.850280,-6.948357,-8.567806,3.519222],[4.545084,0.255238,-5.456667,6.582017,-1.339893,8.965796,3.645706],[-1.256004,-0.533594,-8.482313,-0.588097,7.735620,-3.410376,7.399377],[-6.337308,-1.458097,-3.268424,-4.903617,5.321971,5.550156,2.917356]], dtype = "float64")#candidate|59|(12, 7)|const|float64
bop_60 = relay.greater_equal(var_35.astype('bool'), relay.reshape(const_59.astype('bool'), relay.shape_of(var_35))) # shape=(12, 7)
uop_63 = relay.tan(uop_45.astype('float64')) # shape=(12, 7)
bop_65 = relay.multiply(uop_39.astype('int64'), relay.reshape(bop_60.astype('int64'), relay.shape_of(uop_39))) # shape=(12, 7)
bop_68 = relay.equal(uop_45.astype('bool'), relay.reshape(bop_65.astype('bool'), relay.shape_of(uop_45))) # shape=(12, 7)
func_7_call = mod.get_global_var('func_7')
func_11_call = mutated_mod.get_global_var('func_11')
call_71 = relay.TupleGetItem(func_7_call(relay.reshape(var_48.astype('float64'), [2,]), relay.reshape(call_47.astype('float64'), [2,]), ), 1)
call_72 = relay.TupleGetItem(func_11_call(relay.reshape(var_48.astype('float64'), [2,]), relay.reshape(call_47.astype('float64'), [2,]), ), 1)
func_20_call = mod.get_global_var('func_20')
func_22_call = mutated_mod.get_global_var('func_22')
call_73 = relay.TupleGetItem(func_20_call(relay.reshape(const_54.astype('float32'), [6, 6, 14])), 0)
call_74 = relay.TupleGetItem(func_22_call(relay.reshape(const_54.astype('float32'), [6, 6, 14])), 0)
uop_75 = relay.sinh(const_54.astype('float32')) # shape=(504,)
uop_77 = relay.asin(uop_63.astype('float64')) # shape=(12, 7)
func_20_call = mod.get_global_var('func_20')
func_22_call = mutated_mod.get_global_var('func_22')
call_79 = relay.TupleGetItem(func_20_call(relay.reshape(call_73.astype('float32'), [6, 6, 14])), 0)
call_80 = relay.TupleGetItem(func_22_call(relay.reshape(call_73.astype('float32'), [6, 6, 14])), 0)
func_7_call = mod.get_global_var('func_7')
func_11_call = mutated_mod.get_global_var('func_11')
call_81 = relay.TupleGetItem(func_7_call(relay.reshape(call_71.astype('float64'), [2,]), relay.reshape(call_47.astype('float64'), [2,]), ), 0)
call_82 = relay.TupleGetItem(func_11_call(relay.reshape(call_71.astype('float64'), [2,]), relay.reshape(call_47.astype('float64'), [2,]), ), 0)
var_83 = relay.var("var_83", dtype = "float64", shape = (12, 7))#candidate|83|(12, 7)|var|float64
bop_84 = relay.bitwise_or(uop_63.astype('int16'), relay.reshape(var_83.astype('int16'), relay.shape_of(uop_63))) # shape=(12, 7)
uop_87 = relay.cos(uop_77.astype('float64')) # shape=(12, 7)
uop_89 = relay.sigmoid(uop_77.astype('float64')) # shape=(12, 7)
uop_91 = relay.sinh(bop_84.astype('float64')) # shape=(12, 7)
uop_93 = relay.cosh(var_41.astype('float64')) # shape=(12, 7)
var_95 = relay.var("var_95", dtype = "float64", shape = (12, 7))#candidate|95|(12, 7)|var|float64
bop_96 = relay.subtract(uop_63.astype('uint64'), relay.reshape(var_95.astype('uint64'), relay.shape_of(uop_63))) # shape=(12, 7)
uop_99 = relay.acosh(uop_63.astype('float32')) # shape=(12, 7)
var_101 = relay.var("var_101", dtype = "float64", shape = (12, 7))#candidate|101|(12, 7)|var|float64
bop_102 = relay.add(uop_89.astype('int16'), relay.reshape(var_101.astype('int16'), relay.shape_of(uop_89))) # shape=(12, 7)
uop_105 = relay.log2(uop_89.astype('float32')) # shape=(12, 7)
uop_107 = relay.atanh(uop_105.astype('float64')) # shape=(12, 7)
uop_109 = relay.log10(uop_105.astype('float64')) # shape=(12, 7)
output = relay.Tuple([bop_36,call_47,var_48,bop_50,uop_56,bop_68,call_71,call_73,uop_75,call_79,call_81,uop_87,uop_91,uop_93,bop_96,uop_99,bop_102,uop_107,uop_109,])
output2 = relay.Tuple([bop_36,call_49,var_48,bop_50,uop_58,bop_68,call_72,call_74,uop_75,call_80,call_82,uop_87,uop_91,uop_93,bop_96,uop_99,bop_102,uop_107,uop_109,])
func_111 = relay.Function([var_24,var_25,var_35,var_41,var_48,var_83,var_95,var_101,], output)
mod['func_111'] = func_111
mod = relay.transform.InferType()(mod)
mutated_mod['func_111'] = func_111
mutated_mod = relay.transform.InferType()(mutated_mod)
func_111_call = mutated_mod.get_global_var('func_111')
var_113 = relay.var("var_113", dtype = "float64", shape = (12, 7))#candidate|113|(12, 7)|var|float64
var_114 = relay.var("var_114", dtype = "float64", shape = (12, 7))#candidate|114|(12, 7)|var|float64
var_115 = relay.var("var_115", dtype = "float64", shape = (12, 7))#candidate|115|(12, 7)|var|float64
var_116 = relay.var("var_116", dtype = "float32", shape = (12, 7))#candidate|116|(12, 7)|var|float32
var_117 = relay.var("var_117", dtype = "float64", shape = (2,))#candidate|117|(2,)|var|float64
var_118 = relay.var("var_118", dtype = "float64", shape = (12, 7))#candidate|118|(12, 7)|var|float64
var_119 = relay.var("var_119", dtype = "float64", shape = (12, 7))#candidate|119|(12, 7)|var|float64
var_120 = relay.var("var_120", dtype = "float64", shape = (12, 7))#candidate|120|(12, 7)|var|float64
call_112 = func_111_call(var_113,var_114,var_115,var_116,var_117,var_118,var_119,var_120,)
output = call_112
func_121 = relay.Function([var_113,var_114,var_115,var_116,var_117,var_118,var_119,var_120,], output)
mutated_mod['func_121'] = func_121
mutated_mod = relay.transform.InferType()(mutated_mod)
var_123 = relay.var("var_123", dtype = "float64", shape = (1, 12, 1))#candidate|123|(1, 12, 1)|var|float64
uop_124 = relay.asinh(var_123.astype('float64')) # shape=(1, 12, 1)
const_126 = relay.const([[[-2.425670,1.827472,-8.018618,7.987875,4.139699,7.268102,7.344782,-8.435313,6.056610,-3.444055,-4.981700,-1.777323,-5.465201,9.754651],[-3.169627,-4.783452,9.245706,4.479528,-6.622682,7.730817,6.972092,5.106687,-3.681798,-6.540796,-6.302063,-5.698443,3.783513,7.890607],[9.529864,-3.357052,9.061447,1.976015,-3.698931,-5.704623,5.615925,7.486228,5.664061,5.147571,-6.385638,4.649653,-9.459767,-0.776186],[-3.675640,8.266118,-0.598664,0.281175,-2.257475,0.003107,2.062192,-7.745826,9.715339,4.264811,-8.172233,-7.944589,8.223087,2.768758],[6.635579,9.107653,4.086793,-9.880145,-5.744815,4.879466,-5.301188,-3.856289,0.188380,-1.436020,-7.410311,4.344368,-1.715111,8.640005],[6.560196,5.267410,-5.737896,8.929320,-7.765237,-6.800295,1.273078,9.699127,-1.163097,-5.172818,-4.677212,-0.243366,-6.775510,-6.737378],[7.767625,-0.073095,-3.268298,1.117240,-9.801786,3.257337,-0.879743,-7.963346,5.946195,9.019529,6.426605,0.835382,-4.875073,-9.514686],[5.473447,4.373794,-5.334347,-3.621390,-0.005000,-3.792165,-0.279330,8.518358,8.566542,-4.584535,1.023067,-7.408589,5.348243,0.594697],[4.687906,6.966753,-7.355307,9.038559,-6.674945,0.143100,6.338440,-7.478132,2.704227,9.343948,0.911026,-6.569322,9.480104,1.345633],[-4.311507,2.174163,-2.284523,4.971818,7.642944,9.072837,-2.935171,-0.041094,-8.837304,3.801334,-3.783497,-3.214775,-1.361107,3.116416],[9.547647,2.671583,0.574819,3.433181,9.104277,-6.545731,1.121302,-7.273085,-0.567901,-9.892848,7.545812,5.885923,-1.708199,4.020817],[-6.225356,-6.343594,3.948588,2.291790,-5.876139,-1.820983,2.892404,0.703472,1.341404,-5.467591,-5.125231,-0.291829,-4.695323,-6.617011]],[[-0.150781,-6.552325,-0.720642,-1.771230,-3.089390,-4.183413,6.241300,-6.867002,4.227830,3.805843,3.455834,-1.354473,-2.206261,-3.378914],[-8.469631,8.909149,-1.548508,6.977381,6.802559,9.703315,-4.142138,-2.874658,-0.921513,-6.497755,-3.631373,-9.817572,-5.274533,-6.422291],[-7.560128,8.510881,1.933114,4.895925,-8.191927,-4.561204,-8.206315,5.647880,1.158218,-6.968785,-8.925235,7.587645,3.868948,4.877015],[-2.408211,-1.371174,-0.012113,-9.345509,9.047195,8.435360,-3.387146,1.366740,3.247307,5.657568,-6.312264,1.305464,6.331694,-3.455521],[-4.205339,-2.580335,0.240366,9.153527,-4.719412,8.841174,9.637429,-9.515109,-3.324448,3.369543,-3.895432,-0.360397,-5.743569,-7.400821],[-1.455668,-7.523892,-6.299326,2.259471,-3.589247,3.682581,-4.896824,-4.425521,7.869974,-9.698625,-4.252973,-8.694091,-3.210565,6.868350],[-1.293975,-3.316511,-3.840134,2.732978,6.945986,-5.565069,-3.145136,3.671458,-0.966580,-6.824829,-6.047535,7.976105,-5.379944,8.557653],[-5.270326,-8.074200,-3.748388,6.448032,2.453531,4.885421,-2.698844,-7.441470,7.199201,6.204966,3.934852,-7.448116,-0.666215,-1.185331],[3.178751,-4.044245,3.987392,-0.121183,1.023968,-2.172740,-9.195480,-6.309378,-3.456968,5.948631,-2.500544,6.605243,9.811762,0.889578],[-2.489721,-1.314232,4.773430,8.183008,0.087767,9.182190,-4.327242,-0.881693,3.132629,3.406731,5.049511,-7.694665,3.133991,-5.787339],[3.518337,5.780038,7.054475,6.892528,-6.360507,2.673121,-0.974575,-7.053361,0.184634,5.206224,5.351961,-6.336680,-6.600245,-3.729155],[-9.456995,-7.019234,-1.674154,1.126582,4.053239,9.462650,-4.935907,-5.208499,4.141463,6.855050,9.201299,5.871968,4.417369,6.305338]],[[-5.179958,3.507859,-3.646978,-3.729803,3.549862,5.347444,-4.115744,-7.752177,8.011946,4.233755,-7.888433,7.779316,-2.365757,-1.430702],[-3.788713,6.955927,-3.610247,-8.027802,-2.095341,5.316131,-1.469455,-6.789258,5.013224,0.950117,8.627081,6.687131,8.052343,4.352148],[-0.410634,3.034432,-2.361675,5.492058,-9.031610,4.192825,1.344470,-7.977342,3.190313,-6.129419,-1.012140,-2.510967,0.592826,9.369729],[-6.741646,-3.840063,-6.988004,-1.409136,-7.006080,6.701697,1.733956,0.493578,-2.533313,-2.483468,-0.102449,-3.942308,7.583595,5.525339],[5.326559,2.451283,0.607261,-1.234907,-4.061092,-0.197647,-8.501879,8.264157,6.020069,-4.623111,-1.639013,2.215384,-3.506327,5.644059],[-8.130991,-5.068106,5.440501,-6.419706,1.929478,7.336874,2.814483,-9.179644,1.196995,2.512361,-2.978905,-6.368325,-7.527522,8.275049],[-1.777489,-0.339555,9.899555,-9.047250,7.532992,-0.110812,8.289136,-5.842292,0.673280,-3.352947,-0.575611,7.381431,-9.209521,0.065632],[-7.517686,1.689014,-3.651806,7.996473,-7.166056,-2.488256,-1.756128,-9.794976,-1.012765,-0.031742,8.856109,1.266065,-6.686400,-3.068775],[-8.325399,-6.157085,-8.168162,1.051026,7.381527,3.469866,-0.830319,8.370194,-3.364664,-5.855793,-1.055229,-2.389498,-3.709507,3.576473],[3.087769,3.153481,-1.232414,-6.478897,9.451232,0.941968,-9.488973,-2.594039,-8.290138,-2.647092,2.361409,-9.963877,5.714589,8.580080],[-1.022207,7.702968,-4.618981,0.052667,-0.293925,3.494456,-7.365590,-7.906137,2.565233,9.809787,4.043931,-4.841271,2.436061,-0.314189],[-0.103262,-4.664345,5.303759,-0.537108,-3.059390,-4.333523,5.106615,-8.189380,-4.431379,-0.857379,1.564895,2.579466,5.668417,9.870358]],[[-6.754823,-4.089662,6.132825,6.068490,-3.515731,-2.888285,-9.001240,6.384920,-5.110746,6.772529,-3.735687,2.398682,7.023621,-8.592194],[-2.428952,3.579186,-2.418018,2.437722,-3.311723,-3.946957,-6.790225,3.163726,6.510321,-3.625865,-4.925307,-6.076503,-1.386271,-8.958744],[-9.458399,-4.907904,-8.983956,-3.016582,1.057259,-5.418335,-7.937814,-0.288789,8.586739,8.599505,-1.639359,8.357530,2.647411,-0.407512],[9.004398,-4.230602,9.078161,-7.954001,-5.420912,-5.169626,2.080534,-3.578758,8.626236,-6.506672,-1.675486,3.222183,-8.738777,-0.937975],[-4.014420,0.067700,1.047318,-3.440347,-3.513696,6.047917,6.322880,6.578476,-2.650578,-9.504090,-2.179537,2.978664,5.314292,-7.453736],[9.320933,9.042153,6.066391,1.777977,-0.239937,6.256031,-3.983990,-7.892189,4.852373,-7.392627,5.839992,6.472870,-6.338045,-6.232038],[-0.330871,3.886625,3.336457,9.151414,8.398914,-2.684425,-9.174420,-5.066773,-1.159095,-7.310722,-5.452959,1.452899,-2.210655,-1.046042],[7.507762,-7.169304,5.341810,5.888289,-5.255746,3.084452,1.966326,-4.168677,5.827328,6.535507,5.842275,3.306915,-1.215719,2.055840],[-3.757452,2.434726,-0.962960,8.593980,1.888870,6.974063,8.746384,7.605088,-4.475221,6.923841,8.897543,0.645186,-8.786742,-9.977529],[5.623756,0.546555,5.329410,-2.537430,-4.415594,5.555750,-2.848616,-7.558988,4.631770,2.017342,9.508286,-0.177124,8.398884,0.758506],[-5.188814,-4.397847,9.072387,0.923790,5.020708,-8.807719,5.520746,2.153785,-7.836219,-7.549498,-2.321047,4.974490,-4.823533,-3.390064],[7.713749,2.894015,2.666333,-8.903454,-5.437856,-5.836454,2.818492,8.892349,-6.224748,-2.229171,-3.558194,7.061941,-2.331050,-5.726324]],[[-8.109538,-3.569053,-7.814486,2.133000,-3.851892,-4.835355,-8.956026,-6.775616,-1.184954,-3.876304,-2.126162,5.622264,4.118251,2.125196],[-5.002351,-5.159570,-8.150522,-5.584011,0.934850,5.991160,1.446529,-0.040189,-6.150650,5.344209,-6.835970,9.883433,8.718745,-1.593225],[1.018509,-6.193005,1.977925,-0.860574,-7.747256,5.519796,5.757453,1.254346,-2.737133,-1.984306,-3.168183,3.147080,3.544280,7.523578],[-8.852350,-6.897527,-5.602258,4.091254,1.337511,0.736368,-6.234116,7.290177,3.295757,1.783130,-5.931905,-5.484396,4.976775,-7.145056],[8.382860,5.774591,9.289098,6.657611,5.352391,3.226376,2.035158,-3.908306,0.068361,9.972778,-8.186946,3.189774,-7.624408,6.463335],[2.959303,-2.149217,1.392990,-4.519310,9.728169,-0.970083,-2.010748,-0.087106,6.124014,-1.585769,-6.115129,5.064983,-8.264639,-6.413882],[7.412886,-3.814650,7.843963,8.134572,3.802918,9.362905,8.066727,9.455702,3.021815,9.413923,-4.621569,-4.006824,3.646024,5.188919],[-6.563170,-7.745076,0.355156,-2.986565,-5.839358,8.350248,-0.864299,-2.919758,2.876773,5.991391,0.317038,1.112343,-6.683436,9.396852],[7.449596,5.940771,-4.196379,1.917337,6.455380,-5.178050,4.355777,9.452310,-5.827481,-6.954915,3.991579,-2.219044,-0.233408,-2.803912],[0.818791,1.095081,-1.159644,-0.979330,-4.496258,-6.453152,-9.958131,5.603290,-2.153514,0.814287,4.442933,-2.672062,3.296706,9.597980],[-0.648080,6.838261,5.224310,5.964145,1.743671,-2.546374,6.593501,5.476252,9.065603,-3.522344,8.624737,-4.352481,8.368299,8.321026],[-4.249878,-5.314328,-5.166004,-7.066902,-1.457137,6.080878,-8.818231,-6.326808,-3.514680,5.100109,-0.699260,-1.331713,9.908740,-4.560329]],[[5.118080,0.897852,8.368013,1.591221,6.532597,8.115025,8.467029,-1.610911,2.554614,8.860471,-9.194117,2.025679,-5.692985,7.179330],[6.262816,-7.507502,7.029023,-9.216782,-2.878864,2.324561,7.749811,4.699286,8.439168,-2.075326,-2.613291,8.243109,-9.838146,-8.680505],[-9.308040,-9.378125,4.983667,-1.727245,7.258483,9.930240,-3.684904,5.449247,-5.958418,-2.541146,-7.234752,-2.391880,2.470716,-5.262228],[-5.637277,-9.036837,-2.227739,-3.340693,-8.179629,-3.932803,0.081727,8.456594,-9.236808,-0.121415,5.763795,5.836368,3.304938,2.211209],[9.643673,5.475852,-4.738738,-1.406710,-2.432614,-9.771392,8.665083,-1.042971,4.088535,0.753427,7.327394,-1.605114,-9.976178,-3.994251],[1.579117,-0.153005,7.039647,-6.306905,-9.901410,-1.140816,-6.873959,2.523954,-9.100223,-3.703420,4.966877,1.768578,4.604234,8.438881],[6.467027,-7.886567,9.103337,4.121043,-8.445576,-8.002274,-2.684111,3.178147,-2.192097,8.009214,3.775109,-4.369092,5.053177,6.070997],[3.255462,-1.801483,-8.755618,9.442463,-8.481891,7.506479,-7.209553,8.323658,-3.265297,9.109701,7.004313,6.709709,1.284528,6.210326],[-5.755211,5.727142,5.159901,-4.911394,-6.421028,-8.577210,1.302347,4.060143,3.768372,-7.369415,-1.445585,-1.432445,-9.213074,-1.258445],[0.999020,-1.506876,-4.028750,9.760430,-1.451364,2.275810,2.654829,5.591980,1.808516,4.071408,2.703643,3.684840,4.956373,6.245586],[0.959054,8.032299,2.633637,-2.939553,-8.525356,4.667679,-4.605961,9.275122,-3.508989,-5.918985,-2.370596,2.678610,9.477641,1.414018],[-6.158094,7.630299,-9.181471,3.554003,-5.116646,2.527373,8.138982,5.082834,1.678357,-2.645321,5.187034,-8.505847,-0.735689,5.901923]]], dtype = "float64")#candidate|126|(6, 12, 14)|const|float64
bop_127 = relay.greater(uop_124.astype('bool'), const_126.astype('bool')) # shape=(6, 12, 14)
var_130 = relay.var("var_130", dtype = "float64", shape = (8, 12, 14))#candidate|130|(8, 12, 14)|var|float64
bop_131 = relay.greater(var_123.astype('bool'), var_130.astype('bool')) # shape=(8, 12, 14)
bop_134 = relay.multiply(uop_124.astype('uint32'), bop_131.astype('uint32')) # shape=(8, 12, 14)
uop_137 = relay.log2(bop_131.astype('float32')) # shape=(8, 12, 14)
uop_139 = relay.log10(const_126.astype('float32')) # shape=(6, 12, 14)
uop_141 = relay.log2(var_130.astype('float64')) # shape=(8, 12, 14)
uop_143 = relay.asinh(bop_127.astype('float32')) # shape=(6, 12, 14)
bop_145 = relay.not_equal(uop_124.astype('bool'), uop_137.astype('bool')) # shape=(8, 12, 14)
uop_148 = relay.tan(uop_139.astype('float32')) # shape=(6, 12, 14)
const_150 = relay.const([[[-7.630338,-1.406257,-0.291033,1.049913,-7.765079,-3.205195,7.482785,3.805160,-7.166528,0.991567,4.553360,-3.264608,-1.286134,1.347380],[0.078939,-6.500105,-9.707966,-6.430423,3.283520,-1.536148,7.504129,1.904116,9.941033,-1.048850,-7.242934,5.480057,3.422343,-6.662441],[1.354693,-4.919084,3.202311,-8.777881,6.862624,-9.191494,-9.386693,0.424354,-4.263902,-3.990374,4.471237,0.315919,-7.725066,2.191220],[-8.382413,0.229688,-9.855595,-2.696558,0.899694,0.789844,-7.848842,4.093075,-1.016640,-8.498101,6.278045,3.588707,7.690111,-3.259180],[1.997851,-4.610823,-7.650130,4.377218,8.724834,-4.317678,-9.338558,-9.389037,2.249495,-3.677354,-3.086718,-5.056250,7.477042,-9.996879],[-1.615916,4.983254,9.767091,-7.853586,1.858352,-5.306676,9.036769,8.668174,-3.783828,-1.045962,-9.093219,-5.644289,-9.820006,-0.576669],[-7.719087,-1.407677,-0.755125,-0.017749,2.923507,9.952656,-4.773948,-7.985443,-8.420648,9.966880,3.262492,-9.992201,-5.033796,-2.317533],[-8.313225,0.215910,2.013753,6.120488,0.952526,2.966178,-6.548760,8.275402,-6.093960,9.580201,-1.067354,-5.930004,-3.897104,4.129354],[4.434329,3.971937,-2.907193,-0.070354,7.122646,9.588847,0.636829,0.608428,2.102861,-0.569393,-0.064103,-8.844216,-2.319816,-0.637657],[-9.322632,-9.002422,9.057273,1.385926,-8.502970,-1.995038,1.522029,-9.040974,-4.920039,8.402391,-6.474889,-3.527646,2.676168,3.013728],[4.026254,-0.402319,2.478341,5.561701,6.585244,9.725497,-6.058874,6.332205,0.126123,-1.796435,1.919682,-1.611909,0.818816,2.749250],[9.589117,-1.394345,-1.013007,-7.368346,8.487029,7.232163,-3.142625,-7.498488,-7.443803,9.224077,5.775850,8.638483,9.136603,7.008931]],[[-5.921154,7.505196,0.851487,-7.468045,-3.326158,-8.695162,-5.123670,-7.668102,-3.311713,6.690896,-9.784220,-9.220880,-7.930700,5.510575],[0.575363,-7.843999,1.777533,-9.315656,-8.575800,-7.016662,6.188592,-3.658602,-5.023975,3.211094,-9.448136,5.892626,7.472179,-0.306500],[-0.455600,6.732866,-7.381994,4.941870,9.657990,1.568768,2.061982,-0.026203,-4.946048,-1.041033,-7.024790,7.785749,1.937970,7.207129],[-4.959229,-5.338203,0.032729,1.879541,-6.705049,6.386520,-8.525604,4.043238,9.429151,-1.708169,-2.728403,-9.023171,-2.100921,8.292682],[8.286067,-6.792390,7.118247,-1.310755,-7.121562,-4.601612,-9.190606,-3.509771,-2.481131,-2.301896,-0.199680,5.133079,-1.101852,4.582786],[1.439668,-1.033013,3.466265,9.055367,6.157199,-1.116462,1.299404,-1.218465,-0.667828,-3.831782,-8.924522,-4.029113,6.069006,-1.630350],[-1.590330,2.382233,-6.034047,-4.541657,-1.462453,-1.191761,1.099108,-0.487598,-1.318335,-9.095284,7.119949,1.849829,-8.925154,-1.245068],[-9.887491,4.153248,-8.788216,-6.446231,-9.720766,3.374297,-5.436405,-6.872234,-0.431759,-3.681343,-0.606668,4.917851,6.238863,6.276507],[4.260672,-4.658363,-8.785265,-5.637165,-1.640801,-5.723462,9.955971,7.062018,0.598670,2.167133,-0.729345,-6.303841,-0.437585,5.500300],[2.427807,2.946662,-7.874598,-3.430406,9.909341,-5.468691,2.114232,-3.542643,-5.175334,8.134136,-7.594428,8.206137,-7.981939,8.584856],[8.982349,5.062322,0.947763,5.166457,-1.300107,6.157400,-5.324998,8.086748,-6.079323,-8.074919,5.057009,-2.577010,-6.024393,0.137947],[-4.548619,-7.716322,8.409904,-0.525174,-2.901932,-8.974135,9.890490,1.135583,3.821178,2.013389,-6.825824,-0.410228,8.027641,5.691452]],[[-8.501266,8.743971,5.057836,6.252892,7.788824,-3.084495,3.570490,-6.825748,-1.836640,7.430173,-9.800115,3.769532,-6.956623,-6.341733],[-1.893349,-7.792966,-0.182050,2.709277,5.198691,-6.472173,-7.512012,-5.467188,-1.340037,-2.015547,-9.020978,-8.721360,2.725821,-4.538118],[-6.455722,3.251689,-7.931589,8.756306,0.502017,4.310715,9.150231,4.560850,-4.613679,-8.862488,-1.825227,6.089175,-7.027164,0.880009],[4.460536,3.739503,9.584736,-9.512341,-4.271869,-1.768640,3.116218,-3.629917,-7.708747,-2.912040,-4.987002,3.051788,-1.649483,2.595481],[-1.533654,-1.159626,-8.460196,2.924220,-9.883232,-5.338329,-2.900846,5.914826,-9.026295,-8.253094,6.039561,0.960014,2.506586,9.364679],[7.635903,-0.412614,4.267230,0.958571,3.674870,1.158406,-7.679689,-4.758742,1.509850,-7.490808,-7.455613,-5.440846,-8.483876,5.412746],[-9.913605,1.841958,9.867910,4.377683,-8.403243,7.013464,-8.956428,7.611974,-8.009645,9.009607,0.442506,2.541052,-2.105762,-0.351576],[5.186852,6.896080,-1.667678,2.180041,-1.910099,-5.116000,2.946699,-1.615473,1.161339,-9.360282,-2.842390,8.316872,-5.242304,4.652074],[-2.412057,6.721509,1.149247,4.821283,5.854253,3.556757,7.792284,-8.412397,3.711968,-8.208246,-5.477709,-3.426490,-1.400686,7.584834],[-9.097215,-6.207932,-9.278482,-0.164582,-5.223275,2.256833,-5.343387,7.185259,-9.156935,-8.522604,0.169005,-3.245862,-2.062979,-0.055500],[-0.873752,7.792636,-5.202487,1.270882,6.524059,-4.225762,1.930425,9.921820,-5.951447,-1.314837,-7.837316,8.936093,3.961942,3.049852],[-7.461582,9.034246,5.977713,-0.418161,-4.925201,-2.650602,5.388549,8.504892,-7.939511,2.886329,6.292307,-9.913578,-7.215624,5.661678]],[[0.650649,7.696210,-8.756819,6.791527,7.492062,9.218559,7.557103,3.987698,-9.454016,-4.305500,4.877281,-9.645882,8.438487,-2.809155],[-0.096660,0.968572,0.950304,2.752617,2.739905,2.280426,-2.778265,-6.810140,4.012117,2.798402,-9.723896,-4.426388,9.133695,8.216312],[6.020783,-5.271540,0.120969,-0.006326,7.985930,3.741117,-3.472953,6.795631,2.940446,-1.286473,-6.517337,6.576866,4.792237,-8.565321],[-2.727696,2.314974,-4.953577,8.651504,-2.038144,-1.643946,0.117975,-7.327055,-4.530350,5.369173,-7.612673,-6.774235,3.668902,4.404571],[-1.826241,4.161314,6.102913,-6.856011,-5.053073,-9.160744,9.555338,-6.254241,-3.084859,-2.388258,0.640583,-1.781385,-3.830904,-8.655436],[-8.204283,-6.971192,2.294314,2.786004,8.808458,-9.689609,1.657161,-7.289669,7.966477,-9.260737,6.456934,5.628506,-7.393085,-1.263115],[-3.486089,-9.089982,7.036979,4.399703,-9.063264,9.233945,1.281736,8.893516,-5.718958,6.389811,2.106739,5.351656,5.124099,7.045525],[5.314552,-9.967699,-5.268418,-5.054499,3.575002,-5.445378,8.414870,7.751781,-4.348791,9.584650,-3.682998,-1.707013,-5.140731,8.788239],[-2.086296,5.458151,-8.294593,-1.846548,-0.208628,-1.740186,-0.591956,2.627513,6.435942,-1.373860,-5.372478,-6.766296,1.221086,-4.343034],[8.086308,4.521228,-0.468341,5.239415,-2.063077,1.252751,-9.301603,-1.907215,-4.743331,-9.246731,8.089889,7.500215,8.750243,-8.881274],[6.811700,-4.704953,-9.267400,-4.536524,6.232104,-9.519945,8.544960,-3.337007,4.136758,8.611223,0.761033,9.426918,-8.019269,-1.168302],[3.951665,-8.696912,3.670467,8.017158,-2.263822,-6.851161,1.787680,1.194863,-3.318076,-4.187180,8.525574,7.547279,-5.268855,2.099910]],[[-2.797875,-3.795793,-9.595720,-4.295043,2.782104,-8.383507,0.614114,3.374513,7.700196,-9.557326,7.171885,5.652978,-3.245101,6.996206],[-7.743725,7.843579,-0.621644,-7.728496,8.072894,-8.374223,-0.094941,-8.375887,3.053905,-8.898553,0.027003,-5.264488,7.534641,2.631742],[-2.499581,-9.936506,2.138061,5.964542,1.074204,-1.596760,-7.583393,-6.626661,1.173056,4.363530,-8.107038,8.518856,-9.924294,-4.935331],[-7.146653,1.759139,-6.869016,1.208791,0.065123,1.313761,-0.438619,2.553018,-1.823487,7.787504,9.470627,-3.434046,-8.564800,4.325570],[2.771875,-6.149162,7.206974,2.363488,-1.192797,1.639000,3.277087,-7.174293,-2.634698,7.567209,1.479477,9.213405,4.765952,2.159729],[3.142881,-4.942268,-9.677384,-7.058081,-3.804720,-3.516538,-0.041197,-0.941122,-2.920705,3.665630,1.580909,-4.774753,2.714603,6.758573],[5.723372,-2.099694,8.502666,-2.147665,-0.360733,5.844959,-1.649287,5.478728,2.407603,-1.779174,-0.492770,-9.578511,-5.235232,1.290384],[-7.359494,-7.194475,8.658747,9.794341,0.369239,-8.498387,-1.804441,-1.883761,1.857402,-9.290051,-5.024841,5.770412,-6.126452,-6.896122],[-7.525167,6.200077,-7.693434,-0.851295,-6.894005,-0.256426,9.502368,8.317697,-5.878492,-7.685446,6.930821,-7.495133,-8.291217,9.538500],[0.168365,5.650090,9.754950,7.074637,8.356416,1.976636,0.454532,7.024168,-4.936307,-5.653061,1.079587,8.513552,2.256814,-8.818108],[7.165327,9.757509,1.687352,-0.369856,3.258192,-2.272541,2.411684,-6.640646,6.366494,-1.885087,2.527326,-2.402030,4.266442,3.209335],[9.690077,-9.054640,2.058948,3.563841,8.071953,1.537008,2.756338,5.585512,2.092745,3.702919,4.063473,0.514812,1.814142,9.071836]],[[2.217868,0.422997,-4.931598,2.171949,1.638486,-6.023003,-5.688886,8.878995,9.988110,-9.464506,7.816788,6.010810,8.315510,7.800272],[-2.955136,-2.638756,4.847410,-5.742519,5.866142,-1.567338,2.176684,5.452724,-7.475593,3.720537,7.760917,3.025672,-5.226597,-1.854488],[2.053723,-2.757616,-2.347317,8.622025,-6.295131,-6.331228,1.239518,5.361146,9.841157,-7.372095,0.545446,-7.831212,5.723741,0.359261],[-6.577638,-0.259396,8.536374,-6.612528,0.015611,-3.962901,1.390286,0.189480,9.765546,8.831487,-9.495744,-1.032069,-0.088902,-4.500516],[-0.411392,9.110586,5.324713,-7.446614,-1.690812,9.577596,-7.452332,4.183216,-6.133706,-8.973307,6.786365,-4.997781,8.102667,-2.384069],[7.253486,-5.645628,-8.915540,3.372153,9.536046,2.075491,-2.625101,4.062127,-9.872665,-9.670442,8.856561,-6.535394,2.686289,-8.910959],[5.994668,-7.582768,-3.341085,7.875796,-0.110037,-2.917000,-8.234255,5.234146,-5.975975,-6.216965,6.619097,7.278398,0.296117,-3.828043],[8.165155,-6.458052,7.065890,3.185451,0.630575,-4.361920,9.089494,5.481071,-0.661513,-7.711138,9.952212,0.633466,-3.130837,0.882905],[-8.960303,-6.408081,4.673300,2.551650,8.317484,-3.486630,7.017775,-6.006218,7.238195,-5.902071,-3.673318,3.018621,2.168977,-9.053174],[0.177259,-7.609004,6.528842,8.929846,9.426202,1.906603,-5.514014,2.742036,6.047749,-0.582286,2.116041,-5.745340,-1.930540,6.369890],[6.676497,9.698243,0.692786,-7.087310,-7.285246,7.911914,-3.028813,-3.260004,-2.546547,-0.566471,1.459963,6.453336,-4.979718,-2.164629],[0.501992,-9.098979,2.195221,4.097055,2.482804,-1.659765,-9.654465,5.999032,-9.418221,0.374926,8.561232,-7.441487,-2.785186,4.109079]]], dtype = "float32")#candidate|150|(6, 12, 14)|const|float32
bop_151 = relay.mod(uop_143.astype('float32'), relay.reshape(const_150.astype('float32'), relay.shape_of(uop_143))) # shape=(6, 12, 14)
uop_154 = relay.erf(bop_131.astype('float64')) # shape=(8, 12, 14)
bop_156 = relay.logical_xor(bop_151.astype('uint64'), uop_124.astype('uint64')) # shape=(6, 12, 14)
output = relay.Tuple([bop_134,uop_141,bop_145,uop_148,uop_154,bop_156,])
output2 = relay.Tuple([bop_134,uop_141,bop_145,uop_148,uop_154,bop_156,])
func_159 = relay.Function([var_123,var_130,], output)
mod['func_159'] = func_159
mod = relay.transform.InferType()(mod)
mutated_mod['func_159'] = func_159
mutated_mod = relay.transform.InferType()(mutated_mod)
func_159_call = mutated_mod.get_global_var('func_159')
var_161 = relay.var("var_161", dtype = "float64", shape = (1, 12, 1))#candidate|161|(1, 12, 1)|var|float64
var_162 = relay.var("var_162", dtype = "float64", shape = (8, 12, 14))#candidate|162|(8, 12, 14)|var|float64
call_160 = func_159_call(var_161,var_162,)
output = call_160
func_163 = relay.Function([var_161,var_162,], output)
mutated_mod['func_163'] = func_163
mutated_mod = relay.transform.InferType()(mutated_mod)
var_165 = relay.var("var_165", dtype = "float32", shape = ())#candidate|165|()|var|float32
uop_166 = relay.sigmoid(var_165.astype('float32')) # shape=()
bop_168 = relay.right_shift(uop_166.astype('int64'), var_165.astype('int64')) # shape=()
uop_171 = relay.cosh(uop_166.astype('float32')) # shape=()
uop_173 = relay.acos(uop_171.astype('float32')) # shape=()
uop_175 = relay.sinh(uop_171.astype('float32')) # shape=()
var_177 = relay.var("var_177", dtype = "float32", shape = ())#candidate|177|()|var|float32
bop_178 = relay.add(uop_175.astype('float32'), var_177.astype('float32')) # shape=()
uop_181 = relay.sinh(uop_171.astype('float64')) # shape=()
bop_183 = relay.logical_xor(uop_171.astype('uint16'), var_165.astype('uint16')) # shape=()
bop_186 = relay.floor_mod(uop_181.astype('float64'), uop_166.astype('float64')) # shape=()
var_189 = relay.var("var_189", dtype = "uint16", shape = (13,))#candidate|189|(13,)|var|uint16
bop_190 = relay.logical_and(bop_183.astype('bool'), var_189.astype('bool')) # shape=(13,)
var_193 = relay.var("var_193", dtype = "float32", shape = (11, 16))#candidate|193|(11, 16)|var|float32
bop_194 = relay.less_equal(uop_166.astype('bool'), var_193.astype('bool')) # shape=(11, 16)
bop_197 = relay.equal(uop_181.astype('bool'), uop_166.astype('bool')) # shape=()
uop_200 = relay.cosh(bop_186.astype('float32')) # shape=()
bop_202 = relay.logical_or(uop_200.astype('bool'), uop_173.astype('bool')) # shape=()
bop_205 = relay.greater_equal(bop_168.astype('bool'), bop_190.astype('bool')) # shape=(13,)
bop_208 = relay.less_equal(uop_181.astype('bool'), bop_194.astype('bool')) # shape=(11, 16)
var_211 = relay.var("var_211", dtype = "bool", shape = ())#candidate|211|()|var|bool
bop_212 = relay.not_equal(bop_202.astype('bool'), var_211.astype('bool')) # shape=()
bop_215 = relay.greater_equal(bop_202.astype('bool'), uop_175.astype('bool')) # shape=()
bop_218 = relay.less(bop_202.astype('bool'), uop_175.astype('bool')) # shape=()
const_221 = relay.const([[True,False,True,True,False,True,False,True,True,True,False,False,True,True,False,False],[False,True,True,False,True,True,True,False,True,True,False,True,True,True,True,False],[True,False,True,False,True,True,True,False,True,True,False,False,False,False,True,True],[False,False,True,True,True,False,True,False,True,True,False,False,False,True,False,True],[False,True,True,True,True,True,False,False,False,False,False,True,True,True,False,True],[True,True,False,True,True,True,True,False,False,True,True,False,True,True,True,True],[True,True,False,False,False,False,False,False,True,False,True,False,False,True,True,True],[False,True,False,True,False,False,False,False,True,True,False,False,False,True,True,True]], dtype = "bool")#candidate|221|(8, 16)|const|bool
bop_222 = relay.right_shift(bop_218.astype('uint32'), const_221.astype('uint32')) # shape=(8, 16)
uop_225 = relay.log2(var_211.astype('float64')) # shape=()
uop_227 = relay.log10(bop_202.astype('float32')) # shape=()
uop_229 = relay.log10(uop_227.astype('float64')) # shape=()
uop_231 = relay.sigmoid(uop_229.astype('float64')) # shape=()
output = relay.Tuple([bop_178,bop_197,bop_205,bop_208,bop_212,bop_215,bop_222,uop_225,uop_231,])
output2 = relay.Tuple([bop_178,bop_197,bop_205,bop_208,bop_212,bop_215,bop_222,uop_225,uop_231,])
func_233 = relay.Function([var_165,var_177,var_189,var_193,var_211,], output)
mod['func_233'] = func_233
mod = relay.transform.InferType()(mod)
mutated_mod['func_233'] = func_233
mutated_mod = relay.transform.InferType()(mutated_mod)
func_233_call = mutated_mod.get_global_var('func_233')
var_235 = relay.var("var_235", dtype = "float32", shape = ())#candidate|235|()|var|float32
var_236 = relay.var("var_236", dtype = "float32", shape = ())#candidate|236|()|var|float32
var_237 = relay.var("var_237", dtype = "uint16", shape = (13,))#candidate|237|(13,)|var|uint16
var_238 = relay.var("var_238", dtype = "float32", shape = (11, 16))#candidate|238|(11, 16)|var|float32
var_239 = relay.var("var_239", dtype = "bool", shape = ())#candidate|239|()|var|bool
call_234 = func_233_call(var_235,var_236,var_237,var_238,var_239,)
output = call_234
func_240 = relay.Function([var_235,var_236,var_237,var_238,var_239,], output)
mutated_mod['func_240'] = func_240
mutated_mod = relay.transform.InferType()(mutated_mod)
var_242 = relay.var("var_242", dtype = "float32", shape = ())#candidate|242|()|var|float32
var_243 = relay.var("var_243", dtype = "float32", shape = (12,))#candidate|243|(12,)|var|float32
bop_244 = relay.not_equal(var_242.astype('bool'), var_243.astype('bool')) # shape=(12,)
bop_247 = relay.logical_or(bop_244.astype('bool'), relay.reshape(var_243.astype('bool'), relay.shape_of(bop_244))) # shape=(12,)
bop_250 = relay.multiply(var_242.astype('uint8'), bop_247.astype('uint8')) # shape=(12,)
uop_253 = relay.rsqrt(bop_250.astype('float32')) # shape=(12,)
output = relay.Tuple([uop_253,])
output2 = relay.Tuple([uop_253,])
func_255 = relay.Function([var_242,var_243,], output)
mod['func_255'] = func_255
mod = relay.transform.InferType()(mod)
mutated_mod['func_255'] = func_255
mutated_mod = relay.transform.InferType()(mutated_mod)
func_255_call = mutated_mod.get_global_var('func_255')
var_257 = relay.var("var_257", dtype = "float32", shape = ())#candidate|257|()|var|float32
var_258 = relay.var("var_258", dtype = "float32", shape = (12,))#candidate|258|(12,)|var|float32
call_256 = func_255_call(var_257,var_258,)
output = call_256
func_259 = relay.Function([var_257,var_258,], output)
mutated_mod['func_259'] = func_259
mutated_mod = relay.transform.InferType()(mutated_mod)
var_261 = relay.var("var_261", dtype = "int32", shape = (1,))#candidate|261|(1,)|var|int32
const_262 = relay.const([-1,9,-8,-6,9,-1,5,1,3,-2,3,1,3,10,-10,-3], dtype = "int32")#candidate|262|(16,)|const|int32
bop_263 = relay.add(var_261.astype('int32'), const_262.astype('int32')) # shape=(16,)
uop_266 = relay.log10(var_261.astype('float64')) # shape=(1,)
output = relay.Tuple([bop_263,uop_266,])
output2 = relay.Tuple([bop_263,uop_266,])
func_268 = relay.Function([var_261,], output)
mod['func_268'] = func_268
mod = relay.transform.InferType()(mod)
var_269 = relay.var("var_269", dtype = "int32", shape = (1,))#candidate|269|(1,)|var|int32
output = func_268(var_269)
func_270 = relay.Function([var_269], output)
mutated_mod['func_270'] = func_270
mutated_mod = relay.transform.InferType()(mutated_mod)
var_272 = relay.var("var_272", dtype = "float32", shape = (8,))#candidate|272|(8,)|var|float32
var_273 = relay.var("var_273", dtype = "float32", shape = (8,))#candidate|273|(8,)|var|float32
bop_274 = relay.subtract(var_272.astype('float32'), relay.reshape(var_273.astype('float32'), relay.shape_of(var_272))) # shape=(8,)
var_277 = relay.var("var_277", dtype = "float32", shape = (8,))#candidate|277|(8,)|var|float32
bop_278 = relay.add(var_272.astype('float32'), relay.reshape(var_277.astype('float32'), relay.shape_of(var_272))) # shape=(8,)
var_281 = relay.var("var_281", dtype = "float32", shape = (8,))#candidate|281|(8,)|var|float32
bop_282 = relay.logical_and(bop_278.astype('bool'), relay.reshape(var_281.astype('bool'), relay.shape_of(bop_278))) # shape=(8,)
var_285 = relay.var("var_285", dtype = "float32", shape = (8,))#candidate|285|(8,)|var|float32
bop_286 = relay.bitwise_and(bop_274.astype('int64'), relay.reshape(var_285.astype('int64'), relay.shape_of(bop_274))) # shape=(8,)
const_289 = relay.const([7.444052,3.017990,-4.804158,-2.987460,-5.484132,0.204246,-0.803310,0.388048], dtype = "float32")#candidate|289|(8,)|const|float32
bop_290 = relay.greater(var_273.astype('bool'), relay.reshape(const_289.astype('bool'), relay.shape_of(var_273))) # shape=(8,)
output = relay.Tuple([bop_282,bop_286,bop_290,])
output2 = relay.Tuple([bop_282,bop_286,bop_290,])
func_293 = relay.Function([var_272,var_273,var_277,var_281,var_285,], output)
mod['func_293'] = func_293
mod = relay.transform.InferType()(mod)
mutated_mod['func_293'] = func_293
mutated_mod = relay.transform.InferType()(mutated_mod)
func_293_call = mutated_mod.get_global_var('func_293')
var_295 = relay.var("var_295", dtype = "float32", shape = (8,))#candidate|295|(8,)|var|float32
var_296 = relay.var("var_296", dtype = "float32", shape = (8,))#candidate|296|(8,)|var|float32
var_297 = relay.var("var_297", dtype = "float32", shape = (8,))#candidate|297|(8,)|var|float32
var_298 = relay.var("var_298", dtype = "float32", shape = (8,))#candidate|298|(8,)|var|float32
var_299 = relay.var("var_299", dtype = "float32", shape = (8,))#candidate|299|(8,)|var|float32
call_294 = func_293_call(var_295,var_296,var_297,var_298,var_299,)
output = call_294
func_300 = relay.Function([var_295,var_296,var_297,var_298,var_299,], output)
mutated_mod['func_300'] = func_300
mutated_mod = relay.transform.InferType()(mutated_mod)
const_302 = relay.const([[[-10,2,8,-8,1,1,7,-1,-8,3,-8,10,1,-4,9],[-3,-10,-8,8,3,7,7,7,-4,-2,1,-6,-1,-4,-7],[10,-3,-6,-1,8,-4,-9,10,8,10,-3,-1,1,-5,8]],[[-9,2,1,2,2,7,4,6,1,-8,-7,10,-9,1,10],[-5,-2,-1,-5,-6,-5,-3,-10,-3,-7,9,-1,2,-4,3],[4,2,-7,8,8,-10,-8,1,4,-8,4,-2,10,4,-7]],[[-5,7,7,-10,7,-9,-10,10,9,-5,4,6,-2,-2,-10],[5,1,3,-5,3,1,-1,-2,-2,6,8,5,-7,-2,-5],[-9,-6,-2,8,-1,1,4,-1,-2,7,-10,-9,-1,-2,-7]],[[-5,-9,7,-1,-1,8,4,-6,10,10,6,-4,-5,-3,-8],[-5,-7,6,-8,-10,1,4,4,10,8,1,10,-10,10,1],[4,-5,-2,6,9,-2,-8,4,6,5,-6,9,2,2,-5]]], dtype = "int32")#candidate|302|(4, 3, 15)|const|int32
var_303 = relay.var("var_303", dtype = "int32", shape = (4, 3, 15))#candidate|303|(4, 3, 15)|var|int32
bop_304 = relay.equal(const_302.astype('bool'), relay.reshape(var_303.astype('bool'), relay.shape_of(const_302))) # shape=(4, 3, 15)
bop_307 = relay.logical_xor(var_303.astype('uint32'), relay.reshape(bop_304.astype('uint32'), relay.shape_of(var_303))) # shape=(4, 3, 15)
uop_310 = relay.log10(var_303.astype('float32')) # shape=(4, 3, 15)
uop_312 = relay.atan(bop_307.astype('float64')) # shape=(4, 3, 15)
uop_314 = relay.acos(uop_310.astype('float64')) # shape=(4, 3, 15)
bop_316 = relay.logical_xor(uop_312.astype('uint32'), relay.reshape(bop_304.astype('uint32'), relay.shape_of(uop_312))) # shape=(4, 3, 15)
bop_319 = relay.bitwise_xor(uop_310.astype('uint64'), relay.reshape(bop_307.astype('uint64'), relay.shape_of(uop_310))) # shape=(4, 3, 15)
uop_322 = relay.sigmoid(var_303.astype('float64')) # shape=(4, 3, 15)
bop_324 = relay.add(uop_314.astype('int16'), relay.reshape(bop_319.astype('int16'), relay.shape_of(uop_314))) # shape=(4, 3, 15)
uop_327 = relay.log2(bop_324.astype('float32')) # shape=(4, 3, 15)
uop_329 = relay.sinh(uop_327.astype('float64')) # shape=(4, 3, 15)
output = relay.Tuple([bop_316,uop_322,uop_329,])
output2 = relay.Tuple([bop_316,uop_322,uop_329,])
func_331 = relay.Function([var_303,], output)
mod['func_331'] = func_331
mod = relay.transform.InferType()(mod)
var_332 = relay.var("var_332", dtype = "int32", shape = (4, 3, 15))#candidate|332|(4, 3, 15)|var|int32
output = func_331(var_332)
func_333 = relay.Function([var_332], output)
mutated_mod['func_333'] = func_333
mutated_mod = relay.transform.InferType()(mutated_mod)
var_335 = relay.var("var_335", dtype = "float32", shape = ())#candidate|335|()|var|float32
uop_336 = relay.sqrt(var_335.astype('float32')) # shape=()
uop_338 = relay.sqrt(uop_336.astype('float64')) # shape=()
uop_340 = relay.sqrt(uop_338.astype('float32')) # shape=()
bop_342 = relay.less_equal(uop_338.astype('bool'), uop_340.astype('bool')) # shape=()
uop_345 = relay.tan(uop_340.astype('float32')) # shape=()
var_347 = relay.var("var_347", dtype = "float32", shape = ())#candidate|347|()|var|float32
bop_348 = relay.floor_divide(uop_340.astype('float32'), var_347.astype('float32')) # shape=()
bop_351 = relay.logical_and(uop_345.astype('bool'), uop_336.astype('bool')) # shape=()
func_233_call = mod.get_global_var('func_233')
func_240_call = mutated_mod.get_global_var('func_240')
var_355 = relay.var("var_355", dtype = "uint16", shape = (13,))#candidate|355|(13,)|var|uint16
var_356 = relay.var("var_356", dtype = "float32", shape = (176,))#candidate|356|(176,)|var|float32
call_354 = relay.TupleGetItem(func_233_call(relay.reshape(bop_348.astype('float32'), []), relay.reshape(uop_338.astype('float32'), []), relay.reshape(var_355.astype('uint16'), [13,]), relay.reshape(var_356.astype('float32'), [11, 16]), relay.reshape(var_347.astype('bool'), []), ), 1)
call_357 = relay.TupleGetItem(func_240_call(relay.reshape(bop_348.astype('float32'), []), relay.reshape(uop_338.astype('float32'), []), relay.reshape(var_355.astype('uint16'), [13,]), relay.reshape(var_356.astype('float32'), [11, 16]), relay.reshape(var_347.astype('bool'), []), ), 1)
uop_358 = relay.log10(bop_351.astype('float32')) # shape=()
uop_360 = relay.sigmoid(uop_358.astype('float32')) # shape=()
func_233_call = mod.get_global_var('func_233')
func_240_call = mutated_mod.get_global_var('func_240')
call_362 = relay.TupleGetItem(func_233_call(relay.reshape(uop_358.astype('float32'), []), relay.reshape(var_347.astype('float32'), []), relay.reshape(var_355.astype('uint16'), [13,]), relay.reshape(var_356.astype('float32'), [11, 16]), relay.reshape(uop_358.astype('bool'), []), ), 5)
call_363 = relay.TupleGetItem(func_240_call(relay.reshape(uop_358.astype('float32'), []), relay.reshape(var_347.astype('float32'), []), relay.reshape(var_355.astype('uint16'), [13,]), relay.reshape(var_356.astype('float32'), [11, 16]), relay.reshape(uop_358.astype('bool'), []), ), 5)
bop_364 = relay.mod(uop_360.astype('float64'), var_347.astype('float64')) # shape=()
bop_367 = relay.maximum(bop_364.astype('uint32'), var_335.astype('uint32')) # shape=()
output = relay.Tuple([bop_342,bop_348,call_354,var_355,var_356,call_362,bop_367,])
output2 = relay.Tuple([bop_342,bop_348,call_357,var_355,var_356,call_363,bop_367,])
F = relay.Function([var_335,var_347,var_355,var_356,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_335,var_347,var_355,var_356,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_335= np.array(4.169347, dtype='float32')
module1.set_input('var_335', input_335)
input_347= np.array(0.138590, dtype='float32')
module1.set_input('var_347', input_347)
input_355= np.array([9,-1,-9,-6,-7,8,10,-10,-8,-2,-5,2,6], dtype='uint16')
module1.set_input('var_355', input_355)
input_356= np.array([8.536458,-8.518487,1.995600,7.937553,-4.922108,9.047383,9.554715,-0.790271,-4.412410,-8.466641,2.758607,0.010848,1.124756,-6.244908,-5.385936,-9.360994,-1.826789,-0.174556,-5.368715,1.379673,0.235308,0.284021,9.181222,5.609592,3.701034,8.476525,-3.152258,-1.851465,9.917405,-8.437905,9.165737,2.074065,4.699041,2.291144,-4.969789,-2.492924,-5.004114,-0.446426,-7.609068,4.741884,1.305204,-8.993265,-9.915421,8.494306,8.201829,9.788455,-7.489208,3.762572,-0.964641,-2.170911,1.839433,5.724051,-9.055461,7.212230,1.859856,-3.241764,7.298839,-8.555316,-3.055297,-3.667701,9.379183,-9.980946,-9.546264,3.937651,-2.739045,3.883497,3.701665,9.711028,8.200049,-7.965715,-4.010742,6.165500,9.613313,9.653719,-0.621736,-5.279539,8.904936,4.599831,-4.483034,6.149614,-1.960755,-0.526847,6.900608,-9.801986,9.919328,2.041230,7.404743,1.436362,-2.083105,-2.967613,-9.969638,5.381994,3.278647,-9.054355,9.148625,0.925921,-4.935271,0.911417,0.176539,-3.620891,-4.150149,-2.379686,6.864224,8.388891,-8.286010,-8.868082,-8.397150,5.151240,-2.191060,5.696209,5.864870,-5.314228,-1.739161,5.315545,7.781737,-0.044632,9.898007,4.546651,3.042063,-7.191493,9.578468,-6.397675,-8.612164,6.806496,1.719129,2.014988,3.272799,4.786507,3.272696,-1.948046,-1.134726,9.400745,3.846112,-9.835179,5.995861,9.744438,1.400901,-7.725238,8.499775,2.079608,-6.244509,2.876689,-9.057382,6.789589,8.329663,-4.518403,7.984744,6.513563,-8.393401,1.300676,-1.135263,-9.913161,-2.259337,-7.455533,4.926341,9.930601,-2.508910,6.045052,7.183915,-2.657240,-0.462861,-8.459428,-9.104359,2.716912,-3.448071,-3.990272,6.231700,-2.828792,0.974289,4.742548,-2.984177,-9.940479,1.475841,5.311508,8.768498,2.181954], dtype='float32')
module1.set_input('var_356', input_356)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_335, input_347, input_355, input_356, )
res3 = intrp3.evaluate()(input_335, input_347, input_355, input_356, )
res4 = intrp4.evaluate()(input_335, input_347, input_355, input_356, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
module5.set_input('var_335', input_335)
module5.set_input('var_347', input_347)
module5.set_input('var_355', input_355)
module5.set_input('var_356', input_356)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_335, input_347, input_355, input_356, )
res7 = intrp7.evaluate()(input_335, input_347, input_355, input_356, )
res8 = intrp8.evaluate()(input_335, input_347, input_355, input_356, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
module9.set_input('var_335', input_335)
module9.set_input('var_347', input_347)
module9.set_input('var_355', input_355)
module9.set_input('var_356', input_356)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_335, input_347, input_355, input_356, )
res11 = intrp11.evaluate()(input_335, input_347, input_355, input_356, )
res12 = intrp12.evaluate()(input_335, input_347, input_355, input_356, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
module13.set_input('var_335', input_335)
module13.set_input('var_347', input_347)
module13.set_input('var_355', input_355)
module13.set_input('var_356', input_356)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_335, input_347, input_355, input_356, )
res15 = intrp15.evaluate()(input_335, input_347, input_355, input_356, )
res16 = intrp16.evaluate()(input_335, input_347, input_355, input_356, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
module17.set_input('var_335', input_335)
module17.set_input('var_347', input_347)
module17.set_input('var_355', input_355)
module17.set_input('var_356', input_356)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_335, input_347, input_355, input_356, )
res19 = intrp19.evaluate()(input_335, input_347, input_355, input_356, )
res20 = intrp20.evaluate()(input_335, input_347, input_355, input_356, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
module21.set_input('var_335', input_335)
module21.set_input('var_347', input_347)
module21.set_input('var_355', input_355)
module21.set_input('var_356', input_356)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_335, input_347, input_355, input_356, )
res23 = intrp23.evaluate()(input_335, input_347, input_355, input_356, )
res24 = intrp24.evaluate()(input_335, input_347, input_355, input_356, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()

'''21: TVMFuncCall
20: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
19: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
18: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
17: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
16: tvm::transform::Pass::operator()(tvm::IRModule) const
15: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
14: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
13: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
12: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
11: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
10: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
9: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
8: tvm::transform::Pass::operator()(tvm::IRModule) const
7: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
6: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::Pass::operator()(tvm::IRModule) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
0: tvm::DiagnosticContext::Render()

'''