import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (11, 4))#candidate|0|(11, 4)|var|float64
uop_1 = relay.erf(var_0.astype('float64')) # shape=(11, 4)
bop_3 = relay.equal(uop_1.astype('bool'), relay.reshape(var_0.astype('bool'), relay.shape_of(uop_1))) # shape=(11, 4)
var_6 = relay.var("var_6", dtype = "bool", shape = (11, 4))#candidate|6|(11, 4)|var|bool
bop_7 = relay.add(bop_3.astype('uint64'), relay.reshape(var_6.astype('uint64'), relay.shape_of(bop_3))) # shape=(11, 4)
uop_10 = relay.log(bop_7.astype('float32')) # shape=(11, 4)
var_12 = relay.var("var_12", dtype = "float64", shape = (11, 4))#candidate|12|(11, 4)|var|float64
bop_13 = relay.floor_mod(var_0.astype('float64'), relay.reshape(var_12.astype('float64'), relay.shape_of(var_0))) # shape=(11, 4)
uop_16 = relay.sin(uop_10.astype('float64')) # shape=(11, 4)
uop_18 = relay.atanh(uop_10.astype('float64')) # shape=(11, 4)
uop_20 = relay.sigmoid(bop_3.astype('float32')) # shape=(11, 4)
uop_22 = relay.tan(uop_16.astype('float64')) # shape=(11, 4)
uop_24 = relay.asin(uop_22.astype('float64')) # shape=(11, 4)
var_26 = relay.var("var_26", dtype = "float64", shape = (11, 4))#candidate|26|(11, 4)|var|float64
bop_27 = relay.bitwise_xor(uop_24.astype('int32'), relay.reshape(var_26.astype('int32'), relay.shape_of(uop_24))) # shape=(11, 4)
uop_30 = relay.cosh(bop_27.astype('float64')) # shape=(11, 4)
uop_32 = relay.sinh(bop_27.astype('float32')) # shape=(11, 4)
bop_34 = relay.mod(uop_32.astype('float64'), relay.reshape(uop_10.astype('float64'), relay.shape_of(uop_32))) # shape=(11, 4)
uop_37 = relay.log(uop_16.astype('float64')) # shape=(11, 4)
bop_39 = relay.greater(uop_24.astype('bool'), relay.reshape(var_6.astype('bool'), relay.shape_of(uop_24))) # shape=(11, 4)
uop_42 = relay.sigmoid(bop_27.astype('float32')) # shape=(11, 4)
bop_44 = relay.divide(uop_37.astype('float32'), relay.reshape(bop_7.astype('float32'), relay.shape_of(uop_37))) # shape=(11, 4)
uop_47 = relay.sinh(bop_27.astype('float64')) # shape=(11, 4)
output = relay.Tuple([bop_13,uop_18,uop_20,uop_30,bop_34,bop_39,uop_42,bop_44,uop_47,])
output2 = relay.Tuple([bop_13,uop_18,uop_20,uop_30,bop_34,bop_39,uop_42,bop_44,uop_47,])
func_49 = relay.Function([var_0,var_6,var_12,var_26,], output)
mod['func_49'] = func_49
mod = relay.transform.InferType()(mod)
mutated_mod['func_49'] = func_49
mutated_mod = relay.transform.InferType()(mutated_mod)
func_49_call = mutated_mod.get_global_var('func_49')
var_51 = relay.var("var_51", dtype = "float64", shape = (11, 4))#candidate|51|(11, 4)|var|float64
var_52 = relay.var("var_52", dtype = "bool", shape = (11, 4))#candidate|52|(11, 4)|var|bool
var_53 = relay.var("var_53", dtype = "float64", shape = (11, 4))#candidate|53|(11, 4)|var|float64
var_54 = relay.var("var_54", dtype = "float64", shape = (11, 4))#candidate|54|(11, 4)|var|float64
call_50 = func_49_call(var_51,var_52,var_53,var_54,)
output = call_50
func_55 = relay.Function([var_51,var_52,var_53,var_54,], output)
mutated_mod['func_55'] = func_55
mutated_mod = relay.transform.InferType()(mutated_mod)
var_57 = relay.var("var_57", dtype = "int32", shape = (4, 13))#candidate|57|(4, 13)|var|int32
const_58 = relay.const([[-5,-4,1,4,-7,-5,-6,-3,5,-9,6,-6,-5],[-3,-5,9,-7,10,-8,-5,9,-3,-5,5,4,8],[-6,-1,3,2,-8,-10,1,-5,4,-6,-2,-10,-5],[8,-3,-9,3,7,-3,-8,9,6,-7,1,-2,6]], dtype = "int32")#candidate|58|(4, 13)|const|int32
bop_59 = relay.bitwise_and(var_57.astype('int32'), relay.reshape(const_58.astype('int32'), relay.shape_of(var_57))) # shape=(4, 13)
bop_62 = relay.less_equal(bop_59.astype('bool'), relay.reshape(const_58.astype('bool'), relay.shape_of(bop_59))) # shape=(4, 13)
var_65 = relay.var("var_65", dtype = "int32", shape = (4, 13))#candidate|65|(4, 13)|var|int32
bop_66 = relay.right_shift(const_58.astype('int8'), relay.reshape(var_65.astype('int8'), relay.shape_of(const_58))) # shape=(4, 13)
bop_69 = relay.logical_and(var_65.astype('bool'), relay.reshape(const_58.astype('bool'), relay.shape_of(var_65))) # shape=(4, 13)
uop_72 = relay.sinh(bop_59.astype('float64')) # shape=(4, 13)
bop_74 = relay.bitwise_or(bop_66.astype('int16'), relay.reshape(uop_72.astype('int16'), relay.shape_of(bop_66))) # shape=(4, 13)
var_77 = relay.var("var_77", dtype = "int16", shape = (4, 13))#candidate|77|(4, 13)|var|int16
bop_78 = relay.mod(bop_74.astype('float32'), relay.reshape(var_77.astype('float32'), relay.shape_of(bop_74))) # shape=(4, 13)
uop_81 = relay.tan(bop_78.astype('float64')) # shape=(4, 13)
bop_83 = relay.not_equal(uop_81.astype('bool'), relay.reshape(var_77.astype('bool'), relay.shape_of(uop_81))) # shape=(4, 13)
bop_86 = relay.maximum(bop_74.astype('uint32'), relay.reshape(bop_78.astype('uint32'), relay.shape_of(bop_74))) # shape=(4, 13)
bop_89 = relay.logical_xor(uop_72.astype('uint16'), relay.reshape(bop_66.astype('uint16'), relay.shape_of(uop_72))) # shape=(4, 13)
bop_92 = relay.bitwise_xor(uop_72.astype('uint16'), relay.reshape(bop_62.astype('uint16'), relay.shape_of(uop_72))) # shape=(4, 13)
uop_95 = relay.cosh(uop_81.astype('float32')) # shape=(4, 13)
var_97 = relay.var("var_97", dtype = "float32", shape = (4, 13))#candidate|97|(4, 13)|var|float32
bop_98 = relay.floor_mod(uop_95.astype('float32'), relay.reshape(var_97.astype('float32'), relay.shape_of(uop_95))) # shape=(4, 13)
var_101 = relay.var("var_101", dtype = "bool", shape = (4, 13))#candidate|101|(4, 13)|var|bool
bop_102 = relay.maximum(bop_83.astype('float64'), relay.reshape(var_101.astype('float64'), relay.shape_of(bop_83))) # shape=(4, 13)
uop_105 = relay.asin(uop_95.astype('float32')) # shape=(4, 13)
uop_107 = relay.sigmoid(bop_98.astype('float32')) # shape=(4, 13)
uop_109 = relay.log2(uop_107.astype('float32')) # shape=(4, 13)
var_111 = relay.var("var_111", dtype = "float64", shape = (4, 13))#candidate|111|(4, 13)|var|float64
bop_112 = relay.logical_or(bop_102.astype('bool'), relay.reshape(var_111.astype('bool'), relay.shape_of(bop_102))) # shape=(4, 13)
var_115 = relay.var("var_115", dtype = "float32", shape = (4, 13))#candidate|115|(4, 13)|var|float32
bop_116 = relay.less_equal(uop_109.astype('bool'), relay.reshape(var_115.astype('bool'), relay.shape_of(uop_109))) # shape=(4, 13)
bop_119 = relay.not_equal(bop_116.astype('bool'), relay.reshape(bop_59.astype('bool'), relay.shape_of(bop_116))) # shape=(4, 13)
bop_122 = relay.add(uop_105.astype('int16'), relay.reshape(bop_89.astype('int16'), relay.shape_of(uop_105))) # shape=(4, 13)
uop_125 = relay.log10(uop_109.astype('float32')) # shape=(4, 13)
output = relay.Tuple([bop_69,bop_86,bop_92,bop_112,bop_119,bop_122,uop_125,])
output2 = relay.Tuple([bop_69,bop_86,bop_92,bop_112,bop_119,bop_122,uop_125,])
func_127 = relay.Function([var_57,var_65,var_77,var_97,var_101,var_111,var_115,], output)
mod['func_127'] = func_127
mod = relay.transform.InferType()(mod)
var_128 = relay.var("var_128", dtype = "int32", shape = (4, 13))#candidate|128|(4, 13)|var|int32
var_129 = relay.var("var_129", dtype = "int32", shape = (4, 13))#candidate|129|(4, 13)|var|int32
var_130 = relay.var("var_130", dtype = "int16", shape = (4, 13))#candidate|130|(4, 13)|var|int16
var_131 = relay.var("var_131", dtype = "float32", shape = (4, 13))#candidate|131|(4, 13)|var|float32
var_132 = relay.var("var_132", dtype = "bool", shape = (4, 13))#candidate|132|(4, 13)|var|bool
var_133 = relay.var("var_133", dtype = "float64", shape = (4, 13))#candidate|133|(4, 13)|var|float64
var_134 = relay.var("var_134", dtype = "float32", shape = (4, 13))#candidate|134|(4, 13)|var|float32
output = func_127(var_128,var_129,var_130,var_131,var_132,var_133,var_134,)
func_135 = relay.Function([var_128,var_129,var_130,var_131,var_132,var_133,var_134,], output)
mutated_mod['func_135'] = func_135
mutated_mod = relay.transform.InferType()(mutated_mod)
const_137 = relay.const([-3.810473], dtype = "float32")#candidate|137|(1,)|const|float32
var_138 = relay.var("var_138", dtype = "float32", shape = (12,))#candidate|138|(12,)|var|float32
bop_139 = relay.greater(const_137.astype('bool'), var_138.astype('bool')) # shape=(12,)
const_142 = relay.const([3.947607,-3.717889,-3.477671,8.812605,-0.302120,-1.001703,2.351319,-5.559889,-2.726236,1.933442,-7.820233,6.428422], dtype = "float32")#candidate|142|(12,)|const|float32
bop_143 = relay.greater(var_138.astype('bool'), relay.reshape(const_142.astype('bool'), relay.shape_of(var_138))) # shape=(12,)
bop_146 = relay.logical_xor(bop_143.astype('uint8'), relay.reshape(bop_139.astype('uint8'), relay.shape_of(bop_143))) # shape=(12,)
bop_149 = relay.logical_or(bop_146.astype('bool'), relay.reshape(var_138.astype('bool'), relay.shape_of(bop_146))) # shape=(12,)
uop_152 = relay.acos(bop_146.astype('float32')) # shape=(12,)
bop_154 = relay.less_equal(bop_143.astype('bool'), relay.reshape(bop_149.astype('bool'), relay.shape_of(bop_143))) # shape=(12,)
uop_157 = relay.asinh(uop_152.astype('float64')) # shape=(12,)
uop_159 = relay.rsqrt(uop_157.astype('float64')) # shape=(12,)
uop_161 = relay.asin(uop_157.astype('float32')) # shape=(12,)
bop_163 = relay.divide(uop_161.astype('float64'), relay.reshape(var_138.astype('float64'), relay.shape_of(uop_161))) # shape=(12,)
bop_166 = relay.greater_equal(uop_157.astype('bool'), relay.reshape(bop_154.astype('bool'), relay.shape_of(uop_157))) # shape=(12,)
bop_169 = relay.logical_or(bop_163.astype('bool'), relay.reshape(var_138.astype('bool'), relay.shape_of(bop_163))) # shape=(12,)
func_49_call = mod.get_global_var('func_49')
func_55_call = mutated_mod.get_global_var('func_55')
const_173 = relay.const([-9.885118,5.757475,-0.644368,9.002538,-6.087198,-7.844760,-8.523090,0.845687,-7.901384,9.626352,3.955912,7.331962,-7.239259,-1.466642,8.198570,6.281714,6.426993,5.376531,4.273521,6.622881,1.079795,8.827906,-5.467978,2.115622,4.068260,8.609276,-1.914501,8.485863,6.811139,-6.571042,-3.114455,1.738663,7.881206,8.506583,1.432579,-2.051878,-5.702422,-1.778759,2.306760,-4.174007,-2.281912,7.397230,-7.137487,2.758620], dtype = "float64")#candidate|173|(44,)|const|float64
call_172 = relay.TupleGetItem(func_49_call(relay.reshape(const_173.astype('float64'), [11, 4]), relay.reshape(const_173.astype('bool'), [11, 4]), relay.reshape(const_173.astype('float64'), [11, 4]), relay.reshape(const_173.astype('float64'), [11, 4]), ), 1)
call_174 = relay.TupleGetItem(func_55_call(relay.reshape(const_173.astype('float64'), [11, 4]), relay.reshape(const_173.astype('bool'), [11, 4]), relay.reshape(const_173.astype('float64'), [11, 4]), relay.reshape(const_173.astype('float64'), [11, 4]), ), 1)
bop_175 = relay.less_equal(uop_152.astype('bool'), relay.reshape(bop_154.astype('bool'), relay.shape_of(uop_152))) # shape=(12,)
func_49_call = mod.get_global_var('func_49')
func_55_call = mutated_mod.get_global_var('func_55')
call_178 = relay.TupleGetItem(func_49_call(relay.reshape(call_172.astype('float64'), [11, 4]), relay.reshape(call_172.astype('bool'), [11, 4]), relay.reshape(call_172.astype('float64'), [11, 4]), relay.reshape(call_172.astype('float64'), [11, 4]), ), 5)
call_179 = relay.TupleGetItem(func_55_call(relay.reshape(call_172.astype('float64'), [11, 4]), relay.reshape(call_172.astype('bool'), [11, 4]), relay.reshape(call_172.astype('float64'), [11, 4]), relay.reshape(call_172.astype('float64'), [11, 4]), ), 5)
uop_180 = relay.sigmoid(bop_166.astype('float64')) # shape=(12,)
bop_182 = relay.less_equal(uop_152.astype('bool'), relay.reshape(uop_161.astype('bool'), relay.shape_of(uop_152))) # shape=(12,)
var_185 = relay.var("var_185", dtype = "float64", shape = (12,))#candidate|185|(12,)|var|float64
bop_186 = relay.equal(uop_157.astype('bool'), relay.reshape(var_185.astype('bool'), relay.shape_of(uop_157))) # shape=(12,)
uop_189 = relay.rsqrt(bop_163.astype('float64')) # shape=(12,)
bop_191 = relay.maximum(uop_189.astype('int64'), relay.reshape(bop_163.astype('int64'), relay.shape_of(uop_189))) # shape=(12,)
bop_194 = relay.bitwise_and(uop_180.astype('int16'), relay.reshape(var_185.astype('int16'), relay.shape_of(uop_180))) # shape=(12,)
uop_197 = relay.exp(bop_163.astype('float32')) # shape=(12,)
output = relay.Tuple([uop_159,bop_169,call_172,const_173,bop_175,call_178,bop_182,bop_186,bop_191,bop_194,uop_197,])
output2 = relay.Tuple([uop_159,bop_169,call_174,const_173,bop_175,call_179,bop_182,bop_186,bop_191,bop_194,uop_197,])
func_199 = relay.Function([var_138,var_185,], output)
mod['func_199'] = func_199
mod = relay.transform.InferType()(mod)
mutated_mod['func_199'] = func_199
mutated_mod = relay.transform.InferType()(mutated_mod)
func_199_call = mutated_mod.get_global_var('func_199')
var_201 = relay.var("var_201", dtype = "float32", shape = (12,))#candidate|201|(12,)|var|float32
var_202 = relay.var("var_202", dtype = "float64", shape = (12,))#candidate|202|(12,)|var|float64
call_200 = func_199_call(var_201,var_202,)
output = call_200
func_203 = relay.Function([var_201,var_202,], output)
mutated_mod['func_203'] = func_203
mutated_mod = relay.transform.InferType()(mutated_mod)
var_205 = relay.var("var_205", dtype = "float64", shape = (11, 3))#candidate|205|(11, 3)|var|float64
uop_206 = relay.rsqrt(var_205.astype('float64')) # shape=(11, 3)
bop_208 = relay.mod(var_205.astype('float32'), relay.reshape(uop_206.astype('float32'), relay.shape_of(var_205))) # shape=(11, 3)
const_211 = relay.const([[-9.683296,4.819480,-4.464823],[-2.334902,-4.544066,-9.992485],[9.751139,-0.501760,3.689463],[2.334880,4.930533,-1.369631],[-1.092818,-1.038472,-4.938808],[8.787154,-4.373654,-3.871822],[8.430849,-8.389305,4.464291],[-5.896432,3.287231,5.610930],[4.642400,0.188540,6.572255],[-5.197564,7.492792,6.740478],[-3.435817,-2.232556,-0.587315]], dtype = "float32")#candidate|211|(11, 3)|const|float32
bop_212 = relay.minimum(bop_208.astype('int64'), relay.reshape(const_211.astype('int64'), relay.shape_of(bop_208))) # shape=(11, 3)
bop_215 = relay.bitwise_or(var_205.astype('int64'), relay.reshape(uop_206.astype('int64'), relay.shape_of(var_205))) # shape=(11, 3)
bop_218 = relay.power(uop_206.astype('float64'), relay.reshape(var_205.astype('float64'), relay.shape_of(uop_206))) # shape=(11, 3)
uop_221 = relay.acosh(const_211.astype('float64')) # shape=(11, 3)
output = relay.Tuple([bop_212,bop_215,bop_218,uop_221,])
output2 = relay.Tuple([bop_212,bop_215,bop_218,uop_221,])
func_223 = relay.Function([var_205,], output)
mod['func_223'] = func_223
mod = relay.transform.InferType()(mod)
mutated_mod['func_223'] = func_223
mutated_mod = relay.transform.InferType()(mutated_mod)
var_224 = relay.var("var_224", dtype = "float64", shape = (11, 3))#candidate|224|(11, 3)|var|float64
func_223_call = mutated_mod.get_global_var('func_223')
call_225 = func_223_call(var_224)
output = call_225
func_226 = relay.Function([var_224], output)
mutated_mod['func_226'] = func_226
mutated_mod = relay.transform.InferType()(mutated_mod)
const_228 = relay.const(-4, dtype = "uint16")#candidate|228|()|const|uint16
var_229 = relay.var("var_229", dtype = "uint16", shape = (1, 8))#candidate|229|(1, 8)|var|uint16
bop_230 = relay.subtract(const_228.astype('uint16'), var_229.astype('uint16')) # shape=(1, 8)
output = bop_230
output2 = bop_230
func_233 = relay.Function([var_229,], output)
mod['func_233'] = func_233
mod = relay.transform.InferType()(mod)
var_234 = relay.var("var_234", dtype = "uint16", shape = (1, 8))#candidate|234|(1, 8)|var|uint16
output = func_233(var_234)
func_235 = relay.Function([var_234], output)
mutated_mod['func_235'] = func_235
mutated_mod = relay.transform.InferType()(mutated_mod)
const_237 = relay.const([[[4.628817,8.236452],[-6.657923,6.472206],[4.123256,6.680016],[-0.559920,7.691558],[6.548668,7.395900],[-1.316534,-5.441756],[8.648220,-9.461113],[-8.361197,7.518748]],[[-2.975143,-3.974871],[-2.413118,-8.902580],[8.558511,7.680868],[-2.486092,-8.954516],[1.664308,-0.222353],[-6.061170,0.272914],[-8.166119,9.006705],[9.590500,-0.132434]],[[-9.194551,-4.512096],[-6.259610,-4.304277],[1.682765,-6.197997],[-5.221442,6.877091],[-9.522535,-7.675346],[-2.281321,-3.030942],[2.941641,6.784667],[-3.501831,2.769765]]], dtype = "float64")#candidate|237|(3, 8, 2)|const|float64
uop_238 = relay.log10(const_237.astype('float64')) # shape=(3, 8, 2)
uop_240 = relay.tan(uop_238.astype('float32')) # shape=(3, 8, 2)
uop_242 = relay.exp(uop_240.astype('float32')) # shape=(3, 8, 2)
bop_244 = relay.mod(uop_238.astype('float64'), relay.reshape(const_237.astype('float64'), relay.shape_of(uop_238))) # shape=(3, 8, 2)
output = relay.Tuple([uop_242,bop_244,])
output2 = relay.Tuple([uop_242,bop_244,])
func_247 = relay.Function([], output)
mod['func_247'] = func_247
mod = relay.transform.InferType()(mod)
mutated_mod['func_247'] = func_247
mutated_mod = relay.transform.InferType()(mutated_mod)
func_247_call = mutated_mod.get_global_var('func_247')
call_248 = func_247_call()
output = call_248
func_249 = relay.Function([], output)
mutated_mod['func_249'] = func_249
mutated_mod = relay.transform.InferType()(mutated_mod)
var_250 = relay.var("var_250", dtype = "float32", shape = (5, 11, 1))#candidate|250|(5, 11, 1)|var|float32
const_251 = relay.const([[[1.171069,0.974406,-6.317152,-1.523658,-0.592029,-6.020164,3.438567,2.285716,2.860698,1.907631,-9.800138,-2.377065,-2.016390],[0.525628,2.277149,2.881317,-8.577760,-7.730617,-5.813235,-9.423180,-2.022082,4.609392,0.055075,1.952946,-9.603267,6.281163],[-8.111241,-0.835654,8.296768,-3.878568,-7.442270,8.043663,-0.206578,2.512672,1.377588,-7.060464,-1.356338,0.692280,-7.164937],[1.695745,-7.862766,-6.893378,-4.184582,6.340243,-2.831513,-6.867461,4.612872,6.049980,-7.199162,3.340069,3.370675,0.058348],[9.815117,9.879705,-7.220346,-1.802678,7.528055,0.881297,-6.427416,7.936399,-0.372615,8.433319,-4.541656,4.341454,-4.381111],[-9.792999,-1.705864,1.742035,-8.568959,-0.240854,9.176166,0.345638,5.101255,-8.020765,7.594919,-3.186796,-4.002146,-8.496121],[3.674825,4.131179,-9.828168,8.779151,0.980541,-2.496457,8.668218,-4.634563,1.014959,9.264128,-8.020606,-9.162554,1.734596],[0.919401,4.073163,-7.944140,-6.010959,-2.062114,4.782747,4.133074,-4.834322,1.563015,-3.393991,4.734138,6.225180,-9.119666],[-4.563313,-7.069845,-0.245503,7.380427,2.985692,-9.385461,8.825237,-7.354713,-6.477363,-8.016496,6.585988,-0.772767,0.476299],[9.233501,-8.708977,0.083602,2.302965,-1.071386,3.103535,3.682185,-9.588008,-1.751725,-7.699737,-1.345777,5.811843,9.029902],[-8.523898,-9.556413,3.118250,9.969709,-4.786021,4.707297,-5.175052,3.509413,4.082530,-7.389683,-7.046175,-1.523162,2.677700]],[[6.263165,5.802573,1.805178,-6.486280,8.021808,5.375268,4.567369,7.966758,1.472767,-7.035481,-7.738234,7.403898,6.246289],[8.334349,-4.621484,7.578313,4.872690,3.608898,-1.052565,9.108656,6.053658,-8.927444,-1.873363,7.225215,3.241261,-2.847989],[-0.538567,-1.936348,6.035532,4.533723,-8.939078,9.444860,3.958306,-4.004014,-3.177081,6.020444,9.198100,-9.780112,-6.819288],[5.098578,5.130902,1.576848,-6.163384,-0.174579,8.235438,7.127877,-6.553111,-5.180587,8.620058,0.660142,-2.469783,-9.713634],[9.189364,6.788504,-3.509892,8.145383,-5.014153,7.086258,6.380415,-0.905225,0.233716,-9.212361,-3.912427,6.438655,-9.645072],[1.239921,-0.380128,-2.517936,-3.497594,6.706991,-6.278685,-8.854213,5.971881,0.621851,4.310870,8.688353,-3.767205,-7.584071],[-9.941634,-8.468776,5.178032,8.829791,6.742036,1.570982,5.623259,2.741995,6.357889,-0.480657,2.071431,7.164844,5.778726],[-3.888525,7.465292,-0.700875,-1.604557,-5.236807,-8.829185,7.551808,0.236780,8.631336,6.483147,-0.839022,6.659259,7.914960],[3.084517,4.376377,-7.402199,-9.992294,7.403679,0.945294,7.451809,4.270177,-8.566681,-3.989804,5.545047,-6.588046,-9.591564],[5.635136,-2.431897,-6.733004,-4.130255,-4.612169,6.912922,-8.969351,-1.861504,4.808843,1.162630,0.552049,0.792197,9.472134],[-4.196147,-2.628542,-2.753870,-3.211856,-3.347825,-2.187505,-6.511920,5.874851,1.025659,-4.193732,-7.349905,-1.991983,-7.279088]],[[2.188163,1.468088,-5.400692,-3.741551,-7.278767,7.300117,9.027186,7.736903,-7.817989,5.408027,-4.698962,8.237874,-2.894551],[-9.963402,5.043378,-0.358863,-3.830132,6.953249,3.547147,7.730674,-6.640470,-7.822098,7.984843,-3.762187,-7.086425,3.135523],[-4.519747,2.846675,-3.394389,2.036015,5.177636,-5.266401,9.268911,-6.063228,-4.590241,-9.537572,-9.391685,-9.368922,4.745131],[6.610236,-2.697520,-3.498477,7.524913,0.103766,6.392304,0.585884,1.843328,-2.280906,1.441308,8.370553,1.891938,5.828872],[9.262345,0.694391,-1.576408,-7.412727,4.259961,7.939222,-8.836610,5.829412,-0.817464,-8.938200,-4.959179,-8.589603,-3.693525],[0.027089,-5.285722,6.568749,1.109240,-4.748706,-7.608451,-4.845919,4.566863,-9.261794,4.742132,9.281433,3.762947,5.501175],[-1.059586,5.969009,9.096738,-8.286907,3.064368,1.197941,-9.748269,-5.920713,-1.243698,3.539364,1.433463,-3.403933,7.326194],[-8.875702,1.691689,-6.982816,0.953137,-7.798981,5.500344,-2.514380,5.323096,8.292114,4.414309,-3.569189,-5.058516,4.210649],[4.215011,-7.635839,7.138752,4.985241,-5.215201,7.299549,-3.851914,3.845505,-8.328284,-1.839609,3.682291,-4.417103,-4.174757],[1.005791,-7.428477,-4.478544,-0.141242,-5.308623,5.765177,-5.008855,7.805806,4.031647,-8.005009,1.476563,3.162455,-4.822815],[9.482767,2.305761,9.572310,0.023467,-5.724557,7.784115,-0.344744,-4.216075,-1.199003,-0.203989,-2.465988,2.864754,-0.232816]],[[-7.636561,-7.403957,-6.959660,5.267282,9.546434,-4.233817,-3.174576,-2.975052,7.417677,6.486163,-0.465131,9.280206,7.151588],[7.666924,-7.842580,-6.432725,4.942429,0.654330,-6.068895,0.211024,1.128929,-4.956721,-0.698932,0.678061,-4.182684,-1.494358],[-7.298008,2.412950,4.777042,-4.555189,-7.440532,-3.234799,-6.543468,8.536032,-9.867673,-3.186743,5.162258,4.631728,-5.848165],[1.247429,0.483443,4.567038,6.755870,-5.277642,2.312312,-6.378702,9.063295,9.039270,-9.801540,-8.618229,-8.015094,-2.394598],[-3.254229,8.406391,0.013427,7.829585,-2.066314,-7.702347,1.136450,2.322411,-1.883885,-6.368331,-8.640243,8.285127,-8.029342],[-7.069210,-1.459983,-3.043183,-0.101494,9.527815,8.304230,4.487599,-1.084905,1.065534,-3.565753,-7.107436,3.547422,-7.527790],[9.306875,-9.052475,7.133825,-3.223794,-4.365519,-6.588396,-5.079502,-2.433931,-5.877407,-2.075533,0.945132,-6.722856,-5.500656],[-1.949272,3.890076,6.249053,-5.793653,9.081862,-4.164639,-4.100591,-9.498260,-1.276481,-4.339372,-1.057405,-0.217293,0.780548],[3.119311,3.697995,4.884546,5.452726,-0.730557,5.182347,-4.276116,-3.460345,-4.691168,6.376003,-3.457260,5.848335,-7.124598],[9.669504,-6.827856,1.146575,5.475526,3.436127,-7.641903,5.817433,-4.016287,-5.627650,6.987361,7.777336,6.720828,3.737829],[-8.649903,-8.747320,-3.619510,0.240616,9.513856,-9.774741,1.408305,4.647176,-8.398764,-8.412040,6.192509,-4.349654,-5.081934]],[[-5.240523,-9.438539,0.486965,-1.315941,-0.555778,6.544663,-8.434506,-4.916852,5.653822,-7.338472,5.645205,-6.283817,0.147885],[-7.071966,-2.341834,-5.576016,-4.576575,-1.212036,7.741231,-0.006462,-7.650259,-4.142471,-4.528171,9.471710,-4.440351,-0.287982],[1.824258,-8.535849,-2.880374,-4.901285,8.454276,8.420215,9.389855,8.900612,-7.613553,-5.820965,9.844319,5.139952,6.339637],[-6.393557,3.760859,-6.821676,8.620538,5.387726,4.686244,-1.622398,-7.610496,9.685966,-1.587866,1.486680,-5.002191,7.066326],[-8.567515,6.603667,6.082445,7.453028,-0.190410,1.116751,-4.443016,7.087005,-3.958210,-3.073306,1.344713,0.218871,-9.939694],[-2.943052,-7.507152,8.835346,5.354780,6.389853,-6.900469,9.139658,-6.405667,-8.087524,7.169975,-9.718475,8.992415,3.346809],[-7.949346,-3.376495,3.851232,1.267272,-1.300435,-0.548931,1.376669,7.666684,-2.926928,-9.905190,8.103706,-0.543426,-6.286500],[4.726906,5.565900,-2.671254,8.098798,3.360612,-7.648453,-3.831993,8.705664,-9.296675,-4.497368,-3.871793,-0.890119,7.246394],[0.509597,-9.963724,9.228016,1.524803,-0.157429,-0.314747,8.723880,-4.802832,5.623577,-8.522917,1.912023,7.662758,-9.809166],[8.090583,9.201277,9.415733,-4.761003,-0.231130,7.443715,-0.982007,-1.562706,3.264819,-9.902421,7.579805,-5.350282,-2.916745],[-3.998400,-6.306080,7.351625,5.148532,-9.745743,4.343336,-9.083699,-5.926494,-9.758724,-0.275256,-7.343626,-2.248490,8.448253]]], dtype = "float32")#candidate|251|(5, 11, 13)|const|float32
bop_252 = relay.power(var_250.astype('float32'), const_251.astype('float32')) # shape=(5, 11, 13)
uop_255 = relay.log10(const_251.astype('float64')) # shape=(5, 11, 13)
uop_257 = relay.sin(uop_255.astype('float32')) # shape=(5, 11, 13)
const_259 = relay.const([[[-3.205572,8.433488,-6.917360,1.986445,-9.803112,-6.934252,7.819740,-7.984502,7.548013,-0.455751,7.292535,-9.056624,9.930313],[-0.223928,7.943532,-6.905762,8.380514,-9.456659,-8.616838,3.768063,9.925894,0.375668,2.183635,2.622129,-4.641185,0.160285],[-6.168632,-6.644125,0.819004,0.167435,-9.324120,-6.684476,-6.714167,5.625491,3.563533,5.643017,-9.226148,2.754831,-2.519663],[6.315231,-5.960759,3.543934,-9.752102,8.668031,-1.078646,-3.180525,-5.095576,-0.537276,7.812459,4.863849,-7.360351,0.695185],[-1.801236,-2.953380,8.003535,9.482051,-6.928092,0.596363,7.373306,-3.124246,9.219022,-0.268209,-6.510206,-5.589304,3.554352],[-9.671865,-0.886767,-7.605898,-9.892688,-6.380757,-1.472190,9.228768,-1.331702,-7.614461,3.657247,6.437513,6.762268,7.949427],[9.197009,-1.735573,7.709313,-1.476617,-1.182334,-2.642479,-7.519918,5.549053,8.854931,8.547194,1.889715,8.312621,1.805073],[1.080273,-5.118154,-5.470796,2.206787,-3.375396,4.152209,-4.935011,-3.204973,-9.976837,5.333642,9.791641,-6.838474,-5.384576],[-6.529360,4.958471,9.212060,5.202833,9.306890,5.188608,-9.716547,0.949452,-0.498429,7.009997,2.290841,2.441845,7.945442],[3.184788,-4.177405,9.840787,0.243747,-1.900360,-4.915163,-9.412009,1.225234,-2.795480,-5.126153,4.903795,6.730363,5.976166],[-7.059900,-4.523545,3.099097,5.157116,1.787693,7.759710,2.725727,0.959296,7.410449,2.043898,8.826892,-6.514200,-6.869064]],[[3.040416,-2.126314,-1.111416,3.898019,9.843066,-8.241098,-6.740988,8.435118,-0.044319,0.669946,-4.610377,7.804886,1.012607],[4.911215,-4.047131,2.330210,-9.449815,-3.393442,-4.168734,6.426083,1.752593,6.879716,0.360755,6.354605,8.588257,-0.186841],[0.358587,-6.839952,-6.341124,-1.572545,8.471930,-5.909376,1.728849,-2.249185,5.383183,9.760805,1.513307,-6.102168,-2.237010],[-3.250707,2.450049,1.988294,-5.414290,4.988976,-4.103588,-0.091751,-2.462862,5.951392,9.082570,8.485012,0.350455,7.349988],[2.367958,5.558737,7.423999,-3.480519,-6.995502,0.278749,8.462082,-0.842902,-1.625295,7.160722,0.107942,4.986461,-3.430063],[5.975176,3.557175,-3.334072,1.172298,-2.228748,1.055061,9.469287,2.628857,-6.048490,2.143272,-8.950879,2.748015,-5.057325],[-0.068860,-6.909809,4.214420,-2.809378,-4.284956,1.532877,-8.244303,6.294919,-7.398994,-4.347506,3.259706,-3.020304,4.914180],[9.444818,-2.079892,5.077929,3.076078,1.350129,-3.125247,2.468449,-2.639714,-2.663701,1.205365,-8.372821,-9.577132,9.649677],[-9.182462,-2.520757,-2.912636,-8.250175,-8.049788,2.647540,8.523567,-1.947863,-0.670551,6.695284,-1.020553,3.517226,6.805261],[-8.015531,-2.622499,5.084372,7.979247,-6.861563,3.212323,9.975741,3.002567,9.718617,2.247317,-8.895243,-0.755838,2.632198],[1.757069,-8.517050,-5.889777,-1.788474,-8.435715,8.771041,0.338642,6.593024,9.504913,-0.280914,5.060352,5.295364,9.172738]],[[-0.138862,7.611615,2.250152,-0.588115,9.564461,-1.213394,-0.141495,-7.460450,-3.757549,1.246531,-1.169293,-0.698702,3.487820],[0.053246,7.806177,-5.847179,-5.327579,9.861269,-4.290917,3.359091,-3.642691,3.355119,-3.567828,5.869330,-1.103447,-7.670555],[3.057426,4.544596,-3.870370,4.061037,-0.620708,9.825511,-9.435563,-7.892837,-1.748466,-2.258639,2.545337,1.536225,4.855739],[-5.363777,-8.646376,6.054268,-0.212755,-2.433503,0.958430,-1.976398,-4.126972,-9.459172,-3.303906,0.569152,-2.298683,6.706593],[-2.321395,4.159873,9.231820,8.935806,-4.985578,7.667748,5.209918,6.371994,-9.966838,-1.978624,6.916766,8.702832,3.019095],[-8.909361,-1.966816,9.109003,3.222098,1.686970,4.086541,-5.388656,5.917750,-2.524786,8.884332,9.960818,8.886055,-2.642684],[-0.855175,-9.965786,1.752232,5.347702,-2.419331,-0.869573,2.239526,1.162937,-1.169741,-1.855961,1.828816,-2.438231,-6.925839],[-0.248526,-1.166609,-3.149622,-5.594651,-2.971353,1.793847,-1.770095,2.959278,1.136951,-3.042736,0.020818,-6.385045,-1.966593],[-0.860007,7.302961,-2.580985,-4.702389,-2.199423,2.405142,0.051087,-2.104502,4.438806,-2.244258,0.638927,5.212252,-8.826985],[-9.981433,-6.828315,3.601145,-8.771982,7.467339,-2.875648,4.122941,-8.613298,-9.963507,-9.203356,-0.934898,5.302394,-1.843651],[1.263959,-6.144306,-5.351452,-8.605314,8.881193,0.193046,-1.587849,-0.904333,-5.435711,-0.789522,-8.415167,-2.266864,4.842131]],[[-8.001532,-4.708021,-9.604080,-8.384141,3.699051,0.634967,3.120059,8.509981,-3.464918,0.932914,5.189297,-9.639155,-3.512546],[-5.786650,-6.026475,3.833182,-8.147062,7.263055,1.407204,8.187862,1.918997,0.169385,8.720447,6.260032,-9.702463,-8.949635],[3.118509,8.108743,7.264022,-2.011373,-3.858515,-8.757682,3.026920,2.195258,8.872628,-2.251309,7.959496,1.524039,-3.140939],[3.354662,7.745552,-7.219061,-4.501128,-4.211549,8.598290,8.903105,-9.085568,-9.364540,-1.894513,0.405320,-5.775701,-3.207844],[4.892767,-4.026060,-6.937597,-9.801260,6.294932,-4.261090,8.250542,0.497555,-7.494053,-6.020264,-8.801105,-2.150023,-2.188542],[-2.223945,8.052692,-4.556351,-4.215190,1.229439,-3.618724,-7.991776,-5.323408,-1.607959,1.861365,5.424509,-3.936211,0.314220],[-3.618773,5.559180,0.331840,-0.673614,-5.747989,9.289475,5.671449,-7.382764,-4.203456,-5.955355,8.592000,-4.425061,-1.567496],[-1.394554,1.508999,-2.129571,-0.192448,-0.006488,9.108840,-3.823870,-9.358445,9.760297,-1.519624,1.554613,-1.417826,-7.817404],[-8.553482,6.113917,-2.562633,-6.317416,0.495276,9.289458,-4.290840,1.459307,-5.645138,-8.794844,1.032704,2.513840,4.632692],[-0.666250,-6.387269,0.276436,-2.125591,6.698808,2.960841,-9.088086,-4.596571,-0.154099,-8.898415,6.915378,0.242050,1.864916],[2.132281,4.078457,5.743081,-9.199520,-0.819074,4.669475,-2.017460,3.140862,-3.736425,-3.384326,3.948692,8.679507,-7.017124]],[[7.421309,-0.965015,-8.656834,4.059472,-2.476402,-5.400082,-9.769511,7.500565,5.769659,-9.388284,6.876340,-7.044412,-7.449971],[-0.590651,3.333924,-9.908738,-3.093775,5.109372,-1.496282,-2.825398,-7.423879,7.196721,3.060611,-7.153606,8.792563,0.542464],[5.715721,-9.208797,-1.758066,9.816305,-6.979328,-1.833682,0.736515,4.907458,-2.886407,-1.089253,-3.382989,5.731905,-2.384719],[-1.969573,-1.759449,-4.947717,-2.599969,8.675463,4.191983,-6.166661,-7.995560,1.364899,9.242006,2.431542,-8.214959,-3.946146],[-2.601182,5.253352,6.421381,-9.341153,1.400654,2.530312,6.389704,-3.255160,7.805557,-1.709280,5.690931,0.314827,2.861690],[-1.915618,0.214352,-6.339246,-2.777899,-4.958011,-8.862685,-0.454257,-8.567118,5.218358,-4.763698,-7.143672,-6.824682,-5.887179],[-4.356654,-5.716403,-6.798240,-6.879117,2.846382,5.345704,-6.022411,3.806813,-8.424795,-7.270803,0.498383,2.275404,-6.864323],[-9.784505,-0.816462,-8.583080,-0.930721,-9.741717,-1.270475,-1.441622,-2.599968,1.269082,-5.589047,3.947822,-3.868651,9.896479],[5.470759,-2.192340,-2.962893,-6.045420,3.159532,-4.582597,-8.572877,-9.223296,1.298600,-7.670305,3.957337,-8.339560,8.967177],[-8.670950,8.677207,4.216918,-1.827792,-9.259425,-0.135067,-1.384182,-4.576026,-6.788950,7.980720,3.822860,5.938612,-5.306279],[5.300540,-6.126923,-1.914581,4.480704,-1.606393,-1.905874,-9.346578,-9.677059,-7.119908,-1.267795,6.596468,1.316540,5.211425]]], dtype = "float32")#candidate|259|(5, 11, 13)|const|float32
bop_260 = relay.bitwise_and(uop_257.astype('uint32'), relay.reshape(const_259.astype('uint32'), relay.shape_of(uop_257))) # shape=(5, 11, 13)
const_263 = relay.const([[[4,-4,4,9,6,8,3,5,-1,-2,7,6,-10],[-9,-3,-2,-10,-1,8,8,5,-6,-8,-10,-5,-5],[-8,6,-9,9,-2,2,9,6,-5,-5,-2,9,-3],[-8,-1,9,-5,1,2,5,3,7,1,1,-10,8],[-7,-10,6,-7,3,8,4,2,-9,3,-4,-4,-6],[3,-1,-7,-6,1,7,8,-5,-7,-6,-7,6,7],[-10,7,7,-3,-10,9,7,9,7,3,-6,2,-9],[-6,-1,-5,5,-9,1,-3,2,7,1,3,-3,-1],[-9,10,-4,-1,1,-9,7,1,10,6,-3,1,-1],[1,3,5,-6,7,3,-6,5,3,3,-9,7,7],[2,-5,4,-7,9,-8,6,5,-7,-4,-4,6,2]],[[-2,-3,-10,-7,-8,-2,-8,6,3,5,-1,-9,-5],[-5,-2,-6,-7,-1,6,1,-9,-8,3,-6,5,-6],[-4,-3,-2,1,5,-8,8,9,-9,7,-3,-6,-8],[5,-6,2,-8,8,-5,-1,8,-3,1,10,2,8],[4,-4,-8,10,9,-3,-8,6,2,2,-7,6,-8],[-7,-6,8,9,-4,10,-3,7,6,9,-7,-9,10],[-5,-5,-3,-3,-5,8,-2,3,8,3,-1,1,10],[10,-6,-7,-5,5,-5,6,3,6,-10,-9,4,-4],[-8,-5,-2,8,-5,2,-7,7,-7,-2,9,-6,-6],[7,-5,-6,-7,-3,-8,-8,8,-1,7,7,-3,6],[8,10,7,5,-2,8,4,8,-6,2,-6,-1,3]],[[1,-8,9,-9,9,10,-1,-4,2,2,-7,8,-2],[-4,-1,10,4,-7,1,4,3,1,4,4,-3,-6],[5,-10,10,8,1,-3,6,-8,7,7,3,5,5],[-3,-6,-9,-5,-5,-2,-10,3,-8,3,-7,5,4],[4,-5,-9,-7,9,5,6,-1,-5,3,-4,8,-6],[-10,9,-9,3,1,-2,8,-8,-5,5,5,9,-9],[-9,-10,3,6,-6,-6,8,-3,-10,10,-4,-2,-3],[10,-5,4,-5,8,6,2,8,-1,5,-5,-6,3],[-1,10,2,-5,8,-10,4,3,-2,4,-2,6,-10],[4,-5,-8,2,10,8,10,5,-9,9,-10,8,1],[-8,9,8,-6,2,9,1,-9,-7,5,8,2,9]],[[-8,-6,6,6,4,1,-6,3,7,7,3,3,-7],[-5,10,-2,8,9,-4,1,10,-7,3,2,-3,3],[6,-5,1,-3,-1,-3,-3,-5,9,4,-8,-6,8],[-10,-8,7,3,8,-10,-6,5,4,-2,-4,4,10],[6,2,3,-5,5,6,3,-1,-2,8,6,5,10],[9,-7,6,3,9,10,-9,-7,-4,-7,-5,-1,8],[4,5,3,8,3,5,-3,-3,8,7,-7,6,-7],[-6,-6,6,-8,-6,7,2,9,7,10,3,4,-1],[-3,8,8,8,6,5,-7,4,-6,-3,2,5,1],[-9,-9,9,-7,-4,9,-2,8,-1,-10,-10,-3,-9],[4,-8,3,-2,-8,-6,8,-2,4,5,1,8,3]],[[8,-2,1,-3,2,6,8,-7,-1,-6,3,6,1],[-2,-9,-6,10,-5,3,2,4,9,4,-6,-10,-7],[-2,9,-2,-4,-7,-9,-8,10,2,7,9,-8,4],[7,8,-7,7,-6,10,-10,-10,-5,-3,2,-8,1],[-8,10,3,-8,-3,1,-2,9,-7,-2,-9,-7,-4],[8,-9,9,8,-9,-9,1,-3,-2,-1,8,1,7],[7,-2,3,2,1,-1,-3,9,9,-3,-4,7,5],[5,5,6,4,-4,-10,-2,2,-1,6,-6,-1,5],[-2,-3,10,-3,-10,9,-8,2,3,-10,-9,-9,-2],[8,-4,1,7,-4,-3,-2,-5,6,3,-1,4,-1],[-2,-6,5,-8,-8,6,-4,-10,7,-10,2,6,-4]]], dtype = "uint32")#candidate|263|(5, 11, 13)|const|uint32
bop_264 = relay.logical_and(bop_260.astype('bool'), relay.reshape(const_263.astype('bool'), relay.shape_of(bop_260))) # shape=(5, 11, 13)
uop_267 = relay.exp(bop_260.astype('float32')) # shape=(5, 11, 13)
func_233_call = mod.get_global_var('func_233')
func_235_call = mutated_mod.get_global_var('func_235')
const_270 = relay.const([-1,9,7,-5,-6,-9,-9,-5], dtype = "uint16")#candidate|270|(8,)|const|uint16
call_269 = func_233_call(relay.reshape(const_270.astype('uint16'), [1, 8]))
call_271 = func_233_call(relay.reshape(const_270.astype('uint16'), [1, 8]))
uop_272 = relay.tan(bop_252.astype('float32')) # shape=(5, 11, 13)
bop_274 = relay.bitwise_or(uop_267.astype('uint16'), relay.reshape(const_259.astype('uint16'), relay.shape_of(uop_267))) # shape=(5, 11, 13)
output = relay.Tuple([bop_264,call_269,const_270,uop_272,bop_274,])
output2 = relay.Tuple([bop_264,call_271,const_270,uop_272,bop_274,])
func_277 = relay.Function([var_250,], output)
mod['func_277'] = func_277
mod = relay.transform.InferType()(mod)
var_278 = relay.var("var_278", dtype = "float32", shape = (5, 11, 1))#candidate|278|(5, 11, 1)|var|float32
output = func_277(var_278)
func_279 = relay.Function([var_278], output)
mutated_mod['func_279'] = func_279
mutated_mod = relay.transform.InferType()(mutated_mod)
var_281 = relay.var("var_281", dtype = "bool", shape = (11,))#candidate|281|(11,)|var|bool
var_282 = relay.var("var_282", dtype = "bool", shape = (11,))#candidate|282|(11,)|var|bool
bop_283 = relay.logical_or(var_281.astype('bool'), relay.reshape(var_282.astype('bool'), relay.shape_of(var_281))) # shape=(11,)
bop_286 = relay.less_equal(bop_283.astype('bool'), relay.reshape(var_282.astype('bool'), relay.shape_of(bop_283))) # shape=(11,)
const_289 = relay.const([True,False,False,False,True,False,True,False,False,False,True], dtype = "bool")#candidate|289|(11,)|const|bool
bop_290 = relay.divide(bop_286.astype('float64'), relay.reshape(const_289.astype('float64'), relay.shape_of(bop_286))) # shape=(11,)
uop_293 = relay.cosh(const_289.astype('float32')) # shape=(11,)
var_295 = relay.var("var_295", dtype = "float32", shape = (11,))#candidate|295|(11,)|var|float32
bop_296 = relay.equal(uop_293.astype('bool'), relay.reshape(var_295.astype('bool'), relay.shape_of(uop_293))) # shape=(11,)
bop_299 = relay.divide(var_295.astype('float32'), relay.reshape(bop_286.astype('float32'), relay.shape_of(var_295))) # shape=(11,)
var_302 = relay.var("var_302", dtype = "bool", shape = (11,))#candidate|302|(11,)|var|bool
bop_303 = relay.minimum(var_281.astype('uint64'), relay.reshape(var_302.astype('uint64'), relay.shape_of(var_281))) # shape=(11,)
var_306 = relay.var("var_306", dtype = "float32", shape = (11,))#candidate|306|(11,)|var|float32
bop_307 = relay.subtract(uop_293.astype('float32'), relay.reshape(var_306.astype('float32'), relay.shape_of(uop_293))) # shape=(11,)
uop_310 = relay.log(bop_299.astype('float64')) # shape=(11,)
bop_312 = relay.floor_divide(uop_293.astype('float32'), relay.reshape(var_306.astype('float32'), relay.shape_of(uop_293))) # shape=(11,)
output = relay.Tuple([bop_290,bop_296,bop_303,bop_307,uop_310,bop_312,])
output2 = relay.Tuple([bop_290,bop_296,bop_303,bop_307,uop_310,bop_312,])
func_315 = relay.Function([var_281,var_282,var_295,var_302,var_306,], output)
mod['func_315'] = func_315
mod = relay.transform.InferType()(mod)
var_316 = relay.var("var_316", dtype = "bool", shape = (11,))#candidate|316|(11,)|var|bool
var_317 = relay.var("var_317", dtype = "bool", shape = (11,))#candidate|317|(11,)|var|bool
var_318 = relay.var("var_318", dtype = "float32", shape = (11,))#candidate|318|(11,)|var|float32
var_319 = relay.var("var_319", dtype = "bool", shape = (11,))#candidate|319|(11,)|var|bool
var_320 = relay.var("var_320", dtype = "float32", shape = (11,))#candidate|320|(11,)|var|float32
output = func_315(var_316,var_317,var_318,var_319,var_320,)
func_321 = relay.Function([var_316,var_317,var_318,var_319,var_320,], output)
mutated_mod['func_321'] = func_321
mutated_mod = relay.transform.InferType()(mutated_mod)
var_323 = relay.var("var_323", dtype = "float32", shape = ())#candidate|323|()|var|float32
const_324 = relay.const(-2.322291, dtype = "float32")#candidate|324|()|const|float32
bop_325 = relay.divide(var_323.astype('float32'), const_324.astype('float32')) # shape=()
uop_328 = relay.log(const_324.astype('float32')) # shape=()
var_330 = relay.var("var_330", dtype = "float32", shape = (8, 8))#candidate|330|(8, 8)|var|float32
bop_331 = relay.logical_xor(const_324.astype('uint64'), var_330.astype('uint64')) # shape=(8, 8)
bop_334 = relay.greater(uop_328.astype('bool'), const_324.astype('bool')) # shape=()
bop_337 = relay.bitwise_or(bop_334.astype('int16'), var_323.astype('int16')) # shape=()
bop_340 = relay.right_shift(bop_334.astype('int64'), var_323.astype('int64')) # shape=()
uop_343 = relay.atan(bop_334.astype('float32')) # shape=()
uop_345 = relay.cos(uop_343.astype('float32')) # shape=()
uop_347 = relay.tan(uop_343.astype('float32')) # shape=()
output = relay.Tuple([bop_325,bop_331,bop_337,bop_340,uop_345,uop_347,])
output2 = relay.Tuple([bop_325,bop_331,bop_337,bop_340,uop_345,uop_347,])
F = relay.Function([var_323,var_330,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_323,var_330,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_323= np.array(-8.228467, dtype='float32')
module1.set_input('var_323', input_323)
input_330= np.array([[-0.572857,-8.244404,9.632456,-6.233151,5.081700,-6.369248,-0.149797,-8.576405],[6.078322,-0.436753,-1.406850,-0.639157,-1.667990,4.511722,-8.386333,-4.239951],[4.069273,-5.598944,9.042829,4.042822,-7.031268,1.389166,-1.403481,7.649418],[-5.182911,-0.866624,-0.039278,-9.522291,-9.534805,-8.796109,-0.305405,6.176889],[8.049710,-6.476169,-2.898523,7.914749,-1.876664,-5.866461,-3.103446,-1.222743],[0.701522,7.086653,4.719564,-0.124173,0.325776,3.614197,4.035975,2.067689],[-2.710835,5.867747,1.469700,4.008604,2.914452,9.336399,8.373446,1.456950],[-3.310988,-1.286087,-1.265486,6.098049,2.819756,1.218849,-9.116678,3.362294]], dtype='float32')
module1.set_input('var_330', input_330)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_323, input_330, )
res3 = intrp3.evaluate()(input_323, input_330, )
res4 = intrp4.evaluate()(input_323, input_330, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
module5.set_input('var_323', input_323)
module5.set_input('var_330', input_330)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_323, input_330, )
res7 = intrp7.evaluate()(input_323, input_330, )
res8 = intrp8.evaluate()(input_323, input_330, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
module9.set_input('var_323', input_323)
module9.set_input('var_330', input_330)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_323, input_330, )
res11 = intrp11.evaluate()(input_323, input_330, )
res12 = intrp12.evaluate()(input_323, input_330, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
module13.set_input('var_323', input_323)
module13.set_input('var_330', input_330)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_323, input_330, )
res15 = intrp15.evaluate()(input_323, input_330, )
res16 = intrp16.evaluate()(input_323, input_330, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
module17.set_input('var_323', input_323)
module17.set_input('var_330', input_330)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_323, input_330, )
res19 = intrp19.evaluate()(input_323, input_330, )
res20 = intrp20.evaluate()(input_323, input_330, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
module21.set_input('var_323', input_323)
module21.set_input('var_330', input_330)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_323, input_330, )
res23 = intrp23.evaluate()(input_323, input_330, )
res24 = intrp24.evaluate()(input_323, input_330, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()

'''18446744073709551614, 18446744073709551611, 18446744073709551614,
18446744073709551614, 18446744073709551614],...

'''