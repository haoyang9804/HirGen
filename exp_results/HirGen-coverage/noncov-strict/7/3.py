import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (10,))#candidate|0|(10,)|var|float32
uop_1 = relay.log2(var_0.astype('float32')) # shape=(10,)
uop_3 = relay.rsqrt(var_0.astype('float32')) # shape=(10,)
bop_5 = relay.not_equal(var_0.astype('bool'), relay.reshape(uop_3.astype('bool'), relay.shape_of(var_0))) # shape=(10,)
bop_8 = relay.greater(uop_3.astype('bool'), relay.reshape(bop_5.astype('bool'), relay.shape_of(uop_3))) # shape=(10,)
uop_11 = relay.rsqrt(var_0.astype('float32')) # shape=(10,)
uop_13 = relay.rsqrt(bop_8.astype('float32')) # shape=(10,)
bop_15 = relay.logical_xor(uop_13.astype('int32'), relay.reshape(uop_11.astype('int32'), relay.shape_of(uop_13))) # shape=(10,)
uop_18 = relay.rsqrt(uop_3.astype('float32')) # shape=(10,)
uop_20 = relay.sigmoid(uop_13.astype('float64')) # shape=(10,)
uop_22 = relay.log(uop_20.astype('float32')) # shape=(10,)
var_24 = relay.var("var_24", dtype = "float64", shape = (10,))#candidate|24|(10,)|var|float64
bop_25 = relay.logical_or(uop_20.astype('bool'), relay.reshape(var_24.astype('bool'), relay.shape_of(uop_20))) # shape=(10,)
var_28 = relay.var("var_28", dtype = "float64", shape = (10,))#candidate|28|(10,)|var|float64
bop_29 = relay.not_equal(uop_20.astype('bool'), relay.reshape(var_28.astype('bool'), relay.shape_of(uop_20))) # shape=(10,)
bop_32 = relay.floor_mod(uop_20.astype('float64'), relay.reshape(var_24.astype('float64'), relay.shape_of(uop_20))) # shape=(10,)
uop_35 = relay.cos(uop_13.astype('float64')) # shape=(10,)
uop_37 = relay.sinh(bop_15.astype('float64')) # shape=(10,)
uop_39 = relay.log10(uop_22.astype('float64')) # shape=(10,)
bop_41 = relay.bitwise_xor(uop_39.astype('uint8'), relay.reshape(var_24.astype('uint8'), relay.shape_of(uop_39))) # shape=(10,)
uop_44 = relay.tan(uop_22.astype('float64')) # shape=(10,)
bop_46 = relay.less(bop_29.astype('bool'), relay.reshape(uop_13.astype('bool'), relay.shape_of(bop_29))) # shape=(10,)
output = relay.Tuple([uop_1,uop_18,bop_25,bop_32,uop_35,uop_37,bop_41,uop_44,bop_46,])
output2 = relay.Tuple([uop_1,uop_18,bop_25,bop_32,uop_35,uop_37,bop_41,uop_44,bop_46,])
func_49 = relay.Function([var_0,var_24,var_28,], output)
mod['func_49'] = func_49
mod = relay.transform.InferType()(mod)
mutated_mod['func_49'] = func_49
mutated_mod = relay.transform.InferType()(mutated_mod)
func_49_call = mutated_mod.get_global_var('func_49')
var_51 = relay.var("var_51", dtype = "float32", shape = (10,))#candidate|51|(10,)|var|float32
var_52 = relay.var("var_52", dtype = "float64", shape = (10,))#candidate|52|(10,)|var|float64
var_53 = relay.var("var_53", dtype = "float64", shape = (10,))#candidate|53|(10,)|var|float64
call_50 = func_49_call(var_51,var_52,var_53,)
output = call_50
func_54 = relay.Function([var_51,var_52,var_53,], output)
mutated_mod['func_54'] = func_54
mutated_mod = relay.transform.InferType()(mutated_mod)
var_56 = relay.var("var_56", dtype = "int8", shape = (16,))#candidate|56|(16,)|var|int8
var_57 = relay.var("var_57", dtype = "int8", shape = (16,))#candidate|57|(16,)|var|int8
bop_58 = relay.subtract(var_56.astype('int8'), relay.reshape(var_57.astype('int8'), relay.shape_of(var_56))) # shape=(16,)
bop_61 = relay.add(var_56.astype('int64'), relay.reshape(bop_58.astype('int64'), relay.shape_of(var_56))) # shape=(16,)
uop_64 = relay.log(bop_58.astype('float64')) # shape=(16,)
bop_66 = relay.subtract(uop_64.astype('uint16'), relay.reshape(bop_58.astype('uint16'), relay.shape_of(uop_64))) # shape=(16,)
bop_69 = relay.logical_xor(bop_66.astype('int64'), relay.reshape(var_57.astype('int64'), relay.shape_of(bop_66))) # shape=(16,)
uop_72 = relay.log10(var_56.astype('float32')) # shape=(16,)
bop_74 = relay.multiply(uop_64.astype('uint32'), relay.reshape(bop_69.astype('uint32'), relay.shape_of(uop_64))) # shape=(16,)
bop_77 = relay.maximum(var_57.astype('int16'), relay.reshape(bop_66.astype('int16'), relay.shape_of(var_57))) # shape=(16,)
output = relay.Tuple([bop_61,uop_72,bop_74,bop_77,])
output2 = relay.Tuple([bop_61,uop_72,bop_74,bop_77,])
func_80 = relay.Function([var_56,var_57,], output)
mod['func_80'] = func_80
mod = relay.transform.InferType()(mod)
mutated_mod['func_80'] = func_80
mutated_mod = relay.transform.InferType()(mutated_mod)
func_80_call = mutated_mod.get_global_var('func_80')
var_82 = relay.var("var_82", dtype = "int8", shape = (16,))#candidate|82|(16,)|var|int8
var_83 = relay.var("var_83", dtype = "int8", shape = (16,))#candidate|83|(16,)|var|int8
call_81 = func_80_call(var_82,var_83,)
output = call_81
func_84 = relay.Function([var_82,var_83,], output)
mutated_mod['func_84'] = func_84
mutated_mod = relay.transform.InferType()(mutated_mod)
var_86 = relay.var("var_86", dtype = "float32", shape = ())#candidate|86|()|var|float32
uop_87 = relay.rsqrt(var_86.astype('float32')) # shape=()
var_89 = relay.var("var_89", dtype = "float32", shape = (2,))#candidate|89|(2,)|var|float32
bop_90 = relay.greater_equal(var_86.astype('bool'), var_89.astype('bool')) # shape=(2,)
output = relay.Tuple([uop_87,bop_90,])
output2 = relay.Tuple([uop_87,bop_90,])
func_93 = relay.Function([var_86,var_89,], output)
mod['func_93'] = func_93
mod = relay.transform.InferType()(mod)
var_94 = relay.var("var_94", dtype = "float32", shape = ())#candidate|94|()|var|float32
var_95 = relay.var("var_95", dtype = "float32", shape = (2,))#candidate|95|(2,)|var|float32
output = func_93(var_94,var_95,)
func_96 = relay.Function([var_94,var_95,], output)
mutated_mod['func_96'] = func_96
mutated_mod = relay.transform.InferType()(mutated_mod)
const_98 = relay.const(9, dtype = "int32")#candidate|98|()|const|int32
const_99 = relay.const([-4,4,-10,3,-5,10,-1,-7,-5,-1,10,-9,9,8,5,-3], dtype = "int32")#candidate|99|(16,)|const|int32
bop_100 = relay.bitwise_or(const_98.astype('int32'), const_99.astype('int32')) # shape=(16,)
const_103 = relay.const([2,4,-5,2,-3,-4,1,-2,-4,6,-10,-8,2,10,-4,5], dtype = "int32")#candidate|103|(16,)|const|int32
bop_104 = relay.logical_or(bop_100.astype('bool'), relay.reshape(const_103.astype('bool'), relay.shape_of(bop_100))) # shape=(16,)
output = bop_104
output2 = bop_104
func_107 = relay.Function([], output)
mod['func_107'] = func_107
mod = relay.transform.InferType()(mod)
output = func_107()
func_108 = relay.Function([], output)
mutated_mod['func_108'] = func_108
mutated_mod = relay.transform.InferType()(mutated_mod)
var_109 = relay.var("var_109", dtype = "float32", shape = ())#candidate|109|()|var|float32
uop_110 = relay.atanh(var_109.astype('float32')) # shape=()
uop_112 = relay.log10(uop_110.astype('float32')) # shape=()
var_114 = relay.var("var_114", dtype = "float32", shape = (9, 10))#candidate|114|(9, 10)|var|float32
bop_115 = relay.left_shift(uop_110.astype('uint16'), var_114.astype('uint16')) # shape=(9, 10)
uop_118 = relay.acosh(uop_112.astype('float64')) # shape=()
uop_120 = relay.sqrt(bop_115.astype('float32')) # shape=(9, 10)
uop_122 = relay.sinh(uop_120.astype('float32')) # shape=(9, 10)
func_80_call = mod.get_global_var('func_80')
func_84_call = mutated_mod.get_global_var('func_84')
const_125 = relay.const([3,-6,1,2,7,-9,4,-10,4,-1,8,-9,-8,-4,-3,9], dtype = "int8")#candidate|125|(16,)|const|int8
call_124 = relay.TupleGetItem(func_80_call(relay.reshape(const_125.astype('int8'), [16,]), relay.reshape(const_125.astype('int8'), [16,]), ), 2)
call_126 = relay.TupleGetItem(func_84_call(relay.reshape(const_125.astype('int8'), [16,]), relay.reshape(const_125.astype('int8'), [16,]), ), 2)
bop_127 = relay.right_shift(uop_120.astype('int8'), relay.reshape(uop_122.astype('int8'), relay.shape_of(uop_120))) # shape=(9, 10)
uop_130 = relay.erf(uop_118.astype('float64')) # shape=()
var_132 = relay.var("var_132", dtype = "float32", shape = (9, 10))#candidate|132|(9, 10)|var|float32
bop_133 = relay.subtract(uop_122.astype('int64'), relay.reshape(var_132.astype('int64'), relay.shape_of(uop_122))) # shape=(9, 10)
uop_136 = relay.rsqrt(uop_122.astype('float32')) # shape=(9, 10)
uop_138 = relay.rsqrt(bop_127.astype('float64')) # shape=(9, 10)
uop_140 = relay.sinh(uop_122.astype('float32')) # shape=(9, 10)
uop_142 = relay.rsqrt(bop_133.astype('float32')) # shape=(9, 10)
bop_144 = relay.bitwise_xor(bop_115.astype('int16'), relay.reshape(uop_140.astype('int16'), relay.shape_of(bop_115))) # shape=(9, 10)
bop_147 = relay.divide(uop_118.astype('float32'), var_114.astype('float32')) # shape=(9, 10)
uop_150 = relay.sinh(uop_136.astype('float32')) # shape=(9, 10)
bop_152 = relay.bitwise_xor(uop_130.astype('int64'), bop_115.astype('int64')) # shape=(9, 10)
const_155 = relay.const([[2.386037,-0.466332,0.282517,0.259972,-4.532983,3.516443,8.658524,1.043707,2.321670,-7.986646],[-7.951540,-4.967170,-5.009994,-7.047047,-7.928114,6.831243,4.912096,4.921000,1.202162,-4.822025],[1.061569,5.472007,7.216296,-1.442225,-3.278111,0.992669,-8.250904,-5.705945,-5.811377,-9.690174],[-4.589757,9.900268,-9.765694,-8.805068,9.551488,9.600521,-7.134013,3.259071,0.124123,-3.824592],[-3.509388,8.544780,-7.555874,7.921976,-4.045708,6.299622,5.882654,-4.272212,6.421407,-1.676479],[-8.626107,1.824621,-4.809603,-0.198222,-2.206822,-3.201078,-6.543556,3.783616,3.851363,-3.962397],[5.003640,3.518891,-1.541047,-4.773596,-6.716985,-8.606995,-4.433197,-1.252633,6.082819,-3.210870],[9.506947,-5.876090,-3.073906,-7.243773,0.561152,4.364818,5.797614,2.645286,8.211025,2.235634],[-0.588233,-0.448066,-0.344276,-1.277969,5.504637,0.478474,3.663131,-0.087092,-3.695661,6.925157]], dtype = "float32")#candidate|155|(9, 10)|const|float32
bop_156 = relay.add(uop_150.astype('float64'), relay.reshape(const_155.astype('float64'), relay.shape_of(uop_150))) # shape=(9, 10)
bop_159 = relay.logical_and(bop_156.astype('bool'), relay.reshape(var_132.astype('bool'), relay.shape_of(bop_156))) # shape=(9, 10)
uop_162 = relay.sqrt(uop_150.astype('float32')) # shape=(9, 10)
uop_164 = relay.log10(uop_162.astype('float64')) # shape=(9, 10)
uop_166 = relay.erf(uop_150.astype('float32')) # shape=(9, 10)
bop_168 = relay.maximum(uop_164.astype('uint32'), uop_130.astype('uint32')) # shape=(9, 10)
uop_171 = relay.asin(uop_164.astype('float32')) # shape=(9, 10)
bop_173 = relay.subtract(uop_171.astype('int16'), relay.reshape(var_114.astype('int16'), relay.shape_of(uop_171))) # shape=(9, 10)
uop_176 = relay.acosh(uop_162.astype('float32')) # shape=(9, 10)
const_178 = relay.const([[-10,-8,5,-5,3,-10,8,-1,3,-6],[1,-5,1,-7,-6,-4,5,-1,3,5],[-4,8,-4,-4,2,5,-3,6,-6,-6],[-3,-9,4,1,7,-5,3,-2,-2,-4],[-10,2,1,9,2,-2,-6,5,2,-9],[-6,-2,8,7,-4,-8,2,-8,-7,-10],[2,4,-4,10,-7,-7,-3,-3,4,-3],[-1,-3,-9,5,7,5,-9,9,-9,9],[10,-10,-4,-4,-3,9,7,6,-2,-2]], dtype = "int16")#candidate|178|(9, 10)|const|int16
bop_179 = relay.right_shift(bop_173.astype('uint16'), relay.reshape(const_178.astype('uint16'), relay.shape_of(bop_173))) # shape=(9, 10)
uop_182 = relay.log(bop_179.astype('float32')) # shape=(9, 10)
func_49_call = mod.get_global_var('func_49')
func_54_call = mutated_mod.get_global_var('func_54')
const_185 = relay.const([4.749722,-7.303878,4.266209,4.718264,3.582247,0.913762,-1.751783,-6.117166,6.173897,1.616173], dtype = "float32")#candidate|185|(10,)|const|float32
call_184 = relay.TupleGetItem(func_49_call(relay.reshape(const_185.astype('float32'), [10,]), relay.reshape(const_185.astype('float64'), [10,]), relay.reshape(const_185.astype('float64'), [10,]), ), 0)
call_186 = relay.TupleGetItem(func_54_call(relay.reshape(const_185.astype('float32'), [10,]), relay.reshape(const_185.astype('float64'), [10,]), relay.reshape(const_185.astype('float64'), [10,]), ), 0)
bop_187 = relay.right_shift(uop_182.astype('uint8'), relay.reshape(var_132.astype('uint8'), relay.shape_of(uop_182))) # shape=(9, 10)
var_190 = relay.var("var_190", dtype = "uint8", shape = (9, 10))#candidate|190|(9, 10)|var|uint8
bop_191 = relay.right_shift(bop_187.astype('int64'), relay.reshape(var_190.astype('int64'), relay.shape_of(bop_187))) # shape=(9, 10)
bop_194 = relay.less(uop_176.astype('bool'), uop_130.astype('bool')) # shape=(9, 10)
func_80_call = mod.get_global_var('func_80')
func_84_call = mutated_mod.get_global_var('func_84')
call_197 = relay.TupleGetItem(func_80_call(relay.reshape(const_125.astype('int8'), [16,]), relay.reshape(call_124.astype('int8'), [16,]), ), 3)
call_198 = relay.TupleGetItem(func_84_call(relay.reshape(const_125.astype('int8'), [16,]), relay.reshape(call_124.astype('int8'), [16,]), ), 3)
uop_199 = relay.tan(bop_179.astype('float32')) # shape=(9, 10)
bop_201 = relay.less_equal(bop_191.astype('bool'), relay.reshape(uop_182.astype('bool'), relay.shape_of(bop_191))) # shape=(9, 10)
uop_204 = relay.asin(uop_182.astype('float64')) # shape=(9, 10)
uop_206 = relay.atan(uop_204.astype('float64')) # shape=(9, 10)
uop_208 = relay.tan(uop_206.astype('float64')) # shape=(9, 10)
var_210 = relay.var("var_210", dtype = "float64", shape = (9, 10))#candidate|210|(9, 10)|var|float64
bop_211 = relay.greater_equal(uop_208.astype('bool'), relay.reshape(var_210.astype('bool'), relay.shape_of(uop_208))) # shape=(9, 10)
const_214 = relay.const([[False,False,False,True,True,True,False,True,True,False],[False,False,True,True,False,True,True,True,True,False],[True,False,False,False,True,True,False,True,False,False],[True,True,True,True,False,False,False,False,True,True],[False,True,True,True,False,False,True,False,True,False],[False,True,False,False,True,True,True,False,False,True],[False,True,False,True,False,True,True,False,True,True],[True,False,False,True,True,True,True,False,True,False],[True,True,True,True,True,True,True,False,True,True]], dtype = "bool")#candidate|214|(9, 10)|const|bool
bop_215 = relay.bitwise_xor(bop_211.astype('int32'), relay.reshape(const_214.astype('int32'), relay.shape_of(bop_211))) # shape=(9, 10)
bop_218 = relay.left_shift(bop_215.astype('uint16'), uop_112.astype('uint16')) # shape=(9, 10)
bop_221 = relay.logical_and(bop_218.astype('bool'), relay.reshape(uop_120.astype('bool'), relay.shape_of(bop_218))) # shape=(9, 10)
uop_224 = relay.sqrt(bop_218.astype('float32')) # shape=(9, 10)
uop_226 = relay.acosh(uop_224.astype('float32')) # shape=(9, 10)
bop_228 = relay.mod(uop_226.astype('float64'), const_185.astype('float64')) # shape=(9, 10)
uop_231 = relay.sigmoid(uop_206.astype('float64')) # shape=(9, 10)
func_93_call = mod.get_global_var('func_93')
func_96_call = mutated_mod.get_global_var('func_96')
const_234 = relay.const([[6.100442],[1.681408]], dtype = "float32")#candidate|234|(2, 1)|const|float32
call_233 = relay.TupleGetItem(func_93_call(relay.reshape(var_109.astype('float32'), []), relay.reshape(const_234.astype('float32'), [2,]), ), 0)
call_235 = relay.TupleGetItem(func_96_call(relay.reshape(var_109.astype('float32'), []), relay.reshape(const_234.astype('float32'), [2,]), ), 0)
func_107_call = mod.get_global_var('func_107')
func_108_call = mutated_mod.get_global_var('func_108')
call_236 = func_107_call()
call_237 = func_107_call()
var_238 = relay.var("var_238", dtype = "float64", shape = (9, 10))#candidate|238|(9, 10)|var|float64
bop_239 = relay.right_shift(bop_228.astype('int16'), relay.reshape(var_238.astype('int16'), relay.shape_of(bop_228))) # shape=(9, 10)
bop_242 = relay.logical_xor(bop_228.astype('int8'), relay.reshape(bop_201.astype('int8'), relay.shape_of(bop_228))) # shape=(9, 10)
uop_245 = relay.sqrt(uop_224.astype('float64')) # shape=(9, 10)
var_247 = relay.var("var_247", dtype = "float64", shape = (9, 10))#candidate|247|(9, 10)|var|float64
bop_248 = relay.minimum(uop_245.astype('float64'), relay.reshape(var_247.astype('float64'), relay.shape_of(uop_245))) # shape=(9, 10)
uop_251 = relay.sqrt(bop_242.astype('float64')) # shape=(9, 10)
output = relay.Tuple([call_124,const_125,uop_138,uop_142,bop_144,bop_147,bop_152,bop_159,uop_166,bop_168,call_184,bop_194,call_197,uop_199,bop_221,uop_231,call_233,const_234,call_236,bop_239,bop_248,uop_251,])
output2 = relay.Tuple([call_126,const_125,uop_138,uop_142,bop_144,bop_147,bop_152,bop_159,uop_166,bop_168,call_186,bop_194,call_198,uop_199,bop_221,uop_231,call_235,const_234,call_237,bop_239,bop_248,uop_251,])
func_253 = relay.Function([var_109,var_114,var_132,var_190,var_210,var_238,var_247,], output)
mod['func_253'] = func_253
mod = relay.transform.InferType()(mod)
mutated_mod['func_253'] = func_253
mutated_mod = relay.transform.InferType()(mutated_mod)
func_253_call = mutated_mod.get_global_var('func_253')
var_255 = relay.var("var_255", dtype = "float32", shape = ())#candidate|255|()|var|float32
var_256 = relay.var("var_256", dtype = "float32", shape = (9, 10))#candidate|256|(9, 10)|var|float32
var_257 = relay.var("var_257", dtype = "float32", shape = (9, 10))#candidate|257|(9, 10)|var|float32
var_258 = relay.var("var_258", dtype = "uint8", shape = (9, 10))#candidate|258|(9, 10)|var|uint8
var_259 = relay.var("var_259", dtype = "float64", shape = (9, 10))#candidate|259|(9, 10)|var|float64
var_260 = relay.var("var_260", dtype = "float64", shape = (9, 10))#candidate|260|(9, 10)|var|float64
var_261 = relay.var("var_261", dtype = "float64", shape = (9, 10))#candidate|261|(9, 10)|var|float64
call_254 = func_253_call(var_255,var_256,var_257,var_258,var_259,var_260,var_261,)
output = call_254
func_262 = relay.Function([var_255,var_256,var_257,var_258,var_259,var_260,var_261,], output)
mutated_mod['func_262'] = func_262
mutated_mod = relay.transform.InferType()(mutated_mod)
const_264 = relay.const([[4,5,9,9,8,10,-4,-4,-2,-5,-7,2,7,2]], dtype = "uint16")#candidate|264|(1, 14)|const|uint16
var_265 = relay.var("var_265", dtype = "uint16", shape = (7, 14))#candidate|265|(7, 14)|var|uint16
bop_266 = relay.bitwise_xor(const_264.astype('uint16'), var_265.astype('uint16')) # shape=(7, 14)
func_49_call = mod.get_global_var('func_49')
func_54_call = mutated_mod.get_global_var('func_54')
const_270 = relay.const([-0.126085,4.512605,-2.147652,2.578755,-6.530991,1.254178,-7.471039,1.749557,-8.355559,7.051184], dtype = "float32")#candidate|270|(10,)|const|float32
call_269 = relay.TupleGetItem(func_49_call(relay.reshape(const_270.astype('float32'), [10,]), relay.reshape(const_270.astype('float64'), [10,]), relay.reshape(const_270.astype('float64'), [10,]), ), 4)
call_271 = relay.TupleGetItem(func_54_call(relay.reshape(const_270.astype('float32'), [10,]), relay.reshape(const_270.astype('float64'), [10,]), relay.reshape(const_270.astype('float64'), [10,]), ), 4)
uop_272 = relay.log(const_270.astype('float32')) # shape=(10,)
var_274 = relay.var("var_274", dtype = "float32", shape = (10,))#candidate|274|(10,)|var|float32
bop_275 = relay.left_shift(uop_272.astype('uint64'), relay.reshape(var_274.astype('uint64'), relay.shape_of(uop_272))) # shape=(10,)
uop_278 = relay.log(bop_275.astype('float64')) # shape=(10,)
func_253_call = mod.get_global_var('func_253')
func_262_call = mutated_mod.get_global_var('func_262')
var_281 = relay.var("var_281", dtype = "float32", shape = ())#candidate|281|()|var|float32
var_282 = relay.var("var_282", dtype = "float32", shape = (90,))#candidate|282|(90,)|var|float32
call_280 = relay.TupleGetItem(func_253_call(relay.reshape(var_281.astype('float32'), []), relay.reshape(var_282.astype('float32'), [9, 10]), relay.reshape(var_282.astype('float32'), [9, 10]), relay.reshape(var_282.astype('uint8'), [9, 10]), relay.reshape(var_282.astype('float64'), [9, 10]), relay.reshape(var_282.astype('float64'), [9, 10]), relay.reshape(var_282.astype('float64'), [9, 10]), ), 17)
call_283 = relay.TupleGetItem(func_262_call(relay.reshape(var_281.astype('float32'), []), relay.reshape(var_282.astype('float32'), [9, 10]), relay.reshape(var_282.astype('float32'), [9, 10]), relay.reshape(var_282.astype('uint8'), [9, 10]), relay.reshape(var_282.astype('float64'), [9, 10]), relay.reshape(var_282.astype('float64'), [9, 10]), relay.reshape(var_282.astype('float64'), [9, 10]), ), 17)
uop_284 = relay.acosh(uop_272.astype('float64')) # shape=(10,)
func_80_call = mod.get_global_var('func_80')
func_84_call = mutated_mod.get_global_var('func_84')
var_287 = relay.var("var_287", dtype = "int8", shape = (8, 2))#candidate|287|(8, 2)|var|int8
call_286 = relay.TupleGetItem(func_80_call(relay.reshape(var_287.astype('int8'), [16,]), relay.reshape(var_287.astype('int8'), [16,]), ), 2)
call_288 = relay.TupleGetItem(func_84_call(relay.reshape(var_287.astype('int8'), [16,]), relay.reshape(var_287.astype('int8'), [16,]), ), 2)
bop_289 = relay.power(uop_278.astype('float32'), relay.reshape(call_269.astype('float32'), relay.shape_of(uop_278))) # shape=(10,)
bop_292 = relay.power(uop_278.astype('float32'), relay.reshape(call_271.astype('float32'), relay.shape_of(uop_278))) # shape=(10,)
uop_293 = relay.atan(bop_275.astype('float64')) # shape=(10,)
bop_295 = relay.less(uop_278.astype('bool'), relay.reshape(uop_284.astype('bool'), relay.shape_of(uop_278))) # shape=(10,)
uop_298 = relay.log2(var_282.astype('float32')) # shape=(90,)
bop_300 = relay.bitwise_xor(uop_293.astype('int64'), relay.reshape(uop_278.astype('int64'), relay.shape_of(uop_293))) # shape=(10,)
bop_303 = relay.logical_or(bop_275.astype('bool'), relay.reshape(const_270.astype('bool'), relay.shape_of(bop_275))) # shape=(10,)
var_306 = relay.var("var_306", dtype = "bool", shape = (10,))#candidate|306|(10,)|var|bool
bop_307 = relay.equal(bop_303.astype('bool'), relay.reshape(var_306.astype('bool'), relay.shape_of(bop_303))) # shape=(10,)
bop_310 = relay.greater_equal(var_281.astype('bool'), uop_293.astype('bool')) # shape=(10,)
func_93_call = mod.get_global_var('func_93')
func_96_call = mutated_mod.get_global_var('func_96')
call_313 = relay.TupleGetItem(func_93_call(relay.reshape(var_281.astype('float32'), []), relay.reshape(call_280.astype('float32'), [2,]), ), 0)
call_314 = relay.TupleGetItem(func_96_call(relay.reshape(var_281.astype('float32'), []), relay.reshape(call_280.astype('float32'), [2,]), ), 0)
uop_315 = relay.cos(bop_295.astype('float64')) # shape=(10,)
output = relay.Tuple([bop_266,call_280,call_286,var_287,bop_289,uop_298,bop_300,bop_307,bop_310,call_313,uop_315,])
output2 = relay.Tuple([bop_266,call_283,call_288,var_287,bop_292,uop_298,bop_300,bop_307,bop_310,call_314,uop_315,])
func_317 = relay.Function([var_265,var_274,var_281,var_282,var_287,var_306,], output)
mod['func_317'] = func_317
mod = relay.transform.InferType()(mod)
var_318 = relay.var("var_318", dtype = "uint16", shape = (7, 14))#candidate|318|(7, 14)|var|uint16
var_319 = relay.var("var_319", dtype = "float32", shape = (10,))#candidate|319|(10,)|var|float32
var_320 = relay.var("var_320", dtype = "float32", shape = ())#candidate|320|()|var|float32
var_321 = relay.var("var_321", dtype = "float32", shape = (90,))#candidate|321|(90,)|var|float32
var_322 = relay.var("var_322", dtype = "int8", shape = (8, 2))#candidate|322|(8, 2)|var|int8
var_323 = relay.var("var_323", dtype = "bool", shape = (10,))#candidate|323|(10,)|var|bool
output = func_317(var_318,var_319,var_320,var_321,var_322,var_323,)
func_324 = relay.Function([var_318,var_319,var_320,var_321,var_322,var_323,], output)
mutated_mod['func_324'] = func_324
mutated_mod = relay.transform.InferType()(mutated_mod)
func_107_call = mod.get_global_var('func_107')
func_108_call = mutated_mod.get_global_var('func_108')
call_326 = func_107_call()
call_327 = func_107_call()
uop_328 = relay.tan(call_326.astype('float64')) # shape=(16,)
uop_330 = relay.tan(call_327.astype('float64')) # shape=(16,)
uop_331 = relay.sinh(uop_328.astype('float64')) # shape=(16,)
uop_333 = relay.sinh(uop_330.astype('float64')) # shape=(16,)
func_107_call = mod.get_global_var('func_107')
func_108_call = mutated_mod.get_global_var('func_108')
call_334 = func_107_call()
call_335 = func_107_call()
func_49_call = mod.get_global_var('func_49')
func_54_call = mutated_mod.get_global_var('func_54')
const_337 = relay.const([-2.495658,-6.600045,7.638420,6.436721,9.940305,-1.543020,0.453846,4.990839,1.497186,-3.688719], dtype = "float32")#candidate|337|(10,)|const|float32
call_336 = relay.TupleGetItem(func_49_call(relay.reshape(const_337.astype('float32'), [10,]), relay.reshape(const_337.astype('float64'), [10,]), relay.reshape(const_337.astype('float64'), [10,]), ), 8)
call_338 = relay.TupleGetItem(func_54_call(relay.reshape(const_337.astype('float32'), [10,]), relay.reshape(const_337.astype('float64'), [10,]), relay.reshape(const_337.astype('float64'), [10,]), ), 8)
uop_339 = relay.log(uop_328.astype('float32')) # shape=(16,)
uop_341 = relay.log(uop_330.astype('float32')) # shape=(16,)
uop_342 = relay.acosh(uop_331.astype('float32')) # shape=(16,)
uop_344 = relay.acosh(uop_333.astype('float32')) # shape=(16,)
bop_345 = relay.mod(uop_339.astype('float64'), relay.reshape(call_326.astype('float64'), relay.shape_of(uop_339))) # shape=(16,)
bop_348 = relay.mod(uop_341.astype('float64'), relay.reshape(call_327.astype('float64'), relay.shape_of(uop_341))) # shape=(16,)
var_349 = relay.var("var_349", dtype = "float64", shape = (16,))#candidate|349|(16,)|var|float64
bop_350 = relay.right_shift(uop_331.astype('int64'), relay.reshape(var_349.astype('int64'), relay.shape_of(uop_331))) # shape=(16,)
bop_353 = relay.right_shift(uop_333.astype('int64'), relay.reshape(var_349.astype('int64'), relay.shape_of(uop_333))) # shape=(16,)
output = relay.Tuple([call_334,call_336,const_337,uop_342,bop_345,bop_350,])
output2 = relay.Tuple([call_335,call_338,const_337,uop_344,bop_348,bop_353,])
F = relay.Function([var_349,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_349,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_349= np.array([7.245413,-1.381590,7.855550,7.826437,-2.950984,-5.651863,-1.578633,7.968754,-0.552062,-3.699194,7.442911,-1.989206,-7.210835,-2.153754,-3.477101,-5.486283], dtype='float64')
module1.set_input('var_349', input_349)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_349, )
res3 = intrp3.evaluate()(input_349, )
res4 = intrp4.evaluate()(input_349, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
module5.set_input('var_349', input_349)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_349, )
res7 = intrp7.evaluate()(input_349, )
res8 = intrp8.evaluate()(input_349, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
module9.set_input('var_349', input_349)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_349, )
res11 = intrp11.evaluate()(input_349, )
res12 = intrp12.evaluate()(input_349, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
module13.set_input('var_349', input_349)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_349, )
res15 = intrp15.evaluate()(input_349, )
res16 = intrp16.evaluate()(input_349, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
module17.set_input('var_349', input_349)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_349, )
res19 = intrp19.evaluate()(input_349, )
res20 = intrp20.evaluate()(input_349, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
module21.set_input('var_349', input_349)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_349, )
res23 = intrp23.evaluate()(input_349, )
res24 = intrp24.evaluate()(input_349, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()

'''39: TVMFuncCall
38: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
37: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
36: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
35: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
34: tvm::transform::Pass::operator()(tvm::IRModule) const
33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
31: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
30: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
29: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
28: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
27: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
26: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
25: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
24: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
23: _ZN3tvm5relay16MixedModeMutato
22: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
21: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
20: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
19: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
18: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
17: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
16: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
15: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
14: _ZN3tvm5relay16MixedModeMutato
13: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
12: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
11: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
10: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
9: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
8: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
7: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
6: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
5: tvm::transform::Pass::operator()(tvm::IRModule) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
0: tvm::DiagnosticContext::Render()

'''