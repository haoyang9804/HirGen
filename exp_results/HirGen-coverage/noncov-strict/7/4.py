import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (13, 9))#candidate|0|(13, 9)|var|float32
uop_1 = relay.sinh(var_0.astype('float32')) # shape=(13, 9)
bop_3 = relay.not_equal(uop_1.astype('bool'), relay.reshape(var_0.astype('bool'), relay.shape_of(uop_1))) # shape=(13, 9)
bop_6 = relay.bitwise_or(bop_3.astype('int8'), relay.reshape(var_0.astype('int8'), relay.shape_of(bop_3))) # shape=(13, 9)
uop_9 = relay.atan(bop_6.astype('float64')) # shape=(13, 9)
var_11 = relay.var("var_11", dtype = "float32", shape = (13, 9))#candidate|11|(13, 9)|var|float32
bop_12 = relay.divide(var_0.astype('float32'), relay.reshape(var_11.astype('float32'), relay.shape_of(var_0))) # shape=(13, 9)
uop_15 = relay.log2(uop_9.astype('float32')) # shape=(13, 9)
bop_17 = relay.equal(uop_9.astype('bool'), relay.reshape(bop_12.astype('bool'), relay.shape_of(uop_9))) # shape=(13, 9)
bop_20 = relay.logical_xor(uop_15.astype('int16'), relay.reshape(bop_6.astype('int16'), relay.shape_of(uop_15))) # shape=(13, 9)
bop_23 = relay.not_equal(bop_17.astype('bool'), relay.reshape(bop_12.astype('bool'), relay.shape_of(bop_17))) # shape=(13, 9)
bop_26 = relay.less_equal(uop_15.astype('bool'), relay.reshape(bop_12.astype('bool'), relay.shape_of(uop_15))) # shape=(13, 9)
bop_29 = relay.minimum(bop_20.astype('uint64'), relay.reshape(bop_23.astype('uint64'), relay.shape_of(bop_20))) # shape=(13, 9)
bop_32 = relay.equal(bop_17.astype('bool'), relay.reshape(bop_12.astype('bool'), relay.shape_of(bop_17))) # shape=(13, 9)
output = relay.Tuple([bop_26,bop_29,bop_32,])
output2 = relay.Tuple([bop_26,bop_29,bop_32,])
func_35 = relay.Function([var_0,var_11,], output)
mod['func_35'] = func_35
mod = relay.transform.InferType()(mod)
var_36 = relay.var("var_36", dtype = "float32", shape = (13, 9))#candidate|36|(13, 9)|var|float32
var_37 = relay.var("var_37", dtype = "float32", shape = (13, 9))#candidate|37|(13, 9)|var|float32
output = func_35(var_36,var_37,)
func_38 = relay.Function([var_36,var_37,], output)
mutated_mod['func_38'] = func_38
mutated_mod = relay.transform.InferType()(mutated_mod)
var_40 = relay.var("var_40", dtype = "uint8", shape = ())#candidate|40|()|var|uint8
var_41 = relay.var("var_41", dtype = "uint8", shape = (12,))#candidate|41|(12,)|var|uint8
bop_42 = relay.equal(var_40.astype('bool'), var_41.astype('bool')) # shape=(12,)
bop_45 = relay.maximum(var_41.astype('int32'), relay.reshape(bop_42.astype('int32'), relay.shape_of(var_41))) # shape=(12,)
var_48 = relay.var("var_48", dtype = "uint8", shape = (12,))#candidate|48|(12,)|var|uint8
bop_49 = relay.greater_equal(var_41.astype('bool'), relay.reshape(var_48.astype('bool'), relay.shape_of(var_41))) # shape=(12,)
uop_52 = relay.acosh(var_41.astype('float64')) # shape=(12,)
bop_54 = relay.greater_equal(uop_52.astype('bool'), relay.reshape(var_41.astype('bool'), relay.shape_of(uop_52))) # shape=(12,)
var_57 = relay.var("var_57", dtype = "uint8", shape = (12,))#candidate|57|(12,)|var|uint8
bop_58 = relay.greater_equal(var_41.astype('bool'), relay.reshape(var_57.astype('bool'), relay.shape_of(var_41))) # shape=(12,)
bop_61 = relay.not_equal(bop_54.astype('bool'), var_40.astype('bool')) # shape=(12,)
func_35_call = mod.get_global_var('func_35')
func_38_call = mutated_mod.get_global_var('func_38')
const_65 = relay.const([-0.965183,3.716627,-6.911988,-4.095685,-0.678065,-1.464089,9.994360,2.926264,-8.002108,2.325332,-1.104457,5.315449,-8.133046,-5.605107,-0.852802,1.720099,-6.712315,-3.238537,-1.603919,0.567736,2.754220,-9.602007,-3.573514,5.692682,8.856625,-5.586479,1.371140,-8.322507,-4.626776,-7.146654,2.834906,7.319338,-9.593852,-5.027166,5.233593,2.062391,2.986902,2.002893,7.241159,5.445408,5.875338,4.623870,9.168881,-8.676782,-2.727065,-6.430180,0.288814,5.405133,-8.418058,-5.997292,8.279878,-5.869971,2.873048,-8.929651,-1.718157,-4.068409,-0.804762,-1.621442,6.061601,8.688759,7.375593,3.447521,6.725793,-2.017646,-6.682634,8.599037,-6.524693,7.232675,5.890994,4.492163,2.147608,-7.745153,7.792291,6.041407,7.108404,-1.287943,5.839504,3.777891,1.893359,-9.941129,7.218055,9.971720,4.513450,9.296046,5.065010,-2.392080,-7.400810,-3.022736,9.151493,3.902436,-4.917230,-8.852278,1.174416,-2.423155,5.067009,0.979397,0.041596,4.495921,6.056157,1.280312,0.749117,9.546862,-2.111191,5.334863,2.039529,0.203103,-5.490809,5.252363,5.919599,-9.488326,-2.399539,0.577140,0.675822,-1.610128,-1.224982,1.163629,5.531768], dtype = "float32")#candidate|65|(117,)|const|float32
call_64 = relay.TupleGetItem(func_35_call(relay.reshape(const_65.astype('float32'), [13, 9]), relay.reshape(const_65.astype('float32'), [13, 9]), ), 0)
call_66 = relay.TupleGetItem(func_38_call(relay.reshape(const_65.astype('float32'), [13, 9]), relay.reshape(const_65.astype('float32'), [13, 9]), ), 0)
bop_67 = relay.divide(bop_61.astype('float32'), relay.reshape(bop_45.astype('float32'), relay.shape_of(bop_61))) # shape=(12,)
uop_70 = relay.atan(bop_54.astype('float32')) # shape=(12,)
bop_72 = relay.mod(var_40.astype('float32'), bop_42.astype('float32')) # shape=(12,)
bop_75 = relay.logical_and(bop_54.astype('bool'), relay.reshape(var_57.astype('bool'), relay.shape_of(bop_54))) # shape=(12,)
uop_78 = relay.tan(uop_70.astype('float32')) # shape=(12,)
var_80 = relay.var("var_80", dtype = "float32", shape = (12,))#candidate|80|(12,)|var|float32
bop_81 = relay.floor_divide(uop_70.astype('float64'), relay.reshape(var_80.astype('float64'), relay.shape_of(uop_70))) # shape=(12,)
var_84 = relay.var("var_84", dtype = "float64", shape = (12,))#candidate|84|(12,)|var|float64
bop_85 = relay.right_shift(bop_81.astype('int8'), relay.reshape(var_84.astype('int8'), relay.shape_of(bop_81))) # shape=(12,)
uop_88 = relay.log2(uop_78.astype('float32')) # shape=(12,)
uop_90 = relay.sqrt(uop_70.astype('float64')) # shape=(12,)
uop_92 = relay.erf(var_48.astype('float32')) # shape=(12,)
uop_94 = relay.acosh(uop_88.astype('float64')) # shape=(12,)
var_96 = relay.var("var_96", dtype = "float64", shape = (12,))#candidate|96|(12,)|var|float64
bop_97 = relay.floor_divide(uop_94.astype('float32'), relay.reshape(var_96.astype('float32'), relay.shape_of(uop_94))) # shape=(12,)
bop_100 = relay.bitwise_or(uop_90.astype('int16'), relay.reshape(bop_72.astype('int16'), relay.shape_of(uop_90))) # shape=(12,)
var_103 = relay.var("var_103", dtype = "float64", shape = (12,))#candidate|103|(12,)|var|float64
bop_104 = relay.logical_or(uop_94.astype('bool'), relay.reshape(var_103.astype('bool'), relay.shape_of(uop_94))) # shape=(12,)
const_107 = relay.const([-4.876928,-1.534309,-6.498005,5.635804,-5.825810,2.072251,0.404912,2.750304,0.815916,1.483166,4.809890,-9.085650], dtype = "float64")#candidate|107|(12,)|const|float64
bop_108 = relay.subtract(uop_90.astype('uint32'), relay.reshape(const_107.astype('uint32'), relay.shape_of(uop_90))) # shape=(12,)
uop_111 = relay.tan(bop_104.astype('float64')) # shape=(12,)
bop_113 = relay.left_shift(bop_104.astype('uint16'), relay.reshape(var_57.astype('uint16'), relay.shape_of(bop_104))) # shape=(12,)
bop_116 = relay.add(uop_94.astype('float32'), relay.reshape(bop_104.astype('float32'), relay.shape_of(uop_94))) # shape=(12,)
uop_119 = relay.acos(bop_104.astype('float64')) # shape=(12,)
bop_121 = relay.bitwise_and(uop_119.astype('uint8'), relay.reshape(bop_104.astype('uint8'), relay.shape_of(uop_119))) # shape=(12,)
bop_124 = relay.greater_equal(bop_121.astype('bool'), relay.reshape(bop_58.astype('bool'), relay.shape_of(bop_121))) # shape=(12,)
bop_127 = relay.divide(bop_124.astype('float32'), relay.reshape(bop_116.astype('float32'), relay.shape_of(bop_124))) # shape=(12,)
uop_130 = relay.sigmoid(uop_119.astype('float64')) # shape=(12,)
uop_132 = relay.atanh(bop_127.astype('float64')) # shape=(12,)
bop_134 = relay.equal(uop_132.astype('bool'), relay.reshape(uop_111.astype('bool'), relay.shape_of(uop_132))) # shape=(12,)
uop_137 = relay.asinh(bop_113.astype('float64')) # shape=(12,)
var_139 = relay.var("var_139", dtype = "bool", shape = (12,))#candidate|139|(12,)|var|bool
bop_140 = relay.minimum(bop_134.astype('float32'), relay.reshape(var_139.astype('float32'), relay.shape_of(bop_134))) # shape=(12,)
uop_143 = relay.sin(bop_134.astype('float64')) # shape=(12,)
bop_145 = relay.right_shift(uop_119.astype('int8'), relay.reshape(var_57.astype('int8'), relay.shape_of(uop_119))) # shape=(12,)
bop_148 = relay.logical_and(bop_140.astype('bool'), relay.reshape(uop_78.astype('bool'), relay.shape_of(bop_140))) # shape=(12,)
func_35_call = mod.get_global_var('func_35')
func_38_call = mutated_mod.get_global_var('func_38')
call_151 = relay.TupleGetItem(func_35_call(relay.reshape(const_65.astype('float32'), [13, 9]), relay.reshape(const_65.astype('float32'), [13, 9]), ), 2)
call_152 = relay.TupleGetItem(func_38_call(relay.reshape(const_65.astype('float32'), [13, 9]), relay.reshape(const_65.astype('float32'), [13, 9]), ), 2)
output = relay.Tuple([bop_49,call_64,const_65,bop_67,bop_75,bop_85,uop_92,bop_97,bop_100,bop_108,uop_130,uop_137,uop_143,bop_145,bop_148,call_151,])
output2 = relay.Tuple([bop_49,call_66,const_65,bop_67,bop_75,bop_85,uop_92,bop_97,bop_100,bop_108,uop_130,uop_137,uop_143,bop_145,bop_148,call_152,])
func_153 = relay.Function([var_40,var_41,var_48,var_57,var_80,var_84,var_96,var_103,var_139,], output)
mod['func_153'] = func_153
mod = relay.transform.InferType()(mod)
var_154 = relay.var("var_154", dtype = "uint8", shape = ())#candidate|154|()|var|uint8
var_155 = relay.var("var_155", dtype = "uint8", shape = (12,))#candidate|155|(12,)|var|uint8
var_156 = relay.var("var_156", dtype = "uint8", shape = (12,))#candidate|156|(12,)|var|uint8
var_157 = relay.var("var_157", dtype = "uint8", shape = (12,))#candidate|157|(12,)|var|uint8
var_158 = relay.var("var_158", dtype = "float32", shape = (12,))#candidate|158|(12,)|var|float32
var_159 = relay.var("var_159", dtype = "float64", shape = (12,))#candidate|159|(12,)|var|float64
var_160 = relay.var("var_160", dtype = "float64", shape = (12,))#candidate|160|(12,)|var|float64
var_161 = relay.var("var_161", dtype = "float64", shape = (12,))#candidate|161|(12,)|var|float64
var_162 = relay.var("var_162", dtype = "bool", shape = (12,))#candidate|162|(12,)|var|bool
output = func_153(var_154,var_155,var_156,var_157,var_158,var_159,var_160,var_161,var_162,)
func_163 = relay.Function([var_154,var_155,var_156,var_157,var_158,var_159,var_160,var_161,var_162,], output)
mutated_mod['func_163'] = func_163
mutated_mod = relay.transform.InferType()(mutated_mod)
const_165 = relay.const([[2.742220,-2.048457],[4.192742,8.140011]], dtype = "float64")#candidate|165|(2, 2)|const|float64
uop_166 = relay.sinh(const_165.astype('float64')) # shape=(2, 2)
output = uop_166
output2 = uop_166
func_168 = relay.Function([], output)
mod['func_168'] = func_168
mod = relay.transform.InferType()(mod)
mutated_mod['func_168'] = func_168
mutated_mod = relay.transform.InferType()(mutated_mod)
func_168_call = mutated_mod.get_global_var('func_168')
call_169 = func_168_call()
output = call_169
func_170 = relay.Function([], output)
mutated_mod['func_170'] = func_170
mutated_mod = relay.transform.InferType()(mutated_mod)
var_171 = relay.var("var_171", dtype = "float64", shape = (16, 8, 4))#candidate|171|(16, 8, 4)|var|float64
uop_172 = relay.tan(var_171.astype('float64')) # shape=(16, 8, 4)
uop_174 = relay.sinh(uop_172.astype('float32')) # shape=(16, 8, 4)
output = relay.Tuple([uop_174,])
output2 = relay.Tuple([uop_174,])
func_176 = relay.Function([var_171,], output)
mod['func_176'] = func_176
mod = relay.transform.InferType()(mod)
var_177 = relay.var("var_177", dtype = "float64", shape = (16, 8, 4))#candidate|177|(16, 8, 4)|var|float64
output = func_176(var_177)
func_178 = relay.Function([var_177], output)
mutated_mod['func_178'] = func_178
mutated_mod = relay.transform.InferType()(mutated_mod)
var_180 = relay.var("var_180", dtype = "float64", shape = (12,))#candidate|180|(12,)|var|float64
uop_181 = relay.log10(var_180.astype('float64')) # shape=(12,)
bop_183 = relay.logical_xor(var_180.astype('int16'), relay.reshape(uop_181.astype('int16'), relay.shape_of(var_180))) # shape=(12,)
uop_186 = relay.rsqrt(uop_181.astype('float64')) # shape=(12,)
bop_188 = relay.equal(var_180.astype('bool'), relay.reshape(bop_183.astype('bool'), relay.shape_of(var_180))) # shape=(12,)
uop_191 = relay.sqrt(uop_186.astype('float64')) # shape=(12,)
bop_193 = relay.floor_divide(uop_186.astype('float64'), relay.reshape(bop_188.astype('float64'), relay.shape_of(uop_186))) # shape=(12,)
func_153_call = mod.get_global_var('func_153')
func_163_call = mutated_mod.get_global_var('func_163')
const_197 = relay.const(-2, dtype = "uint8")#candidate|197|()|const|uint8
call_196 = relay.TupleGetItem(func_153_call(relay.reshape(const_197.astype('uint8'), []), relay.reshape(uop_191.astype('uint8'), [12,]), relay.reshape(bop_188.astype('uint8'), [12,]), relay.reshape(uop_186.astype('uint8'), [12,]), relay.reshape(bop_183.astype('float32'), [12,]), relay.reshape(var_180.astype('float64'), [12,]), relay.reshape(uop_191.astype('float64'), [12,]), relay.reshape(uop_191.astype('float64'), [12,]), relay.reshape(bop_183.astype('bool'), [12,]), ), 12)
call_198 = relay.TupleGetItem(func_163_call(relay.reshape(const_197.astype('uint8'), []), relay.reshape(uop_191.astype('uint8'), [12,]), relay.reshape(bop_188.astype('uint8'), [12,]), relay.reshape(uop_186.astype('uint8'), [12,]), relay.reshape(bop_183.astype('float32'), [12,]), relay.reshape(var_180.astype('float64'), [12,]), relay.reshape(uop_191.astype('float64'), [12,]), relay.reshape(uop_191.astype('float64'), [12,]), relay.reshape(bop_183.astype('bool'), [12,]), ), 12)
uop_199 = relay.asinh(bop_188.astype('float32')) # shape=(12,)
bop_201 = relay.right_shift(uop_191.astype('uint32'), relay.reshape(var_180.astype('uint32'), relay.shape_of(uop_191))) # shape=(12,)
uop_204 = relay.asin(bop_188.astype('float64')) # shape=(12,)
const_206 = relay.const([-2,4,-10,3,-9,-9,9,-9,-10,-7,2,-5], dtype = "uint32")#candidate|206|(12,)|const|uint32
bop_207 = relay.power(bop_201.astype('float32'), relay.reshape(const_206.astype('float32'), relay.shape_of(bop_201))) # shape=(12,)
var_210 = relay.var("var_210", dtype = "bool", shape = (12,))#candidate|210|(12,)|var|bool
bop_211 = relay.bitwise_or(bop_188.astype('uint8'), relay.reshape(var_210.astype('uint8'), relay.shape_of(bop_188))) # shape=(12,)
uop_214 = relay.exp(uop_199.astype('float32')) # shape=(12,)
output = relay.Tuple([bop_193,call_196,const_197,uop_204,bop_207,bop_211,uop_214,])
output2 = relay.Tuple([bop_193,call_198,const_197,uop_204,bop_207,bop_211,uop_214,])
func_216 = relay.Function([var_180,var_210,], output)
mod['func_216'] = func_216
mod = relay.transform.InferType()(mod)
mutated_mod['func_216'] = func_216
mutated_mod = relay.transform.InferType()(mutated_mod)
func_216_call = mutated_mod.get_global_var('func_216')
var_218 = relay.var("var_218", dtype = "float64", shape = (12,))#candidate|218|(12,)|var|float64
var_219 = relay.var("var_219", dtype = "bool", shape = (12,))#candidate|219|(12,)|var|bool
call_217 = func_216_call(var_218,var_219,)
output = call_217
func_220 = relay.Function([var_218,var_219,], output)
mutated_mod['func_220'] = func_220
mutated_mod = relay.transform.InferType()(mutated_mod)
func_168_call = mod.get_global_var('func_168')
func_170_call = mutated_mod.get_global_var('func_170')
call_222 = func_168_call()
call_223 = func_168_call()
const_224 = relay.const([[3.370769,3.591027],[4.119220,-8.886677]], dtype = "float64")#candidate|224|(2, 2)|const|float64
bop_225 = relay.subtract(call_222.astype('uint16'), relay.reshape(const_224.astype('uint16'), relay.shape_of(call_222))) # shape=(2, 2)
bop_228 = relay.subtract(call_223.astype('uint16'), relay.reshape(const_224.astype('uint16'), relay.shape_of(call_223))) # shape=(2, 2)
uop_229 = relay.erf(bop_225.astype('float32')) # shape=(2, 2)
uop_231 = relay.erf(bop_228.astype('float32')) # shape=(2, 2)
bop_232 = relay.maximum(uop_229.astype('int8'), relay.reshape(call_222.astype('int8'), relay.shape_of(uop_229))) # shape=(2, 2)
bop_235 = relay.maximum(uop_231.astype('int8'), relay.reshape(call_223.astype('int8'), relay.shape_of(uop_231))) # shape=(2, 2)
bop_236 = relay.add(bop_232.astype('uint32'), relay.reshape(call_222.astype('uint32'), relay.shape_of(bop_232))) # shape=(2, 2)
bop_239 = relay.add(bop_235.astype('uint32'), relay.reshape(call_223.astype('uint32'), relay.shape_of(bop_235))) # shape=(2, 2)
uop_240 = relay.exp(const_224.astype('float64')) # shape=(2, 2)
uop_242 = relay.log10(uop_229.astype('float32')) # shape=(2, 2)
uop_244 = relay.log10(uop_231.astype('float32')) # shape=(2, 2)
const_245 = relay.const([[-9.876608,-7.541123],[7.912365,5.441418]], dtype = "float32")#candidate|245|(2, 2)|const|float32
bop_246 = relay.logical_and(uop_242.astype('bool'), relay.reshape(const_245.astype('bool'), relay.shape_of(uop_242))) # shape=(2, 2)
bop_249 = relay.logical_and(uop_244.astype('bool'), relay.reshape(const_245.astype('bool'), relay.shape_of(uop_244))) # shape=(2, 2)
uop_250 = relay.sigmoid(bop_225.astype('float32')) # shape=(2, 2)
uop_252 = relay.sigmoid(bop_228.astype('float32')) # shape=(2, 2)
bop_253 = relay.maximum(const_245.astype('float32'), relay.reshape(uop_250.astype('float32'), relay.shape_of(const_245))) # shape=(2, 2)
bop_256 = relay.maximum(const_245.astype('float32'), relay.reshape(uop_252.astype('float32'), relay.shape_of(const_245))) # shape=(2, 2)
bop_257 = relay.not_equal(uop_240.astype('bool'), relay.reshape(const_224.astype('bool'), relay.shape_of(uop_240))) # shape=(2, 2)
uop_260 = relay.sinh(bop_246.astype('float64')) # shape=(2, 2)
uop_262 = relay.sinh(bop_249.astype('float64')) # shape=(2, 2)
uop_263 = relay.log10(bop_225.astype('float32')) # shape=(2, 2)
uop_265 = relay.log10(bop_228.astype('float32')) # shape=(2, 2)
bop_266 = relay.power(uop_260.astype('float32'), relay.reshape(const_245.astype('float32'), relay.shape_of(uop_260))) # shape=(2, 2)
bop_269 = relay.power(uop_262.astype('float32'), relay.reshape(const_245.astype('float32'), relay.shape_of(uop_262))) # shape=(2, 2)
uop_270 = relay.sinh(bop_266.astype('float32')) # shape=(2, 2)
uop_272 = relay.sinh(bop_269.astype('float32')) # shape=(2, 2)
bop_273 = relay.minimum(uop_270.astype('uint32'), relay.reshape(bop_225.astype('uint32'), relay.shape_of(uop_270))) # shape=(2, 2)
bop_276 = relay.minimum(uop_272.astype('uint32'), relay.reshape(bop_228.astype('uint32'), relay.shape_of(uop_272))) # shape=(2, 2)
bop_277 = relay.maximum(uop_270.astype('uint16'), relay.reshape(const_245.astype('uint16'), relay.shape_of(uop_270))) # shape=(2, 2)
bop_280 = relay.maximum(uop_272.astype('uint16'), relay.reshape(const_245.astype('uint16'), relay.shape_of(uop_272))) # shape=(2, 2)
bop_281 = relay.logical_and(bop_273.astype('bool'), relay.reshape(uop_250.astype('bool'), relay.shape_of(bop_273))) # shape=(2, 2)
bop_284 = relay.logical_and(bop_276.astype('bool'), relay.reshape(uop_252.astype('bool'), relay.shape_of(bop_276))) # shape=(2, 2)
output = relay.Tuple([bop_236,bop_253,bop_257,uop_263,bop_277,bop_281,])
output2 = relay.Tuple([bop_239,bop_256,bop_257,uop_265,bop_280,bop_284,])
func_285 = relay.Function([], output)
mod['func_285'] = func_285
mod = relay.transform.InferType()(mod)
output = func_285()
func_286 = relay.Function([], output)
mutated_mod['func_286'] = func_286
mutated_mod = relay.transform.InferType()(mutated_mod)
const_287 = relay.const([-5,8,-1], dtype = "int16")#candidate|287|(3,)|const|int16
var_288 = relay.var("var_288", dtype = "int16", shape = (3,))#candidate|288|(3,)|var|int16
bop_289 = relay.greater_equal(const_287.astype('bool'), relay.reshape(var_288.astype('bool'), relay.shape_of(const_287))) # shape=(3,)
const_292 = relay.const([True,True,True], dtype = "bool")#candidate|292|(3,)|const|bool
bop_293 = relay.less(bop_289.astype('bool'), relay.reshape(const_292.astype('bool'), relay.shape_of(bop_289))) # shape=(3,)
var_296 = relay.var("var_296", dtype = "int16", shape = (3,))#candidate|296|(3,)|var|int16
bop_297 = relay.equal(var_288.astype('bool'), relay.reshape(var_296.astype('bool'), relay.shape_of(var_288))) # shape=(3,)
const_300 = relay.const([-4,-4,10], dtype = "int16")#candidate|300|(3,)|const|int16
bop_301 = relay.floor_divide(var_296.astype('float64'), relay.reshape(const_300.astype('float64'), relay.shape_of(var_296))) # shape=(3,)
const_304 = relay.const([-1.047051,0.155171,-3.538411], dtype = "float64")#candidate|304|(3,)|const|float64
bop_305 = relay.bitwise_and(bop_301.astype('int64'), relay.reshape(const_304.astype('int64'), relay.shape_of(bop_301))) # shape=(3,)
bop_308 = relay.floor_divide(bop_293.astype('float32'), relay.reshape(var_296.astype('float32'), relay.shape_of(bop_293))) # shape=(3,)
output = relay.Tuple([bop_297,bop_305,bop_308,])
output2 = relay.Tuple([bop_297,bop_305,bop_308,])
func_311 = relay.Function([var_288,var_296,], output)
mod['func_311'] = func_311
mod = relay.transform.InferType()(mod)
var_312 = relay.var("var_312", dtype = "int16", shape = (3,))#candidate|312|(3,)|var|int16
var_313 = relay.var("var_313", dtype = "int16", shape = (3,))#candidate|313|(3,)|var|int16
output = func_311(var_312,var_313,)
func_314 = relay.Function([var_312,var_313,], output)
mutated_mod['func_314'] = func_314
mutated_mod = relay.transform.InferType()(mutated_mod)
var_316 = relay.var("var_316", dtype = "float32", shape = (6, 12, 15))#candidate|316|(6, 12, 15)|var|float32
uop_317 = relay.sinh(var_316.astype('float32')) # shape=(6, 12, 15)
var_319 = relay.var("var_319", dtype = "float32", shape = (6, 12, 15))#candidate|319|(6, 12, 15)|var|float32
bop_320 = relay.greater(uop_317.astype('bool'), relay.reshape(var_319.astype('bool'), relay.shape_of(uop_317))) # shape=(6, 12, 15)
bop_323 = relay.left_shift(uop_317.astype('int64'), relay.reshape(var_319.astype('int64'), relay.shape_of(uop_317))) # shape=(6, 12, 15)
bop_326 = relay.floor_divide(var_316.astype('float64'), relay.reshape(bop_320.astype('float64'), relay.shape_of(var_316))) # shape=(6, 12, 15)
func_176_call = mod.get_global_var('func_176')
func_178_call = mutated_mod.get_global_var('func_178')
const_330 = relay.const([-9.396508,-8.674825,-7.509858,-2.896921,9.501556,-4.477968,8.754064,-5.253466,-2.877389,4.226347,7.267119,-9.136388,-2.001230,2.121886,2.404537,-9.949763,3.932656,-2.751746,-3.321728,-0.570328,-9.791529,-0.139894,-2.448689,-4.802216,0.539727,6.301707,7.492618,-6.048289,3.865566,2.660201,5.684680,-9.467081,-7.017605,6.641334,7.242932,-4.534557,-6.054026,1.190368,5.847192,-1.866090,0.693215,5.520528,5.017952,-7.851072,0.023487,3.588061,2.525197,-4.112126,-6.531047,-6.553435,3.663367,9.129167,4.394939,-5.951272,0.305247,8.252063,-2.709356,9.282247,2.620843,-9.407108,9.238124,0.299013,3.859588,-7.170804,1.314912,8.915389,-8.657569,5.276303,9.769059,-4.845717,-7.423396,8.488237,0.508389,-9.173504,-0.879258,0.216187,-4.938076,-5.013961,-7.257025,-9.791157,0.989076,-5.809954,-8.311180,2.746224,1.480664,-2.545901,-7.043054,-6.730565,-8.136541,-9.789406,4.290917,-6.357321,-8.035036,4.280509,-8.833359,1.231908,4.989626,8.196969,5.364402,1.358321,-4.556995,-4.901057,4.641330,-8.079801,9.453606,-7.738153,8.085310,-5.517928,3.828958,-6.793635,1.992253,8.146105,-0.858028,0.734639,-3.006438,-7.001073,-8.192936,6.784934,-4.144450,-0.438023,-3.653465,-8.954472,6.272747,5.425022,1.414277,-7.329305,6.719260,9.708234,-2.857371,9.206712,-1.106394,-9.816880,-2.401088,-6.923870,8.574328,-1.482835,-7.850918,0.260370,-4.697182,-4.785272,7.519486,-5.206036,3.043886,-0.777741,-5.486431,-5.492119,1.730371,-3.256189,-9.619279,-5.110864,3.895474,0.747379,-0.535426,1.036361,0.262582,-6.948225,1.446381,-5.603443,-1.990529,-5.676495,-1.405246,3.853880,2.119136,-7.990489,9.268379,-6.634151,6.109252,-2.049314,-5.386243,-6.027792,4.598316,-4.474684,-8.475342,9.598991,6.560171,3.750925,-8.412284,-7.820291,-2.274505,9.455042,4.724925,-6.174405,7.205511,-6.541378,6.491301,-4.963819,0.673514,2.399040,2.943395,7.516777,-8.606076,-4.338697,5.052784,1.177240,7.437309,7.358463,-6.560124,-4.262284,-9.942310,8.752238,0.220675,6.518374,6.138896,-6.552380,6.219485,5.148852,8.582574,3.481309,-5.312525,-0.236291,0.462908,1.921859,-5.465617,-5.706343,-5.212006,-6.625751,2.628705,4.261133,-7.883247,1.306232,3.539258,7.637529,-7.172593,9.625619,5.906155,6.793602,-9.839769,-9.695891,-7.517422,5.187592,4.088585,-3.690832,4.228714,9.520876,-7.124536,-8.738717,9.521579,-1.159480,-8.833627,2.640348,9.602365,-6.770187,1.122018,-7.357379,7.009986,-2.669669,7.816682,1.851771,-5.544939,-4.728487,5.837087,-7.181968,4.554987,4.643391,5.353252,6.977904,5.268328,-8.184657,3.174156,-7.185138,-2.638925,6.239417,9.551188,1.421120,4.116534,-2.938307,-1.439018,5.824159,0.054127,3.372475,2.147839,-7.916785,-4.579684,5.278852,8.876327,0.767799,3.632521,-5.404825,5.204114,-2.804737,7.708363,-9.620394,-9.030975,8.370069,-4.674477,-2.473540,-7.486181,-5.854957,5.297055,-7.257991,2.229313,-3.323121,-6.984867,1.389180,-9.057022,-0.423132,4.610389,0.425280,-8.474811,1.860175,1.250764,5.597215,-7.912580,3.779430,6.015602,0.032855,0.795794,4.768783,-7.886787,2.146465,5.328239,-2.475211,-1.304244,-6.786404,7.129917,8.271438,7.531421,-5.270096,-4.944393,6.147687,5.957219,-3.160419,-2.752584,-5.039531,3.981686,-0.587565,5.483886,0.140244,-0.046390,-3.422875,1.935360,3.461295,-8.973286,1.388010,2.361093,8.203418,3.327094,9.400325,4.251200,-2.723556,9.923055,5.038138,4.095181,2.245412,-5.132511,6.626060,3.414377,-9.575039,-0.362017,5.326638,-0.256542,-9.609599,-9.016144,-5.301438,3.130794,-1.602695,2.974595,9.858835,-7.944286,-1.155139,0.809280,4.378422,-6.810688,-5.910648,9.251899,-3.110226,-1.040408,8.607110,-0.883022,2.938929,-2.688500,1.608772,0.217870,-2.693643,3.521072,8.071155,8.097014,0.578881,-6.604039,-7.220235,4.461875,-6.575804,-5.675256,7.577484,6.207880,-5.759303,-5.564214,4.020823,2.597614,-7.801632,-5.769547,7.740355,-9.687504,-7.478690,-0.771126,-2.033347,2.036322,-5.952461,-1.848946,3.496515,-0.644898,2.807430,8.960486,-4.261743,-9.424188,7.171465,-5.420836,-6.254247,8.726898,-2.616072,-1.829455,-0.253746,7.078907,3.385583,-7.484950,3.880636,-1.149504,2.267481,5.556075,-1.118118,-5.361276,-8.623821,-3.730037,3.588219,2.770841,-3.323549,-7.461020,-2.336000,2.028211,1.934621,-2.950667,-4.958548,5.040462,-7.595026,4.572265,0.222117,-4.208885,3.861774,-0.490720,-6.779447,-4.878270,1.646384,0.946504,-6.554881,0.554707,-5.230968,-7.526858,8.247967,3.802368,-7.645943,-8.805806,-2.291612,0.413326,-6.313842,6.473902,-4.873392,7.744132,-0.470427,3.451491,2.162014,1.683583,-1.127574,-9.627621,6.664601,8.862003,-4.906527,9.421284,-3.368391,-5.492997,2.000143,9.921431,5.608615,5.586583,-4.699974,-3.836049,-9.971991,1.477685,3.754825,-6.110386,5.286381,-2.672251,3.014042,9.203384,0.808681,-1.373998,0.262867,-0.875506,-5.106433,-3.191158,-5.178470,-8.831446,-9.502591,6.548830,0.893167,7.243663,8.813225,8.889692,6.175122,-5.565011,-3.941892,2.545935,-6.621216,6.226748,-0.420994,2.145359,-6.709459,0.225912,-0.823887,2.991465,-4.648824,-3.560843,-4.984737], dtype = "float64")#candidate|330|(512,)|const|float64
call_329 = relay.TupleGetItem(func_176_call(relay.reshape(const_330.astype('float64'), [16, 8, 4])), 0)
call_331 = relay.TupleGetItem(func_178_call(relay.reshape(const_330.astype('float64'), [16, 8, 4])), 0)
output = relay.Tuple([bop_323,bop_326,call_329,const_330,])
output2 = relay.Tuple([bop_323,bop_326,call_331,const_330,])
func_332 = relay.Function([var_316,var_319,], output)
mod['func_332'] = func_332
mod = relay.transform.InferType()(mod)
var_333 = relay.var("var_333", dtype = "float32", shape = (6, 12, 15))#candidate|333|(6, 12, 15)|var|float32
var_334 = relay.var("var_334", dtype = "float32", shape = (6, 12, 15))#candidate|334|(6, 12, 15)|var|float32
output = func_332(var_333,var_334,)
func_335 = relay.Function([var_333,var_334,], output)
mutated_mod['func_335'] = func_335
mutated_mod = relay.transform.InferType()(mutated_mod)
const_337 = relay.const([-8.544696,-7.558895,5.787653,7.051704,-3.341328], dtype = "float32")#candidate|337|(5,)|const|float32
uop_338 = relay.log(const_337.astype('float32')) # shape=(5,)
bop_340 = relay.bitwise_xor(uop_338.astype('uint8'), relay.reshape(const_337.astype('uint8'), relay.shape_of(uop_338))) # shape=(5,)
uop_343 = relay.acosh(uop_338.astype('float64')) # shape=(5,)
uop_345 = relay.cosh(uop_343.astype('float32')) # shape=(5,)
uop_347 = relay.acosh(const_337.astype('float32')) # shape=(5,)
uop_349 = relay.acosh(uop_343.astype('float32')) # shape=(5,)
uop_351 = relay.sqrt(uop_349.astype('float32')) # shape=(5,)
uop_353 = relay.rsqrt(const_337.astype('float32')) # shape=(5,)
bop_355 = relay.minimum(bop_340.astype('int16'), relay.reshape(uop_345.astype('int16'), relay.shape_of(bop_340))) # shape=(5,)
output = relay.Tuple([uop_347,uop_351,uop_353,bop_355,])
output2 = relay.Tuple([uop_347,uop_351,uop_353,bop_355,])
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()()
res3 = intrp3.evaluate()()
res4 = intrp4.evaluate()()
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()()
res7 = intrp7.evaluate()()
res8 = intrp8.evaluate()()
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()()
res11 = intrp11.evaluate()()
res12 = intrp12.evaluate()()
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()()
res15 = intrp15.evaluate()()
res16 = intrp16.evaluate()()
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()()
res19 = intrp19.evaluate()()
res20 = intrp20.evaluate()()
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()()
res23 = intrp23.evaluate()()
res24 = intrp24.evaluate()()
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()

'''9: TVMFuncCall
8: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::transform::Pass, tvm::IRModule)>::AssignTypedLambda<tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}>(tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
7: tvm::transform::Pass::operator()(tvm::IRModule) const
6: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::LazyGradientInit(tvm::RelayExpr const&, tvm::IRModule)
0: tvm::relay::CheckFeature(tvm::RelayExpr const&, tvm::relay::FeatureSet const&)

'''