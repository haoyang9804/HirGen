import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (7, 8))#candidate|0|(7, 8)|var|float64
var_1 = relay.var("var_1", dtype = "float64", shape = (7, 8))#candidate|1|(7, 8)|var|float64
bop_2 = relay.divide(var_0.astype('float64'), relay.reshape(var_1.astype('float64'), relay.shape_of(var_0))) # shape=(7, 8)
bop_5 = relay.left_shift(var_0.astype('uint32'), relay.reshape(var_1.astype('uint32'), relay.shape_of(var_0))) # shape=(7, 8)
uop_8 = relay.exp(bop_2.astype('float32')) # shape=(7, 8)
bop_10 = relay.logical_and(uop_8.astype('bool'), relay.reshape(var_1.astype('bool'), relay.shape_of(uop_8))) # shape=(7, 8)
bop_13 = relay.bitwise_xor(uop_8.astype('int16'), relay.reshape(var_1.astype('int16'), relay.shape_of(uop_8))) # shape=(7, 8)
uop_16 = relay.atanh(bop_10.astype('float64')) # shape=(7, 8)
var_18 = relay.var("var_18", dtype = "float64", shape = (7, 8))#candidate|18|(7, 8)|var|float64
bop_19 = relay.logical_and(uop_16.astype('bool'), relay.reshape(var_18.astype('bool'), relay.shape_of(uop_16))) # shape=(7, 8)
uop_22 = relay.cosh(uop_8.astype('float64')) # shape=(7, 8)
uop_24 = relay.acosh(bop_19.astype('float32')) # shape=(7, 8)
var_26 = relay.var("var_26", dtype = "bool", shape = (7, 8))#candidate|26|(7, 8)|var|bool
bop_27 = relay.bitwise_xor(bop_19.astype('int32'), relay.reshape(var_26.astype('int32'), relay.shape_of(bop_19))) # shape=(7, 8)
bop_30 = relay.floor_mod(uop_24.astype('float32'), relay.reshape(bop_19.astype('float32'), relay.shape_of(uop_24))) # shape=(7, 8)
uop_33 = relay.sqrt(uop_24.astype('float32')) # shape=(7, 8)
uop_35 = relay.cosh(uop_33.astype('float64')) # shape=(7, 8)
var_37 = relay.var("var_37", dtype = "float64", shape = (7, 8))#candidate|37|(7, 8)|var|float64
bop_38 = relay.greater(uop_35.astype('bool'), relay.reshape(var_37.astype('bool'), relay.shape_of(uop_35))) # shape=(7, 8)
uop_41 = relay.asinh(uop_33.astype('float64')) # shape=(7, 8)
bop_43 = relay.multiply(uop_35.astype('int8'), relay.reshape(bop_19.astype('int8'), relay.shape_of(uop_35))) # shape=(7, 8)
var_46 = relay.var("var_46", dtype = "float64", shape = (7, 8))#candidate|46|(7, 8)|var|float64
bop_47 = relay.logical_and(uop_41.astype('bool'), relay.reshape(var_46.astype('bool'), relay.shape_of(uop_41))) # shape=(7, 8)
uop_50 = relay.exp(bop_30.astype('float64')) # shape=(7, 8)
output = relay.Tuple([bop_5,bop_13,uop_22,bop_27,bop_38,bop_43,bop_47,uop_50,])
output2 = relay.Tuple([bop_5,bop_13,uop_22,bop_27,bop_38,bop_43,bop_47,uop_50,])
func_52 = relay.Function([var_0,var_1,var_18,var_26,var_37,var_46,], output)
mod['func_52'] = func_52
mod = relay.transform.InferType()(mod)
mutated_mod['func_52'] = func_52
mutated_mod = relay.transform.InferType()(mutated_mod)
func_52_call = mutated_mod.get_global_var('func_52')
var_54 = relay.var("var_54", dtype = "float64", shape = (7, 8))#candidate|54|(7, 8)|var|float64
var_55 = relay.var("var_55", dtype = "float64", shape = (7, 8))#candidate|55|(7, 8)|var|float64
var_56 = relay.var("var_56", dtype = "float64", shape = (7, 8))#candidate|56|(7, 8)|var|float64
var_57 = relay.var("var_57", dtype = "bool", shape = (7, 8))#candidate|57|(7, 8)|var|bool
var_58 = relay.var("var_58", dtype = "float64", shape = (7, 8))#candidate|58|(7, 8)|var|float64
var_59 = relay.var("var_59", dtype = "float64", shape = (7, 8))#candidate|59|(7, 8)|var|float64
call_53 = func_52_call(var_54,var_55,var_56,var_57,var_58,var_59,)
output = call_53
func_60 = relay.Function([var_54,var_55,var_56,var_57,var_58,var_59,], output)
mutated_mod['func_60'] = func_60
mutated_mod = relay.transform.InferType()(mutated_mod)
var_62 = relay.var("var_62", dtype = "int16", shape = (4,))#candidate|62|(4,)|var|int16
var_63 = relay.var("var_63", dtype = "int16", shape = (4,))#candidate|63|(4,)|var|int16
bop_64 = relay.greater(var_62.astype('bool'), relay.reshape(var_63.astype('bool'), relay.shape_of(var_62))) # shape=(4,)
uop_67 = relay.log2(var_62.astype('float64')) # shape=(4,)
bop_69 = relay.bitwise_or(uop_67.astype('int16'), relay.reshape(bop_64.astype('int16'), relay.shape_of(uop_67))) # shape=(4,)
uop_72 = relay.asin(bop_69.astype('float32')) # shape=(4,)
uop_74 = relay.acosh(uop_67.astype('float32')) # shape=(4,)
output = relay.Tuple([uop_72,uop_74,])
output2 = relay.Tuple([uop_72,uop_74,])
func_76 = relay.Function([var_62,var_63,], output)
mod['func_76'] = func_76
mod = relay.transform.InferType()(mod)
mutated_mod['func_76'] = func_76
mutated_mod = relay.transform.InferType()(mutated_mod)
func_76_call = mutated_mod.get_global_var('func_76')
var_78 = relay.var("var_78", dtype = "int16", shape = (4,))#candidate|78|(4,)|var|int16
var_79 = relay.var("var_79", dtype = "int16", shape = (4,))#candidate|79|(4,)|var|int16
call_77 = func_76_call(var_78,var_79,)
output = call_77
func_80 = relay.Function([var_78,var_79,], output)
mutated_mod['func_80'] = func_80
mutated_mod = relay.transform.InferType()(mutated_mod)
var_82 = relay.var("var_82", dtype = "float32", shape = (12, 15))#candidate|82|(12, 15)|var|float32
uop_83 = relay.log2(var_82.astype('float32')) # shape=(12, 15)
bop_85 = relay.add(var_82.astype('int8'), relay.reshape(uop_83.astype('int8'), relay.shape_of(var_82))) # shape=(12, 15)
uop_88 = relay.atanh(uop_83.astype('float64')) # shape=(12, 15)
uop_90 = relay.acosh(uop_88.astype('float64')) # shape=(12, 15)
const_92 = relay.const([[-7.480132,-3.789552,-2.037461,-5.416442,8.667478,-4.020665,8.983107,-2.531987,-4.130613,-9.524830,7.513392,1.529365,-0.162117,3.309721,-0.340513],[-7.739264,1.132903,8.020095,8.469958,9.884008,5.478609,5.499562,-6.580055,6.921769,5.603449,5.593886,1.696967,-1.227861,5.272090,-3.484548],[9.657254,-7.748036,2.286156,-1.549876,-6.925833,0.468876,-3.450250,-4.866873,0.372502,1.756398,1.690392,4.653468,4.690904,7.655713,6.719061],[-7.906590,-1.286473,-6.531711,7.066412,-5.131093,-0.811976,0.528938,-7.129391,5.029802,2.286971,9.332306,7.630629,-4.555929,-9.857859,9.493425],[6.510666,-8.856887,6.204160,1.513217,-2.867953,-7.571578,6.520303,0.286030,7.428081,8.364139,9.251769,-9.799049,-1.626127,-7.033543,-8.642819],[-9.526280,4.381960,9.871221,0.406217,6.988648,9.215096,-0.488668,-4.630882,-4.185920,-1.149885,-9.546757,-5.661018,8.930480,0.793445,-0.805841],[5.367217,2.026541,0.551843,5.428241,1.352667,-8.184500,-9.349644,-3.286529,-1.694416,4.723114,-3.776772,3.111717,-4.799335,9.025807,-4.478485],[0.769319,1.808209,-1.107836,7.324301,8.098016,7.408986,1.616041,2.609560,-2.429676,3.527480,-9.897939,8.472558,-4.698377,-8.113034,-6.278965],[8.911099,3.394876,-6.122670,-2.473839,8.299993,0.964993,3.447784,0.990713,-3.006666,9.157734,8.994443,5.502373,6.364351,-4.601400,-7.773102],[-9.021581,-7.483510,-2.833445,7.010263,-4.080963,-3.915121,0.505405,4.320584,-0.438458,-3.668502,5.234809,-7.642555,7.569531,-4.806389,0.871344],[-1.384540,1.781484,7.628830,6.077726,-0.047244,-4.477626,7.583249,-3.006367,-4.003639,-1.274662,-8.654747,-1.293922,6.573438,-1.975936,3.092723],[-8.029130,6.498179,-5.831478,0.191890,-9.520927,9.164239,-8.645949,-3.384911,2.353601,-1.374796,-4.084334,9.484525,4.552753,-2.425947,2.298528]], dtype = "float64")#candidate|92|(12, 15)|const|float64
bop_93 = relay.less_equal(uop_90.astype('bool'), relay.reshape(const_92.astype('bool'), relay.shape_of(uop_90))) # shape=(12, 15)
uop_96 = relay.rsqrt(var_82.astype('float64')) # shape=(12, 15)
uop_98 = relay.cosh(uop_88.astype('float32')) # shape=(12, 15)
uop_100 = relay.sigmoid(uop_90.astype('float64')) # shape=(12, 15)
bop_102 = relay.power(uop_100.astype('float64'), relay.reshape(bop_85.astype('float64'), relay.shape_of(uop_100))) # shape=(12, 15)
uop_105 = relay.sin(uop_90.astype('float64')) # shape=(12, 15)
uop_107 = relay.exp(uop_98.astype('float64')) # shape=(12, 15)
uop_109 = relay.tan(uop_107.astype('float32')) # shape=(12, 15)
const_111 = relay.const([[-1.074116,-0.428630,1.105902,1.574652,-1.144711,-6.961795,8.116046,2.904924,-7.920135,-4.811581,-3.404450,-8.535438,-1.479620,6.569520,-4.739585],[-4.999329,-9.671090,5.342470,-7.324126,-1.225993,6.503781,-9.934184,3.790158,4.811314,6.478668,4.188892,3.659328,-1.356919,-0.028515,1.033354],[-9.971348,8.320909,-5.792126,9.088429,3.827018,-1.041792,-0.783016,4.429076,-3.830311,7.943847,-1.147878,5.409691,-1.356978,9.251032,-9.935979],[-0.412188,-5.220705,4.979703,-2.178873,-8.956463,-0.468607,-3.308716,7.136141,9.331202,-3.309735,6.547690,2.529960,-2.866890,-6.878317,-3.275471],[-6.697626,-8.555621,-8.564330,-7.989796,-7.257116,1.459357,7.277878,9.029279,7.207913,-6.451444,-9.134801,5.288467,5.969482,6.450239,4.385159],[-0.612727,-3.677912,0.115773,-1.603465,3.753766,-6.743206,2.399145,7.332612,-8.894151,8.665075,-5.999503,-9.009037,-1.218377,-5.756381,-0.020273],[2.889813,2.758492,3.104748,7.324945,-4.788670,-8.185417,7.005704,-9.518252,-5.229066,4.467618,-0.196014,3.975687,4.954654,-6.051216,-3.718966],[-5.978921,4.019246,8.826586,-3.263462,-1.007583,-5.473683,2.933080,-4.654250,-8.564967,-4.917472,5.391386,2.133971,7.373299,-6.655231,-3.798122],[-9.242136,-1.419673,9.877419,-1.548255,-8.760141,-5.426778,0.814045,-7.138418,-5.959695,8.517307,1.739161,9.863413,9.926418,1.992725,-9.542537],[-5.972438,-6.403175,-8.025851,9.624482,5.208613,9.860848,-6.430118,0.129260,-8.372743,4.077698,-1.585195,-8.552037,3.513297,6.613305,1.912330],[4.526347,-6.251972,7.319999,3.586761,-8.169694,-4.008237,-8.329217,-8.105900,-6.349805,8.233146,-3.746954,-4.082583,0.015144,7.337864,-6.015844],[-7.636856,-7.701685,-4.824936,8.779961,-8.209013,-8.854980,8.556435,8.119994,6.194158,3.720147,5.835720,-8.387473,-9.466124,-7.842474,-0.822191]], dtype = "float32")#candidate|111|(12, 15)|const|float32
bop_112 = relay.maximum(uop_109.astype('int8'), relay.reshape(const_111.astype('int8'), relay.shape_of(uop_109))) # shape=(12, 15)
bop_115 = relay.subtract(uop_88.astype('uint64'), relay.reshape(bop_93.astype('uint64'), relay.shape_of(uop_88))) # shape=(12, 15)
uop_118 = relay.erf(bop_93.astype('float32')) # shape=(12, 15)
func_76_call = mod.get_global_var('func_76')
func_80_call = mutated_mod.get_global_var('func_80')
const_121 = relay.const([10,2,-7,-5], dtype = "int16")#candidate|121|(4,)|const|int16
call_120 = relay.TupleGetItem(func_76_call(relay.reshape(const_121.astype('int16'), [4,]), relay.reshape(const_121.astype('int16'), [4,]), ), 1)
call_122 = relay.TupleGetItem(func_80_call(relay.reshape(const_121.astype('int16'), [4,]), relay.reshape(const_121.astype('int16'), [4,]), ), 1)
uop_123 = relay.tan(bop_112.astype('float64')) # shape=(12, 15)
const_125 = relay.const([[-2,2,-4,6,-9,-5,-6,8,-6,10,-6,9,5,3,-8],[1,7,-5,-2,-2,-6,3,6,3,-4,9,3,2,-9,3],[-7,7,-8,7,-5,-2,-10,3,8,-5,3,2,3,-4,-10],[-10,-1,-3,3,-10,2,9,9,-5,10,-1,7,-6,9,3],[-7,6,-3,-7,-10,-5,3,2,8,10,9,-10,5,5,6],[-3,2,-10,-10,-1,8,-1,-10,2,10,5,-3,6,-10,4],[-10,10,-10,-8,9,-1,3,-7,-6,-10,-1,8,1,6,6],[1,8,-7,-4,-9,4,2,-5,-10,-6,-9,-7,-4,2,2],[-9,3,4,6,-7,-3,-6,-8,-1,-1,-1,5,9,8,9],[-1,-3,-4,4,-7,4,2,4,-8,-8,-2,-1,-7,-8,4],[-5,6,9,6,-9,-6,4,2,8,3,-10,5,3,4,6],[-1,-2,10,-6,-7,-1,9,-1,-1,2,6,-10,5,-4,-7]], dtype = "uint64")#candidate|125|(12, 15)|const|uint64
bop_126 = relay.greater_equal(bop_115.astype('bool'), relay.reshape(const_125.astype('bool'), relay.shape_of(bop_115))) # shape=(12, 15)
func_52_call = mod.get_global_var('func_52')
func_60_call = mutated_mod.get_global_var('func_60')
var_130 = relay.var("var_130", dtype = "float64", shape = (56,))#candidate|130|(56,)|var|float64
call_129 = relay.TupleGetItem(func_52_call(relay.reshape(var_130.astype('float64'), [7, 8]), relay.reshape(var_130.astype('float64'), [7, 8]), relay.reshape(var_130.astype('float64'), [7, 8]), relay.reshape(var_130.astype('bool'), [7, 8]), relay.reshape(var_130.astype('float64'), [7, 8]), relay.reshape(var_130.astype('float64'), [7, 8]), ), 1)
call_131 = relay.TupleGetItem(func_60_call(relay.reshape(var_130.astype('float64'), [7, 8]), relay.reshape(var_130.astype('float64'), [7, 8]), relay.reshape(var_130.astype('float64'), [7, 8]), relay.reshape(var_130.astype('bool'), [7, 8]), relay.reshape(var_130.astype('float64'), [7, 8]), relay.reshape(var_130.astype('float64'), [7, 8]), ), 1)
uop_132 = relay.atan(uop_123.astype('float64')) # shape=(12, 15)
bop_134 = relay.bitwise_and(uop_132.astype('int64'), relay.reshape(const_92.astype('int64'), relay.shape_of(uop_132))) # shape=(12, 15)
bop_137 = relay.logical_or(uop_109.astype('bool'), relay.reshape(const_125.astype('bool'), relay.shape_of(uop_109))) # shape=(12, 15)
bop_140 = relay.bitwise_or(uop_123.astype('uint16'), relay.reshape(bop_126.astype('uint16'), relay.shape_of(uop_123))) # shape=(12, 15)
bop_143 = relay.minimum(uop_98.astype('float32'), relay.reshape(var_82.astype('float32'), relay.shape_of(uop_98))) # shape=(12, 15)
uop_146 = relay.asinh(bop_140.astype('float32')) # shape=(12, 15)
uop_148 = relay.cos(bop_140.astype('float64')) # shape=(12, 15)
bop_150 = relay.floor_divide(uop_123.astype('float64'), relay.reshape(uop_98.astype('float64'), relay.shape_of(uop_123))) # shape=(12, 15)
bop_153 = relay.bitwise_or(uop_132.astype('int64'), relay.reshape(bop_143.astype('int64'), relay.shape_of(uop_132))) # shape=(12, 15)
uop_156 = relay.log(uop_132.astype('float64')) # shape=(12, 15)
bop_158 = relay.logical_and(uop_156.astype('bool'), relay.reshape(uop_98.astype('bool'), relay.shape_of(uop_156))) # shape=(12, 15)
uop_161 = relay.erf(bop_158.astype('float32')) # shape=(12, 15)
output = relay.Tuple([uop_96,bop_102,uop_105,uop_118,call_120,const_121,call_129,var_130,bop_134,bop_137,uop_146,uop_148,bop_150,bop_153,uop_161,])
output2 = relay.Tuple([uop_96,bop_102,uop_105,uop_118,call_122,const_121,call_131,var_130,bop_134,bop_137,uop_146,uop_148,bop_150,bop_153,uop_161,])
func_163 = relay.Function([var_82,var_130,], output)
mod['func_163'] = func_163
mod = relay.transform.InferType()(mod)
var_164 = relay.var("var_164", dtype = "float32", shape = (12, 15))#candidate|164|(12, 15)|var|float32
var_165 = relay.var("var_165", dtype = "float64", shape = (56,))#candidate|165|(56,)|var|float64
output = func_163(var_164,var_165,)
func_166 = relay.Function([var_164,var_165,], output)
mutated_mod['func_166'] = func_166
mutated_mod = relay.transform.InferType()(mutated_mod)
var_168 = relay.var("var_168", dtype = "float32", shape = (11, 13, 12))#candidate|168|(11, 13, 12)|var|float32
const_169 = relay.constdtype = "float32")#candidate|169|(11, 13, 12)|const|float32
bop_170 = relay.minimum(var_168.astype('float32'), relay.reshape(const_169.astype('float32'), relay.shape_of(var_168))) # shape=(11, 13, 12)
var_173 = relay.var("var_173", dtype = "float32", shape = (11, 13, 12))#candidate|173|(11, 13, 12)|var|float32
bop_174 = relay.not_equal(bop_170.astype('bool'), relay.reshape(var_173.astype('bool'), relay.shape_of(bop_170))) # shape=(11, 13, 12)
bop_177 = relay.logical_or(const_169.astype('bool'), relay.reshape(bop_170.astype('bool'), relay.shape_of(const_169))) # shape=(11, 13, 12)
uop_180 = relay.cos(var_173.astype('float64')) # shape=(11, 13, 12)
uop_182 = relay.acosh(const_169.astype('float64')) # shape=(11, 13, 12)
bop_184 = relay.logical_or(bop_170.astype('bool'), relay.reshape(bop_177.astype('bool'), relay.shape_of(bop_170))) # shape=(11, 13, 12)
uop_187 = relay.acosh(uop_180.astype('float32')) # shape=(11, 13, 12)
output = relay.Tuple([bop_174,uop_182,bop_184,uop_187,])
output2 = relay.Tuple([bop_174,uop_182,bop_184,uop_187,])
func_189 = relay.Function([var_168,var_173,], output)
mod['func_189'] = func_189
mod = relay.transform.InferType()(mod)
mutated_mod['func_189'] = func_189
mutated_mod = relay.transform.InferType()(mutated_mod)
func_189_call = mutated_mod.get_global_var('func_189')
var_191 = relay.var("var_191", dtype = "float32", shape = (11, 13, 12))#candidate|191|(11, 13, 12)|var|float32
var_192 = relay.var("var_192", dtype = "float32", shape = (11, 13, 12))#candidate|192|(11, 13, 12)|var|float32
call_190 = func_189_call(var_191,var_192,)
output = call_190
func_193 = relay.Function([var_191,var_192,], output)
mutated_mod['func_193'] = func_193
mutated_mod = relay.transform.InferType()(mutated_mod)
var_195 = relay.var("var_195", dtype = "int8", shape = (15,))#candidate|195|(15,)|var|int8
var_196 = relay.var("var_196", dtype = "int8", shape = (15,))#candidate|196|(15,)|var|int8
bop_197 = relay.equal(var_195.astype('bool'), relay.reshape(var_196.astype('bool'), relay.shape_of(var_195))) # shape=(15,)
uop_200 = relay.rsqrt(var_195.astype('float32')) # shape=(15,)
bop_202 = relay.bitwise_xor(uop_200.astype('int32'), relay.reshape(bop_197.astype('int32'), relay.shape_of(uop_200))) # shape=(15,)
bop_205 = relay.floor_mod(bop_202.astype('float64'), relay.reshape(var_195.astype('float64'), relay.shape_of(bop_202))) # shape=(15,)
bop_208 = relay.greater(var_195.astype('bool'), relay.reshape(uop_200.astype('bool'), relay.shape_of(var_195))) # shape=(15,)
var_211 = relay.var("var_211", dtype = "bool", shape = (15,))#candidate|211|(15,)|var|bool
bop_212 = relay.maximum(bop_208.astype('int64'), relay.reshape(var_211.astype('int64'), relay.shape_of(bop_208))) # shape=(15,)
var_215 = relay.var("var_215", dtype = "bool", shape = (15,))#candidate|215|(15,)|var|bool
bop_216 = relay.less(bop_208.astype('bool'), relay.reshape(var_215.astype('bool'), relay.shape_of(bop_208))) # shape=(15,)
uop_219 = relay.sigmoid(bop_202.astype('float64')) # shape=(15,)
uop_221 = relay.sin(uop_219.astype('float64')) # shape=(15,)
uop_223 = relay.log2(uop_200.astype('float32')) # shape=(15,)
var_225 = relay.var("var_225", dtype = "float64", shape = (15,))#candidate|225|(15,)|var|float64
bop_226 = relay.right_shift(uop_221.astype('uint16'), relay.reshape(var_225.astype('uint16'), relay.shape_of(uop_221))) # shape=(15,)
var_229 = relay.var("var_229", dtype = "bool", shape = (15,))#candidate|229|(15,)|var|bool
bop_230 = relay.floor_mod(bop_216.astype('float64'), relay.reshape(var_229.astype('float64'), relay.shape_of(bop_216))) # shape=(15,)
uop_233 = relay.sigmoid(uop_219.astype('float32')) # shape=(15,)
bop_235 = relay.less_equal(uop_221.astype('bool'), relay.reshape(var_225.astype('bool'), relay.shape_of(uop_221))) # shape=(15,)
var_238 = relay.var("var_238", dtype = "float64", shape = (15,))#candidate|238|(15,)|var|float64
bop_239 = relay.greater(uop_221.astype('bool'), relay.reshape(var_238.astype('bool'), relay.shape_of(uop_221))) # shape=(15,)
bop_242 = relay.logical_or(uop_221.astype('bool'), relay.reshape(var_229.astype('bool'), relay.shape_of(uop_221))) # shape=(15,)
bop_245 = relay.bitwise_or(uop_233.astype('int16'), relay.reshape(var_211.astype('int16'), relay.shape_of(uop_233))) # shape=(15,)
uop_248 = relay.cosh(uop_219.astype('float64')) # shape=(15,)
func_52_call = mod.get_global_var('func_52')
func_60_call = mutated_mod.get_global_var('func_60')
const_251 = relay.const([6.077318,-6.643933,-2.248811,5.865315,1.069187,-0.339072,-2.836090,-5.795086,-6.122134,-3.748563,4.924411,5.810039,-7.902054,7.244202,-1.051115,-1.002198,7.003997,-6.898589,-3.390176,-5.205973,-8.876637,-3.050750,8.210155,-4.266204,-0.599077,-8.712293,5.824187,-1.244118,5.856981,1.965600,6.252355,4.468479,7.005444,-6.208335,-5.044691,1.929556,9.002696,3.372752,-1.160825,-5.358079,-8.762685,8.363047,0.812779,-9.434359,7.276372,-4.562940,5.616889,1.475851,-7.215904,0.805862,5.915810,5.397785,-8.889074,2.960026,-6.680241,8.181481], dtype = "float64")#candidate|251|(56,)|const|float64
call_250 = relay.TupleGetItem(func_52_call(relay.reshape(const_251.astype('float64'), [7, 8]), relay.reshape(const_251.astype('float64'), [7, 8]), relay.reshape(const_251.astype('float64'), [7, 8]), relay.reshape(const_251.astype('bool'), [7, 8]), relay.reshape(const_251.astype('float64'), [7, 8]), relay.reshape(const_251.astype('float64'), [7, 8]), ), 2)
call_252 = relay.TupleGetItem(func_60_call(relay.reshape(const_251.astype('float64'), [7, 8]), relay.reshape(const_251.astype('float64'), [7, 8]), relay.reshape(const_251.astype('float64'), [7, 8]), relay.reshape(const_251.astype('bool'), [7, 8]), relay.reshape(const_251.astype('float64'), [7, 8]), relay.reshape(const_251.astype('float64'), [7, 8]), ), 2)
bop_253 = relay.less(bop_242.astype('bool'), relay.reshape(bop_245.astype('bool'), relay.shape_of(bop_242))) # shape=(15,)
uop_256 = relay.asinh(uop_219.astype('float32')) # shape=(15,)
bop_258 = relay.logical_and(uop_221.astype('bool'), relay.reshape(var_195.astype('bool'), relay.shape_of(uop_221))) # shape=(15,)
func_52_call = mod.get_global_var('func_52')
func_60_call = mutated_mod.get_global_var('func_60')
call_261 = relay.TupleGetItem(func_52_call(relay.reshape(call_250.astype('float64'), [7, 8]), relay.reshape(const_251.astype('float64'), [7, 8]), relay.reshape(call_250.astype('float64'), [7, 8]), relay.reshape(const_251.astype('bool'), [7, 8]), relay.reshape(const_251.astype('float64'), [7, 8]), relay.reshape(call_250.astype('float64'), [7, 8]), ), 5)
call_262 = relay.TupleGetItem(func_60_call(relay.reshape(call_250.astype('float64'), [7, 8]), relay.reshape(const_251.astype('float64'), [7, 8]), relay.reshape(call_250.astype('float64'), [7, 8]), relay.reshape(const_251.astype('bool'), [7, 8]), relay.reshape(const_251.astype('float64'), [7, 8]), relay.reshape(call_250.astype('float64'), [7, 8]), ), 5)
bop_263 = relay.floor_mod(bop_239.astype('float32'), relay.reshape(var_238.astype('float32'), relay.shape_of(bop_239))) # shape=(15,)
var_266 = relay.var("var_266", dtype = "int16", shape = (15,))#candidate|266|(15,)|var|int16
bop_267 = relay.logical_or(bop_245.astype('bool'), relay.reshape(var_266.astype('bool'), relay.shape_of(bop_245))) # shape=(15,)
var_270 = relay.var("var_270", dtype = "bool", shape = (15,))#candidate|270|(15,)|var|bool
bop_271 = relay.greater(bop_208.astype('bool'), relay.reshape(var_270.astype('bool'), relay.shape_of(bop_208))) # shape=(15,)
uop_274 = relay.log2(bop_267.astype('float32')) # shape=(15,)
uop_276 = relay.log2(uop_274.astype('float64')) # shape=(15,)
bop_278 = relay.logical_xor(uop_276.astype('int32'), relay.reshape(uop_223.astype('int32'), relay.shape_of(uop_276))) # shape=(15,)
output = relay.Tuple([bop_205,bop_212,bop_226,bop_230,bop_235,uop_248,call_250,const_251,bop_253,uop_256,bop_258,call_261,bop_263,bop_271,bop_278,])
output2 = relay.Tuple([bop_205,bop_212,bop_226,bop_230,bop_235,uop_248,call_252,const_251,bop_253,uop_256,bop_258,call_262,bop_263,bop_271,bop_278,])
func_281 = relay.Function([var_195,var_196,var_211,var_215,var_225,var_229,var_238,var_266,var_270,], output)
mod['func_281'] = func_281
mod = relay.transform.InferType()(mod)
mutated_mod['func_281'] = func_281
mutated_mod = relay.transform.InferType()(mutated_mod)
func_281_call = mutated_mod.get_global_var('func_281')
var_283 = relay.var("var_283", dtype = "int8", shape = (15,))#candidate|283|(15,)|var|int8
var_284 = relay.var("var_284", dtype = "int8", shape = (15,))#candidate|284|(15,)|var|int8
var_285 = relay.var("var_285", dtype = "bool", shape = (15,))#candidate|285|(15,)|var|bool
var_286 = relay.var("var_286", dtype = "bool", shape = (15,))#candidate|286|(15,)|var|bool
var_287 = relay.var("var_287", dtype = "float64", shape = (15,))#candidate|287|(15,)|var|float64
var_288 = relay.var("var_288", dtype = "bool", shape = (15,))#candidate|288|(15,)|var|bool
var_289 = relay.var("var_289", dtype = "float64", shape = (15,))#candidate|289|(15,)|var|float64
var_290 = relay.var("var_290", dtype = "int16", shape = (15,))#candidate|290|(15,)|var|int16
var_291 = relay.var("var_291", dtype = "bool", shape = (15,))#candidate|291|(15,)|var|bool
call_282 = func_281_call(var_283,var_284,var_285,var_286,var_287,var_288,var_289,var_290,var_291,)
output = call_282
func_292 = relay.Function([var_283,var_284,var_285,var_286,var_287,var_288,var_289,var_290,var_291,], output)
mutated_mod['func_292'] = func_292
mutated_mod = relay.transform.InferType()(mutated_mod)
const_294 = relay.const([5,-4,-4,-5,3,6,1,-7,5,-2,-4,10], dtype = "int32")#candidate|294|(12,)|const|int32
const_295 = relay.const([4,9,-10,6,9,-8,9,9,6,8,9,9], dtype = "int32")#candidate|295|(12,)|const|int32
bop_296 = relay.logical_xor(const_294.astype('int32'), relay.reshape(const_295.astype('int32'), relay.shape_of(const_294))) # shape=(12,)
uop_299 = relay.log(const_294.astype('float32')) # shape=(12,)
bop_301 = relay.subtract(uop_299.astype('uint32'), relay.reshape(const_294.astype('uint32'), relay.shape_of(uop_299))) # shape=(12,)
var_304 = relay.var("var_304", dtype = "uint32", shape = (12,))#candidate|304|(12,)|var|uint32
bop_305 = relay.divide(bop_301.astype('float32'), relay.reshape(var_304.astype('float32'), relay.shape_of(bop_301))) # shape=(12,)
uop_308 = relay.rsqrt(bop_301.astype('float32')) # shape=(12,)
bop_310 = relay.mod(uop_299.astype('float64'), relay.reshape(bop_305.astype('float64'), relay.shape_of(uop_299))) # shape=(12,)
uop_313 = relay.sigmoid(bop_296.astype('float32')) # shape=(12,)
bop_315 = relay.bitwise_xor(uop_308.astype('int64'), relay.reshape(bop_301.astype('int64'), relay.shape_of(uop_308))) # shape=(12,)
var_318 = relay.var("var_318", dtype = "int64", shape = (12,))#candidate|318|(12,)|var|int64
bop_319 = relay.floor_mod(bop_315.astype('float64'), relay.reshape(var_318.astype('float64'), relay.shape_of(bop_315))) # shape=(12,)
bop_322 = relay.equal(bop_315.astype('bool'), relay.reshape(bop_310.astype('bool'), relay.shape_of(bop_315))) # shape=(12,)
output = relay.Tuple([uop_313,bop_319,bop_322,])
output2 = relay.Tuple([uop_313,bop_319,bop_322,])
func_325 = relay.Function([var_304,var_318,], output)
mod['func_325'] = func_325
mod = relay.transform.InferType()(mod)
var_326 = relay.var("var_326", dtype = "uint32", shape = (12,))#candidate|326|(12,)|var|uint32
var_327 = relay.var("var_327", dtype = "int64", shape = (12,))#candidate|327|(12,)|var|int64
output = func_325(var_326,var_327,)
func_328 = relay.Function([var_326,var_327,], output)
mutated_mod['func_328'] = func_328
mutated_mod = relay.transform.InferType()(mutated_mod)
var_330 = relay.var("var_330", dtype = "float64", shape = (4, 6, 9))#candidate|330|(4, 6, 9)|var|float64
uop_331 = relay.asinh(var_330.astype('float64')) # shape=(4, 6, 9)
func_52_call = mod.get_global_var('func_52')
func_60_call = mutated_mod.get_global_var('func_60')
const_334 = relay.const([7.011466,8.130228,5.752076,-0.510160,3.050530,4.809559,0.877144,3.727138,-9.835672,-2.763412,-0.904581,-6.567164,6.328007,-1.131625,9.849847,9.739810,4.634834,-9.994134,3.605650,-2.596753,1.479764,-4.882145,4.282175,3.431977,-9.913367,-6.246206,-9.379757,-9.515097,9.012080,-9.501403,6.716398,8.781863,0.393880,5.944067,-4.483620,2.916633,-5.629407,-8.534103,9.182061,0.371441,-0.432203,-2.816660,8.753068,-2.684296,5.124443,5.585878,-9.835385,-0.082094,-4.561574,-2.784611,2.083167,-5.470328,1.241552,5.856658,5.252512,-9.120094], dtype = "float64")#candidate|334|(56,)|const|float64
call_333 = relay.TupleGetItem(func_52_call(relay.reshape(const_334.astype('float64'), [7, 8]), relay.reshape(const_334.astype('float64'), [7, 8]), relay.reshape(const_334.astype('float64'), [7, 8]), relay.reshape(const_334.astype('bool'), [7, 8]), relay.reshape(const_334.astype('float64'), [7, 8]), relay.reshape(const_334.astype('float64'), [7, 8]), ), 7)
call_335 = relay.TupleGetItem(func_60_call(relay.reshape(const_334.astype('float64'), [7, 8]), relay.reshape(const_334.astype('float64'), [7, 8]), relay.reshape(const_334.astype('float64'), [7, 8]), relay.reshape(const_334.astype('bool'), [7, 8]), relay.reshape(const_334.astype('float64'), [7, 8]), relay.reshape(const_334.astype('float64'), [7, 8]), ), 7)
bop_336 = relay.not_equal(uop_331.astype('bool'), relay.reshape(var_330.astype('bool'), relay.shape_of(uop_331))) # shape=(4, 6, 9)
bop_339 = relay.mod(bop_336.astype('float32'), relay.reshape(uop_331.astype('float32'), relay.shape_of(bop_336))) # shape=(4, 6, 9)
uop_342 = relay.sqrt(bop_339.astype('float32')) # shape=(4, 6, 9)
output = relay.Tuple([call_333,const_334,uop_342,])
output2 = relay.Tuple([call_335,const_334,uop_342,])
F = relay.Function([var_330,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_330,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_330= np.array([[[3.288958,-3.120412,3.294133,-9.935227,-0.103844,-8.925076,1.471240,9.441049,2.230398],[6.955273,-9.881394,-7.614192,-0.123125,-5.966781,-6.344770,7.315539,5.504165,-7.168831],[2.714568,0.117291,8.184555,-6.104274,-3.951810,-2.367797,-1.036652,3.154204,1.162771],[5.336726,-5.447486,5.285929,7.137158,-4.761605,7.954616,5.180709,7.407356,-0.030848],[-5.538385,-4.522220,6.379421,0.780510,-8.990188,-1.538097,-8.641373,5.526727,4.274814],[3.428590,1.140881,-2.027649,8.541026,4.498580,-0.370482,6.998202,-8.121767,2.601810]],[[3.935251,1.949392,8.331204,5.550065,5.721705,-1.684044,-2.317049,3.192226,-6.387686],[-1.462313,0.161460,-4.186063,6.238184,6.094802,3.048421,0.524369,7.372197,-3.466809],[-0.569581,-6.297465,4.444264,1.082923,3.829623,4.602223,-7.179846,7.576786,-9.710285],[6.136592,5.736996,2.255396,7.056678,9.171397,-4.396295,1.307302,-1.869472,-3.079234],[0.920402,9.835733,6.282299,-8.847025,-4.604444,2.203302,6.344379,-3.047775,7.401674],[-8.414195,6.387556,9.913493,1.900288,-5.410404,3.489524,8.859336,-4.653536,8.540984]],[[-5.883852,4.660050,4.971770,0.458368,3.773996,1.639167,0.382164,8.339824,-4.764168],[-6.402564,-6.469331,6.643090,-1.117200,-0.050730,0.412630,-6.697419,3.253543,-9.514571],[-8.179201,3.460828,4.543560,6.385417,-5.368671,1.358737,1.058609,7.394920,8.974078],[6.079758,5.272990,-6.300233,9.764450,-7.237146,2.310204,6.318383,-8.122439,0.701305],[-3.280138,4.564392,-8.367573,0.813032,-9.465706,6.201828,4.786482,2.444791,-2.302989],[2.786637,-9.702478,-3.760278,-0.771193,-1.449732,-5.275069,-7.266736,-0.546618,-0.249881]],[[8.822068,-3.039333,-1.598254,3.277579,1.192228,-8.768411,-8.517078,1.474694,-2.302365],[-2.874778,-0.905302,6.943034,7.845842,9.077674,2.123656,-1.108661,0.045000,9.361099],[-9.240673,6.284260,1.010486,6.620644,1.027471,6.387302,-9.082982,-1.605277,-3.311208],[1.303118,5.475256,0.576666,-6.327616,4.778807,-9.254885,9.748827,8.677528,-2.449033],[3.303063,9.797173,6.649136,-4.357928,-5.761545,-3.574233,-2.060442,-9.774556,-8.786914],[7.976502,4.325957,-1.960819,6.131259,-0.145505,-2.670154,7.289651,-5.550968,-0.339827]]], dtype='float64')
module1.set_input('var_330', input_330)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_330, )
res3 = intrp3.evaluate()(input_330, )
res4 = intrp4.evaluate()(input_330, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
module5.set_input('var_330', input_330)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_330, )
res7 = intrp7.evaluate()(input_330, )
res8 = intrp8.evaluate()(input_330, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
module9.set_input('var_330', input_330)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_330, )
res11 = intrp11.evaluate()(input_330, )
res12 = intrp12.evaluate()(input_330, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
module13.set_input('var_330', input_330)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_330, )
res15 = intrp15.evaluate()(input_330, )
res16 = intrp16.evaluate()(input_330, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
module17.set_input('var_330', input_330)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_330, )
res19 = intrp19.evaluate()(input_330, )
res20 = intrp20.evaluate()(input_330, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
module21.set_input('var_330', input_330)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_330, )
res23 = intrp23.evaluate()(input_330, )
res24 = intrp24.evaluate()(input_330, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()

'''6: TVMFuncCall
5: _ZNSt17_Function_handlerIFvN3tvm7runtime7
4: tvm::runtime::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const [clone .isra.808]
3: tvm::runtime::GraphExecutorCreate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module const&, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
2: tvm::runtime::GraphExecutor::Init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
1: tvm::runtime::GraphExecutor::SetupOpExecs()
0: tvm::runtime::GraphExecutor::CreateTVMOp(tvm::runtime::TVMOpParam const&, std::vector<DLTensor, std::allocator<DLTensor> > const&)

'''