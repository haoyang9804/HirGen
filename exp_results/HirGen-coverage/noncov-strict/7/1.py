import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = ())#candidate|0|()|var|float64
uop_1 = relay.sinh(var_0.astype('float64')) # shape=()
var_3 = relay.var("var_3", dtype = "float64", shape = (9,))#candidate|3|(9,)|var|float64
bop_4 = relay.subtract(var_0.astype('uint64'), var_3.astype('uint64')) # shape=(9,)
uop_7 = relay.acos(uop_1.astype('float32')) # shape=()
uop_9 = relay.log2(uop_1.astype('float32')) # shape=()
var_11 = relay.var("var_11", dtype = "float64", shape = (6, 1, 7))#candidate|11|(6, 1, 7)|var|float64
bop_12 = relay.multiply(uop_1.astype('int8'), var_11.astype('int8')) # shape=(6, 1, 7)
uop_15 = relay.cosh(bop_12.astype('float64')) # shape=(6, 1, 7)
bop_17 = relay.right_shift(var_0.astype('int16'), uop_15.astype('int16')) # shape=(6, 1, 7)
uop_20 = relay.tan(bop_12.astype('float32')) # shape=(6, 1, 7)
uop_22 = relay.sinh(uop_20.astype('float32')) # shape=(6, 1, 7)
var_24 = relay.var("var_24", dtype = "float32", shape = (6, 5, 7))#candidate|24|(6, 5, 7)|var|float32
bop_25 = relay.equal(uop_20.astype('bool'), var_24.astype('bool')) # shape=(6, 5, 7)
var_28 = relay.var("var_28", dtype = "float32", shape = (6, 15, 7))#candidate|28|(6, 15, 7)|var|float32
bop_29 = relay.divide(uop_22.astype('float32'), var_28.astype('float32')) # shape=(6, 15, 7)
bop_32 = relay.greater(bop_29.astype('bool'), bop_17.astype('bool')) # shape=(6, 15, 7)
bop_35 = relay.right_shift(bop_29.astype('uint32'), uop_7.astype('uint32')) # shape=(6, 15, 7)
uop_38 = relay.log10(uop_9.astype('float64')) # shape=()
bop_40 = relay.divide(bop_25.astype('float64'), uop_1.astype('float64')) # shape=(6, 5, 7)
bop_43 = relay.floor_mod(bop_17.astype('float64'), relay.reshape(var_11.astype('float64'), relay.shape_of(bop_17))) # shape=(6, 1, 7)
bop_46 = relay.floor_divide(bop_32.astype('float64'), var_0.astype('float64')) # shape=(6, 15, 7)
bop_49 = relay.minimum(bop_46.astype('uint8'), relay.reshape(bop_32.astype('uint8'), relay.shape_of(bop_46))) # shape=(6, 15, 7)
uop_52 = relay.asin(bop_43.astype('float32')) # shape=(6, 1, 7)
bop_54 = relay.logical_and(bop_49.astype('bool'), uop_52.astype('bool')) # shape=(6, 15, 7)
bop_57 = relay.greater(bop_43.astype('bool'), var_24.astype('bool')) # shape=(6, 5, 7)
bop_60 = relay.subtract(uop_38.astype('uint16'), var_24.astype('uint16')) # shape=(6, 5, 7)
bop_63 = relay.subtract(bop_29.astype('float64'), uop_9.astype('float64')) # shape=(6, 15, 7)
var_66 = relay.var("var_66", dtype = "float32", shape = (6, 1, 7))#candidate|66|(6, 1, 7)|var|float32
bop_67 = relay.maximum(uop_22.astype('uint64'), relay.reshape(var_66.astype('uint64'), relay.shape_of(uop_22))) # shape=(6, 1, 7)
uop_70 = relay.sqrt(bop_57.astype('float32')) # shape=(6, 5, 7)
var_72 = relay.var("var_72", dtype = "bool", shape = (6, 5, 7))#candidate|72|(6, 5, 7)|var|bool
bop_73 = relay.greater_equal(bop_25.astype('bool'), relay.reshape(var_72.astype('bool'), relay.shape_of(bop_25))) # shape=(6, 5, 7)
var_76 = relay.var("var_76", dtype = "float32", shape = (6, 9, 7))#candidate|76|(6, 9, 7)|var|float32
bop_77 = relay.less_equal(uop_20.astype('bool'), var_76.astype('bool')) # shape=(6, 9, 7)
uop_80 = relay.acosh(bop_43.astype('float64')) # shape=(6, 1, 7)
bop_82 = relay.subtract(uop_38.astype('int32'), bop_12.astype('int32')) # shape=(6, 1, 7)
const_85 = relay.const([[[7,2,7,-4,9,-1,-2],[-2,1,-10,-9,1,8,-1],[-1,5,-8,-7,-10,2,-3],[-8,3,1,-7,-9,7,-4],[-3,8,-7,-6,-1,-9,-4],[-2,5,3,9,-4,-5,3],[-4,-7,-9,2,9,10,-1],[-10,-2,-1,4,5,-7,2],[-1,-4,-1,1,-5,7,-1],[3,-5,-8,-7,4,-4,-7],[-5,3,-5,8,-7,9,1],[5,2,-5,-10,6,1,-1],[6,-6,-10,-6,5,2,-4],[-3,4,1,3,-4,9,2],[-7,-7,-4,3,-3,8,4]],[[7,10,5,7,1,3,4],[-3,-6,-3,3,-7,1,9],[5,1,3,3,7,-5,-9],[-2,-10,9,-7,-8,-10,-1],[4,-2,3,-2,-7,6,4],[-2,8,6,-1,6,7,-10],[-1,-10,1,4,9,10,-3],[-2,6,10,6,-5,-10,4],[-5,6,5,10,2,-10,2],[-9,-6,9,-2,9,-4,-6],[-7,4,7,7,10,10,3],[-4,-1,9,-3,3,-9,5],[1,8,4,-10,-3,-2,6],[4,-3,-2,1,-6,-2,-10],[-3,2,8,10,3,-10,-8]],[[-1,8,2,4,-8,9,-9],[-4,10,6,1,-6,-6,2],[-7,-2,-5,-4,2,4,4],[5,-2,4,6,6,4,8],[-10,7,3,6,8,6,9],[-1,3,6,-4,-7,-10,8],[2,-5,-8,-10,2,8,9],[1,6,-10,-7,-2,7,-1],[-2,-3,5,-9,-2,6,8],[-3,10,4,5,2,-2,-5],[6,8,-5,4,-10,-4,3],[-6,4,7,-1,-9,-7,-10],[-7,-8,3,3,-10,9,-2],[-4,-3,-6,-8,-2,-4,-7],[5,-9,-4,-7,4,4,-9]],[[-6,6,-5,-10,7,-4,9],[1,8,-5,10,4,6,-9],[2,3,-8,9,7,4,7],[2,-5,-4,-9,-8,10,-8],[9,-7,5,2,9,5,-9],[8,7,4,3,3,-8,-2],[-2,-7,6,-6,3,4,-7],[10,8,-4,9,4,-7,-5],[9,-5,8,6,5,-6,-7],[-4,9,-2,1,-3,5,2],[6,9,5,-8,6,-8,3],[-1,4,9,-7,-4,9,7],[-7,-6,-6,-10,-8,5,-2],[5,9,-8,-9,-10,-9,5],[2,-2,2,-1,4,3,-10]],[[6,-3,7,-4,7,-3,-10],[-9,-2,10,9,-5,-2,2],[1,-4,-3,-5,-9,7,-2],[2,5,-10,4,1,2,6],[5,1,-9,2,-2,-2,5],[6,10,-3,9,9,1,-9],[-8,-1,10,-8,7,-2,-6],[-1,-4,8,6,8,-5,1],[9,-1,2,9,-3,4,6],[10,-10,10,-9,7,-2,-1],[4,-4,-3,-9,8,8,6],[1,9,1,-2,3,-3,-5],[7,-3,1,5,2,-8,3],[-2,-9,10,-4,-7,-4,-8],[-3,4,-10,-3,2,-4,4]],[[-7,-7,8,1,1,-1,-2],[9,3,-4,5,2,6,8],[10,-9,10,5,-9,6,-4],[10,-1,7,-2,1,-4,7],[-8,-7,8,-7,-1,4,1],[-3,6,-10,-4,-5,7,-6],[-10,8,-10,8,2,-4,-8],[-6,-10,-3,-4,-5,9,5],[-5,-4,3,-5,-10,9,-10],[6,3,6,-2,-2,-1,3],[9,5,-6,-1,2,2,-10],[-5,-3,-6,-2,-10,1,-1],[10,-4,1,-3,8,-7,-9],[-4,9,-7,10,-1,-8,-9],[4,3,5,1,5,-6,-7]]], dtype = "uint32")#candidate|85|(6, 15, 7)|const|uint32
bop_86 = relay.add(bop_35.astype('float64'), relay.reshape(const_85.astype('float64'), relay.shape_of(bop_35))) # shape=(6, 15, 7)
bop_89 = relay.floor_mod(var_3.astype('float32'), uop_1.astype('float32')) # shape=(9,)
output = relay.Tuple([bop_4,bop_40,bop_54,bop_60,bop_63,bop_67,uop_70,bop_73,bop_77,uop_80,bop_82,bop_86,bop_89,])
output2 = relay.Tuple([bop_4,bop_40,bop_54,bop_60,bop_63,bop_67,uop_70,bop_73,bop_77,uop_80,bop_82,bop_86,bop_89,])
func_92 = relay.Function([var_0,var_3,var_11,var_24,var_28,var_66,var_72,var_76,], output)
mod['func_92'] = func_92
mod = relay.transform.InferType()(mod)
mutated_mod['func_92'] = func_92
mutated_mod = relay.transform.InferType()(mutated_mod)
func_92_call = mutated_mod.get_global_var('func_92')
var_94 = relay.var("var_94", dtype = "float64", shape = ())#candidate|94|()|var|float64
var_95 = relay.var("var_95", dtype = "float64", shape = (9,))#candidate|95|(9,)|var|float64
var_96 = relay.var("var_96", dtype = "float64", shape = (6, 1, 7))#candidate|96|(6, 1, 7)|var|float64
var_97 = relay.var("var_97", dtype = "float32", shape = (6, 5, 7))#candidate|97|(6, 5, 7)|var|float32
var_98 = relay.var("var_98", dtype = "float32", shape = (6, 15, 7))#candidate|98|(6, 15, 7)|var|float32
var_99 = relay.var("var_99", dtype = "float32", shape = (6, 1, 7))#candidate|99|(6, 1, 7)|var|float32
var_100 = relay.var("var_100", dtype = "bool", shape = (6, 5, 7))#candidate|100|(6, 5, 7)|var|bool
var_101 = relay.var("var_101", dtype = "float32", shape = (6, 9, 7))#candidate|101|(6, 9, 7)|var|float32
call_93 = func_92_call(var_94,var_95,var_96,var_97,var_98,var_99,var_100,var_101,)
output = call_93
func_102 = relay.Function([var_94,var_95,var_96,var_97,var_98,var_99,var_100,var_101,], output)
mutated_mod['func_102'] = func_102
mutated_mod = relay.transform.InferType()(mutated_mod)
var_104 = relay.var("var_104", dtype = "float64", shape = (1, 4))#candidate|104|(1, 4)|var|float64
uop_105 = relay.sinh(var_104.astype('float64')) # shape=(1, 4)
uop_107 = relay.cos(uop_105.astype('float64')) # shape=(1, 4)
uop_109 = relay.tan(uop_107.astype('float64')) # shape=(1, 4)
bop_111 = relay.maximum(uop_109.astype('uint8'), relay.reshape(uop_105.astype('uint8'), relay.shape_of(uop_109))) # shape=(1, 4)
uop_114 = relay.asinh(uop_107.astype('float32')) # shape=(1, 4)
uop_116 = relay.sqrt(uop_114.astype('float64')) # shape=(1, 4)
func_92_call = mod.get_global_var('func_92')
func_102_call = mutated_mod.get_global_var('func_102')
const_119 = relay.const(2.275652, dtype = "float64")#candidate|119|()|const|float64
var_120 = relay.var("var_120", dtype = "float64", shape = (3, 3))#candidate|120|(3, 3)|var|float64
var_121 = relay.var("var_121", dtype = "float64", shape = (42,))#candidate|121|(42,)|var|float64
const_122 = relay.const([-7.435045,-3.038678,6.284545,5.191539,1.583972,-6.576059,-9.492342,-6.047475,9.830837,-5.263034,6.335624,-3.518667,2.480884,-5.486372,-5.420152,-7.035402,3.677526,-3.019780,2.061508,7.119541,-1.003190,-4.730221,-6.491719,-5.058360,3.526650,0.914451,-6.343676,-8.943596,6.742678,9.855145,-1.533206,-9.014071,-9.612245,5.746338,-1.138691,2.315009,-5.687985,1.466393,-6.126438,-6.126690,6.190297,5.406186,-1.386598,1.827855,-2.488589,3.644601,9.163014,-7.712770,-1.400804,5.689919,9.209784,8.069979,-2.403785,-3.003271,3.681680,-1.943376,-9.654353,-5.449734,-5.988991,6.649524,-0.311133,4.780215,-0.052187,-6.660571,9.217463,-1.524179,-3.801488,-8.722072,-0.554754,0.932847,-2.414913,-0.772140,6.351396,8.454574,5.810807,1.032082,1.384323,5.139337,-8.438233,6.254603,0.649656,-9.907936,8.757478,0.017788,9.699208,3.683436,-8.106654,3.773653,0.267620,7.211684,7.827891,-1.076161,-7.407381,-5.855652,1.553422,-4.772597,6.779452,-6.893044,-5.324361,5.664415,7.072931,4.585776,-5.439343,0.906798,9.128001,-1.747473,7.022549,5.806631,-3.649223,8.643001,8.440545,8.534842,-4.450525,-2.581600,0.420221,1.703713,-1.614650,-3.598570,7.861164,-0.525386,3.378844,7.691286,-6.588810,-8.931090,-6.044020,-5.370223,9.223496,1.781512,-6.469429,-0.964917,8.735340,-4.634830,-2.977521,-7.213809,-5.903673,-8.062914,-0.708897,4.514881,5.023660,9.889261,2.191477,7.221657,1.357415,-4.697875,-2.539768,1.221988,-1.656081,-7.539759,3.650197,-9.108056,1.399948,4.989565,-2.114774,-9.603305,-3.125455,-4.053314,-8.881826,-3.700536,-9.980082,3.885774,-8.857090,-0.541138,-3.102981,3.769963,8.678696,6.918474,8.992106,-5.354755,6.882459,6.904207,8.671736,3.379313,9.311189,5.261355,8.728591,5.516602,-9.851519,-5.225134,-1.219704,-1.381771,-4.077739,-6.353015,-8.152212,7.151605,-4.364424,1.090385,-1.149731,6.514727,-7.961310,1.481976,8.643933,3.229462,-3.108421,-4.286699,-6.494060,8.526357,-4.549895,-2.934602,-1.180036,5.152014,-5.080672,-7.436663,9.740378,-4.355762,6.516069,1.931043,-6.696237,-3.457335,8.446565,7.559125], dtype = "float32")#candidate|122|(210,)|const|float32
const_123 = relay.const([9.464890,-2.705655,-8.039071,-6.199677,-1.010714,-4.325113,-2.540978,6.234161,-7.647232,-3.428429,-4.579551,-7.816900,8.434627,7.690790,-5.924719,-2.791069,-8.946717,4.211824,-2.423350,0.839706,6.524853,2.499536,-4.482481,2.565496,4.035951,-8.596551,-9.436941,1.308240,-2.284895,-4.368991,-2.325559,-4.343594,3.607727,-6.076930,8.332590,-1.687983,4.095207,-5.865737,-9.751805,-6.478480,8.317080,7.734441,8.913856,6.127186,8.061227,-2.461293,8.130145,-5.641747,2.628653,-1.857813,-3.638042,7.023136,-1.463144,-6.174491,8.749553,0.106780,3.337520,-0.135172,3.891961,-0.150179,0.618504,5.574020,-0.128792,5.111567,-4.013475,-7.138744,-1.950410,-0.717026,-5.698602,3.196690,6.344490,-5.716652,-8.360890,-3.650789,7.906034,-7.182652,6.962596,9.065167,-1.707839,6.651565,-5.321875,6.019721,4.959473,-9.183995,-9.829378,3.951550,-5.695408,-6.553707,-4.188001,-5.691939,-5.347261,-8.134673,-8.025716,4.325459,-5.076841,8.666569,-8.870652,0.862352,-3.777188,6.308064,-4.707503,4.970129,0.936666,1.053503,-6.737906,4.902448,-8.384968,-3.331417,3.561750,0.394689,3.003823,-1.712769,-4.160588,3.305550,3.466573,1.307541,-4.037838,-4.405043,5.115266,7.109547,-2.272642,-0.429979,3.432380,5.284320,-1.311904,-7.856501,-5.389539,1.399536,5.513234,6.868138,-7.343232,-3.959943,2.430517,-0.265312,-9.116739,-4.758793,-3.822136,6.419940,-3.866480,-2.946753,-6.019619,-5.482579,5.792480,1.268651,-8.104689,-1.070504,0.230028,7.685076,0.799481,4.772271,-0.797315,-0.853420,-9.787986,-5.232644,8.505201,0.893365,9.396220,-2.833093,-1.960912,1.751504,-9.084612,8.295293,-4.835670,1.610325,-6.948318,7.847087,-2.118939,7.171919,-4.441165,1.091996,-0.897542,7.667561,-4.392888,-0.597910,6.126928,-6.084289,5.844383,8.954725,-5.518419,-6.398341,-6.083194,2.215532,5.625082,2.712329,-1.393309,3.777491,-6.239908,4.063675,-9.929464,1.007546,7.267201,-1.368144,9.607178,1.056719,-2.940245,-2.766029,0.080051,6.323331,-8.800867,-9.111015,-1.504974,4.582737,-1.169756,9.438999,-9.194809,-6.231807,-0.529903,6.413959,0.880295,-5.140528,-1.218130,-4.610961,-0.577807,-1.651287,-8.260242,-4.982084,7.827623,9.714325,-7.925039,-8.826811,9.301753,-4.853618,3.814474,7.524485,-7.803021,-9.231961,-7.696391,3.763905,8.521980,6.999235,-3.573175,-5.460760,3.056329,-2.689038,-6.553574,0.782450,7.180732,-7.145858,7.184643,3.894309,6.667194,-5.449852,-5.448752,-4.138796,5.672866,-6.563392,1.482353,1.325457,-9.197575,-9.857278,2.604379,1.467387,-1.724814,1.641214,1.823051,7.177179,3.799075,5.648320,3.344525,8.415476,9.433425,6.673705,-1.007361,-8.982585,-8.644183,0.219803,-6.385669,-9.828140,-8.713770,-9.975948,5.696849,-0.676647,8.722990,-6.315806,-8.838873,5.451307,8.802644,-7.054612,-3.518963,3.305190,-2.940182,-1.327016,6.777511,8.186102,-3.224616,3.698944,2.810787,-2.580660,3.222201,-5.569401,-4.605436,-0.470180,-6.261507,9.347089,6.881311,8.016083,-6.170355,-4.377041,-2.407421,5.839325,7.105043,-6.468817,1.575623,5.929934,-0.757650,-8.845962,0.644906,-1.774733,4.971154,-8.914846,-7.091406,-4.695585,3.938333,-5.362086,-9.168631,5.644980,1.713314,4.374105,-3.263832,7.396597,-4.658031,-4.448181,-5.144457,6.051573,-8.460737,-0.310503,0.912361,6.474115,0.103661,-2.402391,-6.997616,0.194985,-8.829638,-6.222682,9.308072,4.993936,5.928025,-6.603101,-0.884825,7.740642,6.382572,-3.484192,2.633178,-8.137066,7.340389,-6.867181,-0.542383,8.440367,-4.485578,4.627688,-7.708771,0.510198,-1.916352,3.139751,3.762878,-7.850652,1.740283,5.902772,-9.085342,3.843736,5.696007,9.286682,-2.860412,-9.274789,-1.809572,-0.466682,-9.580772,-8.345691,6.672280,5.527989,3.909447,-8.775557,-5.286353,4.022228,4.625725,2.866698,-1.517091,-8.075150,2.769887,-6.190994,-9.990176,-8.650632,-1.673298,-1.581675,1.160364,7.032223,7.841270,8.916769,6.639912,-1.902296,4.969153,4.892672,8.598652,-1.139785,-0.515125,-8.877780,-5.571463,8.178720,-0.849854,-3.480806,-3.905154,-3.224266,4.282859,1.252824,-2.246049,7.478247,8.890930,9.762413,-5.428933,-1.236923,-8.237960,-0.225064,5.357697,-7.115594,6.051099,6.166905,-8.186157,5.679528,3.138672,-2.895059,-9.770709,-2.985462,1.163153,-9.683153,1.134837,-5.302586,-1.955662,-4.686837,6.702987,7.043029,-3.474249,-4.003657,-5.469410,-7.771778,-3.580419,7.460582,3.877040,9.369537,2.136804,-0.892553,-8.396101,4.260915,4.900784,-5.853963,-7.296431,4.540074,9.575488,0.822826,4.235826,1.107867,-9.252653,4.561306,-5.013252,-2.039912,-3.114867,6.421582,-3.783984,6.375235,-1.937568,-4.630456,1.347471,2.225544,1.763422,-2.367079,9.214014,-6.885442,-7.069370,9.275225,-8.281240,4.738346,-1.771722,1.151298,9.942485,9.071479,2.838944,-0.249523,8.151813,7.602259,-5.221105,-6.966076,5.416405,4.341754,-7.906480,5.757491,3.175226,0.860174,3.436671,-2.224994,-8.130459,-4.920634,0.760195,-4.983311,3.331130,2.821451,-9.598027,7.749362,-1.012459,0.013097,1.108940,-9.434347,4.081866,-3.480909,-9.864324,5.668319,-5.421672,-7.355329,-7.203460,2.821209,-0.435775,6.799456,-7.655136,7.624546,-7.582915,7.138546,5.128540,-4.973215,0.961768,1.821726,5.435974,-6.078970,-8.628283,3.863330,-7.694870,-8.858247,9.268603,2.339469,-1.422150,-7.305353,9.363009,-9.905582,8.262909,-7.527370,-5.478635,1.747982,-0.343369,4.232047,-5.013205,-4.561485,0.379956,-6.605737,-0.171573,-9.077617,-3.185621,4.580052,-3.382195,-2.489078,-6.888231,2.017498,-0.997995,-1.673297,-0.773801,4.165548,-2.553707,2.580856,3.618014,-8.783680,0.836876,-0.152966,-6.636532,-0.614967,-1.572511,-4.382146,9.879583,7.678974,-4.854832,-2.173632,8.293895,-0.115794,0.258760,-3.967733,7.417328,9.919612,3.167043,-2.534225,8.811421,8.267262,8.243364,9.900876,1.637086,-0.532613,-8.379541,-7.257170,-6.214267,-8.453532,3.138358,-9.590017,9.623913,8.393481,-7.419080,-0.200560,-4.349915,1.805636,-6.328267,-2.471545,5.363709,7.464357,-2.418899,9.505558,-4.028584,-2.036379,-5.780839,-0.386207,-7.201215,2.859380,6.414133,0.265083,1.043281,2.160514,3.035253,4.720526,-7.614842,-9.957716,-1.017839,-9.658252,8.624521,-4.056793,8.674632,-8.321085,4.635499,-1.724529,6.850352,-3.418109,-2.280019,-5.151530,-3.655247,-6.765293,3.202038,2.663124,7.881699,-6.175993], dtype = "float32")#candidate|123|(630,)|const|float32
var_124 = relay.var("var_124", dtype = "float32", shape = (3, 126))#candidate|124|(3, 126)|var|float32
call_118 = relay.TupleGetItem(func_92_call(relay.reshape(const_119.astype('float64'), []), relay.reshape(var_120.astype('float64'), [9,]), relay.reshape(var_121.astype('float64'), [6, 1, 7]), relay.reshape(const_122.astype('float32'), [6, 5, 7]), relay.reshape(const_123.astype('float32'), [6, 15, 7]), relay.reshape(var_121.astype('float32'), [6, 1, 7]), relay.reshape(const_122.astype('bool'), [6, 5, 7]), relay.reshape(var_124.astype('float32'), [6, 9, 7]), ), 10)
call_125 = relay.TupleGetItem(func_102_call(relay.reshape(const_119.astype('float64'), []), relay.reshape(var_120.astype('float64'), [9,]), relay.reshape(var_121.astype('float64'), [6, 1, 7]), relay.reshape(const_122.astype('float32'), [6, 5, 7]), relay.reshape(const_123.astype('float32'), [6, 15, 7]), relay.reshape(var_121.astype('float32'), [6, 1, 7]), relay.reshape(const_122.astype('bool'), [6, 5, 7]), relay.reshape(var_124.astype('float32'), [6, 9, 7]), ), 10)
uop_126 = relay.asin(bop_111.astype('float32')) # shape=(1, 4)
uop_128 = relay.acos(uop_126.astype('float32')) # shape=(1, 4)
bop_130 = relay.subtract(uop_128.astype('int32'), relay.reshape(bop_111.astype('int32'), relay.shape_of(uop_128))) # shape=(1, 4)
bop_133 = relay.maximum(uop_107.astype('int64'), relay.reshape(uop_105.astype('int64'), relay.shape_of(uop_107))) # shape=(1, 4)
uop_136 = relay.tan(uop_128.astype('float32')) # shape=(1, 4)
bop_138 = relay.minimum(uop_136.astype('int32'), relay.reshape(bop_130.astype('int32'), relay.shape_of(uop_136))) # shape=(1, 4)
var_141 = relay.var("var_141", dtype = "int32", shape = (15, 4))#candidate|141|(15, 4)|var|int32
bop_142 = relay.mod(bop_138.astype('float32'), var_141.astype('float32')) # shape=(15, 4)
uop_145 = relay.sinh(uop_136.astype('float32')) # shape=(1, 4)
bop_147 = relay.divide(uop_145.astype('float32'), relay.reshape(var_104.astype('float32'), relay.shape_of(uop_145))) # shape=(1, 4)
uop_150 = relay.sqrt(bop_133.astype('float32')) # shape=(1, 4)
uop_152 = relay.acos(uop_116.astype('float32')) # shape=(1, 4)
uop_154 = relay.tan(bop_147.astype('float64')) # shape=(1, 4)
var_156 = relay.var("var_156", dtype = "float64", shape = (14, 4))#candidate|156|(14, 4)|var|float64
bop_157 = relay.power(uop_154.astype('float32'), var_156.astype('float32')) # shape=(14, 4)
var_160 = relay.var("var_160", dtype = "float32", shape = (16, 4))#candidate|160|(16, 4)|var|float32
bop_161 = relay.logical_xor(uop_126.astype('int8'), var_160.astype('int8')) # shape=(16, 4)
func_92_call = mod.get_global_var('func_92')
func_102_call = mutated_mod.get_global_var('func_102')
call_164 = relay.TupleGetItem(func_92_call(relay.reshape(const_119.astype('float64'), []), relay.reshape(var_120.astype('float64'), [9,]), relay.reshape(call_118.astype('float64'), [6, 1, 7]), relay.reshape(const_122.astype('float32'), [6, 5, 7]), relay.reshape(const_123.astype('float32'), [6, 15, 7]), relay.reshape(var_121.astype('float32'), [6, 1, 7]), relay.reshape(const_122.astype('bool'), [6, 5, 7]), relay.reshape(var_124.astype('float32'), [6, 9, 7]), ), 6)
call_165 = relay.TupleGetItem(func_102_call(relay.reshape(const_119.astype('float64'), []), relay.reshape(var_120.astype('float64'), [9,]), relay.reshape(call_118.astype('float64'), [6, 1, 7]), relay.reshape(const_122.astype('float32'), [6, 5, 7]), relay.reshape(const_123.astype('float32'), [6, 15, 7]), relay.reshape(var_121.astype('float32'), [6, 1, 7]), relay.reshape(const_122.astype('bool'), [6, 5, 7]), relay.reshape(var_124.astype('float32'), [6, 9, 7]), ), 6)
bop_166 = relay.right_shift(bop_147.astype('uint32'), bop_142.astype('uint32')) # shape=(15, 4)
uop_169 = relay.exp(bop_157.astype('float32')) # shape=(14, 4)
var_171 = relay.var("var_171", dtype = "float32", shape = (14, 4))#candidate|171|(14, 4)|var|float32
bop_172 = relay.equal(uop_169.astype('bool'), relay.reshape(var_171.astype('bool'), relay.shape_of(uop_169))) # shape=(14, 4)
uop_175 = relay.sinh(uop_169.astype('float64')) # shape=(14, 4)
bop_177 = relay.subtract(uop_152.astype('int32'), bop_157.astype('int32')) # shape=(14, 4)
uop_180 = relay.acosh(uop_169.astype('float64')) # shape=(14, 4)
var_182 = relay.var("var_182", dtype = "float64", shape = (14, 4))#candidate|182|(14, 4)|var|float64
bop_183 = relay.right_shift(uop_180.astype('uint64'), relay.reshape(var_182.astype('uint64'), relay.shape_of(uop_180))) # shape=(14, 4)
func_92_call = mod.get_global_var('func_92')
func_102_call = mutated_mod.get_global_var('func_102')
call_186 = relay.TupleGetItem(func_92_call(relay.reshape(const_119.astype('float64'), []), relay.reshape(var_120.astype('float64'), [9,]), relay.reshape(call_118.astype('float64'), [6, 1, 7]), relay.reshape(call_164.astype('float32'), [6, 5, 7]), relay.reshape(const_123.astype('float32'), [6, 15, 7]), relay.reshape(var_121.astype('float32'), [6, 1, 7]), relay.reshape(call_164.astype('bool'), [6, 5, 7]), relay.reshape(var_124.astype('float32'), [6, 9, 7]), ), 5)
call_187 = relay.TupleGetItem(func_102_call(relay.reshape(const_119.astype('float64'), []), relay.reshape(var_120.astype('float64'), [9,]), relay.reshape(call_118.astype('float64'), [6, 1, 7]), relay.reshape(call_164.astype('float32'), [6, 5, 7]), relay.reshape(const_123.astype('float32'), [6, 15, 7]), relay.reshape(var_121.astype('float32'), [6, 1, 7]), relay.reshape(call_164.astype('bool'), [6, 5, 7]), relay.reshape(var_124.astype('float32'), [6, 9, 7]), ), 5)
var_188 = relay.var("var_188", dtype = "float64", shape = (14, 4))#candidate|188|(14, 4)|var|float64
bop_189 = relay.right_shift(uop_180.astype('uint64'), relay.reshape(var_188.astype('uint64'), relay.shape_of(uop_180))) # shape=(14, 4)
bop_192 = relay.greater(bop_172.astype('bool'), bop_133.astype('bool')) # shape=(14, 4)
uop_195 = relay.atanh(uop_154.astype('float32')) # shape=(1, 4)
bop_197 = relay.logical_or(uop_180.astype('bool'), uop_116.astype('bool')) # shape=(14, 4)
uop_200 = relay.acos(bop_157.astype('float32')) # shape=(14, 4)
uop_202 = relay.log(bop_172.astype('float32')) # shape=(14, 4)
func_92_call = mod.get_global_var('func_92')
func_102_call = mutated_mod.get_global_var('func_102')
call_204 = relay.TupleGetItem(func_92_call(relay.reshape(const_119.astype('float64'), []), relay.reshape(var_120.astype('float64'), [9,]), relay.reshape(call_186.astype('float64'), [6, 1, 7]), relay.reshape(call_164.astype('float32'), [6, 5, 7]), relay.reshape(const_123.astype('float32'), [6, 15, 7]), relay.reshape(call_118.astype('float32'), [6, 1, 7]), relay.reshape(const_122.astype('bool'), [6, 5, 7]), relay.reshape(var_124.astype('float32'), [6, 9, 7]), ), 4)
call_205 = relay.TupleGetItem(func_102_call(relay.reshape(const_119.astype('float64'), []), relay.reshape(var_120.astype('float64'), [9,]), relay.reshape(call_186.astype('float64'), [6, 1, 7]), relay.reshape(call_164.astype('float32'), [6, 5, 7]), relay.reshape(const_123.astype('float32'), [6, 15, 7]), relay.reshape(call_118.astype('float32'), [6, 1, 7]), relay.reshape(const_122.astype('bool'), [6, 5, 7]), relay.reshape(var_124.astype('float32'), [6, 9, 7]), ), 4)
var_206 = relay.var("var_206", dtype = "float64", shape = (11, 4))#candidate|206|(11, 4)|var|float64
bop_207 = relay.greater_equal(uop_154.astype('bool'), var_206.astype('bool')) # shape=(11, 4)
uop_210 = relay.atan(bop_189.astype('float32')) # shape=(14, 4)
bop_212 = relay.logical_and(bop_138.astype('bool'), bop_161.astype('bool')) # shape=(16, 4)
uop_215 = relay.log(bop_207.astype('float32')) # shape=(11, 4)
var_217 = relay.var("var_217", dtype = "float32", shape = (14, 4))#candidate|217|(14, 4)|var|float32
bop_218 = relay.greater(uop_210.astype('bool'), relay.reshape(var_217.astype('bool'), relay.shape_of(uop_210))) # shape=(14, 4)
uop_221 = relay.log2(bop_197.astype('float32')) # shape=(14, 4)
uop_223 = relay.asinh(uop_210.astype('float64')) # shape=(14, 4)
bop_225 = relay.subtract(uop_195.astype('float64'), relay.reshape(bop_130.astype('float64'), relay.shape_of(uop_195))) # shape=(1, 4)
uop_228 = relay.tan(uop_223.astype('float64')) # shape=(14, 4)
bop_230 = relay.bitwise_and(uop_221.astype('int8'), relay.reshape(uop_175.astype('int8'), relay.shape_of(uop_221))) # shape=(14, 4)
bop_233 = relay.logical_and(uop_228.astype('bool'), relay.reshape(var_188.astype('bool'), relay.shape_of(uop_228))) # shape=(14, 4)
uop_236 = relay.tan(uop_223.astype('float64')) # shape=(14, 4)
bop_238 = relay.bitwise_xor(bop_233.astype('int32'), bop_138.astype('int32')) # shape=(14, 4)
bop_241 = relay.multiply(uop_228.astype('float32'), relay.reshape(var_171.astype('float32'), relay.shape_of(uop_228))) # shape=(14, 4)
bop_244 = relay.right_shift(bop_189.astype('uint16'), relay.reshape(uop_228.astype('uint16'), relay.shape_of(bop_189))) # shape=(14, 4)
const_247 = relay.const([[2.550895,6.365722,-1.181511,-7.337836],[5.890148,-3.183215,8.347745,9.566450],[-0.388720,9.706407,2.741376,8.545293],[7.327988,-1.801482,0.116825,3.489116],[6.022864,1.802411,-9.131087,-0.453058],[2.618141,-9.671401,3.107907,3.411362],[1.803725,-9.576013,-1.065340,3.617459],[3.827844,3.634555,5.478002,1.552599],[5.382761,-0.235402,-7.449152,-0.882612],[1.375998,7.325465,-9.263005,6.560050],[3.451926,-7.300062,5.321117,9.872871],[5.697690,6.393616,6.300853,-9.972256],[2.933679,9.080868,9.507519,4.373908],[-1.546986,5.187760,2.843233,-8.678668]], dtype = "float64")#candidate|247|(14, 4)|const|float64
bop_248 = relay.divide(uop_223.astype('float32'), relay.reshape(const_247.astype('float32'), relay.shape_of(uop_223))) # shape=(14, 4)
uop_251 = relay.exp(uop_223.astype('float32')) # shape=(14, 4)
bop_253 = relay.subtract(uop_195.astype('int16'), bop_248.astype('int16')) # shape=(14, 4)
bop_256 = relay.floor_mod(bop_241.astype('float32'), bop_138.astype('float32')) # shape=(14, 4)
var_259 = relay.var("var_259", dtype = "float32", shape = (14, 4))#candidate|259|(14, 4)|var|float32
bop_260 = relay.right_shift(uop_251.astype('int64'), relay.reshape(var_259.astype('int64'), relay.shape_of(uop_251))) # shape=(14, 4)
uop_263 = relay.acos(uop_223.astype('float64')) # shape=(14, 4)
uop_265 = relay.rsqrt(bop_260.astype('float64')) # shape=(14, 4)
bop_267 = relay.divide(uop_265.astype('float32'), relay.reshape(bop_256.astype('float32'), relay.shape_of(uop_265))) # shape=(14, 4)
bop_270 = relay.greater_equal(bop_248.astype('bool'), relay.reshape(bop_267.astype('bool'), relay.shape_of(bop_248))) # shape=(14, 4)
uop_273 = relay.cosh(uop_265.astype('float32')) # shape=(14, 4)
var_275 = relay.var("var_275", dtype = "bool", shape = (14, 4))#candidate|275|(14, 4)|var|bool
bop_276 = relay.right_shift(bop_270.astype('int8'), relay.reshape(var_275.astype('int8'), relay.shape_of(bop_270))) # shape=(14, 4)
uop_279 = relay.acosh(bop_138.astype('float64')) # shape=(1, 4)
const_281 = relay.const([[5.318814,-2.177316,7.514922,-8.746756],[-1.705636,-7.046640,7.036910,9.631175],[7.372553,-6.173738,-0.683144,-5.557341],[-0.466933,7.255073,-1.242529,3.131457],[-7.115486,-3.291275,2.794128,-3.669467],[-4.793714,-1.124334,2.689040,2.841226],[-1.300811,9.824966,0.235197,-2.788381],[8.536276,-6.758859,6.398661,8.645793],[-1.161196,9.702584,-1.365351,4.507832],[-5.499813,-5.388918,0.854393,-2.476406],[7.712069,0.055108,2.199995,9.813377],[6.249021,1.802466,2.224850,5.083625],[-0.793452,-2.132052,-5.882588,3.466697],[7.712243,-5.875411,-4.541957,-2.956141]], dtype = "float32")#candidate|281|(14, 4)|const|float32
bop_282 = relay.minimum(uop_273.astype('uint64'), relay.reshape(const_281.astype('uint64'), relay.shape_of(uop_273))) # shape=(14, 4)
bop_285 = relay.minimum(bop_282.astype('int32'), uop_195.astype('int32')) # shape=(14, 4)
bop_288 = relay.power(bop_270.astype('float64'), relay.reshape(bop_238.astype('float64'), relay.shape_of(bop_270))) # shape=(14, 4)
var_291 = relay.var("var_291", dtype = "int32", shape = (14, 4))#candidate|291|(14, 4)|var|int32
bop_292 = relay.bitwise_and(bop_285.astype('uint64'), relay.reshape(var_291.astype('uint64'), relay.shape_of(bop_285))) # shape=(14, 4)
bop_295 = relay.power(bop_282.astype('float64'), relay.reshape(const_281.astype('float64'), relay.shape_of(bop_282))) # shape=(14, 4)
uop_298 = relay.log(bop_267.astype('float32')) # shape=(14, 4)
bop_300 = relay.less(uop_263.astype('bool'), relay.reshape(bop_218.astype('bool'), relay.shape_of(uop_263))) # shape=(14, 4)
uop_303 = relay.asinh(bop_218.astype('float64')) # shape=(14, 4)
uop_305 = relay.asin(bop_292.astype('float64')) # shape=(14, 4)
output = relay.Tuple([call_118,const_119,var_120,var_121,const_122,const_123,var_124,uop_150,call_164,bop_166,bop_177,bop_183,call_186,bop_192,uop_200,uop_202,call_204,bop_212,uop_215,bop_225,bop_230,uop_236,bop_244,bop_253,bop_276,uop_279,bop_288,bop_295,uop_298,bop_300,uop_303,uop_305,])
output2 = relay.Tuple([call_125,const_119,var_120,var_121,const_122,const_123,var_124,uop_150,call_165,bop_166,bop_177,bop_183,call_187,bop_192,uop_200,uop_202,call_205,bop_212,uop_215,bop_225,bop_230,uop_236,bop_244,bop_253,bop_276,uop_279,bop_288,bop_295,uop_298,bop_300,uop_303,uop_305,])
F = relay.Function([var_104,var_120,var_121,var_124,var_141,var_156,var_160,var_171,var_182,var_188,var_206,var_217,var_259,var_275,var_291,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_104,var_120,var_121,var_124,var_141,var_156,var_160,var_171,var_182,var_188,var_206,var_217,var_259,var_275,var_291,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_104= np.array([[5.730016,7.298211,3.465962,-2.178085]], dtype='float64')
module1.set_input('var_104', input_104)
input_120= np.array([[8.757451,8.487248,8.397953],[6.920434,-6.158512,8.706236],[3.272775,0.159688,-9.833399]], dtype='float64')
module1.set_input('var_120', input_120)
input_121= np.array([5.433944,-8.815833,8.247427,6.828161,-7.657468,-5.789907,0.350226,-6.714832,8.091035,-8.421621,0.308480,5.401458,8.893799,-2.480110,9.060357,-2.286216,3.516678,-9.253757,2.468809,-3.904717,-4.425608,-1.000255,-3.025499,-0.034245,-1.606927,5.540738,7.708082,-9.341270,9.206341,-5.102327,8.387609,4.517756,4.852139,3.553703,6.752049,-9.514803,8.499925,-2.669661,8.377491,6.797963,9.846667,8.119071], dtype='float64')
module1.set_input('var_121', input_121)
input_124= np.array([[7.987426,9.297142,-2.918797,8.167756,0.878543,3.393154,-7.015931,3.564669,-1.383251,1.936615,-0.340974,3.028899,-7.693234,4.557675,4.004649,7.990428,-4.812943,5.000865,-5.678319,-5.652500,-0.327480,-2.511123,-2.592423,-5.831443,0.098416,-9.697610,9.074567,6.521633,5.234593,8.555244,-6.738208,2.642576,-1.032469,6.157553,-4.030531,-9.600834,4.980393,2.781165,-3.179466,-7.163681,-7.786572,8.921810,8.937639,4.937103,5.394758,0.931572,1.737125,-4.573921,-3.235488,-4.365453,7.038849,4.381993,6.827417,-8.045308,-8.378070,9.112114,-4.814108,9.971798,-5.479202,-6.135132,5.953113,3.322545,-6.932316,-1.106637,0.291364,7.288149,0.466045,-9.379117,-4.664726,-0.563987,8.258384,2.450604,-3.019785,3.838838,5.371328,-6.133362,-2.179392,-9.715794,8.753665,6.681508,1.466805,7.813031,4.698949,-5.849686,5.188688,-5.566460,-4.044716,-1.794953,-9.081184,2.139688,8.473997,7.228116,5.331502,-0.234001,-7.559727,-2.251616,7.587818,7.478003,2.241633,-4.220358,-5.503295,8.006834,-7.758340,-7.197984,-4.481752,-0.458266,8.049174,2.656223,1.175947,-1.559830,6.549404,-0.577655,-1.008994,5.761608,9.771019,-4.417473,-7.577209,-7.431445,9.147070,-0.813516,5.775266,5.179086,-7.820810,4.620478,3.906122,1.469952],[-8.670358,5.898072,7.873587,-6.261468,-5.841347,6.906478,5.357840,6.024029,-0.072648,-6.798963,-3.603075,-0.986744,-1.616529,7.090376,9.691790,-6.727833,-4.142303,7.718780,-6.230542,-0.085005,-6.131440,2.117133,3.949348,5.826894,-1.010044,6.110884,7.554081,7.113132,-8.341844,4.997862,-9.803140,4.556751,0.264864,-7.129515,1.096696,-5.634278,-3.060256,6.480163,-0.130784,4.944507,-9.474324,-7.513992,4.543751,8.129910,-5.617708,6.675649,-4.208353,2.122494,1.197934,6.986367,-9.088753,5.982392,9.256976,-7.028442,4.656068,8.765636,2.037327,5.448633,2.219924,-1.039312,-0.552365,-9.934346,-5.368710,-6.237135,-2.314598,-4.509720,-6.662066,3.609373,-5.472445,0.683950,-4.913775,8.999844,-8.920224,-4.782826,8.036135,5.502086,-7.589325,-7.652367,6.842740,1.148274,-9.260981,-3.369264,4.443780,9.552179,-9.506122,6.594549,0.054752,-0.157939,1.862644,1.166183,0.976564,-8.159016,2.578081,-7.618408,-1.855900,-8.711774,-3.973604,5.082837,-1.648263,5.664109,0.878818,5.404481,-9.804748,4.931035,-1.058920,-0.681994,5.787622,-3.237602,-8.008412,-7.255382,-6.617856,5.169675,6.188442,-6.444920,6.715240,-9.997365,-6.061521,7.863693,6.979822,-9.049673,-0.466402,4.160530,-9.467654,-5.110613,3.754320,8.951008],[2.446912,-7.107220,8.696010,-6.703532,-5.583889,6.228050,6.866321,5.805276,7.339638,-0.993978,0.639717,-1.328229,3.505520,-5.105625,4.869375,-5.432959,-7.793453,1.966311,9.685215,2.097335,2.154926,-0.016757,3.488288,5.864856,-2.851513,-8.294990,-8.761694,5.769444,4.183575,-4.813419,3.532333,5.175954,7.221755,3.280450,6.302590,-3.404782,4.519333,1.371430,1.130392,-0.184984,-9.540157,8.007401,6.096006,1.005518,-9.425010,6.319598,-4.673744,0.657650,5.068911,3.454404,4.608755,9.529856,-1.764129,-3.196215,-1.351191,5.308485,9.446191,3.083267,4.487888,-6.363580,-2.366199,5.486398,-4.136713,-7.495171,3.289389,-1.649805,3.643868,-3.120721,-5.638430,9.859225,6.390457,-4.975449,7.061837,1.903472,-8.124886,-3.382319,2.689433,5.744048,5.967704,7.213367,4.280940,6.468523,-4.649342,0.864964,-1.844656,9.357346,6.122029,1.917710,3.250080,-1.200118,-8.762874,-9.450012,-7.124759,2.128273,7.001201,0.297366,0.780893,1.714486,-4.679411,-1.778588,-9.703644,-3.940521,8.980988,-6.926830,-3.257514,-6.814484,-0.100808,-4.968611,5.842446,-9.433547,-3.367470,1.082688,-3.084133,4.582455,3.061292,-3.624424,6.235539,-4.870726,-9.614331,7.342660,8.418648,0.106655,-8.276779,-4.430878,9.051587,-2.540431]], dtype='float32')
module1.set_input('var_124', input_124)
input_141= np.array([[2,9,-5,4],[3,-5,2,-1],[7,-4,2,3],[1,3,8,-8],[-4,-6,-3,-10],[-2,-5,-4,7],[-10,4,-8,5],[2,5,-5,-10],[-2,-9,9,-3],[-4,-5,7,-2],[3,-8,-4,10],[-10,-7,10,4],[-6,-8,4,-5],[-2,-9,-2,-5],[-6,4,7,-7]], dtype='int32')
module1.set_input('var_141', input_141)
input_156= np.array([[4.758491,0.837286,3.150522,-1.238484],[3.558535,-4.464720,-8.195821,-4.951223],[-3.735409,4.335739,1.306896,0.044147],[8.107112,-2.939746,-0.262410,-0.547562],[8.021870,-5.774322,7.838577,-8.854581],[3.713376,1.715145,-7.349271,-2.307518],[-7.784079,6.981386,-0.133806,-3.355860],[4.423215,-3.675542,3.696379,7.191197],[6.857614,-1.250769,-9.289216,4.884754],[2.753855,9.719115,9.203305,-1.268027],[-6.233112,7.825597,3.024684,-1.969520],[-0.909708,-1.144233,-3.935719,-1.114888],[-5.451872,-4.766468,-9.058839,-7.804755],[8.284755,8.917223,-1.018002,-2.346035]], dtype='float64')
module1.set_input('var_156', input_156)
input_160= np.array([[8.350207,6.022307,-6.159733,0.018370],[4.607067,-4.415318,-3.188041,4.254583],[7.604968,7.563856,3.277366,-2.089091],[-8.099648,0.025680,7.767013,0.271102],[-3.738001,1.975959,-5.381353,5.512636],[7.829457,5.015682,8.565215,-2.818202],[4.758602,-8.071915,2.318681,2.555407],[-6.287013,-8.730888,-6.608600,-7.179047],[3.422255,3.878921,-4.613415,7.130157],[7.073050,7.156636,5.297352,2.920506],[-8.164752,0.212944,-6.498798,8.607660],[-0.684214,4.476487,7.821001,6.661610],[9.601706,-9.055268,1.395599,4.615834],[2.472060,3.366437,-9.479512,8.958540],[-0.091434,3.363059,1.644890,1.772679],[-8.930721,-2.102140,-0.354407,-5.783057]], dtype='float32')
module1.set_input('var_160', input_160)
input_171= np.array([[4.722484,-6.240197,-6.130485,0.655711],[-2.458421,-1.324976,6.766580,8.228167],[8.382669,0.635209,9.607518,-8.511407],[0.627551,1.399802,-2.121170,6.251787],[2.035210,-5.064447,-8.431695,9.101252],[2.262403,7.092094,0.284201,-9.008484],[0.394867,2.784455,9.979772,9.729153],[-5.292711,-0.955046,-0.486203,-9.248870],[3.613212,-7.663918,-6.190927,2.499264],[2.938361,7.802842,6.768213,4.627670],[3.734785,-8.505172,-5.201617,3.651730],[-9.739372,3.125625,6.035647,-0.933061],[9.623998,-1.228798,-9.384191,4.419347],[7.902716,-7.864192,-3.705751,1.009324]], dtype='float32')
module1.set_input('var_171', input_171)
input_182= np.array([[-9.183300,-3.343169,3.037868,-7.501269],[-2.400139,6.300012,4.384968,-6.599993],[-2.619899,8.809308,-4.389039,-5.042408],[6.511547,2.472908,8.862835,6.867405],[-0.851891,-5.274776,3.800207,2.963719],[3.222048,0.048969,7.415395,4.745802],[8.020716,-9.913795,7.805113,2.490352],[-3.598181,-4.359771,9.017416,3.266591],[-6.656578,-9.302395,-6.362788,0.337026],[-1.996432,6.649630,-5.590188,1.959760],[4.983985,-6.307405,-3.955938,3.293508],[-3.022078,-3.608043,6.699744,1.310227],[-5.269508,0.733334,3.729310,-6.328782],[1.850233,8.205432,-9.227156,5.024201]], dtype='float64')
module1.set_input('var_182', input_182)
input_188= np.array([[7.623318,-1.040721,3.667824,-4.915808],[7.902843,-8.962095,-3.287887,-6.044530],[0.941762,-3.414173,-5.650429,-1.926384],[-6.962488,-4.702772,-6.668480,-8.760567],[6.238296,5.247149,-8.602539,-4.908642],[6.356781,-4.109444,-7.570248,-2.108399],[-3.459983,-5.907290,5.842593,-7.629815],[6.175386,-5.140129,1.026941,3.613172],[3.594306,6.708402,-0.945518,4.353444],[-6.010373,8.230691,3.468603,-9.160976],[-8.827881,-1.272338,9.456248,1.744988],[9.643776,-5.727929,-7.053307,3.101984],[0.799802,1.455079,-3.907384,9.304010],[-2.695261,3.465518,-4.770421,7.640617]], dtype='float64')
module1.set_input('var_188', input_188)
input_206= np.array([[5.361508,-0.874056,5.778326,6.663414],[6.156880,4.936029,4.331738,8.501406],[8.280910,-6.487262,1.318352,9.176487],[-3.564063,5.210254,-4.090929,-9.550804],[1.431048,6.954085,-7.578727,8.360502],[-5.464461,-5.449368,-6.902641,-0.061669],[-0.569266,4.603487,-7.568439,-0.961855],[-9.466420,3.827151,-1.019716,-1.788001],[-7.985142,-6.666964,-6.389515,-2.258029],[-0.927422,-4.486361,-1.609564,6.180485],[7.646003,9.374361,6.961152,-5.587174]], dtype='float64')
module1.set_input('var_206', input_206)
input_217= np.array([[4.295873,-7.488355,0.446883,9.895644],[-3.057678,2.534916,-4.584848,-8.627876],[-6.055478,8.044956,4.747143,1.080470],[5.025736,2.091972,-5.991310,-2.893121],[6.156809,-2.579752,2.374155,2.561106],[6.866716,-6.105116,-9.895994,4.309513],[1.518515,-4.600143,6.395640,2.382833],[-2.157499,0.340409,8.770279,-8.304487],[-5.932054,6.024170,7.274415,-3.668810],[9.337731,-6.018000,6.437372,-0.941817],[-0.799567,3.645714,7.280499,-8.304508],[4.195658,-8.176747,-6.048825,-1.635314],[7.863091,-0.417907,-8.480325,-6.611494],[-3.543851,7.098630,-3.157099,-1.239633]], dtype='float32')
module1.set_input('var_217', input_217)
input_259= np.array([[-1.697491,-1.364365,3.260902,2.330861],[-7.679070,2.204487,3.393867,7.511216],[0.503331,2.863273,-6.891079,-0.987078],[-8.611931,-9.835222,2.119014,9.250032],[7.103200,4.665914,-0.814841,6.346606],[0.434712,0.125505,-7.962244,5.483227],[6.790474,6.254504,-8.778720,-9.927509],[-6.315257,1.279541,9.980757,7.217412],[-7.559953,8.348561,-8.501077,4.132945],[7.175086,-0.141089,-3.509058,-6.754334],[-3.984893,7.726573,1.985750,8.895171],[5.685466,8.981861,8.065293,4.725958],[-4.302212,-9.511793,4.097315,-5.893171],[1.517410,4.597478,-4.964441,5.261193]], dtype='float32')
module1.set_input('var_259', input_259)
input_275= np.array([[False,True,True,True],[True,True,False,True],[False,True,True,False],[False,False,True,True],[True,True,True,True],[False,True,True,True],[False,True,False,False],[True,True,False,False],[False,True,True,False],[True,True,True,True],[False,False,True,False],[True,True,True,False],[False,False,True,False],[True,False,True,False]], dtype='bool')
module1.set_input('var_275', input_275)
input_291= np.array([[-8,-9,-8,-4],[9,-10,1,5],[6,8,8,-3],[-6,1,-6,7],[-6,6,5,2],[-2,-7,4,6],[3,-1,4,6],[-2,5,-3,-4],[1,10,-10,1],[7,-4,8,-3],[4,4,10,9],[8,-10,6,-2],[1,-4,6,-2],[3,-6,-4,4]], dtype='int32')
module1.set_input('var_291', input_291)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_104, input_120, input_121, input_124, input_141, input_156, input_160, input_171, input_182, input_188, input_206, input_217, input_259, input_275, input_291, )
res3 = intrp3.evaluate()(input_104, input_120, input_121, input_124, input_141, input_156, input_160, input_171, input_182, input_188, input_206, input_217, input_259, input_275, input_291, )
res4 = intrp4.evaluate()(input_104, input_120, input_121, input_124, input_141, input_156, input_160, input_171, input_182, input_188, input_206, input_217, input_259, input_275, input_291, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
res1_14 = module1.get_output(14).asnumpy()
res2_14 = res2[14].asnumpy()
res3_14 = res3[14].asnumpy()
res4_14 = res4[14].asnumpy()
np.testing.assert_allclose(res1_14 ,res2_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res3_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res4_14, atol=1e-3, rtol=1e-3)
(res1_14 == res2_14).all()
(res1_14 == res3_14).all()
(res1_14 == res4_14).all()
res1_15 = module1.get_output(15).asnumpy()
res2_15 = res2[15].asnumpy()
res3_15 = res3[15].asnumpy()
res4_15 = res4[15].asnumpy()
np.testing.assert_allclose(res1_15 ,res2_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res3_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res4_15, atol=1e-3, rtol=1e-3)
(res1_15 == res2_15).all()
(res1_15 == res3_15).all()
(res1_15 == res4_15).all()
res1_16 = module1.get_output(16).asnumpy()
res2_16 = res2[16].asnumpy()
res3_16 = res3[16].asnumpy()
res4_16 = res4[16].asnumpy()
np.testing.assert_allclose(res1_16 ,res2_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res3_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res4_16, atol=1e-3, rtol=1e-3)
(res1_16 == res2_16).all()
(res1_16 == res3_16).all()
(res1_16 == res4_16).all()
res1_17 = module1.get_output(17).asnumpy()
res2_17 = res2[17].asnumpy()
res3_17 = res3[17].asnumpy()
res4_17 = res4[17].asnumpy()
np.testing.assert_allclose(res1_17 ,res2_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res3_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res4_17, atol=1e-3, rtol=1e-3)
(res1_17 == res2_17).all()
(res1_17 == res3_17).all()
(res1_17 == res4_17).all()
res1_18 = module1.get_output(18).asnumpy()
res2_18 = res2[18].asnumpy()
res3_18 = res3[18].asnumpy()
res4_18 = res4[18].asnumpy()
np.testing.assert_allclose(res1_18 ,res2_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res3_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res4_18, atol=1e-3, rtol=1e-3)
(res1_18 == res2_18).all()
(res1_18 == res3_18).all()
(res1_18 == res4_18).all()
res1_19 = module1.get_output(19).asnumpy()
res2_19 = res2[19].asnumpy()
res3_19 = res3[19].asnumpy()
res4_19 = res4[19].asnumpy()
np.testing.assert_allclose(res1_19 ,res2_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_19 ,res3_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_19 ,res4_19, atol=1e-3, rtol=1e-3)
(res1_19 == res2_19).all()
(res1_19 == res3_19).all()
(res1_19 == res4_19).all()
res1_20 = module1.get_output(20).asnumpy()
res2_20 = res2[20].asnumpy()
res3_20 = res3[20].asnumpy()
res4_20 = res4[20].asnumpy()
np.testing.assert_allclose(res1_20 ,res2_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_20 ,res3_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_20 ,res4_20, atol=1e-3, rtol=1e-3)
(res1_20 == res2_20).all()
(res1_20 == res3_20).all()
(res1_20 == res4_20).all()
res1_21 = module1.get_output(21).asnumpy()
res2_21 = res2[21].asnumpy()
res3_21 = res3[21].asnumpy()
res4_21 = res4[21].asnumpy()
np.testing.assert_allclose(res1_21 ,res2_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_21 ,res3_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_21 ,res4_21, atol=1e-3, rtol=1e-3)
(res1_21 == res2_21).all()
(res1_21 == res3_21).all()
(res1_21 == res4_21).all()
res1_22 = module1.get_output(22).asnumpy()
res2_22 = res2[22].asnumpy()
res3_22 = res3[22].asnumpy()
res4_22 = res4[22].asnumpy()
np.testing.assert_allclose(res1_22 ,res2_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_22 ,res3_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_22 ,res4_22, atol=1e-3, rtol=1e-3)
(res1_22 == res2_22).all()
(res1_22 == res3_22).all()
(res1_22 == res4_22).all()
res1_23 = module1.get_output(23).asnumpy()
res2_23 = res2[23].asnumpy()
res3_23 = res3[23].asnumpy()
res4_23 = res4[23].asnumpy()
np.testing.assert_allclose(res1_23 ,res2_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_23 ,res3_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_23 ,res4_23, atol=1e-3, rtol=1e-3)
(res1_23 == res2_23).all()
(res1_23 == res3_23).all()
(res1_23 == res4_23).all()
res1_24 = module1.get_output(24).asnumpy()
res2_24 = res2[24].asnumpy()
res3_24 = res3[24].asnumpy()
res4_24 = res4[24].asnumpy()
np.testing.assert_allclose(res1_24 ,res2_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_24 ,res3_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_24 ,res4_24, atol=1e-3, rtol=1e-3)
(res1_24 == res2_24).all()
(res1_24 == res3_24).all()
(res1_24 == res4_24).all()
res1_25 = module1.get_output(25).asnumpy()
res2_25 = res2[25].asnumpy()
res3_25 = res3[25].asnumpy()
res4_25 = res4[25].asnumpy()
np.testing.assert_allclose(res1_25 ,res2_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_25 ,res3_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_25 ,res4_25, atol=1e-3, rtol=1e-3)
(res1_25 == res2_25).all()
(res1_25 == res3_25).all()
(res1_25 == res4_25).all()
res1_26 = module1.get_output(26).asnumpy()
res2_26 = res2[26].asnumpy()
res3_26 = res3[26].asnumpy()
res4_26 = res4[26].asnumpy()
np.testing.assert_allclose(res1_26 ,res2_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_26 ,res3_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_26 ,res4_26, atol=1e-3, rtol=1e-3)
(res1_26 == res2_26).all()
(res1_26 == res3_26).all()
(res1_26 == res4_26).all()
res1_27 = module1.get_output(27).asnumpy()
res2_27 = res2[27].asnumpy()
res3_27 = res3[27].asnumpy()
res4_27 = res4[27].asnumpy()
np.testing.assert_allclose(res1_27 ,res2_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_27 ,res3_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_27 ,res4_27, atol=1e-3, rtol=1e-3)
(res1_27 == res2_27).all()
(res1_27 == res3_27).all()
(res1_27 == res4_27).all()
res1_28 = module1.get_output(28).asnumpy()
res2_28 = res2[28].asnumpy()
res3_28 = res3[28].asnumpy()
res4_28 = res4[28].asnumpy()
np.testing.assert_allclose(res1_28 ,res2_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_28 ,res3_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_28 ,res4_28, atol=1e-3, rtol=1e-3)
(res1_28 == res2_28).all()
(res1_28 == res3_28).all()
(res1_28 == res4_28).all()
res1_29 = module1.get_output(29).asnumpy()
res2_29 = res2[29].asnumpy()
res3_29 = res3[29].asnumpy()
res4_29 = res4[29].asnumpy()
np.testing.assert_allclose(res1_29 ,res2_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_29 ,res3_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_29 ,res4_29, atol=1e-3, rtol=1e-3)
(res1_29 == res2_29).all()
(res1_29 == res3_29).all()
(res1_29 == res4_29).all()
res1_30 = module1.get_output(30).asnumpy()
res2_30 = res2[30].asnumpy()
res3_30 = res3[30].asnumpy()
res4_30 = res4[30].asnumpy()
np.testing.assert_allclose(res1_30 ,res2_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_30 ,res3_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_30 ,res4_30, atol=1e-3, rtol=1e-3)
(res1_30 == res2_30).all()
(res1_30 == res3_30).all()
(res1_30 == res4_30).all()
res1_31 = module1.get_output(31).asnumpy()
res2_31 = res2[31].asnumpy()
res3_31 = res3[31].asnumpy()
res4_31 = res4[31].asnumpy()
np.testing.assert_allclose(res1_31 ,res2_31, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_31 ,res3_31, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_31 ,res4_31, atol=1e-3, rtol=1e-3)
(res1_31 == res2_31).all()
(res1_31 == res3_31).all()
(res1_31 == res4_31).all()
module5.set_input('var_104', input_104)
module5.set_input('var_120', input_120)
module5.set_input('var_121', input_121)
module5.set_input('var_124', input_124)
module5.set_input('var_141', input_141)
module5.set_input('var_156', input_156)
module5.set_input('var_160', input_160)
module5.set_input('var_171', input_171)
module5.set_input('var_182', input_182)
module5.set_input('var_188', input_188)
module5.set_input('var_206', input_206)
module5.set_input('var_217', input_217)
module5.set_input('var_259', input_259)
module5.set_input('var_275', input_275)
module5.set_input('var_291', input_291)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_104, input_120, input_121, input_124, input_141, input_156, input_160, input_171, input_182, input_188, input_206, input_217, input_259, input_275, input_291, )
res7 = intrp7.evaluate()(input_104, input_120, input_121, input_124, input_141, input_156, input_160, input_171, input_182, input_188, input_206, input_217, input_259, input_275, input_291, )
res8 = intrp8.evaluate()(input_104, input_120, input_121, input_124, input_141, input_156, input_160, input_171, input_182, input_188, input_206, input_217, input_259, input_275, input_291, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
res5_14 = module5.get_output(14).asnumpy()
res6_14 = res6[14].asnumpy()
res7_14 = res7[14].asnumpy()
res8_14 = res8[14].asnumpy()
np.testing.assert_allclose(res5_14 ,res6_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res7_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res8_14, atol=1e-3, rtol=1e-3)
(res5_14 == res6_14).all()
(res5_14 == res7_14).all()
(res5_14 == res8_14).all()
res5_15 = module5.get_output(15).asnumpy()
res6_15 = res6[15].asnumpy()
res7_15 = res7[15].asnumpy()
res8_15 = res8[15].asnumpy()
np.testing.assert_allclose(res5_15 ,res6_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res7_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res8_15, atol=1e-3, rtol=1e-3)
(res5_15 == res6_15).all()
(res5_15 == res7_15).all()
(res5_15 == res8_15).all()
res5_16 = module5.get_output(16).asnumpy()
res6_16 = res6[16].asnumpy()
res7_16 = res7[16].asnumpy()
res8_16 = res8[16].asnumpy()
np.testing.assert_allclose(res5_16 ,res6_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res7_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res8_16, atol=1e-3, rtol=1e-3)
(res5_16 == res6_16).all()
(res5_16 == res7_16).all()
(res5_16 == res8_16).all()
res5_17 = module5.get_output(17).asnumpy()
res6_17 = res6[17].asnumpy()
res7_17 = res7[17].asnumpy()
res8_17 = res8[17].asnumpy()
np.testing.assert_allclose(res5_17 ,res6_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res7_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res8_17, atol=1e-3, rtol=1e-3)
(res5_17 == res6_17).all()
(res5_17 == res7_17).all()
(res5_17 == res8_17).all()
res5_18 = module5.get_output(18).asnumpy()
res6_18 = res6[18].asnumpy()
res7_18 = res7[18].asnumpy()
res8_18 = res8[18].asnumpy()
np.testing.assert_allclose(res5_18 ,res6_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res7_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res8_18, atol=1e-3, rtol=1e-3)
(res5_18 == res6_18).all()
(res5_18 == res7_18).all()
(res5_18 == res8_18).all()
res5_19 = module5.get_output(19).asnumpy()
res6_19 = res6[19].asnumpy()
res7_19 = res7[19].asnumpy()
res8_19 = res8[19].asnumpy()
np.testing.assert_allclose(res5_19 ,res6_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_19 ,res7_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_19 ,res8_19, atol=1e-3, rtol=1e-3)
(res5_19 == res6_19).all()
(res5_19 == res7_19).all()
(res5_19 == res8_19).all()
res5_20 = module5.get_output(20).asnumpy()
res6_20 = res6[20].asnumpy()
res7_20 = res7[20].asnumpy()
res8_20 = res8[20].asnumpy()
np.testing.assert_allclose(res5_20 ,res6_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_20 ,res7_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_20 ,res8_20, atol=1e-3, rtol=1e-3)
(res5_20 == res6_20).all()
(res5_20 == res7_20).all()
(res5_20 == res8_20).all()
res5_21 = module5.get_output(21).asnumpy()
res6_21 = res6[21].asnumpy()
res7_21 = res7[21].asnumpy()
res8_21 = res8[21].asnumpy()
np.testing.assert_allclose(res5_21 ,res6_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_21 ,res7_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_21 ,res8_21, atol=1e-3, rtol=1e-3)
(res5_21 == res6_21).all()
(res5_21 == res7_21).all()
(res5_21 == res8_21).all()
res5_22 = module5.get_output(22).asnumpy()
res6_22 = res6[22].asnumpy()
res7_22 = res7[22].asnumpy()
res8_22 = res8[22].asnumpy()
np.testing.assert_allclose(res5_22 ,res6_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_22 ,res7_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_22 ,res8_22, atol=1e-3, rtol=1e-3)
(res5_22 == res6_22).all()
(res5_22 == res7_22).all()
(res5_22 == res8_22).all()
res5_23 = module5.get_output(23).asnumpy()
res6_23 = res6[23].asnumpy()
res7_23 = res7[23].asnumpy()
res8_23 = res8[23].asnumpy()
np.testing.assert_allclose(res5_23 ,res6_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_23 ,res7_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_23 ,res8_23, atol=1e-3, rtol=1e-3)
(res5_23 == res6_23).all()
(res5_23 == res7_23).all()
(res5_23 == res8_23).all()
res5_24 = module5.get_output(24).asnumpy()
res6_24 = res6[24].asnumpy()
res7_24 = res7[24].asnumpy()
res8_24 = res8[24].asnumpy()
np.testing.assert_allclose(res5_24 ,res6_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_24 ,res7_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_24 ,res8_24, atol=1e-3, rtol=1e-3)
(res5_24 == res6_24).all()
(res5_24 == res7_24).all()
(res5_24 == res8_24).all()
res5_25 = module5.get_output(25).asnumpy()
res6_25 = res6[25].asnumpy()
res7_25 = res7[25].asnumpy()
res8_25 = res8[25].asnumpy()
np.testing.assert_allclose(res5_25 ,res6_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_25 ,res7_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_25 ,res8_25, atol=1e-3, rtol=1e-3)
(res5_25 == res6_25).all()
(res5_25 == res7_25).all()
(res5_25 == res8_25).all()
res5_26 = module5.get_output(26).asnumpy()
res6_26 = res6[26].asnumpy()
res7_26 = res7[26].asnumpy()
res8_26 = res8[26].asnumpy()
np.testing.assert_allclose(res5_26 ,res6_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_26 ,res7_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_26 ,res8_26, atol=1e-3, rtol=1e-3)
(res5_26 == res6_26).all()
(res5_26 == res7_26).all()
(res5_26 == res8_26).all()
res5_27 = module5.get_output(27).asnumpy()
res6_27 = res6[27].asnumpy()
res7_27 = res7[27].asnumpy()
res8_27 = res8[27].asnumpy()
np.testing.assert_allclose(res5_27 ,res6_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_27 ,res7_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_27 ,res8_27, atol=1e-3, rtol=1e-3)
(res5_27 == res6_27).all()
(res5_27 == res7_27).all()
(res5_27 == res8_27).all()
res5_28 = module5.get_output(28).asnumpy()
res6_28 = res6[28].asnumpy()
res7_28 = res7[28].asnumpy()
res8_28 = res8[28].asnumpy()
np.testing.assert_allclose(res5_28 ,res6_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_28 ,res7_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_28 ,res8_28, atol=1e-3, rtol=1e-3)
(res5_28 == res6_28).all()
(res5_28 == res7_28).all()
(res5_28 == res8_28).all()
res5_29 = module5.get_output(29).asnumpy()
res6_29 = res6[29].asnumpy()
res7_29 = res7[29].asnumpy()
res8_29 = res8[29].asnumpy()
np.testing.assert_allclose(res5_29 ,res6_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_29 ,res7_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_29 ,res8_29, atol=1e-3, rtol=1e-3)
(res5_29 == res6_29).all()
(res5_29 == res7_29).all()
(res5_29 == res8_29).all()
res5_30 = module5.get_output(30).asnumpy()
res6_30 = res6[30].asnumpy()
res7_30 = res7[30].asnumpy()
res8_30 = res8[30].asnumpy()
np.testing.assert_allclose(res5_30 ,res6_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_30 ,res7_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_30 ,res8_30, atol=1e-3, rtol=1e-3)
(res5_30 == res6_30).all()
(res5_30 == res7_30).all()
(res5_30 == res8_30).all()
res5_31 = module5.get_output(31).asnumpy()
res6_31 = res6[31].asnumpy()
res7_31 = res7[31].asnumpy()
res8_31 = res8[31].asnumpy()
np.testing.assert_allclose(res5_31 ,res6_31, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_31 ,res7_31, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_31 ,res8_31, atol=1e-3, rtol=1e-3)
(res5_31 == res6_31).all()
(res5_31 == res7_31).all()
(res5_31 == res8_31).all()
module9.set_input('var_104', input_104)
module9.set_input('var_120', input_120)
module9.set_input('var_121', input_121)
module9.set_input('var_124', input_124)
module9.set_input('var_141', input_141)
module9.set_input('var_156', input_156)
module9.set_input('var_160', input_160)
module9.set_input('var_171', input_171)
module9.set_input('var_182', input_182)
module9.set_input('var_188', input_188)
module9.set_input('var_206', input_206)
module9.set_input('var_217', input_217)
module9.set_input('var_259', input_259)
module9.set_input('var_275', input_275)
module9.set_input('var_291', input_291)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_104, input_120, input_121, input_124, input_141, input_156, input_160, input_171, input_182, input_188, input_206, input_217, input_259, input_275, input_291, )
res11 = intrp11.evaluate()(input_104, input_120, input_121, input_124, input_141, input_156, input_160, input_171, input_182, input_188, input_206, input_217, input_259, input_275, input_291, )
res12 = intrp12.evaluate()(input_104, input_120, input_121, input_124, input_141, input_156, input_160, input_171, input_182, input_188, input_206, input_217, input_259, input_275, input_291, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
res9_14 = module9.get_output(14).asnumpy()
res10_14 = res10[14].asnumpy()
res11_14 = res11[14].asnumpy()
res12_14 = res12[14].asnumpy()
np.testing.assert_allclose(res9_14 ,res10_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res11_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res12_14, atol=1e-3, rtol=1e-3)
(res9_14 == res10_14).all()
(res9_14 == res11_14).all()
(res9_14 == res12_14).all()
res9_15 = module9.get_output(15).asnumpy()
res10_15 = res10[15].asnumpy()
res11_15 = res11[15].asnumpy()
res12_15 = res12[15].asnumpy()
np.testing.assert_allclose(res9_15 ,res10_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res11_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res12_15, atol=1e-3, rtol=1e-3)
(res9_15 == res10_15).all()
(res9_15 == res11_15).all()
(res9_15 == res12_15).all()
res9_16 = module9.get_output(16).asnumpy()
res10_16 = res10[16].asnumpy()
res11_16 = res11[16].asnumpy()
res12_16 = res12[16].asnumpy()
np.testing.assert_allclose(res9_16 ,res10_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res11_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res12_16, atol=1e-3, rtol=1e-3)
(res9_16 == res10_16).all()
(res9_16 == res11_16).all()
(res9_16 == res12_16).all()
res9_17 = module9.get_output(17).asnumpy()
res10_17 = res10[17].asnumpy()
res11_17 = res11[17].asnumpy()
res12_17 = res12[17].asnumpy()
np.testing.assert_allclose(res9_17 ,res10_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res11_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res12_17, atol=1e-3, rtol=1e-3)
(res9_17 == res10_17).all()
(res9_17 == res11_17).all()
(res9_17 == res12_17).all()
res9_18 = module9.get_output(18).asnumpy()
res10_18 = res10[18].asnumpy()
res11_18 = res11[18].asnumpy()
res12_18 = res12[18].asnumpy()
np.testing.assert_allclose(res9_18 ,res10_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res11_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res12_18, atol=1e-3, rtol=1e-3)
(res9_18 == res10_18).all()
(res9_18 == res11_18).all()
(res9_18 == res12_18).all()
res9_19 = module9.get_output(19).asnumpy()
res10_19 = res10[19].asnumpy()
res11_19 = res11[19].asnumpy()
res12_19 = res12[19].asnumpy()
np.testing.assert_allclose(res9_19 ,res10_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_19 ,res11_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_19 ,res12_19, atol=1e-3, rtol=1e-3)
(res9_19 == res10_19).all()
(res9_19 == res11_19).all()
(res9_19 == res12_19).all()
res9_20 = module9.get_output(20).asnumpy()
res10_20 = res10[20].asnumpy()
res11_20 = res11[20].asnumpy()
res12_20 = res12[20].asnumpy()
np.testing.assert_allclose(res9_20 ,res10_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_20 ,res11_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_20 ,res12_20, atol=1e-3, rtol=1e-3)
(res9_20 == res10_20).all()
(res9_20 == res11_20).all()
(res9_20 == res12_20).all()
res9_21 = module9.get_output(21).asnumpy()
res10_21 = res10[21].asnumpy()
res11_21 = res11[21].asnumpy()
res12_21 = res12[21].asnumpy()
np.testing.assert_allclose(res9_21 ,res10_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_21 ,res11_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_21 ,res12_21, atol=1e-3, rtol=1e-3)
(res9_21 == res10_21).all()
(res9_21 == res11_21).all()
(res9_21 == res12_21).all()
res9_22 = module9.get_output(22).asnumpy()
res10_22 = res10[22].asnumpy()
res11_22 = res11[22].asnumpy()
res12_22 = res12[22].asnumpy()
np.testing.assert_allclose(res9_22 ,res10_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_22 ,res11_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_22 ,res12_22, atol=1e-3, rtol=1e-3)
(res9_22 == res10_22).all()
(res9_22 == res11_22).all()
(res9_22 == res12_22).all()
res9_23 = module9.get_output(23).asnumpy()
res10_23 = res10[23].asnumpy()
res11_23 = res11[23].asnumpy()
res12_23 = res12[23].asnumpy()
np.testing.assert_allclose(res9_23 ,res10_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_23 ,res11_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_23 ,res12_23, atol=1e-3, rtol=1e-3)
(res9_23 == res10_23).all()
(res9_23 == res11_23).all()
(res9_23 == res12_23).all()
res9_24 = module9.get_output(24).asnumpy()
res10_24 = res10[24].asnumpy()
res11_24 = res11[24].asnumpy()
res12_24 = res12[24].asnumpy()
np.testing.assert_allclose(res9_24 ,res10_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_24 ,res11_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_24 ,res12_24, atol=1e-3, rtol=1e-3)
(res9_24 == res10_24).all()
(res9_24 == res11_24).all()
(res9_24 == res12_24).all()
res9_25 = module9.get_output(25).asnumpy()
res10_25 = res10[25].asnumpy()
res11_25 = res11[25].asnumpy()
res12_25 = res12[25].asnumpy()
np.testing.assert_allclose(res9_25 ,res10_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_25 ,res11_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_25 ,res12_25, atol=1e-3, rtol=1e-3)
(res9_25 == res10_25).all()
(res9_25 == res11_25).all()
(res9_25 == res12_25).all()
res9_26 = module9.get_output(26).asnumpy()
res10_26 = res10[26].asnumpy()
res11_26 = res11[26].asnumpy()
res12_26 = res12[26].asnumpy()
np.testing.assert_allclose(res9_26 ,res10_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_26 ,res11_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_26 ,res12_26, atol=1e-3, rtol=1e-3)
(res9_26 == res10_26).all()
(res9_26 == res11_26).all()
(res9_26 == res12_26).all()
res9_27 = module9.get_output(27).asnumpy()
res10_27 = res10[27].asnumpy()
res11_27 = res11[27].asnumpy()
res12_27 = res12[27].asnumpy()
np.testing.assert_allclose(res9_27 ,res10_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_27 ,res11_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_27 ,res12_27, atol=1e-3, rtol=1e-3)
(res9_27 == res10_27).all()
(res9_27 == res11_27).all()
(res9_27 == res12_27).all()
res9_28 = module9.get_output(28).asnumpy()
res10_28 = res10[28].asnumpy()
res11_28 = res11[28].asnumpy()
res12_28 = res12[28].asnumpy()
np.testing.assert_allclose(res9_28 ,res10_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_28 ,res11_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_28 ,res12_28, atol=1e-3, rtol=1e-3)
(res9_28 == res10_28).all()
(res9_28 == res11_28).all()
(res9_28 == res12_28).all()
res9_29 = module9.get_output(29).asnumpy()
res10_29 = res10[29].asnumpy()
res11_29 = res11[29].asnumpy()
res12_29 = res12[29].asnumpy()
np.testing.assert_allclose(res9_29 ,res10_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_29 ,res11_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_29 ,res12_29, atol=1e-3, rtol=1e-3)
(res9_29 == res10_29).all()
(res9_29 == res11_29).all()
(res9_29 == res12_29).all()
res9_30 = module9.get_output(30).asnumpy()
res10_30 = res10[30].asnumpy()
res11_30 = res11[30].asnumpy()
res12_30 = res12[30].asnumpy()
np.testing.assert_allclose(res9_30 ,res10_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_30 ,res11_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_30 ,res12_30, atol=1e-3, rtol=1e-3)
(res9_30 == res10_30).all()
(res9_30 == res11_30).all()
(res9_30 == res12_30).all()
res9_31 = module9.get_output(31).asnumpy()
res10_31 = res10[31].asnumpy()
res11_31 = res11[31].asnumpy()
res12_31 = res12[31].asnumpy()
np.testing.assert_allclose(res9_31 ,res10_31, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_31 ,res11_31, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_31 ,res12_31, atol=1e-3, rtol=1e-3)
(res9_31 == res10_31).all()
(res9_31 == res11_31).all()
(res9_31 == res12_31).all()
module13.set_input('var_104', input_104)
module13.set_input('var_120', input_120)
module13.set_input('var_121', input_121)
module13.set_input('var_124', input_124)
module13.set_input('var_141', input_141)
module13.set_input('var_156', input_156)
module13.set_input('var_160', input_160)
module13.set_input('var_171', input_171)
module13.set_input('var_182', input_182)
module13.set_input('var_188', input_188)
module13.set_input('var_206', input_206)
module13.set_input('var_217', input_217)
module13.set_input('var_259', input_259)
module13.set_input('var_275', input_275)
module13.set_input('var_291', input_291)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_104, input_120, input_121, input_124, input_141, input_156, input_160, input_171, input_182, input_188, input_206, input_217, input_259, input_275, input_291, )
res15 = intrp15.evaluate()(input_104, input_120, input_121, input_124, input_141, input_156, input_160, input_171, input_182, input_188, input_206, input_217, input_259, input_275, input_291, )
res16 = intrp16.evaluate()(input_104, input_120, input_121, input_124, input_141, input_156, input_160, input_171, input_182, input_188, input_206, input_217, input_259, input_275, input_291, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
res13_14 = module13.get_output(14).asnumpy()
res14_14 = res14[14].asnumpy()
res15_14 = res15[14].asnumpy()
res16_14 = res16[14].asnumpy()
np.testing.assert_allclose(res13_14 ,res14_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res15_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res16_14, atol=1e-3, rtol=1e-3)
(res13_14 == res14_14).all()
(res13_14 == res15_14).all()
(res13_14 == res16_14).all()
res13_15 = module13.get_output(15).asnumpy()
res14_15 = res14[15].asnumpy()
res15_15 = res15[15].asnumpy()
res16_15 = res16[15].asnumpy()
np.testing.assert_allclose(res13_15 ,res14_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res15_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res16_15, atol=1e-3, rtol=1e-3)
(res13_15 == res14_15).all()
(res13_15 == res15_15).all()
(res13_15 == res16_15).all()
res13_16 = module13.get_output(16).asnumpy()
res14_16 = res14[16].asnumpy()
res15_16 = res15[16].asnumpy()
res16_16 = res16[16].asnumpy()
np.testing.assert_allclose(res13_16 ,res14_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res15_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res16_16, atol=1e-3, rtol=1e-3)
(res13_16 == res14_16).all()
(res13_16 == res15_16).all()
(res13_16 == res16_16).all()
res13_17 = module13.get_output(17).asnumpy()
res14_17 = res14[17].asnumpy()
res15_17 = res15[17].asnumpy()
res16_17 = res16[17].asnumpy()
np.testing.assert_allclose(res13_17 ,res14_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res15_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res16_17, atol=1e-3, rtol=1e-3)
(res13_17 == res14_17).all()
(res13_17 == res15_17).all()
(res13_17 == res16_17).all()
res13_18 = module13.get_output(18).asnumpy()
res14_18 = res14[18].asnumpy()
res15_18 = res15[18].asnumpy()
res16_18 = res16[18].asnumpy()
np.testing.assert_allclose(res13_18 ,res14_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res15_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res16_18, atol=1e-3, rtol=1e-3)
(res13_18 == res14_18).all()
(res13_18 == res15_18).all()
(res13_18 == res16_18).all()
res13_19 = module13.get_output(19).asnumpy()
res14_19 = res14[19].asnumpy()
res15_19 = res15[19].asnumpy()
res16_19 = res16[19].asnumpy()
np.testing.assert_allclose(res13_19 ,res14_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_19 ,res15_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_19 ,res16_19, atol=1e-3, rtol=1e-3)
(res13_19 == res14_19).all()
(res13_19 == res15_19).all()
(res13_19 == res16_19).all()
res13_20 = module13.get_output(20).asnumpy()
res14_20 = res14[20].asnumpy()
res15_20 = res15[20].asnumpy()
res16_20 = res16[20].asnumpy()
np.testing.assert_allclose(res13_20 ,res14_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_20 ,res15_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_20 ,res16_20, atol=1e-3, rtol=1e-3)
(res13_20 == res14_20).all()
(res13_20 == res15_20).all()
(res13_20 == res16_20).all()
res13_21 = module13.get_output(21).asnumpy()
res14_21 = res14[21].asnumpy()
res15_21 = res15[21].asnumpy()
res16_21 = res16[21].asnumpy()
np.testing.assert_allclose(res13_21 ,res14_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_21 ,res15_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_21 ,res16_21, atol=1e-3, rtol=1e-3)
(res13_21 == res14_21).all()
(res13_21 == res15_21).all()
(res13_21 == res16_21).all()
res13_22 = module13.get_output(22).asnumpy()
res14_22 = res14[22].asnumpy()
res15_22 = res15[22].asnumpy()
res16_22 = res16[22].asnumpy()
np.testing.assert_allclose(res13_22 ,res14_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_22 ,res15_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_22 ,res16_22, atol=1e-3, rtol=1e-3)
(res13_22 == res14_22).all()
(res13_22 == res15_22).all()
(res13_22 == res16_22).all()
res13_23 = module13.get_output(23).asnumpy()
res14_23 = res14[23].asnumpy()
res15_23 = res15[23].asnumpy()
res16_23 = res16[23].asnumpy()
np.testing.assert_allclose(res13_23 ,res14_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_23 ,res15_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_23 ,res16_23, atol=1e-3, rtol=1e-3)
(res13_23 == res14_23).all()
(res13_23 == res15_23).all()
(res13_23 == res16_23).all()
res13_24 = module13.get_output(24).asnumpy()
res14_24 = res14[24].asnumpy()
res15_24 = res15[24].asnumpy()
res16_24 = res16[24].asnumpy()
np.testing.assert_allclose(res13_24 ,res14_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_24 ,res15_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_24 ,res16_24, atol=1e-3, rtol=1e-3)
(res13_24 == res14_24).all()
(res13_24 == res15_24).all()
(res13_24 == res16_24).all()
res13_25 = module13.get_output(25).asnumpy()
res14_25 = res14[25].asnumpy()
res15_25 = res15[25].asnumpy()
res16_25 = res16[25].asnumpy()
np.testing.assert_allclose(res13_25 ,res14_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_25 ,res15_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_25 ,res16_25, atol=1e-3, rtol=1e-3)
(res13_25 == res14_25).all()
(res13_25 == res15_25).all()
(res13_25 == res16_25).all()
res13_26 = module13.get_output(26).asnumpy()
res14_26 = res14[26].asnumpy()
res15_26 = res15[26].asnumpy()
res16_26 = res16[26].asnumpy()
np.testing.assert_allclose(res13_26 ,res14_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_26 ,res15_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_26 ,res16_26, atol=1e-3, rtol=1e-3)
(res13_26 == res14_26).all()
(res13_26 == res15_26).all()
(res13_26 == res16_26).all()
res13_27 = module13.get_output(27).asnumpy()
res14_27 = res14[27].asnumpy()
res15_27 = res15[27].asnumpy()
res16_27 = res16[27].asnumpy()
np.testing.assert_allclose(res13_27 ,res14_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_27 ,res15_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_27 ,res16_27, atol=1e-3, rtol=1e-3)
(res13_27 == res14_27).all()
(res13_27 == res15_27).all()
(res13_27 == res16_27).all()
res13_28 = module13.get_output(28).asnumpy()
res14_28 = res14[28].asnumpy()
res15_28 = res15[28].asnumpy()
res16_28 = res16[28].asnumpy()
np.testing.assert_allclose(res13_28 ,res14_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_28 ,res15_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_28 ,res16_28, atol=1e-3, rtol=1e-3)
(res13_28 == res14_28).all()
(res13_28 == res15_28).all()
(res13_28 == res16_28).all()
res13_29 = module13.get_output(29).asnumpy()
res14_29 = res14[29].asnumpy()
res15_29 = res15[29].asnumpy()
res16_29 = res16[29].asnumpy()
np.testing.assert_allclose(res13_29 ,res14_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_29 ,res15_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_29 ,res16_29, atol=1e-3, rtol=1e-3)
(res13_29 == res14_29).all()
(res13_29 == res15_29).all()
(res13_29 == res16_29).all()
res13_30 = module13.get_output(30).asnumpy()
res14_30 = res14[30].asnumpy()
res15_30 = res15[30].asnumpy()
res16_30 = res16[30].asnumpy()
np.testing.assert_allclose(res13_30 ,res14_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_30 ,res15_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_30 ,res16_30, atol=1e-3, rtol=1e-3)
(res13_30 == res14_30).all()
(res13_30 == res15_30).all()
(res13_30 == res16_30).all()
res13_31 = module13.get_output(31).asnumpy()
res14_31 = res14[31].asnumpy()
res15_31 = res15[31].asnumpy()
res16_31 = res16[31].asnumpy()
np.testing.assert_allclose(res13_31 ,res14_31, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_31 ,res15_31, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_31 ,res16_31, atol=1e-3, rtol=1e-3)
(res13_31 == res14_31).all()
(res13_31 == res15_31).all()
(res13_31 == res16_31).all()
module17.set_input('var_104', input_104)
module17.set_input('var_120', input_120)
module17.set_input('var_121', input_121)
module17.set_input('var_124', input_124)
module17.set_input('var_141', input_141)
module17.set_input('var_156', input_156)
module17.set_input('var_160', input_160)
module17.set_input('var_171', input_171)
module17.set_input('var_182', input_182)
module17.set_input('var_188', input_188)
module17.set_input('var_206', input_206)
module17.set_input('var_217', input_217)
module17.set_input('var_259', input_259)
module17.set_input('var_275', input_275)
module17.set_input('var_291', input_291)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_104, input_120, input_121, input_124, input_141, input_156, input_160, input_171, input_182, input_188, input_206, input_217, input_259, input_275, input_291, )
res19 = intrp19.evaluate()(input_104, input_120, input_121, input_124, input_141, input_156, input_160, input_171, input_182, input_188, input_206, input_217, input_259, input_275, input_291, )
res20 = intrp20.evaluate()(input_104, input_120, input_121, input_124, input_141, input_156, input_160, input_171, input_182, input_188, input_206, input_217, input_259, input_275, input_291, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
res17_14 = module17.get_output(14).asnumpy()
res18_14 = res18[14].asnumpy()
res19_14 = res19[14].asnumpy()
res20_14 = res20[14].asnumpy()
np.testing.assert_allclose(res17_14 ,res18_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res19_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res20_14, atol=1e-3, rtol=1e-3)
(res17_14 == res18_14).all()
(res17_14 == res19_14).all()
(res17_14 == res20_14).all()
res17_15 = module17.get_output(15).asnumpy()
res18_15 = res18[15].asnumpy()
res19_15 = res19[15].asnumpy()
res20_15 = res20[15].asnumpy()
np.testing.assert_allclose(res17_15 ,res18_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res19_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res20_15, atol=1e-3, rtol=1e-3)
(res17_15 == res18_15).all()
(res17_15 == res19_15).all()
(res17_15 == res20_15).all()
res17_16 = module17.get_output(16).asnumpy()
res18_16 = res18[16].asnumpy()
res19_16 = res19[16].asnumpy()
res20_16 = res20[16].asnumpy()
np.testing.assert_allclose(res17_16 ,res18_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res19_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res20_16, atol=1e-3, rtol=1e-3)
(res17_16 == res18_16).all()
(res17_16 == res19_16).all()
(res17_16 == res20_16).all()
res17_17 = module17.get_output(17).asnumpy()
res18_17 = res18[17].asnumpy()
res19_17 = res19[17].asnumpy()
res20_17 = res20[17].asnumpy()
np.testing.assert_allclose(res17_17 ,res18_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res19_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res20_17, atol=1e-3, rtol=1e-3)
(res17_17 == res18_17).all()
(res17_17 == res19_17).all()
(res17_17 == res20_17).all()
res17_18 = module17.get_output(18).asnumpy()
res18_18 = res18[18].asnumpy()
res19_18 = res19[18].asnumpy()
res20_18 = res20[18].asnumpy()
np.testing.assert_allclose(res17_18 ,res18_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res19_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res20_18, atol=1e-3, rtol=1e-3)
(res17_18 == res18_18).all()
(res17_18 == res19_18).all()
(res17_18 == res20_18).all()
res17_19 = module17.get_output(19).asnumpy()
res18_19 = res18[19].asnumpy()
res19_19 = res19[19].asnumpy()
res20_19 = res20[19].asnumpy()
np.testing.assert_allclose(res17_19 ,res18_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_19 ,res19_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_19 ,res20_19, atol=1e-3, rtol=1e-3)
(res17_19 == res18_19).all()
(res17_19 == res19_19).all()
(res17_19 == res20_19).all()
res17_20 = module17.get_output(20).asnumpy()
res18_20 = res18[20].asnumpy()
res19_20 = res19[20].asnumpy()
res20_20 = res20[20].asnumpy()
np.testing.assert_allclose(res17_20 ,res18_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_20 ,res19_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_20 ,res20_20, atol=1e-3, rtol=1e-3)
(res17_20 == res18_20).all()
(res17_20 == res19_20).all()
(res17_20 == res20_20).all()
res17_21 = module17.get_output(21).asnumpy()
res18_21 = res18[21].asnumpy()
res19_21 = res19[21].asnumpy()
res20_21 = res20[21].asnumpy()
np.testing.assert_allclose(res17_21 ,res18_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_21 ,res19_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_21 ,res20_21, atol=1e-3, rtol=1e-3)
(res17_21 == res18_21).all()
(res17_21 == res19_21).all()
(res17_21 == res20_21).all()
res17_22 = module17.get_output(22).asnumpy()
res18_22 = res18[22].asnumpy()
res19_22 = res19[22].asnumpy()
res20_22 = res20[22].asnumpy()
np.testing.assert_allclose(res17_22 ,res18_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_22 ,res19_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_22 ,res20_22, atol=1e-3, rtol=1e-3)
(res17_22 == res18_22).all()
(res17_22 == res19_22).all()
(res17_22 == res20_22).all()
res17_23 = module17.get_output(23).asnumpy()
res18_23 = res18[23].asnumpy()
res19_23 = res19[23].asnumpy()
res20_23 = res20[23].asnumpy()
np.testing.assert_allclose(res17_23 ,res18_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_23 ,res19_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_23 ,res20_23, atol=1e-3, rtol=1e-3)
(res17_23 == res18_23).all()
(res17_23 == res19_23).all()
(res17_23 == res20_23).all()
res17_24 = module17.get_output(24).asnumpy()
res18_24 = res18[24].asnumpy()
res19_24 = res19[24].asnumpy()
res20_24 = res20[24].asnumpy()
np.testing.assert_allclose(res17_24 ,res18_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_24 ,res19_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_24 ,res20_24, atol=1e-3, rtol=1e-3)
(res17_24 == res18_24).all()
(res17_24 == res19_24).all()
(res17_24 == res20_24).all()
res17_25 = module17.get_output(25).asnumpy()
res18_25 = res18[25].asnumpy()
res19_25 = res19[25].asnumpy()
res20_25 = res20[25].asnumpy()
np.testing.assert_allclose(res17_25 ,res18_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_25 ,res19_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_25 ,res20_25, atol=1e-3, rtol=1e-3)
(res17_25 == res18_25).all()
(res17_25 == res19_25).all()
(res17_25 == res20_25).all()
res17_26 = module17.get_output(26).asnumpy()
res18_26 = res18[26].asnumpy()
res19_26 = res19[26].asnumpy()
res20_26 = res20[26].asnumpy()
np.testing.assert_allclose(res17_26 ,res18_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_26 ,res19_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_26 ,res20_26, atol=1e-3, rtol=1e-3)
(res17_26 == res18_26).all()
(res17_26 == res19_26).all()
(res17_26 == res20_26).all()
res17_27 = module17.get_output(27).asnumpy()
res18_27 = res18[27].asnumpy()
res19_27 = res19[27].asnumpy()
res20_27 = res20[27].asnumpy()
np.testing.assert_allclose(res17_27 ,res18_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_27 ,res19_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_27 ,res20_27, atol=1e-3, rtol=1e-3)
(res17_27 == res18_27).all()
(res17_27 == res19_27).all()
(res17_27 == res20_27).all()
res17_28 = module17.get_output(28).asnumpy()
res18_28 = res18[28].asnumpy()
res19_28 = res19[28].asnumpy()
res20_28 = res20[28].asnumpy()
np.testing.assert_allclose(res17_28 ,res18_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_28 ,res19_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_28 ,res20_28, atol=1e-3, rtol=1e-3)
(res17_28 == res18_28).all()
(res17_28 == res19_28).all()
(res17_28 == res20_28).all()
res17_29 = module17.get_output(29).asnumpy()
res18_29 = res18[29].asnumpy()
res19_29 = res19[29].asnumpy()
res20_29 = res20[29].asnumpy()
np.testing.assert_allclose(res17_29 ,res18_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_29 ,res19_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_29 ,res20_29, atol=1e-3, rtol=1e-3)
(res17_29 == res18_29).all()
(res17_29 == res19_29).all()
(res17_29 == res20_29).all()
res17_30 = module17.get_output(30).asnumpy()
res18_30 = res18[30].asnumpy()
res19_30 = res19[30].asnumpy()
res20_30 = res20[30].asnumpy()
np.testing.assert_allclose(res17_30 ,res18_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_30 ,res19_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_30 ,res20_30, atol=1e-3, rtol=1e-3)
(res17_30 == res18_30).all()
(res17_30 == res19_30).all()
(res17_30 == res20_30).all()
res17_31 = module17.get_output(31).asnumpy()
res18_31 = res18[31].asnumpy()
res19_31 = res19[31].asnumpy()
res20_31 = res20[31].asnumpy()
np.testing.assert_allclose(res17_31 ,res18_31, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_31 ,res19_31, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_31 ,res20_31, atol=1e-3, rtol=1e-3)
(res17_31 == res18_31).all()
(res17_31 == res19_31).all()
(res17_31 == res20_31).all()
module21.set_input('var_104', input_104)
module21.set_input('var_120', input_120)
module21.set_input('var_121', input_121)
module21.set_input('var_124', input_124)
module21.set_input('var_141', input_141)
module21.set_input('var_156', input_156)
module21.set_input('var_160', input_160)
module21.set_input('var_171', input_171)
module21.set_input('var_182', input_182)
module21.set_input('var_188', input_188)
module21.set_input('var_206', input_206)
module21.set_input('var_217', input_217)
module21.set_input('var_259', input_259)
module21.set_input('var_275', input_275)
module21.set_input('var_291', input_291)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_104, input_120, input_121, input_124, input_141, input_156, input_160, input_171, input_182, input_188, input_206, input_217, input_259, input_275, input_291, )
res23 = intrp23.evaluate()(input_104, input_120, input_121, input_124, input_141, input_156, input_160, input_171, input_182, input_188, input_206, input_217, input_259, input_275, input_291, )
res24 = intrp24.evaluate()(input_104, input_120, input_121, input_124, input_141, input_156, input_160, input_171, input_182, input_188, input_206, input_217, input_259, input_275, input_291, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()
res21_14 = module21.get_output(14).asnumpy()
res22_14 = res22[14].asnumpy()
res23_14 = res23[14].asnumpy()
res24_14 = res24[14].asnumpy()
np.testing.assert_allclose(res21_14 ,res22_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res23_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res24_14, atol=1e-3, rtol=1e-3)
(res21_14 == res22_14).all()
(res21_14 == res23_14).all()
(res21_14 == res24_14).all()
res21_15 = module21.get_output(15).asnumpy()
res22_15 = res22[15].asnumpy()
res23_15 = res23[15].asnumpy()
res24_15 = res24[15].asnumpy()
np.testing.assert_allclose(res21_15 ,res22_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res23_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res24_15, atol=1e-3, rtol=1e-3)
(res21_15 == res22_15).all()
(res21_15 == res23_15).all()
(res21_15 == res24_15).all()
res21_16 = module21.get_output(16).asnumpy()
res22_16 = res22[16].asnumpy()
res23_16 = res23[16].asnumpy()
res24_16 = res24[16].asnumpy()
np.testing.assert_allclose(res21_16 ,res22_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res23_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res24_16, atol=1e-3, rtol=1e-3)
(res21_16 == res22_16).all()
(res21_16 == res23_16).all()
(res21_16 == res24_16).all()
res21_17 = module21.get_output(17).asnumpy()
res22_17 = res22[17].asnumpy()
res23_17 = res23[17].asnumpy()
res24_17 = res24[17].asnumpy()
np.testing.assert_allclose(res21_17 ,res22_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res23_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res24_17, atol=1e-3, rtol=1e-3)
(res21_17 == res22_17).all()
(res21_17 == res23_17).all()
(res21_17 == res24_17).all()
res21_18 = module21.get_output(18).asnumpy()
res22_18 = res22[18].asnumpy()
res23_18 = res23[18].asnumpy()
res24_18 = res24[18].asnumpy()
np.testing.assert_allclose(res21_18 ,res22_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res23_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res24_18, atol=1e-3, rtol=1e-3)
(res21_18 == res22_18).all()
(res21_18 == res23_18).all()
(res21_18 == res24_18).all()
res21_19 = module21.get_output(19).asnumpy()
res22_19 = res22[19].asnumpy()
res23_19 = res23[19].asnumpy()
res24_19 = res24[19].asnumpy()
np.testing.assert_allclose(res21_19 ,res22_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_19 ,res23_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_19 ,res24_19, atol=1e-3, rtol=1e-3)
(res21_19 == res22_19).all()
(res21_19 == res23_19).all()
(res21_19 == res24_19).all()
res21_20 = module21.get_output(20).asnumpy()
res22_20 = res22[20].asnumpy()
res23_20 = res23[20].asnumpy()
res24_20 = res24[20].asnumpy()
np.testing.assert_allclose(res21_20 ,res22_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_20 ,res23_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_20 ,res24_20, atol=1e-3, rtol=1e-3)
(res21_20 == res22_20).all()
(res21_20 == res23_20).all()
(res21_20 == res24_20).all()
res21_21 = module21.get_output(21).asnumpy()
res22_21 = res22[21].asnumpy()
res23_21 = res23[21].asnumpy()
res24_21 = res24[21].asnumpy()
np.testing.assert_allclose(res21_21 ,res22_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_21 ,res23_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_21 ,res24_21, atol=1e-3, rtol=1e-3)
(res21_21 == res22_21).all()
(res21_21 == res23_21).all()
(res21_21 == res24_21).all()
res21_22 = module21.get_output(22).asnumpy()
res22_22 = res22[22].asnumpy()
res23_22 = res23[22].asnumpy()
res24_22 = res24[22].asnumpy()
np.testing.assert_allclose(res21_22 ,res22_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_22 ,res23_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_22 ,res24_22, atol=1e-3, rtol=1e-3)
(res21_22 == res22_22).all()
(res21_22 == res23_22).all()
(res21_22 == res24_22).all()
res21_23 = module21.get_output(23).asnumpy()
res22_23 = res22[23].asnumpy()
res23_23 = res23[23].asnumpy()
res24_23 = res24[23].asnumpy()
np.testing.assert_allclose(res21_23 ,res22_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_23 ,res23_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_23 ,res24_23, atol=1e-3, rtol=1e-3)
(res21_23 == res22_23).all()
(res21_23 == res23_23).all()
(res21_23 == res24_23).all()
res21_24 = module21.get_output(24).asnumpy()
res22_24 = res22[24].asnumpy()
res23_24 = res23[24].asnumpy()
res24_24 = res24[24].asnumpy()
np.testing.assert_allclose(res21_24 ,res22_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_24 ,res23_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_24 ,res24_24, atol=1e-3, rtol=1e-3)
(res21_24 == res22_24).all()
(res21_24 == res23_24).all()
(res21_24 == res24_24).all()
res21_25 = module21.get_output(25).asnumpy()
res22_25 = res22[25].asnumpy()
res23_25 = res23[25].asnumpy()
res24_25 = res24[25].asnumpy()
np.testing.assert_allclose(res21_25 ,res22_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_25 ,res23_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_25 ,res24_25, atol=1e-3, rtol=1e-3)
(res21_25 == res22_25).all()
(res21_25 == res23_25).all()
(res21_25 == res24_25).all()
res21_26 = module21.get_output(26).asnumpy()
res22_26 = res22[26].asnumpy()
res23_26 = res23[26].asnumpy()
res24_26 = res24[26].asnumpy()
np.testing.assert_allclose(res21_26 ,res22_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_26 ,res23_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_26 ,res24_26, atol=1e-3, rtol=1e-3)
(res21_26 == res22_26).all()
(res21_26 == res23_26).all()
(res21_26 == res24_26).all()
res21_27 = module21.get_output(27).asnumpy()
res22_27 = res22[27].asnumpy()
res23_27 = res23[27].asnumpy()
res24_27 = res24[27].asnumpy()
np.testing.assert_allclose(res21_27 ,res22_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_27 ,res23_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_27 ,res24_27, atol=1e-3, rtol=1e-3)
(res21_27 == res22_27).all()
(res21_27 == res23_27).all()
(res21_27 == res24_27).all()
res21_28 = module21.get_output(28).asnumpy()
res22_28 = res22[28].asnumpy()
res23_28 = res23[28].asnumpy()
res24_28 = res24[28].asnumpy()
np.testing.assert_allclose(res21_28 ,res22_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_28 ,res23_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_28 ,res24_28, atol=1e-3, rtol=1e-3)
(res21_28 == res22_28).all()
(res21_28 == res23_28).all()
(res21_28 == res24_28).all()
res21_29 = module21.get_output(29).asnumpy()
res22_29 = res22[29].asnumpy()
res23_29 = res23[29].asnumpy()
res24_29 = res24[29].asnumpy()
np.testing.assert_allclose(res21_29 ,res22_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_29 ,res23_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_29 ,res24_29, atol=1e-3, rtol=1e-3)
(res21_29 == res22_29).all()
(res21_29 == res23_29).all()
(res21_29 == res24_29).all()
res21_30 = module21.get_output(30).asnumpy()
res22_30 = res22[30].asnumpy()
res23_30 = res23[30].asnumpy()
res24_30 = res24[30].asnumpy()
np.testing.assert_allclose(res21_30 ,res22_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_30 ,res23_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_30 ,res24_30, atol=1e-3, rtol=1e-3)
(res21_30 == res22_30).all()
(res21_30 == res23_30).all()
(res21_30 == res24_30).all()
res21_31 = module21.get_output(31).asnumpy()
res22_31 = res22[31].asnumpy()
res23_31 = res23[31].asnumpy()
res24_31 = res24[31].asnumpy()
np.testing.assert_allclose(res21_31 ,res22_31, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_31 ,res23_31, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_31 ,res24_31, atol=1e-3, rtol=1e-3)
(res21_31 == res22_31).all()
(res21_31 == res23_31).all()
(res21_31 == res24_31).all()

'''104: TVMFuncCall
103: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
102: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
101: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
100: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
99: tvm::transform::Pass::operator()(tvm::IRModule) const
98: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
97: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
96: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
95: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
94: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
93: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
92: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
91: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
90: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
89: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
88: _ZN3tvm5relay16MixedModeMutato
87: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
86: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
85: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
84: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
83: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
82: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
81: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
80: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
79: _ZN3tvm5relay16MixedModeMutato
78: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
77: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
76: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
75: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
74: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
73: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
72: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
71: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
70: tvm::transform::Pass::operator()(tvm::IRModule) const
69: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
68: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
67: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
66: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
65: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
64: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
63: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
62: _ZN3tvm5relay16MixedModeMutato
61: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
60: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
59: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
58: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
57: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
56: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
55: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
54: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
53: _ZN3tvm5relay16MixedModeMutato
52: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
51: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
50: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
49: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
48: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
46: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''