import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "uint8", shape = (8, 5))#candidate|0|(8, 5)|var|uint8
var_1 = relay.var("var_1", dtype = "uint8", shape = (8, 5))#candidate|1|(8, 5)|var|uint8
bop_2 = relay.add(var_0.astype('uint8'), relay.reshape(var_1.astype('uint8'), relay.shape_of(var_0))) # shape=(8, 5)
uop_5 = relay.log2(bop_2.astype('float32')) # shape=(8, 5)
bop_7 = relay.maximum(var_0.astype('float64'), relay.reshape(var_1.astype('float64'), relay.shape_of(var_0))) # shape=(8, 5)
bop_10 = relay.logical_xor(uop_5.astype('uint8'), relay.reshape(var_0.astype('uint8'), relay.shape_of(uop_5))) # shape=(8, 5)
var_13 = relay.var("var_13", dtype = "float64", shape = (8, 5))#candidate|13|(8, 5)|var|float64
bop_14 = relay.divide(bop_7.astype('float64'), relay.reshape(var_13.astype('float64'), relay.shape_of(bop_7))) # shape=(8, 5)
uop_17 = relay.cosh(bop_10.astype('float64')) # shape=(8, 5)
const_19 = relay.const([[8,-9,-4,-2,-9],[5,-2,-10,-7,5],[9,-6,4,2,-2],[10,-8,-7,-5,-5],[7,2,4,-4,-4],[-8,2,9,4,10],[8,8,-6,2,5],[10,5,1,3,2]], dtype = "uint8")#candidate|19|(8, 5)|const|uint8
bop_20 = relay.right_shift(bop_10.astype('int8'), relay.reshape(const_19.astype('int8'), relay.shape_of(bop_10))) # shape=(8, 5)
uop_23 = relay.erf(uop_17.astype('float32')) # shape=(8, 5)
uop_25 = relay.cos(uop_23.astype('float64')) # shape=(8, 5)
uop_27 = relay.asin(uop_25.astype('float32')) # shape=(8, 5)
uop_29 = relay.acos(uop_23.astype('float64')) # shape=(8, 5)
uop_31 = relay.cos(uop_27.astype('float32')) # shape=(8, 5)
var_33 = relay.var("var_33", dtype = "float64", shape = (8, 5))#candidate|33|(8, 5)|var|float64
bop_34 = relay.minimum(uop_29.astype('int16'), relay.reshape(var_33.astype('int16'), relay.shape_of(uop_29))) # shape=(8, 5)
bop_37 = relay.power(uop_27.astype('float32'), relay.reshape(bop_14.astype('float32'), relay.shape_of(uop_27))) # shape=(8, 5)
var_40 = relay.var("var_40", dtype = "float32", shape = (8, 5))#candidate|40|(8, 5)|var|float32
bop_41 = relay.power(uop_31.astype('float64'), relay.reshape(var_40.astype('float64'), relay.shape_of(uop_31))) # shape=(8, 5)
output = relay.Tuple([bop_20,bop_34,bop_37,bop_41,])
output2 = relay.Tuple([bop_20,bop_34,bop_37,bop_41,])
func_44 = relay.Function([var_0,var_1,var_13,var_33,var_40,], output)
mod['func_44'] = func_44
mod = relay.transform.InferType()(mod)
var_45 = relay.var("var_45", dtype = "uint8", shape = (8, 5))#candidate|45|(8, 5)|var|uint8
var_46 = relay.var("var_46", dtype = "uint8", shape = (8, 5))#candidate|46|(8, 5)|var|uint8
var_47 = relay.var("var_47", dtype = "float64", shape = (8, 5))#candidate|47|(8, 5)|var|float64
var_48 = relay.var("var_48", dtype = "float64", shape = (8, 5))#candidate|48|(8, 5)|var|float64
var_49 = relay.var("var_49", dtype = "float32", shape = (8, 5))#candidate|49|(8, 5)|var|float32
output = func_44(var_45,var_46,var_47,var_48,var_49,)
func_50 = relay.Function([var_45,var_46,var_47,var_48,var_49,], output)
mutated_mod['func_50'] = func_50
mutated_mod = relay.transform.InferType()(mutated_mod)
const_52 = relay.const([-4,2,-1,4,9,-3,9,-10,-3,9,-8,10,6], dtype = "int32")#candidate|52|(13,)|const|int32
var_53 = relay.var("var_53", dtype = "int32", shape = (13,))#candidate|53|(13,)|var|int32
bop_54 = relay.greater_equal(const_52.astype('bool'), relay.reshape(var_53.astype('bool'), relay.shape_of(const_52))) # shape=(13,)
uop_57 = relay.sin(var_53.astype('float32')) # shape=(13,)
bop_59 = relay.maximum(uop_57.astype('float64'), relay.reshape(const_52.astype('float64'), relay.shape_of(uop_57))) # shape=(13,)
bop_62 = relay.less_equal(bop_59.astype('bool'), relay.reshape(var_53.astype('bool'), relay.shape_of(bop_59))) # shape=(13,)
bop_65 = relay.bitwise_xor(var_53.astype('uint32'), relay.reshape(const_52.astype('uint32'), relay.shape_of(var_53))) # shape=(13,)
func_44_call = mod.get_global_var('func_44')
func_50_call = mutated_mod.get_global_var('func_50')
var_69 = relay.var("var_69", dtype = "uint8", shape = (2, 20))#candidate|69|(2, 20)|var|uint8
call_68 = relay.TupleGetItem(func_44_call(relay.reshape(var_69.astype('uint8'), [8, 5]), relay.reshape(var_69.astype('uint8'), [8, 5]), relay.reshape(var_69.astype('float64'), [8, 5]), relay.reshape(var_69.astype('float64'), [8, 5]), relay.reshape(var_69.astype('float32'), [8, 5]), ), 1)
call_70 = relay.TupleGetItem(func_50_call(relay.reshape(var_69.astype('uint8'), [8, 5]), relay.reshape(var_69.astype('uint8'), [8, 5]), relay.reshape(var_69.astype('float64'), [8, 5]), relay.reshape(var_69.astype('float64'), [8, 5]), relay.reshape(var_69.astype('float32'), [8, 5]), ), 1)
bop_71 = relay.mod(bop_62.astype('float32'), relay.reshape(const_52.astype('float32'), relay.shape_of(bop_62))) # shape=(13,)
var_74 = relay.var("var_74", dtype = "float64", shape = (13,))#candidate|74|(13,)|var|float64
bop_75 = relay.maximum(bop_59.astype('uint64'), relay.reshape(var_74.astype('uint64'), relay.shape_of(bop_59))) # shape=(13,)
bop_78 = relay.logical_and(bop_65.astype('bool'), relay.reshape(bop_59.astype('bool'), relay.shape_of(bop_65))) # shape=(13,)
output = relay.Tuple([bop_54,call_68,var_69,bop_71,bop_75,bop_78,])
output2 = relay.Tuple([bop_54,call_70,var_69,bop_71,bop_75,bop_78,])
func_81 = relay.Function([var_53,var_69,var_74,], output)
mod['func_81'] = func_81
mod = relay.transform.InferType()(mod)
var_82 = relay.var("var_82", dtype = "int32", shape = (13,))#candidate|82|(13,)|var|int32
var_83 = relay.var("var_83", dtype = "uint8", shape = (2, 20))#candidate|83|(2, 20)|var|uint8
var_84 = relay.var("var_84", dtype = "float64", shape = (13,))#candidate|84|(13,)|var|float64
output = func_81(var_82,var_83,var_84,)
func_85 = relay.Function([var_82,var_83,var_84,], output)
mutated_mod['func_85'] = func_85
mutated_mod = relay.transform.InferType()(mutated_mod)
var_87 = relay.var("var_87", dtype = "float64", shape = (7,))#candidate|87|(7,)|var|float64
uop_88 = relay.log(var_87.astype('float64')) # shape=(7,)
uop_90 = relay.rsqrt(var_87.astype('float32')) # shape=(7,)
uop_92 = relay.acos(uop_90.astype('float64')) # shape=(7,)
bop_94 = relay.greater_equal(uop_88.astype('bool'), relay.reshape(uop_90.astype('bool'), relay.shape_of(uop_88))) # shape=(7,)
bop_97 = relay.floor_divide(bop_94.astype('float32'), relay.reshape(uop_88.astype('float32'), relay.shape_of(bop_94))) # shape=(7,)
const_100 = relay.const([-2.992894,-7.365024,4.566190,-8.830691,-3.974874,-5.601848,-1.597699], dtype = "float64")#candidate|100|(7,)|const|float64
bop_101 = relay.right_shift(uop_88.astype('int64'), relay.reshape(const_100.astype('int64'), relay.shape_of(uop_88))) # shape=(7,)
uop_104 = relay.tan(uop_92.astype('float64')) # shape=(7,)
output = relay.Tuple([bop_97,bop_101,uop_104,])
output2 = relay.Tuple([bop_97,bop_101,uop_104,])
func_106 = relay.Function([var_87,], output)
mod['func_106'] = func_106
mod = relay.transform.InferType()(mod)
var_107 = relay.var("var_107", dtype = "float64", shape = (7,))#candidate|107|(7,)|var|float64
output = func_106(var_107)
func_108 = relay.Function([var_107], output)
mutated_mod['func_108'] = func_108
mutated_mod = relay.transform.InferType()(mutated_mod)
var_110 = relay.var("var_110", dtype = "uint32", shape = (11, 15, 9))#candidate|110|(11, 15, 9)|var|uint32
var_111 = relay.var("var_111", dtype = "uint32", shape = (11, 15, 9))#candidate|111|(11, 15, 9)|var|uint32
bop_112 = relay.bitwise_xor(var_110.astype('uint32'), relay.reshape(var_111.astype('uint32'), relay.shape_of(var_110))) # shape=(11, 15, 9)
uop_115 = relay.atanh(bop_112.astype('float64')) # shape=(11, 15, 9)
bop_117 = relay.mod(var_111.astype('float32'), relay.reshape(var_110.astype('float32'), relay.shape_of(var_111))) # shape=(11, 15, 9)
uop_120 = relay.asin(uop_115.astype('float64')) # shape=(11, 15, 9)
output = relay.Tuple([bop_117,uop_120,])
output2 = relay.Tuple([bop_117,uop_120,])
func_122 = relay.Function([var_110,var_111,], output)
mod['func_122'] = func_122
mod = relay.transform.InferType()(mod)
var_123 = relay.var("var_123", dtype = "uint32", shape = (11, 15, 9))#candidate|123|(11, 15, 9)|var|uint32
var_124 = relay.var("var_124", dtype = "uint32", shape = (11, 15, 9))#candidate|124|(11, 15, 9)|var|uint32
output = func_122(var_123,var_124,)
func_125 = relay.Function([var_123,var_124,], output)
mutated_mod['func_125'] = func_125
mutated_mod = relay.transform.InferType()(mutated_mod)
var_127 = relay.var("var_127", dtype = "float32", shape = (6, 4))#candidate|127|(6, 4)|var|float32
uop_128 = relay.atan(var_127.astype('float32')) # shape=(6, 4)
uop_130 = relay.acos(uop_128.astype('float32')) # shape=(6, 4)
const_132 = relay.const([[-4.376727,2.976678,4.977530,4.474100],[8.096664,8.567901,-0.644750,9.552645],[4.314814,-4.949619,-3.711043,6.892284],[3.349787,2.804585,8.914028,-5.258729],[-7.516619,2.337760,3.699371,-4.437582],[-0.188512,5.679934,-8.314235,-6.159590]], dtype = "float32")#candidate|132|(6, 4)|const|float32
bop_133 = relay.add(var_127.astype('float64'), relay.reshape(const_132.astype('float64'), relay.shape_of(var_127))) # shape=(6, 4)
bop_136 = relay.floor_mod(uop_128.astype('float32'), relay.reshape(const_132.astype('float32'), relay.shape_of(uop_128))) # shape=(6, 4)
var_139 = relay.var("var_139", dtype = "float32", shape = (6, 4))#candidate|139|(6, 4)|var|float32
bop_140 = relay.not_equal(uop_130.astype('bool'), relay.reshape(var_139.astype('bool'), relay.shape_of(uop_130))) # shape=(6, 4)
uop_143 = relay.cos(uop_128.astype('float32')) # shape=(6, 4)
uop_145 = relay.sinh(bop_136.astype('float64')) # shape=(6, 4)
bop_147 = relay.divide(bop_136.astype('float64'), relay.reshape(uop_145.astype('float64'), relay.shape_of(bop_136))) # shape=(6, 4)
var_150 = relay.var("var_150", dtype = "float32", shape = (6, 4))#candidate|150|(6, 4)|var|float32
bop_151 = relay.subtract(uop_143.astype('float32'), relay.reshape(var_150.astype('float32'), relay.shape_of(uop_143))) # shape=(6, 4)
output = relay.Tuple([bop_133,bop_140,bop_147,bop_151,])
output2 = relay.Tuple([bop_133,bop_140,bop_147,bop_151,])
func_154 = relay.Function([var_127,var_139,var_150,], output)
mod['func_154'] = func_154
mod = relay.transform.InferType()(mod)
mutated_mod['func_154'] = func_154
mutated_mod = relay.transform.InferType()(mutated_mod)
func_154_call = mutated_mod.get_global_var('func_154')
var_156 = relay.var("var_156", dtype = "float32", shape = (6, 4))#candidate|156|(6, 4)|var|float32
var_157 = relay.var("var_157", dtype = "float32", shape = (6, 4))#candidate|157|(6, 4)|var|float32
var_158 = relay.var("var_158", dtype = "float32", shape = (6, 4))#candidate|158|(6, 4)|var|float32
call_155 = func_154_call(var_156,var_157,var_158,)
output = call_155
func_159 = relay.Function([var_156,var_157,var_158,], output)
mutated_mod['func_159'] = func_159
mutated_mod = relay.transform.InferType()(mutated_mod)
var_161 = relay.var("var_161", dtype = "float64", shape = (9,))#candidate|161|(9,)|var|float64
const_162 = relay.const([1.052219,9.612661,1.335457,-8.330983,8.668792,-2.145847,0.922122,-6.393550,6.448998], dtype = "float64")#candidate|162|(9,)|const|float64
bop_163 = relay.floor_mod(var_161.astype('float64'), relay.reshape(const_162.astype('float64'), relay.shape_of(var_161))) # shape=(9,)
uop_166 = relay.acosh(bop_163.astype('float32')) # shape=(9,)
var_168 = relay.var("var_168", dtype = "float64", shape = (9,))#candidate|168|(9,)|var|float64
bop_169 = relay.greater_equal(var_161.astype('bool'), relay.reshape(var_168.astype('bool'), relay.shape_of(var_161))) # shape=(9,)
uop_172 = relay.asinh(var_161.astype('float32')) # shape=(9,)
bop_174 = relay.greater(uop_166.astype('bool'), relay.reshape(const_162.astype('bool'), relay.shape_of(uop_166))) # shape=(9,)
bop_177 = relay.bitwise_and(uop_166.astype('int32'), relay.reshape(var_168.astype('int32'), relay.shape_of(uop_166))) # shape=(9,)
uop_180 = relay.tan(uop_172.astype('float64')) # shape=(9,)
uop_182 = relay.cosh(bop_169.astype('float32')) # shape=(9,)
uop_184 = relay.acos(uop_182.astype('float64')) # shape=(9,)
func_122_call = mod.get_global_var('func_122')
func_125_call = mutated_mod.get_global_var('func_125')
const_187 = relay.const([7,-6,2,9,9,-1,3,-5,6,9,3,9,10,-4,10,-2,7,-1,-8,-1,10,-5,-5,-7,2,-9,4,9,-5,-10,-8,2,-10,4,-5,-5,8,-10,-4,6,-7,-1,6,-6,-2,-5,-9,-8,2,-7,9,-6,3,2,4,-3,4,1,3,10,-4,-6,2,1,5,2,1,-1,-3,4,-2,10,1,5,-1,-7,-7,-5,8,2,-4,-9,2,1,-4,5,-2,-9,8,-6,8,1,8,-4,-2,10,-3,-2,9,-2,-8,9,2,4,-4,7,4,7,4,10,10,-5,-9,9,10,-2,-6,10,-9,-10,-5,-4,4,2,-5,-7,4,-9,9,-2,-9,9,5,5,-4,-8,-1,9,-4,-5,-5,5,4,-2,-1,-4,-9,8,-2,10,8,-6,-10,4,8,-2,-4,2,-10,3,-1,4,1,5,-4,3,3,-1,-6,5,-6,9,-4,2,-7,9,-3,7,-4,-9,-7,10,-2,3,8,2,-6,6,3,-8,-2,-8,10,8,8,-2,-10,7,5,-9,-7,-9,-3,-7,-2,7,-1,-10,2,3,-7,-7,7,-8,1,5,8,4,-8,8,-5,-7,-1,5,9,3,5,3,-3,4,8,-3,5,6,8,7,-8,-10,-3,2,5,8,-5,-3,3,4,9,6,7,-1,-5,-10,3,1,9,8,9,5,6,-6,-5,10,10,-2,-9,3,9,8,5,8,5,9,1,-1,2,-7,8,5,-5,-2,-7,-8,-8,10,8,-9,-5,8,-4,4,6,5,1,9,-4,-10,-6,7,9,-1,-5,-1,-1,-6,-7,1,6,-7,-5,-4,-7,-9,-7,9,4,-2,-4,-1,1,2,-10,3,-10,-4,5,3,4,-7,8,4,7,5,8,-6,3,-7,2,2,8,-4,-4,7,9,-9,-9,1,1,-9,9,-8,-3,9,4,-5,7,-7,8,-1,7,6,-4,-6,-10,-4,8,5,-4,7,6,-2,5,6,-5,-2,6,2,4,5,-1,-5,10,2,-4,3,5,3,-7,5,5,-6,-7,10,-4,-5,5,-6,10,10,1,2,-1,7,-3,9,2,-8,2,2,5,3,-7,-7,-8,-1,-10,-2,9,8,4,1,-3,-6,-8,-2,-4,-5,3,10,-10,-8,-5,3,2,9,9,1,-8,6,3,-1,1,10,9,-3,2,-9,-4,4,-4,-1,2,4,6,5,7,8,1,4,-9,-9,10,1,-2,9,7,-10,1,8,5,-9,-1,-2,7,4,-3,-9,3,-7,3,3,-8,-9,-1,6,-2,10,-4,-8,10,-6,-5,8,-5,2,-4,9,2,-9,-7,-10,-2,4,5,-6,2,-10,7,4,6,9,3,-10,-6,-5,-7,-3,5,6,7,-7,-4,-5,-6,2,-5,1,-10,10,-1,-10,1,-9,9,8,-7,-7,3,-1,-1,10,5,3,-2,1,9,4,-3,8,-10,9,3,-10,8,-5,8,4,-7,-7,9,4,9,7,5,-5,-2,-4,-2,1,-10,8,2,-1,10,-9,8,-6,3,1,1,-3,-2,-9,-5,-4,-9,-3,6,-1,4,5,5,-8,-9,6,-7,-4,-10,-5,7,10,-4,6,-8,6,9,3,5,10,-2,-3,-9,-2,-1,-4,8,4,-8,4,9,8,-3,10,4,-1,10,7,-10,8,8,2,3,-10,8,7,-5,-7,-7,8,9,-2,-1,8,-10,5,-6,3,-4,-2,-8,2,-5,-4,6,-8,9,-5,8,2,-10,5,-3,-7,1,9,-10,3,-2,2,6,4,-7,-8,2,3,6,-8,-6,5,-4,-5,7,-2,6,8,3,9,-1,-6,-4,3,-9,-8,5,10,-10,-6,6,10,3,4,-10,-7,-8,1,6,-4,4,7,9,-9,-6,-8,2,-2,5,-2,-7,-3,-3,-10,10,-3,-8,-6,-10,6,1,-6,-1,9,-4,-1,9,7,10,-3,1,-9,-6,4,1,2,5,4,-6,-3,3,1,-10,5,6,-4,-4,4,7,6,1,7,-5,1,5,10,-8,1,-9,-1,4,2,8,8,7,3,-3,1,3,-7,-5,-8,10,-4,6,6,1,-10,5,6,3,7,10,-1,-9,3,9,-9,-3,-10,8,-10,3,10,7,9,5,-3,-1,8,-5,5,4,-3,-5,-7,10,-4,7,-2,-1,-2,4,-9,-2,-6,-2,10,-3,3,5,-2,7,-9,-1,-9,-9,-7,8,7,-7,-6,-4,-4,-9,-8,9,1,-6,-10,-1,-9,2,3,-6,-10,5,-1,-2,9,-4,-8,-7,-6,-9,-1,-7,-1,10,9,-6,8,-4,-2,6,10,8,-10,6,7,-4,6,-1,-10,-2,-7,-5,10,6,10,3,1,-9,-8,10,-2,6,-6,6,-9,5,5,-3,-1,-6,2,-2,-5,-7,-6,8,1,-6,10,5,10,-7,7,-1,10,1,1,8,-4,6,-10,-6,6,-10,-5,8,-2,-2,7,-1,-3,1,-6,9,-4,8,9,6,7,4,10,9,10,-1,7,4,-4,5,5,-10,8,4,-3,5,-8,-3,-2,8,-6,-9,-3,-4,-9,9,-2,5,-8,-7,1,2,-10,6,9,-6,-7,7,-7,8,-7,-3,5,-9,9,5,-8,9,-4,-4,3,6,-4,-9,-2,-8,-4,-8,-9,6,-4,9,-8,4,5,2,5,-7,1,-1,-5,-3,-9,9,-1,7,-6,9,-5,5,-8,-2,-7,3,5,4,-2,10,-2,-9,-6,6,5,5,8,-1,-10,-3,-2,-6,2,-8,9,-6,-8,1,3,3,5,-7,-1,3,-3,-8,-3,-5,-4,-9,-2,-3,-2,-2,6,-5,7,-5,-4,8,5,4,10,-2,4,-9,-8,7,-9,-7,6,5,5,2,8,-7,-5,2,-4,-2,-6,7,5,6,-4,-8,-4,-6,5,-8,-9,8,8,1,-4,2,-6,-6,2,-5,-4,1,-8,-6,-6,-9,-1,-6,7,-3,-10,3,-2,7,2,4,-8,5,-1,-10,5,-1,6,-7,7,-8,-3,-5,1,-10,-5,-10,-9,-9,-5,-9,-10,-9,10,-3,-4,-5,1,1,-1,6,7,-1,8,1,10,-6,-10,1,10,6,3,10,-1,-6,4,-10,-8,9,10,-1,-10,3,1,2,7,5,1,-4,6,5,-3,-3,6,7,4,6,-7,5,-4,9,-7,3,-10,10,-8,8,-2,2,-4,1,9,3,-10,-5,-5,8,-9,-2,8,6,9,-9,4,-6,-2,-8,8,-8,10,-5,-8,-9,-3,-7,-2,-9,5,-1,-9,1,6,4,-3,-2,-6,9,9,-10,-10,-3,9,5,-8,-5,5,-8,-5,7,-5,-2,6,-6,1,5,-4,-8,-10,5,1,-7,-5,-9,9,8,-5,-6,4,-3,-7,-10,9,-4,-1,9,8,-10,10,3,5,3,6,8,1,-6,-2,-1,-2,-1,3,-5,-3,6,-4,3,4,7,5,-9,9,-9,10,5,7,7,6,-3,-8,-4,-9,2,-3,5,-8,-6,-10,9,7,3,10,3,1,6,-4,4,7,9,6,-8,8,1,-9,7,-4,9,2,1,6,3,-8,-7,2,3,-2,4,4,-8,-6,8,-9,6,-7,-3,2,6,4,3,1,-5,6,3,-5,-3,-9,-2,8,-8,-5,-1,-10,9,2,1,9,-8,-7,4,-3,-4,-10,1,-6,-6,-1,-10,-3,2,-10,-1,-10,5,-10,-9,10,7,2,9,-6,-1,-3,5,-9,-3,1,9,3,-7,4,5,-1,-3,10,-3,8,-1,-4,-7,3,-1,4,-6,-5,-9,10,3,8,-8,-2,3,6,1,10,4,-9,-10,6,-1,10,2,-6,3,2,10,-6,-4,-7,-4,-4,-2,3,8,-7,-2,1,-7,8,-10,-5,4,5,4,2,3,-6,1,-7,1,-9,3,9,-8,-1,-7,1,8,9,10,-1,7,7,9,8,10], dtype = "uint32")#candidate|187|(1485,)|const|uint32
call_186 = relay.TupleGetItem(func_122_call(relay.reshape(const_187.astype('uint32'), [11, 15, 9]), relay.reshape(const_187.astype('uint32'), [11, 15, 9]), ), 1)
call_188 = relay.TupleGetItem(func_125_call(relay.reshape(const_187.astype('uint32'), [11, 15, 9]), relay.reshape(const_187.astype('uint32'), [11, 15, 9]), ), 1)
bop_189 = relay.minimum(uop_182.astype('int16'), relay.reshape(bop_169.astype('int16'), relay.shape_of(uop_182))) # shape=(9,)
uop_192 = relay.sqrt(uop_166.astype('float32')) # shape=(9,)
bop_194 = relay.right_shift(bop_177.astype('uint64'), relay.reshape(uop_182.astype('uint64'), relay.shape_of(bop_177))) # shape=(9,)
bop_197 = relay.greater_equal(uop_180.astype('bool'), relay.reshape(uop_172.astype('bool'), relay.shape_of(uop_180))) # shape=(9,)
uop_200 = relay.log10(uop_180.astype('float64')) # shape=(9,)
uop_202 = relay.atan(uop_200.astype('float32')) # shape=(9,)
uop_204 = relay.asin(uop_200.astype('float32')) # shape=(9,)
uop_206 = relay.atan(uop_202.astype('float64')) # shape=(9,)
uop_208 = relay.log10(uop_206.astype('float32')) # shape=(9,)
uop_210 = relay.atanh(uop_208.astype('float64')) # shape=(9,)
bop_212 = relay.greater(uop_206.astype('bool'), call_186.astype('bool')) # shape=(11, 15, 9)
bop_215 = relay.greater(uop_206.astype('bool'), call_188.astype('bool')) # shape=(11, 15, 9)
var_216 = relay.var("var_216", dtype = "bool", shape = (11, 15, 9))#candidate|216|(11, 15, 9)|var|bool
bop_217 = relay.bitwise_and(bop_212.astype('int8'), relay.reshape(var_216.astype('int8'), relay.shape_of(bop_212))) # shape=(11, 15, 9)
bop_220 = relay.bitwise_and(bop_215.astype('int8'), relay.reshape(var_216.astype('int8'), relay.shape_of(bop_215))) # shape=(11, 15, 9)
const_221 = relay.const([-6.693853,-7.990966,-1.915115,-1.691784,9.336271,-2.233922,0.496780,-7.189752,5.387226], dtype = "float64")#candidate|221|(9,)|const|float64
bop_222 = relay.bitwise_xor(uop_210.astype('int16'), relay.reshape(const_221.astype('int16'), relay.shape_of(uop_210))) # shape=(9,)
var_225 = relay.var("var_225", dtype = "float64", shape = (9,))#candidate|225|(9,)|var|float64
bop_226 = relay.bitwise_and(uop_210.astype('int8'), relay.reshape(var_225.astype('int8'), relay.shape_of(uop_210))) # shape=(9,)
uop_229 = relay.acos(bop_226.astype('float32')) # shape=(9,)
bop_231 = relay.equal(uop_229.astype('bool'), call_186.astype('bool')) # shape=(11, 15, 9)
bop_234 = relay.equal(uop_229.astype('bool'), call_188.astype('bool')) # shape=(11, 15, 9)
uop_235 = relay.atan(bop_222.astype('float32')) # shape=(9,)
var_237 = relay.var("var_237", dtype = "float64", shape = (9,))#candidate|237|(9,)|var|float64
bop_238 = relay.bitwise_xor(uop_210.astype('int16'), relay.reshape(var_237.astype('int16'), relay.shape_of(uop_210))) # shape=(9,)
uop_241 = relay.log(bop_231.astype('float64')) # shape=(11, 15, 9)
uop_243 = relay.log(bop_234.astype('float64')) # shape=(11, 15, 9)
uop_244 = relay.atan(bop_231.astype('float32')) # shape=(11, 15, 9)
uop_246 = relay.atan(bop_234.astype('float32')) # shape=(11, 15, 9)
func_154_call = mod.get_global_var('func_154')
func_159_call = mutated_mod.get_global_var('func_159')
const_248 = relay.const([[4.297034,-7.028296,3.097190,-6.066536,-8.546904,1.128082,9.336059,0.884990,5.786383,7.561768,2.330101,1.689975,6.674136,-9.498082,-9.638089,4.160277,-4.757687,4.667956,-8.737833,6.435583,-8.255370,6.227060,-4.167578,-2.931140]], dtype = "float32")#candidate|248|(1, 24)|const|float32
call_247 = relay.TupleGetItem(func_154_call(relay.reshape(const_248.astype('float32'), [6, 4]), relay.reshape(const_248.astype('float32'), [6, 4]), relay.reshape(const_248.astype('float32'), [6, 4]), ), 3)
call_249 = relay.TupleGetItem(func_159_call(relay.reshape(const_248.astype('float32'), [6, 4]), relay.reshape(const_248.astype('float32'), [6, 4]), relay.reshape(const_248.astype('float32'), [6, 4]), ), 3)
var_250 = relay.var("var_250", dtype = "float64", shape = (11, 15, 9))#candidate|250|(11, 15, 9)|var|float64
bop_251 = relay.power(uop_241.astype('float32'), relay.reshape(var_250.astype('float32'), relay.shape_of(uop_241))) # shape=(11, 15, 9)
bop_254 = relay.power(uop_243.astype('float32'), relay.reshape(var_250.astype('float32'), relay.shape_of(uop_243))) # shape=(11, 15, 9)
uop_255 = relay.atanh(bop_231.astype('float32')) # shape=(11, 15, 9)
uop_257 = relay.atanh(bop_234.astype('float32')) # shape=(11, 15, 9)
uop_258 = relay.cosh(uop_229.astype('float32')) # shape=(9,)
uop_260 = relay.log(uop_255.astype('float64')) # shape=(11, 15, 9)
uop_262 = relay.log(uop_257.astype('float64')) # shape=(11, 15, 9)
var_263 = relay.var("var_263", dtype = "float32", shape = (9,))#candidate|263|(9,)|var|float32
bop_264 = relay.bitwise_xor(uop_258.astype('uint8'), relay.reshape(var_263.astype('uint8'), relay.shape_of(uop_258))) # shape=(9,)
var_267 = relay.var("var_267", dtype = "uint8", shape = (9,))#candidate|267|(9,)|var|uint8
bop_268 = relay.right_shift(bop_264.astype('int16'), relay.reshape(var_267.astype('int16'), relay.shape_of(bop_264))) # shape=(9,)
func_154_call = mod.get_global_var('func_154')
func_159_call = mutated_mod.get_global_var('func_159')
call_271 = relay.TupleGetItem(func_154_call(relay.reshape(const_248.astype('float32'), [6, 4]), relay.reshape(const_248.astype('float32'), [6, 4]), relay.reshape(call_247.astype('float32'), [6, 4]), ), 0)
call_272 = relay.TupleGetItem(func_159_call(relay.reshape(const_248.astype('float32'), [6, 4]), relay.reshape(const_248.astype('float32'), [6, 4]), relay.reshape(call_247.astype('float32'), [6, 4]), ), 0)
output = relay.Tuple([bop_174,uop_184,const_187,bop_189,uop_192,bop_194,bop_197,uop_204,bop_217,uop_235,bop_238,uop_244,call_247,const_248,bop_251,uop_260,bop_268,call_271,])
output2 = relay.Tuple([bop_174,uop_184,const_187,bop_189,uop_192,bop_194,bop_197,uop_204,bop_220,uop_235,bop_238,uop_246,call_249,const_248,bop_254,uop_262,bop_268,call_272,])
func_273 = relay.Function([var_161,var_168,var_216,var_225,var_237,var_250,var_263,var_267,], output)
mod['func_273'] = func_273
mod = relay.transform.InferType()(mod)
var_274 = relay.var("var_274", dtype = "float64", shape = (9,))#candidate|274|(9,)|var|float64
var_275 = relay.var("var_275", dtype = "float64", shape = (9,))#candidate|275|(9,)|var|float64
var_276 = relay.var("var_276", dtype = "bool", shape = (11, 15, 9))#candidate|276|(11, 15, 9)|var|bool
var_277 = relay.var("var_277", dtype = "float64", shape = (9,))#candidate|277|(9,)|var|float64
var_278 = relay.var("var_278", dtype = "float64", shape = (9,))#candidate|278|(9,)|var|float64
var_279 = relay.var("var_279", dtype = "float64", shape = (11, 15, 9))#candidate|279|(11, 15, 9)|var|float64
var_280 = relay.var("var_280", dtype = "float32", shape = (9,))#candidate|280|(9,)|var|float32
var_281 = relay.var("var_281", dtype = "uint8", shape = (9,))#candidate|281|(9,)|var|uint8
output = func_273(var_274,var_275,var_276,var_277,var_278,var_279,var_280,var_281,)
func_282 = relay.Function([var_274,var_275,var_276,var_277,var_278,var_279,var_280,var_281,], output)
mutated_mod['func_282'] = func_282
mutated_mod = relay.transform.InferType()(mutated_mod)
const_284 = relay.const(-6.593051, dtype = "float32")#candidate|284|()|const|float32
uop_285 = relay.sqrt(const_284.astype('float32')) # shape=()
bop_287 = relay.power(const_284.astype('float64'), uop_285.astype('float64')) # shape=()
bop_290 = relay.mod(uop_285.astype('float32'), const_284.astype('float32')) # shape=()
const_293 = relay.const([[[2.037573,7.915198,4.830946,-9.108766],[8.539521,-4.772263,0.261540,4.512950],[4.625834,-6.799677,5.268130,-6.127558],[-3.938973,5.469432,6.342482,-9.255636],[-0.602999,-9.829681,5.978712,3.776688],[4.895355,6.095630,8.480900,8.629087],[5.219179,7.769142,-9.491605,2.872020],[0.096306,5.521250,3.338108,4.167381]],[[1.488766,4.718914,-7.582316,0.671177],[-1.940461,-5.520925,-5.221612,-6.235950],[-4.632038,-5.363497,6.577443,0.529747],[-1.617505,-7.318067,0.030188,9.263591],[1.353915,8.877388,-8.528545,4.798907],[5.569776,-7.920828,5.784324,9.466567],[-3.179957,-6.149124,8.860213,-7.337718],[-2.642842,-2.803969,-9.655972,-6.010522]],[[-4.420721,-1.923172,8.825740,-8.914643],[9.755316,-6.750858,2.303792,-4.753763],[9.339936,-5.618810,1.751216,0.828731],[1.184587,2.171233,6.542274,3.207721],[9.411874,-0.236406,-2.554824,9.763721],[8.659095,-7.627520,-2.204065,2.459828],[-4.553500,-5.165541,-1.092093,6.327592],[9.568195,-3.884727,7.194392,7.896369]]], dtype = "float32")#candidate|293|(3, 8, 4)|const|float32
bop_294 = relay.greater_equal(const_284.astype('bool'), const_293.astype('bool')) # shape=(3, 8, 4)
bop_297 = relay.maximum(uop_285.astype('uint64'), const_293.astype('uint64')) # shape=(3, 8, 4)
uop_300 = relay.log(bop_287.astype('float64')) # shape=()
var_302 = relay.var("var_302", dtype = "float64", shape = (1, 3, 15))#candidate|302|(1, 3, 15)|var|float64
bop_303 = relay.not_equal(uop_300.astype('bool'), var_302.astype('bool')) # shape=(1, 3, 15)
uop_306 = relay.acosh(bop_297.astype('float64')) # shape=(3, 8, 4)
uop_308 = relay.cosh(uop_306.astype('float64')) # shape=(3, 8, 4)
uop_310 = relay.erf(const_284.astype('float64')) # shape=()
var_312 = relay.var("var_312", dtype = "float64", shape = (3, 8, 4))#candidate|312|(3, 8, 4)|var|float64
bop_313 = relay.greater_equal(uop_308.astype('bool'), relay.reshape(var_312.astype('bool'), relay.shape_of(uop_308))) # shape=(3, 8, 4)
uop_316 = relay.sin(bop_313.astype('float32')) # shape=(3, 8, 4)
uop_318 = relay.atan(bop_313.astype('float32')) # shape=(3, 8, 4)
uop_320 = relay.log2(uop_316.astype('float64')) # shape=(3, 8, 4)
bop_322 = relay.left_shift(uop_320.astype('int64'), bop_287.astype('int64')) # shape=(3, 8, 4)
uop_325 = relay.sigmoid(uop_320.astype('float32')) # shape=(3, 8, 4)
bop_327 = relay.less_equal(bop_322.astype('bool'), relay.reshape(uop_320.astype('bool'), relay.shape_of(bop_322))) # shape=(3, 8, 4)
uop_330 = relay.asin(uop_325.astype('float32')) # shape=(3, 8, 4)
bop_332 = relay.less_equal(uop_325.astype('bool'), relay.reshape(uop_316.astype('bool'), relay.shape_of(uop_325))) # shape=(3, 8, 4)
var_335 = relay.var("var_335", dtype = "float32", shape = (3, 8, 4))#candidate|335|(3, 8, 4)|var|float32
bop_336 = relay.right_shift(uop_325.astype('uint16'), relay.reshape(var_335.astype('uint16'), relay.shape_of(uop_325))) # shape=(3, 8, 4)
bop_339 = relay.not_equal(uop_330.astype('bool'), relay.reshape(bop_332.astype('bool'), relay.shape_of(uop_330))) # shape=(3, 8, 4)
const_342 = relay.const([[[True,True,False,False],[False,False,True,False],[True,True,True,False],[True,True,False,True],[True,False,True,True],[True,False,False,False],[False,False,False,True],[True,True,False,True]],[[False,False,True,False],[True,False,False,False],[True,True,False,True],[True,False,False,False],[True,True,False,False],[True,False,False,False],[True,False,True,False],[True,True,True,False]],[[False,False,False,True],[True,True,True,False],[False,True,True,True],[False,True,False,True],[False,False,True,False],[False,True,False,True],[False,True,False,True],[True,True,True,True]]], dtype = "bool")#candidate|342|(3, 8, 4)|const|bool
bop_343 = relay.not_equal(bop_339.astype('bool'), relay.reshape(const_342.astype('bool'), relay.shape_of(bop_339))) # shape=(3, 8, 4)
output = relay.Tuple([bop_290,bop_294,bop_303,uop_310,uop_318,bop_327,bop_336,bop_343,])
output2 = relay.Tuple([bop_290,bop_294,bop_303,uop_310,uop_318,bop_327,bop_336,bop_343,])
F = relay.Function([var_302,var_312,var_335,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_302,var_312,var_335,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_302= np.array([[[4.734011,-9.033587,-0.215273,-6.509603,-6.697459,-3.369101,9.359941,-0.739163,-8.258105,0.754712,8.641410,-7.962898,-5.935287,-3.806214,-7.026898],[5.589253,-6.207997,-7.494376,5.385173,-5.828903,-4.932339,8.614922,6.434987,-5.656205,-2.971018,-6.169724,0.678142,-6.381227,3.043543,5.456329],[-4.100355,2.347916,-0.825342,1.553877,-1.501260,-4.783060,-7.472436,7.915072,2.125777,6.238008,2.196768,6.287177,-7.694731,7.979001,-7.249253]]], dtype='float64')
module1.set_input('var_302', input_302)
input_312= np.array([[[2.852675,7.602927,6.854323,8.573239],[6.080177,-7.016876,-3.468737,2.462168],[1.384379,4.170032,6.437674,-0.542392],[2.023634,-6.672615,7.111369,-0.294390],[4.403963,7.973213,5.147175,5.206514],[1.589435,-8.630466,-3.824384,1.752433],[-0.305273,6.967024,8.106562,2.169672],[-9.127584,4.485020,-2.562832,6.042467]],[[-2.191306,4.889577,8.534760,-2.799863],[-7.852999,-6.485641,5.392805,-7.825614],[-9.059830,9.413921,-5.136378,-4.823875],[-3.948364,-3.202348,9.666846,-1.761625],[-8.262140,-6.970195,-3.780755,-8.919075],[9.616781,5.716161,-3.425170,6.711765],[6.474159,0.447723,6.065195,2.542321],[6.716077,-4.018776,0.601486,-3.044067]],[[-7.995342,1.482911,-3.017668,-1.026082],[-5.709031,-0.768777,9.290127,2.437015],[-6.022015,-1.623474,-9.947987,4.549849],[3.348802,0.423861,-7.231561,7.220018],[-6.002414,3.969600,-0.155029,-8.181777],[4.337922,-2.266101,-2.346309,-3.352809],[-1.435876,-4.008965,-1.810409,-1.713644],[-5.774821,-7.557491,-6.735237,2.087817]]], dtype='float64')
module1.set_input('var_312', input_312)
input_335= np.array([[[-7.577134,7.952143,-2.657045,5.095622],[-1.526715,3.599182,0.947687,0.159957],[-8.290420,-3.054157,7.616514,0.752917],[-1.632620,-3.271091,4.513445,5.838044],[-1.022924,-4.061267,6.244272,-1.800662],[9.112198,-2.625017,4.974872,-8.178298],[-8.376669,-2.170188,-4.126651,7.074744],[6.850839,3.145770,8.682761,-3.600387]],[[2.009801,4.735178,-3.790382,-8.621122],[2.958900,-2.749568,-9.617254,-3.228852],[-0.820244,-1.683742,-2.837168,8.779437],[1.562923,-9.126942,-4.535481,-8.669503],[-4.217628,-6.118646,1.560898,-2.567072],[6.494185,-8.512008,-5.676371,-4.880002],[9.333888,2.435002,-9.738394,-0.535318],[6.304641,4.924072,9.936865,1.948539]],[[6.934319,4.140888,-1.931809,4.204401],[-5.718684,0.367526,-5.154866,3.259826],[-8.836714,-2.696720,-3.140396,-5.033559],[7.536311,8.000739,9.613717,-5.636897],[-1.517995,5.311698,-0.608020,-5.710779],[-4.146789,9.383298,-5.533730,5.741582],[6.324400,5.190482,-3.421194,7.851075],[7.105711,-9.028993,7.645983,6.822450]]], dtype='float32')
module1.set_input('var_335', input_335)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_302, input_312, input_335, )
res3 = intrp3.evaluate()(input_302, input_312, input_335, )
res4 = intrp4.evaluate()(input_302, input_312, input_335, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
module5.set_input('var_302', input_302)
module5.set_input('var_312', input_312)
module5.set_input('var_335', input_335)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_302, input_312, input_335, )
res7 = intrp7.evaluate()(input_302, input_312, input_335, )
res8 = intrp8.evaluate()(input_302, input_312, input_335, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
module9.set_input('var_302', input_302)
module9.set_input('var_312', input_312)
module9.set_input('var_335', input_335)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_302, input_312, input_335, )
res11 = intrp11.evaluate()(input_302, input_312, input_335, )
res12 = intrp12.evaluate()(input_302, input_312, input_335, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
module13.set_input('var_302', input_302)
module13.set_input('var_312', input_312)
module13.set_input('var_335', input_335)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_302, input_312, input_335, )
res15 = intrp15.evaluate()(input_302, input_312, input_335, )
res16 = intrp16.evaluate()(input_302, input_312, input_335, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
module17.set_input('var_302', input_302)
module17.set_input('var_312', input_312)
module17.set_input('var_335', input_335)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_302, input_312, input_335, )
res19 = intrp19.evaluate()(input_302, input_312, input_335, )
res20 = intrp20.evaluate()(input_302, input_312, input_335, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
module21.set_input('var_302', input_302)
module21.set_input('var_312', input_312)
module21.set_input('var_335', input_335)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_302, input_312, input_335, )
res23 = intrp23.evaluate()(input_302, input_312, input_335, )
res24 = intrp24.evaluate()(input_302, input_312, input_335, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()

'''77: TVMFuncCall
76: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
75: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
74: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
73: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
72: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
71: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
70: tvm::transform::Pass::operator()(tvm::IRModule) const
69: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
68: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
67: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
66: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
65: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
64: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
63: tvm::transform::Pass::operator()(tvm::IRModule) const
62: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
61: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
60: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
57: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
56: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
55: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
54: _ZN3tvm5relay9transform22Devic
53: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
52: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
51: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
50: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
49: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
48: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
47: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
46: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
45: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
44: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
43: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
42: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
41: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
40: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::te::Tensor, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
39: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::runtime::ObjectRef, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
38: tvm::LowerWithPassList(tvm::IRModule, tvm::runtime::Array<tvm::transform::Pass, void>)
37: tvm::transform::Pass::operator()(tvm::IRModule) const
36: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
35: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: _ZNSt17_Function_handlerIFvN3tvm7
31: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
30: tvm::tir::DataTypeRewriter::operator()(tvm::tir::Stmt)
29: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
28: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::ForNode const*)
27: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::ForNode const*)
26: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
25: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
24: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::ForNode const*)
23: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::ForNode const*)
22: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
21: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
20: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::StoreNode const*)
19: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
18: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS
17: _ZThn16_N3tvm3tir16DataTyp
16: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CastNode const*)
15: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CastNode const*)
14: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
13: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS
12: _ZThn16_N3tvm3tir16DataTyp
11: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::LENode const*)
10: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
9: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS
8: _ZThn16_N3tvm3tir16DataTyp
7: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CastNode const*)
6: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CastNode const*)
5: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
4: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
3: _ZThn16_N3tvm3tir16DataTyp
2: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
1: tvm::operator<<(tvm::PrimExpr, tvm::PrimExpr)
0: tvm::left_shift(tvm::PrimExpr, tvm::PrimExpr, tvm::Span)

'''