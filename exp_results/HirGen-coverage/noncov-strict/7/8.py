import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (7, 8))#candidate|0|(7, 8)|var|float32
var_1 = relay.var("var_1", dtype = "float32", shape = (7, 8))#candidate|1|(7, 8)|var|float32
bop_2 = relay.power(var_0.astype('float32'), relay.reshape(var_1.astype('float32'), relay.shape_of(var_0))) # shape=(7, 8)
uop_5 = relay.asin(var_0.astype('float32')) # shape=(7, 8)
uop_7 = relay.atan(uop_5.astype('float32')) # shape=(7, 8)
var_9 = relay.var("var_9", dtype = "float32", shape = (7, 8))#candidate|9|(7, 8)|var|float32
bop_10 = relay.equal(uop_7.astype('bool'), relay.reshape(var_9.astype('bool'), relay.shape_of(uop_7))) # shape=(7, 8)
uop_13 = relay.sin(uop_5.astype('float64')) # shape=(7, 8)
bop_15 = relay.bitwise_and(uop_5.astype('int16'), relay.reshape(var_0.astype('int16'), relay.shape_of(uop_5))) # shape=(7, 8)
uop_18 = relay.cos(uop_7.astype('float64')) # shape=(7, 8)
uop_20 = relay.atan(uop_18.astype('float32')) # shape=(7, 8)
bop_22 = relay.bitwise_or(uop_20.astype('uint8'), relay.reshape(bop_2.astype('uint8'), relay.shape_of(uop_20))) # shape=(7, 8)
uop_25 = relay.sinh(uop_20.astype('float32')) # shape=(7, 8)
bop_27 = relay.bitwise_and(uop_18.astype('uint8'), relay.reshape(var_9.astype('uint8'), relay.shape_of(uop_18))) # shape=(7, 8)
bop_30 = relay.logical_and(uop_25.astype('bool'), relay.reshape(uop_20.astype('bool'), relay.shape_of(uop_25))) # shape=(7, 8)
var_33 = relay.var("var_33", dtype = "bool", shape = (7, 8))#candidate|33|(7, 8)|var|bool
bop_34 = relay.less(bop_30.astype('bool'), relay.reshape(var_33.astype('bool'), relay.shape_of(bop_30))) # shape=(7, 8)
uop_37 = relay.acos(uop_18.astype('float64')) # shape=(7, 8)
bop_39 = relay.left_shift(bop_10.astype('int64'), relay.reshape(bop_27.astype('int64'), relay.shape_of(bop_10))) # shape=(7, 8)
output = relay.Tuple([uop_13,bop_15,bop_22,bop_34,uop_37,bop_39,])
output2 = relay.Tuple([uop_13,bop_15,bop_22,bop_34,uop_37,bop_39,])
func_42 = relay.Function([var_0,var_1,var_9,var_33,], output)
mod['func_42'] = func_42
mod = relay.transform.InferType()(mod)
mutated_mod['func_42'] = func_42
mutated_mod = relay.transform.InferType()(mutated_mod)
func_42_call = mutated_mod.get_global_var('func_42')
var_44 = relay.var("var_44", dtype = "float32", shape = (7, 8))#candidate|44|(7, 8)|var|float32
var_45 = relay.var("var_45", dtype = "float32", shape = (7, 8))#candidate|45|(7, 8)|var|float32
var_46 = relay.var("var_46", dtype = "float32", shape = (7, 8))#candidate|46|(7, 8)|var|float32
var_47 = relay.var("var_47", dtype = "bool", shape = (7, 8))#candidate|47|(7, 8)|var|bool
call_43 = func_42_call(var_44,var_45,var_46,var_47,)
output = call_43
func_48 = relay.Function([var_44,var_45,var_46,var_47,], output)
mutated_mod['func_48'] = func_48
mutated_mod = relay.transform.InferType()(mutated_mod)
const_50 = relay.const([[[1.174621,1.105992,3.837291,3.004609,6.677855,-4.235216,6.986981,-2.611707],[-0.670723,-9.721942,-2.882976,6.499018,0.011111,-4.939543,-6.745735,4.911182]],[[-1.570310,5.747188,-9.432389,7.548128,0.742540,0.105957,1.134015,2.671834],[-6.612542,-0.916063,-3.936206,1.878235,0.668641,-5.293643,6.891881,9.529803]],[[-4.890053,-3.752372,-4.654620,-6.785206,8.593550,-6.072462,1.796413,-3.503597],[2.694115,3.261858,6.434637,4.954573,-1.238168,-4.476300,2.752213,2.597342]],[[-9.715631,9.602447,6.085253,0.736130,3.917691,-0.349154,1.520437,2.736577],[8.611924,0.825522,7.939856,2.555206,-9.101648,0.498150,1.461023,4.588082]],[[-4.142284,-3.572634,-2.151713,-1.024572,2.446854,5.465325,-9.737094,-8.189053],[2.876628,-6.386727,-6.134250,-9.231949,3.038870,9.266294,-8.396754,4.752415]],[[8.056470,-9.988511,2.683101,2.087699,5.839722,0.241527,1.663363,6.395379],[0.900038,1.099586,9.662419,-2.675769,-5.405925,-5.025987,-3.665180,7.737926]],[[4.307263,-1.433166,0.187454,-8.606613,-0.411360,-9.991371,9.006002,-7.100199],[7.233292,-7.955326,3.779054,5.119043,-9.603863,-6.077204,9.572266,-2.475848]],[[0.513907,2.311490,9.987944,-6.966094,-2.316797,8.922518,-8.295010,-3.752412],[-0.407494,5.644944,-1.149311,4.420721,-9.311826,1.221246,2.846076,-0.201497]],[[-0.144391,2.704357,8.332262,2.369085,-9.558108,5.135035,-4.275761,-1.996281],[0.234769,-6.173994,6.044045,-3.324900,9.211678,8.904255,-1.386336,-2.577255]]], dtype = "float64")#candidate|50|(9, 2, 8)|const|float64
uop_51 = relay.acos(const_50.astype('float64')) # shape=(9, 2, 8)
bop_53 = relay.subtract(uop_51.astype('int16'), relay.reshape(const_50.astype('int16'), relay.shape_of(uop_51))) # shape=(9, 2, 8)
bop_56 = relay.logical_xor(const_50.astype('int64'), relay.reshape(bop_53.astype('int64'), relay.shape_of(const_50))) # shape=(9, 2, 8)
var_59 = relay.var("var_59", dtype = "float64", shape = (9, 2, 8))#candidate|59|(9, 2, 8)|var|float64
bop_60 = relay.minimum(const_50.astype('float32'), relay.reshape(var_59.astype('float32'), relay.shape_of(const_50))) # shape=(9, 2, 8)
bop_63 = relay.divide(bop_56.astype('float32'), relay.reshape(bop_53.astype('float32'), relay.shape_of(bop_56))) # shape=(9, 2, 8)
bop_66 = relay.maximum(bop_60.astype('uint32'), relay.reshape(var_59.astype('uint32'), relay.shape_of(bop_60))) # shape=(9, 2, 8)
var_69 = relay.var("var_69", dtype = "float32", shape = (9, 2, 8))#candidate|69|(9, 2, 8)|var|float32
bop_70 = relay.mod(bop_60.astype('float64'), relay.reshape(var_69.astype('float64'), relay.shape_of(bop_60))) # shape=(9, 2, 8)
var_73 = relay.var("var_73", dtype = "float32", shape = (9, 2, 8))#candidate|73|(9, 2, 8)|var|float32
bop_74 = relay.add(bop_63.astype('uint64'), relay.reshape(var_73.astype('uint64'), relay.shape_of(bop_63))) # shape=(9, 2, 8)
func_42_call = mod.get_global_var('func_42')
func_48_call = mutated_mod.get_global_var('func_48')
var_78 = relay.var("var_78", dtype = "float32", shape = (56,))#candidate|78|(56,)|var|float32
call_77 = relay.TupleGetItem(func_42_call(relay.reshape(var_78.astype('float32'), [7, 8]), relay.reshape(var_78.astype('float32'), [7, 8]), relay.reshape(var_78.astype('float32'), [7, 8]), relay.reshape(var_78.astype('bool'), [7, 8]), ), 5)
call_79 = relay.TupleGetItem(func_48_call(relay.reshape(var_78.astype('float32'), [7, 8]), relay.reshape(var_78.astype('float32'), [7, 8]), relay.reshape(var_78.astype('float32'), [7, 8]), relay.reshape(var_78.astype('bool'), [7, 8]), ), 5)
output = relay.Tuple([bop_66,bop_70,bop_74,call_77,var_78,])
output2 = relay.Tuple([bop_66,bop_70,bop_74,call_79,var_78,])
func_80 = relay.Function([var_59,var_69,var_73,var_78,], output)
mod['func_80'] = func_80
mod = relay.transform.InferType()(mod)
var_81 = relay.var("var_81", dtype = "float64", shape = (9, 2, 8))#candidate|81|(9, 2, 8)|var|float64
var_82 = relay.var("var_82", dtype = "float32", shape = (9, 2, 8))#candidate|82|(9, 2, 8)|var|float32
var_83 = relay.var("var_83", dtype = "float32", shape = (9, 2, 8))#candidate|83|(9, 2, 8)|var|float32
var_84 = relay.var("var_84", dtype = "float32", shape = (56,))#candidate|84|(56,)|var|float32
output = func_80(var_81,var_82,var_83,var_84,)
func_85 = relay.Function([var_81,var_82,var_83,var_84,], output)
mutated_mod['func_85'] = func_85
mutated_mod = relay.transform.InferType()(mutated_mod)
var_87 = relay.var("var_87", dtype = "float64", shape = (5, 13))#candidate|87|(5, 13)|var|float64
uop_88 = relay.acosh(var_87.astype('float64')) # shape=(5, 13)
uop_90 = relay.atanh(uop_88.astype('float64')) # shape=(5, 13)
uop_92 = relay.asin(uop_88.astype('float32')) # shape=(5, 13)
uop_94 = relay.sinh(uop_92.astype('float32')) # shape=(5, 13)
uop_96 = relay.rsqrt(uop_94.astype('float64')) # shape=(5, 13)
uop_98 = relay.sqrt(uop_96.astype('float64')) # shape=(5, 13)
var_100 = relay.var("var_100", dtype = "float64", shape = (5, 13))#candidate|100|(5, 13)|var|float64
bop_101 = relay.floor_mod(uop_98.astype('float32'), relay.reshape(var_100.astype('float32'), relay.shape_of(uop_98))) # shape=(5, 13)
output = relay.Tuple([uop_90,bop_101,])
output2 = relay.Tuple([uop_90,bop_101,])
func_104 = relay.Function([var_87,var_100,], output)
mod['func_104'] = func_104
mod = relay.transform.InferType()(mod)
var_105 = relay.var("var_105", dtype = "float64", shape = (5, 13))#candidate|105|(5, 13)|var|float64
var_106 = relay.var("var_106", dtype = "float64", shape = (5, 13))#candidate|106|(5, 13)|var|float64
output = func_104(var_105,var_106,)
func_107 = relay.Function([var_105,var_106,], output)
mutated_mod['func_107'] = func_107
mutated_mod = relay.transform.InferType()(mutated_mod)
var_109 = relay.var("var_109", dtype = "int32", shape = (8,))#candidate|109|(8,)|var|int32
var_110 = relay.var("var_110", dtype = "int32", shape = (8,))#candidate|110|(8,)|var|int32
bop_111 = relay.equal(var_109.astype('bool'), relay.reshape(var_110.astype('bool'), relay.shape_of(var_109))) # shape=(8,)
bop_114 = relay.bitwise_xor(bop_111.astype('int8'), relay.reshape(var_109.astype('int8'), relay.shape_of(bop_111))) # shape=(8,)
var_117 = relay.var("var_117", dtype = "int32", shape = (8,))#candidate|117|(8,)|var|int32
bop_118 = relay.maximum(var_109.astype('uint64'), relay.reshape(var_117.astype('uint64'), relay.shape_of(var_109))) # shape=(8,)
uop_121 = relay.asin(bop_118.astype('float32')) # shape=(8,)
func_42_call = mod.get_global_var('func_42')
func_48_call = mutated_mod.get_global_var('func_48')
var_124 = relay.var("var_124", dtype = "float32", shape = (1, 56))#candidate|124|(1, 56)|var|float32
call_123 = relay.TupleGetItem(func_42_call(relay.reshape(var_124.astype('float32'), [7, 8]), relay.reshape(var_124.astype('float32'), [7, 8]), relay.reshape(var_124.astype('float32'), [7, 8]), relay.reshape(var_124.astype('bool'), [7, 8]), ), 5)
call_125 = relay.TupleGetItem(func_48_call(relay.reshape(var_124.astype('float32'), [7, 8]), relay.reshape(var_124.astype('float32'), [7, 8]), relay.reshape(var_124.astype('float32'), [7, 8]), relay.reshape(var_124.astype('bool'), [7, 8]), ), 5)
bop_126 = relay.maximum(uop_121.astype('uint8'), relay.reshape(bop_118.astype('uint8'), relay.shape_of(uop_121))) # shape=(8,)
bop_129 = relay.mod(bop_126.astype('float32'), relay.reshape(var_110.astype('float32'), relay.shape_of(bop_126))) # shape=(8,)
bop_132 = relay.subtract(call_123.astype('int32'), uop_121.astype('int32')) # shape=(7, 8)
bop_135 = relay.subtract(call_125.astype('int32'), uop_121.astype('int32')) # shape=(7, 8)
var_136 = relay.var("var_136", dtype = "float32", shape = (8,))#candidate|136|(8,)|var|float32
bop_137 = relay.add(uop_121.astype('float32'), relay.reshape(var_136.astype('float32'), relay.shape_of(uop_121))) # shape=(8,)
uop_140 = relay.log2(bop_132.astype('float64')) # shape=(7, 8)
uop_142 = relay.log2(bop_135.astype('float64')) # shape=(7, 8)
uop_143 = relay.atanh(uop_121.astype('float64')) # shape=(8,)
bop_145 = relay.greater(uop_143.astype('bool'), relay.reshape(var_110.astype('bool'), relay.shape_of(uop_143))) # shape=(8,)
var_148 = relay.var("var_148", dtype = "int32", shape = (8,))#candidate|148|(8,)|var|int32
bop_149 = relay.left_shift(var_110.astype('int32'), relay.reshape(var_148.astype('int32'), relay.shape_of(var_110))) # shape=(8,)
bop_152 = relay.logical_and(uop_140.astype('bool'), bop_126.astype('bool')) # shape=(7, 8)
bop_155 = relay.logical_and(uop_142.astype('bool'), bop_126.astype('bool')) # shape=(7, 8)
output = relay.Tuple([bop_114,var_124,bop_129,bop_137,bop_145,bop_149,bop_152,])
output2 = relay.Tuple([bop_114,var_124,bop_129,bop_137,bop_145,bop_149,bop_155,])
func_156 = relay.Function([var_109,var_110,var_117,var_124,var_136,var_148,], output)
mod['func_156'] = func_156
mod = relay.transform.InferType()(mod)
mutated_mod['func_156'] = func_156
mutated_mod = relay.transform.InferType()(mutated_mod)
func_156_call = mutated_mod.get_global_var('func_156')
var_158 = relay.var("var_158", dtype = "int32", shape = (8,))#candidate|158|(8,)|var|int32
var_159 = relay.var("var_159", dtype = "int32", shape = (8,))#candidate|159|(8,)|var|int32
var_160 = relay.var("var_160", dtype = "int32", shape = (8,))#candidate|160|(8,)|var|int32
var_161 = relay.var("var_161", dtype = "float32", shape = (1, 56))#candidate|161|(1, 56)|var|float32
var_162 = relay.var("var_162", dtype = "float32", shape = (8,))#candidate|162|(8,)|var|float32
var_163 = relay.var("var_163", dtype = "int32", shape = (8,))#candidate|163|(8,)|var|int32
call_157 = func_156_call(var_158,var_159,var_160,var_161,var_162,var_163,)
output = call_157
func_164 = relay.Function([var_158,var_159,var_160,var_161,var_162,var_163,], output)
mutated_mod['func_164'] = func_164
mutated_mod = relay.transform.InferType()(mutated_mod)
var_166 = relay.var("var_166", dtype = "uint8", shape = ())#candidate|166|()|var|uint8
var_167 = relay.var("var_167", dtype = "uint8", shape = (5,))#candidate|167|(5,)|var|uint8
bop_168 = relay.equal(var_166.astype('bool'), var_167.astype('bool')) # shape=(5,)
output = bop_168
output2 = bop_168
func_171 = relay.Function([var_166,var_167,], output)
mod['func_171'] = func_171
mod = relay.transform.InferType()(mod)
var_172 = relay.var("var_172", dtype = "uint8", shape = ())#candidate|172|()|var|uint8
var_173 = relay.var("var_173", dtype = "uint8", shape = (5,))#candidate|173|(5,)|var|uint8
output = func_171(var_172,var_173,)
func_174 = relay.Function([var_172,var_173,], output)
mutated_mod['func_174'] = func_174
mutated_mod = relay.transform.InferType()(mutated_mod)
const_176 = relay.const([[8.283554,9.725173,4.541361,2.022242,1.450649,8.721389,-0.914822,0.193405,0.538314,5.394562,7.603066,-4.957769,-8.702546],[-2.403604,-1.560032,3.354833,2.763164,-2.631106,-5.474132,4.566511,-7.121147,0.028306,4.520630,-6.417310,-9.859675,8.373601],[-2.626200,7.018373,0.664816,6.526445,7.451351,3.469046,7.625231,0.528902,1.937267,3.430080,4.788847,8.006983,7.947484],[-7.555747,9.767907,7.527955,8.071421,-7.153936,0.101446,-5.423103,-9.351209,1.610978,0.273613,-5.856185,0.902240,2.430257],[-4.052432,6.919445,-2.991397,-4.999877,1.945493,-6.860427,-5.343366,-4.178815,-2.867980,-5.923035,-8.420153,-1.095241,-6.494522],[0.398071,-8.702010,2.547746,7.635991,9.589033,-1.056155,1.490578,7.241853,-9.353107,-4.805801,3.935574,6.046865,2.503419],[-1.418097,4.786355,-6.763469,-8.587113,5.809031,-6.917954,7.689533,0.928189,7.218953,5.457397,-3.515310,-8.655273,-3.394217],[9.872172,1.325114,-6.575100,-2.942942,-1.224249,-6.852864,6.120144,-3.977782,-5.896166,3.021251,1.150281,-0.027520,-2.738959],[-0.643364,5.615944,-1.781900,-6.151411,0.676934,9.355869,0.034135,9.817278,0.714308,2.021370,-9.940850,3.703938,7.628979],[-3.576514,5.109215,-9.960637,2.428093,0.658941,-8.904801,0.507547,-2.529917,2.647378,-4.698807,6.808643,-6.398043,-8.434387],[-0.480270,-6.781379,-0.708780,2.776188,2.907912,-8.992841,7.954908,1.511266,4.449513,2.338125,6.156933,2.283673,0.842727],[0.104575,-6.893972,-6.656556,6.712801,-1.156575,6.457106,-2.035337,-9.312143,9.999706,-0.775311,7.148942,9.732172,4.282088],[-4.125164,2.897085,2.160495,8.699967,-2.675261,-2.583410,-2.681261,7.967234,-6.551856,7.365112,-9.110094,-6.476691,4.253121],[2.299926,-6.421477,5.605119,9.712657,4.061025,-5.846139,-7.664760,-0.065553,-4.605408,-6.803816,0.521836,7.049857,2.809249],[6.490538,-4.369240,0.256074,-4.626761,-8.032334,-1.347244,-6.862320,-0.994176,-1.762740,6.609152,9.358369,-8.109196,8.516603]], dtype = "float64")#candidate|176|(15, 13)|const|float64
var_177 = relay.var("var_177", dtype = "float64", shape = (15, 13))#candidate|177|(15, 13)|var|float64
bop_178 = relay.divide(const_176.astype('float64'), relay.reshape(var_177.astype('float64'), relay.shape_of(const_176))) # shape=(15, 13)
uop_181 = relay.exp(bop_178.astype('float64')) # shape=(15, 13)
func_80_call = mod.get_global_var('func_80')
func_85_call = mutated_mod.get_global_var('func_85')
const_184 = relay.const([-2.482761,3.227870,-1.030952,-6.306877,2.202118,-6.192811,4.255458,8.266233,-6.137963,-9.894608,-9.146032,-3.251502,8.641157,-7.676979,9.299708,9.890555,-5.227574,-0.044741,0.849638,-9.268802,8.112957,6.556838,-7.118179,-4.777843,1.627227,-9.388537,-4.688629,-6.983343,-2.386071,-2.449065,-0.877153,-6.853721,-7.486265,8.215968,3.898990,0.478228,-9.271330,0.166610,1.801862,4.456865,-5.575943,-5.918651,-7.655484,-5.628736,0.684207,5.527910,-9.949450,7.613569,-1.338989,9.788396,-9.058611,8.390587,9.626334,4.528388,-0.286035,-2.046990,1.987837,3.365978,3.848708,-8.544965,8.353287,-2.620412,3.990077,-3.306541,-4.407222,-4.442273,-0.657704,6.229125,-0.907579,-8.434551,5.887989,-7.882171,-6.456885,9.213155,9.021583,-3.974438,0.106853,7.534929,-4.321610,-0.947425,8.057047,5.571611,-6.737882,2.106010,-5.688072,-2.017687,-0.309178,-5.592087,-6.111631,-8.466756,2.098760,-6.369659,8.565966,-9.300308,-1.108793,-2.209706,4.038717,7.651909,-5.406238,-0.516079,3.493967,6.256088,4.413403,-9.412088,1.290653,-8.101476,6.365487,9.547243,-2.360892,3.090858,-6.940858,-4.769973,9.692740,-4.764903,-9.784588,-2.441091,9.345274,-0.554319,9.486794,-2.356780,9.470704,-7.419207,-6.081156,-6.535759,8.529324,8.088290,4.335876,2.035472,4.755660,7.629046,-8.943203,3.077351,8.955160,7.196296,-8.666299,4.142663,-8.158540,8.317178,6.186825,3.042728,5.738630,-8.835884,-4.756451,1.401296], dtype = "float64")#candidate|184|(144,)|const|float64
const_185 = relay.const([-6.721546,9.014461,0.802398,4.655552,-2.112730,-6.308656,-0.952959,-8.960060,-5.001196,-7.243021,-0.100241,-8.396695,-8.400745,-3.215247,4.090397,-4.788122,-9.380522,-9.441198,-5.640901,0.123396,-1.102074,-9.241976,3.506986,-2.468002,-1.788900,-4.727496,2.765446,-3.694362,-6.034581,9.651922,2.942764,-7.453072,7.008074,3.607374,-0.839614,3.690814,-0.289264,9.162454,-6.517630,0.163041,-4.261974,-5.952751,-6.524544,-2.759936,1.878435,-9.270440,3.758027,-8.967196,-4.926594,3.836134,-3.063731,5.371799,-9.080118,-4.816942,4.685062,6.556589], dtype = "float32")#candidate|185|(56,)|const|float32
call_183 = relay.TupleGetItem(func_80_call(relay.reshape(const_184.astype('float64'), [9, 2, 8]), relay.reshape(const_184.astype('float32'), [9, 2, 8]), relay.reshape(const_184.astype('float32'), [9, 2, 8]), relay.reshape(const_185.astype('float32'), [56,]), ), 3)
call_186 = relay.TupleGetItem(func_85_call(relay.reshape(const_184.astype('float64'), [9, 2, 8]), relay.reshape(const_184.astype('float32'), [9, 2, 8]), relay.reshape(const_184.astype('float32'), [9, 2, 8]), relay.reshape(const_185.astype('float32'), [56,]), ), 3)
uop_187 = relay.cosh(uop_181.astype('float64')) # shape=(15, 13)
var_189 = relay.var("var_189", dtype = "float64", shape = (15, 13))#candidate|189|(15, 13)|var|float64
bop_190 = relay.right_shift(uop_187.astype('int32'), relay.reshape(var_189.astype('int32'), relay.shape_of(uop_187))) # shape=(15, 13)
var_193 = relay.var("var_193", dtype = "float64", shape = (15, 13))#candidate|193|(15, 13)|var|float64
bop_194 = relay.bitwise_and(uop_181.astype('uint32'), relay.reshape(var_193.astype('uint32'), relay.shape_of(uop_181))) # shape=(15, 13)
uop_197 = relay.log(uop_187.astype('float32')) # shape=(15, 13)
uop_199 = relay.log10(bop_190.astype('float64')) # shape=(15, 13)
bop_201 = relay.maximum(uop_187.astype('uint16'), relay.reshape(bop_194.astype('uint16'), relay.shape_of(uop_187))) # shape=(15, 13)
uop_204 = relay.asin(uop_181.astype('float64')) # shape=(15, 13)
bop_206 = relay.bitwise_xor(bop_190.astype('int64'), relay.reshape(uop_187.astype('int64'), relay.shape_of(bop_190))) # shape=(15, 13)
output = relay.Tuple([call_183,const_184,const_185,uop_197,uop_199,bop_201,uop_204,bop_206,])
output2 = relay.Tuple([call_186,const_184,const_185,uop_197,uop_199,bop_201,uop_204,bop_206,])
func_209 = relay.Function([var_177,var_189,var_193,], output)
mod['func_209'] = func_209
mod = relay.transform.InferType()(mod)
var_210 = relay.var("var_210", dtype = "float64", shape = (15, 13))#candidate|210|(15, 13)|var|float64
var_211 = relay.var("var_211", dtype = "float64", shape = (15, 13))#candidate|211|(15, 13)|var|float64
var_212 = relay.var("var_212", dtype = "float64", shape = (15, 13))#candidate|212|(15, 13)|var|float64
output = func_209(var_210,var_211,var_212,)
func_213 = relay.Function([var_210,var_211,var_212,], output)
mutated_mod['func_213'] = func_213
mutated_mod = relay.transform.InferType()(mutated_mod)
var_215 = relay.var("var_215", dtype = "int16", shape = ())#candidate|215|()|var|int16
var_216 = relay.var("var_216", dtype = "int16", shape = (5, 9))#candidate|216|(5, 9)|var|int16
bop_217 = relay.bitwise_xor(var_215.astype('int16'), var_216.astype('int16')) # shape=(5, 9)
uop_220 = relay.erf(bop_217.astype('float32')) # shape=(5, 9)
output = relay.Tuple([uop_220,])
output2 = relay.Tuple([uop_220,])
func_222 = relay.Function([var_215,var_216,], output)
mod['func_222'] = func_222
mod = relay.transform.InferType()(mod)
mutated_mod['func_222'] = func_222
mutated_mod = relay.transform.InferType()(mutated_mod)
func_222_call = mutated_mod.get_global_var('func_222')
var_224 = relay.var("var_224", dtype = "int16", shape = ())#candidate|224|()|var|int16
var_225 = relay.var("var_225", dtype = "int16", shape = (5, 9))#candidate|225|(5, 9)|var|int16
call_223 = func_222_call(var_224,var_225,)
output = call_223
func_226 = relay.Function([var_224,var_225,], output)
mutated_mod['func_226'] = func_226
mutated_mod = relay.transform.InferType()(mutated_mod)
const_228 = relay.const(-4.142125, dtype = "float32")#candidate|228|()|const|float32
uop_229 = relay.atanh(const_228.astype('float32')) # shape=()
uop_231 = relay.tan(uop_229.astype('float32')) # shape=()
uop_233 = relay.log10(uop_231.astype('float32')) # shape=()
bop_235 = relay.mod(uop_231.astype('float64'), const_228.astype('float64')) # shape=()
bop_238 = relay.maximum(bop_235.astype('float32'), const_228.astype('float32')) # shape=()
uop_241 = relay.sinh(uop_233.astype('float64')) # shape=()
var_243 = relay.var("var_243", dtype = "float32", shape = (3, 1))#candidate|243|(3, 1)|var|float32
bop_244 = relay.floor_divide(uop_233.astype('float64'), var_243.astype('float64')) # shape=(3, 1)
uop_247 = relay.acos(uop_241.astype('float64')) # shape=()
bop_249 = relay.floor_mod(uop_247.astype('float64'), uop_231.astype('float64')) # shape=()
uop_252 = relay.sqrt(uop_247.astype('float32')) # shape=()
uop_254 = relay.erf(uop_241.astype('float64')) # shape=()
bop_256 = relay.subtract(uop_252.astype('uint32'), bop_249.astype('uint32')) # shape=()
bop_259 = relay.less_equal(bop_256.astype('bool'), uop_229.astype('bool')) # shape=()
bop_262 = relay.logical_and(uop_252.astype('bool'), uop_233.astype('bool')) # shape=()
bop_265 = relay.logical_and(bop_256.astype('bool'), bop_249.astype('bool')) # shape=()
bop_268 = relay.right_shift(uop_254.astype('uint32'), bop_249.astype('uint32')) # shape=()
func_222_call = mod.get_global_var('func_222')
func_226_call = mutated_mod.get_global_var('func_226')
var_272 = relay.var("var_272", dtype = "int16", shape = (45,))#candidate|272|(45,)|var|int16
call_271 = relay.TupleGetItem(func_222_call(relay.reshape(bop_268.astype('int16'), []), relay.reshape(var_272.astype('int16'), [5, 9]), ), 0)
call_273 = relay.TupleGetItem(func_226_call(relay.reshape(bop_268.astype('int16'), []), relay.reshape(var_272.astype('int16'), [5, 9]), ), 0)
const_274 = relay.const([[[10,3,6,-2,-1,4,-3,-6,9,1,-7,-10,1,-3,-8,6],[-3,-6,6,1,-7,7,-9,-1,1,6,4,2,-3,2,2,-9]]], dtype = "uint32")#candidate|274|(1, 2, 16)|const|uint32
bop_275 = relay.minimum(bop_256.astype('uint64'), const_274.astype('uint64')) # shape=(1, 2, 16)
const_278 = relay.const([1.428849,2.426794,2.987891,-6.894532,8.635088,-8.752449,-9.650243,-1.877662,1.632881,7.173985,5.209291,-9.156594,-3.419862], dtype = "float64")#candidate|278|(13,)|const|float64
bop_279 = relay.logical_xor(uop_254.astype('int16'), const_278.astype('int16')) # shape=(13,)
uop_282 = relay.log2(bop_249.astype('float32')) # shape=()
var_284 = relay.var("var_284", dtype = "float64", shape = ())#candidate|284|()|var|float64
bop_285 = relay.bitwise_and(uop_241.astype('int16'), var_284.astype('int16')) # shape=()
bop_288 = relay.less(bop_259.astype('bool'), uop_252.astype('bool')) # shape=()
uop_291 = relay.sinh(bop_268.astype('float32')) # shape=()
bop_293 = relay.logical_and(uop_229.astype('bool'), bop_265.astype('bool')) # shape=()
const_296 = relay.const([5,1,5,-9,-9,-3,8,1,-8,-9,-3,8,-9], dtype = "int16")#candidate|296|(13,)|const|int16
bop_297 = relay.bitwise_and(bop_279.astype('int8'), relay.reshape(const_296.astype('int8'), relay.shape_of(bop_279))) # shape=(13,)
func_156_call = mod.get_global_var('func_156')
func_164_call = mutated_mod.get_global_var('func_164')
var_301 = relay.var("var_301", dtype = "int32", shape = (1, 8))#candidate|301|(1, 8)|var|int32
const_302 = relay.const([-9.108746,7.651556,9.863070,-4.534015,2.234475,9.607748,7.000282,-8.826924,5.358786,-5.639133,-8.552028,1.561398,0.335570,9.729266,-5.847742,1.578368,-1.886163,7.858863,0.805438,-7.320267,-2.212921,0.708345,4.959253,-4.855672,7.382536,-7.140334,3.873341,0.472976,8.260603,4.493432,7.437446,-0.884939,-6.276159,8.722675,2.425193,-6.271659,-3.606046,7.069097,8.808584,-5.208032,-1.728915,-5.743264,-3.482928,9.718794,-7.671573,-3.050890,8.641968,5.654106,-9.973355,-9.387952,4.339081,-0.877182,-5.924370,1.446869,3.460772,-0.398440], dtype = "float32")#candidate|302|(56,)|const|float32
call_300 = relay.TupleGetItem(func_156_call(relay.reshape(var_301.astype('int32'), [8,]), relay.reshape(var_301.astype('int32'), [8,]), relay.reshape(var_301.astype('int32'), [8,]), relay.reshape(const_302.astype('float32'), [1, 56]), relay.reshape(var_301.astype('float32'), [8,]), relay.reshape(var_301.astype('int32'), [8,]), ), 6)
call_303 = relay.TupleGetItem(func_164_call(relay.reshape(var_301.astype('int32'), [8,]), relay.reshape(var_301.astype('int32'), [8,]), relay.reshape(var_301.astype('int32'), [8,]), relay.reshape(const_302.astype('float32'), [1, 56]), relay.reshape(var_301.astype('float32'), [8,]), relay.reshape(var_301.astype('int32'), [8,]), ), 6)
output = relay.Tuple([bop_238,bop_244,bop_262,call_271,var_272,bop_275,uop_282,bop_285,bop_288,uop_291,bop_293,bop_297,call_300,var_301,const_302,])
output2 = relay.Tuple([bop_238,bop_244,bop_262,call_273,var_272,bop_275,uop_282,bop_285,bop_288,uop_291,bop_293,bop_297,call_303,var_301,const_302,])
func_304 = relay.Function([var_243,var_272,var_284,var_301,], output)
mod['func_304'] = func_304
mod = relay.transform.InferType()(mod)
var_305 = relay.var("var_305", dtype = "float32", shape = (3, 1))#candidate|305|(3, 1)|var|float32
var_306 = relay.var("var_306", dtype = "int16", shape = (45,))#candidate|306|(45,)|var|int16
var_307 = relay.var("var_307", dtype = "float64", shape = ())#candidate|307|()|var|float64
var_308 = relay.var("var_308", dtype = "int32", shape = (1, 8))#candidate|308|(1, 8)|var|int32
output = func_304(var_305,var_306,var_307,var_308,)
func_309 = relay.Function([var_305,var_306,var_307,var_308,], output)
mutated_mod['func_309'] = func_309
mutated_mod = relay.transform.InferType()(mutated_mod)
const_311 = relay.const(False, dtype = "bool")#candidate|311|()|const|bool
var_312 = relay.var("var_312", dtype = "bool", shape = (9, 10))#candidate|312|(9, 10)|var|bool
bop_313 = relay.logical_and(const_311.astype('bool'), var_312.astype('bool')) # shape=(9, 10)
uop_316 = relay.tan(var_312.astype('float32')) # shape=(9, 10)
uop_318 = relay.sin(var_312.astype('float64')) # shape=(9, 10)
bop_320 = relay.mod(var_312.astype('float64'), const_311.astype('float64')) # shape=(9, 10)
bop_323 = relay.less_equal(uop_316.astype('bool'), relay.reshape(bop_320.astype('bool'), relay.shape_of(uop_316))) # shape=(9, 10)
output = relay.Tuple([bop_313,uop_318,bop_323,])
output2 = relay.Tuple([bop_313,uop_318,bop_323,])
func_326 = relay.Function([var_312,], output)
mod['func_326'] = func_326
mod = relay.transform.InferType()(mod)
mutated_mod['func_326'] = func_326
mutated_mod = relay.transform.InferType()(mutated_mod)
var_327 = relay.var("var_327", dtype = "bool", shape = (9, 10))#candidate|327|(9, 10)|var|bool
func_326_call = mutated_mod.get_global_var('func_326')
call_328 = func_326_call(var_327)
output = call_328
func_329 = relay.Function([var_327], output)
mutated_mod['func_329'] = func_329
mutated_mod = relay.transform.InferType()(mutated_mod)
const_331 = relay.const(1, dtype = "int16")#candidate|331|()|const|int16
var_332 = relay.var("var_332", dtype = "int16", shape = (9,))#candidate|332|(9,)|var|int16
bop_333 = relay.greater_equal(const_331.astype('bool'), var_332.astype('bool')) # shape=(9,)
bop_336 = relay.subtract(const_331.astype('int32'), bop_333.astype('int32')) # shape=(9,)
bop_339 = relay.right_shift(var_332.astype('uint16'), const_331.astype('uint16')) # shape=(9,)
bop_342 = relay.floor_divide(bop_336.astype('float64'), relay.reshape(bop_333.astype('float64'), relay.shape_of(bop_336))) # shape=(9,)
uop_345 = relay.atanh(const_331.astype('float32')) # shape=()
bop_347 = relay.right_shift(var_332.astype('int32'), uop_345.astype('int32')) # shape=(9,)
bop_350 = relay.bitwise_or(uop_345.astype('uint16'), bop_336.astype('uint16')) # shape=(9,)
uop_353 = relay.sinh(var_332.astype('float32')) # shape=(9,)
var_355 = relay.var("var_355", dtype = "bool", shape = (9,))#candidate|355|(9,)|var|bool
bop_356 = relay.left_shift(bop_333.astype('uint64'), relay.reshape(var_355.astype('uint64'), relay.shape_of(bop_333))) # shape=(9,)
var_359 = relay.var("var_359", dtype = "int32", shape = (9,))#candidate|359|(9,)|var|int32
bop_360 = relay.not_equal(bop_347.astype('bool'), relay.reshape(var_359.astype('bool'), relay.shape_of(bop_347))) # shape=(9,)
bop_363 = relay.bitwise_and(var_355.astype('uint16'), relay.reshape(var_359.astype('uint16'), relay.shape_of(var_355))) # shape=(9,)
var_366 = relay.var("var_366", dtype = "uint16", shape = (9,))#candidate|366|(9,)|var|uint16
bop_367 = relay.left_shift(bop_350.astype('uint16'), relay.reshape(var_366.astype('uint16'), relay.shape_of(bop_350))) # shape=(9,)
var_370 = relay.var("var_370", dtype = "uint16", shape = (9,))#candidate|370|(9,)|var|uint16
bop_371 = relay.greater(bop_367.astype('bool'), relay.reshape(var_370.astype('bool'), relay.shape_of(bop_367))) # shape=(9,)
uop_374 = relay.cosh(bop_356.astype('float64')) # shape=(9,)
bop_376 = relay.add(bop_342.astype('uint32'), relay.reshape(var_355.astype('uint32'), relay.shape_of(bop_342))) # shape=(9,)
output = relay.Tuple([bop_339,uop_353,bop_360,bop_363,bop_371,uop_374,bop_376,])
output2 = relay.Tuple([bop_339,uop_353,bop_360,bop_363,bop_371,uop_374,bop_376,])
F = relay.Function([var_332,var_355,var_359,var_366,var_370,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_332,var_355,var_359,var_366,var_370,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_332= np.array([-2,-7,7,4,5,8,9,3,5], dtype='int16')
module1.set_input('var_332', input_332)
input_355= np.array([True,False,True,True,False,False,False,False,False], dtype='bool')
module1.set_input('var_355', input_355)
input_359= np.array([6,-10,3,-8,2,-9,3,4,-3], dtype='int32')
module1.set_input('var_359', input_359)
input_366= np.array([5,5,10,-2,9,2,1,-8,-10], dtype='uint16')
module1.set_input('var_366', input_366)
input_370= np.array([7,-5,5,3,-7,9,-8,-7,-10], dtype='uint16')
module1.set_input('var_370', input_370)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_332, input_355, input_359, input_366, input_370, )
res3 = intrp3.evaluate()(input_332, input_355, input_359, input_366, input_370, )
res4 = intrp4.evaluate()(input_332, input_355, input_359, input_366, input_370, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
module5.set_input('var_332', input_332)
module5.set_input('var_355', input_355)
module5.set_input('var_359', input_359)
module5.set_input('var_366', input_366)
module5.set_input('var_370', input_370)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_332, input_355, input_359, input_366, input_370, )
res7 = intrp7.evaluate()(input_332, input_355, input_359, input_366, input_370, )
res8 = intrp8.evaluate()(input_332, input_355, input_359, input_366, input_370, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
module9.set_input('var_332', input_332)
module9.set_input('var_355', input_355)
module9.set_input('var_359', input_359)
module9.set_input('var_366', input_366)
module9.set_input('var_370', input_370)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_332, input_355, input_359, input_366, input_370, )
res11 = intrp11.evaluate()(input_332, input_355, input_359, input_366, input_370, )
res12 = intrp12.evaluate()(input_332, input_355, input_359, input_366, input_370, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
module13.set_input('var_332', input_332)
module13.set_input('var_355', input_355)
module13.set_input('var_359', input_359)
module13.set_input('var_366', input_366)
module13.set_input('var_370', input_370)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_332, input_355, input_359, input_366, input_370, )
res15 = intrp15.evaluate()(input_332, input_355, input_359, input_366, input_370, )
res16 = intrp16.evaluate()(input_332, input_355, input_359, input_366, input_370, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
module17.set_input('var_332', input_332)
module17.set_input('var_355', input_355)
module17.set_input('var_359', input_359)
module17.set_input('var_366', input_366)
module17.set_input('var_370', input_370)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_332, input_355, input_359, input_366, input_370, )
res19 = intrp19.evaluate()(input_332, input_355, input_359, input_366, input_370, )
res20 = intrp20.evaluate()(input_332, input_355, input_359, input_366, input_370, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
module21.set_input('var_332', input_332)
module21.set_input('var_355', input_355)
module21.set_input('var_359', input_359)
module21.set_input('var_366', input_366)
module21.set_input('var_370', input_370)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_332, input_355, input_359, input_366, input_370, )
res23 = intrp23.evaluate()(input_332, input_355, input_359, input_366, input_370, )
res24 = intrp24.evaluate()(input_332, input_355, input_359, input_366, input_370, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()

'''73: TVMFuncCall
72: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
71: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
70: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
69: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
68: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
67: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
66: tvm::transform::Pass::operator()(tvm::IRModule) const
65: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
64: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
63: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
62: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
61: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
60: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
59: tvm::transform::Pass::operator()(tvm::IRModule) const
58: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
57: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
56: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
55: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
54: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
53: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
52: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
51: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
50: _ZN3tvm5relay9transform22Devic
49: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
48: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
47: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
46: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
45: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
44: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
43: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
42: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
41: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
40: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
39: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
38: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
37: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
36: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::te::Tensor, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
35: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::runtime::ObjectRef, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
34: tvm::LowerWithPassList(tvm::IRModule, tvm::runtime::Array<tvm::transform::Pass, void>)
33: tvm::transform::Pass::operator()(tvm::IRModule) const
32: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
31: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
30: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
29: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
28: _ZNSt17_Function_handlerIFvN3tvm7
27: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
26: tvm::tir::DataTypeRewriter::operator()(tvm::tir::Stmt)
25: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
24: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::ForNode const*)
23: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::ForNode const*)
22: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
21: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
20: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::StoreNode const*)
19: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
18: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS
17: _ZThn16_N3tvm3tir16DataTyp
16: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CastNode const*)
15: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CastNode const*)
14: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
13: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS
12: _ZThn16_N3tvm3tir16DataTyp
11: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::NENode const*)
10: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
9: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS
8: _ZThn16_N3tvm3tir16DataTyp
7: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CastNode const*)
6: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CastNode const*)
5: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
4: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
3: _ZThn16_N3tvm3tir16DataTyp
2: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
1: tvm::operator>>(tvm::PrimExpr, tvm::PrimExpr)
0: tvm::right_shift(tvm::PrimExpr, tvm::PrimExpr, tvm::Span)

'''