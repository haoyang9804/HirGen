import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "uint16", shape = (13, 2, 2))#candidate|0|(13, 2, 2)|var|uint16
var_1 = relay.var("var_1", dtype = "uint16", shape = (13, 2, 2))#candidate|1|(13, 2, 2)|var|uint16
bop_2 = relay.multiply(var_0.astype('uint16'), relay.reshape(var_1.astype('uint16'), relay.shape_of(var_0))) # shape=(13, 2, 2)
output = bop_2
output2 = bop_2
func_5 = relay.Function([var_0,var_1,], output)
mod['func_5'] = func_5
mod = relay.transform.InferType()(mod)
mutated_mod['func_5'] = func_5
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5_call = mutated_mod.get_global_var('func_5')
var_7 = relay.var("var_7", dtype = "uint16", shape = (13, 2, 2))#candidate|7|(13, 2, 2)|var|uint16
var_8 = relay.var("var_8", dtype = "uint16", shape = (13, 2, 2))#candidate|8|(13, 2, 2)|var|uint16
call_6 = func_5_call(var_7,var_8,)
output = call_6
func_9 = relay.Function([var_7,var_8,], output)
mutated_mod['func_9'] = func_9
mutated_mod = relay.transform.InferType()(mutated_mod)
const_11 = relay.const(5.130289, dtype = "float32")#candidate|11|()|const|float32
const_12 = relay.const(5.919262, dtype = "float32")#candidate|12|()|const|float32
bop_13 = relay.mod(const_11.astype('float32'), const_12.astype('float32')) # shape=()
uop_16 = relay.erf(const_11.astype('float64')) # shape=()
bop_18 = relay.floor_mod(uop_16.astype('float64'), bop_13.astype('float64')) # shape=()
output = bop_18
output2 = bop_18
func_21 = relay.Function([], output)
mod['func_21'] = func_21
mod = relay.transform.InferType()(mod)
output = func_21()
func_22 = relay.Function([], output)
mutated_mod['func_22'] = func_22
mutated_mod = relay.transform.InferType()(mutated_mod)
var_23 = relay.var("var_23", dtype = "uint64", shape = (13, 12))#candidate|23|(13, 12)|var|uint64
const_24 = relay.const([[9,-6,3,8,-7,1,-7,2,4,1,-7,7],[-9,-5,4,-6,7,3,-7,1,3,-6,8,4],[3,-9,-10,-10,-1,-9,-8,-7,9,4,-2,2],[8,8,5,-8,-7,-9,-1,-6,-5,7,-10,-8],[-4,-6,9,2,5,-3,-1,-9,8,-3,-10,-3],[-4,8,-3,-4,3,3,-8,-1,-4,3,7,-4],[-3,-6,-6,8,7,7,-4,-7,10,1,7,-3],[8,6,10,-2,7,-6,5,6,-9,4,-3,-2],[-2,-3,7,-10,3,-10,-8,-8,10,-1,-9,9],[-7,3,3,-2,-8,-6,2,10,3,-10,2,-7],[1,7,2,-10,-8,-10,-8,-8,9,3,-9,7],[-5,-5,5,1,-8,8,4,-1,-8,-3,-5,-5],[4,-6,-3,7,9,4,3,-10,4,3,3,-10]], dtype = "uint64")#candidate|24|(13, 12)|const|uint64
bop_25 = relay.logical_xor(var_23.astype('uint64'), relay.reshape(const_24.astype('uint64'), relay.shape_of(var_23))) # shape=(13, 12)
uop_28 = relay.atanh(var_23.astype('float64')) # shape=(13, 12)
output = relay.Tuple([bop_25,uop_28,])
output2 = relay.Tuple([bop_25,uop_28,])
func_30 = relay.Function([var_23,], output)
mod['func_30'] = func_30
mod = relay.transform.InferType()(mod)
var_31 = relay.var("var_31", dtype = "uint64", shape = (13, 12))#candidate|31|(13, 12)|var|uint64
output = func_30(var_31)
func_32 = relay.Function([var_31], output)
mutated_mod['func_32'] = func_32
mutated_mod = relay.transform.InferType()(mutated_mod)
var_34 = relay.var("var_34", dtype = "float32", shape = (15, 10))#candidate|34|(15, 10)|var|float32
const_35 = relay.const([[-6.069126,-4.437380,5.478522,5.963394,6.253690,-1.954679,9.528292,-7.675893,0.707436,-8.949228],[-7.806832,4.736260,2.539090,-6.270862,1.275613,-9.186784,6.075767,0.703362,-4.754455,-5.667385],[4.145155,-5.064405,-1.991797,-1.059585,0.610747,8.846587,-5.820024,3.856462,-9.856412,2.972978],[-7.458273,7.889559,-5.297697,-9.404627,-0.241769,-2.400394,8.636141,-1.041807,8.759473,-7.016709],[-0.445563,-7.287751,-5.879999,-1.924759,7.629833,6.383777,9.426448,-5.425465,3.030764,3.517025],[8.025902,2.860427,-9.057143,-3.026624,-2.513480,-4.890234,5.249112,1.931843,-0.373283,-5.698883],[8.345170,7.465505,0.143812,-7.871201,2.325101,-4.197587,-2.403091,1.382967,6.442790,-0.604537],[-1.592885,-7.077746,-6.856868,-5.415671,8.961793,-0.281693,-3.146505,-4.290679,3.008163,-3.605970],[-4.190666,1.733185,-5.347529,7.688552,5.338305,3.646446,-3.504979,5.234970,2.176329,4.695847],[-5.128508,7.782593,-6.144149,-9.602647,-9.998771,-0.964595,4.227296,0.873256,-6.069287,-4.402091],[6.294245,-6.904290,8.332447,-0.089992,0.248025,-7.576750,5.289668,-3.424266,8.008879,-6.925731],[3.096958,-2.375740,-4.908789,-0.247755,-2.111531,-8.334095,-3.095842,2.635717,-8.968025,-6.810932],[0.370573,-3.971087,-7.565511,-4.636753,8.350216,4.632294,6.251692,-1.573051,-5.454125,0.451083],[9.973045,-5.688060,-3.708246,7.726443,5.244527,-0.600049,-7.997481,8.400632,1.826413,-1.889337],[-0.838465,7.668320,4.562333,-7.575219,-6.464440,-3.426462,8.492164,6.861928,-7.147888,0.558732]], dtype = "float32")#candidate|35|(15, 10)|const|float32
bop_36 = relay.power(var_34.astype('float32'), relay.reshape(const_35.astype('float32'), relay.shape_of(var_34))) # shape=(15, 10)
uop_39 = relay.sin(bop_36.astype('float64')) # shape=(15, 10)
bop_41 = relay.divide(uop_39.astype('float64'), relay.reshape(var_34.astype('float64'), relay.shape_of(uop_39))) # shape=(15, 10)
func_5_call = mod.get_global_var('func_5')
func_9_call = mutated_mod.get_global_var('func_9')
var_45 = relay.var("var_45", dtype = "uint16", shape = (26, 2))#candidate|45|(26, 2)|var|uint16
call_44 = func_5_call(relay.reshape(var_45.astype('uint16'), [13, 2, 2]), relay.reshape(var_45.astype('uint16'), [13, 2, 2]), )
call_46 = func_5_call(relay.reshape(var_45.astype('uint16'), [13, 2, 2]), relay.reshape(var_45.astype('uint16'), [13, 2, 2]), )
var_47 = relay.var("var_47", dtype = "float64", shape = (15, 10))#candidate|47|(15, 10)|var|float64
bop_48 = relay.left_shift(uop_39.astype('uint64'), relay.reshape(var_47.astype('uint64'), relay.shape_of(uop_39))) # shape=(15, 10)
uop_51 = relay.asinh(bop_36.astype('float32')) # shape=(15, 10)
bop_53 = relay.logical_xor(bop_36.astype('uint16'), relay.reshape(bop_41.astype('uint16'), relay.shape_of(bop_36))) # shape=(15, 10)
uop_56 = relay.sigmoid(bop_48.astype('float64')) # shape=(15, 10)
bop_58 = relay.bitwise_or(bop_41.astype('uint16'), relay.reshape(uop_51.astype('uint16'), relay.shape_of(bop_41))) # shape=(15, 10)
uop_61 = relay.asin(uop_56.astype('float32')) # shape=(15, 10)
uop_63 = relay.sin(bop_48.astype('float64')) # shape=(15, 10)
uop_65 = relay.atan(uop_61.astype('float64')) # shape=(15, 10)
uop_67 = relay.sin(uop_61.astype('float64')) # shape=(15, 10)
uop_69 = relay.sinh(uop_65.astype('float32')) # shape=(15, 10)
output = relay.Tuple([call_44,var_45,bop_53,bop_58,uop_63,uop_67,uop_69,])
output2 = relay.Tuple([call_46,var_45,bop_53,bop_58,uop_63,uop_67,uop_69,])
func_71 = relay.Function([var_34,var_45,var_47,], output)
mod['func_71'] = func_71
mod = relay.transform.InferType()(mod)
var_72 = relay.var("var_72", dtype = "float32", shape = (15, 10))#candidate|72|(15, 10)|var|float32
var_73 = relay.var("var_73", dtype = "uint16", shape = (26, 2))#candidate|73|(26, 2)|var|uint16
var_74 = relay.var("var_74", dtype = "float64", shape = (15, 10))#candidate|74|(15, 10)|var|float64
output = func_71(var_72,var_73,var_74,)
func_75 = relay.Function([var_72,var_73,var_74,], output)
mutated_mod['func_75'] = func_75
mutated_mod = relay.transform.InferType()(mutated_mod)
var_77 = relay.var("var_77", dtype = "float32", shape = ())#candidate|77|()|var|float32
uop_78 = relay.atanh(var_77.astype('float32')) # shape=()
uop_80 = relay.cos(uop_78.astype('float32')) # shape=()
uop_82 = relay.sigmoid(uop_80.astype('float64')) # shape=()
var_84 = relay.var("var_84", dtype = "float64", shape = (15, 7))#candidate|84|(15, 7)|var|float64
bop_85 = relay.logical_xor(uop_82.astype('int32'), var_84.astype('int32')) # shape=(15, 7)
uop_88 = relay.asinh(uop_78.astype('float64')) # shape=()
output = relay.Tuple([bop_85,uop_88,])
output2 = relay.Tuple([bop_85,uop_88,])
func_90 = relay.Function([var_77,var_84,], output)
mod['func_90'] = func_90
mod = relay.transform.InferType()(mod)
var_91 = relay.var("var_91", dtype = "float32", shape = ())#candidate|91|()|var|float32
var_92 = relay.var("var_92", dtype = "float64", shape = (15, 7))#candidate|92|(15, 7)|var|float64
output = func_90(var_91,var_92,)
func_93 = relay.Function([var_91,var_92,], output)
mutated_mod['func_93'] = func_93
mutated_mod = relay.transform.InferType()(mutated_mod)
const_95 = relay.const(6.965358, dtype = "float32")#candidate|95|()|const|float32
var_96 = relay.var("var_96", dtype = "float32", shape = (6, 10))#candidate|96|(6, 10)|var|float32
bop_97 = relay.maximum(const_95.astype('float32'), var_96.astype('float32')) # shape=(6, 10)
uop_100 = relay.asin(bop_97.astype('float32')) # shape=(6, 10)
uop_102 = relay.acos(const_95.astype('float32')) # shape=()
uop_104 = relay.cosh(uop_102.astype('float64')) # shape=()
bop_106 = relay.not_equal(uop_102.astype('bool'), const_95.astype('bool')) # shape=()
output = relay.Tuple([uop_100,uop_104,bop_106,])
output2 = relay.Tuple([uop_100,uop_104,bop_106,])
func_109 = relay.Function([var_96,], output)
mod['func_109'] = func_109
mod = relay.transform.InferType()(mod)
var_110 = relay.var("var_110", dtype = "float32", shape = (6, 10))#candidate|110|(6, 10)|var|float32
output = func_109(var_110)
func_111 = relay.Function([var_110], output)
mutated_mod['func_111'] = func_111
mutated_mod = relay.transform.InferType()(mutated_mod)
var_113 = relay.var("var_113", dtype = "int32", shape = (5,))#candidate|113|(5,)|var|int32
var_114 = relay.var("var_114", dtype = "int32", shape = (5,))#candidate|114|(5,)|var|int32
bop_115 = relay.greater(var_113.astype('bool'), relay.reshape(var_114.astype('bool'), relay.shape_of(var_113))) # shape=(5,)
bop_118 = relay.less(bop_115.astype('bool'), relay.reshape(var_113.astype('bool'), relay.shape_of(bop_115))) # shape=(5,)
bop_121 = relay.bitwise_or(bop_118.astype('uint64'), relay.reshape(var_114.astype('uint64'), relay.shape_of(bop_118))) # shape=(5,)
uop_124 = relay.sqrt(bop_118.astype('float32')) # shape=(5,)
output = relay.Tuple([bop_121,uop_124,])
output2 = relay.Tuple([bop_121,uop_124,])
func_126 = relay.Function([var_113,var_114,], output)
mod['func_126'] = func_126
mod = relay.transform.InferType()(mod)
var_127 = relay.var("var_127", dtype = "int32", shape = (5,))#candidate|127|(5,)|var|int32
var_128 = relay.var("var_128", dtype = "int32", shape = (5,))#candidate|128|(5,)|var|int32
output = func_126(var_127,var_128,)
func_129 = relay.Function([var_127,var_128,], output)
mutated_mod['func_129'] = func_129
mutated_mod = relay.transform.InferType()(mutated_mod)
var_131 = relay.var("var_131", dtype = "float64", shape = ())#candidate|131|()|var|float64
uop_132 = relay.acos(var_131.astype('float64')) # shape=()
var_134 = relay.var("var_134", dtype = "float64", shape = ())#candidate|134|()|var|float64
bop_135 = relay.equal(var_131.astype('bool'), var_134.astype('bool')) # shape=()
var_138 = relay.var("var_138", dtype = "float64", shape = ())#candidate|138|()|var|float64
bop_139 = relay.bitwise_and(uop_132.astype('int8'), var_138.astype('int8')) # shape=()
bop_142 = relay.bitwise_or(bop_139.astype('uint32'), bop_135.astype('uint32')) # shape=()
bop_145 = relay.minimum(bop_139.astype('int32'), var_138.astype('int32')) # shape=()
uop_148 = relay.atan(bop_139.astype('float32')) # shape=()
uop_150 = relay.rsqrt(uop_148.astype('float32')) # shape=()
uop_152 = relay.atan(uop_148.astype('float64')) # shape=()
uop_154 = relay.rsqrt(uop_150.astype('float64')) # shape=()
bop_156 = relay.floor_mod(uop_154.astype('float64'), bop_139.astype('float64')) # shape=()
uop_159 = relay.sigmoid(var_134.astype('float64')) # shape=()
bop_161 = relay.power(bop_156.astype('float32'), var_138.astype('float32')) # shape=()
uop_164 = relay.log(uop_152.astype('float32')) # shape=()
bop_166 = relay.greater(uop_164.astype('bool'), uop_132.astype('bool')) # shape=()
uop_169 = relay.sigmoid(uop_164.astype('float32')) # shape=()
uop_171 = relay.erf(uop_169.astype('float32')) # shape=()
uop_173 = relay.cosh(bop_166.astype('float32')) # shape=()
const_175 = relay.const([-5.343382,-4.934617,-0.141948,8.251979,1.066485,7.037252,-1.154939,-8.949625,8.194530,3.106820,1.296610,8.418038,-6.287880,-3.707527], dtype = "float32")#candidate|175|(14,)|const|float32
bop_176 = relay.floor_mod(uop_169.astype('float32'), const_175.astype('float32')) # shape=(14,)
bop_179 = relay.logical_or(uop_171.astype('bool'), var_131.astype('bool')) # shape=()
bop_182 = relay.floor_divide(uop_173.astype('float64'), bop_139.astype('float64')) # shape=()
var_185 = relay.var("var_185", dtype = "float32", shape = (14,))#candidate|185|(14,)|var|float32
bop_186 = relay.logical_and(bop_176.astype('bool'), relay.reshape(var_185.astype('bool'), relay.shape_of(bop_176))) # shape=(14,)
const_189 = relay.const(3.216073, dtype = "float64")#candidate|189|()|const|float64
bop_190 = relay.not_equal(uop_152.astype('bool'), const_189.astype('bool')) # shape=()
var_193 = relay.var("var_193", dtype = "bool", shape = ())#candidate|193|()|var|bool
bop_194 = relay.left_shift(bop_179.astype('int16'), var_193.astype('int16')) # shape=()
bop_197 = relay.floor_mod(bop_194.astype('float32'), const_175.astype('float32')) # shape=(14,)
var_200 = relay.var("var_200", dtype = "bool", shape = (4,))#candidate|200|(4,)|var|bool
bop_201 = relay.power(bop_179.astype('float32'), var_200.astype('float32')) # shape=(4,)
uop_204 = relay.atan(bop_201.astype('float32')) # shape=(4,)
func_5_call = mod.get_global_var('func_5')
func_9_call = mutated_mod.get_global_var('func_9')
var_207 = relay.var("var_207", dtype = "uint16", shape = (52,))#candidate|207|(52,)|var|uint16
call_206 = func_5_call(relay.reshape(var_207.astype('uint16'), [13, 2, 2]), relay.reshape(var_207.astype('uint16'), [13, 2, 2]), )
call_208 = func_5_call(relay.reshape(var_207.astype('uint16'), [13, 2, 2]), relay.reshape(var_207.astype('uint16'), [13, 2, 2]), )
output = relay.Tuple([bop_142,bop_145,uop_159,bop_161,bop_182,bop_186,bop_190,bop_197,uop_204,call_206,var_207,])
output2 = relay.Tuple([bop_142,bop_145,uop_159,bop_161,bop_182,bop_186,bop_190,bop_197,uop_204,call_208,var_207,])
func_209 = relay.Function([var_131,var_134,var_138,var_185,var_193,var_200,var_207,], output)
mod['func_209'] = func_209
mod = relay.transform.InferType()(mod)
var_210 = relay.var("var_210", dtype = "float64", shape = ())#candidate|210|()|var|float64
var_211 = relay.var("var_211", dtype = "float64", shape = ())#candidate|211|()|var|float64
var_212 = relay.var("var_212", dtype = "float64", shape = ())#candidate|212|()|var|float64
var_213 = relay.var("var_213", dtype = "float32", shape = (14,))#candidate|213|(14,)|var|float32
var_214 = relay.var("var_214", dtype = "bool", shape = ())#candidate|214|()|var|bool
var_215 = relay.var("var_215", dtype = "bool", shape = (4,))#candidate|215|(4,)|var|bool
var_216 = relay.var("var_216", dtype = "uint16", shape = (52,))#candidate|216|(52,)|var|uint16
output = func_209(var_210,var_211,var_212,var_213,var_214,var_215,var_216,)
func_217 = relay.Function([var_210,var_211,var_212,var_213,var_214,var_215,var_216,], output)
mutated_mod['func_217'] = func_217
mutated_mod = relay.transform.InferType()(mutated_mod)
const_219 = relay.const([10,8,3,5,8,2,3,7,8,4,-3,2], dtype = "int32")#candidate|219|(12,)|const|int32
var_220 = relay.var("var_220", dtype = "int32", shape = (12,))#candidate|220|(12,)|var|int32
bop_221 = relay.not_equal(const_219.astype('bool'), relay.reshape(var_220.astype('bool'), relay.shape_of(const_219))) # shape=(12,)
bop_224 = relay.bitwise_or(var_220.astype('uint64'), relay.reshape(bop_221.astype('uint64'), relay.shape_of(var_220))) # shape=(12,)
uop_227 = relay.tan(var_220.astype('float32')) # shape=(12,)
output = relay.Tuple([bop_224,uop_227,])
output2 = relay.Tuple([bop_224,uop_227,])
func_229 = relay.Function([var_220,], output)
mod['func_229'] = func_229
mod = relay.transform.InferType()(mod)
mutated_mod['func_229'] = func_229
mutated_mod = relay.transform.InferType()(mutated_mod)
var_230 = relay.var("var_230", dtype = "int32", shape = (12,))#candidate|230|(12,)|var|int32
func_229_call = mutated_mod.get_global_var('func_229')
call_231 = func_229_call(var_230)
output = call_231
func_232 = relay.Function([var_230], output)
mutated_mod['func_232'] = func_232
mutated_mod = relay.transform.InferType()(mutated_mod)
const_234 = relay.const([[[-7.373351,4.448517,3.866214,3.040877,9.082473,9.146232,9.806343,4.264155,-8.442880,-0.665012,2.440322,2.673313,6.699053,-2.101882,-8.176133],[4.177551,6.708316,-9.739774,-6.196381,-6.783593,-8.243178,1.883633,6.822402,0.457480,6.918871,2.193437,-6.416345,9.742075,2.141683,-9.725045],[2.550248,-3.431810,-3.530883,1.754227,9.171927,1.899668,3.442948,7.495246,6.518577,-0.879191,3.621839,-4.459488,3.881988,2.024702,5.347369],[-9.995689,5.026449,9.009067,3.312649,-6.135978,-9.621152,4.245789,-4.042131,5.491056,5.745959,-4.212512,2.357507,-0.954284,-6.281966,2.690915],[-3.615196,-1.842865,6.856229,9.671579,5.724673,6.725304,0.945055,8.899201,3.384476,-8.301350,9.260734,0.181090,7.444951,1.931954,7.827609],[6.326644,-5.931402,6.574732,-7.957394,1.598776,-1.538829,1.020931,6.967741,-3.225458,4.971605,6.382409,4.843793,6.255851,-3.205906,1.613868],[-8.025934,7.075228,-3.360694,-8.369240,-0.524049,-0.960452,-5.037263,-2.999635,5.283664,-6.881024,6.991627,0.410807,6.946327,7.215664,0.792769],[5.785590,-4.196855,-2.943108,-9.942005,3.469238,-7.965692,3.400414,4.880897,-2.265984,-8.148163,-3.777628,-0.280528,4.221687,-0.413217,-3.879223],[0.697837,8.285247,-4.802222,-3.019635,-5.526008,9.043556,-9.631352,8.317338,4.194586,-7.936697,5.991066,2.048177,-3.325665,8.082026,-6.978159],[-5.067747,6.211779,1.605722,9.455358,-8.864258,7.289093,3.690072,7.675809,0.329618,-2.668232,-8.075722,-2.340529,-4.210743,-6.987776,-9.369709],[6.395202,-0.222697,-7.212033,-2.297008,-6.043927,-1.105481,8.303320,7.077839,-7.992092,0.557056,-3.988722,-0.737278,6.107540,3.606684,-4.775109],[-0.143871,-9.631190,4.662686,-5.972093,-0.798066,-9.667639,-3.577547,-4.585325,-9.198451,8.269042,-6.975725,-7.062334,-0.519447,3.370883,9.868861],[2.098033,4.365220,7.179284,0.144160,-1.141337,-0.799106,-5.458877,-8.397777,-5.512766,6.552872,-0.481790,9.229851,5.413188,7.488896,5.484033]],[[-7.647696,-2.563158,-6.330629,-0.052129,-9.661279,6.679405,-6.439446,1.890795,8.697028,7.646623,7.083803,-1.377170,-2.443694,2.663558,-8.616709],[6.284036,8.554484,-1.753112,5.942544,5.303884,8.159676,-1.471039,-4.665585,3.534253,0.940112,8.216996,-8.664429,4.689399,0.287770,-3.834315],[3.099914,-2.864436,-2.138613,-5.744769,-3.100605,2.676887,-0.489908,1.111538,1.791910,-4.505940,5.972511,-8.983008,8.244090,4.955789,-9.358912],[-7.881647,6.662195,-2.807805,1.434922,7.261555,1.075983,-5.145674,-6.780863,-9.058782,-6.671994,-7.767507,-3.519996,5.269823,-0.714940,-7.916268],[3.090869,-8.168259,-9.124885,-4.579598,3.510813,0.771749,-9.242368,-0.797433,6.406290,-2.036663,-1.019699,7.175670,9.197590,-8.327848,5.251381],[-5.891446,-2.254454,5.087724,-2.019383,-4.648746,1.431533,-3.287446,4.939985,-1.363095,5.560100,-1.584617,8.847524,2.532742,4.820984,-0.687409],[-1.101075,2.980584,9.365078,0.335917,-0.393483,0.524951,5.877023,3.153049,3.635160,9.249550,-9.597600,-9.327303,-3.390943,9.756649,7.787222],[-0.114313,-7.860987,-7.730517,8.623390,4.575530,-9.073227,1.048546,-7.953302,-6.552541,6.813367,3.096070,-1.656456,8.150492,7.740241,-7.827474],[3.103532,-5.285047,-3.399558,2.306803,2.309666,6.359093,-0.197252,6.641050,6.421863,-0.439892,-1.785082,-3.365102,3.442141,4.642041,-4.117772],[2.668501,-1.355016,-2.094232,0.063328,-4.929683,-4.083874,-0.528287,8.175197,-0.197842,5.687259,8.562435,-1.336013,-8.623761,2.169062,-9.938332],[5.725441,7.939113,5.165143,-3.400875,-9.583918,9.551196,-6.266850,1.988026,-8.781661,-1.720358,-3.829787,5.728262,-4.065748,-8.665960,2.383516],[5.015184,-1.669772,-3.508139,-8.689894,-5.905829,-0.093580,-5.351044,3.420702,-2.839371,2.886624,-6.216043,-6.955446,-7.348144,9.344699,-7.536293],[6.509925,-2.902127,0.057490,6.700914,0.448076,-5.704785,-7.040029,6.856376,-0.383804,4.286555,-8.998653,3.393080,5.703189,8.728507,-9.577170]],[[9.818369,-9.599686,1.010949,-9.467907,5.503888,7.421854,3.808433,-3.769156,3.835340,-7.748625,-2.159493,-1.953549,5.642592,3.900362,6.339723],[1.526030,0.784052,-4.644327,3.727053,-8.505380,-9.980084,-0.710612,0.636316,-5.901560,1.068437,2.502137,-7.469764,1.281143,1.390738,-3.099311],[-9.990975,0.072798,4.476998,-1.643144,-5.423657,-5.956877,-7.564232,0.932686,6.028050,1.113347,-0.282108,4.966076,-3.316601,5.046624,7.150150],[-0.187222,6.480052,-6.004652,1.705344,6.430141,3.087646,4.865144,-9.104967,5.960506,-4.672715,-5.558010,8.033217,8.372350,-8.569099,7.339384],[9.894112,0.672748,3.659944,5.620302,-8.376686,-6.870124,-6.113294,-4.771067,-4.512663,3.932709,-3.576149,-1.493706,7.707785,1.731274,-9.486859],[0.962790,9.134599,-7.973723,-8.933207,8.996372,-4.688812,-9.942702,3.396683,0.348102,-8.224572,0.495118,-1.828939,-0.593998,5.592005,5.766010],[-8.967213,7.287724,5.558393,-2.527525,-9.152308,-9.594595,-1.897277,0.044428,6.486013,7.764920,3.624524,-2.217299,-0.322631,0.213628,3.288041],[8.828558,-5.619070,1.263197,-5.140794,6.917313,3.963626,0.760443,9.235206,-1.528940,6.313659,-2.057568,-3.856229,-0.035065,-6.676670,-6.890284],[-0.994201,8.766681,0.302614,-8.998512,8.703305,-3.185593,-9.732429,-7.836200,-1.254039,-0.871961,-6.686452,4.708962,-0.985533,-9.977862,5.961054],[-2.824678,-3.056525,-5.193903,-4.565300,-7.581838,1.850595,-9.440272,-7.380261,2.972031,6.695385,4.908813,-2.889690,-2.005088,-6.764433,9.210972],[-6.787607,-4.233718,-9.980048,-6.732115,6.326049,-5.177241,6.671865,-3.724221,1.807662,-6.768184,-5.695125,-7.363012,-3.587387,9.314574,3.657682],[5.935925,-6.380110,1.890026,-4.391001,6.306053,-0.512694,-5.980177,-9.130235,7.311614,-5.365832,2.060577,7.142599,-7.339697,-3.912739,6.854970],[-6.324247,5.174586,-2.766326,1.818916,-4.186360,-8.910666,-2.772797,-7.503341,-5.307853,-0.564185,-4.161103,1.321264,-2.384819,8.188013,2.207122]],[[-6.429500,0.264832,-6.931834,-4.203230,6.102069,-5.549825,3.309052,-8.789289,6.820551,-0.660456,-1.181995,2.306158,-7.067664,8.875654,0.985543],[-3.748905,-5.837028,3.653995,6.080176,9.336247,7.388619,8.802347,-6.708122,-0.851443,-5.078212,-5.540561,5.877825,-5.588108,9.054940,-3.870302],[-3.993770,-0.431384,-8.676211,3.870078,-8.265997,-2.194740,-5.855354,-5.601580,-1.684615,-5.009699,6.260624,0.421469,4.139191,5.254881,7.566411],[7.917313,-4.759853,-7.307730,4.035319,4.794157,-9.953885,2.522028,2.778589,-6.971722,4.107399,-9.074491,9.542306,2.524393,8.801397,0.759973],[-2.720526,-6.565152,-4.447831,-9.123170,-9.543402,6.019324,0.794234,5.126286,4.550908,-9.010926,-9.185149,5.151412,-0.136798,-6.544793,6.987624],[-4.696662,-1.634067,3.756195,-3.763832,7.877398,7.073081,0.673176,8.946401,8.283847,-0.766829,8.807516,-2.635565,-3.993882,-4.115248,-1.023211],[-7.238454,3.675966,0.712030,-8.786221,-6.530150,-5.784167,-6.767750,8.053898,-1.914925,-2.913879,-5.451189,2.736429,1.471848,-3.847748,0.979001],[0.179040,0.045067,-2.672499,1.676592,-6.678168,-1.566625,5.009864,6.672165,8.057447,1.819953,-8.635818,5.306150,-6.136802,-2.521749,-4.082094],[8.235604,0.880326,1.594091,5.542954,-3.229919,-6.644385,-9.201795,-2.206823,-0.437539,6.546752,0.669321,-5.334781,-1.533378,9.918467,3.933781],[-9.212711,-2.336746,8.554896,7.330621,-9.544224,3.564855,1.280870,4.680192,9.613934,1.350184,5.596325,-1.428877,4.365358,4.370095,2.207465],[4.212611,8.143859,-6.084771,5.243732,-8.645002,1.469957,-1.951251,1.377502,-7.631547,-5.214123,-3.919347,8.492745,3.475065,1.222725,2.414879],[3.798588,-6.630625,-7.667631,0.482822,-0.134562,-9.683244,5.277132,-9.790070,-8.504333,2.540860,-5.304488,-6.803216,6.736137,6.769538,-7.479537],[7.351730,1.094993,4.232836,-0.846811,8.361964,-1.129832,3.780376,-9.892091,-9.026786,-0.621911,8.652608,7.665726,-2.646845,2.956777,1.751526]],[[2.444239,9.646810,-0.009279,-4.421614,-6.774175,-7.012201,2.401116,-1.728765,5.014440,-9.469135,4.285652,0.866173,-7.520788,8.489595,8.696387],[6.358857,1.030121,8.671429,6.461182,8.431587,0.644039,-6.638181,6.952154,-4.912344,-3.634740,-5.948057,0.312614,-7.692041,-6.300109,2.140657],[5.023967,-8.823664,-7.994414,-9.644153,9.425859,8.601324,9.822984,-2.913054,-3.174702,-9.090660,9.098298,-6.082586,-0.950769,-2.340503,-7.270958],[-0.555423,0.548446,2.183506,-1.859079,0.318036,8.354892,-0.556395,7.392094,3.981008,1.738670,-6.727017,-0.345504,7.961612,0.160304,8.808258],[-3.450145,0.302342,-1.910302,8.734185,4.176305,0.596882,2.382211,2.046639,-9.430731,-3.605937,-7.253581,-2.479540,-9.511505,3.838348,-9.449759],[2.858729,-6.608266,-6.660580,4.219209,1.500470,-0.568950,8.194206,-3.009079,-1.544369,3.851257,8.856381,7.389817,3.653045,8.014612,-0.764498],[8.080686,-3.962601,-7.273416,7.545949,-3.608658,-9.248381,3.005700,-2.287995,5.361734,-5.482775,-2.104868,-2.686186,6.822448,6.022195,1.542736],[-3.281392,3.154289,-7.526885,2.946386,-8.357649,0.015855,1.594969,-8.828334,-8.767986,-5.351001,7.614824,-2.167336,6.038495,4.973671,7.655407],[-6.579329,1.618695,-4.097188,5.253452,1.144571,-5.200541,8.583977,4.716821,2.253662,3.759016,-5.842587,-0.444068,-2.260789,3.329465,-0.849690],[-8.312358,-7.961919,0.633063,-9.090771,2.356123,-3.575336,-0.277484,3.136567,0.148352,2.517467,-6.528556,0.839921,8.644780,-0.703549,9.782798],[3.515594,5.649936,-2.739433,-7.550230,-5.780216,-8.444840,3.822773,-4.697744,0.257186,-8.492327,-7.757229,-8.582590,5.315939,0.402624,-4.752551],[3.237534,7.554125,-8.754020,8.888440,-2.089563,-4.811568,-6.665637,6.773741,-7.355934,-3.395352,6.965146,8.509518,3.995670,0.261780,5.812271],[2.630050,5.522777,7.245159,-7.611120,8.243580,-5.566299,-8.793090,3.825745,8.924201,-8.492395,-0.963474,-8.765034,8.941020,9.155687,8.038848]],[[3.238898,1.429241,9.447305,-0.343954,4.583144,-3.940654,0.291121,-8.336429,-2.050461,-7.095132,6.069967,-5.626459,-0.459147,5.110615,6.384719],[-9.033843,-3.986034,6.860322,3.248727,1.474902,5.615542,-0.861873,-7.429955,-0.890524,4.853391,8.405067,8.855542,-9.781084,-8.084165,1.942405],[-3.220710,-6.126654,3.969484,-6.729586,1.717550,6.004356,3.728922,4.097457,-5.549703,-5.766016,-9.505340,7.884686,-2.400281,0.463314,1.675006],[-1.336531,0.818096,-2.606086,-6.199146,4.380539,0.617166,2.288802,-9.340378,-4.648255,-5.885937,-9.892227,1.852741,-2.622891,-5.122620,-1.574740],[9.873992,5.765977,9.721415,2.258738,8.721606,0.410632,-3.173193,6.847443,4.003871,3.238694,2.617511,-8.676621,9.652962,-9.059102,-9.890277],[-7.669761,8.924490,-5.694767,4.036986,-6.036537,-4.024290,2.266267,-9.076160,-6.406988,8.070503,7.678460,9.494479,8.962229,8.011221,-9.153817],[-2.358141,1.292644,4.921872,-6.404968,9.232373,7.677795,-9.883033,-4.729027,1.871751,-5.350662,8.952026,2.364369,6.431608,8.014350,-2.596896],[-5.409699,-4.886207,-1.924439,-0.631101,8.168638,-8.223886,0.148089,1.841731,5.453186,-3.236204,1.342024,-4.138526,5.203563,3.147731,-1.782957],[-5.705120,-5.802172,-9.632963,-7.167151,3.335888,-6.266370,-8.139206,-1.463241,-2.212107,9.764397,1.249564,-8.342339,2.906154,4.049902,-1.345077],[1.572412,3.367946,-3.945778,-5.698595,-3.820062,-8.219737,7.157022,-4.835624,-7.302027,-4.047293,-9.491350,9.317049,2.071932,-6.215201,8.533750],[-1.909160,1.621854,6.000377,1.221677,5.038670,9.200748,-0.614023,-3.509014,1.496924,4.775411,-0.632052,9.874509,-8.821849,7.284467,-3.617433],[-9.353153,3.394780,-1.380494,7.019901,-7.509317,2.168981,-7.951003,7.011372,-2.618803,3.490469,-4.448959,9.124509,6.213302,-9.015086,-0.401280],[-4.087860,3.709486,5.788705,-3.799398,5.425411,8.839324,-9.249499,-8.082590,-0.129232,-1.136080,6.438720,-4.057873,1.033973,-9.212705,-8.283646]],[[-2.991076,5.226295,-5.976547,6.361137,2.904014,6.397637,0.408024,-1.299368,7.149410,-6.977540,5.300006,-0.435338,4.364981,4.883985,7.713503],[-1.541480,-8.391978,7.762489,-7.576584,9.465304,3.880411,-5.567902,1.723457,5.963617,-8.168463,-3.012738,6.420708,9.438152,-1.404349,-4.683851],[-4.000554,1.806282,9.085226,7.338026,0.997543,6.220418,8.064018,3.370741,7.422490,-7.424291,8.350955,2.400809,7.436729,8.244657,9.888031],[-5.735702,-9.609945,2.770726,-2.051409,-1.582720,9.946111,0.486319,0.633843,9.290896,1.406361,-0.097185,1.213170,7.574929,-9.935093,-5.746447],[-1.848790,5.606358,3.244218,-2.670647,8.680402,8.002749,7.247132,-4.724744,-9.636803,3.140396,7.198232,-9.129181,3.883085,6.371527,-0.597424],[8.580630,-3.987650,1.975731,4.105511,-6.197333,-1.165868,-9.637045,-1.506606,0.810854,-4.109711,-4.134359,-1.835090,-3.594518,-1.030127,-2.798496],[-2.948689,3.306419,-4.381751,-8.785807,1.882482,9.938249,-9.752891,7.589067,-0.978604,2.426430,4.824322,-1.860497,-1.974904,2.994389,-2.764508],[1.904322,5.334932,-3.178827,-1.404672,-4.036901,8.636746,8.282649,4.244804,-2.569990,8.850956,-7.715988,8.345224,7.361171,-6.776812,-9.853023],[-4.231095,5.371657,-4.856550,7.561492,-7.792842,-6.092842,3.738084,2.503914,-9.313378,-7.441796,-7.893732,-8.725673,8.130661,6.726741,-7.355980],[1.216426,-1.345864,0.757193,-1.524787,6.342185,-4.427670,-9.531832,9.960544,-4.087124,4.044277,-6.520712,4.234432,0.904843,-1.950475,-9.167739],[-5.531127,5.514620,-3.202658,7.177248,2.513323,9.422371,1.507534,-4.912586,-8.898582,-3.433367,2.717262,1.868190,-1.417632,-8.988633,9.909467],[0.277071,-2.833752,-0.840405,4.727723,1.394129,-4.645495,-6.545123,-5.713128,2.784780,9.926347,-3.374411,-5.413744,-8.999826,-2.070505,5.058729],[3.589564,5.570186,6.007748,7.654028,9.505229,1.165043,1.564519,0.757254,-6.104695,-9.226375,5.783313,3.904969,-9.990582,-5.633058,-0.683179]],[[3.656712,-5.421328,6.849718,-1.871186,6.950273,0.575179,-3.388682,-0.208893,-4.281819,-1.428028,9.779274,8.261608,7.779514,-8.360202,-3.338738],[3.455507,-4.320871,-1.650169,4.553497,-1.991089,-1.694842,4.303577,7.795748,5.773207,1.858986,-5.487416,2.927645,4.838256,-7.741473,-4.112956],[-5.877232,-1.302846,6.957958,-7.307553,1.836356,7.718935,-7.521738,-5.594086,4.235186,2.131159,3.360298,2.965051,2.287556,6.836561,-6.491268],[-8.306235,4.295336,3.302519,2.890933,8.975824,4.362567,-9.045954,-2.486100,7.374127,-6.485474,-0.583612,-1.813353,-0.443218,-9.594938,8.146199],[6.724328,7.424921,-8.521739,-2.335223,-9.326935,6.354259,-0.118829,0.823389,-6.298086,-2.643971,1.773696,7.687277,-6.341604,4.205396,0.272295],[3.058523,-0.007102,-1.290039,-4.613666,-5.124910,-6.547444,-9.193199,4.415995,2.172160,-8.169506,5.396765,-6.119752,4.847420,-0.177636,2.666884],[-2.422426,0.951222,9.106829,1.342204,-0.341466,-4.540757,3.908539,3.602707,-5.970595,0.713520,9.440589,-9.451564,4.711993,-6.949207,-3.080906],[1.015855,3.431009,1.356331,-2.519934,-2.115759,-3.589903,-4.336120,9.841673,7.094334,-5.232062,-7.481316,0.393559,-1.636439,-2.617731,-7.407176],[-3.651314,4.798813,-0.614002,1.814696,-8.794065,0.313170,-7.996119,-3.164356,-2.603581,-1.768363,-1.643692,-6.306964,6.607015,-8.667172,6.049423],[3.565440,3.670852,0.163204,2.752792,-3.384213,-2.473556,3.425726,3.180810,-1.696037,0.302735,3.639386,4.972423,2.534323,-5.221742,9.571582],[-3.002150,7.642368,5.676410,-2.888637,4.066445,-8.098836,-5.590096,0.476538,-9.590971,2.710813,-7.860522,2.233784,-6.706047,-0.791978,9.731451],[8.690241,-0.663264,8.028506,1.570564,6.861410,-4.594292,9.736650,0.898780,0.426583,-0.885922,9.311950,0.686712,3.164990,1.411760,-0.027371],[7.932599,-1.995932,-1.460977,6.787377,2.396116,3.731984,5.811412,1.819440,6.515749,-1.932228,1.105413,-1.801581,-6.208861,9.582306,9.586927]],[[-9.159135,3.052140,6.919842,-0.259647,4.894125,3.168740,-6.213365,3.470054,9.943728,-8.129317,0.830862,0.767101,-9.531683,2.968610,9.294593],[2.636567,1.597413,-8.018230,-0.717965,4.393355,3.850714,-4.183964,7.670859,5.576861,-8.750442,-7.331891,8.979612,7.689093,-5.948595,5.390635],[-1.973587,3.962758,9.778445,-3.449679,0.791783,-7.224942,-2.460488,-0.807601,-7.400755,-5.539580,8.055041,-3.184710,-8.844370,-6.347330,-4.504187],[-5.916488,-2.684989,-0.628343,1.477732,1.385325,1.923221,8.082980,8.829080,1.580597,4.139129,-6.692375,1.738007,-9.482118,0.943285,-1.936721],[-8.118295,-7.032524,-6.236004,3.529738,2.964168,-2.046053,-1.136668,-0.748031,8.157556,7.172768,6.914759,3.156525,5.116947,-1.800460,-4.578205],[-9.746764,4.478763,1.108718,-2.523461,7.275597,-0.354028,-2.201012,-1.825770,-4.920909,-3.517109,-8.762086,4.385464,-6.555425,8.757368,0.431762],[8.348249,9.658123,-5.952948,4.468825,0.417971,-4.035255,-9.994591,-7.608991,5.876406,5.550227,-7.525908,9.437276,7.233450,-7.217038,-3.884406],[7.324982,-4.263904,-9.114958,1.493194,5.532719,9.498307,-9.008239,-2.677440,-7.340849,6.974703,8.681202,2.206274,-7.498987,5.555632,-3.950082],[-4.905243,8.959338,-9.459495,-9.409886,0.912964,-0.503367,1.048553,7.390954,4.394863,-1.532307,2.198496,-0.597110,-9.797662,1.918051,-2.119581],[-0.116809,3.223684,8.058273,8.383242,-7.350919,2.602234,0.958569,2.276703,-5.117530,-8.243539,-7.238627,-4.376287,7.459559,0.494532,-2.257080],[-7.576959,-9.460697,4.361514,1.409437,8.303340,0.656561,-2.312731,-5.290581,9.386174,-1.302208,7.277061,7.764078,9.377767,-3.330591,-7.932924],[-6.301062,4.173293,-8.623948,-5.220358,-9.380612,3.439167,-3.142283,-2.863892,-2.903859,4.350854,-7.519651,4.936748,7.270959,-6.250386,3.260684],[-8.156097,2.478639,-4.247270,-3.366503,3.806345,6.853885,1.763938,-9.965346,-4.806711,8.223131,5.294170,-1.103125,-3.060853,3.901178,2.487715]],[[1.073022,5.219855,-3.367042,-8.543846,-6.201090,8.624303,3.318761,-3.753706,-8.486484,-1.406532,-7.645824,8.540148,-0.752775,-0.125420,-8.877198],[-9.507847,-2.470671,-6.268281,9.048879,9.680887,-2.480472,5.172159,4.615927,1.080653,-5.409228,-9.480059,4.794481,7.392999,6.408759,-4.672793],[-8.244101,0.842217,-4.325182,4.760220,-3.651284,1.415430,6.723914,-7.677355,-3.393113,-8.484494,7.122627,-8.769134,6.457389,-2.743181,8.925229],[-7.519738,4.507481,-9.911157,-4.450775,-2.930449,4.926497,7.550886,-9.379498,8.705005,-3.302351,-5.683928,-5.534097,-5.573087,-8.117609,-4.346289],[5.031562,9.660781,-5.156122,-4.472760,1.681545,-2.476724,4.793930,5.926681,7.808181,-2.385487,8.686540,-4.871982,1.274189,5.281543,5.945634],[-3.152948,-6.320475,-1.743335,8.627592,9.614583,6.997303,9.926238,-9.183200,-5.193714,-1.135414,5.574033,8.068510,1.224966,-1.066443,9.109789],[0.965365,8.902836,6.331914,-3.212168,-3.956879,-6.696526,2.047451,-5.756380,-8.510918,-4.694703,-9.244231,-6.704519,3.642544,-3.865761,-9.767244],[2.643032,9.132188,-4.363319,-3.966956,-7.262621,-9.412293,-8.805727,-4.448901,6.464444,-9.744937,9.544142,6.839068,-1.496994,-7.947757,6.779846],[-5.165925,-9.266583,6.097395,9.806519,0.994692,-9.566488,-5.224619,-3.552626,-7.061995,7.388388,1.504116,1.880246,2.681943,0.030627,-9.601822],[-2.773883,4.805314,3.391155,3.872077,9.488924,-5.691523,5.423281,-4.954509,6.266360,1.807695,5.854716,-4.631977,-4.459140,8.201496,8.241713],[-6.731514,-5.338908,-6.083291,-8.992311,-6.953754,-4.528713,3.547963,2.127758,3.745605,-9.100891,-2.560887,6.227326,-2.503179,-5.984871,3.108903],[-2.859887,6.709680,-2.342161,-1.432113,-1.864725,-5.449637,2.184125,-5.692888,6.914387,5.778008,-0.943752,-1.880113,-5.293070,8.345338,-1.849358],[-0.054478,-0.892506,7.776226,1.079719,0.462083,2.032576,8.030939,-1.906890,7.892306,8.410592,7.428425,-2.680734,-4.614799,5.756625,0.492436]],[[-4.370414,-0.107445,-3.386421,7.897315,5.841794,5.260568,-0.248003,7.650346,-3.605026,1.794174,7.888712,7.670103,-8.828673,6.144723,-8.814018],[0.726664,-5.920694,3.175475,0.933382,0.732086,-5.975714,1.458266,4.042743,5.181800,-9.267117,0.051500,4.152364,6.023652,-7.779695,1.074987],[-5.072761,-4.741970,-1.248759,1.714288,-6.533147,-9.664121,7.074203,-6.679871,-3.782318,-5.445157,-7.111844,3.394563,-2.401542,1.146435,0.002711],[9.295041,5.515378,-9.034243,-0.254764,1.840037,-4.894116,0.271229,-3.668239,-4.742715,4.620562,6.837577,1.332122,7.436804,4.001338,-1.474186],[-5.984502,-9.621540,0.060607,5.102946,-8.284698,4.498606,1.304865,-2.556762,-6.023763,-9.511463,9.029688,3.834036,-1.152815,9.446831,2.147411],[-5.742092,6.840133,9.423956,-0.463475,-7.145091,2.235355,5.681605,-8.978708,-0.707665,1.895852,-7.059303,-3.230918,9.715365,1.317559,9.609203],[-2.399580,-8.809281,-9.165830,3.686896,-1.024343,-1.266501,9.627342,-6.684105,1.894701,-3.648993,-1.671941,-6.502920,-0.642344,0.753715,-0.812922],[-9.535847,9.227419,-8.715051,-2.096247,-2.862165,-3.842252,-2.627227,-7.061121,0.824300,-3.890946,-5.823334,8.581600,0.813594,-2.045246,7.541431],[4.798851,-8.249276,-0.047976,1.152192,-6.235536,0.808760,-3.930634,-6.890231,5.250870,-8.372830,9.299104,-0.780963,6.427501,-6.958918,-0.344309],[-1.453468,5.197445,-8.943441,-5.724419,-3.228051,3.597052,5.347564,9.355161,4.138694,5.590399,-5.285518,-2.224693,2.153520,2.156211,-7.799384],[6.821552,2.389937,0.275616,-1.153463,0.316104,-6.459857,0.786356,-6.347718,0.728031,5.439170,-8.550620,1.939666,-9.148880,-4.093732,-1.128295],[2.541202,-0.338883,-2.660083,8.856285,9.625312,7.089889,5.825320,2.630083,8.681440,4.553323,0.498587,7.962513,2.732359,-0.710351,8.003784],[-9.398270,-2.516017,2.090479,-5.426644,-9.975889,-4.970852,3.804695,-1.775566,2.816565,1.619087,-1.236529,-4.845133,3.995673,0.475204,-4.723228]],[[-9.944454,7.745215,9.096010,3.473382,6.257775,8.037458,6.449362,-0.137379,5.128677,2.409071,-4.600221,9.547094,9.166107,-3.503246,-0.392892],[5.924312,1.843456,-3.859888,-6.354305,-2.646329,6.297373,8.242586,-6.138082,-5.757594,8.509839,-4.516819,4.362142,9.053434,-4.398454,0.714776],[-1.735275,1.629576,4.478472,-5.835656,8.789625,-8.429175,-2.668098,7.363883,3.111973,-0.171365,-3.950886,-5.154072,-1.471908,-3.779353,-1.922555],[-6.004296,4.078664,-1.153093,2.255594,-4.507764,-3.675702,8.064677,-0.257415,9.064695,-6.850052,-1.505936,4.917119,-0.216048,-8.113035,-6.457493],[-7.549706,0.477279,9.093181,-0.007416,-0.094846,5.967228,4.086232,5.471052,-5.292351,8.284819,-2.679006,3.586481,2.440710,-0.158978,-2.425897],[-1.140058,0.758717,-9.743769,8.729692,1.725290,1.678874,-8.242052,2.888210,-6.948415,4.822816,-9.300935,-0.483126,9.683260,1.862029,0.823066],[-9.598730,-2.126439,-7.418968,-0.323525,1.189568,3.234768,0.798150,-7.100093,-7.842299,-2.473018,-3.041390,2.788980,-6.386660,-3.730923,-2.575811],[3.237600,3.967772,-4.459246,5.786956,-1.635629,-9.892921,5.044722,3.728102,-4.988300,1.771421,5.157315,1.237815,-7.046771,6.068831,8.031793],[-7.058100,3.850065,-2.665512,0.318466,-0.234451,2.234532,-5.634621,-0.360546,-1.296574,0.585580,3.603310,5.605815,6.917869,-1.942907,4.700620],[2.451993,4.741455,3.088446,-6.046642,0.313812,-9.194695,-7.383192,9.801738,4.372171,4.645117,8.823104,2.094627,-4.076312,-9.980399,-8.126826],[-5.313859,-3.061469,-3.093370,-0.869060,-6.616695,1.011214,-9.535783,3.670191,7.079286,4.083480,4.018145,5.302401,3.685950,-8.822290,3.448926],[4.294399,-4.398762,1.337860,-4.151079,0.167510,4.644465,3.293091,-0.931919,9.531785,1.666044,0.963808,-7.844255,-0.347513,-8.015596,9.532516],[1.241096,3.320852,-6.122928,-3.982058,-1.247749,-9.616186,-9.056910,7.774635,-0.091372,-6.370706,9.146173,4.958273,1.072323,-9.630357,-7.038547]],[[7.607618,-1.954436,2.236196,5.319353,2.951864,7.902636,0.996287,-7.427970,7.360215,8.038297,-8.669474,9.001543,-6.748368,0.721234,-3.546677],[2.484132,1.984939,-7.722794,-6.490998,-4.772172,-0.360920,4.226882,-7.180753,-9.775317,8.176493,3.554997,5.387418,6.984534,7.284377,-9.543561],[-9.061239,6.328760,0.032274,-5.417890,3.775562,-5.903475,-8.606718,9.521594,8.319182,-7.822437,-8.308656,-4.616751,-4.062370,6.376898,3.891089],[7.346299,1.148319,2.643167,0.947813,3.589425,4.811526,-7.606908,7.516422,-4.983386,6.609274,7.419198,-7.182536,9.847040,8.357421,7.838303],[-5.947869,-3.305081,4.407511,9.543561,8.382598,-9.462556,-2.795513,6.763972,-8.558003,-6.106509,-7.435438,3.323957,5.576283,-4.739953,-3.897008],[5.302677,-0.710274,-1.456818,-0.843926,-7.566899,-8.109771,-1.655608,1.251080,7.934603,3.503619,-8.642522,9.181025,-5.953221,-0.287935,-2.767861],[-2.777329,-7.045081,1.780176,7.302961,-9.022408,-5.736878,-9.256150,9.326172,-2.612220,5.490561,-7.776348,1.281559,-0.666060,-0.323995,-4.002122],[5.206527,7.972066,-2.714671,-4.077653,-1.122209,2.696349,-7.410900,0.720351,-1.460095,-2.805125,1.435844,3.687734,-6.735018,-4.250237,-8.558554],[0.200184,-4.574513,9.668114,-9.955418,-2.922802,-9.364639,5.654264,1.686388,-5.848159,-0.362901,1.951597,9.180898,-1.057989,-6.800390,2.111949],[-3.115279,-7.880577,2.779466,0.108699,-3.365434,-4.752543,1.060606,1.112700,-9.372732,-6.432950,-5.352979,-1.569990,-2.956086,7.071069,1.401207],[-6.377622,-9.290313,-7.153765,-0.030582,4.385922,5.081577,-8.548271,0.483685,4.643378,4.467553,-9.425856,-3.219022,-3.042828,4.381266,5.500677],[-0.815677,-1.447462,4.425116,-6.444636,-3.581128,-1.075760,8.228304,0.545258,-1.870573,-4.465640,-2.972766,7.902142,5.968699,-2.377598,4.869053],[8.213982,7.148906,-7.948991,7.747101,-3.168137,-3.177186,0.509352,1.436739,-2.960775,-4.184705,-8.389746,6.831225,7.629044,1.392593,-8.058549]],[[6.582625,-0.886325,1.059759,1.778865,2.526421,6.764283,-2.066796,7.758955,0.873159,0.042093,-3.289476,-4.775071,7.926582,-9.781930,3.204842],[-4.904205,-1.425243,2.838864,4.296784,-7.197508,0.459670,5.249060,3.102993,2.334385,-9.705086,-8.409519,-2.830270,2.771008,-6.113138,-0.809379],[-6.177099,-5.993775,1.526390,-6.567116,2.136291,6.915396,-0.781798,-0.094856,5.852314,-4.212916,8.478120,-9.160126,-7.833183,7.418244,2.004717],[-2.980667,-2.189979,1.499791,1.423812,0.977587,-8.277925,6.562848,2.664144,-2.731294,5.357395,-1.659774,7.849038,7.587691,-6.882204,-7.073264],[-8.622724,9.087729,-6.643979,0.686363,7.273991,-0.651556,0.268664,-3.521490,5.412078,-0.641221,-3.561557,1.441224,2.627074,3.188722,-0.217034],[-8.813457,-1.157331,8.693881,-7.370496,-8.833903,8.417869,2.585936,-7.761789,3.832016,5.118930,7.618136,1.060360,1.633089,1.711349,-5.870269],[7.277243,-8.998657,4.180182,-3.891803,-9.096785,7.418960,6.790692,5.813489,-1.485899,6.413742,-7.679011,0.415475,-5.243644,-8.255650,2.151972],[8.744224,8.343492,6.371458,1.467449,-5.905967,-7.947920,-1.982447,9.196939,-0.861312,-2.777296,4.671591,-9.458743,-2.029841,6.607208,-0.161650],[-7.452174,7.220306,3.937849,-7.159574,-0.124229,9.578844,-0.515767,-5.063637,0.977781,9.366055,5.262186,-0.606673,-5.819631,-2.561635,7.875608],[-4.046411,-7.908980,-9.579825,-6.873508,-7.947856,1.205639,-3.883563,9.285599,4.848191,0.402761,7.522220,7.979290,-6.641460,-4.427141,-8.517580],[5.408268,6.173437,-1.512589,1.184832,-7.346180,-4.977449,6.788775,4.471371,7.271288,6.764724,-3.209390,5.441313,-9.975955,1.873027,-4.224638],[7.262925,-3.989284,6.864409,-5.756309,-4.817500,2.568510,-8.925236,0.149078,2.690090,9.392461,4.928636,4.063162,7.655796,-3.428692,4.082347],[-6.142135,-7.454466,2.056352,-5.863763,-5.509136,3.088469,5.055552,4.622762,3.966057,3.666569,4.192391,-0.234229,-6.702949,0.444269,-3.184979]],[[4.405443,2.934862,-7.926256,-9.707162,-5.548732,2.456442,-4.303315,7.111762,6.290736,-3.268618,1.330867,4.010376,7.374255,-3.286116,-8.177551],[9.185020,3.270754,1.341691,8.722804,-4.506715,-2.588416,1.942108,-7.567964,-3.581540,-8.924610,0.596359,7.219386,7.396722,-3.091665,1.291727],[6.117117,-7.550915,4.106705,-6.675341,8.574291,-8.420453,-2.254973,-1.476562,-1.014059,-7.643145,-4.993441,8.319077,-0.557630,-8.032728,-4.183128],[4.631985,-5.651137,-4.716648,2.901090,-1.055285,-5.818051,-9.321688,3.771088,0.692568,-7.621736,-9.069841,0.173526,-2.761334,-2.443309,-5.418396],[-5.050309,-7.700018,-9.372974,-4.300093,5.712386,-5.397449,1.881287,-4.613907,-4.000973,-5.544434,8.040159,3.400272,-6.638341,-9.011797,-8.029903],[7.798724,-8.090725,9.070138,6.336253,-5.303484,-2.648863,-2.392285,-2.197239,-0.441581,-0.746038,3.393646,3.933140,6.167677,-9.686778,1.215572],[-7.445512,6.748632,-1.670249,7.166567,-2.849096,0.099137,7.591895,-7.470015,-5.274427,-3.046603,9.964443,2.855752,-0.848343,3.649348,-8.354124],[9.691493,2.715709,-3.025022,8.300450,2.837482,5.529823,-7.409370,-4.843483,-7.842242,-2.403702,-6.935538,-7.000793,-8.682785,-9.303585,6.169186],[-6.458940,8.321135,9.731501,-3.838729,-9.614443,-3.807316,-2.613545,-8.005439,7.526335,8.583508,0.952164,-1.920802,0.684295,-4.600994,-0.626906],[0.496347,-5.830973,-2.613087,-7.741549,-5.281208,6.478871,-9.600799,1.452024,-4.318381,-9.012221,-8.069760,0.080389,5.817019,-8.319520,-6.823186],[-6.877820,9.257520,6.112614,-4.497536,-1.888549,-9.153336,-5.238210,8.252814,1.371630,-6.843985,-5.298645,0.810588,8.061084,-8.222842,-0.642936],[-8.036578,-7.748472,7.832736,-4.691967,0.337240,-4.089347,-3.449285,5.173867,-3.224616,4.850597,-8.363969,-7.131679,-0.010634,-2.712981,8.346280],[6.079091,0.060078,7.920783,4.819668,7.669711,7.353130,-7.144869,-0.515337,1.953910,-0.099439,6.116133,-1.519955,-0.130227,-9.497666,-6.004863]]], dtype = "float32")#candidate|234|(15, 13, 15)|const|float32
uop_235 = relay.sqrt(const_234.astype('float32')) # shape=(15, 13, 15)
var_237 = relay.var("var_237", dtype = "float32", shape = (15, 13, 15))#candidate|237|(15, 13, 15)|var|float32
bop_238 = relay.power(uop_235.astype('float64'), relay.reshape(var_237.astype('float64'), relay.shape_of(uop_235))) # shape=(15, 13, 15)
uop_241 = relay.rsqrt(uop_235.astype('float32')) # shape=(15, 13, 15)
uop_243 = relay.log(uop_241.astype('float32')) # shape=(15, 13, 15)
output = relay.Tuple([bop_238,uop_243,])
output2 = relay.Tuple([bop_238,uop_243,])
func_245 = relay.Function([var_237,], output)
mod['func_245'] = func_245
mod = relay.transform.InferType()(mod)
var_246 = relay.var("var_246", dtype = "float32", shape = (15, 13, 15))#candidate|246|(15, 13, 15)|var|float32
output = func_245(var_246)
func_247 = relay.Function([var_246], output)
mutated_mod['func_247'] = func_247
mutated_mod = relay.transform.InferType()(mutated_mod)
const_249 = relay.const([[-0.382947,6.549233,-6.729350,7.959520,-3.977999,1.539027,-7.073997,4.306800,3.137059,4.800758],[-5.812806,4.808227,-7.686204,4.330451,-8.731893,4.435704,2.872008,-2.345031,6.675065,-8.005471],[-2.110537,1.735520,-6.232286,-9.535192,-3.780809,-7.466303,7.941002,8.522086,8.693092,-8.857948],[3.309144,7.170665,-8.752996,-0.581743,5.340928,-7.890662,-3.330852,-1.898127,-3.971387,5.471454],[5.339405,6.196498,0.610213,-0.731812,8.219681,-6.380725,-5.470370,9.346127,5.498182,-2.105520],[-4.357044,-2.191312,-6.038708,-1.174439,8.319569,-4.518636,4.585811,5.963269,-6.945769,-7.041637],[-5.881839,-6.417336,-5.125005,-6.894118,5.494804,-9.720056,5.052271,7.661911,-6.666794,-4.482563],[5.787323,-4.186961,-6.800094,8.268207,8.592411,-6.406293,-4.646166,-9.939144,-5.286332,-2.500885],[9.812615,2.156003,9.962161,-6.196804,-9.760553,8.456394,7.899682,5.278236,-8.705267,-6.829822],[-0.629099,2.608183,5.558200,9.878763,-6.794272,-1.721796,-9.418398,-8.704082,-8.815717,5.342935],[5.324975,-4.705435,-7.166323,-4.664950,-4.540953,-8.112045,2.279140,4.211741,2.157726,-0.614095],[-8.371751,6.289436,3.199397,-9.533489,1.626532,-9.008060,-1.552651,2.002615,-2.204877,3.107118],[5.386091,4.254154,-5.191782,2.162055,1.997594,3.860849,-4.952546,6.223856,5.219891,1.139404],[9.711791,3.788343,-0.022863,7.928573,3.849426,1.606596,-7.112949,5.677523,8.979716,9.369934],[3.573311,-6.241363,4.254885,8.656208,9.743813,7.219199,-2.818811,3.472359,-8.138875,-1.874475],[0.916950,-1.044967,-9.841254,-3.781282,-1.754609,2.343832,8.124196,-7.304767,1.632792,9.418691]], dtype = "float64")#candidate|249|(16, 10)|const|float64
var_250 = relay.var("var_250", dtype = "float64", shape = (16, 10))#candidate|250|(16, 10)|var|float64
bop_251 = relay.divide(const_249.astype('float64'), relay.reshape(var_250.astype('float64'), relay.shape_of(const_249))) # shape=(16, 10)
uop_254 = relay.sigmoid(var_250.astype('float32')) # shape=(16, 10)
var_256 = relay.var("var_256", dtype = "float32", shape = (16, 10))#candidate|256|(16, 10)|var|float32
bop_257 = relay.add(uop_254.astype('int32'), relay.reshape(var_256.astype('int32'), relay.shape_of(uop_254))) # shape=(16, 10)
uop_260 = relay.atan(bop_257.astype('float32')) # shape=(16, 10)
uop_262 = relay.erf(uop_260.astype('float64')) # shape=(16, 10)
var_264 = relay.var("var_264", dtype = "float32", shape = (16, 10))#candidate|264|(16, 10)|var|float32
bop_265 = relay.bitwise_or(uop_260.astype('uint16'), relay.reshape(var_264.astype('uint16'), relay.shape_of(uop_260))) # shape=(16, 10)
func_90_call = mod.get_global_var('func_90')
func_93_call = mutated_mod.get_global_var('func_93')
var_269 = relay.var("var_269", dtype = "float32", shape = ())#candidate|269|()|var|float32
const_270 = relay.const([5.956730,-7.656765,-9.636019,2.161965,9.156030,-5.664750,4.803532,-1.718859,-1.124460,6.118037,5.965608,-3.495430,-3.739519,8.305119,-9.754318,-3.009901,4.006751,-8.957664,4.197317,-1.417926,-0.968293,-3.744364,8.987215,-6.950913,6.850593,-7.946192,-9.945419,-2.120242,7.026466,9.962812,-8.354889,6.593348,-8.369658,-7.823809,7.285188,-6.675273,7.550039,0.518555,5.011684,-8.734492,-3.775192,6.809540,9.201592,7.350554,7.186259,-2.035522,2.340505,2.112313,-9.977009,8.302331,-4.743479,7.802342,-4.005328,-3.295493,6.722325,2.977279,5.959559,-9.603099,-1.537756,-0.860933,-6.585289,-6.283496,-6.361812,0.131464,6.750116,2.046215,-9.837887,9.799235,7.498846,-3.477489,0.556066,-7.941418,-0.469781,5.681513,3.466717,6.907585,0.721275,8.562954,5.506019,-4.969213,4.691501,8.506010,-4.690210,4.397469,-9.585126,-1.876218,3.684057,4.019953,-0.686660,-1.332576,-2.902254,9.469687,7.923617,7.130693,-8.680440,5.123668,2.965740,7.606941,-8.790597,-8.736686,9.657439,-7.864583,6.529891,-3.304253,-8.451840], dtype = "float64")#candidate|270|(105,)|const|float64
call_268 = relay.TupleGetItem(func_90_call(relay.reshape(var_269.astype('float32'), []), relay.reshape(const_270.astype('float64'), [15, 7]), ), 1)
call_271 = relay.TupleGetItem(func_93_call(relay.reshape(var_269.astype('float32'), []), relay.reshape(const_270.astype('float64'), [15, 7]), ), 1)
bop_272 = relay.add(uop_262.astype('float32'), relay.reshape(bop_257.astype('float32'), relay.shape_of(uop_262))) # shape=(16, 10)
uop_275 = relay.atanh(var_250.astype('float64')) # shape=(16, 10)
bop_277 = relay.less_equal(uop_262.astype('bool'), relay.reshape(bop_257.astype('bool'), relay.shape_of(uop_262))) # shape=(16, 10)
uop_280 = relay.rsqrt(uop_262.astype('float32')) # shape=(16, 10)
bop_282 = relay.greater_equal(uop_280.astype('bool'), relay.reshape(uop_260.astype('bool'), relay.shape_of(uop_280))) # shape=(16, 10)
func_109_call = mod.get_global_var('func_109')
func_111_call = mutated_mod.get_global_var('func_111')
const_286 = relay.const([[-0.595795,-0.175101],[-1.872849,2.132860],[-5.713855,4.529882],[-5.052623,7.332215],[-8.478737,-6.451268],[-9.975968,0.238427],[6.604476,4.370951],[6.895090,2.327869],[-8.026043,3.877130],[1.582631,2.255783],[-7.698876,4.646301],[-5.667970,-2.707393],[-4.592490,0.218262],[4.483634,-3.448739],[9.143139,2.587489],[5.431324,-6.042670],[-0.499267,-4.242285],[-6.669542,3.582436],[1.031905,7.779197],[-5.098281,-0.494962],[5.696312,2.743631],[-3.263763,7.360084],[7.345087,-4.437448],[8.855900,-1.626868],[-6.816458,-2.069980],[-4.537538,7.445027],[-5.341878,0.728308],[-9.519477,1.810136],[-6.477142,3.724202],[-3.731387,-5.940739]], dtype = "float32")#candidate|286|(30, 2)|const|float32
call_285 = relay.TupleGetItem(func_109_call(relay.reshape(const_286.astype('float32'), [6, 10])), 2)
call_287 = relay.TupleGetItem(func_111_call(relay.reshape(const_286.astype('float32'), [6, 10])), 2)
bop_288 = relay.less_equal(bop_282.astype('bool'), relay.reshape(bop_277.astype('bool'), relay.shape_of(bop_282))) # shape=(16, 10)
var_291 = relay.var("var_291", dtype = "bool", shape = (16, 10))#candidate|291|(16, 10)|var|bool
bop_292 = relay.subtract(bop_282.astype('int32'), relay.reshape(var_291.astype('int32'), relay.shape_of(bop_282))) # shape=(16, 10)
uop_295 = relay.exp(uop_275.astype('float32')) # shape=(16, 10)
uop_297 = relay.cos(uop_262.astype('float64')) # shape=(16, 10)
bop_299 = relay.less_equal(bop_257.astype('bool'), relay.reshape(uop_254.astype('bool'), relay.shape_of(bop_257))) # shape=(16, 10)
bop_302 = relay.logical_or(uop_280.astype('bool'), call_285.astype('bool')) # shape=(16, 10)
bop_305 = relay.logical_or(uop_280.astype('bool'), call_287.astype('bool')) # shape=(16, 10)
uop_306 = relay.sqrt(bop_288.astype('float64')) # shape=(16, 10)
uop_308 = relay.exp(uop_262.astype('float32')) # shape=(16, 10)
bop_310 = relay.multiply(uop_306.astype('int8'), call_285.astype('int8')) # shape=(16, 10)
bop_313 = relay.multiply(uop_306.astype('int8'), call_287.astype('int8')) # shape=(16, 10)
uop_314 = relay.sin(bop_288.astype('float32')) # shape=(16, 10)
func_245_call = mod.get_global_var('func_245')
func_247_call = mutated_mod.get_global_var('func_247')
var_317 = relay.var("var_317", dtype = "float32", shape = (2925,))#candidate|317|(2925,)|var|float32
call_316 = relay.TupleGetItem(func_245_call(relay.reshape(var_317.astype('float32'), [15, 13, 15])), 1)
call_318 = relay.TupleGetItem(func_247_call(relay.reshape(var_317.astype('float32'), [15, 13, 15])), 1)
bop_319 = relay.greater(uop_314.astype('bool'), relay.reshape(uop_262.astype('bool'), relay.shape_of(uop_314))) # shape=(16, 10)
var_322 = relay.var("var_322", dtype = "float64", shape = (16, 10))#candidate|322|(16, 10)|var|float64
bop_323 = relay.less(uop_306.astype('bool'), relay.reshape(var_322.astype('bool'), relay.shape_of(uop_306))) # shape=(16, 10)
func_21_call = mod.get_global_var('func_21')
func_22_call = mutated_mod.get_global_var('func_22')
call_326 = func_21_call()
call_327 = func_21_call()
bop_328 = relay.floor_mod(bop_310.astype('float32'), relay.reshape(bop_265.astype('float32'), relay.shape_of(bop_310))) # shape=(16, 10)
bop_331 = relay.floor_mod(bop_313.astype('float32'), relay.reshape(bop_265.astype('float32'), relay.shape_of(bop_313))) # shape=(16, 10)
uop_332 = relay.atan(bop_272.astype('float64')) # shape=(16, 10)
var_334 = relay.var("var_334", dtype = "int8", shape = (16, 10))#candidate|334|(16, 10)|var|int8
bop_335 = relay.logical_and(bop_310.astype('bool'), relay.reshape(var_334.astype('bool'), relay.shape_of(bop_310))) # shape=(16, 10)
bop_338 = relay.logical_and(bop_313.astype('bool'), relay.reshape(var_334.astype('bool'), relay.shape_of(bop_313))) # shape=(16, 10)
bop_339 = relay.subtract(bop_277.astype('int32'), relay.reshape(bop_328.astype('int32'), relay.shape_of(bop_277))) # shape=(16, 10)
bop_342 = relay.subtract(bop_277.astype('int32'), relay.reshape(bop_331.astype('int32'), relay.shape_of(bop_277))) # shape=(16, 10)
uop_343 = relay.atan(bop_310.astype('float64')) # shape=(16, 10)
uop_345 = relay.atan(bop_313.astype('float64')) # shape=(16, 10)
bop_346 = relay.maximum(uop_343.astype('int8'), relay.reshape(var_256.astype('int8'), relay.shape_of(uop_343))) # shape=(16, 10)
bop_349 = relay.maximum(uop_345.astype('int8'), relay.reshape(var_256.astype('int8'), relay.shape_of(uop_345))) # shape=(16, 10)
bop_350 = relay.bitwise_and(bop_346.astype('uint8'), relay.reshape(bop_251.astype('uint8'), relay.shape_of(bop_346))) # shape=(16, 10)
bop_353 = relay.bitwise_and(bop_349.astype('uint8'), relay.reshape(bop_251.astype('uint8'), relay.shape_of(bop_349))) # shape=(16, 10)
uop_354 = relay.cosh(bop_319.astype('float64')) # shape=(16, 10)
uop_356 = relay.atan(uop_297.astype('float32')) # shape=(16, 10)
output = relay.Tuple([call_268,var_269,const_270,const_286,bop_292,uop_295,bop_299,bop_302,uop_308,call_316,var_317,bop_323,call_326,uop_332,bop_335,bop_339,bop_350,uop_354,uop_356,])
output2 = relay.Tuple([call_271,var_269,const_270,const_286,bop_292,uop_295,bop_299,bop_305,uop_308,call_318,var_317,bop_323,call_327,uop_332,bop_338,bop_342,bop_353,uop_354,uop_356,])
func_358 = relay.Function([var_250,var_256,var_264,var_269,var_291,var_317,var_322,var_334,], output)
mod['func_358'] = func_358
mod = relay.transform.InferType()(mod)
var_359 = relay.var("var_359", dtype = "float64", shape = (16, 10))#candidate|359|(16, 10)|var|float64
var_360 = relay.var("var_360", dtype = "float32", shape = (16, 10))#candidate|360|(16, 10)|var|float32
var_361 = relay.var("var_361", dtype = "float32", shape = (16, 10))#candidate|361|(16, 10)|var|float32
var_362 = relay.var("var_362", dtype = "float32", shape = ())#candidate|362|()|var|float32
var_363 = relay.var("var_363", dtype = "bool", shape = (16, 10))#candidate|363|(16, 10)|var|bool
var_364 = relay.var("var_364", dtype = "float32", shape = (2925,))#candidate|364|(2925,)|var|float32
var_365 = relay.var("var_365", dtype = "float64", shape = (16, 10))#candidate|365|(16, 10)|var|float64
var_366 = relay.var("var_366", dtype = "int8", shape = (16, 10))#candidate|366|(16, 10)|var|int8
output = func_358(var_359,var_360,var_361,var_362,var_363,var_364,var_365,var_366,)
func_367 = relay.Function([var_359,var_360,var_361,var_362,var_363,var_364,var_365,var_366,], output)
mutated_mod['func_367'] = func_367
mutated_mod = relay.transform.InferType()(mutated_mod)
var_369 = relay.var("var_369", dtype = "float64", shape = (7, 15, 12))#candidate|369|(7, 15, 12)|var|float64
uop_370 = relay.cosh(var_369.astype('float64')) # shape=(7, 15, 12)
output = uop_370
output2 = uop_370
func_372 = relay.Function([var_369,], output)
mod['func_372'] = func_372
mod = relay.transform.InferType()(mod)
var_373 = relay.var("var_373", dtype = "float64", shape = (7, 15, 12))#candidate|373|(7, 15, 12)|var|float64
output = func_372(var_373)
func_374 = relay.Function([var_373], output)
mutated_mod['func_374'] = func_374
mutated_mod = relay.transform.InferType()(mutated_mod)
var_376 = relay.var("var_376", dtype = "float32", shape = (15, 3, 7))#candidate|376|(15, 3, 7)|var|float32
uop_377 = relay.erf(var_376.astype('float32')) # shape=(15, 3, 7)
output = uop_377
output2 = uop_377
F = relay.Function([var_376,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_376,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
	relay.transform.DefuseOps(),
	relay.transform.SimplifyExpr(),
	relay.transform.InferType(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_376= np.array([[[2.108798,-7.741635,-1.251805,0.552182,7.460755,9.395851,0.531294],[4.307105,-3.649754,-4.051922,9.851321,-2.770473,8.122160,-8.197976],[4.801714,-1.931831,-8.986059,-5.305457,9.290907,-1.572158,-7.832713]],[[-6.944792,3.155618,9.430798,-5.043591,9.630954,-8.479577,7.520934],[7.038523,-6.690521,9.902618,6.815028,5.242013,3.824601,-0.496316],[-7.132606,0.710366,-2.597447,-1.929052,6.553870,9.515371,3.714055]],[[-0.317803,7.077164,-8.579030,-3.100916,-1.791519,8.331992,-1.027789],[-2.496843,-1.087150,8.147547,9.048769,-2.544966,2.970246,-8.576320],[-3.912791,-9.950931,-8.700955,-5.471453,0.485676,9.615965,-5.602032]],[[-1.751620,3.623227,9.133811,0.734786,5.090435,-1.634197,-0.607274],[0.496433,-7.702798,-8.566097,8.307856,-1.351655,6.809885,-7.619463],[3.511766,2.979689,0.607985,6.326950,-2.585960,2.468291,0.631491]],[[4.869306,-7.271026,1.370708,-8.877522,4.678735,-0.548723,1.190908],[-4.425610,-7.551126,3.346042,7.751200,-0.635588,5.122110,4.531844],[0.501557,1.397080,-9.153482,2.083187,-0.679461,-0.472375,2.044806]],[[-2.442038,-5.050868,6.196245,-6.000065,5.503368,2.852895,-5.370088],[-7.130949,-9.329839,5.499641,2.593687,6.638963,2.841339,-4.476141],[1.911024,-2.558417,3.720680,-3.964707,-5.050978,5.965442,-4.904862]],[[8.843254,9.509941,-5.915689,2.032687,3.332381,-2.636123,-7.532419],[3.286042,0.274553,-7.331008,-2.607773,-6.877682,-4.944756,7.655809],[-3.753259,0.777613,8.482616,-0.148685,-2.235708,6.335785,-9.014929]],[[-8.613725,0.723940,3.504830,-7.323593,-4.587324,0.875796,-7.173251],[3.963458,2.677055,3.535171,-0.558367,-2.347166,7.585970,-1.877043],[-5.557429,-4.266589,9.200592,-2.389589,-3.591202,7.794990,2.922220]],[[8.524487,-4.098768,-7.192581,4.552645,-1.765944,-2.552649,-2.648103],[6.025463,-3.335145,8.950488,-2.445915,-3.471395,7.096196,-9.993752],[7.047892,-0.246968,8.778854,-3.247767,-5.583554,0.319679,4.573218]],[[6.901699,4.867150,-9.311050,8.980051,-9.824464,3.777379,-4.857001],[5.728968,5.518533,3.925208,-2.218938,-3.237090,-4.204904,-6.878735],[-0.320607,6.370155,0.002001,-1.098927,-4.728431,2.838391,-2.774381]],[[9.094375,2.750162,0.059150,0.288032,-2.436575,3.630940,-2.751454],[-6.256279,5.628733,-6.522202,-4.754035,-3.437627,-6.848285,-8.798242],[5.943028,-0.679124,-7.619959,-1.517383,-2.128420,-3.142524,5.643525]],[[4.705075,3.895268,-0.565181,-6.274240,1.341141,-0.103797,-6.463014],[-5.848968,-7.295760,6.594444,-4.010593,-8.803280,4.355253,-8.631792],[-8.674926,4.049392,-9.399001,5.613231,6.270650,7.275373,-8.565362]],[[-8.823653,-7.128969,-7.423624,5.411388,6.879225,4.981472,-2.932291],[-2.295578,-6.675765,-0.393310,1.824763,-5.410554,7.515859,-1.579389],[-8.502972,-2.691021,9.475818,4.157552,1.136094,7.069290,-3.291151]],[[-4.972741,3.497168,4.639877,4.200359,0.974679,-0.413777,5.102380],[-2.376563,6.307401,6.502830,3.007481,-6.152396,-3.331742,0.604870],[3.592694,-9.960106,-5.240728,-1.661921,2.074636,8.559946,-3.008177]],[[-9.811939,2.123765,-4.428024,8.786213,-1.848136,-4.467457,4.592668],[-4.464587,6.808887,-4.880154,-6.398403,4.336596,-2.749537,-3.643721],[-5.771504,-0.235343,0.468814,0.058697,-0.402924,7.669305,2.822979]]], dtype='float32')
module1.set_input('var_376', input_376)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_376, )
res3 = intrp3.evaluate()(input_376, )
res4 = intrp4.evaluate()(input_376, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input('var_376', input_376)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_376, )
res7 = intrp7.evaluate()(input_376, )
res8 = intrp8.evaluate()(input_376, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input('var_376', input_376)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_376, )
res11 = intrp11.evaluate()(input_376, )
res12 = intrp12.evaluate()(input_376, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input('var_376', input_376)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_376, )
res15 = intrp15.evaluate()(input_376, )
res16 = intrp16.evaluate()(input_376, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input('var_376', input_376)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_376, )
res19 = intrp19.evaluate()(input_376, )
res20 = intrp20.evaluate()(input_376, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input('var_376', input_376)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_376, )
res23 = intrp23.evaluate()(input_376, )
res24 = intrp24.evaluate()(input_376, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''43: TVMFuncCall
42: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
41: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
40: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
39: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
38: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
37: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
36: tvm::transform::Pass::operator()(tvm::IRModule) const
35: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
34: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
31: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
30: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
29: tvm::transform::Pass::operator()(tvm::IRModule) const
28: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
27: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
26: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
25: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
24: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
23: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
22: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
21: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
20: _ZN3tvm5relay9transform22Devic
19: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
16: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
15: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
12: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
9: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
8: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
7: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
6: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
5: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
3: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
2: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
1: tvm::relay::tec::PrimFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
0: tvm::relay::tec::ScheduleBuilder::Create(tvm::relay::Function const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)

'''