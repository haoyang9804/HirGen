import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (7,))#candidate|0|(7,)|var|float32
var_1 = relay.var("var_1", dtype = "float32", shape = (7,))#candidate|1|(7,)|var|float32
bop_2 = relay.floor_divide(var_0.astype('float32'), relay.reshape(var_1.astype('float32'), relay.shape_of(var_0))) # shape=(7,)
bop_5 = relay.bitwise_and(bop_2.astype('uint16'), relay.reshape(var_0.astype('uint16'), relay.shape_of(bop_2))) # shape=(7,)
uop_8 = relay.acos(bop_2.astype('float64')) # shape=(7,)
uop_10 = relay.sin(uop_8.astype('float32')) # shape=(7,)
bop_12 = relay.bitwise_and(uop_8.astype('uint16'), relay.reshape(bop_2.astype('uint16'), relay.shape_of(uop_8))) # shape=(7,)
var_15 = relay.var("var_15", dtype = "float32", shape = (7,))#candidate|15|(7,)|var|float32
bop_16 = relay.bitwise_xor(uop_10.astype('uint64'), relay.reshape(var_15.astype('uint64'), relay.shape_of(uop_10))) # shape=(7,)
bop_19 = relay.logical_or(uop_10.astype('bool'), relay.reshape(uop_8.astype('bool'), relay.shape_of(uop_10))) # shape=(7,)
uop_22 = relay.log2(bop_16.astype('float32')) # shape=(7,)
uop_24 = relay.asin(uop_22.astype('float64')) # shape=(7,)
uop_26 = relay.cosh(uop_24.astype('float32')) # shape=(7,)
uop_28 = relay.rsqrt(uop_24.astype('float64')) # shape=(7,)
bop_30 = relay.floor_mod(uop_24.astype('float32'), relay.reshape(var_1.astype('float32'), relay.shape_of(uop_24))) # shape=(7,)
const_33 = relay.const([-8,-6,2,7,-2,4,8], dtype = "uint16")#candidate|33|(7,)|const|uint16
bop_34 = relay.bitwise_and(bop_12.astype('uint8'), relay.reshape(const_33.astype('uint8'), relay.shape_of(bop_12))) # shape=(7,)
bop_37 = relay.bitwise_or(uop_26.astype('uint64'), relay.reshape(var_0.astype('uint64'), relay.shape_of(uop_26))) # shape=(7,)
var_40 = relay.var("var_40", dtype = "float32", shape = (7,))#candidate|40|(7,)|var|float32
bop_41 = relay.minimum(bop_30.astype('uint32'), relay.reshape(var_40.astype('uint32'), relay.shape_of(bop_30))) # shape=(7,)
bop_44 = relay.greater(uop_22.astype('bool'), relay.reshape(uop_8.astype('bool'), relay.shape_of(uop_22))) # shape=(7,)
bop_47 = relay.floor_mod(bop_37.astype('float64'), relay.reshape(bop_5.astype('float64'), relay.shape_of(bop_37))) # shape=(7,)
uop_50 = relay.atanh(bop_37.astype('float32')) # shape=(7,)
bop_52 = relay.maximum(bop_37.astype('int32'), relay.reshape(uop_50.astype('int32'), relay.shape_of(bop_37))) # shape=(7,)
bop_55 = relay.less_equal(uop_50.astype('bool'), relay.reshape(bop_47.astype('bool'), relay.shape_of(uop_50))) # shape=(7,)
uop_58 = relay.sigmoid(bop_37.astype('float32')) # shape=(7,)
uop_60 = relay.sigmoid(bop_41.astype('float64')) # shape=(7,)
bop_62 = relay.right_shift(uop_58.astype('int16'), relay.reshape(bop_37.astype('int16'), relay.shape_of(uop_58))) # shape=(7,)
bop_65 = relay.right_shift(bop_62.astype('uint64'), relay.reshape(var_1.astype('uint64'), relay.shape_of(bop_62))) # shape=(7,)
uop_68 = relay.asin(bop_16.astype('float64')) # shape=(7,)
uop_70 = relay.sin(bop_55.astype('float32')) # shape=(7,)
output = relay.Tuple([bop_19,uop_28,bop_34,bop_44,bop_52,uop_60,bop_65,uop_68,uop_70,])
output2 = relay.Tuple([bop_19,uop_28,bop_34,bop_44,bop_52,uop_60,bop_65,uop_68,uop_70,])
func_72 = relay.Function([var_0,var_1,var_15,var_40,], output)
mod['func_72'] = func_72
mod = relay.transform.InferType()(mod)
var_73 = relay.var("var_73", dtype = "float32", shape = (7,))#candidate|73|(7,)|var|float32
var_74 = relay.var("var_74", dtype = "float32", shape = (7,))#candidate|74|(7,)|var|float32
var_75 = relay.var("var_75", dtype = "float32", shape = (7,))#candidate|75|(7,)|var|float32
var_76 = relay.var("var_76", dtype = "float32", shape = (7,))#candidate|76|(7,)|var|float32
output = func_72(var_73,var_74,var_75,var_76,)
func_77 = relay.Function([var_73,var_74,var_75,var_76,], output)
mutated_mod['func_77'] = func_77
mutated_mod = relay.transform.InferType()(mutated_mod)
var_79 = relay.var("var_79", dtype = "float64", shape = ())#candidate|79|()|var|float64
var_80 = relay.var("var_80", dtype = "float64", shape = (15,))#candidate|80|(15,)|var|float64
bop_81 = relay.divide(var_79.astype('float64'), var_80.astype('float64')) # shape=(15,)
output = bop_81
output2 = bop_81
func_84 = relay.Function([var_79,var_80,], output)
mod['func_84'] = func_84
mod = relay.transform.InferType()(mod)
mutated_mod['func_84'] = func_84
mutated_mod = relay.transform.InferType()(mutated_mod)
func_84_call = mutated_mod.get_global_var('func_84')
var_86 = relay.var("var_86", dtype = "float64", shape = ())#candidate|86|()|var|float64
var_87 = relay.var("var_87", dtype = "float64", shape = (15,))#candidate|87|(15,)|var|float64
call_85 = func_84_call(var_86,var_87,)
output = call_85
func_88 = relay.Function([var_86,var_87,], output)
mutated_mod['func_88'] = func_88
mutated_mod = relay.transform.InferType()(mutated_mod)
var_90 = relay.var("var_90", dtype = "float64", shape = (12,))#candidate|90|(12,)|var|float64
var_91 = relay.var("var_91", dtype = "float64", shape = (12,))#candidate|91|(12,)|var|float64
bop_92 = relay.multiply(var_90.astype('float64'), relay.reshape(var_91.astype('float64'), relay.shape_of(var_90))) # shape=(12,)
bop_95 = relay.not_equal(bop_92.astype('bool'), relay.reshape(var_90.astype('bool'), relay.shape_of(bop_92))) # shape=(12,)
bop_98 = relay.bitwise_and(bop_95.astype('uint64'), relay.reshape(var_90.astype('uint64'), relay.shape_of(bop_95))) # shape=(12,)
bop_101 = relay.logical_or(bop_95.astype('bool'), relay.reshape(var_91.astype('bool'), relay.shape_of(bop_95))) # shape=(12,)
uop_104 = relay.sin(bop_95.astype('float64')) # shape=(12,)
bop_106 = relay.power(var_91.astype('float64'), relay.reshape(bop_92.astype('float64'), relay.shape_of(var_91))) # shape=(12,)
uop_109 = relay.tan(bop_106.astype('float32')) # shape=(12,)
bop_111 = relay.left_shift(uop_109.astype('int32'), relay.reshape(var_90.astype('int32'), relay.shape_of(uop_109))) # shape=(12,)
uop_114 = relay.cos(uop_104.astype('float64')) # shape=(12,)
bop_116 = relay.floor_divide(uop_114.astype('float64'), relay.reshape(var_90.astype('float64'), relay.shape_of(uop_114))) # shape=(12,)
bop_119 = relay.logical_or(bop_116.astype('bool'), relay.reshape(var_90.astype('bool'), relay.shape_of(bop_116))) # shape=(12,)
var_122 = relay.var("var_122", dtype = "bool", shape = (12,))#candidate|122|(12,)|var|bool
bop_123 = relay.less(bop_95.astype('bool'), relay.reshape(var_122.astype('bool'), relay.shape_of(bop_95))) # shape=(12,)
bop_126 = relay.right_shift(bop_119.astype('uint64'), relay.reshape(bop_98.astype('uint64'), relay.shape_of(bop_119))) # shape=(12,)
bop_129 = relay.multiply(uop_104.astype('int64'), relay.reshape(var_122.astype('int64'), relay.shape_of(uop_104))) # shape=(12,)
bop_132 = relay.bitwise_and(var_91.astype('int8'), relay.reshape(bop_123.astype('int8'), relay.shape_of(var_91))) # shape=(12,)
func_72_call = mod.get_global_var('func_72')
func_77_call = mutated_mod.get_global_var('func_77')
var_136 = relay.var("var_136", dtype = "float32", shape = (7, 1))#candidate|136|(7, 1)|var|float32
call_135 = relay.TupleGetItem(func_72_call(relay.reshape(var_136.astype('float32'), [7,]), relay.reshape(var_136.astype('float32'), [7,]), relay.reshape(var_136.astype('float32'), [7,]), relay.reshape(var_136.astype('float32'), [7,]), ), 8)
call_137 = relay.TupleGetItem(func_77_call(relay.reshape(var_136.astype('float32'), [7,]), relay.reshape(var_136.astype('float32'), [7,]), relay.reshape(var_136.astype('float32'), [7,]), relay.reshape(var_136.astype('float32'), [7,]), ), 8)
bop_138 = relay.power(bop_126.astype('float64'), relay.reshape(bop_129.astype('float64'), relay.shape_of(bop_126))) # shape=(12,)
uop_141 = relay.atanh(uop_114.astype('float64')) # shape=(12,)
uop_143 = relay.sinh(uop_141.astype('float32')) # shape=(12,)
uop_145 = relay.sqrt(uop_143.astype('float64')) # shape=(12,)
uop_147 = relay.cos(uop_143.astype('float64')) # shape=(12,)
bop_149 = relay.add(uop_145.astype('float32'), relay.reshape(bop_129.astype('float32'), relay.shape_of(uop_145))) # shape=(12,)
var_152 = relay.var("var_152", dtype = "float32", shape = (12,))#candidate|152|(12,)|var|float32
bop_153 = relay.right_shift(bop_149.astype('uint8'), relay.reshape(var_152.astype('uint8'), relay.shape_of(bop_149))) # shape=(12,)
func_72_call = mod.get_global_var('func_72')
func_77_call = mutated_mod.get_global_var('func_77')
call_156 = relay.TupleGetItem(func_72_call(relay.reshape(call_135.astype('float32'), [7,]), relay.reshape(var_136.astype('float32'), [7,]), relay.reshape(call_135.astype('float32'), [7,]), relay.reshape(var_136.astype('float32'), [7,]), ), 6)
call_157 = relay.TupleGetItem(func_77_call(relay.reshape(call_135.astype('float32'), [7,]), relay.reshape(var_136.astype('float32'), [7,]), relay.reshape(call_135.astype('float32'), [7,]), relay.reshape(var_136.astype('float32'), [7,]), ), 6)
bop_158 = relay.greater_equal(bop_149.astype('bool'), relay.reshape(bop_92.astype('bool'), relay.shape_of(bop_149))) # shape=(12,)
var_161 = relay.var("var_161", dtype = "float32", shape = (12,))#candidate|161|(12,)|var|float32
bop_162 = relay.mod(uop_143.astype('float32'), relay.reshape(var_161.astype('float32'), relay.shape_of(uop_143))) # shape=(12,)
uop_165 = relay.exp(bop_162.astype('float32')) # shape=(12,)
uop_167 = relay.atan(uop_141.astype('float64')) # shape=(12,)
bop_169 = relay.add(uop_165.astype('int16'), relay.reshape(uop_109.astype('int16'), relay.shape_of(uop_165))) # shape=(12,)
uop_172 = relay.acosh(uop_165.astype('float64')) # shape=(12,)
var_174 = relay.var("var_174", dtype = "float64", shape = (12,))#candidate|174|(12,)|var|float64
bop_175 = relay.floor_mod(uop_172.astype('float32'), relay.reshape(var_174.astype('float32'), relay.shape_of(uop_172))) # shape=(12,)
bop_178 = relay.bitwise_xor(bop_175.astype('int32'), relay.reshape(bop_158.astype('int32'), relay.shape_of(bop_175))) # shape=(12,)
bop_181 = relay.greater_equal(call_135.astype('bool'), relay.reshape(call_156.astype('bool'), relay.shape_of(call_135))) # shape=(7,)
bop_184 = relay.greater_equal(call_137.astype('bool'), relay.reshape(call_157.astype('bool'), relay.shape_of(call_137))) # shape=(7,)
uop_185 = relay.sinh(bop_175.astype('float64')) # shape=(12,)
bop_187 = relay.mod(uop_185.astype('float32'), relay.reshape(bop_178.astype('float32'), relay.shape_of(uop_185))) # shape=(12,)
const_190 = relay.const([-1.656844,-3.544800,1.202373,2.943829,-6.956544,-3.916039,0.946169,7.817176,-6.274107,-5.204100,1.247409,-4.023386], dtype = "float32")#candidate|190|(12,)|const|float32
bop_191 = relay.less_equal(bop_187.astype('bool'), relay.reshape(const_190.astype('bool'), relay.shape_of(bop_187))) # shape=(12,)
func_84_call = mod.get_global_var('func_84')
func_88_call = mutated_mod.get_global_var('func_88')
const_195 = relay.const(-0.040219, dtype = "float64")#candidate|195|()|const|float64
const_196 = relay.const([[-9.021595,9.686744,-8.313104],[-6.492853,0.783670,-5.056889],[-2.310990,4.965899,1.444053],[-0.672324,-8.275858,-0.176075],[-2.135603,-8.030905,3.537823]], dtype = "float64")#candidate|196|(5, 3)|const|float64
call_194 = func_84_call(relay.reshape(const_195.astype('float64'), []), relay.reshape(const_196.astype('float64'), [15,]), )
call_197 = func_84_call(relay.reshape(const_195.astype('float64'), []), relay.reshape(const_196.astype('float64'), [15,]), )
uop_198 = relay.log2(bop_187.astype('float64')) # shape=(12,)
output = relay.Tuple([bop_101,bop_111,bop_132,var_136,bop_138,uop_147,bop_153,uop_167,bop_169,bop_181,bop_191,call_194,const_195,const_196,uop_198,])
output2 = relay.Tuple([bop_101,bop_111,bop_132,var_136,bop_138,uop_147,bop_153,uop_167,bop_169,bop_184,bop_191,call_197,const_195,const_196,uop_198,])
func_200 = relay.Function([var_90,var_91,var_122,var_136,var_152,var_161,var_174,], output)
mod['func_200'] = func_200
mod = relay.transform.InferType()(mod)
var_201 = relay.var("var_201", dtype = "float64", shape = (12,))#candidate|201|(12,)|var|float64
var_202 = relay.var("var_202", dtype = "float64", shape = (12,))#candidate|202|(12,)|var|float64
var_203 = relay.var("var_203", dtype = "bool", shape = (12,))#candidate|203|(12,)|var|bool
var_204 = relay.var("var_204", dtype = "float32", shape = (7, 1))#candidate|204|(7, 1)|var|float32
var_205 = relay.var("var_205", dtype = "float32", shape = (12,))#candidate|205|(12,)|var|float32
var_206 = relay.var("var_206", dtype = "float32", shape = (12,))#candidate|206|(12,)|var|float32
var_207 = relay.var("var_207", dtype = "float64", shape = (12,))#candidate|207|(12,)|var|float64
output = func_200(var_201,var_202,var_203,var_204,var_205,var_206,var_207,)
func_208 = relay.Function([var_201,var_202,var_203,var_204,var_205,var_206,var_207,], output)
mutated_mod['func_208'] = func_208
mutated_mod = relay.transform.InferType()(mutated_mod)
var_210 = relay.var("var_210", dtype = "float64", shape = (9, 3))#candidate|210|(9, 3)|var|float64
uop_211 = relay.asinh(var_210.astype('float64')) # shape=(9, 3)
uop_213 = relay.sin(var_210.astype('float64')) # shape=(9, 3)
var_215 = relay.var("var_215", dtype = "float64", shape = (9, 3))#candidate|215|(9, 3)|var|float64
bop_216 = relay.less(uop_213.astype('bool'), relay.reshape(var_215.astype('bool'), relay.shape_of(uop_213))) # shape=(9, 3)
bop_219 = relay.logical_and(uop_211.astype('bool'), relay.reshape(var_210.astype('bool'), relay.shape_of(uop_211))) # shape=(9, 3)
var_222 = relay.var("var_222", dtype = "bool", shape = (9, 3))#candidate|222|(9, 3)|var|bool
bop_223 = relay.less(bop_216.astype('bool'), relay.reshape(var_222.astype('bool'), relay.shape_of(bop_216))) # shape=(9, 3)
uop_226 = relay.log10(var_215.astype('float32')) # shape=(9, 3)
bop_228 = relay.subtract(var_215.astype('uint32'), relay.reshape(bop_223.astype('uint32'), relay.shape_of(var_215))) # shape=(9, 3)
bop_231 = relay.floor_divide(bop_228.astype('float32'), relay.reshape(uop_211.astype('float32'), relay.shape_of(bop_228))) # shape=(9, 3)
bop_234 = relay.power(bop_228.astype('float32'), relay.reshape(uop_213.astype('float32'), relay.shape_of(bop_228))) # shape=(9, 3)
bop_237 = relay.maximum(bop_231.astype('int16'), relay.reshape(uop_213.astype('int16'), relay.shape_of(bop_231))) # shape=(9, 3)
output = relay.Tuple([bop_219,uop_226,bop_234,bop_237,])
output2 = relay.Tuple([bop_219,uop_226,bop_234,bop_237,])
func_240 = relay.Function([var_210,var_215,var_222,], output)
mod['func_240'] = func_240
mod = relay.transform.InferType()(mod)
mutated_mod['func_240'] = func_240
mutated_mod = relay.transform.InferType()(mutated_mod)
func_240_call = mutated_mod.get_global_var('func_240')
var_242 = relay.var("var_242", dtype = "float64", shape = (9, 3))#candidate|242|(9, 3)|var|float64
var_243 = relay.var("var_243", dtype = "float64", shape = (9, 3))#candidate|243|(9, 3)|var|float64
var_244 = relay.var("var_244", dtype = "bool", shape = (9, 3))#candidate|244|(9, 3)|var|bool
call_241 = func_240_call(var_242,var_243,var_244,)
output = call_241
func_245 = relay.Function([var_242,var_243,var_244,], output)
mutated_mod['func_245'] = func_245
mutated_mod = relay.transform.InferType()(mutated_mod)
const_247 = relay.const([[False,False,True,True],[True,False,True,False],[True,True,False,False],[True,False,True,True],[False,False,False,False],[True,True,True,False],[False,False,False,True],[True,True,True,True],[True,False,False,False],[False,True,False,True],[False,True,True,False],[True,True,True,False],[True,False,False,False],[True,False,False,False]], dtype = "bool")#candidate|247|(14, 4)|const|bool
var_248 = relay.var("var_248", dtype = "bool", shape = (14, 4))#candidate|248|(14, 4)|var|bool
bop_249 = relay.logical_or(const_247.astype('bool'), relay.reshape(var_248.astype('bool'), relay.shape_of(const_247))) # shape=(14, 4)
bop_252 = relay.maximum(const_247.astype('uint16'), relay.reshape(var_248.astype('uint16'), relay.shape_of(const_247))) # shape=(14, 4)
uop_255 = relay.exp(bop_252.astype('float32')) # shape=(14, 4)
uop_257 = relay.asinh(uop_255.astype('float32')) # shape=(14, 4)
output = relay.Tuple([bop_249,uop_257,])
output2 = relay.Tuple([bop_249,uop_257,])
func_259 = relay.Function([var_248,], output)
mod['func_259'] = func_259
mod = relay.transform.InferType()(mod)
mutated_mod['func_259'] = func_259
mutated_mod = relay.transform.InferType()(mutated_mod)
var_260 = relay.var("var_260", dtype = "bool", shape = (14, 4))#candidate|260|(14, 4)|var|bool
func_259_call = mutated_mod.get_global_var('func_259')
call_261 = func_259_call(var_260)
output = call_261
func_262 = relay.Function([var_260], output)
mutated_mod['func_262'] = func_262
mutated_mod = relay.transform.InferType()(mutated_mod)
var_264 = relay.var("var_264", dtype = "float64", shape = (14, 1, 9))#candidate|264|(14, 1, 9)|var|float64
uop_265 = relay.log2(var_264.astype('float64')) # shape=(14, 1, 9)
uop_267 = relay.atanh(uop_265.astype('float64')) # shape=(14, 1, 9)
var_269 = relay.var("var_269", dtype = "float64", shape = (14, 16, 9))#candidate|269|(14, 16, 9)|var|float64
bop_270 = relay.logical_and(uop_265.astype('bool'), var_269.astype('bool')) # shape=(14, 16, 9)
bop_273 = relay.less(uop_267.astype('bool'), relay.reshape(var_264.astype('bool'), relay.shape_of(uop_267))) # shape=(14, 1, 9)
var_276 = relay.var("var_276", dtype = "float64", shape = (14, 5, 9))#candidate|276|(14, 5, 9)|var|float64
bop_277 = relay.logical_xor(uop_267.astype('uint32'), var_276.astype('uint32')) # shape=(14, 5, 9)
var_280 = relay.var("var_280", dtype = "bool", shape = (14, 16, 9))#candidate|280|(14, 16, 9)|var|bool
bop_281 = relay.floor_mod(bop_270.astype('float32'), relay.reshape(var_280.astype('float32'), relay.shape_of(bop_270))) # shape=(14, 16, 9)
uop_284 = relay.log2(bop_273.astype('float64')) # shape=(14, 1, 9)
bop_286 = relay.power(var_264.astype('float64'), var_276.astype('float64')) # shape=(14, 5, 9)
const_289 = relay.const([[[5.735262,3.759351,9.259563,3.415083,1.243096,7.441518,3.263665,-8.768750,5.288842],[-0.724743,-2.870209,6.663646,-8.741976,7.141565,6.907243,8.929835,6.899914,0.260620],[0.788067,2.789118,-0.565593,4.660085,-4.737462,1.239103,-6.157910,-7.643720,-4.312769],[-2.721847,-7.938685,-4.418859,-4.508723,-4.157497,6.947374,5.682345,-6.958336,1.248668],[3.176698,-7.130847,-7.413966,5.497399,-8.353130,-0.139561,9.887398,0.375479,-8.791214],[-3.305563,0.966034,-0.734177,-7.476376,6.185667,8.025046,9.763005,-2.603979,-3.588068],[3.778216,0.711356,8.095047,-7.514309,-6.725351,-6.808215,2.161567,-4.877859,1.255952],[1.946296,-2.275111,-1.818659,1.992630,-9.748591,5.014244,3.241180,-8.758824,-3.414136],[-5.885353,-5.683610,-1.363761,6.507139,9.594525,-7.935184,2.184452,-8.807153,1.689873],[0.030538,-8.098610,-9.394029,-6.756533,-8.206629,-1.980247,-7.931516,9.435795,7.775735],[8.597195,-4.289726,-1.258727,0.679423,-2.678800,7.905801,-9.585267,1.672162,-1.677273],[-7.856613,1.192962,2.219955,-1.575644,-8.366925,0.223801,2.260540,-9.232953,9.233821],[4.868537,-6.296124,6.356974,6.628769,-9.313348,-0.357192,-5.224788,4.853928,-2.527997],[1.508170,-9.428967,-7.792474,0.557861,-8.204326,3.332162,1.545813,-2.915632,1.768707],[4.877027,4.921221,0.877067,4.266548,8.710969,6.945591,7.925387,-6.088841,-7.612070],[6.386220,-4.788114,6.273247,-1.512679,-4.455208,2.293008,-4.078086,-0.072267,-6.523379]],[[2.200604,4.450074,9.055016,-9.315362,0.175915,-3.275298,-3.189037,-9.251005,-1.248116],[-2.643469,-2.532224,9.317529,-3.493948,-5.983197,-9.484670,-0.116575,-7.019245,-1.131325],[-6.862468,5.807382,4.186219,8.800422,8.873928,-5.768682,-6.668629,-8.025697,-2.827084],[-7.811271,6.394766,3.273532,3.585747,-6.773100,-9.604507,4.134086,0.236803,-5.596318],[7.233382,-4.087492,0.986858,-4.021866,-1.086751,-6.735576,-9.741313,7.676858,-2.418403],[7.423018,3.602255,8.450698,-2.062460,-0.114263,7.511052,-4.559713,7.614331,-6.393700],[-4.616813,-9.616787,7.957280,3.814766,5.871930,-7.379359,8.097427,1.794889,9.703102],[-1.825022,-6.917390,9.746419,-9.152820,-5.869821,2.386772,-8.297950,2.981746,-3.430551],[-0.184798,-5.422391,-7.211323,3.084697,8.001525,-5.678542,5.878320,-8.796074,-7.231818],[-0.905108,-0.001245,-7.419350,2.989471,7.289962,1.474747,7.237454,2.049480,6.344623],[-9.920725,8.934147,4.348216,-7.183018,6.445055,-1.518375,6.438670,-3.240532,7.352619],[5.204666,6.257212,8.125497,-8.386860,-2.925208,3.475339,7.355715,-2.686005,7.750136],[7.584535,0.520882,-9.338303,-4.829963,-3.447293,0.431826,3.126890,-9.544539,7.356546],[8.118520,-4.568051,6.095771,6.132004,-1.933025,-8.988392,9.812942,6.229641,-4.432358],[5.685866,5.847478,6.732991,0.711071,5.429580,6.403788,-6.143097,-8.991889,1.495086],[-0.536934,2.181623,-3.119757,-5.757921,3.537484,-3.715327,2.696884,-5.281164,9.256642]],[[-5.327882,-8.416786,-8.127237,-9.919934,-6.569926,-6.386027,5.949072,-9.587176,9.330601],[-0.736862,-1.044527,6.388992,4.010254,-9.143045,-8.959481,4.092522,8.297991,-9.573196],[2.990048,-1.022361,-0.135663,1.523131,6.663950,-2.315434,6.112480,-1.226218,-7.481946],[-2.767068,-0.748498,7.994530,6.951531,1.277918,-6.838598,-9.847937,2.850652,5.139606],[8.912899,1.801660,-3.489184,5.699028,-6.797360,4.183685,-5.067589,-6.354546,5.261107],[2.412483,-0.640913,3.216829,-5.582864,-9.342658,-8.591547,8.811817,5.831103,-1.153398],[-1.123077,3.241314,7.644695,4.626413,-4.984614,-0.284712,8.364648,-6.207937,6.261632],[-1.693858,-1.879655,5.053554,-3.369270,-5.166686,1.098779,6.514094,9.627146,-3.634778],[-5.448947,-3.683279,6.037479,-3.881752,-4.912681,-6.253502,-2.300244,7.892051,3.414650],[9.871130,-5.716794,3.770944,-6.153870,7.934600,3.090630,-5.111869,-8.185487,0.585895],[1.066682,-3.629835,-4.194559,4.002720,-9.609165,6.510634,4.399110,1.976690,5.206035],[4.409986,-2.280757,3.765976,-6.752740,2.509044,-3.724829,-3.983928,-9.462856,8.389762],[9.683671,0.461574,5.545008,-1.418368,4.957826,-6.848560,-7.426196,-9.973139,6.402963],[5.314372,6.898526,-2.079537,8.205504,2.310804,7.031574,-2.363585,-5.983206,-4.878384],[9.916259,-4.059503,1.237105,9.914232,7.770244,-0.534921,0.710655,-1.847147,-8.135084],[-0.778345,-9.376232,2.639836,-2.203830,-5.385352,6.787834,-1.417383,5.823442,0.277504]],[[-5.943706,9.711558,-9.062804,-0.367230,2.243680,-4.724335,0.695672,7.655267,-3.310471],[3.361382,-7.373488,3.640354,5.491944,-7.236247,0.230466,9.654528,-3.121683,8.100936],[-5.432728,-5.874821,-6.360734,3.815680,7.363130,2.268742,4.218686,-9.729881,5.327070],[4.145488,-9.376765,7.561669,6.654012,2.771703,3.167060,-3.035095,-2.532434,4.944573],[5.977519,-6.435664,3.583081,-0.994343,-8.999800,1.776539,4.463141,-0.165429,-4.508098],[3.137897,-1.041452,-6.277618,1.729050,9.020872,8.166768,-0.664118,2.673027,-7.005900],[7.531524,1.259738,3.576569,0.791216,5.359282,-2.883239,9.535631,9.997003,-4.488632],[-9.450148,-7.350190,0.550509,-9.698865,-6.075357,-5.944143,8.545727,-4.247859,-8.831261],[6.121694,-2.994159,6.631130,-4.729473,-1.789081,2.123183,8.192680,-4.178782,1.645996],[-7.902141,0.270637,-2.240603,9.412634,2.728089,-8.103016,7.334766,9.296498,4.763220],[6.544781,-8.203391,3.386882,-1.006311,1.488800,5.013848,5.248072,-3.740029,-6.687139],[-6.667117,-2.531255,4.033409,6.489891,-6.070397,-4.373559,-9.494961,-6.210240,1.702713],[-0.063876,-9.138794,-4.860816,-5.224252,1.996882,4.867340,5.766472,7.897687,9.588802],[7.790614,-9.065585,-3.799462,9.186033,-2.636883,6.337256,8.932283,5.239476,1.372313],[4.130886,3.727628,-3.726953,0.783953,7.791576,-0.130450,2.022755,4.015167,7.984907],[9.481047,-9.561247,-1.340706,6.141789,3.752749,-9.538173,6.852482,9.938329,-2.154397]],[[3.428404,2.992075,9.210198,2.704197,5.550545,-8.973040,-8.407995,8.372357,9.984343],[-6.261207,-7.825170,5.764710,-1.869279,-5.991826,-9.574196,-3.375790,-5.245464,-7.144342],[5.107932,9.169759,-7.886547,7.898859,7.368345,-2.160369,0.371659,9.834449,-7.306790],[-3.906041,1.563184,-3.840851,4.916037,2.048257,2.085899,6.976309,-6.716189,7.048212],[-4.328210,8.743885,-3.762970,-9.226787,8.441997,9.111529,8.297444,-4.966604,-4.043414],[-4.229912,8.426958,-0.115106,7.626605,2.906254,-5.639097,-1.264319,-6.807945,-0.480753],[1.941960,-0.692345,-2.802294,5.444917,5.704935,7.303799,-3.011415,4.387621,4.271535],[-5.674437,-3.075668,-6.169805,9.469705,9.971365,9.733811,-0.427077,4.434245,9.751339],[-0.982042,4.670959,-2.530670,3.477955,-6.935491,1.398951,-4.460610,-3.403865,0.528260],[6.854915,0.527462,-8.261427,-5.555343,-3.695817,7.069391,-8.523673,-9.632053,2.071480],[-9.225649,3.813206,-8.924713,-2.504078,2.529962,3.978335,-1.866748,1.327369,8.214821],[-2.883920,-0.566089,5.708579,-5.265328,7.922474,6.981446,3.775240,7.177575,-2.983738],[8.444494,7.454389,2.575848,-7.262148,4.359669,-0.565239,0.601448,7.787069,9.587072],[-9.771505,-2.527586,-3.399258,-8.167777,3.894845,-3.049921,2.686126,-7.443662,-5.653832],[2.482578,3.549429,-3.674333,-1.192901,-8.593964,7.465092,-1.675458,1.794754,8.978228],[4.387469,-1.568707,-0.574226,-7.570486,-0.540950,-5.339962,8.657965,5.354064,-4.310673]],[[-9.316349,-8.957490,-2.086894,-2.832112,6.165467,7.271314,2.544818,-3.282376,5.318519],[-9.525576,6.084792,3.587758,-6.831979,0.239229,9.567476,6.202986,-8.156734,0.759959],[-8.014613,-3.268733,3.535779,-1.355214,-8.378256,-9.107296,6.973669,5.931175,-5.323924],[-9.339297,4.054958,-3.988607,-4.659538,-3.225503,9.570059,6.066905,6.749624,3.170156],[-2.719887,3.464238,4.187525,-0.663887,4.295279,0.230219,-7.926813,-9.771766,4.682678],[7.594229,-2.887488,9.714478,1.851169,1.420320,-5.073562,8.936908,3.249357,8.411138],[5.373484,3.811273,2.412948,-3.228788,0.016870,-4.664721,5.823266,-2.755641,4.110824],[-2.769589,-0.401454,-2.686194,-7.991666,8.077501,-3.524570,-9.115453,6.933980,-7.437828],[-5.881686,-0.433512,8.085649,2.790783,-5.490655,8.460061,7.799636,-3.085776,3.390162],[-2.743577,4.011141,7.900598,-6.861829,9.810685,-5.637945,-3.347828,-0.664551,-5.443038],[3.982584,-2.378258,7.394236,-3.277547,5.510302,-0.428225,0.311590,8.201570,0.965182],[-1.667605,-7.745259,7.351650,-3.841350,-7.293402,-0.547498,-3.223681,-4.246304,-1.270504],[-5.230791,-5.778141,4.812662,7.702928,2.152182,2.100355,3.059464,-6.392192,3.500559],[-7.563520,5.398553,-1.764313,3.756520,-6.673088,-5.444785,3.657527,9.180259,-2.324958],[0.642313,7.262463,-8.894090,5.876411,-3.343024,-5.227561,5.044115,8.403871,5.003990],[-0.524899,5.626377,-0.192050,1.643405,-9.751068,9.726144,-1.046972,-3.188223,0.303676]],[[-1.552278,9.187601,-6.448930,7.569154,-7.367039,-6.982295,-3.172679,6.042154,8.973510],[9.361652,2.815246,4.636133,2.462319,0.005732,5.401317,-6.722569,9.609180,4.789239],[4.463327,9.853195,4.803378,5.510556,2.277666,3.278058,-1.273922,8.003114,4.558666],[-0.480254,-5.315586,-4.810960,-2.268794,-2.432739,-7.334522,3.742980,-2.282398,-4.652732],[9.966049,7.430790,-6.288629,2.436094,-0.069630,-7.820883,-1.504445,-4.542699,6.608455],[-6.376591,5.932438,1.888858,-5.618874,-3.920052,-7.919112,5.466823,-4.343084,-9.019752],[9.071383,-0.317202,-5.961744,1.533487,5.110276,-2.529835,1.146437,2.502580,1.178327],[-9.832296,8.888797,-3.768168,3.973979,6.769999,-2.870181,-5.513038,-0.613299,9.976188],[-1.053546,0.421311,-8.487428,-3.142736,-8.260711,3.507627,-3.991129,-8.081785,-1.021601],[4.821358,-1.748527,6.145855,-2.929619,-5.404678,-7.424648,-3.580157,3.643688,3.289430],[7.055095,6.957591,0.286935,1.706722,-6.587682,2.037878,-2.688786,7.123145,-4.558963],[4.198845,-1.073891,7.587490,-6.507852,9.930636,5.560690,7.135221,-0.688607,-8.450043],[8.986334,-2.533706,1.581995,-2.258280,-9.716057,-1.135746,7.002541,-6.473027,-7.540902],[-7.825211,3.615438,-0.661408,-3.450949,0.187008,-4.046403,-2.043730,7.223947,3.009632],[0.244333,-9.045989,6.507863,-6.126142,-7.897918,4.823550,-9.092200,6.169873,6.859080],[-9.051605,-8.893333,7.787014,4.259068,-9.308074,-6.744958,-3.128132,-0.992407,8.050730]],[[0.620697,-6.560124,-7.472911,-9.438293,0.159400,-6.188967,6.929194,1.370416,-0.607157],[-3.608305,-1.331404,-6.736206,0.414809,-4.563646,3.446530,8.421357,7.003212,9.480443],[3.426538,-2.381896,3.514149,-4.561425,4.346921,-6.072497,-5.466698,-2.758454,-3.689533],[8.835717,7.987642,6.701540,3.992400,7.552745,-4.855665,6.033227,5.568396,-1.758676],[-7.346493,2.416060,-3.856445,-5.033158,9.690379,-7.338840,6.171419,4.062764,0.301066],[-3.168068,4.103026,-0.170863,-3.745535,-7.041066,5.515023,-1.903447,4.569614,-9.847936],[-9.219093,-9.819365,2.971083,4.869220,-7.933997,0.527734,9.036901,-7.951770,8.175462],[-6.646224,-9.667625,9.642965,0.010967,-6.988762,-5.817300,2.714794,7.065356,-8.951746],[-2.128910,4.646890,-1.035812,-8.419039,-9.049489,-5.048935,1.631671,7.736506,9.874338],[-8.946767,5.993873,1.154189,7.327650,-9.692365,-9.248223,0.279405,-1.480246,7.656955],[4.422208,-3.195838,9.668502,5.915847,1.780710,-1.095605,-1.874779,4.806646,9.308626],[6.572741,2.715696,2.846687,-2.465507,-0.741961,-7.260069,3.448806,-8.990752,5.774380],[-6.640337,-7.534123,-3.335510,3.311803,7.957356,-1.837241,2.960576,1.114029,5.371786],[2.923574,0.792974,-3.244294,0.912955,4.138706,8.538848,0.206133,-2.572093,0.174989],[7.098541,2.386848,2.042562,4.314305,6.615987,-5.465228,-2.978130,-4.067696,0.049934],[1.352530,-7.302496,-8.652077,8.733116,0.716337,-3.198456,-2.495244,8.408274,-9.762088]],[[5.722558,-1.291895,8.946836,2.799403,-4.401748,4.489721,-6.891585,-2.651868,-7.260644],[-8.801108,7.190246,6.634170,-1.532108,9.096026,3.397799,1.244085,6.398072,0.913895],[-5.816305,-6.543544,-2.190231,-8.182596,-5.404594,9.578559,-3.650163,8.929336,2.768337],[0.241304,-0.014915,-5.088775,-1.099998,6.208521,0.365611,-8.650412,8.083133,-3.384093],[1.119833,1.033506,6.079150,-2.804240,-4.695025,7.214067,-1.133725,-6.182741,1.187742],[-6.481403,-7.718739,-2.461723,-7.171113,1.576564,6.257290,7.022146,-1.600028,2.852308],[3.464595,9.078427,8.126566,8.493032,6.614126,-0.009810,-7.095013,8.742846,-4.242535],[-0.222698,-5.897953,3.046878,6.986474,-0.480306,9.304741,-8.360587,9.526051,-9.768041],[-8.471964,-4.899680,6.049069,8.639141,9.653583,-2.673862,-7.614041,-9.655185,-6.443582],[-3.441146,-6.148981,-9.063900,-4.754106,-4.425045,-2.521484,-3.491760,6.224869,3.534497],[-8.221479,-6.447017,4.030359,5.656090,-5.059106,-6.123619,8.256272,-1.104780,-9.737325],[2.007146,7.420310,-3.146537,1.239693,8.440541,-5.996368,8.243817,2.850062,-6.726393],[4.294544,-4.134889,-8.507769,-8.320947,8.149307,8.810456,9.252338,4.717478,4.086888],[4.577720,-7.559248,7.536523,4.746011,2.906601,-9.242239,8.232832,-6.585609,7.317518],[-3.443093,-9.412287,9.201155,3.423685,6.319888,0.802233,1.208918,3.080661,8.235174],[-1.903431,5.471480,8.159074,7.569871,8.139451,-7.602534,-7.141633,8.301781,1.725758]],[[7.379205,7.912785,5.999482,1.822694,4.932358,-7.316386,7.344972,8.817600,1.031921],[-5.296728,2.308867,-8.479651,1.609531,4.634693,1.236897,2.698848,6.402333,7.054894],[6.173278,4.512260,7.001949,-0.009652,-2.041532,-0.020498,-5.232264,8.326868,-4.404737],[-0.916123,-2.931297,-1.977278,-7.189314,-4.140775,1.776928,-5.411342,-3.167039,4.702695],[0.162392,-6.213974,-0.350172,2.903816,-8.940158,-0.141219,-9.085553,-8.504243,-4.844368],[9.420245,-1.847654,7.755010,1.857189,-4.131598,5.616429,-2.502547,3.953115,3.073175],[0.231305,3.443663,4.698571,-0.140088,-6.604331,-5.286022,-1.705455,5.998543,-6.056786],[-3.296648,-6.868959,0.653913,-5.054227,-8.350518,3.914625,5.215457,5.928080,-2.127275],[8.226013,-8.325868,7.401225,-4.572907,-1.007237,-2.218327,-8.335120,0.753524,5.783705],[8.242309,-0.582899,-5.935710,9.621530,-3.823097,-8.809856,1.261920,8.917806,3.779572],[-1.547448,-7.682335,1.626595,2.380681,3.573572,-6.199390,-5.623533,7.038045,1.440680],[-8.784598,8.232666,4.700609,4.907170,0.277471,1.244281,9.292186,1.728749,-5.636042],[-6.182479,-8.587681,-6.418881,-9.790825,-7.610679,9.572647,3.522654,-6.096471,-4.914021],[-9.052692,-2.920316,1.486246,-6.751604,-3.307069,-8.407952,-6.601225,-3.860311,9.612236],[1.025311,7.843598,2.054890,-1.441202,-4.790913,4.077749,-2.779263,-2.266408,-6.803269],[-9.664425,-8.144426,-6.340092,-0.809370,6.206840,0.833527,9.113115,2.432254,6.142708]],[[-1.258179,1.674391,-2.349557,5.099139,4.519619,-3.764616,7.516864,-2.844526,9.724808],[1.476976,-6.420953,-3.990270,5.405161,-6.409722,6.708806,2.714975,1.447748,-4.229668],[9.828588,1.864645,-9.119392,-9.666582,-4.602157,2.361811,0.688908,0.065419,-5.571503],[-5.924595,-2.039940,-4.747080,-9.043004,2.656444,-8.542214,3.162870,0.902942,-9.004159],[-4.866348,-0.891928,-7.194437,-2.267772,-7.834659,3.208850,-9.578623,-1.194650,-1.284051],[-3.312029,-1.016513,3.793139,5.417355,-4.514531,3.251177,-0.717427,-9.270031,-5.736599],[8.960146,-5.405102,6.481165,-3.712621,8.277301,-5.922172,6.206262,-1.681198,-1.845402],[-7.142228,7.074694,-9.002430,-7.206729,-2.506413,7.087022,5.404257,-6.964510,-5.690041],[5.379603,2.527194,9.509107,-8.954909,-3.975468,-8.487510,-9.527555,-8.939699,-3.579940],[-2.123869,-2.073865,6.716264,-5.592695,-9.584828,-4.493191,-3.962890,1.435066,2.465574],[2.048355,3.294253,-0.478544,-2.903923,-7.337193,-0.686026,8.679875,0.823434,-6.738431],[-3.702091,4.611092,2.204937,9.183152,4.025700,5.781770,-3.962419,1.641227,-3.799517],[3.015959,-9.960031,4.829829,-2.404466,-0.807976,-8.188974,-9.727751,6.280571,4.878950],[-7.199991,-3.220498,4.123803,-3.909683,-1.340420,5.278615,7.161287,2.427559,8.159238],[9.958874,6.242204,2.496426,-6.639677,-9.411503,-6.030735,-5.405972,2.992674,-5.893540],[-2.131087,-3.974619,-8.411996,5.619771,-4.802034,-9.537009,4.016314,-7.893181,5.852193]],[[2.491164,5.614227,2.056027,4.484256,-9.129698,-2.704080,-2.803466,3.369435,0.370498],[-3.078913,-3.841176,7.985944,-7.692122,-7.119109,9.753519,3.294001,6.475332,4.666124],[-2.215736,-8.521031,6.809816,6.558096,9.137148,-3.943438,4.113108,3.042410,0.979518],[-9.057948,9.188460,-9.048011,-9.002814,5.776384,0.206541,-5.954838,-4.162315,-9.138151],[2.319690,3.648196,4.886006,1.887191,-6.883429,-3.955953,2.324994,-4.467409,9.005735],[5.623409,-4.587510,1.086553,4.919267,1.657073,-3.954330,3.431921,2.408512,-8.529989],[-3.530745,2.554711,-1.919421,2.331839,-7.269245,-5.140856,-7.809087,3.369866,7.408483],[-2.730304,-1.690519,-8.218876,-4.485857,-0.353804,-7.636362,-2.100602,-5.396995,5.950256],[4.679228,-5.674426,-6.539894,8.150722,3.726534,9.216656,9.326775,6.957997,5.994304],[-2.403821,-4.115398,-6.745905,6.127382,3.393513,-0.796134,-9.287544,8.666339,-4.092607],[8.076047,2.439284,-6.934295,6.981736,-7.607090,-4.470257,-5.970300,1.959641,6.873502],[1.860848,-5.309514,4.533145,-3.691731,-9.305679,-8.902410,6.881983,-6.087380,-4.344506],[-3.139957,-9.596484,0.185217,-6.380551,2.922297,-5.090932,4.557463,7.990268,-4.144153],[5.068179,-6.546398,9.759489,-7.955194,0.650469,5.165430,0.049682,3.399703,-4.437694],[-1.815641,8.468971,4.455382,0.373128,0.117758,-5.903561,6.508177,-3.165066,-0.515621],[-9.337883,0.368592,7.120094,-2.127481,-4.657810,4.116785,-1.998193,3.452932,8.767022]],[[2.589084,-4.578402,-9.256933,-9.204056,-5.952435,8.720890,-5.642912,1.686874,3.874427],[-7.277789,1.583709,-2.893517,-1.615839,8.769193,-4.185518,-4.327774,1.028447,-7.437284],[6.115358,7.027710,-5.409009,-9.903494,-4.613986,-9.914790,0.662043,5.756653,6.930378],[6.616908,-1.671641,9.710570,6.889405,-5.365734,-6.132671,-8.895692,-3.571983,6.810081],[0.443158,3.273301,9.659243,5.235271,6.892233,-7.161357,-3.243810,-4.030504,-8.966729],[6.636571,8.227383,-8.182552,0.582997,2.465290,-4.116442,-6.117623,2.633568,3.254960],[5.417111,2.204616,-3.518364,8.568631,9.110289,5.878816,3.899957,7.957021,1.192211],[5.061348,8.105961,-6.516581,5.058465,0.585919,-8.757352,-8.054425,0.949092,-1.441972],[4.884636,1.236339,2.560837,-6.988188,2.933714,5.889168,6.756260,3.608279,-6.250642],[-6.343580,-3.302110,-1.402330,-8.594447,-2.043637,-2.187833,8.289268,-1.786108,-0.690361],[-4.456660,3.554731,-5.162127,-1.372347,1.833926,-5.650883,4.661406,1.097520,-8.967584],[-0.823684,-2.492591,5.708035,-1.066088,-6.194431,9.007070,-7.432440,4.156628,1.870672],[2.903987,5.033165,-3.781660,-2.545947,-2.546822,0.805273,7.983223,-2.869598,6.863886],[-7.074486,-2.327507,-5.012789,4.343662,1.774604,-3.574580,-7.461280,-5.944840,-7.142753],[-2.904585,-5.380729,5.372286,7.011134,-0.489848,-7.935732,4.471198,7.157456,-8.709926],[4.869609,-5.948403,-6.861513,-2.194973,-2.921979,4.523099,2.467429,4.085849,-9.209156]],[[6.822766,9.288038,4.565753,7.062816,-8.966558,4.383763,3.996950,-7.168443,6.634942],[-6.722553,-1.198302,0.630415,-4.268543,8.078983,-6.589889,-7.601203,7.815890,8.929655],[7.380482,-1.783637,9.954910,-2.661089,-3.052664,2.806642,-6.977040,1.966281,-3.069059],[-2.842634,4.322559,3.726629,5.331034,-3.913583,9.293581,-1.052544,-9.353962,7.563970],[-3.188260,-3.689475,-1.756839,-2.269906,-8.907225,2.797359,-8.991599,6.545584,0.547245],[-8.734986,-3.994948,-0.847340,-2.497013,-3.382239,2.976941,9.493493,-7.758484,-3.247682],[0.868432,5.865303,2.793208,-3.783961,-2.874041,7.554464,-0.619517,-5.307879,-0.110396],[2.722523,6.937899,-8.835213,8.668224,-4.023565,2.422109,-5.969189,-5.005121,-1.535944],[2.167574,6.790167,-6.993537,5.314640,-2.842093,6.858649,-3.644239,-0.281197,9.946828],[-5.967661,-9.339610,-7.537098,-4.366576,-7.985132,-6.698292,-6.000284,9.961424,1.550708],[-2.791751,5.020112,-7.633544,-3.289920,7.798360,6.889290,7.442638,7.819908,-9.039907],[3.426557,-8.842779,7.698872,3.506000,-3.697111,-4.836748,-9.672632,2.479987,4.698490],[1.636769,-5.834494,-2.539017,3.520761,-3.556059,5.054516,-4.564364,6.425159,-5.501352],[9.932853,-5.342833,4.685262,7.171714,0.240489,2.030777,-8.919443,-6.922379,5.371039],[-2.535640,-2.514792,4.763963,-5.104114,6.253739,-0.335027,-6.935961,3.222738,-5.210866],[5.429226,-1.886822,-5.011375,-1.495310,-5.577570,2.583813,4.549983,-1.375334,-3.217817]]], dtype = "float64")#candidate|289|(14, 16, 9)|const|float64
bop_290 = relay.divide(var_269.astype('float32'), relay.reshape(const_289.astype('float32'), relay.shape_of(var_269))) # shape=(14, 16, 9)
uop_293 = relay.tan(bop_286.astype('float32')) # shape=(14, 5, 9)
uop_295 = relay.log(uop_284.astype('float64')) # shape=(14, 1, 9)
bop_297 = relay.mod(uop_284.astype('float64'), relay.reshape(uop_295.astype('float64'), relay.shape_of(uop_284))) # shape=(14, 1, 9)
uop_300 = relay.atanh(uop_267.astype('float64')) # shape=(14, 1, 9)
bop_302 = relay.greater_equal(uop_284.astype('bool'), const_289.astype('bool')) # shape=(14, 16, 9)
bop_305 = relay.bitwise_xor(uop_300.astype('uint64'), bop_277.astype('uint64')) # shape=(14, 5, 9)
bop_308 = relay.add(uop_284.astype('uint16'), bop_290.astype('uint16')) # shape=(14, 16, 9)
const_311 = relay.const([[[1.136794,-6.119558,3.604738,4.788014,9.740662,-8.610717,1.028593,7.667615,-0.744605],[-5.988075,-9.533305,9.137817,3.649810,-1.732090,3.268680,8.247751,-2.216583,-1.083984],[-6.494662,-8.196707,-0.483641,1.790008,9.119183,7.309904,-2.656972,9.856201,4.362619],[-1.654515,1.312793,-5.473384,-5.773474,-2.894642,5.957437,1.326622,-3.566853,2.896527],[-2.647967,-8.085985,-1.081470,5.437994,6.093802,3.986072,2.257046,6.880058,-5.184466],[-5.765116,-2.917363,4.878748,7.499748,9.476811,-9.802255,-6.901111,7.336263,1.104796],[6.756767,-7.849703,6.769167,9.636333,6.411076,-1.065595,-0.438537,1.443034,6.603255],[6.817734,8.400554,-2.793026,5.542565,-6.705388,8.635461,-2.486427,-2.818081,0.624677],[1.794376,-7.654268,7.715934,-1.928719,4.027214,-9.773413,8.382182,-9.003856,-9.291741],[-4.819871,9.019186,-7.022258,-1.282123,7.354548,-9.333428,1.659398,2.967748,-3.641934],[-7.856157,7.100572,-9.366161,-2.129779,3.135863,-4.417800,5.184339,6.025223,4.265839],[6.826919,7.485215,-2.479501,2.332737,2.273378,-1.690722,1.347116,-0.287924,-8.913668],[9.761831,-5.482872,3.608600,-8.280287,-0.970618,-8.863030,-7.212358,6.053172,-6.776558],[3.950592,6.982682,6.087088,-1.679802,-8.323678,7.185309,-3.033692,1.204467,4.256873],[0.500214,2.928755,3.895471,-8.822275,1.184137,4.574522,6.225928,1.779124,1.303968],[-7.535881,-3.177761,8.149760,-0.023181,-0.144634,-3.296762,-0.965061,7.696702,9.015019]],[[8.833884,-2.550543,-8.981019,9.780281,-8.521335,-6.607709,5.264893,-5.333571,-4.275941],[7.344509,0.382780,-6.657062,1.133830,0.283636,3.405326,9.106084,-4.292827,6.334398],[-5.801849,2.330830,-7.197840,-1.250610,-4.053282,0.547919,-9.624173,3.115780,-9.078493],[-2.656369,0.924519,-4.041506,-4.520394,4.631019,-5.132994,0.641849,8.113336,4.964437],[7.905103,5.859420,-2.231068,-8.887806,8.543198,-1.872876,3.858791,9.757934,4.604783],[1.781848,-5.052069,-7.850074,-5.269419,3.830658,-9.186385,7.773293,-5.262432,-8.768143],[3.826191,-1.219702,-3.094000,-4.655831,8.798947,-0.767882,7.453795,-4.337459,2.936215],[-6.854290,5.811314,6.188490,6.417926,0.537592,-5.374994,-4.797779,-8.406563,-2.330807],[-2.447639,-0.652826,1.289741,-5.163151,6.486548,-4.024980,7.281688,-7.845894,-7.884859],[3.737481,-4.624370,4.691688,-1.968733,-5.072840,-7.320462,2.562217,3.257153,-6.533215],[4.829529,0.007852,-0.650483,4.625644,2.919605,-9.927452,7.230636,3.988773,-2.472200],[-8.595336,-9.910526,2.765093,-1.156502,6.482022,-7.005678,-2.045529,-0.336605,-0.334222],[9.883796,9.286636,1.509595,-6.512558,9.675784,-0.510153,-3.120969,-2.863106,3.074472],[-0.576716,-0.630480,5.789814,0.840712,-6.687180,-9.752575,-2.280813,-6.523565,-8.443060],[5.783038,6.297689,-9.451579,-3.662860,-6.708836,5.672218,-8.714197,1.902384,-3.359933],[-1.741829,-2.695961,9.085221,6.126065,-6.048211,4.869983,-7.369680,8.818872,2.464653]],[[5.647016,7.611429,-7.002595,-2.600616,-1.405694,-8.705048,-9.436192,-5.202417,0.261265],[7.725888,-4.301187,4.027641,-2.789078,-6.872370,6.292806,1.214370,-2.334902,-5.323679],[-4.275960,0.422378,1.871169,3.667857,-6.701984,-1.363200,7.799454,9.182302,-2.027654],[-5.645386,-1.180756,-5.771151,-3.262000,-5.743330,-4.738875,-5.912128,2.143369,3.630094],[3.323239,6.570031,6.554756,5.300088,6.608906,-1.932642,6.606858,5.224647,9.069512],[2.992600,8.324480,-9.379704,5.408244,-4.000046,6.872057,3.683671,-4.751948,-5.259212],[-3.572820,1.603796,-8.273900,9.447361,-1.783113,2.980049,4.554411,6.216806,9.270019],[-1.262760,-7.929025,1.652862,1.435572,-9.858715,0.369788,9.203261,4.944753,-3.898769],[-6.339410,9.598874,-5.770906,-7.309696,-4.424929,-2.493519,-0.989709,-2.430931,-4.044579],[-9.180455,-1.575022,8.505856,8.880731,5.748097,2.036796,7.983860,-2.106195,-6.649060],[1.368012,-3.024335,1.069849,9.927123,6.877768,-4.239774,-4.895002,6.599868,-0.893073],[-3.586826,6.982036,-3.423329,3.426315,-6.697759,-7.721489,-7.208212,-0.979180,8.799145],[-8.430123,6.686082,-9.937836,8.276000,-4.850500,1.457499,1.319665,-8.223919,-5.029462],[-1.518090,-6.449479,1.693431,3.822132,7.643834,-6.221902,8.540393,7.593013,-1.712960],[5.713859,-1.956575,4.408613,-9.880686,-9.741891,6.065016,7.850799,-2.093900,0.065113],[-4.029469,-8.461609,-4.360630,7.013509,4.194007,-7.949944,-8.757206,1.375854,7.290251]],[[5.435185,7.959223,-7.318283,-0.265229,-7.212480,-0.389127,-9.860381,0.324897,-1.185099],[1.456563,8.857397,-0.516327,-1.958863,9.278193,-0.228437,-6.349945,-3.398939,5.175897],[5.816125,-5.756302,-8.368613,3.353532,-9.493778,2.049387,-1.646513,-5.907556,9.314516],[8.848525,3.454258,5.572075,6.852293,2.089341,-7.088019,-6.798518,-3.806990,8.385377],[5.509350,7.215341,9.216714,-2.265176,1.741717,-3.417882,-6.741611,0.025500,-7.902096],[1.931633,-5.724448,-4.643503,5.386985,-1.290249,6.724555,-6.894053,-3.381369,-6.776319],[4.611012,2.197323,9.460057,6.344071,6.227955,-9.170614,-5.206193,2.657701,-4.146812],[3.406320,0.549380,-9.680416,1.573606,3.161866,-5.274319,-6.920779,3.563595,7.525571],[7.632832,-5.313728,3.097824,-0.070319,-2.378997,-2.312607,7.726295,-0.950780,-6.287200],[-3.377356,5.796976,6.041696,1.945877,9.970038,-7.522104,-0.342537,-5.964846,-0.769252],[5.506680,4.332808,5.827347,-9.517721,2.067652,4.511803,7.238586,1.714799,9.708384],[9.510570,-4.757400,5.757856,3.111070,-5.847899,-9.836323,0.176132,-7.063235,3.784412],[-6.129571,-3.201092,-5.037401,1.539516,6.808966,8.783789,-0.785502,-1.363691,6.408441],[5.524179,7.152885,-7.229756,-3.024746,8.595063,-1.935631,-4.622002,-5.625155,-9.823536],[-8.628936,0.636726,1.427099,8.192882,8.387536,-3.638411,7.186797,2.276758,-0.053216],[6.307863,5.973191,0.035199,3.307194,-4.447183,-3.185471,7.404073,5.025793,9.048775]],[[9.987141,-2.839878,-8.833874,9.404233,-6.832865,-6.407120,4.242656,1.975036,-0.494126],[-9.287469,0.699001,8.509844,-8.881098,-7.043596,7.901436,-5.608504,-9.001507,9.842696],[7.326765,3.249606,0.683450,-2.947801,1.938404,3.291911,-7.805682,9.581627,4.958702],[-4.225724,5.665209,7.398430,-8.772869,0.098085,-6.974569,1.500125,-1.206009,2.523273],[-6.597852,-7.726924,3.307590,9.387259,9.004138,4.684781,3.372692,-1.627687,8.040456],[-1.952631,2.022797,-8.308319,-1.137740,-5.979747,-1.043299,0.151019,7.007225,-2.038660],[6.899771,8.947344,9.936721,4.172701,-4.447827,8.921508,3.918913,5.205775,-8.719335],[-5.948273,3.435310,3.180162,-3.786179,-1.114194,-6.563622,3.332172,-2.290515,-4.303901],[5.630756,-8.216714,-5.090499,3.684616,5.310623,-7.386881,8.437689,8.217328,7.360351],[-6.217270,2.812044,-9.310391,-5.735838,6.277794,-9.275744,-2.170820,-6.306949,6.753020],[-5.363099,-2.379808,5.206039,6.316851,-3.356540,7.138227,0.135133,9.328418,-0.448394],[-8.903178,8.563527,4.790944,-6.348281,-3.361587,-6.345570,2.212175,-9.148458,1.730815],[-0.108863,-8.871954,6.380875,9.434217,-9.988894,3.547234,-9.189153,6.241004,5.401003],[4.110058,-6.638404,-2.937302,0.645257,7.635357,-8.182153,0.315885,-0.836125,6.200989],[8.251077,-7.464768,7.684685,-7.802318,-0.620724,-9.996303,-9.454981,8.128376,0.349968],[4.179811,9.151449,-0.380364,4.551104,-4.921635,-0.911248,9.277111,-4.760804,8.114955]],[[4.511401,3.891068,0.535999,-7.087617,4.187152,-4.603567,2.518851,1.622804,-0.761452],[-0.017408,2.053284,7.412444,-5.204710,8.607241,2.189878,2.126830,-4.001938,-5.099526],[-8.741684,8.624822,-3.643580,-7.069431,-8.235169,-4.172005,1.206645,-0.438059,4.987654],[-3.842379,3.958758,1.846582,-4.513483,2.310948,6.093257,-8.603460,-4.896034,-5.743122],[0.877983,0.896357,-8.022353,8.888877,-1.549283,1.728539,0.982396,-2.909740,9.036515],[3.256180,-2.333102,0.056700,-5.046440,1.025148,7.455763,7.117703,-1.768841,-3.010324],[-3.389766,-8.546176,-6.285285,5.171803,-3.813439,-3.497262,0.183113,8.152685,-6.155396],[3.858058,3.555936,-8.823935,-3.034350,6.659404,-0.754376,-5.362171,0.171971,4.092047],[-2.610316,-6.356397,-8.885210,-0.655342,-1.495660,0.297480,-5.168846,-6.230517,9.888756],[0.439144,-3.604965,-5.819111,-5.122232,-2.607642,-3.361000,1.384172,-4.293233,9.064570],[-7.043304,-5.727697,7.108143,-7.838391,-6.763715,8.605700,9.259597,-1.787868,-3.413543],[-0.126249,0.683184,-7.580882,-7.881456,-3.761571,6.922880,-5.886702,4.275559,4.469369],[-8.343282,0.984020,-4.949835,8.959370,9.044462,5.805328,-7.116303,-6.316868,-1.134007],[2.336154,0.906907,7.075045,4.519845,-4.353942,-9.946468,-2.028798,7.066757,-2.068218],[-0.808604,9.964824,9.488922,8.968620,-1.807325,1.691819,1.200480,-0.063909,-9.892002],[9.707283,3.172069,-2.901897,8.877526,-6.997772,-5.363515,-4.603927,-8.157369,-0.792311]],[[6.137940,-4.197618,-3.140063,-3.614573,-5.007038,-0.920744,8.920262,9.554802,5.452525],[-8.507217,-6.345830,-3.017207,5.440951,1.719805,-1.060282,0.901739,-9.187177,-4.338394],[6.984387,-4.783332,5.872311,-1.612295,-4.663770,9.461474,-2.511101,5.412258,-5.066993],[7.707339,-3.827081,-5.238484,2.933730,-4.870534,0.413098,-6.041542,-1.935542,-1.068185],[0.539158,-8.926117,-3.268650,8.986919,4.802313,7.832091,-6.473649,-2.431194,-2.473878],[-0.588824,-2.324025,3.629644,1.966111,7.876992,-9.689844,1.140862,-2.378301,9.356407],[5.695213,7.592868,9.481486,-7.357248,-0.663762,0.607005,7.462212,-2.707243,-4.633284],[9.060808,2.358750,8.994792,3.845352,0.180703,-9.440742,-4.299755,2.537778,9.436537],[9.219000,4.468929,-3.092715,-7.192838,-4.117098,2.975522,-0.719066,-9.427113,3.487141],[4.247958,-3.436682,4.823059,3.195589,-7.618090,0.458342,-7.548599,9.514459,-1.314667],[-4.213867,-7.827442,4.175739,7.468593,-6.714911,4.599881,-9.437798,-5.305752,0.190273],[7.833341,-3.636921,-0.886755,3.113356,-6.983576,-1.997209,-2.012408,9.570592,3.422853],[8.167575,-3.435405,-9.279373,1.891429,-2.158193,1.406364,2.653663,-7.692841,-7.135829],[-1.667293,8.637397,-4.032513,6.199649,-2.394482,4.479012,-9.036381,2.965587,8.976862],[-8.127330,-1.498633,-3.341995,3.288780,-3.666043,5.122319,-6.867694,3.491092,-0.941501],[4.003360,-0.436210,-5.326729,2.112149,-6.544431,6.799260,-8.244582,4.257955,-3.485876]],[[-8.797736,6.288238,-0.454282,0.643902,-8.986805,-7.156732,-1.724730,5.291796,-7.291535],[1.068638,-2.128707,-2.000690,5.527787,6.804492,5.192823,-8.699168,8.525408,-8.663107],[6.140102,-4.884111,-5.379292,-1.217060,-6.692212,-1.044381,-3.598070,-5.279873,2.920717],[-9.002571,8.816871,9.540498,-8.736942,-8.723322,-1.960429,9.371261,-0.713154,0.296191],[-1.655875,-1.270001,2.238784,4.140112,-3.591063,-4.427914,-5.222929,-2.203548,8.086063],[-8.017872,3.637690,8.034216,-3.683572,5.617102,4.878932,0.104556,2.775884,-9.246256],[-0.016558,-5.968242,-0.385492,9.669851,1.384394,-8.800283,5.192435,-6.240077,-1.024976],[-2.096759,-7.995020,6.822819,4.872666,-2.537174,-8.547321,4.049079,-9.419917,2.948903],[2.302447,-4.976575,-2.960139,1.012561,3.739998,4.185286,3.674407,-9.818657,5.003941],[2.169050,0.298204,0.758512,6.304279,-1.222487,-0.612745,-2.734011,-1.653718,2.181528],[7.975806,2.883903,-7.356586,-2.050395,-4.520046,-3.182185,1.187470,-8.657857,9.226423],[-1.471132,5.993723,-5.895107,2.827238,8.303323,0.493883,-6.597938,8.453272,-0.255465],[-7.503968,4.663422,8.067125,9.677092,-2.150530,5.580969,7.286008,-1.711560,9.362282],[7.520241,5.862719,-4.700061,8.878701,0.582667,-2.970279,-9.070247,7.165111,-4.597612],[9.006070,0.428128,0.217276,7.269717,-7.725709,1.716988,6.856159,-7.041111,0.766266],[2.661979,-6.727107,4.636216,-7.041005,1.307534,-6.231911,5.031555,6.707270,3.952329]],[[7.463721,-4.960577,-6.533500,8.279711,-5.624830,-7.562012,5.148455,-2.394734,-0.668426],[-6.590397,5.076159,-3.712849,7.890397,-5.810643,-9.621979,-1.067402,-9.137832,-6.063358],[-8.300296,-9.638748,0.419715,8.928414,6.526326,-0.093906,0.058943,-5.443593,5.396027],[-4.772548,-9.595327,2.444972,-4.333727,9.013084,-5.860282,4.479944,3.326144,2.210582],[-2.922599,6.962410,-6.550324,-3.743665,6.300524,3.771417,4.242974,4.908392,-7.296443],[3.571308,-6.640915,3.690785,-6.372607,-1.289147,9.431754,-0.507948,-1.250677,9.509221],[-3.264251,-6.066335,-8.338161,-4.763054,-0.165136,-5.532475,-2.464961,9.106470,-0.642826],[-2.968615,-4.460196,-5.192036,-5.381387,9.733306,9.745392,-2.846470,-6.476331,2.312345],[-6.744080,6.001878,7.440876,8.164587,7.316759,4.581183,4.560331,-3.225026,-3.185590],[6.338575,5.056966,0.044007,8.720661,-0.051936,-7.087661,1.692075,9.682933,2.886598],[-6.605062,5.371610,-2.930965,2.359477,-8.544938,3.414031,-2.794211,7.223028,6.848041],[-8.171297,-7.160015,3.265381,-8.959894,3.127444,3.948528,1.193696,2.389268,3.100472],[7.952282,-7.351925,-8.574208,-3.437786,-3.960917,-8.748505,-2.912179,2.144006,-1.913770],[9.637894,3.267540,-8.683314,-7.207515,-2.414731,-8.652166,0.894007,-8.261173,8.895549],[3.775900,8.931749,-3.066414,7.863293,2.758824,2.807075,1.050785,-7.087641,-5.556497],[6.279649,-9.357972,-8.970405,0.579364,-1.254391,0.907717,-1.171152,1.998712,8.270657]],[[-7.245990,-9.313406,6.497260,0.770601,2.909596,0.882660,-0.948756,-5.247517,-1.846929],[-6.868670,-4.743590,9.716145,-0.229046,-4.462098,0.906403,6.289757,-0.931197,9.663083],[-2.227991,9.920870,6.519012,0.382752,0.337053,-8.304611,-6.805331,-9.268861,-9.678351],[9.344392,7.182988,-4.277076,2.506797,-3.882919,-0.698824,6.222847,-3.205743,-6.675432],[7.821048,-5.945920,7.156638,-6.299597,0.052843,-4.569262,-1.666666,-2.250159,8.268340],[-7.289041,8.908456,-6.743347,6.100484,-1.388298,-5.494808,3.839551,-4.264954,7.267263],[-3.067279,2.824719,-0.146001,7.686668,5.074521,-3.456643,5.242502,4.263163,-6.248854],[-0.844685,5.385752,6.181627,9.963427,0.646703,-0.051005,5.558205,-9.389652,-5.721324],[-7.345452,6.927760,-5.338863,-9.209760,9.347458,-0.311910,5.454131,8.531850,3.751654],[8.448404,0.633693,-6.756572,4.568867,-4.967011,-6.480702,-9.111966,8.901683,6.906854],[8.212894,5.170457,1.750433,-1.843842,-6.290349,-4.659984,0.023944,-5.794478,-4.009697],[-2.029955,-0.604034,-6.715812,-7.679298,3.412669,-8.787456,0.694357,-7.497263,-3.383871],[-7.024465,-3.128290,-8.646448,-3.118856,-3.625281,-3.693594,5.265335,-6.907816,-8.626330],[-5.478182,0.552816,-7.527268,-6.346410,-5.854663,-1.114141,7.506312,3.931382,8.963996],[-7.724488,0.593548,-8.472949,6.231384,1.333710,7.174265,-5.380044,-2.739572,9.019362],[-7.582956,-6.023431,-1.826507,9.282895,6.849235,6.852051,4.053009,-8.251807,6.516437]],[[-1.586053,-5.422325,-0.476684,9.663314,6.568605,3.719981,-6.370390,7.868780,-8.805851],[5.167190,5.484584,-7.800217,1.120188,-8.628213,3.989360,-3.648871,-7.123128,9.116453],[-4.949724,-0.976986,-4.306373,-2.552367,6.278195,4.578808,1.798452,8.906853,2.892104],[-6.181804,0.252782,-3.803397,-4.088977,0.592672,8.378308,9.529294,4.404990,4.500195],[2.231407,0.699798,7.015598,-4.209440,6.500301,4.525331,-9.412579,-6.664683,-2.118823],[-1.325857,2.780456,-8.443812,-0.403460,8.306227,5.132033,2.784961,-6.421962,6.618778],[9.280264,6.665602,7.049142,3.056751,-4.625170,-2.943621,-4.538925,3.878705,-5.807325],[-8.270012,1.076703,-5.962399,-4.704451,-0.742292,-0.998580,1.590690,3.487002,5.726013],[4.435496,-8.107427,-3.064014,5.632003,3.486659,-8.514853,-5.192004,-6.285486,-3.173790],[-8.994843,-0.742338,-8.910232,-5.814251,-9.760873,-5.516799,-0.707290,-7.856902,6.672443],[5.970380,7.267644,1.671343,-0.786616,-6.277864,6.365914,-7.646769,-7.676679,-7.041969],[5.092143,-5.905292,6.148603,7.853667,-3.926892,-4.928131,-4.815200,-8.782900,0.877720],[-4.292185,9.842216,-1.662281,8.820894,-1.471977,-5.453660,-9.325868,9.578202,3.548487],[7.039353,7.743561,9.069590,3.775947,7.771736,5.650423,9.393454,3.416768,3.817141],[-4.608726,-4.108482,-4.711467,8.962741,-7.998321,7.191522,3.157765,8.203312,-1.683221],[8.833404,-3.269599,-4.343427,9.201334,2.054194,-2.602807,-7.962335,-5.932821,-1.748788]],[[6.704273,7.131352,-9.079132,-9.141867,-8.739220,-4.400757,-7.104174,-4.497785,7.339952],[-3.687222,8.034527,1.324648,-4.574240,-1.205094,-5.088522,9.565548,-2.470820,3.603497],[0.706292,4.190755,9.449858,7.903640,2.113326,4.577216,-3.837395,9.707493,9.147129],[5.961860,-9.395361,-6.257171,-2.554426,7.783205,3.496608,-1.641585,-8.155833,-6.169676],[0.898757,8.428232,4.395870,0.523976,-5.903911,7.138162,2.307855,-0.994736,-6.315756],[-6.999311,-7.872641,-4.783889,0.762609,7.345616,-3.705800,2.282470,1.059577,-2.650646],[7.020393,-7.986178,-4.180861,-7.613597,-6.655844,6.802651,1.349385,-8.876837,1.205856],[6.652001,1.326638,-2.129258,-8.357544,3.781762,-5.179743,9.882250,-0.647020,-6.185303],[9.790285,-0.292379,4.381431,7.162888,-2.311143,-5.317563,-0.754409,-0.453771,-0.227374],[9.517535,-8.338875,-5.947681,-4.457465,6.826772,7.287213,8.153111,-2.252791,9.045050],[1.856393,-0.910669,-1.882440,-2.011793,7.428726,-6.011506,8.274160,-6.558214,-1.642957],[6.883330,-4.635170,2.088882,-7.755987,9.529971,9.828621,-2.944002,1.184708,-8.281585],[3.214836,-6.764831,3.309807,3.076771,-9.531579,-4.093814,-1.017870,8.118196,-4.623471],[8.939624,2.900756,8.720500,7.005215,0.973352,2.601784,-0.960802,-5.738972,1.017416],[2.858090,1.962451,-0.281410,-2.166838,8.565042,-8.993321,7.887755,-8.885473,-0.845895],[4.099153,3.444633,-7.874669,-8.450933,8.549684,2.301223,-4.860943,9.144065,-7.273245]],[[5.227506,4.497035,-5.621233,3.106823,2.655120,-0.257267,2.995738,8.514474,-5.079790],[6.621455,-5.272036,-6.481827,1.698670,-1.756987,-1.797362,4.470315,2.394573,-1.415495],[-5.091456,3.025305,1.304373,2.271012,8.938417,8.905696,-0.525570,-2.620316,2.291071],[-4.676487,0.320938,-9.689687,6.262028,-6.512480,-6.945403,-1.133939,-1.986480,-3.997564],[6.473110,-3.924484,-0.732141,-0.598848,0.335648,6.188591,6.224335,2.616336,-8.604524],[-5.745778,4.071304,-7.391486,9.897978,-7.458234,3.846703,7.943501,-2.475471,7.961307],[9.896138,5.104936,7.694225,-7.481077,-1.655027,8.795933,8.011389,-2.527725,-4.935953],[-5.766361,5.491092,3.241138,0.011331,6.751540,2.690200,-2.418965,0.163259,0.638811],[-3.331357,6.356330,6.225683,6.469206,5.428494,-1.611277,-6.180980,6.497633,0.852804],[-3.505272,-4.182341,6.617313,0.892067,-1.947291,5.248200,8.121276,4.063484,3.590445],[9.877930,9.784721,-4.581550,1.796079,-6.618874,7.740403,3.505696,-0.862751,5.185805],[8.209359,6.354401,0.307047,6.933751,-0.372413,-5.262681,-5.277267,-6.680078,-4.934150],[9.632481,-4.841969,-9.876768,7.215533,4.089191,4.157830,4.275844,7.712948,8.873965],[-4.753176,0.322044,0.982221,-9.248399,-9.927953,-7.321326,0.849718,-3.247328,9.257173],[7.403921,-2.289516,3.181536,-3.996534,3.514490,0.284528,-3.202069,1.644500,0.627515],[0.818921,-0.833911,-4.710866,-8.204189,-6.791526,8.284240,-7.475511,0.404321,-4.328988]],[[-1.354413,4.954050,-4.183139,-2.106316,-3.116940,8.246637,8.884798,5.504540,-3.855873],[-4.820329,-5.671809,8.899411,-2.890729,-7.518683,-2.343594,-9.021759,9.893228,-4.342602],[3.483200,9.611378,8.768022,0.210187,2.205942,-4.412387,-8.606696,2.095848,-3.488168],[2.173707,-0.602841,-6.327110,-8.855546,2.998771,-8.340588,1.200221,9.364143,-8.968282],[7.771627,8.447235,-0.598965,-8.281612,-0.296904,6.506264,-8.799812,8.037466,3.506586],[-1.494009,4.435891,8.232804,1.343868,0.285295,9.746576,9.420613,1.742432,-2.943994],[7.845061,-1.452919,-9.948068,-1.437341,-7.480608,9.562572,7.792712,3.606347,6.371350],[-1.728776,-8.103915,8.414902,3.910083,-1.992570,8.366425,8.979193,-0.430713,-3.896431],[5.150500,6.672415,8.168250,0.625721,-8.491063,4.220449,-1.670477,6.029447,3.407648],[-7.846262,2.102471,5.472807,4.235465,2.884354,-0.440451,-8.280827,-1.103792,-1.801194],[-9.303347,-5.937689,-1.097973,4.413008,-8.043514,5.557829,5.773553,-7.124534,9.673698],[-5.205657,-1.056897,-9.682700,8.857584,0.350325,-1.441783,4.402403,9.001581,-6.265664],[2.241328,-6.170461,-1.418329,9.335452,-6.986594,-4.014969,5.519754,-8.683374,9.158955],[8.117456,-0.667914,-5.676254,-2.799189,8.557058,-5.984855,2.001611,1.726953,1.737079],[-2.314777,-8.823044,-2.930852,-5.786792,7.682017,-0.336039,1.654433,6.789536,-7.928392],[-9.921524,-1.407145,-5.290648,6.486339,-2.113270,-2.677432,-7.398740,5.868763,8.413743]]], dtype = "float64")#candidate|311|(14, 16, 9)|const|float64
bop_312 = relay.bitwise_and(bop_297.astype('int64'), const_311.astype('int64')) # shape=(14, 16, 9)
uop_315 = relay.log10(uop_295.astype('float64')) # shape=(14, 1, 9)
var_317 = relay.var("var_317", dtype = "int64", shape = (14, 16, 9))#candidate|317|(14, 16, 9)|var|int64
bop_318 = relay.less_equal(bop_312.astype('bool'), relay.reshape(var_317.astype('bool'), relay.shape_of(bop_312))) # shape=(14, 16, 9)
bop_321 = relay.less_equal(bop_273.astype('bool'), relay.reshape(bop_297.astype('bool'), relay.shape_of(bop_273))) # shape=(14, 1, 9)
uop_324 = relay.log10(bop_270.astype('float64')) # shape=(14, 16, 9)
var_326 = relay.var("var_326", dtype = "float64", shape = (14, 4, 9))#candidate|326|(14, 4, 9)|var|float64
bop_327 = relay.logical_xor(uop_315.astype('int64'), var_326.astype('int64')) # shape=(14, 4, 9)
const_330 = relay.const([[[0.657514,9.739352,-8.524605,0.009020,4.035722,-9.215085,-5.902998,0.264643,8.535435],[-9.187192,-2.260036,2.464025,-5.284935,2.364647,-3.106623,1.322142,2.189472,-7.389044],[9.534995,-6.261526,-8.676131,9.792139,-6.441267,5.376335,3.242661,-7.535153,-1.788709],[4.722062,-0.778054,-6.597162,5.755977,-4.588810,-0.730542,-2.555940,-7.013043,-6.088045],[2.731073,2.781527,8.554159,6.905819,-2.132471,-1.991587,8.272917,3.659488,-3.073762],[-5.328204,-5.731287,-7.623157,-0.614026,-7.975039,8.625038,1.077849,-1.824894,-9.869424],[9.977984,7.165776,7.189517,5.604432,1.729030,8.063128,-3.562810,6.186902,-6.010471],[9.530974,-3.880428,-4.088492,8.547377,1.254804,-2.126612,7.285093,5.670393,-3.455795],[-3.679620,-4.832190,-1.587101,6.369187,0.414946,6.489742,-3.335814,-6.645164,3.299268],[-4.597679,-4.854803,-7.691366,-7.596894,6.576132,-5.467645,-2.624715,7.865700,-6.454723],[-0.973001,-2.439370,-5.439512,-3.875306,-6.693816,-6.662447,6.528640,-8.883972,-4.528590],[-3.285599,-4.611962,-1.604621,1.047235,8.644251,5.110341,8.329913,9.728090,-4.104965],[3.222531,-3.934446,4.965867,2.346240,-8.712475,6.898310,9.590732,2.748295,9.260587],[-6.948757,-7.041671,2.245930,-0.057008,-6.034439,-8.521635,3.747801,9.230089,4.481948],[-7.444652,2.251679,5.890743,0.203638,-1.887591,-6.003936,5.048927,7.949725,5.265628],[2.220832,9.973651,0.167167,-1.860766,2.639120,3.915004,7.968672,-6.071067,-7.891082]],[[6.321593,-3.572576,-8.900457,6.729886,9.327982,5.513073,4.701127,-2.775550,-4.306412],[-1.758724,7.825293,-9.845682,-6.621624,-2.586157,-2.528587,-8.011925,2.701711,-0.142632],[-7.971166,4.472637,-2.174513,-1.090056,9.850066,-8.960173,-2.767885,2.246347,-7.601087],[-0.698217,0.076651,2.011556,9.022620,9.928285,-9.710277,-7.060255,9.936176,9.300086],[3.298203,0.222649,-8.397809,-7.548949,-4.429555,-6.466928,-9.751780,6.940696,-6.049883],[3.483237,3.682341,-2.745555,-0.867758,-0.089788,-6.786581,9.915059,4.402867,-2.613230],[-9.873457,-7.273164,-6.170520,-9.382881,-0.226960,-0.171469,-8.572143,-3.544067,-2.546097],[-9.860891,-7.952248,-1.793379,-5.528872,-7.137480,-9.906842,2.661783,3.920367,0.310223],[5.741277,-4.204012,-5.144733,-6.710141,1.692852,-9.909873,9.446976,-6.026380,4.258669],[-1.383855,5.046373,7.386802,9.684699,-8.958975,-1.267423,1.838464,2.080546,0.526217],[-4.310469,7.657200,3.330808,-4.043657,-1.259744,-4.792431,3.258237,4.970613,1.698750],[1.954680,1.495568,6.730548,5.525562,7.806843,6.782186,-5.347888,-0.608399,8.000478],[6.262583,-7.828776,-0.302167,9.230136,8.124195,-1.138868,2.524803,-1.996562,-8.948101],[4.602989,-5.629683,-6.392021,5.164711,2.718864,-2.203702,2.320234,-0.272000,3.521534],[-9.620538,7.772956,6.929531,-7.112899,9.487273,-3.802435,7.858718,8.433460,-2.184447],[9.411520,0.280305,-4.960452,1.272376,8.340379,1.063123,-5.132090,-7.966481,-4.109280]],[[-5.009121,-2.477518,2.497185,5.402207,-6.786770,-9.318854,-0.845435,2.231054,-5.602754],[-9.074771,5.852892,-0.063580,-6.182445,6.125050,-7.915933,9.299390,-0.312035,-4.213459],[-8.465369,-5.786266,-7.007989,0.802380,-9.621562,-0.786752,-9.845266,-6.257222,7.987016],[7.521959,-9.875927,-4.094322,-4.609183,5.121637,9.346833,-4.573028,5.287841,2.131317],[0.535881,-9.000747,9.439537,-9.946166,5.096421,3.268171,6.329524,9.350576,2.317797],[-7.816747,3.358462,4.288364,3.232683,-7.755553,-4.398838,7.183234,-3.043389,-6.844416],[-3.388931,-9.713202,2.059917,-1.742781,-7.979543,-0.547158,8.082560,8.459469,-1.742112],[-4.624261,-9.533419,-1.651275,-4.687713,-4.383370,-0.416109,-5.070071,4.175399,-6.572291],[-1.376266,-6.473703,-0.566222,9.097828,3.667790,-0.061716,8.861186,-5.647904,3.517790],[-5.014080,-3.755721,5.539858,3.356390,1.865242,-7.625242,-5.428634,4.354376,0.310405],[8.239373,7.951779,7.993879,2.604542,-9.746423,-4.564754,-8.709509,2.502717,3.837196],[8.031774,-2.883376,1.354882,0.811454,-7.484185,-5.860011,-3.234675,-0.279574,8.040709],[-5.596860,-0.762281,-9.266628,-9.611945,0.144798,2.500679,-6.168261,-5.021498,6.992990],[2.467137,3.812908,4.951366,3.405347,2.909972,-1.430507,8.508967,6.515197,5.358266],[-1.513305,8.577705,-7.658263,-8.405436,9.033902,5.459898,4.315295,9.344043,-7.709121],[-4.880704,6.848433,1.456337,-2.144600,-5.651221,-8.716190,8.224451,9.574737,0.689702]],[[3.871569,2.880748,-8.472421,-3.226584,7.929103,-0.821647,-5.518753,-6.414693,-9.873036],[5.227272,-6.626371,6.021073,-6.743826,-5.900851,2.401159,2.904353,4.117393,5.390104],[4.990418,0.799801,-7.406082,9.989280,6.584986,-2.455261,0.968517,-8.465153,3.284982],[4.662310,9.330487,9.261351,8.963366,5.905286,6.557512,-6.363553,-8.724807,-0.976901],[3.925526,-8.246935,3.573588,-3.446629,-3.605516,-7.560050,-0.973724,7.758146,0.454353],[-4.507321,0.071084,-1.811300,2.010708,-0.979567,-4.661151,-4.183708,-7.864082,-4.680523],[4.689834,-3.921402,-4.390738,0.310831,-3.772594,-8.691748,0.811751,-7.135649,-8.789023],[-3.380937,0.064219,-4.182896,0.795423,6.862372,7.098294,7.152552,1.436800,-5.769002],[-3.880580,-3.519580,5.170870,7.436758,-7.936597,4.522199,-3.701783,-4.204878,-0.936333],[3.350792,1.971401,3.608944,8.417633,4.693557,3.643586,-1.412892,8.536901,-7.461282],[5.286191,8.411837,-2.832109,-8.585241,-0.757541,-4.423841,8.163383,-8.739603,5.791195],[4.751925,-1.027635,8.490594,2.634106,-9.427969,-9.365986,6.009753,-5.229943,8.183551],[9.138874,1.430265,-2.548350,0.752919,1.379733,-1.046947,4.319571,2.554376,-1.669141],[7.566285,-4.685384,-9.779083,1.942707,-6.094622,8.200347,-3.977145,-4.336550,-7.247132],[2.901622,-6.034153,-8.872891,7.786678,2.886782,6.203947,1.158855,9.122118,-3.171753],[7.192767,4.214436,2.541934,9.480509,3.429974,6.821644,1.274544,1.928159,-7.402753]],[[-4.189098,-4.379102,-4.821019,-0.566140,-6.275820,-3.033404,6.665543,-7.302238,6.438990],[2.849116,4.236902,-3.246783,3.164536,-5.116359,-2.302138,-0.123330,-1.270440,-4.347156],[-4.157513,0.994488,-9.844039,-7.153387,2.664984,-7.953882,-4.654676,7.425535,-2.957407],[5.413040,2.656566,7.374555,-6.606494,5.202081,-7.687436,3.887747,-7.265263,1.394555],[-7.710918,-5.799770,9.033948,5.772446,0.229830,3.795819,-3.148424,1.876121,-2.490413],[8.479072,-0.273149,-6.211970,-7.229210,6.740616,-5.208154,0.694963,-2.056564,-5.015051],[-7.135892,-6.140444,-4.718216,-6.165086,-4.179474,4.673542,-8.530239,8.393318,1.603535],[5.054940,0.162687,-3.479955,4.706683,8.390020,4.805072,8.900246,0.657240,8.769139],[-6.210444,-4.252486,9.686106,5.537845,2.351163,-4.710852,-6.940129,-2.944473,1.565386],[4.810430,7.696578,-6.851873,-8.753285,-9.715834,8.487828,-7.896552,2.864780,-9.111301],[-6.190622,-0.683361,-7.323668,-0.737009,-0.988357,6.762411,6.481630,9.865808,6.416130],[3.756236,2.272312,9.824869,-0.103444,-9.276824,-5.914449,-9.260911,1.736088,-0.269933],[-6.065458,-9.566099,-8.960912,-4.715979,8.128325,-5.180772,6.242566,-0.411473,4.141111],[-3.394696,4.105261,-7.993635,5.125723,-7.473918,9.648342,4.995125,5.539012,7.018343],[2.712467,4.942395,0.959183,8.797984,-6.471775,1.856884,4.446016,5.428460,3.006617],[-7.133671,-5.661335,7.305632,-5.852372,7.796770,-2.255418,3.771459,-9.789372,-7.022900]],[[-5.502001,4.736110,-5.107814,-0.317536,-5.242260,-3.759548,1.269198,-0.559569,-5.059764],[-1.864292,-1.015687,-8.728944,-4.511646,-5.739558,8.372939,-2.864686,-3.662927,-1.764074],[-8.467585,-7.730430,-0.982203,-3.047428,-6.987203,6.372741,-6.177247,7.505500,-5.635059],[-6.276076,5.152137,6.636451,9.416566,-5.041681,5.104587,-9.924154,3.378123,-4.754250],[-2.241904,-0.686005,-6.837894,6.498109,4.543219,0.462986,-5.870407,-6.711852,9.543369],[-1.019605,9.924675,-8.732975,2.456847,-0.459822,-3.093877,-8.237682,-6.974591,8.056875],[1.492916,8.716419,9.119439,-9.472475,-3.238416,2.867575,-9.676421,5.409975,-7.826948],[6.466579,-9.268509,-8.997911,-4.424983,6.607373,4.633136,6.880568,0.929625,3.635141],[-6.918679,2.824190,-6.912083,-8.114357,-3.000779,-8.069279,2.354350,6.546440,-2.320122],[-2.780083,-6.813821,3.026218,-3.633680,-1.811753,7.023614,-2.300365,4.056389,8.724247],[-7.677696,5.517635,0.043105,8.436237,6.022486,-7.048076,0.643224,-8.359129,0.323480],[1.591638,0.847824,6.394372,-6.460627,-5.473936,2.540217,0.090606,2.330627,3.666377],[3.741235,3.625603,1.129302,-8.112021,1.295385,-3.559289,-5.530174,-1.425462,-0.919976],[-2.777850,-8.987007,-1.871611,-9.575454,5.548585,-7.956649,-8.041692,-7.683955,-1.856933],[-1.977679,-5.856913,-2.770431,-7.380084,-1.472340,-8.029676,-8.931717,1.720523,7.611094],[4.330210,-9.000121,8.688824,5.993535,-6.608816,3.841511,9.057658,7.794429,8.818151]],[[-5.715887,-8.768487,7.980474,1.220873,3.093010,-4.569511,0.655923,6.305894,-0.469277],[-0.352071,-9.495505,3.436255,-8.604074,3.724516,-7.871601,2.530853,-8.531836,-6.594447],[-8.053085,-4.483131,-6.887614,-5.509105,-7.280232,1.362495,-2.964786,-6.013201,-0.816748],[-5.264051,-5.725488,-0.464985,5.378078,2.260154,2.824166,6.600557,-2.811442,-9.545857],[-2.404508,-0.385627,-4.861263,7.424473,8.004759,5.570701,-6.054987,-9.766508,-8.436934],[5.609649,-8.964546,6.651128,-9.748303,2.266818,-7.827711,-0.472212,-8.616828,4.679216],[-8.164409,4.690437,-5.227144,-4.650372,8.410526,9.889185,7.349736,8.500192,-3.850197],[-4.487951,3.148115,1.713352,7.944880,-8.869041,-4.217657,-9.577571,-7.972602,-4.330672],[-4.288772,0.255524,-7.138770,1.456387,-9.088730,8.276647,-6.765756,1.891439,-1.756068],[5.531456,-2.723331,1.872331,-0.954084,-3.071815,-9.675108,4.329292,2.777637,-4.985116],[-1.586377,4.406386,-1.781803,6.448228,-6.407586,-7.025114,4.674805,-2.532618,6.153610],[-2.049609,3.866336,-9.343804,7.193876,7.556228,8.259715,-1.120528,8.796024,-5.669447],[0.510837,-2.230972,-6.430924,-8.145980,7.737103,-9.918149,-6.110661,-9.725964,7.138859],[3.939244,-5.216882,9.039107,-5.451773,3.520642,9.086972,9.377169,0.674912,7.037194],[-9.768687,9.664436,-6.657991,-1.847385,-4.162061,5.949036,-1.460198,4.843434,5.031333],[-0.979260,-2.663760,1.874209,1.636154,-1.115458,7.484446,-3.955438,3.822973,5.284527]],[[4.038409,8.299075,-7.319973,4.283781,8.389285,5.336103,9.816659,1.217315,-8.733528],[-5.552970,4.746013,-9.910223,-8.428122,5.537999,5.500624,0.271446,-3.293315,-3.641826],[5.182776,8.311444,-7.646850,6.550479,-2.889168,-0.222823,-9.591280,-9.048383,4.118940],[-2.442964,-1.522718,-8.661642,-4.224436,-9.390143,-6.734071,2.190955,9.222110,-9.315958],[5.903595,0.025801,-8.440539,-4.585511,-9.090494,3.511823,-6.979466,1.123358,4.976770],[-8.473013,-8.187929,-7.854416,4.484319,-5.446979,1.691107,9.332788,9.201796,-7.133974],[-9.355491,-8.225310,-2.707575,-7.907774,1.237791,0.093336,4.017929,-4.241589,-9.124458],[-1.522845,-4.455448,-2.968145,-9.185919,-2.909312,7.190959,7.225679,-8.647096,-9.404581],[7.467751,0.131756,1.756642,8.818631,-8.680466,-1.237429,1.463446,-0.233034,3.974841],[5.447664,-3.830037,5.805501,-0.121277,8.988892,-8.084912,1.940584,4.866136,-1.231834],[6.136469,9.670276,4.483948,2.071984,0.792382,-9.815450,-8.077377,-0.611611,-7.137290],[-7.015829,-4.236201,9.547947,-8.215377,8.640057,6.284458,-0.206652,9.952956,-3.795545],[9.021816,5.128209,1.652482,1.120494,6.258080,4.712011,-8.046434,4.105962,4.276116],[9.191461,9.738129,5.588403,2.357106,-5.641347,-0.207353,3.352965,-9.248691,-9.509336],[0.646460,6.796619,4.362905,-6.942447,7.953590,-5.802358,-2.077627,-8.280512,-6.941249],[-9.675760,5.507628,5.781867,6.781502,6.901319,9.498370,4.897468,6.966404,-4.591503]],[[4.967203,-4.282149,-5.264563,-8.299812,2.245947,-3.765716,-1.978554,6.689223,7.316964],[0.550467,8.250136,-3.625743,-3.692745,2.037131,8.446976,-7.646165,-5.400322,5.265840],[-9.341337,0.289875,-8.923750,4.520475,-6.856540,-9.492072,1.976855,-4.636590,-5.339113],[-4.140518,4.105608,-2.600728,5.685329,6.210531,-9.485864,-6.904792,-8.948675,-4.935272],[8.509765,-5.383744,-2.097773,-6.717213,-1.070469,-2.432580,3.813856,-2.914826,7.777954],[9.786566,7.517198,-8.071037,9.629337,-0.305616,2.997700,-3.446139,0.875883,-6.075903],[8.157143,3.191135,-9.093800,-4.173335,-2.293715,-2.299473,-2.347700,-7.341931,-5.166377],[9.714229,1.709843,-7.594767,-6.466286,-4.607399,1.947798,9.794953,6.324552,-1.101340],[-4.579908,7.126847,8.679995,-6.775475,-8.533037,-1.428611,-2.666929,-0.311432,1.072635],[-4.658159,-5.076620,0.117568,5.117555,-5.232918,-9.363251,-3.520018,-3.056715,8.040451],[5.382040,2.133966,2.975828,4.514178,1.681850,7.461762,-0.464101,-3.842583,-1.834095],[-6.197805,-7.068687,-2.201246,4.473948,2.518274,1.554061,-2.640602,6.592965,-4.290337],[8.214794,-1.016687,1.996079,5.818063,4.720801,-7.631600,-0.262325,2.307762,-6.637471],[4.422009,7.856269,1.271550,3.370516,6.397022,9.858784,4.284843,2.819351,3.876227],[-6.823017,-3.779580,-0.425163,5.283663,3.887808,3.539707,9.691448,-3.472658,3.424436],[2.008760,1.280148,9.952283,-7.929159,8.790087,-4.966990,-6.255563,5.708961,-1.356557]],[[-5.669609,-9.396424,1.331534,1.796951,-9.526258,3.896386,4.965821,6.258662,6.255154],[1.802944,4.063447,-3.875695,8.674582,-1.037500,6.956121,-8.446667,0.918833,-0.604714],[-6.822376,4.072666,1.317237,-2.201915,3.837263,8.891026,5.714740,-0.363879,8.761020],[-2.764748,0.638853,0.333035,-6.310571,-8.422574,5.307260,-8.547098,-4.996588,-0.997920],[-5.783458,-9.558322,-5.206333,-0.269139,-0.151440,5.104481,7.103220,-0.652734,-2.273599],[-6.340412,2.966836,-6.929808,9.629746,-6.048303,-2.160821,8.524655,-8.085476,-8.070246],[1.911832,-2.865524,4.893570,3.782538,6.527650,-5.510958,8.891339,-1.134076,1.356851],[6.331047,0.339346,0.988790,0.498890,-6.089527,-4.771178,-6.805935,-0.506640,-2.071866],[-2.542236,-5.118696,6.973243,-3.142832,6.738260,-2.872911,7.866326,6.286392,3.392619],[9.131811,9.450846,-6.135521,-6.155577,9.701817,2.726909,1.026936,6.471234,-9.719731],[-0.586174,-6.979091,8.088797,-6.070373,-1.584113,-0.618236,-0.788046,-9.461832,5.318190],[-7.217527,-1.325817,-8.325887,4.931037,4.201243,-9.881670,5.613761,-9.054597,-7.578220],[-4.943270,1.401223,1.149217,1.580829,7.912469,0.589869,-3.388479,-9.152464,-5.609641],[8.943776,-8.662407,-3.925669,-6.464871,1.157682,5.493574,-4.577393,3.412663,0.095934],[5.552359,-2.984887,-8.399982,-9.470543,0.325263,2.430345,8.015806,9.872010,-4.096432],[-7.223644,-1.490473,3.063450,-2.821488,2.395347,1.993306,-2.010862,4.455012,2.931108]],[[-0.854118,6.628073,2.125707,2.213601,0.691731,-1.794157,1.457309,-8.443214,1.579792],[9.832990,6.587771,3.298577,1.245314,-6.048852,-9.189423,2.122460,8.416828,6.235693],[5.939172,7.549841,4.903871,-9.744185,6.962068,-8.391910,6.917171,-3.095545,3.642045],[3.463382,2.752668,5.149122,-5.331683,-5.178201,7.859239,-8.912628,5.797845,7.266358],[0.674487,6.662858,-1.842464,1.507870,5.253963,9.923601,1.126755,-2.642006,-2.082538],[1.170080,-3.311454,-8.991819,5.303417,-1.170157,-0.384009,6.434491,-1.549006,-2.266226],[2.880678,-5.547966,4.707843,5.120506,-2.025111,6.251006,5.018331,7.326127,4.285749],[-9.729626,-8.140148,4.747049,-9.422357,5.899214,8.114022,-1.647980,7.113863,0.852641],[-3.149686,-0.008086,-7.909031,1.900898,-5.264205,2.002450,-0.723167,-0.054502,9.057612],[2.466075,-1.184221,-5.855520,8.664750,-4.015877,4.657045,9.148349,-4.991693,-6.957191],[-9.265652,3.397849,2.500383,-1.361352,-0.528439,-5.993624,-3.902008,3.602682,-9.150996],[-3.068072,-6.284190,5.339606,-4.070521,2.246384,-1.788366,-7.447410,3.738977,1.250732],[-1.817383,-5.157512,-2.503957,-9.400350,1.631470,8.625977,1.662575,1.020605,1.185611],[3.483856,5.092994,-5.400501,0.926823,-3.558467,-6.779413,9.614812,9.867927,8.062119],[-4.992462,-0.611329,-9.794907,-4.141037,5.033358,7.827204,-6.753260,6.947036,-7.500268],[0.482362,-0.281859,-2.290180,9.480524,7.477313,-5.015122,-3.086060,9.811541,-4.937206]],[[-8.853545,5.563381,-0.740897,-4.778394,-8.385027,-5.565452,-5.346733,-1.076326,-4.027887],[1.308904,-8.492160,-0.397386,-7.999144,0.280539,-8.272782,8.659128,-0.451930,-3.795113],[2.690796,3.813238,-8.169415,-2.949194,0.227705,7.675303,-7.292942,7.809517,-7.052826],[8.645907,-7.241092,-9.869355,-5.458333,-6.303647,-3.316502,7.482353,6.228649,1.605746],[-3.326539,-9.096329,-0.216674,9.888969,4.826163,3.070961,2.101442,-2.883286,-5.840734],[-4.904975,-1.933194,4.441197,7.010268,-8.685738,-7.171924,6.921634,-4.842104,-3.736051],[6.336230,2.326147,3.004585,-3.684814,8.027197,-4.108466,8.576314,-8.331053,3.033602],[2.611555,-7.155999,-7.166688,6.585926,0.377835,3.094151,9.947887,-9.178354,1.366803],[8.232619,-1.525565,-5.493699,-6.818859,7.882425,7.221249,3.314150,9.904856,7.893867],[-0.391277,3.288497,-8.709934,9.548650,-2.917419,-7.404993,0.330919,9.721598,-0.489776],[2.341529,-3.093237,9.599196,5.018956,-9.212750,-1.345002,-1.727519,-2.201233,-6.453151],[5.552083,-7.928955,8.016451,8.191332,9.689014,-4.060514,4.648174,-0.963533,-9.163959],[3.338759,-3.048342,0.732356,6.694852,4.440515,2.994598,-2.169413,-7.797216,-4.095428],[1.369212,-0.756592,8.638207,-2.367029,-1.022742,-6.150262,-8.425901,4.763851,2.676721],[1.497932,-8.153388,-3.901059,1.924552,-1.399470,-9.526537,2.102109,7.256928,-6.215644],[9.306431,0.884537,8.079924,-5.250622,9.231672,5.643539,-7.821354,-2.290395,5.462448]],[[5.934750,2.931717,-9.570183,-4.298089,-8.400274,-6.530323,-4.123842,7.078810,5.191994],[9.066960,0.636772,8.372498,0.760065,5.579354,7.690685,8.229657,1.986908,-5.512325],[-1.600014,-0.874812,-5.772417,3.076892,-7.461858,-3.544003,1.661296,2.093546,6.665638],[4.776001,7.025774,-3.609566,-2.709822,1.945605,-5.267732,5.821374,-4.523227,3.230819],[-2.741941,-8.742093,-8.541781,0.093582,-9.851893,-8.527576,1.862744,9.530089,-4.705974],[1.908691,5.429975,9.658400,8.956884,-9.716666,-0.249171,-8.649908,-3.017374,7.348574],[-0.847492,-9.525323,0.252080,-4.182130,4.780309,1.147063,7.202915,-9.054875,2.406886],[-0.059840,-1.753449,7.904507,8.062616,-6.495322,-3.974615,-5.936472,-4.083109,6.435480],[9.754645,-2.467165,2.812996,-8.100720,2.363674,4.236844,-2.709725,5.476486,-7.222953],[5.310542,-3.907383,9.272170,9.827340,9.407928,1.308367,-9.941433,-5.108869,3.287090],[-7.453226,-7.710472,-4.679351,5.577103,-6.733338,2.100468,7.729673,-7.221953,-0.594385],[-6.556108,3.514867,1.374470,-2.074284,8.193187,8.646675,6.386938,-7.263698,2.799495],[6.113548,-3.767512,1.148965,7.608812,-1.606785,-2.202606,1.149466,7.638946,1.295915],[7.436726,-6.756113,-6.021115,0.740649,5.656503,-6.837540,-5.903286,6.634207,6.778260],[9.690669,3.208716,-7.213469,-3.599518,-3.146257,-2.760982,0.703423,-1.764743,-6.538269],[9.630833,-4.494222,2.062902,5.707109,-2.084280,-5.541201,0.151911,-1.295245,-2.168333]],[[-7.687855,4.161149,-4.794402,-1.384539,0.553323,1.168148,-8.816392,-9.407077,9.613485],[8.741656,5.016678,-6.990999,1.203721,2.958627,-8.744715,-3.271535,5.672274,-4.386303],[7.441617,6.550017,6.991759,-7.080421,0.408533,-4.691694,-9.443512,5.367174,9.793490],[-8.454953,1.116085,2.967640,7.556654,-9.004540,3.282046,-3.723373,-2.954757,3.220498],[-4.047573,4.126877,-9.285958,-5.746125,4.631388,1.615855,8.311012,1.347952,5.728646],[8.514275,-3.188758,8.643062,-0.198899,-4.728248,1.007775,-9.301711,6.502197,9.580985],[0.962321,-0.680532,5.305299,2.856200,2.713065,0.614222,1.904894,0.127045,1.271899],[1.155924,-5.886159,-9.227709,-3.669498,1.434532,-0.358220,4.462302,5.788792,-3.163239],[2.172674,2.383070,-5.928992,-8.403378,2.973571,9.906234,-8.692105,-1.549523,-8.150295],[0.915005,5.864165,-0.707087,5.803877,7.740770,3.817303,-0.918600,-2.156107,-0.183455],[-3.559678,-5.074836,-2.229686,-4.087165,6.319290,-6.941485,1.145228,-3.496403,-8.138194],[-0.584268,-5.919255,-7.197323,3.525687,8.244692,5.673265,-3.389893,-5.160889,7.894584],[-6.016009,4.712875,9.393898,8.213458,0.483854,7.890443,-0.038853,-2.191342,-5.099250],[6.894008,8.737084,1.877763,-8.310219,-9.519155,-1.518473,1.536006,-2.250202,-8.064480],[-6.432971,-7.919575,5.000188,-0.869306,-6.078100,4.333249,8.918923,-2.516676,6.897744],[6.863000,-7.192898,-5.284874,-9.504193,6.970684,-4.026375,-3.275035,-3.935140,9.387574]]], dtype = "float64")#candidate|330|(14, 16, 9)|const|float64
bop_331 = relay.less_equal(bop_297.astype('bool'), const_330.astype('bool')) # shape=(14, 16, 9)
uop_334 = relay.acosh(uop_295.astype('float64')) # shape=(14, 1, 9)
output = relay.Tuple([bop_281,uop_293,bop_302,bop_305,bop_308,bop_318,bop_321,uop_324,bop_327,bop_331,uop_334,])
output2 = relay.Tuple([bop_281,uop_293,bop_302,bop_305,bop_308,bop_318,bop_321,uop_324,bop_327,bop_331,uop_334,])
F = relay.Function([var_264,var_269,var_276,var_280,var_317,var_326,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_264,var_269,var_276,var_280,var_317,var_326,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_264= np.array([[[6.206727,-8.225517,3.044962,7.888544,4.864857,-2.024597,-3.867127,-1.520315,-2.056038]],[[7.397950,4.243576,8.611786,4.494220,-8.399157,-5.178870,1.330285,-4.023165,6.697070]],[[-9.115381,4.709275,-6.046421,4.035497,-6.717626,8.427884,8.869116,-6.885086,6.791967]],[[-3.221255,-7.759959,-9.215809,9.840165,2.362231,7.828615,-3.916810,8.888733,4.831052]],[[4.046573,-4.868159,9.549229,-0.312476,-5.741717,2.253496,-3.009136,-8.027223,-8.540089]],[[-4.119466,-3.352986,-0.721412,-6.498763,7.601759,-4.400276,3.264293,-5.771256,-3.130211]],[[4.589610,-4.784352,1.494436,-9.525968,-6.081492,-8.799461,4.251738,-4.592608,-0.680764]],[[1.928926,0.710570,-7.791064,-7.297299,-9.492783,-9.529439,-6.463847,2.621216,8.728700]],[[-7.457557,4.394929,8.490745,-7.637880,-4.839582,-5.503540,6.014015,5.562960,4.894849]],[[-0.078194,-0.821793,-8.779600,1.012943,-5.657689,3.048254,4.128507,5.303723,-0.262129]],[[1.123181,3.238643,-8.142918,-8.165586,-6.089431,-5.061239,-8.081690,2.862157,9.913124]],[[5.558580,-1.823980,-6.182786,6.700455,2.168486,-5.485957,0.693503,-3.956647,3.537095]],[[1.958371,-0.157946,2.037464,1.311296,-7.672364,-0.918078,-6.219791,-6.369167,-7.195869]],[[-0.691201,3.030343,-8.212439,-5.427891,9.441663,7.758006,2.570670,-2.483368,-3.796019]]], dtype='float64')
module1.set_input('var_264', input_264)
input_269= np.array([[[-6.808257,2.056905,-4.391412,2.688234,7.403770,1.082193,-4.355005,-4.448692,1.352317],[6.326464,-2.635369,2.831787,0.221159,-7.111143,-6.112686,2.147439,-0.213798,7.315340],[7.824695,6.997115,0.489069,-2.771914,8.930408,2.680959,5.103615,-8.495812,8.705763],[9.804564,-9.168979,-6.187903,-7.358178,6.011078,0.414759,1.014970,0.383574,5.644207],[7.649579,-8.036123,-3.068279,-7.018724,-4.517080,-8.254437,-6.795332,-6.709538,8.973848],[5.161108,0.767576,8.490675,-4.036027,4.910171,6.051676,-8.367791,-3.486768,0.165279],[-5.458003,-6.477483,-1.803152,-1.078401,1.343623,9.007749,2.566141,-8.104706,-7.612876],[3.721773,9.825651,-7.068045,-0.551550,4.675981,-4.228602,4.819675,-1.606923,6.977094],[-1.482546,3.478887,3.409210,0.176083,-6.888720,9.779790,4.352892,5.407677,0.095660],[2.453813,-8.147533,-3.572446,-1.016072,3.237917,0.624074,4.827716,-5.703167,5.586380],[-4.338098,-8.363530,3.553817,5.192917,0.767067,9.836574,-0.120224,-1.668739,5.412246],[2.104054,-8.791503,5.304593,-6.990499,-4.578205,9.351051,-3.803091,-4.729770,-4.794674],[-7.207920,-0.678834,-7.465826,-2.784483,-9.374315,0.445328,3.132268,6.005016,8.197437],[0.924383,-2.094600,-4.283431,-4.064266,1.418003,-1.391532,-4.322468,1.325137,-6.696072],[-0.209078,-9.817914,9.366174,-5.440635,8.789397,-6.210169,-0.277296,-4.073799,6.303214],[2.359086,6.292045,-7.605379,-0.827578,-4.843583,8.772933,-8.877783,9.161657,2.569803]],[[-8.233080,8.589656,6.596814,9.107513,4.160083,-4.862868,-6.043563,-0.224378,-8.137897],[6.638009,2.505807,-7.441688,-6.651590,-2.522751,-0.026325,-8.286454,-8.197208,-8.854423],[-6.961948,1.611630,5.207329,-5.925064,5.945213,4.571159,-1.153028,0.985489,-1.507989],[-7.309902,-3.785570,-2.123554,-3.838050,7.012390,-3.646784,3.608396,4.506399,-5.343263],[-9.071529,5.856866,-1.475694,-8.388533,3.140193,-0.949870,6.612238,0.759884,-3.276691],[-2.677911,-0.600059,4.404707,0.638669,6.565433,6.302961,1.069259,0.333705,-5.191449],[4.900568,-3.550147,-6.130439,-2.222586,3.027858,8.452118,7.634443,0.253833,5.731271],[-1.190235,0.387991,-7.219097,-2.993962,-4.667960,-0.395372,9.043140,2.502005,-2.871820],[-8.888362,-1.945185,-5.407110,1.962582,3.938927,-2.763122,9.124810,-8.910835,-3.299035],[-8.917476,-2.090444,-5.829322,9.939677,5.448029,6.329807,-8.252069,-7.197052,-4.943833],[-6.918894,7.700573,-8.687069,-4.432975,-6.747465,-9.158640,8.469687,6.973519,5.780949],[-6.606647,0.892462,-8.223398,-0.485924,9.273667,0.751836,5.014585,2.314018,6.928223],[-9.193697,-4.642152,-8.214067,-7.701165,8.807820,-1.659315,3.373178,1.155069,-9.996866],[-3.062641,-7.057149,2.013629,3.599597,8.235981,9.827119,-9.308193,-7.513888,8.569238],[5.928451,0.731682,4.248863,2.193174,-5.199731,-9.674530,-2.311469,7.384478,-7.902105],[-9.680484,-3.076193,-5.270155,5.644772,6.865944,9.244131,-9.312964,-8.708957,2.479701]],[[3.041905,3.057617,6.392328,-6.653077,-0.521087,-2.547831,8.007227,-9.041193,-1.869698],[4.237286,9.425836,-3.827947,1.759403,5.050965,-0.650382,-3.995651,3.942412,3.499053],[6.252396,7.204737,-0.381628,-9.069106,-5.047770,3.989017,7.876451,-6.753534,8.734811],[-0.974793,-9.578920,8.119897,-4.143549,-8.321930,9.543049,9.810919,-6.040136,-2.068131],[-6.046222,-6.073439,4.743229,-0.225453,-8.506444,6.143994,9.395183,4.618598,4.386064],[-5.969454,-3.802117,3.268464,-7.915811,-2.018901,7.848190,1.560917,2.730855,6.768547],[6.170331,5.201097,-6.124184,-1.247981,-4.913229,3.354397,-4.611355,-1.848065,1.976574],[-2.172316,-2.816561,-6.478207,4.412942,0.323127,6.425290,1.498564,-1.288428,-5.102065],[2.306875,-0.938700,-2.634092,6.372744,7.178675,7.561976,9.424043,1.507458,-6.132199],[-7.510388,9.614333,-3.332505,-3.848091,-7.689099,2.582135,0.028402,6.071436,-3.372936],[-3.046639,-7.094040,6.517347,-7.994499,5.357064,-8.267384,1.986419,6.293481,8.134820],[8.717967,0.405444,-2.376290,-4.390172,7.780504,-5.971938,-0.828644,8.990236,-4.082897],[-7.826197,8.826784,-3.365177,-8.342512,-3.846983,6.393194,6.886601,9.000701,-7.147657],[0.631419,-7.178952,-9.477655,3.804427,8.428979,9.886876,2.022156,-2.223937,4.885429],[0.770926,-5.428417,2.955740,6.962315,-7.074515,1.109967,-8.032163,2.993664,4.448037],[2.383459,-6.331897,0.441658,4.186811,-4.508591,2.430467,-1.664592,7.799239,7.740116]],[[-1.622731,6.812512,5.152229,5.781791,-3.683731,-5.326761,-3.699158,-4.848272,-5.758637],[-3.751383,-6.887209,4.169060,-1.801274,-5.081560,-8.159465,-3.173744,-3.688028,5.884340],[-9.433416,-5.104934,-0.692133,-1.078146,-8.762076,3.240335,-1.587615,-1.707341,-6.709645],[6.217446,-6.211262,-0.608027,6.614718,5.621210,9.727685,3.991495,-5.603473,-7.715954],[7.722826,3.178184,6.902466,-8.759078,2.944977,-0.276512,2.037641,-2.349152,-9.100597],[-0.139161,-4.373234,0.978122,2.096477,5.539582,-0.753864,-1.340299,2.141487,-4.114866],[-7.998986,-4.182153,3.289886,-2.083543,-4.694949,-2.610792,3.818033,-1.529510,1.579964],[4.740558,1.948683,-0.384585,-0.054084,1.918812,-8.778587,-3.409192,-4.288268,-6.612753],[-0.602456,-0.899866,-2.888196,9.624422,-4.344331,3.888634,6.927315,-3.414724,4.938934],[4.152927,3.011143,1.351387,-3.223929,-0.939893,1.502479,-9.990565,1.464345,-6.562980],[-0.713405,-6.586760,-6.027023,-6.818974,-9.424956,-2.988746,5.179932,-2.406837,-6.944516],[-9.100542,3.777977,7.401312,-1.513644,-1.614447,8.187850,7.004869,-3.638885,-1.579374],[9.769123,5.337208,3.445270,2.991645,3.166717,9.694611,-3.381191,-3.544248,-7.354992],[-1.722954,9.814844,1.044436,1.553375,-3.579051,-1.899496,-0.377825,2.414995,2.212753],[1.751831,7.481156,-4.253424,-9.498371,8.475148,1.149327,7.323299,-2.453673,-4.327394],[1.651964,-8.106915,-4.103838,-0.927156,-9.614674,-3.075613,-7.255472,-7.267118,-2.389088]],[[-9.548023,9.575723,4.493621,6.527511,-4.395427,1.092883,3.736611,5.230126,2.196485],[-6.963140,-4.297379,1.408026,9.865339,0.007552,-7.829491,-3.677889,-9.233520,-6.891188],[-4.256598,-2.916458,4.455400,-0.854000,-3.801781,-3.297158,3.714049,1.466179,5.239076],[-7.913816,-0.624882,-2.737673,5.814492,9.151565,8.564954,6.034139,-5.450393,-6.332366],[3.358389,-6.357749,-2.856761,3.925439,-1.255711,-9.430320,-4.530330,-5.217027,-6.051900],[0.476794,3.845629,9.984671,-7.868854,5.387906,8.739088,-6.989282,-3.439464,-0.860165],[1.058794,-8.759142,5.613291,6.190625,1.452634,-9.855338,-1.635357,0.127749,8.652521],[-9.897823,0.643970,-5.377839,-8.536514,6.864107,9.219304,4.077202,-4.100631,-9.630517],[-2.029872,8.502124,1.626619,4.043804,1.833642,-2.480342,-9.772224,-4.417269,-1.995355],[-0.543573,7.633789,8.395827,8.254646,5.296274,-7.075247,3.122151,6.907250,-9.570412],[1.964553,-7.748882,-3.941204,5.694525,-8.021625,-5.728780,-0.234746,7.529068,-9.287892],[-0.081962,5.214307,1.611031,-6.865018,4.989738,3.020057,-4.582412,6.538567,9.479872],[4.476762,-0.869441,-4.526540,-3.827078,1.598244,-6.813689,-9.712362,-3.504191,-4.876919],[3.611700,-8.876075,-9.089374,-5.839033,-6.803631,-6.995622,1.012743,-0.756780,1.669213],[-3.807124,9.875033,1.028412,-8.130595,9.132047,7.520812,-4.725215,-3.693177,2.151648],[4.004612,0.184116,-9.214368,6.268221,-6.079626,4.777895,6.096799,5.518147,-0.608418]],[[-4.571560,8.564824,0.135233,-4.580672,1.373635,-1.771813,7.476376,1.104311,-3.979381],[-7.895087,6.421568,5.461828,-8.232310,6.719167,-3.052298,-0.278462,-0.953807,-8.634771],[0.068576,7.804859,7.262045,6.889307,1.940599,1.173961,-2.571673,-4.453202,-3.953306],[8.923050,-6.350627,2.450077,-7.658140,5.227457,9.079314,-7.241173,-8.376112,2.987905],[1.433008,3.677736,0.252496,-6.846427,-9.774228,-7.337798,7.340645,-4.848140,-0.592170],[-9.146650,3.845456,8.253570,0.657934,3.748174,4.172842,8.097096,-0.635455,-3.772634],[6.278294,6.656143,2.096053,1.728378,7.477161,-5.836782,3.084778,-3.832867,-6.885273],[3.914610,1.694239,-0.450458,9.316542,-2.262737,-4.802856,-3.993314,9.794359,1.222963],[0.101777,7.555721,-0.240008,-1.143708,-2.222755,0.780860,-4.741394,-5.181957,9.157606],[-5.218221,-7.700793,-8.690852,0.469333,3.556085,2.503750,1.634876,8.519213,5.502506],[-5.423511,2.837210,2.969733,-8.866843,1.428631,8.253905,3.407311,6.691309,-3.112520],[-3.865871,-6.897428,9.438208,-6.488438,-9.009701,5.919163,-8.496962,7.235532,8.216430],[-8.652561,-7.164300,-0.985181,-0.361062,-8.322378,-2.540399,-3.339805,-5.736846,-0.251905],[-7.237127,6.124629,-3.026282,-7.093838,-2.334295,-9.407346,-0.567972,1.574463,-5.344104],[7.225350,3.267384,-8.755662,-6.502465,-7.197207,-1.448901,-6.701929,-3.287287,2.323912],[1.288507,7.914866,-5.364607,1.522691,-8.649520,8.751566,-8.086500,8.155400,-4.703686]],[[6.175324,-4.910328,-3.804343,-9.840846,5.537316,-4.204462,3.696736,8.876913,9.406980],[-4.090385,-8.249643,-0.244257,8.434530,-6.373955,-5.151074,1.347734,-1.613705,-3.623150],[-1.256351,7.661929,9.568202,-2.001456,7.529620,5.475020,1.520354,8.921563,-3.171363],[-9.054807,7.681045,-0.357873,5.873387,5.243792,-0.771610,-3.909843,9.378934,-8.190980],[0.606262,5.247404,-1.261862,-3.191835,8.873455,-4.053917,7.312010,7.202580,8.879625],[-2.943099,2.751407,-8.227759,8.958544,-6.182815,5.966218,0.015502,-3.541085,7.467290],[3.044016,-4.283667,-2.437939,-1.586643,6.590487,-6.312230,-0.896395,-5.101503,-5.288245],[0.880709,7.685507,-6.609622,-5.206208,-7.484705,9.490646,-0.618771,4.211251,7.780391],[7.035449,8.065536,7.743878,8.503855,-1.922572,-1.744774,4.994304,7.916000,9.177159],[4.459936,7.290939,-0.681016,9.082729,-8.941063,-2.785198,-1.511695,5.365848,-8.965819],[8.607116,-4.696816,3.366118,5.119575,-7.102938,-8.206893,-9.030631,-7.105316,7.173992],[-3.550429,9.769354,2.812122,-7.467149,8.183911,1.894097,7.016714,1.032309,-7.034268],[-5.505649,9.040350,-7.271177,-9.678901,7.722309,6.853847,-7.261121,-3.156454,-0.021130],[4.921023,6.121456,-3.243663,-7.367509,-6.083801,-6.171240,9.335648,-6.557267,9.652593],[-8.976348,5.295872,-0.945249,-3.348842,4.935961,-8.256209,-9.275191,-1.097409,-1.158002],[-0.352632,-1.584382,9.433219,8.838830,6.066924,7.547130,5.970798,4.189052,-2.090159]],[[1.500572,-3.220784,2.210298,-0.890042,-5.406151,4.039126,9.854674,3.218886,-9.082042],[-6.516290,2.322190,9.842281,0.963000,-6.967707,-3.427351,-4.204134,5.845657,-5.048133],[-1.546035,-6.973017,3.434115,4.171836,9.685512,8.984936,0.793663,-1.706010,2.142192],[-4.787062,-6.638930,6.079697,4.323730,-4.498771,-1.356712,8.526164,9.184201,3.335627],[6.961967,3.700392,-1.734436,6.091763,9.947491,-4.458863,4.174224,7.517762,-1.547378],[-9.721389,-6.542665,-5.228840,2.530380,0.003091,-9.286258,-4.401520,-0.464881,-2.306195],[-8.943741,-6.378435,2.909738,-9.799898,3.850088,-8.855499,7.521341,0.182917,6.525320],[-0.184258,1.572066,2.113267,6.244610,-5.649855,-0.658066,-0.759564,-8.367368,-0.503387],[5.188864,-6.990311,-2.360152,-1.157331,-8.735199,2.783035,-6.888781,-5.024492,-3.084289],[2.640570,9.912469,9.094124,-1.666085,-7.239946,-0.925427,2.861500,-6.660206,4.942398],[-0.699863,-9.268628,4.281249,8.709091,4.845481,-4.254732,9.889118,4.764608,7.908991],[-9.566483,-6.449442,-8.209426,0.838561,1.847711,1.230780,-7.192398,-5.509627,-5.823391],[7.868764,3.902503,-8.064592,-1.854298,9.191179,-3.329776,-4.189656,7.487570,-8.037486],[4.438987,9.861153,7.912409,5.772409,-9.446106,-9.617872,-0.273735,-6.095923,-5.977651],[6.301020,7.496686,2.901675,1.582423,-3.102251,-7.321000,-2.048801,7.128842,-9.404112],[-6.323616,-5.486168,-6.653094,-3.968044,-2.118375,-1.988628,7.645811,1.631505,0.197267]],[[-5.701152,-1.063633,2.011413,7.902796,7.431506,7.663418,3.923546,6.463345,-8.234539],[-7.565084,-9.259460,-7.294039,-6.062917,-0.808392,-2.519581,-5.954641,-0.571382,6.127398],[2.150300,8.299374,5.716239,0.786321,2.867945,4.979842,-3.441202,-4.869142,-1.062023],[2.881678,-8.707588,4.790351,5.930871,4.280068,-8.878661,2.257757,-2.076274,-9.747061],[8.119108,-1.887711,8.815446,6.555459,-6.204082,-6.537058,-7.575212,5.618199,-3.929841],[2.329769,-1.782000,0.342469,9.432211,-8.096716,-3.781824,-6.301436,-9.914869,-1.099380],[-6.139163,2.761493,2.761971,0.595293,-9.935408,-0.316809,2.895620,-6.889563,-5.359071],[9.664081,7.581378,3.294608,-6.594967,0.539073,9.601801,-0.573756,4.730878,-1.768430],[-7.809014,-0.006479,-4.974012,1.762805,-3.329017,5.778323,9.089238,3.530413,-0.946563],[-5.775177,-7.226839,-4.035762,9.031321,5.056963,-8.000433,9.195817,0.027139,0.367495],[-7.997513,-7.158001,1.701729,-3.753893,-6.668338,3.032622,-3.030973,6.557863,6.601282],[-8.548355,4.893977,-4.958987,0.852795,-3.461219,6.813285,-1.898911,-7.382888,0.008840],[-3.614575,-5.420038,5.246644,-3.901888,-0.492598,-8.073433,8.101277,-4.059354,-9.025766],[-0.314591,1.477070,-7.447733,2.350598,-6.074542,6.842636,5.934625,4.715321,-1.071920],[6.899337,2.655340,9.795502,2.323690,-7.580079,3.511078,-2.199578,0.916470,-0.196232],[7.534366,-9.137943,6.316075,3.767664,-0.819417,-3.599953,7.881804,4.279904,9.074522]],[[-6.583653,0.653721,2.365480,0.491926,-9.073020,9.986878,-5.414162,-2.278789,-3.597655],[1.149301,-7.153839,1.499876,-3.667238,-4.574010,5.664801,-7.538909,7.088648,-5.159429],[-7.648440,-5.319016,-6.141802,0.359701,-7.524003,-9.283239,9.188723,-5.445660,9.780018],[1.830021,-9.034421,8.020312,3.558433,7.999538,2.477276,8.614188,2.151582,-7.871001],[6.977125,8.031124,-0.309294,0.537309,5.292902,5.381876,4.572059,-3.796919,4.237801],[3.607335,-4.432492,5.169394,-8.632039,1.253472,-4.052095,-5.153367,-1.928127,-1.800221],[2.525725,-9.696994,2.438591,2.947604,-8.620101,7.558817,5.254245,1.577059,7.739325],[6.740035,2.922375,-3.073429,-7.704740,-0.314116,-4.584265,5.189487,-9.609871,-6.796345],[-6.547400,-7.364475,4.314801,-0.831887,-5.419104,-2.742131,-2.130334,9.676603,7.874742],[6.264981,-5.328135,-3.020841,-9.981246,-6.444343,2.715037,9.123867,-7.479160,0.266778],[7.210157,-5.338708,2.474766,0.017714,-5.359143,6.888738,-6.576604,-7.871821,-0.001503],[7.543762,-4.422078,2.004282,-2.879317,6.190285,-2.752828,1.904273,-5.914818,1.001846],[-5.240220,4.368895,-3.122091,-0.046372,-7.632045,0.186012,2.046355,1.011140,5.103066],[-9.349084,0.156322,-6.493207,-1.970165,8.822087,-5.499128,-6.518476,-1.688636,2.252040],[-6.370846,2.088239,-6.580446,-8.291661,-4.306265,-1.836629,-4.133203,0.696375,-1.772761],[-5.751291,9.239998,-6.119818,-5.151571,3.913927,-3.637756,1.440986,-2.177234,8.952381]],[[-7.559064,7.331388,-5.554101,-5.650345,-5.490507,-6.326104,6.558522,3.258212,2.381522],[-9.498997,-1.767296,-7.244398,9.543791,7.398629,-0.303785,-8.196063,-5.995587,7.976092],[9.236496,-0.655174,-8.476466,2.993454,6.502651,-8.875642,-5.504683,-9.649182,-9.566913],[1.021377,6.757894,-8.822526,-7.522055,-8.480907,-6.858706,7.652088,5.097871,0.737074],[-8.607918,6.025883,4.828999,-2.218166,9.610876,-7.828336,2.940216,4.934646,-1.034069],[5.508022,-8.608690,-1.545938,4.354177,6.299698,6.454368,-6.868424,1.064341,1.249365],[-2.191547,-2.588515,-6.595206,0.648089,-9.679891,-0.076178,-2.219129,2.296857,3.713157],[8.330335,5.145034,6.037205,3.057089,8.449689,-5.228892,8.319680,-1.753499,-6.705125],[-9.807479,4.517787,-1.316510,-2.358452,2.447998,2.226740,4.671495,9.164283,6.329568],[1.369200,0.690974,8.978538,4.711326,-0.935578,-1.920535,-3.497049,-5.274883,-3.511141],[-4.774737,-1.290459,-0.802804,-9.185268,-9.831283,7.052914,2.975310,5.059740,7.000368],[-2.039306,8.360375,-3.800795,5.276805,7.059427,-2.683727,-4.249795,-3.050101,-5.078799],[-8.351271,-2.643598,4.151284,5.590129,-3.481513,3.544385,0.619505,-7.133614,-8.947731],[9.412441,1.099888,0.501784,-2.989005,-5.634988,-3.392113,7.588043,-2.234267,-2.551648],[0.936364,-1.529707,-6.919709,9.118773,9.975049,-1.984969,9.701319,9.549161,-9.958257],[-3.909486,-7.667624,9.285672,-2.416112,9.618407,-8.700593,-7.467033,2.645347,6.264288]],[[-7.239468,-5.305548,-9.639754,9.718820,-9.836761,8.996692,5.129019,7.139644,-1.735909],[5.478169,1.105929,4.343814,-3.922955,-6.853329,-1.641184,7.792667,-3.607489,-1.487969],[-6.371422,-3.538431,-0.587811,-9.167548,-1.811550,6.716066,-2.098933,7.716913,-3.876473],[-8.176974,-5.079892,-3.161732,-8.475079,2.416066,8.127565,-9.293945,5.667969,-8.950529],[-3.947413,4.753760,-0.756581,4.107257,4.521132,4.794119,-7.699496,-5.746243,-0.149981],[3.141746,-0.967996,4.368771,5.793099,-0.233688,4.542297,-2.762314,2.636373,-8.328627],[1.309244,-2.010004,-5.567250,-5.497050,7.389441,9.470899,2.668485,9.941580,8.007846],[-9.593674,-3.422207,2.244222,3.393876,2.473639,4.782963,6.125068,4.999969,-8.891041],[8.813311,-2.991597,9.981065,-3.391829,9.522376,0.345978,-4.378500,5.103916,-6.436569],[-7.287625,-3.638081,-0.681552,0.366108,-6.658251,0.437747,-5.771653,1.799145,-2.857970],[-4.248979,-4.488630,-6.588603,-0.321340,9.847176,0.083525,-6.430093,6.613519,7.828642],[6.025186,0.681387,7.438288,-6.635565,3.245826,6.357797,-1.747542,-9.674686,3.891560],[-5.221226,-1.998489,5.196755,2.218949,7.832359,-5.027688,-5.687633,-0.100551,-2.855195],[3.880920,0.396445,-3.716027,-0.407920,9.256319,0.962540,0.753606,-5.209545,8.801312],[4.812867,-5.819538,-1.357635,3.359923,-2.910392,-8.913742,9.524984,6.138626,2.860101],[7.995427,-4.722292,-4.851223,9.517073,-8.510949,6.616685,8.646560,-2.355952,-4.233595]],[[2.205130,-8.761435,2.255314,-0.285416,-0.235173,3.411092,3.681763,9.138608,8.057821],[-3.561219,6.018652,6.137816,-8.445170,0.452276,-1.284991,5.088121,2.812002,4.861460],[5.182585,2.941301,9.720333,1.080076,-1.248054,-9.794269,-3.669958,-1.998791,6.357726],[5.692303,2.647015,1.738070,-3.255244,8.998678,-7.461164,-9.020530,-9.269790,0.227669],[-5.210767,-9.250414,5.091845,9.381673,3.429758,6.687613,4.796919,3.160066,9.813908],[-1.070932,1.013959,1.961100,-3.024839,9.056145,0.441655,-3.753083,8.466598,-3.767291],[7.111114,6.681523,-0.791675,-5.309510,1.048219,-3.176222,-3.305104,-5.597132,-4.163678],[3.179425,1.395337,0.067835,4.773261,-0.062195,-6.849598,1.929995,-0.475056,1.971638],[9.283709,-8.148093,9.360232,3.553936,9.284375,2.239852,9.706178,-7.928409,-6.281879],[4.927632,0.354977,-1.744174,9.420157,-6.013026,-9.997692,-5.496227,0.507015,-8.054748],[0.490626,-2.770481,5.541923,-9.454784,-1.511616,3.727205,-8.896313,-9.870050,4.083523],[5.923767,-0.102033,-8.893478,8.204672,-0.383543,-7.974580,0.954871,-9.297933,-1.186623],[-7.324463,-5.282355,-6.768418,8.700404,-1.161091,-9.558228,-0.125914,-0.963978,2.149154],[-3.766179,6.514950,4.893217,3.911045,2.767249,-7.989639,-6.615361,-6.093352,6.066446],[-3.290315,6.814680,-8.131662,-8.539670,-3.164675,0.007374,-0.588468,-2.537893,-5.225845],[1.272726,9.200064,9.589875,-8.556161,-7.086734,-3.451620,0.877918,-4.072289,-1.899971]],[[3.193395,1.011922,2.724712,2.292168,-3.117926,-2.137391,-3.215089,6.835963,-2.806473],[0.617646,-6.782595,-8.954429,-1.710740,5.351409,-2.845756,2.565544,4.631667,3.886679],[-2.452549,-3.050515,2.983309,6.972252,-1.523796,2.161733,-3.504395,3.891158,-7.064796],[9.244248,-0.794948,5.869386,-9.871767,-5.694020,4.948926,1.173346,-0.059469,9.342259],[-0.476141,2.500799,4.962391,7.539074,-3.147815,-9.116473,-2.330982,9.753376,-0.810005],[-3.186319,4.919660,-0.723994,-6.066933,-5.403383,8.434400,-7.900995,9.637468,-2.479158],[-5.571407,-1.009991,3.791761,3.455406,-6.927099,-3.004848,3.414898,-6.645210,7.237157],[-2.675664,-1.975592,-2.932849,-3.780583,6.325766,2.186408,-4.013367,5.901910,-1.503538],[5.134747,0.623639,-9.729945,-2.642512,-4.464143,-0.483189,-8.485731,8.937250,-4.590825],[-3.023702,5.907901,-9.249980,-0.961937,-1.493167,9.474690,-3.506744,8.350716,-1.822797],[4.249308,0.586624,7.234505,3.421717,-9.587283,-6.481480,-7.594522,1.247740,-2.985274],[-6.145425,-7.175447,7.025419,4.197062,-4.468042,1.953474,-2.771290,-5.008511,-8.042806],[-6.673533,1.231800,-4.384979,3.483444,-9.806198,-4.010989,-0.174464,7.029775,-3.689404],[-2.665471,-6.465987,-0.908960,9.107739,-7.592286,-2.194583,-1.140925,-1.152723,-2.053925],[4.017679,-6.450531,-4.541878,9.478800,9.873780,-9.482113,9.744366,-6.518158,4.848135],[4.467884,9.859257,-8.901829,-2.822392,-8.810088,-5.443712,1.536322,-8.218758,-1.236167]]], dtype='float64')
module1.set_input('var_269', input_269)
input_276= np.array([[[7.277444,3.687393,-0.391497,-7.718914,-3.875747,-0.738579,2.047710,8.879432,2.576141],[-4.954758,-0.705105,6.873096,2.653335,-4.132767,-9.271101,4.547834,-7.309037,-5.170313],[-9.602726,-3.217836,9.699373,-2.174852,-7.764779,-8.799206,-8.016199,4.203292,9.029006],[6.847082,-1.847630,5.853516,-3.097257,-1.976917,0.055752,-0.134672,7.564244,5.750353],[6.458155,2.974004,2.924089,5.383858,-7.963712,-0.636070,4.263598,0.491648,2.124698]],[[-2.065729,9.374155,7.021616,-2.009798,-7.599241,-4.828750,-6.907647,1.920998,-3.029275],[4.554446,-4.988100,-5.071504,-8.390572,2.101547,5.749401,-7.475478,-4.400601,-7.494787],[-6.095754,0.761502,-7.735068,-9.466817,3.752981,-0.246659,-2.370142,-9.902864,-9.747713],[9.657614,-5.261766,-0.040760,-6.433417,-8.561088,-4.273339,-4.161858,9.502237,8.612626],[5.327201,-3.298958,2.349617,-9.564212,8.099946,4.973377,-7.217899,-0.686245,0.332136]],[[-2.212948,1.942263,-0.740745,-2.919482,-0.041651,7.625771,7.144255,-6.228005,8.290549],[6.169363,2.269609,-0.044841,-5.497451,-9.110376,-7.862216,1.952941,1.597756,6.541348],[-1.964480,-4.342971,7.661411,-0.365225,-7.865064,-8.591371,-2.136832,-0.439144,-1.189993],[-9.089871,8.044369,0.718539,-9.493755,-8.763465,2.577204,-7.013780,1.012139,5.192854],[-1.742139,-5.957882,-0.451827,-4.100291,-4.631418,-4.678192,-2.962810,1.199637,2.781640]],[[0.802179,2.518389,9.444198,6.665921,-7.152348,-3.681748,8.399598,0.250719,-8.619580],[-7.694552,-7.985970,5.271265,-8.931510,-6.935432,7.266452,-8.066825,1.006385,-4.792971],[2.404453,-9.340105,5.943726,6.205572,8.596389,-6.681211,-7.672304,5.850009,0.100214],[3.556949,-9.993264,3.627531,-0.126468,-0.443146,0.173569,-0.242159,-3.406982,-3.185768],[-8.495852,-3.087162,-6.150532,9.344795,1.537471,9.419058,2.353869,-8.554427,-4.267234]],[[4.769350,-6.071985,3.459985,-5.405932,-2.843201,-1.250139,-4.709257,-0.278047,0.072910],[9.490252,3.439886,3.543745,8.634421,1.663091,-4.064848,7.846178,-6.988437,9.588826],[7.887733,-6.144898,-6.011586,-8.634997,1.503278,3.103689,1.112283,1.235399,1.897900],[-4.348482,9.743968,8.265751,5.762108,9.746433,-9.695781,0.718830,-4.325136,3.995892],[1.144184,-8.617822,-2.664413,4.206896,-7.293293,-8.088903,4.991499,1.520421,-9.106213]],[[-0.119470,2.473682,-1.552225,-0.169810,-4.244121,3.410282,8.683022,6.958784,7.253752],[5.140689,-9.824509,0.515098,0.502327,7.635339,1.357645,7.861432,2.054786,1.408472],[-3.293448,-3.229187,-1.981473,-5.467959,-1.874269,4.214207,4.090617,-6.781123,3.783795],[-8.626935,-9.493998,9.664493,-0.350344,3.465752,5.394098,9.780650,-4.996283,-0.670890],[5.154902,-9.523417,3.520578,3.440529,-1.182053,-6.396190,7.646733,-4.232167,-8.907748]],[[1.197663,6.965372,-2.124418,4.756616,-7.435338,2.944936,-6.837065,-1.047942,-5.878069],[8.163619,-1.915905,5.368703,2.604782,-0.611658,-6.609408,0.883932,4.792030,-4.976030],[6.006710,3.451154,0.799325,7.441456,3.007309,-1.070302,4.633058,2.185313,1.270896],[-2.045821,7.755784,5.740220,8.150491,1.493331,5.519650,-6.835089,4.416189,-5.617390],[8.429926,-9.449411,2.588438,-5.645663,-8.938480,7.522560,4.957335,-1.033177,-9.270680]],[[-2.695273,-8.517041,-7.541043,-8.410605,0.465919,-8.121749,-0.466807,8.148745,-5.801091],[-1.074672,8.920979,-9.737306,-8.526406,-8.347333,-6.304701,-0.232972,-7.922704,-4.964207],[-1.289292,9.385102,-5.316213,-7.522298,6.500810,4.300607,-6.452193,4.482201,8.297821],[-9.566889,7.611835,-7.504958,8.272293,-5.217896,-8.512921,-4.587466,8.770110,-9.932094],[6.025047,2.041070,-0.235720,-2.444877,-5.434187,-7.888365,4.226790,7.011941,3.339468]],[[-3.647564,7.437788,-5.856243,5.909165,-2.865299,-9.206161,-6.306691,6.569112,3.895863],[6.617749,4.990897,9.898099,9.214240,-5.731340,3.164205,-4.018374,7.447314,-2.201818],[1.951293,-6.744473,1.478495,-4.886308,5.119170,8.562712,4.531990,-8.429351,-8.709128],[-8.249261,9.806033,-9.170782,-5.583170,-5.340807,-4.051657,9.599700,7.860946,-0.186017],[4.453607,-3.642715,-2.673405,9.680404,-9.040205,-7.576436,7.521889,-6.967968,-3.801691]],[[0.518069,-8.418948,-9.485299,-6.226030,-5.308969,7.379647,-7.923400,-7.153472,1.383732],[-2.326236,-7.686402,7.813709,5.227640,-7.236141,0.654568,1.533943,1.003274,-3.905008],[-7.679365,-5.571165,-4.382321,1.725321,-7.678355,-4.268663,8.742934,-2.363688,6.444210],[-5.316119,-7.277823,1.283306,1.676445,-0.493455,-7.305041,-2.059730,3.017094,0.197504],[9.107315,9.759871,-2.290880,9.322375,-0.452889,-0.774708,7.154290,5.283398,1.355162]],[[5.922003,6.271303,8.295604,1.298225,-2.102847,-1.951748,-0.130620,1.835924,0.544329],[6.884880,4.786870,-9.008044,-9.582481,-2.803239,4.181926,-6.023780,8.283934,-0.870135],[4.119910,-2.770523,6.574169,5.057840,-0.976235,0.774976,2.055631,1.818389,-9.694481],[-3.946189,7.258638,-8.723828,-1.274685,-8.604043,-0.086491,-2.903837,-4.121555,-8.371151],[-5.634423,1.258408,-0.430415,-2.699433,-7.740659,-1.952398,-4.489006,3.848212,2.272747]],[[-0.458272,-6.073896,4.651753,-1.670276,-4.879010,4.303189,-1.968860,-0.072043,-3.584223],[-0.371321,-7.757082,-2.590537,5.210734,6.044365,9.967833,9.776343,-3.880786,-9.572235],[-9.881150,-2.597223,3.062380,3.032286,0.743783,2.206913,-8.461986,-0.908877,-4.038787],[9.048911,5.490414,-8.368076,-4.032401,3.299757,5.828563,-1.724118,-1.960364,-9.824339],[-8.095079,9.949855,-8.608732,-7.646447,-6.862395,6.809090,4.887822,-8.004879,-3.847760]],[[5.144668,-1.699734,4.338581,-7.677792,-0.881139,-6.323827,-3.599944,-0.673864,-2.910208],[8.424371,-8.862507,-2.793548,-4.577215,-3.950137,-0.022579,-3.054463,7.523489,-0.602837],[-5.927505,7.623771,9.239350,-5.052068,-8.917774,9.948593,7.911899,5.019553,-9.530348],[6.247761,-3.906098,-5.637833,-9.305773,-6.262096,9.693562,0.938674,-2.868453,-9.306015],[-5.211358,3.595660,-7.973371,-1.092897,0.513883,6.297619,1.000537,6.802196,-0.065178]],[[-1.365202,-8.980162,6.482465,-6.776447,1.038719,4.885605,-9.412920,-4.640340,-3.901126],[4.967388,-6.379479,0.262451,-2.051429,5.203236,-1.841732,7.237081,-7.348125,0.544997],[-2.220846,-0.287703,-5.842395,6.006545,-1.288602,5.300698,-8.063829,8.244326,4.391664],[-5.818640,1.246160,4.673441,-4.776893,-4.502257,-3.787312,-2.441492,3.218562,3.075566],[-4.273081,6.568005,-4.434843,0.636622,8.478039,-0.975492,1.754636,-6.909398,-0.267743]]], dtype='float64')
module1.set_input('var_276', input_276)
input_280= np.array([[[True,False,False,False,True,False,True,True,True],[True,True,True,False,False,True,False,True,False],[False,False,True,False,True,True,True,False,True],[False,False,False,True,False,False,False,False,True],[False,True,True,True,True,False,False,True,False],[True,True,False,True,True,False,False,True,False],[True,True,False,False,True,False,True,True,False],[True,True,False,True,True,False,False,False,True],[False,False,False,False,True,True,False,False,True],[True,True,False,True,False,True,True,True,True],[True,False,False,False,True,True,False,False,False],[False,False,False,True,False,False,True,True,True],[True,True,True,False,False,False,False,True,True],[False,False,False,True,False,False,True,False,True],[False,False,False,False,True,False,False,False,True],[False,False,False,True,True,True,False,True,False]],[[True,True,True,False,True,False,False,False,False],[False,True,False,True,True,False,True,True,True],[False,True,False,True,True,False,True,False,True],[False,True,False,False,False,True,False,False,True],[False,False,True,False,False,True,False,True,False],[False,True,False,False,True,True,False,False,True],[False,True,True,True,True,False,True,False,False],[False,False,False,True,False,False,True,False,False],[False,False,False,False,False,True,False,False,False],[False,False,False,True,False,True,False,True,False],[True,False,False,True,True,False,False,False,False],[False,True,False,True,True,False,True,False,True],[False,False,True,False,False,False,False,True,False],[True,False,False,True,True,False,False,False,True],[False,False,False,True,True,True,True,False,True],[False,True,True,True,True,True,False,True,False]],[[False,True,True,True,False,True,True,True,False],[True,True,True,True,False,True,True,True,False],[False,False,False,True,False,True,False,True,False],[False,False,True,False,False,False,True,True,False],[True,False,False,True,False,True,False,True,True],[False,False,False,False,False,True,True,False,True],[False,False,True,True,False,True,False,False,True],[True,False,True,True,True,True,True,False,True],[True,True,False,False,True,False,True,True,True],[False,False,True,True,True,True,False,False,False],[True,False,False,True,True,False,False,True,True],[True,False,False,True,True,True,True,False,False],[False,True,True,True,True,False,False,False,True],[True,True,True,True,False,True,False,True,True],[False,True,False,False,True,False,False,False,False],[True,True,False,True,True,True,False,False,False]],[[False,False,False,True,False,True,False,True,False],[False,True,True,True,False,True,True,False,False],[True,False,False,True,True,True,True,False,True],[False,False,True,False,True,False,True,False,False],[False,True,True,False,True,True,False,False,True],[True,True,True,True,False,True,True,False,False],[False,True,False,True,False,False,True,False,True],[True,True,False,True,False,True,False,False,False],[True,False,False,False,True,True,True,False,True],[False,True,True,False,False,True,False,True,True],[True,False,True,False,True,True,False,False,True],[True,True,True,True,False,False,True,True,True],[False,False,False,False,True,True,True,True,True],[False,False,True,True,True,True,True,True,True],[False,False,True,True,True,False,False,True,True],[False,False,False,False,True,False,False,True,True]],[[True,False,True,True,True,True,False,False,False],[True,True,True,False,True,True,False,False,True],[False,True,False,True,True,False,True,True,True],[False,True,False,True,True,True,False,False,False],[True,False,False,True,True,False,True,False,True],[False,False,False,True,False,True,True,False,False],[False,True,False,True,True,True,False,True,False],[True,True,False,True,True,False,True,False,False],[True,True,False,True,False,False,True,True,False],[False,True,False,False,True,False,False,False,True],[False,False,False,False,True,False,True,False,True],[True,False,True,True,True,True,True,False,True],[True,True,False,False,True,True,False,False,False],[False,False,True,False,False,True,False,True,True],[False,False,True,True,True,True,True,True,True],[False,False,True,True,False,True,True,False,False]],[[True,False,False,True,True,True,False,True,True],[False,True,False,True,False,False,False,True,False],[False,False,True,True,False,True,False,True,True],[True,True,True,False,False,False,False,True,True],[True,False,False,True,False,True,True,True,True],[False,True,True,False,True,True,True,False,False],[False,True,True,False,False,False,True,False,False],[True,True,False,False,False,False,False,True,False],[False,True,True,True,True,False,False,True,False],[False,False,False,False,False,True,True,False,False],[False,False,False,False,True,True,False,False,False],[False,False,True,False,False,False,True,False,True],[False,False,False,False,False,False,False,False,True],[False,False,True,False,False,True,False,False,True],[False,True,True,False,True,True,True,False,False],[False,True,False,True,True,False,False,True,True]],[[False,False,True,True,False,True,True,False,True],[False,False,False,True,False,True,False,False,False],[False,False,False,False,False,False,False,True,True],[False,True,True,True,False,True,True,True,True],[False,False,True,False,True,True,False,False,False],[True,True,False,True,True,False,False,True,False],[False,True,False,True,True,True,False,True,True],[True,False,True,False,False,True,True,False,False],[True,False,True,True,True,False,True,True,True],[False,True,False,False,True,True,False,False,False],[False,True,True,True,False,True,False,True,False],[False,False,False,False,True,True,True,False,False],[True,False,True,False,False,False,False,False,True],[True,True,False,False,True,True,True,False,True],[True,True,False,True,True,True,True,True,False],[False,True,True,True,False,True,False,True,True]],[[True,True,True,False,True,False,False,True,True],[True,False,False,True,True,True,True,False,False],[False,False,True,True,False,False,False,True,True],[True,False,False,False,True,True,True,True,False],[False,False,True,True,True,False,True,False,True],[False,False,False,False,False,False,False,True,False],[False,True,False,True,False,False,True,False,True],[True,False,False,True,False,False,True,True,False],[True,True,False,False,True,False,False,False,True],[False,False,False,True,False,False,True,False,False],[True,True,True,False,False,True,False,False,True],[True,True,False,True,False,True,True,False,True],[False,True,True,True,True,True,True,False,True],[True,True,True,False,False,True,True,False,True],[False,True,True,True,False,False,True,True,False],[True,False,True,False,False,False,True,True,True]],[[False,True,False,True,False,True,True,False,False],[False,True,False,True,True,True,True,False,True],[True,False,False,False,True,True,True,True,True],[True,False,True,False,False,False,False,True,False],[False,False,True,False,False,False,False,False,False],[False,True,False,True,False,False,False,False,True],[True,True,False,False,False,False,True,True,False],[True,True,False,False,True,False,True,True,True],[True,False,True,True,False,False,False,True,False],[False,True,True,False,False,False,False,True,True],[True,False,False,True,False,True,True,False,True],[False,True,False,True,False,False,False,False,False],[False,False,False,False,False,True,True,False,False],[False,True,True,True,False,True,True,True,True],[False,True,True,True,True,False,False,False,True],[False,False,True,True,False,True,True,False,True]],[[False,False,False,False,False,True,True,True,True],[True,False,False,False,False,True,False,False,False],[False,False,False,True,False,False,False,True,False],[True,False,True,True,True,True,True,True,True],[False,True,False,True,False,False,True,False,False],[True,False,False,True,True,False,False,False,True],[False,True,False,True,False,True,False,True,False],[True,False,True,False,False,False,False,True,False],[False,True,True,False,False,True,True,True,False],[True,True,True,False,False,False,True,True,False],[False,True,False,False,False,False,True,False,True],[False,False,False,False,False,True,True,False,True],[True,True,True,True,True,False,False,True,False],[False,False,True,True,False,False,True,False,False],[True,False,False,False,False,False,True,False,False],[False,False,True,False,True,False,True,False,True]],[[True,True,True,False,True,True,True,False,False],[False,True,False,False,True,False,True,True,False],[True,False,True,False,True,True,True,True,False],[True,False,False,True,True,True,False,True,True],[True,True,True,True,True,True,False,True,False],[False,False,True,True,False,False,False,False,True],[True,True,False,True,False,False,True,True,True],[True,True,True,False,True,False,True,False,True],[False,False,False,False,True,True,False,False,True],[False,False,True,True,True,False,True,False,False],[True,True,False,False,False,True,True,False,False],[True,False,True,False,False,True,True,True,False],[False,True,False,True,True,False,False,False,True],[False,True,True,False,False,True,False,False,True],[False,False,False,False,True,False,True,False,False],[True,True,True,True,True,False,False,False,True]],[[False,False,True,False,False,False,True,False,False],[False,True,True,False,True,True,False,True,False],[False,True,False,False,False,True,False,True,False],[False,True,False,False,False,False,True,False,False],[False,True,True,False,False,False,True,False,True],[False,False,False,True,False,True,True,False,True],[True,False,True,True,True,False,False,True,False],[False,False,False,True,False,False,False,True,False],[False,False,False,True,True,False,True,False,False],[True,True,False,False,False,True,True,False,False],[False,False,True,False,False,True,True,True,False],[True,True,True,True,True,True,True,False,False],[True,False,False,True,True,False,True,True,False],[False,True,False,False,True,False,True,True,True],[True,False,False,True,True,False,False,False,True],[True,True,False,False,False,False,False,True,True]],[[False,True,False,True,True,True,True,False,False],[False,True,False,True,False,False,True,True,False],[True,True,False,True,True,False,True,True,False],[True,True,False,False,False,True,False,True,False],[False,False,False,False,False,False,False,True,False],[True,True,False,True,False,True,True,True,False],[True,False,True,False,True,True,False,True,True],[True,False,False,True,False,False,False,False,True],[False,True,False,False,False,True,False,True,False],[False,False,True,False,False,False,False,False,True],[True,False,True,False,True,True,False,False,True],[False,False,True,True,False,False,False,True,False],[True,True,True,True,True,False,True,False,False],[True,False,False,False,True,False,True,True,True],[False,True,True,True,True,False,True,True,False],[True,True,True,False,False,True,True,False,False]],[[True,True,False,True,False,False,True,False,True],[True,False,False,False,False,True,False,False,True],[False,True,False,False,False,True,False,False,True],[True,False,True,True,True,False,False,True,False],[False,False,True,False,False,True,False,False,True],[False,False,True,True,False,False,True,True,True],[False,True,True,True,False,True,True,True,True],[True,True,False,False,False,False,True,False,False],[False,False,True,True,False,True,True,True,False],[True,False,True,False,False,False,False,False,False],[True,True,True,False,False,True,False,False,True],[True,True,True,True,True,True,False,True,False],[False,False,True,False,True,False,True,False,False],[True,False,False,True,True,True,False,False,False],[True,False,False,False,True,False,True,True,True],[True,True,False,True,True,False,False,True,False]]], dtype='bool')
module1.set_input('var_280', input_280)
input_317= np.array([[[9,-5,4,8,-2,-8,6,-9,-8],[10,-9,6,6,6,-4,-7,8,-3],[7,-4,8,8,-10,8,-9,-1,1],[-2,9,-4,-4,-10,-2,-7,-4,8],[1,-5,2,-10,-6,-1,-10,1,3],[-4,8,-3,9,-9,-1,5,2,4],[5,-7,4,-7,-5,4,6,8,4],[-4,9,5,10,-1,-2,-8,-10,-10],[-7,1,-7,-9,-4,1,-8,2,10],[-9,-7,-5,-7,8,10,-4,-8,8],[-9,-2,-5,3,-8,1,10,8,-2],[8,8,9,-7,6,5,3,-2,-6],[-6,2,-4,1,5,-3,4,6,-1],[-1,-5,4,-2,5,1,-3,-2,10],[8,-10,-3,-9,8,1,2,8,1],[-9,-10,-9,6,8,8,4,9,10]],[[8,-9,9,-8,3,8,1,-9,2],[1,-3,-5,-7,1,-2,-10,-2,-9],[-10,-2,4,-9,7,-5,9,6,7],[4,-8,-1,-6,1,1,-1,-8,6],[-2,4,-6,-8,-4,-6,6,4,5],[-6,-8,8,-8,10,9,5,-4,1],[-7,6,5,-10,-2,-7,-10,7,-2],[7,2,-6,-7,4,-2,-3,6,-10],[-1,-4,-7,-9,5,-6,9,-7,-3],[5,5,-1,-4,6,2,-3,-8,-6],[-7,3,1,9,3,4,-10,-3,-6],[-2,9,-2,-5,5,-1,10,8,-2],[-5,10,8,1,2,-2,10,-1,-3],[-3,-8,-6,1,-9,-1,9,-3,-3],[4,-10,10,5,6,-1,10,9,-4],[9,3,6,10,-10,-6,-3,-7,-5]],[[4,8,-9,-1,5,-7,5,6,-5],[-1,-8,5,4,-4,-2,9,-10,-6],[-8,-8,-6,-3,4,-8,4,1,10],[5,5,-6,-8,-4,4,9,-6,-6],[-5,-3,10,5,1,-5,-3,7,-10],[6,-10,8,10,-7,-6,9,1,8],[3,5,-9,-7,1,-2,-8,10,-9],[-3,8,7,2,5,10,-7,7,9],[2,-2,-9,-5,3,5,4,2,10],[5,-5,-7,4,-8,-8,8,-2,-5],[5,7,3,-1,-2,8,4,3,-4],[6,6,10,10,4,-10,-2,8,4],[-1,-10,-10,4,4,5,10,7,-5],[10,4,-7,4,9,1,5,10,7],[-6,6,-8,9,2,4,2,5,1],[-2,3,8,7,-8,-9,-7,-5,4]],[[-3,1,-8,5,2,-7,1,-9,1],[10,1,4,-2,6,3,-3,4,6],[-1,-3,10,-6,-9,7,2,-1,5],[4,6,9,9,-8,5,4,-4,9],[-9,6,9,2,-1,6,-6,-7,10],[4,7,-2,-7,-10,-5,6,5,-2],[3,8,4,-2,-4,-7,-5,6,4],[-4,-6,3,-3,-5,-8,5,-10,-7],[-8,-9,8,-1,-6,4,-4,-10,-1],[4,-1,-6,-6,4,5,2,-10,10],[-6,10,-5,-1,-3,1,-5,9,4],[7,-6,7,2,-9,-10,-2,-7,10],[7,4,4,5,2,5,1,5,-3],[-1,2,5,8,-10,-10,-8,2,8],[-9,5,-8,5,-2,-7,3,-8,-7],[-6,-2,9,-9,-10,10,10,2,-9]],[[4,8,-6,-1,-2,-3,1,3,8],[-5,2,1,-7,1,6,8,4,8],[-10,9,7,2,-1,-1,-10,9,6],[-1,-3,-2,2,9,-7,-8,-5,10],[6,9,-6,8,1,-7,-9,9,3],[-1,1,-3,-8,-7,7,-6,-9,2],[-7,3,-10,-6,9,1,9,6,-1],[-10,1,3,-5,1,-3,-9,-7,-10],[-3,8,-4,-3,-2,-4,-10,-1,2],[-9,10,-10,4,5,4,-10,4,10],[-6,2,3,-10,-10,6,-6,8,-6],[1,10,3,1,-2,1,4,4,-5],[4,4,8,-8,6,2,-6,3,-1],[1,-2,-9,-4,2,1,-7,-5,-8],[2,9,4,1,6,-6,-2,1,10],[9,-2,-2,-8,-9,9,-8,-5,-8]],[[-10,-9,-4,-5,9,-2,-5,3,-2],[2,3,5,-1,2,9,7,10,6],[-8,-10,-7,6,-5,-1,3,9,9],[7,-6,-7,2,2,7,-5,1,2],[2,-1,-8,-6,-8,-6,-10,6,-5],[-8,-7,8,-10,-9,-2,8,10,1],[-4,10,5,-8,2,-10,8,-3,-10],[-9,5,1,10,1,1,-9,-10,-8],[8,9,-1,-6,-5,-6,-1,5,-4],[3,-10,-3,6,-7,-2,3,-10,-9],[-9,3,-5,9,5,-3,-2,2,-1],[-4,-8,7,-5,-1,1,7,-6,-4],[-1,-10,10,-3,10,-6,-10,-9,-9],[-8,7,9,-1,7,-9,10,-5,4],[2,8,5,-2,-2,3,9,6,-3],[1,-3,1,9,-2,2,8,7,7]],[[-7,7,1,-1,-5,4,3,-2,-4],[-8,6,7,-10,-3,10,9,8,9],[7,-10,8,-2,1,-7,9,-10,-9],[-1,2,4,-4,3,8,-1,-3,-9],[7,4,-7,3,-10,9,7,-6,3],[-3,4,9,8,-9,5,4,1,-7],[2,-4,-2,10,2,10,-10,6,-1],[-6,-7,1,-4,3,4,-6,10,7],[-3,-3,6,4,-8,-8,5,9,-8],[5,3,7,-8,4,-1,1,-9,-10],[-10,9,-3,9,10,10,-8,9,-1],[-1,-9,6,-5,5,3,-10,-8,-3],[7,-8,1,6,5,3,4,-6,8],[-5,10,8,5,-8,-7,5,4,3],[-5,7,4,7,-3,-1,4,-5,-5],[-10,2,-7,-1,-5,10,-2,-6,-5]],[[10,-8,-5,-5,6,5,-4,-4,-3],[5,5,-10,-7,10,-1,6,6,-6],[5,-10,-9,4,2,-8,-1,10,3],[1,-2,3,-5,-7,-3,2,2,10],[-8,7,-2,-6,9,9,6,4,-10],[-1,6,-5,-1,-10,8,-4,-4,-8],[-5,-1,8,6,1,-2,-7,-5,-1],[5,-7,4,-4,-4,9,-7,6,-1],[-10,-10,9,2,-7,2,-7,-9,-1],[-4,1,-5,1,7,10,4,6,-8],[8,-10,9,2,-8,-2,3,-4,-5],[-7,1,-4,1,-10,3,-2,10,-5],[-4,6,-9,-1,-4,7,5,6,7],[8,7,6,8,3,10,8,9,5],[10,-8,-2,6,8,-7,1,4,-3],[-9,8,10,4,-1,-2,8,-4,-8]],[[3,6,-5,10,-8,3,-5,-6,-8],[9,4,4,-6,-8,3,7,-2,-9],[5,3,4,-7,-2,-1,9,2,-10],[1,-1,8,-7,-9,-9,-7,8,10],[-8,10,-1,-10,-1,-6,-9,10,-6],[-3,3,-3,10,9,-10,1,-5,9],[2,-6,2,-7,-1,-2,-5,-1,6],[-3,3,-6,10,-2,8,10,-1,-4],[-2,-3,-8,-9,9,-3,3,-3,7],[-1,7,-1,5,5,-2,6,-10,7],[5,2,4,-10,3,-3,-7,9,-8],[-10,-6,6,6,3,4,-5,-4,4],[4,6,9,10,-6,1,3,-6,6],[8,7,-9,9,-9,-1,-2,-6,2],[8,3,-3,9,-4,5,-8,-4,-2],[3,5,6,-4,10,-7,-7,-6,-10]],[[-5,-7,1,-10,2,-3,5,8,9],[-7,-2,-2,3,5,-10,-10,-1,3],[-8,-2,-9,7,-2,-5,10,-3,2],[3,-3,-5,-3,-7,2,10,-4,-10],[-9,8,-3,4,6,-8,-3,2,-1],[-8,-1,-1,-6,3,-5,-5,-2,-10],[6,10,3,8,9,1,-8,4,-5],[-2,-6,-1,10,7,-6,8,-3,4],[6,-2,-4,3,-4,-3,2,8,-2],[10,6,5,6,-6,4,5,-1,-3],[9,-1,2,2,9,1,10,5,-3],[-9,-6,8,-2,1,1,2,-1,5],[-7,7,-6,7,-4,-3,3,-3,-5],[-10,-7,4,-5,10,-1,9,-3,-4],[-7,-6,-5,5,10,-8,3,4,9],[10,6,1,-6,-5,-9,9,-2,-6]],[[-3,-5,-2,-10,3,5,-3,7,4],[9,10,-10,-5,-4,3,3,4,-2],[3,9,7,-7,10,4,-3,5,-6],[-4,-5,7,-10,-7,2,-9,1,-10],[-6,3,-2,10,-9,-1,-2,-6,-3],[7,5,8,-1,-2,-8,3,9,8],[2,-9,4,3,-2,3,4,-9,-3],[-8,-5,-1,3,7,-9,-5,2,9],[3,2,-3,-1,6,-7,10,-5,6],[-9,9,4,10,8,-5,-8,1,4],[-6,10,-8,10,4,2,-3,-2,-7],[-10,-8,-1,-5,1,-10,9,-9,-7],[-8,4,4,4,1,8,2,4,-6],[3,3,-7,-9,8,-7,-7,-2,9],[-1,1,-10,-9,-7,-2,-10,-6,9],[6,2,-5,9,-6,-5,4,1,-7]],[[6,-1,8,8,10,-1,-9,-6,4],[-2,5,3,4,-7,7,-5,-9,6],[4,7,9,-1,-8,-9,-8,5,-8],[3,-10,-10,4,7,-4,3,8,9],[8,8,-9,-8,10,10,4,4,4],[8,-9,-1,10,10,4,9,-3,9],[6,7,-1,-5,-10,8,1,4,-10],[3,-1,-10,-4,8,-6,7,4,-7],[3,-1,-1,9,-2,-1,7,4,9],[-2,5,-10,7,-2,-3,8,-2,-9],[6,4,8,-4,-9,3,-4,-1,-5],[9,-10,4,1,9,1,-6,-5,-6],[-8,-8,-1,-7,7,6,-10,-5,8],[-2,-3,2,-9,10,-3,-9,-7,7],[9,2,1,10,-3,-10,6,9,4],[-1,4,-1,8,-5,6,-4,6,-10]],[[4,-10,5,-9,3,8,1,-4,-3],[-1,4,7,-10,4,-6,6,-4,-10],[-6,10,9,1,-9,7,2,4,-8],[4,1,5,-2,-1,7,5,-10,-5],[3,1,10,6,7,-8,3,2,-1],[3,-10,-2,-6,10,-2,-7,10,-10],[7,4,8,-1,-5,-4,2,10,2],[8,-8,3,5,6,-7,10,4,10],[-6,-10,-5,-7,-2,10,-6,-9,1],[4,-2,-3,-9,-5,-7,-3,-7,3],[-7,-1,-5,10,-1,8,1,-8,-4],[-5,4,-4,-6,-3,1,-7,6,7],[8,5,-8,-3,-4,-3,-4,1,-8],[-8,-3,-9,6,-3,3,4,-9,5],[1,-6,1,-3,-10,4,9,-4,2],[7,9,-8,1,-6,-10,-8,8,-8]],[[-5,-5,-5,-3,-10,7,10,8,5],[6,10,4,2,3,-6,-1,1,-6],[-7,-3,5,9,-3,9,-4,3,6],[6,-1,-9,9,10,10,-8,-4,-3],[10,-8,-10,-2,3,-8,5,8,2],[-5,-9,-3,-10,5,-2,6,-10,-9],[-3,-3,-8,-5,7,-1,1,10,-2],[1,3,-7,-4,-1,9,-3,10,-1],[8,-5,9,4,1,-2,-4,-6,-8],[-4,-8,-5,2,1,5,-4,8,-8],[5,-7,-3,-1,3,-5,-10,3,1],[-7,7,9,-10,7,-2,2,-6,-6],[-9,7,2,-3,1,10,-8,-9,5],[-9,10,-2,10,10,5,4,-10,-6],[-4,-7,-8,9,4,-1,3,-3,-3],[-7,-8,-8,2,-9,-4,9,5,-3]]], dtype='int64')
module1.set_input('var_317', input_317)
input_326= np.array([[[-1.714001,2.246749,0.998977,4.798284,1.531017,6.581269,-1.390174,0.175586,1.187542],[-6.902414,-4.691270,8.938415,4.229590,2.598330,-4.978638,2.619287,-3.425582,8.590885],[-2.862447,-3.355053,6.937642,-5.457878,2.007718,-5.588142,0.113239,9.028525,-9.684196],[1.161421,6.689850,-6.921631,9.457941,-8.358372,-7.152917,5.760862,5.755261,-6.140388]],[[2.504722,-2.784170,-5.272741,4.558684,-9.791154,-2.628730,0.705597,-7.376736,-6.705953],[-6.980658,-6.630391,9.010720,-2.575807,-7.100263,-2.902829,-0.258742,7.622073,-6.414160],[3.791886,-2.076681,-0.686570,-3.022076,-6.113426,-6.953092,-6.196146,-3.559069,-6.191313],[5.695449,-3.145969,-2.354680,3.191453,-3.490785,2.949906,-3.991165,-6.180258,-7.439850]],[[5.698928,-0.972096,-6.096882,-1.811830,4.755299,4.506088,2.503634,-8.509611,-5.164609],[-3.167161,3.110852,0.542070,-7.351536,8.112969,-3.405122,8.216165,9.382168,3.269105],[6.368067,-9.438669,9.298467,-5.008722,-9.847689,-8.094001,1.040749,-4.975481,-6.978246],[5.813619,-6.521004,5.343562,3.773477,-5.147487,6.688850,-9.485542,-6.756981,6.266898]],[[-8.289349,-4.629976,5.454423,-0.649874,8.033936,8.270807,-6.269972,-0.784679,-1.645483],[1.298071,2.184300,-2.243819,0.917095,9.066614,0.765606,9.051775,-2.851941,-4.321026],[0.764874,-1.537975,-9.421003,-9.469865,-9.302107,6.344366,-8.102814,-7.480609,-6.183765],[-1.690935,5.466347,0.267095,1.875051,2.570510,-3.798603,0.954739,-0.142247,4.725143]],[[5.547551,0.188889,-6.592320,-0.818065,6.075222,-7.516140,3.036300,7.269195,-9.817366],[5.861304,-1.444723,9.216782,2.097100,-9.309505,-8.550030,-1.966525,1.283674,-1.908680],[-9.933083,-1.200730,0.375091,8.880870,-0.701429,-3.511725,-1.655776,-8.714063,-4.350814],[5.367469,-3.346574,3.170885,0.581538,-5.869047,0.058620,9.161532,-7.762708,8.458849]],[[-4.641646,-2.881233,3.942098,-8.500644,7.100782,-0.835702,-8.805859,8.041276,8.581110],[-7.558588,-4.971338,9.484941,4.707697,6.267615,0.323640,7.851856,2.190273,-3.153761],[-4.458155,-2.812916,2.750010,1.632302,3.944751,-0.751658,0.284960,7.326895,0.054187],[4.719435,9.457308,-5.304484,5.042054,9.791259,-0.780369,-0.017990,-4.085402,-9.934640]],[[1.560733,6.300794,-0.927817,-9.620861,-4.164379,5.423565,-6.890191,-4.961078,8.156608],[-6.307899,7.679752,3.459747,3.100755,-6.202491,7.561445,3.280678,9.906877,5.086084],[-0.680843,4.841986,2.731475,8.038161,-1.435833,-5.723362,-7.791195,-8.019512,-9.997430],[0.075800,9.905693,4.330303,-8.357444,-8.297000,8.557789,6.231303,1.528416,1.276796]],[[5.844655,-7.934766,-6.710074,8.843382,-1.943116,-9.782564,-2.822669,-6.999795,-9.739248],[-4.962833,8.832163,-0.299148,-5.417235,-0.313462,-4.153223,-3.171023,-6.643641,6.318786],[3.488509,-9.110794,9.367965,-1.348281,-9.215160,9.615953,-0.115855,-5.066889,-3.938454],[2.130876,-9.513491,-7.200291,7.928573,2.869431,-2.611408,-4.367813,0.242845,0.838208]],[[-7.613216,-0.437839,-0.263967,2.392311,8.417806,-5.001976,-0.760668,-4.763419,-5.516336],[3.592562,-3.372295,7.993352,-8.786328,-6.700202,-4.117872,-1.132501,-0.768966,-2.094051],[-2.404586,9.736816,1.845949,-2.938011,9.927364,-9.511676,9.217340,7.366334,-1.481248],[-4.857742,5.506627,2.438352,-0.845007,-7.180188,-2.226497,-1.062833,-2.364673,7.569118]],[[6.076142,5.646876,-5.767362,-9.597571,8.125273,3.700020,2.233220,-4.420244,5.835496],[-6.137858,2.833593,-2.432334,9.833865,2.170709,-6.968641,6.997041,-5.550945,7.744351],[9.907144,-8.338137,8.921821,-2.049094,-1.788059,1.239862,-4.425592,6.924756,-2.579848],[-0.184023,-1.633613,1.209571,-1.993544,4.826090,0.237586,8.163749,-8.376583,-1.506862]],[[-3.427759,-9.408869,0.082174,-4.841737,-5.805172,-2.397896,6.334656,-6.603483,-5.638163],[-6.540769,9.246479,8.125371,-6.904828,8.832232,-5.677277,6.042852,-1.758781,3.521493],[3.506522,-0.155494,-8.854558,3.829254,4.369075,0.701131,4.518168,-8.751131,4.889763],[-1.231372,-7.014294,4.624837,1.950083,0.175479,-1.230590,8.007184,-7.686418,7.506802]],[[-7.148634,-2.524601,2.807684,5.832886,-5.901978,0.124718,7.252619,6.197222,4.534255],[2.873705,6.824098,-1.359991,8.001470,-9.968831,0.323563,-2.936679,-8.087679,9.514577],[7.180648,-5.673529,-0.506889,0.523695,1.172644,-6.375561,9.280898,4.967920,-7.906031],[1.287372,-9.933601,-4.036207,4.927810,0.713545,0.230502,7.667534,-4.328867,-3.545594]],[[0.353059,-3.298959,4.841249,9.933615,-0.416730,1.053574,6.901178,7.078632,-1.046340],[4.832683,-3.710709,2.808640,-8.233350,-3.590113,8.000112,0.200627,5.407240,9.405364],[-9.808260,8.326555,-7.242352,-2.116727,2.329848,0.767421,9.570577,-0.931554,1.929965],[5.117453,-8.306656,-3.825575,3.650957,9.967627,-8.206524,8.485594,9.911011,0.923151]],[[5.871561,1.522532,9.312057,2.474433,-0.197486,6.683204,5.596567,2.327042,-2.576930],[8.716839,3.460004,-0.333809,-2.933693,3.218969,2.977196,4.482226,-8.259177,1.061550],[3.564592,-2.488458,-7.783805,7.137360,-8.435914,-0.873060,5.798539,-8.345117,-9.827822],[-2.347542,-6.715526,-7.478957,-0.083173,2.617053,4.105769,3.738563,3.855747,-8.552420]]], dtype='float64')
module1.set_input('var_326', input_326)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_264, input_269, input_276, input_280, input_317, input_326, )
res3 = intrp3.evaluate()(input_264, input_269, input_276, input_280, input_317, input_326, )
res4 = intrp4.evaluate()(input_264, input_269, input_276, input_280, input_317, input_326, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
module5.set_input('var_264', input_264)
module5.set_input('var_269', input_269)
module5.set_input('var_276', input_276)
module5.set_input('var_280', input_280)
module5.set_input('var_317', input_317)
module5.set_input('var_326', input_326)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_264, input_269, input_276, input_280, input_317, input_326, )
res7 = intrp7.evaluate()(input_264, input_269, input_276, input_280, input_317, input_326, )
res8 = intrp8.evaluate()(input_264, input_269, input_276, input_280, input_317, input_326, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
module9.set_input('var_264', input_264)
module9.set_input('var_269', input_269)
module9.set_input('var_276', input_276)
module9.set_input('var_280', input_280)
module9.set_input('var_317', input_317)
module9.set_input('var_326', input_326)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_264, input_269, input_276, input_280, input_317, input_326, )
res11 = intrp11.evaluate()(input_264, input_269, input_276, input_280, input_317, input_326, )
res12 = intrp12.evaluate()(input_264, input_269, input_276, input_280, input_317, input_326, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
module13.set_input('var_264', input_264)
module13.set_input('var_269', input_269)
module13.set_input('var_276', input_276)
module13.set_input('var_280', input_280)
module13.set_input('var_317', input_317)
module13.set_input('var_326', input_326)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_264, input_269, input_276, input_280, input_317, input_326, )
res15 = intrp15.evaluate()(input_264, input_269, input_276, input_280, input_317, input_326, )
res16 = intrp16.evaluate()(input_264, input_269, input_276, input_280, input_317, input_326, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
module17.set_input('var_264', input_264)
module17.set_input('var_269', input_269)
module17.set_input('var_276', input_276)
module17.set_input('var_280', input_280)
module17.set_input('var_317', input_317)
module17.set_input('var_326', input_326)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_264, input_269, input_276, input_280, input_317, input_326, )
res19 = intrp19.evaluate()(input_264, input_269, input_276, input_280, input_317, input_326, )
res20 = intrp20.evaluate()(input_264, input_269, input_276, input_280, input_317, input_326, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
module21.set_input('var_264', input_264)
module21.set_input('var_269', input_269)
module21.set_input('var_276', input_276)
module21.set_input('var_280', input_280)
module21.set_input('var_317', input_317)
module21.set_input('var_326', input_326)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_264, input_269, input_276, input_280, input_317, input_326, )
res23 = intrp23.evaluate()(input_264, input_269, input_276, input_280, input_317, input_326, )
res24 = intrp24.evaluate()(input_264, input_269, input_276, input_280, input_317, input_326, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()

'''22: TVMFuncCall
21: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::transform::Pass, tvm::IRModule)>::AssignTypedLambda<tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}>(tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
16: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
15: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
14: tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}::operator()(tvm::IRModule, tvm::transform::PassContext) const [clone .isra.405]
13: tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}::operator()(tvm::IRModule, tvm::transform::PassContext) const::{lambda(tvm::relay::LetList*)#1}::operator()(tvm::relay::LetList) const [clone .constprop.436]
12: _ZNSt17_Function_handlerIFSt10sha
11: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::relay::FunctionNode const*)::{lambda(std::vector<std::shared_ptr<tvm::relay::ADValueNode>, std::allocator<std::shared_ptr<tvm::relay::ADValueNode> > > const&, tvm::relay::Call const&)#1}::operator()(std::vector<std::shared_ptr<tvm::relay::ADValueNode>, std::allocator<std::shared_ptr<tvm::relay::ADValueNode> > > const&, tvm::relay::Call const&) const
10: tvm::relay::FirstOrderReverseAD::VisitExpr(tvm::RelayExpr const&)
9: _ZZN3tvm5relay11ExprFunctorIFSt10shared_
8: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::relay::TupleNode const*)
7: tvm::relay::FirstOrderReverseAD::VisitExpr(tvm::RelayExpr const&)
6: _ZZN3tvm5relay11ExprFunctorIFSt10shared_
5: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::FirstOrderReverseAD::VisitExpr(tvm::RelayExpr const&)
3: _ZZN3tvm5relay11ExprFunctorIFSt10shared_
2: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::OpNode const*)
1: _ZN3tvm17DiagnosticContext9EmitFatalERKNS_1
0: tvm::DiagnosticContext::Render()

'''