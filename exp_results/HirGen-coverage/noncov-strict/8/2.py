import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "uint8", shape = (2, 10))#candidate|0|(2, 10)|var|uint8
var_1 = relay.var("var_1", dtype = "uint8", shape = (2, 10))#candidate|1|(2, 10)|var|uint8
bop_2 = relay.bitwise_xor(var_0.astype('uint8'), relay.reshape(var_1.astype('uint8'), relay.shape_of(var_0))) # shape=(2, 10)
uop_5 = relay.rsqrt(var_1.astype('float32')) # shape=(2, 10)
var_7 = relay.var("var_7", dtype = "float32", shape = (2, 10))#candidate|7|(2, 10)|var|float32
bop_8 = relay.multiply(uop_5.astype('float64'), relay.reshape(var_7.astype('float64'), relay.shape_of(uop_5))) # shape=(2, 10)
uop_11 = relay.cosh(uop_5.astype('float64')) # shape=(2, 10)
uop_13 = relay.exp(uop_11.astype('float32')) # shape=(2, 10)
bop_15 = relay.bitwise_and(uop_11.astype('uint32'), relay.reshape(uop_13.astype('uint32'), relay.shape_of(uop_11))) # shape=(2, 10)
uop_18 = relay.sqrt(bop_15.astype('float32')) # shape=(2, 10)
uop_20 = relay.atan(bop_15.astype('float64')) # shape=(2, 10)
bop_22 = relay.equal(bop_15.astype('bool'), relay.reshape(uop_5.astype('bool'), relay.shape_of(bop_15))) # shape=(2, 10)
bop_25 = relay.bitwise_and(uop_18.astype('uint8'), relay.reshape(uop_20.astype('uint8'), relay.shape_of(uop_18))) # shape=(2, 10)
uop_28 = relay.acos(bop_22.astype('float32')) # shape=(2, 10)
bop_30 = relay.floor_mod(uop_20.astype('float32'), relay.reshape(uop_13.astype('float32'), relay.shape_of(uop_20))) # shape=(2, 10)
bop_33 = relay.equal(uop_18.astype('bool'), relay.reshape(bop_8.astype('bool'), relay.shape_of(uop_18))) # shape=(2, 10)
uop_36 = relay.sin(uop_18.astype('float32')) # shape=(2, 10)
uop_38 = relay.tan(uop_36.astype('float64')) # shape=(2, 10)
uop_40 = relay.asin(uop_20.astype('float32')) # shape=(2, 10)
uop_42 = relay.log(uop_40.astype('float64')) # shape=(2, 10)
bop_44 = relay.bitwise_or(uop_38.astype('int32'), relay.reshape(bop_25.astype('int32'), relay.shape_of(uop_38))) # shape=(2, 10)
bop_47 = relay.floor_mod(bop_30.astype('float64'), relay.reshape(uop_38.astype('float64'), relay.shape_of(bop_30))) # shape=(2, 10)
output = relay.Tuple([bop_2,uop_28,bop_33,uop_42,bop_44,bop_47,])
output2 = relay.Tuple([bop_2,uop_28,bop_33,uop_42,bop_44,bop_47,])
func_50 = relay.Function([var_0,var_1,var_7,], output)
mod['func_50'] = func_50
mod = relay.transform.InferType()(mod)
var_51 = relay.var("var_51", dtype = "uint8", shape = (2, 10))#candidate|51|(2, 10)|var|uint8
var_52 = relay.var("var_52", dtype = "uint8", shape = (2, 10))#candidate|52|(2, 10)|var|uint8
var_53 = relay.var("var_53", dtype = "float32", shape = (2, 10))#candidate|53|(2, 10)|var|float32
output = func_50(var_51,var_52,var_53,)
func_54 = relay.Function([var_51,var_52,var_53,], output)
mutated_mod['func_54'] = func_54
mutated_mod = relay.transform.InferType()(mutated_mod)
var_56 = relay.var("var_56", dtype = "float32", shape = (2, 10, 10))#candidate|56|(2, 10, 10)|var|float32
uop_57 = relay.sin(var_56.astype('float32')) # shape=(2, 10, 10)
output = relay.Tuple([uop_57,])
output2 = relay.Tuple([uop_57,])
func_59 = relay.Function([var_56,], output)
mod['func_59'] = func_59
mod = relay.transform.InferType()(mod)
mutated_mod['func_59'] = func_59
mutated_mod = relay.transform.InferType()(mutated_mod)
var_60 = relay.var("var_60", dtype = "float32", shape = (2, 10, 10))#candidate|60|(2, 10, 10)|var|float32
func_59_call = mutated_mod.get_global_var('func_59')
call_61 = func_59_call(var_60)
output = call_61
func_62 = relay.Function([var_60], output)
mutated_mod['func_62'] = func_62
mutated_mod = relay.transform.InferType()(mutated_mod)
var_64 = relay.var("var_64", dtype = "float32", shape = (16, 14, 15))#candidate|64|(16, 14, 15)|var|float32
uop_65 = relay.asinh(var_64.astype('float32')) # shape=(16, 14, 15)
var_67 = relay.var("var_67", dtype = "float32", shape = (16, 14, 15))#candidate|67|(16, 14, 15)|var|float32
bop_68 = relay.floor_mod(var_64.astype('float64'), relay.reshape(var_67.astype('float64'), relay.shape_of(var_64))) # shape=(16, 14, 15)
bop_71 = relay.not_equal(bop_68.astype('bool'), relay.reshape(var_67.astype('bool'), relay.shape_of(bop_68))) # shape=(16, 14, 15)
var_74 = relay.var("var_74", dtype = "float32", shape = (16, 14, 15))#candidate|74|(16, 14, 15)|var|float32
bop_75 = relay.bitwise_xor(uop_65.astype('uint16'), relay.reshape(var_74.astype('uint16'), relay.shape_of(uop_65))) # shape=(16, 14, 15)
uop_78 = relay.rsqrt(var_74.astype('float64')) # shape=(16, 14, 15)
var_80 = relay.var("var_80", dtype = "float64", shape = (16, 14, 15))#candidate|80|(16, 14, 15)|var|float64
bop_81 = relay.greater(uop_78.astype('bool'), relay.reshape(var_80.astype('bool'), relay.shape_of(uop_78))) # shape=(16, 14, 15)
uop_84 = relay.asinh(uop_78.astype('float32')) # shape=(16, 14, 15)
uop_86 = relay.exp(uop_84.astype('float32')) # shape=(16, 14, 15)
bop_88 = relay.equal(uop_84.astype('bool'), relay.reshape(var_74.astype('bool'), relay.shape_of(uop_84))) # shape=(16, 14, 15)
output = relay.Tuple([bop_71,bop_75,bop_81,uop_86,bop_88,])
output2 = relay.Tuple([bop_71,bop_75,bop_81,uop_86,bop_88,])
func_91 = relay.Function([var_64,var_67,var_74,var_80,], output)
mod['func_91'] = func_91
mod = relay.transform.InferType()(mod)
var_92 = relay.var("var_92", dtype = "float32", shape = (16, 14, 15))#candidate|92|(16, 14, 15)|var|float32
var_93 = relay.var("var_93", dtype = "float32", shape = (16, 14, 15))#candidate|93|(16, 14, 15)|var|float32
var_94 = relay.var("var_94", dtype = "float32", shape = (16, 14, 15))#candidate|94|(16, 14, 15)|var|float32
var_95 = relay.var("var_95", dtype = "float64", shape = (16, 14, 15))#candidate|95|(16, 14, 15)|var|float64
output = func_91(var_92,var_93,var_94,var_95,)
func_96 = relay.Function([var_92,var_93,var_94,var_95,], output)
mutated_mod['func_96'] = func_96
mutated_mod = relay.transform.InferType()(mutated_mod)
var_98 = relay.var("var_98", dtype = "float32", shape = ())#candidate|98|()|var|float32
uop_99 = relay.atanh(var_98.astype('float32')) # shape=()
uop_101 = relay.atanh(var_98.astype('float64')) # shape=()
uop_103 = relay.asinh(uop_101.astype('float64')) # shape=()
bop_105 = relay.equal(uop_103.astype('bool'), uop_101.astype('bool')) # shape=()
var_108 = relay.var("var_108", dtype = "bool", shape = (16, 9, 9))#candidate|108|(16, 9, 9)|var|bool
bop_109 = relay.bitwise_and(bop_105.astype('int32'), var_108.astype('int32')) # shape=(16, 9, 9)
uop_112 = relay.atan(var_108.astype('float32')) # shape=(16, 9, 9)
bop_114 = relay.minimum(var_108.astype('int16'), relay.reshape(uop_112.astype('int16'), relay.shape_of(var_108))) # shape=(16, 9, 9)
bop_117 = relay.not_equal(bop_105.astype('bool'), var_108.astype('bool')) # shape=(16, 9, 9)
bop_120 = relay.maximum(bop_105.astype('int8'), uop_99.astype('int8')) # shape=()
bop_123 = relay.maximum(var_98.astype('int8'), bop_120.astype('int8')) # shape=()
func_50_call = mod.get_global_var('func_50')
func_54_call = mutated_mod.get_global_var('func_54')
var_127 = relay.var("var_127", dtype = "uint8", shape = (20,))#candidate|127|(20,)|var|uint8
call_126 = relay.TupleGetItem(func_50_call(relay.reshape(var_127.astype('uint8'), [2, 10]), relay.reshape(var_127.astype('uint8'), [2, 10]), relay.reshape(var_127.astype('float32'), [2, 10]), ), 0)
call_128 = relay.TupleGetItem(func_54_call(relay.reshape(var_127.astype('uint8'), [2, 10]), relay.reshape(var_127.astype('uint8'), [2, 10]), relay.reshape(var_127.astype('float32'), [2, 10]), ), 0)
bop_129 = relay.bitwise_xor(uop_112.astype('int32'), uop_99.astype('int32')) # shape=(16, 9, 9)
bop_132 = relay.subtract(uop_112.astype('int64'), relay.reshape(bop_117.astype('int64'), relay.shape_of(uop_112))) # shape=(16, 9, 9)
bop_135 = relay.right_shift(bop_129.astype('uint16'), relay.reshape(bop_109.astype('uint16'), relay.shape_of(bop_129))) # shape=(16, 9, 9)
uop_138 = relay.asin(bop_120.astype('float64')) # shape=()
var_140 = relay.var("var_140", dtype = "float64", shape = (6,))#candidate|140|(6,)|var|float64
bop_141 = relay.add(uop_138.astype('int8'), var_140.astype('int8')) # shape=(6,)
uop_144 = relay.tan(uop_103.astype('float64')) # shape=()
uop_146 = relay.rsqrt(bop_114.astype('float64')) # shape=(16, 9, 9)
bop_148 = relay.logical_xor(uop_138.astype('int16'), bop_135.astype('int16')) # shape=(16, 9, 9)
uop_151 = relay.acosh(bop_148.astype('float64')) # shape=(16, 9, 9)
bop_153 = relay.left_shift(uop_151.astype('uint32'), bop_123.astype('uint32')) # shape=(16, 9, 9)
bop_156 = relay.bitwise_or(bop_141.astype('uint8'), uop_138.astype('uint8')) # shape=(6,)
uop_159 = relay.asinh(var_98.astype('float64')) # shape=()
uop_161 = relay.atan(bop_153.astype('float64')) # shape=(16, 9, 9)
func_59_call = mod.get_global_var('func_59')
func_62_call = mutated_mod.get_global_var('func_62')
const_164 = relay.const([-0.122706,3.966602,7.233493,8.958966,-1.782632,-5.394932,9.469107,3.104000,-6.874378,2.855322,-9.564950,9.819789,-2.167089,7.634232,-3.707499,-6.563595,-5.662879,-2.384694,-1.890128,-8.374831,1.541750,-8.614348,-8.395367,5.759602,6.507803,-0.145347,-8.844002,-1.515832,0.511199,-2.604040,3.512401,-7.345338,-4.371371,1.079079,-5.803869,9.064781,-9.329430,1.871400,-6.760099,9.775269,6.735166,2.947776,6.184358,-5.935648,8.827094,-1.597232,5.375096,-7.061010,-0.426642,-5.428956,-9.711328,-3.868383,5.645029,8.596765,-2.513694,-6.686729,1.583576,7.173889,3.262835,5.780294,-3.096419,2.186518,-1.166424,6.209852,5.469738,5.892779,-5.712432,1.557606,5.856158,7.546433,2.984959,3.071797,5.484933,-9.636360,-1.062497,0.711089,5.702140,-3.629281,-0.165977,-4.354181,-1.633969,2.805263,3.377231,-4.579401,-4.151949,6.671184,1.474246,-9.193527,1.449776,-0.125472,-9.223878,5.047932,-8.514438,8.836011,4.084213,0.155335,1.126788,-1.641404,3.404638,-6.143353,-2.980707,4.457947,-7.625780,-3.447740,-5.837401,-5.677596,-1.572944,5.183427,9.984187,-0.034292,-8.672308,-8.410426,-8.350612,1.730192,-1.558872,3.706286,2.398750,-2.569257,-3.069350,1.233736,0.524046,2.564531,0.212498,0.310185,2.741642,-5.316229,4.843912,-5.415957,2.170421,9.526036,4.164348,1.469224,0.912152,-2.935177,-9.252348,7.918563,8.190274,-4.220952,0.001539,-5.589404,9.769140,-5.375084,2.872966,-6.738152,-0.826517,-5.755896,0.933420,-3.246497,-3.026841,-2.544441,0.469603,-8.632904,0.470989,5.771033,-5.836677,5.920535,-1.329700,-6.852401,-1.234848,8.443570,-5.560655,-5.029529,9.178297,5.901319,-7.837752,-2.957869,5.035746,-5.054660,3.360643,4.761994,3.386629,5.290905,-7.403331,-2.445594,9.764819,-2.850458,1.680517,2.121688,3.218740,-0.057998,-3.994357,3.305027,-7.756461,-6.893664,-1.993182,3.210428,7.230604,4.995442,1.909552,-0.440125,4.236690,-9.167203,-7.302792,6.905416,-6.478117,3.099787,5.490753,-0.523589,-9.163415,8.029375], dtype = "float32")#candidate|164|(200,)|const|float32
call_163 = relay.TupleGetItem(func_59_call(relay.reshape(const_164.astype('float32'), [2, 10, 10])), 0)
call_165 = relay.TupleGetItem(func_62_call(relay.reshape(const_164.astype('float32'), [2, 10, 10])), 0)
uop_166 = relay.log2(uop_161.astype('float64')) # shape=(16, 9, 9)
uop_168 = relay.sqrt(uop_161.astype('float64')) # shape=(16, 9, 9)
bop_170 = relay.left_shift(uop_166.astype('int8'), uop_144.astype('int8')) # shape=(16, 9, 9)
uop_173 = relay.log10(uop_168.astype('float64')) # shape=(16, 9, 9)
bop_175 = relay.floor_divide(uop_173.astype('float32'), bop_123.astype('float32')) # shape=(16, 9, 9)
uop_178 = relay.acos(bop_175.astype('float64')) # shape=(16, 9, 9)
bop_180 = relay.add(uop_144.astype('int64'), call_163.astype('int64')) # shape=(2, 10, 10)
bop_183 = relay.add(uop_144.astype('int64'), call_165.astype('int64')) # shape=(2, 10, 10)
bop_184 = relay.floor_mod(uop_178.astype('float32'), uop_99.astype('float32')) # shape=(16, 9, 9)
output = relay.Tuple([call_126,var_127,bop_132,uop_146,bop_156,uop_159,const_164,bop_170,bop_180,bop_184,])
output2 = relay.Tuple([call_128,var_127,bop_132,uop_146,bop_156,uop_159,const_164,bop_170,bop_183,bop_184,])
func_187 = relay.Function([var_98,var_108,var_127,var_140,], output)
mod['func_187'] = func_187
mod = relay.transform.InferType()(mod)
var_188 = relay.var("var_188", dtype = "float32", shape = ())#candidate|188|()|var|float32
var_189 = relay.var("var_189", dtype = "bool", shape = (16, 9, 9))#candidate|189|(16, 9, 9)|var|bool
var_190 = relay.var("var_190", dtype = "uint8", shape = (20,))#candidate|190|(20,)|var|uint8
var_191 = relay.var("var_191", dtype = "float64", shape = (6,))#candidate|191|(6,)|var|float64
output = func_187(var_188,var_189,var_190,var_191,)
func_192 = relay.Function([var_188,var_189,var_190,var_191,], output)
mutated_mod['func_192'] = func_192
mutated_mod = relay.transform.InferType()(mutated_mod)
var_194 = relay.var("var_194", dtype = "float64", shape = ())#candidate|194|()|var|float64
uop_195 = relay.asin(var_194.astype('float64')) # shape=()
var_197 = relay.var("var_197", dtype = "float64", shape = (6, 12))#candidate|197|(6, 12)|var|float64
bop_198 = relay.multiply(uop_195.astype('float64'), var_197.astype('float64')) # shape=(6, 12)
uop_201 = relay.erf(uop_195.astype('float32')) # shape=()
bop_203 = relay.add(uop_201.astype('uint32'), var_197.astype('uint32')) # shape=(6, 12)
bop_206 = relay.minimum(var_194.astype('uint32'), bop_203.astype('uint32')) # shape=(6, 12)
uop_209 = relay.log10(bop_203.astype('float64')) # shape=(6, 12)
bop_211 = relay.floor_divide(uop_209.astype('float64'), uop_195.astype('float64')) # shape=(6, 12)
uop_214 = relay.asin(uop_209.astype('float32')) # shape=(6, 12)
var_216 = relay.var("var_216", dtype = "float64", shape = (7, 2, 5))#candidate|216|(7, 2, 5)|var|float64
bop_217 = relay.right_shift(uop_195.astype('int64'), var_216.astype('int64')) # shape=(7, 2, 5)
var_220 = relay.var("var_220", dtype = "float64", shape = (6, 12))#candidate|220|(6, 12)|var|float64
bop_221 = relay.less_equal(uop_209.astype('bool'), relay.reshape(var_220.astype('bool'), relay.shape_of(uop_209))) # shape=(6, 12)
var_224 = relay.var("var_224", dtype = "float32", shape = (6, 12))#candidate|224|(6, 12)|var|float32
bop_225 = relay.equal(uop_214.astype('bool'), relay.reshape(var_224.astype('bool'), relay.shape_of(uop_214))) # shape=(6, 12)
func_50_call = mod.get_global_var('func_50')
func_54_call = mutated_mod.get_global_var('func_54')
const_229 = relay.const([1,6,-6,-1,-9,-10,10,-2,-9,3,-9,10,1,5,3,6,7,-7,6,-9], dtype = "uint8")#candidate|229|(20,)|const|uint8
call_228 = relay.TupleGetItem(func_50_call(relay.reshape(const_229.astype('uint8'), [2, 10]), relay.reshape(const_229.astype('uint8'), [2, 10]), relay.reshape(const_229.astype('float32'), [2, 10]), ), 1)
call_230 = relay.TupleGetItem(func_54_call(relay.reshape(const_229.astype('uint8'), [2, 10]), relay.reshape(const_229.astype('uint8'), [2, 10]), relay.reshape(const_229.astype('float32'), [2, 10]), ), 1)
var_231 = relay.var("var_231", dtype = "bool", shape = (6, 12))#candidate|231|(6, 12)|var|bool
bop_232 = relay.power(bop_225.astype('float32'), relay.reshape(var_231.astype('float32'), relay.shape_of(bop_225))) # shape=(6, 12)
bop_235 = relay.greater_equal(uop_214.astype('bool'), relay.reshape(uop_209.astype('bool'), relay.shape_of(uop_214))) # shape=(6, 12)
uop_238 = relay.acos(bop_203.astype('float64')) # shape=(6, 12)
var_240 = relay.var("var_240", dtype = "float32", shape = (6, 12))#candidate|240|(6, 12)|var|float32
bop_241 = relay.power(bop_232.astype('float32'), relay.reshape(var_240.astype('float32'), relay.shape_of(bop_232))) # shape=(6, 12)
bop_244 = relay.less_equal(uop_238.astype('bool'), relay.reshape(bop_198.astype('bool'), relay.shape_of(uop_238))) # shape=(6, 12)
uop_247 = relay.log2(bop_225.astype('float32')) # shape=(6, 12)
var_249 = relay.var("var_249", dtype = "float32", shape = (6, 12))#candidate|249|(6, 12)|var|float32
bop_250 = relay.subtract(uop_247.astype('uint64'), relay.reshape(var_249.astype('uint64'), relay.shape_of(uop_247))) # shape=(6, 12)
bop_253 = relay.less_equal(bop_203.astype('bool'), relay.reshape(bop_241.astype('bool'), relay.shape_of(bop_203))) # shape=(6, 12)
uop_256 = relay.log2(bop_241.astype('float32')) # shape=(6, 12)
bop_258 = relay.subtract(bop_198.astype('int16'), relay.reshape(var_249.astype('int16'), relay.shape_of(bop_198))) # shape=(6, 12)
uop_261 = relay.tan(bop_250.astype('float32')) # shape=(6, 12)
var_263 = relay.var("var_263", dtype = "uint64", shape = (6, 12))#candidate|263|(6, 12)|var|uint64
bop_264 = relay.maximum(bop_250.astype('float32'), relay.reshape(var_263.astype('float32'), relay.shape_of(bop_250))) # shape=(6, 12)
var_267 = relay.var("var_267", dtype = "float32", shape = (6, 12))#candidate|267|(6, 12)|var|float32
bop_268 = relay.logical_xor(uop_261.astype('uint8'), relay.reshape(var_267.astype('uint8'), relay.shape_of(uop_261))) # shape=(6, 12)
uop_271 = relay.atan(var_267.astype('float64')) # shape=(6, 12)
bop_273 = relay.less(bop_268.astype('bool'), relay.reshape(uop_247.astype('bool'), relay.shape_of(bop_268))) # shape=(6, 12)
bop_276 = relay.equal(bop_273.astype('bool'), relay.reshape(bop_264.astype('bool'), relay.shape_of(bop_273))) # shape=(6, 12)
bop_279 = relay.minimum(bop_264.astype('int32'), relay.reshape(var_224.astype('int32'), relay.shape_of(bop_264))) # shape=(6, 12)
uop_282 = relay.rsqrt(bop_279.astype('float32')) # shape=(6, 12)
func_59_call = mod.get_global_var('func_59')
func_62_call = mutated_mod.get_global_var('func_62')
var_285 = relay.var("var_285", dtype = "float32", shape = (200,))#candidate|285|(200,)|var|float32
call_284 = relay.TupleGetItem(func_59_call(relay.reshape(var_285.astype('float32'), [2, 10, 10])), 0)
call_286 = relay.TupleGetItem(func_62_call(relay.reshape(var_285.astype('float32'), [2, 10, 10])), 0)
uop_287 = relay.acos(bop_273.astype('float64')) # shape=(6, 12)
uop_289 = relay.cos(bop_253.astype('float32')) # shape=(6, 12)
uop_291 = relay.sigmoid(uop_287.astype('float32')) # shape=(6, 12)
bop_293 = relay.greater(uop_291.astype('bool'), uop_195.astype('bool')) # shape=(6, 12)
var_296 = relay.var("var_296", dtype = "float32", shape = (6, 12))#candidate|296|(6, 12)|var|float32
bop_297 = relay.power(uop_256.astype('float32'), relay.reshape(var_296.astype('float32'), relay.shape_of(uop_256))) # shape=(6, 12)
uop_300 = relay.sqrt(bop_293.astype('float32')) # shape=(6, 12)
uop_302 = relay.log10(uop_300.astype('float32')) # shape=(6, 12)
var_304 = relay.var("var_304", dtype = "float32", shape = (6, 12))#candidate|304|(6, 12)|var|float32
bop_305 = relay.less(uop_300.astype('bool'), relay.reshape(var_304.astype('bool'), relay.shape_of(uop_300))) # shape=(6, 12)
uop_308 = relay.sinh(uop_287.astype('float64')) # shape=(6, 12)
bop_310 = relay.divide(uop_302.astype('float32'), relay.reshape(var_263.astype('float32'), relay.shape_of(uop_302))) # shape=(6, 12)
uop_313 = relay.sinh(bop_310.astype('float32')) # shape=(6, 12)
output = relay.Tuple([bop_206,bop_211,bop_217,bop_221,call_228,const_229,bop_235,bop_244,bop_258,uop_271,bop_276,uop_282,call_284,var_285,uop_289,bop_297,bop_305,uop_308,uop_313,])
output2 = relay.Tuple([bop_206,bop_211,bop_217,bop_221,call_230,const_229,bop_235,bop_244,bop_258,uop_271,bop_276,uop_282,call_286,var_285,uop_289,bop_297,bop_305,uop_308,uop_313,])
F = relay.Function([var_194,var_197,var_216,var_220,var_224,var_231,var_240,var_249,var_263,var_267,var_285,var_296,var_304,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_194,var_197,var_216,var_220,var_224,var_231,var_240,var_249,var_263,var_267,var_285,var_296,var_304,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_194= np.array(-2.689015, dtype='float64')
module1.set_input('var_194', input_194)
input_197= np.array([[5.933894,5.988536,-1.239089,3.262092,-9.411952,-3.459629,2.155682,-7.597567,3.597970,8.559788,7.340697,7.984503],[-8.035740,-5.913806,3.757945,9.886679,2.811849,-1.827964,-1.561719,0.492197,-0.835284,-6.994199,-9.962354,9.607355],[-9.078130,9.489499,-2.669147,-5.500253,-6.750091,8.296582,2.364155,-1.321081,8.271414,1.613512,-3.681946,-5.185858],[-3.297630,-4.898795,0.040389,-3.510609,4.862840,2.123829,-4.340081,-6.353690,-3.784821,-7.399530,4.250035,6.468571],[5.818218,-1.447490,6.422908,-4.994650,-9.727609,-6.024184,-5.630299,5.029341,-7.434743,-1.024991,-9.586750,4.034801],[-2.407323,7.740741,-1.899728,-4.564005,9.294991,0.701743,8.571839,-5.019975,2.263736,2.532060,8.738660,8.725726]], dtype='float64')
module1.set_input('var_197', input_197)
input_216= np.array([[[4.443326,-6.412220,-1.249270,7.243873,-1.437783],[-6.360438,7.783255,-6.252716,-6.986120,7.898778]],[[-7.153853,6.021897,4.955548,4.093670,4.572424],[-2.670454,-4.109327,2.761896,5.527642,0.104002]],[[7.997686,-8.353303,-0.317475,6.926172,9.587304],[-6.965784,-7.418963,8.188783,-7.459289,-8.123253]],[[0.622506,7.541477,8.555974,-4.228067,7.997112],[-3.652022,-3.453766,4.374230,-9.751490,6.956921]],[[3.909229,6.056346,6.535934,2.621630,5.716092],[4.145476,9.843936,0.378132,9.680430,0.694270]],[[6.247385,9.545186,-8.763096,8.594797,4.904015],[-0.246632,-5.657544,-6.940277,-5.532943,-7.429429]],[[0.882807,-8.277882,-4.983073,-2.478430,-6.355511],[-5.966227,1.782708,2.799625,-7.214773,-6.440740]]], dtype='float64')
module1.set_input('var_216', input_216)
input_220= np.array([[2.998486,-5.054603,-2.589266,9.330984,2.385910,9.190719,2.054626,4.070537,7.653565,-3.912110,2.565692,2.160295],[-4.428221,-2.006297,3.587088,5.050584,-9.844624,3.108492,-2.810943,8.809477,-3.324461,3.553196,8.361233,2.381973],[-6.854475,-6.450753,-5.268473,-0.199787,-0.936249,5.674455,-8.924932,-1.953229,-6.492797,0.739985,-1.782981,-4.081094],[3.582801,-8.203361,-3.110822,8.016575,7.556949,-4.719005,-1.277801,4.983699,-3.454666,-6.982177,5.980107,5.566018],[-8.988294,-2.347441,3.914742,1.277766,-7.113170,2.655697,0.794080,1.957561,-9.012124,-2.885841,0.445646,5.497274],[-4.418252,-0.066004,-3.258959,-7.133541,-0.585977,5.533124,1.574530,7.581376,2.515527,2.639089,8.973779,9.556812]], dtype='float64')
module1.set_input('var_220', input_220)
input_224= np.array([[-8.936625,-9.032445,2.960295,4.542516,-6.098459,2.776008,7.008314,6.803287,0.757526,-5.526649,-0.621177,-0.001934],[-6.678491,-0.913849,0.841893,-4.000043,-0.802959,0.102780,-2.453674,6.288500,-1.590534,-5.609022,-6.894512,3.799424],[-7.829063,6.705021,1.537113,-7.035011,1.350183,-8.687814,4.781853,-4.312396,1.414196,4.973545,4.194058,-5.488515],[-6.950396,7.325996,8.831470,-5.644663,-1.396405,-3.646192,7.069057,-8.127748,7.467905,6.186288,9.396896,-7.557364],[6.423035,-6.216317,1.815677,-5.129230,7.625829,-7.501844,8.619583,0.921256,-9.248145,5.294476,-3.705642,-5.298450],[-2.454894,-0.495854,-0.346768,3.157789,3.350468,-0.884584,-5.633960,-3.079421,-7.364271,-3.794305,9.497578,-2.116149]], dtype='float32')
module1.set_input('var_224', input_224)
input_231= np.array([[False,False,False,True,True,False,False,True,True,False,True,False],[False,True,False,True,True,True,True,True,True,False,True,True],[True,False,False,False,False,False,True,False,False,True,True,True],[True,False,True,True,False,False,True,False,True,True,False,False],[False,True,True,True,True,False,False,False,True,False,False,True],[False,False,True,True,True,True,False,True,True,True,False,True]], dtype='bool')
module1.set_input('var_231', input_231)
input_240= np.array([[-2.983174,-0.683075,5.289431,3.686789,3.122179,4.070585,-0.220352,6.501029,-0.907525,4.571076,5.886417,9.027308],[-5.963095,7.062053,0.927878,6.193160,-8.766567,5.396111,-7.068666,-0.896406,4.502047,1.869207,6.374068,1.312910],[-2.986826,-8.095760,-1.012753,1.936576,0.246760,-8.386621,2.599830,7.574233,9.758736,1.321100,9.412949,0.153283],[6.150989,-4.927371,3.845335,-3.922188,1.865835,8.702879,-3.742906,-8.600825,-6.442637,-7.577205,-3.966984,5.247372],[-7.049080,8.766836,-1.599452,0.998408,0.836954,0.955090,5.831563,4.092275,-8.175838,-2.251452,0.470296,-3.920364],[3.767895,1.672322,-1.213144,9.355173,2.830516,3.213307,5.921760,8.618067,-6.429261,1.317072,-0.735457,-4.485243]], dtype='float32')
module1.set_input('var_240', input_240)
input_249= np.array([[-8.089910,3.313018,8.749454,6.399043,-0.529457,-1.309499,6.346334,-2.931742,-1.512322,-9.266241,-9.126022,0.687297],[-5.026333,-7.696417,8.893287,7.646140,8.559539,6.447565,5.789965,7.363459,-5.696580,-3.644452,7.783202,-4.474400],[-6.806917,9.661673,0.523731,-8.318392,1.156712,-9.610599,5.232158,-0.268448,5.430109,-0.046786,-8.761703,-8.045096],[0.919982,-8.741396,2.132303,7.399728,-4.266402,-7.751226,0.521435,5.547816,1.694346,8.253292,-4.375984,8.275629],[4.619065,-1.786770,1.772395,-7.011302,7.648652,1.430592,-1.602523,2.873134,1.780651,-5.612017,-2.050558,-7.090232],[1.211907,-3.890214,2.346439,6.490396,8.087953,8.682253,3.279262,-5.966291,-5.808331,4.290446,-0.192938,5.722451]], dtype='float32')
module1.set_input('var_249', input_249)
input_263= np.array([[-5,2,8,-8,-10,-4,3,4,2,-8,7,1],[9,-2,1,7,-8,2,4,1,-2,-6,-8,3],[-4,-10,-10,-1,-4,2,-3,-9,-7,-7,2,-6],[2,1,2,-1,-9,-7,4,8,3,5,-8,-4],[-7,7,-8,4,-4,-1,1,5,5,-6,2,-8],[5,-10,8,-9,7,-4,2,-5,5,5,10,-3]], dtype='uint64')
module1.set_input('var_263', input_263)
input_267= np.array([[9.362438,-6.125222,6.448142,-7.924994,8.031792,-4.788406,6.368060,3.003829,-6.280595,-5.373987,0.481528,6.409616],[8.882444,9.475356,0.337885,0.003186,-5.552645,-2.480547,-8.600782,4.582283,6.365525,-2.486711,-6.436272,7.303332],[3.826989,-5.442019,9.495288,-5.974834,-5.124496,1.927959,7.889643,7.676536,-7.674410,6.694435,-5.009502,-3.365376],[-4.273365,9.957230,9.243646,-5.925022,-5.475680,4.124104,-1.814171,-7.296211,4.474215,-9.349169,-6.983796,-7.087025],[-6.323943,-6.037606,8.476790,-9.788196,4.057355,-5.428331,-1.645815,4.368834,-5.788770,-1.313275,-0.563733,1.565853],[-4.309777,-0.799858,4.046208,2.495946,-8.842132,8.788542,7.698408,-5.899429,3.293149,3.176115,6.558676,-4.294716]], dtype='float32')
module1.set_input('var_267', input_267)
input_285= np.array([2.929832,-2.293304,-3.781578,1.476669,-0.638027,3.024309,6.640945,9.744487,-3.067551,1.365139,-1.541489,3.142521,-6.951941,9.928962,8.498116,5.681677,-4.027459,1.722836,-4.941906,8.382037,-2.455736,-1.727237,0.589762,-9.826549,-8.257179,8.487843,9.876512,-4.984893,0.315043,6.788043,-3.170731,4.687754,-1.542883,8.182690,-1.833577,1.547404,7.613750,-6.204045,6.334241,9.991861,-3.135736,-3.048360,3.892880,0.626513,-9.553458,2.009604,-0.200938,9.684847,8.324353,2.226580,7.444949,0.235469,-8.451242,-5.379520,-5.816759,-5.355779,-4.695186,-4.775772,5.520526,3.905565,-8.248936,-8.571832,3.874852,6.182314,-6.853343,-4.130537,-8.175932,0.795028,8.692893,-8.127587,0.361527,-2.781690,-0.504380,2.632060,5.835787,8.676344,4.141331,-4.385260,-1.817829,-3.121160,-3.653867,-1.982620,-1.774826,9.272759,5.142610,8.521834,-0.799479,0.547619,-4.690498,7.195297,1.036169,3.011290,-3.573196,6.645828,2.734566,-9.989599,3.637637,-6.666139,-3.656126,8.827209,-9.049310,-8.318784,1.316054,5.296857,-3.194930,2.711554,9.154095,-8.337439,-7.162389,-2.902820,4.670712,0.865027,-7.774618,-3.831228,4.267141,-8.152732,-5.580981,1.035311,-6.327410,6.123004,8.869402,-0.912247,4.761253,-4.864319,5.516723,-6.715797,3.646605,7.384274,4.535689,-0.865483,8.847252,-0.283588,4.260234,9.668237,-7.582561,-1.237079,4.379468,0.946883,-5.769235,-3.886402,-7.655692,-0.059937,-5.829815,9.943234,-7.275863,0.649956,3.418705,9.430247,5.576281,-0.472923,-4.700646,0.519233,-5.652320,-7.712198,-3.184139,-4.330669,7.541761,0.604259,-0.948793,-5.737735,-1.023073,-5.766366,5.611743,8.919638,9.376857,4.082080,-6.772278,7.111355,5.310526,4.968038,2.926828,-4.132728,7.966344,-0.445144,7.565283,-1.355924,-9.677125,5.233221,-9.003250,-6.071382,-2.391169,4.630742,-1.443966,3.030355,8.307660,-5.247014,-4.332353,8.605085,-4.134816,1.485535,-1.304402,2.961751,3.438617,6.767867,9.127453,7.804030,4.694228,2.328862,9.332438,1.435231], dtype='float32')
module1.set_input('var_285', input_285)
input_296= np.array([[1.936252,0.428451,-9.213335,7.698389,1.438581,-3.150848,-3.898774,-6.941306,-0.172556,-0.884391,-2.588093,-5.013648],[-3.743764,3.331015,-6.992154,-6.729263,-6.879071,-9.129734,3.476074,2.368647,-3.376391,-1.403107,-5.469661,-7.663896],[-5.346509,-6.641404,-2.810467,-1.469316,-3.802757,1.837170,-1.136565,3.315392,4.486051,-2.611223,8.646436,0.945348],[6.131811,9.763052,3.477071,6.203610,-5.330067,-1.206392,-8.932277,4.171016,-1.281671,9.611516,8.288245,-2.818044],[-2.128029,3.125548,-5.643747,-2.691761,-0.968986,5.935725,6.527915,-3.354637,5.014436,3.989756,2.007724,-1.399644],[7.504781,9.639213,-9.289708,8.557571,-4.534187,7.644048,-7.969939,-1.391274,8.934185,-4.982636,-4.997117,-2.841003]], dtype='float32')
module1.set_input('var_296', input_296)
input_304= np.array([[7.416708,8.078421,-9.939010,-7.195663,-8.761208,-9.245961,1.546120,3.290480,-1.264062,5.700015,-5.200381,-6.434949],[2.756626,6.008045,5.609484,0.134281,4.853025,6.408216,6.098273,6.280006,5.777726,-3.754291,5.637346,-6.286789],[-1.036964,-3.300305,-0.710046,-1.778055,4.596557,9.385090,6.042947,2.986981,-4.971880,2.160301,7.573459,5.170068],[-1.718044,0.638810,8.184025,-7.066994,4.895499,6.899473,3.677023,-2.042199,3.617862,4.455471,-4.787089,2.570099],[5.471735,-7.738528,8.820129,-7.239376,-4.138501,0.566170,3.426898,1.128012,0.006677,-3.042634,6.018929,2.240502],[3.860768,7.798543,-5.282419,-9.342518,1.887842,-7.225335,-9.338734,0.263433,-0.473473,-0.003171,-0.610192,9.662598]], dtype='float32')
module1.set_input('var_304', input_304)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_194, input_197, input_216, input_220, input_224, input_231, input_240, input_249, input_263, input_267, input_285, input_296, input_304, )
res3 = intrp3.evaluate()(input_194, input_197, input_216, input_220, input_224, input_231, input_240, input_249, input_263, input_267, input_285, input_296, input_304, )
res4 = intrp4.evaluate()(input_194, input_197, input_216, input_220, input_224, input_231, input_240, input_249, input_263, input_267, input_285, input_296, input_304, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
res1_14 = module1.get_output(14).asnumpy()
res2_14 = res2[14].asnumpy()
res3_14 = res3[14].asnumpy()
res4_14 = res4[14].asnumpy()
np.testing.assert_allclose(res1_14 ,res2_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res3_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res4_14, atol=1e-3, rtol=1e-3)
(res1_14 == res2_14).all()
(res1_14 == res3_14).all()
(res1_14 == res4_14).all()
res1_15 = module1.get_output(15).asnumpy()
res2_15 = res2[15].asnumpy()
res3_15 = res3[15].asnumpy()
res4_15 = res4[15].asnumpy()
np.testing.assert_allclose(res1_15 ,res2_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res3_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res4_15, atol=1e-3, rtol=1e-3)
(res1_15 == res2_15).all()
(res1_15 == res3_15).all()
(res1_15 == res4_15).all()
res1_16 = module1.get_output(16).asnumpy()
res2_16 = res2[16].asnumpy()
res3_16 = res3[16].asnumpy()
res4_16 = res4[16].asnumpy()
np.testing.assert_allclose(res1_16 ,res2_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res3_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res4_16, atol=1e-3, rtol=1e-3)
(res1_16 == res2_16).all()
(res1_16 == res3_16).all()
(res1_16 == res4_16).all()
res1_17 = module1.get_output(17).asnumpy()
res2_17 = res2[17].asnumpy()
res3_17 = res3[17].asnumpy()
res4_17 = res4[17].asnumpy()
np.testing.assert_allclose(res1_17 ,res2_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res3_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res4_17, atol=1e-3, rtol=1e-3)
(res1_17 == res2_17).all()
(res1_17 == res3_17).all()
(res1_17 == res4_17).all()
res1_18 = module1.get_output(18).asnumpy()
res2_18 = res2[18].asnumpy()
res3_18 = res3[18].asnumpy()
res4_18 = res4[18].asnumpy()
np.testing.assert_allclose(res1_18 ,res2_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res3_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res4_18, atol=1e-3, rtol=1e-3)
(res1_18 == res2_18).all()
(res1_18 == res3_18).all()
(res1_18 == res4_18).all()
module5.set_input('var_194', input_194)
module5.set_input('var_197', input_197)
module5.set_input('var_216', input_216)
module5.set_input('var_220', input_220)
module5.set_input('var_224', input_224)
module5.set_input('var_231', input_231)
module5.set_input('var_240', input_240)
module5.set_input('var_249', input_249)
module5.set_input('var_263', input_263)
module5.set_input('var_267', input_267)
module5.set_input('var_285', input_285)
module5.set_input('var_296', input_296)
module5.set_input('var_304', input_304)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_194, input_197, input_216, input_220, input_224, input_231, input_240, input_249, input_263, input_267, input_285, input_296, input_304, )
res7 = intrp7.evaluate()(input_194, input_197, input_216, input_220, input_224, input_231, input_240, input_249, input_263, input_267, input_285, input_296, input_304, )
res8 = intrp8.evaluate()(input_194, input_197, input_216, input_220, input_224, input_231, input_240, input_249, input_263, input_267, input_285, input_296, input_304, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
res5_14 = module5.get_output(14).asnumpy()
res6_14 = res6[14].asnumpy()
res7_14 = res7[14].asnumpy()
res8_14 = res8[14].asnumpy()
np.testing.assert_allclose(res5_14 ,res6_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res7_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res8_14, atol=1e-3, rtol=1e-3)
(res5_14 == res6_14).all()
(res5_14 == res7_14).all()
(res5_14 == res8_14).all()
res5_15 = module5.get_output(15).asnumpy()
res6_15 = res6[15].asnumpy()
res7_15 = res7[15].asnumpy()
res8_15 = res8[15].asnumpy()
np.testing.assert_allclose(res5_15 ,res6_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res7_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res8_15, atol=1e-3, rtol=1e-3)
(res5_15 == res6_15).all()
(res5_15 == res7_15).all()
(res5_15 == res8_15).all()
res5_16 = module5.get_output(16).asnumpy()
res6_16 = res6[16].asnumpy()
res7_16 = res7[16].asnumpy()
res8_16 = res8[16].asnumpy()
np.testing.assert_allclose(res5_16 ,res6_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res7_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res8_16, atol=1e-3, rtol=1e-3)
(res5_16 == res6_16).all()
(res5_16 == res7_16).all()
(res5_16 == res8_16).all()
res5_17 = module5.get_output(17).asnumpy()
res6_17 = res6[17].asnumpy()
res7_17 = res7[17].asnumpy()
res8_17 = res8[17].asnumpy()
np.testing.assert_allclose(res5_17 ,res6_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res7_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res8_17, atol=1e-3, rtol=1e-3)
(res5_17 == res6_17).all()
(res5_17 == res7_17).all()
(res5_17 == res8_17).all()
res5_18 = module5.get_output(18).asnumpy()
res6_18 = res6[18].asnumpy()
res7_18 = res7[18].asnumpy()
res8_18 = res8[18].asnumpy()
np.testing.assert_allclose(res5_18 ,res6_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res7_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res8_18, atol=1e-3, rtol=1e-3)
(res5_18 == res6_18).all()
(res5_18 == res7_18).all()
(res5_18 == res8_18).all()
module9.set_input('var_194', input_194)
module9.set_input('var_197', input_197)
module9.set_input('var_216', input_216)
module9.set_input('var_220', input_220)
module9.set_input('var_224', input_224)
module9.set_input('var_231', input_231)
module9.set_input('var_240', input_240)
module9.set_input('var_249', input_249)
module9.set_input('var_263', input_263)
module9.set_input('var_267', input_267)
module9.set_input('var_285', input_285)
module9.set_input('var_296', input_296)
module9.set_input('var_304', input_304)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_194, input_197, input_216, input_220, input_224, input_231, input_240, input_249, input_263, input_267, input_285, input_296, input_304, )
res11 = intrp11.evaluate()(input_194, input_197, input_216, input_220, input_224, input_231, input_240, input_249, input_263, input_267, input_285, input_296, input_304, )
res12 = intrp12.evaluate()(input_194, input_197, input_216, input_220, input_224, input_231, input_240, input_249, input_263, input_267, input_285, input_296, input_304, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
res9_14 = module9.get_output(14).asnumpy()
res10_14 = res10[14].asnumpy()
res11_14 = res11[14].asnumpy()
res12_14 = res12[14].asnumpy()
np.testing.assert_allclose(res9_14 ,res10_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res11_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res12_14, atol=1e-3, rtol=1e-3)
(res9_14 == res10_14).all()
(res9_14 == res11_14).all()
(res9_14 == res12_14).all()
res9_15 = module9.get_output(15).asnumpy()
res10_15 = res10[15].asnumpy()
res11_15 = res11[15].asnumpy()
res12_15 = res12[15].asnumpy()
np.testing.assert_allclose(res9_15 ,res10_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res11_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res12_15, atol=1e-3, rtol=1e-3)
(res9_15 == res10_15).all()
(res9_15 == res11_15).all()
(res9_15 == res12_15).all()
res9_16 = module9.get_output(16).asnumpy()
res10_16 = res10[16].asnumpy()
res11_16 = res11[16].asnumpy()
res12_16 = res12[16].asnumpy()
np.testing.assert_allclose(res9_16 ,res10_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res11_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res12_16, atol=1e-3, rtol=1e-3)
(res9_16 == res10_16).all()
(res9_16 == res11_16).all()
(res9_16 == res12_16).all()
res9_17 = module9.get_output(17).asnumpy()
res10_17 = res10[17].asnumpy()
res11_17 = res11[17].asnumpy()
res12_17 = res12[17].asnumpy()
np.testing.assert_allclose(res9_17 ,res10_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res11_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res12_17, atol=1e-3, rtol=1e-3)
(res9_17 == res10_17).all()
(res9_17 == res11_17).all()
(res9_17 == res12_17).all()
res9_18 = module9.get_output(18).asnumpy()
res10_18 = res10[18].asnumpy()
res11_18 = res11[18].asnumpy()
res12_18 = res12[18].asnumpy()
np.testing.assert_allclose(res9_18 ,res10_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res11_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res12_18, atol=1e-3, rtol=1e-3)
(res9_18 == res10_18).all()
(res9_18 == res11_18).all()
(res9_18 == res12_18).all()
module13.set_input('var_194', input_194)
module13.set_input('var_197', input_197)
module13.set_input('var_216', input_216)
module13.set_input('var_220', input_220)
module13.set_input('var_224', input_224)
module13.set_input('var_231', input_231)
module13.set_input('var_240', input_240)
module13.set_input('var_249', input_249)
module13.set_input('var_263', input_263)
module13.set_input('var_267', input_267)
module13.set_input('var_285', input_285)
module13.set_input('var_296', input_296)
module13.set_input('var_304', input_304)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_194, input_197, input_216, input_220, input_224, input_231, input_240, input_249, input_263, input_267, input_285, input_296, input_304, )
res15 = intrp15.evaluate()(input_194, input_197, input_216, input_220, input_224, input_231, input_240, input_249, input_263, input_267, input_285, input_296, input_304, )
res16 = intrp16.evaluate()(input_194, input_197, input_216, input_220, input_224, input_231, input_240, input_249, input_263, input_267, input_285, input_296, input_304, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
res13_14 = module13.get_output(14).asnumpy()
res14_14 = res14[14].asnumpy()
res15_14 = res15[14].asnumpy()
res16_14 = res16[14].asnumpy()
np.testing.assert_allclose(res13_14 ,res14_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res15_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res16_14, atol=1e-3, rtol=1e-3)
(res13_14 == res14_14).all()
(res13_14 == res15_14).all()
(res13_14 == res16_14).all()
res13_15 = module13.get_output(15).asnumpy()
res14_15 = res14[15].asnumpy()
res15_15 = res15[15].asnumpy()
res16_15 = res16[15].asnumpy()
np.testing.assert_allclose(res13_15 ,res14_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res15_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res16_15, atol=1e-3, rtol=1e-3)
(res13_15 == res14_15).all()
(res13_15 == res15_15).all()
(res13_15 == res16_15).all()
res13_16 = module13.get_output(16).asnumpy()
res14_16 = res14[16].asnumpy()
res15_16 = res15[16].asnumpy()
res16_16 = res16[16].asnumpy()
np.testing.assert_allclose(res13_16 ,res14_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res15_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res16_16, atol=1e-3, rtol=1e-3)
(res13_16 == res14_16).all()
(res13_16 == res15_16).all()
(res13_16 == res16_16).all()
res13_17 = module13.get_output(17).asnumpy()
res14_17 = res14[17].asnumpy()
res15_17 = res15[17].asnumpy()
res16_17 = res16[17].asnumpy()
np.testing.assert_allclose(res13_17 ,res14_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res15_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res16_17, atol=1e-3, rtol=1e-3)
(res13_17 == res14_17).all()
(res13_17 == res15_17).all()
(res13_17 == res16_17).all()
res13_18 = module13.get_output(18).asnumpy()
res14_18 = res14[18].asnumpy()
res15_18 = res15[18].asnumpy()
res16_18 = res16[18].asnumpy()
np.testing.assert_allclose(res13_18 ,res14_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res15_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res16_18, atol=1e-3, rtol=1e-3)
(res13_18 == res14_18).all()
(res13_18 == res15_18).all()
(res13_18 == res16_18).all()
module17.set_input('var_194', input_194)
module17.set_input('var_197', input_197)
module17.set_input('var_216', input_216)
module17.set_input('var_220', input_220)
module17.set_input('var_224', input_224)
module17.set_input('var_231', input_231)
module17.set_input('var_240', input_240)
module17.set_input('var_249', input_249)
module17.set_input('var_263', input_263)
module17.set_input('var_267', input_267)
module17.set_input('var_285', input_285)
module17.set_input('var_296', input_296)
module17.set_input('var_304', input_304)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_194, input_197, input_216, input_220, input_224, input_231, input_240, input_249, input_263, input_267, input_285, input_296, input_304, )
res19 = intrp19.evaluate()(input_194, input_197, input_216, input_220, input_224, input_231, input_240, input_249, input_263, input_267, input_285, input_296, input_304, )
res20 = intrp20.evaluate()(input_194, input_197, input_216, input_220, input_224, input_231, input_240, input_249, input_263, input_267, input_285, input_296, input_304, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
res17_14 = module17.get_output(14).asnumpy()
res18_14 = res18[14].asnumpy()
res19_14 = res19[14].asnumpy()
res20_14 = res20[14].asnumpy()
np.testing.assert_allclose(res17_14 ,res18_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res19_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res20_14, atol=1e-3, rtol=1e-3)
(res17_14 == res18_14).all()
(res17_14 == res19_14).all()
(res17_14 == res20_14).all()
res17_15 = module17.get_output(15).asnumpy()
res18_15 = res18[15].asnumpy()
res19_15 = res19[15].asnumpy()
res20_15 = res20[15].asnumpy()
np.testing.assert_allclose(res17_15 ,res18_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res19_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res20_15, atol=1e-3, rtol=1e-3)
(res17_15 == res18_15).all()
(res17_15 == res19_15).all()
(res17_15 == res20_15).all()
res17_16 = module17.get_output(16).asnumpy()
res18_16 = res18[16].asnumpy()
res19_16 = res19[16].asnumpy()
res20_16 = res20[16].asnumpy()
np.testing.assert_allclose(res17_16 ,res18_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res19_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res20_16, atol=1e-3, rtol=1e-3)
(res17_16 == res18_16).all()
(res17_16 == res19_16).all()
(res17_16 == res20_16).all()
res17_17 = module17.get_output(17).asnumpy()
res18_17 = res18[17].asnumpy()
res19_17 = res19[17].asnumpy()
res20_17 = res20[17].asnumpy()
np.testing.assert_allclose(res17_17 ,res18_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res19_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res20_17, atol=1e-3, rtol=1e-3)
(res17_17 == res18_17).all()
(res17_17 == res19_17).all()
(res17_17 == res20_17).all()
res17_18 = module17.get_output(18).asnumpy()
res18_18 = res18[18].asnumpy()
res19_18 = res19[18].asnumpy()
res20_18 = res20[18].asnumpy()
np.testing.assert_allclose(res17_18 ,res18_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res19_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res20_18, atol=1e-3, rtol=1e-3)
(res17_18 == res18_18).all()
(res17_18 == res19_18).all()
(res17_18 == res20_18).all()
module21.set_input('var_194', input_194)
module21.set_input('var_197', input_197)
module21.set_input('var_216', input_216)
module21.set_input('var_220', input_220)
module21.set_input('var_224', input_224)
module21.set_input('var_231', input_231)
module21.set_input('var_240', input_240)
module21.set_input('var_249', input_249)
module21.set_input('var_263', input_263)
module21.set_input('var_267', input_267)
module21.set_input('var_285', input_285)
module21.set_input('var_296', input_296)
module21.set_input('var_304', input_304)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_194, input_197, input_216, input_220, input_224, input_231, input_240, input_249, input_263, input_267, input_285, input_296, input_304, )
res23 = intrp23.evaluate()(input_194, input_197, input_216, input_220, input_224, input_231, input_240, input_249, input_263, input_267, input_285, input_296, input_304, )
res24 = intrp24.evaluate()(input_194, input_197, input_216, input_220, input_224, input_231, input_240, input_249, input_263, input_267, input_285, input_296, input_304, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()
res21_14 = module21.get_output(14).asnumpy()
res22_14 = res22[14].asnumpy()
res23_14 = res23[14].asnumpy()
res24_14 = res24[14].asnumpy()
np.testing.assert_allclose(res21_14 ,res22_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res23_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res24_14, atol=1e-3, rtol=1e-3)
(res21_14 == res22_14).all()
(res21_14 == res23_14).all()
(res21_14 == res24_14).all()
res21_15 = module21.get_output(15).asnumpy()
res22_15 = res22[15].asnumpy()
res23_15 = res23[15].asnumpy()
res24_15 = res24[15].asnumpy()
np.testing.assert_allclose(res21_15 ,res22_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res23_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res24_15, atol=1e-3, rtol=1e-3)
(res21_15 == res22_15).all()
(res21_15 == res23_15).all()
(res21_15 == res24_15).all()
res21_16 = module21.get_output(16).asnumpy()
res22_16 = res22[16].asnumpy()
res23_16 = res23[16].asnumpy()
res24_16 = res24[16].asnumpy()
np.testing.assert_allclose(res21_16 ,res22_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res23_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res24_16, atol=1e-3, rtol=1e-3)
(res21_16 == res22_16).all()
(res21_16 == res23_16).all()
(res21_16 == res24_16).all()
res21_17 = module21.get_output(17).asnumpy()
res22_17 = res22[17].asnumpy()
res23_17 = res23[17].asnumpy()
res24_17 = res24[17].asnumpy()
np.testing.assert_allclose(res21_17 ,res22_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res23_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res24_17, atol=1e-3, rtol=1e-3)
(res21_17 == res22_17).all()
(res21_17 == res23_17).all()
(res21_17 == res24_17).all()
res21_18 = module21.get_output(18).asnumpy()
res22_18 = res22[18].asnumpy()
res23_18 = res23[18].asnumpy()
res24_18 = res24[18].asnumpy()
np.testing.assert_allclose(res21_18 ,res22_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res23_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res24_18, atol=1e-3, rtol=1e-3)
(res21_18 == res22_18).all()
(res21_18 == res23_18).all()
(res21_18 == res24_18).all()

'''57: TVMFuncCall
56: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
55: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
54: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
53: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
52: tvm::transform::Pass::operator()(tvm::IRModule) const
51: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
50: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
49: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
48: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
47: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
46: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
45: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
44: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
43: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
42: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
41: _ZN3tvm5relay16MixedModeMutato
40: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
39: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
38: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
37: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
36: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
34: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
32: _ZN3tvm5relay16MixedModeMutato
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
27: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
26: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
25: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
24: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
23: tvm::transform::Pass::operator()(tvm::IRModule) const
22: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
21: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
16: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
15: tvm::relay::TypeInferencer::Infer(tvm::GlobalVar, tvm::relay::Function)
14: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
13: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
12: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
11: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
10: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
9: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::FunctionNode const*)
8: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
7: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
6: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
5: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
4: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
3: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::CallNode const*)
2: tvm::relay::TypeInferencer::GeneralCall(tvm::relay::CallNode const*, tvm::runtime::Array<tvm::Type, void>)
1: _ZN3tvm17DiagnosticContext9EmitFatalERKNS_1
0: tvm::DiagnosticContext::Render()

'''