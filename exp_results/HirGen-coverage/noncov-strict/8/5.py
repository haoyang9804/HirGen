import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = ())#candidate|0|()|var|float32
uop_1 = relay.atanh(var_0.astype('float32')) # shape=()
const_3 = relay.const([-1.777820,6.171726,-7.556719,-0.469584,8.359590,-9.222836,7.155889,-0.994776,-5.898618,2.151883], dtype = "float32")#candidate|3|(10,)|const|float32
bop_4 = relay.bitwise_xor(uop_1.astype('uint16'), const_3.astype('uint16')) # shape=(10,)
uop_7 = relay.rsqrt(uop_1.astype('float32')) # shape=()
uop_9 = relay.erf(uop_7.astype('float64')) # shape=()
uop_11 = relay.cos(uop_9.astype('float64')) # shape=()
bop_13 = relay.bitwise_xor(uop_9.astype('uint8'), const_3.astype('uint8')) # shape=(10,)
uop_16 = relay.erf(uop_11.astype('float32')) # shape=()
uop_18 = relay.acos(uop_11.astype('float32')) # shape=()
uop_20 = relay.rsqrt(uop_11.astype('float32')) # shape=()
bop_22 = relay.maximum(uop_20.astype('uint32'), uop_18.astype('uint32')) # shape=()
bop_25 = relay.logical_and(uop_7.astype('bool'), bop_4.astype('bool')) # shape=(10,)
uop_28 = relay.tan(uop_7.astype('float64')) # shape=()
bop_30 = relay.less(uop_11.astype('bool'), bop_22.astype('bool')) # shape=()
bop_33 = relay.power(uop_16.astype('float32'), var_0.astype('float32')) # shape=()
uop_36 = relay.sin(bop_22.astype('float32')) # shape=()
uop_38 = relay.cosh(uop_20.astype('float64')) # shape=()
uop_40 = relay.sigmoid(uop_36.astype('float64')) # shape=()
var_42 = relay.var("var_42", dtype = "float64", shape = (3, 7))#candidate|42|(3, 7)|var|float64
bop_43 = relay.less_equal(uop_38.astype('bool'), var_42.astype('bool')) # shape=(3, 7)
const_46 = relay.const([[7.463533,-4.469088,-2.348121,6.286047,1.096501,-5.559707,-4.022025,-7.188219,-9.611386,-9.108858,-7.781609,1.021253,-6.609334],[0.750120,-9.709135,3.216160,-6.753101,-1.279039,-0.482363,-0.214073,-5.156043,8.858177,6.624113,-6.639797,5.235333,3.406316],[0.490788,-9.137856,-6.237666,-5.758903,-2.448456,-6.417637,0.910105,7.876322,-2.531409,-1.543420,-2.895405,0.252607,0.521456],[2.866893,7.995530,-3.635094,-7.410800,-3.257694,7.177968,8.568754,-0.243537,-9.943882,1.474210,2.712469,8.542430,-5.610980],[5.534174,7.033734,6.030755,-0.175683,4.494488,-7.232759,7.205762,-6.793450,7.825507,-4.406312,-2.390256,0.995615,-9.910404],[0.938862,-4.747501,7.796677,-1.926480,-6.624517,1.500950,-6.687462,-9.976072,-7.648097,2.417144,-6.158857,5.608553,-8.829574],[8.589630,9.485756,4.316580,1.565900,-2.139434,5.073058,1.423376,-8.619886,-4.638869,5.271919,6.805619,-0.378171,-0.288811],[7.855760,4.359952,7.190813,-5.615148,-2.909498,-2.101470,3.891065,-5.364369,0.788514,5.615209,6.683638,-6.866965,-8.225759],[-0.042919,-9.020732,4.546754,-1.253423,7.443765,2.691034,-4.547407,9.624856,4.094475,9.565352,-6.204809,9.918783,8.976326],[8.257405,0.076438,5.051579,4.620183,-3.844730,-8.582009,9.987762,2.171068,3.098918,9.718090,-1.096552,5.272297,-2.363290],[-3.042603,9.009264,-2.131752,2.175488,-6.316118,-3.716664,-0.747059,-2.431277,9.757253,-2.015422,-2.838887,1.169210,7.883918],[-2.912205,7.114695,-0.230730,-5.546236,0.331221,-7.545839,-8.956471,-1.024168,-5.273013,-4.449144,5.071663,7.807902,-6.157435]], dtype = "float64")#candidate|46|(12, 13)|const|float64
bop_47 = relay.mod(uop_40.astype('float64'), const_46.astype('float64')) # shape=(12, 13)
bop_50 = relay.left_shift(bop_47.astype('int64'), uop_38.astype('int64')) # shape=(12, 13)
var_53 = relay.var("var_53", dtype = "float64", shape = (4, 11, 8))#candidate|53|(4, 11, 8)|var|float64
bop_54 = relay.equal(uop_38.astype('bool'), var_53.astype('bool')) # shape=(4, 11, 8)
bop_57 = relay.less_equal(uop_9.astype('bool'), uop_16.astype('bool')) # shape=()
bop_60 = relay.right_shift(bop_50.astype('uint32'), bop_22.astype('uint32')) # shape=(12, 13)
uop_63 = relay.log(uop_40.astype('float32')) # shape=()
uop_65 = relay.atan(uop_63.astype('float64')) # shape=()
uop_67 = relay.atanh(uop_65.astype('float64')) # shape=()
uop_69 = relay.log2(uop_67.astype('float64')) # shape=()
output = relay.Tuple([bop_13,bop_25,uop_28,bop_30,bop_33,bop_43,bop_54,bop_57,bop_60,uop_69,])
output2 = relay.Tuple([bop_13,bop_25,uop_28,bop_30,bop_33,bop_43,bop_54,bop_57,bop_60,uop_69,])
func_71 = relay.Function([var_0,var_42,var_53,], output)
mod['func_71'] = func_71
mod = relay.transform.InferType()(mod)
var_72 = relay.var("var_72", dtype = "float32", shape = ())#candidate|72|()|var|float32
var_73 = relay.var("var_73", dtype = "float64", shape = (3, 7))#candidate|73|(3, 7)|var|float64
var_74 = relay.var("var_74", dtype = "float64", shape = (4, 11, 8))#candidate|74|(4, 11, 8)|var|float64
output = func_71(var_72,var_73,var_74,)
func_75 = relay.Function([var_72,var_73,var_74,], output)
mutated_mod['func_75'] = func_75
mutated_mod = relay.transform.InferType()(mutated_mod)
const_77 = relay.const([9.698783,0.416412,-1.786284,8.106846,6.570019,8.934244,-7.317942,-5.701313,0.131160,-6.840909,-7.979905], dtype = "float64")#candidate|77|(11,)|const|float64
uop_78 = relay.asinh(const_77.astype('float64')) # shape=(11,)
uop_80 = relay.acos(uop_78.astype('float32')) # shape=(11,)
uop_82 = relay.sin(uop_80.astype('float32')) # shape=(11,)
bop_84 = relay.greater_equal(uop_80.astype('bool'), relay.reshape(uop_78.astype('bool'), relay.shape_of(uop_80))) # shape=(11,)
uop_87 = relay.erf(uop_78.astype('float32')) # shape=(11,)
uop_89 = relay.sinh(const_77.astype('float64')) # shape=(11,)
func_71_call = mod.get_global_var('func_71')
func_75_call = mutated_mod.get_global_var('func_75')
var_92 = relay.var("var_92", dtype = "float32", shape = ())#candidate|92|()|var|float32
const_93 = relay.const([-9.322435,-7.013190,-2.940068,0.379987,2.014307,-5.461834,5.947624,3.327196,3.025619,-7.269538,-2.269504,2.104458,7.515801,8.248148,8.226798,9.234762,4.287508,8.613898,-6.483959,8.967164,8.256162], dtype = "float64")#candidate|93|(21,)|const|float64
var_94 = relay.var("var_94", dtype = "float64", shape = (352,))#candidate|94|(352,)|var|float64
call_91 = relay.TupleGetItem(func_71_call(relay.reshape(var_92.astype('float32'), []), relay.reshape(const_93.astype('float64'), [3, 7]), relay.reshape(var_94.astype('float64'), [4, 11, 8]), ), 4)
call_95 = relay.TupleGetItem(func_75_call(relay.reshape(var_92.astype('float32'), []), relay.reshape(const_93.astype('float64'), [3, 7]), relay.reshape(var_94.astype('float64'), [4, 11, 8]), ), 4)
uop_96 = relay.atanh(uop_82.astype('float32')) # shape=(11,)
bop_98 = relay.maximum(uop_96.astype('int16'), var_92.astype('int16')) # shape=(11,)
output = relay.Tuple([bop_84,uop_87,uop_89,call_91,const_93,var_94,bop_98,])
output2 = relay.Tuple([bop_84,uop_87,uop_89,call_95,const_93,var_94,bop_98,])
func_101 = relay.Function([var_92,var_94,], output)
mod['func_101'] = func_101
mod = relay.transform.InferType()(mod)
mutated_mod['func_101'] = func_101
mutated_mod = relay.transform.InferType()(mutated_mod)
func_101_call = mutated_mod.get_global_var('func_101')
var_103 = relay.var("var_103", dtype = "float32", shape = ())#candidate|103|()|var|float32
var_104 = relay.var("var_104", dtype = "float64", shape = (352,))#candidate|104|(352,)|var|float64
call_102 = func_101_call(var_103,var_104,)
output = call_102
func_105 = relay.Function([var_103,var_104,], output)
mutated_mod['func_105'] = func_105
mutated_mod = relay.transform.InferType()(mutated_mod)
var_107 = relay.var("var_107", dtype = "uint16", shape = ())#candidate|107|()|var|uint16
var_108 = relay.var("var_108", dtype = "uint16", shape = (4, 14))#candidate|108|(4, 14)|var|uint16
bop_109 = relay.greater_equal(var_107.astype('bool'), var_108.astype('bool')) # shape=(4, 14)
uop_112 = relay.atanh(var_107.astype('float32')) # shape=()
bop_114 = relay.bitwise_or(uop_112.astype('int32'), var_108.astype('int32')) # shape=(4, 14)
bop_117 = relay.logical_or(uop_112.astype('bool'), var_108.astype('bool')) # shape=(4, 14)
uop_120 = relay.atanh(uop_112.astype('float32')) # shape=()
output = relay.Tuple([bop_109,bop_114,bop_117,uop_120,])
output2 = relay.Tuple([bop_109,bop_114,bop_117,uop_120,])
func_122 = relay.Function([var_107,var_108,], output)
mod['func_122'] = func_122
mod = relay.transform.InferType()(mod)
mutated_mod['func_122'] = func_122
mutated_mod = relay.transform.InferType()(mutated_mod)
func_122_call = mutated_mod.get_global_var('func_122')
var_124 = relay.var("var_124", dtype = "uint16", shape = ())#candidate|124|()|var|uint16
var_125 = relay.var("var_125", dtype = "uint16", shape = (4, 14))#candidate|125|(4, 14)|var|uint16
call_123 = func_122_call(var_124,var_125,)
output = call_123
func_126 = relay.Function([var_124,var_125,], output)
mutated_mod['func_126'] = func_126
mutated_mod = relay.transform.InferType()(mutated_mod)
var_128 = relay.var("var_128", dtype = "float64", shape = ())#candidate|128|()|var|float64
uop_129 = relay.log2(var_128.astype('float64')) # shape=()
bop_131 = relay.floor_mod(uop_129.astype('float32'), var_128.astype('float32')) # shape=()
bop_134 = relay.left_shift(bop_131.astype('uint16'), uop_129.astype('uint16')) # shape=()
func_122_call = mod.get_global_var('func_122')
func_126_call = mutated_mod.get_global_var('func_126')
var_138 = relay.var("var_138", dtype = "uint16", shape = (56,))#candidate|138|(56,)|var|uint16
call_137 = relay.TupleGetItem(func_122_call(relay.reshape(uop_129.astype('uint16'), []), relay.reshape(var_138.astype('uint16'), [4, 14]), ), 3)
call_139 = relay.TupleGetItem(func_126_call(relay.reshape(uop_129.astype('uint16'), []), relay.reshape(var_138.astype('uint16'), [4, 14]), ), 3)
uop_140 = relay.cos(bop_131.astype('float64')) # shape=()
bop_142 = relay.bitwise_xor(uop_140.astype('int32'), var_128.astype('int32')) # shape=()
bop_145 = relay.left_shift(bop_142.astype('uint64'), uop_140.astype('uint64')) # shape=()
func_101_call = mod.get_global_var('func_101')
func_105_call = mutated_mod.get_global_var('func_105')
var_149 = relay.var("var_149", dtype = "float64", shape = (352,))#candidate|149|(352,)|var|float64
call_148 = relay.TupleGetItem(func_101_call(relay.reshape(call_137.astype('float32'), []), relay.reshape(var_149.astype('float64'), [352,]), ), 3)
call_150 = relay.TupleGetItem(func_105_call(relay.reshape(call_137.astype('float32'), []), relay.reshape(var_149.astype('float64'), [352,]), ), 3)
output = relay.Tuple([bop_134,call_137,var_138,bop_145,call_148,var_149,])
output2 = relay.Tuple([bop_134,call_139,var_138,bop_145,call_150,var_149,])
func_151 = relay.Function([var_128,var_138,var_149,], output)
mod['func_151'] = func_151
mod = relay.transform.InferType()(mod)
var_152 = relay.var("var_152", dtype = "float64", shape = ())#candidate|152|()|var|float64
var_153 = relay.var("var_153", dtype = "uint16", shape = (56,))#candidate|153|(56,)|var|uint16
var_154 = relay.var("var_154", dtype = "float64", shape = (352,))#candidate|154|(352,)|var|float64
output = func_151(var_152,var_153,var_154,)
func_155 = relay.Function([var_152,var_153,var_154,], output)
mutated_mod['func_155'] = func_155
mutated_mod = relay.transform.InferType()(mutated_mod)
const_157 = relay.const([[[8.576914,-2.485894,9.731423,-5.404772,-1.036084,-0.514753,-8.877753,1.573499,3.749746,0.990548,-4.655382],[-3.569809,-0.399400,4.589973,7.672435,0.632489,-2.490321,-0.528669,9.136645,5.717968,5.359549,-3.334367],[-4.929185,7.089788,-8.050501,-7.474588,-6.406886,-7.486967,-5.405012,-1.645711,-1.771886,9.039415,2.756006],[-0.959310,-4.245815,6.674704,8.922474,6.719425,3.249415,0.556051,-2.332995,-7.425077,4.061883,3.289915],[1.985371,7.457003,6.401435,-8.282526,-7.991947,6.748524,-9.921902,7.772998,-1.904874,5.866770,3.822353],[-9.591667,-4.977203,-5.430421,1.034433,-0.721114,1.697577,-9.103220,-7.970202,-2.554502,1.944245,6.087454],[-5.243519,4.852076,-7.504124,-9.844773,-5.867346,4.439743,-7.282231,-6.762494,3.920871,-4.148717,-8.876661],[-5.805655,6.099775,5.321664,-1.742916,4.480045,0.894003,-1.256600,5.474587,4.896387,1.392623,9.243626],[-2.289381,0.941019,-6.106789,2.199692,-8.879263,7.042783,-2.781631,-8.665410,8.136983,4.165320,-1.978711],[-6.985025,-6.212964,7.266479,-1.610684,7.658966,-8.267525,9.945618,-4.783873,0.769157,-9.917217,1.034437],[-5.193966,8.031150,5.031517,-0.566529,-5.657991,8.223433,8.596298,-6.807162,8.342839,-1.816027,-8.866044],[-6.687157,-7.244644,2.979064,-4.235501,5.346218,-3.483782,8.737656,3.340941,-3.141556,-2.792498,0.380004],[-5.173880,-1.727905,6.094992,-6.667271,-7.148827,5.928546,-6.277836,4.749464,6.121439,4.518759,8.414987],[4.211235,3.049164,1.270174,3.463973,8.787956,-9.093629,-5.242954,-7.276337,-3.858571,7.890754,-9.522378],[-4.489904,7.614620,-1.308328,-2.801822,5.395356,2.022831,7.805011,-4.336990,5.316625,-6.551312,1.312938]],[[6.942066,4.287979,-9.350152,6.902725,7.809811,-4.974579,9.502856,0.068707,8.816440,0.020167,5.734101],[0.316058,-2.636943,5.857862,-0.334260,5.410689,4.328556,5.541208,9.747354,-8.567698,8.005984,9.964256],[0.011393,-2.179387,0.288630,8.066039,-2.179069,1.860353,4.021207,3.741334,0.962436,-9.897807,-7.409059],[9.815585,-5.943549,-9.089236,-0.843172,8.031337,-4.483426,-8.164699,1.666818,1.570258,-8.728707,-7.896390],[6.153584,-7.192705,-3.004734,3.829160,-3.906732,6.807777,-3.325660,-6.541922,4.403005,3.237608,3.106275],[-6.751884,4.446515,-3.488133,-3.591920,-4.081116,2.997856,-3.161000,2.330756,-7.556953,-1.088768,-9.259720],[1.395558,-3.904516,-7.877155,-5.679140,9.669304,7.685983,-5.685406,2.555472,-7.315979,4.513172,-6.852711],[-7.915358,1.065584,7.246270,-9.087187,8.489869,5.419471,-9.054898,5.066509,5.147677,5.916740,9.879905],[7.685131,-4.696460,-0.930776,1.544128,-2.448428,-3.817472,-5.869230,7.297861,-8.404224,-3.903869,-5.004643],[3.705928,2.350044,6.615258,3.137857,1.779068,5.845271,8.426614,5.634308,-6.656297,-3.072520,1.542260],[-6.066810,2.310052,6.799800,-7.118240,-6.427595,4.042994,4.726626,9.964735,-3.819184,2.854561,-1.287816],[8.297762,8.004348,7.035361,0.338597,-1.968920,-4.023114,-8.052422,7.212947,8.355606,-9.012707,3.430770],[9.194214,6.455823,7.526601,0.863819,5.820217,4.248978,-5.736072,-9.214350,-8.680134,-6.405402,-4.833135],[-3.431383,9.263754,3.610633,9.182525,1.315386,7.976980,-1.799212,2.690502,7.204186,-3.761016,9.933731],[5.903646,-4.372088,-5.222943,-4.468457,2.430110,-8.796011,5.539263,6.682568,1.765533,3.180462,3.235356]],[[8.059142,-0.182066,9.869597,-4.680934,5.755562,-6.362870,1.325343,-3.786706,3.850930,-7.317321,1.722621],[3.404656,-3.608251,4.749071,-7.394130,5.578650,-5.733595,-9.956469,6.863671,-9.737486,-9.528344,-7.915484],[-5.588622,-0.145341,8.514603,2.059940,-5.973120,9.649396,8.811669,-8.881048,3.726767,-1.864172,2.665196],[3.419683,4.773775,-0.111206,-2.762851,6.022326,6.718600,-3.853148,-5.337097,6.764136,-0.318986,-2.230702],[-3.397944,4.294339,-8.677812,9.835008,-2.667154,-4.068808,-9.909944,-4.545643,-0.067811,9.783698,8.526386],[-9.359884,-9.222494,-4.601854,-2.783732,-2.566824,8.740398,-2.581651,4.745629,-1.042438,-3.116591,5.120678],[3.615967,1.008233,0.377561,0.524370,-4.994648,5.035001,-0.054077,7.603834,-8.521140,0.364246,-1.511291],[8.741554,0.217623,2.681259,6.962092,-2.047745,-5.269589,-6.298453,9.671243,-1.474954,7.834079,-3.805541],[8.133954,-3.428643,5.875285,-6.249378,1.325044,-5.999863,9.443388,-5.272493,-7.253624,3.592150,-9.441742],[9.962688,3.168906,5.541188,2.111320,-7.191482,4.381710,-4.393957,-2.024755,-1.029906,-3.873304,-1.438161],[3.684384,-2.240662,-8.545322,-9.926186,1.500042,-9.072571,-0.500947,0.517092,6.613885,-6.972009,-0.376466],[8.630390,9.893812,-2.081527,-9.179111,9.803074,1.341158,-9.177765,7.881832,-2.090905,-9.056295,-9.796358],[-3.707890,-7.520075,4.963736,7.077373,6.732943,7.943073,-3.186027,-3.095982,-3.519381,-0.363610,-2.914384],[7.681885,-8.642808,-0.909895,-6.791602,0.070170,4.809383,-9.846898,-1.244402,-7.021418,0.207564,6.321209],[-6.532111,-0.024002,2.241962,-7.361299,9.165514,-2.606056,-9.510213,-1.775921,4.065518,4.358661,3.429843]],[[3.818786,7.094947,5.670631,3.180751,2.197458,6.838580,8.370460,-3.064991,-3.069750,3.223093,2.846548],[5.254742,9.135426,3.401600,9.655894,-8.963022,8.182196,1.059930,-5.065616,9.536267,-3.966375,-4.510090],[9.397781,1.593296,-4.266735,-9.707358,-6.656472,-6.656868,-0.096102,8.272785,-2.155061,3.671100,1.414598],[6.862911,6.234803,1.352530,6.773633,7.881555,2.778115,-7.681254,-6.682683,3.785402,-5.737895,-0.729997],[-8.814064,9.400620,5.088987,-0.479304,9.476842,9.953323,-9.295243,-3.949696,-0.086652,-6.743648,-9.770217],[6.792013,-9.884422,-8.004552,-1.260508,8.332026,-0.332600,-7.730609,9.048961,-8.910799,-2.840553,-3.991865],[7.698169,-3.389096,-5.036025,5.991812,1.655014,6.774052,3.114432,-1.158256,-9.230593,-9.412608,-2.856975],[1.243018,9.838706,-5.861728,2.748880,-1.031978,7.112019,-1.323187,-2.013254,8.716216,-5.801521,1.688675],[-3.114677,-5.746600,0.678563,0.024699,6.908202,-4.033334,-2.720273,-2.220156,2.042617,-0.423014,2.600694],[-2.806542,-5.982335,6.182123,7.172317,7.741339,-3.161294,-3.342433,-6.021262,-2.108259,-3.513040,4.271004],[1.448992,-6.570989,-5.710082,-7.019506,4.741243,5.641933,-4.893781,1.868833,2.553555,6.811153,-1.798257],[-3.141711,7.246547,-9.759878,2.673078,-8.907034,2.224013,5.586930,-8.366724,2.063869,-6.816961,8.602366],[2.193903,-9.116369,3.236974,-7.224297,-0.881364,5.182752,2.878627,3.420270,6.744011,-9.412309,0.286570],[-1.040122,3.805294,0.353711,4.108471,-1.849784,9.647988,2.562655,-2.532551,-1.696239,-6.976876,-6.628587],[8.460433,-3.387353,2.572949,2.757965,-5.947289,-2.231056,1.313019,-9.550432,5.889271,2.153743,1.814381]],[[6.867244,5.281018,-4.208854,9.391283,8.782065,4.720919,6.141245,-6.456648,1.097028,1.355342,-7.311908],[6.945324,3.182826,7.668357,-8.591914,6.334031,-9.527546,9.796129,7.878892,4.507091,-9.815338,-2.212013],[-9.601866,-3.547382,-4.658353,8.346080,8.704705,0.862186,0.233717,3.599793,3.723426,-9.012020,6.551756],[6.112040,-6.302709,-7.541357,8.850862,0.243450,5.620639,9.344142,0.333998,6.850792,0.934136,7.770778],[5.850356,-3.140074,9.133539,4.995849,2.625793,7.561685,4.109148,-2.536544,3.995686,-6.111103,7.132303],[-2.615476,0.880258,4.211012,-9.727875,4.915613,-5.124434,-9.586338,-8.019819,-6.832893,-9.621449,-0.144550],[7.890155,-9.470843,-2.450543,-7.206844,-2.653477,-0.332066,-2.023808,0.441224,-4.840380,-5.346339,-7.152425],[-2.443248,-9.656085,-2.811391,6.266112,7.668923,0.970494,2.353304,-3.622226,-1.051533,-0.601867,-3.408242],[-6.903067,6.246963,5.736081,3.018077,-6.137892,-0.189458,9.954317,-5.528555,6.244388,5.861323,5.859013],[-4.235219,-4.416429,0.755241,6.637961,1.980781,8.808640,-4.436630,0.695869,-2.813132,-0.174139,-7.006764],[-6.271690,-3.758694,-2.193614,-2.270938,-7.494237,-0.990169,9.445471,9.539963,2.267663,7.171999,3.003397],[8.450619,2.399292,-5.721551,7.244126,2.376537,4.117766,7.915690,-6.614069,-4.928096,8.666018,9.691157],[-4.311550,4.182652,-3.622204,-6.743427,8.141325,-7.709052,3.303840,-8.936215,6.160850,-0.923987,5.185745],[3.643405,-9.412474,-5.051334,-8.004598,-1.406565,-5.687051,-7.196563,-7.018790,-8.101267,4.580821,1.644745],[5.579519,3.449643,5.763798,-9.748972,0.610533,-7.018148,1.929974,1.058031,2.033136,-0.483479,-5.145439]],[[-8.880987,0.924555,-7.594405,5.717898,4.835033,2.335799,6.339531,9.248443,1.669595,1.004523,-2.103754],[-0.099957,-2.045528,9.009297,7.078489,-9.066905,6.401924,-8.766332,-9.977224,5.609312,-0.125489,-3.832321],[1.175215,2.502942,-6.012116,4.795795,2.454136,9.971272,2.831239,-8.788554,-6.467376,-6.211775,-7.560138],[9.913649,-2.150259,7.629599,2.736604,-7.324496,1.179874,3.163679,6.524420,-8.846256,-2.980160,-4.385284],[-2.364465,-8.984285,0.339931,-3.577429,2.897511,-1.885311,-9.726896,-4.451028,4.467922,2.642283,1.045173],[8.327937,3.347896,0.343358,4.934005,6.161992,1.967954,-7.244310,-7.269414,-0.975552,-6.489524,7.491582],[-1.290233,-4.732141,-9.546543,-7.823865,-7.070170,-2.838844,3.854188,5.075005,-7.718881,1.900261,-8.805728],[-1.052316,-4.802310,-2.957374,-7.080588,-7.257665,2.414151,-8.759171,-5.951416,3.173231,-1.818213,-5.658104],[-1.386340,-1.811183,-1.010476,-6.692117,4.771202,0.656200,7.449790,-4.120635,0.789044,9.610460,3.278956],[-0.602411,-1.897620,-1.947411,-5.609588,8.866133,-0.279352,4.853095,3.964095,7.529674,-0.727615,-8.736639],[-9.361803,8.198360,9.214820,6.211372,5.367472,-1.388817,2.957292,-0.855139,6.670754,-4.086186,-7.881666],[-5.882215,2.075394,-1.376181,-7.451309,-2.927040,-4.813816,-5.424487,-5.835975,-3.674552,-8.609573,6.273443],[-3.363479,5.416979,1.657046,7.159183,4.458476,7.246237,-3.744062,-2.872955,1.577258,2.637735,4.607414],[9.987055,7.051410,0.252569,9.065003,-9.898653,-1.076945,6.413884,3.337644,2.383057,3.983440,-9.432113],[4.742003,-1.307688,8.980928,-4.041868,-2.082181,-7.559009,6.455261,3.190369,-7.063243,-8.825453,5.164473]],[[7.195022,8.285655,3.216674,3.077862,-3.576949,-9.925631,7.201179,-4.547165,-6.296569,-8.750144,2.028901],[-9.370470,-3.866020,-4.460062,-2.958902,-5.466119,-5.208479,-7.391815,-3.457065,6.934789,-5.772822,-2.068280],[3.441687,4.175356,7.285191,-5.201763,-6.152631,8.533415,-4.768880,2.836740,4.804913,-6.166204,2.028435],[6.470583,-6.398688,-9.363088,-1.932886,0.128564,-2.213789,-5.444135,-7.474868,-7.965105,7.820857,4.484414],[0.801458,-2.109510,-4.545999,-8.710109,-6.256581,-8.318818,1.908000,1.259692,3.756622,1.517152,-4.845376],[5.712314,1.869583,8.826623,1.634051,-8.047900,9.422699,9.378026,0.911209,-7.408346,1.498006,-8.301924],[0.689147,-6.947977,-6.795552,-0.576031,0.393432,5.525370,1.230628,-2.589854,6.688585,6.998819,2.501311],[0.221611,3.208401,-6.541907,-7.365019,3.702223,6.985042,-5.919034,8.798041,-2.503310,-3.918157,4.877842],[-7.883909,-8.852130,-1.289405,-7.626621,-3.734573,-6.763166,4.913575,-9.929017,-9.527701,-9.843414,2.989976],[2.636943,9.685018,-0.594400,-5.627523,-1.299942,2.034386,-3.888269,-7.764557,7.379529,-5.422948,-5.172614],[8.207717,5.392373,-9.985161,4.117783,-7.536093,4.080929,-7.011106,6.028871,9.494530,4.404529,-5.418661],[4.188133,-6.724831,3.571116,-1.404416,6.092984,-2.561833,0.210457,-2.111705,0.043321,-4.945067,-3.472809],[-7.275778,5.119870,2.561431,-5.270052,-9.866176,7.219465,-1.189307,-9.221059,-4.426111,-3.191850,-9.335674],[-5.492328,-5.527657,-5.686091,-0.405856,2.444233,-6.415516,-8.761508,6.690488,-9.246475,-5.993244,3.427389],[-5.713626,-1.228374,2.165534,-1.234161,-3.220796,-8.794839,-0.063224,2.184573,3.502902,1.170024,5.642623]],[[-1.839381,-4.482024,1.180779,-6.707848,9.979931,-1.927378,0.978338,7.209010,3.383289,-1.589936,-0.696934],[-3.726185,9.512868,7.938027,-0.262623,0.734177,2.242640,6.001608,-2.643970,1.081137,-9.606806,1.972543],[6.364453,2.080389,1.827829,-4.371661,-8.153631,7.552069,3.687928,-4.250779,-0.071729,-7.854425,3.929983],[-8.596208,8.208125,-8.840094,1.734582,2.029211,-6.673416,7.444211,4.885741,3.349095,1.483903,0.373084],[0.845210,-1.155476,5.755298,-9.591531,-7.094309,5.814448,-0.552917,5.206662,1.826517,3.338785,-5.477083],[0.937705,-7.962112,8.269762,-0.706342,-6.942247,9.453715,3.744022,7.203426,3.255429,-4.516275,8.682502],[-0.644801,-6.063373,-3.934438,1.369342,-6.614483,-5.008067,-4.598243,-0.055350,-9.712773,-9.828278,1.458381],[1.528588,9.240723,-6.727090,6.455863,5.349089,0.596224,8.704893,3.451500,-4.353756,-8.924811,-6.650408],[-4.929260,8.099583,-1.488709,-7.791699,5.106898,-5.933698,6.795438,-3.299816,9.381015,-4.145695,3.861503],[-0.406579,2.975947,-9.682424,5.947765,-1.421027,-4.378421,-7.233378,5.261546,-3.103771,-5.458025,-2.887735],[-3.699570,-4.643316,-5.504930,-2.153017,6.109198,-3.264812,2.533142,-0.944719,3.070504,-9.147165,-9.704679],[-2.484949,-4.983623,-0.665021,-9.050145,-1.289014,8.604783,-3.373374,6.144506,9.453566,1.374190,6.257287],[-7.344494,5.577599,-7.505418,3.123355,-4.434701,8.044378,8.558297,-0.397613,-5.449672,-4.095654,0.703929],[6.111643,4.156713,0.081933,-6.358874,5.342394,-4.848502,-1.684058,-1.501471,6.229537,-6.058450,8.312885],[-0.039078,4.484945,-4.601957,-4.586108,-6.785284,1.601302,-3.131850,-0.942719,9.519514,-1.281887,-3.990433]],[[9.724676,-0.005450,8.233183,6.191990,-8.714912,-9.457391,-1.317375,1.361767,8.855728,-4.531257,9.892160],[6.994364,8.415947,2.569548,7.075478,-5.457419,9.978041,6.292954,7.921999,1.762153,2.018113,7.310580],[0.586957,-7.154831,-5.984780,3.053565,-9.048606,5.687408,1.376658,6.205003,-8.592080,8.442740,-8.841633],[4.167088,7.119409,-3.503290,-7.443998,-1.089065,-8.654987,-8.799665,2.502120,9.344209,9.872107,5.489320],[8.318739,7.922665,4.558304,7.528558,4.550905,8.013216,-5.286126,6.404303,-5.521228,-4.381400,8.444921],[6.998759,-4.760372,-5.120702,-1.974873,-8.803495,-1.300569,3.647241,9.245306,9.301420,0.680053,3.651746],[-4.851725,4.802170,5.138171,-5.694867,-6.600190,0.806656,-1.117440,-4.780662,-0.856788,-1.074422,-6.054958],[-0.420947,6.889878,9.527696,-0.060108,-7.169925,1.281596,6.260142,1.088460,5.133221,-5.784224,-7.726130],[-2.735390,2.214052,1.249732,7.904147,0.753250,1.868815,-5.309850,-4.064833,-8.209990,8.066769,-5.118335],[-0.171825,-2.867660,8.063810,-5.028585,4.965718,8.776539,4.924885,5.470086,-4.048842,-3.957787,1.495170],[-1.972996,-9.657523,-5.060851,9.607103,-7.403410,-1.928100,7.426531,2.303837,5.326281,4.575951,7.854428],[0.060298,3.414643,-3.516168,-7.551804,-1.680144,8.851360,1.531230,1.635878,-4.919205,-5.883509,-7.008776],[-4.331602,8.930137,1.761221,-6.518780,-5.274046,6.023014,-8.479203,2.747184,6.216929,3.859723,-2.142407],[-0.327482,9.920166,-7.810622,3.989283,-4.608888,-5.116132,7.763098,-5.231177,0.927207,6.126994,-2.244829],[-2.758654,-8.885270,-3.667673,-1.725066,-6.897053,-7.896677,3.170554,1.816976,5.746803,-5.059281,-7.794911]],[[2.995870,-1.332957,7.592098,7.146442,5.227375,1.491726,3.493672,9.307700,7.003127,-5.334857,-3.140709],[-1.232536,-6.070218,3.441891,9.087362,-5.564303,-8.526421,4.249819,3.324352,9.667240,-9.573142,-5.388488],[-4.821968,8.114693,-4.997576,9.704348,6.385874,-4.809009,-9.364806,3.724679,3.421920,-2.703831,-5.759390],[3.602304,4.006904,-8.269326,-2.131897,6.314176,-3.857843,-1.202580,3.952885,7.833031,1.552511,-9.475429],[3.535315,1.191060,-1.668794,-1.554701,-1.483114,-0.816147,2.309686,0.567237,0.582753,-0.050329,-8.895342],[-5.846981,3.696133,-4.819077,-1.639983,-5.770101,-6.813179,-3.459041,6.393733,1.926709,2.271587,7.615620],[-1.988653,-2.048259,-5.838307,-4.777162,4.502413,-2.861372,-1.687741,3.802466,3.061533,9.565777,8.774774],[-0.615100,-7.569388,-3.586075,6.944060,-5.263719,3.680432,-9.097769,-5.012266,-5.450223,3.117278,-3.802810],[4.388877,-0.820330,4.293630,2.804225,-6.768121,5.276585,7.735378,-2.414419,-4.791734,9.778010,9.061456],[7.891178,-5.565339,0.508589,-6.203901,3.066939,9.326105,-7.058914,9.365360,7.890560,-9.370866,0.665185],[0.410312,-3.944044,-7.997128,5.030628,2.811521,2.932991,-7.483178,-8.746589,-8.729189,-7.911488,4.260051],[-9.542039,-9.836182,-3.589842,7.303707,8.418099,0.775726,-0.256487,0.850636,9.973229,-7.161946,-3.330692],[7.728011,4.517526,-5.820437,1.204732,-4.140766,0.291289,-0.850270,8.457138,9.797949,-4.563572,6.365931],[-2.763902,-8.853674,3.218663,3.228299,8.716914,-6.701992,-1.538527,-0.531813,0.491042,-4.609573,-4.514861],[-2.793821,-9.031267,-3.178866,0.344666,9.545975,-2.054409,4.216677,-6.841066,9.577869,-9.506567,-5.979474]]], dtype = "float64")#candidate|157|(10, 15, 11)|const|float64
uop_158 = relay.asin(const_157.astype('float64')) # shape=(10, 15, 11)
output = uop_158
output2 = uop_158
func_160 = relay.Function([], output)
mod['func_160'] = func_160
mod = relay.transform.InferType()(mod)
output = func_160()
func_161 = relay.Function([], output)
mutated_mod['func_161'] = func_161
mutated_mod = relay.transform.InferType()(mutated_mod)
func_160_call = mod.get_global_var('func_160')
func_161_call = mutated_mod.get_global_var('func_161')
call_162 = func_160_call()
call_163 = func_160_call()
var_164 = relay.var("var_164", dtype = "float64", shape = (10, 15, 11))#candidate|164|(10, 15, 11)|var|float64
bop_165 = relay.right_shift(call_162.astype('uint16'), relay.reshape(var_164.astype('uint16'), relay.shape_of(call_162))) # shape=(10, 15, 11)
bop_168 = relay.right_shift(call_163.astype('uint16'), relay.reshape(var_164.astype('uint16'), relay.shape_of(call_163))) # shape=(10, 15, 11)
uop_169 = relay.acosh(call_162.astype('float64')) # shape=(10, 15, 11)
uop_171 = relay.acosh(call_163.astype('float64')) # shape=(10, 15, 11)
bop_172 = relay.maximum(uop_169.astype('uint32'), relay.reshape(var_164.astype('uint32'), relay.shape_of(uop_169))) # shape=(10, 15, 11)
bop_175 = relay.maximum(uop_171.astype('uint32'), relay.reshape(var_164.astype('uint32'), relay.shape_of(uop_171))) # shape=(10, 15, 11)
uop_176 = relay.cos(call_162.astype('float32')) # shape=(10, 15, 11)
uop_178 = relay.cos(call_163.astype('float32')) # shape=(10, 15, 11)
var_179 = relay.var("var_179", dtype = "float64", shape = (10, 15, 11))#candidate|179|(10, 15, 11)|var|float64
bop_180 = relay.floor_divide(call_162.astype('float32'), relay.reshape(var_179.astype('float32'), relay.shape_of(call_162))) # shape=(10, 15, 11)
bop_183 = relay.floor_divide(call_163.astype('float32'), relay.reshape(var_179.astype('float32'), relay.shape_of(call_163))) # shape=(10, 15, 11)
bop_184 = relay.bitwise_and(call_162.astype('uint32'), relay.reshape(uop_176.astype('uint32'), relay.shape_of(call_162))) # shape=(10, 15, 11)
bop_187 = relay.bitwise_and(call_163.astype('uint32'), relay.reshape(uop_178.astype('uint32'), relay.shape_of(call_163))) # shape=(10, 15, 11)
var_188 = relay.var("var_188", dtype = "float32", shape = (10, 15, 11))#candidate|188|(10, 15, 11)|var|float32
bop_189 = relay.less(uop_176.astype('bool'), relay.reshape(var_188.astype('bool'), relay.shape_of(uop_176))) # shape=(10, 15, 11)
bop_192 = relay.less(uop_178.astype('bool'), relay.reshape(var_188.astype('bool'), relay.shape_of(uop_178))) # shape=(10, 15, 11)
var_193 = relay.var("var_193", dtype = "bool", shape = (10, 15, 11))#candidate|193|(10, 15, 11)|var|bool
bop_194 = relay.power(bop_189.astype('float32'), relay.reshape(var_193.astype('float32'), relay.shape_of(bop_189))) # shape=(10, 15, 11)
bop_197 = relay.power(bop_192.astype('float32'), relay.reshape(var_193.astype('float32'), relay.shape_of(bop_192))) # shape=(10, 15, 11)
uop_198 = relay.asin(bop_165.astype('float64')) # shape=(10, 15, 11)
uop_200 = relay.asin(bop_168.astype('float64')) # shape=(10, 15, 11)
bop_201 = relay.divide(uop_176.astype('float64'), relay.reshape(uop_169.astype('float64'), relay.shape_of(uop_176))) # shape=(10, 15, 11)
bop_204 = relay.divide(uop_178.astype('float64'), relay.reshape(uop_171.astype('float64'), relay.shape_of(uop_178))) # shape=(10, 15, 11)
bop_205 = relay.logical_or(var_188.astype('bool'), relay.reshape(bop_180.astype('bool'), relay.shape_of(var_188))) # shape=(10, 15, 11)
bop_208 = relay.logical_or(var_188.astype('bool'), relay.reshape(bop_183.astype('bool'), relay.shape_of(var_188))) # shape=(10, 15, 11)
func_151_call = mod.get_global_var('func_151')
func_155_call = mutated_mod.get_global_var('func_155')
const_210 = relay.const(2.381031, dtype = "float64")#candidate|210|()|const|float64
var_211 = relay.var("var_211", dtype = "uint16", shape = (56,))#candidate|211|(56,)|var|uint16
var_212 = relay.var("var_212", dtype = "float64", shape = (4, 88))#candidate|212|(4, 88)|var|float64
call_209 = relay.TupleGetItem(func_151_call(relay.reshape(const_210.astype('float64'), []), relay.reshape(var_211.astype('uint16'), [56,]), relay.reshape(var_212.astype('float64'), [352,]), ), 1)
call_213 = relay.TupleGetItem(func_155_call(relay.reshape(const_210.astype('float64'), []), relay.reshape(var_211.astype('uint16'), [56,]), relay.reshape(var_212.astype('float64'), [352,]), ), 1)
bop_214 = relay.right_shift(bop_189.astype('uint16'), relay.reshape(var_193.astype('uint16'), relay.shape_of(bop_189))) # shape=(10, 15, 11)
bop_217 = relay.right_shift(bop_192.astype('uint16'), relay.reshape(var_193.astype('uint16'), relay.shape_of(bop_192))) # shape=(10, 15, 11)
var_218 = relay.var("var_218", dtype = "float64", shape = (10, 15, 11))#candidate|218|(10, 15, 11)|var|float64
bop_219 = relay.mod(call_162.astype('float32'), relay.reshape(var_218.astype('float32'), relay.shape_of(call_162))) # shape=(10, 15, 11)
bop_222 = relay.mod(call_163.astype('float32'), relay.reshape(var_218.astype('float32'), relay.shape_of(call_163))) # shape=(10, 15, 11)
var_223 = relay.var("var_223", dtype = "float32", shape = (10, 15, 11))#candidate|223|(10, 15, 11)|var|float32
bop_224 = relay.logical_xor(bop_180.astype('uint8'), relay.reshape(var_223.astype('uint8'), relay.shape_of(bop_180))) # shape=(10, 15, 11)
bop_227 = relay.logical_xor(bop_183.astype('uint8'), relay.reshape(var_223.astype('uint8'), relay.shape_of(bop_183))) # shape=(10, 15, 11)
bop_228 = relay.subtract(bop_194.astype('float64'), relay.reshape(bop_189.astype('float64'), relay.shape_of(bop_194))) # shape=(10, 15, 11)
bop_231 = relay.subtract(bop_197.astype('float64'), relay.reshape(bop_192.astype('float64'), relay.shape_of(bop_197))) # shape=(10, 15, 11)
bop_232 = relay.less(bop_194.astype('bool'), relay.reshape(bop_201.astype('bool'), relay.shape_of(bop_194))) # shape=(10, 15, 11)
bop_235 = relay.less(bop_197.astype('bool'), relay.reshape(bop_204.astype('bool'), relay.shape_of(bop_197))) # shape=(10, 15, 11)
uop_236 = relay.log10(var_212.astype('float64')) # shape=(4, 88)
bop_238 = relay.right_shift(bop_219.astype('uint32'), relay.reshape(bop_194.astype('uint32'), relay.shape_of(bop_219))) # shape=(10, 15, 11)
bop_241 = relay.right_shift(bop_222.astype('uint32'), relay.reshape(bop_197.astype('uint32'), relay.shape_of(bop_222))) # shape=(10, 15, 11)
uop_242 = relay.log2(bop_201.astype('float64')) # shape=(10, 15, 11)
uop_244 = relay.log2(bop_204.astype('float64')) # shape=(10, 15, 11)
bop_245 = relay.bitwise_xor(uop_242.astype('int8'), relay.reshape(bop_172.astype('int8'), relay.shape_of(uop_242))) # shape=(10, 15, 11)
bop_248 = relay.bitwise_xor(uop_244.astype('int8'), relay.reshape(bop_175.astype('int8'), relay.shape_of(uop_244))) # shape=(10, 15, 11)
var_249 = relay.var("var_249", dtype = "float64", shape = (4, 88))#candidate|249|(4, 88)|var|float64
bop_250 = relay.divide(var_212.astype('float32'), relay.reshape(var_249.astype('float32'), relay.shape_of(var_212))) # shape=(4, 88)
uop_253 = relay.log10(bop_250.astype('float32')) # shape=(4, 88)
uop_255 = relay.log(bop_245.astype('float64')) # shape=(10, 15, 11)
uop_257 = relay.log(bop_248.astype('float64')) # shape=(10, 15, 11)
uop_258 = relay.atanh(uop_255.astype('float64')) # shape=(10, 15, 11)
uop_260 = relay.atanh(uop_257.astype('float64')) # shape=(10, 15, 11)
uop_261 = relay.log(uop_258.astype('float64')) # shape=(10, 15, 11)
uop_263 = relay.log(uop_260.astype('float64')) # shape=(10, 15, 11)
output = relay.Tuple([bop_184,uop_198,bop_205,call_209,const_210,var_211,bop_214,bop_224,bop_228,bop_232,uop_236,bop_238,uop_253,uop_261,])
output2 = relay.Tuple([bop_187,uop_200,bop_208,call_213,const_210,var_211,bop_217,bop_227,bop_231,bop_235,uop_236,bop_241,uop_253,uop_263,])
func_264 = relay.Function([var_164,var_179,var_188,var_193,var_211,var_212,var_218,var_223,var_249,], output)
mod['func_264'] = func_264
mod = relay.transform.InferType()(mod)
var_265 = relay.var("var_265", dtype = "float64", shape = (10, 15, 11))#candidate|265|(10, 15, 11)|var|float64
var_266 = relay.var("var_266", dtype = "float64", shape = (10, 15, 11))#candidate|266|(10, 15, 11)|var|float64
var_267 = relay.var("var_267", dtype = "float32", shape = (10, 15, 11))#candidate|267|(10, 15, 11)|var|float32
var_268 = relay.var("var_268", dtype = "bool", shape = (10, 15, 11))#candidate|268|(10, 15, 11)|var|bool
var_269 = relay.var("var_269", dtype = "uint16", shape = (56,))#candidate|269|(56,)|var|uint16
var_270 = relay.var("var_270", dtype = "float64", shape = (4, 88))#candidate|270|(4, 88)|var|float64
var_271 = relay.var("var_271", dtype = "float64", shape = (10, 15, 11))#candidate|271|(10, 15, 11)|var|float64
var_272 = relay.var("var_272", dtype = "float32", shape = (10, 15, 11))#candidate|272|(10, 15, 11)|var|float32
var_273 = relay.var("var_273", dtype = "float64", shape = (4, 88))#candidate|273|(4, 88)|var|float64
output = func_264(var_265,var_266,var_267,var_268,var_269,var_270,var_271,var_272,var_273,)
func_274 = relay.Function([var_265,var_266,var_267,var_268,var_269,var_270,var_271,var_272,var_273,], output)
mutated_mod['func_274'] = func_274
mutated_mod = relay.transform.InferType()(mutated_mod)
const_276 = relay.const([[-0.599442,4.373563,-6.908899,-9.572689,4.296013],[-8.360672,1.135003,-2.714332,5.393150,-2.499092],[-4.265035,0.494419,-2.347739,-1.651752,-0.114655],[-2.757874,8.823237,-7.643105,-0.130327,1.322451]], dtype = "float32")#candidate|276|(4, 5)|const|float32
uop_277 = relay.cosh(const_276.astype('float32')) # shape=(4, 5)
uop_279 = relay.erf(uop_277.astype('float32')) # shape=(4, 5)
uop_281 = relay.exp(uop_279.astype('float32')) # shape=(4, 5)
uop_283 = relay.acos(uop_281.astype('float64')) # shape=(4, 5)
uop_285 = relay.acos(uop_283.astype('float64')) # shape=(4, 5)
bop_287 = relay.bitwise_and(uop_285.astype('int64'), relay.reshape(uop_281.astype('int64'), relay.shape_of(uop_285))) # shape=(4, 5)
bop_290 = relay.divide(bop_287.astype('float64'), relay.reshape(uop_283.astype('float64'), relay.shape_of(bop_287))) # shape=(4, 5)
uop_293 = relay.tan(uop_283.astype('float32')) # shape=(4, 5)
uop_295 = relay.exp(uop_279.astype('float32')) # shape=(4, 5)
uop_297 = relay.sinh(uop_283.astype('float32')) # shape=(4, 5)
bop_299 = relay.minimum(uop_293.astype('uint32'), relay.reshape(uop_295.astype('uint32'), relay.shape_of(uop_293))) # shape=(4, 5)
output = relay.Tuple([bop_290,uop_297,bop_299,])
output2 = relay.Tuple([bop_290,uop_297,bop_299,])
func_302 = relay.Function([], output)
mod['func_302'] = func_302
mod = relay.transform.InferType()(mod)
mutated_mod['func_302'] = func_302
mutated_mod = relay.transform.InferType()(mutated_mod)
func_302_call = mutated_mod.get_global_var('func_302')
call_303 = func_302_call()
output = call_303
func_304 = relay.Function([], output)
mutated_mod['func_304'] = func_304
mutated_mod = relay.transform.InferType()(mutated_mod)
func_160_call = mod.get_global_var('func_160')
func_161_call = mutated_mod.get_global_var('func_161')
call_305 = func_160_call()
call_306 = func_160_call()
var_307 = relay.var("var_307", dtype = "float64", shape = (10, 15, 11))#candidate|307|(10, 15, 11)|var|float64
bop_308 = relay.subtract(call_305.astype('uint32'), relay.reshape(var_307.astype('uint32'), relay.shape_of(call_305))) # shape=(10, 15, 11)
bop_311 = relay.subtract(call_306.astype('uint32'), relay.reshape(var_307.astype('uint32'), relay.shape_of(call_306))) # shape=(10, 15, 11)
uop_312 = relay.atanh(var_307.astype('float32')) # shape=(10, 15, 11)
uop_314 = relay.exp(uop_312.astype('float32')) # shape=(10, 15, 11)
uop_316 = relay.sigmoid(uop_312.astype('float32')) # shape=(10, 15, 11)
bop_318 = relay.multiply(uop_312.astype('int64'), relay.reshape(uop_316.astype('int64'), relay.shape_of(uop_312))) # shape=(10, 15, 11)
output = relay.Tuple([bop_308,uop_314,bop_318,])
output2 = relay.Tuple([bop_311,uop_314,bop_318,])
func_321 = relay.Function([var_307,], output)
mod['func_321'] = func_321
mod = relay.transform.InferType()(mod)
var_322 = relay.var("var_322", dtype = "float64", shape = (10, 15, 11))#candidate|322|(10, 15, 11)|var|float64
output = func_321(var_322)
func_323 = relay.Function([var_322], output)
mutated_mod['func_323'] = func_323
mutated_mod = relay.transform.InferType()(mutated_mod)
var_325 = relay.var("var_325", dtype = "float32", shape = (13,))#candidate|325|(13,)|var|float32
var_326 = relay.var("var_326", dtype = "float32", shape = (13,))#candidate|326|(13,)|var|float32
bop_327 = relay.floor_mod(var_325.astype('float32'), relay.reshape(var_326.astype('float32'), relay.shape_of(var_325))) # shape=(13,)
var_330 = relay.var("var_330", dtype = "float32", shape = (13,))#candidate|330|(13,)|var|float32
bop_331 = relay.mod(bop_327.astype('float64'), relay.reshape(var_330.astype('float64'), relay.shape_of(bop_327))) # shape=(13,)
func_122_call = mod.get_global_var('func_122')
func_126_call = mutated_mod.get_global_var('func_126')
const_335 = relay.const(-7, dtype = "uint16")#candidate|335|()|const|uint16
const_336 = relay.const([[-2,-2,5,-10,7,5,-9,-9,9,-8,-2,-7,-7,-3,-4,1,7,2,3,8,-2,-5,10,-7,-4,1,5,3],[2,3,6,-3,9,9,-9,-1,2,1,10,10,-4,-3,10,-1,9,-2,9,-10,-3,2,5,-3,1,-8,2,6]], dtype = "uint16")#candidate|336|(2, 28)|const|uint16
call_334 = relay.TupleGetItem(func_122_call(relay.reshape(const_335.astype('uint16'), []), relay.reshape(const_336.astype('uint16'), [4, 14]), ), 1)
call_337 = relay.TupleGetItem(func_126_call(relay.reshape(const_335.astype('uint16'), []), relay.reshape(const_336.astype('uint16'), [4, 14]), ), 1)
uop_338 = relay.sinh(call_334.astype('float64')) # shape=(4, 14)
uop_340 = relay.sinh(call_337.astype('float64')) # shape=(4, 14)
bop_341 = relay.equal(uop_338.astype('bool'), relay.reshape(call_334.astype('bool'), relay.shape_of(uop_338))) # shape=(4, 14)
bop_344 = relay.equal(uop_340.astype('bool'), relay.reshape(call_337.astype('bool'), relay.shape_of(uop_340))) # shape=(4, 14)
bop_345 = relay.floor_mod(bop_341.astype('float32'), relay.reshape(uop_338.astype('float32'), relay.shape_of(bop_341))) # shape=(4, 14)
bop_348 = relay.floor_mod(bop_344.astype('float32'), relay.reshape(uop_340.astype('float32'), relay.shape_of(bop_344))) # shape=(4, 14)
uop_349 = relay.rsqrt(uop_338.astype('float32')) # shape=(4, 14)
uop_351 = relay.rsqrt(uop_340.astype('float32')) # shape=(4, 14)
bop_352 = relay.add(uop_349.astype('uint32'), relay.reshape(bop_341.astype('uint32'), relay.shape_of(uop_349))) # shape=(4, 14)
bop_355 = relay.add(uop_351.astype('uint32'), relay.reshape(bop_344.astype('uint32'), relay.shape_of(uop_351))) # shape=(4, 14)
uop_356 = relay.atan(bop_352.astype('float64')) # shape=(4, 14)
uop_358 = relay.atan(bop_355.astype('float64')) # shape=(4, 14)
uop_359 = relay.acosh(var_325.astype('float32')) # shape=(13,)
uop_361 = relay.log(uop_349.astype('float64')) # shape=(4, 14)
uop_363 = relay.log(uop_351.astype('float64')) # shape=(4, 14)
bop_364 = relay.less_equal(uop_361.astype('bool'), relay.reshape(const_336.astype('bool'), relay.shape_of(uop_361))) # shape=(4, 14)
bop_367 = relay.less_equal(uop_363.astype('bool'), relay.reshape(const_336.astype('bool'), relay.shape_of(uop_363))) # shape=(4, 14)
uop_368 = relay.sqrt(uop_356.astype('float32')) # shape=(4, 14)
uop_370 = relay.sqrt(uop_358.astype('float32')) # shape=(4, 14)
output = relay.Tuple([bop_331,const_335,bop_345,uop_359,bop_364,uop_368,])
output2 = relay.Tuple([bop_331,const_335,bop_348,uop_359,bop_367,uop_370,])
F = relay.Function([var_325,var_326,var_330,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_325,var_326,var_330,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_325= np.array([1.824808,-4.251792,-1.360661,3.986335,-2.022732,-8.203177,-1.046813,4.971565,-9.912467,6.858133,2.638552,-2.297781,-8.897857], dtype='float32')
module1.set_input('var_325', input_325)
input_326= np.array([-2.261862,8.488820,-3.244129,-3.569909,0.785346,1.042486,-9.003773,-4.355055,4.074862,-4.249435,-9.915414,-7.504875,-4.380101], dtype='float32')
module1.set_input('var_326', input_326)
input_330= np.array([6.895444,-4.896147,-7.308386,-3.955556,-9.706895,-1.686622,4.082608,8.298598,2.034567,-1.752888,7.092818,-5.312530,2.055536], dtype='float32')
module1.set_input('var_330', input_330)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_325, input_326, input_330, )
res3 = intrp3.evaluate()(input_325, input_326, input_330, )
res4 = intrp4.evaluate()(input_325, input_326, input_330, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
module5.set_input('var_325', input_325)
module5.set_input('var_326', input_326)
module5.set_input('var_330', input_330)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_325, input_326, input_330, )
res7 = intrp7.evaluate()(input_325, input_326, input_330, )
res8 = intrp8.evaluate()(input_325, input_326, input_330, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
module9.set_input('var_325', input_325)
module9.set_input('var_326', input_326)
module9.set_input('var_330', input_330)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_325, input_326, input_330, )
res11 = intrp11.evaluate()(input_325, input_326, input_330, )
res12 = intrp12.evaluate()(input_325, input_326, input_330, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
module13.set_input('var_325', input_325)
module13.set_input('var_326', input_326)
module13.set_input('var_330', input_330)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_325, input_326, input_330, )
res15 = intrp15.evaluate()(input_325, input_326, input_330, )
res16 = intrp16.evaluate()(input_325, input_326, input_330, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
module17.set_input('var_325', input_325)
module17.set_input('var_326', input_326)
module17.set_input('var_330', input_330)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_325, input_326, input_330, )
res19 = intrp19.evaluate()(input_325, input_326, input_330, )
res20 = intrp20.evaluate()(input_325, input_326, input_330, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
module21.set_input('var_325', input_325)
module21.set_input('var_326', input_326)
module21.set_input('var_330', input_330)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_325, input_326, input_330, )
res23 = intrp23.evaluate()(input_325, input_326, input_330, )
res24 = intrp24.evaluate()(input_325, input_326, input_330, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()

'''6: TVMFuncCall
5: _ZNSt17_Function_handlerIFvN3tvm7runtime7
4: tvm::runtime::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const [clone .isra.808]
3: tvm::runtime::GraphExecutorCreate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module const&, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
2: tvm::runtime::GraphExecutor::Init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
1: tvm::runtime::GraphExecutor::SetupOpExecs()
0: tvm::runtime::GraphExecutor::CreateTVMOp(tvm::runtime::TVMOpParam const&, std::vector<DLTensor, std::allocator<DLTensor> > const&)

'''