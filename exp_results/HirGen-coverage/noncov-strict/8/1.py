import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (10,))#candidate|0|(10,)|var|float32
var_1 = relay.var("var_1", dtype = "float32", shape = (10,))#candidate|1|(10,)|var|float32
bop_2 = relay.equal(var_0.astype('bool'), relay.reshape(var_1.astype('bool'), relay.shape_of(var_0))) # shape=(10,)
output = bop_2
output2 = bop_2
func_5 = relay.Function([var_0,var_1,], output)
mod['func_5'] = func_5
mod = relay.transform.InferType()(mod)
mutated_mod['func_5'] = func_5
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5_call = mutated_mod.get_global_var('func_5')
var_7 = relay.var("var_7", dtype = "float32", shape = (10,))#candidate|7|(10,)|var|float32
var_8 = relay.var("var_8", dtype = "float32", shape = (10,))#candidate|8|(10,)|var|float32
call_6 = func_5_call(var_7,var_8,)
output = call_6
func_9 = relay.Function([var_7,var_8,], output)
mutated_mod['func_9'] = func_9
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11 = relay.var("var_11", dtype = "float64", shape = (14, 3, 8))#candidate|11|(14, 3, 8)|var|float64
uop_12 = relay.log10(var_11.astype('float64')) # shape=(14, 3, 8)
bop_14 = relay.power(uop_12.astype('float64'), relay.reshape(var_11.astype('float64'), relay.shape_of(uop_12))) # shape=(14, 3, 8)
var_17 = relay.var("var_17", dtype = "float64", shape = (14, 3, 8))#candidate|17|(14, 3, 8)|var|float64
bop_18 = relay.equal(bop_14.astype('bool'), relay.reshape(var_17.astype('bool'), relay.shape_of(bop_14))) # shape=(14, 3, 8)
uop_21 = relay.atanh(uop_12.astype('float32')) # shape=(14, 3, 8)
bop_23 = relay.power(uop_21.astype('float64'), relay.reshape(bop_18.astype('float64'), relay.shape_of(uop_21))) # shape=(14, 3, 8)
uop_26 = relay.sinh(var_17.astype('float64')) # shape=(14, 3, 8)
uop_28 = relay.cosh(uop_26.astype('float64')) # shape=(14, 3, 8)
uop_30 = relay.erf(uop_26.astype('float32')) # shape=(14, 3, 8)
bop_32 = relay.greater_equal(var_17.astype('bool'), relay.reshape(uop_26.astype('bool'), relay.shape_of(var_17))) # shape=(14, 3, 8)
output = relay.Tuple([bop_23,uop_28,uop_30,bop_32,])
output2 = relay.Tuple([bop_23,uop_28,uop_30,bop_32,])
func_35 = relay.Function([var_11,var_17,], output)
mod['func_35'] = func_35
mod = relay.transform.InferType()(mod)
mutated_mod['func_35'] = func_35
mutated_mod = relay.transform.InferType()(mutated_mod)
func_35_call = mutated_mod.get_global_var('func_35')
var_37 = relay.var("var_37", dtype = "float64", shape = (14, 3, 8))#candidate|37|(14, 3, 8)|var|float64
var_38 = relay.var("var_38", dtype = "float64", shape = (14, 3, 8))#candidate|38|(14, 3, 8)|var|float64
call_36 = func_35_call(var_37,var_38,)
output = call_36
func_39 = relay.Function([var_37,var_38,], output)
mutated_mod['func_39'] = func_39
mutated_mod = relay.transform.InferType()(mutated_mod)
var_41 = relay.var("var_41", dtype = "float64", shape = (16, 5))#candidate|41|(16, 5)|var|float64
uop_42 = relay.asinh(var_41.astype('float64')) # shape=(16, 5)
bop_44 = relay.left_shift(var_41.astype('int64'), relay.reshape(uop_42.astype('int64'), relay.shape_of(var_41))) # shape=(16, 5)
uop_47 = relay.tan(var_41.astype('float64')) # shape=(16, 5)
uop_49 = relay.acos(uop_47.astype('float64')) # shape=(16, 5)
uop_51 = relay.tan(uop_49.astype('float64')) # shape=(16, 5)
bop_53 = relay.right_shift(bop_44.astype('uint8'), relay.reshape(uop_47.astype('uint8'), relay.shape_of(bop_44))) # shape=(16, 5)
uop_56 = relay.acos(uop_51.astype('float32')) # shape=(16, 5)
uop_58 = relay.asinh(uop_56.astype('float32')) # shape=(16, 5)
var_60 = relay.var("var_60", dtype = "float32", shape = (16, 5))#candidate|60|(16, 5)|var|float32
bop_61 = relay.subtract(uop_58.astype('uint32'), relay.reshape(var_60.astype('uint32'), relay.shape_of(uop_58))) # shape=(16, 5)
var_64 = relay.var("var_64", dtype = "float64", shape = (16, 5))#candidate|64|(16, 5)|var|float64
bop_65 = relay.logical_and(uop_51.astype('bool'), relay.reshape(var_64.astype('bool'), relay.shape_of(uop_51))) # shape=(16, 5)
uop_68 = relay.exp(uop_42.astype('float32')) # shape=(16, 5)
var_70 = relay.var("var_70", dtype = "float32", shape = (16, 5))#candidate|70|(16, 5)|var|float32
bop_71 = relay.less_equal(uop_58.astype('bool'), relay.reshape(var_70.astype('bool'), relay.shape_of(uop_58))) # shape=(16, 5)
output = relay.Tuple([bop_53,bop_61,bop_65,uop_68,bop_71,])
output2 = relay.Tuple([bop_53,bop_61,bop_65,uop_68,bop_71,])
func_74 = relay.Function([var_41,var_60,var_64,var_70,], output)
mod['func_74'] = func_74
mod = relay.transform.InferType()(mod)
var_75 = relay.var("var_75", dtype = "float64", shape = (16, 5))#candidate|75|(16, 5)|var|float64
var_76 = relay.var("var_76", dtype = "float32", shape = (16, 5))#candidate|76|(16, 5)|var|float32
var_77 = relay.var("var_77", dtype = "float64", shape = (16, 5))#candidate|77|(16, 5)|var|float64
var_78 = relay.var("var_78", dtype = "float32", shape = (16, 5))#candidate|78|(16, 5)|var|float32
output = func_74(var_75,var_76,var_77,var_78,)
func_79 = relay.Function([var_75,var_76,var_77,var_78,], output)
mutated_mod['func_79'] = func_79
mutated_mod = relay.transform.InferType()(mutated_mod)
var_81 = relay.var("var_81", dtype = "float32", shape = (5,))#candidate|81|(5,)|var|float32
uop_82 = relay.acos(var_81.astype('float32')) # shape=(5,)
uop_84 = relay.asinh(var_81.astype('float32')) # shape=(5,)
bop_86 = relay.bitwise_or(var_81.astype('int16'), relay.reshape(uop_84.astype('int16'), relay.shape_of(var_81))) # shape=(5,)
func_35_call = mod.get_global_var('func_35')
func_39_call = mutated_mod.get_global_var('func_39')
var_90 = relay.var("var_90", dtype = "float64", shape = (336,))#candidate|90|(336,)|var|float64
call_89 = relay.TupleGetItem(func_35_call(relay.reshape(var_90.astype('float64'), [14, 3, 8]), relay.reshape(var_90.astype('float64'), [14, 3, 8]), ), 0)
call_91 = relay.TupleGetItem(func_39_call(relay.reshape(var_90.astype('float64'), [14, 3, 8]), relay.reshape(var_90.astype('float64'), [14, 3, 8]), ), 0)
var_92 = relay.var("var_92", dtype = "float64", shape = (14, 3, 8))#candidate|92|(14, 3, 8)|var|float64
bop_93 = relay.less(call_89.astype('bool'), relay.reshape(var_92.astype('bool'), relay.shape_of(call_89))) # shape=(14, 3, 8)
bop_96 = relay.less(call_91.astype('bool'), relay.reshape(var_92.astype('bool'), relay.shape_of(call_91))) # shape=(14, 3, 8)
output = relay.Tuple([uop_82,bop_86,var_90,bop_93,])
output2 = relay.Tuple([uop_82,bop_86,var_90,bop_96,])
func_97 = relay.Function([var_81,var_90,var_92,], output)
mod['func_97'] = func_97
mod = relay.transform.InferType()(mod)
mutated_mod['func_97'] = func_97
mutated_mod = relay.transform.InferType()(mutated_mod)
func_97_call = mutated_mod.get_global_var('func_97')
var_99 = relay.var("var_99", dtype = "float32", shape = (5,))#candidate|99|(5,)|var|float32
var_100 = relay.var("var_100", dtype = "float64", shape = (336,))#candidate|100|(336,)|var|float64
var_101 = relay.var("var_101", dtype = "float64", shape = (14, 3, 8))#candidate|101|(14, 3, 8)|var|float64
call_98 = func_97_call(var_99,var_100,var_101,)
output = call_98
func_102 = relay.Function([var_99,var_100,var_101,], output)
mutated_mod['func_102'] = func_102
mutated_mod = relay.transform.InferType()(mutated_mod)
var_104 = relay.var("var_104", dtype = "float32", shape = ())#candidate|104|()|var|float32
uop_105 = relay.cosh(var_104.astype('float32')) # shape=()
var_107 = relay.var("var_107", dtype = "float32", shape = ())#candidate|107|()|var|float32
bop_108 = relay.logical_xor(uop_105.astype('int64'), var_107.astype('int64')) # shape=()
output = relay.Tuple([bop_108,])
output2 = relay.Tuple([bop_108,])
func_111 = relay.Function([var_104,var_107,], output)
mod['func_111'] = func_111
mod = relay.transform.InferType()(mod)
mutated_mod['func_111'] = func_111
mutated_mod = relay.transform.InferType()(mutated_mod)
func_111_call = mutated_mod.get_global_var('func_111')
var_113 = relay.var("var_113", dtype = "float32", shape = ())#candidate|113|()|var|float32
var_114 = relay.var("var_114", dtype = "float32", shape = ())#candidate|114|()|var|float32
call_112 = func_111_call(var_113,var_114,)
output = call_112
func_115 = relay.Function([var_113,var_114,], output)
mutated_mod['func_115'] = func_115
mutated_mod = relay.transform.InferType()(mutated_mod)
const_117 = relay.const([[[4,-4,-7,10,-2,2,-3,4,9]],[[-9,5,9,9,8,-5,-9,3,4]],[[6,9,-8,-10,6,-6,3,4,-3]],[[4,8,6,-3,4,8,9,2,4]],[[9,-1,-5,1,-2,6,10,9,-5]]], dtype = "uint32")#candidate|117|(5, 1, 9)|const|uint32
var_118 = relay.var("var_118", dtype = "uint32", shape = (5, 15, 9))#candidate|118|(5, 15, 9)|var|uint32
bop_119 = relay.left_shift(const_117.astype('uint32'), var_118.astype('uint32')) # shape=(5, 15, 9)
var_122 = relay.var("var_122", dtype = "uint32", shape = (5, 4, 9))#candidate|122|(5, 4, 9)|var|uint32
bop_123 = relay.multiply(const_117.astype('uint32'), var_122.astype('uint32')) # shape=(5, 4, 9)
uop_126 = relay.sinh(var_122.astype('float64')) # shape=(5, 4, 9)
bop_128 = relay.logical_or(const_117.astype('bool'), var_118.astype('bool')) # shape=(5, 15, 9)
bop_131 = relay.divide(uop_126.astype('float32'), const_117.astype('float32')) # shape=(5, 4, 9)
uop_134 = relay.sigmoid(uop_126.astype('float64')) # shape=(5, 4, 9)
uop_136 = relay.rsqrt(uop_134.astype('float64')) # shape=(5, 4, 9)
uop_138 = relay.sqrt(uop_134.astype('float64')) # shape=(5, 4, 9)
bop_140 = relay.less(uop_136.astype('bool'), relay.reshape(var_122.astype('bool'), relay.shape_of(uop_136))) # shape=(5, 4, 9)
bop_143 = relay.mod(uop_134.astype('float32'), relay.reshape(bop_131.astype('float32'), relay.shape_of(uop_134))) # shape=(5, 4, 9)
bop_146 = relay.less(bop_143.astype('bool'), relay.reshape(uop_134.astype('bool'), relay.shape_of(bop_143))) # shape=(5, 4, 9)
uop_149 = relay.asin(bop_131.astype('float64')) # shape=(5, 4, 9)
uop_151 = relay.acosh(bop_146.astype('float64')) # shape=(5, 4, 9)
bop_153 = relay.equal(bop_131.astype('bool'), relay.reshape(uop_151.astype('bool'), relay.shape_of(bop_131))) # shape=(5, 4, 9)
uop_156 = relay.sin(bop_131.astype('float64')) # shape=(5, 4, 9)
bop_158 = relay.mod(uop_138.astype('float64'), relay.reshape(var_122.astype('float64'), relay.shape_of(uop_138))) # shape=(5, 4, 9)
bop_161 = relay.logical_or(uop_126.astype('bool'), relay.reshape(bop_123.astype('bool'), relay.shape_of(uop_126))) # shape=(5, 4, 9)
output = relay.Tuple([bop_119,bop_128,bop_140,uop_149,bop_153,uop_156,bop_158,bop_161,])
output2 = relay.Tuple([bop_119,bop_128,bop_140,uop_149,bop_153,uop_156,bop_158,bop_161,])
func_164 = relay.Function([var_118,var_122,], output)
mod['func_164'] = func_164
mod = relay.transform.InferType()(mod)
var_165 = relay.var("var_165", dtype = "uint32", shape = (5, 15, 9))#candidate|165|(5, 15, 9)|var|uint32
var_166 = relay.var("var_166", dtype = "uint32", shape = (5, 4, 9))#candidate|166|(5, 4, 9)|var|uint32
output = func_164(var_165,var_166,)
func_167 = relay.Function([var_165,var_166,], output)
mutated_mod['func_167'] = func_167
mutated_mod = relay.transform.InferType()(mutated_mod)
var_169 = relay.var("var_169", dtype = "uint16", shape = ())#candidate|169|()|var|uint16
var_170 = relay.var("var_170", dtype = "uint16", shape = ())#candidate|170|()|var|uint16
bop_171 = relay.multiply(var_169.astype('uint16'), var_170.astype('uint16')) # shape=()
bop_174 = relay.logical_xor(bop_171.astype('int16'), var_169.astype('int16')) # shape=()
bop_177 = relay.left_shift(bop_171.astype('int16'), var_170.astype('int16')) # shape=()
uop_180 = relay.acos(bop_171.astype('float32')) # shape=()
bop_182 = relay.minimum(uop_180.astype('int8'), bop_174.astype('int8')) # shape=()
func_111_call = mod.get_global_var('func_111')
func_115_call = mutated_mod.get_global_var('func_115')
call_185 = relay.TupleGetItem(func_111_call(relay.reshape(bop_177.astype('float32'), []), relay.reshape(var_169.astype('float32'), []), ), 0)
call_186 = relay.TupleGetItem(func_115_call(relay.reshape(bop_177.astype('float32'), []), relay.reshape(var_169.astype('float32'), []), ), 0)
const_187 = relay.const([-4.140325,-7.212577,9.508153,2.228950,-9.373353], dtype = "float32")#candidate|187|(5,)|const|float32
bop_188 = relay.logical_xor(uop_180.astype('uint32'), const_187.astype('uint32')) # shape=(5,)
func_164_call = mod.get_global_var('func_164')
func_167_call = mutated_mod.get_global_var('func_167')
const_192 = relay.const([[-2,4,-6,-4,-8,-9,-9,7,-10,-3,7,7,4,-1,-9,-3,3,5,-2,-8,9,3,6,-3,-2,-9,10,1,3,10,4,-3,1,-6,-8,-5,-2,7,6,-6,6,1,1,-1,3,-6,-5,4,8,10,4,3,6,6,1,2,7,-3,-5,-3,-6,-5,-8,6,9,-2,-1,-1,-6,-1,-8,2,8,4,-2,2,-5,-6,6,-9,-7,-9,5,-5,6,-7,1,-2,7,-2,2,-6,3,-2,-3,7,9,8,8,4,-1,8,2,-1,-5,-7,-9,8,4,-2,-10,-9,-4,4,2,6,10,-7,6,-1,-1,2,1,3,-9,-4,-5,-9,-2,3,-2,9,-4,6,4],[-3,-8,-8,-4,-6,-7,1,3,-3,4,1,6,9,6,-2,-5,-9,1,-1,6,7,8,-7,9,-8,-7,-8,-10,-5,-6,-9,3,3,-3,8,-2,7,4,-10,8,-7,-8,-10,-3,5,1,10,1,-5,-10,8,-9,-9,-8,7,9,-1,-8,-3,5,2,-1,-7,8,9,-8,-9,1,-9,8,-7,9,-4,-10,-1,5,10,-8,10,-2,5,7,4,-3,-9,10,-10,5,-9,8,-9,-5,-9,-5,-10,-10,-4,2,-5,2,8,9,2,-9,-8,-10,10,-3,8,-9,-6,5,4,-9,-2,2,-4,7,4,6,3,-8,-1,3,10,8,-9,-5,2,-1,-4,6,3,-3,-9],[8,4,4,-6,5,-7,9,7,8,-7,-6,3,10,-5,-2,1,-6,-7,-2,-5,8,-1,-7,-2,-10,5,1,-9,-3,-3,9,-8,-10,-3,-7,-1,-10,3,-3,-2,3,8,-7,-2,-3,9,8,-7,2,3,10,-6,8,-8,2,3,-1,-9,10,-1,6,-3,7,5,1,1,-3,4,6,-2,3,-6,-6,3,6,-7,3,-9,1,2,-3,5,-9,7,10,4,5,-8,-4,-7,4,-3,5,5,-7,9,-9,-5,-5,6,2,-1,-9,-9,1,-3,9,9,-9,9,-3,-5,-7,3,-3,-1,8,-3,2,-3,-8,-5,-4,1,1,9,-10,-6,-5,1,9,-4,-4,7,-8],[9,7,-3,10,-6,5,5,-2,-4,-2,-6,7,-10,-6,8,-5,2,-3,-3,-2,-4,-4,4,-1,-2,5,4,7,-4,-10,1,-9,7,9,-5,-1,-7,9,3,-2,-3,-5,9,-2,7,5,-7,-10,-8,-8,-1,3,6,-1,-2,-5,10,-1,-4,-3,-4,8,5,-8,8,-8,-3,-10,5,-7,6,1,2,4,4,6,6,-7,-3,-3,-1,1,-6,-2,-2,-7,2,4,-7,-9,-6,8,10,-4,-2,-3,10,6,5,-6,-8,-7,8,-4,10,9,-2,-9,-2,-5,-1,-5,4,-6,1,8,-2,10,6,8,-9,5,2,4,-8,8,7,8,-7,10,6,-7,-3,-10,-3],[7,7,-3,-8,5,-4,-3,8,-2,-8,5,10,-4,-1,2,-7,5,-2,3,3,-4,-2,-10,10,9,4,-4,8,-9,-4,-2,-1,5,5,-3,-7,-7,-4,1,-1,-6,4,1,-9,10,3,-6,-3,10,-8,-8,10,4,-4,-1,-5,2,-8,3,5,-3,-9,5,-10,10,7,-3,-5,10,3,-4,8,-10,-1,4,-6,6,-7,-7,-7,-5,3,1,6,-7,5,-9,-1,1,-2,10,3,-5,-7,7,7,8,1,-10,-3,6,-2,2,4,5,-8,5,-1,2,-3,3,3,2,1,9,-2,-1,-9,-8,-6,-10,8,-6,4,-6,-8,-6,10,-5,3,8,-10,-10,4,4]], dtype = "uint32")#candidate|192|(5, 135)|const|uint32
var_193 = relay.var("var_193", dtype = "uint32", shape = (180,))#candidate|193|(180,)|var|uint32
call_191 = relay.TupleGetItem(func_164_call(relay.reshape(const_192.astype('uint32'), [5, 15, 9]), relay.reshape(var_193.astype('uint32'), [5, 4, 9]), ), 4)
call_194 = relay.TupleGetItem(func_167_call(relay.reshape(const_192.astype('uint32'), [5, 15, 9]), relay.reshape(var_193.astype('uint32'), [5, 4, 9]), ), 4)
uop_195 = relay.atanh(bop_188.astype('float64')) # shape=(5,)
var_197 = relay.var("var_197", dtype = "float64", shape = (5,))#candidate|197|(5,)|var|float64
bop_198 = relay.not_equal(uop_195.astype('bool'), relay.reshape(var_197.astype('bool'), relay.shape_of(uop_195))) # shape=(5,)
uop_201 = relay.cosh(uop_180.astype('float64')) # shape=()
output = relay.Tuple([bop_177,bop_182,call_185,call_191,const_192,var_193,bop_198,uop_201,])
output2 = relay.Tuple([bop_177,bop_182,call_186,call_194,const_192,var_193,bop_198,uop_201,])
func_203 = relay.Function([var_169,var_170,var_193,var_197,], output)
mod['func_203'] = func_203
mod = relay.transform.InferType()(mod)
var_204 = relay.var("var_204", dtype = "uint16", shape = ())#candidate|204|()|var|uint16
var_205 = relay.var("var_205", dtype = "uint16", shape = ())#candidate|205|()|var|uint16
var_206 = relay.var("var_206", dtype = "uint32", shape = (180,))#candidate|206|(180,)|var|uint32
var_207 = relay.var("var_207", dtype = "float64", shape = (5,))#candidate|207|(5,)|var|float64
output = func_203(var_204,var_205,var_206,var_207,)
func_208 = relay.Function([var_204,var_205,var_206,var_207,], output)
mutated_mod['func_208'] = func_208
mutated_mod = relay.transform.InferType()(mutated_mod)
var_210 = relay.var("var_210", dtype = "uint16", shape = ())#candidate|210|()|var|uint16
var_211 = relay.var("var_211", dtype = "uint16", shape = ())#candidate|211|()|var|uint16
bop_212 = relay.bitwise_or(var_210.astype('uint16'), var_211.astype('uint16')) # shape=()
bop_215 = relay.mod(var_211.astype('float32'), bop_212.astype('float32')) # shape=()
uop_218 = relay.asin(var_211.astype('float64')) # shape=()
var_220 = relay.var("var_220", dtype = "uint16", shape = ())#candidate|220|()|var|uint16
bop_221 = relay.multiply(bop_212.astype('int32'), var_220.astype('int32')) # shape=()
uop_224 = relay.log(bop_221.astype('float32')) # shape=()
uop_226 = relay.cos(var_210.astype('float64')) # shape=()
bop_228 = relay.not_equal(uop_218.astype('bool'), uop_224.astype('bool')) # shape=()
bop_231 = relay.floor_divide(uop_226.astype('float32'), var_220.astype('float32')) # shape=()
output = relay.Tuple([bop_215,bop_228,bop_231,])
output2 = relay.Tuple([bop_215,bop_228,bop_231,])
func_234 = relay.Function([var_210,var_211,var_220,], output)
mod['func_234'] = func_234
mod = relay.transform.InferType()(mod)
mutated_mod['func_234'] = func_234
mutated_mod = relay.transform.InferType()(mutated_mod)
func_234_call = mutated_mod.get_global_var('func_234')
var_236 = relay.var("var_236", dtype = "uint16", shape = ())#candidate|236|()|var|uint16
var_237 = relay.var("var_237", dtype = "uint16", shape = ())#candidate|237|()|var|uint16
var_238 = relay.var("var_238", dtype = "uint16", shape = ())#candidate|238|()|var|uint16
call_235 = func_234_call(var_236,var_237,var_238,)
output = call_235
func_239 = relay.Function([var_236,var_237,var_238,], output)
mutated_mod['func_239'] = func_239
mutated_mod = relay.transform.InferType()(mutated_mod)
var_241 = relay.var("var_241", dtype = "int64", shape = (14, 6, 2))#candidate|241|(14, 6, 2)|var|int64
const_242 = relay.const([[[-10,4],[8,10],[-2,-7],[10,-5],[7,4],[-4,6]],[[-10,-10],[7,-6],[2,-5],[-7,-10],[-8,1],[-1,4]],[[-8,1],[1,9],[-8,-8],[10,-1],[6,-7],[-1,-2]],[[-5,8],[1,-4],[-2,10],[-4,7],[-9,6],[8,4]],[[-1,7],[-7,4],[3,-8],[4,3],[8,-1],[4,4]],[[-2,-3],[-8,-4],[-7,3],[-1,-5],[-9,-9],[4,-2]],[[7,9],[-3,5],[3,-6],[6,-2],[-3,6],[-1,6]],[[-2,6],[-9,2],[-2,-9],[4,-10],[3,-10],[8,-1]],[[-6,-2],[-6,1],[-5,7],[3,-2],[-10,8],[5,5]],[[-4,7],[8,2],[5,-2],[-4,10],[-10,-7],[-4,-8]],[[8,-10],[-5,-2],[-1,-2],[9,2],[-10,4],[9,-7]],[[-10,-2],[1,-1],[-7,3],[8,-3],[-4,-6],[1,-6]],[[4,6],[3,10],[8,-10],[-1,10],[-1,-2],[-8,-8]],[[9,5],[3,2],[-1,-9],[-4,8],[3,2],[8,-6]]], dtype = "int64")#candidate|242|(14, 6, 2)|const|int64
bop_243 = relay.logical_xor(var_241.astype('int64'), relay.reshape(const_242.astype('int64'), relay.shape_of(var_241))) # shape=(14, 6, 2)
const_246 = relay.const([[[10,4],[-5,4],[6,3],[10,-10],[-9,6],[-7,10]],[[-8,-8],[-7,2],[10,-3],[-2,-9],[3,-2],[-7,6]],[[3,-10],[4,-8],[7,5],[-4,5],[5,-8],[-7,9]],[[1,2],[6,-4],[3,9],[-3,10],[-4,8],[-3,1]],[[1,7],[6,-7],[-9,-5],[-1,4],[-2,-1],[-10,9]],[[-5,-2],[-9,8],[-2,-9],[3,7],[7,7],[-2,1]],[[-3,-3],[3,-9],[-8,-9],[-5,9],[2,-8],[-4,-6]],[[-9,-8],[-3,-9],[1,-1],[5,-5],[2,9],[10,5]],[[-6,8],[-7,2],[7,-9],[8,7],[1,6],[-8,8]],[[-8,7],[7,-2],[2,2],[4,7],[3,-2],[-7,2]],[[4,3],[-2,2],[-10,-8],[1,-9],[-1,4],[6,-7]],[[-9,-9],[7,-4],[3,7],[-2,5],[-9,8],[-4,5]],[[-7,-1],[2,1],[-8,-10],[4,-7],[3,2],[4,7]],[[10,-1],[10,10],[-5,-10],[10,10],[4,2],[-4,-6]]], dtype = "int64")#candidate|246|(14, 6, 2)|const|int64
bop_247 = relay.subtract(const_242.astype('uint8'), relay.reshape(const_246.astype('uint8'), relay.shape_of(const_242))) # shape=(14, 6, 2)
uop_250 = relay.rsqrt(var_241.astype('float32')) # shape=(14, 6, 2)
output = relay.Tuple([bop_243,bop_247,uop_250,])
output2 = relay.Tuple([bop_243,bop_247,uop_250,])
func_252 = relay.Function([var_241,], output)
mod['func_252'] = func_252
mod = relay.transform.InferType()(mod)
mutated_mod['func_252'] = func_252
mutated_mod = relay.transform.InferType()(mutated_mod)
var_253 = relay.var("var_253", dtype = "int64", shape = (14, 6, 2))#candidate|253|(14, 6, 2)|var|int64
func_252_call = mutated_mod.get_global_var('func_252')
call_254 = func_252_call(var_253)
output = call_254
func_255 = relay.Function([var_253], output)
mutated_mod['func_255'] = func_255
mutated_mod = relay.transform.InferType()(mutated_mod)
const_257 = relay.const([-3.108592,6.671775,-2.383309,-5.644540,4.165360,5.853271,-8.465683,-6.590943,0.283520], dtype = "float32")#candidate|257|(9,)|const|float32
uop_258 = relay.atanh(const_257.astype('float32')) # shape=(9,)
var_260 = relay.var("var_260", dtype = "float32", shape = (9,))#candidate|260|(9,)|var|float32
bop_261 = relay.bitwise_and(uop_258.astype('uint32'), relay.reshape(var_260.astype('uint32'), relay.shape_of(uop_258))) # shape=(9,)
output = relay.Tuple([bop_261,])
output2 = relay.Tuple([bop_261,])
func_264 = relay.Function([var_260,], output)
mod['func_264'] = func_264
mod = relay.transform.InferType()(mod)
mutated_mod['func_264'] = func_264
mutated_mod = relay.transform.InferType()(mutated_mod)
var_265 = relay.var("var_265", dtype = "float32", shape = (9,))#candidate|265|(9,)|var|float32
func_264_call = mutated_mod.get_global_var('func_264')
call_266 = func_264_call(var_265)
output = call_266
func_267 = relay.Function([var_265], output)
mutated_mod['func_267'] = func_267
mutated_mod = relay.transform.InferType()(mutated_mod)
var_269 = relay.var("var_269", dtype = "int32", shape = (7, 1, 13))#candidate|269|(7, 1, 13)|var|int32
var_270 = relay.var("var_270", dtype = "int32", shape = (7, 7, 13))#candidate|270|(7, 7, 13)|var|int32
bop_271 = relay.logical_xor(var_269.astype('int32'), var_270.astype('int32')) # shape=(7, 7, 13)
uop_274 = relay.tan(bop_271.astype('float64')) # shape=(7, 7, 13)
uop_276 = relay.log10(var_270.astype('float32')) # shape=(7, 7, 13)
bop_278 = relay.greater(uop_274.astype('bool'), relay.reshape(uop_276.astype('bool'), relay.shape_of(uop_274))) # shape=(7, 7, 13)
const_281 = relay.const([[[8.711876,1.664291,7.971509,7.203952,7.723153,1.503398,9.723275,4.876445,-4.915170,-9.928986,2.813661,8.259309,7.155594],[-5.828368,0.509934,-0.866532,-8.430451,-1.852385,-9.667062,6.508453,2.305375,3.155651,6.780568,-4.621724,-1.140713,-2.680836],[4.941816,-9.852918,-1.688236,-3.511375,-2.009808,-7.063447,-2.238532,-0.581736,6.884123,0.085783,-6.655352,8.763127,9.696351],[-8.947328,-0.358972,4.787330,-4.154844,-3.509636,-4.253106,9.232695,0.258759,-7.035336,-6.545192,5.246112,-0.956184,5.442023],[0.014707,-8.485039,-0.904009,-8.546474,6.716512,-5.560314,-7.838375,-8.004901,9.082713,1.787940,7.304203,5.331237,0.238825],[6.901372,2.046181,-7.605389,-3.648905,3.792877,6.904405,8.411608,2.889773,4.712535,3.857813,-4.945129,2.271987,8.713684],[3.697574,-8.236364,7.067610,-3.534276,-9.303273,4.867706,4.941239,-0.319604,6.948777,1.386859,8.028055,-3.643852,-4.987833]],[[-2.265735,-2.475336,7.704199,-7.954446,-8.873947,4.826575,-9.956393,-6.896301,-5.197699,-3.455683,-8.475902,5.212176,-0.178490],[-1.986154,9.711869,4.062937,-0.883074,3.508327,-8.535519,-7.393985,-3.981487,3.941872,0.681601,-6.328747,-2.541502,-7.487300],[-5.489415,-7.466862,6.915298,7.008397,-0.958615,-4.425614,8.518868,-8.709947,7.541191,-0.981310,-5.346489,-1.094459,8.942068],[-7.035916,5.246200,9.174599,-7.355344,-8.097472,-3.291153,-4.597807,-5.953361,-2.550571,-5.932766,5.081920,3.791978,8.432603],[-8.137336,6.371320,2.733393,3.996582,6.629327,-4.702207,-3.710354,4.269275,8.743191,7.095737,-9.998979,4.656126,-1.985263],[-4.653036,-3.816997,-4.287827,7.805766,1.496767,6.386800,8.984674,1.223960,-0.844228,-6.021029,-9.792785,8.765057,7.856033],[6.000958,-5.183171,-8.469547,3.829889,4.048068,1.965835,-0.076074,1.784352,8.901135,-7.641268,-3.839987,-8.634944,-8.594641]],[[-2.883557,3.152959,1.307744,-1.297622,-0.829784,-6.811887,-9.491807,0.854089,-0.257743,-9.453313,9.827730,-0.341866,-1.119043],[-3.789483,7.600058,5.459948,-7.176787,4.188059,-2.509950,-1.299061,-7.646701,-6.955213,-6.342871,-7.706737,7.392631,-8.160449],[-0.023139,-2.859060,7.109211,-1.315810,9.268081,5.983910,-7.251472,9.938228,-5.818540,1.555903,-6.246352,7.936009,-4.066474],[9.557771,-0.162105,-0.482438,-1.355219,5.279557,-5.103090,-7.959324,-5.497405,3.434577,9.902163,0.663142,-6.494910,-3.784486],[-5.535399,0.300709,-0.499166,2.296876,-7.078735,2.403113,-0.992054,6.620697,-4.991320,0.402084,3.648012,6.011869,1.802875],[-8.459414,-6.624575,3.835431,1.424574,6.210191,7.189380,-7.521571,-5.294963,5.394190,7.891262,6.894893,-4.348915,-4.820673],[-7.702974,-1.440216,-9.059556,2.058876,-1.668378,0.270406,-9.416747,2.461377,5.971805,0.018976,2.180430,9.908025,3.079226]],[[6.055245,5.619526,3.221876,9.805062,3.079695,7.321808,-5.310912,6.428260,4.401342,-3.993267,-4.177882,-2.707274,-8.404619],[-7.543240,-7.817939,-3.894608,5.965926,3.322667,2.208123,1.707992,-5.878789,-1.196801,-2.210966,1.671884,2.205027,-9.650884],[9.542459,6.499815,-7.980425,9.356258,-2.942382,-4.070838,2.786989,-5.308974,0.265190,-4.231236,-5.686342,-1.210847,-1.529690],[-9.289939,-1.939599,1.951317,-5.648956,5.105272,-8.656399,8.915364,-1.665884,2.185192,-0.035354,8.214428,0.129814,0.528465],[-3.333290,-1.542905,7.463242,-4.624135,8.928766,-1.472544,-3.810014,-1.175040,-1.394015,2.575116,-3.854751,3.793723,0.779383],[-2.644485,-3.947996,-6.090589,3.160363,3.378888,-5.003029,-8.106282,-9.872427,8.275670,-1.661492,2.305684,3.635448,-5.785285],[9.742080,-2.101768,-5.537645,3.054870,8.405306,7.804365,-4.039896,6.967389,-3.838410,-8.090459,-6.676644,0.218354,-5.874466]],[[-2.420183,-5.552486,0.206193,-1.209901,-3.592859,-2.594362,7.986668,2.760226,-4.188504,1.026985,-6.581320,-5.099898,-8.044562],[-1.264219,4.523219,3.422017,2.791109,-3.505819,3.346467,-7.690960,2.620682,-1.011290,-6.459213,3.874125,5.852101,8.493270],[-8.979791,5.703927,-7.654965,4.462878,-6.762932,6.055039,-0.636540,-8.705050,-6.459036,8.461557,3.905221,-5.918613,5.134518],[-3.487205,1.757182,9.403750,1.559986,-5.406542,-1.767442,-4.218244,-5.522516,-6.832626,3.569194,7.886576,-6.609741,-3.973848],[-7.172987,7.653216,-1.103210,-8.679310,7.066706,-1.010510,-8.250079,3.958701,-5.238924,1.950946,4.153944,2.560967,-0.474597],[2.401251,7.284177,-4.440406,-9.723029,3.013870,-2.265069,-9.577280,7.801083,-2.611587,-0.119038,7.941235,2.489333,5.245305],[-7.943506,-6.695313,6.281242,0.659207,2.549738,-3.057375,-8.309419,-3.957867,-9.489558,-2.611850,7.174275,2.913551,-5.473184]],[[-0.865004,-3.453551,6.024206,-2.240526,8.740256,7.854010,-3.626393,8.662040,-4.492458,7.358845,-0.259711,-1.444157,8.956666],[3.609098,1.012171,7.348102,-6.909974,7.434565,2.817679,0.860114,-9.170223,2.181144,6.541848,7.538170,-8.858050,-0.885563],[-1.049445,-9.304460,3.327762,4.457747,2.578060,-1.475116,-6.623798,9.938335,-5.378885,-4.697598,1.127931,2.800177,-0.826153],[5.970448,0.339051,0.839474,-9.113634,-1.412750,-2.347122,-5.044172,-7.806781,0.939361,-7.333111,-9.913367,5.987235,5.978838],[4.496088,7.576332,-1.356733,-3.801708,-3.625580,5.371518,4.749973,-8.194687,3.222032,-1.638573,-5.023750,-1.132452,-7.707199],[0.142710,-4.912524,6.595175,7.740227,9.836466,1.473772,-2.614378,-0.320349,-5.630031,6.022971,2.032407,1.886231,-8.831933],[7.367600,-6.498427,-7.777478,5.905060,3.255403,-1.381369,9.687237,-5.019368,9.867601,-6.204962,-4.206914,-4.947590,-5.551806]],[[6.265185,7.183078,2.915434,-6.633690,-8.149532,4.920304,9.615539,-1.996714,3.902062,-1.414910,-5.255321,-8.388049,6.379742],[4.139619,-9.623635,5.294126,1.552082,-0.660584,8.120386,1.594407,3.467309,8.103424,5.832727,-2.226538,7.376464,-4.640909],[-8.389257,-0.440760,4.357013,9.667022,8.220874,1.501789,7.428043,7.765968,8.877064,8.899820,0.211426,2.981306,-5.844863],[-5.791815,-4.981835,-1.041295,1.016316,-7.462352,-5.205856,7.528499,-1.983077,3.645106,-7.742115,-6.055350,0.495489,-4.168142],[-5.749572,2.598424,1.924349,-1.162447,-2.857540,-7.219089,-9.377180,-6.889435,3.417565,-9.921565,7.154559,1.798075,4.105124],[2.378266,0.576396,4.823201,4.750538,5.637348,-6.653774,7.168894,-3.223444,4.868681,-2.501770,6.891328,5.132792,-5.686242],[1.789148,-1.926529,3.798551,5.145136,2.941650,0.803186,6.848491,9.699127,-8.054617,-5.324748,-4.795487,8.381225,-6.073784]]], dtype = "float64")#candidate|281|(7, 7, 13)|const|float64
bop_282 = relay.divide(uop_274.astype('float64'), relay.reshape(const_281.astype('float64'), relay.shape_of(uop_274))) # shape=(7, 7, 13)
uop_285 = relay.log10(uop_274.astype('float64')) # shape=(7, 7, 13)
const_287 = relay.const([[[-2.814458,-7.190036,5.097694,-4.465510,1.104752,7.682524,0.841939,8.590134,-3.119314,3.576543,-7.084488,-0.317296,7.668536],[-0.193611,-1.185015,1.336795,-6.254449,6.745992,8.756377,3.691922,5.475677,9.316436,-1.516669,6.723255,7.077796,5.273440],[1.144083,-4.867641,-6.086416,-8.582240,-1.894719,-8.125658,7.567506,-3.310882,1.906348,1.622810,-9.480873,7.009772,-6.201512],[4.210489,4.900716,5.420613,-8.580915,-3.906436,-3.319957,3.784465,-1.353779,3.180562,6.128062,-3.667513,5.743853,1.086158],[6.873551,-7.661813,0.739681,4.865528,-6.248352,-2.389797,-6.816983,-0.111805,9.168141,3.851867,2.942164,4.499209,-8.692063],[6.949402,-3.048037,3.375983,4.462566,7.599760,9.415056,8.199984,1.671306,-0.523114,-5.045812,-9.319237,-2.102315,8.087115],[9.080504,4.046073,9.721315,9.311595,1.506190,9.564587,2.863084,-6.906491,7.485083,-9.103940,5.778051,7.034752,2.121942]],[[2.311359,0.197670,4.052348,8.375084,7.447824,9.089955,-9.730399,0.140479,3.259887,-0.601586,-6.827663,-1.791306,-8.959116],[2.336832,4.158865,-9.993662,0.958931,-6.577343,-8.159687,2.278034,-0.553858,-5.582770,6.107558,-4.950569,-0.055661,-7.575872],[-8.108178,-8.524003,-8.129219,-2.794245,-0.017698,-4.224898,2.449366,2.342400,5.846266,1.781409,1.645672,-2.749933,2.869021],[-6.276496,-9.205379,-9.281599,3.487523,2.325655,5.876750,0.330263,-4.714289,2.894312,-9.072693,4.579035,2.932121,8.248233],[6.413429,1.956217,-2.522322,-1.955715,3.456087,-3.055882,6.640306,-9.688054,8.619384,4.242965,-2.529257,8.320295,9.225431],[-7.023914,0.790916,3.347338,3.891299,-2.421988,-2.143825,-5.937899,5.298634,-4.173430,8.110952,2.801435,9.769443,-8.667597],[8.358438,-2.652831,5.998117,0.925462,3.492353,8.616873,-0.434636,-5.399239,-8.119014,-5.402411,3.303689,8.637249,2.733142]],[[-2.636027,9.646778,-7.935389,-2.141446,5.723893,9.471472,5.113235,0.309246,-0.946253,-5.629108,7.960002,9.819809,-1.377914],[-2.232492,6.177301,8.694993,-6.144437,8.401108,2.580903,-2.105453,0.268531,-2.811038,-4.970146,2.606105,6.998649,5.227628],[-0.578442,-7.149738,-4.538458,-5.031884,-2.075909,8.839996,-0.379177,-5.767463,-8.628582,-8.226520,-7.484788,-8.651215,5.308119],[5.072792,5.031237,4.952406,-9.197182,0.597650,-3.494118,-3.355442,2.414893,-3.171616,-4.675657,0.017014,8.419688,-9.132388],[-9.899278,-6.519923,-3.029030,-6.851503,-7.766507,-2.361757,5.034532,1.201792,6.268085,6.789536,0.342508,0.561378,-9.427820],[5.348295,-1.317010,5.930698,-8.331234,-8.119836,-1.415934,0.322728,-3.976026,4.999468,7.477921,-1.587182,-9.402229,7.536816],[4.494372,-8.144029,6.291543,4.189030,9.624094,1.486869,-6.690712,3.269259,-1.693091,2.434215,-6.838405,0.500374,-4.807288]],[[-8.645235,1.074193,-5.911669,-8.553384,-6.104442,-6.088608,-8.188030,-8.033947,-1.247942,9.296756,1.616097,-2.927976,0.492726],[0.132969,-2.104283,-5.573215,9.073740,-4.628184,-3.327490,-8.351368,-3.135136,-1.655972,-4.749995,-8.709260,4.998029,-5.490508],[-4.861077,4.654581,7.481168,-3.245366,-2.510370,9.629166,-1.602643,-8.421454,-8.837262,1.782622,0.859763,2.361781,-0.722493],[-9.138327,-7.039905,0.125676,2.739467,-9.981173,3.365933,-8.087579,5.599425,8.708161,3.693134,-0.584696,-4.193883,3.584942],[1.866445,-9.551931,-4.912293,7.981991,5.252518,7.572022,1.344674,-4.845365,-5.889084,2.419756,-0.841739,3.814303,-0.065036],[1.818893,9.538190,-8.768957,-5.190002,6.080401,-2.313383,7.223501,9.399416,-3.412137,-0.872947,9.478714,-1.229974,-1.612400],[-5.657823,-7.227349,4.186468,4.796598,-2.405681,2.792553,-9.122131,-0.845915,9.768992,6.898401,-4.594412,9.981505,-9.214765]],[[-6.396711,4.217637,3.664062,-1.464997,-1.510758,2.403624,8.550887,-8.057759,-3.904529,8.496428,4.784282,-6.693401,9.000776],[-7.526025,0.082092,3.353425,2.200353,-0.864888,-2.754174,0.859474,-6.862606,1.922903,-1.358860,-3.669992,-8.203220,7.021423],[-3.047119,-7.210380,6.705552,9.230543,0.911191,-1.551106,9.244507,3.769881,9.752337,6.345931,-7.455666,8.881614,-8.178524],[2.648576,8.773393,-6.518475,0.209299,0.046728,7.644911,8.043509,-7.276253,-3.790484,7.684379,5.900317,-4.885597,-2.545605],[6.682875,3.654826,-9.528900,5.521659,-1.138718,8.138629,-9.986463,-8.221583,0.085285,9.180877,8.252917,-4.537558,7.909385],[2.756273,-2.480739,-9.847234,-9.416566,8.123862,4.495348,-5.489929,-9.199778,6.721133,1.817249,-0.313660,5.206964,-1.203570],[4.347098,2.581297,-4.317400,-2.059717,7.662865,7.973892,9.070850,-6.542078,5.422349,-8.464221,-5.204888,-1.851078,6.567183]],[[4.786465,-5.670219,7.813200,-5.434793,6.173073,6.092637,1.589631,-8.950629,-9.691315,1.799213,-3.930743,-0.289776,-7.958769],[-9.180144,-1.932960,1.086029,5.914079,1.074614,-8.248670,0.183392,-3.881182,3.146667,1.962856,-4.861860,6.615921,-5.260854],[-6.633152,-3.300720,-4.222739,-2.455144,-3.731295,-6.733407,1.687743,-2.701899,7.881188,5.136522,8.758320,3.747919,2.170855],[-8.944617,9.829714,-5.679490,4.576641,-9.397670,-9.762352,-4.793849,-1.123344,-2.639616,-0.905012,3.023543,-7.875055,-5.340629],[-8.637296,7.447726,5.090065,-3.753662,-5.870419,8.198997,-8.553380,7.805777,-2.795545,4.795236,-4.441135,-3.001785,7.889241],[-1.305616,4.388412,8.825689,-0.208591,3.172889,-3.602739,-8.918647,-6.721750,7.279204,1.536043,2.756620,-8.648572,8.843507],[-8.919759,-1.708532,2.616925,-8.457931,1.297216,-6.052056,-6.275141,7.152534,-7.855675,6.476305,6.723475,1.546198,-8.329820]],[[-1.309614,0.970211,1.113016,-9.860131,4.672163,0.805265,-3.573984,3.947763,-8.179875,-5.874308,1.118450,-5.673735,2.045218],[3.669978,-3.303621,-3.761853,-4.580913,-0.696461,1.780057,5.509182,4.012925,-1.114330,8.840973,-3.279956,9.518988,-4.004700],[1.864982,-4.380182,-1.141148,0.559384,2.152275,-4.475783,-1.196949,7.415910,0.473087,-1.236072,5.027263,-8.487370,9.050433],[3.483577,5.940143,2.845736,-2.099154,8.774499,0.839569,9.962215,-5.837290,-0.796564,1.861436,3.392517,4.489861,2.517054],[-3.730857,1.856522,-6.746088,8.854527,-8.469302,4.122822,-2.543000,-3.838462,6.452204,-0.411519,1.049482,-9.792062,-3.434410],[3.902589,-2.304866,4.622363,-4.428325,-7.495462,7.723129,-8.841349,-9.993595,-3.932718,-7.642874,-7.728832,-3.769023,-4.073763],[9.774320,-1.848560,-7.221393,7.051535,-1.633423,2.113354,-6.481227,-1.022763,2.909974,1.559137,-7.876049,-3.002871,-3.901647]]], dtype = "float64")#candidate|287|(7, 7, 13)|const|float64
bop_288 = relay.left_shift(uop_285.astype('int16'), relay.reshape(const_287.astype('int16'), relay.shape_of(uop_285))) # shape=(7, 7, 13)
bop_291 = relay.power(bop_288.astype('float64'), relay.reshape(const_287.astype('float64'), relay.shape_of(bop_288))) # shape=(7, 7, 13)
uop_294 = relay.acosh(uop_285.astype('float64')) # shape=(7, 7, 13)
uop_296 = relay.cosh(uop_294.astype('float32')) # shape=(7, 7, 13)
uop_298 = relay.tan(uop_296.astype('float64')) # shape=(7, 7, 13)
bop_300 = relay.power(uop_296.astype('float32'), relay.reshape(const_281.astype('float32'), relay.shape_of(uop_296))) # shape=(7, 7, 13)
func_164_call = mod.get_global_var('func_164')
func_167_call = mutated_mod.get_global_var('func_167')
var_304 = relay.var("var_304", dtype = "uint32", shape = (675,))#candidate|304|(675,)|var|uint32
const_305 = relay.const([1,9,1,2,-9,-6,-9,-2,4,-2,8,-4,-3,-6,-9,8,-10,-7,-9,6,7,4,8,-8,-1,-7,-2,-10,1,7,10,1,2,-2,8,-8,1,-10,-5,1,1,-5,-9,10,-10,2,-4,-9,-1,-5,10,-4,5,-9,-4,-8,-8,-10,9,-7,-8,-10,-1,9,1,-3,-9,-9,-4,-7,-9,-5,-10,-4,-6,-10,1,9,9,4,-1,-1,7,-5,10,-9,-6,6,9,7,-4,-2,-6,-4,6,-5,8,-7,5,4,-3,4,7,-9,3,-2,2,-9,4,3,5,6,3,-8,5,-6,5,10,-2,-6,5,-2,-3,-7,-8,6,-10,7,-8,-4,7,1,-9,-1,2,-8,7,-7,-4,-7,7,-6,-10,10,9,10,5,-5,-4,9,-6,-6,8,-5,-10,-7,-10,1,7,5,-9,-10,-6,-1,3,-10,-7,-6,-2,9,5,-6,-8,-4,-2,9,-4,6,-5,-4], dtype = "uint32")#candidate|305|(180,)|const|uint32
call_303 = relay.TupleGetItem(func_164_call(relay.reshape(var_304.astype('uint32'), [5, 15, 9]), relay.reshape(const_305.astype('uint32'), [5, 4, 9]), ), 3)
call_306 = relay.TupleGetItem(func_167_call(relay.reshape(var_304.astype('uint32'), [5, 15, 9]), relay.reshape(const_305.astype('uint32'), [5, 4, 9]), ), 3)
uop_307 = relay.log10(bop_300.astype('float32')) # shape=(7, 7, 13)
uop_309 = relay.cosh(bop_300.astype('float32')) # shape=(7, 7, 13)
uop_311 = relay.atan(uop_294.astype('float32')) # shape=(7, 7, 13)
uop_313 = relay.sin(uop_307.astype('float32')) # shape=(7, 7, 13)
var_315 = relay.var("var_315", dtype = "float32", shape = (7, 7, 13))#candidate|315|(7, 7, 13)|var|float32
bop_316 = relay.subtract(uop_311.astype('uint8'), relay.reshape(var_315.astype('uint8'), relay.shape_of(uop_311))) # shape=(7, 7, 13)
bop_319 = relay.floor_mod(uop_309.astype('float32'), relay.reshape(const_281.astype('float32'), relay.shape_of(uop_309))) # shape=(7, 7, 13)
bop_322 = relay.subtract(uop_309.astype('int16'), relay.reshape(bop_319.astype('int16'), relay.shape_of(uop_309))) # shape=(7, 7, 13)
bop_325 = relay.power(uop_313.astype('float32'), relay.reshape(uop_285.astype('float32'), relay.shape_of(uop_313))) # shape=(7, 7, 13)
uop_328 = relay.sqrt(bop_300.astype('float32')) # shape=(7, 7, 13)
uop_330 = relay.log10(bop_300.astype('float32')) # shape=(7, 7, 13)
func_252_call = mod.get_global_var('func_252')
func_255_call = mutated_mod.get_global_var('func_255')
var_333 = relay.var("var_333", dtype = "int64", shape = (168,))#candidate|333|(168,)|var|int64
call_332 = relay.TupleGetItem(func_252_call(relay.reshape(var_333.astype('int64'), [14, 6, 2])), 2)
call_334 = relay.TupleGetItem(func_255_call(relay.reshape(var_333.astype('int64'), [14, 6, 2])), 2)
uop_335 = relay.sin(uop_313.astype('float64')) # shape=(7, 7, 13)
uop_337 = relay.log10(bop_325.astype('float64')) # shape=(7, 7, 13)
bop_339 = relay.add(uop_335.astype('int8'), relay.reshape(uop_294.astype('int8'), relay.shape_of(uop_335))) # shape=(7, 7, 13)
uop_342 = relay.sinh(bop_325.astype('float32')) # shape=(7, 7, 13)
bop_344 = relay.add(bop_339.astype('int32'), relay.reshape(bop_271.astype('int32'), relay.shape_of(bop_339))) # shape=(7, 7, 13)
uop_347 = relay.atanh(uop_309.astype('float64')) # shape=(7, 7, 13)
uop_349 = relay.log10(uop_313.astype('float32')) # shape=(7, 7, 13)
var_351 = relay.var("var_351", dtype = "float32", shape = (7, 7, 13))#candidate|351|(7, 7, 13)|var|float32
bop_352 = relay.logical_or(uop_313.astype('bool'), relay.reshape(var_351.astype('bool'), relay.shape_of(uop_313))) # shape=(7, 7, 13)
uop_355 = relay.log10(uop_335.astype('float64')) # shape=(7, 7, 13)
const_357 = relay.const([[[True,True,False,False,False,False,True,False,False,True,False,True,True],[False,True,True,False,True,False,True,True,False,True,True,True,False],[False,True,True,False,True,False,True,True,True,True,True,False,False],[False,True,False,True,True,False,False,False,False,False,False,False,True],[True,True,True,False,True,True,False,True,True,True,True,True,True],[False,False,False,True,False,False,False,False,True,True,True,False,True],[True,False,False,True,True,True,False,False,True,False,False,True,True]],[[True,True,False,False,False,True,True,False,False,True,True,False,False],[False,False,True,False,True,False,False,True,False,False,False,False,False],[False,False,False,True,True,False,False,False,False,False,True,True,True],[True,True,False,True,True,False,True,False,True,True,False,True,False],[False,True,True,True,False,True,True,False,False,True,False,True,True],[True,True,False,False,False,True,True,False,False,False,True,False,False],[False,True,True,True,True,True,True,False,False,True,True,False,True]],[[False,True,False,True,False,True,False,False,True,True,True,True,True],[True,True,False,True,False,False,False,True,False,False,False,True,False],[True,False,False,True,True,False,False,True,True,False,False,True,False],[False,False,True,True,False,False,False,False,False,False,True,False,True],[True,False,False,False,True,True,False,True,False,True,True,False,True],[False,False,True,True,False,True,False,True,False,False,True,True,False],[True,True,True,False,True,False,False,True,False,True,False,False,False]],[[False,False,True,False,True,True,False,False,True,False,False,True,True],[False,True,False,True,True,False,True,True,False,False,True,False,True],[False,False,True,False,False,True,False,False,True,True,True,True,False],[False,True,False,True,False,False,False,False,False,False,False,True,True],[False,True,False,True,False,False,True,True,True,True,False,True,True],[True,True,True,False,True,True,True,True,True,True,True,True,True],[True,True,False,False,False,False,True,True,True,True,True,False,False]],[[False,False,False,False,True,True,True,False,True,False,False,False,True],[True,True,False,False,True,False,False,True,False,False,True,False,True],[True,True,True,True,False,True,True,False,True,True,False,False,True],[True,False,True,False,True,False,True,False,True,False,False,True,True],[False,True,True,False,True,False,False,False,True,False,True,True,False],[True,False,False,True,True,False,False,True,False,True,True,True,True],[False,False,True,True,True,False,True,False,False,False,False,False,False]],[[False,False,True,True,True,False,True,True,False,False,True,False,True],[True,True,True,True,True,True,True,False,True,False,False,False,True],[True,False,True,True,False,True,False,True,False,True,False,True,False],[False,False,False,False,True,True,True,False,False,False,False,True,True],[True,False,True,True,True,False,True,False,False,True,False,False,False],[False,True,False,False,True,False,False,True,False,True,True,False,False],[True,False,False,True,True,True,True,True,False,False,True,True,False]],[[True,False,False,True,False,True,False,True,True,False,True,True,True],[False,False,False,False,False,False,False,False,True,False,True,False,True],[True,False,False,False,False,False,False,True,True,True,False,False,False],[True,False,True,False,True,True,False,False,True,True,False,False,True],[True,False,True,True,True,False,True,True,True,True,True,True,False],[True,False,False,True,False,True,True,False,True,False,True,False,False],[True,True,False,True,False,True,True,True,False,False,False,True,True]]], dtype = "bool")#candidate|357|(7, 7, 13)|const|bool
bop_358 = relay.bitwise_and(bop_352.astype('uint32'), relay.reshape(const_357.astype('uint32'), relay.shape_of(bop_352))) # shape=(7, 7, 13)
uop_361 = relay.acos(uop_355.astype('float32')) # shape=(7, 7, 13)
output = relay.Tuple([bop_278,bop_282,bop_291,uop_298,call_303,var_304,const_305,bop_316,bop_322,uop_328,uop_330,call_332,var_333,uop_337,uop_342,bop_344,uop_347,uop_349,bop_358,uop_361,])
output2 = relay.Tuple([bop_278,bop_282,bop_291,uop_298,call_306,var_304,const_305,bop_316,bop_322,uop_328,uop_330,call_334,var_333,uop_337,uop_342,bop_344,uop_347,uop_349,bop_358,uop_361,])
F = relay.Function([var_269,var_270,var_304,var_315,var_333,var_351,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_269,var_270,var_304,var_315,var_333,var_351,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_269= np.array([[[-3,-10,-9,10,-4,6,-3,8,4,-1,3,-10,4]],[[-7,2,-7,10,-8,2,7,-10,-3,-7,-8,-2,-10]],[[8,10,-3,-3,9,-10,5,8,-7,-5,-7,7,-1]],[[7,-4,8,10,-2,-7,5,-4,6,4,-9,10,-5]],[[2,3,7,-7,-10,2,5,10,-2,-7,-4,8,-9]],[[-7,10,-8,-6,-8,-10,5,-1,9,-5,-7,5,-3]],[[-9,7,7,8,7,-2,6,7,6,-7,3,3,4]]], dtype='int32')
module1.set_input('var_269', input_269)
input_270= np.array([[[4,6,-10,-6,4,10,3,-8,10,6,10,-9,8],[-1,-9,1,-6,-1,-3,-3,10,-8,1,-7,-8,8],[4,-4,-1,-3,4,4,-2,-8,1,9,7,6,3],[-10,-8,-10,-8,-5,3,-1,-4,7,-1,-9,8,-6],[7,-2,-7,1,3,-10,-10,-1,-2,8,-9,-2,-1],[3,-8,2,-2,6,-9,7,-2,4,-3,-3,-7,-1],[-9,5,3,-7,8,8,8,-1,3,-10,6,-5,6]],[[4,-2,-10,-9,10,4,4,-9,-1,-6,-5,-2,-2],[-8,9,-6,9,-9,8,3,-9,5,8,6,2,-4],[9,-3,-6,9,-7,8,4,5,5,-1,-7,-10,2],[-8,7,1,-10,6,-5,1,1,-10,-9,8,4,-10],[6,10,5,-4,10,8,-2,-5,-1,-3,-8,-7,7],[-10,-5,-6,2,10,-3,-8,2,10,2,4,-2,4],[-7,6,6,-9,-8,-1,10,-8,8,4,3,5,-9]],[[-7,-6,-10,1,9,2,8,2,10,1,-6,5,-10],[-6,-4,-5,-8,3,6,-4,3,4,5,1,9,-5],[-2,7,-1,-10,-9,-7,8,5,-3,-8,4,-8,-7],[6,10,10,-4,-5,-9,-9,9,-3,3,10,6,2],[9,9,-8,1,6,9,10,4,-8,8,-6,-4,-1],[-9,-4,7,1,-9,-8,-7,6,6,-2,5,-1,7],[6,-10,-10,3,10,-5,-5,1,7,-10,6,10,6]],[[7,-10,7,-10,4,6,1,-9,-8,-5,10,9,-6],[7,2,-1,1,5,-7,4,4,1,5,-6,-6,4],[-2,5,-9,-1,-6,-1,-4,-4,1,4,-10,-3,-7],[-10,9,-7,8,-8,-6,9,1,-8,6,8,2,5],[9,6,8,-6,-1,-7,-7,-7,3,-7,-6,1,-1],[-9,3,4,1,-7,-8,-5,8,-2,-6,9,5,-6],[-3,10,8,-6,3,-2,-1,-5,-3,-2,2,-7,-2]],[[-6,4,-7,8,10,9,6,7,-8,10,7,-2,4],[2,-10,8,3,-9,9,-10,-3,7,2,-1,10,4],[5,-8,-1,2,7,9,-2,-10,6,-1,10,-10,10],[5,-3,9,8,-8,-10,-10,10,6,-10,2,8,-6],[-1,-3,2,-1,8,4,9,-4,-2,-7,6,4,-10],[3,-2,-6,-9,-2,-8,7,-4,3,3,-2,4,9],[3,-7,2,10,-2,6,7,4,4,-3,-10,-10,6]],[[10,-3,9,4,8,-7,-1,5,2,-9,7,-6,10],[9,-1,-3,-6,-1,2,-2,-3,-7,9,2,-3,-6],[4,3,9,5,-10,2,5,-2,1,7,4,-8,7],[-4,1,-3,3,-9,9,-4,-2,-4,2,-6,-9,-8],[-9,5,6,-4,-1,-2,-4,-7,-6,-1,-9,-7,-2],[-5,8,-3,-8,2,-8,-1,-5,3,5,-10,3,1],[-8,-3,3,-1,-9,-9,5,-3,8,-3,-6,-10,-8]],[[-3,-4,5,3,4,5,-9,2,-3,9,-9,9,-10],[10,-7,-2,1,5,10,3,-7,1,-5,6,-9,6],[-2,2,2,-3,2,1,1,-9,-7,-9,3,10,5],[7,-9,-4,10,4,-9,2,2,5,1,-6,-10,-1],[-7,2,5,5,-4,6,6,5,6,-7,3,4,7],[2,-7,10,-4,-3,2,6,7,-10,-3,-6,-4,-7],[-6,1,-3,1,-6,3,5,-2,3,5,-9,3,-1]]], dtype='int32')
module1.set_input('var_270', input_270)
input_304= np.array([10,4,4,-10,-5,10,2,-1,9,-2,3,6,-7,2,-6,1,-2,-3,6,5,-8,-9,2,-7,6,-9,-5,6,1,-2,-2,-3,7,-3,3,4,3,-2,-3,-6,-8,-7,-4,-7,-2,-4,-1,1,6,10,-1,1,-10,-1,-3,4,-5,-6,-4,4,1,10,-6,9,4,1,6,1,6,8,10,3,-3,-4,2,-2,-5,-7,3,5,7,-3,10,8,-8,7,8,-5,9,-7,5,-7,4,-5,2,-4,-8,2,5,-5,-8,-2,2,-7,-5,3,-8,4,6,8,-1,-7,-3,6,10,-10,-6,5,10,-1,8,6,-6,-7,2,-10,-2,-2,7,5,-1,-8,-7,-5,4,-3,9,10,10,8,7,-4,7,5,4,-3,-5,2,-1,1,2,-10,3,-8,9,6,-6,-6,6,6,1,5,-10,8,-5,-9,-4,9,10,2,-5,-7,9,-5,7,5,3,-4,6,-4,-4,7,3,5,5,-7,6,-3,-9,1,10,-6,7,-5,5,-3,6,4,8,-5,9,-5,-5,-1,7,-2,10,-1,7,10,-9,8,-5,-5,4,-7,-1,7,9,10,-3,-4,-8,2,4,7,6,-7,2,5,-3,10,-3,7,8,-1,-8,4,1,-3,-7,-8,-10,6,-8,-1,-3,4,9,-1,9,-5,-6,-4,6,-4,2,8,1,-5,4,10,6,-3,-5,1,6,-10,-7,-3,-4,6,1,9,7,-10,1,-6,6,-1,6,5,-9,6,1,-9,-6,-2,-10,-10,-6,-5,4,3,3,-3,5,-10,-2,10,-6,8,-5,-1,-1,1,-3,4,8,-9,1,-1,-9,3,-7,-5,-4,-3,5,-4,-6,6,1,-9,7,-1,10,-5,3,10,-10,1,10,-3,-9,-5,-3,-8,-3,3,-7,-6,-6,-5,10,-9,2,4,-3,1,5,-10,-9,3,7,1,2,-10,10,-7,5,-1,-5,1,4,-3,7,9,2,-7,-10,3,-6,10,10,-6,-5,-2,-2,10,4,-4,7,-9,5,-5,6,7,-1,-10,6,8,5,-4,2,4,7,10,-3,-2,7,-5,7,7,-1,-1,-6,-10,8,9,-10,-9,-3,3,-10,-4,4,1,3,1,8,-3,-10,5,-9,-1,7,9,9,-6,9,-7,1,-6,8,8,-9,10,4,-1,-8,-3,2,-5,-6,-1,10,9,8,6,5,3,5,-5,-9,-1,9,-3,7,-4,-8,-9,-5,-10,8,-2,-1,6,10,-4,-10,-7,-10,1,-8,-2,2,-7,-2,1,-4,-2,9,9,-9,-10,8,9,-8,7,5,-2,-3,-3,5,-4,8,2,-3,-7,-5,-3,-4,3,3,8,9,5,9,8,4,5,-9,-9,9,7,5,-7,4,-1,-9,-7,8,-2,-3,-3,4,9,4,-8,-6,-6,-8,-9,4,3,8,-4,3,-3,8,-5,3,-10,2,9,6,8,-10,-8,7,-8,1,-1,-9,3,10,2,2,2,1,-3,-9,-10,-7,3,-10,-9,2,5,4,-9,-6,10,4,-1,5,1,-4,-5,1,-5,1,-2,-3,6,-5,-4,7,-8,-7,-5,2,8,-9,4,-1,1,-4,4,-9,9,-5,-6,8,-3,-2,7,6,-7,6,-5,2,-8,-8,-8,-5,1,-9,-4,1,-1,-8,5,4,1,3,9,-3,-6,3,7,10,-8,7,5,1,-10,-4,5,7,10,-3,9,-7,-6,-8,8,5,6,-10,-1,-5,-2,-6,-7,-4,-6,7,2,8,-4,-4,-6,-10,10,-3,3,-10,7,3,-10,2,-5,-1], dtype='uint32')
module1.set_input('var_304', input_304)
input_315= np.array([[[-5.164706,1.675447,-9.214979,-3.734273,-9.816789,6.366023,5.685744,9.324356,3.585970,-9.423380,-4.165367,-2.811668,4.960381],[2.826796,-6.635571,9.872406,7.835214,1.694505,-4.783998,4.803529,6.883898,-2.033102,6.387205,-6.251439,8.551936,-5.684329],[-4.281323,0.327886,3.155460,3.298053,-2.881613,3.061615,2.364848,4.920513,-9.992035,-7.032194,4.663806,-2.955834,-0.480350],[6.463059,4.371949,-5.782410,0.538803,5.181369,-8.142353,-7.094805,5.344777,-0.716426,-3.950532,-6.882323,9.428523,-8.170517],[3.861469,1.679267,3.955200,5.962451,9.793080,-0.886326,3.271427,1.761282,-7.725119,-2.347153,9.735646,-5.411316,-9.838117],[-2.448158,9.854243,5.016677,1.138658,7.793528,4.987118,-8.853774,-9.758268,2.465152,-0.362515,3.158940,-1.267824,1.622664],[-9.894861,3.865228,-3.684206,-4.596902,-5.556705,6.930588,8.034104,-7.494329,4.084622,8.518438,-6.483868,-8.747325,9.197196]],[[1.383543,8.089666,-3.338282,5.638975,5.998284,6.512633,2.607278,2.787528,-5.756552,9.804567,8.527758,8.337398,-9.401668],[-0.739838,-5.851981,-2.873639,5.198570,-9.943667,-4.818652,-9.817608,-6.859832,7.966082,9.907211,-9.349676,8.825397,7.537453],[-1.631599,8.514038,-1.264753,3.929785,-6.895901,-7.123976,-9.944049,1.800991,-1.216708,-0.481030,8.619536,8.167838,-2.910154],[-6.660697,1.196987,-0.270338,-5.881430,6.202827,7.347387,-8.037966,-5.359930,-7.343787,3.326778,1.994274,1.638191,-4.810031],[-8.107646,0.615326,9.054316,-9.013857,2.898925,4.022152,9.965579,-2.850118,0.838812,-5.439389,-2.553688,-5.009611,-2.903501],[4.593360,7.304322,-4.627355,0.198924,-8.747193,-9.042492,-3.179783,-7.520793,4.342223,-9.361326,-7.830511,-2.799233,5.427280],[6.787157,9.874731,-6.827069,6.469418,-6.643238,7.275020,-4.239210,2.782790,-2.423012,-5.980589,5.259998,-2.709503,-9.133155]],[[7.674076,8.191917,5.236269,9.240148,-7.501366,6.564269,8.450928,-1.472598,-7.330211,4.266448,9.608686,2.603909,-4.911072],[6.471361,-1.120043,1.655419,3.365395,-1.638014,-6.899373,7.328324,0.841635,-0.988016,-6.302866,1.759328,2.676460,-5.357722],[4.502687,6.012279,-0.021627,-7.035253,-6.948329,9.607847,1.131431,-0.011382,2.424447,-9.760907,-4.605483,5.044154,3.396109],[1.320807,7.384403,0.749647,9.844896,-4.645426,-4.757134,-4.453286,0.949214,-5.733619,-9.990740,-2.760928,-6.340755,-5.323021],[9.458081,1.328723,9.467214,-3.278160,8.471701,1.326965,-5.645332,-8.596518,-0.942562,4.216393,-1.927238,-2.261011,-7.189227],[-9.808906,-6.838112,2.802319,2.079298,-9.904588,-0.852137,1.402339,9.594622,-6.683877,4.288434,-8.277567,-7.642809,7.750512],[4.023795,6.082113,-4.405030,-2.464799,-0.446058,-3.510990,-3.410852,-9.428015,0.130262,-2.031802,-2.773475,-1.425110,-4.484376]],[[-1.009380,-8.650996,8.008944,9.667038,9.791905,0.168328,-1.592715,-1.666829,0.529843,-9.533887,0.834655,1.066157,-3.934431],[-8.155709,2.035711,7.630142,4.444214,5.287620,7.975072,0.595699,-9.792209,-0.024477,4.554625,-8.734018,4.250904,-5.434643],[-4.606142,8.378331,-7.249999,-0.898406,-0.690956,2.048364,1.201719,-9.947917,5.579704,-9.864244,-7.323588,7.595390,0.535967],[-1.737154,-6.236359,7.484676,6.748713,0.127104,-9.304634,1.928095,1.226487,0.383751,-8.367035,5.460642,6.890358,1.076515],[-8.634557,7.066441,-9.332474,-1.744012,7.400840,-6.490011,-4.392893,-0.460949,5.863925,3.657391,-9.396087,1.672687,8.253839],[-6.558934,-9.004974,-6.557152,-7.864461,-4.524128,-6.591629,6.299118,-7.253830,-6.240393,2.175704,-5.657846,-0.203242,1.957918],[-4.432309,2.161489,9.311479,-0.696417,-6.435651,-3.334287,0.698532,0.247276,-9.889584,7.851708,-6.404285,6.184196,-4.859929]],[[-3.538603,-8.070992,9.904490,0.043070,-7.449972,-2.211525,-9.307704,9.102705,-9.983014,-4.730950,-3.561315,-4.938260,6.162418],[7.073383,4.256496,-4.550944,8.089995,8.391147,8.950198,4.144729,-6.385354,7.989529,-3.217366,9.375482,4.695080,0.503178],[-6.590215,5.804343,-1.148975,6.555548,-8.504936,-1.075109,-1.393302,-3.025384,-2.497094,1.903239,9.973118,1.830364,5.393942],[-8.226024,-6.421857,6.936381,-2.088868,3.025869,1.941998,-5.827106,-6.128541,7.096496,-2.880771,4.918751,-3.149076,9.401337],[1.686643,6.558631,-8.163681,2.717983,4.065567,4.332284,4.321090,2.570945,8.175507,-8.312135,-2.923685,-4.988346,1.193831],[9.772910,-3.027936,3.726328,1.951432,2.864832,4.867792,2.349320,4.634328,-1.567346,8.164033,8.325546,7.938704,-5.180989],[-1.479233,-7.539408,-1.146298,4.501803,3.605614,-4.566263,7.665615,-3.569496,-7.083233,-6.628323,-7.937185,-0.803640,-8.746540]],[[0.221911,6.902678,6.274352,-5.367943,2.973501,1.508779,-3.104976,-7.491342,2.216194,-1.811033,-7.954374,8.366016,-3.687386],[5.756343,6.617597,-9.477255,1.388843,3.913667,1.628845,-5.302883,-7.584432,4.775954,-2.082499,-5.905577,-5.318371,7.005169],[6.756912,5.611558,1.651929,2.594335,-5.399627,1.905053,7.775324,-0.722298,-3.653594,-0.269261,-7.970622,8.954186,8.023667],[-8.241374,-8.012152,-2.389911,1.421005,0.381249,-1.430678,1.191931,3.658258,-5.259924,5.039565,1.729927,9.545708,2.461905],[-0.785589,3.998736,-7.379926,8.912645,1.393511,-7.500421,5.474554,7.705683,-7.533538,-3.241562,5.869180,5.325782,8.892779],[0.787036,-7.186999,-7.802086,9.416670,-5.012882,7.083199,5.953771,9.130835,2.083970,5.122861,-0.668583,-7.444826,2.298599],[0.042065,-9.449673,-1.585813,8.461606,-6.004514,5.528295,1.821695,0.601625,6.825570,-7.887177,7.063326,5.150495,-9.350983]],[[-1.816349,-8.057462,9.362229,-0.243792,-6.505989,5.776313,8.935915,3.171530,1.526077,-7.727539,7.305153,3.156468,-3.491769],[-2.270384,-1.456865,4.440953,6.070913,-0.452861,3.823204,-6.841857,8.694050,-5.885244,-8.680121,5.497080,-2.839417,-7.647434],[9.978654,6.354303,-4.117350,5.504997,3.856369,-9.267125,-8.933631,2.014097,4.126559,2.583825,7.827614,-0.276372,7.129266],[7.035144,3.733482,-3.718726,-5.570084,0.723214,1.134899,4.192762,2.062202,0.382478,-4.015078,-2.207892,-6.900874,3.497802],[7.603402,6.367031,2.741819,-1.676613,9.089566,-7.748513,2.987782,-8.343815,-2.102519,1.697216,8.317960,-4.539848,8.957380],[-0.780533,-4.030335,0.673401,7.901687,7.577921,9.679989,4.942210,-2.019794,-5.399184,9.484094,-7.189217,-7.302779,-8.002491],[-1.211680,-0.181325,1.677148,6.899085,-6.783251,9.260003,-8.738947,-6.999348,-1.269036,-0.160978,5.701983,-3.558857,9.171026]]], dtype='float32')
module1.set_input('var_315', input_315)
input_333= np.array([-5,-10,2,-1,5,9,-10,8,4,2,3,2,10,6,-10,-1,-9,3,2,-4,-6,9,-4,6,8,-3,-7,-10,4,10,4,8,-4,-5,-3,-5,2,6,10,3,2,-10,2,6,10,10,9,7,9,10,-1,-10,9,-8,-8,7,-10,10,1,-7,-4,-6,5,6,5,5,-3,10,2,2,-10,1,8,-1,-9,-1,-5,6,10,5,8,-1,6,-4,9,2,5,-1,-7,3,1,7,-10,-8,-6,6,-5,-6,8,3,4,-9,9,3,2,-9,9,-9,-10,-1,-1,10,-4,9,4,9,5,8,-10,9,-6,-3,4,-6,-10,-1,-4,7,5,9,-5,-9,8,6,6,-8,-6,7,-4,6,-2,2,-6,-3,4,2,10,-4,9,-6,5,-7,-8,1,-9,-5,4,8,-6,-2,-3,-4,8,-1,5,-1,-5,3], dtype='int64')
module1.set_input('var_333', input_333)
input_351= np.array([[[6.535313,5.367800,6.067076,9.318724,7.316809,-5.637709,5.242336,-7.421705,-3.278110,-2.548193,-2.115856,2.070587,-5.184895],[9.471303,-3.646503,-1.261643,-9.820539,9.835270,0.789507,7.827135,5.769368,-6.155481,-7.817257,-6.957166,-8.513195,9.325377],[0.330104,-1.636301,-6.589699,3.678398,-9.301422,-7.785603,-8.574416,3.279981,-2.268441,-2.939609,-8.314438,-6.311235,4.857617],[2.072316,-5.803633,-7.162368,5.370315,1.955573,-3.237118,2.244847,-2.911965,-2.483062,8.164840,-6.243803,-4.412842,-8.168566],[5.521952,-9.595079,1.983557,-0.768675,-8.762931,3.713388,-5.486227,2.538587,2.521311,8.780707,-7.970264,-3.765137,5.517668],[9.905208,1.859298,-7.239391,7.088630,4.005596,-0.722756,-3.803574,-2.069941,2.108053,-3.487212,-8.525848,8.055677,3.878933],[4.535156,9.437884,-0.371226,-3.121252,-9.224790,4.759485,1.518649,-7.600561,-8.229572,-2.135356,-1.429902,4.693013,-9.520697]],[[3.380705,-2.574668,4.348303,-9.437777,-0.119820,-0.935669,8.601497,-6.517916,-5.238008,1.153804,2.712483,5.012416,2.239962],[2.290361,-8.038410,-5.081323,4.930819,-2.730728,-8.769002,-1.663191,8.107249,4.499769,7.329568,5.684356,-7.989507,9.168412],[5.731449,4.085417,-1.946832,2.066933,4.872448,-2.395520,-4.331176,1.276831,-5.928722,-4.454052,-3.277855,-1.757579,0.824035],[1.149888,-1.778600,2.874297,0.438613,-5.243697,-0.558956,-8.301570,4.428353,-3.845304,6.963928,-1.805371,8.177124,-9.436466],[6.937629,-6.405013,-0.441760,-0.682755,-8.861698,-8.975398,-4.932450,4.216907,0.052430,-9.872594,8.967146,-3.905777,7.740234],[-9.327240,1.853132,-9.723829,2.290451,4.978025,4.383908,-2.606159,-5.226823,4.508993,-3.020141,7.988189,1.930208,-1.047655],[-9.378552,3.897314,-2.626584,9.583239,-7.048283,-0.927887,-7.637836,-1.341007,2.434790,5.467739,5.169939,-6.650891,8.075666]],[[7.749550,-6.079646,0.574401,1.496669,-4.564770,-8.306668,6.645894,9.942315,-1.875308,-5.274055,1.102997,-6.281060,7.034418],[-3.349756,2.376785,7.702491,-8.013988,-5.574250,-9.858998,-4.494289,1.191725,-4.400740,-7.264833,-0.388959,6.275869,7.509574],[-0.012158,7.662484,9.416128,-3.869281,-7.654090,-5.886614,8.451282,-2.716519,-1.132487,-0.082887,-8.758006,-3.230332,-4.269940],[6.206100,9.218052,9.316427,-7.746787,0.471084,-5.737025,-9.773480,5.062400,3.595935,-0.190630,3.851600,-7.703472,-6.001518],[-2.549368,8.705321,-5.870530,9.180053,6.190924,8.674781,1.177160,-5.149272,-1.007291,-8.565515,8.399497,-7.730177,-3.942410],[-2.197036,4.213630,6.383789,7.759405,5.462103,8.890257,-2.384660,2.336033,1.045848,-3.730340,-1.400704,-1.199764,0.956135],[-6.721318,7.722827,6.348514,6.922364,6.258537,-0.052536,-5.185286,-3.550981,-6.201561,-5.611445,-3.616713,3.707994,8.683400]],[[-6.581477,-3.924741,9.423428,7.897546,2.268595,-1.691747,-7.813142,6.998764,0.789132,-1.527473,-7.879457,-2.686608,-4.404558],[-1.899925,4.826105,5.280561,4.274756,3.870532,-0.551606,-0.128398,8.459022,-8.931150,-8.090479,6.250038,7.080256,7.165105],[-5.664054,2.448207,-0.729415,-5.538245,8.646219,5.458463,-6.238607,-5.988081,-5.307176,-0.668450,5.327470,5.167664,5.937268],[6.588752,-1.976773,-1.783721,-2.642077,2.909169,9.083201,9.674223,2.122489,6.222747,3.532584,-4.622315,-5.950872,-2.854995],[2.408805,1.519541,-3.496925,-8.434947,5.968229,9.074604,-1.648516,7.593913,4.965211,-1.675123,5.285622,-3.465979,7.564349],[-1.154819,8.028661,-2.248492,-4.675550,5.507187,-9.378443,7.098930,-7.851715,-6.799236,4.743202,-3.975425,-4.040572,3.226421],[9.854321,-4.413789,-3.548486,-1.444714,2.711883,8.562802,3.740643,-0.905285,-0.003964,1.843438,3.848413,1.998764,8.208397]],[[5.599322,-4.121343,-3.646338,-5.861009,7.693649,5.100053,-3.641051,-2.587392,5.338738,4.426313,4.125319,0.583284,-0.080885],[-3.362920,-2.560805,-3.271119,6.002765,-1.392201,-5.407506,3.571203,-8.706514,2.312351,2.717778,-3.341118,3.520208,7.330617],[3.834305,-2.253213,9.579445,2.705407,-9.300269,9.974444,-4.728688,3.156039,-4.230932,-8.797938,-2.585370,8.986382,7.921590],[-6.722956,1.289617,-8.616031,-7.677564,1.682725,8.437324,2.531406,-1.996164,-8.350349,7.353077,9.357038,-2.795646,-4.728232],[3.166191,-2.639026,5.849400,-1.833130,-8.415646,3.506325,1.693878,-9.258258,3.291691,-8.179386,-8.053951,-3.252005,8.623952],[1.369819,-7.345091,-9.356849,-6.417665,-6.721576,3.904534,-0.119246,9.400479,-9.229453,-1.555721,-4.703436,6.229731,4.641539],[5.504519,9.040322,3.592576,-5.851117,-3.568396,-3.265739,9.601543,-0.493845,3.147574,1.674725,-3.310274,9.871477,-2.116903]],[[-6.204702,-8.340103,-1.024684,5.463787,-3.828755,-4.813379,-6.801192,5.695987,6.115401,-6.218152,5.111992,7.998223,-9.246365],[9.052727,-3.135694,2.269996,1.310273,5.076946,7.485942,9.524425,2.765592,-2.657310,-6.983996,-2.484151,9.967965,5.328401],[-8.874793,9.505594,-2.038435,-5.200178,-1.442734,5.742496,-6.903602,9.175204,4.621793,4.957615,8.270981,1.318400,-5.245945],[9.866080,-3.828921,-6.879801,8.273990,6.039889,-0.042217,6.447684,-0.975073,-7.803372,2.364786,-9.731205,-0.027966,5.850542],[-7.788618,6.995075,9.778496,-9.489210,1.144173,-8.574374,-2.353425,-5.049689,-2.936062,7.549965,-6.449386,2.025578,-5.445519],[5.799181,3.791121,-3.552142,4.378702,-7.212075,-7.370414,-0.375167,-2.285813,0.389676,-8.649292,1.178146,6.011940,2.221198],[4.908274,3.207007,3.927821,-6.897751,2.796433,-9.509031,1.409256,2.232220,2.940706,5.526237,8.650618,-6.929678,3.439292]],[[-5.988871,-7.251232,-3.737809,-9.566709,2.811422,-0.964937,-7.792040,-3.310681,-4.763263,-1.584814,-5.373564,9.588677,6.528396],[-2.073697,1.760928,8.842269,-8.360974,8.741791,3.684469,-7.319766,0.902235,5.703623,-3.610054,-9.253545,1.363688,2.356316],[-7.449921,0.834113,3.624981,0.865992,8.505907,-3.422643,4.929440,3.091694,8.770112,4.047189,-7.747745,-8.466397,0.167720],[-8.147028,5.764492,-4.086116,-8.498704,4.456452,4.570152,-7.694493,-1.662273,-6.631457,3.952256,-7.766091,8.774620,4.236692],[-5.739289,-5.347043,4.845883,-6.627158,-9.140818,-7.413123,1.737248,-7.924926,3.826737,0.713879,8.355989,6.042427,8.845247],[8.355451,7.213086,7.338403,9.380852,7.826728,-5.848362,0.800377,-0.154097,1.271657,-4.680311,-5.255251,9.694554,6.779788],[0.489685,3.695686,-2.843824,3.291336,1.449266,-2.237432,8.478062,5.721477,7.890465,-6.438241,9.816546,6.576189,-6.019416]]], dtype='float32')
module1.set_input('var_351', input_351)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_269, input_270, input_304, input_315, input_333, input_351, )
res3 = intrp3.evaluate()(input_269, input_270, input_304, input_315, input_333, input_351, )
res4 = intrp4.evaluate()(input_269, input_270, input_304, input_315, input_333, input_351, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
res1_14 = module1.get_output(14).asnumpy()
res2_14 = res2[14].asnumpy()
res3_14 = res3[14].asnumpy()
res4_14 = res4[14].asnumpy()
np.testing.assert_allclose(res1_14 ,res2_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res3_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res4_14, atol=1e-3, rtol=1e-3)
(res1_14 == res2_14).all()
(res1_14 == res3_14).all()
(res1_14 == res4_14).all()
res1_15 = module1.get_output(15).asnumpy()
res2_15 = res2[15].asnumpy()
res3_15 = res3[15].asnumpy()
res4_15 = res4[15].asnumpy()
np.testing.assert_allclose(res1_15 ,res2_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res3_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res4_15, atol=1e-3, rtol=1e-3)
(res1_15 == res2_15).all()
(res1_15 == res3_15).all()
(res1_15 == res4_15).all()
res1_16 = module1.get_output(16).asnumpy()
res2_16 = res2[16].asnumpy()
res3_16 = res3[16].asnumpy()
res4_16 = res4[16].asnumpy()
np.testing.assert_allclose(res1_16 ,res2_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res3_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res4_16, atol=1e-3, rtol=1e-3)
(res1_16 == res2_16).all()
(res1_16 == res3_16).all()
(res1_16 == res4_16).all()
res1_17 = module1.get_output(17).asnumpy()
res2_17 = res2[17].asnumpy()
res3_17 = res3[17].asnumpy()
res4_17 = res4[17].asnumpy()
np.testing.assert_allclose(res1_17 ,res2_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res3_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res4_17, atol=1e-3, rtol=1e-3)
(res1_17 == res2_17).all()
(res1_17 == res3_17).all()
(res1_17 == res4_17).all()
res1_18 = module1.get_output(18).asnumpy()
res2_18 = res2[18].asnumpy()
res3_18 = res3[18].asnumpy()
res4_18 = res4[18].asnumpy()
np.testing.assert_allclose(res1_18 ,res2_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res3_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res4_18, atol=1e-3, rtol=1e-3)
(res1_18 == res2_18).all()
(res1_18 == res3_18).all()
(res1_18 == res4_18).all()
res1_19 = module1.get_output(19).asnumpy()
res2_19 = res2[19].asnumpy()
res3_19 = res3[19].asnumpy()
res4_19 = res4[19].asnumpy()
np.testing.assert_allclose(res1_19 ,res2_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_19 ,res3_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_19 ,res4_19, atol=1e-3, rtol=1e-3)
(res1_19 == res2_19).all()
(res1_19 == res3_19).all()
(res1_19 == res4_19).all()
module5.set_input('var_269', input_269)
module5.set_input('var_270', input_270)
module5.set_input('var_304', input_304)
module5.set_input('var_315', input_315)
module5.set_input('var_333', input_333)
module5.set_input('var_351', input_351)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_269, input_270, input_304, input_315, input_333, input_351, )
res7 = intrp7.evaluate()(input_269, input_270, input_304, input_315, input_333, input_351, )
res8 = intrp8.evaluate()(input_269, input_270, input_304, input_315, input_333, input_351, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
res5_14 = module5.get_output(14).asnumpy()
res6_14 = res6[14].asnumpy()
res7_14 = res7[14].asnumpy()
res8_14 = res8[14].asnumpy()
np.testing.assert_allclose(res5_14 ,res6_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res7_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res8_14, atol=1e-3, rtol=1e-3)
(res5_14 == res6_14).all()
(res5_14 == res7_14).all()
(res5_14 == res8_14).all()
res5_15 = module5.get_output(15).asnumpy()
res6_15 = res6[15].asnumpy()
res7_15 = res7[15].asnumpy()
res8_15 = res8[15].asnumpy()
np.testing.assert_allclose(res5_15 ,res6_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res7_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res8_15, atol=1e-3, rtol=1e-3)
(res5_15 == res6_15).all()
(res5_15 == res7_15).all()
(res5_15 == res8_15).all()
res5_16 = module5.get_output(16).asnumpy()
res6_16 = res6[16].asnumpy()
res7_16 = res7[16].asnumpy()
res8_16 = res8[16].asnumpy()
np.testing.assert_allclose(res5_16 ,res6_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res7_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res8_16, atol=1e-3, rtol=1e-3)
(res5_16 == res6_16).all()
(res5_16 == res7_16).all()
(res5_16 == res8_16).all()
res5_17 = module5.get_output(17).asnumpy()
res6_17 = res6[17].asnumpy()
res7_17 = res7[17].asnumpy()
res8_17 = res8[17].asnumpy()
np.testing.assert_allclose(res5_17 ,res6_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res7_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res8_17, atol=1e-3, rtol=1e-3)
(res5_17 == res6_17).all()
(res5_17 == res7_17).all()
(res5_17 == res8_17).all()
res5_18 = module5.get_output(18).asnumpy()
res6_18 = res6[18].asnumpy()
res7_18 = res7[18].asnumpy()
res8_18 = res8[18].asnumpy()
np.testing.assert_allclose(res5_18 ,res6_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res7_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res8_18, atol=1e-3, rtol=1e-3)
(res5_18 == res6_18).all()
(res5_18 == res7_18).all()
(res5_18 == res8_18).all()
res5_19 = module5.get_output(19).asnumpy()
res6_19 = res6[19].asnumpy()
res7_19 = res7[19].asnumpy()
res8_19 = res8[19].asnumpy()
np.testing.assert_allclose(res5_19 ,res6_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_19 ,res7_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_19 ,res8_19, atol=1e-3, rtol=1e-3)
(res5_19 == res6_19).all()
(res5_19 == res7_19).all()
(res5_19 == res8_19).all()
module9.set_input('var_269', input_269)
module9.set_input('var_270', input_270)
module9.set_input('var_304', input_304)
module9.set_input('var_315', input_315)
module9.set_input('var_333', input_333)
module9.set_input('var_351', input_351)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_269, input_270, input_304, input_315, input_333, input_351, )
res11 = intrp11.evaluate()(input_269, input_270, input_304, input_315, input_333, input_351, )
res12 = intrp12.evaluate()(input_269, input_270, input_304, input_315, input_333, input_351, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
res9_14 = module9.get_output(14).asnumpy()
res10_14 = res10[14].asnumpy()
res11_14 = res11[14].asnumpy()
res12_14 = res12[14].asnumpy()
np.testing.assert_allclose(res9_14 ,res10_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res11_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res12_14, atol=1e-3, rtol=1e-3)
(res9_14 == res10_14).all()
(res9_14 == res11_14).all()
(res9_14 == res12_14).all()
res9_15 = module9.get_output(15).asnumpy()
res10_15 = res10[15].asnumpy()
res11_15 = res11[15].asnumpy()
res12_15 = res12[15].asnumpy()
np.testing.assert_allclose(res9_15 ,res10_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res11_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res12_15, atol=1e-3, rtol=1e-3)
(res9_15 == res10_15).all()
(res9_15 == res11_15).all()
(res9_15 == res12_15).all()
res9_16 = module9.get_output(16).asnumpy()
res10_16 = res10[16].asnumpy()
res11_16 = res11[16].asnumpy()
res12_16 = res12[16].asnumpy()
np.testing.assert_allclose(res9_16 ,res10_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res11_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res12_16, atol=1e-3, rtol=1e-3)
(res9_16 == res10_16).all()
(res9_16 == res11_16).all()
(res9_16 == res12_16).all()
res9_17 = module9.get_output(17).asnumpy()
res10_17 = res10[17].asnumpy()
res11_17 = res11[17].asnumpy()
res12_17 = res12[17].asnumpy()
np.testing.assert_allclose(res9_17 ,res10_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res11_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res12_17, atol=1e-3, rtol=1e-3)
(res9_17 == res10_17).all()
(res9_17 == res11_17).all()
(res9_17 == res12_17).all()
res9_18 = module9.get_output(18).asnumpy()
res10_18 = res10[18].asnumpy()
res11_18 = res11[18].asnumpy()
res12_18 = res12[18].asnumpy()
np.testing.assert_allclose(res9_18 ,res10_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res11_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res12_18, atol=1e-3, rtol=1e-3)
(res9_18 == res10_18).all()
(res9_18 == res11_18).all()
(res9_18 == res12_18).all()
res9_19 = module9.get_output(19).asnumpy()
res10_19 = res10[19].asnumpy()
res11_19 = res11[19].asnumpy()
res12_19 = res12[19].asnumpy()
np.testing.assert_allclose(res9_19 ,res10_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_19 ,res11_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_19 ,res12_19, atol=1e-3, rtol=1e-3)
(res9_19 == res10_19).all()
(res9_19 == res11_19).all()
(res9_19 == res12_19).all()
module13.set_input('var_269', input_269)
module13.set_input('var_270', input_270)
module13.set_input('var_304', input_304)
module13.set_input('var_315', input_315)
module13.set_input('var_333', input_333)
module13.set_input('var_351', input_351)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_269, input_270, input_304, input_315, input_333, input_351, )
res15 = intrp15.evaluate()(input_269, input_270, input_304, input_315, input_333, input_351, )
res16 = intrp16.evaluate()(input_269, input_270, input_304, input_315, input_333, input_351, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
res13_14 = module13.get_output(14).asnumpy()
res14_14 = res14[14].asnumpy()
res15_14 = res15[14].asnumpy()
res16_14 = res16[14].asnumpy()
np.testing.assert_allclose(res13_14 ,res14_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res15_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res16_14, atol=1e-3, rtol=1e-3)
(res13_14 == res14_14).all()
(res13_14 == res15_14).all()
(res13_14 == res16_14).all()
res13_15 = module13.get_output(15).asnumpy()
res14_15 = res14[15].asnumpy()
res15_15 = res15[15].asnumpy()
res16_15 = res16[15].asnumpy()
np.testing.assert_allclose(res13_15 ,res14_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res15_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res16_15, atol=1e-3, rtol=1e-3)
(res13_15 == res14_15).all()
(res13_15 == res15_15).all()
(res13_15 == res16_15).all()
res13_16 = module13.get_output(16).asnumpy()
res14_16 = res14[16].asnumpy()
res15_16 = res15[16].asnumpy()
res16_16 = res16[16].asnumpy()
np.testing.assert_allclose(res13_16 ,res14_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res15_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res16_16, atol=1e-3, rtol=1e-3)
(res13_16 == res14_16).all()
(res13_16 == res15_16).all()
(res13_16 == res16_16).all()
res13_17 = module13.get_output(17).asnumpy()
res14_17 = res14[17].asnumpy()
res15_17 = res15[17].asnumpy()
res16_17 = res16[17].asnumpy()
np.testing.assert_allclose(res13_17 ,res14_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res15_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res16_17, atol=1e-3, rtol=1e-3)
(res13_17 == res14_17).all()
(res13_17 == res15_17).all()
(res13_17 == res16_17).all()
res13_18 = module13.get_output(18).asnumpy()
res14_18 = res14[18].asnumpy()
res15_18 = res15[18].asnumpy()
res16_18 = res16[18].asnumpy()
np.testing.assert_allclose(res13_18 ,res14_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res15_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res16_18, atol=1e-3, rtol=1e-3)
(res13_18 == res14_18).all()
(res13_18 == res15_18).all()
(res13_18 == res16_18).all()
res13_19 = module13.get_output(19).asnumpy()
res14_19 = res14[19].asnumpy()
res15_19 = res15[19].asnumpy()
res16_19 = res16[19].asnumpy()
np.testing.assert_allclose(res13_19 ,res14_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_19 ,res15_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_19 ,res16_19, atol=1e-3, rtol=1e-3)
(res13_19 == res14_19).all()
(res13_19 == res15_19).all()
(res13_19 == res16_19).all()
module17.set_input('var_269', input_269)
module17.set_input('var_270', input_270)
module17.set_input('var_304', input_304)
module17.set_input('var_315', input_315)
module17.set_input('var_333', input_333)
module17.set_input('var_351', input_351)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_269, input_270, input_304, input_315, input_333, input_351, )
res19 = intrp19.evaluate()(input_269, input_270, input_304, input_315, input_333, input_351, )
res20 = intrp20.evaluate()(input_269, input_270, input_304, input_315, input_333, input_351, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
res17_14 = module17.get_output(14).asnumpy()
res18_14 = res18[14].asnumpy()
res19_14 = res19[14].asnumpy()
res20_14 = res20[14].asnumpy()
np.testing.assert_allclose(res17_14 ,res18_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res19_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res20_14, atol=1e-3, rtol=1e-3)
(res17_14 == res18_14).all()
(res17_14 == res19_14).all()
(res17_14 == res20_14).all()
res17_15 = module17.get_output(15).asnumpy()
res18_15 = res18[15].asnumpy()
res19_15 = res19[15].asnumpy()
res20_15 = res20[15].asnumpy()
np.testing.assert_allclose(res17_15 ,res18_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res19_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res20_15, atol=1e-3, rtol=1e-3)
(res17_15 == res18_15).all()
(res17_15 == res19_15).all()
(res17_15 == res20_15).all()
res17_16 = module17.get_output(16).asnumpy()
res18_16 = res18[16].asnumpy()
res19_16 = res19[16].asnumpy()
res20_16 = res20[16].asnumpy()
np.testing.assert_allclose(res17_16 ,res18_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res19_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res20_16, atol=1e-3, rtol=1e-3)
(res17_16 == res18_16).all()
(res17_16 == res19_16).all()
(res17_16 == res20_16).all()
res17_17 = module17.get_output(17).asnumpy()
res18_17 = res18[17].asnumpy()
res19_17 = res19[17].asnumpy()
res20_17 = res20[17].asnumpy()
np.testing.assert_allclose(res17_17 ,res18_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res19_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res20_17, atol=1e-3, rtol=1e-3)
(res17_17 == res18_17).all()
(res17_17 == res19_17).all()
(res17_17 == res20_17).all()
res17_18 = module17.get_output(18).asnumpy()
res18_18 = res18[18].asnumpy()
res19_18 = res19[18].asnumpy()
res20_18 = res20[18].asnumpy()
np.testing.assert_allclose(res17_18 ,res18_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res19_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res20_18, atol=1e-3, rtol=1e-3)
(res17_18 == res18_18).all()
(res17_18 == res19_18).all()
(res17_18 == res20_18).all()
res17_19 = module17.get_output(19).asnumpy()
res18_19 = res18[19].asnumpy()
res19_19 = res19[19].asnumpy()
res20_19 = res20[19].asnumpy()
np.testing.assert_allclose(res17_19 ,res18_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_19 ,res19_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_19 ,res20_19, atol=1e-3, rtol=1e-3)
(res17_19 == res18_19).all()
(res17_19 == res19_19).all()
(res17_19 == res20_19).all()
module21.set_input('var_269', input_269)
module21.set_input('var_270', input_270)
module21.set_input('var_304', input_304)
module21.set_input('var_315', input_315)
module21.set_input('var_333', input_333)
module21.set_input('var_351', input_351)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_269, input_270, input_304, input_315, input_333, input_351, )
res23 = intrp23.evaluate()(input_269, input_270, input_304, input_315, input_333, input_351, )
res24 = intrp24.evaluate()(input_269, input_270, input_304, input_315, input_333, input_351, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()
res21_14 = module21.get_output(14).asnumpy()
res22_14 = res22[14].asnumpy()
res23_14 = res23[14].asnumpy()
res24_14 = res24[14].asnumpy()
np.testing.assert_allclose(res21_14 ,res22_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res23_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res24_14, atol=1e-3, rtol=1e-3)
(res21_14 == res22_14).all()
(res21_14 == res23_14).all()
(res21_14 == res24_14).all()
res21_15 = module21.get_output(15).asnumpy()
res22_15 = res22[15].asnumpy()
res23_15 = res23[15].asnumpy()
res24_15 = res24[15].asnumpy()
np.testing.assert_allclose(res21_15 ,res22_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res23_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res24_15, atol=1e-3, rtol=1e-3)
(res21_15 == res22_15).all()
(res21_15 == res23_15).all()
(res21_15 == res24_15).all()
res21_16 = module21.get_output(16).asnumpy()
res22_16 = res22[16].asnumpy()
res23_16 = res23[16].asnumpy()
res24_16 = res24[16].asnumpy()
np.testing.assert_allclose(res21_16 ,res22_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res23_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res24_16, atol=1e-3, rtol=1e-3)
(res21_16 == res22_16).all()
(res21_16 == res23_16).all()
(res21_16 == res24_16).all()
res21_17 = module21.get_output(17).asnumpy()
res22_17 = res22[17].asnumpy()
res23_17 = res23[17].asnumpy()
res24_17 = res24[17].asnumpy()
np.testing.assert_allclose(res21_17 ,res22_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res23_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res24_17, atol=1e-3, rtol=1e-3)
(res21_17 == res22_17).all()
(res21_17 == res23_17).all()
(res21_17 == res24_17).all()
res21_18 = module21.get_output(18).asnumpy()
res22_18 = res22[18].asnumpy()
res23_18 = res23[18].asnumpy()
res24_18 = res24[18].asnumpy()
np.testing.assert_allclose(res21_18 ,res22_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res23_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res24_18, atol=1e-3, rtol=1e-3)
(res21_18 == res22_18).all()
(res21_18 == res23_18).all()
(res21_18 == res24_18).all()
res21_19 = module21.get_output(19).asnumpy()
res22_19 = res22[19].asnumpy()
res23_19 = res23[19].asnumpy()
res24_19 = res24[19].asnumpy()
np.testing.assert_allclose(res21_19 ,res22_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_19 ,res23_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_19 ,res24_19, atol=1e-3, rtol=1e-3)
(res21_19 == res22_19).all()
(res21_19 == res23_19).all()
(res21_19 == res24_19).all()

'''104: TVMFuncCall
103: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
102: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
101: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
100: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
99: tvm::transform::Pass::operator()(tvm::IRModule) const
98: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
97: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
96: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
95: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
94: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
93: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
92: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
91: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
90: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
89: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
88: _ZN3tvm5relay16MixedModeMutato
87: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
86: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
85: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
84: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
83: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
82: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
81: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
80: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
79: _ZN3tvm5relay16MixedModeMutato
78: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
77: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
76: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
75: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
74: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
73: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
72: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
71: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
70: tvm::transform::Pass::operator()(tvm::IRModule) const
69: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
68: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
67: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
66: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
65: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
64: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
63: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
62: _ZN3tvm5relay16MixedModeMutato
61: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
60: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
59: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
58: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
57: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
56: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
55: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
54: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
53: _ZN3tvm5relay16MixedModeMutato
52: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
51: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
50: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
49: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
48: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
46: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''