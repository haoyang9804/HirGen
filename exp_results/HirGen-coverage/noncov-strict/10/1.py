import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (15, 12, 1))#candidate|0|(15, 12, 1)|var|float64
uop_1 = relay.atanh(var_0.astype('float64')) # shape=(15, 12, 1)
bop_3 = relay.multiply(var_0.astype('uint16'), relay.reshape(uop_1.astype('uint16'), relay.shape_of(var_0))) # shape=(15, 12, 1)
uop_6 = relay.sin(uop_1.astype('float32')) # shape=(15, 12, 1)
uop_8 = relay.sqrt(uop_1.astype('float64')) # shape=(15, 12, 1)
var_10 = relay.var("var_10", dtype = "float64", shape = (15, 12, 4))#candidate|10|(15, 12, 4)|var|float64
bop_11 = relay.mod(uop_1.astype('float64'), var_10.astype('float64')) # shape=(15, 12, 4)
output = relay.Tuple([bop_3,uop_6,uop_8,bop_11,])
output2 = relay.Tuple([bop_3,uop_6,uop_8,bop_11,])
func_14 = relay.Function([var_0,var_10,], output)
mod['func_14'] = func_14
mod = relay.transform.InferType()(mod)
var_15 = relay.var("var_15", dtype = "float64", shape = (15, 12, 1))#candidate|15|(15, 12, 1)|var|float64
var_16 = relay.var("var_16", dtype = "float64", shape = (15, 12, 4))#candidate|16|(15, 12, 4)|var|float64
output = func_14(var_15,var_16,)
func_17 = relay.Function([var_15,var_16,], output)
mutated_mod['func_17'] = func_17
mutated_mod = relay.transform.InferType()(mutated_mod)
var_19 = relay.var("var_19", dtype = "int16", shape = ())#candidate|19|()|var|int16
var_20 = relay.var("var_20", dtype = "int16", shape = ())#candidate|20|()|var|int16
bop_21 = relay.bitwise_and(var_19.astype('int16'), var_20.astype('int16')) # shape=()
bop_24 = relay.mod(var_20.astype('float64'), bop_21.astype('float64')) # shape=()
uop_27 = relay.exp(var_20.astype('float32')) # shape=()
var_29 = relay.var("var_29", dtype = "float32", shape = (5, 8, 11))#candidate|29|(5, 8, 11)|var|float32
bop_30 = relay.bitwise_or(uop_27.astype('int64'), var_29.astype('int64')) # shape=(5, 8, 11)
uop_33 = relay.asinh(bop_21.astype('float64')) # shape=()
uop_35 = relay.acosh(uop_33.astype('float32')) # shape=()
var_37 = relay.var("var_37", dtype = "float32", shape = (5, 13))#candidate|37|(5, 13)|var|float32
bop_38 = relay.not_equal(uop_35.astype('bool'), var_37.astype('bool')) # shape=(5, 13)
uop_41 = relay.acos(uop_33.astype('float64')) # shape=()
output = relay.Tuple([bop_24,bop_30,bop_38,uop_41,])
output2 = relay.Tuple([bop_24,bop_30,bop_38,uop_41,])
func_43 = relay.Function([var_19,var_20,var_29,var_37,], output)
mod['func_43'] = func_43
mod = relay.transform.InferType()(mod)
mutated_mod['func_43'] = func_43
mutated_mod = relay.transform.InferType()(mutated_mod)
func_43_call = mutated_mod.get_global_var('func_43')
var_45 = relay.var("var_45", dtype = "int16", shape = ())#candidate|45|()|var|int16
var_46 = relay.var("var_46", dtype = "int16", shape = ())#candidate|46|()|var|int16
var_47 = relay.var("var_47", dtype = "float32", shape = (5, 8, 11))#candidate|47|(5, 8, 11)|var|float32
var_48 = relay.var("var_48", dtype = "float32", shape = (5, 13))#candidate|48|(5, 13)|var|float32
call_44 = func_43_call(var_45,var_46,var_47,var_48,)
output = call_44
func_49 = relay.Function([var_45,var_46,var_47,var_48,], output)
mutated_mod['func_49'] = func_49
mutated_mod = relay.transform.InferType()(mutated_mod)
var_51 = relay.var("var_51", dtype = "int64", shape = ())#candidate|51|()|var|int64
var_52 = relay.var("var_52", dtype = "int64", shape = (14, 3))#candidate|52|(14, 3)|var|int64
bop_53 = relay.logical_xor(var_51.astype('int64'), var_52.astype('int64')) # shape=(14, 3)
output = relay.Tuple([bop_53,])
output2 = relay.Tuple([bop_53,])
func_56 = relay.Function([var_51,var_52,], output)
mod['func_56'] = func_56
mod = relay.transform.InferType()(mod)
mutated_mod['func_56'] = func_56
mutated_mod = relay.transform.InferType()(mutated_mod)
func_56_call = mutated_mod.get_global_var('func_56')
var_58 = relay.var("var_58", dtype = "int64", shape = ())#candidate|58|()|var|int64
var_59 = relay.var("var_59", dtype = "int64", shape = (14, 3))#candidate|59|(14, 3)|var|int64
call_57 = func_56_call(var_58,var_59,)
output = call_57
func_60 = relay.Function([var_58,var_59,], output)
mutated_mod['func_60'] = func_60
mutated_mod = relay.transform.InferType()(mutated_mod)
var_62 = relay.var("var_62", dtype = "bool", shape = (10, 12, 16))#candidate|62|(10, 12, 16)|var|bool
var_63 = relay.var("var_63", dtype = "bool", shape = (10, 12, 16))#candidate|63|(10, 12, 16)|var|bool
bop_64 = relay.logical_and(var_62.astype('bool'), relay.reshape(var_63.astype('bool'), relay.shape_of(var_62))) # shape=(10, 12, 16)
uop_67 = relay.log(bop_64.astype('float32')) # shape=(10, 12, 16)
bop_69 = relay.not_equal(uop_67.astype('bool'), relay.reshape(var_62.astype('bool'), relay.shape_of(uop_67))) # shape=(10, 12, 16)
output = relay.Tuple([bop_69,])
output2 = relay.Tuple([bop_69,])
func_72 = relay.Function([var_62,var_63,], output)
mod['func_72'] = func_72
mod = relay.transform.InferType()(mod)
var_73 = relay.var("var_73", dtype = "bool", shape = (10, 12, 16))#candidate|73|(10, 12, 16)|var|bool
var_74 = relay.var("var_74", dtype = "bool", shape = (10, 12, 16))#candidate|74|(10, 12, 16)|var|bool
output = func_72(var_73,var_74,)
func_75 = relay.Function([var_73,var_74,], output)
mutated_mod['func_75'] = func_75
mutated_mod = relay.transform.InferType()(mutated_mod)
const_77 = relay.const(-2.801596, dtype = "float32")#candidate|77|()|const|float32
uop_78 = relay.atanh(const_77.astype('float32')) # shape=()
bop_80 = relay.subtract(const_77.astype('int64'), uop_78.astype('int64')) # shape=()
uop_83 = relay.atan(bop_80.astype('float32')) # shape=()
bop_85 = relay.logical_and(uop_83.astype('bool'), bop_80.astype('bool')) # shape=()
uop_88 = relay.sin(uop_78.astype('float64')) # shape=()
uop_90 = relay.tan(const_77.astype('float32')) # shape=()
var_92 = relay.var("var_92", dtype = "float32", shape = (14, 15, 13))#candidate|92|(14, 15, 13)|var|float32
bop_93 = relay.less(uop_90.astype('bool'), var_92.astype('bool')) # shape=(14, 15, 13)
var_96 = relay.var("var_96", dtype = "float32", shape = ())#candidate|96|()|var|float32
bop_97 = relay.not_equal(uop_83.astype('bool'), var_96.astype('bool')) # shape=()
bop_100 = relay.bitwise_xor(bop_97.astype('int8'), uop_83.astype('int8')) # shape=()
uop_103 = relay.sqrt(uop_88.astype('float32')) # shape=()
uop_105 = relay.sqrt(uop_103.astype('float32')) # shape=()
uop_107 = relay.atanh(bop_80.astype('float32')) # shape=()
func_72_call = mod.get_global_var('func_72')
func_75_call = mutated_mod.get_global_var('func_75')
var_110 = relay.var("var_110", dtype = "bool", shape = (1920,))#candidate|110|(1920,)|var|bool
call_109 = relay.TupleGetItem(func_72_call(relay.reshape(var_110.astype('bool'), [10, 12, 16]), relay.reshape(var_110.astype('bool'), [10, 12, 16]), ), 0)
call_111 = relay.TupleGetItem(func_75_call(relay.reshape(var_110.astype('bool'), [10, 12, 16]), relay.reshape(var_110.astype('bool'), [10, 12, 16]), ), 0)
uop_112 = relay.tan(bop_93.astype('float64')) # shape=(14, 15, 13)
uop_114 = relay.rsqrt(uop_112.astype('float32')) # shape=(14, 15, 13)
uop_116 = relay.exp(uop_88.astype('float32')) # shape=()
var_118 = relay.var("var_118", dtype = "float32", shape = (3,))#candidate|118|(3,)|var|float32
bop_119 = relay.not_equal(uop_116.astype('bool'), var_118.astype('bool')) # shape=(3,)
const_122 = relay.const([6.280424,-6.011829,7.093020,-9.925426,7.752645,-4.972119], dtype = "float32")#candidate|122|(6,)|const|float32
bop_123 = relay.subtract(uop_105.astype('float32'), const_122.astype('float32')) # shape=(6,)
bop_126 = relay.minimum(uop_105.astype('float32'), var_110.astype('float32')) # shape=(1920,)
uop_129 = relay.sin(bop_126.astype('float64')) # shape=(1920,)
uop_131 = relay.asin(uop_129.astype('float64')) # shape=(1920,)
func_72_call = mod.get_global_var('func_72')
func_75_call = mutated_mod.get_global_var('func_75')
call_133 = relay.TupleGetItem(func_72_call(relay.reshape(uop_131.astype('bool'), [10, 12, 16]), relay.reshape(bop_126.astype('bool'), [10, 12, 16]), ), 0)
call_134 = relay.TupleGetItem(func_75_call(relay.reshape(uop_131.astype('bool'), [10, 12, 16]), relay.reshape(bop_126.astype('bool'), [10, 12, 16]), ), 0)
output = relay.Tuple([bop_85,bop_100,uop_107,call_109,uop_114,bop_119,bop_123,uop_131,call_133,])
output2 = relay.Tuple([bop_85,bop_100,uop_107,call_111,uop_114,bop_119,bop_123,uop_131,call_134,])
func_135 = relay.Function([var_92,var_96,var_110,var_118,], output)
mod['func_135'] = func_135
mod = relay.transform.InferType()(mod)
var_136 = relay.var("var_136", dtype = "float32", shape = (14, 15, 13))#candidate|136|(14, 15, 13)|var|float32
var_137 = relay.var("var_137", dtype = "float32", shape = ())#candidate|137|()|var|float32
var_138 = relay.var("var_138", dtype = "bool", shape = (1920,))#candidate|138|(1920,)|var|bool
var_139 = relay.var("var_139", dtype = "float32", shape = (3,))#candidate|139|(3,)|var|float32
output = func_135(var_136,var_137,var_138,var_139,)
func_140 = relay.Function([var_136,var_137,var_138,var_139,], output)
mutated_mod['func_140'] = func_140
mutated_mod = relay.transform.InferType()(mutated_mod)
const_142 = relay.const(-2.454283, dtype = "float32")#candidate|142|()|const|float32
uop_143 = relay.log10(const_142.astype('float32')) # shape=()
uop_145 = relay.cos(const_142.astype('float32')) # shape=()
uop_147 = relay.atan(const_142.astype('float64')) # shape=()
func_14_call = mod.get_global_var('func_14')
func_17_call = mutated_mod.get_global_var('func_17')
const_150 = relay.const([3.496176,8.581609,0.669052,-0.088121,5.850364,3.334587,-1.061825,-6.201170,-7.125155,-5.935798,2.831736,5.427509,8.784730,-6.764950,0.775089,-6.914746,-7.519165,-7.020665,-8.384414,6.380511,-9.984110,-2.124755,-2.267670,6.977063,-8.697568,8.604340,4.898662,5.038532,-3.420703,3.171218,4.939340,8.877360,1.291710,9.988507,-0.108857,3.614030,4.772542,5.325051,-8.247361,1.426871,-3.231138,-9.398505,8.338334,0.633710,-5.524639,3.247915,-1.976312,8.191315,-5.920170,1.649881,-8.574878,-8.877037,-8.525088,6.054272,-4.228744,-4.115507,-1.277370,-1.563033,-7.571292,6.766654,-9.389344,-1.612018,6.952501,1.390630,-0.329242,6.118847,2.730195,3.994655,5.037839,4.458844,7.013814,0.703613,-5.781614,5.858346,7.493176,7.453334,-0.069081,-6.903262,-0.500879,5.148069,-0.068054,8.404652,-0.611003,-7.489508,3.859207,2.922222,3.942967,-3.615163,-1.340162,-2.485578,4.874108,-8.470232,3.265969,1.175632,-8.433776,-7.170100,0.263357,-5.044369,-6.792314,-3.571834,-6.616794,-8.016692,-5.053376,-0.745873,8.193687,-5.498336,-6.341236,-0.893816,1.548700,0.565329,-2.524978,-8.170504,5.467022,-8.822360,7.438249,-0.617557,-7.438559,3.934668,4.949805,-7.690580,-0.724887,5.394960,8.948142,-0.738077,-4.240887,-9.240015,-2.602548,-4.360272,3.464397,5.320434,2.544569,8.854522,0.839222,-4.259335,-9.904178,5.934363,9.979412,7.580564,-4.674602,2.251311,-2.004148,2.509787,9.962189,-8.068037,-0.516637,2.415750,3.356970,-7.153176,-9.909828,-3.291655,0.412848,5.098950,-9.501846,9.223524,7.594168,5.991086,-9.506534,-8.503105,7.573488,-6.442023,-6.653323,3.249798,-7.994680,-6.657261,8.903726,7.434295,-1.513063,6.479683,-1.987022,2.399948,-9.643802,0.137527,-8.256831,-8.880895,-1.711729,2.719917,-8.072232,6.811242,-9.143376,7.814291], dtype = "float64")#candidate|150|(180,)|const|float64
var_151 = relay.var("var_151", dtype = "float64", shape = (720,))#candidate|151|(720,)|var|float64
call_149 = relay.TupleGetItem(func_14_call(relay.reshape(const_150.astype('float64'), [15, 12, 1]), relay.reshape(var_151.astype('float64'), [15, 12, 4]), ), 1)
call_152 = relay.TupleGetItem(func_17_call(relay.reshape(const_150.astype('float64'), [15, 12, 1]), relay.reshape(var_151.astype('float64'), [15, 12, 4]), ), 1)
uop_153 = relay.log(const_150.astype('float64')) # shape=(180,)
bop_155 = relay.not_equal(uop_145.astype('bool'), uop_143.astype('bool')) # shape=()
bop_158 = relay.maximum(var_151.astype('uint16'), const_142.astype('uint16')) # shape=(720,)
uop_161 = relay.log(uop_147.astype('float32')) # shape=()
uop_163 = relay.atan(uop_161.astype('float64')) # shape=()
uop_165 = relay.exp(uop_145.astype('float64')) # shape=()
uop_167 = relay.log(uop_163.astype('float32')) # shape=()
var_169 = relay.var("var_169", dtype = "float32", shape = (14,))#candidate|169|(14,)|var|float32
bop_170 = relay.multiply(uop_167.astype('float32'), var_169.astype('float32')) # shape=(14,)
bop_173 = relay.less_equal(uop_163.astype('bool'), uop_161.astype('bool')) # shape=()
bop_176 = relay.subtract(uop_167.astype('int16'), var_169.astype('int16')) # shape=(14,)
var_179 = relay.var("var_179", dtype = "int16", shape = (14,))#candidate|179|(14,)|var|int16
bop_180 = relay.subtract(bop_176.astype('int32'), relay.reshape(var_179.astype('int32'), relay.shape_of(bop_176))) # shape=(14,)
bop_183 = relay.not_equal(bop_180.astype('bool'), uop_167.astype('bool')) # shape=(14,)
bop_186 = relay.not_equal(bop_180.astype('bool'), uop_145.astype('bool')) # shape=(14,)
bop_189 = relay.bitwise_and(bop_176.astype('int16'), uop_165.astype('int16')) # shape=(14,)
bop_192 = relay.logical_and(uop_143.astype('bool'), bop_170.astype('bool')) # shape=(14,)
var_195 = relay.var("var_195", dtype = "int16", shape = (14,))#candidate|195|(14,)|var|int16
bop_196 = relay.maximum(bop_189.astype('uint32'), relay.reshape(var_195.astype('uint32'), relay.shape_of(bop_189))) # shape=(14,)
bop_199 = relay.less_equal(bop_189.astype('bool'), uop_145.astype('bool')) # shape=(14,)
output = relay.Tuple([call_149,uop_153,bop_155,bop_158,bop_173,bop_183,bop_186,bop_192,bop_196,bop_199,])
output2 = relay.Tuple([call_152,uop_153,bop_155,bop_158,bop_173,bop_183,bop_186,bop_192,bop_196,bop_199,])
func_202 = relay.Function([var_151,var_169,var_179,var_195,], output)
mod['func_202'] = func_202
mod = relay.transform.InferType()(mod)
mutated_mod['func_202'] = func_202
mutated_mod = relay.transform.InferType()(mutated_mod)
func_202_call = mutated_mod.get_global_var('func_202')
var_204 = relay.var("var_204", dtype = "float64", shape = (720,))#candidate|204|(720,)|var|float64
var_205 = relay.var("var_205", dtype = "float32", shape = (14,))#candidate|205|(14,)|var|float32
var_206 = relay.var("var_206", dtype = "int16", shape = (14,))#candidate|206|(14,)|var|int16
var_207 = relay.var("var_207", dtype = "int16", shape = (14,))#candidate|207|(14,)|var|int16
call_203 = func_202_call(var_204,var_205,var_206,var_207,)
output = call_203
func_208 = relay.Function([var_204,var_205,var_206,var_207,], output)
mutated_mod['func_208'] = func_208
mutated_mod = relay.transform.InferType()(mutated_mod)
const_210 = relay.const([[True,True,True,True,False],[True,True,False,True,False],[True,True,False,True,True],[True,False,False,True,False],[True,False,False,True,False],[False,False,True,False,False],[True,True,True,True,False],[False,False,True,False,False],[True,True,True,True,True],[False,False,True,False,True],[True,False,False,True,True],[False,True,True,True,True],[False,True,False,True,False],[False,True,False,True,True],[False,False,True,False,False]], dtype = "bool")#candidate|210|(15, 5)|const|bool
var_211 = relay.var("var_211", dtype = "bool", shape = (15, 5))#candidate|211|(15, 5)|var|bool
bop_212 = relay.logical_and(const_210.astype('bool'), relay.reshape(var_211.astype('bool'), relay.shape_of(const_210))) # shape=(15, 5)
var_215 = relay.var("var_215", dtype = "bool", shape = (15, 5))#candidate|215|(15, 5)|var|bool
bop_216 = relay.greater_equal(var_211.astype('bool'), relay.reshape(var_215.astype('bool'), relay.shape_of(var_211))) # shape=(15, 5)
uop_219 = relay.log(bop_212.astype('float64')) # shape=(15, 5)
uop_221 = relay.cos(var_211.astype('float64')) # shape=(15, 5)
bop_223 = relay.mod(uop_221.astype('float32'), relay.reshape(var_215.astype('float32'), relay.shape_of(uop_221))) # shape=(15, 5)
var_226 = relay.var("var_226", dtype = "float64", shape = (15, 5))#candidate|226|(15, 5)|var|float64
bop_227 = relay.divide(uop_219.astype('float32'), relay.reshape(var_226.astype('float32'), relay.shape_of(uop_219))) # shape=(15, 5)
output = relay.Tuple([bop_216,bop_223,bop_227,])
output2 = relay.Tuple([bop_216,bop_223,bop_227,])
func_230 = relay.Function([var_211,var_215,var_226,], output)
mod['func_230'] = func_230
mod = relay.transform.InferType()(mod)
mutated_mod['func_230'] = func_230
mutated_mod = relay.transform.InferType()(mutated_mod)
func_230_call = mutated_mod.get_global_var('func_230')
var_232 = relay.var("var_232", dtype = "bool", shape = (15, 5))#candidate|232|(15, 5)|var|bool
var_233 = relay.var("var_233", dtype = "bool", shape = (15, 5))#candidate|233|(15, 5)|var|bool
var_234 = relay.var("var_234", dtype = "float64", shape = (15, 5))#candidate|234|(15, 5)|var|float64
call_231 = func_230_call(var_232,var_233,var_234,)
output = call_231
func_235 = relay.Function([var_232,var_233,var_234,], output)
mutated_mod['func_235'] = func_235
mutated_mod = relay.transform.InferType()(mutated_mod)
const_237 = relay.const(-3.208992, dtype = "float64")#candidate|237|()|const|float64
const_238 = relay.const([[-6.772436,-7.655054,-7.028015,7.680604,-4.745039,-6.891299,-2.233615,-9.418628,0.183145,-3.808558,3.586211],[-1.798529,-1.897054,-0.989219,4.127693,8.711149,5.215043,7.438761,2.822113,-3.214944,3.651483,5.841605]], dtype = "float64")#candidate|238|(2, 11)|const|float64
bop_239 = relay.divide(const_237.astype('float64'), const_238.astype('float64')) # shape=(2, 11)
output = relay.Tuple([bop_239,])
output2 = relay.Tuple([bop_239,])
func_242 = relay.Function([], output)
mod['func_242'] = func_242
mod = relay.transform.InferType()(mod)
output = func_242()
func_243 = relay.Function([], output)
mutated_mod['func_243'] = func_243
mutated_mod = relay.transform.InferType()(mutated_mod)
func_242_call = mod.get_global_var('func_242')
func_243_call = mutated_mod.get_global_var('func_243')
call_244 = relay.TupleGetItem(func_242_call(), 0)
call_245 = relay.TupleGetItem(func_243_call(), 0)
func_56_call = mod.get_global_var('func_56')
func_60_call = mutated_mod.get_global_var('func_60')
const_247 = relay.const(10, dtype = "int64")#candidate|247|()|const|int64
var_248 = relay.var("var_248", dtype = "int64", shape = (42,))#candidate|248|(42,)|var|int64
call_246 = relay.TupleGetItem(func_56_call(relay.reshape(const_247.astype('int64'), []), relay.reshape(var_248.astype('int64'), [14, 3]), ), 0)
call_249 = relay.TupleGetItem(func_60_call(relay.reshape(const_247.astype('int64'), []), relay.reshape(var_248.astype('int64'), [14, 3]), ), 0)
var_250 = relay.var("var_250", dtype = "int64", shape = (42,))#candidate|250|(42,)|var|int64
bop_251 = relay.not_equal(var_248.astype('bool'), relay.reshape(var_250.astype('bool'), relay.shape_of(var_248))) # shape=(42,)
bop_254 = relay.floor_mod(var_248.astype('float32'), relay.reshape(bop_251.astype('float32'), relay.shape_of(var_248))) # shape=(42,)
uop_257 = relay.atanh(bop_254.astype('float32')) # shape=(42,)
uop_259 = relay.sigmoid(uop_257.astype('float64')) # shape=(42,)
uop_261 = relay.acosh(uop_259.astype('float64')) # shape=(42,)
bop_263 = relay.greater_equal(uop_259.astype('bool'), relay.reshape(uop_257.astype('bool'), relay.shape_of(uop_259))) # shape=(42,)
uop_266 = relay.asin(uop_261.astype('float32')) # shape=(42,)
uop_268 = relay.cos(uop_266.astype('float32')) # shape=(42,)
bop_270 = relay.logical_or(uop_268.astype('bool'), const_247.astype('bool')) # shape=(42,)
uop_273 = relay.log(uop_268.astype('float32')) # shape=(42,)
uop_275 = relay.cos(bop_270.astype('float64')) # shape=(42,)
output = relay.Tuple([call_244,call_246,bop_263,uop_273,uop_275,])
output2 = relay.Tuple([call_245,call_249,bop_263,uop_273,uop_275,])
func_277 = relay.Function([var_248,var_250,], output)
mod['func_277'] = func_277
mod = relay.transform.InferType()(mod)
var_278 = relay.var("var_278", dtype = "int64", shape = (42,))#candidate|278|(42,)|var|int64
var_279 = relay.var("var_279", dtype = "int64", shape = (42,))#candidate|279|(42,)|var|int64
output = func_277(var_278,var_279,)
func_280 = relay.Function([var_278,var_279,], output)
mutated_mod['func_280'] = func_280
mutated_mod = relay.transform.InferType()(mutated_mod)
var_282 = relay.var("var_282", dtype = "int16", shape = (2, 15, 7))#candidate|282|(2, 15, 7)|var|int16
var_283 = relay.var("var_283", dtype = "int16", shape = (2, 15, 7))#candidate|283|(2, 15, 7)|var|int16
bop_284 = relay.right_shift(var_282.astype('int16'), relay.reshape(var_283.astype('int16'), relay.shape_of(var_282))) # shape=(2, 15, 7)
bop_287 = relay.bitwise_or(var_283.astype('uint32'), relay.reshape(bop_284.astype('uint32'), relay.shape_of(var_283))) # shape=(2, 15, 7)
output = relay.Tuple([bop_287,])
output2 = relay.Tuple([bop_287,])
func_290 = relay.Function([var_282,var_283,], output)
mod['func_290'] = func_290
mod = relay.transform.InferType()(mod)
mutated_mod['func_290'] = func_290
mutated_mod = relay.transform.InferType()(mutated_mod)
func_290_call = mutated_mod.get_global_var('func_290')
var_292 = relay.var("var_292", dtype = "int16", shape = (2, 15, 7))#candidate|292|(2, 15, 7)|var|int16
var_293 = relay.var("var_293", dtype = "int16", shape = (2, 15, 7))#candidate|293|(2, 15, 7)|var|int16
call_291 = func_290_call(var_292,var_293,)
output = call_291
func_294 = relay.Function([var_292,var_293,], output)
mutated_mod['func_294'] = func_294
mutated_mod = relay.transform.InferType()(mutated_mod)
const_296 = relay.constdtype = "float64")#candidate|296|(14, 16)|const|float64
var_297 = relay.var("var_297", dtype = "float64", shape = (14, 16))#candidate|297|(14, 16)|var|float64
bop_298 = relay.power(const_296.astype('float64'), relay.reshape(var_297.astype('float64'), relay.shape_of(const_296))) # shape=(14, 16)
uop_301 = relay.sigmoid(var_297.astype('float32')) # shape=(14, 16)
var_303 = relay.var("var_303", dtype = "float32", shape = (14, 16))#candidate|303|(14, 16)|var|float32
bop_304 = relay.bitwise_and(uop_301.astype('uint32'), relay.reshape(var_303.astype('uint32'), relay.shape_of(uop_301))) # shape=(14, 16)
uop_307 = relay.acosh(var_297.astype('float32')) # shape=(14, 16)
var_309 = relay.var("var_309", dtype = "float32", shape = (14, 16))#candidate|309|(14, 16)|var|float32
bop_310 = relay.add(uop_301.astype('int32'), relay.reshape(var_309.astype('int32'), relay.shape_of(uop_301))) # shape=(14, 16)
var_313 = relay.var("var_313", dtype = "float32", shape = (14, 16))#candidate|313|(14, 16)|var|float32
bop_314 = relay.logical_and(uop_301.astype('bool'), relay.reshape(var_313.astype('bool'), relay.shape_of(uop_301))) # shape=(14, 16)
uop_317 = relay.exp(var_303.astype('float64')) # shape=(14, 16)
uop_319 = relay.sigmoid(uop_307.astype('float64')) # shape=(14, 16)
uop_321 = relay.erf(uop_319.astype('float32')) # shape=(14, 16)
uop_323 = relay.acos(uop_319.astype('float64')) # shape=(14, 16)
output = relay.Tuple([bop_298,bop_304,bop_310,bop_314,uop_317,uop_321,uop_323,])
output2 = relay.Tuple([bop_298,bop_304,bop_310,bop_314,uop_317,uop_321,uop_323,])
func_325 = relay.Function([var_297,var_303,var_309,var_313,], output)
mod['func_325'] = func_325
mod = relay.transform.InferType()(mod)
var_326 = relay.var("var_326", dtype = "float64", shape = (14, 16))#candidate|326|(14, 16)|var|float64
var_327 = relay.var("var_327", dtype = "float32", shape = (14, 16))#candidate|327|(14, 16)|var|float32
var_328 = relay.var("var_328", dtype = "float32", shape = (14, 16))#candidate|328|(14, 16)|var|float32
var_329 = relay.var("var_329", dtype = "float32", shape = (14, 16))#candidate|329|(14, 16)|var|float32
output = func_325(var_326,var_327,var_328,var_329,)
func_330 = relay.Function([var_326,var_327,var_328,var_329,], output)
mutated_mod['func_330'] = func_330
mutated_mod = relay.transform.InferType()(mutated_mod)
var_332 = relay.var("var_332", dtype = "float32", shape = (1, 10))#candidate|332|(1, 10)|var|float32
var_333 = relay.var("var_333", dtype = "float32", shape = (10, 10))#candidate|333|(10, 10)|var|float32
bop_334 = relay.less(var_332.astype('bool'), var_333.astype('bool')) # shape=(10, 10)
bop_337 = relay.equal(bop_334.astype('bool'), relay.reshape(var_333.astype('bool'), relay.shape_of(bop_334))) # shape=(10, 10)
var_340 = relay.var("var_340", dtype = "float32", shape = (10, 10))#candidate|340|(10, 10)|var|float32
bop_341 = relay.logical_or(var_333.astype('bool'), relay.reshape(var_340.astype('bool'), relay.shape_of(var_333))) # shape=(10, 10)
func_325_call = mod.get_global_var('func_325')
func_330_call = mutated_mod.get_global_var('func_330')
var_345 = relay.var("var_345", dtype = "float64", shape = (224,))#candidate|345|(224,)|var|float64
call_344 = relay.TupleGetItem(func_325_call(relay.reshape(var_345.astype('float64'), [14, 16]), relay.reshape(var_345.astype('float32'), [14, 16]), relay.reshape(var_345.astype('float32'), [14, 16]), relay.reshape(var_345.astype('float32'), [14, 16]), ), 3)
call_346 = relay.TupleGetItem(func_330_call(relay.reshape(var_345.astype('float64'), [14, 16]), relay.reshape(var_345.astype('float32'), [14, 16]), relay.reshape(var_345.astype('float32'), [14, 16]), relay.reshape(var_345.astype('float32'), [14, 16]), ), 3)
uop_347 = relay.rsqrt(var_340.astype('float32')) # shape=(10, 10)
bop_349 = relay.bitwise_or(uop_347.astype('int16'), relay.reshape(bop_334.astype('int16'), relay.shape_of(uop_347))) # shape=(10, 10)
bop_352 = relay.floor_mod(bop_349.astype('float64'), relay.reshape(bop_341.astype('float64'), relay.shape_of(bop_349))) # shape=(10, 10)
var_355 = relay.var("var_355", dtype = "float32", shape = (10, 10))#candidate|355|(10, 10)|var|float32
bop_356 = relay.maximum(uop_347.astype('float32'), relay.reshape(var_355.astype('float32'), relay.shape_of(uop_347))) # shape=(10, 10)
var_359 = relay.var("var_359", dtype = "bool", shape = (14, 16))#candidate|359|(14, 16)|var|bool
bop_360 = relay.bitwise_or(call_344.astype('uint64'), relay.reshape(var_359.astype('uint64'), relay.shape_of(call_344))) # shape=(14, 16)
bop_363 = relay.bitwise_or(call_346.astype('uint64'), relay.reshape(var_359.astype('uint64'), relay.shape_of(call_346))) # shape=(14, 16)
bop_364 = relay.power(bop_337.astype('float32'), relay.reshape(bop_356.astype('float32'), relay.shape_of(bop_337))) # shape=(10, 10)
bop_367 = relay.bitwise_and(bop_364.astype('uint8'), relay.reshape(bop_352.astype('uint8'), relay.shape_of(bop_364))) # shape=(10, 10)
bop_370 = relay.less(bop_356.astype('bool'), relay.reshape(bop_352.astype('bool'), relay.shape_of(bop_356))) # shape=(10, 10)
uop_373 = relay.sqrt(var_359.astype('float64')) # shape=(14, 16)
const_375 = relay.const([[-3.393905,-4.487155,-4.895821,5.916535,-5.515248,8.913718,-8.672594,6.826896,-7.560780,8.452524],[-2.222956,-5.659368,3.112259,-7.016855,-7.817498,3.493654,-1.647406,-7.036850,-1.230410,-3.422473],[-2.594350,0.964048,-1.006138,7.546639,-4.175482,4.480349,8.280595,0.039894,6.792468,8.933185],[2.339897,-8.582668,9.960028,-8.681551,-7.205038,-6.728244,-8.560963,6.158852,-4.613778,-4.339388],[-1.873067,-1.371645,5.062463,-4.558928,7.121686,-5.458097,4.348808,-1.848594,9.881067,-0.919636],[-2.384443,3.949585,-7.524822,0.482477,8.096406,1.121221,-1.894146,9.719904,5.468390,-8.115384],[6.107678,-6.473433,5.459857,0.860391,2.316114,-9.084004,-1.468922,8.462343,-8.909954,-3.736275],[-6.327408,3.620304,6.493686,-6.051368,3.634661,0.203995,2.304243,7.476234,3.124266,-7.999585],[-0.222238,-5.488373,-2.629787,-7.798325,-3.443524,-4.722153,-9.243492,6.615530,-9.496410,4.380606],[-8.968354,-4.198071,-2.298258,-8.789514,1.125983,-8.020613,2.829809,-0.247539,-1.772203,9.920902]], dtype = "float32")#candidate|375|(10, 10)|const|float32
bop_376 = relay.greater_equal(var_333.astype('bool'), relay.reshape(const_375.astype('bool'), relay.shape_of(var_333))) # shape=(10, 10)
output = relay.Tuple([var_345,bop_360,bop_367,bop_370,uop_373,bop_376,])
output2 = relay.Tuple([var_345,bop_363,bop_367,bop_370,uop_373,bop_376,])
F = relay.Function([var_332,var_333,var_340,var_345,var_355,var_359,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_332,var_333,var_340,var_345,var_355,var_359,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_332= np.array([[2.525323,5.156698,-0.543017,4.840921,-7.666685,6.346318,0.739379,-1.723561,-1.201874,8.248956]], dtype='float32')
module1.set_input('var_332', input_332)
input_333= np.array([[0.490606,5.947630,-6.628921,-8.481416,-6.537005,2.758870,2.408377,6.277276,0.412448,-3.503332],[-5.569689,-9.564457,-1.637361,-1.460684,-4.842276,-6.226325,-7.882033,3.154166,-1.093776,-7.770715],[-6.689974,3.694656,7.906843,3.026475,4.173761,-1.967189,9.006445,-6.133260,0.860747,-2.226400],[-1.797385,2.229660,-7.125549,5.218327,-4.581688,9.720729,7.634508,-1.201446,3.131347,-2.585888],[-0.179715,5.001646,4.655589,2.026984,-5.359421,-8.885664,-3.535276,8.851698,9.131924,-0.744236],[8.623640,-8.449822,-7.056159,4.445703,-8.201056,-4.299274,-5.099448,6.719049,1.095381,-3.327981],[-5.601376,-2.401128,-8.599960,-4.731536,-8.791471,4.536730,-4.264803,6.151023,7.342452,4.450011],[-6.839256,-3.374583,5.841600,-0.925393,-7.098407,-7.274542,-1.010933,6.512114,7.671798,-3.232040],[-5.994036,1.730714,3.411607,8.217655,8.239300,-1.235895,2.573177,-1.704272,-8.645031,7.139646],[7.052036,-7.214776,4.898815,-2.484711,8.138442,-8.600820,-8.504796,-7.792305,-2.178335,-3.348367]], dtype='float32')
module1.set_input('var_333', input_333)
input_340= np.array([[-4.140205,5.905754,2.166939,-9.704454,7.257529,-1.137264,-4.898622,-0.424931,7.290212,-5.530040],[7.422916,-9.797584,-4.798810,8.611214,1.410797,-9.597261,-6.350793,5.608499,1.554242,-9.485081],[5.017247,7.639930,9.665874,2.543553,-2.617201,7.447784,6.260853,3.662952,-2.150052,-4.349934],[6.469581,-6.320560,7.605805,3.592903,1.342082,4.919047,1.624141,-0.294430,-5.941896,1.031294],[6.363712,-8.112769,-1.955497,-1.276083,-1.703372,-7.072057,2.867844,9.968837,-5.374066,0.744999],[-9.392985,9.762741,1.028485,-7.221025,6.286140,-9.631323,-4.429055,5.415483,5.977545,-0.057388],[6.001343,7.330618,3.295866,7.362097,6.341182,0.763269,0.912137,4.171469,2.097366,-1.249266],[9.415667,8.724348,7.942710,0.818155,3.688267,-7.834530,-3.777720,3.389161,-7.197191,-5.613215],[-3.883533,-1.657941,-9.291191,-9.825617,6.147368,-6.441050,-8.359102,9.292902,6.956296,-3.624946],[-1.322275,8.833360,-3.429878,-7.201541,9.070122,-7.471938,-9.454657,0.335042,7.497301,-1.757653]], dtype='float32')
module1.set_input('var_340', input_340)
input_345= np.array([-3.936987,7.202177,2.212833,-1.697866,1.273882,2.509522,7.236924,0.317029,1.796289,-0.371368,-7.052990,-4.282362,0.674604,3.835973,-6.796057,-2.677149,-6.775001,0.566896,-4.846359,-5.943271,-6.452696,7.395218,-7.827612,3.282315,-2.232642,-2.012459,-0.951837,8.565070,-9.554324,-9.123978,7.895375,6.033294,9.372227,6.840691,-2.229395,6.661616,0.436470,-3.979967,9.720484,3.157309,-1.866498,-0.689243,3.478621,-0.045942,-4.668756,-5.516379,0.921335,-0.861112,-3.253159,-6.380293,1.688314,2.512992,-4.558454,0.322366,6.861670,9.225160,-9.036917,-9.896635,-7.987592,-2.402831,-8.398787,-1.529591,-7.301402,-9.218210,-7.591545,-0.125272,-8.780984,-3.962698,8.992097,7.399049,-2.761643,-7.190278,-5.480467,-2.347577,-8.214626,-1.975877,1.927231,-5.750317,2.512404,-5.507255,-6.629517,5.012831,-6.843798,3.072257,0.021844,-0.742143,-5.427457,3.265541,-8.964309,9.460420,-0.422254,1.898702,-8.173080,4.438133,-7.110215,3.757171,-6.211452,8.588075,-1.744316,6.956302,3.477167,1.510500,-2.386523,6.304418,0.241488,9.839289,-7.090269,1.782760,5.793616,-4.615608,8.199404,-1.023042,-1.190546,-9.410639,-8.796101,4.493012,-0.400444,0.830192,9.500076,5.841302,1.997293,-7.229205,8.063939,-0.866846,-8.184139,-0.844738,-0.881926,-8.630627,-2.495310,5.565649,-7.735696,7.853378,-5.746971,5.004998,0.899190,-4.881729,-5.124628,-0.629320,-8.978868,-5.709489,6.125873,-2.524792,4.624409,-7.802415,-3.219795,-5.772282,-4.201362,8.056987,5.239902,-1.829277,7.044560,8.779163,7.000488,6.241471,6.888019,4.764398,-9.329033,-0.114006,-9.954825,4.860811,3.602647,3.451292,4.437451,-8.406613,6.793832,9.282052,9.361717,-9.274133,-6.005080,-2.029468,6.318425,-3.424734,-1.683966,5.128838,-2.186770,6.331493,9.320640,3.481863,2.433066,1.937533,7.060813,0.889653,4.123491,6.508123,6.775577,6.889899,0.937190,-8.482561,5.602706,-7.347405,-4.192332,9.248277,-8.632151,9.650552,-5.226056,7.216252,4.581012,-0.156414,-5.140184,0.304057,2.590322,4.051415,-2.746485,-7.402136,7.753805,6.974681,-4.669212,4.654045,-1.232977,-7.224260,7.184097,-4.116464,-8.276695,-3.885766,-6.415353,-3.211444,-6.065560,4.279411,6.847932,-5.419465,-0.379207,4.094281,-4.958628,-9.282100], dtype='float64')
module1.set_input('var_345', input_345)
input_355= np.array([[4.130347,0.432805,-8.513789,1.087399,-1.650118,9.276318,5.607712,0.041521,4.943215,6.744641],[-4.976960,-2.959758,5.238524,-6.645826,-4.870613,-4.247010,2.464775,8.888279,6.246638,7.372183],[-8.736513,8.114410,-9.996103,7.998777,6.197765,8.539196,3.627290,-0.757291,2.540544,-7.326479],[3.561955,2.555848,3.992436,-1.855935,9.076783,-8.534265,2.370753,-5.095791,-9.745344,9.940473],[-2.566761,-1.916584,-2.374078,-4.165808,8.785432,-4.239804,-4.040351,9.297068,-2.294127,-0.027972],[0.404939,6.127549,-5.727378,0.342677,6.297721,-5.547436,1.265968,6.146177,-6.014312,9.340399],[0.139865,-1.503552,9.749264,7.496868,-2.680347,5.553369,-4.908646,-0.802066,-7.645472,-8.283651],[-4.138739,7.021232,7.610438,-5.090443,6.074889,6.749365,0.978700,-1.717708,8.229080,-3.471774],[9.546520,-3.114389,-5.758612,0.395272,-8.907431,-0.854346,-7.347055,-5.886760,0.362006,4.824886],[-9.202480,7.431021,4.562894,-8.576039,3.874858,-9.714998,-3.795699,-4.557156,8.084894,-3.143200]], dtype='float32')
module1.set_input('var_355', input_355)
input_359= np.array([[False,True,True,False,False,True,False,False,False,True,True,True,False,False,True,True],[False,False,False,False,True,True,False,True,False,False,False,True,True,False,False,False],[True,False,False,False,True,True,False,False,False,False,True,False,False,False,True,False],[False,True,False,True,False,False,False,False,False,False,True,False,False,False,False,False],[False,False,False,True,True,False,True,True,False,False,True,True,False,False,True,True],[True,False,False,True,False,True,True,True,True,True,True,False,True,True,False,True],[True,False,False,True,False,False,False,True,False,False,False,True,False,True,False,False],[True,False,True,False,True,True,True,True,False,False,True,True,True,True,False,False],[True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,True],[False,False,True,False,True,False,True,True,False,False,False,True,True,False,False,False],[False,True,True,True,True,False,False,True,False,False,False,False,False,False,False,False],[False,True,False,True,False,True,False,False,True,False,False,False,False,False,False,True],[True,False,False,True,False,False,False,False,False,False,True,False,True,True,False,True],[False,True,True,False,False,True,True,False,False,True,False,False,True,True,True,False]], dtype='bool')
module1.set_input('var_359', input_359)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_332, input_333, input_340, input_345, input_355, input_359, )
res3 = intrp3.evaluate()(input_332, input_333, input_340, input_345, input_355, input_359, )
res4 = intrp4.evaluate()(input_332, input_333, input_340, input_345, input_355, input_359, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
module5.set_input('var_332', input_332)
module5.set_input('var_333', input_333)
module5.set_input('var_340', input_340)
module5.set_input('var_345', input_345)
module5.set_input('var_355', input_355)
module5.set_input('var_359', input_359)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_332, input_333, input_340, input_345, input_355, input_359, )
res7 = intrp7.evaluate()(input_332, input_333, input_340, input_345, input_355, input_359, )
res8 = intrp8.evaluate()(input_332, input_333, input_340, input_345, input_355, input_359, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
module9.set_input('var_332', input_332)
module9.set_input('var_333', input_333)
module9.set_input('var_340', input_340)
module9.set_input('var_345', input_345)
module9.set_input('var_355', input_355)
module9.set_input('var_359', input_359)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_332, input_333, input_340, input_345, input_355, input_359, )
res11 = intrp11.evaluate()(input_332, input_333, input_340, input_345, input_355, input_359, )
res12 = intrp12.evaluate()(input_332, input_333, input_340, input_345, input_355, input_359, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
module13.set_input('var_332', input_332)
module13.set_input('var_333', input_333)
module13.set_input('var_340', input_340)
module13.set_input('var_345', input_345)
module13.set_input('var_355', input_355)
module13.set_input('var_359', input_359)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_332, input_333, input_340, input_345, input_355, input_359, )
res15 = intrp15.evaluate()(input_332, input_333, input_340, input_345, input_355, input_359, )
res16 = intrp16.evaluate()(input_332, input_333, input_340, input_345, input_355, input_359, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
module17.set_input('var_332', input_332)
module17.set_input('var_333', input_333)
module17.set_input('var_340', input_340)
module17.set_input('var_345', input_345)
module17.set_input('var_355', input_355)
module17.set_input('var_359', input_359)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_332, input_333, input_340, input_345, input_355, input_359, )
res19 = intrp19.evaluate()(input_332, input_333, input_340, input_345, input_355, input_359, )
res20 = intrp20.evaluate()(input_332, input_333, input_340, input_345, input_355, input_359, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
module21.set_input('var_332', input_332)
module21.set_input('var_333', input_333)
module21.set_input('var_340', input_340)
module21.set_input('var_345', input_345)
module21.set_input('var_355', input_355)
module21.set_input('var_359', input_359)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_332, input_333, input_340, input_345, input_355, input_359, )
res23 = intrp23.evaluate()(input_332, input_333, input_340, input_345, input_355, input_359, )
res24 = intrp24.evaluate()(input_332, input_333, input_340, input_345, input_355, input_359, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()

'''104: TVMFuncCall
103: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
102: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
101: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
100: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
99: tvm::transform::Pass::operator()(tvm::IRModule) const
98: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
97: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
96: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
95: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
94: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
93: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
92: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
91: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
90: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
89: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
88: _ZN3tvm5relay16MixedModeMutato
87: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
86: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
85: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
84: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
83: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
82: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
81: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
80: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
79: _ZN3tvm5relay16MixedModeMutato
78: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
77: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
76: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
75: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
74: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
73: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
72: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
71: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
70: tvm::transform::Pass::operator()(tvm::IRModule) const
69: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
68: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
67: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
66: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
65: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
64: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
63: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
62: _ZN3tvm5relay16MixedModeMutato
61: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
60: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
59: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
58: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
57: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
56: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
55: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
54: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
53: _ZN3tvm5relay16MixedModeMutato
52: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
51: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
50: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
49: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
48: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
46: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''