import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (7, 4))#candidate|0|(7, 4)|var|float32
uop_1 = relay.tan(var_0.astype('float32')) # shape=(7, 4)
bop_3 = relay.multiply(uop_1.astype('uint32'), relay.reshape(var_0.astype('uint32'), relay.shape_of(uop_1))) # shape=(7, 4)
var_6 = relay.var("var_6", dtype = "uint32", shape = (7, 4))#candidate|6|(7, 4)|var|uint32
bop_7 = relay.equal(bop_3.astype('bool'), relay.reshape(var_6.astype('bool'), relay.shape_of(bop_3))) # shape=(7, 4)
bop_10 = relay.right_shift(uop_1.astype('uint8'), relay.reshape(var_6.astype('uint8'), relay.shape_of(uop_1))) # shape=(7, 4)
uop_13 = relay.sinh(var_6.astype('float32')) # shape=(7, 4)
bop_15 = relay.divide(bop_7.astype('float64'), relay.reshape(bop_10.astype('float64'), relay.shape_of(bop_7))) # shape=(7, 4)
var_18 = relay.var("var_18", dtype = "float32", shape = (7, 4))#candidate|18|(7, 4)|var|float32
bop_19 = relay.logical_and(var_0.astype('bool'), relay.reshape(var_18.astype('bool'), relay.shape_of(var_0))) # shape=(7, 4)
var_22 = relay.var("var_22", dtype = "bool", shape = (7, 4))#candidate|22|(7, 4)|var|bool
bop_23 = relay.floor_divide(bop_7.astype('float32'), relay.reshape(var_22.astype('float32'), relay.shape_of(bop_7))) # shape=(7, 4)
var_26 = relay.var("var_26", dtype = "bool", shape = (7, 4))#candidate|26|(7, 4)|var|bool
bop_27 = relay.multiply(bop_19.astype('int16'), relay.reshape(var_26.astype('int16'), relay.shape_of(bop_19))) # shape=(7, 4)
bop_30 = relay.floor_divide(var_26.astype('float32'), relay.reshape(bop_3.astype('float32'), relay.shape_of(var_26))) # shape=(7, 4)
uop_33 = relay.asin(bop_10.astype('float64')) # shape=(7, 4)
uop_35 = relay.acosh(var_0.astype('float32')) # shape=(7, 4)
bop_37 = relay.power(uop_33.astype('float64'), relay.reshape(bop_3.astype('float64'), relay.shape_of(uop_33))) # shape=(7, 4)
uop_40 = relay.sin(bop_37.astype('float64')) # shape=(7, 4)
uop_42 = relay.acosh(uop_33.astype('float64')) # shape=(7, 4)
bop_44 = relay.bitwise_and(bop_37.astype('int32'), relay.reshape(var_0.astype('int32'), relay.shape_of(bop_37))) # shape=(7, 4)
bop_47 = relay.logical_xor(bop_37.astype('uint32'), relay.reshape(bop_10.astype('uint32'), relay.shape_of(bop_37))) # shape=(7, 4)
bop_50 = relay.maximum(uop_42.astype('int8'), relay.reshape(uop_33.astype('int8'), relay.shape_of(uop_42))) # shape=(7, 4)
uop_53 = relay.exp(bop_47.astype('float32')) # shape=(7, 4)
var_55 = relay.var("var_55", dtype = "float64", shape = (7, 4))#candidate|55|(7, 4)|var|float64
bop_56 = relay.subtract(uop_33.astype('int8'), relay.reshape(var_55.astype('int8'), relay.shape_of(uop_33))) # shape=(7, 4)
var_59 = relay.var("var_59", dtype = "float32", shape = (7, 4))#candidate|59|(7, 4)|var|float32
bop_60 = relay.multiply(uop_1.astype('uint32'), relay.reshape(var_59.astype('uint32'), relay.shape_of(uop_1))) # shape=(7, 4)
bop_63 = relay.left_shift(bop_50.astype('uint8'), relay.reshape(uop_40.astype('uint8'), relay.shape_of(bop_50))) # shape=(7, 4)
bop_66 = relay.bitwise_xor(uop_53.astype('uint8'), relay.reshape(bop_44.astype('uint8'), relay.shape_of(uop_53))) # shape=(7, 4)
bop_69 = relay.logical_and(uop_53.astype('bool'), relay.reshape(bop_23.astype('bool'), relay.shape_of(uop_53))) # shape=(7, 4)
bop_72 = relay.less_equal(var_26.astype('bool'), relay.reshape(uop_13.astype('bool'), relay.shape_of(var_26))) # shape=(7, 4)
bop_75 = relay.logical_and(uop_53.astype('bool'), relay.reshape(var_18.astype('bool'), relay.shape_of(uop_53))) # shape=(7, 4)
bop_78 = relay.logical_xor(uop_33.astype('int64'), relay.reshape(bop_19.astype('int64'), relay.shape_of(uop_33))) # shape=(7, 4)
bop_81 = relay.bitwise_and(uop_1.astype('uint32'), relay.reshape(bop_75.astype('uint32'), relay.shape_of(uop_1))) # shape=(7, 4)
uop_84 = relay.sinh(bop_15.astype('float32')) # shape=(7, 4)
bop_86 = relay.bitwise_and(bop_69.astype('int32'), relay.reshape(bop_44.astype('int32'), relay.shape_of(bop_69))) # shape=(7, 4)
uop_89 = relay.asinh(bop_23.astype('float64')) # shape=(7, 4)
var_91 = relay.var("var_91", dtype = "uint32", shape = (7, 4))#candidate|91|(7, 4)|var|uint32
bop_92 = relay.multiply(bop_47.astype('int32'), relay.reshape(var_91.astype('int32'), relay.shape_of(bop_47))) # shape=(7, 4)
bop_95 = relay.subtract(bop_27.astype('float32'), relay.reshape(bop_19.astype('float32'), relay.shape_of(bop_27))) # shape=(7, 4)
var_98 = relay.var("var_98", dtype = "float32", shape = (7, 4))#candidate|98|(7, 4)|var|float32
bop_99 = relay.equal(uop_53.astype('bool'), relay.reshape(var_98.astype('bool'), relay.shape_of(uop_53))) # shape=(7, 4)
output = relay.Tuple([bop_30,uop_35,bop_56,bop_60,bop_63,bop_66,bop_72,bop_78,bop_81,uop_84,bop_86,uop_89,bop_92,bop_95,bop_99,])
output2 = relay.Tuple([bop_30,uop_35,bop_56,bop_60,bop_63,bop_66,bop_72,bop_78,bop_81,uop_84,bop_86,uop_89,bop_92,bop_95,bop_99,])
func_102 = relay.Function([var_0,var_6,var_18,var_22,var_26,var_55,var_59,var_91,var_98,], output)
mod['func_102'] = func_102
mod = relay.transform.InferType()(mod)
var_103 = relay.var("var_103", dtype = "float32", shape = (7, 4))#candidate|103|(7, 4)|var|float32
var_104 = relay.var("var_104", dtype = "uint32", shape = (7, 4))#candidate|104|(7, 4)|var|uint32
var_105 = relay.var("var_105", dtype = "float32", shape = (7, 4))#candidate|105|(7, 4)|var|float32
var_106 = relay.var("var_106", dtype = "bool", shape = (7, 4))#candidate|106|(7, 4)|var|bool
var_107 = relay.var("var_107", dtype = "bool", shape = (7, 4))#candidate|107|(7, 4)|var|bool
var_108 = relay.var("var_108", dtype = "float64", shape = (7, 4))#candidate|108|(7, 4)|var|float64
var_109 = relay.var("var_109", dtype = "float32", shape = (7, 4))#candidate|109|(7, 4)|var|float32
var_110 = relay.var("var_110", dtype = "uint32", shape = (7, 4))#candidate|110|(7, 4)|var|uint32
var_111 = relay.var("var_111", dtype = "float32", shape = (7, 4))#candidate|111|(7, 4)|var|float32
output = func_102(var_103,var_104,var_105,var_106,var_107,var_108,var_109,var_110,var_111,)
func_112 = relay.Function([var_103,var_104,var_105,var_106,var_107,var_108,var_109,var_110,var_111,], output)
mutated_mod['func_112'] = func_112
mutated_mod = relay.transform.InferType()(mutated_mod)
const_114 = relay.const([[[4.319048,6.493741,-2.476509,-1.070052,-3.292039,-3.059894],[-9.678052,-8.126939,-2.018652,-6.475728,6.959429,4.652239],[-8.745077,-4.397474,8.479048,9.970208,-5.762643,0.051070],[-1.045301,8.897674,3.508698,0.738319,7.549539,-2.248680],[-9.737079,-0.416913,5.419928,-4.558506,3.276098,-2.500391],[5.547031,9.930869,-9.364060,-3.401842,8.183038,7.379754]],[[3.479455,-1.633234,-0.123901,3.065097,2.988093,-9.032027],[8.555083,-9.252531,-1.920592,0.753840,-8.856222,4.631807],[-8.672261,7.490642,-8.742668,-1.660988,9.124469,-3.540662],[8.079294,-1.606412,5.141563,-8.991733,4.209933,1.899940],[0.176014,5.497403,8.408679,8.588251,-4.078956,5.917822],[7.331271,7.047679,-8.422488,9.036988,1.949087,-5.882786]],[[-1.038401,4.434758,4.057237,7.928239,2.482714,-8.784185],[-1.759466,-8.400465,-1.231694,6.862055,4.341878,-9.525013],[-9.977413,-5.779694,2.823795,-5.663327,9.721590,-6.584269],[-5.528264,5.243438,-7.299134,-5.012921,0.670377,-8.803534],[0.866946,-3.012639,-0.944674,-9.825030,-4.536826,-3.639002],[-6.975354,2.177573,-6.608838,-7.204162,-5.614091,-0.055778]],[[-3.004715,2.692649,-4.727851,6.050633,2.164378,-4.470285],[8.459500,-0.403946,4.891994,6.692460,0.148409,8.736784],[-9.862958,-5.985954,-6.504761,-4.491496,3.140069,-4.970587],[5.627487,0.754980,1.333445,-7.834311,5.108806,-7.021439],[5.886981,-3.851331,6.989289,-2.422128,1.439433,-8.643660],[2.921484,-2.505046,-6.894919,-5.575893,4.897010,-9.304090]],[[-2.550378,1.639555,1.353008,-1.022742,4.854811,3.513293],[8.020255,8.497454,-7.014874,-3.456028,-8.529023,-1.316297],[7.652510,-6.608350,6.123194,-1.025222,7.343653,2.625063],[7.711818,7.474802,-5.925806,2.386003,-7.119171,-9.586509],[-1.705766,-2.128745,-7.703573,6.833815,-8.182385,-5.102945],[-7.236705,5.836510,-3.162374,-3.735110,-2.253442,-4.404665]],[[-8.856474,-6.199071,-6.354278,9.257148,5.394164,1.552983],[1.654478,-0.878205,-7.335180,4.699029,8.248299,-8.089898],[5.528512,1.041034,-8.472054,-0.922804,-6.132880,0.506572],[0.223910,5.608280,0.152149,-6.187378,-1.111545,-9.234582],[1.850028,7.793379,-9.008114,-8.298431,1.607116,5.938457],[-9.002368,-9.916718,2.669097,8.912077,0.413040,4.055435]],[[-4.101759,5.417339,-9.591518,0.920902,4.680233,-9.517174],[1.817927,1.818924,7.736070,-8.608881,-0.340620,-7.837177],[6.546824,-4.449495,-0.685085,8.066698,-4.406510,6.415942],[-4.384946,-8.485826,-7.589052,0.323390,-3.179366,-7.784595],[2.219912,5.405782,7.009527,2.872112,0.613030,8.625649],[-0.291797,-4.506505,8.321301,8.190564,7.472046,7.635713]],[[7.493013,5.393459,0.088291,4.729942,-2.807995,-6.444807],[-5.330181,-1.460545,-6.029201,8.942422,-6.094596,6.802511],[-1.425480,1.187020,-0.378799,7.714017,3.318418,3.351286],[-2.224464,-0.196332,5.656580,-2.732260,-8.878234,-9.590732],[5.901002,3.848018,6.718462,7.811597,-3.628498,4.752607],[-4.093520,-5.099661,3.246359,-5.353827,-9.099797,2.598238]],[[-2.594522,3.999081,-1.676889,4.995236,7.448004,-8.899581],[5.077389,-4.341306,-2.063074,-6.451497,-3.545862,0.758331],[4.266713,4.629964,-9.321721,1.476625,4.166003,6.358792],[-0.803670,7.683088,-8.789033,1.915320,1.312388,1.123336],[3.849059,-5.540331,-1.418605,-2.466302,-3.706941,7.448377],[-2.254887,1.475821,8.607647,6.644122,3.005319,2.355529]],[[-7.293445,8.511390,1.749245,-8.052577,-2.528986,-8.644448],[-0.222139,-9.060973,2.335688,7.831009,5.401732,1.374766],[9.424282,-7.403481,6.302272,-0.956464,-8.285067,9.372086],[-7.241655,4.759963,8.863254,6.505142,-6.112205,-8.134269],[5.337190,9.910640,-2.046521,8.391209,2.878309,-1.837313],[-8.618837,2.169841,-0.355890,-4.666415,-1.645249,8.705018]],[[2.082549,0.102716,4.084950,5.439776,5.796287,1.559652],[8.840110,1.056383,-1.770734,4.779537,1.797420,-3.488471],[-7.349580,-9.241233,-0.571082,-0.523571,9.555474,4.567886],[7.697064,2.811439,8.913661,-4.117257,-6.490768,4.437353],[5.665057,9.474080,7.934826,-3.118805,-2.006466,-8.985544],[-7.844404,-6.665652,-7.686552,-9.679325,3.438134,-5.597221]],[[-4.800057,5.108996,5.106108,-8.575001,-8.042112,7.683395],[7.812776,2.332341,-4.045940,-3.529719,-6.182640,-0.531017],[-2.164030,-6.743683,7.163401,-9.938367,6.291768,-7.581245],[-1.468567,8.811176,-7.530331,8.764116,-9.248277,2.255903],[-9.012052,7.911924,-9.483179,-4.293467,4.804023,-9.309260],[5.974589,-3.765339,3.578770,1.608438,6.094421,-6.534832]],[[4.234648,6.954467,-6.909791,3.051055,-9.057486,1.106698],[-5.973426,3.241168,-2.474681,-5.025239,-9.843044,-6.435440],[3.469161,-9.030845,-1.585120,-6.734549,-6.683063,1.177537],[-3.983532,5.134009,4.088774,-0.140358,-1.244590,0.372288],[1.217575,4.134792,5.695957,3.924997,9.837992,6.463118],[-2.489687,-7.794912,-2.680040,8.723878,-3.883970,9.692585]],[[7.429081,5.073505,-9.520456,-7.393243,0.531876,8.262770],[2.392502,8.635770,-3.104803,-6.994731,3.146954,9.307378],[-2.151380,-4.965940,-1.290576,6.988687,9.817144,5.205430],[9.261361,-7.906366,8.633649,0.975589,-9.714030,-2.484736],[-9.896854,-2.995632,2.573493,1.601651,-2.785924,-1.853993],[1.478167,2.864272,-4.952360,-7.196627,-3.493237,-1.352413]],[[4.486159,8.177739,8.454727,-1.377270,-2.791657,3.791500],[3.712563,-2.001378,-9.278014,-3.801633,-2.741916,1.061083],[-8.524511,-7.895757,-8.438412,1.722160,2.259136,0.081337],[-3.748874,-6.815578,-0.583117,-7.620134,-4.206450,-8.728044],[4.350848,-6.977695,-5.966066,-4.723155,-7.776519,2.155217],[-2.438795,-1.503411,4.402503,-3.236983,0.096077,4.876906]]], dtype = "float32")#candidate|114|(15, 6, 6)|const|float32
var_115 = relay.var("var_115", dtype = "float32", shape = (15, 6, 6))#candidate|115|(15, 6, 6)|var|float32
bop_116 = relay.less(const_114.astype('bool'), relay.reshape(var_115.astype('bool'), relay.shape_of(const_114))) # shape=(15, 6, 6)
uop_119 = relay.cosh(var_115.astype('float64')) # shape=(15, 6, 6)
uop_121 = relay.log(uop_119.astype('float32')) # shape=(15, 6, 6)
uop_123 = relay.cos(uop_119.astype('float64')) # shape=(15, 6, 6)
uop_125 = relay.tan(uop_123.astype('float64')) # shape=(15, 6, 6)
uop_127 = relay.acos(uop_123.astype('float64')) # shape=(15, 6, 6)
uop_129 = relay.asin(uop_121.astype('float64')) # shape=(15, 6, 6)
uop_131 = relay.atan(uop_123.astype('float32')) # shape=(15, 6, 6)
uop_133 = relay.acos(uop_121.astype('float64')) # shape=(15, 6, 6)
bop_135 = relay.equal(uop_123.astype('bool'), relay.reshape(const_114.astype('bool'), relay.shape_of(uop_123))) # shape=(15, 6, 6)
uop_138 = relay.exp(uop_119.astype('float32')) # shape=(15, 6, 6)
bop_140 = relay.less(uop_121.astype('bool'), relay.reshape(bop_116.astype('bool'), relay.shape_of(uop_121))) # shape=(15, 6, 6)
uop_143 = relay.asinh(uop_131.astype('float64')) # shape=(15, 6, 6)
uop_145 = relay.log(uop_143.astype('float64')) # shape=(15, 6, 6)
var_147 = relay.var("var_147", dtype = "float64", shape = (15, 6, 6))#candidate|147|(15, 6, 6)|var|float64
bop_148 = relay.minimum(uop_145.astype('uint16'), relay.reshape(var_147.astype('uint16'), relay.shape_of(uop_145))) # shape=(15, 6, 6)
bop_151 = relay.right_shift(bop_148.astype('int32'), relay.reshape(uop_138.astype('int32'), relay.shape_of(bop_148))) # shape=(15, 6, 6)
uop_154 = relay.acosh(uop_125.astype('float64')) # shape=(15, 6, 6)
uop_156 = relay.tan(uop_143.astype('float32')) # shape=(15, 6, 6)
var_158 = relay.var("var_158", dtype = "float64", shape = (15, 6, 6))#candidate|158|(15, 6, 6)|var|float64
bop_159 = relay.less_equal(uop_154.astype('bool'), relay.reshape(var_158.astype('bool'), relay.shape_of(uop_154))) # shape=(15, 6, 6)
uop_162 = relay.log10(uop_145.astype('float64')) # shape=(15, 6, 6)
bop_164 = relay.maximum(uop_145.astype('uint64'), relay.reshape(bop_116.astype('uint64'), relay.shape_of(uop_145))) # shape=(15, 6, 6)
bop_167 = relay.subtract(uop_162.astype('int8'), relay.reshape(uop_129.astype('int8'), relay.shape_of(uop_162))) # shape=(15, 6, 6)
bop_170 = relay.floor_divide(uop_162.astype('float64'), relay.reshape(const_114.astype('float64'), relay.shape_of(uop_162))) # shape=(15, 6, 6)
const_173 = relay.const([[[3.204693,7.429041,7.801305,-9.464040,-7.872521,6.808267],[4.008803,8.178377,-4.848157,-8.421359,-5.423101,-0.732963],[-1.956178,-7.816506,-3.588177,7.305547,8.169673,-7.218700],[-2.628624,4.318010,-9.613535,5.680705,0.679649,5.581096],[-3.039003,6.572996,-8.766229,-1.821685,-8.292200,-5.095681],[-2.131624,-6.975538,-4.235189,-3.921114,-1.288690,-3.951454]],[[-1.180086,-7.830858,-9.276264,2.223538,4.652064,4.882372],[-9.843003,4.333723,7.642221,4.153052,1.305043,9.881823],[-1.154864,-5.792040,2.576207,0.459846,-6.069435,-8.185628],[-7.246435,6.878195,-2.429862,6.415924,-2.726146,0.648071],[5.368965,6.433158,-9.966005,-2.988876,-6.309473,2.198041],[5.591318,-8.843410,-8.755875,-1.182889,-7.742911,7.112263]],[[2.914237,-9.224390,2.453535,2.875453,-1.938257,4.856469],[9.825525,-0.462681,-2.026234,8.645508,-3.132522,-4.764148],[-9.508630,5.035499,-0.713153,4.310339,-9.417393,-1.780542],[7.577058,-4.354598,-0.052073,1.315538,4.107280,-8.795261],[3.192133,-8.805866,3.572558,3.208088,2.975840,-6.238941],[1.802239,8.542928,2.698403,7.650566,5.438700,8.600405]],[[6.590960,9.128518,-5.668288,-4.750798,-7.471175,7.755131],[5.125706,0.445300,-0.530043,0.458606,-4.032277,2.564233],[-6.933318,-6.487214,-4.845062,2.243636,-0.849305,-8.336732],[-0.753948,0.385951,0.721311,-8.695812,3.563100,-0.843202],[-0.888019,0.074098,-6.110877,-0.550953,0.457410,4.847612],[-7.655007,6.378772,9.997943,0.311176,-5.564420,-2.348248]],[[-9.320380,9.833759,7.929879,4.339446,0.427065,-5.692615],[6.611854,-5.418763,8.719084,-5.319228,-6.091685,2.268276],[0.556114,-5.589370,2.729197,-2.642976,9.663694,5.786483],[0.866993,-5.579308,9.244388,-2.313285,-1.971632,8.643614],[-6.915993,7.496488,8.246383,9.494359,-4.244673,-2.211477],[-0.243619,3.099528,-9.268042,-9.811607,1.917737,-4.914721]],[[6.204307,8.170159,3.351701,-1.442907,-3.813539,1.475122],[-3.185776,-2.886729,-1.848300,-5.518901,4.921860,-3.187581],[-6.502996,9.827845,-7.021394,-5.825474,7.046079,0.813848],[-3.721636,-7.678370,1.393805,-1.307645,-6.910621,-0.802991],[2.923047,-4.216543,-9.845361,3.423689,0.397769,-5.014632],[-4.010006,-3.682666,-9.999725,8.139824,2.292683,7.388848]],[[9.863611,-1.871701,5.123007,-4.607777,9.796124,7.098593],[4.257399,-7.773420,-3.208807,-1.652498,9.620379,-9.399622],[-1.446321,-8.834585,8.232396,4.772265,6.045593,2.649495],[-1.672449,7.127690,-7.458578,-6.068147,6.947448,-5.117893],[7.719152,5.006653,6.463875,3.745273,5.077723,7.554841],[2.229915,5.448283,-1.802319,8.901471,-6.775137,-6.324837]],[[-0.440109,-1.053858,9.248290,4.533433,-1.063409,8.231432],[-3.338681,0.439060,-9.630278,-7.994854,5.091931,-1.771066],[-5.985806,5.214894,5.432723,0.240910,-6.887013,3.790467],[7.820897,-9.757079,5.796970,4.513439,-2.638715,2.885833],[-8.484736,1.308805,2.065280,6.148470,8.640693,-6.515680],[0.152231,-3.211663,-6.388739,6.185104,-4.639194,3.407515]],[[-1.582310,5.956365,2.395144,4.041559,3.987629,-7.820400],[9.202295,-0.187001,-0.077464,0.325285,7.791794,7.664533],[9.960132,2.169106,-9.319181,-1.943284,9.528120,-9.775862],[-7.262608,-5.979104,-2.757970,2.211828,2.338086,-0.085258],[-3.533385,6.117132,-6.672015,5.422602,7.174823,4.464094],[8.536319,-3.773020,-8.660516,-5.981769,1.133797,-2.775357]],[[5.588362,3.724626,8.667401,-7.950664,5.035177,3.846903],[-4.357608,3.053251,8.500148,2.839779,-8.952201,-5.659417],[-6.072750,-6.122676,9.348254,9.222682,-3.487839,4.937383],[7.414212,3.168828,8.557535,-8.927476,-1.041311,-7.043707],[-2.191071,-6.201538,1.858991,1.520586,2.393539,1.504231],[-4.626949,9.138621,6.266981,1.206029,-9.766238,2.439993]],[[3.925700,3.077260,-7.089514,-0.307365,-7.816320,6.472943],[3.964938,2.330341,-3.155947,3.126863,-7.078545,7.033650],[-5.520049,-8.024569,-4.280980,-5.687623,7.313600,9.657130],[6.388206,-7.471782,-0.098737,-0.497995,7.544611,1.096577],[-2.833252,-2.453073,5.674861,5.647435,-3.251027,0.211303],[0.520483,9.191316,2.458179,-2.905623,-8.356190,-1.000369]],[[5.857373,-3.993322,2.365935,-5.490827,-5.651782,-4.282410],[4.821970,6.605997,4.336419,-7.136883,6.314837,6.528066],[-0.779206,0.212191,-8.730918,6.394171,-9.316513,-2.773695],[9.467931,-9.490606,-4.412146,-0.034263,-7.133557,7.874078],[-3.662266,-0.720770,9.910122,-8.351550,-4.714494,-1.669994],[-0.697894,-9.347850,7.987344,-0.698403,7.545647,7.751246]],[[6.640377,5.680179,3.151997,6.956730,-1.611027,4.110354],[7.366456,3.784490,-6.088200,-3.183171,-9.916743,1.355372],[-5.232914,-5.761286,-0.773170,8.740944,6.182600,8.004126],[2.097621,-9.982359,6.505523,-3.455140,-4.319453,-1.562314],[1.737284,2.685473,3.038378,-8.859356,-3.511465,5.443187],[-7.287872,-1.567849,-3.891701,-6.384556,-4.232420,6.927893]],[[9.320221,-4.968061,-5.816080,-1.742421,6.144368,3.260967],[-9.534751,-7.753042,-0.345617,-3.993082,-4.537061,6.622246],[-6.485097,6.814028,-2.388981,-1.461683,-9.418400,4.352475],[6.077865,-6.437904,8.663856,7.311658,8.372183,-1.826838],[-5.380176,-7.454148,1.930812,1.677360,-7.339911,-2.414561],[6.778633,-7.458842,9.759676,-3.445929,0.769688,-9.367302]],[[-0.194813,-1.769542,3.414451,-9.818212,5.475292,6.329837],[-7.074136,1.160626,7.834022,9.295982,-1.924571,-9.390985],[-7.830065,0.760371,3.427469,-3.820134,0.987193,-1.860671],[-9.401360,-3.995407,3.643128,-2.443745,-5.039621,-9.668165],[-3.924017,4.880932,9.816383,-7.948745,-0.843196,3.245450],[1.049376,-0.327233,4.140227,-5.155666,1.204541,8.001399]]], dtype = "float64")#candidate|173|(15, 6, 6)|const|float64
bop_174 = relay.logical_and(uop_162.astype('bool'), relay.reshape(const_173.astype('bool'), relay.shape_of(uop_162))) # shape=(15, 6, 6)
output = relay.Tuple([uop_127,uop_133,bop_135,bop_140,bop_151,uop_156,bop_159,bop_164,bop_167,bop_170,bop_174,])
output2 = relay.Tuple([uop_127,uop_133,bop_135,bop_140,bop_151,uop_156,bop_159,bop_164,bop_167,bop_170,bop_174,])
func_177 = relay.Function([var_115,var_147,var_158,], output)
mod['func_177'] = func_177
mod = relay.transform.InferType()(mod)
mutated_mod['func_177'] = func_177
mutated_mod = relay.transform.InferType()(mutated_mod)
func_177_call = mutated_mod.get_global_var('func_177')
var_179 = relay.var("var_179", dtype = "float32", shape = (15, 6, 6))#candidate|179|(15, 6, 6)|var|float32
var_180 = relay.var("var_180", dtype = "float64", shape = (15, 6, 6))#candidate|180|(15, 6, 6)|var|float64
var_181 = relay.var("var_181", dtype = "float64", shape = (15, 6, 6))#candidate|181|(15, 6, 6)|var|float64
call_178 = func_177_call(var_179,var_180,var_181,)
output = call_178
func_182 = relay.Function([var_179,var_180,var_181,], output)
mutated_mod['func_182'] = func_182
mutated_mod = relay.transform.InferType()(mutated_mod)
var_184 = relay.var("var_184", dtype = "uint8", shape = (11, 9))#candidate|184|(11, 9)|var|uint8
var_185 = relay.var("var_185", dtype = "uint8", shape = (11, 9))#candidate|185|(11, 9)|var|uint8
bop_186 = relay.less_equal(var_184.astype('bool'), relay.reshape(var_185.astype('bool'), relay.shape_of(var_184))) # shape=(11, 9)
uop_189 = relay.cos(var_184.astype('float32')) # shape=(11, 9)
uop_191 = relay.log10(uop_189.astype('float64')) # shape=(11, 9)
uop_193 = relay.log(var_185.astype('float32')) # shape=(11, 9)
uop_195 = relay.log2(uop_191.astype('float64')) # shape=(11, 9)
output = relay.Tuple([bop_186,uop_193,uop_195,])
output2 = relay.Tuple([bop_186,uop_193,uop_195,])
func_197 = relay.Function([var_184,var_185,], output)
mod['func_197'] = func_197
mod = relay.transform.InferType()(mod)
mutated_mod['func_197'] = func_197
mutated_mod = relay.transform.InferType()(mutated_mod)
func_197_call = mutated_mod.get_global_var('func_197')
var_199 = relay.var("var_199", dtype = "uint8", shape = (11, 9))#candidate|199|(11, 9)|var|uint8
var_200 = relay.var("var_200", dtype = "uint8", shape = (11, 9))#candidate|200|(11, 9)|var|uint8
call_198 = func_197_call(var_199,var_200,)
output = call_198
func_201 = relay.Function([var_199,var_200,], output)
mutated_mod['func_201'] = func_201
mutated_mod = relay.transform.InferType()(mutated_mod)
var_203 = relay.var("var_203", dtype = "float32", shape = (4, 12, 9))#candidate|203|(4, 12, 9)|var|float32
uop_204 = relay.atan(var_203.astype('float32')) # shape=(4, 12, 9)
uop_206 = relay.exp(uop_204.astype('float32')) # shape=(4, 12, 9)
func_102_call = mod.get_global_var('func_102')
func_112_call = mutated_mod.get_global_var('func_112')
const_209 = relay.const([9.641958,-8.730090,5.103018,8.343631,-7.556599,5.603175,-7.445745,9.812817,4.907733,5.343096,9.971567,-8.706297,-8.738170,4.555932,9.541762,5.049572,-0.509459,-8.651978,-0.507508,-5.437790,-7.912829,-1.157093,9.686961,5.543950,0.900239,-0.768438,5.854960,-8.234176], dtype = "float32")#candidate|209|(28,)|const|float32
call_208 = relay.TupleGetItem(func_102_call(relay.reshape(const_209.astype('float32'), [7, 4]), relay.reshape(const_209.astype('uint32'), [7, 4]), relay.reshape(const_209.astype('float32'), [7, 4]), relay.reshape(const_209.astype('bool'), [7, 4]), relay.reshape(const_209.astype('bool'), [7, 4]), relay.reshape(const_209.astype('float64'), [7, 4]), relay.reshape(const_209.astype('float32'), [7, 4]), relay.reshape(const_209.astype('uint32'), [7, 4]), relay.reshape(const_209.astype('float32'), [7, 4]), ), 10)
call_210 = relay.TupleGetItem(func_112_call(relay.reshape(const_209.astype('float32'), [7, 4]), relay.reshape(const_209.astype('uint32'), [7, 4]), relay.reshape(const_209.astype('float32'), [7, 4]), relay.reshape(const_209.astype('bool'), [7, 4]), relay.reshape(const_209.astype('bool'), [7, 4]), relay.reshape(const_209.astype('float64'), [7, 4]), relay.reshape(const_209.astype('float32'), [7, 4]), relay.reshape(const_209.astype('uint32'), [7, 4]), relay.reshape(const_209.astype('float32'), [7, 4]), ), 10)
bop_211 = relay.less(var_203.astype('bool'), relay.reshape(uop_206.astype('bool'), relay.shape_of(var_203))) # shape=(4, 12, 9)
bop_214 = relay.power(uop_204.astype('float32'), relay.reshape(uop_206.astype('float32'), relay.shape_of(uop_204))) # shape=(4, 12, 9)
func_197_call = mod.get_global_var('func_197')
func_201_call = mutated_mod.get_global_var('func_201')
const_218 = relay.const([4,-6,10,-8,-5,-9,-9,-4,1,-1,-8,2,2,2,-7,5,-3,-2,5,7,6,-6,-8,-7,8,-3,-2,8,4,2,-1,3,-8,-8,-6,2,8,6,-8,-8,-3,-3,-7,-1,-4,-2,-9,-8,9,-9,-10,8,9,-5,-9,3,5,8,-8,-3,-1,-5,10,-7,-1,6,9,1,-10,-5,1,-2,4,10,-1,2,8,4,5,6,10,-9,-8,7,9,8,1,-8,-1,7,-9,-6,10,-4,-3,-1,6,4,-10], dtype = "uint8")#candidate|218|(99,)|const|uint8
call_217 = relay.TupleGetItem(func_197_call(relay.reshape(const_218.astype('uint8'), [11, 9]), relay.reshape(const_218.astype('uint8'), [11, 9]), ), 1)
call_219 = relay.TupleGetItem(func_201_call(relay.reshape(const_218.astype('uint8'), [11, 9]), relay.reshape(const_218.astype('uint8'), [11, 9]), ), 1)
func_102_call = mod.get_global_var('func_102')
func_112_call = mutated_mod.get_global_var('func_112')
call_220 = relay.TupleGetItem(func_102_call(relay.reshape(const_209.astype('float32'), [7, 4]), relay.reshape(call_208.astype('uint32'), [7, 4]), relay.reshape(call_208.astype('float32'), [7, 4]), relay.reshape(call_208.astype('bool'), [7, 4]), relay.reshape(call_208.astype('bool'), [7, 4]), relay.reshape(const_209.astype('float64'), [7, 4]), relay.reshape(const_209.astype('float32'), [7, 4]), relay.reshape(call_208.astype('uint32'), [7, 4]), relay.reshape(const_209.astype('float32'), [7, 4]), ), 6)
call_221 = relay.TupleGetItem(func_112_call(relay.reshape(const_209.astype('float32'), [7, 4]), relay.reshape(call_208.astype('uint32'), [7, 4]), relay.reshape(call_208.astype('float32'), [7, 4]), relay.reshape(call_208.astype('bool'), [7, 4]), relay.reshape(call_208.astype('bool'), [7, 4]), relay.reshape(const_209.astype('float64'), [7, 4]), relay.reshape(const_209.astype('float32'), [7, 4]), relay.reshape(call_208.astype('uint32'), [7, 4]), relay.reshape(const_209.astype('float32'), [7, 4]), ), 6)
uop_222 = relay.tan(bop_214.astype('float64')) # shape=(4, 12, 9)
output = relay.Tuple([call_208,const_209,bop_211,call_217,const_218,call_220,uop_222,])
output2 = relay.Tuple([call_210,const_209,bop_211,call_219,const_218,call_221,uop_222,])
func_224 = relay.Function([var_203,], output)
mod['func_224'] = func_224
mod = relay.transform.InferType()(mod)
mutated_mod['func_224'] = func_224
mutated_mod = relay.transform.InferType()(mutated_mod)
var_225 = relay.var("var_225", dtype = "float32", shape = (4, 12, 9))#candidate|225|(4, 12, 9)|var|float32
func_224_call = mutated_mod.get_global_var('func_224')
call_226 = func_224_call(var_225)
output = call_226
func_227 = relay.Function([var_225], output)
mutated_mod['func_227'] = func_227
mutated_mod = relay.transform.InferType()(mutated_mod)
var_229 = relay.var("var_229", dtype = "bool", shape = ())#candidate|229|()|var|bool
const_230 = relay.const([False,True,True,True,False,True,True], dtype = "bool")#candidate|230|(7,)|const|bool
bop_231 = relay.logical_and(var_229.astype('bool'), const_230.astype('bool')) # shape=(7,)
bop_234 = relay.subtract(var_229.astype('uint64'), const_230.astype('uint64')) # shape=(7,)
bop_237 = relay.less_equal(var_229.astype('bool'), const_230.astype('bool')) # shape=(7,)
bop_240 = relay.multiply(bop_237.astype('int8'), relay.reshape(bop_231.astype('int8'), relay.shape_of(bop_237))) # shape=(7,)
const_243 = relay.const([False,False,True,True,False,False,False], dtype = "bool")#candidate|243|(7,)|const|bool
bop_244 = relay.bitwise_xor(bop_237.astype('uint64'), relay.reshape(const_243.astype('uint64'), relay.shape_of(bop_237))) # shape=(7,)
bop_247 = relay.greater(bop_234.astype('bool'), relay.reshape(const_243.astype('bool'), relay.shape_of(bop_234))) # shape=(7,)
bop_250 = relay.not_equal(bop_231.astype('bool'), relay.reshape(bop_237.astype('bool'), relay.shape_of(bop_231))) # shape=(7,)
uop_253 = relay.log10(const_230.astype('float64')) # shape=(7,)
bop_255 = relay.mod(uop_253.astype('float64'), var_229.astype('float64')) # shape=(7,)
uop_258 = relay.asin(bop_237.astype('float32')) # shape=(7,)
uop_260 = relay.sigmoid(uop_258.astype('float32')) # shape=(7,)
bop_262 = relay.floor_mod(bop_234.astype('float32'), relay.reshape(bop_244.astype('float32'), relay.shape_of(bop_234))) # shape=(7,)
const_265 = relay.const([2,-5,-10,-8,5,-6,-3], dtype = "uint64")#candidate|265|(7,)|const|uint64
bop_266 = relay.bitwise_and(bop_234.astype('int32'), relay.reshape(const_265.astype('int32'), relay.shape_of(bop_234))) # shape=(7,)
bop_269 = relay.less(uop_260.astype('bool'), relay.reshape(bop_255.astype('bool'), relay.shape_of(uop_260))) # shape=(7,)
func_102_call = mod.get_global_var('func_102')
func_112_call = mutated_mod.get_global_var('func_112')
const_273 = relay.const([3.516207,-3.212702,8.869020,8.612416,3.292079,3.657345,7.322098,2.394932,-4.135370,-3.559995,-0.377621,8.418927,-8.122738,7.470690,0.773732,8.010031,-0.144192,6.975740,7.200570,4.362663,-3.615344,-2.429109,7.529283,7.188735,4.826113,2.367908,4.094596,6.942164], dtype = "float32")#candidate|273|(28,)|const|float32
call_272 = relay.TupleGetItem(func_102_call(relay.reshape(const_273.astype('float32'), [7, 4]), relay.reshape(const_273.astype('uint32'), [7, 4]), relay.reshape(const_273.astype('float32'), [7, 4]), relay.reshape(const_273.astype('bool'), [7, 4]), relay.reshape(const_273.astype('bool'), [7, 4]), relay.reshape(const_273.astype('float64'), [7, 4]), relay.reshape(const_273.astype('float32'), [7, 4]), relay.reshape(const_273.astype('uint32'), [7, 4]), relay.reshape(const_273.astype('float32'), [7, 4]), ), 9)
call_274 = relay.TupleGetItem(func_112_call(relay.reshape(const_273.astype('float32'), [7, 4]), relay.reshape(const_273.astype('uint32'), [7, 4]), relay.reshape(const_273.astype('float32'), [7, 4]), relay.reshape(const_273.astype('bool'), [7, 4]), relay.reshape(const_273.astype('bool'), [7, 4]), relay.reshape(const_273.astype('float64'), [7, 4]), relay.reshape(const_273.astype('float32'), [7, 4]), relay.reshape(const_273.astype('uint32'), [7, 4]), relay.reshape(const_273.astype('float32'), [7, 4]), ), 9)
const_275 = relay.const([8.314626,-9.772496,3.945257,1.118002,5.137378,-8.051403,-8.458466], dtype = "float32")#candidate|275|(7,)|const|float32
bop_276 = relay.not_equal(uop_258.astype('bool'), relay.reshape(const_275.astype('bool'), relay.shape_of(uop_258))) # shape=(7,)
uop_279 = relay.exp(bop_276.astype('float64')) # shape=(7,)
uop_281 = relay.erf(uop_279.astype('float64')) # shape=(7,)
uop_283 = relay.cosh(uop_279.astype('float32')) # shape=(7,)
uop_285 = relay.acosh(bop_255.astype('float64')) # shape=(7,)
bop_287 = relay.maximum(uop_279.astype('int32'), relay.reshape(bop_237.astype('int32'), relay.shape_of(uop_279))) # shape=(7,)
uop_290 = relay.sqrt(uop_281.astype('float64')) # shape=(7,)
uop_292 = relay.acos(uop_290.astype('float64')) # shape=(7,)
func_102_call = mod.get_global_var('func_102')
func_112_call = mutated_mod.get_global_var('func_112')
call_294 = relay.TupleGetItem(func_102_call(relay.reshape(call_272.astype('float32'), [7, 4]), relay.reshape(call_272.astype('uint32'), [7, 4]), relay.reshape(const_273.astype('float32'), [7, 4]), relay.reshape(const_273.astype('bool'), [7, 4]), relay.reshape(call_272.astype('bool'), [7, 4]), relay.reshape(call_272.astype('float64'), [7, 4]), relay.reshape(call_272.astype('float32'), [7, 4]), relay.reshape(const_273.astype('uint32'), [7, 4]), relay.reshape(call_272.astype('float32'), [7, 4]), ), 9)
call_295 = relay.TupleGetItem(func_112_call(relay.reshape(call_272.astype('float32'), [7, 4]), relay.reshape(call_272.astype('uint32'), [7, 4]), relay.reshape(const_273.astype('float32'), [7, 4]), relay.reshape(const_273.astype('bool'), [7, 4]), relay.reshape(call_272.astype('bool'), [7, 4]), relay.reshape(call_272.astype('float64'), [7, 4]), relay.reshape(call_272.astype('float32'), [7, 4]), relay.reshape(const_273.astype('uint32'), [7, 4]), relay.reshape(call_272.astype('float32'), [7, 4]), ), 9)
uop_296 = relay.tan(uop_290.astype('float64')) # shape=(7,)
bop_298 = relay.equal(uop_296.astype('bool'), relay.reshape(uop_292.astype('bool'), relay.shape_of(uop_296))) # shape=(7,)
output = relay.Tuple([bop_240,bop_247,bop_250,bop_262,bop_266,bop_269,call_272,const_273,uop_283,uop_285,bop_287,call_294,bop_298,])
output2 = relay.Tuple([bop_240,bop_247,bop_250,bop_262,bop_266,bop_269,call_274,const_273,uop_283,uop_285,bop_287,call_295,bop_298,])
func_301 = relay.Function([var_229,], output)
mod['func_301'] = func_301
mod = relay.transform.InferType()(mod)
var_302 = relay.var("var_302", dtype = "bool", shape = ())#candidate|302|()|var|bool
output = func_301(var_302)
func_303 = relay.Function([var_302], output)
mutated_mod['func_303'] = func_303
mutated_mod = relay.transform.InferType()(mutated_mod)
const_305 = relay.const([[3.994178,0.794405,-0.053055,3.481863,-5.044740,1.851242,1.734922],[-1.549696,-8.086198,-6.415732,1.661821,4.007028,7.244693,0.676209],[1.313244,-1.029040,7.052183,0.451765,1.121322,-3.676714,-7.773356],[9.743911,-6.978875,-5.499605,-0.301185,1.691026,-4.589482,-8.222988],[-5.635075,-0.744492,0.978503,-4.621730,-4.570454,-8.676187,-2.606627],[7.913418,-3.352215,-2.708908,-2.001146,0.894646,3.200546,3.804966],[9.872401,9.611425,6.060373,-1.490185,8.875875,4.357155,-7.889625],[4.427440,-2.153893,7.700546,8.425901,-8.509281,5.878528,5.636157],[-4.720414,-5.200296,-2.357090,3.287904,-3.659568,-8.673516,-7.242317],[6.641200,7.296261,-4.122512,-1.437453,-6.691434,0.413510,2.522163],[5.974079,-1.303357,8.368398,5.809709,-0.262713,3.270500,-3.464772],[-6.666664,-7.460304,0.764085,-2.653535,7.896522,-7.376548,9.765205],[-0.695534,-3.877096,5.037132,2.411030,2.275357,-5.176097,5.015245],[-7.140889,-1.510222,6.613046,7.634838,-9.317310,-5.353756,-7.955878]], dtype = "float64")#candidate|305|(14, 7)|const|float64
uop_306 = relay.tan(const_305.astype('float64')) # shape=(14, 7)
uop_308 = relay.sinh(uop_306.astype('float32')) # shape=(14, 7)
uop_310 = relay.tan(uop_308.astype('float32')) # shape=(14, 7)
uop_312 = relay.tan(uop_306.astype('float32')) # shape=(14, 7)
uop_314 = relay.cos(uop_312.astype('float64')) # shape=(14, 7)
bop_316 = relay.add(uop_310.astype('uint16'), relay.reshape(const_305.astype('uint16'), relay.shape_of(uop_310))) # shape=(14, 7)
uop_319 = relay.cos(uop_308.astype('float32')) # shape=(14, 7)
uop_321 = relay.rsqrt(bop_316.astype('float32')) # shape=(14, 7)
output = relay.Tuple([uop_314,uop_319,uop_321,])
output2 = relay.Tuple([uop_314,uop_319,uop_321,])
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()()
res3 = intrp3.evaluate()()
res4 = intrp4.evaluate()()
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()()
res7 = intrp7.evaluate()()
res8 = intrp8.evaluate()()
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()()
res11 = intrp11.evaluate()()
res12 = intrp12.evaluate()()
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()()
res15 = intrp15.evaluate()()
res16 = intrp16.evaluate()()
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()()
res19 = intrp19.evaluate()()
res20 = intrp20.evaluate()()
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()()
res23 = intrp23.evaluate()()
res24 = intrp24.evaluate()()
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()

'''9: TVMFuncCall
8: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::transform::Pass, tvm::IRModule)>::AssignTypedLambda<tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}>(tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
7: tvm::transform::Pass::operator()(tvm::IRModule) const
6: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::LazyGradientInit(tvm::RelayExpr const&, tvm::IRModule)
0: tvm::relay::CheckFeature(tvm::RelayExpr const&, tvm::relay::FeatureSet const&)

'''