import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = ())#candidate|0|()|var|float32
uop_1 = relay.log10(var_0.astype('float32')) # shape=()
bop_3 = relay.less(var_0.astype('bool'), uop_1.astype('bool')) # shape=()
uop_6 = relay.exp(bop_3.astype('float64')) # shape=()
uop_8 = relay.sigmoid(uop_1.astype('float32')) # shape=()
bop_10 = relay.bitwise_or(uop_1.astype('uint64'), bop_3.astype('uint64')) # shape=()
output = relay.Tuple([uop_6,uop_8,bop_10,])
output2 = relay.Tuple([uop_6,uop_8,bop_10,])
func_13 = relay.Function([var_0,], output)
mod['func_13'] = func_13
mod = relay.transform.InferType()(mod)
mutated_mod['func_13'] = func_13
mutated_mod = relay.transform.InferType()(mutated_mod)
var_14 = relay.var("var_14", dtype = "float32", shape = ())#candidate|14|()|var|float32
func_13_call = mutated_mod.get_global_var('func_13')
call_15 = func_13_call(var_14)
output = call_15
func_16 = relay.Function([var_14], output)
mutated_mod['func_16'] = func_16
mutated_mod = relay.transform.InferType()(mutated_mod)
var_18 = relay.var("var_18", dtype = "uint8", shape = (2, 13, 5))#candidate|18|(2, 13, 5)|var|uint8
const_19 = relay.const([[[10,8,-1,2,-6],[-6,9,9,8,7],[-1,-2,9,-6,1],[-6,3,6,-10,7],[-3,8,-2,-3,-7],[8,1,-8,7,3],[-8,-1,-2,7,5],[7,-9,-2,-4,-5],[7,-2,3,-1,6],[10,-2,4,-8,-5],[7,3,-10,10,9],[-8,9,5,10,4],[-9,-9,-7,-4,-4]],[[-2,-4,10,1,2],[7,8,-10,8,8],[-7,8,9,-6,2],[5,-4,8,-5,-6],[-9,-4,1,-10,5],[2,-7,5,6,1],[5,2,5,3,-7],[6,4,-2,6,-5],[-2,-1,7,-4,-9],[-3,-1,4,-4,-7],[-8,6,-4,6,-2],[1,5,-10,-9,-7],[1,3,-4,-9,3]]], dtype = "uint8")#candidate|19|(2, 13, 5)|const|uint8
bop_20 = relay.less(var_18.astype('bool'), relay.reshape(const_19.astype('bool'), relay.shape_of(var_18))) # shape=(2, 13, 5)
var_23 = relay.var("var_23", dtype = "uint8", shape = (2, 13, 5))#candidate|23|(2, 13, 5)|var|uint8
bop_24 = relay.minimum(const_19.astype('uint16'), relay.reshape(var_23.astype('uint16'), relay.shape_of(const_19))) # shape=(2, 13, 5)
func_13_call = mod.get_global_var('func_13')
func_16_call = mutated_mod.get_global_var('func_16')
var_28 = relay.var("var_28", dtype = "float32", shape = ())#candidate|28|()|var|float32
call_27 = relay.TupleGetItem(func_13_call(relay.reshape(var_28.astype('float32'), [])), 0)
call_29 = relay.TupleGetItem(func_16_call(relay.reshape(var_28.astype('float32'), [])), 0)
uop_30 = relay.cos(const_19.astype('float64')) # shape=(2, 13, 5)
uop_32 = relay.sin(uop_30.astype('float32')) # shape=(2, 13, 5)
uop_34 = relay.sin(uop_30.astype('float32')) # shape=(2, 13, 5)
func_13_call = mod.get_global_var('func_13')
func_16_call = mutated_mod.get_global_var('func_16')
call_36 = relay.TupleGetItem(func_13_call(relay.reshape(call_27.astype('float32'), [])), 0)
call_37 = relay.TupleGetItem(func_16_call(relay.reshape(call_27.astype('float32'), [])), 0)
const_38 = relay.const(8.959826, dtype = "float32")#candidate|38|()|const|float32
bop_39 = relay.power(var_28.astype('float64'), const_38.astype('float64')) # shape=()
bop_42 = relay.left_shift(const_19.astype('int16'), var_28.astype('int16')) # shape=(2, 13, 5)
uop_45 = relay.exp(uop_34.astype('float64')) # shape=(2, 13, 5)
var_47 = relay.var("var_47", dtype = "float64", shape = (2, 13, 5))#candidate|47|(2, 13, 5)|var|float64
bop_48 = relay.minimum(uop_30.astype('uint16'), relay.reshape(var_47.astype('uint16'), relay.shape_of(uop_30))) # shape=(2, 13, 5)
bop_51 = relay.right_shift(uop_45.astype('int16'), relay.reshape(bop_42.astype('int16'), relay.shape_of(uop_45))) # shape=(2, 13, 5)
const_54 = relay.const([[[7.839596,8.916861,2.795883,-4.026687,0.572619],[7.558661,2.425685,-7.667073,-6.622373,3.391028],[5.121091,-7.915073,3.438974,-6.493089,-0.200576],[-4.431816,-8.148451,2.965587,-4.183421,1.593840],[7.028747,1.684890,-2.501323,3.451392,9.665845],[7.363134,-6.609165,0.470431,9.834913,6.914935],[-0.893376,7.418075,4.872616,-5.352559,3.333634],[-4.318423,-8.174252,9.849500,6.270188,2.809809],[0.985547,7.496992,-0.257600,6.330202,-9.201219],[3.056650,-8.764905,-8.060192,6.281341,-8.276117],[-3.758617,-7.112319,-9.992640,-9.796494,-5.863653],[0.987865,-0.582614,0.288663,6.571420,-5.293437],[-4.109980,-4.408654,0.054169,-1.577611,6.417698]],[[4.321828,1.896976,-6.321748,2.074556,3.594181],[9.189607,0.838976,-8.232939,-1.225638,9.969847],[3.086564,1.335668,-2.594549,-5.173055,7.689172],[4.077560,-2.119506,-5.799964,0.820601,6.899785],[7.724821,1.716295,-6.213230,-6.016986,7.655248],[4.900111,2.341401,7.057850,6.124866,-6.871260],[3.560958,3.515877,2.598142,1.516257,6.537351],[5.307249,5.935636,0.783708,-0.156303,-9.412869],[6.330977,1.487714,-2.708619,7.015193,-8.260065],[7.495160,7.739540,3.083567,-8.932129,3.983734],[1.663318,5.056862,1.019088,-0.289773,-4.089822],[-0.044137,0.214523,-2.839267,-8.952605,5.458476],[6.914600,-4.711326,-0.371084,8.983362,-3.831917]]], dtype = "float64")#candidate|54|(2, 13, 5)|const|float64
bop_55 = relay.bitwise_xor(uop_45.astype('uint64'), relay.reshape(const_54.astype('uint64'), relay.shape_of(uop_45))) # shape=(2, 13, 5)
bop_58 = relay.multiply(uop_32.astype('int32'), relay.reshape(bop_55.astype('int32'), relay.shape_of(uop_32))) # shape=(2, 13, 5)
bop_61 = relay.greater_equal(var_18.astype('bool'), var_28.astype('bool')) # shape=(2, 13, 5)
bop_64 = relay.left_shift(bop_42.astype('int64'), relay.reshape(uop_45.astype('int64'), relay.shape_of(bop_42))) # shape=(2, 13, 5)
func_13_call = mod.get_global_var('func_13')
func_16_call = mutated_mod.get_global_var('func_16')
call_67 = relay.TupleGetItem(func_13_call(relay.reshape(call_36.astype('float32'), [])), 2)
call_68 = relay.TupleGetItem(func_16_call(relay.reshape(call_36.astype('float32'), [])), 2)
const_69 = relay.const([[[3.879256,-6.312271,2.017724,-0.235905,3.963097],[-5.846204,2.605002,7.457937,-8.113691,5.152465],[-2.372268,-5.045317,6.965191,-7.563810,7.769950],[1.976471,-9.300964,-7.123329,-5.859307,0.594322],[-9.902471,-3.966097,0.739489,3.826497,8.582438],[-5.518121,9.357819,-3.952933,4.494028,4.949902],[-7.990002,-6.688875,-3.058338,-1.934657,5.258169],[-0.314922,9.947962,6.845754,9.006501,-7.626538],[-1.393225,-1.477442,-5.881519,-5.738530,0.570713],[-0.118662,5.913025,-2.462659,5.080940,-1.272954],[-0.762713,3.104877,-3.068293,-8.606246,7.986431],[-0.708405,-8.148241,-9.673655,0.318769,-6.922049],[-4.883083,-1.565393,2.733379,1.855873,8.684702]],[[-5.020897,5.190105,-5.963790,-2.045711,1.978435],[8.206331,2.025007,-7.062190,-6.454004,1.465534],[0.114276,-8.376223,5.655666,-3.587631,-5.251133],[-1.087762,-5.143669,-5.041677,9.548572,2.838682],[1.054476,-5.349092,-6.062659,-1.333579,-7.062531],[-4.232430,3.203884,8.089308,-7.172567,0.994511],[-6.629227,1.808185,7.981962,1.323544,0.641694],[7.220964,7.345143,1.745701,4.981854,5.468050],[8.299540,0.780779,-3.714898,9.556089,-9.652650],[8.994114,8.046950,2.456573,8.748351,6.318731],[-7.978807,7.052954,6.651438,3.677264,-7.414469],[-8.240992,-2.845264,-2.796642,4.869287,-2.448792],[-1.409413,-3.944076,-1.111751,3.857684,-3.286046]]], dtype = "float32")#candidate|69|(2, 13, 5)|const|float32
bop_70 = relay.floor_divide(uop_34.astype('float64'), relay.reshape(const_69.astype('float64'), relay.shape_of(uop_34))) # shape=(2, 13, 5)
bop_73 = relay.maximum(bop_55.astype('uint8'), relay.reshape(uop_45.astype('uint8'), relay.shape_of(bop_55))) # shape=(2, 13, 5)
bop_76 = relay.right_shift(bop_58.astype('int64'), relay.reshape(bop_73.astype('int64'), relay.shape_of(bop_58))) # shape=(2, 13, 5)
uop_79 = relay.acos(uop_45.astype('float32')) # shape=(2, 13, 5)
uop_81 = relay.asin(uop_79.astype('float32')) # shape=(2, 13, 5)
var_83 = relay.var("var_83", dtype = "float32", shape = (2, 13, 5))#candidate|83|(2, 13, 5)|var|float32
bop_84 = relay.not_equal(uop_79.astype('bool'), relay.reshape(var_83.astype('bool'), relay.shape_of(uop_79))) # shape=(2, 13, 5)
var_87 = relay.var("var_87", dtype = "float32", shape = (2, 13, 5))#candidate|87|(2, 13, 5)|var|float32
bop_88 = relay.greater(uop_79.astype('bool'), relay.reshape(var_87.astype('bool'), relay.shape_of(uop_79))) # shape=(2, 13, 5)
uop_91 = relay.asinh(uop_81.astype('float32')) # shape=(2, 13, 5)
bop_93 = relay.greater_equal(uop_81.astype('bool'), var_28.astype('bool')) # shape=(2, 13, 5)
output = relay.Tuple([bop_20,bop_24,call_27,call_36,bop_39,bop_48,bop_51,bop_61,bop_64,call_67,bop_70,bop_76,bop_84,bop_88,uop_91,bop_93,])
output2 = relay.Tuple([bop_20,bop_24,call_29,call_37,bop_39,bop_48,bop_51,bop_61,bop_64,call_68,bop_70,bop_76,bop_84,bop_88,uop_91,bop_93,])
func_96 = relay.Function([var_18,var_23,var_28,var_47,var_83,var_87,], output)
mod['func_96'] = func_96
mod = relay.transform.InferType()(mod)
mutated_mod['func_96'] = func_96
mutated_mod = relay.transform.InferType()(mutated_mod)
func_96_call = mutated_mod.get_global_var('func_96')
var_98 = relay.var("var_98", dtype = "uint8", shape = (2, 13, 5))#candidate|98|(2, 13, 5)|var|uint8
var_99 = relay.var("var_99", dtype = "uint8", shape = (2, 13, 5))#candidate|99|(2, 13, 5)|var|uint8
var_100 = relay.var("var_100", dtype = "float32", shape = ())#candidate|100|()|var|float32
var_101 = relay.var("var_101", dtype = "float64", shape = (2, 13, 5))#candidate|101|(2, 13, 5)|var|float64
var_102 = relay.var("var_102", dtype = "float32", shape = (2, 13, 5))#candidate|102|(2, 13, 5)|var|float32
var_103 = relay.var("var_103", dtype = "float32", shape = (2, 13, 5))#candidate|103|(2, 13, 5)|var|float32
call_97 = func_96_call(var_98,var_99,var_100,var_101,var_102,var_103,)
output = call_97
func_104 = relay.Function([var_98,var_99,var_100,var_101,var_102,var_103,], output)
mutated_mod['func_104'] = func_104
mutated_mod = relay.transform.InferType()(mutated_mod)
const_106 = relay.const([[[True,False,False,True,False,False,True,False,True,False],[False,False,False,False,True,True,False,False,False,False],[False,False,False,False,True,False,True,False,False,True],[False,True,True,True,False,True,True,True,True,False],[True,True,True,True,False,False,True,False,False,True]],[[True,False,False,True,True,True,True,False,False,True],[True,False,False,True,True,True,False,True,False,False],[True,False,True,False,True,True,False,False,False,True],[False,True,True,False,False,False,True,True,True,True],[False,False,False,False,True,True,True,False,False,False]]], dtype = "bool")#candidate|106|(2, 5, 10)|const|bool
var_107 = relay.var("var_107", dtype = "bool", shape = (2, 5, 10))#candidate|107|(2, 5, 10)|var|bool
bop_108 = relay.logical_or(const_106.astype('bool'), relay.reshape(var_107.astype('bool'), relay.shape_of(const_106))) # shape=(2, 5, 10)
uop_111 = relay.sigmoid(bop_108.astype('float32')) # shape=(2, 5, 10)
func_13_call = mod.get_global_var('func_13')
func_16_call = mutated_mod.get_global_var('func_16')
const_114 = relay.const(4.019687, dtype = "float32")#candidate|114|()|const|float32
call_113 = relay.TupleGetItem(func_13_call(relay.reshape(const_114.astype('float32'), [])), 1)
call_115 = relay.TupleGetItem(func_16_call(relay.reshape(const_114.astype('float32'), [])), 1)
bop_116 = relay.floor_divide(uop_111.astype('float32'), const_114.astype('float32')) # shape=(2, 5, 10)
uop_119 = relay.atanh(bop_116.astype('float32')) # shape=(2, 5, 10)
var_121 = relay.var("var_121", dtype = "float32", shape = (2, 5, 10))#candidate|121|(2, 5, 10)|var|float32
bop_122 = relay.maximum(bop_116.astype('int32'), relay.reshape(var_121.astype('int32'), relay.shape_of(bop_116))) # shape=(2, 5, 10)
bop_125 = relay.greater_equal(uop_119.astype('bool'), relay.reshape(uop_111.astype('bool'), relay.shape_of(uop_119))) # shape=(2, 5, 10)
uop_128 = relay.cos(const_106.astype('float64')) # shape=(2, 5, 10)
uop_130 = relay.acosh(uop_119.astype('float64')) # shape=(2, 5, 10)
uop_132 = relay.sigmoid(uop_119.astype('float32')) # shape=(2, 5, 10)
bop_134 = relay.not_equal(bop_122.astype('bool'), relay.reshape(bop_125.astype('bool'), relay.shape_of(bop_122))) # shape=(2, 5, 10)
bop_137 = relay.logical_xor(uop_130.astype('int16'), relay.reshape(bop_122.astype('int16'), relay.shape_of(uop_130))) # shape=(2, 5, 10)
uop_140 = relay.sinh(uop_119.astype('float64')) # shape=(2, 5, 10)
bop_142 = relay.add(uop_132.astype('uint8'), relay.reshape(uop_130.astype('uint8'), relay.shape_of(uop_132))) # shape=(2, 5, 10)
bop_145 = relay.bitwise_or(bop_134.astype('int64'), relay.reshape(bop_137.astype('int64'), relay.shape_of(bop_134))) # shape=(2, 5, 10)
bop_148 = relay.not_equal(bop_142.astype('bool'), relay.reshape(var_121.astype('bool'), relay.shape_of(bop_142))) # shape=(2, 5, 10)
bop_151 = relay.logical_and(bop_142.astype('bool'), relay.reshape(bop_125.astype('bool'), relay.shape_of(bop_142))) # shape=(2, 5, 10)
bop_154 = relay.left_shift(bop_125.astype('uint32'), relay.reshape(uop_111.astype('uint32'), relay.shape_of(bop_125))) # shape=(2, 5, 10)
var_157 = relay.var("var_157", dtype = "bool", shape = (2, 5, 10))#candidate|157|(2, 5, 10)|var|bool
bop_158 = relay.left_shift(bop_125.astype('int64'), relay.reshape(var_157.astype('int64'), relay.shape_of(bop_125))) # shape=(2, 5, 10)
bop_161 = relay.not_equal(var_121.astype('bool'), relay.reshape(bop_108.astype('bool'), relay.shape_of(var_121))) # shape=(2, 5, 10)
bop_164 = relay.bitwise_xor(bop_158.astype('int8'), relay.reshape(var_107.astype('int8'), relay.shape_of(bop_158))) # shape=(2, 5, 10)
func_13_call = mod.get_global_var('func_13')
func_16_call = mutated_mod.get_global_var('func_16')
call_167 = relay.TupleGetItem(func_13_call(relay.reshape(const_114.astype('float32'), [])), 2)
call_168 = relay.TupleGetItem(func_16_call(relay.reshape(const_114.astype('float32'), [])), 2)
uop_169 = relay.cos(bop_164.astype('float32')) # shape=(2, 5, 10)
uop_171 = relay.asinh(bop_137.astype('float64')) # shape=(2, 5, 10)
uop_173 = relay.acos(uop_171.astype('float32')) # shape=(2, 5, 10)
bop_175 = relay.greater_equal(uop_173.astype('bool'), relay.reshape(bop_134.astype('bool'), relay.shape_of(uop_173))) # shape=(2, 5, 10)
bop_178 = relay.maximum(bop_175.astype('int8'), relay.reshape(bop_164.astype('int8'), relay.shape_of(bop_175))) # shape=(2, 5, 10)
bop_181 = relay.subtract(bop_178.astype('float64'), relay.reshape(bop_142.astype('float64'), relay.shape_of(bop_178))) # shape=(2, 5, 10)
func_96_call = mod.get_global_var('func_96')
func_104_call = mutated_mod.get_global_var('func_104')
const_185 = relay.const([9,-7,-7,2,7,4,2,1,-4,-6,7,-1,-9,-1,10,-4,-3,6,5,10,8,10,-2,9,-3,5,9,7,8,-2,1,7,-6,8,1,-5,-1,-10,-8,-9,3,1,9,-9,-9,5,-6,-5,-7,4,-10,8,8,6,-4,6,-8,-1,-8,-6,-3,8,7,-10,6,-4,-4,8,10,-9,9,-6,-4,-8,9,-1,6,10,3,-10,5,-3,-6,-5,7,3,-9,4,5,-6,-5,7,-6,-5,-10,-6,-8,-7,4,-3,4,-4,6,-6,10,-7,9,-4,-2,4,3,8,2,8,-5,-4,8,2,8,6,10,-2,-9,3,-7,-5,8,-4,7,6], dtype = "uint8")#candidate|185|(130,)|const|uint8
call_184 = relay.TupleGetItem(func_96_call(relay.reshape(const_185.astype('uint8'), [2, 13, 5]), relay.reshape(const_185.astype('uint8'), [2, 13, 5]), relay.reshape(const_114.astype('float32'), []), relay.reshape(const_185.astype('float64'), [2, 13, 5]), relay.reshape(const_185.astype('float32'), [2, 13, 5]), relay.reshape(const_185.astype('float32'), [2, 13, 5]), ), 2)
call_186 = relay.TupleGetItem(func_104_call(relay.reshape(const_185.astype('uint8'), [2, 13, 5]), relay.reshape(const_185.astype('uint8'), [2, 13, 5]), relay.reshape(const_114.astype('float32'), []), relay.reshape(const_185.astype('float64'), [2, 13, 5]), relay.reshape(const_185.astype('float32'), [2, 13, 5]), relay.reshape(const_185.astype('float32'), [2, 13, 5]), ), 2)
bop_187 = relay.not_equal(bop_151.astype('bool'), relay.reshape(bop_125.astype('bool'), relay.shape_of(bop_151))) # shape=(2, 5, 10)
output = relay.Tuple([call_113,uop_128,uop_140,bop_145,bop_148,bop_154,bop_161,call_167,uop_169,bop_181,call_184,const_185,bop_187,])
output2 = relay.Tuple([call_115,uop_128,uop_140,bop_145,bop_148,bop_154,bop_161,call_168,uop_169,bop_181,call_186,const_185,bop_187,])
func_190 = relay.Function([var_107,var_121,var_157,], output)
mod['func_190'] = func_190
mod = relay.transform.InferType()(mod)
var_191 = relay.var("var_191", dtype = "bool", shape = (2, 5, 10))#candidate|191|(2, 5, 10)|var|bool
var_192 = relay.var("var_192", dtype = "float32", shape = (2, 5, 10))#candidate|192|(2, 5, 10)|var|float32
var_193 = relay.var("var_193", dtype = "bool", shape = (2, 5, 10))#candidate|193|(2, 5, 10)|var|bool
output = func_190(var_191,var_192,var_193,)
func_194 = relay.Function([var_191,var_192,var_193,], output)
mutated_mod['func_194'] = func_194
mutated_mod = relay.transform.InferType()(mutated_mod)
var_196 = relay.var("var_196", dtype = "float32", shape = (13, 6))#candidate|196|(13, 6)|var|float32
uop_197 = relay.asin(var_196.astype('float32')) # shape=(13, 6)
bop_199 = relay.divide(var_196.astype('float32'), relay.reshape(uop_197.astype('float32'), relay.shape_of(var_196))) # shape=(13, 6)
bop_202 = relay.floor_mod(uop_197.astype('float32'), relay.reshape(bop_199.astype('float32'), relay.shape_of(uop_197))) # shape=(13, 6)
bop_205 = relay.right_shift(bop_199.astype('int16'), relay.reshape(var_196.astype('int16'), relay.shape_of(bop_199))) # shape=(13, 6)
var_208 = relay.var("var_208", dtype = "int16", shape = (13, 6))#candidate|208|(13, 6)|var|int16
bop_209 = relay.bitwise_xor(bop_205.astype('uint8'), relay.reshape(var_208.astype('uint8'), relay.shape_of(bop_205))) # shape=(13, 6)
bop_212 = relay.mod(var_196.astype('float32'), relay.reshape(var_208.astype('float32'), relay.shape_of(var_196))) # shape=(13, 6)
output = relay.Tuple([bop_202,bop_209,bop_212,])
output2 = relay.Tuple([bop_202,bop_209,bop_212,])
func_215 = relay.Function([var_196,var_208,], output)
mod['func_215'] = func_215
mod = relay.transform.InferType()(mod)
var_216 = relay.var("var_216", dtype = "float32", shape = (13, 6))#candidate|216|(13, 6)|var|float32
var_217 = relay.var("var_217", dtype = "int16", shape = (13, 6))#candidate|217|(13, 6)|var|int16
output = func_215(var_216,var_217,)
func_218 = relay.Function([var_216,var_217,], output)
mutated_mod['func_218'] = func_218
mutated_mod = relay.transform.InferType()(mutated_mod)
var_220 = relay.var("var_220", dtype = "float32", shape = ())#candidate|220|()|var|float32
uop_221 = relay.asinh(var_220.astype('float32')) # shape=()
bop_223 = relay.bitwise_xor(uop_221.astype('uint16'), var_220.astype('uint16')) # shape=()
uop_226 = relay.acosh(var_220.astype('float64')) # shape=()
bop_228 = relay.maximum(uop_221.astype('float64'), uop_226.astype('float64')) # shape=()
bop_231 = relay.bitwise_xor(uop_221.astype('uint8'), var_220.astype('uint8')) # shape=()
const_234 = relay.const(9.436778, dtype = "float64")#candidate|234|()|const|float64
bop_235 = relay.logical_and(bop_228.astype('bool'), const_234.astype('bool')) # shape=()
bop_238 = relay.logical_or(uop_226.astype('bool'), uop_221.astype('bool')) # shape=()
var_241 = relay.var("var_241", dtype = "float32", shape = (11,))#candidate|241|(11,)|var|float32
bop_242 = relay.greater(var_220.astype('bool'), var_241.astype('bool')) # shape=(11,)
bop_245 = relay.subtract(var_220.astype('int16'), bop_242.astype('int16')) # shape=(11,)
bop_248 = relay.subtract(uop_226.astype('uint16'), uop_221.astype('uint16')) # shape=()
uop_251 = relay.sqrt(bop_231.astype('float64')) # shape=()
bop_253 = relay.floor_mod(uop_251.astype('float64'), bop_235.astype('float64')) # shape=()
uop_256 = relay.erf(bop_253.astype('float64')) # shape=()
output = relay.Tuple([bop_223,bop_238,bop_245,bop_248,uop_256,])
output2 = relay.Tuple([bop_223,bop_238,bop_245,bop_248,uop_256,])
func_258 = relay.Function([var_220,var_241,], output)
mod['func_258'] = func_258
mod = relay.transform.InferType()(mod)
mutated_mod['func_258'] = func_258
mutated_mod = relay.transform.InferType()(mutated_mod)
func_258_call = mutated_mod.get_global_var('func_258')
var_260 = relay.var("var_260", dtype = "float32", shape = ())#candidate|260|()|var|float32
var_261 = relay.var("var_261", dtype = "float32", shape = (11,))#candidate|261|(11,)|var|float32
call_259 = func_258_call(var_260,var_261,)
output = call_259
func_262 = relay.Function([var_260,var_261,], output)
mutated_mod['func_262'] = func_262
mutated_mod = relay.transform.InferType()(mutated_mod)
var_264 = relay.var("var_264", dtype = "float32", shape = (6,))#candidate|264|(6,)|var|float32
var_265 = relay.var("var_265", dtype = "float32", shape = (6,))#candidate|265|(6,)|var|float32
bop_266 = relay.floor_mod(var_264.astype('float32'), relay.reshape(var_265.astype('float32'), relay.shape_of(var_264))) # shape=(6,)
bop_269 = relay.bitwise_or(var_265.astype('int8'), relay.reshape(bop_266.astype('int8'), relay.shape_of(var_265))) # shape=(6,)
uop_272 = relay.asinh(bop_269.astype('float32')) # shape=(6,)
var_274 = relay.var("var_274", dtype = "float32", shape = (6,))#candidate|274|(6,)|var|float32
bop_275 = relay.logical_xor(uop_272.astype('int64'), relay.reshape(var_274.astype('int64'), relay.shape_of(uop_272))) # shape=(6,)
bop_278 = relay.left_shift(bop_275.astype('int64'), relay.reshape(var_274.astype('int64'), relay.shape_of(bop_275))) # shape=(6,)
bop_281 = relay.less_equal(bop_278.astype('bool'), relay.reshape(var_274.astype('bool'), relay.shape_of(bop_278))) # shape=(6,)
bop_284 = relay.bitwise_or(bop_275.astype('uint16'), relay.reshape(var_265.astype('uint16'), relay.shape_of(bop_275))) # shape=(6,)
uop_287 = relay.sin(bop_284.astype('float32')) # shape=(6,)
uop_289 = relay.acosh(uop_287.astype('float32')) # shape=(6,)
bop_291 = relay.left_shift(uop_272.astype('int8'), relay.reshape(bop_266.astype('int8'), relay.shape_of(uop_272))) # shape=(6,)
uop_294 = relay.asin(uop_289.astype('float32')) # shape=(6,)
bop_296 = relay.maximum(uop_287.astype('float64'), relay.reshape(uop_272.astype('float64'), relay.shape_of(uop_287))) # shape=(6,)
var_299 = relay.var("var_299", dtype = "float32", shape = (6,))#candidate|299|(6,)|var|float32
bop_300 = relay.bitwise_xor(uop_294.astype('int16'), relay.reshape(var_299.astype('int16'), relay.shape_of(uop_294))) # shape=(6,)
uop_303 = relay.cos(uop_294.astype('float32')) # shape=(6,)
const_305 = relay.const([-2.032863,-8.488512,-8.238672,-2.369839,-9.552980,2.560728], dtype = "float32")#candidate|305|(6,)|const|float32
bop_306 = relay.right_shift(uop_303.astype('int16'), relay.reshape(const_305.astype('int16'), relay.shape_of(uop_303))) # shape=(6,)
uop_309 = relay.asin(bop_306.astype('float32')) # shape=(6,)
bop_311 = relay.maximum(uop_289.astype('uint8'), relay.reshape(const_305.astype('uint8'), relay.shape_of(uop_289))) # shape=(6,)
uop_314 = relay.asin(uop_309.astype('float64')) # shape=(6,)
uop_316 = relay.sin(uop_309.astype('float64')) # shape=(6,)
uop_318 = relay.asinh(bop_306.astype('float64')) # shape=(6,)
uop_320 = relay.acosh(bop_306.astype('float64')) # shape=(6,)
var_322 = relay.var("var_322", dtype = "float64", shape = (6,))#candidate|322|(6,)|var|float64
bop_323 = relay.left_shift(uop_316.astype('uint8'), relay.reshape(var_322.astype('uint8'), relay.shape_of(uop_316))) # shape=(6,)
output = relay.Tuple([bop_281,bop_291,bop_296,bop_300,bop_311,uop_314,uop_318,uop_320,bop_323,])
output2 = relay.Tuple([bop_281,bop_291,bop_296,bop_300,bop_311,uop_314,uop_318,uop_320,bop_323,])
func_326 = relay.Function([var_264,var_265,var_274,var_299,var_322,], output)
mod['func_326'] = func_326
mod = relay.transform.InferType()(mod)
mutated_mod['func_326'] = func_326
mutated_mod = relay.transform.InferType()(mutated_mod)
func_326_call = mutated_mod.get_global_var('func_326')
var_328 = relay.var("var_328", dtype = "float32", shape = (6,))#candidate|328|(6,)|var|float32
var_329 = relay.var("var_329", dtype = "float32", shape = (6,))#candidate|329|(6,)|var|float32
var_330 = relay.var("var_330", dtype = "float32", shape = (6,))#candidate|330|(6,)|var|float32
var_331 = relay.var("var_331", dtype = "float32", shape = (6,))#candidate|331|(6,)|var|float32
var_332 = relay.var("var_332", dtype = "float64", shape = (6,))#candidate|332|(6,)|var|float64
call_327 = func_326_call(var_328,var_329,var_330,var_331,var_332,)
output = call_327
func_333 = relay.Function([var_328,var_329,var_330,var_331,var_332,], output)
mutated_mod['func_333'] = func_333
mutated_mod = relay.transform.InferType()(mutated_mod)
var_335 = relay.var("var_335", dtype = "uint16", shape = (9, 13, 3))#candidate|335|(9, 13, 3)|var|uint16
var_336 = relay.var("var_336", dtype = "uint16", shape = (9, 13, 3))#candidate|336|(9, 13, 3)|var|uint16
bop_337 = relay.bitwise_and(var_335.astype('uint16'), relay.reshape(var_336.astype('uint16'), relay.shape_of(var_335))) # shape=(9, 13, 3)
uop_340 = relay.sigmoid(var_335.astype('float64')) # shape=(9, 13, 3)
func_258_call = mod.get_global_var('func_258')
func_262_call = mutated_mod.get_global_var('func_262')
var_343 = relay.var("var_343", dtype = "float32", shape = ())#candidate|343|()|var|float32
var_344 = relay.var("var_344", dtype = "float32", shape = (11,))#candidate|344|(11,)|var|float32
call_342 = relay.TupleGetItem(func_258_call(relay.reshape(var_343.astype('float32'), []), relay.reshape(var_344.astype('float32'), [11,]), ), 1)
call_345 = relay.TupleGetItem(func_262_call(relay.reshape(var_343.astype('float32'), []), relay.reshape(var_344.astype('float32'), [11,]), ), 1)
uop_346 = relay.asinh(uop_340.astype('float32')) # shape=(9, 13, 3)
func_96_call = mod.get_global_var('func_96')
func_104_call = mutated_mod.get_global_var('func_104')
var_349 = relay.var("var_349", dtype = "uint8", shape = (130,))#candidate|349|(130,)|var|uint8
call_348 = relay.TupleGetItem(func_96_call(relay.reshape(var_349.astype('uint8'), [2, 13, 5]), relay.reshape(var_349.astype('uint8'), [2, 13, 5]), relay.reshape(call_342.astype('float32'), []), relay.reshape(var_349.astype('float64'), [2, 13, 5]), relay.reshape(var_349.astype('float32'), [2, 13, 5]), relay.reshape(var_349.astype('float32'), [2, 13, 5]), ), 11)
call_350 = relay.TupleGetItem(func_104_call(relay.reshape(var_349.astype('uint8'), [2, 13, 5]), relay.reshape(var_349.astype('uint8'), [2, 13, 5]), relay.reshape(call_342.astype('float32'), []), relay.reshape(var_349.astype('float64'), [2, 13, 5]), relay.reshape(var_349.astype('float32'), [2, 13, 5]), relay.reshape(var_349.astype('float32'), [2, 13, 5]), ), 11)
bop_351 = relay.multiply(uop_340.astype('uint64'), relay.reshape(var_335.astype('uint64'), relay.shape_of(uop_340))) # shape=(9, 13, 3)
output = relay.Tuple([bop_337,call_342,var_343,var_344,uop_346,call_348,var_349,bop_351,])
output2 = relay.Tuple([bop_337,call_345,var_343,var_344,uop_346,call_350,var_349,bop_351,])
F = relay.Function([var_335,var_336,var_343,var_344,var_349,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_335,var_336,var_343,var_344,var_349,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_335= np.array([[[4,9,2],[4,3,-2],[-3,-5,2],[5,-2,-10],[-9,10,-2],[1,2,1],[-8,-6,6],[-2,-1,-5],[-2,-2,-7],[-7,-7,-4],[5,6,-7],[-1,-3,-6],[5,10,-8]],[[-6,5,-3],[2,-7,-1],[7,-8,1],[-1,10,1],[3,-7,9],[-9,-4,-7],[-7,8,-6],[-6,-3,8],[-8,10,1],[8,-7,-8],[-10,5,1],[2,-9,-1],[7,9,-10]],[[6,4,-9],[-7,-10,2],[3,4,8],[8,-1,-10],[1,8,9],[-7,-7,3],[7,-3,-4],[-6,8,3],[-5,-6,7],[9,-3,-9],[6,-9,8],[-10,-2,3],[-7,5,1]],[[1,-10,-2],[-3,6,-1],[-10,1,-1],[1,-4,-4],[1,8,-7],[3,-4,-7],[9,-1,-7],[9,9,-7],[9,-2,1],[1,-7,7],[1,4,-2],[-4,-4,-5],[7,-8,-6]],[[-7,-1,9],[2,5,3],[5,-9,-9],[-1,-1,10],[-6,3,-3],[7,3,8],[-3,4,-2],[-7,8,6],[-8,-2,2],[6,-9,9],[8,-2,7],[3,-2,5],[1,-9,-9]],[[-8,-3,-5],[-2,-2,10],[3,-9,-8],[-6,-6,5],[2,-3,-7],[-7,-9,-7],[5,5,-2],[-9,2,-1],[4,-1,-8],[10,-4,-1],[7,-8,-10],[9,6,-1],[1,-3,-7]],[[3,-2,10],[1,-9,6],[6,10,10],[-8,-3,4],[-3,3,-8],[-10,2,5],[3,-5,-9],[-4,4,8],[4,-4,-2],[-3,5,-1],[-8,4,-5],[3,5,2],[-1,-10,10]],[[1,-7,5],[5,-6,-7],[5,-10,-5],[-10,-4,-8],[-10,3,-6],[-9,9,3],[-7,3,1],[10,5,-5],[-6,-3,-9],[-7,2,8],[-4,-4,-4],[8,-7,5],[-3,6,-7]],[[-10,-5,3],[4,2,9],[3,-8,6],[-7,-5,7],[4,9,6],[10,-8,9],[-10,9,-10],[-3,-2,1],[5,4,2],[-4,-9,-8],[-6,3,5],[5,-6,9],[-5,-8,-5]]], dtype='uint16')
module1.set_input('var_335', input_335)
input_336= np.array([[[6,-6,-2],[2,-7,-6],[10,-5,-7],[-6,8,-7],[7,-9,-8],[5,-4,4],[1,3,-7],[-5,2,9],[-10,4,-8],[-5,2,1],[10,-3,8],[4,3,9],[6,-6,-4]],[[10,1,-4],[-4,3,4],[-5,1,3],[-7,-9,2],[-8,-6,9],[-1,-5,-2],[9,-9,1],[8,10,-7],[-7,9,3],[-7,-10,-7],[-2,7,-9],[8,6,-2],[-1,-4,-8]],[[-5,5,4],[-7,-1,4],[7,8,-5],[4,9,-1],[6,1,-6],[-3,5,-6],[8,-2,10],[10,-3,-1],[7,4,-7],[7,10,7],[7,8,8],[1,-9,6],[8,-9,4]],[[3,-7,-7],[3,-10,-10],[-10,5,-8],[-4,-2,3],[-2,-5,4],[-1,3,6],[-4,4,4],[9,4,2],[8,1,10],[-9,7,-5],[3,9,-6],[8,4,2],[-9,-3,-4]],[[2,-2,-5],[9,7,7],[-6,-8,6],[10,3,-7],[3,5,-6],[-3,-4,-3],[9,2,9],[-8,8,2],[9,10,-7],[7,1,-7],[3,-7,-9],[6,6,6],[5,-2,9]],[[1,-5,9],[7,1,-10],[-9,10,-9],[-8,-7,-3],[10,6,-5],[6,-4,-8],[-1,1,-7],[10,-3,1],[7,9,4],[8,3,5],[-10,5,-10],[-9,10,-2],[-2,-10,-1]],[[6,-10,4],[8,7,-6],[9,-1,-4],[-9,-1,4],[3,-6,-10],[6,6,5],[-10,-2,4],[7,-5,-10],[-1,-1,-8],[-8,2,6],[2,2,-9],[-8,9,8],[-9,9,-5]],[[-5,9,-1],[-3,-8,4],[1,-7,5],[-9,7,-4],[-3,9,-9],[2,3,9],[8,4,9],[1,5,2],[-8,-7,-10],[9,6,-5],[4,-6,-9],[-2,7,5],[3,5,-8]],[[2,-7,-10],[-9,-10,10],[-9,-3,3],[10,-10,-1],[-4,-5,-4],[5,8,2],[10,-8,8],[6,-4,2],[2,3,10],[9,8,-2],[-6,6,-10],[-3,-4,1],[-10,-1,5]]], dtype='uint16')
module1.set_input('var_336', input_336)
input_343= np.array(-3.518765, dtype='float32')
module1.set_input('var_343', input_343)
input_344= np.array([-4.160024,1.628366,-0.360683,-4.310075,6.370337,-1.972526,-0.655949,7.242264,-3.649767,-4.899797,8.609869], dtype='float32')
module1.set_input('var_344', input_344)
input_349= np.array([3,-2,-3,9,-3,6,-9,8,-1,-3,-9,-1,-10,-8,1,6,-2,-3,1,9,-9,7,-1,5,-9,6,-3,-8,8,-5,10,3,2,-6,-9,10,-2,-5,-3,7,-1,3,-10,8,-9,-6,-6,2,8,4,3,-7,-10,-9,3,6,-9,-9,-10,-6,9,9,-3,-5,8,-8,3,5,-8,-8,-10,-4,-1,-7,-7,1,5,3,-2,-10,-8,-9,-6,6,-1,-4,9,8,-10,-3,8,-4,6,2,6,6,10,6,-2,-9,-9,3,-8,7,8,4,-4,8,4,9,1,5,-3,-7,-5,9,7,9,-5,-5,8,8,8,3,-5,3,8,-7,-8,9], dtype='uint8')
module1.set_input('var_349', input_349)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_335, input_336, input_343, input_344, input_349, )
res3 = intrp3.evaluate()(input_335, input_336, input_343, input_344, input_349, )
res4 = intrp4.evaluate()(input_335, input_336, input_343, input_344, input_349, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
module5.set_input('var_335', input_335)
module5.set_input('var_336', input_336)
module5.set_input('var_343', input_343)
module5.set_input('var_344', input_344)
module5.set_input('var_349', input_349)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_335, input_336, input_343, input_344, input_349, )
res7 = intrp7.evaluate()(input_335, input_336, input_343, input_344, input_349, )
res8 = intrp8.evaluate()(input_335, input_336, input_343, input_344, input_349, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
module9.set_input('var_335', input_335)
module9.set_input('var_336', input_336)
module9.set_input('var_343', input_343)
module9.set_input('var_344', input_344)
module9.set_input('var_349', input_349)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_335, input_336, input_343, input_344, input_349, )
res11 = intrp11.evaluate()(input_335, input_336, input_343, input_344, input_349, )
res12 = intrp12.evaluate()(input_335, input_336, input_343, input_344, input_349, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
module13.set_input('var_335', input_335)
module13.set_input('var_336', input_336)
module13.set_input('var_343', input_343)
module13.set_input('var_344', input_344)
module13.set_input('var_349', input_349)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_335, input_336, input_343, input_344, input_349, )
res15 = intrp15.evaluate()(input_335, input_336, input_343, input_344, input_349, )
res16 = intrp16.evaluate()(input_335, input_336, input_343, input_344, input_349, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
module17.set_input('var_335', input_335)
module17.set_input('var_336', input_336)
module17.set_input('var_343', input_343)
module17.set_input('var_344', input_344)
module17.set_input('var_349', input_349)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_335, input_336, input_343, input_344, input_349, )
res19 = intrp19.evaluate()(input_335, input_336, input_343, input_344, input_349, )
res20 = intrp20.evaluate()(input_335, input_336, input_343, input_344, input_349, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
module21.set_input('var_335', input_335)
module21.set_input('var_336', input_336)
module21.set_input('var_343', input_343)
module21.set_input('var_344', input_344)
module21.set_input('var_349', input_349)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_335, input_336, input_343, input_344, input_349, )
res23 = intrp23.evaluate()(input_335, input_336, input_343, input_344, input_349, )
res24 = intrp24.evaluate()(input_335, input_336, input_343, input_344, input_349, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()

'''57: TVMFuncCall
56: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
55: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
54: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
53: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
52: tvm::transform::Pass::operator()(tvm::IRModule) const
51: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
50: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
49: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
48: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
47: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
46: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
45: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
44: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
43: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
42: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
41: _ZN3tvm5relay16MixedModeMutato
40: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
39: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
38: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
37: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
36: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
34: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
32: _ZN3tvm5relay16MixedModeMutato
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
27: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
26: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
25: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
24: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
23: tvm::transform::Pass::operator()(tvm::IRModule) const
22: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
21: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
16: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
15: tvm::relay::TypeInferencer::Infer(tvm::GlobalVar, tvm::relay::Function)
14: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
13: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
12: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
11: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
10: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
9: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::FunctionNode const*)
8: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
7: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
6: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
5: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
4: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
3: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::CallNode const*)
2: tvm::relay::TypeInferencer::GeneralCall(tvm::relay::CallNode const*, tvm::runtime::Array<tvm::Type, void>)
1: _ZN3tvm17DiagnosticContext9EmitFatalERKNS_1
0: tvm::DiagnosticContext::Render()

'''