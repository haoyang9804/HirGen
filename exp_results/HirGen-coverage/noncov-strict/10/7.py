import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (4, 13, 10))#candidate|0|(4, 13, 10)|var|float32
uop_1 = relay.sin(var_0.astype('float32')) # shape=(4, 13, 10)
uop_3 = relay.acosh(uop_1.astype('float64')) # shape=(4, 13, 10)
output = relay.Tuple([uop_3,])
output2 = relay.Tuple([uop_3,])
func_5 = relay.Function([var_0,], output)
mod['func_5'] = func_5
mod = relay.transform.InferType()(mod)
mutated_mod['func_5'] = func_5
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6 = relay.var("var_6", dtype = "float32", shape = (4, 13, 10))#candidate|6|(4, 13, 10)|var|float32
func_5_call = mutated_mod.get_global_var('func_5')
call_7 = func_5_call(var_6)
output = call_7
func_8 = relay.Function([var_6], output)
mutated_mod['func_8'] = func_8
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10 = relay.var("var_10", dtype = "float64", shape = (5, 2, 1))#candidate|10|(5, 2, 1)|var|float64
var_11 = relay.var("var_11", dtype = "float64", shape = (5, 2, 4))#candidate|11|(5, 2, 4)|var|float64
bop_12 = relay.mod(var_10.astype('float64'), var_11.astype('float64')) # shape=(5, 2, 4)
func_5_call = mod.get_global_var('func_5')
func_8_call = mutated_mod.get_global_var('func_8')
var_16 = relay.var("var_16", dtype = "float32", shape = (520,))#candidate|16|(520,)|var|float32
call_15 = relay.TupleGetItem(func_5_call(relay.reshape(var_16.astype('float32'), [4, 13, 10])), 0)
call_17 = relay.TupleGetItem(func_8_call(relay.reshape(var_16.astype('float32'), [4, 13, 10])), 0)
bop_18 = relay.multiply(var_11.astype('uint8'), relay.reshape(bop_12.astype('uint8'), relay.shape_of(var_11))) # shape=(5, 2, 4)
bop_21 = relay.maximum(var_16.astype('uint8'), relay.reshape(call_15.astype('uint8'), relay.shape_of(var_16))) # shape=(520,)
bop_24 = relay.maximum(var_16.astype('uint8'), relay.reshape(call_17.astype('uint8'), relay.shape_of(var_16))) # shape=(520,)
bop_25 = relay.greater_equal(var_16.astype('bool'), var_10.astype('bool')) # shape=(5, 2, 520)
var_28 = relay.var("var_28", dtype = "float32", shape = (520,))#candidate|28|(520,)|var|float32
bop_29 = relay.logical_and(var_16.astype('bool'), relay.reshape(var_28.astype('bool'), relay.shape_of(var_16))) # shape=(520,)
uop_32 = relay.atan(bop_21.astype('float64')) # shape=(520,)
uop_34 = relay.atan(bop_24.astype('float64')) # shape=(520,)
output = relay.Tuple([bop_18,bop_25,bop_29,uop_32,])
output2 = relay.Tuple([bop_18,bop_25,bop_29,uop_34,])
func_35 = relay.Function([var_10,var_11,var_16,var_28,], output)
mod['func_35'] = func_35
mod = relay.transform.InferType()(mod)
mutated_mod['func_35'] = func_35
mutated_mod = relay.transform.InferType()(mutated_mod)
func_35_call = mutated_mod.get_global_var('func_35')
var_37 = relay.var("var_37", dtype = "float64", shape = (5, 2, 1))#candidate|37|(5, 2, 1)|var|float64
var_38 = relay.var("var_38", dtype = "float64", shape = (5, 2, 4))#candidate|38|(5, 2, 4)|var|float64
var_39 = relay.var("var_39", dtype = "float32", shape = (520,))#candidate|39|(520,)|var|float32
var_40 = relay.var("var_40", dtype = "float32", shape = (520,))#candidate|40|(520,)|var|float32
call_36 = func_35_call(var_37,var_38,var_39,var_40,)
output = call_36
func_41 = relay.Function([var_37,var_38,var_39,var_40,], output)
mutated_mod['func_41'] = func_41
mutated_mod = relay.transform.InferType()(mutated_mod)
const_43 = relay.const([[[-8.950165,-8.450749,-9.618183,-3.201160,0.235412,-7.825138,-5.393180,-1.341249,6.032536,-0.322870],[9.224502,9.633260,-1.374817,-8.959592,1.826736,8.565301,-6.585498,5.603169,2.103657,-2.724120],[8.677333,-8.046455,7.968090,7.721780,-4.937142,-2.608815,0.181312,2.986256,-4.138617,-1.494217],[1.055359,6.467942,5.440694,4.332261,1.287092,1.977830,-7.961099,-0.093590,-6.604925,9.338361],[7.554909,-6.669956,3.672000,-9.134196,-7.592924,2.500449,-0.940678,9.943531,6.747072,3.864333],[-9.529249,6.536493,-4.738596,-4.810971,-4.554240,0.561370,-1.660886,-0.631614,-2.575458,9.822919],[8.934812,-6.531048,-1.899872,1.029809,-1.469492,-7.817579,9.249720,-8.898220,4.366785,-0.488806],[-3.633626,9.044962,-3.351596,-1.323939,-4.607871,6.397724,-2.684060,5.467088,8.715278,-7.724785],[4.569547,1.263693,-9.521966,7.957527,-4.431632,5.911034,6.405097,1.733718,-2.006702,-4.549100],[-9.185071,-5.329296,-7.579412,3.919495,-9.742428,0.946960,-1.549619,-7.814166,-4.642897,-8.655094],[-2.761629,2.137125,-2.587344,0.419736,-1.534868,0.503680,9.977389,0.176636,4.003690,0.280530],[-3.232328,-8.323463,7.151826,-0.475693,-4.201053,8.499690,-1.553375,-2.195480,7.030433,-5.389006],[-0.208935,-5.737003,5.398445,2.763606,-6.649022,3.320131,3.221921,1.490752,-7.445707,8.381297]],[[-3.614209,8.364105,6.069132,1.126670,8.682762,9.448751,4.803581,0.517520,0.099593,-4.033053],[-5.055368,6.205886,6.622928,-5.432569,-9.349534,-3.862333,-1.451672,6.754824,0.400971,6.908576],[-9.736861,-4.172297,-3.625798,0.806340,-5.991086,-6.821904,2.901052,9.486643,-2.481140,-0.674113],[6.813396,-4.392638,2.433081,3.677471,-6.269692,5.566101,3.722963,1.728220,-6.024912,-1.004273],[-4.816837,1.488297,-7.650364,-4.010411,-0.723853,5.358072,1.511493,-0.912423,6.514498,9.737633],[-0.021612,8.666686,6.616817,8.913765,5.220869,-0.079857,-6.857812,3.200539,-9.682486,-8.226782],[-2.098759,-4.478629,4.699679,-6.429696,3.364766,-1.574260,8.469924,7.675845,-9.331966,-4.319900],[-6.007097,2.310560,-3.545714,8.571786,-2.539953,5.784288,6.834570,-5.774560,-1.556804,-7.996468],[4.271500,5.085387,-9.773478,4.893537,-3.578593,-6.011637,-8.586669,9.346737,-5.668664,-5.548075],[-6.497798,9.767776,8.624881,-0.068874,8.448000,8.192660,-0.803696,7.870262,-1.254013,2.820373],[-1.421987,7.285448,-8.968326,6.472612,-3.567662,9.805733,5.095609,-5.092175,2.959313,5.915247],[1.804914,9.781227,4.829119,-8.636048,2.899165,-4.675069,6.757803,-1.750561,0.491517,-9.434610],[4.409875,-6.813175,1.039185,-3.347310,-8.801544,0.925480,-3.819893,9.227049,3.450732,0.639403]],[[0.273753,-5.001213,-2.973874,-2.151538,-7.243768,6.856457,5.986542,-6.997863,-8.978857,6.369731],[-9.768692,3.733044,6.067366,2.220719,-5.263789,1.129033,-9.369968,9.142039,-8.757532,-3.723557],[-8.382728,0.418888,-8.644097,-0.668743,-7.049348,5.491892,-4.305811,2.385284,7.853010,-4.746021],[-1.801377,9.211325,7.526257,9.545806,8.649111,-9.892549,3.948592,3.515267,-7.402527,-4.171679],[1.901559,2.233771,-3.696310,5.976403,0.336478,-3.828839,3.827727,8.430090,-0.472242,-3.207163],[-6.684053,1.103739,-9.313141,9.541230,2.994125,2.497388,5.170859,-2.444630,-5.283833,9.748002],[-7.002465,9.636509,-9.478432,-3.979771,5.929764,-7.159075,-4.065059,5.627138,-5.720920,9.304379],[-4.913214,-9.047433,3.290852,-0.449407,-1.979531,-8.367960,6.301608,-3.226314,-4.827559,-8.580895],[7.234079,9.120411,-1.011189,6.384130,-2.554603,-8.472902,1.920362,-6.977665,-9.866227,-6.403127],[8.624230,4.106842,-0.108144,-9.861501,-1.806399,-1.225234,1.446932,9.478656,-2.964149,-1.960581],[1.395554,-2.119070,4.508321,-9.543475,7.034220,-3.428977,2.412756,4.595062,3.750300,-9.273049],[-2.500719,1.662414,-6.868259,2.950151,2.910501,3.570800,4.545891,-0.170022,9.364394,-1.622312],[9.452222,4.219205,-3.272949,1.793441,-7.089033,1.675976,-3.525974,-4.024329,-1.114895,-6.455362]],[[6.043259,-9.348932,8.395260,1.964488,2.141702,1.087810,-2.092193,8.661252,4.654960,-7.765063],[-9.705672,-0.825505,-6.681913,-0.965098,-4.033288,8.850076,-0.314937,-3.877199,-9.443934,-7.154924],[3.987407,-3.133074,-6.129280,-3.202845,-0.975210,9.588316,2.079161,-2.453777,-9.934179,-8.642639],[6.959699,-0.082471,0.519690,4.581120,-0.767319,-0.088867,1.430571,9.459769,-2.580866,9.765815],[-3.649702,-9.067624,-0.756203,-5.230636,3.797001,9.884724,-8.610735,-3.543176,7.032257,3.652132],[-0.518936,7.596316,-1.470611,4.993023,5.564620,-2.163621,-0.599957,9.696841,4.876662,0.280196],[-6.476408,4.832606,3.269178,-3.326213,1.331609,-6.757936,3.090568,0.626223,4.359636,7.736697],[1.616832,-0.653046,-2.196087,-5.412745,2.692944,-8.190806,-2.851285,-1.797772,2.663099,-0.279348],[-3.266806,-4.458128,9.808001,-7.810397,9.841213,0.750715,1.506231,-8.013247,6.346083,9.492358],[-3.221717,-9.968599,6.824590,-2.745935,9.752936,8.120084,-6.384438,-4.601555,5.773618,-6.788340],[-2.839678,9.576037,1.062371,7.771027,-0.051688,-9.649448,-9.750882,2.214912,5.508400,-8.967092],[4.994740,0.506088,-6.354675,4.263181,-7.226126,-4.613309,2.527198,-9.374769,6.926327,9.329730],[-5.076052,-2.937423,-4.761282,-8.829937,-0.862817,-8.444755,-9.697948,2.986781,0.394949,-9.022150]],[[-8.133678,-7.237601,-6.696762,-7.519180,-2.124044,0.856673,7.610051,3.818234,9.468820,-9.896380],[7.986492,8.691664,-1.976640,-9.898063,4.046863,9.944122,9.729148,6.493148,-9.155975,5.298818],[8.643733,6.008755,-9.676425,-9.672817,-4.669311,6.442686,-5.673899,8.333921,3.409738,-0.288733],[-3.115489,-3.975921,-2.459996,2.674461,-7.313156,4.260124,5.165696,-7.519229,-6.083412,7.763960],[3.582956,-5.085341,-8.339537,-0.977848,9.216684,-7.729237,-7.604889,5.414065,0.367036,6.107235],[8.150507,1.593590,4.471193,-3.767653,8.151116,-8.688659,9.730847,-1.544103,-3.783093,3.982476],[5.421754,7.304484,1.662341,-7.152498,9.187609,-5.117681,7.122383,6.474220,8.519224,-7.572351],[-8.877781,-4.023560,7.282154,5.783223,1.063835,9.511499,-2.921507,8.668789,3.896316,-4.470584],[7.354435,8.007318,4.929436,-7.160811,-4.716777,6.467817,6.801748,-7.164189,-7.648447,4.774304],[7.605654,-2.377066,7.633224,5.907960,-4.414821,-7.151438,-8.673318,-1.335328,-3.774622,-3.501585],[6.509595,6.571285,6.007966,3.271850,2.651192,-4.199480,6.155039,6.819156,-7.821461,0.594528],[-0.265270,-5.371011,0.850056,-8.116080,0.438101,-0.724993,-1.924177,-5.824910,-0.665418,6.340152],[-3.463480,-0.539492,6.434347,-1.349203,-3.908726,-4.505849,4.069949,7.574734,8.802438,4.005319]],[[-6.036847,3.667718,9.457737,9.642991,7.790889,-2.773819,-6.562645,3.244554,-6.750099,1.856336],[5.261943,2.515160,-6.855808,5.567296,4.649211,6.695419,-6.062025,-5.666065,-5.675983,9.287846],[1.614111,1.591575,-8.971517,7.021911,-1.372488,9.007379,-5.317005,8.375849,0.882394,-2.962615],[1.411197,0.571929,-8.533596,3.088263,8.623787,-3.197873,-6.283529,-8.613969,-7.751799,7.821444],[-3.699611,-7.388121,-9.336172,5.877962,-8.565708,-0.616419,0.774126,5.331828,6.650185,-9.749496],[-7.984786,4.609564,-4.457505,0.491108,0.194428,-0.485245,-1.200349,-7.561858,-8.721064,-3.746115],[8.923893,-5.875317,-7.701120,-4.408874,-1.333148,-3.553769,9.565051,-8.145456,0.557555,-3.850652],[-0.325913,-1.065514,0.459287,4.454422,9.100696,-0.667450,-8.270423,9.921449,0.090538,5.596371],[0.740248,-2.876457,8.207999,-6.358466,-3.219035,-6.575655,6.919962,9.181556,4.602976,-5.814760],[4.828215,-8.080979,9.982179,-6.877565,6.273084,3.179806,-2.464078,-0.032149,-7.200137,-8.367598],[1.579942,9.539091,-8.397538,-3.384805,-9.921523,-0.710758,6.960146,3.174344,-3.201992,6.337241],[6.480958,-8.909490,-1.320241,-6.029439,-1.447599,-9.429315,4.491378,-8.389254,-2.267505,9.254082],[-7.277127,-3.025286,-8.156104,-9.120501,-0.769449,7.920696,-1.962688,1.272910,-6.456045,9.272671]]], dtype = "float32")#candidate|43|(6, 13, 10)|const|float32
uop_44 = relay.erf(const_43.astype('float32')) # shape=(6, 13, 10)
bop_46 = relay.equal(uop_44.astype('bool'), relay.reshape(const_43.astype('bool'), relay.shape_of(uop_44))) # shape=(6, 13, 10)
bop_49 = relay.mod(const_43.astype('float32'), relay.reshape(bop_46.astype('float32'), relay.shape_of(const_43))) # shape=(6, 13, 10)
output = bop_49
output2 = bop_49
func_52 = relay.Function([], output)
mod['func_52'] = func_52
mod = relay.transform.InferType()(mod)
mutated_mod['func_52'] = func_52
mutated_mod = relay.transform.InferType()(mutated_mod)
func_52_call = mutated_mod.get_global_var('func_52')
call_53 = func_52_call()
output = call_53
func_54 = relay.Function([], output)
mutated_mod['func_54'] = func_54
mutated_mod = relay.transform.InferType()(mutated_mod)
const_55 = relay.const([[8,-1,-9,-8,1,-1,-7,-9,-7,-5,3,9],[-9,9,-4,-9,4,-3,-4,1,7,4,-3,6],[-1,-2,10,-10,-6,-9,5,-5,6,1,-8,-9],[-6,-9,-7,-9,-10,3,-2,-9,2,-3,5,-4],[-5,-5,1,8,-7,6,-5,-2,-6,5,8,10],[-3,4,8,-1,7,6,9,3,2,-10,4,2],[-7,-10,2,-6,1,-2,-10,-4,6,4,5,-1],[-9,-3,-5,5,-3,-10,4,-7,5,-6,10,-3],[1,4,-5,10,-8,-8,-10,-8,7,8,-1,6]], dtype = "uint64")#candidate|55|(9, 12)|const|uint64
var_56 = relay.var("var_56", dtype = "uint64", shape = (9, 12))#candidate|56|(9, 12)|var|uint64
bop_57 = relay.less_equal(const_55.astype('bool'), relay.reshape(var_56.astype('bool'), relay.shape_of(const_55))) # shape=(9, 12)
output = bop_57
output2 = bop_57
func_60 = relay.Function([var_56,], output)
mod['func_60'] = func_60
mod = relay.transform.InferType()(mod)
var_61 = relay.var("var_61", dtype = "uint64", shape = (9, 12))#candidate|61|(9, 12)|var|uint64
output = func_60(var_61)
func_62 = relay.Function([var_61], output)
mutated_mod['func_62'] = func_62
mutated_mod = relay.transform.InferType()(mutated_mod)
const_64 = relay.const(False, dtype = "bool")#candidate|64|()|const|bool
var_65 = relay.var("var_65", dtype = "bool", shape = (13,))#candidate|65|(13,)|var|bool
bop_66 = relay.logical_and(const_64.astype('bool'), var_65.astype('bool')) # shape=(13,)
output = relay.Tuple([bop_66,])
output2 = relay.Tuple([bop_66,])
func_69 = relay.Function([var_65,], output)
mod['func_69'] = func_69
mod = relay.transform.InferType()(mod)
mutated_mod['func_69'] = func_69
mutated_mod = relay.transform.InferType()(mutated_mod)
var_70 = relay.var("var_70", dtype = "bool", shape = (13,))#candidate|70|(13,)|var|bool
func_69_call = mutated_mod.get_global_var('func_69')
call_71 = func_69_call(var_70)
output = call_71
func_72 = relay.Function([var_70], output)
mutated_mod['func_72'] = func_72
mutated_mod = relay.transform.InferType()(mutated_mod)
var_74 = relay.var("var_74", dtype = "float32", shape = (15, 3))#candidate|74|(15, 3)|var|float32
uop_75 = relay.cosh(var_74.astype('float32')) # shape=(15, 3)
var_77 = relay.var("var_77", dtype = "float32", shape = (15, 3))#candidate|77|(15, 3)|var|float32
bop_78 = relay.maximum(var_74.astype('float32'), relay.reshape(var_77.astype('float32'), relay.shape_of(var_74))) # shape=(15, 3)
const_81 = relay.const([[7.851711,2.886502,7.661344],[3.316609,1.921263,-0.526167],[-3.682692,-3.091653,-2.106316],[-8.546795,5.050126,-6.012577],[2.867879,-5.029039,5.981409],[9.914731,5.944725,9.731092],[-3.516665,-3.704670,-2.063455],[-4.919193,-5.171647,0.704610],[-9.487629,2.878094,6.304029],[-9.620708,3.793090,-5.350048],[-2.686682,2.724128,6.533064],[-7.306931,-2.073479,6.346615],[3.690093,5.167249,5.354985],[0.755387,-3.531210,0.919557],[-7.255659,-0.896353,-1.703899]], dtype = "float32")#candidate|81|(15, 3)|const|float32
bop_82 = relay.add(uop_75.astype('int64'), relay.reshape(const_81.astype('int64'), relay.shape_of(uop_75))) # shape=(15, 3)
func_5_call = mod.get_global_var('func_5')
func_8_call = mutated_mod.get_global_var('func_8')
var_86 = relay.var("var_86", dtype = "float32", shape = (10, 52))#candidate|86|(10, 52)|var|float32
call_85 = relay.TupleGetItem(func_5_call(relay.reshape(var_86.astype('float32'), [4, 13, 10])), 0)
call_87 = relay.TupleGetItem(func_8_call(relay.reshape(var_86.astype('float32'), [4, 13, 10])), 0)
uop_88 = relay.sinh(uop_75.astype('float64')) # shape=(15, 3)
bop_90 = relay.greater(bop_78.astype('bool'), relay.reshape(uop_75.astype('bool'), relay.shape_of(bop_78))) # shape=(15, 3)
uop_93 = relay.sin(uop_88.astype('float64')) # shape=(15, 3)
bop_95 = relay.equal(uop_88.astype('bool'), relay.reshape(var_77.astype('bool'), relay.shape_of(uop_88))) # shape=(15, 3)
output = relay.Tuple([bop_82,call_85,var_86,bop_90,uop_93,bop_95,])
output2 = relay.Tuple([bop_82,call_87,var_86,bop_90,uop_93,bop_95,])
func_98 = relay.Function([var_74,var_77,var_86,], output)
mod['func_98'] = func_98
mod = relay.transform.InferType()(mod)
var_99 = relay.var("var_99", dtype = "float32", shape = (15, 3))#candidate|99|(15, 3)|var|float32
var_100 = relay.var("var_100", dtype = "float32", shape = (15, 3))#candidate|100|(15, 3)|var|float32
var_101 = relay.var("var_101", dtype = "float32", shape = (10, 52))#candidate|101|(10, 52)|var|float32
output = func_98(var_99,var_100,var_101,)
func_102 = relay.Function([var_99,var_100,var_101,], output)
mutated_mod['func_102'] = func_102
mutated_mod = relay.transform.InferType()(mutated_mod)
var_104 = relay.var("var_104", dtype = "int8", shape = (6, 1))#candidate|104|(6, 1)|var|int8
var_105 = relay.var("var_105", dtype = "int8", shape = (6, 11))#candidate|105|(6, 11)|var|int8
bop_106 = relay.maximum(var_104.astype('int8'), var_105.astype('int8')) # shape=(6, 11)
uop_109 = relay.cosh(bop_106.astype('float64')) # shape=(6, 11)
func_60_call = mod.get_global_var('func_60')
func_62_call = mutated_mod.get_global_var('func_62')
var_112 = relay.var("var_112", dtype = "uint64", shape = (108,))#candidate|112|(108,)|var|uint64
call_111 = func_60_call(relay.reshape(var_112.astype('uint64'), [9, 12]))
call_113 = func_60_call(relay.reshape(var_112.astype('uint64'), [9, 12]))
uop_114 = relay.acosh(uop_109.astype('float64')) # shape=(6, 11)
bop_116 = relay.not_equal(uop_114.astype('bool'), relay.reshape(bop_106.astype('bool'), relay.shape_of(uop_114))) # shape=(6, 11)
bop_119 = relay.less_equal(var_105.astype('bool'), relay.reshape(bop_116.astype('bool'), relay.shape_of(var_105))) # shape=(6, 11)
var_122 = relay.var("var_122", dtype = "float64", shape = (6, 11))#candidate|122|(6, 11)|var|float64
bop_123 = relay.minimum(uop_109.astype('float64'), relay.reshape(var_122.astype('float64'), relay.shape_of(uop_109))) # shape=(6, 11)
const_126 = relay.const([[False,True,True,True,True,False,False,False,False,False,False],[False,False,True,False,True,False,False,True,True,False,False],[True,False,True,True,True,False,False,False,False,False,True],[True,True,True,False,True,True,False,True,True,True,True],[False,True,False,False,True,True,True,True,True,True,True],[False,False,True,True,False,True,True,False,True,True,True]], dtype = "bool")#candidate|126|(6, 11)|const|bool
bop_127 = relay.equal(bop_116.astype('bool'), relay.reshape(const_126.astype('bool'), relay.shape_of(bop_116))) # shape=(6, 11)
output = relay.Tuple([call_111,var_112,bop_119,bop_123,bop_127,])
output2 = relay.Tuple([call_113,var_112,bop_119,bop_123,bop_127,])
func_130 = relay.Function([var_104,var_105,var_112,var_122,], output)
mod['func_130'] = func_130
mod = relay.transform.InferType()(mod)
mutated_mod['func_130'] = func_130
mutated_mod = relay.transform.InferType()(mutated_mod)
func_130_call = mutated_mod.get_global_var('func_130')
var_132 = relay.var("var_132", dtype = "int8", shape = (6, 1))#candidate|132|(6, 1)|var|int8
var_133 = relay.var("var_133", dtype = "int8", shape = (6, 11))#candidate|133|(6, 11)|var|int8
var_134 = relay.var("var_134", dtype = "uint64", shape = (108,))#candidate|134|(108,)|var|uint64
var_135 = relay.var("var_135", dtype = "float64", shape = (6, 11))#candidate|135|(6, 11)|var|float64
call_131 = func_130_call(var_132,var_133,var_134,var_135,)
output = call_131
func_136 = relay.Function([var_132,var_133,var_134,var_135,], output)
mutated_mod['func_136'] = func_136
mutated_mod = relay.transform.InferType()(mutated_mod)
var_138 = relay.var("var_138", dtype = "float32", shape = (7,))#candidate|138|(7,)|var|float32
uop_139 = relay.log10(var_138.astype('float32')) # shape=(7,)
func_35_call = mod.get_global_var('func_35')
func_41_call = mutated_mod.get_global_var('func_41')
const_142 = relay.const([5.110300,-3.523615,-2.296770,7.731021,-5.234192,9.482247,-8.646201,-6.177080,5.049967,0.276087], dtype = "float64")#candidate|142|(10,)|const|float64
const_143 = relay.const([3.408177,8.153732,1.468886,-5.095895,-2.688148,-1.364390,-9.311467,5.298098,-1.619397,7.861622,-0.402612,3.946882,5.791462,1.955649,0.953929,1.983929,-4.276617,0.286454,6.160449,8.701883,2.884545,-4.686307,6.970405,-0.821202,9.236322,-5.963109,5.749378,5.271616,8.137454,-4.774280,-1.813042,1.287397,-6.357819,-1.400816,-2.641437,6.066173,-1.830885,4.086984,3.615302,6.798480], dtype = "float64")#candidate|143|(40,)|const|float64
const_144 = relay.const([[1.325998,-7.610444,-5.305293,9.461543],[-8.396700,8.618330,5.913366,-8.348338],[8.885495,-0.526004,-6.000853,-9.829678],[-2.100761,4.357226,-4.954889,3.657203],[4.608509,4.047192,-6.650507,5.096860],[-9.689467,7.151050,-2.747957,-1.369901],[-7.155622,-4.605387,-2.320601,5.518783],[-5.672847,-0.920295,-5.653412,-5.303631],[7.149011,8.202972,-7.921296,-6.398453],[8.279672,-0.804060,0.750660,7.196048],[-1.503406,-0.686954,-1.311141,4.583393],[8.180945,-5.187398,5.720229,5.740277],[-6.006263,-8.800357,-6.922279,-5.752943],[6.221725,8.171171,2.756464,-7.571081],[7.002667,1.639470,-6.047734,-1.085697],[-6.866988,1.585463,-6.286483,-2.380791],[-0.649549,8.220376,-7.236960,-8.612044],[7.539531,-2.719007,9.929964,-0.059909],[-3.731766,-4.240090,-3.895447,-2.019294],[0.034274,0.223715,-5.172391,7.468637],[-1.331969,6.483792,-5.750482,-5.236711],[-4.411382,-9.014025,-9.336085,-8.775711],[-2.595114,0.566401,4.167350,0.405423],[-9.660182,-6.796893,0.059823,4.450894],[6.230645,-4.633530,-0.534122,1.441391],[5.361412,-7.837648,-9.876239,-5.174929],[-7.910865,5.260781,0.088335,-1.691400],[4.501399,6.528093,-9.259172,7.272431],[7.262449,1.661170,-2.702343,-2.358334],[4.124367,9.309814,0.925445,-9.105370],[-0.156694,-4.310787,3.717276,8.461971],[1.675255,8.234546,7.643687,5.184521],[-2.063559,-1.282473,9.835002,-1.036595],[-3.952517,-7.398488,-5.118276,3.088993],[6.692679,-1.446713,-2.162104,3.633226],[-9.550398,-4.536441,3.295377,5.945865],[-8.859117,8.013275,-4.275325,-2.488252],[7.875736,6.379643,-7.451210,-3.303968],[-4.491851,-6.989654,-5.691169,-1.262476],[-9.373524,-3.192721,7.740868,5.168344],[-5.424974,7.804280,-5.300099,3.538731],[9.424722,7.285954,0.683265,2.348852],[1.902788,-4.973664,8.560040,-7.429853],[0.575672,-1.231826,-7.833987,1.321919],[-4.379898,-5.490346,-0.556047,-5.679118],[-4.509083,3.975105,-8.881856,2.363623],[-5.802180,4.734315,-2.287498,1.131829],[0.609470,-3.659039,0.701274,-0.023363],[2.735063,9.656539,-7.822001,1.369722],[6.286640,-2.863625,7.638932,6.949583],[7.072145,6.801173,3.426756,-9.482329],[-4.605645,-7.708917,-5.800235,4.378574],[7.639486,8.800283,9.298760,-3.263330],[-8.609494,-0.231967,-2.699049,3.546099],[-5.290777,-0.915064,-3.765783,-7.734703],[7.181063,-6.375694,1.645160,8.608717],[-1.203338,-3.502027,8.847597,2.973767],[6.648346,0.746957,8.521600,-4.566956],[-9.999987,9.085142,4.268068,9.899167],[3.084370,-9.542830,-8.740215,1.136766],[-6.046762,-7.921212,2.447698,7.765659],[7.599117,-1.216444,-8.723940,-9.251856],[5.573939,1.135260,-8.711722,-7.111483],[-9.428930,-4.913629,-9.206406,-6.107403],[-5.543593,9.224945,-4.694295,-3.436284],[3.514583,-7.553626,0.812832,-6.375519],[9.090269,0.288445,4.997883,6.607944],[-1.283159,-2.799760,0.486548,-5.253417],[7.814308,0.621692,-5.477889,3.332302],[8.221567,2.876719,-1.793934,2.261488],[0.403232,9.320864,-9.666373,8.569696],[1.260935,-9.353934,-7.244264,-6.754202],[-4.523438,4.866381,2.198026,-6.392830],[-6.502736,-9.819652,-0.147986,-4.248112],[-8.555784,-7.219147,-0.928986,-7.291177],[4.644700,7.483816,4.524018,3.096543],[9.970458,-9.162726,2.619972,1.165984],[3.621231,-9.812593,-3.175719,2.717615],[0.613627,1.292720,3.528629,7.019848],[-2.129819,-3.236437,-4.564020,4.830124],[-7.643552,-2.783323,9.010557,-0.103587],[6.034602,-0.181203,5.349813,5.970267],[2.273653,9.658387,-8.733935,1.316632],[1.193927,-8.041125,9.644831,4.684224],[6.977996,4.317833,-5.614945,0.515868],[-2.341445,0.898965,-3.399081,-9.768253],[4.170700,-3.104510,-1.478131,7.886634],[-9.415592,1.813141,3.660719,8.889842],[3.740687,2.187313,-2.503126,3.455976],[-2.237842,1.610778,2.134296,-3.854424],[6.292226,-5.995963,-5.026145,6.703163],[5.012317,-1.774111,4.691762,-4.590208],[-0.381702,-8.444905,-6.714337,-5.827965],[-3.926357,3.487537,7.995388,3.902492],[3.681582,6.123022,2.477295,-9.200189],[9.097720,2.415326,-7.484176,8.472125],[-2.501146,-6.541079,-5.076842,0.329540],[-7.058423,-9.746116,8.222863,-5.023263],[-1.668944,-1.826105,-2.965559,-6.103769],[-0.450554,-9.077192,3.995266,2.207245],[-0.218017,3.357554,-1.829423,2.631277],[3.284445,6.546416,3.261980,7.438991],[8.741165,9.492177,-4.029290,2.245625],[-1.273239,-3.922890,-5.064035,0.540204],[2.700085,0.238872,6.365241,-2.051696],[-9.583399,3.767088,8.003961,8.282655],[2.033947,-7.555576,7.922753,-6.109154],[8.326989,9.124154,-0.742650,-8.754596],[9.447290,-7.027713,8.240250,-1.161500],[-6.646667,5.682986,-4.305708,-3.524843],[-7.844687,-8.774324,-9.418467,3.086427],[6.483142,2.336513,4.918017,8.151410],[9.556263,0.345546,-3.643308,2.550668],[-4.096639,-6.184018,5.204026,-7.795886],[7.630665,9.189058,4.925804,1.132149],[-8.692782,-1.124942,3.201893,-8.529241],[7.450057,6.669963,1.030954,-5.823961],[0.704518,7.168804,1.471610,-6.063313],[-7.626660,4.709367,-1.477816,-5.534372],[0.652401,-4.914347,-1.720337,-6.353011],[2.362326,0.469963,-1.692432,-4.833092],[-3.308442,-9.382537,0.854504,-1.307624],[3.164841,4.363384,-8.639526,-6.490355],[-7.975551,-4.386431,6.434524,6.502167],[-2.889197,-8.006923,-2.859784,7.202390],[-6.917953,4.824318,-7.885085,6.038564],[3.989766,-5.223175,-7.338601,8.458823],[2.886325,2.705934,-0.833965,7.808788],[8.366459,3.463959,-7.104701,-4.999423],[7.403723,-0.918690,5.238016,7.648393]], dtype = "float32")#candidate|144|(130, 4)|const|float32
call_141 = relay.TupleGetItem(func_35_call(relay.reshape(const_142.astype('float64'), [5, 2, 1]), relay.reshape(const_143.astype('float64'), [5, 2, 4]), relay.reshape(const_144.astype('float32'), [520,]), relay.reshape(const_144.astype('float32'), [520,]), ), 1)
call_145 = relay.TupleGetItem(func_41_call(relay.reshape(const_142.astype('float64'), [5, 2, 1]), relay.reshape(const_143.astype('float64'), [5, 2, 4]), relay.reshape(const_144.astype('float32'), [520,]), relay.reshape(const_144.astype('float32'), [520,]), ), 1)
func_52_call = mod.get_global_var('func_52')
func_54_call = mutated_mod.get_global_var('func_54')
call_146 = func_52_call()
call_147 = func_52_call()
uop_148 = relay.cos(call_146.astype('float32')) # shape=(6, 13, 10)
uop_150 = relay.cos(call_147.astype('float32')) # shape=(6, 13, 10)
output = relay.Tuple([uop_139,call_141,const_142,const_143,const_144,uop_148,])
output2 = relay.Tuple([uop_139,call_145,const_142,const_143,const_144,uop_150,])
func_151 = relay.Function([var_138,], output)
mod['func_151'] = func_151
mod = relay.transform.InferType()(mod)
mutated_mod['func_151'] = func_151
mutated_mod = relay.transform.InferType()(mutated_mod)
var_152 = relay.var("var_152", dtype = "float32", shape = (7,))#candidate|152|(7,)|var|float32
func_151_call = mutated_mod.get_global_var('func_151')
call_153 = func_151_call(var_152)
output = call_153
func_154 = relay.Function([var_152], output)
mutated_mod['func_154'] = func_154
mutated_mod = relay.transform.InferType()(mutated_mod)
var_156 = relay.var("var_156", dtype = "float32", shape = (1, 16))#candidate|156|(1, 16)|var|float32
uop_157 = relay.sigmoid(var_156.astype('float32')) # shape=(1, 16)
uop_159 = relay.cosh(uop_157.astype('float32')) # shape=(1, 16)
bop_161 = relay.power(uop_159.astype('float64'), relay.reshape(uop_157.astype('float64'), relay.shape_of(uop_159))) # shape=(1, 16)
bop_164 = relay.logical_or(uop_157.astype('bool'), relay.reshape(var_156.astype('bool'), relay.shape_of(uop_157))) # shape=(1, 16)
uop_167 = relay.log2(uop_159.astype('float64')) # shape=(1, 16)
uop_169 = relay.log2(uop_167.astype('float32')) # shape=(1, 16)
func_5_call = mod.get_global_var('func_5')
func_8_call = mutated_mod.get_global_var('func_8')
var_172 = relay.var("var_172", dtype = "float32", shape = (520,))#candidate|172|(520,)|var|float32
call_171 = relay.TupleGetItem(func_5_call(relay.reshape(var_172.astype('float32'), [4, 13, 10])), 0)
call_173 = relay.TupleGetItem(func_8_call(relay.reshape(var_172.astype('float32'), [4, 13, 10])), 0)
bop_174 = relay.equal(uop_167.astype('bool'), relay.reshape(uop_169.astype('bool'), relay.shape_of(uop_167))) # shape=(1, 16)
bop_177 = relay.minimum(uop_169.astype('uint16'), relay.reshape(bop_174.astype('uint16'), relay.shape_of(uop_169))) # shape=(1, 16)
bop_180 = relay.right_shift(bop_174.astype('int8'), relay.reshape(uop_169.astype('int8'), relay.shape_of(bop_174))) # shape=(1, 16)
bop_183 = relay.not_equal(bop_180.astype('bool'), relay.reshape(uop_159.astype('bool'), relay.shape_of(bop_180))) # shape=(1, 16)
uop_186 = relay.cos(bop_183.astype('float64')) # shape=(1, 16)
bop_188 = relay.bitwise_xor(bop_180.astype('uint32'), relay.reshape(var_156.astype('uint32'), relay.shape_of(bop_180))) # shape=(1, 16)
uop_191 = relay.sqrt(uop_169.astype('float32')) # shape=(1, 16)
bop_193 = relay.right_shift(uop_186.astype('int64'), relay.reshape(bop_174.astype('int64'), relay.shape_of(uop_186))) # shape=(1, 16)
func_5_call = mod.get_global_var('func_5')
func_8_call = mutated_mod.get_global_var('func_8')
call_196 = relay.TupleGetItem(func_5_call(relay.reshape(call_171.astype('float32'), [4, 13, 10])), 0)
call_197 = relay.TupleGetItem(func_8_call(relay.reshape(call_171.astype('float32'), [4, 13, 10])), 0)
uop_198 = relay.cos(bop_183.astype('float64')) # shape=(1, 16)
bop_200 = relay.floor_divide(uop_159.astype('float32'), relay.reshape(bop_188.astype('float32'), relay.shape_of(uop_159))) # shape=(1, 16)
uop_203 = relay.log10(uop_198.astype('float64')) # shape=(1, 16)
bop_205 = relay.logical_and(uop_203.astype('bool'), relay.reshape(bop_164.astype('bool'), relay.shape_of(uop_203))) # shape=(1, 16)
var_208 = relay.var("var_208", dtype = "bool", shape = (12, 16))#candidate|208|(12, 16)|var|bool
bop_209 = relay.divide(bop_205.astype('float64'), var_208.astype('float64')) # shape=(12, 16)
bop_212 = relay.left_shift(bop_209.astype('uint16'), bop_188.astype('uint16')) # shape=(12, 16)
bop_215 = relay.greater_equal(bop_212.astype('bool'), uop_186.astype('bool')) # shape=(12, 16)
bop_218 = relay.bitwise_or(bop_193.astype('int8'), relay.reshape(bop_164.astype('int8'), relay.shape_of(bop_193))) # shape=(1, 16)
uop_221 = relay.sinh(bop_205.astype('float64')) # shape=(1, 16)
output = relay.Tuple([bop_161,call_171,var_172,bop_177,uop_191,call_196,bop_200,bop_215,bop_218,uop_221,])
output2 = relay.Tuple([bop_161,call_173,var_172,bop_177,uop_191,call_197,bop_200,bop_215,bop_218,uop_221,])
func_223 = relay.Function([var_156,var_172,var_208,], output)
mod['func_223'] = func_223
mod = relay.transform.InferType()(mod)
var_224 = relay.var("var_224", dtype = "float32", shape = (1, 16))#candidate|224|(1, 16)|var|float32
var_225 = relay.var("var_225", dtype = "float32", shape = (520,))#candidate|225|(520,)|var|float32
var_226 = relay.var("var_226", dtype = "bool", shape = (12, 16))#candidate|226|(12, 16)|var|bool
output = func_223(var_224,var_225,var_226,)
func_227 = relay.Function([var_224,var_225,var_226,], output)
mutated_mod['func_227'] = func_227
mutated_mod = relay.transform.InferType()(mutated_mod)
const_229 = relay.const([-3.680094,5.876464,0.656792,-9.617675,-7.346864,-1.192459,-2.371687,3.224291,9.331709,3.052378], dtype = "float32")#candidate|229|(10,)|const|float32
uop_230 = relay.sqrt(const_229.astype('float32')) # shape=(10,)
uop_232 = relay.acosh(const_229.astype('float32')) # shape=(10,)
bop_234 = relay.less_equal(const_229.astype('bool'), relay.reshape(uop_232.astype('bool'), relay.shape_of(const_229))) # shape=(10,)
uop_237 = relay.sinh(uop_232.astype('float32')) # shape=(10,)
var_239 = relay.var("var_239", dtype = "float32", shape = (10,))#candidate|239|(10,)|var|float32
bop_240 = relay.bitwise_xor(uop_237.astype('uint8'), relay.reshape(var_239.astype('uint8'), relay.shape_of(uop_237))) # shape=(10,)
var_243 = relay.var("var_243", dtype = "uint8", shape = (10,))#candidate|243|(10,)|var|uint8
bop_244 = relay.mod(bop_240.astype('float32'), relay.reshape(var_243.astype('float32'), relay.shape_of(bop_240))) # shape=(10,)
output = relay.Tuple([uop_230,bop_234,bop_244,])
output2 = relay.Tuple([uop_230,bop_234,bop_244,])
func_247 = relay.Function([var_239,var_243,], output)
mod['func_247'] = func_247
mod = relay.transform.InferType()(mod)
mutated_mod['func_247'] = func_247
mutated_mod = relay.transform.InferType()(mutated_mod)
func_247_call = mutated_mod.get_global_var('func_247')
var_249 = relay.var("var_249", dtype = "float32", shape = (10,))#candidate|249|(10,)|var|float32
var_250 = relay.var("var_250", dtype = "uint8", shape = (10,))#candidate|250|(10,)|var|uint8
call_248 = func_247_call(var_249,var_250,)
output = call_248
func_251 = relay.Function([var_249,var_250,], output)
mutated_mod['func_251'] = func_251
mutated_mod = relay.transform.InferType()(mutated_mod)
var_253 = relay.var("var_253", dtype = "float32", shape = ())#candidate|253|()|var|float32
uop_254 = relay.log10(var_253.astype('float32')) # shape=()
var_256 = relay.var("var_256", dtype = "float32", shape = (12, 6))#candidate|256|(12, 6)|var|float32
bop_257 = relay.mod(var_253.astype('float32'), var_256.astype('float32')) # shape=(12, 6)
uop_260 = relay.erf(uop_254.astype('float64')) # shape=()
var_262 = relay.var("var_262", dtype = "float64", shape = (13, 4, 12))#candidate|262|(13, 4, 12)|var|float64
bop_263 = relay.logical_xor(uop_260.astype('uint32'), var_262.astype('uint32')) # shape=(13, 4, 12)
uop_266 = relay.sqrt(uop_260.astype('float32')) # shape=()
uop_268 = relay.cosh(uop_266.astype('float64')) # shape=()
var_270 = relay.var("var_270", dtype = "float32", shape = (8, 1))#candidate|270|(8, 1)|var|float32
bop_271 = relay.floor_divide(uop_266.astype('float32'), var_270.astype('float32')) # shape=(8, 1)
uop_274 = relay.tan(uop_268.astype('float32')) # shape=()
uop_276 = relay.tan(uop_274.astype('float64')) # shape=()
bop_278 = relay.bitwise_xor(uop_276.astype('int16'), var_270.astype('int16')) # shape=(8, 1)
bop_281 = relay.add(uop_274.astype('uint16'), bop_278.astype('uint16')) # shape=(8, 1)
uop_284 = relay.erf(uop_274.astype('float32')) # shape=()
uop_286 = relay.asinh(uop_276.astype('float64')) # shape=()
bop_288 = relay.divide(uop_274.astype('float32'), uop_284.astype('float32')) # shape=()
bop_291 = relay.divide(uop_286.astype('float32'), uop_284.astype('float32')) # shape=()
uop_294 = relay.log10(uop_274.astype('float64')) # shape=()
output = relay.Tuple([bop_257,bop_263,bop_271,bop_281,bop_288,bop_291,uop_294,])
output2 = relay.Tuple([bop_257,bop_263,bop_271,bop_281,bop_288,bop_291,uop_294,])
func_296 = relay.Function([var_253,var_256,var_262,var_270,], output)
mod['func_296'] = func_296
mod = relay.transform.InferType()(mod)
var_297 = relay.var("var_297", dtype = "float32", shape = ())#candidate|297|()|var|float32
var_298 = relay.var("var_298", dtype = "float32", shape = (12, 6))#candidate|298|(12, 6)|var|float32
var_299 = relay.var("var_299", dtype = "float64", shape = (13, 4, 12))#candidate|299|(13, 4, 12)|var|float64
var_300 = relay.var("var_300", dtype = "float32", shape = (8, 1))#candidate|300|(8, 1)|var|float32
output = func_296(var_297,var_298,var_299,var_300,)
func_301 = relay.Function([var_297,var_298,var_299,var_300,], output)
mutated_mod['func_301'] = func_301
mutated_mod = relay.transform.InferType()(mutated_mod)
const_303 = relay.const(9.677875, dtype = "float64")#candidate|303|()|const|float64
uop_304 = relay.sinh(const_303.astype('float64')) # shape=()
bop_306 = relay.maximum(const_303.astype('uint64'), uop_304.astype('uint64')) # shape=()
bop_309 = relay.floor_divide(bop_306.astype('float32'), const_303.astype('float32')) # shape=()
bop_312 = relay.divide(bop_306.astype('float32'), uop_304.astype('float32')) # shape=()
bop_315 = relay.left_shift(bop_309.astype('uint8'), bop_312.astype('uint8')) # shape=()
bop_318 = relay.maximum(bop_312.astype('uint8'), bop_306.astype('uint8')) # shape=()
uop_321 = relay.log10(bop_315.astype('float32')) # shape=()
var_323 = relay.var("var_323", dtype = "float32", shape = (8, 8))#candidate|323|(8, 8)|var|float32
bop_324 = relay.floor_divide(bop_312.astype('float32'), var_323.astype('float32')) # shape=(8, 8)
uop_327 = relay.asin(uop_321.astype('float64')) # shape=()
const_329 = relay.const(-6.575774, dtype = "float32")#candidate|329|()|const|float32
bop_330 = relay.logical_and(uop_321.astype('bool'), const_329.astype('bool')) # shape=()
bop_333 = relay.floor_mod(const_303.astype('float32'), bop_306.astype('float32')) # shape=()
uop_336 = relay.sin(bop_333.astype('float64')) # shape=()
bop_338 = relay.left_shift(uop_327.astype('int16'), bop_315.astype('int16')) # shape=()
var_341 = relay.var("var_341", dtype = "float64", shape = (7, 11, 3))#candidate|341|(7, 11, 3)|var|float64
bop_342 = relay.divide(uop_327.astype('float64'), var_341.astype('float64')) # shape=(7, 11, 3)
bop_345 = relay.bitwise_xor(bop_330.astype('uint16'), bop_312.astype('uint16')) # shape=()
uop_348 = relay.sigmoid(bop_345.astype('float64')) # shape=()
var_350 = relay.var("var_350", dtype = "float64", shape = (7, 11, 3))#candidate|350|(7, 11, 3)|var|float64
bop_351 = relay.mod(bop_342.astype('float64'), relay.reshape(var_350.astype('float64'), relay.shape_of(bop_342))) # shape=(7, 11, 3)
bop_354 = relay.multiply(uop_327.astype('int16'), const_303.astype('int16')) # shape=()
bop_357 = relay.less_equal(bop_338.astype('bool'), bop_312.astype('bool')) # shape=()
uop_360 = relay.sqrt(bop_351.astype('float32')) # shape=(7, 11, 3)
var_362 = relay.var("var_362", dtype = "float32", shape = (7, 11, 3))#candidate|362|(7, 11, 3)|var|float32
bop_363 = relay.add(uop_360.astype('float32'), relay.reshape(var_362.astype('float32'), relay.shape_of(uop_360))) # shape=(7, 11, 3)
uop_366 = relay.sin(bop_363.astype('float32')) # shape=(7, 11, 3)
bop_368 = relay.floor_mod(uop_366.astype('float64'), bop_312.astype('float64')) # shape=(7, 11, 3)
uop_371 = relay.sqrt(uop_366.astype('float64')) # shape=(7, 11, 3)
uop_373 = relay.asinh(uop_336.astype('float64')) # shape=()
bop_375 = relay.right_shift(uop_371.astype('int32'), bop_306.astype('int32')) # shape=(7, 11, 3)
output = relay.Tuple([bop_318,bop_324,uop_348,bop_354,bop_357,bop_368,uop_373,bop_375,])
output2 = relay.Tuple([bop_318,bop_324,uop_348,bop_354,bop_357,bop_368,uop_373,bop_375,])
F = relay.Function([var_323,var_341,var_350,var_362,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_323,var_341,var_350,var_362,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_323= np.array([[0.624778,1.849045,-8.956294,8.422015,-4.821268,-0.717210,4.899996,-8.471667],[-3.769762,4.444363,-6.304678,-2.653182,-5.611652,6.561674,-0.754476,0.244409],[5.930287,-2.489296,-3.440079,6.289164,8.342758,-9.663126,8.941804,0.131362],[-2.356510,-7.544548,2.751735,-8.665088,-8.177086,5.585661,6.978148,-5.318602],[0.264802,-2.303976,1.449129,5.725066,1.257413,3.617718,-4.393793,3.687024],[4.605583,-1.950183,-5.756366,-8.577293,-1.080585,8.586021,-5.866813,-6.066731],[0.149344,8.098612,-8.412589,5.962491,-5.128663,-3.784072,2.571522,2.537996],[3.008735,1.563750,-2.939295,-5.456768,-3.405173,8.122980,-8.585113,-3.975888]], dtype='float32')
module1.set_input('var_323', input_323)
input_341= np.array([[[-8.108569,-2.952200,-4.222519],[6.384898,-5.970476,-7.913436],[0.252592,-6.626436,3.109720],[-9.545176,2.014915,-3.505135],[-8.065829,-8.620219,6.746801],[-2.608748,9.580113,-0.615455],[-3.660327,-3.596982,9.252410],[5.438536,4.630538,-7.741453],[7.991161,-7.304276,3.766140],[-8.011730,-6.947793,-1.570118],[-6.110010,-9.153953,4.500693]],[[1.677121,-1.102295,-1.338033],[-9.292710,-3.188126,5.483687],[-0.386894,6.943539,6.766992],[3.893926,-8.143547,3.741957],[4.386005,-0.209101,4.454666],[-1.960418,2.169016,-7.209936],[9.310553,0.394961,-4.801417],[-0.693456,-9.043001,-2.067400],[-9.459894,8.775423,6.771479],[-7.276849,-2.997002,-1.918135],[-5.186025,7.275635,9.601165]],[[-2.484736,-4.754591,-1.133039],[-2.775776,-6.078213,-1.963859],[6.351300,-8.095556,-0.412355],[0.962241,1.375848,4.717309],[2.275702,-0.483896,5.081814],[-5.804069,-6.410467,-8.383951],[-7.298467,2.947699,5.871776],[5.896936,0.718627,5.413721],[6.072728,-0.090649,2.970885],[5.079220,5.339158,3.324206],[0.439080,-8.690649,-7.941479]],[[0.117987,-3.704927,2.471154],[-6.797103,-8.952535,0.131939],[3.992345,-8.981337,1.348099],[2.372805,-3.622439,-5.945016],[-8.783721,9.498857,-2.526498],[7.640257,-9.029226,-0.348566],[5.770053,-4.726637,-8.773090],[7.281301,3.987586,2.058169],[1.515262,9.691815,-5.034079],[5.405344,0.395348,8.259740],[0.964953,1.594330,-2.916355]],[[8.150589,4.626336,8.725595],[6.805694,7.632309,-1.676935],[5.049039,-5.875058,1.264376],[5.666953,3.302535,-1.058118],[-4.278084,0.457742,7.501019],[9.872600,6.208953,9.629167],[8.350443,6.340087,7.537640],[1.452685,-8.194344,6.162449],[-3.555415,-6.025876,7.444648],[0.121687,-3.059381,-0.247459],[-1.808545,1.065425,-7.874674]],[[7.202308,0.574691,-4.765345],[-1.936311,-3.764250,9.137498],[7.864134,-0.037611,0.997998],[-6.129940,6.243763,5.283421],[-1.196035,0.961190,5.484571],[-4.540200,0.806979,-7.792796],[-6.602083,-1.073750,9.811154],[-1.311437,5.592829,-8.932462],[8.187242,0.881754,-4.347161],[-3.033298,1.706896,-2.557943],[6.003075,5.225069,-2.738260]],[[-4.653409,-3.208603,3.200911],[4.689178,-7.466456,-6.267716],[7.932577,6.668002,-4.605735],[-5.404290,0.941475,4.917247],[-3.499900,-8.588603,1.686176],[9.739033,-0.075340,-0.551376],[6.887009,7.182472,9.709126],[7.476869,6.278380,8.139311],[-1.643966,-9.020132,5.969224],[6.770929,-8.938632,0.955876],[-5.611723,-2.039380,4.048728]]], dtype='float64')
module1.set_input('var_341', input_341)
input_350= np.array([[[1.813036,-7.768155,-8.920925],[-9.369454,-0.872640,6.518253],[-8.988395,8.069093,8.069383],[-2.091865,0.479796,-8.930364],[-8.675813,4.226259,6.187662],[-4.579783,-5.251439,-2.299926],[-6.958847,-8.668181,-9.670243],[-7.360585,5.582347,-2.242354],[9.079534,3.439183,5.195401],[9.899733,-4.493266,-7.971600],[3.620981,-0.221231,8.637302]],[[3.165224,-4.950657,4.612014],[4.581825,8.252050,9.657529],[1.757898,-8.929114,6.603389],[-7.781921,3.409213,-5.896459],[3.445711,-5.066726,7.309880],[-3.787896,3.991973,-4.175573],[6.493971,0.188992,-9.679241],[-7.566654,3.844906,-7.462046],[6.847608,7.256878,2.623428],[-5.010878,-4.879406,6.056402],[7.931787,-3.677312,-7.740062]],[[8.152982,-3.109914,-6.709654],[4.041026,-8.011577,1.135374],[-6.382792,3.787852,2.965630],[3.188186,6.642261,7.139624],[5.656101,-9.650806,4.607811],[-0.307442,2.870937,4.856377],[3.485391,-9.334933,3.003028],[-6.707885,-0.786744,-8.924845],[-5.764785,-3.556464,2.988991],[-2.974541,-3.724273,-4.095913],[5.333709,-9.694282,0.098074]],[[-4.384193,-3.093588,-7.793682],[-1.170816,5.264815,-1.759176],[2.036183,1.657233,4.589875],[2.490823,1.099898,-7.187363],[7.237185,-5.221495,-8.627190],[-0.121074,-5.886392,-6.922416],[-8.254026,3.241856,0.484105],[4.119746,6.190463,-9.584657],[4.448781,-9.226236,9.407955],[-9.921473,7.602149,-9.868501],[-1.166893,-0.349720,-3.848370]],[[4.580344,-3.760751,-6.050698],[6.529876,-2.354720,5.465938],[9.120025,-2.507398,2.383060],[-9.714677,-9.505297,9.120004],[-3.981230,5.098238,-8.149625],[1.166901,9.048959,3.967603],[3.684246,1.104848,2.944003],[5.598546,-5.359150,-7.601060],[9.726110,7.027395,-7.548365],[3.553559,2.592335,-4.154952],[-2.328760,2.364089,8.546543]],[[6.022643,2.895058,-7.954691],[0.595627,9.202148,9.258657],[-8.191854,4.813946,-5.101644],[-5.175879,-5.681874,0.931033],[4.189683,-5.690423,2.694282],[8.617723,-7.114626,7.066438],[5.473672,-3.088160,-8.978693],[4.541549,1.299902,9.072999],[-8.124832,8.989909,7.803070],[7.874729,-4.700699,1.694552],[9.063801,-3.301504,-4.246515]],[[-6.739038,6.831394,-6.781310],[-2.059053,-7.752226,-7.320977],[-8.217336,9.455008,2.813922],[-3.871602,0.609410,-2.289205],[-0.274252,-4.076182,-1.032409],[-5.859415,-0.371307,5.401892],[-8.588378,-8.974291,2.006316],[-9.607610,-0.600351,9.447752],[-7.579169,-6.358557,-0.332492],[-3.067214,2.476019,-3.202149],[5.859108,-0.101849,-2.108028]]], dtype='float64')
module1.set_input('var_350', input_350)
input_362= np.array([[[9.765376,-6.694150,0.900327],[-3.456887,5.321287,3.113200],[3.957751,-6.314232,6.951850],[-6.628714,4.016157,-9.896543],[6.541036,-8.199059,-5.643312],[-7.385675,3.509296,1.024269],[-7.475295,-0.942047,-9.663998],[6.633881,0.174798,-1.293683],[-3.795123,6.026472,-1.894484],[7.105111,1.176913,8.456601],[-6.763807,4.316021,-0.568849]],[[-7.919616,7.781216,-0.868357],[-3.200661,9.409286,1.648904],[7.077199,-5.986055,5.621363],[-4.567430,5.330569,3.927666],[4.623816,-7.640114,5.981390],[-8.469200,7.431944,7.447617],[6.692900,9.362832,8.380245],[-7.768037,7.485100,2.479091],[6.814903,9.173437,-9.655836],[-6.780806,8.228387,-6.921132],[7.720888,-1.016995,-8.179716]],[[8.896159,-6.792755,-5.199883],[8.018992,-2.261479,-3.896566],[-3.516523,5.690902,-7.982548],[-1.299589,-3.849983,7.389184],[-9.693629,3.147184,8.037754],[-6.459920,9.549936,-3.711767],[1.637455,0.505082,-6.717124],[2.866786,7.282133,-0.669805],[-7.903678,-6.380956,-2.301553],[-2.401403,9.808895,-0.484268],[8.254063,2.263711,5.537862]],[[7.350496,2.897630,-3.704397],[-2.065733,-9.919655,-6.373078],[6.476672,9.039077,0.959740],[8.854213,4.229138,1.271422],[2.285660,-4.820281,-3.767494],[-1.289296,-7.082406,-3.663869],[1.696241,7.572342,-2.307141],[6.854961,-6.145035,-8.170920],[-6.823599,1.099316,-7.411962],[7.956724,-4.687553,-9.036791],[4.199769,-9.936051,-3.316029]],[[-0.930154,8.052266,-5.886412],[-8.962862,8.387425,-1.270531],[-5.669983,9.505963,-0.859347],[4.770900,0.231296,-0.515381],[-4.377836,5.099858,6.109791],[0.643763,7.604809,6.479738],[-3.614925,8.151643,2.062096],[4.693314,4.150179,8.686843],[-0.058303,2.592859,-5.049561],[9.915020,-5.794358,3.164894],[4.698269,0.932981,6.547386]],[[-0.606059,-2.414136,9.055393],[4.841213,-6.258625,1.484689],[7.910392,-1.069347,-9.895596],[-0.204203,9.046865,-5.308296],[-8.727962,5.128717,-3.910512],[8.211131,-3.745616,3.706230],[0.705318,4.645402,8.292078],[1.674594,-4.781512,2.706714],[6.018690,0.940444,-3.379275],[2.335332,6.134222,0.898665],[-3.867255,-1.796692,-4.767287]],[[-4.689789,-1.484278,3.956550],[4.742716,-5.945999,-5.626650],[-3.554151,1.721729,-0.523557],[9.579482,2.662163,-0.439331],[-9.307344,2.779916,-2.329923],[-5.896661,7.650951,-4.761705],[-7.779025,3.999196,1.372636],[1.230280,9.253872,8.554211],[-6.884400,-8.172604,3.918875],[-1.687344,4.871374,-6.406954],[-6.886162,-2.846932,-8.910626]]], dtype='float32')
module1.set_input('var_362', input_362)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_323, input_341, input_350, input_362, )
res3 = intrp3.evaluate()(input_323, input_341, input_350, input_362, )
res4 = intrp4.evaluate()(input_323, input_341, input_350, input_362, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
module5.set_input('var_323', input_323)
module5.set_input('var_341', input_341)
module5.set_input('var_350', input_350)
module5.set_input('var_362', input_362)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_323, input_341, input_350, input_362, )
res7 = intrp7.evaluate()(input_323, input_341, input_350, input_362, )
res8 = intrp8.evaluate()(input_323, input_341, input_350, input_362, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
module9.set_input('var_323', input_323)
module9.set_input('var_341', input_341)
module9.set_input('var_350', input_350)
module9.set_input('var_362', input_362)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_323, input_341, input_350, input_362, )
res11 = intrp11.evaluate()(input_323, input_341, input_350, input_362, )
res12 = intrp12.evaluate()(input_323, input_341, input_350, input_362, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
module13.set_input('var_323', input_323)
module13.set_input('var_341', input_341)
module13.set_input('var_350', input_350)
module13.set_input('var_362', input_362)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_323, input_341, input_350, input_362, )
res15 = intrp15.evaluate()(input_323, input_341, input_350, input_362, )
res16 = intrp16.evaluate()(input_323, input_341, input_350, input_362, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
module17.set_input('var_323', input_323)
module17.set_input('var_341', input_341)
module17.set_input('var_350', input_350)
module17.set_input('var_362', input_362)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_323, input_341, input_350, input_362, )
res19 = intrp19.evaluate()(input_323, input_341, input_350, input_362, )
res20 = intrp20.evaluate()(input_323, input_341, input_350, input_362, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
module21.set_input('var_323', input_323)
module21.set_input('var_341', input_341)
module21.set_input('var_350', input_350)
module21.set_input('var_362', input_362)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_323, input_341, input_350, input_362, )
res23 = intrp23.evaluate()(input_323, input_341, input_350, input_362, )
res24 = intrp24.evaluate()(input_323, input_341, input_350, input_362, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()

'''63: TVMFuncCall
62: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
61: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
60: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
59: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
58: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
57: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
56: tvm::transform::Pass::operator()(tvm::IRModule) const
55: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
54: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
53: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
52: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
51: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
50: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
49: tvm::transform::Pass::operator()(tvm::IRModule) const
48: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
47: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
46: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
45: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
44: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
43: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
42: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
41: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
40: _ZN3tvm5relay9transform22Devic
39: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
38: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
37: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
36: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
35: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
34: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
33: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
32: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
31: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
30: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
29: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
28: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
27: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
26: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::te::Tensor, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
25: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::runtime::ObjectRef, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
24: tvm::LowerWithPassList(tvm::IRModule, tvm::runtime::Array<tvm::transform::Pass, void>)
23: tvm::transform::Pass::operator()(tvm::IRModule) const
22: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
21: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
20: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
19: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: _ZNSt17_Function_handlerIFvN3tvm7
17: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
16: tvm::tir::DataTypeRewriter::operator()(tvm::tir::Stmt)
15: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
14: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::ForNode const*)
13: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::ForNode const*)
12: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
11: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
10: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::ForNode const*)
9: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::ForNode const*)
8: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
7: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
6: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::StoreNode const*)
5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
4: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
3: _ZThn16_N3tvm3tir16DataTyp
2: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
1: tvm::operator>>(tvm::PrimExpr, tvm::PrimExpr)
0: tvm::right_shift(tvm::PrimExpr, tvm::PrimExpr, tvm::Span)

'''