import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (6,))#candidate|0|(6,)|var|float64
uop_1 = relay.acosh(var_0.astype('float64')) # shape=(6,)
bop_3 = relay.less_equal(uop_1.astype('bool'), relay.reshape(var_0.astype('bool'), relay.shape_of(uop_1))) # shape=(6,)
uop_6 = relay.asin(bop_3.astype('float32')) # shape=(6,)
bop_8 = relay.logical_xor(uop_6.astype('int8'), relay.reshape(uop_1.astype('int8'), relay.shape_of(uop_6))) # shape=(6,)
uop_11 = relay.sqrt(bop_8.astype('float32')) # shape=(6,)
output = relay.Tuple([uop_11,])
output2 = relay.Tuple([uop_11,])
func_13 = relay.Function([var_0,], output)
mod['func_13'] = func_13
mod = relay.transform.InferType()(mod)
var_14 = relay.var("var_14", dtype = "float64", shape = (6,))#candidate|14|(6,)|var|float64
output = func_13(var_14)
func_15 = relay.Function([var_14], output)
mutated_mod['func_15'] = func_15
mutated_mod = relay.transform.InferType()(mutated_mod)
const_17 = relay.const([-6.520000,-2.243535,-8.975797], dtype = "float64")#candidate|17|(3,)|const|float64
uop_18 = relay.acosh(const_17.astype('float64')) # shape=(3,)
uop_20 = relay.rsqrt(uop_18.astype('float64')) # shape=(3,)
uop_22 = relay.cos(const_17.astype('float64')) # shape=(3,)
bop_24 = relay.logical_and(uop_20.astype('bool'), relay.reshape(uop_22.astype('bool'), relay.shape_of(uop_20))) # shape=(3,)
uop_27 = relay.asin(const_17.astype('float32')) # shape=(3,)
uop_29 = relay.sqrt(uop_27.astype('float32')) # shape=(3,)
uop_31 = relay.acos(uop_29.astype('float64')) # shape=(3,)
uop_33 = relay.atanh(uop_27.astype('float32')) # shape=(3,)
bop_35 = relay.mod(uop_31.astype('float32'), relay.reshape(uop_27.astype('float32'), relay.shape_of(uop_31))) # shape=(3,)
uop_38 = relay.rsqrt(uop_31.astype('float32')) # shape=(3,)
const_40 = relay.const([-2.327171,-7.255947,1.787343], dtype = "float64")#candidate|40|(3,)|const|float64
bop_41 = relay.bitwise_or(uop_18.astype('int8'), relay.reshape(const_40.astype('int8'), relay.shape_of(uop_18))) # shape=(3,)
bop_44 = relay.maximum(bop_35.astype('uint32'), relay.reshape(uop_18.astype('uint32'), relay.shape_of(bop_35))) # shape=(3,)
func_13_call = mod.get_global_var('func_13')
func_15_call = mutated_mod.get_global_var('func_15')
const_48 = relay.const([-2.494324,-9.741799,-7.444596,-1.670507,0.612989,0.883521], dtype = "float64")#candidate|48|(6,)|const|float64
call_47 = relay.TupleGetItem(func_13_call(relay.reshape(const_48.astype('float64'), [6,])), 0)
call_49 = relay.TupleGetItem(func_15_call(relay.reshape(const_48.astype('float64'), [6,])), 0)
var_50 = relay.var("var_50", dtype = "float64", shape = (3,))#candidate|50|(3,)|var|float64
bop_51 = relay.logical_xor(uop_31.astype('uint64'), relay.reshape(var_50.astype('uint64'), relay.shape_of(uop_31))) # shape=(3,)
uop_54 = relay.asinh(bop_44.astype('float64')) # shape=(3,)
uop_56 = relay.sigmoid(uop_54.astype('float64')) # shape=(3,)
const_58 = relay.const([-4.333128,1.743434,4.165847], dtype = "float64")#candidate|58|(3,)|const|float64
bop_59 = relay.bitwise_or(uop_56.astype('int32'), relay.reshape(const_58.astype('int32'), relay.shape_of(uop_56))) # shape=(3,)
bop_62 = relay.minimum(bop_59.astype('uint8'), relay.reshape(const_17.astype('uint8'), relay.shape_of(bop_59))) # shape=(3,)
bop_65 = relay.less_equal(bop_62.astype('bool'), relay.reshape(uop_33.astype('bool'), relay.shape_of(bop_62))) # shape=(3,)
bop_68 = relay.power(uop_38.astype('float64'), relay.reshape(uop_33.astype('float64'), relay.shape_of(uop_38))) # shape=(3,)
uop_71 = relay.acos(bop_51.astype('float32')) # shape=(3,)
bop_73 = relay.bitwise_or(uop_54.astype('int32'), relay.reshape(bop_44.astype('int32'), relay.shape_of(uop_54))) # shape=(3,)
bop_76 = relay.equal(bop_59.astype('bool'), relay.reshape(uop_71.astype('bool'), relay.shape_of(bop_59))) # shape=(3,)
uop_79 = relay.tan(uop_38.astype('float32')) # shape=(3,)
uop_81 = relay.rsqrt(bop_59.astype('float32')) # shape=(3,)
output = relay.Tuple([bop_24,bop_41,call_47,const_48,bop_65,bop_68,bop_73,bop_76,uop_79,uop_81,])
output2 = relay.Tuple([bop_24,bop_41,call_49,const_48,bop_65,bop_68,bop_73,bop_76,uop_79,uop_81,])
func_83 = relay.Function([var_50,], output)
mod['func_83'] = func_83
mod = relay.transform.InferType()(mod)
mutated_mod['func_83'] = func_83
mutated_mod = relay.transform.InferType()(mutated_mod)
var_84 = relay.var("var_84", dtype = "float64", shape = (3,))#candidate|84|(3,)|var|float64
func_83_call = mutated_mod.get_global_var('func_83')
call_85 = func_83_call(var_84)
output = call_85
func_86 = relay.Function([var_84], output)
mutated_mod['func_86'] = func_86
mutated_mod = relay.transform.InferType()(mutated_mod)
var_88 = relay.var("var_88", dtype = "float32", shape = ())#candidate|88|()|var|float32
uop_89 = relay.acos(var_88.astype('float32')) # shape=()
uop_91 = relay.acos(var_88.astype('float64')) # shape=()
bop_93 = relay.greater(uop_89.astype('bool'), uop_91.astype('bool')) # shape=()
var_96 = relay.var("var_96", dtype = "bool", shape = (10, 1, 13))#candidate|96|(10, 1, 13)|var|bool
bop_97 = relay.multiply(bop_93.astype('uint32'), var_96.astype('uint32')) # shape=(10, 1, 13)
uop_100 = relay.log10(bop_93.astype('float32')) # shape=()
var_102 = relay.var("var_102", dtype = "float32", shape = ())#candidate|102|()|var|float32
bop_103 = relay.logical_xor(uop_100.astype('int16'), var_102.astype('int16')) # shape=()
bop_106 = relay.mod(bop_93.astype('float32'), uop_91.astype('float32')) # shape=()
bop_109 = relay.subtract(uop_100.astype('int32'), var_102.astype('int32')) # shape=()
bop_112 = relay.logical_xor(uop_91.astype('int16'), bop_103.astype('int16')) # shape=()
uop_115 = relay.tan(var_102.astype('float64')) # shape=()
uop_117 = relay.exp(uop_115.astype('float64')) # shape=()
bop_119 = relay.logical_or(var_88.astype('bool'), uop_117.astype('bool')) # shape=()
bop_122 = relay.floor_mod(bop_97.astype('float32'), uop_117.astype('float32')) # shape=(10, 1, 13)
bop_125 = relay.divide(bop_97.astype('float64'), var_102.astype('float64')) # shape=(10, 1, 13)
bop_128 = relay.greater(bop_112.astype('bool'), bop_122.astype('bool')) # shape=(10, 1, 13)
uop_131 = relay.exp(var_88.astype('float32')) # shape=()
uop_133 = relay.sigmoid(uop_131.astype('float32')) # shape=()
bop_135 = relay.logical_and(bop_122.astype('bool'), uop_89.astype('bool')) # shape=(10, 1, 13)
bop_138 = relay.multiply(var_102.astype('int8'), bop_125.astype('int8')) # shape=(10, 1, 13)
bop_141 = relay.bitwise_and(bop_103.astype('uint64'), bop_135.astype('uint64')) # shape=(10, 1, 13)
bop_144 = relay.mod(bop_103.astype('float32'), var_88.astype('float32')) # shape=()
bop_147 = relay.bitwise_or(uop_100.astype('uint64'), bop_119.astype('uint64')) # shape=()
bop_150 = relay.not_equal(var_96.astype('bool'), var_88.astype('bool')) # shape=(10, 1, 13)
bop_153 = relay.logical_xor(bop_147.astype('uint8'), var_102.astype('uint8')) # shape=()
bop_156 = relay.not_equal(bop_150.astype('bool'), uop_115.astype('bool')) # shape=(10, 1, 13)
bop_159 = relay.not_equal(var_102.astype('bool'), bop_128.astype('bool')) # shape=(10, 1, 13)
func_13_call = mod.get_global_var('func_13')
func_15_call = mutated_mod.get_global_var('func_15')
var_163 = relay.var("var_163", dtype = "float64", shape = (6,))#candidate|163|(6,)|var|float64
call_162 = relay.TupleGetItem(func_13_call(relay.reshape(var_163.astype('float64'), [6,])), 0)
call_164 = relay.TupleGetItem(func_15_call(relay.reshape(var_163.astype('float64'), [6,])), 0)
output = relay.Tuple([bop_106,bop_109,uop_133,bop_138,bop_141,bop_144,bop_153,bop_156,bop_159,call_162,var_163,])
output2 = relay.Tuple([bop_106,bop_109,uop_133,bop_138,bop_141,bop_144,bop_153,bop_156,bop_159,call_164,var_163,])
func_165 = relay.Function([var_88,var_96,var_102,var_163,], output)
mod['func_165'] = func_165
mod = relay.transform.InferType()(mod)
mutated_mod['func_165'] = func_165
mutated_mod = relay.transform.InferType()(mutated_mod)
func_165_call = mutated_mod.get_global_var('func_165')
var_167 = relay.var("var_167", dtype = "float32", shape = ())#candidate|167|()|var|float32
var_168 = relay.var("var_168", dtype = "bool", shape = (10, 1, 13))#candidate|168|(10, 1, 13)|var|bool
var_169 = relay.var("var_169", dtype = "float32", shape = ())#candidate|169|()|var|float32
var_170 = relay.var("var_170", dtype = "float64", shape = (6,))#candidate|170|(6,)|var|float64
call_166 = func_165_call(var_167,var_168,var_169,var_170,)
output = call_166
func_171 = relay.Function([var_167,var_168,var_169,var_170,], output)
mutated_mod['func_171'] = func_171
mutated_mod = relay.transform.InferType()(mutated_mod)
var_173 = relay.var("var_173", dtype = "uint32", shape = (6, 6, 4))#candidate|173|(6, 6, 4)|var|uint32
var_174 = relay.var("var_174", dtype = "uint32", shape = (6, 6, 4))#candidate|174|(6, 6, 4)|var|uint32
bop_175 = relay.left_shift(var_173.astype('uint32'), relay.reshape(var_174.astype('uint32'), relay.shape_of(var_173))) # shape=(6, 6, 4)
var_178 = relay.var("var_178", dtype = "uint32", shape = (6, 6, 4))#candidate|178|(6, 6, 4)|var|uint32
bop_179 = relay.logical_and(var_173.astype('bool'), relay.reshape(var_178.astype('bool'), relay.shape_of(var_173))) # shape=(6, 6, 4)
func_83_call = mod.get_global_var('func_83')
func_86_call = mutated_mod.get_global_var('func_86')
const_183 = relay.const([[6.720601,-6.646740,6.690614]], dtype = "float64")#candidate|183|(1, 3)|const|float64
call_182 = relay.TupleGetItem(func_83_call(relay.reshape(const_183.astype('float64'), [3,])), 7)
call_184 = relay.TupleGetItem(func_86_call(relay.reshape(const_183.astype('float64'), [3,])), 7)
bop_185 = relay.logical_or(const_183.astype('bool'), relay.reshape(call_182.astype('bool'), relay.shape_of(const_183))) # shape=(1, 3)
bop_188 = relay.logical_or(const_183.astype('bool'), relay.reshape(call_184.astype('bool'), relay.shape_of(const_183))) # shape=(1, 3)
bop_189 = relay.divide(var_174.astype('float64'), relay.reshape(var_178.astype('float64'), relay.shape_of(var_174))) # shape=(6, 6, 4)
uop_192 = relay.tan(bop_189.astype('float32')) # shape=(6, 6, 4)
bop_194 = relay.logical_and(uop_192.astype('bool'), relay.reshape(var_174.astype('bool'), relay.shape_of(uop_192))) # shape=(6, 6, 4)
var_197 = relay.var("var_197", dtype = "uint32", shape = (6, 6, 4))#candidate|197|(6, 6, 4)|var|uint32
bop_198 = relay.logical_and(var_174.astype('bool'), relay.reshape(var_197.astype('bool'), relay.shape_of(var_174))) # shape=(6, 6, 4)
bop_201 = relay.logical_or(uop_192.astype('bool'), relay.reshape(bop_194.astype('bool'), relay.shape_of(uop_192))) # shape=(6, 6, 4)
bop_204 = relay.add(bop_201.astype('uint32'), relay.reshape(bop_198.astype('uint32'), relay.shape_of(bop_201))) # shape=(6, 6, 4)
var_207 = relay.var("var_207", dtype = "uint32", shape = (6, 6, 4))#candidate|207|(6, 6, 4)|var|uint32
bop_208 = relay.greater(bop_204.astype('bool'), relay.reshape(var_207.astype('bool'), relay.shape_of(bop_204))) # shape=(6, 6, 4)
uop_211 = relay.sqrt(bop_204.astype('float32')) # shape=(6, 6, 4)
bop_213 = relay.equal(bop_194.astype('bool'), relay.reshape(uop_211.astype('bool'), relay.shape_of(bop_194))) # shape=(6, 6, 4)
var_216 = relay.var("var_216", dtype = "bool", shape = (6, 6, 4))#candidate|216|(6, 6, 4)|var|bool
bop_217 = relay.floor_mod(bop_201.astype('float64'), relay.reshape(var_216.astype('float64'), relay.shape_of(bop_201))) # shape=(6, 6, 4)
uop_220 = relay.rsqrt(bop_213.astype('float64')) # shape=(6, 6, 4)
uop_222 = relay.erf(uop_220.astype('float64')) # shape=(6, 6, 4)
bop_224 = relay.logical_xor(uop_222.astype('uint8'), relay.reshape(bop_198.astype('uint8'), relay.shape_of(uop_222))) # shape=(6, 6, 4)
var_227 = relay.var("var_227", dtype = "float64", shape = (6, 6, 4))#candidate|227|(6, 6, 4)|var|float64
bop_228 = relay.floor_divide(uop_222.astype('float32'), relay.reshape(var_227.astype('float32'), relay.shape_of(uop_222))) # shape=(6, 6, 4)
uop_231 = relay.exp(uop_222.astype('float64')) # shape=(6, 6, 4)
bop_233 = relay.power(uop_231.astype('float32'), relay.reshape(bop_201.astype('float32'), relay.shape_of(uop_231))) # shape=(6, 6, 4)
bop_236 = relay.right_shift(uop_192.astype('uint64'), relay.reshape(bop_175.astype('uint64'), relay.shape_of(uop_192))) # shape=(6, 6, 4)
output = relay.Tuple([bop_179,bop_185,bop_208,bop_217,bop_224,bop_228,bop_233,bop_236,])
output2 = relay.Tuple([bop_179,bop_188,bop_208,bop_217,bop_224,bop_228,bop_233,bop_236,])
func_239 = relay.Function([var_173,var_174,var_178,var_197,var_207,var_216,var_227,], output)
mod['func_239'] = func_239
mod = relay.transform.InferType()(mod)
var_240 = relay.var("var_240", dtype = "uint32", shape = (6, 6, 4))#candidate|240|(6, 6, 4)|var|uint32
var_241 = relay.var("var_241", dtype = "uint32", shape = (6, 6, 4))#candidate|241|(6, 6, 4)|var|uint32
var_242 = relay.var("var_242", dtype = "uint32", shape = (6, 6, 4))#candidate|242|(6, 6, 4)|var|uint32
var_243 = relay.var("var_243", dtype = "uint32", shape = (6, 6, 4))#candidate|243|(6, 6, 4)|var|uint32
var_244 = relay.var("var_244", dtype = "uint32", shape = (6, 6, 4))#candidate|244|(6, 6, 4)|var|uint32
var_245 = relay.var("var_245", dtype = "bool", shape = (6, 6, 4))#candidate|245|(6, 6, 4)|var|bool
var_246 = relay.var("var_246", dtype = "float64", shape = (6, 6, 4))#candidate|246|(6, 6, 4)|var|float64
output = func_239(var_240,var_241,var_242,var_243,var_244,var_245,var_246,)
func_247 = relay.Function([var_240,var_241,var_242,var_243,var_244,var_245,var_246,], output)
mutated_mod['func_247'] = func_247
mutated_mod = relay.transform.InferType()(mutated_mod)
var_249 = relay.var("var_249", dtype = "uint64", shape = ())#candidate|249|()|var|uint64
var_250 = relay.var("var_250", dtype = "uint64", shape = (9, 8, 4))#candidate|250|(9, 8, 4)|var|uint64
bop_251 = relay.greater_equal(var_249.astype('bool'), var_250.astype('bool')) # shape=(9, 8, 4)
uop_254 = relay.rsqrt(bop_251.astype('float64')) # shape=(9, 8, 4)
var_256 = relay.var("var_256", dtype = "float64", shape = (9, 8, 4))#candidate|256|(9, 8, 4)|var|float64
bop_257 = relay.logical_xor(uop_254.astype('uint32'), relay.reshape(var_256.astype('uint32'), relay.shape_of(uop_254))) # shape=(9, 8, 4)
var_260 = relay.var("var_260", dtype = "uint32", shape = (9, 8, 4))#candidate|260|(9, 8, 4)|var|uint32
bop_261 = relay.logical_and(bop_257.astype('bool'), relay.reshape(var_260.astype('bool'), relay.shape_of(bop_257))) # shape=(9, 8, 4)
bop_264 = relay.floor_divide(bop_261.astype('float32'), relay.reshape(var_250.astype('float32'), relay.shape_of(bop_261))) # shape=(9, 8, 4)
var_267 = relay.var("var_267", dtype = "uint32", shape = (9, 8, 4))#candidate|267|(9, 8, 4)|var|uint32
bop_268 = relay.not_equal(bop_257.astype('bool'), relay.reshape(var_267.astype('bool'), relay.shape_of(bop_257))) # shape=(9, 8, 4)
var_271 = relay.var("var_271", dtype = "uint32", shape = (9, 8, 4))#candidate|271|(9, 8, 4)|var|uint32
bop_272 = relay.power(var_267.astype('float32'), relay.reshape(var_271.astype('float32'), relay.shape_of(var_267))) # shape=(9, 8, 4)
func_13_call = mod.get_global_var('func_13')
func_15_call = mutated_mod.get_global_var('func_15')
var_276 = relay.var("var_276", dtype = "float64", shape = (6,))#candidate|276|(6,)|var|float64
call_275 = relay.TupleGetItem(func_13_call(relay.reshape(var_276.astype('float64'), [6,])), 0)
call_277 = relay.TupleGetItem(func_15_call(relay.reshape(var_276.astype('float64'), [6,])), 0)
bop_278 = relay.logical_and(bop_268.astype('bool'), relay.reshape(bop_261.astype('bool'), relay.shape_of(bop_268))) # shape=(9, 8, 4)
uop_281 = relay.sin(var_276.astype('float64')) # shape=(6,)
bop_283 = relay.logical_or(bop_272.astype('bool'), relay.reshape(uop_254.astype('bool'), relay.shape_of(bop_272))) # shape=(9, 8, 4)
output = relay.Tuple([bop_264,call_275,bop_278,uop_281,bop_283,])
output2 = relay.Tuple([bop_264,call_277,bop_278,uop_281,bop_283,])
func_286 = relay.Function([var_249,var_250,var_256,var_260,var_267,var_271,var_276,], output)
mod['func_286'] = func_286
mod = relay.transform.InferType()(mod)
mutated_mod['func_286'] = func_286
mutated_mod = relay.transform.InferType()(mutated_mod)
func_286_call = mutated_mod.get_global_var('func_286')
var_288 = relay.var("var_288", dtype = "uint64", shape = ())#candidate|288|()|var|uint64
var_289 = relay.var("var_289", dtype = "uint64", shape = (9, 8, 4))#candidate|289|(9, 8, 4)|var|uint64
var_290 = relay.var("var_290", dtype = "float64", shape = (9, 8, 4))#candidate|290|(9, 8, 4)|var|float64
var_291 = relay.var("var_291", dtype = "uint32", shape = (9, 8, 4))#candidate|291|(9, 8, 4)|var|uint32
var_292 = relay.var("var_292", dtype = "uint32", shape = (9, 8, 4))#candidate|292|(9, 8, 4)|var|uint32
var_293 = relay.var("var_293", dtype = "uint32", shape = (9, 8, 4))#candidate|293|(9, 8, 4)|var|uint32
var_294 = relay.var("var_294", dtype = "float64", shape = (6,))#candidate|294|(6,)|var|float64
call_287 = func_286_call(var_288,var_289,var_290,var_291,var_292,var_293,var_294,)
output = call_287
func_295 = relay.Function([var_288,var_289,var_290,var_291,var_292,var_293,var_294,], output)
mutated_mod['func_295'] = func_295
mutated_mod = relay.transform.InferType()(mutated_mod)
var_297 = relay.var("var_297", dtype = "int32", shape = (3, 15, 16))#candidate|297|(3, 15, 16)|var|int32
var_298 = relay.var("var_298", dtype = "int32", shape = (3, 15, 16))#candidate|298|(3, 15, 16)|var|int32
bop_299 = relay.multiply(var_297.astype('int32'), relay.reshape(var_298.astype('int32'), relay.shape_of(var_297))) # shape=(3, 15, 16)
bop_302 = relay.divide(var_297.astype('float64'), relay.reshape(bop_299.astype('float64'), relay.shape_of(var_297))) # shape=(3, 15, 16)
bop_305 = relay.bitwise_xor(bop_299.astype('uint16'), relay.reshape(bop_302.astype('uint16'), relay.shape_of(bop_299))) # shape=(3, 15, 16)
bop_308 = relay.mod(var_298.astype('float64'), relay.reshape(bop_302.astype('float64'), relay.shape_of(var_298))) # shape=(3, 15, 16)
bop_311 = relay.not_equal(bop_305.astype('bool'), relay.reshape(var_298.astype('bool'), relay.shape_of(bop_305))) # shape=(3, 15, 16)
uop_314 = relay.sin(var_297.astype('float32')) # shape=(3, 15, 16)
uop_316 = relay.atanh(uop_314.astype('float32')) # shape=(3, 15, 16)
uop_318 = relay.atanh(uop_316.astype('float32')) # shape=(3, 15, 16)
bop_320 = relay.divide(bop_302.astype('float32'), relay.reshape(var_298.astype('float32'), relay.shape_of(bop_302))) # shape=(3, 15, 16)
bop_323 = relay.less_equal(uop_314.astype('bool'), relay.reshape(var_297.astype('bool'), relay.shape_of(uop_314))) # shape=(3, 15, 16)
uop_326 = relay.tan(uop_318.astype('float32')) # shape=(3, 15, 16)
bop_328 = relay.multiply(uop_326.astype('uint16'), relay.reshape(bop_320.astype('uint16'), relay.shape_of(uop_326))) # shape=(3, 15, 16)
bop_331 = relay.not_equal(uop_318.astype('bool'), relay.reshape(bop_308.astype('bool'), relay.shape_of(uop_318))) # shape=(3, 15, 16)
bop_334 = relay.floor_mod(bop_302.astype('float64'), relay.reshape(bop_331.astype('float64'), relay.shape_of(bop_302))) # shape=(3, 15, 16)
func_286_call = mod.get_global_var('func_286')
func_295_call = mutated_mod.get_global_var('func_295')
const_338 = relay.const(-3, dtype = "uint64")#candidate|338|()|const|uint64
const_339 = relay.const([4,-1,6,-8,10,-10,-2,-8,5,-4,4,6,-1,7,4,6,1,-10,7,6,10,6,4,-3,-2,9,-8,-9,2,2,-1,5,8,-9,-3,-2,-10,5,2,3,6,4,-9,-1,-9,8,-3,-4,-6,6,7,-2,-6,-2,-4,6,7,4,-1,8,9,-1,-6,-5,-7,4,9,-2,-1,-5,9,5,-1,3,-7,1,-6,-10,9,-7,-6,-2,-4,-10,-1,2,-6,8,-7,9,-4,9,5,4,-5,-10,-1,6,9,4,10,-9,-10,-4,-10,10,5,5,3,4,10,10,6,-1,-1,4,9,-8,4,8,6,9,-1,1,-4,3,7,-9,7,-10,3,10,1,4,1,-9,-2,-8,3,-9,2,-10,3,-4,9,1,-9,-5,8,-6,-1,-5,3,8,-1,-10,-8,4,2,-4,-3,5,5,-4,9,-1,5,7,-9,2,1,7,-4,1,-8,-9,9,4,-3,-4,-8,-5,2,9,-7,5,4,-9,10,6,-4,-10,-8,6,5,-6,-6,-6,-4,-2,-7,-1,9,-1,10,1,-4,-9,-7,4,5,-5,-2,1,-5,7,2,-2,9,-1,1,-7,5,5,-10,-4,-10,8,-9,6,-4,3,-2,-8,-8,-2,-3,2,-2,7,-10,9,-1,10,7,-3,2,10,3,-4,7,10,4,7,2,10,-7,2,7,8,-9,-9,-9,4,7,4,4,5,7,4,5,1,-4,-10,4,-8,-10,-3,-6,-2,-5,-8,-2,8,2,-9,9,-9], dtype = "uint64")#candidate|339|(288,)|const|uint64
var_340 = relay.var("var_340", dtype = "float64", shape = (6,))#candidate|340|(6,)|var|float64
call_337 = relay.TupleGetItem(func_286_call(relay.reshape(const_338.astype('uint64'), []), relay.reshape(const_339.astype('uint64'), [9, 8, 4]), relay.reshape(const_339.astype('float64'), [9, 8, 4]), relay.reshape(const_339.astype('uint32'), [9, 8, 4]), relay.reshape(const_339.astype('uint32'), [9, 8, 4]), relay.reshape(const_339.astype('uint32'), [9, 8, 4]), relay.reshape(var_340.astype('float64'), [6,]), ), 3)
call_341 = relay.TupleGetItem(func_295_call(relay.reshape(const_338.astype('uint64'), []), relay.reshape(const_339.astype('uint64'), [9, 8, 4]), relay.reshape(const_339.astype('float64'), [9, 8, 4]), relay.reshape(const_339.astype('uint32'), [9, 8, 4]), relay.reshape(const_339.astype('uint32'), [9, 8, 4]), relay.reshape(const_339.astype('uint32'), [9, 8, 4]), relay.reshape(var_340.astype('float64'), [6,]), ), 3)
bop_342 = relay.not_equal(bop_323.astype('bool'), relay.reshape(uop_316.astype('bool'), relay.shape_of(bop_323))) # shape=(3, 15, 16)
output = relay.Tuple([bop_311,bop_328,bop_334,call_337,const_338,const_339,var_340,bop_342,])
output2 = relay.Tuple([bop_311,bop_328,bop_334,call_341,const_338,const_339,var_340,bop_342,])
F = relay.Function([var_297,var_298,var_340,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_297,var_298,var_340,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_297= np.array([[[-10,6,9,-9,4,3,7,7,9,-7,5,3,2,1,5,4],[1,3,7,3,9,1,9,4,-1,-6,-4,6,-1,2,9,3],[-8,-1,8,6,-2,-5,-7,1,-10,6,-8,-2,1,6,1,-1],[-4,2,8,1,-7,3,5,-3,10,9,-2,-6,-6,-5,2,6],[8,-9,-7,6,-7,9,-2,-5,2,2,-6,8,-3,-8,9,-2],[-3,-5,1,6,2,-8,-8,9,-10,7,-1,7,-10,-8,1,7],[-1,6,-4,8,8,10,-10,9,10,-5,10,5,-10,-6,5,7],[-6,5,-3,-5,2,8,-4,3,10,-5,1,8,-4,-2,-2,4],[2,-7,4,-8,9,10,3,-9,1,-3,5,4,10,8,-5,-7],[4,1,-7,-4,-5,2,-8,-10,5,1,-7,-1,3,8,-4,6],[-10,-5,8,-5,-6,10,6,-4,3,4,2,-8,7,-4,10,8],[-9,-9,4,1,-1,-5,10,1,-7,-5,10,-6,9,5,-2,-1],[8,9,6,-2,-10,7,8,-7,-2,-4,8,-7,-1,-8,7,-5],[1,-7,-3,-7,9,7,1,10,6,6,-5,-1,-7,-7,-8,1],[8,8,8,6,-7,-5,-7,-4,3,9,2,2,10,-6,-4,10]],[[5,-3,1,-4,-6,-1,-6,-8,-4,4,-8,7,-8,8,10,-3],[-4,-9,10,5,2,7,-10,6,-3,-2,-7,-10,-10,6,-6,6],[-7,-7,8,-1,10,10,-6,-4,7,9,-4,2,9,5,-8,7],[6,2,-8,6,-4,7,-3,8,-8,-7,-8,-6,6,2,10,7],[1,-10,4,-8,2,-8,-8,-8,-5,-9,-3,-10,6,-3,9,-2],[1,1,10,6,5,-9,-10,9,2,-8,3,-4,-10,-5,6,1],[-1,-3,-4,-7,2,-3,-4,10,2,-1,-6,2,-1,-6,4,6],[-2,10,-9,8,-4,-6,5,4,-3,-10,1,6,-9,-1,-10,2],[-6,-9,-9,6,7,-2,5,-8,1,9,10,-4,-8,5,1,-1],[10,-2,6,-4,10,-5,-10,-5,-3,-2,10,5,10,5,5,-8],[5,-6,8,5,-4,4,7,4,6,6,-2,3,9,5,3,1],[-3,-10,-8,2,-9,-7,-8,8,-9,-9,3,4,9,8,-3,1],[-9,-9,-7,-9,7,-3,-7,10,-3,-8,2,-10,3,4,-8,-2],[-5,-2,-3,-9,6,-7,10,10,8,-10,2,-1,8,9,-8,3],[-3,8,-7,-8,6,8,5,-9,-6,1,-9,-10,-8,2,-3,1]],[[-1,4,5,-3,-7,9,8,5,9,3,8,6,6,2,-3,5],[-4,-4,-9,2,-7,-8,-2,-3,8,-10,9,4,4,-5,1,-2],[7,3,-2,-1,-7,6,-3,10,-4,10,6,1,10,-8,-3,7],[8,-7,-7,1,-9,-3,7,6,6,7,9,-4,3,1,4,-8],[-10,-5,3,-2,3,7,-3,-1,8,-10,5,8,-10,6,9,-8],[-8,7,-9,8,-8,-1,-9,-7,2,3,-5,-5,-10,-1,-6,-9],[4,-10,8,-4,-4,-5,-9,9,4,-9,5,-6,-9,-5,5,-1],[-1,-1,-10,5,-2,-6,-5,-2,-1,9,-9,2,-1,-2,2,-7],[-6,-1,-3,-10,-9,6,5,4,-3,1,-10,-9,-7,-9,-6,-1],[-5,1,-3,3,-9,-7,-8,-10,5,-2,-2,6,-6,8,3,6],[-6,-8,-8,-10,-1,-3,9,10,3,-9,-7,-6,-1,-4,-6,2],[9,-2,10,-6,-10,-10,2,-2,-3,2,5,-2,-4,3,-9,3],[-5,-5,-10,8,1,10,-7,10,3,-4,2,5,2,-6,-2,-9],[8,6,4,-8,1,8,-10,1,-2,2,-1,-10,6,4,-6,9],[-8,10,8,-6,-9,8,-5,-5,-4,-3,-5,-7,-8,10,-7,-8]]], dtype='int32')
module1.set_input('var_297', input_297)
input_298= np.array([[[5,-6,-9,3,-1,7,2,4,-8,-2,-9,-3,2,-1,-4,4],[6,-4,2,-2,8,10,-9,7,-1,-10,8,7,9,-8,6,4],[-2,8,-4,9,-8,-6,-3,-6,-2,5,10,-1,-10,1,1,-10],[4,8,-6,1,-8,-3,-10,5,3,-1,2,1,-10,-7,-10,7],[5,-3,4,7,1,-1,8,2,-6,6,4,7,4,9,5,9],[1,10,-5,7,8,-6,4,8,10,7,3,-2,-1,10,-6,3],[10,5,4,-1,2,7,-5,5,10,1,-7,2,-3,2,-3,1],[10,-9,9,-7,7,-6,-10,8,-4,-7,2,-7,-2,-8,-5,8],[-4,10,-9,2,-10,10,1,3,-9,-4,-8,7,9,-6,-4,-10],[3,2,6,2,4,7,2,-9,-10,3,6,-9,7,1,-10,-10],[2,7,-9,5,2,9,4,6,-4,2,-9,5,6,7,-9,-1],[10,1,8,3,10,6,1,-7,-9,5,2,5,-7,6,-9,9],[6,7,5,-5,-1,8,1,8,-4,1,4,6,8,9,8,7],[5,-9,3,5,5,7,-7,-7,8,9,-5,3,-4,1,8,7],[1,6,-1,9,2,-1,10,4,-7,-10,-7,-6,-5,4,-6,-9]],[[-10,-2,-5,5,6,8,8,-6,4,-9,-8,3,-3,-7,9,-7],[-10,-8,-9,-4,-2,5,-6,-5,6,1,-1,5,1,-3,9,-9],[-9,4,3,5,10,-3,10,7,4,-7,-2,8,-6,6,-3,4],[4,-1,6,10,5,-2,-5,-10,7,-3,10,6,4,-1,7,-10],[3,-9,9,-5,-5,9,6,-9,7,-3,3,6,1,6,-3,10],[10,-7,9,3,-8,5,4,-8,4,-1,-1,6,-4,-10,1,-5],[1,9,-3,-5,-5,-7,-4,1,6,-7,-6,-9,-5,9,10,6],[5,1,-8,-3,7,-1,4,-1,3,-9,10,9,-8,-3,2,2],[-7,-9,1,7,1,1,1,8,-9,-2,7,-6,2,7,-3,3],[-4,-4,-4,3,8,-3,-5,2,7,2,-7,-1,10,-5,5,-2],[2,-3,6,4,-3,4,5,1,1,-8,-4,9,6,-8,4,1],[-5,-2,2,6,2,-3,-7,1,-2,8,9,-1,-3,-6,-8,-3],[-1,5,-3,-9,10,-2,-10,6,-3,7,4,-4,6,6,-5,8],[-7,9,3,-5,-4,9,1,6,-10,3,-9,-4,7,9,-10,9],[-10,-9,10,6,-10,-8,2,4,-6,-7,6,-10,-3,8,-7,-3]],[[5,10,8,9,-10,-1,-2,-6,4,3,-5,4,3,-3,8,5],[-10,1,10,-5,9,-5,-1,-1,-4,-2,7,-9,9,-9,8,10],[-9,-5,3,1,6,-4,5,-9,-8,-10,-8,-5,8,1,8,-5],[4,-7,-10,8,-4,-2,-6,10,1,-10,6,7,9,-4,-1,5],[-1,-10,-1,-6,1,-6,8,-4,5,-1,1,-6,5,-7,-1,2],[7,2,2,-2,7,-9,-3,5,7,8,-3,8,6,-6,10,-6],[2,4,5,7,4,-8,-9,5,-10,-3,9,3,-7,-2,-9,-3],[-8,6,-2,5,1,5,8,-5,6,1,9,3,-5,4,-5,8],[5,7,9,7,7,9,5,4,-3,-7,1,2,-6,1,-5,-3],[2,-10,-3,-2,-1,4,6,7,2,-6,5,8,-4,3,5,2],[7,10,-10,-8,5,7,1,5,-10,-8,-6,-4,-5,-2,2,-2],[5,-9,-6,8,-1,5,10,9,8,3,-6,-6,6,5,-9,7],[9,-1,-4,-6,-3,-1,10,1,9,-4,10,10,-8,-4,-2,-3],[8,9,10,-9,6,-3,9,-6,7,5,-8,5,-10,4,-3,-6],[-8,5,10,-10,3,5,-7,-10,9,-6,-10,4,2,-3,-3,-6]]], dtype='int32')
module1.set_input('var_298', input_298)
input_340= np.array([-6.162077,-2.661869,4.030344,2.808738,-3.261696,-5.289471], dtype='float64')
module1.set_input('var_340', input_340)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_297, input_298, input_340, )
res3 = intrp3.evaluate()(input_297, input_298, input_340, )
res4 = intrp4.evaluate()(input_297, input_298, input_340, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
module5.set_input('var_297', input_297)
module5.set_input('var_298', input_298)
module5.set_input('var_340', input_340)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_297, input_298, input_340, )
res7 = intrp7.evaluate()(input_297, input_298, input_340, )
res8 = intrp8.evaluate()(input_297, input_298, input_340, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
module9.set_input('var_297', input_297)
module9.set_input('var_298', input_298)
module9.set_input('var_340', input_340)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_297, input_298, input_340, )
res11 = intrp11.evaluate()(input_297, input_298, input_340, )
res12 = intrp12.evaluate()(input_297, input_298, input_340, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
module13.set_input('var_297', input_297)
module13.set_input('var_298', input_298)
module13.set_input('var_340', input_340)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_297, input_298, input_340, )
res15 = intrp15.evaluate()(input_297, input_298, input_340, )
res16 = intrp16.evaluate()(input_297, input_298, input_340, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
module17.set_input('var_297', input_297)
module17.set_input('var_298', input_298)
module17.set_input('var_340', input_340)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_297, input_298, input_340, )
res19 = intrp19.evaluate()(input_297, input_298, input_340, )
res20 = intrp20.evaluate()(input_297, input_298, input_340, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
module21.set_input('var_297', input_297)
module21.set_input('var_298', input_298)
module21.set_input('var_340', input_340)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_297, input_298, input_340, )
res23 = intrp23.evaluate()(input_297, input_298, input_340, )
res24 = intrp24.evaluate()(input_297, input_298, input_340, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()

'''6: TVMFuncCall
5: _ZNSt17_Function_handlerIFvN3tvm7runtime7
4: tvm::runtime::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const [clone .isra.808]
3: tvm::runtime::GraphExecutorCreate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module const&, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
2: tvm::runtime::GraphExecutor::Init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
1: tvm::runtime::GraphExecutor::SetupOpExecs()
0: tvm::runtime::GraphExecutor::CreateTVMOp(tvm::runtime::TVMOpParam const&, std::vector<DLTensor, std::allocator<DLTensor> > const&)

'''