import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = ())#candidate|0|()|var|float32
uop_1 = relay.cosh(var_0.astype('float32')) # shape=()
const_3 = relay.const([[4.307171,-6.357119,4.532565,1.542991,-6.383214,7.629485,-4.130544,7.426811,5.100980,-7.824383,-8.027277,-7.870454,-8.189273,5.130249,-4.385729,-8.594975]], dtype = "float32")#candidate|3|(1, 16)|const|float32
bop_4 = relay.power(uop_1.astype('float32'), const_3.astype('float32')) # shape=(1, 16)
uop_7 = relay.erf(uop_1.astype('float32')) # shape=()
bop_9 = relay.mod(var_0.astype('float64'), const_3.astype('float64')) # shape=(1, 16)
uop_12 = relay.acos(const_3.astype('float32')) # shape=(1, 16)
uop_14 = relay.asin(bop_4.astype('float64')) # shape=(1, 16)
var_16 = relay.var("var_16", dtype = "float32", shape = (4,))#candidate|16|(4,)|var|float32
bop_17 = relay.logical_xor(uop_7.astype('uint64'), var_16.astype('uint64')) # shape=(4,)
bop_20 = relay.logical_xor(uop_7.astype('uint32'), var_16.astype('uint32')) # shape=(4,)
uop_23 = relay.log10(uop_7.astype('float32')) # shape=()
uop_25 = relay.log10(uop_23.astype('float32')) # shape=()
uop_27 = relay.sinh(const_3.astype('float32')) # shape=(1, 16)
uop_29 = relay.exp(uop_25.astype('float32')) # shape=()
uop_31 = relay.asin(uop_23.astype('float64')) # shape=()
uop_33 = relay.sin(uop_27.astype('float64')) # shape=(1, 16)
uop_35 = relay.asinh(uop_29.astype('float64')) # shape=()
var_37 = relay.var("var_37", dtype = "float32", shape = ())#candidate|37|()|var|float32
bop_38 = relay.bitwise_or(uop_29.astype('int64'), var_37.astype('int64')) # shape=()
output = relay.Tuple([bop_9,uop_12,uop_14,bop_17,bop_20,uop_31,uop_33,uop_35,bop_38,])
output2 = relay.Tuple([bop_9,uop_12,uop_14,bop_17,bop_20,uop_31,uop_33,uop_35,bop_38,])
func_41 = relay.Function([var_0,var_16,var_37,], output)
mod['func_41'] = func_41
mod = relay.transform.InferType()(mod)
var_42 = relay.var("var_42", dtype = "float32", shape = ())#candidate|42|()|var|float32
var_43 = relay.var("var_43", dtype = "float32", shape = (4,))#candidate|43|(4,)|var|float32
var_44 = relay.var("var_44", dtype = "float32", shape = ())#candidate|44|()|var|float32
output = func_41(var_42,var_43,var_44,)
func_45 = relay.Function([var_42,var_43,var_44,], output)
mutated_mod['func_45'] = func_45
mutated_mod = relay.transform.InferType()(mutated_mod)
var_47 = relay.var("var_47", dtype = "float32", shape = ())#candidate|47|()|var|float32
uop_48 = relay.acosh(var_47.astype('float32')) # shape=()
uop_50 = relay.exp(uop_48.astype('float32')) # shape=()
bop_52 = relay.logical_or(var_47.astype('bool'), uop_50.astype('bool')) # shape=()
uop_55 = relay.sin(bop_52.astype('float32')) # shape=()
func_41_call = mod.get_global_var('func_41')
func_45_call = mutated_mod.get_global_var('func_45')
const_58 = relay.const([-9.435176,9.244009,-0.891805,-8.876257], dtype = "float32")#candidate|58|(4,)|const|float32
call_57 = relay.TupleGetItem(func_41_call(relay.reshape(var_47.astype('float32'), []), relay.reshape(const_58.astype('float32'), [4,]), relay.reshape(var_47.astype('float32'), []), ), 3)
call_59 = relay.TupleGetItem(func_45_call(relay.reshape(var_47.astype('float32'), []), relay.reshape(const_58.astype('float32'), [4,]), relay.reshape(var_47.astype('float32'), []), ), 3)
bop_60 = relay.not_equal(uop_55.astype('bool'), uop_48.astype('bool')) # shape=()
bop_63 = relay.right_shift(uop_48.astype('int16'), const_58.astype('int16')) # shape=(4,)
output = relay.Tuple([call_57,bop_60,bop_63,])
output2 = relay.Tuple([call_59,bop_60,bop_63,])
func_66 = relay.Function([var_47,], output)
mod['func_66'] = func_66
mod = relay.transform.InferType()(mod)
mutated_mod['func_66'] = func_66
mutated_mod = relay.transform.InferType()(mutated_mod)
var_67 = relay.var("var_67", dtype = "float32", shape = ())#candidate|67|()|var|float32
func_66_call = mutated_mod.get_global_var('func_66')
call_68 = func_66_call(var_67)
output = call_68
func_69 = relay.Function([var_67], output)
mutated_mod['func_69'] = func_69
mutated_mod = relay.transform.InferType()(mutated_mod)
var_71 = relay.var("var_71", dtype = "int8", shape = (16, 7, 3))#candidate|71|(16, 7, 3)|var|int8
var_72 = relay.var("var_72", dtype = "int8", shape = (16, 7, 3))#candidate|72|(16, 7, 3)|var|int8
bop_73 = relay.equal(var_71.astype('bool'), relay.reshape(var_72.astype('bool'), relay.shape_of(var_71))) # shape=(16, 7, 3)
bop_76 = relay.logical_and(var_71.astype('bool'), relay.reshape(bop_73.astype('bool'), relay.shape_of(var_71))) # shape=(16, 7, 3)
bop_79 = relay.logical_xor(var_72.astype('uint32'), relay.reshape(bop_73.astype('uint32'), relay.shape_of(var_72))) # shape=(16, 7, 3)
output = relay.Tuple([bop_76,bop_79,])
output2 = relay.Tuple([bop_76,bop_79,])
func_82 = relay.Function([var_71,var_72,], output)
mod['func_82'] = func_82
mod = relay.transform.InferType()(mod)
var_83 = relay.var("var_83", dtype = "int8", shape = (16, 7, 3))#candidate|83|(16, 7, 3)|var|int8
var_84 = relay.var("var_84", dtype = "int8", shape = (16, 7, 3))#candidate|84|(16, 7, 3)|var|int8
output = func_82(var_83,var_84,)
func_85 = relay.Function([var_83,var_84,], output)
mutated_mod['func_85'] = func_85
mutated_mod = relay.transform.InferType()(mutated_mod)
var_87 = relay.var("var_87", dtype = "uint16", shape = ())#candidate|87|()|var|uint16
const_88 = relay.const([-1,-9,10,-6,-4,9,5,-1,-10,2], dtype = "uint16")#candidate|88|(10,)|const|uint16
bop_89 = relay.less(var_87.astype('bool'), const_88.astype('bool')) # shape=(10,)
bop_92 = relay.subtract(bop_89.astype('int64'), var_87.astype('int64')) # shape=(10,)
uop_95 = relay.sinh(bop_92.astype('float64')) # shape=(10,)
output = relay.Tuple([uop_95,])
output2 = relay.Tuple([uop_95,])
func_97 = relay.Function([var_87,], output)
mod['func_97'] = func_97
mod = relay.transform.InferType()(mod)
mutated_mod['func_97'] = func_97
mutated_mod = relay.transform.InferType()(mutated_mod)
var_98 = relay.var("var_98", dtype = "uint16", shape = ())#candidate|98|()|var|uint16
func_97_call = mutated_mod.get_global_var('func_97')
call_99 = func_97_call(var_98)
output = call_99
func_100 = relay.Function([var_98], output)
mutated_mod['func_100'] = func_100
mutated_mod = relay.transform.InferType()(mutated_mod)
var_102 = relay.var("var_102", dtype = "float32", shape = (2, 7, 14))#candidate|102|(2, 7, 14)|var|float32
uop_103 = relay.sinh(var_102.astype('float32')) # shape=(2, 7, 14)
uop_105 = relay.sinh(uop_103.astype('float64')) # shape=(2, 7, 14)
var_107 = relay.var("var_107", dtype = "float32", shape = (2, 7, 14))#candidate|107|(2, 7, 14)|var|float32
bop_108 = relay.maximum(var_102.astype('int16'), relay.reshape(var_107.astype('int16'), relay.shape_of(var_102))) # shape=(2, 7, 14)
var_111 = relay.var("var_111", dtype = "float64", shape = (2, 7, 14))#candidate|111|(2, 7, 14)|var|float64
bop_112 = relay.bitwise_and(uop_105.astype('int64'), relay.reshape(var_111.astype('int64'), relay.shape_of(uop_105))) # shape=(2, 7, 14)
bop_115 = relay.divide(bop_112.astype('float64'), relay.reshape(uop_105.astype('float64'), relay.shape_of(bop_112))) # shape=(2, 7, 14)
uop_118 = relay.log10(bop_112.astype('float32')) # shape=(2, 7, 14)
output = relay.Tuple([bop_108,bop_115,uop_118,])
output2 = relay.Tuple([bop_108,bop_115,uop_118,])
func_120 = relay.Function([var_102,var_107,var_111,], output)
mod['func_120'] = func_120
mod = relay.transform.InferType()(mod)
mutated_mod['func_120'] = func_120
mutated_mod = relay.transform.InferType()(mutated_mod)
func_120_call = mutated_mod.get_global_var('func_120')
var_122 = relay.var("var_122", dtype = "float32", shape = (2, 7, 14))#candidate|122|(2, 7, 14)|var|float32
var_123 = relay.var("var_123", dtype = "float32", shape = (2, 7, 14))#candidate|123|(2, 7, 14)|var|float32
var_124 = relay.var("var_124", dtype = "float64", shape = (2, 7, 14))#candidate|124|(2, 7, 14)|var|float64
call_121 = func_120_call(var_122,var_123,var_124,)
output = call_121
func_125 = relay.Function([var_122,var_123,var_124,], output)
mutated_mod['func_125'] = func_125
mutated_mod = relay.transform.InferType()(mutated_mod)
var_127 = relay.var("var_127", dtype = "float32", shape = (4,))#candidate|127|(4,)|var|float32
uop_128 = relay.log10(var_127.astype('float32')) # shape=(4,)
func_41_call = mod.get_global_var('func_41')
func_45_call = mutated_mod.get_global_var('func_45')
const_131 = relay.const(6.506837, dtype = "float32")#candidate|131|()|const|float32
call_130 = relay.TupleGetItem(func_41_call(relay.reshape(const_131.astype('float32'), []), relay.reshape(var_127.astype('float32'), [4,]), relay.reshape(const_131.astype('float32'), []), ), 1)
call_132 = relay.TupleGetItem(func_45_call(relay.reshape(const_131.astype('float32'), []), relay.reshape(var_127.astype('float32'), [4,]), relay.reshape(const_131.astype('float32'), []), ), 1)
var_133 = relay.var("var_133", dtype = "float32", shape = (4,))#candidate|133|(4,)|var|float32
bop_134 = relay.right_shift(uop_128.astype('uint64'), relay.reshape(var_133.astype('uint64'), relay.shape_of(uop_128))) # shape=(4,)
bop_137 = relay.bitwise_xor(uop_128.astype('int32'), relay.reshape(bop_134.astype('int32'), relay.shape_of(uop_128))) # shape=(4,)
uop_140 = relay.cosh(uop_128.astype('float64')) # shape=(4,)
uop_142 = relay.atan(uop_140.astype('float32')) # shape=(4,)
bop_144 = relay.less(uop_142.astype('bool'), relay.reshape(var_133.astype('bool'), relay.shape_of(uop_142))) # shape=(4,)
const_147 = relay.const([-7.315402,5.333089,9.604723,8.165785], dtype = "float64")#candidate|147|(4,)|const|float64
bop_148 = relay.logical_or(uop_140.astype('bool'), relay.reshape(const_147.astype('bool'), relay.shape_of(uop_140))) # shape=(4,)
uop_151 = relay.asinh(uop_140.astype('float32')) # shape=(4,)
uop_153 = relay.tan(bop_148.astype('float32')) # shape=(4,)
var_155 = relay.var("var_155", dtype = "float32", shape = (4,))#candidate|155|(4,)|var|float32
bop_156 = relay.subtract(var_127.astype('float32'), relay.reshape(var_155.astype('float32'), relay.shape_of(var_127))) # shape=(4,)
uop_159 = relay.log10(bop_144.astype('float32')) # shape=(4,)
var_161 = relay.var("var_161", dtype = "float32", shape = (4,))#candidate|161|(4,)|var|float32
bop_162 = relay.floor_mod(uop_159.astype('float32'), relay.reshape(var_161.astype('float32'), relay.shape_of(uop_159))) # shape=(4,)
output = relay.Tuple([call_130,const_131,bop_137,uop_151,uop_153,bop_156,bop_162,])
output2 = relay.Tuple([call_132,const_131,bop_137,uop_151,uop_153,bop_156,bop_162,])
func_165 = relay.Function([var_127,var_133,var_155,var_161,], output)
mod['func_165'] = func_165
mod = relay.transform.InferType()(mod)
var_166 = relay.var("var_166", dtype = "float32", shape = (4,))#candidate|166|(4,)|var|float32
var_167 = relay.var("var_167", dtype = "float32", shape = (4,))#candidate|167|(4,)|var|float32
var_168 = relay.var("var_168", dtype = "float32", shape = (4,))#candidate|168|(4,)|var|float32
var_169 = relay.var("var_169", dtype = "float32", shape = (4,))#candidate|169|(4,)|var|float32
output = func_165(var_166,var_167,var_168,var_169,)
func_170 = relay.Function([var_166,var_167,var_168,var_169,], output)
mutated_mod['func_170'] = func_170
mutated_mod = relay.transform.InferType()(mutated_mod)
var_172 = relay.var("var_172", dtype = "float32", shape = (12,))#candidate|172|(12,)|var|float32
const_173 = relay.const([-2.942173,8.525040,7.744803,-8.287761,2.331431,-9.982811,5.801109,5.646431,-4.814876,-8.973562,-6.351135,4.875285], dtype = "float32")#candidate|173|(12,)|const|float32
bop_174 = relay.floor_divide(var_172.astype('float32'), relay.reshape(const_173.astype('float32'), relay.shape_of(var_172))) # shape=(12,)
uop_177 = relay.acos(var_172.astype('float32')) # shape=(12,)
bop_179 = relay.bitwise_xor(bop_174.astype('uint32'), relay.reshape(var_172.astype('uint32'), relay.shape_of(bop_174))) # shape=(12,)
uop_182 = relay.cosh(uop_177.astype('float64')) # shape=(12,)
uop_184 = relay.asinh(uop_177.astype('float32')) # shape=(12,)
uop_186 = relay.sigmoid(uop_182.astype('float64')) # shape=(12,)
bop_188 = relay.bitwise_and(uop_182.astype('uint16'), relay.reshape(uop_184.astype('uint16'), relay.shape_of(uop_182))) # shape=(12,)
var_191 = relay.var("var_191", dtype = "float32", shape = (12,))#candidate|191|(12,)|var|float32
bop_192 = relay.logical_or(uop_177.astype('bool'), relay.reshape(var_191.astype('bool'), relay.shape_of(uop_177))) # shape=(12,)
bop_195 = relay.logical_or(bop_188.astype('bool'), relay.reshape(var_172.astype('bool'), relay.shape_of(bop_188))) # shape=(12,)
bop_198 = relay.right_shift(bop_188.astype('int32'), relay.reshape(bop_195.astype('int32'), relay.shape_of(bop_188))) # shape=(12,)
output = relay.Tuple([bop_179,uop_186,bop_192,bop_198,])
output2 = relay.Tuple([bop_179,uop_186,bop_192,bop_198,])
func_201 = relay.Function([var_172,var_191,], output)
mod['func_201'] = func_201
mod = relay.transform.InferType()(mod)
var_202 = relay.var("var_202", dtype = "float32", shape = (12,))#candidate|202|(12,)|var|float32
var_203 = relay.var("var_203", dtype = "float32", shape = (12,))#candidate|203|(12,)|var|float32
output = func_201(var_202,var_203,)
func_204 = relay.Function([var_202,var_203,], output)
mutated_mod['func_204'] = func_204
mutated_mod = relay.transform.InferType()(mutated_mod)
var_206 = relay.var("var_206", dtype = "float64", shape = ())#candidate|206|()|var|float64
var_207 = relay.var("var_207", dtype = "float64", shape = (11, 15, 9))#candidate|207|(11, 15, 9)|var|float64
bop_208 = relay.mod(var_206.astype('float64'), var_207.astype('float64')) # shape=(11, 15, 9)
uop_211 = relay.erf(bop_208.astype('float64')) # shape=(11, 15, 9)
var_213 = relay.var("var_213", dtype = "float64", shape = (11, 15, 9))#candidate|213|(11, 15, 9)|var|float64
bop_214 = relay.logical_xor(uop_211.astype('uint8'), relay.reshape(var_213.astype('uint8'), relay.shape_of(uop_211))) # shape=(11, 15, 9)
bop_217 = relay.logical_or(uop_211.astype('bool'), relay.reshape(var_213.astype('bool'), relay.shape_of(uop_211))) # shape=(11, 15, 9)
var_220 = relay.var("var_220", dtype = "bool", shape = (11, 15, 9))#candidate|220|(11, 15, 9)|var|bool
bop_221 = relay.floor_mod(bop_217.astype('float32'), relay.reshape(var_220.astype('float32'), relay.shape_of(bop_217))) # shape=(11, 15, 9)
uop_224 = relay.sinh(var_207.astype('float64')) # shape=(11, 15, 9)
uop_226 = relay.log10(bop_214.astype('float32')) # shape=(11, 15, 9)
bop_228 = relay.logical_xor(uop_226.astype('uint8'), var_206.astype('uint8')) # shape=(11, 15, 9)
var_231 = relay.var("var_231", dtype = "uint8", shape = (11, 15, 9))#candidate|231|(11, 15, 9)|var|uint8
bop_232 = relay.minimum(bop_228.astype('int16'), relay.reshape(var_231.astype('int16'), relay.shape_of(bop_228))) # shape=(11, 15, 9)
var_235 = relay.var("var_235", dtype = "float32", shape = (11, 15, 9))#candidate|235|(11, 15, 9)|var|float32
bop_236 = relay.less_equal(bop_221.astype('bool'), relay.reshape(var_235.astype('bool'), relay.shape_of(bop_221))) # shape=(11, 15, 9)
var_239 = relay.var("var_239", dtype = "float32", shape = (11, 15, 9))#candidate|239|(11, 15, 9)|var|float32
bop_240 = relay.not_equal(bop_221.astype('bool'), relay.reshape(var_239.astype('bool'), relay.shape_of(bop_221))) # shape=(11, 15, 9)
var_243 = relay.var("var_243", dtype = "uint8", shape = (11, 15, 9))#candidate|243|(11, 15, 9)|var|uint8
bop_244 = relay.multiply(bop_228.astype('uint8'), relay.reshape(var_243.astype('uint8'), relay.shape_of(bop_228))) # shape=(11, 15, 9)
const_247 = relay.const([[[5,-4,-3,3,-9,-3,5,-9,2],[10,-9,4,8,-3,10,8,2,-10],[6,-6,10,1,9,-8,5,-2,10],[10,2,8,-5,-9,8,-1,5,-1],[-7,10,4,8,5,-4,6,2,-9],[-1,-9,-3,-10,-3,-4,-1,9,-8],[9,-2,5,-1,10,-10,6,-5,-4],[1,-3,-10,-1,9,-10,4,-4,-8],[-10,4,4,9,7,-4,2,-4,10],[-3,3,-2,2,4,10,-7,-3,-2],[-4,9,-5,-2,-8,2,-10,-10,9],[-6,8,7,6,-10,-4,7,3,1],[1,-5,-10,9,-3,3,-9,-3,10],[6,-3,-4,9,4,7,10,-9,-7],[5,8,-4,-2,-9,1,4,-5,4]],[[-1,-1,4,10,-8,-10,-7,10,3],[-4,7,9,-3,5,-7,7,1,4],[-6,1,5,-8,8,-8,1,7,5],[8,-8,-6,-2,-4,-1,-10,7,10],[5,-4,7,4,-6,-10,7,-9,-2],[2,9,9,-8,-6,10,-7,-5,8],[5,-2,4,-1,9,-8,8,5,9],[5,2,-2,-7,-9,-2,-4,10,-9],[7,7,-4,9,8,9,-9,-5,-6],[-7,-6,5,5,8,-5,-2,-10,10],[-6,6,-4,-1,1,-4,-3,-10,-7],[-8,2,8,2,10,8,6,1,-10],[-8,6,9,4,2,10,9,-4,1],[-10,1,-6,2,-5,-3,5,-7,1],[-4,-7,-1,8,4,-10,-1,9,2]],[[10,-7,-6,9,-4,-4,-2,9,5],[-6,-9,2,-7,-2,6,4,-8,1],[3,-5,8,-1,-8,-2,10,5,-10],[9,-3,-6,4,6,-2,8,-9,-2],[4,7,-4,6,-7,-1,1,6,10],[-2,-1,8,5,1,-1,-1,8,5],[-9,8,-4,-2,-1,-7,-10,7,9],[-9,3,8,-4,-7,9,6,4,3],[-3,3,5,4,10,9,1,4,7],[-8,-5,5,8,1,3,2,-8,1],[4,1,9,5,-7,3,-5,4,5],[-1,1,7,-5,-4,-5,-8,-10,-4],[8,-10,2,-8,-4,4,-4,-4,-8],[-10,3,8,9,-6,-7,-8,2,10],[1,1,-10,7,-2,10,-4,-5,-4]],[[-5,-10,-2,3,-4,7,-1,9,2],[-6,5,9,-8,-8,2,-5,-5,-7],[-4,6,-7,9,9,-9,1,-1,-1],[-4,5,-1,3,3,-1,-4,5,2],[-1,10,-10,1,4,10,2,6,3],[4,3,4,2,-10,6,-8,4,-6],[-9,-8,1,-2,-9,10,-6,-9,-6],[5,-1,-6,7,-3,-4,-7,-8,-9],[10,-1,8,4,10,4,-6,-5,-4],[-3,4,3,-5,-4,3,1,5,-6],[-5,-8,6,10,-1,-9,5,7,10],[-1,8,9,9,9,-1,-8,7,-1],[7,5,8,2,-9,-5,9,-3,1],[2,-9,-5,-6,-9,8,6,-3,3],[8,-3,6,-4,-3,-4,7,6,7]],[[-8,-4,-7,-9,8,-7,-3,8,-2],[5,-9,-2,-5,-1,7,-4,-2,-6],[-3,-6,-6,1,8,5,-4,-5,-1],[8,-6,-6,-6,1,-1,8,1,2],[-7,-7,4,4,-4,-1,-5,-10,-7],[-7,-7,2,5,-1,-6,-6,-7,9],[-6,-7,3,7,8,-3,2,-7,-10],[8,-1,-4,1,1,2,9,-6,-10],[6,-8,-5,-9,-3,-7,-7,6,3],[6,-9,-1,-8,1,-9,-2,-10,-9],[-3,1,7,7,-4,-4,5,10,9],[-7,2,-3,-2,-5,-7,-7,-5,6],[-8,-5,-8,-7,9,8,-9,-6,-6],[-3,4,-1,2,-3,8,-8,4,7],[2,-6,-3,10,-1,6,-5,-8,-5]],[[-10,-8,-6,10,-3,7,8,-7,-4],[-1,6,-1,1,-9,5,-9,3,-5],[6,-2,2,2,-3,-4,-1,1,7],[8,-8,-9,3,7,5,-4,9,-1],[-9,1,-10,-7,2,-6,10,8,-3],[2,-5,1,-10,3,2,10,-5,-3],[8,5,8,10,7,9,-7,5,9],[-3,10,-8,-8,-4,-1,-9,7,-10],[7,-6,-8,-6,5,8,-7,2,-7],[-10,9,9,10,-9,-1,-5,-7,-7],[-5,1,-4,3,9,9,-6,-10,-2],[4,-6,1,10,-8,-7,5,7,4],[-4,-5,2,9,-2,2,-10,5,9],[-5,-4,-9,9,-4,9,-10,-5,-6],[-8,7,-3,-3,5,-1,6,5,-1]],[[2,8,6,6,-8,10,1,8,9],[7,6,-10,8,3,7,-8,3,6],[1,9,6,5,9,-5,5,-10,6],[8,-5,7,-4,-10,-1,10,8,-3],[-9,2,-2,-6,-9,-9,-4,6,5],[-1,8,-8,8,3,5,2,4,2],[9,4,4,-10,8,10,-1,4,2],[10,-8,-8,9,-9,-2,-1,-10,-10],[6,-3,-7,-10,3,10,4,7,-5],[8,-3,-10,-9,7,-6,2,-6,-8],[7,1,-2,7,-3,1,-7,5,-6],[-6,-4,4,9,-3,10,-8,-9,-9],[2,-8,-10,6,-6,9,3,-8,-10],[8,6,-2,3,7,1,-5,-2,7],[-2,1,-3,1,-8,5,-9,7,4]],[[-6,-9,1,9,-2,-10,4,3,1],[8,10,-1,5,-7,9,-10,-2,-8],[-1,-10,-9,-4,-4,10,3,-9,5],[-9,2,-1,-9,8,3,4,-6,-9],[-9,-9,1,8,9,-6,-7,-5,1],[4,8,-3,9,-7,6,-1,2,-5],[9,-7,-3,3,8,-1,-3,-2,6],[-3,5,-1,9,-3,9,-4,-5,7],[3,-8,-7,1,3,-2,-9,5,9],[4,-7,9,-8,6,-3,1,-2,-7],[7,8,1,8,-7,3,-8,-3,5],[1,-4,-7,10,1,7,1,-5,-6],[1,8,7,-5,10,10,-10,9,7],[-1,1,9,9,4,8,-4,-3,8],[-4,5,-3,-9,3,8,-3,-7,10]],[[-2,3,-5,-5,-2,1,-6,-3,1],[5,8,10,-10,-5,-7,2,-4,-7],[-7,-9,-9,-9,9,8,-7,-2,3],[-2,-4,1,-2,3,9,6,-2,-7],[9,-8,9,8,2,-10,3,9,9],[-1,2,-8,3,1,2,6,3,8],[3,7,-10,-8,10,-2,-7,1,-8],[4,-6,-9,-2,-2,1,6,-7,-7],[1,10,5,2,7,-3,6,-8,-2],[-3,-10,-9,4,-4,10,8,7,5],[-9,3,-10,-1,-6,1,6,2,8],[8,9,-2,1,2,-7,-1,-4,4],[-3,-2,-6,8,-6,7,-4,-5,6],[3,9,-7,-2,5,-3,2,6,8],[9,-3,8,9,6,8,3,-3,-7]],[[-9,9,7,-2,1,-4,-1,4,-8],[-5,-8,-2,7,8,-8,-10,-5,10],[2,-2,-2,-1,9,-9,10,5,7],[4,3,-3,6,7,-4,-3,8,1],[-2,-3,10,8,-5,9,10,-9,-5],[3,8,5,4,-10,5,-4,-6,8],[10,7,10,-9,-9,-3,-1,-10,-4],[-10,-2,3,-2,6,4,5,1,9],[-7,-2,-9,5,-9,8,7,-2,-10],[10,-1,-1,10,9,7,-5,-8,-3],[1,-6,2,-4,4,9,2,-8,-6],[10,-5,1,6,-6,-4,1,8,6],[1,-8,7,-1,-9,-3,-9,4,9],[6,1,2,-5,-1,-10,3,-6,-10],[-10,-3,1,-5,9,6,5,5,-6]],[[-3,2,3,10,7,7,-10,-8,6],[-1,2,2,-7,-10,7,3,-8,-6],[9,7,4,1,10,9,3,-9,-9],[2,2,-2,9,-8,10,-6,-2,3],[6,9,7,2,-9,4,-5,-8,8],[5,5,4,9,-6,-2,6,5,4],[5,-2,10,-6,2,-2,-4,-8,4],[8,-4,6,-3,6,10,-2,7,-1],[9,1,-1,-2,4,6,3,-1,8],[5,-2,3,-10,-8,10,3,7,1],[-9,-5,-4,-8,6,-6,-9,-8,-9],[-4,8,5,1,7,1,8,-2,2],[-5,-7,-2,-7,-3,3,-8,10,-6],[5,-4,-7,-2,-5,-9,2,-7,-7],[1,1,1,-5,-10,-6,-1,-6,-3]]], dtype = "uint8")#candidate|247|(11, 15, 9)|const|uint8
bop_248 = relay.maximum(bop_228.astype('int16'), relay.reshape(const_247.astype('int16'), relay.shape_of(bop_228))) # shape=(11, 15, 9)
const_251 = relay.const([[[3,10,9,5,-10,-5,-4,-8,9],[2,-2,3,9,-6,-10,4,6,-9],[4,10,2,-10,10,7,-3,-1,7],[3,-4,8,-1,-9,6,5,4,5],[3,-2,-3,-4,-8,-3,7,-3,-5],[4,3,7,5,-3,-1,5,-4,-9],[-6,5,-6,-2,-6,-5,-6,-9,6],[10,1,-10,-2,6,-4,2,6,7],[-8,6,-4,5,9,8,-3,7,-2],[4,-6,1,-3,-3,2,2,8,2],[-8,1,4,-5,8,8,-2,5,3],[7,8,-7,-9,10,7,-1,-10,4],[-2,10,-2,-1,3,10,3,-3,9],[-3,1,8,-7,6,-1,-3,9,2],[-4,-4,10,-2,-5,-8,-7,5,-6]],[[9,-1,-3,5,-5,1,-6,2,-1],[-5,-7,-10,-5,6,6,-2,-5,9],[-7,-6,-7,-10,4,-2,-4,10,7],[6,6,1,-6,-8,-8,-1,-1,7],[-5,-2,1,-6,3,8,-5,-2,-8],[4,8,5,10,2,2,-9,8,-6],[7,4,7,10,6,-2,6,10,-9],[-3,10,10,5,-9,-3,4,6,-10],[9,2,3,-2,1,5,7,-10,-3],[7,2,-3,-10,4,4,-8,5,8],[5,7,4,-7,-9,-7,7,-2,-1],[-1,3,-6,1,-10,5,4,-2,5],[2,6,-9,4,9,3,3,1,-1],[-5,-3,1,-6,6,-6,3,-5,9],[-2,-7,1,10,-6,-1,10,-1,2]],[[-8,7,-6,7,10,8,5,2,-2],[-6,6,3,-8,5,5,1,8,9],[2,-3,9,2,3,10,7,-10,-5],[-2,6,-4,7,-4,5,8,1,-8],[5,6,3,5,-9,3,-6,1,-4],[-4,-10,3,4,-1,-3,7,10,-5],[-9,-3,3,-6,-10,-2,-10,5,-9],[-5,10,-9,-6,10,-2,-9,3,-1],[7,-5,4,3,-8,-6,-7,-1,7],[-1,-8,9,3,-3,1,3,5,6],[9,-5,-10,-3,2,-5,6,9,4],[-6,-7,5,6,5,6,-1,3,-2],[-7,-1,1,-7,1,-2,4,-3,-10],[-7,6,6,-3,7,-4,-10,-5,1],[6,-4,-4,1,-4,-10,-5,-1,-1]],[[3,5,-10,10,-2,-1,-3,-1,-2],[-1,4,1,2,-1,5,1,5,-7],[-6,7,1,3,4,1,10,1,9],[-7,8,-5,9,-10,-3,1,3,1],[5,10,-1,-7,2,4,2,6,1],[-2,9,-7,10,-6,-8,-10,3,4],[10,-5,-9,-6,2,10,3,-4,-5],[-7,-10,1,9,3,-9,6,-8,4],[9,8,-3,-5,-2,1,1,-4,2],[-1,7,5,-2,-7,-1,8,2,1],[4,-2,-4,-6,10,8,-5,4,-2],[10,-7,4,10,8,-8,5,-5,-10],[9,-4,6,-2,-10,5,-3,-7,3],[-10,3,-3,9,5,-5,10,1,-3],[-5,-7,9,-8,8,7,-7,4,-7]],[[1,7,7,-2,-5,3,9,-1,7],[-10,-6,-10,-2,10,-7,3,10,-7],[-1,5,2,-4,-10,-9,8,-1,10],[5,-8,-7,9,-4,-1,9,-10,10],[4,2,10,10,1,-10,3,-2,-10],[8,1,2,5,-6,6,6,7,-6],[1,4,-7,4,10,1,-7,1,2],[-9,-5,-1,-10,-10,7,5,4,-10],[4,1,2,-5,-2,6,-10,-1,2],[5,-1,9,3,-7,-3,-5,3,-10],[9,-3,-2,5,3,-4,-9,7,3],[1,-9,-2,7,9,3,-4,-5,-3],[5,-6,5,-3,10,-6,7,-1,-6],[-1,10,1,-9,8,-2,-10,1,5],[-7,-8,-2,2,-2,8,-5,8,-8]],[[1,-6,5,1,6,1,-6,4,5],[-8,5,-9,-7,9,2,-6,9,3],[1,9,-6,1,-9,5,8,1,5],[-4,8,10,5,2,-10,-9,-1,-8],[-7,8,-1,9,8,5,-2,10,6],[-10,5,-6,9,6,2,-6,3,6],[-6,-7,5,-10,1,-8,9,10,2],[-9,-1,-2,10,-3,-1,-9,4,-1],[-6,-7,-2,-5,-3,-5,1,9,-2],[5,8,-3,9,-3,-7,-9,7,1],[-10,-8,-1,1,10,2,-8,2,-6],[-2,8,-5,2,-8,-1,6,-5,-8],[9,8,7,3,-10,-1,1,-1,-1],[-2,4,9,8,1,-10,-2,6,2],[4,9,8,10,5,8,10,6,1]],[[1,1,-5,-9,-1,10,10,-7,-6],[1,6,-9,-2,6,3,3,9,4],[-6,2,9,3,6,8,-8,-9,-5],[-1,-5,4,6,-2,3,10,10,-1],[4,8,-5,-1,5,9,8,6,-9],[-3,-10,-2,2,4,-4,1,-10,-9],[5,-8,-1,2,-9,5,9,-4,7],[-1,10,1,2,-3,2,7,-1,10],[4,-3,2,-10,10,-9,-2,5,8],[7,9,2,1,1,-6,5,-4,-10],[8,9,-6,4,9,-1,5,-8,-7],[6,-10,9,9,-6,4,-1,-8,2],[-9,3,4,-6,1,3,-4,3,7],[2,9,1,5,-8,2,-8,-6,2],[6,-1,4,4,-3,4,2,4,-5]],[[5,-8,-3,-4,-3,4,2,-3,-7],[-7,7,-10,7,-8,-1,7,4,-10],[-8,-10,5,-6,5,2,-8,-3,-6],[-7,-4,6,-9,3,10,2,8,-9],[-7,-3,-6,-4,-1,-1,-1,2,5],[-3,4,-10,9,-2,-4,-1,-8,3],[9,-2,4,9,-4,-1,10,-5,-9],[-1,-5,-7,-6,1,-5,9,2,4],[7,-1,6,-9,-5,-3,9,5,6],[6,2,-7,-2,1,-10,-7,-10,-9],[10,5,4,2,-1,-9,10,-1,1],[-1,6,6,-9,-4,-3,9,3,-1],[-1,10,9,-9,5,1,-7,10,6],[-1,8,6,-8,-5,9,8,8,-2],[-7,5,-10,-7,-1,-2,2,-2,9]],[[-2,-4,-10,2,1,-5,-6,-3,-4],[9,3,8,-9,-9,3,-10,8,1],[-7,3,-10,10,-1,-6,9,6,-9],[5,9,8,5,6,-4,-9,-9,-8],[3,4,4,-10,-9,-2,5,6,-5],[-3,-4,2,-5,8,5,2,7,-3],[7,-3,2,-5,-5,10,-5,10,3],[9,3,1,-7,-8,-10,-7,-6,5],[6,-6,1,2,-2,-9,-4,-4,-8],[-7,-9,-9,-9,10,-7,-5,5,5],[-1,5,-1,8,-1,-2,-9,-3,-7],[-9,-1,2,-4,-2,-10,6,-5,-5],[-5,2,5,-6,7,5,4,-8,3],[-4,7,-5,-4,-8,-3,-7,-6,-4],[-5,7,10,5,4,-2,3,5,3]],[[-7,-2,-9,-10,1,7,6,8,5],[-5,-3,-2,-7,2,-5,1,-3,8],[8,-8,3,6,9,-5,1,5,-9],[10,3,8,-4,-1,2,9,-7,-10],[-4,2,-2,10,-4,-9,3,9,-9],[4,-5,-2,-4,8,-10,4,7,-7],[-10,4,1,7,1,10,4,-5,8],[-10,10,8,8,-6,-7,-6,2,-2],[-1,7,-6,4,-10,3,-8,-4,10],[-10,3,3,-9,-8,-1,3,9,6],[6,9,10,-6,2,-7,-10,-1,3],[5,-5,2,-3,-7,-3,-2,-4,-5],[-3,-3,8,7,8,-5,4,-2,2],[4,-7,8,8,10,-10,-6,-5,8],[-10,-3,5,-1,7,7,-7,5,-5]],[[-7,4,5,-2,7,-2,3,1,2],[4,-4,-7,2,-3,-2,-1,-1,8],[-9,9,-10,-2,-2,-8,1,-8,-7],[-8,-10,8,-1,-3,-6,-10,-3,-4],[7,7,10,-4,9,6,6,7,-6],[10,-5,-2,5,-9,-3,5,-8,-1],[-8,-9,-4,5,10,-8,10,-6,10],[-8,-1,5,-8,6,-3,-4,10,9],[10,-8,7,-7,-1,-2,2,-7,-8],[7,-5,2,9,-8,-9,7,-1,10],[-8,-7,-3,-1,10,7,2,-6,8],[6,5,-8,-1,6,7,-3,4,-5],[8,1,6,8,4,7,-1,9,7],[10,10,1,1,-6,4,1,9,-2],[10,5,1,5,-4,-7,10,10,-1]]], dtype = "uint8")#candidate|251|(11, 15, 9)|const|uint8
bop_252 = relay.bitwise_and(bop_228.astype('uint64'), relay.reshape(const_251.astype('uint64'), relay.shape_of(bop_228))) # shape=(11, 15, 9)
uop_255 = relay.rsqrt(bop_232.astype('float64')) # shape=(11, 15, 9)
uop_257 = relay.erf(uop_255.astype('float32')) # shape=(11, 15, 9)
func_120_call = mod.get_global_var('func_120')
func_125_call = mutated_mod.get_global_var('func_125')
const_260 = relay.const([5.338776,0.006733,3.060121,-3.996535,2.850215,-0.671195,9.604142,-2.292847,-9.313852,-0.664173,-2.401935,0.973972,-1.454659,-9.356983,0.115277,3.195759,0.634270,7.825020,5.191727,-0.623921,-7.636480,7.765522,3.932278,1.947031,5.209410,-9.454315,-0.421110,8.973836,4.148489,-4.124693,4.111497,8.859305,0.206096,5.602300,-7.762269,2.879493,1.248640,-7.483449,-5.802807,-5.251969,5.353479,5.502400,-5.699556,2.898857,5.966227,-7.351765,8.908888,8.412615,-1.351754,9.182541,-1.532033,2.039253,0.706134,-6.316843,-2.960169,2.731496,-9.642820,2.477501,-3.306643,-5.786092,-3.393878,-3.742095,-8.271950,-0.064442,7.581990,-7.499977,0.906838,7.086773,3.900235,-4.186068,-6.712457,-0.561370,0.854898,7.171074,-8.924950,7.129083,2.479349,-5.810967,9.769615,-4.711467,-5.563489,9.112786,3.581513,-9.910518,-0.298663,-2.696162,-9.543657,9.404998,-2.444932,3.867075,-2.168636,0.837754,4.544492,-5.421957,9.530576,0.507051,0.949601,6.836064,6.475325,1.717100,-6.337537,-7.798699,-2.400424,-0.690112,-2.359442,5.606618,-8.021424,-9.729664,-6.666415,9.015412,-0.088313,4.977806,6.048092,-5.579417,-0.364609,-1.187089,5.245486,-1.519622,7.328960,-6.567706,-0.691413,-1.476925,-3.751081,-2.860183,0.214017,-1.926524,-7.812975,0.788673,-8.728434,-0.742563,-2.375393,-3.739725,4.752216,5.494442,7.153503,0.464729,-8.409011,7.380884,-1.444269,1.675613,2.882902,0.525284,-2.738847,7.333086,-3.859988,0.359467,-0.958346,-2.797615,-6.294247,-2.630007,3.573122,-0.533945,-2.681481,3.651417,3.643340,-4.828380,-2.628278,5.705411,0.765648,-2.809434,-2.533218,-2.294595,5.041484,4.629533,-1.477678,9.259686,2.554684,9.136734,9.608834,-8.284503,-2.979847,8.970501,0.002554,3.026099,8.136956,-1.490567,7.560038,4.742459,-6.826308,3.841721,-8.711982,-3.515072,-7.967217,6.548613,-9.829690,-6.358157,4.369699,-6.202339,-1.093079,6.953261,7.337164,-6.414008,-8.617023,0.811156,-7.282912,9.840571], dtype = "float32")#candidate|260|(196,)|const|float32
call_259 = relay.TupleGetItem(func_120_call(relay.reshape(const_260.astype('float32'), [2, 7, 14]), relay.reshape(const_260.astype('float32'), [2, 7, 14]), relay.reshape(const_260.astype('float64'), [2, 7, 14]), ), 1)
call_261 = relay.TupleGetItem(func_125_call(relay.reshape(const_260.astype('float32'), [2, 7, 14]), relay.reshape(const_260.astype('float32'), [2, 7, 14]), relay.reshape(const_260.astype('float64'), [2, 7, 14]), ), 1)
bop_262 = relay.maximum(uop_257.astype('int32'), relay.reshape(bop_221.astype('int32'), relay.shape_of(uop_257))) # shape=(11, 15, 9)
var_265 = relay.var("var_265", dtype = "float32", shape = (11, 15, 9))#candidate|265|(11, 15, 9)|var|float32
bop_266 = relay.logical_or(uop_257.astype('bool'), relay.reshape(var_265.astype('bool'), relay.shape_of(uop_257))) # shape=(11, 15, 9)
uop_269 = relay.tan(uop_257.astype('float32')) # shape=(11, 15, 9)
uop_271 = relay.asinh(uop_269.astype('float32')) # shape=(11, 15, 9)
var_273 = relay.var("var_273", dtype = "float32", shape = (11, 15, 9))#candidate|273|(11, 15, 9)|var|float32
bop_274 = relay.not_equal(uop_271.astype('bool'), relay.reshape(var_273.astype('bool'), relay.shape_of(uop_271))) # shape=(11, 15, 9)
output = relay.Tuple([uop_224,bop_236,bop_240,bop_244,bop_248,bop_252,call_259,const_260,bop_262,bop_266,bop_274,])
output2 = relay.Tuple([uop_224,bop_236,bop_240,bop_244,bop_248,bop_252,call_261,const_260,bop_262,bop_266,bop_274,])
func_277 = relay.Function([var_206,var_207,var_213,var_220,var_231,var_235,var_239,var_243,var_265,var_273,], output)
mod['func_277'] = func_277
mod = relay.transform.InferType()(mod)
mutated_mod['func_277'] = func_277
mutated_mod = relay.transform.InferType()(mutated_mod)
func_277_call = mutated_mod.get_global_var('func_277')
var_279 = relay.var("var_279", dtype = "float64", shape = ())#candidate|279|()|var|float64
var_280 = relay.var("var_280", dtype = "float64", shape = (11, 15, 9))#candidate|280|(11, 15, 9)|var|float64
var_281 = relay.var("var_281", dtype = "float64", shape = (11, 15, 9))#candidate|281|(11, 15, 9)|var|float64
var_282 = relay.var("var_282", dtype = "bool", shape = (11, 15, 9))#candidate|282|(11, 15, 9)|var|bool
var_283 = relay.var("var_283", dtype = "uint8", shape = (11, 15, 9))#candidate|283|(11, 15, 9)|var|uint8
var_284 = relay.var("var_284", dtype = "float32", shape = (11, 15, 9))#candidate|284|(11, 15, 9)|var|float32
var_285 = relay.var("var_285", dtype = "float32", shape = (11, 15, 9))#candidate|285|(11, 15, 9)|var|float32
var_286 = relay.var("var_286", dtype = "uint8", shape = (11, 15, 9))#candidate|286|(11, 15, 9)|var|uint8
var_287 = relay.var("var_287", dtype = "float32", shape = (11, 15, 9))#candidate|287|(11, 15, 9)|var|float32
var_288 = relay.var("var_288", dtype = "float32", shape = (11, 15, 9))#candidate|288|(11, 15, 9)|var|float32
call_278 = func_277_call(var_279,var_280,var_281,var_282,var_283,var_284,var_285,var_286,var_287,var_288,)
output = call_278
func_289 = relay.Function([var_279,var_280,var_281,var_282,var_283,var_284,var_285,var_286,var_287,var_288,], output)
mutated_mod['func_289'] = func_289
mutated_mod = relay.transform.InferType()(mutated_mod)
const_291 = relay.const(6.403394, dtype = "float64")#candidate|291|()|const|float64
uop_292 = relay.erf(const_291.astype('float64')) # shape=()
bop_294 = relay.greater_equal(uop_292.astype('bool'), const_291.astype('bool')) # shape=()
uop_297 = relay.asin(bop_294.astype('float64')) # shape=()
bop_299 = relay.bitwise_and(bop_294.astype('int16'), uop_292.astype('int16')) # shape=()
bop_302 = relay.left_shift(uop_297.astype('int16'), bop_294.astype('int16')) # shape=()
var_305 = relay.var("var_305", dtype = "int16", shape = (16, 5, 10))#candidate|305|(16, 5, 10)|var|int16
bop_306 = relay.floor_mod(bop_302.astype('float64'), var_305.astype('float64')) # shape=(16, 5, 10)
bop_309 = relay.floor_mod(bop_306.astype('float32'), bop_299.astype('float32')) # shape=(16, 5, 10)
bop_312 = relay.subtract(bop_294.astype('int32'), var_305.astype('int32')) # shape=(16, 5, 10)
bop_315 = relay.not_equal(uop_297.astype('bool'), bop_312.astype('bool')) # shape=(16, 5, 10)
var_318 = relay.var("var_318", dtype = "bool", shape = ())#candidate|318|()|var|bool
bop_319 = relay.less(bop_294.astype('bool'), var_318.astype('bool')) # shape=()
bop_322 = relay.logical_or(bop_315.astype('bool'), bop_294.astype('bool')) # shape=(16, 5, 10)
bop_325 = relay.bitwise_or(var_305.astype('uint64'), relay.reshape(bop_306.astype('uint64'), relay.shape_of(var_305))) # shape=(16, 5, 10)
bop_328 = relay.not_equal(bop_302.astype('bool'), bop_325.astype('bool')) # shape=(16, 5, 10)
bop_331 = relay.greater(bop_319.astype('bool'), bop_306.astype('bool')) # shape=(16, 5, 10)
bop_334 = relay.right_shift(bop_309.astype('int8'), relay.reshape(bop_328.astype('int8'), relay.shape_of(bop_309))) # shape=(16, 5, 10)
uop_337 = relay.sin(bop_294.astype('float64')) # shape=()
bop_339 = relay.logical_or(uop_292.astype('bool'), bop_299.astype('bool')) # shape=()
const_342 = relay.const([[[2,1,7,-6,-1,9,8,-9,5,-4],[6,8,-6,-5,7,-8,-10,-10,4,-9],[2,-3,8,-3,-4,1,-2,-3,-9,-5],[8,5,2,-6,3,3,3,-8,-2,5],[7,5,5,10,-8,-8,8,-8,-1,1]],[[10,-3,-2,6,-1,-9,7,10,1,3],[6,-8,9,9,10,7,-3,-5,-1,-10],[-1,3,-4,7,-2,5,-6,-4,-10,-4],[-10,2,-1,-8,-9,-7,9,8,2,9],[10,3,8,10,8,-10,-6,2,1,-10]],[[-2,1,-8,5,6,7,7,-1,-7,4],[-6,-6,7,8,9,10,-6,3,2,7],[9,6,-3,-2,8,6,10,-6,9,9],[-5,-9,10,6,-9,9,-6,5,-2,10],[3,-5,7,4,-7,-3,-1,-3,6,2]],[[4,-3,-8,10,7,3,-5,7,-2,-7],[3,1,-4,-5,-8,6,-8,-2,9,-8],[1,8,-10,7,5,10,4,10,-10,10],[1,9,7,8,3,-4,-7,-10,7,-10],[-9,-10,4,3,-6,3,9,9,-3,-1]],[[4,1,-8,-10,-6,9,1,-10,-9,10],[-8,-5,4,2,-2,6,-8,1,7,3],[4,-1,-1,-1,-8,8,-5,-4,8,10],[10,-9,-2,6,-2,3,1,2,-6,4],[5,9,-6,2,-8,-5,-8,-7,-3,-10]],[[-4,-2,8,10,-6,-10,-6,-4,2,6],[8,-8,-4,-7,-2,3,-3,-4,8,6],[6,-8,5,-5,-7,6,-10,2,-3,-2],[-9,2,1,-2,10,4,4,-10,-3,-3],[-4,6,7,-10,10,-7,9,2,7,-9]],[[-1,-5,-5,1,10,10,7,9,-5,-4],[5,5,-3,1,10,7,5,6,8,9],[3,1,-5,-2,1,7,-9,9,-1,2],[-2,-5,-2,6,8,8,-3,1,-9,-10],[1,8,2,-2,10,6,-4,9,-10,7]],[[-8,-1,-2,-1,-7,5,8,10,1,-3],[-7,-2,-10,10,-6,9,-10,7,3,6],[6,-8,5,4,-9,6,6,8,9,-5],[4,8,-2,-7,10,-5,-5,1,-8,-5],[-2,4,8,-3,9,-1,1,9,4,-8]],[[-1,3,5,-5,6,1,-10,-5,8,-7],[-5,-2,-10,10,8,10,-3,5,-4,-3],[2,-8,1,-3,1,-8,8,3,-2,4],[2,-7,-5,-5,5,-1,9,7,5,9],[-10,4,-8,8,3,9,-7,2,-9,3]],[[2,10,5,3,9,-8,10,9,-3,7],[-10,-1,3,9,10,-7,-7,-6,-4,4],[3,-2,-8,-1,9,-4,6,-8,-1,-2],[-10,-5,-6,1,2,-3,7,-7,8,5],[10,6,7,5,-2,10,8,9,6,5]],[[-5,-2,6,9,-9,-9,6,-5,9,2],[8,3,5,1,-4,-9,7,-3,-1,4],[7,-1,1,5,-7,-3,-6,5,10,5],[4,-3,5,3,8,-8,-1,9,6,-3],[-10,-9,1,-2,-10,5,8,5,1,1]],[[-5,6,9,-7,-9,9,-7,8,2,8],[-4,8,-10,7,-10,3,-7,-3,-2,1],[-3,1,-9,-7,-8,5,-10,5,-5,-1],[9,4,3,-2,8,-8,-4,-10,-7,-3],[3,-8,8,-1,6,-2,6,-10,-1,-5]],[[6,1,-10,10,-9,-6,-1,-5,8,4],[8,6,9,-4,-8,3,-10,-3,-7,-2],[8,-9,10,7,-10,9,-4,3,-5,-8],[-5,9,3,-10,5,-7,9,1,9,-7],[-7,-6,-5,6,7,-3,5,2,3,10]],[[-3,2,-2,9,-9,10,-7,8,-7,-2],[-10,-9,-6,-3,-2,-7,-10,4,2,-5],[2,-8,4,-10,2,-7,4,9,6,9],[5,-10,-4,8,8,8,1,-8,2,7],[-10,8,10,-4,-9,4,-10,10,-9,-2]],[[4,-8,4,9,5,-9,8,-9,-5,5],[-7,-8,5,2,8,2,2,6,-7,-3],[9,-7,1,7,8,-10,5,3,9,4],[9,-9,8,-8,-8,-7,-5,8,-10,-4],[1,5,-3,3,-4,-9,-5,-6,4,5]],[[-5,1,-7,-7,-7,5,-6,-1,-1,-3],[3,7,-10,8,7,8,-10,-5,9,3],[-5,-4,-1,10,-1,-6,-4,-2,-6,-8],[8,6,-4,-2,-2,-9,-5,6,7,-7],[-6,3,-6,4,-7,-4,8,-10,8,7]]], dtype = "int32")#candidate|342|(16, 5, 10)|const|int32
bop_343 = relay.logical_xor(bop_312.astype('int64'), relay.reshape(const_342.astype('int64'), relay.shape_of(bop_312))) # shape=(16, 5, 10)
bop_346 = relay.not_equal(bop_294.astype('bool'), uop_292.astype('bool')) # shape=()
var_349 = relay.var("var_349", dtype = "bool", shape = (4,))#candidate|349|(4,)|var|bool
bop_350 = relay.equal(bop_346.astype('bool'), var_349.astype('bool')) # shape=(4,)
bop_353 = relay.divide(uop_297.astype('float64'), bop_350.astype('float64')) # shape=(4,)
bop_356 = relay.minimum(bop_334.astype('int16'), bop_346.astype('int16')) # shape=(16, 5, 10)
uop_359 = relay.atanh(bop_312.astype('float64')) # shape=(16, 5, 10)
output = relay.Tuple([bop_322,bop_331,uop_337,bop_339,bop_343,bop_353,bop_356,uop_359,])
output2 = relay.Tuple([bop_322,bop_331,uop_337,bop_339,bop_343,bop_353,bop_356,uop_359,])
F = relay.Function([var_305,var_318,var_349,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_305,var_318,var_349,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_305= np.array([[[-1,9,-9,8,1,8,-3,-9,-1,5],[7,9,5,-2,-3,5,2,-5,-4,3],[-2,5,-9,4,-7,-9,2,4,1,-6],[-7,-8,4,9,8,-3,-4,-6,5,10],[9,-8,-9,-10,6,-3,-8,1,-8,-2]],[[-4,-5,-5,9,2,-2,1,4,10,-10],[-2,9,-8,2,3,-2,-10,3,-9,3],[-4,-2,5,-6,-10,3,-1,-9,-7,5],[-6,-4,4,-2,-2,4,-2,-2,10,3],[-4,1,-3,4,-3,7,-4,8,10,10]],[[-4,9,-1,-4,1,-3,6,-2,-4,10],[-7,-1,-9,10,-8,3,-7,10,5,10],[-1,-5,-5,-7,-5,-8,-3,-3,7,-2],[-4,-7,-9,-8,8,2,-9,10,4,-2],[-6,1,-9,-2,6,1,10,10,4,-6]],[[5,4,5,-9,1,7,-2,-7,-3,-9],[-6,8,8,-7,-7,7,-1,6,-4,4],[-6,5,1,1,2,2,10,-5,-9,1],[5,8,8,1,-8,-9,10,-6,-7,-7],[-9,-8,1,9,8,-6,7,-9,7,-9]],[[7,-3,4,-7,6,-10,3,4,-3,-3],[-3,4,-2,-7,4,-8,-3,-9,-2,-8],[10,-3,-7,-8,2,-1,-2,-4,-9,7],[-6,6,8,8,2,8,3,-9,-8,3],[10,-4,-1,9,1,5,3,-9,-7,-10]],[[-1,2,-10,8,-8,10,5,2,-2,5],[-7,1,2,-10,6,-7,-8,3,-10,6],[2,-7,9,2,-10,-7,7,-8,9,-7],[10,2,-1,-6,7,-10,-9,7,-6,-1],[8,-7,7,4,-5,-3,-5,3,-1,8]],[[10,-9,4,-6,7,-1,5,-9,-5,-10],[-6,-5,9,8,6,10,-3,-6,-6,-1],[10,-7,-10,-9,9,-5,-4,5,-10,-3],[-8,-4,-3,2,-3,-2,3,-7,-8,-7],[-10,4,-3,-7,-4,1,3,-5,-8,-6]],[[7,5,1,-4,10,6,2,-4,-10,9],[-1,-6,-8,3,-7,8,-8,6,4,-6],[1,-6,3,9,-3,5,-1,-10,-1,6],[9,4,6,9,-1,-8,-9,7,-6,-5],[-5,3,-1,-4,4,-2,3,-2,-9,-10]],[[-6,-5,3,-6,8,-8,-2,-10,1,-7],[5,8,7,-8,-1,-7,9,3,-3,2],[2,8,-10,9,6,4,5,-1,4,-1],[2,-5,1,4,6,-7,8,2,-6,7],[7,3,-7,-6,-6,7,6,-8,9,1]],[[9,-4,5,-5,9,5,7,-7,4,5],[-2,-9,-6,3,10,3,-4,-10,-6,-2],[-7,8,4,-8,1,-10,8,1,-6,-1],[8,10,2,-3,-5,1,1,-7,7,5],[9,-8,5,-2,4,1,-9,8,-3,2]],[[-5,1,4,-4,3,6,-7,10,-8,4],[8,-5,-10,-10,5,10,-7,-7,7,2],[3,4,6,1,-6,5,-4,-1,-5,-5],[5,10,6,-2,1,5,-2,3,10,-2],[-2,-10,-9,-9,4,-5,-9,10,4,-8]],[[-6,2,-1,7,-10,-10,6,-7,3,-9],[9,-5,-1,-6,6,4,9,9,-1,-1],[-5,-1,1,8,-5,-10,-3,7,-1,-10],[6,-9,10,-5,4,9,-7,4,2,1],[-1,4,-7,9,-1,-6,-5,-2,-3,-5]],[[2,-8,-8,-6,-6,-8,9,2,-10,-5],[4,-7,-6,-5,7,8,5,8,-10,-4],[3,-1,3,-10,6,3,7,-8,-1,2],[2,9,5,3,-4,-10,-10,-1,6,-7],[7,10,-1,4,1,2,-5,-3,10,6]],[[6,3,8,-10,-5,7,-6,-5,7,-9],[-7,-2,-3,3,-2,9,2,3,-8,-4],[-9,-7,10,-1,3,-5,-4,1,3,-1],[10,2,-2,3,7,2,-2,2,3,9],[7,4,-1,7,8,9,-7,-3,-6,-6]],[[-8,1,-9,2,-8,8,6,-5,7,-3],[9,7,2,5,-8,3,1,-6,6,-4],[10,8,-4,-3,6,-7,7,-2,-4,9],[8,-8,5,-3,1,-5,-1,-6,-7,-5],[-6,-7,6,4,-6,2,4,-5,1,9]],[[-7,-2,9,-3,-7,-9,-9,-8,6,5],[-6,6,-4,-10,-2,6,5,-8,-5,3],[9,7,-8,5,8,6,6,3,-4,4],[1,-5,-9,3,6,-8,-5,5,1,-7],[-9,-2,-4,4,7,4,-9,6,-2,1]]], dtype='int16')
module1.set_input('var_305', input_305)
input_318= np.array(True, dtype='bool')
module1.set_input('var_318', input_318)
input_349= np.array([True,True,False,False], dtype='bool')
module1.set_input('var_349', input_349)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_305, input_318, input_349, )
res3 = intrp3.evaluate()(input_305, input_318, input_349, )
res4 = intrp4.evaluate()(input_305, input_318, input_349, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
module5.set_input('var_305', input_305)
module5.set_input('var_318', input_318)
module5.set_input('var_349', input_349)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_305, input_318, input_349, )
res7 = intrp7.evaluate()(input_305, input_318, input_349, )
res8 = intrp8.evaluate()(input_305, input_318, input_349, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
module9.set_input('var_305', input_305)
module9.set_input('var_318', input_318)
module9.set_input('var_349', input_349)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_305, input_318, input_349, )
res11 = intrp11.evaluate()(input_305, input_318, input_349, )
res12 = intrp12.evaluate()(input_305, input_318, input_349, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
module13.set_input('var_305', input_305)
module13.set_input('var_318', input_318)
module13.set_input('var_349', input_349)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_305, input_318, input_349, )
res15 = intrp15.evaluate()(input_305, input_318, input_349, )
res16 = intrp16.evaluate()(input_305, input_318, input_349, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
module17.set_input('var_305', input_305)
module17.set_input('var_318', input_318)
module17.set_input('var_349', input_349)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_305, input_318, input_349, )
res19 = intrp19.evaluate()(input_305, input_318, input_349, )
res20 = intrp20.evaluate()(input_305, input_318, input_349, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
module21.set_input('var_305', input_305)
module21.set_input('var_318', input_318)
module21.set_input('var_349', input_349)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_305, input_318, input_349, )
res23 = intrp23.evaluate()(input_305, input_318, input_349, )
res24 = intrp24.evaluate()(input_305, input_318, input_349, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()

'''95: TVMFuncCall
94: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
93: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
92: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
91: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
90: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
89: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
88: tvm::transform::Pass::operator()(tvm::IRModule) const
87: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
86: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
85: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
84: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
83: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
82: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
81: tvm::transform::Pass::operator()(tvm::IRModule) const
80: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
79: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
77: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
76: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
75: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
74: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
73: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
72: _ZN3tvm5relay9transform22Devic
71: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
70: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
69: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
68: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
67: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
66: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
65: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
64: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
63: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
62: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
61: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
60: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
59: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
58: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::te::Tensor, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
57: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::runtime::ObjectRef, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
56: tvm::LowerWithPassList(tvm::IRModule, tvm::runtime::Array<tvm::transform::Pass, void>)
55: tvm::transform::Pass::operator()(tvm::IRModule) const
54: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
53: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
52: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
51: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
50: _ZNSt17_Function_handlerIFvN3tvm7
49: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
48: tvm::tir::DataTypeRewriter::operator()(tvm::tir::Stmt)
47: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
46: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::ForNode const*)
45: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::ForNode const*)
44: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
43: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
42: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::ForNode const*)
41: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::ForNode const*)
40: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
39: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
38: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::StoreNode const*)
37: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
36: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS
35: _ZThn16_N3tvm3tir16DataTyp
34: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::MinNode const*)
33: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
32: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS
31: _ZThn16_N3tvm3tir16DataTyp
30: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CastNode const*)
29: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CastNode const*)
28: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
27: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
26: _ZThn16_N3tvm3tir16DataTyp
25: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
24: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CallNode const*)
23: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
22: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS
21: _ZThn16_N3tvm3tir16DataTyp
20: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CastNode const*)
19: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CastNode const*)
18: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
17: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
16: _ZThn16_N3tvm3tir16DataTyp
15: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::SubNode const*)
14: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
13: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
12: _ZThn16_N3tvm3tir16DataTyp
11: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::MulNode const*)
10: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
9: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
8: _ZThn16_N3tvm3tir16DataTyp
7: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
6: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CallNode const*)
5: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
4: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
3: _ZThn16_N3tvm3tir16DataTyp
2: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::DivNode const*)
1: tvm::div(tvm::PrimExpr, tvm::PrimExpr, tvm::Span)
0: tvm::PrimExpr tvm::arith::TryConstFold<tvm::tir::Div>(tvm::PrimExpr, tvm::PrimExpr)

'''