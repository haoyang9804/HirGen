import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (11, 5, 10))#candidate|0|(11, 5, 10)|var|float32
const_1 = relay.const([[[9.166525,0.152250,6.180964,-0.073573,7.312631,-8.332464,-0.144511,-1.413911,-6.199707,-6.236539],[8.885794,7.712359,9.893862,-7.491998,4.589026,3.739892,-8.982231,7.118391,7.899767,2.712945],[0.488726,-0.604484,-3.949990,4.929426,-0.206134,6.897174,-0.827645,-2.476298,0.539515,-9.467215],[3.263797,2.481808,-9.607640,1.803028,-7.610343,5.227304,-8.532553,-6.418712,-0.594858,9.008738],[1.823611,-5.200376,3.797196,8.189547,-1.329404,6.380547,9.694664,4.944441,3.669691,5.822157]],[[-4.324845,-2.202510,-4.128677,9.305223,-6.676138,7.648267,1.181987,2.834387,2.162869,-1.603465],[-2.052115,6.110993,-9.232510,-8.101058,9.257845,-3.930195,-0.273218,-9.038556,7.301432,5.061863],[-0.580113,9.424376,3.066705,-5.012637,4.074185,-1.969195,-4.934640,3.868845,-5.177528,-8.903369],[8.027138,5.857523,2.522959,-1.352282,6.853905,-0.369260,6.240978,-5.918821,4.569876,1.748337],[2.282613,-7.000991,8.756481,-9.954681,7.074578,1.166928,3.424659,-6.611094,-4.269988,9.139880]],[[1.916989,1.016812,4.850937,8.418687,-9.846556,6.355636,-9.190783,1.331330,1.218542,9.212153],[-0.120774,4.332645,-4.740693,2.161964,5.358535,-9.482087,-3.030154,5.525333,1.055616,-4.415391],[1.605663,3.903958,-5.986251,3.792358,0.048624,-0.080712,4.558399,2.031291,-1.390356,-0.108405],[-9.287894,-9.044498,-6.340837,-4.355539,-7.361370,6.104847,4.050360,7.778993,3.250669,2.951743],[3.223411,-5.294929,-1.703079,-7.018079,-4.518350,-1.447153,-4.398746,-5.866321,-0.215366,-5.472762]],[[3.468364,-5.064910,5.061495,-4.782553,-7.236512,0.156129,-6.806670,-7.350280,1.713011,1.419315],[0.340249,-1.773256,-6.614138,-8.388436,-9.061586,7.705220,-9.456720,-2.925212,6.237537,-6.278713],[-5.127493,7.669247,2.935131,4.896388,1.118736,3.686823,-2.552590,-7.461188,-9.005450,0.529974],[0.434609,-0.785613,-2.201699,2.591868,-3.058881,0.714657,0.610696,7.685172,-5.917958,-6.319277],[6.640099,-3.762834,4.966669,-5.960536,1.985164,-9.993954,-8.235485,-9.490713,5.628174,-0.968831]],[[6.857036,0.704573,-9.667868,-5.346875,9.520957,-7.060979,-8.329645,4.300161,0.597235,7.800312],[9.855982,-9.226256,-9.746533,7.975493,-9.807466,2.271014,5.637749,6.839125,4.784491,3.137105],[-5.851161,6.141662,-0.481215,-2.771509,-1.457690,3.170034,-6.929887,2.050987,-4.373855,-0.875980],[-3.257942,7.911364,-9.348715,-3.747184,-3.194505,0.593619,4.902771,3.205750,4.131535,-7.333903],[5.945951,8.167719,0.263036,-1.095409,9.966681,-5.956308,5.124339,-4.814577,-2.859822,2.225624]],[[-5.891798,9.427793,-1.111608,0.337598,1.271646,9.974457,9.763416,-9.178842,-3.726141,9.492971],[0.621428,3.271004,5.569850,4.127881,-9.944868,-4.258977,4.722839,9.919137,-2.221845,3.232610],[-4.071013,-3.685906,2.647067,-6.879493,9.801982,-2.946213,9.069614,3.721793,3.615777,8.098435],[-0.846370,-8.756499,8.421145,1.394640,-9.227650,4.414621,3.519122,5.477974,-5.493449,-2.764926],[2.047402,3.574565,8.016583,5.360079,5.161512,-6.875695,-0.399649,3.076336,-3.513933,9.361302]],[[8.388899,9.809714,-0.109433,7.343311,-0.819893,-5.992181,-1.375773,3.643704,0.933351,-2.148864],[7.978871,-9.687892,6.020495,3.385513,-3.815794,8.804242,-3.699740,-0.353012,6.245872,0.787833],[-6.762092,2.517296,6.626612,-6.675151,3.969490,9.547400,7.245404,-9.061766,4.077330,6.908141],[-2.563427,9.673008,5.392764,1.155092,-5.307426,9.913711,-8.775216,3.694921,7.947931,-9.900044],[0.317507,7.231144,0.937448,8.237761,2.208156,-1.190777,7.332139,-5.082736,-6.416476,2.648143]],[[1.302738,6.167278,7.386414,8.897862,-1.904144,1.461138,-9.109145,-3.347935,-4.825044,-6.950580],[-1.703129,8.904310,5.426364,9.816126,0.886076,-2.317144,9.838500,8.685342,-4.477382,2.229802],[-1.867272,-4.228183,9.439621,7.815753,8.865642,5.577809,-8.305901,1.520812,3.309067,5.784999],[-7.866946,0.354918,2.402129,-0.220836,5.609589,-1.006496,1.182421,-3.024983,-8.620337,-6.329933],[-1.628656,6.146519,4.481886,-9.374623,5.402502,4.186964,3.374887,4.324132,8.679842,-0.760922]],[[7.600376,0.606986,-8.901237,5.074462,9.598928,-8.057007,-3.567836,-7.214237,-6.817964,-5.150192],[0.466893,6.120050,-9.814577,2.179957,5.331575,-7.120910,8.449933,1.509716,-9.419989,-1.783965],[-7.907027,8.674877,-0.057709,-1.131628,-0.446829,9.131832,5.360365,-3.095570,5.557233,1.507837],[7.128003,-4.953571,5.419998,-1.282781,-1.237782,6.547139,4.060333,3.044199,0.590980,8.170654],[-7.968374,2.063681,4.456711,6.037874,3.274309,8.622913,0.616184,4.042445,5.829277,-8.487027]],[[-5.167091,2.799626,-0.254708,-4.677046,-9.613177,8.977309,-7.350569,-7.430668,-4.400423,-6.092670],[1.097867,-9.736660,1.657818,0.054599,-3.570754,9.683258,-6.296656,-9.064146,3.961783,-0.654435],[-6.303281,4.490094,-4.332849,6.626149,0.020707,-1.245474,3.029171,6.784552,2.235965,-0.535244],[-2.966843,-2.166658,-0.926477,4.867723,0.955512,5.987645,1.752426,-2.882697,1.081574,-1.652145],[-7.576451,7.314204,-8.266280,-4.991760,8.990392,8.106754,-0.968421,-0.816077,-3.579660,4.902959]],[[4.630780,-3.012879,5.710675,-5.418515,-4.648388,6.483198,-7.018930,-7.028992,-0.617382,-5.454385],[9.911703,9.859715,9.282901,-2.631499,-0.576494,-2.618442,9.635699,-4.599863,1.434895,2.772302],[-4.517631,-7.142767,8.024775,2.821982,-9.530500,9.291862,7.911996,9.610786,2.701207,-1.518873],[6.150541,1.725412,2.491129,1.727696,4.317419,-9.101160,-7.248439,-3.007614,-6.613647,0.220714],[4.543658,-4.176412,3.173619,2.845081,-0.310297,-3.760484,-3.172580,-2.100890,-3.178657,8.536611]]], dtype = "float32")#candidate|1|(11, 5, 10)|const|float32
bop_2 = relay.floor_mod(var_0.astype('float32'), relay.reshape(const_1.astype('float32'), relay.shape_of(var_0))) # shape=(11, 5, 10)
uop_5 = relay.tan(var_0.astype('float32')) # shape=(11, 5, 10)
uop_7 = relay.cosh(uop_5.astype('float32')) # shape=(11, 5, 10)
bop_9 = relay.subtract(bop_2.astype('int16'), relay.reshape(const_1.astype('int16'), relay.shape_of(bop_2))) # shape=(11, 5, 10)
uop_12 = relay.tan(uop_7.astype('float32')) # shape=(11, 5, 10)
uop_14 = relay.atanh(uop_12.astype('float32')) # shape=(11, 5, 10)
bop_16 = relay.power(uop_14.astype('float32'), relay.reshape(var_0.astype('float32'), relay.shape_of(uop_14))) # shape=(11, 5, 10)
var_19 = relay.var("var_19", dtype = "float32", shape = (11, 5, 10))#candidate|19|(11, 5, 10)|var|float32
bop_20 = relay.bitwise_and(uop_14.astype('uint64'), relay.reshape(var_19.astype('uint64'), relay.shape_of(uop_14))) # shape=(11, 5, 10)
bop_23 = relay.equal(bop_20.astype('bool'), relay.reshape(uop_12.astype('bool'), relay.shape_of(bop_20))) # shape=(11, 5, 10)
const_26 = relay.const([[[-5.157392,3.400621,3.099598,9.262747,-1.506001,5.181533,-4.833909,-8.749466,3.578443,9.303362],[-2.098802,4.799082,4.474666,0.572963,-4.288733,-7.341065,-6.546092,-9.945940,-6.233932,9.820068],[6.275965,-9.939198,2.818756,-3.850918,-1.806007,-6.195991,-6.494010,2.446816,-8.568065,-9.289197],[0.757553,-7.563230,0.960045,8.208475,-1.281841,-7.232707,0.075731,9.599659,-9.247605,0.683902],[2.838793,0.663650,7.439846,1.332163,3.282905,-1.173363,8.504681,-1.319869,8.847970,-1.491131]],[[-0.467370,9.622843,3.614003,-2.710100,4.466301,-2.360123,8.809154,-5.980902,-3.480989,-9.556801],[7.971362,-4.026732,3.392232,3.732740,-3.676421,9.760459,5.259405,-3.425180,4.934972,-4.972437],[-1.963539,-5.186972,-8.055352,-1.294311,-9.593132,-5.593411,-7.485765,-0.353659,7.750225,-9.443960],[0.211235,-3.772954,8.414363,-3.787664,3.491728,7.110702,4.309531,3.918003,-1.642933,1.481494],[-2.934015,-3.961399,-0.527113,9.466828,3.163219,-3.888037,8.987962,1.537429,3.627539,0.013480]],[[-3.104256,3.186834,-0.293167,9.908895,-2.297860,-2.181304,-8.095190,8.673224,1.485779,-0.930151],[5.493635,-4.152327,5.184598,4.662232,9.354645,4.183586,1.713696,6.955390,8.535519,-0.537850],[3.923073,-5.542305,4.308896,1.980326,-7.534470,6.564594,-9.808258,-5.941916,7.230210,-1.612213],[1.202019,-9.515008,-4.294281,-6.151357,-6.328057,-5.360650,1.303735,2.183939,-4.447693,-0.014046],[-2.943735,-8.205502,9.444014,-0.779766,-8.952690,7.524760,-8.515727,-7.415753,2.427047,-2.063145]],[[0.953010,-9.599861,-1.235078,-5.828892,-7.768426,5.670599,-2.801140,7.735500,0.105093,0.167616],[-5.882128,4.181968,-3.875622,-5.366127,-2.727314,-3.582843,8.082435,9.273229,-4.857516,-9.191762],[-8.778554,-7.703205,-8.283928,-5.026787,0.981144,3.442937,-7.880848,1.356620,1.251481,-2.023359],[-7.736589,6.517756,6.003812,3.602625,-0.542580,-2.282316,-1.955766,-7.385367,-0.734605,-0.436624],[-0.265135,-3.779797,-2.582355,3.747736,4.637296,4.855827,-5.527286,1.614406,5.722256,-4.108002]],[[-9.580860,-5.114187,3.238111,5.367934,1.594440,2.512342,-3.066588,-8.876397,1.473837,-0.643511],[-9.343215,4.944654,-7.662695,-6.603150,6.108248,-7.581296,-2.445535,-2.680243,0.184455,5.719816],[0.544401,-9.327037,-5.607577,-2.202723,-7.127654,-6.884157,1.832464,-7.111258,-7.422326,8.645943],[8.224538,-1.453103,9.281462,4.276673,-3.922964,8.898743,7.482870,6.056989,3.871877,-2.104612],[-8.599063,-0.182843,-8.067219,-4.524220,4.225464,-4.253147,3.300115,-8.763755,-2.965698,6.010436]],[[3.791450,-8.204171,-7.870008,-9.087770,-5.983934,6.682268,-1.373484,-7.639633,-7.744852,1.956388],[-2.039928,-4.803044,-1.776848,-0.973622,-4.746310,-0.915485,0.356531,4.969295,-5.796150,8.541681],[-1.228095,-0.175789,-6.345623,8.633763,0.781360,-2.716088,-2.091886,8.015814,-5.856783,7.287064],[9.265485,-5.281560,3.525610,-7.083915,5.234611,-2.649122,-1.052525,-9.344140,1.753481,-5.800614],[4.613760,-6.295486,0.401553,-6.774461,-8.464626,5.539493,8.216593,-6.952782,4.337304,2.596788]],[[-5.961777,-8.771440,-0.749749,9.969340,-7.474117,-7.634492,-2.411880,6.275566,-7.821676,1.293030],[-7.100752,-0.146229,-9.245778,-0.870091,6.214329,2.849748,7.775081,-8.078457,-5.792543,3.004218],[5.505645,-4.303510,-5.113997,-0.778632,-5.542989,5.793183,-8.269815,-6.137846,-7.856122,-8.954408],[-4.866757,1.815535,9.431112,8.860765,3.153561,-9.177911,-5.283803,1.913204,-1.754007,1.559938],[2.431902,4.346474,-5.005657,8.768687,-1.901181,-1.903752,2.230551,-0.241745,-8.229320,-5.739550]],[[-5.791739,-4.358473,-8.210577,-4.633366,1.445749,3.204351,-2.781319,-1.730979,-2.453861,-0.283538],[7.421726,-8.180491,-4.063820,7.778433,-5.968200,7.416289,-5.749536,-5.763627,1.444734,-1.506750],[-2.674164,6.420792,-0.017842,-6.436139,3.278565,-0.330046,6.975025,9.526881,6.440661,-4.694515],[6.260496,7.413063,-7.898166,-8.565258,-4.828160,-7.531742,-3.607806,2.133987,-8.715627,9.349268],[-3.572812,-0.867040,-1.091394,-0.668340,4.923926,-4.278492,-9.770388,-7.378924,7.176102,-1.663324]],[[9.350112,-1.246110,-3.052332,6.313061,7.064871,7.341480,-1.744829,-3.095232,0.159362,-8.632932],[0.158846,7.987241,-7.647245,-7.444785,-3.213958,5.075732,-6.459484,6.418513,-7.460223,2.442148],[-7.527977,0.896458,-7.957422,1.942910,-4.699116,-1.422323,-6.287846,8.085135,-1.697535,-2.286161],[-2.361419,-2.570275,-2.153900,-3.945652,-5.371612,-7.330351,-3.927452,7.066236,5.837835,-2.934658],[5.152919,-4.297227,4.443289,-5.854323,3.624672,-6.419793,3.210192,-2.467692,4.531857,-5.911068]],[[-5.734340,-9.883701,-1.445074,-6.444397,-2.800022,-1.480121,1.655606,-9.058169,-4.524828,-3.702592],[6.957124,-6.297524,-2.188282,-7.653719,7.049463,2.060951,-0.543339,-8.346363,-4.401020,-9.228143],[1.307515,-9.389338,6.966144,0.679793,5.148499,-1.169277,9.551394,0.788077,8.488678,8.884291],[-9.067161,2.101354,-8.890354,-0.021579,-1.091875,4.633544,7.180548,-1.424188,-5.230011,-0.866610],[-8.901741,9.214859,7.509779,7.724496,-8.194833,7.672072,3.718726,8.945991,-1.847538,-0.947165]],[[8.472410,2.096216,9.623479,4.886235,3.025863,-3.763208,-1.650174,3.949634,-7.896860,5.343234],[4.031950,-6.963294,4.762441,-9.230836,8.299387,-5.203938,7.080713,7.938811,7.280439,-0.910599],[-3.877253,-0.084627,-8.703661,9.080025,-6.352932,-5.842346,0.905382,7.678979,-6.027839,8.776865],[-4.812492,-5.143586,8.632538,8.266404,5.873858,6.864636,-2.844772,-4.941140,-4.650731,5.815820],[-5.233466,-0.320278,-4.605418,-5.168798,-2.596301,-8.191864,2.789354,-3.685350,-9.366517,-5.775431]]], dtype = "float32")#candidate|26|(11, 5, 10)|const|float32
bop_27 = relay.not_equal(uop_12.astype('bool'), relay.reshape(const_26.astype('bool'), relay.shape_of(uop_12))) # shape=(11, 5, 10)
var_30 = relay.var("var_30", dtype = "float32", shape = (11, 5, 10))#candidate|30|(11, 5, 10)|var|float32
bop_31 = relay.left_shift(uop_5.astype('int16'), relay.reshape(var_30.astype('int16'), relay.shape_of(uop_5))) # shape=(11, 5, 10)
bop_34 = relay.floor_divide(bop_16.astype('float64'), relay.reshape(var_30.astype('float64'), relay.shape_of(bop_16))) # shape=(11, 5, 10)
var_37 = relay.var("var_37", dtype = "uint64", shape = (11, 5, 10))#candidate|37|(11, 5, 10)|var|uint64
bop_38 = relay.add(bop_20.astype('int8'), relay.reshape(var_37.astype('int8'), relay.shape_of(bop_20))) # shape=(11, 5, 10)
bop_41 = relay.multiply(bop_27.astype('uint32'), relay.reshape(uop_14.astype('uint32'), relay.shape_of(bop_27))) # shape=(11, 5, 10)
bop_44 = relay.not_equal(bop_27.astype('bool'), relay.reshape(bop_2.astype('bool'), relay.shape_of(bop_27))) # shape=(11, 5, 10)
var_47 = relay.var("var_47", dtype = "uint32", shape = (11, 5, 10))#candidate|47|(11, 5, 10)|var|uint32
bop_48 = relay.greater_equal(bop_41.astype('bool'), relay.reshape(var_47.astype('bool'), relay.shape_of(bop_41))) # shape=(11, 5, 10)
const_51 = relay.const([[[9.152418,-5.313565,-9.906717,-7.950065,-8.928360,-6.376942,-3.191418,-5.186896,-0.980107,7.570445],[-6.092417,-4.231621,9.676347,9.175295,-8.396690,-5.999570,-4.664100,-5.299459,-4.850888,-5.730007],[9.056485,1.402964,7.951131,5.326875,5.497254,4.494204,1.739488,-4.400927,-3.123242,8.173302],[-0.155057,-6.596448,-8.895582,9.886101,3.629421,-0.803701,5.336995,-0.063147,2.979445,-5.558032],[6.870905,-9.973193,0.287756,8.083224,4.706604,9.411343,-2.304151,-4.499912,-2.363509,-2.140488]],[[-1.945236,-6.217044,-4.204304,-3.083380,-3.945042,-5.126584,-9.008383,4.197219,0.288188,4.553188],[1.628029,2.047585,-6.991939,7.595615,1.828709,-5.174683,-9.124237,6.913519,-3.223500,-0.949368],[3.959072,-2.414897,8.390599,1.774464,-0.723374,3.887771,8.407106,-2.522356,2.124040,-4.057687],[7.278602,-4.265365,7.708160,-1.130450,0.418666,0.665337,6.548513,-2.615346,7.160794,0.028764],[3.390534,3.095720,7.622446,-1.053856,6.003162,-9.987808,-4.898193,-5.545237,-7.241577,3.469056]],[[1.940657,-4.579644,-3.555596,-4.713969,1.377184,9.231707,-4.188624,1.592407,-0.064364,-0.073325],[0.184823,-7.673644,9.931369,7.776641,9.592963,3.024389,1.800296,0.518692,9.696204,3.035105],[-9.057292,6.765285,-3.081322,-1.950731,-9.679371,-9.776634,7.671152,2.515811,-2.366624,6.354228],[0.845909,-7.987398,-4.936957,-2.019940,0.785798,-4.822005,7.088084,5.410046,6.409005,-3.889524],[-3.937463,1.928336,-3.323311,2.144090,2.029032,-0.729306,6.644040,-5.474504,4.636147,4.656152]],[[-4.177465,-6.728022,2.534783,1.917040,0.483276,6.392251,4.547411,-6.121479,8.280322,-1.716990],[-2.572953,-5.914124,3.229760,4.966864,0.680203,-6.974573,9.234125,3.272275,-4.380628,1.025477],[0.238298,1.821325,9.140797,-1.487156,0.741636,6.437381,3.594729,-5.791786,-9.469605,8.938967],[-5.648727,-1.257982,-4.532665,0.223882,-7.784798,8.037729,7.565530,-1.684083,-4.472728,8.402931],[9.676651,7.790769,-9.291146,-7.749768,0.016239,4.727497,7.407428,5.030575,9.266645,-7.970728]],[[9.691188,9.470963,-2.271063,8.007569,-0.077575,9.485403,-1.137755,6.612383,-9.086181,3.203922],[7.511149,8.389729,-7.722527,9.469068,9.994489,-2.375927,6.785091,6.548772,0.764930,-0.296184],[-3.602231,-6.840110,-4.619923,1.283107,6.401076,-4.487393,3.340339,8.750240,6.276400,-9.595347],[-6.565948,2.108491,-0.761939,5.901780,-9.946153,-2.314801,4.016808,4.788494,-1.196945,-2.249979],[3.143337,-0.096472,3.021569,6.457205,-7.388575,7.974640,-7.294822,-8.588285,-9.279131,-2.746263]],[[1.190471,1.968833,9.633292,-8.626899,2.845956,6.054918,-0.004016,-9.412507,4.592073,-8.712844],[8.534735,-8.120886,-8.598042,-3.079543,9.162549,7.069377,5.490593,9.915871,3.399152,-6.582195],[8.613823,-7.744200,-9.116117,0.267862,-9.738541,0.107838,9.017978,0.570029,1.994758,-0.108757],[-2.822074,2.335188,-4.494503,8.233346,0.904683,4.685335,7.166400,-4.934754,-9.837554,-3.380662],[2.734895,-9.571490,6.010250,-5.685617,8.327453,9.167228,4.348388,-4.264200,-7.471717,0.616256]],[[8.131108,-8.441959,-2.199484,-3.002490,-2.727179,0.589180,9.828559,-4.985521,8.044596,9.044514],[-0.235445,6.828965,2.346516,3.923919,0.618150,5.047068,1.927784,1.506394,-9.236433,-3.589140],[-2.912505,-1.191156,1.774397,0.489226,-8.328690,-4.652513,9.012841,-3.876465,6.150818,-3.466445],[-9.761949,3.778476,7.524311,-9.002477,3.842639,-1.211545,-0.960232,3.346023,-3.419158,4.916220],[5.506974,5.896718,7.783903,0.564632,7.339558,1.149461,-7.710731,-8.130942,3.516138,2.997539]],[[6.056989,9.721280,4.909340,-6.103896,5.261425,-3.945369,3.686577,2.080445,3.149015,3.034928],[6.867859,-4.605353,1.345268,5.481000,0.970535,4.780370,6.711274,8.953384,1.630145,-8.107904],[1.046244,5.823687,-7.234741,5.050736,-0.391741,-3.516309,1.238164,2.761380,4.744210,3.784969],[6.101476,-9.652128,2.847560,5.244404,8.362448,9.687083,-7.689207,2.465472,-3.900927,-2.943188],[2.027942,-5.150153,-6.436126,9.488203,-6.303142,-2.656881,-7.856753,-6.069343,-7.960388,-2.076219]],[[8.402187,-6.967649,4.336717,-6.518415,-7.229871,-5.379495,-2.147567,-0.840290,-4.258135,-8.044054],[7.715588,-9.408226,3.127548,8.242747,2.845821,1.701196,-4.723514,-5.515043,9.305279,8.937326],[-1.359543,6.351660,-3.811167,5.401288,-4.416823,7.144745,-7.054711,3.952799,1.625048,-3.832348],[-4.120242,2.407402,0.551824,-3.200556,1.736077,5.808316,2.866942,-9.722649,-3.035135,-7.667914],[6.504764,-5.450148,-1.039629,-1.083014,0.903516,-8.559787,-5.947613,-5.149681,6.125607,5.866632]],[[-7.426470,-9.908882,7.836942,8.977311,-5.734553,-9.230882,4.895150,-6.338620,-5.352472,4.676382],[5.606048,-4.031458,-9.770853,1.594114,3.860047,-3.957895,6.035178,-9.865677,3.395439,8.335097],[0.492532,2.309174,-9.018859,-2.909613,-3.065539,-7.722782,5.018742,-2.731376,7.655488,-8.710612],[-7.510773,-8.117547,5.321539,-6.232123,-5.384837,9.161457,-2.101670,2.539849,-9.171835,9.161388],[9.321885,-5.600904,-9.663680,-9.392554,-8.596364,2.853578,4.765056,2.755710,-0.891758,8.099328]],[[6.582616,-7.281933,-5.665740,-0.519482,-7.819650,5.425945,-9.950372,-0.783721,-2.594608,-3.993271],[9.159715,9.772045,-7.957676,-8.332691,0.166109,8.543506,-2.593134,-5.683139,4.549604,2.198502],[-1.103622,-3.609062,-6.377269,-1.462717,5.697960,4.946714,-8.480373,-2.781356,3.712988,0.003329],[-5.044440,8.409388,-6.685083,9.965871,1.872249,5.087788,-0.840042,-1.039742,6.691302,6.625444],[3.924400,7.076469,-9.089852,-8.725096,-8.276942,-0.745647,7.147796,9.462661,9.472526,0.045123]]], dtype = "float32")#candidate|51|(11, 5, 10)|const|float32
bop_52 = relay.equal(uop_12.astype('bool'), relay.reshape(const_51.astype('bool'), relay.shape_of(uop_12))) # shape=(11, 5, 10)
bop_55 = relay.bitwise_xor(bop_34.astype('uint64'), relay.reshape(uop_12.astype('uint64'), relay.shape_of(bop_34))) # shape=(11, 5, 10)
uop_58 = relay.cosh(bop_16.astype('float32')) # shape=(11, 5, 10)
uop_60 = relay.atanh(bop_23.astype('float32')) # shape=(11, 5, 10)
const_62 = relay.const([[[True,False,True,False,False,False,False,False,False,False],[False,False,False,False,False,False,True,False,True,True],[True,False,False,False,False,False,False,True,True,True],[True,False,True,True,True,True,True,True,True,True],[True,True,True,False,True,True,False,False,False,True]],[[False,True,False,False,False,False,True,False,True,False],[True,True,False,False,False,True,True,True,True,True],[False,False,False,False,False,False,True,False,False,True],[False,False,True,False,True,True,False,False,True,True],[False,True,False,False,True,False,False,True,True,True]],[[False,False,True,False,False,False,False,True,False,True],[True,False,True,False,False,False,True,False,False,False],[False,False,True,False,True,True,True,True,False,False],[False,False,False,True,False,False,True,True,False,False],[False,True,False,True,True,True,False,False,True,False]],[[False,True,True,False,False,False,True,True,True,True],[True,True,True,False,False,True,False,False,False,False],[False,False,True,False,False,False,True,False,False,True],[False,True,False,True,True,False,True,False,True,False],[True,True,True,False,True,False,True,True,False,False]],[[False,False,False,True,False,False,False,False,False,False],[True,True,True,True,False,False,False,False,False,True],[False,True,False,False,True,True,False,True,True,False],[True,True,False,True,False,False,False,False,False,False],[True,True,True,False,True,False,True,True,False,True]],[[False,False,True,True,False,False,False,False,True,True],[False,False,False,False,False,True,True,False,True,True],[False,False,True,False,True,False,False,False,True,False],[True,True,False,False,False,True,True,True,True,False],[False,False,True,True,False,True,False,True,True,True]],[[True,True,False,False,True,True,False,True,True,True],[True,False,False,False,True,True,True,False,False,False],[False,False,False,True,True,True,False,True,False,True],[True,True,True,True,True,False,False,True,False,True],[False,True,True,True,True,False,False,False,False,False]],[[True,True,False,True,False,False,False,True,True,True],[False,False,False,True,True,False,False,True,True,False],[False,False,True,False,True,True,False,True,True,True],[True,False,False,True,False,False,True,False,True,True],[True,False,True,False,True,True,False,True,False,True]],[[True,True,True,True,True,False,False,True,True,True],[False,False,False,False,False,False,True,True,False,False],[False,False,False,False,False,False,True,False,True,True],[True,True,False,True,False,True,True,False,True,True],[True,True,True,True,False,True,True,True,True,False]],[[True,True,False,False,True,False,False,False,False,True],[False,True,False,False,False,False,False,False,False,True],[True,False,False,False,True,False,False,True,True,True],[True,True,False,True,True,False,True,True,False,True],[False,False,False,True,True,True,True,True,True,False]],[[False,False,False,False,False,True,True,False,False,False],[True,True,True,False,False,False,False,True,True,False],[False,False,True,True,True,False,False,False,True,True],[False,True,True,False,True,True,False,False,False,False],[True,True,False,False,True,False,True,True,False,False]]], dtype = "bool")#candidate|62|(11, 5, 10)|const|bool
bop_63 = relay.greater_equal(bop_44.astype('bool'), relay.reshape(const_62.astype('bool'), relay.shape_of(bop_44))) # shape=(11, 5, 10)
uop_66 = relay.atanh(uop_14.astype('float64')) # shape=(11, 5, 10)
uop_68 = relay.sin(uop_66.astype('float32')) # shape=(11, 5, 10)
uop_70 = relay.atan(uop_12.astype('float64')) # shape=(11, 5, 10)
bop_72 = relay.bitwise_and(uop_68.astype('uint8'), relay.reshape(const_1.astype('uint8'), relay.shape_of(uop_68))) # shape=(11, 5, 10)
var_75 = relay.var("var_75", dtype = "float32", shape = (11, 5, 10))#candidate|75|(11, 5, 10)|var|float32
bop_76 = relay.floor_mod(uop_60.astype('float32'), relay.reshape(var_75.astype('float32'), relay.shape_of(uop_60))) # shape=(11, 5, 10)
var_79 = relay.var("var_79", dtype = "uint64", shape = (11, 5, 10))#candidate|79|(11, 5, 10)|var|uint64
bop_80 = relay.equal(bop_55.astype('bool'), relay.reshape(var_79.astype('bool'), relay.shape_of(bop_55))) # shape=(11, 5, 10)
const_83 = relay.const([[[False,False,True,True,True,False,False,False,True,False],[False,False,True,False,False,True,False,True,True,False],[True,False,False,True,False,False,True,True,False,False],[True,True,True,True,False,False,True,True,False,True],[True,False,True,False,False,True,False,False,False,True]],[[False,True,True,True,True,True,True,False,True,False],[False,False,True,True,True,True,True,True,False,True],[False,True,True,True,False,False,False,False,False,False],[True,True,False,True,False,True,False,True,True,True],[True,True,False,False,True,True,False,False,False,False]],[[False,False,False,True,True,False,True,True,False,False],[False,True,True,False,False,True,True,True,False,False],[False,False,True,False,False,False,False,False,True,False],[True,True,True,True,False,False,True,False,False,True],[False,False,False,True,False,True,False,True,False,False]],[[True,False,False,False,True,True,True,True,True,False],[True,False,True,False,True,True,True,False,True,True],[True,True,True,False,False,True,True,False,False,True],[True,True,True,True,True,False,False,False,True,False],[False,True,False,True,True,False,True,False,False,False]],[[True,False,False,False,False,False,True,True,True,True],[False,False,False,True,True,False,False,False,False,True],[False,True,False,False,False,False,False,True,False,True],[False,False,True,False,False,True,False,False,False,True],[True,False,True,False,True,True,False,True,True,False]],[[True,True,True,True,True,False,True,False,True,False],[True,True,False,False,True,False,True,False,False,True],[True,False,True,True,False,False,False,False,False,True],[False,True,False,False,False,True,False,False,True,True],[False,False,True,False,False,False,False,True,False,True]],[[False,False,True,True,True,True,False,True,True,False],[False,True,True,False,True,True,True,True,True,True],[True,True,True,False,True,False,False,False,True,True],[True,False,True,False,True,False,True,True,True,False],[True,True,True,False,True,True,False,False,False,True]],[[True,True,True,True,True,False,True,False,False,False],[True,True,False,False,True,False,False,False,True,True],[False,True,False,False,True,True,True,True,True,True],[True,True,True,False,False,False,False,True,False,True],[True,True,False,False,True,False,False,True,False,True]],[[False,True,False,False,True,False,True,False,True,True],[True,False,False,False,False,False,True,True,True,True],[False,False,True,False,False,False,False,False,False,True],[False,False,False,False,True,True,False,False,True,False],[True,False,False,True,True,True,True,False,False,False]],[[True,False,True,False,False,True,True,True,False,True],[False,False,True,False,False,False,True,True,True,False],[True,False,False,True,False,True,False,True,True,False],[False,True,False,True,True,True,False,False,False,False],[True,False,False,True,False,True,True,True,False,False]],[[True,True,True,True,False,True,True,True,False,False],[True,False,True,False,True,True,True,False,True,True],[False,True,True,True,False,True,False,True,False,False],[False,True,True,True,False,True,False,True,False,False],[False,False,True,True,False,False,False,True,False,False]]], dtype = "bool")#candidate|83|(11, 5, 10)|const|bool
bop_84 = relay.logical_xor(bop_23.astype('uint32'), relay.reshape(const_83.astype('uint32'), relay.shape_of(bop_23))) # shape=(11, 5, 10)
uop_87 = relay.atanh(uop_14.astype('float32')) # shape=(11, 5, 10)
output = relay.Tuple([bop_9,bop_31,bop_38,bop_48,bop_52,uop_58,bop_63,uop_70,bop_72,bop_76,bop_80,bop_84,uop_87,])
output2 = relay.Tuple([bop_9,bop_31,bop_38,bop_48,bop_52,uop_58,bop_63,uop_70,bop_72,bop_76,bop_80,bop_84,uop_87,])
func_89 = relay.Function([var_0,var_19,var_30,var_37,var_47,var_75,var_79,], output)
mod['func_89'] = func_89
mod = relay.transform.InferType()(mod)
mutated_mod['func_89'] = func_89
mutated_mod = relay.transform.InferType()(mutated_mod)
func_89_call = mutated_mod.get_global_var('func_89')
var_91 = relay.var("var_91", dtype = "float32", shape = (11, 5, 10))#candidate|91|(11, 5, 10)|var|float32
var_92 = relay.var("var_92", dtype = "float32", shape = (11, 5, 10))#candidate|92|(11, 5, 10)|var|float32
var_93 = relay.var("var_93", dtype = "float32", shape = (11, 5, 10))#candidate|93|(11, 5, 10)|var|float32
var_94 = relay.var("var_94", dtype = "uint64", shape = (11, 5, 10))#candidate|94|(11, 5, 10)|var|uint64
var_95 = relay.var("var_95", dtype = "uint32", shape = (11, 5, 10))#candidate|95|(11, 5, 10)|var|uint32
var_96 = relay.var("var_96", dtype = "float32", shape = (11, 5, 10))#candidate|96|(11, 5, 10)|var|float32
var_97 = relay.var("var_97", dtype = "uint64", shape = (11, 5, 10))#candidate|97|(11, 5, 10)|var|uint64
call_90 = func_89_call(var_91,var_92,var_93,var_94,var_95,var_96,var_97,)
output = call_90
func_98 = relay.Function([var_91,var_92,var_93,var_94,var_95,var_96,var_97,], output)
mutated_mod['func_98'] = func_98
mutated_mod = relay.transform.InferType()(mutated_mod)
var_100 = relay.var("var_100", dtype = "float64", shape = (9, 6))#candidate|100|(9, 6)|var|float64
uop_101 = relay.atanh(var_100.astype('float64')) # shape=(9, 6)
uop_103 = relay.acos(uop_101.astype('float32')) # shape=(9, 6)
bop_105 = relay.logical_and(uop_103.astype('bool'), relay.reshape(uop_101.astype('bool'), relay.shape_of(uop_103))) # shape=(9, 6)
uop_108 = relay.asin(bop_105.astype('float64')) # shape=(9, 6)
uop_110 = relay.log(bop_105.astype('float64')) # shape=(9, 6)
bop_112 = relay.logical_or(var_100.astype('bool'), relay.reshape(uop_101.astype('bool'), relay.shape_of(var_100))) # shape=(9, 6)
bop_115 = relay.not_equal(bop_105.astype('bool'), relay.reshape(uop_108.astype('bool'), relay.shape_of(bop_105))) # shape=(9, 6)
uop_118 = relay.log2(uop_108.astype('float64')) # shape=(9, 6)
bop_120 = relay.logical_xor(uop_118.astype('int16'), relay.reshape(uop_101.astype('int16'), relay.shape_of(uop_118))) # shape=(9, 6)
uop_123 = relay.acosh(var_100.astype('float64')) # shape=(9, 6)
var_125 = relay.var("var_125", dtype = "bool", shape = (9, 6))#candidate|125|(9, 6)|var|bool
bop_126 = relay.not_equal(bop_115.astype('bool'), relay.reshape(var_125.astype('bool'), relay.shape_of(bop_115))) # shape=(9, 6)
var_129 = relay.var("var_129", dtype = "float64", shape = (9, 6))#candidate|129|(9, 6)|var|float64
bop_130 = relay.less(uop_108.astype('bool'), relay.reshape(var_129.astype('bool'), relay.shape_of(uop_108))) # shape=(9, 6)
func_89_call = mod.get_global_var('func_89')
func_98_call = mutated_mod.get_global_var('func_98')
const_134 = relay.const([[3.732055,-4.332396,9.522874,0.637806,1.479212,-6.473309,1.423722,-5.857250,4.277804,4.737285,1.088281,9.792605,6.873700,-9.715505,-8.104579,-8.392329,-9.297083,-1.508147,-7.879128,8.877262,-1.602117,-6.477381,-5.427869,-1.208284,1.697476,1.075753,-2.055106,1.084016,-1.213669,-0.738729,-5.819445,-6.175123,1.198122,-8.763624,-6.006634,5.330220,3.170574,2.582741,2.701644,5.478521,4.788434,4.104190,2.123443,4.587870,-6.143467,-1.992377,-5.400566,0.170114,4.116068,8.392694,-4.552482,6.721084,-8.052601,5.769253,-4.929125,-5.963216,0.357261,0.352705,-5.271060,-5.902150,-0.201248,2.424513,-4.520220,9.146186,-1.731946,7.600085,7.716719,-2.007523,3.977257,1.427468,-8.004112,0.255267,3.524366,-5.163501,1.146040,5.827480,-7.246084,-7.629860,2.752032,-0.439402,-4.098436,-0.861664,-6.653303,6.389144,-8.924348,2.879551,-4.985298,2.988025,-5.482920,-1.514141,-2.042563,9.197464,-0.554295,1.753734,2.601512,-4.830839,-5.012700,-3.636229,6.716570,-9.216385,-1.786408,8.939093,2.083964,4.011761,-8.844319,3.756157,6.266179,5.880152,1.388613,2.152251,9.849214,-8.780845,0.753118,-2.681498,6.369168,-7.166971,3.140342,-6.769459,-4.385276,-7.369079,8.128557,-4.474086,-5.488362,1.903575,-1.882973,2.718167,-1.220911,0.450802,-7.150580,-0.168259,9.910117,4.742994,-4.286002,4.497416,9.163902,-2.533714,0.332801,1.140575,-9.540341,0.999840,-4.252215,-2.910890,3.687464,-6.813638,-1.889047,7.259557,4.970633,-1.045068,-5.649468,8.983344,9.390563,1.384148,-0.390170,-1.262158,2.482920,1.609611,-0.963626,-6.398938,-2.958545,2.047974,6.538390,-3.297211,-8.945915,7.903605,-3.534330,-3.581337,-6.096592,-8.685078,5.697646,0.942345,8.281129,-8.182239,7.042079,0.436650,7.229095,-2.399797,8.574362,4.094226,8.754775,-8.243690,1.154940,9.814889,-6.445349,-9.162058,-2.438828,-8.011785,7.144965,-0.482938,2.405133,-7.062164,-6.501421,-6.868882,9.848234,1.220399,-3.894895,-3.524436,2.801105,8.310116,3.149261,3.526358,5.529350,8.474617,-0.312850,5.681345,3.865879,-8.296689,-3.523935,8.953159,-7.314788,-7.968388,3.198079,2.004388,-6.261263,-1.730044,-6.012191,-3.974549,-8.243246,-5.642814,1.139844,-7.110601,4.965976,-4.048139,7.928295,3.361751,9.502621,-6.934964,-9.519412,2.851396,-4.232677,1.630793,3.256186,7.891917,3.348187,-6.085608,1.881850,-2.953623,6.550224,8.031198,-5.610635,-1.833976,-1.847087,-3.127845,-6.452920,-2.982298,-3.416870,-5.264301,0.514929,5.191020,3.405968,0.802196,-1.623864,-4.378932,-1.490963,0.950619,-1.661033,-6.318460,-5.780331,-4.075632,-7.062535,-8.973807,-1.821282,-3.119732,-3.078544,-3.767179,1.229993,-1.196715,3.080255,3.251493,-8.498522,3.304621,6.677918,-0.983160,-1.247539,-5.657141,2.750670,6.451701,0.430693,9.945094,2.054253,-9.796061,2.112360,4.321917,2.256185,-8.343354,3.663241,-7.949439,-2.841338,-4.762313,2.137091,2.243332,8.016326,-4.039090,4.110914,-8.914918,-7.636543,7.649927,-8.169919,-1.733040,-5.060147,1.714517,-8.168325,-1.022025,-6.775306,-4.291440,7.223447,-0.629057,-8.038919,-4.820381,-7.696011,0.749063,4.225545,-9.553488,4.884871,6.137976,-9.427252,2.245854,-1.890075,4.162261,-1.557117,7.116152,7.782282,2.624505,-8.625214,5.133177,-6.267212,9.631221,-7.538436,5.365328,1.488209,2.881774,-7.474950,-2.774410,-6.971079,8.051423,2.139796,-0.741383,9.100787,7.888806,9.293577,-4.189886,2.511698,0.077013,-0.736786,8.747164,6.975402,4.281436,5.396009,0.426336,2.858736,-8.881109,9.508784,8.082508,-8.873915,-4.922761,-1.243846,-6.204806,5.597142,5.582187,-5.701541,7.919032,6.148297,1.606616,-6.883777,-6.798527,-1.684892,7.431926,8.069095,-5.870285,2.547132,-2.591394,9.154183,7.989827,-4.999384,-1.418521,7.022805,6.746322,-9.988236,8.772765,2.497954,-9.026820,-7.589708,4.558368,5.565996,-7.082938,-0.414975,-3.073495,7.734933,-4.070609,-6.405891,-4.202641,-6.394775,-3.623048,1.084716,-8.105208,0.046926,-6.067860,-3.555598,0.320360,2.516599,-3.058429,-9.372646,4.345470,-4.018582,-7.652610,4.821652,-8.733250,-2.832164,-7.184799,-5.898703,-0.796115,-1.095661,3.114694,-1.230754,-1.796804,-2.555118,3.573977,2.934581,-9.017168,6.630366,-1.260926,-9.961102,-1.721823,6.171822,-7.429996,2.883017,9.604193,0.265330,-4.709841,6.709982,5.931025,1.300484,7.515419,4.773400,-4.341855,-6.549508,9.368415,9.520050,8.529933,0.931408,-2.611213,-6.243484,-4.374007,5.623951,0.312498,5.099628,-0.004844,2.938050,0.930887,-6.386528,8.840940,-6.781482,4.210695,4.083009,-5.850868,-3.946595,8.486263,-5.115339,-5.440418,8.214513,-6.486549,-3.093066,9.901272,-6.453584,-5.472859,0.073469,7.780226,5.263576,4.981328,4.474125,2.945609,8.568553,-1.164831,-5.324558,7.059996,-2.541752,-1.152381,-4.885845,4.332575,-3.837641,0.012202,2.171797,7.468206,8.082053,4.745818,-4.017162,-1.337501,-7.297084,1.409341,9.091369,-7.858931,-4.090792,-2.402168,-0.425992,-4.101381,-5.502844,-7.217465,-5.480122,-8.465307,0.658794,6.364075,-1.689417,7.278423,-8.079101,8.717343,6.008887,-3.219669,-0.471858,-4.441245,-5.006277,1.319715,6.343087,-0.871806,1.311913,9.738536,5.925888,-6.152509,9.169660,-3.833914,-4.394230,6.861477,7.321745,0.548162,8.611463,-8.353423,-7.531658,-9.430028,-4.025621,-3.437378,5.334951,-3.729809,-3.848910,-7.949253,-7.161671,3.163512,-4.223804,-7.092253,-0.629316,4.528386,3.654166,0.305407,4.054740,5.239055,0.624235,7.934237,-3.513625,6.012594,-3.706899,-7.875874,-7.886868,9.912163]], dtype = "float32")#candidate|134|(1, 550)|const|float32
call_133 = relay.TupleGetItem(func_89_call(relay.reshape(const_134.astype('float32'), [11, 5, 10]), relay.reshape(const_134.astype('float32'), [11, 5, 10]), relay.reshape(const_134.astype('float32'), [11, 5, 10]), relay.reshape(const_134.astype('uint64'), [11, 5, 10]), relay.reshape(const_134.astype('uint32'), [11, 5, 10]), relay.reshape(const_134.astype('float32'), [11, 5, 10]), relay.reshape(const_134.astype('uint64'), [11, 5, 10]), ), 0)
call_135 = relay.TupleGetItem(func_98_call(relay.reshape(const_134.astype('float32'), [11, 5, 10]), relay.reshape(const_134.astype('float32'), [11, 5, 10]), relay.reshape(const_134.astype('float32'), [11, 5, 10]), relay.reshape(const_134.astype('uint64'), [11, 5, 10]), relay.reshape(const_134.astype('uint32'), [11, 5, 10]), relay.reshape(const_134.astype('float32'), [11, 5, 10]), relay.reshape(const_134.astype('uint64'), [11, 5, 10]), ), 0)
bop_136 = relay.bitwise_or(uop_108.astype('uint64'), relay.reshape(var_125.astype('uint64'), relay.shape_of(uop_108))) # shape=(9, 6)
bop_139 = relay.power(uop_101.astype('float32'), relay.reshape(uop_118.astype('float32'), relay.shape_of(uop_101))) # shape=(9, 6)
bop_142 = relay.add(uop_108.astype('uint16'), relay.reshape(var_129.astype('uint16'), relay.shape_of(uop_108))) # shape=(9, 6)
uop_145 = relay.sqrt(bop_139.astype('float64')) # shape=(9, 6)
uop_147 = relay.cos(uop_145.astype('float32')) # shape=(9, 6)
var_149 = relay.var("var_149", dtype = "float32", shape = (9, 6))#candidate|149|(9, 6)|var|float32
bop_150 = relay.bitwise_and(uop_147.astype('uint16'), relay.reshape(var_149.astype('uint16'), relay.shape_of(uop_147))) # shape=(9, 6)
uop_153 = relay.sigmoid(uop_118.astype('float32')) # shape=(9, 6)
uop_155 = relay.tan(bop_150.astype('float32')) # shape=(9, 6)
uop_157 = relay.exp(uop_155.astype('float64')) # shape=(9, 6)
var_159 = relay.var("var_159", dtype = "float32", shape = (9, 6))#candidate|159|(9, 6)|var|float32
bop_160 = relay.equal(uop_147.astype('bool'), relay.reshape(var_159.astype('bool'), relay.shape_of(uop_147))) # shape=(9, 6)
var_163 = relay.var("var_163", dtype = "float64", shape = (9, 6))#candidate|163|(9, 6)|var|float64
bop_164 = relay.less(uop_157.astype('bool'), relay.reshape(var_163.astype('bool'), relay.shape_of(uop_157))) # shape=(9, 6)
var_167 = relay.var("var_167", dtype = "float64", shape = (9, 6))#candidate|167|(9, 6)|var|float64
bop_168 = relay.floor_divide(uop_157.astype('float64'), relay.reshape(var_167.astype('float64'), relay.shape_of(uop_157))) # shape=(9, 6)
uop_171 = relay.atanh(uop_155.astype('float32')) # shape=(9, 6)
func_89_call = mod.get_global_var('func_89')
func_98_call = mutated_mod.get_global_var('func_98')
call_173 = relay.TupleGetItem(func_89_call(relay.reshape(call_133.astype('float32'), [11, 5, 10]), relay.reshape(call_133.astype('float32'), [11, 5, 10]), relay.reshape(const_134.astype('float32'), [11, 5, 10]), relay.reshape(call_133.astype('uint64'), [11, 5, 10]), relay.reshape(call_133.astype('uint32'), [11, 5, 10]), relay.reshape(const_134.astype('float32'), [11, 5, 10]), relay.reshape(const_134.astype('uint64'), [11, 5, 10]), ), 8)
call_174 = relay.TupleGetItem(func_98_call(relay.reshape(call_133.astype('float32'), [11, 5, 10]), relay.reshape(call_133.astype('float32'), [11, 5, 10]), relay.reshape(const_134.astype('float32'), [11, 5, 10]), relay.reshape(call_133.astype('uint64'), [11, 5, 10]), relay.reshape(call_133.astype('uint32'), [11, 5, 10]), relay.reshape(const_134.astype('float32'), [11, 5, 10]), relay.reshape(const_134.astype('uint64'), [11, 5, 10]), ), 8)
const_175 = relay.const([[-3.412133,4.337268,1.892574,8.710158,4.433614,-2.037327],[3.040517,0.156149,-3.940379,1.035339,-4.694716,-7.668972],[7.696342,-5.352558,-2.263374,9.855539,9.656587,-6.126523],[-0.275848,-2.821467,-1.423596,3.316756,7.476111,8.279120],[4.279373,3.736284,-6.684907,-5.497288,5.045937,-1.570847],[-8.755684,-4.896355,-4.372858,-5.936918,-2.575155,-2.608921],[-8.648687,-0.421164,-4.005558,8.367756,1.337803,7.453680],[-8.622346,5.946260,-1.102973,-2.558066,0.782149,3.357742],[0.355192,-4.776070,-5.802083,6.760398,-8.029023,9.990076]], dtype = "float32")#candidate|175|(9, 6)|const|float32
bop_176 = relay.right_shift(uop_147.astype('uint32'), relay.reshape(const_175.astype('uint32'), relay.shape_of(uop_147))) # shape=(9, 6)
bop_179 = relay.bitwise_and(uop_171.astype('uint8'), relay.reshape(uop_123.astype('uint8'), relay.shape_of(uop_171))) # shape=(9, 6)
uop_182 = relay.cosh(uop_171.astype('float32')) # shape=(9, 6)
bop_184 = relay.power(uop_182.astype('float32'), relay.reshape(uop_103.astype('float32'), relay.shape_of(uop_182))) # shape=(9, 6)
bop_187 = relay.less_equal(uop_182.astype('bool'), relay.reshape(uop_101.astype('bool'), relay.shape_of(uop_182))) # shape=(9, 6)
bop_190 = relay.left_shift(bop_184.astype('uint64'), relay.reshape(var_129.astype('uint64'), relay.shape_of(bop_184))) # shape=(9, 6)
output = relay.Tuple([uop_110,bop_112,bop_120,bop_126,bop_130,call_133,const_134,bop_136,bop_142,uop_153,bop_160,bop_164,bop_168,call_173,bop_176,bop_179,bop_187,bop_190,])
output2 = relay.Tuple([uop_110,bop_112,bop_120,bop_126,bop_130,call_135,const_134,bop_136,bop_142,uop_153,bop_160,bop_164,bop_168,call_174,bop_176,bop_179,bop_187,bop_190,])
func_193 = relay.Function([var_100,var_125,var_129,var_149,var_159,var_163,var_167,], output)
mod['func_193'] = func_193
mod = relay.transform.InferType()(mod)
var_194 = relay.var("var_194", dtype = "float64", shape = (9, 6))#candidate|194|(9, 6)|var|float64
var_195 = relay.var("var_195", dtype = "bool", shape = (9, 6))#candidate|195|(9, 6)|var|bool
var_196 = relay.var("var_196", dtype = "float64", shape = (9, 6))#candidate|196|(9, 6)|var|float64
var_197 = relay.var("var_197", dtype = "float32", shape = (9, 6))#candidate|197|(9, 6)|var|float32
var_198 = relay.var("var_198", dtype = "float32", shape = (9, 6))#candidate|198|(9, 6)|var|float32
var_199 = relay.var("var_199", dtype = "float64", shape = (9, 6))#candidate|199|(9, 6)|var|float64
var_200 = relay.var("var_200", dtype = "float64", shape = (9, 6))#candidate|200|(9, 6)|var|float64
output = func_193(var_194,var_195,var_196,var_197,var_198,var_199,var_200,)
func_201 = relay.Function([var_194,var_195,var_196,var_197,var_198,var_199,var_200,], output)
mutated_mod['func_201'] = func_201
mutated_mod = relay.transform.InferType()(mutated_mod)
var_203 = relay.var("var_203", dtype = "float32", shape = (10,))#candidate|203|(10,)|var|float32
uop_204 = relay.atan(var_203.astype('float32')) # shape=(10,)
var_206 = relay.var("var_206", dtype = "float32", shape = (10,))#candidate|206|(10,)|var|float32
bop_207 = relay.not_equal(uop_204.astype('bool'), relay.reshape(var_206.astype('bool'), relay.shape_of(uop_204))) # shape=(10,)
bop_210 = relay.logical_xor(uop_204.astype('uint8'), relay.reshape(var_206.astype('uint8'), relay.shape_of(uop_204))) # shape=(10,)
uop_213 = relay.asin(var_206.astype('float64')) # shape=(10,)
uop_215 = relay.log10(uop_204.astype('float32')) # shape=(10,)
uop_217 = relay.asin(bop_210.astype('float64')) # shape=(10,)
uop_219 = relay.acosh(uop_215.astype('float32')) # shape=(10,)
bop_221 = relay.bitwise_or(var_203.astype('uint8'), relay.reshape(uop_219.astype('uint8'), relay.shape_of(var_203))) # shape=(10,)
uop_224 = relay.rsqrt(bop_221.astype('float32')) # shape=(10,)
output = relay.Tuple([bop_207,uop_213,uop_217,uop_224,])
output2 = relay.Tuple([bop_207,uop_213,uop_217,uop_224,])
func_226 = relay.Function([var_203,var_206,], output)
mod['func_226'] = func_226
mod = relay.transform.InferType()(mod)
mutated_mod['func_226'] = func_226
mutated_mod = relay.transform.InferType()(mutated_mod)
func_226_call = mutated_mod.get_global_var('func_226')
var_228 = relay.var("var_228", dtype = "float32", shape = (10,))#candidate|228|(10,)|var|float32
var_229 = relay.var("var_229", dtype = "float32", shape = (10,))#candidate|229|(10,)|var|float32
call_227 = func_226_call(var_228,var_229,)
output = call_227
func_230 = relay.Function([var_228,var_229,], output)
mutated_mod['func_230'] = func_230
mutated_mod = relay.transform.InferType()(mutated_mod)
var_232 = relay.var("var_232", dtype = "int32", shape = (16, 10, 12))#candidate|232|(16, 10, 12)|var|int32
const_233 = relay.const([[[5,-5,3,-2,-7,6,6,-10,10,-1,-8,-10],[5,-3,-8,-10,2,-3,-9,7,-6,8,3,-4],[-5,-10,6,-3,-10,2,7,5,7,-4,3,-2],[4,-2,7,10,2,5,1,-9,-4,1,4,3],[-3,10,8,-6,4,-9,-5,5,10,7,7,4],[-8,-5,2,6,4,-3,7,-7,9,-2,-7,-4],[-6,-10,-7,-8,-9,7,-10,-9,8,1,3,-6],[5,9,-4,1,-5,7,-5,-9,8,8,-1,-4],[-10,2,-4,8,-6,-3,1,2,-7,10,-4,8],[6,-1,6,-4,2,-2,6,-8,-6,-5,-7,2]],[[10,7,10,-7,3,1,-3,8,3,-2,7,-3],[2,-9,-9,-2,1,-2,-5,5,-4,9,-1,5],[-6,-5,6,5,8,-7,-5,3,-10,-6,3,-5],[10,-6,-3,-7,7,-4,-9,-3,5,3,10,-5],[-10,-5,4,10,6,-7,7,7,-5,9,2,-1],[3,-4,-10,5,-1,3,-10,9,10,-4,9,3],[4,10,-5,2,4,2,4,6,-8,1,3,-6],[6,-2,-5,1,-8,-7,3,-2,3,3,-1,-5],[9,9,-5,-6,6,8,-4,1,1,6,5,-10],[-2,-8,-1,4,-8,-3,9,-6,1,6,-4,-9]],[[3,10,3,-8,3,8,10,8,-6,-3,-2,1],[2,1,2,-2,7,-7,-1,5,-3,-2,6,3],[10,-8,4,10,-7,-1,-2,8,-4,-10,-9,1],[-8,7,4,6,5,-8,5,4,-10,-5,-7,-2],[5,7,6,6,-2,8,4,-10,9,-7,-8,8],[-7,8,3,4,-3,4,1,-3,-6,1,-4,8],[-10,10,7,4,1,5,-6,-4,3,8,1,-9],[2,-6,10,10,8,-8,7,6,-7,-2,1,10],[7,10,-9,4,8,8,1,-7,-9,3,-10,6],[1,8,5,7,-8,-9,-3,-10,4,-8,9,5]],[[4,-6,6,-10,9,8,-10,5,10,-8,-6,4],[8,4,-1,5,-6,10,2,-8,1,-4,-8,8],[-10,3,-5,-7,-10,10,1,-9,-6,-8,10,-9],[9,2,2,-7,8,-10,6,-6,8,10,-1,6],[-9,-6,-10,9,-8,-1,3,-3,-8,2,10,-2],[5,-8,2,-4,10,-1,-4,-4,-3,3,2,5],[-8,-4,6,-7,-8,7,-2,-3,10,-5,-6,7],[3,-3,5,-5,-6,1,2,5,2,-4,-3,-7],[2,-7,2,-8,-5,1,1,-3,2,-1,10,6],[7,8,-6,-3,8,9,-6,-8,9,1,3,9]],[[5,-2,7,1,-8,4,-4,4,-10,6,9,-9],[3,-10,-3,2,10,-7,1,-1,-6,7,-3,-4],[6,-9,5,-5,7,3,-4,-1,8,-1,3,2],[-4,-9,-1,-10,-6,2,-6,-8,-2,-6,-5,-1],[3,5,-2,7,-5,-3,-1,3,-3,-9,-4,3],[-5,10,-3,6,-3,-4,-8,-10,-7,-7,-7,8],[-7,-8,-1,5,-1,-9,-8,-2,5,-3,-7,4],[-6,-4,3,-3,-8,-9,4,-8,-1,-9,1,-7],[7,9,-4,8,6,-5,4,9,-10,1,-4,-9],[6,-3,1,-5,-1,2,9,-5,10,4,-7,3]],[[5,1,5,-4,2,-7,-9,-1,7,8,-3,-1],[-3,6,1,-9,-7,4,4,2,7,-9,4,-9],[-5,-8,-9,1,5,-4,-9,3,-5,8,6,5],[3,-10,-6,-9,3,9,-8,6,10,-10,-4,6],[9,-1,6,-6,10,6,-4,-6,4,-9,-8,4],[6,6,8,-1,8,1,10,4,5,7,-7,-4],[-8,1,-9,-3,-2,7,3,-6,4,6,5,5],[10,-9,4,-7,-8,10,5,4,-4,-5,3,-9],[-9,10,-5,-5,-4,1,8,2,-6,5,8,9],[4,-9,7,3,-1,1,-7,-10,-3,-1,-10,-8]],[[7,-10,-5,-7,4,6,-3,7,-2,-1,-9,2],[-5,10,7,-4,3,1,2,7,-3,-5,-3,-2],[5,6,6,3,-8,-7,-2,9,-4,3,8,9],[-4,2,1,2,9,7,3,-9,6,8,-8,3],[-9,7,6,-3,-2,-8,8,6,-8,-5,6,4],[1,-10,-2,10,-9,1,2,-6,8,5,1,-5],[8,-2,3,6,9,-2,9,2,-8,-3,-8,5],[10,2,-3,2,7,8,1,4,10,-3,-8,6],[10,6,-8,-4,1,10,2,-7,-8,-9,-9,-9],[10,9,-6,4,6,-2,3,3,-1,-7,-6,4]],[[-9,1,7,-8,-1,-5,-4,3,-10,-6,-2,-6],[3,9,-10,-3,7,7,-5,1,2,5,6,9],[4,9,-4,2,-10,7,4,-9,4,-5,10,7],[1,-1,-9,-2,-6,2,6,7,4,6,-4,9],[2,8,-9,8,-6,-6,9,-1,-9,-5,6,-2],[10,8,-4,3,-10,-10,8,8,6,3,2,-10],[-9,-7,-1,-7,9,-4,-2,-1,-9,-3,8,3],[5,-9,1,9,6,-5,5,5,-7,8,-5,-4],[-1,-1,8,5,9,-4,3,10,-9,4,5,9],[8,1,-8,8,-2,2,-1,7,9,2,-3,1]],[[5,8,-7,-2,-4,-8,8,4,5,1,-1,7],[10,-5,-10,-6,4,-5,-9,-7,9,-7,-1,8],[7,1,-10,9,8,4,2,2,-4,-6,5,-7],[-9,3,5,8,-3,-9,7,-2,4,2,-5,-10],[5,-3,-9,7,5,10,1,2,-8,6,9,-2],[-3,-8,1,9,-6,-6,-5,7,-3,1,-6,8],[4,-9,10,-7,-6,-3,-5,-4,-9,9,5,5],[2,2,1,-2,-1,-9,2,8,-10,-6,-5,7],[-1,7,4,-4,10,-6,5,7,1,-1,-1,-3],[-9,-8,-9,10,5,8,3,-4,7,5,10,-9]],[[7,3,10,1,-7,6,5,-10,7,-8,9,3],[-3,-9,10,1,-10,5,4,-1,-4,9,-5,10],[4,-10,1,10,-2,7,8,9,-4,-10,-10,-9],[8,-4,6,4,-1,4,10,5,4,-3,-2,2],[7,-6,3,-1,-3,5,-10,-1,5,-4,1,8],[1,-10,4,-1,-4,-9,-2,9,9,5,2,10],[-3,-6,-4,-2,6,10,-3,-4,-7,3,5,-3],[5,4,7,-9,-8,5,-9,-9,-8,-8,1,8],[-5,5,5,4,9,-1,2,7,7,4,-10,3],[-3,8,3,1,-9,7,6,5,-7,-2,-6,-9]],[[-2,9,5,9,-4,-3,5,4,10,-7,3,6],[10,-9,8,1,10,-1,3,2,-8,-6,-8,-6],[-4,-9,-7,-8,-2,3,-4,7,4,8,7,-7],[-6,-8,5,-5,7,7,8,8,2,-7,6,10],[-3,9,2,-6,1,5,6,-7,5,-4,9,2],[-7,-10,6,-5,2,-8,2,-1,8,8,-7,6],[9,4,3,-1,-4,3,3,-8,4,7,1,-8],[7,2,9,3,-7,-5,-2,1,7,7,-4,7],[2,5,-4,-2,-8,-5,10,6,5,-8,-10,-3],[2,9,5,-7,9,-8,-4,-6,-5,-1,8,-2]],[[1,-8,-6,-7,10,-8,1,-2,5,5,-10,-2],[-1,10,10,-2,10,1,-2,-8,-6,9,-2,-10],[-1,-6,8,-8,3,-10,-9,-6,-4,-9,-7,1],[3,-3,-9,2,9,-2,10,-8,5,-7,-2,-5],[4,-5,1,6,-7,9,-3,-7,10,9,-7,-2],[5,-9,6,5,10,-3,-7,-6,-10,-2,5,5],[-7,5,1,8,-1,-5,5,-7,10,-7,-10,1],[8,-3,3,8,4,5,3,3,2,-8,-8,3],[6,-4,3,-6,-9,3,9,-1,5,10,9,1],[-1,-8,6,4,-1,8,-6,-4,7,6,-9,1]],[[-2,3,4,5,-2,4,-6,2,1,-3,6,1],[-7,1,3,-1,3,-8,-5,-4,-6,5,-1,9],[-8,-6,-10,-8,-3,2,-1,4,-6,-4,-5,-7],[9,5,10,-1,-6,3,-3,4,1,5,-8,7],[1,-4,10,-1,5,10,-10,6,-7,2,9,7],[2,4,-10,6,2,2,-1,-4,7,-6,4,-2],[10,-2,-2,10,2,-5,-5,-6,1,9,-10,-2],[7,-5,9,-4,1,-7,7,-6,1,1,-2,-3],[6,-5,-4,-5,-5,4,8,-1,5,2,7,-1],[1,4,-3,-6,-8,-7,-8,-5,-3,-6,-8,9]],[[-7,7,1,2,-4,-7,3,7,-4,4,-7,8],[-10,2,-1,5,-2,-10,2,6,8,4,7,-1],[-6,-7,-5,-4,7,-5,6,6,2,-2,-10,2],[-4,-9,8,3,6,6,5,8,-7,-10,-5,-3],[-4,3,7,-2,-2,1,-3,-3,-6,-2,-2,-1],[-3,3,1,5,3,9,-5,-1,2,-6,-8,-3],[9,-5,6,-9,-9,9,8,-5,-1,-1,7,-3],[5,5,-10,10,-6,10,1,2,-2,1,-2,9],[3,2,-3,9,8,-5,-2,8,10,-9,9,-2],[-10,-1,9,10,1,2,-10,-3,-6,-7,-3,-8]],[[4,3,-9,-6,-8,-5,-8,-3,-8,-6,7,-7],[8,-5,8,6,-1,7,4,2,2,-2,-4,-3],[9,3,9,-3,1,-9,-9,2,4,3,5,-3],[-5,-9,-10,-1,10,-7,1,7,7,-2,-1,-8],[4,-4,-7,5,-9,-8,5,-10,-5,-5,8,-10],[-9,1,7,-4,9,7,2,7,-6,-4,6,7],[2,8,5,-7,10,-4,-5,7,6,-1,8,4],[3,-7,2,10,8,-6,-6,9,10,5,2,1],[-10,10,10,-3,2,4,6,9,-10,8,9,3],[9,-5,2,10,-8,-1,4,3,-4,9,-9,-3]],[[-5,-6,-6,-2,-9,-9,2,-4,-2,1,8,2],[-1,1,1,-2,5,-1,-8,-10,-9,-1,-8,3],[1,6,8,-3,-8,10,2,-6,-1,-10,9,10],[-8,-2,6,-6,9,-8,9,7,-10,7,-10,-9],[-9,2,8,9,-10,4,-6,5,-4,10,8,3],[6,-2,-4,-7,-1,-2,-8,-6,-3,8,-1,-3],[-8,10,-2,-8,2,3,10,-10,9,-9,-4,9],[3,5,10,3,-2,-8,6,3,3,-4,5,1],[8,5,2,9,1,3,1,1,-7,-10,-4,-10],[8,-9,10,9,9,9,-7,-9,2,2,-8,-1]]], dtype = "int32")#candidate|233|(16, 10, 12)|const|int32
bop_234 = relay.not_equal(var_232.astype('bool'), relay.reshape(const_233.astype('bool'), relay.shape_of(var_232))) # shape=(16, 10, 12)
bop_237 = relay.floor_mod(const_233.astype('float64'), relay.reshape(var_232.astype('float64'), relay.shape_of(const_233))) # shape=(16, 10, 12)
uop_240 = relay.log(bop_237.astype('float64')) # shape=(16, 10, 12)
uop_242 = relay.asin(uop_240.astype('float32')) # shape=(16, 10, 12)
output = relay.Tuple([bop_234,uop_242,])
output2 = relay.Tuple([bop_234,uop_242,])
func_244 = relay.Function([var_232,], output)
mod['func_244'] = func_244
mod = relay.transform.InferType()(mod)
var_245 = relay.var("var_245", dtype = "int32", shape = (16, 10, 12))#candidate|245|(16, 10, 12)|var|int32
output = func_244(var_245)
func_246 = relay.Function([var_245], output)
mutated_mod['func_246'] = func_246
mutated_mod = relay.transform.InferType()(mutated_mod)
const_248 = relay.const(4.385494, dtype = "float32")#candidate|248|()|const|float32
uop_249 = relay.cosh(const_248.astype('float32')) # shape=()
bop_251 = relay.minimum(const_248.astype('float64'), uop_249.astype('float64')) # shape=()
bop_254 = relay.right_shift(uop_249.astype('uint64'), bop_251.astype('uint64')) # shape=()
uop_257 = relay.exp(uop_249.astype('float64')) # shape=()
bop_259 = relay.floor_mod(const_248.astype('float64'), bop_251.astype('float64')) # shape=()
bop_262 = relay.greater(uop_257.astype('bool'), bop_251.astype('bool')) # shape=()
bop_265 = relay.maximum(bop_262.astype('uint64'), bop_254.astype('uint64')) # shape=()
uop_268 = relay.atanh(const_248.astype('float32')) # shape=()
var_270 = relay.var("var_270", dtype = "float64", shape = (14, 3, 11))#candidate|270|(14, 3, 11)|var|float64
bop_271 = relay.logical_xor(uop_257.astype('uint32'), var_270.astype('uint32')) # shape=(14, 3, 11)
var_274 = relay.var("var_274", dtype = "float64", shape = (2, 14, 7))#candidate|274|(2, 14, 7)|var|float64
bop_275 = relay.logical_xor(uop_257.astype('uint16'), var_274.astype('uint16')) # shape=(2, 14, 7)
uop_278 = relay.rsqrt(bop_259.astype('float32')) # shape=()
bop_280 = relay.add(bop_262.astype('float32'), const_248.astype('float32')) # shape=()
bop_283 = relay.minimum(bop_254.astype('int8'), bop_251.astype('int8')) # shape=()
bop_286 = relay.mod(bop_275.astype('float32'), bop_254.astype('float32')) # shape=(2, 14, 7)
var_289 = relay.var("var_289", dtype = "bool", shape = (11,))#candidate|289|(11,)|var|bool
bop_290 = relay.power(bop_262.astype('float64'), var_289.astype('float64')) # shape=(11,)
uop_293 = relay.asinh(bop_262.astype('float32')) # shape=()
uop_295 = relay.erf(bop_286.astype('float32')) # shape=(2, 14, 7)
var_297 = relay.var("var_297", dtype = "float32", shape = (2, 14, 7))#candidate|297|(2, 14, 7)|var|float32
bop_298 = relay.power(uop_295.astype('float32'), relay.reshape(var_297.astype('float32'), relay.shape_of(uop_295))) # shape=(2, 14, 7)
var_301 = relay.var("var_301", dtype = "float32", shape = (11,))#candidate|301|(11,)|var|float32
bop_302 = relay.logical_or(uop_293.astype('bool'), var_301.astype('bool')) # shape=(11,)
uop_305 = relay.sin(bop_265.astype('float64')) # shape=()
bop_307 = relay.greater_equal(bop_259.astype('bool'), bop_254.astype('bool')) # shape=()
uop_310 = relay.asinh(bop_265.astype('float32')) # shape=()
uop_312 = relay.sigmoid(var_270.astype('float32')) # shape=(14, 3, 11)
bop_314 = relay.floor_mod(bop_290.astype('float64'), bop_259.astype('float64')) # shape=(11,)
bop_317 = relay.logical_xor(bop_302.astype('uint16'), uop_257.astype('uint16')) # shape=(11,)
var_320 = relay.var("var_320", dtype = "float32", shape = (6, 6))#candidate|320|(6, 6)|var|float32
bop_321 = relay.floor_mod(uop_310.astype('float32'), var_320.astype('float32')) # shape=(6, 6)
bop_324 = relay.bitwise_xor(bop_286.astype('int8'), bop_307.astype('int8')) # shape=(2, 14, 7)
output = relay.Tuple([uop_268,bop_271,uop_278,bop_280,bop_283,bop_298,uop_305,uop_312,bop_314,bop_317,bop_321,bop_324,])
output2 = relay.Tuple([uop_268,bop_271,uop_278,bop_280,bop_283,bop_298,uop_305,uop_312,bop_314,bop_317,bop_321,bop_324,])
F = relay.Function([var_270,var_274,var_289,var_297,var_301,var_320,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_270,var_274,var_289,var_297,var_301,var_320,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_270= np.array([[[0.193727,-5.116433,-1.802322,8.440454,-8.003391,-5.473311,8.306562,0.614049,8.822634,1.537788,-3.579713],[-9.521425,-7.677432,2.904951,9.094019,8.687110,-5.667813,-6.229870,-5.016008,-7.143019,0.226260,9.983936],[6.612360,2.478903,3.090683,-0.462246,-4.617612,-2.721057,-4.896555,-6.588126,9.609675,-1.138597,1.412106]],[[-2.613944,-9.469261,0.770811,3.020478,-8.364608,5.312513,-1.396158,-4.946852,-4.824452,0.103569,8.124795],[-6.813706,0.628824,-0.274655,3.005112,-6.070754,9.706961,-0.640921,-2.658885,8.262707,-7.361536,-0.917129],[1.561341,8.832467,-3.635799,-1.622674,-7.619667,1.733652,-4.112390,-3.289765,-8.132773,8.232958,0.987174]],[[-7.103932,-6.979089,1.469495,-6.429856,3.907223,-8.928043,9.038361,5.070991,3.935821,-8.331351,1.221502],[-7.282307,-7.455955,-7.853544,-0.969764,2.980068,-9.381065,-6.817953,-4.506171,4.354585,-1.140423,7.689459],[-0.438928,0.322038,-1.657420,9.985075,5.059240,1.570807,-7.880431,4.152770,-3.799377,0.396190,-4.062832]],[[-0.827720,-9.309032,-7.830177,9.435092,-6.682928,-4.734029,0.646045,3.245922,-2.186996,-2.017078,-4.871314],[-3.595033,7.960260,-7.380437,4.110825,-1.158168,4.833566,7.918508,2.439809,3.911616,3.008885,-7.472455],[1.470536,2.621421,-5.171521,5.020261,-3.206362,-2.055581,-4.418198,-1.475869,-6.148782,6.606366,6.595121]],[[4.125239,-8.203444,-3.096799,6.281419,-0.404168,-8.256886,-1.935802,-2.577191,4.442304,0.820267,-2.944365],[-8.534236,1.704237,-9.797680,-6.598183,-9.587118,-4.968410,0.491692,-1.783962,4.473102,9.271607,-5.394657],[-5.424771,6.560033,0.763042,-4.248655,8.419566,-3.335594,5.865456,6.395117,-1.293533,7.081651,-6.693662]],[[0.688331,4.943042,-3.831851,-2.786056,4.942158,4.891481,-4.191494,8.011471,-3.244322,5.575481,-6.731880],[4.485928,-6.855337,7.945270,5.188656,-1.943969,-8.598226,9.511332,-4.817221,3.538329,8.598529,2.658519],[1.674830,-2.273608,7.473540,-4.188034,-2.837008,8.208963,6.207634,-0.154693,8.773933,6.774750,8.798932]],[[-6.814842,-5.586743,9.624282,-1.389188,6.076103,2.148022,7.904163,8.332448,-3.997645,-8.426970,-9.046041],[-7.387536,-5.116721,-1.566719,0.377328,-7.779566,1.755169,1.397179,-8.882166,7.826257,8.976065,2.768828],[0.312408,-2.286046,-3.947799,-7.796999,-2.888103,-6.296185,-5.354497,-5.119241,-8.355839,1.569118,9.602234]],[[-4.059937,-9.070027,9.240940,-6.994645,-2.348036,1.691283,-8.449482,0.463111,1.128831,6.505935,-6.116841],[-0.762582,-6.691518,-6.974051,-7.178123,-0.058717,3.267199,1.237346,2.631884,-7.669908,3.398173,-1.515153],[2.380502,-0.541550,-0.041033,-4.041169,8.367994,8.321469,4.155528,9.438440,-0.113695,-1.163612,-5.771565]],[[-5.745061,-3.224180,-0.206524,7.311573,0.870857,-3.976544,4.038692,2.398539,-8.625175,-0.382461,-0.987239],[1.573698,2.481451,-2.921515,2.281466,2.962324,-1.931940,-3.940628,-7.970246,2.055148,8.327673,7.639835],[-0.761444,-0.481403,-2.016506,2.913571,3.989666,-2.980344,-3.516849,-8.085318,-3.266733,5.571791,8.938261]],[[5.411072,2.660029,2.253166,-0.707934,5.759399,-6.467693,8.752594,-7.937983,9.299694,8.763687,7.149888],[-1.395113,-1.486950,1.406187,1.665459,7.973494,-2.207128,-7.212469,0.919699,6.529045,1.939602,4.338334],[-5.697235,8.791141,3.483722,5.493272,-0.032936,-5.812829,-9.754193,6.521501,6.567943,-5.678532,6.804038]],[[1.796907,-3.954541,-9.832762,-3.215197,-5.411134,8.448803,2.164545,7.677715,2.628328,-8.960774,-4.988839],[-1.235832,2.108421,-6.211467,8.439628,-1.171504,9.157647,1.054683,-0.270416,7.737884,-7.871089,3.508382],[0.515690,0.301933,-1.430613,-0.913973,-9.620777,-3.692853,-8.213448,-8.207198,3.168389,1.752596,4.892988]],[[-1.965392,-1.546680,-1.313792,-8.134308,-6.464987,-5.092768,8.908956,-4.903115,0.463250,-4.847122,-0.185496],[5.079423,-0.393437,1.071511,3.156927,6.811013,-8.803479,0.926201,-1.009097,-1.602618,9.774629,-1.877811],[-8.490274,-2.817321,-8.917640,2.174150,-6.502724,3.441067,6.053673,-8.636318,7.206347,-3.906658,4.375214]],[[-2.358627,-5.361404,0.988570,-5.355737,-1.491650,-4.014003,-4.786070,9.695264,6.071258,-5.994709,-5.172279],[8.330558,-7.362698,-5.265166,-8.273707,-5.586238,-4.269529,-5.935112,-4.697062,1.190140,1.914262,-2.652116],[-4.812406,6.236121,8.464951,-3.329177,-6.122903,-2.583170,-7.897113,5.602892,-0.200009,-5.842052,-5.783464]],[[-4.900529,6.556079,3.356761,0.475774,-1.617161,7.882376,0.308111,-0.803927,5.467731,2.387367,1.415515],[-6.948047,7.957585,9.176415,2.589033,-7.792016,-0.924580,-9.221968,-4.644531,6.119597,0.372865,-8.394646],[2.770305,6.257211,1.560203,-8.708943,-9.658831,-0.108050,-9.516374,5.528743,7.167591,4.737886,5.537020]]], dtype='float64')
module1.set_input('var_270', input_270)
input_274= np.array([[[-5.741792,-4.178408,3.657966,-6.456442,-4.280018,-1.819531,-1.801768],[3.093099,-7.009939,-3.798969,0.886231,-8.789838,-1.672246,-3.050369],[-6.687143,9.445509,9.347729,-8.667388,-3.225090,-3.454081,7.624175],[-0.951562,2.719880,-6.852237,8.119733,-9.716217,8.201882,-4.911542],[-9.813456,-1.363455,-1.740335,2.455729,5.961296,-6.793531,1.973553],[-3.144634,2.960382,-3.655766,-8.165803,4.706899,5.759200,-0.173135],[-3.261152,1.155947,0.794278,3.160968,9.507855,2.686368,9.404488],[-6.286908,4.302042,5.193910,0.051815,4.080580,-9.976099,-3.023260],[-0.937544,6.418062,2.511942,9.586112,-7.581443,-4.741455,-5.066091],[-1.467029,-2.538257,-1.277801,6.733663,-6.744197,5.069414,7.716719],[-0.156806,-5.304144,-6.548215,-1.666546,-8.582529,0.324866,-9.919776],[-5.233039,4.624819,-8.972376,-3.703769,1.183904,-9.617097,-6.416145],[2.849438,-1.414788,3.025227,-7.427463,-9.320586,0.705938,7.471777],[5.510560,7.220320,-7.436865,-5.545684,-4.911657,0.858296,-4.044232]],[[3.878080,6.779797,-2.781031,2.508595,-5.033832,-3.260327,-0.206804],[4.249328,-5.329555,8.824458,6.189900,-0.801100,2.574655,-0.034078],[5.223369,-1.321142,8.702913,1.154990,7.523166,-0.456036,1.853402],[-8.969625,-4.358938,7.509298,-1.750062,-7.551364,-8.748296,0.767017],[1.168094,-3.608648,7.659649,-7.681289,-0.854011,-4.696535,-5.407824],[-8.406384,7.739715,9.445787,-6.983867,-8.517807,9.038081,-5.878902],[-0.534619,2.354669,2.993907,-7.660915,1.597593,-2.424015,-2.509084],[6.249683,2.561543,-1.639748,3.240170,-3.165144,-2.167962,-1.509804],[-0.006604,4.762100,0.512226,-1.377593,-0.600120,3.756429,6.451777],[-2.810628,-7.082754,-1.258897,7.097170,9.310850,-4.754629,-6.270900],[-0.755050,1.800018,-6.865837,9.491929,9.375186,-0.123205,-1.088733],[0.299092,6.448262,-9.021342,-1.190668,3.137447,7.051981,-0.331690],[1.781412,2.163842,7.167023,-6.224680,5.567397,7.079657,9.607717],[6.141724,4.498291,-5.210955,-7.971298,8.415270,5.492546,-8.572931]]], dtype='float64')
module1.set_input('var_274', input_274)
input_289= np.array([False,False,False,True,False,True,False,False,True,True,True], dtype='bool')
module1.set_input('var_289', input_289)
input_297= np.array([[[-9.063850,3.093841,4.939819,5.320753,-2.697228,-1.171752,1.353000],[-3.806885,-3.786344,-4.302786,-1.296413,2.542610,-4.400601,-6.867454],[7.683662,8.209793,0.738473,8.338162,-2.932899,-1.384410,3.975063],[-3.297299,4.575008,7.569729,-6.875760,-2.554171,3.711433,-9.753422],[7.748485,-8.626058,2.521021,3.858029,4.243427,6.391709,7.351370],[-8.522075,-5.164651,9.994548,2.121634,-2.041718,-6.905836,-2.170619],[-3.907187,6.967781,-0.518370,-2.103076,-8.296901,-7.281297,7.891369],[3.489856,-2.694640,5.317845,-3.335160,-1.599068,1.896631,0.819101],[4.484945,3.389937,-5.835375,-1.282982,8.835810,3.036458,-5.672649],[0.788224,1.763014,-6.649705,-4.894072,8.457386,-9.601901,-6.617404],[-5.576625,0.599936,8.921433,8.795924,0.795261,-4.527484,-8.576433],[-9.606319,-9.160394,-1.576439,-9.449602,8.071399,3.691161,8.020554],[-5.497227,5.722995,9.644774,-7.135499,-1.507646,3.850868,1.822709],[-2.548599,6.904267,-1.780112,-2.127531,5.360658,2.405767,1.040186]],[[5.372614,-0.743650,-2.030039,-1.530195,-7.297570,-1.898646,-1.566707],[2.377303,-9.452512,-6.893375,-1.153188,9.574769,7.633721,-7.175106],[2.168134,9.463619,-4.057791,-4.815262,-4.942890,2.785189,3.993590],[3.942063,1.822731,-4.254768,-1.384411,1.160122,7.165084,8.006822],[6.152460,-0.844186,3.037724,-8.732518,5.037406,-1.891890,7.608771],[0.094324,7.693518,1.086515,0.252677,-4.471704,-6.099879,-0.334546],[-7.629403,-0.881505,5.886019,-3.099516,1.875252,5.507563,7.774067],[-2.825937,3.549214,-3.957013,-3.963469,6.487945,0.830616,8.690579],[5.369901,9.983211,8.793775,5.593225,-5.249216,8.139191,-0.088757],[6.683046,-7.658881,0.196593,9.375344,-7.644572,0.615808,3.020400],[-2.617867,-7.603547,-7.922882,9.186979,1.669788,3.939603,2.094097],[9.051093,2.060835,7.752990,-4.571021,6.803651,-2.665345,1.759958],[6.457986,-2.692928,0.092174,4.526719,8.824326,5.594794,8.176441],[-0.626522,3.472411,2.055434,-8.223116,-3.810102,1.392515,-2.629781]]], dtype='float32')
module1.set_input('var_297', input_297)
input_301= np.array([-3.180442,0.832206,-3.994645,8.792578,-9.502598,-4.501207,7.705945,-8.763268,-4.038788,8.595742,9.802074], dtype='float32')
module1.set_input('var_301', input_301)
input_320= np.array([[-4.408048,-9.136568,-8.696325,-8.927449,6.764708,7.661081],[-0.042296,8.866041,6.682499,-1.458582,8.771260,-8.814721],[-5.713644,-8.602476,-4.444724,-5.808092,-9.950506,-7.876277],[-3.087836,9.428014,6.125954,-4.411346,5.016081,0.440011],[5.597803,-5.868923,2.583175,3.259546,7.014580,-4.800860],[5.983921,-0.687112,2.531486,-2.267749,8.596732,6.553088]], dtype='float32')
module1.set_input('var_320', input_320)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_270, input_274, input_289, input_297, input_301, input_320, )
res3 = intrp3.evaluate()(input_270, input_274, input_289, input_297, input_301, input_320, )
res4 = intrp4.evaluate()(input_270, input_274, input_289, input_297, input_301, input_320, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
module5.set_input('var_270', input_270)
module5.set_input('var_274', input_274)
module5.set_input('var_289', input_289)
module5.set_input('var_297', input_297)
module5.set_input('var_301', input_301)
module5.set_input('var_320', input_320)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_270, input_274, input_289, input_297, input_301, input_320, )
res7 = intrp7.evaluate()(input_270, input_274, input_289, input_297, input_301, input_320, )
res8 = intrp8.evaluate()(input_270, input_274, input_289, input_297, input_301, input_320, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
module9.set_input('var_270', input_270)
module9.set_input('var_274', input_274)
module9.set_input('var_289', input_289)
module9.set_input('var_297', input_297)
module9.set_input('var_301', input_301)
module9.set_input('var_320', input_320)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_270, input_274, input_289, input_297, input_301, input_320, )
res11 = intrp11.evaluate()(input_270, input_274, input_289, input_297, input_301, input_320, )
res12 = intrp12.evaluate()(input_270, input_274, input_289, input_297, input_301, input_320, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
module13.set_input('var_270', input_270)
module13.set_input('var_274', input_274)
module13.set_input('var_289', input_289)
module13.set_input('var_297', input_297)
module13.set_input('var_301', input_301)
module13.set_input('var_320', input_320)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_270, input_274, input_289, input_297, input_301, input_320, )
res15 = intrp15.evaluate()(input_270, input_274, input_289, input_297, input_301, input_320, )
res16 = intrp16.evaluate()(input_270, input_274, input_289, input_297, input_301, input_320, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
module17.set_input('var_270', input_270)
module17.set_input('var_274', input_274)
module17.set_input('var_289', input_289)
module17.set_input('var_297', input_297)
module17.set_input('var_301', input_301)
module17.set_input('var_320', input_320)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_270, input_274, input_289, input_297, input_301, input_320, )
res19 = intrp19.evaluate()(input_270, input_274, input_289, input_297, input_301, input_320, )
res20 = intrp20.evaluate()(input_270, input_274, input_289, input_297, input_301, input_320, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
module21.set_input('var_270', input_270)
module21.set_input('var_274', input_274)
module21.set_input('var_289', input_289)
module21.set_input('var_297', input_297)
module21.set_input('var_301', input_301)
module21.set_input('var_320', input_320)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_270, input_274, input_289, input_297, input_301, input_320, )
res23 = intrp23.evaluate()(input_270, input_274, input_289, input_297, input_301, input_320, )
res24 = intrp24.evaluate()(input_270, input_274, input_289, input_297, input_301, input_320, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()

'''72: TVMFuncCall
71: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
70: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
69: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
68: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
67: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
66: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
65: tvm::transform::Pass::operator()(tvm::IRModule) const
64: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
63: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
62: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
61: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
60: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
59: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
58: tvm::transform::Pass::operator()(tvm::IRModule) const
57: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
56: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
55: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
54: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
53: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
52: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
51: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
50: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
49: _ZN3tvm5relay9transform22Devic
48: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
47: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
46: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
45: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
44: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
43: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
42: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
41: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
40: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
39: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
38: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
37: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
36: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
35: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::te::Tensor, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
34: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::runtime::ObjectRef, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
33: tvm::LowerWithPassList(tvm::IRModule, tvm::runtime::Array<tvm::transform::Pass, void>)
32: tvm::transform::Pass::operator()(tvm::IRModule) const
31: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
30: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
29: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
28: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
27: _ZNSt17_Function_handlerIFvN3tvm7
26: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
25: tvm::tir::DataTypeRewriter::operator()(tvm::tir::Stmt)
24: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
23: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::ForNode const*)
22: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::ForNode const*)
21: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
20: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
19: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::StoreNode const*)
18: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
17: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
16: _ZThn16_N3tvm3tir16DataTyp
15: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::SubNode const*)
14: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
13: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
12: _ZThn16_N3tvm3tir16DataTyp
11: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::MulNode const*)
10: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
9: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
8: _ZThn16_N3tvm3tir16DataTyp
7: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
6: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CallNode const*)
5: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
4: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
3: _ZThn16_N3tvm3tir16DataTyp
2: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::DivNode const*)
1: tvm::div(tvm::PrimExpr, tvm::PrimExpr, tvm::Span)
0: tvm::PrimExpr tvm::arith::TryConstFold<tvm::tir::Div>(tvm::PrimExpr, tvm::PrimExpr)

'''