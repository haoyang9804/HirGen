import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = ())#candidate|0|()|var|float64
uop_1 = relay.acos(var_0.astype('float64')) # shape=()
uop_3 = relay.asinh(uop_1.astype('float64')) # shape=()
bop_5 = relay.subtract(uop_3.astype('int64'), var_0.astype('int64')) # shape=()
bop_8 = relay.greater_equal(var_0.astype('bool'), bop_5.astype('bool')) # shape=()
uop_11 = relay.sigmoid(uop_3.astype('float32')) # shape=()
uop_13 = relay.sqrt(var_0.astype('float64')) # shape=()
output = relay.Tuple([bop_8,uop_11,uop_13,])
output2 = relay.Tuple([bop_8,uop_11,uop_13,])
func_15 = relay.Function([var_0,], output)
mod['func_15'] = func_15
mod = relay.transform.InferType()(mod)
var_16 = relay.var("var_16", dtype = "float64", shape = ())#candidate|16|()|var|float64
output = func_15(var_16)
func_17 = relay.Function([var_16], output)
mutated_mod['func_17'] = func_17
mutated_mod = relay.transform.InferType()(mutated_mod)
const_19 = relay.const([[5,1,-10],[-8,3,-10],[8,8,9],[-4,-5,-8],[7,5,6],[-7,-8,2],[-1,2,10],[3,-4,-8],[6,-10,10],[7,-5,1],[-6,2,-9],[2,7,-3]], dtype = "uint8")#candidate|19|(12, 3)|const|uint8
var_20 = relay.var("var_20", dtype = "uint8", shape = (12, 3))#candidate|20|(12, 3)|var|uint8
bop_21 = relay.maximum(const_19.astype('uint8'), relay.reshape(var_20.astype('uint8'), relay.shape_of(const_19))) # shape=(12, 3)
const_24 = relay.const([[6,6,3],[-7,-8,2],[7,8,10],[-5,3,-5],[8,8,-3],[-2,8,7],[3,-2,2],[-7,-9,4],[-4,-8,9],[-4,5,2],[6,-7,2],[-6,9,8]], dtype = "uint8")#candidate|24|(12, 3)|const|uint8
bop_25 = relay.bitwise_and(var_20.astype('int16'), relay.reshape(const_24.astype('int16'), relay.shape_of(var_20))) # shape=(12, 3)
var_28 = relay.var("var_28", dtype = "uint8", shape = (12, 3))#candidate|28|(12, 3)|var|uint8
bop_29 = relay.logical_and(bop_21.astype('bool'), relay.reshape(var_28.astype('bool'), relay.shape_of(bop_21))) # shape=(12, 3)
bop_32 = relay.logical_xor(var_20.astype('int16'), relay.reshape(var_28.astype('int16'), relay.shape_of(var_20))) # shape=(12, 3)
bop_35 = relay.minimum(const_24.astype('int16'), relay.reshape(var_28.astype('int16'), relay.shape_of(const_24))) # shape=(12, 3)
var_38 = relay.var("var_38", dtype = "bool", shape = (12, 3))#candidate|38|(12, 3)|var|bool
bop_39 = relay.greater_equal(bop_29.astype('bool'), relay.reshape(var_38.astype('bool'), relay.shape_of(bop_29))) # shape=(12, 3)
uop_42 = relay.atanh(const_24.astype('float32')) # shape=(12, 3)
uop_44 = relay.atan(uop_42.astype('float64')) # shape=(12, 3)
uop_46 = relay.asin(uop_42.astype('float64')) # shape=(12, 3)
uop_48 = relay.atan(const_19.astype('float32')) # shape=(12, 3)
uop_50 = relay.asinh(uop_44.astype('float32')) # shape=(12, 3)
uop_52 = relay.sqrt(uop_50.astype('float32')) # shape=(12, 3)
output = relay.Tuple([bop_25,bop_32,bop_35,bop_39,uop_46,uop_48,uop_52,])
output2 = relay.Tuple([bop_25,bop_32,bop_35,bop_39,uop_46,uop_48,uop_52,])
func_54 = relay.Function([var_20,var_28,var_38,], output)
mod['func_54'] = func_54
mod = relay.transform.InferType()(mod)
mutated_mod['func_54'] = func_54
mutated_mod = relay.transform.InferType()(mutated_mod)
func_54_call = mutated_mod.get_global_var('func_54')
var_56 = relay.var("var_56", dtype = "uint8", shape = (12, 3))#candidate|56|(12, 3)|var|uint8
var_57 = relay.var("var_57", dtype = "uint8", shape = (12, 3))#candidate|57|(12, 3)|var|uint8
var_58 = relay.var("var_58", dtype = "bool", shape = (12, 3))#candidate|58|(12, 3)|var|bool
call_55 = func_54_call(var_56,var_57,var_58,)
output = call_55
func_59 = relay.Function([var_56,var_57,var_58,], output)
mutated_mod['func_59'] = func_59
mutated_mod = relay.transform.InferType()(mutated_mod)
var_61 = relay.var("var_61", dtype = "float64", shape = (15, 5, 16))#candidate|61|(15, 5, 16)|var|float64
uop_62 = relay.acosh(var_61.astype('float64')) # shape=(15, 5, 16)
uop_64 = relay.cosh(var_61.astype('float32')) # shape=(15, 5, 16)
uop_66 = relay.rsqrt(var_61.astype('float32')) # shape=(15, 5, 16)
bop_68 = relay.bitwise_and(uop_62.astype('uint32'), relay.reshape(var_61.astype('uint32'), relay.shape_of(uop_62))) # shape=(15, 5, 16)
bop_71 = relay.mod(var_61.astype('float64'), relay.reshape(uop_66.astype('float64'), relay.shape_of(var_61))) # shape=(15, 5, 16)
uop_74 = relay.tan(bop_68.astype('float64')) # shape=(15, 5, 16)
bop_76 = relay.left_shift(uop_74.astype('uint32'), relay.reshape(bop_68.astype('uint32'), relay.shape_of(uop_74))) # shape=(15, 5, 16)
uop_79 = relay.acos(bop_71.astype('float64')) # shape=(15, 5, 16)
output = relay.Tuple([uop_64,bop_76,uop_79,])
output2 = relay.Tuple([uop_64,bop_76,uop_79,])
func_81 = relay.Function([var_61,], output)
mod['func_81'] = func_81
mod = relay.transform.InferType()(mod)
var_82 = relay.var("var_82", dtype = "float64", shape = (15, 5, 16))#candidate|82|(15, 5, 16)|var|float64
output = func_81(var_82)
func_83 = relay.Function([var_82], output)
mutated_mod['func_83'] = func_83
mutated_mod = relay.transform.InferType()(mutated_mod)
var_85 = relay.var("var_85", dtype = "uint16", shape = ())#candidate|85|()|var|uint16
var_86 = relay.var("var_86", dtype = "uint16", shape = (13, 10, 16))#candidate|86|(13, 10, 16)|var|uint16
bop_87 = relay.equal(var_85.astype('bool'), var_86.astype('bool')) # shape=(13, 10, 16)
bop_90 = relay.less(var_85.astype('bool'), bop_87.astype('bool')) # shape=(13, 10, 16)
func_54_call = mod.get_global_var('func_54')
func_59_call = mutated_mod.get_global_var('func_59')
const_94 = relay.const([2,-2,6,3,3,6,7,-2,6,-7,-8,-3,3,-1,3,10,6,4,-4,-1,-2,-10,8,3,7,8,-2,-10,-7,9,-10,5,1,-8,-6,-3], dtype = "uint8")#candidate|94|(36,)|const|uint8
call_93 = relay.TupleGetItem(func_54_call(relay.reshape(const_94.astype('uint8'), [12, 3]), relay.reshape(const_94.astype('uint8'), [12, 3]), relay.reshape(const_94.astype('bool'), [12, 3]), ), 4)
call_95 = relay.TupleGetItem(func_59_call(relay.reshape(const_94.astype('uint8'), [12, 3]), relay.reshape(const_94.astype('uint8'), [12, 3]), relay.reshape(const_94.astype('bool'), [12, 3]), ), 4)
uop_96 = relay.log(var_86.astype('float64')) # shape=(13, 10, 16)
bop_98 = relay.subtract(uop_96.astype('uint8'), relay.reshape(bop_87.astype('uint8'), relay.shape_of(uop_96))) # shape=(13, 10, 16)
bop_101 = relay.maximum(bop_98.astype('float64'), relay.reshape(var_86.astype('float64'), relay.shape_of(bop_98))) # shape=(13, 10, 16)
uop_104 = relay.sigmoid(bop_101.astype('float32')) # shape=(13, 10, 16)
bop_106 = relay.bitwise_and(uop_104.astype('uint16'), relay.reshape(var_86.astype('uint16'), relay.shape_of(uop_104))) # shape=(13, 10, 16)
uop_109 = relay.acosh(call_93.astype('float64')) # shape=(12, 3)
uop_111 = relay.acosh(call_95.astype('float64')) # shape=(12, 3)
var_112 = relay.var("var_112", dtype = "float32", shape = (13, 10, 16))#candidate|112|(13, 10, 16)|var|float32
bop_113 = relay.right_shift(uop_104.astype('uint16'), relay.reshape(var_112.astype('uint16'), relay.shape_of(uop_104))) # shape=(13, 10, 16)
var_116 = relay.var("var_116", dtype = "float32", shape = (13, 10, 16))#candidate|116|(13, 10, 16)|var|float32
bop_117 = relay.maximum(uop_104.astype('int16'), relay.reshape(var_116.astype('int16'), relay.shape_of(uop_104))) # shape=(13, 10, 16)
func_81_call = mod.get_global_var('func_81')
func_83_call = mutated_mod.get_global_var('func_83')
const_121 = relay.const([2.850346,5.725876,-3.533111,-9.340548,-8.920881,-2.933702,5.587209,-9.163490,5.261541,1.081248,-5.306175,-0.617655,-7.581582,-9.437899,8.777842,6.919904,-9.682495,6.558071,-1.041387,-1.999983,1.262398,-4.684409,-8.934758,7.584226,5.745818,-9.722217,4.018228,8.526652,-4.405578,4.762385,2.312276,-1.081320,1.700112,-5.550475,4.851399,-4.355212,0.245077,-8.614258,2.021888,7.022730,-9.854544,8.299171,-4.493626,-7.152982,-0.543335,4.536418,-8.250778,4.561222,4.470842,4.415331,-1.818302,4.386370,1.624803,7.820187,8.060907,9.525582,-3.204544,8.461304,6.541553,6.246787,-5.445360,3.342768,7.047276,-8.644783,5.201863,3.294550,-0.202887,9.739332,-6.693032,-0.649236,-9.646759,-1.399935,-1.619826,6.375792,0.500658,2.961353,0.117588,-8.651376,8.301158,-6.297474,-8.196558,-3.825962,-8.920323,-7.630871,-7.017290,8.832779,4.576291,-0.889069,9.391697,2.083889,-5.146076,-7.095856,-8.480942,-9.965449,-4.288376,-2.205904,2.102343,4.787849,-0.073618,-9.106757,-9.123565,2.661002,5.862451,-7.878860,-5.366804,3.598199,-0.460395,-9.238239,-2.373137,2.775537,0.777123,-0.161546,-0.104264,9.668120,4.779896,-5.379162,3.646779,7.215919,9.103367,9.056049,-1.908281,-3.995132,7.378606,6.759555,-8.855513,-1.546506,-0.203417,-1.549057,-4.465431,5.911753,7.948525,6.388242,-0.646224,-0.295846,-7.122460,2.938642,-5.149507,-3.940013,-5.170243,-2.866345,-6.225137,2.271848,1.299627,3.744351,0.220937,6.470522,-8.279279,5.145219,-9.663640,-5.181919,0.221951,0.477696,-5.049671,2.780350,1.257227,7.303271,-8.921492,-1.440229,-4.627930,2.114189,-6.848323,-3.779823,-3.051538,7.414441,8.522782,4.463922,0.628882,9.841479,-0.776181,2.522872,-8.846095,1.742074,8.618836,-6.213690,-6.160453,5.056289,-2.322576,2.480766,2.611974,9.091668,7.063501,2.833883,2.100677,-2.187921,-6.282112,8.994796,-1.776556,6.850934,-0.620954,3.025271,-8.685931,-1.684052,-1.647168,6.363747,-3.189723,7.209629,2.269582,6.186572,8.532251,4.271319,8.232980,-5.875375,8.695202,8.414390,7.869998,-7.249520,0.366038,-0.625289,9.876337,0.217690,4.320979,5.734856,6.543381,7.368473,-7.702259,-4.735111,-5.671980,3.405322,0.327154,7.823632,2.404074,-0.316014,-3.111019,-7.766157,-1.631013,-1.514435,-6.710316,-1.529537,-6.129394,-8.266534,-5.743767,-2.638815,3.384059,1.356832,-2.676769,6.128867,-0.472241,-7.143510,6.043445,-4.874924,-6.550500,8.730164,-3.048214,-7.835932,1.160763,6.891299,-0.876963,-0.239250,0.070755,-2.433285,7.760155,5.051112,5.962794,-7.836120,7.037090,-0.971070,9.933318,-9.962549,4.479825,-0.427004,-0.344332,4.016877,7.407015,-1.859100,5.405104,-0.789098,4.835870,-5.452714,3.258644,5.745821,-4.315095,-4.284895,4.317717,9.794700,-5.604828,0.492540,-3.496753,2.577961,8.346063,-0.412699,-4.633566,3.515904,7.267598,-6.414658,-1.439956,7.956201,7.956423,1.164697,-2.571977,6.819726,-7.714678,7.638065,3.880319,4.300961,1.204255,1.431177,-2.725506,4.923395,9.516438,0.315784,5.113679,-5.175680,-0.139655,0.729095,-4.684413,7.992003,3.163778,0.616784,1.001391,0.748570,4.603217,-1.834572,4.974358,0.656603,4.130351,0.570659,0.780820,5.597129,0.085044,-2.231261,-8.662554,-7.664062,1.335737,-0.565841,-7.506398,0.542755,1.207931,-7.035672,5.654542,3.480017,-0.330723,3.596395,-5.486553,2.887151,0.066980,6.014227,-9.135005,3.011647,-0.413971,-3.000821,-5.384272,-4.038566,-3.232713,-2.558408,-2.272441,-5.174349,-9.984701,-6.340956,1.530358,-1.715514,8.094944,-7.520128,-8.526083,7.344738,8.686431,1.999447,6.058660,0.918211,-4.483582,6.751706,2.258146,7.391014,2.114901,-1.501530,-7.860843,5.102448,9.248284,3.095161,-0.114855,-9.316405,-1.221364,3.897477,0.154645,9.154797,-6.886859,-8.645879,6.385578,-5.178623,1.346543,9.413500,2.363515,4.721719,-6.477753,-8.832265,-4.300406,-1.834994,7.430764,-0.269095,0.551407,-0.991956,1.166845,0.829797,0.055408,1.257578,7.298740,-1.679263,-8.182484,9.693728,-2.951408,0.925017,-2.867798,1.553375,8.995199,-4.609510,-8.968412,-7.918587,8.162831,-4.360743,7.921365,0.486708,-6.120827,-5.131551,3.571113,8.399292,1.842504,-5.743531,-3.410735,9.121214,-7.296714,-8.892110,6.821441,-9.008421,9.984234,2.602066,-1.077135,2.026884,-2.489313,5.584200,4.237782,1.250379,0.785306,-4.003862,9.703371,3.956258,3.761126,-6.230674,5.345565,2.936879,8.406473,4.440312,7.159068,-6.531234,-2.297572,8.849278,-7.547745,4.940627,4.122094,-7.374337,0.391219,-9.981362,3.919646,7.557635,4.777370,1.296293,4.146588,-9.139572,5.295642,-8.919258,7.980607,6.074475,-3.645596,0.677828,-0.396152,7.177423,-0.157643,-3.571668,-4.768158,-9.713411,-4.116120,5.173521,-6.728177,-6.989830,-1.060897,-5.570695,4.569234,-3.429192,-7.431144,0.199925,8.217343,-8.417766,-8.505998,4.881178,5.603381,-9.309636,-2.248522,9.742893,6.968448,-4.088098,8.577993,9.561139,6.732840,-8.817856,-9.025708,-3.526953,-9.536378,5.332906,-4.840373,-8.075408,-8.569288,2.058112,-1.544175,4.696576,9.065685,0.894123,-3.807600,4.030178,-4.802580,4.729438,3.992131,-7.003651,4.604852,-6.351776,2.929561,8.238359,5.373884,-8.528400,9.654077,5.725263,1.010097,2.016595,-0.308081,0.890898,9.282593,6.078310,9.237796,-4.859316,3.462032,-8.835046,5.668917,-6.991519,-4.284684,-7.610197,-0.236612,-1.934438,7.113273,-7.776772,-3.637719,-0.751728,-8.710677,-9.487036,-7.140576,-1.592031,2.371446,-1.317938,-2.935621,1.585536,1.135955,0.725728,-8.257951,1.600313,3.553890,2.031543,-6.639578,4.847703,0.075708,-3.162412,6.405756,5.976635,4.457929,6.208039,-1.712869,-7.242036,4.747666,7.553318,-3.713031,2.849288,-6.528030,5.427314,-0.360086,-6.088934,6.853638,7.178214,6.017953,4.860706,-5.403403,7.752939,-3.584192,-3.858642,2.285623,7.704168,7.656530,1.199814,8.122672,-6.499631,-2.752276,7.644109,1.469767,-3.725301,7.601381,8.114116,-7.341504,-6.945600,-0.876724,-8.387763,-7.048906,1.375488,-3.800476,-8.161483,-8.347681,-8.250187,7.395228,-2.366403,-0.810816,1.240560,-3.151988,-1.715088,5.294681,3.026041,6.517226,3.681693,9.752117,4.907163,-2.388200,4.140579,-0.120056,6.673706,1.695128,-0.867002,-1.466741,1.030293,-2.691651,2.156306,-1.786915,-2.567263,1.182713,-7.241173,-5.114240,-3.200444,4.753479,1.544399,9.006792,1.668029,-3.285962,5.349733,6.663966,-4.750486,-1.693767,-7.069663,-3.220404,-4.028803,-1.802965,1.363522,0.656104,9.323580,2.299584,-3.477468,7.811894,-6.545382,-4.671489,-8.126437,-8.795939,3.249253,2.788186,-0.802810,-6.496555,3.602105,5.223439,-6.819494,-4.526429,3.581324,-5.438121,2.365480,5.056178,-9.635122,6.992497,8.745369,0.567795,-7.304403,-3.162688,-5.254797,2.314154,-1.973645,-1.642202,5.782148,-3.442492,1.675143,1.359190,1.805900,-7.427871,-2.009266,-6.605035,3.251370,-5.451179,-7.406832,-4.950246,-3.790312,-4.823512,-3.278179,9.005963,-1.866515,-3.484768,-8.825035,-0.457530,-2.120519,7.443328,-6.286635,2.026372,7.234310,1.849822,-9.887138,0.105400,5.918192,9.693486,-0.782597,-6.602867,5.679464,-7.935583,-2.552243,0.689100,8.051587,3.645585,-3.244304,-5.993179,-9.291906,-8.814934,4.284203,5.218280,8.676175,7.378457,6.352832,-3.712152,-7.919899,5.295054,4.569124,-9.461271,9.975430,-9.624168,-2.091032,-2.850829,-8.811348,3.241145,-6.506103,9.249026,-7.076560,4.649960,-4.461160,-4.068859,4.189884,2.070642,-3.012388,0.243520,2.519446,9.337591,-5.208300,-5.483498,-4.082693,2.148521,9.682048,1.106081,8.276174,0.696386,-3.170783,-7.762373,1.935842,5.146264,4.684814,-6.977837,-0.323962,-4.597133,9.383064,-3.846785,4.724326,-1.922469,-8.127604,-1.909940,-2.371662,6.377351,7.104943,-4.012604,1.107009,-9.370649,5.730007,3.864314,-5.588480,-0.765792,-2.932667,-8.576460,-5.165533,-5.556658,-6.776998,-2.635975,9.646960,9.552418,-0.196934,0.185032,6.186838,-9.668627,-8.769873,4.339321,-8.166528,-0.869092,-9.313587,-9.988341,9.821917,7.219149,8.153254,9.614305,5.249494,1.049425,-2.539953,8.823868,-3.553725,-0.041728,2.208710,7.838699,-9.265959,-4.224021,-3.550661,2.506034,-8.093871,9.655580,9.030741,-1.398060,-0.611786,-9.189460,-6.612059,-9.929467,6.211621,-4.434712,-2.434471,-8.484169,9.802818,0.252667,3.228357,-7.278435,8.739536,4.376014,-1.039096,7.953819,8.718183,6.765661,0.954155,-1.121434,9.462223,2.579798,6.761031,-6.319529,3.874026,-9.651360,-0.550235,-9.683656,1.386298,-6.676951,0.450973,-8.049773,3.180805,-8.799578,6.889700,-9.603439,2.312907,9.705097,7.002948,-3.126120,5.205498,-4.444415,6.863368,-3.051912,-7.686188,-4.486958,-7.685981,2.486151,-0.950496,8.226423,-3.583228,-4.400228,0.195608,-2.938674,6.594613,0.049040,-6.391376,6.667384,-8.350422,-2.917829,-1.806499,-5.930910,7.562757,8.603328,-0.089765,0.842953,-2.338761,-8.437362,2.103632,-5.960951,8.901594,-8.144676,9.128291,2.212326,3.367276,7.101920,-0.226390,-6.318340,2.437708,-8.504318,-2.917291,-6.721739,1.365712,9.634544,-5.011658,-4.358510,8.024098,1.042533,-6.615458,8.102418,-2.190488,3.012605,-1.706848,-7.234631,5.266155,0.828264,-9.339117,-7.919568,8.329673,6.961044,-3.935625,8.810505,-9.280262,-4.741910,-9.539998,-5.001301,-7.655834,6.669622,1.687701,-6.086202,-8.238333,7.402059,-5.680541,4.564305,2.609086,6.734177,-2.946306,9.956125,8.143615,6.699990,8.640641,-0.404305,3.975304,6.106817,7.527479,-5.391497,8.479983,-4.155346,0.231841,7.427373,-1.899632,-9.877442,-1.099970,2.951892,-5.904384,1.471283,-4.526165,6.918909,0.701676,6.254107,6.536729,7.198354,5.963655,-5.499037,5.458800,4.719944,-4.574555,-7.332625,2.841613,-9.147693,-8.488232,-9.826478,1.256607,-5.943084,-1.584030,2.242143,6.896347,-7.114299,-5.094193,-7.120399,9.349437,-0.031046,7.773800,-8.940216,-9.356635,-9.264290,-9.764779,-7.237670,2.247231,-9.175021,-2.769887,8.692814,-9.167407,-6.704079,-5.112513,-1.850904,-6.386786,0.654540,2.236185,-9.558155,-2.793752,-9.524309,2.534394,-7.180564,-8.106262,-8.879450,-3.634389,-3.531869,-3.265395,2.393963,6.222385,-3.207659,-9.144975,-5.309378,3.227867,-7.016496,0.298140,-0.349085,1.032843,8.942248,5.438747,-3.560476,8.109188,9.085783,1.781477,-9.107151,-0.287246,-3.675989,-4.858556,2.380740,9.413908,8.576622,-9.345338,-2.870668,-4.482553,7.310883,9.591025,8.667489,8.404910,-2.273460,-7.399773,2.806384,8.646381,9.251689,-5.617308,1.487866,-6.673129,6.742797,-1.847866,-1.556451,2.116363,4.838772,7.388480,-3.026900,9.174409,9.202810,3.192405,-8.250998,-2.389739,5.792444,-0.418973,5.249418,7.502163,-4.817658,-6.229964,2.988956,-9.821860,-1.591351,1.733126,-0.328091,-1.336959,-5.341220,7.147362,-9.066331,6.865505,-7.753462,0.082648,-0.808908,-7.652271,-9.748395,-7.563653,7.152426,-3.495573,-8.583251,-5.583444,-7.551712,8.412733,-9.051242,-8.708687,-1.248096,-5.145448,6.394181,-2.813390,1.644696,-1.670273,6.468675,2.404407,-1.868800,1.372783,2.838825,3.396033,-3.726105,7.931199,4.079911,9.309962,4.395362,3.873435,9.300953,-5.024366,-9.835930,0.226598,0.737027,-2.628064,-1.492296,7.248122,6.089944,-9.972878,5.199606,9.701901,3.222339,-0.139790,-7.765480,6.727568,-2.458835,-5.020391,3.395286,-8.459107,-7.233313,-8.665990,-0.772429,1.147036,-1.734841,8.752055,8.561850,8.559842,-2.704292,7.701987,8.638981,-7.677424,-9.399832,-0.817751,-5.178028,3.184724,-1.305903,-3.840394,8.999655,-7.737710,4.327428,3.264397,-0.960297,8.493458,-4.992085,-8.722799,5.619715,4.526075,0.613084,0.916833,9.522547,4.223119,-5.601935,-2.243928,8.841843,-8.388357,0.702336,6.462470,-4.546690,-4.565696,6.570271,-6.590821,2.317440,-4.570908,8.984300,9.485297,-5.613303,-0.089368,-4.291623,-0.162841,-5.966974,-2.910374,-2.539639,6.249879,-7.965797,-9.537397,-5.528972,-7.944767,-3.121455,1.172643,1.894146,-6.477869,0.383168,-2.137587,-7.832953,6.542590,6.730819,-0.993424,5.667402,-3.617729,5.642368,5.165899,8.984674,6.871473,-8.033482,-0.747153,7.056292,-9.856842,4.620956,-1.458824], dtype = "float64")#candidate|121|(1200,)|const|float64
call_120 = relay.TupleGetItem(func_81_call(relay.reshape(const_121.astype('float64'), [15, 5, 16])), 1)
call_122 = relay.TupleGetItem(func_83_call(relay.reshape(const_121.astype('float64'), [15, 5, 16])), 1)
bop_123 = relay.not_equal(bop_113.astype('bool'), relay.reshape(bop_90.astype('bool'), relay.shape_of(bop_113))) # shape=(13, 10, 16)
uop_126 = relay.tan(bop_106.astype('float64')) # shape=(13, 10, 16)
uop_128 = relay.tan(uop_126.astype('float64')) # shape=(13, 10, 16)
uop_130 = relay.atan(uop_126.astype('float32')) # shape=(13, 10, 16)
uop_132 = relay.acosh(uop_128.astype('float64')) # shape=(13, 10, 16)
var_134 = relay.var("var_134", dtype = "float64", shape = (13, 10, 16))#candidate|134|(13, 10, 16)|var|float64
bop_135 = relay.right_shift(uop_128.astype('int16'), relay.reshape(var_134.astype('int16'), relay.shape_of(uop_128))) # shape=(13, 10, 16)
uop_138 = relay.log10(uop_132.astype('float64')) # shape=(13, 10, 16)
uop_140 = relay.log10(uop_132.astype('float32')) # shape=(13, 10, 16)
uop_142 = relay.log10(uop_132.astype('float32')) # shape=(13, 10, 16)
uop_144 = relay.exp(uop_132.astype('float32')) # shape=(13, 10, 16)
uop_146 = relay.acosh(uop_142.astype('float32')) # shape=(13, 10, 16)
uop_148 = relay.atan(uop_132.astype('float64')) # shape=(13, 10, 16)
output = relay.Tuple([const_94,uop_109,bop_117,call_120,const_121,bop_123,uop_130,bop_135,uop_138,uop_140,uop_144,uop_146,uop_148,])
output2 = relay.Tuple([const_94,uop_111,bop_117,call_122,const_121,bop_123,uop_130,bop_135,uop_138,uop_140,uop_144,uop_146,uop_148,])
func_150 = relay.Function([var_85,var_86,var_112,var_116,var_134,], output)
mod['func_150'] = func_150
mod = relay.transform.InferType()(mod)
mutated_mod['func_150'] = func_150
mutated_mod = relay.transform.InferType()(mutated_mod)
func_150_call = mutated_mod.get_global_var('func_150')
var_152 = relay.var("var_152", dtype = "uint16", shape = ())#candidate|152|()|var|uint16
var_153 = relay.var("var_153", dtype = "uint16", shape = (13, 10, 16))#candidate|153|(13, 10, 16)|var|uint16
var_154 = relay.var("var_154", dtype = "float32", shape = (13, 10, 16))#candidate|154|(13, 10, 16)|var|float32
var_155 = relay.var("var_155", dtype = "float32", shape = (13, 10, 16))#candidate|155|(13, 10, 16)|var|float32
var_156 = relay.var("var_156", dtype = "float64", shape = (13, 10, 16))#candidate|156|(13, 10, 16)|var|float64
call_151 = func_150_call(var_152,var_153,var_154,var_155,var_156,)
output = call_151
func_157 = relay.Function([var_152,var_153,var_154,var_155,var_156,], output)
mutated_mod['func_157'] = func_157
mutated_mod = relay.transform.InferType()(mutated_mod)
const_159 = relay.const(False, dtype = "bool")#candidate|159|()|const|bool
const_160 = relay.const([False,False,False,True,True,True,True,True,False,False,False,True,True,True,True], dtype = "bool")#candidate|160|(15,)|const|bool
bop_161 = relay.logical_and(const_159.astype('bool'), const_160.astype('bool')) # shape=(15,)
const_164 = relay.const([[True,True,True,True,False,True],[False,True,True,False,False,True],[False,True,False,False,True,False]], dtype = "bool")#candidate|164|(3, 6)|const|bool
bop_165 = relay.logical_and(const_159.astype('bool'), const_164.astype('bool')) # shape=(3, 6)
output = relay.Tuple([bop_161,bop_165,])
output2 = relay.Tuple([bop_161,bop_165,])
func_168 = relay.Function([], output)
mod['func_168'] = func_168
mod = relay.transform.InferType()(mod)
mutated_mod['func_168'] = func_168
mutated_mod = relay.transform.InferType()(mutated_mod)
func_168_call = mutated_mod.get_global_var('func_168')
call_169 = func_168_call()
output = call_169
func_170 = relay.Function([], output)
mutated_mod['func_170'] = func_170
mutated_mod = relay.transform.InferType()(mutated_mod)
var_171 = relay.var("var_171", dtype = "float64", shape = (15, 5, 15))#candidate|171|(15, 5, 15)|var|float64
var_172 = relay.var("var_172", dtype = "float64", shape = (15, 5, 15))#candidate|172|(15, 5, 15)|var|float64
bop_173 = relay.floor_divide(var_171.astype('float64'), relay.reshape(var_172.astype('float64'), relay.shape_of(var_171))) # shape=(15, 5, 15)
func_54_call = mod.get_global_var('func_54')
func_59_call = mutated_mod.get_global_var('func_59')
const_177 = relay.const([-7,-3,-8,10,8,-3,-3,-6,4,8,-4,3,-2,8,4,-6,-4,10,3,-9,-8,-2,3,-7,-10,6,-10,1,-5,-8,8,-9,-4,4,9,-2], dtype = "uint8")#candidate|177|(36,)|const|uint8
call_176 = relay.TupleGetItem(func_54_call(relay.reshape(const_177.astype('uint8'), [12, 3]), relay.reshape(const_177.astype('uint8'), [12, 3]), relay.reshape(const_177.astype('bool'), [12, 3]), ), 2)
call_178 = relay.TupleGetItem(func_59_call(relay.reshape(const_177.astype('uint8'), [12, 3]), relay.reshape(const_177.astype('uint8'), [12, 3]), relay.reshape(const_177.astype('bool'), [12, 3]), ), 2)
bop_179 = relay.bitwise_xor(call_176.astype('uint16'), relay.reshape(const_177.astype('uint16'), relay.shape_of(call_176))) # shape=(12, 3)
bop_182 = relay.bitwise_xor(call_178.astype('uint16'), relay.reshape(const_177.astype('uint16'), relay.shape_of(call_178))) # shape=(12, 3)
var_183 = relay.var("var_183", dtype = "float64", shape = (15, 5, 15))#candidate|183|(15, 5, 15)|var|float64
bop_184 = relay.equal(bop_173.astype('bool'), relay.reshape(var_183.astype('bool'), relay.shape_of(bop_173))) # shape=(15, 5, 15)
uop_187 = relay.asinh(const_177.astype('float64')) # shape=(36,)
uop_189 = relay.log10(uop_187.astype('float64')) # shape=(36,)
func_15_call = mod.get_global_var('func_15')
func_17_call = mutated_mod.get_global_var('func_17')
var_192 = relay.var("var_192", dtype = "float64", shape = ())#candidate|192|()|var|float64
call_191 = relay.TupleGetItem(func_15_call(relay.reshape(var_192.astype('float64'), [])), 2)
call_193 = relay.TupleGetItem(func_17_call(relay.reshape(var_192.astype('float64'), [])), 2)
uop_194 = relay.asin(uop_187.astype('float64')) # shape=(36,)
bop_196 = relay.greater_equal(uop_189.astype('bool'), var_192.astype('bool')) # shape=(36,)
uop_199 = relay.rsqrt(bop_196.astype('float64')) # shape=(36,)
bop_201 = relay.not_equal(uop_199.astype('bool'), relay.reshape(uop_189.astype('bool'), relay.shape_of(uop_199))) # shape=(36,)
uop_204 = relay.log(uop_199.astype('float64')) # shape=(36,)
const_206 = relay.const([-5.020558,4.155836,-0.047833,-4.356547,-2.892023,-0.142394,9.251710,7.715785,0.701358,8.643191,9.104634,6.544001,-6.678938,-3.093079,3.186193,0.539129,2.534230,-5.519569,-0.431557,-4.825955,6.268816,2.006010,-6.633841,-8.884582,9.640626,4.396679,-9.279771,-2.182214,-0.252101,-5.606889,-3.851413,3.271972,-1.146839,9.549367,-4.571092,-3.946423], dtype = "float64")#candidate|206|(36,)|const|float64
bop_207 = relay.multiply(uop_204.astype('int8'), relay.reshape(const_206.astype('int8'), relay.shape_of(uop_204))) # shape=(36,)
uop_210 = relay.sinh(uop_199.astype('float32')) # shape=(36,)
uop_212 = relay.exp(bop_201.astype('float64')) # shape=(36,)
uop_214 = relay.acos(uop_187.astype('float64')) # shape=(36,)
bop_216 = relay.mod(bop_173.astype('float64'), relay.reshape(var_172.astype('float64'), relay.shape_of(bop_173))) # shape=(15, 5, 15)
uop_219 = relay.exp(uop_210.astype('float64')) # shape=(36,)
uop_221 = relay.cos(uop_219.astype('float64')) # shape=(36,)
bop_223 = relay.greater(uop_221.astype('bool'), relay.reshape(bop_179.astype('bool'), relay.shape_of(uop_221))) # shape=(36,)
bop_226 = relay.greater(uop_221.astype('bool'), relay.reshape(bop_182.astype('bool'), relay.shape_of(uop_221))) # shape=(36,)
uop_227 = relay.exp(bop_223.astype('float32')) # shape=(36,)
uop_229 = relay.exp(bop_226.astype('float32')) # shape=(36,)
func_15_call = mod.get_global_var('func_15')
func_17_call = mutated_mod.get_global_var('func_17')
call_230 = relay.TupleGetItem(func_15_call(relay.reshape(call_191.astype('float64'), [])), 0)
call_231 = relay.TupleGetItem(func_17_call(relay.reshape(call_191.astype('float64'), [])), 0)
uop_232 = relay.asinh(bop_223.astype('float32')) # shape=(36,)
uop_234 = relay.asinh(bop_226.astype('float32')) # shape=(36,)
uop_235 = relay.erf(uop_227.astype('float32')) # shape=(36,)
uop_237 = relay.erf(uop_229.astype('float32')) # shape=(36,)
bop_238 = relay.divide(uop_204.astype('float64'), relay.reshape(bop_179.astype('float64'), relay.shape_of(uop_204))) # shape=(36,)
bop_241 = relay.divide(uop_204.astype('float64'), relay.reshape(bop_182.astype('float64'), relay.shape_of(uop_204))) # shape=(36,)
uop_242 = relay.cosh(uop_235.astype('float64')) # shape=(36,)
uop_244 = relay.cosh(uop_237.astype('float64')) # shape=(36,)
bop_245 = relay.greater(uop_242.astype('bool'), relay.reshape(bop_207.astype('bool'), relay.shape_of(uop_242))) # shape=(36,)
bop_248 = relay.greater(uop_244.astype('bool'), relay.reshape(bop_207.astype('bool'), relay.shape_of(uop_244))) # shape=(36,)
var_249 = relay.var("var_249", dtype = "float64", shape = (36,))#candidate|249|(36,)|var|float64
bop_250 = relay.floor_mod(uop_242.astype('float64'), relay.reshape(var_249.astype('float64'), relay.shape_of(uop_242))) # shape=(36,)
bop_253 = relay.floor_mod(uop_244.astype('float64'), relay.reshape(var_249.astype('float64'), relay.shape_of(uop_244))) # shape=(36,)
output = relay.Tuple([bop_184,call_191,uop_194,uop_212,uop_214,bop_216,call_230,uop_232,bop_238,bop_245,bop_250,])
output2 = relay.Tuple([bop_184,call_193,uop_194,uop_212,uop_214,bop_216,call_231,uop_234,bop_241,bop_248,bop_253,])
func_254 = relay.Function([var_171,var_172,var_183,var_192,var_249,], output)
mod['func_254'] = func_254
mod = relay.transform.InferType()(mod)
mutated_mod['func_254'] = func_254
mutated_mod = relay.transform.InferType()(mutated_mod)
func_254_call = mutated_mod.get_global_var('func_254')
var_256 = relay.var("var_256", dtype = "float64", shape = (15, 5, 15))#candidate|256|(15, 5, 15)|var|float64
var_257 = relay.var("var_257", dtype = "float64", shape = (15, 5, 15))#candidate|257|(15, 5, 15)|var|float64
var_258 = relay.var("var_258", dtype = "float64", shape = (15, 5, 15))#candidate|258|(15, 5, 15)|var|float64
var_259 = relay.var("var_259", dtype = "float64", shape = ())#candidate|259|()|var|float64
var_260 = relay.var("var_260", dtype = "float64", shape = (36,))#candidate|260|(36,)|var|float64
call_255 = func_254_call(var_256,var_257,var_258,var_259,var_260,)
output = call_255
func_261 = relay.Function([var_256,var_257,var_258,var_259,var_260,], output)
mutated_mod['func_261'] = func_261
mutated_mod = relay.transform.InferType()(mutated_mod)
func_168_call = mod.get_global_var('func_168')
func_170_call = mutated_mod.get_global_var('func_170')
call_263 = relay.TupleGetItem(func_168_call(), 1)
call_264 = relay.TupleGetItem(func_170_call(), 1)
var_265 = relay.var("var_265", dtype = "bool", shape = (3, 6))#candidate|265|(3, 6)|var|bool
bop_266 = relay.mod(call_263.astype('float32'), relay.reshape(var_265.astype('float32'), relay.shape_of(call_263))) # shape=(3, 6)
bop_269 = relay.mod(call_264.astype('float32'), relay.reshape(var_265.astype('float32'), relay.shape_of(call_264))) # shape=(3, 6)
bop_270 = relay.less_equal(call_263.astype('bool'), relay.reshape(var_265.astype('bool'), relay.shape_of(call_263))) # shape=(3, 6)
bop_273 = relay.less_equal(call_264.astype('bool'), relay.reshape(var_265.astype('bool'), relay.shape_of(call_264))) # shape=(3, 6)
var_274 = relay.var("var_274", dtype = "bool", shape = (3, 6))#candidate|274|(3, 6)|var|bool
bop_275 = relay.bitwise_or(var_265.astype('int32'), relay.reshape(var_274.astype('int32'), relay.shape_of(var_265))) # shape=(3, 6)
var_278 = relay.var("var_278", dtype = "int32", shape = (3, 6))#candidate|278|(3, 6)|var|int32
bop_279 = relay.floor_mod(bop_275.astype('float32'), relay.reshape(var_278.astype('float32'), relay.shape_of(bop_275))) # shape=(3, 6)
uop_282 = relay.rsqrt(bop_266.astype('float64')) # shape=(3, 6)
uop_284 = relay.rsqrt(bop_269.astype('float64')) # shape=(3, 6)
uop_285 = relay.atanh(var_274.astype('float64')) # shape=(3, 6)
uop_287 = relay.cosh(var_278.astype('float32')) # shape=(3, 6)
uop_289 = relay.log2(uop_285.astype('float64')) # shape=(3, 6)
uop_291 = relay.sin(var_278.astype('float32')) # shape=(3, 6)
uop_293 = relay.log10(uop_289.astype('float32')) # shape=(3, 6)
uop_295 = relay.cosh(uop_289.astype('float64')) # shape=(3, 6)
uop_297 = relay.tan(uop_289.astype('float64')) # shape=(3, 6)
bop_299 = relay.mod(uop_291.astype('float64'), relay.reshape(uop_293.astype('float64'), relay.shape_of(uop_291))) # shape=(3, 6)
bop_302 = relay.not_equal(bop_299.astype('bool'), relay.reshape(uop_289.astype('bool'), relay.shape_of(bop_299))) # shape=(3, 6)
uop_305 = relay.cos(uop_289.astype('float64')) # shape=(3, 6)
uop_307 = relay.sqrt(uop_295.astype('float32')) # shape=(3, 6)
uop_309 = relay.atanh(uop_293.astype('float32')) # shape=(3, 6)
var_311 = relay.var("var_311", dtype = "float64", shape = (3, 6))#candidate|311|(3, 6)|var|float64
bop_312 = relay.bitwise_xor(uop_289.astype('uint64'), relay.reshape(var_311.astype('uint64'), relay.shape_of(uop_289))) # shape=(3, 6)
uop_315 = relay.asin(uop_307.astype('float32')) # shape=(3, 6)
const_317 = relay.const([[-3.424823,7.416178,-3.142084,4.530316,-7.235311,-3.660511],[-1.026205,2.228504,-4.279899,-3.430865,-5.642807,-7.866938],[-7.935213,-9.998720,6.648131,9.834837,-8.721460,-8.059559]], dtype = "float32")#candidate|317|(3, 6)|const|float32
bop_318 = relay.subtract(uop_315.astype('float32'), relay.reshape(const_317.astype('float32'), relay.shape_of(uop_315))) # shape=(3, 6)
uop_321 = relay.log10(bop_318.astype('float32')) # shape=(3, 6)
bop_323 = relay.less_equal(uop_321.astype('bool'), relay.reshape(var_311.astype('bool'), relay.shape_of(uop_321))) # shape=(3, 6)
uop_326 = relay.atan(uop_321.astype('float64')) # shape=(3, 6)
var_328 = relay.var("var_328", dtype = "bool", shape = (3, 6))#candidate|328|(3, 6)|var|bool
bop_329 = relay.minimum(bop_323.astype('uint16'), relay.reshape(var_328.astype('uint16'), relay.shape_of(bop_323))) # shape=(3, 6)
bop_332 = relay.less_equal(uop_326.astype('bool'), relay.reshape(bop_270.astype('bool'), relay.shape_of(uop_326))) # shape=(3, 6)
bop_335 = relay.less_equal(uop_326.astype('bool'), relay.reshape(bop_273.astype('bool'), relay.shape_of(uop_326))) # shape=(3, 6)
output = relay.Tuple([bop_279,uop_282,uop_287,uop_297,bop_302,uop_305,uop_309,bop_312,bop_329,bop_332,])
output2 = relay.Tuple([bop_279,uop_284,uop_287,uop_297,bop_302,uop_305,uop_309,bop_312,bop_329,bop_335,])
F = relay.Function([var_265,var_274,var_278,var_311,var_328,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_265,var_274,var_278,var_311,var_328,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
	relay.transform.DefuseOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_265= np.array([[False,True,True,False,True,False],[True,True,False,False,False,False],[False,True,False,False,False,True]], dtype='bool')
module1.set_input('var_265', input_265)
input_274= np.array([[True,True,False,False,False,True],[False,False,True,True,False,True],[False,False,False,True,False,False]], dtype='bool')
module1.set_input('var_274', input_274)
input_278= np.array([[-1,10,-9,7,4,-5],[1,5,9,-10,6,-1],[6,4,3,9,-8,-7]], dtype='int32')
module1.set_input('var_278', input_278)
input_311= np.array([[7.142445,-2.114582,5.603298,-9.555728,-5.295522,5.774897],[5.188900,-5.218545,5.308247,-2.619592,-4.223762,-8.688282],[-5.826711,-8.238681,8.498118,3.518994,-2.571573,0.048737]], dtype='float64')
module1.set_input('var_311', input_311)
input_328= np.array([[True,True,True,True,True,True],[True,True,True,False,False,True],[False,False,False,False,False,False]], dtype='bool')
module1.set_input('var_328', input_328)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_265, input_274, input_278, input_311, input_328, )
res3 = intrp3.evaluate()(input_265, input_274, input_278, input_311, input_328, )
res4 = intrp4.evaluate()(input_265, input_274, input_278, input_311, input_328, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
module5.set_input('var_265', input_265)
module5.set_input('var_274', input_274)
module5.set_input('var_278', input_278)
module5.set_input('var_311', input_311)
module5.set_input('var_328', input_328)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_265, input_274, input_278, input_311, input_328, )
res7 = intrp7.evaluate()(input_265, input_274, input_278, input_311, input_328, )
res8 = intrp8.evaluate()(input_265, input_274, input_278, input_311, input_328, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
module9.set_input('var_265', input_265)
module9.set_input('var_274', input_274)
module9.set_input('var_278', input_278)
module9.set_input('var_311', input_311)
module9.set_input('var_328', input_328)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_265, input_274, input_278, input_311, input_328, )
res11 = intrp11.evaluate()(input_265, input_274, input_278, input_311, input_328, )
res12 = intrp12.evaluate()(input_265, input_274, input_278, input_311, input_328, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
module13.set_input('var_265', input_265)
module13.set_input('var_274', input_274)
module13.set_input('var_278', input_278)
module13.set_input('var_311', input_311)
module13.set_input('var_328', input_328)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_265, input_274, input_278, input_311, input_328, )
res15 = intrp15.evaluate()(input_265, input_274, input_278, input_311, input_328, )
res16 = intrp16.evaluate()(input_265, input_274, input_278, input_311, input_328, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
module17.set_input('var_265', input_265)
module17.set_input('var_274', input_274)
module17.set_input('var_278', input_278)
module17.set_input('var_311', input_311)
module17.set_input('var_328', input_328)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_265, input_274, input_278, input_311, input_328, )
res19 = intrp19.evaluate()(input_265, input_274, input_278, input_311, input_328, )
res20 = intrp20.evaluate()(input_265, input_274, input_278, input_311, input_328, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
module21.set_input('var_265', input_265)
module21.set_input('var_274', input_274)
module21.set_input('var_278', input_278)
module21.set_input('var_311', input_311)
module21.set_input('var_328', input_328)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_265, input_274, input_278, input_311, input_328, )
res23 = intrp23.evaluate()(input_265, input_274, input_278, input_311, input_328, )
res24 = intrp24.evaluate()(input_265, input_274, input_278, input_311, input_328, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()

'''6: TVMFuncCall
5: _ZNSt17_Function_handlerIFvN3tvm7runtime7
4: tvm::runtime::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const [clone .isra.808]
3: tvm::runtime::GraphExecutorCreate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module const&, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
2: tvm::runtime::GraphExecutor::Init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
1: tvm::runtime::GraphExecutor::SetupOpExecs()
0: tvm::runtime::GraphExecutor::CreateTVMOp(tvm::runtime::TVMOpParam const&, std::vector<DLTensor, std::allocator<DLTensor> > const&)

'''