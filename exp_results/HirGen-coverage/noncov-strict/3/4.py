import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "int8", shape = (3, 8))#candidate|0|(3, 8)|var|int8
var_1 = relay.var("var_1", dtype = "int8", shape = (3, 8))#candidate|1|(3, 8)|var|int8
bop_2 = relay.bitwise_xor(var_0.astype('int8'), relay.reshape(var_1.astype('int8'), relay.shape_of(var_0))) # shape=(3, 8)
bop_5 = relay.less(var_0.astype('bool'), relay.reshape(var_1.astype('bool'), relay.shape_of(var_0))) # shape=(3, 8)
var_8 = relay.var("var_8", dtype = "bool", shape = (3, 8))#candidate|8|(3, 8)|var|bool
bop_9 = relay.greater(bop_5.astype('bool'), relay.reshape(var_8.astype('bool'), relay.shape_of(bop_5))) # shape=(3, 8)
uop_12 = relay.atanh(bop_5.astype('float64')) # shape=(3, 8)
output = relay.Tuple([bop_2,bop_9,uop_12,])
output2 = relay.Tuple([bop_2,bop_9,uop_12,])
func_14 = relay.Function([var_0,var_1,var_8,], output)
mod['func_14'] = func_14
mod = relay.transform.InferType()(mod)
mutated_mod['func_14'] = func_14
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14_call = mutated_mod.get_global_var('func_14')
var_16 = relay.var("var_16", dtype = "int8", shape = (3, 8))#candidate|16|(3, 8)|var|int8
var_17 = relay.var("var_17", dtype = "int8", shape = (3, 8))#candidate|17|(3, 8)|var|int8
var_18 = relay.var("var_18", dtype = "bool", shape = (3, 8))#candidate|18|(3, 8)|var|bool
call_15 = func_14_call(var_16,var_17,var_18,)
output = call_15
func_19 = relay.Function([var_16,var_17,var_18,], output)
mutated_mod['func_19'] = func_19
mutated_mod = relay.transform.InferType()(mutated_mod)
var_21 = relay.var("var_21", dtype = "float32", shape = (11, 8))#candidate|21|(11, 8)|var|float32
uop_22 = relay.sigmoid(var_21.astype('float32')) # shape=(11, 8)
bop_24 = relay.not_equal(uop_22.astype('bool'), relay.reshape(var_21.astype('bool'), relay.shape_of(uop_22))) # shape=(11, 8)
uop_27 = relay.exp(bop_24.astype('float32')) # shape=(11, 8)
bop_29 = relay.logical_or(uop_27.astype('bool'), relay.reshape(bop_24.astype('bool'), relay.shape_of(uop_27))) # shape=(11, 8)
output = relay.Tuple([bop_29,])
output2 = relay.Tuple([bop_29,])
func_32 = relay.Function([var_21,], output)
mod['func_32'] = func_32
mod = relay.transform.InferType()(mod)
mutated_mod['func_32'] = func_32
mutated_mod = relay.transform.InferType()(mutated_mod)
var_33 = relay.var("var_33", dtype = "float32", shape = (11, 8))#candidate|33|(11, 8)|var|float32
func_32_call = mutated_mod.get_global_var('func_32')
call_34 = func_32_call(var_33)
output = call_34
func_35 = relay.Function([var_33], output)
mutated_mod['func_35'] = func_35
mutated_mod = relay.transform.InferType()(mutated_mod)
var_37 = relay.var("var_37", dtype = "float32", shape = (7, 4))#candidate|37|(7, 4)|var|float32
var_38 = relay.var("var_38", dtype = "float32", shape = (7, 4))#candidate|38|(7, 4)|var|float32
bop_39 = relay.greater(var_37.astype('bool'), relay.reshape(var_38.astype('bool'), relay.shape_of(var_37))) # shape=(7, 4)
func_14_call = mod.get_global_var('func_14')
func_19_call = mutated_mod.get_global_var('func_19')
const_43 = relay.const([9,-10,-2,-4,6,10,5,1,2,7,-5,8,-5,3,-1,-3,10,-5,-6,1,-2,7,6,3], dtype = "int8")#candidate|43|(24,)|const|int8
call_42 = relay.TupleGetItem(func_14_call(relay.reshape(const_43.astype('int8'), [3, 8]), relay.reshape(const_43.astype('int8'), [3, 8]), relay.reshape(const_43.astype('bool'), [3, 8]), ), 1)
call_44 = relay.TupleGetItem(func_19_call(relay.reshape(const_43.astype('int8'), [3, 8]), relay.reshape(const_43.astype('int8'), [3, 8]), relay.reshape(const_43.astype('bool'), [3, 8]), ), 1)
var_45 = relay.var("var_45", dtype = "int8", shape = (24,))#candidate|45|(24,)|var|int8
bop_46 = relay.maximum(const_43.astype('int8'), relay.reshape(var_45.astype('int8'), relay.shape_of(const_43))) # shape=(24,)
var_49 = relay.var("var_49", dtype = "int8", shape = (24,))#candidate|49|(24,)|var|int8
bop_50 = relay.logical_or(bop_46.astype('bool'), relay.reshape(var_49.astype('bool'), relay.shape_of(bop_46))) # shape=(24,)
uop_53 = relay.sqrt(var_37.astype('float64')) # shape=(7, 4)
uop_55 = relay.exp(uop_53.astype('float64')) # shape=(7, 4)
uop_57 = relay.sigmoid(uop_55.astype('float32')) # shape=(7, 4)
uop_59 = relay.sinh(uop_55.astype('float32')) # shape=(7, 4)
uop_61 = relay.log10(uop_59.astype('float64')) # shape=(7, 4)
bop_63 = relay.right_shift(uop_61.astype('int64'), relay.reshape(var_38.astype('int64'), relay.shape_of(uop_61))) # shape=(7, 4)
output = relay.Tuple([bop_39,call_42,bop_50,uop_57,bop_63,])
output2 = relay.Tuple([bop_39,call_44,bop_50,uop_57,bop_63,])
func_66 = relay.Function([var_37,var_38,var_45,var_49,], output)
mod['func_66'] = func_66
mod = relay.transform.InferType()(mod)
mutated_mod['func_66'] = func_66
mutated_mod = relay.transform.InferType()(mutated_mod)
func_66_call = mutated_mod.get_global_var('func_66')
var_68 = relay.var("var_68", dtype = "float32", shape = (7, 4))#candidate|68|(7, 4)|var|float32
var_69 = relay.var("var_69", dtype = "float32", shape = (7, 4))#candidate|69|(7, 4)|var|float32
var_70 = relay.var("var_70", dtype = "int8", shape = (24,))#candidate|70|(24,)|var|int8
var_71 = relay.var("var_71", dtype = "int8", shape = (24,))#candidate|71|(24,)|var|int8
call_67 = func_66_call(var_68,var_69,var_70,var_71,)
output = call_67
func_72 = relay.Function([var_68,var_69,var_70,var_71,], output)
mutated_mod['func_72'] = func_72
mutated_mod = relay.transform.InferType()(mutated_mod)
var_74 = relay.var("var_74", dtype = "float32", shape = ())#candidate|74|()|var|float32
var_75 = relay.var("var_75", dtype = "float32", shape = ())#candidate|75|()|var|float32
bop_76 = relay.floor_divide(var_74.astype('float32'), var_75.astype('float32')) # shape=()
bop_79 = relay.greater_equal(var_75.astype('bool'), var_74.astype('bool')) # shape=()
bop_82 = relay.logical_or(var_74.astype('bool'), bop_76.astype('bool')) # shape=()
bop_85 = relay.logical_xor(var_75.astype('uint16'), bop_76.astype('uint16')) # shape=()
output = relay.Tuple([bop_79,bop_82,bop_85,])
output2 = relay.Tuple([bop_79,bop_82,bop_85,])
func_88 = relay.Function([var_74,var_75,], output)
mod['func_88'] = func_88
mod = relay.transform.InferType()(mod)
mutated_mod['func_88'] = func_88
mutated_mod = relay.transform.InferType()(mutated_mod)
func_88_call = mutated_mod.get_global_var('func_88')
var_90 = relay.var("var_90", dtype = "float32", shape = ())#candidate|90|()|var|float32
var_91 = relay.var("var_91", dtype = "float32", shape = ())#candidate|91|()|var|float32
call_89 = func_88_call(var_90,var_91,)
output = call_89
func_92 = relay.Function([var_90,var_91,], output)
mutated_mod['func_92'] = func_92
mutated_mod = relay.transform.InferType()(mutated_mod)
const_94 = relay.const([[9,-7,4,3,-3,1,-10,-6,8,7,9,-2,-5]], dtype = "uint16")#candidate|94|(1, 13)|const|uint16
const_95 = relay.const([[-8,-5,-10,7,-2,-9,-9,-4,7,-2,-3,5,-2],[-8,5,-7,6,9,6,1,6,-1,-10,-2,7,4],[-2,-2,5,1,1,-2,-2,4,-6,-4,-5,-7,-3]], dtype = "uint16")#candidate|95|(3, 13)|const|uint16
bop_96 = relay.equal(const_94.astype('bool'), const_95.astype('bool')) # shape=(3, 13)
output = relay.Tuple([bop_96,])
output2 = relay.Tuple([bop_96,])
func_99 = relay.Function([], output)
mod['func_99'] = func_99
mod = relay.transform.InferType()(mod)
mutated_mod['func_99'] = func_99
mutated_mod = relay.transform.InferType()(mutated_mod)
func_99_call = mutated_mod.get_global_var('func_99')
call_100 = func_99_call()
output = call_100
func_101 = relay.Function([], output)
mutated_mod['func_101'] = func_101
mutated_mod = relay.transform.InferType()(mutated_mod)
var_102 = relay.var("var_102", dtype = "float32", shape = (1,))#candidate|102|(1,)|var|float32
const_103 = relay.const([5.171696,-0.389723,-9.256220,-5.647434,6.737177,5.011369,4.273712,-9.988984], dtype = "float32")#candidate|103|(8,)|const|float32
bop_104 = relay.divide(var_102.astype('float32'), const_103.astype('float32')) # shape=(8,)
var_107 = relay.var("var_107", dtype = "float32", shape = (10,))#candidate|107|(10,)|var|float32
bop_108 = relay.greater_equal(var_102.astype('bool'), var_107.astype('bool')) # shape=(10,)
bop_111 = relay.logical_xor(var_107.astype('int32'), var_102.astype('int32')) # shape=(10,)
bop_114 = relay.logical_xor(bop_104.astype('uint64'), relay.reshape(const_103.astype('uint64'), relay.shape_of(bop_104))) # shape=(8,)
bop_117 = relay.greater_equal(const_103.astype('bool'), var_102.astype('bool')) # shape=(8,)
output = relay.Tuple([bop_108,bop_111,bop_114,bop_117,])
output2 = relay.Tuple([bop_108,bop_111,bop_114,bop_117,])
func_120 = relay.Function([var_102,var_107,], output)
mod['func_120'] = func_120
mod = relay.transform.InferType()(mod)
var_121 = relay.var("var_121", dtype = "float32", shape = (1,))#candidate|121|(1,)|var|float32
var_122 = relay.var("var_122", dtype = "float32", shape = (10,))#candidate|122|(10,)|var|float32
output = func_120(var_121,var_122,)
func_123 = relay.Function([var_121,var_122,], output)
mutated_mod['func_123'] = func_123
mutated_mod = relay.transform.InferType()(mutated_mod)
const_125 = relay.const([3,-1,-1,9,-9,8,7,-9,-9,2,6,4,7], dtype = "int16")#candidate|125|(13,)|const|int16
var_126 = relay.var("var_126", dtype = "int16", shape = (13,))#candidate|126|(13,)|var|int16
bop_127 = relay.bitwise_and(const_125.astype('int16'), relay.reshape(var_126.astype('int16'), relay.shape_of(const_125))) # shape=(13,)
bop_130 = relay.less_equal(var_126.astype('bool'), relay.reshape(bop_127.astype('bool'), relay.shape_of(var_126))) # shape=(13,)
uop_133 = relay.asin(bop_127.astype('float32')) # shape=(13,)
bop_135 = relay.bitwise_xor(uop_133.astype('uint32'), relay.reshape(const_125.astype('uint32'), relay.shape_of(uop_133))) # shape=(13,)
uop_138 = relay.sin(bop_135.astype('float64')) # shape=(13,)
uop_140 = relay.asin(uop_133.astype('float64')) # shape=(13,)
var_142 = relay.var("var_142", dtype = "float64", shape = (13,))#candidate|142|(13,)|var|float64
bop_143 = relay.divide(uop_140.astype('float32'), relay.reshape(var_142.astype('float32'), relay.shape_of(uop_140))) # shape=(13,)
uop_146 = relay.cos(const_125.astype('float64')) # shape=(13,)
output = relay.Tuple([bop_130,uop_138,bop_143,uop_146,])
output2 = relay.Tuple([bop_130,uop_138,bop_143,uop_146,])
func_148 = relay.Function([var_126,var_142,], output)
mod['func_148'] = func_148
mod = relay.transform.InferType()(mod)
var_149 = relay.var("var_149", dtype = "int16", shape = (13,))#candidate|149|(13,)|var|int16
var_150 = relay.var("var_150", dtype = "float64", shape = (13,))#candidate|150|(13,)|var|float64
output = func_148(var_149,var_150,)
func_151 = relay.Function([var_149,var_150,], output)
mutated_mod['func_151'] = func_151
mutated_mod = relay.transform.InferType()(mutated_mod)
func_99_call = mod.get_global_var('func_99')
func_101_call = mutated_mod.get_global_var('func_101')
call_153 = relay.TupleGetItem(func_99_call(), 0)
call_154 = relay.TupleGetItem(func_101_call(), 0)
uop_155 = relay.cos(call_153.astype('float32')) # shape=(3, 13)
uop_157 = relay.cos(call_154.astype('float32')) # shape=(3, 13)
bop_158 = relay.equal(uop_155.astype('bool'), relay.reshape(call_153.astype('bool'), relay.shape_of(uop_155))) # shape=(3, 13)
bop_161 = relay.equal(uop_157.astype('bool'), relay.reshape(call_154.astype('bool'), relay.shape_of(uop_157))) # shape=(3, 13)
uop_162 = relay.log2(bop_158.astype('float64')) # shape=(3, 13)
uop_164 = relay.log2(bop_161.astype('float64')) # shape=(3, 13)
var_165 = relay.var("var_165", dtype = "float32", shape = (3, 13))#candidate|165|(3, 13)|var|float32
bop_166 = relay.divide(uop_155.astype('float32'), relay.reshape(var_165.astype('float32'), relay.shape_of(uop_155))) # shape=(3, 13)
bop_169 = relay.divide(uop_157.astype('float32'), relay.reshape(var_165.astype('float32'), relay.shape_of(uop_157))) # shape=(3, 13)
uop_170 = relay.log(uop_155.astype('float64')) # shape=(3, 13)
uop_172 = relay.log(uop_157.astype('float64')) # shape=(3, 13)
bop_173 = relay.divide(uop_170.astype('float64'), relay.reshape(bop_158.astype('float64'), relay.shape_of(uop_170))) # shape=(3, 13)
bop_176 = relay.divide(uop_172.astype('float64'), relay.reshape(bop_161.astype('float64'), relay.shape_of(uop_172))) # shape=(3, 13)
uop_177 = relay.cosh(uop_162.astype('float64')) # shape=(3, 13)
uop_179 = relay.cosh(uop_164.astype('float64')) # shape=(3, 13)
bop_180 = relay.floor_divide(bop_173.astype('float32'), relay.reshape(var_165.astype('float32'), relay.shape_of(bop_173))) # shape=(3, 13)
bop_183 = relay.floor_divide(bop_176.astype('float32'), relay.reshape(var_165.astype('float32'), relay.shape_of(bop_176))) # shape=(3, 13)
uop_184 = relay.cosh(uop_177.astype('float32')) # shape=(3, 13)
uop_186 = relay.cosh(uop_179.astype('float32')) # shape=(3, 13)
uop_187 = relay.acos(uop_184.astype('float64')) # shape=(3, 13)
uop_189 = relay.acos(uop_186.astype('float64')) # shape=(3, 13)
bop_190 = relay.floor_mod(uop_187.astype('float64'), relay.reshape(bop_180.astype('float64'), relay.shape_of(uop_187))) # shape=(3, 13)
bop_193 = relay.floor_mod(uop_189.astype('float64'), relay.reshape(bop_183.astype('float64'), relay.shape_of(uop_189))) # shape=(3, 13)
bop_194 = relay.divide(bop_190.astype('float32'), relay.reshape(bop_173.astype('float32'), relay.shape_of(bop_190))) # shape=(3, 13)
bop_197 = relay.divide(bop_193.astype('float32'), relay.reshape(bop_176.astype('float32'), relay.shape_of(bop_193))) # shape=(3, 13)
output = relay.Tuple([bop_166,bop_194,])
output2 = relay.Tuple([bop_169,bop_197,])
func_198 = relay.Function([var_165,], output)
mod['func_198'] = func_198
mod = relay.transform.InferType()(mod)
var_199 = relay.var("var_199", dtype = "float32", shape = (3, 13))#candidate|199|(3, 13)|var|float32
output = func_198(var_199)
func_200 = relay.Function([var_199], output)
mutated_mod['func_200'] = func_200
mutated_mod = relay.transform.InferType()(mutated_mod)
var_202 = relay.var("var_202", dtype = "float64", shape = (2, 14, 1))#candidate|202|(2, 14, 1)|var|float64
uop_203 = relay.log10(var_202.astype('float64')) # shape=(2, 14, 1)
uop_205 = relay.atan(var_202.astype('float64')) # shape=(2, 14, 1)
var_207 = relay.var("var_207", dtype = "float64", shape = (2, 14, 12))#candidate|207|(2, 14, 12)|var|float64
bop_208 = relay.multiply(uop_203.astype('float64'), var_207.astype('float64')) # shape=(2, 14, 12)
bop_211 = relay.subtract(var_207.astype('uint32'), uop_203.astype('uint32')) # shape=(2, 14, 12)
var_214 = relay.var("var_214", dtype = "float64", shape = (2, 14, 4))#candidate|214|(2, 14, 4)|var|float64
bop_215 = relay.right_shift(uop_203.astype('uint8'), var_214.astype('uint8')) # shape=(2, 14, 4)
bop_218 = relay.minimum(bop_211.astype('float32'), uop_203.astype('float32')) # shape=(2, 14, 12)
func_32_call = mod.get_global_var('func_32')
func_35_call = mutated_mod.get_global_var('func_35')
var_222 = relay.var("var_222", dtype = "float32", shape = (88,))#candidate|222|(88,)|var|float32
call_221 = relay.TupleGetItem(func_32_call(relay.reshape(var_222.astype('float32'), [11, 8])), 0)
call_223 = relay.TupleGetItem(func_35_call(relay.reshape(var_222.astype('float32'), [11, 8])), 0)
uop_224 = relay.acosh(var_207.astype('float64')) # shape=(2, 14, 12)
uop_226 = relay.log10(call_221.astype('float32')) # shape=(11, 8)
uop_228 = relay.log10(call_223.astype('float32')) # shape=(11, 8)
uop_229 = relay.sin(bop_211.astype('float64')) # shape=(2, 14, 12)
output = relay.Tuple([uop_205,bop_208,bop_215,bop_218,var_222,uop_224,uop_226,uop_229,])
output2 = relay.Tuple([uop_205,bop_208,bop_215,bop_218,var_222,uop_224,uop_228,uop_229,])
func_231 = relay.Function([var_202,var_207,var_214,var_222,], output)
mod['func_231'] = func_231
mod = relay.transform.InferType()(mod)
mutated_mod['func_231'] = func_231
mutated_mod = relay.transform.InferType()(mutated_mod)
func_231_call = mutated_mod.get_global_var('func_231')
var_233 = relay.var("var_233", dtype = "float64", shape = (2, 14, 1))#candidate|233|(2, 14, 1)|var|float64
var_234 = relay.var("var_234", dtype = "float64", shape = (2, 14, 12))#candidate|234|(2, 14, 12)|var|float64
var_235 = relay.var("var_235", dtype = "float64", shape = (2, 14, 4))#candidate|235|(2, 14, 4)|var|float64
var_236 = relay.var("var_236", dtype = "float32", shape = (88,))#candidate|236|(88,)|var|float32
call_232 = func_231_call(var_233,var_234,var_235,var_236,)
output = call_232
func_237 = relay.Function([var_233,var_234,var_235,var_236,], output)
mutated_mod['func_237'] = func_237
mutated_mod = relay.transform.InferType()(mutated_mod)
const_239 = relay.const([[[10,8,4,-8,-5,6,4,9],[-3,7,-8,-7,-3,-2,7,-4],[5,-9,-1,-7,5,-4,-7,-10]],[[-8,2,-7,10,6,-2,1,1],[9,-4,6,-9,-7,9,-8,2],[-7,9,-7,-6,3,5,-4,-2]],[[6,-3,9,5,-7,-8,5,-10],[-8,8,1,8,10,10,10,6],[9,-2,1,4,4,-2,6,1]],[[2,9,3,-7,-1,-8,-2,6],[-4,-2,6,5,-10,8,1,-9],[-1,6,6,-9,-4,-5,-9,-2]],[[1,-10,-1,-8,-3,8,10,-9],[-8,6,-2,-10,-2,-5,-9,-6],[2,-9,4,-4,8,3,1,-10]],[[10,-2,1,-1,8,5,-4,8],[-8,8,6,1,6,-1,-7,-8],[9,1,4,4,-9,-9,-10,10]],[[-4,2,-10,4,-6,-5,-8,-1],[-2,6,4,6,-8,8,-2,8],[7,-7,-10,5,10,10,-2,4]],[[1,8,9,-9,-10,5,-5,9],[-10,1,9,-7,-5,-6,5,-8],[9,2,-3,3,9,-7,-8,6]],[[-5,9,2,-5,-10,-1,1,1],[-9,-8,-5,-8,-8,9,-1,5],[4,2,-9,-3,7,5,-7,-8]]], dtype = "uint16")#candidate|239|(9, 3, 8)|const|uint16
var_240 = relay.var("var_240", dtype = "uint16", shape = (9, 3, 8))#candidate|240|(9, 3, 8)|var|uint16
bop_241 = relay.minimum(const_239.astype('uint16'), relay.reshape(var_240.astype('uint16'), relay.shape_of(const_239))) # shape=(9, 3, 8)
uop_244 = relay.asinh(var_240.astype('float32')) # shape=(9, 3, 8)
bop_246 = relay.logical_or(uop_244.astype('bool'), relay.reshape(var_240.astype('bool'), relay.shape_of(uop_244))) # shape=(9, 3, 8)
uop_249 = relay.cos(uop_244.astype('float32')) # shape=(9, 3, 8)
uop_251 = relay.exp(uop_249.astype('float64')) # shape=(9, 3, 8)
var_253 = relay.var("var_253", dtype = "float64", shape = (9, 3, 8))#candidate|253|(9, 3, 8)|var|float64
bop_254 = relay.less_equal(uop_251.astype('bool'), relay.reshape(var_253.astype('bool'), relay.shape_of(uop_251))) # shape=(9, 3, 8)
bop_257 = relay.greater(bop_254.astype('bool'), relay.reshape(const_239.astype('bool'), relay.shape_of(bop_254))) # shape=(9, 3, 8)
bop_260 = relay.bitwise_xor(uop_251.astype('int64'), relay.reshape(bop_241.astype('int64'), relay.shape_of(uop_251))) # shape=(9, 3, 8)
uop_263 = relay.atan(uop_249.astype('float32')) # shape=(9, 3, 8)
uop_265 = relay.log10(uop_249.astype('float64')) # shape=(9, 3, 8)
var_267 = relay.var("var_267", dtype = "float64", shape = (9, 3, 8))#candidate|267|(9, 3, 8)|var|float64
bop_268 = relay.floor_mod(uop_265.astype('float32'), relay.reshape(var_267.astype('float32'), relay.shape_of(uop_265))) # shape=(9, 3, 8)
var_271 = relay.var("var_271", dtype = "float32", shape = (9, 3, 8))#candidate|271|(9, 3, 8)|var|float32
bop_272 = relay.add(uop_249.astype('int64'), relay.reshape(var_271.astype('int64'), relay.shape_of(uop_249))) # shape=(9, 3, 8)
uop_275 = relay.asinh(uop_244.astype('float32')) # shape=(9, 3, 8)
uop_277 = relay.sinh(bop_254.astype('float64')) # shape=(9, 3, 8)
bop_279 = relay.power(bop_268.astype('float64'), relay.reshape(var_267.astype('float64'), relay.shape_of(bop_268))) # shape=(9, 3, 8)
bop_282 = relay.maximum(bop_272.astype('int16'), relay.reshape(const_239.astype('int16'), relay.shape_of(bop_272))) # shape=(9, 3, 8)
uop_285 = relay.log(uop_277.astype('float64')) # shape=(9, 3, 8)
bop_287 = relay.floor_divide(uop_285.astype('float32'), relay.reshape(uop_263.astype('float32'), relay.shape_of(uop_285))) # shape=(9, 3, 8)
var_290 = relay.var("var_290", dtype = "float64", shape = (9, 3, 8))#candidate|290|(9, 3, 8)|var|float64
bop_291 = relay.divide(uop_277.astype('float64'), relay.reshape(var_290.astype('float64'), relay.shape_of(uop_277))) # shape=(9, 3, 8)
uop_294 = relay.erf(bop_287.astype('float64')) # shape=(9, 3, 8)
output = relay.Tuple([bop_246,bop_257,bop_260,uop_275,bop_279,bop_282,bop_291,uop_294,])
output2 = relay.Tuple([bop_246,bop_257,bop_260,uop_275,bop_279,bop_282,bop_291,uop_294,])
func_296 = relay.Function([var_240,var_253,var_267,var_271,var_290,], output)
mod['func_296'] = func_296
mod = relay.transform.InferType()(mod)
var_297 = relay.var("var_297", dtype = "uint16", shape = (9, 3, 8))#candidate|297|(9, 3, 8)|var|uint16
var_298 = relay.var("var_298", dtype = "float64", shape = (9, 3, 8))#candidate|298|(9, 3, 8)|var|float64
var_299 = relay.var("var_299", dtype = "float64", shape = (9, 3, 8))#candidate|299|(9, 3, 8)|var|float64
var_300 = relay.var("var_300", dtype = "float32", shape = (9, 3, 8))#candidate|300|(9, 3, 8)|var|float32
var_301 = relay.var("var_301", dtype = "float64", shape = (9, 3, 8))#candidate|301|(9, 3, 8)|var|float64
output = func_296(var_297,var_298,var_299,var_300,var_301,)
func_302 = relay.Function([var_297,var_298,var_299,var_300,var_301,], output)
mutated_mod['func_302'] = func_302
mutated_mod = relay.transform.InferType()(mutated_mod)
var_304 = relay.var("var_304", dtype = "float64", shape = (3, 3, 2))#candidate|304|(3, 3, 2)|var|float64
uop_305 = relay.log10(var_304.astype('float64')) # shape=(3, 3, 2)
bop_307 = relay.floor_mod(var_304.astype('float32'), relay.reshape(uop_305.astype('float32'), relay.shape_of(var_304))) # shape=(3, 3, 2)
uop_310 = relay.acosh(var_304.astype('float64')) # shape=(3, 3, 2)
uop_312 = relay.sinh(var_304.astype('float32')) # shape=(3, 3, 2)
bop_314 = relay.greater_equal(uop_310.astype('bool'), relay.reshape(uop_312.astype('bool'), relay.shape_of(uop_310))) # shape=(3, 3, 2)
uop_317 = relay.sin(uop_312.astype('float64')) # shape=(3, 3, 2)
uop_319 = relay.erf(uop_317.astype('float64')) # shape=(3, 3, 2)
bop_321 = relay.greater(uop_319.astype('bool'), relay.reshape(bop_307.astype('bool'), relay.shape_of(uop_319))) # shape=(3, 3, 2)
uop_324 = relay.sinh(bop_321.astype('float32')) # shape=(3, 3, 2)
uop_326 = relay.sin(bop_321.astype('float32')) # shape=(3, 3, 2)
uop_328 = relay.sin(uop_317.astype('float64')) # shape=(3, 3, 2)
uop_330 = relay.acos(bop_314.astype('float32')) # shape=(3, 3, 2)
uop_332 = relay.cosh(uop_326.astype('float32')) # shape=(3, 3, 2)
bop_334 = relay.bitwise_or(uop_332.astype('uint64'), relay.reshape(uop_310.astype('uint64'), relay.shape_of(uop_332))) # shape=(3, 3, 2)
uop_337 = relay.acosh(uop_328.astype('float32')) # shape=(3, 3, 2)
func_231_call = mod.get_global_var('func_231')
func_237_call = mutated_mod.get_global_var('func_237')
const_340 = relay.const([-5.430740,6.469471,4.574849,-4.876388,8.846181,0.604447,-5.656637,-6.906392,7.135535,2.490543,-0.620568,1.044480,1.860470,-9.294112,-0.462748,-0.320409,-2.209184,-3.487366,5.934682,-3.370521,5.547390,-7.623829,4.959841,0.708528,-4.507722,-0.475510,-5.938041,-3.040878], dtype = "float64")#candidate|340|(28,)|const|float64
var_341 = relay.var("var_341", dtype = "float64", shape = (336,))#candidate|341|(336,)|var|float64
var_342 = relay.var("var_342", dtype = "float64", shape = (4, 28))#candidate|342|(4, 28)|var|float64
const_343 = relay.const([-5.597416,7.222392,-1.639310,6.522501,7.824961,9.015417,-2.063733,7.476146,3.172386,-2.365987,-9.262402,-4.249461,1.636273,5.422217,-8.393902,-7.950064,1.466608,9.666791,-7.819755,2.860907,-0.919145,0.304877,1.164711,-8.984693,5.543245,8.837725,4.858463,-6.534694,7.463461,1.371944,-9.872766,-3.110783,8.415437,-6.287680,3.461132,1.497510,-5.860004,-4.961885,9.476019,-5.007839,9.311657,-6.968043,4.459139,1.972433,1.337154,-4.261629,-0.968137,7.712356,-5.993745,-9.831733,-5.577864,8.432685,-9.234188,-7.048897,-0.257470,-9.012861,-8.786139,3.499550,1.163022,-8.681741,6.065975,2.352077,-3.503478,-0.244433,-8.160833,-4.781939,-7.558363,6.070162,2.943012,6.798034,-1.004668,-0.822526,-2.270495,-8.528056,-1.277846,-1.673121,3.218370,-7.624443,0.986613,-9.567666,5.720665,-8.072530,-7.763437,-8.569117,2.703956,-5.462378,-0.346298,-5.918402], dtype = "float32")#candidate|343|(88,)|const|float32
call_339 = relay.TupleGetItem(func_231_call(relay.reshape(const_340.astype('float64'), [2, 14, 1]), relay.reshape(var_341.astype('float64'), [2, 14, 12]), relay.reshape(var_342.astype('float64'), [2, 14, 4]), relay.reshape(const_343.astype('float32'), [88,]), ), 6)
call_344 = relay.TupleGetItem(func_237_call(relay.reshape(const_340.astype('float64'), [2, 14, 1]), relay.reshape(var_341.astype('float64'), [2, 14, 12]), relay.reshape(var_342.astype('float64'), [2, 14, 4]), relay.reshape(const_343.astype('float32'), [88,]), ), 6)
bop_345 = relay.greater(bop_334.astype('bool'), relay.reshape(var_304.astype('bool'), relay.shape_of(bop_334))) # shape=(3, 3, 2)
uop_348 = relay.log10(bop_334.astype('float64')) # shape=(3, 3, 2)
bop_350 = relay.power(uop_348.astype('float32'), relay.reshape(uop_328.astype('float32'), relay.shape_of(uop_348))) # shape=(3, 3, 2)
bop_353 = relay.logical_xor(bop_350.astype('int16'), relay.reshape(var_304.astype('int16'), relay.shape_of(bop_350))) # shape=(3, 3, 2)
var_356 = relay.var("var_356", dtype = "float32", shape = (3, 3, 2))#candidate|356|(3, 3, 2)|var|float32
bop_357 = relay.mod(bop_350.astype('float64'), relay.reshape(var_356.astype('float64'), relay.shape_of(bop_350))) # shape=(3, 3, 2)
var_360 = relay.var("var_360", dtype = "float32", shape = (3, 3, 2))#candidate|360|(3, 3, 2)|var|float32
bop_361 = relay.equal(bop_350.astype('bool'), relay.reshape(var_360.astype('bool'), relay.shape_of(bop_350))) # shape=(3, 3, 2)
uop_364 = relay.acos(uop_332.astype('float32')) # shape=(3, 3, 2)
var_366 = relay.var("var_366", dtype = "int16", shape = (3, 3, 2))#candidate|366|(3, 3, 2)|var|int16
bop_367 = relay.divide(bop_353.astype('float64'), relay.reshape(var_366.astype('float64'), relay.shape_of(bop_353))) # shape=(3, 3, 2)
uop_370 = relay.acos(uop_348.astype('float32')) # shape=(3, 3, 2)
output = relay.Tuple([uop_324,uop_330,uop_337,call_339,const_340,var_341,var_342,const_343,bop_345,bop_357,bop_361,uop_364,bop_367,uop_370,])
output2 = relay.Tuple([uop_324,uop_330,uop_337,call_344,const_340,var_341,var_342,const_343,bop_345,bop_357,bop_361,uop_364,bop_367,uop_370,])
F = relay.Function([var_304,var_341,var_342,var_356,var_360,var_366,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_304,var_341,var_342,var_356,var_360,var_366,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_304= np.array([[[4.010148,6.722567],[9.611341,-4.572070],[-9.141325,7.695605]],[[-9.743147,-1.980619],[6.160359,9.011706],[8.001341,-2.272316]],[[-2.357068,-2.164599],[9.072306,8.402979],[0.121905,4.757673]]], dtype='float64')
module1.set_input('var_304', input_304)
input_341= np.array([3.183798,-8.466056,-0.734762,2.493090,2.898140,-2.034812,-8.806894,-9.389156,2.448652,1.814338,-4.473335,3.390966,-6.160543,2.201312,3.855534,-9.414427,-4.889714,-5.681401,-6.260405,5.040552,1.584919,2.702601,4.630884,-1.098238,-0.548616,2.607817,8.392960,-7.280389,4.281459,-3.478875,-2.652178,1.205752,0.486236,-5.569576,-8.079294,6.222035,1.385464,8.158708,-0.475134,8.064991,2.005806,-1.301400,6.262090,-8.591042,-4.863029,0.607862,6.467996,4.599867,-0.842874,-8.123016,-2.248766,-7.498963,-1.830934,-7.522800,6.611516,0.926646,-7.427941,-3.452959,-5.046612,-8.376650,0.680491,-7.794974,1.901296,7.709681,0.952409,-6.036772,5.198713,2.089733,-4.247862,4.649380,8.581592,-3.487712,-6.673837,3.561212,7.996155,6.665878,5.190904,5.777110,3.283889,-4.184467,-8.569356,-6.105858,9.229471,-7.318122,-7.810844,-8.582211,-7.020587,7.719665,1.877462,-9.942667,1.878946,5.645455,6.438811,2.309945,4.563518,0.299738,-0.646731,8.205730,1.001721,7.845778,1.948373,4.925089,-8.558954,-8.355867,9.531145,-6.459083,-6.334526,8.715458,-7.266933,4.898655,-4.512149,4.358820,-9.567363,-3.259232,-1.577516,3.210630,6.539131,-9.671269,-8.753933,7.137723,9.117944,-6.062499,3.450667,8.302831,-3.650060,6.414206,2.561855,4.787271,-0.768393,5.316002,6.306761,-4.236193,3.619303,-8.508127,-9.121231,2.835826,0.800030,1.500490,9.246729,-6.427606,6.529058,-8.653713,-4.805694,7.718426,3.233679,-7.734690,1.357608,-7.143962,4.405710,-5.244319,-8.579862,6.489094,5.738463,6.143260,2.007153,-6.871167,2.292960,4.998414,-1.841095,-3.467611,1.511056,-9.785723,-8.510932,8.311285,2.812830,8.987642,9.662335,9.404068,6.601228,9.535632,-5.022993,-2.440702,-5.888412,-4.691684,-5.369985,-3.278685,9.468658,-3.169174,3.000522,3.353078,-9.704713,7.434349,0.134473,-3.125354,2.552016,2.996373,-3.871927,0.691785,4.065179,6.660256,5.920043,4.677392,8.101672,-5.644905,4.215938,0.902053,-2.669227,4.826940,-2.262468,-6.702177,2.971647,8.307460,9.295952,-1.316069,-8.938166,-0.923719,2.397651,-6.913617,-7.839073,-5.363515,-4.052968,9.234467,-0.029791,-2.802333,-6.670990,-4.248545,-8.491937,8.283640,-7.769243,-0.931652,-9.735878,-3.857107,-8.046567,-9.792233,0.660862,-6.178706,-2.163889,-7.895427,-1.010841,3.308023,-6.230573,-2.155984,-7.309300,-6.134250,1.578345,3.084622,-4.378319,-6.232104,2.433585,6.545531,4.770828,-5.615727,7.477474,-9.424379,-3.001814,-2.459925,7.391947,5.621182,9.749025,-2.080978,7.596372,-4.969021,-5.626538,-0.740075,6.706675,-8.946436,-8.094458,-2.577955,-8.933240,5.737859,7.859220,2.177095,4.342725,-6.988557,-6.641813,3.385710,-0.415331,4.002471,-7.697359,-8.675552,0.795365,-0.655324,-6.210191,8.614463,0.626658,7.176974,5.432973,0.298693,9.816673,5.508623,4.871552,7.890684,-4.545485,-9.562883,0.453223,-9.566101,0.969728,-1.533850,1.015740,-4.881674,-8.453916,5.513779,-8.773737,-0.736992,-3.397931,-6.809234,7.119162,-6.483284,-4.200468,-4.979960,0.629452,6.440690,-8.367666,-7.436555,1.320935,-8.274778,-8.459721,3.178010,4.003738,4.784931,8.564550,7.128852,4.522898,-9.303949,-9.979718,0.587280,2.075025,-3.255231,-5.887002,-8.894059,-8.521300,-2.871237,-8.974033,5.520517,9.054106,-4.359289,-9.924078,9.174465,5.394220,-0.044392,1.593949,9.201998,-5.377384,-8.138955,7.487113,-7.948855], dtype='float64')
module1.set_input('var_341', input_341)
input_342= np.array([[2.359312,-6.249031,9.181643,2.482640,-6.905027,2.673225,0.469825,1.981712,4.758446,-3.522922,8.635385,8.469116,-6.016419,8.708315,-2.950000,0.848630,-6.745112,-1.866153,9.654689,-7.607526,3.041997,2.956700,8.460013,8.114434,-0.364842,5.088727,5.297168,9.578864],[-4.534948,4.439082,-2.358081,-3.458197,9.283242,-5.352901,4.383984,-9.261365,2.206805,8.813240,-1.395638,1.818539,9.446832,5.678412,5.113900,-8.559761,0.726588,8.011500,-7.570985,-8.402217,-5.309564,-8.609009,1.838564,-0.339895,-3.973278,3.836946,-3.446066,3.290389],[9.549925,-1.529711,8.743335,-2.181796,3.707147,4.464407,-5.557221,6.984055,-8.892734,-2.546110,-8.994298,-2.332748,-6.420382,-8.451364,-8.973599,-6.635877,-1.223864,5.464260,2.127858,-0.231050,2.756313,-2.651941,2.580611,-1.301270,-2.717293,1.545479,2.565094,2.502982],[-7.076442,-4.477957,-1.123648,-7.899855,4.685073,-9.346658,-9.730194,5.501410,-0.605046,2.283096,3.599848,-2.601613,-4.337025,0.837023,1.309392,0.226124,-3.230017,5.714620,2.342648,2.029898,9.776576,4.146746,-5.195739,2.110271,5.530552,-0.343690,-7.928733,-6.862030]], dtype='float64')
module1.set_input('var_342', input_342)
input_356= np.array([[[-4.270799,-2.981597],[-7.929488,6.957447],[1.525299,1.479687]],[[9.863116,6.384331],[9.505668,-8.290757],[-1.644769,-8.388374]],[[-0.414331,-9.026381],[4.131174,5.075144],[-5.230660,-5.657075]]], dtype='float32')
module1.set_input('var_356', input_356)
input_360= np.array([[[5.533002,2.780480],[-8.408470,1.524179],[2.153402,-7.619904]],[[-8.787817,-0.098727],[-3.905230,-7.469728],[1.176163,6.701457]],[[7.125593,8.786247],[-0.659247,-8.255781],[4.592474,-2.191072]]], dtype='float32')
module1.set_input('var_360', input_360)
input_366= np.array([[[5,8],[2,6],[1,-1]],[[-2,5],[8,4],[5,10]],[[-1,-5],[-8,-1],[-6,-6]]], dtype='int16')
module1.set_input('var_366', input_366)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_304, input_341, input_342, input_356, input_360, input_366, )
res3 = intrp3.evaluate()(input_304, input_341, input_342, input_356, input_360, input_366, )
res4 = intrp4.evaluate()(input_304, input_341, input_342, input_356, input_360, input_366, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
module5.set_input('var_304', input_304)
module5.set_input('var_341', input_341)
module5.set_input('var_342', input_342)
module5.set_input('var_356', input_356)
module5.set_input('var_360', input_360)
module5.set_input('var_366', input_366)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_304, input_341, input_342, input_356, input_360, input_366, )
res7 = intrp7.evaluate()(input_304, input_341, input_342, input_356, input_360, input_366, )
res8 = intrp8.evaluate()(input_304, input_341, input_342, input_356, input_360, input_366, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
module9.set_input('var_304', input_304)
module9.set_input('var_341', input_341)
module9.set_input('var_342', input_342)
module9.set_input('var_356', input_356)
module9.set_input('var_360', input_360)
module9.set_input('var_366', input_366)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_304, input_341, input_342, input_356, input_360, input_366, )
res11 = intrp11.evaluate()(input_304, input_341, input_342, input_356, input_360, input_366, )
res12 = intrp12.evaluate()(input_304, input_341, input_342, input_356, input_360, input_366, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
module13.set_input('var_304', input_304)
module13.set_input('var_341', input_341)
module13.set_input('var_342', input_342)
module13.set_input('var_356', input_356)
module13.set_input('var_360', input_360)
module13.set_input('var_366', input_366)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_304, input_341, input_342, input_356, input_360, input_366, )
res15 = intrp15.evaluate()(input_304, input_341, input_342, input_356, input_360, input_366, )
res16 = intrp16.evaluate()(input_304, input_341, input_342, input_356, input_360, input_366, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
module17.set_input('var_304', input_304)
module17.set_input('var_341', input_341)
module17.set_input('var_342', input_342)
module17.set_input('var_356', input_356)
module17.set_input('var_360', input_360)
module17.set_input('var_366', input_366)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_304, input_341, input_342, input_356, input_360, input_366, )
res19 = intrp19.evaluate()(input_304, input_341, input_342, input_356, input_360, input_366, )
res20 = intrp20.evaluate()(input_304, input_341, input_342, input_356, input_360, input_366, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
module21.set_input('var_304', input_304)
module21.set_input('var_341', input_341)
module21.set_input('var_342', input_342)
module21.set_input('var_356', input_356)
module21.set_input('var_360', input_360)
module21.set_input('var_366', input_366)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_304, input_341, input_342, input_356, input_360, input_366, )
res23 = intrp23.evaluate()(input_304, input_341, input_342, input_356, input_360, input_366, )
res24 = intrp24.evaluate()(input_304, input_341, input_342, input_356, input_360, input_366, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()

'''42: TVMFuncCall
41: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
40: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
39: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
38: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
37: tvm::transform::Pass::operator()(tvm::IRModule) const
36: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
35: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
30: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
29: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
28: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
27: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
26: _ZN3tvm5relay16MixedModeMutato
25: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
24: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
23: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
22: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
21: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
20: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
19: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
18: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
17: _ZN3tvm5relay16MixedModeMutato
16: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
15: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
14: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
13: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
12: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
11: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
10: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
9: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
8: tvm::transform::Pass::operator()(tvm::IRModule) const
7: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
6: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::Pass::operator()(tvm::IRModule) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
0: tvm::DiagnosticContext::Render()

'''