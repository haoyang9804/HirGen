import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (14, 7))#candidate|0|(14, 7)|var|float32
uop_1 = relay.log2(var_0.astype('float32')) # shape=(14, 7)
uop_3 = relay.asinh(uop_1.astype('float32')) # shape=(14, 7)
uop_5 = relay.asin(uop_1.astype('float64')) # shape=(14, 7)
bop_7 = relay.subtract(uop_1.astype('int64'), relay.reshape(uop_3.astype('int64'), relay.shape_of(uop_1))) # shape=(14, 7)
bop_10 = relay.not_equal(uop_1.astype('bool'), relay.reshape(uop_5.astype('bool'), relay.shape_of(uop_1))) # shape=(14, 7)
uop_13 = relay.asinh(var_0.astype('float64')) # shape=(14, 7)
uop_15 = relay.atan(uop_13.astype('float32')) # shape=(14, 7)
uop_17 = relay.acosh(bop_7.astype('float32')) # shape=(14, 7)
bop_19 = relay.power(var_0.astype('float32'), relay.reshape(uop_3.astype('float32'), relay.shape_of(var_0))) # shape=(14, 7)
bop_22 = relay.greater_equal(bop_19.astype('bool'), relay.reshape(uop_13.astype('bool'), relay.shape_of(bop_19))) # shape=(14, 7)
uop_25 = relay.asin(bop_7.astype('float64')) # shape=(14, 7)
bop_27 = relay.logical_or(var_0.astype('bool'), relay.reshape(uop_25.astype('bool'), relay.shape_of(var_0))) # shape=(14, 7)
bop_30 = relay.floor_divide(uop_5.astype('float32'), relay.reshape(uop_25.astype('float32'), relay.shape_of(uop_5))) # shape=(14, 7)
uop_33 = relay.cos(bop_27.astype('float64')) # shape=(14, 7)
uop_35 = relay.rsqrt(uop_17.astype('float64')) # shape=(14, 7)
uop_37 = relay.atan(uop_25.astype('float64')) # shape=(14, 7)
var_39 = relay.var("var_39", dtype = "float32", shape = (14, 7))#candidate|39|(14, 7)|var|float32
bop_40 = relay.power(bop_30.astype('float32'), relay.reshape(var_39.astype('float32'), relay.shape_of(bop_30))) # shape=(14, 7)
uop_43 = relay.asin(uop_33.astype('float32')) # shape=(14, 7)
uop_45 = relay.atanh(uop_43.astype('float32')) # shape=(14, 7)
bop_47 = relay.minimum(uop_45.astype('uint16'), relay.reshape(bop_19.astype('uint16'), relay.shape_of(uop_45))) # shape=(14, 7)
bop_50 = relay.power(bop_47.astype('float32'), relay.reshape(uop_35.astype('float32'), relay.shape_of(bop_47))) # shape=(14, 7)
bop_53 = relay.greater_equal(uop_37.astype('bool'), relay.reshape(bop_30.astype('bool'), relay.shape_of(uop_37))) # shape=(14, 7)
output = relay.Tuple([bop_10,uop_15,bop_22,bop_40,bop_50,bop_53,])
output2 = relay.Tuple([bop_10,uop_15,bop_22,bop_40,bop_50,bop_53,])
func_56 = relay.Function([var_0,var_39,], output)
mod['func_56'] = func_56
mod = relay.transform.InferType()(mod)
mutated_mod['func_56'] = func_56
mutated_mod = relay.transform.InferType()(mutated_mod)
func_56_call = mutated_mod.get_global_var('func_56')
var_58 = relay.var("var_58", dtype = "float32", shape = (14, 7))#candidate|58|(14, 7)|var|float32
var_59 = relay.var("var_59", dtype = "float32", shape = (14, 7))#candidate|59|(14, 7)|var|float32
call_57 = func_56_call(var_58,var_59,)
output = call_57
func_60 = relay.Function([var_58,var_59,], output)
mutated_mod['func_60'] = func_60
mutated_mod = relay.transform.InferType()(mutated_mod)
var_62 = relay.var("var_62", dtype = "float64", shape = (13, 4))#candidate|62|(13, 4)|var|float64
const_63 = relay.constdtype = "float64")#candidate|63|(13, 4)|const|float64
bop_64 = relay.floor_divide(var_62.astype('float64'), relay.reshape(const_63.astype('float64'), relay.shape_of(var_62))) # shape=(13, 4)
func_56_call = mod.get_global_var('func_56')
func_60_call = mutated_mod.get_global_var('func_60')
var_68 = relay.var("var_68", dtype = "float32", shape = (98,))#candidate|68|(98,)|var|float32
call_67 = relay.TupleGetItem(func_56_call(relay.reshape(var_68.astype('float32'), [14, 7]), relay.reshape(var_68.astype('float32'), [14, 7]), ), 2)
call_69 = relay.TupleGetItem(func_60_call(relay.reshape(var_68.astype('float32'), [14, 7]), relay.reshape(var_68.astype('float32'), [14, 7]), ), 2)
bop_70 = relay.equal(var_68.astype('bool'), relay.reshape(call_67.astype('bool'), relay.shape_of(var_68))) # shape=(98,)
bop_73 = relay.equal(var_68.astype('bool'), relay.reshape(call_69.astype('bool'), relay.shape_of(var_68))) # shape=(98,)
var_74 = relay.var("var_74", dtype = "bool", shape = (98,))#candidate|74|(98,)|var|bool
bop_75 = relay.right_shift(bop_70.astype('uint64'), relay.reshape(var_74.astype('uint64'), relay.shape_of(bop_70))) # shape=(98,)
bop_78 = relay.right_shift(bop_73.astype('uint64'), relay.reshape(var_74.astype('uint64'), relay.shape_of(bop_73))) # shape=(98,)
bop_79 = relay.logical_or(var_68.astype('bool'), relay.reshape(bop_75.astype('bool'), relay.shape_of(var_68))) # shape=(98,)
bop_82 = relay.logical_or(var_68.astype('bool'), relay.reshape(bop_78.astype('bool'), relay.shape_of(var_68))) # shape=(98,)
output = relay.Tuple([bop_64,bop_79,])
output2 = relay.Tuple([bop_64,bop_82,])
func_83 = relay.Function([var_62,var_68,var_74,], output)
mod['func_83'] = func_83
mod = relay.transform.InferType()(mod)
var_84 = relay.var("var_84", dtype = "float64", shape = (13, 4))#candidate|84|(13, 4)|var|float64
var_85 = relay.var("var_85", dtype = "float32", shape = (98,))#candidate|85|(98,)|var|float32
var_86 = relay.var("var_86", dtype = "bool", shape = (98,))#candidate|86|(98,)|var|bool
output = func_83(var_84,var_85,var_86,)
func_87 = relay.Function([var_84,var_85,var_86,], output)
mutated_mod['func_87'] = func_87
mutated_mod = relay.transform.InferType()(mutated_mod)
var_89 = relay.var("var_89", dtype = "int16", shape = ())#candidate|89|()|var|int16
var_90 = relay.var("var_90", dtype = "int16", shape = (13, 14, 12))#candidate|90|(13, 14, 12)|var|int16
bop_91 = relay.minimum(var_89.astype('int16'), var_90.astype('int16')) # shape=(13, 14, 12)
uop_94 = relay.sqrt(bop_91.astype('float64')) # shape=(13, 14, 12)
func_83_call = mod.get_global_var('func_83')
func_87_call = mutated_mod.get_global_var('func_87')
var_97 = relay.var("var_97", dtype = "float64", shape = (52,))#candidate|97|(52,)|var|float64
var_98 = relay.var("var_98", dtype = "float32", shape = (98,))#candidate|98|(98,)|var|float32
call_96 = relay.TupleGetItem(func_83_call(relay.reshape(var_97.astype('float64'), [13, 4]), relay.reshape(var_98.astype('float32'), [98,]), relay.reshape(var_98.astype('bool'), [98,]), ), 0)
call_99 = relay.TupleGetItem(func_87_call(relay.reshape(var_97.astype('float64'), [13, 4]), relay.reshape(var_98.astype('float32'), [98,]), relay.reshape(var_98.astype('bool'), [98,]), ), 0)
uop_100 = relay.atanh(bop_91.astype('float64')) # shape=(13, 14, 12)
uop_102 = relay.sin(var_89.astype('float32')) # shape=()
uop_104 = relay.cosh(uop_100.astype('float32')) # shape=(13, 14, 12)
func_83_call = mod.get_global_var('func_83')
func_87_call = mutated_mod.get_global_var('func_87')
call_106 = relay.TupleGetItem(func_83_call(relay.reshape(var_97.astype('float64'), [13, 4]), relay.reshape(var_98.astype('float32'), [98,]), relay.reshape(var_98.astype('bool'), [98,]), ), 1)
call_107 = relay.TupleGetItem(func_87_call(relay.reshape(var_97.astype('float64'), [13, 4]), relay.reshape(var_98.astype('float32'), [98,]), relay.reshape(var_98.astype('bool'), [98,]), ), 1)
uop_108 = relay.asinh(uop_104.astype('float64')) # shape=(13, 14, 12)
bop_110 = relay.floor_mod(uop_108.astype('float64'), var_89.astype('float64')) # shape=(13, 14, 12)
uop_113 = relay.sqrt(uop_104.astype('float64')) # shape=(13, 14, 12)
bop_115 = relay.logical_and(uop_104.astype('bool'), relay.reshape(uop_94.astype('bool'), relay.shape_of(uop_104))) # shape=(13, 14, 12)
bop_118 = relay.bitwise_or(uop_108.astype('uint64'), uop_102.astype('uint64')) # shape=(13, 14, 12)
uop_121 = relay.exp(bop_115.astype('float64')) # shape=(13, 14, 12)
uop_123 = relay.rsqrt(uop_104.astype('float32')) # shape=(13, 14, 12)
var_125 = relay.var("var_125", dtype = "float64", shape = (13, 14, 12))#candidate|125|(13, 14, 12)|var|float64
bop_126 = relay.add(uop_113.astype('int64'), relay.reshape(var_125.astype('int64'), relay.shape_of(uop_113))) # shape=(13, 14, 12)
output = relay.Tuple([call_96,var_97,var_98,call_106,bop_110,bop_118,uop_121,uop_123,bop_126,])
output2 = relay.Tuple([call_99,var_97,var_98,call_107,bop_110,bop_118,uop_121,uop_123,bop_126,])
func_129 = relay.Function([var_89,var_90,var_97,var_98,var_125,], output)
mod['func_129'] = func_129
mod = relay.transform.InferType()(mod)
mutated_mod['func_129'] = func_129
mutated_mod = relay.transform.InferType()(mutated_mod)
func_129_call = mutated_mod.get_global_var('func_129')
var_131 = relay.var("var_131", dtype = "int16", shape = ())#candidate|131|()|var|int16
var_132 = relay.var("var_132", dtype = "int16", shape = (13, 14, 12))#candidate|132|(13, 14, 12)|var|int16
var_133 = relay.var("var_133", dtype = "float64", shape = (52,))#candidate|133|(52,)|var|float64
var_134 = relay.var("var_134", dtype = "float32", shape = (98,))#candidate|134|(98,)|var|float32
var_135 = relay.var("var_135", dtype = "float64", shape = (13, 14, 12))#candidate|135|(13, 14, 12)|var|float64
call_130 = func_129_call(var_131,var_132,var_133,var_134,var_135,)
output = call_130
func_136 = relay.Function([var_131,var_132,var_133,var_134,var_135,], output)
mutated_mod['func_136'] = func_136
mutated_mod = relay.transform.InferType()(mutated_mod)
const_138 = relay.const([3.126314,-6.275336,-7.241084,-1.535119,4.220668,8.183165,3.484430,1.891913,5.832804,9.496888,1.011738,7.507623,2.767408], dtype = "float64")#candidate|138|(13,)|const|float64
var_139 = relay.var("var_139", dtype = "float64", shape = (13,))#candidate|139|(13,)|var|float64
bop_140 = relay.floor_divide(const_138.astype('float64'), relay.reshape(var_139.astype('float64'), relay.shape_of(const_138))) # shape=(13,)
uop_143 = relay.asinh(bop_140.astype('float64')) # shape=(13,)
uop_145 = relay.asinh(uop_143.astype('float64')) # shape=(13,)
uop_147 = relay.sqrt(uop_143.astype('float64')) # shape=(13,)
uop_149 = relay.atan(uop_147.astype('float64')) # shape=(13,)
uop_151 = relay.sinh(uop_147.astype('float32')) # shape=(13,)
uop_153 = relay.sin(uop_145.astype('float64')) # shape=(13,)
uop_155 = relay.asinh(uop_153.astype('float64')) # shape=(13,)
const_157 = relay.const([-8.228274,-6.602159,1.609417,-4.474014,-1.347710,-0.947281,-8.575282,-8.897967,-4.809126,6.045189,-6.963026,4.528624,-4.505165], dtype = "float64")#candidate|157|(13,)|const|float64
bop_158 = relay.floor_mod(uop_155.astype('float64'), relay.reshape(const_157.astype('float64'), relay.shape_of(uop_155))) # shape=(13,)
output = relay.Tuple([uop_149,uop_151,bop_158,])
output2 = relay.Tuple([uop_149,uop_151,bop_158,])
func_161 = relay.Function([var_139,], output)
mod['func_161'] = func_161
mod = relay.transform.InferType()(mod)
var_162 = relay.var("var_162", dtype = "float64", shape = (13,))#candidate|162|(13,)|var|float64
output = func_161(var_162)
func_163 = relay.Function([var_162], output)
mutated_mod['func_163'] = func_163
mutated_mod = relay.transform.InferType()(mutated_mod)
var_165 = relay.var("var_165", dtype = "float32", shape = (1, 8, 12))#candidate|165|(1, 8, 12)|var|float32
var_166 = relay.var("var_166", dtype = "float32", shape = (14, 8, 12))#candidate|166|(14, 8, 12)|var|float32
bop_167 = relay.floor_divide(var_165.astype('float32'), var_166.astype('float32')) # shape=(14, 8, 12)
uop_170 = relay.cos(var_166.astype('float64')) # shape=(14, 8, 12)
func_56_call = mod.get_global_var('func_56')
func_60_call = mutated_mod.get_global_var('func_60')
const_173 = relay.const([3.319329,6.863155,2.056499,-0.399593,-2.173431,-9.267743,-0.674418,3.591897,0.667536,0.585286,-9.499903,5.877779,-8.542864,-8.682275,8.359961,1.874270,5.099875,-2.557238,5.426616,9.439225,-4.318675,6.412465,4.587293,-2.047835,7.305873,-1.911713,3.105584,9.013103,-9.137049,8.234392,-2.598461,-6.272859,6.758784,0.728327,-4.903861,0.548993,-7.391950,1.848485,1.576776,-0.133973,7.468348,-7.595861,-3.686774,0.390381,8.819975,-4.696746,4.006765,-6.821719,4.928599,9.575316,-4.758663,-1.756640,5.148187,-6.468934,-9.932894,-8.708058,3.277067,-1.746521,-6.627772,-7.350588,-9.204489,-5.178952,-1.058638,4.311847,-1.696744,8.030464,1.064783,0.984746,9.339499,8.843866,-5.149132,9.870365,-4.243822,-4.329743,4.177785,3.070006,2.284499,-8.433521,-5.354205,-2.147378,-2.657653,9.041188,4.340989,1.575982,-0.926022,-8.414364,-4.550593,-3.279820,0.959008,5.235780,2.039269,5.285297,-5.589544,-5.536992,2.635263,8.855534,-9.625503,8.159288], dtype = "float32")#candidate|173|(98,)|const|float32
call_172 = relay.TupleGetItem(func_56_call(relay.reshape(const_173.astype('float32'), [14, 7]), relay.reshape(const_173.astype('float32'), [14, 7]), ), 4)
call_174 = relay.TupleGetItem(func_60_call(relay.reshape(const_173.astype('float32'), [14, 7]), relay.reshape(const_173.astype('float32'), [14, 7]), ), 4)
func_129_call = mod.get_global_var('func_129')
func_136_call = mutated_mod.get_global_var('func_136')
const_176 = relay.const(-4, dtype = "int16")#candidate|176|()|const|int16
const_177 = relay.const([-2,3,8,-10,8,3,10,-2,9,10,-7,-10,-10,8,9,-9,10,5,-4,8,-6,6,5,2,5,3,-10,3,-3,8,-10,-5,8,2,-2,6,1,4,9,1,-8,6,-9,-2,3,4,-6,6,6,8,8,8,7,5,-7,-9,-1,7,-7,-10,-6,4,3,5,-9,9,-6,-7,10,8,10,-4,-6,1,-7,-4,9,-4,9,2,-2,-7,10,3,8,7,3,-1,2,2,6,4,-3,6,8,10,-10,10,1,-8,-7,8,-6,-8,-10,-8,4,2,10,9,-7,-8,6,-7,-3,7,-9,7,4,4,6,2,5,7,-1,5,-7,-7,1,9,10,-4,-1,-6,6,8,-3,-4,-4,6,-9,-5,4,-9,-7,-10,6,-6,5,-1,10,-5,-8,3,-1,-7,-10,7,6,8,8,-8,2,-1,-4,9,2,10,4,3,-4,6,-5,-7,-10,-2,-5,-3,4,3,6,3,8,9,-7,-7,-3,5,5,8,-1,6,-3,-2,-4,-7,8,10,5,10,-10,-5,8,-2,3,10,2,-9,-4,-4,-7,9,-4,3,-6,3,8,10,9,-10,-2,8,4,-1,-8,7,7,-3,2,-10,1,-6,-1,-6,8,5,-6,-6,-8,-9,1,4,-9,-8,-4,-1,4,-3,-4,7,5,-4,3,-1,6,-1,-7,6,1,9,4,2,5,-3,6,-1,-2,-2,-6,7,-5,10,3,-8,-1,4,6,1,1,10,-4,8,5,-10,-5,4,7,-3,-9,-9,-9,6,-8,7,-3,-7,-8,-4,7,6,2,3,4,-4,-1,5,-7,-3,8,-4,-7,-7,-6,-9,-6,4,-5,-9,-6,-3,-7,5,7,-9,-10,-5,4,3,4,4,7,8,-6,10,-2,-9,9,-3,3,-3,-4,1,2,-7,-6,-4,8,4,1,-8,-6,1,10,-4,-3,8,-7,5,-3,-6,5,3,-4,-9,-8,7,5,-1,-10,-8,4,-2,6,-2,2,-9,10,2,8,8,-10,2,-2,10,10,7,-5,6,-6,2,6,5,-5,9,-8,-9,-3,2,6,9,2,-9,-3,-8,-1,7,4,-3,-6,-2,9,-3,-2,10,-8,3,5,7,-5,8,-7,-5,-4,-2,1,7,5,4,4,7,-3,2,-2,-5,-5,-5,8,5,-8,-4,-1,9,-10,5,-9,6,1,-9,6,-10,-6,5,-4,-8,7,1,3,-4,-3,7,-9,3,10,5,-7,-6,1,-9,-2,-9,-8,-7,-10,-4,-7,-6,-3,-10,-10,-8,1,10,-7,-9,5,-8,-10,-6,5,5,10,-2,-2,-7,-5,-1,-10,8,-1,8,7,-1,-2,-7,-6,3,-8,10,-5,-4,1,-9,-8,2,-6,-7,8,-1,-4,1,5,-5,-7,2,-3,4,-4,7,-2,5,-1,2,-10,-4,-3,2,9,8,-4,9,1,-1,8,8,1,9,-6,1,-6,-10,-10,-5,-2,6,-7,3,-10,-2,-6,-8,6,9,10,9,7,-5,2,7,-6,9,-7,1,1,-4,6,4,-9,7,4,-5,3,-7,1,8,4,9,2,-9,-5,-1,-6,4,-9,7,5,4,4,-5,-3,4,-2,1,5,8,6,9,-4,9,6,-7,-2,10,-2,2,-10,5,9,6,7,-4,-1,4,7,-1,1,-3,8,-10,-8,6,-9,10,6,-4,7,-5,-10,-4,-2,10,-2,6,-6,-2,9,4,10,7,-7,-10,-8,5,-4,5,-5,-7,7,8,-10,-10,10,-4,-8,-8,-4,1,3,-10,-6,-1,9,9,3,-9,-10,9,-3,-10,-6,7,-7,1,-6,-5,5,3,-5,-10,-10,9,-10,-9,3,-5,10,-8,2,-4,-10,1,6,9,-6,10,-10,7,-9,-4,-8,1,2,-4,3,-3,9,-10,7,6,10,1,-7,1,-7,-10,5,4,5,2,-5,10,-6,-9,-10,6,3,10,-6,-7,6,-9,-9,8,10,-9,-2,9,9,-3,-2,-9,-8,4,9,-8,-7,4,9,-9,2,6,-8,6,-2,6,-9,1,-3,-1,6,-7,-6,8,-5,-8,6,-2,10,2,6,8,-3,3,3,10,3,2,-2,-9,-9,3,3,-10,3,5,-9,5,1,10,1,-1,9,8,-4,-8,5,8,9,9,9,-5,6,-10,9,-10,2,-7,-7,-4,-1,3,8,-4,-1,-2,6,9,-7,-8,1,-7,1,7,10,-8,6,8,5,2,4,6,-1,-1,-4,-5,1,9,7,-10,9,-7,-1,10,5,-2,8,-9,3,-9,1,3,5,3,-7,-6,-1,1,6,-8,5,-1,7,4,-10,-6,-7,2,-10,4,8,-6,-3,-2,10,1,1,-2,2,10,-9,2,7,5,-8,9,-9,6,-3,2,-2,3,-6,4,9,7,-4,1,4,-1,5,10,-6,-7,-9,-4,-1,-2,10,-5,2,6,-3,-9,4,-9,1,-4,-8,-6,1,5,5,-9,5,-5,-5,5,9,-5,4,-4,3,-2,1,7,-5,4,-2,-8,-8,-6,-3,3,4,5,-1,-3,-8,-7,-2,-1,-7,-1,-9,-7,-10,-9,5,7,9,-1,10,7,10,7,8,-9,2,-5,-8,7,7,-3,10,-6,-1,-1,1,-10,-2,3,2,7,1,-4,-6,9,9,-10,1,7,-2,-6,8,4,-1,-10,-8,-9,-8,-9,6,-10,1,3,5,-5,-10,-10,5,8,2,2,-6,-2,-6,1,-9,8,-2,-2,-2,-3,-10,-3,-8,4,1,-3,-7,-3,6,-6,6,6,6,2,7,-2,-10,-3,-6,-10,2,-3,-6,1,-10,-6,-10,4,-2,-4,4,7,1,-2,-8,-5,4,7,-6,-2,5,5,-4,-1,-7,-5,-3,3,-6,-2,-7,-3,6,-1,-8,1,4,-9,6,5,9,2,-4,-5,-10,-5,5,-8,-9,5,5,-1,3,7,3,1,-4,1,10,10,-6,-8,2,4,-6,-9,9,10,-1,1,1,-4,-7,-2,-5,-8,7,4,4,9,8,-1,-7,9,7,3,-4,-2,-4,-9,-9,1,-6,5,2,-10,-3,9,9,1,-10,4,1,-6,-2,-5,-5,-9,9,9,-10,-4,-9,5,1,-3,-10,4,7,-6,4,-10,-6,-7,2,8,6,-5,5,2,7,6,6,-7,-9,-2,4,1,10,7,-6,6,-7,9,-2,-7,-10,-6,-4,-9,-8,5,2,4,-3,-6,7,5,2,7,6,-4,-8,1,5,-4,-1,-7,-2,5,-3,8,-2,8,-6,-9,-1,-7,5,-3,-9,5,4,3,4,-5,10,1,-6,-7,3,5,10,5,1,8,-2,2,-5,-4,-4,8,-2,-7,7,1,3,-4,-7,10,6,9,-1,6,5,-6,10,-4,-2,-1,8,-9,-7,4,3,-5,2,-8,5,10,5,1,-2,10,-8,3,4,-7,-6,-8,-4,7,-6,-10,9,1,8,1,-6,3,3,-10,-9,-1,-7,-3,1,1,-7,6,-1,-9,-10,-8,-3,-2,9,5,-10,-3,7,-10,-8,-6,1,10,-1,-2,1,-9,1,1,5,7,6,10,8,10,10,10,7,3,10,1,5,6,-1,-7,-4,-2,4,4,4,9,-9,5,-10,-8,-4,-2,8,7,4,8,8,-10,1,-6,7,9,6,-4,4,9,-10,9,6,9,-9,9,6,2,1,-4,-5,6,9,-2,-1,-3,9,-1,9,4,-9,-5,-2,4,-7,4,3,7,-10,-5,7,2,-1,2,4,-7,-1,-8,1,6,2,2,-8,9,8,-8,3,3,-4,-1,-3,1,-1,4,-3,-2,2,2,4,9,5,-7,9,2,4,-4,-4,-10,-4,-8,7,-3,5,1,7,9,7,-2,-7,2,10,10,-10,8,5,2,8,-2,-3,2,1,3,1,-4,2,2,9,3,-2,-3,10,10,-5,3,-3,9,8,2,9,-10,10,-2,-3,10,7,2,-1,7,5,5,5,-4,7,-4,1,-9,5,-2,6,4,5,3,10,-3,8,-7,-1,-9,6,-7,9,-8,7,3,-1,-7,4,-4,9,-3,5,-3,-8,5,6,-1,-7,-9,10,-8,-8,-7,6,-9,9,4,-2,8,-9,-4,-4,10,-5,-6,9,-5,-8,1,4,-8,4,4,-9,5,-7,3,-5,5,-1,4,6,1,2,7,-4,8,1,3,6,9,7,7,6,4,2,9,9,-1,2,6,6,-3,6,6,3,5,7,4,3,-1,5,-2,-8,5,4,-5,5,-5,3,5,9,6,2,-9,5,2,10,4,9,-9,1,3,-1,1,4,-7,-5,-8,10,-4,9,-7,-1,8,-10,-5,10,-9,8,4,5,4,-4,-9,-2,-1,10,-2,7,-1,9,-10,-3,4,10,-5,9,6,-2,10,-9,-4,7,10,-8,-2,8,-7,-2,4,9,8,-7,-3,-1,-2,2,-1,-2,6,5,-6,-2,4,6,-8,9,4,10,4,8,4,-4,2,8,-5,-6,6,7,-3,-9,-9,5,-4,-9,-8,6,9,-7,-5,9,-7,-2,2,-2,2,6,-10,3,7,4,-8,-7,10,8,-8,5,1,-10,-5,-9,-6,10,-7,-1,6,-10,-6,1,-3,-9,-7,8,-2,-4,1,-5,10,4,-10,-2,8,1,10,-10,-3,4,5,-2,10,-3,-1,9,-8,9,-8,2,-4,10,7,7,-10,3,-2,-2,1,7,-6,3,1,-1,2,5,-8,-2,-4,6,9,-9,2,-7,-7,-3,3,8,-8,1,2,-8,10,5,8,-1,-1,-9,-4,-6,-1,5,-6,7,3,6,5,-8,-5,-2,6,-1,4,10,6,-8,-6,2,7,6,7,-7,-5,9,8,4,-5,-9,-4,-6,6,9,8,-1,-1,6,8,-2,6,4,3,8,-2,-6,7,-9,7,-2,-1,1,-2,2,10,-5,-5,10,9,-7,-6,-1,6,-5,-10,-7,2,3,-5,-5,8,1,1,1,-1,4,1,2,5,-10,6,6,-5,5,-5,-7,10,-4,1,-2,-6,-2,10,-6,-3,2,4,-1,-8,-1,5,-5,5,-8,7,-1,-6,9,8,3,-2,3,4,6,-8,-6,-4,10,10,-8,-9,9,-3,-1,4,4,-10,1,-1,-9,-4,4,6,1,-3,3,9,7,-8,5,-4,-9,6,-2,7,-5,-4,10,4,-6,-2,9,8,-5,6,-10,9,-9,-9,3,10,-8,-7,-6,4,10,-8,-7,-6,-5,-2,-5,6,7,4,-3,8,-1,-4,9,-7,-1,-9,3,1,-10,-7,-4,-8,10,3,-6,-7,-9,2,-10,-7,7,-1,1,-2,-5,-5,-2,1,3,-5,6,-6,4,3,8,-5,3,-7,8,-5,-8,1,3,10,-8,7,-7,-1,10,3,1,6,3,-10,5,-3,6,-1,-6,5,5,9,4,3,1,3,-5,10,2,-1,5,-10,-6,2,-3,7,8,2,-6,-7,2,-3,-10,-6,-2,1,-9,-10,3,10,-8,8,2,9,6,7,7,6,2,2,-7,3,4,-2,7,5,-6,3,-2,10,-10,7,-6,7,-4,-3,-1,-6,2,-2,-7,-2,9,-5,-10,10,-1,-7,9,-4,-2,4,5,-8,8,-4,8,-10,-3,-9,-7,1,5,4,4,9,-6,1,2,8,1,5,-8,-10,7,2,-8,3,-4,1,6,6,-2,-5,6,4,-3,-1,-1,2,10,-5,10,6,-4,2,7,-4,-4,-3,10,2,-4,6,3,5,-5,-2,6,-7,-4,-2,8,10,-5,-4,10,-10,-6,10,-6,3,-5,6,-4,4], dtype = "int16")#candidate|177|(2184,)|const|int16
const_178 = relay.const([4.664399,-7.628767,-8.449785,-1.856390,2.566437,-0.292079,7.679517,-3.005912,3.996818,0.848003,0.852081,6.671708,-9.704046,-2.026875,-7.473250,6.762822,-3.132397,5.994083,-2.729264,-9.192904,3.365905,0.299081,1.560696,3.106779,5.139842,-1.128074,-2.430888,-2.679710,2.588959,0.167253,-0.262036,0.452385,-1.561593,1.627978,-2.265471,-2.472238,-1.720167,-9.959453,-8.465180,0.798365,-0.620802,-4.527676,9.891631,1.107949,9.029233,-6.791017,3.674010,5.255442,-7.650614,2.517401,-3.958692,7.313774], dtype = "float64")#candidate|178|(52,)|const|float64
call_175 = relay.TupleGetItem(func_129_call(relay.reshape(const_176.astype('int16'), []), relay.reshape(const_177.astype('int16'), [13, 14, 12]), relay.reshape(const_178.astype('float64'), [52,]), relay.reshape(const_173.astype('float32'), [98,]), relay.reshape(const_177.astype('float64'), [13, 14, 12]), ), 0)
call_179 = relay.TupleGetItem(func_136_call(relay.reshape(const_176.astype('int16'), []), relay.reshape(const_177.astype('int16'), [13, 14, 12]), relay.reshape(const_178.astype('float64'), [52,]), relay.reshape(const_173.astype('float32'), [98,]), relay.reshape(const_177.astype('float64'), [13, 14, 12]), ), 0)
bop_180 = relay.power(var_165.astype('float64'), const_176.astype('float64')) # shape=(1, 8, 12)
bop_183 = relay.less_equal(uop_170.astype('bool'), bop_180.astype('bool')) # shape=(14, 8, 12)
bop_186 = relay.not_equal(uop_170.astype('bool'), bop_180.astype('bool')) # shape=(14, 8, 12)
bop_189 = relay.bitwise_and(const_177.astype('uint8'), const_176.astype('uint8')) # shape=(2184,)
bop_192 = relay.left_shift(bop_186.astype('uint8'), relay.reshape(uop_170.astype('uint8'), relay.shape_of(bop_186))) # shape=(14, 8, 12)
uop_195 = relay.rsqrt(bop_180.astype('float32')) # shape=(1, 8, 12)
uop_197 = relay.tan(bop_192.astype('float32')) # shape=(14, 8, 12)
bop_199 = relay.add(uop_197.astype('uint64'), var_165.astype('uint64')) # shape=(14, 8, 12)
const_202 = relay.const([[[4.713823,-5.217879,-7.274339,5.556662,-1.038750,0.426289,9.131658,-4.266066,7.558225,-1.385125,2.004275,-5.808575],[4.728367,6.390090,-3.973389,6.065270,-9.231129,-1.480892,-1.990060,4.204883,-9.952812,7.148368,-9.735253,-7.008941],[-8.412401,4.615375,9.890111,-5.784330,5.800313,3.939442,7.691067,-4.136229,-0.025772,-2.491818,-4.922790,-2.240577],[-5.709722,-8.973879,8.745845,9.396139,8.551904,-5.888387,-2.704739,-1.785302,-0.874748,6.023621,-0.395082,2.022023],[-3.403787,4.188322,0.409464,-7.536878,2.748227,-2.668425,2.732769,-7.118704,3.293472,-9.029006,-8.944452,7.525621],[-7.615533,-6.457385,-8.161812,-3.218847,4.229137,-3.750543,8.908496,-0.067126,3.886039,1.966881,-5.413132,-9.451020],[-6.202820,-9.140764,9.961785,9.743378,-5.308186,-4.454148,9.178979,-5.745647,-4.668390,-6.852329,3.146518,-8.153264],[8.241884,9.930463,3.721278,6.514341,-4.587860,-3.914250,-9.253700,-1.986541,4.296535,1.553130,4.375402,0.136878]],[[-8.060421,5.701390,5.643214,8.732260,9.134655,-9.358799,-8.008707,6.590090,7.920815,-1.696200,8.625626,0.142997],[4.189029,-7.052702,-0.999578,-9.083217,6.060613,-3.806303,8.667031,1.725555,-4.285114,6.589717,-4.660912,-4.863035],[6.915719,0.593210,3.757920,7.521737,0.171000,8.692352,-0.856766,7.679602,3.594227,-1.721394,1.206546,1.315330],[8.718619,-9.923161,9.309931,-1.442098,9.756344,-3.084917,-9.763068,4.551935,3.762229,7.230704,-0.787046,9.076345],[-1.199385,-8.609536,5.818980,7.649611,-4.271819,-0.043440,-1.455845,-0.208319,-7.703534,-3.418090,9.944797,3.753717],[-3.672295,-3.164006,4.372778,-3.207362,6.292794,9.843740,0.631772,7.063672,-4.817623,1.525005,-8.129046,-4.173045],[-7.314994,1.600338,-5.645956,-9.587725,8.354537,2.188980,-9.613903,-6.009269,-9.283947,3.869322,9.304392,9.407951],[-8.478315,-0.891528,6.518299,-7.070871,-8.517954,2.775090,-3.758763,6.946737,-4.047958,-8.080973,8.053703,-0.740115]],[[-9.643225,4.975537,-1.916277,2.563032,7.566750,-9.163558,-8.403040,7.509783,-5.270490,1.404054,-8.983673,0.690081],[7.670673,-7.592445,-5.148038,-6.672335,-9.064880,-3.338462,-7.454190,0.891002,-3.977762,-6.171784,-9.965665,0.212228],[-7.047166,8.615349,8.997815,5.140333,-5.942647,0.162754,-5.229289,4.814812,2.933880,-3.410026,4.550760,-2.894601],[8.310644,-3.281643,-6.288607,-0.571598,-3.725703,9.872901,-4.209888,-0.747046,-2.662431,-4.244842,7.598336,0.867415],[7.040796,6.238286,-3.410877,-7.553061,-9.199466,7.684065,-1.367525,-0.246898,-5.614724,2.710478,-9.207518,9.499574],[2.127015,-4.177529,-3.932293,-5.986740,0.174109,-0.120479,9.088546,3.657611,-2.573852,-1.864034,-4.872086,6.236835],[-9.456355,-1.017772,4.891799,-4.291456,9.131356,9.494087,-6.270277,5.788126,3.238703,1.105760,9.506161,9.421053],[-8.432565,-8.536718,-3.188269,8.951940,-0.943661,2.335256,0.660334,2.639417,-3.730715,-2.935930,-8.286412,-8.524401]],[[-4.321680,-4.959613,-9.228191,5.535257,9.184256,-0.310921,5.683198,-9.280730,8.359764,6.664184,9.215804,3.571923],[-1.399760,4.768478,4.076865,-6.656224,4.032257,4.783639,-8.423488,-8.967435,5.796225,7.037622,-0.254749,-8.392281],[-9.950380,0.664956,-9.131564,1.899587,-6.442010,6.407240,9.423631,1.709172,-6.776369,-3.704187,9.288348,-7.601786],[9.682356,-0.151108,-6.197898,2.184821,-6.991303,-7.119896,2.036124,3.019517,-5.690734,-2.278660,7.205681,1.190020],[-9.162116,-8.136495,-1.957579,-8.197811,3.660251,-2.748157,-9.206810,-8.963374,-1.636741,4.359713,-6.847707,2.667605],[-7.137913,-7.854652,-5.146731,2.638947,-6.725567,-7.381886,6.595756,-5.121243,9.318137,-6.590417,2.475644,9.876032],[0.346208,5.956790,0.851040,7.819830,-8.241817,7.236954,4.746969,-7.956896,6.860458,-8.162899,2.844472,8.571300],[4.562024,-4.361609,-5.215837,-3.892724,0.809832,5.921416,2.467568,-2.656730,4.051563,-3.315132,-5.385430,-8.167116]],[[1.917210,-3.911660,3.339787,-9.228169,1.860860,7.565364,-3.827144,-1.236144,-4.787208,-7.774003,-1.424535,6.168544],[5.834251,-4.766341,-0.043100,8.011482,5.827493,6.043265,6.990682,-0.795165,-2.565746,-8.757453,6.808918,-3.134875],[-5.355235,6.629527,0.301636,-4.078996,-3.729169,2.417074,2.267458,6.334284,-2.781231,-1.531101,-8.833427,3.178585],[-2.577265,5.403482,-3.395476,7.855033,-8.234649,3.791297,-0.744062,-3.015605,-6.313366,9.378938,-9.403323,-9.104812],[0.413913,-5.318250,1.230981,3.655867,7.720065,-1.015291,-0.912733,9.782564,-0.744926,6.872711,-5.755291,-0.977367],[5.059874,0.406049,-1.669600,-2.784993,-9.373642,7.773071,-4.361905,6.842059,4.779448,0.904938,-3.317964,-8.705341],[8.439244,6.811992,-9.678733,-0.798768,2.057698,4.047040,-9.908870,-3.443644,2.768894,-3.819904,-0.540486,3.546648],[6.821868,2.319196,2.218656,7.564526,6.856022,4.004499,-1.933096,9.881817,8.612411,2.011063,1.165867,-1.154065]],[[8.650797,-2.194086,-8.262395,5.813568,9.564438,3.182766,-6.476660,5.206046,7.541413,1.985371,8.671793,-2.519242],[-2.732860,-1.423517,0.636587,-7.702903,9.893204,-3.176660,-9.390288,-3.215909,-3.589582,4.548639,-6.821715,0.950962],[2.929748,4.679610,3.865081,9.826943,6.509208,2.549543,-6.853765,6.635281,8.521554,6.233820,2.367853,1.569610],[-0.753196,-4.756687,2.498478,-4.246046,4.635464,1.408362,4.004513,-8.842844,-8.976530,6.710096,6.325104,2.400798],[-5.020866,-6.195833,-1.739959,-4.173624,-6.418783,3.588809,-3.716985,-4.681583,5.172426,-7.846727,-9.252508,1.790174],[2.986801,4.198543,1.501743,2.322225,-1.960591,3.161939,6.555538,5.915103,-4.244502,3.085232,-1.914947,-2.980379],[-1.017584,8.617254,0.987349,7.627405,9.968901,2.923937,3.818093,5.417427,5.738248,-7.664357,-3.868291,-5.628981],[-4.058585,7.889025,-9.861449,-2.860661,-9.840388,7.278082,-2.267724,-0.314208,-3.061274,-9.486177,-3.273512,4.285150]],[[-3.508807,-5.504362,3.865480,-3.926243,7.944853,-0.406315,0.379029,-5.467525,-5.729148,-3.513833,-6.324788,5.202652],[-2.782332,8.160610,1.161553,-4.130313,-3.979844,-8.844647,-1.910419,-5.430462,-3.985791,1.555691,9.050834,6.702403],[9.354455,2.645566,2.029034,-0.505772,-2.404271,-0.519629,-6.318689,-0.555079,-6.766332,-1.105085,8.981225,-6.345787],[-3.693011,0.188621,8.193785,1.671141,-2.381369,-8.237345,8.488713,-0.276393,-9.648853,0.767107,6.244049,-9.319110],[-9.197270,-0.337983,7.320752,2.912555,-3.482842,7.456838,-2.271143,4.605580,2.447315,-4.137970,-2.832751,1.645066],[0.290516,-3.122732,-6.229492,-4.108345,0.319493,-6.810153,4.895408,-4.932432,-6.948564,2.895982,0.695358,-3.752848],[8.975030,0.851272,9.220737,-8.915159,-2.387511,4.476119,0.768475,5.018191,2.852448,5.596671,-6.566212,-0.614157],[-8.639802,3.353404,-4.664889,-3.718070,-5.527604,-5.080320,-4.107088,-9.804560,4.776942,6.502273,-7.557119,2.630743]],[[-6.090995,-6.481927,7.616128,-5.344261,4.246789,1.503309,7.524123,1.200608,2.692837,9.139027,-7.558850,-2.477519],[3.269227,0.948170,9.886320,0.685595,9.738872,-4.856103,7.077540,-7.464290,-9.659325,-4.132393,-6.392641,4.627592],[5.361114,2.949718,-9.669182,0.599249,-6.904544,1.195011,-3.440173,7.874915,4.816271,-9.379856,-1.520269,4.411113],[-9.421755,-5.963692,9.951803,-0.437322,-2.553420,-3.053364,-2.837543,3.656273,-9.748040,-7.292948,4.911213,1.646156],[9.621535,1.394956,-0.669259,-1.675322,2.620301,2.137407,-7.020330,3.074193,-8.133463,4.981935,-4.004983,1.158204],[-1.385065,0.417769,5.549080,-1.623055,-8.863874,4.817833,-9.284445,7.145420,-2.564433,-5.414807,-0.152999,-9.361250],[2.294660,3.999139,-3.373935,2.255763,-2.341876,-2.336309,1.676430,-8.475494,9.832949,-4.529439,0.404258,7.641014],[2.480611,-4.342715,4.766319,-1.723814,0.692964,-4.672843,-2.851698,-3.874298,-7.505305,-1.487840,0.388985,0.187755]],[[-2.237070,-7.648351,6.699143,-9.435430,0.612951,1.992960,8.588852,9.192855,1.979846,-7.857760,8.255145,2.380384],[1.892278,7.192200,-8.181186,7.906282,1.742165,6.795799,7.433003,7.063257,-0.413814,-4.394941,-7.208962,-2.120573],[2.019190,2.664843,7.649897,1.878169,-6.546626,4.675324,5.573756,-9.746309,-0.753074,-2.464160,9.774244,-8.284316],[-8.648933,3.584520,7.782512,-6.395548,-9.779889,3.063411,-2.464680,-2.531082,-3.554116,-7.682072,6.232110,-5.224672],[-9.343526,5.242988,-4.386722,4.340492,-6.726802,9.621402,2.279802,1.593834,3.720335,5.925759,6.611905,-3.331149],[-3.958669,2.198227,9.012867,6.718389,-8.496472,6.889163,9.473659,5.837684,6.847367,1.256688,2.251165,-7.504829],[0.550236,-3.004109,-4.712838,-0.249013,4.295981,-0.239126,1.621977,-8.886577,-2.972815,-6.528367,5.405433,-8.568142],[-9.908250,8.753874,-3.966988,-4.132317,0.919840,-0.702012,-2.789404,-8.932265,-9.172219,-1.138246,5.511768,-1.117646]],[[8.913253,6.190155,-9.377652,8.838692,4.373598,-7.794604,9.715084,2.157845,-5.164316,-5.393767,1.655036,-0.920598],[8.221639,1.512788,-0.872396,-4.681465,6.383500,-5.832067,9.817445,-2.940659,-6.583614,-6.218398,-9.124448,-1.412615],[3.552350,3.066408,-9.985809,1.312543,-8.315265,-3.502173,-2.777334,-5.756355,-4.529470,1.763879,7.419746,-2.848855],[7.746085,9.012409,-6.646664,-4.220487,-8.176573,-4.385745,2.672088,-8.907213,3.700481,-5.382669,2.129183,3.549369],[0.507391,-6.974940,-4.250739,-0.112231,4.942030,8.709483,-4.526163,-9.268350,3.131280,9.176269,-6.381765,5.324979],[-2.754600,4.151367,-3.234510,9.242588,0.207238,-4.319020,-5.433762,3.243491,-5.532737,9.379484,-3.863661,3.938892],[2.316874,9.615093,-8.077176,0.271286,-3.779172,0.657770,1.742888,6.273961,-8.440235,-8.688624,-3.516741,-9.501814],[8.492185,6.649712,2.216521,2.152434,0.199931,-1.618711,9.806979,-3.169354,-3.599532,8.624422,-0.485767,9.325428]],[[-6.264726,1.205570,6.208636,-6.187681,-2.012702,4.738323,-8.913284,-1.241125,1.421214,-6.508637,-1.122300,-3.286345],[-6.321922,-3.224267,-6.372244,4.136770,4.562040,-0.708360,-1.476322,2.708347,-0.924726,1.952046,-2.347758,7.786007],[-8.671851,-8.896387,-5.836973,-0.287181,-3.776921,-1.622831,-3.874690,-9.177420,-1.668190,-3.970502,8.340001,4.758450],[-5.987298,-9.251092,-4.471318,-2.151707,1.645007,8.930085,-6.649369,-9.386968,-1.491203,0.060759,-4.899027,1.279815],[-7.373180,-3.937120,4.826564,-8.028273,-5.221706,-1.726939,-7.883240,5.223154,-7.381403,1.037867,-7.738011,8.898614],[-0.022865,7.985081,-9.803737,-1.110156,8.089307,-6.471814,-3.404653,-0.048224,-6.585016,-6.471127,-7.100949,-7.912538],[-4.289260,0.862858,-5.947300,-1.204625,2.168341,0.535122,-5.858873,0.280788,-5.761372,-9.963573,-3.097428,4.582956],[-4.162269,0.878462,-8.963816,1.878266,3.165426,0.220340,2.105710,1.390021,-4.261062,0.978552,-0.384218,-2.759057]],[[-7.351455,4.258843,0.889673,2.985737,-2.677454,-9.488933,3.535238,-9.717064,-7.285890,-1.901334,8.719618,8.651345],[-6.768914,-2.340196,5.340294,-1.341153,8.698311,-2.357038,-2.461094,-2.526732,-4.288398,8.348773,-8.708838,-1.394167],[-0.751952,6.988936,-0.293013,9.728222,1.405400,4.297707,-9.811850,-4.357879,-1.670376,-3.111457,6.583560,0.233778],[-9.504188,7.892444,-4.523392,6.149835,-1.894266,-2.636780,0.505524,2.925685,9.379643,6.627411,-2.225680,-0.069661],[-0.871596,-7.882582,0.978166,2.299961,-6.798568,9.597475,2.423693,0.404210,7.602001,-8.883183,7.454617,2.708610],[4.119617,-7.439695,-7.388768,-0.030077,-2.104177,-5.595842,-5.962039,2.761914,-5.408725,-7.971316,1.785752,0.799195],[5.826797,-7.240694,-7.204485,-4.908336,-4.307569,6.365244,0.258499,-2.036586,-9.134918,6.375893,-8.793593,-4.472992],[3.306371,-5.633497,-6.572386,6.159274,-7.927951,1.779657,1.858263,-0.444483,-8.372927,5.602034,5.392343,3.779493]],[[-3.401791,-4.705507,0.772684,-4.172912,7.607686,-8.338364,-2.296958,-4.318930,3.097009,2.832911,0.991102,-1.600190],[-5.511980,5.073310,5.160610,2.340091,7.461141,5.952789,-9.048622,-2.329080,-2.506476,-5.196552,-9.315269,6.556653],[-1.441434,8.571899,-5.082679,6.480954,3.004241,-9.802656,-5.678069,-5.844933,-8.669019,-1.641963,1.200244,-3.634270],[3.204295,6.080538,6.575697,0.082257,2.883754,0.566855,6.319985,-8.213986,3.372667,0.588092,1.211120,-6.568528],[9.295448,-1.016972,7.912298,7.276102,7.934495,-4.002223,9.647524,-9.522307,-7.537552,7.534420,2.012911,-1.087967],[-7.562356,-0.546840,-1.332381,7.328759,3.702883,-3.671434,1.561873,-6.495269,-6.340045,0.520123,-2.752701,1.926037],[-9.150999,-9.389415,-6.940492,-6.481585,3.825268,-3.066576,8.932945,4.080599,-8.652641,2.920671,5.367928,-7.937062],[6.536687,-1.063829,-2.489710,-4.044256,-5.582316,-7.941660,-0.209000,3.380619,9.831889,0.829224,-0.699872,6.353300]],[[-8.427683,-1.122569,-1.021425,-4.855609,-2.657770,-9.461880,-8.078749,4.892832,7.370894,6.600577,1.730362,4.274557],[5.241971,5.099739,-8.878852,-9.786690,-6.186629,-8.064010,9.173187,-9.206935,9.765398,-8.245787,9.319046,-4.131055],[9.499626,-8.314268,4.201887,5.494999,-2.587031,-7.968076,-8.299998,-9.494116,5.288835,5.114020,2.145888,-4.464737],[-8.978602,-8.082136,1.491847,6.295059,-8.475301,9.624547,9.351633,-2.254823,1.175537,-4.178443,5.538178,-1.078412],[-7.669603,-2.061187,1.787364,-9.196488,9.425398,-9.784155,-8.466097,-7.513514,5.370717,-8.193577,-8.568552,9.011445],[1.261202,0.943897,-6.920937,8.895657,-8.818489,-0.827425,-0.171116,0.624757,7.231518,-6.941515,1.492733,-3.170799],[-9.065046,-3.448508,-3.771018,5.806203,8.683594,-0.482395,-1.530821,-8.028557,4.372357,4.345903,-8.768024,-8.204907],[-4.554691,3.586448,1.596347,-3.670529,-3.018119,-0.595798,-5.387595,-5.373237,0.697243,1.789473,-4.432507,-3.283022]]], dtype = "float32")#candidate|202|(14, 8, 12)|const|float32
bop_203 = relay.mod(uop_197.astype('float32'), relay.reshape(const_202.astype('float32'), relay.shape_of(uop_197))) # shape=(14, 8, 12)
const_206 = relay.const([[[-4,8,-4,-10,8,6,8,-5,-6,-3,9,-2],[-4,-2,-9,-10,6,8,-10,2,10,1,7,2],[-2,-6,9,-9,4,7,-8,6,-4,-4,3,-4],[4,-2,3,6,8,-4,10,2,-7,-9,6,1],[-10,-6,-2,7,-6,-7,-4,4,-5,-9,-6,-10],[1,-9,5,-7,-4,-9,1,-2,-6,8,4,-1],[10,5,-2,8,6,-10,-7,5,10,-8,1,-2],[1,-6,9,5,7,7,6,-5,-5,5,-4,5]],[[-6,6,5,4,-7,-2,-8,-8,-8,6,-10,-8],[6,7,4,3,-5,7,9,7,-10,2,7,-2],[-5,-8,-9,-10,-10,4,-8,-5,-10,-4,-2,4],[-1,1,-6,-10,-3,-6,7,-9,4,2,-2,7],[-7,-10,-4,-4,-1,-3,-10,-8,5,5,-1,-8],[10,4,-5,6,4,3,-10,-4,-2,8,4,-2],[1,1,-2,4,9,5,-3,-7,5,-6,7,-8],[1,-10,5,1,1,-7,-1,6,10,-3,10,-9]],[[-10,-2,7,5,-9,2,-6,7,5,10,-6,3],[8,9,5,-3,-7,1,8,-1,-10,-8,-5,6],[10,5,4,3,3,-10,-2,-5,-1,-2,-2,-3],[-7,3,-7,-2,-6,-4,-5,2,1,-8,6,-1],[-10,5,7,8,-10,-7,-9,7,-8,-6,8,-2],[-10,1,6,3,6,-9,8,8,-8,7,6,1],[-5,-6,4,3,10,2,-7,-1,-4,7,-8,10],[-1,-3,10,-10,10,-7,6,10,5,10,-8,-4]],[[-1,-6,9,-7,4,-9,4,9,-7,-10,-8,7],[-4,-5,9,-9,-2,1,1,-2,-6,9,-2,5],[5,-2,-8,6,7,-6,-1,-9,2,-4,8,7],[-7,-5,5,8,-5,-4,-1,-5,-4,-5,8,7],[3,-2,-7,4,-5,5,-9,9,3,-7,6,3],[2,6,-3,9,-6,7,-10,-9,2,-5,7,6],[-9,-4,-4,-4,8,-8,5,-7,10,4,8,7],[7,2,-5,-4,3,1,9,-6,7,8,-3,1]],[[-2,5,8,10,3,-9,-2,3,5,5,-1,-10],[4,8,-4,3,4,6,10,-9,-9,1,3,9],[10,-1,4,7,7,7,6,7,-10,4,-8,10],[3,-9,7,-4,3,-6,-5,4,10,-5,-3,-8],[5,2,-9,3,6,-8,-1,8,10,-10,8,-10],[7,-9,-10,-5,3,10,-10,1,4,-8,6,8],[9,2,2,-10,-5,-1,-7,10,2,9,-3,-9],[-2,4,3,3,-10,3,-6,2,3,-8,8,8]],[[10,-5,10,1,-10,-9,9,-9,8,2,5,5],[5,-8,-1,-4,-4,5,-2,-5,3,9,9,-4],[10,-10,2,-4,-9,2,9,-3,5,-6,-4,1],[-6,-1,6,9,-3,-2,-4,-2,7,5,9,8],[5,1,4,7,10,-4,-7,-2,-1,3,-1,2],[-10,5,-4,3,8,9,4,1,-7,-2,-7,3],[1,7,3,-1,8,-2,8,4,-7,-7,10,-9],[-4,-1,7,10,2,-9,9,-9,5,-1,-5,10]],[[-7,-7,6,4,-6,10,-9,-1,-2,-5,2,9],[-5,2,-5,-6,-7,9,-8,5,6,-9,-8,5],[1,-2,-5,-2,-3,-2,5,1,10,7,-1,-4],[-8,3,3,7,-7,9,-1,-2,-3,3,10,-2],[-5,8,1,-4,-5,6,-4,-4,-1,-5,-3,-9],[1,4,7,4,5,8,6,-7,-9,-10,4,-4],[-6,9,5,-8,9,10,8,-8,7,-10,-7,5],[10,9,-1,10,3,9,-7,-6,8,4,9,-10]],[[-5,-9,-9,-8,-2,-2,-3,10,-4,-6,3,9],[10,-7,5,-7,-10,-5,-3,-10,2,-7,6,1],[-6,1,10,3,3,-1,9,-9,4,-2,6,3],[-3,5,8,7,6,3,8,-6,-8,-9,4,-10],[1,7,-3,7,1,-5,-1,-10,2,1,-1,-3],[3,-8,10,-7,-9,10,7,7,-1,-4,7,-9],[1,-1,8,-3,-5,-10,-10,-6,3,10,5,-5],[-2,-1,7,9,10,10,3,-1,-4,-3,-9,-5]],[[7,2,5,-10,-8,-9,1,-3,-8,-10,-6,-9],[-3,-7,3,5,-7,2,4,-2,-3,7,9,-4],[3,-9,-5,1,1,8,-2,-4,10,3,-9,8],[6,-5,-7,1,3,1,8,-5,2,5,-6,10],[-6,-2,10,9,5,-10,-5,2,-2,-7,5,-1],[5,8,4,9,-5,-9,3,8,3,10,-10,7],[7,2,4,-8,9,2,6,-5,6,-3,-1,-7],[-10,2,3,-1,3,-2,-7,8,6,9,-3,2]],[[-10,8,-9,-8,4,-8,9,-7,3,1,-10,7],[-9,10,3,-3,1,4,6,7,-2,-7,6,-5],[-3,-10,5,3,-4,-10,-6,-9,2,-7,7,-8],[-10,-2,-1,7,5,-9,5,-8,4,5,9,-9],[9,-1,9,-5,-8,-7,-8,-3,2,-5,3,-5],[9,6,-5,-3,10,-1,5,10,-7,-2,-3,-5],[-6,-9,4,-5,3,-5,6,-3,1,-7,-1,2],[6,-10,9,-4,-10,4,-9,8,-2,-2,-8,5]],[[10,8,1,-1,1,5,-9,-5,-4,-2,9,4],[-3,-8,-3,10,8,-5,7,-5,-7,8,-3,-6],[3,-9,8,-2,2,-3,6,6,-3,-3,9,7],[-10,4,10,-10,8,3,-3,-8,-4,7,4,4],[-8,-6,-4,-3,-9,-10,6,2,-9,1,-10,6],[2,6,9,-5,-4,4,-5,-4,1,-5,-4,-3],[2,7,-5,-5,-8,-2,10,6,8,2,6,-2],[-2,3,4,10,-10,-5,2,1,-3,-1,-2,-5]],[[-6,8,6,8,-6,5,9,-3,4,3,2,-8],[-10,-5,5,-5,-10,-4,2,4,4,-6,-5,-1],[1,-7,-1,5,5,4,-2,2,3,-8,-9,-2],[4,-8,-9,9,5,2,-2,-9,-8,6,3,2],[5,2,-4,7,-4,-8,5,4,5,8,-2,-4],[-10,-10,2,9,-6,1,5,10,4,4,-5,-9],[-2,-8,2,7,-4,-4,-3,-4,-6,-10,5,-2],[-8,-8,3,-5,-2,1,5,-7,7,7,-4,8]],[[6,-1,-6,9,9,8,5,-7,6,-3,6,-4],[-9,2,2,3,5,-6,-9,6,-2,-10,-10,4],[-4,9,-6,2,3,-3,1,-2,2,-9,5,-10],[2,4,6,-9,6,10,-2,1,6,10,-10,4],[-10,-4,10,2,2,3,-5,-8,-10,-6,1,-8],[1,-4,2,-2,3,-7,-10,5,6,-1,10,-3],[6,-3,-7,3,10,-9,-5,5,9,-1,3,-2],[-3,10,-2,6,-4,-4,1,-9,3,3,10,-6]],[[-2,-9,-4,-3,-6,2,10,6,4,-5,7,8],[-1,-10,1,-2,-4,9,6,6,-7,-9,-4,-2],[-7,5,-10,-4,4,-4,1,-9,8,2,9,7],[-4,-4,-3,7,3,6,5,-4,3,5,3,8],[9,9,-9,6,5,2,-6,10,4,-3,-5,9],[5,3,-5,1,-2,-4,9,4,9,3,-8,-7],[8,-1,-6,-4,-4,9,9,-5,-2,-2,10,4],[6,7,10,-6,5,-5,8,4,-6,1,-4,-6]]], dtype = "uint64")#candidate|206|(14, 8, 12)|const|uint64
bop_207 = relay.logical_or(bop_199.astype('bool'), relay.reshape(const_206.astype('bool'), relay.shape_of(bop_199))) # shape=(14, 8, 12)
const_210 = relay.const([[[False,False,False,False,True,False,False,False,False,False,True,True],[True,True,False,True,False,True,False,False,True,True,False,False],[True,False,False,True,True,False,True,True,False,True,False,False],[True,False,False,True,False,True,True,True,False,True,False,True],[True,False,True,False,True,True,False,True,False,False,False,True],[True,False,True,True,True,True,True,True,True,False,False,True],[True,True,False,False,True,False,True,False,True,False,False,False],[False,False,True,False,False,False,True,True,False,False,True,True]],[[True,False,False,False,False,True,True,False,False,True,False,True],[False,True,True,True,True,True,True,True,True,True,True,False],[True,True,True,True,True,False,False,True,True,True,True,True],[False,True,True,False,False,True,False,False,False,True,True,False],[True,True,True,False,False,True,False,True,False,False,False,True],[False,False,False,True,True,False,True,True,True,False,False,True],[False,False,False,False,True,True,False,False,False,False,True,False],[True,True,True,True,True,True,False,False,False,True,True,True]],[[True,False,True,False,True,True,True,True,True,True,True,False],[True,False,True,True,False,False,False,True,True,True,False,True],[True,False,True,True,True,False,False,False,True,True,False,False],[False,False,True,True,True,False,False,False,False,True,False,False],[True,False,True,False,True,True,True,False,False,False,True,True],[True,False,False,False,True,False,False,False,False,True,True,False],[True,True,False,False,False,False,False,True,False,False,False,False],[True,True,False,True,False,False,True,True,False,True,True,True]],[[True,True,True,False,False,True,False,True,False,False,True,True],[True,False,False,True,False,False,True,True,False,False,True,False],[False,False,True,False,True,False,True,False,True,True,False,True],[False,False,False,False,True,False,True,False,False,False,True,False],[False,True,True,False,True,False,False,True,False,True,True,True],[True,False,False,False,True,False,True,True,True,False,False,False],[False,True,False,False,True,True,False,False,False,True,False,True],[False,True,False,False,False,True,False,False,False,False,False,True]],[[False,False,True,True,False,True,True,False,False,True,False,False],[True,False,False,True,True,False,True,True,True,True,False,False],[True,False,False,True,False,False,False,False,False,True,False,False],[False,True,False,True,True,False,True,False,False,True,True,False],[True,False,True,True,False,True,True,True,True,True,False,True],[True,False,False,False,False,False,False,False,True,True,True,False],[True,False,False,False,True,False,False,True,False,True,False,False],[True,True,True,False,False,True,False,True,False,False,True,False]],[[False,False,False,True,True,False,False,False,False,False,False,False],[False,False,True,True,False,True,True,True,False,True,True,False],[False,True,True,False,True,True,False,True,True,True,True,False],[True,True,False,True,True,True,True,False,True,False,True,True],[True,False,False,True,True,False,True,False,True,True,False,True],[False,True,False,True,False,True,True,True,False,True,False,False],[False,False,False,False,False,True,True,False,True,False,True,True],[False,True,True,True,False,True,False,False,False,True,True,False]],[[False,False,True,True,True,False,True,False,False,True,False,False],[False,True,False,True,True,False,False,True,True,True,True,True],[True,True,True,True,False,False,False,True,False,True,False,True],[True,True,True,True,False,True,False,False,True,False,True,False],[False,False,False,True,True,True,False,False,False,True,False,True],[True,False,False,True,True,False,True,True,True,False,False,True],[False,False,True,True,True,False,True,True,False,True,True,False],[False,True,False,True,True,False,False,False,False,False,False,False]],[[False,True,True,True,True,True,False,True,False,True,False,True],[True,False,False,False,True,True,False,False,True,False,True,False],[True,True,False,True,True,False,True,True,True,False,False,True],[False,False,False,False,True,True,True,False,True,True,False,False],[True,False,False,False,True,True,False,False,False,False,True,True],[True,True,False,False,True,False,True,True,False,False,True,True],[True,False,False,False,False,False,False,True,True,True,True,False],[False,True,False,True,True,True,False,False,False,True,True,False]],[[True,False,True,False,False,True,True,True,True,True,True,True],[False,False,False,True,True,True,True,True,False,True,False,False],[False,True,False,True,False,True,True,True,False,False,True,False],[True,True,False,True,False,True,False,False,True,True,True,False],[False,False,False,True,True,False,True,False,True,True,True,True],[True,False,True,True,False,False,True,False,True,True,True,False],[True,True,False,False,False,False,True,True,False,True,False,False],[True,True,False,True,False,True,False,True,True,True,False,True]],[[False,False,True,True,True,False,True,False,False,False,True,False],[False,False,True,False,True,True,False,False,False,False,True,True],[True,False,False,False,True,True,False,True,True,True,True,False],[False,False,True,False,False,False,False,False,False,False,True,True],[True,True,True,False,False,True,True,True,True,True,False,False],[False,False,False,True,True,True,False,True,True,True,True,False],[True,False,False,True,False,True,False,True,True,True,True,True],[False,False,False,True,False,False,False,False,False,False,False,False]],[[True,False,True,False,True,True,False,False,True,True,True,True],[False,True,False,True,False,False,False,True,False,True,False,False],[True,False,True,False,False,True,False,True,True,True,False,False],[False,False,False,True,True,True,False,False,False,True,True,False],[True,False,True,True,True,False,False,False,False,True,False,True],[False,False,False,True,False,False,True,False,True,True,False,False],[False,False,False,False,True,False,False,False,False,False,False,True],[False,False,True,False,True,False,True,True,False,False,False,False]],[[False,True,True,True,False,True,False,False,True,False,False,True],[False,False,True,False,False,True,True,False,True,True,True,False],[True,False,True,True,False,True,False,True,False,True,False,False],[False,False,False,True,True,False,False,True,True,False,False,True],[True,True,False,True,False,True,True,True,True,True,True,False],[False,True,True,True,False,True,True,False,False,False,True,True],[False,False,False,True,False,False,True,True,False,True,False,False],[False,False,False,True,True,True,True,True,False,False,False,False]],[[False,False,False,False,False,True,True,False,True,True,False,True],[False,True,True,False,False,True,False,False,True,False,True,False],[True,True,False,True,True,False,True,True,False,True,True,False],[True,False,True,False,False,True,False,False,False,True,False,False],[False,False,False,False,True,True,False,False,False,False,False,False],[True,True,True,True,True,True,False,False,True,True,False,True],[False,False,True,False,True,True,False,False,False,False,False,True],[True,False,True,False,True,True,False,False,True,True,True,False]],[[False,True,False,False,False,False,True,False,True,True,False,False],[False,False,False,False,False,False,True,False,True,True,False,False],[False,False,False,True,True,True,True,False,True,True,False,True],[False,True,False,True,False,False,True,True,True,False,True,True],[False,True,True,True,False,True,True,False,True,True,False,True],[True,True,True,False,True,True,True,True,False,True,False,True],[False,True,False,True,True,True,False,False,False,False,True,False],[True,True,True,True,False,True,False,True,False,True,True,True]]], dtype = "bool")#candidate|210|(14, 8, 12)|const|bool
bop_211 = relay.equal(bop_207.astype('bool'), relay.reshape(const_210.astype('bool'), relay.shape_of(bop_207))) # shape=(14, 8, 12)
bop_214 = relay.less(uop_197.astype('bool'), relay.reshape(var_166.astype('bool'), relay.shape_of(uop_197))) # shape=(14, 8, 12)
var_217 = relay.var("var_217", dtype = "bool", shape = (14, 8, 12))#candidate|217|(14, 8, 12)|var|bool
bop_218 = relay.logical_and(bop_186.astype('bool'), relay.reshape(var_217.astype('bool'), relay.shape_of(bop_186))) # shape=(14, 8, 12)
uop_221 = relay.atan(bop_199.astype('float32')) # shape=(14, 8, 12)
const_223 = relay.const([[[False,False,False,True,True,False,True,False,False,False,True,True],[True,True,True,True,True,False,False,True,False,True,True,True],[True,False,True,False,True,True,False,True,True,True,True,True],[True,False,True,True,False,False,False,False,False,True,True,True],[False,True,False,False,False,True,True,False,True,False,False,False],[True,True,False,True,False,True,False,True,True,True,False,False],[False,True,False,False,False,True,True,False,False,True,False,False],[False,True,False,True,True,True,False,True,False,False,False,False]],[[True,False,True,False,True,True,False,True,False,False,True,True],[True,False,True,True,True,False,False,True,True,False,True,True],[True,True,False,True,True,False,True,False,False,False,False,True],[False,True,True,False,True,False,True,True,True,True,False,False],[True,False,False,False,True,True,True,False,False,True,False,True],[True,True,True,True,False,True,True,False,False,False,False,False],[False,False,True,True,True,True,False,False,False,False,False,True],[True,False,True,True,True,True,False,True,True,True,False,True]],[[False,True,True,True,True,True,True,False,True,False,True,False],[True,True,False,True,True,True,False,False,True,False,True,False],[True,True,True,False,False,False,True,True,True,False,False,True],[False,True,True,True,True,False,False,False,False,False,False,True],[True,False,False,False,False,True,True,False,True,False,False,True],[False,False,False,False,False,False,True,False,True,False,False,False],[False,False,True,False,False,True,False,False,True,False,False,False],[True,True,False,False,False,False,False,False,False,False,False,True]],[[True,True,True,False,True,True,True,False,True,False,False,False],[True,False,False,False,False,False,False,False,False,False,False,False],[True,False,False,True,True,True,False,False,False,False,False,False],[True,True,False,True,True,False,True,False,True,True,True,True],[True,True,True,True,False,False,True,True,False,False,False,True],[True,True,True,True,True,False,True,False,True,True,True,True],[False,False,True,True,True,False,False,True,False,False,False,False],[False,False,True,False,False,True,False,True,False,True,False,True]],[[True,False,False,True,True,True,False,True,False,True,False,True],[False,True,False,False,True,True,False,True,True,True,True,True],[False,True,False,True,True,False,False,False,False,False,True,False],[False,True,True,False,True,False,True,True,True,False,True,False],[True,True,True,False,False,False,True,False,False,True,True,True],[True,False,True,False,False,True,False,False,False,True,False,True],[True,False,False,False,False,True,False,True,False,True,True,False],[False,False,True,False,True,False,True,False,False,False,False,True]],[[True,False,True,False,False,False,True,True,False,False,False,False],[True,False,True,False,False,False,False,False,False,True,False,True],[False,True,True,False,True,False,True,True,False,True,True,False],[True,False,False,True,False,False,True,False,False,False,False,False],[False,False,False,False,False,False,True,False,True,False,False,True],[False,False,False,True,True,True,True,False,True,True,True,False],[True,False,False,False,False,False,False,False,False,True,False,False],[True,True,False,True,True,True,False,False,True,False,True,False]],[[True,False,False,False,False,True,False,True,True,False,True,True],[False,False,True,True,True,True,True,False,False,False,True,True],[True,True,True,False,True,False,False,False,True,False,True,True],[True,True,False,False,False,False,True,False,False,False,True,True],[True,True,True,True,True,True,False,False,False,False,False,False],[False,False,False,True,False,True,False,True,True,True,True,True],[True,False,True,True,False,True,False,True,False,True,False,True],[False,False,True,True,False,True,True,True,True,True,False,True]],[[True,True,False,False,False,True,True,True,True,False,False,True],[True,False,False,True,True,False,False,False,False,True,True,True],[False,False,False,True,True,False,False,False,True,False,False,True],[True,True,False,False,False,False,True,True,False,True,True,False],[True,True,False,False,True,True,True,True,True,True,True,False],[True,True,True,True,False,True,False,True,True,True,False,True],[True,True,False,False,True,True,False,False,True,False,False,False],[True,True,True,False,False,False,False,False,False,True,True,False]],[[True,True,True,False,False,True,True,False,True,True,False,False],[True,False,False,False,False,True,False,True,False,True,True,True],[False,True,True,False,True,False,False,False,True,True,False,False],[True,True,False,False,False,False,False,True,False,False,True,False],[True,True,True,False,True,False,True,True,True,False,True,False],[False,True,False,True,False,False,True,True,True,True,True,False],[True,True,True,True,False,True,True,True,False,False,True,True],[False,False,False,False,False,True,False,False,False,True,False,True]],[[True,True,False,True,True,False,True,False,True,False,False,True],[True,True,True,False,False,False,True,False,True,False,False,True],[True,True,False,False,False,False,True,True,True,True,False,False],[True,True,True,True,False,True,False,True,False,True,True,False],[False,True,True,True,True,True,False,False,False,False,False,False],[False,True,False,False,True,False,False,False,False,True,True,False],[False,False,True,True,True,True,True,True,False,False,False,True],[False,True,True,False,True,False,True,False,True,True,False,False]],[[True,False,True,True,False,False,True,False,False,True,True,False],[False,True,True,False,True,False,True,True,True,False,False,False],[False,True,False,False,False,False,False,True,True,True,True,True],[False,False,True,False,True,True,False,True,False,False,True,True],[False,False,True,True,True,True,True,True,False,False,True,False],[False,False,True,True,True,False,False,True,True,False,False,False],[True,False,False,True,False,True,False,False,False,True,True,True],[False,True,False,False,True,False,False,True,False,False,True,True]],[[False,True,True,True,True,True,False,False,True,False,True,False],[True,False,False,True,True,False,False,False,True,True,False,False],[True,True,True,True,True,False,False,True,False,True,True,True],[False,True,False,False,True,True,False,False,True,False,False,True],[False,False,True,True,True,True,True,False,False,True,True,True],[True,False,True,True,True,False,True,False,True,True,False,False],[False,False,False,False,False,False,True,True,True,False,False,False],[True,False,True,False,True,False,True,False,False,False,False,False]],[[False,True,False,True,False,False,True,False,False,False,False,False],[False,True,True,True,True,False,False,True,False,True,True,True],[True,False,True,False,True,True,False,True,False,False,True,False],[False,False,True,False,False,True,False,True,True,False,False,False],[False,False,True,False,True,False,True,True,True,False,True,False],[False,True,True,False,True,False,True,True,True,False,True,True],[True,True,False,False,True,True,True,True,True,False,True,True],[True,False,False,False,True,True,False,True,False,True,True,True]],[[False,False,False,True,False,True,False,False,False,True,False,False],[False,True,True,True,False,True,False,True,True,False,True,False],[True,True,True,True,False,True,False,False,True,False,True,False],[True,False,False,False,True,False,False,True,False,True,False,False],[False,True,True,False,True,False,False,True,True,False,False,True],[True,True,False,False,True,True,False,True,True,False,True,False],[True,True,True,True,False,False,True,True,True,False,True,False],[False,True,True,True,True,False,False,False,True,False,True,False]]], dtype = "bool")#candidate|223|(14, 8, 12)|const|bool
bop_224 = relay.equal(var_217.astype('bool'), relay.reshape(const_223.astype('bool'), relay.shape_of(var_217))) # shape=(14, 8, 12)
bop_227 = relay.add(bop_183.astype('uint64'), relay.reshape(bop_224.astype('uint64'), relay.shape_of(bop_183))) # shape=(14, 8, 12)
var_230 = relay.var("var_230", dtype = "uint64", shape = (14, 8, 12))#candidate|230|(14, 8, 12)|var|uint64
bop_231 = relay.maximum(bop_199.astype('int32'), relay.reshape(var_230.astype('int32'), relay.shape_of(bop_199))) # shape=(14, 8, 12)
bop_234 = relay.equal(uop_221.astype('bool'), relay.reshape(var_166.astype('bool'), relay.shape_of(uop_221))) # shape=(14, 8, 12)
var_237 = relay.var("var_237", dtype = "bool", shape = (14, 8, 12))#candidate|237|(14, 8, 12)|var|bool
bop_238 = relay.floor_divide(bop_234.astype('float64'), relay.reshape(var_237.astype('float64'), relay.shape_of(bop_234))) # shape=(14, 8, 12)
bop_241 = relay.bitwise_xor(bop_234.astype('uint32'), relay.reshape(bop_192.astype('uint32'), relay.shape_of(bop_234))) # shape=(14, 8, 12)
var_244 = relay.var("var_244", dtype = "bool", shape = (14, 8, 12))#candidate|244|(14, 8, 12)|var|bool
bop_245 = relay.not_equal(bop_207.astype('bool'), relay.reshape(var_244.astype('bool'), relay.shape_of(bop_207))) # shape=(14, 8, 12)
uop_248 = relay.asinh(uop_221.astype('float32')) # shape=(14, 8, 12)
bop_250 = relay.less_equal(uop_248.astype('bool'), relay.reshape(bop_199.astype('bool'), relay.shape_of(uop_248))) # shape=(14, 8, 12)
uop_253 = relay.log(bop_238.astype('float32')) # shape=(14, 8, 12)
uop_255 = relay.erf(uop_253.astype('float32')) # shape=(14, 8, 12)
uop_257 = relay.rsqrt(uop_255.astype('float32')) # shape=(14, 8, 12)
uop_259 = relay.acos(uop_248.astype('float64')) # shape=(14, 8, 12)
bop_261 = relay.left_shift(uop_257.astype('uint32'), relay.reshape(bop_192.astype('uint32'), relay.shape_of(uop_257))) # shape=(14, 8, 12)
uop_264 = relay.atan(uop_221.astype('float32')) # shape=(14, 8, 12)
uop_266 = relay.log(bop_261.astype('float64')) # shape=(14, 8, 12)
uop_268 = relay.tan(uop_266.astype('float64')) # shape=(14, 8, 12)
bop_270 = relay.mod(uop_268.astype('float32'), relay.reshape(uop_248.astype('float32'), relay.shape_of(uop_268))) # shape=(14, 8, 12)
uop_273 = relay.rsqrt(bop_270.astype('float32')) # shape=(14, 8, 12)
uop_275 = relay.log2(uop_268.astype('float32')) # shape=(14, 8, 12)
bop_277 = relay.greater(uop_275.astype('bool'), relay.reshape(bop_270.astype('bool'), relay.shape_of(uop_275))) # shape=(14, 8, 12)
bop_280 = relay.greater(uop_275.astype('bool'), relay.reshape(const_206.astype('bool'), relay.shape_of(uop_275))) # shape=(14, 8, 12)
uop_283 = relay.acos(uop_275.astype('float32')) # shape=(14, 8, 12)
output = relay.Tuple([bop_167,call_172,const_173,call_175,const_178,bop_189,uop_195,bop_203,bop_211,bop_214,bop_218,bop_227,bop_231,bop_241,bop_245,bop_250,uop_259,uop_264,uop_273,bop_277,bop_280,uop_283,])
output2 = relay.Tuple([bop_167,call_174,const_173,call_179,const_178,bop_189,uop_195,bop_203,bop_211,bop_214,bop_218,bop_227,bop_231,bop_241,bop_245,bop_250,uop_259,uop_264,uop_273,bop_277,bop_280,uop_283,])
func_285 = relay.Function([var_165,var_166,var_217,var_230,var_237,var_244,], output)
mod['func_285'] = func_285
mod = relay.transform.InferType()(mod)
var_286 = relay.var("var_286", dtype = "float32", shape = (1, 8, 12))#candidate|286|(1, 8, 12)|var|float32
var_287 = relay.var("var_287", dtype = "float32", shape = (14, 8, 12))#candidate|287|(14, 8, 12)|var|float32
var_288 = relay.var("var_288", dtype = "bool", shape = (14, 8, 12))#candidate|288|(14, 8, 12)|var|bool
var_289 = relay.var("var_289", dtype = "uint64", shape = (14, 8, 12))#candidate|289|(14, 8, 12)|var|uint64
var_290 = relay.var("var_290", dtype = "bool", shape = (14, 8, 12))#candidate|290|(14, 8, 12)|var|bool
var_291 = relay.var("var_291", dtype = "bool", shape = (14, 8, 12))#candidate|291|(14, 8, 12)|var|bool
output = func_285(var_286,var_287,var_288,var_289,var_290,var_291,)
func_292 = relay.Function([var_286,var_287,var_288,var_289,var_290,var_291,], output)
mutated_mod['func_292'] = func_292
mutated_mod = relay.transform.InferType()(mutated_mod)
var_294 = relay.var("var_294", dtype = "float32", shape = (5,))#candidate|294|(5,)|var|float32
uop_295 = relay.sin(var_294.astype('float32')) # shape=(5,)
bop_297 = relay.minimum(uop_295.astype('uint16'), relay.reshape(var_294.astype('uint16'), relay.shape_of(uop_295))) # shape=(5,)
bop_300 = relay.mod(bop_297.astype('float64'), relay.reshape(var_294.astype('float64'), relay.shape_of(bop_297))) # shape=(5,)
uop_303 = relay.erf(bop_297.astype('float32')) # shape=(5,)
uop_305 = relay.log10(uop_303.astype('float32')) # shape=(5,)
uop_307 = relay.log2(uop_305.astype('float32')) # shape=(5,)
uop_309 = relay.cosh(uop_305.astype('float32')) # shape=(5,)
uop_311 = relay.log(bop_297.astype('float64')) # shape=(5,)
var_313 = relay.var("var_313", dtype = "float64", shape = (5,))#candidate|313|(5,)|var|float64
bop_314 = relay.less_equal(uop_311.astype('bool'), relay.reshape(var_313.astype('bool'), relay.shape_of(uop_311))) # shape=(5,)
uop_317 = relay.sqrt(uop_305.astype('float64')) # shape=(5,)
output = relay.Tuple([bop_300,uop_307,uop_309,bop_314,uop_317,])
output2 = relay.Tuple([bop_300,uop_307,uop_309,bop_314,uop_317,])
func_319 = relay.Function([var_294,var_313,], output)
mod['func_319'] = func_319
mod = relay.transform.InferType()(mod)
var_320 = relay.var("var_320", dtype = "float32", shape = (5,))#candidate|320|(5,)|var|float32
var_321 = relay.var("var_321", dtype = "float64", shape = (5,))#candidate|321|(5,)|var|float64
output = func_319(var_320,var_321,)
func_322 = relay.Function([var_320,var_321,], output)
mutated_mod['func_322'] = func_322
mutated_mod = relay.transform.InferType()(mutated_mod)
var_324 = relay.var("var_324", dtype = "float32", shape = ())#candidate|324|()|var|float32
uop_325 = relay.cosh(var_324.astype('float32')) # shape=()
uop_327 = relay.sin(uop_325.astype('float32')) # shape=()
uop_329 = relay.sinh(uop_327.astype('float64')) # shape=()
output = relay.Tuple([uop_329,])
output2 = relay.Tuple([uop_329,])
F = relay.Function([var_324,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_324,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
	relay.transform.DefuseOps(),
	relay.transform.SimplifyExpr(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_324= np.array(-2.509451, dtype='float32')
module1.set_input('var_324', input_324)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_324, )
res3 = intrp3.evaluate()(input_324, )
res4 = intrp4.evaluate()(input_324, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input('var_324', input_324)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_324, )
res7 = intrp7.evaluate()(input_324, )
res8 = intrp8.evaluate()(input_324, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input('var_324', input_324)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_324, )
res11 = intrp11.evaluate()(input_324, )
res12 = intrp12.evaluate()(input_324, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input('var_324', input_324)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_324, )
res15 = intrp15.evaluate()(input_324, )
res16 = intrp16.evaluate()(input_324, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input('var_324', input_324)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_324, )
res19 = intrp19.evaluate()(input_324, )
res20 = intrp20.evaluate()(input_324, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input('var_324', input_324)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_324, )
res23 = intrp23.evaluate()(input_324, )
res24 = intrp24.evaluate()(input_324, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''67: TVMFuncCall
66: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
65: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
64: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
63: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
62: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
61: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
60: tvm::transform::Pass::operator()(tvm::IRModule) const
59: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
58: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
57: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
56: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
55: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
54: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
53: tvm::transform::Pass::operator()(tvm::IRModule) const
52: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
51: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
50: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
49: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
48: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
47: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
46: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
45: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
44: _ZN3tvm5relay9transform22Devic
43: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
42: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
41: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
40: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
39: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
38: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
37: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
36: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
35: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
34: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
33: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
32: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
31: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
30: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
29: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
28: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
27: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
26: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
25: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
12: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
9: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
8: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
7: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
6: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
5: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
3: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
2: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
1: tvm::relay::tec::PrimFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
0: tvm::relay::tec::ScheduleBuilder::Create(tvm::relay::Function const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)

'''