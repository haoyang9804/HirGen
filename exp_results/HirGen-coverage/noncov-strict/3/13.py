import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "int64", shape = ())#candidate|0|()|var|int64
const_1 = relay.const([[[-4,-9,-8,-10,4,-1],[-3,1,10,2,5,1],[-10,-8,3,10,-6,2],[2,10,-7,-6,-4,2]],[[2,-5,1,-5,-4,9],[3,-5,-6,5,-1,8],[6,10,1,-3,3,-4],[-5,9,-3,9,6,7]],[[2,-4,6,1,-3,9],[3,9,-1,-2,1,8],[-10,2,-2,1,-10,7],[6,6,-10,-5,9,9]],[[-8,-10,4,5,-6,1],[-5,-4,-7,8,10,3],[1,3,4,3,4,-1],[3,2,2,-9,-8,-9]],[[-5,-10,-3,7,1,-7],[5,-6,-5,-7,6,10],[-7,-4,-4,-1,4,-8],[-4,-2,-6,-1,10,9]],[[-8,-4,10,-2,-4,1],[1,-9,-5,1,-1,-6],[3,9,9,-9,-6,1],[6,2,-10,-8,-9,4]],[[-3,5,8,-2,-1,4],[-8,-8,7,-2,-1,-3],[-1,1,-7,6,-10,3],[-2,-8,-5,-6,-7,-1]],[[2,-7,10,-5,2,-3],[-1,-8,-9,8,7,8],[-10,9,7,-4,-1,-5],[3,-6,-5,2,7,6]],[[5,1,10,8,-4,-9],[-4,1,4,-10,5,1],[-2,-6,5,9,6,5],[-7,-7,-9,1,1,-1]],[[-7,3,-5,-2,7,10],[-1,-3,-6,4,1,-4],[10,-4,-7,-6,-3,6],[1,-7,-5,-10,3,-5]],[[4,-4,-1,-5,-4,-9],[-3,-7,4,-6,-1,-5],[9,5,1,-3,-9,1],[-5,-8,7,-2,-4,9]],[[-2,5,8,-2,-5,1],[6,10,10,3,8,-4],[1,-5,7,-3,9,-2],[7,-3,10,-6,-7,10]],[[-8,3,-4,-10,5,2],[-9,10,-2,-4,6,-9],[1,-1,-4,6,-3,9],[-7,4,4,5,10,3]],[[8,3,7,8,-9,-8],[9,-6,-4,10,6,5],[-10,5,-6,4,-8,-7],[8,2,-6,2,-4,-8]],[[5,-2,-1,-1,7,-1],[-8,8,1,-10,-3,-8],[-5,-4,1,9,-9,-7],[8,-3,5,10,10,-9]]], dtype = "int64")#candidate|1|(15, 4, 6)|const|int64
bop_2 = relay.subtract(var_0.astype('int64'), const_1.astype('int64')) # shape=(15, 4, 6)
uop_5 = relay.sin(const_1.astype('float32')) # shape=(15, 4, 6)
bop_7 = relay.floor_divide(var_0.astype('float32'), const_1.astype('float32')) # shape=(15, 4, 6)
bop_10 = relay.power(uop_5.astype('float64'), relay.reshape(bop_7.astype('float64'), relay.shape_of(uop_5))) # shape=(15, 4, 6)
var_13 = relay.var("var_13", dtype = "float32", shape = (15, 4, 6))#candidate|13|(15, 4, 6)|var|float32
bop_14 = relay.equal(uop_5.astype('bool'), relay.reshape(var_13.astype('bool'), relay.shape_of(uop_5))) # shape=(15, 4, 6)
uop_17 = relay.sigmoid(uop_5.astype('float32')) # shape=(15, 4, 6)
bop_19 = relay.maximum(uop_17.astype('int32'), relay.reshape(uop_5.astype('int32'), relay.shape_of(uop_17))) # shape=(15, 4, 6)
bop_22 = relay.logical_or(bop_19.astype('bool'), relay.reshape(bop_14.astype('bool'), relay.shape_of(bop_19))) # shape=(15, 4, 6)
bop_25 = relay.bitwise_or(uop_5.astype('uint64'), relay.reshape(var_13.astype('uint64'), relay.shape_of(uop_5))) # shape=(15, 4, 6)
uop_28 = relay.log2(bop_7.astype('float32')) # shape=(15, 4, 6)
uop_30 = relay.tan(bop_22.astype('float64')) # shape=(15, 4, 6)
const_32 = relay.const([[[-6,-6,7,-2,-4,-7],[-8,-8,4,7,1,-4],[-6,9,4,9,4,-6],[9,-5,-6,5,-7,-9]],[[7,9,-10,9,3,8],[-7,-9,4,-3,1,7],[-10,5,3,8,-2,6],[-10,-5,-4,-2,2,3]],[[5,1,3,7,-2,3],[-4,5,-8,7,-9,-10],[-7,-7,4,-7,5,-8],[9,4,-6,7,7,-8]],[[-5,2,-9,-9,7,-7],[6,-1,-3,-1,-2,4],[-3,-10,2,-5,2,3],[2,-8,-9,-1,1,10]],[[-10,-8,8,-4,10,-3],[-1,9,8,7,-7,-8],[-3,3,-10,8,4,6],[-8,2,4,10,6,3]],[[3,-3,-6,-7,9,-3],[-3,-2,-8,8,7,-4],[7,-8,-3,-6,-10,7],[9,7,3,10,-2,2]],[[9,8,2,-8,-5,-10],[7,7,5,3,9,4],[9,-10,4,-3,-2,10],[-2,-2,5,7,10,-9]],[[-9,8,2,10,4,2],[-1,-3,-5,-6,-1,4],[-10,10,-7,4,-1,4],[2,5,-3,6,-4,-7]],[[-1,-6,1,2,2,-3],[1,5,-8,3,2,-10],[7,-8,-4,-9,-8,-1],[6,-2,5,7,1,-6]],[[-10,2,9,6,-7,-4],[-9,-10,-8,6,4,2],[3,3,-3,6,-10,-7],[8,4,8,-8,2,2]],[[7,-4,7,-10,9,-8],[-4,8,-1,-2,8,6],[-5,1,-10,-7,-2,-8],[9,1,3,10,4,-3]],[[3,-5,3,-5,6,4],[-10,3,-4,-2,10,2],[-5,-3,2,-5,3,-6],[-1,-5,-8,1,1,-9]],[[-6,7,8,-1,4,1],[10,-1,-6,-9,9,-4],[-4,4,-10,8,5,1],[-5,-6,6,4,-5,-1]],[[3,8,6,8,8,5],[4,5,9,3,-8,-4],[8,2,-5,2,3,-10],[5,-10,10,2,-7,3]],[[3,-3,-7,-7,6,-8],[-10,-1,-2,5,8,2],[-9,2,-1,5,5,5],[2,6,-9,1,5,-6]]], dtype = "int32")#candidate|32|(15, 4, 6)|const|int32
bop_33 = relay.less(bop_19.astype('bool'), relay.reshape(const_32.astype('bool'), relay.shape_of(bop_19))) # shape=(15, 4, 6)
output = relay.Tuple([bop_2,bop_10,bop_25,uop_28,uop_30,bop_33,])
output2 = relay.Tuple([bop_2,bop_10,bop_25,uop_28,uop_30,bop_33,])
func_36 = relay.Function([var_0,var_13,], output)
mod['func_36'] = func_36
mod = relay.transform.InferType()(mod)
mutated_mod['func_36'] = func_36
mutated_mod = relay.transform.InferType()(mutated_mod)
func_36_call = mutated_mod.get_global_var('func_36')
var_38 = relay.var("var_38", dtype = "int64", shape = ())#candidate|38|()|var|int64
var_39 = relay.var("var_39", dtype = "float32", shape = (15, 4, 6))#candidate|39|(15, 4, 6)|var|float32
call_37 = func_36_call(var_38,var_39,)
output = call_37
func_40 = relay.Function([var_38,var_39,], output)
mutated_mod['func_40'] = func_40
mutated_mod = relay.transform.InferType()(mutated_mod)
var_42 = relay.var("var_42", dtype = "float32", shape = (5,))#candidate|42|(5,)|var|float32
uop_43 = relay.log(var_42.astype('float32')) # shape=(5,)
uop_45 = relay.sin(uop_43.astype('float64')) # shape=(5,)
func_36_call = mod.get_global_var('func_36')
func_40_call = mutated_mod.get_global_var('func_40')
const_48 = relay.const(-2, dtype = "int64")#candidate|48|()|const|int64
var_49 = relay.var("var_49", dtype = "float32", shape = (360,))#candidate|49|(360,)|var|float32
call_47 = relay.TupleGetItem(func_36_call(relay.reshape(const_48.astype('int64'), []), relay.reshape(var_49.astype('float32'), [15, 4, 6]), ), 3)
call_50 = relay.TupleGetItem(func_40_call(relay.reshape(const_48.astype('int64'), []), relay.reshape(var_49.astype('float32'), [15, 4, 6]), ), 3)
bop_51 = relay.logical_xor(uop_43.astype('uint8'), const_48.astype('uint8')) # shape=(5,)
bop_54 = relay.equal(bop_51.astype('bool'), relay.reshape(uop_43.astype('bool'), relay.shape_of(bop_51))) # shape=(5,)
bop_57 = relay.logical_or(uop_45.astype('bool'), relay.reshape(bop_51.astype('bool'), relay.shape_of(uop_45))) # shape=(5,)
output = relay.Tuple([call_47,var_49,bop_54,bop_57,])
output2 = relay.Tuple([call_50,var_49,bop_54,bop_57,])
func_60 = relay.Function([var_42,var_49,], output)
mod['func_60'] = func_60
mod = relay.transform.InferType()(mod)
mutated_mod['func_60'] = func_60
mutated_mod = relay.transform.InferType()(mutated_mod)
func_60_call = mutated_mod.get_global_var('func_60')
var_62 = relay.var("var_62", dtype = "float32", shape = (5,))#candidate|62|(5,)|var|float32
var_63 = relay.var("var_63", dtype = "float32", shape = (360,))#candidate|63|(360,)|var|float32
call_61 = func_60_call(var_62,var_63,)
output = call_61
func_64 = relay.Function([var_62,var_63,], output)
mutated_mod['func_64'] = func_64
mutated_mod = relay.transform.InferType()(mutated_mod)
var_66 = relay.var("var_66", dtype = "uint16", shape = (12, 6))#candidate|66|(12, 6)|var|uint16
var_67 = relay.var("var_67", dtype = "uint16", shape = (12, 6))#candidate|67|(12, 6)|var|uint16
bop_68 = relay.logical_xor(var_66.astype('uint16'), relay.reshape(var_67.astype('uint16'), relay.shape_of(var_66))) # shape=(12, 6)
bop_71 = relay.minimum(var_67.astype('int16'), relay.reshape(var_66.astype('int16'), relay.shape_of(var_67))) # shape=(12, 6)
uop_74 = relay.atan(var_67.astype('float32')) # shape=(12, 6)
uop_76 = relay.asin(bop_71.astype('float32')) # shape=(12, 6)
bop_78 = relay.multiply(var_66.astype('int8'), relay.reshape(var_67.astype('int8'), relay.shape_of(var_66))) # shape=(12, 6)
const_81 = relay.const([[10,2,-5,10,-8,7],[7,-9,-5,-4,-6,-6],[-7,4,-10,9,-8,5],[-10,7,-5,-9,8,-3],[-6,5,4,-6,4,10],[9,-5,-10,8,7,-7],[-10,5,4,-3,7,-4],[-9,3,-10,-9,-2,-6],[7,4,9,-4,-8,7],[9,4,-7,-6,-9,-2],[-3,10,7,10,9,-8],[5,-7,3,5,-5,-9]], dtype = "uint16")#candidate|81|(12, 6)|const|uint16
bop_82 = relay.less_equal(bop_68.astype('bool'), relay.reshape(const_81.astype('bool'), relay.shape_of(bop_68))) # shape=(12, 6)
var_85 = relay.var("var_85", dtype = "uint16", shape = (12, 6))#candidate|85|(12, 6)|var|uint16
bop_86 = relay.multiply(bop_68.astype('float32'), relay.reshape(var_85.astype('float32'), relay.shape_of(bop_68))) # shape=(12, 6)
uop_89 = relay.cos(uop_76.astype('float64')) # shape=(12, 6)
uop_91 = relay.atanh(uop_89.astype('float32')) # shape=(12, 6)
uop_93 = relay.cosh(bop_78.astype('float32')) # shape=(12, 6)
bop_95 = relay.bitwise_and(uop_91.astype('uint8'), relay.reshape(uop_89.astype('uint8'), relay.shape_of(uop_91))) # shape=(12, 6)
output = relay.Tuple([uop_74,bop_82,bop_86,uop_93,bop_95,])
output2 = relay.Tuple([uop_74,bop_82,bop_86,uop_93,bop_95,])
func_98 = relay.Function([var_66,var_67,var_85,], output)
mod['func_98'] = func_98
mod = relay.transform.InferType()(mod)
var_99 = relay.var("var_99", dtype = "uint16", shape = (12, 6))#candidate|99|(12, 6)|var|uint16
var_100 = relay.var("var_100", dtype = "uint16", shape = (12, 6))#candidate|100|(12, 6)|var|uint16
var_101 = relay.var("var_101", dtype = "uint16", shape = (12, 6))#candidate|101|(12, 6)|var|uint16
output = func_98(var_99,var_100,var_101,)
func_102 = relay.Function([var_99,var_100,var_101,], output)
mutated_mod['func_102'] = func_102
mutated_mod = relay.transform.InferType()(mutated_mod)
var_104 = relay.var("var_104", dtype = "float32", shape = (16,))#candidate|104|(16,)|var|float32
const_105 = relay.const([-7.268805,7.602613,2.172324,5.287182,0.637251,7.425911,1.977961,-8.169587,-3.726910,-5.648520,7.178304,5.350932,-0.779406,2.556585,4.652004,-3.230406], dtype = "float32")#candidate|105|(16,)|const|float32
bop_106 = relay.less(var_104.astype('bool'), relay.reshape(const_105.astype('bool'), relay.shape_of(var_104))) # shape=(16,)
uop_109 = relay.acos(const_105.astype('float32')) # shape=(16,)
var_111 = relay.var("var_111", dtype = "float32", shape = (16,))#candidate|111|(16,)|var|float32
bop_112 = relay.mod(uop_109.astype('float32'), relay.reshape(var_111.astype('float32'), relay.shape_of(uop_109))) # shape=(16,)
uop_115 = relay.atan(uop_109.astype('float32')) # shape=(16,)
bop_117 = relay.bitwise_xor(bop_112.astype('uint8'), relay.reshape(const_105.astype('uint8'), relay.shape_of(bop_112))) # shape=(16,)
output = relay.Tuple([bop_106,uop_115,bop_117,])
output2 = relay.Tuple([bop_106,uop_115,bop_117,])
func_120 = relay.Function([var_104,var_111,], output)
mod['func_120'] = func_120
mod = relay.transform.InferType()(mod)
var_121 = relay.var("var_121", dtype = "float32", shape = (16,))#candidate|121|(16,)|var|float32
var_122 = relay.var("var_122", dtype = "float32", shape = (16,))#candidate|122|(16,)|var|float32
output = func_120(var_121,var_122,)
func_123 = relay.Function([var_121,var_122,], output)
mutated_mod['func_123'] = func_123
mutated_mod = relay.transform.InferType()(mutated_mod)
var_125 = relay.var("var_125", dtype = "float32", shape = (12,))#candidate|125|(12,)|var|float32
uop_126 = relay.rsqrt(var_125.astype('float32')) # shape=(12,)
uop_128 = relay.sinh(uop_126.astype('float32')) # shape=(12,)
uop_130 = relay.cosh(uop_128.astype('float32')) # shape=(12,)
var_132 = relay.var("var_132", dtype = "float32", shape = (12,))#candidate|132|(12,)|var|float32
bop_133 = relay.power(uop_130.astype('float32'), relay.reshape(var_132.astype('float32'), relay.shape_of(uop_130))) # shape=(12,)
uop_136 = relay.sqrt(uop_130.astype('float32')) # shape=(12,)
const_138 = relay.const([5.155513,-4.211322,-4.049655,-7.447811,5.512873,-3.955717,-4.091060,2.509177,7.621231,-2.314985,-9.845546,1.071686], dtype = "float32")#candidate|138|(12,)|const|float32
bop_139 = relay.floor_mod(uop_136.astype('float64'), relay.reshape(const_138.astype('float64'), relay.shape_of(uop_136))) # shape=(12,)
uop_142 = relay.asinh(uop_136.astype('float32')) # shape=(12,)
uop_144 = relay.log(uop_142.astype('float64')) # shape=(12,)
output = relay.Tuple([bop_133,bop_139,uop_144,])
output2 = relay.Tuple([bop_133,bop_139,uop_144,])
func_146 = relay.Function([var_125,var_132,], output)
mod['func_146'] = func_146
mod = relay.transform.InferType()(mod)
mutated_mod['func_146'] = func_146
mutated_mod = relay.transform.InferType()(mutated_mod)
func_146_call = mutated_mod.get_global_var('func_146')
var_148 = relay.var("var_148", dtype = "float32", shape = (12,))#candidate|148|(12,)|var|float32
var_149 = relay.var("var_149", dtype = "float32", shape = (12,))#candidate|149|(12,)|var|float32
call_147 = func_146_call(var_148,var_149,)
output = call_147
func_150 = relay.Function([var_148,var_149,], output)
mutated_mod['func_150'] = func_150
mutated_mod = relay.transform.InferType()(mutated_mod)
var_152 = relay.var("var_152", dtype = "float32", shape = ())#candidate|152|()|var|float32
uop_153 = relay.tan(var_152.astype('float32')) # shape=()
uop_155 = relay.atan(uop_153.astype('float32')) # shape=()
uop_157 = relay.log10(uop_153.astype('float64')) # shape=()
bop_159 = relay.maximum(uop_157.astype('float64'), var_152.astype('float64')) # shape=()
bop_162 = relay.right_shift(uop_153.astype('int32'), bop_159.astype('int32')) # shape=()
uop_165 = relay.tan(uop_157.astype('float64')) # shape=()
bop_167 = relay.greater(uop_153.astype('bool'), var_152.astype('bool')) # shape=()
bop_170 = relay.less(bop_162.astype('bool'), bop_167.astype('bool')) # shape=()
output = relay.Tuple([uop_155,uop_165,bop_170,])
output2 = relay.Tuple([uop_155,uop_165,bop_170,])
func_173 = relay.Function([var_152,], output)
mod['func_173'] = func_173
mod = relay.transform.InferType()(mod)
var_174 = relay.var("var_174", dtype = "float32", shape = ())#candidate|174|()|var|float32
output = func_173(var_174)
func_175 = relay.Function([var_174], output)
mutated_mod['func_175'] = func_175
mutated_mod = relay.transform.InferType()(mutated_mod)
var_177 = relay.var("var_177", dtype = "int16", shape = (4, 4))#candidate|177|(4, 4)|var|int16
const_178 = relay.const([[10,-5,-1,2],[4,-3,4,-4],[4,-6,2,-4],[-6,-6,-7,-6]], dtype = "int16")#candidate|178|(4, 4)|const|int16
bop_179 = relay.multiply(var_177.astype('int16'), relay.reshape(const_178.astype('int16'), relay.shape_of(var_177))) # shape=(4, 4)
uop_182 = relay.rsqrt(bop_179.astype('float64')) # shape=(4, 4)
bop_184 = relay.equal(uop_182.astype('bool'), relay.reshape(var_177.astype('bool'), relay.shape_of(uop_182))) # shape=(4, 4)
var_187 = relay.var("var_187", dtype = "int16", shape = (4, 4))#candidate|187|(4, 4)|var|int16
bop_188 = relay.minimum(bop_179.astype('uint64'), relay.reshape(var_187.astype('uint64'), relay.shape_of(bop_179))) # shape=(4, 4)
var_191 = relay.var("var_191", dtype = "float64", shape = (4, 4))#candidate|191|(4, 4)|var|float64
bop_192 = relay.divide(uop_182.astype('float32'), relay.reshape(var_191.astype('float32'), relay.shape_of(uop_182))) # shape=(4, 4)
bop_195 = relay.add(bop_192.astype('uint64'), relay.reshape(bop_179.astype('uint64'), relay.shape_of(bop_192))) # shape=(4, 4)
bop_198 = relay.equal(var_187.astype('bool'), relay.reshape(bop_192.astype('bool'), relay.shape_of(var_187))) # shape=(4, 4)
bop_201 = relay.not_equal(uop_182.astype('bool'), relay.reshape(var_191.astype('bool'), relay.shape_of(uop_182))) # shape=(4, 4)
output = relay.Tuple([bop_184,bop_188,bop_195,bop_198,bop_201,])
output2 = relay.Tuple([bop_184,bop_188,bop_195,bop_198,bop_201,])
func_204 = relay.Function([var_177,var_187,var_191,], output)
mod['func_204'] = func_204
mod = relay.transform.InferType()(mod)
var_205 = relay.var("var_205", dtype = "int16", shape = (4, 4))#candidate|205|(4, 4)|var|int16
var_206 = relay.var("var_206", dtype = "int16", shape = (4, 4))#candidate|206|(4, 4)|var|int16
var_207 = relay.var("var_207", dtype = "float64", shape = (4, 4))#candidate|207|(4, 4)|var|float64
output = func_204(var_205,var_206,var_207,)
func_208 = relay.Function([var_205,var_206,var_207,], output)
mutated_mod['func_208'] = func_208
mutated_mod = relay.transform.InferType()(mutated_mod)
var_210 = relay.var("var_210", dtype = "uint64", shape = ())#candidate|210|()|var|uint64
var_211 = relay.var("var_211", dtype = "uint64", shape = (7, 9, 9))#candidate|211|(7, 9, 9)|var|uint64
bop_212 = relay.left_shift(var_210.astype('uint64'), var_211.astype('uint64')) # shape=(7, 9, 9)
uop_215 = relay.sin(var_211.astype('float32')) # shape=(7, 9, 9)
func_146_call = mod.get_global_var('func_146')
func_150_call = mutated_mod.get_global_var('func_150')
const_218 = relay.const([-8.259452,-4.693303,1.033846,-9.047420,-7.527836,2.216929,-1.057717,-2.637603,-5.904730,-0.971695,4.487124,9.092883], dtype = "float32")#candidate|218|(12,)|const|float32
call_217 = relay.TupleGetItem(func_146_call(relay.reshape(const_218.astype('float32'), [12,]), relay.reshape(const_218.astype('float32'), [12,]), ), 1)
call_219 = relay.TupleGetItem(func_150_call(relay.reshape(const_218.astype('float32'), [12,]), relay.reshape(const_218.astype('float32'), [12,]), ), 1)
bop_220 = relay.left_shift(const_218.astype('uint16'), relay.reshape(call_217.astype('uint16'), relay.shape_of(const_218))) # shape=(12,)
bop_223 = relay.left_shift(const_218.astype('uint16'), relay.reshape(call_219.astype('uint16'), relay.shape_of(const_218))) # shape=(12,)
uop_224 = relay.erf(call_217.astype('float32')) # shape=(12,)
uop_226 = relay.erf(call_219.astype('float32')) # shape=(12,)
uop_227 = relay.log(bop_220.astype('float32')) # shape=(12,)
uop_229 = relay.log(bop_223.astype('float32')) # shape=(12,)
uop_230 = relay.sqrt(uop_227.astype('float32')) # shape=(12,)
uop_232 = relay.sqrt(uop_229.astype('float32')) # shape=(12,)
uop_233 = relay.cosh(uop_227.astype('float32')) # shape=(12,)
uop_235 = relay.cosh(uop_229.astype('float32')) # shape=(12,)
var_236 = relay.var("var_236", dtype = "float32", shape = (12,))#candidate|236|(12,)|var|float32
bop_237 = relay.bitwise_xor(uop_224.astype('int32'), relay.reshape(var_236.astype('int32'), relay.shape_of(uop_224))) # shape=(12,)
bop_240 = relay.bitwise_xor(uop_226.astype('int32'), relay.reshape(var_236.astype('int32'), relay.shape_of(uop_226))) # shape=(12,)
uop_241 = relay.cosh(uop_233.astype('float64')) # shape=(12,)
uop_243 = relay.cosh(uop_235.astype('float64')) # shape=(12,)
bop_244 = relay.left_shift(bop_237.astype('int64'), relay.reshape(uop_224.astype('int64'), relay.shape_of(bop_237))) # shape=(12,)
bop_247 = relay.left_shift(bop_240.astype('int64'), relay.reshape(uop_226.astype('int64'), relay.shape_of(bop_240))) # shape=(12,)
bop_248 = relay.multiply(uop_233.astype('uint8'), relay.reshape(uop_227.astype('uint8'), relay.shape_of(uop_233))) # shape=(12,)
bop_251 = relay.multiply(uop_235.astype('uint8'), relay.reshape(uop_229.astype('uint8'), relay.shape_of(uop_235))) # shape=(12,)
bop_252 = relay.logical_xor(bop_212.astype('int16'), var_210.astype('int16')) # shape=(7, 9, 9)
output = relay.Tuple([uop_215,uop_230,uop_241,bop_244,bop_248,bop_252,])
output2 = relay.Tuple([uop_215,uop_232,uop_243,bop_247,bop_251,bop_252,])
func_255 = relay.Function([var_210,var_211,var_236,], output)
mod['func_255'] = func_255
mod = relay.transform.InferType()(mod)
mutated_mod['func_255'] = func_255
mutated_mod = relay.transform.InferType()(mutated_mod)
func_255_call = mutated_mod.get_global_var('func_255')
var_257 = relay.var("var_257", dtype = "uint64", shape = ())#candidate|257|()|var|uint64
var_258 = relay.var("var_258", dtype = "uint64", shape = (7, 9, 9))#candidate|258|(7, 9, 9)|var|uint64
var_259 = relay.var("var_259", dtype = "float32", shape = (12,))#candidate|259|(12,)|var|float32
call_256 = func_255_call(var_257,var_258,var_259,)
output = call_256
func_260 = relay.Function([var_257,var_258,var_259,], output)
mutated_mod['func_260'] = func_260
mutated_mod = relay.transform.InferType()(mutated_mod)
var_262 = relay.var("var_262", dtype = "uint16", shape = (3, 3, 13))#candidate|262|(3, 3, 13)|var|uint16
var_263 = relay.var("var_263", dtype = "uint16", shape = (3, 3, 13))#candidate|263|(3, 3, 13)|var|uint16
bop_264 = relay.equal(var_262.astype('bool'), relay.reshape(var_263.astype('bool'), relay.shape_of(var_262))) # shape=(3, 3, 13)
var_267 = relay.var("var_267", dtype = "uint16", shape = (3, 3, 13))#candidate|267|(3, 3, 13)|var|uint16
bop_268 = relay.floor_divide(var_263.astype('float64'), relay.reshape(var_267.astype('float64'), relay.shape_of(var_263))) # shape=(3, 3, 13)
bop_271 = relay.floor_mod(var_263.astype('float32'), relay.reshape(bop_268.astype('float32'), relay.shape_of(var_263))) # shape=(3, 3, 13)
var_274 = relay.var("var_274", dtype = "float32", shape = (3, 3, 13))#candidate|274|(3, 3, 13)|var|float32
bop_275 = relay.greater(bop_271.astype('bool'), relay.reshape(var_274.astype('bool'), relay.shape_of(bop_271))) # shape=(3, 3, 13)
uop_278 = relay.sin(bop_268.astype('float32')) # shape=(3, 3, 13)
output = relay.Tuple([bop_264,bop_275,uop_278,])
output2 = relay.Tuple([bop_264,bop_275,uop_278,])
func_280 = relay.Function([var_262,var_263,var_267,var_274,], output)
mod['func_280'] = func_280
mod = relay.transform.InferType()(mod)
var_281 = relay.var("var_281", dtype = "uint16", shape = (3, 3, 13))#candidate|281|(3, 3, 13)|var|uint16
var_282 = relay.var("var_282", dtype = "uint16", shape = (3, 3, 13))#candidate|282|(3, 3, 13)|var|uint16
var_283 = relay.var("var_283", dtype = "uint16", shape = (3, 3, 13))#candidate|283|(3, 3, 13)|var|uint16
var_284 = relay.var("var_284", dtype = "float32", shape = (3, 3, 13))#candidate|284|(3, 3, 13)|var|float32
output = func_280(var_281,var_282,var_283,var_284,)
func_285 = relay.Function([var_281,var_282,var_283,var_284,], output)
mutated_mod['func_285'] = func_285
mutated_mod = relay.transform.InferType()(mutated_mod)
var_287 = relay.var("var_287", dtype = "float32", shape = (5,))#candidate|287|(5,)|var|float32
uop_288 = relay.erf(var_287.astype('float32')) # shape=(5,)
uop_290 = relay.asin(uop_288.astype('float64')) # shape=(5,)
bop_292 = relay.bitwise_and(uop_290.astype('int8'), relay.reshape(uop_288.astype('int8'), relay.shape_of(uop_290))) # shape=(5,)
bop_295 = relay.logical_xor(var_287.astype('uint16'), relay.reshape(bop_292.astype('uint16'), relay.shape_of(var_287))) # shape=(5,)
bop_298 = relay.maximum(var_287.astype('int32'), relay.reshape(uop_288.astype('int32'), relay.shape_of(var_287))) # shape=(5,)
bop_301 = relay.power(bop_298.astype('float64'), relay.reshape(bop_295.astype('float64'), relay.shape_of(bop_298))) # shape=(5,)
bop_304 = relay.floor_mod(bop_298.astype('float32'), relay.reshape(bop_292.astype('float32'), relay.shape_of(bop_298))) # shape=(5,)
bop_307 = relay.maximum(uop_288.astype('uint16'), relay.reshape(uop_290.astype('uint16'), relay.shape_of(uop_288))) # shape=(5,)
bop_310 = relay.less_equal(var_287.astype('bool'), relay.reshape(bop_307.astype('bool'), relay.shape_of(var_287))) # shape=(5,)
uop_313 = relay.log(bop_307.astype('float64')) # shape=(5,)
output = relay.Tuple([bop_301,bop_304,bop_310,uop_313,])
output2 = relay.Tuple([bop_301,bop_304,bop_310,uop_313,])
func_315 = relay.Function([var_287,], output)
mod['func_315'] = func_315
mod = relay.transform.InferType()(mod)
mutated_mod['func_315'] = func_315
mutated_mod = relay.transform.InferType()(mutated_mod)
var_316 = relay.var("var_316", dtype = "float32", shape = (5,))#candidate|316|(5,)|var|float32
func_315_call = mutated_mod.get_global_var('func_315')
call_317 = func_315_call(var_316)
output = call_317
func_318 = relay.Function([var_316], output)
mutated_mod['func_318'] = func_318
mutated_mod = relay.transform.InferType()(mutated_mod)
var_320 = relay.var("var_320", dtype = "int32", shape = (4, 12))#candidate|320|(4, 12)|var|int32
const_321 = relay.const([[10,7,-5,-6,-1,8,-9,-6,10,7,-1,-7],[3,-10,-2,4,4,-1,8,3,6,3,6,8],[-7,-1,5,1,-1,-5,-9,4,4,-4,3,-4],[-1,-2,8,2,4,-4,-5,-9,3,-9,4,-8]], dtype = "int32")#candidate|321|(4, 12)|const|int32
bop_322 = relay.right_shift(var_320.astype('int32'), relay.reshape(const_321.astype('int32'), relay.shape_of(var_320))) # shape=(4, 12)
bop_325 = relay.divide(const_321.astype('float64'), relay.reshape(bop_322.astype('float64'), relay.shape_of(const_321))) # shape=(4, 12)
bop_328 = relay.floor_mod(const_321.astype('float64'), relay.reshape(bop_322.astype('float64'), relay.shape_of(const_321))) # shape=(4, 12)
bop_331 = relay.right_shift(bop_322.astype('uint64'), relay.reshape(const_321.astype('uint64'), relay.shape_of(bop_322))) # shape=(4, 12)
output = relay.Tuple([bop_325,bop_328,bop_331,])
output2 = relay.Tuple([bop_325,bop_328,bop_331,])
func_334 = relay.Function([var_320,], output)
mod['func_334'] = func_334
mod = relay.transform.InferType()(mod)
var_335 = relay.var("var_335", dtype = "int32", shape = (4, 12))#candidate|335|(4, 12)|var|int32
output = func_334(var_335)
func_336 = relay.Function([var_335], output)
mutated_mod['func_336'] = func_336
mutated_mod = relay.transform.InferType()(mutated_mod)
const_338 = relay.const(3.864586, dtype = "float64")#candidate|338|()|const|float64
uop_339 = relay.erf(const_338.astype('float64')) # shape=()
func_204_call = mod.get_global_var('func_204')
func_208_call = mutated_mod.get_global_var('func_208')
var_342 = relay.var("var_342", dtype = "int16", shape = (16,))#candidate|342|(16,)|var|int16
call_341 = relay.TupleGetItem(func_204_call(relay.reshape(var_342.astype('int16'), [4, 4]), relay.reshape(var_342.astype('int16'), [4, 4]), relay.reshape(var_342.astype('float64'), [4, 4]), ), 1)
call_343 = relay.TupleGetItem(func_208_call(relay.reshape(var_342.astype('int16'), [4, 4]), relay.reshape(var_342.astype('int16'), [4, 4]), relay.reshape(var_342.astype('float64'), [4, 4]), ), 1)
output = relay.Tuple([uop_339,call_341,var_342,])
output2 = relay.Tuple([uop_339,call_343,var_342,])
func_344 = relay.Function([var_342,], output)
mod['func_344'] = func_344
mod = relay.transform.InferType()(mod)
var_345 = relay.var("var_345", dtype = "int16", shape = (16,))#candidate|345|(16,)|var|int16
output = func_344(var_345)
func_346 = relay.Function([var_345], output)
mutated_mod['func_346'] = func_346
mutated_mod = relay.transform.InferType()(mutated_mod)
const_348 = relay.const(4.866949, dtype = "float32")#candidate|348|()|const|float32
uop_349 = relay.sigmoid(const_348.astype('float32')) # shape=()
uop_351 = relay.exp(uop_349.astype('float32')) # shape=()
uop_353 = relay.log10(uop_349.astype('float64')) # shape=()
uop_355 = relay.rsqrt(uop_353.astype('float32')) # shape=()
var_357 = relay.var("var_357", dtype = "float32", shape = (8, 8))#candidate|357|(8, 8)|var|float32
bop_358 = relay.not_equal(uop_355.astype('bool'), var_357.astype('bool')) # shape=(8, 8)
bop_361 = relay.less_equal(uop_353.astype('bool'), uop_351.astype('bool')) # shape=()
var_364 = relay.var("var_364", dtype = "float64", shape = (3, 15, 1))#candidate|364|(3, 15, 1)|var|float64
bop_365 = relay.logical_or(uop_353.astype('bool'), var_364.astype('bool')) # shape=(3, 15, 1)
bop_368 = relay.left_shift(bop_358.astype('int32'), uop_351.astype('int32')) # shape=(8, 8)
uop_371 = relay.acosh(uop_349.astype('float64')) # shape=()
bop_373 = relay.bitwise_or(bop_365.astype('uint32'), uop_353.astype('uint32')) # shape=(3, 15, 1)
uop_376 = relay.atan(bop_368.astype('float64')) # shape=(8, 8)
output = relay.Tuple([bop_361,uop_371,bop_373,uop_376,])
output2 = relay.Tuple([bop_361,uop_371,bop_373,uop_376,])
F = relay.Function([var_357,var_364,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_357,var_364,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_357= np.array([[6.662827,1.369577,-8.250723,-1.942285,7.741266,3.708016,7.078020,-7.841322],[8.680864,3.340055,0.211153,-2.861485,3.429965,7.463627,-6.492759,9.534835],[-5.926951,7.235726,7.762994,2.842446,-6.400618,-9.508331,0.314622,0.199713],[9.311508,-8.471254,0.809506,-9.012445,-0.634905,-3.174151,8.562313,3.654769],[-5.025868,6.158956,-6.764116,-2.156137,8.336472,-7.316437,0.732587,0.132493],[-1.077324,9.583205,-0.477350,8.651944,2.651845,2.112741,3.748073,2.778159],[-5.336713,8.569568,6.461499,1.269401,2.025492,3.073649,1.809060,2.570787],[-0.822872,4.763021,-1.144196,-8.836436,-5.133624,-4.687231,-7.947503,5.020445]], dtype='float32')
module1.set_input('var_357', input_357)
input_364= np.array([[[-7.161350],[3.304490],[1.245084],[-4.874570],[-6.217302],[9.251886],[-2.258762],[7.072254],[-5.157255],[8.717652],[3.137346],[-2.873524],[-6.921821],[-3.821321],[-7.633525]],[[6.107785],[-2.595635],[3.277298],[4.143372],[-1.583042],[6.007713],[2.244675],[-5.466024],[3.767234],[3.081938],[0.650229],[-7.868361],[1.268614],[7.959013],[4.439019]],[[8.615320],[-0.748304],[9.414903],[3.081570],[-8.828409],[-6.742365],[-0.399800],[8.427516],[-3.742164],[0.853313],[-2.211189],[8.103575],[-6.783427],[3.522391],[-7.260247]]], dtype='float64')
module1.set_input('var_364', input_364)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_357, input_364, )
res3 = intrp3.evaluate()(input_357, input_364, )
res4 = intrp4.evaluate()(input_357, input_364, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
module5.set_input('var_357', input_357)
module5.set_input('var_364', input_364)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_357, input_364, )
res7 = intrp7.evaluate()(input_357, input_364, )
res8 = intrp8.evaluate()(input_357, input_364, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
module9.set_input('var_357', input_357)
module9.set_input('var_364', input_364)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_357, input_364, )
res11 = intrp11.evaluate()(input_357, input_364, )
res12 = intrp12.evaluate()(input_357, input_364, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
module13.set_input('var_357', input_357)
module13.set_input('var_364', input_364)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_357, input_364, )
res15 = intrp15.evaluate()(input_357, input_364, )
res16 = intrp16.evaluate()(input_357, input_364, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
module17.set_input('var_357', input_357)
module17.set_input('var_364', input_364)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_357, input_364, )
res19 = intrp19.evaluate()(input_357, input_364, )
res20 = intrp20.evaluate()(input_357, input_364, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
module21.set_input('var_357', input_357)
module21.set_input('var_364', input_364)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_357, input_364, )
res23 = intrp23.evaluate()(input_357, input_364, )
res24 = intrp24.evaluate()(input_357, input_364, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()

'''1.325818, 1.325818],

'''