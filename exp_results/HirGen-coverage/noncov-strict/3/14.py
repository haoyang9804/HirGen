import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (10, 4))#candidate|0|(10, 4)|var|float64
const_1 = relay.const([[4.539656,-3.909362,-6.104423,-8.113891],[8.484851,6.056208,-5.486224,5.327131],[1.209940,0.160297,-4.625924,-6.219086],[-9.048279,8.565957,-8.746754,9.278955],[-9.449312,-1.370241,2.751222,1.267226],[-2.799057,9.344904,0.276586,8.678425],[-4.295980,-0.812948,-8.751030,-9.491555],[7.382125,9.646999,1.776739,-6.654003],[-5.571688,-6.516935,3.048685,2.106796],[-8.354390,-5.634475,3.256740,-1.236776]], dtype = "float64")#candidate|1|(10, 4)|const|float64
bop_2 = relay.power(var_0.astype('float64'), relay.reshape(const_1.astype('float64'), relay.shape_of(var_0))) # shape=(10, 4)
output = bop_2
output2 = bop_2
func_5 = relay.Function([var_0,], output)
mod['func_5'] = func_5
mod = relay.transform.InferType()(mod)
mutated_mod['func_5'] = func_5
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6 = relay.var("var_6", dtype = "float64", shape = (10, 4))#candidate|6|(10, 4)|var|float64
func_5_call = mutated_mod.get_global_var('func_5')
call_7 = func_5_call(var_6)
output = call_7
func_8 = relay.Function([var_6], output)
mutated_mod['func_8'] = func_8
mutated_mod = relay.transform.InferType()(mutated_mod)
const_10 = relay.const([[[5.601302,2.734959,1.957961,8.511727,5.813921,-9.494527,-8.440722,-4.086261,-6.511709,7.946321],[4.548410,-3.867199,-6.358624,-8.741770,8.829696,-3.628667,-5.770509,-5.288293,0.704689,6.350137],[-8.990537,-5.054185,7.895916,-4.893746,2.847483,7.431981,-2.507248,8.057274,-7.371897,4.491977],[-1.696963,-0.573177,3.945016,-6.755069,5.424117,6.200831,-5.371249,-7.154432,8.068612,0.750855]],[[-2.615449,4.799825,-0.354338,5.574423,-5.603466,-7.640120,-8.683925,-6.679077,8.323688,-0.426459],[-1.981053,-1.547739,-5.743494,-9.428902,-2.608894,-5.223501,-1.967634,7.552756,-0.299252,5.835014],[4.758807,0.144244,3.491060,7.349124,8.019102,6.301213,0.136228,-4.145733,-3.572812,5.739429],[-0.756928,-0.239831,8.971799,1.256756,-9.865529,7.988538,-2.650467,-2.379895,-1.052739,-4.166030]],[[3.014374,6.700486,-7.382378,-4.867017,-9.558718,4.682776,5.853027,5.851806,6.543046,1.814343],[4.895412,9.774777,4.795514,6.525292,4.724763,3.547552,8.365364,7.494557,-6.494888,2.580020],[-7.954731,6.122815,-2.977524,-2.329670,7.465902,4.197749,-1.391597,-1.468762,-2.282827,2.881684],[-8.995918,4.060730,9.594816,4.187501,-7.370345,-9.664715,6.160052,0.596656,-9.217565,8.392800]],[[3.882171,0.755205,5.125818,4.809836,0.595281,8.389856,-0.972673,-2.159781,3.563047,0.099471],[-6.005071,-5.532234,-3.453909,4.689017,-6.622829,-9.731658,1.192060,4.463362,-4.430303,9.712270],[-7.741050,9.988380,7.072993,-1.748010,9.220901,-2.004973,-7.566965,9.696897,-6.783793,2.115822],[3.579449,-6.770339,1.358877,5.259800,2.095171,-9.695099,6.615075,-3.324180,7.354987,3.213737]],[[-8.528617,-5.819358,1.226085,4.724300,-9.922671,-6.748232,4.469573,-0.744445,-1.823003,-9.046448],[-5.101567,9.026810,-0.357828,-7.139463,9.337196,-4.357534,-3.540481,-0.598469,-3.452675,4.590160],[-6.180200,-6.785544,3.844580,8.246374,-1.252259,2.744327,-5.851235,-6.220955,-0.927737,-6.232283],[-1.939033,3.436313,4.786602,-5.433595,-4.377554,-5.586079,8.965473,-5.990441,5.491587,4.803198]],[[1.078091,9.176954,1.684322,-1.105009,-1.329485,7.204004,2.937147,9.117117,-7.801970,-9.836835],[-5.737056,-2.270577,2.987532,-0.983584,-7.520841,-3.787311,-8.836430,7.384315,7.806088,4.144876],[-1.536886,-3.768829,1.076691,-8.847100,-0.540001,-0.330656,8.415693,-5.354086,4.593002,9.006019],[-3.699435,5.218862,4.160446,9.249623,-4.604644,6.572465,0.404375,-6.448055,9.702557,8.586353]],[[1.288941,-8.467747,-6.507859,6.337074,4.645033,2.807186,-7.341320,-4.488453,8.367606,-3.546085],[-7.191937,-4.302431,-2.751143,8.142203,0.232589,3.874877,-0.411628,6.530579,-6.748074,4.080380],[0.573060,-1.272097,1.514403,-7.181060,-4.830195,3.746610,-3.334780,-3.454226,-9.066979,-5.997463],[-7.279215,4.170694,-4.905442,9.379217,3.289515,-6.995800,8.890885,9.537205,-2.151384,3.921119]],[[-2.519249,2.494555,-3.942113,6.458333,1.588162,-9.323418,4.344139,8.499246,-5.613173,2.421695],[1.392378,4.953803,-0.167314,5.268761,-9.679075,8.326498,3.993637,6.819907,-8.852688,6.555690],[-8.347904,-5.857960,6.375429,3.603247,-2.831107,6.358586,0.934300,1.457861,6.280163,-5.872488],[8.048684,7.588405,-9.367893,1.615877,0.665821,5.784850,-8.359026,-8.804889,0.321662,-2.546627]],[[-7.035010,2.969290,-4.563520,1.926573,9.780705,3.998636,0.993727,-8.613556,2.223179,-9.213480],[-5.410532,-7.397910,7.064619,-9.408361,5.940989,0.625519,-5.725133,1.908080,0.554402,4.735165],[-3.216252,8.247924,8.913630,0.160230,7.911957,4.001297,6.728156,5.643229,-6.047931,9.567662],[-9.576199,7.233586,2.343052,8.122976,4.531571,-4.587072,7.222953,6.564732,6.480005,5.622833]],[[4.537242,-1.373844,-2.779551,5.320335,8.359291,-0.637851,7.782386,-2.392147,-7.164091,3.453559],[-1.445066,6.862870,-6.334568,-8.150738,-1.591578,-8.727079,8.702514,-1.058768,-7.636531,-8.047639],[4.500881,7.725893,8.293894,4.370794,8.918874,9.317174,-7.281623,6.266679,-8.557408,-0.672756],[0.343964,-6.023500,7.919022,7.214726,-2.444559,5.116753,-7.744638,1.857722,1.593179,-3.562078]],[[0.813735,-5.723865,-3.990299,-1.181894,-8.370639,1.126326,-6.434818,-1.029777,5.072969,3.529139],[1.320452,4.433957,-2.780798,7.470174,3.219877,-6.709647,-7.783834,5.944924,0.451443,0.221873],[-1.737730,9.151890,-1.200369,9.289336,1.316303,9.592428,5.440590,5.119197,9.498024,1.011116],[-0.573289,-4.802899,4.707947,9.061529,3.528921,-5.184352,-3.926468,-8.580072,7.565831,-7.018415]]], dtype = "float64")#candidate|10|(11, 4, 10)|const|float64
const_11 = relay.const([[[2.231968,-1.191324,-4.818760,-0.287162,-5.796696,0.686110,0.236849,-5.276885,2.024632,1.480688],[-9.640159,-3.419164,-2.661549,-9.366895,-8.144198,-2.467360,-8.381034,-1.256674,2.366076,7.002773],[8.917476,-8.410826,3.516416,-0.454069,-5.479005,-3.241714,5.056584,-6.662069,-0.680197,-7.393317],[-7.620148,-8.787443,0.185107,1.922156,3.744349,-9.149776,6.016502,0.090064,-4.631838,-0.762277]],[[6.151044,9.173309,6.213796,-6.398121,-2.119175,-8.808713,-7.470481,1.865076,-9.355662,-8.769004],[3.696442,-9.002514,9.221468,3.259290,0.988427,-0.601219,-1.015115,8.049459,1.649275,6.232108],[-7.425116,-6.578749,0.043513,-5.910164,-8.246580,6.314287,-7.507901,1.346791,-3.958344,0.237877],[-8.941160,-2.473740,7.907264,-6.973700,-5.306695,-7.996020,2.648087,8.191523,-1.503103,-9.750792]],[[-3.117850,1.210496,-5.766308,-5.632517,1.034583,-6.009847,1.150612,4.306020,3.013603,-2.541562],[4.146981,-7.317526,6.406772,8.417881,-8.833769,0.764817,-5.394911,2.105138,9.102965,1.619069],[1.411916,-6.150884,-7.620325,4.956399,7.633781,0.580527,-6.780574,9.815257,2.685717,3.462214],[9.078813,-1.506685,5.772868,-0.229769,2.192428,-0.342187,1.055823,-0.418661,-0.777111,8.988073]],[[3.167850,-3.726791,4.250073,3.591171,6.507215,-1.192873,9.436630,-3.089457,-2.127278,2.909354],[-3.187582,-9.721439,-8.321726,2.609079,-8.317450,-0.098911,-7.022470,8.968425,3.121343,-6.271118],[3.312138,6.185714,-6.313716,-5.871538,-0.710180,-3.054739,9.629446,-7.178307,5.111722,-2.841209],[8.582672,9.917827,8.913348,2.224801,-5.322206,3.268354,-1.494991,-4.120525,-1.776637,6.129445]],[[8.194391,7.263330,-9.321145,-6.177481,-8.521459,4.198816,-2.956645,7.783007,3.490380,-9.101744],[-4.903038,5.139387,-9.293400,1.634288,-1.015476,6.099441,1.474203,-2.026954,-9.666921,9.659093],[0.496745,-8.100803,-7.720052,-2.852094,-3.635797,6.818147,-2.310781,1.733965,-4.486390,-7.415780],[4.534028,-1.204802,-4.836495,-8.268608,-5.483712,6.192526,-5.977639,2.473945,6.614846,-3.323480]],[[-6.962758,8.850409,1.472418,8.081437,1.293895,-3.616222,3.130929,0.262661,-0.773932,-7.898640],[-3.454795,-2.091523,-4.210200,7.687307,4.975206,5.785805,1.635096,0.123885,-2.986388,-3.291051],[-2.424870,-8.773901,-2.175827,6.883997,-0.525167,7.732766,-8.407837,3.957801,5.517190,-9.194214],[8.713522,-3.753949,-0.568940,4.460776,-9.596520,0.189823,-9.848541,-2.582816,1.132558,7.844266]],[[6.728952,-9.435135,4.317213,-5.813930,-5.948578,0.883406,1.637640,-9.301229,4.926836,-1.265570],[-2.974932,-7.003043,6.052013,1.778609,8.097437,-6.107288,7.103470,-3.836489,9.744689,7.596980],[4.294556,7.143783,-6.199117,5.368022,4.806905,3.756120,7.981224,-2.186657,-5.542292,1.332844],[3.441857,-6.241463,5.753799,1.025786,-3.124971,-7.713177,5.556639,-1.931461,-5.043602,-9.146859]],[[4.547569,5.007545,6.911102,7.081153,3.615931,6.408435,9.517032,2.924907,-0.913192,5.803055],[0.069046,4.246868,6.371200,-5.360531,3.954809,5.077871,-5.278320,7.334973,-6.753739,2.563084],[4.857066,-3.401250,-7.174267,6.165421,-1.817211,1.096329,5.532940,4.370680,-4.043965,-1.205756],[-3.585586,-8.130195,-3.245606,-3.385356,7.931969,-1.351893,9.203747,8.859110,-2.307957,-2.015089]],[[2.834979,-8.442666,-9.741980,2.047282,6.358058,-3.353129,5.204155,-9.488023,-0.086731,-2.015549],[-8.732686,9.281086,-4.597741,7.967524,1.555904,3.287701,-6.014046,4.617732,6.860443,2.293247],[-6.004841,-3.899981,4.817563,4.715836,-6.773038,7.810370,-4.852439,-6.328152,8.386585,9.337392],[1.215737,6.003657,-3.492397,9.241839,9.929291,-5.438722,-1.038066,0.618971,9.231136,-3.906933]],[[-5.359297,-6.969584,-3.970760,7.649650,7.414903,-2.661911,-1.674267,-5.797510,6.100327,-2.588447],[-4.144198,-8.582306,-9.952898,-1.528098,4.603085,6.384586,-6.133695,-6.974971,-0.897761,-6.304399],[1.194385,-2.981545,-4.239529,-0.945874,-2.193638,-9.267524,-3.792568,-2.240799,-5.853298,-1.185745],[3.274250,-8.969724,-4.283606,-1.438841,-9.607756,-1.766399,2.630600,6.302508,0.403372,6.029186]],[[5.601985,-6.228660,4.475163,-5.417459,-4.385184,5.050836,-1.439838,2.796512,-7.880530,7.561782],[0.753789,-0.161146,-7.578072,-9.806752,-3.819492,-6.616080,-2.389478,7.557549,4.543569,7.329958],[-6.540142,6.481102,-7.906583,7.059802,-0.312894,-5.883439,-3.367084,-4.234460,-3.707639,-7.844282],[5.943822,-9.348962,-4.216367,3.985039,0.707952,6.695703,9.820044,-3.773892,8.298958,-2.334911]]], dtype = "float64")#candidate|11|(11, 4, 10)|const|float64
bop_12 = relay.power(const_10.astype('float64'), relay.reshape(const_11.astype('float64'), relay.shape_of(const_10))) # shape=(11, 4, 10)
uop_15 = relay.cosh(const_10.astype('float32')) # shape=(11, 4, 10)
uop_17 = relay.sin(uop_15.astype('float32')) # shape=(11, 4, 10)
uop_19 = relay.cosh(uop_17.astype('float64')) # shape=(11, 4, 10)
var_21 = relay.var("var_21", dtype = "float32", shape = (11, 4, 10))#candidate|21|(11, 4, 10)|var|float32
bop_22 = relay.power(uop_15.astype('float32'), relay.reshape(var_21.astype('float32'), relay.shape_of(uop_15))) # shape=(11, 4, 10)
uop_25 = relay.sigmoid(const_10.astype('float64')) # shape=(11, 4, 10)
var_27 = relay.var("var_27", dtype = "float64", shape = (11, 4, 10))#candidate|27|(11, 4, 10)|var|float64
bop_28 = relay.less(uop_19.astype('bool'), relay.reshape(var_27.astype('bool'), relay.shape_of(uop_19))) # shape=(11, 4, 10)
func_5_call = mod.get_global_var('func_5')
func_8_call = mutated_mod.get_global_var('func_8')
var_32 = relay.var("var_32", dtype = "float64", shape = (40,))#candidate|32|(40,)|var|float64
call_31 = func_5_call(relay.reshape(var_32.astype('float64'), [10, 4]))
call_33 = func_5_call(relay.reshape(var_32.astype('float64'), [10, 4]))
uop_34 = relay.sigmoid(uop_17.astype('float32')) # shape=(11, 4, 10)
uop_36 = relay.log(bop_28.astype('float64')) # shape=(11, 4, 10)
var_38 = relay.var("var_38", dtype = "float64", shape = (11, 4, 10))#candidate|38|(11, 4, 10)|var|float64
bop_39 = relay.logical_xor(uop_25.astype('int16'), relay.reshape(var_38.astype('int16'), relay.shape_of(uop_25))) # shape=(11, 4, 10)
uop_42 = relay.log10(uop_36.astype('float32')) # shape=(11, 4, 10)
uop_44 = relay.sin(uop_36.astype('float64')) # shape=(11, 4, 10)
const_46 = relay.const([[[10,-1,7,7,8,-4,2,-8,-8,-8],[-7,-4,-1,-3,-9,-3,8,4,-5,7],[8,6,7,4,2,-6,2,10,-6,6],[-3,6,4,7,10,7,-7,-9,6,8]],[[7,9,-7,5,-3,9,-2,7,7,-7],[2,-5,6,1,-9,-2,-6,6,-9,7],[3,-9,-2,-1,2,6,-4,1,6,4],[3,-2,6,-2,-10,-8,-4,-8,-3,5]],[[-8,9,1,4,4,-3,-1,-7,4,3],[-6,-8,7,-7,4,-8,-3,6,1,-1],[7,3,8,4,-9,5,9,-8,-9,9],[-6,-10,3,1,6,-10,-6,1,-5,6]],[[-4,-9,-6,9,1,1,-4,6,-6,3],[1,-7,8,-10,4,7,7,-3,3,8],[-2,3,1,5,-8,-1,4,5,5,3],[1,7,5,3,-4,4,-2,-1,-8,-2]],[[7,-7,-1,-10,-10,-4,-4,1,3,-1],[-4,2,-4,1,-1,8,6,6,-8,4],[3,8,-10,-9,2,-9,-5,-4,-4,-10],[-10,3,-6,5,-7,-1,-6,-8,-8,7]],[[-6,-8,-7,-1,1,-6,-2,9,7,-1],[1,-5,-10,3,-9,-10,9,8,-2,7],[-10,4,-1,9,5,4,-3,6,1,3],[-2,-7,-1,-6,-3,6,-5,7,-3,8]],[[10,5,9,5,1,-10,-1,3,-1,6],[-10,-7,-3,5,-5,-4,-4,-6,-2,-3],[-1,7,1,7,-7,-5,-5,3,1,6],[10,-8,-10,-9,7,9,-6,-1,4,-8]],[[1,7,-8,-6,10,-2,3,-7,6,9],[-10,3,-3,-5,-2,-8,-8,1,-7,4],[2,-8,-10,9,-10,1,-5,6,-1,-6],[5,8,-9,9,7,-1,-1,-3,5,9]],[[10,-7,-6,-4,-5,-2,6,-2,-10,-1],[6,5,3,2,-9,5,-1,-6,-5,-6],[5,-1,-7,-4,-5,1,8,-3,-5,1],[6,-7,10,5,-6,-8,-6,-1,-3,9]],[[1,1,7,2,-1,-8,-3,-5,8,10],[1,-6,8,-10,-2,9,9,3,-6,-10],[2,-5,4,-7,9,8,-7,7,-2,6],[-5,7,7,-4,7,-1,3,-3,5,9]],[[9,-4,-4,4,7,7,-5,10,6,-6],[-7,3,4,-4,10,-2,3,-7,-6,-10],[-1,9,-3,9,-2,-4,1,-6,7,-5],[-3,6,-5,-2,4,-6,-9,2,-3,-3]]], dtype = "int16")#candidate|46|(11, 4, 10)|const|int16
bop_47 = relay.logical_xor(bop_39.astype('int32'), relay.reshape(const_46.astype('int32'), relay.shape_of(bop_39))) # shape=(11, 4, 10)
var_50 = relay.var("var_50", dtype = "float32", shape = (11, 4, 10))#candidate|50|(11, 4, 10)|var|float32
bop_51 = relay.left_shift(uop_17.astype('int64'), relay.reshape(var_50.astype('int64'), relay.shape_of(uop_17))) # shape=(11, 4, 10)
uop_54 = relay.log10(uop_42.astype('float32')) # shape=(11, 4, 10)
uop_56 = relay.sin(uop_54.astype('float64')) # shape=(11, 4, 10)
bop_58 = relay.bitwise_xor(uop_54.astype('uint16'), relay.reshape(bop_47.astype('uint16'), relay.shape_of(uop_54))) # shape=(11, 4, 10)
var_61 = relay.var("var_61", dtype = "float32", shape = (11, 4, 10))#candidate|61|(11, 4, 10)|var|float32
bop_62 = relay.logical_or(uop_54.astype('bool'), relay.reshape(var_61.astype('bool'), relay.shape_of(uop_54))) # shape=(11, 4, 10)
uop_65 = relay.erf(uop_56.astype('float32')) # shape=(11, 4, 10)
uop_67 = relay.asinh(bop_62.astype('float64')) # shape=(11, 4, 10)
bop_69 = relay.bitwise_xor(uop_65.astype('uint32'), relay.reshape(var_61.astype('uint32'), relay.shape_of(uop_65))) # shape=(11, 4, 10)
var_72 = relay.var("var_72", dtype = "float32", shape = (11, 4, 10))#candidate|72|(11, 4, 10)|var|float32
bop_73 = relay.right_shift(uop_65.astype('uint32'), relay.reshape(var_72.astype('uint32'), relay.shape_of(uop_65))) # shape=(11, 4, 10)
bop_76 = relay.bitwise_and(uop_36.astype('int16'), relay.reshape(bop_51.astype('int16'), relay.shape_of(uop_36))) # shape=(11, 4, 10)
uop_79 = relay.erf(uop_56.astype('float64')) # shape=(11, 4, 10)
uop_81 = relay.asinh(uop_56.astype('float64')) # shape=(11, 4, 10)
var_83 = relay.var("var_83", dtype = "bool", shape = (11, 4, 10))#candidate|83|(11, 4, 10)|var|bool
bop_84 = relay.divide(bop_62.astype('float32'), relay.reshape(var_83.astype('float32'), relay.shape_of(bop_62))) # shape=(11, 4, 10)
var_87 = relay.var("var_87", dtype = "float64", shape = (11, 4, 10))#candidate|87|(11, 4, 10)|var|float64
bop_88 = relay.bitwise_xor(uop_81.astype('int8'), relay.reshape(var_87.astype('int8'), relay.shape_of(uop_81))) # shape=(11, 4, 10)
bop_91 = relay.greater(uop_56.astype('bool'), relay.reshape(var_83.astype('bool'), relay.shape_of(uop_56))) # shape=(11, 4, 10)
uop_94 = relay.log(uop_81.astype('float64')) # shape=(11, 4, 10)
uop_96 = relay.cosh(uop_44.astype('float64')) # shape=(11, 4, 10)
uop_98 = relay.tan(uop_94.astype('float64')) # shape=(11, 4, 10)
uop_100 = relay.log10(uop_98.astype('float32')) # shape=(11, 4, 10)
bop_102 = relay.bitwise_and(uop_100.astype('uint64'), relay.reshape(uop_81.astype('uint64'), relay.shape_of(uop_100))) # shape=(11, 4, 10)
uop_105 = relay.cos(uop_98.astype('float64')) # shape=(11, 4, 10)
var_107 = relay.var("var_107", dtype = "float64", shape = (11, 4, 10))#candidate|107|(11, 4, 10)|var|float64
bop_108 = relay.bitwise_or(uop_94.astype('uint64'), relay.reshape(var_107.astype('uint64'), relay.shape_of(uop_94))) # shape=(11, 4, 10)
uop_111 = relay.asin(bop_88.astype('float32')) # shape=(11, 4, 10)
uop_113 = relay.cosh(uop_98.astype('float64')) # shape=(11, 4, 10)
func_5_call = mod.get_global_var('func_5')
func_8_call = mutated_mod.get_global_var('func_8')
call_115 = func_5_call(relay.reshape(call_31.astype('float64'), [10, 4]))
call_116 = func_5_call(relay.reshape(call_31.astype('float64'), [10, 4]))
bop_117 = relay.minimum(uop_98.astype('int32'), relay.reshape(bop_102.astype('int32'), relay.shape_of(uop_98))) # shape=(11, 4, 10)
uop_120 = relay.atan(uop_105.astype('float64')) # shape=(11, 4, 10)
uop_122 = relay.acosh(uop_98.astype('float64')) # shape=(11, 4, 10)
uop_124 = relay.atanh(bop_108.astype('float64')) # shape=(11, 4, 10)
bop_126 = relay.not_equal(uop_120.astype('bool'), relay.reshape(uop_25.astype('bool'), relay.shape_of(uop_120))) # shape=(11, 4, 10)
output = relay.Tuple([bop_12,bop_22,call_31,var_32,uop_34,bop_58,uop_67,bop_69,bop_73,bop_76,uop_79,bop_84,bop_91,uop_96,uop_111,uop_113,call_115,bop_117,uop_122,uop_124,bop_126,])
output2 = relay.Tuple([bop_12,bop_22,call_33,var_32,uop_34,bop_58,uop_67,bop_69,bop_73,bop_76,uop_79,bop_84,bop_91,uop_96,uop_111,uop_113,call_116,bop_117,uop_122,uop_124,bop_126,])
func_129 = relay.Function([var_21,var_27,var_32,var_38,var_50,var_61,var_72,var_83,var_87,var_107,], output)
mod['func_129'] = func_129
mod = relay.transform.InferType()(mod)
mutated_mod['func_129'] = func_129
mutated_mod = relay.transform.InferType()(mutated_mod)
func_129_call = mutated_mod.get_global_var('func_129')
var_131 = relay.var("var_131", dtype = "float32", shape = (11, 4, 10))#candidate|131|(11, 4, 10)|var|float32
var_132 = relay.var("var_132", dtype = "float64", shape = (11, 4, 10))#candidate|132|(11, 4, 10)|var|float64
var_133 = relay.var("var_133", dtype = "float64", shape = (40,))#candidate|133|(40,)|var|float64
var_134 = relay.var("var_134", dtype = "float64", shape = (11, 4, 10))#candidate|134|(11, 4, 10)|var|float64
var_135 = relay.var("var_135", dtype = "float32", shape = (11, 4, 10))#candidate|135|(11, 4, 10)|var|float32
var_136 = relay.var("var_136", dtype = "float32", shape = (11, 4, 10))#candidate|136|(11, 4, 10)|var|float32
var_137 = relay.var("var_137", dtype = "float32", shape = (11, 4, 10))#candidate|137|(11, 4, 10)|var|float32
var_138 = relay.var("var_138", dtype = "bool", shape = (11, 4, 10))#candidate|138|(11, 4, 10)|var|bool
var_139 = relay.var("var_139", dtype = "float64", shape = (11, 4, 10))#candidate|139|(11, 4, 10)|var|float64
var_140 = relay.var("var_140", dtype = "float64", shape = (11, 4, 10))#candidate|140|(11, 4, 10)|var|float64
call_130 = func_129_call(var_131,var_132,var_133,var_134,var_135,var_136,var_137,var_138,var_139,var_140,)
output = call_130
func_141 = relay.Function([var_131,var_132,var_133,var_134,var_135,var_136,var_137,var_138,var_139,var_140,], output)
mutated_mod['func_141'] = func_141
mutated_mod = relay.transform.InferType()(mutated_mod)
var_143 = relay.var("var_143", dtype = "float64", shape = (1, 6, 12))#candidate|143|(1, 6, 12)|var|float64
uop_144 = relay.tan(var_143.astype('float64')) # shape=(1, 6, 12)
uop_146 = relay.cosh(uop_144.astype('float64')) # shape=(1, 6, 12)
uop_148 = relay.cosh(uop_144.astype('float32')) # shape=(1, 6, 12)
uop_150 = relay.sigmoid(uop_146.astype('float64')) # shape=(1, 6, 12)
bop_152 = relay.not_equal(uop_150.astype('bool'), relay.reshape(uop_148.astype('bool'), relay.shape_of(uop_150))) # shape=(1, 6, 12)
var_155 = relay.var("var_155", dtype = "float64", shape = (7, 6, 12))#candidate|155|(7, 6, 12)|var|float64
bop_156 = relay.floor_divide(var_143.astype('float32'), var_155.astype('float32')) # shape=(7, 6, 12)
output = relay.Tuple([bop_152,bop_156,])
output2 = relay.Tuple([bop_152,bop_156,])
func_159 = relay.Function([var_143,var_155,], output)
mod['func_159'] = func_159
mod = relay.transform.InferType()(mod)
mutated_mod['func_159'] = func_159
mutated_mod = relay.transform.InferType()(mutated_mod)
func_159_call = mutated_mod.get_global_var('func_159')
var_161 = relay.var("var_161", dtype = "float64", shape = (1, 6, 12))#candidate|161|(1, 6, 12)|var|float64
var_162 = relay.var("var_162", dtype = "float64", shape = (7, 6, 12))#candidate|162|(7, 6, 12)|var|float64
call_160 = func_159_call(var_161,var_162,)
output = call_160
func_163 = relay.Function([var_161,var_162,], output)
mutated_mod['func_163'] = func_163
mutated_mod = relay.transform.InferType()(mutated_mod)
var_165 = relay.var("var_165", dtype = "uint16", shape = (7, 13, 13))#candidate|165|(7, 13, 13)|var|uint16
const_166 = relay.const([[[-9,7,-2,-10,6,-4,-3,-1,2,6,-6,10,-5],[3,2,2,-6,1,-2,8,10,8,-6,8,10,10],[3,4,-6,-2,2,10,-4,5,-6,5,9,-1,-10],[-3,-5,10,4,-9,-9,-9,-4,-9,1,-6,7,3],[3,-10,-5,7,5,9,9,8,-9,-9,7,1,1],[5,9,5,3,6,6,1,3,1,-8,-2,-7,9],[-8,-1,10,-7,3,-10,7,8,3,7,9,-8,8],[-5,-10,8,-9,-6,-5,7,-7,6,-4,9,6,-3],[-3,-4,-10,7,-7,5,6,-4,-6,-8,-7,7,1],[-9,2,-1,-5,-8,-8,-3,4,1,-1,8,6,-8],[-2,-4,-1,-1,-7,9,-9,-4,-4,2,-7,5,-7],[-5,10,-4,10,-7,-3,5,-1,1,-1,-7,-4,-2],[-1,8,3,9,-9,-6,-2,-10,-9,4,-9,-10,-2]],[[5,5,8,6,1,1,3,-4,-9,-1,-3,5,-2],[4,3,10,-5,-5,10,1,1,3,4,-2,-8,-3],[5,8,-2,-9,2,5,4,-2,-3,6,-7,-7,-8],[5,2,-7,-7,4,9,6,-5,-1,-3,1,-6,-10],[-8,3,8,2,-7,8,-3,-1,8,-6,-10,-1,-9],[-9,-1,-9,9,-7,-1,8,-9,10,-9,-6,2,-9],[10,5,2,8,6,4,-1,-2,-9,10,5,10,5],[-10,-10,7,-10,-3,8,-8,7,8,5,10,-10,-2],[2,-10,9,-2,-10,-1,3,5,-3,6,6,-10,5],[5,-2,-10,-10,-3,-2,-8,-6,-5,2,2,2,9],[-3,-1,3,-2,2,1,-4,-10,9,-9,6,-6,3],[-8,-6,-4,-8,-5,-10,7,-3,-3,3,3,9,9],[-7,8,2,6,-4,5,5,4,9,7,-10,-8,2]],[[-4,-5,-8,7,2,-3,7,9,9,2,-1,-5,-2],[9,-7,-1,-1,6,-9,-9,-4,9,10,-3,-4,-4],[-5,-3,3,7,2,1,-4,-7,1,4,-6,9,3],[-7,-7,1,-10,-1,6,-3,3,4,-2,-10,4,-10],[-7,8,-1,6,-6,1,3,8,-9,-10,4,2,4],[9,-4,-10,-8,-2,3,-8,-6,4,-3,1,-3,6],[6,1,8,7,1,-6,6,-9,-5,-8,7,4,-4],[4,7,-5,6,2,8,-7,-5,-7,10,-9,-4,-7],[9,-3,-6,2,-6,6,-5,-5,8,-1,4,5,5],[-8,1,9,9,-4,-10,-8,-5,8,5,-4,-9,7],[4,-9,7,5,-5,9,8,-8,-10,-5,-3,5,-10],[2,-4,3,2,-7,9,9,8,-9,1,-5,6,-8],[-4,-10,3,-2,-2,5,6,4,-3,3,-1,8,-2]],[[5,-2,8,7,8,9,-7,4,-4,5,8,-3,1],[-5,-5,1,-4,4,-7,-7,9,7,-8,9,3,-2],[-3,-6,-8,-1,-6,5,-5,2,-8,-1,7,-4,-10],[7,-8,-8,3,-3,-3,-5,9,8,9,-8,-9,7],[-6,10,-3,-1,5,1,-1,10,1,4,-5,5,-4],[-4,-1,-10,-1,5,9,-6,3,-4,-2,-10,-8,-4],[-9,-1,-2,-8,4,-4,-10,1,-2,4,4,2,10],[8,8,-3,3,-10,6,9,-7,7,1,5,-4,-9],[-4,-4,-4,-4,-6,-9,-10,-3,-8,10,-7,-1,6],[-2,-4,1,-3,-4,-9,9,-5,4,7,4,2,-9],[1,-9,-5,-9,3,6,-5,3,7,1,8,7,-5],[-9,3,7,-9,2,7,-2,1,6,-8,-2,-3,-9],[10,-6,-7,3,-4,-5,-9,6,8,6,-8,7,-3]],[[3,2,7,-9,7,10,7,2,-9,-9,-7,-5,-6],[7,-8,-2,6,-4,6,-8,9,-4,-3,8,-9,9],[4,9,6,5,6,-7,-3,-7,-2,5,4,8,8],[-1,3,-3,5,-10,7,7,5,8,-4,-9,2,8],[5,-3,-1,10,-4,2,-4,-10,-8,-4,10,-10,-1],[-1,-5,8,6,-3,-8,3,-3,-1,5,-7,8,-5],[5,3,6,-8,-4,1,10,8,-4,-9,-6,-5,2],[6,-3,-10,-8,-4,-8,5,9,-1,9,-4,-10,9],[3,-7,-6,-7,-3,7,2,8,-2,-2,-1,9,-2],[-3,7,-8,-8,7,9,-2,1,-6,9,-10,8,-5],[5,-9,10,-1,3,-9,-6,4,-10,-10,4,-1,1],[-7,5,10,-7,-7,2,-3,-9,8,9,-3,-8,10],[-10,-8,-4,3,-8,-7,3,-9,-6,-2,5,2,-3]],[[4,9,-5,5,-1,-8,-6,9,-9,-1,-7,-3,2],[10,3,-9,5,1,7,3,2,-2,8,-4,-4,-9],[2,4,1,5,9,3,2,-4,-7,-6,-10,9,-10],[7,8,6,8,-1,6,-3,2,9,-7,10,1,6],[4,7,8,9,10,5,7,-4,-6,6,-2,-9,-7],[4,-6,-7,-6,6,10,2,-3,7,5,-1,-10,-8],[-1,3,7,-5,-10,5,9,-1,-7,3,10,-9,3],[7,-6,-8,-1,4,8,4,2,-3,-1,3,5,-9],[8,-1,8,6,2,-3,-3,-4,-6,9,6,-2,4],[6,-1,-6,4,10,5,8,-10,-2,-5,3,5,-1],[4,9,-1,1,1,-1,-5,7,-8,1,3,10,10],[-3,-9,-7,10,-3,2,-2,-1,7,5,8,-10,-3],[2,3,1,8,-2,3,10,10,-1,-4,7,-8,9]],[[10,-7,-2,-8,-3,-3,-9,8,7,-9,10,1,-2],[-7,-3,-8,-6,5,8,-5,2,-3,-2,-4,-9,-8],[-3,-2,9,7,8,4,2,1,3,-10,3,8,4],[-6,7,9,7,6,3,-10,9,-4,-5,1,-3,3],[-6,-3,4,-5,-5,2,-8,-10,2,-3,-5,-3,3],[6,-9,-2,-1,7,-4,8,-7,-5,-9,-7,4,5],[6,-8,6,-5,-5,9,-1,5,1,9,4,-4,-9],[-7,10,2,9,-4,-6,-9,-7,-10,9,6,-7,-7],[-10,-7,1,-2,3,6,6,9,1,2,8,-8,7],[6,-2,-6,-1,1,-4,-2,7,-3,10,-4,9,2],[-9,-6,-6,-10,-3,-9,9,8,-3,2,-10,4,6],[2,-3,5,-5,-8,-3,-7,5,5,-6,-7,3,10],[6,-5,1,8,-2,-7,5,-7,-4,-9,10,4,6]]], dtype = "uint16")#candidate|166|(7, 13, 13)|const|uint16
bop_167 = relay.minimum(var_165.astype('uint16'), relay.reshape(const_166.astype('uint16'), relay.shape_of(var_165))) # shape=(7, 13, 13)
uop_170 = relay.acosh(const_166.astype('float64')) # shape=(7, 13, 13)
bop_172 = relay.bitwise_or(uop_170.astype('int64'), relay.reshape(const_166.astype('int64'), relay.shape_of(uop_170))) # shape=(7, 13, 13)
var_175 = relay.var("var_175", dtype = "float64", shape = (7, 13, 13))#candidate|175|(7, 13, 13)|var|float64
bop_176 = relay.divide(uop_170.astype('float64'), relay.reshape(var_175.astype('float64'), relay.shape_of(uop_170))) # shape=(7, 13, 13)
uop_179 = relay.cos(var_165.astype('float64')) # shape=(7, 13, 13)
bop_181 = relay.mod(var_165.astype('float64'), relay.reshape(bop_167.astype('float64'), relay.shape_of(var_165))) # shape=(7, 13, 13)
var_184 = relay.var("var_184", dtype = "float64", shape = (7, 13, 13))#candidate|184|(7, 13, 13)|var|float64
bop_185 = relay.greater(bop_181.astype('bool'), relay.reshape(var_184.astype('bool'), relay.shape_of(bop_181))) # shape=(7, 13, 13)
uop_188 = relay.sqrt(bop_176.astype('float32')) # shape=(7, 13, 13)
output = relay.Tuple([bop_172,uop_179,bop_185,uop_188,])
output2 = relay.Tuple([bop_172,uop_179,bop_185,uop_188,])
func_190 = relay.Function([var_165,var_175,var_184,], output)
mod['func_190'] = func_190
mod = relay.transform.InferType()(mod)
mutated_mod['func_190'] = func_190
mutated_mod = relay.transform.InferType()(mutated_mod)
func_190_call = mutated_mod.get_global_var('func_190')
var_192 = relay.var("var_192", dtype = "uint16", shape = (7, 13, 13))#candidate|192|(7, 13, 13)|var|uint16
var_193 = relay.var("var_193", dtype = "float64", shape = (7, 13, 13))#candidate|193|(7, 13, 13)|var|float64
var_194 = relay.var("var_194", dtype = "float64", shape = (7, 13, 13))#candidate|194|(7, 13, 13)|var|float64
call_191 = func_190_call(var_192,var_193,var_194,)
output = call_191
func_195 = relay.Function([var_192,var_193,var_194,], output)
mutated_mod['func_195'] = func_195
mutated_mod = relay.transform.InferType()(mutated_mod)
var_197 = relay.var("var_197", dtype = "float64", shape = (16,))#candidate|197|(16,)|var|float64
uop_198 = relay.exp(var_197.astype('float64')) # shape=(16,)
var_200 = relay.var("var_200", dtype = "float64", shape = (16,))#candidate|200|(16,)|var|float64
bop_201 = relay.left_shift(uop_198.astype('uint32'), relay.reshape(var_200.astype('uint32'), relay.shape_of(uop_198))) # shape=(16,)
bop_204 = relay.logical_xor(var_200.astype('uint8'), relay.reshape(var_197.astype('uint8'), relay.shape_of(var_200))) # shape=(16,)
uop_207 = relay.log10(uop_198.astype('float64')) # shape=(16,)
bop_209 = relay.minimum(uop_207.astype('int32'), relay.reshape(uop_198.astype('int32'), relay.shape_of(uop_207))) # shape=(16,)
uop_212 = relay.sigmoid(bop_201.astype('float32')) # shape=(16,)
bop_214 = relay.not_equal(uop_207.astype('bool'), relay.reshape(bop_204.astype('bool'), relay.shape_of(uop_207))) # shape=(16,)
bop_217 = relay.logical_or(bop_201.astype('bool'), relay.reshape(bop_204.astype('bool'), relay.shape_of(bop_201))) # shape=(16,)
var_220 = relay.var("var_220", dtype = "float64", shape = (16,))#candidate|220|(16,)|var|float64
bop_221 = relay.greater_equal(uop_198.astype('bool'), relay.reshape(var_220.astype('bool'), relay.shape_of(uop_198))) # shape=(16,)
uop_224 = relay.log(uop_212.astype('float64')) # shape=(16,)
func_159_call = mod.get_global_var('func_159')
func_163_call = mutated_mod.get_global_var('func_163')
const_227 = relay.const([-7.695071,-7.608946,-6.367915,-8.999129,4.788958,-6.669370,2.222554,4.649407,-4.593002,-4.108827,2.753123,9.751652,-4.803931,1.058036,-8.985748,4.473726,-2.157378,6.407688,9.997538,-2.214318,5.942747,8.986521,-9.371006,5.909827,-2.192282,3.319819,8.083510,-6.242386,4.203844,7.504037,-5.526850,-8.398225,-6.720388,-1.450930,-3.811238,-6.690049,7.904503,-6.924836,6.986135,-4.774133,3.245501,1.368837,-1.020061,-8.598078,5.169722,-4.899782,-4.787980,-5.906681,-7.087842,-3.380752,2.451921,-7.103941,9.641531,0.933916,-8.092777,-4.284275,4.829227,-5.558960,-5.862320,2.771290,-8.948785,7.560956,0.463427,-5.479477,-6.174405,-3.958100,9.618747,5.935707,8.951383,5.660025,-0.398729,-5.226622], dtype = "float64")#candidate|227|(72,)|const|float64
var_228 = relay.var("var_228", dtype = "float64", shape = (504,))#candidate|228|(504,)|var|float64
call_226 = relay.TupleGetItem(func_159_call(relay.reshape(const_227.astype('float64'), [1, 6, 12]), relay.reshape(var_228.astype('float64'), [7, 6, 12]), ), 0)
call_229 = relay.TupleGetItem(func_163_call(relay.reshape(const_227.astype('float64'), [1, 6, 12]), relay.reshape(var_228.astype('float64'), [7, 6, 12]), ), 0)
var_230 = relay.var("var_230", dtype = "float64", shape = (16,))#candidate|230|(16,)|var|float64
bop_231 = relay.left_shift(uop_207.astype('uint16'), relay.reshape(var_230.astype('uint16'), relay.shape_of(uop_207))) # shape=(16,)
bop_234 = relay.equal(uop_224.astype('bool'), relay.reshape(uop_207.astype('bool'), relay.shape_of(uop_224))) # shape=(16,)
uop_237 = relay.exp(uop_207.astype('float32')) # shape=(16,)
bop_239 = relay.power(uop_198.astype('float32'), relay.reshape(var_200.astype('float32'), relay.shape_of(uop_198))) # shape=(16,)
var_242 = relay.var("var_242", dtype = "float32", shape = (16,))#candidate|242|(16,)|var|float32
bop_243 = relay.subtract(uop_237.astype('uint64'), relay.reshape(var_242.astype('uint64'), relay.shape_of(uop_237))) # shape=(16,)
const_246 = relay.const([True,True,True,False,False,True,False,False,False,True,True,False,True,True,False,True], dtype = "bool")#candidate|246|(16,)|const|bool
bop_247 = relay.add(bop_234.astype('int16'), relay.reshape(const_246.astype('int16'), relay.shape_of(bop_234))) # shape=(16,)
uop_250 = relay.log10(bop_201.astype('float64')) # shape=(16,)
uop_252 = relay.erf(bop_209.astype('float32')) # shape=(16,)
var_254 = relay.var("var_254", dtype = "bool", shape = (16,))#candidate|254|(16,)|var|bool
bop_255 = relay.add(bop_234.astype('int64'), relay.reshape(var_254.astype('int64'), relay.shape_of(bop_234))) # shape=(16,)
bop_258 = relay.divide(uop_252.astype('float64'), relay.reshape(var_242.astype('float64'), relay.shape_of(uop_252))) # shape=(16,)
bop_261 = relay.floor_mod(bop_243.astype('float32'), relay.reshape(var_242.astype('float32'), relay.shape_of(bop_243))) # shape=(16,)
bop_264 = relay.bitwise_and(bop_234.astype('uint64'), relay.reshape(uop_212.astype('uint64'), relay.shape_of(bop_234))) # shape=(16,)
uop_267 = relay.exp(bop_239.astype('float64')) # shape=(16,)
uop_269 = relay.log2(bop_261.astype('float64')) # shape=(16,)
uop_271 = relay.sin(bop_261.astype('float64')) # shape=(16,)
var_273 = relay.var("var_273", dtype = "float64", shape = (16,))#candidate|273|(16,)|var|float64
bop_274 = relay.not_equal(uop_198.astype('bool'), relay.reshape(var_273.astype('bool'), relay.shape_of(uop_198))) # shape=(16,)
uop_277 = relay.log10(uop_269.astype('float64')) # shape=(16,)
var_279 = relay.var("var_279", dtype = "float64", shape = (16,))#candidate|279|(16,)|var|float64
bop_280 = relay.less_equal(uop_269.astype('bool'), relay.reshape(var_279.astype('bool'), relay.shape_of(uop_269))) # shape=(16,)
bop_283 = relay.logical_xor(uop_277.astype('int64'), relay.reshape(bop_214.astype('int64'), relay.shape_of(uop_277))) # shape=(16,)
var_286 = relay.var("var_286", dtype = "bool", shape = (16,))#candidate|286|(16,)|var|bool
bop_287 = relay.logical_xor(bop_214.astype('uint8'), relay.reshape(var_286.astype('uint8'), relay.shape_of(bop_214))) # shape=(16,)
uop_290 = relay.asin(uop_277.astype('float64')) # shape=(16,)
uop_292 = relay.asin(uop_290.astype('float32')) # shape=(16,)
uop_294 = relay.sinh(bop_214.astype('float64')) # shape=(16,)
bop_296 = relay.subtract(uop_290.astype('int64'), relay.reshape(uop_198.astype('int64'), relay.shape_of(uop_290))) # shape=(16,)
bop_299 = relay.greater_equal(uop_292.astype('bool'), relay.reshape(bop_258.astype('bool'), relay.shape_of(uop_292))) # shape=(16,)
bop_302 = relay.multiply(uop_271.astype('float32'), relay.reshape(uop_277.astype('float32'), relay.shape_of(uop_271))) # shape=(16,)
bop_305 = relay.logical_or(bop_296.astype('bool'), relay.reshape(uop_290.astype('bool'), relay.shape_of(bop_296))) # shape=(16,)
var_308 = relay.var("var_308", dtype = "float32", shape = (16,))#candidate|308|(16,)|var|float32
bop_309 = relay.bitwise_or(uop_292.astype('uint8'), relay.reshape(var_308.astype('uint8'), relay.shape_of(uop_292))) # shape=(16,)
func_159_call = mod.get_global_var('func_159')
func_163_call = mutated_mod.get_global_var('func_163')
call_312 = relay.TupleGetItem(func_159_call(relay.reshape(const_227.astype('float64'), [1, 6, 12]), relay.reshape(var_228.astype('float64'), [7, 6, 12]), ), 1)
call_313 = relay.TupleGetItem(func_163_call(relay.reshape(const_227.astype('float64'), [1, 6, 12]), relay.reshape(var_228.astype('float64'), [7, 6, 12]), ), 1)
uop_314 = relay.cosh(uop_269.astype('float64')) # shape=(16,)
uop_316 = relay.log(bop_309.astype('float32')) # shape=(16,)
uop_318 = relay.sinh(uop_292.astype('float64')) # shape=(16,)
func_159_call = mod.get_global_var('func_159')
func_163_call = mutated_mod.get_global_var('func_163')
call_320 = relay.TupleGetItem(func_159_call(relay.reshape(call_226.astype('float64'), [1, 6, 12]), relay.reshape(call_312.astype('float64'), [7, 6, 12]), ), 0)
call_321 = relay.TupleGetItem(func_163_call(relay.reshape(call_226.astype('float64'), [1, 6, 12]), relay.reshape(call_312.astype('float64'), [7, 6, 12]), ), 0)
bop_322 = relay.floor_divide(call_320.astype('float32'), call_312.astype('float32')) # shape=(7, 6, 12)
bop_325 = relay.floor_divide(call_321.astype('float32'), call_313.astype('float32')) # shape=(7, 6, 12)
var_326 = relay.var("var_326", dtype = "float64", shape = (16,))#candidate|326|(16,)|var|float64
bop_327 = relay.right_shift(uop_318.astype('uint16'), relay.reshape(var_326.astype('uint16'), relay.shape_of(uop_318))) # shape=(16,)
output = relay.Tuple([bop_217,bop_221,call_226,const_227,var_228,bop_231,bop_247,uop_250,bop_255,bop_264,uop_267,bop_274,bop_280,bop_283,bop_287,uop_294,bop_299,bop_302,bop_305,uop_314,uop_316,bop_322,bop_327,])
output2 = relay.Tuple([bop_217,bop_221,call_229,const_227,var_228,bop_231,bop_247,uop_250,bop_255,bop_264,uop_267,bop_274,bop_280,bop_283,bop_287,uop_294,bop_299,bop_302,bop_305,uop_314,uop_316,bop_325,bop_327,])
F = relay.Function([var_197,var_200,var_220,var_228,var_230,var_242,var_254,var_273,var_279,var_286,var_308,var_326,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_197,var_200,var_220,var_228,var_230,var_242,var_254,var_273,var_279,var_286,var_308,var_326,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_197= np.array([1.671568,9.489933,6.673875,-6.302724,-0.996544,-5.159339,3.779016,9.418223,7.640154,8.583608,8.634241,-2.495221,3.648618,6.324712,1.425624,-1.774476], dtype='float64')
module1.set_input('var_197', input_197)
input_200= np.array([-3.960599,-2.181942,1.126659,-7.070662,7.531624,1.602772,-5.258666,-5.173204,-7.651881,-9.823007,8.435192,2.547244,8.167041,8.586443,-3.319506,1.313809], dtype='float64')
module1.set_input('var_200', input_200)
input_220= np.array([-2.044468,6.944673,-7.163688,6.964072,-9.575126,-3.014528,8.411080,-8.084505,-7.640013,3.844579,-5.957618,-4.690919,8.706159,-7.963742,7.664027,0.465018], dtype='float64')
module1.set_input('var_220', input_220)
input_228= np.array([6.375997,8.830024,-4.754553,0.303550,-2.098755,7.487698,-6.787474,4.266892,-5.681876,3.733591,-8.540066,-3.968269,6.679069,1.672606,-9.745748,-9.918983,0.679846,-0.972012,-6.331404,5.147023,3.137846,-0.598485,-5.858765,0.966299,-9.571322,5.046697,-0.597907,0.522778,-3.325278,3.929764,9.612813,0.545850,9.134954,-9.823224,1.335037,-0.905269,-1.668990,5.499740,8.778202,-2.533295,0.071469,-3.445661,2.871185,1.312536,-5.394318,8.228788,6.627811,1.054748,-0.403342,-9.750111,0.912104,-8.298463,-3.961954,-9.923965,-4.979626,6.802997,3.278351,-1.302932,2.478414,-3.237174,-5.315494,1.607195,-2.739484,-8.976918,-2.565927,0.349719,-6.024683,-9.764464,0.102890,-2.345356,8.780461,5.873929,6.236184,6.574676,5.597284,-1.051075,9.234228,4.027257,-4.952159,-1.225416,2.166004,-2.510366,-2.590135,-6.043843,-8.100280,5.253505,-8.782868,-7.804222,-3.892688,5.119828,9.155636,1.278893,3.578183,9.956842,4.942760,9.866621,0.848526,-4.662638,-5.257688,5.301832,0.322506,-6.923001,2.926585,8.317318,-3.427302,1.962966,-9.612792,9.862300,-2.477575,-6.306982,-5.598508,-2.780290,5.979080,7.964233,5.424437,-7.365763,-1.390707,-1.000464,1.969199,8.746646,-7.988555,-3.376997,-4.752490,5.219107,-5.022929,-9.823209,3.197727,-3.289237,7.894429,-4.464725,-6.974081,4.023393,9.709015,-1.676298,1.316921,-0.100728,-8.143755,-4.915652,-1.329255,6.485877,6.479601,-8.096794,-9.941839,-4.478422,-8.176266,-3.857589,6.155607,5.847382,-1.426479,-9.100445,-1.795180,9.292449,7.551552,7.708053,2.402242,-8.882323,-3.254378,9.681378,9.557335,-9.174665,-3.931577,-3.517291,-5.518966,-5.819894,1.675654,-5.962476,-8.762041,-0.536402,4.838726,9.512207,7.644940,-6.202732,-3.910696,-9.289516,2.200638,-9.445661,-7.210676,2.918598,-4.638216,9.388832,-8.991613,0.989065,6.660868,-1.230303,0.070687,-9.795583,1.022128,-9.119816,-5.592654,0.597126,8.132983,-3.489227,-9.759408,-6.587897,3.315137,-5.488500,9.740316,-7.140106,-1.300689,-3.796297,9.633187,-2.392879,5.044346,-7.059965,1.243627,3.410254,2.064638,-5.631935,0.795647,5.509955,-1.460756,8.481847,9.730333,7.935352,-3.365714,-5.911026,-0.256112,7.640667,1.739858,0.255763,1.273282,-7.230515,-3.437780,0.312625,9.792901,3.697795,-4.723227,-2.387051,-6.408503,5.585202,5.877569,-4.518639,-9.960449,4.168257,-7.063265,3.224280,9.374652,-9.409300,-0.052482,2.048724,-7.783847,-2.920443,6.344737,7.325309,-6.771820,1.370441,-4.500949,9.174659,5.313093,-0.456495,2.169510,8.116453,7.092290,8.512551,3.276129,-2.728968,0.636853,9.812316,5.153891,-0.701198,6.456594,8.120809,-4.339184,8.727393,2.251309,0.040671,8.306661,0.016777,-4.934774,-3.239032,8.568971,-9.290628,2.050826,-4.589473,-3.025498,-5.036718,-2.517991,6.660775,-2.197834,-1.564531,-9.443355,8.848882,-6.115853,9.266333,8.391358,0.052215,-4.009570,0.013539,0.488041,-7.342444,-3.983382,3.781804,-0.780698,3.925619,7.513613,-8.286582,9.576894,3.450971,-0.634890,6.658897,9.290557,-1.594485,-2.884111,3.845677,9.477495,5.791403,9.328861,-0.505446,1.403167,-8.506129,9.443738,-8.881437,-2.399547,4.910281,-8.174949,-5.182247,8.752933,6.686346,-7.241290,4.451973,-2.545103,-0.606864,1.439558,0.543822,-9.736315,-1.380036,-6.777945,1.197336,-6.508675,7.727648,8.923493,-3.365104,9.781881,-6.757037,2.523630,3.398199,-8.371522,8.300001,1.217579,-7.651534,-9.612800,0.884826,9.703861,-5.071308,7.108040,0.478710,1.318397,6.153490,3.350229,8.329233,4.767615,1.717747,-7.416121,-7.420962,7.257972,6.776713,8.296810,1.424854,9.513839,-9.623497,2.235255,9.817926,-1.259786,8.936310,-6.497189,-8.648647,-8.887380,3.081568,-1.779026,-5.767160,-7.235202,8.666997,-5.743582,8.159663,-0.709823,1.866138,0.428856,8.071202,1.494107,6.028909,1.446657,-9.945138,0.022428,-7.362257,7.146148,-9.162806,-4.946623,7.260785,-0.424709,4.397055,-6.326889,-2.871610,8.517025,6.774020,3.666126,5.950973,-7.260792,-4.862218,8.318155,7.323727,7.170652,1.357790,-5.576973,-8.677402,8.256301,0.966164,-5.831836,2.839179,8.778179,9.240033,2.505450,5.047002,-7.564333,-4.391414,-0.400315,-5.799109,6.573085,-6.127870,-5.458706,-4.432767,-6.254101,8.198542,7.023604,-3.527232,-5.511236,0.094121,-6.241553,9.404212,-4.479615,9.392811,-2.647765,-3.207384,2.248420,0.675227,-7.444745,2.781535,2.380329,2.472047,3.545343,-7.829955,9.164319,8.101607,-1.405379,-5.852490,-8.757633,-1.701068,7.548886,-1.683212,8.046421,-1.737181,0.134677,-2.899568,7.158895,-6.440165,2.602844,-8.610821,-5.054894,1.852353,-8.263459,-9.351670,7.178516,6.134707,5.645448,2.451494,5.808251,-8.401358,8.261234,-8.434258,4.779597,7.574427,6.342991,0.021773,8.244928,-0.374078,6.927646,3.213697,2.475113,8.177713,-5.239822,1.240874,9.296316,7.664075,-7.539700,1.817284,-9.784154,3.430502,-3.406593,7.229361,9.553222,8.551538,-6.443814,0.402598,-9.426139,9.966485,3.334403,-8.056528,-2.877143,9.884926,6.382781,-4.094657,1.103008,0.272280,8.720154,0.020092], dtype='float64')
module1.set_input('var_228', input_228)
input_230= np.array([5.299013,0.236565,7.295859,0.211586,2.465174,7.946035,-3.296568,5.616075,5.783075,5.980441,4.845295,-6.622457,7.296801,-5.142316,-1.085200,9.231788], dtype='float64')
module1.set_input('var_230', input_230)
input_242= np.array([8.620003,-8.279844,3.567685,-4.509607,-0.282202,0.386428,7.408032,7.089550,5.281812,-2.234623,9.388046,5.268289,-9.684965,6.884718,-7.353281,-7.590569], dtype='float32')
module1.set_input('var_242', input_242)
input_254= np.array([False,True,False,False,True,True,True,True,True,True,False,False,True,False,False,True], dtype='bool')
module1.set_input('var_254', input_254)
input_273= np.array([-2.925847,-7.810679,9.961475,9.786614,-4.067241,7.565357,1.895214,4.934250,-4.103206,9.403309,2.054517,-7.230450,7.972414,-5.219058,9.258174,0.841591], dtype='float64')
module1.set_input('var_273', input_273)
input_279= np.array([-8.083388,5.217761,-8.406987,3.334816,-7.168890,0.821239,2.933319,-1.787175,-5.831106,0.450312,-7.509482,4.361550,6.981717,-3.743195,-3.251613,-0.782533], dtype='float64')
module1.set_input('var_279', input_279)
input_286= np.array([False,True,True,False,False,False,False,True,False,False,False,True,False,True,True,True], dtype='bool')
module1.set_input('var_286', input_286)
input_308= np.array([-9.496694,8.972080,-2.500140,-5.391419,8.203297,-0.592933,9.627740,1.696862,5.782235,-1.097864,2.385464,6.538225,0.465225,2.488410,5.215628,-9.098044], dtype='float32')
module1.set_input('var_308', input_308)
input_326= np.array([-9.814067,-0.936849,-6.072634,-3.949622,-2.558808,-7.179558,-4.356554,3.325064,-2.367532,-6.068713,-3.999617,-5.578455,0.654433,7.298697,0.996713,1.366619], dtype='float64')
module1.set_input('var_326', input_326)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_197, input_200, input_220, input_228, input_230, input_242, input_254, input_273, input_279, input_286, input_308, input_326, )
res3 = intrp3.evaluate()(input_197, input_200, input_220, input_228, input_230, input_242, input_254, input_273, input_279, input_286, input_308, input_326, )
res4 = intrp4.evaluate()(input_197, input_200, input_220, input_228, input_230, input_242, input_254, input_273, input_279, input_286, input_308, input_326, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
res1_14 = module1.get_output(14).asnumpy()
res2_14 = res2[14].asnumpy()
res3_14 = res3[14].asnumpy()
res4_14 = res4[14].asnumpy()
np.testing.assert_allclose(res1_14 ,res2_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res3_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res4_14, atol=1e-3, rtol=1e-3)
(res1_14 == res2_14).all()
(res1_14 == res3_14).all()
(res1_14 == res4_14).all()
res1_15 = module1.get_output(15).asnumpy()
res2_15 = res2[15].asnumpy()
res3_15 = res3[15].asnumpy()
res4_15 = res4[15].asnumpy()
np.testing.assert_allclose(res1_15 ,res2_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res3_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res4_15, atol=1e-3, rtol=1e-3)
(res1_15 == res2_15).all()
(res1_15 == res3_15).all()
(res1_15 == res4_15).all()
res1_16 = module1.get_output(16).asnumpy()
res2_16 = res2[16].asnumpy()
res3_16 = res3[16].asnumpy()
res4_16 = res4[16].asnumpy()
np.testing.assert_allclose(res1_16 ,res2_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res3_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res4_16, atol=1e-3, rtol=1e-3)
(res1_16 == res2_16).all()
(res1_16 == res3_16).all()
(res1_16 == res4_16).all()
res1_17 = module1.get_output(17).asnumpy()
res2_17 = res2[17].asnumpy()
res3_17 = res3[17].asnumpy()
res4_17 = res4[17].asnumpy()
np.testing.assert_allclose(res1_17 ,res2_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res3_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res4_17, atol=1e-3, rtol=1e-3)
(res1_17 == res2_17).all()
(res1_17 == res3_17).all()
(res1_17 == res4_17).all()
res1_18 = module1.get_output(18).asnumpy()
res2_18 = res2[18].asnumpy()
res3_18 = res3[18].asnumpy()
res4_18 = res4[18].asnumpy()
np.testing.assert_allclose(res1_18 ,res2_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res3_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res4_18, atol=1e-3, rtol=1e-3)
(res1_18 == res2_18).all()
(res1_18 == res3_18).all()
(res1_18 == res4_18).all()
res1_19 = module1.get_output(19).asnumpy()
res2_19 = res2[19].asnumpy()
res3_19 = res3[19].asnumpy()
res4_19 = res4[19].asnumpy()
np.testing.assert_allclose(res1_19 ,res2_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_19 ,res3_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_19 ,res4_19, atol=1e-3, rtol=1e-3)
(res1_19 == res2_19).all()
(res1_19 == res3_19).all()
(res1_19 == res4_19).all()
res1_20 = module1.get_output(20).asnumpy()
res2_20 = res2[20].asnumpy()
res3_20 = res3[20].asnumpy()
res4_20 = res4[20].asnumpy()
np.testing.assert_allclose(res1_20 ,res2_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_20 ,res3_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_20 ,res4_20, atol=1e-3, rtol=1e-3)
(res1_20 == res2_20).all()
(res1_20 == res3_20).all()
(res1_20 == res4_20).all()
res1_21 = module1.get_output(21).asnumpy()
res2_21 = res2[21].asnumpy()
res3_21 = res3[21].asnumpy()
res4_21 = res4[21].asnumpy()
np.testing.assert_allclose(res1_21 ,res2_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_21 ,res3_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_21 ,res4_21, atol=1e-3, rtol=1e-3)
(res1_21 == res2_21).all()
(res1_21 == res3_21).all()
(res1_21 == res4_21).all()
res1_22 = module1.get_output(22).asnumpy()
res2_22 = res2[22].asnumpy()
res3_22 = res3[22].asnumpy()
res4_22 = res4[22].asnumpy()
np.testing.assert_allclose(res1_22 ,res2_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_22 ,res3_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_22 ,res4_22, atol=1e-3, rtol=1e-3)
(res1_22 == res2_22).all()
(res1_22 == res3_22).all()
(res1_22 == res4_22).all()
module5.set_input('var_197', input_197)
module5.set_input('var_200', input_200)
module5.set_input('var_220', input_220)
module5.set_input('var_228', input_228)
module5.set_input('var_230', input_230)
module5.set_input('var_242', input_242)
module5.set_input('var_254', input_254)
module5.set_input('var_273', input_273)
module5.set_input('var_279', input_279)
module5.set_input('var_286', input_286)
module5.set_input('var_308', input_308)
module5.set_input('var_326', input_326)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_197, input_200, input_220, input_228, input_230, input_242, input_254, input_273, input_279, input_286, input_308, input_326, )
res7 = intrp7.evaluate()(input_197, input_200, input_220, input_228, input_230, input_242, input_254, input_273, input_279, input_286, input_308, input_326, )
res8 = intrp8.evaluate()(input_197, input_200, input_220, input_228, input_230, input_242, input_254, input_273, input_279, input_286, input_308, input_326, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
res5_14 = module5.get_output(14).asnumpy()
res6_14 = res6[14].asnumpy()
res7_14 = res7[14].asnumpy()
res8_14 = res8[14].asnumpy()
np.testing.assert_allclose(res5_14 ,res6_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res7_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res8_14, atol=1e-3, rtol=1e-3)
(res5_14 == res6_14).all()
(res5_14 == res7_14).all()
(res5_14 == res8_14).all()
res5_15 = module5.get_output(15).asnumpy()
res6_15 = res6[15].asnumpy()
res7_15 = res7[15].asnumpy()
res8_15 = res8[15].asnumpy()
np.testing.assert_allclose(res5_15 ,res6_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res7_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res8_15, atol=1e-3, rtol=1e-3)
(res5_15 == res6_15).all()
(res5_15 == res7_15).all()
(res5_15 == res8_15).all()
res5_16 = module5.get_output(16).asnumpy()
res6_16 = res6[16].asnumpy()
res7_16 = res7[16].asnumpy()
res8_16 = res8[16].asnumpy()
np.testing.assert_allclose(res5_16 ,res6_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res7_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res8_16, atol=1e-3, rtol=1e-3)
(res5_16 == res6_16).all()
(res5_16 == res7_16).all()
(res5_16 == res8_16).all()
res5_17 = module5.get_output(17).asnumpy()
res6_17 = res6[17].asnumpy()
res7_17 = res7[17].asnumpy()
res8_17 = res8[17].asnumpy()
np.testing.assert_allclose(res5_17 ,res6_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res7_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res8_17, atol=1e-3, rtol=1e-3)
(res5_17 == res6_17).all()
(res5_17 == res7_17).all()
(res5_17 == res8_17).all()
res5_18 = module5.get_output(18).asnumpy()
res6_18 = res6[18].asnumpy()
res7_18 = res7[18].asnumpy()
res8_18 = res8[18].asnumpy()
np.testing.assert_allclose(res5_18 ,res6_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res7_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res8_18, atol=1e-3, rtol=1e-3)
(res5_18 == res6_18).all()
(res5_18 == res7_18).all()
(res5_18 == res8_18).all()
res5_19 = module5.get_output(19).asnumpy()
res6_19 = res6[19].asnumpy()
res7_19 = res7[19].asnumpy()
res8_19 = res8[19].asnumpy()
np.testing.assert_allclose(res5_19 ,res6_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_19 ,res7_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_19 ,res8_19, atol=1e-3, rtol=1e-3)
(res5_19 == res6_19).all()
(res5_19 == res7_19).all()
(res5_19 == res8_19).all()
res5_20 = module5.get_output(20).asnumpy()
res6_20 = res6[20].asnumpy()
res7_20 = res7[20].asnumpy()
res8_20 = res8[20].asnumpy()
np.testing.assert_allclose(res5_20 ,res6_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_20 ,res7_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_20 ,res8_20, atol=1e-3, rtol=1e-3)
(res5_20 == res6_20).all()
(res5_20 == res7_20).all()
(res5_20 == res8_20).all()
res5_21 = module5.get_output(21).asnumpy()
res6_21 = res6[21].asnumpy()
res7_21 = res7[21].asnumpy()
res8_21 = res8[21].asnumpy()
np.testing.assert_allclose(res5_21 ,res6_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_21 ,res7_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_21 ,res8_21, atol=1e-3, rtol=1e-3)
(res5_21 == res6_21).all()
(res5_21 == res7_21).all()
(res5_21 == res8_21).all()
res5_22 = module5.get_output(22).asnumpy()
res6_22 = res6[22].asnumpy()
res7_22 = res7[22].asnumpy()
res8_22 = res8[22].asnumpy()
np.testing.assert_allclose(res5_22 ,res6_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_22 ,res7_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_22 ,res8_22, atol=1e-3, rtol=1e-3)
(res5_22 == res6_22).all()
(res5_22 == res7_22).all()
(res5_22 == res8_22).all()
module9.set_input('var_197', input_197)
module9.set_input('var_200', input_200)
module9.set_input('var_220', input_220)
module9.set_input('var_228', input_228)
module9.set_input('var_230', input_230)
module9.set_input('var_242', input_242)
module9.set_input('var_254', input_254)
module9.set_input('var_273', input_273)
module9.set_input('var_279', input_279)
module9.set_input('var_286', input_286)
module9.set_input('var_308', input_308)
module9.set_input('var_326', input_326)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_197, input_200, input_220, input_228, input_230, input_242, input_254, input_273, input_279, input_286, input_308, input_326, )
res11 = intrp11.evaluate()(input_197, input_200, input_220, input_228, input_230, input_242, input_254, input_273, input_279, input_286, input_308, input_326, )
res12 = intrp12.evaluate()(input_197, input_200, input_220, input_228, input_230, input_242, input_254, input_273, input_279, input_286, input_308, input_326, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
res9_14 = module9.get_output(14).asnumpy()
res10_14 = res10[14].asnumpy()
res11_14 = res11[14].asnumpy()
res12_14 = res12[14].asnumpy()
np.testing.assert_allclose(res9_14 ,res10_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res11_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res12_14, atol=1e-3, rtol=1e-3)
(res9_14 == res10_14).all()
(res9_14 == res11_14).all()
(res9_14 == res12_14).all()
res9_15 = module9.get_output(15).asnumpy()
res10_15 = res10[15].asnumpy()
res11_15 = res11[15].asnumpy()
res12_15 = res12[15].asnumpy()
np.testing.assert_allclose(res9_15 ,res10_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res11_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res12_15, atol=1e-3, rtol=1e-3)
(res9_15 == res10_15).all()
(res9_15 == res11_15).all()
(res9_15 == res12_15).all()
res9_16 = module9.get_output(16).asnumpy()
res10_16 = res10[16].asnumpy()
res11_16 = res11[16].asnumpy()
res12_16 = res12[16].asnumpy()
np.testing.assert_allclose(res9_16 ,res10_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res11_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res12_16, atol=1e-3, rtol=1e-3)
(res9_16 == res10_16).all()
(res9_16 == res11_16).all()
(res9_16 == res12_16).all()
res9_17 = module9.get_output(17).asnumpy()
res10_17 = res10[17].asnumpy()
res11_17 = res11[17].asnumpy()
res12_17 = res12[17].asnumpy()
np.testing.assert_allclose(res9_17 ,res10_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res11_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res12_17, atol=1e-3, rtol=1e-3)
(res9_17 == res10_17).all()
(res9_17 == res11_17).all()
(res9_17 == res12_17).all()
res9_18 = module9.get_output(18).asnumpy()
res10_18 = res10[18].asnumpy()
res11_18 = res11[18].asnumpy()
res12_18 = res12[18].asnumpy()
np.testing.assert_allclose(res9_18 ,res10_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res11_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res12_18, atol=1e-3, rtol=1e-3)
(res9_18 == res10_18).all()
(res9_18 == res11_18).all()
(res9_18 == res12_18).all()
res9_19 = module9.get_output(19).asnumpy()
res10_19 = res10[19].asnumpy()
res11_19 = res11[19].asnumpy()
res12_19 = res12[19].asnumpy()
np.testing.assert_allclose(res9_19 ,res10_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_19 ,res11_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_19 ,res12_19, atol=1e-3, rtol=1e-3)
(res9_19 == res10_19).all()
(res9_19 == res11_19).all()
(res9_19 == res12_19).all()
res9_20 = module9.get_output(20).asnumpy()
res10_20 = res10[20].asnumpy()
res11_20 = res11[20].asnumpy()
res12_20 = res12[20].asnumpy()
np.testing.assert_allclose(res9_20 ,res10_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_20 ,res11_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_20 ,res12_20, atol=1e-3, rtol=1e-3)
(res9_20 == res10_20).all()
(res9_20 == res11_20).all()
(res9_20 == res12_20).all()
res9_21 = module9.get_output(21).asnumpy()
res10_21 = res10[21].asnumpy()
res11_21 = res11[21].asnumpy()
res12_21 = res12[21].asnumpy()
np.testing.assert_allclose(res9_21 ,res10_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_21 ,res11_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_21 ,res12_21, atol=1e-3, rtol=1e-3)
(res9_21 == res10_21).all()
(res9_21 == res11_21).all()
(res9_21 == res12_21).all()
res9_22 = module9.get_output(22).asnumpy()
res10_22 = res10[22].asnumpy()
res11_22 = res11[22].asnumpy()
res12_22 = res12[22].asnumpy()
np.testing.assert_allclose(res9_22 ,res10_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_22 ,res11_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_22 ,res12_22, atol=1e-3, rtol=1e-3)
(res9_22 == res10_22).all()
(res9_22 == res11_22).all()
(res9_22 == res12_22).all()
module13.set_input('var_197', input_197)
module13.set_input('var_200', input_200)
module13.set_input('var_220', input_220)
module13.set_input('var_228', input_228)
module13.set_input('var_230', input_230)
module13.set_input('var_242', input_242)
module13.set_input('var_254', input_254)
module13.set_input('var_273', input_273)
module13.set_input('var_279', input_279)
module13.set_input('var_286', input_286)
module13.set_input('var_308', input_308)
module13.set_input('var_326', input_326)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_197, input_200, input_220, input_228, input_230, input_242, input_254, input_273, input_279, input_286, input_308, input_326, )
res15 = intrp15.evaluate()(input_197, input_200, input_220, input_228, input_230, input_242, input_254, input_273, input_279, input_286, input_308, input_326, )
res16 = intrp16.evaluate()(input_197, input_200, input_220, input_228, input_230, input_242, input_254, input_273, input_279, input_286, input_308, input_326, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
res13_14 = module13.get_output(14).asnumpy()
res14_14 = res14[14].asnumpy()
res15_14 = res15[14].asnumpy()
res16_14 = res16[14].asnumpy()
np.testing.assert_allclose(res13_14 ,res14_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res15_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res16_14, atol=1e-3, rtol=1e-3)
(res13_14 == res14_14).all()
(res13_14 == res15_14).all()
(res13_14 == res16_14).all()
res13_15 = module13.get_output(15).asnumpy()
res14_15 = res14[15].asnumpy()
res15_15 = res15[15].asnumpy()
res16_15 = res16[15].asnumpy()
np.testing.assert_allclose(res13_15 ,res14_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res15_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res16_15, atol=1e-3, rtol=1e-3)
(res13_15 == res14_15).all()
(res13_15 == res15_15).all()
(res13_15 == res16_15).all()
res13_16 = module13.get_output(16).asnumpy()
res14_16 = res14[16].asnumpy()
res15_16 = res15[16].asnumpy()
res16_16 = res16[16].asnumpy()
np.testing.assert_allclose(res13_16 ,res14_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res15_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res16_16, atol=1e-3, rtol=1e-3)
(res13_16 == res14_16).all()
(res13_16 == res15_16).all()
(res13_16 == res16_16).all()
res13_17 = module13.get_output(17).asnumpy()
res14_17 = res14[17].asnumpy()
res15_17 = res15[17].asnumpy()
res16_17 = res16[17].asnumpy()
np.testing.assert_allclose(res13_17 ,res14_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res15_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res16_17, atol=1e-3, rtol=1e-3)
(res13_17 == res14_17).all()
(res13_17 == res15_17).all()
(res13_17 == res16_17).all()
res13_18 = module13.get_output(18).asnumpy()
res14_18 = res14[18].asnumpy()
res15_18 = res15[18].asnumpy()
res16_18 = res16[18].asnumpy()
np.testing.assert_allclose(res13_18 ,res14_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res15_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res16_18, atol=1e-3, rtol=1e-3)
(res13_18 == res14_18).all()
(res13_18 == res15_18).all()
(res13_18 == res16_18).all()
res13_19 = module13.get_output(19).asnumpy()
res14_19 = res14[19].asnumpy()
res15_19 = res15[19].asnumpy()
res16_19 = res16[19].asnumpy()
np.testing.assert_allclose(res13_19 ,res14_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_19 ,res15_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_19 ,res16_19, atol=1e-3, rtol=1e-3)
(res13_19 == res14_19).all()
(res13_19 == res15_19).all()
(res13_19 == res16_19).all()
res13_20 = module13.get_output(20).asnumpy()
res14_20 = res14[20].asnumpy()
res15_20 = res15[20].asnumpy()
res16_20 = res16[20].asnumpy()
np.testing.assert_allclose(res13_20 ,res14_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_20 ,res15_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_20 ,res16_20, atol=1e-3, rtol=1e-3)
(res13_20 == res14_20).all()
(res13_20 == res15_20).all()
(res13_20 == res16_20).all()
res13_21 = module13.get_output(21).asnumpy()
res14_21 = res14[21].asnumpy()
res15_21 = res15[21].asnumpy()
res16_21 = res16[21].asnumpy()
np.testing.assert_allclose(res13_21 ,res14_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_21 ,res15_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_21 ,res16_21, atol=1e-3, rtol=1e-3)
(res13_21 == res14_21).all()
(res13_21 == res15_21).all()
(res13_21 == res16_21).all()
res13_22 = module13.get_output(22).asnumpy()
res14_22 = res14[22].asnumpy()
res15_22 = res15[22].asnumpy()
res16_22 = res16[22].asnumpy()
np.testing.assert_allclose(res13_22 ,res14_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_22 ,res15_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_22 ,res16_22, atol=1e-3, rtol=1e-3)
(res13_22 == res14_22).all()
(res13_22 == res15_22).all()
(res13_22 == res16_22).all()
module17.set_input('var_197', input_197)
module17.set_input('var_200', input_200)
module17.set_input('var_220', input_220)
module17.set_input('var_228', input_228)
module17.set_input('var_230', input_230)
module17.set_input('var_242', input_242)
module17.set_input('var_254', input_254)
module17.set_input('var_273', input_273)
module17.set_input('var_279', input_279)
module17.set_input('var_286', input_286)
module17.set_input('var_308', input_308)
module17.set_input('var_326', input_326)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_197, input_200, input_220, input_228, input_230, input_242, input_254, input_273, input_279, input_286, input_308, input_326, )
res19 = intrp19.evaluate()(input_197, input_200, input_220, input_228, input_230, input_242, input_254, input_273, input_279, input_286, input_308, input_326, )
res20 = intrp20.evaluate()(input_197, input_200, input_220, input_228, input_230, input_242, input_254, input_273, input_279, input_286, input_308, input_326, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
res17_14 = module17.get_output(14).asnumpy()
res18_14 = res18[14].asnumpy()
res19_14 = res19[14].asnumpy()
res20_14 = res20[14].asnumpy()
np.testing.assert_allclose(res17_14 ,res18_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res19_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res20_14, atol=1e-3, rtol=1e-3)
(res17_14 == res18_14).all()
(res17_14 == res19_14).all()
(res17_14 == res20_14).all()
res17_15 = module17.get_output(15).asnumpy()
res18_15 = res18[15].asnumpy()
res19_15 = res19[15].asnumpy()
res20_15 = res20[15].asnumpy()
np.testing.assert_allclose(res17_15 ,res18_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res19_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res20_15, atol=1e-3, rtol=1e-3)
(res17_15 == res18_15).all()
(res17_15 == res19_15).all()
(res17_15 == res20_15).all()
res17_16 = module17.get_output(16).asnumpy()
res18_16 = res18[16].asnumpy()
res19_16 = res19[16].asnumpy()
res20_16 = res20[16].asnumpy()
np.testing.assert_allclose(res17_16 ,res18_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res19_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res20_16, atol=1e-3, rtol=1e-3)
(res17_16 == res18_16).all()
(res17_16 == res19_16).all()
(res17_16 == res20_16).all()
res17_17 = module17.get_output(17).asnumpy()
res18_17 = res18[17].asnumpy()
res19_17 = res19[17].asnumpy()
res20_17 = res20[17].asnumpy()
np.testing.assert_allclose(res17_17 ,res18_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res19_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res20_17, atol=1e-3, rtol=1e-3)
(res17_17 == res18_17).all()
(res17_17 == res19_17).all()
(res17_17 == res20_17).all()
res17_18 = module17.get_output(18).asnumpy()
res18_18 = res18[18].asnumpy()
res19_18 = res19[18].asnumpy()
res20_18 = res20[18].asnumpy()
np.testing.assert_allclose(res17_18 ,res18_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res19_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res20_18, atol=1e-3, rtol=1e-3)
(res17_18 == res18_18).all()
(res17_18 == res19_18).all()
(res17_18 == res20_18).all()
res17_19 = module17.get_output(19).asnumpy()
res18_19 = res18[19].asnumpy()
res19_19 = res19[19].asnumpy()
res20_19 = res20[19].asnumpy()
np.testing.assert_allclose(res17_19 ,res18_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_19 ,res19_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_19 ,res20_19, atol=1e-3, rtol=1e-3)
(res17_19 == res18_19).all()
(res17_19 == res19_19).all()
(res17_19 == res20_19).all()
res17_20 = module17.get_output(20).asnumpy()
res18_20 = res18[20].asnumpy()
res19_20 = res19[20].asnumpy()
res20_20 = res20[20].asnumpy()
np.testing.assert_allclose(res17_20 ,res18_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_20 ,res19_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_20 ,res20_20, atol=1e-3, rtol=1e-3)
(res17_20 == res18_20).all()
(res17_20 == res19_20).all()
(res17_20 == res20_20).all()
res17_21 = module17.get_output(21).asnumpy()
res18_21 = res18[21].asnumpy()
res19_21 = res19[21].asnumpy()
res20_21 = res20[21].asnumpy()
np.testing.assert_allclose(res17_21 ,res18_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_21 ,res19_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_21 ,res20_21, atol=1e-3, rtol=1e-3)
(res17_21 == res18_21).all()
(res17_21 == res19_21).all()
(res17_21 == res20_21).all()
res17_22 = module17.get_output(22).asnumpy()
res18_22 = res18[22].asnumpy()
res19_22 = res19[22].asnumpy()
res20_22 = res20[22].asnumpy()
np.testing.assert_allclose(res17_22 ,res18_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_22 ,res19_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_22 ,res20_22, atol=1e-3, rtol=1e-3)
(res17_22 == res18_22).all()
(res17_22 == res19_22).all()
(res17_22 == res20_22).all()
module21.set_input('var_197', input_197)
module21.set_input('var_200', input_200)
module21.set_input('var_220', input_220)
module21.set_input('var_228', input_228)
module21.set_input('var_230', input_230)
module21.set_input('var_242', input_242)
module21.set_input('var_254', input_254)
module21.set_input('var_273', input_273)
module21.set_input('var_279', input_279)
module21.set_input('var_286', input_286)
module21.set_input('var_308', input_308)
module21.set_input('var_326', input_326)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_197, input_200, input_220, input_228, input_230, input_242, input_254, input_273, input_279, input_286, input_308, input_326, )
res23 = intrp23.evaluate()(input_197, input_200, input_220, input_228, input_230, input_242, input_254, input_273, input_279, input_286, input_308, input_326, )
res24 = intrp24.evaluate()(input_197, input_200, input_220, input_228, input_230, input_242, input_254, input_273, input_279, input_286, input_308, input_326, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()
res21_14 = module21.get_output(14).asnumpy()
res22_14 = res22[14].asnumpy()
res23_14 = res23[14].asnumpy()
res24_14 = res24[14].asnumpy()
np.testing.assert_allclose(res21_14 ,res22_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res23_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res24_14, atol=1e-3, rtol=1e-3)
(res21_14 == res22_14).all()
(res21_14 == res23_14).all()
(res21_14 == res24_14).all()
res21_15 = module21.get_output(15).asnumpy()
res22_15 = res22[15].asnumpy()
res23_15 = res23[15].asnumpy()
res24_15 = res24[15].asnumpy()
np.testing.assert_allclose(res21_15 ,res22_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res23_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res24_15, atol=1e-3, rtol=1e-3)
(res21_15 == res22_15).all()
(res21_15 == res23_15).all()
(res21_15 == res24_15).all()
res21_16 = module21.get_output(16).asnumpy()
res22_16 = res22[16].asnumpy()
res23_16 = res23[16].asnumpy()
res24_16 = res24[16].asnumpy()
np.testing.assert_allclose(res21_16 ,res22_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res23_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res24_16, atol=1e-3, rtol=1e-3)
(res21_16 == res22_16).all()
(res21_16 == res23_16).all()
(res21_16 == res24_16).all()
res21_17 = module21.get_output(17).asnumpy()
res22_17 = res22[17].asnumpy()
res23_17 = res23[17].asnumpy()
res24_17 = res24[17].asnumpy()
np.testing.assert_allclose(res21_17 ,res22_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res23_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res24_17, atol=1e-3, rtol=1e-3)
(res21_17 == res22_17).all()
(res21_17 == res23_17).all()
(res21_17 == res24_17).all()
res21_18 = module21.get_output(18).asnumpy()
res22_18 = res22[18].asnumpy()
res23_18 = res23[18].asnumpy()
res24_18 = res24[18].asnumpy()
np.testing.assert_allclose(res21_18 ,res22_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res23_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res24_18, atol=1e-3, rtol=1e-3)
(res21_18 == res22_18).all()
(res21_18 == res23_18).all()
(res21_18 == res24_18).all()
res21_19 = module21.get_output(19).asnumpy()
res22_19 = res22[19].asnumpy()
res23_19 = res23[19].asnumpy()
res24_19 = res24[19].asnumpy()
np.testing.assert_allclose(res21_19 ,res22_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_19 ,res23_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_19 ,res24_19, atol=1e-3, rtol=1e-3)
(res21_19 == res22_19).all()
(res21_19 == res23_19).all()
(res21_19 == res24_19).all()
res21_20 = module21.get_output(20).asnumpy()
res22_20 = res22[20].asnumpy()
res23_20 = res23[20].asnumpy()
res24_20 = res24[20].asnumpy()
np.testing.assert_allclose(res21_20 ,res22_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_20 ,res23_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_20 ,res24_20, atol=1e-3, rtol=1e-3)
(res21_20 == res22_20).all()
(res21_20 == res23_20).all()
(res21_20 == res24_20).all()
res21_21 = module21.get_output(21).asnumpy()
res22_21 = res22[21].asnumpy()
res23_21 = res23[21].asnumpy()
res24_21 = res24[21].asnumpy()
np.testing.assert_allclose(res21_21 ,res22_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_21 ,res23_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_21 ,res24_21, atol=1e-3, rtol=1e-3)
(res21_21 == res22_21).all()
(res21_21 == res23_21).all()
(res21_21 == res24_21).all()
res21_22 = module21.get_output(22).asnumpy()
res22_22 = res22[22].asnumpy()
res23_22 = res23[22].asnumpy()
res24_22 = res24[22].asnumpy()
np.testing.assert_allclose(res21_22 ,res22_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_22 ,res23_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_22 ,res24_22, atol=1e-3, rtol=1e-3)
(res21_22 == res22_22).all()
(res21_22 == res23_22).all()
(res21_22 == res24_22).all()

'''33: TVMFuncCall
32: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
31: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
30: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
29: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
28: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
27: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
26: tvm::relay::GraphPlanMemory(tvm::relay::Function const&)
25: tvm::relay::StorageAllocator::Plan(tvm::relay::Function const&)
24: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
21: tvm::relay::transform::DeviceAwareExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
20: tvm::relay::StorageAllocaBaseVisitor::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
19: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
18: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
17: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
16: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
15: tvm::relay::StorageAllocaBaseVisitor::VisitExpr_(tvm::relay::TupleNode const*)
14: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
13: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
12: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
11: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
10: tvm::relay::StorageAllocaBaseVisitor::VisitExpr_(tvm::relay::TupleGetItemNode const*)
9: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
8: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
7: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
6: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
5: tvm::relay::transform::DeviceAwareExprVisitor::VisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::StorageAllocator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
3: tvm::relay::StorageAllocaBaseVisitor::CreateToken(tvm::RelayExprNode const*, bool)
2: tvm::relay::StorageAllocator::CreateTokenOnDevice(tvm::RelayExprNode const*, tvm::VirtualDevice const&, bool)
1: tvm::relay::StorageAllocator::Request(tvm::relay::StorageToken*)
0: tvm::relay::StorageAllocator::GetMemorySize(tvm::relay::StorageToken*)

'''