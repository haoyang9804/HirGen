import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "int8", shape = (14,))#candidate|0|(14,)|var|int8
const_1 = relay.const([6,-10,-8,2,2,-8,-8,6,-8,6,10,4,-3,-7], dtype = "int8")#candidate|1|(14,)|const|int8
bop_2 = relay.left_shift(var_0.astype('int8'), relay.reshape(const_1.astype('int8'), relay.shape_of(var_0))) # shape=(14,)
uop_5 = relay.sqrt(var_0.astype('float32')) # shape=(14,)
uop_7 = relay.sigmoid(var_0.astype('float32')) # shape=(14,)
uop_9 = relay.atanh(uop_5.astype('float32')) # shape=(14,)
bop_11 = relay.less_equal(uop_9.astype('bool'), relay.reshape(const_1.astype('bool'), relay.shape_of(uop_9))) # shape=(14,)
var_14 = relay.var("var_14", dtype = "bool", shape = (14,))#candidate|14|(14,)|var|bool
bop_15 = relay.mod(bop_11.astype('float32'), relay.reshape(var_14.astype('float32'), relay.shape_of(bop_11))) # shape=(14,)
var_18 = relay.var("var_18", dtype = "float32", shape = (14,))#candidate|18|(14,)|var|float32
bop_19 = relay.left_shift(uop_7.astype('uint16'), relay.reshape(var_18.astype('uint16'), relay.shape_of(uop_7))) # shape=(14,)
bop_22 = relay.maximum(const_1.astype('int16'), relay.reshape(var_0.astype('int16'), relay.shape_of(const_1))) # shape=(14,)
uop_25 = relay.acosh(uop_9.astype('float64')) # shape=(14,)
uop_27 = relay.cos(uop_25.astype('float64')) # shape=(14,)
bop_29 = relay.less(uop_27.astype('bool'), relay.reshape(var_18.astype('bool'), relay.shape_of(uop_27))) # shape=(14,)
bop_32 = relay.bitwise_and(bop_29.astype('uint16'), relay.reshape(bop_19.astype('uint16'), relay.shape_of(bop_29))) # shape=(14,)
uop_35 = relay.log10(bop_29.astype('float64')) # shape=(14,)
bop_37 = relay.not_equal(uop_27.astype('bool'), relay.reshape(var_18.astype('bool'), relay.shape_of(uop_27))) # shape=(14,)
uop_40 = relay.erf(uop_35.astype('float32')) # shape=(14,)
bop_42 = relay.bitwise_xor(uop_35.astype('uint16'), relay.reshape(const_1.astype('uint16'), relay.shape_of(uop_35))) # shape=(14,)
const_45 = relay.const([-3.766791,3.723974,7.056049,1.269622,7.999144,7.380551,3.726613,-5.718394,-4.844039,8.446187,6.353604,8.097142,-4.051388,-4.573092], dtype = "float32")#candidate|45|(14,)|const|float32
bop_46 = relay.add(uop_40.astype('float64'), relay.reshape(const_45.astype('float64'), relay.shape_of(uop_40))) # shape=(14,)
uop_49 = relay.atan(bop_46.astype('float32')) # shape=(14,)
uop_51 = relay.atanh(uop_7.astype('float32')) # shape=(14,)
uop_53 = relay.exp(uop_35.astype('float64')) # shape=(14,)
uop_55 = relay.acos(uop_5.astype('float64')) # shape=(14,)
bop_57 = relay.bitwise_and(uop_49.astype('int64'), relay.reshape(var_18.astype('int64'), relay.shape_of(uop_49))) # shape=(14,)
uop_60 = relay.sin(uop_49.astype('float32')) # shape=(14,)
var_62 = relay.var("var_62", dtype = "uint16", shape = (14,))#candidate|62|(14,)|var|uint16
bop_63 = relay.logical_xor(bop_32.astype('int8'), relay.reshape(var_62.astype('int8'), relay.shape_of(bop_32))) # shape=(14,)
uop_66 = relay.cos(uop_55.astype('float32')) # shape=(14,)
bop_68 = relay.less(uop_60.astype('bool'), relay.reshape(bop_19.astype('bool'), relay.shape_of(uop_60))) # shape=(14,)
bop_71 = relay.logical_or(uop_60.astype('bool'), relay.reshape(uop_40.astype('bool'), relay.shape_of(uop_60))) # shape=(14,)
output = relay.Tuple([bop_2,bop_15,bop_22,bop_37,bop_42,uop_51,uop_53,bop_57,bop_63,uop_66,bop_68,bop_71,])
output2 = relay.Tuple([bop_2,bop_15,bop_22,bop_37,bop_42,uop_51,uop_53,bop_57,bop_63,uop_66,bop_68,bop_71,])
func_74 = relay.Function([var_0,var_14,var_18,var_62,], output)
mod['func_74'] = func_74
mod = relay.transform.InferType()(mod)
mutated_mod['func_74'] = func_74
mutated_mod = relay.transform.InferType()(mutated_mod)
func_74_call = mutated_mod.get_global_var('func_74')
var_76 = relay.var("var_76", dtype = "int8", shape = (14,))#candidate|76|(14,)|var|int8
var_77 = relay.var("var_77", dtype = "bool", shape = (14,))#candidate|77|(14,)|var|bool
var_78 = relay.var("var_78", dtype = "float32", shape = (14,))#candidate|78|(14,)|var|float32
var_79 = relay.var("var_79", dtype = "uint16", shape = (14,))#candidate|79|(14,)|var|uint16
call_75 = func_74_call(var_76,var_77,var_78,var_79,)
output = call_75
func_80 = relay.Function([var_76,var_77,var_78,var_79,], output)
mutated_mod['func_80'] = func_80
mutated_mod = relay.transform.InferType()(mutated_mod)
var_82 = relay.var("var_82", dtype = "float64", shape = ())#candidate|82|()|var|float64
uop_83 = relay.exp(var_82.astype('float64')) # shape=()
var_85 = relay.var("var_85", dtype = "float64", shape = (6,))#candidate|85|(6,)|var|float64
bop_86 = relay.logical_and(uop_83.astype('bool'), var_85.astype('bool')) # shape=(6,)
bop_89 = relay.logical_or(var_82.astype('bool'), bop_86.astype('bool')) # shape=(6,)
var_92 = relay.var("var_92", dtype = "bool", shape = (6,))#candidate|92|(6,)|var|bool
bop_93 = relay.less_equal(bop_89.astype('bool'), relay.reshape(var_92.astype('bool'), relay.shape_of(bop_89))) # shape=(6,)
var_96 = relay.var("var_96", dtype = "bool", shape = (6,))#candidate|96|(6,)|var|bool
bop_97 = relay.not_equal(bop_86.astype('bool'), relay.reshape(var_96.astype('bool'), relay.shape_of(bop_86))) # shape=(6,)
output = relay.Tuple([bop_93,bop_97,])
output2 = relay.Tuple([bop_93,bop_97,])
func_100 = relay.Function([var_82,var_85,var_92,var_96,], output)
mod['func_100'] = func_100
mod = relay.transform.InferType()(mod)
mutated_mod['func_100'] = func_100
mutated_mod = relay.transform.InferType()(mutated_mod)
func_100_call = mutated_mod.get_global_var('func_100')
var_102 = relay.var("var_102", dtype = "float64", shape = ())#candidate|102|()|var|float64
var_103 = relay.var("var_103", dtype = "float64", shape = (6,))#candidate|103|(6,)|var|float64
var_104 = relay.var("var_104", dtype = "bool", shape = (6,))#candidate|104|(6,)|var|bool
var_105 = relay.var("var_105", dtype = "bool", shape = (6,))#candidate|105|(6,)|var|bool
call_101 = func_100_call(var_102,var_103,var_104,var_105,)
output = call_101
func_106 = relay.Function([var_102,var_103,var_104,var_105,], output)
mutated_mod['func_106'] = func_106
mutated_mod = relay.transform.InferType()(mutated_mod)
const_108 = relay.const([[[1.011119,-5.043491,4.205774,-6.816361,4.200698,7.489099,2.272469,-7.683967,9.590316],[8.396226,5.127308,6.077767,-6.279296,-5.838896,-2.748604,-9.604365,-4.697979,8.573045],[-7.454046,-5.088864,5.609955,0.280080,-2.041023,1.419745,4.834761,2.455285,-7.983237],[-3.595763,-2.845146,-1.931414,-5.074405,-3.423341,7.933250,-8.831668,3.160124,0.261012],[-3.422587,-7.787394,-5.669317,5.945614,-3.818582,-1.511757,6.240138,6.718522,0.184889],[-7.923964,4.601490,-8.285767,3.121876,-3.677040,5.130277,6.878806,-4.204539,-4.589472],[3.587424,9.998855,3.098447,-4.872820,-7.662812,-0.285346,9.186477,6.889840,-4.925727],[7.839509,-5.719701,-7.020769,-1.714521,-2.462917,0.285957,8.746098,-7.717975,-4.450693],[3.312879,-0.567954,8.811208,2.185143,-6.063525,4.939796,9.555651,-8.071357,-0.028470],[5.517482,-2.173736,3.719947,5.415893,-0.822620,5.530683,4.856056,1.274775,-0.262082]],[[-3.611256,7.135236,-0.098857,8.536930,9.426598,-8.478415,9.125451,-7.565769,6.067111],[7.313111,6.562764,-6.029305,6.538147,5.098742,9.567907,1.645831,2.466046,-3.270983],[7.381302,3.755871,6.984064,-8.447182,-0.353579,-4.514626,-4.717307,-0.434085,5.512651],[5.860627,-9.345358,4.570903,-8.661488,3.161159,5.038423,-3.918577,-1.010962,-5.179016],[7.145200,-4.588316,4.867878,5.733640,-3.085603,2.923801,-3.133186,-6.462010,0.191994],[-8.720393,-5.441137,-9.312268,-5.561914,-8.697605,-8.074243,-7.495114,9.907427,7.064359],[-2.872721,8.952534,-3.879282,-7.523196,9.862272,0.992456,1.789835,-7.969002,-9.584417],[7.801120,9.211620,3.345292,-5.679491,2.754865,-5.905230,7.756991,9.584244,5.273220],[4.136382,-3.981733,5.163544,-2.237169,-8.387282,-2.610087,0.685458,6.244261,-0.684865],[-5.811910,-5.559084,-1.253184,4.523210,3.345773,-7.779316,-6.815830,9.833737,-6.362356]],[[0.571397,2.777742,-7.296773,-5.458376,5.903651,-3.914589,-0.206496,8.815137,0.711239],[9.018150,7.636181,2.726853,1.813227,9.760081,4.948199,3.799071,-7.918971,-9.335261],[2.074151,-2.287585,-8.773674,-7.490578,-3.191336,5.640961,3.777164,-5.891642,-8.904727],[6.588877,1.982714,-2.953630,-2.178665,3.433160,-2.197111,7.657354,-1.103304,-9.953141],[5.665528,4.929436,-1.499806,0.230567,2.756447,-5.457636,9.445141,-0.219862,3.281590],[9.972335,-5.617987,-0.133407,-2.607656,-9.078194,-9.760724,1.079493,3.193633,3.319283],[-5.603192,-1.858698,-9.431584,2.559120,-2.372591,-4.468408,-5.571151,7.005678,0.033045],[4.745804,-5.111748,-6.454680,-1.399483,-3.417518,2.910352,-4.706589,-8.432935,5.864735],[7.309820,-3.125310,-1.034514,0.506946,6.854706,-9.491376,1.927750,-4.061785,7.482415],[-0.463910,3.777290,-4.598150,-5.324832,-8.480904,2.957158,0.375690,-0.262663,-0.910636]]], dtype = "float32")#candidate|108|(3, 10, 9)|const|float32
uop_109 = relay.cosh(const_108.astype('float32')) # shape=(3, 10, 9)
uop_111 = relay.erf(const_108.astype('float32')) # shape=(3, 10, 9)
bop_113 = relay.floor_divide(uop_111.astype('float32'), relay.reshape(const_108.astype('float32'), relay.shape_of(uop_111))) # shape=(3, 10, 9)
bop_116 = relay.logical_and(const_108.astype('bool'), relay.reshape(uop_109.astype('bool'), relay.shape_of(const_108))) # shape=(3, 10, 9)
output = relay.Tuple([bop_113,bop_116,])
output2 = relay.Tuple([bop_113,bop_116,])
func_119 = relay.Function([], output)
mod['func_119'] = func_119
mod = relay.transform.InferType()(mod)
output = func_119()
func_120 = relay.Function([], output)
mutated_mod['func_120'] = func_120
mutated_mod = relay.transform.InferType()(mutated_mod)
var_121 = relay.var("var_121", dtype = "float64", shape = (12,))#candidate|121|(12,)|var|float64
var_122 = relay.var("var_122", dtype = "float64", shape = (12,))#candidate|122|(12,)|var|float64
bop_123 = relay.mod(var_121.astype('float64'), relay.reshape(var_122.astype('float64'), relay.shape_of(var_121))) # shape=(12,)
uop_126 = relay.erf(bop_123.astype('float32')) # shape=(12,)
output = uop_126
output2 = uop_126
func_128 = relay.Function([var_121,var_122,], output)
mod['func_128'] = func_128
mod = relay.transform.InferType()(mod)
mutated_mod['func_128'] = func_128
mutated_mod = relay.transform.InferType()(mutated_mod)
func_128_call = mutated_mod.get_global_var('func_128')
var_130 = relay.var("var_130", dtype = "float64", shape = (12,))#candidate|130|(12,)|var|float64
var_131 = relay.var("var_131", dtype = "float64", shape = (12,))#candidate|131|(12,)|var|float64
call_129 = func_128_call(var_130,var_131,)
output = call_129
func_132 = relay.Function([var_130,var_131,], output)
mutated_mod['func_132'] = func_132
mutated_mod = relay.transform.InferType()(mutated_mod)
var_134 = relay.var("var_134", dtype = "float64", shape = (14, 9, 7))#candidate|134|(14, 9, 7)|var|float64
uop_135 = relay.sinh(var_134.astype('float64')) # shape=(14, 9, 7)
var_137 = relay.var("var_137", dtype = "float64", shape = (14, 9, 7))#candidate|137|(14, 9, 7)|var|float64
bop_138 = relay.multiply(uop_135.astype('uint32'), relay.reshape(var_137.astype('uint32'), relay.shape_of(uop_135))) # shape=(14, 9, 7)
bop_141 = relay.greater_equal(var_134.astype('bool'), relay.reshape(uop_135.astype('bool'), relay.shape_of(var_134))) # shape=(14, 9, 7)
bop_144 = relay.not_equal(var_137.astype('bool'), relay.reshape(bop_138.astype('bool'), relay.shape_of(var_137))) # shape=(14, 9, 7)
uop_147 = relay.sqrt(bop_138.astype('float64')) # shape=(14, 9, 7)
uop_149 = relay.log10(var_137.astype('float32')) # shape=(14, 9, 7)
uop_151 = relay.exp(uop_147.astype('float32')) # shape=(14, 9, 7)
uop_153 = relay.sqrt(uop_151.astype('float64')) # shape=(14, 9, 7)
bop_155 = relay.multiply(uop_151.astype('int64'), relay.reshape(uop_147.astype('int64'), relay.shape_of(uop_151))) # shape=(14, 9, 7)
uop_158 = relay.acos(uop_153.astype('float32')) # shape=(14, 9, 7)
const_160 = relay.const([[[1.658961,3.908684,-8.834459,-5.556422,-8.130064,5.809801,-6.043126],[6.064766,-0.694242,4.562801,-6.992550,-3.583566,-7.000925,-9.403213],[4.857928,-2.050843,7.541007,-4.648007,-5.065522,2.107395,3.396647],[9.119315,-0.844073,-9.103349,4.758326,8.041406,5.337058,9.201354],[-6.229114,-9.336804,-6.024117,-0.025882,-7.360623,7.410449,-3.213646],[6.107668,9.832234,5.343652,6.580333,-2.297627,1.284873,-5.044447],[0.559208,-3.054940,-2.245025,1.102004,2.102822,-2.515915,5.015533],[-9.169099,-4.489102,6.002351,7.172987,7.697709,-6.352100,8.294103],[0.971564,1.880764,-4.267963,8.071196,-5.092957,7.201760,-6.946813]],[[4.441831,7.200918,6.907837,-5.527983,2.119530,0.528223,-5.223014],[0.457962,7.166593,-7.416710,9.377521,-9.717361,6.385536,-4.034556],[7.781165,-2.863398,-2.357930,-4.044912,6.554026,-3.619832,-9.541299],[7.687929,1.614633,1.211267,8.835391,8.991327,-1.440498,3.732238],[-9.493439,-8.173927,4.380861,7.102577,-1.853805,4.132064,-1.138273],[-5.433411,-2.061574,2.283153,-3.185891,-2.777321,-5.606414,1.624205],[-0.595758,-0.019729,-7.433270,-4.116546,6.834821,2.327006,4.492813],[0.170881,-0.757876,5.642024,2.415626,-4.020134,1.853200,-6.475017],[7.828654,-8.194630,-0.440211,-3.826291,1.487927,-3.235410,-5.017973]],[[-9.780799,3.550966,8.017305,2.899447,-5.210485,-5.490040,2.679213],[5.711670,2.912118,3.868601,-5.591870,7.289036,-1.930677,2.065272],[7.364172,-7.285691,-9.615134,-5.674226,9.139968,-8.591166,-2.450772],[-9.138026,-5.152103,6.202821,-0.865865,6.017025,1.364530,-5.433308],[3.723191,-3.836769,0.976006,-2.452373,-4.765867,-9.974842,-1.344270],[8.539851,6.217688,-6.819056,-2.501569,1.004253,-4.125050,6.606131],[6.107865,7.038199,-2.058854,-8.700480,-7.227511,2.558163,8.571488],[-1.647317,-7.161287,-4.063534,-5.889336,2.052609,4.897685,4.346306],[8.794772,2.794685,-0.484031,4.213454,-6.215088,8.888167,-3.230755]],[[-9.188892,-6.763829,2.349422,-4.373301,-3.869610,0.354708,3.407619],[-4.730621,-9.387348,-7.472322,2.864828,4.532954,6.094589,-7.277267],[-2.464745,7.487538,-8.732498,-0.913493,-8.913222,4.480650,8.288480],[-5.192037,4.204694,5.087465,-0.535569,6.771827,3.498683,-4.220631],[0.353592,7.207808,2.561558,-7.616547,-0.463910,6.847895,7.910151],[6.741138,7.756359,-5.394707,-9.531452,0.797427,6.552181,-7.159295],[5.144753,4.492404,0.089725,-4.140501,0.186596,-8.408286,7.293955],[-2.144472,0.374101,0.366313,4.034850,4.965812,-2.840280,-4.758050],[-9.734435,-1.083486,9.627424,-0.429591,-1.351512,4.134376,2.164049]],[[7.523905,3.417682,5.904475,0.875512,-9.410966,-5.968395,-7.695184],[-2.261504,-4.359770,-7.633302,-6.887258,-1.370844,-9.838120,7.240666],[-3.944300,-9.718931,-6.453857,2.433187,-0.782679,-9.031053,0.794523],[-1.684084,6.546175,-2.956644,7.503921,-9.322385,-9.999817,-9.952389],[4.992938,-2.853560,-9.458249,6.122478,7.015790,7.982078,5.551669],[-7.591854,-2.723006,0.847619,4.980041,-5.635886,-1.452799,-0.591515],[3.176224,6.043128,-3.117541,7.540663,-5.929641,9.167401,8.087215],[2.753644,3.165897,-8.689523,5.112356,4.867126,6.075726,8.920431],[7.969098,1.925599,5.886144,8.794667,-1.165701,-1.722842,-3.174137]],[[-8.352722,-7.950197,-0.567090,3.621388,-5.699588,-7.929005,8.279836],[5.781643,9.651035,-8.345589,2.500898,-2.911539,-7.697705,9.446930],[1.182845,-8.717691,-0.162295,-3.997135,-0.546150,0.417296,-9.602685],[1.388980,8.120752,-0.721177,8.165996,4.976107,-2.489720,6.507513],[5.159116,-8.013055,-0.503263,-1.662043,7.595700,-8.033546,3.295195],[-9.292401,2.201079,3.345279,-5.931127,-0.833684,9.508964,4.151461],[0.162281,-4.935746,5.880198,3.061036,2.492479,-3.261330,-5.703197],[9.976805,-1.754082,2.147286,8.150259,8.524200,3.147861,6.444922],[3.908347,-2.367103,8.988762,8.370140,7.074607,9.353679,2.241771]],[[-2.418369,-9.723231,8.226118,9.668822,-2.556595,8.742157,9.118793],[6.268030,3.568905,5.016347,4.968280,-2.017248,5.129073,-9.842065],[9.816481,1.049901,4.536015,5.022604,-4.208049,-9.551943,3.242581],[-2.691800,-6.876281,0.341049,8.788193,7.965216,9.705239,5.299575],[-8.104631,8.289721,1.716875,2.866778,-2.917512,9.045294,4.774091],[-5.775991,-0.965247,5.029644,-4.090386,-3.866821,0.242093,3.235716],[-8.245679,-3.031943,-7.085099,-2.760233,-4.408633,-0.985122,-3.284042],[9.493265,7.737852,-9.584814,1.101964,-5.912708,-6.670473,8.469200],[3.387868,-9.613849,4.841048,-8.925395,4.398789,-9.371562,-9.886096]],[[-3.881602,-6.880421,-4.840359,8.990121,3.846793,1.017603,0.338268],[5.170275,5.969399,9.291521,-0.436793,-0.374546,-3.304222,4.116463],[6.175798,3.559508,-5.070565,-5.337669,-4.519268,3.962368,-7.084734],[8.552760,-8.675429,-9.680967,3.452434,6.932883,-0.206947,-9.001603],[8.759347,2.026719,0.290970,1.364599,0.674278,4.171371,4.992065],[2.099731,3.765323,5.898277,5.889153,5.745782,4.485976,-2.622836],[4.013973,-3.790058,-8.234725,8.605353,9.471928,3.922176,-8.455572],[-3.847451,9.417782,4.883863,-6.549119,-6.638010,-6.509775,7.961386],[1.853716,-0.393754,-0.040119,9.940735,-1.749517,2.148256,3.112183]],[[-4.860624,6.179252,-8.616210,2.710035,6.630612,-9.523078,0.682278],[8.319554,8.259296,3.543398,1.776562,-3.922650,-5.026819,-4.340903],[-3.597759,1.887294,3.763443,9.459377,7.156160,-2.286609,2.237401],[6.258836,2.527086,0.574604,4.608368,-1.073469,-7.248461,8.546531],[-3.433796,-9.709901,-1.981361,3.347737,-3.133533,3.077312,6.066831],[-6.227679,-7.773905,-8.074948,5.565070,-9.640439,-9.860800,3.839959],[-1.003852,2.612807,-8.093241,6.709110,9.685897,3.179349,-2.631411],[-2.784464,-1.595799,-8.141562,-5.929727,-6.637445,-6.319038,-8.863150],[-5.867877,0.271452,-7.985076,8.319379,1.855019,0.736569,7.919620]],[[-0.479967,0.862602,-2.096494,-6.092222,2.702024,7.203925,-4.239285],[-8.304815,-7.933357,-1.222531,5.500381,-2.852986,-3.702569,-9.170687],[3.480167,-9.097978,7.552088,-0.483976,6.733926,-0.058140,8.838641],[-5.560506,0.558454,-6.444035,7.480402,4.353545,8.687991,7.118302],[5.072925,-9.997147,-8.456166,5.558048,-8.580035,6.293823,-2.291966],[-8.799650,6.703537,5.983740,-2.082979,-2.681316,-3.103644,-5.816456],[1.685793,6.626029,5.737287,1.891676,-7.305379,3.323314,-2.618098],[-2.582742,-0.988602,-1.346556,-0.457299,-6.105696,2.471002,-7.809814],[6.648883,-5.329581,7.233513,0.985151,2.199948,-4.320681,1.814370]],[[-4.686011,-0.051620,-5.738885,-1.954741,-5.257346,-4.468939,8.563822],[5.813276,-0.422028,-1.323775,9.352547,-2.395306,6.175810,-7.114997],[-3.116330,4.286029,6.582523,3.718062,9.699081,6.028154,-0.226734],[-3.399135,2.309076,-5.628275,-9.467058,-6.321032,-5.988009,4.747023],[-5.586407,0.417127,9.407304,-6.553735,-6.156347,4.273027,0.546642],[1.526519,-6.556878,9.697581,0.763606,8.763884,-2.611775,6.846128],[7.298168,-3.564111,-4.034790,-4.686136,3.854920,9.683419,-1.160711],[4.092111,1.687315,-5.480805,-2.810318,2.598838,6.566309,-2.891102],[4.135865,-8.932783,-4.262366,-9.909474,-2.593079,-2.373383,7.516701]],[[9.036316,-1.082215,1.596633,9.328667,-9.609469,9.385864,2.516173],[-8.490249,0.302525,3.469389,-5.821005,-5.991315,3.699251,8.458553],[-8.590489,8.468713,5.614275,-8.955405,9.527972,-4.975053,-5.937231],[1.189076,-4.711017,7.066927,8.949291,1.143796,-9.409257,9.807263],[-8.645368,3.454782,8.286514,-2.443993,6.957986,-9.634007,-5.821644],[-7.099643,-2.810803,-1.758620,8.468621,-1.602219,-8.266371,1.417121],[-0.410286,-5.722687,8.945983,5.210099,-5.879663,1.867913,3.782946],[-5.529884,-7.324697,-6.242742,4.791973,9.781489,-3.093873,8.681009],[4.454268,8.765411,2.816287,-6.466047,3.180205,-3.799367,8.355874]],[[9.033229,9.943458,-0.063161,-9.595882,-2.636401,9.862581,5.982639],[-9.750340,3.637937,1.968348,8.978855,-8.554987,9.537543,4.338630],[-5.621475,-4.990432,7.588395,0.649014,9.927363,-8.955413,3.751294],[-3.275318,5.425785,-0.401047,-2.555151,3.701987,-7.380956,-0.018629],[-1.379334,0.612616,-2.396633,-7.490591,2.760605,-4.402889,-7.885823],[0.553378,-6.248436,-7.252096,-6.616236,-4.742430,-3.897747,-4.951395],[-1.772092,-4.337385,-8.777322,1.737515,3.942368,9.007112,1.993513],[-0.943005,-8.153952,-9.315627,0.210776,0.908946,5.329832,-3.579730],[6.481295,-0.907306,0.597441,-4.832416,4.263970,6.620423,-7.662439]],[[7.767606,-9.127414,5.872757,5.820207,7.111190,-4.198926,-2.983487],[2.528287,2.108455,1.320402,-5.012502,-7.860516,4.477646,-5.497435],[8.892905,5.512085,-1.808385,-2.537534,-8.981365,7.118956,-2.255615],[-8.123100,5.677155,2.776829,9.818693,5.940923,-1.265467,-2.357503],[1.890311,-3.979733,7.301704,5.462532,2.957845,8.520571,-9.168548],[8.675214,-7.415608,5.969472,2.581015,-8.497678,-2.091919,-7.893511],[-9.799443,-2.162730,5.854401,-3.650603,-1.398454,7.961809,5.592568],[7.276178,7.626071,-9.518642,5.701360,-5.600103,-9.118165,3.232529],[-4.282461,0.952455,-0.231620,-9.643752,-0.683750,4.633953,-8.181742]]], dtype = "float32")#candidate|160|(14, 9, 7)|const|float32
bop_161 = relay.add(uop_158.astype('int32'), relay.reshape(const_160.astype('int32'), relay.shape_of(uop_158))) # shape=(14, 9, 7)
var_164 = relay.var("var_164", dtype = "float32", shape = (14, 9, 7))#candidate|164|(14, 9, 7)|var|float32
bop_165 = relay.add(uop_158.astype('int64'), relay.reshape(var_164.astype('int64'), relay.shape_of(uop_158))) # shape=(14, 9, 7)
uop_168 = relay.sqrt(uop_153.astype('float64')) # shape=(14, 9, 7)
uop_170 = relay.acos(bop_165.astype('float32')) # shape=(14, 9, 7)
bop_172 = relay.power(bop_165.astype('float64'), relay.reshape(uop_135.astype('float64'), relay.shape_of(bop_165))) # shape=(14, 9, 7)
bop_175 = relay.right_shift(uop_170.astype('uint16'), relay.reshape(uop_147.astype('uint16'), relay.shape_of(uop_170))) # shape=(14, 9, 7)
uop_178 = relay.asin(uop_158.astype('float64')) # shape=(14, 9, 7)
uop_180 = relay.sqrt(bop_175.astype('float64')) # shape=(14, 9, 7)
uop_182 = relay.erf(uop_147.astype('float64')) # shape=(14, 9, 7)
uop_184 = relay.rsqrt(uop_180.astype('float32')) # shape=(14, 9, 7)
uop_186 = relay.atan(uop_184.astype('float64')) # shape=(14, 9, 7)
bop_188 = relay.logical_and(uop_180.astype('bool'), relay.reshape(bop_165.astype('bool'), relay.shape_of(uop_180))) # shape=(14, 9, 7)
uop_191 = relay.log(uop_184.astype('float64')) # shape=(14, 9, 7)
uop_193 = relay.erf(uop_184.astype('float64')) # shape=(14, 9, 7)
bop_195 = relay.subtract(uop_184.astype('int64'), relay.reshape(uop_147.astype('int64'), relay.shape_of(uop_184))) # shape=(14, 9, 7)
uop_198 = relay.tan(uop_186.astype('float64')) # shape=(14, 9, 7)
const_200 = relay.const([[[-5.617470,-0.439441,7.981062,8.639806,-7.740797,-5.390307,-1.979902],[8.858127,-1.904371,4.059773,9.214916,7.757891,7.533081,6.379157],[-8.732404,-5.289209,-1.836248,6.413732,2.042063,8.450902,1.406029],[3.261690,-8.640647,-8.795146,-3.282947,-4.836332,5.587472,5.095828],[8.747488,-0.631608,-2.253570,-5.057696,-4.852028,-7.290218,-1.153376],[7.972869,5.852530,-5.186329,7.256277,1.907216,-3.373051,8.371136],[0.556387,-6.447663,1.912304,0.564941,7.201420,-3.848649,5.910548],[4.997199,-9.191765,0.397655,1.219110,0.015932,-4.075879,7.599282],[-8.342742,-5.178131,9.729920,-6.129846,-4.251014,-4.113840,-3.460583]],[[9.951927,-8.875687,5.766522,7.875926,-4.261509,-0.845470,9.519741],[-3.241239,7.537191,-2.961177,8.257249,1.074767,-2.536902,4.115086],[0.977997,-7.138631,7.472821,-0.769171,7.578575,2.744246,-3.820932],[-2.642226,4.491879,-7.681565,8.477924,-9.614211,0.933775,9.020760],[1.042276,-8.890999,-4.337257,2.376865,4.886734,-7.020302,0.397119],[9.511657,-4.387145,-1.889014,-0.992569,-8.861971,3.236928,-7.466794],[-7.730093,-9.179887,-4.055919,8.586150,8.185561,-9.078962,-5.886352],[-1.075790,3.867099,7.003220,8.074066,4.166084,0.066064,4.845532],[-6.084859,7.641600,3.225957,9.705585,-1.364531,-1.292245,9.779065]],[[6.175918,-8.023485,-6.221040,6.202067,5.199112,5.022404,-4.817484],[-7.288569,1.972021,-0.967053,-7.856077,-3.917042,2.931361,-4.003299],[8.875902,7.308632,3.365137,-4.382993,6.859413,5.009232,-7.993533],[9.535506,9.492425,-8.666857,-4.309129,3.742533,9.118126,-1.010139],[0.165385,-5.674003,7.393711,0.603203,4.891104,-6.655912,1.124161],[1.843464,-9.484176,-9.744740,9.979946,-7.997365,7.492255,-5.641861],[8.597628,-0.211525,9.415092,7.245535,-1.665461,5.704918,-0.430865],[-5.130013,6.067797,9.910985,-1.919218,-0.527900,5.588867,9.334574],[-0.086104,8.158781,9.425575,-3.270846,-5.361115,1.942052,-6.456201]],[[4.115728,-9.097053,-7.352197,0.347013,2.602388,-8.346386,5.140401],[-4.118793,-3.652062,-4.507523,-1.334635,7.504558,-0.083473,4.185492],[-4.078668,-3.405496,-5.347226,5.400969,2.624741,7.373762,-7.661359],[-3.816644,3.451962,6.826173,1.154698,0.046540,6.689703,2.955113],[-1.453475,8.980416,-9.784130,-3.501546,-9.034288,-8.058914,9.539400],[-6.747789,0.934539,2.711655,3.576569,-3.293764,8.672971,-2.640266],[5.923972,-1.045069,-5.381017,-0.791248,-8.219208,-7.230290,7.415706],[-8.375237,-3.869364,-5.371965,3.039281,-8.528566,-5.447584,9.178008],[-4.587004,-2.396647,6.566716,0.601423,-6.220351,5.549789,5.670190]],[[4.625875,-3.831259,5.175156,-9.264882,-1.396471,0.723058,-4.679494],[9.996097,3.028040,-1.150576,6.184147,4.200717,5.698674,9.890289],[-8.106557,-9.373520,3.088316,2.907300,1.483337,-4.202953,7.137046],[-8.389753,-8.292256,3.069665,4.068397,8.811877,-2.545512,-9.026283],[1.487855,-0.796393,-1.575718,7.251428,7.867619,-4.210465,8.761323],[-5.796750,-4.243285,-6.795139,-6.788235,5.738428,9.772159,2.240790],[4.072722,-6.106662,7.139694,-9.907582,4.607392,6.845063,-3.296022],[-6.631346,-2.110814,-9.270305,2.134387,4.112446,-2.954867,-0.001408],[-4.272367,0.223050,6.234559,-0.113538,-1.056872,-0.712658,-8.009447]],[[-3.877833,8.672752,-7.022994,7.558582,-4.572254,-2.990487,9.606598],[-1.353958,-8.899587,3.656012,-1.387552,1.699038,8.841993,8.194735],[-3.091991,9.256125,-6.230394,2.301676,-5.277414,4.089511,5.121126],[5.506215,3.289346,-7.237989,-6.526827,1.825654,-7.835821,4.457832],[2.267276,9.279545,-2.392301,-8.508770,4.454220,-3.998506,2.375181],[2.712428,1.432884,1.927296,-5.556115,-0.455797,7.084762,-0.932332],[2.634808,3.386696,-5.831720,-9.136076,1.731557,-2.023374,-0.268954],[-6.945815,-2.148177,-8.425590,-6.962734,-0.899064,-4.498788,7.270584],[9.700710,8.899577,5.252061,9.806031,-5.023179,2.212513,-7.098624]],[[-9.099543,-6.927560,-2.937935,-7.422862,-4.303977,-2.123830,-0.297918],[7.940861,-8.420309,3.012451,4.036263,-9.507174,-0.292523,-2.036665],[-6.972874,4.640910,9.321530,-0.035037,2.959124,8.110910,7.498692],[-0.201845,-6.136562,-3.789284,-4.784414,-5.478116,-3.036061,-4.739008],[0.898240,-6.338348,-2.984458,4.713511,3.772264,5.483020,-8.384841],[-6.631622,8.097339,6.193462,3.455480,-8.477416,0.239948,9.617403],[-7.592671,3.223948,0.748227,8.808258,5.745311,2.467314,-5.729153],[8.917876,4.003195,2.262675,0.656563,-7.735832,-4.440070,-2.293217],[-9.806938,2.346065,-6.688751,-6.115444,2.607505,9.737704,-4.673174]],[[2.574308,9.812419,-3.171724,7.853866,8.022406,-1.899783,8.733641],[3.614663,1.138100,5.111150,-9.703130,0.751760,6.747071,-5.129223],[2.701800,-3.778533,-8.743479,-6.210933,-0.391739,-9.973566,-5.962336],[-9.256284,9.808556,7.149227,0.786304,1.019345,-7.389545,-3.373911],[9.495507,-1.318059,-5.827768,-4.615438,1.243528,7.144818,-1.725281],[6.531052,-6.475360,-9.949731,5.802826,-4.502486,-4.835625,-2.626590],[-8.451698,8.288573,-6.885224,1.415478,-4.971919,8.566788,-1.939764],[4.585056,-9.845622,3.607252,-4.069306,-3.967172,4.797755,-8.056601],[-6.615522,6.743483,-4.014630,3.997648,-9.026728,2.919018,-8.206292]],[[-8.906982,5.110904,8.594937,8.417301,-2.670086,-1.983635,7.546734],[-8.423749,9.409946,2.990667,4.492283,8.485822,-1.027806,0.680106],[-8.241067,-7.825099,-9.790687,3.873190,0.848028,-0.231746,-8.855228],[-6.426901,4.437061,-3.664033,3.489833,1.806539,6.534761,4.308444],[-8.539446,5.154403,-2.738420,-2.725658,9.698312,-9.363778,-1.637326],[-2.768808,5.382574,-6.862514,9.269922,-6.429888,-4.355214,-1.164042],[-2.529642,7.333992,-3.684777,-0.315377,-2.328912,-3.116229,-4.850543],[-2.524003,4.564700,0.419275,2.166973,9.079126,-8.208173,-5.807577],[1.524711,-3.483649,-5.571243,9.590301,-0.454345,-0.885462,-8.956026]],[[-3.043560,3.562979,3.137556,-5.618340,-4.182793,-0.502056,-3.313731],[6.381346,-5.434034,1.607588,-8.275963,-3.970607,8.414704,7.410185],[-3.800657,-2.519417,-8.658481,1.765806,-5.982246,1.013652,-9.637754],[0.127501,-3.075028,1.183968,2.734340,-3.911268,-7.615067,5.633771],[6.263941,7.237560,-9.935937,8.514142,-6.709535,-1.983922,-2.759504],[1.956996,-7.458048,1.045974,9.708752,5.797079,-5.360725,-7.879984],[-2.297578,-3.316168,3.936115,5.996209,1.725398,-4.784031,-4.369636],[-9.908408,-4.451339,9.127151,-4.084259,-3.166135,5.425555,4.380609],[6.148483,-9.882998,5.000258,7.329846,0.882660,3.901776,0.374440]],[[-5.921724,-1.289021,-6.195736,-9.413154,2.179328,5.238021,-0.251273],[6.966729,-0.690863,3.762202,2.105921,6.858602,7.607965,7.979381],[0.133860,3.089512,-3.586194,-4.662906,-5.638779,-7.517325,-0.818623],[0.196606,-4.743182,-4.479715,0.192892,-2.659982,-1.301617,-3.285246],[-3.580420,-2.728291,-3.577579,6.280383,-1.293945,-7.427783,-0.597331],[-1.830977,-4.387126,6.507844,9.314730,1.215045,4.662607,3.471440],[5.557124,-0.134750,5.297596,4.870661,-0.231334,7.013844,-3.071488],[1.896272,-8.787782,1.417325,-6.371811,-5.272003,-2.477340,-5.565934],[7.179396,-0.675397,0.216879,-9.549185,8.811903,9.835058,-2.178271]],[[-7.053274,-0.933822,6.250680,-9.562754,9.235053,9.492708,-0.653685],[4.005331,2.847644,-1.893692,3.168458,-7.361429,-2.198924,9.241854],[9.799329,-9.545533,-4.123279,-0.163054,-7.487690,7.858734,6.151044],[1.734219,-6.808754,-1.158146,1.955911,8.533565,5.384755,-5.984713],[-9.540657,9.940109,7.449858,3.140663,-0.463664,9.705824,-6.970855],[-1.318502,4.760608,6.750960,-5.693698,6.492065,-5.767570,-2.486997],[1.135392,-4.180998,-4.331227,3.709119,5.222205,5.838234,-0.918754],[-9.606768,6.888116,-5.376402,-6.317856,8.350972,-0.294393,-5.642005],[0.362357,-3.734155,9.226551,-8.880129,-4.475631,3.130263,9.295819]],[[9.379825,2.064501,-7.298287,-3.668431,9.639160,4.317577,6.453473],[-4.993025,-5.488025,-7.388096,-2.529526,4.752578,2.476854,-5.378769],[-2.039060,4.900639,-0.128526,5.049395,-3.744147,2.284960,9.571866],[-3.604196,-2.349250,-2.623043,-1.666766,0.882289,0.278574,-2.701840],[-7.491059,8.552587,-7.662149,-8.127570,-3.707295,0.001218,9.174653],[-7.011132,0.624850,4.730068,6.752944,6.953763,-4.180518,-3.274136],[9.403580,-4.608601,-6.558486,-0.351659,3.958194,1.395123,4.930190],[-6.380669,8.229292,6.707270,4.446239,6.519547,-2.064416,-5.518122],[0.693829,-6.795473,2.741075,8.769795,7.183602,-6.418073,-1.628226]],[[-1.969929,9.456174,1.040257,8.330127,8.856566,7.661039,-5.245313],[2.114331,2.785168,9.109858,-3.106415,-7.508927,-9.101680,2.144704],[-0.514970,-7.304254,0.967161,3.520345,3.817948,5.238289,0.449051],[5.768616,6.643276,4.897359,3.716270,-3.307973,3.748708,0.536384],[-6.676977,2.505028,1.924638,1.206104,8.924639,7.481547,-3.357486],[6.770777,9.234916,7.570224,-3.018090,0.418471,3.676657,1.398081],[0.841501,5.921703,5.563657,-4.411366,-5.302098,-0.950710,8.774912],[-7.703602,-2.196857,9.382423,-6.666937,-5.047261,2.076680,9.459612],[-4.100572,-7.855962,6.771360,1.747265,-1.629280,5.427505,-2.280717]]], dtype = "float64")#candidate|200|(14, 9, 7)|const|float64
bop_201 = relay.bitwise_and(uop_193.astype('uint32'), relay.reshape(const_200.astype('uint32'), relay.shape_of(uop_193))) # shape=(14, 9, 7)
var_204 = relay.var("var_204", dtype = "int64", shape = (14, 9, 7))#candidate|204|(14, 9, 7)|var|int64
bop_205 = relay.subtract(bop_195.astype('int64'), relay.reshape(var_204.astype('int64'), relay.shape_of(bop_195))) # shape=(14, 9, 7)
func_74_call = mod.get_global_var('func_74')
func_80_call = mutated_mod.get_global_var('func_80')
const_209 = relay.const([[3,-4],[-8,-10],[-7,-1],[2,7],[-2,-5],[-1,-6],[2,2]], dtype = "int8")#candidate|209|(7, 2)|const|int8
call_208 = relay.TupleGetItem(func_74_call(relay.reshape(const_209.astype('int8'), [14,]), relay.reshape(const_209.astype('bool'), [14,]), relay.reshape(const_209.astype('float32'), [14,]), relay.reshape(const_209.astype('uint16'), [14,]), ), 11)
call_210 = relay.TupleGetItem(func_80_call(relay.reshape(const_209.astype('int8'), [14,]), relay.reshape(const_209.astype('bool'), [14,]), relay.reshape(const_209.astype('float32'), [14,]), relay.reshape(const_209.astype('uint16'), [14,]), ), 11)
bop_211 = relay.bitwise_xor(uop_198.astype('int64'), relay.reshape(bop_172.astype('int64'), relay.shape_of(uop_198))) # shape=(14, 9, 7)
bop_214 = relay.bitwise_xor(bop_211.astype('int64'), relay.reshape(uop_158.astype('int64'), relay.shape_of(bop_211))) # shape=(14, 9, 7)
uop_217 = relay.sigmoid(bop_205.astype('float64')) # shape=(14, 9, 7)
bop_219 = relay.left_shift(bop_175.astype('int16'), relay.reshape(uop_191.astype('int16'), relay.shape_of(bop_175))) # shape=(14, 9, 7)
bop_222 = relay.bitwise_xor(bop_195.astype('int32'), relay.reshape(bop_138.astype('int32'), relay.shape_of(bop_195))) # shape=(14, 9, 7)
const_225 = relay.const([[[-5,-4,2,-4,-2,-7,-8],[8,-1,4,-5,-10,6,8],[-6,-1,2,7,-3,-10,-2],[5,-9,7,-2,-6,2,2],[2,4,-9,-1,10,4,7],[-6,10,8,-4,3,-7,-3],[-5,-5,-4,-6,-3,3,-3],[7,-10,-8,4,-4,-2,-6],[-6,-8,-3,9,-3,2,2]],[[-9,4,-6,9,-7,-3,-3],[7,-3,-8,5,5,1,-9],[-4,-2,-9,-1,3,2,-4],[2,-7,7,-4,-3,6,-3],[6,4,4,-6,-2,-1,-6],[-4,5,8,-5,-3,9,7],[6,4,1,-5,-2,9,6],[9,-10,-6,9,8,8,2],[-9,-3,-7,8,-3,-3,4]],[[10,-4,5,10,-1,-5,2],[2,1,2,-8,-10,-7,1],[-9,5,-4,8,5,1,8],[4,-7,5,8,3,6,-4],[8,6,10,-9,-2,-4,-5],[-10,-8,3,1,-7,-5,4],[-4,8,-2,9,8,6,5],[5,-6,-2,-9,4,-3,8],[-1,-1,9,-7,4,4,-4]],[[-1,4,-8,1,5,-7,2],[9,-9,-2,-5,10,5,8],[7,2,2,6,-6,-9,8],[9,-7,-2,7,7,-9,4],[2,-5,-5,-8,5,-4,-2],[-2,-3,2,7,6,-2,-8],[3,-4,5,5,6,-4,9],[10,4,-4,2,7,-4,5],[-10,-6,6,-8,-9,10,8]],[[6,3,9,-9,6,-10,1],[8,7,-1,-8,3,10,9],[-7,4,-4,-9,-6,-7,10],[-7,-9,-10,-2,-1,10,8],[-6,-9,-4,4,10,5,4],[10,9,-6,2,-7,7,-9],[-2,6,-4,10,-8,9,10],[5,6,-7,-5,-3,8,-5],[10,3,-9,-1,-4,4,-7]],[[-1,7,-8,-3,5,-9,7],[10,2,6,-5,4,1,-9],[1,7,3,-8,-6,8,-1],[2,6,-1,-6,-4,5,9],[8,-10,5,1,-1,1,-1],[1,-7,1,-6,2,1,-5],[5,-10,-5,4,-8,-8,-3],[8,-9,6,-3,7,-1,-1],[6,9,-1,6,1,-6,4]],[[-10,4,-3,-9,8,7,-1],[-6,-1,10,4,8,9,-10],[10,8,3,10,-6,-4,-10],[10,9,6,6,7,9,-2],[7,-1,5,7,-3,3,-7],[-4,8,-10,7,5,2,-7],[-9,7,-8,5,2,-1,-10],[-6,1,-5,1,-6,-1,-6],[-2,4,-10,9,1,-3,-7]],[[-8,9,3,-2,-9,-4,-5],[-5,-8,2,10,2,1,-5],[-4,9,9,-8,7,1,-4],[2,-1,-10,4,10,-5,-7],[-4,9,5,4,7,8,-1],[-2,5,-6,-1,-5,8,10],[8,10,-2,-1,-6,-2,-6],[-8,9,-4,4,-3,6,-1],[-5,-10,8,4,6,8,-2]],[[-6,1,7,-4,6,-1,-4],[-9,3,-5,9,-2,5,10],[-3,-4,-3,5,-6,-3,8],[5,4,6,-10,-2,-4,1],[2,3,-6,-4,-3,-10,-7],[-5,-8,-6,4,10,1,-4],[6,-6,-9,-2,7,5,-5],[1,10,9,-6,-2,7,8],[-4,4,-8,-8,9,-1,10]],[[-6,-10,8,-3,-8,2,-3],[2,6,4,7,2,8,-9],[-8,4,3,3,4,8,6],[3,-6,1,-2,6,6,9],[9,-2,5,3,9,-9,1],[-4,7,8,-2,-9,-1,-8],[-3,2,4,-9,9,-9,7],[1,7,-4,-3,-2,-1,-3],[-6,-1,9,8,-7,-4,-10]],[[-3,3,4,-1,6,1,1],[9,-6,5,1,-1,7,8],[2,-6,-5,-1,1,-9,8],[-5,2,2,-8,-5,3,9],[-2,1,7,1,6,-2,5],[-4,-1,-1,6,3,2,-2],[-4,5,10,-3,3,2,7],[-6,7,-7,-2,3,4,1],[-4,9,6,7,9,-4,6]],[[-4,1,-7,-2,9,5,-2],[-8,2,-6,3,6,7,-9],[-10,8,-8,-5,-9,1,3],[-2,4,-7,-3,9,4,-5],[3,-1,-1,-8,-2,-5,-2],[-1,-4,-9,2,-5,9,-10],[-1,4,-10,-10,8,9,-1],[-10,-1,-7,1,-3,1,7],[-4,-3,-3,3,-3,-6,1]],[[10,-2,-4,-9,-7,-6,-5],[-8,9,3,-9,10,-4,4],[-6,7,-6,4,9,-2,8],[-7,-7,7,-9,9,-9,-1],[-3,-2,2,5,-6,8,6],[4,-10,-9,7,2,-6,-5],[1,7,3,-3,7,-2,10],[-8,4,10,-2,10,5,-5],[-4,-8,-10,-8,-4,-9,2]],[[-4,3,-1,-6,10,10,-7],[-3,-9,-5,-3,4,8,-4],[-1,-8,1,8,8,-10,2],[-8,8,1,8,4,3,-3],[-6,-9,5,1,-1,-5,3],[-7,7,1,-7,-3,-10,-6],[-5,-3,-8,-5,10,-7,4],[-9,-9,-1,-2,-4,-7,-5],[3,10,-4,8,-5,-5,8]]], dtype = "uint32")#candidate|225|(14, 9, 7)|const|uint32
bop_226 = relay.greater_equal(bop_201.astype('bool'), relay.reshape(const_225.astype('bool'), relay.shape_of(bop_201))) # shape=(14, 9, 7)
uop_229 = relay.asin(uop_193.astype('float64')) # shape=(14, 9, 7)
var_231 = relay.var("var_231", dtype = "float64", shape = (14, 9, 7))#candidate|231|(14, 9, 7)|var|float64
bop_232 = relay.greater(uop_229.astype('bool'), relay.reshape(var_231.astype('bool'), relay.shape_of(uop_229))) # shape=(14, 9, 7)
var_235 = relay.var("var_235", dtype = "float64", shape = (14, 9, 7))#candidate|235|(14, 9, 7)|var|float64
bop_236 = relay.bitwise_and(uop_147.astype('int64'), relay.reshape(var_235.astype('int64'), relay.shape_of(uop_147))) # shape=(14, 9, 7)
var_239 = relay.var("var_239", dtype = "int64", shape = (14, 9, 7))#candidate|239|(14, 9, 7)|var|int64
bop_240 = relay.greater_equal(bop_205.astype('bool'), relay.reshape(var_239.astype('bool'), relay.shape_of(bop_205))) # shape=(14, 9, 7)
const_243 = relay.const([[[-2,10,2,7,-5,1,-4],[-6,6,-5,-5,7,4,1],[-10,8,9,9,9,9,-8],[1,-5,-2,10,-6,-6,7],[4,1,-8,7,6,-1,1],[-10,-2,-4,-10,8,6,5],[8,3,1,8,-3,-9,1],[6,9,5,-9,-8,5,-8],[-1,-2,-6,3,-9,9,5]],[[4,7,10,-8,-9,1,-3],[-3,-7,6,5,2,-1,10],[6,-7,1,-10,2,-5,-4],[-8,5,10,8,-9,7,-3],[-4,-8,8,1,-1,-10,9],[-4,4,-10,3,-8,5,6],[-1,-2,-1,5,8,-9,-7],[4,6,8,9,-8,-7,3],[-6,-6,7,-1,-10,6,-2]],[[-9,-5,4,-10,-3,8,1],[-10,1,-3,-10,-7,-9,-7],[5,1,8,-4,9,-5,-2],[4,10,10,-9,-10,-5,9],[-2,-8,-8,10,7,10,-7],[-8,8,4,7,1,9,4],[6,10,2,6,9,7,1],[1,10,9,-1,-8,-1,2],[-8,-5,-2,6,-3,7,10]],[[7,1,1,5,-1,-5,5],[-6,5,5,-10,-3,4,-1],[-7,5,4,1,-9,-5,5],[9,-5,8,1,-10,-4,-9],[8,-9,5,-10,-2,-4,9],[1,-9,-5,9,4,9,-3],[4,3,-4,-8,6,9,9],[9,1,2,-4,4,-10,-3],[10,-4,-8,8,-9,2,-6]],[[-5,4,-3,-6,5,-1,3],[-7,2,2,4,5,3,-2],[-1,-8,3,10,7,4,8],[-2,9,-9,9,-9,1,-8],[-7,-1,-9,5,-1,2,3],[-1,-1,1,-6,-1,2,-9],[5,7,-8,-2,-7,8,2],[-7,4,-5,5,-5,8,8],[-9,1,4,7,6,10,-10]],[[3,-8,8,-10,-9,9,-6],[1,7,10,-5,5,8,-3],[7,7,-7,10,-1,6,-5],[-5,4,-2,-7,8,-9,-3],[-8,-5,2,-5,-9,2,-7],[-1,7,-3,1,3,-10,-9],[6,5,-8,1,4,-9,-2],[2,-1,-4,-8,-9,-4,8],[-3,-2,9,-5,8,7,1]],[[-5,-6,6,10,4,-7,-9],[-5,-5,-6,-7,2,1,7],[10,-3,5,-1,-7,-1,3],[3,-8,-10,7,8,10,6],[-10,1,-3,6,-6,-8,-10],[-5,6,-6,6,-7,-4,7],[-3,-7,-5,4,5,-7,6],[5,6,-10,7,9,4,6],[-9,3,-3,-6,9,8,9]],[[-4,-5,-3,-8,-5,1,-6],[-10,-4,-5,-2,5,9,-7],[7,-4,-10,-1,-2,-8,-4],[1,-7,-4,9,-7,-8,-8],[-8,3,10,10,8,7,-2],[9,7,10,2,-4,-3,-1],[-3,7,-3,-9,-10,6,-2],[-10,-9,2,10,7,-4,-2],[-2,-10,-3,8,-9,-2,8]],[[1,-1,4,-1,-6,-6,2],[4,1,-10,-2,-9,-10,7],[-9,1,5,-2,-4,5,3],[-2,3,2,3,4,4,6],[-2,-9,-10,-1,-2,5,-4],[-5,2,-4,7,-9,-8,8],[4,10,-10,7,7,6,10],[7,-4,3,-4,-10,-4,3],[-2,6,6,-4,-2,6,-10]],[[1,6,6,-4,7,-7,-9],[8,3,-3,-7,-4,5,3],[-7,6,3,-8,3,7,10],[-6,4,-2,-3,-7,-6,-3],[-9,2,9,4,1,10,-3],[-3,8,-3,5,-3,-2,3],[5,9,-2,8,9,5,5],[6,-10,-1,10,5,3,8],[-10,3,6,-7,-5,2,-10]],[[-5,-2,-3,10,3,1,-9],[-5,10,-5,1,7,10,7],[-5,10,-2,-9,-5,8,-2],[7,1,-8,7,6,-5,-8],[-2,-10,3,-6,-4,-7,-7],[8,-6,-1,-7,10,2,-2],[8,3,-8,-8,3,-4,-1],[6,10,9,9,4,9,-9],[-9,-10,-2,6,6,-1,-8]],[[-5,-7,-8,7,2,-9,1],[2,9,-1,-8,-1,-5,10],[5,-10,-10,-3,4,8,-3],[4,-3,4,-10,2,-7,4],[-10,-7,-4,-5,-2,5,-6],[3,7,5,-6,5,-3,-3],[10,2,4,2,6,2,-6],[5,-9,-3,-8,6,9,-9],[8,3,-1,-5,6,-3,-7]],[[-2,2,-4,8,7,8,-1],[7,-9,3,-3,9,-7,7],[7,7,-6,-9,-1,-10,4],[-4,-4,6,-5,7,3,-8],[-1,2,-9,-9,7,-7,-4],[7,-4,-2,1,4,-7,6],[7,10,-8,-7,-1,-6,-6],[-9,10,8,-6,-4,8,-2],[1,5,-1,7,9,-8,4]],[[-1,7,-3,-5,-10,-1,5],[-6,-4,-5,4,-6,-5,9],[-5,9,3,3,10,-7,8],[-7,-9,10,-10,4,10,9],[3,1,8,4,-6,7,7],[-8,-4,-8,10,8,-4,5],[2,-3,9,5,-6,3,7],[7,6,9,-2,2,-6,1],[-3,-7,-8,2,-6,9,7]]], dtype = "int64")#candidate|243|(14, 9, 7)|const|int64
bop_244 = relay.bitwise_and(bop_195.astype('int64'), relay.reshape(const_243.astype('int64'), relay.shape_of(bop_195))) # shape=(14, 9, 7)
uop_247 = relay.log(bop_214.astype('float64')) # shape=(14, 9, 7)
uop_249 = relay.cosh(uop_247.astype('float32')) # shape=(14, 9, 7)
uop_251 = relay.atanh(bop_240.astype('float32')) # shape=(14, 9, 7)
output = relay.Tuple([bop_141,bop_144,uop_149,bop_155,bop_161,uop_168,uop_178,uop_182,bop_188,call_208,const_209,uop_217,bop_219,bop_222,bop_226,bop_232,bop_236,bop_244,uop_249,uop_251,])
output2 = relay.Tuple([bop_141,bop_144,uop_149,bop_155,bop_161,uop_168,uop_178,uop_182,bop_188,call_210,const_209,uop_217,bop_219,bop_222,bop_226,bop_232,bop_236,bop_244,uop_249,uop_251,])
func_253 = relay.Function([var_134,var_137,var_164,var_204,var_231,var_235,var_239,], output)
mod['func_253'] = func_253
mod = relay.transform.InferType()(mod)
mutated_mod['func_253'] = func_253
mutated_mod = relay.transform.InferType()(mutated_mod)
func_253_call = mutated_mod.get_global_var('func_253')
var_255 = relay.var("var_255", dtype = "float64", shape = (14, 9, 7))#candidate|255|(14, 9, 7)|var|float64
var_256 = relay.var("var_256", dtype = "float64", shape = (14, 9, 7))#candidate|256|(14, 9, 7)|var|float64
var_257 = relay.var("var_257", dtype = "float32", shape = (14, 9, 7))#candidate|257|(14, 9, 7)|var|float32
var_258 = relay.var("var_258", dtype = "int64", shape = (14, 9, 7))#candidate|258|(14, 9, 7)|var|int64
var_259 = relay.var("var_259", dtype = "float64", shape = (14, 9, 7))#candidate|259|(14, 9, 7)|var|float64
var_260 = relay.var("var_260", dtype = "float64", shape = (14, 9, 7))#candidate|260|(14, 9, 7)|var|float64
var_261 = relay.var("var_261", dtype = "int64", shape = (14, 9, 7))#candidate|261|(14, 9, 7)|var|int64
call_254 = func_253_call(var_255,var_256,var_257,var_258,var_259,var_260,var_261,)
output = call_254
func_262 = relay.Function([var_255,var_256,var_257,var_258,var_259,var_260,var_261,], output)
mutated_mod['func_262'] = func_262
mutated_mod = relay.transform.InferType()(mutated_mod)
var_264 = relay.var("var_264", dtype = "float32", shape = (7, 13, 9))#candidate|264|(7, 13, 9)|var|float32
uop_265 = relay.asin(var_264.astype('float32')) # shape=(7, 13, 9)
uop_267 = relay.exp(uop_265.astype('float64')) # shape=(7, 13, 9)
const_269 = relay.const([[[-4.855114,4.763582,-0.328153,-9.249055,1.916356,6.950331,3.466731,-4.838186,4.864193],[6.811013,5.622687,2.979402,9.878437,-3.994101,6.590884,7.301631,8.614986,7.134431],[3.285703,9.577827,6.601776,5.808000,0.281479,-2.888440,2.366302,-5.504210,-3.600405],[-0.464783,-1.395860,0.614482,-6.754389,0.966133,2.102334,7.111925,1.308584,3.701480],[-1.244460,5.081438,-3.578572,-4.979209,3.132694,-2.911608,9.474686,-7.167865,-5.230997],[2.401242,-7.086360,-5.050678,4.364666,6.851226,-5.756900,8.859260,7.224097,-7.753480],[7.609322,-7.305779,-1.890646,-7.375599,5.165103,6.035630,4.693500,-2.899098,-3.604234],[2.152326,-5.224017,-3.635250,-6.970249,9.083133,-3.877947,1.821259,7.594755,1.542453],[0.305144,8.215672,-5.944679,-5.125177,2.329272,7.862573,0.888333,8.784482,8.169621],[-6.408786,-6.518357,-3.735606,4.618967,-5.067593,3.417922,-5.890616,3.779849,3.308683],[6.177439,2.311778,-4.233091,-1.255683,-2.924243,9.992646,3.760975,6.705481,-8.254984],[-7.305782,5.586548,-4.665799,-7.736635,8.689498,-9.975996,7.112951,-4.644081,-6.799032],[-8.658433,-3.435013,-9.673985,-1.975095,1.077039,4.700897,2.070549,-8.203980,-7.092996]],[[7.070620,8.446583,1.259869,0.452630,3.618619,6.095775,-3.907528,-9.300075,-3.874626],[9.500113,-3.581875,-7.657835,-9.730630,-5.880575,4.311946,2.663544,8.173039,2.733245],[-1.334383,-3.555147,2.232421,7.693587,9.001904,-2.347239,-5.810225,-4.605627,8.714575],[1.719671,0.792706,-1.055404,-5.008411,0.086232,-3.854761,-2.410238,-2.656394,4.532105],[0.960792,5.180381,-2.778850,-6.523878,2.653467,-4.654819,-1.468946,-2.030374,5.514259],[-3.086155,-4.675842,7.204715,-7.180187,8.774622,-2.317589,-3.169870,8.669380,-6.162318],[-6.283257,0.133462,-0.456651,-9.796811,2.414042,-6.285229,0.511641,-3.379517,-2.654984],[-0.119367,-8.627060,2.914678,-0.779333,-0.236811,-2.800639,-4.741823,4.432599,-1.498583],[5.062466,-8.848360,-9.784084,9.184836,1.857623,8.771599,7.614426,2.506830,-0.037267],[1.104401,-6.893716,-8.358575,-2.097371,9.703486,-8.474775,9.979243,-3.268748,-6.788866],[-5.654502,-5.080231,-5.320470,-2.642607,-6.360640,7.408749,-5.727929,5.380332,-2.738184],[4.265415,-6.339915,-2.871003,5.321080,-0.168666,-9.445563,-5.998974,-9.894349,-3.665023],[-9.183507,4.031178,-5.955630,4.435235,5.601989,-3.450162,5.321119,-5.324993,-2.638469]],[[-9.304682,7.230338,-3.006889,-8.305610,-8.614426,9.529246,0.486648,7.027593,-6.479712],[3.073486,3.382903,9.982260,-7.524438,4.298889,-7.516589,9.357882,5.669807,-3.785567],[-5.268686,-5.926090,9.361317,-2.897133,-4.713444,0.728715,5.941462,-7.227916,5.001614],[-7.424927,-2.207210,1.277720,-4.671624,-2.292531,0.565401,8.666096,7.131082,-8.117380],[1.009727,6.713079,2.570591,4.833588,9.135128,7.050380,1.862322,-8.775154,3.432919],[-3.707273,-0.336901,-3.556880,2.484615,-4.491508,6.318300,-6.442104,6.128318,-9.606262],[-3.500908,9.230728,-2.606954,8.797609,4.557214,5.469553,7.483949,-9.984517,-0.783734],[9.324910,-0.733589,-0.126044,-5.649383,-1.312174,-2.758229,-9.833521,-0.393033,-8.593306],[-3.253402,-4.347300,6.198550,5.213214,-0.833844,5.855562,-9.372085,-3.350903,-6.031973],[-8.815117,4.836583,-6.364378,-8.988574,1.178839,-9.342818,2.496081,9.332454,-2.574693],[0.086463,9.443526,7.447205,1.991064,4.422784,-1.083614,-3.527699,-9.798581,-2.073997],[-9.502629,-3.964507,6.467833,4.255818,1.563817,5.376061,-8.183489,9.564436,-3.027749],[-1.089834,-8.053049,6.942790,8.537425,-5.569649,-7.295698,-5.105635,8.579719,-7.848386]],[[5.445590,2.485198,-2.756594,6.779938,6.663636,-1.980864,0.439304,0.479820,-3.012416],[9.031228,8.930659,9.755797,-6.244033,-6.630962,-6.956540,-0.235543,-1.418278,3.974180],[-4.843422,0.154940,5.541147,9.392474,-9.550927,2.630786,-7.190938,-4.986659,-7.874680],[4.263952,8.965814,-0.517356,-7.540438,-9.081232,-2.366632,6.538642,-3.935525,-6.610558],[-1.734683,-6.014982,3.075483,8.465953,-9.695321,6.777558,9.625165,2.464586,-6.783190],[8.572637,1.658910,3.083053,3.081989,-0.878327,-0.199056,0.178891,2.305293,3.913031],[1.519488,-4.667813,8.363381,-4.464175,-9.157163,3.620353,0.155934,8.987923,-4.175189],[-7.446960,2.263988,5.527309,-2.920136,-7.178028,6.392182,-9.084537,-3.567796,-1.936845],[-9.792985,-1.505515,4.042197,0.962901,-7.508262,5.958823,0.919620,-2.460196,-8.357652],[-5.024670,1.464198,-0.701610,1.679896,0.868904,4.623712,2.504160,7.687284,-6.662596],[9.228017,3.285670,-8.446452,5.154433,7.335420,-1.473316,5.301485,-2.088243,8.248620],[3.044886,7.594454,-2.900007,3.185377,-2.870745,-1.515703,1.560828,-3.021898,6.106792],[7.057143,-0.949147,5.673638,-8.832882,-5.982523,5.840766,-3.436285,-9.733390,3.911400]],[[-3.285698,-4.227072,3.784389,-2.653595,-4.226427,-6.800803,7.653529,-0.330218,-8.810037],[1.030556,8.424216,4.694225,1.036464,2.648280,1.507194,2.661582,1.397929,-0.533792],[-5.407080,7.424961,9.396086,-6.444662,8.629458,-7.013127,-4.341231,6.895068,0.036582],[-8.697421,-0.720644,-4.446351,2.590301,6.896770,5.902537,5.407852,-6.213520,1.579159],[-2.088423,6.023525,-5.881572,1.630910,1.257933,-9.970062,8.965514,8.391643,9.554686],[4.742316,3.920789,7.734849,-1.488059,-0.168429,-3.996495,-9.086756,-9.330227,-7.755972],[-8.086171,0.537764,-7.414145,-4.619421,0.463254,9.065395,-6.198770,6.980953,-0.221073],[-9.254539,9.353724,8.719515,-0.190544,7.546703,1.284774,-5.503813,3.889449,6.722877],[1.976626,-7.849663,-1.266201,2.516116,-6.615550,-3.754182,-1.146451,-8.961829,-0.360003],[8.864398,8.397317,0.172037,-2.987934,-2.967868,8.803887,-5.664343,-8.443943,7.408073],[-4.500193,3.931269,4.079712,6.037201,-8.926248,-8.711115,-2.404582,-8.168027,-8.492671],[-4.412198,6.092375,-5.255731,6.560064,9.950394,2.084053,-2.254718,-8.333815,6.648156],[5.626190,3.641813,-9.741665,-1.925879,3.901238,-6.829994,-5.850489,-1.384835,-7.683089]],[[7.278431,7.315343,8.530390,9.796004,0.584808,5.397942,-7.575361,2.662079,-1.222361],[9.455075,-8.003938,1.423900,-5.121751,-5.851110,9.763393,4.300957,-4.824499,-6.863428],[-2.176164,1.931925,1.229061,-5.675846,4.273308,9.189908,6.405192,1.544363,0.836557],[-4.265632,-7.227226,-1.906336,7.423078,-6.585862,7.375645,6.452024,5.084573,6.116789],[8.310676,-4.101960,8.999066,8.058055,-4.317616,5.063481,1.726677,6.542260,-6.450871],[-6.999150,0.327971,9.025270,7.861131,-4.957897,2.815268,6.897071,9.231534,4.277325],[4.961106,7.417365,8.394462,7.941791,9.234467,1.217075,-6.660306,2.817361,-8.949900],[-4.177851,-7.681836,-4.191320,-9.994415,-2.669672,4.241430,9.296361,-4.608025,-5.361002],[2.705843,7.722917,-5.004283,-5.026606,-7.610127,2.848741,-6.973745,-4.884156,-0.370590],[-0.581783,-2.293021,1.171376,-0.976291,-9.565766,2.361089,5.484612,-7.723769,6.453288],[9.355386,8.610153,-1.621194,-2.611954,8.763112,5.269257,-2.610452,-7.706199,-7.503590],[-9.390155,-1.312016,-3.373095,-7.291754,-8.244343,-5.982673,5.955459,6.413765,5.384375],[3.504267,-2.146087,-5.709712,9.003739,2.189449,6.028724,3.947645,0.681470,-8.811770]],[[0.027751,9.185027,9.573924,-0.603974,6.559425,0.155272,1.198070,-8.877546,1.961452],[2.269498,7.529265,7.322974,-2.152326,3.682539,-0.028695,8.344458,-4.060790,-9.651260],[-9.219935,-7.655159,-5.998198,-2.196971,2.459910,-0.072275,4.363086,5.409952,-7.679793],[9.919728,4.397328,-6.902548,-5.467259,8.548251,-7.114120,-6.221016,-6.678022,-2.247647],[7.076762,-0.071603,-0.979123,4.141702,-5.802822,-5.569235,2.930179,-7.064503,-6.437244],[1.148927,-8.704550,9.271273,-0.307185,-8.948689,3.749507,0.366802,5.903496,6.413356],[-6.570290,-7.579863,1.781739,-3.015990,-2.377204,4.590807,1.827462,-4.025069,9.843927],[2.976165,6.877250,4.968518,-3.686392,0.478023,-1.363770,0.707718,-8.447234,-8.820959],[0.688321,-3.605407,8.757471,-7.159916,-5.746724,-3.659397,4.247959,9.011723,3.780103],[5.331315,-7.477680,-8.196609,9.391907,0.310065,8.043993,5.581289,-5.675960,-9.899279],[1.413194,5.958614,0.508925,7.751391,5.134299,-6.191526,3.137872,-2.167300,-6.717724],[5.890396,6.349593,6.615408,-0.126141,8.285493,7.149408,-9.723258,-0.654776,-1.676505],[1.974119,-6.068255,7.328030,-3.537568,-1.860545,-8.233329,6.008172,-2.296207,-6.658374]]], dtype = "float64")#candidate|269|(7, 13, 9)|const|float64
bop_270 = relay.less_equal(uop_267.astype('bool'), relay.reshape(const_269.astype('bool'), relay.shape_of(uop_267))) # shape=(7, 13, 9)
uop_273 = relay.sinh(bop_270.astype('float32')) # shape=(7, 13, 9)
uop_275 = relay.log2(uop_273.astype('float64')) # shape=(7, 13, 9)
var_277 = relay.var("var_277", dtype = "float32", shape = (7, 13, 9))#candidate|277|(7, 13, 9)|var|float32
bop_278 = relay.bitwise_or(uop_273.astype('int64'), relay.reshape(var_277.astype('int64'), relay.shape_of(uop_273))) # shape=(7, 13, 9)
uop_281 = relay.atanh(uop_275.astype('float64')) # shape=(7, 13, 9)
bop_283 = relay.floor_mod(uop_281.astype('float64'), relay.reshape(uop_273.astype('float64'), relay.shape_of(uop_281))) # shape=(7, 13, 9)
uop_286 = relay.asin(bop_283.astype('float64')) # shape=(7, 13, 9)
uop_288 = relay.atanh(uop_286.astype('float32')) # shape=(7, 13, 9)
var_290 = relay.var("var_290", dtype = "float64", shape = (7, 13, 9))#candidate|290|(7, 13, 9)|var|float64
bop_291 = relay.floor_mod(uop_286.astype('float64'), relay.reshape(var_290.astype('float64'), relay.shape_of(uop_286))) # shape=(7, 13, 9)
uop_294 = relay.log2(uop_288.astype('float32')) # shape=(7, 13, 9)
uop_296 = relay.log(uop_288.astype('float32')) # shape=(7, 13, 9)
bop_298 = relay.less_equal(uop_294.astype('bool'), relay.reshape(bop_291.astype('bool'), relay.shape_of(uop_294))) # shape=(7, 13, 9)
var_301 = relay.var("var_301", dtype = "float64", shape = (7, 13, 9))#candidate|301|(7, 13, 9)|var|float64
bop_302 = relay.logical_xor(bop_283.astype('uint64'), relay.reshape(var_301.astype('uint64'), relay.shape_of(bop_283))) # shape=(7, 13, 9)
const_305 = relay.const([[[7.356021,-5.848430,2.396379,0.981855,6.011671,9.722804,-6.762397,7.171772,-6.502282],[-3.574301,3.994069,-2.829968,-9.482578,4.830272,3.178721,4.866646,-1.263818,-7.423651],[3.776011,3.372225,4.793258,-1.249349,9.273127,-0.856512,-5.771959,7.078461,-0.239439],[-4.279271,-2.887657,-1.243754,-3.385284,-8.727841,3.824413,-1.111033,-4.828730,9.092640],[-6.098628,9.671007,-8.532420,-0.011442,-6.343343,-5.085915,4.640768,-9.324944,-2.008236],[9.708311,-5.156164,0.205562,5.715279,-9.785620,-5.817760,2.802915,0.336013,-1.802700],[-9.620203,-4.771586,-6.704292,7.676207,4.143643,0.808436,-8.665736,-0.114986,-5.031389],[-3.569401,-4.313177,-6.704786,-1.582108,7.093043,-6.119486,3.579412,-3.842642,-2.694269],[-0.267353,-6.287156,3.665996,-4.880326,9.892421,-4.724356,-9.481667,5.540994,5.151293],[8.151830,9.424937,9.869970,-4.850907,-7.517370,6.212243,8.571171,-2.593013,0.204277],[9.450922,1.459647,3.818688,5.762347,-6.426959,-7.057426,-3.219378,7.773850,-7.815365],[1.754128,-2.196085,-5.721285,-5.800208,8.594898,4.931126,-9.234958,-5.374668,9.681646],[3.241101,-8.943939,7.962639,5.165438,-0.967823,7.191611,-0.794705,-5.086101,-0.090461]],[[-0.120647,-2.302656,3.973895,-3.854872,7.625179,1.073490,-4.334891,2.778183,-6.598250],[3.739808,-7.086303,1.156755,8.337650,-4.390953,-5.409705,-2.393563,-6.203916,-2.331438],[-6.107120,5.661969,-7.203547,2.422289,-7.566793,4.491108,8.462538,-2.834149,-1.880351],[-7.178993,0.266985,2.722479,1.829612,-1.707070,2.272465,-5.942652,-2.045524,8.387446],[-6.897539,1.110606,5.133536,-3.604638,-1.549459,-0.788404,-2.721180,-9.838716,4.233101],[6.821434,4.765687,-0.783952,-4.164637,-2.342301,0.064129,7.167009,-3.008557,-0.816002],[9.204952,5.102577,0.916646,2.435792,-4.526525,-3.284354,8.330572,-1.005034,1.199503],[3.696356,8.790848,-6.991376,4.188634,5.694571,9.715641,8.890596,-5.984887,-2.390507],[-8.382823,3.237663,8.458698,3.067644,0.158041,3.293813,-5.564200,-2.198090,-3.034493],[-7.032587,6.105317,-7.611253,0.275103,8.666649,-3.514173,-1.456740,6.860706,1.011269],[0.292856,-9.333875,-7.294622,8.499394,-3.717518,4.597632,1.619684,5.734493,6.139662],[3.160695,4.881300,-9.284975,-1.668409,4.266919,-5.445677,-1.495223,9.172332,-6.158329],[-0.448471,-3.452911,9.447699,3.737472,-7.536180,2.096137,-9.393221,-7.795680,-4.857442]],[[9.397966,6.626143,-1.629766,8.337559,5.128949,3.412029,8.785995,-8.395520,1.178081],[4.883970,-0.278864,0.179941,6.728162,-8.498033,4.905820,-7.531923,4.809291,8.142958],[6.740006,-6.013799,1.391937,-8.106798,2.888306,2.853179,-4.965733,0.368295,-2.052679],[2.607016,1.486923,0.558250,-8.792497,3.972262,-1.781607,9.399046,-6.047550,-6.970976],[-8.342620,-5.361212,2.693906,-1.676249,-5.159322,-5.418100,-5.648686,-9.847782,0.169593],[-5.143697,7.802338,2.183034,5.597455,0.711784,-0.208560,9.626607,-2.444791,-1.274953],[6.168553,7.506183,0.688443,-7.149959,7.210752,4.916583,0.060985,-7.908651,5.786719],[-1.065378,9.672473,-2.684830,1.265278,-4.009055,0.402794,-4.307750,7.349914,-6.444549],[2.325072,-0.227050,1.633392,-8.215136,9.802670,0.616749,-1.154553,8.052591,2.472816],[-7.482713,-6.478405,-0.052977,1.297965,-5.206604,7.258210,2.567166,-7.416963,2.536063],[1.566831,-1.098661,8.611020,-9.759981,0.120126,6.377993,6.791011,1.909930,-2.654466],[-1.117852,-0.237630,-9.809591,5.426580,8.334963,6.969195,-8.936416,-0.666202,2.895795],[-0.864806,6.647858,-8.968796,1.932189,-5.063198,6.449311,-7.515263,5.007997,-6.096581]],[[-4.875844,4.798567,2.576904,4.431813,-6.355214,-9.328327,0.959007,6.003350,-1.360833],[9.750537,8.376686,1.671026,-6.224790,-2.918496,-4.790195,6.822836,2.408172,-9.655109],[3.371367,-8.153617,4.640954,9.609623,6.270620,-1.874372,-2.388961,3.595765,7.410067],[-3.702399,7.175863,2.585091,-8.545535,-4.907718,-3.720911,-0.821628,-3.119054,3.042380],[-0.631620,-0.326380,7.361621,7.824824,-3.036583,1.795709,7.075307,3.157666,9.720401],[6.990267,5.089662,3.774205,-6.484857,9.692373,-6.939340,9.192524,-2.529437,-8.955204],[-0.985495,6.542874,6.831491,-8.399065,9.899039,3.577841,1.978210,-1.665603,-4.666683],[-3.070327,9.531391,-4.594441,-5.070675,-0.301372,9.071323,-5.203984,9.876544,1.423532],[-2.201783,8.793977,4.250876,-4.896395,5.234167,-3.149924,-3.397132,4.843874,-7.879030],[5.343998,7.419213,6.925403,7.267348,-9.604640,-5.271399,6.037631,2.132077,-7.493496],[1.072264,8.993084,7.462487,-6.907116,-4.183382,4.712279,9.512686,2.974858,5.532481],[-4.593237,-1.611766,8.686048,-9.106104,-6.764884,3.674756,-6.172380,3.228955,-7.016362],[3.913659,3.298127,-6.953864,0.051394,6.853324,-1.824957,9.483908,4.155481,8.357441]],[[-8.018986,0.094211,2.985436,0.008593,5.611460,-9.487738,6.441952,0.325617,2.350170],[-0.870654,8.853663,-2.917606,-7.094336,-5.520369,3.017328,-9.383177,4.072112,-9.161775],[-9.423999,4.614423,9.007488,7.736442,8.620837,8.447380,-5.615800,4.715421,7.552176],[5.076707,-3.152920,-5.508349,8.477261,7.684137,-5.148887,-3.213895,-9.312121,9.506570],[0.628096,-8.751697,6.703511,4.795220,6.618778,5.534564,-4.060941,-4.682025,9.132617],[8.491530,3.937191,8.508912,-5.653314,6.329295,9.133965,-4.116259,9.749358,-0.247839],[-1.738100,3.254953,-8.193047,2.381979,2.934955,7.652935,-4.088240,-3.002318,-4.554023],[0.714602,5.621596,4.303834,6.375544,7.318434,-3.782187,5.500847,0.470009,6.142576],[-2.822246,5.414558,-7.124160,-1.525421,2.313233,0.020401,-5.385067,-8.225034,6.522115],[3.602937,-5.438912,6.161321,-8.186912,8.433417,1.748197,7.403212,6.951087,-0.507186],[-4.177763,-1.511906,6.445585,3.618845,5.618560,7.156685,4.093746,1.456563,0.430558],[-2.231719,-8.564641,7.855915,-6.146050,7.049143,1.494516,-2.486436,-2.162056,0.088633],[-4.295763,4.537929,1.345652,-9.186728,2.039961,-2.426148,-7.560235,-7.456621,-9.766377]],[[9.265260,0.109055,3.947351,-0.902704,-7.801557,-7.051818,-6.953380,-5.832494,-1.052214],[-4.302743,-5.520358,6.077956,-4.957975,4.206568,-9.096042,-7.792820,8.984428,-3.527074],[4.554826,-8.679934,7.901526,3.372834,5.634247,8.165811,6.867358,-2.491449,-3.970942],[-4.794425,9.337455,4.897813,-4.064522,7.177670,3.315320,-3.375893,-7.369698,-8.572853],[4.120053,8.579165,1.682589,2.718224,-3.108548,-3.589771,4.034307,2.103358,5.888942],[-9.774912,5.858557,9.439992,0.893853,6.265650,-9.738821,2.941683,1.436395,-7.050685],[6.533753,-0.257011,2.453254,-4.498134,0.448862,2.786538,1.298511,-8.915235,-6.508562],[9.040942,3.241904,1.595562,7.687211,-5.008308,-1.664645,2.042889,-6.665926,3.193394],[9.524534,-2.750352,-1.759520,2.280200,9.428094,-1.025673,6.988874,0.509040,-6.346655],[-5.061152,9.224645,-9.039111,9.524427,9.772014,4.559705,9.642019,8.303378,-4.772193],[8.645044,4.893341,4.395211,-5.203261,5.915100,-3.503260,5.023328,0.571708,3.659816],[-2.983168,-9.933216,-1.973437,-8.774810,-4.948503,9.102764,7.401380,-9.750834,6.917613],[-1.276670,-7.668366,4.803327,2.597072,9.180823,0.021602,1.928677,6.509190,9.176584]],[[8.206237,2.634410,2.678916,-6.265802,3.210011,7.336342,4.111845,2.618453,-0.953277],[-1.300824,6.644747,-3.055630,-8.652288,-2.866367,8.570452,5.715485,0.471302,-7.997833],[9.935470,-8.451746,2.451592,2.652706,8.862867,-0.446075,5.002250,-6.554698,-2.514525],[3.025712,-3.916799,-5.722284,1.951511,-4.189280,-6.017238,-9.021696,-4.991660,3.845236],[-8.120672,-7.205938,7.169231,0.835082,7.055692,3.711922,9.205578,-6.019652,-2.419347],[9.929418,-1.331739,-8.842234,3.543799,-9.019087,2.496912,7.646333,-4.011316,-4.178866],[5.979673,-2.985673,2.353089,-0.030943,-9.669829,-1.503890,-5.071183,-2.655935,3.562572],[6.844553,3.547246,-1.798678,2.735531,8.384914,9.283248,4.565912,8.535530,0.510554],[3.691284,5.664248,-3.602131,-2.111306,-2.443180,8.674702,-1.847538,-6.076500,-9.520928],[-6.471367,-8.577956,4.330731,5.187490,-2.806575,-3.416867,2.935651,-9.667856,5.640023],[-5.345881,6.188490,5.250254,2.737807,0.822659,3.181386,-9.140627,-4.117095,1.690579],[6.630943,-7.282017,-2.003903,1.510762,5.282081,-2.177937,5.680594,-2.494947,7.020095],[3.589720,1.318554,-1.075279,3.837982,5.993948,-0.049187,3.765880,1.673698,9.242907]]], dtype = "float32")#candidate|305|(7, 13, 9)|const|float32
bop_306 = relay.bitwise_and(uop_294.astype('int32'), relay.reshape(const_305.astype('int32'), relay.shape_of(uop_294))) # shape=(7, 13, 9)
uop_309 = relay.asin(uop_294.astype('float32')) # shape=(7, 13, 9)
uop_311 = relay.atan(uop_309.astype('float64')) # shape=(7, 13, 9)
uop_313 = relay.log(uop_286.astype('float32')) # shape=(7, 13, 9)
output = relay.Tuple([bop_278,uop_296,bop_298,bop_302,bop_306,uop_311,uop_313,])
output2 = relay.Tuple([bop_278,uop_296,bop_298,bop_302,bop_306,uop_311,uop_313,])
func_315 = relay.Function([var_264,var_277,var_290,var_301,], output)
mod['func_315'] = func_315
mod = relay.transform.InferType()(mod)
mutated_mod['func_315'] = func_315
mutated_mod = relay.transform.InferType()(mutated_mod)
func_315_call = mutated_mod.get_global_var('func_315')
var_317 = relay.var("var_317", dtype = "float32", shape = (7, 13, 9))#candidate|317|(7, 13, 9)|var|float32
var_318 = relay.var("var_318", dtype = "float32", shape = (7, 13, 9))#candidate|318|(7, 13, 9)|var|float32
var_319 = relay.var("var_319", dtype = "float64", shape = (7, 13, 9))#candidate|319|(7, 13, 9)|var|float64
var_320 = relay.var("var_320", dtype = "float64", shape = (7, 13, 9))#candidate|320|(7, 13, 9)|var|float64
call_316 = func_315_call(var_317,var_318,var_319,var_320,)
output = call_316
func_321 = relay.Function([var_317,var_318,var_319,var_320,], output)
mutated_mod['func_321'] = func_321
mutated_mod = relay.transform.InferType()(mutated_mod)
const_323 = relay.const([[9.340178,-4.279843,8.514902,-1.987062,-5.919090,-0.307568]], dtype = "float64")#candidate|323|(1, 6)|const|float64
uop_324 = relay.cosh(const_323.astype('float64')) # shape=(1, 6)
output = relay.Tuple([uop_324,])
output2 = relay.Tuple([uop_324,])
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()()
res3 = intrp3.evaluate()()
res4 = intrp4.evaluate()()
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()()
res7 = intrp7.evaluate()()
res8 = intrp8.evaluate()()
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()()
res11 = intrp11.evaluate()()
res12 = intrp12.evaluate()()
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()()
res15 = intrp15.evaluate()()
res16 = intrp16.evaluate()()
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()()
res19 = intrp19.evaluate()()
res20 = intrp20.evaluate()()
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()()
res23 = intrp23.evaluate()()
res24 = intrp24.evaluate()()
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''45: TVMFuncCall
44: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
43: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
42: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
41: tvm::IRModule::FromExpr(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&)
40: tvm::IRModule::FromExprInContext(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >)
39: tvm::IRModuleNode::Add(tvm::GlobalVar const&, tvm::BaseFunc const&, bool)
38: tvm::WarnIfMalformed(tvm::IRModule const&, tvm::relay::Function)
37: tvm::relay::FreeTypeVars(tvm::RelayExpr const&, tvm::IRModule const&)
36: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
34: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
32: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
31: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
30: tvm::relay::ExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
29: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
28: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
27: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
26: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
25: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
24: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
23: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
22: _ZNSt17_Function_handlerIFvPKN3tvm5relay7LetNodeEEZNS1_15TypeVarEVis
21: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
20: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
19: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
16: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
15: tvm::relay::ExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
14: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
13: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
12: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
11: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
10: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
9: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
8: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
7: _ZNSt17_Function_handlerIFvPKN3tvm5relay7LetNodeEEZNS1_15TypeVarEVis
6: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
5: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
4: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9RelayEx
1: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::ConstructorNode const*)
0: tvm::IRModuleNode::LookupTypeDef(tvm::GlobalTypeVar const&) const

'''