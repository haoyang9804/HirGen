import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = ())#candidate|0|()|var|float64
uop_1 = relay.exp(var_0.astype('float64')) # shape=()
uop_3 = relay.rsqrt(uop_1.astype('float64')) # shape=()
uop_5 = relay.sinh(uop_3.astype('float32')) # shape=()
bop_7 = relay.mod(uop_3.astype('float64'), var_0.astype('float64')) # shape=()
uop_10 = relay.sigmoid(uop_5.astype('float64')) # shape=()
bop_12 = relay.multiply(uop_10.astype('int16'), var_0.astype('int16')) # shape=()
bop_15 = relay.less(uop_10.astype('bool'), bop_12.astype('bool')) # shape=()
bop_18 = relay.minimum(bop_15.astype('float64'), uop_1.astype('float64')) # shape=()
uop_21 = relay.sqrt(uop_1.astype('float64')) # shape=()
uop_23 = relay.log(uop_5.astype('float32')) # shape=()
const_25 = relay.const(10, dtype = "int16")#candidate|25|()|const|int16
bop_26 = relay.maximum(bop_12.astype('uint8'), const_25.astype('uint8')) # shape=()
const_29 = relay.const([[False,False,True,False,False,False,True],[False,True,False,True,True,True,False],[True,False,True,False,True,False,False],[True,False,False,False,True,True,True],[False,True,True,True,False,False,True],[False,False,False,False,False,False,True],[True,True,False,False,False,True,False],[True,False,True,False,False,True,True]], dtype = "bool")#candidate|29|(8, 7)|const|bool
bop_30 = relay.add(bop_15.astype('uint64'), const_29.astype('uint64')) # shape=(8, 7)
output = relay.Tuple([bop_7,bop_18,uop_21,uop_23,bop_26,bop_30,])
output2 = relay.Tuple([bop_7,bop_18,uop_21,uop_23,bop_26,bop_30,])
func_33 = relay.Function([var_0,], output)
mod['func_33'] = func_33
mod = relay.transform.InferType()(mod)
mutated_mod['func_33'] = func_33
mutated_mod = relay.transform.InferType()(mutated_mod)
var_34 = relay.var("var_34", dtype = "float64", shape = ())#candidate|34|()|var|float64
func_33_call = mutated_mod.get_global_var('func_33')
call_35 = func_33_call(var_34)
output = call_35
func_36 = relay.Function([var_34], output)
mutated_mod['func_36'] = func_36
mutated_mod = relay.transform.InferType()(mutated_mod)
var_38 = relay.var("var_38", dtype = "int16", shape = ())#candidate|38|()|var|int16
const_39 = relay.const([3,5,1], dtype = "int16")#candidate|39|(3,)|const|int16
bop_40 = relay.equal(var_38.astype('bool'), const_39.astype('bool')) # shape=(3,)
bop_43 = relay.not_equal(bop_40.astype('bool'), var_38.astype('bool')) # shape=(3,)
uop_46 = relay.sin(const_39.astype('float64')) # shape=(3,)
bop_48 = relay.less_equal(const_39.astype('bool'), relay.reshape(uop_46.astype('bool'), relay.shape_of(const_39))) # shape=(3,)
uop_51 = relay.exp(uop_46.astype('float32')) # shape=(3,)
bop_53 = relay.logical_xor(uop_51.astype('uint64'), relay.reshape(bop_43.astype('uint64'), relay.shape_of(uop_51))) # shape=(3,)
bop_56 = relay.mod(bop_43.astype('float32'), relay.reshape(const_39.astype('float32'), relay.shape_of(bop_43))) # shape=(3,)
uop_59 = relay.sqrt(uop_51.astype('float64')) # shape=(3,)
var_61 = relay.var("var_61", dtype = "float32", shape = (3,))#candidate|61|(3,)|var|float32
bop_62 = relay.bitwise_and(uop_51.astype('uint32'), relay.reshape(var_61.astype('uint32'), relay.shape_of(uop_51))) # shape=(3,)
bop_65 = relay.add(bop_53.astype('uint16'), relay.reshape(bop_40.astype('uint16'), relay.shape_of(bop_53))) # shape=(3,)
uop_68 = relay.acosh(uop_59.astype('float32')) # shape=(3,)
output = relay.Tuple([bop_48,bop_56,bop_62,bop_65,uop_68,])
output2 = relay.Tuple([bop_48,bop_56,bop_62,bop_65,uop_68,])
func_70 = relay.Function([var_38,var_61,], output)
mod['func_70'] = func_70
mod = relay.transform.InferType()(mod)
var_71 = relay.var("var_71", dtype = "int16", shape = ())#candidate|71|()|var|int16
var_72 = relay.var("var_72", dtype = "float32", shape = (3,))#candidate|72|(3,)|var|float32
output = func_70(var_71,var_72,)
func_73 = relay.Function([var_71,var_72,], output)
mutated_mod['func_73'] = func_73
mutated_mod = relay.transform.InferType()(mutated_mod)
const_75 = relay.const(2.819123, dtype = "float32")#candidate|75|()|const|float32
uop_76 = relay.erf(const_75.astype('float32')) # shape=()
uop_78 = relay.tan(uop_76.astype('float32')) # shape=()
uop_80 = relay.asinh(uop_78.astype('float64')) # shape=()
bop_82 = relay.floor_mod(uop_80.astype('float64'), const_75.astype('float64')) # shape=()
uop_85 = relay.exp(const_75.astype('float32')) # shape=()
var_87 = relay.var("var_87", dtype = "float64", shape = (7,))#candidate|87|(7,)|var|float64
bop_88 = relay.greater_equal(uop_80.astype('bool'), var_87.astype('bool')) # shape=(7,)
const_91 = relay.const([[[-3.037208,-1.759555,0.844324,-0.190886,-4.871778,-1.973044,8.912883,6.013740,-3.311436,9.312120],[-3.661404,-7.326425,9.076407,-0.577496,6.279780,0.724429,-4.397080,2.063731,-2.818804,3.084089],[-0.138147,-6.047486,8.258002,-4.926397,7.934943,1.772464,9.224649,6.098078,1.524669,0.754530],[6.475564,-5.393686,-7.469985,5.892948,3.912002,-1.265133,9.297864,-3.947187,-9.753121,-5.709159],[-9.513343,-8.396052,0.955689,-6.569766,7.011271,0.057483,-2.411843,-3.688469,-9.229864,-6.537605],[-1.801347,4.175317,6.109975,-1.418242,-9.995235,-5.290499,0.675489,-0.011536,-8.094981,7.169013],[-6.115298,7.634986,1.134798,-3.042739,3.840625,1.413147,8.017173,4.658900,-2.203860,-9.407408],[9.249738,-3.176979,1.661008,6.247990,8.814574,9.418727,-7.603139,6.523161,5.645575,8.332190],[-8.105204,-7.536338,4.820156,-8.664533,-5.707111,-7.159269,4.675748,-2.643755,6.536776,3.381855],[-5.336516,8.355574,5.490821,-0.794839,-5.624868,2.615078,3.941263,-3.461175,-1.924883,-5.493134],[5.398695,-9.454398,5.384261,-9.600919,-3.761715,-0.893362,-7.953178,7.240802,-5.842788,-1.633540],[0.969461,4.589970,-1.027067,8.147150,-2.401425,8.777721,-6.494335,4.031492,-9.837585,7.741930],[9.873140,4.722767,3.120375,3.624238,0.510448,-2.630432,1.979655,7.889346,2.779371,-9.500305]],[[-1.678278,5.567425,3.796419,2.580155,-3.968371,6.413498,-4.710399,-3.286904,1.551031,4.343991],[5.557104,-2.571046,5.871111,-1.600865,-0.527076,-2.659097,-2.739465,-0.027793,-0.684680,7.147137],[-2.688832,-3.349987,-1.533386,-0.867109,-8.173837,-0.322982,4.664784,1.100215,-1.445513,0.835231],[-4.648676,1.943816,5.373169,6.598461,4.850988,4.663966,6.497394,-2.626296,-5.562320,1.782384],[-4.611168,-3.361699,-1.246705,-0.488915,-3.289179,-0.534949,-7.703273,5.578294,2.085376,0.269989],[-1.444712,-8.314413,6.724808,1.570073,4.730162,-4.350748,-2.997129,8.162032,-8.435114,5.987207],[6.514664,-2.694900,5.068176,9.776294,-9.313735,-1.828068,0.564513,-3.195189,4.847887,-9.925936],[-2.532062,1.385805,-1.979759,-9.359320,-9.494218,9.597030,9.995400,7.480267,0.951425,5.862325],[-7.523089,-1.326601,-6.880606,-6.596377,-2.467231,-7.896017,8.421927,0.663512,-9.709619,6.731844],[4.941974,-3.589082,-7.983424,-9.872274,-3.258344,0.972082,6.656851,9.312437,-5.403840,1.301222],[-6.354675,2.864823,9.534907,2.723200,-0.206845,5.374696,9.549183,-4.289052,0.228105,-5.772069],[-5.845272,-8.811304,7.023219,1.806218,8.677568,5.090303,-3.225803,-2.927292,0.350794,4.469396],[-9.498369,-8.279262,-3.389645,8.431131,8.187431,-6.332835,2.932323,2.333307,-6.211355,-0.932660]],[[8.998207,3.529284,-8.384549,-8.107320,-6.954752,-7.969163,-0.990307,-9.605858,9.857217,-8.784051],[2.821458,6.687400,-0.168621,-8.187595,2.385074,-8.826134,-7.905547,9.351282,0.286664,-2.348156],[9.440023,-8.152485,1.034548,8.737774,-6.161812,7.353180,-0.394351,-5.632781,1.663654,6.556604],[1.268743,-9.695443,0.050328,3.845834,5.607171,-4.929559,-3.563049,-7.689854,-7.491915,-7.795997],[5.230760,-0.533724,-0.126349,-8.883376,1.581330,7.550893,-3.464746,-8.350598,8.088488,-9.791682],[-3.843772,1.425712,-1.517156,-0.222659,8.076132,4.350447,0.245993,-1.972633,4.741915,0.542983],[-6.420610,5.587380,-7.010039,3.366668,2.404737,-9.818207,-1.033333,-0.494991,1.686306,0.440297],[-1.457930,-0.394270,1.610721,2.346647,8.870175,0.319734,3.576937,-9.831217,5.839576,3.196366],[-7.304401,-9.567940,-6.646918,5.649687,0.386445,-5.077502,1.219495,1.738710,-9.208171,2.948456],[-3.104197,9.143813,-1.908881,0.472433,6.818678,-9.573459,1.586620,4.618657,-8.593863,7.559461],[3.279389,8.968670,-7.221472,2.951506,9.323766,7.241057,-5.956594,-8.744637,-7.393859,-9.531565],[-5.545935,7.943984,1.392199,1.675981,1.102623,1.832741,1.652541,-5.061052,-3.522938,-5.607421],[-7.761525,2.331690,-9.451886,8.578441,2.954721,1.423461,8.844393,2.233307,5.703346,-6.190208]],[[-5.983890,1.599368,-0.287962,6.137535,-1.738497,-3.213744,5.997055,6.533819,1.333774,9.767617],[-7.412608,4.961330,6.310170,-2.392715,8.616337,-0.669574,-7.441169,6.093054,5.293781,6.394207],[-3.533204,-7.248054,6.449215,-7.343606,4.113440,-8.740013,-8.200425,2.904966,-5.748970,-6.792134],[-6.262336,6.024478,-7.435331,0.091330,-9.347953,6.719231,-6.969782,-4.397530,6.837837,4.631916],[-7.722260,-0.069261,4.209598,2.305821,6.268607,1.153186,-8.151267,4.465314,-2.165508,-0.216760],[3.348005,8.539120,7.612809,-0.920365,-5.517590,2.717858,4.964665,1.967621,4.071926,-2.801188],[-6.317544,-1.179038,4.023967,-1.888757,-6.413568,-7.281792,-2.070930,-8.296206,1.534055,9.344581],[-5.758704,4.464035,-3.991059,-5.390651,9.007801,0.830393,-3.689367,-0.432862,2.735221,4.931385],[0.798296,1.779743,-1.782877,0.996731,-9.905409,8.142404,-2.415970,-0.264409,-2.328929,-3.186277],[-7.636117,7.207666,-3.852641,-4.956311,-8.442262,7.812727,6.336814,-1.838169,-5.306981,4.916591],[-1.509400,0.446701,4.796361,9.504151,-0.506596,7.516333,7.058527,-8.764888,-3.106030,1.400050],[-9.346084,-7.779833,-2.528649,4.662324,1.516507,5.083365,-0.819507,-9.127088,3.113780,4.534147],[9.850285,-6.120135,4.518197,-4.275919,1.036655,3.405823,7.688704,9.254412,-8.857372,-9.949247]],[[1.006509,6.789957,3.403381,-2.703081,6.646137,-7.553020,-9.370430,-3.535340,2.822263,-9.786276],[-8.554937,7.718954,6.595362,8.321411,5.744893,3.720134,-8.444265,-2.475230,-7.831778,-1.608743],[-6.977893,5.687229,1.536957,3.388757,-1.130089,5.550036,3.424752,-6.482003,5.103130,-1.268586],[-8.883683,6.264401,-4.036443,-0.962156,-7.668702,-5.676397,6.777760,-9.898158,5.017943,-7.053006],[3.643432,5.294156,-0.274715,7.287044,8.270370,-9.925943,-8.171409,-6.776078,-5.726322,2.013568],[3.067184,3.898119,6.923215,8.690399,9.537529,9.381417,6.806485,6.383422,-6.213573,8.940602],[-1.285532,1.215373,-6.520373,5.656589,-6.890582,4.926339,7.999234,9.353127,-4.531069,3.943007],[-9.305883,-4.673508,0.925989,8.238114,9.442784,-8.489471,-9.218200,-7.616695,2.937343,6.322798],[-8.240692,-7.431246,-2.727570,5.751050,-1.641529,-7.799439,0.105722,0.850268,9.848268,-8.596133],[4.237623,-1.396318,8.622095,-1.786701,9.903608,-1.713228,1.646224,4.038373,-0.839111,-6.468424],[5.920984,5.988168,-1.477267,-2.055915,6.876693,-4.862317,7.818308,2.339670,9.510011,5.529986],[8.967869,-7.430693,-3.102134,-6.776823,-8.294955,-0.667408,-6.400627,-9.124006,-6.128415,-6.985591],[-8.344807,-7.770990,7.856200,-4.012331,-2.216409,1.992004,9.144325,-0.096020,7.918647,6.076246]],[[7.381212,-3.412314,2.589849,-8.981359,1.641355,-3.884792,8.025387,7.802041,-4.960913,4.423955],[8.796984,-6.077249,3.131954,0.062027,-3.154125,-2.558897,-1.445608,4.838617,-1.909107,5.862765],[-1.302964,8.233678,-7.900417,-8.369461,-5.397736,4.032135,8.359103,-8.906805,-3.210127,0.764524],[-9.380187,4.678532,-6.654865,1.202528,-1.104640,-7.219491,-1.233619,1.652038,-7.044717,9.171885],[8.010333,3.242349,-7.304319,2.534084,9.208599,2.580028,3.733688,-6.255052,3.009134,-0.318006],[-9.323236,-0.596378,-0.773228,0.745936,-3.734715,6.211437,-5.833790,-1.521619,-9.228410,4.185461],[-1.997188,-3.538288,5.723528,-2.641412,-7.333151,6.937854,8.111768,2.873508,9.479109,5.315884],[6.907097,3.984141,1.078607,-4.081013,-1.249084,7.985454,9.844248,-0.369558,-2.888713,9.779439],[0.966974,2.621902,4.983899,-9.558698,4.499752,-5.028310,-9.927500,-0.680549,1.519670,5.730089],[4.657625,-1.728282,-7.633921,5.421806,5.531623,7.705629,7.176736,-0.305285,4.195018,6.563143],[-3.089651,4.128903,-4.268412,-3.336465,0.620130,4.482851,-8.837370,4.457539,-0.369198,7.014911],[6.770156,-9.310209,4.680423,1.814205,1.536212,4.892340,-5.810123,-8.009305,0.276825,-4.282113],[-1.190143,9.562094,-0.540501,-3.149226,0.248042,-7.611558,-9.530283,-3.268355,7.982724,1.820698]],[[-5.508513,-5.862161,3.839365,4.514310,2.516386,1.784046,1.172614,-2.658531,0.405026,-7.336444],[-9.521443,-1.811450,3.771699,-0.738092,-1.428719,1.537956,2.179860,-8.141556,-4.616027,4.143919],[8.900575,-9.155437,1.417498,-0.407451,0.644747,2.418159,-0.925011,-4.288530,-7.176655,-3.167049],[-8.546243,-3.024868,-2.492462,2.195380,-4.415651,-8.079621,9.476860,9.632051,-7.777397,-5.735001],[-9.230066,5.867359,2.460053,7.864672,2.445446,-5.232506,3.011316,9.269413,1.839187,7.191907],[7.264878,-5.439206,-6.517539,0.902935,0.410029,-2.228712,3.029403,-6.169549,1.789189,4.248737],[-1.607835,5.655333,-2.255906,5.721780,1.547677,0.764519,-2.586897,9.458716,7.578473,2.229255],[-9.314402,4.249238,-3.579657,-9.797869,9.336844,-2.867041,-5.918194,8.285560,-1.906702,-3.398813],[2.868024,-8.006640,1.569323,-8.889904,-2.524785,-1.386535,5.013984,-0.088751,7.108308,-9.747160],[-2.521503,-5.882241,-4.718527,1.665928,-5.932331,-0.303502,-1.768073,-0.199189,-9.180632,-5.502579],[-0.709152,-9.216330,-3.330242,9.339813,1.881280,-5.895140,-5.255781,-9.694405,7.760505,7.218557],[-5.511700,9.068635,-3.765527,-6.014976,4.859577,7.344694,4.076018,6.496215,9.007183,-0.678749],[-6.742653,-4.989758,4.305243,3.796127,8.557945,3.873346,-3.958071,-7.754871,-9.320956,-9.871351]],[[8.357223,6.040791,4.519451,9.156305,-5.621502,6.366405,-6.503775,3.117040,3.230142,-5.870589],[-1.317515,-7.872105,9.996663,3.295829,6.454704,3.528652,-8.455130,-7.231547,6.326017,-0.842119],[2.790965,0.374246,0.498370,8.967726,1.885633,5.366300,1.029371,0.180754,-2.032375,-1.410262],[-9.696098,6.758078,0.275885,-6.014866,6.569355,-1.878650,-1.375389,-1.300244,-7.288008,-6.830152],[-0.073645,2.493866,3.176229,-5.750283,-9.495238,-4.068134,-8.021275,8.530528,6.901186,-8.009082],[-1.229133,2.627759,-2.095606,-3.171960,1.788206,6.512194,8.707051,-1.035175,9.412376,-8.097017],[4.084295,-7.166377,-1.342692,8.271499,6.387535,-4.294044,-5.209812,-4.083781,-6.827806,-4.348054],[-4.737412,0.068052,-9.808187,-8.148723,-6.151702,1.428842,0.082474,7.828638,2.207922,9.997100],[-3.662149,-5.974821,3.885276,-1.384786,-2.025463,-0.864038,-4.894013,-8.298027,2.308096,-7.758805],[4.084474,6.734578,7.092688,6.678636,-0.288036,0.458262,-0.427609,3.660414,-2.028299,4.955588],[-1.825211,6.348660,9.553503,-3.773667,1.515337,-0.727800,-9.886002,8.135776,-8.566455,6.345401],[-6.300765,-4.827209,-5.557131,-5.382204,3.781461,9.142493,3.631600,-7.181586,-2.831409,9.012968],[7.768797,9.747652,-4.385278,4.846404,0.692271,2.033094,5.434011,-3.930225,8.408088,-1.246233]],[[4.268189,0.023825,3.259133,0.463122,-0.700039,7.220156,6.258677,7.479010,4.481493,-8.458175],[8.574940,-3.214349,8.049481,6.904651,-4.094014,4.805159,3.435923,-9.018679,-0.481560,3.794910],[0.055924,-2.105978,5.102534,-4.935985,-1.632153,8.673959,-1.236680,-0.277645,-6.014809,-8.867534],[-9.097060,-5.310577,-7.171701,-7.456300,1.682486,8.633386,-7.016545,3.101703,-7.079804,-4.758274],[-8.744994,-8.671983,-6.129965,8.185396,-7.164026,3.613010,3.385652,4.509351,-9.118305,6.619240],[0.434510,-2.346052,-8.628011,7.118953,8.254818,-2.608594,1.889856,-6.845254,6.403014,-8.630611],[-8.789049,-3.770616,-8.687956,0.392733,3.375988,-0.312978,-2.199241,-7.099328,-9.401521,8.251014],[-7.790658,4.394036,-0.209386,3.979339,0.828380,-7.370261,5.528485,-1.155771,-9.408315,-7.831787],[-3.190630,-7.019053,-1.930960,4.960962,-3.631539,-0.052981,-4.827815,-8.828155,-4.525384,9.040448],[0.947621,2.559420,-7.448251,-3.324728,9.286352,6.569481,7.200635,-0.906350,-1.176152,-0.637557],[-2.357592,3.514609,3.730394,-5.751781,9.862696,9.554690,3.923338,6.922277,-6.023718,-5.324771],[7.231284,0.711174,8.669229,-3.146308,-5.087622,-0.979543,8.762757,2.604893,2.056448,-5.291248],[4.156992,7.894668,-5.421673,3.702147,4.229495,2.065294,2.210093,6.063336,-3.620268,-5.033200]],[[4.396907,-7.697284,7.060508,1.452458,0.348443,5.127438,2.662077,4.867749,-5.842887,5.671914],[-9.953151,-5.750437,1.441735,-9.953452,3.149272,-2.289954,5.540086,3.262429,1.836917,7.019351],[6.025890,6.098844,7.905119,-4.181780,4.527198,7.361059,-5.894369,8.547850,-1.690346,-7.322884],[8.018969,-6.138299,1.587798,7.608727,-3.974919,1.661353,9.093587,-0.420709,4.057098,-4.858272],[-9.606728,-6.684929,3.388408,9.825768,6.980010,6.121218,-5.062829,9.348086,-1.989604,-4.702029],[4.020141,-7.070798,5.682749,8.644390,9.068922,3.420102,-1.551081,3.543687,-1.789020,5.658254],[-6.833954,-6.879295,-4.162253,-0.464751,-5.392762,6.212706,-5.196995,-6.169767,-0.783102,-1.918498],[-7.357657,-7.924015,2.370385,-8.434870,-0.282357,2.101737,8.091789,4.059408,9.478136,-2.804743],[5.991530,1.405636,6.974140,2.282552,0.606701,7.074499,9.681453,-2.791724,5.926494,-3.465107],[-5.960045,-7.927865,1.255130,5.234164,7.929685,-9.807466,8.375256,-8.700392,-7.536997,4.765971],[3.031673,4.634429,-1.923615,0.132127,-0.801739,2.583533,6.331022,-2.080187,2.553793,3.903183],[0.722267,6.749062,2.275666,4.120009,6.580797,-1.034651,-4.959327,-7.051875,3.545837,-7.548663],[0.449809,1.528167,-6.263261,-3.262069,2.731040,-8.793498,5.359297,-1.990746,-4.970152,-0.365226]],[[-0.607721,-5.994922,-1.332924,9.104296,1.292328,-6.440328,4.134561,4.483249,3.023252,8.801948],[-3.202438,-8.237083,-5.232592,-6.363705,-2.544440,-9.961770,8.554928,5.725132,5.655079,-1.211882],[4.177255,-4.981240,-8.972681,-3.570782,0.419731,-5.461597,2.401171,7.386332,1.261875,-5.474338],[1.868401,-9.673112,-3.443734,-4.966101,-4.448730,-4.539086,1.841705,-2.226182,-9.957295,-3.279506],[3.261373,4.944931,3.259265,-8.463455,1.223838,-3.304014,5.137879,0.857999,5.245958,-7.820569],[-3.979073,3.445854,9.648863,8.432288,-6.278719,7.134573,4.708218,-1.254362,6.842523,5.231198],[-7.817406,9.516117,3.015377,3.049185,7.951440,-0.081262,-9.712180,8.732442,-1.451510,1.992107],[-3.911834,-1.400586,-7.978817,-6.948467,0.060199,-1.312304,-0.998675,1.447477,-7.879742,-6.605692],[-2.939118,-5.395704,-0.189738,-0.339586,-1.036424,1.160714,-4.631065,-9.849513,-7.945661,5.832856],[1.270254,2.331168,7.347993,0.213917,7.241105,8.688522,-9.622203,-8.864214,-2.891668,0.275576],[9.936846,4.702486,-1.414199,-2.538156,5.329437,-1.560366,1.572414,-6.282282,7.761670,-1.264154],[9.980138,-1.299255,9.974398,-5.488946,-1.460297,4.437534,-5.447914,6.320298,-2.840140,2.951601],[5.853665,-2.093900,-9.390690,-9.795909,-8.883733,-7.984241,-0.376769,-4.765595,-9.624615,1.570852]],[[-2.168923,-9.986773,-5.348339,-3.645047,8.827107,-0.008152,4.931516,0.876078,1.843071,1.435508],[-4.183841,6.579275,6.538636,6.007672,-8.432570,-3.500231,5.535286,7.317060,-6.129681,-6.046414],[1.394651,8.246529,-6.414226,-7.700189,-4.744741,5.940485,-3.309030,8.983155,-9.275479,4.571909],[-5.278058,-1.528097,-5.409160,5.544712,3.149421,-5.031015,-0.504483,0.453275,-9.431676,-5.190098],[-0.286700,0.580755,-6.832574,-3.119432,9.736337,3.024941,4.283599,0.781779,1.243637,-0.985161],[6.125301,7.443985,-7.403808,-6.629905,6.323644,0.936359,-3.244542,-6.135793,-6.013354,-5.860711],[-9.834667,8.743489,0.978032,2.703867,6.622964,4.507725,-6.281076,-6.778955,0.834163,1.547005],[9.032168,-8.086340,0.528961,-0.857504,8.158147,-8.833156,-3.241430,9.266937,-3.684241,-9.890201],[5.922240,-0.836005,-0.224658,-2.903016,1.438827,-8.148632,2.956079,8.262256,9.709322,-1.018766],[-0.992495,-1.305398,-3.780596,-7.979612,-9.521040,-4.056006,-7.657189,1.055697,5.155833,-1.613487],[9.546563,8.553317,-7.817785,-4.882081,-0.184663,-9.294578,8.001220,8.031932,7.010002,-0.906592],[-4.623752,7.255333,-1.106934,9.227836,-2.985988,-9.313887,5.164996,-0.750703,-5.958020,5.413217],[6.179584,0.400402,4.632404,-1.145257,-1.297098,-2.365829,9.530222,8.567755,5.467903,6.569403]],[[2.345095,9.808070,5.893648,-9.211362,-8.874384,-4.087516,4.481567,-8.761160,-2.813217,5.077357],[-2.527063,1.013807,0.575548,8.159192,-5.651963,7.708836,-0.833735,-3.952392,-5.044190,-8.367872],[-9.576954,4.515637,-9.923315,-3.052595,-1.932945,-6.208348,-0.946250,4.025465,-1.366014,-1.634385],[6.119418,-9.173147,-9.267331,-0.124397,4.400434,-2.596622,8.923602,-3.299098,8.443016,2.499984],[-4.780933,-7.189929,5.125917,8.950436,-6.503288,-2.160683,1.929941,-6.740010,4.910582,-1.812979],[9.850653,2.375154,-5.935402,-9.479128,-6.041762,-8.431735,2.168268,9.085364,-3.549590,3.637724],[-6.225688,-5.680043,-4.643693,-8.708304,9.086880,3.227622,2.123116,-2.305858,-6.993530,4.325451],[-3.165589,2.366525,3.951342,-9.460515,3.643105,-9.893612,-1.881856,9.508796,2.099114,-8.533035],[5.860548,9.758499,-8.508687,-4.366532,0.272150,-4.933920,3.798792,1.822454,-0.511241,-6.625281],[1.741765,-1.235056,-9.448868,8.293808,0.751099,-4.017547,6.628680,3.322727,9.332828,-3.142259],[0.700191,-5.286031,-0.471461,7.035028,-4.221854,1.266276,5.638004,1.289447,4.298255,5.517551],[-2.226914,5.362277,-0.208574,-5.438908,1.201239,-4.143490,0.019914,4.111523,-8.423752,-1.113701],[9.313346,7.143721,5.483307,-1.815800,4.552865,0.708661,4.017491,2.200994,6.952376,-0.280001]]], dtype = "float64")#candidate|91|(13, 13, 10)|const|float64
bop_92 = relay.greater_equal(bop_82.astype('bool'), const_91.astype('bool')) # shape=(13, 13, 10)
bop_95 = relay.greater(uop_76.astype('bool'), bop_92.astype('bool')) # shape=(13, 13, 10)
uop_98 = relay.sqrt(uop_78.astype('float32')) # shape=()
bop_100 = relay.divide(bop_88.astype('float32'), const_75.astype('float32')) # shape=(7,)
uop_103 = relay.exp(var_87.astype('float64')) # shape=(7,)
uop_105 = relay.erf(bop_95.astype('float64')) # shape=(13, 13, 10)
const_107 = relay.const([[[9.583317,-4.871118,-3.010252,-3.604585,3.166985,-1.154499,-6.725859,2.618629,7.752296,-2.268624],[-4.742426,1.337230,3.465679,-1.637667,-6.820337,7.209845,-6.323845,-7.059884,-0.918609,7.229913],[-9.523764,-2.302342,1.657393,7.108199,0.700887,-9.399159,8.567417,1.346658,7.538918,9.971096],[8.480169,4.098174,-1.054850,-2.512318,-8.866542,9.825089,-2.755562,6.594394,9.835615,-0.368706],[-9.598183,-1.623071,-0.845079,-8.318427,9.800574,-1.240517,-2.090406,-0.643882,0.099981,-2.200632],[-0.763642,7.382904,9.454504,6.055760,5.022182,4.879957,-8.399102,9.131510,5.643164,-1.455671],[-6.873370,-1.158321,-0.134681,0.128735,7.413075,2.845910,6.907680,-1.081404,-3.227877,6.481327],[-5.392042,8.587252,-2.867186,3.828950,4.823412,-4.604168,-8.850918,-5.645216,7.580370,9.376978],[4.680991,2.348328,5.605596,1.080466,6.238459,0.130042,-8.700397,-4.475797,-4.584897,-8.435760],[5.269883,1.373421,9.518403,-6.874802,0.777018,-7.216127,-7.246088,-4.089296,1.147256,9.947712],[-3.073596,-0.286669,-4.129469,-8.401295,6.065932,-7.815969,6.281049,-1.794965,8.195617,-4.939913],[-5.225779,-4.391060,-5.879127,-5.282611,-3.456363,-0.307590,5.952094,6.153637,2.153276,-0.830315],[7.848877,5.113929,-9.785415,0.490961,-7.173518,-0.718126,-6.788346,1.078300,7.813448,9.557748]],[[-6.342253,1.146035,-7.662355,6.748340,-8.872655,-2.726995,-1.047013,-2.316352,-0.323977,-5.928305],[4.568333,6.541778,9.619481,-4.354140,4.276118,6.277444,2.452137,4.776437,0.985161,2.002448],[-6.706607,5.030143,9.025838,8.747205,-6.199584,-5.207726,-0.809824,2.000644,9.247702,1.396208],[0.029994,-9.497352,3.221311,0.276738,-4.310190,-6.361883,-6.841592,1.374442,2.034866,2.066911],[-7.909600,-0.059212,-9.427003,5.832875,6.374227,-1.398465,6.465330,-5.847489,-3.843054,0.828428],[-6.401966,2.281738,-4.277133,7.825517,1.024345,8.426299,-8.863300,-8.731967,6.140147,-1.691615],[-6.668337,-7.051534,9.337695,-0.971462,-2.347276,-2.221600,8.904844,0.781312,-4.512107,-9.707832],[-3.057140,-2.996579,3.254384,6.606042,-8.911492,8.774631,-0.481847,-9.283859,-2.352881,3.847429],[-2.498652,-2.942454,2.455606,2.528423,-3.953975,8.085030,2.058161,2.914732,-3.830429,-7.186013],[2.200726,-0.268032,4.919254,1.495382,8.277704,-8.280659,7.355488,-5.410267,-1.232664,-8.409387],[1.424465,4.671906,6.957943,5.963617,1.457836,-1.559652,5.450231,-8.303904,4.835417,4.099053],[-3.336469,8.319291,-0.133300,-8.797463,9.519860,9.532240,-0.056659,-1.957242,4.612627,-9.268193],[5.869425,1.655799,6.810778,6.590517,-1.323873,8.225802,-7.887192,-8.912516,-5.428948,1.622294]],[[4.844080,-3.324080,-9.544507,-9.063854,-7.260877,-3.524416,9.833662,4.293493,-2.006139,-1.479305],[3.875157,1.412576,-7.600949,-4.749491,8.354922,-8.860787,-3.608730,-7.375974,3.603903,-3.209762],[9.678528,0.339243,3.464999,0.665118,2.165886,-4.543162,-0.131526,-3.845761,0.133598,7.898595],[5.125999,7.954237,9.664661,-3.452182,-0.330137,-0.312625,8.684717,0.338352,-2.092756,-4.285440],[-5.426723,-8.298611,7.417480,4.133980,6.527051,4.775177,-7.734324,-5.249393,-4.723065,6.782982],[-4.205514,9.428745,7.484878,-3.517241,8.196529,-4.907774,6.595023,-2.890916,9.576026,4.965792],[4.773383,8.670237,2.630680,9.887166,-8.609996,1.779404,-7.595439,5.204964,4.894769,-7.415324],[-6.355818,-6.911680,5.833447,-3.630969,-6.849015,-0.620110,-4.898289,8.742885,0.317452,-4.686383],[5.553710,-9.930693,-5.238348,-1.518097,9.192757,-0.719957,7.425250,3.059361,-3.433280,4.912197],[7.632764,-1.507731,-4.849099,-3.437977,-8.860420,0.802194,-5.144482,1.341160,2.459732,-6.841339],[-6.543691,3.273051,6.436922,3.979014,-4.046510,-2.779859,-1.653649,-3.123600,-1.603875,-8.619519],[5.136577,6.633498,-0.981799,-3.281249,-3.291610,-0.654125,6.610706,-4.805130,6.263126,-4.335695],[-1.545894,2.126123,8.155845,9.277868,-7.745355,-5.251922,-5.561594,8.750708,9.221067,-5.033770]],[[-4.915098,-3.467750,-8.066003,-7.801749,-2.406037,-4.395668,2.533645,6.240218,5.713302,4.514903],[8.200033,6.711950,8.174908,-5.583292,-7.913196,-9.781167,7.791007,-3.888529,6.601046,0.418238],[-7.026310,-2.915771,-1.419384,-2.363685,8.558307,1.385611,-4.202031,-1.628342,-1.034956,-0.637388],[1.385159,6.475772,3.481760,3.027298,9.624886,4.806744,-0.910547,8.099118,4.982284,-2.471239],[2.644555,9.565931,-1.558549,1.164144,-1.775362,0.490505,-4.401879,7.764996,-7.355923,-9.438625],[9.457865,7.719230,-8.744545,-4.135457,7.432587,-2.351561,6.965772,-0.547503,2.221753,-4.744071],[3.823049,9.030558,-3.681977,1.376399,9.546552,-3.702180,4.494180,-2.721829,4.794752,-4.731553],[0.403062,0.492072,-4.493527,-8.883328,-1.992769,-7.557142,-6.304553,5.905035,-9.421916,-1.861212],[3.987900,-2.181623,-6.385607,-3.532059,-1.324404,-5.463605,2.590258,-8.688778,0.898310,5.824450],[6.779012,0.893970,0.804970,-0.326162,-3.856033,-6.282306,-8.917264,-2.656022,2.931589,-2.835390],[1.819242,-5.964369,-8.817632,8.867977,0.938302,3.762930,-9.641479,4.567982,-8.274987,5.662004],[-4.696625,-0.924061,-6.638407,6.034370,3.696996,5.286331,4.228867,4.271803,-5.793439,2.221556],[3.910214,-6.894701,-1.441009,1.705412,-6.710057,1.347377,-1.696717,2.008690,-6.090498,8.663825]],[[-2.708766,5.621018,-5.229565,9.356435,4.129289,-0.663928,-6.540814,-3.002398,-1.936868,9.600032],[-5.129703,8.404128,-7.020144,0.284143,-4.078576,-7.433783,-3.591004,-4.262724,-8.391877,0.115591],[-4.782066,-4.476613,0.205889,2.972258,-5.898291,-8.838903,9.088903,-7.483037,-2.980130,1.645087],[-6.713060,0.028387,5.867092,6.733906,5.833453,4.270508,-5.960676,-2.572609,-3.130134,-6.339115],[-3.588216,5.310958,-8.122617,8.611702,5.044525,1.133241,-8.260954,-3.993388,-9.781458,5.882651],[8.424162,-3.032807,-3.987838,9.616973,-8.759496,-4.046709,-2.237700,6.592069,3.554818,1.111272],[6.816967,-1.493160,9.521041,1.138641,-3.133474,0.152078,4.595171,8.738564,7.726712,-7.295635],[-1.523020,-5.476839,-7.608100,-5.612555,8.137884,-4.490206,-5.127290,-5.210225,-0.647655,-2.348666],[7.462223,-2.778345,8.172116,-6.536930,-7.172206,-5.527602,6.836608,4.934028,-2.822105,7.129868],[6.384350,-2.281547,-0.486198,5.851934,-6.699906,8.833546,2.627787,-5.478935,-8.728991,5.038659],[9.082376,4.541166,2.373951,-8.819807,-0.348332,7.147348,-1.809692,-2.962085,-7.805321,3.325270],[8.205497,-6.721228,-0.222008,8.808065,-6.402650,3.167385,-7.036309,-7.667596,6.130313,-9.226368],[0.406549,6.887186,8.591097,-0.947312,1.722855,5.652455,6.867062,7.254959,-2.484079,-4.484093]],[[-6.445090,1.519692,-1.554152,-6.810759,-5.135170,-5.650495,-7.633916,4.448684,3.824777,8.311453],[0.523892,2.597433,8.207744,-0.013765,1.792734,-5.181265,-2.364796,-0.103662,0.113990,-2.491364],[9.510198,2.116960,-0.037598,-1.606086,7.171122,-2.830733,-0.768595,8.515532,2.219054,2.201900],[-5.448158,-8.818366,1.170258,2.471769,1.789344,6.117845,-4.451182,-2.708007,0.123106,-0.864150],[-5.442973,-7.724057,-3.710249,-1.311823,9.783829,-4.136353,3.712591,0.322453,-7.882550,-9.848121],[-1.365047,-1.253939,-7.882381,-9.582919,1.178342,-6.427137,8.467155,-4.267544,-5.563289,9.493274],[8.411515,0.295103,-1.413476,1.237327,-2.582524,-1.036221,1.596281,9.355505,6.974332,-1.537769],[5.258109,8.191966,4.547184,-3.843626,-0.982561,0.040449,-9.881605,3.795654,9.172737,1.099250],[-3.271013,0.875261,-1.786953,9.483572,-5.919743,9.456566,6.435878,-8.492658,-3.647600,-9.776660],[7.077282,-7.879284,6.160230,-6.720901,7.867761,-7.419164,-0.957735,5.855129,-8.507482,-7.813200],[-3.113540,-8.200093,-9.587164,-8.725012,-0.515457,-3.013028,6.526737,0.343726,-1.717264,3.612358],[3.080331,6.291313,5.140442,-8.990619,9.618059,-2.876687,-2.465482,5.309250,-5.014617,-9.131277],[9.684207,-9.919574,8.511132,3.223991,0.355121,5.784011,-4.589286,-0.949885,-4.315203,4.255328]],[[-1.186277,0.626447,8.597174,1.246111,6.861151,-4.328607,-1.250476,4.583477,-8.243853,2.347063],[5.823157,-9.952120,2.811758,-1.335501,9.953125,-9.763579,5.348463,5.552483,-0.923716,-2.181117],[-9.336936,-5.631612,5.645457,-9.362593,-3.923621,-1.942686,0.537438,9.125088,6.820477,-0.914359],[-3.293370,-2.558492,-9.707845,-2.195893,4.650015,-9.382503,4.365518,-5.844445,-1.750500,-6.081388],[9.256569,2.591663,6.049714,9.839167,-9.686315,5.816451,-9.118747,-8.234347,9.660774,-0.032275],[-9.877697,-5.229278,6.878354,-3.637219,-0.116693,7.615924,7.718161,-3.224969,8.196818,-5.679702],[1.952024,-6.505020,0.399438,-7.439047,3.341013,2.210894,-4.596967,1.101331,6.102764,2.789615],[-5.301886,0.908316,8.151498,-1.649147,8.045781,-6.788662,8.306018,1.447788,-8.197624,8.042345],[-0.749058,1.521594,2.062226,-9.520033,-4.393397,-0.892794,-6.772859,3.415924,0.924527,4.911100],[-4.330187,5.967157,-1.706457,-6.917442,-8.916307,8.475049,4.857411,4.558366,4.853338,0.134344],[-8.156424,6.473407,1.575839,-9.316839,-8.720728,2.057231,-9.766745,-9.625458,4.871503,2.168020],[0.391412,-9.794926,3.753672,4.905660,-1.242582,-9.480102,-4.182534,1.048207,-9.455471,-8.694560],[6.586135,6.835633,-6.982062,3.020964,1.636047,8.661352,4.514912,6.262117,-8.834473,7.863123]],[[6.592442,3.616113,6.148154,8.247002,-8.134997,1.566586,6.718758,9.873342,-2.774002,-1.944887],[1.381226,-5.606873,8.988711,6.680606,-1.515604,-2.191962,9.532236,9.216637,6.856512,-1.427134],[-5.817613,4.516619,3.948793,7.602856,3.080799,8.955804,-6.917148,0.810014,1.005188,2.559343],[-8.583406,7.790383,7.670274,-3.433458,9.273549,-1.665006,-1.390290,3.466327,5.287259,-7.621568],[-1.495463,2.073147,0.337240,7.775806,-4.120345,3.659792,-6.918328,-5.560552,4.386656,-7.921143],[3.755347,2.776125,3.121191,4.590264,1.291052,5.221794,4.396742,-5.153835,-9.182978,4.709910],[-7.068917,7.522351,4.864329,-0.331431,-5.668235,6.805157,-4.458613,-6.869749,-4.463692,-9.112933],[6.134697,3.401913,-1.501491,4.585838,9.103132,7.691458,3.518190,9.968200,-3.118689,-6.518805],[-3.065323,1.103494,-1.330021,-1.647810,1.737731,-4.925221,5.798971,-5.653658,-8.096889,-3.918215],[-0.727718,2.541770,-0.009150,9.845154,3.681628,6.294324,3.232364,-2.701493,-6.824847,-8.648520],[3.518912,-0.226255,7.090384,-5.803539,0.574288,0.297802,4.159374,4.535520,9.295246,-1.704638],[-7.446968,1.315906,-8.193792,1.375056,-0.190980,7.448763,2.036124,-3.390613,-6.388148,-3.998600],[9.016394,8.027648,-0.602100,-4.658708,9.187612,-1.198904,5.637673,-6.524399,8.907653,-2.257413]],[[7.474728,7.738006,-8.079880,9.251606,8.157862,-3.230877,-3.296200,3.000584,-5.723918,-6.995380],[-4.042775,-4.660490,-9.247162,-3.328714,-3.851912,-1.058224,-5.121667,-2.973126,4.246204,5.071495],[3.991812,-0.719479,2.921792,2.499425,2.067059,-5.922750,-9.625630,0.812434,6.578960,4.426074],[0.036413,1.344719,3.654193,-8.119323,-6.236087,6.967278,6.426512,5.284219,2.634866,-5.622366],[-5.907998,6.503861,1.298549,-2.599493,-6.868063,5.385190,2.207875,6.994712,-8.747061,4.744744],[2.017605,9.751811,-0.876551,5.102703,4.902586,6.811321,-5.106583,-5.556402,1.855381,-6.120493],[-0.070270,3.075143,1.575381,7.857205,-1.166805,-8.819951,3.735827,-9.062002,-1.261328,-3.517794],[-7.581723,4.085236,-1.226710,-1.636664,-3.098346,8.879059,-5.578116,-3.515750,3.389492,-7.299560],[0.783441,1.535242,-0.794450,-2.997809,1.172572,-4.641730,-8.011643,9.674815,1.969839,3.108019],[-6.822471,1.138081,3.301515,-0.339315,1.098895,7.405987,3.690866,8.051166,-3.519651,-6.167691],[-2.145540,5.661505,2.005696,7.382670,0.552733,-4.679308,1.372261,-9.605321,-2.063237,5.763505],[1.839379,-0.917107,8.258062,-0.065411,3.773255,-3.842378,4.292815,6.185321,-8.630774,-1.435658],[1.207178,0.128139,-5.701482,8.771956,1.078071,-8.333476,8.962410,7.403582,-8.745281,8.171421]],[[1.806785,-2.947177,8.688327,4.825699,-2.062775,1.685345,-8.558995,7.512166,7.053498,5.848898],[3.630170,1.665578,-8.744908,-0.039289,9.251479,5.294370,4.191412,5.992286,0.416727,-5.079840],[-4.593909,4.578571,-3.933053,3.365373,8.421018,-9.218062,-6.245227,-2.262267,7.657125,-6.967840],[-2.033083,9.396298,5.711638,-4.748179,7.712565,-4.540116,3.785101,-8.138862,-8.983121,2.925305],[7.525723,0.776739,6.023108,-6.693954,-0.939006,4.181037,-6.077257,-0.115753,-5.546051,-8.436551],[9.974575,9.953892,-3.492199,-2.487717,-6.616117,8.070291,-4.442438,4.991927,-3.752413,-8.720381],[-0.339504,5.404512,-3.220339,-7.091874,-2.335391,-9.941956,-3.920892,-1.399785,5.342768,5.401787],[-7.271780,2.976949,8.119048,8.627619,2.715521,-7.708452,2.558308,-5.692206,5.617377,-4.044859],[-0.350571,9.395359,8.774801,9.622406,9.700704,-8.723622,2.161541,-7.366320,-2.992159,-8.764430],[8.724178,-4.339503,-2.621811,-0.137319,1.033055,-1.549832,0.452585,-8.479296,1.579656,4.290649],[5.827544,5.020806,-1.111324,9.923064,0.164190,-1.539346,4.699632,5.745488,7.391789,0.806857],[7.138546,-1.507190,-5.565150,1.891890,9.766917,-5.969226,-1.122111,7.022618,0.364709,8.517128],[6.540310,4.839581,-3.181954,-9.256258,-8.968976,8.332974,4.781303,-4.873726,-4.932111,-4.640114]],[[-9.446052,-9.077806,-6.293951,5.189338,9.627255,-2.977081,-1.884345,7.503562,-1.703269,2.589417],[3.972056,-2.155332,-3.442051,-1.130744,-8.673296,-3.613623,8.892376,0.003095,0.851182,2.471979],[-7.475814,9.218315,1.465855,2.074295,-4.113160,-1.268327,7.953201,5.591031,7.391115,0.579899],[-4.607409,1.528550,-2.373741,1.479139,2.513447,-7.393577,-3.037765,7.215760,-9.119844,8.161588],[8.967702,6.964623,0.260946,-2.361238,-8.574950,-6.639897,-4.042452,8.354023,1.967771,-0.726497],[0.918959,-4.311748,-0.560852,-6.392861,-7.740242,7.281683,4.356870,2.864230,4.011310,-5.950777],[7.726515,-5.787963,-9.614147,-7.481866,-8.357193,-0.602220,-5.870254,2.868365,-6.903135,9.986508],[-0.580645,-4.801689,7.167919,-6.157615,-1.318388,4.884042,6.487523,8.530301,0.300663,4.311191],[-9.542640,9.082700,-2.944518,1.101026,-9.192785,-1.701491,5.913142,2.840418,-6.754908,-5.698388],[-5.766567,-5.757035,9.880409,0.482533,5.233753,9.266280,-3.801087,-6.880752,7.556945,-7.941653],[2.504744,-8.652799,2.758136,3.325918,3.859036,-9.216396,9.978423,-4.956648,-1.537813,6.591943],[-2.109902,4.602242,-6.548763,-1.257984,0.185049,9.811422,9.104996,-6.698308,7.371111,-8.656462],[8.991590,-7.235915,2.451072,6.629908,-9.662506,0.293352,6.236718,-9.178759,7.917067,-9.757824]],[[2.407362,1.644907,9.243440,9.504832,1.306936,-5.289397,4.838281,-3.113750,2.195579,-4.078664],[-1.315353,-3.768737,8.924503,8.254437,3.222755,0.483207,-6.567481,5.259692,-1.249420,-2.224929],[-2.701274,-6.279624,-0.868669,-1.408413,6.628015,9.956395,8.094993,7.810139,-6.638691,2.570989],[-8.277267,-3.557222,0.347889,8.727883,1.337967,8.252845,-5.917168,8.867708,-6.058423,-4.348676],[-6.739456,-2.447738,5.521900,-5.112753,-6.528789,-1.695497,8.991710,6.148035,-3.214873,-5.100762],[6.705986,-9.507744,-2.043593,-9.777479,8.558238,-6.115095,-5.814594,7.158451,-6.298425,-1.947018],[4.707511,-7.803561,5.017217,3.560122,-6.251306,5.975594,-9.762356,0.943573,6.601671,4.001008],[-4.147886,8.899918,-2.950796,-3.529143,-5.917380,-6.294534,0.571944,-7.439216,-0.209212,7.441538],[-3.744144,-3.549469,-3.766811,9.275129,1.445755,-6.531520,-4.021299,9.356843,7.239311,9.449708],[-6.611026,4.390934,-4.310133,-5.508215,-5.354706,0.114955,5.253808,0.131183,7.909582,5.523807],[3.214224,-7.500115,2.242436,2.499656,-9.356410,7.050405,-2.508179,-6.241231,-1.500117,4.323649],[-5.070151,1.668658,0.022160,7.569632,1.284961,3.266551,9.044744,-2.223382,3.177375,4.241125],[9.649983,-0.018966,9.722322,-4.133899,-1.804336,-4.961020,2.145938,-8.404928,-9.929430,9.482080]],[[-1.884018,9.504149,1.802878,9.693790,1.870808,-4.969190,4.760903,-6.222075,5.756915,-0.866004],[-2.798677,1.920718,0.077481,-2.181643,8.254853,7.591682,0.743920,7.311196,6.867847,4.427205],[8.936335,2.410986,8.804353,-8.390923,-8.258184,-2.523509,7.387096,-6.936634,6.607770,3.624691],[4.746561,-2.324886,8.017081,0.778651,-6.708714,6.032290,-3.756709,-4.789715,-3.229046,-0.684728],[-5.804467,8.134376,-1.030420,-0.923146,7.104375,6.716740,-6.486953,9.801251,9.692207,-6.991351],[7.421214,-9.107881,-0.866681,8.246438,1.962786,-0.809224,-8.650220,9.909536,0.743695,-9.736487],[2.573387,6.834144,-2.722356,5.203894,9.608719,0.772033,9.490822,-3.916082,1.225077,-8.534657],[-3.933129,-4.381538,3.093361,3.869580,2.460855,1.550917,8.103927,-7.462049,7.522445,-1.666147],[-3.362155,6.712548,2.022647,2.679117,-5.862582,9.998694,-7.211196,1.588175,6.794584,4.554560],[1.739631,-0.288609,1.911555,-3.059622,-7.545379,-1.392316,-0.320104,4.458829,7.071335,-4.979171],[-8.347678,-8.304281,0.695677,-9.079264,7.923036,3.511031,-3.466967,6.113056,0.844496,-4.010337],[-4.874810,-2.903552,7.216474,-4.791845,-1.792685,-0.203932,-0.759136,-7.415263,-8.940863,8.797587],[-1.597264,-5.600209,-2.954287,-6.802338,4.959875,0.535192,2.019069,2.205325,4.549771,-4.562407]]], dtype = "float64")#candidate|107|(13, 13, 10)|const|float64
bop_108 = relay.power(uop_105.astype('float32'), relay.reshape(const_107.astype('float32'), relay.shape_of(uop_105))) # shape=(13, 13, 10)
uop_111 = relay.asinh(uop_105.astype('float64')) # shape=(13, 13, 10)
bop_113 = relay.bitwise_or(uop_85.astype('int8'), uop_103.astype('int8')) # shape=(7,)
uop_116 = relay.acosh(uop_78.astype('float64')) # shape=()
bop_118 = relay.right_shift(uop_111.astype('uint64'), uop_76.astype('uint64')) # shape=(13, 13, 10)
uop_121 = relay.log10(uop_105.astype('float64')) # shape=(13, 13, 10)
output = relay.Tuple([uop_98,bop_100,bop_108,bop_113,uop_116,bop_118,uop_121,])
output2 = relay.Tuple([uop_98,bop_100,bop_108,bop_113,uop_116,bop_118,uop_121,])
func_123 = relay.Function([var_87,], output)
mod['func_123'] = func_123
mod = relay.transform.InferType()(mod)
var_124 = relay.var("var_124", dtype = "float64", shape = (7,))#candidate|124|(7,)|var|float64
output = func_123(var_124)
func_125 = relay.Function([var_124], output)
mutated_mod['func_125'] = func_125
mutated_mod = relay.transform.InferType()(mutated_mod)
var_127 = relay.var("var_127", dtype = "float32", shape = (5, 3, 6))#candidate|127|(5, 3, 6)|var|float32
uop_128 = relay.atan(var_127.astype('float32')) # shape=(5, 3, 6)
bop_130 = relay.less_equal(uop_128.astype('bool'), relay.reshape(var_127.astype('bool'), relay.shape_of(uop_128))) # shape=(5, 3, 6)
func_70_call = mod.get_global_var('func_70')
func_73_call = mutated_mod.get_global_var('func_73')
var_134 = relay.var("var_134", dtype = "int16", shape = ())#candidate|134|()|var|int16
const_135 = relay.const([3.556162,1.181074,0.843666], dtype = "float32")#candidate|135|(3,)|const|float32
call_133 = relay.TupleGetItem(func_70_call(relay.reshape(var_134.astype('int16'), []), relay.reshape(const_135.astype('float32'), [3,]), ), 0)
call_136 = relay.TupleGetItem(func_73_call(relay.reshape(var_134.astype('int16'), []), relay.reshape(const_135.astype('float32'), [3,]), ), 0)
uop_137 = relay.acos(var_127.astype('float32')) # shape=(5, 3, 6)
uop_139 = relay.exp(const_135.astype('float32')) # shape=(3,)
bop_141 = relay.not_equal(uop_137.astype('bool'), relay.reshape(uop_128.astype('bool'), relay.shape_of(uop_137))) # shape=(5, 3, 6)
output = relay.Tuple([bop_130,call_133,var_134,uop_139,bop_141,])
output2 = relay.Tuple([bop_130,call_136,var_134,uop_139,bop_141,])
func_144 = relay.Function([var_127,var_134,], output)
mod['func_144'] = func_144
mod = relay.transform.InferType()(mod)
var_145 = relay.var("var_145", dtype = "float32", shape = (5, 3, 6))#candidate|145|(5, 3, 6)|var|float32
var_146 = relay.var("var_146", dtype = "int16", shape = ())#candidate|146|()|var|int16
output = func_144(var_145,var_146,)
func_147 = relay.Function([var_145,var_146,], output)
mutated_mod['func_147'] = func_147
mutated_mod = relay.transform.InferType()(mutated_mod)
var_149 = relay.var("var_149", dtype = "int16", shape = (7,))#candidate|149|(7,)|var|int16
var_150 = relay.var("var_150", dtype = "int16", shape = (7,))#candidate|150|(7,)|var|int16
bop_151 = relay.equal(var_149.astype('bool'), relay.reshape(var_150.astype('bool'), relay.shape_of(var_149))) # shape=(7,)
uop_154 = relay.cosh(var_149.astype('float64')) # shape=(7,)
bop_156 = relay.multiply(uop_154.astype('int64'), relay.reshape(var_150.astype('int64'), relay.shape_of(uop_154))) # shape=(7,)
bop_159 = relay.add(bop_156.astype('int32'), relay.reshape(var_150.astype('int32'), relay.shape_of(bop_156))) # shape=(7,)
uop_162 = relay.cosh(bop_159.astype('float64')) # shape=(7,)
uop_164 = relay.erf(uop_162.astype('float32')) # shape=(7,)
uop_166 = relay.acosh(uop_164.astype('float64')) # shape=(7,)
uop_168 = relay.acosh(uop_166.astype('float32')) # shape=(7,)
bop_170 = relay.logical_and(uop_166.astype('bool'), relay.reshape(bop_151.astype('bool'), relay.shape_of(uop_166))) # shape=(7,)
bop_173 = relay.bitwise_and(uop_154.astype('uint32'), relay.reshape(var_150.astype('uint32'), relay.shape_of(uop_154))) # shape=(7,)
bop_176 = relay.right_shift(uop_168.astype('uint8'), relay.reshape(uop_166.astype('uint8'), relay.shape_of(uop_168))) # shape=(7,)
bop_179 = relay.left_shift(uop_168.astype('int16'), relay.reshape(var_150.astype('int16'), relay.shape_of(uop_168))) # shape=(7,)
output = relay.Tuple([bop_170,bop_173,bop_176,bop_179,])
output2 = relay.Tuple([bop_170,bop_173,bop_176,bop_179,])
func_182 = relay.Function([var_149,var_150,], output)
mod['func_182'] = func_182
mod = relay.transform.InferType()(mod)
var_183 = relay.var("var_183", dtype = "int16", shape = (7,))#candidate|183|(7,)|var|int16
var_184 = relay.var("var_184", dtype = "int16", shape = (7,))#candidate|184|(7,)|var|int16
output = func_182(var_183,var_184,)
func_185 = relay.Function([var_183,var_184,], output)
mutated_mod['func_185'] = func_185
mutated_mod = relay.transform.InferType()(mutated_mod)
const_187 = relay.const([[8,-3],[-9,-2],[9,6],[-4,9],[-10,9],[-4,6],[-2,-9],[-5,-4],[-5,1],[-10,-4],[7,-4],[-10,3],[9,-1]], dtype = "int64")#candidate|187|(13, 2)|const|int64
const_188 = relay.const([[-8,-10],[2,-6],[1,-4],[-10,9],[-2,-9],[1,-2],[-3,4],[5,-3],[-8,-3],[-9,1],[-7,-8],[1,-10],[6,6]], dtype = "int64")#candidate|188|(13, 2)|const|int64
bop_189 = relay.subtract(const_187.astype('int64'), relay.reshape(const_188.astype('int64'), relay.shape_of(const_187))) # shape=(13, 2)
bop_192 = relay.bitwise_and(bop_189.astype('uint16'), relay.reshape(const_187.astype('uint16'), relay.shape_of(bop_189))) # shape=(13, 2)
func_70_call = mod.get_global_var('func_70')
func_73_call = mutated_mod.get_global_var('func_73')
var_196 = relay.var("var_196", dtype = "int16", shape = ())#candidate|196|()|var|int16
var_197 = relay.var("var_197", dtype = "float32", shape = (3,))#candidate|197|(3,)|var|float32
call_195 = relay.TupleGetItem(func_70_call(relay.reshape(var_196.astype('int16'), []), relay.reshape(var_197.astype('float32'), [3,]), ), 1)
call_198 = relay.TupleGetItem(func_73_call(relay.reshape(var_196.astype('int16'), []), relay.reshape(var_197.astype('float32'), [3,]), ), 1)
uop_199 = relay.sinh(bop_192.astype('float64')) # shape=(13, 2)
bop_201 = relay.bitwise_and(bop_192.astype('int8'), relay.reshape(bop_189.astype('int8'), relay.shape_of(bop_192))) # shape=(13, 2)
func_70_call = mod.get_global_var('func_70')
func_73_call = mutated_mod.get_global_var('func_73')
call_204 = relay.TupleGetItem(func_70_call(relay.reshape(var_196.astype('int16'), []), relay.reshape(var_197.astype('float32'), [3,]), ), 0)
call_205 = relay.TupleGetItem(func_73_call(relay.reshape(var_196.astype('int16'), []), relay.reshape(var_197.astype('float32'), [3,]), ), 0)
output = relay.Tuple([call_195,var_196,var_197,uop_199,bop_201,call_204,])
output2 = relay.Tuple([call_198,var_196,var_197,uop_199,bop_201,call_205,])
func_206 = relay.Function([var_196,var_197,], output)
mod['func_206'] = func_206
mod = relay.transform.InferType()(mod)
var_207 = relay.var("var_207", dtype = "int16", shape = ())#candidate|207|()|var|int16
var_208 = relay.var("var_208", dtype = "float32", shape = (3,))#candidate|208|(3,)|var|float32
output = func_206(var_207,var_208,)
func_209 = relay.Function([var_207,var_208,], output)
mutated_mod['func_209'] = func_209
mutated_mod = relay.transform.InferType()(mutated_mod)
var_211 = relay.var("var_211", dtype = "float32", shape = (2, 11, 9))#candidate|211|(2, 11, 9)|var|float32
var_212 = relay.var("var_212", dtype = "float32", shape = (2, 11, 9))#candidate|212|(2, 11, 9)|var|float32
bop_213 = relay.not_equal(var_211.astype('bool'), relay.reshape(var_212.astype('bool'), relay.shape_of(var_211))) # shape=(2, 11, 9)
func_182_call = mod.get_global_var('func_182')
func_185_call = mutated_mod.get_global_var('func_185')
var_217 = relay.var("var_217", dtype = "int16", shape = (7,))#candidate|217|(7,)|var|int16
call_216 = relay.TupleGetItem(func_182_call(relay.reshape(var_217.astype('int16'), [7,]), relay.reshape(var_217.astype('int16'), [7,]), ), 3)
call_218 = relay.TupleGetItem(func_185_call(relay.reshape(var_217.astype('int16'), [7,]), relay.reshape(var_217.astype('int16'), [7,]), ), 3)
bop_219 = relay.multiply(bop_213.astype('int8'), relay.reshape(var_211.astype('int8'), relay.shape_of(bop_213))) # shape=(2, 11, 9)
uop_222 = relay.sqrt(var_217.astype('float32')) # shape=(7,)
uop_224 = relay.rsqrt(uop_222.astype('float64')) # shape=(7,)
var_226 = relay.var("var_226", dtype = "float32", shape = (2, 11, 9))#candidate|226|(2, 11, 9)|var|float32
bop_227 = relay.left_shift(var_212.astype('int64'), relay.reshape(var_226.astype('int64'), relay.shape_of(var_212))) # shape=(2, 11, 9)
uop_230 = relay.sinh(uop_224.astype('float64')) # shape=(7,)
uop_232 = relay.acos(uop_224.astype('float64')) # shape=(7,)
output = relay.Tuple([call_216,bop_219,bop_227,uop_230,uop_232,])
output2 = relay.Tuple([call_218,bop_219,bop_227,uop_230,uop_232,])
func_234 = relay.Function([var_211,var_212,var_217,var_226,], output)
mod['func_234'] = func_234
mod = relay.transform.InferType()(mod)
var_235 = relay.var("var_235", dtype = "float32", shape = (2, 11, 9))#candidate|235|(2, 11, 9)|var|float32
var_236 = relay.var("var_236", dtype = "float32", shape = (2, 11, 9))#candidate|236|(2, 11, 9)|var|float32
var_237 = relay.var("var_237", dtype = "int16", shape = (7,))#candidate|237|(7,)|var|int16
var_238 = relay.var("var_238", dtype = "float32", shape = (2, 11, 9))#candidate|238|(2, 11, 9)|var|float32
output = func_234(var_235,var_236,var_237,var_238,)
func_239 = relay.Function([var_235,var_236,var_237,var_238,], output)
mutated_mod['func_239'] = func_239
mutated_mod = relay.transform.InferType()(mutated_mod)
var_241 = relay.var("var_241", dtype = "int16", shape = (8,))#candidate|241|(8,)|var|int16
const_242 = relay.const([6,-9,10,-4,-5,-7,3,1], dtype = "int16")#candidate|242|(8,)|const|int16
bop_243 = relay.greater(var_241.astype('bool'), relay.reshape(const_242.astype('bool'), relay.shape_of(var_241))) # shape=(8,)
bop_246 = relay.not_equal(const_242.astype('bool'), relay.reshape(var_241.astype('bool'), relay.shape_of(const_242))) # shape=(8,)
var_249 = relay.var("var_249", dtype = "int16", shape = (8,))#candidate|249|(8,)|var|int16
bop_250 = relay.bitwise_xor(var_241.astype('uint64'), relay.reshape(var_249.astype('uint64'), relay.shape_of(var_241))) # shape=(8,)
uop_253 = relay.log(bop_246.astype('float32')) # shape=(8,)
uop_255 = relay.sinh(uop_253.astype('float64')) # shape=(8,)
var_257 = relay.var("var_257", dtype = "float32", shape = (8,))#candidate|257|(8,)|var|float32
bop_258 = relay.subtract(uop_253.astype('uint64'), relay.reshape(var_257.astype('uint64'), relay.shape_of(uop_253))) # shape=(8,)
uop_261 = relay.atan(uop_255.astype('float64')) # shape=(8,)
const_263 = relay.const([1.817577,8.811768,7.251044,3.957128,-9.326616,9.410811,-4.093214,9.666260], dtype = "float64")#candidate|263|(8,)|const|float64
bop_264 = relay.greater(uop_261.astype('bool'), relay.reshape(const_263.astype('bool'), relay.shape_of(uop_261))) # shape=(8,)
uop_267 = relay.cosh(uop_255.astype('float64')) # shape=(8,)
bop_269 = relay.less(bop_264.astype('bool'), relay.reshape(bop_243.astype('bool'), relay.shape_of(bop_264))) # shape=(8,)
uop_272 = relay.acos(uop_261.astype('float32')) # shape=(8,)
bop_274 = relay.logical_and(uop_272.astype('bool'), relay.reshape(const_263.astype('bool'), relay.shape_of(uop_272))) # shape=(8,)
bop_277 = relay.maximum(uop_272.astype('uint64'), relay.reshape(uop_267.astype('uint64'), relay.shape_of(uop_272))) # shape=(8,)
output = relay.Tuple([bop_250,bop_258,bop_269,bop_274,bop_277,])
output2 = relay.Tuple([bop_250,bop_258,bop_269,bop_274,bop_277,])
func_280 = relay.Function([var_241,var_249,var_257,], output)
mod['func_280'] = func_280
mod = relay.transform.InferType()(mod)
mutated_mod['func_280'] = func_280
mutated_mod = relay.transform.InferType()(mutated_mod)
func_280_call = mutated_mod.get_global_var('func_280')
var_282 = relay.var("var_282", dtype = "int16", shape = (8,))#candidate|282|(8,)|var|int16
var_283 = relay.var("var_283", dtype = "int16", shape = (8,))#candidate|283|(8,)|var|int16
var_284 = relay.var("var_284", dtype = "float32", shape = (8,))#candidate|284|(8,)|var|float32
call_281 = func_280_call(var_282,var_283,var_284,)
output = call_281
func_285 = relay.Function([var_282,var_283,var_284,], output)
mutated_mod['func_285'] = func_285
mutated_mod = relay.transform.InferType()(mutated_mod)
const_287 = relay.const([[[-1.663635],[5.438879],[8.946207],[-5.371327],[-6.074654],[0.634421]],[[-6.045735],[9.374391],[4.684023],[1.556352],[-4.463378],[-7.048461]],[[1.734652],[1.140384],[8.362971],[5.779612],[-9.110830],[2.779024]],[[4.203816],[5.777038],[-8.998771],[-9.580147],[3.070095],[9.733710]],[[6.742985],[-5.765260],[5.676966],[-2.232830],[5.196968],[0.519099]],[[-4.500586],[-9.722867],[8.008313],[-4.480493],[-4.375732],[-4.058302]],[[7.744655],[7.124005],[9.161563],[5.574421],[4.285753],[-4.713127]],[[-4.587428],[-9.250516],[-1.864851],[8.686598],[-0.370773],[8.800891]],[[3.867663],[-3.742695],[-8.788468],[-6.729967],[8.454991],[-9.805161]],[[7.588760],[1.912915],[9.560973],[1.357209],[-1.862845],[0.123389]],[[9.415310],[0.765861],[6.855604],[0.590787],[-9.763394],[-0.330909]],[[-4.091513],[-3.926557],[-6.659830],[-3.275997],[9.920459],[-5.239348]],[[-4.833163],[-7.308220],[3.930313],[2.325639],[-8.509928],[-1.382369]],[[-2.256411],[-6.640864],[7.702684],[8.400001],[-9.373896],[3.391637]]], dtype = "float64")#candidate|287|(14, 6, 1)|const|float64
uop_288 = relay.atanh(const_287.astype('float64')) # shape=(14, 6, 1)
bop_290 = relay.less(uop_288.astype('bool'), relay.reshape(const_287.astype('bool'), relay.shape_of(uop_288))) # shape=(14, 6, 1)
uop_293 = relay.cos(bop_290.astype('float32')) # shape=(14, 6, 1)
bop_295 = relay.floor_divide(uop_288.astype('float32'), relay.reshape(const_287.astype('float32'), relay.shape_of(uop_288))) # shape=(14, 6, 1)
uop_298 = relay.acosh(bop_290.astype('float64')) # shape=(14, 6, 1)
bop_300 = relay.bitwise_and(uop_293.astype('uint64'), relay.reshape(bop_295.astype('uint64'), relay.shape_of(uop_293))) # shape=(14, 6, 1)
uop_303 = relay.acosh(bop_300.astype('float64')) # shape=(14, 6, 1)
output = relay.Tuple([uop_298,uop_303,])
output2 = relay.Tuple([uop_298,uop_303,])
func_305 = relay.Function([], output)
mod['func_305'] = func_305
mod = relay.transform.InferType()(mod)
mutated_mod['func_305'] = func_305
mutated_mod = relay.transform.InferType()(mutated_mod)
func_305_call = mutated_mod.get_global_var('func_305')
call_306 = func_305_call()
output = call_306
func_307 = relay.Function([], output)
mutated_mod['func_307'] = func_307
mutated_mod = relay.transform.InferType()(mutated_mod)
var_308 = relay.var("var_308", dtype = "float32", shape = ())#candidate|308|()|var|float32
var_309 = relay.var("var_309", dtype = "float32", shape = (10, 11))#candidate|309|(10, 11)|var|float32
bop_310 = relay.greater_equal(var_308.astype('bool'), var_309.astype('bool')) # shape=(10, 11)
var_313 = relay.var("var_313", dtype = "bool", shape = (10, 11))#candidate|313|(10, 11)|var|bool
bop_314 = relay.logical_xor(bop_310.astype('int16'), relay.reshape(var_313.astype('int16'), relay.shape_of(bop_310))) # shape=(10, 11)
uop_317 = relay.acosh(var_313.astype('float64')) # shape=(10, 11)
bop_319 = relay.logical_xor(uop_317.astype('uint8'), var_308.astype('uint8')) # shape=(10, 11)
var_322 = relay.var("var_322", dtype = "float64", shape = (10, 11))#candidate|322|(10, 11)|var|float64
bop_323 = relay.power(uop_317.astype('float64'), relay.reshape(var_322.astype('float64'), relay.shape_of(uop_317))) # shape=(10, 11)
output = relay.Tuple([bop_314,bop_319,bop_323,])
output2 = relay.Tuple([bop_314,bop_319,bop_323,])
func_326 = relay.Function([var_308,var_309,var_313,var_322,], output)
mod['func_326'] = func_326
mod = relay.transform.InferType()(mod)
var_327 = relay.var("var_327", dtype = "float32", shape = ())#candidate|327|()|var|float32
var_328 = relay.var("var_328", dtype = "float32", shape = (10, 11))#candidate|328|(10, 11)|var|float32
var_329 = relay.var("var_329", dtype = "bool", shape = (10, 11))#candidate|329|(10, 11)|var|bool
var_330 = relay.var("var_330", dtype = "float64", shape = (10, 11))#candidate|330|(10, 11)|var|float64
output = func_326(var_327,var_328,var_329,var_330,)
func_331 = relay.Function([var_327,var_328,var_329,var_330,], output)
mutated_mod['func_331'] = func_331
mutated_mod = relay.transform.InferType()(mutated_mod)
var_333 = relay.var("var_333", dtype = "uint16", shape = (13,))#candidate|333|(13,)|var|uint16
var_334 = relay.var("var_334", dtype = "uint16", shape = (13,))#candidate|334|(13,)|var|uint16
bop_335 = relay.bitwise_and(var_333.astype('uint16'), relay.reshape(var_334.astype('uint16'), relay.shape_of(var_333))) # shape=(13,)
uop_338 = relay.exp(bop_335.astype('float64')) # shape=(13,)
bop_340 = relay.subtract(uop_338.astype('uint8'), relay.reshape(bop_335.astype('uint8'), relay.shape_of(uop_338))) # shape=(13,)
uop_343 = relay.sqrt(uop_338.astype('float32')) # shape=(13,)
bop_345 = relay.floor_divide(uop_338.astype('float64'), relay.reshape(uop_343.astype('float64'), relay.shape_of(uop_338))) # shape=(13,)
output = relay.Tuple([bop_340,bop_345,])
output2 = relay.Tuple([bop_340,bop_345,])
func_348 = relay.Function([var_333,var_334,], output)
mod['func_348'] = func_348
mod = relay.transform.InferType()(mod)
var_349 = relay.var("var_349", dtype = "uint16", shape = (13,))#candidate|349|(13,)|var|uint16
var_350 = relay.var("var_350", dtype = "uint16", shape = (13,))#candidate|350|(13,)|var|uint16
output = func_348(var_349,var_350,)
func_351 = relay.Function([var_349,var_350,], output)
mutated_mod['func_351'] = func_351
mutated_mod = relay.transform.InferType()(mutated_mod)
var_353 = relay.var("var_353", dtype = "int8", shape = ())#candidate|353|()|var|int8
var_354 = relay.var("var_354", dtype = "int8", shape = ())#candidate|354|()|var|int8
bop_355 = relay.multiply(var_353.astype('int8'), var_354.astype('int8')) # shape=()
output = relay.Tuple([bop_355,])
output2 = relay.Tuple([bop_355,])
F = relay.Function([var_353,var_354,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_353,var_354,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
	relay.transform.DefuseOps(),
	relay.transform.SimplifyExpr(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_353= np.array(-3, dtype='int8')
module1.set_input('var_353', input_353)
input_354= np.array(-6, dtype='int8')
module1.set_input('var_354', input_354)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_353, input_354, )
res3 = intrp3.evaluate()(input_353, input_354, )
res4 = intrp4.evaluate()(input_353, input_354, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input('var_353', input_353)
module5.set_input('var_354', input_354)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_353, input_354, )
res7 = intrp7.evaluate()(input_353, input_354, )
res8 = intrp8.evaluate()(input_353, input_354, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input('var_353', input_353)
module9.set_input('var_354', input_354)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_353, input_354, )
res11 = intrp11.evaluate()(input_353, input_354, )
res12 = intrp12.evaluate()(input_353, input_354, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input('var_353', input_353)
module13.set_input('var_354', input_354)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_353, input_354, )
res15 = intrp15.evaluate()(input_353, input_354, )
res16 = intrp16.evaluate()(input_353, input_354, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input('var_353', input_353)
module17.set_input('var_354', input_354)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_353, input_354, )
res19 = intrp19.evaluate()(input_353, input_354, )
res20 = intrp20.evaluate()(input_353, input_354, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input('var_353', input_353)
module21.set_input('var_354', input_354)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_353, input_354, )
res23 = intrp23.evaluate()(input_353, input_354, )
res24 = intrp24.evaluate()(input_353, input_354, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''47: TVMFuncCall
46: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
45: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
44: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
43: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
42: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
41: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
40: tvm::transform::Pass::operator()(tvm::IRModule) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
36: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
35: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
34: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
33: tvm::transform::Pass::operator()(tvm::IRModule) const
32: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
31: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
30: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
29: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
28: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
27: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
26: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
25: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
24: _ZN3tvm5relay9transform22Devic
23: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
22: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
21: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
20: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
19: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
16: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
15: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
12: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
9: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
8: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
7: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
6: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
5: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
3: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
2: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
1: tvm::relay::tec::PrimFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
0: tvm::relay::tec::ScheduleBuilder::Create(tvm::relay::Function const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)

'''