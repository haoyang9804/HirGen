import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (3, 6, 3))#candidate|0|(3, 6, 3)|var|float64
uop_1 = relay.acos(var_0.astype('float64')) # shape=(3, 6, 3)
uop_3 = relay.log(uop_1.astype('float32')) # shape=(3, 6, 3)
var_5 = relay.var("var_5", dtype = "float32", shape = (3, 6, 3))#candidate|5|(3, 6, 3)|var|float32
bop_6 = relay.minimum(uop_3.astype('int64'), relay.reshape(var_5.astype('int64'), relay.shape_of(uop_3))) # shape=(3, 6, 3)
uop_9 = relay.sqrt(uop_3.astype('float32')) # shape=(3, 6, 3)
bop_11 = relay.bitwise_and(uop_3.astype('int64'), relay.reshape(var_0.astype('int64'), relay.shape_of(uop_3))) # shape=(3, 6, 3)
uop_14 = relay.cos(uop_9.astype('float32')) # shape=(3, 6, 3)
bop_16 = relay.floor_divide(uop_14.astype('float32'), relay.reshape(uop_1.astype('float32'), relay.shape_of(uop_14))) # shape=(3, 6, 3)
output = relay.Tuple([bop_6,bop_11,bop_16,])
output2 = relay.Tuple([bop_6,bop_11,bop_16,])
func_19 = relay.Function([var_0,var_5,], output)
mod['func_19'] = func_19
mod = relay.transform.InferType()(mod)
mutated_mod['func_19'] = func_19
mutated_mod = relay.transform.InferType()(mutated_mod)
func_19_call = mutated_mod.get_global_var('func_19')
var_21 = relay.var("var_21", dtype = "float64", shape = (3, 6, 3))#candidate|21|(3, 6, 3)|var|float64
var_22 = relay.var("var_22", dtype = "float32", shape = (3, 6, 3))#candidate|22|(3, 6, 3)|var|float32
call_20 = func_19_call(var_21,var_22,)
output = call_20
func_23 = relay.Function([var_21,var_22,], output)
mutated_mod['func_23'] = func_23
mutated_mod = relay.transform.InferType()(mutated_mod)
const_25 = relay.const([7.579575,6.351381,-3.093368,-7.817991], dtype = "float32")#candidate|25|(4,)|const|float32
uop_26 = relay.erf(const_25.astype('float32')) # shape=(4,)
bop_28 = relay.less(const_25.astype('bool'), relay.reshape(uop_26.astype('bool'), relay.shape_of(const_25))) # shape=(4,)
bop_31 = relay.logical_or(const_25.astype('bool'), relay.reshape(bop_28.astype('bool'), relay.shape_of(const_25))) # shape=(4,)
bop_34 = relay.bitwise_and(uop_26.astype('int8'), relay.reshape(bop_31.astype('int8'), relay.shape_of(uop_26))) # shape=(4,)
uop_37 = relay.sinh(const_25.astype('float64')) # shape=(4,)
uop_39 = relay.asin(const_25.astype('float32')) # shape=(4,)
bop_41 = relay.multiply(uop_39.astype('int64'), relay.reshape(bop_31.astype('int64'), relay.shape_of(uop_39))) # shape=(4,)
uop_44 = relay.log10(const_25.astype('float64')) # shape=(4,)
bop_46 = relay.not_equal(uop_44.astype('bool'), relay.reshape(uop_39.astype('bool'), relay.shape_of(uop_44))) # shape=(4,)
uop_49 = relay.sigmoid(const_25.astype('float64')) # shape=(4,)
const_51 = relay.const([4.158152,-7.354960,-7.703928,-4.619804], dtype = "float32")#candidate|51|(4,)|const|float32
bop_52 = relay.subtract(uop_26.astype('uint8'), relay.reshape(const_51.astype('uint8'), relay.shape_of(uop_26))) # shape=(4,)
func_19_call = mod.get_global_var('func_19')
func_23_call = mutated_mod.get_global_var('func_23')
var_56 = relay.var("var_56", dtype = "float64", shape = (54,))#candidate|56|(54,)|var|float64
call_55 = relay.TupleGetItem(func_19_call(relay.reshape(var_56.astype('float64'), [3, 6, 3]), relay.reshape(var_56.astype('float32'), [3, 6, 3]), ), 0)
call_57 = relay.TupleGetItem(func_23_call(relay.reshape(var_56.astype('float64'), [3, 6, 3]), relay.reshape(var_56.astype('float32'), [3, 6, 3]), ), 0)
uop_58 = relay.rsqrt(call_55.astype('float64')) # shape=(3, 6, 3)
uop_60 = relay.rsqrt(call_57.astype('float64')) # shape=(3, 6, 3)
uop_61 = relay.sqrt(bop_41.astype('float32')) # shape=(4,)
var_63 = relay.var("var_63", dtype = "float32", shape = (4,))#candidate|63|(4,)|var|float32
bop_64 = relay.bitwise_xor(uop_61.astype('int16'), relay.reshape(var_63.astype('int16'), relay.shape_of(uop_61))) # shape=(4,)
bop_67 = relay.greater(bop_64.astype('bool'), relay.reshape(bop_46.astype('bool'), relay.shape_of(bop_64))) # shape=(4,)
var_70 = relay.var("var_70", dtype = "int64", shape = (4,))#candidate|70|(4,)|var|int64
bop_71 = relay.left_shift(bop_41.astype('int64'), relay.reshape(var_70.astype('int64'), relay.shape_of(bop_41))) # shape=(4,)
uop_74 = relay.acos(bop_64.astype('float32')) # shape=(4,)
bop_76 = relay.maximum(bop_67.astype('int8'), relay.reshape(uop_74.astype('int8'), relay.shape_of(bop_67))) # shape=(4,)
uop_79 = relay.asinh(uop_74.astype('float32')) # shape=(4,)
uop_81 = relay.tan(uop_79.astype('float64')) # shape=(4,)
uop_83 = relay.atanh(bop_67.astype('float32')) # shape=(4,)
var_85 = relay.var("var_85", dtype = "float32", shape = (4,))#candidate|85|(4,)|var|float32
bop_86 = relay.left_shift(uop_79.astype('int32'), relay.reshape(var_85.astype('int32'), relay.shape_of(uop_79))) # shape=(4,)
var_89 = relay.var("var_89", dtype = "float64", shape = (4,))#candidate|89|(4,)|var|float64
bop_90 = relay.right_shift(uop_81.astype('uint16'), relay.reshape(var_89.astype('uint16'), relay.shape_of(uop_81))) # shape=(4,)
uop_93 = relay.asin(uop_83.astype('float32')) # shape=(4,)
bop_95 = relay.bitwise_xor(uop_81.astype('uint32'), relay.reshape(bop_34.astype('uint32'), relay.shape_of(uop_81))) # shape=(4,)
uop_98 = relay.log(bop_90.astype('float64')) # shape=(4,)
bop_100 = relay.divide(uop_98.astype('float64'), relay.reshape(uop_81.astype('float64'), relay.shape_of(uop_98))) # shape=(4,)
bop_103 = relay.bitwise_xor(bop_100.astype('uint64'), relay.reshape(bop_76.astype('uint64'), relay.shape_of(bop_100))) # shape=(4,)
uop_106 = relay.acosh(uop_93.astype('float32')) # shape=(4,)
var_108 = relay.var("var_108", dtype = "float64", shape = (4,))#candidate|108|(4,)|var|float64
bop_109 = relay.multiply(uop_98.astype('int32'), relay.reshape(var_108.astype('int32'), relay.shape_of(uop_98))) # shape=(4,)
var_112 = relay.var("var_112", dtype = "uint16", shape = (4,))#candidate|112|(4,)|var|uint16
bop_113 = relay.left_shift(bop_90.astype('uint32'), relay.reshape(var_112.astype('uint32'), relay.shape_of(bop_90))) # shape=(4,)
bop_116 = relay.floor_divide(bop_103.astype('float64'), relay.reshape(bop_86.astype('float64'), relay.shape_of(bop_103))) # shape=(4,)
const_119 = relay.const([3,10,3,10], dtype = "int32")#candidate|119|(4,)|const|int32
bop_120 = relay.multiply(bop_109.astype('uint32'), relay.reshape(const_119.astype('uint32'), relay.shape_of(bop_109))) # shape=(4,)
var_123 = relay.var("var_123", dtype = "float32", shape = (4,))#candidate|123|(4,)|var|float32
bop_124 = relay.bitwise_and(uop_61.astype('uint16'), relay.reshape(var_123.astype('uint16'), relay.shape_of(uop_61))) # shape=(4,)
uop_127 = relay.sigmoid(bop_109.astype('float64')) # shape=(4,)
var_129 = relay.var("var_129", dtype = "float64", shape = (4,))#candidate|129|(4,)|var|float64
bop_130 = relay.right_shift(uop_127.astype('int8'), relay.reshape(var_129.astype('int8'), relay.shape_of(uop_127))) # shape=(4,)
uop_133 = relay.exp(uop_127.astype('float64')) # shape=(4,)
bop_135 = relay.bitwise_xor(bop_124.astype('int32'), relay.reshape(bop_109.astype('int32'), relay.shape_of(bop_124))) # shape=(4,)
func_19_call = mod.get_global_var('func_19')
func_23_call = mutated_mod.get_global_var('func_23')
call_138 = relay.TupleGetItem(func_19_call(relay.reshape(var_56.astype('float64'), [3, 6, 3]), relay.reshape(call_55.astype('float32'), [3, 6, 3]), ), 2)
call_139 = relay.TupleGetItem(func_23_call(relay.reshape(var_56.astype('float64'), [3, 6, 3]), relay.reshape(call_55.astype('float32'), [3, 6, 3]), ), 2)
uop_140 = relay.acos(uop_127.astype('float64')) # shape=(4,)
bop_142 = relay.greater_equal(uop_140.astype('bool'), relay.reshape(var_70.astype('bool'), relay.shape_of(uop_140))) # shape=(4,)
uop_145 = relay.asin(bop_95.astype('float32')) # shape=(4,)
uop_147 = relay.sinh(bop_76.astype('float64')) # shape=(4,)
bop_149 = relay.subtract(bop_86.astype('int32'), relay.reshape(uop_79.astype('int32'), relay.shape_of(bop_86))) # shape=(4,)
output = relay.Tuple([uop_37,uop_49,bop_52,var_56,uop_58,bop_71,uop_106,bop_113,bop_116,bop_120,bop_130,uop_133,bop_135,call_138,bop_142,uop_145,uop_147,bop_149,])
output2 = relay.Tuple([uop_37,uop_49,bop_52,var_56,uop_60,bop_71,uop_106,bop_113,bop_116,bop_120,bop_130,uop_133,bop_135,call_139,bop_142,uop_145,uop_147,bop_149,])
func_152 = relay.Function([var_56,var_63,var_70,var_85,var_89,var_108,var_112,var_123,var_129,], output)
mod['func_152'] = func_152
mod = relay.transform.InferType()(mod)
var_153 = relay.var("var_153", dtype = "float64", shape = (54,))#candidate|153|(54,)|var|float64
var_154 = relay.var("var_154", dtype = "float32", shape = (4,))#candidate|154|(4,)|var|float32
var_155 = relay.var("var_155", dtype = "int64", shape = (4,))#candidate|155|(4,)|var|int64
var_156 = relay.var("var_156", dtype = "float32", shape = (4,))#candidate|156|(4,)|var|float32
var_157 = relay.var("var_157", dtype = "float64", shape = (4,))#candidate|157|(4,)|var|float64
var_158 = relay.var("var_158", dtype = "float64", shape = (4,))#candidate|158|(4,)|var|float64
var_159 = relay.var("var_159", dtype = "uint16", shape = (4,))#candidate|159|(4,)|var|uint16
var_160 = relay.var("var_160", dtype = "float32", shape = (4,))#candidate|160|(4,)|var|float32
var_161 = relay.var("var_161", dtype = "float64", shape = (4,))#candidate|161|(4,)|var|float64
output = func_152(var_153,var_154,var_155,var_156,var_157,var_158,var_159,var_160,var_161,)
func_162 = relay.Function([var_153,var_154,var_155,var_156,var_157,var_158,var_159,var_160,var_161,], output)
mutated_mod['func_162'] = func_162
mutated_mod = relay.transform.InferType()(mutated_mod)
var_164 = relay.var("var_164", dtype = "float64", shape = (3, 4, 14))#candidate|164|(3, 4, 14)|var|float64
uop_165 = relay.sinh(var_164.astype('float64')) # shape=(3, 4, 14)
bop_167 = relay.bitwise_and(var_164.astype('int32'), relay.reshape(uop_165.astype('int32'), relay.shape_of(var_164))) # shape=(3, 4, 14)
var_170 = relay.var("var_170", dtype = "int32", shape = (3, 4, 14))#candidate|170|(3, 4, 14)|var|int32
bop_171 = relay.minimum(bop_167.astype('int32'), relay.reshape(var_170.astype('int32'), relay.shape_of(bop_167))) # shape=(3, 4, 14)
var_174 = relay.var("var_174", dtype = "float64", shape = (3, 4, 14))#candidate|174|(3, 4, 14)|var|float64
bop_175 = relay.add(uop_165.astype('int16'), relay.reshape(var_174.astype('int16'), relay.shape_of(uop_165))) # shape=(3, 4, 14)
bop_178 = relay.subtract(var_164.astype('uint8'), relay.reshape(uop_165.astype('uint8'), relay.shape_of(var_164))) # shape=(3, 4, 14)
uop_181 = relay.log(bop_178.astype('float32')) # shape=(3, 4, 14)
uop_183 = relay.sinh(bop_178.astype('float32')) # shape=(3, 4, 14)
bop_185 = relay.divide(uop_183.astype('float64'), relay.reshape(var_170.astype('float64'), relay.shape_of(uop_183))) # shape=(3, 4, 14)
uop_188 = relay.log10(bop_185.astype('float32')) # shape=(3, 4, 14)
uop_190 = relay.exp(uop_183.astype('float32')) # shape=(3, 4, 14)
func_19_call = mod.get_global_var('func_19')
func_23_call = mutated_mod.get_global_var('func_23')
var_193 = relay.var("var_193", dtype = "float64", shape = (54,))#candidate|193|(54,)|var|float64
call_192 = relay.TupleGetItem(func_19_call(relay.reshape(var_193.astype('float64'), [3, 6, 3]), relay.reshape(var_193.astype('float32'), [3, 6, 3]), ), 1)
call_194 = relay.TupleGetItem(func_23_call(relay.reshape(var_193.astype('float64'), [3, 6, 3]), relay.reshape(var_193.astype('float32'), [3, 6, 3]), ), 1)
uop_195 = relay.asinh(uop_183.astype('float64')) # shape=(3, 4, 14)
uop_197 = relay.log10(uop_190.astype('float64')) # shape=(3, 4, 14)
bop_199 = relay.bitwise_or(uop_197.astype('int16'), relay.reshape(uop_195.astype('int16'), relay.shape_of(uop_197))) # shape=(3, 4, 14)
bop_202 = relay.power(uop_197.astype('float64'), relay.reshape(var_170.astype('float64'), relay.shape_of(uop_197))) # shape=(3, 4, 14)
output = relay.Tuple([bop_171,bop_175,uop_181,uop_188,call_192,var_193,bop_199,bop_202,])
output2 = relay.Tuple([bop_171,bop_175,uop_181,uop_188,call_194,var_193,bop_199,bop_202,])
func_205 = relay.Function([var_164,var_170,var_174,var_193,], output)
mod['func_205'] = func_205
mod = relay.transform.InferType()(mod)
mutated_mod['func_205'] = func_205
mutated_mod = relay.transform.InferType()(mutated_mod)
func_205_call = mutated_mod.get_global_var('func_205')
var_207 = relay.var("var_207", dtype = "float64", shape = (3, 4, 14))#candidate|207|(3, 4, 14)|var|float64
var_208 = relay.var("var_208", dtype = "int32", shape = (3, 4, 14))#candidate|208|(3, 4, 14)|var|int32
var_209 = relay.var("var_209", dtype = "float64", shape = (3, 4, 14))#candidate|209|(3, 4, 14)|var|float64
var_210 = relay.var("var_210", dtype = "float64", shape = (54,))#candidate|210|(54,)|var|float64
call_206 = func_205_call(var_207,var_208,var_209,var_210,)
output = call_206
func_211 = relay.Function([var_207,var_208,var_209,var_210,], output)
mutated_mod['func_211'] = func_211
mutated_mod = relay.transform.InferType()(mutated_mod)
var_213 = relay.var("var_213", dtype = "float64", shape = ())#candidate|213|()|var|float64
uop_214 = relay.cosh(var_213.astype('float64')) # shape=()
bop_216 = relay.right_shift(uop_214.astype('int32'), var_213.astype('int32')) # shape=()
bop_219 = relay.subtract(var_213.astype('float32'), uop_214.astype('float32')) # shape=()
uop_222 = relay.acos(uop_214.astype('float32')) # shape=()
bop_224 = relay.bitwise_and(uop_222.astype('int32'), bop_219.astype('int32')) # shape=()
func_19_call = mod.get_global_var('func_19')
func_23_call = mutated_mod.get_global_var('func_23')
const_228 = relay.const([-2.727835,3.984774,5.412767,-6.055136,-8.932629,-1.264988,-9.455776,3.052088,8.204509,-2.757058,8.992701,-6.520262,9.833415,-2.947699,-0.733914,-3.573992,-3.774856,-2.094553,2.843975,-0.224457,-7.998211,-6.962752,1.732499,2.654229,4.729148,7.383147,4.153208,7.643736,-6.280582,4.369449,4.262866,9.123623,0.847909,5.352171,-4.049059,-9.438043,-9.936067,-8.509519,-3.436318,-3.008372,5.944593,-1.991710,7.410128,2.607597,-8.792101,4.734945,-8.323448,7.384306,-9.209061,-3.962116,3.205699,2.961131,4.612502,3.876757], dtype = "float64")#candidate|228|(54,)|const|float64
call_227 = relay.TupleGetItem(func_19_call(relay.reshape(const_228.astype('float64'), [3, 6, 3]), relay.reshape(const_228.astype('float32'), [3, 6, 3]), ), 2)
call_229 = relay.TupleGetItem(func_23_call(relay.reshape(const_228.astype('float64'), [3, 6, 3]), relay.reshape(const_228.astype('float32'), [3, 6, 3]), ), 2)
var_230 = relay.var("var_230", dtype = "float32", shape = (1, 8, 16))#candidate|230|(1, 8, 16)|var|float32
bop_231 = relay.logical_and(uop_222.astype('bool'), var_230.astype('bool')) # shape=(1, 8, 16)
var_234 = relay.var("var_234", dtype = "float32", shape = (11, 15))#candidate|234|(11, 15)|var|float32
bop_235 = relay.add(uop_222.astype('int32'), var_234.astype('int32')) # shape=(11, 15)
output = relay.Tuple([bop_216,bop_224,call_227,const_228,bop_231,bop_235,])
output2 = relay.Tuple([bop_216,bop_224,call_229,const_228,bop_231,bop_235,])
func_238 = relay.Function([var_213,var_230,var_234,], output)
mod['func_238'] = func_238
mod = relay.transform.InferType()(mod)
var_239 = relay.var("var_239", dtype = "float64", shape = ())#candidate|239|()|var|float64
var_240 = relay.var("var_240", dtype = "float32", shape = (1, 8, 16))#candidate|240|(1, 8, 16)|var|float32
var_241 = relay.var("var_241", dtype = "float32", shape = (11, 15))#candidate|241|(11, 15)|var|float32
output = func_238(var_239,var_240,var_241,)
func_242 = relay.Function([var_239,var_240,var_241,], output)
mutated_mod['func_242'] = func_242
mutated_mod = relay.transform.InferType()(mutated_mod)
const_244 = relay.const(-0.315964, dtype = "float32")#candidate|244|()|const|float32
uop_245 = relay.log10(const_244.astype('float32')) # shape=()
output = uop_245
output2 = uop_245
func_247 = relay.Function([], output)
mod['func_247'] = func_247
mod = relay.transform.InferType()(mod)
output = func_247()
func_248 = relay.Function([], output)
mutated_mod['func_248'] = func_248
mutated_mod = relay.transform.InferType()(mutated_mod)
var_249 = relay.var("var_249", dtype = "float32", shape = ())#candidate|249|()|var|float32
uop_250 = relay.erf(var_249.astype('float32')) # shape=()
bop_252 = relay.divide(uop_250.astype('float32'), var_249.astype('float32')) # shape=()
bop_255 = relay.subtract(uop_250.astype('float32'), bop_252.astype('float32')) # shape=()
uop_258 = relay.sigmoid(var_249.astype('float32')) # shape=()
bop_260 = relay.logical_xor(var_249.astype('int16'), uop_258.astype('int16')) # shape=()
uop_263 = relay.log10(bop_255.astype('float64')) # shape=()
uop_265 = relay.asin(uop_250.astype('float32')) # shape=()
var_267 = relay.var("var_267", dtype = "float64", shape = ())#candidate|267|()|var|float64
bop_268 = relay.less_equal(uop_263.astype('bool'), var_267.astype('bool')) # shape=()
const_271 = relay.const(True, dtype = "bool")#candidate|271|()|const|bool
bop_272 = relay.greater_equal(bop_268.astype('bool'), const_271.astype('bool')) # shape=()
uop_275 = relay.sin(var_249.astype('float32')) # shape=()
bop_277 = relay.floor_mod(uop_263.astype('float64'), uop_258.astype('float64')) # shape=()
uop_280 = relay.atanh(uop_258.astype('float32')) # shape=()
var_282 = relay.var("var_282", dtype = "float64", shape = (16,))#candidate|282|(16,)|var|float64
bop_283 = relay.not_equal(var_267.astype('bool'), var_282.astype('bool')) # shape=(16,)
bop_286 = relay.left_shift(bop_268.astype('int8'), const_271.astype('int8')) # shape=()
var_289 = relay.var("var_289", dtype = "int16", shape = ())#candidate|289|()|var|int16
bop_290 = relay.divide(bop_260.astype('float64'), var_289.astype('float64')) # shape=()
bop_293 = relay.divide(uop_280.astype('float64'), bop_260.astype('float64')) # shape=()
const_296 = relay.const([-3.092317,-2.504399,9.491237,0.083937,-8.401683,3.257153,-5.155867,-2.562905,-3.003281,-3.923148,-9.542258,-0.654638,6.590295,1.096349,-3.033181], dtype = "float32")#candidate|296|(15,)|const|float32
bop_297 = relay.mod(uop_275.astype('float64'), const_296.astype('float64')) # shape=(15,)
uop_300 = relay.atanh(bop_252.astype('float32')) # shape=()
uop_302 = relay.atanh(uop_275.astype('float64')) # shape=()
bop_304 = relay.maximum(bop_268.astype('uint64'), bop_286.astype('uint64')) # shape=()
uop_307 = relay.log10(bop_293.astype('float32')) # shape=()
uop_309 = relay.asinh(uop_307.astype('float32')) # shape=()
bop_311 = relay.floor_mod(bop_293.astype('float64'), uop_307.astype('float64')) # shape=()
uop_314 = relay.asinh(bop_277.astype('float32')) # shape=()
bop_316 = relay.greater(uop_314.astype('bool'), var_249.astype('bool')) # shape=()
bop_319 = relay.mod(uop_309.astype('float64'), bop_304.astype('float64')) # shape=()
var_322 = relay.var("var_322", dtype = "float64", shape = (6, 4))#candidate|322|(6, 4)|var|float64
bop_323 = relay.left_shift(bop_319.astype('int16'), var_322.astype('int16')) # shape=(6, 4)
uop_326 = relay.tan(bop_319.astype('float64')) # shape=()
output = relay.Tuple([uop_265,bop_272,bop_283,bop_290,bop_297,uop_300,uop_302,bop_311,bop_316,bop_323,uop_326,])
output2 = relay.Tuple([uop_265,bop_272,bop_283,bop_290,bop_297,uop_300,uop_302,bop_311,bop_316,bop_323,uop_326,])
F = relay.Function([var_249,var_267,var_282,var_289,var_322,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_249,var_267,var_282,var_289,var_322,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_249= np.array(5.617669, dtype='float32')
module1.set_input('var_249', input_249)
input_267= np.array(-0.173133, dtype='float64')
module1.set_input('var_267', input_267)
input_282= np.array([4.273878,6.778908,9.989204,-0.970675,3.362362,3.196183,-4.450859,-6.637344,-0.059958,-3.657104,9.762134,7.061470,8.918232,9.792611,-4.832998,-3.909062], dtype='float64')
module1.set_input('var_282', input_282)
input_289= np.array(-2, dtype='int16')
module1.set_input('var_289', input_289)
input_322= np.array([[2.847613,3.780615,2.098214,-1.641934],[-8.066456,-3.667401,-8.009819,-6.253437],[-2.261648,-1.777108,6.132715,-5.716163],[-0.591112,7.926818,0.132932,-3.358144],[-6.944448,7.694201,-8.448078,-1.672822],[-1.420000,-1.422662,5.763625,9.373341]], dtype='float64')
module1.set_input('var_322', input_322)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_249, input_267, input_282, input_289, input_322, )
res3 = intrp3.evaluate()(input_249, input_267, input_282, input_289, input_322, )
res4 = intrp4.evaluate()(input_249, input_267, input_282, input_289, input_322, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
module5.set_input('var_249', input_249)
module5.set_input('var_267', input_267)
module5.set_input('var_282', input_282)
module5.set_input('var_289', input_289)
module5.set_input('var_322', input_322)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_249, input_267, input_282, input_289, input_322, )
res7 = intrp7.evaluate()(input_249, input_267, input_282, input_289, input_322, )
res8 = intrp8.evaluate()(input_249, input_267, input_282, input_289, input_322, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
module9.set_input('var_249', input_249)
module9.set_input('var_267', input_267)
module9.set_input('var_282', input_282)
module9.set_input('var_289', input_289)
module9.set_input('var_322', input_322)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_249, input_267, input_282, input_289, input_322, )
res11 = intrp11.evaluate()(input_249, input_267, input_282, input_289, input_322, )
res12 = intrp12.evaluate()(input_249, input_267, input_282, input_289, input_322, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
module13.set_input('var_249', input_249)
module13.set_input('var_267', input_267)
module13.set_input('var_282', input_282)
module13.set_input('var_289', input_289)
module13.set_input('var_322', input_322)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_249, input_267, input_282, input_289, input_322, )
res15 = intrp15.evaluate()(input_249, input_267, input_282, input_289, input_322, )
res16 = intrp16.evaluate()(input_249, input_267, input_282, input_289, input_322, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
module17.set_input('var_249', input_249)
module17.set_input('var_267', input_267)
module17.set_input('var_282', input_282)
module17.set_input('var_289', input_289)
module17.set_input('var_322', input_322)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_249, input_267, input_282, input_289, input_322, )
res19 = intrp19.evaluate()(input_249, input_267, input_282, input_289, input_322, )
res20 = intrp20.evaluate()(input_249, input_267, input_282, input_289, input_322, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
module21.set_input('var_249', input_249)
module21.set_input('var_267', input_267)
module21.set_input('var_282', input_282)
module21.set_input('var_289', input_289)
module21.set_input('var_322', input_322)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_249, input_267, input_282, input_289, input_322, )
res23 = intrp23.evaluate()(input_249, input_267, input_282, input_289, input_322, )
res24 = intrp24.evaluate()(input_249, input_267, input_282, input_289, input_322, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()

'''22: TVMFuncCall
21: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::transform::Pass, tvm::IRModule)>::AssignTypedLambda<tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}>(tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
16: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
15: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
14: tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}::operator()(tvm::IRModule, tvm::transform::PassContext) const [clone .isra.405]
13: tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}::operator()(tvm::IRModule, tvm::transform::PassContext) const::{lambda(tvm::relay::LetList*)#1}::operator()(tvm::relay::LetList) const [clone .constprop.436]
12: _ZNSt17_Function_handlerIFSt10sha
11: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::relay::FunctionNode const*)::{lambda(std::vector<std::shared_ptr<tvm::relay::ADValueNode>, std::allocator<std::shared_ptr<tvm::relay::ADValueNode> > > const&, tvm::relay::Call const&)#1}::operator()(std::vector<std::shared_ptr<tvm::relay::ADValueNode>, std::allocator<std::shared_ptr<tvm::relay::ADValueNode> > > const&, tvm::relay::Call const&) const
10: tvm::relay::FirstOrderReverseAD::VisitExpr(tvm::RelayExpr const&)
9: _ZZN3tvm5relay11ExprFunctorIFSt10shared_
8: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::relay::TupleNode const*)
7: tvm::relay::FirstOrderReverseAD::VisitExpr(tvm::RelayExpr const&)
6: _ZZN3tvm5relay11ExprFunctorIFSt10shared_
5: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::FirstOrderReverseAD::VisitExpr(tvm::RelayExpr const&)
3: _ZZN3tvm5relay11ExprFunctorIFSt10shared_
2: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::OpNode const*)
1: _ZN3tvm17DiagnosticContext9EmitFatalERKNS_1
0: tvm::DiagnosticContext::Render()

'''