import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (6, 16))#candidate|0|(6, 16)|var|float64
uop_1 = relay.log10(var_0.astype('float64')) # shape=(6, 16)
bop_3 = relay.less_equal(uop_1.astype('bool'), relay.reshape(var_0.astype('bool'), relay.shape_of(uop_1))) # shape=(6, 16)
bop_6 = relay.mod(bop_3.astype('float64'), relay.reshape(var_0.astype('float64'), relay.shape_of(bop_3))) # shape=(6, 16)
bop_9 = relay.floor_divide(bop_6.astype('float32'), relay.reshape(uop_1.astype('float32'), relay.shape_of(bop_6))) # shape=(6, 16)
uop_12 = relay.acosh(var_0.astype('float64')) # shape=(6, 16)
var_14 = relay.var("var_14", dtype = "float64", shape = (6, 16))#candidate|14|(6, 16)|var|float64
bop_15 = relay.bitwise_xor(bop_6.astype('int16'), relay.reshape(var_14.astype('int16'), relay.shape_of(bop_6))) # shape=(6, 16)
bop_18 = relay.less(var_14.astype('bool'), relay.reshape(bop_6.astype('bool'), relay.shape_of(var_14))) # shape=(6, 16)
uop_21 = relay.acos(uop_12.astype('float64')) # shape=(6, 16)
bop_23 = relay.bitwise_or(var_0.astype('int8'), relay.reshape(bop_6.astype('int8'), relay.shape_of(var_0))) # shape=(6, 16)
bop_26 = relay.not_equal(bop_3.astype('bool'), relay.reshape(bop_6.astype('bool'), relay.shape_of(bop_3))) # shape=(6, 16)
bop_29 = relay.greater_equal(uop_21.astype('bool'), relay.reshape(bop_15.astype('bool'), relay.shape_of(uop_21))) # shape=(6, 16)
uop_32 = relay.sin(bop_29.astype('float32')) # shape=(6, 16)
bop_34 = relay.floor_divide(uop_32.astype('float64'), relay.reshape(bop_9.astype('float64'), relay.shape_of(uop_32))) # shape=(6, 16)
uop_37 = relay.erf(bop_26.astype('float32')) # shape=(6, 16)
bop_39 = relay.bitwise_xor(var_0.astype('uint32'), relay.reshape(bop_34.astype('uint32'), relay.shape_of(var_0))) # shape=(6, 16)
var_42 = relay.var("var_42", dtype = "int8", shape = (6, 16))#candidate|42|(6, 16)|var|int8
bop_43 = relay.add(bop_23.astype('uint8'), relay.reshape(var_42.astype('uint8'), relay.shape_of(bop_23))) # shape=(6, 16)
output = relay.Tuple([bop_18,uop_37,bop_39,bop_43,])
output2 = relay.Tuple([bop_18,uop_37,bop_39,bop_43,])
func_46 = relay.Function([var_0,var_14,var_42,], output)
mod['func_46'] = func_46
mod = relay.transform.InferType()(mod)
mutated_mod['func_46'] = func_46
mutated_mod = relay.transform.InferType()(mutated_mod)
func_46_call = mutated_mod.get_global_var('func_46')
var_48 = relay.var("var_48", dtype = "float64", shape = (6, 16))#candidate|48|(6, 16)|var|float64
var_49 = relay.var("var_49", dtype = "float64", shape = (6, 16))#candidate|49|(6, 16)|var|float64
var_50 = relay.var("var_50", dtype = "int8", shape = (6, 16))#candidate|50|(6, 16)|var|int8
call_47 = func_46_call(var_48,var_49,var_50,)
output = call_47
func_51 = relay.Function([var_48,var_49,var_50,], output)
mutated_mod['func_51'] = func_51
mutated_mod = relay.transform.InferType()(mutated_mod)
var_53 = relay.var("var_53", dtype = "float64", shape = (11, 15))#candidate|53|(11, 15)|var|float64
var_54 = relay.var("var_54", dtype = "float64", shape = (11, 15))#candidate|54|(11, 15)|var|float64
bop_55 = relay.mod(var_53.astype('float64'), relay.reshape(var_54.astype('float64'), relay.shape_of(var_53))) # shape=(11, 15)
var_58 = relay.var("var_58", dtype = "float64", shape = (11, 15))#candidate|58|(11, 15)|var|float64
bop_59 = relay.floor_divide(var_54.astype('float32'), relay.reshape(var_58.astype('float32'), relay.shape_of(var_54))) # shape=(11, 15)
bop_62 = relay.bitwise_and(var_53.astype('int64'), relay.reshape(bop_59.astype('int64'), relay.shape_of(var_53))) # shape=(11, 15)
uop_65 = relay.acosh(bop_62.astype('float64')) # shape=(11, 15)
bop_67 = relay.greater_equal(var_53.astype('bool'), relay.reshape(var_58.astype('bool'), relay.shape_of(var_53))) # shape=(11, 15)
bop_70 = relay.greater_equal(uop_65.astype('bool'), relay.reshape(bop_59.astype('bool'), relay.shape_of(uop_65))) # shape=(11, 15)
bop_73 = relay.power(var_53.astype('float32'), relay.reshape(bop_62.astype('float32'), relay.shape_of(var_53))) # shape=(11, 15)
uop_76 = relay.sigmoid(uop_65.astype('float32')) # shape=(11, 15)
uop_78 = relay.atanh(uop_76.astype('float64')) # shape=(11, 15)
const_80 = relay.const([[9.307280,-2.814901,0.453186,-9.829770,-4.146265,8.559078,-2.430700,-7.140573,4.947654,-5.855024,2.319120,3.598365,6.974961,0.330084,-7.062364],[-6.245015,-2.154605,0.955557,-4.989959,-2.975790,-1.124562,-4.267988,-2.415153,-5.937899,-5.362372,-4.212915,8.332069,-3.219322,1.849429,9.918045],[-5.039569,3.231689,5.168942,8.416445,-2.720643,-2.033821,6.018411,-4.992686,7.237345,7.747901,9.303249,7.534524,-2.319397,2.328987,1.437476],[6.488420,-3.361606,9.701878,5.586953,2.760098,-9.461818,-1.880346,3.064496,4.278495,-5.630960,-4.409518,-3.718215,-2.219560,-9.843975,8.553712],[5.970967,5.406974,0.671906,9.460680,1.139491,8.251867,-4.467523,-9.111641,-5.091983,9.866724,-9.183027,-7.964570,7.317042,5.155615,-8.621086],[-4.532721,-6.593815,-6.849533,-8.750932,-0.308300,-4.815329,4.761730,-2.198980,-4.515241,7.428941,9.235574,-9.787483,-9.251080,-6.106247,7.866398],[-1.905479,-4.555240,9.831875,3.977772,-2.556770,-5.925821,5.106237,-4.478264,6.470762,-6.966468,-6.287335,-0.828655,8.934556,-4.430314,2.743534],[-1.545369,9.499757,-8.134495,6.320270,-3.267562,4.003111,4.461231,-2.127290,-7.920738,-3.613851,-6.868634,-9.866234,9.660238,-6.266939,-6.419547],[8.172530,7.103606,7.739859,-4.716790,1.205422,7.188724,6.064110,6.486320,-4.187980,2.937766,-0.286538,9.684055,-3.460859,-9.507321,-7.078542],[-5.704892,-3.434536,0.220255,5.284480,-5.102631,-2.102009,-2.070718,-0.732569,-1.646440,5.931321,-7.967276,0.951292,0.976212,-0.165325,-6.285092],[-3.819868,6.648347,8.196724,-3.123395,-0.789846,6.577691,-0.556293,-0.223187,-0.718856,5.333696,-8.760443,1.852387,0.651141,8.032549,5.581777]], dtype = "float64")#candidate|80|(11, 15)|const|float64
bop_81 = relay.floor_mod(uop_78.astype('float32'), relay.reshape(const_80.astype('float32'), relay.shape_of(uop_78))) # shape=(11, 15)
uop_84 = relay.acosh(uop_76.astype('float32')) # shape=(11, 15)
uop_86 = relay.log10(bop_81.astype('float32')) # shape=(11, 15)
uop_88 = relay.acosh(uop_76.astype('float32')) # shape=(11, 15)
uop_90 = relay.sqrt(uop_86.astype('float64')) # shape=(11, 15)
var_92 = relay.var("var_92", dtype = "float64", shape = (11, 15))#candidate|92|(11, 15)|var|float64
bop_93 = relay.add(uop_90.astype('uint16'), relay.reshape(var_92.astype('uint16'), relay.shape_of(uop_90))) # shape=(11, 15)
bop_96 = relay.left_shift(uop_86.astype('int16'), relay.reshape(var_58.astype('int16'), relay.shape_of(uop_86))) # shape=(11, 15)
bop_99 = relay.floor_divide(bop_59.astype('float32'), relay.reshape(uop_90.astype('float32'), relay.shape_of(bop_59))) # shape=(11, 15)
uop_102 = relay.atan(uop_76.astype('float32')) # shape=(11, 15)
bop_104 = relay.greater_equal(bop_93.astype('bool'), relay.reshape(bop_96.astype('bool'), relay.shape_of(bop_93))) # shape=(11, 15)
var_107 = relay.var("var_107", dtype = "bool", shape = (11, 15))#candidate|107|(11, 15)|var|bool
bop_108 = relay.equal(bop_104.astype('bool'), relay.reshape(var_107.astype('bool'), relay.shape_of(bop_104))) # shape=(11, 15)
uop_111 = relay.asin(bop_108.astype('float64')) # shape=(11, 15)
bop_113 = relay.floor_divide(uop_111.astype('float64'), relay.reshape(var_92.astype('float64'), relay.shape_of(uop_111))) # shape=(11, 15)
bop_116 = relay.maximum(bop_113.astype('int64'), relay.reshape(uop_84.astype('int64'), relay.shape_of(bop_113))) # shape=(11, 15)
var_119 = relay.var("var_119", dtype = "uint16", shape = (11, 15))#candidate|119|(11, 15)|var|uint16
bop_120 = relay.less_equal(bop_93.astype('bool'), relay.reshape(var_119.astype('bool'), relay.shape_of(bop_93))) # shape=(11, 15)
func_46_call = mod.get_global_var('func_46')
func_51_call = mutated_mod.get_global_var('func_51')
var_124 = relay.var("var_124", dtype = "float64", shape = (96,))#candidate|124|(96,)|var|float64
call_123 = relay.TupleGetItem(func_46_call(relay.reshape(var_124.astype('float64'), [6, 16]), relay.reshape(var_124.astype('float64'), [6, 16]), relay.reshape(var_124.astype('int8'), [6, 16]), ), 3)
call_125 = relay.TupleGetItem(func_51_call(relay.reshape(var_124.astype('float64'), [6, 16]), relay.reshape(var_124.astype('float64'), [6, 16]), relay.reshape(var_124.astype('int8'), [6, 16]), ), 3)
bop_126 = relay.subtract(uop_111.astype('int64'), relay.reshape(var_58.astype('int64'), relay.shape_of(uop_111))) # shape=(11, 15)
bop_129 = relay.power(uop_111.astype('float32'), relay.reshape(uop_88.astype('float32'), relay.shape_of(uop_111))) # shape=(11, 15)
bop_132 = relay.multiply(uop_86.astype('float64'), relay.reshape(bop_96.astype('float64'), relay.shape_of(uop_86))) # shape=(11, 15)
var_135 = relay.var("var_135", dtype = "float32", shape = (11, 15))#candidate|135|(11, 15)|var|float32
bop_136 = relay.floor_divide(bop_129.astype('float64'), relay.reshape(var_135.astype('float64'), relay.shape_of(bop_129))) # shape=(11, 15)
bop_139 = relay.greater(bop_99.astype('bool'), relay.reshape(uop_65.astype('bool'), relay.shape_of(bop_99))) # shape=(11, 15)
const_142 = relay.const([[0.535004,-7.771603,0.622320,8.711771,-8.581702,-4.897971,6.361456,0.294178,-6.928461,-9.813066,5.008005,4.082079,-0.739389,-3.581739,0.585991],[-9.462569,5.764887,4.564500,-9.976238,2.286987,-7.669967,0.700909,-1.769483,-3.682779,4.293728,-6.716852,4.202600,7.011808,5.811915,7.857426],[7.558706,7.696152,-9.674760,2.844252,9.358165,2.282661,5.555921,-7.060847,-5.708517,-4.687266,3.679999,-6.564271,-5.061169,-1.942468,7.395778],[5.058649,0.077234,-1.488074,3.602724,7.578673,-9.379495,-8.442351,3.774542,-2.043839,-6.981193,8.294908,8.785928,-8.669786,7.410331,-5.687193],[-8.074781,2.967430,-2.526129,4.427442,-1.817444,2.382739,-3.920939,-4.809113,-5.208662,7.753297,6.858401,-6.990317,-6.320168,-7.740983,5.392875],[-0.397286,-8.628762,-8.942488,5.811851,-5.541355,-2.053470,5.298364,-6.504946,-8.938451,-2.188329,2.463904,-6.959798,-9.236861,-9.229721,-8.985175],[5.971665,-3.959358,-8.707948,4.844989,-9.059885,1.780976,1.644741,8.772785,-6.960523,-0.375578,2.521165,-8.441241,5.556669,-6.762083,-8.643020],[7.847744,-3.852143,2.586936,-2.618076,-1.595479,8.746588,2.502078,-5.206970,-7.058549,-5.432515,3.469020,-6.686186,6.542087,0.463066,0.741525],[-5.714468,5.992246,-6.666247,-1.526618,5.511364,-7.457318,-2.712499,6.424230,-6.776994,-7.057671,-7.926748,5.374359,5.822840,-8.381692,-5.039016],[-3.591011,8.922781,2.509291,5.837892,-8.858420,8.080435,9.133543,4.815773,-1.889425,-8.404558,-6.973408,1.687139,2.301294,0.701594,6.214737],[7.949918,-5.114553,0.039667,9.745129,7.728948,-7.141787,-0.575733,7.939583,-4.647148,1.184198,-3.236353,-2.256204,1.057789,-3.984724,5.679519]], dtype = "float64")#candidate|142|(11, 15)|const|float64
bop_143 = relay.subtract(bop_136.astype('uint8'), relay.reshape(const_142.astype('uint8'), relay.shape_of(bop_136))) # shape=(11, 15)
bop_146 = relay.logical_and(bop_116.astype('bool'), relay.reshape(bop_67.astype('bool'), relay.shape_of(bop_116))) # shape=(11, 15)
output = relay.Tuple([bop_55,bop_70,bop_73,uop_102,bop_120,call_123,var_124,bop_126,bop_132,bop_139,bop_143,bop_146,])
output2 = relay.Tuple([bop_55,bop_70,bop_73,uop_102,bop_120,call_125,var_124,bop_126,bop_132,bop_139,bop_143,bop_146,])
func_149 = relay.Function([var_53,var_54,var_58,var_92,var_107,var_119,var_124,var_135,], output)
mod['func_149'] = func_149
mod = relay.transform.InferType()(mod)
mutated_mod['func_149'] = func_149
mutated_mod = relay.transform.InferType()(mutated_mod)
func_149_call = mutated_mod.get_global_var('func_149')
var_151 = relay.var("var_151", dtype = "float64", shape = (11, 15))#candidate|151|(11, 15)|var|float64
var_152 = relay.var("var_152", dtype = "float64", shape = (11, 15))#candidate|152|(11, 15)|var|float64
var_153 = relay.var("var_153", dtype = "float64", shape = (11, 15))#candidate|153|(11, 15)|var|float64
var_154 = relay.var("var_154", dtype = "float64", shape = (11, 15))#candidate|154|(11, 15)|var|float64
var_155 = relay.var("var_155", dtype = "bool", shape = (11, 15))#candidate|155|(11, 15)|var|bool
var_156 = relay.var("var_156", dtype = "uint16", shape = (11, 15))#candidate|156|(11, 15)|var|uint16
var_157 = relay.var("var_157", dtype = "float64", shape = (96,))#candidate|157|(96,)|var|float64
var_158 = relay.var("var_158", dtype = "float32", shape = (11, 15))#candidate|158|(11, 15)|var|float32
call_150 = func_149_call(var_151,var_152,var_153,var_154,var_155,var_156,var_157,var_158,)
output = call_150
func_159 = relay.Function([var_151,var_152,var_153,var_154,var_155,var_156,var_157,var_158,], output)
mutated_mod['func_159'] = func_159
mutated_mod = relay.transform.InferType()(mutated_mod)
var_161 = relay.var("var_161", dtype = "float64", shape = (15,))#candidate|161|(15,)|var|float64
uop_162 = relay.log(var_161.astype('float64')) # shape=(15,)
uop_164 = relay.acos(uop_162.astype('float64')) # shape=(15,)
bop_166 = relay.not_equal(uop_164.astype('bool'), relay.reshape(var_161.astype('bool'), relay.shape_of(uop_164))) # shape=(15,)
bop_169 = relay.equal(uop_164.astype('bool'), relay.reshape(var_161.astype('bool'), relay.shape_of(uop_164))) # shape=(15,)
output = relay.Tuple([bop_166,bop_169,])
output2 = relay.Tuple([bop_166,bop_169,])
func_172 = relay.Function([var_161,], output)
mod['func_172'] = func_172
mod = relay.transform.InferType()(mod)
mutated_mod['func_172'] = func_172
mutated_mod = relay.transform.InferType()(mutated_mod)
var_173 = relay.var("var_173", dtype = "float64", shape = (15,))#candidate|173|(15,)|var|float64
func_172_call = mutated_mod.get_global_var('func_172')
call_174 = func_172_call(var_173)
output = call_174
func_175 = relay.Function([var_173], output)
mutated_mod['func_175'] = func_175
mutated_mod = relay.transform.InferType()(mutated_mod)
var_177 = relay.var("var_177", dtype = "uint16", shape = (16, 14, 5))#candidate|177|(16, 14, 5)|var|uint16
var_178 = relay.var("var_178", dtype = "uint16", shape = (16, 14, 5))#candidate|178|(16, 14, 5)|var|uint16
bop_179 = relay.less_equal(var_177.astype('bool'), relay.reshape(var_178.astype('bool'), relay.shape_of(var_177))) # shape=(16, 14, 5)
uop_182 = relay.atan(var_177.astype('float32')) # shape=(16, 14, 5)
bop_184 = relay.greater_equal(uop_182.astype('bool'), relay.reshape(var_177.astype('bool'), relay.shape_of(uop_182))) # shape=(16, 14, 5)
uop_187 = relay.atan(bop_184.astype('float64')) # shape=(16, 14, 5)
output = relay.Tuple([bop_179,uop_187,])
output2 = relay.Tuple([bop_179,uop_187,])
func_189 = relay.Function([var_177,var_178,], output)
mod['func_189'] = func_189
mod = relay.transform.InferType()(mod)
mutated_mod['func_189'] = func_189
mutated_mod = relay.transform.InferType()(mutated_mod)
func_189_call = mutated_mod.get_global_var('func_189')
var_191 = relay.var("var_191", dtype = "uint16", shape = (16, 14, 5))#candidate|191|(16, 14, 5)|var|uint16
var_192 = relay.var("var_192", dtype = "uint16", shape = (16, 14, 5))#candidate|192|(16, 14, 5)|var|uint16
call_190 = func_189_call(var_191,var_192,)
output = call_190
func_193 = relay.Function([var_191,var_192,], output)
mutated_mod['func_193'] = func_193
mutated_mod = relay.transform.InferType()(mutated_mod)
const_195 = relay.const([[[-4.914693,4.728320,8.182997,3.902107,6.164094,-4.414140,1.966762,-7.304285,-9.659482,2.846534,6.568035,-1.525141,-1.994050,9.426724,-3.493793],[-6.177947,6.447985,0.897480,-9.408604,-6.536944,-2.433953,-8.436242,3.950856,-9.832245,-9.028405,3.628106,2.017984,0.962091,0.743540,6.403628],[5.790987,3.414519,2.608867,2.732945,3.080872,-6.030279,4.924238,8.914544,6.849243,-9.199050,4.664687,2.416440,5.560892,7.209520,0.755914],[4.604353,-5.972747,-7.335656,2.430174,4.923992,8.729468,-7.111308,-1.308134,0.726938,3.005179,2.841673,9.747558,7.764203,0.757637,-2.307434],[9.168002,-6.514925,-4.045809,5.876366,-4.187721,-7.100906,-5.493378,-3.150321,6.767620,3.958644,-4.505631,1.242605,2.068871,-8.792884,2.961027],[-4.539853,-9.432526,-3.646284,0.873800,-5.235757,-3.031979,4.721426,5.169048,-5.105076,9.363952,3.247950,-3.688226,-6.687858,7.892271,2.283526],[7.260571,1.702461,-0.111372,-3.818863,-1.963704,5.009767,3.240475,1.866552,5.899116,1.038037,1.166677,-1.620199,-1.985060,-4.860003,3.042276],[-5.091219,8.681134,4.662965,-9.701060,3.177265,-1.847160,7.088926,4.971327,9.910702,-6.980648,7.649461,2.889052,-7.433870,-9.708465,-3.362524],[-5.766211,-8.257088,-8.459320,0.799435,2.547254,1.385949,1.824421,-4.480782,-2.914697,1.329045,-9.667918,-2.445757,-4.410905,5.677298,2.008864]],[[4.548349,8.286698,6.465932,4.728940,-6.253594,6.484445,-6.394104,-9.688964,2.787460,-7.412687,-7.337281,-1.999329,1.402709,3.030095,4.431059],[-7.868356,-7.942937,9.260570,5.904812,-3.020944,3.054824,-3.099015,-4.358577,-4.278916,3.352420,8.130588,-0.869547,-0.404939,-1.701535,-4.856149],[0.289020,-4.314432,-4.114385,3.338910,-8.985492,4.395959,-9.956335,-5.543759,3.978599,-3.423200,6.491940,-9.880701,4.038694,3.450740,-6.979610],[-0.247204,-3.148383,5.606290,-5.037783,7.482183,-8.407404,-4.844310,-3.085090,2.995612,-4.871939,-7.868846,2.775995,9.281287,4.207907,5.399972],[-2.946040,8.756952,-9.645740,-6.635656,-5.231614,-9.082581,-9.858695,3.391037,8.219026,-9.564910,-8.630089,1.955138,5.879177,8.756446,-6.736634],[-3.177329,-7.236765,3.772485,-5.733724,3.821731,1.346071,5.210182,-3.421317,-5.472270,-8.639794,6.789190,3.370452,-7.333515,5.912377,-2.955338],[-1.855295,1.456182,-5.980532,-0.642553,-6.358342,0.685602,3.604511,4.852920,0.218741,5.506793,7.527131,2.331513,4.068691,3.604270,4.704975],[-2.162319,4.551832,-8.340921,8.100705,-3.251426,-1.380452,5.520633,9.887839,9.692877,7.822592,-7.360526,-6.099261,0.549742,1.605882,-7.922185],[-8.310382,0.509842,-8.017887,-9.209661,-2.215159,0.604381,-6.826041,-7.146455,-2.858250,6.203376,-2.548942,-8.705519,3.675538,-2.439276,-5.547788]],[[8.724587,-7.463454,-0.840775,-9.966152,-3.767629,-4.401675,5.079635,-4.628633,-0.167146,2.084687,-2.000452,1.192350,-5.568296,2.691280,6.601354],[-3.786995,-4.541231,7.004200,1.213867,4.039256,-7.161377,-8.364852,6.417634,4.101280,1.653260,3.694127,-5.189625,-2.641494,7.172925,-2.944795],[9.536180,6.901088,1.546566,6.454943,-3.142196,-3.070371,-8.011015,-3.862511,0.712135,7.729404,-6.725882,5.158169,1.583767,-9.565012,8.225057],[2.001291,9.296781,-5.230218,-2.327130,3.103267,0.797118,2.801951,-8.204284,7.432432,-2.563929,-6.054096,8.244326,3.224633,8.393206,3.603665],[-8.297982,-1.290910,1.696216,-1.768883,-1.367106,-2.588011,2.406980,4.364507,8.661117,-6.638727,4.933305,-6.806756,-1.604617,7.495130,0.910996],[-1.224962,7.854450,6.878752,2.415295,-0.128750,-7.299460,8.904850,1.687771,7.622494,2.611731,-4.478016,0.872349,0.767111,-0.728903,9.770718],[4.326105,-3.492954,-1.661139,0.751261,5.857486,0.385726,-8.633138,-8.805064,5.879252,-4.010983,3.900522,6.568171,-8.316566,-5.435055,8.328199],[-7.028418,4.270402,-3.055499,5.394850,8.536603,1.345426,-0.517070,-7.062858,7.933980,-6.522559,-6.121223,-4.896073,-2.318284,5.176904,-2.707915],[3.122051,3.533531,3.734717,-9.679232,-5.233901,8.656999,2.221568,3.330620,-3.794728,4.858158,2.037488,-8.555815,-3.126227,-3.991150,1.027922]],[[-5.404939,8.374811,8.332708,3.648506,5.657364,-7.447106,-8.758997,-1.940955,2.845778,-9.025609,-3.246226,-4.025065,-0.294899,2.243883,-2.170161],[6.093999,0.640184,0.380471,3.193785,3.003429,-7.236896,4.394412,8.148197,-6.502609,4.191568,1.436307,-9.705987,-5.627591,-9.068355,5.636843],[4.692831,-0.542440,-9.476804,4.221768,-8.895727,-3.636759,-8.477208,9.333811,-7.037248,-5.695446,1.440963,1.103085,-2.476426,-3.484902,0.955428],[2.538047,-5.440390,-7.615749,7.151572,-8.105799,-0.626183,-3.598029,-7.413782,-5.439312,-8.345279,-3.893972,-0.724873,7.912126,-7.477673,-7.662021],[-0.704437,-3.100407,5.836373,7.358136,-9.701458,-8.662489,-2.013527,-7.353654,7.187831,8.001132,4.730448,4.049845,4.618139,-0.057940,-7.852093],[-1.980930,4.380730,1.657597,7.847483,7.151876,-2.883708,-2.575692,3.447473,0.421247,7.710181,-6.810280,6.895978,-4.016645,-3.345363,-4.949620],[3.221999,7.565544,6.500073,6.308724,8.070176,-7.912374,0.204083,8.567945,2.073323,7.575114,4.002108,-7.072134,4.925623,-7.823508,8.797684],[-3.249314,5.806340,2.717133,-7.341903,9.708334,-1.254294,1.315544,-0.444559,-0.913274,2.794342,-5.752793,4.677935,5.434548,2.294224,-8.862572],[-1.197393,-5.439931,6.888010,-1.072437,-8.449379,0.492713,-2.935836,-6.338581,1.180412,-3.524756,-5.197480,-7.778218,0.731014,-6.802057,4.907962]],[[-7.413887,1.526597,2.086140,-3.216650,-5.052632,6.062082,5.263460,-6.428654,-9.400115,-2.106087,9.971273,6.020573,-5.123829,8.296638,1.849644],[-7.889602,7.147213,-0.987761,-0.695060,-9.870220,-2.128217,-6.158064,6.709545,2.728563,1.324792,3.929338,8.765360,-3.798888,3.693349,-4.090635],[-8.057675,-9.133918,6.515491,-5.105240,-4.503603,-2.309068,-7.591090,-5.029403,-5.840191,0.352294,-9.592815,-6.813989,5.793934,7.201485,-0.614786],[3.286462,-8.929753,-3.806439,2.138249,7.617414,-4.957175,-6.826041,1.706372,-1.708834,-5.155925,8.736030,-1.356535,-6.183523,-8.350025,0.774773],[-7.507563,9.013042,-5.636784,-4.853614,-4.232739,2.560702,3.130268,0.990508,0.654325,-5.185586,5.421251,-3.358588,0.654854,8.977498,-1.296700],[0.827222,9.863896,-3.274950,-5.077034,3.713660,-4.560541,5.551292,-7.871611,-7.710917,8.401684,-9.870990,-7.727779,-1.892667,6.896561,4.108987],[-2.321025,-8.603705,4.707056,-2.111074,4.138873,-8.288266,-2.369523,-1.224826,-0.628219,-4.629047,4.114663,-3.444004,8.890028,-0.882855,-5.467064],[8.011000,-1.487461,5.228147,-5.123132,3.602612,1.609630,5.880766,-0.314147,6.210358,1.745317,-1.009553,-3.256103,-3.674139,8.930251,-3.478557],[7.394888,2.930158,-2.920563,3.592429,-8.310247,-2.354769,7.930630,5.922106,8.545297,-6.933388,5.056030,-0.560401,-2.544176,1.297408,1.238842]],[[6.922391,7.010159,-4.829767,3.180932,-5.342834,-7.543616,-8.819649,8.309879,5.973152,-9.657890,2.469439,-5.841189,7.180209,-7.106669,8.750553],[-0.973786,-8.675288,7.249580,2.392010,0.893482,-4.552985,3.826007,1.272385,-3.623713,5.505946,-9.815591,-9.750676,-0.259817,7.494964,2.271768],[-3.788005,-3.573878,7.004423,6.319355,-3.001668,3.256148,7.454880,4.701496,5.655507,7.580669,-5.249412,7.058488,6.569659,-6.476460,-0.694214],[3.926416,-6.977484,-5.559645,6.207784,-6.385216,-0.986996,-0.443315,-2.802166,-4.006975,7.813852,8.212732,5.690139,3.588935,-9.921686,-4.051180],[0.925445,-1.080963,1.402428,5.667072,-4.475951,-9.512814,8.985356,-3.681609,9.693383,0.232543,5.217421,-3.879582,4.888212,9.552867,-3.081161],[9.979634,7.183518,4.354120,-2.779302,3.455024,-8.939036,8.477213,-4.001413,-2.779917,-5.481650,-6.030834,-3.177026,-7.781385,-8.478236,6.330649],[7.521266,-9.454717,-7.827771,0.676795,2.229376,-3.757498,8.182137,0.251161,1.732609,0.850854,-4.526402,3.204010,-9.110189,-8.345498,2.154122],[6.887304,-4.448248,5.265149,1.803019,6.135614,1.605962,1.974596,1.547665,-8.024096,-3.571793,-6.675531,-8.123998,5.776977,-1.298825,4.215528],[0.129752,-2.093155,5.864617,9.188023,9.743758,5.931672,-9.643295,9.390247,2.092574,-9.692395,2.370499,-0.864024,7.723354,-7.006921,-9.808691]]], dtype = "float32")#candidate|195|(6, 9, 15)|const|float32
uop_196 = relay.rsqrt(const_195.astype('float32')) # shape=(6, 9, 15)
uop_198 = relay.cos(uop_196.astype('float64')) # shape=(6, 9, 15)
var_200 = relay.var("var_200", dtype = "float32", shape = (6, 9, 15))#candidate|200|(6, 9, 15)|var|float32
bop_201 = relay.logical_or(uop_196.astype('bool'), relay.reshape(var_200.astype('bool'), relay.shape_of(uop_196))) # shape=(6, 9, 15)
var_204 = relay.var("var_204", dtype = "float32", shape = (6, 9, 15))#candidate|204|(6, 9, 15)|var|float32
bop_205 = relay.floor_mod(const_195.astype('float32'), relay.reshape(var_204.astype('float32'), relay.shape_of(const_195))) # shape=(6, 9, 15)
output = relay.Tuple([uop_198,bop_201,bop_205,])
output2 = relay.Tuple([uop_198,bop_201,bop_205,])
func_208 = relay.Function([var_200,var_204,], output)
mod['func_208'] = func_208
mod = relay.transform.InferType()(mod)
var_209 = relay.var("var_209", dtype = "float32", shape = (6, 9, 15))#candidate|209|(6, 9, 15)|var|float32
var_210 = relay.var("var_210", dtype = "float32", shape = (6, 9, 15))#candidate|210|(6, 9, 15)|var|float32
output = func_208(var_209,var_210,)
func_211 = relay.Function([var_209,var_210,], output)
mutated_mod['func_211'] = func_211
mutated_mod = relay.transform.InferType()(mutated_mod)
var_213 = relay.var("var_213", dtype = "float32", shape = (10, 9, 6))#candidate|213|(10, 9, 6)|var|float32
const_214 = relay.const([[[-3.646206,-3.603447,-5.859591,-1.761013,7.887642,3.361297],[-7.639292,-1.323868,-2.692162,3.705389,3.090433,0.223066],[-0.012910,-6.716662,0.404762,-7.557037,-3.984984,-0.969444],[-3.214268,-2.230047,-3.327005,-9.592074,7.578845,9.369732],[5.545943,0.601664,-5.739708,1.926440,-5.215449,-8.835382],[-5.621926,4.083611,-7.407767,0.840258,-2.220101,-5.991200],[8.745654,-2.903281,7.413982,-1.842556,-3.423666,0.356338],[3.294373,4.376219,8.659767,4.130077,-7.533975,-7.315745],[-7.692514,0.635193,2.031304,-7.107105,-5.036824,-3.995344]],[[-0.260094,-7.175650,-7.426164,9.215417,9.582507,2.484809],[-3.313577,-8.343451,-1.531848,2.155805,-7.763333,8.687172],[-0.939192,-8.559427,-5.425376,-4.868235,6.582571,0.099316],[3.279485,1.583946,-1.674268,4.480213,-0.937132,8.156170],[-8.672335,5.710556,-4.529982,2.658807,-6.587218,3.673211],[-0.344177,5.442380,6.851857,3.176762,3.445322,8.182837],[6.592094,3.414091,-4.408005,-0.194868,5.151281,9.807766],[4.745358,7.474981,-0.243032,-3.542200,-8.064256,-6.960850],[0.437708,-0.754832,8.133237,-6.089292,-3.813521,-7.661527]],[[-1.136534,-7.597784,-8.854463,5.404701,-3.343209,-4.154123],[-9.324917,4.104912,-4.694947,-9.396759,7.550593,7.933741],[-6.320098,8.090848,1.695631,8.248474,1.840074,1.840045],[0.886035,6.854920,6.520171,-9.688546,-7.224128,4.742707],[7.307497,-7.702138,-4.136095,6.935010,3.185312,-9.438676],[-8.646041,8.018399,1.702481,-3.763177,7.900213,-7.997077],[7.704830,-9.948653,-5.179743,-1.136089,7.690708,-8.696193],[-9.004757,-0.652990,-6.940380,-6.583509,-5.984534,-7.635433],[2.908880,-4.767102,-3.379019,7.965075,8.412058,-3.192486]],[[4.440238,-3.945205,4.126453,3.010495,-9.103630,-6.474947],[-5.952109,-5.348969,-0.055572,-1.512190,7.255039,-5.181446],[2.375346,0.228651,-8.816835,-4.515598,-6.832181,-2.153270],[5.192481,-5.647954,-7.350512,-2.015405,3.979535,4.343342],[-1.864837,0.721883,4.060353,7.970163,-3.014206,1.505392],[-6.998448,-8.626660,-2.434819,7.058486,-5.426753,-5.307770],[-3.569044,1.455693,0.587478,1.145168,-1.587180,3.632114],[-9.034783,-8.402355,5.109212,9.122297,3.719266,-8.152721],[9.468354,6.341009,8.625028,-7.141649,0.743405,-8.858829]],[[-2.501374,-8.888527,-1.099744,-3.826130,-3.658124,6.216198],[6.422454,-1.413673,1.254576,-1.982968,-0.917787,-7.658154],[8.558356,6.383119,8.078665,3.452081,2.357878,-7.394169],[6.475694,-8.292060,-8.073774,4.627301,9.362488,-8.800035],[1.642685,1.288366,0.726798,0.600209,-7.962927,4.398964],[-0.769092,0.980625,-5.014483,-3.926250,2.434743,5.302947],[-0.321216,7.901005,-2.722827,-1.108536,-1.645991,0.177579],[-8.231772,6.542272,6.224029,-3.418318,9.710905,0.127915],[7.753673,-3.138701,1.428742,-2.728330,-2.960761,3.134983]],[[-7.944899,-5.541249,6.325526,-4.669285,4.497332,-6.896085],[-3.043159,-2.204125,-4.999256,4.565104,2.828958,-3.437959],[8.917628,1.138605,-0.780880,0.126257,-1.338595,-8.670274],[3.161940,7.502975,-9.541507,-6.943073,-5.293197,-1.267556],[-5.733021,2.060544,2.952334,-0.314093,-0.251779,6.863340],[-4.228233,3.652038,-5.300721,-8.121861,-1.208161,-4.859478],[4.678702,4.204980,-1.278547,7.511009,5.575517,-1.402547],[-8.160153,-9.450094,-5.769911,-3.589443,-4.831709,-0.463422],[0.843946,-3.503943,-7.190410,-2.713888,2.156148,-7.022867]],[[9.006075,7.724290,-0.120546,-1.261803,-8.058173,9.398853],[-7.464480,-4.189159,-7.715976,6.619300,9.276222,8.402446],[6.166104,-2.381888,-1.129116,-2.144921,-7.582129,-8.674669],[8.500823,4.506642,4.198235,9.874519,-1.294932,-4.022278],[-6.833992,-1.163737,-5.355207,1.977483,4.017347,-6.217706],[-9.698427,-5.253438,-0.535528,9.776890,1.946983,-3.578140],[-0.035329,-9.676436,7.091559,7.237765,-5.640683,2.597931],[8.717052,-5.702552,-7.448304,-5.314622,1.128699,2.783220],[-5.170646,-2.300723,-0.229326,-8.205885,-9.898915,5.177305]],[[-3.354765,0.922397,5.698892,2.321653,3.668573,6.673617],[-5.035382,3.730751,-2.126139,-4.523606,5.115879,-6.485352],[1.840248,-5.089425,3.727356,6.678495,-5.183282,4.499268],[2.458817,0.078306,-6.764016,0.048219,-1.881365,0.823459],[8.850371,7.121343,-4.062309,-1.702870,2.397397,2.158887],[3.890541,-1.167705,4.932508,5.846879,-0.830230,4.641881],[2.884694,2.347676,1.851871,9.291360,-6.203474,-0.371004],[-1.951209,-8.512841,9.180748,3.099151,-9.203556,3.897069],[8.381874,7.472768,6.302156,-4.592051,6.902119,-4.963657]],[[-0.738543,3.251176,5.543448,5.569739,9.051199,9.213326],[2.785482,7.813431,-7.193009,1.308811,9.829366,8.273190],[-6.319234,9.660137,8.188219,-1.389912,9.526731,1.745330],[7.123186,2.033560,-8.646635,-5.202420,0.716116,-1.591683],[-9.678386,1.685544,-8.955044,-6.710711,-5.917344,-1.566778],[2.752661,-1.974435,-2.623640,1.689666,-5.430435,-1.006974],[7.618217,5.944121,-3.097341,-6.724964,3.139780,-1.030545],[-0.720683,-0.688158,3.208024,2.758982,-8.910497,0.626283],[0.329711,-3.680563,1.508651,-2.796364,7.650154,5.274225]],[[4.120000,-0.961932,9.229600,-1.344935,2.339839,3.038731],[7.470599,-6.499553,-6.577030,5.419829,-2.234553,1.690629],[-2.754513,2.914022,2.221252,-0.087222,-0.929715,-6.771944],[2.795680,-8.837883,7.778515,2.010537,-5.241845,-7.617117],[-6.865138,-3.430476,-3.674526,-1.705998,4.629532,-7.364711],[6.349194,-8.852835,-9.529906,1.929551,2.479597,-3.516663],[7.701148,-6.799454,0.864843,-2.207144,-4.310411,8.055872],[1.803596,2.208175,6.475438,3.458844,-6.720328,-0.951612],[-6.243919,5.731540,4.360537,4.995362,3.453781,-4.291476]]], dtype = "float32")#candidate|214|(10, 9, 6)|const|float32
bop_215 = relay.add(var_213.astype('float32'), relay.reshape(const_214.astype('float32'), relay.shape_of(var_213))) # shape=(10, 9, 6)
bop_218 = relay.less(bop_215.astype('bool'), relay.reshape(var_213.astype('bool'), relay.shape_of(bop_215))) # shape=(10, 9, 6)
uop_221 = relay.erf(var_213.astype('float32')) # shape=(10, 9, 6)
uop_223 = relay.exp(const_214.astype('float32')) # shape=(10, 9, 6)
const_225 = relay.const([[[9.600590,-5.524401,8.439898,-0.965319,-6.517729,-4.538508],[7.181330,-2.820668,1.812814,-0.858073,-2.325467,-9.128691],[9.831062,-1.975834,4.070485,6.011130,8.804515,2.174891],[9.699732,-8.453411,3.787670,4.576298,7.743027,-1.458062],[8.849281,-2.774552,-0.651056,-0.029774,0.244836,-9.349525],[5.776777,7.562466,8.272369,6.502261,-7.045829,4.939037],[-5.846969,1.528269,-3.984560,2.627501,-9.085534,5.793438],[-8.509251,-9.268505,5.563705,7.256780,-6.304620,7.192607],[3.984554,-4.068427,-4.951758,2.431953,-1.706073,-5.741078]],[[-4.108023,8.595695,2.710792,8.644932,-0.150657,4.407749],[-8.118598,-5.588319,-0.692991,6.081825,7.867545,4.739268],[8.277009,-5.761360,7.868613,-5.737902,-1.983301,-4.625903],[-9.786365,-7.047456,2.042388,-4.233040,-7.516393,-4.732103],[9.383809,-3.747189,-0.775467,-9.486569,-2.829143,5.225797],[-1.729315,3.274829,1.740591,-4.200675,-5.995459,4.859835],[6.423630,8.414342,-0.830305,-3.868968,5.459121,-6.619068],[-4.679760,7.580178,-8.322005,4.870188,-4.156329,6.352236],[-2.349245,-1.953807,-2.152409,5.493982,9.228750,6.956067]],[[-3.912924,7.878532,-6.092568,9.812593,1.616320,2.854326],[-1.436293,-6.821190,-4.392078,-8.238754,2.779623,9.007377],[-5.514290,6.340294,4.352522,-6.667952,-1.877167,-6.861837],[8.041975,-8.666690,-8.345001,-0.675411,-8.145014,-9.668671],[6.156262,6.741259,2.317743,-5.983431,7.259392,7.959969],[0.818945,0.951239,-0.174863,-9.754459,5.532817,-0.861895],[1.625784,-6.061569,2.136508,-5.890887,-1.915385,4.798907],[-2.728421,4.337166,-5.432012,-4.253638,-9.303286,4.221859],[6.521163,9.826379,-4.781757,3.872401,-5.006352,9.425179]],[[-4.834449,-7.642814,-1.343718,-1.321063,-5.326863,-9.602535],[-8.649648,-9.972145,-5.029763,5.561271,3.334407,3.498594],[-7.674290,3.153842,-2.102472,-0.357940,-9.334095,4.349500],[8.503918,4.932765,-6.761206,-2.916043,7.453447,3.920274],[-2.073961,0.858719,3.950532,-0.259921,6.269962,4.378106],[-8.037968,-5.955236,-0.572439,2.647146,8.547375,5.860817],[1.674459,9.957232,-4.978552,-1.944596,8.376555,9.493911],[-5.846928,3.377012,4.262586,-0.360602,-3.373195,9.269624],[-9.471841,-9.116758,5.757880,6.576077,7.593098,2.344706]],[[-3.616046,3.920767,-4.291326,-6.945880,-6.672863,-7.625611],[-8.157531,2.462278,-2.724421,-4.407926,-9.182628,-2.947625],[-5.088556,-7.306706,-4.776307,-2.958446,0.436223,9.326432],[-3.276224,7.300872,7.523854,-0.623602,-6.736652,-6.853140],[-8.746557,6.645090,-2.666670,3.364999,-3.675186,-1.385254],[8.306100,4.813279,-9.188952,-0.307097,-0.599091,5.320319],[-9.365360,-2.032088,-7.977644,1.927861,7.972291,0.401604],[-5.244170,-9.040243,-5.448419,-9.980775,2.831608,-7.086988],[-0.374389,-2.126437,-6.101801,-3.637144,-9.733857,8.422650]],[[6.850523,3.979610,-5.933131,-1.762530,4.984686,9.902089],[-1.553925,-4.575532,5.960843,8.161647,6.196820,-0.126479],[-2.036296,-0.936137,9.481055,5.211014,-1.360674,8.168639],[9.043105,-2.665480,4.267618,-2.855524,9.213202,2.865069],[5.082088,-4.657789,0.873460,6.404745,5.106797,-0.889227],[0.662348,3.527531,-7.893360,-2.709671,9.132432,5.761999],[-0.586725,-0.871951,-1.095626,-3.374462,-2.768281,-3.141037],[-3.348079,8.013267,-3.672050,-1.346568,6.447678,3.950230],[5.941794,8.135021,-3.580760,9.219433,-6.872853,-2.322166]],[[6.687885,8.808703,0.285062,2.564173,4.562338,8.945282],[-4.701972,5.474285,-9.228964,-3.694535,8.096650,-7.640269],[-5.593021,-1.043376,3.628134,4.612149,-3.859574,-3.496976],[-0.347743,0.824930,7.454873,2.171119,-1.082912,6.331526],[-7.220413,-4.791033,-2.595959,5.365658,-3.933664,6.299503],[9.015448,7.485907,2.456434,3.742469,9.916727,1.796882],[-2.345087,2.864599,-6.243502,5.320075,-1.351334,-3.262205],[-4.436432,7.047560,0.102807,-9.193666,9.055987,-7.044913],[2.942647,-5.300621,-9.620683,4.545634,1.502051,-4.067200]],[[-4.882538,-8.596128,0.538648,2.670007,-3.502583,3.403824],[9.074162,-8.140331,7.763717,-0.412507,6.779007,3.479910],[-4.397155,-1.259241,0.304751,2.987966,-3.455718,-0.619145],[-7.519924,6.173435,-8.688023,6.847372,-7.454125,-2.650585],[-6.599571,-2.880604,-1.355380,-0.301118,5.772612,-5.549808],[9.231712,-0.247210,3.311521,5.304055,-0.889316,-3.972094],[1.408026,-4.560235,-4.286454,4.154147,3.033401,-8.125599],[-0.264834,6.865504,9.248541,-1.221701,1.317668,-7.826267],[-0.052449,4.143978,-3.533863,3.667666,3.736383,2.201492]],[[1.147818,-2.410583,-3.386675,-5.949928,5.468982,-4.016209],[4.167232,2.273906,3.775301,1.637246,-9.058426,-9.430696],[-1.567372,-6.328502,-4.450003,8.900187,4.168824,-7.027454],[-9.186265,-0.051588,-4.451638,-8.381206,7.722244,9.006029],[5.404944,-3.784863,6.805196,-5.816155,1.451084,4.564114],[-3.545505,2.001964,-8.199839,-1.369679,-9.740034,4.681276],[0.259687,-6.498891,2.112242,-3.165696,-2.696033,-3.612628],[7.262060,4.608310,-5.954236,-4.897121,-0.296100,-7.587074],[-1.125402,7.551396,3.538221,9.071414,6.100448,9.802770]],[[7.924008,3.992120,2.917716,2.351409,8.196123,7.536647],[5.328098,-6.137918,2.040591,4.518011,6.780700,-5.620370],[7.616640,-9.198220,7.087516,5.794463,7.636647,-4.318053],[6.245327,9.867822,-0.068140,-9.480898,1.297360,2.825762],[5.236350,-5.234894,-2.362479,5.138893,-6.680058,-2.374392],[5.225501,4.067172,-0.590265,5.640652,5.756433,-8.541614],[1.873890,-4.091560,-7.921557,2.893402,-9.643476,-2.873626],[-7.119798,-2.619816,4.347183,-9.983555,-7.058773,0.926896],[9.653272,-7.975950,-0.436235,9.542092,0.489553,-3.949565]]], dtype = "float32")#candidate|225|(10, 9, 6)|const|float32
bop_226 = relay.multiply(uop_223.astype('float32'), relay.reshape(const_225.astype('float32'), relay.shape_of(uop_223))) # shape=(10, 9, 6)
uop_229 = relay.acos(uop_223.astype('float64')) # shape=(10, 9, 6)
uop_231 = relay.cos(uop_229.astype('float32')) # shape=(10, 9, 6)
var_233 = relay.var("var_233", dtype = "float32", shape = (10, 9, 6))#candidate|233|(10, 9, 6)|var|float32
bop_234 = relay.bitwise_xor(uop_231.astype('uint64'), relay.reshape(var_233.astype('uint64'), relay.shape_of(uop_231))) # shape=(10, 9, 6)
uop_237 = relay.atan(uop_231.astype('float64')) # shape=(10, 9, 6)
uop_239 = relay.cosh(var_213.astype('float32')) # shape=(10, 9, 6)
var_241 = relay.var("var_241", dtype = "float64", shape = (10, 9, 6))#candidate|241|(10, 9, 6)|var|float64
bop_242 = relay.floor_mod(uop_229.astype('float64'), relay.reshape(var_241.astype('float64'), relay.shape_of(uop_229))) # shape=(10, 9, 6)
const_245 = relay.const([[[1.868117,4.676011,8.744472,6.634961,-9.916966,7.805869],[1.569361,-2.383919,5.832726,6.755929,8.363697,-0.845094],[4.687293,8.724343,1.972242,9.539743,7.246351,3.926135],[9.715660,-9.045901,-4.198173,3.609075,2.140917,6.335648],[1.769868,-6.092358,8.668110,-8.054801,0.171567,6.050613],[-5.946710,3.330933,2.236947,-5.037465,1.043621,-5.133941],[6.413751,7.464984,9.568138,7.881206,-5.250854,8.538796],[-6.072630,-2.804500,-8.259484,-4.456772,-7.873697,-2.178979],[-8.858544,-6.850021,2.966522,5.903039,-9.130586,4.649142]],[[9.682860,3.151654,0.703127,-2.742802,-6.897568,2.515410],[-7.343084,6.781731,0.500410,4.617848,4.517049,0.089304],[-8.701699,6.784764,1.840345,1.111248,6.131705,-7.039158],[3.531623,8.333178,0.221913,-6.511714,-1.122013,-3.086003],[-4.198989,-4.804066,1.943183,-0.448925,-5.334480,3.074925],[2.812977,0.784666,3.654177,9.500849,-2.074906,-0.509174],[9.547086,8.931582,-7.729666,5.004812,4.759479,-7.294407],[1.765964,3.334312,-8.582278,6.779745,8.328546,8.592935],[5.045575,6.492721,6.416569,1.913829,5.315981,-6.811514]],[[9.310071,-0.539280,4.366220,4.174818,7.892903,3.673889],[0.091946,3.761446,5.762125,0.735911,7.605649,-1.243752],[-1.094924,4.144132,-2.177872,-4.010099,4.267703,8.467424],[5.924296,6.970483,0.335340,2.149611,-4.539834,2.248840],[0.395194,-3.193752,6.049034,3.305663,-9.444650,3.406531],[-0.538903,-8.861164,-6.872539,2.677017,9.177786,7.598860],[7.053902,8.271995,7.610526,3.529488,-1.368404,-5.329003],[-8.793548,1.574831,-6.198066,6.776924,-0.036714,5.185332],[2.433327,6.517390,5.677020,9.729419,2.527154,-6.459911]],[[5.762919,1.796483,5.809365,-0.350101,6.483809,9.590842],[-1.725292,-6.501221,-0.824641,-3.089760,-2.070352,-4.670029],[-1.036766,-8.299666,1.660328,-4.260356,-4.521526,-1.048153],[4.204220,8.267193,-9.571395,8.325119,-2.385630,-6.488773],[4.820388,-4.255942,-3.548062,2.338359,6.988391,-2.278105],[6.078239,4.236516,-6.337490,8.835446,-2.805082,-7.144806],[7.843901,-4.973800,0.777656,0.363963,2.542448,1.910529],[-8.533111,-3.623612,-6.923801,-9.114074,0.446500,-2.460824],[3.636630,-1.260885,-1.218251,4.329450,-4.849304,5.518667]],[[-0.843203,-2.739113,7.124310,8.266146,-4.116435,6.680815],[-5.153551,-7.320374,3.528512,6.599929,2.294118,3.129095],[-5.252360,8.178989,-8.343087,-4.548313,1.086093,-7.724316],[-4.325647,9.838603,4.038470,-3.149087,-3.409775,0.824395],[5.941296,4.193388,-6.530838,-1.373263,9.515374,6.680386],[6.003310,-6.983540,-5.113923,9.936131,-9.049687,-9.538263],[8.084807,2.827843,4.949846,6.577025,3.475865,2.494560],[5.473433,-1.872646,-7.610380,-4.787962,1.245007,-5.370901],[5.428627,7.325573,-8.999483,8.458330,-9.348795,-5.416470]],[[-1.027180,-4.630069,-2.745879,3.348956,8.734894,-3.860531],[-4.240844,2.618565,3.881020,9.645397,2.412357,-5.371690],[-3.245836,0.134744,-6.362680,5.945970,-7.348743,-0.932233],[3.830238,-2.077765,2.562824,-5.031607,-5.191580,3.600533],[-7.555812,-4.870535,8.264435,7.508713,4.085631,-2.898969],[-5.112043,-1.982304,9.030486,1.378865,-8.604180,-2.191132],[-2.599269,7.611409,-4.998569,-3.210579,-5.764269,0.265644],[0.504956,5.033368,1.431111,-5.274109,9.148885,-7.535801],[1.771959,-9.014748,-1.178255,2.874389,7.062212,1.202260]],[[-1.299690,-1.950923,-6.149486,-3.778966,0.881432,-2.292015],[-7.788394,-3.170276,5.037811,-2.363586,6.556345,6.982746],[4.234189,-2.542983,4.596998,8.813737,-2.732759,-7.510248],[8.127181,-3.084302,8.510074,0.385115,-3.942926,1.349998],[9.281790,-0.075858,-0.040286,-3.045270,0.982459,9.714203],[-8.035134,-1.567413,-3.073869,0.169573,2.833707,-1.642986],[3.903010,-7.934765,-2.185910,6.991805,-6.343442,-4.003365],[1.576433,-3.843036,2.947923,-2.889710,-2.948769,-4.143033],[2.219647,-8.106089,-7.286418,0.503982,3.469556,8.647765]],[[-4.239215,1.240809,-1.571290,9.614938,-1.283276,-5.601526],[6.360558,9.558381,1.300534,5.200861,3.331239,-0.462900],[-4.968715,1.073860,7.160427,5.965219,-1.088041,-5.574879],[-8.204729,-6.726608,-3.258093,8.426722,6.717737,9.864050],[-1.076278,-0.497834,0.603661,3.547611,-1.170216,6.926710],[8.022573,9.801873,1.729020,4.168824,-0.636403,-2.769829],[-8.535727,-6.778783,-8.064370,2.574824,-8.547239,-1.583596],[-6.256245,-9.021507,3.273480,-1.074222,-8.236998,-0.678340],[-1.655042,-5.816289,9.698647,2.137609,-1.373198,-9.942912]],[[1.588132,7.862850,4.199551,5.322070,-9.165829,-5.703666],[4.612677,-9.843102,3.332818,2.590285,-9.551147,-0.407350],[-5.162327,-2.879221,8.504995,6.743275,-0.680782,5.850823],[2.807102,0.175837,-3.473576,7.027677,-5.692366,1.478884],[-6.126950,1.041402,-1.655711,-1.686736,1.706513,0.631100],[1.461352,-0.602878,-1.347846,7.072575,-9.185464,6.081754],[6.293499,6.015954,-0.871145,5.059721,8.819422,-6.882163],[-0.907587,0.166490,2.940489,-2.952861,0.153807,-1.663787],[-4.712525,9.862473,-7.629607,4.924925,0.456062,2.594775]],[[-3.688338,-7.993745,-7.751581,6.424599,-1.054479,-4.487791],[-6.546983,-9.669651,5.956594,0.960484,5.054575,8.354911],[2.018966,6.431057,0.675319,-7.762769,3.675287,2.611756],[8.083670,-5.736488,9.708050,9.898218,2.329143,-2.070567],[-5.945164,6.863103,-8.223052,7.716092,4.348717,9.040680],[-1.373508,-6.479151,-3.537164,3.108610,6.459372,7.309797],[-9.800950,-9.006074,3.094070,5.807351,-8.378037,2.549086],[6.958113,-2.728939,0.410223,1.051689,9.009175,1.592468],[1.977602,-5.369573,-4.299931,-6.111889,-7.905806,-7.984510]]], dtype = "float32")#candidate|245|(10, 9, 6)|const|float32
bop_246 = relay.logical_xor(uop_231.astype('int16'), relay.reshape(const_245.astype('int16'), relay.shape_of(uop_231))) # shape=(10, 9, 6)
uop_249 = relay.sin(uop_231.astype('float32')) # shape=(10, 9, 6)
output = relay.Tuple([bop_218,uop_221,bop_226,bop_234,uop_237,uop_239,bop_242,bop_246,uop_249,])
output2 = relay.Tuple([bop_218,uop_221,bop_226,bop_234,uop_237,uop_239,bop_242,bop_246,uop_249,])
func_251 = relay.Function([var_213,var_233,var_241,], output)
mod['func_251'] = func_251
mod = relay.transform.InferType()(mod)
mutated_mod['func_251'] = func_251
mutated_mod = relay.transform.InferType()(mutated_mod)
func_251_call = mutated_mod.get_global_var('func_251')
var_253 = relay.var("var_253", dtype = "float32", shape = (10, 9, 6))#candidate|253|(10, 9, 6)|var|float32
var_254 = relay.var("var_254", dtype = "float32", shape = (10, 9, 6))#candidate|254|(10, 9, 6)|var|float32
var_255 = relay.var("var_255", dtype = "float64", shape = (10, 9, 6))#candidate|255|(10, 9, 6)|var|float64
call_252 = func_251_call(var_253,var_254,var_255,)
output = call_252
func_256 = relay.Function([var_253,var_254,var_255,], output)
mutated_mod['func_256'] = func_256
mutated_mod = relay.transform.InferType()(mutated_mod)
const_258 = relay.const([2.515603,-1.008610,0.817542,-3.077654,-5.787256,7.523354,0.720163,-0.079876,1.014457,-0.284964], dtype = "float64")#candidate|258|(10,)|const|float64
var_259 = relay.var("var_259", dtype = "float64", shape = (10,))#candidate|259|(10,)|var|float64
bop_260 = relay.divide(const_258.astype('float64'), relay.reshape(var_259.astype('float64'), relay.shape_of(const_258))) # shape=(10,)
func_208_call = mod.get_global_var('func_208')
func_211_call = mutated_mod.get_global_var('func_211')
var_264 = relay.var("var_264", dtype = "float32", shape = (810,))#candidate|264|(810,)|var|float32
call_263 = relay.TupleGetItem(func_208_call(relay.reshape(var_264.astype('float32'), [6, 9, 15]), relay.reshape(var_264.astype('float32'), [6, 9, 15]), ), 1)
call_265 = relay.TupleGetItem(func_211_call(relay.reshape(var_264.astype('float32'), [6, 9, 15]), relay.reshape(var_264.astype('float32'), [6, 9, 15]), ), 1)
uop_266 = relay.sqrt(call_263.astype('float32')) # shape=(6, 9, 15)
uop_268 = relay.sqrt(call_265.astype('float32')) # shape=(6, 9, 15)
bop_269 = relay.floor_divide(uop_266.astype('float64'), relay.reshape(var_264.astype('float64'), relay.shape_of(uop_266))) # shape=(6, 9, 15)
bop_272 = relay.floor_divide(uop_268.astype('float64'), relay.reshape(var_264.astype('float64'), relay.shape_of(uop_268))) # shape=(6, 9, 15)
uop_273 = relay.cosh(bop_269.astype('float32')) # shape=(6, 9, 15)
uop_275 = relay.cosh(bop_272.astype('float32')) # shape=(6, 9, 15)
bop_276 = relay.multiply(bop_269.astype('int32'), relay.reshape(uop_266.astype('int32'), relay.shape_of(bop_269))) # shape=(6, 9, 15)
bop_279 = relay.multiply(bop_272.astype('int32'), relay.reshape(uop_268.astype('int32'), relay.shape_of(bop_272))) # shape=(6, 9, 15)
bop_280 = relay.less_equal(bop_276.astype('bool'), relay.reshape(uop_273.astype('bool'), relay.shape_of(bop_276))) # shape=(6, 9, 15)
bop_283 = relay.less_equal(bop_279.astype('bool'), relay.reshape(uop_275.astype('bool'), relay.shape_of(bop_279))) # shape=(6, 9, 15)
output = relay.Tuple([bop_260,bop_280,])
output2 = relay.Tuple([bop_260,bop_283,])
func_284 = relay.Function([var_259,var_264,], output)
mod['func_284'] = func_284
mod = relay.transform.InferType()(mod)
var_285 = relay.var("var_285", dtype = "float64", shape = (10,))#candidate|285|(10,)|var|float64
var_286 = relay.var("var_286", dtype = "float32", shape = (810,))#candidate|286|(810,)|var|float32
output = func_284(var_285,var_286,)
func_287 = relay.Function([var_285,var_286,], output)
mutated_mod['func_287'] = func_287
mutated_mod = relay.transform.InferType()(mutated_mod)
var_289 = relay.var("var_289", dtype = "bool", shape = (11, 15))#candidate|289|(11, 15)|var|bool
var_290 = relay.var("var_290", dtype = "bool", shape = (11, 15))#candidate|290|(11, 15)|var|bool
bop_291 = relay.logical_and(var_289.astype('bool'), relay.reshape(var_290.astype('bool'), relay.shape_of(var_289))) # shape=(11, 15)
output = bop_291
output2 = bop_291
func_294 = relay.Function([var_289,var_290,], output)
mod['func_294'] = func_294
mod = relay.transform.InferType()(mod)
mutated_mod['func_294'] = func_294
mutated_mod = relay.transform.InferType()(mutated_mod)
func_294_call = mutated_mod.get_global_var('func_294')
var_296 = relay.var("var_296", dtype = "bool", shape = (11, 15))#candidate|296|(11, 15)|var|bool
var_297 = relay.var("var_297", dtype = "bool", shape = (11, 15))#candidate|297|(11, 15)|var|bool
call_295 = func_294_call(var_296,var_297,)
output = call_295
func_298 = relay.Function([var_296,var_297,], output)
mutated_mod['func_298'] = func_298
mutated_mod = relay.transform.InferType()(mutated_mod)
var_300 = relay.var("var_300", dtype = "float32", shape = (2,))#candidate|300|(2,)|var|float32
uop_301 = relay.tan(var_300.astype('float32')) # shape=(2,)
var_303 = relay.var("var_303", dtype = "float32", shape = (2,))#candidate|303|(2,)|var|float32
bop_304 = relay.not_equal(uop_301.astype('bool'), relay.reshape(var_303.astype('bool'), relay.shape_of(uop_301))) # shape=(2,)
output = bop_304
output2 = bop_304
func_307 = relay.Function([var_300,var_303,], output)
mod['func_307'] = func_307
mod = relay.transform.InferType()(mod)
mutated_mod['func_307'] = func_307
mutated_mod = relay.transform.InferType()(mutated_mod)
func_307_call = mutated_mod.get_global_var('func_307')
var_309 = relay.var("var_309", dtype = "float32", shape = (2,))#candidate|309|(2,)|var|float32
var_310 = relay.var("var_310", dtype = "float32", shape = (2,))#candidate|310|(2,)|var|float32
call_308 = func_307_call(var_309,var_310,)
output = call_308
func_311 = relay.Function([var_309,var_310,], output)
mutated_mod['func_311'] = func_311
mutated_mod = relay.transform.InferType()(mutated_mod)
const_313 = relay.const([[1.954165,0.224808,8.271949,-7.296505,-7.054260,5.276952,-5.643257],[7.560488,9.614717,4.340672,-2.199426,8.565543,3.182153,5.853224],[4.613143,1.002188,4.681492,3.580189,-3.647017,8.704942,-8.696941],[-9.654530,-8.058489,-2.411354,-9.288204,-1.760044,-8.896951,-1.456838],[-9.043792,-8.946517,-4.752926,-7.134796,-0.595616,0.645901,8.541662],[-0.074240,7.775152,3.953397,-7.403237,4.404056,8.065991,6.671158]], dtype = "float64")#candidate|313|(6, 7)|const|float64
uop_314 = relay.log(const_313.astype('float64')) # shape=(6, 7)
bop_316 = relay.logical_xor(uop_314.astype('int64'), relay.reshape(const_313.astype('int64'), relay.shape_of(uop_314))) # shape=(6, 7)
bop_319 = relay.add(bop_316.astype('uint32'), relay.reshape(uop_314.astype('uint32'), relay.shape_of(bop_316))) # shape=(6, 7)
uop_322 = relay.acos(bop_319.astype('float64')) # shape=(6, 7)
uop_324 = relay.atanh(uop_322.astype('float32')) # shape=(6, 7)
var_326 = relay.var("var_326", dtype = "float32", shape = (6, 7))#candidate|326|(6, 7)|var|float32
bop_327 = relay.greater(uop_324.astype('bool'), relay.reshape(var_326.astype('bool'), relay.shape_of(uop_324))) # shape=(6, 7)
uop_330 = relay.log10(bop_327.astype('float32')) # shape=(6, 7)
bop_332 = relay.greater(uop_330.astype('bool'), relay.reshape(bop_316.astype('bool'), relay.shape_of(uop_330))) # shape=(6, 7)
const_335 = relay.const([[6.091132,0.993927,0.519221,3.930408,-9.911623,3.862118,6.514796],[-7.498802,6.032878,-0.010232,-6.016460,-0.803157,7.061571,-6.431819],[-1.098474,0.140528,-3.230128,-9.721105,-0.973939,2.905484,-0.822870],[2.101524,-1.745218,-3.244650,9.839515,-9.396917,6.215292,2.964563],[8.132956,-9.647300,-7.354632,1.538191,-7.175104,-5.521327,-1.051529],[-1.978771,-2.178422,-2.422224,8.386242,-6.853697,9.593657,-6.480092]], dtype = "float32")#candidate|335|(6, 7)|const|float32
bop_336 = relay.logical_or(uop_330.astype('bool'), relay.reshape(const_335.astype('bool'), relay.shape_of(uop_330))) # shape=(6, 7)
bop_339 = relay.power(uop_322.astype('float64'), relay.reshape(uop_324.astype('float64'), relay.shape_of(uop_322))) # shape=(6, 7)
uop_342 = relay.log10(bop_327.astype('float32')) # shape=(6, 7)
var_344 = relay.var("var_344", dtype = "float32", shape = (6, 7))#candidate|344|(6, 7)|var|float32
bop_345 = relay.floor_divide(uop_324.astype('float64'), relay.reshape(var_344.astype('float64'), relay.shape_of(uop_324))) # shape=(6, 7)
uop_348 = relay.sin(bop_336.astype('float64')) # shape=(6, 7)
uop_350 = relay.cos(uop_348.astype('float64')) # shape=(6, 7)
uop_352 = relay.log(uop_330.astype('float32')) # shape=(6, 7)
bop_354 = relay.maximum(bop_327.astype('float32'), relay.reshape(uop_342.astype('float32'), relay.shape_of(bop_327))) # shape=(6, 7)
uop_357 = relay.sin(uop_322.astype('float64')) # shape=(6, 7)
func_189_call = mod.get_global_var('func_189')
func_193_call = mutated_mod.get_global_var('func_193')
const_360 = relay.const([-6,3,2,-8,-9,7,4,10,-2,-9,-1,2,-4,-6,-7,-2,-1,-3,-6,-2,-8,10,-6,10,-3,3,-7,9,-8,-6,9,-8,-4,-3,-3,-9,4,1,-10,-8,-1,8,-7,-1,1,10,5,10,10,-4,-8,2,-2,2,5,6,10,-5,-10,-2,4,-3,-9,-2,8,-1,-9,-6,7,5,-7,-7,-7,-4,9,-2,-7,3,9,6,-1,4,8,-3,8,-7,10,-2,8,-6,1,1,-2,-5,-4,-8,7,-7,2,2,-7,-4,2,-4,1,9,-7,-1,9,-9,8,7,9,-10,3,10,-10,-5,-10,5,8,-3,-8,-3,4,-1,-1,-8,2,3,10,3,10,4,-8,1,-7,-2,-1,-4,-9,7,-3,2,3,-3,9,-4,-6,8,1,2,4,-5,-1,1,-5,-9,5,6,-7,2,-6,2,7,8,9,-8,-5,1,-1,5,-3,6,8,-6,2,-8,4,-2,1,-1,-9,-3,-1,10,9,9,2,9,-7,2,5,-10,1,10,-10,-2,9,5,4,-1,1,-4,-5,-10,10,-4,3,3,-3,-7,5,4,-9,-5,4,-3,-8,-7,-1,-5,-10,-7,-2,8,5,-10,7,6,3,-8,-9,-2,-1,10,-4,7,4,9,-4,1,2,-2,5,8,9,-5,-10,-5,-5,-5,10,5,3,9,-8,-7,-4,-3,6,9,9,6,-10,-10,-8,4,-4,3,2,5,4,4,2,9,1,5,-1,-9,4,5,-2,-9,9,-4,-3,3,-2,5,6,-1,-1,7,7,-2,3,2,-8,4,2,10,-8,5,2,3,6,-5,2,7,-5,-10,-8,-6,5,6,7,-3,1,-2,-7,-2,-2,-10,-10,4,7,6,8,10,1,1,3,10,3,8,-10,5,-1,6,3,7,-6,3,-4,-9,10,10,5,7,5,-10,-10,-6,-1,10,-2,3,-9,-4,-1,7,-3,5,8,-6,1,-7,4,-2,6,8,-9,8,9,-1,2,-2,-5,-3,-10,8,-8,2,8,6,6,-4,6,4,-5,-6,3,4,-4,2,7,-5,5,-8,9,-9,-9,-9,6,-2,8,-9,-5,-10,-9,3,4,-2,5,-4,-5,9,-7,-1,-4,5,3,5,-7,7,9,2,7,-2,6,-7,8,-5,6,7,2,-2,-6,-3,1,-6,1,2,6,10,-10,2,-7,-3,6,-3,-4,3,1,2,5,2,8,4,10,7,-5,1,10,2,-6,2,1,9,-1,-6,8,4,4,1,6,-5,9,-10,10,4,-1,5,4,-4,4,5,7,-8,-9,-4,-1,5,-7,-10,9,2,-10,1,-2,1,6,5,-5,-6,-6,-9,-1,6,1,4,9,9,-4,3,7,1,-10,-7,-1,-1,-3,-3,-7,2,-4,8,-4,-3,7,-6,2,8,-4,-8,9,-2,-2,-9,-4,8,9,3,1,6,6,2,9,-1,-6,8,2,8,-4,4,-7,-8,-6,-4,9,-7,-1,-4,-1,-3,-5,10,8,-1,4,10,6,10,1,1,3,6,8,-4,2,-6,6,-4,6,1,-1,-3,-1,10,-8,-3,-2,-5,-6,1,-6,-6,-5,-1,6,-2,2,-3,-10,-6,-6,1,5,-8,7,-8,-8,-9,5,-3,3,7,1,-10,-2,1,-3,-6,10,-9,5,4,-4,-6,3,1,7,3,7,-2,8,-9,-8,1,-2,7,-2,3,-3,6,-10,-4,-6,-6,-8,3,2,9,10,-9,2,10,-6,1,-3,5,-5,-10,-6,5,-7,-4,-2,-10,-4,-5,-5,-2,9,8,2,3,6,10,4,-8,4,1,-4,8,-1,6,-7,5,-4,8,-10,-5,6,8,1,-10,-7,-10,-3,-9,-9,-8,-3,-2,8,3,1,-4,-1,7,-8,6,-2,-4,-3,9,8,-8,-4,8,-10,-2,6,10,-8,-9,7,-2,2,-4,-1,-8,-2,-9,-9,-10,7,2,8,1,10,-2,9,-6,10,-5,4,-9,10,-5,-5,9,-7,-5,2,10,-10,-1,-6,8,-8,8,-8,10,-5,8,10,-3,-6,-9,-6,4,-1,5,-3,-5,7,3,-10,-5,8,6,1,-2,-10,7,9,-4,-8,8,-1,2,-4,-5,-8,9,6,-3,-9,-5,-5,6,6,4,8,-5,3,-9,4,3,-6,7,2,-10,4,-9,-10,5,-5,-9,-1,2,-4,2,4,-10,-10,4,-9,-10,-2,4,-3,7,7,1,-2,1,1,-4,1,-5,10,-4,6,4,4,-7,4,-7,9,9,10,-7,-5,7,-4,-10,4,5,-9,-5,4,10,-7,1,4,7,-1,-6,-5,4,-5,-4,-8,8,-8,10,6,-4,-8,9,6,-7,-8,3,8,-3,-4,4,7,-1,5,-7,-3,6,-7,-3,-8,-9,-5,-2,-2,6,3,7,-1,3,10,-9,-2,-4,9,-1,8,-7,-4,6,5,9,-1,6,-7,-8,-2,9,3,4,-1,-2,6,-3,-10,6,2,-3,-4,-5,-1,-9,1,6,1,5,-6,-2,6,-5,-6,-4,-8,1,8,-4,-8,-2,9,10,-10,4,4,2,-3,10,8,8,-1,-8,5,-7,-5,10,7,-5,-9,-4,-5,4,-5,-7,-8,-9,-6,-5,-10,-3,-1,8,5,6,-4,-6,9,9,4,-7,3,-1,-4,1,9,1,-7,8,4,-5,-4,-9,10,-7,6,-9,9,-9,6,-8,-1,5,-10,9,6,-2,4,-5,1,-1,3,5,1,6,-3,-4,-5,-4,1,9,-9,10,-4,10,-7,2,2,-4,3,-2,-8,1,-5,-8,-8,8,8,3,-4,-9,5,-3,-9,1,8,-6,-10,-2,4,5,-7,-1,10,-8,6,-7,9,9,-6,-9,4,3,-4,2,4,-2,-10,-7,7,-7,5,6,-4,9,5,-4,-5,4,-3,9,-4,10,2,-6,-5,5,-9,-3,6,-10,-1,-10,3,-6,-10,6,6,10,5,8,-1,9], dtype = "uint16")#candidate|360|(1120,)|const|uint16
call_359 = relay.TupleGetItem(func_189_call(relay.reshape(const_360.astype('uint16'), [16, 14, 5]), relay.reshape(const_360.astype('uint16'), [16, 14, 5]), ), 1)
call_361 = relay.TupleGetItem(func_193_call(relay.reshape(const_360.astype('uint16'), [16, 14, 5]), relay.reshape(const_360.astype('uint16'), [16, 14, 5]), ), 1)
uop_362 = relay.erf(bop_339.astype('float32')) # shape=(6, 7)
uop_364 = relay.asin(uop_350.astype('float32')) # shape=(6, 7)
output = relay.Tuple([bop_332,bop_345,uop_352,bop_354,uop_357,call_359,const_360,uop_362,uop_364,])
output2 = relay.Tuple([bop_332,bop_345,uop_352,bop_354,uop_357,call_361,const_360,uop_362,uop_364,])
F = relay.Function([var_326,var_344,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_326,var_344,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_326= np.array([[-8.296094,-9.501072,-2.601937,9.435842,5.067406,2.237772,-9.708616],[-2.827811,3.921440,7.287370,-6.864369,-5.440019,8.273124,4.358470],[-2.126142,7.650283,5.080512,1.943014,9.527073,-4.629034,9.780324],[-0.364853,-8.963232,-8.762147,4.749756,0.294810,3.600600,-8.891810],[-8.187160,0.250797,-6.308754,9.272532,-5.335680,5.733947,7.399769],[-0.809698,8.548690,-2.935750,-3.061622,-1.421836,-6.329881,6.882526]], dtype='float32')
module1.set_input('var_326', input_326)
input_344= np.array([[6.577688,0.191034,-5.631340,-5.056702,6.389506,-8.588556,-5.605240],[-9.386705,7.274354,5.948627,8.839301,-8.836275,-3.585772,9.208885],[-7.838955,-4.375402,0.964468,4.184834,-1.284037,-0.237185,9.666074],[9.645949,6.901355,-7.474892,-4.753335,7.002624,9.817770,6.339162],[-0.073402,5.678448,-6.792582,-6.146798,7.841284,6.617222,-6.928325],[6.348417,-5.774108,2.582985,-2.625615,-8.434863,3.954887,4.958216]], dtype='float32')
module1.set_input('var_344', input_344)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_326, input_344, )
res3 = intrp3.evaluate()(input_326, input_344, )
res4 = intrp4.evaluate()(input_326, input_344, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
module5.set_input('var_326', input_326)
module5.set_input('var_344', input_344)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_326, input_344, )
res7 = intrp7.evaluate()(input_326, input_344, )
res8 = intrp8.evaluate()(input_326, input_344, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
module9.set_input('var_326', input_326)
module9.set_input('var_344', input_344)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_326, input_344, )
res11 = intrp11.evaluate()(input_326, input_344, )
res12 = intrp12.evaluate()(input_326, input_344, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
module13.set_input('var_326', input_326)
module13.set_input('var_344', input_344)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_326, input_344, )
res15 = intrp15.evaluate()(input_326, input_344, )
res16 = intrp16.evaluate()(input_326, input_344, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
module17.set_input('var_326', input_326)
module17.set_input('var_344', input_344)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_326, input_344, )
res19 = intrp19.evaluate()(input_326, input_344, )
res20 = intrp20.evaluate()(input_326, input_344, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
module21.set_input('var_326', input_326)
module21.set_input('var_344', input_344)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_326, input_344, )
res23 = intrp23.evaluate()(input_326, input_344, )
res24 = intrp24.evaluate()(input_326, input_344, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()

'''6: TVMFuncCall
5: _ZNSt17_Function_handlerIFvN3tvm7runtime7
4: tvm::runtime::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const [clone .isra.808]
3: tvm::runtime::GraphExecutorCreate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module const&, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
2: tvm::runtime::GraphExecutor::Init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
1: tvm::runtime::GraphExecutor::SetupOpExecs()
0: tvm::runtime::GraphExecutor::CreateTVMOp(tvm::runtime::TVMOpParam const&, std::vector<DLTensor, std::allocator<DLTensor> > const&)

'''