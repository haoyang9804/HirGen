import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (13, 2))#candidate|0|(13, 2)|var|float32
uop_1 = relay.sinh(var_0.astype('float32')) # shape=(13, 2)
bop_3 = relay.bitwise_or(uop_1.astype('uint64'), relay.reshape(var_0.astype('uint64'), relay.shape_of(uop_1))) # shape=(13, 2)
uop_6 = relay.sinh(bop_3.astype('float32')) # shape=(13, 2)
bop_8 = relay.floor_divide(uop_6.astype('float64'), relay.reshape(var_0.astype('float64'), relay.shape_of(uop_6))) # shape=(13, 2)
bop_11 = relay.right_shift(bop_3.astype('uint64'), relay.reshape(uop_6.astype('uint64'), relay.shape_of(bop_3))) # shape=(13, 2)
uop_14 = relay.atanh(bop_11.astype('float32')) # shape=(13, 2)
uop_16 = relay.cosh(bop_3.astype('float64')) # shape=(13, 2)
uop_18 = relay.cosh(uop_6.astype('float64')) # shape=(13, 2)
var_20 = relay.var("var_20", dtype = "uint64", shape = (13, 2))#candidate|20|(13, 2)|var|uint64
bop_21 = relay.power(bop_3.astype('float64'), relay.reshape(var_20.astype('float64'), relay.shape_of(bop_3))) # shape=(13, 2)
bop_24 = relay.minimum(uop_16.astype('int32'), relay.reshape(uop_6.astype('int32'), relay.shape_of(uop_16))) # shape=(13, 2)
uop_27 = relay.acos(bop_24.astype('float32')) # shape=(13, 2)
bop_29 = relay.logical_and(uop_18.astype('bool'), relay.reshape(uop_27.astype('bool'), relay.shape_of(uop_18))) # shape=(13, 2)
output = relay.Tuple([bop_8,uop_14,bop_21,bop_29,])
output2 = relay.Tuple([bop_8,uop_14,bop_21,bop_29,])
func_32 = relay.Function([var_0,var_20,], output)
mod['func_32'] = func_32
mod = relay.transform.InferType()(mod)
mutated_mod['func_32'] = func_32
mutated_mod = relay.transform.InferType()(mutated_mod)
func_32_call = mutated_mod.get_global_var('func_32')
var_34 = relay.var("var_34", dtype = "float32", shape = (13, 2))#candidate|34|(13, 2)|var|float32
var_35 = relay.var("var_35", dtype = "uint64", shape = (13, 2))#candidate|35|(13, 2)|var|uint64
call_33 = func_32_call(var_34,var_35,)
output = call_33
func_36 = relay.Function([var_34,var_35,], output)
mutated_mod['func_36'] = func_36
mutated_mod = relay.transform.InferType()(mutated_mod)
var_38 = relay.var("var_38", dtype = "float64", shape = (16, 6))#candidate|38|(16, 6)|var|float64
uop_39 = relay.exp(var_38.astype('float64')) # shape=(16, 6)
bop_41 = relay.logical_and(var_38.astype('bool'), relay.reshape(uop_39.astype('bool'), relay.shape_of(var_38))) # shape=(16, 6)
bop_44 = relay.subtract(uop_39.astype('float32'), relay.reshape(bop_41.astype('float32'), relay.shape_of(uop_39))) # shape=(16, 6)
bop_47 = relay.equal(uop_39.astype('bool'), relay.reshape(var_38.astype('bool'), relay.shape_of(uop_39))) # shape=(16, 6)
bop_50 = relay.equal(var_38.astype('bool'), relay.reshape(uop_39.astype('bool'), relay.shape_of(var_38))) # shape=(16, 6)
bop_53 = relay.bitwise_or(var_38.astype('uint32'), relay.reshape(bop_41.astype('uint32'), relay.shape_of(var_38))) # shape=(16, 6)
uop_56 = relay.cosh(uop_39.astype('float64')) # shape=(16, 6)
uop_58 = relay.asin(uop_56.astype('float32')) # shape=(16, 6)
bop_60 = relay.mod(uop_58.astype('float32'), relay.reshape(var_38.astype('float32'), relay.shape_of(uop_58))) # shape=(16, 6)
uop_63 = relay.exp(var_38.astype('float32')) # shape=(16, 6)
uop_65 = relay.atan(bop_60.astype('float64')) # shape=(16, 6)
uop_67 = relay.asinh(uop_65.astype('float32')) # shape=(16, 6)
uop_69 = relay.asinh(uop_56.astype('float32')) # shape=(16, 6)
bop_71 = relay.floor_divide(uop_65.astype('float64'), relay.reshape(bop_60.astype('float64'), relay.shape_of(uop_65))) # shape=(16, 6)
var_74 = relay.var("var_74", dtype = "bool", shape = (16, 6))#candidate|74|(16, 6)|var|bool
bop_75 = relay.floor_divide(bop_47.astype('float64'), relay.reshape(var_74.astype('float64'), relay.shape_of(bop_47))) # shape=(16, 6)
bop_78 = relay.maximum(uop_67.astype('uint16'), relay.reshape(uop_39.astype('uint16'), relay.shape_of(uop_67))) # shape=(16, 6)
uop_81 = relay.cos(bop_78.astype('float32')) # shape=(16, 6)
uop_83 = relay.acos(bop_78.astype('float64')) # shape=(16, 6)
uop_85 = relay.sin(uop_67.astype('float64')) # shape=(16, 6)
output = relay.Tuple([bop_44,bop_50,bop_53,uop_63,uop_69,bop_71,bop_75,uop_81,uop_83,uop_85,])
output2 = relay.Tuple([bop_44,bop_50,bop_53,uop_63,uop_69,bop_71,bop_75,uop_81,uop_83,uop_85,])
func_87 = relay.Function([var_38,var_74,], output)
mod['func_87'] = func_87
mod = relay.transform.InferType()(mod)
var_88 = relay.var("var_88", dtype = "float64", shape = (16, 6))#candidate|88|(16, 6)|var|float64
var_89 = relay.var("var_89", dtype = "bool", shape = (16, 6))#candidate|89|(16, 6)|var|bool
output = func_87(var_88,var_89,)
func_90 = relay.Function([var_88,var_89,], output)
mutated_mod['func_90'] = func_90
mutated_mod = relay.transform.InferType()(mutated_mod)
const_92 = relay.const([[[8.095796,-3.086244,-4.971911,2.642959,8.119253],[-2.464554,-7.752758,-1.443388,-1.012597,-6.042412],[-0.867127,-9.508163,-6.665159,9.378792,0.754992],[-4.279152,-3.289957,0.981329,-1.682131,-7.879141],[-4.817989,9.411616,2.097298,3.817743,-9.769370],[-5.750277,-2.776931,9.145487,4.879087,-0.261214],[-1.832472,-4.811053,5.725566,4.962498,-4.115369],[9.408661,-8.281895,6.986586,2.333037,9.162304],[-7.766749,-4.581185,-6.831947,2.298547,-0.563870],[-9.275058,3.956544,-5.505108,1.573802,-0.324308],[1.393338,-6.956634,-6.783387,-7.375163,-0.858358],[6.545055,6.849987,4.605531,2.225393,8.143281],[-0.617979,-4.720938,-6.120093,-7.028619,-1.048828],[5.793812,-0.059080,6.825295,-8.591055,-5.847954]],[[3.584834,3.879913,-0.104018,-6.085877,-5.166665],[8.879702,-0.206843,-2.820623,-7.835362,-8.311277],[0.780448,7.322591,2.728696,-8.488042,-8.106166],[-4.673801,-0.868165,-5.592432,-6.994535,-0.556775],[-0.849253,2.859227,-8.152346,-9.471789,-2.591591],[9.698496,-0.037540,8.756246,-3.203710,3.884047],[3.391905,-0.673347,-8.775664,-1.736161,-6.755940],[8.918201,-8.050345,9.606677,-9.347427,-4.894122],[-7.372032,-8.754753,-4.505771,-5.274190,4.835597],[5.942172,5.531547,-3.661694,-4.309796,-4.859306],[8.181370,5.028391,-2.337654,-5.713869,-6.357564],[3.362873,5.094161,-2.552623,9.726933,-7.097785],[-2.530024,3.035145,6.893180,0.835323,-5.248341],[-0.910575,7.166864,-2.439943,-6.052477,-0.937430]],[[9.790887,0.419859,8.650415,-0.290483,-4.272233],[8.862254,-2.846100,-8.824550,-0.046278,5.756337],[6.036427,1.792855,2.218169,-5.024380,-5.517519],[0.532744,-7.821393,-3.191461,-7.137750,4.083892],[6.157518,6.694166,3.965557,-4.259399,-2.986431],[8.728051,3.311422,-2.547164,-9.251529,3.732223],[-5.298315,-7.195017,7.327357,-3.575097,7.763647],[4.094589,9.373821,-3.765896,-0.502268,-6.024661],[-6.518655,1.754150,-5.335142,-0.113629,-9.925981],[-4.021954,-9.271543,-5.311633,4.661409,8.798906],[-2.157801,-4.418032,-9.031444,-3.686719,1.751648],[6.336043,-8.646739,3.601270,-6.861016,6.323730],[1.069478,2.192692,-3.723392,-5.066192,8.921142],[-4.835578,-4.637232,0.459229,0.602031,8.207682]],[[-1.232370,-9.660274,2.176948,-0.529151,-5.335469],[8.242486,3.480465,3.612504,-8.186483,3.057799],[-1.677875,3.998485,-8.005693,7.451819,-7.302859],[-5.987359,7.232713,-4.767308,4.922875,-7.648212],[-5.641620,0.521891,1.608940,-4.686689,-6.976299],[6.905540,5.791233,5.347576,8.166695,-7.990362],[-6.345004,-2.275766,2.778422,-3.726043,3.500431],[-6.806135,-9.540620,8.665814,5.019235,5.656189],[-9.153976,-0.745442,4.398115,3.144102,-7.930033],[7.698927,6.322186,-1.681351,-8.087624,7.157836],[2.157672,3.806369,7.902490,1.434339,-5.369537],[7.114127,5.130365,7.268842,2.334808,0.192855],[-7.514974,-0.470805,5.029440,-5.336332,-6.420133],[3.567497,-8.510437,8.113567,-4.125611,-8.772329]],[[-7.120404,1.968183,2.640107,-7.796892,2.411340],[-6.301981,-7.057307,7.552997,0.911220,2.700248],[0.031880,7.804110,-5.298293,-6.334796,-3.935453],[4.981356,-8.277423,-3.687802,1.058774,-2.059670],[5.145150,-4.954095,-9.531160,3.841499,-4.508478],[8.716510,6.226254,5.376680,4.003089,-7.326021],[-9.433002,-5.476068,-7.904667,-5.854452,-5.305609],[4.034301,4.393024,3.631476,1.253382,5.426578],[-2.372105,-4.943406,8.890167,3.638923,7.496445],[-2.489505,7.528412,-7.579188,-6.635260,-1.801275],[3.974964,-3.216261,4.256317,-0.155001,-5.158625],[-2.273787,-0.176968,-4.050136,-3.493221,6.766947],[-4.504000,5.910903,-0.875920,9.119381,-0.959956],[3.796132,5.610749,-8.701011,-2.835541,-2.752925]],[[-9.669520,4.793148,0.705248,6.061809,5.162322],[6.594797,-1.780351,2.272315,-2.784219,1.112207],[-2.069638,-6.112429,-7.749504,2.622006,-4.719721],[1.489873,-0.744608,3.195746,9.594899,-3.670183],[4.886927,-4.958952,-8.833940,7.914531,-9.138842],[-3.562609,1.916597,0.445885,8.422353,-0.787685],[-0.162926,0.714074,-4.163747,-4.883148,7.550959],[-5.186788,-8.371779,-7.498929,0.452088,4.344838],[6.942268,-9.959549,-3.628211,-7.463397,-7.637878],[9.499913,6.306348,-4.318472,-5.162372,4.038508],[4.442868,-8.565281,-2.252500,-6.774595,-1.386990],[1.748986,7.858522,6.542391,7.334615,-7.625397],[-4.545080,-3.204819,-3.725909,-0.356699,9.927562],[-8.411488,4.540582,-4.217746,7.821507,0.250479]]], dtype = "float64")#candidate|92|(6, 14, 5)|const|float64
uop_93 = relay.tan(const_92.astype('float64')) # shape=(6, 14, 5)
uop_95 = relay.acosh(uop_93.astype('float64')) # shape=(6, 14, 5)
bop_97 = relay.greater(const_92.astype('bool'), relay.reshape(uop_93.astype('bool'), relay.shape_of(const_92))) # shape=(6, 14, 5)
uop_100 = relay.sin(bop_97.astype('float64')) # shape=(6, 14, 5)
bop_102 = relay.logical_and(bop_97.astype('bool'), relay.reshape(uop_93.astype('bool'), relay.shape_of(bop_97))) # shape=(6, 14, 5)
output = relay.Tuple([uop_95,uop_100,bop_102,])
output2 = relay.Tuple([uop_95,uop_100,bop_102,])
func_105 = relay.Function([], output)
mod['func_105'] = func_105
mod = relay.transform.InferType()(mod)
output = func_105()
func_106 = relay.Function([], output)
mutated_mod['func_106'] = func_106
mutated_mod = relay.transform.InferType()(mutated_mod)
var_107 = relay.var("var_107", dtype = "float32", shape = ())#candidate|107|()|var|float32
uop_108 = relay.asin(var_107.astype('float32')) # shape=()
uop_110 = relay.log2(var_107.astype('float64')) # shape=()
bop_112 = relay.greater_equal(uop_108.astype('bool'), var_107.astype('bool')) # shape=()
uop_115 = relay.asinh(uop_110.astype('float64')) # shape=()
uop_117 = relay.atanh(bop_112.astype('float64')) # shape=()
bop_119 = relay.bitwise_or(bop_112.astype('int64'), var_107.astype('int64')) # shape=()
uop_122 = relay.erf(var_107.astype('float64')) # shape=()
var_124 = relay.var("var_124", dtype = "float32", shape = (9,))#candidate|124|(9,)|var|float32
bop_125 = relay.power(uop_108.astype('float64'), var_124.astype('float64')) # shape=(9,)
output = relay.Tuple([uop_115,uop_117,bop_119,uop_122,bop_125,])
output2 = relay.Tuple([uop_115,uop_117,bop_119,uop_122,bop_125,])
func_128 = relay.Function([var_107,var_124,], output)
mod['func_128'] = func_128
mod = relay.transform.InferType()(mod)
var_129 = relay.var("var_129", dtype = "float32", shape = ())#candidate|129|()|var|float32
var_130 = relay.var("var_130", dtype = "float32", shape = (9,))#candidate|130|(9,)|var|float32
output = func_128(var_129,var_130,)
func_131 = relay.Function([var_129,var_130,], output)
mutated_mod['func_131'] = func_131
mutated_mod = relay.transform.InferType()(mutated_mod)
var_133 = relay.var("var_133", dtype = "int32", shape = (16,))#candidate|133|(16,)|var|int32
const_134 = relay.const([-4,10,-2,-3,5,8,-4,-10,2,9,-1,-1,7,-10,-6,8], dtype = "int32")#candidate|134|(16,)|const|int32
bop_135 = relay.logical_xor(var_133.astype('int32'), relay.reshape(const_134.astype('int32'), relay.shape_of(var_133))) # shape=(16,)
var_138 = relay.var("var_138", dtype = "int32", shape = (16,))#candidate|138|(16,)|var|int32
bop_139 = relay.multiply(const_134.astype('int16'), relay.reshape(var_138.astype('int16'), relay.shape_of(const_134))) # shape=(16,)
uop_142 = relay.cosh(var_133.astype('float64')) # shape=(16,)
uop_144 = relay.sigmoid(uop_142.astype('float32')) # shape=(16,)
var_146 = relay.var("var_146", dtype = "float32", shape = (16,))#candidate|146|(16,)|var|float32
bop_147 = relay.bitwise_or(uop_144.astype('int16'), relay.reshape(var_146.astype('int16'), relay.shape_of(uop_144))) # shape=(16,)
bop_150 = relay.logical_xor(uop_142.astype('uint64'), relay.reshape(bop_147.astype('uint64'), relay.shape_of(uop_142))) # shape=(16,)
bop_153 = relay.less_equal(uop_144.astype('bool'), relay.reshape(var_146.astype('bool'), relay.shape_of(uop_144))) # shape=(16,)
uop_156 = relay.acos(bop_153.astype('float32')) # shape=(16,)
var_158 = relay.var("var_158", dtype = "float32", shape = (16,))#candidate|158|(16,)|var|float32
bop_159 = relay.floor_divide(uop_156.astype('float64'), relay.reshape(var_158.astype('float64'), relay.shape_of(uop_156))) # shape=(16,)
var_162 = relay.var("var_162", dtype = "bool", shape = (16,))#candidate|162|(16,)|var|bool
bop_163 = relay.bitwise_xor(bop_153.astype('int16'), relay.reshape(var_162.astype('int16'), relay.shape_of(bop_153))) # shape=(16,)
output = relay.Tuple([bop_135,bop_139,bop_150,bop_159,bop_163,])
output2 = relay.Tuple([bop_135,bop_139,bop_150,bop_159,bop_163,])
func_166 = relay.Function([var_133,var_138,var_146,var_158,var_162,], output)
mod['func_166'] = func_166
mod = relay.transform.InferType()(mod)
mutated_mod['func_166'] = func_166
mutated_mod = relay.transform.InferType()(mutated_mod)
func_166_call = mutated_mod.get_global_var('func_166')
var_168 = relay.var("var_168", dtype = "int32", shape = (16,))#candidate|168|(16,)|var|int32
var_169 = relay.var("var_169", dtype = "int32", shape = (16,))#candidate|169|(16,)|var|int32
var_170 = relay.var("var_170", dtype = "float32", shape = (16,))#candidate|170|(16,)|var|float32
var_171 = relay.var("var_171", dtype = "float32", shape = (16,))#candidate|171|(16,)|var|float32
var_172 = relay.var("var_172", dtype = "bool", shape = (16,))#candidate|172|(16,)|var|bool
call_167 = func_166_call(var_168,var_169,var_170,var_171,var_172,)
output = call_167
func_173 = relay.Function([var_168,var_169,var_170,var_171,var_172,], output)
mutated_mod['func_173'] = func_173
mutated_mod = relay.transform.InferType()(mutated_mod)
var_175 = relay.var("var_175", dtype = "bool", shape = (13,))#candidate|175|(13,)|var|bool
var_176 = relay.var("var_176", dtype = "bool", shape = (13,))#candidate|176|(13,)|var|bool
bop_177 = relay.logical_or(var_175.astype('bool'), relay.reshape(var_176.astype('bool'), relay.shape_of(var_175))) # shape=(13,)
output = relay.Tuple([bop_177,])
output2 = relay.Tuple([bop_177,])
func_180 = relay.Function([var_175,var_176,], output)
mod['func_180'] = func_180
mod = relay.transform.InferType()(mod)
var_181 = relay.var("var_181", dtype = "bool", shape = (13,))#candidate|181|(13,)|var|bool
var_182 = relay.var("var_182", dtype = "bool", shape = (13,))#candidate|182|(13,)|var|bool
output = func_180(var_181,var_182,)
func_183 = relay.Function([var_181,var_182,], output)
mutated_mod['func_183'] = func_183
mutated_mod = relay.transform.InferType()(mutated_mod)
var_185 = relay.var("var_185", dtype = "bool", shape = (3, 9))#candidate|185|(3, 9)|var|bool
const_186 = relay.const([[True,True,True,False,False,True,True,True,True],[True,False,True,False,True,False,False,True,False],[True,False,False,False,False,False,False,False,False]], dtype = "bool")#candidate|186|(3, 9)|const|bool
bop_187 = relay.logical_and(var_185.astype('bool'), relay.reshape(const_186.astype('bool'), relay.shape_of(var_185))) # shape=(3, 9)
func_166_call = mod.get_global_var('func_166')
func_173_call = mutated_mod.get_global_var('func_173')
var_191 = relay.var("var_191", dtype = "int32", shape = (16,))#candidate|191|(16,)|var|int32
call_190 = relay.TupleGetItem(func_166_call(relay.reshape(var_191.astype('int32'), [16,]), relay.reshape(var_191.astype('int32'), [16,]), relay.reshape(var_191.astype('float32'), [16,]), relay.reshape(var_191.astype('float32'), [16,]), relay.reshape(var_191.astype('bool'), [16,]), ), 3)
call_192 = relay.TupleGetItem(func_173_call(relay.reshape(var_191.astype('int32'), [16,]), relay.reshape(var_191.astype('int32'), [16,]), relay.reshape(var_191.astype('float32'), [16,]), relay.reshape(var_191.astype('float32'), [16,]), relay.reshape(var_191.astype('bool'), [16,]), ), 3)
var_193 = relay.var("var_193", dtype = "bool", shape = (3, 9))#candidate|193|(3, 9)|var|bool
bop_194 = relay.less(var_185.astype('bool'), relay.reshape(var_193.astype('bool'), relay.shape_of(var_185))) # shape=(3, 9)
bop_197 = relay.logical_and(call_190.astype('bool'), relay.reshape(var_191.astype('bool'), relay.shape_of(call_190))) # shape=(16,)
bop_200 = relay.logical_and(call_192.astype('bool'), relay.reshape(var_191.astype('bool'), relay.shape_of(call_192))) # shape=(16,)
output = relay.Tuple([bop_187,bop_194,bop_197,])
output2 = relay.Tuple([bop_187,bop_194,bop_200,])
func_201 = relay.Function([var_185,var_191,var_193,], output)
mod['func_201'] = func_201
mod = relay.transform.InferType()(mod)
var_202 = relay.var("var_202", dtype = "bool", shape = (3, 9))#candidate|202|(3, 9)|var|bool
var_203 = relay.var("var_203", dtype = "int32", shape = (16,))#candidate|203|(16,)|var|int32
var_204 = relay.var("var_204", dtype = "bool", shape = (3, 9))#candidate|204|(3, 9)|var|bool
output = func_201(var_202,var_203,var_204,)
func_205 = relay.Function([var_202,var_203,var_204,], output)
mutated_mod['func_205'] = func_205
mutated_mod = relay.transform.InferType()(mutated_mod)
var_207 = relay.var("var_207", dtype = "float32", shape = (3,))#candidate|207|(3,)|var|float32
uop_208 = relay.erf(var_207.astype('float32')) # shape=(3,)
uop_210 = relay.atanh(uop_208.astype('float32')) # shape=(3,)
uop_212 = relay.tan(uop_208.astype('float32')) # shape=(3,)
const_214 = relay.const([4.893474,-3.104029,-4.915209], dtype = "float32")#candidate|214|(3,)|const|float32
bop_215 = relay.logical_xor(uop_208.astype('int8'), relay.reshape(const_214.astype('int8'), relay.shape_of(uop_208))) # shape=(3,)
uop_218 = relay.cosh(uop_210.astype('float64')) # shape=(3,)
var_220 = relay.var("var_220", dtype = "float64", shape = (3,))#candidate|220|(3,)|var|float64
bop_221 = relay.greater_equal(uop_218.astype('bool'), relay.reshape(var_220.astype('bool'), relay.shape_of(uop_218))) # shape=(3,)
bop_224 = relay.right_shift(bop_221.astype('int8'), relay.reshape(var_220.astype('int8'), relay.shape_of(bop_221))) # shape=(3,)
bop_227 = relay.multiply(uop_218.astype('uint32'), relay.reshape(var_220.astype('uint32'), relay.shape_of(uop_218))) # shape=(3,)
bop_230 = relay.less_equal(uop_218.astype('bool'), relay.reshape(var_207.astype('bool'), relay.shape_of(uop_218))) # shape=(3,)
const_233 = relay.const([7.647279,8.623704,0.090317], dtype = "float32")#candidate|233|(3,)|const|float32
bop_234 = relay.power(var_207.astype('float64'), relay.reshape(const_233.astype('float64'), relay.shape_of(var_207))) # shape=(3,)
bop_237 = relay.left_shift(uop_212.astype('int64'), relay.reshape(var_207.astype('int64'), relay.shape_of(uop_212))) # shape=(3,)
var_240 = relay.var("var_240", dtype = "int64", shape = (3,))#candidate|240|(3,)|var|int64
bop_241 = relay.power(bop_237.astype('float64'), relay.reshape(var_240.astype('float64'), relay.shape_of(bop_237))) # shape=(3,)
bop_244 = relay.minimum(bop_234.astype('int32'), relay.reshape(bop_221.astype('int32'), relay.shape_of(bop_234))) # shape=(3,)
uop_247 = relay.sinh(bop_230.astype('float64')) # shape=(3,)
bop_249 = relay.power(uop_247.astype('float64'), relay.reshape(bop_230.astype('float64'), relay.shape_of(uop_247))) # shape=(3,)
uop_252 = relay.exp(uop_218.astype('float32')) # shape=(3,)
uop_254 = relay.sin(uop_252.astype('float32')) # shape=(3,)
uop_256 = relay.erf(uop_254.astype('float64')) # shape=(3,)
uop_258 = relay.atanh(uop_256.astype('float32')) # shape=(3,)
func_180_call = mod.get_global_var('func_180')
func_183_call = mutated_mod.get_global_var('func_183')
const_261 = relay.const([True,False,True,False,False,False,True,False,True,False,True,True,True], dtype = "bool")#candidate|261|(13,)|const|bool
call_260 = relay.TupleGetItem(func_180_call(relay.reshape(const_261.astype('bool'), [13,]), relay.reshape(const_261.astype('bool'), [13,]), ), 0)
call_262 = relay.TupleGetItem(func_183_call(relay.reshape(const_261.astype('bool'), [13,]), relay.reshape(const_261.astype('bool'), [13,]), ), 0)
bop_263 = relay.mod(uop_258.astype('float64'), relay.reshape(bop_227.astype('float64'), relay.shape_of(uop_258))) # shape=(3,)
var_266 = relay.var("var_266", dtype = "float32", shape = (3,))#candidate|266|(3,)|var|float32
bop_267 = relay.logical_or(uop_258.astype('bool'), relay.reshape(var_266.astype('bool'), relay.shape_of(uop_258))) # shape=(3,)
bop_270 = relay.greater(uop_256.astype('bool'), relay.reshape(uop_254.astype('bool'), relay.shape_of(uop_256))) # shape=(3,)
bop_273 = relay.minimum(uop_252.astype('int64'), relay.reshape(bop_221.astype('int64'), relay.shape_of(uop_252))) # shape=(3,)
bop_276 = relay.greater(bop_263.astype('bool'), relay.reshape(bop_224.astype('bool'), relay.shape_of(bop_263))) # shape=(3,)
bop_279 = relay.add(bop_230.astype('int16'), relay.reshape(bop_244.astype('int16'), relay.shape_of(bop_230))) # shape=(3,)
bop_282 = relay.bitwise_xor(bop_276.astype('uint16'), relay.reshape(var_266.astype('uint16'), relay.shape_of(bop_276))) # shape=(3,)
bop_285 = relay.less(bop_237.astype('bool'), relay.reshape(bop_282.astype('bool'), relay.shape_of(bop_237))) # shape=(3,)
uop_288 = relay.atanh(bop_276.astype('float32')) # shape=(3,)
bop_290 = relay.logical_and(uop_288.astype('bool'), relay.reshape(bop_249.astype('bool'), relay.shape_of(uop_288))) # shape=(3,)
const_293 = relay.const([True,True,True], dtype = "bool")#candidate|293|(3,)|const|bool
bop_294 = relay.power(bop_285.astype('float64'), relay.reshape(const_293.astype('float64'), relay.shape_of(bop_285))) # shape=(3,)
func_201_call = mod.get_global_var('func_201')
func_205_call = mutated_mod.get_global_var('func_205')
var_298 = relay.var("var_298", dtype = "bool", shape = (3, 9))#candidate|298|(3, 9)|var|bool
var_299 = relay.var("var_299", dtype = "int32", shape = (16,))#candidate|299|(16,)|var|int32
call_297 = relay.TupleGetItem(func_201_call(relay.reshape(var_298.astype('bool'), [3, 9]), relay.reshape(var_299.astype('int32'), [16,]), relay.reshape(var_298.astype('bool'), [3, 9]), ), 2)
call_300 = relay.TupleGetItem(func_205_call(relay.reshape(var_298.astype('bool'), [3, 9]), relay.reshape(var_299.astype('int32'), [16,]), relay.reshape(var_298.astype('bool'), [3, 9]), ), 2)
bop_301 = relay.right_shift(bop_290.astype('uint8'), relay.reshape(uop_247.astype('uint8'), relay.shape_of(bop_290))) # shape=(3,)
const_304 = relay.const([-7.725776,5.919078,2.372232], dtype = "float32")#candidate|304|(3,)|const|float32
bop_305 = relay.logical_xor(uop_288.astype('uint32'), relay.reshape(const_304.astype('uint32'), relay.shape_of(uop_288))) # shape=(3,)
var_308 = relay.var("var_308", dtype = "float32", shape = (3,))#candidate|308|(3,)|var|float32
bop_309 = relay.subtract(uop_288.astype('uint64'), relay.reshape(var_308.astype('uint64'), relay.shape_of(uop_288))) # shape=(3,)
output = relay.Tuple([bop_215,bop_241,call_260,const_261,bop_267,bop_270,bop_273,bop_279,bop_294,call_297,var_298,var_299,bop_301,bop_305,bop_309,])
output2 = relay.Tuple([bop_215,bop_241,call_262,const_261,bop_267,bop_270,bop_273,bop_279,bop_294,call_300,var_298,var_299,bop_301,bop_305,bop_309,])
func_312 = relay.Function([var_207,var_220,var_240,var_266,var_298,var_299,var_308,], output)
mod['func_312'] = func_312
mod = relay.transform.InferType()(mod)
var_313 = relay.var("var_313", dtype = "float32", shape = (3,))#candidate|313|(3,)|var|float32
var_314 = relay.var("var_314", dtype = "float64", shape = (3,))#candidate|314|(3,)|var|float64
var_315 = relay.var("var_315", dtype = "int64", shape = (3,))#candidate|315|(3,)|var|int64
var_316 = relay.var("var_316", dtype = "float32", shape = (3,))#candidate|316|(3,)|var|float32
var_317 = relay.var("var_317", dtype = "bool", shape = (3, 9))#candidate|317|(3, 9)|var|bool
var_318 = relay.var("var_318", dtype = "int32", shape = (16,))#candidate|318|(16,)|var|int32
var_319 = relay.var("var_319", dtype = "float32", shape = (3,))#candidate|319|(3,)|var|float32
output = func_312(var_313,var_314,var_315,var_316,var_317,var_318,var_319,)
func_320 = relay.Function([var_313,var_314,var_315,var_316,var_317,var_318,var_319,], output)
mutated_mod['func_320'] = func_320
mutated_mod = relay.transform.InferType()(mutated_mod)
const_322 = relay.const([[-9.301403,9.599243,-5.352221,-1.161402,1.904404,-3.010575,-9.901917,-6.436385,8.010096,1.759707,-8.306296,-5.500315,8.455142,0.684939,5.805105],[-5.165595,-2.421321,8.941489,4.571286,9.513099,0.294270,0.126357,-7.885314,2.564317,-1.959800,5.538284,-9.187899,-8.343905,4.545972,-4.174289],[-0.144727,-5.625742,-7.068017,1.371044,2.283132,7.167196,6.848925,8.152538,-9.865431,4.217411,4.142390,5.522246,6.071002,5.614383,0.614973],[6.929057,-0.800318,5.655415,0.840258,8.530640,0.402962,6.583250,0.110032,-9.978749,6.995076,-4.874739,3.722663,-8.705379,2.616360,1.117040],[-6.573776,-2.712935,-4.804613,6.875616,-8.270085,-7.895273,8.406208,-5.750988,-5.019136,2.455749,6.816373,-5.531032,4.939505,5.471561,1.390069],[-9.330441,2.140397,-2.396028,-5.533783,3.478841,-3.107867,-3.995191,9.520622,-1.861853,3.774186,-5.756668,9.248923,0.240713,0.704001,9.931434],[2.576742,-4.161718,-4.005655,-1.111253,3.581183,-4.950561,-4.153231,8.460541,5.138751,5.346336,4.645936,5.594620,1.886648,-9.270421,0.020115],[9.594796,0.501181,8.164172,-6.174393,-3.326868,2.908910,-2.122240,6.210646,-5.282030,1.906159,2.895250,7.095741,-4.993088,-8.616556,7.255954],[-7.874424,-4.088073,5.844619,-8.104726,-8.378422,7.328068,9.774432,9.543610,1.778629,9.585566,9.117853,-4.840154,-8.436142,7.759181,8.051083],[-9.900714,2.413267,0.835430,8.964910,8.571398,-4.470297,5.084561,-5.105866,-7.159419,-2.051190,-9.429426,-0.565583,-5.914515,3.220709,1.140811],[4.721200,2.326003,9.055467,6.267722,-6.665720,-4.884269,4.598628,-7.724309,-5.860671,3.096299,-1.417740,-8.332524,-0.244487,0.943276,9.075674],[-3.116486,9.104168,3.115041,-3.296311,4.916201,6.715997,3.751837,8.660820,-7.156884,-9.955468,8.105868,-5.460189,-8.831294,-9.512615,-6.877702],[-9.006160,-7.714875,-2.851663,-8.782985,-1.715441,7.940593,9.903046,-9.352788,-9.950169,-6.557047,2.648502,-6.165115,-2.084980,-7.604375,-1.714157],[-4.206557,-4.411336,-5.689528,-9.722164,5.754723,-1.744715,2.314021,-2.856573,7.975919,-9.718509,8.369477,7.200867,5.591144,-0.574964,-1.325512],[2.513929,-1.078108,-5.032452,-8.534221,9.116644,0.668073,2.435219,-4.383753,1.651779,-9.073689,2.263768,2.892112,0.490830,-5.273972,-4.967883],[3.417813,8.634480,3.306462,-7.456732,6.594179,-8.683258,-8.106086,0.365959,3.158965,-9.928827,-3.355526,0.956171,-5.318845,1.344271,1.104564]], dtype = "float32")#candidate|322|(16, 15)|const|float32
uop_323 = relay.log10(const_322.astype('float32')) # shape=(16, 15)
bop_325 = relay.right_shift(uop_323.astype('uint32'), relay.reshape(const_322.astype('uint32'), relay.shape_of(uop_323))) # shape=(16, 15)
uop_328 = relay.acosh(bop_325.astype('float64')) # shape=(16, 15)
const_330 = relay.const([[-9.625216,-6.256495,-1.706399,8.478113,-5.224983,-9.121316,-7.867757,2.361013,-4.812964,3.386036,3.654026,-2.805072,8.235437,9.487003,2.765297],[5.090067,5.074807,9.558764,4.334182,-6.400142,9.552956,7.451332,9.046284,-2.569537,6.237825,6.934440,9.192461,-5.767503,-0.934248,-9.635421],[-5.340056,4.417860,2.796252,3.691994,2.483986,-4.818491,-7.628667,-8.029717,-1.894255,-5.652465,-6.999001,2.055126,3.547616,6.982817,0.063197],[-3.784460,2.885845,1.869746,-4.445929,5.693156,7.538760,-8.171804,6.114701,4.335383,-0.594514,9.456233,1.962342,-8.835550,-9.270043,0.725930],[2.016045,-8.511934,1.537184,5.379504,-6.715262,-0.069598,-4.976432,-5.299376,6.466483,8.849971,0.137102,8.438660,8.507346,5.979927,1.241061],[-8.457680,-7.391209,7.901229,-9.988509,5.164100,3.362043,-2.730216,1.829166,4.883452,1.303629,-2.777953,4.388596,1.473643,6.272662,-7.288095],[0.068873,5.566852,9.332050,-1.584130,4.648160,5.135772,7.996615,-8.406605,-1.655754,8.447247,-3.136564,-6.698566,6.100386,3.756337,-9.314673],[3.482807,-4.575743,-3.172665,2.282445,1.275971,-8.184160,4.086613,6.142317,-3.948804,8.295710,9.161819,9.746864,3.645477,1.396830,7.075792],[9.309954,-4.089310,4.120042,7.688517,5.333794,7.781603,2.536695,7.602974,-5.124383,-2.368779,9.449483,-6.195312,5.021217,-5.538705,-4.560098],[7.555977,-8.616837,3.213779,-6.879309,0.322900,2.799870,7.926709,7.174351,5.949370,3.737061,-7.271804,6.951620,6.533637,-3.715072,-3.535868],[-4.805612,-9.268268,6.507781,-3.059637,8.798261,4.224442,3.251146,7.669169,4.349983,-5.321783,7.595801,9.493452,2.424429,2.081469,-8.447336],[-2.117498,8.216210,-3.036232,-6.710847,-7.551504,-2.748554,6.341042,1.600905,-7.626844,6.224422,3.537510,4.357727,-0.656022,1.210542,5.997826],[4.031058,-2.029244,-4.756231,1.711466,-3.167030,-5.284545,3.380328,-5.217892,4.737190,6.454036,8.387964,2.645983,1.948912,-5.498116,3.758628],[1.573892,8.357228,-5.817450,-0.816333,4.974982,7.668196,2.878661,4.662361,5.788871,-0.355682,2.793158,0.657419,3.575260,-7.947710,-4.545587],[2.072930,-7.486244,1.608817,-7.630930,-3.639643,-4.554254,-3.645040,-2.703810,0.840759,-7.688670,-3.612332,-7.637599,-1.316039,4.206999,2.081480],[-9.821525,9.014073,5.969513,5.281765,-6.840545,2.390929,-7.606641,-4.551592,7.019614,-5.041410,2.186674,-6.768630,4.476362,2.788165,6.965197]], dtype = "float32")#candidate|330|(16, 15)|const|float32
bop_331 = relay.add(const_322.astype('uint32'), relay.reshape(const_330.astype('uint32'), relay.shape_of(const_322))) # shape=(16, 15)
bop_334 = relay.floor_divide(uop_328.astype('float64'), relay.reshape(bop_331.astype('float64'), relay.shape_of(uop_328))) # shape=(16, 15)
bop_337 = relay.logical_xor(uop_328.astype('int8'), relay.reshape(bop_331.astype('int8'), relay.shape_of(uop_328))) # shape=(16, 15)
uop_340 = relay.rsqrt(bop_325.astype('float32')) # shape=(16, 15)
uop_342 = relay.log10(const_330.astype('float64')) # shape=(16, 15)
uop_344 = relay.sqrt(const_322.astype('float32')) # shape=(16, 15)
output = relay.Tuple([bop_334,bop_337,uop_340,uop_342,uop_344,])
output2 = relay.Tuple([bop_334,bop_337,uop_340,uop_342,uop_344,])
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()()
res3 = intrp3.evaluate()()
res4 = intrp4.evaluate()()
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()()
res7 = intrp7.evaluate()()
res8 = intrp8.evaluate()()
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()()
res11 = intrp11.evaluate()()
res12 = intrp12.evaluate()()
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()()
res15 = intrp15.evaluate()()
res16 = intrp16.evaluate()()
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()()
res19 = intrp19.evaluate()()
res20 = intrp20.evaluate()()
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()()
res23 = intrp23.evaluate()()
res24 = intrp24.evaluate()()
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()

'''9: TVMFuncCall
8: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::transform::Pass, tvm::IRModule)>::AssignTypedLambda<tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}>(tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
7: tvm::transform::Pass::operator()(tvm::IRModule) const
6: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::LazyGradientInit(tvm::RelayExpr const&, tvm::IRModule)
0: tvm::relay::CheckFeature(tvm::RelayExpr const&, tvm::relay::FeatureSet const&)

'''