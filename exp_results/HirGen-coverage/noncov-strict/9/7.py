import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = ())#candidate|0|()|var|float64
uop_1 = relay.atanh(var_0.astype('float64')) # shape=()
const_3 = relay.const([[[5.227610,8.145988,4.126079,-8.587827,3.479245,9.631692],[9.238339,-5.046357,-1.376097,7.518225,3.092352,5.317826],[-2.578583,-8.589083,-7.062282,6.935795,-2.730558,-5.630735],[-5.474717,9.741704,-3.400533,6.839096,-6.854783,-5.408612],[0.627775,5.213414,5.294948,1.921075,-3.936286,-7.546530],[0.288237,-3.401313,1.884649,8.678885,6.449293,8.820059],[-0.122456,9.043449,1.907323,4.123163,5.249488,7.304717],[-0.986632,6.964868,-3.549592,6.729451,7.042456,-1.884498],[-7.964299,3.053059,-1.077734,-3.625252,1.034376,3.917143],[3.662869,-3.903997,6.309117,0.387471,-3.631477,-0.238500],[-3.537183,-7.281811,5.669714,-8.794944,-2.697042,1.580356],[8.940445,9.965379,-1.691643,7.575090,-3.991138,-8.696027],[6.600746,1.933266,-2.468816,0.416987,8.285538,5.653451]],[[-4.769886,-9.267569,1.534710,3.128900,0.140550,2.406158],[7.952105,6.478359,-3.936739,2.147518,9.069749,8.928725],[9.018370,7.350444,-4.190219,6.738853,-0.720124,-0.736693],[-7.496165,-7.815782,-6.270241,9.544966,-4.123028,7.122297],[-3.681640,7.303259,4.660507,-4.611315,6.750939,3.230834],[-5.808589,-4.548673,5.471233,-8.171565,-1.808548,4.411001],[-6.033535,-5.606921,-8.320258,-8.157423,-0.321840,-1.910526],[-3.140893,-1.014783,-6.497362,-5.575016,1.004648,-4.454295],[5.197694,-4.849859,7.775651,-0.404425,-5.881561,1.730405],[1.872625,2.783161,2.240968,3.045311,-9.727139,0.881411],[-2.819896,0.209954,-8.668033,-8.541406,-3.292115,5.013936],[-6.598543,-2.385196,-9.954377,8.609477,4.077250,6.673083],[5.113992,-6.243875,6.017061,-5.561724,1.825372,3.727586]],[[7.892613,8.763518,-0.325523,-5.059774,4.754518,0.397533],[-3.141566,2.744999,4.843570,-7.631330,3.169767,7.275794],[-3.459055,-2.387757,4.625504,7.783368,3.208308,4.019357],[8.726558,9.549315,-8.068474,-5.782721,9.438908,-4.176883],[-5.476838,6.325607,6.855969,-9.190630,2.673838,-5.573531],[-5.600152,9.553380,-4.438283,9.147472,-3.757977,-7.905421],[9.881656,6.460122,-8.537729,-4.671708,-1.324922,7.374069],[-9.720900,4.511415,-4.223365,-5.079761,7.084969,6.241323],[-4.044680,6.259657,8.390340,8.008182,-4.986213,6.356769],[-1.529978,-3.229094,-0.399337,3.999179,9.866466,-3.725413],[-7.695713,5.430371,-2.272124,6.149124,2.442376,-4.783880],[6.632201,-2.752093,-7.756458,-4.360649,7.492365,-9.019925],[-1.343161,-3.230729,-9.738179,-6.285490,1.211931,6.999477]],[[-0.786987,1.627787,8.414886,-7.964573,2.852522,7.626432],[-8.683307,2.113216,-2.707368,6.849453,4.496024,-7.099868],[-6.397202,-9.231137,-4.439624,-6.879527,-0.866018,7.915680],[4.961549,-8.631952,-1.626195,-4.895616,-4.979962,-4.088447],[8.255225,7.656165,3.130622,4.713993,-0.564816,1.373290],[6.357552,8.459924,2.166813,6.407530,-6.318853,-0.186674],[9.747933,-8.468494,-4.832713,-2.220282,-2.929189,-9.505639],[-2.808294,-9.476998,8.720688,2.375697,8.724642,-5.482171],[3.221697,2.293002,-3.371149,-7.051106,-9.316310,0.423697],[1.587407,6.656107,4.539508,6.319337,1.917894,2.899764],[-5.836283,0.167642,2.294746,-6.899320,9.713484,2.040923],[2.810646,-8.906735,-2.297928,-2.453525,8.881715,9.586175],[1.030872,-2.694776,-1.333371,6.589605,8.692424,-2.820943]],[[2.405542,9.202905,-7.774398,-1.159305,7.733487,-1.322581],[-9.314109,8.021412,-1.183766,-8.488664,-8.083966,-5.762170],[-1.807484,7.284327,-9.894050,9.388702,-6.391853,-3.693386],[9.314975,4.373587,4.618091,-8.330695,-4.861397,-8.099283],[-1.062515,2.298674,4.139168,-8.240976,0.404952,7.556150],[7.856636,8.296975,-6.886691,6.228108,-3.619663,-6.089649],[-8.399361,6.296295,-6.458340,6.446029,4.048693,7.078185],[-6.053465,-6.457264,5.348662,9.188882,-2.055121,9.521647],[-7.781844,-3.777088,9.408069,1.635707,3.284678,-6.242355],[-6.326944,1.653646,-9.853476,-1.339273,-8.626641,5.979129],[6.258602,-8.116375,7.610786,-3.413808,-2.934613,3.910671],[6.269358,2.341334,7.356697,-1.466595,8.894454,1.406067],[1.105448,-9.908224,3.182518,0.943840,-4.789617,-3.917828]],[[1.925829,-6.716969,-3.873458,7.752981,-0.782717,-7.607392],[8.717136,3.417415,-4.883686,-9.892915,-6.519365,5.973502],[-7.906914,-5.851747,6.324665,6.595128,9.971168,-6.106383],[7.948511,1.970197,2.713970,6.395714,7.885457,4.710556],[-9.128867,6.636857,7.610875,-5.389596,9.346586,-2.557890],[9.870479,-9.255892,9.931339,-6.598612,-0.280693,-0.952771],[-8.829491,-2.522381,-5.601908,6.144699,-3.311807,-2.658469],[-8.115064,5.932511,8.926772,-5.824784,5.701869,-0.780126],[1.153551,7.943626,-0.764590,7.696255,-2.772962,-4.980019],[-8.316713,6.482295,-7.607482,-6.840656,-3.790746,8.051946],[1.552010,-2.173471,-3.607390,-2.573540,-5.993237,1.559325],[1.091428,1.441090,0.260203,9.742962,1.851534,-5.530839],[-2.519665,-9.009683,-8.217827,-0.203706,5.976784,7.661983]],[[2.246499,-0.016990,4.366746,6.568470,-1.134619,-0.316844],[-6.056240,7.180903,-7.888621,-7.556670,-5.652840,3.350765],[-4.499379,9.610772,9.869973,7.187920,-1.003801,-5.698900],[1.204502,-3.487039,-7.162992,9.910981,-0.021026,-7.721087],[-2.705877,3.442249,-2.649015,-2.201688,4.586795,-2.074386],[-0.902681,6.695983,8.889229,-7.302864,6.668405,6.230679],[-1.970681,0.824809,0.941273,1.674039,-6.943451,4.159796],[-0.640039,1.993719,4.850341,-7.442340,6.647273,-0.894425],[0.097405,0.804956,9.552998,-2.007196,-5.312512,2.469249],[2.184184,0.589283,3.812792,-6.054374,-8.106808,5.540072],[-0.238306,0.934231,-9.380833,-5.772375,3.288371,-8.749302],[-6.770782,-3.578697,-7.063422,1.115119,-0.350165,8.216529],[9.683647,8.064984,7.786384,0.441248,-9.214425,9.300798]],[[-6.142475,-1.533060,-7.315437,-9.082171,1.817949,6.017951],[-0.449552,-5.563677,6.672502,8.229441,3.970257,5.965128],[0.301483,-4.693179,3.749097,-2.807470,-8.586985,4.989778],[-0.995842,1.713195,-3.427597,7.867774,4.465210,-1.398954],[-6.424997,0.494674,-5.730059,-7.202137,1.640548,-2.637843],[1.748443,-8.405011,2.643325,-7.206060,-0.258829,-4.226149],[-8.043501,9.935807,7.980730,-8.232674,3.214848,6.860787],[-2.843395,-4.780454,5.382781,4.112756,6.557403,-0.345879],[4.478245,-5.070316,-4.552449,2.010523,2.209889,4.684519],[-5.965183,-0.294941,9.293385,9.006827,3.425698,-9.365182],[-4.916296,4.577889,8.758664,2.923147,-3.844867,-2.422562],[-5.780357,2.065402,7.495967,-4.926054,3.417804,1.311773],[-2.553868,-0.827158,-6.521837,-8.603372,-0.182523,0.141269]],[[8.104786,0.858992,-1.929458,4.181718,0.169304,-3.232961],[8.441940,-8.570385,5.585703,3.718265,-4.208287,-3.851667],[-8.027112,-8.581275,-9.545410,9.255254,-0.678366,-4.353630],[-7.070136,6.178498,-2.774598,-0.256609,-9.998310,-4.228689],[7.953093,7.612400,-1.758022,-7.949479,9.218826,6.437035],[-6.577371,5.654249,8.385636,-3.031705,8.325627,8.953280],[3.756620,8.762400,-6.284698,-2.927705,-9.220691,-8.357770],[8.049095,3.424878,0.053324,-5.756799,9.898102,-5.373310],[0.876107,0.710748,-1.745058,1.075057,-6.133179,2.669327],[-1.273426,-6.560500,4.613575,6.614138,-7.854432,6.386298],[-9.973357,6.255301,-4.653773,-1.375503,-7.302357,-5.592500],[8.564546,8.048206,5.197810,-6.094722,-3.552252,-4.404960],[8.103028,-0.904400,-5.763926,2.474422,3.708694,9.208257]],[[-7.429995,-8.171264,1.482835,3.184135,-9.359352,-3.012502],[3.216163,5.354510,-4.241896,-8.069938,-6.675568,3.688589],[-2.783136,0.349925,6.008209,0.774490,-6.913820,1.307084],[4.536859,-5.936899,4.005345,4.025720,-8.002520,-1.417031],[-7.764329,-5.978680,6.155714,9.470754,9.722181,0.116624],[6.252671,-4.921464,-3.650377,3.041728,1.800291,5.750099],[3.085795,6.695129,-6.467440,-1.480581,-4.297384,7.678987],[-4.739045,-8.429511,4.524212,-4.944740,-4.426719,-3.420368],[-0.059856,-4.925288,-2.640873,-8.807246,-0.271802,6.022916],[9.946048,4.928294,-8.156798,2.403255,-1.970965,-9.170465],[-5.159663,-5.979109,-3.372134,1.523728,3.618246,-9.984289],[-6.131734,0.931607,-3.942929,3.472266,-8.651348,-1.001264],[8.906625,8.586174,4.267571,3.378544,-9.043049,-2.656895]],[[-6.081008,-2.666366,-6.773891,4.625670,8.609778,8.932700],[4.500161,-0.099023,-5.358216,9.153338,-5.003011,0.013289],[-4.503926,2.321135,-2.794185,5.342081,-6.526560,-0.044925],[-3.108778,3.083786,-8.769602,-9.102545,4.361554,4.391825],[2.532572,8.189475,2.967768,8.453559,0.136858,6.390387],[-8.576274,-3.535863,-8.869583,0.443963,9.544501,-4.580617],[-4.750190,1.787806,3.566486,0.521375,2.096065,8.079169],[6.096924,3.110839,8.433960,-1.136365,8.664680,-6.069312],[-7.313175,8.502700,-8.226827,9.125593,-3.798687,-5.261780],[-4.007865,-9.277559,-1.263535,-1.645095,-6.576971,-7.217320],[-9.732686,5.977132,-6.674176,2.827222,-8.088872,-1.836066],[6.686586,9.760950,-1.442300,4.513750,8.729058,5.781739],[8.208050,4.260372,3.567450,-5.259323,-7.168918,7.905184]],[[0.892016,2.134627,6.442692,3.373204,-4.746804,-6.513483],[-9.504030,8.634398,2.503682,-8.910641,-7.064569,-0.483559],[4.825635,-3.782717,0.551133,-3.748269,-1.453353,-9.925294],[6.393345,-8.068560,-0.179370,2.548725,6.429027,-8.449888],[6.977297,4.274551,-1.778230,1.163863,-9.160300,6.507082],[0.336910,0.328775,-2.615762,-0.905030,8.107998,7.532644],[5.833073,-1.015791,4.197969,-1.421740,6.803450,-3.247065],[8.315617,-7.512981,1.197128,5.141184,9.895276,9.916138],[-1.367529,-6.038485,-1.776110,7.691179,-5.927337,-1.815674],[-1.869838,-9.651883,0.726237,8.007384,-6.330143,-0.394118],[-0.674746,-4.131657,-6.184405,3.340224,3.342159,-6.986425],[4.673519,-6.940182,-3.867077,6.836446,4.231349,-7.020708],[-4.816910,1.715749,3.927319,3.515208,-8.879642,-7.224009]],[[2.109376,7.538678,7.483437,-7.759072,-3.441477,-6.281789],[-0.325511,9.174742,2.474792,-3.770930,-0.504988,-4.678084],[5.348577,1.819902,1.717265,3.440092,9.793313,-8.159576],[-6.008473,9.832125,9.736112,6.265863,4.785244,0.703025],[2.641479,-5.601346,1.357860,9.155132,-5.822063,-1.725129],[-0.453652,-0.641027,7.950326,-3.676940,-8.223026,-0.722822],[4.091210,5.043418,-9.193482,1.281058,-0.983484,0.285334],[-1.284005,-9.944910,1.781280,1.699612,-1.849401,5.499017],[-4.036855,-2.768562,4.797420,-1.199672,-9.679887,2.758025],[-1.366787,-7.458024,5.583341,-2.772425,5.266540,-5.693081],[-0.920160,-1.295893,-9.610526,-5.844387,-1.831670,0.290109],[2.130337,-9.191653,8.934876,-6.565157,5.679150,-1.398552],[1.174612,-5.022060,2.927207,6.539749,-2.258207,8.138504]],[[-3.516460,1.027419,-5.691452,-4.781855,-3.838773,7.191698],[6.310766,0.149901,9.604003,7.138274,2.206963,3.533418],[-0.150233,-6.173961,-5.214774,0.412530,7.729168,7.543425],[1.627381,1.270570,4.474677,2.562158,-6.797992,0.576208],[-1.593440,-8.009500,-0.232958,3.062127,6.391119,-8.300100],[3.480922,-7.842371,-8.054597,-6.972997,7.670618,-8.761808],[-7.472646,4.222669,-4.324379,-3.583618,1.951407,-7.067777],[-6.037527,5.413069,4.606614,-6.426510,9.401352,5.628594],[-1.166434,-6.504143,9.081667,-0.287237,-4.389421,8.213347],[-7.355210,-2.646317,-6.796161,-0.744646,-6.772136,-4.221326],[8.753358,-2.857670,3.348802,-8.748201,1.777902,-3.170487],[6.397527,-1.510514,-3.368978,2.338597,-9.375727,6.751234],[-8.505779,1.407296,2.331794,2.866389,-0.328768,7.952161]]], dtype = "float64")#candidate|3|(14, 13, 6)|const|float64
bop_4 = relay.divide(uop_1.astype('float32'), const_3.astype('float32')) # shape=(14, 13, 6)
bop_7 = relay.equal(uop_1.astype('bool'), bop_4.astype('bool')) # shape=(14, 13, 6)
uop_10 = relay.erf(var_0.astype('float32')) # shape=()
bop_12 = relay.floor_divide(uop_1.astype('float64'), bop_4.astype('float64')) # shape=(14, 13, 6)
uop_15 = relay.cos(uop_1.astype('float32')) # shape=()
uop_17 = relay.atanh(uop_15.astype('float64')) # shape=()
bop_19 = relay.greater(uop_17.astype('bool'), uop_10.astype('bool')) # shape=()
var_22 = relay.var("var_22", dtype = "float32", shape = (12, 4))#candidate|22|(12, 4)|var|float32
bop_23 = relay.divide(uop_15.astype('float64'), var_22.astype('float64')) # shape=(12, 4)
uop_26 = relay.log10(bop_12.astype('float32')) # shape=(14, 13, 6)
var_28 = relay.var("var_28", dtype = "float32", shape = (14, 13, 6))#candidate|28|(14, 13, 6)|var|float32
bop_29 = relay.bitwise_and(uop_26.astype('uint16'), relay.reshape(var_28.astype('uint16'), relay.shape_of(uop_26))) # shape=(14, 13, 6)
bop_32 = relay.bitwise_or(uop_17.astype('int64'), bop_7.astype('int64')) # shape=(14, 13, 6)
uop_35 = relay.asinh(bop_19.astype('float64')) # shape=()
output = relay.Tuple([bop_23,bop_29,bop_32,uop_35,])
output2 = relay.Tuple([bop_23,bop_29,bop_32,uop_35,])
func_37 = relay.Function([var_0,var_22,var_28,], output)
mod['func_37'] = func_37
mod = relay.transform.InferType()(mod)
mutated_mod['func_37'] = func_37
mutated_mod = relay.transform.InferType()(mutated_mod)
func_37_call = mutated_mod.get_global_var('func_37')
var_39 = relay.var("var_39", dtype = "float64", shape = ())#candidate|39|()|var|float64
var_40 = relay.var("var_40", dtype = "float32", shape = (12, 4))#candidate|40|(12, 4)|var|float32
var_41 = relay.var("var_41", dtype = "float32", shape = (14, 13, 6))#candidate|41|(14, 13, 6)|var|float32
call_38 = func_37_call(var_39,var_40,var_41,)
output = call_38
func_42 = relay.Function([var_39,var_40,var_41,], output)
mutated_mod['func_42'] = func_42
mutated_mod = relay.transform.InferType()(mutated_mod)
var_44 = relay.var("var_44", dtype = "float32", shape = (15,))#candidate|44|(15,)|var|float32
var_45 = relay.var("var_45", dtype = "float32", shape = (15,))#candidate|45|(15,)|var|float32
bop_46 = relay.multiply(var_44.astype('float32'), relay.reshape(var_45.astype('float32'), relay.shape_of(var_44))) # shape=(15,)
output = bop_46
output2 = bop_46
func_49 = relay.Function([var_44,var_45,], output)
mod['func_49'] = func_49
mod = relay.transform.InferType()(mod)
var_50 = relay.var("var_50", dtype = "float32", shape = (15,))#candidate|50|(15,)|var|float32
var_51 = relay.var("var_51", dtype = "float32", shape = (15,))#candidate|51|(15,)|var|float32
output = func_49(var_50,var_51,)
func_52 = relay.Function([var_50,var_51,], output)
mutated_mod['func_52'] = func_52
mutated_mod = relay.transform.InferType()(mutated_mod)
var_54 = relay.var("var_54", dtype = "float64", shape = (15, 13, 4))#candidate|54|(15, 13, 4)|var|float64
uop_55 = relay.atan(var_54.astype('float64')) # shape=(15, 13, 4)
uop_57 = relay.cos(uop_55.astype('float32')) # shape=(15, 13, 4)
uop_59 = relay.asinh(uop_55.astype('float64')) # shape=(15, 13, 4)
bop_61 = relay.equal(uop_55.astype('bool'), relay.reshape(var_54.astype('bool'), relay.shape_of(uop_55))) # shape=(15, 13, 4)
var_64 = relay.var("var_64", dtype = "float32", shape = (15, 13, 4))#candidate|64|(15, 13, 4)|var|float32
bop_65 = relay.floor_mod(uop_57.astype('float64'), relay.reshape(var_64.astype('float64'), relay.shape_of(uop_57))) # shape=(15, 13, 4)
const_68 = relay.const([[[-0.594773,1.038926,0.967146,-2.794685],[6.292882,5.782854,2.921345,-9.694375],[8.799469,-6.252974,0.893709,8.161550],[1.058769,0.915821,8.668941,-6.400277],[1.020651,-1.425838,-1.601634,7.347904],[-4.057476,-7.095061,0.135557,3.006369],[6.406853,-9.977879,-0.386252,-9.065756],[8.683678,-0.289767,-4.546301,-0.186419],[-7.889081,-8.935535,3.232028,4.444986],[-7.176580,2.008409,-5.470213,-7.591311],[0.105041,-3.864200,-3.203740,7.077987],[-6.902778,-0.785769,-5.156392,-1.686432],[6.813178,3.400264,-1.872066,-3.629859]],[[5.954646,8.697200,1.889568,9.615971],[-6.418253,-6.315818,-3.004357,-5.834347],[1.503156,4.149750,5.840209,-6.106096],[0.152704,3.311828,-0.828989,-6.709876],[-8.729088,9.137822,-3.899920,-1.698374],[-6.418956,5.409866,-0.439021,-7.600228],[4.953912,4.562417,6.934001,1.405684],[-9.256973,4.301968,0.349423,-1.315580],[7.364466,2.543945,-6.055110,-7.075410],[-5.149607,6.791117,4.232557,-5.205589],[3.098850,7.156807,0.136115,7.719014],[3.070717,9.995708,7.568229,-7.625830],[5.895336,-7.222073,4.738361,3.381591]],[[-8.005997,-5.844723,-2.511873,-1.172711],[5.811276,-9.825499,1.773765,-4.644024],[-9.704016,8.765160,4.087081,-8.691287],[5.033107,-6.397866,2.002311,-6.579209],[-6.867873,2.999389,5.253927,-6.003295],[9.683071,8.520874,4.750152,-0.931818],[8.566131,8.931347,7.129701,-5.718059],[-5.287711,-7.519984,-3.334815,3.997184],[6.615189,0.647789,2.627034,9.079090],[-9.906885,5.869031,-9.647721,-7.904306],[5.851468,-8.596638,0.082964,4.233019],[2.102136,-7.560804,-7.981394,-6.379953],[-1.596574,-5.862956,-5.963401,7.515140]],[[-3.862645,-2.930230,-2.345006,6.006534],[-6.439935,-8.520609,-4.415616,0.832425],[5.357288,4.880031,4.113016,-1.706395],[8.291908,9.188757,-1.300988,-8.724949],[0.795421,-1.096377,0.443187,0.062762],[6.254780,-3.605851,2.990902,-9.791324],[9.492877,-3.719029,9.263969,-3.887265],[9.239456,-1.027021,-1.253207,3.408043],[4.264895,1.295951,3.728866,-2.285822],[0.643820,-0.160915,-1.300621,7.169804],[-9.756545,9.481112,-8.777815,-5.311190],[9.776533,-4.108700,8.957122,-3.749388],[2.177508,-0.662915,-9.274544,6.957473]],[[2.539713,4.297151,-5.238788,7.636958],[-7.746104,7.686454,-1.551884,8.995072],[-0.565822,-3.044627,8.489193,9.272358],[-7.956491,8.393798,-4.329186,-0.666289],[-5.654866,-4.949969,8.555995,0.334577],[-6.389460,-7.257040,-7.803199,-3.068691],[9.951290,-4.018750,9.899255,7.813323],[8.761647,5.066999,-5.786998,8.250996],[0.684517,3.856547,8.929434,-1.979602],[0.230472,7.083311,-2.335305,4.793765],[-7.159359,-9.551633,8.130102,2.812437],[-0.001514,-0.876395,7.877130,8.980623],[3.238216,7.312631,0.115349,-7.735802]],[[-3.757080,-1.536831,-0.237614,7.734909],[-1.594825,-3.631256,9.396410,-6.869629],[-8.773600,-7.753790,9.647928,-7.494788],[5.160551,1.152416,-4.361924,4.507728],[7.222743,8.571645,1.101974,-2.167788],[5.331090,6.610100,9.063653,-4.076449],[0.372097,5.950609,7.445213,9.897345],[0.912966,2.079917,9.544750,-8.219956],[9.121953,-9.943031,-3.832313,-5.265161],[4.660160,1.555206,9.669872,2.180134],[-2.650360,5.528078,-8.951085,-6.591593],[-5.903865,6.630693,0.917101,-9.496650],[-6.003375,5.530292,-7.718193,-4.100962]],[[-6.949890,-5.057029,9.166556,-2.648601],[-7.374927,7.178691,-9.016317,-6.162595],[-0.798965,-4.822203,3.967742,-7.003473],[5.505632,3.227172,3.841365,-8.473341],[7.062721,3.344763,-0.535489,-3.391961],[-1.208852,7.305156,-0.644265,9.405889],[-3.895091,-8.259204,-7.767501,5.111842],[-6.424301,2.126399,-7.761979,5.215180],[-0.742711,-3.652427,-3.834365,0.486631],[8.358382,-1.449137,-2.894625,-7.367901],[3.529489,2.454439,9.118896,-0.258082],[7.742701,9.053885,4.439515,0.544691],[3.669076,-3.211740,-5.607930,-5.019971]],[[-1.532117,8.184675,-7.886137,4.287178],[-6.434670,-7.057566,7.418534,-5.693768],[-8.390276,-7.064150,-9.865479,-8.618798],[-5.862857,-2.178596,-9.822891,-3.463839],[0.021299,-9.912811,4.203363,9.898303],[-9.916773,1.968962,-2.428389,-3.245863],[1.324797,-8.536839,-4.033414,9.516100],[1.775933,7.746823,3.529614,5.816697],[-8.949373,-3.287195,7.908068,4.198345],[3.749539,-5.102057,-7.602939,5.687215],[9.717481,-1.594378,-1.377298,-0.385969],[8.702448,3.497914,3.337925,3.164222],[-9.471867,8.725105,6.113389,4.766076]],[[6.676168,3.042218,-9.450118,0.627338],[-6.876214,3.711650,-5.902417,2.381583],[-4.394669,-5.516468,7.343161,3.154849],[8.432257,9.846385,7.428643,-0.929704],[-7.157594,2.979751,-2.312038,2.303308],[-6.310160,3.210092,-2.068142,-2.313424],[6.444542,2.441831,-1.184891,3.118951],[0.221246,-6.660042,5.366108,-2.326436],[-3.307566,3.411599,-7.017514,-3.006464],[0.209153,6.838685,-1.861711,-3.213753],[-3.968653,-3.789141,-2.406862,4.600713],[-4.536127,5.680554,-3.438743,-4.281686],[1.710913,1.144253,-8.955208,-1.184707]],[[0.269350,2.122358,1.104570,0.930554],[8.996692,-5.465136,4.013915,-6.209068],[4.847191,-8.426788,9.063357,8.010882],[-6.581840,-0.386406,-4.592540,-3.383835],[5.899097,7.183273,-0.175824,-7.936617],[-5.045066,5.890997,-4.019386,4.441342],[9.339639,6.657912,-2.878982,8.475140],[2.740793,7.888901,-2.314040,1.743047],[-9.218208,-9.066334,-3.108107,-3.900547],[2.935126,-1.366052,4.650558,-4.657867],[4.753254,3.506378,-8.762993,-7.548469],[6.466929,0.757190,-5.827757,9.566495],[8.105880,3.159737,-8.964917,-6.662859]],[[4.472027,-9.695171,-0.778865,-9.712160],[-3.595493,-5.224121,-1.568268,0.751314],[-4.409913,-6.694464,1.021427,7.932226],[4.596379,-2.987592,7.692540,-1.385976],[-0.466182,2.664150,3.054909,-7.588827],[-1.685682,-8.056422,-1.049079,-0.389225],[-5.583360,5.440506,-0.564409,-8.404238],[0.806204,5.304395,0.776111,0.606491],[-9.900427,-4.133584,-6.645112,-5.720375],[7.942258,-3.271171,-1.076760,2.079861],[4.648350,-7.474703,5.094687,3.019552],[-9.745943,9.608615,-8.688040,6.207230],[-3.320378,-1.103403,-1.721377,4.746083]],[[7.319088,7.664981,-0.967399,-7.440068],[5.605450,8.233352,0.605361,9.881195],[6.605061,2.606739,-2.796694,1.096384],[9.804517,3.636604,-4.363415,3.759885],[-3.450914,9.969763,3.072464,-3.770037],[-0.708222,-3.365721,7.961642,4.732887],[-1.227912,-1.198644,9.302697,7.086794],[-5.491092,3.884540,7.917117,-9.791849],[0.228045,-9.031909,-7.783098,-2.124558],[-1.883636,-8.078145,-3.664604,8.174452],[3.349240,2.184632,5.212227,5.600978],[-3.541144,-6.373587,7.870157,9.684303],[-5.933464,-1.747230,4.728360,4.972072]],[[4.172546,9.964045,-9.820424,-9.182388],[-5.806440,-9.210342,4.118114,2.716148],[-7.751468,6.565676,6.639488,8.890170],[8.550980,-6.537325,-6.150980,-0.098258],[9.314763,2.835333,-8.926687,4.426369],[-6.707152,-8.055252,6.146756,5.577705],[1.490782,-3.590718,5.884656,-5.227969],[7.954535,9.606030,5.550267,3.360886],[1.321459,-5.126211,-4.586989,6.737983],[5.057239,-2.977646,9.604164,2.989383],[6.631986,7.342381,5.559956,2.026652],[-2.585426,-8.399217,-4.226732,3.975415],[-3.047079,-4.546125,5.386594,4.447012]],[[9.042018,-5.086931,9.743810,-7.997848],[6.857906,-7.816751,9.584657,2.290568],[-7.348470,9.479927,6.487428,7.496634],[-1.731585,-5.253870,5.520766,3.500832],[-9.741677,8.681174,5.320522,-9.366886],[-4.821938,6.769860,-1.849859,6.451782],[-1.685327,5.805496,9.028673,2.884415],[-5.296327,-2.114285,-4.708021,1.703410],[6.997503,-0.564381,-4.418311,1.238812],[2.755826,-4.831509,2.758542,9.267024],[4.467865,1.932474,8.960615,-4.646217],[-2.182988,2.659913,-7.810281,4.781666],[8.356483,-6.078225,-4.871037,-4.297511]],[[-8.578163,2.789812,0.596709,1.524541],[-4.190865,3.980911,-9.359812,1.108518],[-6.352606,1.147883,8.244096,-1.954497],[-6.027177,-7.256516,-7.995433,2.870488],[-3.019510,-2.769710,6.849921,-0.616499],[-5.537401,7.772753,4.288780,-5.092202],[6.673744,4.270464,-2.696153,8.781734],[-7.650788,-0.009742,0.750458,-9.374341],[-2.581366,4.339693,-5.654915,1.164489],[8.757615,1.297005,-2.731575,3.545670],[8.544988,-4.761628,-0.855280,3.792133],[-1.010438,-0.362584,3.620691,3.409026],[9.324545,9.376085,-5.555521,4.016443]]], dtype = "float64")#candidate|68|(15, 13, 4)|const|float64
bop_69 = relay.less(uop_59.astype('bool'), relay.reshape(const_68.astype('bool'), relay.shape_of(uop_59))) # shape=(15, 13, 4)
uop_72 = relay.atan(bop_61.astype('float32')) # shape=(15, 13, 4)
uop_74 = relay.sqrt(uop_55.astype('float32')) # shape=(15, 13, 4)
uop_76 = relay.sigmoid(bop_69.astype('float64')) # shape=(15, 13, 4)
uop_78 = relay.sin(uop_55.astype('float64')) # shape=(15, 13, 4)
uop_80 = relay.acos(uop_76.astype('float64')) # shape=(15, 13, 4)
bop_82 = relay.maximum(uop_80.astype('int64'), relay.reshape(uop_76.astype('int64'), relay.shape_of(uop_80))) # shape=(15, 13, 4)
output = relay.Tuple([bop_65,uop_72,uop_74,uop_78,bop_82,])
output2 = relay.Tuple([bop_65,uop_72,uop_74,uop_78,bop_82,])
func_85 = relay.Function([var_54,var_64,], output)
mod['func_85'] = func_85
mod = relay.transform.InferType()(mod)
var_86 = relay.var("var_86", dtype = "float64", shape = (15, 13, 4))#candidate|86|(15, 13, 4)|var|float64
var_87 = relay.var("var_87", dtype = "float32", shape = (15, 13, 4))#candidate|87|(15, 13, 4)|var|float32
output = func_85(var_86,var_87,)
func_88 = relay.Function([var_86,var_87,], output)
mutated_mod['func_88'] = func_88
mutated_mod = relay.transform.InferType()(mutated_mod)
var_90 = relay.var("var_90", dtype = "float32", shape = ())#candidate|90|()|var|float32
var_91 = relay.var("var_91", dtype = "float32", shape = (1, 13, 3))#candidate|91|(1, 13, 3)|var|float32
bop_92 = relay.floor_mod(var_90.astype('float32'), var_91.astype('float32')) # shape=(1, 13, 3)
bop_95 = relay.floor_divide(var_91.astype('float32'), var_90.astype('float32')) # shape=(1, 13, 3)
uop_98 = relay.sqrt(var_91.astype('float32')) # shape=(1, 13, 3)
uop_100 = relay.cos(uop_98.astype('float32')) # shape=(1, 13, 3)
uop_102 = relay.rsqrt(uop_100.astype('float32')) # shape=(1, 13, 3)
var_104 = relay.var("var_104", dtype = "float32", shape = (4, 13, 3))#candidate|104|(4, 13, 3)|var|float32
bop_105 = relay.maximum(uop_102.astype('int64'), var_104.astype('int64')) # shape=(4, 13, 3)
bop_108 = relay.power(uop_100.astype('float64'), bop_105.astype('float64')) # shape=(4, 13, 3)
uop_111 = relay.acosh(uop_98.astype('float64')) # shape=(1, 13, 3)
var_113 = relay.var("var_113", dtype = "float64", shape = (4, 13, 3))#candidate|113|(4, 13, 3)|var|float64
bop_114 = relay.greater(bop_108.astype('bool'), relay.reshape(var_113.astype('bool'), relay.shape_of(bop_108))) # shape=(4, 13, 3)
var_117 = relay.var("var_117", dtype = "float32", shape = (4, 13, 3))#candidate|117|(4, 13, 3)|var|float32
bop_118 = relay.right_shift(var_104.astype('int8'), relay.reshape(var_117.astype('int8'), relay.shape_of(var_104))) # shape=(4, 13, 3)
uop_121 = relay.sin(bop_105.astype('float32')) # shape=(4, 13, 3)
bop_123 = relay.subtract(uop_121.astype('uint32'), uop_98.astype('uint32')) # shape=(4, 13, 3)
uop_126 = relay.exp(uop_98.astype('float32')) # shape=(1, 13, 3)
uop_128 = relay.acosh(bop_108.astype('float64')) # shape=(4, 13, 3)
bop_130 = relay.floor_divide(bop_123.astype('float32'), uop_98.astype('float32')) # shape=(4, 13, 3)
uop_133 = relay.acos(uop_121.astype('float64')) # shape=(4, 13, 3)
func_85_call = mod.get_global_var('func_85')
func_88_call = mutated_mod.get_global_var('func_88')
const_136 = relay.const([-2.348600,-4.015919,3.880110,-4.390964,-8.541163,-7.004395,-4.658246,-9.154006,-6.967258,-4.372431,-1.105495,-2.031221,-8.282370,-5.393574,1.695582,5.668976,-5.959096,-6.051607,6.157790,-7.138722,7.624510,-2.867392,-5.166482,0.255181,-7.767557,6.981247,2.691332,8.975760,-7.898966,9.617640,7.389477,-4.476528,2.746249,-1.012794,6.470238,-9.518526,7.407837,5.333190,5.219979,-3.700199,-2.469119,-9.336617,0.359873,1.734662,-8.583535,3.595407,-4.042165,8.561659,0.112022,-1.247013,-4.348962,0.936833,-5.947741,-5.648218,3.608479,9.039895,-9.249571,0.141821,1.004627,9.267468,-5.556356,-8.988284,-4.170703,-5.196445,4.664205,0.609679,0.824598,8.470155,6.065343,6.217603,3.018926,-6.260947,-1.248654,4.623972,1.690142,6.994451,-0.112504,-1.722362,-1.423460,-9.021001,1.834627,6.167333,-9.374050,-6.837914,-8.733995,6.849757,8.379248,1.668983,1.316087,2.368441,-1.028408,-6.227708,-0.409784,4.496009,8.875529,-4.545740,5.616719,5.757764,7.759591,5.070875,9.709062,1.039065,8.406856,8.036079,7.652159,0.423794,7.976299,-6.558626,-2.922910,-3.802706,7.088204,-9.365612,5.252476,0.842013,-8.518821,-5.137269,6.607078,-7.180804,2.796281,7.641587,-2.260965,-1.277427,3.929118,-0.353879,-7.160727,7.327517,3.126430,2.719799,-1.727118,1.524866,3.894536,-5.066252,1.490392,2.697890,-4.566088,-2.505462,6.794600,0.544862,6.827838,-1.077169,-2.381018,-2.168927,-7.630664,-2.322695,-7.553284,9.307483,-7.937164,-8.934038,-8.103890,-9.656008,-0.168459,4.991914,0.963435,-0.134800,-2.186379,-1.997795,0.038201,7.193226,-3.771255,-4.145179,3.884722,3.944153,6.849723,-8.976002,8.009613,1.675928,9.832982,-2.532219,0.115784,4.646142,5.040624,-7.731952,-6.668440,-4.333423,-9.381390,3.676145,-4.500388,5.602896,-1.337551,9.019249,-4.833401,-9.806694,-7.366864,-1.897090,1.337098,1.583287,4.809264,1.129308,0.044161,6.690701,-5.433322,-7.197256,8.901077,6.860871,6.084825,6.453899,0.541019,1.025761,-2.388858,1.649620,5.241624,8.603857,-7.256648,3.508152,-2.152898,8.621945,2.647187,-2.103760,4.809058,9.133430,-6.737434,-4.447825,-2.816522,6.399913,1.190333,-3.844993,-4.167100,-1.283287,2.997170,-9.352199,-8.302413,-7.904773,1.796349,-1.936837,-3.820826,2.964987,-6.667417,-5.890640,8.191490,-7.650550,-5.870711,-1.395741,-0.533142,-9.686859,-6.635138,9.239560,-8.360166,-5.086002,-2.494314,3.868745,-7.967618,-0.120787,-2.113148,3.400836,-4.875126,5.192588,3.143737,2.230369,-8.378089,4.190594,3.287378,6.342228,-5.743942,5.486337,-3.194084,-5.360431,-8.672444,3.793149,3.020221,-5.426931,-2.083498,1.267763,9.204166,0.198328,-3.104688,-2.029600,-1.508691,6.891261,-8.374506,9.423486,3.266719,9.956253,-9.171711,6.789098,-4.038229,-5.448484,2.441077,-3.854722,-7.840906,-9.357170,-3.417864,-0.672615,-0.295755,3.131548,3.908852,0.371804,-6.193423,-0.008169,7.101239,1.444431,9.530975,5.796444,3.407281,-1.532364,5.789521,-6.408468,7.006555,-9.013668,-9.667481,-2.925373,3.418515,7.043241,0.095404,-3.232796,7.558889,-1.034624,8.929208,4.304003,2.013895,6.100586,-6.546116,-7.834220,-3.301122,0.215555,-1.706075,-5.369687,5.892026,-8.323432,3.388027,5.916481,-9.624829,-2.830058,1.968255,-0.445016,8.387005,-3.615379,8.513935,5.728067,2.502769,-0.614064,0.348306,4.841847,-9.119917,5.226269,3.024949,-5.783456,-1.802401,6.081808,-2.421670,-4.892977,9.488567,1.406198,3.839300,6.690223,8.271572,-1.979714,-4.538504,5.607142,1.289751,2.267098,-5.490218,-6.041475,-6.522495,-0.319444,6.214330,-4.433533,2.224749,1.648819,-0.466931,-9.951897,5.072994,-8.207128,-3.491934,-4.397914,-3.516506,-2.652812,-3.470795,1.858075,2.850490,3.138124,-5.037447,4.614076,-4.001976,-5.926871,0.398440,-2.875001,-5.766151,0.759622,3.431508,-8.568198,3.358686,-8.466912,-7.376058,-7.107678,6.143076,-0.938069,1.152046,-2.282208,0.648675,-7.499961,4.979703,6.452943,-5.219517,-8.864741,-0.559408,1.999044,-8.945964,8.507032,-9.623931,-5.744999,-7.518081,8.030401,-7.961815,0.635213,2.234535,1.323894,-4.428774,-2.303451,7.932233,-9.189092,0.395217,3.138843,6.580369,-9.239765,-5.095040,-8.037583,-8.367481,-0.684443,5.095872,-3.777094,9.573468,6.772406,-1.347927,-5.788697,-9.750389,5.211382,5.335594,0.965494,-4.757230,-0.480597,-5.042826,5.949928,-8.323407,-1.729218,6.944716,-0.376931,-7.574095,-7.003400,5.523268,-0.854995,-3.594659,-7.841013,-3.889897,-9.301040,4.617498,2.052403,9.480093,-3.321545,-5.339467,2.273645,7.726996,-4.273745,9.226986,-9.565279,-8.312247,1.946245,9.609417,-9.824251,3.025263,-6.762950,4.040889,7.854854,-7.302031,-6.717908,-6.536632,-1.969162,-2.080424,0.623972,8.185169,-3.449924,-2.438278,-9.019583,4.575577,0.826236,-1.271490,-3.709335,1.518235,-6.519874,2.941429,-0.810945,7.584610,-0.707631,0.292593,2.189415,7.597782,-5.981847,4.749163,6.386235,4.788039,-6.126246,-6.668450,3.428590,-3.517426,0.402750,5.020283,8.735945,-4.133378,-9.174008,7.196007,0.652473,6.271968,-2.321828,-3.242991,-2.116210,-7.812073,9.455672,5.259047,-2.120582,9.860545,9.817109,4.126173,3.273907,-0.819602,9.847113,1.382743,0.748397,5.122556,-8.173831,0.737228,9.252540,1.916425,5.816169,-7.810076,-6.355973,7.033742,-0.136683,-3.385909,9.701057,8.633286,-0.842038,7.410776,0.842460,4.374549,-3.595376,-3.196676,-9.988178,6.077298,-3.779361,8.581896,8.144375,7.426219,2.228625,1.495116,-8.755461,9.006451,2.060292,-8.424841,5.403301,-5.115336,6.287626,-3.027338,-7.069825,3.477789,0.412118,2.089488,4.146376,-6.221221,-2.065653,6.728116,-9.702277,9.897773,0.093310,-7.955121,8.127120,2.643860,-8.131596,-6.864217,3.682744,7.738465,-0.745158,7.867855,5.521181,-8.058989,7.552433,9.168782,0.478675,6.810688,-9.626178,0.422262,2.109488,-8.331561,-2.703986,-3.375317,-5.690431,-7.301086,3.322141,5.757970,5.367062,-3.405681,7.773298,-9.575973,0.078155,-3.976690,-4.982523,6.008249,-0.073634,0.730038,9.754293,-7.988488,6.837371,-2.897783,-5.377881,-3.369935,-0.271529,-1.237313,-2.553754,-4.865201,-7.546618,6.956861,-7.099047,-9.026823,3.148401,-3.536360,-3.995296,-2.657222,6.181004,-6.689262,-5.100118,-7.927160,7.982699,0.847624,9.844665,7.129576,-5.876056,-9.973275,-2.656758,7.502825,-5.902429,-6.665001,-3.690650,9.495710,7.435710,9.551820,-0.760231,-4.015685,-5.000594,1.622123,7.196351,5.817694,0.022342,1.971066,6.721086,3.002812,-9.703403,-5.618145,1.446986,-7.836505,7.547711,-6.273852,7.635674,4.869212,-8.816404,-4.870680,-2.342951,5.462705,4.484108,7.786449,9.374398,3.438117,-7.743332,-5.656746,3.218945,-9.318789,-3.959078,-7.722617,-6.524127,2.148935,-4.841940,-1.066212,-5.259208,-5.790590,-6.361326,-2.494488,4.439207,6.859981,6.105719,4.168301,4.500862,6.261679,-7.056705,4.677917,3.165985,-1.952889,-8.327601,-5.311791,-8.429784,7.331322,-3.918927,0.211131,3.029768,0.004897,-9.493580,6.086717,4.508756,-2.573451,-9.004694,-3.843605,-1.345909,3.337815,1.881312,8.268383,-0.768728,5.336390,-3.917578,-2.000282,5.952680,-0.299400,-5.175237,0.945576,-7.095233,-7.792513,-4.040091,4.099307,4.908923,5.558740,-5.262750,-6.609747,0.212320,-9.396258,-6.536998,5.538876,-3.115069,-6.475745,9.409283,-5.216041,5.455056,-7.810311,1.234577,-6.094239,-3.569840,-2.752963,9.679180,-8.880187,-0.271919,-2.265604,1.737876,-6.100814,-7.608795,8.769238,1.097017,7.263894,-8.471108,-0.261416,0.994751,-2.278792,-9.130306,1.738638,2.466153,5.689670,-3.516967,9.603782,9.423708,5.079741,-2.835305,-9.631858,8.411158,-6.706625,2.300963,7.617629,3.770241,1.593684,-5.134283,1.773156,-7.146545,6.252084,3.403334,-4.423622,7.326165,-3.138874,-3.578091,5.810246,-3.964457,5.533624,-5.686331,5.404673,-8.379946,0.084145,0.934626,0.271653,5.489717], dtype = "float64")#candidate|136|(780,)|const|float64
call_135 = relay.TupleGetItem(func_85_call(relay.reshape(const_136.astype('float64'), [15, 13, 4]), relay.reshape(const_136.astype('float32'), [15, 13, 4]), ), 2)
call_137 = relay.TupleGetItem(func_88_call(relay.reshape(const_136.astype('float64'), [15, 13, 4]), relay.reshape(const_136.astype('float32'), [15, 13, 4]), ), 2)
bop_138 = relay.power(bop_130.astype('float32'), uop_126.astype('float32')) # shape=(4, 13, 3)
uop_141 = relay.log(uop_133.astype('float64')) # shape=(4, 13, 3)
bop_143 = relay.less_equal(uop_102.astype('bool'), var_104.astype('bool')) # shape=(4, 13, 3)
func_37_call = mod.get_global_var('func_37')
func_42_call = mutated_mod.get_global_var('func_42')
var_147 = relay.var("var_147", dtype = "float32", shape = (2, 24))#candidate|147|(2, 24)|var|float32
const_148 = relay.const([-0.631935,9.381378,5.657796,7.541144,1.636827,-8.504539,9.443786,-4.055404,-5.961756,-9.305144,-4.562904,-0.823697,-7.723190,0.660236,3.721772,-9.669077,-7.758821,-4.269450,-3.964514,2.760950,7.643713,-1.960334,8.165795,-5.473839,-0.075014,-0.170368,5.063577,0.617603,-2.052566,0.763329,-4.818856,3.968919,-8.464384,-4.847842,-5.953019,-3.246254,7.082671,-9.107439,-6.756000,-5.568428,0.452724,9.696135,-7.715498,0.109931,2.072844,-2.184691,-4.633100,-5.428344,4.423658,4.910595,-4.406747,-7.269387,-0.206794,-6.318503,7.431969,7.175169,-7.714474,8.495816,1.525402,1.399466,5.665903,-9.956377,1.596830,-0.037670,-5.179884,-4.732506,-6.503889,-0.892585,9.310123,0.864912,-6.994920,-7.732601,9.649652,4.583695,-6.189290,-2.616720,-8.258273,4.244687,7.712962,-1.385291,9.833088,5.337632,5.050236,-2.730764,-0.449163,2.997323,-0.242053,6.683488,1.348583,-2.742240,3.970271,-7.451490,0.494982,-9.054629,1.951821,-1.431298,5.208307,-5.151970,-5.916251,-6.119837,-6.788283,6.016386,3.837483,1.929053,2.147664,-6.254445,-8.818129,-8.604920,-1.479269,-4.176119,4.281278,-3.022761,-5.129270,-3.955594,3.866999,-1.591781,-5.904381,-3.447970,-1.031660,0.799927,4.441567,6.602954,-6.491579,3.509180,-9.626440,-1.306517,4.130168,-8.305816,-6.744283,-6.032606,4.730816,3.052015,-8.238548,7.516381,3.748975,-4.069450,-0.498315,-3.596469,7.744031,4.286252,-8.969455,2.424932,-3.338274,7.168481,-2.684480,-0.807512,-8.991254,-9.206559,5.060933,-1.186417,-9.381671,0.338943,-2.686758,7.995281,-2.400473,7.841921,-2.004315,-6.175248,-3.585119,3.791293,9.333211,6.453161,-5.070187,-5.570682,6.088725,-2.863601,0.537045,4.458236,-7.279894,8.829313,9.752147,3.038542,1.837783,9.042616,3.152011,8.269201,-6.517273,2.315463,-6.453566,3.749398,-6.794053,6.634669,1.505526,7.346191,4.317525,-5.795167,9.572958,-3.934943,3.931530,-1.607655,1.318938,3.186560,-0.152786,-3.852518,-4.451252,6.642047,5.885299,-1.849193,3.496965,-4.528436,-4.065992,3.640409,-5.208760,3.822344,7.410652,7.282230,4.150572,5.371611,0.111005,-3.120902,8.251761,-1.372737,-2.479391,7.651203,-7.885661,-7.985818,0.736016,-7.842359,1.618720,6.934969,0.377766,7.971769,-1.859038,1.780110,-4.018956,7.191964,1.347360,5.178228,4.023226,2.807817,-8.690149,-0.434849,7.215494,-2.809107,-4.186736,-8.310909,-5.309701,-9.941767,-0.313270,-2.011046,4.082574,-2.070368,5.041475,-9.392182,-3.338238,-1.236851,7.690607,-9.981248,3.917253,-8.870919,1.204233,5.448789,-1.439234,-4.770486,1.971709,-7.282108,-0.019078,4.497742,-7.644662,-4.976428,5.887878,3.394385,-7.992713,-5.351975,-9.432999,4.157066,3.129940,2.472099,6.252897,-5.729548,-5.293749,0.445724,7.684473,-6.306053,4.990704,-1.759474,3.300495,7.423180,-6.224618,0.910613,-4.420932,-2.880729,-0.391230,-4.092814,5.220518,-4.265266,6.904124,-7.574281,7.906045,-2.050540,-7.845961,2.970864,-4.960002,8.864577,-0.786585,-3.773388,6.069754,-1.593134,-5.276932,2.880890,1.273403,-6.959942,-8.977201,7.514650,2.995171,-9.694115,6.972178,-8.476802,-4.412301,-4.489393,-2.715390,-6.653547,0.685721,9.606145,7.685314,1.343699,3.522680,8.627261,-2.774893,9.534525,-0.597218,4.190986,2.643163,0.593861,5.725164,5.092844,-3.853446,-5.679096,-6.753780,-8.074779,-8.842555,6.924319,0.737900,6.296915,8.857246,3.855040,-8.947890,5.075456,-8.484600,-5.816155,-6.683878,-8.059187,4.436269,-3.206585,-2.558527,3.746322,-9.956299,-3.071306,4.586632,-6.183005,-6.892501,-2.708532,-8.204471,1.948953,-9.257649,5.759355,9.393974,-7.349654,-8.771258,-0.936092,3.162559,5.114353,-0.945409,5.334001,-1.795806,5.185081,6.913679,2.422833,4.614673,8.044781,-0.735621,7.479933,-1.392807,-6.918254,-1.738641,8.880489,-4.130284,-8.329258,6.754484,-3.197327,3.065743,-3.323212,0.804267,-9.977643,-9.585694,7.525008,-5.634149,-9.910668,-9.176485,1.987066,-3.458024,-5.267635,-4.168159,3.356955,-3.219721,5.528700,4.536805,-1.492187,7.808206,-1.176900,-3.636457,5.807170,-9.648830,7.546555,-0.187540,2.554311,-2.757489,-4.798620,-2.695814,-7.105869,4.403422,-7.038557,4.609066,-0.501825,-1.121607,5.203652,-1.153353,8.771879,-0.991738,9.678504,-2.837645,4.450111,-8.549771,0.385495,-0.489762,2.447200,7.124909,-4.072336,-7.806355,6.815745,7.739435,-6.694981,5.594917,-0.335890,-6.226364,3.905258,7.388473,5.129934,-7.959848,-7.763716,-4.485647,-8.404112,-5.338291,2.420079,5.712518,2.998685,9.521870,-5.883726,9.369924,-1.270140,-6.041379,-9.013299,8.234550,2.350760,-3.140686,-5.543866,7.361199,-8.362064,2.367511,6.338798,3.539744,-2.451845,-2.833077,1.426292,0.889400,7.624114,2.432683,5.803296,-4.582763,-8.331320,3.489016,2.701072,-0.249752,-2.841115,9.663046,-2.921399,-7.407712,7.976043,-1.586039,-4.938883,2.733034,8.783122,-0.926476,9.982613,-8.819425,7.209104,-7.583601,-0.396627,9.382671,-9.176739,-2.882095,7.141522,1.174631,0.106683,7.137225,-5.076687,-4.892690,-5.927490,-5.383729,8.896669,9.228608,-2.289233,5.627677,-3.774177,9.067632,-1.205141,-9.927345,-6.304877,-1.351318,2.452036,-9.622515,-7.349845,3.466027,8.999262,-7.283988,-1.696898,3.834882,4.464161,-7.752415,5.365282,7.762991,0.200044,1.044529,2.956400,-8.304844,-5.743160,-2.004018,8.470485,9.828413,-3.849845,7.367826,5.728920,3.086372,3.901262,9.679119,-1.500593,-6.452695,-9.549801,3.179274,-5.149558,-9.230209,-3.882989,4.031573,-9.392140,-7.985109,8.584010,-7.080101,9.318830,1.931205,6.946487,0.219227,0.478343,6.906473,-0.942197,-5.340984,-2.870024,5.861543,5.258832,-3.879478,3.240880,-0.235379,-0.923541,4.485875,1.218537,9.477297,3.816462,-9.541000,-8.810209,-3.898282,-6.138472,3.499869,6.898404,-9.633813,-0.867254,7.624291,7.475620,-3.854286,-1.018251,1.003107,-4.193625,-9.247176,-7.260864,8.323477,-2.568563,7.926369,-4.134871,-9.501723,5.573183,-7.715567,3.402202,2.759227,-7.126264,6.255346,6.307276,-6.608934,2.966840,-6.743806,8.111775,-1.106183,3.226151,-1.301121,8.982429,-0.227071,0.934814,-3.864911,-6.300832,-5.906412,9.423823,3.599896,-5.585074,-1.509032,-2.302644,2.000360,-2.835333,3.810635,1.879091,8.171281,-4.531727,4.875980,7.961323,5.980162,4.226618,-4.414042,1.572765,-5.614933,2.261247,9.770723,5.482723,6.184517,-8.127150,4.446464,-2.791213,-0.562197,-5.998075,0.071656,2.166268,1.420117,-2.388994,1.522057,3.752330,0.182304,4.904446,-5.176939,-4.782914,-3.049137,5.650134,-6.074390,7.529930,-9.114573,0.656523,0.709735,-3.820950,7.587425,-8.379273,-6.000077,-2.582812,-8.756300,-7.247412,-9.254466,-8.969647,-9.107336,6.757792,3.019414,2.552824,-0.226929,7.750887,-2.112537,6.573544,-7.974008,-7.923445,5.195628,3.707753,-2.542730,2.990566,-2.017967,-1.498632,5.142725,6.991824,-9.397629,-2.253878,8.866589,-0.508331,-7.634428,-2.955450,3.264732,1.394748,5.047618,-8.737570,1.994445,2.809192,4.685224,-6.882649,2.635542,0.009522,-8.282509,-2.726571,-6.809571,2.970365,-7.119666,3.645254,1.575335,5.235063,8.978912,-6.691506,3.438238,-9.143460,5.601994,0.196410,5.569731,-1.625947,-0.161416,8.055237,9.591272,8.393101,-4.868184,9.255667,-2.475712,1.676288,-2.827664,-7.551661,7.941097,-7.198264,1.126159,4.696048,4.617242,-6.894313,-3.866933,-7.125744,2.304819,-4.624767,-9.044934,6.978252,-4.611911,7.604814,-4.515130,-1.467352,-8.947139,5.367276,-9.614263,-3.298353,-0.450659,2.207428,8.838692,1.807991,-0.283196,-9.940121,5.453464,8.167666,-7.586897,3.468515,-2.929261,-5.752320,-7.003669,-4.215633,-2.202360,-1.310705,3.942924,-2.509959,0.346235,7.034116,3.431630,6.952838,5.488475,-5.380422,3.627639,9.409679,8.407166,-7.115536,3.361081,-4.292032,-3.489825,-6.585459,-9.886719,-2.409954,-4.286235,5.630216,8.238970,6.941838,2.518626,8.345262,8.574342,-3.705207,-4.185051,-1.517030,8.050815,-6.742893,-6.728774,-8.502967,2.767816,-1.525141,-6.119472,3.835667,-4.758682,1.187284,-4.991061,-4.630184,6.891448,-3.301240,-1.420684,5.056581,5.141715,1.104514,-2.358620,-0.098804,-5.122012,-4.044473,5.973111,-9.441227,-6.974166,6.293351,-2.902116,-9.466474,6.222774,-5.763280,1.475058,2.787505,7.674710,-5.709287,-4.329620,2.641080,-5.990065,-4.402285,2.609577,2.388442,-4.006024,-0.308230,4.929867,-1.654250,0.924245,-9.307303,-0.522293,3.706733,-9.632407,6.551610,-3.652461,1.205068,-8.183262,-4.467172,-5.656548,3.323936,1.248028,-6.934307,-3.057311,3.764192,3.174707,0.370528,1.583243,5.021629,-5.358967,4.904225,0.651464,3.834090,-0.487361,4.164474,-0.525433,1.011454,-9.896320,-2.201989,-0.683029,-8.798119,5.014467,8.542416,-2.421194,-4.574191,1.732057,7.188790,-4.891343,9.193139,6.474829,1.781973,8.145232,8.147566,-8.313108,2.316754,6.859485,-5.814530,7.247875,3.091004,-2.974622,-5.240213,8.331715,-8.893685,3.657209,-6.533217,-0.464023,-5.061986,-9.939311,3.299483,4.198247,3.673772,-8.808120,6.144610,1.721694,7.137043,-1.296266,-3.066033,-3.141052,0.844127,-8.396898,-9.894580,0.664704,-9.796264,-5.782797,7.464631,-9.561490,-7.807273,-2.513562,-7.208616,-6.187277,-1.255505,-1.924787,0.829217,8.168270,-9.641397,-9.146290,1.959212,9.497653,-2.664136,6.490921,1.507407,-2.789502,0.496363,8.046106,0.380807,4.510961,-5.529345,-0.752660,-1.934607,-4.558874,0.084616,7.885145,-3.856250,-3.838052,-6.764814,-9.926514,-3.753580,3.961058,-9.974880,0.193383,0.816169,4.391454,-8.363679,6.569797,8.750235,2.088540,-8.458719,2.611214,0.556778,8.039166,-2.779464,6.194673,2.800342,-3.923676,7.791836,7.387803,-2.243573,-5.537809,-5.380189,-2.758156,5.383034,-0.735520,-4.561296,7.151852,3.170797,-1.840438,-1.852125,-5.246218,-5.972417,7.846407,6.097024,-0.458227,3.573607,-8.576100,-0.711815,-8.028350,6.813814,-6.207008,-5.997244,7.515158,-3.532174,3.156226,-2.533977,-9.822742,-3.063840,-2.274280,-5.525979,-3.438113,-4.439398,8.491925,2.737976,-9.837656,-4.160627,-5.850714,-9.575002,7.856884,1.307976,-2.895928,-4.627212,6.556008,-4.060456,-4.432443,-9.053262,0.656584,-5.592501,-6.057780,-8.099669,-9.924211,0.774788,8.141394,-2.836964,-5.882470,-1.167835,5.250016,-1.114080,6.618105,2.232081,6.611682,-5.081705,-8.431419,-4.666804,-3.619397,5.385486,1.954507,-1.875578,1.532012,2.071714,-7.890575,-1.880778,6.988738,-8.564466,6.745758,-6.275334,-5.521004,6.873963,8.278042,9.626132,-8.593356,-3.053735,8.158774,7.293316,-0.425105,-9.736031,-9.123758,-7.788086,0.133929,-1.333816,-6.636168,-4.278443,-6.496749,0.765357,4.385828,4.508093,-9.906330,1.969993,-6.468514,-9.473058,-3.331481,-0.319754,5.284569,-7.695447,9.341296,6.448682,8.513807,-3.111189,-1.105670,-3.184153,-3.841271,0.249613,3.180157,-2.760787,7.236248,-8.409871,-1.036743,-5.039094,-1.916384,-9.262113,-7.767653,0.002740,7.104156,0.846804,-6.313863,3.453730,0.237351,6.328972,-5.059210,0.371054,-2.291924,4.762366,-9.678800,-6.316742,-8.527811,-3.339934], dtype = "float32")#candidate|148|(1092,)|const|float32
call_146 = relay.TupleGetItem(func_37_call(relay.reshape(var_90.astype('float64'), []), relay.reshape(var_147.astype('float32'), [12, 4]), relay.reshape(const_148.astype('float32'), [14, 13, 6]), ), 2)
call_149 = relay.TupleGetItem(func_42_call(relay.reshape(var_90.astype('float64'), []), relay.reshape(var_147.astype('float32'), [12, 4]), relay.reshape(const_148.astype('float32'), [14, 13, 6]), ), 2)
bop_150 = relay.mod(uop_141.astype('float32'), uop_111.astype('float32')) # shape=(4, 13, 3)
func_37_call = mod.get_global_var('func_37')
func_42_call = mutated_mod.get_global_var('func_42')
call_153 = relay.TupleGetItem(func_37_call(relay.reshape(var_90.astype('float64'), []), relay.reshape(var_147.astype('float32'), [12, 4]), relay.reshape(call_146.astype('float32'), [14, 13, 6]), ), 0)
call_154 = relay.TupleGetItem(func_42_call(relay.reshape(var_90.astype('float64'), []), relay.reshape(var_147.astype('float32'), [12, 4]), relay.reshape(call_146.astype('float32'), [14, 13, 6]), ), 0)
uop_155 = relay.asin(uop_128.astype('float64')) # shape=(4, 13, 3)
bop_157 = relay.logical_or(uop_133.astype('bool'), uop_126.astype('bool')) # shape=(4, 13, 3)
uop_160 = relay.acosh(bop_150.astype('float32')) # shape=(4, 13, 3)
output = relay.Tuple([bop_92,bop_95,bop_114,bop_118,call_135,const_136,bop_138,bop_143,call_146,var_147,const_148,call_153,uop_155,bop_157,uop_160,])
output2 = relay.Tuple([bop_92,bop_95,bop_114,bop_118,call_137,const_136,bop_138,bop_143,call_149,var_147,const_148,call_154,uop_155,bop_157,uop_160,])
func_162 = relay.Function([var_90,var_91,var_104,var_113,var_117,var_147,], output)
mod['func_162'] = func_162
mod = relay.transform.InferType()(mod)
var_163 = relay.var("var_163", dtype = "float32", shape = ())#candidate|163|()|var|float32
var_164 = relay.var("var_164", dtype = "float32", shape = (1, 13, 3))#candidate|164|(1, 13, 3)|var|float32
var_165 = relay.var("var_165", dtype = "float32", shape = (4, 13, 3))#candidate|165|(4, 13, 3)|var|float32
var_166 = relay.var("var_166", dtype = "float64", shape = (4, 13, 3))#candidate|166|(4, 13, 3)|var|float64
var_167 = relay.var("var_167", dtype = "float32", shape = (4, 13, 3))#candidate|167|(4, 13, 3)|var|float32
var_168 = relay.var("var_168", dtype = "float32", shape = (2, 24))#candidate|168|(2, 24)|var|float32
output = func_162(var_163,var_164,var_165,var_166,var_167,var_168,)
func_169 = relay.Function([var_163,var_164,var_165,var_166,var_167,var_168,], output)
mutated_mod['func_169'] = func_169
mutated_mod = relay.transform.InferType()(mutated_mod)
var_171 = relay.var("var_171", dtype = "float32", shape = (1,))#candidate|171|(1,)|var|float32
uop_172 = relay.cos(var_171.astype('float32')) # shape=(1,)
uop_174 = relay.tan(uop_172.astype('float64')) # shape=(1,)
bop_176 = relay.floor_mod(uop_172.astype('float64'), relay.reshape(uop_174.astype('float64'), relay.shape_of(uop_172))) # shape=(1,)
output = relay.Tuple([bop_176,])
output2 = relay.Tuple([bop_176,])
func_179 = relay.Function([var_171,], output)
mod['func_179'] = func_179
mod = relay.transform.InferType()(mod)
mutated_mod['func_179'] = func_179
mutated_mod = relay.transform.InferType()(mutated_mod)
var_180 = relay.var("var_180", dtype = "float32", shape = (1,))#candidate|180|(1,)|var|float32
func_179_call = mutated_mod.get_global_var('func_179')
call_181 = func_179_call(var_180)
output = call_181
func_182 = relay.Function([var_180], output)
mutated_mod['func_182'] = func_182
mutated_mod = relay.transform.InferType()(mutated_mod)
var_184 = relay.var("var_184", dtype = "float64", shape = (16,))#candidate|184|(16,)|var|float64
var_185 = relay.var("var_185", dtype = "float64", shape = (16,))#candidate|185|(16,)|var|float64
bop_186 = relay.subtract(var_184.astype('float64'), relay.reshape(var_185.astype('float64'), relay.shape_of(var_184))) # shape=(16,)
bop_189 = relay.greater(var_184.astype('bool'), relay.reshape(var_185.astype('bool'), relay.shape_of(var_184))) # shape=(16,)
bop_192 = relay.logical_or(bop_189.astype('bool'), relay.reshape(bop_186.astype('bool'), relay.shape_of(bop_189))) # shape=(16,)
uop_195 = relay.asinh(bop_192.astype('float32')) # shape=(16,)
bop_197 = relay.subtract(bop_186.astype('int8'), relay.reshape(uop_195.astype('int8'), relay.shape_of(bop_186))) # shape=(16,)
output = bop_197
output2 = bop_197
func_200 = relay.Function([var_184,var_185,], output)
mod['func_200'] = func_200
mod = relay.transform.InferType()(mod)
mutated_mod['func_200'] = func_200
mutated_mod = relay.transform.InferType()(mutated_mod)
func_200_call = mutated_mod.get_global_var('func_200')
var_202 = relay.var("var_202", dtype = "float64", shape = (16,))#candidate|202|(16,)|var|float64
var_203 = relay.var("var_203", dtype = "float64", shape = (16,))#candidate|203|(16,)|var|float64
call_201 = func_200_call(var_202,var_203,)
output = call_201
func_204 = relay.Function([var_202,var_203,], output)
mutated_mod['func_204'] = func_204
mutated_mod = relay.transform.InferType()(mutated_mod)
var_206 = relay.var("var_206", dtype = "float32", shape = ())#candidate|206|()|var|float32
uop_207 = relay.cos(var_206.astype('float32')) # shape=()
output = uop_207
output2 = uop_207
func_209 = relay.Function([var_206,], output)
mod['func_209'] = func_209
mod = relay.transform.InferType()(mod)
var_210 = relay.var("var_210", dtype = "float32", shape = ())#candidate|210|()|var|float32
output = func_209(var_210)
func_211 = relay.Function([var_210], output)
mutated_mod['func_211'] = func_211
mutated_mod = relay.transform.InferType()(mutated_mod)
const_213 = relay.const([-5.001577,-4.149986,4.376205,6.639595,-0.880228,-5.667996,-9.628568], dtype = "float32")#candidate|213|(7,)|const|float32
var_214 = relay.var("var_214", dtype = "float32", shape = (7,))#candidate|214|(7,)|var|float32
bop_215 = relay.floor_mod(const_213.astype('float32'), relay.reshape(var_214.astype('float32'), relay.shape_of(const_213))) # shape=(7,)
bop_218 = relay.greater(var_214.astype('bool'), relay.reshape(bop_215.astype('bool'), relay.shape_of(var_214))) # shape=(7,)
uop_221 = relay.acos(bop_215.astype('float32')) # shape=(7,)
bop_223 = relay.power(bop_218.astype('float32'), relay.reshape(var_214.astype('float32'), relay.shape_of(bop_218))) # shape=(7,)
bop_226 = relay.maximum(var_214.astype('int64'), relay.reshape(bop_218.astype('int64'), relay.shape_of(var_214))) # shape=(7,)
bop_229 = relay.floor_divide(uop_221.astype('float64'), relay.reshape(bop_223.astype('float64'), relay.shape_of(uop_221))) # shape=(7,)
uop_232 = relay.asin(bop_226.astype('float32')) # shape=(7,)
output = relay.Tuple([bop_229,uop_232,])
output2 = relay.Tuple([bop_229,uop_232,])
func_234 = relay.Function([var_214,], output)
mod['func_234'] = func_234
mod = relay.transform.InferType()(mod)
mutated_mod['func_234'] = func_234
mutated_mod = relay.transform.InferType()(mutated_mod)
var_235 = relay.var("var_235", dtype = "float32", shape = (7,))#candidate|235|(7,)|var|float32
func_234_call = mutated_mod.get_global_var('func_234')
call_236 = func_234_call(var_235)
output = call_236
func_237 = relay.Function([var_235], output)
mutated_mod['func_237'] = func_237
mutated_mod = relay.transform.InferType()(mutated_mod)
var_239 = relay.var("var_239", dtype = "float32", shape = (10,))#candidate|239|(10,)|var|float32
const_240 = relay.const([-2.652968,3.289057,3.362471,9.423888,-9.608107,2.276346,-6.070155,4.804525,-3.567564,0.368357], dtype = "float32")#candidate|240|(10,)|const|float32
bop_241 = relay.divide(var_239.astype('float32'), relay.reshape(const_240.astype('float32'), relay.shape_of(var_239))) # shape=(10,)
func_49_call = mod.get_global_var('func_49')
func_52_call = mutated_mod.get_global_var('func_52')
const_245 = relay.const([-9.769448,7.608088,2.520470,-4.109077,-2.584613,-1.650816,4.908767,7.372525,3.660702,0.725925,-1.195083,4.938908,-4.302727,1.230556,-1.849622], dtype = "float32")#candidate|245|(15,)|const|float32
call_244 = func_49_call(relay.reshape(const_245.astype('float32'), [15,]), relay.reshape(const_245.astype('float32'), [15,]), )
call_246 = func_49_call(relay.reshape(const_245.astype('float32'), [15,]), relay.reshape(const_245.astype('float32'), [15,]), )
uop_247 = relay.atan(const_245.astype('float64')) # shape=(15,)
uop_249 = relay.acosh(uop_247.astype('float32')) # shape=(15,)
var_251 = relay.var("var_251", dtype = "float64", shape = (15,))#candidate|251|(15,)|var|float64
bop_252 = relay.less(uop_247.astype('bool'), relay.reshape(var_251.astype('bool'), relay.shape_of(uop_247))) # shape=(15,)
func_49_call = mod.get_global_var('func_49')
func_52_call = mutated_mod.get_global_var('func_52')
call_255 = func_49_call(relay.reshape(bop_252.astype('float32'), [15,]), relay.reshape(var_251.astype('float32'), [15,]), )
call_256 = func_49_call(relay.reshape(bop_252.astype('float32'), [15,]), relay.reshape(var_251.astype('float32'), [15,]), )
uop_257 = relay.atan(bop_252.astype('float64')) # shape=(15,)
bop_259 = relay.minimum(bop_252.astype('float64'), relay.reshape(const_245.astype('float64'), relay.shape_of(bop_252))) # shape=(15,)
uop_262 = relay.cos(uop_247.astype('float64')) # shape=(15,)
uop_264 = relay.erf(bop_259.astype('float64')) # shape=(15,)
var_266 = relay.var("var_266", dtype = "float64", shape = (15,))#candidate|266|(15,)|var|float64
bop_267 = relay.bitwise_and(uop_264.astype('int16'), relay.reshape(var_266.astype('int16'), relay.shape_of(uop_264))) # shape=(15,)
bop_270 = relay.bitwise_and(uop_249.astype('uint64'), relay.reshape(bop_252.astype('uint64'), relay.shape_of(uop_249))) # shape=(15,)
uop_273 = relay.acosh(bop_259.astype('float64')) # shape=(15,)
const_275 = relay.const([1.471803,7.020785,-1.683324,7.881186,-3.899757,-9.651649,7.651947,-8.285481,3.147675,3.577460,7.981536,-9.256951,2.242369,3.743363,2.863767], dtype = "float64")#candidate|275|(15,)|const|float64
bop_276 = relay.power(uop_264.astype('float32'), relay.reshape(const_275.astype('float32'), relay.shape_of(uop_264))) # shape=(15,)
bop_279 = relay.subtract(bop_276.astype('int64'), relay.reshape(uop_247.astype('int64'), relay.shape_of(bop_276))) # shape=(15,)
uop_282 = relay.tan(uop_247.astype('float32')) # shape=(15,)
uop_284 = relay.exp(uop_264.astype('float32')) # shape=(15,)
uop_286 = relay.log10(uop_284.astype('float64')) # shape=(15,)
var_288 = relay.var("var_288", dtype = "float64", shape = (15,))#candidate|288|(15,)|var|float64
bop_289 = relay.floor_mod(uop_247.astype('float32'), relay.reshape(var_288.astype('float32'), relay.shape_of(uop_247))) # shape=(15,)
uop_292 = relay.log(uop_273.astype('float64')) # shape=(15,)
uop_294 = relay.cos(uop_292.astype('float32')) # shape=(15,)
output = relay.Tuple([bop_241,call_244,call_255,uop_257,uop_262,bop_267,bop_270,bop_279,uop_282,uop_286,bop_289,uop_294,])
output2 = relay.Tuple([bop_241,call_246,call_256,uop_257,uop_262,bop_267,bop_270,bop_279,uop_282,uop_286,bop_289,uop_294,])
func_296 = relay.Function([var_239,var_251,var_266,var_288,], output)
mod['func_296'] = func_296
mod = relay.transform.InferType()(mod)
mutated_mod['func_296'] = func_296
mutated_mod = relay.transform.InferType()(mutated_mod)
func_296_call = mutated_mod.get_global_var('func_296')
var_298 = relay.var("var_298", dtype = "float32", shape = (10,))#candidate|298|(10,)|var|float32
var_299 = relay.var("var_299", dtype = "float64", shape = (15,))#candidate|299|(15,)|var|float64
var_300 = relay.var("var_300", dtype = "float64", shape = (15,))#candidate|300|(15,)|var|float64
var_301 = relay.var("var_301", dtype = "float64", shape = (15,))#candidate|301|(15,)|var|float64
call_297 = func_296_call(var_298,var_299,var_300,var_301,)
output = call_297
func_302 = relay.Function([var_298,var_299,var_300,var_301,], output)
mutated_mod['func_302'] = func_302
mutated_mod = relay.transform.InferType()(mutated_mod)
const_304 = relay.const([[[False,True,False],[True,False,True],[True,True,False],[False,False,True],[False,False,False],[True,False,False]],[[False,True,False],[True,False,True],[False,False,False],[False,False,False],[False,False,True],[True,False,True]],[[False,True,True],[False,True,True],[True,True,True],[True,False,False],[False,False,True],[False,False,True]],[[True,False,False],[True,False,False],[True,True,False],[False,False,False],[True,False,True],[False,False,False]],[[True,True,False],[True,False,False],[True,False,True],[False,False,True],[True,True,True],[True,False,True]]], dtype = "bool")#candidate|304|(5, 6, 3)|const|bool
var_305 = relay.var("var_305", dtype = "bool", shape = (5, 6, 3))#candidate|305|(5, 6, 3)|var|bool
bop_306 = relay.logical_and(const_304.astype('bool'), relay.reshape(var_305.astype('bool'), relay.shape_of(const_304))) # shape=(5, 6, 3)
uop_309 = relay.acos(const_304.astype('float64')) # shape=(5, 6, 3)
output = relay.Tuple([bop_306,uop_309,])
output2 = relay.Tuple([bop_306,uop_309,])
func_311 = relay.Function([var_305,], output)
mod['func_311'] = func_311
mod = relay.transform.InferType()(mod)
mutated_mod['func_311'] = func_311
mutated_mod = relay.transform.InferType()(mutated_mod)
var_312 = relay.var("var_312", dtype = "bool", shape = (5, 6, 3))#candidate|312|(5, 6, 3)|var|bool
func_311_call = mutated_mod.get_global_var('func_311')
call_313 = func_311_call(var_312)
output = call_313
func_314 = relay.Function([var_312], output)
mutated_mod['func_314'] = func_314
mutated_mod = relay.transform.InferType()(mutated_mod)
var_316 = relay.var("var_316", dtype = "uint64", shape = (7, 6))#candidate|316|(7, 6)|var|uint64
const_317 = relay.const([[9,-8,1,-8,8,7],[-3,-4,9,6,7,-6],[5,4,-4,-2,2,-3],[-5,-7,-7,10,5,10],[-7,-3,-2,-5,-9,-8],[7,-4,-9,10,-10,-8],[5,6,2,-6,-2,5]], dtype = "uint64")#candidate|317|(7, 6)|const|uint64
bop_318 = relay.equal(var_316.astype('bool'), relay.reshape(const_317.astype('bool'), relay.shape_of(var_316))) # shape=(7, 6)
func_49_call = mod.get_global_var('func_49')
func_52_call = mutated_mod.get_global_var('func_52')
var_322 = relay.var("var_322", dtype = "float32", shape = (15,))#candidate|322|(15,)|var|float32
call_321 = func_49_call(relay.reshape(var_322.astype('float32'), [15,]), relay.reshape(var_322.astype('float32'), [15,]), )
call_323 = func_49_call(relay.reshape(var_322.astype('float32'), [15,]), relay.reshape(var_322.astype('float32'), [15,]), )
bop_324 = relay.add(var_322.astype('uint32'), relay.reshape(call_321.astype('uint32'), relay.shape_of(var_322))) # shape=(15,)
bop_327 = relay.add(var_322.astype('uint32'), relay.reshape(call_323.astype('uint32'), relay.shape_of(var_322))) # shape=(15,)
uop_328 = relay.log(call_321.astype('float32')) # shape=(15,)
uop_330 = relay.log(call_323.astype('float32')) # shape=(15,)
var_331 = relay.var("var_331", dtype = "uint32", shape = (15,))#candidate|331|(15,)|var|uint32
bop_332 = relay.power(bop_324.astype('float64'), relay.reshape(var_331.astype('float64'), relay.shape_of(bop_324))) # shape=(15,)
bop_335 = relay.power(bop_327.astype('float64'), relay.reshape(var_331.astype('float64'), relay.shape_of(bop_327))) # shape=(15,)
uop_336 = relay.acosh(uop_328.astype('float64')) # shape=(15,)
uop_338 = relay.acosh(uop_330.astype('float64')) # shape=(15,)
bop_339 = relay.add(uop_336.astype('int64'), relay.reshape(var_331.astype('int64'), relay.shape_of(uop_336))) # shape=(15,)
bop_342 = relay.add(uop_338.astype('int64'), relay.reshape(var_331.astype('int64'), relay.shape_of(uop_338))) # shape=(15,)
uop_343 = relay.log(uop_328.astype('float64')) # shape=(15,)
uop_345 = relay.log(uop_330.astype('float64')) # shape=(15,)
func_209_call = mod.get_global_var('func_209')
func_211_call = mutated_mod.get_global_var('func_211')
const_347 = relay.const(7.632955, dtype = "float32")#candidate|347|()|const|float32
call_346 = func_209_call(relay.reshape(const_347.astype('float32'), []))
call_348 = func_209_call(relay.reshape(const_347.astype('float32'), []))
func_234_call = mod.get_global_var('func_234')
func_237_call = mutated_mod.get_global_var('func_237')
var_350 = relay.var("var_350", dtype = "float32", shape = (1, 7))#candidate|350|(1, 7)|var|float32
call_349 = relay.TupleGetItem(func_234_call(relay.reshape(var_350.astype('float32'), [7,])), 1)
call_351 = relay.TupleGetItem(func_237_call(relay.reshape(var_350.astype('float32'), [7,])), 1)
func_37_call = mod.get_global_var('func_37')
func_42_call = mutated_mod.get_global_var('func_42')
const_353 = relay.const([-0.339067,1.901647,-0.895666,8.512761,3.616889,-5.953023,-1.746934,-3.894283,0.688172,-4.184297,-6.551048,7.352886,-2.152209,0.563246,1.758490,9.109756,2.973024,2.400085,9.803463,-8.564843,-4.358720,3.482176,7.707062,3.395952,7.843094,-3.319717,4.327905,-7.202538,5.671843,8.155645,-1.000665,-2.217419,-8.450496,6.693657,-3.978699,-9.671604,-5.522476,-1.377695,3.018040,-4.115664,3.693563,-3.015770,-2.729160,8.195894,-3.759528,5.805459,5.507619,9.249338], dtype = "float32")#candidate|353|(48,)|const|float32
const_354 = relay.const([-4.781450,2.085751,8.901054,-7.399448,9.860867,7.180647,8.581060,-6.717451,-1.482342,2.597036,-7.321448,-2.376954,2.920664,4.621261,-0.354575,-3.156917,3.116938,-1.191812,3.137558,9.286199,3.411664,-1.389466,5.291686,5.611766,-4.655803,-6.095451,0.109210,-3.581596,-1.870635,7.549096,-3.602929,0.242328,2.051404,6.341188,-1.817238,-4.905043,4.053973,-9.317304,2.511020,8.267756,4.865136,-3.965372,-0.441173,6.232387,8.126729,8.978320,-1.968044,8.251597,-6.046436,2.837374,8.309858,0.115393,-1.720948,7.584320,5.624925,3.839132,1.157011,3.291774,-7.861451,-2.739385,5.482510,9.063398,0.281112,-0.346495,1.720834,-2.500715,8.158627,-9.840418,-7.156820,3.556676,-2.459763,-8.567073,-3.075894,6.316601,-1.573704,-1.003620,1.974055,3.351135,-8.408485,8.602268,2.331502,9.212778,4.071068,-0.773744,1.837623,4.881837,-1.734178,4.881270,4.794181,8.440244,4.143073,0.608369,-5.755223,2.954154,-9.623728,-4.161500,-0.439289,-0.859582,8.338346,3.170076,-4.983242,-2.120540,-8.000325,-7.520158,-5.808546,6.228104,1.087244,5.680664,-6.389272,5.780129,6.884419,-2.533202,5.406311,5.991339,-1.526796,4.087047,4.373104,7.083480,-4.293239,8.653973,-7.097384,-0.499653,8.137881,3.898244,-5.949449,7.265184,-1.083553,4.729202,-1.663743,4.109804,-2.175532,-1.584369,-3.091193,1.925762,0.917009,-1.353584,-9.775578,2.799381,-1.967001,9.862191,4.923826,-5.412277,-7.998265,9.799834,-5.160367,4.653217,-7.362540,-0.837857,-8.407680,4.127333,-7.137624,8.471249,-4.956382,-3.789748,7.958777,4.613813,-6.204797,-0.090094,4.018788,-2.195941,-4.321331,-3.783220,6.661277,-4.940966,8.963179,2.106391,3.761259,-5.221086,1.009100,-9.967288,-3.158287,-5.352886,8.557185,6.832009,-4.742958,-6.656602,-0.414663,1.313413,8.228909,0.228703,1.943469,-1.600872,4.444644,-2.316679,0.399181,7.482836,-0.164206,7.860987,-1.734280,2.039374,-7.524046,-8.473735,-9.476450,-8.635796,4.489696,-4.715889,-6.034975,7.819341,5.373749,-6.454990,-4.331277,-5.058557,7.754514,-7.643163,0.732707,8.822296,4.952473,-1.301868,1.298242,8.274558,-5.551031,-3.374616,-4.108923,-3.843990,3.453511,-6.190060,-3.901236,6.238853,-3.408640,4.019519,8.901838,6.633730,-7.712956,-7.645703,-1.803439,-1.700374,-8.318044,9.499707,-7.881052,-8.780013,5.369024,0.567450,-4.024621,8.497799,-3.528586,-6.633760,4.716192,-3.610219,4.417534,-2.949954,-1.558822,-5.580604,1.375294,7.546636,2.417820,4.235416,0.981674,-7.532830,7.381520,-7.926088,-8.442413,8.110484,7.445636,-8.396835,6.738229,-9.671456,3.260108,-3.063034,3.075858,5.716778,5.929744,3.583343,1.947106,-3.643399,2.715510,2.259725,0.273844,-5.466922,-6.447068,1.671000,4.473667,-2.080210,-5.749823,4.392967,-4.136683,-7.138893,1.867295,-7.511019,2.113078,-4.573765,-8.027746,7.512990,-6.485319,-0.018519,-9.881694,-4.954744,1.493636,-9.121935,7.397312,6.949544,-2.197547,-3.696454,1.909220,5.946409,1.207366,-4.401853,7.761736,-4.034988,0.090972,-7.146546,-3.223962,9.947688,1.185521,-4.068045,0.512598,2.006818,9.604333,6.243173,-5.974960,-7.757061,-9.651326,7.299835,-5.575120,-4.545428,-8.286966,2.039524,7.665742,6.611482,-7.462117,-1.994670,7.719780,-4.145748,9.366317,-8.756965,-6.934578,7.801195,4.312577,-4.640973,-4.336255,2.886409,7.788990,-5.447543,2.431500,-5.565987,3.479771,9.890666,-8.093239,4.657626,4.567021,8.550938,-3.360177,8.127702,-7.428569,2.507111,-0.322348,2.723444,9.853747,-0.591872,3.418968,5.764978,7.276555,-3.884095,-0.418740,4.989539,8.424742,3.555073,-2.096141,9.644495,-3.154818,0.966156,5.939395,-5.182053,-7.113228,5.984307,1.885422,-3.539884,4.052855,-6.842302,7.335308,0.945476,9.334297,-5.635490,5.429558,-9.976030,2.226389,-1.081666,-2.474486,9.768929,-8.937280,4.937932,3.095870,-3.147108,-1.290877,-0.842397,6.045863,-5.935337,-8.933089,-0.755184,-4.599590,9.149327,-2.839811,-3.569342,7.355765,-0.618425,-1.724075,5.026059,1.782055,-2.801365,6.105493,2.663875,-2.411577,3.546950,1.237104,3.206961,-5.531443,6.403577,-7.838244,4.902527,3.885825,9.570811,3.623589,-6.029246,0.245256,-1.351485,1.222323,4.392763,5.569029,3.530901,-4.296367,-8.055260,7.428354,2.149468,9.154275,3.572377,-7.830421,-0.962941,-1.249123,7.788864,3.212052,-4.082306,3.758954,0.344255,-5.609783,9.676837,0.818056,5.590946,4.132057,-2.619954,5.030558,-4.025659,0.939568,-1.715901,7.206637,8.351984,4.512504,4.161114,7.558495,-8.184014,1.821779,-9.223230,0.787620,-8.173352,-9.367403,-0.427331,-9.980854,-6.876039,3.529671,0.354184,-6.457729,-6.539458,-3.164176,-7.023505,-6.710585,1.614799,3.476347,-2.995295,5.447230,6.278133,3.384585,-8.288102,-8.102094,4.652580,1.237534,-3.622275,7.877545,5.993891,4.435726,6.341439,-2.407795,9.142749,-7.476444,6.496233,-2.296513,-7.138903,-3.836058,-3.739747,2.695345,-7.983709,-9.142575,-2.949979,4.315181,-5.723814,5.684664,-8.819577,-8.665008,6.292203,1.003820,5.723086,-5.774531,-0.590634,-9.585762,0.250548,-5.062835,-4.137652,6.217585,8.834333,-2.151785,5.146904,1.258145,-6.787980,1.095643,1.204084,-3.408330,9.267577,-5.611298,5.726743,-0.127929,-6.823168,-1.757037,1.913533,7.601756,4.843430,-0.879931,5.809796,-8.531499,-8.662771,-5.661353,7.899012,-4.334666,3.995859,-3.442131,6.636036,1.815798,5.580932,-0.311576,2.438880,4.072070,0.503203,8.479779,-2.487313,-2.521765,-1.199820,-9.214819,3.050411,-2.189564,0.509078,6.454074,4.038927,-3.057013,4.982641,4.619555,-4.939067,7.132657,9.435851,-5.493644,-9.259778,-5.643626,6.410451,-1.430298,6.918450,2.765256,4.225645,1.881133,-0.548838,-1.452100,-4.845752,-1.177920,-0.229456,-6.840217,2.473905,1.330579,-0.653401,-1.569625,-2.680150,-8.778937,9.780607,-4.110188,4.045686,0.410392,3.254641,0.280171,3.329242,-5.022825,4.632716,1.173399,-4.043853,-9.786218,-9.261306,-9.231965,-6.765582,-8.751504,8.352623,-3.421587,-9.155457,-0.485762,2.588291,0.256815,2.005442,3.549703,1.775402,9.597681,9.636666,-1.022218,-4.663421,6.082254,0.806087,-3.547348,-9.889346,1.004478,-4.632208,2.092997,6.403957,9.733061,-4.481904,5.807647,3.162016,3.616997,4.205616,6.036467,5.488194,-9.137156,-1.900296,0.114611,9.960389,-4.664841,-6.618149,-6.051836,-2.778240,-0.666057,-7.980550,-4.791582,3.449359,-5.321055,4.044311,-3.686894,-5.276979,-0.737135,-4.866237,-5.809005,-5.304928,1.537409,-0.077458,6.016014,4.110585,1.471112,2.509879,-7.455109,-5.040516,5.379142,-4.072793,-4.814698,-7.572234,4.842512,-8.112892,6.164783,-2.004991,4.785277,-3.481819,-9.789410,-5.732369,0.412723,6.856906,-4.750963,-8.304201,-9.469309,-7.697450,-5.398531,7.076788,8.912070,9.518559,-6.597336,2.541528,-2.365122,-4.928205,-5.988344,-8.298534,3.791327,3.936014,4.683899,6.116556,-9.116073,-0.033643,0.048678,-4.162637,6.970192,6.078728,-4.847852,0.687508,-7.123533,2.117929,0.429220,-1.955970,2.105888,-5.782963,7.555784,-0.071446,6.856234,-7.858783,-7.268103,4.825117,-3.661279,-5.217825,-5.183032,2.256597,6.359121,3.729590,5.930428,6.853964,3.006223,3.143245,-8.833547,-3.088350,3.687163,-5.378127,7.899307,3.857641,-5.018220,-0.381177,-7.276304,7.887002,-6.924111,-2.528739,-7.988800,1.553279,1.412516,-8.344559,-2.494183,-7.451862,-8.809072,-6.898685,-9.366484,7.537440,7.211634,0.176604,-0.175492,3.027226,2.421151,-2.496392,-9.042679,2.756185,-7.306831,8.602624,-8.738985,-7.197693,-5.987390,7.612400,4.360837,9.717985,-6.411250,-6.194691,2.597493,-5.200968,2.634897,-5.013698,-2.356479,9.233373,3.624574,2.323498,-4.314856,-5.122183,-5.843059,-5.285227,5.124510,-3.676870,-2.651767,-9.010791,2.614425,3.473814,3.293572,-4.090347,3.121285,-7.348629,-4.673190,7.353560,-2.957553,5.116125,7.685673,-2.636269,3.526422,-5.659937,2.727240,8.767857,7.018735,5.812906,-7.234083,-5.485609,0.734636,-5.317994,8.697517,6.503065,-7.919589,-4.771841,-8.639389,-6.020175,-3.523187,1.507837,2.630827,-7.231700,3.555943,4.052469,6.002350,-0.866655,-0.084895,-1.522087,-1.498566,9.867920,-3.122750,-4.521431,-3.870892,-4.104489,9.718392,-1.502449,-9.342550,-8.541735,-4.180697,7.085197,7.278748,6.120912,-0.596424,3.816691,0.417128,5.453288,9.544875,-6.439114,-1.817044,-3.763347,-8.247910,-5.570552,9.739745,9.295766,-9.161429,3.914293,-9.846252,-7.219976,-2.801040,4.073505,-6.561740,3.422760,-6.771943,-6.614557,-7.085358,-2.392666,6.176760,0.329813,6.098665,8.260735,0.655142,-8.612239,5.835699,-3.541136,-6.074559,5.764583,4.995462,-8.527633,-3.182532,-7.172888,1.445478,1.273433,-0.416040,4.575744,1.664334,1.605904,8.517631,-5.734728,-4.972384,-7.850432,-3.149591,-2.632245,-4.172450,3.006212,1.001529,4.691902,1.778352,6.635422,0.294304,0.440930,8.300171,2.985472,-2.593324,8.176967,6.422454,-3.397308,0.704192,2.536861,6.203130,-5.363072,-3.255380,-0.451639,2.187854,6.790550,-0.520178,2.386828,-7.749012,1.370329,2.617730,9.383642,-3.063222,-3.485710,-3.494037,-4.008225,2.837686,-1.946546,-0.879816,1.223155,7.825266,7.941767,2.232044,9.767655,4.878982,1.665129,-5.735278,9.001390,-0.299158,-2.349145,4.170641,-2.449039,-0.279696,0.502648,9.090977,-4.342545,7.988197,9.200598,-2.318853,-6.848620,8.865278,-0.730585,4.938711,-7.141047,-7.135851,-0.389519,1.786189,-6.495432,-3.933435,6.835588,-6.352988,-1.080991,0.386217,-2.988997,-1.290776,0.342061,-8.155538,5.710794,-3.675169,6.915191,7.777514,-6.087048,6.954341,-5.666579,-6.228517,5.298463,9.078782,8.718516,7.218749,-4.575999,-6.683940,8.775636,-4.828548,-5.595072,9.262862,4.477858,-0.405015,4.672326,-0.258385,4.023487,4.935873,4.470293,-3.261779,1.468758,-8.898010,8.011539,-9.476065,-7.564848,-9.278818,7.113983,-7.577607,-9.403847,-9.376300,-5.682068,3.859525,-6.624746,8.639078,6.914445,-1.195423,9.084872,-5.369876,2.571254,-6.019766,7.448094,3.076043,-8.012627,7.760376,-6.146786,-7.652446,-8.414243,-5.073946,9.272849,-7.471199,2.316995,4.237316,-8.586023,4.952599,-1.163213,2.222814,-1.036052,-3.309802,-0.181816,1.097154,-7.972296,-3.020792,9.559472,1.784826,-7.229779,6.610480,-6.160504,-8.369836,0.394800,-7.544176,6.263952,8.749043,-5.370300,-4.376415,-7.916819,4.332961,-5.840270,1.350721,-8.497073,-6.002343,9.865379,-5.693442,-9.136307,-9.735811,1.756320,-2.445895,-7.172280,-9.647432,8.796503,3.492535,2.408080,-9.113721,-3.116607,0.620676,-1.446833,8.127315,-9.442950,4.466599,1.633503,-3.874936,1.292433,1.813012,-7.514426,-7.382637,7.170576,6.475516,5.012818,-1.664606,-9.956856,-7.821398,1.299179,-7.052608,-7.986618,-4.717359,5.301749,-2.302932,7.304389,-4.616731,6.846457,-1.963809,-7.291883,3.048411,9.387769,-7.899949,-5.869322,9.260604,-3.805176,3.731118,3.850783,-4.913356,-6.932436,3.769769,5.496140,0.305971,1.465225,2.537173,-1.916173,7.992001,-4.915099,0.546871,-3.839538,-1.939539,-1.687986,2.579288,0.526661], dtype = "float32")#candidate|354|(1092,)|const|float32
call_352 = relay.TupleGetItem(func_37_call(relay.reshape(call_346.astype('float64'), []), relay.reshape(const_353.astype('float32'), [12, 4]), relay.reshape(const_354.astype('float32'), [14, 13, 6]), ), 3)
call_355 = relay.TupleGetItem(func_42_call(relay.reshape(call_346.astype('float64'), []), relay.reshape(const_353.astype('float32'), [12, 4]), relay.reshape(const_354.astype('float32'), [14, 13, 6]), ), 3)
uop_356 = relay.log10(bop_339.astype('float32')) # shape=(15,)
uop_358 = relay.log10(bop_342.astype('float32')) # shape=(15,)
output = relay.Tuple([bop_318,bop_332,uop_343,call_346,const_347,call_349,var_350,call_352,const_353,const_354,uop_356,])
output2 = relay.Tuple([bop_318,bop_335,uop_345,call_348,const_347,call_351,var_350,call_355,const_353,const_354,uop_358,])
func_359 = relay.Function([var_316,var_322,var_331,var_350,], output)
mod['func_359'] = func_359
mod = relay.transform.InferType()(mod)
mutated_mod['func_359'] = func_359
mutated_mod = relay.transform.InferType()(mutated_mod)
func_359_call = mutated_mod.get_global_var('func_359')
var_361 = relay.var("var_361", dtype = "uint64", shape = (7, 6))#candidate|361|(7, 6)|var|uint64
var_362 = relay.var("var_362", dtype = "float32", shape = (15,))#candidate|362|(15,)|var|float32
var_363 = relay.var("var_363", dtype = "uint32", shape = (15,))#candidate|363|(15,)|var|uint32
var_364 = relay.var("var_364", dtype = "float32", shape = (1, 7))#candidate|364|(1, 7)|var|float32
call_360 = func_359_call(var_361,var_362,var_363,var_364,)
output = call_360
func_365 = relay.Function([var_361,var_362,var_363,var_364,], output)
mutated_mod['func_365'] = func_365
mutated_mod = relay.transform.InferType()(mutated_mod)
const_367 = relay.const([[-1,-8,-3,-2,-8,-5,3,-2,-8,1,-8,-5,-4,-6],[-1,1,-5,-6,-9,3,5,-8,1,-9,3,-4,-4,1],[-7,5,5,-1,4,-9,8,-10,-3,1,-10,-6,10,-3],[10,-4,-9,7,4,6,-5,-3,-10,-6,-3,8,7,6],[5,-6,3,2,-1,-8,6,5,1,-6,2,4,9,1],[-8,-7,-8,6,3,5,-6,10,-9,5,4,-2,3,6],[-2,10,-5,10,10,-5,5,-8,5,5,7,-7,-9,-9],[-7,-4,1,-8,3,-8,-6,-7,-4,-4,-6,-4,-8,4],[-10,-10,8,-7,-2,-3,-4,9,7,1,-2,2,-5,-9],[-9,-10,5,-7,6,2,-2,-4,-10,-4,-8,8,-1,7],[9,7,-8,9,9,-6,2,4,5,-10,-8,9,1,-5],[2,-8,-10,10,-4,-3,5,-7,-1,2,-8,8,7,3],[9,-8,-1,-1,-3,-1,8,-7,7,-1,-6,2,-3,1]], dtype = "uint32")#candidate|367|(13, 14)|const|uint32
var_368 = relay.var("var_368", dtype = "uint32", shape = (13, 14))#candidate|368|(13, 14)|var|uint32
bop_369 = relay.less(const_367.astype('bool'), relay.reshape(var_368.astype('bool'), relay.shape_of(const_367))) # shape=(13, 14)
bop_372 = relay.less_equal(bop_369.astype('bool'), relay.reshape(var_368.astype('bool'), relay.shape_of(bop_369))) # shape=(13, 14)
var_375 = relay.var("var_375", dtype = "bool", shape = (13, 14))#candidate|375|(13, 14)|var|bool
bop_376 = relay.less(bop_372.astype('bool'), relay.reshape(var_375.astype('bool'), relay.shape_of(bop_372))) # shape=(13, 14)
bop_379 = relay.less(bop_376.astype('bool'), relay.reshape(const_367.astype('bool'), relay.shape_of(bop_376))) # shape=(13, 14)
bop_382 = relay.minimum(var_375.astype('float64'), relay.reshape(bop_372.astype('float64'), relay.shape_of(var_375))) # shape=(13, 14)
output = relay.Tuple([bop_379,bop_382,])
output2 = relay.Tuple([bop_379,bop_382,])
func_385 = relay.Function([var_368,var_375,], output)
mod['func_385'] = func_385
mod = relay.transform.InferType()(mod)
mutated_mod['func_385'] = func_385
mutated_mod = relay.transform.InferType()(mutated_mod)
func_385_call = mutated_mod.get_global_var('func_385')
var_387 = relay.var("var_387", dtype = "uint32", shape = (13, 14))#candidate|387|(13, 14)|var|uint32
var_388 = relay.var("var_388", dtype = "bool", shape = (13, 14))#candidate|388|(13, 14)|var|bool
call_386 = func_385_call(var_387,var_388,)
output = call_386
func_389 = relay.Function([var_387,var_388,], output)
mutated_mod['func_389'] = func_389
mutated_mod = relay.transform.InferType()(mutated_mod)
const_391 = relay.const([-6.872548,-8.972270,-0.948604,-0.779057,-7.687695,-8.166288,-3.270778,2.327291,6.678045,1.807602,-8.538806,-0.429022], dtype = "float32")#candidate|391|(12,)|const|float32
uop_392 = relay.log10(const_391.astype('float32')) # shape=(12,)
output = uop_392
output2 = uop_392
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()()
res3 = intrp3.evaluate()()
res4 = intrp4.evaluate()()
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()()
res7 = intrp7.evaluate()()
res8 = intrp8.evaluate()()
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()()
res11 = intrp11.evaluate()()
res12 = intrp12.evaluate()()
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()()
res15 = intrp15.evaluate()()
res16 = intrp16.evaluate()()
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()()
res19 = intrp19.evaluate()()
res20 = intrp20.evaluate()()
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()()
res23 = intrp23.evaluate()()
res24 = intrp24.evaluate()()
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''45: TVMFuncCall
44: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
43: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
42: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
41: tvm::IRModule::FromExpr(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&)
40: tvm::IRModule::FromExprInContext(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >)
39: tvm::IRModuleNode::Add(tvm::GlobalVar const&, tvm::BaseFunc const&, bool)
38: tvm::WarnIfMalformed(tvm::IRModule const&, tvm::relay::Function)
37: tvm::relay::FreeTypeVars(tvm::RelayExpr const&, tvm::IRModule const&)
36: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
34: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
32: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
31: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
30: tvm::relay::ExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
29: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
28: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
27: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
26: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
25: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
24: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
23: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
22: _ZNSt17_Function_handlerIFvPKN3tvm5relay7LetNodeEEZNS1_15TypeVarEVis
21: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
20: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
19: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
16: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
15: tvm::relay::ExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
14: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
13: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
12: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
11: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
10: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
9: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
8: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
7: _ZNSt17_Function_handlerIFvPKN3tvm5relay7LetNodeEEZNS1_15TypeVarEVis
6: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
5: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
4: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9RelayEx
1: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::ConstructorNode const*)
0: tvm::IRModuleNode::LookupTypeDef(tvm::GlobalTypeVar const&) const

'''