import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (12,))#candidate|0|(12,)|var|float64
uop_1 = relay.erf(var_0.astype('float64')) # shape=(12,)
uop_3 = relay.atan(uop_1.astype('float32')) # shape=(12,)
bop_5 = relay.logical_and(uop_1.astype('bool'), relay.reshape(var_0.astype('bool'), relay.shape_of(uop_1))) # shape=(12,)
output = relay.Tuple([uop_3,bop_5,])
output2 = relay.Tuple([uop_3,bop_5,])
func_8 = relay.Function([var_0,], output)
mod['func_8'] = func_8
mod = relay.transform.InferType()(mod)
mutated_mod['func_8'] = func_8
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9 = relay.var("var_9", dtype = "float64", shape = (12,))#candidate|9|(12,)|var|float64
func_8_call = mutated_mod.get_global_var('func_8')
call_10 = func_8_call(var_9)
output = call_10
func_11 = relay.Function([var_9], output)
mutated_mod['func_11'] = func_11
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13 = relay.var("var_13", dtype = "int64", shape = ())#candidate|13|()|var|int64
var_14 = relay.var("var_14", dtype = "int64", shape = (3, 14))#candidate|14|(3, 14)|var|int64
bop_15 = relay.left_shift(var_13.astype('int64'), var_14.astype('int64')) # shape=(3, 14)
uop_18 = relay.cosh(bop_15.astype('float32')) # shape=(3, 14)
bop_20 = relay.left_shift(uop_18.astype('uint32'), var_13.astype('uint32')) # shape=(3, 14)
uop_23 = relay.sqrt(var_14.astype('float64')) # shape=(3, 14)
uop_25 = relay.atanh(var_13.astype('float32')) # shape=()
const_27 = relay.const([5], dtype = "int64")#candidate|27|(1,)|const|int64
bop_28 = relay.divide(var_13.astype('float32'), const_27.astype('float32')) # shape=()
uop_31 = relay.exp(uop_25.astype('float32')) # shape=()
bop_33 = relay.floor_mod(uop_18.astype('float64'), relay.reshape(bop_15.astype('float64'), relay.shape_of(uop_18))) # shape=(3, 14)
func_8_call = mod.get_global_var('func_8')
func_11_call = mutated_mod.get_global_var('func_11')
const_37 = relay.const([5.068969,2.601283,7.024827,-1.970964,-8.150252,-5.020401,-2.661160,4.353663,0.333012,-2.888276,-8.611730,3.104206], dtype = "float64")#candidate|37|(12,)|const|float64
call_36 = relay.TupleGetItem(func_8_call(relay.reshape(const_37.astype('float64'), [12,])), 1)
call_38 = relay.TupleGetItem(func_11_call(relay.reshape(const_37.astype('float64'), [12,])), 1)
bop_39 = relay.maximum(uop_31.astype('int64'), const_37.astype('int64')) # shape=(12,)
bop_42 = relay.minimum(bop_39.astype('int16'), relay.reshape(const_37.astype('int16'), relay.shape_of(bop_39))) # shape=(12,)
uop_45 = relay.acosh(bop_39.astype('float32')) # shape=(12,)
bop_47 = relay.logical_or(uop_45.astype('bool'), relay.reshape(const_37.astype('bool'), relay.shape_of(uop_45))) # shape=(12,)
func_8_call = mod.get_global_var('func_8')
func_11_call = mutated_mod.get_global_var('func_11')
call_50 = relay.TupleGetItem(func_8_call(relay.reshape(bop_39.astype('float64'), [12,])), 0)
call_51 = relay.TupleGetItem(func_11_call(relay.reshape(bop_39.astype('float64'), [12,])), 0)
bop_52 = relay.bitwise_and(bop_47.astype('int64'), var_13.astype('int64')) # shape=(12,)
func_8_call = mod.get_global_var('func_8')
func_11_call = mutated_mod.get_global_var('func_11')
call_55 = relay.TupleGetItem(func_8_call(relay.reshape(const_37.astype('float64'), [12,])), 1)
call_56 = relay.TupleGetItem(func_11_call(relay.reshape(const_37.astype('float64'), [12,])), 1)
uop_57 = relay.asinh(bop_28.astype('float32')) # shape=()
uop_59 = relay.rsqrt(const_27.astype('float64')) # shape=(1,)
uop_61 = relay.asin(call_55.astype('float64')) # shape=(12,)
uop_63 = relay.asin(call_56.astype('float64')) # shape=(12,)
bop_64 = relay.logical_xor(uop_31.astype('uint64'), uop_57.astype('uint64')) # shape=()
bop_67 = relay.multiply(bop_64.astype('uint32'), call_55.astype('uint32')) # shape=(12,)
bop_70 = relay.multiply(bop_64.astype('uint32'), call_56.astype('uint32')) # shape=(12,)
bop_71 = relay.greater_equal(uop_45.astype('bool'), uop_57.astype('bool')) # shape=(12,)
bop_74 = relay.logical_or(uop_57.astype('bool'), const_27.astype('bool')) # shape=()
var_77 = relay.var("var_77", dtype = "float32", shape = (10,))#candidate|77|(10,)|var|float32
bop_78 = relay.power(uop_31.astype('float64'), var_77.astype('float64')) # shape=(10,)
uop_81 = relay.acos(uop_45.astype('float64')) # shape=(12,)
var_83 = relay.var("var_83", dtype = "float32", shape = (12,))#candidate|83|(12,)|var|float32
bop_84 = relay.less_equal(uop_45.astype('bool'), relay.reshape(var_83.astype('bool'), relay.shape_of(uop_45))) # shape=(12,)
bop_87 = relay.greater(bop_74.astype('bool'), call_55.astype('bool')) # shape=(12,)
bop_90 = relay.greater(bop_74.astype('bool'), call_56.astype('bool')) # shape=(12,)
bop_91 = relay.maximum(uop_81.astype('float32'), uop_59.astype('float32')) # shape=(12,)
uop_94 = relay.cos(bop_47.astype('float64')) # shape=(12,)
uop_96 = relay.erf(uop_94.astype('float32')) # shape=(12,)
uop_98 = relay.log(uop_81.astype('float32')) # shape=(12,)
uop_100 = relay.erf(bop_91.astype('float32')) # shape=(12,)
output = relay.Tuple([bop_20,uop_23,bop_33,call_36,bop_42,call_50,bop_52,uop_61,bop_67,bop_71,bop_78,bop_84,bop_87,uop_96,uop_98,uop_100,])
output2 = relay.Tuple([bop_20,uop_23,bop_33,call_38,bop_42,call_51,bop_52,uop_63,bop_70,bop_71,bop_78,bop_84,bop_90,uop_96,uop_98,uop_100,])
func_102 = relay.Function([var_13,var_14,var_77,var_83,], output)
mod['func_102'] = func_102
mod = relay.transform.InferType()(mod)
mutated_mod['func_102'] = func_102
mutated_mod = relay.transform.InferType()(mutated_mod)
func_102_call = mutated_mod.get_global_var('func_102')
var_104 = relay.var("var_104", dtype = "int64", shape = ())#candidate|104|()|var|int64
var_105 = relay.var("var_105", dtype = "int64", shape = (3, 14))#candidate|105|(3, 14)|var|int64
var_106 = relay.var("var_106", dtype = "float32", shape = (10,))#candidate|106|(10,)|var|float32
var_107 = relay.var("var_107", dtype = "float32", shape = (12,))#candidate|107|(12,)|var|float32
call_103 = func_102_call(var_104,var_105,var_106,var_107,)
output = call_103
func_108 = relay.Function([var_104,var_105,var_106,var_107,], output)
mutated_mod['func_108'] = func_108
mutated_mod = relay.transform.InferType()(mutated_mod)
const_110 = relay.const([3.257841,3.187678,0.707075,-9.801553,-1.877483,-1.386098,4.799931,9.840110,3.463009,-0.779178,-9.185760,7.854913], dtype = "float32")#candidate|110|(12,)|const|float32
uop_111 = relay.acos(const_110.astype('float32')) # shape=(12,)
func_8_call = mod.get_global_var('func_8')
func_11_call = mutated_mod.get_global_var('func_11')
call_113 = relay.TupleGetItem(func_8_call(relay.reshape(const_110.astype('float64'), [12,])), 1)
call_114 = relay.TupleGetItem(func_11_call(relay.reshape(const_110.astype('float64'), [12,])), 1)
var_115 = relay.var("var_115", dtype = "float32", shape = (12,))#candidate|115|(12,)|var|float32
bop_116 = relay.divide(const_110.astype('float32'), relay.reshape(var_115.astype('float32'), relay.shape_of(const_110))) # shape=(12,)
uop_119 = relay.rsqrt(uop_111.astype('float64')) # shape=(12,)
uop_121 = relay.acosh(uop_111.astype('float32')) # shape=(12,)
bop_123 = relay.mod(uop_121.astype('float32'), relay.reshape(uop_119.astype('float32'), relay.shape_of(uop_121))) # shape=(12,)
uop_126 = relay.log2(bop_116.astype('float32')) # shape=(12,)
uop_128 = relay.log2(const_110.astype('float32')) # shape=(12,)
uop_130 = relay.atan(bop_123.astype('float32')) # shape=(12,)
output = relay.Tuple([call_113,uop_126,uop_128,uop_130,])
output2 = relay.Tuple([call_114,uop_126,uop_128,uop_130,])
func_132 = relay.Function([var_115,], output)
mod['func_132'] = func_132
mod = relay.transform.InferType()(mod)
mutated_mod['func_132'] = func_132
mutated_mod = relay.transform.InferType()(mutated_mod)
var_133 = relay.var("var_133", dtype = "float32", shape = (12,))#candidate|133|(12,)|var|float32
func_132_call = mutated_mod.get_global_var('func_132')
call_134 = func_132_call(var_133)
output = call_134
func_135 = relay.Function([var_133], output)
mutated_mod['func_135'] = func_135
mutated_mod = relay.transform.InferType()(mutated_mod)
var_137 = relay.var("var_137", dtype = "int8", shape = (11,))#candidate|137|(11,)|var|int8
const_138 = relay.const([8,-6,8,-3,-8,5,-9,-7,9,-1,6], dtype = "int8")#candidate|138|(11,)|const|int8
bop_139 = relay.greater(var_137.astype('bool'), relay.reshape(const_138.astype('bool'), relay.shape_of(var_137))) # shape=(11,)
uop_142 = relay.acosh(var_137.astype('float64')) # shape=(11,)
uop_144 = relay.sin(bop_139.astype('float32')) # shape=(11,)
uop_146 = relay.cos(uop_144.astype('float32')) # shape=(11,)
uop_148 = relay.log10(uop_146.astype('float64')) # shape=(11,)
func_102_call = mod.get_global_var('func_102')
func_108_call = mutated_mod.get_global_var('func_108')
var_151 = relay.var("var_151", dtype = "int64", shape = ())#candidate|151|()|var|int64
const_152 = relay.const([5,-7,6,-9,-7,-8,-7,5,3,7,3,4,-10,-4,7,1,9,-3,3,2,6,-3,8,-9,1,7,-7,3,5,-2,-9,4,-10,5,-8,5,6,1,5,6,-3,2], dtype = "int64")#candidate|152|(42,)|const|int64
var_153 = relay.var("var_153", dtype = "float32", shape = (10,))#candidate|153|(10,)|var|float32
const_154 = relay.const([[6.069650,4.407464,-8.756984,-6.769864],[8.642789,6.828944,-0.419009,-2.739621],[4.648149,-8.795444,-7.319572,-5.326799]], dtype = "float32")#candidate|154|(3, 4)|const|float32
call_150 = relay.TupleGetItem(func_102_call(relay.reshape(var_151.astype('int64'), []), relay.reshape(const_152.astype('int64'), [3, 14]), relay.reshape(var_153.astype('float32'), [10,]), relay.reshape(const_154.astype('float32'), [12,]), ), 4)
call_155 = relay.TupleGetItem(func_108_call(relay.reshape(var_151.astype('int64'), []), relay.reshape(const_152.astype('int64'), [3, 14]), relay.reshape(var_153.astype('float32'), [10,]), relay.reshape(const_154.astype('float32'), [12,]), ), 4)
uop_156 = relay.acosh(uop_146.astype('float32')) # shape=(11,)
uop_158 = relay.atan(uop_144.astype('float64')) # shape=(11,)
bop_160 = relay.logical_xor(uop_148.astype('uint64'), relay.reshape(uop_158.astype('uint64'), relay.shape_of(uop_148))) # shape=(11,)
var_163 = relay.var("var_163", dtype = "float32", shape = (11,))#candidate|163|(11,)|var|float32
bop_164 = relay.logical_and(uop_146.astype('bool'), relay.reshape(var_163.astype('bool'), relay.shape_of(uop_146))) # shape=(11,)
uop_167 = relay.atanh(uop_142.astype('float32')) # shape=(11,)
var_169 = relay.var("var_169", dtype = "float64", shape = (11,))#candidate|169|(11,)|var|float64
bop_170 = relay.not_equal(uop_148.astype('bool'), relay.reshape(var_169.astype('bool'), relay.shape_of(uop_148))) # shape=(11,)
bop_173 = relay.bitwise_or(uop_156.astype('int8'), relay.reshape(bop_164.astype('int8'), relay.shape_of(uop_156))) # shape=(11,)
output = relay.Tuple([call_150,var_151,const_152,var_153,const_154,bop_160,uop_167,bop_170,bop_173,])
output2 = relay.Tuple([call_155,var_151,const_152,var_153,const_154,bop_160,uop_167,bop_170,bop_173,])
func_176 = relay.Function([var_137,var_151,var_153,var_163,var_169,], output)
mod['func_176'] = func_176
mod = relay.transform.InferType()(mod)
mutated_mod['func_176'] = func_176
mutated_mod = relay.transform.InferType()(mutated_mod)
func_176_call = mutated_mod.get_global_var('func_176')
var_178 = relay.var("var_178", dtype = "int8", shape = (11,))#candidate|178|(11,)|var|int8
var_179 = relay.var("var_179", dtype = "int64", shape = ())#candidate|179|()|var|int64
var_180 = relay.var("var_180", dtype = "float32", shape = (10,))#candidate|180|(10,)|var|float32
var_181 = relay.var("var_181", dtype = "float32", shape = (11,))#candidate|181|(11,)|var|float32
var_182 = relay.var("var_182", dtype = "float64", shape = (11,))#candidate|182|(11,)|var|float64
call_177 = func_176_call(var_178,var_179,var_180,var_181,var_182,)
output = call_177
func_183 = relay.Function([var_178,var_179,var_180,var_181,var_182,], output)
mutated_mod['func_183'] = func_183
mutated_mod = relay.transform.InferType()(mutated_mod)
var_185 = relay.var("var_185", dtype = "float64", shape = (6,))#candidate|185|(6,)|var|float64
uop_186 = relay.sinh(var_185.astype('float64')) # shape=(6,)
const_188 = relay.const([-3.772211,-5.583024,9.366557,-9.129995,4.611412,1.339064], dtype = "float64")#candidate|188|(6,)|const|float64
bop_189 = relay.logical_xor(uop_186.astype('int16'), relay.reshape(const_188.astype('int16'), relay.shape_of(uop_186))) # shape=(6,)
var_192 = relay.var("var_192", dtype = "int16", shape = (6,))#candidate|192|(6,)|var|int16
bop_193 = relay.left_shift(bop_189.astype('uint8'), relay.reshape(var_192.astype('uint8'), relay.shape_of(bop_189))) # shape=(6,)
var_196 = relay.var("var_196", dtype = "uint8", shape = (6,))#candidate|196|(6,)|var|uint8
bop_197 = relay.greater_equal(bop_193.astype('bool'), relay.reshape(var_196.astype('bool'), relay.shape_of(bop_193))) # shape=(6,)
var_200 = relay.var("var_200", dtype = "bool", shape = (6,))#candidate|200|(6,)|var|bool
bop_201 = relay.bitwise_or(bop_197.astype('int16'), relay.reshape(var_200.astype('int16'), relay.shape_of(bop_197))) # shape=(6,)
const_204 = relay.const([6,-10,-7,-8,-9,10], dtype = "uint8")#candidate|204|(6,)|const|uint8
bop_205 = relay.logical_or(bop_193.astype('bool'), relay.reshape(const_204.astype('bool'), relay.shape_of(bop_193))) # shape=(6,)
bop_208 = relay.greater(const_188.astype('bool'), relay.reshape(const_204.astype('bool'), relay.shape_of(const_188))) # shape=(6,)
bop_211 = relay.greater(bop_205.astype('bool'), relay.reshape(var_196.astype('bool'), relay.shape_of(bop_205))) # shape=(6,)
uop_214 = relay.sinh(bop_205.astype('float32')) # shape=(6,)
var_216 = relay.var("var_216", dtype = "bool", shape = (6,))#candidate|216|(6,)|var|bool
bop_217 = relay.subtract(bop_211.astype('uint64'), relay.reshape(var_216.astype('uint64'), relay.shape_of(bop_211))) # shape=(6,)
var_220 = relay.var("var_220", dtype = "float32", shape = (6,))#candidate|220|(6,)|var|float32
bop_221 = relay.add(uop_214.astype('int32'), relay.reshape(var_220.astype('int32'), relay.shape_of(uop_214))) # shape=(6,)
uop_224 = relay.tan(var_220.astype('float64')) # shape=(6,)
func_102_call = mod.get_global_var('func_102')
func_108_call = mutated_mod.get_global_var('func_108')
const_227 = relay.const(-9, dtype = "int64")#candidate|227|()|const|int64
const_228 = relay.const([1,-8,-10,-3,-3,-10,2,6,-10,-9,8,-7,2,-10,-2,2,10,10,-2,8,-2,6,-8,3,-7,-9,2,9,-5,4,1,-3,-7,10,-6,5,-9,-9,3,7,6,7], dtype = "int64")#candidate|228|(42,)|const|int64
const_229 = relay.const([7.481421,-3.211085,6.955380,-7.417968,-2.516949,5.878061,-3.930857,-3.566433,2.039521,0.148548], dtype = "float32")#candidate|229|(10,)|const|float32
const_230 = relay.const([[-9.820846,7.243497],[1.305813,-5.964323],[5.025826,-9.625294],[-0.068781,4.985618],[8.252764,4.462912],[0.581173,2.132557]], dtype = "float32")#candidate|230|(6, 2)|const|float32
call_226 = relay.TupleGetItem(func_102_call(relay.reshape(const_227.astype('int64'), []), relay.reshape(const_228.astype('int64'), [3, 14]), relay.reshape(const_229.astype('float32'), [10,]), relay.reshape(const_230.astype('float32'), [12,]), ), 11)
call_231 = relay.TupleGetItem(func_108_call(relay.reshape(const_227.astype('int64'), []), relay.reshape(const_228.astype('int64'), [3, 14]), relay.reshape(const_229.astype('float32'), [10,]), relay.reshape(const_230.astype('float32'), [12,]), ), 11)
output = relay.Tuple([bop_201,bop_208,bop_217,bop_221,uop_224,call_226,const_227,const_228,const_229,const_230,])
output2 = relay.Tuple([bop_201,bop_208,bop_217,bop_221,uop_224,call_231,const_227,const_228,const_229,const_230,])
func_232 = relay.Function([var_185,var_192,var_196,var_200,var_216,var_220,], output)
mod['func_232'] = func_232
mod = relay.transform.InferType()(mod)
mutated_mod['func_232'] = func_232
mutated_mod = relay.transform.InferType()(mutated_mod)
func_232_call = mutated_mod.get_global_var('func_232')
var_234 = relay.var("var_234", dtype = "float64", shape = (6,))#candidate|234|(6,)|var|float64
var_235 = relay.var("var_235", dtype = "int16", shape = (6,))#candidate|235|(6,)|var|int16
var_236 = relay.var("var_236", dtype = "uint8", shape = (6,))#candidate|236|(6,)|var|uint8
var_237 = relay.var("var_237", dtype = "bool", shape = (6,))#candidate|237|(6,)|var|bool
var_238 = relay.var("var_238", dtype = "bool", shape = (6,))#candidate|238|(6,)|var|bool
var_239 = relay.var("var_239", dtype = "float32", shape = (6,))#candidate|239|(6,)|var|float32
call_233 = func_232_call(var_234,var_235,var_236,var_237,var_238,var_239,)
output = call_233
func_240 = relay.Function([var_234,var_235,var_236,var_237,var_238,var_239,], output)
mutated_mod['func_240'] = func_240
mutated_mod = relay.transform.InferType()(mutated_mod)
var_242 = relay.var("var_242", dtype = "int16", shape = ())#candidate|242|()|var|int16
var_243 = relay.var("var_243", dtype = "int16", shape = (6, 4))#candidate|243|(6, 4)|var|int16
bop_244 = relay.bitwise_xor(var_242.astype('int16'), var_243.astype('int16')) # shape=(6, 4)
uop_247 = relay.log10(var_242.astype('float32')) # shape=()
output = relay.Tuple([bop_244,uop_247,])
output2 = relay.Tuple([bop_244,uop_247,])
func_249 = relay.Function([var_242,var_243,], output)
mod['func_249'] = func_249
mod = relay.transform.InferType()(mod)
mutated_mod['func_249'] = func_249
mutated_mod = relay.transform.InferType()(mutated_mod)
func_249_call = mutated_mod.get_global_var('func_249')
var_251 = relay.var("var_251", dtype = "int16", shape = ())#candidate|251|()|var|int16
var_252 = relay.var("var_252", dtype = "int16", shape = (6, 4))#candidate|252|(6, 4)|var|int16
call_250 = func_249_call(var_251,var_252,)
output = call_250
func_253 = relay.Function([var_251,var_252,], output)
mutated_mod['func_253'] = func_253
mutated_mod = relay.transform.InferType()(mutated_mod)
var_255 = relay.var("var_255", dtype = "uint64", shape = (4,))#candidate|255|(4,)|var|uint64
var_256 = relay.var("var_256", dtype = "uint64", shape = (4,))#candidate|256|(4,)|var|uint64
bop_257 = relay.bitwise_or(var_255.astype('uint64'), relay.reshape(var_256.astype('uint64'), relay.shape_of(var_255))) # shape=(4,)
uop_260 = relay.sigmoid(var_256.astype('float64')) # shape=(4,)
bop_262 = relay.equal(uop_260.astype('bool'), relay.reshape(bop_257.astype('bool'), relay.shape_of(uop_260))) # shape=(4,)
bop_265 = relay.floor_mod(var_256.astype('float64'), relay.reshape(var_255.astype('float64'), relay.shape_of(var_256))) # shape=(4,)
bop_268 = relay.floor_divide(bop_262.astype('float64'), relay.reshape(bop_265.astype('float64'), relay.shape_of(bop_262))) # shape=(4,)
uop_271 = relay.log10(var_256.astype('float64')) # shape=(4,)
bop_273 = relay.less(bop_262.astype('bool'), relay.reshape(uop_271.astype('bool'), relay.shape_of(bop_262))) # shape=(4,)
uop_276 = relay.atan(var_256.astype('float32')) # shape=(4,)
var_278 = relay.var("var_278", dtype = "uint64", shape = (4,))#candidate|278|(4,)|var|uint64
bop_279 = relay.minimum(bop_257.astype('uint16'), relay.reshape(var_278.astype('uint16'), relay.shape_of(bop_257))) # shape=(4,)
const_282 = relay.const([-8,9,-10,-9], dtype = "uint64")#candidate|282|(4,)|const|uint64
bop_283 = relay.greater(var_256.astype('bool'), relay.reshape(const_282.astype('bool'), relay.shape_of(var_256))) # shape=(4,)
output = relay.Tuple([bop_268,bop_273,uop_276,bop_279,bop_283,])
output2 = relay.Tuple([bop_268,bop_273,uop_276,bop_279,bop_283,])
func_286 = relay.Function([var_255,var_256,var_278,], output)
mod['func_286'] = func_286
mod = relay.transform.InferType()(mod)
var_287 = relay.var("var_287", dtype = "uint64", shape = (4,))#candidate|287|(4,)|var|uint64
var_288 = relay.var("var_288", dtype = "uint64", shape = (4,))#candidate|288|(4,)|var|uint64
var_289 = relay.var("var_289", dtype = "uint64", shape = (4,))#candidate|289|(4,)|var|uint64
output = func_286(var_287,var_288,var_289,)
func_290 = relay.Function([var_287,var_288,var_289,], output)
mutated_mod['func_290'] = func_290
mutated_mod = relay.transform.InferType()(mutated_mod)
var_292 = relay.var("var_292", dtype = "float64", shape = (16,))#candidate|292|(16,)|var|float64
var_293 = relay.var("var_293", dtype = "float64", shape = (16,))#candidate|293|(16,)|var|float64
bop_294 = relay.floor_divide(var_292.astype('float64'), relay.reshape(var_293.astype('float64'), relay.shape_of(var_292))) # shape=(16,)
uop_297 = relay.log10(bop_294.astype('float32')) # shape=(16,)
uop_299 = relay.acos(uop_297.astype('float32')) # shape=(16,)
bop_301 = relay.floor_divide(uop_299.astype('float32'), relay.reshape(var_293.astype('float32'), relay.shape_of(uop_299))) # shape=(16,)
uop_304 = relay.sqrt(uop_297.astype('float64')) # shape=(16,)
uop_306 = relay.acos(uop_297.astype('float64')) # shape=(16,)
bop_308 = relay.mod(uop_299.astype('float32'), relay.reshape(uop_304.astype('float32'), relay.shape_of(uop_299))) # shape=(16,)
bop_311 = relay.bitwise_or(bop_308.astype('int16'), relay.reshape(bop_294.astype('int16'), relay.shape_of(bop_308))) # shape=(16,)
uop_314 = relay.acosh(bop_311.astype('float32')) # shape=(16,)
const_316 = relay.const([5.723381,1.701734,8.872299,7.768265,4.299141,-3.497877,-6.510668,9.346084,-3.036481,5.572685,3.588621,5.116649,-7.799425,-4.693495,-4.553958,3.470514], dtype = "float32")#candidate|316|(16,)|const|float32
bop_317 = relay.bitwise_xor(uop_314.astype('int8'), relay.reshape(const_316.astype('int8'), relay.shape_of(uop_314))) # shape=(16,)
bop_320 = relay.logical_xor(uop_297.astype('uint64'), relay.reshape(bop_311.astype('uint64'), relay.shape_of(uop_297))) # shape=(16,)
uop_323 = relay.sigmoid(uop_314.astype('float32')) # shape=(16,)
uop_325 = relay.atan(uop_323.astype('float64')) # shape=(16,)
uop_327 = relay.asin(uop_325.astype('float64')) # shape=(16,)
bop_329 = relay.multiply(uop_325.astype('float64'), relay.reshape(bop_294.astype('float64'), relay.shape_of(uop_325))) # shape=(16,)
bop_332 = relay.right_shift(bop_329.astype('int64'), relay.reshape(const_316.astype('int64'), relay.shape_of(bop_329))) # shape=(16,)
uop_335 = relay.sin(uop_327.astype('float32')) # shape=(16,)
output = relay.Tuple([bop_301,uop_306,bop_317,bop_320,bop_332,uop_335,])
output2 = relay.Tuple([bop_301,uop_306,bop_317,bop_320,bop_332,uop_335,])
func_337 = relay.Function([var_292,var_293,], output)
mod['func_337'] = func_337
mod = relay.transform.InferType()(mod)
var_338 = relay.var("var_338", dtype = "float64", shape = (16,))#candidate|338|(16,)|var|float64
var_339 = relay.var("var_339", dtype = "float64", shape = (16,))#candidate|339|(16,)|var|float64
output = func_337(var_338,var_339,)
func_340 = relay.Function([var_338,var_339,], output)
mutated_mod['func_340'] = func_340
mutated_mod = relay.transform.InferType()(mutated_mod)
var_342 = relay.var("var_342", dtype = "float32", shape = (2, 10))#candidate|342|(2, 10)|var|float32
const_343 = relay.const([[1.914464,-3.295793,-1.131372,-8.391735,-5.257888,-3.846572,6.375255,1.544204,-3.018751,-6.779310],[-2.477078,-5.219236,9.220614,8.279125,8.293316,4.576138,5.234798,-5.252577,-2.505849,-3.191675]], dtype = "float32")#candidate|343|(2, 10)|const|float32
bop_344 = relay.floor_mod(var_342.astype('float32'), relay.reshape(const_343.astype('float32'), relay.shape_of(var_342))) # shape=(2, 10)
output = relay.Tuple([bop_344,])
output2 = relay.Tuple([bop_344,])
func_347 = relay.Function([var_342,], output)
mod['func_347'] = func_347
mod = relay.transform.InferType()(mod)
mutated_mod['func_347'] = func_347
mutated_mod = relay.transform.InferType()(mutated_mod)
var_348 = relay.var("var_348", dtype = "float32", shape = (2, 10))#candidate|348|(2, 10)|var|float32
func_347_call = mutated_mod.get_global_var('func_347')
call_349 = func_347_call(var_348)
output = call_349
func_350 = relay.Function([var_348], output)
mutated_mod['func_350'] = func_350
mutated_mod = relay.transform.InferType()(mutated_mod)
var_352 = relay.var("var_352", dtype = "uint64", shape = ())#candidate|352|()|var|uint64
var_353 = relay.var("var_353", dtype = "uint64", shape = ())#candidate|353|()|var|uint64
bop_354 = relay.subtract(var_352.astype('uint64'), var_353.astype('uint64')) # shape=()
uop_357 = relay.asin(var_353.astype('float64')) # shape=()
const_359 = relay.const([5.247702,-7.476383], dtype = "float64")#candidate|359|(2,)|const|float64
bop_360 = relay.subtract(uop_357.astype('float64'), const_359.astype('float64')) # shape=(2,)
uop_363 = relay.asinh(var_352.astype('float64')) # shape=()
uop_365 = relay.atanh(uop_357.astype('float64')) # shape=()
func_347_call = mod.get_global_var('func_347')
func_350_call = mutated_mod.get_global_var('func_350')
const_368 = relay.const([-3.405986,-2.886219,-0.391654,-1.406197,8.642442,-1.549514,2.085347,-1.150278,-2.776980,9.726653,-1.693359,-5.865718,-9.909237,0.435223,6.083732,-5.384289,4.804634,-8.506200,-2.767893,1.026322], dtype = "float32")#candidate|368|(20,)|const|float32
call_367 = relay.TupleGetItem(func_347_call(relay.reshape(const_368.astype('float32'), [2, 10])), 0)
call_369 = relay.TupleGetItem(func_350_call(relay.reshape(const_368.astype('float32'), [2, 10])), 0)
bop_370 = relay.divide(bop_354.astype('float64'), var_353.astype('float64')) # shape=()
output = relay.Tuple([bop_360,uop_363,uop_365,call_367,const_368,bop_370,])
output2 = relay.Tuple([bop_360,uop_363,uop_365,call_369,const_368,bop_370,])
F = relay.Function([var_352,var_353,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_352,var_353,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_352= np.array(10, dtype='uint64')
module1.set_input('var_352', input_352)
input_353= np.array(5, dtype='uint64')
module1.set_input('var_353', input_353)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_352, input_353, )
res3 = intrp3.evaluate()(input_352, input_353, )
res4 = intrp4.evaluate()(input_352, input_353, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
module5.set_input('var_352', input_352)
module5.set_input('var_353', input_353)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_352, input_353, )
res7 = intrp7.evaluate()(input_352, input_353, )
res8 = intrp8.evaluate()(input_352, input_353, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
module9.set_input('var_352', input_352)
module9.set_input('var_353', input_353)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_352, input_353, )
res11 = intrp11.evaluate()(input_352, input_353, )
res12 = intrp12.evaluate()(input_352, input_353, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
module13.set_input('var_352', input_352)
module13.set_input('var_353', input_353)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_352, input_353, )
res15 = intrp15.evaluate()(input_352, input_353, )
res16 = intrp16.evaluate()(input_352, input_353, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
module17.set_input('var_352', input_352)
module17.set_input('var_353', input_353)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_352, input_353, )
res19 = intrp19.evaluate()(input_352, input_353, )
res20 = intrp20.evaluate()(input_352, input_353, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
module21.set_input('var_352', input_352)
module21.set_input('var_353', input_353)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_352, input_353, )
res23 = intrp23.evaluate()(input_352, input_353, )
res24 = intrp24.evaluate()(input_352, input_353, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()

'''57: TVMFuncCall
56: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
55: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
54: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
53: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
52: tvm::transform::Pass::operator()(tvm::IRModule) const
51: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
50: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
49: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
48: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
47: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
46: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
45: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
44: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
43: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
42: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
41: _ZN3tvm5relay16MixedModeMutato
40: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
39: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
38: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
37: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
36: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
34: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
32: _ZN3tvm5relay16MixedModeMutato
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
27: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
26: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
25: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
24: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
23: tvm::transform::Pass::operator()(tvm::IRModule) const
22: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
21: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
16: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
15: tvm::relay::TypeInferencer::Infer(tvm::GlobalVar, tvm::relay::Function)
14: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
13: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
12: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
11: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
10: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
9: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::FunctionNode const*)
8: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
7: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
6: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
5: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
4: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
3: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::CallNode const*)
2: tvm::relay::TypeInferencer::GeneralCall(tvm::relay::CallNode const*, tvm::runtime::Array<tvm::Type, void>)
1: _ZN3tvm17DiagnosticContext9EmitFatalERKNS_1
0: tvm::DiagnosticContext::Render()

'''