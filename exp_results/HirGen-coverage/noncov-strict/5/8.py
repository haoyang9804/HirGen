import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "int8", shape = ())#candidate|0|()|var|int8
var_1 = relay.var("var_1", dtype = "int8", shape = (12, 15))#candidate|1|(12, 15)|var|int8
bop_2 = relay.maximum(var_0.astype('int8'), var_1.astype('int8')) # shape=(12, 15)
uop_5 = relay.asin(bop_2.astype('float64')) # shape=(12, 15)
uop_7 = relay.asinh(uop_5.astype('float64')) # shape=(12, 15)
bop_9 = relay.not_equal(var_1.astype('bool'), var_0.astype('bool')) # shape=(12, 15)
output = relay.Tuple([uop_7,bop_9,])
output2 = relay.Tuple([uop_7,bop_9,])
func_12 = relay.Function([var_0,var_1,], output)
mod['func_12'] = func_12
mod = relay.transform.InferType()(mod)
var_13 = relay.var("var_13", dtype = "int8", shape = ())#candidate|13|()|var|int8
var_14 = relay.var("var_14", dtype = "int8", shape = (12, 15))#candidate|14|(12, 15)|var|int8
output = func_12(var_13,var_14,)
func_15 = relay.Function([var_13,var_14,], output)
mutated_mod['func_15'] = func_15
mutated_mod = relay.transform.InferType()(mutated_mod)
var_17 = relay.var("var_17", dtype = "float32", shape = ())#candidate|17|()|var|float32
uop_18 = relay.asin(var_17.astype('float32')) # shape=()
uop_20 = relay.sqrt(uop_18.astype('float64')) # shape=()
const_22 = relay.const([[[-8.479439,7.851018,8.831321,-7.414979,-4.399470,-9.049646,0.828784,-8.587597,-3.051967,9.883322,-5.770337,8.399124,-6.709611,9.454229,-0.414003],[-1.402443,3.507818,0.633527,-5.050549,-6.100602,9.819262,9.152003,-0.741659,-7.462102,-1.443541,-8.298910,9.762205,-5.226056,8.218108,9.236371],[-4.601870,7.678403,8.794925,-0.167861,-4.405388,8.584568,9.833911,0.164984,-9.845333,-7.175686,9.096970,2.982443,-8.776193,0.907649,4.384702],[7.076505,-1.399036,2.554265,-3.137694,-7.529488,-0.326253,-1.245283,-4.338043,-1.461122,4.462638,3.762394,1.342308,2.145086,-5.870915,1.422853],[9.642075,4.967224,2.846537,6.526580,-2.501357,2.379672,3.257322,-2.537438,7.164886,-6.930945,9.477313,2.218091,-0.687133,-5.453607,5.679180],[-9.006040,0.411478,1.267325,1.162116,-2.764526,-7.303591,-3.983129,7.397811,2.045400,0.851510,3.165996,-1.084565,6.201291,2.071787,8.685973],[-6.061370,1.932586,-4.421599,-7.771904,5.357511,3.318981,-4.294615,-2.188053,8.390625,-2.493621,2.106240,4.729756,5.501157,3.299437,2.174888],[7.925422,-5.830753,9.481319,4.443823,-2.298456,-9.093608,-5.325307,-9.409278,-6.220356,3.825871,-8.070671,-0.770537,-4.577327,2.838532,-9.255632]]], dtype = "float64")#candidate|22|(1, 8, 15)|const|float64
bop_23 = relay.minimum(uop_20.astype('uint32'), const_22.astype('uint32')) # shape=(1, 8, 15)
bop_26 = relay.add(uop_20.astype('uint8'), const_22.astype('uint8')) # shape=(1, 8, 15)
uop_29 = relay.atan(uop_18.astype('float32')) # shape=()
func_12_call = mod.get_global_var('func_12')
func_15_call = mutated_mod.get_global_var('func_15')
const_32 = relay.const([[3,-7,6,5,8,2,6,10,3,7,-8,10,6,-5,-6,-6,-9,-9,4,9,-4,8,1,7,5,-5,9,-8,-9,-5],[-8,-3,6,3,8,6,3,3,-3,9,8,-10,1,-3,1,-3,-9,-7,10,6,2,-1,-7,8,-9,-7,-2,6,-5,4],[-7,4,-5,2,10,5,-2,-4,5,9,10,-2,3,8,9,3,-10,3,-7,-3,4,9,-4,-5,5,-4,-1,9,-6,-1],[8,-10,-2,-4,-7,8,-2,-7,9,9,7,-1,10,2,7,-1,-1,3,-4,-4,3,4,8,6,-3,-1,6,9,-10,-2],[-6,3,-5,-1,-3,-2,7,-4,7,-10,4,-1,3,-8,10,-1,-4,4,-1,10,7,2,10,-7,-7,9,10,2,9,8],[2,8,6,-5,4,-2,-9,-7,2,8,-2,-1,-9,8,4,9,-7,-2,-8,1,4,7,10,6,7,-3,1,3,-8,-7]], dtype = "int8")#candidate|32|(6, 30)|const|int8
call_31 = relay.TupleGetItem(func_12_call(relay.reshape(var_17.astype('int8'), []), relay.reshape(const_32.astype('int8'), [12, 15]), ), 1)
call_33 = relay.TupleGetItem(func_15_call(relay.reshape(var_17.astype('int8'), []), relay.reshape(const_32.astype('int8'), [12, 15]), ), 1)
uop_34 = relay.cos(uop_20.astype('float32')) # shape=()
func_12_call = mod.get_global_var('func_12')
func_15_call = mutated_mod.get_global_var('func_15')
call_36 = relay.TupleGetItem(func_12_call(relay.reshape(uop_34.astype('int8'), []), relay.reshape(const_32.astype('int8'), [12, 15]), ), 0)
call_37 = relay.TupleGetItem(func_15_call(relay.reshape(uop_34.astype('int8'), []), relay.reshape(const_32.astype('int8'), [12, 15]), ), 0)
uop_38 = relay.log2(uop_20.astype('float64')) # shape=()
var_40 = relay.var("var_40", dtype = "float32", shape = (5, 14))#candidate|40|(5, 14)|var|float32
bop_41 = relay.floor_divide(uop_34.astype('float32'), var_40.astype('float32')) # shape=(5, 14)
bop_44 = relay.less(uop_18.astype('bool'), var_40.astype('bool')) # shape=(5, 14)
uop_47 = relay.asin(uop_38.astype('float64')) # shape=()
func_12_call = mod.get_global_var('func_12')
func_15_call = mutated_mod.get_global_var('func_15')
call_49 = relay.TupleGetItem(func_12_call(relay.reshape(uop_29.astype('int8'), []), relay.reshape(const_32.astype('int8'), [12, 15]), ), 1)
call_50 = relay.TupleGetItem(func_15_call(relay.reshape(uop_29.astype('int8'), []), relay.reshape(const_32.astype('int8'), [12, 15]), ), 1)
uop_51 = relay.sin(uop_47.astype('float32')) # shape=()
uop_53 = relay.sqrt(uop_51.astype('float64')) # shape=()
output = relay.Tuple([bop_23,bop_26,uop_29,call_31,const_32,call_36,bop_41,bop_44,call_49,uop_53,])
output2 = relay.Tuple([bop_23,bop_26,uop_29,call_33,const_32,call_37,bop_41,bop_44,call_50,uop_53,])
func_55 = relay.Function([var_17,var_40,], output)
mod['func_55'] = func_55
mod = relay.transform.InferType()(mod)
var_56 = relay.var("var_56", dtype = "float32", shape = ())#candidate|56|()|var|float32
var_57 = relay.var("var_57", dtype = "float32", shape = (5, 14))#candidate|57|(5, 14)|var|float32
output = func_55(var_56,var_57,)
func_58 = relay.Function([var_56,var_57,], output)
mutated_mod['func_58'] = func_58
mutated_mod = relay.transform.InferType()(mutated_mod)
var_60 = relay.var("var_60", dtype = "float32", shape = (4, 15, 15))#candidate|60|(4, 15, 15)|var|float32
const_61 = relay.const([[[-3.157803,7.880951,4.772504,9.130114,5.833524,-0.408132,-3.204673,2.090345,6.056453,-8.737527,-7.384867,3.523289,2.008765,2.574342,3.244932],[-6.011195,-0.177350,1.364895,5.919752,7.018574,-2.970500,-0.770971,-5.547835,-9.205135,2.103381,-2.054609,7.911267,-8.894006,-6.572838,3.114474],[-9.888038,3.901027,8.925595,-1.069530,-3.607845,6.091695,1.323074,0.161929,-0.516837,8.083171,-1.948335,7.141452,2.512501,7.676800,0.276001],[3.958836,-2.906217,-2.154086,-4.568638,-1.162125,8.918306,8.746972,-8.436332,-9.646526,-7.286849,-6.758012,1.289834,7.052941,7.427441,9.956983],[8.703578,-5.327825,0.636175,-3.992459,9.459637,-5.209214,-0.216149,7.594421,8.543404,1.657486,-0.554084,-2.167774,6.106339,-7.283471,-1.331082],[8.416545,0.406820,-2.785042,2.324418,-9.068194,5.778984,5.508329,-7.125911,-0.051958,-3.213634,-0.008525,-7.433606,3.776952,-5.303023,-1.352555],[3.341806,-9.401971,-2.891331,7.612270,2.551543,-0.527706,1.992211,0.401493,0.271871,0.405478,8.997283,-1.935816,-8.438668,-0.775775,3.157086],[-9.795655,-4.827246,2.332207,4.697183,-3.357674,-9.580961,9.956470,-9.650423,-6.203295,5.497794,-5.358052,0.028338,-6.133983,-3.145768,-2.134493],[4.172850,-8.192344,7.998862,-9.440113,-2.347792,-0.214031,-8.987967,-0.535338,-2.561729,-7.692209,-0.955472,-3.107792,8.077778,-9.154955,5.628212],[0.701239,3.127546,6.139312,-3.276019,9.574921,-9.893071,7.828371,7.823196,-7.232296,-8.141666,7.941490,6.833193,-9.747185,-8.859880,-7.480674],[1.160360,2.091663,4.379562,-5.662893,-0.441756,-8.258386,0.270657,5.195282,-8.486521,-6.141132,-2.688814,5.045058,6.357233,-2.050898,-3.358108],[-5.142425,8.573348,-6.088177,-4.447390,-6.438451,-7.479414,9.186043,-0.074452,1.675280,-1.170905,-6.891812,1.204744,-6.084421,0.576752,5.227387],[6.703319,-3.844121,5.229587,9.577801,1.115552,-5.487723,1.438729,5.234177,1.945633,-0.259973,-1.623508,-6.231117,-2.705559,-1.018865,-2.393434],[-1.457098,6.336798,-7.572221,2.664811,-7.883510,6.114293,6.447789,9.956760,-5.580126,2.214354,-0.546025,2.663786,6.021953,-4.465011,-3.263759],[5.523278,-3.559099,9.117605,4.234487,9.046064,6.621162,7.265132,8.718741,4.194096,7.053748,-6.411743,-7.982184,-1.020277,6.208057,7.566770]],[[2.678703,-8.110740,-5.558868,-8.247687,2.594927,0.904611,-0.025511,1.787231,4.411533,-1.841818,0.732600,2.292881,-7.410165,2.752329,-4.019767],[8.821146,-3.370002,8.234490,8.369802,-0.631252,7.584877,5.597365,-6.821506,2.246804,7.002833,-2.498563,-0.110863,-0.079218,-9.293036,0.915129],[4.779454,-6.790835,-4.792766,-9.648987,-8.052907,-2.518906,-8.400997,0.171815,-1.999477,8.357363,-5.062334,-2.998977,3.325412,-2.841117,4.248033],[-4.851545,-6.313625,-8.333948,-9.461269,6.429872,4.521454,2.002833,1.883787,7.631509,6.625456,-5.809619,-6.567445,6.549868,5.604785,4.513441],[7.434200,5.766567,9.710859,-4.113071,-9.550226,-8.461265,-8.701862,-3.386703,-6.227735,1.333338,-2.829762,-5.916838,8.128566,-8.071860,7.299756],[5.612476,5.230767,-5.267498,-1.716337,-7.183975,-4.418552,-3.361936,-7.305481,6.927849,-6.797203,9.323077,-5.022652,-2.063490,8.782107,-0.338141],[-1.461358,0.716014,4.637742,-4.524704,-6.159537,-6.516715,1.702926,8.629927,5.130655,5.956797,-3.349078,-8.393797,-0.674247,-1.959397,8.136407],[-6.002823,-1.239313,4.861510,3.233293,6.206208,4.007455,5.067707,-7.994376,-7.777117,7.440045,-6.824072,-2.192974,-3.367187,0.699171,-5.576514],[2.528586,-6.208791,-5.688599,7.409568,-8.566023,-3.071651,3.235899,-4.539227,-1.209079,6.142082,-8.220936,5.417088,3.235226,0.203399,-5.238763],[7.015358,-5.238396,5.913949,-5.008441,1.290427,2.561929,-2.002073,1.600264,7.955419,6.166228,4.163136,-5.237409,4.789366,-9.056649,-5.169313],[-8.872877,-9.125869,8.691270,-2.827349,0.803112,-4.128310,4.584170,0.253386,-1.399087,-6.073599,4.162662,5.033939,8.721437,3.761085,-6.116630],[-9.817589,-0.913908,9.182184,7.731902,4.183918,7.366223,9.860402,-4.345063,6.344811,5.916571,-9.064957,0.970412,-7.520385,-1.177071,-4.927831],[5.871348,-6.909895,-4.683632,-0.132027,7.383867,-9.073429,8.397192,8.633728,-2.640442,-2.592688,-4.793522,-0.267821,3.340814,-3.779565,0.743717],[-2.961592,-3.290996,-0.152190,-1.419784,-5.174581,-7.527010,2.044260,-7.500141,7.653575,7.516784,9.964561,-2.315100,-5.061049,-9.752801,-5.937520],[1.030853,8.345288,1.784747,-4.513960,-9.527217,6.079437,3.238414,-6.647374,2.609515,-3.510850,-0.953907,-7.285152,-6.101972,-9.239380,-7.678946]],[[-2.497835,4.904018,1.361653,2.111376,-4.723133,-5.677289,-9.508707,-1.803405,5.286043,-2.308460,7.759299,2.450219,0.851200,-5.249791,0.418048],[-9.191252,-9.459619,0.789408,-8.108681,-5.245632,-9.333084,-8.378863,-1.029162,8.071523,-9.645809,-0.761971,-9.376535,-7.800179,5.132765,7.419098],[7.965894,-4.187991,4.094792,9.666455,-5.396194,7.623450,-8.736956,6.507612,-1.619361,-9.352365,-4.764536,-4.353546,0.833756,-1.657082,4.833242],[6.517440,-5.282203,8.463999,0.053394,5.265633,-0.365067,-7.553036,9.414812,9.278729,-8.281540,-0.721440,-8.161503,-6.754625,8.816405,-5.577516],[-1.735313,0.076952,3.674706,4.320895,7.748496,-4.933544,2.649969,-0.166407,-0.799188,-7.309892,-8.517887,2.238401,-9.077531,-0.631931,7.066274],[-3.972995,-1.019823,-0.002707,-7.263114,-1.799086,-9.389776,0.677372,9.828189,-0.456473,-3.773753,-0.260100,-1.086087,8.967221,6.997052,-8.364821],[0.052678,7.453124,0.274509,0.238461,6.481613,8.057942,6.792146,1.774085,9.992468,-2.618814,-9.868714,-2.504140,9.161219,6.198531,4.492799],[9.852415,4.854821,-0.231246,-1.796842,-4.730348,6.375396,5.571116,6.064863,1.169444,2.422161,-7.073189,-0.123765,-5.029437,-8.607055,9.806585],[9.421545,-8.399869,3.626111,8.233917,8.476815,8.797398,-1.185049,5.759012,2.704882,-8.511619,-2.710720,-0.695091,8.213910,-0.476595,0.905601],[9.780185,-1.560034,4.994651,-1.481459,5.097496,-2.519238,-2.414127,-4.359163,-8.301771,-1.203838,-4.052284,3.584658,6.706249,4.001649,9.724826],[4.537383,6.120028,-4.082554,8.563448,-2.873658,-9.265700,2.407555,9.828577,-7.198129,4.506916,-3.594725,-1.315252,8.831788,-5.947094,3.935798],[2.294039,-9.746565,1.778000,6.109073,6.246089,0.779462,-0.111082,-6.040256,-5.748837,-4.138626,6.184088,7.978697,-4.505964,7.376902,6.697684],[-1.425782,-3.282569,-2.273085,-1.808172,-1.230517,3.009906,0.530326,0.978106,7.978194,3.284695,6.766740,-1.135739,-1.929791,4.783715,0.291895],[-4.981689,0.874272,-3.468705,-6.110664,8.795767,-2.771035,2.332228,8.519934,4.702268,-4.506228,-6.198334,8.173813,2.722337,3.306769,8.467984],[6.403428,0.182859,-2.368890,-6.800341,-0.398149,-7.423761,-3.255181,-5.472898,-2.151377,-5.341105,-8.680711,-4.763560,3.482342,3.203162,2.857357]],[[4.824561,3.099040,1.388277,-7.601497,-1.411747,-5.691330,7.552225,-3.606211,-2.814643,7.195852,-9.450967,7.290969,0.663517,-4.090407,4.333295],[-6.489738,-5.720030,5.378522,8.214860,-7.766484,-8.624104,-8.769276,5.736755,-1.870109,1.736005,3.847616,2.685934,4.511626,0.700114,-0.796786],[0.553558,-1.305090,-3.155091,8.381761,3.744319,9.111124,-9.293308,-8.186562,8.886572,7.851377,-2.034695,-7.366779,2.647061,0.843892,9.769825],[-2.390005,-3.236123,-9.113818,-2.506396,-7.829550,4.987174,-0.406463,-5.068272,-1.250000,3.203935,-9.926482,-4.412631,5.865302,-2.835888,-2.229103],[-0.014537,-2.792391,7.932825,4.077181,1.933414,-1.249701,-9.784799,-4.170851,6.596847,-9.120994,0.938889,-7.885394,3.606958,3.786066,-8.749899],[5.132074,-9.553963,9.276279,-8.180367,-7.172351,8.026099,7.351018,2.635601,-1.503374,-5.688890,8.854107,9.862766,8.128904,4.756360,3.954887],[-3.768011,9.959576,-7.579374,7.408619,9.965023,-3.133222,-2.148706,-8.985918,-6.829432,-6.706567,0.880470,-4.596750,2.147319,7.230110,-2.501235],[4.385687,8.340001,-1.042350,1.869965,1.804843,3.410933,5.264804,5.989896,6.647532,-9.833831,-2.422762,4.125437,8.685079,-5.370394,8.308086],[7.593486,7.535316,5.350637,-7.433235,4.593469,-6.701794,-4.779735,-0.883206,2.924579,7.515357,7.139005,-5.681605,-4.506257,-8.873904,-9.552102],[8.342984,-5.596376,6.828869,-6.321292,-3.339050,9.167764,-0.148270,2.917580,7.685557,-2.348405,-7.824603,-7.935462,-4.325640,-9.058388,1.982255],[7.767670,-2.504248,8.054973,6.212347,-6.101770,-0.665225,-6.569681,7.141188,3.054131,1.268393,3.975503,-2.764661,-4.939942,-9.087221,2.522770],[3.223826,-0.148493,-6.558618,0.316603,-5.648844,8.091941,7.792956,8.099037,6.223474,9.316987,4.982609,0.343107,-6.713865,-3.207327,-4.134763],[-0.656652,-6.559678,-6.890502,3.658450,2.238683,2.907868,-2.428091,-2.239848,4.112666,-9.612149,-0.253730,3.074806,5.928189,6.477341,-2.384447],[8.900683,-6.625647,8.334824,-7.495365,-5.086304,-9.087827,3.720384,4.155785,9.732862,1.761375,0.155217,3.126882,9.229206,3.087662,-5.869302],[0.424646,-7.929759,-5.938726,-3.608086,-5.284140,-4.630452,-0.278446,5.902527,0.031840,-6.811249,9.898228,7.091914,-4.510669,1.553030,3.310865]]], dtype = "float32")#candidate|61|(4, 15, 15)|const|float32
bop_62 = relay.mod(var_60.astype('float32'), relay.reshape(const_61.astype('float32'), relay.shape_of(var_60))) # shape=(4, 15, 15)
bop_65 = relay.minimum(const_61.astype('uint16'), relay.reshape(var_60.astype('uint16'), relay.shape_of(const_61))) # shape=(4, 15, 15)
var_68 = relay.var("var_68", dtype = "uint16", shape = (4, 15, 15))#candidate|68|(4, 15, 15)|var|uint16
bop_69 = relay.bitwise_or(bop_65.astype('int16'), relay.reshape(var_68.astype('int16'), relay.shape_of(bop_65))) # shape=(4, 15, 15)
var_72 = relay.var("var_72", dtype = "uint16", shape = (4, 15, 15))#candidate|72|(4, 15, 15)|var|uint16
bop_73 = relay.divide(var_68.astype('float32'), relay.reshape(var_72.astype('float32'), relay.shape_of(var_68))) # shape=(4, 15, 15)
uop_76 = relay.log2(var_68.astype('float32')) # shape=(4, 15, 15)
uop_78 = relay.acos(uop_76.astype('float32')) # shape=(4, 15, 15)
func_12_call = mod.get_global_var('func_12')
func_15_call = mutated_mod.get_global_var('func_15')
var_81 = relay.var("var_81", dtype = "int8", shape = ())#candidate|81|()|var|int8
var_82 = relay.var("var_82", dtype = "int8", shape = (180,))#candidate|82|(180,)|var|int8
call_80 = relay.TupleGetItem(func_12_call(relay.reshape(var_81.astype('int8'), []), relay.reshape(var_82.astype('int8'), [12, 15]), ), 0)
call_83 = relay.TupleGetItem(func_15_call(relay.reshape(var_81.astype('int8'), []), relay.reshape(var_82.astype('int8'), [12, 15]), ), 0)
const_84 = relay.const([[8.080389,-9.847112,-9.220446,-9.744026,3.453905,6.260837,1.581632,7.744576,-6.046851,-1.501066,-5.293061,-5.043300,8.034187,9.160072,-2.636946],[-3.655924,5.462611,8.931542,-4.692945,0.775922,3.362458,-4.772243,-5.010991,-6.056841,-2.310548,-8.393795,-2.877370,-0.023287,-1.845266,5.008415],[-4.981032,-1.818107,-7.074958,8.902809,-6.988048,-5.379017,2.185004,-7.155547,2.062122,6.809626,8.732911,-5.992184,-8.751539,5.416563,2.282382],[-0.675314,1.365356,0.380210,-2.117409,-1.311143,3.473710,-5.683874,3.748740,4.624968,2.318937,-9.540480,-9.117245,-5.669814,2.687558,5.299600],[-4.305884,-4.017637,5.385592,-8.728976,-9.631220,-1.274117,5.383285,8.663374,4.810511,2.194393,4.322761,5.059441,5.629948,-8.347947,-1.479006],[2.700645,9.098559,-3.457339,8.201528,-2.060071,0.770697,2.727015,8.953598,3.293889,1.695695,6.205311,-0.032073,-3.479143,-9.450469,-3.622843],[7.105719,-6.468098,4.599091,3.909633,5.665423,-6.198739,-7.245683,1.226928,-2.699512,-3.738409,-9.992264,-2.917005,-0.795011,-2.327713,-6.902370],[7.445073,-9.600837,-8.053134,-1.759130,-3.203634,-2.997619,-9.254820,-3.223168,-7.404636,-0.017939,6.950997,5.798385,5.640212,-7.741615,-1.737156],[-2.870239,-7.432289,3.000875,-9.016333,-2.589442,3.378289,-7.154189,3.837314,-0.554291,1.983625,-0.842509,0.186468,5.116824,-4.072285,-1.768088],[-8.972954,-5.685228,7.787874,8.786281,-6.700101,-9.175289,-2.297437,7.752639,8.802317,-0.187493,3.352438,6.289802,-4.514352,3.618401,4.362021],[8.118276,0.989349,-8.977995,-5.091558,-5.244120,-2.112598,-2.390473,9.931349,-4.437532,3.349359,-1.180350,-5.915381,1.389408,-7.308760,2.156668],[-4.347931,7.342253,-7.366660,-5.319377,4.914091,8.582439,9.543669,8.098588,-6.793773,-6.810791,-2.221013,-0.129447,-1.260109,9.193802,-7.535021]], dtype = "float64")#candidate|84|(12, 15)|const|float64
bop_85 = relay.less(call_80.astype('bool'), relay.reshape(const_84.astype('bool'), relay.shape_of(call_80))) # shape=(12, 15)
bop_88 = relay.less(call_83.astype('bool'), relay.reshape(const_84.astype('bool'), relay.shape_of(call_83))) # shape=(12, 15)
bop_89 = relay.less_equal(uop_76.astype('bool'), var_81.astype('bool')) # shape=(4, 15, 15)
const_92 = relay.const([[[False,True,False,True,True,False,True,False,False,True,False,True,False,True,False],[False,True,False,True,True,True,False,True,False,False,False,False,False,True,False],[False,True,False,True,True,True,True,False,True,True,True,True,True,False,False],[True,False,True,True,True,True,True,False,False,True,False,False,True,False,True],[False,True,True,False,False,False,True,True,False,True,False,True,False,True,True],[True,True,True,False,False,True,True,True,True,True,True,True,True,False,False],[True,False,True,False,False,True,False,False,False,False,True,False,True,True,False],[True,False,True,False,True,True,True,False,True,False,False,False,False,True,False],[False,False,True,True,False,True,False,False,True,False,False,False,False,False,False],[False,True,False,True,True,True,True,True,False,False,True,False,False,True,True],[False,True,False,True,False,False,True,False,True,False,False,True,True,True,True],[True,True,False,True,True,False,True,False,True,True,False,False,True,False,False],[False,False,True,False,False,False,True,True,False,False,True,True,True,False,False],[True,True,True,True,True,False,True,False,False,False,True,False,True,False,False],[True,False,True,False,True,True,False,False,False,True,False,True,False,True,False]],[[False,False,True,True,False,False,False,True,False,False,False,True,True,True,True],[True,False,False,False,False,True,True,True,True,True,False,True,True,False,False],[True,False,True,False,True,True,True,True,False,True,False,False,True,True,True],[False,False,True,False,True,False,True,False,True,False,False,True,True,True,True],[False,False,True,True,False,False,False,True,False,False,True,False,True,False,True],[False,False,True,False,True,False,False,False,True,True,True,True,False,False,False],[True,False,False,False,True,False,False,True,False,False,False,True,False,True,True],[True,True,True,True,True,False,True,True,True,False,False,False,True,False,False],[True,True,True,True,True,False,False,False,False,False,False,False,True,True,True],[False,False,False,True,True,False,False,True,True,True,True,False,True,True,False],[True,False,False,False,False,True,True,False,True,True,False,False,True,True,True],[False,True,True,False,False,True,False,False,False,False,True,True,False,False,False],[False,False,True,False,False,True,False,True,True,True,False,True,True,True,False],[False,True,True,False,False,True,True,False,False,True,False,True,False,False,False],[True,True,False,False,True,False,True,True,False,False,True,False,True,False,False]],[[True,True,True,False,True,True,True,False,False,True,True,False,True,True,True],[True,False,False,True,False,True,True,True,True,True,True,False,False,False,False],[False,True,True,True,True,False,True,True,False,True,False,True,True,True,True],[False,False,True,False,True,False,False,True,True,True,False,True,True,False,True],[True,False,True,True,False,False,True,True,True,False,False,False,True,True,True],[False,False,False,False,False,True,False,False,False,True,True,True,False,False,True],[False,False,False,True,True,False,True,False,True,True,False,True,True,False,False],[False,False,False,False,False,True,False,False,True,False,False,True,True,False,True],[True,False,True,True,True,False,True,True,True,False,False,True,True,True,True],[True,True,False,False,False,False,True,False,True,False,False,True,True,False,True],[True,True,False,False,False,True,True,True,False,False,True,False,True,False,True],[True,True,True,True,True,True,True,False,True,False,True,True,True,False,True],[True,True,False,True,False,False,False,True,True,True,True,False,True,False,False],[True,True,False,False,False,True,True,False,False,False,False,True,True,False,True],[True,True,True,True,False,True,False,False,False,True,True,True,False,True,True]],[[False,False,True,False,False,True,False,True,True,False,True,False,True,False,False],[False,True,True,True,True,True,False,True,True,False,False,True,True,False,False],[True,True,False,False,True,False,True,True,True,True,True,False,True,False,False],[True,True,False,False,False,True,True,True,False,False,True,False,True,True,True],[True,False,False,True,False,True,True,True,True,False,False,False,False,True,True],[True,False,False,True,False,False,False,True,True,False,False,True,False,True,False],[True,True,False,True,False,False,True,False,True,False,False,False,False,True,True],[True,False,False,True,True,False,False,True,False,True,True,False,False,True,True],[False,True,False,False,False,True,False,True,True,False,True,True,False,False,False],[True,True,False,True,True,True,False,True,False,False,False,True,False,True,True],[True,True,False,False,False,False,True,False,False,False,False,True,True,False,True],[False,False,True,False,True,False,False,True,True,False,True,True,False,True,False],[True,True,False,True,True,False,True,False,False,True,False,True,True,True,True],[False,True,True,True,False,True,True,False,False,False,False,False,False,False,True],[False,True,False,False,False,True,False,False,True,True,True,True,False,False,True]]], dtype = "bool")#candidate|92|(4, 15, 15)|const|bool
bop_93 = relay.floor_mod(bop_89.astype('float32'), relay.reshape(const_92.astype('float32'), relay.shape_of(bop_89))) # shape=(4, 15, 15)
uop_96 = relay.cos(uop_78.astype('float64')) # shape=(4, 15, 15)
uop_98 = relay.cos(uop_96.astype('float64')) # shape=(4, 15, 15)
var_100 = relay.var("var_100", dtype = "bool", shape = (4, 15, 15))#candidate|100|(4, 15, 15)|var|bool
bop_101 = relay.bitwise_and(bop_89.astype('int8'), relay.reshape(var_100.astype('int8'), relay.shape_of(bop_89))) # shape=(4, 15, 15)
func_55_call = mod.get_global_var('func_55')
func_58_call = mutated_mod.get_global_var('func_58')
const_105 = relay.const([[-3.745830,-7.999040,-4.189609,-5.521004,-8.339935,8.938755,1.432220,7.830643,9.896532,-2.943826],[-9.687791,-3.349652,-4.508453,-8.863057,-0.824187,8.642813,-8.295919,0.929305,3.950432,2.949721],[8.988168,5.868837,-6.642345,-7.154372,-0.405022,4.383496,0.791105,-8.863280,8.542532,6.652459],[3.277075,-5.816094,-1.391738,-8.046005,0.415573,4.518984,-5.006886,-0.929254,-3.628751,0.330418],[6.464410,6.344000,-2.219168,8.258924,-5.088445,0.400986,6.182991,6.681691,-1.382710,7.026310],[7.794020,-0.830953,-3.663246,-5.125096,9.485520,6.112913,7.531814,2.389575,-4.584656,7.391716],[5.112661,-4.410302,4.484581,-3.088298,-6.615054,1.709755,8.571560,3.606001,-9.314112,-8.666415]], dtype = "float32")#candidate|105|(7, 10)|const|float32
call_104 = relay.TupleGetItem(func_55_call(relay.reshape(var_81.astype('float32'), []), relay.reshape(const_105.astype('float32'), [5, 14]), ), 3)
call_106 = relay.TupleGetItem(func_58_call(relay.reshape(var_81.astype('float32'), []), relay.reshape(const_105.astype('float32'), [5, 14]), ), 3)
bop_107 = relay.equal(const_84.astype('bool'), var_81.astype('bool')) # shape=(12, 15)
var_110 = relay.var("var_110", dtype = "float64", shape = (4, 15, 15))#candidate|110|(4, 15, 15)|var|float64
bop_111 = relay.bitwise_or(uop_98.astype('int32'), relay.reshape(var_110.astype('int32'), relay.shape_of(uop_98))) # shape=(4, 15, 15)
output = relay.Tuple([bop_62,bop_69,bop_73,var_82,bop_85,bop_93,bop_101,call_104,const_105,bop_107,bop_111,])
output2 = relay.Tuple([bop_62,bop_69,bop_73,var_82,bop_88,bop_93,bop_101,call_106,const_105,bop_107,bop_111,])
func_114 = relay.Function([var_60,var_68,var_72,var_81,var_82,var_100,var_110,], output)
mod['func_114'] = func_114
mod = relay.transform.InferType()(mod)
mutated_mod['func_114'] = func_114
mutated_mod = relay.transform.InferType()(mutated_mod)
func_114_call = mutated_mod.get_global_var('func_114')
var_116 = relay.var("var_116", dtype = "float32", shape = (4, 15, 15))#candidate|116|(4, 15, 15)|var|float32
var_117 = relay.var("var_117", dtype = "uint16", shape = (4, 15, 15))#candidate|117|(4, 15, 15)|var|uint16
var_118 = relay.var("var_118", dtype = "uint16", shape = (4, 15, 15))#candidate|118|(4, 15, 15)|var|uint16
var_119 = relay.var("var_119", dtype = "int8", shape = ())#candidate|119|()|var|int8
var_120 = relay.var("var_120", dtype = "int8", shape = (180,))#candidate|120|(180,)|var|int8
var_121 = relay.var("var_121", dtype = "bool", shape = (4, 15, 15))#candidate|121|(4, 15, 15)|var|bool
var_122 = relay.var("var_122", dtype = "float64", shape = (4, 15, 15))#candidate|122|(4, 15, 15)|var|float64
call_115 = func_114_call(var_116,var_117,var_118,var_119,var_120,var_121,var_122,)
output = call_115
func_123 = relay.Function([var_116,var_117,var_118,var_119,var_120,var_121,var_122,], output)
mutated_mod['func_123'] = func_123
mutated_mod = relay.transform.InferType()(mutated_mod)
var_125 = relay.var("var_125", dtype = "int32", shape = ())#candidate|125|()|var|int32
var_126 = relay.var("var_126", dtype = "int32", shape = (8, 2))#candidate|126|(8, 2)|var|int32
bop_127 = relay.less(var_125.astype('bool'), var_126.astype('bool')) # shape=(8, 2)
var_130 = relay.var("var_130", dtype = "int32", shape = (8, 2))#candidate|130|(8, 2)|var|int32
bop_131 = relay.not_equal(var_126.astype('bool'), relay.reshape(var_130.astype('bool'), relay.shape_of(var_126))) # shape=(8, 2)
bop_134 = relay.multiply(var_125.astype('int32'), var_126.astype('int32')) # shape=(8, 2)
uop_137 = relay.erf(var_130.astype('float32')) # shape=(8, 2)
bop_139 = relay.left_shift(uop_137.astype('uint8'), relay.reshape(var_126.astype('uint8'), relay.shape_of(uop_137))) # shape=(8, 2)
bop_142 = relay.left_shift(bop_139.astype('int32'), relay.reshape(var_126.astype('int32'), relay.shape_of(bop_139))) # shape=(8, 2)
uop_145 = relay.sin(uop_137.astype('float32')) # shape=(8, 2)
bop_147 = relay.bitwise_or(bop_134.astype('int64'), relay.reshape(bop_142.astype('int64'), relay.shape_of(bop_134))) # shape=(8, 2)
uop_150 = relay.acosh(uop_145.astype('float64')) # shape=(8, 2)
uop_152 = relay.acos(uop_150.astype('float32')) # shape=(8, 2)
uop_154 = relay.sin(uop_152.astype('float32')) # shape=(8, 2)
uop_156 = relay.sin(uop_154.astype('float32')) # shape=(8, 2)
bop_158 = relay.multiply(uop_154.astype('uint64'), relay.reshape(bop_134.astype('uint64'), relay.shape_of(uop_154))) # shape=(8, 2)
uop_161 = relay.exp(uop_156.astype('float32')) # shape=(8, 2)
bop_163 = relay.left_shift(uop_154.astype('uint64'), relay.reshape(uop_145.astype('uint64'), relay.shape_of(uop_154))) # shape=(8, 2)
bop_166 = relay.add(uop_161.astype('uint16'), relay.reshape(uop_154.astype('uint16'), relay.shape_of(uop_161))) # shape=(8, 2)
var_169 = relay.var("var_169", dtype = "float32", shape = (8, 2))#candidate|169|(8, 2)|var|float32
bop_170 = relay.floor_mod(uop_161.astype('float64'), relay.reshape(var_169.astype('float64'), relay.shape_of(uop_161))) # shape=(8, 2)
const_173 = relay.const([[-2,4],[4,-4],[-9,9],[10,-7],[3,6],[-6,4],[7,-9],[-2,4]], dtype = "uint16")#candidate|173|(8, 2)|const|uint16
bop_174 = relay.bitwise_and(bop_166.astype('uint32'), relay.reshape(const_173.astype('uint32'), relay.shape_of(bop_166))) # shape=(8, 2)
bop_177 = relay.logical_xor(bop_174.astype('uint8'), relay.reshape(bop_170.astype('uint8'), relay.shape_of(bop_174))) # shape=(8, 2)
uop_180 = relay.tan(bop_174.astype('float32')) # shape=(8, 2)
uop_182 = relay.atanh(uop_180.astype('float32')) # shape=(8, 2)
uop_184 = relay.rsqrt(uop_156.astype('float64')) # shape=(8, 2)
bop_186 = relay.bitwise_xor(uop_182.astype('int32'), relay.reshape(bop_134.astype('int32'), relay.shape_of(uop_182))) # shape=(8, 2)
uop_189 = relay.acosh(uop_180.astype('float64')) # shape=(8, 2)
uop_191 = relay.sin(uop_182.astype('float32')) # shape=(8, 2)
uop_193 = relay.asin(uop_191.astype('float32')) # shape=(8, 2)
var_195 = relay.var("var_195", dtype = "float32", shape = (8, 2))#candidate|195|(8, 2)|var|float32
bop_196 = relay.logical_xor(uop_193.astype('uint64'), relay.reshape(var_195.astype('uint64'), relay.shape_of(uop_193))) # shape=(8, 2)
uop_199 = relay.cosh(uop_193.astype('float32')) # shape=(8, 2)
bop_201 = relay.add(uop_193.astype('uint32'), relay.reshape(bop_196.astype('uint32'), relay.shape_of(uop_193))) # shape=(8, 2)
uop_204 = relay.log(uop_199.astype('float32')) # shape=(8, 2)
bop_206 = relay.less_equal(uop_199.astype('bool'), relay.reshape(bop_134.astype('bool'), relay.shape_of(uop_199))) # shape=(8, 2)
func_114_call = mod.get_global_var('func_114')
func_123_call = mutated_mod.get_global_var('func_123')
var_210 = relay.var("var_210", dtype = "float32", shape = (900,))#candidate|210|(900,)|var|float32
var_211 = relay.var("var_211", dtype = "int8", shape = (180,))#candidate|211|(180,)|var|int8
call_209 = relay.TupleGetItem(func_114_call(relay.reshape(var_210.astype('float32'), [4, 15, 15]), relay.reshape(var_210.astype('uint16'), [4, 15, 15]), relay.reshape(var_210.astype('uint16'), [4, 15, 15]), relay.reshape(var_125.astype('int8'), []), relay.reshape(var_211.astype('int8'), [180,]), relay.reshape(var_210.astype('bool'), [4, 15, 15]), relay.reshape(var_210.astype('float64'), [4, 15, 15]), ), 7)
call_212 = relay.TupleGetItem(func_123_call(relay.reshape(var_210.astype('float32'), [4, 15, 15]), relay.reshape(var_210.astype('uint16'), [4, 15, 15]), relay.reshape(var_210.astype('uint16'), [4, 15, 15]), relay.reshape(var_125.astype('int8'), []), relay.reshape(var_211.astype('int8'), [180,]), relay.reshape(var_210.astype('bool'), [4, 15, 15]), relay.reshape(var_210.astype('float64'), [4, 15, 15]), ), 7)
bop_213 = relay.bitwise_or(uop_199.astype('int16'), relay.reshape(uop_152.astype('int16'), relay.shape_of(uop_199))) # shape=(8, 2)
uop_216 = relay.log2(uop_204.astype('float64')) # shape=(8, 2)
var_218 = relay.var("var_218", dtype = "float32", shape = (8, 2))#candidate|218|(8, 2)|var|float32
bop_219 = relay.minimum(uop_204.astype('int32'), relay.reshape(var_218.astype('int32'), relay.shape_of(uop_204))) # shape=(8, 2)
bop_222 = relay.not_equal(uop_216.astype('bool'), relay.reshape(bop_186.astype('bool'), relay.shape_of(uop_216))) # shape=(8, 2)
bop_225 = relay.greater(bop_222.astype('bool'), relay.reshape(const_173.astype('bool'), relay.shape_of(bop_222))) # shape=(8, 2)
uop_228 = relay.sqrt(bop_222.astype('float64')) # shape=(8, 2)
var_230 = relay.var("var_230", dtype = "float64", shape = (8, 2))#candidate|230|(8, 2)|var|float64
bop_231 = relay.left_shift(uop_216.astype('uint32'), relay.reshape(var_230.astype('uint32'), relay.shape_of(uop_216))) # shape=(8, 2)
uop_234 = relay.atanh(uop_228.astype('float32')) # shape=(8, 2)
bop_236 = relay.bitwise_xor(uop_234.astype('uint64'), relay.reshape(bop_158.astype('uint64'), relay.shape_of(uop_234))) # shape=(8, 2)
uop_239 = relay.acosh(uop_234.astype('float64')) # shape=(8, 2)
var_241 = relay.var("var_241", dtype = "uint64", shape = (8, 2))#candidate|241|(8, 2)|var|uint64
bop_242 = relay.greater_equal(bop_236.astype('bool'), relay.reshape(var_241.astype('bool'), relay.shape_of(bop_236))) # shape=(8, 2)
var_245 = relay.var("var_245", dtype = "float32", shape = (8, 2))#candidate|245|(8, 2)|var|float32
bop_246 = relay.logical_and(uop_234.astype('bool'), relay.reshape(var_245.astype('bool'), relay.shape_of(uop_234))) # shape=(8, 2)
output = relay.Tuple([bop_127,bop_131,bop_147,bop_163,bop_177,uop_184,uop_189,bop_201,bop_206,call_209,var_210,var_211,bop_213,bop_219,bop_225,bop_231,uop_239,bop_242,bop_246,])
output2 = relay.Tuple([bop_127,bop_131,bop_147,bop_163,bop_177,uop_184,uop_189,bop_201,bop_206,call_212,var_210,var_211,bop_213,bop_219,bop_225,bop_231,uop_239,bop_242,bop_246,])
func_249 = relay.Function([var_125,var_126,var_130,var_169,var_195,var_210,var_211,var_218,var_230,var_241,var_245,], output)
mod['func_249'] = func_249
mod = relay.transform.InferType()(mod)
var_250 = relay.var("var_250", dtype = "int32", shape = ())#candidate|250|()|var|int32
var_251 = relay.var("var_251", dtype = "int32", shape = (8, 2))#candidate|251|(8, 2)|var|int32
var_252 = relay.var("var_252", dtype = "int32", shape = (8, 2))#candidate|252|(8, 2)|var|int32
var_253 = relay.var("var_253", dtype = "float32", shape = (8, 2))#candidate|253|(8, 2)|var|float32
var_254 = relay.var("var_254", dtype = "float32", shape = (8, 2))#candidate|254|(8, 2)|var|float32
var_255 = relay.var("var_255", dtype = "float32", shape = (900,))#candidate|255|(900,)|var|float32
var_256 = relay.var("var_256", dtype = "int8", shape = (180,))#candidate|256|(180,)|var|int8
var_257 = relay.var("var_257", dtype = "float32", shape = (8, 2))#candidate|257|(8, 2)|var|float32
var_258 = relay.var("var_258", dtype = "float64", shape = (8, 2))#candidate|258|(8, 2)|var|float64
var_259 = relay.var("var_259", dtype = "uint64", shape = (8, 2))#candidate|259|(8, 2)|var|uint64
var_260 = relay.var("var_260", dtype = "float32", shape = (8, 2))#candidate|260|(8, 2)|var|float32
output = func_249(var_250,var_251,var_252,var_253,var_254,var_255,var_256,var_257,var_258,var_259,var_260,)
func_261 = relay.Function([var_250,var_251,var_252,var_253,var_254,var_255,var_256,var_257,var_258,var_259,var_260,], output)
mutated_mod['func_261'] = func_261
mutated_mod = relay.transform.InferType()(mutated_mod)
const_263 = relay.const(-4.309414, dtype = "float64")#candidate|263|()|const|float64
var_264 = relay.var("var_264", dtype = "float64", shape = (12, 9))#candidate|264|(12, 9)|var|float64
bop_265 = relay.less(const_263.astype('bool'), var_264.astype('bool')) # shape=(12, 9)
bop_268 = relay.floor_mod(const_263.astype('float64'), bop_265.astype('float64')) # shape=(12, 9)
uop_271 = relay.sin(bop_268.astype('float64')) # shape=(12, 9)
bop_273 = relay.multiply(uop_271.astype('uint32'), relay.reshape(var_264.astype('uint32'), relay.shape_of(uop_271))) # shape=(12, 9)
func_12_call = mod.get_global_var('func_12')
func_15_call = mutated_mod.get_global_var('func_15')
const_277 = relay.const([9,1,3,2,1,-4,3,-6,10,8,-9,-10,1,6,-9,1,5,10,1,-3,9,3,3,4,-1,3,-7,4,10,7,9,1,-10,-1,10,3,-1,-3,4,-10,-2,-9,-7,6,-5,9,10,7,1,-1,9,-2,10,7,-5,-1,1,5,-4,-5,5,-10,-6,-7,4,9,1,6,-9,5,1,2,-7,1,-9,10,-10,10,-7,4,2,5,-5,5,3,9,-8,-5,9,8,-2,-3,-9,10,-8,9,8,-5,4,-8,-2,2,-7,6,-3,-5,3,9,8,7,-4,8,-10,-4,5,-3,8,-8,2,-2,-8,-2,-4,2,10,10,8,7,-2,-4,2,5,-3,-4,7,-2,2,8,4,-8,1,-10,5,-7,-8,-4,-10,-10,-2,-10,10,-3,-7,-10,3,7,7,3,5,-9,-2,-1,3,-7,-6,3,-10,-2,-9,10,-2,6,-4,-1,10,10,-6,6,4,6], dtype = "int8")#candidate|277|(180,)|const|int8
call_276 = relay.TupleGetItem(func_12_call(relay.reshape(const_263.astype('int8'), []), relay.reshape(const_277.astype('int8'), [12, 15]), ), 0)
call_278 = relay.TupleGetItem(func_15_call(relay.reshape(const_263.astype('int8'), []), relay.reshape(const_277.astype('int8'), [12, 15]), ), 0)
bop_279 = relay.not_equal(bop_273.astype('bool'), const_263.astype('bool')) # shape=(12, 9)
uop_282 = relay.rsqrt(bop_279.astype('float32')) # shape=(12, 9)
uop_284 = relay.log10(uop_282.astype('float32')) # shape=(12, 9)
bop_286 = relay.left_shift(uop_282.astype('int8'), relay.reshape(bop_268.astype('int8'), relay.shape_of(uop_282))) # shape=(12, 9)
bop_289 = relay.maximum(uop_284.astype('int32'), relay.reshape(uop_282.astype('int32'), relay.shape_of(uop_284))) # shape=(12, 9)
var_292 = relay.var("var_292", dtype = "float32", shape = (12, 9))#candidate|292|(12, 9)|var|float32
bop_293 = relay.multiply(uop_282.astype('float32'), relay.reshape(var_292.astype('float32'), relay.shape_of(uop_282))) # shape=(12, 9)
var_296 = relay.var("var_296", dtype = "float32", shape = (12, 9))#candidate|296|(12, 9)|var|float32
bop_297 = relay.add(uop_284.astype('uint64'), relay.reshape(var_296.astype('uint64'), relay.shape_of(uop_284))) # shape=(12, 9)
var_300 = relay.var("var_300", dtype = "float32", shape = (12, 9))#candidate|300|(12, 9)|var|float32
bop_301 = relay.minimum(var_296.astype('uint16'), relay.reshape(var_300.astype('uint16'), relay.shape_of(var_296))) # shape=(12, 9)
uop_304 = relay.sinh(uop_284.astype('float64')) # shape=(12, 9)
bop_306 = relay.floor_divide(uop_304.astype('float32'), relay.reshape(uop_282.astype('float32'), relay.shape_of(uop_304))) # shape=(12, 9)
var_309 = relay.var("var_309", dtype = "float32", shape = (12, 9))#candidate|309|(12, 9)|var|float32
bop_310 = relay.left_shift(bop_306.astype('int16'), relay.reshape(var_309.astype('int16'), relay.shape_of(bop_306))) # shape=(12, 9)
uop_313 = relay.erf(bop_297.astype('float32')) # shape=(12, 9)
uop_315 = relay.log2(uop_313.astype('float32')) # shape=(12, 9)
bop_317 = relay.greater_equal(uop_313.astype('bool'), const_263.astype('bool')) # shape=(12, 9)
bop_320 = relay.bitwise_and(uop_315.astype('uint32'), relay.reshape(uop_313.astype('uint32'), relay.shape_of(uop_315))) # shape=(12, 9)
uop_323 = relay.cosh(uop_315.astype('float32')) # shape=(12, 9)
uop_325 = relay.erf(bop_320.astype('float64')) # shape=(12, 9)
uop_327 = relay.log2(bop_320.astype('float32')) # shape=(12, 9)
var_329 = relay.var("var_329", dtype = "float64", shape = (12, 9))#candidate|329|(12, 9)|var|float64
bop_330 = relay.subtract(uop_325.astype('int16'), relay.reshape(var_329.astype('int16'), relay.shape_of(uop_325))) # shape=(12, 9)
uop_333 = relay.cosh(bop_297.astype('float32')) # shape=(12, 9)
bop_335 = relay.floor_divide(bop_330.astype('float64'), relay.reshape(bop_286.astype('float64'), relay.shape_of(bop_330))) # shape=(12, 9)
uop_338 = relay.sinh(bop_330.astype('float32')) # shape=(12, 9)
bop_340 = relay.equal(uop_338.astype('bool'), relay.reshape(bop_268.astype('bool'), relay.shape_of(uop_338))) # shape=(12, 9)
output = relay.Tuple([call_276,const_277,bop_289,bop_293,bop_301,bop_310,bop_317,uop_323,uop_327,uop_333,bop_335,bop_340,])
output2 = relay.Tuple([call_278,const_277,bop_289,bop_293,bop_301,bop_310,bop_317,uop_323,uop_327,uop_333,bop_335,bop_340,])
F = relay.Function([var_264,var_292,var_296,var_300,var_309,var_329,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_264,var_292,var_296,var_300,var_309,var_329,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_264= np.array([[0.080912,-3.245923,4.508462,9.229418,-1.219728,-4.721589,9.595852,-8.704948,-8.226216],[-8.554497,-6.745136,8.113534,-8.001855,6.477185,-0.434458,3.054926,-3.109597,-2.850521],[9.616905,7.345276,-9.389466,-5.497394,5.300543,-0.675978,-0.886543,2.419440,5.855834],[3.542281,-3.721318,7.354174,7.871348,-7.098097,-0.231523,-0.284977,-1.803445,-5.011447],[0.137269,-1.600640,9.497282,-7.970509,5.698266,-3.341998,-9.838027,7.152831,-9.088808],[-7.448816,6.654685,-2.815862,0.471583,4.085805,-5.320462,9.769344,6.746741,-8.832016],[-6.828445,-8.362208,-4.190451,-9.348851,-7.298265,-0.790549,-1.705190,-9.064156,8.125899],[0.205957,2.631131,8.575931,-8.567734,2.031994,-0.357151,-8.493478,-8.922893,8.771722],[-9.244595,-6.380407,0.908767,7.059327,9.852123,3.534690,-0.396731,9.176868,7.430338],[-0.827403,4.001712,6.983347,1.601216,-0.186832,-7.668989,6.381636,1.881192,7.420331],[-5.252102,-1.385778,2.724257,-6.121417,5.156480,2.969002,-9.402447,-1.671681,-1.205842],[-3.308192,-4.649064,9.430044,-2.007738,1.099077,-9.731903,-2.513802,0.083438,-2.789571]], dtype='float64')
module1.set_input('var_264', input_264)
input_292= np.array([[-9.643768,1.831220,0.875404,-4.618704,-0.839690,6.450232,4.204233,-6.574002,4.474650],[-3.037916,-9.531328,5.291655,9.992306,4.373736,6.280447,4.366953,8.978523,8.024654],[6.273485,-5.066224,-4.336635,-9.077752,8.744566,2.170616,6.041855,-4.206771,9.141599],[-2.827883,9.389195,-7.997230,-6.640931,-5.227752,-0.215512,-3.045539,-7.471820,2.816500],[-6.374900,-3.030429,-7.318144,-1.200786,9.300032,-4.023536,5.237026,7.839949,-9.680617],[6.716217,2.031442,-1.323681,8.916649,-3.191288,-7.559395,-6.472389,2.350489,-5.268226],[2.312703,2.647527,-7.913273,7.243221,7.173778,-5.360727,-6.111826,-1.046482,-7.645735],[1.826863,7.367561,7.004251,4.340822,-0.982990,-5.806242,0.103430,-7.208886,-0.700433],[-0.200542,-5.240424,7.987238,0.120359,-8.278186,6.320043,2.588376,-4.781709,-5.836959],[-8.401501,3.016280,4.356681,4.303209,1.921724,4.466783,-5.899140,-9.887250,4.069388],[-0.063504,1.058434,-2.658156,4.799984,-8.536919,-1.937200,9.737995,-6.787277,-4.887881],[-6.560143,-9.046654,6.423989,2.568375,8.586660,-7.558989,2.575020,-0.509674,2.716167]], dtype='float32')
module1.set_input('var_292', input_292)
input_296= np.array([[-0.740744,-9.272868,-0.991895,6.410704,7.518119,-6.307889,9.678685,3.444326,0.217401],[-8.245737,2.850613,-5.638260,-4.266647,-9.184058,-3.359333,-5.313575,-0.141445,6.108133],[3.732720,-8.849681,8.152350,-9.415861,6.601161,-7.952665,-7.784523,8.695427,9.764546],[9.099779,-2.467547,-4.851099,8.052040,1.249160,0.520283,-5.651799,3.705181,4.326518],[-1.867289,-2.935330,4.848305,-2.319749,4.606419,1.242390,4.308838,-9.668625,-3.274833],[-7.091012,7.639427,8.574692,8.118297,-3.437639,-0.382462,0.504522,0.879771,-8.023084],[-7.740590,8.494803,3.971163,-5.981873,8.675650,-3.582428,0.884062,-7.518264,-4.014334],[4.476837,8.886261,-6.441557,7.505756,-1.027302,3.879125,-8.913149,0.474061,7.517295],[-3.606212,3.872215,7.010862,-8.024109,2.152701,0.747783,-4.394358,1.118178,-9.369503],[-4.437826,3.847037,6.587210,2.105774,-4.459867,7.194612,2.388299,-0.978311,8.790876],[-0.265231,-5.273700,-0.914241,7.689345,5.794233,7.216922,2.424408,3.963814,-0.292630],[9.563136,-5.924583,7.105140,-2.186849,-9.106640,0.206791,-0.131469,7.579979,0.742866]], dtype='float32')
module1.set_input('var_296', input_296)
input_300= np.array([[-2.297912,-0.954810,6.040321,-4.652045,6.328568,9.698231,-0.801761,-2.727990,8.359207],[-3.151115,-5.939864,-9.651314,-9.733038,-0.838772,9.842550,-1.166524,-3.936702,4.179879],[-7.471820,-3.337595,-5.995469,6.429723,4.645170,3.266330,3.954323,-3.018118,-8.005635],[-6.103220,7.043514,-3.464379,-1.447231,-3.222686,-8.996286,1.739995,5.103012,-1.196258],[1.864323,-9.285680,4.333644,8.665445,8.752479,7.776180,-4.073758,9.688202,-5.727512],[2.370665,-5.771648,1.968883,7.377076,4.208639,8.146617,-5.262607,7.170393,8.785096],[5.807922,-0.567590,-5.778097,-8.925276,9.929554,-3.637808,-5.771146,-6.530666,9.960307],[1.583711,-4.948528,-5.703944,-4.909775,6.414034,3.169268,7.878257,4.443596,-7.082828],[0.565883,2.543366,-5.678388,-4.906126,0.587970,6.988495,-8.665261,4.609148,9.166880],[-7.886868,6.631001,4.547110,-7.220716,8.701854,-9.049625,6.067423,-3.906882,-1.891071],[-7.704779,1.095157,-6.971692,3.276322,6.064136,8.882333,-9.510704,5.687613,2.337556],[-7.512345,5.552778,-8.549202,8.488125,0.427304,-8.739735,-0.657123,-9.112770,-8.437154]], dtype='float32')
module1.set_input('var_300', input_300)
input_309= np.array([[-2.652501,5.962123,-1.172706,-4.217882,5.725521,-6.166731,1.537314,-3.789854,-4.131065],[-0.943924,3.396013,-4.275206,-3.807676,-7.866094,-0.062103,9.150048,-9.370130,9.055838],[6.229234,7.771437,3.884657,-8.614280,1.614641,6.545522,8.611295,3.346047,4.125140],[-1.293761,4.641782,-8.929561,8.679504,-6.364808,-1.311956,-8.298415,-1.050449,-3.657858],[-9.363438,-8.710487,-1.445457,9.896450,3.763904,-9.300442,-6.021646,-1.605791,9.050678],[-9.622614,-2.275186,4.625726,-1.441305,3.291851,9.678949,-6.297954,-2.487379,3.609412],[-9.042325,-8.481381,-3.412114,-3.199320,8.485128,-8.338593,0.095337,0.506502,1.882776],[-0.987108,-7.668342,-5.956864,-8.525687,3.244583,0.358913,9.427135,-8.588011,-4.344584],[-3.844338,0.905622,6.821613,-8.402621,-5.972851,3.370740,-8.601474,2.240341,5.100858],[2.018217,-0.781270,-7.666790,8.290120,2.137266,4.182622,-8.060125,-4.278988,8.054074],[9.990494,-5.912742,1.176961,-1.078445,-0.468582,-9.044798,3.153140,3.340553,4.205012],[-1.607865,4.787327,-8.881393,2.262045,-7.587124,-2.199697,6.688327,8.936870,-5.144088]], dtype='float32')
module1.set_input('var_309', input_309)
input_329= np.array([[6.703113,8.766273,-0.213459,0.020374,6.213366,-9.538196,-7.285725,3.034955,-7.851787],[-5.764593,5.907708,-4.098564,-7.896061,9.939199,0.127303,-9.863056,-7.007338,-1.384571],[-1.471656,7.683768,-0.551349,-4.414422,-2.015873,-1.430826,1.771193,-8.308570,0.045053],[-7.198604,-9.407643,-1.580819,1.568215,9.270021,-9.708730,5.665103,4.668884,-0.668354],[-4.580015,9.829806,-9.187282,2.948448,-1.276882,-3.693458,-8.387342,-3.935141,8.869693],[2.071660,4.856990,-7.633860,-5.847819,-5.155220,-7.597301,-7.097975,6.875275,0.263347],[5.580631,8.298985,-4.231303,-8.353114,4.096805,-0.760130,8.379004,5.822226,-9.952143],[-9.770891,3.558992,-9.138741,5.798465,-2.819004,-8.087925,-6.408013,2.358351,-7.482961],[-6.670266,-3.482619,2.846125,-8.339851,-1.396161,6.967314,2.173838,-4.592345,5.518068],[7.108001,6.936466,9.243694,9.983882,4.647155,-8.637617,2.307214,-8.564752,-5.842997],[-6.796527,-3.717843,-4.815527,1.861158,2.349610,5.092301,-0.020863,0.238640,-8.764995],[-2.481399,2.515769,-6.167359,9.149450,-6.495632,-8.515837,6.438628,8.680613,4.740432]], dtype='float64')
module1.set_input('var_329', input_329)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_264, input_292, input_296, input_300, input_309, input_329, )
res3 = intrp3.evaluate()(input_264, input_292, input_296, input_300, input_309, input_329, )
res4 = intrp4.evaluate()(input_264, input_292, input_296, input_300, input_309, input_329, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
module5.set_input('var_264', input_264)
module5.set_input('var_292', input_292)
module5.set_input('var_296', input_296)
module5.set_input('var_300', input_300)
module5.set_input('var_309', input_309)
module5.set_input('var_329', input_329)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_264, input_292, input_296, input_300, input_309, input_329, )
res7 = intrp7.evaluate()(input_264, input_292, input_296, input_300, input_309, input_329, )
res8 = intrp8.evaluate()(input_264, input_292, input_296, input_300, input_309, input_329, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
module9.set_input('var_264', input_264)
module9.set_input('var_292', input_292)
module9.set_input('var_296', input_296)
module9.set_input('var_300', input_300)
module9.set_input('var_309', input_309)
module9.set_input('var_329', input_329)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_264, input_292, input_296, input_300, input_309, input_329, )
res11 = intrp11.evaluate()(input_264, input_292, input_296, input_300, input_309, input_329, )
res12 = intrp12.evaluate()(input_264, input_292, input_296, input_300, input_309, input_329, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
module13.set_input('var_264', input_264)
module13.set_input('var_292', input_292)
module13.set_input('var_296', input_296)
module13.set_input('var_300', input_300)
module13.set_input('var_309', input_309)
module13.set_input('var_329', input_329)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_264, input_292, input_296, input_300, input_309, input_329, )
res15 = intrp15.evaluate()(input_264, input_292, input_296, input_300, input_309, input_329, )
res16 = intrp16.evaluate()(input_264, input_292, input_296, input_300, input_309, input_329, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
module17.set_input('var_264', input_264)
module17.set_input('var_292', input_292)
module17.set_input('var_296', input_296)
module17.set_input('var_300', input_300)
module17.set_input('var_309', input_309)
module17.set_input('var_329', input_329)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_264, input_292, input_296, input_300, input_309, input_329, )
res19 = intrp19.evaluate()(input_264, input_292, input_296, input_300, input_309, input_329, )
res20 = intrp20.evaluate()(input_264, input_292, input_296, input_300, input_309, input_329, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
module21.set_input('var_264', input_264)
module21.set_input('var_292', input_292)
module21.set_input('var_296', input_296)
module21.set_input('var_300', input_300)
module21.set_input('var_309', input_309)
module21.set_input('var_329', input_329)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_264, input_292, input_296, input_300, input_309, input_329, )
res23 = intrp23.evaluate()(input_264, input_292, input_296, input_300, input_309, input_329, )
res24 = intrp24.evaluate()(input_264, input_292, input_296, input_300, input_309, input_329, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()

'''21: TVMFuncCall
20: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
19: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
18: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
17: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
16: tvm::transform::Pass::operator()(tvm::IRModule) const
15: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
14: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
13: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
12: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
11: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
10: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
9: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
8: tvm::transform::Pass::operator()(tvm::IRModule) const
7: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
6: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::Pass::operator()(tvm::IRModule) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
0: tvm::DiagnosticContext::Render()

'''