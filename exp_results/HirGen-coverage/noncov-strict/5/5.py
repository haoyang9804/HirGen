import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "uint32", shape = ())#candidate|0|()|var|uint32
var_1 = relay.var("var_1", dtype = "uint32", shape = (15, 7))#candidate|1|(15, 7)|var|uint32
bop_2 = relay.bitwise_and(var_0.astype('uint32'), var_1.astype('uint32')) # shape=(15, 7)
uop_5 = relay.sinh(bop_2.astype('float64')) # shape=(15, 7)
bop_7 = relay.left_shift(uop_5.astype('int64'), relay.reshape(var_1.astype('int64'), relay.shape_of(uop_5))) # shape=(15, 7)
bop_10 = relay.not_equal(bop_7.astype('bool'), relay.reshape(var_1.astype('bool'), relay.shape_of(bop_7))) # shape=(15, 7)
uop_13 = relay.acos(bop_10.astype('float32')) # shape=(15, 7)
bop_15 = relay.left_shift(uop_13.astype('int16'), relay.reshape(bop_10.astype('int16'), relay.shape_of(uop_13))) # shape=(15, 7)
bop_18 = relay.mod(bop_15.astype('float32'), relay.reshape(bop_7.astype('float32'), relay.shape_of(bop_15))) # shape=(15, 7)
uop_21 = relay.asinh(bop_10.astype('float32')) # shape=(15, 7)
uop_23 = relay.erf(uop_5.astype('float32')) # shape=(15, 7)
bop_25 = relay.bitwise_and(bop_7.astype('int32'), relay.reshape(uop_23.astype('int32'), relay.shape_of(bop_7))) # shape=(15, 7)
var_28 = relay.var("var_28", dtype = "int16", shape = (15, 7))#candidate|28|(15, 7)|var|int16
bop_29 = relay.floor_mod(bop_15.astype('float32'), relay.reshape(var_28.astype('float32'), relay.shape_of(bop_15))) # shape=(15, 7)
uop_32 = relay.sqrt(uop_23.astype('float32')) # shape=(15, 7)
var_34 = relay.var("var_34", dtype = "float32", shape = (15, 7))#candidate|34|(15, 7)|var|float32
bop_35 = relay.bitwise_xor(uop_32.astype('uint8'), relay.reshape(var_34.astype('uint8'), relay.shape_of(uop_32))) # shape=(15, 7)
var_38 = relay.var("var_38", dtype = "int16", shape = (15, 7))#candidate|38|(15, 7)|var|int16
bop_39 = relay.floor_divide(var_28.astype('float64'), relay.reshape(var_38.astype('float64'), relay.shape_of(var_28))) # shape=(15, 7)
var_42 = relay.var("var_42", dtype = "float32", shape = (15, 7))#candidate|42|(15, 7)|var|float32
bop_43 = relay.left_shift(uop_32.astype('int64'), relay.reshape(var_42.astype('int64'), relay.shape_of(uop_32))) # shape=(15, 7)
uop_46 = relay.cos(uop_32.astype('float64')) # shape=(15, 7)
uop_48 = relay.cosh(bop_18.astype('float32')) # shape=(15, 7)
bop_50 = relay.floor_mod(uop_46.astype('float32'), relay.reshape(var_28.astype('float32'), relay.shape_of(uop_46))) # shape=(15, 7)
uop_53 = relay.acos(uop_48.astype('float32')) # shape=(15, 7)
bop_55 = relay.minimum(bop_50.astype('uint16'), relay.reshape(var_42.astype('uint16'), relay.shape_of(bop_50))) # shape=(15, 7)
uop_58 = relay.exp(var_34.astype('float32')) # shape=(15, 7)
const_60 = relay.const([[3,-2,8,7,-7,-3,-10],[9,6,-2,-4,-2,2,-10],[10,-6,9,-8,-5,2,-3],[-3,2,6,6,8,-4,4],[-6,8,6,-7,-6,-3,9],[3,2,4,7,-2,1,2],[-4,1,3,-6,-5,-3,7],[2,-5,7,-2,-9,-4,-2],[5,-10,10,-9,-5,1,7],[1,-4,-1,9,-4,10,9],[-6,-8,-5,-2,-4,-8,-7],[8,-5,-9,3,7,5,-4],[5,-8,6,-6,6,6,8],[-8,-2,-8,-5,-7,-6,-2],[-4,-7,-4,3,-2,-1,-6]], dtype = "uint8")#candidate|60|(15, 7)|const|uint8
bop_61 = relay.subtract(bop_35.astype('uint32'), relay.reshape(const_60.astype('uint32'), relay.shape_of(bop_35))) # shape=(15, 7)
uop_64 = relay.atan(bop_55.astype('float32')) # shape=(15, 7)
bop_66 = relay.logical_xor(uop_64.astype('int16'), relay.reshape(bop_7.astype('int16'), relay.shape_of(uop_64))) # shape=(15, 7)
uop_69 = relay.atan(bop_66.astype('float32')) # shape=(15, 7)
uop_71 = relay.log(bop_66.astype('float32')) # shape=(15, 7)
bop_73 = relay.bitwise_or(uop_71.astype('int8'), relay.reshape(bop_29.astype('int8'), relay.shape_of(uop_71))) # shape=(15, 7)
const_76 = relay.const([[-5.573611,-6.124846,2.621235,2.818709,-3.757147,3.081924,-8.062414],[-9.410249,3.600132,8.208713,-0.705942,3.248357,5.778667,5.122541],[1.568919,-3.733289,-0.213711,9.592075,-6.487211,-8.427063,-7.155234],[4.305507,8.971008,9.123766,-5.589259,3.043969,5.876603,5.137250],[7.971690,-4.880501,7.703327,-9.269981,5.372487,7.272005,-4.714631],[-9.325080,-3.993811,-3.036443,-3.559883,-0.059527,-2.402817,1.085770],[-3.446445,6.778809,4.967779,-4.519236,-0.480547,-6.496275,-9.180055],[3.859148,4.744918,-1.286036,-4.934076,0.086470,-2.875255,1.314926],[-1.219650,-2.768466,1.041865,-0.685826,7.304605,-1.659360,0.912886],[-3.732005,-0.092160,9.448769,5.532019,6.033824,-4.034513,-8.724805],[-4.661748,7.935985,-9.837500,-7.787703,1.420822,3.143740,9.999919],[0.844672,-7.123727,0.725109,6.723652,2.230399,-0.829783,-7.261719],[9.769510,3.304901,-7.845214,-6.496501,8.299751,7.794912,0.377331],[7.183353,-3.412288,-3.552714,-6.902257,9.512046,-4.605262,0.004871],[-1.455638,8.607569,-0.617737,8.015232,9.899599,-3.684759,-9.168741]], dtype = "float32")#candidate|76|(15, 7)|const|float32
bop_77 = relay.minimum(uop_69.astype('float32'), relay.reshape(const_76.astype('float32'), relay.shape_of(uop_69))) # shape=(15, 7)
var_80 = relay.var("var_80", dtype = "float32", shape = (15, 7))#candidate|80|(15, 7)|var|float32
bop_81 = relay.subtract(uop_64.astype('int16'), relay.reshape(var_80.astype('int16'), relay.shape_of(uop_64))) # shape=(15, 7)
bop_84 = relay.bitwise_and(bop_50.astype('uint16'), relay.reshape(bop_66.astype('uint16'), relay.shape_of(bop_50))) # shape=(15, 7)
uop_87 = relay.tan(bop_73.astype('float64')) # shape=(15, 7)
uop_89 = relay.atanh(uop_87.astype('float32')) # shape=(15, 7)
var_91 = relay.var("var_91", dtype = "int16", shape = (15, 7))#candidate|91|(15, 7)|var|int16
bop_92 = relay.not_equal(bop_66.astype('bool'), relay.reshape(var_91.astype('bool'), relay.shape_of(bop_66))) # shape=(15, 7)
output = relay.Tuple([uop_21,bop_25,bop_39,bop_43,uop_53,uop_58,bop_61,bop_77,bop_81,bop_84,uop_89,bop_92,])
output2 = relay.Tuple([uop_21,bop_25,bop_39,bop_43,uop_53,uop_58,bop_61,bop_77,bop_81,bop_84,uop_89,bop_92,])
func_95 = relay.Function([var_0,var_1,var_28,var_34,var_38,var_42,var_80,var_91,], output)
mod['func_95'] = func_95
mod = relay.transform.InferType()(mod)
var_96 = relay.var("var_96", dtype = "uint32", shape = ())#candidate|96|()|var|uint32
var_97 = relay.var("var_97", dtype = "uint32", shape = (15, 7))#candidate|97|(15, 7)|var|uint32
var_98 = relay.var("var_98", dtype = "int16", shape = (15, 7))#candidate|98|(15, 7)|var|int16
var_99 = relay.var("var_99", dtype = "float32", shape = (15, 7))#candidate|99|(15, 7)|var|float32
var_100 = relay.var("var_100", dtype = "int16", shape = (15, 7))#candidate|100|(15, 7)|var|int16
var_101 = relay.var("var_101", dtype = "float32", shape = (15, 7))#candidate|101|(15, 7)|var|float32
var_102 = relay.var("var_102", dtype = "float32", shape = (15, 7))#candidate|102|(15, 7)|var|float32
var_103 = relay.var("var_103", dtype = "int16", shape = (15, 7))#candidate|103|(15, 7)|var|int16
output = func_95(var_96,var_97,var_98,var_99,var_100,var_101,var_102,var_103,)
func_104 = relay.Function([var_96,var_97,var_98,var_99,var_100,var_101,var_102,var_103,], output)
mutated_mod['func_104'] = func_104
mutated_mod = relay.transform.InferType()(mutated_mod)
const_106 = relay.const([[[-4],[-1],[-6],[-3],[5],[9],[4],[6],[-2]],[[-1],[5],[-5],[-5],[-3],[8],[8],[-8],[3]],[[1],[-6],[2],[6],[-5],[-8],[-9],[7],[6]],[[-4],[-2],[-3],[-2],[2],[-4],[-2],[1],[-1]],[[5],[10],[2],[-6],[-6],[-4],[6],[-3],[-6]],[[9],[-1],[-7],[-10],[-10],[-9],[5],[-10],[4]],[[1],[-2],[5],[-9],[-7],[-9],[3],[10],[1]],[[-9],[-6],[-1],[1],[9],[-10],[-3],[2],[-8]],[[-3],[-6],[-1],[3],[5],[8],[-3],[-8],[-5]],[[4],[-6],[7],[-5],[-7],[-8],[-2],[3],[-1]],[[-6],[-10],[8],[-6],[4],[-9],[-4],[7],[5]],[[4],[-4],[7],[-7],[3],[8],[4],[-8],[5]],[[-2],[-10],[7],[-7],[4],[1],[-8],[9],[7]],[[6],[-6],[3],[4],[-8],[-2],[2],[-3],[2]],[[2],[3],[3],[-5],[-10],[-5],[-2],[-10],[-1]],[[-2],[10],[9],[2],[8],[6],[7],[9],[-3]]], dtype = "uint16")#candidate|106|(16, 9, 1)|const|uint16
var_107 = relay.var("var_107", dtype = "uint16", shape = (16, 9, 5))#candidate|107|(16, 9, 5)|var|uint16
bop_108 = relay.left_shift(const_106.astype('uint16'), var_107.astype('uint16')) # shape=(16, 9, 5)
uop_111 = relay.log(const_106.astype('float64')) # shape=(16, 9, 1)
uop_113 = relay.asin(const_106.astype('float32')) # shape=(16, 9, 1)
func_95_call = mod.get_global_var('func_95')
func_104_call = mutated_mod.get_global_var('func_104')
const_116 = relay.const(-10, dtype = "uint32")#candidate|116|()|const|uint32
const_117 = relay.const([[3,5,-5,-10,-9],[7,6,-6,8,8],[3,-9,7,-1,1],[10,5,-6,2,-9],[8,6,9,-3,-2],[-10,-2,-5,3,6],[3,-2,3,-9,3],[-7,7,9,9,-4],[-10,3,5,2,8],[-4,4,-1,3,4],[-9,8,-6,1,8],[6,2,-1,1,-5],[-9,-2,-6,-10,3],[6,6,-8,-3,-10],[6,9,7,-3,3],[-9,-8,5,-6,-2],[2,-2,1,3,-1],[-5,8,5,1,-6],[-9,-7,10,10,1],[-6,9,1,10,-6],[-4,-9,2,-2,5]], dtype = "uint32")#candidate|117|(21, 5)|const|uint32
call_115 = relay.TupleGetItem(func_95_call(relay.reshape(const_116.astype('uint32'), []), relay.reshape(const_117.astype('uint32'), [15, 7]), relay.reshape(const_117.astype('int16'), [15, 7]), relay.reshape(const_117.astype('float32'), [15, 7]), relay.reshape(const_117.astype('int16'), [15, 7]), relay.reshape(const_117.astype('float32'), [15, 7]), relay.reshape(const_117.astype('float32'), [15, 7]), relay.reshape(const_117.astype('int16'), [15, 7]), ), 8)
call_118 = relay.TupleGetItem(func_104_call(relay.reshape(const_116.astype('uint32'), []), relay.reshape(const_117.astype('uint32'), [15, 7]), relay.reshape(const_117.astype('int16'), [15, 7]), relay.reshape(const_117.astype('float32'), [15, 7]), relay.reshape(const_117.astype('int16'), [15, 7]), relay.reshape(const_117.astype('float32'), [15, 7]), relay.reshape(const_117.astype('float32'), [15, 7]), relay.reshape(const_117.astype('int16'), [15, 7]), ), 8)
uop_119 = relay.acosh(uop_113.astype('float64')) # shape=(16, 9, 1)
bop_121 = relay.minimum(uop_119.astype('float64'), relay.reshape(uop_111.astype('float64'), relay.shape_of(uop_119))) # shape=(16, 9, 1)
output = relay.Tuple([bop_108,call_115,const_116,const_117,bop_121,])
output2 = relay.Tuple([bop_108,call_118,const_116,const_117,bop_121,])
func_124 = relay.Function([var_107,], output)
mod['func_124'] = func_124
mod = relay.transform.InferType()(mod)
mutated_mod['func_124'] = func_124
mutated_mod = relay.transform.InferType()(mutated_mod)
var_125 = relay.var("var_125", dtype = "uint16", shape = (16, 9, 5))#candidate|125|(16, 9, 5)|var|uint16
func_124_call = mutated_mod.get_global_var('func_124')
call_126 = func_124_call(var_125)
output = call_126
func_127 = relay.Function([var_125], output)
mutated_mod['func_127'] = func_127
mutated_mod = relay.transform.InferType()(mutated_mod)
var_129 = relay.var("var_129", dtype = "uint8", shape = ())#candidate|129|()|var|uint8
var_130 = relay.var("var_130", dtype = "uint8", shape = (2, 10))#candidate|130|(2, 10)|var|uint8
bop_131 = relay.right_shift(var_129.astype('uint8'), var_130.astype('uint8')) # shape=(2, 10)
func_95_call = mod.get_global_var('func_95')
func_104_call = mutated_mod.get_global_var('func_104')
const_135 = relay.const([[10,4,-9,-6,4,7,8,1,4,-7,-2,-7,1,-10,2],[7,-3,-6,1,-7,1,-10,-1,-1,5,-9,3,1,-10,6],[-9,5,-4,-8,-10,-10,8,-4,-1,3,10,-2,10,9,-4],[-1,6,7,-5,-6,10,10,6,-9,6,2,6,1,9,5],[4,8,-1,1,10,3,-1,-9,6,3,-2,9,3,5,1],[5,9,5,-8,8,-2,-9,-5,-2,-6,2,-4,-9,3,6],[7,7,-5,-6,9,-1,4,-5,-8,-7,-4,4,1,4,9]], dtype = "uint32")#candidate|135|(7, 15)|const|uint32
call_134 = relay.TupleGetItem(func_95_call(relay.reshape(var_129.astype('uint32'), []), relay.reshape(const_135.astype('uint32'), [15, 7]), relay.reshape(const_135.astype('int16'), [15, 7]), relay.reshape(const_135.astype('float32'), [15, 7]), relay.reshape(const_135.astype('int16'), [15, 7]), relay.reshape(const_135.astype('float32'), [15, 7]), relay.reshape(const_135.astype('float32'), [15, 7]), relay.reshape(const_135.astype('int16'), [15, 7]), ), 10)
call_136 = relay.TupleGetItem(func_104_call(relay.reshape(var_129.astype('uint32'), []), relay.reshape(const_135.astype('uint32'), [15, 7]), relay.reshape(const_135.astype('int16'), [15, 7]), relay.reshape(const_135.astype('float32'), [15, 7]), relay.reshape(const_135.astype('int16'), [15, 7]), relay.reshape(const_135.astype('float32'), [15, 7]), relay.reshape(const_135.astype('float32'), [15, 7]), relay.reshape(const_135.astype('int16'), [15, 7]), ), 10)
uop_137 = relay.acosh(call_134.astype('float64')) # shape=(15, 7)
uop_139 = relay.acosh(call_136.astype('float64')) # shape=(15, 7)
const_140 = relay.const([[-7,-7,-3,7,9,6,10,10,-9,-6,2,6,-1,4,-6],[-3,-6,-5,-9,1,-4,2,4,1,8,-2,9,8,6,3],[-9,-5,7,5,6,-4,5,-6,7,4,5,4,5,-3,-5],[3,1,2,1,3,-5,8,10,9,-1,3,-9,9,-10,-5],[9,1,-7,9,10,5,-9,-5,7,6,-7,4,-5,-9,5],[2,-3,5,7,10,-6,-5,2,-3,4,-6,10,6,-3,4],[1,2,-10,8,1,-7,4,3,1,-4,-9,5,-4,-9,-8]], dtype = "uint32")#candidate|140|(7, 15)|const|uint32
bop_141 = relay.divide(const_135.astype('float32'), relay.reshape(const_140.astype('float32'), relay.shape_of(const_135))) # shape=(7, 15)
var_144 = relay.var("var_144", dtype = "float64", shape = (15, 7))#candidate|144|(15, 7)|var|float64
bop_145 = relay.power(uop_137.astype('float64'), relay.reshape(var_144.astype('float64'), relay.shape_of(uop_137))) # shape=(15, 7)
bop_148 = relay.power(uop_139.astype('float64'), relay.reshape(var_144.astype('float64'), relay.shape_of(uop_139))) # shape=(15, 7)
func_95_call = mod.get_global_var('func_95')
func_104_call = mutated_mod.get_global_var('func_104')
call_149 = relay.TupleGetItem(func_95_call(relay.reshape(var_129.astype('uint32'), []), relay.reshape(call_134.astype('uint32'), [15, 7]), relay.reshape(uop_137.astype('int16'), [15, 7]), relay.reshape(bop_145.astype('float32'), [15, 7]), relay.reshape(bop_141.astype('int16'), [15, 7]), relay.reshape(bop_145.astype('float32'), [15, 7]), relay.reshape(const_140.astype('float32'), [15, 7]), relay.reshape(bop_145.astype('int16'), [15, 7]), ), 2)
call_150 = relay.TupleGetItem(func_104_call(relay.reshape(var_129.astype('uint32'), []), relay.reshape(call_134.astype('uint32'), [15, 7]), relay.reshape(uop_137.astype('int16'), [15, 7]), relay.reshape(bop_145.astype('float32'), [15, 7]), relay.reshape(bop_141.astype('int16'), [15, 7]), relay.reshape(bop_145.astype('float32'), [15, 7]), relay.reshape(const_140.astype('float32'), [15, 7]), relay.reshape(bop_145.astype('int16'), [15, 7]), ), 2)
uop_151 = relay.atanh(var_130.astype('float32')) # shape=(2, 10)
bop_153 = relay.less(bop_145.astype('bool'), relay.reshape(call_134.astype('bool'), relay.shape_of(bop_145))) # shape=(15, 7)
bop_156 = relay.less(bop_148.astype('bool'), relay.reshape(call_136.astype('bool'), relay.shape_of(bop_148))) # shape=(15, 7)
bop_157 = relay.equal(uop_137.astype('bool'), relay.reshape(bop_145.astype('bool'), relay.shape_of(uop_137))) # shape=(15, 7)
bop_160 = relay.equal(uop_139.astype('bool'), relay.reshape(bop_148.astype('bool'), relay.shape_of(uop_139))) # shape=(15, 7)
uop_161 = relay.acosh(call_149.astype('float32')) # shape=(15, 7)
uop_163 = relay.acosh(call_150.astype('float32')) # shape=(15, 7)
bop_164 = relay.greater_equal(bop_145.astype('bool'), relay.reshape(const_135.astype('bool'), relay.shape_of(bop_145))) # shape=(15, 7)
bop_167 = relay.greater_equal(bop_148.astype('bool'), relay.reshape(const_135.astype('bool'), relay.shape_of(bop_148))) # shape=(15, 7)
uop_168 = relay.atanh(uop_151.astype('float32')) # shape=(2, 10)
uop_170 = relay.log2(uop_161.astype('float64')) # shape=(15, 7)
uop_172 = relay.log2(uop_163.astype('float64')) # shape=(15, 7)
uop_173 = relay.cosh(uop_170.astype('float64')) # shape=(15, 7)
uop_175 = relay.cosh(uop_172.astype('float64')) # shape=(15, 7)
bop_176 = relay.less_equal(uop_173.astype('bool'), relay.reshape(uop_161.astype('bool'), relay.shape_of(uop_173))) # shape=(15, 7)
bop_179 = relay.less_equal(uop_175.astype('bool'), relay.reshape(uop_163.astype('bool'), relay.shape_of(uop_175))) # shape=(15, 7)
uop_180 = relay.log10(uop_161.astype('float32')) # shape=(15, 7)
uop_182 = relay.log10(uop_163.astype('float32')) # shape=(15, 7)
var_183 = relay.var("var_183", dtype = "float64", shape = (15, 7))#candidate|183|(15, 7)|var|float64
bop_184 = relay.equal(uop_173.astype('bool'), relay.reshape(var_183.astype('bool'), relay.shape_of(uop_173))) # shape=(15, 7)
bop_187 = relay.equal(uop_175.astype('bool'), relay.reshape(var_183.astype('bool'), relay.shape_of(uop_175))) # shape=(15, 7)
bop_188 = relay.not_equal(bop_153.astype('bool'), var_129.astype('bool')) # shape=(15, 7)
bop_191 = relay.not_equal(bop_156.astype('bool'), var_129.astype('bool')) # shape=(15, 7)
var_192 = relay.var("var_192", dtype = "bool", shape = (15, 7))#candidate|192|(15, 7)|var|bool
bop_193 = relay.floor_divide(bop_184.astype('float64'), relay.reshape(var_192.astype('float64'), relay.shape_of(bop_184))) # shape=(15, 7)
bop_196 = relay.floor_divide(bop_187.astype('float64'), relay.reshape(var_192.astype('float64'), relay.shape_of(bop_187))) # shape=(15, 7)
output = relay.Tuple([bop_131,bop_141,bop_157,bop_164,uop_168,bop_176,uop_180,bop_188,bop_193,])
output2 = relay.Tuple([bop_131,bop_141,bop_160,bop_167,uop_168,bop_179,uop_182,bop_191,bop_196,])
func_197 = relay.Function([var_129,var_130,var_144,var_183,var_192,], output)
mod['func_197'] = func_197
mod = relay.transform.InferType()(mod)
var_198 = relay.var("var_198", dtype = "uint8", shape = ())#candidate|198|()|var|uint8
var_199 = relay.var("var_199", dtype = "uint8", shape = (2, 10))#candidate|199|(2, 10)|var|uint8
var_200 = relay.var("var_200", dtype = "float64", shape = (15, 7))#candidate|200|(15, 7)|var|float64
var_201 = relay.var("var_201", dtype = "float64", shape = (15, 7))#candidate|201|(15, 7)|var|float64
var_202 = relay.var("var_202", dtype = "bool", shape = (15, 7))#candidate|202|(15, 7)|var|bool
output = func_197(var_198,var_199,var_200,var_201,var_202,)
func_203 = relay.Function([var_198,var_199,var_200,var_201,var_202,], output)
mutated_mod['func_203'] = func_203
mutated_mod = relay.transform.InferType()(mutated_mod)
const_205 = relay.const([[-7,10,-3,-4,-9,5,-6,-3],[5,10,6,9,4,-3,10,-2],[10,-9,-8,4,-3,-3,3,-1],[-9,8,10,3,-9,-7,-4,5],[1,-6,8,-6,-8,3,4,2],[6,3,9,2,-4,6,7,3],[9,9,-9,10,4,1,-9,3],[2,3,-4,7,5,-10,-7,2],[-2,5,6,1,1,7,-4,5],[-8,5,-3,-4,8,-1,-8,-2],[4,4,-3,7,8,3,-6,-7],[-7,10,7,-8,-7,1,-4,8],[2,-7,8,8,9,9,10,-2],[10,-6,-6,-1,5,-10,7,-6]], dtype = "int16")#candidate|205|(14, 8)|const|int16
const_206 = relay.const([[-4,-8,-1,7,4,6,6,-2],[-9,-1,10,10,-6,9,-7,1],[1,-8,-4,-8,-8,2,6,-1],[2,-1,9,4,-4,-9,1,-2],[-9,7,-9,6,9,1,1,2],[6,-6,7,-2,-4,-1,1,7],[8,-7,-9,4,10,3,9,-5],[-9,2,8,6,-5,8,2,9],[-9,7,-9,8,-6,9,8,-2],[2,4,10,-3,-7,-2,-6,9],[7,-7,-6,-4,-10,10,8,7],[-8,1,1,2,6,-6,-4,2],[-8,-6,6,9,-4,5,10,1],[5,5,-9,-3,-10,-9,-2,4]], dtype = "int16")#candidate|206|(14, 8)|const|int16
bop_207 = relay.less(const_205.astype('bool'), relay.reshape(const_206.astype('bool'), relay.shape_of(const_205))) # shape=(14, 8)
var_210 = relay.var("var_210", dtype = "int16", shape = (14, 8))#candidate|210|(14, 8)|var|int16
bop_211 = relay.less(const_205.astype('bool'), relay.reshape(var_210.astype('bool'), relay.shape_of(const_205))) # shape=(14, 8)
uop_214 = relay.acos(bop_211.astype('float64')) # shape=(14, 8)
bop_216 = relay.multiply(bop_211.astype('float64'), relay.reshape(uop_214.astype('float64'), relay.shape_of(bop_211))) # shape=(14, 8)
var_219 = relay.var("var_219", dtype = "float64", shape = (14, 8))#candidate|219|(14, 8)|var|float64
bop_220 = relay.subtract(uop_214.astype('uint64'), relay.reshape(var_219.astype('uint64'), relay.shape_of(uop_214))) # shape=(14, 8)
uop_223 = relay.exp(bop_220.astype('float64')) # shape=(14, 8)
uop_225 = relay.sigmoid(uop_223.astype('float32')) # shape=(14, 8)
uop_227 = relay.cosh(uop_225.astype('float32')) # shape=(14, 8)
const_229 = relay.const([[-0.686853,-4.988472,-0.508456,-1.781263,8.212175,-7.455298,-0.761054,9.604958],[9.268754,0.533234,4.623162,-1.725423,2.190711,8.903246,3.117598,6.332204],[-8.176535,2.247880,4.418478,7.068513,-2.418002,-5.005432,8.355524,-3.210534],[-3.578804,-0.754933,0.819206,2.136870,-2.828026,1.099982,0.242172,1.857655],[-8.537421,-8.948050,0.484563,-0.224800,-6.601085,-9.308314,0.941927,-0.412374],[4.233025,7.165406,1.603277,1.091965,8.999128,-1.580959,-7.198133,-9.079086],[-7.361681,-5.235291,9.189146,3.908964,-6.767514,3.934656,3.287271,0.059949],[-1.598103,9.761128,-6.399285,-4.564639,-3.690690,-4.227032,-0.777624,8.940711],[-0.333051,-5.481321,9.378571,1.551910,-0.232992,5.334475,-8.057968,-2.652566],[3.194465,4.893589,-8.054306,1.622996,-2.356530,7.483572,-7.892271,3.158175],[5.942364,-1.250714,4.890786,-2.076001,-6.143126,8.153175,-1.522497,-7.847553],[-8.073183,8.223536,1.395583,3.980965,1.390497,-6.115788,9.586102,-3.250308],[-3.082754,7.741523,-6.618667,1.460743,1.758616,5.899451,-1.619416,8.644975],[4.472537,2.268381,1.552792,-1.423130,-4.881136,6.060776,-6.697036,-2.367462]], dtype = "float32")#candidate|229|(14, 8)|const|float32
bop_230 = relay.bitwise_and(uop_225.astype('uint32'), relay.reshape(const_229.astype('uint32'), relay.shape_of(uop_225))) # shape=(14, 8)
uop_233 = relay.atanh(uop_225.astype('float64')) # shape=(14, 8)
output = relay.Tuple([bop_207,bop_216,uop_227,bop_230,uop_233,])
output2 = relay.Tuple([bop_207,bop_216,uop_227,bop_230,uop_233,])
func_235 = relay.Function([var_210,var_219,], output)
mod['func_235'] = func_235
mod = relay.transform.InferType()(mod)
var_236 = relay.var("var_236", dtype = "int16", shape = (14, 8))#candidate|236|(14, 8)|var|int16
var_237 = relay.var("var_237", dtype = "float64", shape = (14, 8))#candidate|237|(14, 8)|var|float64
output = func_235(var_236,var_237,)
func_238 = relay.Function([var_236,var_237,], output)
mutated_mod['func_238'] = func_238
mutated_mod = relay.transform.InferType()(mutated_mod)
var_240 = relay.var("var_240", dtype = "float64", shape = (1,))#candidate|240|(1,)|var|float64
uop_241 = relay.asinh(var_240.astype('float64')) # shape=(1,)
bop_243 = relay.bitwise_xor(uop_241.astype('int8'), relay.reshape(var_240.astype('int8'), relay.shape_of(uop_241))) # shape=(1,)
var_246 = relay.var("var_246", dtype = "float64", shape = (3,))#candidate|246|(3,)|var|float64
bop_247 = relay.mod(uop_241.astype('float32'), var_246.astype('float32')) # shape=(3,)
const_250 = relay.const([-6.992589,7.368531,7.693439], dtype = "float64")#candidate|250|(3,)|const|float64
bop_251 = relay.multiply(uop_241.astype('float64'), const_250.astype('float64')) # shape=(3,)
uop_254 = relay.rsqrt(bop_247.astype('float32')) # shape=(3,)
uop_256 = relay.cos(uop_254.astype('float64')) # shape=(3,)
const_258 = relay.const([3.037014,1.915202,9.275434], dtype = "float64")#candidate|258|(3,)|const|float64
bop_259 = relay.logical_and(uop_256.astype('bool'), relay.reshape(const_258.astype('bool'), relay.shape_of(uop_256))) # shape=(3,)
output = relay.Tuple([bop_243,bop_251,bop_259,])
output2 = relay.Tuple([bop_243,bop_251,bop_259,])
func_262 = relay.Function([var_240,var_246,], output)
mod['func_262'] = func_262
mod = relay.transform.InferType()(mod)
mutated_mod['func_262'] = func_262
mutated_mod = relay.transform.InferType()(mutated_mod)
func_262_call = mutated_mod.get_global_var('func_262')
var_264 = relay.var("var_264", dtype = "float64", shape = (1,))#candidate|264|(1,)|var|float64
var_265 = relay.var("var_265", dtype = "float64", shape = (3,))#candidate|265|(3,)|var|float64
call_263 = func_262_call(var_264,var_265,)
output = call_263
func_266 = relay.Function([var_264,var_265,], output)
mutated_mod['func_266'] = func_266
mutated_mod = relay.transform.InferType()(mutated_mod)
var_268 = relay.var("var_268", dtype = "int8", shape = ())#candidate|268|()|var|int8
var_269 = relay.var("var_269", dtype = "int8", shape = ())#candidate|269|()|var|int8
bop_270 = relay.not_equal(var_268.astype('bool'), var_269.astype('bool')) # shape=()
output = relay.Tuple([bop_270,])
output2 = relay.Tuple([bop_270,])
func_273 = relay.Function([var_268,var_269,], output)
mod['func_273'] = func_273
mod = relay.transform.InferType()(mod)
var_274 = relay.var("var_274", dtype = "int8", shape = ())#candidate|274|()|var|int8
var_275 = relay.var("var_275", dtype = "int8", shape = ())#candidate|275|()|var|int8
output = func_273(var_274,var_275,)
func_276 = relay.Function([var_274,var_275,], output)
mutated_mod['func_276'] = func_276
mutated_mod = relay.transform.InferType()(mutated_mod)
var_278 = relay.var("var_278", dtype = "uint8", shape = (5, 8))#candidate|278|(5, 8)|var|uint8
const_279 = relay.const([[1,-4,6,-4,3,5,10,-10],[-5,-5,-9,-1,-7,9,2,-5],[-3,-9,-4,-1,4,-1,-6,-7],[7,-7,3,5,1,-3,9,3],[7,-10,4,-8,-1,-5,9,8]], dtype = "uint8")#candidate|279|(5, 8)|const|uint8
bop_280 = relay.equal(var_278.astype('bool'), relay.reshape(const_279.astype('bool'), relay.shape_of(var_278))) # shape=(5, 8)
output = relay.Tuple([bop_280,])
output2 = relay.Tuple([bop_280,])
func_283 = relay.Function([var_278,], output)
mod['func_283'] = func_283
mod = relay.transform.InferType()(mod)
mutated_mod['func_283'] = func_283
mutated_mod = relay.transform.InferType()(mutated_mod)
var_284 = relay.var("var_284", dtype = "uint8", shape = (5, 8))#candidate|284|(5, 8)|var|uint8
func_283_call = mutated_mod.get_global_var('func_283')
call_285 = func_283_call(var_284)
output = call_285
func_286 = relay.Function([var_284], output)
mutated_mod['func_286'] = func_286
mutated_mod = relay.transform.InferType()(mutated_mod)
const_288 = relay.const(7.734104, dtype = "float64")#candidate|288|()|const|float64
uop_289 = relay.sin(const_288.astype('float64')) # shape=()
var_291 = relay.var("var_291", dtype = "float64", shape = (2,))#candidate|291|(2,)|var|float64
bop_292 = relay.bitwise_xor(uop_289.astype('uint32'), var_291.astype('uint32')) # shape=(2,)
bop_295 = relay.right_shift(var_291.astype('int8'), relay.reshape(bop_292.astype('int8'), relay.shape_of(var_291))) # shape=(2,)
bop_298 = relay.floor_divide(bop_295.astype('float32'), const_288.astype('float32')) # shape=(2,)
bop_301 = relay.floor_divide(bop_295.astype('float64'), relay.reshape(bop_298.astype('float64'), relay.shape_of(bop_295))) # shape=(2,)
bop_304 = relay.not_equal(bop_295.astype('bool'), const_288.astype('bool')) # shape=(2,)
bop_307 = relay.bitwise_xor(bop_298.astype('uint64'), relay.reshape(bop_304.astype('uint64'), relay.shape_of(bop_298))) # shape=(2,)
var_310 = relay.var("var_310", dtype = "uint64", shape = (2,))#candidate|310|(2,)|var|uint64
bop_311 = relay.floor_divide(bop_307.astype('float32'), relay.reshape(var_310.astype('float32'), relay.shape_of(bop_307))) # shape=(2,)
var_314 = relay.var("var_314", dtype = "int8", shape = (2,))#candidate|314|(2,)|var|int8
bop_315 = relay.less(bop_295.astype('bool'), relay.reshape(var_314.astype('bool'), relay.shape_of(bop_295))) # shape=(2,)
uop_318 = relay.acosh(var_310.astype('float64')) # shape=(2,)
uop_320 = relay.tan(var_291.astype('float32')) # shape=(2,)
uop_322 = relay.sigmoid(var_310.astype('float64')) # shape=(2,)
uop_324 = relay.log2(bop_304.astype('float64')) # shape=(2,)
bop_326 = relay.bitwise_and(const_288.astype('int64'), var_310.astype('int64')) # shape=(2,)
uop_329 = relay.log(uop_322.astype('float64')) # shape=(2,)
var_331 = relay.var("var_331", dtype = "float64", shape = (1,))#candidate|331|(1,)|var|float64
bop_332 = relay.logical_xor(uop_289.astype('uint8'), var_331.astype('uint8')) # shape=()
uop_335 = relay.acos(uop_324.astype('float64')) # shape=(2,)
uop_337 = relay.acos(uop_335.astype('float64')) # shape=(2,)
var_339 = relay.var("var_339", dtype = "float64", shape = (2,))#candidate|339|(2,)|var|float64
bop_340 = relay.logical_and(uop_337.astype('bool'), relay.reshape(var_339.astype('bool'), relay.shape_of(uop_337))) # shape=(2,)
uop_343 = relay.acosh(uop_335.astype('float32')) # shape=(2,)
bop_345 = relay.logical_xor(uop_322.astype('int8'), var_331.astype('int8')) # shape=(2,)
uop_348 = relay.log(bop_332.astype('float64')) # shape=()
uop_350 = relay.acosh(uop_335.astype('float32')) # shape=(2,)
var_352 = relay.var("var_352", dtype = "float64", shape = (2,))#candidate|352|(2,)|var|float64
bop_353 = relay.bitwise_and(uop_335.astype('int32'), relay.reshape(var_352.astype('int32'), relay.shape_of(uop_335))) # shape=(2,)
bop_356 = relay.multiply(bop_353.astype('uint32'), relay.reshape(uop_337.astype('uint32'), relay.shape_of(bop_353))) # shape=(2,)
bop_359 = relay.less(bop_353.astype('bool'), relay.reshape(var_339.astype('bool'), relay.shape_of(bop_353))) # shape=(2,)
output = relay.Tuple([bop_301,bop_311,bop_315,uop_318,uop_320,bop_326,uop_329,bop_340,uop_343,bop_345,uop_348,uop_350,bop_356,bop_359,])
output2 = relay.Tuple([bop_301,bop_311,bop_315,uop_318,uop_320,bop_326,uop_329,bop_340,uop_343,bop_345,uop_348,uop_350,bop_356,bop_359,])
F = relay.Function([var_291,var_310,var_314,var_331,var_339,var_352,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_291,var_310,var_314,var_331,var_339,var_352,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_291= np.array([-5.731749,-1.090464], dtype='float64')
module1.set_input('var_291', input_291)
input_310= np.array([-4,9], dtype='uint64')
module1.set_input('var_310', input_310)
input_314= np.array([9,6], dtype='int8')
module1.set_input('var_314', input_314)
input_331= np.array([8.657538], dtype='float64')
module1.set_input('var_331', input_331)
input_339= np.array([6.887016,-2.086082], dtype='float64')
module1.set_input('var_339', input_339)
input_352= np.array([-6.209541,-4.360227], dtype='float64')
module1.set_input('var_352', input_352)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_291, input_310, input_314, input_331, input_339, input_352, )
res3 = intrp3.evaluate()(input_291, input_310, input_314, input_331, input_339, input_352, )
res4 = intrp4.evaluate()(input_291, input_310, input_314, input_331, input_339, input_352, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
module5.set_input('var_291', input_291)
module5.set_input('var_310', input_310)
module5.set_input('var_314', input_314)
module5.set_input('var_331', input_331)
module5.set_input('var_339', input_339)
module5.set_input('var_352', input_352)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_291, input_310, input_314, input_331, input_339, input_352, )
res7 = intrp7.evaluate()(input_291, input_310, input_314, input_331, input_339, input_352, )
res8 = intrp8.evaluate()(input_291, input_310, input_314, input_331, input_339, input_352, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
module9.set_input('var_291', input_291)
module9.set_input('var_310', input_310)
module9.set_input('var_314', input_314)
module9.set_input('var_331', input_331)
module9.set_input('var_339', input_339)
module9.set_input('var_352', input_352)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_291, input_310, input_314, input_331, input_339, input_352, )
res11 = intrp11.evaluate()(input_291, input_310, input_314, input_331, input_339, input_352, )
res12 = intrp12.evaluate()(input_291, input_310, input_314, input_331, input_339, input_352, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
module13.set_input('var_291', input_291)
module13.set_input('var_310', input_310)
module13.set_input('var_314', input_314)
module13.set_input('var_331', input_331)
module13.set_input('var_339', input_339)
module13.set_input('var_352', input_352)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_291, input_310, input_314, input_331, input_339, input_352, )
res15 = intrp15.evaluate()(input_291, input_310, input_314, input_331, input_339, input_352, )
res16 = intrp16.evaluate()(input_291, input_310, input_314, input_331, input_339, input_352, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
module17.set_input('var_291', input_291)
module17.set_input('var_310', input_310)
module17.set_input('var_314', input_314)
module17.set_input('var_331', input_331)
module17.set_input('var_339', input_339)
module17.set_input('var_352', input_352)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_291, input_310, input_314, input_331, input_339, input_352, )
res19 = intrp19.evaluate()(input_291, input_310, input_314, input_331, input_339, input_352, )
res20 = intrp20.evaluate()(input_291, input_310, input_314, input_331, input_339, input_352, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
module21.set_input('var_291', input_291)
module21.set_input('var_310', input_310)
module21.set_input('var_314', input_314)
module21.set_input('var_331', input_331)
module21.set_input('var_339', input_339)
module21.set_input('var_352', input_352)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_291, input_310, input_314, input_331, input_339, input_352, )
res23 = intrp23.evaluate()(input_291, input_310, input_314, input_331, input_339, input_352, )
res24 = intrp24.evaluate()(input_291, input_310, input_314, input_331, input_339, input_352, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()

'''69: TVMFuncCall
68: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
67: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
66: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
65: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
63: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
62: tvm::transform::Pass::operator()(tvm::IRModule) const
61: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
60: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
59: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
58: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
57: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
56: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
55: tvm::transform::Pass::operator()(tvm::IRModule) const
54: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
53: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
52: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
49: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
48: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
47: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
46: _ZN3tvm5relay9transform22Devic
45: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
44: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
43: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
42: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
41: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
40: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
39: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
38: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
37: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
36: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
35: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
34: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
33: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
32: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
31: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
30: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
29: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
28: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
27: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::te::Tensor, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
26: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::runtime::ObjectRef, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
25: tvm::LowerWithPassList(tvm::IRModule, tvm::runtime::Array<tvm::transform::Pass, void>)
24: tvm::transform::Pass::operator()(tvm::IRModule) const
23: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
22: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
21: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
20: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
19: _ZNSt17_Function_handlerIFvN3tvm7
18: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
17: tvm::tir::DataTypeRewriter::operator()(tvm::tir::Stmt)
16: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
15: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::ForNode const*)
14: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::ForNode const*)
13: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
12: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
11: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::StoreNode const*)
10: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
9: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
8: _ZThn16_N3tvm3tir16DataTyp
7: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
6: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CallNode const*)
5: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
4: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
3: _ZThn16_N3tvm3tir16DataTyp
2: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::DivNode const*)
1: tvm::div(tvm::PrimExpr, tvm::PrimExpr, tvm::Span)
0: tvm::PrimExpr tvm::arith::TryConstFold<tvm::tir::Div>(tvm::PrimExpr, tvm::PrimExpr)

'''