import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = ())#candidate|0|()|var|float32
uop_1 = relay.tan(var_0.astype('float32')) # shape=()
bop_3 = relay.less_equal(uop_1.astype('bool'), var_0.astype('bool')) # shape=()
uop_6 = relay.exp(uop_1.astype('float64')) # shape=()
var_8 = relay.var("var_8", dtype = "float64", shape = (11,))#candidate|8|(11,)|var|float64
bop_9 = relay.power(uop_6.astype('float32'), var_8.astype('float32')) # shape=(11,)
output = relay.Tuple([bop_3,bop_9,])
output2 = relay.Tuple([bop_3,bop_9,])
func_12 = relay.Function([var_0,var_8,], output)
mod['func_12'] = func_12
mod = relay.transform.InferType()(mod)
mutated_mod['func_12'] = func_12
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12_call = mutated_mod.get_global_var('func_12')
var_14 = relay.var("var_14", dtype = "float32", shape = ())#candidate|14|()|var|float32
var_15 = relay.var("var_15", dtype = "float64", shape = (11,))#candidate|15|(11,)|var|float64
call_13 = func_12_call(var_14,var_15,)
output = call_13
func_16 = relay.Function([var_14,var_15,], output)
mutated_mod['func_16'] = func_16
mutated_mod = relay.transform.InferType()(mutated_mod)
var_18 = relay.var("var_18", dtype = "int16", shape = (5, 5))#candidate|18|(5, 5)|var|int16
var_19 = relay.var("var_19", dtype = "int16", shape = (5, 5))#candidate|19|(5, 5)|var|int16
bop_20 = relay.equal(var_18.astype('bool'), relay.reshape(var_19.astype('bool'), relay.shape_of(var_18))) # shape=(5, 5)
bop_23 = relay.equal(var_18.astype('bool'), relay.reshape(bop_20.astype('bool'), relay.shape_of(var_18))) # shape=(5, 5)
uop_26 = relay.asin(var_19.astype('float32')) # shape=(5, 5)
var_28 = relay.var("var_28", dtype = "int16", shape = (5, 5))#candidate|28|(5, 5)|var|int16
bop_29 = relay.maximum(var_18.astype('int16'), relay.reshape(var_28.astype('int16'), relay.shape_of(var_18))) # shape=(5, 5)
bop_32 = relay.minimum(uop_26.astype('int16'), relay.reshape(bop_23.astype('int16'), relay.shape_of(uop_26))) # shape=(5, 5)
const_35 = relay.const([[8,-2,4,2,3],[1,10,1,-1,-10],[-3,-5,-5,-1,1],[5,-10,6,10,-8],[-2,10,10,7,-2]], dtype = "int16")#candidate|35|(5, 5)|const|int16
bop_36 = relay.left_shift(bop_32.astype('uint32'), relay.reshape(const_35.astype('uint32'), relay.shape_of(bop_32))) # shape=(5, 5)
uop_39 = relay.exp(bop_23.astype('float32')) # shape=(5, 5)
uop_41 = relay.erf(uop_26.astype('float64')) # shape=(5, 5)
bop_43 = relay.mod(uop_26.astype('float64'), relay.reshape(const_35.astype('float64'), relay.shape_of(uop_26))) # shape=(5, 5)
uop_46 = relay.asin(uop_41.astype('float32')) # shape=(5, 5)
func_12_call = mod.get_global_var('func_12')
func_16_call = mutated_mod.get_global_var('func_16')
const_49 = relay.const(6.736888, dtype = "float32")#candidate|49|()|const|float32
const_50 = relay.const([-4.081893,-6.461887,-2.632169,-5.499092,9.282076,0.302018,-1.600833,-7.440615,-3.865264,9.431106,5.170584], dtype = "float64")#candidate|50|(11,)|const|float64
call_48 = relay.TupleGetItem(func_12_call(relay.reshape(const_49.astype('float32'), []), relay.reshape(const_50.astype('float64'), [11,]), ), 0)
call_51 = relay.TupleGetItem(func_16_call(relay.reshape(const_49.astype('float32'), []), relay.reshape(const_50.astype('float64'), [11,]), ), 0)
uop_52 = relay.sqrt(uop_46.astype('float64')) # shape=(5, 5)
bop_54 = relay.mod(bop_43.astype('float32'), relay.reshape(bop_36.astype('float32'), relay.shape_of(bop_43))) # shape=(5, 5)
bop_57 = relay.floor_mod(uop_46.astype('float32'), relay.reshape(var_19.astype('float32'), relay.shape_of(uop_46))) # shape=(5, 5)
uop_60 = relay.sigmoid(uop_46.astype('float64')) # shape=(5, 5)
var_62 = relay.var("var_62", dtype = "float32", shape = (5, 5))#candidate|62|(5, 5)|var|float32
bop_63 = relay.minimum(uop_46.astype('float32'), relay.reshape(var_62.astype('float32'), relay.shape_of(uop_46))) # shape=(5, 5)
output = relay.Tuple([bop_29,uop_39,call_48,const_49,const_50,uop_52,bop_54,bop_57,uop_60,bop_63,])
output2 = relay.Tuple([bop_29,uop_39,call_51,const_49,const_50,uop_52,bop_54,bop_57,uop_60,bop_63,])
func_66 = relay.Function([var_18,var_19,var_28,var_62,], output)
mod['func_66'] = func_66
mod = relay.transform.InferType()(mod)
mutated_mod['func_66'] = func_66
mutated_mod = relay.transform.InferType()(mutated_mod)
func_66_call = mutated_mod.get_global_var('func_66')
var_68 = relay.var("var_68", dtype = "int16", shape = (5, 5))#candidate|68|(5, 5)|var|int16
var_69 = relay.var("var_69", dtype = "int16", shape = (5, 5))#candidate|69|(5, 5)|var|int16
var_70 = relay.var("var_70", dtype = "int16", shape = (5, 5))#candidate|70|(5, 5)|var|int16
var_71 = relay.var("var_71", dtype = "float32", shape = (5, 5))#candidate|71|(5, 5)|var|float32
call_67 = func_66_call(var_68,var_69,var_70,var_71,)
output = call_67
func_72 = relay.Function([var_68,var_69,var_70,var_71,], output)
mutated_mod['func_72'] = func_72
mutated_mod = relay.transform.InferType()(mutated_mod)
var_74 = relay.var("var_74", dtype = "float64", shape = (15,))#candidate|74|(15,)|var|float64
uop_75 = relay.sigmoid(var_74.astype('float64')) # shape=(15,)
uop_77 = relay.sqrt(var_74.astype('float32')) # shape=(15,)
output = relay.Tuple([uop_75,uop_77,])
output2 = relay.Tuple([uop_75,uop_77,])
func_79 = relay.Function([var_74,], output)
mod['func_79'] = func_79
mod = relay.transform.InferType()(mod)
mutated_mod['func_79'] = func_79
mutated_mod = relay.transform.InferType()(mutated_mod)
var_80 = relay.var("var_80", dtype = "float64", shape = (15,))#candidate|80|(15,)|var|float64
func_79_call = mutated_mod.get_global_var('func_79')
call_81 = func_79_call(var_80)
output = call_81
func_82 = relay.Function([var_80], output)
mutated_mod['func_82'] = func_82
mutated_mod = relay.transform.InferType()(mutated_mod)
var_84 = relay.var("var_84", dtype = "bool", shape = (5,))#candidate|84|(5,)|var|bool
var_85 = relay.var("var_85", dtype = "bool", shape = (5,))#candidate|85|(5,)|var|bool
bop_86 = relay.logical_or(var_84.astype('bool'), relay.reshape(var_85.astype('bool'), relay.shape_of(var_84))) # shape=(5,)
uop_89 = relay.acosh(var_84.astype('float32')) # shape=(5,)
uop_91 = relay.sigmoid(var_85.astype('float64')) # shape=(5,)
bop_93 = relay.logical_xor(var_85.astype('uint16'), relay.reshape(bop_86.astype('uint16'), relay.shape_of(var_85))) # shape=(5,)
var_96 = relay.var("var_96", dtype = "float32", shape = (5,))#candidate|96|(5,)|var|float32
bop_97 = relay.bitwise_or(uop_89.astype('int64'), relay.reshape(var_96.astype('int64'), relay.shape_of(uop_89))) # shape=(5,)
var_100 = relay.var("var_100", dtype = "bool", shape = (5,))#candidate|100|(5,)|var|bool
bop_101 = relay.subtract(bop_86.astype('uint64'), relay.reshape(var_100.astype('uint64'), relay.shape_of(bop_86))) # shape=(5,)
uop_104 = relay.sin(bop_97.astype('float32')) # shape=(5,)
uop_106 = relay.asinh(uop_104.astype('float64')) # shape=(5,)
uop_108 = relay.log(uop_104.astype('float32')) # shape=(5,)
uop_110 = relay.sinh(uop_104.astype('float32')) # shape=(5,)
func_12_call = mod.get_global_var('func_12')
func_16_call = mutated_mod.get_global_var('func_16')
const_113 = relay.const(5.883788, dtype = "float32")#candidate|113|()|const|float32
var_114 = relay.var("var_114", dtype = "float64", shape = (1, 11))#candidate|114|(1, 11)|var|float64
call_112 = relay.TupleGetItem(func_12_call(relay.reshape(const_113.astype('float32'), []), relay.reshape(var_114.astype('float64'), [11,]), ), 0)
call_115 = relay.TupleGetItem(func_16_call(relay.reshape(const_113.astype('float32'), []), relay.reshape(var_114.astype('float64'), [11,]), ), 0)
bop_116 = relay.multiply(uop_108.astype('float64'), relay.reshape(bop_93.astype('float64'), relay.shape_of(uop_108))) # shape=(5,)
var_119 = relay.var("var_119", dtype = "float32", shape = (5,))#candidate|119|(5,)|var|float32
bop_120 = relay.bitwise_or(uop_89.astype('uint8'), relay.reshape(var_119.astype('uint8'), relay.shape_of(uop_89))) # shape=(5,)
bop_123 = relay.equal(bop_116.astype('bool'), relay.reshape(var_85.astype('bool'), relay.shape_of(bop_116))) # shape=(5,)
func_12_call = mod.get_global_var('func_12')
func_16_call = mutated_mod.get_global_var('func_16')
call_126 = relay.TupleGetItem(func_12_call(relay.reshape(call_112.astype('float32'), []), relay.reshape(var_114.astype('float64'), [11,]), ), 1)
call_127 = relay.TupleGetItem(func_16_call(relay.reshape(call_112.astype('float32'), []), relay.reshape(var_114.astype('float64'), [11,]), ), 1)
bop_128 = relay.bitwise_xor(uop_91.astype('uint8'), relay.reshape(bop_123.astype('uint8'), relay.shape_of(uop_91))) # shape=(5,)
var_131 = relay.var("var_131", dtype = "bool", shape = (5,))#candidate|131|(5,)|var|bool
bop_132 = relay.floor_mod(bop_123.astype('float64'), relay.reshape(var_131.astype('float64'), relay.shape_of(bop_123))) # shape=(5,)
const_135 = relay.const([-6.325287,-6.479937,-0.490603,6.363795,-9.869473], dtype = "float64")#candidate|135|(5,)|const|float64
bop_136 = relay.logical_or(uop_106.astype('bool'), relay.reshape(const_135.astype('bool'), relay.shape_of(uop_106))) # shape=(5,)
uop_139 = relay.log10(uop_104.astype('float64')) # shape=(5,)
uop_141 = relay.acos(bop_132.astype('float32')) # shape=(5,)
uop_143 = relay.sinh(uop_104.astype('float32')) # shape=(5,)
bop_145 = relay.subtract(uop_104.astype('int32'), relay.reshape(bop_93.astype('int32'), relay.shape_of(uop_104))) # shape=(5,)
bop_148 = relay.not_equal(uop_104.astype('bool'), relay.reshape(uop_143.astype('bool'), relay.shape_of(uop_104))) # shape=(5,)
func_79_call = mod.get_global_var('func_79')
func_82_call = mutated_mod.get_global_var('func_82')
const_152 = relay.const([-3.089355,7.681500,-2.087108,-2.417501,-7.965717,1.756871,-7.553901,-7.375631,4.784866,0.154791,-1.199721,-9.967464,-1.441739,-1.781903,-6.139890], dtype = "float64")#candidate|152|(15,)|const|float64
call_151 = relay.TupleGetItem(func_79_call(relay.reshape(const_152.astype('float64'), [15,])), 0)
call_153 = relay.TupleGetItem(func_82_call(relay.reshape(const_152.astype('float64'), [15,])), 0)
uop_154 = relay.cosh(uop_104.astype('float64')) # shape=(5,)
uop_156 = relay.sigmoid(bop_132.astype('float64')) # shape=(5,)
bop_158 = relay.multiply(uop_141.astype('uint16'), relay.reshape(var_96.astype('uint16'), relay.shape_of(uop_141))) # shape=(5,)
uop_161 = relay.atanh(uop_156.astype('float64')) # shape=(5,)
uop_163 = relay.rsqrt(uop_161.astype('float32')) # shape=(5,)
uop_165 = relay.tan(uop_163.astype('float32')) # shape=(5,)
uop_167 = relay.sqrt(uop_165.astype('float64')) # shape=(5,)
bop_169 = relay.logical_and(uop_167.astype('bool'), relay.reshape(bop_158.astype('bool'), relay.shape_of(uop_167))) # shape=(5,)
bop_172 = relay.logical_xor(bop_169.astype('uint32'), relay.reshape(uop_91.astype('uint32'), relay.shape_of(bop_169))) # shape=(5,)
uop_175 = relay.acos(uop_165.astype('float32')) # shape=(5,)
bop_177 = relay.subtract(uop_141.astype('int8'), relay.reshape(bop_136.astype('int8'), relay.shape_of(uop_141))) # shape=(5,)
bop_180 = relay.multiply(uop_167.astype('uint16'), relay.reshape(bop_101.astype('uint16'), relay.shape_of(uop_167))) # shape=(5,)
bop_183 = relay.bitwise_and(uop_163.astype('uint32'), relay.reshape(uop_161.astype('uint32'), relay.shape_of(uop_163))) # shape=(5,)
bop_186 = relay.add(uop_165.astype('int8'), relay.reshape(uop_104.astype('int8'), relay.shape_of(uop_165))) # shape=(5,)
bop_189 = relay.bitwise_xor(bop_180.astype('uint32'), relay.reshape(uop_141.astype('uint32'), relay.shape_of(bop_180))) # shape=(5,)
var_192 = relay.var("var_192", dtype = "uint16", shape = (5,))#candidate|192|(5,)|var|uint16
bop_193 = relay.greater_equal(bop_180.astype('bool'), relay.reshape(var_192.astype('bool'), relay.shape_of(bop_180))) # shape=(5,)
uop_196 = relay.cosh(bop_186.astype('float64')) # shape=(5,)
uop_198 = relay.rsqrt(bop_189.astype('float64')) # shape=(5,)
bop_200 = relay.equal(bop_193.astype('bool'), relay.reshape(bop_136.astype('bool'), relay.shape_of(bop_193))) # shape=(5,)
uop_203 = relay.erf(uop_198.astype('float64')) # shape=(5,)
bop_205 = relay.multiply(uop_203.astype('int64'), relay.reshape(bop_177.astype('int64'), relay.shape_of(uop_203))) # shape=(5,)
output = relay.Tuple([uop_110,call_112,const_113,var_114,bop_120,call_126,bop_128,uop_139,bop_145,bop_148,call_151,const_152,uop_154,bop_172,uop_175,bop_183,uop_196,bop_200,bop_205,])
output2 = relay.Tuple([uop_110,call_115,const_113,var_114,bop_120,call_127,bop_128,uop_139,bop_145,bop_148,call_153,const_152,uop_154,bop_172,uop_175,bop_183,uop_196,bop_200,bop_205,])
func_208 = relay.Function([var_84,var_85,var_96,var_100,var_114,var_119,var_131,var_192,], output)
mod['func_208'] = func_208
mod = relay.transform.InferType()(mod)
var_209 = relay.var("var_209", dtype = "bool", shape = (5,))#candidate|209|(5,)|var|bool
var_210 = relay.var("var_210", dtype = "bool", shape = (5,))#candidate|210|(5,)|var|bool
var_211 = relay.var("var_211", dtype = "float32", shape = (5,))#candidate|211|(5,)|var|float32
var_212 = relay.var("var_212", dtype = "bool", shape = (5,))#candidate|212|(5,)|var|bool
var_213 = relay.var("var_213", dtype = "float64", shape = (1, 11))#candidate|213|(1, 11)|var|float64
var_214 = relay.var("var_214", dtype = "float32", shape = (5,))#candidate|214|(5,)|var|float32
var_215 = relay.var("var_215", dtype = "bool", shape = (5,))#candidate|215|(5,)|var|bool
var_216 = relay.var("var_216", dtype = "uint16", shape = (5,))#candidate|216|(5,)|var|uint16
output = func_208(var_209,var_210,var_211,var_212,var_213,var_214,var_215,var_216,)
func_217 = relay.Function([var_209,var_210,var_211,var_212,var_213,var_214,var_215,var_216,], output)
mutated_mod['func_217'] = func_217
mutated_mod = relay.transform.InferType()(mutated_mod)
var_219 = relay.var("var_219", dtype = "float32", shape = (2, 13))#candidate|219|(2, 13)|var|float32
var_220 = relay.var("var_220", dtype = "float32", shape = (2, 13))#candidate|220|(2, 13)|var|float32
bop_221 = relay.power(var_219.astype('float32'), relay.reshape(var_220.astype('float32'), relay.shape_of(var_219))) # shape=(2, 13)
output = bop_221
output2 = bop_221
func_224 = relay.Function([var_219,var_220,], output)
mod['func_224'] = func_224
mod = relay.transform.InferType()(mod)
var_225 = relay.var("var_225", dtype = "float32", shape = (2, 13))#candidate|225|(2, 13)|var|float32
var_226 = relay.var("var_226", dtype = "float32", shape = (2, 13))#candidate|226|(2, 13)|var|float32
output = func_224(var_225,var_226,)
func_227 = relay.Function([var_225,var_226,], output)
mutated_mod['func_227'] = func_227
mutated_mod = relay.transform.InferType()(mutated_mod)
const_229 = relay.const(7.345489, dtype = "float32")#candidate|229|()|const|float32
var_230 = relay.var("var_230", dtype = "float32", shape = ())#candidate|230|()|var|float32
bop_231 = relay.mod(const_229.astype('float32'), var_230.astype('float32')) # shape=()
uop_234 = relay.cos(var_230.astype('float32')) # shape=()
bop_236 = relay.equal(bop_231.astype('bool'), const_229.astype('bool')) # shape=()
uop_239 = relay.atanh(uop_234.astype('float64')) # shape=()
func_79_call = mod.get_global_var('func_79')
func_82_call = mutated_mod.get_global_var('func_82')
var_242 = relay.var("var_242", dtype = "float64", shape = (15,))#candidate|242|(15,)|var|float64
call_241 = relay.TupleGetItem(func_79_call(relay.reshape(var_242.astype('float64'), [15,])), 0)
call_243 = relay.TupleGetItem(func_82_call(relay.reshape(var_242.astype('float64'), [15,])), 0)
uop_244 = relay.log10(uop_239.astype('float32')) # shape=()
uop_246 = relay.acos(uop_244.astype('float32')) # shape=()
const_248 = relay.const(-0.051114, dtype = "float32")#candidate|248|()|const|float32
bop_249 = relay.less_equal(uop_246.astype('bool'), const_248.astype('bool')) # shape=()
bop_252 = relay.bitwise_xor(bop_249.astype('int32'), uop_246.astype('int32')) # shape=()
var_255 = relay.var("var_255", dtype = "bool", shape = (6, 3))#candidate|255|(6, 3)|var|bool
bop_256 = relay.greater(bop_249.astype('bool'), var_255.astype('bool')) # shape=(6, 3)
uop_259 = relay.tan(uop_244.astype('float32')) # shape=()
bop_261 = relay.add(bop_249.astype('float64'), uop_234.astype('float64')) # shape=()
bop_264 = relay.minimum(bop_261.astype('uint16'), var_230.astype('uint16')) # shape=()
func_12_call = mod.get_global_var('func_12')
func_16_call = mutated_mod.get_global_var('func_16')
var_268 = relay.var("var_268", dtype = "float64", shape = (11,))#candidate|268|(11,)|var|float64
call_267 = relay.TupleGetItem(func_12_call(relay.reshape(const_248.astype('float32'), []), relay.reshape(var_268.astype('float64'), [11,]), ), 1)
call_269 = relay.TupleGetItem(func_16_call(relay.reshape(const_248.astype('float32'), []), relay.reshape(var_268.astype('float64'), [11,]), ), 1)
var_270 = relay.var("var_270", dtype = "float32", shape = (11, 15, 10))#candidate|270|(11, 15, 10)|var|float32
bop_271 = relay.less(var_230.astype('bool'), var_270.astype('bool')) # shape=(11, 15, 10)
bop_274 = relay.less_equal(bop_264.astype('bool'), uop_246.astype('bool')) # shape=()
bop_277 = relay.floor_mod(uop_246.astype('float32'), bop_271.astype('float32')) # shape=(11, 15, 10)
bop_280 = relay.less(uop_259.astype('bool'), var_270.astype('bool')) # shape=(11, 15, 10)
const_283 = relay.const([5.127415,-1.126332,2.956383], dtype = "float32")#candidate|283|(3,)|const|float32
bop_284 = relay.power(uop_244.astype('float64'), const_283.astype('float64')) # shape=(3,)
uop_287 = relay.sigmoid(bop_284.astype('float64')) # shape=(3,)
uop_289 = relay.erf(uop_287.astype('float64')) # shape=(3,)
bop_291 = relay.left_shift(uop_239.astype('int8'), call_267.astype('int8')) # shape=(11,)
bop_294 = relay.left_shift(uop_239.astype('int8'), call_269.astype('int8')) # shape=(11,)
uop_295 = relay.sqrt(uop_289.astype('float32')) # shape=(3,)
uop_297 = relay.rsqrt(bop_252.astype('float32')) # shape=()
uop_299 = relay.sigmoid(uop_295.astype('float64')) # shape=(3,)
bop_301 = relay.floor_mod(uop_295.astype('float32'), uop_239.astype('float32')) # shape=(3,)
uop_304 = relay.sinh(uop_299.astype('float32')) # shape=(3,)
bop_306 = relay.subtract(uop_299.astype('float32'), relay.reshape(bop_301.astype('float32'), relay.shape_of(uop_299))) # shape=(3,)
uop_309 = relay.log10(bop_252.astype('float32')) # shape=()
func_79_call = mod.get_global_var('func_79')
func_82_call = mutated_mod.get_global_var('func_82')
call_311 = relay.TupleGetItem(func_79_call(relay.reshape(call_241.astype('float64'), [15,])), 0)
call_312 = relay.TupleGetItem(func_82_call(relay.reshape(call_241.astype('float64'), [15,])), 0)
uop_313 = relay.acosh(uop_289.astype('float64')) # shape=(3,)
uop_315 = relay.atanh(uop_304.astype('float64')) # shape=(3,)
bop_317 = relay.bitwise_and(uop_315.astype('int8'), bop_264.astype('int8')) # shape=(3,)
bop_320 = relay.divide(bop_317.astype('float32'), bop_252.astype('float32')) # shape=(3,)
bop_323 = relay.mod(uop_299.astype('float64'), bop_231.astype('float64')) # shape=(3,)
uop_326 = relay.asin(uop_304.astype('float64')) # shape=(3,)
uop_328 = relay.sinh(uop_295.astype('float64')) # shape=(3,)
bop_330 = relay.add(bop_320.astype('float64'), bop_231.astype('float64')) # shape=(3,)
uop_333 = relay.asin(uop_304.astype('float32')) # shape=(3,)
output = relay.Tuple([bop_236,call_241,var_242,bop_256,var_268,bop_274,bop_277,bop_280,bop_291,uop_297,bop_306,uop_309,call_311,uop_313,bop_323,uop_326,uop_328,bop_330,uop_333,])
output2 = relay.Tuple([bop_236,call_243,var_242,bop_256,var_268,bop_274,bop_277,bop_280,bop_294,uop_297,bop_306,uop_309,call_312,uop_313,bop_323,uop_326,uop_328,bop_330,uop_333,])
F = relay.Function([var_230,var_242,var_255,var_268,var_270,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_230,var_242,var_255,var_268,var_270,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_230= np.array(3.665905, dtype='float32')
module1.set_input('var_230', input_230)
input_242= np.array([-7.058175,5.278763,2.373846,7.832149,-6.710788,8.928788,6.513797,2.079455,3.640793,6.239478,5.060475,9.890173,-6.682715,4.420989,-6.409221], dtype='float64')
module1.set_input('var_242', input_242)
input_255= np.array([[True,True,False],[True,True,False],[True,True,False],[False,False,True],[False,True,True],[False,False,True]], dtype='bool')
module1.set_input('var_255', input_255)
input_268= np.array([-7.683152,3.046307,7.700721,-6.901353,-5.961048,9.084189,-9.318946,-5.204685,7.251017,-7.097067,2.453320], dtype='float64')
module1.set_input('var_268', input_268)
input_270= np.array([[[1.363549,8.998298,-5.297106,2.095165,9.084286,-5.610346,-1.690392,5.469305,9.709678,-2.795089],[2.686871,-4.587173,-8.841052,-6.067496,-7.672960,6.806066,3.756056,-3.621902,3.926211,4.132006],[0.194158,8.964410,1.838928,-3.695498,-5.814003,-0.170140,2.622839,-0.530790,-2.003004,-5.727732],[-3.711169,6.414563,-5.484206,-9.288168,6.989195,-6.214465,4.209236,-9.814033,6.044933,7.238011],[2.433471,4.666874,-7.087786,-7.720265,4.970064,3.036894,-9.217428,4.634281,3.528322,-9.593541],[8.988742,4.404177,8.251283,-0.992573,5.655882,-6.867342,8.293320,6.781388,0.515117,-2.323192],[9.428486,1.193841,-7.346996,-9.043821,-5.483324,-8.160836,-6.958540,-1.981896,-1.489626,-9.130861],[-5.105209,-9.218063,-4.392226,-0.507685,-4.967152,-7.777022,-2.209144,2.654518,7.957964,-3.924333],[6.750780,0.779887,1.364804,7.598068,-0.961130,8.461554,-8.159860,-3.958953,5.284603,6.662209],[-3.591644,7.748089,5.059710,4.343111,8.932493,-3.039936,7.382152,-2.973061,4.057408,-7.996041],[8.484621,-2.435715,1.987690,-0.371172,6.625704,-7.951733,-3.789176,5.888703,6.831148,-1.736369],[-5.021304,1.583661,-2.982748,-9.680279,4.478877,-8.477912,-7.502016,-0.568794,7.532388,0.323886],[-7.174574,-5.338690,3.566399,-9.225688,3.135803,4.984825,7.708131,3.768545,-5.162127,1.590239],[-0.427126,-6.638332,1.152736,-9.127331,-3.608076,4.948278,-9.656302,0.831000,3.242701,-2.223348],[-8.024933,8.892277,-4.589777,2.346115,-6.139207,-7.153815,-8.576323,-7.795747,9.058962,4.254968]],[[-4.329642,3.864104,-7.342059,-1.277704,-8.175704,-3.039941,9.677260,1.944389,-7.967944,-5.787031],[9.015902,9.580181,-5.390044,3.174663,6.620851,1.244056,-5.515259,-0.001226,0.953464,-1.444757],[5.818584,-2.165769,-8.566383,-4.003481,-6.264801,-4.003296,8.445249,-4.305733,5.791832,9.806860],[-3.263527,-5.307501,3.740259,5.108775,8.016135,0.446687,5.108471,2.862991,4.190263,-6.715317],[8.137110,4.965848,0.113489,-6.763747,-3.049287,3.946490,-1.471521,6.429749,-2.889888,-4.202636],[-8.676760,-0.537783,9.980709,-2.717425,2.969886,-0.446367,1.968040,6.362387,0.219654,9.711700],[8.857873,-0.447555,-9.306185,-4.919606,7.284246,-7.053587,-3.487027,8.170420,3.975094,-7.287095],[-6.364065,2.168587,-6.359570,-5.406282,-3.147057,9.902402,-9.658122,8.524738,7.705206,5.442159],[-4.038557,8.715104,-6.780114,-1.192602,-8.078000,-1.886908,7.301843,-1.890156,-5.097585,-6.091690],[-6.274078,8.189091,3.820415,2.704852,-7.399909,6.211596,-5.798155,8.751900,4.881114,-9.793152],[-3.340006,6.096931,-8.406073,9.455520,-1.231577,4.863417,-4.321506,-3.776580,7.634246,-3.358838],[-5.461889,-2.198994,-4.519080,-1.351568,1.760553,2.277989,1.259412,-1.687840,-3.644690,7.127861],[5.729715,4.528568,7.821834,8.582597,4.120518,-4.784926,-1.104725,1.580834,-0.095826,-1.144100],[-1.568654,5.399604,-4.647508,-6.250942,0.413259,-1.574371,-5.123368,-7.309320,6.451607,2.070341],[-4.040020,-2.141577,-7.560018,3.252067,4.787364,7.522131,-3.097379,-4.753251,-6.998172,8.049488]],[[-0.199312,-0.469814,-5.944933,-9.609686,-0.508620,-4.067389,7.562177,0.870464,-3.090440,-9.282143],[7.078521,-5.499896,-2.055177,-3.877397,8.365400,-5.487241,1.719753,-5.410097,-1.802846,5.681593],[-4.285755,7.849318,4.931226,-8.373996,1.531533,8.444989,-6.641899,-5.937582,-6.397335,8.669507],[3.619019,0.949265,-1.929297,-8.308526,-6.133451,5.894185,9.624228,-2.025676,-6.716875,1.286936],[4.166749,-2.245463,-8.122182,-2.191046,6.133071,-1.994983,-8.596042,-9.617707,2.839322,3.322302],[-3.879260,5.123113,3.582334,-5.585196,-0.961499,7.495403,6.404841,2.494673,7.981741,-8.159264],[4.717470,2.775802,3.145098,-9.922855,-4.224112,-3.823842,-8.677087,-6.881897,-8.684916,5.058926],[-4.544625,-6.149520,-7.356547,6.108978,-5.865558,4.551581,-7.489519,0.420508,-2.030659,0.620416],[7.880307,9.703907,4.718663,4.497738,7.902279,-5.081092,4.285851,2.311030,-2.477972,0.769328],[-6.489927,-7.639081,8.562052,-1.364645,1.787765,-2.020729,-4.395257,-0.848184,-5.223263,0.887811],[1.613017,9.369326,-2.256777,-9.452079,-7.546749,1.154422,-1.519600,1.904082,2.956599,5.242114],[9.072001,5.575962,-2.648931,3.924719,9.137100,-0.353650,-8.038014,-1.809743,-6.776501,4.143367],[-1.755499,8.730327,-7.399273,4.259431,7.285590,-5.374481,-0.871063,-8.805495,-2.851565,6.904250],[-8.176117,-9.580400,-8.926138,9.769686,2.306790,2.133926,-0.968264,0.975921,4.206461,-5.984631],[5.525450,-3.352197,9.144354,-0.403425,-3.466073,8.957302,2.142720,-2.424153,-8.287161,-5.836543]],[[-3.796799,-3.543812,0.393345,-2.422414,-3.800504,8.124470,3.027035,1.813644,-9.001852,-8.591061],[-2.603453,4.455772,7.522803,6.674973,6.662691,-5.011242,1.584379,-4.077713,-0.847357,4.351167],[-1.572623,-9.400569,-0.026547,-3.190136,-1.451331,-4.492088,-5.664716,-2.321282,3.041965,-8.681953],[-5.739210,-3.530797,2.697829,-0.634631,0.549818,-0.861327,-4.447454,-2.452884,-5.613173,3.123077],[7.323920,2.718388,6.499919,-9.975140,3.938963,6.829545,7.036597,2.887269,2.607015,-8.573522],[-6.933602,-3.667141,7.973690,0.126370,2.906080,-8.805166,-1.776373,-8.836717,-7.552752,-9.879069],[7.996648,9.976155,-2.356928,8.613775,-5.303447,-1.476363,-4.147446,4.390318,6.425929,-2.101101],[5.730670,-9.734601,-4.069369,4.795828,0.448524,0.544627,1.653838,7.624010,7.206090,2.280294],[-7.025263,-4.872680,-4.497717,-2.295353,4.112905,-3.187064,-1.119564,-4.721104,-8.492975,5.489001],[-0.626556,-8.984300,4.693064,1.122713,0.335635,-3.019896,-5.569177,-0.846336,-6.864651,0.636082],[0.772634,-6.149888,-7.578695,5.464357,-6.096288,-8.551640,3.048336,-1.894260,-0.517928,9.119859],[3.720937,7.495702,1.621767,-6.878576,-2.711966,6.716203,-8.340049,3.226772,-7.134041,7.937308],[6.595160,9.581064,-0.496041,0.799475,9.620532,-7.840648,-1.554682,1.435291,-5.370717,1.808441],[2.974612,-3.988767,-7.245083,-9.473624,-7.892900,5.272528,4.300054,-2.656268,0.668769,-2.939021],[6.762579,9.307062,-5.448785,9.326798,-9.530171,5.292358,2.092735,8.000257,-7.423338,-2.319926]],[[8.715721,-9.474675,1.267310,8.620087,9.562490,6.504031,-5.775380,-0.619708,8.017687,5.890681],[8.813071,4.862945,0.839303,-2.877169,-3.852890,-7.783230,9.419464,-1.543137,-6.386554,1.204377],[7.484521,-1.390377,1.497570,-3.659811,-2.415046,-7.443732,4.308431,-6.335281,2.727039,-1.546560],[2.091115,1.531756,6.099332,8.177129,9.909469,8.734214,-0.689458,8.004854,5.643042,-8.363697],[7.068430,5.650742,5.061727,8.533982,-2.382368,-7.321854,1.484542,-2.281472,-4.910442,-8.735575],[-3.747769,-7.403943,4.940258,-1.995541,-5.764277,-1.131237,-6.480732,-9.798108,6.000651,-9.784550],[1.286769,7.592080,-3.118329,8.494834,-0.459742,4.191953,-1.993637,6.813552,0.349958,-0.142094],[-8.517759,0.903800,-9.724198,-4.753796,-7.709087,3.293410,-0.503093,-5.218705,8.155333,2.784152],[6.323308,-9.797224,-4.033610,9.315954,-5.664684,0.749352,-1.469233,1.650057,-1.207155,-7.548261],[-5.993514,-4.511804,-3.774277,3.641642,1.545232,3.755475,0.499412,-7.270952,0.676283,2.568403],[3.440216,3.905373,-5.750134,-3.054526,-3.083395,2.710801,-3.072755,6.260927,-7.050103,-0.819657],[0.885701,-0.863987,-0.113233,1.184904,-7.486292,4.511325,6.798949,6.166233,0.377030,6.552295],[-6.002622,-4.639925,-6.174241,5.030563,-1.768775,-6.012191,-6.572939,8.191370,9.306683,-3.062449],[6.475782,5.068102,-9.816692,-2.290574,-7.432557,-8.486584,-4.056921,-7.996845,-5.336308,4.850723],[6.569107,4.104792,-8.109421,-3.286239,5.042596,6.054493,-0.237968,7.055226,4.414566,-8.745124]],[[9.926739,-7.258769,1.855211,3.320482,9.338968,2.689652,-5.252001,-3.303452,7.591573,5.011656],[1.005645,6.144525,7.558182,7.267565,6.224516,1.756913,-0.097824,-2.903459,-0.545226,5.680585],[7.953442,-7.867034,4.618183,-7.159430,-7.758519,1.534581,3.934053,9.868517,-5.455139,6.526827],[3.135602,-2.921516,6.446726,5.053648,-2.968841,5.853206,9.449565,-4.632885,-5.307761,5.003236],[-6.454534,-8.836603,-7.839548,-7.333448,-2.124536,-3.077802,-8.858537,4.959556,7.936187,7.841307],[-1.521375,6.000638,4.903577,-1.551479,8.114127,-9.942736,4.688769,8.895523,-4.195440,-9.844928],[9.957828,-4.252223,9.512011,5.728217,2.796523,0.721636,4.417692,1.037359,-0.322979,-2.349427],[-2.269806,9.879802,-1.720529,1.586937,-5.958920,0.516502,-7.853393,-6.054355,-2.956016,-9.774408],[-9.325580,4.490559,2.062261,-0.838979,-2.306112,4.598777,2.969141,-2.551185,7.879881,0.264155],[1.807204,3.399837,-5.207357,-4.964518,-1.151603,-3.246681,-8.919565,-5.792225,6.900428,9.885728],[-9.132922,-4.106002,9.153833,8.142555,-4.966931,-5.326116,9.057403,8.710629,5.096187,-5.268764],[-3.711444,1.348332,-6.601765,-8.273456,-8.132546,-3.934793,-0.342849,7.550844,3.425662,-9.771919],[4.493803,-6.864082,9.845438,-1.240567,9.496057,-3.057000,-7.685454,-9.944214,4.882309,-0.763546],[-3.055137,-8.204664,2.863370,-9.462049,-8.518992,-0.043757,9.607078,2.763111,-7.030004,-0.720703],[-9.470079,4.950885,-8.242969,-9.516568,1.347208,8.594608,1.575369,-3.479608,7.351972,5.611009]],[[-3.966812,4.584019,-0.027795,-4.558874,8.399366,-4.297279,1.142856,-4.617913,7.082322,6.822073],[4.668800,-1.833393,1.468949,7.357688,8.806395,-3.708830,-3.042752,-7.985407,-5.703065,5.389552],[7.216019,-8.674373,1.765946,-8.398449,5.703298,6.439362,-2.023920,5.048020,4.204397,1.138920],[0.408366,-6.042981,6.382373,1.751056,1.710338,0.263782,-6.066230,2.564719,-8.515985,0.624616],[9.352088,-9.302080,-2.230875,0.154981,-5.539840,3.738383,3.511504,6.656725,-7.551345,-5.366451],[2.937456,-7.934543,5.499211,-2.049005,2.146307,0.847387,-2.033660,-0.588763,8.749343,-8.489557],[-4.484366,-2.519311,0.780982,6.329085,-4.276802,7.429474,3.855115,2.742620,8.498724,4.429889],[9.129333,-6.056378,-4.836429,2.837650,-5.514294,-4.213005,8.334583,-9.749385,-9.972127,-7.059133],[-2.983510,9.953034,5.962403,-6.304038,-3.950838,3.788351,3.495330,4.011465,-6.602227,2.937034],[7.785960,-4.595373,-9.020807,8.269035,-4.323061,2.489953,-3.506818,-1.994773,-6.369469,-9.064757],[-9.781382,-2.580458,5.459932,-0.894403,-2.159294,0.802645,1.750499,-5.560619,-5.349820,-3.292948],[0.751816,1.517592,-6.649519,7.195865,4.222716,9.308957,0.160564,9.767976,-4.561593,1.553803],[6.161754,-5.723317,-9.662071,9.138632,-2.186974,3.950166,4.796196,5.804388,-1.579036,-2.856950],[1.534354,-3.632767,-7.680424,9.941697,8.157244,8.487622,5.209386,9.975310,7.321986,0.595017],[-5.722365,4.006087,9.903938,-4.875597,-8.439316,8.263119,-9.201798,-6.277574,7.070005,7.699687]],[[-7.429789,-6.537565,-8.155690,4.494288,-9.909750,-1.251120,9.852764,-2.237744,-9.366660,9.227133],[-8.494714,-0.128141,-9.615808,1.831270,2.067196,-9.052764,8.029331,6.608461,-6.801400,3.959739],[7.525539,4.287792,-6.095177,-0.567659,-3.628605,9.231270,-7.865084,-3.261339,-4.885878,3.170539],[-3.195011,-3.737955,-7.721518,-2.289424,-8.813030,5.735501,2.015491,4.045269,-2.614763,-9.173950],[8.626419,5.916847,-1.920271,-0.819913,9.475368,-4.315084,0.529937,-3.066582,-0.308255,-6.150138],[-9.818226,0.371540,-6.560158,7.608825,-7.468107,-8.434934,3.078717,7.426489,7.753522,4.262496],[6.439674,-4.930919,-7.947056,-9.849442,1.347549,1.556822,-2.225477,0.407675,1.662239,-4.555691],[8.598850,6.021156,-1.901693,-4.240843,-6.378162,5.454133,7.242829,-6.252716,-0.926477,-9.420009],[9.920244,4.026540,-0.824028,0.282992,-5.632833,8.253877,-3.857005,-3.826392,-0.294173,-3.041270],[-4.207265,-7.573946,2.350092,6.601952,-8.219524,-7.125674,-9.705102,0.029037,-5.164204,-0.345237],[-8.596275,-4.981896,6.815565,-1.052385,8.627213,-7.371876,-6.598205,7.789825,-4.362316,2.087201],[6.469557,-2.369465,6.666934,-1.709053,-6.705431,-1.470357,1.418253,0.547919,-5.050739,-7.726257],[-0.197264,7.776184,8.724833,0.269791,-8.000148,-4.482488,-8.363184,6.452835,9.601961,8.468678],[-1.147690,-0.548172,5.089661,-6.755202,8.667686,2.231728,-6.497963,-3.142452,-1.275656,3.442147],[-9.609494,-9.035828,-7.733728,2.498061,3.088444,-2.753593,-4.153079,0.395011,-3.378123,0.430806]],[[-2.384480,-3.375809,-9.085537,0.190143,-4.234631,3.544996,-4.260457,8.959601,2.417828,-6.347614],[4.278630,-9.839862,-7.126144,8.821926,-2.955550,-9.547708,-9.333150,3.301172,-4.516112,9.574735],[5.794905,1.990615,-1.773101,-9.271727,6.077573,-8.016592,6.483434,6.385212,2.061986,2.166525],[6.347754,-9.214828,-8.136332,-2.855705,-2.344915,5.040292,-5.942360,-8.969297,9.417092,-8.625149],[8.503590,0.267592,-8.528613,-6.069696,-2.628525,2.534608,-5.482114,9.911183,5.654704,6.067535],[7.254956,6.019959,9.480950,-9.860269,-9.552169,-5.522446,6.464547,3.477602,-7.588772,6.000857],[3.386623,-7.781972,5.228650,-4.983308,-1.856761,-0.374534,-0.382757,8.576746,8.771404,-8.248530],[2.607847,-1.870827,-1.279777,-0.782179,0.713720,6.922309,-7.613850,-7.381471,7.456693,-3.434864],[-4.510380,2.148055,-5.371889,7.608143,-0.506855,9.888776,-6.671642,0.241120,8.976816,7.215682],[9.933505,0.263094,-5.176182,6.912968,-3.172883,6.190454,4.721386,8.788145,-2.285598,5.715268],[-1.633517,-5.727637,-6.223005,-3.490807,2.253843,9.919941,-9.329239,-6.202835,-1.150021,7.095690],[4.887092,-5.055605,6.736704,-7.309612,-2.921376,1.384464,-0.299429,0.300563,5.309518,8.981109],[7.646384,1.091143,9.639907,-5.142319,-9.417300,3.159815,4.249162,-8.761877,3.817590,-1.093116],[-1.197607,2.245296,1.581401,-9.632231,-9.340356,5.702331,-2.446960,9.204417,-4.674149,1.639217],[5.085281,-2.818042,-6.556740,-3.826272,8.867107,6.581570,-9.829877,-2.561720,5.396962,-6.374849]],[[-7.181337,5.082772,-0.382525,8.644566,3.177329,6.516818,2.338700,4.529869,-4.133053,5.583486],[-2.730489,-6.145441,8.976889,-5.039850,3.677350,-5.811321,-1.345739,-5.734839,2.011823,0.402277],[-8.249652,1.946303,-0.956859,-4.541881,-1.401314,-4.401370,-1.194750,2.235880,0.066437,3.974426],[-7.368230,2.143950,8.430041,-4.453433,0.829881,5.295855,-2.648267,0.450704,0.291984,-9.221715],[4.638779,-6.246274,6.395057,-5.974538,9.515001,3.217980,3.180240,-6.003820,-8.860850,8.279552],[-8.474385,3.276855,-6.112699,7.835869,-3.633549,8.238798,-1.678386,-6.452067,-1.897654,0.348251],[-3.529118,6.448804,5.505351,-2.287862,-2.275703,3.762009,3.412863,-9.846863,7.966936,0.002130],[4.505230,3.176136,5.929456,5.947140,-7.936992,9.460193,7.414732,9.876782,7.494445,-9.800517],[9.741293,-7.976280,-1.999182,-8.801150,4.368598,-2.481486,0.542257,-6.476845,9.384683,-8.712991],[-4.768725,-2.596863,-3.955428,-5.516956,3.091561,-9.253525,-4.988717,1.833255,3.072232,-6.406704],[-8.356791,4.011120,1.569228,-0.906545,5.536576,-5.069283,-9.971191,6.205403,-6.315496,-1.517584],[-3.853687,5.916801,-9.358697,5.871166,-4.766937,-5.202577,-1.289261,-3.681147,2.435972,-4.180197],[1.554364,4.975628,5.234060,5.038566,-8.590417,-5.621292,-2.672667,-5.510905,-5.479345,-6.011743],[1.413152,3.507020,-5.907818,8.027453,-3.540235,-4.097650,3.043261,-7.884366,-0.839718,-3.005473],[9.342238,4.026938,-2.329328,-5.521153,6.475108,-7.894598,7.779567,5.363713,5.693254,-7.571061]],[[-7.290094,-7.230485,-9.056236,9.491104,-1.031321,8.673365,-4.970193,7.182155,-3.202442,0.349464],[-0.757092,6.789956,-8.529610,6.781074,9.099418,9.544464,-3.492007,2.393384,-6.406605,3.134680],[5.232478,9.816172,8.703274,-5.359370,-6.264269,0.962162,9.846825,7.962502,7.450208,-3.353445],[-3.544264,2.558410,6.398996,1.339121,1.315094,-7.242944,4.080680,-1.401542,-1.143842,5.599803],[-6.055642,2.178111,3.202603,0.370275,1.736665,8.258947,-4.830968,-6.020347,-7.805059,5.254611],[-6.195533,-1.754704,3.379494,-7.659990,4.696327,2.954908,-8.781658,-3.974543,0.854604,7.982580],[2.417644,-6.332711,3.039593,1.324938,-4.488664,9.521354,-9.218799,-4.924071,-2.986444,7.506202],[-7.268103,9.144381,2.872083,-2.721162,-1.685215,3.129291,1.163351,9.527979,-9.794498,-0.956613],[6.514483,2.864198,9.114724,-3.013681,-6.772674,7.275133,-8.674528,4.101693,-0.581408,-9.151257],[3.243196,-5.506685,4.485522,9.933459,-8.260364,-4.382466,8.999330,2.016657,5.837375,-3.326198],[4.150868,2.055503,3.397511,5.873838,-2.578433,-4.027542,3.373932,-8.644812,-7.404289,-0.586688],[2.986651,-2.823786,-3.204615,9.324215,4.427391,5.020654,-8.621896,-7.129042,-1.105636,4.951459],[4.259376,-2.078356,6.375995,8.719242,7.902232,-7.329265,-8.743644,5.571992,6.442684,2.291915],[4.131454,2.860790,0.382143,3.011175,-5.621646,-8.424910,-4.586308,-6.714457,-9.235114,8.748158],[-4.591593,-1.982227,-9.118791,3.625375,3.560011,8.205510,-5.196002,-9.434109,-8.174743,9.978007]]], dtype='float32')
module1.set_input('var_270', input_270)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_230, input_242, input_255, input_268, input_270, )
res3 = intrp3.evaluate()(input_230, input_242, input_255, input_268, input_270, )
res4 = intrp4.evaluate()(input_230, input_242, input_255, input_268, input_270, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
res1_14 = module1.get_output(14).asnumpy()
res2_14 = res2[14].asnumpy()
res3_14 = res3[14].asnumpy()
res4_14 = res4[14].asnumpy()
np.testing.assert_allclose(res1_14 ,res2_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res3_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res4_14, atol=1e-3, rtol=1e-3)
(res1_14 == res2_14).all()
(res1_14 == res3_14).all()
(res1_14 == res4_14).all()
res1_15 = module1.get_output(15).asnumpy()
res2_15 = res2[15].asnumpy()
res3_15 = res3[15].asnumpy()
res4_15 = res4[15].asnumpy()
np.testing.assert_allclose(res1_15 ,res2_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res3_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res4_15, atol=1e-3, rtol=1e-3)
(res1_15 == res2_15).all()
(res1_15 == res3_15).all()
(res1_15 == res4_15).all()
res1_16 = module1.get_output(16).asnumpy()
res2_16 = res2[16].asnumpy()
res3_16 = res3[16].asnumpy()
res4_16 = res4[16].asnumpy()
np.testing.assert_allclose(res1_16 ,res2_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res3_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res4_16, atol=1e-3, rtol=1e-3)
(res1_16 == res2_16).all()
(res1_16 == res3_16).all()
(res1_16 == res4_16).all()
res1_17 = module1.get_output(17).asnumpy()
res2_17 = res2[17].asnumpy()
res3_17 = res3[17].asnumpy()
res4_17 = res4[17].asnumpy()
np.testing.assert_allclose(res1_17 ,res2_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res3_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res4_17, atol=1e-3, rtol=1e-3)
(res1_17 == res2_17).all()
(res1_17 == res3_17).all()
(res1_17 == res4_17).all()
res1_18 = module1.get_output(18).asnumpy()
res2_18 = res2[18].asnumpy()
res3_18 = res3[18].asnumpy()
res4_18 = res4[18].asnumpy()
np.testing.assert_allclose(res1_18 ,res2_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res3_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res4_18, atol=1e-3, rtol=1e-3)
(res1_18 == res2_18).all()
(res1_18 == res3_18).all()
(res1_18 == res4_18).all()
module5.set_input('var_230', input_230)
module5.set_input('var_242', input_242)
module5.set_input('var_255', input_255)
module5.set_input('var_268', input_268)
module5.set_input('var_270', input_270)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_230, input_242, input_255, input_268, input_270, )
res7 = intrp7.evaluate()(input_230, input_242, input_255, input_268, input_270, )
res8 = intrp8.evaluate()(input_230, input_242, input_255, input_268, input_270, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
res5_14 = module5.get_output(14).asnumpy()
res6_14 = res6[14].asnumpy()
res7_14 = res7[14].asnumpy()
res8_14 = res8[14].asnumpy()
np.testing.assert_allclose(res5_14 ,res6_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res7_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res8_14, atol=1e-3, rtol=1e-3)
(res5_14 == res6_14).all()
(res5_14 == res7_14).all()
(res5_14 == res8_14).all()
res5_15 = module5.get_output(15).asnumpy()
res6_15 = res6[15].asnumpy()
res7_15 = res7[15].asnumpy()
res8_15 = res8[15].asnumpy()
np.testing.assert_allclose(res5_15 ,res6_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res7_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res8_15, atol=1e-3, rtol=1e-3)
(res5_15 == res6_15).all()
(res5_15 == res7_15).all()
(res5_15 == res8_15).all()
res5_16 = module5.get_output(16).asnumpy()
res6_16 = res6[16].asnumpy()
res7_16 = res7[16].asnumpy()
res8_16 = res8[16].asnumpy()
np.testing.assert_allclose(res5_16 ,res6_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res7_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res8_16, atol=1e-3, rtol=1e-3)
(res5_16 == res6_16).all()
(res5_16 == res7_16).all()
(res5_16 == res8_16).all()
res5_17 = module5.get_output(17).asnumpy()
res6_17 = res6[17].asnumpy()
res7_17 = res7[17].asnumpy()
res8_17 = res8[17].asnumpy()
np.testing.assert_allclose(res5_17 ,res6_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res7_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res8_17, atol=1e-3, rtol=1e-3)
(res5_17 == res6_17).all()
(res5_17 == res7_17).all()
(res5_17 == res8_17).all()
res5_18 = module5.get_output(18).asnumpy()
res6_18 = res6[18].asnumpy()
res7_18 = res7[18].asnumpy()
res8_18 = res8[18].asnumpy()
np.testing.assert_allclose(res5_18 ,res6_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res7_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res8_18, atol=1e-3, rtol=1e-3)
(res5_18 == res6_18).all()
(res5_18 == res7_18).all()
(res5_18 == res8_18).all()
module9.set_input('var_230', input_230)
module9.set_input('var_242', input_242)
module9.set_input('var_255', input_255)
module9.set_input('var_268', input_268)
module9.set_input('var_270', input_270)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_230, input_242, input_255, input_268, input_270, )
res11 = intrp11.evaluate()(input_230, input_242, input_255, input_268, input_270, )
res12 = intrp12.evaluate()(input_230, input_242, input_255, input_268, input_270, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
res9_14 = module9.get_output(14).asnumpy()
res10_14 = res10[14].asnumpy()
res11_14 = res11[14].asnumpy()
res12_14 = res12[14].asnumpy()
np.testing.assert_allclose(res9_14 ,res10_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res11_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res12_14, atol=1e-3, rtol=1e-3)
(res9_14 == res10_14).all()
(res9_14 == res11_14).all()
(res9_14 == res12_14).all()
res9_15 = module9.get_output(15).asnumpy()
res10_15 = res10[15].asnumpy()
res11_15 = res11[15].asnumpy()
res12_15 = res12[15].asnumpy()
np.testing.assert_allclose(res9_15 ,res10_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res11_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res12_15, atol=1e-3, rtol=1e-3)
(res9_15 == res10_15).all()
(res9_15 == res11_15).all()
(res9_15 == res12_15).all()
res9_16 = module9.get_output(16).asnumpy()
res10_16 = res10[16].asnumpy()
res11_16 = res11[16].asnumpy()
res12_16 = res12[16].asnumpy()
np.testing.assert_allclose(res9_16 ,res10_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res11_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res12_16, atol=1e-3, rtol=1e-3)
(res9_16 == res10_16).all()
(res9_16 == res11_16).all()
(res9_16 == res12_16).all()
res9_17 = module9.get_output(17).asnumpy()
res10_17 = res10[17].asnumpy()
res11_17 = res11[17].asnumpy()
res12_17 = res12[17].asnumpy()
np.testing.assert_allclose(res9_17 ,res10_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res11_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res12_17, atol=1e-3, rtol=1e-3)
(res9_17 == res10_17).all()
(res9_17 == res11_17).all()
(res9_17 == res12_17).all()
res9_18 = module9.get_output(18).asnumpy()
res10_18 = res10[18].asnumpy()
res11_18 = res11[18].asnumpy()
res12_18 = res12[18].asnumpy()
np.testing.assert_allclose(res9_18 ,res10_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res11_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res12_18, atol=1e-3, rtol=1e-3)
(res9_18 == res10_18).all()
(res9_18 == res11_18).all()
(res9_18 == res12_18).all()
module13.set_input('var_230', input_230)
module13.set_input('var_242', input_242)
module13.set_input('var_255', input_255)
module13.set_input('var_268', input_268)
module13.set_input('var_270', input_270)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_230, input_242, input_255, input_268, input_270, )
res15 = intrp15.evaluate()(input_230, input_242, input_255, input_268, input_270, )
res16 = intrp16.evaluate()(input_230, input_242, input_255, input_268, input_270, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
res13_14 = module13.get_output(14).asnumpy()
res14_14 = res14[14].asnumpy()
res15_14 = res15[14].asnumpy()
res16_14 = res16[14].asnumpy()
np.testing.assert_allclose(res13_14 ,res14_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res15_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res16_14, atol=1e-3, rtol=1e-3)
(res13_14 == res14_14).all()
(res13_14 == res15_14).all()
(res13_14 == res16_14).all()
res13_15 = module13.get_output(15).asnumpy()
res14_15 = res14[15].asnumpy()
res15_15 = res15[15].asnumpy()
res16_15 = res16[15].asnumpy()
np.testing.assert_allclose(res13_15 ,res14_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res15_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res16_15, atol=1e-3, rtol=1e-3)
(res13_15 == res14_15).all()
(res13_15 == res15_15).all()
(res13_15 == res16_15).all()
res13_16 = module13.get_output(16).asnumpy()
res14_16 = res14[16].asnumpy()
res15_16 = res15[16].asnumpy()
res16_16 = res16[16].asnumpy()
np.testing.assert_allclose(res13_16 ,res14_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res15_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res16_16, atol=1e-3, rtol=1e-3)
(res13_16 == res14_16).all()
(res13_16 == res15_16).all()
(res13_16 == res16_16).all()
res13_17 = module13.get_output(17).asnumpy()
res14_17 = res14[17].asnumpy()
res15_17 = res15[17].asnumpy()
res16_17 = res16[17].asnumpy()
np.testing.assert_allclose(res13_17 ,res14_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res15_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res16_17, atol=1e-3, rtol=1e-3)
(res13_17 == res14_17).all()
(res13_17 == res15_17).all()
(res13_17 == res16_17).all()
res13_18 = module13.get_output(18).asnumpy()
res14_18 = res14[18].asnumpy()
res15_18 = res15[18].asnumpy()
res16_18 = res16[18].asnumpy()
np.testing.assert_allclose(res13_18 ,res14_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res15_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res16_18, atol=1e-3, rtol=1e-3)
(res13_18 == res14_18).all()
(res13_18 == res15_18).all()
(res13_18 == res16_18).all()
module17.set_input('var_230', input_230)
module17.set_input('var_242', input_242)
module17.set_input('var_255', input_255)
module17.set_input('var_268', input_268)
module17.set_input('var_270', input_270)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_230, input_242, input_255, input_268, input_270, )
res19 = intrp19.evaluate()(input_230, input_242, input_255, input_268, input_270, )
res20 = intrp20.evaluate()(input_230, input_242, input_255, input_268, input_270, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
res17_14 = module17.get_output(14).asnumpy()
res18_14 = res18[14].asnumpy()
res19_14 = res19[14].asnumpy()
res20_14 = res20[14].asnumpy()
np.testing.assert_allclose(res17_14 ,res18_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res19_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res20_14, atol=1e-3, rtol=1e-3)
(res17_14 == res18_14).all()
(res17_14 == res19_14).all()
(res17_14 == res20_14).all()
res17_15 = module17.get_output(15).asnumpy()
res18_15 = res18[15].asnumpy()
res19_15 = res19[15].asnumpy()
res20_15 = res20[15].asnumpy()
np.testing.assert_allclose(res17_15 ,res18_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res19_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res20_15, atol=1e-3, rtol=1e-3)
(res17_15 == res18_15).all()
(res17_15 == res19_15).all()
(res17_15 == res20_15).all()
res17_16 = module17.get_output(16).asnumpy()
res18_16 = res18[16].asnumpy()
res19_16 = res19[16].asnumpy()
res20_16 = res20[16].asnumpy()
np.testing.assert_allclose(res17_16 ,res18_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res19_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res20_16, atol=1e-3, rtol=1e-3)
(res17_16 == res18_16).all()
(res17_16 == res19_16).all()
(res17_16 == res20_16).all()
res17_17 = module17.get_output(17).asnumpy()
res18_17 = res18[17].asnumpy()
res19_17 = res19[17].asnumpy()
res20_17 = res20[17].asnumpy()
np.testing.assert_allclose(res17_17 ,res18_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res19_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res20_17, atol=1e-3, rtol=1e-3)
(res17_17 == res18_17).all()
(res17_17 == res19_17).all()
(res17_17 == res20_17).all()
res17_18 = module17.get_output(18).asnumpy()
res18_18 = res18[18].asnumpy()
res19_18 = res19[18].asnumpy()
res20_18 = res20[18].asnumpy()
np.testing.assert_allclose(res17_18 ,res18_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res19_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res20_18, atol=1e-3, rtol=1e-3)
(res17_18 == res18_18).all()
(res17_18 == res19_18).all()
(res17_18 == res20_18).all()
module21.set_input('var_230', input_230)
module21.set_input('var_242', input_242)
module21.set_input('var_255', input_255)
module21.set_input('var_268', input_268)
module21.set_input('var_270', input_270)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_230, input_242, input_255, input_268, input_270, )
res23 = intrp23.evaluate()(input_230, input_242, input_255, input_268, input_270, )
res24 = intrp24.evaluate()(input_230, input_242, input_255, input_268, input_270, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()
res21_14 = module21.get_output(14).asnumpy()
res22_14 = res22[14].asnumpy()
res23_14 = res23[14].asnumpy()
res24_14 = res24[14].asnumpy()
np.testing.assert_allclose(res21_14 ,res22_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res23_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res24_14, atol=1e-3, rtol=1e-3)
(res21_14 == res22_14).all()
(res21_14 == res23_14).all()
(res21_14 == res24_14).all()
res21_15 = module21.get_output(15).asnumpy()
res22_15 = res22[15].asnumpy()
res23_15 = res23[15].asnumpy()
res24_15 = res24[15].asnumpy()
np.testing.assert_allclose(res21_15 ,res22_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res23_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res24_15, atol=1e-3, rtol=1e-3)
(res21_15 == res22_15).all()
(res21_15 == res23_15).all()
(res21_15 == res24_15).all()
res21_16 = module21.get_output(16).asnumpy()
res22_16 = res22[16].asnumpy()
res23_16 = res23[16].asnumpy()
res24_16 = res24[16].asnumpy()
np.testing.assert_allclose(res21_16 ,res22_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res23_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res24_16, atol=1e-3, rtol=1e-3)
(res21_16 == res22_16).all()
(res21_16 == res23_16).all()
(res21_16 == res24_16).all()
res21_17 = module21.get_output(17).asnumpy()
res22_17 = res22[17].asnumpy()
res23_17 = res23[17].asnumpy()
res24_17 = res24[17].asnumpy()
np.testing.assert_allclose(res21_17 ,res22_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res23_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res24_17, atol=1e-3, rtol=1e-3)
(res21_17 == res22_17).all()
(res21_17 == res23_17).all()
(res21_17 == res24_17).all()
res21_18 = module21.get_output(18).asnumpy()
res22_18 = res22[18].asnumpy()
res23_18 = res23[18].asnumpy()
res24_18 = res24[18].asnumpy()
np.testing.assert_allclose(res21_18 ,res22_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res23_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res24_18, atol=1e-3, rtol=1e-3)
(res21_18 == res22_18).all()
(res21_18 == res23_18).all()
(res21_18 == res24_18).all()

'''6: TVMFuncCall
5: _ZNSt17_Function_handlerIFvN3tvm7runtime7
4: tvm::runtime::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const [clone .isra.808]
3: tvm::runtime::GraphExecutorCreate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module const&, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
2: tvm::runtime::GraphExecutor::Init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
1: tvm::runtime::GraphExecutor::SetupOpExecs()
0: tvm::runtime::GraphExecutor::CreateTVMOp(tvm::runtime::TVMOpParam const&, std::vector<DLTensor, std::allocator<DLTensor> > const&)

'''