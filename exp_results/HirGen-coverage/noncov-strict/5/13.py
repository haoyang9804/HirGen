import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (1, 8, 1))#candidate|0|(1, 8, 1)|var|float32
uop_1 = relay.cosh(var_0.astype('float32')) # shape=(1, 8, 1)
bop_3 = relay.logical_or(uop_1.astype('bool'), relay.reshape(var_0.astype('bool'), relay.shape_of(uop_1))) # shape=(1, 8, 1)
uop_6 = relay.log(var_0.astype('float32')) # shape=(1, 8, 1)
uop_8 = relay.sqrt(bop_3.astype('float32')) # shape=(1, 8, 1)
bop_10 = relay.maximum(uop_8.astype('int16'), relay.reshape(var_0.astype('int16'), relay.shape_of(uop_8))) # shape=(1, 8, 1)
bop_13 = relay.greater_equal(uop_8.astype('bool'), relay.reshape(uop_6.astype('bool'), relay.shape_of(uop_8))) # shape=(1, 8, 1)
uop_16 = relay.log2(uop_8.astype('float32')) # shape=(1, 8, 1)
output = relay.Tuple([bop_10,bop_13,uop_16,])
output2 = relay.Tuple([bop_10,bop_13,uop_16,])
func_18 = relay.Function([var_0,], output)
mod['func_18'] = func_18
mod = relay.transform.InferType()(mod)
mutated_mod['func_18'] = func_18
mutated_mod = relay.transform.InferType()(mutated_mod)
var_19 = relay.var("var_19", dtype = "float32", shape = (1, 8, 1))#candidate|19|(1, 8, 1)|var|float32
func_18_call = mutated_mod.get_global_var('func_18')
call_20 = func_18_call(var_19)
output = call_20
func_21 = relay.Function([var_19], output)
mutated_mod['func_21'] = func_21
mutated_mod = relay.transform.InferType()(mutated_mod)
var_23 = relay.var("var_23", dtype = "float64", shape = (13, 12, 15))#candidate|23|(13, 12, 15)|var|float64
uop_24 = relay.atan(var_23.astype('float64')) # shape=(13, 12, 15)
uop_26 = relay.exp(var_23.astype('float64')) # shape=(13, 12, 15)
bop_28 = relay.bitwise_and(uop_26.astype('uint16'), relay.reshape(var_23.astype('uint16'), relay.shape_of(uop_26))) # shape=(13, 12, 15)
uop_31 = relay.atanh(var_23.astype('float64')) # shape=(13, 12, 15)
uop_33 = relay.sinh(var_23.astype('float32')) # shape=(13, 12, 15)
bop_35 = relay.logical_and(bop_28.astype('bool'), relay.reshape(uop_33.astype('bool'), relay.shape_of(bop_28))) # shape=(13, 12, 15)
uop_38 = relay.sigmoid(var_23.astype('float32')) # shape=(13, 12, 15)
bop_40 = relay.bitwise_or(uop_31.astype('int32'), relay.reshape(var_23.astype('int32'), relay.shape_of(uop_31))) # shape=(13, 12, 15)
uop_43 = relay.cosh(bop_40.astype('float64')) # shape=(13, 12, 15)
func_18_call = mod.get_global_var('func_18')
func_21_call = mutated_mod.get_global_var('func_21')
var_46 = relay.var("var_46", dtype = "float32", shape = (1, 8))#candidate|46|(1, 8)|var|float32
call_45 = relay.TupleGetItem(func_18_call(relay.reshape(var_46.astype('float32'), [1, 8, 1])), 1)
call_47 = relay.TupleGetItem(func_21_call(relay.reshape(var_46.astype('float32'), [1, 8, 1])), 1)
var_48 = relay.var("var_48", dtype = "float64", shape = (13, 12, 15))#candidate|48|(13, 12, 15)|var|float64
bop_49 = relay.floor_mod(uop_43.astype('float32'), relay.reshape(var_48.astype('float32'), relay.shape_of(uop_43))) # shape=(13, 12, 15)
var_52 = relay.var("var_52", dtype = "float64", shape = (13, 12, 15))#candidate|52|(13, 12, 15)|var|float64
bop_53 = relay.not_equal(uop_26.astype('bool'), relay.reshape(var_52.astype('bool'), relay.shape_of(uop_26))) # shape=(13, 12, 15)
bop_56 = relay.multiply(var_52.astype('int8'), relay.reshape(uop_43.astype('int8'), relay.shape_of(var_52))) # shape=(13, 12, 15)
bop_59 = relay.greater(bop_56.astype('bool'), relay.reshape(uop_26.astype('bool'), relay.shape_of(bop_56))) # shape=(13, 12, 15)
uop_62 = relay.cosh(bop_59.astype('float64')) # shape=(13, 12, 15)
uop_64 = relay.rsqrt(bop_56.astype('float64')) # shape=(13, 12, 15)
uop_66 = relay.cosh(uop_62.astype('float64')) # shape=(13, 12, 15)
bop_68 = relay.less(uop_66.astype('bool'), relay.reshape(uop_31.astype('bool'), relay.shape_of(uop_66))) # shape=(13, 12, 15)
bop_71 = relay.left_shift(bop_68.astype('int8'), relay.reshape(uop_33.astype('int8'), relay.shape_of(bop_68))) # shape=(13, 12, 15)
bop_74 = relay.floor_mod(bop_71.astype('float32'), relay.reshape(bop_53.astype('float32'), relay.shape_of(bop_71))) # shape=(13, 12, 15)
uop_77 = relay.cosh(uop_66.astype('float32')) # shape=(13, 12, 15)
bop_79 = relay.multiply(uop_77.astype('int32'), relay.reshape(bop_35.astype('int32'), relay.shape_of(uop_77))) # shape=(13, 12, 15)
func_18_call = mod.get_global_var('func_18')
func_21_call = mutated_mod.get_global_var('func_21')
call_82 = relay.TupleGetItem(func_18_call(relay.reshape(call_45.astype('float32'), [1, 8, 1])), 0)
call_83 = relay.TupleGetItem(func_21_call(relay.reshape(call_45.astype('float32'), [1, 8, 1])), 0)
bop_84 = relay.minimum(bop_74.astype('int16'), relay.reshape(bop_59.astype('int16'), relay.shape_of(bop_74))) # shape=(13, 12, 15)
uop_87 = relay.tan(uop_77.astype('float32')) # shape=(13, 12, 15)
bop_89 = relay.maximum(bop_79.astype('uint8'), relay.reshape(bop_53.astype('uint8'), relay.shape_of(bop_79))) # shape=(13, 12, 15)
func_18_call = mod.get_global_var('func_18')
func_21_call = mutated_mod.get_global_var('func_21')
call_92 = relay.TupleGetItem(func_18_call(relay.reshape(call_45.astype('float32'), [1, 8, 1])), 0)
call_93 = relay.TupleGetItem(func_21_call(relay.reshape(call_45.astype('float32'), [1, 8, 1])), 0)
bop_94 = relay.logical_and(uop_87.astype('bool'), relay.reshape(bop_53.astype('bool'), relay.shape_of(uop_87))) # shape=(13, 12, 15)
bop_97 = relay.left_shift(bop_79.astype('int32'), relay.reshape(var_48.astype('int32'), relay.shape_of(bop_79))) # shape=(13, 12, 15)
bop_100 = relay.greater(uop_87.astype('bool'), relay.reshape(bop_35.astype('bool'), relay.shape_of(uop_87))) # shape=(13, 12, 15)
uop_103 = relay.sqrt(bop_79.astype('float64')) # shape=(13, 12, 15)
uop_105 = relay.asinh(uop_77.astype('float64')) # shape=(13, 12, 15)
output = relay.Tuple([uop_24,uop_38,call_45,var_46,bop_49,uop_64,call_82,bop_84,bop_89,call_92,bop_94,bop_97,bop_100,uop_103,uop_105,])
output2 = relay.Tuple([uop_24,uop_38,call_47,var_46,bop_49,uop_64,call_83,bop_84,bop_89,call_93,bop_94,bop_97,bop_100,uop_103,uop_105,])
func_107 = relay.Function([var_23,var_46,var_48,var_52,], output)
mod['func_107'] = func_107
mod = relay.transform.InferType()(mod)
mutated_mod['func_107'] = func_107
mutated_mod = relay.transform.InferType()(mutated_mod)
func_107_call = mutated_mod.get_global_var('func_107')
var_109 = relay.var("var_109", dtype = "float64", shape = (13, 12, 15))#candidate|109|(13, 12, 15)|var|float64
var_110 = relay.var("var_110", dtype = "float32", shape = (1, 8))#candidate|110|(1, 8)|var|float32
var_111 = relay.var("var_111", dtype = "float64", shape = (13, 12, 15))#candidate|111|(13, 12, 15)|var|float64
var_112 = relay.var("var_112", dtype = "float64", shape = (13, 12, 15))#candidate|112|(13, 12, 15)|var|float64
call_108 = func_107_call(var_109,var_110,var_111,var_112,)
output = call_108
func_113 = relay.Function([var_109,var_110,var_111,var_112,], output)
mutated_mod['func_113'] = func_113
mutated_mod = relay.transform.InferType()(mutated_mod)
var_115 = relay.var("var_115", dtype = "float64", shape = ())#candidate|115|()|var|float64
uop_116 = relay.sqrt(var_115.astype('float64')) # shape=()
uop_118 = relay.sqrt(uop_116.astype('float32')) # shape=()
bop_120 = relay.bitwise_and(uop_118.astype('int64'), uop_116.astype('int64')) # shape=()
var_123 = relay.var("var_123", dtype = "float32", shape = (13,))#candidate|123|(13,)|var|float32
bop_124 = relay.minimum(uop_118.astype('float32'), var_123.astype('float32')) # shape=(13,)
output = relay.Tuple([bop_120,bop_124,])
output2 = relay.Tuple([bop_120,bop_124,])
func_127 = relay.Function([var_115,var_123,], output)
mod['func_127'] = func_127
mod = relay.transform.InferType()(mod)
mutated_mod['func_127'] = func_127
mutated_mod = relay.transform.InferType()(mutated_mod)
func_127_call = mutated_mod.get_global_var('func_127')
var_129 = relay.var("var_129", dtype = "float64", shape = ())#candidate|129|()|var|float64
var_130 = relay.var("var_130", dtype = "float32", shape = (13,))#candidate|130|(13,)|var|float32
call_128 = func_127_call(var_129,var_130,)
output = call_128
func_131 = relay.Function([var_129,var_130,], output)
mutated_mod['func_131'] = func_131
mutated_mod = relay.transform.InferType()(mutated_mod)
const_133 = relay.const([[[9.194183,-8.835920,8.044683,-3.501067],[2.241603,0.187237,-2.651597,7.851321],[1.565145,7.295262,-2.247326,-4.302150],[-6.254637,8.366915,-5.864433,-5.591921],[8.500811,-4.437218,8.153145,-7.000453],[8.886535,-1.925460,-5.048118,-7.039836],[-9.805357,1.109522,3.024270,-4.434157]],[[2.687207,-5.915842,2.866457,1.109363],[9.615785,9.428133,-7.152318,-5.217266],[5.389934,-6.155787,-3.752593,4.578008],[-0.726174,0.172950,-3.803943,-5.147825],[7.346958,1.011742,3.573287,-6.624249],[-3.322587,7.393656,0.511414,8.973883],[-2.039906,-2.853577,-9.499176,-9.963047]],[[5.143313,-2.708429,7.223333,8.974766],[2.155539,7.400965,-1.414262,2.076311],[9.765739,2.539622,-5.209529,8.497277],[-6.000487,-3.653534,6.084653,-7.611576],[-5.337476,3.552503,6.601886,3.487643],[2.237645,4.237772,-4.245658,1.000718],[5.391762,-9.668116,8.719163,5.957596]]], dtype = "float32")#candidate|133|(3, 7, 4)|const|float32
uop_134 = relay.atanh(const_133.astype('float32')) # shape=(3, 7, 4)
var_136 = relay.var("var_136", dtype = "float32", shape = (3, 7, 4))#candidate|136|(3, 7, 4)|var|float32
bop_137 = relay.bitwise_or(const_133.astype('uint8'), relay.reshape(var_136.astype('uint8'), relay.shape_of(const_133))) # shape=(3, 7, 4)
uop_140 = relay.exp(const_133.astype('float64')) # shape=(3, 7, 4)
output = relay.Tuple([uop_134,bop_137,uop_140,])
output2 = relay.Tuple([uop_134,bop_137,uop_140,])
func_142 = relay.Function([var_136,], output)
mod['func_142'] = func_142
mod = relay.transform.InferType()(mod)
var_143 = relay.var("var_143", dtype = "float32", shape = (3, 7, 4))#candidate|143|(3, 7, 4)|var|float32
output = func_142(var_143)
func_144 = relay.Function([var_143], output)
mutated_mod['func_144'] = func_144
mutated_mod = relay.transform.InferType()(mutated_mod)
var_146 = relay.var("var_146", dtype = "uint16", shape = (12, 13, 6))#candidate|146|(12, 13, 6)|var|uint16
var_147 = relay.var("var_147", dtype = "uint16", shape = (12, 13, 6))#candidate|147|(12, 13, 6)|var|uint16
bop_148 = relay.less(var_146.astype('bool'), relay.reshape(var_147.astype('bool'), relay.shape_of(var_146))) # shape=(12, 13, 6)
uop_151 = relay.cos(var_146.astype('float32')) # shape=(12, 13, 6)
var_153 = relay.var("var_153", dtype = "float32", shape = (12, 13, 6))#candidate|153|(12, 13, 6)|var|float32
bop_154 = relay.left_shift(uop_151.astype('uint8'), relay.reshape(var_153.astype('uint8'), relay.shape_of(uop_151))) # shape=(12, 13, 6)
uop_157 = relay.tan(bop_148.astype('float64')) # shape=(12, 13, 6)
bop_159 = relay.minimum(uop_151.astype('int8'), relay.reshape(var_147.astype('int8'), relay.shape_of(uop_151))) # shape=(12, 13, 6)
bop_162 = relay.maximum(var_147.astype('float32'), relay.reshape(bop_159.astype('float32'), relay.shape_of(var_147))) # shape=(12, 13, 6)
uop_165 = relay.tan(uop_151.astype('float64')) # shape=(12, 13, 6)
bop_167 = relay.floor_mod(uop_165.astype('float64'), relay.reshape(bop_162.astype('float64'), relay.shape_of(uop_165))) # shape=(12, 13, 6)
var_170 = relay.var("var_170", dtype = "float64", shape = (12, 13, 6))#candidate|170|(12, 13, 6)|var|float64
bop_171 = relay.minimum(bop_167.astype('uint32'), relay.reshape(var_170.astype('uint32'), relay.shape_of(bop_167))) # shape=(12, 13, 6)
func_18_call = mod.get_global_var('func_18')
func_21_call = mutated_mod.get_global_var('func_21')
var_175 = relay.var("var_175", dtype = "float32", shape = (8,))#candidate|175|(8,)|var|float32
call_174 = relay.TupleGetItem(func_18_call(relay.reshape(var_175.astype('float32'), [1, 8, 1])), 1)
call_176 = relay.TupleGetItem(func_21_call(relay.reshape(var_175.astype('float32'), [1, 8, 1])), 1)
bop_177 = relay.less_equal(bop_154.astype('bool'), relay.reshape(var_170.astype('bool'), relay.shape_of(bop_154))) # shape=(12, 13, 6)
var_180 = relay.var("var_180", dtype = "float64", shape = (12, 13, 6))#candidate|180|(12, 13, 6)|var|float64
bop_181 = relay.greater_equal(bop_167.astype('bool'), relay.reshape(var_180.astype('bool'), relay.shape_of(bop_167))) # shape=(12, 13, 6)
uop_184 = relay.sinh(uop_165.astype('float64')) # shape=(12, 13, 6)
uop_186 = relay.acos(bop_171.astype('float32')) # shape=(12, 13, 6)
uop_188 = relay.atanh(uop_165.astype('float32')) # shape=(12, 13, 6)
bop_190 = relay.not_equal(bop_167.astype('bool'), relay.reshape(var_153.astype('bool'), relay.shape_of(bop_167))) # shape=(12, 13, 6)
bop_193 = relay.floor_divide(var_170.astype('float64'), relay.reshape(uop_165.astype('float64'), relay.shape_of(var_170))) # shape=(12, 13, 6)
uop_196 = relay.atan(uop_186.astype('float64')) # shape=(12, 13, 6)
bop_198 = relay.less_equal(bop_159.astype('bool'), relay.reshape(bop_171.astype('bool'), relay.shape_of(bop_159))) # shape=(12, 13, 6)
uop_201 = relay.rsqrt(uop_188.astype('float32')) # shape=(12, 13, 6)
bop_203 = relay.greater_equal(uop_186.astype('bool'), relay.reshape(bop_181.astype('bool'), relay.shape_of(uop_186))) # shape=(12, 13, 6)
uop_206 = relay.sin(uop_188.astype('float32')) # shape=(12, 13, 6)
bop_208 = relay.logical_xor(uop_196.astype('int32'), relay.reshape(uop_186.astype('int32'), relay.shape_of(uop_196))) # shape=(12, 13, 6)
uop_211 = relay.rsqrt(uop_157.astype('float64')) # shape=(12, 13, 6)
uop_213 = relay.atanh(uop_188.astype('float64')) # shape=(12, 13, 6)
uop_215 = relay.erf(uop_206.astype('float64')) # shape=(12, 13, 6)
bop_217 = relay.subtract(uop_215.astype('int8'), relay.reshape(bop_162.astype('int8'), relay.shape_of(uop_215))) # shape=(12, 13, 6)
bop_220 = relay.logical_xor(uop_213.astype('uint64'), relay.reshape(var_147.astype('uint64'), relay.shape_of(uop_213))) # shape=(12, 13, 6)
const_223 = relay.const([[[5.379921,1.745305,-5.673404,8.768329,-9.347967,0.346722],[-5.390043,6.151226,1.802942,7.696782,-3.716820,7.827136],[6.950221,2.764626,1.925567,-9.328512,-8.359560,-3.482599],[5.807543,-3.450921,2.508591,3.934406,-0.822924,-8.748171],[-2.443183,8.357236,5.019404,-0.183023,2.608846,3.634202],[2.380887,5.035513,8.401517,-2.152257,1.237848,-9.794345],[-7.028209,5.183487,4.923245,3.886213,8.143561,-8.982654],[0.279187,4.917304,6.487860,5.260673,-4.544623,-4.140414],[0.627055,7.672232,8.821549,5.113616,3.299066,4.500955],[6.081424,5.757951,9.657645,9.980078,-3.613238,9.419259],[4.996639,-9.163707,3.163332,-9.134479,-9.291884,9.401959],[4.910385,7.085729,4.399838,6.534425,1.348259,0.142255],[5.035428,1.465205,6.332060,6.919684,-6.762033,1.849633]],[[-7.796794,-7.602474,7.832649,0.446557,-2.731873,0.715250],[9.130844,-0.680508,6.662421,1.458940,9.190209,0.505258],[1.010372,5.027038,-0.866728,8.633035,-4.077813,9.556431],[9.947800,5.353983,-4.286959,-2.763370,5.266996,-0.193208],[-0.519291,4.076462,5.547721,1.542334,0.546345,-4.981767],[4.392780,2.012428,0.483600,7.788803,4.484099,-7.378895],[8.423199,9.142270,-6.645252,-1.415922,5.595524,-3.414450],[-5.555055,3.611397,-3.531731,0.638736,2.194845,-4.030922],[-7.201871,3.540954,-0.828330,2.023616,-8.911070,-8.498449],[-6.305203,-8.240099,3.369920,-5.402104,-5.190824,4.099433],[4.559269,-4.344228,6.592562,8.113985,-8.027162,3.911548],[7.683425,-5.448056,0.495428,-4.095453,6.504039,8.675756],[5.772299,-7.372750,7.700009,-5.393293,9.731894,9.045220]],[[9.675769,-7.087341,-4.162234,-1.259616,-4.024748,4.271118],[-1.754842,4.475256,-9.943762,-6.761835,8.181278,1.772941],[-5.115854,4.665893,-3.114656,3.496755,-4.733336,7.101780],[6.298942,-0.387106,4.590494,-2.212983,8.836475,2.107631],[-3.631492,2.023295,5.206559,0.630193,-1.991469,0.481584],[1.433791,9.457126,-0.726418,-7.065070,-6.204869,6.386912],[3.545413,4.122230,6.600277,-9.355498,-0.377538,3.717150],[7.779592,-2.122450,-1.712152,-4.805929,-2.493226,6.237096],[3.511469,-5.268345,-5.348579,9.779536,2.162762,-7.761054],[8.036965,7.108385,-9.647756,1.858649,3.410495,7.361288],[7.957086,5.901530,2.743837,-0.117804,9.561318,8.991046],[-3.018027,4.194117,2.553746,0.303876,-8.919563,4.675073],[1.621808,-9.860013,-1.231880,-7.569246,-6.437504,9.460263]],[[-9.467377,-4.890650,-6.962717,3.754130,-1.467699,8.638374],[-5.943787,-4.378362,5.692302,7.489748,8.540926,8.094224],[-6.861025,9.933077,1.452830,-8.667170,2.438353,9.291478],[-4.575558,-7.606122,0.595698,4.794697,-5.432363,1.813203],[5.091033,6.294989,-6.650912,-1.998299,-4.874832,0.428524],[-8.957425,-5.609259,-1.651497,0.848644,-7.293303,2.940426],[7.096939,-9.886856,0.626347,7.479496,-8.310284,7.097086],[4.907889,3.666983,0.318668,-4.394383,6.472709,5.111565],[-7.269823,-9.374467,2.417785,1.840573,-2.520701,-1.812351],[5.178592,-0.164749,-5.650272,-4.453461,9.123846,-0.407186],[7.451666,-3.809333,6.278903,-3.797870,8.013395,-5.004575],[2.310917,9.904629,5.283759,6.064108,-9.011109,5.370658],[3.346566,-1.369592,0.266057,6.021461,1.949403,9.008596]],[[-4.667091,1.371133,9.001045,-9.901464,1.789805,-5.522245],[6.302001,1.941276,-1.554389,7.518564,-8.739322,-0.626891],[-9.509757,-5.154771,-9.487125,-6.855358,-7.005906,-3.949810],[4.052846,-8.799089,-5.407546,-7.512481,-4.040286,8.576722],[-7.874544,-4.441539,1.967435,-3.087492,-9.858840,2.318957],[5.921474,3.039759,6.578429,7.626619,-5.912876,1.382595],[-8.718099,0.202381,3.194807,3.806495,8.036983,7.707874],[2.178444,-0.976808,-8.041911,-2.296943,6.353171,0.691875],[9.403814,6.517249,-4.361888,-1.342732,-2.771177,5.759588],[8.979627,1.924261,-0.333775,6.144752,5.390771,-7.006397],[6.118923,0.333225,-9.279981,-2.700734,2.170374,-9.739565],[-1.867240,-0.254697,-5.239006,3.842514,2.185815,-6.326019],[9.668506,4.899607,0.315652,-6.268517,-3.682252,1.103340]],[[3.096804,-9.177145,6.332813,-6.735066,1.558099,2.908778],[5.712021,1.162179,3.787660,-0.399474,4.236115,9.493898],[2.268012,-0.742922,6.849506,5.935472,6.251938,7.796423],[-1.882078,-2.481739,3.159778,8.600166,-8.677710,7.642018],[-0.073226,-2.756662,4.683051,-4.924424,-3.075455,-5.972493],[-5.688437,-9.402504,6.611371,-0.097089,7.317757,6.915191],[-4.283876,2.456852,-5.538196,0.801588,1.838504,-5.111617],[2.814350,1.749371,3.690610,-3.610297,0.321150,6.330132],[-3.474066,-3.818819,9.996795,-9.049744,-8.041507,-6.403077],[-5.517799,8.163221,-1.703248,-7.480660,-8.363938,2.666819],[2.902285,2.264862,-6.725061,1.935444,9.553032,-5.241007],[-8.786662,-1.903738,5.756754,2.730147,-5.689909,3.400686],[-9.902687,5.721507,1.442758,4.709622,-6.652609,-9.110460]],[[2.818438,1.558929,6.278949,5.462281,0.101059,3.973827],[2.274561,-4.777658,1.235740,-6.242853,-3.911192,6.543356],[-3.040343,-1.327762,4.616789,5.912091,6.422695,9.140082],[-6.126074,-7.873539,9.881030,-3.350981,-0.123683,-1.702856],[-7.403224,9.646769,-5.634125,9.723170,0.298802,9.372580],[-1.504151,-1.544898,-9.374063,-7.720721,-2.738430,-3.233547],[-0.418892,-9.643982,4.493751,3.218575,8.160482,-5.716739],[6.488554,-3.086645,-7.071082,6.667161,-2.231032,-7.562623],[-9.204837,-4.383768,7.911945,-1.523750,1.294854,-9.447928],[2.002317,6.347516,-4.649920,7.584854,3.147538,7.225763],[4.056575,-8.876045,-0.831106,-7.375115,1.484724,6.001550],[5.460778,2.547342,0.774019,-9.853374,7.747446,9.341193],[2.033056,7.470600,8.860633,-9.170497,5.406734,-3.781155]],[[2.760916,-3.425914,3.199570,5.664456,7.556411,-7.154584],[-7.078408,-2.869370,-3.060099,-0.984831,-7.557370,-8.451472],[-8.331069,-8.780083,1.329035,2.766933,-2.529996,0.432285],[4.405186,-7.009996,5.816940,7.769254,8.952681,1.059192],[-1.230485,-9.402974,9.913267,-5.438284,2.522205,-0.160035],[3.405928,-9.419726,6.760210,-2.708833,-9.976752,-4.878387],[5.848226,-9.911293,7.582860,-2.343409,4.610566,-0.454924],[7.305959,-9.955044,4.532973,7.777317,-4.544415,-7.273790],[7.312201,-7.919597,-0.042275,-1.736877,8.642279,-0.725282],[-6.417024,-9.664768,6.851053,6.149730,6.918379,-2.260516],[-6.939428,9.324545,1.582158,-6.412085,-4.813515,-4.225961],[9.785734,-5.219318,3.692882,5.500186,0.244060,7.315808],[-8.823674,1.473698,-6.288038,3.833388,8.685169,4.234334]],[[-5.675885,-5.148857,1.419074,5.738496,0.840358,9.219065],[2.136649,-1.993150,-4.766986,7.296665,-3.398675,-7.035868],[-1.039154,5.383320,-4.691710,-6.819880,3.946314,-9.856874],[-1.710646,3.049450,1.220544,-6.146167,-5.017482,-9.752580],[8.720519,0.168270,-1.988552,-4.978745,5.349459,4.465668],[8.838053,5.224883,-3.954374,6.033765,1.810136,-4.723186],[3.681255,8.416460,0.326453,-4.824035,-2.102598,3.012747],[5.950931,0.986489,9.438624,-6.388177,5.879651,0.763576],[5.982745,-6.136576,-3.196173,-1.160223,8.980555,1.481763],[8.122129,3.714185,0.821230,-2.956277,2.285623,-8.771502],[-1.483767,0.752953,-9.340095,2.533206,4.188446,-8.344954],[-2.264471,7.992068,9.325309,4.977291,-2.466941,-9.035948],[6.891215,-9.513525,-5.230920,3.960479,9.767399,-2.218119]],[[-2.356120,-0.414980,7.700196,7.395806,5.263164,-4.033961],[1.854693,8.550289,-5.647669,5.385009,-0.963416,-8.580403],[-2.157204,-2.413857,-1.724665,6.427405,-0.406224,-2.663493],[5.143827,-9.289076,-6.593867,6.180655,-6.889838,9.890011],[-6.731320,-5.165279,-6.772230,5.674959,-1.598605,9.830605],[5.017664,3.534365,-7.830642,9.353487,4.683002,-1.224988],[-4.143299,2.622780,-9.544611,-7.848344,-7.992292,6.370966],[2.098312,7.058831,-6.604272,9.208697,-0.151819,-6.789445],[-3.382255,-7.109203,3.904429,-0.723453,-8.849438,-7.237438],[-5.083565,3.138794,0.791231,-4.506368,4.076544,-7.005031],[-7.372511,1.670598,4.084286,0.362289,-2.949360,3.167176],[-2.339189,9.409475,-4.748054,0.713880,-5.510315,2.762971],[6.111846,8.767060,8.225662,0.555363,8.237689,-4.509066]],[[-6.769529,-3.620755,0.364900,-6.873173,4.802119,-8.807995],[5.751494,9.587480,-8.295862,6.011904,-3.820533,7.377941],[-5.359675,9.755750,7.205904,-0.506106,5.819938,-9.195845],[5.895009,-8.378772,5.008388,-8.975428,-8.543420,-9.256026],[-6.081385,-1.900620,-3.188244,-4.807780,-4.950780,-3.552895],[-6.203904,6.393385,-0.689070,-2.653506,-7.337011,-1.431538],[-3.779644,-5.795973,-1.543280,5.623372,-8.458014,3.571531],[9.789365,-8.586275,6.718734,-3.371366,4.903096,5.238344],[8.479763,4.722129,-1.028516,6.456560,-8.706003,1.288037],[1.024849,9.863000,3.511695,-9.295853,1.265871,-9.131251],[-4.254830,-8.462332,2.561317,9.870396,0.965434,-6.293191],[-9.846180,-8.171314,-7.775089,-7.721993,8.993827,6.879368],[-7.183398,1.758737,-9.386225,9.494693,-0.785268,0.381987]],[[8.747212,8.646813,6.295755,1.413274,0.342234,6.779993],[4.625350,2.849016,9.137823,1.567986,0.325961,7.424016],[2.797286,-0.756861,-8.121929,0.517456,-4.335000,9.748818],[-0.591885,0.219296,-5.019414,2.205937,-2.248740,-7.539029],[-3.008899,-5.386098,3.441960,6.549917,-4.986359,-6.736007],[4.735804,-4.866280,-2.426138,-6.736352,-3.129773,1.852811],[-2.174516,4.614395,5.259790,-9.117061,4.481178,0.164249],[1.819287,9.371828,-1.137565,-5.899033,8.109015,5.217024],[-9.206638,8.117998,-1.727162,-9.439729,1.543621,9.915006],[0.685194,-6.909838,-8.796622,1.519249,6.987255,5.166412],[4.444748,1.992575,0.820108,-8.964629,-2.692712,-7.265333],[-8.490994,4.918821,-0.796967,1.904882,8.877767,9.643423],[9.113310,6.980919,9.638203,0.508582,-8.223656,-5.714247]]], dtype = "float64")#candidate|223|(12, 13, 6)|const|float64
bop_224 = relay.bitwise_and(uop_215.astype('uint32'), relay.reshape(const_223.astype('uint32'), relay.shape_of(uop_215))) # shape=(12, 13, 6)
bop_227 = relay.minimum(uop_196.astype('uint8'), relay.reshape(var_180.astype('uint8'), relay.shape_of(uop_196))) # shape=(12, 13, 6)
uop_230 = relay.sinh(bop_217.astype('float32')) # shape=(12, 13, 6)
bop_232 = relay.logical_and(bop_224.astype('bool'), relay.reshape(bop_154.astype('bool'), relay.shape_of(bop_224))) # shape=(12, 13, 6)
uop_235 = relay.asin(bop_224.astype('float32')) # shape=(12, 13, 6)
uop_237 = relay.tan(uop_235.astype('float32')) # shape=(12, 13, 6)
uop_239 = relay.sqrt(uop_188.astype('float64')) # shape=(12, 13, 6)
bop_241 = relay.bitwise_and(uop_196.astype('uint8'), relay.reshape(bop_193.astype('uint8'), relay.shape_of(uop_196))) # shape=(12, 13, 6)
bop_244 = relay.logical_and(uop_237.astype('bool'), relay.reshape(bop_203.astype('bool'), relay.shape_of(uop_237))) # shape=(12, 13, 6)
const_247 = relay.const([[[True,False,True,True,False,True],[False,True,True,True,True,True],[True,True,False,False,True,False],[False,True,True,False,True,True],[False,False,True,True,True,False],[False,False,False,True,False,False],[False,False,True,False,True,False],[True,False,True,True,False,True],[True,False,False,False,False,True],[True,False,False,False,False,True],[False,False,False,True,True,False],[True,False,False,True,False,True],[True,True,True,True,False,False]],[[False,True,False,False,True,True],[True,False,True,True,True,True],[True,True,True,True,False,True],[True,False,True,True,True,True],[False,False,False,True,True,False],[True,True,True,False,True,False],[True,True,False,False,False,True],[False,True,True,True,False,True],[False,True,True,True,False,False],[False,False,True,False,False,False],[False,True,False,True,True,True],[True,False,False,False,True,True],[True,True,False,False,False,True]],[[False,True,False,True,False,True],[False,True,True,True,True,True],[True,False,True,True,True,False],[True,True,True,True,True,False],[False,False,True,True,True,True],[False,True,False,False,False,True],[True,False,False,True,True,True],[False,True,True,True,False,True],[False,True,False,True,True,True],[True,True,True,False,False,False],[True,False,True,False,True,False],[True,False,False,True,True,False],[False,False,True,False,True,True]],[[True,True,True,True,False,False],[False,True,True,True,True,False],[False,True,False,True,True,True],[True,False,False,False,True,True],[False,True,True,True,True,True],[False,False,False,True,True,True],[True,True,False,True,True,False],[True,True,True,True,False,False],[True,False,False,True,False,True],[False,False,False,False,True,False],[True,True,False,True,True,False],[False,False,True,True,True,False],[True,False,True,False,False,False]],[[False,True,False,False,False,False],[True,False,False,True,False,True],[True,True,False,False,True,True],[False,True,False,True,False,True],[False,True,False,True,True,False],[True,True,True,True,True,True],[True,False,True,True,False,False],[False,True,True,True,True,False],[False,True,False,False,True,False],[False,True,False,False,False,True],[False,False,True,True,True,False],[False,True,True,True,False,True],[True,True,False,True,False,False]],[[True,False,True,True,True,False],[False,True,True,False,True,False],[True,True,False,False,False,True],[True,False,False,False,True,True],[True,True,False,True,False,False],[True,True,False,True,True,True],[True,True,False,True,True,True],[True,False,False,True,True,False],[False,False,False,True,False,False],[False,True,True,False,False,True],[False,False,False,False,True,True],[False,False,False,False,True,True],[False,False,False,False,True,True]],[[True,False,True,True,True,True],[True,True,False,False,True,False],[True,True,False,False,True,True],[True,True,False,False,False,True],[True,False,False,True,False,True],[False,True,True,True,True,False],[False,False,True,False,True,False],[True,False,True,True,False,True],[True,False,False,True,False,False],[False,True,False,False,True,True],[False,True,False,True,True,True],[False,True,False,True,False,True],[False,True,True,True,False,False]],[[False,True,False,True,False,False],[True,True,True,False,True,False],[True,True,False,True,True,True],[True,True,False,True,False,False],[False,False,True,True,False,False],[True,False,True,True,True,False],[True,True,True,True,True,False],[True,False,False,True,True,True],[False,False,False,True,True,False],[True,True,True,True,True,True],[True,False,True,False,False,True],[False,True,False,True,False,True],[False,False,True,False,True,False]],[[True,False,True,True,True,False],[True,False,False,False,True,True],[True,False,True,True,True,True],[False,True,True,False,True,True],[True,True,True,False,True,True],[False,False,True,True,True,False],[False,False,False,False,True,False],[True,False,False,False,True,True],[False,True,True,True,True,False],[False,False,True,False,False,False],[True,True,False,False,False,True],[False,False,True,False,False,False],[False,True,True,True,False,False]],[[False,False,False,True,True,True],[True,True,False,False,True,False],[False,False,True,False,False,False],[True,False,False,True,True,True],[True,True,False,False,False,False],[True,True,False,True,False,True],[False,False,True,False,False,False],[True,True,True,False,True,True],[False,True,False,True,False,True],[False,True,False,False,False,True],[True,True,False,True,False,False],[True,False,False,False,True,True],[False,False,False,True,False,True]],[[True,True,False,True,False,False],[False,False,False,False,False,False],[True,True,True,True,True,True],[False,False,True,False,False,False],[True,False,False,True,False,True],[True,True,False,True,False,False],[False,False,False,False,False,False],[False,False,False,True,True,True],[False,True,True,True,False,True],[False,True,True,False,True,True],[True,False,False,True,True,False],[True,True,False,True,True,True],[False,True,True,False,False,False]],[[True,False,False,False,False,False],[True,False,True,False,False,False],[False,False,False,False,True,False],[True,True,True,True,False,True],[False,False,False,True,False,True],[False,True,True,False,True,True],[False,False,True,True,True,False],[False,True,False,False,True,True],[False,False,False,False,False,True],[True,False,True,True,False,False],[False,False,True,False,False,True],[True,False,True,True,True,False],[True,True,True,True,False,True]]], dtype = "bool")#candidate|247|(12, 13, 6)|const|bool
bop_248 = relay.floor_mod(bop_244.astype('float32'), relay.reshape(const_247.astype('float32'), relay.shape_of(bop_244))) # shape=(12, 13, 6)
const_251 = relay.const([[[True,False,True,True,False,True],[True,False,True,True,False,False],[True,False,True,False,True,False],[True,True,True,False,True,False],[False,True,False,True,False,True],[True,True,True,True,False,True],[False,False,True,True,True,True],[True,False,True,True,False,True],[True,True,False,False,True,True],[True,False,False,True,True,False],[False,True,False,False,False,False],[True,False,False,True,False,False],[False,True,False,False,False,True]],[[True,True,False,True,False,False],[False,True,False,False,False,True],[True,False,False,True,False,False],[True,False,True,False,True,True],[False,True,False,False,True,True],[True,False,False,False,True,False],[False,True,True,False,False,True],[True,True,False,False,False,False],[False,True,False,True,True,True],[False,True,True,True,False,False],[False,True,True,False,True,False],[True,True,False,False,True,False],[False,True,True,False,True,True]],[[False,True,False,True,True,False],[False,True,True,True,False,True],[False,False,True,True,True,False],[True,False,False,True,False,True],[True,False,False,False,False,True],[True,True,True,False,False,False],[False,False,True,True,False,False],[True,False,False,False,True,True],[False,False,True,False,False,False],[False,True,False,False,False,True],[False,True,False,True,True,False],[True,True,False,False,True,False],[False,False,False,True,False,True]],[[False,False,False,False,True,False],[False,True,True,False,True,True],[True,True,True,True,False,False],[True,True,False,False,False,True],[False,False,True,True,True,True],[False,False,True,False,False,False],[False,False,True,False,False,True],[True,False,False,False,True,True],[True,True,False,True,True,False],[False,True,True,True,False,False],[False,True,False,True,True,False],[False,False,False,True,False,True],[False,True,True,True,False,False]],[[False,True,True,False,False,False],[True,False,False,False,True,False],[False,True,True,True,False,True],[True,False,True,False,False,True],[True,False,False,False,True,False],[False,True,True,False,False,True],[False,True,True,False,True,False],[True,True,True,False,False,False],[True,False,False,False,False,False],[True,True,True,False,True,False],[False,True,False,False,True,False],[True,False,True,True,False,False],[True,True,True,True,False,False]],[[True,True,False,True,False,False],[False,True,True,True,True,False],[True,False,True,True,False,True],[True,True,True,False,False,True],[False,False,True,False,True,True],[False,False,False,False,True,False],[False,True,False,True,False,True],[True,False,True,False,True,True],[True,True,True,False,True,True],[False,False,True,True,False,False],[False,False,False,False,False,False],[True,False,True,True,True,False],[False,False,False,False,False,True]],[[True,False,False,False,False,False],[False,False,False,True,True,False],[False,True,False,False,False,False],[False,True,False,False,False,True],[False,False,True,False,False,True],[True,False,True,False,False,False],[False,False,False,False,False,False],[False,False,True,False,False,True],[False,True,False,False,True,False],[True,True,True,False,True,True],[True,False,True,True,False,False],[True,False,False,True,False,False],[True,False,False,True,False,True]],[[False,False,False,True,False,True],[True,True,False,False,True,True],[False,True,True,True,False,False],[True,True,False,False,False,True],[False,False,True,True,True,False],[False,True,False,False,False,True],[True,False,False,True,False,False],[False,False,True,True,False,True],[True,True,False,False,True,False],[True,False,False,False,True,True],[False,True,True,True,True,True],[False,False,True,False,True,False],[False,True,False,True,False,False]],[[False,False,False,False,False,True],[True,True,True,True,True,False],[True,False,True,False,True,False],[True,True,False,True,True,True],[True,False,False,True,True,True],[False,False,True,False,False,True],[True,True,False,True,True,True],[True,False,True,True,False,False],[True,True,True,False,False,True],[True,True,True,False,True,False],[True,True,False,False,True,True],[True,False,False,True,True,True],[False,True,True,False,False,True]],[[False,True,True,False,True,True],[True,True,True,False,True,False],[False,False,True,True,False,False],[False,True,False,False,False,False],[False,False,True,True,False,True],[True,True,False,False,True,False],[True,False,True,False,False,False],[False,False,False,True,True,False],[True,True,True,False,False,True],[False,False,True,True,True,False],[False,False,True,False,False,False],[False,False,False,True,False,False],[True,True,False,True,False,False]],[[True,False,True,False,False,True],[True,False,True,True,True,True],[True,True,True,False,True,False],[False,False,False,False,True,False],[False,True,True,False,False,False],[False,False,False,False,False,False],[True,False,False,True,True,True],[False,False,False,True,False,True],[True,False,True,True,False,True],[False,False,False,True,False,False],[True,True,False,True,True,True],[True,False,True,True,True,False],[False,True,False,False,True,False]],[[False,False,False,True,False,False],[False,False,False,False,True,False],[True,True,True,True,False,False],[False,False,True,True,True,False],[True,False,False,True,False,True],[True,False,True,True,False,True],[True,False,True,True,True,True],[False,False,False,True,True,False],[False,False,False,True,True,False],[True,True,False,True,False,False],[False,False,True,False,True,True],[True,True,True,True,False,False],[False,False,False,False,False,False]]], dtype = "bool")#candidate|251|(12, 13, 6)|const|bool
bop_252 = relay.power(bop_244.astype('float32'), relay.reshape(const_251.astype('float32'), relay.shape_of(bop_244))) # shape=(12, 13, 6)
func_18_call = mod.get_global_var('func_18')
func_21_call = mutated_mod.get_global_var('func_21')
call_255 = relay.TupleGetItem(func_18_call(relay.reshape(call_174.astype('float32'), [1, 8, 1])), 0)
call_256 = relay.TupleGetItem(func_21_call(relay.reshape(call_174.astype('float32'), [1, 8, 1])), 0)
uop_257 = relay.sqrt(bop_224.astype('float32')) # shape=(12, 13, 6)
uop_259 = relay.atanh(bop_252.astype('float32')) # shape=(12, 13, 6)
bop_261 = relay.greater(uop_257.astype('bool'), relay.reshape(bop_162.astype('bool'), relay.shape_of(uop_257))) # shape=(12, 13, 6)
const_264 = relay.const([[[8.987235,-6.471512,4.311372,3.172289,-5.093287,2.805225],[2.941619,4.056539,-1.478360,-7.483878,-4.581361,1.583065],[0.102442,3.912551,1.422011,-6.779108,0.543112,9.125668],[8.357693,3.014145,-3.637068,3.873733,4.991167,-1.049027],[5.834446,-6.703416,8.124283,6.567349,6.276709,-2.709768],[5.665847,6.321843,9.984443,-7.275598,2.163425,-3.437427],[-5.709840,3.423407,0.601796,-1.950118,2.377478,-3.689399],[-4.531089,5.320056,6.225599,-3.249031,-9.235067,6.589249],[-1.088822,-6.088946,4.966773,8.422987,-6.457448,2.133810],[-9.997907,-0.391605,-6.436756,-6.666321,-4.213597,4.769993],[7.496833,8.384678,3.496498,5.930452,-7.127887,-9.581234],[4.545384,2.754473,-5.550353,4.150137,-6.386833,-7.777362],[-5.137396,0.341271,-6.591015,-0.374560,-6.496663,3.265768]],[[-7.293699,-7.340224,-3.086169,4.519725,-3.806551,-4.023680],[3.105736,-5.351355,2.872539,5.792266,6.081296,2.455917],[8.315619,-9.568491,7.955961,9.742509,-8.042723,-8.093663],[-7.104419,-4.347330,-2.786728,-0.179200,-8.534263,-0.242179],[9.621912,-0.256495,-7.595516,8.305061,3.583548,-3.679163],[4.295078,4.376510,8.328906,0.877088,2.943259,-6.428384],[-5.545323,4.087904,3.961395,-7.415324,0.141282,-9.772372],[-8.387524,4.397530,4.287118,-5.012769,-9.292382,-1.741737],[3.781287,0.997068,-2.149541,4.197721,-3.848627,3.578483],[-5.162567,8.242023,-6.009428,1.337699,8.699305,6.756026],[-8.319612,0.344518,6.237690,-5.042369,8.947768,7.381400],[-5.953943,-6.147230,1.442593,-6.353838,-1.737861,-6.406430],[5.070957,9.412864,-6.788781,0.935319,8.066792,5.272932]],[[9.999967,2.574073,-6.988938,-4.812553,5.881964,2.354128],[-5.550457,-6.734082,4.576784,-9.951555,5.895047,5.003481],[-8.069657,-3.412707,-4.574534,-9.733589,-2.932300,-2.396629],[-6.212260,9.914904,-5.254797,-8.421421,-1.452763,0.051870],[0.946606,8.047432,2.791461,6.224935,0.196457,2.770461],[3.781799,8.984509,-4.384159,-4.262497,-9.738524,-1.943171],[9.753401,-1.322114,-1.089799,6.199385,8.345262,-5.049551],[-9.687183,-0.900768,5.481868,3.488750,5.316154,-0.428894],[-3.351472,-0.569596,-2.227165,9.257588,4.841918,-8.234994],[4.655673,-6.754089,-9.996947,-7.803767,-1.420434,-7.457961],[-2.353428,-6.258095,2.946147,5.727322,-1.814721,-3.837553],[5.527157,-0.126460,0.336018,-8.366650,-8.717795,9.744292],[2.098133,3.345845,-4.593417,9.517281,4.703137,-7.681056]],[[6.971166,0.948109,4.316879,-0.124287,2.274539,-2.506268],[6.414166,-3.173473,7.944324,-0.352546,2.449574,-2.893669],[-2.411364,-7.362433,2.447637,-4.006924,3.847617,-5.966896],[5.652112,8.491052,8.225121,-1.273382,-5.134163,7.174625],[-4.229055,-4.169306,7.335287,-6.704425,-3.883896,-6.750553],[8.603656,-6.650227,-4.914270,-8.631394,-8.361385,-4.410126],[0.527138,-0.885523,1.596009,9.394729,-3.182660,7.620397],[-6.315129,6.774079,2.430326,-0.119639,-5.519082,6.528316],[-9.548592,-1.563876,1.707731,-1.814691,4.052211,-5.410244],[-3.530515,5.466533,0.853717,3.038466,-4.809955,-9.353984],[-3.635547,-0.007811,-8.001050,0.267396,5.258237,4.599174],[-1.972325,7.870962,-9.270678,7.515138,0.331847,7.218672],[4.501449,-1.001653,0.006410,5.567062,-3.187698,-6.420559]],[[4.543126,0.263428,-8.900564,8.826632,-7.492102,-1.306586],[-5.516329,-4.511291,-8.560605,-3.381847,-4.123133,5.325178],[-4.381945,3.199496,4.025720,6.891006,7.717029,7.444385],[1.364116,-6.711351,-7.616318,-8.984179,-4.453871,-5.045878],[2.936490,2.938019,-2.791448,1.937803,6.129871,2.398794],[9.902751,-3.971547,0.170071,-6.571034,-4.408057,-5.914274],[6.113307,-0.825774,3.144595,7.789491,5.727023,-4.868752],[1.313589,-0.762878,-0.810207,3.614860,-0.922263,-3.637500],[-2.381289,-8.801102,-2.402791,7.538382,-4.327077,1.579077],[-9.536042,-1.373325,9.431605,0.938366,-4.128584,-7.232603],[1.013046,-0.037126,2.987584,7.779265,7.279116,-8.520208],[3.294878,-2.303458,4.478535,1.680134,-6.166474,-4.859710],[6.627884,-3.998229,2.322640,-3.015248,5.762291,4.938169]],[[-6.594266,-8.035526,-7.998491,9.425335,-3.918022,0.718587],[7.065209,2.313480,-3.855492,-9.196580,-5.459136,-6.884849],[5.598120,-4.770513,4.872355,9.377402,7.589272,-3.708355],[-4.723571,4.943941,3.637001,1.036954,5.454894,-7.917688],[-2.595204,9.918189,0.651125,-1.669934,3.563372,9.061094],[-9.450994,-2.533554,-9.423505,-2.330090,-7.379977,0.456447],[-2.067600,-3.872428,-0.923790,-9.889814,8.897725,7.659924],[8.420173,1.687839,-7.378414,9.000156,9.401941,-4.661232],[-8.574891,1.198092,-0.286202,-6.444461,4.804349,2.612289],[0.292423,-5.069008,1.640289,-6.763295,4.491232,2.825974],[-7.656319,8.938362,-0.620554,-3.139808,-7.306211,1.227170],[-5.871237,9.549813,3.982663,8.242268,-8.327496,8.788256],[0.466234,-6.135062,-5.281495,9.160618,5.142661,-6.843824]],[[-7.820516,-6.321933,-7.662755,-0.637756,-9.427400,-4.404047],[-2.397594,-6.515744,8.007483,-6.876739,7.560247,-4.208188],[7.053369,0.031989,-7.244295,-1.817888,-9.873580,7.532861],[0.069929,5.651823,1.241218,7.556061,-9.325150,2.577976],[1.240552,-1.431871,-1.721772,-0.330839,-5.660608,-0.237425],[-8.521959,-6.532759,-3.252515,5.404307,3.928779,7.525364],[0.273291,-9.477739,-3.348027,3.365928,2.829922,0.721233],[-4.867175,7.812130,3.649857,4.390011,2.850800,-3.176354],[6.085999,7.576957,-3.250885,-3.863292,3.411584,4.515699],[-2.416903,2.201121,1.543330,7.130180,6.524318,-3.949740],[8.712569,-3.211172,9.304563,-9.616547,-6.387526,2.989652],[-0.770831,-9.641104,-7.927720,5.211567,0.337121,4.826612],[1.421286,-9.423213,6.916247,6.489836,4.025073,8.488667]],[[-9.720936,2.537067,3.121891,-9.873716,-7.614459,7.864562],[-1.055347,7.376166,-8.042507,-4.366738,-5.401312,-4.797461],[-6.084101,-7.270893,9.679119,-2.248419,8.656681,-3.133767],[1.769639,-5.862945,-3.144809,-9.640074,-5.722527,-3.403096],[-7.051363,4.186223,3.369834,4.410545,7.525691,0.808375],[9.812120,0.893423,-9.993808,-6.075934,-3.522122,0.407500],[-4.171615,7.863546,-5.828393,8.207984,1.494124,8.068198],[-0.213270,-2.694249,-1.340416,-2.502311,4.160086,-9.188636],[-8.092959,1.652353,8.752660,0.703405,9.603240,-2.478695],[-6.622992,-6.548507,-8.356399,-9.959664,-2.889758,5.824408],[6.518949,5.477770,8.925293,-3.954246,-2.885126,-7.720548],[-2.784907,3.140021,-2.637194,4.605584,-4.211021,-9.158768],[5.856761,6.372187,7.306307,-3.045465,0.671449,-1.261976]],[[2.241142,-1.442829,-6.132095,2.454917,-7.418384,-4.868033],[0.458203,0.608725,-6.718957,-0.131026,-5.012386,2.353954],[-9.373297,-6.521295,6.418107,-9.801541,7.184119,-8.777828],[7.720167,4.487515,1.484784,6.233668,9.926273,-1.384401],[-9.908873,-3.480842,-2.576402,5.893320,1.039669,-4.006698],[-8.442031,-6.795614,7.012845,8.906897,-5.286062,-3.834187],[8.880174,-6.462392,-8.400743,-6.431560,-6.185496,-6.633276],[-4.090833,0.673688,4.589378,7.418497,4.066355,-5.428597],[-7.190600,8.911877,-1.287333,-3.212288,4.326084,-9.276460],[6.967294,8.200545,7.529344,7.791725,7.652911,-4.905640],[-5.327458,-6.358912,3.504292,5.034275,-5.984903,-5.472888],[-0.848340,-4.830076,-2.705235,-8.525053,1.058726,1.671252],[0.429716,4.665493,8.666646,2.154576,7.580202,5.118492]],[[-0.760703,-2.932461,-3.870049,7.690787,-7.478515,-3.522598],[7.884666,-8.671394,-5.646237,8.013508,-1.661647,-1.733451],[-7.202699,-4.958089,0.992607,-6.296135,-7.379009,8.160851],[-0.879090,5.132395,-4.317516,2.714601,-7.547016,3.080100],[7.730535,-1.589598,3.345070,0.546015,7.766414,6.594481],[-6.517595,-8.246788,-5.914173,9.566383,6.252198,9.555206],[-8.850007,9.757006,7.444153,-6.869936,1.978339,-2.904184],[5.638123,9.726949,2.654011,-6.748243,-1.936055,-9.699869],[-7.616777,7.792873,7.859974,3.488382,7.867047,-3.398796],[7.469720,5.245654,-5.648696,4.846903,-9.520858,-2.944883],[5.380876,8.837258,0.325252,0.944497,0.197321,6.819527],[5.358096,-9.177466,1.546130,6.331375,1.637748,-1.050895],[3.947304,-2.964534,-7.531374,1.017265,3.283578,9.426407]],[[6.087711,-1.207239,-6.976971,0.942023,-8.248531,-2.842726],[-3.997387,4.978323,2.676261,3.591191,1.692645,-5.425771],[-4.937129,-2.952742,-5.552550,4.970774,-3.082930,-4.122401],[5.041716,-4.053759,4.671415,-5.326054,1.873694,-9.757361],[1.603891,2.991062,8.471141,-1.117062,9.661334,1.595732],[-5.587351,0.528855,-2.481111,5.445272,0.812506,3.193781],[2.176100,7.020275,1.847718,8.275574,4.204392,-4.474132],[-0.811773,6.031283,7.784324,9.298941,3.769761,-9.058078],[-7.977249,9.027909,0.259165,-1.354712,-9.745120,5.674967],[5.272142,-2.440851,0.386586,7.316519,2.935689,-1.334234],[6.434789,0.052113,-7.703682,-1.247352,0.300135,5.052413],[5.862282,3.858409,8.793452,5.318837,1.143955,3.261207],[-6.507923,-3.525295,9.693204,-4.873587,-9.333498,7.171621]],[[2.677852,2.476485,-8.911514,-3.704862,4.320443,0.797991],[-6.138058,7.429283,9.997307,3.889694,-4.040574,2.406104],[-4.470006,-2.002495,2.573905,1.750191,-9.529399,-9.395708],[2.126243,-6.446090,-9.446417,7.979607,-7.023178,5.295676],[-6.399112,-8.661136,-0.626623,-8.356106,0.984229,-2.369659],[6.115655,-2.528758,-9.105630,-1.752514,9.658259,-1.064752],[-9.911804,-4.959912,2.019489,-1.572382,-3.828044,-4.509164],[7.258315,8.242880,7.294520,1.420909,-7.949026,-4.257932],[-1.000354,-6.246222,5.352876,-8.797386,2.772924,8.344213],[-8.881881,-7.323496,-2.573270,3.551288,3.932092,-7.511299],[-2.038729,6.164748,7.554912,-1.590285,-6.747578,9.353036],[1.472877,-3.918298,7.246596,6.425989,1.842405,-6.802580],[-5.342762,2.412015,8.749140,2.935520,-9.619280,-5.865470]]], dtype = "float32")#candidate|264|(12, 13, 6)|const|float32
bop_265 = relay.less(uop_259.astype('bool'), relay.reshape(const_264.astype('bool'), relay.shape_of(uop_259))) # shape=(12, 13, 6)
func_127_call = mod.get_global_var('func_127')
func_131_call = mutated_mod.get_global_var('func_131')
const_269 = relay.const(-4.128972, dtype = "float64")#candidate|269|()|const|float64
const_270 = relay.const([6.950481,-8.855306,-3.869379,-0.002842,4.146064,8.285142,6.021208,8.523574,-9.140551,-5.895587,7.318857,-8.879095,3.345279], dtype = "float32")#candidate|270|(13,)|const|float32
call_268 = relay.TupleGetItem(func_127_call(relay.reshape(const_269.astype('float64'), []), relay.reshape(const_270.astype('float32'), [13,]), ), 0)
call_271 = relay.TupleGetItem(func_131_call(relay.reshape(const_269.astype('float64'), []), relay.reshape(const_270.astype('float32'), [13,]), ), 0)
uop_272 = relay.acosh(bop_265.astype('float32')) # shape=(12, 13, 6)
uop_274 = relay.sin(uop_272.astype('float64')) # shape=(12, 13, 6)
var_276 = relay.var("var_276", dtype = "float64", shape = (12, 13, 6))#candidate|276|(12, 13, 6)|var|float64
bop_277 = relay.maximum(uop_274.astype('uint32'), relay.reshape(var_276.astype('uint32'), relay.shape_of(uop_274))) # shape=(12, 13, 6)
uop_280 = relay.erf(uop_237.astype('float32')) # shape=(12, 13, 6)
func_18_call = mod.get_global_var('func_18')
func_21_call = mutated_mod.get_global_var('func_21')
call_282 = relay.TupleGetItem(func_18_call(relay.reshape(call_174.astype('float32'), [1, 8, 1])), 0)
call_283 = relay.TupleGetItem(func_21_call(relay.reshape(call_174.astype('float32'), [1, 8, 1])), 0)
uop_284 = relay.cos(uop_274.astype('float32')) # shape=(12, 13, 6)
var_286 = relay.var("var_286", dtype = "float32", shape = (12, 13, 6))#candidate|286|(12, 13, 6)|var|float32
bop_287 = relay.greater(uop_284.astype('bool'), relay.reshape(var_286.astype('bool'), relay.shape_of(uop_284))) # shape=(12, 13, 6)
func_107_call = mod.get_global_var('func_107')
func_113_call = mutated_mod.get_global_var('func_113')
var_291 = relay.var("var_291", dtype = "float64", shape = (2340,))#candidate|291|(2340,)|var|float64
call_290 = relay.TupleGetItem(func_107_call(relay.reshape(var_291.astype('float64'), [13, 12, 15]), relay.reshape(call_282.astype('float32'), [1, 8]), relay.reshape(var_291.astype('float64'), [13, 12, 15]), relay.reshape(var_291.astype('float64'), [13, 12, 15]), ), 1)
call_292 = relay.TupleGetItem(func_113_call(relay.reshape(var_291.astype('float64'), [13, 12, 15]), relay.reshape(call_282.astype('float32'), [1, 8]), relay.reshape(var_291.astype('float64'), [13, 12, 15]), relay.reshape(var_291.astype('float64'), [13, 12, 15]), ), 1)
bop_293 = relay.greater(bop_265.astype('bool'), relay.reshape(bop_203.astype('bool'), relay.shape_of(bop_265))) # shape=(12, 13, 6)
bop_296 = relay.subtract(uop_284.astype('int32'), relay.reshape(bop_177.astype('int32'), relay.shape_of(uop_284))) # shape=(12, 13, 6)
uop_299 = relay.tan(bop_277.astype('float32')) # shape=(12, 13, 6)
bop_301 = relay.not_equal(bop_287.astype('bool'), relay.reshape(bop_241.astype('bool'), relay.shape_of(bop_287))) # shape=(12, 13, 6)
uop_304 = relay.sqrt(uop_274.astype('float32')) # shape=(12, 13, 6)
bop_306 = relay.logical_and(uop_284.astype('bool'), relay.reshape(uop_239.astype('bool'), relay.shape_of(uop_284))) # shape=(12, 13, 6)
bop_309 = relay.subtract(bop_252.astype('uint32'), relay.reshape(bop_154.astype('uint32'), relay.shape_of(bop_252))) # shape=(12, 13, 6)
bop_312 = relay.subtract(uop_259.astype('int16'), relay.reshape(uop_157.astype('int16'), relay.shape_of(uop_259))) # shape=(12, 13, 6)
uop_315 = relay.sin(uop_259.astype('float32')) # shape=(12, 13, 6)
output = relay.Tuple([call_174,var_175,uop_184,bop_190,bop_198,uop_201,bop_208,uop_211,bop_220,bop_227,uop_230,bop_232,bop_248,call_255,bop_261,call_268,const_269,const_270,uop_280,call_282,call_290,var_291,bop_293,bop_296,uop_299,bop_301,uop_304,bop_306,bop_309,bop_312,uop_315,])
output2 = relay.Tuple([call_176,var_175,uop_184,bop_190,bop_198,uop_201,bop_208,uop_211,bop_220,bop_227,uop_230,bop_232,bop_248,call_256,bop_261,call_271,const_269,const_270,uop_280,call_283,call_292,var_291,bop_293,bop_296,uop_299,bop_301,uop_304,bop_306,bop_309,bop_312,uop_315,])
F = relay.Function([var_146,var_147,var_153,var_170,var_175,var_180,var_276,var_286,var_291,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_146,var_147,var_153,var_170,var_175,var_180,var_276,var_286,var_291,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_146= np.array([[[8,8,5,8,10,-8],[-3,10,-8,9,-9,3],[4,4,1,8,3,9],[-7,-8,1,9,-8,3],[-3,-7,1,-2,-9,-4],[8,10,-7,9,-5,8],[-4,1,-6,-7,9,3],[1,-4,10,1,-10,-9],[-9,1,-5,4,-6,1],[-9,2,10,7,-9,-6],[-9,-6,7,5,4,-3],[-5,-10,2,-2,10,1],[9,5,-7,6,-9,4]],[[-8,3,-5,2,-1,-10],[6,6,-7,-9,-2,-4],[-7,-4,3,-2,7,4],[10,-3,-8,6,6,-1],[-8,1,5,9,-6,-8],[-3,1,-4,5,10,-8],[10,4,7,-8,6,-5],[5,-4,-8,-1,1,-2],[-6,10,4,8,-2,-7],[10,4,-5,10,2,10],[-4,-3,-2,1,-2,7],[1,-10,-10,3,-4,-7],[-5,-10,10,-7,10,1]],[[-6,1,-5,6,4,10],[2,-5,10,5,10,2],[-5,4,10,-9,-10,-6],[1,-3,-7,10,-6,-6],[-6,2,6,5,7,-9],[7,-5,2,-5,3,-7],[-1,-10,1,-5,-8,-2],[3,8,-7,6,8,-10],[-3,1,-3,6,7,-2],[3,3,4,-8,1,8],[-4,1,-6,-2,7,2],[-6,-5,6,9,-5,-1],[-8,-10,4,8,-2,1]],[[1,4,-1,-8,-7,-7],[-10,-2,-9,-8,1,-9],[-5,6,5,3,3,1],[-4,-10,-2,3,3,9],[-8,2,-6,-8,-5,8],[2,-5,-9,-10,5,-5],[6,9,5,3,6,7],[-6,10,-7,-3,-10,-3],[-5,3,2,-9,7,-8],[-7,-6,-8,-4,5,-6],[-4,1,-7,4,-9,6],[-4,10,4,-4,2,-5],[-2,-5,-6,-1,-1,-6]],[[-1,4,7,1,-4,1],[-10,-10,-4,5,5,6],[2,-2,2,-3,8,2],[7,5,4,-1,2,9],[6,5,-5,-5,-8,9],[-4,-4,-2,-8,-10,4],[2,10,-5,-1,6,-4],[-6,-7,-5,8,-1,-4],[9,-5,8,4,-3,3],[7,2,-9,-4,7,-1],[8,-4,2,-5,1,-1],[-7,8,-3,-9,4,-6],[10,-9,-1,-9,-10,9]],[[2,-2,-2,-1,-9,-1],[9,-3,-5,-7,-8,2],[-9,-8,4,8,1,-1],[2,-4,-3,3,8,7],[6,-8,2,-4,1,-9],[-9,-10,-6,5,-5,9],[7,9,8,9,-2,8],[7,7,4,-2,3,-5],[-3,7,3,-5,7,-8],[-8,9,-5,5,7,-7],[-8,-5,-1,9,5,3],[3,-8,9,-5,4,8],[9,9,-5,-8,-7,3]],[[-5,1,10,8,9,-4],[-4,7,3,7,-9,9],[-7,7,1,-10,-4,-6],[7,8,10,6,10,-3],[-9,4,-1,3,1,-9],[-10,7,-4,-10,7,-6],[-1,4,-8,-6,-9,6],[-3,-7,-7,-7,7,-2],[-8,-1,10,3,-2,5],[-6,-8,1,-5,10,-1],[8,7,3,-6,4,8],[-7,-7,10,10,3,10],[-9,-10,-7,-10,-8,-2]],[[-6,4,8,-6,-4,3],[-5,9,8,-1,4,-7],[-4,-6,4,5,-6,2],[10,-8,-10,-10,3,-4],[9,-9,-9,-6,5,-5],[-1,3,-9,3,2,6],[2,9,-5,6,8,-9],[-4,-8,-8,-10,-3,-8],[7,-2,3,-2,-3,-10],[-2,4,-6,7,-9,-10],[7,-8,4,-3,-9,1],[2,-9,-4,3,9,-8],[-2,4,-1,10,8,-10]],[[-6,-5,-9,-9,2,8],[-8,6,10,-2,-10,-4],[3,-10,-4,5,-7,-6],[-9,-7,-2,-6,8,8],[5,-8,6,-7,8,4],[-2,-3,-9,5,-4,8],[-7,-8,6,3,-6,10],[5,-5,-7,-6,-7,-7],[-9,-6,-7,1,-9,-9],[7,-10,-4,-6,-8,-3],[-9,-7,9,-5,-8,-3],[3,9,5,9,-9,-4],[9,-2,-1,5,6,-8]],[[-6,5,-2,-7,2,-9],[3,8,8,6,2,-6],[5,-6,-3,-9,-7,-3],[3,-8,-5,4,6,1],[-4,3,7,10,1,6],[-10,5,9,8,7,7],[-2,1,4,2,-8,-3],[-4,-8,1,-3,9,10],[-3,8,-4,-3,9,-6],[5,-1,5,-10,9,6],[-4,-10,-6,-10,9,-10],[-4,-1,8,-6,-7,7],[-10,-3,-9,-8,-9,-5]],[[-9,5,-3,-4,9,-4],[5,9,6,6,-5,5],[-7,6,-1,2,-7,9],[1,1,-9,6,-4,7],[-2,-5,1,2,3,5],[-10,4,-3,9,6,-3],[-4,10,7,7,-8,8],[-4,-7,-8,-3,-1,-8],[-1,8,7,-4,-2,9],[10,9,-10,-9,-9,1],[1,8,2,4,-4,-1],[-6,2,-9,-7,8,-9],[7,3,6,-3,-10,9]],[[-8,-5,7,-3,-3,1],[7,1,6,-4,-9,8],[10,4,-2,-2,-8,-3],[5,8,-3,9,6,7],[-1,-6,-7,8,6,9],[-5,-8,-10,-5,-9,2],[-1,1,-1,3,9,-4],[4,4,-4,-7,6,1],[8,-2,1,8,4,-1],[-8,-9,-2,3,-7,-5],[2,1,9,7,-7,4],[-4,10,-2,3,3,-6],[6,-2,-6,5,1,9]]], dtype='uint16')
module1.set_input('var_146', input_146)
input_147= np.array([[[7,-9,4,2,6,6],[-3,5,-2,3,-10,-3],[2,-8,4,-4,3,5],[5,-5,-9,8,-3,-10],[-5,5,5,-4,7,-1],[9,-2,-9,8,-4,6],[8,-7,-6,-6,-9,-6],[10,-5,-2,-8,2,-1],[-6,-4,6,6,-1,-4],[4,-7,10,9,-5,-5],[-9,-8,-2,1,-2,10],[6,-1,-3,-5,3,-9],[-7,-3,1,1,-10,2]],[[-10,1,1,-9,9,5],[4,-6,3,-10,-4,-5],[2,6,5,-5,4,-6],[-9,-1,4,10,-7,5],[-2,2,-9,-10,3,2],[-3,-4,4,1,6,2],[1,5,8,7,6,-3],[-6,-3,-8,-10,3,7],[5,-1,-3,10,4,-1],[-7,2,8,8,10,-7],[-6,9,-3,7,6,1],[-10,3,-8,8,-3,-1],[-8,6,-8,-4,2,-4]],[[-10,4,-8,7,-8,5],[7,5,4,2,5,-7],[5,-9,-5,-1,-5,-4],[4,4,4,-9,-3,-2],[10,-8,-5,8,-8,-6],[-2,-9,6,2,5,-1],[3,1,-4,-2,10,-9],[-5,-7,-6,8,-2,4],[2,-7,2,-7,5,1],[-4,6,-3,1,4,2],[2,7,-7,-3,9,-6],[-7,-7,3,-4,3,3],[4,5,-3,-7,7,3]],[[7,2,8,-8,-3,9],[-3,4,-4,-3,2,-8],[6,-4,-9,6,-2,3],[-8,-5,4,-10,-7,-6],[-3,9,8,4,3,9],[-2,-10,-5,2,-2,6],[-1,6,3,8,10,3],[7,3,3,3,-9,10],[4,9,9,5,-4,-7],[-2,2,6,-3,3,2],[10,-1,-8,2,3,1],[7,-1,6,7,-4,-3],[4,-3,2,3,3,-10]],[[3,5,3,7,2,10],[-7,-10,-8,1,-7,-1],[2,-2,7,5,3,-7],[6,4,-3,7,-5,-9],[8,-7,6,5,-3,2],[8,-4,-7,-5,7,10],[8,-10,-2,6,-10,-6],[-2,-4,-9,-4,4,-8],[-1,2,6,7,-9,5],[-7,1,3,-4,8,9],[-4,6,3,9,-9,-1],[2,7,7,3,2,-1],[-9,1,5,-7,-2,-9]],[[7,8,-8,10,-9,3],[10,9,-10,-8,-7,8],[-6,-3,8,-3,9,-10],[10,-8,7,-4,7,-9],[-6,-6,6,9,9,-2],[5,1,-7,-10,10,-6],[9,-4,-5,-3,-1,-8],[-3,3,-8,-8,-2,-6],[9,-8,3,-6,3,-9],[4,-9,-3,4,-3,-7],[-3,3,-3,6,2,10],[5,-8,-7,-7,10,-8],[5,8,-8,-9,1,4]],[[-9,-7,4,8,7,-10],[-4,-7,-4,-9,4,7],[4,3,-5,3,-9,9],[-10,-3,-5,-3,-9,-7],[-3,4,-4,1,6,-7],[-1,7,1,-3,4,-9],[-8,-2,-3,2,3,-5],[-8,7,2,-6,-2,-3],[10,-5,-2,5,-9,7],[-6,-9,-8,6,-3,-9],[-8,-8,-8,5,-6,2],[7,8,-6,9,5,-1],[-2,-8,-1,-8,9,-9]],[[-8,7,-7,2,8,-3],[6,-6,-7,1,-3,2],[5,5,7,-3,10,-9],[-8,-4,-2,3,-6,8],[-6,-1,-9,7,5,7],[3,7,9,2,-8,6],[-1,7,-7,-1,5,6],[-6,-5,2,-5,4,-10],[-7,-4,9,6,-8,7],[9,10,1,5,8,8],[-3,-7,-4,-2,9,7],[-6,8,-7,1,7,7],[9,5,1,-9,6,-3]],[[-3,1,-3,-2,3,-2],[6,-4,7,1,5,-5],[-9,3,2,-6,-1,7],[-9,-2,8,1,-9,9],[8,4,-3,-10,-7,8],[8,-2,-2,2,9,-2],[-10,-3,1,7,-9,5],[-3,-4,7,-8,7,4],[3,1,-2,9,9,2],[-3,1,1,-3,10,-5],[-3,-4,4,-10,-5,-9],[5,8,-1,5,-9,-3],[2,-7,7,-1,-4,9]],[[-4,7,1,8,-5,1],[9,7,2,-10,-9,-7],[8,7,5,-2,-6,-10],[-6,-4,-9,8,-10,-7],[8,-5,6,-3,9,8],[5,-3,-10,9,-3,10],[7,9,-2,8,-8,7],[4,-8,-10,-9,8,-8],[-4,8,-10,-1,-6,-2],[9,-10,-4,10,-9,-3],[7,-3,-3,-7,8,8],[6,4,-10,-4,-6,-7],[-3,10,-7,10,4,-3]],[[6,8,7,-3,5,-7],[-4,5,5,-2,-9,2],[-7,2,-6,10,4,8],[-4,-4,-8,4,-10,-6],[1,5,2,7,-10,1],[-3,9,-1,-9,-8,3],[-4,2,6,-10,5,8],[-5,-7,4,-2,-2,-6],[-8,9,-8,3,-1,-5],[-2,5,-2,-7,8,1],[-3,-10,-4,8,-1,-5],[1,-2,-5,-9,-4,6],[-9,-3,6,-2,-9,-4]],[[9,2,-10,3,-8,-4],[-2,10,9,-3,7,-7],[2,-4,2,-5,-1,-4],[-7,-10,10,6,7,9],[1,6,10,3,-5,-4],[-4,-9,-7,3,8,6],[9,3,9,-6,5,-10],[-7,8,9,-8,-10,-7],[-10,10,-8,-9,10,5],[-5,2,2,7,-7,3],[7,-1,10,8,10,9],[4,-5,1,4,10,10],[-9,5,-1,6,-10,9]]], dtype='uint16')
module1.set_input('var_147', input_147)
input_153= np.array([[[-8.768828,-3.705458,-6.571898,-8.432466,-4.606414,-0.541538],[-4.655588,-0.161500,2.014385,-1.984671,9.328581,9.999085],[-1.444139,-0.683845,-7.218369,1.065269,-5.721633,1.982454],[-9.414854,-7.432482,-5.190012,-5.370896,4.210073,-6.343807],[0.095583,-4.590751,3.052660,-5.552963,2.080888,0.369795],[9.455826,-1.430977,-8.434767,-4.133147,4.455030,2.304410],[2.596417,3.513333,-3.590894,9.620696,-3.875205,-5.229267],[-3.790902,-8.934817,8.492456,9.807936,-3.832488,-4.826256],[6.515372,1.605735,-6.030782,-5.163916,7.209202,-4.706549],[7.051148,5.759833,7.409454,3.381791,7.567719,1.727351],[6.177061,8.402392,-1.999764,-2.438092,-6.608146,2.667111],[2.389008,-4.534343,8.004082,-8.271884,0.955071,-3.583247],[-2.880203,-3.731009,3.592985,-8.969088,-4.070072,8.425772]],[[-9.219059,-1.365001,8.345045,2.885099,0.473105,2.034542],[-9.976238,9.158833,-6.799115,-3.524516,-6.886469,-5.633199],[-2.602037,-8.797244,-5.526511,5.920023,-7.581987,2.829068],[1.242759,-3.376966,-0.255275,8.752966,7.582390,-7.134036],[2.511661,-2.247135,5.764783,1.931716,-1.898166,-8.873380],[0.084304,6.997524,3.155464,-0.468748,5.661749,9.895798],[-1.349528,-8.024707,-4.773464,7.945933,8.445704,7.471998],[-1.668135,-7.833810,-3.495754,4.557416,-2.777874,5.276122],[1.250087,7.005155,-2.741512,3.967129,9.283921,2.329450],[-9.809157,1.835809,-2.525249,9.583878,-0.816648,3.364609],[-8.653203,-2.547463,7.222719,0.276370,8.964458,2.349750],[3.191496,2.171235,-8.478236,-3.448210,9.656621,-9.129678],[-7.926607,8.231289,2.982402,-9.461871,4.985906,8.416709]],[[-9.107462,-1.363399,2.637799,-1.179972,-7.699183,6.480729],[-8.808045,8.078278,-2.661434,6.842731,9.006488,7.617624],[-0.623194,4.791038,-3.538650,-8.127341,8.823573,6.466558],[7.675151,8.019624,9.261562,-5.608312,9.871876,6.572915],[-2.688658,-5.783594,8.710607,-5.535665,5.562030,-0.002697],[-2.540437,1.227544,4.265148,-5.356828,-5.390621,-9.344664],[4.679489,2.366786,-9.246709,-6.455894,4.237449,1.103859],[-8.236762,-1.667663,0.370920,9.995725,-5.272907,3.638579],[9.412709,-0.615785,7.196641,8.724007,6.874293,8.960556],[-0.953152,-4.938386,8.946155,-3.359724,-8.157725,2.609945],[9.736558,5.383074,4.932227,7.792312,9.371048,-0.737219],[-1.109792,7.373460,-0.406283,-6.359895,-2.911913,0.955702],[-2.516617,3.003341,-1.171924,-3.300280,8.535591,3.076607]],[[-4.057795,-6.397797,-5.319416,-3.465825,-8.534825,8.616057],[1.048732,5.843285,-4.207723,3.157405,9.610222,8.197190],[1.066911,6.253826,-4.866933,-7.147288,-1.140273,-2.550022],[6.419921,7.199199,-8.323762,6.380089,-0.355350,4.990751],[4.419734,1.304401,0.244388,-1.970440,-4.322513,8.557256],[3.343413,1.528709,-2.056393,-9.171643,7.675712,-6.955856],[-2.122574,7.936157,-5.767142,-9.362008,4.854465,-0.252568],[-0.460376,0.004261,4.734299,2.340445,-7.540047,-9.702210],[-6.834200,8.165980,-0.110634,4.634478,3.907147,-9.067009],[6.838151,9.031927,-3.193144,6.375988,-5.009677,-9.152848],[-2.868618,-6.679054,-5.806548,0.970739,-9.361308,-1.125477],[-3.838265,1.716982,-1.408417,-9.255286,-7.927902,-7.006184],[9.211438,-4.019743,5.812962,9.927794,-3.901584,-8.619958]],[[-5.683931,-3.863066,-3.440972,-8.023867,-5.840691,-8.673881],[5.902687,6.975404,-5.117393,-7.007270,2.292156,-1.718721],[7.509667,-2.073930,2.375436,6.563665,5.321407,-2.205333],[-7.039756,-8.998628,4.344271,-4.278110,5.455276,-4.152340],[2.200630,-5.989202,9.197877,5.740464,-9.603881,4.041166],[5.143880,-5.195245,-8.435583,-8.983195,1.627783,5.077647],[-2.930435,3.659764,7.421207,6.024832,-1.803732,-0.543542],[-2.058203,3.777468,0.327418,3.330735,7.297211,0.957635],[-0.597723,-3.513078,4.414672,-9.531897,5.223898,1.984113],[-6.469033,-8.412809,-2.838397,-0.534113,-3.648527,-0.665960],[-4.684997,-9.168653,6.643438,6.747597,-4.554605,3.613502],[-8.745550,6.809616,4.703358,-5.235896,1.592974,-2.669289],[4.938273,7.772046,-5.929721,-6.999879,7.260393,-1.493367]],[[-4.796816,-2.597927,-1.233016,-4.622278,-9.261997,-5.962899],[1.218461,6.426646,3.721967,-4.306706,-8.709182,0.349492],[8.496006,-0.610300,-8.386873,4.652576,-2.497635,8.813236],[4.931312,9.727919,5.617147,0.402466,5.736776,-0.276348],[6.437323,1.425899,-4.323658,-2.321872,-6.077651,-5.622293],[-8.843133,-5.155754,1.623095,1.653611,6.026078,-5.156692],[-0.803078,0.063994,-2.354886,5.298622,0.935986,-6.321062],[3.733268,9.973573,4.441177,-7.364897,-6.974650,-0.558524],[1.658204,-9.248330,4.909357,0.443195,3.204871,9.229991],[-0.493479,9.008932,1.901982,3.739183,-2.025556,8.309995],[-4.137913,1.715509,-4.068137,8.118650,0.536394,-8.487374],[-1.091090,0.387529,5.445733,-6.799069,9.505552,1.767819],[9.522964,9.203537,3.132796,9.965487,-9.973826,-6.209975]],[[-4.027706,-0.745093,-3.258099,-9.376580,8.636421,-4.734805],[-3.672870,-4.601142,-1.561500,1.537513,8.310574,2.288176],[0.313209,-4.753555,-7.302324,-2.049395,-8.055789,-2.356480],[3.226051,-4.466410,-6.668696,5.217507,2.085454,-4.099874],[6.262002,9.539718,-3.188701,-8.231461,3.476303,-2.140814],[1.319925,-8.284020,1.489566,-5.411020,-4.324503,9.421607],[7.632587,8.765071,2.211573,-2.537229,1.957376,0.121496],[2.963569,0.689727,-5.620491,-0.178927,-6.009583,-9.737111],[1.937603,4.844063,0.320155,7.147990,2.127784,7.481709],[-2.042097,-2.864114,9.710068,-8.388435,0.346788,7.922810],[3.992675,7.339052,-2.717816,0.940999,1.911901,9.666726],[-4.101992,2.414138,-8.576127,-1.805318,9.425176,-9.864320],[-7.323309,5.547352,9.269426,8.295309,-5.424855,-7.817047]],[[-8.618195,-9.560094,-7.857436,-0.814982,-6.056617,6.612359],[-8.452350,-2.713170,-5.458622,-3.665976,4.806473,-8.413938],[-2.819875,0.071162,-6.750460,-0.253833,1.925470,-5.476206],[-0.293005,-3.996923,2.313336,6.555304,8.896418,0.950279],[3.413793,-6.117873,7.599000,0.444749,6.330085,-0.534822],[-0.082537,-9.134961,9.987902,-1.500699,-7.147250,4.306692],[-9.391313,0.626404,-6.193150,2.503928,3.980015,-9.546771],[-4.657591,-5.677286,-5.212427,3.743652,5.480560,-7.205596],[5.874074,1.439120,-9.071530,3.357704,4.239283,-1.524110],[1.387611,6.442528,-0.729558,6.302018,8.969202,-8.100757],[-3.099473,4.905669,7.240911,-4.554495,-2.311595,-7.304440],[-6.972152,1.785981,1.574031,8.909416,7.629707,0.548686],[-8.375280,-7.237564,-1.854419,1.334002,-7.455033,0.768671]],[[0.143253,-1.639679,9.184836,-2.812005,-9.455807,2.427939],[8.759711,-1.626189,-7.551607,-1.150415,-6.173772,-0.660103],[1.371851,9.311785,-4.925916,-5.531244,2.960613,2.821485],[8.828711,-1.387391,2.984413,7.240685,5.125685,7.684774],[6.219994,-6.317322,-4.098927,7.992840,6.809180,-0.970101],[8.805334,1.037361,1.003335,7.839888,-2.191386,8.326550],[7.601180,-5.696506,-4.881138,-7.843358,-2.671389,-1.635014],[-8.379451,-8.503420,-3.998283,8.077061,9.880327,-1.522233],[-6.850999,-5.232735,-1.290325,-1.304695,-3.964150,-6.294776],[8.651913,0.880128,3.719482,-3.358129,7.643987,0.581453],[5.637170,2.001081,2.942868,-6.373225,1.612726,-5.972877],[-5.519133,6.666890,-8.071930,0.051787,8.808229,4.051206],[-0.330329,-7.206841,-8.264470,-6.784124,-5.471815,8.374753]],[[9.031248,9.936278,-7.986835,-8.152700,0.789436,8.413675],[8.552824,5.999212,1.938000,-8.303068,-6.168896,0.672418],[-3.968994,1.417272,5.160970,0.560846,-5.174828,3.920972],[-9.299534,2.845328,-0.832496,5.219570,7.813446,-7.807008],[0.979796,2.416864,5.856656,7.634506,-4.420751,-7.099405],[9.820374,-8.928332,1.080413,-5.880458,-5.112842,8.794719],[-0.517922,-4.120254,3.672669,3.810570,9.958585,-5.141363],[9.840207,2.523701,-2.778089,-9.924951,4.906934,7.204512],[-2.678071,-4.887369,4.549633,9.930268,5.016049,-4.590654],[-3.705477,2.254295,-0.046766,-9.863983,7.858602,9.737547],[-2.532269,4.984949,-8.211562,-4.621710,-3.628263,1.496525],[-5.460384,-1.971619,7.361570,-2.900574,-9.351614,0.964277],[6.503861,-4.995278,6.144328,0.136851,2.751332,3.397455]],[[6.132301,7.057875,2.274392,-9.608740,5.733112,7.827241],[7.908907,1.667173,5.329126,-5.999481,-2.938930,-9.360270],[-6.540697,9.749756,-0.879419,0.163265,-8.561933,-0.840436],[-6.539493,4.460199,7.892004,-5.432067,-2.983463,-0.802329],[-1.567685,6.622670,7.658654,9.581789,8.985709,-7.008399],[9.214610,4.750567,-6.764866,3.334107,-2.920541,-4.515707],[0.536824,-7.237567,-0.093851,-0.501380,9.576756,-3.311066],[7.637071,-6.276740,-8.867519,-6.039534,4.690366,-9.872609],[1.485418,-2.690248,-9.092623,2.054017,3.919890,-9.020789],[-3.194473,-0.254634,-9.585962,1.811479,-4.760325,-9.806959],[-5.156085,0.292293,-8.427490,5.363485,5.863442,-8.614386],[-7.594075,-3.718312,9.864330,-6.799239,3.555699,-9.183823],[3.163615,4.673859,7.726538,-5.129696,-5.682339,6.340410]],[[2.493975,2.742640,-6.222070,6.117729,6.325090,-9.543411],[-9.340016,0.532740,-5.543899,7.086519,8.007674,9.814771],[-6.728497,-5.013164,6.848985,8.832984,-2.308002,-2.003492],[-5.788977,1.905545,6.478227,4.826142,-7.995338,1.267880],[-0.804247,-8.177761,6.578092,-7.013596,-7.011962,-1.147873],[9.133815,-6.895520,-5.587122,-7.063485,-8.908961,1.951672],[-0.755858,4.430403,2.836095,4.458932,1.837731,4.546711],[3.754322,-0.532070,-5.699918,-3.539012,1.139619,4.769008],[6.126155,-8.337918,6.009846,9.162023,-5.057156,7.232486],[4.472276,2.095762,-7.745728,9.105111,7.577438,1.771576],[-3.860183,2.128572,0.929012,-3.817323,-2.586178,-5.633844],[-4.849951,2.577986,5.143457,-9.446058,8.896472,0.831302],[-2.519397,-8.026012,7.615266,7.410878,5.168144,7.398642]]], dtype='float32')
module1.set_input('var_153', input_153)
input_170= np.array([[[1.483123,5.610392,-8.588933,2.277431,7.044939,-1.750476],[7.191946,1.657848,-0.094631,5.072540,7.410868,-1.686458],[6.432151,-5.211036,-6.615271,5.789424,9.713183,-9.840367],[7.070068,-1.668758,-4.165026,7.154904,4.923969,2.748364],[2.699140,-3.063872,-1.763676,7.732828,-9.711920,-8.922486],[2.694146,-2.947383,-1.270974,6.222780,0.002103,-2.494976],[-1.803597,2.530919,-7.052475,2.542800,8.117810,-9.961960],[1.239855,-1.633694,1.330537,-0.850239,-9.402170,-6.545999],[2.593887,-6.110244,1.647403,1.221207,-8.078092,-6.332089],[4.823204,4.635691,0.822311,-6.062498,9.008590,0.063535],[1.317414,-7.727952,-7.865670,-4.919539,-6.174034,-1.234284],[1.564929,6.085528,2.736613,-4.822226,7.388539,4.083949],[5.791898,3.170341,-2.759340,6.528869,6.065619,-3.401390]],[[-7.476341,1.743596,0.639815,4.151090,6.748873,4.157534],[-8.425312,9.905555,7.198944,-3.439535,-2.541117,2.026618],[-8.835261,-1.057412,-3.546559,-8.124770,7.487224,2.157868],[0.362692,5.725563,8.343892,1.483693,-4.874724,-7.975735],[-7.339113,-7.115212,-9.912075,2.686664,5.202758,-5.233729],[-1.450931,-1.259443,3.636386,2.238676,-6.223762,9.132808],[5.040423,1.146059,-5.243646,2.154723,1.670186,0.445512],[3.188667,-7.878393,2.743421,6.560522,6.364601,2.247150],[5.396338,-4.793708,-3.371600,-6.308538,-3.506673,5.363360],[0.816540,5.492956,5.377177,-2.805312,-8.690920,5.317952],[-8.809144,2.942769,-3.643658,-0.326321,4.776171,-5.459803],[-8.793490,7.866312,-2.245782,1.736329,7.273716,-9.368890],[-3.872933,-7.265632,-6.978861,-2.863670,-7.689824,-0.700122]],[[-3.349147,-2.085348,0.428731,0.831395,8.222471,7.848270],[-8.711767,7.079641,9.734794,-0.371271,1.932798,-3.951773],[-4.367807,-2.117211,3.045108,1.821792,1.942644,7.276768],[-0.417695,-0.593993,-6.869092,-1.770778,3.787833,-4.254308],[0.501580,-5.516723,9.041364,-8.331837,6.181361,-6.146840],[-4.981675,-3.149195,-8.894117,-0.362533,8.500690,-6.263348],[-3.123390,-3.145596,2.957517,5.406236,9.459691,1.381921],[-3.939310,-3.787427,-7.753770,-1.644569,-2.313295,-3.794755],[4.942367,-0.532191,5.836495,-7.679812,7.118138,3.013567],[6.458270,7.537922,-3.852425,-7.563730,7.179320,-2.026340],[2.361057,-9.641279,-9.110967,-5.652842,9.247025,-0.969556],[-1.660860,7.040451,9.414799,-0.891498,3.136327,6.541337],[-2.957113,-7.337927,-0.700549,1.260306,-5.014487,1.470735]],[[-9.614637,-4.756199,-3.931834,-0.709491,0.057142,-0.676469],[9.922360,8.044992,9.110278,-9.888254,-4.235729,5.584499],[-4.397427,5.050708,-2.649282,7.776267,-6.068801,-8.683807],[-8.316851,3.544121,-0.810776,-2.315649,-7.223718,-1.494252],[-9.622636,5.101720,-8.423946,2.414667,0.974114,6.138871],[6.142495,-8.141433,-7.363477,1.457249,-9.651439,-9.985027],[-0.841200,-6.931399,-5.798954,-3.974773,1.709325,-2.029028],[-7.752492,-8.515352,-1.703587,2.979067,-8.956989,9.879220],[6.056329,3.913221,-9.519085,-3.075973,-5.048258,0.623898],[-5.416131,8.891979,-6.412210,6.436852,5.592768,-4.622744],[9.803542,-5.343683,-9.520572,-3.697675,-3.421552,7.425115],[4.303790,8.082079,-1.819877,-8.954350,9.196763,-4.992638],[1.356147,-1.159723,-5.807161,-7.412809,4.636879,1.797439]],[[8.509209,2.237159,-0.257519,-9.457745,-6.650358,8.292017],[-8.395086,5.493558,-9.724632,1.406139,5.123427,-6.836006],[4.092571,2.246405,2.011371,-5.345450,-9.435082,-3.760778],[-2.528785,-0.232914,2.643655,2.057216,-7.065914,8.521082],[-0.503195,-5.617746,-8.964908,2.278536,-6.686947,-5.490687],[-9.705109,-3.531534,-8.634978,1.375853,8.436670,-2.816360],[0.725829,-1.663809,-5.474619,-1.090003,8.880899,1.118339],[-0.793162,7.782440,8.465788,-8.376749,-3.576090,1.826507],[-8.990104,5.445747,-3.862525,-6.988822,9.417184,1.834328],[-3.820464,-1.102929,1.865142,0.738648,8.970322,-1.507804],[4.024954,-4.161292,8.848060,-9.989052,-8.835810,3.578511],[1.768602,-8.957850,-2.701342,6.804983,-8.465575,-7.729967],[1.712854,0.054639,-2.998493,5.431512,-0.789050,3.882756]],[[4.491210,5.470922,0.236801,3.783191,-8.885572,1.837804],[7.989213,8.310360,1.010551,2.513841,-7.680340,0.278075],[-2.816311,-8.549308,-4.581902,-3.413968,4.533275,6.147399],[-6.095944,-7.890791,-1.282420,-5.253676,-5.625110,2.010739],[8.940611,-1.108471,0.872035,6.539287,-9.506390,7.168104],[3.662541,2.556350,2.543461,-5.322131,3.912246,8.506450],[-7.227819,0.521478,8.243683,-5.194349,-4.420913,-3.011491],[-4.099586,4.124269,5.353406,4.757811,1.155883,-9.946820],[8.460474,-0.478160,9.066918,4.865981,1.605398,-7.307599],[1.702106,-7.913964,9.275290,-7.985750,-4.125320,-1.187595],[-4.847433,-0.551656,-4.923825,-3.492500,4.391304,-7.926952],[-7.914331,9.258441,8.732434,9.317897,-2.621190,-7.279151],[-0.243716,-2.792964,-6.994961,8.738346,-1.209730,-5.920070]],[[-5.949233,2.817592,-6.148730,-0.320840,7.350810,-5.741744],[8.180679,4.261639,3.077592,8.707853,-5.431631,-6.344781],[-6.193609,6.667363,-8.923739,-6.659985,8.322335,-4.314107],[3.210332,-8.815280,-1.677001,6.716744,-9.540310,-6.901836],[-2.292231,-2.725973,6.038066,-3.123371,-8.200559,-3.198259],[5.047900,5.024741,-1.123933,-2.578240,-6.749595,-9.704271],[-4.055964,-3.233660,4.831707,-8.090689,-3.523339,-5.297261],[-9.791927,3.117243,3.490501,5.846417,-2.464689,0.181176],[-1.572324,8.038735,-4.802807,-8.085237,9.952189,-4.553291],[2.232537,5.799348,5.054305,5.399449,-8.692610,-7.768035],[-1.575899,-1.355530,-9.803465,-9.750158,-1.246133,2.033311],[1.126155,6.506165,-7.195112,1.422619,-8.968260,8.124894],[7.458549,3.327344,6.543685,2.018679,0.445281,5.664657]],[[9.931887,8.375193,4.521490,-4.765470,-7.803731,8.044805],[4.401100,-3.084799,9.557005,9.012758,-5.178738,-0.387571],[-7.224991,2.871696,-6.769390,3.301259,-7.588124,7.937296],[3.657379,2.654715,8.149521,-2.278844,2.257671,-3.996259],[-0.336383,4.879675,3.913327,3.959849,1.409720,7.649988],[4.958725,2.181090,5.859934,3.938037,1.009478,-1.238770],[1.029039,8.878375,5.660015,-6.689822,-6.517541,-9.562121],[1.728091,8.237092,9.988410,-9.368683,-1.516424,-6.937108],[-3.879577,-6.522184,-3.030355,-0.637418,-3.633558,3.626210],[-4.076846,3.314447,5.616571,-5.545790,9.774782,-5.649752],[-3.064274,8.054707,-8.374118,9.772813,9.506290,-3.332198],[-0.561704,-3.994991,6.314851,5.897827,1.609928,-5.660880],[-2.786695,2.292495,-6.793246,-1.245889,9.863044,7.314090]],[[-7.248055,-2.091510,1.185400,6.381160,-0.444875,-0.730511],[6.598960,1.565363,-8.325135,-0.763968,-4.477784,4.190667],[7.849948,6.921800,6.731484,-7.423414,9.572736,-8.991561],[-4.009555,0.210953,4.410812,-2.259114,8.239457,6.439374],[3.910569,-4.387021,4.929282,-7.634070,-9.709824,6.464823],[1.959656,9.544520,9.892309,8.344543,1.838016,-9.626517],[-8.044234,-9.742015,-7.198294,6.137876,0.217898,7.783106],[7.425855,0.375331,7.076841,-3.124454,-5.411732,-8.620002],[7.742249,1.564483,-5.814100,0.687994,-3.225655,-8.324693],[7.757290,-5.470392,8.378774,2.202589,-0.317935,-6.152459],[-9.233484,-3.173440,-4.108052,-2.619634,-0.699542,7.567583],[8.423917,1.623361,-0.111524,-3.744405,4.740920,-7.204362],[-4.217351,-6.820041,-0.851354,-4.904010,1.070242,0.079435]],[[1.005886,0.356084,-8.649903,-8.209353,7.948951,1.674091],[7.507639,2.561920,0.320906,-7.425132,0.915387,-1.138619],[4.617759,-9.223518,9.614970,2.934643,9.489662,-7.233150],[6.209045,6.133790,-8.307548,-7.945387,-2.931756,-0.620237],[0.703549,7.132768,4.344106,-3.773062,6.894405,1.622989],[-0.859439,0.547514,3.906294,9.766505,7.662602,0.659511],[-9.520064,8.444754,8.540368,-8.805790,-7.745702,-0.989540],[1.903972,2.289870,1.392726,5.329643,3.538069,-0.152461],[-1.736353,6.742511,-9.804483,3.783365,-5.530505,-4.052002],[-4.495942,-8.100909,-2.111809,1.742944,9.425015,-6.649854],[0.112620,-7.364581,5.870745,-5.276445,8.807096,7.306490],[-1.960029,-3.892619,9.324157,3.783605,6.123178,1.812311],[-2.171185,3.837799,3.041397,-7.324610,5.293048,6.089813]],[[2.828495,-7.450694,1.316940,1.490368,-6.497177,-8.117873],[-7.661007,4.278603,3.506297,7.553055,5.439181,3.251488],[2.501938,-3.372484,-9.907078,8.029378,4.652215,-5.436269],[1.829303,-5.581209,4.229573,2.662283,-5.695641,3.915926],[9.658501,1.937384,4.063599,2.034962,7.814156,9.039378],[9.901842,3.672877,-7.168064,7.544824,4.353500,5.427948],[-3.646260,-6.291577,-6.349404,-3.768700,3.412950,-2.098721],[-1.812809,1.846594,8.463010,-4.769068,6.632801,3.277000],[8.977889,7.500049,2.660767,-2.892710,7.734571,-4.961778],[-5.248677,-6.231797,3.736665,6.489869,-6.469443,9.824684],[9.026842,2.283243,0.275299,0.731211,2.749341,-8.382915],[6.950938,4.253641,5.899103,-9.245451,-5.277958,2.604876],[-3.207158,-6.308837,9.227837,-7.545347,3.661779,7.673394]],[[4.494475,4.545768,1.776061,3.786173,-2.729751,-7.703999],[-9.305207,-5.186082,9.098136,-1.376404,-6.143514,-3.920611],[-6.665874,-0.676602,-1.452529,6.723847,-8.564916,9.280501],[-6.025531,0.143905,2.989794,-8.299960,-6.669513,-9.508122],[3.853468,8.167981,4.686083,4.434629,8.930134,7.301949],[-7.625526,2.756712,-9.338315,-6.542566,2.142023,3.469362],[6.055895,-1.408469,-4.011791,7.569614,-1.954062,9.468101],[5.529854,8.888387,0.659987,-6.640790,6.583102,-3.276330],[-0.437275,-3.230813,-8.951837,-8.284372,-1.199154,-3.230757],[-6.345368,-4.588237,-1.393235,-7.445527,-6.761621,-5.984541],[0.999810,9.503826,-8.743884,-0.084150,4.128761,-5.011327],[-3.341409,3.573894,-7.234525,-7.571435,-7.773151,1.623471],[-6.568020,-6.332985,2.190910,-0.392557,4.165483,-1.791225]]], dtype='float64')
module1.set_input('var_170', input_170)
input_175= np.array([-7.653996,2.605168,4.754275,1.119894,-4.144439,-7.276457,-3.286220,9.085053], dtype='float32')
module1.set_input('var_175', input_175)
input_180= np.array([[[8.210995,-5.055816,5.664589,0.419932,7.045566,8.622528],[4.236032,7.710973,-7.719811,3.413048,-3.746376,0.511198],[-7.126639,2.757440,-4.992909,2.306078,4.010389,-1.047591],[-7.251144,-4.846924,6.682279,-1.266765,9.204875,-6.728247],[-3.227690,3.615654,1.051321,-9.980247,5.259269,-6.314349],[-9.438382,7.395967,5.134684,-5.250778,1.319442,-6.348493],[-1.970557,-8.227175,-4.362072,1.871927,-4.657288,6.634406],[-3.401070,9.929022,-0.174879,8.791432,9.284741,-4.131012],[-4.494505,-7.406700,1.496043,3.534309,-3.632411,7.042886],[-7.534712,9.574700,-2.850957,-8.288089,-5.079896,-9.504778],[-3.983883,-2.660022,-2.616955,-6.338543,3.929882,3.996640],[8.287578,2.858408,-7.315047,-2.146658,4.438871,2.198612],[9.836275,-6.710541,-9.177851,-1.408780,8.872201,-0.964177]],[[3.561490,-1.186059,-2.792630,-1.431617,-6.058121,4.155431],[-7.583818,-5.094411,5.315299,5.415154,5.088796,0.757505],[-9.724735,-9.593512,-0.198229,-4.489407,-1.780797,-8.615931],[-9.899945,-0.672937,-1.074614,8.264919,-9.717190,0.976266],[9.910224,-1.681442,-1.738819,-9.551297,7.297713,-4.927033],[-9.091949,6.060412,-1.714971,5.252341,-2.995798,8.906290],[9.359615,-6.708916,-5.011620,2.642193,-5.335335,0.191466],[3.410504,-1.371379,-7.644390,-3.623754,0.173749,0.695606],[-1.356238,-1.682052,5.537379,0.386174,-9.940323,-4.482842],[9.145644,-3.116755,6.562282,5.176213,-4.392908,9.715925],[-8.774381,6.748816,4.572995,3.647123,8.693569,1.401464],[-4.269968,2.606581,-1.949046,2.060468,5.608711,5.244576],[9.856918,-8.872631,-6.418259,4.033819,7.389254,-9.515089]],[[2.563174,-4.089164,3.534194,9.173177,0.328754,-8.550758],[-9.311645,7.097628,-7.357295,-1.055572,0.482079,4.640768],[-8.646159,6.754728,4.400258,8.366437,8.386867,9.773527],[5.443147,-4.251086,2.495076,-4.240045,8.166746,5.157730],[-8.318073,1.366473,-4.855869,-0.536675,7.270189,0.180839],[9.280470,-3.241230,-5.293200,-3.064548,-3.103124,-8.970852],[3.409855,-9.790548,6.991567,-5.650443,6.478359,2.635127],[-2.854317,3.985855,4.446773,-4.747419,6.673362,-8.943080],[-6.644497,7.849153,5.874501,-8.035630,-1.626703,5.058447],[4.451953,4.427453,-6.403559,-9.862408,-8.757038,-5.215090],[-5.862157,0.891175,8.246554,-5.046003,-7.924748,9.470817],[3.189885,-0.669912,-3.002474,8.329762,-0.493416,-2.465107],[-5.374106,1.309614,-1.888430,-6.866469,3.678145,-5.089230]],[[6.872734,-9.974750,-1.430390,-3.828952,-4.256945,3.612121],[-3.254095,-3.127445,-5.828428,4.577469,5.278905,7.424430],[5.638184,1.409240,8.572676,0.175757,-0.737767,-2.358160],[2.235431,-5.380752,-2.206820,-4.942542,5.922257,2.672000],[-3.647980,-8.834045,4.331206,8.881497,2.931688,6.665578],[7.428725,-0.879544,5.016464,-6.345314,3.106045,-7.607692],[5.567740,-2.059302,9.748780,-7.059469,8.263254,5.246356],[-7.016883,0.796464,7.523236,4.140393,4.689700,-7.462689],[-8.603906,-2.703132,-5.304725,3.124474,1.288502,-5.625781],[9.891512,-6.495614,3.102567,-8.387793,7.312084,4.977534],[-2.575443,4.359176,-3.705148,-9.458412,-2.330366,-6.897891],[3.623304,-6.076034,-8.633432,0.130126,5.284979,-3.041746],[-0.643078,0.213085,-4.023363,-1.231053,3.986655,-7.709914]],[[-5.567087,-0.962138,1.511790,1.581265,1.354583,-0.423910],[-2.715556,0.500956,8.519056,-3.371084,-3.999911,1.302922],[-4.571204,-8.344182,8.828187,-6.005795,8.761857,9.075406],[1.027977,-1.787847,-9.971552,-7.549689,-4.686865,1.979238],[1.014660,5.464437,5.012430,-2.171889,2.296198,0.277294],[-1.917265,-7.136028,-7.196426,-8.016945,-8.251622,-4.511049],[9.512227,6.710134,8.061021,-1.863700,-9.280241,-4.675891],[-6.454949,5.785197,5.221992,2.591032,-7.705120,-2.641969],[0.144807,5.680128,5.409431,-9.752901,-3.453788,-3.317374],[-6.669355,7.203388,2.104189,-0.214551,-6.588093,2.489612],[-8.739091,9.224645,-6.614661,-8.526628,5.393241,0.060099],[3.445504,5.301356,5.763767,9.273032,-5.727029,-7.881652],[0.043817,-7.783013,-7.201535,4.782439,-3.486507,-0.807162]],[[-0.656238,-4.282062,-0.253307,-6.586848,5.675771,0.838870],[-4.276605,0.616089,4.111283,-9.946194,-5.875226,9.945293],[-9.225708,-0.097926,8.828283,7.083108,3.474024,1.344964],[6.586441,4.177623,-4.262259,7.978363,-1.010157,1.662639],[-5.598087,-3.421463,-8.757865,1.040711,-0.101625,7.108185],[-1.928206,-3.624481,-7.734641,2.930773,9.137711,9.441983],[-3.185260,-4.355017,7.253242,-5.626418,3.154246,-3.579489],[-3.052553,-2.379828,2.353871,1.722200,-7.951142,5.448950],[0.874575,-4.342783,-5.469585,-0.477783,-2.234999,6.244821],[8.040780,3.465754,-9.461103,-3.766762,-3.669197,8.176640],[4.847873,6.516274,-3.479141,-2.674954,-8.167721,9.681915],[-6.922892,5.422299,-1.618569,-3.861959,-0.977429,6.236852],[-3.133264,-5.969203,-3.121826,-5.548840,-1.306366,-8.742283]],[[7.149234,-6.479475,0.042089,-2.259567,-8.442198,8.053104],[-7.240033,-9.016365,8.018483,7.643050,6.922027,-8.507950],[2.504749,2.706511,8.218948,0.652970,8.273219,-6.276581],[3.206107,-2.301353,-7.007896,-1.270156,-3.910651,9.249514],[-9.643299,5.163708,-1.831139,-7.509703,-2.930919,6.279965],[0.384467,-4.186573,2.009980,6.736904,0.737662,-8.442011],[9.196068,-7.603648,5.074453,-4.252675,-8.889000,4.877599],[8.410206,7.369096,-6.482272,3.759657,9.999224,-4.712938],[-7.459880,6.078571,3.322480,1.019599,-2.942264,-2.272023],[-7.223187,-0.103754,-4.963900,4.425524,3.887522,-2.355107],[-5.598379,6.230381,9.010477,-1.275985,0.822504,-3.748963],[7.032728,-4.918149,2.375388,0.463604,0.463932,6.546700],[5.862007,4.497890,2.858034,-3.291078,-3.833328,9.202019]],[[2.145437,4.388104,3.923522,-6.909525,-1.260290,-5.674504],[9.275419,8.429979,0.681906,0.483997,0.798536,9.527149],[-1.972662,-0.999115,1.268366,-7.052742,9.659339,-6.440243],[6.634741,3.679349,0.940123,-5.556370,3.866120,7.767450],[-9.675406,-5.066201,6.397690,-9.686124,7.293600,-9.051494],[-8.768180,-3.756795,2.200008,-8.559266,0.075581,-1.340229],[7.427226,5.142518,-2.658010,-5.527415,1.582822,-9.284233],[-9.560242,-4.055384,-1.783055,2.398657,-7.077864,-2.508103],[-9.022853,-1.669425,3.554068,-7.838906,9.000152,5.927761],[-9.008680,-1.680541,-2.158029,-7.767275,0.422106,8.455095],[-9.512110,-0.337295,-2.462221,-3.570072,5.675698,-8.339169],[7.395918,-9.278719,-2.984149,-2.716809,6.147209,5.732809],[5.754617,-3.218356,-4.854166,-1.879714,-0.191442,6.236336]],[[-8.574655,3.363274,9.246008,-7.131317,-4.625700,0.213917],[-5.667687,5.922731,5.573085,-2.738703,5.886672,9.610176],[-6.151089,-6.987210,1.988694,8.310538,0.697534,4.485881],[-5.221082,6.179269,-0.548163,3.192722,-5.648767,-7.563463],[4.142136,-3.580321,-3.237102,9.637951,-9.033062,9.862933],[2.211451,9.394417,-2.059851,3.997981,-8.682020,7.570578],[-5.284312,2.761641,-9.904618,-4.460364,-6.759736,-2.345070],[-5.913694,7.618192,7.319810,-1.466732,3.770057,4.116812],[8.005703,-9.189541,4.724798,-9.571950,7.628450,-5.706432],[-8.837489,5.139972,4.561626,0.664523,6.251609,-5.246261],[5.304841,-4.959783,-5.549023,-1.068481,-6.476052,2.502710],[7.956642,4.226532,-2.417735,-4.236364,-8.276770,4.459596],[0.642105,-4.137254,-9.792392,0.519514,4.722242,-8.170473]],[[2.191351,2.113612,-7.120251,2.204890,2.730494,-5.286131],[-8.459533,-0.614992,-5.837638,-8.031451,-9.821207,9.743807],[-7.168650,-7.007710,-1.161439,0.993384,-8.159000,2.907679],[-9.572200,-5.361586,-6.816514,2.512442,8.706108,3.096507],[6.212190,5.341992,-1.122177,-4.110130,3.245543,1.188776],[-5.072836,1.487518,1.424725,3.436711,9.000527,8.640325],[-8.720332,-8.294869,-8.289832,4.139585,0.320251,9.396485],[9.816850,-0.117546,2.787579,-2.766403,0.793627,-5.583444],[7.512504,-8.095700,8.503458,-4.113496,-2.645764,5.576787],[-9.075975,-5.354360,8.056915,-6.275163,-9.805638,9.339201],[-0.511070,9.498092,6.040219,-7.619230,6.487589,8.728052],[7.328577,-4.153516,-5.689583,-0.058104,-9.531808,-0.328918],[5.315628,0.340390,-3.596315,0.830326,-8.389985,-0.457691]],[[-0.865146,-7.967538,6.945703,-6.231201,0.062728,-1.969630],[-4.521477,3.431971,3.927656,-9.684660,-0.396700,-1.891846],[-4.230194,2.749837,-5.442294,-5.664545,-0.242989,-9.730389],[-8.513805,-3.606296,1.015042,6.488473,-0.424220,4.320391],[-5.526079,-9.541748,3.075450,3.520677,-0.525593,-6.597816],[-0.141742,1.359773,-5.288430,-2.494074,-8.120147,-8.177089],[9.121226,6.020814,-0.592074,-7.198630,-7.859457,8.567960],[8.704970,1.505561,8.788192,6.274710,-1.945983,1.480928],[-6.502625,0.074199,-6.279403,3.455080,6.346273,5.701281],[0.653722,-8.406195,-2.011434,2.962859,5.738878,2.207329],[-9.420742,-5.110385,6.935340,6.334354,-1.668873,-0.887116],[1.931700,-7.031180,-2.163337,-8.083436,3.600970,6.760445],[3.491571,-5.292923,5.199305,8.430198,-5.169290,-6.220180]],[[4.815071,0.793878,-3.338765,0.819026,1.338795,-2.025750],[1.205585,6.894270,-6.273636,4.895166,5.167532,-4.460627],[1.537592,3.159798,2.979084,-0.875752,0.685916,-3.535560],[7.226840,5.491190,-1.278950,7.311305,2.581395,-7.169564],[2.171344,3.617623,8.628556,-4.085516,3.667154,-0.897584],[6.062657,-8.360000,3.145478,0.963856,-8.841251,1.204863],[-8.863401,-9.335757,-9.987435,0.839386,-6.092210,-2.404931],[-8.725173,1.747048,-6.396909,9.946900,-1.912700,4.882268],[-5.227310,-9.055964,6.157302,7.550699,-5.276097,3.919553],[3.046693,5.885757,4.670531,7.916093,-0.708781,-4.690282],[2.908861,-6.161276,3.748550,0.843217,-4.317025,-3.877800],[1.327588,-4.935891,1.858892,-1.484949,-5.326201,7.158616],[-1.316145,-5.957781,3.319088,0.926182,-2.694074,-4.175551]]], dtype='float64')
module1.set_input('var_180', input_180)
input_276= np.array([[[4.533162,6.004418,0.612207,-6.865848,-5.624465,5.216087],[-4.965818,-6.671410,0.834550,6.708525,-1.707514,-5.907186],[-3.229593,-2.134461,4.514005,-0.504524,-5.066223,0.252186],[6.285093,1.886803,-1.649741,4.654418,-8.864673,3.115568],[8.600250,2.527450,-5.668409,0.455814,-8.666538,1.979106],[-7.146910,-4.328094,-0.615091,3.107518,0.764048,4.265240],[2.949785,6.483873,-4.321883,7.658937,4.343428,9.115289],[-7.864656,-5.135680,6.637777,-0.997069,8.365080,-2.927616],[-5.358260,1.123928,-4.314906,9.450437,7.444161,-6.204495],[-8.081973,-2.722824,-8.158360,7.760339,-1.175821,1.521732],[-4.859573,-3.249249,8.796716,4.324082,-8.406928,9.586684],[2.111050,-3.189672,8.544660,-1.255687,-1.936962,1.149316],[-1.458384,2.665391,-9.648541,-6.769134,-5.166140,-8.182771]],[[-8.932383,-1.903585,-4.196098,2.466676,-8.118338,1.975503],[-7.623490,8.079025,-0.177916,-8.013370,-0.135189,7.798256],[-5.268637,4.329749,-1.675644,-7.965386,8.660762,4.888090],[7.986403,7.249741,-9.606541,6.654068,-4.588875,2.293515],[-8.100184,9.608196,4.659621,9.054964,6.455420,6.011722],[0.145207,-3.033805,-5.655305,-7.910422,-3.005237,2.043608],[-7.666191,-6.122297,-5.502326,5.436673,1.064312,5.595700],[-3.617440,-0.004833,8.203405,6.342858,-9.420024,9.204391],[-4.031818,-6.183901,9.348850,0.683924,-8.027796,-4.264173],[-0.562953,9.289668,-9.700861,-0.613557,-9.303125,-1.458163],[-0.961165,-7.169433,9.345382,5.497190,1.765551,8.815963],[-9.606698,9.381991,-2.108673,8.567925,5.003915,-0.064427],[5.865937,-0.657518,4.706569,9.145034,8.557578,-9.973173]],[[9.413767,-2.997731,2.260409,0.729826,-9.022982,5.551336],[-8.216491,2.464634,2.552501,8.923820,8.249826,-5.793912],[7.541987,-2.132516,0.917984,0.795797,4.805212,-0.419772],[7.426793,-5.196011,-1.337596,-8.878913,-4.997273,-2.177232],[5.243810,-4.425013,-1.204831,-7.081007,-9.940876,-8.228749],[2.696924,-6.800699,0.915987,-7.239927,-0.045911,-6.297310],[-5.470582,3.734805,3.783774,-0.862794,9.815751,2.662871],[-6.639381,2.350335,-3.938109,-0.120159,-5.359413,-2.668615],[5.395692,-5.277343,6.285093,-2.479081,-4.158232,-0.934978],[-6.630579,-9.100290,8.655600,4.250769,2.180134,-8.967066],[-6.126149,-5.506890,3.069666,-3.802518,3.638744,-6.059443],[7.439171,-0.312049,-0.847196,7.123272,9.273153,0.240959],[2.154300,-9.491918,5.267567,1.822667,-8.453909,-6.750993]],[[-3.387676,-8.045895,-0.617543,4.504146,-2.968218,9.631180],[-6.857584,3.926039,-2.077204,3.068251,2.088314,9.597364],[-2.992693,-7.458987,-8.457148,1.135388,5.662730,-2.676032],[-5.233601,7.663107,1.009994,-1.047583,-7.722751,5.632281],[-6.489542,-3.814178,5.937849,-5.471849,-5.722311,-4.220515],[-1.902043,-2.504100,2.832962,3.434919,-8.811418,-6.554334],[9.343471,7.343461,-4.330812,-8.805255,2.212030,-0.381869],[-3.133447,8.508202,6.217725,4.936579,7.911501,3.532855],[-9.816089,-2.593697,-7.034100,-5.333923,9.041141,9.283950],[0.157032,-1.726401,-0.827430,7.661323,-7.302185,-1.587689],[-9.640195,0.580749,2.173117,-9.604322,3.354845,-6.181499],[-6.269187,2.221025,-7.229628,4.861405,-4.133513,1.217070],[2.156131,-3.113972,9.272804,1.181588,-2.276426,4.843600]],[[-8.063390,-1.979113,-8.325466,4.865628,2.434729,4.754447],[0.084438,7.216792,-0.883448,-6.203628,3.705359,8.753469],[9.726248,-5.202967,7.041016,8.481293,-7.599449,2.172250],[-2.331291,3.651219,5.348560,-6.577263,5.315296,0.355957],[-5.884822,9.040109,-3.475960,-0.890291,-2.233930,4.186212],[-4.741204,7.585375,-6.470032,8.618906,1.336017,9.933590],[1.966660,7.002129,1.247600,4.312559,-2.865812,-4.568916],[7.950271,3.829003,9.676955,-3.556380,6.014145,-3.680042],[-9.102502,9.805313,-2.799489,7.356570,-1.119013,6.399186],[0.730186,7.622150,2.474152,-3.959437,-4.517749,-7.338780],[-1.192460,3.913363,-2.529083,-3.483145,3.449784,-3.094931],[-5.939565,-0.898785,-5.447069,-0.663933,-9.278564,-5.603078],[8.217016,-1.603667,-3.313547,-6.639334,0.073939,-1.172245]],[[1.414465,0.818303,-8.214066,0.366145,8.866641,7.570362],[9.894833,4.234006,8.853376,2.587288,-5.234049,-5.247921],[4.074612,9.995929,-2.156878,-5.793779,-3.518041,3.565504],[-4.003851,1.127220,-2.113009,2.368913,6.692571,7.547767],[-6.051641,0.888589,-3.544472,7.730745,-0.894320,1.670818],[2.532176,7.463469,0.707534,-8.279625,2.665314,9.039484],[6.285334,9.160080,5.027469,8.342870,2.968443,-2.009369],[4.641018,4.322096,-7.857784,-6.921303,6.336507,-8.106721],[-5.404076,-3.003853,-9.276436,2.619935,-3.857777,-9.528738],[3.203982,-6.423932,8.434749,3.079871,-6.264260,-5.120886],[8.661261,-1.642793,-6.051866,3.458310,-2.478899,-3.150522],[3.958885,-8.310591,-8.260263,3.914891,-4.377000,0.173525],[-4.128652,-1.177221,6.053352,9.541699,-5.402338,8.581356]],[[-8.676739,5.285485,-7.061642,-9.163469,-6.682111,-2.400492],[2.240097,-7.891823,3.313929,2.230871,-1.602858,-7.743571],[8.228754,-2.763155,-5.555602,-2.814918,-7.075314,8.590682],[-1.046744,-5.935135,-2.479436,0.020381,-6.256704,4.135908],[0.447815,5.290230,4.264794,-8.411171,-5.371661,-5.439945],[-9.120026,2.949952,-7.692146,-8.168634,-9.888301,1.119102],[6.159638,6.851186,9.772556,8.946283,2.009274,-3.383079],[-4.177849,8.279545,-4.938137,8.791515,9.219755,5.849693],[8.816085,-9.653767,6.595485,-2.431252,-2.354563,-7.783758],[2.849357,4.387925,2.741421,5.252018,-0.326661,-6.633802],[-6.076086,3.928057,-5.291747,5.526693,-5.863498,-6.548188],[-4.192331,-8.588214,-0.694630,-3.304828,-0.621404,-1.707408],[8.293279,-0.723623,6.686410,-5.899258,-5.893804,9.357043]],[[2.206426,4.241295,-9.914226,9.660393,-9.590963,9.308638],[-5.014639,-0.108125,0.528739,-7.511565,-2.492556,-5.480950],[2.697857,3.880898,3.310833,7.030788,-1.163437,-3.398350],[-5.824828,1.029297,-0.427126,6.231434,-8.109103,5.060445],[-4.676725,-2.665011,-9.609827,-6.206738,-1.082696,-9.607737],[-7.878063,-5.931508,-3.888248,9.038926,-5.546761,9.073492],[-2.262710,4.466146,9.365692,-5.055712,1.512959,-6.311956],[-0.851793,6.385370,0.683945,-5.875148,1.882351,-8.294493],[6.049175,-1.818863,-8.908068,-9.533420,-4.109381,2.661086],[9.118722,-7.415479,-9.611075,-4.131791,2.661532,8.903993],[2.920292,7.960480,-3.261975,-4.699389,5.285435,6.028142],[9.789393,-6.710255,-5.518050,7.998888,-5.065138,-8.538556],[-6.770807,9.603833,-4.367872,-9.313399,-7.775956,3.318635]],[[0.611462,-7.110943,-6.720583,-0.432466,-2.617498,-9.378343],[-7.309959,-1.596015,1.397761,-6.331145,8.563643,4.336537],[-5.261902,-6.311176,3.574824,-0.556202,2.965178,-3.399172],[-2.274332,0.883417,0.055011,8.307455,6.607340,-9.092968],[-8.426512,3.080934,-2.164343,-7.761815,-8.139945,9.118607],[-1.321897,2.372047,2.295170,4.934243,-2.916211,-7.603383],[-9.796127,-7.558325,4.580556,-0.244006,8.801887,6.385389],[8.693949,-8.508226,-5.809581,2.226123,2.362816,1.513580],[-9.643898,9.637080,4.675212,9.372134,9.723325,-1.709749],[-4.482238,7.140956,-3.548747,-7.105935,-1.391722,1.941420],[-8.531327,1.343108,6.224407,-8.660711,1.385771,6.597850],[9.176460,2.563688,-5.105227,0.105645,-1.202074,-9.670990],[-1.356934,-4.478679,9.529988,9.552161,6.039196,-9.512173]],[[1.941352,-3.255235,-5.156297,-2.884301,-8.555164,-8.197963],[1.334962,-9.426624,-3.842969,-0.287465,7.679991,3.052706],[-9.476910,-3.166135,3.691508,2.726466,-0.017569,-5.230123],[1.821449,-7.700512,-0.147521,-7.822340,2.550775,5.990482],[9.529698,-7.246810,4.533678,2.290889,-1.531568,9.122038],[-2.108021,2.965097,-4.186004,1.280290,-3.427405,-4.492880],[0.802235,-6.393910,8.055545,-9.682238,5.670044,9.293941],[5.739655,-8.750113,-9.931968,0.078896,-9.417930,2.133654],[-0.073047,-7.826926,9.188976,1.753177,5.440200,9.677177],[-3.799282,3.409983,-9.156941,-6.940311,-0.467919,1.863833],[-1.835681,0.320122,4.506888,8.741446,-0.402899,-2.121382],[-5.046129,-3.635053,3.939313,-8.850103,5.020345,4.096016],[-7.911636,5.981328,5.489397,-9.399839,-6.216846,-2.801142]],[[-3.142238,3.728470,-1.336276,-9.227343,-2.012494,-1.549389],[-3.368764,4.306792,8.398387,1.719183,-2.926533,-3.714238],[-0.574384,8.954147,-0.653329,-4.642286,8.074300,1.849609],[-5.206887,5.033550,-4.579491,-0.233631,-5.901340,5.505692],[5.357013,-4.778445,1.738861,1.908354,6.412335,-4.976366],[-4.304992,-9.843623,0.834783,9.838069,-9.871363,-7.234976],[8.524424,9.646501,-2.361640,2.442173,-6.874228,9.629062],[-3.514777,4.340400,8.043237,4.152266,-9.584887,5.685004],[-6.338541,2.663602,0.025512,8.584132,4.685475,2.417398],[3.975120,8.622403,-1.320777,-1.064544,7.615095,-7.515668],[9.985680,-7.286071,1.348679,6.760870,8.305994,-7.796796],[-8.630787,9.895045,5.189479,6.686384,0.622599,-7.108754],[6.233760,-6.249417,-1.114339,6.024571,-2.829227,0.447015]],[[-1.511056,8.448760,-7.831640,-3.583848,-7.573869,-1.381011],[-8.795476,-9.030844,-5.198525,3.360750,5.291477,-5.086004],[-9.983752,-6.561196,5.483313,7.793961,-6.143595,5.276657],[-8.334082,-3.926650,1.857661,-9.118160,-1.036341,6.250308],[6.085670,2.026671,-8.752130,-9.114075,3.379750,-9.074459],[4.302133,-8.144178,-1.390950,-9.706735,-1.540598,4.390666],[0.130823,8.280359,6.052642,-8.461979,-0.879397,8.546917],[7.857568,5.161751,-7.533835,2.770462,5.774172,-5.113132],[-5.488814,2.541320,3.950620,-9.196982,-9.523977,-3.332554],[7.230963,3.497080,-3.281452,-1.379855,-6.995839,4.851556],[9.648452,-5.677431,-1.228171,0.491671,3.226875,6.572018],[9.389947,0.129123,-3.613605,1.418918,-9.703698,4.482526],[-4.460716,-9.318992,2.366263,6.079820,8.604425,-7.266370]]], dtype='float64')
module1.set_input('var_276', input_276)
input_286= np.array([[[-2.915671,-4.317411,-5.628181,-1.059870,3.202461,7.106006],[-7.789615,5.859627,4.515334,8.944357,7.396829,7.583927],[7.001371,4.534966,-4.911709,1.881216,6.784912,1.515913],[3.910178,-8.149575,2.943293,-7.982305,-0.379632,3.751136],[-8.010700,2.804174,-6.998324,7.918013,-8.870393,-6.577416],[-9.419585,5.779043,5.685347,7.389713,1.120757,-8.845642],[2.184726,-9.887953,-2.468413,-2.447729,-7.774464,-5.205103],[-2.866380,7.948667,5.607364,0.671006,5.341176,3.606611],[0.680227,8.251910,-5.461983,-4.385580,8.475729,-7.515496],[-1.001286,-7.874766,-2.400831,4.019591,-8.277331,1.140447],[4.066346,6.051191,-7.314358,1.190459,6.490105,-8.288701],[-1.071961,-2.894523,7.485941,-9.636151,4.959801,-9.690442],[4.411066,-5.088380,-3.381677,6.504055,-6.506268,-9.123496]],[[-4.936475,6.683920,5.361610,0.581555,-9.631646,1.617280],[-4.669087,3.303003,-0.951388,-4.661550,6.929765,-5.550361],[-0.778863,6.687204,-1.690063,9.607428,-1.480009,2.937151],[-0.637412,8.444771,-6.418638,-0.365437,-9.911103,-2.498039],[-8.390966,9.340146,6.266385,2.131183,1.276020,-4.145778],[2.700959,-7.776538,-9.706785,3.208227,9.310997,0.379652],[3.702839,-7.530154,8.044260,-8.983158,0.450597,-9.780630],[1.399485,0.338842,-8.429713,9.704266,9.630743,9.018632],[2.772011,5.120296,-4.370019,-7.283429,-5.226832,1.553617],[0.888946,9.459900,5.206058,6.998909,-9.665473,-9.235937],[-0.770620,-6.075448,8.196283,-6.554471,-1.106186,5.621832],[-1.690158,-3.470856,3.222641,9.993242,0.522313,2.800541],[-0.561608,-5.906982,2.395385,8.638838,-7.907531,-1.727498]],[[-7.537719,-8.517902,-1.919025,8.166157,9.705986,5.128398],[3.462378,9.103134,-1.920766,-4.812158,4.572121,3.772351],[9.697263,-9.748709,-0.036063,9.133620,2.212123,7.891372],[-1.934985,2.909272,-9.431235,-0.873156,3.702340,-5.990926],[-2.823634,-0.771645,6.008451,5.708982,-8.511310,-7.654216],[-8.610229,3.579340,3.930356,7.732419,8.932412,9.104381],[2.914800,-0.173237,9.809401,-1.697260,8.031033,9.663051],[-7.172567,1.437904,8.527425,0.076572,9.693808,5.724346],[6.463728,-6.347883,8.392533,-2.859453,0.512942,4.155795],[-0.447274,4.551057,-8.516745,-2.900020,3.938275,-5.910709],[-2.737181,-9.951150,-1.517534,-3.144935,-0.246567,5.088453],[5.661680,-3.053792,-5.234269,5.918340,-7.767707,-2.620642],[-2.225663,0.684915,-0.295450,-5.822252,-9.003279,-3.006918]],[[-7.239833,-3.219911,-4.966061,7.540029,-5.977053,-0.078207],[8.328044,9.329581,-9.315265,5.895843,-8.623585,-0.497730],[-3.546744,9.579798,6.243295,0.193916,5.948129,-1.025564],[3.539636,1.976612,-2.344233,-6.880680,9.094705,7.413744],[5.123345,-5.695270,9.475858,-8.411021,7.094695,-8.636229],[-4.109750,5.447057,-2.626257,8.020542,6.463553,8.425142],[-0.107238,9.678686,4.977117,-0.092143,1.764387,-3.200154],[8.993178,-7.554653,9.800404,-0.409020,4.121051,9.720833],[7.465533,7.841105,3.047082,-9.147974,4.717274,7.765615],[-1.993295,8.765758,0.160880,9.835988,5.708518,1.497973],[-2.092685,-9.315631,8.978552,7.522107,-4.007529,6.495024],[7.792734,5.410447,-8.980145,8.063817,-3.789454,-1.952044],[4.741438,6.305092,-1.259821,2.589224,-3.111014,-7.324021]],[[6.584116,-4.192049,-0.282119,9.485943,-5.847769,-5.030719],[4.219813,6.170927,4.019039,0.041908,0.809215,9.575747],[-2.684327,8.256283,-4.018097,-6.552868,9.114148,5.419779],[4.207042,-2.634713,5.244860,-2.212469,-2.013380,0.727366],[1.780337,-7.286241,4.640761,-1.916676,-2.684194,-8.076255],[5.068378,-2.074486,2.625445,6.016458,-3.404551,-1.444526],[-2.324755,2.472183,2.304051,-4.817389,7.250563,8.706203],[-1.810163,-1.792734,3.911686,6.527570,-4.523178,-3.480443],[5.839241,-7.725203,3.268049,-7.039463,3.073796,-7.714456],[-0.336347,8.509994,-2.733014,-2.337469,9.119807,4.633962],[9.852919,0.894448,4.969076,7.357688,5.294246,-9.982502],[2.286012,7.282394,-6.587420,6.323425,-9.471527,1.460431],[0.489058,-4.582232,-8.817774,-6.839610,-9.086930,1.522568]],[[8.491278,6.143157,-6.004599,4.896806,-1.674721,-5.043586],[-8.137916,0.649684,3.229736,0.451374,-3.285404,8.675566],[-9.885622,-6.928064,2.878102,-5.702747,-1.518748,-9.509010],[4.267609,-0.974948,-5.723737,4.684593,-0.482400,4.994519],[3.988461,9.859931,-4.453109,-8.601847,-8.203437,-6.737385],[5.849417,-3.041324,-7.290707,-6.732884,-6.565606,8.540585],[-1.772791,6.726483,7.828052,-3.610181,-9.770839,-0.711522],[-2.887088,9.825401,7.309197,-2.750441,-5.396407,-0.381709],[1.721470,-7.195278,-0.293028,-1.934536,-4.835213,8.512352],[3.364082,-2.719304,7.646804,-7.675983,-2.450039,-0.050456],[0.793512,-9.690208,3.432266,-5.940719,8.195093,-5.450720],[-1.630876,-5.402487,7.996998,-3.567715,8.952493,-1.297888],[4.562137,-9.152187,-2.799449,3.491574,-9.036553,0.511456]],[[2.109745,-4.282323,-3.741940,-8.364954,-2.544063,-5.643881],[-2.493262,-8.196717,1.970032,1.697089,2.455322,-0.085493],[-1.359754,-0.137941,7.773996,8.670651,3.444830,-0.391861],[-5.944528,6.551564,7.953007,-5.958038,-9.540492,-0.349516],[2.059724,4.775848,0.595685,-7.735485,8.872718,-3.195361],[-0.902765,2.660306,-2.630919,-7.375954,-0.960511,3.879036],[1.565224,-8.461701,-8.194422,5.700351,-9.099719,-9.186310],[3.937655,0.813399,5.864361,0.511950,9.064170,-3.975047],[-8.836745,7.244090,-3.706890,7.217238,-7.152919,4.735775],[-1.124880,4.500879,4.084536,-5.153050,-6.806476,-6.111037],[-3.030092,-1.015962,-6.691637,1.475046,8.936925,-7.425732],[9.345221,2.949693,6.106452,-0.472105,5.545202,-5.628141],[6.957669,6.363349,-3.405075,-5.585140,-5.338830,9.273600]],[[7.982805,8.710791,6.650383,-0.146426,5.702684,-3.468947],[-3.366132,-0.434278,-2.783525,6.612100,-2.673859,-1.884087],[-1.073855,6.265464,3.337169,7.839678,1.658292,0.400194],[-4.294705,7.035773,9.521742,-9.751155,-8.326169,2.778166],[7.057656,-0.836962,-9.491051,3.865792,0.758100,7.958133],[9.304125,1.038595,3.678357,0.555387,-2.840903,-8.146819],[-5.941185,-8.785900,8.109900,-9.323865,-2.290040,-9.321340],[0.093949,2.223630,-6.181089,0.547469,4.843602,-7.459093],[6.207701,9.782389,-3.618818,5.347190,-2.968419,4.182942],[4.961707,9.210984,8.941777,-8.227658,8.046293,0.350645],[-8.537227,9.552625,-6.549610,4.200722,7.056247,3.450937],[-0.415070,-8.258140,-1.343181,-3.154951,7.576162,8.221001],[-7.412873,3.728052,3.486452,4.941114,7.988168,-5.257671]],[[5.947671,2.238300,-2.002301,-5.751050,4.614104,1.028108],[2.140353,-2.577020,1.143557,0.114903,0.512478,5.380074],[2.788731,1.824048,2.394589,-5.410976,4.313778,3.819936],[7.242225,-0.349162,7.681322,-9.018385,8.079449,9.904619],[0.571642,-6.402826,-2.722628,6.640427,1.855803,-8.018800],[-3.700741,9.230289,4.577307,9.724244,-8.486282,5.968452],[-9.254969,-1.189844,-6.502202,-8.067629,-5.131209,3.799043],[6.183588,9.719599,1.641658,7.957596,-3.486598,3.531361],[-5.269690,-2.359063,-2.958534,-1.641794,-5.566867,-9.171534],[-9.682750,-0.052946,-5.248271,2.228346,-4.639491,-5.515413],[2.568096,-7.229441,-9.679326,5.841128,-0.348000,3.056627],[5.635114,8.599530,2.059871,3.012281,5.792031,-2.601518],[5.110487,8.086775,-4.619393,1.997140,1.945196,-0.026486]],[[5.610513,-5.075661,6.863280,-0.295220,2.570151,-1.484472],[9.916522,0.535864,9.364137,-7.461957,8.689496,5.920148],[4.323637,4.024667,-4.261817,-8.622804,0.181270,7.386802],[8.190025,-2.028115,-1.348981,4.448412,-9.315963,-0.187306],[-5.848633,-3.954864,-4.108809,-3.940513,-3.158145,-7.480996],[2.554197,-4.697740,-3.677417,8.748778,4.015696,-4.998250],[5.661784,6.733355,-2.241227,5.534651,4.781804,1.705958],[6.742330,1.905284,7.985123,-6.558833,8.781785,-2.512814],[1.651787,0.709477,4.295713,-3.010078,9.954919,-9.329655],[1.610864,-5.422027,5.020264,-2.066305,0.907490,-4.512500],[1.011740,5.863500,8.602811,-1.453575,-9.851514,8.688615],[-0.713206,-0.528571,3.988534,7.402245,-2.387356,3.084800],[2.310741,7.800367,-8.604259,-4.793134,-2.133014,-1.546046]],[[2.518883,-1.817340,-8.841376,3.426273,9.085394,-1.280363],[-7.246793,8.637355,1.531305,-6.017929,-6.307430,-8.486682],[7.813471,7.931190,-5.458388,5.877864,-3.155121,6.646119],[4.914807,2.549361,-0.735461,1.783418,-1.337239,-2.581569],[-8.967189,-3.384101,-0.020683,0.141934,7.913521,7.806295],[-3.362236,2.701574,2.382238,4.980377,0.421198,2.791115],[-2.927685,-4.294313,-3.541610,-3.241142,7.059208,0.888980],[4.489691,9.961245,2.636232,8.713786,9.130725,2.944844],[0.290714,2.759799,0.381051,3.479497,-8.479465,-6.250720],[-5.863640,8.633802,-2.741864,2.435319,4.472828,-8.328080],[4.050724,-3.139604,3.022011,1.454954,-5.873101,7.675614],[-3.157082,6.699745,8.381850,9.604965,-2.877731,9.280291],[0.156255,6.828916,-0.048253,-1.138200,6.897326,-2.928364]],[[-8.915948,9.835084,6.526884,-0.924827,8.329067,-9.067896],[-9.466802,-8.973065,-1.497617,5.644475,-7.659936,-5.315214],[-8.643479,8.255950,0.765507,-8.625001,2.046429,-6.977259],[3.038322,-6.845675,-3.755209,4.071315,-6.667392,0.633258],[4.663253,6.700499,9.789175,-3.783813,-9.887848,3.132253],[-8.564803,0.348524,-8.896035,-8.849967,-5.028936,-8.142692],[7.206332,3.650917,-7.880327,-7.627504,2.554162,6.858295],[6.846370,8.316408,2.659990,2.203538,-2.016124,-8.504844],[-5.984771,-8.544717,0.350011,3.015738,-4.209011,3.245468],[6.803706,4.089235,8.973434,-3.064544,-3.598985,-7.162520],[-0.029193,8.448136,-0.243174,5.768753,-0.877815,0.626998],[2.028791,-0.011804,-3.851670,-8.543089,7.746873,-7.014356],[-5.489908,9.561183,-6.834730,7.847485,6.589512,-4.559760]]], dtype='float32')
module1.set_input('var_286', input_286)
input_291= np.array([-8.123699,-7.271753,0.627272,-0.676870,-2.688500,5.615915,-6.681934,6.515123,3.339966,-2.410624,-1.776206,-3.870591,5.616051,5.710729,0.990379,-6.393121,-7.246041,-7.904130,2.454487,-6.308098,-5.643850,-2.246947,7.562910,-1.338388,5.637167,-8.826176,7.212301,0.247917,-1.575976,6.063176,-3.240046,1.248903,4.128870,-9.305623,7.968870,-3.178152,-6.912791,-7.834775,-4.046921,-2.224701,-9.957929,9.174790,-9.208784,-0.142700,-1.075378,-7.947729,-7.237783,7.981366,5.498117,-5.193957,-0.001722,-1.825742,9.633989,-7.804178,-9.033213,9.608055,1.221764,-4.792707,6.414815,6.311442,-6.009241,-2.234823,5.793907,-3.610638,-4.594698,2.059457,-9.231735,3.439854,9.417819,9.571504,2.593864,-7.969943,-5.723689,-7.909417,1.247444,5.809765,9.619092,-2.139158,1.503793,5.714493,3.899108,-6.942267,2.588730,8.271771,5.058107,-3.238023,-9.121229,9.362282,9.702808,-6.804378,7.749655,-7.424503,-8.154191,-6.313430,-8.874100,3.429124,-3.664899,4.764986,4.906385,-1.028901,6.865363,8.991128,7.213382,-0.935891,-2.511244,-3.706301,-6.614640,-8.825582,8.983320,-9.826423,8.043350,-2.089826,3.766589,6.166059,-8.148101,0.106731,-4.964415,7.528986,-8.329988,-2.723405,1.469938,-9.363050,2.967506,-8.699533,7.368590,-5.795279,-9.922502,6.782326,-4.509888,-2.578262,-1.755397,9.015219,5.905005,2.519959,-8.659290,-1.824941,-8.552304,-8.853816,-0.106421,-0.498307,3.266942,-4.915237,7.546399,-1.992127,-8.120666,9.857968,-4.886820,4.128763,5.542210,0.334098,-2.355571,9.559119,2.660748,-7.016378,-2.575247,6.003479,-4.746425,7.331362,6.342529,1.180389,6.427769,3.469141,0.828153,8.008869,3.659299,8.693823,-2.840494,-7.213809,-2.627843,3.139669,7.499309,-3.251521,-9.714288,-5.616435,0.524067,3.237086,-1.254335,9.912167,5.027416,-2.821191,2.635291,-9.237455,9.582935,0.596780,-9.488586,-0.591044,-2.330453,5.895272,8.237662,-0.806333,7.205413,0.189035,-2.039530,-7.590757,3.369025,-0.588005,-8.268336,-5.382935,4.714133,1.472939,4.728097,-9.436236,-8.965171,-8.344997,5.213121,0.476982,2.331159,-7.553934,2.460200,7.755529,8.551800,0.271627,1.395547,3.857859,-6.871678,-4.963932,7.118668,6.685304,-5.869345,2.932757,-9.442224,-0.037529,1.003404,-4.372035,7.360286,6.284211,2.877279,-2.515506,-8.984818,-4.499085,-3.437112,-8.223103,1.706194,-8.545296,-0.193552,7.325226,-6.231416,-5.753848,-5.490912,-0.593293,-0.975313,-4.555898,-7.319221,-7.935794,0.896045,2.891281,1.715865,7.725090,4.840573,-1.283645,3.607901,2.447994,-0.052017,1.683577,-4.582818,-8.221241,2.175389,-9.549501,-7.162708,-0.730163,4.604255,5.178967,-9.528866,5.462898,-4.337002,6.402577,0.001561,5.447642,-9.578792,-4.039884,-2.130540,0.797459,-6.889037,-6.673960,1.458651,-3.382600,-5.627932,2.171451,-7.436140,0.185326,0.963064,-9.013548,7.601663,-9.834623,-8.632590,-9.113971,2.442028,-0.584928,0.948976,-6.301498,9.056260,-3.052486,1.570535,-2.337240,-6.027642,-8.971642,-3.784707,4.378615,4.604130,3.716999,-7.214413,-0.758756,-1.078531,3.390842,9.569640,-6.322307,-8.848267,5.007358,-1.749333,7.822470,5.857847,-5.393669,-9.464562,2.856231,2.586191,9.787157,-5.859129,-3.100269,-3.954525,-9.618445,4.770595,4.159872,7.234736,8.383083,-3.241892,8.079952,8.615571,-5.702959,4.454401,0.357967,-1.116174,-7.500946,-3.235465,4.911627,6.190289,0.879597,-5.582471,-3.557616,0.826106,-3.122989,7.858764,0.195397,7.624053,-7.241378,3.964348,-1.619518,9.978142,-9.321878,3.121939,-4.058843,7.814479,3.193469,-3.391932,-7.256732,-5.109804,-3.676331,-7.461748,-6.562267,5.410654,-1.544139,-9.955947,-8.300403,5.599944,5.205698,7.730494,2.784874,4.658709,-9.011937,0.080790,8.546680,3.204453,1.883535,7.809492,-7.079729,-3.404068,7.336269,5.972542,-8.559333,-4.231549,2.718627,-2.465556,1.799810,2.097661,0.217835,-7.883622,-8.128263,-0.623485,1.202768,5.721724,-4.612742,-4.136080,-7.633316,-9.601528,-6.873246,5.578538,-6.094061,3.191196,4.369226,2.060387,1.349507,-5.067887,-8.438868,4.145620,-1.440675,5.614366,-9.407371,9.529416,9.693921,-4.286946,-5.169953,5.119122,7.137905,-4.791487,4.868411,5.960016,1.636236,5.123485,3.278194,9.354753,2.151096,-0.122549,-7.294528,9.003412,8.114491,-4.991031,1.941210,-3.272542,-0.027536,6.787745,2.417169,-7.967289,-9.187333,-0.973411,-5.914618,-3.437921,-9.914571,9.363628,-0.751577,-6.969705,-0.792042,0.378003,-2.206649,-6.813075,5.266940,-8.413920,3.374969,5.416852,-4.543015,3.916589,-3.973024,2.570857,-2.370151,0.741612,4.534582,3.244256,-6.805392,4.835385,-8.707233,7.032023,0.806807,-2.003764,-2.447618,7.345398,5.126763,4.652269,-3.907091,-1.268914,-3.490754,4.627120,0.278442,9.973125,0.075695,-8.440559,5.860536,2.835643,-0.732694,0.188151,-8.804762,9.463202,1.721743,7.255297,0.559890,-8.368734,2.699060,6.432825,-5.039805,8.040271,0.644462,-9.643228,5.289734,-4.654007,4.417044,8.214501,-1.539615,-2.346492,5.114238,2.365373,8.512817,-0.357643,7.964678,-6.927489,5.722155,0.823040,9.964208,8.962315,-6.967448,-7.168759,0.439010,0.903207,8.327185,2.069604,0.408689,2.180423,-5.939706,5.945608,-2.844365,-9.851782,4.784138,-1.925310,2.251799,-4.332446,7.219322,4.728495,-1.357716,-3.197109,-1.744947,-5.869466,-9.682465,1.916401,-7.896713,-3.543169,-2.472416,-7.794683,6.337313,-9.478110,-5.631365,-6.850033,-4.816963,-9.547756,-9.130948,-6.905318,-4.083763,-3.575000,-5.547831,2.982919,-5.327983,5.756750,-5.026770,9.619678,7.718360,-4.733210,-8.588038,9.137747,7.981289,3.424198,6.221188,-5.484313,-3.000387,-8.346242,-5.607926,1.559478,-5.085161,2.347058,-9.444623,-5.894822,3.209403,5.615498,7.913104,-2.694916,-0.610766,-0.739462,2.606989,5.255571,3.397681,-5.977583,-9.834544,-5.983311,1.121361,9.720044,-5.569440,6.407365,3.946223,5.555562,0.847040,0.063084,1.776365,1.120044,-0.809811,0.791976,0.505030,-1.622640,4.144455,-7.707987,-5.190568,6.680312,5.246702,-7.543529,7.396944,7.912424,1.704739,5.244458,-1.945678,4.774084,0.487126,-3.513944,5.780360,-3.821809,4.939058,9.402967,1.974317,0.532559,2.348384,1.687973,4.421141,8.489070,0.363769,-3.171738,-1.924445,-6.049933,-3.654125,-4.374212,2.046889,-4.664226,8.645804,8.053928,-7.447932,5.914370,-4.433557,4.236219,3.004920,5.996309,4.943660,-1.462952,7.483298,1.774395,5.548097,6.939310,5.444490,9.431860,9.579957,7.844553,9.847918,1.272023,0.882642,-6.995810,-3.389146,6.000802,8.116094,4.709016,-9.739450,-9.379027,-6.350747,3.157501,8.759014,-4.907961,5.447461,0.353491,-0.466267,-5.612945,9.232392,-7.992122,-0.102588,9.707068,7.609646,0.551864,2.795391,4.051140,3.065186,1.671274,1.882846,-4.983531,3.251585,-3.175966,-8.195005,7.688429,7.405747,3.109920,0.290145,6.419616,6.867082,5.048977,-1.852137,-7.898935,8.327162,-8.846211,2.808425,6.523353,-0.367876,-1.630929,-4.510396,-4.415263,1.446975,-5.515843,-8.112783,1.641413,-9.873778,9.725768,3.138431,-9.832008,9.384206,-2.601689,8.807583,-2.345744,4.152013,1.958576,-2.945471,0.890640,9.377785,8.044717,3.172426,-8.045868,0.427488,-1.500937,0.370917,6.399311,2.085484,-2.527071,2.856414,3.239391,9.945239,-8.321732,-0.410307,-6.341480,9.461684,-1.092665,-4.917259,-2.908728,-5.522965,2.022675,-1.454205,-1.229518,-3.995236,-9.739219,9.616849,-9.824883,-5.153748,1.992431,-9.701652,8.270640,7.951480,-3.479613,-5.936527,9.988670,0.037079,-8.328380,5.062689,2.216494,9.856639,8.597094,8.692135,-8.485404,-8.402089,1.956731,2.366405,9.774018,-3.445470,-6.534112,-4.647441,4.732577,-6.336444,6.532294,-2.902947,7.845147,3.992812,9.922665,-6.916078,-2.904432,9.364907,6.026488,-8.577907,0.978115,-6.050515,3.284380,8.118290,-0.789621,7.080280,1.655379,9.568528,0.931630,7.478968,2.422985,-5.306989,-0.546159,3.351407,-8.529178,-5.903606,-2.937872,-0.632196,-2.071641,-0.702956,1.491925,-4.237979,-1.339362,-3.458163,-9.972458,-9.970074,3.928108,-3.175589,-0.662304,-2.478431,4.915386,-8.449134,1.067365,-1.434872,-2.937213,8.358482,-5.061502,-2.161222,2.664518,-1.768449,-9.709935,3.017705,-3.316588,3.375443,-0.568879,8.028746,8.835418,2.060977,-4.554139,-4.132241,5.152828,8.317151,5.479517,-1.952064,-1.341288,2.992254,2.609821,-4.136311,-1.865034,-9.155815,7.817290,-1.309174,2.734654,-2.632951,8.473605,-7.313094,-5.657363,-6.285275,9.249520,-4.749064,-9.803485,-3.190331,-7.230527,0.792607,-8.187274,5.913664,9.784615,-4.526560,-0.692447,9.294018,9.019583,-5.981623,6.855808,-0.257950,4.708858,-5.450792,-7.553401,0.954797,7.179786,5.115323,-2.718375,-0.009927,-0.800368,-2.662520,0.246702,9.061912,7.659439,-1.688263,-8.602789,5.445630,3.096024,7.855122,-3.068891,-1.266234,6.284514,7.418834,5.808192,-3.467610,5.396194,-1.069583,-0.970486,2.599747,3.374163,-1.926237,-6.379274,5.757268,8.856478,3.331099,3.032002,5.819977,6.516802,-5.684503,-3.216692,7.538073,5.796615,-9.993929,2.691948,7.916450,0.344843,-3.360986,2.264260,4.941939,6.435396,-5.534946,8.136800,0.980260,-2.505357,4.412857,-4.534999,-3.175691,-9.699257,1.880797,3.216185,-0.156594,-1.695407,-2.174205,-8.200095,-7.738741,1.167192,-9.960210,9.978974,6.739868,3.296656,-2.370151,8.715478,8.555969,-1.703709,0.731883,0.700090,-0.468144,3.597854,9.324642,3.277384,8.999517,-8.287450,6.782873,6.173030,5.596177,7.963618,8.744817,8.923897,-3.229975,7.902111,9.469642,9.600015,9.929729,-0.413336,-3.479342,-4.165281,-3.675082,4.097098,-6.146192,9.838692,1.707754,-3.906553,2.631241,3.680781,1.530112,-6.726917,5.569946,-8.479922,-1.642064,9.900151,-9.420781,-4.144442,-9.649565,-4.949100,-6.265415,-9.710864,-0.956804,-6.405449,-4.940496,4.346821,2.458500,-3.063278,0.295756,6.693086,-6.539674,-5.409564,-0.113262,1.289640,-0.699969,-5.937478,9.516141,-7.601500,1.292480,-5.025558,-0.061288,4.402372,0.685661,-5.404959,-6.890325,-6.807290,-9.575567,-6.806966,5.022492,6.079976,9.190908,-2.600945,7.310634,6.896856,-5.588992,-6.408838,3.277377,-3.124091,-9.074567,-8.165796,-8.749594,6.481311,5.577781,3.499369,4.026440,4.892143,-8.938228,-1.269127,-6.637173,-8.283148,5.330271,-2.599714,-2.541467,6.371009,6.317639,-8.787051,-6.288304,4.859105,1.288847,-8.970382,7.711079,2.428132,0.163848,2.348602,0.442763,-6.074632,7.041020,-3.305742,0.504378,-8.271065,5.118865,-7.639898,-9.258390,5.747498,0.431108,-6.533791,6.454082,-1.873331,3.680664,7.173033,-4.783737,9.696748,-1.926169,5.556850,4.688441,-0.777266,-2.702409,-2.029482,-9.876126,-1.686881,6.066885,0.959020,5.180472,-6.911320,1.590810,9.256514,3.105183,8.286924,-5.532955,-4.625045,-4.083147,-6.485932,4.754047,4.602164,3.827815,0.518598,2.610786,1.894889,0.605906,3.448341,6.210635,-7.934922,-5.236931,-2.799423,-0.589415,-5.944451,-0.332192,-0.961348,-5.898649,2.464384,2.886725,-5.938894,8.914933,0.506031,1.740452,-0.203371,-6.749588,-0.398377,-8.295612,1.660299,0.769112,-5.243486,1.300558,1.634510,-6.762021,9.735681,-6.023100,-8.322686,9.586106,-1.842228,0.689568,-6.505767,4.142332,-0.493883,2.005143,-2.521891,8.459978,-5.672577,2.828974,-8.629451,7.782433,-8.413019,-1.884521,1.614074,-1.544608,-2.536321,-4.909395,5.900571,4.018436,-3.035427,-5.723957,8.064050,8.190411,-5.008571,-7.281821,-4.536554,-3.400366,0.710881,-1.551857,-4.703958,-3.653589,-0.313243,4.603888,-5.589697,1.420132,-0.784773,4.063517,9.295948,2.455325,-8.999426,6.305528,2.112170,6.356502,-0.937351,-8.925921,-2.637045,7.858954,7.030791,3.760519,-5.342148,-1.159699,-3.309540,-6.412103,-3.281552,5.684157,7.976555,-6.279390,-6.312399,9.104594,9.691666,4.747247,-8.578809,-5.809522,-0.021072,3.501615,-7.556183,1.014561,-9.977845,-9.044312,6.484218,1.514913,-9.830453,-3.344759,5.441973,4.268810,5.201965,-6.025119,-4.048653,0.881324,-8.960665,3.477781,2.226453,1.448199,-1.284763,-4.187936,1.889926,4.256483,4.928740,-3.557655,1.566490,3.924266,3.015465,2.196889,-1.114077,-3.208054,7.636748,5.531227,-3.369373,-4.509896,2.918641,-6.606195,-8.473330,-8.604095,4.954591,-2.233424,5.908438,4.646040,-6.510723,-6.005921,-4.989964,0.340822,-0.504968,-6.334137,-0.539610,3.982560,7.251503,-4.678008,9.559378,-5.208057,-9.065556,-9.606360,-4.731750,-0.691222,-8.787178,-0.440551,2.167701,-8.366768,-8.081651,-0.952193,-3.384622,-2.080970,3.165059,7.997000,-8.944094,-8.442894,6.685796,-0.342066,-4.559600,-8.071719,6.966042,3.102815,-4.800477,-9.231770,-4.737988,4.265550,-7.038204,0.087801,6.035616,4.886276,-7.717622,-1.784035,-9.928881,9.823608,7.203365,4.433813,-9.647034,0.609990,-0.996046,-9.678741,-9.880881,9.860190,7.778210,-8.528904,-3.423827,-1.363639,7.860427,-7.079358,3.375075,8.274578,2.932909,9.660715,1.913922,-0.380813,-2.189974,4.420324,2.359189,-2.389122,7.400339,0.040736,-1.710969,-6.524080,-7.628576,0.943059,-0.428952,-5.551364,2.620038,-6.839548,-1.813372,-2.767949,9.633675,1.757466,2.786751,0.075834,-7.552829,-0.111977,4.589358,8.433116,8.209304,8.860484,3.024740,2.617872,-8.055326,4.314701,-4.010320,8.713792,7.112001,-0.434329,-4.860739,8.884293,-1.639384,1.771728,-1.036403,6.484424,4.450276,-7.932472,-1.406523,0.027276,4.376346,6.291353,2.660803,7.002317,3.765564,2.898086,0.191625,3.431757,-2.523655,8.358176,8.205823,-0.600525,-3.080224,9.031417,-8.171948,5.053530,4.779402,8.300339,3.635491,-2.275267,9.054848,7.744284,-3.117770,-0.653260,7.281836,-2.036388,4.640388,-8.801132,6.356006,-3.507787,-7.233373,5.351986,7.950705,-9.307536,3.869044,9.394515,-8.860296,2.221638,8.480448,0.611660,-9.893140,4.890538,-6.930702,1.910378,7.409407,8.651111,7.189105,-7.778696,-8.208494,6.443206,4.583902,-8.721545,9.975562,-6.445639,1.376599,-2.804845,0.130301,9.327089,8.224021,9.953469,4.380738,-1.363887,0.817658,2.538887,-3.303279,9.509327,0.486572,8.291689,-0.268685,-5.222361,-1.718629,0.018245,-0.206157,9.468534,2.824280,2.605341,-0.274963,5.440881,-5.024147,9.332665,7.865193,-2.525329,-0.365872,-5.316472,7.302535,-8.682965,9.926100,-6.456172,6.072943,6.465943,-9.183901,4.925576,-9.681211,1.443314,6.781890,3.776521,5.965515,0.674430,-3.995685,-9.663140,-8.617737,9.359516,-6.211719,-2.702965,2.498394,-4.095043,-4.919627,-5.587673,-6.240827,7.927901,-6.110730,5.005640,-3.072362,6.714458,-0.125514,-8.070582,0.583400,-7.100204,6.861664,8.183079,-5.492448,9.252410,8.823264,9.349377,2.288371,2.248279,-5.687757,1.176128,2.717481,7.539199,7.315338,7.616899,5.605191,-0.323824,-7.578889,0.263125,-0.652751,3.100557,3.127947,1.797405,5.279278,-1.903731,1.082790,-7.862453,0.764323,-0.027204,4.950622,6.357072,6.117889,-0.057260,6.504673,-5.139893,-8.046432,4.751986,0.327930,-9.098547,4.346451,-7.547960,-1.103227,9.590209,-5.921067,-2.411120,4.396945,-6.324925,-9.434071,-5.262092,-7.452900,9.292691,-2.009294,-0.325315,3.035155,-7.120814,-5.296384,-1.990466,3.901308,-4.053669,8.572212,-8.201887,-0.401390,-5.114998,6.374120,-4.756738,1.596888,-4.004895,-0.384422,9.541621,5.166117,-7.189223,-1.017182,-9.189061,-6.292407,6.164117,-4.678500,6.280532,-1.337994,1.663182,-2.165621,-3.480792,8.876045,-8.135944,3.184319,5.957725,3.252060,-4.185311,-8.180940,-6.037385,7.765306,9.401935,1.208300,-4.780348,-2.652639,9.373140,1.502277,-1.770040,-0.893045,-0.795483,4.962123,-3.766249,0.222492,-8.398723,9.098541,3.895863,9.234770,-5.845084,8.500288,-6.344553,-4.143705,-9.380267,1.493717,-2.090059,8.368453,-4.969611,2.838827,-2.014124,0.926023,-9.981920,7.904073,-0.144229,-4.844286,9.073402,0.995006,0.234780,4.388292,-2.391211,4.915845,-5.985107,7.575783,2.639462,8.356033,-8.296315,-0.451329,6.592217,-8.064810,-2.383050,0.529876,-3.458635,-7.284550,-3.253069,0.078022,-7.626033,-6.998933,-4.456294,8.418911,-9.540109,7.616471,-2.260562,4.767829,4.279745,9.286994,3.216104,0.727998,1.591255,7.504968,2.930772,-8.456428,0.506711,-4.835618,6.721949,3.058356,-1.665319,-1.547272,3.109825,-5.887917,5.672031,-6.645460,-5.784648,-9.860634,5.412143,-4.549711,-1.061725,5.417556,1.144736,8.066829,9.585723,-4.253880,8.211922,-1.135583,-1.174332,1.474480,-0.554247,-6.956830,3.675596,4.195594,7.267760,7.656862,-4.123718,4.693426,-6.534610,-4.308750,-2.995521,7.671338,3.818551,-7.297827,2.520700,1.565121,5.284594,-8.555846,-0.885554,-4.443932,5.326578,-5.344740,-1.121656,6.621399,-6.463929,-3.811506,-8.486901,1.060810,-5.393498,-8.511162,3.594328,8.007575,7.806588,-8.926059,3.463323,3.899813,-6.150363,1.987887,-9.831800,-1.509361,-5.709341,9.400632,-8.381597,7.635267,-3.517030,-4.449998,9.234970,-6.342664,-9.349781,0.894678,9.949627,-4.084818,-6.553117,-1.037645,9.708564,1.275864,-0.793817,-7.577860,5.886984,2.969678,6.365107,-9.217561,1.804160,-9.467957,5.531450,-6.635172,-9.476947,-7.818138,-2.585198,7.840271,1.101953,0.580575,5.290973,9.693486,2.467505,-0.344347,-3.294203,-9.494273,-5.520620,8.441641,-3.141026,-7.355566,1.208217,8.633405,-8.878737,5.713507,4.860969,7.958379,-7.807695,-5.422600,1.008172,6.317557,8.996225,5.703447,-6.599788,0.255614,-9.407290,2.118287,-3.545755,5.231154,-7.984333,5.553329,-3.759959,-2.635888,3.073933,-7.679862,-3.407099,-2.679688,9.954771,4.712543,0.266165,-0.522838,-9.968036,5.246710,-5.991461,1.314500,0.226602,3.383138,3.323256,-1.180425,-7.476145,4.819056,-2.689337,-9.651970,-3.891267,6.698340,-1.981108,8.333166,-4.037462,6.475993,-9.238539,5.574767,4.798954,3.309875,-3.563446,1.304174,-1.140004,3.455565,6.824864,5.419492,7.111539,9.760512,-7.251192,2.459812,5.256118,-5.652093,5.359615,5.847466,-8.868486,-8.402473,-6.180439,6.865630,-7.637506,-8.181488,-1.409411,5.017169,-5.708006,6.049897,-4.984684,6.678392,8.013873,3.988366,8.974153,-4.260404,1.426443,7.607079,-6.957468,-1.919387,6.138246,-8.564119,-6.826169,-6.226388,-9.232388,-6.288453,-3.870411,-6.933038,3.137693,-3.145114,-0.133799,-2.141135,7.704556,-1.770454,-5.528162,1.619106,9.054349,4.461121,9.595907,-0.687430,0.132048,-5.795803,9.674902,5.179606,-4.524235,1.950807,-9.536843,-5.842968,6.278655,-6.030699,-1.472539,-1.769907,4.667464,1.375400,3.092626,5.712654,-7.587951,-7.268176,-3.493788,-8.447271,1.283756,-0.870497,6.415244,-9.391510,7.666964,-3.064720,-4.419023,4.364792,-6.208501,-6.465700,-8.925137,-6.903730,-5.553013,-6.351678,8.505697,5.081013,5.165947,-9.887183,9.559016,0.418497,3.402514,-0.537518,-2.557714,-1.955548,-9.520350,-4.323735,-9.349936,-6.553625,4.677977,0.434556,7.208001,-0.541669,-8.438701,-4.693416,3.264839,-3.744419,1.271347,-4.816133,-2.014302,2.351736,2.514124,-6.117214,-9.996965,-6.414577,7.576035,-4.160564,1.675275,4.557071,-9.183514,8.955183,-5.305099,-8.945139,-1.319655,3.661333,8.303683,4.755394,4.287564,-8.071298,-0.082429,1.756532,2.289284,3.635898,-6.322289,-0.155173,-1.271510,-7.363185,-0.805672,-1.284471,8.758779,7.968214,-9.229488,-5.530052,-5.192638,-9.897028,2.219185,8.233394,8.873938,2.473784,9.987507,-3.154586,2.427963,-5.300698,-9.780417,-9.948909,3.855666,-1.145144,5.054744,1.610041,-1.778109,-6.066546,1.183841,-0.858185,-3.559007,7.908485,7.177679,5.704971,-7.042043,-5.302623,8.740516,2.160284,0.386103,-5.489876,-6.153161,-2.906770,3.232463,-8.647145,-0.108592,-1.126794,3.889493,9.477181,5.928471,9.490406,-7.011077,-5.557989,6.517541,-7.763274,-2.153971,0.171382,-5.736864,0.928609,-0.247173,8.564021,-4.508961,-3.275152,8.712618,-9.198741,-1.308391,-5.307439,-4.959503,-9.429919,-2.839291,-0.623908,-6.535218,0.487298,0.011394,-8.857045,3.992423,1.523584,7.448507,2.144286,9.754925,-1.875042,2.808583,-6.837434,6.670253,2.610991,-0.973673,-4.822398,6.268067,2.271309,-0.752702,9.777005,4.308627,7.980361,-4.010617,9.934168,9.302610,3.575805,2.136440,-6.345989,7.352440,-2.230121,6.159619,-3.003024,0.180019,7.974679,5.639966,8.702633,5.516535,-8.775718,4.519937,9.864916,8.025188,0.188013,6.624160,7.958451,-2.632036,-1.937505,1.182678,-3.723760,-5.707834,-9.610718,-4.663193,9.423296,3.770504,7.888627,0.603596,1.900546,-2.453696,2.999914,-0.961156,-4.654743,8.517389,-4.794461,6.618174,5.941126,-6.684638,2.612133,6.686013,7.072750,-5.789841,5.381366,4.821652,-8.107451,1.668563,0.860557,4.289096,-1.040537,-0.784732,2.408851,-8.406878,-5.252503,-0.705019,8.708084,-0.903523,-8.677249,-8.782490,-0.800901,-1.286306,2.071533,7.745521,1.656575,-2.214085,3.717590,-8.746790,-6.040864,1.281311,-4.463869,-4.012894,6.290267,-7.356583,-1.392253,6.470444,-0.735241,0.254598,1.628469,6.433380,0.164771,5.224770,-6.379978,4.448005,-4.208035,6.633343,8.655761,-8.138654,-6.457356,-6.539411,1.363614,-3.297420,-0.141890,5.415230,-4.438455,-5.512086,-7.533512,-8.281173,-3.983370,4.317214,-4.045347,6.478509,8.627477,-3.723738,-3.024589,-6.862213,-4.397143,3.744790,-3.829392,-8.754146,3.546797,8.707645,-3.367333,5.276144,8.698814,8.647666,1.016141,7.982312,7.872217,1.126384,8.999546,1.083023,-9.349742,-3.237000,-2.752892,1.136690,4.712203,5.968605,-3.186978,-5.911598,-6.057230,1.883956,-8.403124,-3.082555,-4.260197,9.122862,7.208811,8.377010,-3.272405,-6.347552,-4.832150,-8.791023,-2.659926,-7.092431,-8.665678,9.791872,-7.696646,6.919281,7.011189,-7.853383,0.907393,5.262313,9.794733,-2.131688,-7.740112,-9.055553,-5.770542,3.467206,-0.048247,2.526864,-1.826063,2.943115,2.369706,-6.989221,-6.832811,-4.359260,-1.714419,-0.987814,-4.458518,9.542248,-4.178377,9.255846,4.150641,7.819219,-1.687729,-4.581843,3.213826,-0.232280,-1.134031,-4.272140,9.296450,-8.065781,-8.912986,4.285174,6.067084,-0.943800,-6.800146,-4.156350,-9.640952,-2.866499,-2.545723,5.258420,-6.180578,-9.987221,-0.139612,-7.605876,4.612924,-5.800879,2.549126,-7.454731,-0.984582,-4.188097,6.702521,-1.485200,4.224103,-2.320204,-1.225185,4.484552,6.431616,7.101199,-5.945128,-7.173967,4.905227,-0.549239,-3.428200,5.271278,5.991512,-8.183850,5.660527,-5.753482,3.253648,-2.032413,-9.468898,-4.702272,-6.348385,-9.005316,2.439400,-4.949792,6.589821,-7.120329,-5.219547,-1.821370,1.940798,-5.173084,-3.481876,2.787819,6.836006,4.816197,-5.550540,-2.689079,0.544995,1.765714,7.722075,8.339585,-7.406678,-1.704570,-7.737515,-6.889423,0.640177,-5.546412,5.691739,5.625494,4.070175,0.782762,0.191154,-8.005320,-1.814648,5.729562,-4.414504,-8.584642,-9.137755,5.624804,3.961257,1.741814,-1.504994,-4.892748,9.799348,-8.593631,-8.509280,-8.274632,2.071272,2.883322,5.234229,8.694001,1.064490,-7.898012,4.266338,-6.692229,-1.726331,2.234356,1.662949,-0.119517,-7.736793,-4.587053,-6.823287,-6.437578,1.781143,6.934677,-0.522563,-5.368931,-5.410660,-6.320417,-4.481779,9.123695,-1.357079,7.126252,-1.047993,-7.077993,8.783860,-7.276182,-3.645353,0.060795,-1.852670,-3.371232,-1.513155,-5.004356,1.162020,-1.020411,-6.036840,-9.697158,-5.690911,-0.219495,-0.548968,1.675410,2.219639,2.940426,-7.111105,-5.668526,-1.097456,-4.135291,6.531361,4.719730,4.070318,5.622106,3.461713,-7.904787,0.009615,1.392275,6.413555,5.061156,-7.820834,-6.095628,-3.533363,3.179419,0.879931,1.890241,-9.744369,-3.572216,-8.290565,1.643452,4.153239,5.660890,7.581347,-6.315197,-2.446943,8.555151,2.987290,3.395640,-3.756215,-7.104404,-2.407497,7.193916], dtype='float64')
module1.set_input('var_291', input_291)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_146, input_147, input_153, input_170, input_175, input_180, input_276, input_286, input_291, )
res3 = intrp3.evaluate()(input_146, input_147, input_153, input_170, input_175, input_180, input_276, input_286, input_291, )
res4 = intrp4.evaluate()(input_146, input_147, input_153, input_170, input_175, input_180, input_276, input_286, input_291, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
res1_14 = module1.get_output(14).asnumpy()
res2_14 = res2[14].asnumpy()
res3_14 = res3[14].asnumpy()
res4_14 = res4[14].asnumpy()
np.testing.assert_allclose(res1_14 ,res2_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res3_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res4_14, atol=1e-3, rtol=1e-3)
(res1_14 == res2_14).all()
(res1_14 == res3_14).all()
(res1_14 == res4_14).all()
res1_15 = module1.get_output(15).asnumpy()
res2_15 = res2[15].asnumpy()
res3_15 = res3[15].asnumpy()
res4_15 = res4[15].asnumpy()
np.testing.assert_allclose(res1_15 ,res2_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res3_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res4_15, atol=1e-3, rtol=1e-3)
(res1_15 == res2_15).all()
(res1_15 == res3_15).all()
(res1_15 == res4_15).all()
res1_16 = module1.get_output(16).asnumpy()
res2_16 = res2[16].asnumpy()
res3_16 = res3[16].asnumpy()
res4_16 = res4[16].asnumpy()
np.testing.assert_allclose(res1_16 ,res2_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res3_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res4_16, atol=1e-3, rtol=1e-3)
(res1_16 == res2_16).all()
(res1_16 == res3_16).all()
(res1_16 == res4_16).all()
res1_17 = module1.get_output(17).asnumpy()
res2_17 = res2[17].asnumpy()
res3_17 = res3[17].asnumpy()
res4_17 = res4[17].asnumpy()
np.testing.assert_allclose(res1_17 ,res2_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res3_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res4_17, atol=1e-3, rtol=1e-3)
(res1_17 == res2_17).all()
(res1_17 == res3_17).all()
(res1_17 == res4_17).all()
res1_18 = module1.get_output(18).asnumpy()
res2_18 = res2[18].asnumpy()
res3_18 = res3[18].asnumpy()
res4_18 = res4[18].asnumpy()
np.testing.assert_allclose(res1_18 ,res2_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res3_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res4_18, atol=1e-3, rtol=1e-3)
(res1_18 == res2_18).all()
(res1_18 == res3_18).all()
(res1_18 == res4_18).all()
res1_19 = module1.get_output(19).asnumpy()
res2_19 = res2[19].asnumpy()
res3_19 = res3[19].asnumpy()
res4_19 = res4[19].asnumpy()
np.testing.assert_allclose(res1_19 ,res2_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_19 ,res3_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_19 ,res4_19, atol=1e-3, rtol=1e-3)
(res1_19 == res2_19).all()
(res1_19 == res3_19).all()
(res1_19 == res4_19).all()
res1_20 = module1.get_output(20).asnumpy()
res2_20 = res2[20].asnumpy()
res3_20 = res3[20].asnumpy()
res4_20 = res4[20].asnumpy()
np.testing.assert_allclose(res1_20 ,res2_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_20 ,res3_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_20 ,res4_20, atol=1e-3, rtol=1e-3)
(res1_20 == res2_20).all()
(res1_20 == res3_20).all()
(res1_20 == res4_20).all()
res1_21 = module1.get_output(21).asnumpy()
res2_21 = res2[21].asnumpy()
res3_21 = res3[21].asnumpy()
res4_21 = res4[21].asnumpy()
np.testing.assert_allclose(res1_21 ,res2_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_21 ,res3_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_21 ,res4_21, atol=1e-3, rtol=1e-3)
(res1_21 == res2_21).all()
(res1_21 == res3_21).all()
(res1_21 == res4_21).all()
res1_22 = module1.get_output(22).asnumpy()
res2_22 = res2[22].asnumpy()
res3_22 = res3[22].asnumpy()
res4_22 = res4[22].asnumpy()
np.testing.assert_allclose(res1_22 ,res2_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_22 ,res3_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_22 ,res4_22, atol=1e-3, rtol=1e-3)
(res1_22 == res2_22).all()
(res1_22 == res3_22).all()
(res1_22 == res4_22).all()
res1_23 = module1.get_output(23).asnumpy()
res2_23 = res2[23].asnumpy()
res3_23 = res3[23].asnumpy()
res4_23 = res4[23].asnumpy()
np.testing.assert_allclose(res1_23 ,res2_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_23 ,res3_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_23 ,res4_23, atol=1e-3, rtol=1e-3)
(res1_23 == res2_23).all()
(res1_23 == res3_23).all()
(res1_23 == res4_23).all()
res1_24 = module1.get_output(24).asnumpy()
res2_24 = res2[24].asnumpy()
res3_24 = res3[24].asnumpy()
res4_24 = res4[24].asnumpy()
np.testing.assert_allclose(res1_24 ,res2_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_24 ,res3_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_24 ,res4_24, atol=1e-3, rtol=1e-3)
(res1_24 == res2_24).all()
(res1_24 == res3_24).all()
(res1_24 == res4_24).all()
res1_25 = module1.get_output(25).asnumpy()
res2_25 = res2[25].asnumpy()
res3_25 = res3[25].asnumpy()
res4_25 = res4[25].asnumpy()
np.testing.assert_allclose(res1_25 ,res2_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_25 ,res3_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_25 ,res4_25, atol=1e-3, rtol=1e-3)
(res1_25 == res2_25).all()
(res1_25 == res3_25).all()
(res1_25 == res4_25).all()
res1_26 = module1.get_output(26).asnumpy()
res2_26 = res2[26].asnumpy()
res3_26 = res3[26].asnumpy()
res4_26 = res4[26].asnumpy()
np.testing.assert_allclose(res1_26 ,res2_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_26 ,res3_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_26 ,res4_26, atol=1e-3, rtol=1e-3)
(res1_26 == res2_26).all()
(res1_26 == res3_26).all()
(res1_26 == res4_26).all()
res1_27 = module1.get_output(27).asnumpy()
res2_27 = res2[27].asnumpy()
res3_27 = res3[27].asnumpy()
res4_27 = res4[27].asnumpy()
np.testing.assert_allclose(res1_27 ,res2_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_27 ,res3_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_27 ,res4_27, atol=1e-3, rtol=1e-3)
(res1_27 == res2_27).all()
(res1_27 == res3_27).all()
(res1_27 == res4_27).all()
res1_28 = module1.get_output(28).asnumpy()
res2_28 = res2[28].asnumpy()
res3_28 = res3[28].asnumpy()
res4_28 = res4[28].asnumpy()
np.testing.assert_allclose(res1_28 ,res2_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_28 ,res3_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_28 ,res4_28, atol=1e-3, rtol=1e-3)
(res1_28 == res2_28).all()
(res1_28 == res3_28).all()
(res1_28 == res4_28).all()
res1_29 = module1.get_output(29).asnumpy()
res2_29 = res2[29].asnumpy()
res3_29 = res3[29].asnumpy()
res4_29 = res4[29].asnumpy()
np.testing.assert_allclose(res1_29 ,res2_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_29 ,res3_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_29 ,res4_29, atol=1e-3, rtol=1e-3)
(res1_29 == res2_29).all()
(res1_29 == res3_29).all()
(res1_29 == res4_29).all()
res1_30 = module1.get_output(30).asnumpy()
res2_30 = res2[30].asnumpy()
res3_30 = res3[30].asnumpy()
res4_30 = res4[30].asnumpy()
np.testing.assert_allclose(res1_30 ,res2_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_30 ,res3_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_30 ,res4_30, atol=1e-3, rtol=1e-3)
(res1_30 == res2_30).all()
(res1_30 == res3_30).all()
(res1_30 == res4_30).all()
module5.set_input('var_146', input_146)
module5.set_input('var_147', input_147)
module5.set_input('var_153', input_153)
module5.set_input('var_170', input_170)
module5.set_input('var_175', input_175)
module5.set_input('var_180', input_180)
module5.set_input('var_276', input_276)
module5.set_input('var_286', input_286)
module5.set_input('var_291', input_291)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_146, input_147, input_153, input_170, input_175, input_180, input_276, input_286, input_291, )
res7 = intrp7.evaluate()(input_146, input_147, input_153, input_170, input_175, input_180, input_276, input_286, input_291, )
res8 = intrp8.evaluate()(input_146, input_147, input_153, input_170, input_175, input_180, input_276, input_286, input_291, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
res5_14 = module5.get_output(14).asnumpy()
res6_14 = res6[14].asnumpy()
res7_14 = res7[14].asnumpy()
res8_14 = res8[14].asnumpy()
np.testing.assert_allclose(res5_14 ,res6_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res7_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res8_14, atol=1e-3, rtol=1e-3)
(res5_14 == res6_14).all()
(res5_14 == res7_14).all()
(res5_14 == res8_14).all()
res5_15 = module5.get_output(15).asnumpy()
res6_15 = res6[15].asnumpy()
res7_15 = res7[15].asnumpy()
res8_15 = res8[15].asnumpy()
np.testing.assert_allclose(res5_15 ,res6_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res7_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res8_15, atol=1e-3, rtol=1e-3)
(res5_15 == res6_15).all()
(res5_15 == res7_15).all()
(res5_15 == res8_15).all()
res5_16 = module5.get_output(16).asnumpy()
res6_16 = res6[16].asnumpy()
res7_16 = res7[16].asnumpy()
res8_16 = res8[16].asnumpy()
np.testing.assert_allclose(res5_16 ,res6_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res7_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res8_16, atol=1e-3, rtol=1e-3)
(res5_16 == res6_16).all()
(res5_16 == res7_16).all()
(res5_16 == res8_16).all()
res5_17 = module5.get_output(17).asnumpy()
res6_17 = res6[17].asnumpy()
res7_17 = res7[17].asnumpy()
res8_17 = res8[17].asnumpy()
np.testing.assert_allclose(res5_17 ,res6_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res7_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res8_17, atol=1e-3, rtol=1e-3)
(res5_17 == res6_17).all()
(res5_17 == res7_17).all()
(res5_17 == res8_17).all()
res5_18 = module5.get_output(18).asnumpy()
res6_18 = res6[18].asnumpy()
res7_18 = res7[18].asnumpy()
res8_18 = res8[18].asnumpy()
np.testing.assert_allclose(res5_18 ,res6_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res7_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res8_18, atol=1e-3, rtol=1e-3)
(res5_18 == res6_18).all()
(res5_18 == res7_18).all()
(res5_18 == res8_18).all()
res5_19 = module5.get_output(19).asnumpy()
res6_19 = res6[19].asnumpy()
res7_19 = res7[19].asnumpy()
res8_19 = res8[19].asnumpy()
np.testing.assert_allclose(res5_19 ,res6_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_19 ,res7_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_19 ,res8_19, atol=1e-3, rtol=1e-3)
(res5_19 == res6_19).all()
(res5_19 == res7_19).all()
(res5_19 == res8_19).all()
res5_20 = module5.get_output(20).asnumpy()
res6_20 = res6[20].asnumpy()
res7_20 = res7[20].asnumpy()
res8_20 = res8[20].asnumpy()
np.testing.assert_allclose(res5_20 ,res6_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_20 ,res7_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_20 ,res8_20, atol=1e-3, rtol=1e-3)
(res5_20 == res6_20).all()
(res5_20 == res7_20).all()
(res5_20 == res8_20).all()
res5_21 = module5.get_output(21).asnumpy()
res6_21 = res6[21].asnumpy()
res7_21 = res7[21].asnumpy()
res8_21 = res8[21].asnumpy()
np.testing.assert_allclose(res5_21 ,res6_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_21 ,res7_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_21 ,res8_21, atol=1e-3, rtol=1e-3)
(res5_21 == res6_21).all()
(res5_21 == res7_21).all()
(res5_21 == res8_21).all()
res5_22 = module5.get_output(22).asnumpy()
res6_22 = res6[22].asnumpy()
res7_22 = res7[22].asnumpy()
res8_22 = res8[22].asnumpy()
np.testing.assert_allclose(res5_22 ,res6_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_22 ,res7_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_22 ,res8_22, atol=1e-3, rtol=1e-3)
(res5_22 == res6_22).all()
(res5_22 == res7_22).all()
(res5_22 == res8_22).all()
res5_23 = module5.get_output(23).asnumpy()
res6_23 = res6[23].asnumpy()
res7_23 = res7[23].asnumpy()
res8_23 = res8[23].asnumpy()
np.testing.assert_allclose(res5_23 ,res6_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_23 ,res7_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_23 ,res8_23, atol=1e-3, rtol=1e-3)
(res5_23 == res6_23).all()
(res5_23 == res7_23).all()
(res5_23 == res8_23).all()
res5_24 = module5.get_output(24).asnumpy()
res6_24 = res6[24].asnumpy()
res7_24 = res7[24].asnumpy()
res8_24 = res8[24].asnumpy()
np.testing.assert_allclose(res5_24 ,res6_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_24 ,res7_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_24 ,res8_24, atol=1e-3, rtol=1e-3)
(res5_24 == res6_24).all()
(res5_24 == res7_24).all()
(res5_24 == res8_24).all()
res5_25 = module5.get_output(25).asnumpy()
res6_25 = res6[25].asnumpy()
res7_25 = res7[25].asnumpy()
res8_25 = res8[25].asnumpy()
np.testing.assert_allclose(res5_25 ,res6_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_25 ,res7_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_25 ,res8_25, atol=1e-3, rtol=1e-3)
(res5_25 == res6_25).all()
(res5_25 == res7_25).all()
(res5_25 == res8_25).all()
res5_26 = module5.get_output(26).asnumpy()
res6_26 = res6[26].asnumpy()
res7_26 = res7[26].asnumpy()
res8_26 = res8[26].asnumpy()
np.testing.assert_allclose(res5_26 ,res6_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_26 ,res7_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_26 ,res8_26, atol=1e-3, rtol=1e-3)
(res5_26 == res6_26).all()
(res5_26 == res7_26).all()
(res5_26 == res8_26).all()
res5_27 = module5.get_output(27).asnumpy()
res6_27 = res6[27].asnumpy()
res7_27 = res7[27].asnumpy()
res8_27 = res8[27].asnumpy()
np.testing.assert_allclose(res5_27 ,res6_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_27 ,res7_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_27 ,res8_27, atol=1e-3, rtol=1e-3)
(res5_27 == res6_27).all()
(res5_27 == res7_27).all()
(res5_27 == res8_27).all()
res5_28 = module5.get_output(28).asnumpy()
res6_28 = res6[28].asnumpy()
res7_28 = res7[28].asnumpy()
res8_28 = res8[28].asnumpy()
np.testing.assert_allclose(res5_28 ,res6_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_28 ,res7_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_28 ,res8_28, atol=1e-3, rtol=1e-3)
(res5_28 == res6_28).all()
(res5_28 == res7_28).all()
(res5_28 == res8_28).all()
res5_29 = module5.get_output(29).asnumpy()
res6_29 = res6[29].asnumpy()
res7_29 = res7[29].asnumpy()
res8_29 = res8[29].asnumpy()
np.testing.assert_allclose(res5_29 ,res6_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_29 ,res7_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_29 ,res8_29, atol=1e-3, rtol=1e-3)
(res5_29 == res6_29).all()
(res5_29 == res7_29).all()
(res5_29 == res8_29).all()
res5_30 = module5.get_output(30).asnumpy()
res6_30 = res6[30].asnumpy()
res7_30 = res7[30].asnumpy()
res8_30 = res8[30].asnumpy()
np.testing.assert_allclose(res5_30 ,res6_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_30 ,res7_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_30 ,res8_30, atol=1e-3, rtol=1e-3)
(res5_30 == res6_30).all()
(res5_30 == res7_30).all()
(res5_30 == res8_30).all()
module9.set_input('var_146', input_146)
module9.set_input('var_147', input_147)
module9.set_input('var_153', input_153)
module9.set_input('var_170', input_170)
module9.set_input('var_175', input_175)
module9.set_input('var_180', input_180)
module9.set_input('var_276', input_276)
module9.set_input('var_286', input_286)
module9.set_input('var_291', input_291)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_146, input_147, input_153, input_170, input_175, input_180, input_276, input_286, input_291, )
res11 = intrp11.evaluate()(input_146, input_147, input_153, input_170, input_175, input_180, input_276, input_286, input_291, )
res12 = intrp12.evaluate()(input_146, input_147, input_153, input_170, input_175, input_180, input_276, input_286, input_291, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
res9_14 = module9.get_output(14).asnumpy()
res10_14 = res10[14].asnumpy()
res11_14 = res11[14].asnumpy()
res12_14 = res12[14].asnumpy()
np.testing.assert_allclose(res9_14 ,res10_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res11_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res12_14, atol=1e-3, rtol=1e-3)
(res9_14 == res10_14).all()
(res9_14 == res11_14).all()
(res9_14 == res12_14).all()
res9_15 = module9.get_output(15).asnumpy()
res10_15 = res10[15].asnumpy()
res11_15 = res11[15].asnumpy()
res12_15 = res12[15].asnumpy()
np.testing.assert_allclose(res9_15 ,res10_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res11_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res12_15, atol=1e-3, rtol=1e-3)
(res9_15 == res10_15).all()
(res9_15 == res11_15).all()
(res9_15 == res12_15).all()
res9_16 = module9.get_output(16).asnumpy()
res10_16 = res10[16].asnumpy()
res11_16 = res11[16].asnumpy()
res12_16 = res12[16].asnumpy()
np.testing.assert_allclose(res9_16 ,res10_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res11_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res12_16, atol=1e-3, rtol=1e-3)
(res9_16 == res10_16).all()
(res9_16 == res11_16).all()
(res9_16 == res12_16).all()
res9_17 = module9.get_output(17).asnumpy()
res10_17 = res10[17].asnumpy()
res11_17 = res11[17].asnumpy()
res12_17 = res12[17].asnumpy()
np.testing.assert_allclose(res9_17 ,res10_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res11_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res12_17, atol=1e-3, rtol=1e-3)
(res9_17 == res10_17).all()
(res9_17 == res11_17).all()
(res9_17 == res12_17).all()
res9_18 = module9.get_output(18).asnumpy()
res10_18 = res10[18].asnumpy()
res11_18 = res11[18].asnumpy()
res12_18 = res12[18].asnumpy()
np.testing.assert_allclose(res9_18 ,res10_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res11_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res12_18, atol=1e-3, rtol=1e-3)
(res9_18 == res10_18).all()
(res9_18 == res11_18).all()
(res9_18 == res12_18).all()
res9_19 = module9.get_output(19).asnumpy()
res10_19 = res10[19].asnumpy()
res11_19 = res11[19].asnumpy()
res12_19 = res12[19].asnumpy()
np.testing.assert_allclose(res9_19 ,res10_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_19 ,res11_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_19 ,res12_19, atol=1e-3, rtol=1e-3)
(res9_19 == res10_19).all()
(res9_19 == res11_19).all()
(res9_19 == res12_19).all()
res9_20 = module9.get_output(20).asnumpy()
res10_20 = res10[20].asnumpy()
res11_20 = res11[20].asnumpy()
res12_20 = res12[20].asnumpy()
np.testing.assert_allclose(res9_20 ,res10_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_20 ,res11_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_20 ,res12_20, atol=1e-3, rtol=1e-3)
(res9_20 == res10_20).all()
(res9_20 == res11_20).all()
(res9_20 == res12_20).all()
res9_21 = module9.get_output(21).asnumpy()
res10_21 = res10[21].asnumpy()
res11_21 = res11[21].asnumpy()
res12_21 = res12[21].asnumpy()
np.testing.assert_allclose(res9_21 ,res10_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_21 ,res11_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_21 ,res12_21, atol=1e-3, rtol=1e-3)
(res9_21 == res10_21).all()
(res9_21 == res11_21).all()
(res9_21 == res12_21).all()
res9_22 = module9.get_output(22).asnumpy()
res10_22 = res10[22].asnumpy()
res11_22 = res11[22].asnumpy()
res12_22 = res12[22].asnumpy()
np.testing.assert_allclose(res9_22 ,res10_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_22 ,res11_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_22 ,res12_22, atol=1e-3, rtol=1e-3)
(res9_22 == res10_22).all()
(res9_22 == res11_22).all()
(res9_22 == res12_22).all()
res9_23 = module9.get_output(23).asnumpy()
res10_23 = res10[23].asnumpy()
res11_23 = res11[23].asnumpy()
res12_23 = res12[23].asnumpy()
np.testing.assert_allclose(res9_23 ,res10_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_23 ,res11_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_23 ,res12_23, atol=1e-3, rtol=1e-3)
(res9_23 == res10_23).all()
(res9_23 == res11_23).all()
(res9_23 == res12_23).all()
res9_24 = module9.get_output(24).asnumpy()
res10_24 = res10[24].asnumpy()
res11_24 = res11[24].asnumpy()
res12_24 = res12[24].asnumpy()
np.testing.assert_allclose(res9_24 ,res10_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_24 ,res11_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_24 ,res12_24, atol=1e-3, rtol=1e-3)
(res9_24 == res10_24).all()
(res9_24 == res11_24).all()
(res9_24 == res12_24).all()
res9_25 = module9.get_output(25).asnumpy()
res10_25 = res10[25].asnumpy()
res11_25 = res11[25].asnumpy()
res12_25 = res12[25].asnumpy()
np.testing.assert_allclose(res9_25 ,res10_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_25 ,res11_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_25 ,res12_25, atol=1e-3, rtol=1e-3)
(res9_25 == res10_25).all()
(res9_25 == res11_25).all()
(res9_25 == res12_25).all()
res9_26 = module9.get_output(26).asnumpy()
res10_26 = res10[26].asnumpy()
res11_26 = res11[26].asnumpy()
res12_26 = res12[26].asnumpy()
np.testing.assert_allclose(res9_26 ,res10_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_26 ,res11_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_26 ,res12_26, atol=1e-3, rtol=1e-3)
(res9_26 == res10_26).all()
(res9_26 == res11_26).all()
(res9_26 == res12_26).all()
res9_27 = module9.get_output(27).asnumpy()
res10_27 = res10[27].asnumpy()
res11_27 = res11[27].asnumpy()
res12_27 = res12[27].asnumpy()
np.testing.assert_allclose(res9_27 ,res10_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_27 ,res11_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_27 ,res12_27, atol=1e-3, rtol=1e-3)
(res9_27 == res10_27).all()
(res9_27 == res11_27).all()
(res9_27 == res12_27).all()
res9_28 = module9.get_output(28).asnumpy()
res10_28 = res10[28].asnumpy()
res11_28 = res11[28].asnumpy()
res12_28 = res12[28].asnumpy()
np.testing.assert_allclose(res9_28 ,res10_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_28 ,res11_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_28 ,res12_28, atol=1e-3, rtol=1e-3)
(res9_28 == res10_28).all()
(res9_28 == res11_28).all()
(res9_28 == res12_28).all()
res9_29 = module9.get_output(29).asnumpy()
res10_29 = res10[29].asnumpy()
res11_29 = res11[29].asnumpy()
res12_29 = res12[29].asnumpy()
np.testing.assert_allclose(res9_29 ,res10_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_29 ,res11_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_29 ,res12_29, atol=1e-3, rtol=1e-3)
(res9_29 == res10_29).all()
(res9_29 == res11_29).all()
(res9_29 == res12_29).all()
res9_30 = module9.get_output(30).asnumpy()
res10_30 = res10[30].asnumpy()
res11_30 = res11[30].asnumpy()
res12_30 = res12[30].asnumpy()
np.testing.assert_allclose(res9_30 ,res10_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_30 ,res11_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_30 ,res12_30, atol=1e-3, rtol=1e-3)
(res9_30 == res10_30).all()
(res9_30 == res11_30).all()
(res9_30 == res12_30).all()
module13.set_input('var_146', input_146)
module13.set_input('var_147', input_147)
module13.set_input('var_153', input_153)
module13.set_input('var_170', input_170)
module13.set_input('var_175', input_175)
module13.set_input('var_180', input_180)
module13.set_input('var_276', input_276)
module13.set_input('var_286', input_286)
module13.set_input('var_291', input_291)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_146, input_147, input_153, input_170, input_175, input_180, input_276, input_286, input_291, )
res15 = intrp15.evaluate()(input_146, input_147, input_153, input_170, input_175, input_180, input_276, input_286, input_291, )
res16 = intrp16.evaluate()(input_146, input_147, input_153, input_170, input_175, input_180, input_276, input_286, input_291, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
res13_14 = module13.get_output(14).asnumpy()
res14_14 = res14[14].asnumpy()
res15_14 = res15[14].asnumpy()
res16_14 = res16[14].asnumpy()
np.testing.assert_allclose(res13_14 ,res14_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res15_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res16_14, atol=1e-3, rtol=1e-3)
(res13_14 == res14_14).all()
(res13_14 == res15_14).all()
(res13_14 == res16_14).all()
res13_15 = module13.get_output(15).asnumpy()
res14_15 = res14[15].asnumpy()
res15_15 = res15[15].asnumpy()
res16_15 = res16[15].asnumpy()
np.testing.assert_allclose(res13_15 ,res14_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res15_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res16_15, atol=1e-3, rtol=1e-3)
(res13_15 == res14_15).all()
(res13_15 == res15_15).all()
(res13_15 == res16_15).all()
res13_16 = module13.get_output(16).asnumpy()
res14_16 = res14[16].asnumpy()
res15_16 = res15[16].asnumpy()
res16_16 = res16[16].asnumpy()
np.testing.assert_allclose(res13_16 ,res14_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res15_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res16_16, atol=1e-3, rtol=1e-3)
(res13_16 == res14_16).all()
(res13_16 == res15_16).all()
(res13_16 == res16_16).all()
res13_17 = module13.get_output(17).asnumpy()
res14_17 = res14[17].asnumpy()
res15_17 = res15[17].asnumpy()
res16_17 = res16[17].asnumpy()
np.testing.assert_allclose(res13_17 ,res14_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res15_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res16_17, atol=1e-3, rtol=1e-3)
(res13_17 == res14_17).all()
(res13_17 == res15_17).all()
(res13_17 == res16_17).all()
res13_18 = module13.get_output(18).asnumpy()
res14_18 = res14[18].asnumpy()
res15_18 = res15[18].asnumpy()
res16_18 = res16[18].asnumpy()
np.testing.assert_allclose(res13_18 ,res14_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res15_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res16_18, atol=1e-3, rtol=1e-3)
(res13_18 == res14_18).all()
(res13_18 == res15_18).all()
(res13_18 == res16_18).all()
res13_19 = module13.get_output(19).asnumpy()
res14_19 = res14[19].asnumpy()
res15_19 = res15[19].asnumpy()
res16_19 = res16[19].asnumpy()
np.testing.assert_allclose(res13_19 ,res14_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_19 ,res15_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_19 ,res16_19, atol=1e-3, rtol=1e-3)
(res13_19 == res14_19).all()
(res13_19 == res15_19).all()
(res13_19 == res16_19).all()
res13_20 = module13.get_output(20).asnumpy()
res14_20 = res14[20].asnumpy()
res15_20 = res15[20].asnumpy()
res16_20 = res16[20].asnumpy()
np.testing.assert_allclose(res13_20 ,res14_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_20 ,res15_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_20 ,res16_20, atol=1e-3, rtol=1e-3)
(res13_20 == res14_20).all()
(res13_20 == res15_20).all()
(res13_20 == res16_20).all()
res13_21 = module13.get_output(21).asnumpy()
res14_21 = res14[21].asnumpy()
res15_21 = res15[21].asnumpy()
res16_21 = res16[21].asnumpy()
np.testing.assert_allclose(res13_21 ,res14_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_21 ,res15_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_21 ,res16_21, atol=1e-3, rtol=1e-3)
(res13_21 == res14_21).all()
(res13_21 == res15_21).all()
(res13_21 == res16_21).all()
res13_22 = module13.get_output(22).asnumpy()
res14_22 = res14[22].asnumpy()
res15_22 = res15[22].asnumpy()
res16_22 = res16[22].asnumpy()
np.testing.assert_allclose(res13_22 ,res14_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_22 ,res15_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_22 ,res16_22, atol=1e-3, rtol=1e-3)
(res13_22 == res14_22).all()
(res13_22 == res15_22).all()
(res13_22 == res16_22).all()
res13_23 = module13.get_output(23).asnumpy()
res14_23 = res14[23].asnumpy()
res15_23 = res15[23].asnumpy()
res16_23 = res16[23].asnumpy()
np.testing.assert_allclose(res13_23 ,res14_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_23 ,res15_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_23 ,res16_23, atol=1e-3, rtol=1e-3)
(res13_23 == res14_23).all()
(res13_23 == res15_23).all()
(res13_23 == res16_23).all()
res13_24 = module13.get_output(24).asnumpy()
res14_24 = res14[24].asnumpy()
res15_24 = res15[24].asnumpy()
res16_24 = res16[24].asnumpy()
np.testing.assert_allclose(res13_24 ,res14_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_24 ,res15_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_24 ,res16_24, atol=1e-3, rtol=1e-3)
(res13_24 == res14_24).all()
(res13_24 == res15_24).all()
(res13_24 == res16_24).all()
res13_25 = module13.get_output(25).asnumpy()
res14_25 = res14[25].asnumpy()
res15_25 = res15[25].asnumpy()
res16_25 = res16[25].asnumpy()
np.testing.assert_allclose(res13_25 ,res14_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_25 ,res15_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_25 ,res16_25, atol=1e-3, rtol=1e-3)
(res13_25 == res14_25).all()
(res13_25 == res15_25).all()
(res13_25 == res16_25).all()
res13_26 = module13.get_output(26).asnumpy()
res14_26 = res14[26].asnumpy()
res15_26 = res15[26].asnumpy()
res16_26 = res16[26].asnumpy()
np.testing.assert_allclose(res13_26 ,res14_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_26 ,res15_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_26 ,res16_26, atol=1e-3, rtol=1e-3)
(res13_26 == res14_26).all()
(res13_26 == res15_26).all()
(res13_26 == res16_26).all()
res13_27 = module13.get_output(27).asnumpy()
res14_27 = res14[27].asnumpy()
res15_27 = res15[27].asnumpy()
res16_27 = res16[27].asnumpy()
np.testing.assert_allclose(res13_27 ,res14_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_27 ,res15_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_27 ,res16_27, atol=1e-3, rtol=1e-3)
(res13_27 == res14_27).all()
(res13_27 == res15_27).all()
(res13_27 == res16_27).all()
res13_28 = module13.get_output(28).asnumpy()
res14_28 = res14[28].asnumpy()
res15_28 = res15[28].asnumpy()
res16_28 = res16[28].asnumpy()
np.testing.assert_allclose(res13_28 ,res14_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_28 ,res15_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_28 ,res16_28, atol=1e-3, rtol=1e-3)
(res13_28 == res14_28).all()
(res13_28 == res15_28).all()
(res13_28 == res16_28).all()
res13_29 = module13.get_output(29).asnumpy()
res14_29 = res14[29].asnumpy()
res15_29 = res15[29].asnumpy()
res16_29 = res16[29].asnumpy()
np.testing.assert_allclose(res13_29 ,res14_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_29 ,res15_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_29 ,res16_29, atol=1e-3, rtol=1e-3)
(res13_29 == res14_29).all()
(res13_29 == res15_29).all()
(res13_29 == res16_29).all()
res13_30 = module13.get_output(30).asnumpy()
res14_30 = res14[30].asnumpy()
res15_30 = res15[30].asnumpy()
res16_30 = res16[30].asnumpy()
np.testing.assert_allclose(res13_30 ,res14_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_30 ,res15_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_30 ,res16_30, atol=1e-3, rtol=1e-3)
(res13_30 == res14_30).all()
(res13_30 == res15_30).all()
(res13_30 == res16_30).all()
module17.set_input('var_146', input_146)
module17.set_input('var_147', input_147)
module17.set_input('var_153', input_153)
module17.set_input('var_170', input_170)
module17.set_input('var_175', input_175)
module17.set_input('var_180', input_180)
module17.set_input('var_276', input_276)
module17.set_input('var_286', input_286)
module17.set_input('var_291', input_291)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_146, input_147, input_153, input_170, input_175, input_180, input_276, input_286, input_291, )
res19 = intrp19.evaluate()(input_146, input_147, input_153, input_170, input_175, input_180, input_276, input_286, input_291, )
res20 = intrp20.evaluate()(input_146, input_147, input_153, input_170, input_175, input_180, input_276, input_286, input_291, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
res17_14 = module17.get_output(14).asnumpy()
res18_14 = res18[14].asnumpy()
res19_14 = res19[14].asnumpy()
res20_14 = res20[14].asnumpy()
np.testing.assert_allclose(res17_14 ,res18_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res19_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res20_14, atol=1e-3, rtol=1e-3)
(res17_14 == res18_14).all()
(res17_14 == res19_14).all()
(res17_14 == res20_14).all()
res17_15 = module17.get_output(15).asnumpy()
res18_15 = res18[15].asnumpy()
res19_15 = res19[15].asnumpy()
res20_15 = res20[15].asnumpy()
np.testing.assert_allclose(res17_15 ,res18_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res19_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res20_15, atol=1e-3, rtol=1e-3)
(res17_15 == res18_15).all()
(res17_15 == res19_15).all()
(res17_15 == res20_15).all()
res17_16 = module17.get_output(16).asnumpy()
res18_16 = res18[16].asnumpy()
res19_16 = res19[16].asnumpy()
res20_16 = res20[16].asnumpy()
np.testing.assert_allclose(res17_16 ,res18_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res19_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res20_16, atol=1e-3, rtol=1e-3)
(res17_16 == res18_16).all()
(res17_16 == res19_16).all()
(res17_16 == res20_16).all()
res17_17 = module17.get_output(17).asnumpy()
res18_17 = res18[17].asnumpy()
res19_17 = res19[17].asnumpy()
res20_17 = res20[17].asnumpy()
np.testing.assert_allclose(res17_17 ,res18_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res19_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res20_17, atol=1e-3, rtol=1e-3)
(res17_17 == res18_17).all()
(res17_17 == res19_17).all()
(res17_17 == res20_17).all()
res17_18 = module17.get_output(18).asnumpy()
res18_18 = res18[18].asnumpy()
res19_18 = res19[18].asnumpy()
res20_18 = res20[18].asnumpy()
np.testing.assert_allclose(res17_18 ,res18_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res19_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res20_18, atol=1e-3, rtol=1e-3)
(res17_18 == res18_18).all()
(res17_18 == res19_18).all()
(res17_18 == res20_18).all()
res17_19 = module17.get_output(19).asnumpy()
res18_19 = res18[19].asnumpy()
res19_19 = res19[19].asnumpy()
res20_19 = res20[19].asnumpy()
np.testing.assert_allclose(res17_19 ,res18_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_19 ,res19_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_19 ,res20_19, atol=1e-3, rtol=1e-3)
(res17_19 == res18_19).all()
(res17_19 == res19_19).all()
(res17_19 == res20_19).all()
res17_20 = module17.get_output(20).asnumpy()
res18_20 = res18[20].asnumpy()
res19_20 = res19[20].asnumpy()
res20_20 = res20[20].asnumpy()
np.testing.assert_allclose(res17_20 ,res18_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_20 ,res19_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_20 ,res20_20, atol=1e-3, rtol=1e-3)
(res17_20 == res18_20).all()
(res17_20 == res19_20).all()
(res17_20 == res20_20).all()
res17_21 = module17.get_output(21).asnumpy()
res18_21 = res18[21].asnumpy()
res19_21 = res19[21].asnumpy()
res20_21 = res20[21].asnumpy()
np.testing.assert_allclose(res17_21 ,res18_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_21 ,res19_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_21 ,res20_21, atol=1e-3, rtol=1e-3)
(res17_21 == res18_21).all()
(res17_21 == res19_21).all()
(res17_21 == res20_21).all()
res17_22 = module17.get_output(22).asnumpy()
res18_22 = res18[22].asnumpy()
res19_22 = res19[22].asnumpy()
res20_22 = res20[22].asnumpy()
np.testing.assert_allclose(res17_22 ,res18_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_22 ,res19_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_22 ,res20_22, atol=1e-3, rtol=1e-3)
(res17_22 == res18_22).all()
(res17_22 == res19_22).all()
(res17_22 == res20_22).all()
res17_23 = module17.get_output(23).asnumpy()
res18_23 = res18[23].asnumpy()
res19_23 = res19[23].asnumpy()
res20_23 = res20[23].asnumpy()
np.testing.assert_allclose(res17_23 ,res18_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_23 ,res19_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_23 ,res20_23, atol=1e-3, rtol=1e-3)
(res17_23 == res18_23).all()
(res17_23 == res19_23).all()
(res17_23 == res20_23).all()
res17_24 = module17.get_output(24).asnumpy()
res18_24 = res18[24].asnumpy()
res19_24 = res19[24].asnumpy()
res20_24 = res20[24].asnumpy()
np.testing.assert_allclose(res17_24 ,res18_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_24 ,res19_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_24 ,res20_24, atol=1e-3, rtol=1e-3)
(res17_24 == res18_24).all()
(res17_24 == res19_24).all()
(res17_24 == res20_24).all()
res17_25 = module17.get_output(25).asnumpy()
res18_25 = res18[25].asnumpy()
res19_25 = res19[25].asnumpy()
res20_25 = res20[25].asnumpy()
np.testing.assert_allclose(res17_25 ,res18_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_25 ,res19_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_25 ,res20_25, atol=1e-3, rtol=1e-3)
(res17_25 == res18_25).all()
(res17_25 == res19_25).all()
(res17_25 == res20_25).all()
res17_26 = module17.get_output(26).asnumpy()
res18_26 = res18[26].asnumpy()
res19_26 = res19[26].asnumpy()
res20_26 = res20[26].asnumpy()
np.testing.assert_allclose(res17_26 ,res18_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_26 ,res19_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_26 ,res20_26, atol=1e-3, rtol=1e-3)
(res17_26 == res18_26).all()
(res17_26 == res19_26).all()
(res17_26 == res20_26).all()
res17_27 = module17.get_output(27).asnumpy()
res18_27 = res18[27].asnumpy()
res19_27 = res19[27].asnumpy()
res20_27 = res20[27].asnumpy()
np.testing.assert_allclose(res17_27 ,res18_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_27 ,res19_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_27 ,res20_27, atol=1e-3, rtol=1e-3)
(res17_27 == res18_27).all()
(res17_27 == res19_27).all()
(res17_27 == res20_27).all()
res17_28 = module17.get_output(28).asnumpy()
res18_28 = res18[28].asnumpy()
res19_28 = res19[28].asnumpy()
res20_28 = res20[28].asnumpy()
np.testing.assert_allclose(res17_28 ,res18_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_28 ,res19_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_28 ,res20_28, atol=1e-3, rtol=1e-3)
(res17_28 == res18_28).all()
(res17_28 == res19_28).all()
(res17_28 == res20_28).all()
res17_29 = module17.get_output(29).asnumpy()
res18_29 = res18[29].asnumpy()
res19_29 = res19[29].asnumpy()
res20_29 = res20[29].asnumpy()
np.testing.assert_allclose(res17_29 ,res18_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_29 ,res19_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_29 ,res20_29, atol=1e-3, rtol=1e-3)
(res17_29 == res18_29).all()
(res17_29 == res19_29).all()
(res17_29 == res20_29).all()
res17_30 = module17.get_output(30).asnumpy()
res18_30 = res18[30].asnumpy()
res19_30 = res19[30].asnumpy()
res20_30 = res20[30].asnumpy()
np.testing.assert_allclose(res17_30 ,res18_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_30 ,res19_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_30 ,res20_30, atol=1e-3, rtol=1e-3)
(res17_30 == res18_30).all()
(res17_30 == res19_30).all()
(res17_30 == res20_30).all()
module21.set_input('var_146', input_146)
module21.set_input('var_147', input_147)
module21.set_input('var_153', input_153)
module21.set_input('var_170', input_170)
module21.set_input('var_175', input_175)
module21.set_input('var_180', input_180)
module21.set_input('var_276', input_276)
module21.set_input('var_286', input_286)
module21.set_input('var_291', input_291)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_146, input_147, input_153, input_170, input_175, input_180, input_276, input_286, input_291, )
res23 = intrp23.evaluate()(input_146, input_147, input_153, input_170, input_175, input_180, input_276, input_286, input_291, )
res24 = intrp24.evaluate()(input_146, input_147, input_153, input_170, input_175, input_180, input_276, input_286, input_291, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()
res21_14 = module21.get_output(14).asnumpy()
res22_14 = res22[14].asnumpy()
res23_14 = res23[14].asnumpy()
res24_14 = res24[14].asnumpy()
np.testing.assert_allclose(res21_14 ,res22_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res23_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res24_14, atol=1e-3, rtol=1e-3)
(res21_14 == res22_14).all()
(res21_14 == res23_14).all()
(res21_14 == res24_14).all()
res21_15 = module21.get_output(15).asnumpy()
res22_15 = res22[15].asnumpy()
res23_15 = res23[15].asnumpy()
res24_15 = res24[15].asnumpy()
np.testing.assert_allclose(res21_15 ,res22_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res23_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res24_15, atol=1e-3, rtol=1e-3)
(res21_15 == res22_15).all()
(res21_15 == res23_15).all()
(res21_15 == res24_15).all()
res21_16 = module21.get_output(16).asnumpy()
res22_16 = res22[16].asnumpy()
res23_16 = res23[16].asnumpy()
res24_16 = res24[16].asnumpy()
np.testing.assert_allclose(res21_16 ,res22_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res23_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res24_16, atol=1e-3, rtol=1e-3)
(res21_16 == res22_16).all()
(res21_16 == res23_16).all()
(res21_16 == res24_16).all()
res21_17 = module21.get_output(17).asnumpy()
res22_17 = res22[17].asnumpy()
res23_17 = res23[17].asnumpy()
res24_17 = res24[17].asnumpy()
np.testing.assert_allclose(res21_17 ,res22_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res23_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res24_17, atol=1e-3, rtol=1e-3)
(res21_17 == res22_17).all()
(res21_17 == res23_17).all()
(res21_17 == res24_17).all()
res21_18 = module21.get_output(18).asnumpy()
res22_18 = res22[18].asnumpy()
res23_18 = res23[18].asnumpy()
res24_18 = res24[18].asnumpy()
np.testing.assert_allclose(res21_18 ,res22_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res23_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res24_18, atol=1e-3, rtol=1e-3)
(res21_18 == res22_18).all()
(res21_18 == res23_18).all()
(res21_18 == res24_18).all()
res21_19 = module21.get_output(19).asnumpy()
res22_19 = res22[19].asnumpy()
res23_19 = res23[19].asnumpy()
res24_19 = res24[19].asnumpy()
np.testing.assert_allclose(res21_19 ,res22_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_19 ,res23_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_19 ,res24_19, atol=1e-3, rtol=1e-3)
(res21_19 == res22_19).all()
(res21_19 == res23_19).all()
(res21_19 == res24_19).all()
res21_20 = module21.get_output(20).asnumpy()
res22_20 = res22[20].asnumpy()
res23_20 = res23[20].asnumpy()
res24_20 = res24[20].asnumpy()
np.testing.assert_allclose(res21_20 ,res22_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_20 ,res23_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_20 ,res24_20, atol=1e-3, rtol=1e-3)
(res21_20 == res22_20).all()
(res21_20 == res23_20).all()
(res21_20 == res24_20).all()
res21_21 = module21.get_output(21).asnumpy()
res22_21 = res22[21].asnumpy()
res23_21 = res23[21].asnumpy()
res24_21 = res24[21].asnumpy()
np.testing.assert_allclose(res21_21 ,res22_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_21 ,res23_21, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_21 ,res24_21, atol=1e-3, rtol=1e-3)
(res21_21 == res22_21).all()
(res21_21 == res23_21).all()
(res21_21 == res24_21).all()
res21_22 = module21.get_output(22).asnumpy()
res22_22 = res22[22].asnumpy()
res23_22 = res23[22].asnumpy()
res24_22 = res24[22].asnumpy()
np.testing.assert_allclose(res21_22 ,res22_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_22 ,res23_22, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_22 ,res24_22, atol=1e-3, rtol=1e-3)
(res21_22 == res22_22).all()
(res21_22 == res23_22).all()
(res21_22 == res24_22).all()
res21_23 = module21.get_output(23).asnumpy()
res22_23 = res22[23].asnumpy()
res23_23 = res23[23].asnumpy()
res24_23 = res24[23].asnumpy()
np.testing.assert_allclose(res21_23 ,res22_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_23 ,res23_23, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_23 ,res24_23, atol=1e-3, rtol=1e-3)
(res21_23 == res22_23).all()
(res21_23 == res23_23).all()
(res21_23 == res24_23).all()
res21_24 = module21.get_output(24).asnumpy()
res22_24 = res22[24].asnumpy()
res23_24 = res23[24].asnumpy()
res24_24 = res24[24].asnumpy()
np.testing.assert_allclose(res21_24 ,res22_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_24 ,res23_24, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_24 ,res24_24, atol=1e-3, rtol=1e-3)
(res21_24 == res22_24).all()
(res21_24 == res23_24).all()
(res21_24 == res24_24).all()
res21_25 = module21.get_output(25).asnumpy()
res22_25 = res22[25].asnumpy()
res23_25 = res23[25].asnumpy()
res24_25 = res24[25].asnumpy()
np.testing.assert_allclose(res21_25 ,res22_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_25 ,res23_25, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_25 ,res24_25, atol=1e-3, rtol=1e-3)
(res21_25 == res22_25).all()
(res21_25 == res23_25).all()
(res21_25 == res24_25).all()
res21_26 = module21.get_output(26).asnumpy()
res22_26 = res22[26].asnumpy()
res23_26 = res23[26].asnumpy()
res24_26 = res24[26].asnumpy()
np.testing.assert_allclose(res21_26 ,res22_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_26 ,res23_26, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_26 ,res24_26, atol=1e-3, rtol=1e-3)
(res21_26 == res22_26).all()
(res21_26 == res23_26).all()
(res21_26 == res24_26).all()
res21_27 = module21.get_output(27).asnumpy()
res22_27 = res22[27].asnumpy()
res23_27 = res23[27].asnumpy()
res24_27 = res24[27].asnumpy()
np.testing.assert_allclose(res21_27 ,res22_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_27 ,res23_27, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_27 ,res24_27, atol=1e-3, rtol=1e-3)
(res21_27 == res22_27).all()
(res21_27 == res23_27).all()
(res21_27 == res24_27).all()
res21_28 = module21.get_output(28).asnumpy()
res22_28 = res22[28].asnumpy()
res23_28 = res23[28].asnumpy()
res24_28 = res24[28].asnumpy()
np.testing.assert_allclose(res21_28 ,res22_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_28 ,res23_28, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_28 ,res24_28, atol=1e-3, rtol=1e-3)
(res21_28 == res22_28).all()
(res21_28 == res23_28).all()
(res21_28 == res24_28).all()
res21_29 = module21.get_output(29).asnumpy()
res22_29 = res22[29].asnumpy()
res23_29 = res23[29].asnumpy()
res24_29 = res24[29].asnumpy()
np.testing.assert_allclose(res21_29 ,res22_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_29 ,res23_29, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_29 ,res24_29, atol=1e-3, rtol=1e-3)
(res21_29 == res22_29).all()
(res21_29 == res23_29).all()
(res21_29 == res24_29).all()
res21_30 = module21.get_output(30).asnumpy()
res22_30 = res22[30].asnumpy()
res23_30 = res23[30].asnumpy()
res24_30 = res24[30].asnumpy()
np.testing.assert_allclose(res21_30 ,res22_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_30 ,res23_30, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_30 ,res24_30, atol=1e-3, rtol=1e-3)
(res21_30 == res22_30).all()
(res21_30 == res23_30).all()
(res21_30 == res24_30).all()

'''33: TVMFuncCall
32: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
31: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
30: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
29: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
28: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
27: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
26: tvm::relay::GraphPlanMemory(tvm::relay::Function const&)
25: tvm::relay::StorageAllocator::Plan(tvm::relay::Function const&)
24: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
21: tvm::relay::transform::DeviceAwareExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
20: tvm::relay::StorageAllocaBaseVisitor::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
19: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
18: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
17: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
16: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
15: tvm::relay::StorageAllocaBaseVisitor::VisitExpr_(tvm::relay::TupleNode const*)
14: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
13: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
12: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
11: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
10: tvm::relay::StorageAllocaBaseVisitor::VisitExpr_(tvm::relay::TupleGetItemNode const*)
9: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
8: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
7: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
6: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
5: tvm::relay::transform::DeviceAwareExprVisitor::VisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::StorageAllocator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
3: tvm::relay::StorageAllocaBaseVisitor::CreateToken(tvm::RelayExprNode const*, bool)
2: tvm::relay::StorageAllocator::CreateTokenOnDevice(tvm::RelayExprNode const*, tvm::VirtualDevice const&, bool)
1: tvm::relay::StorageAllocator::Request(tvm::relay::StorageToken*)
0: tvm::relay::StorageAllocator::GetMemorySize(tvm::relay::StorageToken*)

'''