import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "int8", shape = (9, 1, 13))#candidate|0|(9, 1, 13)|var|int8
const_1 = relay.const([[[7,4,1,-10,-9,-3,-2,-9,5,2,-6,-4,-2],[4,4,-7,-9,4,-8,4,-5,-6,-6,-7,-8,1],[-1,-10,7,-4,-1,9,2,1,8,-7,-4,1,9],[1,6,-1,8,1,7,-4,6,8,9,-10,-5,-1],[2,-9,9,-8,1,-3,1,4,-9,4,-2,-5,-2],[-7,4,5,9,6,-3,4,-4,-3,-2,2,-5,-7],[1,-9,1,-7,5,2,8,-1,-4,5,3,4,-6],[5,3,10,7,6,-5,-4,6,6,4,5,4,8],[9,-3,6,-4,-1,4,4,-10,2,-3,10,2,-7],[-3,-6,-10,-3,-8,10,-10,8,1,-4,3,4,4],[-5,7,-3,5,-3,6,8,5,-8,9,8,10,-2],[8,10,10,-8,9,9,-3,-9,-8,-3,-4,-7,8],[4,7,-4,-2,7,-10,-10,10,-5,4,2,-2,5],[9,-9,-7,-7,-9,-9,5,-4,5,-8,-5,-8,8]],[[3,6,-5,9,-1,7,1,1,8,8,-3,-5,-7],[-3,-9,4,8,-9,-4,9,5,7,1,-5,-2,-10],[-5,-5,3,-5,8,6,1,10,-6,-5,4,-6,-8],[3,-6,-6,-8,-3,-10,5,10,-5,-9,-8,-2,7],[-3,-1,5,-2,9,-10,-10,9,-1,-7,10,-4,6],[5,3,6,-6,-6,2,-10,5,-9,-4,4,-7,-10],[4,5,4,-10,1,-4,2,7,-7,9,10,-8,8],[-2,4,9,4,1,-3,6,6,10,9,6,-6,-9],[-2,-1,-8,5,-4,3,10,7,-5,-9,2,-3,-7],[-8,-1,-7,3,-5,-10,-4,-7,-4,1,2,4,-10],[-1,7,1,2,2,7,7,8,-4,-4,9,2,9],[7,5,10,-10,5,4,-5,7,4,6,5,-4,3],[-7,3,-8,7,-10,1,-6,5,-4,-8,4,8,4],[2,-2,-1,-1,-3,7,-4,9,-10,4,4,-8,10]],[[4,4,1,6,-4,-2,-1,5,7,8,-5,-2,6],[6,10,-7,-5,-2,10,10,5,8,7,8,3,1],[-6,6,8,-7,-9,3,-7,10,5,1,2,-7,-3],[2,-3,-1,-5,-5,10,-1,6,2,-1,1,4,5],[1,4,1,9,10,-4,-8,10,-1,-6,-7,2,-3],[-3,7,3,-1,4,-7,-5,5,-4,8,-1,-4,-8],[5,10,-5,3,10,1,-6,-1,-8,-10,6,5,7],[-3,-3,6,2,-6,-7,-10,6,6,8,5,-6,10],[10,-3,3,9,-8,-6,9,9,2,2,-5,-1,10],[1,-2,5,8,8,8,1,-10,-8,10,6,-9,1],[-9,-6,-10,-2,-8,4,-6,1,-10,10,9,1,-5],[1,-5,9,5,-2,2,7,2,-10,-2,4,1,-1],[2,-2,-9,5,5,10,9,5,8,3,-3,-2,-4],[-8,10,7,-3,3,2,-6,1,-9,7,-4,-5,-7]],[[-2,3,5,2,1,9,10,6,9,-1,9,3,-3],[3,7,-4,10,6,-9,3,10,5,-4,-2,-4,-5],[2,-9,6,2,-3,-4,-6,-10,-1,-6,-5,-10,2],[3,-6,9,6,-2,-1,8,1,-8,-4,-1,-3,7],[7,-10,1,5,2,3,3,2,10,-9,-4,7,7],[-5,4,-2,-9,-2,-6,8,-2,-7,8,10,-1,-8],[-5,-5,2,5,-9,-9,-9,-1,-1,-2,9,9,-1],[5,7,9,8,-6,-3,6,-10,-2,-7,4,9,-2],[-7,8,-9,2,-8,-10,4,-5,-9,-8,-8,-7,-3],[-5,-7,3,-8,-10,5,5,-4,8,-2,-4,5,-7],[-6,10,-5,2,-1,-4,7,8,-7,-3,-9,-8,3],[-2,-7,1,-3,-1,-5,-10,9,5,-9,5,-7,6],[1,-9,-7,-5,9,-8,-7,1,-5,8,5,9,8],[10,4,3,2,-2,-2,7,-2,-4,-7,1,-5,5]],[[2,-4,10,8,-3,-1,-5,-6,-7,8,10,-8,-8],[9,8,5,-10,2,4,5,-3,4,9,-4,-5,-8],[8,-1,5,-2,-6,4,-8,7,8,-1,8,8,-5],[4,9,-4,7,3,-9,-8,-2,10,-1,-3,-9,-10],[10,-6,10,-5,-1,-6,-6,4,-4,10,-5,7,9],[2,4,9,-10,9,5,1,-4,-6,-5,-8,3,4],[-10,1,-1,-1,7,-1,5,8,-3,-5,5,-9,-4],[-9,7,-4,-6,-8,1,4,-1,6,-2,-5,-5,-5],[-6,3,3,8,7,7,-8,-10,8,9,-6,5,-3],[-6,1,-9,8,-6,3,-1,5,-2,4,-3,6,2],[-1,4,5,2,-1,-4,4,10,-5,8,8,6,3],[-6,3,5,-5,8,8,8,3,-8,6,-4,8,3],[-3,-10,8,7,6,-7,-10,-10,7,8,2,6,-4],[8,-4,8,10,6,-7,-1,-7,-1,5,7,-1,-3]],[[3,-2,-4,8,1,-7,-7,-1,8,-5,-2,5,-10],[-1,-9,6,6,10,-10,7,-6,4,-7,-6,-7,-1],[-9,-6,1,2,2,2,7,7,10,-9,-8,10,8],[-2,6,3,10,-4,9,-10,3,-10,-4,8,-2,-2],[1,-6,9,3,-1,-1,-6,-1,1,5,-3,-6,1],[-5,-2,3,-1,2,7,5,2,1,3,2,-5,-9],[3,9,1,8,1,1,-10,-9,-8,9,10,-9,-1],[-8,9,7,7,5,10,-3,5,-10,-7,-6,-5,9],[2,-10,-9,1,8,-10,-6,2,10,-4,1,2,6],[7,10,7,-1,6,7,-10,7,-9,6,-8,1,1],[-9,2,-10,5,4,-3,10,7,-9,2,8,1,-5],[10,1,9,-6,-5,9,-6,1,8,-9,9,-3,-3],[4,-6,-3,4,10,3,-4,2,-8,6,8,-3,2],[-4,-4,-7,3,9,10,9,9,-5,2,-8,-8,2]],[[-10,-4,8,7,-6,-4,8,4,-7,7,7,-8,-9],[-7,-1,-4,5,-5,-5,7,-7,-2,-2,-2,-9,6],[-10,3,1,8,-1,4,10,9,2,-9,-6,-5,-7],[-9,7,-2,-10,-8,-7,6,1,-1,9,-8,-5,1],[8,-2,-2,-3,6,6,10,-8,4,-4,4,-8,7],[-4,-3,-6,9,-7,-6,-2,6,10,-3,3,-2,2],[2,9,-6,-4,7,9,7,-1,-6,7,10,-10,-6],[10,-9,6,-4,3,-9,6,-8,-6,-3,-9,-9,-5],[-4,1,7,9,-4,9,9,8,10,8,3,4,10],[-6,-8,7,5,1,9,-8,-5,3,-1,-6,6,-1],[-7,-4,-6,7,3,-7,1,-10,10,-5,7,2,8],[-10,-3,3,6,8,-8,-10,-10,1,7,-6,-1,3],[-1,-9,7,5,-10,10,6,2,7,-6,8,-2,1],[1,9,2,-3,8,10,-7,-2,10,7,3,-3,2]],[[-8,-4,10,-1,-3,8,-5,3,-10,10,9,1,2],[-1,4,-6,-8,1,8,-9,-6,5,3,-9,-10,8],[-8,7,-2,-5,-4,1,1,-9,4,10,-5,1,6],[-5,-8,-8,-2,6,-3,-2,-2,-8,5,-4,5,6],[2,10,-7,4,5,-2,5,3,-1,-7,-10,-7,-2],[1,-6,7,-6,4,1,-1,-10,-5,2,-4,-5,-5],[-6,9,5,7,-8,-9,-3,-8,-3,-3,3,-7,-8],[-8,-2,7,7,-7,-7,-4,-1,9,-10,-10,-7,7],[1,-7,-4,9,9,-5,-5,9,-7,6,9,-3,4],[3,6,-3,3,5,4,3,-1,10,-1,7,3,9],[9,-3,7,4,6,-10,9,6,9,-7,-10,-8,7],[2,-9,1,2,10,-10,3,-4,-4,-8,6,-2,2],[9,4,5,5,-6,1,2,7,8,7,7,-4,-2],[4,3,-7,-6,-10,8,7,4,1,-1,-10,-2,-2]],[[-8,4,7,7,6,4,-6,4,-2,7,-1,3,-1],[-3,-10,2,9,2,-7,-6,3,-4,-6,5,1,5],[-2,-4,-1,-8,9,-3,-9,6,3,7,-4,7,1],[-8,-1,4,1,-8,4,7,7,4,4,10,-2,3],[9,-5,-1,-3,-4,-8,5,-7,-4,-2,4,-7,-8],[6,-5,5,1,6,-1,-4,6,-9,-10,9,1,-4],[-1,-3,-9,6,-10,-8,1,2,-3,-6,-2,1,3],[5,3,-1,2,1,5,-5,-10,-7,-9,10,9,2],[-3,3,-2,10,-10,10,-6,-5,-10,-7,7,9,7],[9,-7,7,-3,6,9,-3,-8,2,5,5,10,-4],[-8,-3,4,2,3,5,-10,-5,8,9,-10,2,-8],[1,-10,3,9,4,-7,9,6,8,-7,-4,-1,-3],[-3,6,-1,-9,3,-1,-7,-10,-1,-4,4,-4,5],[8,-10,4,-5,7,1,-8,-8,-9,-4,-9,9,-4]]], dtype = "int8")#candidate|1|(9, 14, 13)|const|int8
bop_2 = relay.greater_equal(var_0.astype('bool'), const_1.astype('bool')) # shape=(9, 14, 13)
bop_5 = relay.bitwise_xor(var_0.astype('uint16'), const_1.astype('uint16')) # shape=(9, 14, 13)
bop_8 = relay.bitwise_and(const_1.astype('int32'), var_0.astype('int32')) # shape=(9, 14, 13)
uop_11 = relay.sigmoid(bop_8.astype('float32')) # shape=(9, 14, 13)
const_13 = relay.const([[[5.440753,-3.474151,5.140729,-3.061931,-0.177505,8.812593,3.546336,7.353891,-1.605655,-7.052348,1.599382,-3.640521,-6.083684],[-7.706143,-2.179815,9.319299,0.450124,3.789922,2.163691,-3.103357,4.086725,-1.616029,-8.663692,5.914330,-4.565137,-3.581432],[-3.833278,-9.005867,5.164906,9.764902,-5.628464,-1.633003,3.115342,-2.031381,0.942564,-0.113848,-1.865656,8.849865,-9.238409],[0.254510,-5.687071,-2.444383,0.717595,-4.667019,2.864185,-4.467437,-8.840590,6.112851,7.705418,-1.089058,-6.448040,2.301681],[-2.305414,5.499478,5.210522,8.176077,0.039240,-9.318753,-6.591803,4.636895,5.847607,0.496605,-4.320063,4.482634,-4.448846],[6.585919,-6.152566,-5.144470,3.110908,8.163912,-2.957528,0.273169,-2.851038,-3.412428,-1.428756,-4.302541,-1.958448,4.003874],[-9.445606,-5.824619,-0.450726,0.486217,-9.476220,6.582513,5.641874,-2.106659,-8.760020,2.288946,-3.719897,4.092555,-4.503496],[-6.855491,-3.045990,1.110531,-7.346525,5.865501,4.368975,2.569015,-7.474012,-3.951819,0.534237,-1.062016,-5.041236,-1.136964],[9.829806,0.826776,5.317693,-0.978902,1.042356,-0.279638,0.298305,-6.604908,-0.902148,-4.359347,4.033885,-1.910809,-0.733986],[-9.306987,5.983660,2.725174,-5.157896,-0.973753,-5.388224,0.466023,-8.786346,1.784864,-9.800248,2.186538,7.394573,0.225376],[-1.506637,6.059248,-9.973015,4.666987,-0.248150,7.954701,8.127808,-2.980371,-7.963601,2.376755,9.247386,8.265854,-7.090807],[-0.067719,-3.720290,-5.020081,8.993731,8.892148,8.943302,0.837318,6.672510,8.959376,-8.239214,-4.080174,5.027896,-9.547625],[-5.833184,-3.311380,-3.623923,-0.750199,0.628949,2.966106,-0.785539,-9.844908,7.967178,1.450709,-4.732617,3.563799,-6.584840],[-6.629049,2.966195,-2.363186,-1.207718,-0.650048,5.947751,7.098609,-1.381773,-0.725466,-3.035640,-5.959668,-0.062703,-9.748277]],[[-9.709114,-8.808710,-4.309976,7.485727,3.597894,1.174098,-2.970600,-3.408310,9.207127,-8.936212,-5.330798,-7.738663,-0.935388],[-1.129274,1.475714,1.312181,-2.768700,-1.897160,-2.281351,-2.027758,-4.129926,0.259802,3.973991,-9.834010,-9.158349,-7.355486],[6.445348,0.713701,-8.076490,7.823270,-9.495720,3.560251,-7.252200,6.357167,6.426757,-9.221901,-8.055575,0.539403,2.238803],[-9.884794,-4.246205,-0.995456,1.591846,6.442858,4.412631,0.948069,-6.980295,-3.858438,9.957319,2.421715,4.859959,-7.110912],[-4.844747,3.740387,1.938825,8.166902,5.026867,-2.963398,8.992219,-4.392199,-3.248364,-8.264367,-9.230392,9.466054,4.595125],[2.664288,-7.815733,-3.039678,9.662518,-6.258073,3.710109,-5.107291,7.536345,1.064664,5.353366,8.362148,-7.893633,-9.000046],[-5.703499,-2.112585,-0.286541,-8.094995,5.748194,6.643550,-2.971934,0.305506,4.084156,-6.137108,-2.664740,1.730430,0.106058],[6.801798,9.474257,7.929212,3.779711,3.824376,3.304662,-2.915985,-2.015073,0.899644,8.160318,-0.557594,-5.823545,0.786175],[-1.673219,-5.567083,7.024820,5.150706,7.137705,-7.442495,-8.752305,7.809951,0.378236,-9.140766,9.842571,4.020123,7.125387],[-2.317603,-8.761317,-9.361354,-6.984106,8.624318,7.669682,-7.147590,1.508032,9.019350,-8.174038,1.879155,7.352365,7.112358],[6.188390,5.330983,-4.622744,-5.016612,-5.267858,-8.239130,-4.185037,-8.413392,-0.772836,-3.836385,-8.605266,-3.991189,-4.255822],[-1.840112,6.503689,7.637355,-2.995229,7.951269,-4.179401,-2.857206,3.996223,9.629315,-9.521314,0.628769,6.772000,-5.954301],[3.528800,-5.774156,-5.393872,7.783894,2.743383,-9.941528,-7.872648,-7.291177,3.244043,6.527399,0.987037,-4.307501,-0.900879],[4.989981,-7.406587,7.470940,-0.639156,8.630879,5.161533,-4.140571,9.071564,-9.677869,2.561114,-0.674846,0.642131,9.968829]],[[3.597387,-5.215336,0.497467,8.683539,4.447675,6.991156,-4.723734,-3.315537,-2.000473,-9.425390,2.233925,3.297683,-0.835406],[-4.964560,6.306334,-0.293504,2.961298,-3.406347,-9.245243,-4.769937,7.581922,9.914660,1.343867,0.270601,0.168747,6.000872],[-6.686356,7.369787,5.007558,4.994690,4.782297,1.720753,-8.893860,0.927881,6.731531,6.482476,3.935305,-6.134845,-5.144906],[-1.145446,-1.947213,4.405307,-9.422115,2.775461,-4.940946,-4.794017,-5.391237,-0.293614,-7.088647,-7.224207,-5.772684,-1.855536],[-5.361970,-4.218614,-5.868874,-7.088965,-7.817577,7.789481,-4.613865,-7.532738,6.701405,-3.985383,-8.261017,5.609148,-8.106894],[-6.012683,1.256231,6.900886,-4.354516,-0.237326,-3.309674,8.109722,-4.608249,-2.284577,4.413520,0.475216,1.949067,-4.173160],[8.417130,-8.492578,1.733141,-3.184661,1.531085,6.099916,6.414100,-3.443002,-5.460272,-4.877786,1.700939,-8.788449,-7.473504],[6.982250,4.388604,6.279491,2.406915,5.423040,1.042635,8.977029,0.929330,-0.651551,1.221570,-4.279039,-3.229203,-6.041305],[5.123868,-5.378377,3.867675,-6.877211,2.098747,6.873237,6.707768,-4.041008,-3.080531,-5.375508,-1.338746,-7.938587,4.085556],[6.631970,8.287195,7.104458,-2.954235,-7.645597,-4.048080,6.293448,8.872722,-9.111313,2.456882,3.797659,6.737663,5.863805],[-9.065311,0.870329,-2.254572,1.382741,-1.497456,8.484228,-6.654749,-4.165441,-0.357879,-0.250381,-1.602935,-2.448672,8.472575],[1.225676,7.404664,-5.297626,-4.933417,-4.545906,1.631481,8.082923,-9.052625,-6.983065,-8.343193,4.199862,-9.414402,-3.895941],[8.069703,-9.400589,-3.818648,9.729882,-4.535065,7.181703,7.842088,-7.723185,5.425456,-3.509549,-1.892943,-5.579806,-9.748786],[1.861862,-7.437192,4.351401,-3.718969,-6.728826,-5.247507,4.220205,-1.793649,9.386866,-1.987882,-0.944475,0.801527,3.470615]],[[2.650283,0.996548,-8.702853,7.340979,-3.175691,-4.901216,-4.052621,-8.298274,-5.479935,-4.794466,-0.691143,-1.009347,0.271020],[7.348387,3.540434,-2.647640,-6.659088,-6.553104,-2.251317,6.497125,9.168801,7.529735,0.360278,-1.184860,5.202647,-2.262037],[-2.207125,-3.062639,1.528068,8.976272,8.334468,7.457648,1.544643,-6.710762,4.886391,-0.429361,6.113010,1.222903,2.348173],[-1.938684,-4.922068,9.936334,7.394100,-7.791707,2.156661,1.673328,3.224348,-7.651436,0.801660,-7.803891,8.192313,9.893448],[-4.721742,1.801074,-9.299274,9.235349,-3.815741,8.934898,-5.090051,-2.836258,0.334857,-1.943442,-0.132519,7.555802,5.567348],[6.980349,0.897061,5.934713,9.101447,9.627192,-8.671287,-1.528404,1.560842,-5.571066,4.504106,7.765526,0.978520,1.991604],[2.135518,3.359193,-7.576642,3.932611,9.123999,7.579235,4.421585,-8.214591,3.682654,-9.699441,-8.694690,9.906581,4.876220],[6.985174,-7.899978,-8.553295,1.979033,9.120847,-5.464605,9.751980,0.612435,-9.426675,-9.524828,9.501660,2.231489,-7.848380],[-6.046707,0.902960,1.082725,-3.621513,4.130771,6.384264,-4.094629,-6.215196,6.012705,-4.275543,8.556587,3.526846,6.301133],[8.354500,-1.273319,4.347388,2.673670,-8.840552,9.949377,4.358426,7.508864,6.914437,6.171007,7.004039,-4.212067,0.462279],[-4.438307,6.444794,3.123374,8.649761,-1.943636,2.168913,9.916148,-0.792886,-0.762084,-1.517183,-7.364876,-7.160947,0.962153],[-2.336103,7.107399,0.773664,-9.086844,-2.104978,-1.909170,0.133516,-8.276765,-5.074842,-8.866581,-2.116517,-0.347508,5.409359],[-7.841956,-8.549563,8.800066,9.988124,2.448335,-8.447940,9.436078,6.985491,-3.482226,3.170706,6.184083,5.405675,-5.650517],[1.667479,-3.195042,-9.510230,-9.723418,-6.573909,1.214616,-2.513368,9.451604,2.237396,8.869200,-1.860508,4.070685,-2.817220]],[[4.418072,4.548595,7.056307,8.468692,6.519217,0.457953,-1.944514,3.367623,6.453906,-4.494271,-7.584749,-0.681970,5.880805],[-8.715756,-1.036833,7.967322,-5.878558,6.726595,5.921880,2.366139,-5.806637,-9.057137,-1.844857,2.442215,-7.500962,-2.144933],[7.974588,-1.378956,3.100580,0.891109,-2.747437,-4.919296,4.402468,-5.586033,-4.618650,0.914696,-7.553802,0.145007,2.259484],[5.855622,7.992989,2.822872,-3.708904,7.304735,-2.156060,6.598466,2.716930,5.479460,5.138391,-4.708083,7.141228,6.941487],[3.733995,-1.142932,7.558053,-7.004951,-8.555865,0.671076,-3.528344,-9.863065,4.117857,6.228911,4.096307,-7.051531,-8.919713],[-5.857698,-6.117281,-2.705175,2.975384,9.549950,-2.182013,5.630285,8.209076,5.887395,6.735873,-5.474813,7.920540,5.475201],[-7.296182,4.096767,-1.571058,-5.682496,7.407738,5.300643,1.232626,9.557632,-2.474055,-9.242578,2.732004,0.981688,-1.357375],[-9.255973,0.157475,-3.295519,4.579212,8.180390,-8.846642,-0.276437,-1.637977,-1.382564,-5.910666,7.011163,-3.993749,-6.520405],[4.284154,-6.330434,8.542361,3.013937,-6.081036,-5.175064,1.452187,-6.102795,8.163330,-2.504829,-7.176455,-1.831959,-0.183511],[4.792733,8.705693,6.953715,-4.761769,-8.565308,-4.800689,-2.809911,-4.351252,-1.838947,-5.547493,5.896835,9.329737,4.105028],[-6.668301,2.051241,7.468907,4.814706,-0.759039,4.988014,-7.052219,5.389082,2.654497,4.914264,-0.184073,-7.805382,-1.863861],[2.512279,2.491961,9.801848,-3.657406,-3.908609,-1.564425,-6.104667,-3.888823,0.915409,-3.975129,3.833853,-4.685332,1.204963],[-4.317160,-2.535996,3.398669,2.239156,-5.378421,-7.329731,0.946231,7.681442,-8.686547,-1.491266,9.295016,6.935614,-2.341529],[-4.755433,1.834757,-2.399697,3.287898,1.956599,-5.669325,8.631594,6.436465,1.657513,-1.856348,-2.667747,-2.028506,-1.082490]],[[-0.796624,6.499460,-7.225500,-7.775996,0.850588,-0.601233,1.049230,5.173872,-0.750184,-3.774730,-9.305681,-5.690803,-0.622059],[1.084088,7.945131,5.022724,6.718789,6.053820,-9.002420,-0.318989,-2.448196,-0.943430,-6.884208,6.968440,-3.084334,-0.161367],[5.833772,0.173109,-0.980260,-2.437608,-7.238556,6.971595,7.655892,-8.898197,-2.734670,6.891274,6.289254,-0.426752,-7.754739],[-3.866269,-3.333146,2.371476,5.061342,1.839333,-9.369370,9.178281,3.984520,-9.588479,0.087854,-1.837337,3.858191,-3.449634],[6.960380,-1.657673,-4.875249,-3.968743,-1.665271,-7.065536,8.046790,2.552785,-5.629697,-2.648973,6.588152,-0.687129,9.806949],[6.225099,-6.612865,5.791610,-0.811183,2.201213,-1.385439,1.042283,-5.416491,-5.839087,-4.551689,2.467339,0.020769,-6.980140],[-6.186778,6.727707,-0.027564,3.408529,3.637121,-4.607753,-7.059720,-4.033446,-5.105225,1.686146,-8.304231,-8.631085,8.039056],[7.705000,8.845967,-3.300623,-4.424751,-6.460669,-6.536006,6.255037,-2.103322,5.533656,-7.096336,-3.351316,-9.529234,0.764555],[0.009092,3.325303,9.882956,6.279937,-8.849132,-2.348948,-5.711980,6.356535,-4.256703,-9.718247,8.837889,-4.276527,6.245016],[-0.658955,-0.257232,-0.478182,2.174212,6.562180,-7.859011,1.690871,-4.855851,0.821069,-2.859248,9.190607,-4.536313,-2.207620],[7.097663,8.536686,1.605326,-2.928673,8.489397,7.424040,-0.411030,0.959064,-8.433887,-5.764746,-0.831187,7.817342,-8.623934],[-8.232177,-3.643709,-3.395522,7.121726,-9.491196,3.499417,-1.043774,-6.357111,6.553498,-0.892707,0.307080,-0.535008,9.401518],[-1.630187,8.732593,6.740228,8.711024,-1.887303,-5.423246,8.436251,-9.158576,2.632621,8.670079,7.231758,7.830766,5.678862],[-3.229812,-6.181335,-6.025992,-3.023879,9.403975,6.434786,3.023120,1.240928,9.158543,-7.332191,0.047503,9.500796,6.988431]],[[-0.732150,-0.778203,-2.408018,9.283842,3.213774,2.148079,3.378637,4.521976,8.400010,2.874032,-4.462308,8.145353,-4.790402],[1.796770,5.690967,-6.567516,6.449170,2.125623,2.276983,-7.477312,-1.410276,-6.650171,-1.989765,7.271993,-1.397614,-8.149136],[6.590009,-0.826137,1.477108,6.017906,-8.229887,-0.306177,6.005107,8.103262,-9.232564,0.117888,6.802066,-3.876575,8.566718],[5.388010,-6.866733,4.287244,1.000218,-7.671354,7.945488,8.999747,9.482269,6.476993,1.609130,-8.817702,-2.149074,2.914740],[8.029647,4.147242,3.614239,0.108682,9.502350,2.474476,-5.222653,6.854462,-9.468528,7.477456,-0.561202,-3.714133,-9.740787],[4.752793,-2.333920,-5.629325,-4.135688,-6.284427,1.653773,-1.082874,-1.421375,9.193105,6.233686,-3.617008,-9.579749,7.209408],[-8.766721,-6.043573,-4.679084,6.765235,-0.002950,0.175580,-7.569558,-9.940740,8.730027,-9.496554,8.528418,-5.891748,-8.933653],[-8.643604,-9.329883,4.937315,4.668793,0.675829,6.355875,-3.599131,4.447051,-3.510732,7.665939,8.582213,8.777134,6.400865],[2.872117,1.141513,-6.823072,-5.639041,-1.412840,-3.503993,-4.191556,3.822301,-0.749737,3.042631,3.537049,6.214989,9.153047],[4.889828,-6.385497,9.151793,-9.167554,5.488561,-3.865526,-8.482768,4.677926,-0.070265,-3.110238,5.776143,4.054341,-3.208852],[0.705439,2.298663,-3.760244,7.280707,1.049481,4.989776,-3.769031,8.904665,-2.993527,7.627706,-8.474287,8.193220,1.976515],[2.040975,-0.249698,-9.187692,-6.796811,-9.399844,-8.344812,9.926473,-8.436365,-2.948066,-2.258602,7.825648,9.035974,-8.790809],[-3.172070,-6.730749,6.880139,-1.312535,-5.448666,2.559562,-0.044806,8.647610,8.784025,6.460951,9.010670,-9.466872,1.946493],[5.182319,-7.687665,-4.292218,7.290221,2.684157,-9.010530,-5.942553,-5.401968,2.214378,4.835339,6.848375,-4.116776,-5.354290]],[[-1.960477,9.425463,-3.208536,-6.093014,-6.177628,8.406684,-6.319847,-2.858147,-9.249555,6.827912,-6.842201,-4.751887,6.184089],[5.558911,-6.011803,-7.776074,-8.432316,-6.301213,-7.105007,-2.351509,4.491693,-0.022333,-7.541955,-4.990057,-6.365651,9.013232],[9.145219,-5.861012,6.744489,-8.368467,-1.130992,9.874945,-7.507421,6.098770,-7.103553,2.470742,-0.674819,3.145095,3.646656],[0.566090,7.438584,-8.801769,-8.535848,-0.489760,-7.796916,5.929492,3.566630,-9.692444,-3.257166,-9.585245,2.978977,-7.710999],[8.272193,-0.577642,-8.338986,-9.578665,-4.650182,-3.683023,-1.526754,-4.895734,9.767498,6.204506,-9.443664,-3.931775,0.730681],[-6.433996,-9.048721,-8.484086,-5.562803,-6.918398,6.693506,7.744027,-6.470858,-0.966593,-4.891429,0.118208,0.529872,-5.608349],[-5.677022,-3.255706,3.403596,-1.088198,-9.201605,4.551431,8.642049,3.792637,7.919446,-1.463039,-0.039304,-5.966780,-1.586247],[-7.639054,-5.416609,3.740598,9.864506,-1.551976,-4.361466,-9.997520,-0.881422,-6.776744,-8.516548,-9.176098,-9.875663,9.957668],[2.001106,5.935777,4.371006,8.476613,-1.083824,6.214798,4.044906,-7.854550,-5.300780,-0.371708,-1.349261,8.417207,-8.929500],[-9.550527,-2.198998,0.700551,7.891338,0.096201,-9.462438,-2.479667,-6.531629,-4.041092,-4.848536,0.319393,8.517973,9.985508],[-9.354221,-9.210540,-4.758770,2.892207,-2.975201,-6.768752,3.195961,9.180456,9.552301,-9.365442,4.981787,4.030433,1.420793],[-9.456530,-3.518713,8.826360,-9.978559,0.223183,-6.514891,-6.078264,7.911514,5.365191,-1.183023,-9.958561,-0.586665,3.461546],[2.632029,1.164858,-1.066983,6.397563,7.977498,0.326005,2.976548,-3.534200,-6.852326,-3.800496,-2.362445,-9.246613,-0.995717],[-0.755307,-4.178898,-5.991092,-8.197771,-0.081621,-0.187778,3.842439,-8.559220,6.872652,8.138178,-0.050235,-0.988162,2.150531]],[[-1.260630,-6.382965,-9.039225,7.091674,-7.052483,-8.834658,-4.514192,7.690852,-6.577508,-6.173894,-6.693443,-9.136298,-9.882686],[2.948986,-8.140196,0.533790,-1.234646,4.727861,-6.701556,7.797256,4.867801,5.941004,2.058939,-0.734292,3.612503,-5.190236],[-6.652966,5.948581,5.324982,-4.585344,5.559816,-1.137167,8.380736,-9.257093,3.474100,-4.589503,7.512304,-2.561220,5.266388],[-8.602501,9.890315,-1.569117,-8.650885,-9.126539,-7.382909,4.487861,-5.561488,8.982789,0.664745,0.530075,-4.783338,0.750916],[7.677080,-2.738071,-0.508545,2.643290,1.991516,-9.409712,9.870568,-5.283880,2.599832,3.995615,7.741560,4.885676,-5.679667],[4.718857,-1.536294,-2.774642,-3.578054,-3.769490,-7.699689,8.177773,2.149507,2.777022,-8.392063,-5.923657,5.528396,-2.430644],[6.755584,0.455965,-0.271011,-6.082035,-6.562204,8.575315,9.664864,2.781342,4.721031,9.217011,-6.233834,-2.394744,-4.238028],[-8.432180,-9.607954,5.999470,-6.051256,-7.409239,0.014809,-4.156443,2.966737,0.157309,0.098793,-2.519007,5.070904,-2.726516],[-1.519686,-8.672258,9.523129,-3.381833,6.638578,4.827100,1.273172,1.280003,-5.226230,-8.038572,1.568423,-4.169747,-3.374731],[6.941753,7.929828,-2.882191,-7.581746,-0.397282,0.395213,-9.937442,-2.183117,4.007728,2.763889,7.004708,-5.900872,2.561879],[2.942190,-0.348565,6.715098,1.959142,8.645463,-2.948041,-0.825089,-0.548544,-2.665534,1.694343,-0.610353,-2.420406,4.449992],[-6.978313,1.734925,7.365383,8.896794,-1.937727,1.520349,3.514605,1.029428,9.985349,2.712916,-2.637591,-5.245543,-3.586133],[-5.871306,-6.782724,-9.598575,6.053377,-8.583459,-9.120526,-6.265862,-7.249284,-9.760516,3.482820,-9.371518,-6.509550,-9.529022],[6.336907,-6.761261,2.161982,-6.945661,-6.426048,-4.087306,-9.713243,-2.355625,2.876768,4.833397,-1.786366,5.375858,-5.905720]]], dtype = "float32")#candidate|13|(9, 14, 13)|const|float32
bop_14 = relay.not_equal(uop_11.astype('bool'), relay.reshape(const_13.astype('bool'), relay.shape_of(uop_11))) # shape=(9, 14, 13)
uop_17 = relay.rsqrt(uop_11.astype('float64')) # shape=(9, 14, 13)
bop_19 = relay.add(const_1.astype('uint8'), relay.reshape(bop_14.astype('uint8'), relay.shape_of(const_1))) # shape=(9, 14, 13)
var_22 = relay.var("var_22", dtype = "float64", shape = (9, 14, 13))#candidate|22|(9, 14, 13)|var|float64
bop_23 = relay.power(uop_17.astype('float32'), relay.reshape(var_22.astype('float32'), relay.shape_of(uop_17))) # shape=(9, 14, 13)
uop_26 = relay.sinh(bop_23.astype('float32')) # shape=(9, 14, 13)
uop_28 = relay.acos(uop_17.astype('float64')) # shape=(9, 14, 13)
bop_30 = relay.greater(var_22.astype('bool'), relay.reshape(bop_2.astype('bool'), relay.shape_of(var_22))) # shape=(9, 14, 13)
bop_33 = relay.greater(uop_28.astype('bool'), relay.reshape(bop_19.astype('bool'), relay.shape_of(uop_28))) # shape=(9, 14, 13)
bop_36 = relay.left_shift(uop_28.astype('uint8'), relay.reshape(const_1.astype('uint8'), relay.shape_of(uop_28))) # shape=(9, 14, 13)
var_39 = relay.var("var_39", dtype = "uint8", shape = (9, 14, 13))#candidate|39|(9, 14, 13)|var|uint8
bop_40 = relay.less_equal(bop_36.astype('bool'), relay.reshape(var_39.astype('bool'), relay.shape_of(bop_36))) # shape=(9, 14, 13)
uop_43 = relay.atan(bop_23.astype('float32')) # shape=(9, 14, 13)
output = relay.Tuple([bop_5,uop_26,bop_30,bop_33,bop_40,uop_43,])
output2 = relay.Tuple([bop_5,uop_26,bop_30,bop_33,bop_40,uop_43,])
func_45 = relay.Function([var_0,var_22,var_39,], output)
mod['func_45'] = func_45
mod = relay.transform.InferType()(mod)
var_46 = relay.var("var_46", dtype = "int8", shape = (9, 1, 13))#candidate|46|(9, 1, 13)|var|int8
var_47 = relay.var("var_47", dtype = "float64", shape = (9, 14, 13))#candidate|47|(9, 14, 13)|var|float64
var_48 = relay.var("var_48", dtype = "uint8", shape = (9, 14, 13))#candidate|48|(9, 14, 13)|var|uint8
output = func_45(var_46,var_47,var_48,)
func_49 = relay.Function([var_46,var_47,var_48,], output)
mutated_mod['func_49'] = func_49
mutated_mod = relay.transform.InferType()(mutated_mod)
var_51 = relay.var("var_51", dtype = "float64", shape = (6, 10, 5))#candidate|51|(6, 10, 5)|var|float64
uop_52 = relay.rsqrt(var_51.astype('float64')) # shape=(6, 10, 5)
const_54 = relay.const([[[4.712002,-5.990925,-1.408114,-1.673782,8.100982],[-9.947992,-6.484145,-1.947150,-0.507201,8.779500],[-3.995150,8.635430,-8.144530,0.955058,4.111085],[1.831541,6.070092,3.317657,-9.866563,-1.597117],[-9.191631,5.761014,5.669391,-7.430388,2.014752],[5.155461,2.417457,7.930716,-8.491518,1.681926],[-8.180404,-4.778514,-4.527263,2.974640,-9.108936],[0.637851,-1.842011,8.671567,-5.296434,7.390068],[8.379066,5.326876,1.392351,6.967604,-5.667372],[4.461481,2.953944,-6.015657,8.407838,-9.248962]],[[1.942644,-6.450772,-5.806939,2.958725,3.364534],[-2.897363,4.575157,4.038099,7.454220,-9.698835],[6.416886,-7.623843,-6.788362,9.309484,-0.271988],[8.642346,8.391227,5.972604,6.902099,-0.049825],[5.568986,3.783784,-4.054257,5.236218,9.418762],[1.420100,9.930339,-9.888583,-1.087803,0.879296],[3.385531,6.513716,-6.109257,3.722644,5.212474],[-9.565143,-0.392552,-6.649545,5.796814,-4.339742],[9.804454,7.950634,8.635266,-9.348976,0.344574],[-7.501877,-2.570539,9.252950,-0.150268,-6.729154]],[[-9.900019,-6.946477,8.261986,-3.465150,-4.841392],[5.172759,-7.727962,-8.158952,-7.889367,-5.925367],[-6.980491,6.498928,-1.343269,6.736041,9.507392],[-4.266559,0.242092,-2.492281,3.622284,2.266151],[-8.251831,-2.334050,1.068955,-5.286925,4.779199],[-2.795707,-4.296627,8.520038,-4.078555,4.022927],[-2.401785,-3.890267,6.790811,-4.413212,4.169999],[-7.214450,9.476278,-9.535663,-9.458823,-3.478102],[5.044616,3.414206,-1.687793,-9.821332,-8.982616],[-6.681996,-9.824365,-6.197725,-2.130245,-3.360948]],[[-3.877369,7.300106,8.633525,-6.963691,-3.064773],[-1.112626,4.062523,3.311749,-5.718979,9.385923],[-6.852724,9.252933,-9.950502,-4.452732,3.733443],[-8.178100,8.543884,3.395676,8.082792,-7.944336],[-0.279714,-9.112211,3.620396,-8.690970,8.939424],[-9.542334,2.463546,-8.084033,7.095627,-4.654290],[-7.076672,-3.525660,-3.527581,-0.532174,1.395518],[-8.879009,4.269789,-4.069450,-2.365010,-3.353507],[-3.880832,4.436904,6.255718,4.700237,-7.725801],[4.100720,-9.775125,0.671474,4.570803,-0.830298]],[[-8.776581,-5.765109,3.397194,-6.246170,3.431356],[-9.684646,5.287088,-7.585143,5.455701,0.229520],[3.304998,-1.155944,-6.901823,7.386689,-0.715402],[9.335404,-2.195532,-1.662112,-9.164288,8.194769],[-4.425082,1.518945,-8.998737,-3.288146,3.361009],[7.446450,-0.572505,-2.563961,2.428016,-2.986381],[1.782981,9.232691,4.692382,-0.893233,-2.094817],[-5.410204,7.361777,4.862862,1.263969,6.215657],[1.698918,5.123281,0.357777,1.322480,2.038146],[-4.365455,1.817108,-6.068827,7.606789,-2.766825]],[[1.383314,-1.587714,-2.449952,-6.283218,3.698222],[-6.583486,-2.830300,-4.960037,1.695559,8.277495],[9.154947,5.088161,5.719023,-7.321983,-7.607535],[-3.174107,8.006559,-3.581988,-0.262527,5.503626],[2.928209,5.365412,7.003620,4.341823,4.950103],[-0.987430,-9.520079,4.757260,9.034966,-6.797941],[-9.745651,3.191591,-9.282586,3.563961,-3.144529],[-8.316843,-2.910901,-5.760320,-3.676376,-3.216842],[-0.967059,-2.856361,-3.365928,-6.779689,3.560472],[-9.862863,2.013515,3.744227,4.054538,8.989782]]], dtype = "float64")#candidate|54|(6, 10, 5)|const|float64
bop_55 = relay.floor_mod(var_51.astype('float64'), relay.reshape(const_54.astype('float64'), relay.shape_of(var_51))) # shape=(6, 10, 5)
uop_58 = relay.exp(bop_55.astype('float64')) # shape=(6, 10, 5)
uop_60 = relay.atanh(const_54.astype('float32')) # shape=(6, 10, 5)
uop_62 = relay.atanh(uop_52.astype('float32')) # shape=(6, 10, 5)
uop_64 = relay.acosh(uop_62.astype('float64')) # shape=(6, 10, 5)
bop_66 = relay.greater_equal(uop_64.astype('bool'), relay.reshape(uop_52.astype('bool'), relay.shape_of(uop_64))) # shape=(6, 10, 5)
uop_69 = relay.log10(bop_66.astype('float64')) # shape=(6, 10, 5)
uop_71 = relay.acosh(uop_69.astype('float64')) # shape=(6, 10, 5)
bop_73 = relay.subtract(uop_69.astype('int8'), relay.reshape(uop_62.astype('int8'), relay.shape_of(uop_69))) # shape=(6, 10, 5)
bop_76 = relay.divide(uop_71.astype('float32'), relay.reshape(bop_73.astype('float32'), relay.shape_of(uop_71))) # shape=(6, 10, 5)
func_45_call = mod.get_global_var('func_45')
func_49_call = mutated_mod.get_global_var('func_49')
const_80 = relay.const([[-6,3,6],[4,-7,8],[3,10,-5],[-8,-4,7],[10,-10,5],[-6,-2,-8],[8,-2,3],[2,8,-4],[10,5,2],[3,9,1],[-1,8,-6],[4,8,-3],[-4,7,-9],[-4,-2,5],[2,7,1],[-9,5,-6],[4,6,-3],[-5,6,-10],[2,5,4],[-7,10,-2],[-2,-3,-8],[9,-10,6],[-4,2,-10],[4,-8,-5],[1,-1,-5],[-1,-3,5],[5,3,-9],[-9,-7,-4],[3,10,-6],[-4,-4,7],[-9,10,3],[3,-1,1],[7,-4,1],[3,7,5],[-6,-2,7],[4,8,-8],[-1,-8,9],[-4,-9,1],[8,6,-7]], dtype = "int8")#candidate|80|(39, 3)|const|int8
const_81 = relay.const([-7.366718,-7.539768,-7.605538,-6.842311,-5.320169,3.411945,7.528387,9.366101,4.138536,-2.300417,-6.742795,-1.105461,5.156951,-1.223177,9.075633,-1.112345,-0.325100,-5.887745,3.913955,-7.096699,6.383815,0.553142,5.033034,3.745531,0.711338,-4.782521,1.819645,-7.469631,8.868668,5.504698,-9.683285,-7.404951,-6.649471,9.242785,-1.900056,-8.276763,5.114566,-9.603888,-1.792955,9.444219,3.475927,-3.505556,-8.172771,2.792571,9.376737,-1.456571,-8.536091,-2.973297,-0.007579,-0.972141,6.960219,-9.343394,-7.007107,0.556847,-0.976521,5.228417,-2.324491,-4.250301,-7.984853,8.291156,-1.219341,2.439081,-6.430048,-7.274847,3.664964,1.025658,4.463178,9.150967,-6.420203,-2.799361,8.188740,-5.881836,6.375887,8.744987,6.552463,6.748695,-4.292359,-1.007205,-2.164849,3.693988,-4.608196,1.185790,0.157368,3.088211,3.801651,-1.771444,0.958924,2.646367,-1.027515,-3.808176,3.921220,4.993490,-0.821408,-4.771488,-0.510468,-5.045688,6.129449,-5.659198,-6.481436,-7.045826,-6.295527,9.212205,-3.658669,-2.585607,0.872277,-8.295855,7.796768,-9.399802,3.052360,-7.399169,8.669830,-2.057535,-4.118041,5.712268,6.683164,1.819270,-4.654631,0.312951,6.989531,1.778480,2.711881,3.414886,-6.983278,-0.517287,-8.339524,1.110676,-6.310059,-3.995879,1.271730,0.119370,-4.901877,-1.100283,8.491442,3.359489,2.301488,8.722116,-3.923420,5.158460,5.733964,-4.520073,2.203754,1.432833,-3.119009,-1.051681,5.106734,-3.492144,-5.627123,-9.223353,-9.593427,-5.305892,3.010648,-4.499079,-4.441070,-8.553165,-0.094702,-6.575437,-8.979246,7.398515,0.134799,-2.250474,0.689413,-7.829124,8.190674,-8.353595,-3.107285,-3.927300,-6.080419,6.896348,-6.782746,-5.913927,8.694160,-5.069588,-1.081664,-9.941849,-7.285594,-3.983311,8.021986,4.036912,-8.743863,-0.069419,0.464507,-7.770340,-2.007623,-1.942599,4.480508,2.574373,6.292127,-8.568096,1.839879,-3.203215,-1.481398,3.448140,8.906576,-8.038827,-0.647460,6.507948,7.569930,-3.309537,6.465200,7.357591,6.323836,1.728944,-3.133285,3.103650,-3.620718,7.242710,-0.201507,-9.801642,-7.579340,5.516310,-4.898238,-5.038680,-0.427254,3.795474,2.365821,-3.059630,7.448175,-5.526517,-2.576993,3.941814,2.440127,3.347101,5.322914,3.723963,-6.005998,1.865712,4.856721,1.878461,-9.511827,-8.272357,9.549174,-6.037522,-8.202635,-0.516535,-8.562134,-6.983705,3.317678,-5.862713,1.727928,-9.213612,-4.726134,-9.482132,1.949380,-2.745136,-5.434168,5.018359,7.125502,-7.096470,-2.733376,-0.470080,-5.628194,-5.632056,-7.565292,8.977666,3.535424,-2.846140,2.326838,0.405589,-5.600290,-3.246822,-1.913813,-1.871487,9.011690,-4.363268,5.618066,3.182573,0.401335,1.753615,-0.990149,1.696814,-1.688208,9.722108,2.758491,-3.976851,-6.665325,-2.156929,5.538631,7.167594,-9.072134,-1.914155,-0.264389,3.264923,-7.901707,-5.762118,8.265172,-0.477246,8.017619,3.535351,-4.165659,-0.078042,-5.233172,-7.378885,9.408970,5.071152,2.941326,0.798692,1.860555,6.019235,-1.112762,-8.488288,4.660982,2.799106,-1.266284,4.084182,0.740582,-8.847607,7.646643,4.925718,-9.726124,-9.096015,-9.215346,5.272497,-8.042514,0.046027,-7.636273,4.144756,-3.732605,-0.307225,4.265741,-6.005368,0.066028,2.799986,2.132730,1.732003,6.743427,3.835263,-2.617321,1.396851,9.038026,1.223137,-4.715623,8.148645,0.440059,0.810621,-0.416897,5.048415,-3.537186,-2.385657,3.173596,2.020494,8.237910,6.210721,-4.322152,-6.916009,1.012708,1.554734,-9.014205,3.593993,6.850392,7.018927,-5.864510,8.238273,9.104769,-0.900215,-8.362047,7.433172,-9.505180,2.644704,1.626812,-9.112157,0.188221,-8.697889,-8.325435,6.703552,-0.552518,4.265721,-5.470556,-4.360683,-3.402491,-5.629142,-4.950419,-9.270919,-2.483680,9.500838,-0.300006,9.697749,-3.302754,5.569310,1.008303,-3.301921,4.138679,-0.982953,-7.452163,1.602033,3.928805,8.342143,0.502936,-4.268614,5.926158,2.586205,2.737031,7.531797,-7.447767,-4.719939,-8.544738,-9.545002,2.501156,5.542789,1.772611,-1.758767,-8.749944,-5.751264,-8.269610,-5.410097,3.970298,0.974540,-1.250135,-0.467463,6.389950,-0.166581,7.458926,-9.281495,7.971893,-9.064492,-4.691048,9.401732,4.007254,2.506893,-0.764312,9.838894,9.157053,-8.660774,-5.994227,6.022882,9.284821,9.157311,-3.923731,6.319366,7.265601,-0.450295,2.663819,-0.513988,4.894584,-9.476384,7.208433,8.604714,-6.743119,-1.348887,-6.194742,-9.964214,0.189455,-9.733609,6.533896,2.150060,-5.620580,8.463095,7.217353,-0.786899,9.061091,-7.640935,-0.990258,9.847885,8.267581,5.378943,3.685079,-8.231944,0.074005,-0.759465,-7.212943,3.363146,7.436113,-7.193566,9.955911,-8.885022,4.159042,3.497893,-6.446900,-9.455202,7.199070,-7.387141,-2.280950,3.949205,9.868545,-4.629000,-6.402933,-3.384305,-7.645886,-0.680323,8.308097,-5.382805,-3.456053,9.313650,7.976187,-3.039454,9.790452,3.307258,1.490748,-8.219096,8.899208,9.859628,-3.821259,8.869649,-5.549439,-6.771606,-9.605732,6.391366,3.105260,-3.436235,-0.816844,8.646833,3.195957,8.578293,8.896934,7.338425,5.719072,-8.509799,6.684302,-5.262564,-6.945547,0.924250,-0.890868,5.944361,2.871687,-1.559401,-0.523424,-1.242005,-2.042770,9.137633,0.430271,-3.795542,9.678534,-2.866844,3.005641,-9.105619,-7.269018,-2.965243,-2.190110,-8.334911,6.912840,-7.891603,-2.711294,3.756348,-7.806856,-4.372343,-2.706632,-6.069521,-3.988543,-5.020954,-5.541796,6.787860,-0.591301,5.698273,5.870622,8.694710,-9.497882,-1.777323,-3.103294,1.381137,-9.375671,-2.232851,5.552642,-4.255375,2.289037,1.542267,-7.322748,-0.336261,-0.241441,3.193352,1.419758,9.623092,-3.425349,-8.798208,8.453968,-6.224537,-2.850836,-3.470449,8.948763,9.659263,0.161631,-5.414581,8.481426,8.138741,-6.312260,5.853504,1.141772,5.402191,-6.107494,-3.691583,-8.822575,-5.354854,3.915330,-2.115230,4.507513,9.505236,-9.602000,-8.134052,8.098285,9.426109,5.945685,9.485239,3.370334,-9.356201,7.334385,-6.761515,8.922695,-6.871612,7.958315,-9.140415,-8.729795,-5.516065,8.187959,-3.688423,-7.975501,4.828526,-8.017245,-6.976637,7.851867,2.584654,8.553396,-8.861330,-7.875862,9.406802,4.295506,8.180386,6.574068,-0.048250,-7.564757,2.361509,1.506297,-0.894268,-4.267058,7.909146,-8.773874,-1.842984,-1.969130,-8.211732,1.522343,0.104492,0.399416,-1.831206,-2.954525,-3.275404,4.238242,2.851796,-2.578292,-0.574407,-0.687673,-0.208766,-8.612193,-4.776600,-1.488236,-1.834058,-3.375068,-5.742569,-0.807517,-1.307327,-8.471131,1.161350,3.658056,-1.961180,3.568702,-8.212888,-4.792732,-1.957116,9.747973,-1.297553,2.009548,8.871521,-3.398310,-1.611416,-0.855005,8.147065,3.259096,-4.634097,2.146653,-0.247811,6.544780,-8.606684,4.666325,-1.109652,6.918384,-7.421490,4.187311,-0.542999,-6.944721,-2.836704,5.839951,5.999955,1.405293,5.704028,-1.701767,1.057332,-1.366712,5.019277,-9.224433,-6.956313,-0.040281,-6.593107,-8.987382,0.669439,7.458521,0.622866,4.488942,3.684252,-4.113043,1.428158,-7.503449,-5.779275,-2.731737,0.945284,-1.933618,-1.691913,-8.864139,-8.861710,3.776391,6.599225,-8.238311,-4.700201,3.551096,-2.317404,-1.361693,-0.836061,-9.772966,-0.539414,3.224715,8.233173,5.417758,-2.655286,-6.775825,1.093998,4.555605,2.698983,4.838316,0.524944,5.300402,2.311714,-5.884877,7.770650,-1.323351,6.612154,4.316549,3.638926,6.657505,-6.460355,3.081615,4.108441,0.346502,-9.995547,-3.097216,9.999284,7.525870,-1.669465,1.142183,-0.158810,8.210217,5.582933,-0.355990,4.812290,-3.341814,8.116702,9.805932,-8.853553,3.889555,-5.384251,1.717855,-6.832296,-6.974619,-7.024006,-6.135146,4.214494,-7.709918,-7.815518,-1.415502,-0.134778,9.917006,-6.555616,2.506973,5.727901,2.897474,-8.924646,-2.821408,7.387391,0.232661,-0.119191,-3.306533,3.350431,-3.647171,9.643712,-8.363983,5.632984,3.490210,-1.337448,5.984245,-9.304323,4.956979,7.054853,4.283986,-2.054477,-5.231909,-2.275352,1.733432,9.350538,0.586132,-6.275844,9.276885,8.326764,6.734489,8.790788,-4.800141,0.640752,-0.171973,7.469861,6.347506,6.145441,-6.890649,-3.516213,3.497056,7.610228,-9.948319,-0.335619,2.112511,-4.480804,-0.304544,5.395824,9.829084,-1.018426,7.111287,0.312205,-5.126435,-3.517813,-6.792243,-9.206353,8.935287,-1.170643,7.481006,4.228978,7.110695,0.057868,4.587790,-4.860660,8.252530,-8.387767,-7.976622,3.239079,-8.661527,7.118171,-0.338519,1.061963,8.468971,9.138848,-9.390402,2.395805,-7.784287,1.569902,-5.888829,7.145165,2.436600,-1.755259,0.191781,-4.528433,-4.860698,9.915493,8.124142,-0.924023,-0.497756,8.722907,-5.542546,-6.814959,4.085124,-2.984921,2.499452,6.531868,5.718341,-7.667839,0.729616,0.641218,-4.527599,-6.385770,0.426598,-3.941223,-7.854235,-9.099113,1.490466,1.503106,7.655736,-5.529943,6.500260,0.313945,0.926980,-7.621296,-9.003965,-6.847256,-6.276316,-1.432713,8.957293,4.268334,-8.372228,-4.079933,5.124285,-8.261821,1.046428,5.225861,-8.088239,-7.177437,7.497135,-4.695082,-8.098594,-9.444590,0.203751,-2.214452,-8.901608,-4.956432,7.120859,-3.880585,-8.557532,6.414494,1.702994,1.834591,8.571378,1.401289,-0.336872,-3.798838,2.068251,0.914654,9.839130,8.614452,2.579608,-0.602565,0.681626,0.391784,3.016569,5.200554,-0.397628,-2.217873,-7.271640,-9.072848,0.294180,5.238143,5.428957,9.203787,-0.665253,-8.841578,-3.469621,2.804765,1.339861,-0.774515,3.080908,0.986529,-4.517785,-6.715936,-9.637810,3.805477,0.571620,-3.210466,2.243811,-5.971712,-1.008857,9.781293,8.354526,-3.240559,-3.699968,-7.690887,6.369240,6.834665,1.548255,-5.938641,-0.566221,-6.184852,5.396549,-0.128756,-1.158037,-4.287872,-1.229362,-2.223700,-2.454674,-4.555649,4.223526,3.926811,3.391330,-5.650802,-1.126319,-6.614691,-1.598015,-3.966255,6.866569,-9.614864,4.453085,-1.456579,-0.710864,-1.550975,-7.118765,4.117269,8.359824,-0.550999,0.650364,7.934553,2.768653,-5.051909,-8.991694,3.468622,-7.891843,-3.917696,1.521983,6.782933,4.489633,-8.608441,-2.871654,8.327597,-5.035031,-0.253446,-7.479610,6.548022,3.045516,6.981096,4.747120,2.074786,-1.808250,5.086235,9.092920,6.945976,-0.737353,-1.510734,-2.043101,-5.497201,8.418670,-1.097136,0.298181,5.601991,-8.247728,-6.144188,-4.998826,1.696340,1.684921,-6.252054,4.201473,3.076943,3.891697,-6.068317,0.104655,5.879007,-6.419655,-7.272345,9.388293,-4.925026,-4.089008,7.104629,7.312670,0.206897,-2.053021,3.646683,-0.110225,0.420069,-5.482105,1.624284,4.447594,-2.922824,-7.114714,4.371831,-0.214580,8.200236,-1.472553,1.590813,6.117547,5.510228,-2.278644,9.433995,5.940923,8.342644,5.529725,-1.753785,1.030359,-7.661595,7.397524,0.149070,7.482816,9.395913,-1.397647,6.999108,5.880045,6.660767,1.120444,-8.568998,6.821997,-2.888303,-9.981591,6.959751,4.620081,-6.506130,0.508970,3.071226,-0.500141,5.681706,7.732745,7.090204,5.682030,7.524631,1.871003,6.328391,8.079830,3.809408,-5.631328,0.236554,-0.732966,2.057274,0.245656,5.136233,3.545459,-4.804231,9.406464,6.637639,-1.588565,-3.498913,2.763919,8.310845,3.948142,-9.434215,1.037962,-7.322834,2.543456,-2.423593,-2.513927,7.158836,-8.858868,-2.938207,0.229887,-9.534186,-1.718794,2.350666,-1.467158,-5.661496,-2.223813,-4.681960,-2.953428,4.453551,-9.084144,7.325993,9.912698,-7.352949,-5.219578,-9.287548,-2.592443,-8.508820,3.294849,-3.671045,-4.006646,5.239666,-7.897039,-1.505489,-0.961648,-7.234872,1.588604,6.293197,-2.783067,-6.099038,8.337162,-3.815697,9.531679,-9.965918,5.505939,7.846232,-5.808657,-5.398462,-9.018273,5.866510,-3.754746,4.538325,6.029732,3.432857,-8.784434,2.852450,-5.909435,2.059041,-5.721181,-7.160070,6.548891,5.298546,-8.120986,-0.752497,-6.483499,-1.602531,1.499940,8.941360,-6.419585,4.083392,-1.436661,-0.039931,-3.417111,1.736729,-7.603068,-2.770742,5.436912,2.761012,4.350076,-6.939469,8.123177,1.576194,-3.009278,-4.517478,3.414327,2.674126,-2.969243,-2.160803,8.082211,7.470225,3.979332,4.125290,2.990511,-2.448336,-5.176477,-7.141476,7.718508,0.243010,-7.188396,1.720801,6.397465,-5.938032,-8.092678,-9.139024,-4.060530,5.093933,-3.117661,-9.616809,9.852402,-4.278044,5.755124,-3.876985,-2.035987,-9.497596,1.695750,-4.139522,-7.570178,-1.987184,6.978102,-4.676388,-3.986862,2.926006,8.166651,-1.752661,2.106945,-9.445393,7.078965,4.744449,-2.803092,5.826575,9.064338,-1.501535,-1.033002,2.291556,-9.522312,3.940779,4.113743,2.324854,-2.633686,-7.115857,-4.372549,-9.245313,3.469338,-2.527701,8.171638,2.415517,1.090390,-5.801357,-7.397932,-7.025897,6.721782,1.290466,-3.254165,0.695747,-8.657900,-6.580293,9.271003,-1.223132,4.706235,-2.507309,-5.007572,5.879669,-9.726903,1.213564,2.624618,1.154401,0.210744,-8.729363,8.080330,-1.079502,4.254104,-2.683833,8.975020,8.738860,8.949773,1.523950,4.680584,-1.336025,-1.046073,-0.279106,2.920077,2.617377,-8.357657,-4.028338,8.959114,8.947211,-3.687617,7.158629,-7.272183,-6.981854,2.960305,-7.843657,-3.428141,-2.979270,-6.138419,1.852828,-9.289982,4.245324,-1.645010,-2.571997,-0.202854,-4.463065,3.671119,7.591700,-2.174172,-9.371884,2.660959,-6.869151,6.269430,5.865267,1.265706,4.158624,8.949192,-3.694157,-4.911017,3.795497,-4.575628,6.396784,-2.691924,2.613907,-3.912461,-8.534117,-7.739331,-4.853666,3.850035,-0.135386,-8.656290,-1.374717,-3.995401,0.396022,7.176822,5.517683,-4.789041,7.788870,6.743821,0.808878,-2.368466,-2.343419,-2.426972,-4.884170,-2.210172,-1.052457,-6.031986,-7.430638,3.727527,-8.765851,-0.440142,-0.686345,-3.197482,0.075019,-0.992638,-4.086811,-4.169569,-4.237304,6.790926,-9.744177,5.956213,-8.448077,6.720866,-5.072915,-2.705996,7.733161,-1.998089,3.374704,-9.932319,9.761750,2.444972,4.424892,-4.976270,-1.745401,2.569844,5.352173,8.988920,-4.338052,-9.347523,2.510474,6.415341,8.898713,-4.772810,4.671143,-9.680311,4.160502,-0.225565,6.090958,-8.615397,-4.501358,5.524036,-3.699964,6.874635,1.245204,1.925950,-5.309955,-1.259373,8.574409,-6.225388,6.761489,4.827503,-3.782017,1.397698,-7.339452,3.939184,7.129515,-6.739946,9.530055,4.536367,2.008709,5.954511,8.661600,8.009993,-7.724294,1.678789,-1.077305,-1.252844,-5.759019,3.409001,-2.070977,6.537005,4.493898,4.506849,0.421708,9.538663,-4.728674,-0.711898,-3.488703,-1.627273,8.353175,-7.034148,-5.426477,-5.640907,0.176070,4.442968,-0.515362,0.080888,-4.650015,-8.389102,6.482904,-1.243604,-5.081966,-4.634856,-5.137910,0.932245,-3.184128,-2.199393,3.303729,-3.904900,-1.085738,-0.495922,-9.918388,-7.023424,-3.906904,7.848310,-8.751415,1.618405,-7.939502,-8.599675,-1.763165,2.491758,3.254385,0.333520,-1.100992,4.539438,9.125993,-1.803141,-5.963228,-6.071858,4.888520,-8.528775,6.408816,5.368972,5.966634,8.477928,1.051904,2.423709,-1.552506,9.008370,-4.294062,9.216355,-1.982216,6.329943,-6.077213,-3.273750,1.625937,1.580657,-1.507990,6.792022,-1.771031,-4.239896,9.177496,3.577123,-0.016045,-8.589241,4.023349,7.200107,6.612785,-8.830071,-6.954179,-7.931706,-1.167508,4.737634,-0.221606,-7.898750,8.440433,-4.206967,-8.954782,-4.152365,6.118445,0.190147,-7.499838,-3.274515,-6.300108,2.323406,1.574161,-0.674955,4.468381,9.308243,-2.174106,3.394740,-7.682475,-7.561787,2.998873,7.311178,-1.649156,2.563335,8.040098,-5.215576,6.634644,8.364938,3.541111,-4.007197,2.278838,-1.092909,3.260008,3.392990,-3.698170,8.035489,-1.306373,-8.164522,1.428764,0.306730,4.099206,-9.675472,9.414834,-7.545244,-3.635385,6.752674,-0.291794,1.854907,8.530664,3.158922,9.102352,3.362149,2.708084,-1.326429,-9.585479,-6.473023,2.958002,-3.540272,-6.597642,-3.968269,6.567656,-8.558785,2.712641,3.222319,-1.351498,-6.398405,5.023064,1.458526,5.476760,-6.575985,6.377575,-5.300313,9.907546,8.082391,2.833813,-7.150729,4.105053,-9.225817,5.305609,-0.731736,-8.145123,4.687598,-5.807353,-1.051323,-4.306232,9.687914,1.052568,-3.252649,-4.623457,-6.262463,7.693618,-8.860901,4.224612,-4.449670,7.773090,-9.476847,4.362758,0.204138,-0.539318,-2.939298,-6.895927,-1.003445,2.582934,6.689211,-6.319826,5.024495,-7.714620,5.195830,-0.680675,-2.350501,-5.022271,4.535181,-1.162508,7.211154,-9.400376,6.992436,-4.342134,4.308058,1.125458,7.057090,-7.466317,8.421430,0.567043,9.818303,-6.716034,4.703983,-8.751110,8.940492,5.420557,-1.843367,-3.221596,9.009459,8.585435,-6.175118,5.529685], dtype = "float64")#candidate|81|(1638,)|const|float64
call_79 = relay.TupleGetItem(func_45_call(relay.reshape(const_80.astype('int8'), [9, 1, 13]), relay.reshape(const_81.astype('float64'), [9, 14, 13]), relay.reshape(const_81.astype('uint8'), [9, 14, 13]), ), 4)
call_82 = relay.TupleGetItem(func_49_call(relay.reshape(const_80.astype('int8'), [9, 1, 13]), relay.reshape(const_81.astype('float64'), [9, 14, 13]), relay.reshape(const_81.astype('uint8'), [9, 14, 13]), ), 4)
var_83 = relay.var("var_83", dtype = "float64", shape = (6, 10, 5))#candidate|83|(6, 10, 5)|var|float64
bop_84 = relay.less_equal(uop_71.astype('bool'), relay.reshape(var_83.astype('bool'), relay.shape_of(uop_71))) # shape=(6, 10, 5)
uop_87 = relay.log10(bop_76.astype('float32')) # shape=(6, 10, 5)
uop_89 = relay.exp(uop_71.astype('float32')) # shape=(6, 10, 5)
uop_91 = relay.rsqrt(bop_76.astype('float32')) # shape=(6, 10, 5)
bop_93 = relay.greater_equal(uop_62.astype('bool'), relay.reshape(var_83.astype('bool'), relay.shape_of(uop_62))) # shape=(6, 10, 5)
output = relay.Tuple([uop_58,uop_60,call_79,const_80,const_81,bop_84,uop_87,uop_89,uop_91,bop_93,])
output2 = relay.Tuple([uop_58,uop_60,call_82,const_80,const_81,bop_84,uop_87,uop_89,uop_91,bop_93,])
func_96 = relay.Function([var_51,var_83,], output)
mod['func_96'] = func_96
mod = relay.transform.InferType()(mod)
mutated_mod['func_96'] = func_96
mutated_mod = relay.transform.InferType()(mutated_mod)
func_96_call = mutated_mod.get_global_var('func_96')
var_98 = relay.var("var_98", dtype = "float64", shape = (6, 10, 5))#candidate|98|(6, 10, 5)|var|float64
var_99 = relay.var("var_99", dtype = "float64", shape = (6, 10, 5))#candidate|99|(6, 10, 5)|var|float64
call_97 = func_96_call(var_98,var_99,)
output = call_97
func_100 = relay.Function([var_98,var_99,], output)
mutated_mod['func_100'] = func_100
mutated_mod = relay.transform.InferType()(mutated_mod)
var_102 = relay.var("var_102", dtype = "uint16", shape = ())#candidate|102|()|var|uint16
var_103 = relay.var("var_103", dtype = "uint16", shape = ())#candidate|103|()|var|uint16
bop_104 = relay.bitwise_or(var_102.astype('uint16'), var_103.astype('uint16')) # shape=()
bop_107 = relay.less_equal(bop_104.astype('bool'), var_103.astype('bool')) # shape=()
bop_110 = relay.left_shift(var_102.astype('int32'), var_103.astype('int32')) # shape=()
bop_113 = relay.not_equal(var_102.astype('bool'), bop_104.astype('bool')) # shape=()
uop_116 = relay.sigmoid(bop_104.astype('float32')) # shape=()
bop_118 = relay.mod(bop_113.astype('float32'), var_102.astype('float32')) # shape=()
uop_121 = relay.tan(uop_116.astype('float64')) # shape=()
bop_123 = relay.power(uop_121.astype('float32'), var_102.astype('float32')) # shape=()
uop_126 = relay.tan(uop_116.astype('float32')) # shape=()
var_128 = relay.var("var_128", dtype = "float32", shape = ())#candidate|128|()|var|float32
bop_129 = relay.logical_xor(uop_116.astype('uint32'), var_128.astype('uint32')) # shape=()
uop_132 = relay.sigmoid(uop_116.astype('float32')) # shape=()
output = relay.Tuple([bop_107,bop_110,bop_118,bop_123,uop_126,bop_129,uop_132,])
output2 = relay.Tuple([bop_107,bop_110,bop_118,bop_123,uop_126,bop_129,uop_132,])
func_134 = relay.Function([var_102,var_103,var_128,], output)
mod['func_134'] = func_134
mod = relay.transform.InferType()(mod)
mutated_mod['func_134'] = func_134
mutated_mod = relay.transform.InferType()(mutated_mod)
func_134_call = mutated_mod.get_global_var('func_134')
var_136 = relay.var("var_136", dtype = "uint16", shape = ())#candidate|136|()|var|uint16
var_137 = relay.var("var_137", dtype = "uint16", shape = ())#candidate|137|()|var|uint16
var_138 = relay.var("var_138", dtype = "float32", shape = ())#candidate|138|()|var|float32
call_135 = func_134_call(var_136,var_137,var_138,)
output = call_135
func_139 = relay.Function([var_136,var_137,var_138,], output)
mutated_mod['func_139'] = func_139
mutated_mod = relay.transform.InferType()(mutated_mod)
var_141 = relay.var("var_141", dtype = "int64", shape = (8, 7))#candidate|141|(8, 7)|var|int64
var_142 = relay.var("var_142", dtype = "int64", shape = (8, 7))#candidate|142|(8, 7)|var|int64
bop_143 = relay.left_shift(var_141.astype('int64'), relay.reshape(var_142.astype('int64'), relay.shape_of(var_141))) # shape=(8, 7)
uop_146 = relay.atanh(bop_143.astype('float32')) # shape=(8, 7)
uop_148 = relay.asinh(bop_143.astype('float32')) # shape=(8, 7)
uop_150 = relay.log2(var_142.astype('float64')) # shape=(8, 7)
bop_152 = relay.minimum(var_142.astype('uint64'), relay.reshape(uop_148.astype('uint64'), relay.shape_of(var_142))) # shape=(8, 7)
uop_155 = relay.tan(uop_148.astype('float32')) # shape=(8, 7)
bop_157 = relay.logical_xor(uop_155.astype('uint32'), relay.reshape(uop_146.astype('uint32'), relay.shape_of(uop_155))) # shape=(8, 7)
uop_160 = relay.log2(bop_157.astype('float32')) # shape=(8, 7)
uop_162 = relay.acos(var_142.astype('float64')) # shape=(8, 7)
uop_164 = relay.sin(uop_160.astype('float64')) # shape=(8, 7)
bop_166 = relay.power(uop_164.astype('float64'), relay.reshape(uop_148.astype('float64'), relay.shape_of(uop_164))) # shape=(8, 7)
bop_169 = relay.minimum(uop_164.astype('uint16'), relay.reshape(bop_143.astype('uint16'), relay.shape_of(uop_164))) # shape=(8, 7)
bop_172 = relay.bitwise_or(bop_169.astype('int32'), relay.reshape(uop_150.astype('int32'), relay.shape_of(bop_169))) # shape=(8, 7)
uop_175 = relay.atan(var_141.astype('float64')) # shape=(8, 7)
uop_177 = relay.sigmoid(uop_164.astype('float32')) # shape=(8, 7)
uop_179 = relay.atanh(uop_177.astype('float32')) # shape=(8, 7)
var_181 = relay.var("var_181", dtype = "float32", shape = (8, 7))#candidate|181|(8, 7)|var|float32
bop_182 = relay.maximum(uop_160.astype('int16'), relay.reshape(var_181.astype('int16'), relay.shape_of(uop_160))) # shape=(8, 7)
var_185 = relay.var("var_185", dtype = "float64", shape = (8, 7))#candidate|185|(8, 7)|var|float64
bop_186 = relay.power(uop_150.astype('float32'), relay.reshape(var_185.astype('float32'), relay.shape_of(uop_150))) # shape=(8, 7)
func_96_call = mod.get_global_var('func_96')
func_100_call = mutated_mod.get_global_var('func_100')
var_190 = relay.var("var_190", dtype = "float64", shape = (10, 30))#candidate|190|(10, 30)|var|float64
call_189 = relay.TupleGetItem(func_96_call(relay.reshape(var_190.astype('float64'), [6, 10, 5]), relay.reshape(var_190.astype('float64'), [6, 10, 5]), ), 8)
call_191 = relay.TupleGetItem(func_100_call(relay.reshape(var_190.astype('float64'), [6, 10, 5]), relay.reshape(var_190.astype('float64'), [6, 10, 5]), ), 8)
bop_192 = relay.less_equal(uop_179.astype('bool'), relay.reshape(var_141.astype('bool'), relay.shape_of(uop_179))) # shape=(8, 7)
uop_195 = relay.log2(uop_177.astype('float64')) # shape=(8, 7)
bop_197 = relay.bitwise_xor(uop_195.astype('uint64'), relay.reshape(bop_166.astype('uint64'), relay.shape_of(uop_195))) # shape=(8, 7)
bop_200 = relay.logical_xor(bop_166.astype('int16'), relay.reshape(bop_157.astype('int16'), relay.shape_of(bop_166))) # shape=(8, 7)
bop_203 = relay.mod(uop_160.astype('float64'), relay.reshape(bop_197.astype('float64'), relay.shape_of(uop_160))) # shape=(8, 7)
uop_206 = relay.cosh(uop_177.astype('float32')) # shape=(8, 7)
bop_208 = relay.floor_divide(uop_177.astype('float32'), relay.reshape(bop_186.astype('float32'), relay.shape_of(uop_177))) # shape=(8, 7)
bop_211 = relay.power(uop_179.astype('float32'), relay.reshape(bop_157.astype('float32'), relay.shape_of(uop_179))) # shape=(8, 7)
uop_214 = relay.acosh(uop_179.astype('float32')) # shape=(8, 7)
bop_216 = relay.floor_divide(uop_206.astype('float32'), relay.reshape(uop_164.astype('float32'), relay.shape_of(uop_206))) # shape=(8, 7)
bop_219 = relay.left_shift(uop_164.astype('int32'), relay.reshape(bop_200.astype('int32'), relay.shape_of(uop_164))) # shape=(8, 7)
bop_222 = relay.maximum(uop_206.astype('uint64'), relay.reshape(uop_195.astype('uint64'), relay.shape_of(uop_206))) # shape=(8, 7)
uop_225 = relay.exp(bop_192.astype('float64')) # shape=(8, 7)
uop_227 = relay.tan(uop_214.astype('float64')) # shape=(8, 7)
var_229 = relay.var("var_229", dtype = "float64", shape = (8, 7))#candidate|229|(8, 7)|var|float64
bop_230 = relay.bitwise_xor(uop_227.astype('uint8'), relay.reshape(var_229.astype('uint8'), relay.shape_of(uop_227))) # shape=(8, 7)
bop_233 = relay.bitwise_xor(bop_211.astype('int16'), relay.reshape(bop_157.astype('int16'), relay.shape_of(bop_211))) # shape=(8, 7)
bop_236 = relay.subtract(uop_227.astype('int64'), relay.reshape(bop_197.astype('int64'), relay.shape_of(uop_227))) # shape=(8, 7)
output = relay.Tuple([bop_152,uop_162,bop_172,uop_175,bop_182,call_189,var_190,bop_203,bop_208,bop_216,bop_219,bop_222,uop_225,bop_230,bop_233,bop_236,])
output2 = relay.Tuple([bop_152,uop_162,bop_172,uop_175,bop_182,call_191,var_190,bop_203,bop_208,bop_216,bop_219,bop_222,uop_225,bop_230,bop_233,bop_236,])
func_239 = relay.Function([var_141,var_142,var_181,var_185,var_190,var_229,], output)
mod['func_239'] = func_239
mod = relay.transform.InferType()(mod)
mutated_mod['func_239'] = func_239
mutated_mod = relay.transform.InferType()(mutated_mod)
func_239_call = mutated_mod.get_global_var('func_239')
var_241 = relay.var("var_241", dtype = "int64", shape = (8, 7))#candidate|241|(8, 7)|var|int64
var_242 = relay.var("var_242", dtype = "int64", shape = (8, 7))#candidate|242|(8, 7)|var|int64
var_243 = relay.var("var_243", dtype = "float32", shape = (8, 7))#candidate|243|(8, 7)|var|float32
var_244 = relay.var("var_244", dtype = "float64", shape = (8, 7))#candidate|244|(8, 7)|var|float64
var_245 = relay.var("var_245", dtype = "float64", shape = (10, 30))#candidate|245|(10, 30)|var|float64
var_246 = relay.var("var_246", dtype = "float64", shape = (8, 7))#candidate|246|(8, 7)|var|float64
call_240 = func_239_call(var_241,var_242,var_243,var_244,var_245,var_246,)
output = call_240
func_247 = relay.Function([var_241,var_242,var_243,var_244,var_245,var_246,], output)
mutated_mod['func_247'] = func_247
mutated_mod = relay.transform.InferType()(mutated_mod)
var_249 = relay.var("var_249", dtype = "float64", shape = (9, 8, 12))#candidate|249|(9, 8, 12)|var|float64
uop_250 = relay.sigmoid(var_249.astype('float64')) # shape=(9, 8, 12)
uop_252 = relay.asin(uop_250.astype('float32')) # shape=(9, 8, 12)
uop_254 = relay.log(uop_252.astype('float32')) # shape=(9, 8, 12)
const_256 = relay.const([[[6.814462,6.422613,0.186518,-8.532199,7.391265,0.811965,9.652791,0.944812,1.860867,-2.477081,6.702617,-8.855080],[-5.852236,1.305380,-7.513446,4.151263,1.644126,1.211766,0.071858,7.689951,1.429669,-8.075820,-1.142792,1.296243],[-6.443258,-9.943686,2.383100,2.847837,-8.442113,2.834949,6.970322,1.196173,5.221842,7.803660,-0.375835,7.223836],[0.378248,-3.702829,5.098507,-7.950816,-0.843610,8.263535,4.925090,8.912153,-1.079713,1.638503,9.295567,-6.475670],[0.174843,7.670259,-7.185994,4.668270,-5.321863,4.654097,6.675802,6.018694,-6.117455,0.064859,-6.497778,7.096108],[1.431722,-9.500053,2.705855,-7.772560,3.790647,-1.299139,-2.946051,3.328216,-3.428971,7.451117,-8.247372,5.898406],[3.347523,0.710227,7.994887,-3.502881,8.073390,8.848072,1.889926,6.967959,4.114970,-4.634784,-2.709560,-8.389784],[-6.338858,-3.826714,4.214021,3.986731,6.350152,-6.331110,-1.606392,8.423022,0.058434,-5.393654,-5.602986,0.661331]],[[-9.119270,-1.830716,-7.789273,7.355030,-6.514748,4.092990,8.723961,-7.390073,0.233813,0.609495,-1.104431,0.597067],[4.715901,-5.334848,-9.139823,7.893826,-3.692260,3.123078,-4.685762,6.694989,-9.237573,-1.375212,-7.553510,-5.120793],[3.454984,9.117863,1.276454,-0.981931,-1.995812,-1.336189,-1.245345,2.195146,9.862293,2.141989,4.222778,-2.617697],[-0.552415,4.248909,-3.846280,-2.867663,3.835846,7.774329,5.839825,9.829320,-9.325873,-4.424979,0.176259,4.571953],[-6.376848,8.232018,-3.171732,0.472489,-9.711076,3.639257,8.039161,0.411056,9.098286,0.177820,-9.376709,-5.763352],[-9.723392,5.426971,0.411438,5.122538,-1.551323,2.713096,-1.007503,2.643505,-9.772409,5.964441,-5.181385,-6.643692],[4.341841,-1.231302,4.584151,8.522889,9.774252,6.678281,5.237565,-3.462064,6.316022,-2.749372,5.554004,5.903506],[-8.310189,3.628610,5.942094,-7.355323,0.710889,-3.275857,-2.577023,-6.040966,-4.123752,-6.008213,-5.736425,3.450086]],[[-7.055710,-8.836259,0.935710,4.317756,-0.828755,8.357805,4.339741,8.579155,-6.942869,9.549234,6.398177,8.896241],[0.202819,9.780735,-1.447170,-3.893670,2.573277,-9.582557,-3.613034,-0.765508,-4.062368,-8.621820,-3.800538,-5.496082],[8.663555,5.420498,-2.957139,-2.454079,-3.253253,3.502619,9.866195,2.648597,-8.139503,9.251845,-9.449499,-8.814499],[2.082740,-3.162670,-7.128847,1.171458,-6.601935,-3.660121,2.800267,-5.920931,-4.704345,-4.330111,7.590386,-6.665046],[-6.525598,-6.270526,-5.332464,3.484029,8.619087,6.498097,5.499347,1.046683,5.123732,-4.080358,6.861889,-8.560979],[-7.633563,4.161761,-2.180341,-7.838123,8.896480,3.085447,6.062055,-0.850048,-8.552051,-2.509061,-8.379505,2.739431],[3.690988,-8.836382,8.216034,-8.080965,6.639232,0.490633,-9.809310,-8.786419,1.161019,1.120483,2.981420,6.502006],[8.171894,8.793574,-3.046657,9.172491,-2.986037,-7.742740,-4.306470,3.574898,-4.311541,0.612256,-1.638464,-7.967110]],[[-8.608542,-2.290091,6.322220,9.013049,7.790925,-1.689318,-8.991619,8.225151,5.157195,-2.111499,1.420269,-3.957504],[-0.481128,-2.720253,0.526250,-1.387004,-1.120900,0.154672,6.512974,-6.025638,5.544467,-2.818537,-9.024506,-7.829946],[0.323216,7.677381,3.796747,-9.032116,6.586419,-5.962728,6.339429,-8.406300,-7.274761,-9.069845,5.661187,-6.084900],[9.494413,-8.540183,4.916503,-8.570970,9.370549,7.539196,3.482463,-6.381965,-4.499805,4.163527,-2.241612,4.064105],[-4.137084,-8.547032,-6.740758,-2.098581,3.746217,3.542689,-1.231201,7.614593,4.728400,-3.763061,-9.453528,5.397095],[0.793613,-0.386215,5.651019,-7.017224,0.956678,3.330813,-1.384545,-4.857865,-6.142446,-2.022826,2.696185,-1.352401],[-2.109883,0.761748,2.583648,7.675191,4.577610,-8.646527,6.929686,-8.920286,0.542324,-1.496078,-1.838426,6.240498],[-1.133625,7.513745,5.143500,-9.495765,-2.114802,-3.364254,-5.425386,-7.314877,-7.599983,-8.795921,-1.254017,-4.633746]],[[-7.485789,9.888015,9.712769,9.565433,-1.388586,6.792499,-1.209124,7.352219,4.367788,6.738508,5.844008,-6.202465],[-2.314398,2.539795,9.518009,3.253144,-2.988741,-1.963176,2.206209,4.679866,-0.685132,-5.150774,-2.399243,2.997659],[7.965858,0.258053,1.937009,-4.666668,8.933070,-3.884641,-6.128228,-2.528033,-3.647120,-5.186755,6.328713,8.884087],[6.883300,-7.230584,4.742319,6.271644,-6.897114,2.797614,-6.644923,-9.960801,0.899329,6.924782,-6.875507,-1.463412],[-4.320587,-8.702316,-3.542010,-9.389515,6.137887,7.091669,-5.854510,-2.748978,6.377525,-6.735104,1.636011,6.767396],[1.345643,-1.400285,4.162451,-4.423980,-5.328968,5.763925,-6.359026,-0.011088,-7.403529,-3.911495,-7.925132,-3.207125],[-9.832831,-1.150557,9.365506,-6.971795,-4.353487,-2.480301,6.291590,3.356483,7.545972,-6.890092,-1.301090,-8.979759],[-9.619771,-5.664313,8.721857,4.096689,8.251843,3.903191,1.081953,-1.872189,3.390143,9.663884,4.641673,-3.108836]],[[2.164900,3.249885,2.791072,3.203041,-7.748741,-4.710957,-0.684794,-5.645549,6.222659,-6.807887,0.657738,-7.526858],[6.164399,-6.087194,6.082075,4.627883,5.503636,-7.725037,-9.158868,2.881743,2.484589,-0.490055,3.171702,-0.444540],[2.795188,9.196969,7.649107,2.125232,-4.579945,6.560075,-2.489410,-9.717998,1.558016,-0.951240,-1.812888,1.627100],[0.815899,6.330114,-5.259527,-6.821003,-3.905247,-8.664717,0.402394,-9.155598,7.548082,2.892795,1.514649,-6.690255],[8.828650,-0.058810,-0.705494,8.469787,-9.804300,-8.846583,-0.950323,-1.161308,-7.346325,-7.725237,-7.652097,6.638184],[4.444013,3.831963,3.142652,0.384281,-6.824901,-5.244878,8.384800,-8.539701,6.013960,-4.195733,3.614379,-4.199250],[-0.046391,-6.468050,-6.677102,-9.269848,-4.098760,-1.614998,6.085889,-8.055879,8.104551,-9.941829,2.202911,-0.514552],[2.108629,-7.489145,6.337009,4.233710,-3.859330,-4.402678,8.157088,-1.964033,-2.250196,6.248912,-4.661318,3.525893]],[[1.155899,0.690180,3.090080,9.499645,-1.282845,1.845397,-1.131442,8.233547,-1.260530,6.310367,1.872509,-3.915668],[-0.792171,6.435327,2.234696,0.259881,4.382245,2.105393,-0.174033,5.265781,8.704564,3.588171,9.480041,-8.162335],[-2.997878,-9.218160,4.156363,-9.849962,-2.477912,-5.305676,-9.208741,-0.399930,-0.669758,-5.998347,-5.256210,-5.843659],[7.264047,-2.017342,-0.662448,-0.299393,-6.309487,-7.014626,1.502604,-0.144771,5.555053,-5.333166,-9.469563,5.786517],[-0.841502,4.059834,7.058510,-0.984383,5.838537,-7.467533,6.410358,3.570678,9.391214,8.422840,-5.940637,-5.592447],[2.898980,5.675537,-6.320118,-1.397654,7.924071,9.653525,8.240103,5.838712,-0.544515,6.375204,-7.725654,-1.435197],[-2.857310,5.736890,8.996791,-5.155579,-4.302351,-9.495907,-9.681066,6.087500,-3.120731,8.415535,5.517493,3.436390],[-9.963231,5.341314,1.808741,-2.691303,-5.292184,-9.890313,6.755905,-0.437403,-3.949117,-2.011474,7.605325,-4.579342]],[[5.005743,-7.113828,-2.605302,-4.932153,-5.396678,-1.898438,4.304344,2.232801,-2.061617,3.744928,1.183716,6.494390],[-4.333684,-0.009635,6.985729,-1.061680,-3.794783,7.726232,-4.740931,6.342981,-3.161068,-3.533018,-8.528899,0.067222],[4.809414,7.310070,-8.189545,-2.083128,-9.432601,-5.135958,-6.533635,-0.320709,2.480503,4.269809,-9.411277,-7.399622],[-2.158349,-6.757216,6.483335,5.473645,4.968906,3.526238,9.008121,-5.973813,-1.967606,-6.914800,4.305608,-0.848876],[-1.849923,-8.081129,-2.850176,6.915215,7.123454,-3.471580,4.707290,3.212418,-5.111996,-0.477562,0.854829,6.510487],[-8.764519,-6.879070,4.393609,-5.651298,-6.863071,-1.796164,-1.702537,-6.834309,9.377608,-7.147236,-7.873298,4.468712],[-6.520124,9.576253,2.644253,6.378268,-9.202573,5.508239,-1.881277,2.344512,3.710656,-4.035398,-7.349160,7.934413],[4.954339,-3.217290,-2.060478,-2.177420,-2.761480,-3.411910,-1.166609,8.451411,6.179621,-3.913745,-7.401314,-0.767075]],[[7.095692,0.695800,9.972815,-8.376474,-0.526683,3.674476,-6.772318,2.939830,4.713358,-5.756809,-9.258983,-5.423901],[5.890592,0.694963,-5.257061,1.186319,-1.164092,3.983726,1.538302,-6.522813,7.892187,-5.437602,6.507122,-8.536169],[8.594444,0.549584,-3.879057,4.695488,-3.086020,4.923672,5.963369,1.640190,-9.736554,1.438287,-0.613986,5.700118],[3.274237,3.158166,-5.770242,1.031012,8.645101,5.045415,-7.963936,8.478662,5.476934,-5.918751,8.095660,7.364014],[-4.077127,1.602409,-4.885728,-6.014305,1.396081,2.261255,3.978073,0.214237,7.550835,-6.200061,-9.651463,-3.547659],[7.799188,-7.944799,-7.044211,-8.585231,-0.412546,8.576218,-3.547675,5.032104,-7.284336,2.946843,8.516481,-9.920332],[1.300668,0.240704,-8.962709,-3.009773,-9.758221,-1.825098,-3.206353,0.242660,-1.456015,8.663807,7.567961,-6.578086],[9.410352,2.698811,9.539526,5.729957,5.936529,-3.428926,3.770328,5.104510,5.442622,-3.607304,-7.217495,-0.940158]]], dtype = "float32")#candidate|256|(9, 8, 12)|const|float32
bop_257 = relay.greater_equal(uop_254.astype('bool'), relay.reshape(const_256.astype('bool'), relay.shape_of(uop_254))) # shape=(9, 8, 12)
output = relay.Tuple([bop_257,])
output2 = relay.Tuple([bop_257,])
func_260 = relay.Function([var_249,], output)
mod['func_260'] = func_260
mod = relay.transform.InferType()(mod)
var_261 = relay.var("var_261", dtype = "float64", shape = (9, 8, 12))#candidate|261|(9, 8, 12)|var|float64
output = func_260(var_261)
func_262 = relay.Function([var_261], output)
mutated_mod['func_262'] = func_262
mutated_mod = relay.transform.InferType()(mutated_mod)
var_264 = relay.var("var_264", dtype = "float64", shape = (6, 5))#candidate|264|(6, 5)|var|float64
uop_265 = relay.cos(var_264.astype('float64')) # shape=(6, 5)
uop_267 = relay.sigmoid(uop_265.astype('float64')) # shape=(6, 5)
var_269 = relay.var("var_269", dtype = "float64", shape = (6, 5))#candidate|269|(6, 5)|var|float64
bop_270 = relay.not_equal(uop_267.astype('bool'), relay.reshape(var_269.astype('bool'), relay.shape_of(uop_267))) # shape=(6, 5)
bop_273 = relay.bitwise_and(bop_270.astype('int32'), relay.reshape(var_264.astype('int32'), relay.shape_of(bop_270))) # shape=(6, 5)
uop_276 = relay.sinh(uop_265.astype('float32')) # shape=(6, 5)
uop_278 = relay.exp(uop_265.astype('float64')) # shape=(6, 5)
bop_280 = relay.logical_and(uop_265.astype('bool'), relay.reshape(uop_267.astype('bool'), relay.shape_of(uop_265))) # shape=(6, 5)
var_283 = relay.var("var_283", dtype = "float64", shape = (6, 5))#candidate|283|(6, 5)|var|float64
bop_284 = relay.less(uop_265.astype('bool'), relay.reshape(var_283.astype('bool'), relay.shape_of(uop_265))) # shape=(6, 5)
output = relay.Tuple([bop_273,uop_276,uop_278,bop_280,bop_284,])
output2 = relay.Tuple([bop_273,uop_276,uop_278,bop_280,bop_284,])
func_287 = relay.Function([var_264,var_269,var_283,], output)
mod['func_287'] = func_287
mod = relay.transform.InferType()(mod)
var_288 = relay.var("var_288", dtype = "float64", shape = (6, 5))#candidate|288|(6, 5)|var|float64
var_289 = relay.var("var_289", dtype = "float64", shape = (6, 5))#candidate|289|(6, 5)|var|float64
var_290 = relay.var("var_290", dtype = "float64", shape = (6, 5))#candidate|290|(6, 5)|var|float64
output = func_287(var_288,var_289,var_290,)
func_291 = relay.Function([var_288,var_289,var_290,], output)
mutated_mod['func_291'] = func_291
mutated_mod = relay.transform.InferType()(mutated_mod)
var_293 = relay.var("var_293", dtype = "float64", shape = (15,))#candidate|293|(15,)|var|float64
uop_294 = relay.sigmoid(var_293.astype('float64')) # shape=(15,)
bop_296 = relay.maximum(uop_294.astype('float32'), relay.reshape(var_293.astype('float32'), relay.shape_of(uop_294))) # shape=(15,)
var_299 = relay.var("var_299", dtype = "float64", shape = (15,))#candidate|299|(15,)|var|float64
bop_300 = relay.bitwise_xor(var_293.astype('int32'), relay.reshape(var_299.astype('int32'), relay.shape_of(var_293))) # shape=(15,)
bop_303 = relay.not_equal(uop_294.astype('bool'), relay.reshape(var_299.astype('bool'), relay.shape_of(uop_294))) # shape=(15,)
uop_306 = relay.tan(var_293.astype('float64')) # shape=(15,)
var_308 = relay.var("var_308", dtype = "int32", shape = (15,))#candidate|308|(15,)|var|int32
bop_309 = relay.logical_and(bop_300.astype('bool'), relay.reshape(var_308.astype('bool'), relay.shape_of(bop_300))) # shape=(15,)
const_312 = relay.const([-6.856932,9.798468,-9.921919,-5.832863,5.156196,4.238311,6.636696,-9.879978,-8.134300,9.624697,-3.917795,-3.030967,-4.117292,2.252820,-0.586446], dtype = "float64")#candidate|312|(15,)|const|float64
bop_313 = relay.bitwise_or(var_293.astype('int32'), relay.reshape(const_312.astype('int32'), relay.shape_of(var_293))) # shape=(15,)
bop_316 = relay.subtract(bop_296.astype('uint32'), relay.reshape(bop_300.astype('uint32'), relay.shape_of(bop_296))) # shape=(15,)
var_319 = relay.var("var_319", dtype = "int32", shape = (15,))#candidate|319|(15,)|var|int32
bop_320 = relay.bitwise_and(bop_300.astype('uint8'), relay.reshape(var_319.astype('uint8'), relay.shape_of(bop_300))) # shape=(15,)
output = relay.Tuple([bop_303,uop_306,bop_309,bop_313,bop_316,bop_320,])
output2 = relay.Tuple([bop_303,uop_306,bop_309,bop_313,bop_316,bop_320,])
func_323 = relay.Function([var_293,var_299,var_308,var_319,], output)
mod['func_323'] = func_323
mod = relay.transform.InferType()(mod)
mutated_mod['func_323'] = func_323
mutated_mod = relay.transform.InferType()(mutated_mod)
func_323_call = mutated_mod.get_global_var('func_323')
var_325 = relay.var("var_325", dtype = "float64", shape = (15,))#candidate|325|(15,)|var|float64
var_326 = relay.var("var_326", dtype = "float64", shape = (15,))#candidate|326|(15,)|var|float64
var_327 = relay.var("var_327", dtype = "int32", shape = (15,))#candidate|327|(15,)|var|int32
var_328 = relay.var("var_328", dtype = "int32", shape = (15,))#candidate|328|(15,)|var|int32
call_324 = func_323_call(var_325,var_326,var_327,var_328,)
output = call_324
func_329 = relay.Function([var_325,var_326,var_327,var_328,], output)
mutated_mod['func_329'] = func_329
mutated_mod = relay.transform.InferType()(mutated_mod)
var_331 = relay.var("var_331", dtype = "float64", shape = (1,))#candidate|331|(1,)|var|float64
uop_332 = relay.asinh(var_331.astype('float64')) # shape=(1,)
bop_334 = relay.add(var_331.astype('uint32'), relay.reshape(uop_332.astype('uint32'), relay.shape_of(var_331))) # shape=(1,)
output = bop_334
output2 = bop_334
F = relay.Function([var_331,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_331,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
	relay.transform.DefuseOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_331= np.array([1.673442], dtype='float64')
module1.set_input('var_331', input_331)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_331, )
res3 = intrp3.evaluate()(input_331, )
res4 = intrp4.evaluate()(input_331, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input('var_331', input_331)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_331, )
res7 = intrp7.evaluate()(input_331, )
res8 = intrp8.evaluate()(input_331, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input('var_331', input_331)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_331, )
res11 = intrp11.evaluate()(input_331, )
res12 = intrp12.evaluate()(input_331, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input('var_331', input_331)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_331, )
res15 = intrp15.evaluate()(input_331, )
res16 = intrp16.evaluate()(input_331, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input('var_331', input_331)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_331, )
res19 = intrp19.evaluate()(input_331, )
res20 = intrp20.evaluate()(input_331, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input('var_331', input_331)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_331, )
res23 = intrp23.evaluate()(input_331, )
res24 = intrp24.evaluate()(input_331, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''9: TVMFuncCall
8: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::transform::Pass, tvm::IRModule)>::AssignTypedLambda<tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}>(tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
7: tvm::transform::Pass::operator()(tvm::IRModule) const
6: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::LazyGradientInit(tvm::RelayExpr const&, tvm::IRModule)
0: tvm::relay::CheckFeature(tvm::RelayExpr const&, tvm::relay::FeatureSet const&)

'''