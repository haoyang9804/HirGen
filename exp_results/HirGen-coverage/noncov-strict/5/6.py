import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "bool", shape = ())#candidate|0|()|var|bool
const_1 = relay.const([True,False,False,True,False,False,True,True,True,False,False,False,True,True,True], dtype = "bool")#candidate|1|(15,)|const|bool
bop_2 = relay.logical_and(var_0.astype('bool'), const_1.astype('bool')) # shape=(15,)
bop_5 = relay.equal(var_0.astype('bool'), bop_2.astype('bool')) # shape=(15,)
uop_8 = relay.cosh(bop_5.astype('float32')) # shape=(15,)
bop_10 = relay.subtract(uop_8.astype('float64'), relay.reshape(const_1.astype('float64'), relay.shape_of(uop_8))) # shape=(15,)
bop_13 = relay.bitwise_and(const_1.astype('uint16'), relay.reshape(uop_8.astype('uint16'), relay.shape_of(const_1))) # shape=(15,)
bop_16 = relay.less_equal(bop_5.astype('bool'), var_0.astype('bool')) # shape=(15,)
bop_19 = relay.floor_divide(bop_2.astype('float32'), relay.reshape(uop_8.astype('float32'), relay.shape_of(bop_2))) # shape=(15,)
uop_22 = relay.asin(uop_8.astype('float32')) # shape=(15,)
uop_24 = relay.sigmoid(uop_22.astype('float32')) # shape=(15,)
uop_26 = relay.acos(bop_19.astype('float32')) # shape=(15,)
bop_28 = relay.bitwise_or(uop_24.astype('uint8'), relay.reshape(bop_10.astype('uint8'), relay.shape_of(uop_24))) # shape=(15,)
var_31 = relay.var("var_31", dtype = "float32", shape = (15,))#candidate|31|(15,)|var|float32
bop_32 = relay.minimum(uop_24.astype('float32'), relay.reshape(var_31.astype('float32'), relay.shape_of(uop_24))) # shape=(15,)
output = relay.Tuple([bop_13,bop_16,uop_26,bop_28,bop_32,])
output2 = relay.Tuple([bop_13,bop_16,uop_26,bop_28,bop_32,])
func_35 = relay.Function([var_0,var_31,], output)
mod['func_35'] = func_35
mod = relay.transform.InferType()(mod)
mutated_mod['func_35'] = func_35
mutated_mod = relay.transform.InferType()(mutated_mod)
func_35_call = mutated_mod.get_global_var('func_35')
var_37 = relay.var("var_37", dtype = "bool", shape = ())#candidate|37|()|var|bool
var_38 = relay.var("var_38", dtype = "float32", shape = (15,))#candidate|38|(15,)|var|float32
call_36 = func_35_call(var_37,var_38,)
output = call_36
func_39 = relay.Function([var_37,var_38,], output)
mutated_mod['func_39'] = func_39
mutated_mod = relay.transform.InferType()(mutated_mod)
const_41 = relay.const([[4,5,-10,8,10,1,4,-8,9,4,5,5],[4,-1,-3,-6,-9,-9,-4,8,9,-7,-5,7],[-1,9,5,-3,10,-9,5,9,6,4,-5,5],[2,-8,-7,1,3,1,-6,6,8,-10,-9,-8],[-7,5,7,-7,-2,-5,9,6,-10,10,1,1],[-1,4,-9,5,7,9,3,-2,-2,-3,-7,-3],[-6,-10,-2,8,-9,3,5,4,-1,-3,-9,-9],[-3,2,-1,-4,1,-4,4,-6,4,-3,-1,-8],[-9,7,7,-1,-8,8,-1,6,8,-4,-4,7],[10,-7,-6,3,8,-5,6,3,10,-5,8,10],[-3,-8,7,-7,7,7,-8,9,2,9,10,4],[-5,-9,-10,9,-5,10,-4,10,10,-5,10,4]], dtype = "int16")#candidate|41|(12, 12)|const|int16
const_42 = relay.const([[-2,6,3,-1,5,-10,-3,-1,3,6,-3,10],[2,-10,-3,-10,-3,10,10,-7,-7,9,3,10],[4,-7,2,10,5,8,-2,3,-5,-1,6,-1],[8,-4,-2,7,10,-4,1,-8,-3,-4,-7,10],[2,8,-1,5,-10,8,-3,7,-9,10,4,-6],[-6,-4,9,-6,7,-1,2,-8,4,4,3,1],[-4,-1,10,-7,-10,-1,5,2,-1,10,10,8],[6,-1,5,10,-4,-10,-10,1,10,-9,-9,-6],[-5,-8,4,6,9,-6,1,6,9,-10,-6,9],[4,8,-10,-6,1,-7,-9,5,-2,4,9,9],[-7,8,-1,-7,6,2,2,-10,-1,9,2,10],[7,7,4,-5,-8,-4,2,6,9,-4,6,-7]], dtype = "int16")#candidate|42|(12, 12)|const|int16
bop_43 = relay.bitwise_xor(const_41.astype('int16'), relay.reshape(const_42.astype('int16'), relay.shape_of(const_41))) # shape=(12, 12)
var_46 = relay.var("var_46", dtype = "int16", shape = (12, 12))#candidate|46|(12, 12)|var|int16
bop_47 = relay.logical_and(const_41.astype('bool'), relay.reshape(var_46.astype('bool'), relay.shape_of(const_41))) # shape=(12, 12)
uop_50 = relay.acosh(const_42.astype('float32')) # shape=(12, 12)
bop_52 = relay.logical_or(uop_50.astype('bool'), relay.reshape(var_46.astype('bool'), relay.shape_of(uop_50))) # shape=(12, 12)
func_35_call = mod.get_global_var('func_35')
func_39_call = mutated_mod.get_global_var('func_39')
const_56 = relay.const(False, dtype = "bool")#candidate|56|()|const|bool
var_57 = relay.var("var_57", dtype = "float32", shape = (5, 3))#candidate|57|(5, 3)|var|float32
call_55 = relay.TupleGetItem(func_35_call(relay.reshape(const_56.astype('bool'), []), relay.reshape(var_57.astype('float32'), [15,]), ), 2)
call_58 = relay.TupleGetItem(func_39_call(relay.reshape(const_56.astype('bool'), []), relay.reshape(var_57.astype('float32'), [15,]), ), 2)
uop_59 = relay.cosh(bop_47.astype('float64')) # shape=(12, 12)
bop_61 = relay.left_shift(bop_47.astype('uint64'), relay.reshape(const_41.astype('uint64'), relay.shape_of(bop_47))) # shape=(12, 12)
bop_64 = relay.floor_mod(uop_59.astype('float64'), relay.reshape(const_42.astype('float64'), relay.shape_of(uop_59))) # shape=(12, 12)
uop_67 = relay.exp(uop_50.astype('float64')) # shape=(12, 12)
uop_69 = relay.log2(uop_67.astype('float32')) # shape=(12, 12)
bop_71 = relay.power(uop_69.astype('float64'), relay.reshape(bop_52.astype('float64'), relay.shape_of(uop_69))) # shape=(12, 12)
uop_74 = relay.erf(uop_67.astype('float32')) # shape=(12, 12)
uop_76 = relay.tan(uop_69.astype('float32')) # shape=(12, 12)
var_78 = relay.var("var_78", dtype = "float32", shape = (12, 12))#candidate|78|(12, 12)|var|float32
bop_79 = relay.logical_xor(uop_76.astype('uint32'), relay.reshape(var_78.astype('uint32'), relay.shape_of(uop_76))) # shape=(12, 12)
uop_82 = relay.sigmoid(bop_79.astype('float64')) # shape=(12, 12)
var_84 = relay.var("var_84", dtype = "float32", shape = (12, 12))#candidate|84|(12, 12)|var|float32
bop_85 = relay.floor_mod(uop_76.astype('float64'), relay.reshape(var_84.astype('float64'), relay.shape_of(uop_76))) # shape=(12, 12)
uop_88 = relay.cos(uop_82.astype('float32')) # shape=(12, 12)
uop_90 = relay.acosh(uop_88.astype('float64')) # shape=(12, 12)
var_92 = relay.var("var_92", dtype = "float32", shape = (12, 12))#candidate|92|(12, 12)|var|float32
bop_93 = relay.not_equal(uop_88.astype('bool'), relay.reshape(var_92.astype('bool'), relay.shape_of(uop_88))) # shape=(12, 12)
uop_96 = relay.log(uop_88.astype('float32')) # shape=(12, 12)
bop_98 = relay.floor_divide(uop_96.astype('float32'), relay.reshape(bop_61.astype('float32'), relay.shape_of(uop_96))) # shape=(12, 12)
func_35_call = mod.get_global_var('func_35')
func_39_call = mutated_mod.get_global_var('func_39')
call_101 = relay.TupleGetItem(func_35_call(relay.reshape(const_56.astype('bool'), []), relay.reshape(var_57.astype('float32'), [15,]), ), 4)
call_102 = relay.TupleGetItem(func_39_call(relay.reshape(const_56.astype('bool'), []), relay.reshape(var_57.astype('float32'), [15,]), ), 4)
bop_103 = relay.greater_equal(uop_90.astype('bool'), relay.reshape(uop_74.astype('bool'), relay.shape_of(uop_90))) # shape=(12, 12)
bop_106 = relay.not_equal(uop_90.astype('bool'), relay.reshape(uop_76.astype('bool'), relay.shape_of(uop_90))) # shape=(12, 12)
bop_109 = relay.maximum(uop_90.astype('uint16'), relay.reshape(bop_52.astype('uint16'), relay.shape_of(uop_90))) # shape=(12, 12)
uop_112 = relay.asin(uop_88.astype('float64')) # shape=(12, 12)
bop_114 = relay.equal(bop_109.astype('bool'), relay.reshape(var_78.astype('bool'), relay.shape_of(bop_109))) # shape=(12, 12)
uop_117 = relay.exp(bop_93.astype('float32')) # shape=(12, 12)
uop_119 = relay.cosh(uop_117.astype('float32')) # shape=(12, 12)
uop_121 = relay.rsqrt(bop_93.astype('float32')) # shape=(12, 12)
uop_123 = relay.acosh(bop_109.astype('float32')) # shape=(12, 12)
uop_125 = relay.atan(bop_103.astype('float64')) # shape=(12, 12)
uop_127 = relay.log(uop_123.astype('float32')) # shape=(12, 12)
bop_129 = relay.less(uop_96.astype('bool'), relay.reshape(uop_90.astype('bool'), relay.shape_of(uop_96))) # shape=(12, 12)
uop_132 = relay.cosh(uop_88.astype('float64')) # shape=(12, 12)
bop_134 = relay.equal(uop_123.astype('bool'), relay.reshape(bop_61.astype('bool'), relay.shape_of(uop_123))) # shape=(12, 12)
var_137 = relay.var("var_137", dtype = "float32", shape = (12, 12))#candidate|137|(12, 12)|var|float32
bop_138 = relay.left_shift(uop_88.astype('int32'), relay.reshape(var_137.astype('int32'), relay.shape_of(uop_88))) # shape=(12, 12)
var_141 = relay.var("var_141", dtype = "float32", shape = (12, 12))#candidate|141|(12, 12)|var|float32
bop_142 = relay.right_shift(uop_117.astype('int8'), relay.reshape(var_141.astype('int8'), relay.shape_of(uop_117))) # shape=(12, 12)
uop_145 = relay.log10(uop_127.astype('float64')) # shape=(12, 12)
var_147 = relay.var("var_147", dtype = "float64", shape = (12, 12))#candidate|147|(12, 12)|var|float64
bop_148 = relay.mod(uop_125.astype('float64'), relay.reshape(var_147.astype('float64'), relay.shape_of(uop_125))) # shape=(12, 12)
bop_151 = relay.maximum(uop_121.astype('uint8'), relay.reshape(const_41.astype('uint8'), relay.shape_of(uop_121))) # shape=(12, 12)
uop_154 = relay.asin(uop_127.astype('float32')) # shape=(12, 12)
uop_156 = relay.atan(uop_154.astype('float64')) # shape=(12, 12)
uop_158 = relay.cos(uop_154.astype('float32')) # shape=(12, 12)
bop_160 = relay.mod(uop_154.astype('float64'), relay.reshape(uop_74.astype('float64'), relay.shape_of(uop_154))) # shape=(12, 12)
var_163 = relay.var("var_163", dtype = "float64", shape = (12, 12))#candidate|163|(12, 12)|var|float64
bop_164 = relay.bitwise_or(uop_156.astype('int32'), relay.reshape(var_163.astype('int32'), relay.shape_of(uop_156))) # shape=(12, 12)
bop_167 = relay.mod(uop_158.astype('float64'), relay.reshape(uop_69.astype('float64'), relay.shape_of(uop_158))) # shape=(12, 12)
bop_170 = relay.multiply(uop_154.astype('uint64'), relay.reshape(uop_82.astype('uint64'), relay.shape_of(uop_154))) # shape=(12, 12)
bop_173 = relay.bitwise_or(uop_158.astype('uint64'), relay.reshape(uop_96.astype('uint64'), relay.shape_of(uop_158))) # shape=(12, 12)
uop_176 = relay.cos(uop_127.astype('float32')) # shape=(12, 12)
uop_178 = relay.asin(bop_164.astype('float64')) # shape=(12, 12)
bop_180 = relay.floor_divide(bop_93.astype('float64'), relay.reshape(bop_64.astype('float64'), relay.shape_of(bop_93))) # shape=(12, 12)
bop_183 = relay.mod(uop_178.astype('float32'), relay.reshape(bop_129.astype('float32'), relay.shape_of(uop_178))) # shape=(12, 12)
uop_186 = relay.cos(uop_158.astype('float64')) # shape=(12, 12)
func_35_call = mod.get_global_var('func_35')
func_39_call = mutated_mod.get_global_var('func_39')
call_188 = relay.TupleGetItem(func_35_call(relay.reshape(const_56.astype('bool'), []), relay.reshape(var_57.astype('float32'), [15,]), ), 1)
call_189 = relay.TupleGetItem(func_39_call(relay.reshape(const_56.astype('bool'), []), relay.reshape(var_57.astype('float32'), [15,]), ), 1)
uop_190 = relay.log(uop_178.astype('float64')) # shape=(12, 12)
bop_192 = relay.add(uop_190.astype('uint64'), relay.reshape(var_163.astype('uint64'), relay.shape_of(uop_190))) # shape=(12, 12)
uop_195 = relay.sinh(bop_183.astype('float64')) # shape=(12, 12)
uop_197 = relay.exp(uop_154.astype('float64')) # shape=(12, 12)
bop_199 = relay.right_shift(uop_178.astype('int16'), relay.reshape(bop_167.astype('int16'), relay.shape_of(uop_178))) # shape=(12, 12)
func_35_call = mod.get_global_var('func_35')
func_39_call = mutated_mod.get_global_var('func_39')
call_202 = relay.TupleGetItem(func_35_call(relay.reshape(const_56.astype('bool'), []), relay.reshape(call_188.astype('float32'), [15,]), ), 1)
call_203 = relay.TupleGetItem(func_39_call(relay.reshape(const_56.astype('bool'), []), relay.reshape(call_188.astype('float32'), [15,]), ), 1)
bop_204 = relay.bitwise_xor(uop_195.astype('uint32'), relay.reshape(bop_98.astype('uint32'), relay.shape_of(uop_195))) # shape=(12, 12)
bop_207 = relay.subtract(uop_67.astype('int32'), relay.reshape(var_84.astype('int32'), relay.shape_of(uop_67))) # shape=(12, 12)
bop_210 = relay.power(uop_195.astype('float64'), relay.reshape(bop_142.astype('float64'), relay.shape_of(uop_195))) # shape=(12, 12)
bop_213 = relay.divide(bop_173.astype('float32'), relay.reshape(bop_207.astype('float32'), relay.shape_of(bop_173))) # shape=(12, 12)
uop_216 = relay.atanh(bop_213.astype('float64')) # shape=(12, 12)
uop_218 = relay.asin(bop_192.astype('float32')) # shape=(12, 12)
var_220 = relay.var("var_220", dtype = "float32", shape = (12, 12))#candidate|220|(12, 12)|var|float32
bop_221 = relay.maximum(uop_218.astype('uint64'), relay.reshape(var_220.astype('uint64'), relay.shape_of(uop_218))) # shape=(12, 12)
uop_224 = relay.cos(bop_221.astype('float64')) # shape=(12, 12)
var_226 = relay.var("var_226", dtype = "int16", shape = (12, 12))#candidate|226|(12, 12)|var|int16
bop_227 = relay.less_equal(bop_199.astype('bool'), relay.reshape(var_226.astype('bool'), relay.shape_of(bop_199))) # shape=(12, 12)
output = relay.Tuple([bop_43,call_55,const_56,var_57,bop_71,bop_85,call_101,bop_106,uop_112,bop_114,uop_119,uop_132,bop_134,bop_138,uop_145,bop_148,bop_151,bop_160,bop_170,uop_176,bop_180,uop_186,call_188,uop_197,call_202,bop_204,bop_210,uop_216,uop_224,bop_227,])
output2 = relay.Tuple([bop_43,call_58,const_56,var_57,bop_71,bop_85,call_102,bop_106,uop_112,bop_114,uop_119,uop_132,bop_134,bop_138,uop_145,bop_148,bop_151,bop_160,bop_170,uop_176,bop_180,uop_186,call_189,uop_197,call_203,bop_204,bop_210,uop_216,uop_224,bop_227,])
func_230 = relay.Function([var_46,var_57,var_78,var_84,var_92,var_137,var_141,var_147,var_163,var_220,var_226,], output)
mod['func_230'] = func_230
mod = relay.transform.InferType()(mod)
var_231 = relay.var("var_231", dtype = "int16", shape = (12, 12))#candidate|231|(12, 12)|var|int16
var_232 = relay.var("var_232", dtype = "float32", shape = (5, 3))#candidate|232|(5, 3)|var|float32
var_233 = relay.var("var_233", dtype = "float32", shape = (12, 12))#candidate|233|(12, 12)|var|float32
var_234 = relay.var("var_234", dtype = "float32", shape = (12, 12))#candidate|234|(12, 12)|var|float32
var_235 = relay.var("var_235", dtype = "float32", shape = (12, 12))#candidate|235|(12, 12)|var|float32
var_236 = relay.var("var_236", dtype = "float32", shape = (12, 12))#candidate|236|(12, 12)|var|float32
var_237 = relay.var("var_237", dtype = "float32", shape = (12, 12))#candidate|237|(12, 12)|var|float32
var_238 = relay.var("var_238", dtype = "float64", shape = (12, 12))#candidate|238|(12, 12)|var|float64
var_239 = relay.var("var_239", dtype = "float64", shape = (12, 12))#candidate|239|(12, 12)|var|float64
var_240 = relay.var("var_240", dtype = "float32", shape = (12, 12))#candidate|240|(12, 12)|var|float32
var_241 = relay.var("var_241", dtype = "int16", shape = (12, 12))#candidate|241|(12, 12)|var|int16
output = func_230(var_231,var_232,var_233,var_234,var_235,var_236,var_237,var_238,var_239,var_240,var_241,)
func_242 = relay.Function([var_231,var_232,var_233,var_234,var_235,var_236,var_237,var_238,var_239,var_240,var_241,], output)
mutated_mod['func_242'] = func_242
mutated_mod = relay.transform.InferType()(mutated_mod)
var_244 = relay.var("var_244", dtype = "float32", shape = (2, 3, 6))#candidate|244|(2, 3, 6)|var|float32
uop_245 = relay.acosh(var_244.astype('float32')) # shape=(2, 3, 6)
bop_247 = relay.add(uop_245.astype('float64'), relay.reshape(var_244.astype('float64'), relay.shape_of(uop_245))) # shape=(2, 3, 6)
uop_250 = relay.erf(var_244.astype('float32')) # shape=(2, 3, 6)
uop_252 = relay.sqrt(uop_250.astype('float64')) # shape=(2, 3, 6)
bop_254 = relay.logical_xor(var_244.astype('int8'), relay.reshape(uop_252.astype('int8'), relay.shape_of(var_244))) # shape=(2, 3, 6)
bop_257 = relay.logical_and(var_244.astype('bool'), relay.reshape(bop_247.astype('bool'), relay.shape_of(var_244))) # shape=(2, 3, 6)
bop_260 = relay.less_equal(bop_254.astype('bool'), relay.reshape(uop_252.astype('bool'), relay.shape_of(bop_254))) # shape=(2, 3, 6)
bop_263 = relay.power(bop_254.astype('float32'), relay.reshape(bop_260.astype('float32'), relay.shape_of(bop_254))) # shape=(2, 3, 6)
func_35_call = mod.get_global_var('func_35')
func_39_call = mutated_mod.get_global_var('func_39')
const_267 = relay.const(True, dtype = "bool")#candidate|267|()|const|bool
var_268 = relay.var("var_268", dtype = "float32", shape = (5, 3))#candidate|268|(5, 3)|var|float32
call_266 = relay.TupleGetItem(func_35_call(relay.reshape(const_267.astype('bool'), []), relay.reshape(var_268.astype('float32'), [15,]), ), 2)
call_269 = relay.TupleGetItem(func_39_call(relay.reshape(const_267.astype('bool'), []), relay.reshape(var_268.astype('float32'), [15,]), ), 2)
bop_270 = relay.add(uop_252.astype('int16'), relay.reshape(bop_254.astype('int16'), relay.shape_of(uop_252))) # shape=(2, 3, 6)
bop_273 = relay.multiply(bop_247.astype('uint64'), relay.reshape(uop_245.astype('uint64'), relay.shape_of(bop_247))) # shape=(2, 3, 6)
func_35_call = mod.get_global_var('func_35')
func_39_call = mutated_mod.get_global_var('func_39')
call_276 = relay.TupleGetItem(func_35_call(relay.reshape(const_267.astype('bool'), []), relay.reshape(var_268.astype('float32'), [15,]), ), 1)
call_277 = relay.TupleGetItem(func_39_call(relay.reshape(const_267.astype('bool'), []), relay.reshape(var_268.astype('float32'), [15,]), ), 1)
uop_278 = relay.atan(uop_245.astype('float64')) # shape=(2, 3, 6)
uop_280 = relay.log(bop_247.astype('float64')) # shape=(2, 3, 6)
uop_282 = relay.asinh(bop_273.astype('float64')) # shape=(2, 3, 6)
bop_284 = relay.greater(bop_254.astype('bool'), const_267.astype('bool')) # shape=(2, 3, 6)
bop_287 = relay.multiply(bop_263.astype('uint32'), relay.reshape(bop_284.astype('uint32'), relay.shape_of(bop_263))) # shape=(2, 3, 6)
var_290 = relay.var("var_290", dtype = "float32", shape = (2, 3, 6))#candidate|290|(2, 3, 6)|var|float32
bop_291 = relay.bitwise_and(uop_250.astype('uint16'), relay.reshape(var_290.astype('uint16'), relay.shape_of(uop_250))) # shape=(2, 3, 6)
uop_294 = relay.cosh(uop_245.astype('float32')) # shape=(2, 3, 6)
uop_296 = relay.atanh(uop_282.astype('float64')) # shape=(2, 3, 6)
var_298 = relay.var("var_298", dtype = "float64", shape = (2, 3, 6))#candidate|298|(2, 3, 6)|var|float64
bop_299 = relay.maximum(uop_296.astype('float32'), relay.reshape(var_298.astype('float32'), relay.shape_of(uop_296))) # shape=(2, 3, 6)
var_302 = relay.var("var_302", dtype = "float32", shape = (2, 3, 6))#candidate|302|(2, 3, 6)|var|float32
bop_303 = relay.mod(bop_299.astype('float32'), relay.reshape(var_302.astype('float32'), relay.shape_of(bop_299))) # shape=(2, 3, 6)
uop_306 = relay.log2(uop_296.astype('float64')) # shape=(2, 3, 6)
var_308 = relay.var("var_308", dtype = "float64", shape = (2, 3, 6))#candidate|308|(2, 3, 6)|var|float64
bop_309 = relay.greater(uop_306.astype('bool'), relay.reshape(var_308.astype('bool'), relay.shape_of(uop_306))) # shape=(2, 3, 6)
output = relay.Tuple([bop_257,call_266,var_268,bop_270,call_276,uop_278,uop_280,bop_287,bop_291,uop_294,bop_303,bop_309,])
output2 = relay.Tuple([bop_257,call_269,var_268,bop_270,call_277,uop_278,uop_280,bop_287,bop_291,uop_294,bop_303,bop_309,])
F = relay.Function([var_244,var_268,var_290,var_298,var_302,var_308,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_244,var_268,var_290,var_298,var_302,var_308,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_244= np.array([[[8.768749,5.347831,2.934354,-4.542881,7.018098,7.705300],[0.296342,6.561622,-8.333326,-8.435823,-6.306376,-9.263273],[0.748760,-4.927548,8.595027,-3.087847,3.181165,-8.556413]],[[4.296921,4.761413,0.553241,3.572355,5.600501,-0.601762],[8.618179,1.542802,-4.397826,5.783646,-1.171707,1.172754],[-8.383321,-1.101019,0.741853,-6.366638,0.335330,9.543026]]], dtype='float32')
module1.set_input('var_244', input_244)
input_268= np.array([[-0.187215,7.642892,4.759454],[7.926568,-9.072913,-4.865960],[-9.406760,1.579776,4.020616],[-8.280537,-3.912102,9.698769],[3.741309,9.492497,-5.271184]], dtype='float32')
module1.set_input('var_268', input_268)
input_290= np.array([[[-0.150258,8.117770,-4.175462,5.360986,4.533484,-6.254683],[-4.987927,8.612221,1.687076,-3.068696,-1.213441,7.589375],[-8.737328,-4.149417,0.847904,-2.451587,3.256005,-9.843294]],[[1.973272,-7.711146,5.175134,-4.547674,8.905635,0.113563],[6.859598,6.653640,3.587696,6.414153,9.999174,0.283106],[-1.496586,-6.785375,8.975866,2.673260,-4.189138,3.333702]]], dtype='float32')
module1.set_input('var_290', input_290)
input_298= np.array([[[4.970095,3.917747,-3.062849,8.259080,-6.253918,1.835592],[8.837456,8.845898,-6.172600,-2.111246,2.729904,5.088378],[7.092205,4.489781,-2.523052,6.759873,-8.564572,-3.259034]],[[-1.331116,-0.267060,-1.336733,-2.893348,7.045908,3.465568],[-5.880778,-6.342471,-9.457646,-0.977909,5.446730,-5.545864],[-4.535135,6.733473,-7.535106,0.168301,7.148874,-8.877153]]], dtype='float64')
module1.set_input('var_298', input_298)
input_302= np.array([[[-3.309806,-5.139194,-5.413427,6.302014,3.864758,-0.555358],[1.616920,4.091261,-4.100384,-6.705543,2.399902,-2.297358],[-0.682112,-9.086955,2.119764,7.454874,7.361875,4.077359]],[[5.965395,-6.521556,9.923580,7.924811,9.746702,9.408534],[-3.384540,5.857024,6.754838,8.066671,1.162472,0.283002],[-9.706625,-9.865990,-2.277051,-5.976416,6.766715,-6.085734]]], dtype='float32')
module1.set_input('var_302', input_302)
input_308= np.array([[[6.288907,7.405239,-3.115732,7.391378,4.095527,2.035247],[-3.707454,-5.468954,-7.445075,-5.952004,-8.519891,0.086768],[9.983402,8.022307,-8.842018,6.761869,5.833529,4.603808]],[[6.560218,-2.969347,4.238843,2.785326,-5.073117,0.215886],[2.724838,-6.526747,3.348507,4.797554,6.608018,6.073679],[-7.462268,4.368484,4.174985,-9.188246,7.578587,7.339501]]], dtype='float64')
module1.set_input('var_308', input_308)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_244, input_268, input_290, input_298, input_302, input_308, )
res3 = intrp3.evaluate()(input_244, input_268, input_290, input_298, input_302, input_308, )
res4 = intrp4.evaluate()(input_244, input_268, input_290, input_298, input_302, input_308, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
module5.set_input('var_244', input_244)
module5.set_input('var_268', input_268)
module5.set_input('var_290', input_290)
module5.set_input('var_298', input_298)
module5.set_input('var_302', input_302)
module5.set_input('var_308', input_308)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_244, input_268, input_290, input_298, input_302, input_308, )
res7 = intrp7.evaluate()(input_244, input_268, input_290, input_298, input_302, input_308, )
res8 = intrp8.evaluate()(input_244, input_268, input_290, input_298, input_302, input_308, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
module9.set_input('var_244', input_244)
module9.set_input('var_268', input_268)
module9.set_input('var_290', input_290)
module9.set_input('var_298', input_298)
module9.set_input('var_302', input_302)
module9.set_input('var_308', input_308)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_244, input_268, input_290, input_298, input_302, input_308, )
res11 = intrp11.evaluate()(input_244, input_268, input_290, input_298, input_302, input_308, )
res12 = intrp12.evaluate()(input_244, input_268, input_290, input_298, input_302, input_308, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
module13.set_input('var_244', input_244)
module13.set_input('var_268', input_268)
module13.set_input('var_290', input_290)
module13.set_input('var_298', input_298)
module13.set_input('var_302', input_302)
module13.set_input('var_308', input_308)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_244, input_268, input_290, input_298, input_302, input_308, )
res15 = intrp15.evaluate()(input_244, input_268, input_290, input_298, input_302, input_308, )
res16 = intrp16.evaluate()(input_244, input_268, input_290, input_298, input_302, input_308, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
module17.set_input('var_244', input_244)
module17.set_input('var_268', input_268)
module17.set_input('var_290', input_290)
module17.set_input('var_298', input_298)
module17.set_input('var_302', input_302)
module17.set_input('var_308', input_308)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_244, input_268, input_290, input_298, input_302, input_308, )
res19 = intrp19.evaluate()(input_244, input_268, input_290, input_298, input_302, input_308, )
res20 = intrp20.evaluate()(input_244, input_268, input_290, input_298, input_302, input_308, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
module21.set_input('var_244', input_244)
module21.set_input('var_268', input_268)
module21.set_input('var_290', input_290)
module21.set_input('var_298', input_298)
module21.set_input('var_302', input_302)
module21.set_input('var_308', input_308)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_244, input_268, input_290, input_298, input_302, input_308, )
res23 = intrp23.evaluate()(input_244, input_268, input_290, input_298, input_302, input_308, )
res24 = intrp24.evaluate()(input_244, input_268, input_290, input_298, input_302, input_308, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()

'''57: TVMFuncCall
56: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
55: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
54: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
53: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
52: tvm::transform::Pass::operator()(tvm::IRModule) const
51: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
50: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
49: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
48: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
47: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
46: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
45: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
44: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
43: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
42: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
41: _ZN3tvm5relay16MixedModeMutato
40: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
39: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
38: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
37: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
36: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
34: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
32: _ZN3tvm5relay16MixedModeMutato
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
27: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
26: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
25: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
24: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
23: tvm::transform::Pass::operator()(tvm::IRModule) const
22: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
21: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
16: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
15: tvm::relay::TypeInferencer::Infer(tvm::GlobalVar, tvm::relay::Function)
14: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
13: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
12: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
11: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
10: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
9: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::FunctionNode const*)
8: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
7: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
6: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
5: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
4: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
3: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::CallNode const*)
2: tvm::relay::TypeInferencer::GeneralCall(tvm::relay::CallNode const*, tvm::runtime::Array<tvm::Type, void>)
1: _ZN3tvm17DiagnosticContext9EmitFatalERKNS_1
0: tvm::DiagnosticContext::Render()

'''