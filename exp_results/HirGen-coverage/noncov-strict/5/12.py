import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (13, 12, 12))#candidate|0|(13, 12, 12)|var|float64
uop_1 = relay.sin(var_0.astype('float64')) # shape=(13, 12, 12)
uop_3 = relay.log10(uop_1.astype('float64')) # shape=(13, 12, 12)
var_5 = relay.var("var_5", dtype = "float64", shape = (13, 12, 12))#candidate|5|(13, 12, 12)|var|float64
bop_6 = relay.logical_or(uop_1.astype('bool'), relay.reshape(var_5.astype('bool'), relay.shape_of(uop_1))) # shape=(13, 12, 12)
uop_9 = relay.atanh(uop_3.astype('float32')) # shape=(13, 12, 12)
bop_11 = relay.maximum(uop_3.astype('int64'), relay.reshape(uop_1.astype('int64'), relay.shape_of(uop_3))) # shape=(13, 12, 12)
uop_14 = relay.tan(uop_9.astype('float64')) # shape=(13, 12, 12)
bop_16 = relay.minimum(uop_9.astype('uint32'), relay.reshape(uop_3.astype('uint32'), relay.shape_of(uop_9))) # shape=(13, 12, 12)
uop_19 = relay.asinh(uop_14.astype('float64')) # shape=(13, 12, 12)
bop_21 = relay.floor_mod(uop_19.astype('float32'), relay.reshape(var_0.astype('float32'), relay.shape_of(uop_19))) # shape=(13, 12, 12)
bop_24 = relay.equal(uop_19.astype('bool'), relay.reshape(uop_14.astype('bool'), relay.shape_of(uop_19))) # shape=(13, 12, 12)
var_27 = relay.var("var_27", dtype = "float64", shape = (13, 12, 12))#candidate|27|(13, 12, 12)|var|float64
bop_28 = relay.floor_mod(uop_19.astype('float32'), relay.reshape(var_27.astype('float32'), relay.shape_of(uop_19))) # shape=(13, 12, 12)
bop_31 = relay.maximum(bop_28.astype('int64'), relay.reshape(bop_16.astype('int64'), relay.shape_of(bop_28))) # shape=(13, 12, 12)
const_34 = relay.constdtype = "float64")#candidate|34|(13, 12, 12)|const|float64
bop_35 = relay.logical_and(uop_14.astype('bool'), relay.reshape(const_34.astype('bool'), relay.shape_of(uop_14))) # shape=(13, 12, 12)
bop_38 = relay.mod(bop_6.astype('float32'), relay.reshape(uop_14.astype('float32'), relay.shape_of(bop_6))) # shape=(13, 12, 12)
uop_41 = relay.log(bop_31.astype('float64')) # shape=(13, 12, 12)
bop_43 = relay.maximum(bop_28.astype('float64'), relay.reshape(bop_6.astype('float64'), relay.shape_of(bop_28))) # shape=(13, 12, 12)
bop_46 = relay.greater_equal(uop_41.astype('bool'), relay.reshape(uop_9.astype('bool'), relay.shape_of(uop_41))) # shape=(13, 12, 12)
bop_49 = relay.mod(uop_41.astype('float64'), relay.reshape(bop_31.astype('float64'), relay.shape_of(uop_41))) # shape=(13, 12, 12)
bop_52 = relay.divide(uop_41.astype('float32'), relay.reshape(bop_21.astype('float32'), relay.shape_of(uop_41))) # shape=(13, 12, 12)
var_55 = relay.var("var_55", dtype = "float64", shape = (13, 12, 12))#candidate|55|(13, 12, 12)|var|float64
bop_56 = relay.right_shift(bop_49.astype('int16'), relay.reshape(var_55.astype('int16'), relay.shape_of(bop_49))) # shape=(13, 12, 12)
uop_59 = relay.sigmoid(uop_14.astype('float64')) # shape=(13, 12, 12)
var_61 = relay.var("var_61", dtype = "float64", shape = (13, 12, 12))#candidate|61|(13, 12, 12)|var|float64
bop_62 = relay.bitwise_xor(uop_14.astype('uint32'), relay.reshape(var_61.astype('uint32'), relay.shape_of(uop_14))) # shape=(13, 12, 12)
uop_65 = relay.atanh(bop_56.astype('float64')) # shape=(13, 12, 12)
uop_67 = relay.sigmoid(bop_46.astype('float32')) # shape=(13, 12, 12)
uop_69 = relay.rsqrt(bop_52.astype('float32')) # shape=(13, 12, 12)
bop_71 = relay.floor_divide(uop_65.astype('float64'), relay.reshape(uop_3.astype('float64'), relay.shape_of(uop_65))) # shape=(13, 12, 12)
uop_74 = relay.log10(bop_56.astype('float64')) # shape=(13, 12, 12)
bop_76 = relay.divide(bop_46.astype('float32'), relay.reshape(bop_21.astype('float32'), relay.shape_of(bop_46))) # shape=(13, 12, 12)
var_79 = relay.var("var_79", dtype = "float64", shape = (13, 12, 12))#candidate|79|(13, 12, 12)|var|float64
bop_80 = relay.divide(uop_74.astype('float64'), relay.reshape(var_79.astype('float64'), relay.shape_of(uop_74))) # shape=(13, 12, 12)
var_83 = relay.var("var_83", dtype = "float32", shape = (13, 12, 12))#candidate|83|(13, 12, 12)|var|float32
bop_84 = relay.equal(bop_21.astype('bool'), relay.reshape(var_83.astype('bool'), relay.shape_of(bop_21))) # shape=(13, 12, 12)
output = relay.Tuple([bop_11,bop_24,bop_35,bop_38,bop_43,uop_59,bop_62,uop_67,uop_69,bop_71,bop_76,bop_80,bop_84,])
output2 = relay.Tuple([bop_11,bop_24,bop_35,bop_38,bop_43,uop_59,bop_62,uop_67,uop_69,bop_71,bop_76,bop_80,bop_84,])
func_87 = relay.Function([var_0,var_5,var_27,var_55,var_61,var_79,var_83,], output)
mod['func_87'] = func_87
mod = relay.transform.InferType()(mod)
var_88 = relay.var("var_88", dtype = "float64", shape = (13, 12, 12))#candidate|88|(13, 12, 12)|var|float64
var_89 = relay.var("var_89", dtype = "float64", shape = (13, 12, 12))#candidate|89|(13, 12, 12)|var|float64
var_90 = relay.var("var_90", dtype = "float64", shape = (13, 12, 12))#candidate|90|(13, 12, 12)|var|float64
var_91 = relay.var("var_91", dtype = "float64", shape = (13, 12, 12))#candidate|91|(13, 12, 12)|var|float64
var_92 = relay.var("var_92", dtype = "float64", shape = (13, 12, 12))#candidate|92|(13, 12, 12)|var|float64
var_93 = relay.var("var_93", dtype = "float64", shape = (13, 12, 12))#candidate|93|(13, 12, 12)|var|float64
var_94 = relay.var("var_94", dtype = "float32", shape = (13, 12, 12))#candidate|94|(13, 12, 12)|var|float32
output = func_87(var_88,var_89,var_90,var_91,var_92,var_93,var_94,)
func_95 = relay.Function([var_88,var_89,var_90,var_91,var_92,var_93,var_94,], output)
mutated_mod['func_95'] = func_95
mutated_mod = relay.transform.InferType()(mutated_mod)
var_97 = relay.var("var_97", dtype = "int32", shape = (1,))#candidate|97|(1,)|var|int32
var_98 = relay.var("var_98", dtype = "int32", shape = (13,))#candidate|98|(13,)|var|int32
bop_99 = relay.subtract(var_97.astype('int32'), var_98.astype('int32')) # shape=(13,)
uop_102 = relay.acosh(bop_99.astype('float64')) # shape=(13,)
uop_104 = relay.acosh(var_98.astype('float64')) # shape=(13,)
bop_106 = relay.left_shift(uop_104.astype('int64'), relay.reshape(bop_99.astype('int64'), relay.shape_of(uop_104))) # shape=(13,)
bop_109 = relay.floor_divide(bop_106.astype('float64'), relay.reshape(uop_104.astype('float64'), relay.shape_of(bop_106))) # shape=(13,)
uop_112 = relay.tan(var_97.astype('float64')) # shape=(1,)
uop_114 = relay.log(bop_106.astype('float32')) # shape=(13,)
bop_116 = relay.bitwise_and(uop_102.astype('int32'), relay.reshape(bop_99.astype('int32'), relay.shape_of(uop_102))) # shape=(13,)
bop_119 = relay.maximum(uop_112.astype('int64'), bop_116.astype('int64')) # shape=(13,)
bop_122 = relay.right_shift(uop_114.astype('int64'), relay.reshape(var_98.astype('int64'), relay.shape_of(uop_114))) # shape=(13,)
const_125 = relay.const([3.611293,-0.287320,4.778755,1.130812,0.469107,5.844364,5.626749,-1.884704,-0.057146,9.982883,-9.782218,6.827635,9.468045], dtype = "float32")#candidate|125|(13,)|const|float32
bop_126 = relay.divide(uop_114.astype('float64'), relay.reshape(const_125.astype('float64'), relay.shape_of(uop_114))) # shape=(13,)
uop_129 = relay.sin(uop_104.astype('float64')) # shape=(13,)
uop_131 = relay.sqrt(bop_122.astype('float32')) # shape=(13,)
uop_133 = relay.acosh(var_98.astype('float64')) # shape=(13,)
uop_135 = relay.cosh(uop_131.astype('float64')) # shape=(13,)
func_87_call = mod.get_global_var('func_87')
func_95_call = mutated_mod.get_global_var('func_95')
var_138 = relay.var("var_138", dtype = "float64", shape = (1872,))#candidate|138|(1872,)|var|float64
call_137 = relay.TupleGetItem(func_87_call(relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(var_138.astype('float32'), [13, 12, 12]), ), 6)
call_139 = relay.TupleGetItem(func_95_call(relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(var_138.astype('float32'), [13, 12, 12]), ), 6)
uop_140 = relay.rsqrt(uop_131.astype('float64')) # shape=(13,)
var_142 = relay.var("var_142", dtype = "float64", shape = (13,))#candidate|142|(13,)|var|float64
bop_143 = relay.add(uop_140.astype('int64'), relay.reshape(var_142.astype('int64'), relay.shape_of(uop_140))) # shape=(13,)
uop_146 = relay.rsqrt(uop_131.astype('float64')) # shape=(13,)
uop_148 = relay.acos(bop_143.astype('float64')) # shape=(13,)
uop_150 = relay.cosh(uop_148.astype('float32')) # shape=(13,)
uop_152 = relay.atanh(uop_150.astype('float32')) # shape=(13,)
bop_154 = relay.not_equal(uop_152.astype('bool'), relay.reshape(uop_133.astype('bool'), relay.shape_of(uop_152))) # shape=(13,)
bop_157 = relay.equal(bop_154.astype('bool'), relay.reshape(uop_148.astype('bool'), relay.shape_of(bop_154))) # shape=(13,)
uop_160 = relay.log(uop_150.astype('float64')) # shape=(13,)
func_87_call = mod.get_global_var('func_87')
func_95_call = mutated_mod.get_global_var('func_95')
call_162 = relay.TupleGetItem(func_87_call(relay.reshape(call_137.astype('float64'), [13, 12, 12]), relay.reshape(call_137.astype('float64'), [13, 12, 12]), relay.reshape(call_137.astype('float64'), [13, 12, 12]), relay.reshape(call_137.astype('float64'), [13, 12, 12]), relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(call_137.astype('float64'), [13, 12, 12]), relay.reshape(call_137.astype('float32'), [13, 12, 12]), ), 7)
call_163 = relay.TupleGetItem(func_95_call(relay.reshape(call_137.astype('float64'), [13, 12, 12]), relay.reshape(call_137.astype('float64'), [13, 12, 12]), relay.reshape(call_137.astype('float64'), [13, 12, 12]), relay.reshape(call_137.astype('float64'), [13, 12, 12]), relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(call_137.astype('float64'), [13, 12, 12]), relay.reshape(call_137.astype('float32'), [13, 12, 12]), ), 7)
bop_164 = relay.bitwise_and(uop_160.astype('int16'), relay.reshape(var_98.astype('int16'), relay.shape_of(uop_160))) # shape=(13,)
uop_167 = relay.acos(bop_164.astype('float32')) # shape=(13,)
bop_169 = relay.greater(uop_167.astype('bool'), relay.reshape(bop_99.astype('bool'), relay.shape_of(uop_167))) # shape=(13,)
bop_172 = relay.bitwise_xor(bop_169.astype('int8'), relay.reshape(var_142.astype('int8'), relay.shape_of(bop_169))) # shape=(13,)
func_87_call = mod.get_global_var('func_87')
func_95_call = mutated_mod.get_global_var('func_95')
call_175 = relay.TupleGetItem(func_87_call(relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(call_162.astype('float64'), [13, 12, 12]), relay.reshape(call_162.astype('float64'), [13, 12, 12]), relay.reshape(call_137.astype('float64'), [13, 12, 12]), relay.reshape(call_162.astype('float32'), [13, 12, 12]), ), 8)
call_176 = relay.TupleGetItem(func_95_call(relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(var_138.astype('float64'), [13, 12, 12]), relay.reshape(call_162.astype('float64'), [13, 12, 12]), relay.reshape(call_162.astype('float64'), [13, 12, 12]), relay.reshape(call_137.astype('float64'), [13, 12, 12]), relay.reshape(call_162.astype('float32'), [13, 12, 12]), ), 8)
var_177 = relay.var("var_177", dtype = "float32", shape = (13,))#candidate|177|(13,)|var|float32
bop_178 = relay.equal(uop_167.astype('bool'), relay.reshape(var_177.astype('bool'), relay.shape_of(uop_167))) # shape=(13,)
output = relay.Tuple([bop_109,bop_119,bop_126,uop_129,uop_135,call_137,var_138,uop_146,bop_157,call_162,bop_172,call_175,bop_178,])
output2 = relay.Tuple([bop_109,bop_119,bop_126,uop_129,uop_135,call_139,var_138,uop_146,bop_157,call_163,bop_172,call_176,bop_178,])
func_181 = relay.Function([var_97,var_98,var_138,var_142,var_177,], output)
mod['func_181'] = func_181
mod = relay.transform.InferType()(mod)
var_182 = relay.var("var_182", dtype = "int32", shape = (1,))#candidate|182|(1,)|var|int32
var_183 = relay.var("var_183", dtype = "int32", shape = (13,))#candidate|183|(13,)|var|int32
var_184 = relay.var("var_184", dtype = "float64", shape = (1872,))#candidate|184|(1872,)|var|float64
var_185 = relay.var("var_185", dtype = "float64", shape = (13,))#candidate|185|(13,)|var|float64
var_186 = relay.var("var_186", dtype = "float32", shape = (13,))#candidate|186|(13,)|var|float32
output = func_181(var_182,var_183,var_184,var_185,var_186,)
func_187 = relay.Function([var_182,var_183,var_184,var_185,var_186,], output)
mutated_mod['func_187'] = func_187
mutated_mod = relay.transform.InferType()(mutated_mod)
var_189 = relay.var("var_189", dtype = "float64", shape = (3, 11))#candidate|189|(3, 11)|var|float64
uop_190 = relay.acos(var_189.astype('float64')) # shape=(3, 11)
bop_192 = relay.mod(var_189.astype('float64'), relay.reshape(uop_190.astype('float64'), relay.shape_of(var_189))) # shape=(3, 11)
uop_195 = relay.cos(bop_192.astype('float32')) # shape=(3, 11)
uop_197 = relay.asinh(uop_190.astype('float64')) # shape=(3, 11)
var_199 = relay.var("var_199", dtype = "float64", shape = (3, 11))#candidate|199|(3, 11)|var|float64
bop_200 = relay.logical_or(bop_192.astype('bool'), relay.reshape(var_199.astype('bool'), relay.shape_of(bop_192))) # shape=(3, 11)
bop_203 = relay.floor_divide(var_199.astype('float64'), relay.reshape(bop_200.astype('float64'), relay.shape_of(var_199))) # shape=(3, 11)
uop_206 = relay.acosh(var_199.astype('float64')) # shape=(3, 11)
uop_208 = relay.cosh(uop_197.astype('float32')) # shape=(3, 11)
bop_210 = relay.power(bop_200.astype('float32'), relay.reshape(bop_203.astype('float32'), relay.shape_of(bop_200))) # shape=(3, 11)
bop_213 = relay.mod(uop_206.astype('float64'), relay.reshape(bop_192.astype('float64'), relay.shape_of(uop_206))) # shape=(3, 11)
uop_216 = relay.atan(uop_208.astype('float64')) # shape=(3, 11)
bop_218 = relay.bitwise_xor(uop_216.astype('uint64'), relay.reshape(var_199.astype('uint64'), relay.shape_of(uop_216))) # shape=(3, 11)
output = relay.Tuple([uop_195,bop_210,bop_213,bop_218,])
output2 = relay.Tuple([uop_195,bop_210,bop_213,bop_218,])
func_221 = relay.Function([var_189,var_199,], output)
mod['func_221'] = func_221
mod = relay.transform.InferType()(mod)
mutated_mod['func_221'] = func_221
mutated_mod = relay.transform.InferType()(mutated_mod)
func_221_call = mutated_mod.get_global_var('func_221')
var_223 = relay.var("var_223", dtype = "float64", shape = (3, 11))#candidate|223|(3, 11)|var|float64
var_224 = relay.var("var_224", dtype = "float64", shape = (3, 11))#candidate|224|(3, 11)|var|float64
call_222 = func_221_call(var_223,var_224,)
output = call_222
func_225 = relay.Function([var_223,var_224,], output)
mutated_mod['func_225'] = func_225
mutated_mod = relay.transform.InferType()(mutated_mod)
var_227 = relay.var("var_227", dtype = "float32", shape = ())#candidate|227|()|var|float32
uop_228 = relay.sinh(var_227.astype('float32')) # shape=()
output = uop_228
output2 = uop_228
func_230 = relay.Function([var_227,], output)
mod['func_230'] = func_230
mod = relay.transform.InferType()(mod)
var_231 = relay.var("var_231", dtype = "float32", shape = ())#candidate|231|()|var|float32
output = func_230(var_231)
func_232 = relay.Function([var_231], output)
mutated_mod['func_232'] = func_232
mutated_mod = relay.transform.InferType()(mutated_mod)
var_234 = relay.var("var_234", dtype = "float64", shape = ())#candidate|234|()|var|float64
uop_235 = relay.sigmoid(var_234.astype('float64')) # shape=()
uop_237 = relay.atanh(uop_235.astype('float64')) # shape=()
uop_239 = relay.asin(uop_237.astype('float64')) # shape=()
bop_241 = relay.bitwise_xor(uop_235.astype('uint16'), uop_237.astype('uint16')) # shape=()
bop_244 = relay.power(bop_241.astype('float64'), uop_239.astype('float64')) # shape=()
bop_247 = relay.bitwise_xor(bop_241.astype('uint64'), uop_239.astype('uint64')) # shape=()
bop_250 = relay.subtract(uop_235.astype('uint32'), uop_237.astype('uint32')) # shape=()
uop_253 = relay.acosh(bop_247.astype('float64')) # shape=()
bop_255 = relay.logical_and(bop_244.astype('bool'), uop_235.astype('bool')) # shape=()
uop_258 = relay.sin(uop_237.astype('float32')) # shape=()
uop_260 = relay.exp(uop_258.astype('float64')) # shape=()
uop_262 = relay.tan(bop_244.astype('float32')) # shape=()
const_264 = relay.const([[[-2.982235,1.999095,-2.645830,-3.387408,-3.613571,6.186558,-7.403121,-7.619409,-2.355200,8.769623,-8.577630,-3.992849,0.139488,6.971854,-2.872966],[2.110619,-1.092795,-9.422878,-7.011161,4.326451,-5.846384,-6.341712,0.798838,-1.946973,6.476264,-9.505478,9.078017,5.843869,4.907056,0.924429],[4.512533,-1.979249,-8.153129,8.279286,-3.579226,7.826288,1.793625,4.163555,1.423194,-6.665870,1.641281,-6.435147,9.473962,0.502536,-5.396164],[-3.426912,7.944685,-6.087691,-2.196861,-9.004073,-3.791469,2.535144,-2.458620,7.804807,-6.481459,-9.767472,-0.350303,5.443074,-3.635235,-5.568336]]], dtype = "float64")#candidate|264|(1, 4, 15)|const|float64
bop_265 = relay.less_equal(uop_260.astype('bool'), const_264.astype('bool')) # shape=(1, 4, 15)
uop_268 = relay.sinh(bop_250.astype('float64')) # shape=()
bop_270 = relay.logical_xor(uop_235.astype('int8'), uop_260.astype('int8')) # shape=()
uop_273 = relay.exp(bop_270.astype('float32')) # shape=()
bop_275 = relay.left_shift(uop_262.astype('uint32'), bop_255.astype('uint32')) # shape=()
var_278 = relay.var("var_278", dtype = "float64", shape = (5, 7))#candidate|278|(5, 7)|var|float64
bop_279 = relay.equal(uop_235.astype('bool'), var_278.astype('bool')) # shape=(5, 7)
output = relay.Tuple([uop_253,bop_265,uop_268,uop_273,bop_275,bop_279,])
output2 = relay.Tuple([uop_253,bop_265,uop_268,uop_273,bop_275,bop_279,])
func_282 = relay.Function([var_234,var_278,], output)
mod['func_282'] = func_282
mod = relay.transform.InferType()(mod)
var_283 = relay.var("var_283", dtype = "float64", shape = ())#candidate|283|()|var|float64
var_284 = relay.var("var_284", dtype = "float64", shape = (5, 7))#candidate|284|(5, 7)|var|float64
output = func_282(var_283,var_284,)
func_285 = relay.Function([var_283,var_284,], output)
mutated_mod['func_285'] = func_285
mutated_mod = relay.transform.InferType()(mutated_mod)
var_287 = relay.var("var_287", dtype = "uint64", shape = ())#candidate|287|()|var|uint64
var_288 = relay.var("var_288", dtype = "uint64", shape = (11, 6, 7))#candidate|288|(11, 6, 7)|var|uint64
bop_289 = relay.not_equal(var_287.astype('bool'), var_288.astype('bool')) # shape=(11, 6, 7)
uop_292 = relay.sigmoid(var_288.astype('float32')) # shape=(11, 6, 7)
uop_294 = relay.acosh(uop_292.astype('float64')) # shape=(11, 6, 7)
bop_296 = relay.equal(uop_294.astype('bool'), var_287.astype('bool')) # shape=(11, 6, 7)
output = relay.Tuple([bop_289,bop_296,])
output2 = relay.Tuple([bop_289,bop_296,])
func_299 = relay.Function([var_287,var_288,], output)
mod['func_299'] = func_299
mod = relay.transform.InferType()(mod)
var_300 = relay.var("var_300", dtype = "uint64", shape = ())#candidate|300|()|var|uint64
var_301 = relay.var("var_301", dtype = "uint64", shape = (11, 6, 7))#candidate|301|(11, 6, 7)|var|uint64
output = func_299(var_300,var_301,)
func_302 = relay.Function([var_300,var_301,], output)
mutated_mod['func_302'] = func_302
mutated_mod = relay.transform.InferType()(mutated_mod)
const_304 = relay.const(5.887613, dtype = "float64")#candidate|304|()|const|float64
uop_305 = relay.sin(const_304.astype('float64')) # shape=()
bop_307 = relay.floor_mod(const_304.astype('float64'), uop_305.astype('float64')) # shape=()
bop_310 = relay.not_equal(bop_307.astype('bool'), uop_305.astype('bool')) # shape=()
const_313 = relay.const([[0.615318,-5.795125,-4.039855,3.008661,4.784102,7.665029,9.599740,2.978405,-5.999448,5.032097],[-8.131238,-8.406513,-7.925891,6.185831,7.652049,-4.579538,-9.527257,-6.025270,2.699042,5.214097]], dtype = "float64")#candidate|313|(2, 10)|const|float64
bop_314 = relay.subtract(const_304.astype('uint32'), const_313.astype('uint32')) # shape=(2, 10)
uop_317 = relay.atanh(bop_307.astype('float32')) # shape=()
uop_319 = relay.sqrt(bop_307.astype('float32')) # shape=()
output = relay.Tuple([bop_310,bop_314,uop_317,uop_319,])
output2 = relay.Tuple([bop_310,bop_314,uop_317,uop_319,])
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()()
res3 = intrp3.evaluate()()
res4 = intrp4.evaluate()()
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()()
res7 = intrp7.evaluate()()
res8 = intrp8.evaluate()()
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()()
res11 = intrp11.evaluate()()
res12 = intrp12.evaluate()()
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()()
res15 = intrp15.evaluate()()
res16 = intrp16.evaluate()()
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()()
res19 = intrp19.evaluate()()
res20 = intrp20.evaluate()()
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()()
res23 = intrp23.evaluate()()
res24 = intrp24.evaluate()()
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()

'''4294967294, 4294967292,          3,         10,          0],
4294967294, 4294967292,          3,          5,          0],

'''