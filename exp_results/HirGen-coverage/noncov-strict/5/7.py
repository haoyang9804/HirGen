import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (11,))#candidate|0|(11,)|var|float32
uop_1 = relay.log2(var_0.astype('float32')) # shape=(11,)
const_3 = relay.const([8.818600,5.918403,-0.441055,1.283747,0.746048,1.244886,5.681937,3.782317,-0.799752,5.771725,-1.781729], dtype = "float32")#candidate|3|(11,)|const|float32
bop_4 = relay.less(var_0.astype('bool'), relay.reshape(const_3.astype('bool'), relay.shape_of(var_0))) # shape=(11,)
bop_7 = relay.bitwise_and(uop_1.astype('uint64'), relay.reshape(var_0.astype('uint64'), relay.shape_of(uop_1))) # shape=(11,)
uop_10 = relay.atanh(var_0.astype('float64')) # shape=(11,)
bop_12 = relay.power(bop_4.astype('float32'), relay.reshape(var_0.astype('float32'), relay.shape_of(bop_4))) # shape=(11,)
uop_15 = relay.tan(var_0.astype('float64')) # shape=(11,)
uop_17 = relay.cosh(bop_12.astype('float64')) # shape=(11,)
uop_19 = relay.log2(uop_1.astype('float64')) # shape=(11,)
uop_21 = relay.log(bop_7.astype('float32')) # shape=(11,)
uop_23 = relay.rsqrt(uop_17.astype('float64')) # shape=(11,)
uop_25 = relay.atan(uop_19.astype('float32')) # shape=(11,)
bop_27 = relay.add(uop_25.astype('uint16'), relay.reshape(uop_23.astype('uint16'), relay.shape_of(uop_25))) # shape=(11,)
uop_30 = relay.acos(uop_15.astype('float64')) # shape=(11,)
uop_32 = relay.asinh(bop_7.astype('float32')) # shape=(11,)
uop_34 = relay.erf(bop_27.astype('float64')) # shape=(11,)
bop_36 = relay.logical_or(uop_34.astype('bool'), relay.reshape(uop_23.astype('bool'), relay.shape_of(uop_34))) # shape=(11,)
bop_39 = relay.right_shift(uop_10.astype('int64'), relay.reshape(uop_32.astype('int64'), relay.shape_of(uop_10))) # shape=(11,)
var_42 = relay.var("var_42", dtype = "bool", shape = (11,))#candidate|42|(11,)|var|bool
bop_43 = relay.floor_divide(bop_36.astype('float64'), relay.reshape(var_42.astype('float64'), relay.shape_of(bop_36))) # shape=(11,)
bop_46 = relay.power(bop_27.astype('float32'), relay.reshape(uop_1.astype('float32'), relay.shape_of(bop_27))) # shape=(11,)
uop_49 = relay.cosh(bop_43.astype('float64')) # shape=(11,)
uop_51 = relay.sin(uop_10.astype('float64')) # shape=(11,)
bop_53 = relay.floor_mod(bop_36.astype('float32'), relay.reshape(uop_25.astype('float32'), relay.shape_of(bop_36))) # shape=(11,)
const_56 = relay.const([-8.790063,2.619009,-6.597684,2.131135,-3.500572,0.477560,-9.106460,-4.215675,6.063140,0.647246,5.255033], dtype = "float64")#candidate|56|(11,)|const|float64
bop_57 = relay.mod(uop_49.astype('float32'), relay.reshape(const_56.astype('float32'), relay.shape_of(uop_49))) # shape=(11,)
var_60 = relay.var("var_60", dtype = "float64", shape = (11,))#candidate|60|(11,)|var|float64
bop_61 = relay.equal(uop_34.astype('bool'), relay.reshape(var_60.astype('bool'), relay.shape_of(uop_34))) # shape=(11,)
uop_64 = relay.acos(bop_27.astype('float32')) # shape=(11,)
bop_66 = relay.floor_mod(bop_57.astype('float64'), relay.reshape(bop_46.astype('float64'), relay.shape_of(bop_57))) # shape=(11,)
bop_69 = relay.greater_equal(bop_43.astype('bool'), relay.reshape(uop_64.astype('bool'), relay.shape_of(bop_43))) # shape=(11,)
bop_72 = relay.bitwise_xor(uop_49.astype('uint64'), relay.reshape(bop_27.astype('uint64'), relay.shape_of(uop_49))) # shape=(11,)
bop_75 = relay.logical_xor(bop_53.astype('uint64'), relay.reshape(uop_49.astype('uint64'), relay.shape_of(bop_53))) # shape=(11,)
uop_78 = relay.sin(bop_46.astype('float64')) # shape=(11,)
bop_80 = relay.logical_and(uop_49.astype('bool'), relay.reshape(uop_25.astype('bool'), relay.shape_of(uop_49))) # shape=(11,)
bop_83 = relay.logical_or(bop_72.astype('bool'), relay.reshape(bop_69.astype('bool'), relay.shape_of(bop_72))) # shape=(11,)
bop_86 = relay.not_equal(bop_75.astype('bool'), relay.reshape(bop_83.astype('bool'), relay.shape_of(bop_75))) # shape=(11,)
uop_89 = relay.rsqrt(const_56.astype('float32')) # shape=(11,)
uop_91 = relay.acosh(bop_66.astype('float64')) # shape=(11,)
bop_93 = relay.logical_or(uop_91.astype('bool'), relay.reshape(uop_25.astype('bool'), relay.shape_of(uop_91))) # shape=(11,)
var_96 = relay.var("var_96", dtype = "bool", shape = (11,))#candidate|96|(11,)|var|bool
bop_97 = relay.logical_or(bop_93.astype('bool'), relay.reshape(var_96.astype('bool'), relay.shape_of(bop_93))) # shape=(11,)
uop_100 = relay.sinh(bop_75.astype('float64')) # shape=(11,)
var_102 = relay.var("var_102", dtype = "float32", shape = (11,))#candidate|102|(11,)|var|float32
bop_103 = relay.not_equal(bop_57.astype('bool'), relay.reshape(var_102.astype('bool'), relay.shape_of(bop_57))) # shape=(11,)
uop_106 = relay.log(bop_93.astype('float64')) # shape=(11,)
bop_108 = relay.less_equal(bop_69.astype('bool'), relay.reshape(uop_10.astype('bool'), relay.shape_of(bop_69))) # shape=(11,)
uop_111 = relay.tan(uop_106.astype('float64')) # shape=(11,)
var_113 = relay.var("var_113", dtype = "float32", shape = (11,))#candidate|113|(11,)|var|float32
bop_114 = relay.logical_xor(uop_25.astype('uint64'), relay.reshape(var_113.astype('uint64'), relay.shape_of(uop_25))) # shape=(11,)
var_117 = relay.var("var_117", dtype = "bool", shape = (11,))#candidate|117|(11,)|var|bool
bop_118 = relay.logical_or(bop_61.astype('bool'), relay.reshape(var_117.astype('bool'), relay.shape_of(bop_61))) # shape=(11,)
bop_121 = relay.maximum(uop_111.astype('float64'), relay.reshape(uop_78.astype('float64'), relay.shape_of(uop_111))) # shape=(11,)
var_124 = relay.var("var_124", dtype = "float64", shape = (11,))#candidate|124|(11,)|var|float64
bop_125 = relay.less(bop_121.astype('bool'), relay.reshape(var_124.astype('bool'), relay.shape_of(bop_121))) # shape=(11,)
bop_128 = relay.floor_mod(uop_111.astype('float32'), relay.reshape(bop_108.astype('float32'), relay.shape_of(uop_111))) # shape=(11,)
bop_131 = relay.greater(bop_125.astype('bool'), relay.reshape(bop_97.astype('bool'), relay.shape_of(bop_125))) # shape=(11,)
bop_134 = relay.mod(uop_106.astype('float64'), relay.reshape(uop_78.astype('float64'), relay.shape_of(uop_106))) # shape=(11,)
uop_137 = relay.erf(bop_125.astype('float32')) # shape=(11,)
uop_139 = relay.log10(uop_1.astype('float64')) # shape=(11,)
bop_141 = relay.floor_mod(bop_121.astype('float32'), relay.reshape(uop_17.astype('float32'), relay.shape_of(bop_121))) # shape=(11,)
bop_144 = relay.greater_equal(uop_137.astype('bool'), relay.reshape(uop_111.astype('bool'), relay.shape_of(uop_137))) # shape=(11,)
uop_147 = relay.sqrt(bop_144.astype('float32')) # shape=(11,)
bop_149 = relay.equal(uop_147.astype('bool'), relay.reshape(uop_89.astype('bool'), relay.shape_of(uop_147))) # shape=(11,)
var_152 = relay.var("var_152", dtype = "float32", shape = (11,))#candidate|152|(11,)|var|float32
bop_153 = relay.right_shift(uop_147.astype('uint32'), relay.reshape(var_152.astype('uint32'), relay.shape_of(uop_147))) # shape=(11,)
bop_156 = relay.logical_or(uop_111.astype('bool'), relay.reshape(bop_114.astype('bool'), relay.shape_of(uop_111))) # shape=(11,)
uop_159 = relay.rsqrt(bop_121.astype('float64')) # shape=(11,)
uop_161 = relay.acos(uop_137.astype('float64')) # shape=(11,)
bop_163 = relay.not_equal(uop_100.astype('bool'), relay.reshape(uop_159.astype('bool'), relay.shape_of(uop_100))) # shape=(11,)
bop_166 = relay.logical_or(uop_159.astype('bool'), relay.reshape(bop_163.astype('bool'), relay.shape_of(uop_159))) # shape=(11,)
uop_169 = relay.acosh(bop_163.astype('float32')) # shape=(11,)
var_171 = relay.var("var_171", dtype = "bool", shape = (11,))#candidate|171|(11,)|var|bool
bop_172 = relay.right_shift(bop_149.astype('uint32'), relay.reshape(var_171.astype('uint32'), relay.shape_of(bop_149))) # shape=(11,)
uop_175 = relay.tan(bop_149.astype('float32')) # shape=(11,)
bop_177 = relay.divide(uop_175.astype('float32'), relay.reshape(bop_153.astype('float32'), relay.shape_of(uop_175))) # shape=(11,)
const_180 = relay.const([8.279998,-0.566246,-8.679147,-2.070367,2.318657,3.920089,-9.582477,-8.621755,5.873926,-3.663242,5.283037], dtype = "float32")#candidate|180|(11,)|const|float32
bop_181 = relay.divide(bop_177.astype('float64'), relay.reshape(const_180.astype('float64'), relay.shape_of(bop_177))) # shape=(11,)
bop_184 = relay.minimum(uop_161.astype('int16'), relay.reshape(uop_169.astype('int16'), relay.shape_of(uop_161))) # shape=(11,)
bop_187 = relay.less_equal(uop_91.astype('bool'), relay.reshape(uop_30.astype('bool'), relay.shape_of(uop_91))) # shape=(11,)
uop_190 = relay.atanh(uop_147.astype('float32')) # shape=(11,)
bop_192 = relay.not_equal(bop_153.astype('bool'), relay.reshape(bop_184.astype('bool'), relay.shape_of(bop_153))) # shape=(11,)
uop_195 = relay.acos(uop_175.astype('float32')) # shape=(11,)
uop_197 = relay.asin(bop_172.astype('float64')) # shape=(11,)
bop_199 = relay.greater_equal(uop_195.astype('bool'), relay.reshape(bop_108.astype('bool'), relay.shape_of(uop_195))) # shape=(11,)
const_202 = relay.const([0.218204,5.109299,9.059662,6.383954,4.653608,-3.663038,-0.950157,-4.027537,2.502913,-4.247091,-9.014912], dtype = "float64")#candidate|202|(11,)|const|float64
bop_203 = relay.equal(bop_181.astype('bool'), relay.reshape(const_202.astype('bool'), relay.shape_of(bop_181))) # shape=(11,)
output = relay.Tuple([uop_21,bop_39,uop_51,bop_80,bop_86,bop_103,bop_118,bop_128,bop_131,bop_134,uop_139,bop_141,bop_156,bop_166,bop_187,uop_190,bop_192,uop_197,bop_199,bop_203,])
output2 = relay.Tuple([uop_21,bop_39,uop_51,bop_80,bop_86,bop_103,bop_118,bop_128,bop_131,bop_134,uop_139,bop_141,bop_156,bop_166,bop_187,uop_190,bop_192,uop_197,bop_199,bop_203,])
func_206 = relay.Function([var_0,var_42,var_60,var_96,var_102,var_113,var_117,var_124,var_152,var_171,], output)
mod['func_206'] = func_206
mod = relay.transform.InferType()(mod)
mutated_mod['func_206'] = func_206
mutated_mod = relay.transform.InferType()(mutated_mod)
func_206_call = mutated_mod.get_global_var('func_206')
var_208 = relay.var("var_208", dtype = "float32", shape = (11,))#candidate|208|(11,)|var|float32
var_209 = relay.var("var_209", dtype = "bool", shape = (11,))#candidate|209|(11,)|var|bool
var_210 = relay.var("var_210", dtype = "float64", shape = (11,))#candidate|210|(11,)|var|float64
var_211 = relay.var("var_211", dtype = "bool", shape = (11,))#candidate|211|(11,)|var|bool
var_212 = relay.var("var_212", dtype = "float32", shape = (11,))#candidate|212|(11,)|var|float32
var_213 = relay.var("var_213", dtype = "float32", shape = (11,))#candidate|213|(11,)|var|float32
var_214 = relay.var("var_214", dtype = "bool", shape = (11,))#candidate|214|(11,)|var|bool
var_215 = relay.var("var_215", dtype = "float64", shape = (11,))#candidate|215|(11,)|var|float64
var_216 = relay.var("var_216", dtype = "float32", shape = (11,))#candidate|216|(11,)|var|float32
var_217 = relay.var("var_217", dtype = "bool", shape = (11,))#candidate|217|(11,)|var|bool
call_207 = func_206_call(var_208,var_209,var_210,var_211,var_212,var_213,var_214,var_215,var_216,var_217,)
output = call_207
func_218 = relay.Function([var_208,var_209,var_210,var_211,var_212,var_213,var_214,var_215,var_216,var_217,], output)
mutated_mod['func_218'] = func_218
mutated_mod = relay.transform.InferType()(mutated_mod)
var_220 = relay.var("var_220", dtype = "uint8", shape = (4, 7, 12))#candidate|220|(4, 7, 12)|var|uint8
var_221 = relay.var("var_221", dtype = "uint8", shape = (4, 7, 12))#candidate|221|(4, 7, 12)|var|uint8
bop_222 = relay.add(var_220.astype('uint8'), relay.reshape(var_221.astype('uint8'), relay.shape_of(var_220))) # shape=(4, 7, 12)
bop_225 = relay.bitwise_xor(bop_222.astype('int64'), relay.reshape(var_220.astype('int64'), relay.shape_of(bop_222))) # shape=(4, 7, 12)
func_206_call = mod.get_global_var('func_206')
func_218_call = mutated_mod.get_global_var('func_218')
var_229 = relay.var("var_229", dtype = "float32", shape = (11,))#candidate|229|(11,)|var|float32
call_228 = relay.TupleGetItem(func_206_call(relay.reshape(var_229.astype('float32'), [11,]), relay.reshape(var_229.astype('bool'), [11,]), relay.reshape(var_229.astype('float64'), [11,]), relay.reshape(var_229.astype('bool'), [11,]), relay.reshape(var_229.astype('float32'), [11,]), relay.reshape(var_229.astype('float32'), [11,]), relay.reshape(var_229.astype('bool'), [11,]), relay.reshape(var_229.astype('float64'), [11,]), relay.reshape(var_229.astype('float32'), [11,]), relay.reshape(var_229.astype('bool'), [11,]), ), 16)
call_230 = relay.TupleGetItem(func_218_call(relay.reshape(var_229.astype('float32'), [11,]), relay.reshape(var_229.astype('bool'), [11,]), relay.reshape(var_229.astype('float64'), [11,]), relay.reshape(var_229.astype('bool'), [11,]), relay.reshape(var_229.astype('float32'), [11,]), relay.reshape(var_229.astype('float32'), [11,]), relay.reshape(var_229.astype('bool'), [11,]), relay.reshape(var_229.astype('float64'), [11,]), relay.reshape(var_229.astype('float32'), [11,]), relay.reshape(var_229.astype('bool'), [11,]), ), 16)
bop_231 = relay.greater(var_221.astype('bool'), relay.reshape(bop_222.astype('bool'), relay.shape_of(var_221))) # shape=(4, 7, 12)
uop_234 = relay.asin(call_228.astype('float64')) # shape=(11,)
uop_236 = relay.asin(call_230.astype('float64')) # shape=(11,)
bop_237 = relay.bitwise_xor(var_220.astype('uint8'), relay.reshape(bop_222.astype('uint8'), relay.shape_of(var_220))) # shape=(4, 7, 12)
bop_240 = relay.floor_divide(uop_234.astype('float32'), relay.reshape(var_229.astype('float32'), relay.shape_of(uop_234))) # shape=(11,)
bop_243 = relay.floor_divide(uop_236.astype('float32'), relay.reshape(var_229.astype('float32'), relay.shape_of(uop_236))) # shape=(11,)
func_206_call = mod.get_global_var('func_206')
func_218_call = mutated_mod.get_global_var('func_218')
call_244 = relay.TupleGetItem(func_206_call(relay.reshape(call_228.astype('float32'), [11,]), relay.reshape(var_229.astype('bool'), [11,]), relay.reshape(bop_240.astype('float64'), [11,]), relay.reshape(uop_234.astype('bool'), [11,]), relay.reshape(call_228.astype('float32'), [11,]), relay.reshape(call_228.astype('float32'), [11,]), relay.reshape(bop_240.astype('bool'), [11,]), relay.reshape(var_229.astype('float64'), [11,]), relay.reshape(uop_234.astype('float32'), [11,]), relay.reshape(call_228.astype('bool'), [11,]), ), 15)
call_245 = relay.TupleGetItem(func_218_call(relay.reshape(call_228.astype('float32'), [11,]), relay.reshape(var_229.astype('bool'), [11,]), relay.reshape(bop_240.astype('float64'), [11,]), relay.reshape(uop_234.astype('bool'), [11,]), relay.reshape(call_228.astype('float32'), [11,]), relay.reshape(call_228.astype('float32'), [11,]), relay.reshape(bop_240.astype('bool'), [11,]), relay.reshape(var_229.astype('float64'), [11,]), relay.reshape(uop_234.astype('float32'), [11,]), relay.reshape(call_228.astype('bool'), [11,]), ), 15)
bop_246 = relay.not_equal(call_228.astype('bool'), relay.reshape(uop_234.astype('bool'), relay.shape_of(call_228))) # shape=(11,)
bop_249 = relay.not_equal(call_230.astype('bool'), relay.reshape(uop_236.astype('bool'), relay.shape_of(call_230))) # shape=(11,)
uop_250 = relay.sqrt(uop_234.astype('float64')) # shape=(11,)
uop_252 = relay.sqrt(uop_236.astype('float64')) # shape=(11,)
uop_253 = relay.rsqrt(bop_240.astype('float64')) # shape=(11,)
uop_255 = relay.rsqrt(bop_243.astype('float64')) # shape=(11,)
func_206_call = mod.get_global_var('func_206')
func_218_call = mutated_mod.get_global_var('func_218')
call_256 = relay.TupleGetItem(func_206_call(relay.reshape(bop_240.astype('float32'), [11,]), relay.reshape(call_244.astype('bool'), [11,]), relay.reshape(uop_253.astype('float64'), [11,]), relay.reshape(var_229.astype('bool'), [11,]), relay.reshape(call_244.astype('float32'), [11,]), relay.reshape(uop_234.astype('float32'), [11,]), relay.reshape(bop_240.astype('bool'), [11,]), relay.reshape(bop_246.astype('float64'), [11,]), relay.reshape(uop_253.astype('float32'), [11,]), relay.reshape(uop_250.astype('bool'), [11,]), ), 4)
call_257 = relay.TupleGetItem(func_218_call(relay.reshape(bop_240.astype('float32'), [11,]), relay.reshape(call_244.astype('bool'), [11,]), relay.reshape(uop_253.astype('float64'), [11,]), relay.reshape(var_229.astype('bool'), [11,]), relay.reshape(call_244.astype('float32'), [11,]), relay.reshape(uop_234.astype('float32'), [11,]), relay.reshape(bop_240.astype('bool'), [11,]), relay.reshape(bop_246.astype('float64'), [11,]), relay.reshape(uop_253.astype('float32'), [11,]), relay.reshape(uop_250.astype('bool'), [11,]), ), 4)
output = relay.Tuple([bop_225,bop_231,bop_237,call_244,bop_246,uop_250,uop_253,call_256,])
output2 = relay.Tuple([bop_225,bop_231,bop_237,call_245,bop_249,uop_252,uop_255,call_257,])
func_258 = relay.Function([var_220,var_221,var_229,], output)
mod['func_258'] = func_258
mod = relay.transform.InferType()(mod)
var_259 = relay.var("var_259", dtype = "uint8", shape = (4, 7, 12))#candidate|259|(4, 7, 12)|var|uint8
var_260 = relay.var("var_260", dtype = "uint8", shape = (4, 7, 12))#candidate|260|(4, 7, 12)|var|uint8
var_261 = relay.var("var_261", dtype = "float32", shape = (11,))#candidate|261|(11,)|var|float32
output = func_258(var_259,var_260,var_261,)
func_262 = relay.Function([var_259,var_260,var_261,], output)
mutated_mod['func_262'] = func_262
mutated_mod = relay.transform.InferType()(mutated_mod)
var_264 = relay.var("var_264", dtype = "float32", shape = (14, 11, 3))#candidate|264|(14, 11, 3)|var|float32
uop_265 = relay.sigmoid(var_264.astype('float32')) # shape=(14, 11, 3)
uop_267 = relay.erf(uop_265.astype('float32')) # shape=(14, 11, 3)
var_269 = relay.var("var_269", dtype = "float32", shape = (14, 11, 3))#candidate|269|(14, 11, 3)|var|float32
bop_270 = relay.minimum(uop_267.astype('uint64'), relay.reshape(var_269.astype('uint64'), relay.shape_of(uop_267))) # shape=(14, 11, 3)
func_258_call = mod.get_global_var('func_258')
func_262_call = mutated_mod.get_global_var('func_262')
var_274 = relay.var("var_274", dtype = "uint8", shape = (168, 2))#candidate|274|(168, 2)|var|uint8
var_275 = relay.var("var_275", dtype = "float32", shape = (11, 1))#candidate|275|(11, 1)|var|float32
call_273 = relay.TupleGetItem(func_258_call(relay.reshape(var_274.astype('uint8'), [4, 7, 12]), relay.reshape(var_274.astype('uint8'), [4, 7, 12]), relay.reshape(var_275.astype('float32'), [11,]), ), 2)
call_276 = relay.TupleGetItem(func_262_call(relay.reshape(var_274.astype('uint8'), [4, 7, 12]), relay.reshape(var_274.astype('uint8'), [4, 7, 12]), relay.reshape(var_275.astype('float32'), [11,]), ), 2)
uop_277 = relay.tan(uop_267.astype('float32')) # shape=(14, 11, 3)
func_206_call = mod.get_global_var('func_206')
func_218_call = mutated_mod.get_global_var('func_218')
call_279 = relay.TupleGetItem(func_206_call(relay.reshape(var_275.astype('float32'), [11,]), relay.reshape(var_275.astype('bool'), [11,]), relay.reshape(var_275.astype('float64'), [11,]), relay.reshape(var_275.astype('bool'), [11,]), relay.reshape(var_275.astype('float32'), [11,]), relay.reshape(var_275.astype('float32'), [11,]), relay.reshape(var_275.astype('bool'), [11,]), relay.reshape(var_275.astype('float64'), [11,]), relay.reshape(var_275.astype('float32'), [11,]), relay.reshape(var_275.astype('bool'), [11,]), ), 18)
call_280 = relay.TupleGetItem(func_218_call(relay.reshape(var_275.astype('float32'), [11,]), relay.reshape(var_275.astype('bool'), [11,]), relay.reshape(var_275.astype('float64'), [11,]), relay.reshape(var_275.astype('bool'), [11,]), relay.reshape(var_275.astype('float32'), [11,]), relay.reshape(var_275.astype('float32'), [11,]), relay.reshape(var_275.astype('bool'), [11,]), relay.reshape(var_275.astype('float64'), [11,]), relay.reshape(var_275.astype('float32'), [11,]), relay.reshape(var_275.astype('bool'), [11,]), ), 18)
var_281 = relay.var("var_281", dtype = "float32", shape = (14, 11, 3))#candidate|281|(14, 11, 3)|var|float32
bop_282 = relay.less(uop_277.astype('bool'), relay.reshape(var_281.astype('bool'), relay.shape_of(uop_277))) # shape=(14, 11, 3)
output = relay.Tuple([bop_270,call_273,var_274,var_275,call_279,bop_282,])
output2 = relay.Tuple([bop_270,call_276,var_274,var_275,call_280,bop_282,])
func_285 = relay.Function([var_264,var_269,var_274,var_275,var_281,], output)
mod['func_285'] = func_285
mod = relay.transform.InferType()(mod)
var_286 = relay.var("var_286", dtype = "float32", shape = (14, 11, 3))#candidate|286|(14, 11, 3)|var|float32
var_287 = relay.var("var_287", dtype = "float32", shape = (14, 11, 3))#candidate|287|(14, 11, 3)|var|float32
var_288 = relay.var("var_288", dtype = "uint8", shape = (168, 2))#candidate|288|(168, 2)|var|uint8
var_289 = relay.var("var_289", dtype = "float32", shape = (11, 1))#candidate|289|(11, 1)|var|float32
var_290 = relay.var("var_290", dtype = "float32", shape = (14, 11, 3))#candidate|290|(14, 11, 3)|var|float32
output = func_285(var_286,var_287,var_288,var_289,var_290,)
func_291 = relay.Function([var_286,var_287,var_288,var_289,var_290,], output)
mutated_mod['func_291'] = func_291
mutated_mod = relay.transform.InferType()(mutated_mod)
const_293 = relay.const(-2.167861, dtype = "float32")#candidate|293|()|const|float32
uop_294 = relay.exp(const_293.astype('float32')) # shape=()
var_296 = relay.var("var_296", dtype = "float32", shape = (11, 2, 10))#candidate|296|(11, 2, 10)|var|float32
bop_297 = relay.logical_xor(uop_294.astype('int64'), var_296.astype('int64')) # shape=(11, 2, 10)
uop_300 = relay.log2(bop_297.astype('float64')) # shape=(11, 2, 10)
uop_302 = relay.asinh(uop_300.astype('float32')) # shape=(11, 2, 10)
bop_304 = relay.left_shift(uop_302.astype('int64'), const_293.astype('int64')) # shape=(11, 2, 10)
uop_307 = relay.sqrt(uop_300.astype('float64')) # shape=(11, 2, 10)
uop_309 = relay.atan(uop_300.astype('float64')) # shape=(11, 2, 10)
const_311 = relay.const([[[9,-6,-6,1,8,3,10,8,8,4],[8,-7,5,7,-8,-6,4,4,-6,1]],[[6,1,10,9,3,-9,1,9,-7,4],[7,-4,3,-4,-6,4,9,-7,-7,6]],[[-10,-3,2,6,10,-5,-9,9,-1,-2],[-8,-9,6,-5,-2,4,-9,-2,-9,-2]],[[-8,6,-8,-1,8,5,4,2,-2,2],[1,6,5,10,-8,-2,9,-4,-5,-7]],[[-10,10,8,3,-10,-4,1,2,9,9],[-4,4,3,4,4,-2,8,10,5,-8]],[[8,-9,-3,4,-2,-9,-8,-2,2,-10],[9,-3,-5,3,-4,-8,-2,-1,5,-8]],[[2,3,-2,-10,3,9,1,1,4,-7],[-4,1,1,2,1,3,7,3,5,2]],[[-5,-1,4,4,5,-6,-8,4,3,5],[6,-9,-6,-2,8,-10,-6,1,1,10]],[[7,-5,-5,2,7,-3,-7,-5,5,-5],[-1,7,-6,-9,-4,-4,-5,3,10,-9]],[[7,1,4,-9,3,-3,-1,-4,-9,-7],[-2,-3,2,6,-3,2,-6,-4,-8,9]],[[-10,-10,5,1,8,6,-1,-6,6,6],[8,-9,-10,7,9,1,-2,-2,4,-10]]], dtype = "int64")#candidate|311|(11, 2, 10)|const|int64
bop_312 = relay.greater(bop_297.astype('bool'), relay.reshape(const_311.astype('bool'), relay.shape_of(bop_297))) # shape=(11, 2, 10)
var_315 = relay.var("var_315", dtype = "float64", shape = (11, 2, 10))#candidate|315|(11, 2, 10)|var|float64
bop_316 = relay.less(uop_300.astype('bool'), relay.reshape(var_315.astype('bool'), relay.shape_of(uop_300))) # shape=(11, 2, 10)
var_319 = relay.var("var_319", dtype = "bool", shape = (11, 2, 10))#candidate|319|(11, 2, 10)|var|bool
bop_320 = relay.not_equal(bop_316.astype('bool'), relay.reshape(var_319.astype('bool'), relay.shape_of(bop_316))) # shape=(11, 2, 10)
uop_323 = relay.asinh(bop_316.astype('float32')) # shape=(11, 2, 10)
uop_325 = relay.sigmoid(uop_323.astype('float64')) # shape=(11, 2, 10)
output = relay.Tuple([bop_304,uop_307,uop_309,bop_312,bop_320,uop_325,])
output2 = relay.Tuple([bop_304,uop_307,uop_309,bop_312,bop_320,uop_325,])
F = relay.Function([var_296,var_315,var_319,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_296,var_315,var_319,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_296= np.array([[[-1.435180,-8.697262,-8.327003,-9.673222,3.294838,-6.899955,-9.529971,6.447234,6.143164,-2.541130],[-9.024246,-1.017923,6.286397,7.371727,1.583525,-7.113144,-6.769523,3.987637,3.951319,-3.649444]],[[6.752080,-7.866540,-3.965575,5.272936,-8.357099,0.829862,0.442209,8.336571,4.802972,5.383570],[-0.199779,-4.498561,0.507567,5.372165,7.082750,9.274775,1.598123,8.538627,2.899058,8.126020]],[[-4.978362,-9.139577,-2.685676,-2.887830,0.646058,-3.490320,1.316323,-1.297705,8.058835,2.616130],[-2.986632,7.136302,3.869393,2.773936,2.753579,-1.018716,7.085807,3.026666,-2.747081,8.664139]],[[-8.689598,-6.302674,6.301090,-9.821206,-9.724132,4.872900,-8.060060,-5.496019,7.556801,4.858940],[-9.446799,-8.895145,-3.510292,-8.071758,2.735105,-6.645812,2.040638,5.599644,-3.677984,2.971768]],[[-4.155181,6.344656,4.665803,-5.261260,5.403095,7.461445,6.158710,-4.815291,-0.818266,-1.461227],[-2.063189,3.523023,0.291116,-4.299849,-1.949948,2.043281,1.692712,9.371560,-2.489968,8.921422]],[[9.863814,-7.162786,1.834714,7.153617,5.558035,4.571379,-1.275617,8.067192,-0.791685,4.838879],[-7.333097,5.028257,2.296144,-1.403298,-1.247327,-8.742225,5.052546,-9.060910,6.988019,-2.963393]],[[1.950542,-8.238113,-5.531329,-0.387928,-8.810811,3.476267,-0.711161,-5.007593,4.893042,4.515600],[-5.555760,-7.748122,-8.284680,-2.200757,-0.893777,-9.848068,5.088183,2.402525,0.208366,-1.999732]],[[-3.102580,-2.833681,-0.986886,-5.379928,2.295727,7.991373,3.651038,5.631649,-7.940461,7.315214],[-6.042229,-5.105524,4.123929,3.045242,6.026078,-9.281508,4.692045,-0.683611,4.666533,-1.556210]],[[8.056440,-4.759452,4.917919,-8.964599,-3.283493,-6.502477,-2.017581,-0.023697,-2.006130,-8.646506],[6.940816,5.104405,9.719569,-8.783133,8.790535,1.430088,-3.832589,4.785953,-3.744167,0.101214]],[[-5.763355,9.487216,-2.781347,-8.586125,-5.850869,1.326143,7.284299,-5.726717,-4.001174,0.759398],[1.365196,-3.082969,-6.072407,1.836915,-7.124632,2.076869,-1.903108,5.047578,-6.085443,-5.884181]],[[-6.268179,-2.225821,-1.506097,-9.642292,3.967582,-1.427936,-7.340546,-4.740953,9.496434,9.354374],[-9.858038,-8.890496,-9.638423,-1.697917,2.329104,9.745464,-9.714689,4.626700,-3.556125,1.921234]]], dtype='float32')
module1.set_input('var_296', input_296)
input_315= np.array([[[5.821212,9.566012,5.683530,-0.348318,5.288574,-3.449191,5.283624,2.103941,-7.420859,-5.996876],[-0.005689,0.322496,-0.382781,0.254068,-7.574506,-8.125552,3.250798,8.933528,-5.672341,9.888003]],[[-5.565974,8.850886,-1.830619,0.215368,-0.906128,-4.303995,0.861211,9.101605,-1.972827,-6.809369],[-1.324966,-9.147962,-4.102047,-3.075962,3.172995,9.495581,9.921748,4.971628,3.339923,-1.718900]],[[1.949436,-6.099594,-6.802265,-7.765416,-5.615769,5.244754,3.883963,-2.949281,7.389668,-0.588362],[-3.475048,-5.118657,5.107956,9.982939,-2.736341,-2.963763,-5.244344,-9.064340,1.727200,1.798135]],[[-4.040593,-4.979563,-4.336343,4.792847,4.328747,1.162098,7.129479,2.606224,1.385718,2.399430],[-5.863180,9.408604,-1.019132,9.461564,-8.787334,-9.898709,2.000228,3.072232,9.231912,3.545049]],[[-6.155453,6.391550,0.039319,-9.819094,4.518044,-3.219509,-2.994197,0.977627,-3.003420,-2.597987],[5.875608,9.799185,7.009301,6.378518,1.504454,0.249020,2.751956,-8.929777,2.193970,0.677038]],[[-2.583738,-2.528736,-8.190979,-9.958548,-3.218389,0.706049,0.819831,-2.017233,9.663057,3.173394],[-7.088688,7.354793,7.842316,-3.578057,-0.763170,-9.560732,-7.312612,3.629732,-5.671945,7.977787]],[[-1.138952,-3.941756,4.404840,-8.229503,-3.790961,6.253820,-1.714594,-4.283087,-3.210793,-2.135855],[2.309579,-9.475399,3.207006,-5.031928,4.228682,-2.245387,-7.189622,2.998702,9.559958,6.014843]],[[4.041520,4.969889,7.395825,-2.031697,-4.186989,-7.766236,4.358683,4.950114,7.674043,-9.041009],[8.214456,-7.995795,6.616479,4.343048,-7.158573,0.309539,-7.710259,6.297343,-4.906439,4.930092]],[[5.997662,-9.182504,-2.184359,8.573506,7.781474,-3.412998,0.784318,6.778404,-2.630082,5.908584],[4.324677,0.424297,6.346256,9.968118,-9.761065,6.049818,-7.679816,-8.906084,2.497039,-7.914171]],[[5.587073,-0.947789,-4.346841,6.624277,-5.820366,9.683543,3.741547,9.220961,9.557137,5.690841],[-1.678933,6.150899,-7.215191,2.854800,-9.099249,1.753668,3.536111,-6.723905,9.319936,-3.521473]],[[-0.196587,1.361409,-5.885055,2.748690,7.857358,6.771877,6.871307,-2.508624,-0.020673,5.242853],[-7.335746,-4.693109,-8.107710,1.215729,9.507599,-0.119065,5.675526,3.944643,-5.238851,1.629531]]], dtype='float64')
module1.set_input('var_315', input_315)
input_319= np.array([[[False,False,True,False,True,False,False,True,True,False],[False,False,False,False,False,False,False,False,True,False]],[[True,False,True,False,False,True,True,False,False,True],[True,False,True,False,False,False,False,False,True,True]],[[False,False,True,False,False,False,False,False,False,False],[False,True,False,False,False,True,True,True,True,True]],[[False,False,False,False,False,False,False,False,True,False],[True,True,False,True,False,False,True,False,False,True]],[[False,True,True,True,True,True,False,False,False,True],[False,True,False,False,True,False,False,True,True,True]],[[True,False,True,True,True,True,True,False,True,False],[False,False,True,True,True,False,False,True,False,False]],[[False,False,True,False,False,False,True,True,False,False],[False,True,False,True,True,False,False,False,False,False]],[[False,False,False,True,True,True,True,True,False,False],[False,False,False,True,True,True,False,False,False,False]],[[False,False,True,False,False,False,False,False,True,True],[False,True,True,False,True,True,True,False,False,True]],[[False,False,False,True,False,True,False,False,True,False],[False,True,False,True,True,False,False,False,True,True]],[[True,True,False,False,False,True,True,True,False,False],[True,False,False,True,True,False,False,True,False,True]]], dtype='bool')
module1.set_input('var_319', input_319)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_296, input_315, input_319, )
res3 = intrp3.evaluate()(input_296, input_315, input_319, )
res4 = intrp4.evaluate()(input_296, input_315, input_319, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
module5.set_input('var_296', input_296)
module5.set_input('var_315', input_315)
module5.set_input('var_319', input_319)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_296, input_315, input_319, )
res7 = intrp7.evaluate()(input_296, input_315, input_319, )
res8 = intrp8.evaluate()(input_296, input_315, input_319, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
module9.set_input('var_296', input_296)
module9.set_input('var_315', input_315)
module9.set_input('var_319', input_319)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_296, input_315, input_319, )
res11 = intrp11.evaluate()(input_296, input_315, input_319, )
res12 = intrp12.evaluate()(input_296, input_315, input_319, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
module13.set_input('var_296', input_296)
module13.set_input('var_315', input_315)
module13.set_input('var_319', input_319)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_296, input_315, input_319, )
res15 = intrp15.evaluate()(input_296, input_315, input_319, )
res16 = intrp16.evaluate()(input_296, input_315, input_319, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
module17.set_input('var_296', input_296)
module17.set_input('var_315', input_315)
module17.set_input('var_319', input_319)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_296, input_315, input_319, )
res19 = intrp19.evaluate()(input_296, input_315, input_319, )
res20 = intrp20.evaluate()(input_296, input_315, input_319, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
module21.set_input('var_296', input_296)
module21.set_input('var_315', input_315)
module21.set_input('var_319', input_319)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_296, input_315, input_319, )
res23 = intrp23.evaluate()(input_296, input_315, input_319, )
res24 = intrp24.evaluate()(input_296, input_315, input_319, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()

'''63: TVMFuncCall
62: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
61: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
60: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
59: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
58: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
57: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
56: tvm::transform::Pass::operator()(tvm::IRModule) const
55: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
54: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
53: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
52: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
51: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
50: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
49: tvm::transform::Pass::operator()(tvm::IRModule) const
48: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
47: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
46: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
45: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
44: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
43: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
42: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
41: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
40: _ZN3tvm5relay9transform22Devic
39: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
38: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
37: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
36: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
35: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
34: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
33: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
32: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
31: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
30: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
29: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
28: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
27: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
26: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::te::Tensor, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
25: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::runtime::ObjectRef, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
24: tvm::LowerWithPassList(tvm::IRModule, tvm::runtime::Array<tvm::transform::Pass, void>)
23: tvm::transform::Pass::operator()(tvm::IRModule) const
22: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
21: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
20: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
19: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: _ZNSt17_Function_handlerIFvN3tvm7
17: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
16: tvm::tir::DataTypeRewriter::operator()(tvm::tir::Stmt)
15: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
14: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::ForNode const*)
13: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::ForNode const*)
12: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
11: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
10: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::ForNode const*)
9: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::ForNode const*)
8: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
7: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
6: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::StoreNode const*)
5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
4: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
3: _ZThn16_N3tvm3tir16DataTyp
2: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
1: tvm::operator<<(tvm::PrimExpr, tvm::PrimExpr)
0: tvm::left_shift(tvm::PrimExpr, tvm::PrimExpr, tvm::Span)

'''