import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = ())#candidate|0|()|var|float32
uop_1 = relay.sqrt(var_0.astype('float32')) # shape=()
uop_3 = relay.erf(uop_1.astype('float32')) # shape=()
bop_5 = relay.logical_xor(uop_3.astype('uint64'), var_0.astype('uint64')) # shape=()
bop_8 = relay.floor_divide(uop_3.astype('float64'), bop_5.astype('float64')) # shape=()
bop_11 = relay.right_shift(bop_5.astype('uint8'), bop_8.astype('uint8')) # shape=()
var_14 = relay.var("var_14", dtype = "float32", shape = (7, 1, 4))#candidate|14|(7, 1, 4)|var|float32
bop_15 = relay.power(uop_1.astype('float64'), var_14.astype('float64')) # shape=(7, 1, 4)
output = relay.Tuple([bop_11,bop_15,])
output2 = relay.Tuple([bop_11,bop_15,])
func_18 = relay.Function([var_0,var_14,], output)
mod['func_18'] = func_18
mod = relay.transform.InferType()(mod)
var_19 = relay.var("var_19", dtype = "float32", shape = ())#candidate|19|()|var|float32
var_20 = relay.var("var_20", dtype = "float32", shape = (7, 1, 4))#candidate|20|(7, 1, 4)|var|float32
output = func_18(var_19,var_20,)
func_21 = relay.Function([var_19,var_20,], output)
mutated_mod['func_21'] = func_21
mutated_mod = relay.transform.InferType()(mutated_mod)
var_23 = relay.var("var_23", dtype = "float64", shape = (2, 11, 14))#candidate|23|(2, 11, 14)|var|float64
uop_24 = relay.atan(var_23.astype('float64')) # shape=(2, 11, 14)
bop_26 = relay.floor_mod(uop_24.astype('float64'), relay.reshape(var_23.astype('float64'), relay.shape_of(uop_24))) # shape=(2, 11, 14)
bop_29 = relay.subtract(var_23.astype('uint8'), relay.reshape(uop_24.astype('uint8'), relay.shape_of(var_23))) # shape=(2, 11, 14)
uop_32 = relay.atanh(var_23.astype('float64')) # shape=(2, 11, 14)
bop_34 = relay.logical_or(bop_29.astype('bool'), relay.reshape(uop_24.astype('bool'), relay.shape_of(bop_29))) # shape=(2, 11, 14)
uop_37 = relay.acos(var_23.astype('float32')) # shape=(2, 11, 14)
uop_39 = relay.acosh(var_23.astype('float32')) # shape=(2, 11, 14)
func_18_call = mod.get_global_var('func_18')
func_21_call = mutated_mod.get_global_var('func_21')
const_42 = relay.const(5.254459, dtype = "float32")#candidate|42|()|const|float32
const_43 = relay.const([[-4.167960,-8.953040],[7.861043,-0.558487],[0.330009,3.226437],[-6.016136,1.301517],[4.303876,1.885141],[-7.148170,-7.650766],[9.465880,-9.382328],[-7.876347,-5.166491],[2.642473,-3.060899],[4.500338,-9.979697],[-0.303619,4.108694],[-2.855054,1.987720],[0.871084,-4.350981],[9.660670,4.013582]], dtype = "float32")#candidate|43|(14, 2)|const|float32
call_41 = relay.TupleGetItem(func_18_call(relay.reshape(const_42.astype('float32'), []), relay.reshape(const_43.astype('float32'), [7, 1, 4]), ), 1)
call_44 = relay.TupleGetItem(func_21_call(relay.reshape(const_42.astype('float32'), []), relay.reshape(const_43.astype('float32'), [7, 1, 4]), ), 1)
uop_45 = relay.log(bop_29.astype('float64')) # shape=(2, 11, 14)
uop_47 = relay.sinh(uop_45.astype('float32')) # shape=(2, 11, 14)
bop_49 = relay.logical_xor(uop_47.astype('int32'), relay.reshape(uop_32.astype('int32'), relay.shape_of(uop_47))) # shape=(2, 11, 14)
func_18_call = mod.get_global_var('func_18')
func_21_call = mutated_mod.get_global_var('func_21')
call_52 = relay.TupleGetItem(func_18_call(relay.reshape(const_42.astype('float32'), []), relay.reshape(const_43.astype('float32'), [7, 1, 4]), ), 0)
call_53 = relay.TupleGetItem(func_21_call(relay.reshape(const_42.astype('float32'), []), relay.reshape(const_43.astype('float32'), [7, 1, 4]), ), 0)
uop_54 = relay.sin(bop_49.astype('float32')) # shape=(2, 11, 14)
uop_56 = relay.exp(const_43.astype('float32')) # shape=(14, 2)
func_18_call = mod.get_global_var('func_18')
func_21_call = mutated_mod.get_global_var('func_21')
call_58 = relay.TupleGetItem(func_18_call(relay.reshape(call_52.astype('float32'), []), relay.reshape(uop_56.astype('float32'), [7, 1, 4]), ), 0)
call_59 = relay.TupleGetItem(func_21_call(relay.reshape(call_52.astype('float32'), []), relay.reshape(uop_56.astype('float32'), [7, 1, 4]), ), 0)
bop_60 = relay.equal(uop_54.astype('bool'), relay.reshape(bop_49.astype('bool'), relay.shape_of(uop_54))) # shape=(2, 11, 14)
var_63 = relay.var("var_63", dtype = "bool", shape = (2, 11, 14))#candidate|63|(2, 11, 14)|var|bool
bop_64 = relay.logical_xor(bop_60.astype('uint64'), relay.reshape(var_63.astype('uint64'), relay.shape_of(bop_60))) # shape=(2, 11, 14)
uop_67 = relay.acos(uop_47.astype('float64')) # shape=(2, 11, 14)
uop_69 = relay.erf(uop_47.astype('float32')) # shape=(2, 11, 14)
uop_71 = relay.acos(uop_54.astype('float64')) # shape=(2, 11, 14)
var_73 = relay.var("var_73", dtype = "float64", shape = (2, 11, 14))#candidate|73|(2, 11, 14)|var|float64
bop_74 = relay.add(uop_45.astype('uint32'), relay.reshape(var_73.astype('uint32'), relay.shape_of(uop_45))) # shape=(2, 11, 14)
bop_77 = relay.bitwise_or(uop_71.astype('int16'), relay.reshape(uop_47.astype('int16'), relay.shape_of(uop_71))) # shape=(2, 11, 14)
bop_80 = relay.mod(bop_49.astype('float32'), relay.reshape(bop_64.astype('float32'), relay.shape_of(bop_49))) # shape=(2, 11, 14)
uop_83 = relay.asin(uop_71.astype('float64')) # shape=(2, 11, 14)
bop_85 = relay.logical_xor(uop_83.astype('int8'), relay.reshape(var_23.astype('int8'), relay.shape_of(uop_83))) # shape=(2, 11, 14)
uop_88 = relay.log10(uop_83.astype('float32')) # shape=(2, 11, 14)
bop_90 = relay.right_shift(uop_88.astype('int64'), relay.reshape(uop_47.astype('int64'), relay.shape_of(uop_88))) # shape=(2, 11, 14)
uop_93 = relay.asinh(uop_88.astype('float32')) # shape=(2, 11, 14)
bop_95 = relay.greater_equal(bop_74.astype('bool'), relay.reshape(bop_64.astype('bool'), relay.shape_of(bop_74))) # shape=(2, 11, 14)
func_18_call = mod.get_global_var('func_18')
func_21_call = mutated_mod.get_global_var('func_21')
call_98 = relay.TupleGetItem(func_18_call(relay.reshape(const_42.astype('float32'), []), relay.reshape(uop_56.astype('float32'), [7, 1, 4]), ), 1)
call_99 = relay.TupleGetItem(func_21_call(relay.reshape(const_42.astype('float32'), []), relay.reshape(uop_56.astype('float32'), [7, 1, 4]), ), 1)
bop_100 = relay.greater_equal(uop_88.astype('bool'), relay.reshape(bop_85.astype('bool'), relay.shape_of(uop_88))) # shape=(2, 11, 14)
bop_103 = relay.bitwise_xor(uop_93.astype('uint8'), relay.reshape(uop_39.astype('uint8'), relay.shape_of(uop_93))) # shape=(2, 11, 14)
uop_106 = relay.acosh(uop_88.astype('float32')) # shape=(2, 11, 14)
var_108 = relay.var("var_108", dtype = "int8", shape = (2, 11, 14))#candidate|108|(2, 11, 14)|var|int8
bop_109 = relay.not_equal(bop_85.astype('bool'), relay.reshape(var_108.astype('bool'), relay.shape_of(bop_85))) # shape=(2, 11, 14)
bop_112 = relay.floor_divide(uop_106.astype('float64'), relay.reshape(bop_60.astype('float64'), relay.shape_of(uop_106))) # shape=(2, 11, 14)
bop_115 = relay.divide(uop_93.astype('float64'), relay.reshape(bop_109.astype('float64'), relay.shape_of(uop_93))) # shape=(2, 11, 14)
uop_118 = relay.acosh(uop_83.astype('float64')) # shape=(2, 11, 14)
bop_120 = relay.greater_equal(uop_106.astype('bool'), relay.reshape(uop_93.astype('bool'), relay.shape_of(uop_106))) # shape=(2, 11, 14)
bop_123 = relay.maximum(uop_106.astype('int16'), relay.reshape(bop_103.astype('int16'), relay.shape_of(uop_106))) # shape=(2, 11, 14)
uop_126 = relay.log10(uop_71.astype('float64')) # shape=(2, 11, 14)
var_128 = relay.var("var_128", dtype = "bool", shape = (2, 11, 14))#candidate|128|(2, 11, 14)|var|bool
bop_129 = relay.divide(bop_120.astype('float64'), relay.reshape(var_128.astype('float64'), relay.shape_of(bop_120))) # shape=(2, 11, 14)
bop_132 = relay.bitwise_and(bop_123.astype('int16'), relay.reshape(bop_100.astype('int16'), relay.shape_of(bop_123))) # shape=(2, 11, 14)
bop_135 = relay.power(bop_90.astype('float64'), relay.reshape(bop_100.astype('float64'), relay.shape_of(bop_90))) # shape=(2, 11, 14)
uop_138 = relay.atan(bop_132.astype('float32')) # shape=(2, 11, 14)
bop_140 = relay.equal(uop_138.astype('bool'), relay.reshape(bop_80.astype('bool'), relay.shape_of(uop_138))) # shape=(2, 11, 14)
func_18_call = mod.get_global_var('func_18')
func_21_call = mutated_mod.get_global_var('func_21')
call_143 = relay.TupleGetItem(func_18_call(relay.reshape(const_42.astype('float32'), []), relay.reshape(uop_56.astype('float32'), [7, 1, 4]), ), 0)
call_144 = relay.TupleGetItem(func_21_call(relay.reshape(const_42.astype('float32'), []), relay.reshape(uop_56.astype('float32'), [7, 1, 4]), ), 0)
var_145 = relay.var("var_145", dtype = "bool", shape = (2, 11, 14))#candidate|145|(2, 11, 14)|var|bool
bop_146 = relay.divide(bop_140.astype('float32'), relay.reshape(var_145.astype('float32'), relay.shape_of(bop_140))) # shape=(2, 11, 14)
uop_149 = relay.rsqrt(bop_146.astype('float32')) # shape=(2, 11, 14)
bop_151 = relay.greater(uop_138.astype('bool'), relay.reshape(bop_34.astype('bool'), relay.shape_of(uop_138))) # shape=(2, 11, 14)
output = relay.Tuple([bop_26,uop_37,call_41,const_42,call_52,uop_56,call_58,uop_67,uop_69,bop_77,bop_95,call_98,bop_112,bop_115,uop_118,uop_126,bop_129,bop_135,call_143,uop_149,bop_151,])
output2 = relay.Tuple([bop_26,uop_37,call_44,const_42,call_53,uop_56,call_59,uop_67,uop_69,bop_77,bop_95,call_99,bop_112,bop_115,uop_118,uop_126,bop_129,bop_135,call_144,uop_149,bop_151,])
func_154 = relay.Function([var_23,var_63,var_73,var_108,var_128,var_145,], output)
mod['func_154'] = func_154
mod = relay.transform.InferType()(mod)
var_155 = relay.var("var_155", dtype = "float64", shape = (2, 11, 14))#candidate|155|(2, 11, 14)|var|float64
var_156 = relay.var("var_156", dtype = "bool", shape = (2, 11, 14))#candidate|156|(2, 11, 14)|var|bool
var_157 = relay.var("var_157", dtype = "float64", shape = (2, 11, 14))#candidate|157|(2, 11, 14)|var|float64
var_158 = relay.var("var_158", dtype = "int8", shape = (2, 11, 14))#candidate|158|(2, 11, 14)|var|int8
var_159 = relay.var("var_159", dtype = "bool", shape = (2, 11, 14))#candidate|159|(2, 11, 14)|var|bool
var_160 = relay.var("var_160", dtype = "bool", shape = (2, 11, 14))#candidate|160|(2, 11, 14)|var|bool
output = func_154(var_155,var_156,var_157,var_158,var_159,var_160,)
func_161 = relay.Function([var_155,var_156,var_157,var_158,var_159,var_160,], output)
mutated_mod['func_161'] = func_161
mutated_mod = relay.transform.InferType()(mutated_mod)
var_163 = relay.var("var_163", dtype = "uint16", shape = ())#candidate|163|()|var|uint16
var_164 = relay.var("var_164", dtype = "uint16", shape = (3,))#candidate|164|(3,)|var|uint16
bop_165 = relay.minimum(var_163.astype('uint16'), var_164.astype('uint16')) # shape=(3,)
uop_168 = relay.tan(var_164.astype('float64')) # shape=(3,)
uop_170 = relay.atan(uop_168.astype('float32')) # shape=(3,)
const_172 = relay.const([-0.343652,-1.703993,-9.782923], dtype = "float32")#candidate|172|(3,)|const|float32
bop_173 = relay.greater_equal(uop_170.astype('bool'), relay.reshape(const_172.astype('bool'), relay.shape_of(uop_170))) # shape=(3,)
bop_176 = relay.floor_mod(const_172.astype('float32'), relay.reshape(uop_168.astype('float32'), relay.shape_of(const_172))) # shape=(3,)
bop_179 = relay.less(uop_170.astype('bool'), relay.reshape(const_172.astype('bool'), relay.shape_of(uop_170))) # shape=(3,)
bop_182 = relay.minimum(uop_170.astype('int32'), relay.reshape(bop_173.astype('int32'), relay.shape_of(uop_170))) # shape=(3,)
func_154_call = mod.get_global_var('func_154')
func_161_call = mutated_mod.get_global_var('func_161')
var_186 = relay.var("var_186", dtype = "float64", shape = (308,))#candidate|186|(308,)|var|float64
call_185 = relay.TupleGetItem(func_154_call(relay.reshape(var_186.astype('float64'), [2, 11, 14]), relay.reshape(var_186.astype('bool'), [2, 11, 14]), relay.reshape(var_186.astype('float64'), [2, 11, 14]), relay.reshape(var_186.astype('int8'), [2, 11, 14]), relay.reshape(var_186.astype('bool'), [2, 11, 14]), relay.reshape(var_186.astype('bool'), [2, 11, 14]), ), 15)
call_187 = relay.TupleGetItem(func_161_call(relay.reshape(var_186.astype('float64'), [2, 11, 14]), relay.reshape(var_186.astype('bool'), [2, 11, 14]), relay.reshape(var_186.astype('float64'), [2, 11, 14]), relay.reshape(var_186.astype('int8'), [2, 11, 14]), relay.reshape(var_186.astype('bool'), [2, 11, 14]), relay.reshape(var_186.astype('bool'), [2, 11, 14]), ), 15)
bop_188 = relay.add(uop_170.astype('uint8'), relay.reshape(bop_173.astype('uint8'), relay.shape_of(uop_170))) # shape=(3,)
bop_191 = relay.less(bop_173.astype('bool'), relay.reshape(bop_182.astype('bool'), relay.shape_of(bop_173))) # shape=(3,)
bop_194 = relay.mod(bop_191.astype('float32'), relay.reshape(bop_182.astype('float32'), relay.shape_of(bop_191))) # shape=(3,)
uop_197 = relay.log10(bop_194.astype('float32')) # shape=(3,)
uop_199 = relay.sin(bop_179.astype('float64')) # shape=(3,)
bop_201 = relay.minimum(bop_179.astype('float32'), relay.reshape(bop_165.astype('float32'), relay.shape_of(bop_179))) # shape=(3,)
bop_204 = relay.power(var_186.astype('float64'), relay.reshape(call_185.astype('float64'), relay.shape_of(var_186))) # shape=(308,)
bop_207 = relay.power(var_186.astype('float64'), relay.reshape(call_187.astype('float64'), relay.shape_of(var_186))) # shape=(308,)
var_208 = relay.var("var_208", dtype = "bool", shape = (3,))#candidate|208|(3,)|var|bool
bop_209 = relay.less(bop_191.astype('bool'), relay.reshape(var_208.astype('bool'), relay.shape_of(bop_191))) # shape=(3,)
bop_212 = relay.equal(uop_197.astype('bool'), relay.reshape(var_164.astype('bool'), relay.shape_of(uop_197))) # shape=(3,)
var_215 = relay.var("var_215", dtype = "float64", shape = (3,))#candidate|215|(3,)|var|float64
bop_216 = relay.right_shift(uop_199.astype('uint64'), relay.reshape(var_215.astype('uint64'), relay.shape_of(uop_199))) # shape=(3,)
bop_219 = relay.divide(var_208.astype('float64'), relay.reshape(var_215.astype('float64'), relay.shape_of(var_208))) # shape=(3,)
var_222 = relay.var("var_222", dtype = "float64", shape = (3,))#candidate|222|(3,)|var|float64
bop_223 = relay.equal(uop_168.astype('bool'), relay.reshape(var_222.astype('bool'), relay.shape_of(uop_168))) # shape=(3,)
bop_226 = relay.right_shift(uop_170.astype('uint8'), relay.reshape(bop_219.astype('uint8'), relay.shape_of(uop_170))) # shape=(3,)
bop_229 = relay.greater(uop_197.astype('bool'), relay.reshape(bop_219.astype('bool'), relay.shape_of(uop_197))) # shape=(3,)
bop_232 = relay.floor_divide(bop_229.astype('float32'), relay.reshape(bop_194.astype('float32'), relay.shape_of(bop_229))) # shape=(3,)
bop_235 = relay.minimum(uop_197.astype('int16'), relay.reshape(var_222.astype('int16'), relay.shape_of(uop_197))) # shape=(3,)
func_154_call = mod.get_global_var('func_154')
func_161_call = mutated_mod.get_global_var('func_161')
call_238 = relay.TupleGetItem(func_154_call(relay.reshape(var_186.astype('float64'), [2, 11, 14]), relay.reshape(call_185.astype('bool'), [2, 11, 14]), relay.reshape(call_185.astype('float64'), [2, 11, 14]), relay.reshape(bop_204.astype('int8'), [2, 11, 14]), relay.reshape(bop_204.astype('bool'), [2, 11, 14]), relay.reshape(bop_204.astype('bool'), [2, 11, 14]), ), 10)
call_239 = relay.TupleGetItem(func_161_call(relay.reshape(var_186.astype('float64'), [2, 11, 14]), relay.reshape(call_185.astype('bool'), [2, 11, 14]), relay.reshape(call_185.astype('float64'), [2, 11, 14]), relay.reshape(bop_204.astype('int8'), [2, 11, 14]), relay.reshape(bop_204.astype('bool'), [2, 11, 14]), relay.reshape(bop_204.astype('bool'), [2, 11, 14]), ), 10)
uop_240 = relay.exp(bop_229.astype('float64')) # shape=(3,)
func_18_call = mod.get_global_var('func_18')
func_21_call = mutated_mod.get_global_var('func_21')
const_243 = relay.const([-7.496781,-4.423459,1.581309,2.234709,-7.904000,9.061684,-7.916436,9.037947,-6.604431,2.198535,8.927809,-4.560519,-9.121935,-0.199372,-9.599817,0.200167,-9.581846,7.915181,6.450548,-8.455773,6.547417,-3.533098,-3.333834,-4.308501,0.232840,0.279161,5.825178,-3.108465], dtype = "float32")#candidate|243|(28,)|const|float32
call_242 = relay.TupleGetItem(func_18_call(relay.reshape(var_163.astype('float32'), []), relay.reshape(const_243.astype('float32'), [7, 1, 4]), ), 0)
call_244 = relay.TupleGetItem(func_21_call(relay.reshape(var_163.astype('float32'), []), relay.reshape(const_243.astype('float32'), [7, 1, 4]), ), 0)
bop_245 = relay.less(uop_240.astype('bool'), relay.reshape(bop_232.astype('bool'), relay.shape_of(uop_240))) # shape=(3,)
bop_248 = relay.divide(bop_245.astype('float32'), relay.reshape(bop_235.astype('float32'), relay.shape_of(bop_245))) # shape=(3,)
uop_251 = relay.exp(uop_240.astype('float32')) # shape=(3,)
bop_253 = relay.logical_xor(bop_245.astype('uint64'), relay.reshape(bop_235.astype('uint64'), relay.shape_of(bop_245))) # shape=(3,)
var_256 = relay.var("var_256", dtype = "float32", shape = (3,))#candidate|256|(3,)|var|float32
bop_257 = relay.right_shift(uop_251.astype('int8'), relay.reshape(var_256.astype('int8'), relay.shape_of(uop_251))) # shape=(3,)
output = relay.Tuple([bop_176,bop_188,bop_201,bop_204,bop_209,bop_212,bop_216,bop_223,bop_226,call_238,call_242,const_243,bop_248,bop_253,bop_257,])
output2 = relay.Tuple([bop_176,bop_188,bop_201,bop_207,bop_209,bop_212,bop_216,bop_223,bop_226,call_239,call_244,const_243,bop_248,bop_253,bop_257,])
func_260 = relay.Function([var_163,var_164,var_186,var_208,var_215,var_222,var_256,], output)
mod['func_260'] = func_260
mod = relay.transform.InferType()(mod)
var_261 = relay.var("var_261", dtype = "uint16", shape = ())#candidate|261|()|var|uint16
var_262 = relay.var("var_262", dtype = "uint16", shape = (3,))#candidate|262|(3,)|var|uint16
var_263 = relay.var("var_263", dtype = "float64", shape = (308,))#candidate|263|(308,)|var|float64
var_264 = relay.var("var_264", dtype = "bool", shape = (3,))#candidate|264|(3,)|var|bool
var_265 = relay.var("var_265", dtype = "float64", shape = (3,))#candidate|265|(3,)|var|float64
var_266 = relay.var("var_266", dtype = "float64", shape = (3,))#candidate|266|(3,)|var|float64
var_267 = relay.var("var_267", dtype = "float32", shape = (3,))#candidate|267|(3,)|var|float32
output = func_260(var_261,var_262,var_263,var_264,var_265,var_266,var_267,)
func_268 = relay.Function([var_261,var_262,var_263,var_264,var_265,var_266,var_267,], output)
mutated_mod['func_268'] = func_268
mutated_mod = relay.transform.InferType()(mutated_mod)
var_270 = relay.var("var_270", dtype = "float32", shape = (2, 16))#candidate|270|(2, 16)|var|float32
var_271 = relay.var("var_271", dtype = "float32", shape = (2, 16))#candidate|271|(2, 16)|var|float32
bop_272 = relay.not_equal(var_270.astype('bool'), relay.reshape(var_271.astype('bool'), relay.shape_of(var_270))) # shape=(2, 16)
bop_275 = relay.subtract(var_271.astype('float32'), relay.reshape(var_270.astype('float32'), relay.shape_of(var_271))) # shape=(2, 16)
uop_278 = relay.sin(var_271.astype('float32')) # shape=(2, 16)
func_18_call = mod.get_global_var('func_18')
func_21_call = mutated_mod.get_global_var('func_21')
const_281 = relay.const(-9.792325, dtype = "float32")#candidate|281|()|const|float32
const_282 = relay.const([5.125560,-6.170059,-0.482769,-9.861042,-9.848031,-8.845388,-6.992048,5.761694,-1.050886,3.640122,-2.776098,-5.598131,-4.245254,7.944944,6.124807,8.961404,-1.786928,-5.970622,-6.969378,-7.856566,2.194022,4.116184,4.903511,-7.587142,3.311187,5.685914,-9.488703,2.077145], dtype = "float32")#candidate|282|(28,)|const|float32
call_280 = relay.TupleGetItem(func_18_call(relay.reshape(const_281.astype('float32'), []), relay.reshape(const_282.astype('float32'), [7, 1, 4]), ), 1)
call_283 = relay.TupleGetItem(func_21_call(relay.reshape(const_281.astype('float32'), []), relay.reshape(const_282.astype('float32'), [7, 1, 4]), ), 1)
uop_284 = relay.erf(call_280.astype('float32')) # shape=(7, 1, 4)
uop_286 = relay.erf(call_283.astype('float32')) # shape=(7, 1, 4)
uop_287 = relay.asinh(uop_284.astype('float64')) # shape=(7, 1, 4)
uop_289 = relay.asinh(uop_286.astype('float64')) # shape=(7, 1, 4)
bop_290 = relay.bitwise_or(uop_287.astype('int16'), relay.reshape(const_282.astype('int16'), relay.shape_of(uop_287))) # shape=(7, 1, 4)
bop_293 = relay.bitwise_or(uop_289.astype('int16'), relay.reshape(const_282.astype('int16'), relay.shape_of(uop_289))) # shape=(7, 1, 4)
bop_294 = relay.right_shift(uop_284.astype('int32'), const_281.astype('int32')) # shape=(7, 1, 4)
bop_297 = relay.right_shift(uop_286.astype('int32'), const_281.astype('int32')) # shape=(7, 1, 4)
uop_298 = relay.sqrt(uop_278.astype('float64')) # shape=(2, 16)
uop_300 = relay.sqrt(uop_284.astype('float32')) # shape=(7, 1, 4)
uop_302 = relay.sqrt(uop_286.astype('float32')) # shape=(7, 1, 4)
bop_303 = relay.floor_divide(bop_272.astype('float32'), relay.reshape(uop_298.astype('float32'), relay.shape_of(bop_272))) # shape=(2, 16)
uop_306 = relay.cos(const_282.astype('float32')) # shape=(28,)
uop_308 = relay.rsqrt(uop_298.astype('float64')) # shape=(2, 16)
var_310 = relay.var("var_310", dtype = "int16", shape = (7, 7, 4))#candidate|310|(7, 7, 4)|var|int16
bop_311 = relay.less(bop_290.astype('bool'), var_310.astype('bool')) # shape=(7, 7, 4)
bop_314 = relay.less(bop_293.astype('bool'), var_310.astype('bool')) # shape=(7, 7, 4)
bop_315 = relay.not_equal(uop_306.astype('bool'), relay.reshape(uop_287.astype('bool'), relay.shape_of(uop_306))) # shape=(28,)
bop_318 = relay.not_equal(uop_306.astype('bool'), relay.reshape(uop_289.astype('bool'), relay.shape_of(uop_306))) # shape=(28,)
bop_319 = relay.floor_mod(uop_284.astype('float32'), relay.reshape(uop_300.astype('float32'), relay.shape_of(uop_284))) # shape=(7, 1, 4)
bop_322 = relay.floor_mod(uop_286.astype('float32'), relay.reshape(uop_302.astype('float32'), relay.shape_of(uop_286))) # shape=(7, 1, 4)
const_323 = relay.const([[[2,1,-9,-1],[3,-4,5,-2],[6,5,8,-10],[3,8,4,5],[-3,1,5,8],[-3,-8,8,7],[9,-5,7,2],[1,-1,-6,-10],[-3,1,-4,-5],[-3,-5,-5,4],[4,1,-7,3],[-4,2,1,9],[6,1,10,6],[8,-6,-6,7]],[[10,-3,-2,6],[1,6,-1,-7],[4,6,3,-9],[7,-6,-4,1],[10,10,10,-7],[-3,4,-7,-2],[8,-7,1,-4],[1,-9,2,8],[6,5,5,9],[-5,3,-4,7],[4,3,-9,-4],[-4,5,5,-9],[3,-8,-5,6],[10,2,-6,-5]],[[2,-6,4,3],[-10,-5,2,-7],[7,-3,4,2],[1,-9,-2,7],[-4,-9,2,-10],[10,9,-1,-9],[4,1,-3,4],[-7,-3,9,7],[5,-6,5,1],[-3,-9,9,-3],[2,-10,6,-1],[9,4,-7,5],[-4,-1,9,8],[4,-6,-7,-5]],[[2,-6,-1,3],[-2,-10,-7,-3],[6,-4,7,6],[-9,-2,1,7],[-3,2,-9,-4],[2,-2,-8,10],[8,-10,-5,-6],[-9,3,6,-3],[-3,4,10,5],[-3,8,1,-7],[1,-5,6,-1],[10,2,3,8],[10,8,-2,-1],[1,8,9,-2]],[[-5,-9,8,5],[-3,5,-4,-2],[5,-6,4,-3],[1,6,9,2],[-6,-6,-10,-2],[9,1,-10,-2],[2,1,-7,10],[6,-8,7,-8],[1,-5,4,-8],[-5,-8,9,-10],[-8,-8,5,-3],[-7,5,-10,-4],[4,4,7,1],[-10,-4,9,-1]],[[-5,9,8,-1],[2,-6,9,-5],[-9,3,10,7],[2,-8,-7,7],[-7,-4,-8,-9],[-10,-3,7,2],[-7,-4,-8,9],[-4,3,8,-3],[-6,-2,-1,5],[8,-2,5,10],[8,3,5,-10],[-10,10,10,-7],[-10,1,9,-5],[-3,1,1,-4]],[[-7,9,-8,1],[-9,-8,-6,-7],[3,10,-3,1],[3,6,7,-5],[6,8,-10,-3],[-2,1,-5,6],[6,2,-4,5],[-8,1,2,10],[9,-1,-7,-1],[-5,-8,-9,-2],[4,-4,8,-6],[-4,-2,3,4],[9,5,2,-8],[-6,-1,3,-2]]], dtype = "int32")#candidate|323|(7, 14, 4)|const|int32
bop_324 = relay.left_shift(bop_294.astype('int64'), const_323.astype('int64')) # shape=(7, 14, 4)
bop_327 = relay.left_shift(bop_297.astype('int64'), const_323.astype('int64')) # shape=(7, 14, 4)
uop_328 = relay.sigmoid(uop_308.astype('float64')) # shape=(2, 16)
bop_330 = relay.multiply(uop_308.astype('uint8'), relay.reshape(uop_298.astype('uint8'), relay.shape_of(uop_308))) # shape=(2, 16)
uop_333 = relay.acos(uop_328.astype('float64')) # shape=(2, 16)
var_335 = relay.var("var_335", dtype = "float64", shape = (2, 16))#candidate|335|(2, 16)|var|float64
bop_336 = relay.bitwise_and(uop_308.astype('uint8'), relay.reshape(var_335.astype('uint8'), relay.shape_of(uop_308))) # shape=(2, 16)
bop_339 = relay.bitwise_xor(uop_328.astype('uint64'), relay.reshape(uop_278.astype('uint64'), relay.shape_of(uop_328))) # shape=(2, 16)
output = relay.Tuple([bop_275,bop_303,bop_311,bop_315,bop_319,bop_324,bop_330,uop_333,bop_336,bop_339,])
output2 = relay.Tuple([bop_275,bop_303,bop_314,bop_318,bop_322,bop_327,bop_330,uop_333,bop_336,bop_339,])
F = relay.Function([var_270,var_271,var_310,var_335,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_270,var_271,var_310,var_335,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_270= np.array([[5.641257,-9.819224,9.182585,-6.358813,-9.872806,-1.017385,-0.899431,4.793269,-1.527297,1.062181,-8.645018,-6.764340,4.055177,3.622328,-7.676130,-9.549047],[8.435825,4.013475,0.808820,3.298354,-2.735660,-6.800121,-5.557541,1.885147,-3.545593,4.475748,7.414636,6.132805,3.227225,-2.749535,2.107145,-6.806011]], dtype='float32')
module1.set_input('var_270', input_270)
input_271= np.array([[8.480195,3.514776,2.153371,-2.228125,-1.398826,-4.924544,-1.711922,5.761637,-0.341731,9.016014,-4.850777,-3.959374,-6.413618,-5.637981,1.174346,-0.155711],[-2.900006,-8.155921,-2.338111,7.371472,8.281366,5.913445,-5.269102,-5.810971,-7.955681,-0.532869,8.672786,-5.639565,0.798462,7.315891,2.331234,8.629139]], dtype='float32')
module1.set_input('var_271', input_271)
input_310= np.array([[[6,3,-4,8],[9,-5,2,-9],[-10,8,4,4],[-8,-1,5,-9],[2,4,10,-10],[-10,5,10,-10],[-10,-10,4,-8]],[[-9,1,9,-4],[3,8,10,4],[2,-1,3,3],[-2,6,10,-2],[3,10,5,-4],[4,2,10,5],[3,-4,-9,-10]],[[1,1,-9,10],[-6,5,-6,8],[1,-3,5,-4],[-6,-7,-5,-8],[-2,-10,9,7],[10,-7,-3,6],[4,-6,9,-9]],[[8,10,2,2],[4,-9,3,8],[-7,2,9,-3],[-9,-6,-1,-3],[-1,-2,10,9],[7,-7,-1,6],[2,-8,-5,-8]],[[4,-5,8,-1],[1,-2,-7,-3],[8,-7,-8,6],[10,-3,-9,-1],[4,5,4,-1],[-9,-3,3,-5],[9,9,-6,7]],[[1,10,10,2],[-7,-6,-4,5],[-7,2,-6,10],[-8,3,5,9],[-2,7,-2,6],[7,2,8,-5],[-4,6,5,-5]],[[6,-6,-10,7],[5,3,-5,9],[-2,3,6,4],[8,-2,-7,-3],[-7,-4,-5,-8],[-4,-6,-10,1],[5,2,6,1]]], dtype='int16')
module1.set_input('var_310', input_310)
input_335= np.array([[-7.447954,-1.994926,4.173203,-6.439141,-7.881515,9.139947,-1.550794,-7.372273,3.867166,9.958820,3.650764,8.948245,-4.754995,-5.253880,-9.907032,1.618398],[7.832188,7.721622,3.964990,-6.430582,-1.442374,0.006292,1.490206,1.900983,3.126610,-8.857499,3.643552,-0.766909,-3.614661,7.540103,7.066797,1.496090]], dtype='float64')
module1.set_input('var_335', input_335)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_270, input_271, input_310, input_335, )
res3 = intrp3.evaluate()(input_270, input_271, input_310, input_335, )
res4 = intrp4.evaluate()(input_270, input_271, input_310, input_335, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
module5.set_input('var_270', input_270)
module5.set_input('var_271', input_271)
module5.set_input('var_310', input_310)
module5.set_input('var_335', input_335)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_270, input_271, input_310, input_335, )
res7 = intrp7.evaluate()(input_270, input_271, input_310, input_335, )
res8 = intrp8.evaluate()(input_270, input_271, input_310, input_335, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
module9.set_input('var_270', input_270)
module9.set_input('var_271', input_271)
module9.set_input('var_310', input_310)
module9.set_input('var_335', input_335)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_270, input_271, input_310, input_335, )
res11 = intrp11.evaluate()(input_270, input_271, input_310, input_335, )
res12 = intrp12.evaluate()(input_270, input_271, input_310, input_335, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
module13.set_input('var_270', input_270)
module13.set_input('var_271', input_271)
module13.set_input('var_310', input_310)
module13.set_input('var_335', input_335)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_270, input_271, input_310, input_335, )
res15 = intrp15.evaluate()(input_270, input_271, input_310, input_335, )
res16 = intrp16.evaluate()(input_270, input_271, input_310, input_335, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
module17.set_input('var_270', input_270)
module17.set_input('var_271', input_271)
module17.set_input('var_310', input_310)
module17.set_input('var_335', input_335)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_270, input_271, input_310, input_335, )
res19 = intrp19.evaluate()(input_270, input_271, input_310, input_335, )
res20 = intrp20.evaluate()(input_270, input_271, input_310, input_335, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
module21.set_input('var_270', input_270)
module21.set_input('var_271', input_271)
module21.set_input('var_310', input_310)
module21.set_input('var_335', input_335)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_270, input_271, input_310, input_335, )
res23 = intrp23.evaluate()(input_270, input_271, input_310, input_335, )
res24 = intrp24.evaluate()(input_270, input_271, input_310, input_335, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()

'''73: TVMFuncCall
72: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
71: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
70: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
69: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
68: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
67: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
66: tvm::transform::Pass::operator()(tvm::IRModule) const
65: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
64: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
63: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
62: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
61: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
60: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
59: tvm::transform::Pass::operator()(tvm::IRModule) const
58: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
57: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
56: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
55: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
54: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
53: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
52: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
51: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
50: _ZN3tvm5relay9transform22Devic
49: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
48: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
47: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
46: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
45: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
44: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
43: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
42: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
41: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
40: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
39: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
38: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
37: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
36: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::te::Tensor, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
35: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::runtime::ObjectRef, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
34: tvm::LowerWithPassList(tvm::IRModule, tvm::runtime::Array<tvm::transform::Pass, void>)
33: tvm::transform::Pass::operator()(tvm::IRModule) const
32: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
31: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
30: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
29: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
28: _ZNSt17_Function_handlerIFvN3tvm7
27: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
26: tvm::tir::DataTypeRewriter::operator()(tvm::tir::Stmt)
25: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
24: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::ForNode const*)
23: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::ForNode const*)
22: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
21: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
20: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::ForNode const*)
19: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::ForNode const*)
18: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
17: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
16: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::StoreNode const*)
15: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
14: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
13: _ZThn16_N3tvm3tir16DataTyp
12: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
11: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CallNode const*)
10: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
9: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS
8: _ZThn16_N3tvm3tir16DataTyp
7: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CastNode const*)
6: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CastNode const*)
5: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
4: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
3: _ZThn16_N3tvm3tir16DataTyp
2: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
1: tvm::operator>>(tvm::PrimExpr, tvm::PrimExpr)
0: tvm::right_shift(tvm::PrimExpr, tvm::PrimExpr, tvm::Span)

'''