import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (10,))#candidate|0|(10,)|var|float64
uop_1 = relay.sqrt(var_0.astype('float64')) # shape=(10,)
bop_3 = relay.subtract(uop_1.astype('int8'), relay.reshape(var_0.astype('int8'), relay.shape_of(uop_1))) # shape=(10,)
bop_6 = relay.right_shift(var_0.astype('uint64'), relay.reshape(uop_1.astype('uint64'), relay.shape_of(var_0))) # shape=(10,)
var_9 = relay.var("var_9", dtype = "float64", shape = (10,))#candidate|9|(10,)|var|float64
bop_10 = relay.multiply(var_0.astype('uint16'), relay.reshape(var_9.astype('uint16'), relay.shape_of(var_0))) # shape=(10,)
uop_13 = relay.tan(bop_3.astype('float32')) # shape=(10,)
uop_15 = relay.cosh(uop_1.astype('float64')) # shape=(10,)
uop_17 = relay.atan(uop_1.astype('float64')) # shape=(10,)
uop_19 = relay.acosh(uop_1.astype('float64')) # shape=(10,)
uop_21 = relay.tan(var_0.astype('float32')) # shape=(10,)
uop_23 = relay.acos(uop_15.astype('float32')) # shape=(10,)
bop_25 = relay.floor_mod(uop_23.astype('float32'), relay.reshape(bop_3.astype('float32'), relay.shape_of(uop_23))) # shape=(10,)
bop_28 = relay.logical_xor(uop_23.astype('int16'), relay.reshape(uop_17.astype('int16'), relay.shape_of(uop_23))) # shape=(10,)
uop_31 = relay.log2(bop_6.astype('float32')) # shape=(10,)
uop_33 = relay.erf(uop_15.astype('float32')) # shape=(10,)
var_35 = relay.var("var_35", dtype = "float32", shape = (10,))#candidate|35|(10,)|var|float32
bop_36 = relay.bitwise_xor(uop_13.astype('uint8'), relay.reshape(var_35.astype('uint8'), relay.shape_of(uop_13))) # shape=(10,)
var_39 = relay.var("var_39", dtype = "uint8", shape = (10,))#candidate|39|(10,)|var|uint8
bop_40 = relay.floor_mod(bop_36.astype('float32'), relay.reshape(var_39.astype('float32'), relay.shape_of(bop_36))) # shape=(10,)
bop_43 = relay.maximum(uop_1.astype('uint8'), relay.reshape(var_9.astype('uint8'), relay.shape_of(uop_1))) # shape=(10,)
output = relay.Tuple([bop_10,uop_19,uop_21,bop_25,bop_28,uop_31,uop_33,bop_40,bop_43,])
output2 = relay.Tuple([bop_10,uop_19,uop_21,bop_25,bop_28,uop_31,uop_33,bop_40,bop_43,])
func_46 = relay.Function([var_0,var_9,var_35,var_39,], output)
mod['func_46'] = func_46
mod = relay.transform.InferType()(mod)
var_47 = relay.var("var_47", dtype = "float64", shape = (10,))#candidate|47|(10,)|var|float64
var_48 = relay.var("var_48", dtype = "float64", shape = (10,))#candidate|48|(10,)|var|float64
var_49 = relay.var("var_49", dtype = "float32", shape = (10,))#candidate|49|(10,)|var|float32
var_50 = relay.var("var_50", dtype = "uint8", shape = (10,))#candidate|50|(10,)|var|uint8
output = func_46(var_47,var_48,var_49,var_50,)
func_51 = relay.Function([var_47,var_48,var_49,var_50,], output)
mutated_mod['func_51'] = func_51
mutated_mod = relay.transform.InferType()(mutated_mod)
var_53 = relay.var("var_53", dtype = "bool", shape = ())#candidate|53|()|var|bool
var_54 = relay.var("var_54", dtype = "bool", shape = ())#candidate|54|()|var|bool
bop_55 = relay.logical_and(var_53.astype('bool'), var_54.astype('bool')) # shape=()
uop_58 = relay.sigmoid(var_54.astype('float64')) # shape=()
uop_60 = relay.cosh(uop_58.astype('float32')) # shape=()
uop_62 = relay.acosh(uop_60.astype('float64')) # shape=()
uop_64 = relay.acosh(uop_62.astype('float64')) # shape=()
const_66 = relay.const(-9.631803, dtype = "float64")#candidate|66|()|const|float64
bop_67 = relay.logical_or(uop_62.astype('bool'), const_66.astype('bool')) # shape=()
const_70 = relay.const([-0.393010,7.581068,3.657148,7.635672,-1.805435,6.831048,-3.145773,5.667437,-3.016317,1.349970,3.606187,4.420049], dtype = "float64")#candidate|70|(12,)|const|float64
bop_71 = relay.equal(uop_64.astype('bool'), const_70.astype('bool')) # shape=(12,)
bop_74 = relay.less(bop_67.astype('bool'), var_54.astype('bool')) # shape=()
uop_77 = relay.asinh(uop_60.astype('float32')) # shape=()
bop_79 = relay.less(uop_60.astype('bool'), var_54.astype('bool')) # shape=()
func_46_call = mod.get_global_var('func_46')
func_51_call = mutated_mod.get_global_var('func_51')
const_83 = relay.const([-5.374231,-7.711465,7.160198,-2.083967,5.921603,-8.458761,-8.797213,5.475569,-1.579235,-0.177521], dtype = "float64")#candidate|83|(10,)|const|float64
call_82 = relay.TupleGetItem(func_46_call(relay.reshape(const_83.astype('float64'), [10,]), relay.reshape(const_83.astype('float64'), [10,]), relay.reshape(const_83.astype('float32'), [10,]), relay.reshape(const_83.astype('uint8'), [10,]), ), 1)
call_84 = relay.TupleGetItem(func_51_call(relay.reshape(const_83.astype('float64'), [10,]), relay.reshape(const_83.astype('float64'), [10,]), relay.reshape(const_83.astype('float32'), [10,]), relay.reshape(const_83.astype('uint8'), [10,]), ), 1)
bop_85 = relay.greater(bop_79.astype('bool'), var_53.astype('bool')) # shape=()
uop_88 = relay.asinh(uop_58.astype('float64')) # shape=()
var_90 = relay.var("var_90", dtype = "bool", shape = (12,))#candidate|90|(12,)|var|bool
bop_91 = relay.logical_or(bop_71.astype('bool'), relay.reshape(var_90.astype('bool'), relay.shape_of(bop_71))) # shape=(12,)
bop_94 = relay.left_shift(uop_64.astype('int64'), call_82.astype('int64')) # shape=(10,)
bop_97 = relay.left_shift(uop_64.astype('int64'), call_84.astype('int64')) # shape=(10,)
uop_98 = relay.log2(bop_71.astype('float64')) # shape=(12,)
bop_100 = relay.maximum(uop_98.astype('uint64'), var_54.astype('uint64')) # shape=(12,)
bop_103 = relay.not_equal(bop_100.astype('bool'), relay.reshape(bop_71.astype('bool'), relay.shape_of(bop_100))) # shape=(12,)
uop_106 = relay.asin(uop_98.astype('float64')) # shape=(12,)
bop_108 = relay.add(uop_106.astype('int32'), const_66.astype('int32')) # shape=(12,)
bop_111 = relay.mod(uop_106.astype('float64'), uop_62.astype('float64')) # shape=(12,)
uop_114 = relay.erf(bop_100.astype('float32')) # shape=(12,)
uop_116 = relay.acos(bop_100.astype('float64')) # shape=(12,)
uop_118 = relay.log(bop_108.astype('float64')) # shape=(12,)
uop_120 = relay.log(uop_118.astype('float64')) # shape=(12,)
uop_122 = relay.atan(uop_120.astype('float64')) # shape=(12,)
uop_124 = relay.cos(uop_118.astype('float32')) # shape=(12,)
uop_126 = relay.erf(uop_122.astype('float32')) # shape=(12,)
bop_128 = relay.logical_xor(uop_126.astype('int16'), relay.reshape(uop_114.astype('int16'), relay.shape_of(uop_126))) # shape=(12,)
uop_131 = relay.atan(uop_120.astype('float32')) # shape=(12,)
func_46_call = mod.get_global_var('func_46')
func_51_call = mutated_mod.get_global_var('func_51')
call_133 = relay.TupleGetItem(func_46_call(relay.reshape(call_82.astype('float64'), [10,]), relay.reshape(bop_94.astype('float64'), [10,]), relay.reshape(call_82.astype('float32'), [10,]), relay.reshape(call_82.astype('uint8'), [10,]), ), 3)
call_134 = relay.TupleGetItem(func_51_call(relay.reshape(call_82.astype('float64'), [10,]), relay.reshape(bop_94.astype('float64'), [10,]), relay.reshape(call_82.astype('float32'), [10,]), relay.reshape(call_82.astype('uint8'), [10,]), ), 3)
uop_135 = relay.sin(uop_118.astype('float64')) # shape=(12,)
bop_137 = relay.logical_xor(bop_128.astype('uint8'), relay.reshape(uop_135.astype('uint8'), relay.shape_of(bop_128))) # shape=(12,)
bop_140 = relay.power(uop_135.astype('float64'), relay.reshape(bop_128.astype('float64'), relay.shape_of(uop_135))) # shape=(12,)
bop_143 = relay.floor_mod(bop_128.astype('float32'), relay.reshape(uop_126.astype('float32'), relay.shape_of(bop_128))) # shape=(12,)
uop_146 = relay.erf(uop_118.astype('float64')) # shape=(12,)
bop_148 = relay.mod(uop_106.astype('float64'), relay.reshape(bop_100.astype('float64'), relay.shape_of(uop_106))) # shape=(12,)
uop_151 = relay.asin(bop_128.astype('float64')) # shape=(12,)
uop_153 = relay.tan(bop_128.astype('float32')) # shape=(12,)
bop_155 = relay.bitwise_xor(uop_124.astype('int32'), relay.reshape(var_90.astype('int32'), relay.shape_of(uop_124))) # shape=(12,)
uop_158 = relay.atanh(uop_151.astype('float64')) # shape=(12,)
uop_160 = relay.sqrt(uop_126.astype('float32')) # shape=(12,)
bop_162 = relay.not_equal(uop_158.astype('bool'), uop_60.astype('bool')) # shape=(12,)
uop_165 = relay.sqrt(bop_137.astype('float32')) # shape=(12,)
output = relay.Tuple([bop_55,bop_74,uop_77,const_83,bop_85,uop_88,bop_91,bop_94,bop_103,bop_111,uop_116,uop_131,call_133,bop_140,bop_143,uop_146,bop_148,uop_153,bop_155,uop_160,bop_162,uop_165,])
output2 = relay.Tuple([bop_55,bop_74,uop_77,const_83,bop_85,uop_88,bop_91,bop_97,bop_103,bop_111,uop_116,uop_131,call_134,bop_140,bop_143,uop_146,bop_148,uop_153,bop_155,uop_160,bop_162,uop_165,])
func_167 = relay.Function([var_53,var_54,var_90,], output)
mod['func_167'] = func_167
mod = relay.transform.InferType()(mod)
mutated_mod['func_167'] = func_167
mutated_mod = relay.transform.InferType()(mutated_mod)
func_167_call = mutated_mod.get_global_var('func_167')
var_169 = relay.var("var_169", dtype = "bool", shape = ())#candidate|169|()|var|bool
var_170 = relay.var("var_170", dtype = "bool", shape = ())#candidate|170|()|var|bool
var_171 = relay.var("var_171", dtype = "bool", shape = (12,))#candidate|171|(12,)|var|bool
call_168 = func_167_call(var_169,var_170,var_171,)
output = call_168
func_172 = relay.Function([var_169,var_170,var_171,], output)
mutated_mod['func_172'] = func_172
mutated_mod = relay.transform.InferType()(mutated_mod)
const_174 = relay.const([7,8,-1,-7,8,5,3,-9,4], dtype = "int32")#candidate|174|(9,)|const|int32
var_175 = relay.var("var_175", dtype = "int32", shape = (9,))#candidate|175|(9,)|var|int32
bop_176 = relay.right_shift(const_174.astype('int32'), relay.reshape(var_175.astype('int32'), relay.shape_of(const_174))) # shape=(9,)
uop_179 = relay.exp(const_174.astype('float32')) # shape=(9,)
bop_181 = relay.minimum(var_175.astype('int8'), relay.reshape(uop_179.astype('int8'), relay.shape_of(var_175))) # shape=(9,)
var_184 = relay.var("var_184", dtype = "int8", shape = (9,))#candidate|184|(9,)|var|int8
bop_185 = relay.logical_and(bop_181.astype('bool'), relay.reshape(var_184.astype('bool'), relay.shape_of(bop_181))) # shape=(9,)
uop_188 = relay.cosh(bop_181.astype('float64')) # shape=(9,)
uop_190 = relay.sin(bop_181.astype('float64')) # shape=(9,)
uop_192 = relay.log(bop_185.astype('float64')) # shape=(9,)
bop_194 = relay.greater(uop_190.astype('bool'), relay.reshape(bop_176.astype('bool'), relay.shape_of(uop_190))) # shape=(9,)
func_167_call = mod.get_global_var('func_167')
func_172_call = mutated_mod.get_global_var('func_172')
var_198 = relay.var("var_198", dtype = "bool", shape = ())#candidate|198|()|var|bool
const_199 = relay.const([True,True,False,False,True,True,False,True,False,False,True,True], dtype = "bool")#candidate|199|(12,)|const|bool
call_197 = relay.TupleGetItem(func_167_call(relay.reshape(var_198.astype('bool'), []), relay.reshape(var_198.astype('bool'), []), relay.reshape(const_199.astype('bool'), [12,]), ), 21)
call_200 = relay.TupleGetItem(func_172_call(relay.reshape(var_198.astype('bool'), []), relay.reshape(var_198.astype('bool'), []), relay.reshape(const_199.astype('bool'), [12,]), ), 21)
uop_201 = relay.log10(bop_194.astype('float32')) # shape=(9,)
uop_203 = relay.acosh(uop_201.astype('float32')) # shape=(9,)
uop_205 = relay.asinh(uop_201.astype('float32')) # shape=(9,)
bop_207 = relay.mod(uop_205.astype('float64'), relay.reshape(var_184.astype('float64'), relay.shape_of(uop_205))) # shape=(9,)
var_210 = relay.var("var_210", dtype = "float32", shape = (9,))#candidate|210|(9,)|var|float32
bop_211 = relay.floor_divide(uop_201.astype('float32'), relay.reshape(var_210.astype('float32'), relay.shape_of(uop_201))) # shape=(9,)
func_167_call = mod.get_global_var('func_167')
func_172_call = mutated_mod.get_global_var('func_172')
call_214 = relay.TupleGetItem(func_167_call(relay.reshape(var_198.astype('bool'), []), relay.reshape(var_198.astype('bool'), []), relay.reshape(const_199.astype('bool'), [12,]), ), 6)
call_215 = relay.TupleGetItem(func_172_call(relay.reshape(var_198.astype('bool'), []), relay.reshape(var_198.astype('bool'), []), relay.reshape(const_199.astype('bool'), [12,]), ), 6)
bop_216 = relay.minimum(uop_179.astype('uint32'), relay.reshape(const_174.astype('uint32'), relay.shape_of(uop_179))) # shape=(9,)
uop_219 = relay.erf(uop_190.astype('float64')) # shape=(9,)
bop_221 = relay.bitwise_or(uop_205.astype('uint32'), relay.reshape(uop_203.astype('uint32'), relay.shape_of(uop_205))) # shape=(9,)
bop_224 = relay.subtract(uop_201.astype('int16'), relay.reshape(uop_219.astype('int16'), relay.shape_of(uop_201))) # shape=(9,)
uop_227 = relay.cos(bop_194.astype('float64')) # shape=(9,)
uop_229 = relay.log10(uop_203.astype('float64')) # shape=(9,)
var_231 = relay.var("var_231", dtype = "float64", shape = (9,))#candidate|231|(9,)|var|float64
bop_232 = relay.logical_xor(uop_190.astype('int32'), relay.reshape(var_231.astype('int32'), relay.shape_of(uop_190))) # shape=(9,)
uop_235 = relay.exp(uop_229.astype('float64')) # shape=(9,)
bop_237 = relay.floor_mod(uop_229.astype('float64'), relay.reshape(bop_232.astype('float64'), relay.shape_of(uop_229))) # shape=(9,)
bop_240 = relay.multiply(uop_229.astype('uint32'), relay.reshape(bop_232.astype('uint32'), relay.shape_of(uop_229))) # shape=(9,)
bop_243 = relay.less_equal(uop_229.astype('bool'), relay.reshape(bop_224.astype('bool'), relay.shape_of(uop_229))) # shape=(9,)
const_246 = relay.const([-7.903727,-0.390814,0.265559,-8.372414,7.777107,-0.770981,3.669380,-4.394262,-6.644365], dtype = "float64")#candidate|246|(9,)|const|float64
bop_247 = relay.less_equal(uop_235.astype('bool'), relay.reshape(const_246.astype('bool'), relay.shape_of(uop_235))) # shape=(9,)
bop_250 = relay.left_shift(bop_243.astype('uint16'), relay.reshape(const_246.astype('uint16'), relay.shape_of(bop_243))) # shape=(9,)
func_46_call = mod.get_global_var('func_46')
func_51_call = mutated_mod.get_global_var('func_51')
var_254 = relay.var("var_254", dtype = "float64", shape = (10,))#candidate|254|(10,)|var|float64
call_253 = relay.TupleGetItem(func_46_call(relay.reshape(var_254.astype('float64'), [10,]), relay.reshape(var_254.astype('float64'), [10,]), relay.reshape(var_254.astype('float32'), [10,]), relay.reshape(var_254.astype('uint8'), [10,]), ), 2)
call_255 = relay.TupleGetItem(func_51_call(relay.reshape(var_254.astype('float64'), [10,]), relay.reshape(var_254.astype('float64'), [10,]), relay.reshape(var_254.astype('float32'), [10,]), relay.reshape(var_254.astype('uint8'), [10,]), ), 2)
var_256 = relay.var("var_256", dtype = "bool", shape = (9,))#candidate|256|(9,)|var|bool
bop_257 = relay.mod(bop_247.astype('float32'), relay.reshape(var_256.astype('float32'), relay.shape_of(bop_247))) # shape=(9,)
bop_260 = relay.minimum(uop_201.astype('uint64'), relay.reshape(bop_247.astype('uint64'), relay.shape_of(uop_201))) # shape=(9,)
bop_263 = relay.bitwise_xor(bop_221.astype('uint64'), relay.reshape(bop_185.astype('uint64'), relay.shape_of(bop_221))) # shape=(9,)
output = relay.Tuple([uop_188,uop_192,call_197,var_198,const_199,bop_207,bop_211,call_214,bop_216,uop_227,bop_237,bop_240,bop_250,call_253,var_254,bop_257,bop_260,bop_263,])
output2 = relay.Tuple([uop_188,uop_192,call_200,var_198,const_199,bop_207,bop_211,call_215,bop_216,uop_227,bop_237,bop_240,bop_250,call_255,var_254,bop_257,bop_260,bop_263,])
func_266 = relay.Function([var_175,var_184,var_198,var_210,var_231,var_254,var_256,], output)
mod['func_266'] = func_266
mod = relay.transform.InferType()(mod)
var_267 = relay.var("var_267", dtype = "int32", shape = (9,))#candidate|267|(9,)|var|int32
var_268 = relay.var("var_268", dtype = "int8", shape = (9,))#candidate|268|(9,)|var|int8
var_269 = relay.var("var_269", dtype = "bool", shape = ())#candidate|269|()|var|bool
var_270 = relay.var("var_270", dtype = "float32", shape = (9,))#candidate|270|(9,)|var|float32
var_271 = relay.var("var_271", dtype = "float64", shape = (9,))#candidate|271|(9,)|var|float64
var_272 = relay.var("var_272", dtype = "float64", shape = (10,))#candidate|272|(10,)|var|float64
var_273 = relay.var("var_273", dtype = "bool", shape = (9,))#candidate|273|(9,)|var|bool
output = func_266(var_267,var_268,var_269,var_270,var_271,var_272,var_273,)
func_274 = relay.Function([var_267,var_268,var_269,var_270,var_271,var_272,var_273,], output)
mutated_mod['func_274'] = func_274
mutated_mod = relay.transform.InferType()(mutated_mod)
const_276 = relay.const([1.912689,-8.697298,9.109875,-3.520532], dtype = "float64")#candidate|276|(4,)|const|float64
var_277 = relay.var("var_277", dtype = "float64", shape = (4,))#candidate|277|(4,)|var|float64
bop_278 = relay.maximum(const_276.astype('float64'), relay.reshape(var_277.astype('float64'), relay.shape_of(const_276))) # shape=(4,)
uop_281 = relay.cos(const_276.astype('float32')) # shape=(4,)
bop_283 = relay.power(var_277.astype('float32'), relay.reshape(bop_278.astype('float32'), relay.shape_of(var_277))) # shape=(4,)
uop_286 = relay.asin(var_277.astype('float64')) # shape=(4,)
uop_288 = relay.atan(bop_278.astype('float64')) # shape=(4,)
uop_290 = relay.cos(uop_286.astype('float64')) # shape=(4,)
var_292 = relay.var("var_292", dtype = "float32", shape = (4,))#candidate|292|(4,)|var|float32
bop_293 = relay.bitwise_or(bop_283.astype('uint64'), relay.reshape(var_292.astype('uint64'), relay.shape_of(bop_283))) # shape=(4,)
bop_296 = relay.power(uop_290.astype('float32'), relay.reshape(uop_281.astype('float32'), relay.shape_of(uop_290))) # shape=(4,)
output = relay.Tuple([uop_288,bop_293,bop_296,])
output2 = relay.Tuple([uop_288,bop_293,bop_296,])
func_299 = relay.Function([var_277,var_292,], output)
mod['func_299'] = func_299
mod = relay.transform.InferType()(mod)
var_300 = relay.var("var_300", dtype = "float64", shape = (4,))#candidate|300|(4,)|var|float64
var_301 = relay.var("var_301", dtype = "float32", shape = (4,))#candidate|301|(4,)|var|float32
output = func_299(var_300,var_301,)
func_302 = relay.Function([var_300,var_301,], output)
mutated_mod['func_302'] = func_302
mutated_mod = relay.transform.InferType()(mutated_mod)
var_304 = relay.var("var_304", dtype = "int32", shape = (10, 2))#candidate|304|(10, 2)|var|int32
var_305 = relay.var("var_305", dtype = "int32", shape = (10, 2))#candidate|305|(10, 2)|var|int32
bop_306 = relay.logical_xor(var_304.astype('int32'), relay.reshape(var_305.astype('int32'), relay.shape_of(var_304))) # shape=(10, 2)
uop_309 = relay.asinh(var_305.astype('float32')) # shape=(10, 2)
var_311 = relay.var("var_311", dtype = "float32", shape = (10, 2))#candidate|311|(10, 2)|var|float32
bop_312 = relay.bitwise_and(uop_309.astype('int64'), relay.reshape(var_311.astype('int64'), relay.shape_of(uop_309))) # shape=(10, 2)
var_315 = relay.var("var_315", dtype = "float32", shape = (10, 2))#candidate|315|(10, 2)|var|float32
bop_316 = relay.greater(uop_309.astype('bool'), relay.reshape(var_315.astype('bool'), relay.shape_of(uop_309))) # shape=(10, 2)
output = relay.Tuple([bop_306,bop_312,bop_316,])
output2 = relay.Tuple([bop_306,bop_312,bop_316,])
F = relay.Function([var_304,var_305,var_311,var_315,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_304,var_305,var_311,var_315,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_304= np.array([[5,-10],[7,-4],[-4,-10],[10,2],[1,-1],[-7,2],[-1,5],[-2,-3],[9,5],[-9,-8]], dtype='int32')
module1.set_input('var_304', input_304)
input_305= np.array([[-1,8],[4,9],[1,-10],[2,-2],[-1,-1],[3,9],[1,9],[2,-1],[-6,6],[-10,7]], dtype='int32')
module1.set_input('var_305', input_305)
input_311= np.array([[-0.152555,8.746154],[-8.388825,2.556411],[0.945899,2.542166],[6.137358,0.778166],[-5.951762,5.515971],[-3.568429,-1.899567],[0.421460,-7.098395],[3.594311,-4.059965],[-9.726064,1.117239],[-3.411114,5.919752]], dtype='float32')
module1.set_input('var_311', input_311)
input_315= np.array([[4.359498,-4.207400],[6.497877,-5.330277],[9.064705,-5.330135],[7.726795,6.435019],[-9.677127,2.466550],[2.511852,0.941790],[1.250382,-8.229967],[-6.822786,-8.380802],[-6.445473,-6.135929],[-0.597847,3.626100]], dtype='float32')
module1.set_input('var_315', input_315)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_304, input_305, input_311, input_315, )
res3 = intrp3.evaluate()(input_304, input_305, input_311, input_315, )
res4 = intrp4.evaluate()(input_304, input_305, input_311, input_315, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
module5.set_input('var_304', input_304)
module5.set_input('var_305', input_305)
module5.set_input('var_311', input_311)
module5.set_input('var_315', input_315)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_304, input_305, input_311, input_315, )
res7 = intrp7.evaluate()(input_304, input_305, input_311, input_315, )
res8 = intrp8.evaluate()(input_304, input_305, input_311, input_315, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
module9.set_input('var_304', input_304)
module9.set_input('var_305', input_305)
module9.set_input('var_311', input_311)
module9.set_input('var_315', input_315)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_304, input_305, input_311, input_315, )
res11 = intrp11.evaluate()(input_304, input_305, input_311, input_315, )
res12 = intrp12.evaluate()(input_304, input_305, input_311, input_315, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
module13.set_input('var_304', input_304)
module13.set_input('var_305', input_305)
module13.set_input('var_311', input_311)
module13.set_input('var_315', input_315)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_304, input_305, input_311, input_315, )
res15 = intrp15.evaluate()(input_304, input_305, input_311, input_315, )
res16 = intrp16.evaluate()(input_304, input_305, input_311, input_315, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
module17.set_input('var_304', input_304)
module17.set_input('var_305', input_305)
module17.set_input('var_311', input_311)
module17.set_input('var_315', input_315)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_304, input_305, input_311, input_315, )
res19 = intrp19.evaluate()(input_304, input_305, input_311, input_315, )
res20 = intrp20.evaluate()(input_304, input_305, input_311, input_315, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
module21.set_input('var_304', input_304)
module21.set_input('var_305', input_305)
module21.set_input('var_311', input_311)
module21.set_input('var_315', input_315)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_304, input_305, input_311, input_315, )
res23 = intrp23.evaluate()(input_304, input_305, input_311, input_315, )
res24 = intrp24.evaluate()(input_304, input_305, input_311, input_315, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()

'''49: TVMFuncCall
48: _ZNSt17_Function_handlerIFvN3tvm7run
47: tvm::runtime::TypedPackedFunc<tvm::runtime::TypedPackedFunc<tvm::runtime::ObjectRef (tvm::runtime::Array<tvm::RelayExpr, void>)> (tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target)>::AssignTypedLambda<tvm::runtime::TypedPackedFunc<tvm::runtime::ObjectRef (tvm::runtime::Array<tvm::RelayExpr, void>)> (*)(tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target)>(tvm::runtime::TypedPackedFunc<tvm::runtime::ObjectRef (tvm::runtime::Array<tvm::RelayExpr, void>)> (*)(tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
46: tvm::relay::EvalFunction(tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''