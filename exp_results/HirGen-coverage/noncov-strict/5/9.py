import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = ())#candidate|0|()|var|float64
uop_1 = relay.asin(var_0.astype('float64')) # shape=()
bop_3 = relay.logical_xor(var_0.astype('int16'), uop_1.astype('int16')) # shape=()
uop_6 = relay.erf(bop_3.astype('float32')) # shape=()
var_8 = relay.var("var_8", dtype = "float32", shape = (16, 8, 15))#candidate|8|(16, 8, 15)|var|float32
bop_9 = relay.maximum(uop_6.astype('float64'), var_8.astype('float64')) # shape=(16, 8, 15)
output = bop_9
output2 = bop_9
func_12 = relay.Function([var_0,var_8,], output)
mod['func_12'] = func_12
mod = relay.transform.InferType()(mod)
var_13 = relay.var("var_13", dtype = "float64", shape = ())#candidate|13|()|var|float64
var_14 = relay.var("var_14", dtype = "float32", shape = (16, 8, 15))#candidate|14|(16, 8, 15)|var|float32
output = func_12(var_13,var_14,)
func_15 = relay.Function([var_13,var_14,], output)
mutated_mod['func_15'] = func_15
mutated_mod = relay.transform.InferType()(mutated_mod)
var_17 = relay.var("var_17", dtype = "float64", shape = (5, 3, 16))#candidate|17|(5, 3, 16)|var|float64
var_18 = relay.var("var_18", dtype = "float64", shape = (5, 3, 16))#candidate|18|(5, 3, 16)|var|float64
bop_19 = relay.floor_divide(var_17.astype('float64'), relay.reshape(var_18.astype('float64'), relay.shape_of(var_17))) # shape=(5, 3, 16)
bop_22 = relay.right_shift(bop_19.astype('uint16'), relay.reshape(var_18.astype('uint16'), relay.shape_of(bop_19))) # shape=(5, 3, 16)
uop_25 = relay.erf(bop_22.astype('float32')) # shape=(5, 3, 16)
uop_27 = relay.atanh(uop_25.astype('float64')) # shape=(5, 3, 16)
uop_29 = relay.rsqrt(uop_27.astype('float64')) # shape=(5, 3, 16)
uop_31 = relay.erf(uop_27.astype('float32')) # shape=(5, 3, 16)
const_33 = relay.const([[[0.106261,3.110910,4.310945,-7.410802,-8.283672,8.434593,1.480596,-0.726405,-2.052680,-8.215183,-6.039754,5.332556,3.504453,1.710655,7.703011,-1.780635],[5.974667,-4.393155,-8.701505,-8.666812,-2.648908,8.697606,-4.963992,0.174319,6.657246,3.880871,8.894751,-9.032245,1.273960,9.987548,-8.268400,1.607440],[1.685531,-4.998581,2.079755,-5.085420,-9.158674,7.119367,-9.652253,-8.318744,3.238236,1.619961,-1.821049,5.744586,3.744052,-3.565927,-9.147978,5.531923]],[[4.313754,0.997563,-6.006261,-0.494386,-4.648898,5.224202,1.244102,-1.171182,-9.502009,3.516992,-1.146878,-4.041973,-2.999030,8.586523,-2.129636,-2.832239],[3.695095,-1.878691,-0.942852,-4.363104,3.179520,8.910195,4.931894,8.262738,4.447882,-4.918114,8.373942,-7.660135,7.202528,-4.447777,-3.515814,5.469532],[0.828409,-2.582325,3.372565,-1.229594,-4.915228,6.548477,0.273820,6.571438,5.012145,-7.017230,-4.324716,-0.775066,7.730922,-1.984205,-7.004912,7.537282]],[[5.626781,7.860104,-2.837263,0.852448,9.850348,1.221893,9.478931,1.878886,-0.257740,5.534564,-9.887812,2.621610,6.253818,-9.503524,4.642514,0.252191],[4.596669,4.404868,-6.096967,-8.642270,4.399135,-4.084534,7.593455,-4.311365,-7.565971,-3.959506,4.684417,-9.671892,5.672848,-8.882405,-3.630459,-7.159294],[-2.685038,1.663716,-1.066071,-6.600792,9.382902,7.375835,4.319077,1.963913,9.134983,-2.883048,3.812324,1.981960,6.974184,5.446617,1.494281,8.996522]],[[-4.442634,-1.670315,1.217507,-4.219204,-5.093320,1.883285,4.089268,3.396081,-3.777468,-4.272294,-7.839857,3.144182,3.375071,0.111616,-5.910855,1.675246],[1.816696,6.529036,-4.089988,-2.190273,3.983394,-9.309786,-9.540729,-0.332006,-7.914667,-8.919030,-4.708966,-0.504880,-5.494100,3.606519,7.301569,8.352371],[-2.408210,6.865990,2.513851,8.450311,7.516358,0.428872,9.430563,-8.379203,-3.751042,-2.953818,-8.206436,3.904215,-2.121861,2.664747,3.090967,9.818979]],[[-2.294618,-6.761004,-8.790767,-9.149926,-8.845199,3.455330,2.132852,7.451768,-7.947638,8.096401,-9.242889,9.424694,4.338408,-3.669784,-8.760643,-1.648279],[-6.047684,-7.457490,1.764577,-8.370350,-1.510118,8.479675,-2.400666,-3.936838,9.456774,2.804134,-4.485503,-8.616575,-8.169436,-5.676465,-1.295331,6.978547],[1.111518,1.488260,-6.966843,-5.449283,8.640267,6.697444,-6.042167,-6.731195,5.189907,-4.984947,3.434541,5.734605,0.314272,-3.093183,-3.448876,7.627728]]], dtype = "float32")#candidate|33|(5, 3, 16)|const|float32
bop_34 = relay.equal(uop_25.astype('bool'), relay.reshape(const_33.astype('bool'), relay.shape_of(uop_25))) # shape=(5, 3, 16)
uop_37 = relay.atan(uop_27.astype('float32')) # shape=(5, 3, 16)
uop_39 = relay.cosh(uop_31.astype('float64')) # shape=(5, 3, 16)
uop_41 = relay.acosh(uop_39.astype('float64')) # shape=(5, 3, 16)
uop_43 = relay.acos(uop_39.astype('float32')) # shape=(5, 3, 16)
uop_45 = relay.exp(uop_39.astype('float32')) # shape=(5, 3, 16)
func_12_call = mod.get_global_var('func_12')
func_15_call = mutated_mod.get_global_var('func_15')
const_48 = relay.const(-0.291884, dtype = "float64")#candidate|48|()|const|float64
var_49 = relay.var("var_49", dtype = "float32", shape = (1920,))#candidate|49|(1920,)|var|float32
call_47 = func_12_call(relay.reshape(const_48.astype('float64'), []), relay.reshape(var_49.astype('float32'), [16, 8, 15]), )
call_50 = func_12_call(relay.reshape(const_48.astype('float64'), []), relay.reshape(var_49.astype('float32'), [16, 8, 15]), )
var_51 = relay.var("var_51", dtype = "float64", shape = (5, 3, 16))#candidate|51|(5, 3, 16)|var|float64
bop_52 = relay.bitwise_or(uop_39.astype('uint16'), relay.reshape(var_51.astype('uint16'), relay.shape_of(uop_39))) # shape=(5, 3, 16)
var_55 = relay.var("var_55", dtype = "float64", shape = (5, 3, 16))#candidate|55|(5, 3, 16)|var|float64
bop_56 = relay.floor_mod(uop_41.astype('float64'), relay.reshape(var_55.astype('float64'), relay.shape_of(uop_41))) # shape=(5, 3, 16)
bop_59 = relay.right_shift(uop_41.astype('int32'), relay.reshape(bop_22.astype('int32'), relay.shape_of(uop_41))) # shape=(5, 3, 16)
bop_62 = relay.floor_divide(bop_59.astype('float64'), relay.reshape(uop_45.astype('float64'), relay.shape_of(bop_59))) # shape=(5, 3, 16)
func_12_call = mod.get_global_var('func_12')
func_15_call = mutated_mod.get_global_var('func_15')
call_65 = func_12_call(relay.reshape(const_48.astype('float64'), []), relay.reshape(var_49.astype('float32'), [16, 8, 15]), )
call_66 = func_12_call(relay.reshape(const_48.astype('float64'), []), relay.reshape(var_49.astype('float32'), [16, 8, 15]), )
uop_67 = relay.cos(uop_45.astype('float64')) # shape=(5, 3, 16)
func_12_call = mod.get_global_var('func_12')
func_15_call = mutated_mod.get_global_var('func_15')
call_69 = func_12_call(relay.reshape(const_48.astype('float64'), []), relay.reshape(call_47.astype('float32'), [16, 8, 15]), )
call_70 = func_12_call(relay.reshape(const_48.astype('float64'), []), relay.reshape(call_47.astype('float32'), [16, 8, 15]), )
uop_71 = relay.acosh(uop_67.astype('float32')) # shape=(5, 3, 16)
uop_73 = relay.cosh(bop_52.astype('float64')) # shape=(5, 3, 16)
bop_75 = relay.greater_equal(uop_67.astype('bool'), relay.reshape(uop_43.astype('bool'), relay.shape_of(uop_67))) # shape=(5, 3, 16)
uop_78 = relay.tan(uop_71.astype('float64')) # shape=(5, 3, 16)
uop_80 = relay.acos(uop_37.astype('float32')) # shape=(5, 3, 16)
uop_82 = relay.log2(uop_78.astype('float32')) # shape=(5, 3, 16)
var_84 = relay.var("var_84", dtype = "float32", shape = (5, 3, 16))#candidate|84|(5, 3, 16)|var|float32
bop_85 = relay.floor_divide(uop_82.astype('float64'), relay.reshape(var_84.astype('float64'), relay.shape_of(uop_82))) # shape=(5, 3, 16)
uop_88 = relay.atan(bop_85.astype('float64')) # shape=(5, 3, 16)
uop_90 = relay.exp(uop_88.astype('float64')) # shape=(5, 3, 16)
bop_92 = relay.multiply(uop_82.astype('int32'), relay.reshape(var_18.astype('int32'), relay.shape_of(uop_82))) # shape=(5, 3, 16)
uop_95 = relay.log2(uop_90.astype('float32')) # shape=(5, 3, 16)
bop_97 = relay.subtract(uop_95.astype('int64'), relay.reshape(var_17.astype('int64'), relay.shape_of(uop_95))) # shape=(5, 3, 16)
var_100 = relay.var("var_100", dtype = "float64", shape = (5, 3, 16))#candidate|100|(5, 3, 16)|var|float64
bop_101 = relay.not_equal(uop_78.astype('bool'), relay.reshape(var_100.astype('bool'), relay.shape_of(uop_78))) # shape=(5, 3, 16)
output = relay.Tuple([uop_29,bop_34,call_47,const_48,var_49,bop_56,bop_62,call_65,call_69,uop_73,bop_75,uop_80,bop_92,bop_97,bop_101,])
output2 = relay.Tuple([uop_29,bop_34,call_50,const_48,var_49,bop_56,bop_62,call_66,call_70,uop_73,bop_75,uop_80,bop_92,bop_97,bop_101,])
func_104 = relay.Function([var_17,var_18,var_49,var_51,var_55,var_84,var_100,], output)
mod['func_104'] = func_104
mod = relay.transform.InferType()(mod)
var_105 = relay.var("var_105", dtype = "float64", shape = (5, 3, 16))#candidate|105|(5, 3, 16)|var|float64
var_106 = relay.var("var_106", dtype = "float64", shape = (5, 3, 16))#candidate|106|(5, 3, 16)|var|float64
var_107 = relay.var("var_107", dtype = "float32", shape = (1920,))#candidate|107|(1920,)|var|float32
var_108 = relay.var("var_108", dtype = "float64", shape = (5, 3, 16))#candidate|108|(5, 3, 16)|var|float64
var_109 = relay.var("var_109", dtype = "float64", shape = (5, 3, 16))#candidate|109|(5, 3, 16)|var|float64
var_110 = relay.var("var_110", dtype = "float32", shape = (5, 3, 16))#candidate|110|(5, 3, 16)|var|float32
var_111 = relay.var("var_111", dtype = "float64", shape = (5, 3, 16))#candidate|111|(5, 3, 16)|var|float64
output = func_104(var_105,var_106,var_107,var_108,var_109,var_110,var_111,)
func_112 = relay.Function([var_105,var_106,var_107,var_108,var_109,var_110,var_111,], output)
mutated_mod['func_112'] = func_112
mutated_mod = relay.transform.InferType()(mutated_mod)
var_114 = relay.var("var_114", dtype = "int32", shape = (6, 14, 13))#candidate|114|(6, 14, 13)|var|int32
var_115 = relay.var("var_115", dtype = "int32", shape = (6, 14, 13))#candidate|115|(6, 14, 13)|var|int32
bop_116 = relay.maximum(var_114.astype('int32'), relay.reshape(var_115.astype('int32'), relay.shape_of(var_114))) # shape=(6, 14, 13)
func_104_call = mod.get_global_var('func_104')
func_112_call = mutated_mod.get_global_var('func_112')
var_120 = relay.var("var_120", dtype = "float64", shape = (240,))#candidate|120|(240,)|var|float64
const_121 = relay.const([[1.063235,8.823709,-5.142299,1.365339,-8.540257,8.087601,-1.925010,-3.700563,-7.470750,5.790241,8.042311,-2.152497,-2.751151,-1.885593,0.879228,-9.938642,3.659375,-1.199494,-8.057028,-9.705609,0.761594,3.326072,-9.853007,-8.228223,2.407060,-3.663578,9.405650,-9.623036,-8.903498,-9.988788,3.292746,2.192146,-9.198895,-8.982654,6.367863,-3.738274,7.352090,6.991090,2.001322,-9.882139,3.866431,7.269169,6.654540,9.360081,-8.046582,2.997048,-6.272189,-0.356511,-3.460387,2.641019,-9.102825,3.036477,-5.073994,5.400997,-7.752752,-3.189469,-5.868380,-3.834438,2.774150,-9.280806,0.893999,1.181808,-7.490813,2.916873,-0.593094,-6.922231,-3.282954,-8.945768,-1.377196,-9.285507,-3.480951,1.058242,-8.018611,-8.251817,6.619895,5.607625,6.874003,-1.184390,-8.124319,-8.626648,-1.017776,2.443576,-2.517306,5.813011,-9.803511,-0.541656,-7.702744,1.854059,5.062790,-1.872705,-6.329261,-7.106343,-4.037542,5.211050,-6.439029,-6.911062,9.416056,3.865228,4.926225,-1.304595,-3.883709,-0.765590,-7.116297,5.549735,-1.665038,-6.774281,1.444962,-1.351008,2.634646,-9.894373,4.217752,0.111898,2.236519,0.331755,7.564614,-0.959902,-3.274437,9.224379,-4.739391,-8.367806,-0.137762,-0.830935,2.064209,-6.760518,-3.331630,-6.386977,5.736218,-9.396223,-3.389795,2.872797,-2.301680,8.591008,4.288048,0.543324,1.980240,-0.435968,3.851370,2.305781,8.278508,8.211220,0.423137,0.609192,7.490411,4.568752,3.689515,-1.808348,-1.708200,-2.037109,-0.637717,2.355413,-7.687149,7.661650,-1.475790,-8.087001,-3.896973,-2.409935,-3.970868,-1.979211,2.835068,1.655353,5.269900,-4.960361,-9.220687,9.947896,2.305166,-7.387130,-5.731627,7.101625,5.638056,-7.567827,1.664866,7.609346,-8.767315,-4.049563,2.537726,9.512131,9.695901,-1.226539,-1.387366,-0.104280,-7.143878,1.815695,-7.245292,-5.094324,8.147235,-0.983918,2.368669,-5.621400,8.351926,0.318443,-5.925678,0.518008,2.547707,7.328183,9.672529,7.617786,0.450562,-2.813403,9.190952,4.885138,2.892908,9.576566,4.312960,5.169748,-2.500817,2.455415,4.691963,-8.591110,-7.071904,-2.685520,8.605654,3.778737,0.880342,7.448776,-7.788210,5.709006,-6.763348,-2.367502,-7.183474,-0.283560,6.617868,6.142628,4.962013,1.322357,-8.493432,6.624341,0.484273,-6.082191,8.184523,2.435836,-3.784615,1.677081,7.045848,-6.383292,4.305911,4.281064,-5.501423,4.971560,-9.094382,2.004955,0.283356,7.044976,5.933219,6.517592,5.331564,7.271232,1.712981,-1.641336,-9.106435,-8.121572,9.899055,-5.516768,-9.811401,7.743729,-7.140523,6.621544,-4.894532,-8.424137,-4.763001,-2.744305,-0.437166,6.676952,-9.445711,7.753469,-6.318742,1.295968,1.785643,2.222381,1.949732,-1.027493,2.787959,5.515344,-4.221552,-2.793077,6.732859,-7.227467,-4.954046,7.432164,7.870162,4.783034,-2.478092,-7.733781,5.842592,-3.038180,-3.495803,-4.217990,-2.346384,6.322522,-9.240821,-1.987751,-1.071682,9.517911,-7.108579,-9.146390,8.917971,-6.819034,-5.896257,8.455372,-4.975356,-2.391614,5.780379,4.407033,9.698310,-6.515008,-6.999496,9.703759,-9.605967,2.133556,-6.814302,-9.377390,9.733646,3.871332,9.739263,0.122739,-4.747907,3.029097,8.236424,-1.353486,9.450160,-6.886073,9.043584,4.133540,-1.629993,-1.985634,-2.893707,1.188420,4.608957,1.135290,3.035549,6.798693,-8.891338,4.262616,8.491199,-3.657624,9.144044,-2.839079,3.997304,-7.296509,-6.254250,-9.966218,0.353167,-5.276718,-0.655366,-1.835213,2.475734,-2.855100,-8.124853,9.561003,3.588535,-2.546433,-1.069415,9.500769,-0.647826,5.848000,-8.307498,2.395373,7.743252,9.475896,5.710672,-8.952163,7.819022,9.612810,-5.795495,4.429074,-0.572316,-8.309146,-6.750441,-9.651054,8.790519,6.090880,3.943823,-9.578959,-9.606141,9.580499,0.689553,-4.516566,-9.613868,-0.325692,-9.573256,-3.913196,0.658228,6.032143,-7.727581,8.214176,-9.704111,8.778540,8.817912,-5.683003,2.225832,-0.580876,9.772639,5.404110,-8.339969,9.309312,3.680884,8.222478,-6.121080,-5.314696,1.954445,8.383466,-6.388853,5.722360,-3.766826,-9.677790,6.928262,-2.374289,6.650231,-6.506186,1.894734,8.777237,2.055853,0.612251,2.048500,-0.913466,2.312541,-1.990476,9.983408,-1.592924,-1.961846,2.017506,4.872706,-1.085014,-7.712017,-6.434779,-0.486270,-9.458801,-7.454868,-7.916313,-0.438831,-7.224756,-5.604264,5.706099,2.716278,5.158841,-1.839915,6.601541,-6.005799,8.948487,7.491786,-8.542391,5.457551,0.563539,-1.018962,0.696090,9.348164,3.714006,0.628914,8.326556,-2.344821,-6.494847,1.328686,-0.210132,2.100868,-9.458232,1.444179,1.291228,-3.552748,-1.461863,-9.624221,9.997892,-7.846372,9.997682,7.345005,-9.912293,1.573761,4.017699,-3.957021,-8.635710,3.107934,-8.682980,3.286486,1.392637,0.658866,-4.032820,0.893837,8.385958,-1.915669,5.511605,8.478888,4.749513,-0.637866,0.343128,-7.032415,1.836747,4.536667,-7.439441,8.488363,-0.628055,-4.139699,-4.308709,-7.132680,3.164483,-4.120320,-5.178609,-6.212801,-3.700554,-0.681463,4.454416,4.114405,-9.176502,7.801929,5.823781,-6.298521,5.261892,-6.307257,1.201409,3.228549,-7.228470,1.833252,6.046581,-5.686473,0.387481,1.120337,-3.287569,2.339462,8.376965,8.185710,8.760845,-7.962294,-8.106346,-4.241506,6.025780,-0.046715,9.035151,5.572819,1.599633,-2.107411,-6.290282,-7.040245,-1.583090,-7.979035,-6.642567,-2.950852,1.263016,-8.774597,9.213606,9.795830,-0.342518,-1.086408,-3.512367,-0.946988,-9.332417,-7.988911,-4.141781,4.203139,-4.295497,8.979606,5.263662,-0.797642,-7.964711,1.097407,6.296622,3.380059,-0.394324,0.463960,8.492433,9.770705,-4.922482,-3.315139,-0.404693,7.340498,5.858386,5.317268,-7.161808,-7.384389,-6.466091,-5.728017,-0.638553,4.468851,-5.594483,2.984056,-8.883637,4.351099,-2.843496,6.248765,4.262330,9.748106,6.881357,4.224460,-0.550202,1.579337,2.826659,-4.346985,2.694383,9.133308,-3.204749,5.929561,1.081621,9.490840,-9.636775,-4.348770,5.264689,1.685564,-6.463031,-8.588533,-6.207186,3.874960,-5.608527,0.161604,8.977633,4.923941,-7.981483,-0.790592,3.866159,9.175468,-2.991755,6.139691,-3.339081,6.144326,2.498006,7.552985,5.038399,-0.671038,0.960290,6.419233,-2.706332,-9.130624,1.386644,-7.288282,6.470374,-3.995373,4.540618,8.336198,-0.862663,-0.880411,9.522774,3.550043,-8.694144,-0.743081,-3.593879,-7.971193,-7.284365,7.651158,5.756144,-9.980537,9.772438,-7.876298,-1.154886,-1.790255,-8.383546,-3.458521,0.593324,-7.684490,8.071996,2.767628,-0.262898,-7.445847,-2.462043,-7.792967,6.073230,-3.098105,-2.797313,5.523284,3.178172,3.400575,-8.129346,5.662698,-2.171617,5.274381,-6.184498,5.492316,-0.973851,0.732698,8.154744,-2.409213,-0.843731,2.353009,-5.040299,2.134015,4.365667,7.205166,-3.740719,6.621541,4.420012,0.658932,1.337941,-1.133920,-0.013795,-2.056561,-5.993624,9.908404,-8.357623,3.839483,2.056852,-9.014406,8.182618,6.321955,-2.025839,-4.743080,5.167123,7.259789,-7.646904,5.751191,9.128863,-3.750749,-9.048601,-0.808706,3.922090,8.029785,-1.718433,9.634894,-5.062701,4.976976,5.678529,-7.124238,9.702349,6.027483,8.925602,3.916332,-6.986565,-6.616272,6.315919,2.503040,-4.290706,9.094071,-4.614346,7.488995,9.116393,4.218971,-8.992823,-2.337560,5.216143,-0.853244,-7.043116,5.748085,5.495083,9.062946,-4.257690,6.250537,-6.183484,6.801647,4.124829,5.256333,-4.481721,8.793682,-4.086460,-9.282686,9.823878,-2.073319,-5.449679,1.941867,-8.416617,-8.468993,1.979346,3.428350,2.836297,9.029774,7.389974,7.102885,8.435910,7.343948,-6.122083,-6.148998,-3.308946,2.926847,-3.767299,-9.858776,-5.744240,-9.992496,8.551973,7.235432,-5.704282,2.229352,7.859534,1.057808,-7.125212,-3.342977,0.168205,-2.491329,8.916809,-3.904955,-6.972770,-9.377160,-1.306873,0.483438,1.479714,-0.035533,0.713719,4.691652,-0.953075,9.972334,4.036906,-5.919786,-7.323961,-1.090402,-3.178487,-7.018819,-9.508497,5.642808,8.604431,-2.453735,0.849249,-3.149759,-7.731399,7.594278,3.217059,0.378288,-2.081720,2.765091,2.216977,6.367129,-7.714596,-5.656839,-1.040048,7.230438,-5.698914,-2.149580,-8.186474,-7.673778,1.164934,-6.653994,7.534302,8.002040,3.046567,-0.598531,7.417620,-9.948630,1.164161,-8.038414,1.732998,4.830591,3.935647,0.939564,4.759010,-1.498744,-1.583553,4.452170,0.323980,1.031578,7.436036,2.741403,3.216871,-4.193811,-3.795810,1.699452,6.433655,-1.147752,-7.066464,-0.524007,9.208119,-8.095577,8.513774,2.031833,1.757399,5.113592,1.647652,6.130925,1.496037,2.476143,-9.286029,6.684392,-9.290646,-7.946009,7.678477,-1.218144,9.906584,-5.333411,-1.684851,2.334186,3.587483,-0.991908,2.741023,3.715210,4.541611,1.871568,6.582980,6.009920,-0.694253,5.007972,4.384142,-8.291459,-2.930745,2.003718,8.604835,-5.134250,-7.645968,1.714928,-1.573456,-3.708916,3.688055,3.853972,-5.011527,-7.890784,-7.449611,-1.852325,9.843747,7.436121,-6.586923,-9.993818,5.314975,-8.855346,7.674716,-1.568581,-1.924491,-8.058760,-9.362316,0.099988,-7.914662,2.204446,4.611530,-0.762365,-5.342292,-0.849236,5.714474,-0.546080,-6.102108,-6.937471,-0.248597,3.609569,2.485799,9.522488,-2.441542,-0.629360,-7.110726,3.712052,6.396095,1.430396,5.012036,-9.584276,-9.175221,-4.659747,6.174376,9.285579,9.484573,1.911224,-7.957613,-2.124613,8.999588,0.369033,-7.752601,7.552798,1.180637,5.060140,-8.746235,9.494832,0.366772,9.631630,-7.685231,-6.504909,-8.431140,-8.709206,-1.845082,5.313297,3.458682,-5.992910,5.760550,2.454976,-5.899661,-9.884246,6.215876,3.102038,2.561502,7.027762,4.669378,1.454613,2.763212,-2.878262,-4.828237,1.372055,8.164107],[9.889055,5.541444,7.967729,2.544477,2.425074,3.650268,4.071773,5.382099,-1.248322,4.848111,-2.776692,5.797288,-9.914977,-1.694639,7.592996,3.229272,9.222616,8.244633,-1.490658,-0.711561,3.546988,8.911467,-7.743889,-9.672524,7.119753,-6.705808,-6.928646,3.673154,1.696035,4.082314,0.036296,9.668824,8.672409,3.207733,9.433677,6.800361,7.981206,-6.138843,-9.032323,-5.027126,-0.323743,8.284884,-1.396361,6.095084,1.756868,-7.808269,-2.397631,0.060085,-6.530334,7.826218,-6.942902,2.750645,8.322805,6.464562,-9.427816,-7.101312,-8.660191,7.395908,-1.735108,-8.563079,6.090945,-6.276504,-9.839066,-6.905442,-4.186112,-4.349384,-0.896414,-0.236976,1.534069,5.442828,3.412925,-2.808276,-6.570464,-9.070746,2.438493,-4.613930,5.509327,-8.852362,-9.173574,-7.915522,-0.816934,1.938424,-8.861587,1.708509,5.883826,9.346113,-7.240330,-5.005168,-5.276379,0.110507,7.850114,-3.256998,-3.170496,-4.249164,8.236017,7.530762,7.896631,5.482038,-4.682631,-5.279525,4.212746,-9.141293,3.895134,-0.812060,4.504679,5.912831,8.138251,7.424290,-7.005561,-4.550353,-1.263302,-0.592493,-3.197571,-2.789723,-5.438870,-6.911665,-5.582978,4.966697,4.523858,3.094437,3.103013,1.638859,6.231246,-9.989258,-2.354036,9.871647,-3.397849,2.525173,4.403749,7.111534,-6.689168,-5.978550,-2.655692,-0.431954,2.121491,-1.732609,3.619627,-5.910048,-0.506583,-3.372729,9.177348,0.131239,3.509870,4.447939,-3.816212,-2.613280,-2.951366,-2.954472,-5.074118,4.066803,-0.008368,-7.662612,9.912997,-1.631853,6.600932,2.302334,8.343452,-3.883004,8.673777,2.122731,-1.899465,-2.319234,-7.610140,1.235714,1.748875,2.636132,-6.782499,4.885652,-4.745824,5.083660,4.429073,-1.233501,-6.069125,1.382124,-7.032348,3.590747,2.591329,-6.041688,-8.158589,-4.198136,-5.158872,-6.828745,-6.927833,-1.655534,2.939320,-3.048134,-4.748068,4.886668,-7.119354,-5.736744,-4.373192,9.250466,1.527288,7.051965,-0.201586,-0.375955,6.817464,7.883985,-2.550405,-5.949626,-3.881173,-8.818507,-5.728112,1.705342,4.488380,3.908632,8.471949,5.723718,-7.297626,6.429107,-6.867755,2.993999,-3.807963,0.672169,3.942562,-0.071656,6.233752,-4.903526,9.055060,-1.370128,-3.804105,-9.480936,-8.723136,-1.441232,-3.275645,5.578232,9.610337,4.089916,-3.366578,4.787895,-8.502391,9.590826,-2.553189,8.927963,6.088142,-5.894843,-5.589425,4.884064,-0.037717,7.910484,4.432045,-7.454071,-8.214534,-6.135128,-3.453086,-8.278938,-2.584340,-1.722632,9.389547,-1.572729,2.847090,-2.556851,9.359148,0.164434,-9.232926,-3.649505,4.186439,-6.141474,-7.262083,-1.047976,-2.658350,-3.972544,-5.337566,-4.957658,-2.269778,-7.874578,2.231386,7.598544,9.599187,6.218866,-6.780274,2.747282,-6.245329,0.930500,1.677477,0.664065,-4.089109,-3.839132,2.503014,-1.776506,4.883795,3.174976,-5.933548,1.814245,6.008403,6.733040,-2.027689,-5.340655,-8.936420,-5.863358,2.077780,-2.437195,6.544192,1.057549,5.277675,-1.546883,-7.762246,9.332051,9.093106,-8.748489,6.476789,-5.733667,4.323912,-2.457246,-9.405408,4.591652,1.209221,9.812519,-1.779177,6.529963,-9.332373,-1.734224,8.977939,0.641919,-5.174313,-9.233446,9.388587,2.148183,6.200725,3.543322,-8.737983,0.051539,-1.191494,-3.346112,6.483509,-8.066951,-5.991044,3.953448,-9.213173,-0.215377,-5.109635,5.245146,1.229777,-1.243635,-1.884472,-9.390135,-4.837954,-2.025278,-3.750917,1.295143,-1.845054,7.791766,-3.242476,2.462710,-5.265026,0.409995,-4.380299,-9.543406,-0.254352,-6.217894,-6.490454,6.705977,-6.899326,3.765537,3.689380,8.730696,-7.311649,-0.998082,6.178200,-0.322159,2.750126,-2.623432,-4.169386,5.851810,-5.051703,0.945933,-8.192373,9.334014,6.189971,5.755818,-9.562997,-5.338388,6.310910,8.437504,-1.248102,-4.273955,-5.706291,9.096791,-9.712064,3.413572,-5.980656,0.625099,4.704797,-9.063165,-4.789494,5.678861,-1.886533,8.506934,-8.855389,-3.424085,-3.138740,-4.260048,9.837817,2.470727,-3.334260,-4.952286,-1.140041,6.283805,9.113917,-2.946806,3.944661,-4.178720,0.313180,-5.138263,-5.553114,3.003355,8.606117,4.636145,2.655826,-2.436181,3.635021,7.403815,2.178237,-1.816599,-3.394819,-3.444941,-7.618505,1.378652,-2.840954,-4.172479,-2.397286,-4.782288,8.399562,-3.500489,-3.763999,2.712665,-2.027945,8.370949,9.067637,-8.098596,-1.425169,-7.166663,6.206841,1.015646,7.924834,-0.225400,4.888478,7.032275,4.180131,1.795126,8.973900,6.230685,4.277491,7.095240,-6.899037,-1.431162,-8.350197,-2.038863,-3.034696,2.599972,4.510710,8.032518,-2.253592,9.379142,0.968731,-0.148852,4.562134,-2.046299,-6.194135,-2.455067,3.286162,-1.571521,4.163291,1.712597,-3.043022,6.325686,-3.045540,-2.278612,8.096520,-6.288476,-4.888078,3.697859,5.527606,4.001150,4.563677,-9.902733,-6.228677,-7.551510,0.980181,-4.875567,7.054991,1.015858,-1.708231,-4.990947,-5.781190,-6.560831,3.502352,-0.432814,9.256076,0.906687,6.408596,8.854973,-6.840675,6.199005,7.619643,3.245900,6.006951,8.400451,-1.031419,-3.287472,-2.924387,1.945428,-9.053851,-5.243782,6.536943,4.573588,-9.615597,9.090900,-2.301118,-7.856319,-0.960441,-9.737129,7.801527,8.176825,-1.293966,-3.652076,9.153509,-7.475278,9.232729,2.960836,-0.117566,-2.777675,-7.880843,9.911247,-5.090954,-6.016892,6.449785,7.571301,-2.856542,-4.026657,-8.619558,-7.657442,0.948903,0.938041,9.250236,0.461823,9.069880,-6.786532,6.058002,0.446479,-0.472519,-7.146861,-2.861987,-0.833329,1.042015,5.357594,1.248848,3.806784,2.606141,0.301453,7.833251,-2.575424,-3.453125,-7.273573,7.671248,-4.308085,-8.059036,3.657431,-7.555533,8.044696,2.654580,2.899691,-9.398110,4.132648,5.656168,1.118121,9.493961,-4.461780,-1.690442,-8.014646,-7.038302,0.510600,1.840743,4.396292,-6.655875,6.510612,-1.166876,-1.851182,5.465735,-3.375457,6.711191,-4.031962,5.808431,-7.692657,5.731919,4.806236,2.323978,-6.819657,-0.969141,-4.451054,0.869084,-6.220840,-1.801512,-9.343418,-2.573402,3.124543,-6.493823,-7.907414,-6.605511,-6.873890,8.404790,1.441994,-2.897925,-5.078533,9.056302,-0.644824,-1.381429,-0.365846,2.669561,5.896241,7.608287,8.174145,-3.151331,-0.688985,4.733694,-5.348503,-5.366739,2.743754,-3.283060,8.001512,4.367275,-8.551356,-5.395315,-4.553468,9.301719,1.732946,-5.707240,4.124396,6.973637,4.055269,-8.669010,2.212683,8.553842,6.713858,-1.081837,-5.071713,-8.310379,-7.054014,9.480157,9.795977,-1.405237,-4.747791,1.368897,5.679688,0.886840,0.484323,-5.318709,-3.312845,-2.843679,1.133700,6.241488,-2.423711,-2.006246,-5.573317,4.821079,5.876537,4.638096,8.345711,1.260148,6.423056,3.491277,-0.134656,7.254559,-0.207621,-8.402046,9.289203,7.179358,-3.580276,-4.420253,0.316267,-6.408624,1.694403,-8.453240,-9.656069,2.276322,-3.032713,6.107020,-8.818624,-7.675713,-6.230464,8.363889,-4.253077,1.899631,-8.189169,9.902949,3.768522,-3.355299,0.639302,3.294308,-0.814920,9.411032,-3.929592,2.475939,-8.965286,4.948396,6.786723,-7.845719,1.355789,-6.986151,3.557192,6.709222,8.914272,8.072245,4.081290,-1.038240,3.707273,-7.238827,-3.350385,-7.847637,9.146058,8.053158,-1.202810,-0.362704,8.917642,-0.202571,3.726250,-2.813720,0.917357,0.540484,-6.877564,3.219141,-3.382898,3.237270,1.860797,4.875929,6.606086,2.335060,-1.679160,5.255943,-2.561776,-4.056058,-9.470080,-2.138255,-8.176197,-4.767049,-3.112833,-2.167379,0.709047,7.809129,7.950802,-0.367251,-3.635423,9.437248,6.771162,-3.904710,-4.183861,2.558666,3.282494,-3.306220,-5.544407,4.174141,-6.664079,3.502723,5.655132,6.360337,9.881169,-4.249105,0.001861,-2.653961,-0.668059,2.719807,5.295104,2.524750,-4.277225,-7.638759,-2.130779,5.810240,3.712645,6.797518,-5.692879,4.354015,-1.175688,8.480656,2.926309,-0.284198,-2.922854,-4.735849,3.289129,9.532366,-0.227309,-9.018474,0.619098,9.007823,-3.386148,7.366334,3.668195,-2.412796,-5.726127,-8.534371,0.737417,-1.872970,-5.576124,9.435284,-4.193762,5.859152,-8.118042,-1.625273,-6.198327,-2.080157,-0.997545,8.306341,-0.631180,0.627740,9.176909,0.414639,-0.353738,-6.106361,-9.425002,-0.868552,-5.423359,7.750090,7.046410,-7.694213,-8.936721,-6.395012,6.537380,-6.419933,2.910832,-6.717899,3.454497,0.407764,6.001942,-9.864281,2.890870,9.665199,2.987853,-7.681389,-6.445749,-9.997495,9.817379,0.018674,-1.723587,8.501415,7.976861,-8.278382,7.211906,-3.132557,6.615955,-6.179803,-3.703494,0.007479,7.136460,-4.525189,-6.344985,-8.253518,-6.723170,-6.437451,5.970829,-1.965539,-7.784735,-4.724883,3.395420,-2.432394,8.678386,3.729212,-3.943191,0.174617,5.401653,7.433981,-3.467086,8.821073,9.106783,5.054682,3.120778,5.086284,-1.445156,9.612008,8.985434,1.455946,8.212021,-9.098215,2.090866,2.395074,9.734962,-5.948028,-3.765371,-5.248241,-2.101212,-4.307782,-6.891751,5.601408,0.633755,-1.583974,-5.374186,-5.077110,-2.542178,-9.415815,-3.238950,-0.751699,-0.917031,-9.778791,7.476956,3.477335,-4.331210,3.220000,8.739781,-9.432032,-5.650142,9.521709,-4.401876,-8.590479,-6.732231,-4.546247,-5.844259,4.684022,7.593277,1.992104,-6.997069,-7.272686,-0.621747,0.817873,-4.127567,6.216457,-3.040854,-1.014651,-1.499824,-2.340047,9.281424,0.458076,5.305217,-0.199987,-8.785335,9.608154,-8.182875,-8.140694,-1.888979,4.976652,6.568640,3.677758,0.401874,-8.074557,-5.031318,5.522890,0.931557,5.037958,5.972229,8.357104,9.781353,-8.320641,9.505147,-5.943474,8.624599,-3.748221,-6.537017,-6.815346,3.304379,7.332865,2.008488,8.517640,-0.056524,-2.798308,9.559396,0.861582,-3.107969,-1.909836,-1.085277,9.712105,-0.439593,-4.285001,9.779015]], dtype = "float32")#candidate|121|(2, 960)|const|float32
call_119 = relay.TupleGetItem(func_104_call(relay.reshape(var_120.astype('float64'), [5, 3, 16]), relay.reshape(var_120.astype('float64'), [5, 3, 16]), relay.reshape(const_121.astype('float32'), [1920,]), relay.reshape(var_120.astype('float64'), [5, 3, 16]), relay.reshape(var_120.astype('float64'), [5, 3, 16]), relay.reshape(var_120.astype('float32'), [5, 3, 16]), relay.reshape(var_120.astype('float64'), [5, 3, 16]), ), 3)
call_122 = relay.TupleGetItem(func_112_call(relay.reshape(var_120.astype('float64'), [5, 3, 16]), relay.reshape(var_120.astype('float64'), [5, 3, 16]), relay.reshape(const_121.astype('float32'), [1920,]), relay.reshape(var_120.astype('float64'), [5, 3, 16]), relay.reshape(var_120.astype('float64'), [5, 3, 16]), relay.reshape(var_120.astype('float32'), [5, 3, 16]), relay.reshape(var_120.astype('float64'), [5, 3, 16]), ), 3)
uop_123 = relay.atanh(var_115.astype('float32')) # shape=(6, 14, 13)
output = relay.Tuple([bop_116,call_119,var_120,const_121,uop_123,])
output2 = relay.Tuple([bop_116,call_122,var_120,const_121,uop_123,])
func_125 = relay.Function([var_114,var_115,var_120,], output)
mod['func_125'] = func_125
mod = relay.transform.InferType()(mod)
var_126 = relay.var("var_126", dtype = "int32", shape = (6, 14, 13))#candidate|126|(6, 14, 13)|var|int32
var_127 = relay.var("var_127", dtype = "int32", shape = (6, 14, 13))#candidate|127|(6, 14, 13)|var|int32
var_128 = relay.var("var_128", dtype = "float64", shape = (240,))#candidate|128|(240,)|var|float64
output = func_125(var_126,var_127,var_128,)
func_129 = relay.Function([var_126,var_127,var_128,], output)
mutated_mod['func_129'] = func_129
mutated_mod = relay.transform.InferType()(mutated_mod)
var_131 = relay.var("var_131", dtype = "float32", shape = (9, 6))#candidate|131|(9, 6)|var|float32
uop_132 = relay.sinh(var_131.astype('float32')) # shape=(9, 6)
uop_134 = relay.log(uop_132.astype('float32')) # shape=(9, 6)
uop_136 = relay.log10(var_131.astype('float64')) # shape=(9, 6)
bop_138 = relay.add(uop_134.astype('float64'), relay.reshape(uop_132.astype('float64'), relay.shape_of(uop_134))) # shape=(9, 6)
bop_141 = relay.greater(uop_134.astype('bool'), relay.reshape(uop_132.astype('bool'), relay.shape_of(uop_134))) # shape=(9, 6)
uop_144 = relay.log2(bop_141.astype('float64')) # shape=(9, 6)
output = relay.Tuple([uop_136,bop_138,uop_144,])
output2 = relay.Tuple([uop_136,bop_138,uop_144,])
func_146 = relay.Function([var_131,], output)
mod['func_146'] = func_146
mod = relay.transform.InferType()(mod)
var_147 = relay.var("var_147", dtype = "float32", shape = (9, 6))#candidate|147|(9, 6)|var|float32
output = func_146(var_147)
func_148 = relay.Function([var_147], output)
mutated_mod['func_148'] = func_148
mutated_mod = relay.transform.InferType()(mutated_mod)
var_150 = relay.var("var_150", dtype = "float64", shape = ())#candidate|150|()|var|float64
uop_151 = relay.atanh(var_150.astype('float64')) # shape=()
uop_153 = relay.sinh(uop_151.astype('float64')) # shape=()
var_155 = relay.var("var_155", dtype = "float64", shape = (11, 12))#candidate|155|(11, 12)|var|float64
bop_156 = relay.maximum(uop_153.astype('int64'), var_155.astype('int64')) # shape=(11, 12)
bop_159 = relay.greater_equal(uop_153.astype('bool'), var_155.astype('bool')) # shape=(11, 12)
uop_162 = relay.log10(bop_159.astype('float64')) # shape=(11, 12)
func_104_call = mod.get_global_var('func_104')
func_112_call = mutated_mod.get_global_var('func_112')
const_165 = relay.const([-8.697930,2.888733,4.759894,7.024679,-9.166856,2.608510,6.006968,5.261488,8.747438,2.417558,7.672000,-3.951355,1.348128,7.639626,-3.174979,-8.110517,-0.480024,-7.094726,-0.364478,-0.276775,-2.188494,-4.271900,-3.917505,5.177475,-2.938215,-4.658738,2.567801,0.255807,7.011341,7.825189,-9.261926,6.276412,-9.066757,-4.941142,8.065636,4.017913,-4.974799,2.807373,2.832626,1.387480,-5.570695,4.269982,-0.723108,-3.649322,9.549120,2.513248,9.751839,-5.730915,-8.997992,-3.154522,7.517596,0.783480,-9.704937,0.936315,-8.217763,1.689425,-0.550462,-6.653459,8.972698,-6.861562,7.230223,4.126737,-0.769917,-9.463091,-2.381435,-1.330302,-0.293091,-9.862746,2.964997,-7.839044,-2.788243,-4.813860,-8.873687,4.822063,0.735879,-9.623460,-7.496261,-2.807360,-2.149859,8.112414,9.712696,-8.757477,-2.493977,-5.875483,-7.613485,2.773280,-0.569168,5.307747,-6.293538,8.001027,7.903713,-8.562183,5.591756,-4.642673,5.892760,-7.033144,-2.423165,-7.027021,2.210336,-6.307197,5.833138,-4.472986,8.299981,-6.133671,1.985005,3.353535,-7.793348,-7.762002,-5.638985,6.387241,-4.181883,9.186876,-8.031352,1.866568,-7.380289,-5.771663,6.759032,-4.670183,-4.736073,4.839422,-5.990179,-2.557524,-6.108410,-3.037615,-7.940783,3.388701,4.319467,1.679017,-7.108941,-9.302961,-9.071261,6.627231,6.267768,-4.245466,-0.140025,6.837012,-6.746181,4.641719,-0.538571,-6.792962,0.974971,-6.829176,-8.288009,1.039983,-2.130655,1.120912,-8.448400,3.819138,-4.899308,5.215319,9.306824,7.185081,6.754381,-7.426876,-4.209500,-1.362337,-9.687678,5.183295,-7.046646,-9.518538,-6.702765,1.566791,-3.285633,-4.748855,-9.392592,8.244576,0.473775,3.633148,-7.705306,-0.930246,-7.545143,-0.073735,2.485171,3.505149,-5.797241,9.074503,-1.518026,1.275506,3.795867,1.126410,-8.789667,5.167991,-9.260659,-7.181105,-0.042615,7.265311,7.511471,-3.262421,2.711301,-9.027220,8.906333,-7.549316,-1.954260,-9.572066,-4.032175,5.338867,-9.880330,-6.162365,3.869489,1.799803,2.678189,8.050197,9.371548,-4.206981,1.521927,-7.315477,-7.135627,-3.218715,5.550245,-4.121451,8.922946,-0.043228,-2.719802,-0.728603,0.345859,0.675465,-9.922062,1.612378,-1.975518,8.766669,-9.744871,-4.697768,-8.474737,2.489570,7.041989,8.781255,9.683385,2.745968,-4.946758,7.874797,7.772803,1.153506,6.922374,9.447089,-5.663937,-8.326762,5.043846,4.528863,4.250779,2.499035], dtype = "float64")#candidate|165|(240,)|const|float64
const_166 = relay.const([6.270645,-3.618208,-1.258213,2.393258,-2.137245,-4.528538,6.451901,-2.185291,7.573684,-9.345423,8.703858,1.928718,0.421439,-5.726295,4.372142,3.634672,4.006099,8.937960,5.489498,8.583609,-0.410909,-8.371223,-9.954936,7.901353,-5.714655,-4.240497,4.758047,-0.678302,7.409197,-2.300472,4.725729,6.050985,7.498900,-1.509809,-8.477225,-8.888328,9.433420,-3.360064,7.727198,1.203074,2.216460,-8.782023,1.792155,6.652223,8.314319,7.530011,2.358030,3.053112,4.266951,-7.372880,-6.946205,-3.346164,8.920409,3.634530,-5.950785,-9.010407,6.464574,5.715769,1.741562,7.906741,-1.974300,1.853090,-1.602776,-5.653993,-9.064049,3.266239,-1.410477,-0.959392,-8.709046,-2.608554,-3.557554,-9.874635,0.347886,-5.918818,6.618984,2.994957,-7.245925,3.251704,-3.696652,-4.988147,-9.689111,6.284792,-3.356088,-7.573334,2.123660,1.858613,5.470679,8.030437,6.630329,6.524581,-9.524234,-8.176087,9.786556,7.298009,-2.174079,-2.597844,4.894596,0.528248,5.316059,-6.139479,-6.214494,-8.815359,6.338258,1.042921,1.274698,1.604374,3.259717,-8.525042,-3.594333,-0.084373,-8.621160,2.051022,-2.954889,0.201423,2.824444,9.052341,4.013960,5.697831,7.365988,-2.436751,-2.296856,-4.900138,9.067588,-1.056056,-3.931723,-8.908977,-0.493159,-9.951345,-0.470669,-8.819549,3.924587,-7.653959,-4.604946,-0.298082,-6.667526,-6.668416,-5.458912,-3.267415,-3.554676,8.598858,-0.109664,5.470096,-6.523279,3.399560,1.799406,-5.243787,3.597178,2.338102,-9.038958,-9.983242,-5.397427,3.655176,6.636135,7.187617,2.437061,7.315711,-4.328506,-1.345344,-7.919675,-5.057837,3.039553,3.194532,0.571238,-7.951931,-6.352197,-2.740040,-4.044322,5.211176,0.224562,9.328104,-5.505063,-0.726989,4.225409,6.327338,0.314764,3.058711,-2.010393,4.956659,0.023853,6.595852,-0.931491,4.449211,-4.230801,6.597546,3.376459,-6.570654,4.052345,-3.446783,7.680188,-4.694809,1.457116,6.056837,-2.216083,6.743837,8.912254,4.000593,-5.196795,-9.311668,-1.449917,0.361211,-0.953252,5.931432,-5.806513,-2.330071,9.875663,-6.379866,-1.184230,-1.477406,5.129471,-9.946443,-7.850018,-0.321422,-1.926897,4.753423,-0.875913,-3.719762,-4.498547,-5.663396,-4.770916,-3.828282,-0.689830,-5.822191,7.506174,3.210209,1.699063,7.519604,-3.842480,-7.066988,-8.182058,0.803839,-0.477573,7.540057,6.021021,-4.352504,-5.047167,4.562139,9.431197,1.526911,-3.131049,0.318275,-3.215750,0.617291,8.706354,-5.689578,-0.421839,-0.203676,8.592241,8.379247,-7.393025,-9.297903,9.675390,7.085736,-3.880072,9.936522,2.323791,-6.661936,5.757765,-2.816912,9.265832,-1.163641,-9.613633,3.778960,-0.084804,-8.623722,-6.943986,4.123147,-9.593772,-6.428238,0.424995,7.821591,6.077705,-9.195147,-0.806368,0.130853,0.346025,3.512583,-9.998086,-2.980344,1.601390,1.444823,6.613563,3.324121,7.324388,-3.240541,6.852044,-3.553487,5.365233,4.543106,0.300731,-1.122097,-6.171603,5.085056,-9.819918,5.575161,-7.209098,5.355252,7.927891,-3.962134,-5.328483,5.218689,-0.093818,-4.845564,6.212674,8.492864,-4.615355,6.228883,1.852181,-6.936922,-6.781015,-7.776049,-5.276937,2.954440,-6.667287,4.732646,-3.229372,2.797937,-2.955768,5.254498,7.927427,-9.359376,-0.616954,4.655717,-5.252513,1.241845,3.975746,-7.405211,0.343783,-6.815913,5.944668,-5.629250,-0.584556,-5.127903,-5.881700,-1.019005,8.717801,1.243940,7.629242,6.768117,-7.560675,-8.420634,-7.470848,-4.048857,-4.767726,-9.792690,-0.622260,-4.895332,-5.475090,6.856272,-2.417841,-4.815792,-0.166616,4.117501,-1.405952,-9.960838,4.623945,6.226064,4.077084,3.754874,-5.950787,3.340823,-9.489041,3.386080,-1.259155,9.302742,3.489841,-9.905094,-4.102499,2.935237,7.551870,0.497964,-3.739506,-3.923473,-6.221517,-1.024524,7.013832,9.807508,3.655407,-3.763308,7.476208,-8.089451,-2.380206,0.768579,-1.848568,0.158376,-8.410225,-5.459164,9.112864,-4.956032,-3.885678,-6.013451,-3.503259,0.852233,6.330199,7.228753,-6.180674,9.000633,8.698209,1.921229,7.298897,3.282016,7.321095,-7.805703,-8.253717,5.357588,4.036636,1.992582,4.369551,1.188424,-5.098798,-8.607745,-5.908410,3.727958,-3.746006,7.312931,-0.920126,2.611185,-2.418505,-2.914062,-6.316876,0.061482,-1.861646,9.128971,-0.466650,-4.672286,7.089308,2.257551,-5.326003,0.603374,4.714980,-7.427727,7.634872,0.219812,0.341565,4.183638,3.091185,-8.144827,5.593721,-7.508683,-1.094488,-2.943546,3.270026,-0.194800,9.385229,-1.033524,-0.005598,-3.435649,-5.776745,-3.176086,3.167517,9.009365,-0.471854,-6.248617,4.642965,5.369619,6.273557,4.932803,3.054277,-0.715638,-2.250963,5.486906,4.884931,-1.521103,-3.462317,-6.540883,-2.232409,-0.720942,5.880947,-1.201499,0.857482,-3.589466,-2.444205,2.976720,1.142260,-7.948103,-3.814976,4.148727,4.525504,7.486253,-9.109030,0.732422,2.193938,3.077165,9.220647,3.334968,-3.903688,5.204815,-7.679883,-4.554810,0.200980,6.069552,9.266790,9.767135,-0.688499,-8.652643,-3.476467,-3.482284,2.524852,-2.282944,8.366587,-9.114800,-5.986013,-7.057462,-0.163939,-7.916179,1.601171,-9.418927,-8.372422,5.426318,-8.579650,8.954912,-8.642539,4.785135,-6.664505,-9.767894,8.150292,2.436215,-4.983661,-6.617512,-5.292183,-0.610626,-0.442156,-4.152617,9.340503,-1.550646,2.390059,-8.747849,5.053348,-0.093780,-4.523857,6.129224,3.680877,9.029228,0.391369,-8.548343,-0.323776,4.264614,7.033129,-7.882957,-4.163336,0.996441,-7.519203,8.758678,3.712730,4.923690,-4.947521,6.054773,4.386011,5.863915,5.046252,0.749581,2.815932,-7.773813,-2.156470,3.473006,3.633134,6.935502,-4.282897,2.748961,-3.336577,0.605269,-4.163357,-2.376502,7.635693,-1.562254,2.210917,5.991224,-1.902791,-1.060113,-4.322908,1.166857,-4.906672,2.703196,0.133161,-4.301855,-9.279331,-3.275319,-7.034451,-1.247061,7.540311,-8.206523,-3.578867,8.849031,-3.479523,-1.697218,5.051553,-1.194252,-5.212629,-5.781482,9.293407,5.835042,4.959326,-1.481718,-6.936052,0.672045,2.811228,-3.767153,8.430472,-8.351559,9.077401,-3.679458,7.138246,-9.334821,1.262128,4.119472,3.492880,-1.967976,7.580582,5.671623,2.222160,9.940812,-5.095819,2.822229,8.805563,4.871366,-1.642254,1.226004,7.530021,1.827348,-0.230017,1.253260,6.736785,-3.947122,-0.017449,-8.689235,5.486145,-3.203636,7.730153,9.291944,1.994595,-1.174691,5.338378,6.748107,7.338331,5.778098,-4.938130,-7.422596,-9.179102,-0.748737,-1.421930,-5.296039,-6.297832,1.257576,-7.899432,-4.822379,-4.114684,7.205202,-4.500453,-7.587653,9.256624,1.285520,-2.599962,1.976761,5.644587,2.909786,-1.357505,8.016231,-2.039699,1.049289,4.621516,-1.315712,-8.280638,5.938266,2.615566,-7.253491,3.623250,-9.175379,9.678184,-4.043070,4.616635,-4.521233,-5.581993,-2.898893,1.946109,7.069824,5.065393,-2.098420,-0.617966,-7.745690,5.201110,-9.417352,-8.675636,-0.297772,3.400062,-1.013896,-5.976052,-3.025469,-3.976629,9.775844,-0.987944,2.085290,-8.283075,9.549738,5.477497,-8.363355,5.637006,-6.014863,7.391416,4.756905,8.440847,4.453110,6.615639,-8.003514,-0.193407,4.842520,8.324518,-3.897422,-6.930762,-8.299657,4.104287,-6.782032,0.927367,1.662405,8.076641,7.144187,-7.773756,-4.795734,2.972561,-0.849212,-1.665558,-7.609741,-4.812250,5.601689,9.801480,-0.275528,8.778586,1.338991,9.450733,9.033673,3.144877,-8.197753,-6.779838,0.266409,7.647715,0.598223,0.513730,1.180755,3.296998,-9.469049,-4.988271,6.673407,5.991268,1.368959,2.538636,4.914529,9.460005,5.841858,-7.678620,7.214766,-1.140252,2.629741,5.575281,3.372837,-4.446756,4.247498,-9.807557,-9.231287,1.040785,4.995779,-9.131625,0.031103,-5.844921,9.067879,-4.259685,-4.544220,-1.996646,-8.647329,0.431936,-2.860321,-6.156021,-3.862652,-9.632744,-2.107699,-5.344604,7.427650,5.817461,2.517596,2.274838,-3.424243,8.941830,-7.842060,9.786871,5.128357,-8.111269,-0.749764,0.357403,9.048851,9.555259,4.705078,2.774254,-4.677351,-0.061144,-2.775754,9.800776,3.813402,-7.699340,-2.480861,-1.833983,-5.487205,1.019600,4.476822,8.787253,-4.033347,5.353826,0.563025,-0.464258,1.566990,8.202283,-9.437615,-6.430585,3.818942,2.704871,-6.305174,-9.892947,-9.645733,5.971526,-7.189843,2.767693,1.691479,5.884125,9.617210,7.128120,-2.033668,7.130826,2.646279,-7.403369,-3.481192,-9.712336,9.212621,5.557077,-4.766883,-1.539408,8.687092,3.250988,-7.319116,5.910730,2.823885,-4.633542,4.741880,-9.953593,0.964678,-9.737742,8.919034,0.652359,2.002349,-3.711545,4.527554,-3.976645,-6.139983,-5.726598,-3.212198,2.209383,-9.173137,3.328881,7.715724,-0.507101,-2.800170,-1.036245,6.657046,6.263628,-0.111196,-4.873092,-9.710622,-8.291570,-7.926310,1.687512,0.867322,-1.271931,-5.589875,7.515838,-3.067823,-4.231872,-1.470756,-5.783009,-1.161969,-3.286962,8.305943,3.607467,-2.922173,7.050732,-1.190334,8.503918,0.841132,7.963929,-0.801235,9.308225,-4.662034,9.597622,-1.712727,-2.020916,8.124268,6.525851,1.999387,-0.345318,-7.101745,-9.122423,-7.572351,-1.473711,-1.837370,5.954565,1.677902,2.985623,8.420373,-3.286705,-5.683757,-6.795486,-4.844797,-8.453757,-0.989475,7.069345,-4.072254,3.018759,4.971076,-5.807315,9.916564,-6.492997,-4.570333,-5.643937,3.127069,8.479665,6.766710,1.629415,9.782515,3.495362,4.115289,7.707701,1.389658,-2.026359,-5.140572,-6.157786,4.235955,-4.204510,-8.119283,6.481510,-6.366573,7.620334,-4.094640,1.741191,-2.072193,-6.732718,5.174210,-0.478388,-8.156675,2.032839,3.797205,9.305540,6.408547,4.156002,-4.414200,4.174842,9.536616,6.188862,2.680348,-4.775350,0.175391,7.781543,-2.900871,5.583358,4.456188,6.598715,-3.180379,1.175212,1.575922,1.515942,3.342703,-2.451393,1.339618,-0.536821,-2.829624,8.379439,6.742808,-0.844939,-0.460559,2.335400,-7.682599,-0.976600,6.920093,-9.571723,-1.583840,-8.985749,-9.488881,3.429521,-8.608230,9.925126,-1.730496,4.985792,9.948445,7.481295,0.860522,4.943027,0.254111,1.167258,1.457960,5.701732,7.244579,5.158956,-9.569956,-7.034420,8.841166,7.500761,-4.967378,8.785464,-8.260684,7.603627,2.493442,-9.366131,-9.266360,6.047937,6.258710,-4.378117,0.500730,7.298390,-5.436855,-8.023790,5.698284,0.440813,-1.350499,2.786448,3.047886,7.659116,-5.284179,4.882326,4.137682,-0.582112,-2.120071,1.700273,1.019184,6.772398,-3.781145,5.570645,-9.373207,3.132063,3.364152,4.489703,0.767611,-9.517487,-3.011117,3.853779,-5.349906,2.103969,-0.488672,-6.569287,0.544594,9.041213,-2.427959,2.214426,6.210548,5.019795,1.412349,5.486396,2.688593,-5.269645,8.323020,2.327074,-8.058451,-0.158637,-9.613078,-8.392074,0.223029,6.260989,-5.191038,-4.854973,-7.843604,-8.160147,-9.911012,-6.182134,5.358008,-0.246838,-3.783884,9.490618,-0.242465,3.495723,-7.997207,-2.282763,6.436466,3.840723,-9.777407,8.117062,-5.450330,-4.861382,7.046363,-9.930002,-8.451083,-7.289148,3.354828,0.736429,3.324602,-9.127211,-8.763615,5.400596,-7.745505,3.751346,-8.692907,2.005568,-9.906390,-1.170274,5.046405,3.619389,5.605150,-9.111476,5.378437,-6.120733,6.092419,-8.673240,4.635832,7.948242,4.005236,-8.160186,-0.359284,-6.135583,5.733229,-7.798361,1.982726,-4.551944,6.305707,4.272300,-5.692925,-6.625978,-1.885786,6.199589,-4.895155,-1.472304,1.402151,-9.190792,-7.843451,7.264453,4.647314,-7.594257,4.139779,9.031569,-6.074056,8.811759,-1.340297,-0.717279,-6.604035,-9.295637,-5.410563,-1.152049,3.008514,7.768317,8.647731,8.354772,1.055542,-4.561024,2.981804,1.853712,-1.534963,-4.134289,-3.358512,-9.805992,0.481309,-7.163715,1.169441,1.514778,0.552066,-6.254571,7.129474,9.949103,-5.248044,0.981081,7.772923,0.405143,6.005315,-4.224596,-9.207700,9.020979,7.530803,7.489501,-4.635342,6.459795,-9.226486,9.495503,5.076431,-3.917026,-3.203365,1.681142,-2.181193,5.513982,2.375659,-2.996230,-3.944543,0.723764,8.478182,-5.040559,4.496718,9.734402,-3.869208,-3.353165,0.507919,5.348379,-8.473840,4.470097,0.856108,8.815674,-0.863871,-3.860093,9.950596,-6.028666,-9.636700,-8.370404,-4.356289,8.879027,-5.315179,-2.131094,-4.025190,2.533390,2.089323,-5.143627,-6.606711,0.912257,6.661074,8.086980,4.186445,3.080884,4.320938,3.312095,4.236028,-2.403455,-0.605852,9.842880,-2.592803,-1.522577,2.533967,-0.795044,-0.966784,-1.553589,6.912275,-3.146061,7.684164,-8.254802,9.082785,-7.095601,9.637968,8.576070,5.608197,-9.236817,8.604734,7.299308,3.784873,-9.747110,3.815099,5.627745,5.875919,1.197667,2.039940,0.074055,-4.341098,9.122834,-7.175533,8.057979,6.373628,2.435855,-9.991367,6.871447,-5.021506,7.533070,-5.553448,-4.963712,-3.064854,-0.369706,0.975138,6.079168,6.760074,5.706099,2.846000,-8.287259,0.194306,2.352712,-7.100225,6.611171,7.481386,0.758310,-3.770605,3.869181,3.132168,-1.595879,8.444739,-4.340043,8.269557,-5.288442,7.050892,2.326331,-8.385164,-6.136802,-6.803375,3.306348,7.132545,1.309984,-1.577128,-8.914708,2.741819,-0.456819,-1.368150,4.264004,7.443108,-9.596084,-2.863339,3.845402,1.073753,-7.612266,5.813438,3.998410,-4.344131,-5.379943,5.000810,-0.184002,-4.344084,4.212836,-3.449400,-3.945334,-7.215485,-4.857863,-5.002018,5.773994,8.911602,1.143014,4.670552,9.098727,-2.391203,-3.658238,2.479600,-5.440391,8.547855,-0.787602,-9.341855,9.087080,-5.369033,-6.220444,7.792353,-1.003787,5.478440,-0.622532,-7.815222,-8.519943,3.052391,-2.525973,8.978218,-2.426293,-7.866296,-8.862797,5.239036,9.415153,9.657848,6.085585,7.178368,-0.434375,2.185470,9.974956,-7.694950,-4.783764,-2.801930,-5.855440,0.703411,-1.403572,-0.470549,4.910652,0.836816,0.293133,-8.530539,3.936889,-3.078616,-8.761844,-5.284178,5.689095,6.067845,4.315584,-8.935883,4.168335,-1.994057,3.506773,8.426119,5.224836,2.749992,8.461244,0.593901,9.716063,-7.252440,5.461064,9.291928,-7.470177,7.998931,-8.823360,9.135889,0.766544,9.021511,-2.819479,4.825583,2.606300,-1.870445,-0.209324,-5.241408,6.379235,7.770249,6.635591,0.708735,6.830562,6.085952,-0.636114,-1.827072,0.630082,-3.526524,-9.478819,6.499590,-9.083871,-7.839203,2.559766,-4.495515,-9.688953,4.848837,-8.286521,7.409262,8.675866,6.969318,3.468573,-9.990226,-5.048076,1.863821,-1.297379,-9.491056,-8.594344,-7.792271,6.954649,1.416348,-5.262646,-7.142326,0.585851,5.622201,-2.785220,8.518426,-7.989155,-1.208751,-3.336128,7.911557,-3.749375,-1.541673,-0.051454,-1.377545,4.998701,1.834756,9.552037,3.323524,6.486938,6.568803,8.707450,-6.498797,-7.261048,-7.195664,-6.807832,-7.180560,-5.194499,3.807630,9.159326,-8.919109,2.655871,-0.298777,4.806455,-7.050348,-0.977508,2.289311,-8.430112,6.596615,-2.651385,7.119843,9.040344,-8.853255,-3.672837,0.436534,4.828172,6.110827,4.130927,2.108322,6.343438,-8.417270,-4.401893,3.268291,7.786242,3.761387,3.893311,-4.693713,-9.607802,-8.939937,-2.628967,-8.428534,8.060680,0.074372,-2.364849,-0.661123,-9.908081,1.231564,-2.606670,8.330664,-7.669842,0.521169,1.600926,-8.121476,-2.407052,1.773064,-0.428805,1.294773,8.889999,3.796084,4.882092,9.902897,-0.422948,-3.520611,4.120691,-7.165205,3.334763,7.116044,7.581058,-6.869347,-8.913751,-5.680865,-7.657150,5.921728,-5.291230,4.288732,-5.061274,9.947425,6.021905,6.840312,9.404368,-8.321094,3.920751,-6.638608,-3.034175,8.236821,-0.881550,8.117658,1.374241,-0.691965,7.614289,3.613330,-5.597615,-8.533561,2.447876,-8.825585,5.596355,1.626847,1.232099,1.522600,-6.654288,-6.122048,4.136006,6.471892,-1.128935,-3.949844,6.517488,1.176382,7.136668,-5.252814,9.817590,5.435133,5.957492,-0.244992,-1.843065,-8.796454,-4.225077,9.321641,6.937987,-5.061179,-0.384858,1.418420,-9.698001,2.035182,7.015876,-0.013122,2.119709,9.950244,-2.107632,1.459108,-1.559970,-2.798126,-8.347688,-4.788488,-9.857887,-7.546751,3.311246,0.680007,-4.346320,7.421273,-3.134499,6.765545,-1.739783,-7.355338,-9.515235,1.109092,-4.206339,0.551235,-1.807822,-1.204291,-2.363309,7.565752,-2.805251,5.511611,-4.887611,-5.457678,1.165436,-0.248573,5.811874,-3.511504,-0.893946,-9.336980,0.965422,4.448732,6.810612,7.986007,-6.329149,8.372658,6.586059,-7.461136,-8.726112,-0.793863,-0.427746,6.917553,4.797155,7.719165,3.652643,-5.647750,3.681875,-2.956811,1.638265,-4.769974,7.345144,2.288076,-6.767179,-3.722199,-8.195871,-2.320012,7.063789,-7.169276,-7.729118,-4.237514,9.348223,-4.788894,-3.683234,9.422027,-4.949900,-3.734921,-0.078579,-9.994455,2.215283,1.987419,1.618021,-5.391436,7.746267,-8.061810,-3.167948,3.437456,1.952541,-1.859166,7.588892,-8.650043,4.239051,3.627604,-5.045161,-7.256795,-0.603998,5.620633,-3.681967,-1.133776,7.644091,0.832481,9.806826,3.225279,-1.528681,-6.192648,-5.488055,-6.404936,6.247785,1.089130,1.233764,5.415469,9.238589,-8.479360,-7.722032,4.414475,0.383626,7.290222,7.450754,0.266950,-4.350496,2.002584,-0.236462,-0.321189,5.436208,1.909458,-6.422742,-7.008011,-5.487296,9.099212,1.835427,-1.551454,6.710292,5.504121,-5.224558,-5.203448,5.049428,8.109179,7.202020,5.450388,9.061853,-7.121663,-7.516824,0.447314,3.621172,7.387332,4.827917,1.165439,-8.708881,-1.603232,0.213139,7.489629,-2.363325,2.926962,7.492140,0.866696,0.705768,-1.090940,-5.551581,-5.842201,-2.092825,5.515311,9.161145,-8.775551,7.842561,3.612665,3.744400,2.069967,7.434867,-9.474682,-3.042886,-9.541922,7.320927,8.240421,-2.792500,9.769384,7.813138,6.334908,4.222202,-5.363526,-7.608380,7.937880,1.439961,1.777150,7.254869,7.258966,9.180305,-6.197076,-1.594160,2.872590,8.703033,9.570787,1.078747,-1.678899,-6.000571,7.373343,-1.752790,-8.473131,-3.730099,-3.189271,9.302511,5.792302,2.436125,3.137733,4.578295,4.137460,1.351227,1.156088,1.671881,3.850257,3.617001,-0.649764,-1.903913,6.881179,-7.695372,-5.382825,6.913507,1.155257,2.619049,-1.272550,7.905984,-8.020921,-0.362293,5.386721,3.293734,8.964479,3.623484,-3.955798,-6.117557,-3.368031,9.577859,5.248928,-1.321943,-4.334843,0.915650,-0.971672,-6.423271,-6.087395,2.932458,-7.435063,-4.448240,8.267883,8.042056,9.703292,7.334804,-8.582425,6.153998,8.945421,-9.099158,6.560106,-3.398503,-3.719629,-1.870168,7.463592,-4.608056,-1.007803,3.914063,9.764904,7.526993,-4.588346,-0.979036,-4.070052,-4.545645,-3.942711,0.991707,3.784434,6.602837,-7.272845,-8.138768,8.728855,7.590501,4.083571,8.273544,6.467526,-6.009535,4.603031,-3.872823,-1.306561,6.580789,-5.165475,-0.905616,-0.294038,7.285659,-5.723669,-8.837110,2.581465,9.187708,-5.868847,0.763670,-4.263125,-3.699020,-0.793335,9.925004,7.330107,6.011737,2.974125,4.722258,-4.020593,-3.624301,-4.441770,-8.500357,-1.503834,1.082266,6.275708,-7.446815,-4.061489,1.250688,6.593237,6.229616,-0.068140,-0.672750,-2.232740,7.828851,6.181943,5.178592,0.220844,3.901538,-3.930093,-3.289630,0.535295,2.051612,2.246953,-4.335375,5.805084,-0.253882,8.513702,3.689894,-6.719886,-7.277186,-7.805877,-5.887544,9.197506,8.667677,-4.309516,1.952785,-1.912387,3.181220,-1.266587,-7.227154,9.483162,1.441322,-3.901609,-2.437283,5.852558,-8.264475,1.996652,1.044717,-8.849383,-5.441607,5.096333,-6.752327,-6.363671,8.595076,5.474566,-9.282557,-0.879666,9.611430,-0.621459,-6.236943,-3.711488], dtype = "float32")#candidate|166|(1920,)|const|float32
call_164 = relay.TupleGetItem(func_104_call(relay.reshape(const_165.astype('float64'), [5, 3, 16]), relay.reshape(const_165.astype('float64'), [5, 3, 16]), relay.reshape(const_166.astype('float32'), [1920,]), relay.reshape(const_165.astype('float64'), [5, 3, 16]), relay.reshape(const_165.astype('float64'), [5, 3, 16]), relay.reshape(const_165.astype('float32'), [5, 3, 16]), relay.reshape(const_165.astype('float64'), [5, 3, 16]), ), 8)
call_167 = relay.TupleGetItem(func_112_call(relay.reshape(const_165.astype('float64'), [5, 3, 16]), relay.reshape(const_165.astype('float64'), [5, 3, 16]), relay.reshape(const_166.astype('float32'), [1920,]), relay.reshape(const_165.astype('float64'), [5, 3, 16]), relay.reshape(const_165.astype('float64'), [5, 3, 16]), relay.reshape(const_165.astype('float32'), [5, 3, 16]), relay.reshape(const_165.astype('float64'), [5, 3, 16]), ), 8)
var_168 = relay.var("var_168", dtype = "float64", shape = (11, 12))#candidate|168|(11, 12)|var|float64
bop_169 = relay.logical_and(uop_162.astype('bool'), relay.reshape(var_168.astype('bool'), relay.shape_of(uop_162))) # shape=(11, 12)
output = relay.Tuple([bop_156,call_164,const_165,const_166,bop_169,])
output2 = relay.Tuple([bop_156,call_167,const_165,const_166,bop_169,])
func_172 = relay.Function([var_150,var_155,var_168,], output)
mod['func_172'] = func_172
mod = relay.transform.InferType()(mod)
var_173 = relay.var("var_173", dtype = "float64", shape = ())#candidate|173|()|var|float64
var_174 = relay.var("var_174", dtype = "float64", shape = (11, 12))#candidate|174|(11, 12)|var|float64
var_175 = relay.var("var_175", dtype = "float64", shape = (11, 12))#candidate|175|(11, 12)|var|float64
output = func_172(var_173,var_174,var_175,)
func_176 = relay.Function([var_173,var_174,var_175,], output)
mutated_mod['func_176'] = func_176
mutated_mod = relay.transform.InferType()(mutated_mod)
var_178 = relay.var("var_178", dtype = "float64", shape = (3, 7))#candidate|178|(3, 7)|var|float64
var_179 = relay.var("var_179", dtype = "float64", shape = (3, 7))#candidate|179|(3, 7)|var|float64
bop_180 = relay.power(var_178.astype('float64'), relay.reshape(var_179.astype('float64'), relay.shape_of(var_178))) # shape=(3, 7)
uop_183 = relay.log(var_179.astype('float64')) # shape=(3, 7)
uop_185 = relay.sqrt(uop_183.astype('float64')) # shape=(3, 7)
bop_187 = relay.not_equal(uop_185.astype('bool'), relay.reshape(var_178.astype('bool'), relay.shape_of(uop_185))) # shape=(3, 7)
const_190 = relay.const([[-4.721458,-0.549865,4.245426,6.848414,-5.455891,-4.974261,-5.478800],[-7.768354,-0.265611,5.483315,-7.311251,5.838198,-7.948261,-6.224560],[-6.132925,0.217459,-0.114058,2.890929,-8.421544,6.855479,8.683577]], dtype = "float64")#candidate|190|(3, 7)|const|float64
bop_191 = relay.floor_divide(uop_185.astype('float32'), relay.reshape(const_190.astype('float32'), relay.shape_of(uop_185))) # shape=(3, 7)
const_194 = relay.const([[-0.839026,7.986210,1.034183,-0.134678,-8.906451,-7.263614,3.894050],[-9.455172,-7.128743,-3.286994,-2.438707,8.606357,1.541344,-5.505332],[-9.930444,-8.250041,9.036396,5.474931,0.611287,2.966455,9.260420]], dtype = "float64")#candidate|194|(3, 7)|const|float64
bop_195 = relay.logical_or(bop_180.astype('bool'), relay.reshape(const_194.astype('bool'), relay.shape_of(bop_180))) # shape=(3, 7)
bop_198 = relay.right_shift(uop_185.astype('int64'), relay.reshape(const_190.astype('int64'), relay.shape_of(uop_185))) # shape=(3, 7)
uop_201 = relay.atan(uop_183.astype('float32')) # shape=(3, 7)
var_203 = relay.var("var_203", dtype = "float64", shape = (3, 7))#candidate|203|(3, 7)|var|float64
bop_204 = relay.equal(uop_183.astype('bool'), relay.reshape(var_203.astype('bool'), relay.shape_of(uop_183))) # shape=(3, 7)
bop_207 = relay.minimum(bop_198.astype('uint32'), relay.reshape(uop_183.astype('uint32'), relay.shape_of(bop_198))) # shape=(3, 7)
var_210 = relay.var("var_210", dtype = "float64", shape = (3, 7))#candidate|210|(3, 7)|var|float64
bop_211 = relay.not_equal(uop_183.astype('bool'), relay.reshape(var_210.astype('bool'), relay.shape_of(uop_183))) # shape=(3, 7)
uop_214 = relay.sigmoid(bop_187.astype('float64')) # shape=(3, 7)
const_216 = relay.const([[True,True,True,False,True,True,False],[True,True,True,True,False,False,False],[False,False,False,False,False,False,False]], dtype = "bool")#candidate|216|(3, 7)|const|bool
bop_217 = relay.not_equal(bop_204.astype('bool'), relay.reshape(const_216.astype('bool'), relay.shape_of(bop_204))) # shape=(3, 7)
bop_220 = relay.greater_equal(uop_185.astype('bool'), relay.reshape(bop_211.astype('bool'), relay.shape_of(uop_185))) # shape=(3, 7)
bop_223 = relay.not_equal(uop_214.astype('bool'), relay.reshape(uop_185.astype('bool'), relay.shape_of(uop_214))) # shape=(3, 7)
uop_226 = relay.acos(uop_214.astype('float32')) # shape=(3, 7)
var_228 = relay.var("var_228", dtype = "float64", shape = (3, 7))#candidate|228|(3, 7)|var|float64
bop_229 = relay.floor_mod(uop_183.astype('float64'), relay.reshape(var_228.astype('float64'), relay.shape_of(uop_183))) # shape=(3, 7)
uop_232 = relay.exp(uop_226.astype('float64')) # shape=(3, 7)
uop_234 = relay.log(uop_232.astype('float32')) # shape=(3, 7)
func_12_call = mod.get_global_var('func_12')
func_15_call = mutated_mod.get_global_var('func_15')
const_237 = relay.const(0.946485, dtype = "float64")#candidate|237|()|const|float64
var_238 = relay.var("var_238", dtype = "float32", shape = (2, 960))#candidate|238|(2, 960)|var|float32
call_236 = func_12_call(relay.reshape(const_237.astype('float64'), []), relay.reshape(var_238.astype('float32'), [16, 8, 15]), )
call_239 = func_12_call(relay.reshape(const_237.astype('float64'), []), relay.reshape(var_238.astype('float32'), [16, 8, 15]), )
var_240 = relay.var("var_240", dtype = "float32", shape = (3, 7))#candidate|240|(3, 7)|var|float32
bop_241 = relay.minimum(uop_234.astype('float32'), relay.reshape(var_240.astype('float32'), relay.shape_of(uop_234))) # shape=(3, 7)
uop_244 = relay.sigmoid(uop_234.astype('float32')) # shape=(3, 7)
uop_246 = relay.exp(uop_185.astype('float64')) # shape=(3, 7)
var_248 = relay.var("var_248", dtype = "float32", shape = (3, 7))#candidate|248|(3, 7)|var|float32
bop_249 = relay.logical_or(uop_244.astype('bool'), relay.reshape(var_248.astype('bool'), relay.shape_of(uop_244))) # shape=(3, 7)
uop_252 = relay.log10(uop_234.astype('float32')) # shape=(3, 7)
uop_254 = relay.acos(uop_252.astype('float64')) # shape=(3, 7)
bop_256 = relay.minimum(uop_254.astype('int8'), relay.reshape(uop_246.astype('int8'), relay.shape_of(uop_254))) # shape=(3, 7)
var_259 = relay.var("var_259", dtype = "float64", shape = (3, 7))#candidate|259|(3, 7)|var|float64
bop_260 = relay.bitwise_xor(uop_232.astype('int8'), relay.reshape(var_259.astype('int8'), relay.shape_of(uop_232))) # shape=(3, 7)
uop_263 = relay.asin(uop_252.astype('float64')) # shape=(3, 7)
uop_265 = relay.cosh(uop_263.astype('float64')) # shape=(3, 7)
uop_267 = relay.sigmoid(uop_265.astype('float64')) # shape=(3, 7)
func_104_call = mod.get_global_var('func_104')
func_112_call = mutated_mod.get_global_var('func_112')
var_270 = relay.var("var_270", dtype = "float64", shape = (240,))#candidate|270|(240,)|var|float64
call_269 = relay.TupleGetItem(func_104_call(relay.reshape(var_270.astype('float64'), [5, 3, 16]), relay.reshape(var_270.astype('float64'), [5, 3, 16]), relay.reshape(var_238.astype('float32'), [1920,]), relay.reshape(var_270.astype('float64'), [5, 3, 16]), relay.reshape(var_270.astype('float64'), [5, 3, 16]), relay.reshape(var_270.astype('float32'), [5, 3, 16]), relay.reshape(var_270.astype('float64'), [5, 3, 16]), ), 4)
call_271 = relay.TupleGetItem(func_112_call(relay.reshape(var_270.astype('float64'), [5, 3, 16]), relay.reshape(var_270.astype('float64'), [5, 3, 16]), relay.reshape(var_238.astype('float32'), [1920,]), relay.reshape(var_270.astype('float64'), [5, 3, 16]), relay.reshape(var_270.astype('float64'), [5, 3, 16]), relay.reshape(var_270.astype('float32'), [5, 3, 16]), relay.reshape(var_270.astype('float64'), [5, 3, 16]), ), 4)
bop_272 = relay.logical_and(uop_267.astype('bool'), relay.reshape(bop_260.astype('bool'), relay.shape_of(uop_267))) # shape=(3, 7)
bop_275 = relay.less(bop_272.astype('bool'), relay.reshape(uop_265.astype('bool'), relay.shape_of(bop_272))) # shape=(3, 7)
func_146_call = mod.get_global_var('func_146')
func_148_call = mutated_mod.get_global_var('func_148')
var_279 = relay.var("var_279", dtype = "float32", shape = (54,))#candidate|279|(54,)|var|float32
call_278 = relay.TupleGetItem(func_146_call(relay.reshape(var_279.astype('float32'), [9, 6])), 0)
call_280 = relay.TupleGetItem(func_148_call(relay.reshape(var_279.astype('float32'), [9, 6])), 0)
uop_281 = relay.cos(uop_267.astype('float64')) # shape=(3, 7)
var_283 = relay.var("var_283", dtype = "float64", shape = (3, 7))#candidate|283|(3, 7)|var|float64
bop_284 = relay.bitwise_and(uop_265.astype('int64'), relay.reshape(var_283.astype('int64'), relay.shape_of(uop_265))) # shape=(3, 7)
output = relay.Tuple([bop_191,bop_195,uop_201,bop_207,bop_217,bop_220,bop_223,bop_229,call_236,const_237,var_238,bop_241,bop_249,bop_256,call_269,var_270,bop_275,call_278,var_279,uop_281,bop_284,])
output2 = relay.Tuple([bop_191,bop_195,uop_201,bop_207,bop_217,bop_220,bop_223,bop_229,call_239,const_237,var_238,bop_241,bop_249,bop_256,call_271,var_270,bop_275,call_280,var_279,uop_281,bop_284,])
func_287 = relay.Function([var_178,var_179,var_203,var_210,var_228,var_238,var_240,var_248,var_259,var_270,var_279,var_283,], output)
mod['func_287'] = func_287
mod = relay.transform.InferType()(mod)
var_288 = relay.var("var_288", dtype = "float64", shape = (3, 7))#candidate|288|(3, 7)|var|float64
var_289 = relay.var("var_289", dtype = "float64", shape = (3, 7))#candidate|289|(3, 7)|var|float64
var_290 = relay.var("var_290", dtype = "float64", shape = (3, 7))#candidate|290|(3, 7)|var|float64
var_291 = relay.var("var_291", dtype = "float64", shape = (3, 7))#candidate|291|(3, 7)|var|float64
var_292 = relay.var("var_292", dtype = "float64", shape = (3, 7))#candidate|292|(3, 7)|var|float64
var_293 = relay.var("var_293", dtype = "float32", shape = (2, 960))#candidate|293|(2, 960)|var|float32
var_294 = relay.var("var_294", dtype = "float32", shape = (3, 7))#candidate|294|(3, 7)|var|float32
var_295 = relay.var("var_295", dtype = "float32", shape = (3, 7))#candidate|295|(3, 7)|var|float32
var_296 = relay.var("var_296", dtype = "float64", shape = (3, 7))#candidate|296|(3, 7)|var|float64
var_297 = relay.var("var_297", dtype = "float64", shape = (240,))#candidate|297|(240,)|var|float64
var_298 = relay.var("var_298", dtype = "float32", shape = (54,))#candidate|298|(54,)|var|float32
var_299 = relay.var("var_299", dtype = "float64", shape = (3, 7))#candidate|299|(3, 7)|var|float64
output = func_287(var_288,var_289,var_290,var_291,var_292,var_293,var_294,var_295,var_296,var_297,var_298,var_299,)
func_300 = relay.Function([var_288,var_289,var_290,var_291,var_292,var_293,var_294,var_295,var_296,var_297,var_298,var_299,], output)
mutated_mod['func_300'] = func_300
mutated_mod = relay.transform.InferType()(mutated_mod)
var_302 = relay.var("var_302", dtype = "float64", shape = (16, 15))#candidate|302|(16, 15)|var|float64
var_303 = relay.var("var_303", dtype = "float64", shape = (16, 15))#candidate|303|(16, 15)|var|float64
bop_304 = relay.multiply(var_302.astype('float64'), relay.reshape(var_303.astype('float64'), relay.shape_of(var_302))) # shape=(16, 15)
output = bop_304
output2 = bop_304
func_307 = relay.Function([var_302,var_303,], output)
mod['func_307'] = func_307
mod = relay.transform.InferType()(mod)
mutated_mod['func_307'] = func_307
mutated_mod = relay.transform.InferType()(mutated_mod)
func_307_call = mutated_mod.get_global_var('func_307')
var_309 = relay.var("var_309", dtype = "float64", shape = (16, 15))#candidate|309|(16, 15)|var|float64
var_310 = relay.var("var_310", dtype = "float64", shape = (16, 15))#candidate|310|(16, 15)|var|float64
call_308 = func_307_call(var_309,var_310,)
output = call_308
func_311 = relay.Function([var_309,var_310,], output)
mutated_mod['func_311'] = func_311
mutated_mod = relay.transform.InferType()(mutated_mod)
var_313 = relay.var("var_313", dtype = "int64", shape = (14,))#candidate|313|(14,)|var|int64
var_314 = relay.var("var_314", dtype = "int64", shape = (14,))#candidate|314|(14,)|var|int64
bop_315 = relay.left_shift(var_313.astype('int64'), relay.reshape(var_314.astype('int64'), relay.shape_of(var_313))) # shape=(14,)
bop_318 = relay.subtract(bop_315.astype('uint16'), relay.reshape(var_313.astype('uint16'), relay.shape_of(bop_315))) # shape=(14,)
uop_321 = relay.cosh(var_314.astype('float32')) # shape=(14,)
var_323 = relay.var("var_323", dtype = "float32", shape = (14,))#candidate|323|(14,)|var|float32
bop_324 = relay.minimum(uop_321.astype('uint32'), relay.reshape(var_323.astype('uint32'), relay.shape_of(uop_321))) # shape=(14,)
output = relay.Tuple([bop_318,bop_324,])
output2 = relay.Tuple([bop_318,bop_324,])
func_327 = relay.Function([var_313,var_314,var_323,], output)
mod['func_327'] = func_327
mod = relay.transform.InferType()(mod)
var_328 = relay.var("var_328", dtype = "int64", shape = (14,))#candidate|328|(14,)|var|int64
var_329 = relay.var("var_329", dtype = "int64", shape = (14,))#candidate|329|(14,)|var|int64
var_330 = relay.var("var_330", dtype = "float32", shape = (14,))#candidate|330|(14,)|var|float32
output = func_327(var_328,var_329,var_330,)
func_331 = relay.Function([var_328,var_329,var_330,], output)
mutated_mod['func_331'] = func_331
mutated_mod = relay.transform.InferType()(mutated_mod)
var_333 = relay.var("var_333", dtype = "uint32", shape = (8,))#candidate|333|(8,)|var|uint32
var_334 = relay.var("var_334", dtype = "uint32", shape = (8,))#candidate|334|(8,)|var|uint32
bop_335 = relay.logical_xor(var_333.astype('uint32'), relay.reshape(var_334.astype('uint32'), relay.shape_of(var_333))) # shape=(8,)
uop_338 = relay.rsqrt(var_334.astype('float64')) # shape=(8,)
uop_340 = relay.log(uop_338.astype('float32')) # shape=(8,)
uop_342 = relay.sinh(uop_338.astype('float32')) # shape=(8,)
bop_344 = relay.bitwise_xor(uop_338.astype('int32'), relay.reshape(var_334.astype('int32'), relay.shape_of(uop_338))) # shape=(8,)
var_347 = relay.var("var_347", dtype = "int32", shape = (8,))#candidate|347|(8,)|var|int32
bop_348 = relay.less(bop_344.astype('bool'), relay.reshape(var_347.astype('bool'), relay.shape_of(bop_344))) # shape=(8,)
var_351 = relay.var("var_351", dtype = "int32", shape = (8,))#candidate|351|(8,)|var|int32
bop_352 = relay.floor_mod(bop_344.astype('float64'), relay.reshape(var_351.astype('float64'), relay.shape_of(bop_344))) # shape=(8,)
bop_355 = relay.logical_or(bop_344.astype('bool'), relay.reshape(var_347.astype('bool'), relay.shape_of(bop_344))) # shape=(8,)
var_358 = relay.var("var_358", dtype = "float32", shape = (8,))#candidate|358|(8,)|var|float32
bop_359 = relay.greater(uop_340.astype('bool'), relay.reshape(var_358.astype('bool'), relay.shape_of(uop_340))) # shape=(8,)
uop_362 = relay.cosh(bop_359.astype('float32')) # shape=(8,)
uop_364 = relay.sqrt(uop_362.astype('float64')) # shape=(8,)
uop_366 = relay.log(uop_364.astype('float64')) # shape=(8,)
output = relay.Tuple([bop_335,uop_342,bop_348,bop_352,bop_355,uop_366,])
output2 = relay.Tuple([bop_335,uop_342,bop_348,bop_352,bop_355,uop_366,])
func_368 = relay.Function([var_333,var_334,var_347,var_351,var_358,], output)
mod['func_368'] = func_368
mod = relay.transform.InferType()(mod)
mutated_mod['func_368'] = func_368
mutated_mod = relay.transform.InferType()(mutated_mod)
func_368_call = mutated_mod.get_global_var('func_368')
var_370 = relay.var("var_370", dtype = "uint32", shape = (8,))#candidate|370|(8,)|var|uint32
var_371 = relay.var("var_371", dtype = "uint32", shape = (8,))#candidate|371|(8,)|var|uint32
var_372 = relay.var("var_372", dtype = "int32", shape = (8,))#candidate|372|(8,)|var|int32
var_373 = relay.var("var_373", dtype = "int32", shape = (8,))#candidate|373|(8,)|var|int32
var_374 = relay.var("var_374", dtype = "float32", shape = (8,))#candidate|374|(8,)|var|float32
call_369 = func_368_call(var_370,var_371,var_372,var_373,var_374,)
output = call_369
func_375 = relay.Function([var_370,var_371,var_372,var_373,var_374,], output)
mutated_mod['func_375'] = func_375
mutated_mod = relay.transform.InferType()(mutated_mod)
const_377 = relay.const([9.161367,2.143987,-0.711316,-0.654347], dtype = "float32")#candidate|377|(4,)|const|float32
uop_378 = relay.sin(const_377.astype('float32')) # shape=(4,)
output = uop_378
output2 = uop_378
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()()
res3 = intrp3.evaluate()()
res4 = intrp4.evaluate()()
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()()
res7 = intrp7.evaluate()()
res8 = intrp8.evaluate()()
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()()
res11 = intrp11.evaluate()()
res12 = intrp12.evaluate()()
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()()
res15 = intrp15.evaluate()()
res16 = intrp16.evaluate()()
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()()
res19 = intrp19.evaluate()()
res20 = intrp20.evaluate()()
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()()
res23 = intrp23.evaluate()()
res24 = intrp24.evaluate()()
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''45: TVMFuncCall
44: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
43: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
42: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
41: tvm::IRModule::FromExpr(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&)
40: tvm::IRModule::FromExprInContext(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >)
39: tvm::IRModuleNode::Add(tvm::GlobalVar const&, tvm::BaseFunc const&, bool)
38: tvm::WarnIfMalformed(tvm::IRModule const&, tvm::relay::Function)
37: tvm::relay::FreeTypeVars(tvm::RelayExpr const&, tvm::IRModule const&)
36: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
34: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
32: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
31: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
30: tvm::relay::ExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
29: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
28: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
27: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
26: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
25: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
24: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
23: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
22: _ZNSt17_Function_handlerIFvPKN3tvm5relay7LetNodeEEZNS1_15TypeVarEVis
21: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
20: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
19: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
16: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
15: tvm::relay::ExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
14: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
13: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
12: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
11: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
10: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
9: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
8: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
7: _ZNSt17_Function_handlerIFvPKN3tvm5relay7LetNodeEEZNS1_15TypeVarEVis
6: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
5: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
4: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9RelayEx
1: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::ConstructorNode const*)
0: tvm::IRModuleNode::LookupTypeDef(tvm::GlobalTypeVar const&) const

'''