import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (2,))#candidate|0|(2,)|var|float64
var_1 = relay.var("var_1", dtype = "float64", shape = (2,))#candidate|1|(2,)|var|float64
bop_2 = relay.mod(var_0.astype('float64'), relay.reshape(var_1.astype('float64'), relay.shape_of(var_0))) # shape=(2,)
bop_5 = relay.maximum(var_0.astype('uint64'), relay.reshape(var_1.astype('uint64'), relay.shape_of(var_0))) # shape=(2,)
output = relay.Tuple([bop_2,bop_5,])
output2 = relay.Tuple([bop_2,bop_5,])
func_8 = relay.Function([var_0,var_1,], output)
mod['func_8'] = func_8
mod = relay.transform.InferType()(mod)
mutated_mod['func_8'] = func_8
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8_call = mutated_mod.get_global_var('func_8')
var_10 = relay.var("var_10", dtype = "float64", shape = (2,))#candidate|10|(2,)|var|float64
var_11 = relay.var("var_11", dtype = "float64", shape = (2,))#candidate|11|(2,)|var|float64
call_9 = func_8_call(var_10,var_11,)
output = call_9
func_12 = relay.Function([var_10,var_11,], output)
mutated_mod['func_12'] = func_12
mutated_mod = relay.transform.InferType()(mutated_mod)
var_14 = relay.var("var_14", dtype = "float32", shape = ())#candidate|14|()|var|float32
var_15 = relay.var("var_15", dtype = "float32", shape = ())#candidate|15|()|var|float32
bop_16 = relay.floor_mod(var_14.astype('float32'), var_15.astype('float32')) # shape=()
uop_19 = relay.sqrt(var_14.astype('float32')) # shape=()
output = relay.Tuple([bop_16,uop_19,])
output2 = relay.Tuple([bop_16,uop_19,])
func_21 = relay.Function([var_14,var_15,], output)
mod['func_21'] = func_21
mod = relay.transform.InferType()(mod)
mutated_mod['func_21'] = func_21
mutated_mod = relay.transform.InferType()(mutated_mod)
func_21_call = mutated_mod.get_global_var('func_21')
var_23 = relay.var("var_23", dtype = "float32", shape = ())#candidate|23|()|var|float32
var_24 = relay.var("var_24", dtype = "float32", shape = ())#candidate|24|()|var|float32
call_22 = func_21_call(var_23,var_24,)
output = call_22
func_25 = relay.Function([var_23,var_24,], output)
mutated_mod['func_25'] = func_25
mutated_mod = relay.transform.InferType()(mutated_mod)
const_27 = relay.const(7, dtype = "int64")#candidate|27|()|const|int64
var_28 = relay.var("var_28", dtype = "int64", shape = (3,))#candidate|28|(3,)|var|int64
bop_29 = relay.greater(const_27.astype('bool'), var_28.astype('bool')) # shape=(3,)
bop_32 = relay.equal(bop_29.astype('bool'), relay.reshape(var_28.astype('bool'), relay.shape_of(bop_29))) # shape=(3,)
var_35 = relay.var("var_35", dtype = "int64", shape = (3,))#candidate|35|(3,)|var|int64
bop_36 = relay.bitwise_or(var_28.astype('int32'), relay.reshape(var_35.astype('int32'), relay.shape_of(var_28))) # shape=(3,)
uop_39 = relay.sinh(bop_29.astype('float32')) # shape=(3,)
uop_41 = relay.asinh(uop_39.astype('float32')) # shape=(3,)
bop_43 = relay.logical_xor(uop_41.astype('uint8'), const_27.astype('uint8')) # shape=(3,)
uop_46 = relay.log(bop_43.astype('float64')) # shape=(3,)
bop_48 = relay.logical_or(uop_46.astype('bool'), relay.reshape(bop_36.astype('bool'), relay.shape_of(uop_46))) # shape=(3,)
uop_51 = relay.rsqrt(bop_36.astype('float64')) # shape=(3,)
uop_53 = relay.cos(uop_39.astype('float64')) # shape=(3,)
output = relay.Tuple([bop_32,bop_48,uop_51,uop_53,])
output2 = relay.Tuple([bop_32,bop_48,uop_51,uop_53,])
func_55 = relay.Function([var_28,var_35,], output)
mod['func_55'] = func_55
mod = relay.transform.InferType()(mod)
var_56 = relay.var("var_56", dtype = "int64", shape = (3,))#candidate|56|(3,)|var|int64
var_57 = relay.var("var_57", dtype = "int64", shape = (3,))#candidate|57|(3,)|var|int64
output = func_55(var_56,var_57,)
func_58 = relay.Function([var_56,var_57,], output)
mutated_mod['func_58'] = func_58
mutated_mod = relay.transform.InferType()(mutated_mod)
var_60 = relay.var("var_60", dtype = "float64", shape = (13,))#candidate|60|(13,)|var|float64
uop_61 = relay.acos(var_60.astype('float64')) # shape=(13,)
bop_63 = relay.logical_and(uop_61.astype('bool'), relay.reshape(var_60.astype('bool'), relay.shape_of(uop_61))) # shape=(13,)
uop_66 = relay.exp(uop_61.astype('float32')) # shape=(13,)
bop_68 = relay.subtract(uop_66.astype('uint64'), relay.reshape(bop_63.astype('uint64'), relay.shape_of(uop_66))) # shape=(13,)
uop_71 = relay.cosh(bop_68.astype('float64')) # shape=(13,)
uop_73 = relay.asin(uop_66.astype('float32')) # shape=(13,)
bop_75 = relay.mod(uop_66.astype('float32'), relay.reshape(uop_61.astype('float32'), relay.shape_of(uop_66))) # shape=(13,)
bop_78 = relay.bitwise_or(uop_66.astype('int8'), relay.reshape(uop_71.astype('int8'), relay.shape_of(uop_66))) # shape=(13,)
uop_81 = relay.atanh(var_60.astype('float64')) # shape=(13,)
uop_83 = relay.rsqrt(uop_73.astype('float64')) # shape=(13,)
uop_85 = relay.erf(uop_83.astype('float32')) # shape=(13,)
uop_87 = relay.acosh(bop_68.astype('float32')) # shape=(13,)
bop_89 = relay.equal(uop_71.astype('bool'), relay.reshape(uop_61.astype('bool'), relay.shape_of(uop_71))) # shape=(13,)
var_92 = relay.var("var_92", dtype = "float32", shape = (13,))#candidate|92|(13,)|var|float32
bop_93 = relay.maximum(uop_85.astype('uint16'), relay.reshape(var_92.astype('uint16'), relay.shape_of(uop_85))) # shape=(13,)
uop_96 = relay.atanh(uop_85.astype('float32')) # shape=(13,)
bop_98 = relay.less(uop_87.astype('bool'), relay.reshape(uop_96.astype('bool'), relay.shape_of(uop_87))) # shape=(13,)
uop_101 = relay.exp(bop_98.astype('float32')) # shape=(13,)
bop_103 = relay.add(bop_98.astype('uint64'), relay.reshape(uop_81.astype('uint64'), relay.shape_of(bop_98))) # shape=(13,)
uop_106 = relay.acos(uop_96.astype('float64')) # shape=(13,)
var_108 = relay.var("var_108", dtype = "float32", shape = (13,))#candidate|108|(13,)|var|float32
bop_109 = relay.floor_divide(uop_96.astype('float32'), relay.reshape(var_108.astype('float32'), relay.shape_of(uop_96))) # shape=(13,)
bop_112 = relay.floor_mod(bop_98.astype('float64'), relay.reshape(uop_87.astype('float64'), relay.shape_of(bop_98))) # shape=(13,)
uop_115 = relay.sigmoid(uop_85.astype('float32')) # shape=(13,)
bop_117 = relay.less_equal(bop_112.astype('bool'), relay.reshape(uop_81.astype('bool'), relay.shape_of(bop_112))) # shape=(13,)
uop_120 = relay.acos(uop_83.astype('float32')) # shape=(13,)
const_122 = relay.const([-5.564320,6.371421,8.194232,4.960731,1.593345,-4.273392,9.138941,5.280513,9.103685,1.202030,9.275634,-0.076761,2.720293], dtype = "float64")#candidate|122|(13,)|const|float64
bop_123 = relay.greater_equal(uop_106.astype('bool'), relay.reshape(const_122.astype('bool'), relay.shape_of(uop_106))) # shape=(13,)
uop_126 = relay.cosh(bop_123.astype('float64')) # shape=(13,)
func_21_call = mod.get_global_var('func_21')
func_25_call = mutated_mod.get_global_var('func_25')
const_129 = relay.const(7.502548, dtype = "float32")#candidate|129|()|const|float32
call_128 = relay.TupleGetItem(func_21_call(relay.reshape(const_129.astype('float32'), []), relay.reshape(const_129.astype('float32'), []), ), 1)
call_130 = relay.TupleGetItem(func_25_call(relay.reshape(const_129.astype('float32'), []), relay.reshape(const_129.astype('float32'), []), ), 1)
uop_131 = relay.sigmoid(uop_126.astype('float32')) # shape=(13,)
var_133 = relay.var("var_133", dtype = "float32", shape = (13,))#candidate|133|(13,)|var|float32
bop_134 = relay.power(uop_131.astype('float32'), relay.reshape(var_133.astype('float32'), relay.shape_of(uop_131))) # shape=(13,)
bop_137 = relay.logical_or(uop_126.astype('bool'), relay.reshape(var_133.astype('bool'), relay.shape_of(uop_126))) # shape=(13,)
func_21_call = mod.get_global_var('func_21')
func_25_call = mutated_mod.get_global_var('func_25')
call_140 = relay.TupleGetItem(func_21_call(relay.reshape(call_128.astype('float32'), []), relay.reshape(call_128.astype('float32'), []), ), 0)
call_141 = relay.TupleGetItem(func_25_call(relay.reshape(call_128.astype('float32'), []), relay.reshape(call_128.astype('float32'), []), ), 0)
output = relay.Tuple([bop_75,bop_78,bop_89,bop_93,uop_101,bop_103,bop_109,uop_115,bop_117,uop_120,call_128,const_129,bop_134,bop_137,call_140,])
output2 = relay.Tuple([bop_75,bop_78,bop_89,bop_93,uop_101,bop_103,bop_109,uop_115,bop_117,uop_120,call_130,const_129,bop_134,bop_137,call_141,])
func_142 = relay.Function([var_60,var_92,var_108,var_133,], output)
mod['func_142'] = func_142
mod = relay.transform.InferType()(mod)
var_143 = relay.var("var_143", dtype = "float64", shape = (13,))#candidate|143|(13,)|var|float64
var_144 = relay.var("var_144", dtype = "float32", shape = (13,))#candidate|144|(13,)|var|float32
var_145 = relay.var("var_145", dtype = "float32", shape = (13,))#candidate|145|(13,)|var|float32
var_146 = relay.var("var_146", dtype = "float32", shape = (13,))#candidate|146|(13,)|var|float32
output = func_142(var_143,var_144,var_145,var_146,)
func_147 = relay.Function([var_143,var_144,var_145,var_146,], output)
mutated_mod['func_147'] = func_147
mutated_mod = relay.transform.InferType()(mutated_mod)
var_149 = relay.var("var_149", dtype = "float64", shape = (10, 14))#candidate|149|(10, 14)|var|float64
var_150 = relay.var("var_150", dtype = "float64", shape = (10, 14))#candidate|150|(10, 14)|var|float64
bop_151 = relay.minimum(var_149.astype('float64'), relay.reshape(var_150.astype('float64'), relay.shape_of(var_149))) # shape=(10, 14)
output = relay.Tuple([bop_151,])
output2 = relay.Tuple([bop_151,])
func_154 = relay.Function([var_149,var_150,], output)
mod['func_154'] = func_154
mod = relay.transform.InferType()(mod)
var_155 = relay.var("var_155", dtype = "float64", shape = (10, 14))#candidate|155|(10, 14)|var|float64
var_156 = relay.var("var_156", dtype = "float64", shape = (10, 14))#candidate|156|(10, 14)|var|float64
output = func_154(var_155,var_156,)
func_157 = relay.Function([var_155,var_156,], output)
mutated_mod['func_157'] = func_157
mutated_mod = relay.transform.InferType()(mutated_mod)
var_159 = relay.var("var_159", dtype = "float64", shape = (14, 5, 2))#candidate|159|(14, 5, 2)|var|float64
const_160 = relay.const([[[6.959181,0.620518],[-4.555314,7.997954],[9.168728,9.458285],[-9.213241,-6.846584],[-9.228258,-1.832896]],[[3.319605,-4.924577],[-6.882723,-9.524854],[-6.854421,2.865729],[3.538309,0.091390],[-3.871270,3.714008]],[[7.284608,5.238911],[9.788710,-7.209867],[4.747573,-9.357078],[6.071725,6.752147],[-7.340932,-0.333278]],[[-8.233729,-0.691830],[4.668915,2.332124],[-1.519490,5.344495],[8.500923,3.364470],[-9.664070,-0.383020]],[[4.967741,-2.547220],[-9.116685,-7.991197],[2.858370,5.472096],[8.090374,1.484172],[2.550712,-7.491545]],[[-8.136444,0.582966],[9.114074,-3.235443],[0.398900,1.089963],[8.730116,9.299374],[-8.650938,-1.503116]],[[0.585352,4.503915],[0.919019,9.063729],[7.094000,4.015778],[6.901378,5.864824],[6.288939,-7.246029]],[[-7.786618,8.150567],[9.382331,8.471840],[2.183221,-5.005471],[-5.099528,6.484339],[-0.331626,-8.156197]],[[-6.103790,0.753812],[1.267886,-0.775016],[-7.945067,9.886432],[0.165943,6.721093],[9.619175,-0.454663]],[[-2.450182,4.216808],[-7.821983,6.988120],[6.756046,-1.198208],[8.153922,9.804058],[-1.844207,9.068303]],[[-7.699233,4.965125],[-0.506445,3.999009],[-8.247251,-2.830376],[-8.532331,8.393748],[-3.013888,5.649358]],[[-7.273947,5.808660],[-9.654797,-5.189483],[7.157854,9.308172],[-2.575356,3.529019],[9.903679,2.800561]],[[-7.370663,9.594947],[2.583332,8.056755],[2.107564,-5.161450],[-8.281317,8.178618],[-6.366009,2.776480]],[[6.285588,-5.139693],[9.907883,-6.495448],[-5.623263,-0.352371],[9.848167,5.430446],[-8.043070,-5.685283]]], dtype = "float64")#candidate|160|(14, 5, 2)|const|float64
bop_161 = relay.divide(var_159.astype('float64'), relay.reshape(const_160.astype('float64'), relay.shape_of(var_159))) # shape=(14, 5, 2)
bop_164 = relay.less(var_159.astype('bool'), relay.reshape(const_160.astype('bool'), relay.shape_of(var_159))) # shape=(14, 5, 2)
bop_167 = relay.right_shift(const_160.astype('int32'), relay.reshape(var_159.astype('int32'), relay.shape_of(const_160))) # shape=(14, 5, 2)
bop_170 = relay.logical_and(var_159.astype('bool'), relay.reshape(bop_167.astype('bool'), relay.shape_of(var_159))) # shape=(14, 5, 2)
output = relay.Tuple([bop_161,bop_164,bop_170,])
output2 = relay.Tuple([bop_161,bop_164,bop_170,])
func_173 = relay.Function([var_159,], output)
mod['func_173'] = func_173
mod = relay.transform.InferType()(mod)
mutated_mod['func_173'] = func_173
mutated_mod = relay.transform.InferType()(mutated_mod)
var_174 = relay.var("var_174", dtype = "float64", shape = (14, 5, 2))#candidate|174|(14, 5, 2)|var|float64
func_173_call = mutated_mod.get_global_var('func_173')
call_175 = func_173_call(var_174)
output = call_175
func_176 = relay.Function([var_174], output)
mutated_mod['func_176'] = func_176
mutated_mod = relay.transform.InferType()(mutated_mod)
var_178 = relay.var("var_178", dtype = "int8", shape = (1, 12, 4))#candidate|178|(1, 12, 4)|var|int8
var_179 = relay.var("var_179", dtype = "int8", shape = (1, 12, 4))#candidate|179|(1, 12, 4)|var|int8
bop_180 = relay.multiply(var_178.astype('int8'), relay.reshape(var_179.astype('int8'), relay.shape_of(var_178))) # shape=(1, 12, 4)
uop_183 = relay.sigmoid(var_178.astype('float32')) # shape=(1, 12, 4)
uop_185 = relay.cosh(uop_183.astype('float64')) # shape=(1, 12, 4)
uop_187 = relay.erf(uop_185.astype('float32')) # shape=(1, 12, 4)
uop_189 = relay.log10(uop_187.astype('float32')) # shape=(1, 12, 4)
uop_191 = relay.sigmoid(uop_189.astype('float32')) # shape=(1, 12, 4)
output = relay.Tuple([bop_180,uop_191,])
output2 = relay.Tuple([bop_180,uop_191,])
func_193 = relay.Function([var_178,var_179,], output)
mod['func_193'] = func_193
mod = relay.transform.InferType()(mod)
mutated_mod['func_193'] = func_193
mutated_mod = relay.transform.InferType()(mutated_mod)
func_193_call = mutated_mod.get_global_var('func_193')
var_195 = relay.var("var_195", dtype = "int8", shape = (1, 12, 4))#candidate|195|(1, 12, 4)|var|int8
var_196 = relay.var("var_196", dtype = "int8", shape = (1, 12, 4))#candidate|196|(1, 12, 4)|var|int8
call_194 = func_193_call(var_195,var_196,)
output = call_194
func_197 = relay.Function([var_195,var_196,], output)
mutated_mod['func_197'] = func_197
mutated_mod = relay.transform.InferType()(mutated_mod)
const_199 = relay.const([[[-2.634635,-9.132446,-2.814748,-2.432615,-4.340279,3.862719,-8.560143,-0.121743,-9.865341,-1.450583,-7.143967],[3.514047,0.116949,9.022014,1.015533,4.574421,1.989694,2.880779,-2.700593,-6.235177,-0.839064,0.072133],[1.189580,-7.456456,-0.819818,8.819637,-7.456698,2.572416,-6.125823,-3.876681,5.698632,7.169588,-3.393300],[-3.884028,-1.837867,7.783214,-0.870937,7.206188,-4.617738,3.421537,7.097478,2.193370,-8.557347,5.132459],[-6.275349,-1.223517,5.881400,-2.010600,0.768191,3.495980,9.450818,-7.643189,0.941054,-7.893475,-7.063016]],[[-8.295881,-4.310317,0.355997,-5.375481,4.729281,-3.671579,-4.046211,7.367307,9.435457,2.435716,3.772916],[2.684634,-0.259024,8.321812,-6.257187,0.196070,1.721389,6.230594,-4.673302,0.132661,-4.359807,0.729266],[-0.526857,8.894386,7.854842,-6.217242,-1.208896,8.774901,-3.648351,8.088130,-9.297219,-3.015482,-7.251003],[-2.404730,2.000816,9.383919,5.909312,3.843571,5.943781,-8.187657,4.203554,1.267606,-3.826425,2.162817],[-7.767538,-9.885467,2.494565,-5.802005,-7.968548,-6.805143,0.111251,4.585375,-9.973330,-6.041802,5.360928]],[[3.447842,6.478615,-7.530476,2.009665,-1.005498,-2.229472,-8.730226,5.778234,-3.422573,6.141526,-3.563945],[-9.962899,5.155350,-7.588742,-7.410446,-4.020389,-1.591639,0.897147,-0.607671,-4.827547,-4.912545,4.921961],[-1.549405,0.517518,-7.417075,6.682386,9.923816,-7.888255,6.881967,-1.293742,-8.050398,1.141717,-7.739376],[-2.278056,5.971649,-2.604226,8.635524,-8.418073,-0.393504,-8.236795,-2.142720,6.997291,0.498760,-2.938460],[-9.372640,8.289536,-2.361251,-6.364252,4.339976,5.612721,6.174560,-7.763035,1.882983,4.912267,-0.410819]],[[-8.716851,7.588423,8.953794,1.768230,6.315246,-2.635122,-1.940697,6.120389,-2.928190,8.006158,8.041329],[0.045269,-7.136845,-5.575939,-4.792460,5.261942,0.961875,8.649170,-3.080458,8.031099,-6.893102,-1.224010],[-0.092605,1.567597,-9.336604,-5.905450,-0.790235,0.792340,-0.912242,-0.892665,-5.995270,4.998427,-6.536041],[-6.265119,7.383800,8.530689,-4.313222,-8.463253,2.996648,4.690090,6.299504,-0.843693,3.224765,-0.493879],[7.390575,-0.273763,-7.183364,-6.091873,-7.087135,5.815357,-8.670417,-1.087850,-8.750812,7.526982,-7.271107]],[[0.004933,-0.152846,9.801104,8.995733,0.151342,-9.195552,8.176998,8.049232,-0.862251,-5.933432,4.679497],[-7.870996,6.905045,-8.699589,-4.165349,1.250569,-0.313052,8.973691,6.732476,2.781070,-7.997883,0.879070],[6.466921,0.719971,-8.764041,2.042640,-1.435053,6.971359,9.579367,-9.468135,3.059574,5.147724,6.832289],[0.189584,-0.702021,0.371722,7.131728,-0.143692,5.206111,-7.871613,9.198565,8.381301,0.405289,-6.174070],[-2.031819,-6.766004,-2.982794,-8.955055,8.639189,8.048162,-5.606034,-6.980391,9.221193,-8.000499,-0.744996]],[[-2.102209,8.135546,9.647597,6.495592,1.244602,-4.377264,6.496517,4.884754,-0.688939,9.224509,-8.424387],[-3.159421,6.228040,9.315786,-3.681322,-3.972355,-2.463777,-1.896174,-6.018439,9.588928,1.407077,-1.757550],[-8.840655,-5.407044,-2.000184,-6.190404,-4.652848,7.582281,-4.927248,1.221685,-9.700232,-6.900197,4.502188],[-4.663148,-7.870750,7.932938,4.168089,-2.808347,-8.116415,-9.289447,-3.253445,5.319096,1.129994,0.750205],[-6.078721,-3.159933,-5.667113,3.968875,9.052466,-3.499502,3.867980,7.498608,2.413183,-2.158994,9.876655]],[[-7.055577,-9.972940,-3.619612,-1.145950,4.120744,-3.384566,2.471667,-2.620298,8.905986,-7.222590,2.691257],[8.465202,-9.576139,-9.130511,-6.386719,2.117711,-3.191668,9.835739,8.417473,-4.062808,-8.557140,-4.644864],[2.511946,-0.474469,-2.735328,-0.527886,-0.675781,-2.394146,-1.521469,3.058527,-4.542802,8.990124,-1.135835],[7.264431,-7.072689,3.521413,9.628071,-3.828070,-7.541481,8.977412,3.965526,0.699245,6.590712,-3.882230],[-3.683018,0.369839,-4.389009,8.076861,3.410773,-3.455100,-1.794496,-7.798088,7.989735,9.362206,3.493259]],[[-5.884906,-9.721596,-6.381129,-7.872688,-8.389278,-0.650698,3.303531,-3.830731,-4.056450,-4.795914,-0.313140],[-0.851624,-1.760318,0.707675,4.097497,-5.116094,-0.420100,1.110516,-6.221129,6.528601,5.224030,-6.863487],[8.742895,0.450929,-2.262739,-6.781689,6.706420,5.210094,2.198062,4.198765,7.716906,-8.042234,-5.306962],[-5.795962,4.661699,9.954948,-7.083625,-3.723375,4.976396,2.507762,4.533123,-3.385766,-6.428704,-8.884628],[-7.216932,-1.040528,1.138245,8.465483,6.380649,-5.338017,-0.865310,9.446211,-1.731495,-5.335451,3.071225]]], dtype = "float64")#candidate|199|(8, 5, 11)|const|float64
const_200 = relay.const([[[8.720008,0.364986,-6.484408,2.968749,6.052045,-4.709867,7.562298,7.815442,-3.007921,9.719911,4.377022],[1.109271,-1.790879,6.876237,3.645129,-8.397048,-7.461081,-9.345457,6.847891,-9.668930,9.876097,8.632556],[-5.367903,7.905831,3.403599,2.582566,7.539948,-7.045955,-5.328964,-5.716308,-4.234635,0.314308,-1.513604],[3.674555,3.306958,4.507270,7.230562,5.258409,2.899786,-4.532809,-7.942795,4.111490,-4.731702,0.381224],[-2.858438,-5.480038,1.844940,2.358732,3.478987,7.841528,-5.194074,5.828867,-9.658375,-8.246785,-5.358187]],[[-3.483753,-1.031121,-6.922000,2.345460,-1.681120,6.509441,-6.230867,-8.086140,5.679155,0.119438,-6.525492],[3.872071,3.792715,2.094616,0.821086,-9.649357,-2.125655,0.329100,2.343044,-0.482762,-5.373321,-0.080569],[-5.962315,9.212392,-0.090148,3.202451,-2.912100,-9.307770,-5.827033,6.844391,3.042567,3.563759,4.670393],[0.102607,6.812815,-5.174064,2.319991,-5.090035,7.152766,9.168495,-1.797331,-8.976644,3.371025,-6.098596],[-4.311481,5.064350,8.546173,1.582139,-6.616028,4.769726,0.135024,8.528285,-3.842751,-7.929835,9.069975]],[[9.420656,-2.896799,7.914294,9.759206,3.460378,6.159247,5.350497,7.644157,4.075231,0.763984,7.480236],[-5.300361,-7.155669,4.723682,-2.566057,-9.888070,-6.642987,-8.666469,0.578978,-2.011455,7.056068,0.549584],[-2.217554,-9.483211,-2.567911,8.039313,-2.513459,7.840007,-3.115721,1.664504,5.044623,6.042612,7.913398],[7.454051,1.778511,1.643371,-1.890567,7.776883,-0.501032,-6.633852,-3.834798,-0.550550,-8.757479,7.272798],[-2.578302,2.929736,-8.657463,-0.936921,-9.110844,-4.188860,3.823195,6.930916,9.005076,-7.213476,-2.338364]],[[-2.651205,-9.524195,2.048300,-1.921601,-5.946252,3.852246,9.713135,-7.883381,4.098105,8.553400,-7.733732],[-7.650788,-7.922968,-7.817202,6.548544,-4.528881,2.410320,-2.682140,9.292399,0.753125,-4.215876,1.119530],[3.572619,4.212544,4.777472,-6.704783,8.643865,4.441598,-5.442617,-1.213241,-2.426367,-4.497718,-5.572800],[-1.192221,2.251931,6.828836,-1.678293,8.756853,-4.326101,1.596794,-7.497365,1.810636,-4.575703,8.630458],[-5.243064,-1.239852,-9.002675,0.251006,2.970227,-0.340735,4.139298,-5.559215,2.142165,2.142207,-9.671217]],[[8.056625,7.797931,-8.085926,6.966108,-6.797794,-6.994449,-0.598247,2.182561,7.050596,0.139850,-9.272337],[1.219047,-1.611273,-5.098436,-2.107468,-3.352173,3.156143,-7.744716,4.583243,-6.865490,4.363354,-0.020429],[3.915546,6.486080,6.205026,9.092403,-0.266960,-3.078660,5.905236,-2.966163,-2.477372,0.066971,-7.547500],[2.253013,0.312059,-9.061517,-1.471249,-1.147368,-9.039121,-6.423987,-1.134785,4.777460,-2.676387,0.510249],[5.150763,8.757543,9.635220,1.372845,-4.731171,5.162402,-5.638992,0.313143,0.429746,8.249814,2.731336]],[[3.519169,1.903504,-5.837530,-5.705251,6.257533,-6.963719,1.673757,5.106594,1.704097,-9.563230,2.717981],[-8.120227,6.757454,-8.556151,-2.591277,6.065733,8.364971,-6.798370,-9.500213,2.671287,-6.958607,7.757178],[2.702780,7.962349,-3.376041,-1.016784,-1.942479,-2.868885,-5.335752,-8.924581,2.666808,-8.192785,-3.713792],[-5.642927,6.945313,-3.940813,9.194646,-7.861265,-4.983142,-2.025270,6.348465,-0.632630,9.430548,5.992373],[9.430093,-9.124495,8.138206,9.690055,-3.669560,5.827356,-4.451883,7.285101,4.899398,-3.146555,0.977994]],[[-0.737144,2.871708,7.076756,-3.137896,-5.560626,-1.159931,-7.016676,5.503665,-0.214186,9.614421,-9.547966],[9.181691,-3.653009,9.632939,9.107728,6.809650,9.162669,-0.184515,6.051528,3.395642,7.370131,3.665109],[-3.607143,7.515087,-6.940135,-6.977826,-1.686378,-9.805691,-5.217830,-4.797928,1.899053,5.845015,-2.097531],[6.339230,-5.916172,-0.460359,-9.526755,0.394297,-5.975221,2.200569,-4.606276,9.645664,-9.004299,9.112182],[2.752358,-0.713866,2.575279,3.427122,1.175178,8.420140,-2.884567,8.301937,9.595612,9.134876,-0.105836]],[[-8.559657,-5.292727,8.182261,-2.155666,5.656046,-8.494281,-6.816920,7.938554,-1.025425,-3.845231,7.355466],[0.404679,0.300160,5.011580,-2.031561,-5.142275,-1.139377,9.086372,0.288544,-7.390191,6.347345,-7.580536],[-0.016664,-8.040548,-6.387002,1.182393,3.548178,1.871160,0.254174,9.913708,-2.379591,9.046362,-9.923757],[-1.104179,-8.194836,-8.844182,-5.418678,2.487840,-2.324029,3.173458,-4.672892,-8.363572,9.157552,-5.046867],[2.143377,-7.919184,9.665950,-0.682676,-1.865607,4.172173,-5.953694,3.974530,-7.981281,6.294665,-2.338604]]], dtype = "float64")#candidate|200|(8, 5, 11)|const|float64
bop_201 = relay.divide(const_199.astype('float64'), relay.reshape(const_200.astype('float64'), relay.shape_of(const_199))) # shape=(8, 5, 11)
const_204 = relay.const([[[-0.699576,2.124864,-9.406353,8.299937,-9.387380,9.031527,8.449869,4.912772,6.282832,-6.516222,1.025511],[6.464713,5.641496,2.359988,7.562647,-1.922458,-8.580617,-7.193327,-1.404142,4.114935,-9.427036,-3.998342],[-7.193345,9.605621,4.079305,-9.250855,-2.252184,-4.198354,5.468629,8.207263,-9.794209,-2.368675,5.650668],[5.326903,-8.903782,-6.379111,-0.491225,-0.481432,1.948965,-9.560231,2.339620,7.887396,3.931295,-5.633557],[9.717527,5.773374,3.674034,-1.759384,-7.411896,-1.341130,6.504941,-7.483375,4.703172,-8.606239,-9.296218]],[[1.446314,1.707143,-0.411541,-2.534065,-0.477667,-3.335572,0.569801,5.328786,6.630332,-0.439813,5.571652],[-0.203260,9.814530,-6.269764,-4.274611,-6.786494,9.267235,-7.104131,-8.900701,-7.228599,-0.709029,-1.731810],[-2.347682,-5.330330,-1.209959,4.439937,-8.053854,3.102640,-2.919519,8.501295,-4.379692,-8.293324,5.026960],[2.960661,-2.859484,-1.592463,0.283445,-8.318250,3.891242,2.066284,2.968444,4.140993,-9.895287,6.954750],[-7.187232,-5.775153,3.643417,-6.644290,1.132618,-3.886470,0.215135,9.368555,-1.838692,-1.711964,-4.470326]],[[5.202921,7.933915,6.535781,2.261572,-3.451151,8.995073,-8.855996,4.184383,8.279727,1.117953,-0.134478],[3.725879,1.854665,-9.023809,0.236490,4.311611,-7.800917,4.556932,-3.486776,4.892010,-4.311763,6.977947],[8.734818,-3.351397,-6.603162,-4.126566,-0.639104,-0.655795,6.674913,-9.028275,3.804345,2.264115,-4.512432],[9.537537,9.750054,4.049328,0.298874,6.075435,9.556743,5.681830,6.174945,4.886715,5.580368,2.382666],[-2.084923,1.943011,7.079207,3.228512,1.335097,-1.464681,3.615595,7.195549,4.011921,6.450458,-3.920231]],[[-9.411480,3.068983,3.555035,3.674578,0.701636,-7.852333,9.889579,-4.811931,2.594555,8.459717,-6.900771],[4.592746,2.476144,-0.339906,-1.014307,9.585519,-7.552908,-3.239410,-1.293967,-9.384782,0.447444,-0.824164],[-2.704384,8.491707,8.228545,-6.411476,-3.310856,1.749187,-8.467070,-3.775235,-1.431377,8.999367,-0.914954],[-3.311606,0.181404,5.950100,-3.692179,4.245179,-8.137348,-3.590198,8.375184,2.020348,6.780201,4.863959],[5.304344,-5.978729,5.924081,-9.439375,2.571472,-1.155521,-1.466637,6.633089,-5.967677,3.721627,9.820204]],[[-5.138438,-1.109718,-1.814454,-8.841400,6.327043,-7.379084,1.196204,2.851092,6.995459,-6.273446,5.215855],[1.228809,2.753234,5.118174,-3.855258,3.464839,3.046473,1.322567,0.400131,3.636996,3.793943,-4.888131],[-0.514706,-5.015231,-2.643305,1.557167,7.683979,-2.374408,-6.551323,-5.582728,-3.774080,7.548527,5.660498],[-9.265652,-2.225119,-2.071194,0.060928,-4.382245,-7.804491,5.839044,-5.659105,1.037154,-7.448867,-7.581393],[3.268526,0.814480,-3.187785,-6.834183,2.316574,-3.084587,-3.909231,6.383083,1.737088,0.359032,2.001459]],[[-8.376747,-5.993577,2.110127,4.841470,7.170872,-6.687575,7.983046,-0.088232,7.510082,-6.395148,1.272012],[-5.560859,-7.382595,0.024743,6.861509,-7.204481,-5.643666,7.274515,1.791637,7.264730,-4.682308,-1.352697],[5.125466,1.842437,-4.853643,-7.123716,-2.208500,5.794886,9.272946,4.507096,7.798520,-1.573004,-1.765989],[2.402922,4.097983,-2.604149,3.988515,7.170296,1.423627,3.057568,-6.130691,-4.405181,-2.502945,4.976907],[-3.125411,-2.791149,-9.116295,9.096126,1.641986,7.386427,6.294940,-9.016350,-3.501538,1.329068,-4.636681]],[[2.788334,7.788606,1.827009,0.924232,8.165263,6.956347,8.382666,-5.431837,-3.602960,-3.764672,-5.831649],[-6.319076,-2.148037,-4.317537,-7.023331,-2.349103,5.520267,5.028559,4.429856,4.309703,-3.010099,-6.265992],[0.827856,-0.725546,-3.007686,5.097395,3.873243,7.378803,-1.141461,5.789187,-4.867281,-9.942596,8.942550],[7.751683,3.117853,4.384189,7.426046,3.548766,9.465853,1.567991,-7.643547,-4.014430,-8.891288,7.051499],[-6.264536,1.996606,-7.221128,-4.969515,-4.043156,-0.754943,5.531819,5.293985,-0.776825,3.845733,2.191833]],[[7.417198,0.049384,8.611571,-6.079349,-6.671576,6.442032,5.949643,2.238992,-3.444155,7.150677,7.860561],[-8.403704,-2.087497,-3.321504,-6.025481,-3.283719,4.929728,-9.067921,9.608262,-4.617480,3.942104,0.201213],[8.611258,-5.878028,-2.366341,1.932091,-5.433981,0.303026,-7.620990,-3.718422,1.441555,-1.983821,-9.930384],[5.319519,0.457786,7.011085,2.698438,-0.898137,-3.248436,-7.103909,-5.959343,-1.514490,-4.518808,8.938647],[4.007228,4.282793,-6.654308,-9.033098,-5.195242,-6.470617,2.381542,-4.489068,2.900691,6.658114,-5.950598]]], dtype = "float64")#candidate|204|(8, 5, 11)|const|float64
bop_205 = relay.mod(const_200.astype('float32'), relay.reshape(const_204.astype('float32'), relay.shape_of(const_200))) # shape=(8, 5, 11)
uop_208 = relay.acos(const_199.astype('float64')) # shape=(8, 5, 11)
uop_210 = relay.log(const_204.astype('float32')) # shape=(8, 5, 11)
uop_212 = relay.acosh(uop_210.astype('float64')) # shape=(8, 5, 11)
bop_214 = relay.multiply(uop_208.astype('int64'), relay.reshape(bop_201.astype('int64'), relay.shape_of(uop_208))) # shape=(8, 5, 11)
var_217 = relay.var("var_217", dtype = "float64", shape = (8, 5, 11))#candidate|217|(8, 5, 11)|var|float64
bop_218 = relay.bitwise_and(uop_208.astype('int8'), relay.reshape(var_217.astype('int8'), relay.shape_of(uop_208))) # shape=(8, 5, 11)
const_221 = relay.const([[[-8.875037,6.624414,-9.713486,-7.462559,-0.139490,-1.004008,-0.017743,-5.067945,-1.643975,4.891076,-5.459719],[-7.508515,3.920338,-2.066575,2.615859,-6.123263,5.562752,9.272910,-6.497996,-1.072427,-3.979059,-6.885960],[-7.281926,-5.579703,9.100185,9.568049,6.509905,-5.106019,-0.593424,7.907245,-2.443863,-8.966608,3.062479],[-7.310752,8.083445,8.275501,0.694685,-3.760860,-7.380006,-7.604787,-5.914454,3.087261,-1.048492,-8.231264],[2.991004,-6.834014,-4.438456,7.836400,-0.571785,3.614444,-1.537957,7.768672,0.559309,8.628678,-2.034602]],[[7.649334,5.215458,-5.246856,-2.401240,4.382818,4.417966,5.631908,-2.216209,7.359373,-1.183701,-8.462228],[1.497166,-2.410936,5.205807,4.768157,-7.603974,-2.470449,7.455913,3.121916,2.306130,3.207592,-6.734358],[-2.413681,-0.069540,7.404049,1.762323,3.820735,4.511971,0.659754,-2.652241,8.028858,3.702413,-3.703566],[-1.596589,-9.504161,-7.753550,-4.563694,-4.303031,1.070374,6.618029,-5.962550,-0.903814,1.422383,9.987917],[-3.841500,4.847891,-5.806167,7.384295,-1.050131,-5.469233,-2.971022,-0.976918,3.513724,0.610939,0.706538]],[[6.240098,1.698714,-2.061736,-8.084879,4.036045,8.493028,-7.591612,5.446509,-7.278133,3.481267,-4.209626],[-3.362196,9.954189,-2.541871,-3.279098,8.802998,6.949707,-3.296229,7.895942,0.363086,6.446237,-4.790315],[3.433285,-0.610981,3.325274,-4.715074,0.786717,-3.946418,5.941594,2.174141,2.800660,8.518610,-0.432422],[-9.695368,-2.564841,-0.091351,-2.380584,2.636113,1.749063,9.480926,-4.685841,-4.760254,-4.774193,-9.823967],[3.997882,-4.776907,-8.971846,9.154962,4.048344,-6.897143,-3.109032,2.477215,7.123222,-3.382498,-1.755547]],[[4.474212,8.942419,-1.597387,8.851397,0.306235,8.496771,9.243610,-7.735510,-0.769624,-2.511665,7.806776],[8.223773,1.721507,-2.360135,5.258924,5.026124,8.928409,7.574354,0.794655,-3.871326,7.435043,-4.983342],[6.095373,-6.285381,-1.895895,-8.928083,3.571068,-1.390634,1.320945,-4.938719,-5.497728,4.909039,-8.510239],[4.888096,0.116420,6.433908,0.234686,3.055855,-8.996424,-3.041165,-9.595388,-2.343996,2.382823,-3.365587],[3.000017,7.940849,0.234846,0.208433,3.120396,1.989288,-7.776024,-2.371144,-9.802373,-4.499040,0.367011]],[[3.768800,-7.107260,5.134922,-4.785079,-6.084527,-9.335574,2.339984,-9.351913,6.310992,-0.594067,2.579086],[7.916114,-6.648859,4.606002,-8.251645,-3.965124,2.033790,-6.664061,-4.416667,-7.346549,-5.889991,-1.901183],[-8.893950,5.853417,6.232367,-5.004453,-5.034838,-0.540434,2.660310,-8.458018,-5.339103,9.707564,4.359870],[-7.297205,2.247020,-9.537445,5.502372,5.208260,0.987001,9.947456,-9.150345,6.594560,-5.764855,-5.208293],[-6.468861,5.593377,2.508808,-1.510414,-0.016517,-0.908759,3.152875,-4.311152,1.904338,1.853323,-5.102179]],[[6.789317,-4.913161,7.614568,-9.693382,8.297136,-5.989162,7.750074,8.569846,-4.736144,-4.092536,6.834664],[8.037602,-3.858264,-2.144110,-4.671704,1.387322,9.932585,-2.534001,-3.165006,-4.930287,6.143663,-0.154629],[-4.219591,-1.323707,-0.246034,2.792373,0.970141,0.970387,-8.261567,7.440054,-7.620090,-3.751810,-5.976794],[-0.804014,-6.441482,-6.618229,-2.251600,-2.588296,7.160055,2.360505,-9.661976,1.611463,-5.932632,9.394222],[-1.014464,6.547766,8.616290,2.380136,-5.462036,-2.580491,-8.501431,9.164532,-9.792174,-5.983632,-6.113143]],[[4.326290,-7.888710,-2.958741,9.031273,3.176712,-6.891679,-4.403415,6.018806,-2.909573,1.903119,-4.267073],[0.409759,-5.885150,9.859768,6.782418,1.425733,-6.145387,-4.654150,-7.514203,7.163647,8.704669,-9.687086],[6.594063,3.264704,8.060585,2.357467,3.724130,6.730219,-0.607019,-3.367638,7.950258,-7.189738,5.080539],[-2.780538,-8.756644,-8.062397,-6.198139,2.037699,-7.583580,5.205139,9.247023,0.122040,0.398410,7.990326],[7.860568,-9.181412,0.591885,6.859470,5.088833,-5.997113,5.834873,3.270534,1.871938,1.520224,-1.045661]],[[2.685632,9.574867,-8.173209,-7.480736,-5.491114,7.257301,-7.316008,1.971812,0.146634,8.106586,-7.569838],[-3.288727,-9.740350,-7.838282,8.829488,-8.296905,7.194275,6.858205,7.686209,2.493219,-7.759156,-1.537636],[3.405987,-8.146857,-1.807200,-9.092861,-9.543164,-8.713802,-6.759718,-4.861115,3.281796,-4.664160,5.684193],[-6.338376,7.533616,-5.712066,-9.672112,-0.993891,2.565974,3.998616,2.737037,-8.898399,-6.242408,-5.733078],[-2.790796,5.247606,-6.728035,-7.873444,9.419896,-9.679746,-1.672777,-3.820145,7.318168,-7.595756,2.444660]]], dtype = "float64")#candidate|221|(8, 5, 11)|const|float64
bop_222 = relay.power(const_204.astype('float32'), relay.reshape(const_221.astype('float32'), relay.shape_of(const_204))) # shape=(8, 5, 11)
bop_225 = relay.left_shift(uop_212.astype('uint32'), relay.reshape(const_204.astype('uint32'), relay.shape_of(uop_212))) # shape=(8, 5, 11)
bop_228 = relay.greater(uop_212.astype('bool'), relay.reshape(bop_201.astype('bool'), relay.shape_of(uop_212))) # shape=(8, 5, 11)
func_55_call = mod.get_global_var('func_55')
func_58_call = mutated_mod.get_global_var('func_58')
var_232 = relay.var("var_232", dtype = "int64", shape = (3,))#candidate|232|(3,)|var|int64
call_231 = relay.TupleGetItem(func_55_call(relay.reshape(var_232.astype('int64'), [3,]), relay.reshape(var_232.astype('int64'), [3,]), ), 2)
call_233 = relay.TupleGetItem(func_58_call(relay.reshape(var_232.astype('int64'), [3,]), relay.reshape(var_232.astype('int64'), [3,]), ), 2)
bop_234 = relay.maximum(uop_208.astype('uint16'), relay.reshape(bop_218.astype('uint16'), relay.shape_of(uop_208))) # shape=(8, 5, 11)
bop_237 = relay.floor_divide(bop_225.astype('float64'), relay.reshape(bop_228.astype('float64'), relay.shape_of(bop_225))) # shape=(8, 5, 11)
uop_240 = relay.sqrt(uop_210.astype('float64')) # shape=(8, 5, 11)
uop_242 = relay.asin(uop_212.astype('float64')) # shape=(8, 5, 11)
func_21_call = mod.get_global_var('func_21')
func_25_call = mutated_mod.get_global_var('func_25')
const_245 = relay.const(-5.623667, dtype = "float32")#candidate|245|()|const|float32
call_244 = relay.TupleGetItem(func_21_call(relay.reshape(const_245.astype('float32'), []), relay.reshape(const_245.astype('float32'), []), ), 0)
call_246 = relay.TupleGetItem(func_25_call(relay.reshape(const_245.astype('float32'), []), relay.reshape(const_245.astype('float32'), []), ), 0)
output = relay.Tuple([bop_205,bop_214,bop_222,call_231,var_232,bop_234,bop_237,uop_240,uop_242,call_244,const_245,])
output2 = relay.Tuple([bop_205,bop_214,bop_222,call_233,var_232,bop_234,bop_237,uop_240,uop_242,call_246,const_245,])
func_247 = relay.Function([var_217,var_232,], output)
mod['func_247'] = func_247
mod = relay.transform.InferType()(mod)
mutated_mod['func_247'] = func_247
mutated_mod = relay.transform.InferType()(mutated_mod)
func_247_call = mutated_mod.get_global_var('func_247')
var_249 = relay.var("var_249", dtype = "float64", shape = (8, 5, 11))#candidate|249|(8, 5, 11)|var|float64
var_250 = relay.var("var_250", dtype = "int64", shape = (3,))#candidate|250|(3,)|var|int64
call_248 = func_247_call(var_249,var_250,)
output = call_248
func_251 = relay.Function([var_249,var_250,], output)
mutated_mod['func_251'] = func_251
mutated_mod = relay.transform.InferType()(mutated_mod)
const_253 = relay.const([[8.470581,-5.174956,-9.189276,3.354250],[-5.041763,-2.986268,-9.001388,-7.981053],[-8.983523,-0.727400,-2.602577,0.922169]], dtype = "float64")#candidate|253|(3, 4)|const|float64
uop_254 = relay.asin(const_253.astype('float64')) # shape=(3, 4)
func_21_call = mod.get_global_var('func_21')
func_25_call = mutated_mod.get_global_var('func_25')
var_257 = relay.var("var_257", dtype = "float32", shape = ())#candidate|257|()|var|float32
call_256 = relay.TupleGetItem(func_21_call(relay.reshape(var_257.astype('float32'), []), relay.reshape(var_257.astype('float32'), []), ), 0)
call_258 = relay.TupleGetItem(func_25_call(relay.reshape(var_257.astype('float32'), []), relay.reshape(var_257.astype('float32'), []), ), 0)
uop_259 = relay.acosh(uop_254.astype('float64')) # shape=(3, 4)
bop_261 = relay.right_shift(var_257.astype('int16'), uop_259.astype('int16')) # shape=(3, 4)
uop_264 = relay.asinh(uop_259.astype('float64')) # shape=(3, 4)
uop_266 = relay.log2(uop_264.astype('float32')) # shape=(3, 4)
var_268 = relay.var("var_268", dtype = "float64", shape = (3, 4))#candidate|268|(3, 4)|var|float64
bop_269 = relay.logical_xor(uop_259.astype('uint8'), relay.reshape(var_268.astype('uint8'), relay.shape_of(uop_259))) # shape=(3, 4)
const_272 = relay.const([[-8.540850,-4.051762,1.004892,0.092300],[7.487067,-9.236980,5.851911,-2.911652],[4.815557,7.670319,-1.947672,8.649533]], dtype = "float64")#candidate|272|(3, 4)|const|float64
bop_273 = relay.bitwise_or(uop_264.astype('uint16'), relay.reshape(const_272.astype('uint16'), relay.shape_of(uop_264))) # shape=(3, 4)
uop_276 = relay.acosh(uop_266.astype('float64')) # shape=(3, 4)
var_278 = relay.var("var_278", dtype = "float64", shape = (3, 4))#candidate|278|(3, 4)|var|float64
bop_279 = relay.left_shift(uop_276.astype('int32'), relay.reshape(var_278.astype('int32'), relay.shape_of(uop_276))) # shape=(3, 4)
bop_282 = relay.floor_divide(uop_266.astype('float32'), relay.reshape(const_253.astype('float32'), relay.shape_of(uop_266))) # shape=(3, 4)
bop_285 = relay.bitwise_or(bop_273.astype('uint64'), relay.reshape(uop_276.astype('uint64'), relay.shape_of(bop_273))) # shape=(3, 4)
var_288 = relay.var("var_288", dtype = "int32", shape = (3, 4))#candidate|288|(3, 4)|var|int32
bop_289 = relay.minimum(bop_279.astype('uint32'), relay.reshape(var_288.astype('uint32'), relay.shape_of(bop_279))) # shape=(3, 4)
uop_292 = relay.erf(bop_282.astype('float32')) # shape=(3, 4)
uop_294 = relay.asinh(uop_259.astype('float64')) # shape=(3, 4)
func_247_call = mod.get_global_var('func_247')
func_251_call = mutated_mod.get_global_var('func_251')
const_297 = relay.const([8.995616,7.519328,-7.839232,-3.828623,-8.142749,6.299344,9.423274,-3.048753,4.820737,-5.370703,-1.466092,-8.126104,8.418764,4.924272,1.530128,7.790514,4.805714,-4.871803,4.484542,3.450927,0.272925,1.114568,0.483228,-9.036595,9.858430,-5.580131,-4.339066,-9.949866,0.270184,-4.087092,-6.446116,9.911576,2.714738,2.894177,-3.912983,-4.155291,1.032192,-6.453360,-0.271139,-1.414330,7.148682,7.253733,7.184738,-3.422864,6.460787,5.077219,-8.532448,-0.980702,-6.036686,-2.922734,-9.250746,5.954120,-8.522789,-8.035041,-6.612109,-2.055531,1.059859,-7.974476,-5.966920,4.042109,8.684506,8.472771,1.481497,3.825394,9.749365,-2.128174,8.036403,-3.932423,-7.180345,-4.823946,5.256516,-9.270651,-0.395045,9.317423,0.214797,2.011126,7.552398,-2.217193,-9.015512,-0.559996,6.824819,9.376143,-8.688405,-6.961605,-6.453559,-9.836028,-3.763612,-4.277303,9.950705,8.887073,8.484546,2.416579,8.271726,3.692402,-1.780085,2.669564,2.251815,-2.435272,-4.142377,-2.235305,3.461223,-2.017191,4.920258,-9.126933,-7.193369,-4.444485,-3.634044,-1.749634,7.208440,5.521328,-7.446789,-5.460159,9.435592,3.467787,0.385709,-6.368890,-6.419264,-1.265435,-3.746917,-6.277010,-1.785819,-4.871828,0.151068,-2.346644,-6.913042,-8.053074,0.501144,-1.621076,8.155598,-3.456114,4.447360,5.324910,-5.897305,-5.269195,-2.796950,4.984596,4.172244,-8.243380,0.623630,3.493104,-2.397819,-2.680685,-3.263252,4.555551,-0.249031,2.704995,-6.288685,-2.813007,-6.683095,0.867752,3.006843,-2.847423,-6.917399,3.362229,3.252468,-6.965157,-6.334112,1.067325,6.352779,-9.960263,7.897515,-4.154283,-9.981374,-2.121270,0.493994,-3.729568,-7.061017,3.365539,4.944241,-5.192893,4.811974,-3.697587,3.451419,0.283620,-3.294265,5.592967,6.114505,-6.903729,-3.251751,-0.687187,-5.779107,-1.878448,4.273599,-7.033591,6.272007,-4.272028,8.758075,-6.162676,-8.911583,8.099832,-5.780469,-5.183621,-1.806846,9.751304,8.884621,-2.483940,-8.273321,3.569141,-0.372877,-4.041940,-4.874193,4.169696,-2.331584,2.801602,0.119700,6.706808,2.232248,6.268263,-2.160961,-5.472444,-7.748835,-3.422713,8.981827,4.514256,1.475759,9.168823,-2.356229,2.073131,8.352812,9.163260,5.810936,-9.672137,0.864007,9.698617,-1.886920,7.573474,-4.830528,-0.644688,4.512561,-8.978173,4.458143,4.401567,-8.476535,-8.155905,5.309607,-5.565870,1.795863,8.468542,-1.478608,-4.511823,-2.387230,1.896715,2.391814,-5.003093,6.908253,3.251077,7.689582,-9.685334,1.413845,6.788878,2.524404,-5.973419,-5.553561,7.110818,-9.823183,8.959409,4.152870,7.424794,-3.709309,-6.335645,-0.655762,8.835173,-8.021465,2.531464,-9.772552,-4.234378,-5.555357,-5.185369,-9.223456,7.904823,-5.983019,0.206265,-3.705093,-3.089956,-7.997467,-3.804841,6.435507,-4.786598,-6.451889,2.076855,-7.411490,-0.497520,-6.961027,3.350692,-6.942298,5.954435,-1.796686,-0.041829,-7.151912,8.633878,4.938325,8.729534,6.032787,-1.994836,-8.561810,7.239689,7.267718,0.098530,-7.631389,-1.035869,-6.785647,5.598528,-5.478526,1.676816,4.891774,-6.337272,-0.265959,5.520930,1.823797,5.453176,6.118872,8.114539,-5.608450,0.341477,6.586423,5.771530,9.014436,-4.570603,2.933351,-8.674325,8.724185,0.731869,1.593595,2.170326,8.705395,-5.988915,1.133690,0.042488,-8.875730,4.484777,2.566236,5.158184,7.076872,-4.941897,8.254775,3.607294,4.627105,3.811974,4.769182,-2.177595,4.287680,-8.181144,-9.065504,9.641196,-9.840633,-4.816879,9.374504,-0.334017,-9.082176,8.722021,-1.964497,-7.019278,-8.596190,-0.241113,-8.568823,-9.912740,9.024883,0.194597,-4.671162,-4.707353,1.935270,-8.649047,6.255221,4.815410,-2.288120,0.590088,-3.604803,-7.401355,6.265030,-3.453764,6.776515,-4.294151,5.682005,-0.691141,-6.764595,-5.551943,-7.829084,-7.553685,-9.230171,1.149428,4.466809,6.326707,-5.332359,-0.566011,-9.402291,9.385204,9.318544,-1.881521,9.588965,-1.990015,1.112093,5.513362,-3.792444,0.339182,-2.390902,8.602024,-0.421070,0.322821,-4.278138,-8.694732,-7.254960,0.491862,6.004995,8.621179,-6.958157,-6.027920,-9.010846,0.145799,-0.094619,5.606113,8.494497,-1.939416,9.796134,-7.638720,4.309136,-1.009109,8.870718,0.646803,4.574479,3.863204,-1.036421,-0.920279,-2.784620,2.146691,-2.512208,7.073999,8.123517,9.995367,8.950711,8.385847,7.847031,-2.008003,7.217844,0.037796,-1.177253,-3.279217,8.626863,-5.602640,3.026387,-2.144081], dtype = "float64")#candidate|297|(440,)|const|float64
var_298 = relay.var("var_298", dtype = "int64", shape = (3,))#candidate|298|(3,)|var|int64
call_296 = relay.TupleGetItem(func_247_call(relay.reshape(const_297.astype('float64'), [8, 5, 11]), relay.reshape(var_298.astype('int64'), [3,]), ), 3)
call_299 = relay.TupleGetItem(func_251_call(relay.reshape(const_297.astype('float64'), [8, 5, 11]), relay.reshape(var_298.astype('int64'), [3,]), ), 3)
bop_300 = relay.not_equal(uop_292.astype('bool'), var_257.astype('bool')) # shape=(3, 4)
bop_303 = relay.multiply(uop_259.astype('float64'), relay.reshape(bop_285.astype('float64'), relay.shape_of(uop_259))) # shape=(3, 4)
uop_306 = relay.acosh(uop_266.astype('float32')) # shape=(3, 4)
bop_308 = relay.logical_xor(uop_266.astype('int64'), relay.reshape(bop_279.astype('int64'), relay.shape_of(uop_266))) # shape=(3, 4)
var_311 = relay.var("var_311", dtype = "uint32", shape = (3, 4))#candidate|311|(3, 4)|var|uint32
bop_312 = relay.floor_divide(bop_289.astype('float32'), relay.reshape(var_311.astype('float32'), relay.shape_of(bop_289))) # shape=(3, 4)
bop_315 = relay.logical_xor(bop_308.astype('int64'), relay.reshape(bop_279.astype('int64'), relay.shape_of(bop_308))) # shape=(3, 4)
bop_318 = relay.logical_xor(bop_315.astype('int64'), call_256.astype('int64')) # shape=(3, 4)
bop_321 = relay.logical_xor(bop_315.astype('int64'), call_258.astype('int64')) # shape=(3, 4)
uop_322 = relay.rsqrt(uop_266.astype('float32')) # shape=(3, 4)
bop_324 = relay.bitwise_or(bop_282.astype('uint64'), relay.reshape(uop_264.astype('uint64'), relay.shape_of(bop_282))) # shape=(3, 4)
bop_327 = relay.minimum(bop_269.astype('int8'), relay.reshape(uop_264.astype('int8'), relay.shape_of(bop_269))) # shape=(3, 4)
var_330 = relay.var("var_330", dtype = "float64", shape = (3, 4))#candidate|330|(3, 4)|var|float64
bop_331 = relay.greater_equal(uop_254.astype('bool'), relay.reshape(var_330.astype('bool'), relay.shape_of(uop_254))) # shape=(3, 4)
bop_334 = relay.maximum(bop_279.astype('int8'), relay.reshape(const_253.astype('int8'), relay.shape_of(bop_279))) # shape=(3, 4)
bop_337 = relay.not_equal(bop_279.astype('bool'), relay.reshape(var_288.astype('bool'), relay.shape_of(bop_279))) # shape=(3, 4)
uop_340 = relay.atan(bop_331.astype('float32')) # shape=(3, 4)
bop_342 = relay.add(uop_294.astype('float64'), relay.reshape(uop_276.astype('float64'), relay.shape_of(uop_294))) # shape=(3, 4)
uop_345 = relay.acos(bop_279.astype('float64')) # shape=(3, 4)
bop_347 = relay.equal(uop_345.astype('bool'), relay.reshape(bop_282.astype('bool'), relay.shape_of(uop_345))) # shape=(3, 4)
output = relay.Tuple([bop_261,call_296,const_297,var_298,bop_300,bop_303,uop_306,bop_312,bop_318,uop_322,bop_324,bop_327,bop_334,bop_337,uop_340,bop_342,bop_347,])
output2 = relay.Tuple([bop_261,call_299,const_297,var_298,bop_300,bop_303,uop_306,bop_312,bop_321,uop_322,bop_324,bop_327,bop_334,bop_337,uop_340,bop_342,bop_347,])
func_350 = relay.Function([var_257,var_268,var_278,var_288,var_298,var_311,var_330,], output)
mod['func_350'] = func_350
mod = relay.transform.InferType()(mod)
mutated_mod['func_350'] = func_350
mutated_mod = relay.transform.InferType()(mutated_mod)
func_350_call = mutated_mod.get_global_var('func_350')
var_352 = relay.var("var_352", dtype = "float32", shape = ())#candidate|352|()|var|float32
var_353 = relay.var("var_353", dtype = "float64", shape = (3, 4))#candidate|353|(3, 4)|var|float64
var_354 = relay.var("var_354", dtype = "float64", shape = (3, 4))#candidate|354|(3, 4)|var|float64
var_355 = relay.var("var_355", dtype = "int32", shape = (3, 4))#candidate|355|(3, 4)|var|int32
var_356 = relay.var("var_356", dtype = "int64", shape = (3,))#candidate|356|(3,)|var|int64
var_357 = relay.var("var_357", dtype = "uint32", shape = (3, 4))#candidate|357|(3, 4)|var|uint32
var_358 = relay.var("var_358", dtype = "float64", shape = (3, 4))#candidate|358|(3, 4)|var|float64
call_351 = func_350_call(var_352,var_353,var_354,var_355,var_356,var_357,var_358,)
output = call_351
func_359 = relay.Function([var_352,var_353,var_354,var_355,var_356,var_357,var_358,], output)
mutated_mod['func_359'] = func_359
mutated_mod = relay.transform.InferType()(mutated_mod)
const_361 = relay.const([[True,True,False,True,False,True,False,True,False,False,True,True,False],[False,False,False,False,True,True,True,True,True,True,False,True,True],[True,False,False,True,False,True,False,True,False,True,False,False,False],[False,True,True,True,True,False,False,True,False,True,False,True,False],[False,True,True,True,False,False,True,False,False,False,False,False,True],[False,True,True,True,True,True,False,True,True,True,True,True,False],[True,False,True,False,True,True,True,False,False,True,False,False,False],[False,False,False,True,True,False,False,False,True,False,True,True,True],[False,False,False,True,True,True,False,False,True,True,True,True,True],[True,False,True,True,False,False,True,False,True,False,True,True,False],[False,True,False,False,False,False,False,False,False,True,True,False,True],[True,True,False,False,False,False,False,True,True,True,True,True,True],[False,True,False,False,False,True,True,False,True,False,False,True,False],[False,True,False,False,False,True,True,True,True,True,True,True,True]], dtype = "bool")#candidate|361|(14, 13)|const|bool
const_362 = relay.const([[False,False,True,False,True,True,False,True,True,True,False,True,False],[False,True,False,True,False,True,True,False,True,False,False,False,True],[True,True,False,False,False,True,True,True,True,False,False,True,True],[True,True,True,False,True,False,False,True,True,False,False,False,False],[False,False,False,False,True,False,False,True,False,False,False,True,True],[True,True,False,True,False,True,False,False,False,True,False,False,True],[True,False,True,True,False,True,True,True,False,False,True,False,True],[True,False,False,True,True,True,False,True,False,True,True,False,True],[True,False,True,True,True,False,True,False,True,True,False,False,False],[False,False,True,False,True,True,False,True,False,True,True,False,True],[True,True,False,False,False,True,False,True,False,True,True,True,True],[False,False,True,False,True,True,False,False,True,False,True,True,True],[True,True,False,False,False,False,True,False,False,False,True,False,True],[True,True,True,False,False,True,False,False,False,True,True,False,False]], dtype = "bool")#candidate|362|(14, 13)|const|bool
bop_363 = relay.logical_or(const_361.astype('bool'), relay.reshape(const_362.astype('bool'), relay.shape_of(const_361))) # shape=(14, 13)
output = bop_363
output2 = bop_363
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()()
res3 = intrp3.evaluate()()
res4 = intrp4.evaluate()()
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()()
res7 = intrp7.evaluate()()
res8 = intrp8.evaluate()()
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()()
res11 = intrp11.evaluate()()
res12 = intrp12.evaluate()()
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()()
res15 = intrp15.evaluate()()
res16 = intrp16.evaluate()()
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()()
res19 = intrp19.evaluate()()
res20 = intrp20.evaluate()()
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()()
res23 = intrp23.evaluate()()
res24 = intrp24.evaluate()()
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''45: TVMFuncCall
44: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
43: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
42: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
41: tvm::IRModule::FromExpr(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&)
40: tvm::IRModule::FromExprInContext(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >)
39: tvm::IRModuleNode::Add(tvm::GlobalVar const&, tvm::BaseFunc const&, bool)
38: tvm::WarnIfMalformed(tvm::IRModule const&, tvm::relay::Function)
37: tvm::relay::FreeTypeVars(tvm::RelayExpr const&, tvm::IRModule const&)
36: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
34: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
32: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
31: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
30: tvm::relay::ExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
29: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
28: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
27: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
26: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
25: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
24: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
23: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
22: _ZNSt17_Function_handlerIFvPKN3tvm5relay7LetNodeEEZNS1_15TypeVarEVis
21: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
20: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
19: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
16: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
15: tvm::relay::ExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
14: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
13: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
12: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
11: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
10: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
9: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
8: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
7: _ZNSt17_Function_handlerIFvPKN3tvm5relay7LetNodeEEZNS1_15TypeVarEVis
6: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
5: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
4: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9RelayEx
1: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::ConstructorNode const*)
0: tvm::IRModuleNode::LookupTypeDef(tvm::GlobalTypeVar const&) const

'''