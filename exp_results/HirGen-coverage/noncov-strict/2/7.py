import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "int8", shape = ())#candidate|0|()|var|int8
var_1 = relay.var("var_1", dtype = "int8", shape = (16, 3, 6))#candidate|1|(16, 3, 6)|var|int8
bop_2 = relay.logical_xor(var_0.astype('int8'), var_1.astype('int8')) # shape=(16, 3, 6)
var_5 = relay.var("var_5", dtype = "int8", shape = (16, 3, 6))#candidate|5|(16, 3, 6)|var|int8
bop_6 = relay.divide(bop_2.astype('float64'), relay.reshape(var_5.astype('float64'), relay.shape_of(bop_2))) # shape=(16, 3, 6)
bop_9 = relay.bitwise_or(var_0.astype('uint64'), var_1.astype('uint64')) # shape=(16, 3, 6)
uop_12 = relay.log2(bop_9.astype('float32')) # shape=(16, 3, 6)
bop_14 = relay.multiply(uop_12.astype('uint16'), var_0.astype('uint16')) # shape=(16, 3, 6)
var_17 = relay.var("var_17", dtype = "float32", shape = (16, 3, 6))#candidate|17|(16, 3, 6)|var|float32
bop_18 = relay.multiply(uop_12.astype('int8'), relay.reshape(var_17.astype('int8'), relay.shape_of(uop_12))) # shape=(16, 3, 6)
uop_21 = relay.asin(var_1.astype('float32')) # shape=(16, 3, 6)
uop_23 = relay.sigmoid(bop_14.astype('float32')) # shape=(16, 3, 6)
bop_25 = relay.mod(var_1.astype('float32'), var_0.astype('float32')) # shape=(16, 3, 6)
bop_28 = relay.floor_mod(var_5.astype('float64'), relay.reshape(var_17.astype('float64'), relay.shape_of(var_5))) # shape=(16, 3, 6)
var_31 = relay.var("var_31", dtype = "int8", shape = (16, 3, 6))#candidate|31|(16, 3, 6)|var|int8
bop_32 = relay.greater_equal(var_1.astype('bool'), relay.reshape(var_31.astype('bool'), relay.shape_of(var_1))) # shape=(16, 3, 6)
uop_35 = relay.sqrt(uop_21.astype('float32')) # shape=(16, 3, 6)
bop_37 = relay.mod(var_0.astype('float64'), var_5.astype('float64')) # shape=(16, 3, 6)
var_40 = relay.var("var_40", dtype = "bool", shape = (16, 3, 6))#candidate|40|(16, 3, 6)|var|bool
bop_41 = relay.maximum(bop_32.astype('int16'), relay.reshape(var_40.astype('int16'), relay.shape_of(bop_32))) # shape=(16, 3, 6)
bop_44 = relay.bitwise_and(bop_6.astype('uint16'), relay.reshape(var_17.astype('uint16'), relay.shape_of(bop_6))) # shape=(16, 3, 6)
bop_47 = relay.logical_or(uop_21.astype('bool'), relay.reshape(bop_14.astype('bool'), relay.shape_of(uop_21))) # shape=(16, 3, 6)
uop_50 = relay.sigmoid(uop_35.astype('float64')) # shape=(16, 3, 6)
output = relay.Tuple([bop_18,uop_23,bop_25,bop_28,bop_37,bop_41,bop_44,bop_47,uop_50,])
output2 = relay.Tuple([bop_18,uop_23,bop_25,bop_28,bop_37,bop_41,bop_44,bop_47,uop_50,])
func_52 = relay.Function([var_0,var_1,var_5,var_17,var_31,var_40,], output)
mod['func_52'] = func_52
mod = relay.transform.InferType()(mod)
mutated_mod['func_52'] = func_52
mutated_mod = relay.transform.InferType()(mutated_mod)
func_52_call = mutated_mod.get_global_var('func_52')
var_54 = relay.var("var_54", dtype = "int8", shape = ())#candidate|54|()|var|int8
var_55 = relay.var("var_55", dtype = "int8", shape = (16, 3, 6))#candidate|55|(16, 3, 6)|var|int8
var_56 = relay.var("var_56", dtype = "int8", shape = (16, 3, 6))#candidate|56|(16, 3, 6)|var|int8
var_57 = relay.var("var_57", dtype = "float32", shape = (16, 3, 6))#candidate|57|(16, 3, 6)|var|float32
var_58 = relay.var("var_58", dtype = "int8", shape = (16, 3, 6))#candidate|58|(16, 3, 6)|var|int8
var_59 = relay.var("var_59", dtype = "bool", shape = (16, 3, 6))#candidate|59|(16, 3, 6)|var|bool
call_53 = func_52_call(var_54,var_55,var_56,var_57,var_58,var_59,)
output = call_53
func_60 = relay.Function([var_54,var_55,var_56,var_57,var_58,var_59,], output)
mutated_mod['func_60'] = func_60
mutated_mod = relay.transform.InferType()(mutated_mod)
const_62 = relay.const([[[-7,-10,6,-4,-8,-7,-1,-3],[-8,3,-8,-10,-4,-1,-4,-7],[-2,7,-9,-6,-6,-7,1,-8],[-8,6,-5,-10,-9,-6,-8,5],[9,9,-2,5,7,9,-4,8],[-9,8,1,4,9,-4,-4,6],[-10,1,9,2,-10,3,-7,5]],[[-7,1,-1,9,-9,-6,1,-8],[8,-5,-5,-2,-5,10,7,-7],[8,-4,4,-8,4,8,5,-8],[-5,-9,-7,9,7,-3,5,-1],[-9,2,8,-8,4,-10,4,-2],[-9,3,-4,-10,-10,-7,5,7],[-3,-7,1,-3,-5,-1,-1,10]],[[-6,7,-3,-2,10,-9,-7,6],[9,3,3,2,1,7,-8,1],[9,-5,5,-7,-5,7,-5,4],[-10,-2,4,-3,7,6,-6,-1],[-5,7,-4,-2,-1,2,5,7],[-4,-8,-3,3,10,9,-6,-1],[7,-8,2,-1,-10,8,3,-1]],[[-6,-7,-2,3,10,10,-10,-7],[-10,-9,9,-7,5,4,-3,-4],[8,10,-2,3,-2,-9,5,1],[-3,8,-10,-10,-2,-2,-3,-4],[8,8,4,3,4,8,10,-5],[-10,6,9,7,-2,6,7,-4],[-1,-6,-6,3,-3,-9,2,7]],[[-6,4,-8,-7,-1,-6,3,5],[4,3,4,-2,-8,-1,5,-4],[10,-8,-10,9,-10,-2,-6,-8],[-2,-2,6,-3,-3,7,-2,-10],[-1,-3,3,-4,8,5,7,-6],[-6,-3,-10,-9,3,-2,-4,-7],[1,8,1,-7,10,-3,-7,5]],[[-7,6,-7,2,-10,4,9,1],[-1,-3,10,3,2,-8,7,4],[4,-1,4,2,2,-8,-9,-10],[-7,-5,3,-9,-8,-5,2,8],[9,10,5,-9,-10,-9,-7,9],[1,3,4,2,10,-6,9,2],[-5,3,-4,8,-9,-3,5,-10]],[[-6,2,-6,-3,-2,-3,-2,10],[7,9,4,-7,4,1,2,6],[6,-9,2,1,2,6,-8,3],[-10,1,10,8,8,1,-3,-9],[5,-1,1,-5,-7,6,9,-5],[2,4,-3,-3,-4,-2,-3,5],[-8,-7,10,1,4,5,9,-10]],[[-3,2,-9,-7,-1,-7,10,4],[-8,-7,4,-8,-5,10,10,-4],[6,-10,-3,7,8,8,-6,5],[5,6,10,-6,4,1,-9,8],[-3,2,7,-9,3,-10,2,-7],[-7,-4,5,-4,-9,-5,-9,6],[3,-7,-5,-3,4,9,1,2]],[[-9,7,-8,2,-7,8,2,-10],[-1,-5,-3,-7,4,-4,-2,-6],[-5,-4,5,4,5,-10,5,-3],[-6,3,7,-8,-5,-9,-3,7],[-8,-2,-7,7,-8,10,-4,8],[-1,9,10,-2,-4,-4,-6,4],[2,-10,-2,-2,1,-4,4,7]]], dtype = "uint64")#candidate|62|(9, 7, 8)|const|uint64
var_63 = relay.var("var_63", dtype = "uint64", shape = (9, 7, 8))#candidate|63|(9, 7, 8)|var|uint64
bop_64 = relay.greater(const_62.astype('bool'), relay.reshape(var_63.astype('bool'), relay.shape_of(const_62))) # shape=(9, 7, 8)
uop_67 = relay.acosh(var_63.astype('float64')) # shape=(9, 7, 8)
bop_69 = relay.equal(uop_67.astype('bool'), relay.reshape(var_63.astype('bool'), relay.shape_of(uop_67))) # shape=(9, 7, 8)
uop_72 = relay.rsqrt(uop_67.astype('float32')) # shape=(9, 7, 8)
var_74 = relay.var("var_74", dtype = "float64", shape = (9, 7, 8))#candidate|74|(9, 7, 8)|var|float64
bop_75 = relay.maximum(uop_67.astype('int32'), relay.reshape(var_74.astype('int32'), relay.shape_of(uop_67))) # shape=(9, 7, 8)
bop_78 = relay.left_shift(uop_72.astype('uint32'), relay.reshape(bop_69.astype('uint32'), relay.shape_of(uop_72))) # shape=(9, 7, 8)
bop_81 = relay.less(bop_69.astype('bool'), relay.reshape(bop_64.astype('bool'), relay.shape_of(bop_69))) # shape=(9, 7, 8)
bop_84 = relay.right_shift(uop_72.astype('uint16'), relay.reshape(bop_78.astype('uint16'), relay.shape_of(uop_72))) # shape=(9, 7, 8)
bop_87 = relay.right_shift(bop_64.astype('uint32'), relay.reshape(var_74.astype('uint32'), relay.shape_of(bop_64))) # shape=(9, 7, 8)
bop_90 = relay.power(bop_84.astype('float64'), relay.reshape(bop_64.astype('float64'), relay.shape_of(bop_84))) # shape=(9, 7, 8)
var_93 = relay.var("var_93", dtype = "float64", shape = (9, 7, 8))#candidate|93|(9, 7, 8)|var|float64
bop_94 = relay.greater(uop_67.astype('bool'), relay.reshape(var_93.astype('bool'), relay.shape_of(uop_67))) # shape=(9, 7, 8)
bop_97 = relay.power(bop_84.astype('float64'), relay.reshape(bop_94.astype('float64'), relay.shape_of(bop_84))) # shape=(9, 7, 8)
bop_100 = relay.greater(bop_94.astype('bool'), relay.reshape(uop_72.astype('bool'), relay.shape_of(bop_94))) # shape=(9, 7, 8)
bop_103 = relay.greater_equal(bop_84.astype('bool'), relay.reshape(var_74.astype('bool'), relay.shape_of(bop_84))) # shape=(9, 7, 8)
bop_106 = relay.bitwise_or(bop_100.astype('int16'), relay.reshape(bop_90.astype('int16'), relay.shape_of(bop_100))) # shape=(9, 7, 8)
bop_109 = relay.maximum(bop_78.astype('int64'), relay.reshape(bop_75.astype('int64'), relay.shape_of(bop_78))) # shape=(9, 7, 8)
uop_112 = relay.asinh(uop_72.astype('float64')) # shape=(9, 7, 8)
bop_114 = relay.maximum(bop_94.astype('uint32'), relay.reshape(uop_67.astype('uint32'), relay.shape_of(bop_94))) # shape=(9, 7, 8)
output = relay.Tuple([bop_81,bop_87,bop_97,bop_103,bop_106,bop_109,uop_112,bop_114,])
output2 = relay.Tuple([bop_81,bop_87,bop_97,bop_103,bop_106,bop_109,uop_112,bop_114,])
func_117 = relay.Function([var_63,var_74,var_93,], output)
mod['func_117'] = func_117
mod = relay.transform.InferType()(mod)
var_118 = relay.var("var_118", dtype = "uint64", shape = (9, 7, 8))#candidate|118|(9, 7, 8)|var|uint64
var_119 = relay.var("var_119", dtype = "float64", shape = (9, 7, 8))#candidate|119|(9, 7, 8)|var|float64
var_120 = relay.var("var_120", dtype = "float64", shape = (9, 7, 8))#candidate|120|(9, 7, 8)|var|float64
output = func_117(var_118,var_119,var_120,)
func_121 = relay.Function([var_118,var_119,var_120,], output)
mutated_mod['func_121'] = func_121
mutated_mod = relay.transform.InferType()(mutated_mod)
const_123 = relay.const([[[-0.094819,-3.923690,6.450810,-9.433136,2.518943,-6.602170,8.985821,-4.241037,9.499201,-3.981892,-0.625139,6.906172,7.512191,3.945337,9.998042,-4.643963],[6.728658,-5.588581,-0.898447,6.403805,9.914987,2.448362,-8.811406,-0.594733,0.018299,-9.480075,7.394253,0.985472,-1.501901,-2.371292,9.261334,-3.500257],[-2.592657,2.381491,7.566693,-6.281908,-0.089781,7.553354,8.025768,-6.153320,4.148853,-2.469030,-9.878098,7.867120,-7.218801,2.795468,-5.318521,-0.845110],[-7.174490,-7.074771,-5.735621,-7.815177,-5.576889,3.398470,1.962160,-9.260457,2.557761,8.071877,-0.980138,-8.684761,-1.460397,-1.042337,9.299745,2.800209],[9.546312,-8.497460,-8.250741,-9.641650,-8.992751,2.606010,-7.536714,-9.210762,-5.907005,6.362489,-9.520276,-6.043392,5.118067,-4.756444,5.276921,-0.085487],[9.394570,5.687267,7.906996,-0.492275,3.448804,1.037225,1.441193,4.010216,1.066942,6.001708,9.888579,0.668730,-3.468760,1.437427,9.702127,-5.432779],[-1.830888,0.342857,-2.810472,-4.652917,3.126406,1.021585,0.040206,-6.002579,0.354562,3.277806,9.556000,-6.874605,-7.283095,-5.743752,5.499551,-9.684229]],[[-9.940955,-3.674729,5.987419,-5.158887,-3.620799,8.382801,6.973777,7.740205,5.347563,8.341878,4.806208,0.357909,6.900850,2.618614,-0.710280,9.522853],[4.418160,5.324402,-4.117240,9.831701,0.357358,-3.341407,0.271080,-3.532713,-7.583461,5.404017,6.709539,5.305242,-3.789939,4.695111,-5.558090,5.850846],[-0.578444,-1.606359,8.757238,-5.514450,3.773185,4.701050,-5.061974,9.992539,0.511580,-1.253824,6.811762,6.450986,-7.286668,2.506832,2.780340,1.417915],[6.094743,-1.516818,5.109487,-0.718987,-3.653650,2.356282,8.363447,2.027126,-6.453444,9.433945,-3.110818,9.684894,0.307965,1.404225,-6.502130,2.387911],[8.079105,-4.305467,-4.005266,0.959992,-5.693580,5.723542,9.656009,-8.401341,-4.579584,-4.602658,-8.197061,5.595546,-7.934989,9.462058,6.098786,-3.329863],[-7.755510,-5.662416,7.321508,4.107695,-9.978881,4.662868,-5.011289,5.169160,9.467549,3.040837,-3.482359,-4.700374,1.987828,5.637807,-6.722248,0.559409],[-2.413615,9.607526,5.068366,3.806347,8.182965,-5.390982,-7.215502,-3.686706,7.374341,4.810490,-5.627935,-8.922297,6.867912,0.137904,8.840622,7.415834]],[[-8.675517,-4.862858,2.685982,5.051253,-7.683743,-2.204829,-8.247653,6.028085,-8.050637,8.450687,-3.741985,7.653939,6.202198,7.056830,4.303549,-7.052428],[3.861686,-7.591535,-4.044892,3.106113,3.861328,5.670491,-9.133198,2.702037,2.063675,5.747373,-3.807439,-1.808247,2.813802,-5.235819,-3.774673,-2.672550],[4.731255,-3.255694,1.936944,8.552528,-6.846958,-3.074616,2.578762,9.821840,-4.702417,-3.955981,5.539762,-7.339313,-9.981873,-0.387719,6.628180,-1.359823],[7.616505,-8.119702,-2.542084,6.914754,-2.502953,8.320013,2.216796,-9.149043,4.387779,-4.617429,9.847816,-8.761724,2.723056,-2.227899,1.367232,-5.114098],[-4.562730,1.204674,-5.890998,8.857411,-1.540512,-9.557487,4.101082,0.039255,3.487156,-3.194878,-6.457159,-7.638521,1.160740,-9.065072,9.583506,0.661822],[3.110948,-7.898333,6.903460,-5.535005,-6.385037,5.665779,-6.104651,-3.659537,-6.668029,-9.918279,9.026782,-1.734401,-8.987115,-7.720247,7.203001,9.714157],[-9.668379,-5.112653,7.292154,-2.644780,3.998913,1.784950,-5.868865,4.046182,-9.871216,-3.342086,-0.891672,-0.386653,9.166296,-2.625274,-2.139000,-4.550114]],[[6.967920,-6.095474,0.272015,-1.240701,-4.385658,-3.594649,-6.999500,5.248890,-3.296391,-6.943679,5.563379,3.443722,9.001809,4.834940,8.968683,6.790008],[1.553129,5.421755,-7.848347,4.156489,3.799508,0.278239,-9.632403,5.214261,-2.072707,8.865414,-2.200525,3.506069,5.326094,-3.665380,-8.992298,2.479986],[0.117217,-7.768180,4.063121,0.871027,-1.254038,-1.146788,0.280508,1.984293,3.369985,6.876579,8.773935,-4.193692,-4.507106,9.423084,-8.131200,-9.795005],[9.596396,2.310446,-8.014453,3.496338,1.581472,4.156540,9.981608,8.269563,-5.854534,3.626470,9.374875,-7.659808,-0.916071,-8.460816,-7.486443,-8.606146],[0.735966,-2.375502,-4.351806,-9.429794,9.870650,5.075924,-6.858427,-6.289003,6.826011,-1.206926,2.870775,-3.856055,-8.029777,-9.993301,7.100288,-8.279899],[-0.956476,3.321820,6.035231,-9.508892,7.183757,8.740176,-3.892609,-2.889094,1.517185,-0.979044,7.794202,-2.604832,0.085594,4.580598,-5.655199,-0.391631],[-9.483176,0.588882,5.101875,0.425543,4.457912,5.405499,-1.181622,-9.977007,-2.759599,-4.786686,9.158383,-3.577458,3.913635,-6.595784,4.095566,-6.445112]],[[-9.732521,8.868607,1.131478,-8.046055,-5.452008,0.599755,-7.724033,-5.283736,-3.705419,-5.477169,-5.820773,9.797202,-6.290456,5.620040,-9.503958,-3.678662],[1.282648,-3.559507,-7.828161,-6.754687,-7.943549,0.096613,7.879287,-4.773024,-9.250761,1.186566,4.024349,-5.595583,-2.760895,8.863192,3.485567,2.123030],[-3.477436,6.160991,5.062567,9.438584,7.529507,-6.505001,-0.452358,5.784938,4.365054,4.577015,5.523289,3.122498,1.344254,-3.882446,-3.628946,-7.727321],[4.824259,0.087153,9.150447,9.141899,5.644436,6.158627,-5.587632,-6.340409,9.573015,-1.003763,0.019688,9.072029,-3.122543,0.435316,6.656498,9.077728],[4.831768,4.273676,5.190546,-4.852479,-1.204388,1.732227,-8.138698,4.212200,6.258570,-2.165221,8.431711,-6.187314,3.022751,-7.637626,2.135635,9.455465],[-2.965853,2.095972,4.886949,-6.086734,8.434685,-3.709721,2.747865,2.334676,1.745542,7.373769,2.252127,9.564098,0.808852,-2.569880,9.617914,4.603595],[-5.659169,-5.518451,-9.504691,-1.293854,-9.615479,9.145575,-9.369385,-6.835819,-7.439987,-2.720253,3.412905,-2.812385,9.988273,1.792318,1.517798,-1.435314]],[[4.150134,4.321108,4.670033,2.237009,4.114006,5.968332,-2.214545,0.166497,3.057487,-5.152905,8.943921,6.989872,1.747831,-4.949124,9.374120,1.350399],[2.828471,9.235141,-1.611833,-1.083985,2.361947,3.194423,5.204524,8.648908,-5.093668,-4.165634,-0.295383,-4.666490,-4.501382,-5.308871,1.058828,4.680782],[6.805499,9.399793,9.875685,6.365456,6.155393,-6.923038,3.975473,0.433040,-4.961504,-6.810451,8.091516,-2.741587,6.955232,7.795737,-3.229700,7.191529],[4.185099,1.055155,-7.222910,-6.950840,0.075848,-4.750003,-3.125607,-8.710668,4.778533,5.305757,4.210237,5.653162,2.545063,7.305508,0.090727,6.638007],[9.467549,0.398107,6.422173,7.408152,4.953585,1.171152,8.019781,-4.761459,-0.767541,0.339209,7.708034,-4.338885,-9.599288,5.724649,-9.444064,-6.498089],[5.675795,8.571833,9.748019,-4.888674,6.371583,-8.962077,9.636315,8.333498,2.794546,-7.992456,3.745834,9.608392,-3.424890,5.878063,5.339965,8.562870],[-6.217172,7.105979,7.168603,-0.759904,0.247726,-8.853038,2.407440,7.846960,-9.222764,3.064443,-7.414805,7.490060,8.042791,-5.458383,5.201067,-0.291084]],[[-2.121231,9.041553,8.020231,-5.516241,1.642463,3.123136,6.117367,9.513204,-6.566418,9.528396,4.751719,-0.048845,-2.443914,1.139918,-2.340730,5.778217],[2.523181,-7.254688,-2.433977,5.023998,3.534452,-0.841555,8.720779,9.999502,-2.590156,7.571507,4.203299,9.160306,-5.412841,0.696768,-4.854079,0.517548],[-9.425170,-0.388031,3.267685,-7.967336,-8.178194,0.163374,-8.848566,-5.819708,4.061187,-0.906456,5.916914,-9.781285,-2.005573,-1.722906,-9.617214,-8.761285],[1.342400,3.328088,-5.023391,-3.831224,-6.028389,6.746487,-4.576516,-3.730106,3.915082,-9.525258,-2.331529,-3.108574,1.353286,4.953740,-0.336807,-6.327365],[-9.374709,-7.542412,7.227817,3.358034,-6.514561,-6.354159,-0.125331,9.520257,2.871413,-7.418395,-4.763600,-6.306365,3.312166,-9.249908,4.791687,-0.313033],[-4.229527,-9.706094,6.707543,-8.498779,-8.261082,-2.447267,0.418516,-7.436365,0.770222,-3.910167,8.918240,2.103233,-0.514291,1.168252,-0.824954,5.723907],[-9.604820,-4.953807,7.443977,-0.473615,6.012504,3.145054,-3.899723,1.325185,-4.682571,8.463021,-4.843406,1.722591,-1.837158,-1.274255,-1.909736,-9.068104]],[[-6.910354,-7.300895,8.479362,4.618678,8.217814,2.442092,1.428599,7.382590,-7.762371,2.685354,-5.339833,2.184133,0.261263,2.510584,3.620209,4.608941],[1.221496,5.605540,-2.294563,7.072607,1.005783,1.430775,-1.668580,9.593747,7.620881,2.323966,7.259168,2.141971,7.895474,-3.030401,-2.428615,-6.520902],[7.239685,-7.019750,-8.347134,8.596391,-0.071247,-5.615980,7.253696,0.929566,6.329661,-5.538648,3.419523,5.500144,8.171237,3.448450,3.425114,5.771780],[9.621507,-8.290886,3.512640,-8.814450,-2.200864,-3.852364,-4.055506,0.671813,3.796080,-2.403580,6.913157,3.041857,5.875490,-3.333145,-2.266013,2.402597],[6.645365,2.672884,1.388497,-1.972767,9.261708,9.679433,-3.757309,3.978981,3.201304,-5.463126,6.418477,8.788211,-4.008584,-2.885819,7.192420,-4.693683],[2.982393,1.957810,9.635541,6.641923,0.739141,-6.976414,7.791873,1.309711,9.003008,5.841620,4.603888,3.351187,-5.571545,-4.090247,6.879555,-3.218958],[-3.829293,6.470425,6.069682,-4.270253,-6.845488,-6.371524,-2.347977,-7.919188,2.462780,9.306591,-6.464652,-3.321195,-0.222707,-1.286086,4.308213,-5.635729]]], dtype = "float64")#candidate|123|(8, 7, 16)|const|float64
uop_124 = relay.asinh(const_123.astype('float64')) # shape=(8, 7, 16)
var_126 = relay.var("var_126", dtype = "float64", shape = (8, 7, 16))#candidate|126|(8, 7, 16)|var|float64
bop_127 = relay.add(uop_124.astype('int32'), relay.reshape(var_126.astype('int32'), relay.shape_of(uop_124))) # shape=(8, 7, 16)
bop_130 = relay.bitwise_and(const_123.astype('uint8'), relay.reshape(uop_124.astype('uint8'), relay.shape_of(const_123))) # shape=(8, 7, 16)
uop_133 = relay.sqrt(bop_127.astype('float64')) # shape=(8, 7, 16)
bop_135 = relay.equal(uop_133.astype('bool'), relay.reshape(bop_127.astype('bool'), relay.shape_of(uop_133))) # shape=(8, 7, 16)
var_138 = relay.var("var_138", dtype = "bool", shape = (8, 7, 16))#candidate|138|(8, 7, 16)|var|bool
bop_139 = relay.less(bop_135.astype('bool'), relay.reshape(var_138.astype('bool'), relay.shape_of(bop_135))) # shape=(8, 7, 16)
uop_142 = relay.log2(bop_139.astype('float32')) # shape=(8, 7, 16)
uop_144 = relay.erf(bop_139.astype('float64')) # shape=(8, 7, 16)
uop_146 = relay.atanh(var_138.astype('float64')) # shape=(8, 7, 16)
const_148 = relay.const([[[1.299345,7.687467,9.617768,8.590621,6.263673,1.495145,5.546028,9.530681,-0.473524,-5.768362,2.603014,2.644469,-7.637907,-8.038135,-9.171522,-2.083376],[-2.201426,-4.649023,7.450895,1.777592,-0.717180,9.844350,-8.402558,-1.088325,-7.824950,0.679699,-5.721520,-6.495443,-2.409178,8.417825,8.453709,9.267867],[4.631092,1.048854,8.408027,6.982246,9.100455,7.851135,-6.407105,-0.878287,-2.893287,-6.225500,-7.079407,-8.673188,0.334644,2.444874,2.041635,-7.132440],[-3.081015,8.981238,6.728033,9.734617,4.626013,-5.847880,2.743988,5.760264,-6.095934,-9.930643,-4.977090,-3.615499,-8.634721,-0.048447,-4.802988,-3.944013],[-9.652979,-2.764563,6.241659,-2.833440,2.930088,-7.811910,4.788353,-0.261638,8.598603,8.050198,5.648671,1.978174,8.648656,-5.814494,-8.443449,4.301352],[-9.570169,-2.398582,0.484702,2.744025,-6.739390,2.344854,1.347798,2.432056,0.439845,-8.430140,-9.098763,-7.184944,-8.835955,9.076848,-1.694974,9.436746],[5.076313,-0.772546,6.806188,9.091335,8.911712,5.282118,-6.722326,9.329934,2.500790,0.989651,6.730654,-7.720778,-5.883235,-5.243127,-5.858397,0.594664]],[[-0.516851,-1.370468,0.597555,1.183513,1.448435,0.020083,3.869702,2.054904,5.186728,1.984755,-7.971721,-4.842725,9.273871,2.561033,-0.810171,1.463889],[-8.946026,-2.445083,0.679728,-5.568551,9.490513,3.189505,-8.007491,3.658003,5.563672,-4.492577,-4.732320,-5.519850,-4.817871,0.500588,-6.439946,6.336746],[2.216117,1.993322,6.367311,1.918992,3.097553,8.939525,2.872048,9.077694,6.586153,-9.017505,-0.248648,-3.062992,3.625963,-1.852931,-0.576982,-4.648662],[2.713479,9.516726,-8.238004,6.013084,1.953886,9.949829,-6.605981,8.380217,7.601106,3.098196,-0.072113,-8.415219,-9.463797,4.478470,-1.424083,-6.171001],[6.806006,-9.342999,-1.459188,-7.665064,-2.849572,-3.493730,-3.982773,7.743185,7.045088,-0.901413,-7.400230,3.013604,4.378677,6.983407,0.966110,0.743607],[5.107473,-9.996120,-2.269095,2.138428,-8.017564,5.564384,9.612224,-8.583322,3.084948,-5.871188,2.428256,-6.671131,4.634529,-9.231180,9.282769,1.223536],[3.924564,-1.126712,-8.373602,3.861277,5.316133,-8.410927,0.790343,-3.578687,3.160330,-2.520862,-9.291542,6.433025,-3.446439,-1.595663,5.922487,3.408125]],[[0.395151,-2.895783,5.694955,8.450993,-6.048774,-2.367036,-8.759932,2.611893,0.854867,9.442488,-9.306291,9.990958,-2.845626,1.487856,-7.499889,1.045844],[-1.773974,3.513865,3.017670,2.339998,-3.292713,6.584003,-0.749112,-4.288959,-6.252015,5.260066,-0.023195,7.948482,8.647171,8.150046,7.792648,6.728025],[-6.230052,-0.672561,0.625126,-7.545952,3.429332,8.210451,-4.286848,4.612013,1.645481,6.442290,-4.198993,-7.864521,3.839777,6.167617,-2.770762,1.487622],[6.208850,-5.055175,8.667365,1.025287,-8.420082,-0.992383,-4.867927,3.729580,-4.920302,-0.880944,-7.964501,-3.355133,-2.783767,-2.322116,0.165581,7.695169],[9.136423,6.672380,-5.244023,3.334713,9.561734,3.451051,-8.593843,1.023680,-3.240823,5.698578,2.604264,-3.838744,1.841769,-2.632367,-6.570361,1.832936],[-1.292913,-6.298060,9.446178,3.929632,3.615146,8.169628,-3.555546,0.495571,-9.007513,1.991082,-6.661194,8.389066,-1.305787,-0.060282,9.382154,5.865252],[8.213136,0.633423,8.835896,1.610601,2.014508,-1.205121,-3.089945,-4.612795,-6.938909,-8.953727,-2.080559,-2.158608,0.271086,1.040016,1.916846,-3.726336]],[[3.151155,6.418583,3.294684,0.963420,2.026007,-9.542874,8.572295,-4.134763,-1.667455,8.275977,-6.242372,0.219706,-1.491409,8.229392,3.044250,-0.969462],[8.649037,-5.480961,4.132274,0.391095,9.280557,-5.900013,2.267817,7.648020,6.967332,-2.493232,-1.580164,1.428450,-5.013541,-9.163446,1.788484,-9.831424],[7.659397,5.259396,5.087767,1.004989,-2.341506,3.167716,1.077993,2.452618,6.135570,-3.676397,1.111967,2.425232,-5.404397,-9.855928,-7.281840,-9.783401],[3.911113,-1.909241,5.271631,3.571131,3.766688,3.948934,5.468970,9.596400,-0.694099,0.240412,-8.383874,6.812653,-6.458863,-6.891499,3.656081,-6.685637],[-3.771267,7.701640,8.589722,9.180461,4.106110,4.924117,3.809696,-6.561797,-0.696005,0.716521,-3.288991,-1.439992,-3.275971,2.656082,4.378416,-0.246522],[5.677261,1.805620,3.834601,1.804628,6.349896,2.179172,-2.719385,-7.742417,9.581972,2.631524,4.650054,2.063687,-6.168236,7.987929,-2.921035,7.429896],[1.812346,-2.029572,4.799085,4.892335,-0.193118,5.946270,-5.429775,-1.431141,9.006995,2.248383,2.749772,9.335438,-3.633053,1.097112,-2.410393,-4.712276]],[[-3.154435,-3.049980,-1.692970,-8.576471,7.894554,4.151694,-7.489491,0.369232,4.476758,-0.102880,2.992902,-7.379778,-5.176575,3.854603,-6.494072,-0.851047],[-2.240690,-8.902824,-3.599404,-3.480571,-4.993267,-9.861092,4.026033,4.576046,-8.520753,8.823570,9.875592,2.655643,8.980577,-2.883630,-0.504466,-5.812833],[-6.736718,-2.622109,-5.647228,-5.376564,-6.287815,8.281835,-6.730620,5.612299,-9.250238,6.144863,-0.761725,1.411777,9.925361,-5.200224,-7.336928,-4.286761],[6.483363,0.472082,4.480359,0.714395,-2.654926,1.717176,6.244002,-5.334179,9.844374,2.641232,-7.902753,-5.969583,-1.213688,-8.348608,4.826395,9.676510],[5.150288,-9.417347,-7.671191,-8.369032,-8.292282,-4.896218,-5.469704,6.912967,-7.060606,-6.981259,6.621964,-1.264680,2.022498,-6.559430,1.652041,5.842831],[5.483765,-0.461378,2.535476,-0.417450,-1.710680,7.477270,6.168722,0.995423,3.972822,8.468790,-5.540657,2.256328,-3.044382,-0.123438,4.872506,-3.172995],[-6.996880,0.724025,9.092183,9.403346,-9.890200,2.783607,-7.738858,0.892047,-1.859458,-3.191923,-3.569660,-7.077302,-3.620272,-5.487776,-4.018975,-2.836033]],[[8.143136,4.484175,7.838721,8.409742,8.637131,-1.120486,8.128345,-7.065159,-4.145791,-4.481414,-3.449565,0.742566,0.035974,-2.456346,-3.738036,-8.544243],[-6.856163,-6.047132,3.727532,0.414731,-1.056845,-4.419473,5.485319,6.958939,3.863794,-0.498639,-4.035294,-4.937202,-8.281182,-7.821924,0.058015,-2.996302],[-7.163505,-9.575977,-5.724747,-6.658172,8.047222,-3.226613,2.170257,-4.556742,3.269396,-5.913207,-8.301611,-5.225801,-8.283157,2.567139,2.135708,3.741219],[-1.680749,5.381066,-8.472276,-8.550530,-1.375951,-3.740396,-4.191145,8.373261,-6.102373,-0.489640,-9.088903,0.748265,9.876001,9.671307,-4.997558,-9.173765],[-2.251953,-5.307588,9.915653,-9.482805,7.671810,-5.428257,4.519438,-8.666423,7.890376,-0.098587,2.209922,-1.327277,-3.789360,9.055348,4.995267,3.777261],[-0.333949,-4.575065,-6.883412,8.158093,0.007336,-3.708948,5.628074,-5.027740,9.297006,7.572423,-1.716489,5.378126,0.676034,-9.711161,-1.044902,-4.305943],[0.155680,-7.222213,5.419418,4.913747,8.758384,4.596263,-4.069199,-7.159737,-9.036883,-5.923227,8.784598,9.398717,4.736611,1.483547,4.210657,-3.626263]],[[-1.087867,4.889864,-1.288689,0.555817,-9.478224,7.420364,-6.705337,-5.303933,0.846219,-1.147251,-9.880226,1.190847,7.603258,7.145016,-5.361025,6.070579],[-4.660189,-0.588197,2.704468,4.360283,-0.291918,7.615828,-7.950077,4.731778,-3.700947,-1.471985,3.978630,-1.398501,9.689219,7.928570,2.009529,-1.854453],[6.268515,3.071604,-0.184467,-8.963560,7.294511,-2.110834,1.299048,4.967160,8.642545,-2.643618,1.531591,1.567764,-6.570787,-7.655049,0.974632,-0.025420],[2.764477,6.146702,-9.012924,-0.621475,6.801858,4.302061,-1.746521,7.904837,-7.809466,-5.545782,-1.544481,-0.215222,-5.780582,9.162497,-4.746633,7.043296],[1.437897,2.057583,-4.331488,3.506765,-9.367344,5.543858,0.766173,-4.498930,-4.924827,4.568084,-1.088064,-8.605700,-2.607399,-2.174616,6.360771,-2.713224],[3.641089,-9.478904,3.605422,5.825924,-7.183048,-8.122783,9.627221,4.247158,8.835144,1.032187,0.093298,-1.631721,4.782347,-7.249395,-9.124906,1.859773],[-8.064888,-6.881394,5.906265,-1.554870,-1.290883,0.591651,0.531728,4.476307,2.240319,0.961706,-6.883335,-6.061015,-2.199020,-7.295719,4.276034,-6.956404]],[[6.627425,6.541337,1.977286,-5.809200,-5.111660,0.135283,3.450637,-0.002802,4.192912,0.834967,5.706523,6.333608,-4.601229,8.551248,6.807359,3.768546],[-7.557359,0.476393,-5.495422,4.514328,8.273125,9.434154,0.431099,0.156240,2.280044,0.132852,-0.159123,-7.133823,-6.342848,-2.936514,-2.750892,1.065967],[-8.202540,-4.846758,-4.356986,5.078242,-4.624814,-2.636938,-2.656383,6.829167,-6.895019,5.237500,1.172266,3.674814,8.437567,-5.400816,-5.696907,-3.522890],[-9.887982,5.755316,-4.908757,7.781450,1.450511,-6.502612,4.114979,4.909414,-2.270012,3.937675,9.546297,-5.945614,-4.032513,-7.850078,-8.137127,-4.022882],[8.101110,9.387871,-9.699385,-2.289924,5.588060,-6.627667,-9.160405,-4.074240,-3.382864,8.785457,9.929377,-6.462993,-1.771857,-6.595014,8.672627,1.792834],[-5.448114,-1.531507,3.349367,5.665865,0.510043,-0.670457,7.280536,9.156128,-6.725686,1.897667,-9.556824,7.658267,-2.649999,9.468732,-4.981680,-9.735096],[5.044081,-4.601616,-7.903016,0.014641,2.279812,1.024813,5.545691,-9.998693,4.482844,6.789004,8.103345,-9.118452,-9.371767,6.316554,4.536428,1.442199]]], dtype = "float64")#candidate|148|(8, 7, 16)|const|float64
bop_149 = relay.mod(uop_144.astype('float64'), relay.reshape(const_148.astype('float64'), relay.shape_of(uop_144))) # shape=(8, 7, 16)
bop_152 = relay.floor_divide(const_148.astype('float64'), relay.reshape(var_138.astype('float64'), relay.shape_of(const_148))) # shape=(8, 7, 16)
uop_155 = relay.log2(uop_142.astype('float64')) # shape=(8, 7, 16)
func_52_call = mod.get_global_var('func_52')
func_60_call = mutated_mod.get_global_var('func_60')
var_158 = relay.var("var_158", dtype = "int8", shape = ())#candidate|158|()|var|int8
var_159 = relay.var("var_159", dtype = "int8", shape = (288,))#candidate|159|(288,)|var|int8
call_157 = relay.TupleGetItem(func_52_call(relay.reshape(var_158.astype('int8'), []), relay.reshape(var_159.astype('int8'), [16, 3, 6]), relay.reshape(var_159.astype('int8'), [16, 3, 6]), relay.reshape(var_159.astype('float32'), [16, 3, 6]), relay.reshape(var_159.astype('int8'), [16, 3, 6]), relay.reshape(var_159.astype('bool'), [16, 3, 6]), ), 0)
call_160 = relay.TupleGetItem(func_60_call(relay.reshape(var_158.astype('int8'), []), relay.reshape(var_159.astype('int8'), [16, 3, 6]), relay.reshape(var_159.astype('int8'), [16, 3, 6]), relay.reshape(var_159.astype('float32'), [16, 3, 6]), relay.reshape(var_159.astype('int8'), [16, 3, 6]), relay.reshape(var_159.astype('bool'), [16, 3, 6]), ), 0)
uop_161 = relay.sigmoid(uop_155.astype('float32')) # shape=(8, 7, 16)
bop_163 = relay.minimum(uop_161.astype('uint32'), relay.reshape(uop_142.astype('uint32'), relay.shape_of(uop_161))) # shape=(8, 7, 16)
uop_166 = relay.atanh(uop_133.astype('float64')) # shape=(8, 7, 16)
bop_168 = relay.bitwise_xor(uop_155.astype('uint8'), relay.reshape(uop_161.astype('uint8'), relay.shape_of(uop_155))) # shape=(8, 7, 16)
uop_171 = relay.asin(uop_155.astype('float64')) # shape=(8, 7, 16)
var_173 = relay.var("var_173", dtype = "float64", shape = (8, 7, 16))#candidate|173|(8, 7, 16)|var|float64
bop_174 = relay.logical_and(uop_171.astype('bool'), relay.reshape(var_173.astype('bool'), relay.shape_of(uop_171))) # shape=(8, 7, 16)
const_177 = relay.const([[[10,-3,5,9,10,-7,-1,5,-7,5,-7,1,5,-6,-9,-8],[-8,6,-3,-5,10,1,4,9,6,9,4,9,-5,-4,8,3],[-4,-1,6,2,-9,7,-9,-5,2,-2,-3,4,8,2,1,-3],[-8,10,2,2,-6,-5,7,4,3,6,7,-3,9,2,-5,-2],[1,9,-5,7,1,-8,3,8,8,-1,3,9,-3,9,-5,-3],[5,4,-4,-3,4,-3,-3,-2,-4,-5,6,8,-4,9,8,-8],[5,-2,2,6,-9,10,2,5,4,3,-4,1,-8,7,-4,10]],[[4,10,9,1,-5,-2,-4,10,-6,8,-4,10,-3,1,-2,7],[-4,4,-1,1,-8,10,9,8,5,-5,-8,4,-2,7,5,-1],[-10,-2,2,8,8,9,-10,-3,4,-7,-3,-4,-3,10,-6,6],[-8,9,-4,7,5,-7,3,-3,8,-1,-8,-7,-5,-2,9,-7],[6,8,-2,-2,-1,3,9,-2,5,-9,8,7,-4,-4,-5,-4],[8,-3,-7,9,-3,3,-10,10,-8,-10,4,10,4,-5,-7,-4],[-8,-9,-1,2,-3,-6,2,10,-5,-6,10,1,2,-5,-2,5]],[[-7,7,-5,1,-6,2,-5,5,5,-2,-9,-8,-6,1,-3,10],[-3,7,-7,-5,-9,8,1,5,7,2,-10,-9,5,-6,6,-10],[4,6,-8,-4,-10,-1,6,-9,-3,10,-1,-2,7,-7,-6,4],[6,3,3,-3,8,5,9,-8,5,8,7,2,-7,-8,6,5],[2,-6,-3,-9,2,-6,8,-5,-2,-8,-4,2,9,-4,-2,7],[-5,10,-1,-9,-2,5,-9,-2,-5,9,-1,1,-10,5,2,-7],[-6,-6,-7,9,2,-9,4,3,4,-9,4,6,-2,8,-4,2]],[[-4,-6,-3,-10,7,-7,5,-10,-3,-3,-8,-5,-2,6,-9,-6],[9,6,7,9,9,6,-8,-10,-7,10,-4,8,9,3,-4,-3],[-3,5,6,3,-9,-7,7,-10,2,10,4,-3,-1,10,-7,8],[-3,7,8,5,1,6,9,2,5,-9,-9,-3,9,8,8,6],[-3,-1,5,2,-5,-5,6,8,-9,-10,9,3,-7,-6,10,-6],[-6,-6,10,8,6,-4,1,4,8,10,-7,9,-5,1,-8,-8],[2,5,10,1,-7,10,6,-7,8,-4,-2,3,10,3,-8,10]],[[3,-4,-9,2,-8,1,6,8,7,3,7,-9,7,-6,-10,-5],[-2,-7,3,-6,-10,5,-8,2,-7,7,8,-4,7,-9,6,10],[-2,10,6,8,-4,-6,8,-8,-2,10,10,-4,-1,3,-9,-5],[4,8,-3,8,9,-10,1,-3,-2,2,6,10,-10,-7,10,2],[9,-5,-6,10,6,-4,7,-1,-2,-2,10,-8,-8,1,-6,3],[-3,-8,1,6,-7,6,8,2,8,-8,9,-3,10,-7,7,6],[6,8,-1,7,-5,-1,-8,-4,-8,-7,8,-3,3,9,-10,9]],[[8,-5,2,-6,-3,-1,-1,-7,7,5,3,-8,-8,8,1,-5],[-7,-9,-10,-7,3,4,-2,2,-7,5,-4,8,-1,1,-4,-2],[-5,-9,7,8,3,-3,-4,-4,-1,-1,-3,9,5,-5,-4,-7],[7,6,1,5,7,-1,-2,-2,-6,-10,-3,-3,8,-5,-5,3],[-2,8,-4,-9,1,-4,5,-8,10,-7,6,9,-10,-6,1,-8],[8,-6,1,5,-5,6,6,8,3,-7,9,-1,-2,-3,6,-6],[9,9,7,-1,5,-2,-3,-7,8,-5,1,4,-5,-8,8,7]],[[6,-7,-4,-7,8,-9,10,7,-9,-4,10,-4,7,-6,-6,4],[3,-8,10,5,5,-10,8,-4,10,7,-8,-3,-1,-3,5,10],[9,-4,-3,8,3,-2,5,-7,-4,5,5,8,-10,-4,8,-3],[-4,-9,-6,-5,-5,9,3,-7,2,10,3,-5,10,-9,7,-7],[-1,-8,-3,5,7,10,-1,6,2,-3,5,9,1,-4,-10,-9],[-7,-7,7,-10,7,6,-10,3,8,8,-6,-9,-7,-5,-3,-9],[9,-3,-7,3,-3,-3,-1,5,-2,3,2,-7,4,-5,6,9]],[[7,4,-5,9,5,-2,-8,-6,-2,10,-2,10,-9,-6,6,-2],[7,10,-2,1,2,-2,10,1,-8,5,-8,-9,-9,-1,10,1],[-9,1,-1,9,-8,6,-10,10,-9,-9,10,-5,-10,-6,-2,-10],[-8,-2,-3,-6,1,-9,-10,10,-5,-8,6,-6,2,7,-8,4],[-7,-7,-7,-3,5,-3,2,6,-2,-4,10,5,1,5,-8,-5],[5,-7,-7,5,2,-8,-1,6,9,-10,-10,-10,-6,10,3,-10],[7,3,6,5,5,-6,8,-10,2,7,-4,4,-3,5,-8,-4]]], dtype = "uint8")#candidate|177|(8, 7, 16)|const|uint8
bop_178 = relay.mod(bop_168.astype('float32'), relay.reshape(const_177.astype('float32'), relay.shape_of(bop_168))) # shape=(8, 7, 16)
uop_181 = relay.log(bop_163.astype('float64')) # shape=(8, 7, 16)
bop_183 = relay.maximum(uop_161.astype('int64'), relay.reshape(var_173.astype('int64'), relay.shape_of(uop_161))) # shape=(8, 7, 16)
uop_186 = relay.erf(bop_149.astype('float64')) # shape=(8, 7, 16)
uop_188 = relay.cos(uop_181.astype('float32')) # shape=(8, 7, 16)
uop_190 = relay.acos(uop_181.astype('float64')) # shape=(8, 7, 16)
bop_192 = relay.logical_xor(uop_155.astype('uint32'), relay.reshape(var_173.astype('uint32'), relay.shape_of(uop_155))) # shape=(8, 7, 16)
uop_195 = relay.erf(bop_149.astype('float32')) # shape=(8, 7, 16)
bop_197 = relay.add(uop_186.astype('int32'), relay.reshape(uop_181.astype('int32'), relay.shape_of(uop_186))) # shape=(8, 7, 16)
bop_200 = relay.floor_divide(uop_188.astype('float32'), relay.reshape(const_177.astype('float32'), relay.shape_of(uop_188))) # shape=(8, 7, 16)
bop_203 = relay.bitwise_or(uop_181.astype('int64'), relay.reshape(uop_186.astype('int64'), relay.shape_of(uop_181))) # shape=(8, 7, 16)
bop_206 = relay.logical_or(uop_188.astype('bool'), relay.reshape(uop_142.astype('bool'), relay.shape_of(uop_188))) # shape=(8, 7, 16)
bop_209 = relay.multiply(uop_188.astype('int8'), relay.reshape(bop_139.astype('int8'), relay.shape_of(uop_188))) # shape=(8, 7, 16)
uop_212 = relay.sqrt(bop_203.astype('float32')) # shape=(8, 7, 16)
bop_214 = relay.logical_and(bop_206.astype('bool'), relay.reshape(uop_146.astype('bool'), relay.shape_of(bop_206))) # shape=(8, 7, 16)
output = relay.Tuple([bop_130,bop_152,call_157,var_158,var_159,uop_166,bop_174,bop_178,bop_183,uop_190,bop_192,uop_195,bop_197,bop_200,bop_209,uop_212,bop_214,])
output2 = relay.Tuple([bop_130,bop_152,call_160,var_158,var_159,uop_166,bop_174,bop_178,bop_183,uop_190,bop_192,uop_195,bop_197,bop_200,bop_209,uop_212,bop_214,])
func_217 = relay.Function([var_126,var_138,var_158,var_159,var_173,], output)
mod['func_217'] = func_217
mod = relay.transform.InferType()(mod)
var_218 = relay.var("var_218", dtype = "float64", shape = (8, 7, 16))#candidate|218|(8, 7, 16)|var|float64
var_219 = relay.var("var_219", dtype = "bool", shape = (8, 7, 16))#candidate|219|(8, 7, 16)|var|bool
var_220 = relay.var("var_220", dtype = "int8", shape = ())#candidate|220|()|var|int8
var_221 = relay.var("var_221", dtype = "int8", shape = (288,))#candidate|221|(288,)|var|int8
var_222 = relay.var("var_222", dtype = "float64", shape = (8, 7, 16))#candidate|222|(8, 7, 16)|var|float64
output = func_217(var_218,var_219,var_220,var_221,var_222,)
func_223 = relay.Function([var_218,var_219,var_220,var_221,var_222,], output)
mutated_mod['func_223'] = func_223
mutated_mod = relay.transform.InferType()(mutated_mod)
var_225 = relay.var("var_225", dtype = "float32", shape = (7, 1))#candidate|225|(7, 1)|var|float32
uop_226 = relay.sinh(var_225.astype('float32')) # shape=(7, 1)
output = uop_226
output2 = uop_226
func_228 = relay.Function([var_225,], output)
mod['func_228'] = func_228
mod = relay.transform.InferType()(mod)
var_229 = relay.var("var_229", dtype = "float32", shape = (7, 1))#candidate|229|(7, 1)|var|float32
output = func_228(var_229)
func_230 = relay.Function([var_229], output)
mutated_mod['func_230'] = func_230
mutated_mod = relay.transform.InferType()(mutated_mod)
const_232 = relay.const([[2,-4,-5,-6,6,-1,6,-9,5,4,6,7,4,-6],[-10,8,-10,8,3,-8,-10,9,1,9,-3,9,8,-9],[-7,-9,5,1,-10,-1,-7,-4,-9,4,-1,5,6,7],[3,6,1,7,5,-3,10,-9,-4,3,8,-5,-2,4],[8,4,7,9,7,8,-7,6,7,-4,10,8,9,-6],[-4,1,-4,-3,-6,3,-10,5,1,5,-9,-1,-8,-7]], dtype = "uint16")#candidate|232|(6, 14)|const|uint16
var_233 = relay.var("var_233", dtype = "uint16", shape = (6, 14))#candidate|233|(6, 14)|var|uint16
bop_234 = relay.not_equal(const_232.astype('bool'), relay.reshape(var_233.astype('bool'), relay.shape_of(const_232))) # shape=(6, 14)
uop_237 = relay.erf(var_233.astype('float32')) # shape=(6, 14)
var_239 = relay.var("var_239", dtype = "uint16", shape = (6, 14))#candidate|239|(6, 14)|var|uint16
bop_240 = relay.not_equal(var_233.astype('bool'), relay.reshape(var_239.astype('bool'), relay.shape_of(var_233))) # shape=(6, 14)
bop_243 = relay.bitwise_or(uop_237.astype('uint16'), relay.reshape(const_232.astype('uint16'), relay.shape_of(uop_237))) # shape=(6, 14)
uop_246 = relay.acos(bop_243.astype('float64')) # shape=(6, 14)
var_248 = relay.var("var_248", dtype = "float64", shape = (6, 14))#candidate|248|(6, 14)|var|float64
bop_249 = relay.bitwise_and(uop_246.astype('uint8'), relay.reshape(var_248.astype('uint8'), relay.shape_of(uop_246))) # shape=(6, 14)
bop_252 = relay.add(uop_246.astype('int32'), relay.reshape(bop_243.astype('int32'), relay.shape_of(uop_246))) # shape=(6, 14)
uop_255 = relay.log(uop_237.astype('float64')) # shape=(6, 14)
uop_257 = relay.sin(var_233.astype('float32')) # shape=(6, 14)
uop_259 = relay.atan(uop_255.astype('float32')) # shape=(6, 14)
bop_261 = relay.greater_equal(uop_259.astype('bool'), relay.reshape(var_233.astype('bool'), relay.shape_of(uop_259))) # shape=(6, 14)
const_264 = relay.const([[-3,3,-7,6,6,2,1,-7,-8,8,6,2,-7,5],[4,9,-6,-9,-9,-8,10,-8,-5,-2,10,4,-3,7],[9,3,-5,-1,7,3,-6,4,10,-9,-5,-10,10,-10],[-2,4,-8,5,1,6,7,-7,-8,-2,-1,5,-1,-10],[1,-5,-8,6,-8,-1,8,-1,7,-9,7,3,-2,5],[-3,8,6,1,-4,3,-10,5,2,-5,1,3,-7,7]], dtype = "int32")#candidate|264|(6, 14)|const|int32
bop_265 = relay.equal(bop_252.astype('bool'), relay.reshape(const_264.astype('bool'), relay.shape_of(bop_252))) # shape=(6, 14)
var_268 = relay.var("var_268", dtype = "uint16", shape = (6, 14))#candidate|268|(6, 14)|var|uint16
bop_269 = relay.subtract(bop_243.astype('int64'), relay.reshape(var_268.astype('int64'), relay.shape_of(bop_243))) # shape=(6, 14)
bop_272 = relay.subtract(bop_243.astype('float64'), relay.reshape(bop_265.astype('float64'), relay.shape_of(bop_243))) # shape=(6, 14)
output = relay.Tuple([bop_234,bop_240,bop_249,uop_257,bop_261,bop_269,bop_272,])
output2 = relay.Tuple([bop_234,bop_240,bop_249,uop_257,bop_261,bop_269,bop_272,])
func_275 = relay.Function([var_233,var_239,var_248,var_268,], output)
mod['func_275'] = func_275
mod = relay.transform.InferType()(mod)
var_276 = relay.var("var_276", dtype = "uint16", shape = (6, 14))#candidate|276|(6, 14)|var|uint16
var_277 = relay.var("var_277", dtype = "uint16", shape = (6, 14))#candidate|277|(6, 14)|var|uint16
var_278 = relay.var("var_278", dtype = "float64", shape = (6, 14))#candidate|278|(6, 14)|var|float64
var_279 = relay.var("var_279", dtype = "uint16", shape = (6, 14))#candidate|279|(6, 14)|var|uint16
output = func_275(var_276,var_277,var_278,var_279,)
func_280 = relay.Function([var_276,var_277,var_278,var_279,], output)
mutated_mod['func_280'] = func_280
mutated_mod = relay.transform.InferType()(mutated_mod)
const_282 = relay.const([[[7,5,-9,-8,-6,-10,-7,-7,10,3,10,2,-5,1],[-7,1,8,3,10,6,8,-8,2,-9,1,-4,2,-10],[-2,-6,-2,10,-4,-9,-6,-2,-1,-1,-6,-7,-4,9],[-4,2,2,4,8,-3,-1,-9,-7,3,-3,-5,5,-5],[3,-7,-5,-5,-1,-10,-7,1,5,-4,3,4,-2,-5],[9,7,8,-10,-3,1,-8,-2,3,-2,3,3,-5,-4]],[[-4,-3,-10,6,4,-10,-3,-2,-9,-5,-8,-5,2,9],[-4,4,1,-4,10,9,-8,-5,-8,-3,1,-1,4,2],[-3,5,5,9,1,-8,-5,-6,-6,7,8,-2,7,-8],[9,-1,2,-4,-9,6,8,2,-1,-8,9,-2,5,-8],[7,-7,7,-1,-6,-7,-7,5,-6,-1,-7,-5,-4,5],[-9,2,-8,-2,-7,-1,7,-7,10,-2,-1,3,-9,4]],[[5,3,-2,-2,3,3,-7,4,4,-10,5,9,2,6],[2,5,9,3,-4,-2,-1,9,-9,3,6,8,-3,9],[-10,-9,7,2,-3,-7,-2,-5,4,-10,-9,-8,4,8],[4,-5,4,-1,-9,5,7,-8,-3,-1,-7,3,4,10],[-9,9,6,2,-7,9,5,9,-9,3,2,-2,7,-6],[7,2,6,1,-5,-2,-5,10,8,-2,-8,1,-8,-8]],[[8,-7,2,3,1,10,9,10,-6,2,2,10,-8,10],[6,5,4,9,3,1,-7,2,4,8,2,3,5,-6],[6,2,-3,-6,-9,10,8,-8,4,-9,-9,8,10,-9],[-5,-9,-8,5,-8,-8,-9,-10,2,1,5,-4,-10,10],[-6,-4,-2,5,4,3,2,-2,10,7,-10,-7,10,-3],[-6,10,-2,4,-5,-5,-9,-4,8,2,-8,9,9,4]],[[7,-10,10,6,2,5,-9,10,-7,-8,8,4,-1,5],[8,9,-7,-10,-9,-7,8,-10,-2,-4,-5,-3,-4,-1],[9,5,5,3,-3,7,9,4,-7,4,-7,8,3,-8],[-8,4,-5,3,4,-2,-8,10,-4,-5,-1,2,-9,1],[-10,3,-8,-7,9,-4,5,2,6,1,6,-3,-6,6],[-3,-1,8,5,2,-10,2,-4,2,10,-5,8,-8,-10]]], dtype = "int16")#candidate|282|(5, 6, 14)|const|int16
var_283 = relay.var("var_283", dtype = "int16", shape = (5, 6, 14))#candidate|283|(5, 6, 14)|var|int16
bop_284 = relay.bitwise_and(const_282.astype('int16'), relay.reshape(var_283.astype('int16'), relay.shape_of(const_282))) # shape=(5, 6, 14)
bop_287 = relay.bitwise_xor(const_282.astype('uint32'), relay.reshape(bop_284.astype('uint32'), relay.shape_of(const_282))) # shape=(5, 6, 14)
uop_290 = relay.tan(var_283.astype('float32')) # shape=(5, 6, 14)
uop_292 = relay.acosh(uop_290.astype('float64')) # shape=(5, 6, 14)
bop_294 = relay.floor_divide(uop_292.astype('float64'), relay.reshape(const_282.astype('float64'), relay.shape_of(uop_292))) # shape=(5, 6, 14)
bop_297 = relay.mod(uop_290.astype('float64'), relay.reshape(bop_294.astype('float64'), relay.shape_of(uop_290))) # shape=(5, 6, 14)
uop_300 = relay.sqrt(uop_292.astype('float32')) # shape=(5, 6, 14)
bop_302 = relay.less(uop_300.astype('bool'), relay.reshape(bop_297.astype('bool'), relay.shape_of(uop_300))) # shape=(5, 6, 14)
const_305 = relay.const([[[2.223840,6.434985,-8.843909,3.237505,-6.263714,-4.755901,8.090889,-7.866270,4.461687,-5.627158,6.286677,0.862305,-9.226539,-8.916710],[-8.339482,3.855527,5.027536,-8.249490,-7.025772,-7.254932,9.507286,-2.889532,2.663130,1.747276,-7.684120,8.783118,6.867430,7.211251],[4.010641,9.679297,-2.668553,1.479557,7.969741,4.124040,0.479584,-4.766114,-7.036480,-0.648251,9.680939,-2.116436,1.839542,7.005017],[-8.287306,0.340879,1.021042,6.134708,0.559391,5.998039,-6.653167,-5.064412,-3.194079,-0.098535,9.846662,-8.809735,-7.796058,-0.622836],[-0.709747,-7.705425,-8.957057,-6.408867,-3.494431,6.034137,2.599986,2.595621,3.948232,6.084003,-4.874307,-2.991253,-9.805602,0.370315],[4.610584,9.465123,7.148489,-9.143020,1.657221,3.457967,6.342340,6.852645,-6.735097,-2.150647,-7.847610,4.029181,-7.949700,-4.584065]],[[6.729133,1.852975,9.926604,-8.068595,3.504838,-7.471046,-3.484267,-1.393095,1.285558,-1.298126,-8.079520,7.799200,-8.509124,-3.312958],[0.776950,-4.533334,-0.483238,6.471803,-6.998630,-1.519734,5.732260,-2.327511,6.675836,3.134888,-7.646676,-2.343385,-6.268932,3.383818],[-5.374004,6.315085,-4.998315,-9.141755,-5.357659,-4.967050,-8.956609,-1.891470,8.231860,7.567445,1.247976,1.250731,-0.198972,6.641563],[-9.004345,9.530902,-7.198198,-9.129875,-8.985716,5.900581,-9.880248,1.677511,-5.114329,-6.076895,-4.672809,-7.456830,-6.671777,7.536657],[3.894316,-2.488686,9.907212,7.413628,-0.073892,-8.122015,-5.241387,7.789644,4.093121,8.023120,-4.191453,-8.066055,2.455274,1.017038],[-8.669357,-6.208997,3.719954,0.529444,7.598457,-1.038004,-0.723103,-5.462829,-4.998357,-1.401040,7.376916,4.985545,7.147098,-7.729742]],[[9.637811,2.203036,8.044278,9.437561,-2.328530,4.479424,5.529600,5.317257,5.341668,0.016997,-9.266860,1.666442,6.843426,6.225446],[-5.332372,-4.739055,8.482420,-3.837280,4.998108,0.754053,-6.381735,7.047085,-8.116281,-2.520512,0.343339,7.032379,6.519735,4.732063],[-5.919957,7.849870,-0.768409,-1.238640,6.055426,-5.052531,-6.947366,-1.342675,6.690036,5.137526,6.017987,8.273972,2.863766,-5.086161],[9.107744,3.107036,-4.812797,4.990774,-7.249464,5.103067,-5.554811,2.179572,2.176022,7.176539,0.034901,8.302001,-9.509854,3.940635],[4.433381,-9.248179,5.911629,-4.037782,7.137723,7.422111,4.058585,7.833548,-8.976675,8.022463,6.524908,-4.988738,4.419835,5.353457],[-4.625189,3.702408,-9.663605,1.298738,1.952151,6.800944,7.213872,3.163457,8.092237,-7.032181,6.594984,-7.131508,-9.079912,0.452599]],[[-0.708921,-7.427039,-4.543526,-1.704603,9.123307,-4.990573,-3.305548,5.345369,-6.798878,-2.195683,-3.335483,-3.919667,-7.102301,-9.695684],[4.870076,-7.542110,-4.944871,7.304458,-1.560784,3.318838,9.757470,2.641182,7.150571,5.639539,6.031967,-6.988190,-9.582469,2.483627],[2.246922,3.168581,8.186202,-5.613863,-5.869974,-4.775498,9.213842,7.288985,-2.552837,-1.759976,3.386449,0.919591,-3.200802,-7.022957],[-2.510432,6.094894,3.375035,8.478536,2.154345,-9.764131,9.706064,-1.299611,-4.156529,0.323034,-1.692256,5.753549,4.822807,-8.307120],[-8.952020,-6.570633,-9.263974,-5.215997,-9.056613,5.030195,7.346619,-4.283099,-9.201409,3.496222,-3.172029,8.106697,8.673266,-2.484584],[-1.675948,-0.880583,-3.638595,8.111456,-1.153775,-4.946956,0.230643,-2.760971,-0.108444,7.566884,-7.791136,0.011410,3.042128,9.288495]],[[4.587449,7.886675,7.642922,-0.971602,-5.366459,-4.569340,1.297499,-8.949220,-2.139032,5.544081,4.190140,-4.461751,-4.828965,-2.195283],[-9.122580,-1.175459,3.723871,0.896903,0.054481,-2.818856,-0.093460,-4.854877,-4.100889,-1.654188,-9.138358,1.648408,9.191996,0.201795],[7.826441,6.299874,6.188672,-6.482776,-8.106937,6.179240,4.538312,4.487333,1.486553,-2.926107,-5.029897,-8.757846,-1.676646,-7.133372],[7.494727,3.973922,2.029933,1.745263,-8.422570,-8.697714,4.124017,-0.945791,6.511361,-3.498184,-3.843060,-0.155307,-3.446378,7.236354],[-7.845279,-7.473539,4.655678,9.445557,-3.248517,7.805220,-5.404638,0.028040,-5.604568,-1.587516,-5.605472,-1.151728,5.872364,5.124047],[3.428192,8.928135,3.420983,-6.109951,0.455892,1.293160,-4.836219,5.131202,-7.659570,-3.861828,-5.774150,3.336822,-5.695000,6.348806]]], dtype = "float64")#candidate|305|(5, 6, 14)|const|float64
bop_306 = relay.less_equal(bop_294.astype('bool'), relay.reshape(const_305.astype('bool'), relay.shape_of(bop_294))) # shape=(5, 6, 14)
uop_309 = relay.atan(bop_294.astype('float64')) # shape=(5, 6, 14)
bop_311 = relay.subtract(uop_300.astype('int8'), relay.reshape(bop_306.astype('int8'), relay.shape_of(uop_300))) # shape=(5, 6, 14)
var_314 = relay.var("var_314", dtype = "int8", shape = (5, 6, 14))#candidate|314|(5, 6, 14)|var|int8
bop_315 = relay.maximum(bop_311.astype('float64'), relay.reshape(var_314.astype('float64'), relay.shape_of(bop_311))) # shape=(5, 6, 14)
output = relay.Tuple([bop_287,bop_302,uop_309,bop_315,])
output2 = relay.Tuple([bop_287,bop_302,uop_309,bop_315,])
func_318 = relay.Function([var_283,var_314,], output)
mod['func_318'] = func_318
mod = relay.transform.InferType()(mod)
var_319 = relay.var("var_319", dtype = "int16", shape = (5, 6, 14))#candidate|319|(5, 6, 14)|var|int16
var_320 = relay.var("var_320", dtype = "int8", shape = (5, 6, 14))#candidate|320|(5, 6, 14)|var|int8
output = func_318(var_319,var_320,)
func_321 = relay.Function([var_319,var_320,], output)
mutated_mod['func_321'] = func_321
mutated_mod = relay.transform.InferType()(mutated_mod)
const_323 = relay.const([[3.136264,6.755799,4.785073,5.606790,-3.416677,-8.051647,-9.725474,-5.855841,0.655015],[-3.918021,3.953782,2.866079,9.331238,5.079604,-6.970865,1.665395,-8.943654,-8.671806],[-0.917264,-7.672934,-2.885135,-7.446972,-4.683728,4.051961,0.231027,-0.519952,2.657755],[-4.062485,8.500387,0.397752,-8.958529,6.045551,-6.938084,-4.507350,9.337393,8.431401],[1.485748,-7.749793,-7.805728,9.481648,8.681597,9.131960,2.634998,-4.638683,2.212388],[5.254178,-5.473102,9.339400,-0.921583,7.751514,-8.135881,-4.057021,6.804951,2.070873],[-2.606294,1.624987,-7.212311,-8.360086,-0.534490,-7.353337,5.763321,-0.498553,-3.459835],[-9.962906,0.346340,-8.627341,-5.228534,-3.445952,4.425541,6.381017,-0.678309,-6.244813],[2.605270,6.946621,0.060629,-6.138453,7.779722,-9.343137,-4.542132,-9.068431,5.382020],[5.911556,6.759479,3.970486,8.677781,-9.007887,7.543843,2.825594,-7.887674,0.822866],[-4.718943,-4.210797,-2.152149,-7.423320,5.313813,-3.429176,0.909418,-7.601185,8.436070],[-3.277504,-7.204002,2.870501,3.637549,4.142561,0.177681,9.161743,-5.541384,1.649505],[-7.643429,4.091871,-5.646382,-2.948925,4.663698,6.092039,-4.903563,1.644324,-7.647730],[3.230232,4.498335,2.343768,3.645398,7.669120,-3.704332,-2.328836,-2.925115,-2.111784],[9.866942,-1.583118,5.758760,-2.144026,5.021398,2.269259,-0.683857,0.309172,7.621541],[-2.097454,9.483453,-4.144894,-0.952490,0.098658,-8.489284,1.582952,-3.826205,-2.592414]], dtype = "float64")#candidate|323|(16, 9)|const|float64
uop_324 = relay.exp(const_323.astype('float64')) # shape=(16, 9)
func_228_call = mod.get_global_var('func_228')
func_230_call = mutated_mod.get_global_var('func_230')
var_327 = relay.var("var_327", dtype = "float32", shape = (7,))#candidate|327|(7,)|var|float32
call_326 = func_228_call(relay.reshape(var_327.astype('float32'), [7, 1]))
call_328 = func_228_call(relay.reshape(var_327.astype('float32'), [7, 1]))
func_275_call = mod.get_global_var('func_275')
func_280_call = mutated_mod.get_global_var('func_280')
var_330 = relay.var("var_330", dtype = "uint16", shape = (84,))#candidate|330|(84,)|var|uint16
call_329 = relay.TupleGetItem(func_275_call(relay.reshape(var_330.astype('uint16'), [6, 14]), relay.reshape(var_330.astype('uint16'), [6, 14]), relay.reshape(var_330.astype('float64'), [6, 14]), relay.reshape(var_330.astype('uint16'), [6, 14]), ), 0)
call_331 = relay.TupleGetItem(func_280_call(relay.reshape(var_330.astype('uint16'), [6, 14]), relay.reshape(var_330.astype('uint16'), [6, 14]), relay.reshape(var_330.astype('float64'), [6, 14]), relay.reshape(var_330.astype('uint16'), [6, 14]), ), 0)
var_332 = relay.var("var_332", dtype = "float64", shape = (16, 9))#candidate|332|(16, 9)|var|float64
bop_333 = relay.subtract(uop_324.astype('int8'), relay.reshape(var_332.astype('int8'), relay.shape_of(uop_324))) # shape=(16, 9)
func_117_call = mod.get_global_var('func_117')
func_121_call = mutated_mod.get_global_var('func_121')
var_337 = relay.var("var_337", dtype = "uint64", shape = (504,))#candidate|337|(504,)|var|uint64
call_336 = relay.TupleGetItem(func_117_call(relay.reshape(var_337.astype('uint64'), [9, 7, 8]), relay.reshape(var_337.astype('float64'), [9, 7, 8]), relay.reshape(var_337.astype('float64'), [9, 7, 8]), ), 2)
call_338 = relay.TupleGetItem(func_121_call(relay.reshape(var_337.astype('uint64'), [9, 7, 8]), relay.reshape(var_337.astype('float64'), [9, 7, 8]), relay.reshape(var_337.astype('float64'), [9, 7, 8]), ), 2)
bop_339 = relay.divide(bop_333.astype('float64'), relay.reshape(var_332.astype('float64'), relay.shape_of(bop_333))) # shape=(16, 9)
output = relay.Tuple([call_326,var_327,call_329,var_330,call_336,var_337,bop_339,])
output2 = relay.Tuple([call_328,var_327,call_331,var_330,call_338,var_337,bop_339,])
func_342 = relay.Function([var_327,var_330,var_332,var_337,], output)
mod['func_342'] = func_342
mod = relay.transform.InferType()(mod)
var_343 = relay.var("var_343", dtype = "float32", shape = (7,))#candidate|343|(7,)|var|float32
var_344 = relay.var("var_344", dtype = "uint16", shape = (84,))#candidate|344|(84,)|var|uint16
var_345 = relay.var("var_345", dtype = "float64", shape = (16, 9))#candidate|345|(16, 9)|var|float64
var_346 = relay.var("var_346", dtype = "uint64", shape = (504,))#candidate|346|(504,)|var|uint64
output = func_342(var_343,var_344,var_345,var_346,)
func_347 = relay.Function([var_343,var_344,var_345,var_346,], output)
mutated_mod['func_347'] = func_347
mutated_mod = relay.transform.InferType()(mutated_mod)
var_349 = relay.var("var_349", dtype = "uint32", shape = (9, 15))#candidate|349|(9, 15)|var|uint32
var_350 = relay.var("var_350", dtype = "uint32", shape = (9, 15))#candidate|350|(9, 15)|var|uint32
bop_351 = relay.multiply(var_349.astype('uint32'), relay.reshape(var_350.astype('uint32'), relay.shape_of(var_349))) # shape=(9, 15)
bop_354 = relay.subtract(var_350.astype('uint8'), relay.reshape(bop_351.astype('uint8'), relay.shape_of(var_350))) # shape=(9, 15)
output = relay.Tuple([bop_354,])
output2 = relay.Tuple([bop_354,])
F = relay.Function([var_349,var_350,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_349,var_350,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
	relay.transform.DefuseOps(),
	relay.transform.SimplifyExpr(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_349= np.array([[6,1,4,1,-7,8,-1,1,8,-6,6,9,9,-9,-8],[-5,3,-10,8,-6,10,-10,-6,9,-7,-6,8,10,-7,-10],[-2,-1,1,-1,-3,-5,-10,-4,-6,-2,-7,-7,-4,-10,-7],[-7,-7,3,2,-8,-2,-7,-6,1,-3,6,-3,-5,-1,9],[-7,-5,9,-4,-2,5,5,-8,-5,6,4,-8,-6,-6,-9],[-3,5,3,-5,-4,-1,-5,-3,9,4,5,-7,6,7,-10],[-7,3,10,6,2,6,-1,10,-4,1,6,7,-9,7,-5],[10,-10,5,-8,-9,1,6,8,5,6,-1,9,6,-1,4],[1,-9,9,-3,5,1,-9,9,2,-9,-9,3,-8,-8,3]], dtype='uint32')
module1.set_input('var_349', input_349)
input_350= np.array([[6,-7,7,9,7,3,-1,5,-2,-3,7,1,9,-8,-10],[-10,7,1,5,3,5,10,-8,7,1,-1,1,-8,-3,9],[9,2,-7,9,7,6,8,10,-2,-8,-9,3,2,2,8],[-3,-1,5,9,9,-6,10,2,1,-6,-7,7,5,-1,-7],[8,-8,-4,-6,8,1,-2,-7,-10,10,-7,-3,7,4,-6],[-9,-2,5,1,-10,-9,-1,1,-9,6,9,6,-8,1,-1],[4,1,-8,-3,-8,-7,6,-1,-8,2,-8,7,-2,-9,8],[7,-1,-7,5,-7,5,-1,4,1,-2,7,-1,-8,-1,5],[-6,-1,-3,5,10,-2,-9,-7,-6,-6,9,-2,10,-5,-4]], dtype='uint32')
module1.set_input('var_350', input_350)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_349, input_350, )
res3 = intrp3.evaluate()(input_349, input_350, )
res4 = intrp4.evaluate()(input_349, input_350, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input('var_349', input_349)
module5.set_input('var_350', input_350)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_349, input_350, )
res7 = intrp7.evaluate()(input_349, input_350, )
res8 = intrp8.evaluate()(input_349, input_350, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input('var_349', input_349)
module9.set_input('var_350', input_350)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_349, input_350, )
res11 = intrp11.evaluate()(input_349, input_350, )
res12 = intrp12.evaluate()(input_349, input_350, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input('var_349', input_349)
module13.set_input('var_350', input_350)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_349, input_350, )
res15 = intrp15.evaluate()(input_349, input_350, )
res16 = intrp16.evaluate()(input_349, input_350, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input('var_349', input_349)
module17.set_input('var_350', input_350)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_349, input_350, )
res19 = intrp19.evaluate()(input_349, input_350, )
res20 = intrp20.evaluate()(input_349, input_350, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input('var_349', input_349)
module21.set_input('var_350', input_350)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_349, input_350, )
res23 = intrp23.evaluate()(input_349, input_350, )
res24 = intrp24.evaluate()(input_349, input_350, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''62: TVMFuncCall
61: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
60: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
59: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
58: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
57: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
56: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
55: tvm::transform::Pass::operator()(tvm::IRModule) const
54: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
53: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
52: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
51: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
50: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
49: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
48: tvm::transform::Pass::operator()(tvm::IRModule) const
47: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
46: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
45: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
44: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
43: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
42: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
41: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
40: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
39: _ZN3tvm5relay9transform22Devic
38: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
37: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
36: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
35: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
34: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
33: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
32: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
31: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
30: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
29: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
28: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
27: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
26: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
25: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
12: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
9: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
8: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
7: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
6: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
5: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
3: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
2: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
1: tvm::relay::tec::PrimFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
0: tvm::relay::tec::ScheduleBuilder::Create(tvm::relay::Function const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)

'''