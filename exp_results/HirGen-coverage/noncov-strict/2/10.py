import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (8, 9))#candidate|0|(8, 9)|var|float32
uop_1 = relay.erf(var_0.astype('float32')) # shape=(8, 9)
uop_3 = relay.exp(uop_1.astype('float64')) # shape=(8, 9)
bop_5 = relay.floor_mod(var_0.astype('float64'), relay.reshape(uop_3.astype('float64'), relay.shape_of(var_0))) # shape=(8, 9)
uop_8 = relay.cosh(var_0.astype('float64')) # shape=(8, 9)
bop_10 = relay.logical_and(bop_5.astype('bool'), relay.reshape(var_0.astype('bool'), relay.shape_of(bop_5))) # shape=(8, 9)
uop_13 = relay.sin(uop_3.astype('float64')) # shape=(8, 9)
bop_15 = relay.greater(uop_1.astype('bool'), relay.reshape(uop_8.astype('bool'), relay.shape_of(uop_1))) # shape=(8, 9)
bop_18 = relay.floor_mod(uop_1.astype('float64'), relay.reshape(uop_3.astype('float64'), relay.shape_of(uop_1))) # shape=(8, 9)
bop_21 = relay.bitwise_xor(uop_13.astype('int8'), relay.reshape(uop_3.astype('int8'), relay.shape_of(uop_13))) # shape=(8, 9)
const_24 = relay.const([[4,1,-7,-5,8,10,-1,2,-6],[-5,-10,-9,2,-4,-4,4,4,3],[6,-6,5,8,-4,-4,-1,-9,7],[-5,-9,-10,5,-1,9,10,4,-10],[1,3,-10,-6,-7,1,5,2,4],[-7,6,-8,3,-10,2,-4,-8,10],[7,9,3,7,-6,1,3,-1,-7],[-3,4,7,-3,-1,-1,1,7,1]], dtype = "int8")#candidate|24|(8, 9)|const|int8
bop_25 = relay.greater(bop_21.astype('bool'), relay.reshape(const_24.astype('bool'), relay.shape_of(bop_21))) # shape=(8, 9)
bop_28 = relay.subtract(bop_25.astype('int8'), relay.reshape(bop_18.astype('int8'), relay.shape_of(bop_25))) # shape=(8, 9)
output = relay.Tuple([bop_10,bop_15,bop_28,])
output2 = relay.Tuple([bop_10,bop_15,bop_28,])
func_31 = relay.Function([var_0,], output)
mod['func_31'] = func_31
mod = relay.transform.InferType()(mod)
mutated_mod['func_31'] = func_31
mutated_mod = relay.transform.InferType()(mutated_mod)
var_32 = relay.var("var_32", dtype = "float32", shape = (8, 9))#candidate|32|(8, 9)|var|float32
func_31_call = mutated_mod.get_global_var('func_31')
call_33 = func_31_call(var_32)
output = call_33
func_34 = relay.Function([var_32], output)
mutated_mod['func_34'] = func_34
mutated_mod = relay.transform.InferType()(mutated_mod)
var_36 = relay.var("var_36", dtype = "uint64", shape = (16,))#candidate|36|(16,)|var|uint64
const_37 = relay.const([-9,-6,9,-6,10,-10,-3,7,3,-9,-5,8,-5,-6,-3,-1], dtype = "uint64")#candidate|37|(16,)|const|uint64
bop_38 = relay.bitwise_and(var_36.astype('uint64'), relay.reshape(const_37.astype('uint64'), relay.shape_of(var_36))) # shape=(16,)
bop_41 = relay.bitwise_or(var_36.astype('uint32'), relay.reshape(bop_38.astype('uint32'), relay.shape_of(var_36))) # shape=(16,)
bop_44 = relay.right_shift(bop_41.astype('int16'), relay.reshape(bop_38.astype('int16'), relay.shape_of(bop_41))) # shape=(16,)
uop_47 = relay.sinh(bop_38.astype('float64')) # shape=(16,)
uop_49 = relay.atan(uop_47.astype('float32')) # shape=(16,)
uop_51 = relay.sinh(bop_38.astype('float64')) # shape=(16,)
uop_53 = relay.sin(uop_47.astype('float32')) # shape=(16,)
output = relay.Tuple([bop_44,uop_49,uop_51,uop_53,])
output2 = relay.Tuple([bop_44,uop_49,uop_51,uop_53,])
func_55 = relay.Function([var_36,], output)
mod['func_55'] = func_55
mod = relay.transform.InferType()(mod)
var_56 = relay.var("var_56", dtype = "uint64", shape = (16,))#candidate|56|(16,)|var|uint64
output = func_55(var_56)
func_57 = relay.Function([var_56], output)
mutated_mod['func_57'] = func_57
mutated_mod = relay.transform.InferType()(mutated_mod)
const_59 = relay.const([[-1,-9,9,-4,7,-1],[-6,-3,-4,4,3,5]], dtype = "int8")#candidate|59|(2, 6)|const|int8
const_60 = relay.const([[-6,3,9,-1,10,-2],[-2,-9,-8,3,-4,10]], dtype = "int8")#candidate|60|(2, 6)|const|int8
bop_61 = relay.bitwise_xor(const_59.astype('int8'), relay.reshape(const_60.astype('int8'), relay.shape_of(const_59))) # shape=(2, 6)
bop_64 = relay.multiply(const_59.astype('int8'), relay.reshape(bop_61.astype('int8'), relay.shape_of(const_59))) # shape=(2, 6)
var_67 = relay.var("var_67", dtype = "int8", shape = (2, 6))#candidate|67|(2, 6)|var|int8
bop_68 = relay.floor_divide(const_60.astype('float64'), relay.reshape(var_67.astype('float64'), relay.shape_of(const_60))) # shape=(2, 6)
bop_71 = relay.power(const_60.astype('float32'), relay.reshape(var_67.astype('float32'), relay.shape_of(const_60))) # shape=(2, 6)
bop_74 = relay.bitwise_and(bop_61.astype('int16'), relay.reshape(bop_64.astype('int16'), relay.shape_of(bop_61))) # shape=(2, 6)
bop_77 = relay.greater(bop_71.astype('bool'), relay.reshape(bop_68.astype('bool'), relay.shape_of(bop_71))) # shape=(2, 6)
bop_80 = relay.right_shift(bop_61.astype('uint64'), relay.reshape(bop_64.astype('uint64'), relay.shape_of(bop_61))) # shape=(2, 6)
uop_83 = relay.sinh(bop_64.astype('float64')) # shape=(2, 6)
uop_85 = relay.asin(uop_83.astype('float32')) # shape=(2, 6)
bop_87 = relay.bitwise_or(uop_85.astype('uint32'), relay.reshape(var_67.astype('uint32'), relay.shape_of(uop_85))) # shape=(2, 6)
uop_90 = relay.acosh(bop_87.astype('float64')) # shape=(2, 6)
uop_92 = relay.rsqrt(bop_80.astype('float64')) # shape=(2, 6)
const_94 = relay.const([[-7,-1,-10,7,-5,8],[-3,-3,7,8,-2,2]], dtype = "uint32")#candidate|94|(2, 6)|const|uint32
bop_95 = relay.less(bop_87.astype('bool'), relay.reshape(const_94.astype('bool'), relay.shape_of(bop_87))) # shape=(2, 6)
uop_98 = relay.rsqrt(uop_83.astype('float64')) # shape=(2, 6)
uop_100 = relay.rsqrt(uop_90.astype('float64')) # shape=(2, 6)
bop_102 = relay.divide(bop_87.astype('float32'), relay.reshape(bop_74.astype('float32'), relay.shape_of(bop_87))) # shape=(2, 6)
bop_105 = relay.mod(uop_90.astype('float32'), relay.reshape(const_60.astype('float32'), relay.shape_of(uop_90))) # shape=(2, 6)
bop_108 = relay.floor_divide(uop_100.astype('float32'), relay.reshape(uop_98.astype('float32'), relay.shape_of(uop_100))) # shape=(2, 6)
bop_111 = relay.floor_mod(bop_102.astype('float64'), relay.reshape(uop_85.astype('float64'), relay.shape_of(bop_102))) # shape=(2, 6)
uop_114 = relay.sigmoid(uop_92.astype('float32')) # shape=(2, 6)
bop_116 = relay.logical_and(bop_87.astype('bool'), relay.reshape(var_67.astype('bool'), relay.shape_of(bop_87))) # shape=(2, 6)
output = relay.Tuple([bop_77,bop_95,bop_105,bop_108,bop_111,uop_114,bop_116,])
output2 = relay.Tuple([bop_77,bop_95,bop_105,bop_108,bop_111,uop_114,bop_116,])
func_119 = relay.Function([var_67,], output)
mod['func_119'] = func_119
mod = relay.transform.InferType()(mod)
var_120 = relay.var("var_120", dtype = "int8", shape = (2, 6))#candidate|120|(2, 6)|var|int8
output = func_119(var_120)
func_121 = relay.Function([var_120], output)
mutated_mod['func_121'] = func_121
mutated_mod = relay.transform.InferType()(mutated_mod)
var_123 = relay.var("var_123", dtype = "float32", shape = ())#candidate|123|()|var|float32
var_124 = relay.var("var_124", dtype = "float32", shape = (3, 12, 6))#candidate|124|(3, 12, 6)|var|float32
bop_125 = relay.power(var_123.astype('float32'), var_124.astype('float32')) # shape=(3, 12, 6)
uop_128 = relay.erf(var_123.astype('float64')) # shape=()
bop_130 = relay.add(uop_128.astype('uint32'), var_124.astype('uint32')) # shape=(3, 12, 6)
var_133 = relay.var("var_133", dtype = "float64", shape = (16, 5))#candidate|133|(16, 5)|var|float64
bop_134 = relay.divide(uop_128.astype('float64'), var_133.astype('float64')) # shape=(16, 5)
var_137 = relay.var("var_137", dtype = "uint32", shape = (3, 12, 6))#candidate|137|(3, 12, 6)|var|uint32
bop_138 = relay.left_shift(bop_130.astype('uint16'), relay.reshape(var_137.astype('uint16'), relay.shape_of(bop_130))) # shape=(3, 12, 6)
bop_141 = relay.equal(uop_128.astype('bool'), var_123.astype('bool')) # shape=()
bop_144 = relay.less(bop_138.astype('bool'), relay.reshape(var_124.astype('bool'), relay.shape_of(bop_138))) # shape=(3, 12, 6)
output = relay.Tuple([bop_125,bop_134,bop_141,bop_144,])
output2 = relay.Tuple([bop_125,bop_134,bop_141,bop_144,])
func_147 = relay.Function([var_123,var_124,var_133,var_137,], output)
mod['func_147'] = func_147
mod = relay.transform.InferType()(mod)
mutated_mod['func_147'] = func_147
mutated_mod = relay.transform.InferType()(mutated_mod)
func_147_call = mutated_mod.get_global_var('func_147')
var_149 = relay.var("var_149", dtype = "float32", shape = ())#candidate|149|()|var|float32
var_150 = relay.var("var_150", dtype = "float32", shape = (3, 12, 6))#candidate|150|(3, 12, 6)|var|float32
var_151 = relay.var("var_151", dtype = "float64", shape = (16, 5))#candidate|151|(16, 5)|var|float64
var_152 = relay.var("var_152", dtype = "uint32", shape = (3, 12, 6))#candidate|152|(3, 12, 6)|var|uint32
call_148 = func_147_call(var_149,var_150,var_151,var_152,)
output = call_148
func_153 = relay.Function([var_149,var_150,var_151,var_152,], output)
mutated_mod['func_153'] = func_153
mutated_mod = relay.transform.InferType()(mutated_mod)
var_155 = relay.var("var_155", dtype = "int64", shape = (13, 9, 10))#candidate|155|(13, 9, 10)|var|int64
var_156 = relay.var("var_156", dtype = "int64", shape = (13, 9, 10))#candidate|156|(13, 9, 10)|var|int64
bop_157 = relay.greater(var_155.astype('bool'), relay.reshape(var_156.astype('bool'), relay.shape_of(var_155))) # shape=(13, 9, 10)
var_160 = relay.var("var_160", dtype = "bool", shape = (13, 9, 10))#candidate|160|(13, 9, 10)|var|bool
bop_161 = relay.floor_mod(bop_157.astype('float64'), relay.reshape(var_160.astype('float64'), relay.shape_of(bop_157))) # shape=(13, 9, 10)
uop_164 = relay.erf(var_160.astype('float64')) # shape=(13, 9, 10)
var_166 = relay.var("var_166", dtype = "float64", shape = (13, 9, 10))#candidate|166|(13, 9, 10)|var|float64
bop_167 = relay.bitwise_or(uop_164.astype('uint32'), relay.reshape(var_166.astype('uint32'), relay.shape_of(uop_164))) # shape=(13, 9, 10)
uop_170 = relay.cos(bop_167.astype('float64')) # shape=(13, 9, 10)
bop_172 = relay.power(uop_170.astype('float32'), relay.reshape(var_156.astype('float32'), relay.shape_of(uop_170))) # shape=(13, 9, 10)
uop_175 = relay.acosh(bop_167.astype('float32')) # shape=(13, 9, 10)
output = relay.Tuple([bop_161,bop_172,uop_175,])
output2 = relay.Tuple([bop_161,bop_172,uop_175,])
func_177 = relay.Function([var_155,var_156,var_160,var_166,], output)
mod['func_177'] = func_177
mod = relay.transform.InferType()(mod)
var_178 = relay.var("var_178", dtype = "int64", shape = (13, 9, 10))#candidate|178|(13, 9, 10)|var|int64
var_179 = relay.var("var_179", dtype = "int64", shape = (13, 9, 10))#candidate|179|(13, 9, 10)|var|int64
var_180 = relay.var("var_180", dtype = "bool", shape = (13, 9, 10))#candidate|180|(13, 9, 10)|var|bool
var_181 = relay.var("var_181", dtype = "float64", shape = (13, 9, 10))#candidate|181|(13, 9, 10)|var|float64
output = func_177(var_178,var_179,var_180,var_181,)
func_182 = relay.Function([var_178,var_179,var_180,var_181,], output)
mutated_mod['func_182'] = func_182
mutated_mod = relay.transform.InferType()(mutated_mod)
var_184 = relay.var("var_184", dtype = "float64", shape = ())#candidate|184|()|var|float64
var_185 = relay.var("var_185", dtype = "float64", shape = (8, 1))#candidate|185|(8, 1)|var|float64
bop_186 = relay.floor_mod(var_184.astype('float64'), var_185.astype('float64')) # shape=(8, 1)
func_31_call = mod.get_global_var('func_31')
func_34_call = mutated_mod.get_global_var('func_34')
const_190 = relay.const([-3.931624,5.954356,-3.087608,-2.300103,-7.450927,3.465431,5.012081,7.971653,5.634740,-4.752869,-6.004566,-7.233639,-3.594449,1.704109,6.034967,3.130737,0.555427,1.928771,-1.559679,3.195701,8.828928,0.078497,0.335266,-8.177444,4.476221,-2.123587,4.638505,-9.881146,-3.856408,9.087008,-7.515409,4.218842,1.207924,6.269654,3.491966,-0.291423,1.222106,0.914099,7.810294,1.736700,-7.616569,-3.824115,-8.867769,6.740063,-9.748173,7.594076,-9.194429,-0.239005,6.274496,3.219196,-4.885634,4.170851,-5.767703,9.497193,-4.854650,-3.974526,-0.315879,-9.439814,2.129502,8.600789,-9.081334,-1.160281,-4.334281,-3.371361,-8.276338,-0.678456,-0.106579,-0.235467,-6.882925,-2.062463,1.817035,3.941853], dtype = "float32")#candidate|190|(72,)|const|float32
call_189 = relay.TupleGetItem(func_31_call(relay.reshape(const_190.astype('float32'), [8, 9])), 0)
call_191 = relay.TupleGetItem(func_34_call(relay.reshape(const_190.astype('float32'), [8, 9])), 0)
uop_192 = relay.log(var_185.astype('float32')) # shape=(8, 1)
func_147_call = mod.get_global_var('func_147')
func_153_call = mutated_mod.get_global_var('func_153')
var_195 = relay.var("var_195", dtype = "float32", shape = (216,))#candidate|195|(216,)|var|float32
var_196 = relay.var("var_196", dtype = "float64", shape = (2, 40))#candidate|196|(2, 40)|var|float64
call_194 = relay.TupleGetItem(func_147_call(relay.reshape(var_184.astype('float32'), []), relay.reshape(var_195.astype('float32'), [3, 12, 6]), relay.reshape(var_196.astype('float64'), [16, 5]), relay.reshape(var_195.astype('uint32'), [3, 12, 6]), ), 3)
call_197 = relay.TupleGetItem(func_153_call(relay.reshape(var_184.astype('float32'), []), relay.reshape(var_195.astype('float32'), [3, 12, 6]), relay.reshape(var_196.astype('float64'), [16, 5]), relay.reshape(var_195.astype('uint32'), [3, 12, 6]), ), 3)
func_119_call = mod.get_global_var('func_119')
func_121_call = mutated_mod.get_global_var('func_121')
var_199 = relay.var("var_199", dtype = "int8", shape = (12,))#candidate|199|(12,)|var|int8
call_198 = relay.TupleGetItem(func_119_call(relay.reshape(var_199.astype('int8'), [2, 6])), 1)
call_200 = relay.TupleGetItem(func_121_call(relay.reshape(var_199.astype('int8'), [2, 6])), 1)
uop_201 = relay.sinh(uop_192.astype('float64')) # shape=(8, 1)
bop_203 = relay.subtract(uop_201.astype('int64'), call_189.astype('int64')) # shape=(8, 9)
bop_206 = relay.subtract(uop_201.astype('int64'), call_191.astype('int64')) # shape=(8, 9)
uop_207 = relay.sqrt(uop_201.astype('float32')) # shape=(8, 1)
uop_209 = relay.erf(uop_201.astype('float64')) # shape=(8, 1)
bop_211 = relay.divide(uop_209.astype('float64'), var_184.astype('float64')) # shape=(8, 1)
var_214 = relay.var("var_214", dtype = "float64", shape = (8, 6))#candidate|214|(8, 6)|var|float64
bop_215 = relay.less_equal(bop_211.astype('bool'), var_214.astype('bool')) # shape=(8, 6)
uop_218 = relay.log2(uop_192.astype('float64')) # shape=(8, 1)
uop_220 = relay.log2(const_190.astype('float32')) # shape=(72,)
bop_222 = relay.subtract(uop_201.astype('uint64'), relay.reshape(var_185.astype('uint64'), relay.shape_of(uop_201))) # shape=(8, 1)
uop_225 = relay.cos(uop_220.astype('float64')) # shape=(72,)
bop_227 = relay.equal(uop_209.astype('bool'), bop_215.astype('bool')) # shape=(8, 6)
uop_230 = relay.asinh(bop_227.astype('float64')) # shape=(8, 6)
bop_232 = relay.minimum(uop_230.astype('uint64'), bop_222.astype('uint64')) # shape=(8, 6)
bop_235 = relay.floor_divide(bop_232.astype('float32'), bop_222.astype('float32')) # shape=(8, 6)
output = relay.Tuple([bop_186,call_194,var_195,var_196,call_198,var_199,bop_203,uop_207,uop_218,uop_225,bop_235,])
output2 = relay.Tuple([bop_186,call_197,var_195,var_196,call_200,var_199,bop_206,uop_207,uop_218,uop_225,bop_235,])
func_238 = relay.Function([var_184,var_185,var_195,var_196,var_199,var_214,], output)
mod['func_238'] = func_238
mod = relay.transform.InferType()(mod)
var_239 = relay.var("var_239", dtype = "float64", shape = ())#candidate|239|()|var|float64
var_240 = relay.var("var_240", dtype = "float64", shape = (8, 1))#candidate|240|(8, 1)|var|float64
var_241 = relay.var("var_241", dtype = "float32", shape = (216,))#candidate|241|(216,)|var|float32
var_242 = relay.var("var_242", dtype = "float64", shape = (2, 40))#candidate|242|(2, 40)|var|float64
var_243 = relay.var("var_243", dtype = "int8", shape = (12,))#candidate|243|(12,)|var|int8
var_244 = relay.var("var_244", dtype = "float64", shape = (8, 6))#candidate|244|(8, 6)|var|float64
output = func_238(var_239,var_240,var_241,var_242,var_243,var_244,)
func_245 = relay.Function([var_239,var_240,var_241,var_242,var_243,var_244,], output)
mutated_mod['func_245'] = func_245
mutated_mod = relay.transform.InferType()(mutated_mod)
var_247 = relay.var("var_247", dtype = "uint32", shape = (15, 16, 15))#candidate|247|(15, 16, 15)|var|uint32
var_248 = relay.var("var_248", dtype = "uint32", shape = (15, 16, 15))#candidate|248|(15, 16, 15)|var|uint32
bop_249 = relay.less_equal(var_247.astype('bool'), relay.reshape(var_248.astype('bool'), relay.shape_of(var_247))) # shape=(15, 16, 15)
bop_252 = relay.floor_mod(bop_249.astype('float32'), relay.reshape(var_248.astype('float32'), relay.shape_of(bop_249))) # shape=(15, 16, 15)
bop_255 = relay.logical_and(bop_252.astype('bool'), relay.reshape(var_248.astype('bool'), relay.shape_of(bop_252))) # shape=(15, 16, 15)
bop_258 = relay.floor_mod(var_247.astype('float64'), relay.reshape(bop_249.astype('float64'), relay.shape_of(var_247))) # shape=(15, 16, 15)
bop_261 = relay.add(bop_252.astype('uint32'), relay.reshape(var_248.astype('uint32'), relay.shape_of(bop_252))) # shape=(15, 16, 15)
func_55_call = mod.get_global_var('func_55')
func_57_call = mutated_mod.get_global_var('func_57')
var_265 = relay.var("var_265", dtype = "uint64", shape = (16,))#candidate|265|(16,)|var|uint64
call_264 = relay.TupleGetItem(func_55_call(relay.reshape(var_265.astype('uint64'), [16,])), 3)
call_266 = relay.TupleGetItem(func_57_call(relay.reshape(var_265.astype('uint64'), [16,])), 3)
func_31_call = mod.get_global_var('func_31')
func_34_call = mutated_mod.get_global_var('func_34')
var_268 = relay.var("var_268", dtype = "float32", shape = (1, 72))#candidate|268|(1, 72)|var|float32
call_267 = relay.TupleGetItem(func_31_call(relay.reshape(var_268.astype('float32'), [8, 9])), 0)
call_269 = relay.TupleGetItem(func_34_call(relay.reshape(var_268.astype('float32'), [8, 9])), 0)
uop_270 = relay.acos(var_268.astype('float32')) # shape=(1, 72)
func_55_call = mod.get_global_var('func_55')
func_57_call = mutated_mod.get_global_var('func_57')
call_272 = relay.TupleGetItem(func_55_call(relay.reshape(var_265.astype('uint64'), [16,])), 2)
call_273 = relay.TupleGetItem(func_57_call(relay.reshape(var_265.astype('uint64'), [16,])), 2)
uop_274 = relay.asinh(uop_270.astype('float64')) # shape=(1, 72)
var_276 = relay.var("var_276", dtype = "float64", shape = (9, 72))#candidate|276|(9, 72)|var|float64
bop_277 = relay.bitwise_or(uop_274.astype('int32'), var_276.astype('int32')) # shape=(9, 72)
bop_280 = relay.not_equal(uop_274.astype('bool'), bop_277.astype('bool')) # shape=(9, 72)
uop_283 = relay.rsqrt(uop_270.astype('float32')) # shape=(1, 72)
uop_285 = relay.cos(uop_270.astype('float64')) # shape=(1, 72)
uop_287 = relay.sigmoid(uop_283.astype('float32')) # shape=(1, 72)
uop_289 = relay.atanh(bop_280.astype('float32')) # shape=(9, 72)
bop_291 = relay.floor_mod(uop_274.astype('float64'), bop_277.astype('float64')) # shape=(9, 72)
bop_294 = relay.power(bop_291.astype('float32'), uop_283.astype('float32')) # shape=(9, 72)
uop_297 = relay.acos(uop_289.astype('float64')) # shape=(9, 72)
bop_299 = relay.floor_divide(uop_287.astype('float64'), relay.reshape(uop_285.astype('float64'), relay.shape_of(uop_287))) # shape=(1, 72)
uop_302 = relay.rsqrt(uop_289.astype('float64')) # shape=(9, 72)
uop_304 = relay.log10(uop_302.astype('float64')) # shape=(9, 72)
bop_306 = relay.add(uop_304.astype('int64'), var_268.astype('int64')) # shape=(9, 72)
bop_309 = relay.equal(uop_304.astype('bool'), uop_287.astype('bool')) # shape=(9, 72)
uop_312 = relay.cos(uop_304.astype('float64')) # shape=(9, 72)
output = relay.Tuple([bop_255,bop_258,bop_261,call_264,var_265,call_267,call_272,bop_294,uop_297,bop_299,bop_306,bop_309,uop_312,])
output2 = relay.Tuple([bop_255,bop_258,bop_261,call_266,var_265,call_269,call_273,bop_294,uop_297,bop_299,bop_306,bop_309,uop_312,])
func_314 = relay.Function([var_247,var_248,var_265,var_268,var_276,], output)
mod['func_314'] = func_314
mod = relay.transform.InferType()(mod)
var_315 = relay.var("var_315", dtype = "uint32", shape = (15, 16, 15))#candidate|315|(15, 16, 15)|var|uint32
var_316 = relay.var("var_316", dtype = "uint32", shape = (15, 16, 15))#candidate|316|(15, 16, 15)|var|uint32
var_317 = relay.var("var_317", dtype = "uint64", shape = (16,))#candidate|317|(16,)|var|uint64
var_318 = relay.var("var_318", dtype = "float32", shape = (1, 72))#candidate|318|(1, 72)|var|float32
var_319 = relay.var("var_319", dtype = "float64", shape = (9, 72))#candidate|319|(9, 72)|var|float64
output = func_314(var_315,var_316,var_317,var_318,var_319,)
func_320 = relay.Function([var_315,var_316,var_317,var_318,var_319,], output)
mutated_mod['func_320'] = func_320
mutated_mod = relay.transform.InferType()(mutated_mod)
const_322 = relay.const(-9.793423, dtype = "float32")#candidate|322|()|const|float32
uop_323 = relay.log2(const_322.astype('float32')) # shape=()
bop_325 = relay.multiply(const_322.astype('int16'), uop_323.astype('int16')) # shape=()
var_328 = relay.var("var_328", dtype = "int16", shape = ())#candidate|328|()|var|int16
bop_329 = relay.divide(bop_325.astype('float64'), var_328.astype('float64')) # shape=()
var_332 = relay.var("var_332", dtype = "int16", shape = ())#candidate|332|()|var|int16
bop_333 = relay.logical_xor(bop_325.astype('int16'), var_332.astype('int16')) # shape=()
const_336 = relay.const(2.595688, dtype = "float32")#candidate|336|()|const|float32
bop_337 = relay.bitwise_and(uop_323.astype('int16'), const_336.astype('int16')) # shape=()
bop_340 = relay.floor_mod(const_322.astype('float64'), bop_329.astype('float64')) # shape=()
uop_343 = relay.sinh(uop_323.astype('float32')) # shape=()
uop_345 = relay.sqrt(uop_323.astype('float32')) # shape=()
bop_347 = relay.not_equal(uop_343.astype('bool'), uop_345.astype('bool')) # shape=()
output = relay.Tuple([bop_333,bop_337,bop_340,bop_347,])
output2 = relay.Tuple([bop_333,bop_337,bop_340,bop_347,])
F = relay.Function([var_328,var_332,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_328,var_332,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_328= np.array(2, dtype='int16')
module1.set_input('var_328', input_328)
input_332= np.array(-5, dtype='int16')
module1.set_input('var_332', input_332)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_328, input_332, )
res3 = intrp3.evaluate()(input_328, input_332, )
res4 = intrp4.evaluate()(input_328, input_332, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
module5.set_input('var_328', input_328)
module5.set_input('var_332', input_332)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_328, input_332, )
res7 = intrp7.evaluate()(input_328, input_332, )
res8 = intrp8.evaluate()(input_328, input_332, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
module9.set_input('var_328', input_328)
module9.set_input('var_332', input_332)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_328, input_332, )
res11 = intrp11.evaluate()(input_328, input_332, )
res12 = intrp12.evaluate()(input_328, input_332, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
module13.set_input('var_328', input_328)
module13.set_input('var_332', input_332)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_328, input_332, )
res15 = intrp15.evaluate()(input_328, input_332, )
res16 = intrp16.evaluate()(input_328, input_332, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
module17.set_input('var_328', input_328)
module17.set_input('var_332', input_332)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_328, input_332, )
res19 = intrp19.evaluate()(input_328, input_332, )
res20 = intrp20.evaluate()(input_328, input_332, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
module21.set_input('var_328', input_328)
module21.set_input('var_332', input_332)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_328, input_332, )
res23 = intrp23.evaluate()(input_328, input_332, )
res24 = intrp24.evaluate()(input_328, input_332, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()

'''68: TVMFuncCall
67: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
66: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
65: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
64: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
63: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
62: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
61: tvm::transform::Pass::operator()(tvm::IRModule) const
60: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
59: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
58: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
57: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
56: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
55: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
54: tvm::transform::Pass::operator()(tvm::IRModule) const
53: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
52: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
51: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
50: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
49: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
48: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
47: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
46: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
45: _ZN3tvm5relay9transform22Devic
44: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
43: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
42: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
41: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
40: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
39: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
38: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
37: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
36: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
35: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
34: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
33: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
32: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
31: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::te::Tensor, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
30: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::runtime::ObjectRef, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
29: tvm::LowerWithPassList(tvm::IRModule, tvm::runtime::Array<tvm::transform::Pass, void>)
28: tvm::transform::Pass::operator()(tvm::IRModule) const
27: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
26: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
25: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
24: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
23: _ZNSt17_Function_handlerIFvN3tvm7
22: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
21: tvm::tir::DataTypeRewriter::operator()(tvm::tir::Stmt)
20: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
19: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::StoreNode const*)
18: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
17: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
16: _ZThn16_N3tvm3tir16DataTyp
15: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::SubNode const*)
14: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
13: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
12: _ZThn16_N3tvm3tir16DataTyp
11: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::MulNode const*)
10: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
9: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
8: _ZThn16_N3tvm3tir16DataTyp
7: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
6: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CallNode const*)
5: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
4: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
3: _ZThn16_N3tvm3tir16DataTyp
2: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::DivNode const*)
1: tvm::div(tvm::PrimExpr, tvm::PrimExpr, tvm::Span)
0: tvm::PrimExpr tvm::arith::TryConstFold<tvm::tir::Div>(tvm::PrimExpr, tvm::PrimExpr)

'''