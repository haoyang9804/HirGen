import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = ())#candidate|0|()|var|float64
uop_1 = relay.cosh(var_0.astype('float64')) # shape=()
bop_3 = relay.equal(uop_1.astype('bool'), var_0.astype('bool')) # shape=()
uop_6 = relay.log2(var_0.astype('float32')) # shape=()
output = relay.Tuple([bop_3,uop_6,])
output2 = relay.Tuple([bop_3,uop_6,])
func_8 = relay.Function([var_0,], output)
mod['func_8'] = func_8
mod = relay.transform.InferType()(mod)
mutated_mod['func_8'] = func_8
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9 = relay.var("var_9", dtype = "float64", shape = ())#candidate|9|()|var|float64
func_8_call = mutated_mod.get_global_var('func_8')
call_10 = func_8_call(var_9)
output = call_10
func_11 = relay.Function([var_9], output)
mutated_mod['func_11'] = func_11
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13 = relay.var("var_13", dtype = "float64", shape = (1,))#candidate|13|(1,)|var|float64
uop_14 = relay.cos(var_13.astype('float64')) # shape=(1,)
bop_16 = relay.greater(uop_14.astype('bool'), relay.reshape(var_13.astype('bool'), relay.shape_of(uop_14))) # shape=(1,)
bop_19 = relay.greater_equal(var_13.astype('bool'), relay.reshape(bop_16.astype('bool'), relay.shape_of(var_13))) # shape=(1,)
bop_22 = relay.mod(uop_14.astype('float64'), relay.reshape(var_13.astype('float64'), relay.shape_of(uop_14))) # shape=(1,)
bop_25 = relay.less(var_13.astype('bool'), relay.reshape(bop_16.astype('bool'), relay.shape_of(var_13))) # shape=(1,)
uop_28 = relay.log(bop_25.astype('float32')) # shape=(1,)
var_30 = relay.var("var_30", dtype = "float32", shape = (15,))#candidate|30|(15,)|var|float32
bop_31 = relay.subtract(uop_28.astype('int32'), var_30.astype('int32')) # shape=(15,)
bop_34 = relay.right_shift(uop_28.astype('int64'), relay.reshape(bop_16.astype('int64'), relay.shape_of(uop_28))) # shape=(1,)
var_37 = relay.var("var_37", dtype = "int32", shape = (15,))#candidate|37|(15,)|var|int32
bop_38 = relay.greater_equal(bop_31.astype('bool'), relay.reshape(var_37.astype('bool'), relay.shape_of(bop_31))) # shape=(15,)
var_41 = relay.var("var_41", dtype = "int32", shape = (15,))#candidate|41|(15,)|var|int32
bop_42 = relay.bitwise_xor(var_37.astype('uint16'), relay.reshape(var_41.astype('uint16'), relay.shape_of(var_37))) # shape=(15,)
uop_45 = relay.erf(bop_34.astype('float32')) # shape=(1,)
uop_47 = relay.acosh(uop_45.astype('float64')) # shape=(1,)
bop_49 = relay.bitwise_and(uop_47.astype('uint64'), bop_31.astype('uint64')) # shape=(15,)
uop_52 = relay.rsqrt(uop_47.astype('float32')) # shape=(1,)
func_8_call = mod.get_global_var('func_8')
func_11_call = mutated_mod.get_global_var('func_11')
call_54 = relay.TupleGetItem(func_8_call(relay.reshape(uop_47.astype('float64'), [])), 1)
call_55 = relay.TupleGetItem(func_11_call(relay.reshape(uop_47.astype('float64'), [])), 1)
uop_56 = relay.cosh(uop_52.astype('float32')) # shape=(1,)
uop_58 = relay.sin(uop_56.astype('float32')) # shape=(1,)
uop_60 = relay.sqrt(uop_56.astype('float32')) # shape=(1,)
func_8_call = mod.get_global_var('func_8')
func_11_call = mutated_mod.get_global_var('func_11')
call_62 = relay.TupleGetItem(func_8_call(relay.reshape(uop_52.astype('float64'), [])), 0)
call_63 = relay.TupleGetItem(func_11_call(relay.reshape(uop_52.astype('float64'), [])), 0)
var_64 = relay.var("var_64", dtype = "float32", shape = (7,))#candidate|64|(7,)|var|float32
bop_65 = relay.logical_or(uop_52.astype('bool'), var_64.astype('bool')) # shape=(7,)
bop_68 = relay.bitwise_xor(uop_60.astype('int64'), bop_31.astype('int64')) # shape=(15,)
func_8_call = mod.get_global_var('func_8')
func_11_call = mutated_mod.get_global_var('func_11')
call_71 = relay.TupleGetItem(func_8_call(relay.reshape(var_13.astype('float64'), [])), 1)
call_72 = relay.TupleGetItem(func_11_call(relay.reshape(var_13.astype('float64'), [])), 1)
bop_73 = relay.greater(uop_58.astype('bool'), relay.reshape(call_62.astype('bool'), relay.shape_of(uop_58))) # shape=(1,)
bop_76 = relay.greater(uop_58.astype('bool'), relay.reshape(call_63.astype('bool'), relay.shape_of(uop_58))) # shape=(1,)
bop_77 = relay.logical_or(bop_65.astype('bool'), call_71.astype('bool')) # shape=(7,)
bop_80 = relay.logical_or(bop_65.astype('bool'), call_72.astype('bool')) # shape=(7,)
uop_81 = relay.tan(bop_73.astype('float32')) # shape=(1,)
uop_83 = relay.tan(bop_76.astype('float32')) # shape=(1,)
bop_84 = relay.not_equal(uop_56.astype('bool'), relay.reshape(call_62.astype('bool'), relay.shape_of(uop_56))) # shape=(1,)
bop_87 = relay.not_equal(uop_56.astype('bool'), relay.reshape(call_63.astype('bool'), relay.shape_of(uop_56))) # shape=(1,)
uop_88 = relay.asinh(uop_58.astype('float64')) # shape=(1,)
uop_90 = relay.sin(uop_88.astype('float32')) # shape=(1,)
var_92 = relay.var("var_92", dtype = "uint64", shape = (15,))#candidate|92|(15,)|var|uint64
bop_93 = relay.mod(bop_49.astype('float64'), relay.reshape(var_92.astype('float64'), relay.shape_of(bop_49))) # shape=(15,)
uop_96 = relay.sigmoid(uop_81.astype('float32')) # shape=(1,)
uop_98 = relay.sigmoid(uop_83.astype('float32')) # shape=(1,)
var_99 = relay.var("var_99", dtype = "float32", shape = (4,))#candidate|99|(4,)|var|float32
bop_100 = relay.multiply(uop_90.astype('uint32'), var_99.astype('uint32')) # shape=(4,)
func_8_call = mod.get_global_var('func_8')
func_11_call = mutated_mod.get_global_var('func_11')
call_103 = relay.TupleGetItem(func_8_call(relay.reshape(uop_45.astype('float64'), [])), 1)
call_104 = relay.TupleGetItem(func_11_call(relay.reshape(uop_45.astype('float64'), [])), 1)
func_8_call = mod.get_global_var('func_8')
func_11_call = mutated_mod.get_global_var('func_11')
call_105 = relay.TupleGetItem(func_8_call(relay.reshape(call_103.astype('float64'), [])), 1)
call_106 = relay.TupleGetItem(func_11_call(relay.reshape(call_103.astype('float64'), [])), 1)
var_107 = relay.var("var_107", dtype = "uint32", shape = (4,))#candidate|107|(4,)|var|uint32
bop_108 = relay.logical_or(bop_100.astype('bool'), relay.reshape(var_107.astype('bool'), relay.shape_of(bop_100))) # shape=(4,)
uop_111 = relay.acos(uop_88.astype('float64')) # shape=(1,)
uop_113 = relay.log(bop_73.astype('float32')) # shape=(1,)
uop_115 = relay.log(bop_76.astype('float32')) # shape=(1,)
uop_116 = relay.atan(uop_56.astype('float64')) # shape=(1,)
uop_118 = relay.sin(bop_100.astype('float64')) # shape=(4,)
const_120 = relay.const([-0.517170,1.340284,-8.453799,4.290355], dtype = "float64")#candidate|120|(4,)|const|float64
bop_121 = relay.floor_mod(uop_118.astype('float32'), relay.reshape(const_120.astype('float32'), relay.shape_of(uop_118))) # shape=(4,)
uop_124 = relay.sigmoid(bop_100.astype('float64')) # shape=(4,)
bop_126 = relay.bitwise_and(uop_111.astype('uint32'), relay.reshape(uop_52.astype('uint32'), relay.shape_of(uop_111))) # shape=(1,)
uop_129 = relay.acosh(uop_113.astype('float64')) # shape=(1,)
uop_131 = relay.acosh(uop_115.astype('float64')) # shape=(1,)
uop_132 = relay.sigmoid(uop_124.astype('float32')) # shape=(4,)
uop_134 = relay.sin(uop_132.astype('float64')) # shape=(4,)
output = relay.Tuple([bop_19,bop_22,bop_38,bop_42,call_54,bop_68,bop_77,bop_84,bop_93,uop_96,call_103,call_105,bop_108,uop_116,bop_121,bop_126,uop_129,uop_134,])
output2 = relay.Tuple([bop_19,bop_22,bop_38,bop_42,call_55,bop_68,bop_80,bop_87,bop_93,uop_98,call_104,call_106,bop_108,uop_116,bop_121,bop_126,uop_131,uop_134,])
func_136 = relay.Function([var_13,var_30,var_37,var_41,var_64,var_92,var_99,var_107,], output)
mod['func_136'] = func_136
mod = relay.transform.InferType()(mod)
mutated_mod['func_136'] = func_136
mutated_mod = relay.transform.InferType()(mutated_mod)
func_136_call = mutated_mod.get_global_var('func_136')
var_138 = relay.var("var_138", dtype = "float64", shape = (1,))#candidate|138|(1,)|var|float64
var_139 = relay.var("var_139", dtype = "float32", shape = (15,))#candidate|139|(15,)|var|float32
var_140 = relay.var("var_140", dtype = "int32", shape = (15,))#candidate|140|(15,)|var|int32
var_141 = relay.var("var_141", dtype = "int32", shape = (15,))#candidate|141|(15,)|var|int32
var_142 = relay.var("var_142", dtype = "float32", shape = (7,))#candidate|142|(7,)|var|float32
var_143 = relay.var("var_143", dtype = "uint64", shape = (15,))#candidate|143|(15,)|var|uint64
var_144 = relay.var("var_144", dtype = "float32", shape = (4,))#candidate|144|(4,)|var|float32
var_145 = relay.var("var_145", dtype = "uint32", shape = (4,))#candidate|145|(4,)|var|uint32
call_137 = func_136_call(var_138,var_139,var_140,var_141,var_142,var_143,var_144,var_145,)
output = call_137
func_146 = relay.Function([var_138,var_139,var_140,var_141,var_142,var_143,var_144,var_145,], output)
mutated_mod['func_146'] = func_146
mutated_mod = relay.transform.InferType()(mutated_mod)
var_148 = relay.var("var_148", dtype = "uint16", shape = ())#candidate|148|()|var|uint16
var_149 = relay.var("var_149", dtype = "uint16", shape = (6,))#candidate|149|(6,)|var|uint16
bop_150 = relay.bitwise_or(var_148.astype('uint16'), var_149.astype('uint16')) # shape=(6,)
bop_153 = relay.floor_mod(var_149.astype('float64'), var_148.astype('float64')) # shape=(6,)
uop_156 = relay.acos(bop_150.astype('float32')) # shape=(6,)
var_158 = relay.var("var_158", dtype = "float32", shape = (6,))#candidate|158|(6,)|var|float32
bop_159 = relay.less_equal(uop_156.astype('bool'), relay.reshape(var_158.astype('bool'), relay.shape_of(uop_156))) # shape=(6,)
bop_162 = relay.bitwise_xor(bop_153.astype('uint8'), var_148.astype('uint8')) # shape=(6,)
var_165 = relay.var("var_165", dtype = "float64", shape = (6,))#candidate|165|(6,)|var|float64
bop_166 = relay.right_shift(bop_153.astype('uint16'), relay.reshape(var_165.astype('uint16'), relay.shape_of(bop_153))) # shape=(6,)
func_136_call = mod.get_global_var('func_136')
func_146_call = mutated_mod.get_global_var('func_146')
var_170 = relay.var("var_170", dtype = "float32", shape = (15,))#candidate|170|(15,)|var|float32
const_171 = relay.const([6.433094,1.079104,-9.810251,-1.274000,-7.643444,7.992710,7.794665], dtype = "float32")#candidate|171|(7,)|const|float32
const_172 = relay.const([[-9.172424],[0.956516],[-2.682864],[-8.205662]], dtype = "float32")#candidate|172|(4, 1)|const|float32
call_169 = relay.TupleGetItem(func_136_call(relay.reshape(var_148.astype('float64'), [1,]), relay.reshape(var_170.astype('float32'), [15,]), relay.reshape(var_170.astype('int32'), [15,]), relay.reshape(var_170.astype('int32'), [15,]), relay.reshape(const_171.astype('float32'), [7,]), relay.reshape(var_170.astype('uint64'), [15,]), relay.reshape(const_172.astype('float32'), [4,]), relay.reshape(const_172.astype('uint32'), [4,]), ), 3)
call_173 = relay.TupleGetItem(func_146_call(relay.reshape(var_148.astype('float64'), [1,]), relay.reshape(var_170.astype('float32'), [15,]), relay.reshape(var_170.astype('int32'), [15,]), relay.reshape(var_170.astype('int32'), [15,]), relay.reshape(const_171.astype('float32'), [7,]), relay.reshape(var_170.astype('uint64'), [15,]), relay.reshape(const_172.astype('float32'), [4,]), relay.reshape(const_172.astype('uint32'), [4,]), ), 3)
uop_174 = relay.erf(var_149.astype('float32')) # shape=(6,)
bop_176 = relay.less(uop_174.astype('bool'), relay.reshape(bop_159.astype('bool'), relay.shape_of(uop_174))) # shape=(6,)
uop_179 = relay.cos(bop_159.astype('float64')) # shape=(6,)
const_181 = relay.const([False,False,True,True,False,False], dtype = "bool")#candidate|181|(6,)|const|bool
bop_182 = relay.greater(bop_176.astype('bool'), relay.reshape(const_181.astype('bool'), relay.shape_of(bop_176))) # shape=(6,)
output = relay.Tuple([bop_162,bop_166,call_169,var_170,const_171,const_172,uop_179,bop_182,])
output2 = relay.Tuple([bop_162,bop_166,call_173,var_170,const_171,const_172,uop_179,bop_182,])
func_185 = relay.Function([var_148,var_149,var_158,var_165,var_170,], output)
mod['func_185'] = func_185
mod = relay.transform.InferType()(mod)
mutated_mod['func_185'] = func_185
mutated_mod = relay.transform.InferType()(mutated_mod)
func_185_call = mutated_mod.get_global_var('func_185')
var_187 = relay.var("var_187", dtype = "uint16", shape = ())#candidate|187|()|var|uint16
var_188 = relay.var("var_188", dtype = "uint16", shape = (6,))#candidate|188|(6,)|var|uint16
var_189 = relay.var("var_189", dtype = "float32", shape = (6,))#candidate|189|(6,)|var|float32
var_190 = relay.var("var_190", dtype = "float64", shape = (6,))#candidate|190|(6,)|var|float64
var_191 = relay.var("var_191", dtype = "float32", shape = (15,))#candidate|191|(15,)|var|float32
call_186 = func_185_call(var_187,var_188,var_189,var_190,var_191,)
output = call_186
func_192 = relay.Function([var_187,var_188,var_189,var_190,var_191,], output)
mutated_mod['func_192'] = func_192
mutated_mod = relay.transform.InferType()(mutated_mod)
var_194 = relay.var("var_194", dtype = "float64", shape = (15, 4, 14))#candidate|194|(15, 4, 14)|var|float64
var_195 = relay.var("var_195", dtype = "float64", shape = (15, 4, 14))#candidate|195|(15, 4, 14)|var|float64
bop_196 = relay.minimum(var_194.astype('float64'), relay.reshape(var_195.astype('float64'), relay.shape_of(var_194))) # shape=(15, 4, 14)
var_199 = relay.var("var_199", dtype = "float64", shape = (15, 4, 14))#candidate|199|(15, 4, 14)|var|float64
bop_200 = relay.bitwise_or(bop_196.astype('uint32'), relay.reshape(var_199.astype('uint32'), relay.shape_of(bop_196))) # shape=(15, 4, 14)
output = bop_200
output2 = bop_200
func_203 = relay.Function([var_194,var_195,var_199,], output)
mod['func_203'] = func_203
mod = relay.transform.InferType()(mod)
mutated_mod['func_203'] = func_203
mutated_mod = relay.transform.InferType()(mutated_mod)
func_203_call = mutated_mod.get_global_var('func_203')
var_205 = relay.var("var_205", dtype = "float64", shape = (15, 4, 14))#candidate|205|(15, 4, 14)|var|float64
var_206 = relay.var("var_206", dtype = "float64", shape = (15, 4, 14))#candidate|206|(15, 4, 14)|var|float64
var_207 = relay.var("var_207", dtype = "float64", shape = (15, 4, 14))#candidate|207|(15, 4, 14)|var|float64
call_204 = func_203_call(var_205,var_206,var_207,)
output = call_204
func_208 = relay.Function([var_205,var_206,var_207,], output)
mutated_mod['func_208'] = func_208
mutated_mod = relay.transform.InferType()(mutated_mod)
var_210 = relay.var("var_210", dtype = "float64", shape = (13, 11, 15))#candidate|210|(13, 11, 15)|var|float64
uop_211 = relay.sigmoid(var_210.astype('float64')) # shape=(13, 11, 15)
uop_213 = relay.erf(uop_211.astype('float64')) # shape=(13, 11, 15)
bop_215 = relay.logical_and(uop_211.astype('bool'), relay.reshape(var_210.astype('bool'), relay.shape_of(uop_211))) # shape=(13, 11, 15)
uop_218 = relay.sin(uop_213.astype('float32')) # shape=(13, 11, 15)
uop_220 = relay.sqrt(uop_213.astype('float64')) # shape=(13, 11, 15)
bop_222 = relay.greater_equal(var_210.astype('bool'), relay.reshape(uop_218.astype('bool'), relay.shape_of(var_210))) # shape=(13, 11, 15)
var_225 = relay.var("var_225", dtype = "float64", shape = (13, 11, 15))#candidate|225|(13, 11, 15)|var|float64
bop_226 = relay.minimum(uop_220.astype('int16'), relay.reshape(var_225.astype('int16'), relay.shape_of(uop_220))) # shape=(13, 11, 15)
bop_229 = relay.power(uop_218.astype('float32'), relay.reshape(uop_220.astype('float32'), relay.shape_of(uop_218))) # shape=(13, 11, 15)
uop_232 = relay.atan(bop_215.astype('float64')) # shape=(13, 11, 15)
uop_234 = relay.asin(uop_220.astype('float32')) # shape=(13, 11, 15)
var_236 = relay.var("var_236", dtype = "bool", shape = (13, 11, 15))#candidate|236|(13, 11, 15)|var|bool
bop_237 = relay.power(bop_215.astype('float32'), relay.reshape(var_236.astype('float32'), relay.shape_of(bop_215))) # shape=(13, 11, 15)
bop_240 = relay.not_equal(uop_234.astype('bool'), relay.reshape(uop_232.astype('bool'), relay.shape_of(uop_234))) # shape=(13, 11, 15)
bop_243 = relay.greater_equal(bop_226.astype('bool'), relay.reshape(bop_222.astype('bool'), relay.shape_of(bop_226))) # shape=(13, 11, 15)
uop_246 = relay.log2(uop_213.astype('float64')) # shape=(13, 11, 15)
var_248 = relay.var("var_248", dtype = "float32", shape = (13, 11, 15))#candidate|248|(13, 11, 15)|var|float32
bop_249 = relay.equal(uop_234.astype('bool'), relay.reshape(var_248.astype('bool'), relay.shape_of(uop_234))) # shape=(13, 11, 15)
uop_252 = relay.log2(uop_246.astype('float32')) # shape=(13, 11, 15)
uop_254 = relay.atan(bop_243.astype('float64')) # shape=(13, 11, 15)
bop_256 = relay.multiply(uop_254.astype('float64'), relay.reshape(uop_252.astype('float64'), relay.shape_of(uop_254))) # shape=(13, 11, 15)
uop_259 = relay.asinh(uop_232.astype('float64')) # shape=(13, 11, 15)
bop_261 = relay.greater(uop_232.astype('bool'), relay.reshape(uop_218.astype('bool'), relay.shape_of(uop_232))) # shape=(13, 11, 15)
uop_264 = relay.acosh(uop_234.astype('float32')) # shape=(13, 11, 15)
bop_266 = relay.right_shift(bop_222.astype('int16'), relay.reshape(uop_246.astype('int16'), relay.shape_of(bop_222))) # shape=(13, 11, 15)
uop_269 = relay.acos(uop_232.astype('float64')) # shape=(13, 11, 15)
const_271 = relay.constdtype = "float32")#candidate|271|(13, 11, 15)|const|float32
bop_272 = relay.less(uop_264.astype('bool'), relay.reshape(const_271.astype('bool'), relay.shape_of(uop_264))) # shape=(13, 11, 15)
bop_275 = relay.power(uop_254.astype('float32'), relay.reshape(bop_229.astype('float32'), relay.shape_of(uop_254))) # shape=(13, 11, 15)
uop_278 = relay.sigmoid(bop_275.astype('float32')) # shape=(13, 11, 15)
bop_280 = relay.bitwise_and(bop_272.astype('int64'), relay.reshape(uop_213.astype('int64'), relay.shape_of(bop_272))) # shape=(13, 11, 15)
uop_283 = relay.sin(bop_240.astype('float64')) # shape=(13, 11, 15)
bop_285 = relay.bitwise_or(uop_278.astype('int8'), relay.reshape(uop_259.astype('int8'), relay.shape_of(uop_278))) # shape=(13, 11, 15)
uop_288 = relay.cos(bop_285.astype('float64')) # shape=(13, 11, 15)
bop_290 = relay.logical_or(uop_288.astype('bool'), relay.reshape(uop_234.astype('bool'), relay.shape_of(uop_288))) # shape=(13, 11, 15)
uop_293 = relay.sigmoid(uop_254.astype('float32')) # shape=(13, 11, 15)
uop_295 = relay.acos(uop_269.astype('float64')) # shape=(13, 11, 15)
func_8_call = mod.get_global_var('func_8')
func_11_call = mutated_mod.get_global_var('func_11')
var_298 = relay.var("var_298", dtype = "float64", shape = ())#candidate|298|()|var|float64
call_297 = relay.TupleGetItem(func_8_call(relay.reshape(var_298.astype('float64'), [])), 1)
call_299 = relay.TupleGetItem(func_11_call(relay.reshape(var_298.astype('float64'), [])), 1)
bop_300 = relay.divide(uop_264.astype('float32'), relay.reshape(bop_261.astype('float32'), relay.shape_of(uop_264))) # shape=(13, 11, 15)
bop_303 = relay.greater_equal(uop_288.astype('bool'), relay.reshape(const_271.astype('bool'), relay.shape_of(uop_288))) # shape=(13, 11, 15)
bop_306 = relay.bitwise_xor(bop_272.astype('int64'), relay.reshape(bop_237.astype('int64'), relay.shape_of(bop_272))) # shape=(13, 11, 15)
bop_309 = relay.bitwise_xor(uop_288.astype('uint16'), relay.reshape(bop_215.astype('uint16'), relay.shape_of(uop_288))) # shape=(13, 11, 15)
uop_312 = relay.asin(uop_278.astype('float32')) # shape=(13, 11, 15)
uop_314 = relay.acosh(bop_290.astype('float32')) # shape=(13, 11, 15)
const_316 = relay.const([[[6.286028,1.401205,7.306104,9.440082,-6.305872,5.991852,1.765655,-1.942223,-0.954758,-9.144610,5.912421,-2.851196,4.076392,5.989973,3.666516],[-6.952711,2.434588,6.552020,8.314003,-3.101473,-5.255742,-3.121087,-2.865936,-9.833986,3.392889,-0.751548,3.758497,-3.352079,-9.202123,5.230481],[-6.785808,-8.463535,1.418534,-2.585120,-1.874342,-3.141831,-3.265289,5.411916,-3.243695,7.837083,-6.684628,-0.734734,3.289234,-3.831110,-8.714811],[6.125248,3.305362,-0.189881,6.355715,8.372359,1.470676,-6.945818,-6.030844,3.873099,3.982465,-5.662106,-3.278833,2.459771,1.594805,4.095885],[5.966957,-2.493223,5.329447,0.223728,-5.914736,-0.882572,8.102886,8.914509,-3.680327,-4.801834,-7.163294,6.298885,9.048004,-5.527671,-3.450764],[-2.968217,-5.524831,-5.222955,-8.094191,-6.042081,-2.943736,-3.974450,4.153931,-7.122560,-0.041490,3.616306,4.479812,-3.045056,5.622841,-1.110616],[-1.605287,6.368220,4.501773,-6.006664,9.872247,-0.241451,-3.239579,3.838764,6.963571,5.014764,-1.796646,-5.963151,-2.372481,-3.461749,7.254132],[0.045444,-2.711749,-2.797772,1.963565,2.662593,0.708778,-7.907611,-7.343435,2.915846,9.499416,-6.192278,8.670520,-1.679089,8.467564,0.789204],[1.161367,-0.863547,6.709551,6.194338,-4.865956,9.323856,4.992622,1.589057,-1.125956,1.735299,2.394364,2.905679,-9.403144,-6.692695,7.003970],[-7.146671,4.237083,-9.727501,6.304346,1.135808,-7.911360,7.327057,-4.925504,1.255854,1.990309,4.558023,-3.148723,5.833496,-1.603881,-8.259712],[2.783124,-4.487468,-0.583741,7.305396,-9.384961,0.510289,4.310169,-9.431843,8.615993,-9.072201,-8.120730,7.867653,3.793187,0.192607,9.485176]],[[0.037694,-5.836124,7.431304,-5.617173,-2.102660,0.235849,9.997854,-6.379995,-4.033066,1.805381,-6.512527,-9.718927,9.514871,-3.460412,0.821685],[-7.201324,-3.133613,-7.553600,5.624342,-7.138828,-9.168563,7.255756,6.630854,6.280224,5.669675,-3.546909,8.316846,-6.833450,-4.852384,7.081050],[-9.839234,-8.991771,5.043527,-4.376510,3.285061,-3.098180,-9.443981,3.886457,-3.733904,4.379745,-3.520141,9.123720,1.276829,-8.654183,7.001602],[5.748175,3.740147,-2.208984,3.711624,-0.237257,-7.264988,-1.921610,-0.007698,-8.662822,-1.461947,1.100963,9.079534,-5.965826,-3.163666,0.175536],[4.538929,7.761143,-2.325895,7.092049,-2.973647,7.533942,-5.903454,3.106930,3.900497,3.921920,6.355689,-1.131759,-1.428257,2.339895,6.275699],[-2.602820,-2.738355,-0.960831,2.732529,-5.993922,3.815573,-5.707164,2.003336,-4.751130,7.570472,-9.647456,-8.667864,-8.998559,-5.528126,5.857942],[-4.252424,-5.597668,1.598868,5.156949,-3.203113,-9.817669,2.182440,9.829494,-9.929662,-2.095312,-7.740684,3.052098,2.600713,6.458293,3.563767],[-7.101997,-7.930474,-5.927016,4.535422,-5.564495,2.649284,6.520811,-4.405811,0.611486,-6.562128,-0.239477,9.863891,-4.142939,6.170341,-6.506106],[-8.752783,-1.557941,7.702917,3.453038,3.627630,-9.489454,-5.290631,5.012136,-2.743821,-9.080676,-7.126219,2.125757,-8.203772,0.295401,9.755058],[-9.819940,-9.760471,-6.199742,-2.065763,-5.008089,-8.604497,-0.390997,-6.556762,9.676341,1.988620,7.624353,-9.399384,9.488491,-4.402516,1.229962],[-4.258698,-3.684907,-7.330517,-8.193705,-3.113265,-3.283343,4.669425,7.577555,3.823380,-6.679046,-7.643605,-0.420296,9.532402,9.996310,-1.994580]],[[2.409016,8.657363,3.036219,9.950430,-4.596240,-5.994122,-4.455423,5.413380,9.077297,-9.204420,7.967214,-5.415543,0.315103,1.518425,6.442047],[1.728369,-8.259413,-4.501001,2.859344,9.287988,7.085491,-4.050767,2.964113,-9.019904,-4.303782,5.630738,6.875647,-2.449251,3.971128,-0.540692],[8.514200,9.587893,-8.751075,-3.937811,0.645022,7.387517,8.944208,-2.882608,7.399402,-7.381918,8.609039,-6.249395,0.805478,-5.252373,-5.584564],[9.683734,-2.812431,-0.534411,4.141468,-7.254870,-4.696143,5.456741,-6.979196,0.776199,-8.014300,0.023927,7.501602,5.434734,-4.948265,4.086249],[-2.541607,1.953698,1.720784,0.370781,-3.542846,-8.383098,2.528933,-3.008823,3.216602,3.281590,6.185147,-4.314958,-9.820059,4.825143,0.342922],[-1.023550,-1.701156,-6.598700,3.524144,-0.626074,-7.034848,-1.878926,-7.029346,8.301096,-1.926352,-9.937151,2.976834,-0.505080,-0.516741,0.092336],[-1.491968,3.634758,3.910498,6.916625,7.103695,-2.991462,-4.079189,7.192622,3.470067,-0.488944,5.750191,-2.969776,0.711050,3.905554,-7.538348],[7.522341,-1.067259,8.034723,6.044651,-2.991571,-5.675850,-8.315235,7.931635,-4.539600,-8.520868,5.794319,5.607203,-6.562953,-4.234134,-4.853283],[-8.375835,-0.775676,-6.043104,-5.753107,-2.720647,-2.365260,9.288568,1.556043,-4.929075,-9.347442,-5.235227,-8.420463,1.249266,3.925993,-7.236001],[-0.808536,8.353902,0.056846,1.738904,2.000771,-1.268376,-9.952447,-4.126179,1.838620,0.111311,0.240697,4.443965,5.153969,4.325897,-7.663990],[-6.812276,-4.859735,9.707915,3.426294,-2.841274,-0.973141,-6.319417,-5.280331,-5.662882,9.633474,1.296202,-2.947244,1.381864,9.897126,-5.694751]],[[-7.780137,6.296673,-0.469421,9.160476,4.915208,6.052979,-5.913160,-3.897812,-4.386941,-0.334501,6.205993,0.160058,-4.849012,7.668771,7.759270],[-8.009697,9.553304,-1.065390,-8.346977,1.775911,0.225824,-9.621626,5.491427,9.585304,6.348728,1.190372,6.060192,-2.089242,9.912933,-0.472967],[3.523005,0.929012,-2.018453,7.629668,2.531907,-9.327299,8.810294,-4.377151,9.506436,-9.910418,-5.192984,6.886974,-1.002068,8.659842,-4.094252],[-9.327021,-6.451544,-2.094530,-4.815389,-0.757504,-0.341706,-6.875277,1.218474,-4.927497,-8.910368,9.961098,0.001896,2.937769,9.568469,5.008912],[-5.935397,7.368517,3.255997,2.192205,0.897968,0.659917,-3.959079,6.371490,3.240365,-5.981773,5.363193,-4.696536,4.183072,-0.432016,-7.268533],[-2.154111,-6.234902,-1.182289,4.255410,4.409740,2.059630,-0.828925,-4.818491,2.553776,-1.386527,-6.501939,9.959329,-6.906624,-1.837769,4.145696],[-8.273359,8.294666,-0.205506,3.427483,8.117527,-9.596336,9.625437,-8.387309,4.821448,3.119463,8.578445,8.044086,-6.711423,3.799282,-6.767055],[-5.501443,-9.280296,1.000332,9.342242,-1.329217,7.704840,9.392001,-7.223932,6.480788,6.838348,9.706207,-7.379304,1.896112,-6.945114,8.270615],[-2.056978,0.295376,9.578988,8.778230,5.253742,1.384562,-6.935869,-8.302095,-5.276637,-4.227333,-4.345681,-1.206507,-5.783624,-5.177156,9.505833],[-9.150181,1.713642,-7.153693,-2.991454,2.200017,-8.059064,8.741255,8.828654,4.854595,8.755585,1.804612,3.114621,-1.961091,8.464620,-6.286824],[-6.065458,-9.417162,-4.399143,-9.530800,-4.857613,1.450674,-4.180328,-5.621265,-4.323150,3.142713,7.987626,0.680727,-2.545956,2.914227,-9.588243]],[[-8.704484,-9.469397,-6.592896,-8.077222,0.958440,-2.817401,8.659916,3.160324,-5.887994,7.965728,8.161111,-5.372182,5.283393,-6.060808,5.891912],[-3.067998,1.979420,-5.498185,9.826366,-7.249796,-7.609408,3.642014,1.188126,5.905354,-1.745174,7.685778,0.892914,6.465629,0.398307,4.211966],[-8.968341,-8.391824,-0.213732,-3.050043,9.337803,4.695916,3.609395,7.942206,0.042829,4.557662,9.887286,-9.208621,-3.246543,0.644847,7.499476],[-7.990296,-1.158841,-0.003661,-8.866616,2.092104,0.251444,5.141880,0.363597,-3.335445,2.743184,6.630580,-1.435297,5.949738,8.636915,-7.627708],[-3.631738,-5.232752,-9.145652,1.072660,5.593788,-2.915455,9.150508,-9.247712,7.020983,-4.410198,-1.530626,8.401434,1.934438,4.951214,-4.298534],[5.272829,7.603818,3.201875,-3.935300,-8.898702,0.469247,5.373426,-1.320738,-2.149268,-1.295057,-3.573909,-2.094394,7.546427,-1.136312,-1.829783],[8.321198,1.213876,5.618265,-4.861417,-2.382886,-2.961018,3.312268,-3.653833,0.369597,5.230369,9.928342,-6.080933,-2.841123,0.720352,-5.661144],[0.411906,-2.622107,-3.544556,6.383606,5.887392,2.814404,-1.478718,7.417153,-6.880186,5.415835,-1.737304,3.682969,-8.609481,6.825542,0.460174],[0.991827,3.640132,6.288340,6.713836,-7.094341,-2.758654,-7.977932,-0.182458,-6.246813,-5.868692,5.108287,-2.372706,9.505324,-8.746781,3.712713],[4.309955,-8.671514,-4.850800,-8.977432,-1.104643,-6.426592,4.751219,5.041415,9.018674,-7.523727,9.745331,-7.604707,5.383199,-8.960590,-4.096191],[7.665393,-9.947920,-3.536211,3.015608,6.956395,7.534245,1.698128,-8.684533,2.915625,-4.233588,-6.485467,1.635760,3.049122,-9.436261,-5.393064]],[[4.171212,-9.814361,6.250946,-0.208496,-1.909617,-0.914486,-2.466071,-5.037861,7.775423,-8.901790,8.218684,8.522518,0.141987,4.668410,7.524453],[9.554611,6.923292,-3.577435,-2.623536,-2.003162,-6.673787,2.950576,-8.391276,-6.453410,1.259170,2.346992,0.649333,6.218512,8.385241,-1.749076],[-2.648017,-1.739498,-9.201483,-5.606518,4.453313,5.223385,1.091336,-6.862476,-1.623877,5.692066,5.049802,-1.442483,-4.346381,-3.667921,2.345366],[-2.130688,-6.952975,6.814318,4.692091,5.137922,-0.282061,0.527095,8.565110,5.169126,-2.054292,9.468353,1.737622,-6.473337,2.619768,-8.615267],[4.330668,-0.734587,4.502693,-1.116151,7.170513,7.818554,-4.176597,-7.013074,0.509087,0.672261,-5.984254,7.199594,0.574789,6.927996,-5.587159],[5.496299,-1.068073,9.005209,2.524803,8.261667,-4.645747,6.865340,2.765686,-0.382321,5.445341,-6.213023,1.239264,-9.731297,7.437617,1.405237],[9.977745,5.782151,8.657044,8.601045,6.778482,9.331930,1.213498,-8.086639,-3.271038,2.054784,0.189033,-5.767467,-7.542761,3.610064,-0.199784],[0.374870,5.209306,-4.062915,-0.075332,9.174792,-2.196961,1.113699,3.446729,-9.169541,-1.824477,-4.861046,9.445533,-7.048268,9.292795,9.663240],[4.113424,1.599191,6.870343,9.755210,5.968131,2.124115,8.441314,9.889753,0.339780,8.852380,-5.773279,9.660480,-8.037030,3.755171,7.541001],[2.993001,6.278714,4.527771,-8.152502,-1.447152,9.283624,0.664896,-9.721827,-4.437760,-4.980598,-1.713796,5.586216,-2.766163,2.164854,3.433750],[-4.597451,8.117017,4.240966,1.438276,5.086926,3.127239,7.780092,-8.919197,9.372741,2.559081,-3.409271,-5.099673,0.088160,0.785772,-6.891584]],[[3.127515,5.857845,4.513092,7.241382,8.545340,-6.240017,-3.605015,6.327986,-0.107558,1.824391,5.622923,9.902020,5.566944,-6.803199,5.796767],[0.492565,-4.130551,-2.664996,8.610409,-1.222918,-8.304968,4.999123,-5.359520,7.282443,9.335076,3.306581,-7.093202,5.132382,7.883335,-6.236740],[-2.372856,-2.269602,0.217415,-4.580566,-6.042751,5.116720,-5.234992,9.135786,0.390977,8.699728,7.031608,6.678350,4.359773,5.312713,7.691765],[0.893357,8.265273,-6.727673,-6.210755,5.145173,1.100428,-8.804567,9.481022,-5.440898,-2.114506,-3.844696,-4.548074,-2.668008,-2.917588,1.585656],[8.103500,8.622595,-4.489265,4.629670,2.713347,0.639911,9.422599,-0.520748,-6.514605,-9.374486,-3.268436,-3.202829,-3.030850,-5.210126,6.125642],[-5.320897,-5.321192,5.330230,3.897456,-9.744996,-4.447386,9.140828,4.717485,-2.475064,1.258591,-5.647512,3.326326,-9.943065,9.707694,-0.004173],[-4.262218,-9.783387,1.704451,9.098435,-6.896763,4.544957,-2.252884,9.838992,-4.038260,9.770243,-1.795471,8.225507,-9.071266,7.072535,-8.672211],[-3.495144,7.090345,3.382712,5.660773,3.236220,-5.225726,-7.695953,-7.601004,-2.025340,4.789912,-4.663680,-2.296223,-7.306998,2.139891,-5.794613],[3.058464,0.230172,2.587140,1.196629,7.894244,6.643865,8.210232,-7.656356,4.959640,-5.585657,-4.655125,-0.184384,-8.101179,-5.261229,-0.980790],[6.462250,4.732416,-6.294674,-7.758976,5.412703,4.051966,6.565980,-4.760305,-6.920029,0.947973,9.049895,3.662570,-5.375426,-6.496782,9.016974],[6.511383,-0.395762,9.287584,-0.503011,7.409921,-8.922122,-2.784051,2.470450,2.151450,-6.366809,3.001692,4.971581,1.803490,-1.127733,-0.177896]],[[-9.891285,4.610963,-9.086023,-5.272708,-5.806723,6.002969,-2.210040,-6.621355,-0.909458,6.779780,-9.864884,-8.134180,3.225498,3.231965,0.852772],[1.282691,-2.611098,0.125428,-1.484507,1.987840,4.138164,8.373430,-1.998223,6.434589,3.354725,3.835189,8.954738,4.769184,4.656007,5.158680],[-2.404326,-7.352405,2.184699,-3.912305,1.766599,-5.539367,-1.001713,-2.399484,9.086747,3.310662,-3.079498,1.807651,3.075971,-7.076293,8.105025],[0.186520,0.914088,-9.572128,3.202419,-2.300310,-0.467253,3.003302,-4.956311,3.459138,-4.963117,-1.555708,7.381077,-2.118614,1.993325,8.139255],[-4.910095,-4.518674,2.073852,-6.795784,0.687279,8.422608,8.906953,-3.913609,9.549918,-6.225171,0.506143,-8.160811,-6.607934,0.572896,-0.582204],[-9.024386,0.856943,-3.324673,-9.255488,-1.635759,0.970421,4.765990,-7.234070,-1.873317,-1.222130,8.385335,2.320939,-8.243053,8.417234,0.536197],[6.124053,-4.493352,9.223657,4.641524,-8.404645,9.429177,7.071333,-6.854476,2.807269,9.257979,8.619020,9.400913,6.739218,-8.685264,6.934439],[-2.801932,-9.858947,4.252822,0.630576,3.807552,-4.058355,8.836512,0.130525,-0.159370,-4.508961,-0.350316,-1.918318,-9.022231,-1.585781,-9.506138],[9.921644,-0.879074,-4.808649,0.393940,-4.633027,4.219970,8.357291,-7.369026,-4.007790,9.125622,3.920403,6.043558,9.820528,5.622855,-7.711198],[0.640559,-9.475942,2.741567,-6.234165,-0.200479,4.575226,9.561813,-8.369025,-5.601691,-5.460970,9.398351,8.286933,-2.092078,-1.649284,-8.031495],[6.008567,-4.888097,8.223880,-9.761437,-7.520165,-0.817673,-2.665623,1.819372,-1.301872,-3.497387,9.932862,-9.681694,-5.825892,-7.402973,-3.744931]],[[5.099391,-8.347446,1.250963,-3.414916,5.976924,-7.029859,-4.519833,-8.547548,2.462996,4.805236,1.701952,8.403504,-7.703857,-8.231505,-5.491788],[0.017844,9.401726,-5.155340,-2.324760,-9.263006,0.236685,0.731403,-9.626060,6.194107,-2.940832,8.477789,-8.797251,1.917683,-8.866988,8.690486],[-9.037694,-6.702929,-9.125369,-4.010203,8.897163,6.013480,8.899378,7.283472,-0.248896,2.154848,1.863145,-6.422454,4.213644,-9.430263,-3.831429],[7.272905,6.163173,-3.746035,-2.164569,-0.609170,9.522480,-7.617629,-6.706462,-3.925250,4.085172,-2.438108,-3.509955,-6.568901,-0.330365,3.078677],[-1.132782,-9.648795,4.230490,4.366734,2.183480,6.440621,3.264563,-7.523668,7.542274,-0.895841,-8.328086,-8.899725,-4.025434,2.577154,0.750535],[0.164036,9.451781,7.464721,-7.552644,-9.340385,-3.579995,-0.051034,8.699328,-0.634351,-8.409984,3.201733,4.211478,4.040303,-0.464768,-8.433562],[-1.770560,3.081473,6.111250,-5.705488,-9.655658,-6.286140,-8.970939,-3.959483,0.647339,2.616927,-1.364138,-9.093064,-3.946615,7.373007,-3.166517],[-1.284783,1.745814,-1.037082,4.371594,-4.258955,6.535409,-3.375781,0.834173,-0.773051,1.614847,-2.329511,-3.465385,9.091851,8.413038,-3.073032],[2.544397,-7.347670,-0.309944,6.217151,5.051743,5.685414,-2.360148,-3.008595,9.904261,-6.339031,-8.170949,-2.168189,-5.905783,0.834522,-2.700516],[3.870977,0.427516,-1.989170,8.053229,1.273525,5.614354,1.516000,-2.269555,5.580159,-9.612980,0.696064,8.303156,-7.984005,1.897661,0.168601],[8.728844,4.728675,-2.168264,-0.342791,-2.980241,-2.910899,4.723879,2.190257,9.070940,2.174016,6.187421,1.397085,-9.136660,-5.127571,1.537644]],[[3.956946,-6.353284,4.150866,-4.846393,-5.334244,2.586994,-2.989735,3.693893,3.023535,-7.019526,-9.540675,4.028195,-0.513276,2.086983,1.743822],[-7.916527,6.919241,-6.619606,8.064912,3.121463,7.852275,-0.360678,2.078302,8.851814,5.263221,2.652201,2.776522,7.087068,-4.801175,-0.690808],[0.231644,-1.114365,-5.545834,-4.752898,1.189014,8.254366,-0.926077,-0.138713,9.729198,-8.497327,4.597098,2.272939,-8.067565,2.000259,8.876589],[7.502578,-2.082722,-9.133748,-8.594525,5.984188,-4.900056,-0.280011,-9.827964,-1.305547,-6.674292,-1.219092,-0.455072,8.127199,-1.089075,5.648804],[-1.432763,9.599867,-0.660931,1.743092,-4.724496,-0.308544,-1.443733,5.895398,3.158874,-7.974332,1.776722,0.697085,-2.248831,-1.451236,3.752943],[3.222448,-3.621444,0.774083,-0.300664,0.128294,0.132267,7.537072,-3.618142,-9.505117,-1.458950,-0.302598,-4.736873,3.899731,-3.315116,5.186871],[0.554966,4.504490,2.753070,-2.504809,-9.877499,-7.049866,5.445085,1.605561,5.905851,2.919360,-6.977209,8.154640,3.178424,-5.872357,-7.119532],[-9.571391,-9.955580,-8.739765,-3.643393,4.746327,-9.215303,-7.310986,9.008570,-8.960082,7.768727,-7.355495,3.413837,-9.829172,-2.669105,-0.512247],[4.418027,-2.137001,-7.540683,3.034057,8.105675,3.784200,6.370869,7.647212,1.629383,8.468875,1.951112,2.123052,8.312053,7.505730,-0.939644],[-0.896243,-8.205869,8.980958,6.310168,3.452776,5.817324,2.331642,-5.226243,1.489525,-1.297644,6.468321,-6.679532,-6.290895,-6.078333,6.488543],[6.423134,-7.020592,-3.049901,-6.473679,1.304697,-8.957158,5.663074,2.749960,-9.998928,9.543735,1.166745,-1.021970,5.308369,3.868894,-2.950009]],[[-4.840975,-4.190727,-0.469129,-3.191340,2.273145,-7.843211,-7.295632,1.011517,-3.166048,-8.961440,-5.648451,-4.391914,8.340311,1.395750,3.839523],[1.458930,6.682905,6.015923,-4.470515,-1.706448,1.552969,7.452979,-3.340626,6.689859,-7.137105,1.275411,2.763434,2.715917,8.668471,6.810218],[6.513197,6.319412,-2.402556,-1.028592,-7.653278,-3.482006,2.130839,-3.623005,-3.551461,-0.620642,7.662910,8.604141,0.528649,-2.899454,7.310371],[-0.755538,-9.404876,5.768176,-0.919716,-9.508752,1.552804,-8.001511,-0.977597,-2.115759,-7.959609,-8.282310,-6.267301,-6.608097,-7.193361,5.940189],[-9.367021,-4.719816,2.066777,7.754799,5.388589,-7.961898,2.373623,-7.825840,3.453028,-0.610673,4.691743,-1.863519,7.193734,-4.548762,9.183419],[5.583404,0.227827,-2.174711,-2.965806,-4.879272,8.710411,-8.305464,3.010404,1.063808,8.190312,-3.906562,-2.385985,3.588604,0.554034,8.273168],[2.946247,-7.746823,9.946068,9.222786,-0.765975,4.824159,-0.861230,-6.619170,-4.943894,6.909201,-2.137066,7.204081,-6.649292,-6.274030,-7.569697],[-5.770862,-5.665932,-4.449473,2.684916,9.547303,6.861280,-1.398465,-8.591328,9.722691,-9.055207,9.953126,-9.286551,0.494728,3.377424,-8.721136],[9.100588,5.112551,0.095273,6.763200,0.145209,-7.390381,-3.858545,-1.178403,-9.815137,1.862015,-0.298149,1.447246,9.648827,2.476167,-9.057366],[-8.110501,-1.286063,0.399192,8.511243,9.774739,-3.708436,3.617114,-8.276545,3.354411,3.341566,6.803774,7.989091,-0.731211,8.556323,1.946602],[9.628201,2.325505,1.370489,6.915311,-8.485608,5.971797,9.015647,7.907869,0.536891,-1.225087,8.155474,-1.079030,-9.862756,-8.154800,0.253843]],[[5.489468,3.251202,-0.401434,9.514248,-1.661809,-0.952377,-1.822272,-4.383018,0.149023,4.461717,1.982593,3.524418,9.718349,-4.251418,5.473597],[-7.214538,4.541577,-1.816680,-8.399392,5.620577,1.065004,5.925012,4.001637,2.741859,3.830870,-8.813716,0.755253,-7.713384,0.209006,-7.471239],[-8.380427,1.308100,8.045167,-9.041901,-9.184090,-3.921492,2.911795,2.303775,3.062598,-4.893885,5.438889,5.736947,-6.024958,-1.091975,5.772780],[7.468395,5.977690,3.234629,-8.553827,-4.851274,3.052440,-3.494459,-0.772826,-0.290998,-9.822753,-0.597243,3.142183,-8.515006,-9.737381,-3.604647],[-5.533706,1.360849,-9.823657,-4.853222,-5.437655,3.725507,3.567605,8.463450,-3.555048,8.053983,-3.481705,-0.101464,-1.180037,1.750508,4.059770],[-4.550159,4.942850,7.754299,-9.779433,-8.911064,2.043764,-1.798017,6.182565,-7.307685,9.406281,-3.253715,-2.134544,-2.288102,-7.445477,4.381590],[2.443099,2.974965,0.438997,-0.416102,-3.375498,6.102908,3.092981,-2.801429,4.674149,-4.527348,-1.540660,-8.782902,3.063239,1.741797,-3.272250],[-5.946006,-7.820220,1.621478,-7.952785,6.834880,-1.994448,-2.649359,2.431927,7.036898,-7.621860,6.063043,-3.204886,1.387812,-7.175578,2.924239],[0.656538,-3.423094,2.501506,1.561733,-8.846520,-4.777955,4.601277,-5.360344,4.472083,2.401030,2.678310,4.049631,-0.256981,8.823503,3.561269],[-7.010779,-3.818935,1.100109,-1.199503,-8.564474,3.099947,8.799098,8.355140,2.820675,5.896611,-4.403920,-6.140053,3.244479,-3.981946,8.426659],[0.346858,-2.598524,1.696623,-2.015246,1.951824,-9.049208,7.334895,8.602257,0.361540,-4.235613,-4.667080,2.625935,-0.130216,4.482544,0.777861]],[[-0.408028,-3.368468,4.924018,-4.609799,9.969221,-4.275833,2.040766,-4.980733,-7.432492,2.550101,-0.306316,-2.737278,-0.071198,-7.143476,0.156088],[6.168774,9.919851,5.044574,8.034572,-5.047571,5.676000,-3.525241,-2.139105,1.731697,-8.867069,5.283648,-3.657815,-5.941756,-3.226290,7.160107],[-2.926798,-0.910450,-7.747099,-9.548703,3.936029,0.351585,0.483276,6.417311,-8.223147,1.642073,-4.215786,3.140740,-3.975426,7.445187,1.539288],[-7.425125,5.038158,5.378883,-0.903856,4.842796,-3.924801,-5.307445,-1.127420,2.702458,9.180408,0.562571,-9.200983,-2.417082,-6.456584,2.030972],[-0.552499,-3.839374,-3.147478,-9.048119,5.000541,1.403848,-0.114521,-7.436772,8.919233,3.081791,-4.906663,-9.231562,6.825480,6.620996,5.535723],[0.785065,-4.796103,9.270769,0.907893,-7.927868,-1.388155,-4.026696,1.810045,5.496616,7.518605,9.285512,-6.326480,-9.987109,8.750182,2.335301],[-5.502895,-2.713828,-3.605193,-6.626029,7.832507,5.448641,-6.632951,-6.680028,-6.349997,-8.465237,-6.427687,4.821184,-7.695222,9.469420,1.881761],[-5.582636,2.468623,-4.079399,-9.708872,-0.591511,4.753761,7.323598,4.747445,-3.482342,-3.413210,3.493145,-0.608786,4.742037,-2.896850,-7.841003],[7.855957,-6.251177,-9.346643,7.475833,3.731630,-0.131450,9.932531,-7.802659,-3.632159,-8.176296,2.796557,8.577087,-5.279887,-1.622258,1.931686],[-5.980215,0.930485,-0.573990,1.646323,6.653244,3.423805,-7.756454,5.426506,2.903925,3.515933,-8.495947,-1.329391,-7.886349,-7.070999,0.626051],[-1.755039,1.886037,-3.619649,5.702021,0.205019,-5.088100,-1.768704,8.046687,4.486851,4.507838,-1.116430,-3.193527,-0.969030,7.551255,2.461945]]], dtype = "float32")#candidate|316|(13, 11, 15)|const|float32
bop_317 = relay.multiply(uop_314.astype('uint16'), relay.reshape(const_316.astype('uint16'), relay.shape_of(uop_314))) # shape=(13, 11, 15)
bop_320 = relay.floor_divide(bop_317.astype('float32'), relay.reshape(bop_300.astype('float32'), relay.shape_of(bop_317))) # shape=(13, 11, 15)
uop_323 = relay.sqrt(bop_272.astype('float32')) # shape=(13, 11, 15)
uop_325 = relay.acos(bop_243.astype('float64')) # shape=(13, 11, 15)
bop_327 = relay.less_equal(uop_314.astype('bool'), relay.reshape(bop_240.astype('bool'), relay.shape_of(uop_314))) # shape=(13, 11, 15)
bop_330 = relay.mod(uop_323.astype('float32'), relay.reshape(uop_295.astype('float32'), relay.shape_of(uop_323))) # shape=(13, 11, 15)
bop_333 = relay.greater_equal(uop_278.astype('bool'), relay.reshape(var_248.astype('bool'), relay.shape_of(uop_278))) # shape=(13, 11, 15)
output = relay.Tuple([bop_249,bop_256,bop_266,bop_280,uop_283,uop_293,call_297,var_298,bop_303,bop_306,bop_309,uop_312,bop_320,uop_325,bop_327,bop_330,bop_333,])
output2 = relay.Tuple([bop_249,bop_256,bop_266,bop_280,uop_283,uop_293,call_299,var_298,bop_303,bop_306,bop_309,uop_312,bop_320,uop_325,bop_327,bop_330,bop_333,])
F = relay.Function([var_210,var_225,var_236,var_248,var_298,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_210,var_225,var_236,var_248,var_298,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_210= np.arraydtype='float64')
module1.set_input('var_210', input_210)
input_225= np.arraydtype='float64')
module1.set_input('var_225', input_225)
input_236= np.array([[[False,False,False,False,False,False,True,True,False,False,True,True,True,True,False],[False,False,False,False,False,False,True,True,True,True,False,False,True,True,True],[True,True,True,True,False,True,True,True,True,True,False,False,False,True,True],[True,True,True,True,True,False,False,False,True,True,False,True,True,True,False],[False,False,True,True,False,True,False,True,True,True,True,True,True,True,False],[False,False,True,False,False,True,False,False,True,True,True,True,False,False,False],[False,False,True,True,True,True,True,True,False,False,True,True,True,False,True],[True,True,True,False,True,True,True,True,True,True,False,False,False,False,False],[True,False,False,False,True,True,True,False,True,True,False,False,True,True,False],[False,False,True,True,True,False,True,False,True,False,True,True,True,False,True],[True,True,True,False,True,True,True,False,True,False,True,False,False,False,True]],[[True,False,False,False,False,True,True,True,True,False,True,True,False,False,True],[True,False,False,True,False,True,False,True,True,True,False,False,True,False,True],[True,True,True,True,False,True,False,True,False,True,True,False,False,True,False],[True,True,False,True,False,False,False,False,False,True,True,False,False,True,False],[True,False,False,False,True,False,False,True,True,False,False,False,False,True,False],[True,False,True,True,False,True,False,False,True,False,False,False,False,False,True],[False,True,True,False,True,False,False,True,True,True,False,False,False,False,True],[False,True,True,True,True,True,False,True,False,True,True,False,True,True,False],[True,True,True,False,False,False,True,False,False,False,False,False,False,False,False],[True,False,False,True,True,True,False,True,False,False,False,True,False,True,False],[False,False,True,True,True,True,False,False,False,False,False,False,False,True,False]],[[False,False,False,False,True,True,True,False,False,True,False,False,False,True,True],[False,True,False,False,True,True,True,True,True,True,True,True,True,True,False],[True,True,True,True,False,False,False,True,False,False,True,True,False,True,False],[False,False,True,False,False,False,True,True,True,False,True,False,True,False,True],[False,False,True,True,True,True,True,False,False,False,False,True,True,True,True],[True,True,True,False,True,True,True,False,False,False,False,True,True,True,False],[False,True,False,True,False,True,False,False,True,True,False,False,False,True,True],[True,False,False,False,False,True,True,True,True,False,False,True,True,True,False],[True,True,False,True,True,False,True,True,False,False,False,False,False,True,True],[True,False,True,True,True,False,False,False,True,True,False,True,False,False,False],[True,True,False,True,True,True,True,False,False,False,False,True,False,True,False]],[[False,False,False,True,False,True,True,False,False,True,False,False,False,False,False],[True,True,False,True,False,True,False,False,True,False,False,True,True,False,False],[True,False,True,False,False,True,True,True,True,True,False,True,False,True,False],[False,False,True,False,True,False,True,True,False,False,True,False,False,True,False],[False,False,True,True,False,True,False,False,False,False,True,True,True,True,False],[True,False,False,True,False,True,True,False,False,True,False,True,True,False,False],[True,True,True,False,False,True,True,True,True,False,True,True,True,False,False],[True,False,False,True,True,True,False,False,True,False,True,True,True,False,False],[False,True,True,True,False,True,False,True,False,False,True,True,True,False,False],[True,True,False,False,False,True,True,False,True,False,False,False,True,False,False],[True,False,True,False,True,True,False,True,True,False,True,False,False,False,True]],[[False,False,False,False,False,True,True,True,True,False,True,False,False,False,False],[False,False,False,True,False,True,True,False,False,False,True,False,False,True,False],[True,True,False,False,True,False,True,False,True,False,False,False,False,False,True],[False,False,True,False,True,True,True,False,False,False,False,True,False,True,False],[False,False,True,True,False,False,True,True,False,True,False,False,True,False,False],[False,True,False,True,True,True,True,True,False,True,True,False,False,True,True],[False,True,False,True,False,False,True,False,False,True,True,False,True,False,False],[True,True,True,True,False,True,False,True,False,False,False,True,True,False,False],[False,False,True,False,True,False,True,False,False,True,True,True,True,False,True],[True,True,False,True,False,True,False,True,False,False,True,True,True,False,True],[True,True,False,False,True,True,False,False,False,False,True,True,True,False,False]],[[True,False,True,True,True,False,False,True,True,True,True,False,False,False,True],[True,True,False,True,True,True,True,False,False,True,False,True,False,False,False],[False,True,False,False,False,True,False,True,False,True,False,True,True,False,True],[False,True,False,False,True,True,False,False,True,False,True,False,True,True,False],[True,False,True,True,False,True,False,False,False,False,True,False,True,False,False],[False,True,False,False,True,True,False,True,True,True,True,False,True,True,True],[True,False,True,False,False,True,False,False,True,False,True,False,True,False,True],[True,True,False,True,True,True,False,True,True,True,True,False,True,False,True],[True,False,False,False,False,False,False,False,False,True,True,True,False,False,False],[True,True,True,True,True,False,False,True,False,True,True,True,False,False,True],[True,True,True,True,False,False,True,False,False,False,True,True,True,True,True]],[[True,False,True,False,True,False,True,False,True,True,True,False,False,True,True],[True,True,False,True,False,False,True,False,False,True,False,False,True,True,True],[False,True,False,True,True,True,True,False,True,True,True,True,True,True,False],[False,True,True,True,False,False,True,True,False,False,False,False,False,True,True],[True,False,False,True,True,False,True,True,False,False,False,False,True,True,True],[False,False,False,True,True,False,True,False,True,True,False,False,True,False,True],[True,False,True,True,True,True,True,False,False,False,True,False,False,False,True],[True,False,True,False,False,False,False,True,True,False,True,True,False,False,False],[True,True,False,True,True,True,False,False,False,False,False,True,False,False,True],[True,False,False,True,False,False,True,False,True,False,False,False,False,False,True],[False,False,False,False,True,True,True,True,False,True,True,False,False,True,True]],[[False,False,True,False,True,True,False,True,True,True,True,False,False,True,False],[True,True,False,True,True,True,True,True,False,True,False,True,True,True,False],[False,True,True,True,True,False,False,True,True,False,False,True,False,False,False],[False,True,False,True,True,True,False,False,False,True,True,True,False,False,False],[True,True,True,False,False,False,False,True,True,False,True,True,True,True,False],[True,True,True,True,False,False,True,True,False,True,False,True,False,False,False],[False,True,True,True,True,True,True,False,False,False,False,True,False,True,False],[False,False,False,True,False,False,False,True,True,False,False,True,False,True,False],[False,True,True,True,True,True,False,False,True,True,True,True,False,True,False],[True,True,False,True,False,False,True,False,True,True,True,False,False,True,True],[False,True,False,False,False,True,True,False,False,False,True,True,True,False,False]],[[True,True,True,True,False,True,False,True,False,True,False,True,True,True,False],[False,True,True,True,True,True,False,False,True,False,False,True,True,True,True],[True,False,False,False,False,False,False,False,True,False,True,False,True,True,True],[True,True,False,False,False,False,True,True,False,False,True,True,True,True,False],[False,False,True,False,True,True,False,True,True,False,True,False,False,False,True],[True,True,True,True,True,True,True,False,False,False,False,False,True,False,True],[True,False,True,False,True,False,True,True,True,False,True,False,True,True,False],[False,False,True,True,False,False,True,True,False,True,True,True,True,False,True],[False,False,True,False,False,False,False,False,False,False,False,True,False,True,True],[True,False,True,False,True,True,True,False,True,True,False,False,False,True,True],[True,False,True,True,False,True,True,False,True,True,False,False,True,True,True]],[[False,False,True,True,False,True,True,True,True,False,True,True,False,True,True],[True,True,True,False,False,True,False,True,True,True,True,False,True,False,True],[True,False,True,False,True,True,True,False,True,True,False,False,False,True,True],[True,False,False,False,True,False,True,True,False,True,False,True,True,False,True],[False,True,True,True,True,False,False,True,True,True,False,True,True,False,False],[True,False,True,True,False,False,False,False,True,False,True,True,True,False,True],[False,False,False,True,True,False,True,True,True,False,True,True,False,False,True],[False,True,True,True,True,False,True,True,False,False,True,True,False,False,True],[True,False,True,False,True,False,False,False,True,True,True,False,False,True,True],[True,True,False,True,True,True,True,False,False,True,True,True,False,True,True],[True,False,True,False,False,False,False,False,True,True,True,False,False,True,True]],[[True,True,False,True,False,True,True,True,False,True,False,True,True,False,False],[False,True,False,False,True,True,False,True,True,True,False,True,True,False,False],[False,True,True,True,True,True,False,False,False,False,True,False,True,False,False],[True,True,True,False,True,False,True,True,True,False,True,False,True,False,False],[False,True,False,True,False,True,True,False,True,True,True,False,False,False,True],[False,False,False,False,False,True,False,True,False,False,True,True,False,True,False],[False,True,True,False,False,True,True,True,True,False,True,False,True,True,True],[False,True,True,False,True,True,True,False,False,True,False,True,True,False,False],[True,False,True,False,True,False,True,False,True,False,True,False,True,False,True],[False,False,True,True,False,False,False,True,False,False,False,False,True,True,False],[False,False,True,True,False,False,True,True,False,True,False,True,True,True,True]],[[True,True,True,False,False,True,False,False,False,True,False,True,True,True,False],[False,True,True,True,True,True,True,False,True,True,True,True,True,True,False],[False,False,True,False,False,True,True,False,True,False,True,True,True,True,False],[True,True,False,False,False,True,False,True,True,True,False,True,False,True,False],[False,False,False,True,False,False,False,True,False,True,True,False,False,False,True],[False,False,False,False,False,False,True,False,True,True,True,True,False,True,True],[False,True,True,False,False,True,False,False,False,False,True,False,False,True,False],[True,False,False,True,False,True,True,False,True,False,True,True,False,True,False],[True,True,False,False,True,False,True,True,True,True,True,False,True,False,False],[False,True,False,False,True,False,True,False,False,True,True,True,False,True,False],[False,False,True,False,False,False,True,True,True,False,False,True,False,False,True]],[[False,False,False,False,False,True,True,False,False,True,True,True,True,True,False],[True,True,False,True,False,False,True,True,True,True,True,True,False,True,True],[True,False,True,True,False,False,True,True,False,True,True,True,False,False,False],[False,True,True,False,False,True,False,False,False,True,True,True,False,True,True],[False,False,True,True,True,True,True,False,True,True,True,False,False,True,False],[False,True,True,False,True,False,True,True,False,False,False,True,True,True,False],[False,True,False,True,False,True,True,False,False,False,True,True,False,False,True],[False,False,False,True,False,False,True,False,True,True,False,False,False,True,True],[False,False,False,False,True,False,False,False,False,False,False,False,True,False,False],[False,False,False,True,False,True,True,True,True,False,True,True,False,True,False],[True,False,False,True,False,False,False,False,False,False,False,True,False,False,True]]], dtype='bool')
module1.set_input('var_236', input_236)
input_248= np.array([[[6.580542,1.620104,3.210357,-6.020478,-2.090246,7.305384,8.454330,6.681568,-6.411469,-7.281606,-9.335476,9.549162,8.534688,-5.608523,3.987568],[1.636869,-2.966909,0.726760,-6.762701,0.081716,2.562767,-0.460739,4.065090,-2.871190,-4.441840,-5.126322,-0.618367,4.607295,-9.411119,-4.515093],[7.662782,7.296223,6.962037,2.666273,-1.916812,-6.417490,2.114701,-4.906345,3.584339,-4.566534,7.868150,-7.312325,5.527426,6.889573,7.507957],[9.597393,9.351765,-3.322473,7.175549,-2.701270,1.700821,7.769173,1.230157,8.010905,-1.792714,1.438183,-6.094306,-6.126156,5.376483,-5.189731],[8.929556,3.241959,-6.916417,9.313149,4.257427,1.678859,6.035875,8.119606,-4.790436,7.659459,2.377692,-8.282692,-8.031715,1.793667,-3.612492],[-0.682552,4.543200,-8.105083,-7.355371,3.622114,-9.020578,-4.772525,2.513629,-8.745204,-1.567624,8.410149,-7.094528,-2.836589,-8.194477,0.237783],[3.576069,-6.110233,3.301812,-6.537639,8.411428,-9.395595,-8.683578,2.882524,-2.902202,1.310403,4.398576,-4.358176,-4.432673,-3.326532,-2.871448],[6.498728,9.288964,-3.937657,-2.464897,-6.054438,-5.377162,1.844593,4.216894,9.025139,0.321553,2.155452,4.198768,-7.463522,-9.760058,-6.559498],[-7.801106,-6.137673,8.508676,7.538071,5.796185,7.967443,-6.955868,-9.638069,8.441894,5.264027,-4.496853,5.885536,9.916195,2.874602,-4.916550],[-6.119671,7.332590,0.206048,-1.194614,-2.899301,-5.214564,0.300357,3.694760,3.365895,4.497686,3.026335,4.379636,3.059830,-4.896370,-8.501365],[-1.356598,-4.354890,0.930401,2.179089,-6.011886,1.516228,7.307258,9.422138,-6.088882,-6.157128,6.778432,8.008627,-2.494789,6.448072,2.144445]],[[-0.529716,7.749540,7.482414,-1.724618,-0.818141,-2.889193,0.483816,-5.371466,-4.586439,8.229449,0.615711,-3.192139,0.851731,7.100218,-6.398374],[-5.134177,6.337167,0.044235,-8.818462,3.998488,-3.141194,-4.265797,2.640432,-5.349318,7.327079,-2.694137,-3.049382,1.396927,-8.596124,8.813696],[6.092546,0.204912,0.380202,3.243370,-8.192389,-6.647112,2.558947,-1.300565,8.533244,-0.233445,7.154368,4.622155,-9.713784,7.124908,-8.682135],[7.064528,5.738423,-8.164536,9.341979,-2.852171,-1.012689,-7.533335,-3.809056,-3.620976,1.424129,-0.223053,-5.213989,-8.972348,5.980732,7.733420],[-9.020984,6.031969,0.371073,-6.901270,-4.799275,-2.271326,0.952926,-7.197438,4.241498,-9.990848,6.850776,4.690139,-4.854925,-3.022228,-1.153367],[1.334914,-5.959694,-6.845873,-4.765407,-5.612085,6.189375,3.327221,5.883327,-9.548027,8.243823,9.279502,-5.694243,-6.454624,5.938024,-2.213359],[-5.440920,-6.425369,-5.513171,-1.447392,-8.765500,7.620537,5.701371,-8.166416,-3.136697,0.729380,2.647668,5.022257,-0.003590,6.559791,-0.084824],[8.704055,2.747239,-3.019008,-5.319184,0.094061,8.398914,-3.359036,8.119071,-5.128701,-0.840296,8.390525,-6.830146,8.525905,-4.911867,-3.970416],[-6.343792,1.054536,-4.427516,6.442899,-1.662750,9.696823,-2.452916,-1.662963,-7.022761,6.324576,7.634377,5.822285,1.888618,-5.121134,3.855987],[2.336614,-4.235841,0.450829,-7.513074,3.609713,2.672288,-6.296343,-5.762680,-4.558403,8.237744,0.186844,-2.677248,4.591457,6.178219,-2.252601],[-5.704946,-4.394718,-4.776515,3.335642,7.883546,-5.905283,4.203935,-6.167563,2.452143,7.407821,-8.059828,7.725997,7.511838,4.376313,-9.624406]],[[4.543692,8.100167,3.940330,6.145627,-4.725062,4.678088,-5.533179,7.433192,6.403829,9.207017,-6.085396,9.201553,-8.082070,-1.438336,-9.126969],[5.129892,7.874430,0.556478,3.964927,-7.180471,9.321915,-0.831433,-5.784983,-5.033711,-1.641731,-1.663202,-9.916888,6.686169,-1.874077,-5.089372],[-4.724390,-1.685448,-8.202365,2.443549,5.563962,5.458882,5.658232,-6.665198,3.137991,1.373459,-9.043033,-7.499034,-2.504404,7.615417,3.921580],[3.027238,-7.272446,-7.606524,5.461566,-0.881972,8.078324,-9.971301,8.262830,-6.339588,0.334793,-7.562080,-0.208719,-7.539323,-7.131779,2.331331],[9.650638,-7.306529,2.962153,-5.714145,-4.320751,5.933321,-3.838187,-4.751410,-6.956297,5.000050,6.249546,2.494935,-0.598528,-6.652319,0.557980],[2.502108,-0.881795,-4.674332,-9.305865,-0.098827,1.273377,-7.944549,7.928422,4.432302,9.242956,-4.568096,0.046412,-5.297342,6.131748,-9.071213],[9.900637,-1.636043,6.008098,4.946391,0.319833,-3.592974,9.242284,3.465889,-5.528698,-0.253276,3.576684,-9.408186,-1.261649,-9.278950,4.740259],[-8.160808,-1.214140,-0.237793,-9.032545,6.899055,6.916722,-5.569405,-9.315081,-4.092540,5.530558,5.901039,5.297122,3.248347,-5.362120,3.134672],[-4.683577,-6.993957,-3.678366,8.050852,-4.698780,8.281620,-0.781448,-8.294237,0.191307,8.042449,6.202333,3.766678,-9.725888,-0.548827,-9.626533],[-5.526182,-7.688856,-9.356459,8.411151,2.870443,-1.690839,-3.628480,-4.816927,-0.175205,2.442463,-6.099648,-0.659653,3.394225,-0.715811,8.234597],[6.554003,-4.729935,0.139590,7.433321,-0.142364,-0.931517,1.011999,1.688463,-6.212966,9.907251,-2.753184,-6.262603,8.997893,9.273722,-9.710762]],[[-1.609108,6.293988,6.647675,6.078626,7.273740,4.017745,2.065280,-3.159388,-7.939987,-9.867209,-9.227040,-3.577993,8.727459,-7.507369,0.218837],[0.920599,9.178862,-4.247361,3.153926,0.817874,8.565612,0.391438,8.370715,-3.156019,-7.495687,2.910803,6.593362,8.010686,9.662415,2.974062],[-9.232823,-7.394708,3.533120,-5.760232,7.713714,-6.536057,-1.278696,8.071162,6.737661,-4.109985,-5.650956,0.156724,7.337564,-4.806013,-1.005074],[2.000244,-8.294797,-6.504197,6.177679,2.724663,-5.058365,6.655506,1.412549,-0.103663,-0.722248,-8.570458,-3.133937,-5.896961,-6.594603,-7.758483],[6.520478,-2.361926,-6.587601,7.705452,5.296393,-1.919102,-7.356096,3.386965,-1.240426,2.361127,-2.042112,6.247898,3.574586,-8.176154,-4.352489],[-7.593750,-9.221440,3.895082,-7.810027,-0.653625,5.726332,9.540833,9.129247,1.376747,2.187464,-3.184191,-7.667025,-3.141681,-0.627464,-8.286157],[-1.254433,-1.018062,1.606549,7.863698,-3.746968,6.012108,-2.922162,-1.136693,7.676322,4.604427,-4.589337,-4.868780,0.443072,-0.884804,1.996433],[-5.899838,6.036046,9.381245,-6.653662,-0.926279,-0.432921,9.027620,5.888905,-9.210675,3.378108,2.308264,-9.905494,2.455312,-2.183568,5.721607],[-3.858999,7.202745,-0.273491,-6.347055,9.016485,4.004479,-1.712655,-5.940118,-0.835647,9.631604,-8.778929,6.402481,-9.602181,-8.541150,-8.696231],[1.630532,0.272498,9.041258,4.172907,0.275217,-5.254953,-0.895311,5.015413,-0.875870,-4.159115,5.085448,-6.229436,7.017682,5.329354,-5.228355],[5.404211,-0.319053,-9.036966,-3.638128,1.062191,3.107424,-3.534336,4.224912,-8.652082,-3.290788,7.428185,-5.635255,-6.298842,-7.642855,7.925379]],[[-0.421218,-3.760555,-0.765574,-4.013911,-5.075732,-6.465728,6.295002,-0.172161,-1.576570,0.822175,3.869458,-6.509581,-1.111926,8.690626,3.479818],[2.173374,6.841370,-0.464057,0.198472,-9.717910,4.402622,6.889469,6.834177,2.180982,-6.815339,-4.923370,5.614005,9.223145,-5.558760,-2.107809],[-9.111619,1.960079,-8.789905,2.397919,-2.191818,1.680093,-5.202997,-5.872481,-2.523746,1.130842,-1.911204,-1.152293,-6.542613,-0.152504,-6.003558],[-2.996025,-9.285952,-1.129132,-1.243404,-9.014712,3.171664,-5.700548,-3.467125,-3.766871,-0.132944,-2.712973,6.980002,-4.772211,-1.975922,-1.866930],[0.564697,9.706078,-8.569408,-9.100518,3.232610,4.638495,2.312679,-8.278156,7.868701,-8.944417,-7.091781,-0.959404,-1.035230,-5.834902,3.733535],[3.191363,5.246259,3.423222,7.562200,-6.356344,-6.370527,0.675466,8.752863,-0.683516,-6.092014,-8.500286,4.206690,4.948451,5.940405,-9.266745],[-3.913255,-0.971272,7.909443,-2.129389,2.452612,6.372894,-3.670089,8.800974,9.822800,-2.043383,6.604368,-8.312336,-2.407607,-0.383270,4.494221],[-9.798123,-1.031999,-8.862751,-3.102649,-3.125225,2.541239,-1.710570,4.649374,-4.351213,0.920928,-7.986702,5.572972,4.630929,-7.911206,-2.296038],[-8.580165,-8.484843,5.625980,-5.956776,4.533985,0.649276,0.827684,-8.979928,-2.427126,5.891530,-9.290413,-1.279693,-0.230350,1.330022,9.061162],[3.699574,-0.623356,-7.403117,-2.019211,-8.001644,-6.251962,-9.520284,4.898294,-0.820362,3.073371,5.391136,2.342604,-8.082239,2.757319,0.725927],[0.931826,-4.580568,-4.854508,3.899167,-4.802909,-6.019794,9.636598,-0.151281,8.760859,-9.352295,-3.437166,-2.078942,1.097647,4.909450,-9.208089]],[[6.352845,2.966982,-5.254377,1.223311,-9.672042,1.382387,-4.132679,-6.720343,4.489095,3.193067,-9.328525,1.510775,0.182607,3.205021,3.462188],[7.447705,8.047588,-2.771682,-5.030417,3.865013,6.632564,2.531649,-2.225954,-7.639724,-2.722107,7.085201,4.136837,6.668524,-4.013533,-0.830879],[3.915499,-4.901545,-4.891839,-4.934521,-5.697761,-6.779284,-3.554654,7.609201,8.619666,-9.862227,0.757520,-6.375945,-4.038660,-2.559902,0.682459],[-0.084424,-0.125479,9.063210,8.088135,-8.861812,-7.079849,-3.991810,-5.070695,8.710613,6.161025,0.527616,3.234372,-6.806711,-3.793590,-4.055848],[9.395986,-5.882065,-5.857892,-4.901862,5.082129,4.400560,2.242661,-4.925882,-1.999384,6.546403,8.167041,-3.948318,4.298851,-8.130091,3.853637],[6.925260,8.797054,6.558283,4.396111,3.062328,-3.440929,-2.125715,-0.714699,0.211300,-5.727469,8.313583,-4.663899,0.178914,-0.339221,5.074135],[-1.186058,-9.359231,-8.258476,8.856599,6.483204,-1.864158,-4.909177,-6.411377,7.206201,3.960066,-7.719240,1.592758,-7.183514,-5.883027,-8.903560],[3.591677,-8.208690,-2.810465,2.249421,8.186738,-1.097796,-8.554418,-6.945552,-6.492869,-6.032766,-6.839158,-4.376706,8.981770,-9.990608,8.184822],[7.847217,4.643626,-3.079409,-2.286616,-7.795249,-8.113634,4.307790,9.887573,4.211138,1.972318,9.501245,8.858823,5.868730,-3.539080,-1.614164],[-3.115046,-9.319706,-5.544749,5.281802,-2.785978,-6.029257,3.546844,2.158827,5.120277,-1.368375,5.878247,-5.060061,0.964834,9.612329,8.986617],[5.498260,-5.712281,-8.314435,-4.056967,1.610006,6.148287,4.570887,-6.905860,1.738015,-9.845373,-0.675810,8.717017,-0.831984,6.278254,-8.059578]],[[1.165645,-2.783905,-9.333512,-1.620809,3.150505,8.057597,6.995131,8.629231,-5.773695,-7.270118,-9.952928,-3.338507,7.451321,-7.416058,-0.398022],[-6.997831,-8.372436,6.518235,7.437877,2.653427,-2.327302,8.860372,8.109626,9.763589,4.158671,-9.958221,-7.948497,7.645446,4.798617,-1.028738],[-3.976855,-1.099003,-8.039038,9.801685,0.582374,-4.935042,-2.947250,-1.260158,-3.925373,6.344926,8.082339,5.137250,-5.635151,2.907709,-2.853663],[5.499736,-9.946552,0.802878,-1.850845,-5.858117,1.115773,0.924701,-0.631299,2.096229,1.966239,-8.135601,1.914938,-1.789892,-7.449969,2.016386],[-0.874936,-7.327919,-3.944158,2.607937,-3.701710,3.091807,-0.662881,7.185592,-2.465498,9.086563,3.842420,-2.685527,7.785773,-1.766942,-1.950147],[-1.464274,9.505773,-6.022731,-0.921469,-9.407155,3.174030,-6.444613,-6.983665,9.316803,-7.551800,-0.108796,-2.445972,-1.864098,1.201902,-9.685874],[0.838247,-4.022727,0.464522,-8.761072,-1.595841,-2.410838,-4.361931,6.939371,3.808103,0.864396,0.805044,9.705438,-2.529630,6.209978,1.395780],[-2.713899,-7.152727,4.384815,0.630613,6.341171,-5.492208,9.742658,-7.352461,8.092300,3.265602,-3.312638,-7.794718,4.453497,7.145878,-3.178023],[-6.121574,3.114358,-9.330247,-2.958144,4.077416,7.768932,9.239176,-8.690511,-0.196214,4.082385,5.569941,-6.349610,-8.336201,-3.141148,8.976044],[-5.526570,3.116044,-7.893959,-7.293307,6.503852,8.475544,7.911159,-6.600327,-1.329948,9.663604,-6.107230,6.269156,-3.907758,-3.545988,-8.931466],[5.317287,5.728328,-7.591383,-7.037480,-5.232710,-9.601785,2.241186,9.973809,-9.896345,-9.401228,0.417785,-0.395635,4.668726,-1.251661,6.226293]],[[9.926844,9.826180,-2.921943,5.508548,-7.371688,-2.070675,2.413556,-3.959622,6.209396,-7.491727,-7.140665,4.372542,6.315223,8.861455,-9.767207],[-0.939452,-4.661220,4.856518,4.246962,0.436901,-4.354696,2.924773,7.507832,-4.740648,-8.608777,-4.297163,8.655044,0.335948,2.863379,-4.569063],[8.062527,2.564382,0.296486,-5.443207,5.032200,-5.159129,-5.801806,6.329780,-7.230666,-7.519363,5.241991,0.154375,-0.339620,9.726624,-3.809467],[-1.271090,-6.306059,6.581474,-8.031462,-6.340478,8.337554,7.515349,-7.754210,-2.782262,9.688483,1.670956,8.245349,5.062429,9.555324,0.562592],[-7.823864,-4.286410,-9.113396,-9.856997,1.796375,-0.229140,-7.527898,-3.653493,8.872429,9.470454,-3.252556,7.365073,1.881872,3.906582,8.662385],[-7.697573,-8.069143,-8.470260,-7.038416,8.681257,7.229575,6.907655,-9.283803,2.159888,-8.081936,-9.833669,3.432462,-7.627880,-0.484839,-6.745822],[2.574539,8.264740,7.938086,-3.131754,4.536008,6.886626,1.984641,-8.097197,6.301664,3.438503,-8.921200,-5.892656,4.910593,-6.852758,-7.556724],[3.932667,-6.672384,-5.431739,-4.040573,1.397352,-8.770100,7.693337,6.293366,1.604198,2.044100,-8.369934,-9.464839,8.658142,-4.606789,3.154836],[-2.656763,-7.189295,-1.316936,-2.231434,4.115413,-9.604996,6.873697,2.178941,1.923209,1.013693,-9.807263,-4.916126,-9.019774,-1.442785,9.083385],[6.217321,9.019693,-4.401595,-7.286581,-9.528457,4.208531,-4.475105,-0.291157,1.845745,-2.245780,-3.484569,4.837990,-4.179726,6.875865,-3.497203],[-5.422933,-7.452889,6.982158,8.968965,-8.352763,5.091492,-8.463565,-1.240971,0.908538,-5.170550,-1.544252,-9.552965,8.588697,8.290911,-6.287746]],[[-5.005481,0.045138,-3.872962,1.025487,0.880282,2.605008,9.637578,-9.902984,9.327245,-9.289387,5.748211,-3.218770,-1.249858,-6.502926,-3.904330],[3.462941,-4.593129,-2.358427,6.641797,-6.988765,1.003980,4.554693,-0.058528,-6.207965,8.289553,7.314285,3.040959,1.231303,-9.326144,7.727901],[-1.829041,6.435251,1.804081,7.971405,3.759091,9.685067,7.623555,-5.171153,-2.309375,5.112618,7.242737,6.290991,2.660739,-3.562126,-3.204928],[-0.741634,-7.066134,4.653864,7.853447,-8.801261,7.828789,7.758129,-2.178823,-2.036319,-7.292699,-3.694666,-1.197452,-5.019625,-7.049689,6.213532],[-8.091890,5.958064,5.704870,0.036316,4.527420,-1.890020,3.431707,-4.004366,7.026986,8.380352,-3.356470,5.134340,2.326617,-9.734492,-0.956000],[-7.311703,-1.975713,0.600633,4.985440,-4.647244,-2.689942,3.521383,7.386325,6.846962,-6.403221,-4.290887,-9.180485,3.295424,-3.768752,-2.039789],[-4.725091,2.903830,-5.287822,-9.557183,1.271734,8.627151,8.667196,-1.860500,-3.222361,0.391433,-0.027863,4.786525,2.388512,-0.444821,8.544656],[-7.071280,5.062527,-6.052186,-0.601935,0.999299,6.410003,0.281504,8.433184,3.508566,8.145126,-6.628357,3.580059,6.832161,2.130627,-3.260438],[-4.387104,-6.581383,-5.597821,4.071279,2.388504,0.391237,2.269350,-5.035762,-4.578020,-7.584919,-6.362687,7.104163,3.413402,4.442354,-3.514787],[7.837061,-3.075000,-8.567964,-5.307905,-5.697660,4.631500,-3.124667,-5.700236,1.692709,6.307989,5.225562,0.213595,0.523199,4.030047,1.385714],[-2.758353,-7.597083,-7.146102,0.236991,-3.192908,-2.923186,1.116804,9.453446,3.295294,-0.486908,-3.653222,2.864693,-7.365594,-0.451335,8.912978]],[[7.185730,-0.235378,-6.719324,0.732661,2.715892,1.628200,8.899152,1.941118,7.760269,3.451549,0.332339,7.495222,2.419318,8.987274,1.921633],[1.525026,-3.058988,-9.157363,-0.258348,-6.159340,0.855214,-7.813900,0.041416,3.776943,-1.228816,-5.335126,5.186280,-5.532711,-5.082100,-6.373188],[-3.915200,-2.461983,-9.918967,-0.458435,-2.072929,-1.065706,-8.356377,-7.340544,-2.405122,-8.512983,8.933772,-5.183062,-5.289708,8.147912,-8.742893],[-5.314714,-9.662882,2.768573,4.334368,1.384386,5.179960,-6.945800,-4.519579,8.136487,-5.522720,-4.191024,-7.719849,-2.891815,4.359298,9.640713],[-9.533500,8.346303,4.047369,6.554547,-3.352844,-4.671847,-2.221339,2.840208,-6.236450,-3.342376,5.501574,-1.859314,9.280294,-9.824799,-5.523493],[5.606638,-2.570201,9.553073,6.386864,-6.323112,-6.600696,7.273320,9.975309,8.843478,1.012391,5.662829,-0.472780,0.288519,-8.540868,6.083286],[1.451073,8.503644,9.184961,3.876173,4.463088,-6.105379,2.059706,2.660474,-4.030549,-5.108795,-9.738423,-5.984020,6.675904,-8.802836,-7.258707],[-5.365134,-5.021374,3.682732,7.548213,5.142005,-0.169003,-6.712493,4.573300,4.912856,-6.019418,-9.786073,6.120230,-7.730401,-9.220141,-1.829487],[-4.846520,-4.539039,0.905533,-4.911509,3.392489,7.794196,7.386690,9.205120,9.344975,-2.735493,-0.506323,-2.889822,-2.116166,-1.501992,-8.033522],[8.511801,7.256613,3.753089,0.091630,4.883940,5.804605,-9.002439,-2.477881,-6.299754,-6.843813,-7.201522,5.792233,-5.685452,1.930070,-0.486059],[-8.155729,-4.495638,2.920247,-3.486592,2.302687,8.965008,-1.949857,8.661383,6.336252,1.245931,-1.712019,-5.447497,-6.971074,4.148369,2.440345]],[[5.537923,3.561117,-9.975180,-6.489935,6.808287,-7.722009,-7.264915,8.757406,-1.549722,1.357422,-7.286102,9.042278,5.180427,-6.874633,4.792258],[-4.966317,9.780763,-7.734253,4.996252,-9.575074,-4.041713,2.467287,3.141874,-0.875466,-2.844378,2.034683,2.468917,3.276024,6.402964,-9.335255],[-9.033659,9.951751,-4.367448,8.842938,-5.759045,7.095305,-8.209834,-3.605287,4.916445,9.269122,-5.928645,-4.466765,4.971185,4.373450,6.286311],[2.255521,-1.654565,8.923433,-1.339647,-1.295563,-0.923366,5.492732,4.245405,0.629226,-8.425139,-2.352958,8.923377,1.388949,-4.383019,3.910653],[-0.517872,6.567428,-8.068397,2.730336,0.689375,2.914544,8.481485,7.918421,-1.224477,4.014628,1.616290,-4.651431,7.372762,-7.911447,-1.880472],[9.897682,-2.451661,4.134552,-8.498663,-2.835120,3.061444,9.048163,-8.534708,3.608972,1.097892,-0.460416,-5.463787,-5.781934,-3.438245,7.225250],[-2.043484,2.400314,-8.075237,7.095289,4.311024,-3.111486,-9.203607,-1.741166,-1.335497,9.650995,-8.523978,8.874178,-7.742784,-9.025431,-5.449380],[3.510585,2.900875,2.286525,-8.506702,-4.851364,-4.998000,-8.545928,-1.784499,-2.300679,-9.366246,2.278518,7.206329,7.250032,-7.115797,-6.051011],[2.522108,3.295008,-5.984225,-4.920633,-3.779151,-3.231366,-9.292554,3.764250,7.568994,9.327303,2.513522,1.317646,3.888993,3.909932,-5.373492],[-5.444675,3.858985,-7.899388,9.589736,-4.036227,5.791647,-1.084172,8.151229,6.058773,7.005990,-2.940605,9.487268,0.511392,-6.888724,-2.374071],[-9.079597,4.170276,-3.179758,3.220019,-7.449510,2.121073,1.847945,7.990994,8.921309,1.675046,-9.180586,-0.042961,3.144022,-9.916840,-2.387270]],[[1.670671,-5.005404,-9.369951,-4.130707,-2.365106,-3.595993,1.358013,0.959514,-3.148828,4.132638,-3.179980,-3.725873,7.449201,-7.388736,1.320834],[-3.655703,-2.255268,0.559885,3.304243,-5.975994,0.273699,-8.871526,-7.253070,8.228549,-3.597831,1.176895,-3.921622,0.902797,0.807496,-1.376493],[-0.731185,7.814591,8.911319,-3.043483,8.947764,-0.389472,9.076669,6.439177,-9.446809,-8.388003,4.141124,5.137784,1.976146,4.859145,3.123213],[-0.347053,-2.360509,-2.439953,-9.196782,-2.216927,4.287772,-6.884380,1.909974,8.395993,3.779566,0.617239,9.253568,-5.234009,5.723200,2.712724],[7.508049,1.747956,-7.439690,4.027847,-6.086639,-6.992673,-5.068799,-0.401281,-4.188228,-2.690669,1.165029,-9.748709,-2.520879,-5.524510,-6.794832],[-1.644536,4.568480,6.468893,7.793882,-2.011384,-0.573819,-8.601133,-8.009779,2.545297,-5.490824,-1.461753,7.324217,-8.206369,8.759837,5.883516],[-9.144305,-1.285832,2.181244,6.330546,-5.937203,-9.216849,-0.653004,-2.712857,2.511077,1.652961,7.441479,-7.712282,-9.685485,-5.869884,6.226693],[0.257549,-7.654991,7.841081,8.426041,-7.737855,-3.462774,0.638402,6.928453,4.625160,3.727898,-0.183805,-4.139860,2.259922,9.590789,4.990363],[8.930401,8.978749,-6.514423,-7.119027,3.336457,8.955402,7.243609,2.666187,-8.550316,-2.878358,0.666139,-2.676396,4.759459,2.506477,-3.976393],[2.093085,0.753905,8.587290,8.820632,-7.788556,-6.430387,-9.595332,-4.793647,4.399482,6.452349,-6.046163,-1.745230,-4.459443,-7.392904,9.705348],[-0.814256,-6.803147,3.846133,8.645601,1.920710,6.098611,-1.930012,-5.596719,8.785292,3.666901,2.200335,-4.308812,1.306550,3.148403,-6.465712]],[[-6.420993,5.326889,-9.530990,-7.655159,9.368414,9.726610,3.193388,-8.655301,-4.591848,8.773728,-4.745008,1.480737,2.417804,-2.340205,-7.818225],[6.659462,7.591730,-1.310073,9.281164,-7.709474,-2.770002,6.074754,0.441591,6.744756,-7.353949,2.314735,6.638220,1.467005,4.562326,1.837832],[-4.112989,-3.870714,1.275059,7.923233,0.889510,5.462872,-0.734606,-4.409829,6.822013,4.147128,-1.020753,-5.817487,-2.535191,-7.088980,4.562774],[1.365099,-9.526040,-1.856350,-0.301170,-7.359659,3.507267,-5.982750,9.469972,2.120083,-8.345964,-6.490171,0.086776,0.028566,-4.007154,-7.108341],[3.654415,3.291485,1.759622,-0.327736,4.007233,-4.405162,-9.913540,-2.989801,8.996843,-5.954390,1.319943,-3.284653,-5.449520,-3.554520,-1.394640],[-3.364160,-7.905131,7.663051,6.125850,-1.633843,2.556139,5.775098,8.822023,1.770801,6.473546,-9.488903,-2.067123,-3.860817,-2.328376,5.147670],[4.817716,0.254275,4.151529,6.494201,-9.432014,1.534326,-0.841758,6.828467,3.669339,-6.567130,9.136376,2.740664,-7.798933,-5.273667,-2.590370],[1.249639,2.917795,1.159352,5.530692,-6.571256,-7.614447,5.061207,-7.988793,-9.872055,3.975894,8.698444,-8.630053,-1.621113,-4.353432,0.520271],[-4.785222,-2.341389,7.446779,-7.949250,-9.805251,-9.998615,0.216524,-6.275120,6.267622,2.359068,9.276172,0.537119,6.224398,-5.044264,-5.030547],[-8.436532,-3.947881,-8.284074,-7.731234,8.206204,9.164236,-9.357575,3.544565,8.486016,9.395429,-0.527443,4.108717,-6.867380,2.798671,-4.831068],[6.008187,4.227318,6.328083,1.978177,-9.428988,-8.288823,2.471996,-8.345818,2.025445,9.743257,-0.144449,-8.187255,7.108449,-6.732751,2.313183]]], dtype='float32')
module1.set_input('var_248', input_248)
input_298= np.array(-9.305081, dtype='float64')
module1.set_input('var_298', input_298)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_210, input_225, input_236, input_248, input_298, )
res3 = intrp3.evaluate()(input_210, input_225, input_236, input_248, input_298, )
res4 = intrp4.evaluate()(input_210, input_225, input_236, input_248, input_298, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
res1_14 = module1.get_output(14).asnumpy()
res2_14 = res2[14].asnumpy()
res3_14 = res3[14].asnumpy()
res4_14 = res4[14].asnumpy()
np.testing.assert_allclose(res1_14 ,res2_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res3_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res4_14, atol=1e-3, rtol=1e-3)
(res1_14 == res2_14).all()
(res1_14 == res3_14).all()
(res1_14 == res4_14).all()
res1_15 = module1.get_output(15).asnumpy()
res2_15 = res2[15].asnumpy()
res3_15 = res3[15].asnumpy()
res4_15 = res4[15].asnumpy()
np.testing.assert_allclose(res1_15 ,res2_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res3_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res4_15, atol=1e-3, rtol=1e-3)
(res1_15 == res2_15).all()
(res1_15 == res3_15).all()
(res1_15 == res4_15).all()
res1_16 = module1.get_output(16).asnumpy()
res2_16 = res2[16].asnumpy()
res3_16 = res3[16].asnumpy()
res4_16 = res4[16].asnumpy()
np.testing.assert_allclose(res1_16 ,res2_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res3_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res4_16, atol=1e-3, rtol=1e-3)
(res1_16 == res2_16).all()
(res1_16 == res3_16).all()
(res1_16 == res4_16).all()
module5.set_input('var_210', input_210)
module5.set_input('var_225', input_225)
module5.set_input('var_236', input_236)
module5.set_input('var_248', input_248)
module5.set_input('var_298', input_298)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_210, input_225, input_236, input_248, input_298, )
res7 = intrp7.evaluate()(input_210, input_225, input_236, input_248, input_298, )
res8 = intrp8.evaluate()(input_210, input_225, input_236, input_248, input_298, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
res5_14 = module5.get_output(14).asnumpy()
res6_14 = res6[14].asnumpy()
res7_14 = res7[14].asnumpy()
res8_14 = res8[14].asnumpy()
np.testing.assert_allclose(res5_14 ,res6_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res7_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res8_14, atol=1e-3, rtol=1e-3)
(res5_14 == res6_14).all()
(res5_14 == res7_14).all()
(res5_14 == res8_14).all()
res5_15 = module5.get_output(15).asnumpy()
res6_15 = res6[15].asnumpy()
res7_15 = res7[15].asnumpy()
res8_15 = res8[15].asnumpy()
np.testing.assert_allclose(res5_15 ,res6_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res7_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res8_15, atol=1e-3, rtol=1e-3)
(res5_15 == res6_15).all()
(res5_15 == res7_15).all()
(res5_15 == res8_15).all()
res5_16 = module5.get_output(16).asnumpy()
res6_16 = res6[16].asnumpy()
res7_16 = res7[16].asnumpy()
res8_16 = res8[16].asnumpy()
np.testing.assert_allclose(res5_16 ,res6_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res7_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res8_16, atol=1e-3, rtol=1e-3)
(res5_16 == res6_16).all()
(res5_16 == res7_16).all()
(res5_16 == res8_16).all()
module9.set_input('var_210', input_210)
module9.set_input('var_225', input_225)
module9.set_input('var_236', input_236)
module9.set_input('var_248', input_248)
module9.set_input('var_298', input_298)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_210, input_225, input_236, input_248, input_298, )
res11 = intrp11.evaluate()(input_210, input_225, input_236, input_248, input_298, )
res12 = intrp12.evaluate()(input_210, input_225, input_236, input_248, input_298, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
res9_14 = module9.get_output(14).asnumpy()
res10_14 = res10[14].asnumpy()
res11_14 = res11[14].asnumpy()
res12_14 = res12[14].asnumpy()
np.testing.assert_allclose(res9_14 ,res10_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res11_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res12_14, atol=1e-3, rtol=1e-3)
(res9_14 == res10_14).all()
(res9_14 == res11_14).all()
(res9_14 == res12_14).all()
res9_15 = module9.get_output(15).asnumpy()
res10_15 = res10[15].asnumpy()
res11_15 = res11[15].asnumpy()
res12_15 = res12[15].asnumpy()
np.testing.assert_allclose(res9_15 ,res10_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res11_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res12_15, atol=1e-3, rtol=1e-3)
(res9_15 == res10_15).all()
(res9_15 == res11_15).all()
(res9_15 == res12_15).all()
res9_16 = module9.get_output(16).asnumpy()
res10_16 = res10[16].asnumpy()
res11_16 = res11[16].asnumpy()
res12_16 = res12[16].asnumpy()
np.testing.assert_allclose(res9_16 ,res10_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res11_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res12_16, atol=1e-3, rtol=1e-3)
(res9_16 == res10_16).all()
(res9_16 == res11_16).all()
(res9_16 == res12_16).all()
module13.set_input('var_210', input_210)
module13.set_input('var_225', input_225)
module13.set_input('var_236', input_236)
module13.set_input('var_248', input_248)
module13.set_input('var_298', input_298)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_210, input_225, input_236, input_248, input_298, )
res15 = intrp15.evaluate()(input_210, input_225, input_236, input_248, input_298, )
res16 = intrp16.evaluate()(input_210, input_225, input_236, input_248, input_298, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
res13_14 = module13.get_output(14).asnumpy()
res14_14 = res14[14].asnumpy()
res15_14 = res15[14].asnumpy()
res16_14 = res16[14].asnumpy()
np.testing.assert_allclose(res13_14 ,res14_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res15_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res16_14, atol=1e-3, rtol=1e-3)
(res13_14 == res14_14).all()
(res13_14 == res15_14).all()
(res13_14 == res16_14).all()
res13_15 = module13.get_output(15).asnumpy()
res14_15 = res14[15].asnumpy()
res15_15 = res15[15].asnumpy()
res16_15 = res16[15].asnumpy()
np.testing.assert_allclose(res13_15 ,res14_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res15_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res16_15, atol=1e-3, rtol=1e-3)
(res13_15 == res14_15).all()
(res13_15 == res15_15).all()
(res13_15 == res16_15).all()
res13_16 = module13.get_output(16).asnumpy()
res14_16 = res14[16].asnumpy()
res15_16 = res15[16].asnumpy()
res16_16 = res16[16].asnumpy()
np.testing.assert_allclose(res13_16 ,res14_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res15_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res16_16, atol=1e-3, rtol=1e-3)
(res13_16 == res14_16).all()
(res13_16 == res15_16).all()
(res13_16 == res16_16).all()
module17.set_input('var_210', input_210)
module17.set_input('var_225', input_225)
module17.set_input('var_236', input_236)
module17.set_input('var_248', input_248)
module17.set_input('var_298', input_298)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_210, input_225, input_236, input_248, input_298, )
res19 = intrp19.evaluate()(input_210, input_225, input_236, input_248, input_298, )
res20 = intrp20.evaluate()(input_210, input_225, input_236, input_248, input_298, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
res17_14 = module17.get_output(14).asnumpy()
res18_14 = res18[14].asnumpy()
res19_14 = res19[14].asnumpy()
res20_14 = res20[14].asnumpy()
np.testing.assert_allclose(res17_14 ,res18_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res19_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res20_14, atol=1e-3, rtol=1e-3)
(res17_14 == res18_14).all()
(res17_14 == res19_14).all()
(res17_14 == res20_14).all()
res17_15 = module17.get_output(15).asnumpy()
res18_15 = res18[15].asnumpy()
res19_15 = res19[15].asnumpy()
res20_15 = res20[15].asnumpy()
np.testing.assert_allclose(res17_15 ,res18_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res19_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res20_15, atol=1e-3, rtol=1e-3)
(res17_15 == res18_15).all()
(res17_15 == res19_15).all()
(res17_15 == res20_15).all()
res17_16 = module17.get_output(16).asnumpy()
res18_16 = res18[16].asnumpy()
res19_16 = res19[16].asnumpy()
res20_16 = res20[16].asnumpy()
np.testing.assert_allclose(res17_16 ,res18_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res19_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res20_16, atol=1e-3, rtol=1e-3)
(res17_16 == res18_16).all()
(res17_16 == res19_16).all()
(res17_16 == res20_16).all()
module21.set_input('var_210', input_210)
module21.set_input('var_225', input_225)
module21.set_input('var_236', input_236)
module21.set_input('var_248', input_248)
module21.set_input('var_298', input_298)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_210, input_225, input_236, input_248, input_298, )
res23 = intrp23.evaluate()(input_210, input_225, input_236, input_248, input_298, )
res24 = intrp24.evaluate()(input_210, input_225, input_236, input_248, input_298, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()
res21_14 = module21.get_output(14).asnumpy()
res22_14 = res22[14].asnumpy()
res23_14 = res23[14].asnumpy()
res24_14 = res24[14].asnumpy()
np.testing.assert_allclose(res21_14 ,res22_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res23_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res24_14, atol=1e-3, rtol=1e-3)
(res21_14 == res22_14).all()
(res21_14 == res23_14).all()
(res21_14 == res24_14).all()
res21_15 = module21.get_output(15).asnumpy()
res22_15 = res22[15].asnumpy()
res23_15 = res23[15].asnumpy()
res24_15 = res24[15].asnumpy()
np.testing.assert_allclose(res21_15 ,res22_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res23_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res24_15, atol=1e-3, rtol=1e-3)
(res21_15 == res22_15).all()
(res21_15 == res23_15).all()
(res21_15 == res24_15).all()
res21_16 = module21.get_output(16).asnumpy()
res22_16 = res22[16].asnumpy()
res23_16 = res23[16].asnumpy()
res24_16 = res24[16].asnumpy()
np.testing.assert_allclose(res21_16 ,res22_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res23_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res24_16, atol=1e-3, rtol=1e-3)
(res21_16 == res22_16).all()
(res21_16 == res23_16).all()
(res21_16 == res24_16).all()

'''6: TVMFuncCall
5: _ZNSt17_Function_handlerIFvN3tvm7runtime7
4: tvm::runtime::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const [clone .isra.808]
3: tvm::runtime::GraphExecutorCreate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module const&, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
2: tvm::runtime::GraphExecutor::Init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
1: tvm::runtime::GraphExecutor::SetupOpExecs()
0: tvm::runtime::GraphExecutor::CreateTVMOp(tvm::runtime::TVMOpParam const&, std::vector<DLTensor, std::allocator<DLTensor> > const&)

'''