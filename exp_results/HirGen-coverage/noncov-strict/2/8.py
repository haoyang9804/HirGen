import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "int32", shape = (15,))#candidate|0|(15,)|var|int32
const_1 = relay.const([-8,-4,-6,-9,10,-7,10,10,1,-5,-5,3,2,5,-6], dtype = "int32")#candidate|1|(15,)|const|int32
bop_2 = relay.subtract(var_0.astype('int32'), relay.reshape(const_1.astype('int32'), relay.shape_of(var_0))) # shape=(15,)
bop_5 = relay.logical_and(bop_2.astype('bool'), relay.reshape(const_1.astype('bool'), relay.shape_of(bop_2))) # shape=(15,)
uop_8 = relay.exp(const_1.astype('float32')) # shape=(15,)
uop_10 = relay.sin(uop_8.astype('float64')) # shape=(15,)
uop_12 = relay.atanh(uop_10.astype('float64')) # shape=(15,)
bop_14 = relay.greater(bop_5.astype('bool'), relay.reshape(const_1.astype('bool'), relay.shape_of(bop_5))) # shape=(15,)
bop_17 = relay.left_shift(uop_8.astype('int64'), relay.reshape(bop_2.astype('int64'), relay.shape_of(uop_8))) # shape=(15,)
bop_20 = relay.equal(uop_10.astype('bool'), relay.reshape(bop_14.astype('bool'), relay.shape_of(uop_10))) # shape=(15,)
output = relay.Tuple([uop_12,bop_17,bop_20,])
output2 = relay.Tuple([uop_12,bop_17,bop_20,])
func_23 = relay.Function([var_0,], output)
mod['func_23'] = func_23
mod = relay.transform.InferType()(mod)
mutated_mod['func_23'] = func_23
mutated_mod = relay.transform.InferType()(mutated_mod)
var_24 = relay.var("var_24", dtype = "int32", shape = (15,))#candidate|24|(15,)|var|int32
func_23_call = mutated_mod.get_global_var('func_23')
call_25 = func_23_call(var_24)
output = call_25
func_26 = relay.Function([var_24], output)
mutated_mod['func_26'] = func_26
mutated_mod = relay.transform.InferType()(mutated_mod)
var_28 = relay.var("var_28", dtype = "int32", shape = (5,))#candidate|28|(5,)|var|int32
var_29 = relay.var("var_29", dtype = "int32", shape = (5,))#candidate|29|(5,)|var|int32
bop_30 = relay.equal(var_28.astype('bool'), relay.reshape(var_29.astype('bool'), relay.shape_of(var_28))) # shape=(5,)
bop_33 = relay.less_equal(bop_30.astype('bool'), relay.reshape(var_28.astype('bool'), relay.shape_of(bop_30))) # shape=(5,)
bop_36 = relay.equal(var_29.astype('bool'), relay.reshape(bop_30.astype('bool'), relay.shape_of(var_29))) # shape=(5,)
output = relay.Tuple([bop_33,bop_36,])
output2 = relay.Tuple([bop_33,bop_36,])
func_39 = relay.Function([var_28,var_29,], output)
mod['func_39'] = func_39
mod = relay.transform.InferType()(mod)
mutated_mod['func_39'] = func_39
mutated_mod = relay.transform.InferType()(mutated_mod)
func_39_call = mutated_mod.get_global_var('func_39')
var_41 = relay.var("var_41", dtype = "int32", shape = (5,))#candidate|41|(5,)|var|int32
var_42 = relay.var("var_42", dtype = "int32", shape = (5,))#candidate|42|(5,)|var|int32
call_40 = func_39_call(var_41,var_42,)
output = call_40
func_43 = relay.Function([var_41,var_42,], output)
mutated_mod['func_43'] = func_43
mutated_mod = relay.transform.InferType()(mutated_mod)
var_45 = relay.var("var_45", dtype = "float32", shape = (14, 10, 10))#candidate|45|(14, 10, 10)|var|float32
uop_46 = relay.log(var_45.astype('float32')) # shape=(14, 10, 10)
bop_48 = relay.add(var_45.astype('uint64'), relay.reshape(uop_46.astype('uint64'), relay.shape_of(var_45))) # shape=(14, 10, 10)
uop_51 = relay.acos(bop_48.astype('float64')) # shape=(14, 10, 10)
bop_53 = relay.left_shift(uop_51.astype('uint64'), relay.reshape(bop_48.astype('uint64'), relay.shape_of(uop_51))) # shape=(14, 10, 10)
bop_56 = relay.bitwise_xor(uop_51.astype('uint32'), relay.reshape(var_45.astype('uint32'), relay.shape_of(uop_51))) # shape=(14, 10, 10)
bop_59 = relay.bitwise_xor(uop_46.astype('uint64'), relay.reshape(uop_51.astype('uint64'), relay.shape_of(uop_46))) # shape=(14, 10, 10)
func_39_call = mod.get_global_var('func_39')
func_43_call = mutated_mod.get_global_var('func_43')
const_63 = relay.const([8,4,-3,10,-9], dtype = "int32")#candidate|63|(5,)|const|int32
call_62 = relay.TupleGetItem(func_39_call(relay.reshape(const_63.astype('int32'), [5,]), relay.reshape(const_63.astype('int32'), [5,]), ), 1)
call_64 = relay.TupleGetItem(func_43_call(relay.reshape(const_63.astype('int32'), [5,]), relay.reshape(const_63.astype('int32'), [5,]), ), 1)
const_65 = relay.const([[[-4,-9,-3,-4,-5,-3,10,-3,10,10],[-2,-1,9,9,10,-7,10,3,-8,-2],[-7,-7,2,3,-3,2,-2,-10,-1,-4],[-6,-7,8,-10,7,1,-8,1,10,1],[-7,-1,-6,-9,1,-1,-6,-5,-8,-3],[6,1,2,-3,-5,8,-7,-2,1,1],[-7,-2,3,-9,2,-8,-6,4,8,-2],[4,-7,-8,-6,-10,-4,-1,10,-4,5],[-3,-8,-1,-10,-2,3,2,-6,9,-1],[9,6,2,2,-6,-3,9,1,4,10]],[[-2,1,-3,4,7,10,3,-5,-3,10],[-5,10,2,5,-1,-1,8,-10,-9,4],[2,-3,10,-9,-5,2,-9,4,-4,-9],[-2,1,-2,-2,5,-8,-9,-1,7,2],[6,1,-6,9,4,6,-8,-7,-6,-1],[4,-10,-10,-2,1,-10,7,4,-6,5],[9,-7,8,7,-2,7,-10,1,-5,9],[-8,-5,-10,-2,10,-6,9,-7,-7,1],[7,-9,2,-8,-6,5,6,1,-6,2],[-2,-8,4,-8,-2,-2,4,5,-3,4]],[[-8,3,8,-7,9,-2,-10,2,6,4],[-8,6,-8,-7,-1,-10,2,2,9,4],[-1,-1,-7,-4,2,2,4,1,8,-5],[-10,8,10,10,1,9,2,-2,2,3],[-2,3,4,10,-3,1,-9,5,-10,9],[1,-3,8,2,-1,-4,-4,1,-3,10],[-5,7,-9,-5,9,10,2,3,-9,9],[-3,-5,2,-5,-6,-8,5,4,2,-4],[-5,-3,8,-6,2,-6,-10,2,-8,8],[-1,4,-4,9,-10,-8,-7,-2,6,1]],[[5,5,-10,-1,5,2,-6,1,5,-7],[-2,7,-6,4,9,2,-5,-1,-5,3],[2,5,2,-7,7,-9,8,10,-9,6],[10,-1,-4,-1,-7,-8,-10,4,-10,-6],[-6,5,4,-8,10,10,9,-6,-6,-1],[-1,-1,-5,-2,7,-1,6,-6,1,-3],[7,2,7,-8,-3,5,9,5,-2,-8],[-7,-1,-5,3,-3,9,-2,-6,7,9],[5,5,1,-8,7,1,7,6,2,-7],[8,3,-7,6,-2,-7,2,-1,-2,-5]],[[8,-4,9,-4,9,-6,-9,6,9,-1],[10,8,-10,4,-1,-2,6,-2,5,-8],[9,-3,4,-6,3,5,-7,-5,3,10],[8,-1,-5,-1,-10,7,2,10,9,-10],[5,-6,-8,1,10,-7,1,-5,10,-1],[3,-10,7,-3,-7,-1,-8,-7,9,10],[-1,-2,-5,-1,2,-7,-9,2,-8,4],[-7,8,-5,-4,6,6,10,-10,-4,2],[-4,-9,-6,8,-5,9,-1,-9,-5,9],[-6,-9,-2,3,-9,-9,4,5,-10,-7]],[[-7,-9,5,-3,1,-4,-10,5,-9,7],[5,-2,-8,2,9,-5,6,-5,3,3],[-3,-5,9,4,-10,9,-10,6,-7,-8],[-8,5,8,-4,9,9,6,6,3,7],[-2,3,-7,-10,7,-3,10,8,-7,10],[-2,9,-2,5,-4,3,9,5,-4,2],[-2,6,-10,-9,7,-2,-8,-8,5,-6],[-8,-4,4,4,-6,-7,1,8,10,-8],[-7,-7,-3,-5,-10,9,1,-8,-5,-1],[1,9,3,-1,7,1,2,-10,5,-7]],[[-6,5,-2,-2,-7,7,-3,8,-4,-1],[10,6,10,-1,9,1,6,7,-1,2],[2,-4,6,10,-2,-2,3,-8,-1,-9],[9,-10,-10,-3,-5,-8,6,1,5,1],[-2,-4,10,9,3,6,10,6,-2,-10],[4,4,-2,-2,-4,-8,8,1,-4,-1],[-10,8,2,9,-1,-1,-9,-4,9,9],[1,-2,-1,-6,3,1,-4,-3,-1,2],[-3,8,9,-4,10,-2,3,7,-6,9],[2,-3,9,5,-8,3,-10,-5,4,7]],[[-3,4,-4,-1,6,10,-10,-4,-8,-8],[-6,10,-5,-6,4,-5,-6,-4,10,1],[-5,-3,3,-3,-8,9,-3,1,6,7],[3,-7,-10,9,10,7,-10,-10,10,8],[-4,2,-8,7,10,-1,5,10,-3,-5],[-9,-8,-3,-4,2,2,8,7,-5,-9],[-6,8,10,-7,8,-8,4,-8,4,1],[3,-6,-7,9,7,7,-8,-7,4,3],[-5,1,-7,-8,10,-9,-5,5,7,-4],[-2,8,-7,-8,8,-4,-2,-2,-1,-10]],[[-2,-3,-3,6,2,6,10,-6,10,9],[5,1,-6,6,5,-8,4,-3,2,9],[-1,10,1,-10,9,-9,3,-4,6,6],[-6,10,8,9,5,3,-2,-9,8,4],[-9,2,6,8,-3,-3,1,-1,9,8],[-7,-1,-4,4,10,-9,-2,8,4,7],[-2,-10,-6,-3,-8,-2,-2,4,3,-7],[-5,-1,-5,4,-7,-1,-5,-4,-10,7],[-8,5,-2,-3,8,-8,-6,1,-10,-5],[9,-7,-6,5,-8,6,-1,-5,1,-10]],[[7,1,6,7,8,-2,7,-1,-10,9],[-1,5,7,7,-7,-6,-4,10,-10,8],[10,-4,1,9,4,-1,-4,-8,-6,10],[3,-8,4,9,-6,1,10,2,-5,-3],[9,-3,-10,-8,8,-10,6,8,-5,-4],[-5,-6,2,-6,-8,-5,5,-4,1,-3],[-1,-7,-10,-7,-3,7,-5,5,-2,-6],[2,-1,-9,1,-8,8,7,6,-10,2],[3,-3,4,-8,9,-9,5,-7,5,-4],[-2,2,-8,7,-1,-3,-8,-5,-4,-9]],[[8,3,5,8,8,3,-6,1,3,-6],[-7,-3,7,7,2,6,3,-5,-7,-8],[-7,-7,8,-1,-6,-7,7,-9,-9,-10],[4,3,5,-6,1,9,9,-4,-2,7],[-1,-2,-6,7,-9,6,-2,3,-7,10],[-4,-5,-3,-9,-4,-6,1,-7,10,10],[-10,-5,7,10,6,1,6,-5,7,-5],[-10,-7,-8,-8,10,-8,-6,3,-10,9],[-2,7,8,-9,6,5,-7,-7,-9,-5],[-2,-1,5,-4,-8,10,3,10,-9,-6]],[[6,-1,6,-10,-2,7,-8,-4,10,-10],[3,8,7,-7,8,-3,7,-5,-3,-1],[10,1,-4,-2,5,5,-2,-3,-1,-7],[-6,-3,-4,5,5,-2,-3,4,-10,-2],[-8,2,-9,1,5,-1,8,-3,2,2],[3,-2,-9,-4,1,-3,-2,-1,9,-3],[7,7,-7,10,8,7,-7,8,3,6],[-9,-7,3,-3,7,1,1,-1,-6,-10],[-4,6,5,-7,7,6,-2,8,-8,-2],[-9,9,8,-10,3,-9,-6,6,2,-10]],[[9,-6,7,-10,4,-10,-2,-3,-8,-7],[1,-8,2,8,9,4,6,-3,-5,-9],[-5,-2,-7,9,7,6,1,-7,-8,-8],[5,-9,5,5,4,-9,-1,6,-5,3],[9,2,-3,-5,-3,10,-7,10,-10,2],[-7,1,-3,5,-1,9,-8,-2,-9,-6],[9,2,-4,10,5,7,4,-1,-6,6],[-5,-7,-6,-7,-5,-7,6,4,2,-5],[-7,-1,2,-9,-8,-4,-10,7,-2,-2],[5,5,1,-5,-5,-1,5,-7,-6,5]],[[-1,-9,2,8,-2,4,2,-3,1,7],[10,-2,2,2,-4,-3,6,8,2,5],[-6,5,10,-2,-6,9,-9,-3,-8,10],[-1,-9,-9,-6,-2,-4,10,10,-7,-1],[3,1,2,-4,8,-6,-1,4,3,8],[1,-8,3,-10,-10,5,2,-7,1,-9],[-7,6,10,-5,-1,10,9,2,-4,4],[3,7,-9,-2,-6,-7,-5,-1,4,10],[1,7,8,1,2,-7,-9,2,1,-6],[4,9,8,-6,8,-8,-6,8,-6,7]]], dtype = "uint64")#candidate|65|(14, 10, 10)|const|uint64
bop_66 = relay.divide(bop_59.astype('float32'), relay.reshape(const_65.astype('float32'), relay.shape_of(bop_59))) # shape=(14, 10, 10)
output = relay.Tuple([bop_53,bop_56,call_62,const_63,bop_66,])
output2 = relay.Tuple([bop_53,bop_56,call_64,const_63,bop_66,])
func_69 = relay.Function([var_45,], output)
mod['func_69'] = func_69
mod = relay.transform.InferType()(mod)
mutated_mod['func_69'] = func_69
mutated_mod = relay.transform.InferType()(mutated_mod)
var_70 = relay.var("var_70", dtype = "float32", shape = (14, 10, 10))#candidate|70|(14, 10, 10)|var|float32
func_69_call = mutated_mod.get_global_var('func_69')
call_71 = func_69_call(var_70)
output = call_71
func_72 = relay.Function([var_70], output)
mutated_mod['func_72'] = func_72
mutated_mod = relay.transform.InferType()(mutated_mod)
var_74 = relay.var("var_74", dtype = "float64", shape = (7, 14, 1))#candidate|74|(7, 14, 1)|var|float64
var_75 = relay.var("var_75", dtype = "float64", shape = (7, 14, 8))#candidate|75|(7, 14, 8)|var|float64
bop_76 = relay.floor_mod(var_74.astype('float64'), var_75.astype('float64')) # shape=(7, 14, 8)
var_79 = relay.var("var_79", dtype = "float64", shape = (7, 14, 8))#candidate|79|(7, 14, 8)|var|float64
bop_80 = relay.left_shift(var_74.astype('uint32'), var_79.astype('uint32')) # shape=(7, 14, 8)
bop_83 = relay.logical_xor(bop_80.astype('int32'), relay.reshape(bop_76.astype('int32'), relay.shape_of(bop_80))) # shape=(7, 14, 8)
const_86 = relay.const([[[8,3,-9,-5,-6,4,-4,4],[10,-5,3,-10,-4,-3,1,-2],[-3,-6,-4,9,-9,-7,-10,8],[8,10,-5,-10,-7,8,2,4],[5,-8,-3,8,-10,3,-5,9],[-6,7,-7,10,1,-1,-8,-8],[7,1,-3,-1,1,2,-7,-9],[9,-4,-6,-2,10,2,8,-2],[-6,-4,9,1,-1,8,-5,1],[-7,-2,-7,10,8,9,9,-3],[-2,5,4,5,-10,-3,2,-9],[-9,9,-7,-7,-8,5,6,4],[6,-1,-7,6,-9,-10,-5,9],[-4,-9,-7,10,-3,-5,-2,8]],[[10,8,8,-5,-5,8,-6,3],[5,-4,10,-10,-8,3,5,8],[3,-3,10,-7,-4,4,-4,-1],[8,-3,-9,3,-5,-5,-8,-8],[-9,-3,10,7,-7,-4,-7,-1],[-10,5,-5,-7,5,-5,-7,5],[3,-8,-9,6,3,6,7,-8],[4,-6,-4,-1,7,3,8,-1],[-7,5,1,2,1,7,-7,-5],[-8,10,-6,-10,-9,-8,-10,-10],[-7,3,-6,3,2,7,6,-10],[7,-6,-3,7,-9,10,1,8],[-5,-5,5,2,1,-7,-3,1],[9,4,-6,-5,-3,6,-5,1]],[[7,-10,-7,10,-4,-3,5,9],[-1,-7,2,-2,7,9,4,9],[-8,-6,3,-1,4,-4,-7,-5],[5,-3,-6,-2,-5,-4,-2,2],[3,-5,3,-5,-1,8,-3,-6],[6,5,-6,-2,9,2,8,3],[4,-10,-3,6,4,-2,6,5],[-7,4,9,-6,2,4,-4,3],[-5,4,8,4,1,-10,3,-1],[-8,-6,10,9,-2,4,-8,-1],[-2,10,3,3,-9,-5,8,3],[-8,3,2,2,3,-7,2,5],[-3,5,9,1,3,-8,-9,-7],[1,9,-3,5,-6,8,-10,-4]],[[-8,-8,9,2,-5,-2,-5,-5],[10,10,-4,9,9,8,10,2],[-2,-4,-4,-2,-9,5,-3,10],[6,-7,7,8,3,5,7,1],[2,10,-2,-4,7,4,-2,5],[6,-6,-8,-1,10,2,5,-7],[-7,-2,-7,9,-8,6,-1,9],[3,-2,-2,9,9,9,7,1],[-3,4,-9,-6,7,-8,4,-8],[3,-7,-3,4,10,-5,1,2],[7,8,10,-5,-7,-7,-8,-8],[-3,5,1,-7,5,1,-8,-2],[10,2,-5,9,10,2,9,1],[5,9,5,9,9,-8,5,-1]],[[9,5,2,5,-7,10,-7,9],[6,9,3,-1,-10,-9,-8,-7],[6,2,-5,-10,4,-10,2,2],[-7,-1,-9,-3,3,3,4,2],[-2,-8,3,-1,9,-9,-3,10],[4,-8,-8,-1,5,-4,-3,-1],[-1,4,-10,-3,10,-1,-3,-1],[-4,9,4,-1,-5,9,1,5],[-2,10,-7,8,-4,-10,-10,3],[2,6,-5,4,-3,-10,-5,-10],[7,7,-2,-3,6,3,-4,1],[-10,1,-3,-7,-10,-3,-3,1],[3,-4,-5,-1,-10,-6,-1,-4],[2,-8,2,3,2,6,9,5]],[[-3,8,8,8,2,-4,-1,-7],[4,7,-1,-8,8,-10,1,-8],[-4,4,-6,10,6,-4,-4,9],[-6,-6,9,-4,9,-4,9,9],[-10,7,-5,3,-3,-8,8,7],[-6,-3,-8,-1,-8,1,9,-3],[1,3,9,9,3,-10,-5,-4],[-1,-7,3,10,-3,1,9,8],[-5,7,-9,7,4,-4,6,1],[7,8,5,3,7,1,7,-7],[2,-6,10,6,1,-4,-2,-4],[-4,10,10,-9,-7,-4,-2,9],[-7,-7,-8,-1,-5,-6,10,7],[-2,-3,-2,3,5,-6,-10,-2]],[[-9,2,-4,-4,7,-9,10,1],[2,-8,10,-4,1,-3,4,-8],[6,10,-2,-2,-6,8,-6,-10],[6,-5,-1,3,-10,1,-4,6],[-8,4,3,-2,7,-5,-10,-3],[4,5,8,7,6,3,8,2],[8,-9,3,7,1,5,6,-10],[-6,6,-4,-4,-3,-10,6,9],[9,-2,7,-2,-1,2,5,-8],[8,6,8,-2,-7,-4,-6,7],[-10,8,10,8,7,9,-5,-2],[4,4,-8,-5,-9,-7,1,-10],[3,-10,10,-6,-9,8,3,-6],[-9,-1,7,1,-6,-10,-2,-9]]], dtype = "int32")#candidate|86|(7, 14, 8)|const|int32
bop_87 = relay.power(bop_83.astype('float32'), relay.reshape(const_86.astype('float32'), relay.shape_of(bop_83))) # shape=(7, 14, 8)
bop_90 = relay.divide(bop_80.astype('float32'), relay.reshape(bop_83.astype('float32'), relay.shape_of(bop_80))) # shape=(7, 14, 8)
output = relay.Tuple([bop_87,bop_90,])
output2 = relay.Tuple([bop_87,bop_90,])
func_93 = relay.Function([var_74,var_75,var_79,], output)
mod['func_93'] = func_93
mod = relay.transform.InferType()(mod)
var_94 = relay.var("var_94", dtype = "float64", shape = (7, 14, 1))#candidate|94|(7, 14, 1)|var|float64
var_95 = relay.var("var_95", dtype = "float64", shape = (7, 14, 8))#candidate|95|(7, 14, 8)|var|float64
var_96 = relay.var("var_96", dtype = "float64", shape = (7, 14, 8))#candidate|96|(7, 14, 8)|var|float64
output = func_93(var_94,var_95,var_96,)
func_97 = relay.Function([var_94,var_95,var_96,], output)
mutated_mod['func_97'] = func_97
mutated_mod = relay.transform.InferType()(mutated_mod)
var_99 = relay.var("var_99", dtype = "uint32", shape = (13, 14, 15))#candidate|99|(13, 14, 15)|var|uint32
var_100 = relay.var("var_100", dtype = "uint32", shape = (13, 14, 15))#candidate|100|(13, 14, 15)|var|uint32
bop_101 = relay.less(var_99.astype('bool'), relay.reshape(var_100.astype('bool'), relay.shape_of(var_99))) # shape=(13, 14, 15)
uop_104 = relay.rsqrt(var_100.astype('float32')) # shape=(13, 14, 15)
uop_106 = relay.sinh(uop_104.astype('float64')) # shape=(13, 14, 15)
var_108 = relay.var("var_108", dtype = "float64", shape = (13, 14, 15))#candidate|108|(13, 14, 15)|var|float64
bop_109 = relay.right_shift(uop_106.astype('int8'), relay.reshape(var_108.astype('int8'), relay.shape_of(uop_106))) # shape=(13, 14, 15)
bop_112 = relay.minimum(var_99.astype('float64'), relay.reshape(uop_106.astype('float64'), relay.shape_of(var_99))) # shape=(13, 14, 15)
bop_115 = relay.greater(bop_109.astype('bool'), relay.reshape(bop_112.astype('bool'), relay.shape_of(bop_109))) # shape=(13, 14, 15)
var_118 = relay.var("var_118", dtype = "int8", shape = (13, 14, 15))#candidate|118|(13, 14, 15)|var|int8
bop_119 = relay.greater(bop_109.astype('bool'), relay.reshape(var_118.astype('bool'), relay.shape_of(bop_109))) # shape=(13, 14, 15)
func_69_call = mod.get_global_var('func_69')
func_72_call = mutated_mod.get_global_var('func_72')
const_123 = relay.const([-4.682396,6.420285,-2.983355,9.980586,1.427417,-7.062297,3.656994,-1.872517,-2.628770,-1.589366,2.929075,8.110160,9.934091,-5.011904,8.494122,5.905795,4.119463,-4.338024,-1.965370,-1.940186,0.054710,-3.443907,-8.542885,8.272060,-3.148092,-9.442262,-2.028209,4.004384,-2.778130,-7.908593,8.830182,0.407221,-4.021237,-2.335059,4.282293,-1.542012,2.576661,2.828482,4.851278,8.450042,1.889270,5.657892,2.048723,1.311664,-3.413980,-2.297885,4.939110,-4.692797,8.914399,-1.922563,1.699569,9.213578,-3.983127,-9.332650,1.160539,5.243307,1.556482,-2.072602,6.714360,9.130778,1.678942,-0.676362,5.148018,-9.411769,2.728402,-5.770843,-2.372943,-5.926219,-3.297581,-7.405690,-5.923440,-3.564468,1.784731,-7.480535,-4.332147,-0.993269,6.721156,7.161785,-3.527067,4.769921,-1.864019,-3.207156,-7.339259,3.131144,-0.957710,-9.236707,-6.231286,-4.096156,-0.243380,-9.639865,-1.506551,-9.840170,7.828677,5.807791,-8.608060,-8.194868,-5.101860,0.632281,6.419543,1.305442,-8.275133,-2.043357,2.958407,-6.985883,0.675659,-3.814846,-0.938650,-5.150117,-7.808157,1.604627,-6.432586,-4.312044,-7.982083,3.536952,-7.384353,7.768714,4.674340,4.362516,6.315229,-8.879553,4.686816,-2.539609,8.119112,3.147974,-1.013346,-4.258275,-1.732519,5.265637,-2.450809,-8.056891,-2.072670,-7.531165,2.160294,-9.084839,5.068794,-8.918912,3.812459,-6.408906,9.021427,4.490935,-8.263630,-8.661067,-3.501777,-8.596798,9.342318,0.226467,-1.705258,4.784431,-7.621701,-8.395691,-7.361994,-0.834420,-7.793529,-4.085731,-2.021938,5.473606,-0.864459,-7.992953,-4.508827,2.869037,7.925102,4.210339,-6.843928,-1.728113,-1.298679,5.265182,2.671918,-7.596870,-8.174274,6.644094,-7.057070,-5.187644,-6.368880,0.643675,4.432352,-7.613594,-2.285713,-0.810274,-7.654360,8.864991,-7.053827,5.417653,-4.257412,2.088283,1.704221,3.711939,8.089572,-1.146539,-0.262232,-1.560983,-0.842036,9.844489,-8.204473,-9.141387,-9.569698,1.345303,-8.394233,-7.923362,2.885681,2.710915,-3.017357,-5.668442,-9.883136,1.510590,3.543348,-6.486365,1.918566,-7.141279,-2.913825,-5.355363,-3.071658,1.028916,9.678285,5.077399,5.457870,9.407635,7.197312,3.830966,-7.463606,2.684081,8.809238,6.177516,6.539099,-6.205188,-0.840557,-5.497057,2.862632,9.905442,0.767953,3.496145,-2.014467,-4.123759,-4.137596,9.609541,-9.265826,-0.241708,5.896321,-6.889494,2.171624,-4.607405,-7.345122,-6.453611,-1.058704,-0.742214,-1.730165,-4.121119,-8.851233,5.044141,-4.163813,6.499310,9.036614,-5.928092,1.863588,8.476183,-9.453794,0.390044,-1.679388,-1.527700,5.326508,-5.584474,-6.064306,-8.112286,4.669875,9.989161,2.682672,-3.831617,4.187090,7.954801,-6.586009,8.738090,-5.649681,1.515014,2.300436,4.016223,-1.778502,-0.245426,-9.166842,9.021383,-3.320751,9.098070,6.478212,-6.912011,0.448424,6.579024,-5.636266,-5.219814,9.203584,3.896701,9.808454,-1.979152,-2.625579,-0.666645,0.909444,-5.101988,-1.608630,1.568969,-4.407900,-2.057471,3.565913,0.854565,8.908118,-0.620570,2.332046,6.017314,-7.438470,-0.346263,-3.501368,6.366657,-9.279533,-2.033805,-0.754206,-0.261959,9.865016,-1.923996,-8.207626,9.636636,4.215203,6.113192,2.938837,1.291088,-1.292865,1.758433,-5.307532,-8.841106,-5.765992,3.149026,8.535513,4.609072,2.221407,5.788249,0.646680,1.608381,9.068180,4.603425,5.272653,-6.739838,-0.958966,-3.997822,8.918955,7.411511,5.486296,-9.567443,-4.133460,-4.832196,6.394847,-2.520685,-4.957400,0.906744,-0.171816,-3.946484,1.907000,9.864994,-8.823798,-3.107700,-0.271710,-3.970861,-1.689313,-1.909414,-2.381380,-8.872780,7.234753,4.940894,-9.727833,7.244252,8.168158,-4.682778,-6.133897,4.518277,-0.217584,-8.591497,4.142039,-8.008520,0.150434,6.773702,4.650541,2.602205,-9.189747,-2.534314,1.473338,7.136036,-5.453942,1.612326,5.735306,3.739852,-4.383617,-7.348422,-9.934881,-9.618579,-6.657131,-5.755020,8.297245,-5.017876,-5.403318,5.621788,-6.116408,-2.220293,-7.765412,0.374170,-5.961401,5.010482,7.884752,8.301599,6.027683,4.063772,7.640622,3.984337,-5.294357,-2.718413,4.079699,-3.119475,-6.942950,-6.153606,8.853608,-1.721807,-5.155343,-1.541367,4.108464,-4.467484,0.237195,-3.482030,7.038186,-1.779440,2.823017,-8.165510,-6.515068,-7.266679,1.384915,6.571303,6.045284,7.146177,-9.829559,9.180355,8.540089,-0.179987,4.768643,1.279810,-6.024691,-0.898185,-6.343936,-4.786733,-5.083998,7.735507,1.213548,-5.551132,-7.365792,6.673007,7.435012,-3.162515,-2.973905,-6.101552,-2.870349,-6.752616,5.519925,-0.672268,9.965960,-6.355275,-0.631627,2.608766,-8.447030,-7.067581,3.402296,1.155566,-4.137093,3.045045,-6.212641,-5.542065,9.448029,-8.513108,-0.218026,-1.349246,3.711404,4.122937,-1.834341,-8.062746,-5.609162,9.818885,-1.786963,-4.680053,9.279347,6.988889,7.743112,-4.112716,-6.313404,4.554690,1.579435,-2.527533,-7.563115,-1.841190,-3.119610,-5.844494,2.577720,1.662662,-3.497828,-1.775775,8.449047,-8.341212,-4.232512,-1.861377,3.464498,9.049893,3.288227,3.054574,9.613962,3.617123,-1.566425,-0.733973,8.420540,0.312053,8.640500,9.299557,4.466777,-9.694593,-9.053344,-9.011786,-2.614015,8.232763,6.081835,-5.165070,-8.244707,0.871409,2.958068,4.572373,3.852609,-3.167244,-9.272576,6.259130,1.749144,2.338267,-2.347309,8.462836,7.837294,5.019557,-9.980517,9.292339,3.966273,8.236458,-7.597742,8.442782,-3.806948,2.829496,-5.685846,-7.008127,-7.063837,1.795553,-6.757277,4.436836,0.288345,-6.018308,-6.340357,1.065229,-8.374114,-0.068403,8.968715,-3.918015,-6.516162,-2.069938,6.094588,-1.316176,2.715655,-2.006477,8.903595,9.452469,-4.836763,-2.270985,-8.480129,-4.938794,-3.366717,6.797728,0.835967,8.002308,5.692469,-9.093563,6.723622,-5.118166,-4.827359,-3.059070,5.209571,9.663998,2.262726,-6.084977,7.401306,0.902418,-0.471575,7.767499,-4.517238,2.917143,-4.505938,-0.669659,-0.253896,-7.269947,-0.758109,-6.268766,2.035492,7.161484,8.575946,-1.601640,5.154427,1.904310,-6.879823,3.063875,2.022301,5.575273,-7.500278,4.591773,-8.780664,2.251488,-7.282470,-8.549674,1.050187,6.307697,-4.451839,9.391219,4.402881,4.564748,0.721056,-2.101491,5.888211,8.903234,-1.851286,-6.063464,-1.595797,3.067050,-1.403709,-2.811312,1.002578,-8.601509,1.115778,5.091495,-5.802718,1.535710,7.637619,7.794878,3.390008,-1.476070,0.861103,-1.391814,0.232278,3.679690,-5.952116,9.576155,4.173101,9.460113,-2.775644,6.825413,4.654182,-8.032760,-9.399979,4.973575,-4.182540,1.730382,-9.298366,-0.325041,1.040158,9.798280,8.508791,-8.190802,9.288836,-1.646832,-5.389542,-8.495646,-6.267142,7.740972,-4.938986,-9.063051,-0.766793,5.290636,3.978810,-2.638159,9.545472,-6.008708,8.097391,0.483506,-8.849426,-2.528229,4.027743,-6.415569,4.582793,-8.454614,-4.829410,1.103013,0.247260,-3.877903,-3.463199,9.724115,-5.265126,-0.479277,-2.666248,-3.522306,5.720766,-9.878299,-2.932196,-4.712082,-8.633871,2.103334,7.429962,2.634685,8.822211,-9.727015,9.819672,6.092371,3.603933,5.117257,1.144503,5.340815,-0.957910,5.174254,-6.539901,-6.108911,5.147548,-0.054061,-6.348299,8.373341,0.227750,7.592856,6.081266,-6.335958,6.398650,9.341063,-6.415751,3.559898,-0.995816,6.180924,0.246321,0.318522,9.966391,1.879609,7.778722,-7.142232,-8.941716,9.928211,-5.535041,2.296400,6.823905,7.084330,6.799413,-7.623429,7.328407,-8.185772,-3.421514,9.044737,7.282919,3.891920,7.828488,2.161890,-8.148178,-0.409232,7.261814,-6.680240,-7.686743,-5.646155,-0.563730,8.136232,-1.787682,-4.699243,0.999399,-4.627847,1.463075,6.055918,1.707951,-5.818458,-4.809475,1.160085,-7.985847,-1.301489,5.584033,-9.553270,-3.060489,5.615989,-2.452576,1.005319,-3.164148,-1.252621,3.953861,-0.919338,4.682019,-0.278000,3.862016,4.896374,1.868188,-2.770319,-7.555184,2.565089,-5.168183,8.978798,-3.724202,-4.151674,-0.421014,-1.826099,2.073273,1.562148,-4.577801,-6.885313,5.053575,5.638846,7.128524,6.976468,2.679259,-3.972708,4.051785,-3.457765,-1.060537,-5.127767,2.872189,3.701980,-9.508949,5.134442,-5.518428,-9.315322,0.081638,7.842319,-8.052686,-9.134277,5.084840,9.714149,-9.211594,-5.776938,9.328849,-2.720206,-0.220528,6.201497,-7.294275,7.037763,-3.158473,-3.586615,1.328479,-7.891417,-3.701266,4.249805,-9.739102,-1.138828,-5.760271,3.705658,-2.031116,4.426950,7.785221,4.417348,9.413626,2.660316,-2.979719,-0.015982,0.102369,8.098778,9.997570,0.542037,-2.936811,2.098884,-4.539660,-1.831310,-0.723610,7.521745,-7.149490,0.789252,4.184034,1.209110,-7.176235,-1.485688,-7.752038,3.573083,-5.510659,3.993558,-2.620944,-8.686163,-8.258865,2.971747,-0.948303,-3.956765,8.504101,-8.955397,-7.671305,1.879603,8.875208,-3.620898,6.331998,-2.390960,-9.616847,-1.101137,-9.242705,-8.359654,0.158163,1.731034,-4.172109,-3.064455,0.309379,3.015601,-3.426173,-4.211619,-9.164154,-9.950201,-3.653582,4.268837,-6.687110,8.861512,-2.120469,5.483398,-1.457571,6.462508,8.014453,-4.060207,0.720814,-5.430166,-9.445708,8.731441,-4.693165,6.398490,-0.384270,4.070891,-2.026681,0.035674,-6.963900,6.348538,5.697690,-2.150062,-3.151472,8.677846,-3.057464,-7.038862,-6.881626,2.950548,2.008075,1.766636,9.677773,-8.559201,-2.949098,8.831282,3.483845,9.758264,3.514120,7.403027,-6.418668,0.061470,-2.653520,-1.065274,-9.548106,4.886993,-1.245492,8.799430,-7.471903,7.523760,-0.842182,6.425211,9.371024,-3.568265,-6.167895,5.578604,0.813286,6.220193,-2.384085,-1.077168,3.061798,-5.132479,8.606972,-0.627362,1.425351,-2.731639,-0.707661,2.754718,-1.789419,-9.493131,8.547190,6.889700,4.024459,3.663967,-8.216666,-4.905326,4.835221,3.855633,-1.673290,-3.638672,-2.823122,3.182965,3.255989,-1.158579,0.139185,-1.932397,-5.613189,4.623825,7.727873,8.992484,-1.327462,1.974432,-9.129575,-9.679939,-9.949307,5.642135,0.990664,6.317302,8.006708,-1.054064,5.910211,-7.647300,1.899719,6.813073,-1.576438,-2.513964,-7.966010,-2.945574,4.551427,2.154348,-6.598238,-7.543233,-0.312072,-0.744499,0.162701,-8.451586,5.908208,2.271290,-4.180088,1.957302,9.164310,6.212918,-9.636777,0.029932,7.852236,3.105938,3.818699,8.293110,-1.263819,6.796024,2.176168,-6.403347,-1.127561,6.833028,-4.680745,0.810550,-9.416072,5.109028,4.102172,-1.246752,1.867245,-9.822184,5.184467,-1.653076,6.431704,-2.507798,9.091793,4.685673,-6.833103,-6.061754,-6.382295,-2.393923,6.595289,0.558828,-1.949234,2.549737,6.938047,-1.797745,8.065496,-2.648647,7.867699,0.428010,4.386111,-0.094685,0.995374,-3.326615,2.900860,8.280395,-0.975353,0.347078,-2.993503,2.642444,-7.941594,4.423680,-9.638671,-8.877286,-1.326532,5.555693,-1.357313,5.573651,-8.890724,2.847876,-1.763448,-8.754656,9.322729,-2.106791,-7.672215,-5.234092,4.411421,9.272176,4.964886,1.731900,1.957216,-6.116871,6.509558,-4.465583,1.780942,1.727246,-5.451683,6.731496,1.476907,7.867318,1.036355,-6.471718,5.351948,-6.273300,3.942008,-5.349152,-1.414911,-8.874200,-2.715140,-8.837120,6.376751,-5.574237,4.915518,9.464345,7.476612,5.639021,-1.106374,1.799780,6.916602,7.620049,-3.553855,0.543078,-6.908166,-2.324876,-7.716791,-5.584806,-2.867640,3.386396,-4.140708,-1.417643,-4.953086,-7.581616,4.386617,-3.451914,-7.483545,8.293946,-7.274649,7.476389,-8.694753,8.645924,-6.189234,-5.106565,-1.790229,7.438761,8.245141,-6.190550,1.879072,-9.649636,4.587522,5.426350,-3.495355,-7.701109,0.494266,3.730888,0.913698,0.730378,1.578553,-2.150039,6.096938,-6.219823,2.735064,-2.458348,-3.228909,6.341416,-3.224292,6.429991,2.845993,0.743020,4.946811,-6.875837,8.310237,0.819032,-5.145270,9.989422,2.639492,-8.068460,-9.000453,2.246623,0.840137,-8.221442,7.991435,6.771527,5.011439,4.334231,4.526405,6.595031,3.626160,3.584227,-8.246550,-1.454677,4.895037,-1.879196,9.847863,-6.868354,-5.294369,-8.052946,-8.963951,-5.083198,-1.531125,-9.815921,-1.498107,6.547325,-1.841132,3.377499,4.542153,-4.541613,-4.999505,-8.058903,-5.295533,-7.882862,-7.647003,-3.336596,-4.496496,-2.589750,5.659785,5.180577,0.777633,3.716523,7.126669,-0.653385,-5.494110,4.501260,-4.474214,9.023067,-8.072266,2.052686,-9.449128,0.756554,7.302796,-1.397328,4.291967,-5.255414,-1.109975,-1.721801,-7.000326,-4.202094,-4.814444,4.412880,6.860264,2.209197,-2.656982,-7.235979,0.619764,-5.516084,-1.553750,1.090789,-8.722011,-1.776208,5.075714,-2.103157,0.061771,9.934947,5.964864,-6.518157,4.508144,-9.924781,6.526814,-3.258921,3.812031,6.812915,5.289867,3.504831,-3.590228,-9.662900,-3.069465,8.856887,8.736578,5.476466,7.196518,-7.105221,-8.411912,-9.986639,6.641369,-8.868698,0.080075,-3.944789,-3.706213,-6.520575,2.583740,-3.563928,-2.332360,-9.245452,-4.571801,-5.706628,2.196584,-7.253945,8.761256,6.792058,-8.109897,8.618649,9.549072,-3.583514,7.061405,-2.270383,-2.573994,5.079538,-3.795876,-7.594479,1.418049,-2.541607,3.506635,-9.154166,-9.056053,-5.386172,6.711761,-8.940043,8.386309,-8.718246,-1.077073,-7.931790,-2.011693,9.866888,7.400778,6.088678,-5.221989,2.389682,9.134425,-8.005468,-0.007506,-9.080482,4.012773,-4.627894,9.966865,6.369004,-3.850448,-4.044082,8.742819,0.631089,-0.696431,-1.478684,9.856631,-3.564109,5.225840,-3.464219,3.373676,-3.371504,3.954315,-4.479374,8.773060,-0.322863,0.399650,-2.979969,-8.654846,6.139183,8.582299,7.231671,8.048603,5.658398,8.538059,-0.270213,-5.537789,9.713334,-1.539500,-5.639993,0.427315,7.675780,-7.342087,-7.051609,5.384852,1.367514,5.839262,7.499246,-7.693509,9.863783,-7.103458,8.610101,-4.833339,8.891137,-0.797065,2.667620,-5.239000,-3.923445,-0.232613,-5.469111,-1.230038,-4.323077,-7.957352,-3.931918,-8.870781,-9.634068,-0.107828,1.490403,-8.935746,8.015871,9.404473,6.149468,6.220815,-9.760421,-8.269452,0.041720,-0.466859,-9.844428,-1.803502,0.281086,-4.409420,1.322570,7.724543,-4.376399,8.535804,-3.898108,-5.817123,0.325051,0.500644,6.301492,-2.624646,-3.492264,7.199206,2.544394,-7.471087,-2.331642], dtype = "float32")#candidate|123|(1400,)|const|float32
call_122 = relay.TupleGetItem(func_69_call(relay.reshape(const_123.astype('float32'), [14, 10, 10])), 3)
call_124 = relay.TupleGetItem(func_72_call(relay.reshape(const_123.astype('float32'), [14, 10, 10])), 3)
bop_125 = relay.floor_divide(uop_104.astype('float64'), relay.reshape(var_118.astype('float64'), relay.shape_of(uop_104))) # shape=(13, 14, 15)
var_128 = relay.var("var_128", dtype = "bool", shape = (13, 14, 15))#candidate|128|(13, 14, 15)|var|bool
bop_129 = relay.bitwise_or(bop_115.astype('uint16'), relay.reshape(var_128.astype('uint16'), relay.shape_of(bop_115))) # shape=(13, 14, 15)
uop_132 = relay.log10(bop_125.astype('float32')) # shape=(13, 14, 15)
uop_134 = relay.atanh(bop_112.astype('float64')) # shape=(13, 14, 15)
bop_136 = relay.floor_mod(uop_134.astype('float32'), relay.reshape(var_99.astype('float32'), relay.shape_of(uop_134))) # shape=(13, 14, 15)
uop_139 = relay.sqrt(bop_136.astype('float32')) # shape=(13, 14, 15)
bop_141 = relay.logical_and(bop_136.astype('bool'), relay.reshape(bop_125.astype('bool'), relay.shape_of(bop_136))) # shape=(13, 14, 15)
uop_144 = relay.atan(bop_119.astype('float32')) # shape=(13, 14, 15)
uop_146 = relay.rsqrt(uop_139.astype('float64')) # shape=(13, 14, 15)
func_39_call = mod.get_global_var('func_39')
func_43_call = mutated_mod.get_global_var('func_43')
call_148 = relay.TupleGetItem(func_39_call(relay.reshape(call_122.astype('int32'), [5,]), relay.reshape(call_122.astype('int32'), [5,]), ), 0)
call_149 = relay.TupleGetItem(func_43_call(relay.reshape(call_122.astype('int32'), [5,]), relay.reshape(call_122.astype('int32'), [5,]), ), 0)
uop_150 = relay.atan(uop_139.astype('float64')) # shape=(13, 14, 15)
uop_152 = relay.log2(uop_104.astype('float64')) # shape=(13, 14, 15)
func_39_call = mod.get_global_var('func_39')
func_43_call = mutated_mod.get_global_var('func_43')
call_154 = relay.TupleGetItem(func_39_call(relay.reshape(call_122.astype('int32'), [5,]), relay.reshape(call_148.astype('int32'), [5,]), ), 1)
call_155 = relay.TupleGetItem(func_43_call(relay.reshape(call_122.astype('int32'), [5,]), relay.reshape(call_148.astype('int32'), [5,]), ), 1)
uop_156 = relay.erf(uop_150.astype('float32')) # shape=(13, 14, 15)
bop_158 = relay.power(uop_139.astype('float32'), relay.reshape(var_118.astype('float32'), relay.shape_of(uop_139))) # shape=(13, 14, 15)
bop_161 = relay.greater_equal(uop_150.astype('bool'), relay.reshape(bop_112.astype('bool'), relay.shape_of(uop_150))) # shape=(13, 14, 15)
uop_164 = relay.sin(uop_139.astype('float32')) # shape=(13, 14, 15)
bop_166 = relay.logical_xor(uop_156.astype('uint8'), relay.reshape(var_128.astype('uint8'), relay.shape_of(uop_156))) # shape=(13, 14, 15)
var_169 = relay.var("var_169", dtype = "float32", shape = (13, 14, 15))#candidate|169|(13, 14, 15)|var|float32
bop_170 = relay.divide(bop_158.astype('float32'), relay.reshape(var_169.astype('float32'), relay.shape_of(bop_158))) # shape=(13, 14, 15)
bop_173 = relay.floor_divide(bop_166.astype('float64'), relay.reshape(bop_136.astype('float64'), relay.shape_of(bop_166))) # shape=(13, 14, 15)
bop_176 = relay.left_shift(bop_170.astype('uint32'), relay.reshape(var_108.astype('uint32'), relay.shape_of(bop_170))) # shape=(13, 14, 15)
bop_179 = relay.left_shift(uop_150.astype('int32'), relay.reshape(uop_146.astype('int32'), relay.shape_of(uop_150))) # shape=(13, 14, 15)
uop_182 = relay.atan(bop_173.astype('float64')) # shape=(13, 14, 15)
bop_184 = relay.power(uop_182.astype('float32'), relay.reshape(var_118.astype('float32'), relay.shape_of(uop_182))) # shape=(13, 14, 15)
var_187 = relay.var("var_187", dtype = "float32", shape = (13, 14, 15))#candidate|187|(13, 14, 15)|var|float32
bop_188 = relay.floor_divide(bop_184.astype('float64'), relay.reshape(var_187.astype('float64'), relay.shape_of(bop_184))) # shape=(13, 14, 15)
uop_191 = relay.tan(uop_182.astype('float32')) # shape=(13, 14, 15)
var_193 = relay.var("var_193", dtype = "float32", shape = (13, 14, 15))#candidate|193|(13, 14, 15)|var|float32
bop_194 = relay.greater(uop_191.astype('bool'), relay.reshape(var_193.astype('bool'), relay.shape_of(uop_191))) # shape=(13, 14, 15)
uop_197 = relay.log2(bop_184.astype('float64')) # shape=(13, 14, 15)
output = relay.Tuple([bop_101,call_122,const_123,bop_129,uop_132,bop_141,uop_144,call_148,uop_152,call_154,bop_161,uop_164,bop_176,bop_179,bop_188,bop_194,uop_197,])
output2 = relay.Tuple([bop_101,call_124,const_123,bop_129,uop_132,bop_141,uop_144,call_149,uop_152,call_155,bop_161,uop_164,bop_176,bop_179,bop_188,bop_194,uop_197,])
func_199 = relay.Function([var_99,var_100,var_108,var_118,var_128,var_169,var_187,var_193,], output)
mod['func_199'] = func_199
mod = relay.transform.InferType()(mod)
var_200 = relay.var("var_200", dtype = "uint32", shape = (13, 14, 15))#candidate|200|(13, 14, 15)|var|uint32
var_201 = relay.var("var_201", dtype = "uint32", shape = (13, 14, 15))#candidate|201|(13, 14, 15)|var|uint32
var_202 = relay.var("var_202", dtype = "float64", shape = (13, 14, 15))#candidate|202|(13, 14, 15)|var|float64
var_203 = relay.var("var_203", dtype = "int8", shape = (13, 14, 15))#candidate|203|(13, 14, 15)|var|int8
var_204 = relay.var("var_204", dtype = "bool", shape = (13, 14, 15))#candidate|204|(13, 14, 15)|var|bool
var_205 = relay.var("var_205", dtype = "float32", shape = (13, 14, 15))#candidate|205|(13, 14, 15)|var|float32
var_206 = relay.var("var_206", dtype = "float32", shape = (13, 14, 15))#candidate|206|(13, 14, 15)|var|float32
var_207 = relay.var("var_207", dtype = "float32", shape = (13, 14, 15))#candidate|207|(13, 14, 15)|var|float32
output = func_199(var_200,var_201,var_202,var_203,var_204,var_205,var_206,var_207,)
func_208 = relay.Function([var_200,var_201,var_202,var_203,var_204,var_205,var_206,var_207,], output)
mutated_mod['func_208'] = func_208
mutated_mod = relay.transform.InferType()(mutated_mod)
var_210 = relay.var("var_210", dtype = "float64", shape = ())#candidate|210|()|var|float64
var_211 = relay.var("var_211", dtype = "float64", shape = ())#candidate|211|()|var|float64
bop_212 = relay.power(var_210.astype('float64'), var_211.astype('float64')) # shape=()
var_215 = relay.var("var_215", dtype = "float64", shape = (16,))#candidate|215|(16,)|var|float64
bop_216 = relay.right_shift(var_210.astype('int64'), var_215.astype('int64')) # shape=(16,)
uop_219 = relay.cos(var_210.astype('float64')) # shape=()
bop_221 = relay.right_shift(var_210.astype('uint32'), uop_219.astype('uint32')) # shape=()
bop_224 = relay.bitwise_and(bop_212.astype('int32'), bop_221.astype('int32')) # shape=()
func_93_call = mod.get_global_var('func_93')
func_97_call = mutated_mod.get_global_var('func_97')
const_228 = relay.const([[4.304111,1.135875,3.111617,6.726481,-2.372111,0.819139,7.605603],[5.785210,8.887558,-2.165417,-4.669174,4.859233,-8.966809,-6.643705],[-2.766248,-1.125910,2.016644,2.688905,8.450232,-3.851333,1.097528],[-8.517767,-7.215304,9.040431,7.950937,-5.062327,-8.087219,6.861481],[7.288414,-1.945100,0.844973,9.400420,-4.301113,6.197457,1.592357],[2.941865,2.506147,6.767201,-6.760561,-5.256721,3.442382,7.203755],[-4.522689,-0.003047,-5.323288,-3.635024,3.167213,-6.316784,-2.401606],[6.507194,9.742230,-3.825501,-6.923618,-5.817990,7.088122,0.848379],[-4.858871,-9.405205,4.984786,-9.686396,0.699357,0.530090,-4.874074],[-8.660778,9.074082,-3.507825,7.495094,-2.158994,1.861430,-7.261226],[5.423289,4.122490,-8.647828,-9.744131,-5.222380,6.535213,3.451001],[-1.673157,1.290500,-2.907441,-1.307152,8.515470,-3.855401,4.005699],[3.002422,-0.788809,2.230638,-9.742351,7.337262,1.596245,9.732477],[-3.040807,0.657883,-6.447990,4.088423,-5.675110,8.261939,2.144414]], dtype = "float64")#candidate|228|(14, 7)|const|float64
const_229 = relay.const([-6.744514,6.328220,4.225041,7.016944,-3.812971,-9.760289,-0.248078,6.958759,9.917971,-9.576115,-7.461076,-5.689967,-3.343331,6.554937,7.654753,-5.996944,-0.738744,8.640935,2.441980,1.352011,-5.301153,8.750259,-2.693918,-1.540905,-8.587685,-7.434603,4.643991,6.912642,3.993719,7.189658,4.889679,-8.775403,0.638631,-1.856210,2.860695,7.712195,4.993024,-6.901687,7.341242,-4.102654,5.992499,-6.581812,9.202938,-7.225139,0.671098,1.597459,-2.580191,-1.841520,-9.883632,-7.909268,-8.319038,3.635182,9.681368,7.834476,-1.786089,-8.945381,7.712199,4.515075,-0.128123,1.222608,9.648318,0.731661,-8.005515,-8.635704,-1.177562,-1.000226,-1.879782,-7.737361,1.001664,-4.843066,8.906155,5.866171,9.769875,-9.457906,3.600127,2.371291,-9.466608,-5.006361,4.119300,2.281921,4.527343,-9.415432,1.570545,9.539787,0.169917,7.389479,1.881397,0.444274,0.458569,-9.133592,9.476761,3.250340,-0.592789,-8.614929,-3.689964,4.094937,-0.355128,8.897438,6.676831,-7.856595,-4.224795,9.412553,9.539020,2.155552,-9.412332,5.281746,5.637912,-1.375244,-1.873057,4.134998,-0.371250,-6.001974,8.273701,4.865442,5.897895,5.551486,9.396842,8.431501,7.002617,2.438395,-7.259168,8.247959,0.736708,-3.685961,-7.973441,4.130588,-9.116693,4.754622,9.827094,-6.381583,8.250903,2.839478,2.012779,1.736187,5.869463,-0.693319,4.204673,5.632098,0.606602,-3.032535,-1.970872,3.013175,9.890145,-1.506031,0.199636,0.952710,-4.739542,0.324910,3.333271,-3.301041,2.990953,6.735840,-8.735005,1.503603,-2.415378,2.395426,5.539090,3.881128,-1.995426,-8.652295,9.826715,-6.332368,-3.351189,8.342873,-2.198645,-5.460453,-4.402038,-3.351960,-6.572471,0.058761,6.603150,3.418134,0.207109,6.943694,-9.077331,7.141223,-6.295629,2.937498,2.731362,-2.035541,-9.097076,8.667941,-2.251365,3.935624,9.793349,5.506819,-8.187945,-0.855646,-6.995815,8.648484,5.024215,-0.550364,-7.599658,-7.984367,-9.753735,5.314775,5.844393,1.804503,-3.125271,-1.380846,0.411217,-7.887888,9.835169,2.774991,-9.554351,-1.460562,2.304481,9.294186,1.124761,4.516167,9.938078,-6.650467,1.797877,-8.930707,7.788776,-5.841442,9.882526,-6.537867,6.694535,-4.567146,-6.932283,6.067331,8.184336,4.170092,-5.993652,-3.430795,1.246769,-6.064700,-8.198028,-5.470965,5.790113,6.930827,6.913712,1.693327,2.120170,-5.621333,9.645087,-0.442303,6.961101,3.032077,-5.530436,5.173237,-9.194839,1.043743,-2.006705,-9.522081,-7.726159,-3.152144,1.446342,-6.795233,1.655585,-7.065757,-6.638877,9.130325,-9.048962,0.480511,-7.195108,-3.643985,-3.821152,-1.594208,0.681725,-3.589866,-9.658916,9.913285,5.427817,-0.732374,8.011427,0.420389,0.934355,5.871085,5.744352,3.062035,1.593382,-6.610590,1.072951,-2.038917,-3.671246,-4.214832,-3.719427,-4.621567,4.325648,-1.650387,-2.922829,-3.612748,4.536436,7.387223,-7.430782,-1.518523,4.911657,4.193372,1.242569,8.652053,-7.434899,-4.154822,-1.128298,-0.076174,-3.385297,-3.851331,-9.369178,-8.822145,-9.323823,-4.136205,-4.108298,-1.260891,-9.666124,-4.932018,1.214235,5.614858,3.331047,-1.717393,-4.531828,5.139256,-2.432984,1.757671,-4.861971,-0.740175,-7.036419,1.889468,3.729195,-2.537472,8.600317,-0.383689,-6.438909,5.405683,1.596128,1.144559,-0.839582,-2.259875,-1.241919,-6.529798,-6.866532,9.928419,0.542287,4.032494,-9.176077,-0.830692,9.894601,0.978473,-2.198646,2.787091,-2.349970,-3.100213,-0.768160,0.159765,-2.145667,0.991641,-5.250063,8.713994,-1.277371,7.983559,-9.976043,-5.870873,-6.425799,-4.984083,-1.655332,-1.704968,-7.607835,-6.644958,-8.330650,-5.189168,6.138571,1.627475,-7.156333,2.182720,6.763887,-2.634314,5.769067,3.301657,-8.674385,-4.064352,-6.423246,9.927426,6.350726,8.129615,-9.937463,3.920345,5.180887,3.798955,2.379615,-8.574762,8.392765,7.265612,-0.563465,-9.753903,-8.137308,1.162842,-8.814052,3.060952,-8.375672,2.019389,-2.808591,-6.730544,4.277553,-3.640187,4.978223,4.805472,8.872366,7.242721,-9.637689,-6.146511,-1.838469,9.586632,-1.196377,5.969015,4.614814,3.344459,0.043836,5.027040,-0.519566,3.500760,1.632120,-3.739881,7.711937,-3.792543,-7.066477,-4.291969,-4.514994,4.214562,6.595412,-1.106573,2.276907,-0.621358,8.907778,9.654348,4.954080,1.974028,6.853164,3.310394,0.297562,-9.218160,-8.996593,7.613703,-1.704938,-6.984037,8.254081,-4.535814,-1.528745,4.744218,6.581113,3.649177,9.102610,2.620048,5.287982,-7.783292,-2.123831,-2.602587,0.062729,9.209640,-9.093984,3.329154,-6.312614,-5.723202,2.159803,8.219860,-3.971770,4.084268,2.829473,-9.138608,-4.767290,-7.649136,-6.591989,1.926181,-2.963483,4.657189,-1.559326,-1.473133,6.818003,-0.382248,-5.350199,2.013408,-0.902753,-6.305262,3.880722,-2.939690,2.051010,-9.372728,3.743076,-0.261925,-0.078469,-2.075454,-9.874123,-7.365687,0.574267,-0.468317,-2.738539,-1.486185,4.853313,-6.022479,-9.194390,-2.207688,3.643489,6.259316,-3.679001,-2.580977,6.751359,-6.148331,9.589997,4.759267,1.759696,-7.158522,1.883054,-9.841587,-1.103132,4.894305,-9.051197,-9.086062,-4.566024,-7.497692,5.684567,-1.232574,-9.343468,9.629159,3.331318,-9.977332,-7.396224,-7.872468,-0.514654,-2.248402,0.820310,1.362936,5.823332,-7.015598,8.895779,4.457197,7.917595,7.032774,-3.247593,-5.305921,-3.906344,-5.432075,8.158826,-7.163656,1.400814,-0.581571,9.135224,-4.644547,-2.513570,-8.871514,-0.387674,-4.260300,4.592157,3.029499,-9.930574,2.393163,-1.092640,-5.661291,-8.603818,7.106597,2.522231,9.687682,5.161280,-0.009159,-4.065786,0.114761,-2.866301,-1.586999,-0.399664,3.692643,8.384569,6.554428,-2.376204,-8.695764,-8.958616,-3.103956,6.637050,-1.602914,-1.578110,-8.921628,-2.267384,5.073285,-0.817152,-5.568350,5.980628,7.983370,6.598645,-8.409980,-6.181763,-9.307339,5.939277,2.109626,-5.350450,2.368042,-3.577971,9.161041,-7.900118,3.212353,2.595605,9.216244,5.944604,5.536395,8.416163,-2.474361,-4.288137,-8.028422,3.087210,0.400694,-8.942890,-5.613022,-3.439593,6.515922,-1.953564,9.824679,-9.490191,-8.252091,-8.509420,-6.881905,-9.007893,1.938768,-1.545600,-7.300895,1.238733,0.858240,-7.137131,-5.643412,-6.121597,9.481725,-4.294297,-5.740828,7.335728,-0.040225,-7.064830,7.440731,2.240241,-2.788418,2.625580,-3.129444,-3.669240,-4.626546,5.426267,5.034572,-9.424308,4.270024,-6.000910,3.513052,-9.414528,0.831780,7.971907,4.355350,2.584652,-6.046856,-5.448696,-0.218413,-6.205870,-5.145325,4.531583,2.776914,-7.466030,6.954618,-2.452831,3.936530,-7.653021,-6.978132,0.028391,1.334173,3.367353,9.212093,-9.749913,-5.512373,-6.219820,-4.520630,-1.353550,6.964115,-7.411582,7.389356,-6.507101,-8.484789,2.068861,-2.969518,-7.945442,-1.952547,0.564390,-4.274382,8.175052,-7.131428,4.403025,7.019465,6.762671,-7.019720,6.395954,-9.747321,-7.853829,2.043269,0.982732,5.001847,6.899374,5.537232,9.602476,-3.627239,-8.416614,0.457605,6.575200,-0.041374,6.704305,3.518392,-9.095182,-7.389811,-4.776008,5.198547,7.049096,4.626137,-8.223146,6.219890,-6.645405,-2.211667,9.735233,-5.046020,-0.798595,0.271236,-3.914099,2.946737,-4.973237,7.178497,1.453496,2.258858,7.043483,6.655891,3.921722,-9.996972,-0.617331,4.712342,-0.997143,-8.641891,-9.866784,-3.034045,-2.814413,4.794969,-9.722338,2.530223,5.522238,-3.044760,-9.917648,-6.339199,6.653790,0.861336,6.879681,5.705379,5.063583,1.415727,7.773880,-0.330261,7.650121,-7.211420,-1.727021,0.116039,-6.630134,0.253654,9.704584,1.684326,-0.090694,-5.104837,1.836261,7.209044,3.820786,-5.350544,-0.351054,0.749147,-3.959554,1.423232,2.071851,9.857877,6.466914,-1.782995,-3.951730,7.123590,6.623106,7.462698,7.800986,2.514495,0.261696,9.851198,-2.189124,2.165632,-9.543356,8.714344,6.166711,-7.288258,5.788605,1.149740,-2.509097,-7.246263,-2.059032,-2.347188,-2.930743,-4.131114], dtype = "float64")#candidate|229|(784,)|const|float64
call_227 = relay.TupleGetItem(func_93_call(relay.reshape(const_228.astype('float64'), [7, 14, 1]), relay.reshape(const_229.astype('float64'), [7, 14, 8]), relay.reshape(const_229.astype('float64'), [7, 14, 8]), ), 1)
call_230 = relay.TupleGetItem(func_97_call(relay.reshape(const_228.astype('float64'), [7, 14, 1]), relay.reshape(const_229.astype('float64'), [7, 14, 8]), relay.reshape(const_229.astype('float64'), [7, 14, 8]), ), 1)
bop_231 = relay.not_equal(bop_224.astype('bool'), uop_219.astype('bool')) # shape=()
bop_234 = relay.bitwise_and(bop_231.astype('uint16'), var_210.astype('uint16')) # shape=()
uop_237 = relay.atan(bop_224.astype('float32')) # shape=()
uop_239 = relay.sinh(bop_231.astype('float32')) # shape=()
output = relay.Tuple([bop_216,call_227,const_228,const_229,bop_234,uop_237,uop_239,])
output2 = relay.Tuple([bop_216,call_230,const_228,const_229,bop_234,uop_237,uop_239,])
func_241 = relay.Function([var_210,var_211,var_215,], output)
mod['func_241'] = func_241
mod = relay.transform.InferType()(mod)
mutated_mod['func_241'] = func_241
mutated_mod = relay.transform.InferType()(mutated_mod)
func_241_call = mutated_mod.get_global_var('func_241')
var_243 = relay.var("var_243", dtype = "float64", shape = ())#candidate|243|()|var|float64
var_244 = relay.var("var_244", dtype = "float64", shape = ())#candidate|244|()|var|float64
var_245 = relay.var("var_245", dtype = "float64", shape = (16,))#candidate|245|(16,)|var|float64
call_242 = func_241_call(var_243,var_244,var_245,)
output = call_242
func_246 = relay.Function([var_243,var_244,var_245,], output)
mutated_mod['func_246'] = func_246
mutated_mod = relay.transform.InferType()(mutated_mod)
const_248 = relay.const([5.116920,8.543769,-2.076227,0.841856,-2.231050,-6.112242], dtype = "float32")#candidate|248|(6,)|const|float32
uop_249 = relay.rsqrt(const_248.astype('float32')) # shape=(6,)
uop_251 = relay.erf(uop_249.astype('float32')) # shape=(6,)
var_253 = relay.var("var_253", dtype = "float32", shape = (6,))#candidate|253|(6,)|var|float32
bop_254 = relay.logical_or(uop_251.astype('bool'), relay.reshape(var_253.astype('bool'), relay.shape_of(uop_251))) # shape=(6,)
var_257 = relay.var("var_257", dtype = "float32", shape = (6,))#candidate|257|(6,)|var|float32
bop_258 = relay.greater(uop_249.astype('bool'), relay.reshape(var_257.astype('bool'), relay.shape_of(uop_249))) # shape=(6,)
uop_261 = relay.cosh(var_257.astype('float64')) # shape=(6,)
uop_263 = relay.atan(bop_254.astype('float64')) # shape=(6,)
var_265 = relay.var("var_265", dtype = "float64", shape = (6,))#candidate|265|(6,)|var|float64
bop_266 = relay.bitwise_or(uop_261.astype('uint8'), relay.reshape(var_265.astype('uint8'), relay.shape_of(uop_261))) # shape=(6,)
uop_269 = relay.log10(uop_251.astype('float32')) # shape=(6,)
func_93_call = mod.get_global_var('func_93')
func_97_call = mutated_mod.get_global_var('func_97')
var_272 = relay.var("var_272", dtype = "float64", shape = (98, 1))#candidate|272|(98, 1)|var|float64
var_273 = relay.var("var_273", dtype = "float64", shape = (784,))#candidate|273|(784,)|var|float64
call_271 = relay.TupleGetItem(func_93_call(relay.reshape(var_272.astype('float64'), [7, 14, 1]), relay.reshape(var_273.astype('float64'), [7, 14, 8]), relay.reshape(var_273.astype('float64'), [7, 14, 8]), ), 1)
call_274 = relay.TupleGetItem(func_97_call(relay.reshape(var_272.astype('float64'), [7, 14, 1]), relay.reshape(var_273.astype('float64'), [7, 14, 8]), relay.reshape(var_273.astype('float64'), [7, 14, 8]), ), 1)
func_69_call = mod.get_global_var('func_69')
func_72_call = mutated_mod.get_global_var('func_72')
const_276 = relay.const([[-1.344233],[-7.032146],[-8.876627],[1.728285],[1.800089],[2.718052],[-7.908192],[-5.531614],[-3.278483],[-9.644019],[2.357901],[3.698506],[-6.746256],[-2.498622],[-6.771966],[-2.891359],[8.613591],[0.575673],[2.443813],[-5.527013],[1.028380],[-0.144856],[3.021436],[2.888531],[4.561798],[9.852839],[-3.703082],[-8.937805],[-8.350289],[8.768776],[-6.405570],[8.108615],[5.372109],[6.613346],[3.394802],[9.593042],[-8.243743],[5.810514],[2.513272],[7.593280],[-8.284294],[4.536795],[-0.998774],[7.101642],[-5.381967],[4.047299],[0.456764],[-3.029890],[6.205723],[4.786588],[2.501790],[5.683017],[2.402233],[4.819960],[-1.999666],[4.211842],[-2.222850],[9.161034],[-8.841506],[5.994699],[4.523233],[4.097177],[6.997811],[1.805241],[-6.043726],[-6.121104],[-0.745620],[0.890838],[-9.014817],[-6.429984],[2.619295],[4.646976],[-0.789186],[-8.074022],[-0.645855],[1.623106],[-5.480710],[-3.363135],[3.790813],[4.362211],[-7.753757],[4.147836],[4.746675],[-7.303674],[-7.385739],[-7.015948],[-1.229203],[5.027505],[-1.033826],[-8.415275],[1.358905],[3.925897],[-9.944257],[4.820610],[1.111990],[7.084693],[-4.671452],[-9.950860],[3.373424],[1.239493],[9.459702],[-5.458236],[-0.566206],[-8.528440],[4.602318],[6.703754],[8.803419],[2.992102],[-1.192984],[6.375060],[5.213575],[4.126541],[8.029546],[3.945149],[9.948740],[-8.953205],[3.681818],[-0.786281],[-4.819997],[-6.773593],[8.620221],[-7.301531],[-9.746795],[6.813866],[1.882485],[6.542877],[7.090931],[-9.469813],[-9.483758],[-5.592970],[0.115851],[2.895740],[5.882834],[-0.296966],[-1.409889],[2.287806],[-0.902732],[-5.768059],[1.896926],[2.467465],[-9.855886],[5.148264],[2.430653],[7.790375],[-5.711235],[7.868381],[-2.565844],[-2.272472],[8.597946],[-6.194253],[0.954087],[5.107436],[8.886646],[6.341446],[5.068515],[5.276590],[5.457154],[-9.310251],[2.338565],[-0.355243],[0.898205],[4.407074],[-8.961827],[1.617361],[-2.714334],[-4.590076],[8.050814],[7.724380],[2.847193],[-7.228038],[4.437105],[6.241053],[-3.049723],[6.174817],[6.569380],[4.210068],[-1.412559],[-5.578273],[-8.629389],[-1.258852],[1.006491],[1.160658],[-4.432771],[-4.856532],[7.502138],[1.798392],[-7.203393],[0.204472],[-8.599535],[-8.267646],[-4.805730],[-4.422116],[-4.088133],[-9.715329],[-8.757031],[8.079024],[6.415010],[-3.289928],[8.102675],[0.011688],[8.485502],[3.905101],[0.458576],[9.616870],[-7.608843],[0.632183],[0.370480],[2.890650],[0.466936],[1.305482],[-6.702570],[5.516197],[9.376204],[0.650928],[-8.909744],[9.341391],[5.677262],[-1.430767],[2.452454],[-4.306768],[6.099686],[-4.772857],[7.515566],[8.122024],[9.273859],[-0.689531],[7.304403],[5.665138],[-6.876104],[-7.421190],[-5.431926],[-3.445888],[-3.999346],[-1.602951],[-6.207106],[4.244537],[3.122648],[9.871783],[3.939009],[3.358793],[6.030928],[-6.400898],[9.989421],[5.088477],[7.783498],[2.011466],[9.804372],[4.705633],[-3.908898],[6.296383],[7.638437],[-8.195486],[-6.880844],[3.892500],[-6.560078],[1.506027],[7.210062],[4.952260],[5.831776],[-1.392588],[-4.727593],[-8.334900],[6.067336],[4.668808],[-8.437726],[0.809023],[-8.607694],[-7.424994],[0.901328],[-9.274359],[-1.198269],[0.773319],[-7.630548],[-9.829041],[8.041625],[-4.191885],[-4.837994],[7.059373],[-7.269249],[6.864155],[4.058097],[-6.641069],[6.766558],[-2.123521],[5.643372],[-8.924961],[-6.803992],[8.102713],[-0.601464],[7.444658],[-6.830467],[7.228002],[-8.394329],[-6.945356],[-8.983223],[2.259626],[-0.304635],[5.370250],[-4.435381],[-7.823848],[-6.782246],[6.742089],[-9.146588],[1.105864],[1.564628],[-0.411059],[-2.861652],[-4.421170],[-9.000938],[-6.377261],[4.889955],[-8.965974],[0.109861],[4.806709],[-9.236158],[8.612932],[-8.056764],[3.441397],[2.706713],[-8.117511],[1.620336],[-1.548311],[-9.250118],[3.751735],[-7.007217],[0.428245],[8.226701],[4.881201],[8.899632],[5.555974],[8.875557],[3.194590],[6.627912],[-3.623647],[2.562599],[4.064179],[-9.846584],[0.462223],[7.385542],[2.038370],[-3.599239],[9.719728],[7.011999],[-6.010428],[7.527897],[-0.165921],[2.905714],[-5.704270],[-9.014250],[1.190223],[2.357511],[1.803615],[8.192304],[5.676853],[9.213726],[-2.181760],[2.894123],[1.515703],[-1.427842],[-4.587564],[6.223140],[-8.761734],[-8.030287],[-9.696640],[-3.509635],[-8.380062],[-3.065398],[5.530796],[-4.846705],[-2.714510],[9.337462],[8.938477],[-9.241200],[4.333752],[5.065805],[-5.328595],[-0.063285],[9.395424],[-8.565806],[-1.960719],[7.553139],[-9.291134],[-3.955586],[1.052360],[-8.617801],[-4.866212],[-3.829107],[4.487494],[-8.824212],[-7.180819],[-5.267624],[1.004747],[8.726400],[6.803877],[-7.337994],[-6.070736],[-8.889872],[4.944632],[-6.990502],[-0.993288],[7.746043],[9.996085],[-9.629176],[-6.345585],[6.543193],[-1.029486],[-9.968910],[5.739837],[-8.741598],[8.949095],[-8.096935],[5.182423],[-7.946476],[5.547770],[2.728069],[-7.833764],[-2.440090],[4.565992],[-5.983439],[5.081068],[-8.974203],[7.155731],[6.907566],[-0.812315],[0.712848],[-6.471908],[-8.101280],[-9.750275],[1.221971],[4.979495],[7.258505],[1.855664],[3.575808],[8.394374],[-1.391918],[-1.907113],[-0.173008],[8.488906],[-1.431283],[-3.979302],[4.635212],[8.193947],[-0.014240],[5.896948],[0.625943],[-1.120264],[-1.451667],[-1.523126],[-0.091067],[1.248189],[-5.967442],[4.527637],[7.597916],[2.718905],[1.081203],[2.182564],[-2.112055],[-0.673958],[-8.758596],[-8.433591],[-7.039994],[7.974129],[-6.390482],[5.340931],[1.495364],[-9.913581],[-5.467508],[-0.596841],[-4.007035],[8.998842],[1.574642],[6.413791],[9.580460],[-8.944664],[2.769263],[4.384101],[-5.566843],[-2.971004],[-9.825407],[5.953264],[-0.887609],[0.170033],[-2.286102],[-9.434764],[1.912478],[-2.197276],[-2.428745],[8.368491],[5.539462],[1.157660],[-6.407155],[-0.703058],[7.803473],[-5.664947],[-6.201459],[0.334619],[4.825808],[8.793188],[8.395976],[-7.126742],[1.300363],[2.442377],[-2.944066],[7.555884],[8.387869],[-7.990840],[7.849148],[-5.471895],[4.482201],[-2.286531],[-4.341724],[-9.542809],[9.812834],[7.900228],[6.275912],[9.518207],[-0.470615],[-3.124543],[2.852581],[-7.189967],[8.374194],[6.055857],[-6.463280],[2.879555],[-0.038815],[9.348586],[-4.119144],[-1.549730],[-4.519306],[-6.420972],[4.857420],[-4.228984],[-2.952872],[2.289536],[7.327563],[-5.288892],[-7.315564],[3.036878],[1.369904],[1.686579],[6.035397],[5.116595],[-4.680096],[8.541090],[1.975249],[9.139945],[9.938681],[3.149452],[-9.409000],[-4.205641],[-0.898588],[-8.854583],[-5.127279],[2.194850],[7.020471],[9.216010],[-4.507360],[-8.088094],[-3.718981],[6.078409],[8.783880],[-4.057796],[-6.871699],[-6.629726],[-2.124418],[-9.289055],[-3.902130],[-5.191969],[6.617316],[-6.166515],[-5.094916],[1.162340],[-5.143896],[8.121760],[2.355078],[1.499639],[4.210704],[5.228175],[0.765968],[4.682408],[-5.826590],[-0.313109],[-5.625864],[7.231817],[4.354970],[-8.539908],[4.435090],[-4.323501],[7.422202],[-4.291111],[-7.616196],[4.830305],[-4.662638],[2.873405],[0.338564],[5.518047],[4.523915],[-2.545897],[-0.873768],[5.523522],[2.483432],[3.306454],[2.891524],[1.055543],[-2.915541],[1.597374],[1.897701],[-7.668231],[0.416487],[2.795726],[-9.684917],[8.416474],[-1.481300],[-4.365078],[1.220452],[-1.612608],[1.741542],[-7.549861],[6.127863],[-9.194991],[7.210263],[-3.793384],[-5.620372],[-1.834304],[1.608028],[-9.371690],[7.936090],[6.805323],[5.210518],[-3.386897],[1.529268],[-4.591844],[5.340787],[4.870290],[-3.458318],[-2.332990],[2.082344],[-8.337960],[9.342579],[4.438235],[-6.691772],[4.272210],[1.347022],[4.663258],[-7.439967],[-6.562668],[1.797840],[-3.939423],[6.566573],[1.349429],[2.977481],[1.563092],[3.297601],[5.804135],[9.667179],[5.586229],[-6.793413],[9.347546],[1.449421],[4.111860],[-9.502760],[2.533736],[-9.282485],[-7.241228],[6.064338],[4.229070],[8.138805],[0.101243],[-6.544197],[-5.318383],[9.000112],[2.958386],[-3.575151],[-4.249777],[9.560488],[1.942664],[8.005794],[9.044945],[-2.579796],[4.972893],[-1.202782],[2.725645],[7.906848],[-1.805247],[2.314472],[6.609820],[-1.927024],[-9.548950],[0.600402],[-9.015718],[-1.326605],[3.433654],[-6.264650],[7.772231],[-8.149761],[-7.872473],[4.700364],[2.351803],[-0.506755],[-6.438320],[-7.392528],[-9.954163],[-3.761310],[8.568433],[6.055204],[6.111127],[1.273899],[9.907612],[9.919161],[-8.281583],[1.673443],[-6.825824],[-9.719564],[-4.386234],[6.283321],[-3.358740],[-3.553094],[-3.346922],[-3.619259],[7.293572],[2.997346],[5.022008],[7.479004],[-9.831437],[-9.080113],[-1.243302],[7.513306],[-1.569880],[-0.807085],[-1.741266],[-6.563335],[9.399016],[-6.987995],[6.883042],[9.342962],[-0.587309],[2.035188],[8.697196],[5.522149],[-9.370105],[7.532374],[8.315263],[4.177876],[-1.906402],[-8.854698],[-2.649268],[-4.690258],[-7.461997],[9.279093],[5.787584],[-9.964043],[-7.243451],[6.971199],[-4.935150],[1.944649],[-2.155279],[0.074758],[-6.520922],[-6.071063],[4.303020],[1.736352],[7.101296],[1.829202],[-4.569801],[0.970311],[-9.514508],[-0.764441],[-1.780849],[-6.627032],[-7.409512],[3.198058],[-6.794781],[-5.131176],[8.745896],[-5.747057],[-4.324060],[-0.049157],[3.181452],[6.755760],[6.942877],[8.346598],[-3.715371],[-7.861904],[8.340885],[3.168127],[-2.316361],[6.739374],[0.558806],[5.308780],[-8.247627],[2.339250],[-9.526801],[-7.785863],[-4.402024],[2.974232],[-2.633898],[2.417824],[-4.040626],[6.965425],[-7.942632],[6.745030],[3.654137],[-1.913441],[9.271031],[-9.315738],[0.010284],[-4.768660],[5.548916],[9.546376],[-7.586692],[3.481380],[3.758631],[3.191713],[-1.799208],[0.300200],[7.370714],[-7.176983],[2.763936],[2.119891],[-1.871312],[-4.966052],[-9.111924],[7.606321],[7.798800],[4.881446],[-5.226976],[9.161898],[5.698432],[1.166167],[0.202110],[-3.727434],[-2.324116],[-9.514174],[9.726082],[-9.775505],[1.686455],[2.280871],[5.764966],[3.045116],[4.924265],[-3.394349],[-0.234011],[7.042502],[-6.746014],[7.658553],[-0.542005],[-6.706314],[-0.777395],[-9.226826],[-2.693510],[-9.191625],[-4.034325],[9.099527],[-7.192846],[-6.592177],[8.852122],[8.809475],[-8.207473],[4.848279],[-9.786884],[1.340912],[6.981656],[3.369394],[-2.003579],[2.138333],[-1.996498],[-7.989806],[-3.527584],[-1.891052],[-7.165305],[-4.838871],[0.646306],[7.467845],[8.929116],[-3.970234],[-6.369218],[-0.329777],[9.901284],[5.033264],[7.035044],[-8.253259],[-9.435868],[-2.222631],[0.548682],[-1.282926],[-9.229607],[2.990310],[-6.443248],[7.285026],[-0.699606],[0.736740],[3.291868],[-5.187491],[6.632282],[-1.073374],[-9.485719],[-4.439144],[6.778638],[7.173796],[2.450214],[7.560404],[7.702806],[9.205293],[5.087368],[4.682320],[-3.674490],[-8.076967],[-6.620155],[-3.434366],[2.106341],[-0.437682],[-4.438023],[-6.460107],[-1.718563],[-2.420364],[3.480401],[0.708554],[-1.873299],[5.189652],[6.478149],[9.647201],[2.780180],[-7.966573],[-0.265066],[-2.075460],[8.142435],[-1.207861],[3.478018],[-1.211527],[-7.628317],[-6.823539],[-0.575085],[-2.203981],[-6.172786],[-9.336930],[-9.628173],[-3.938572],[-0.723126],[7.372799],[1.578767],[-8.865445],[8.377421],[-5.337496],[9.405098],[-4.249894],[0.772319],[-1.280261],[-9.490648],[8.288213],[-6.861492],[-2.595113],[9.462925],[-3.652759],[9.498308],[1.199989],[6.965110],[-4.534842],[-2.354643],[-6.909487],[4.525846],[2.544090],[2.417644],[-0.250122],[6.369199],[-2.253258],[8.698666],[-2.440662],[4.098787],[-3.383409],[1.465542],[-8.067538],[7.136065],[6.777273],[1.677168],[-5.464333],[-4.020732],[-9.186639],[9.448290],[5.868719],[-1.108901],[-2.311274],[-4.416627],[-2.366585],[6.628351],[4.439328],[-5.232351],[-1.839682],[-7.720484],[6.723644],[5.097227],[-2.359903],[-2.831609],[9.882783],[6.436807],[-5.726241],[-0.157819],[8.373544],[4.397429],[2.092668],[0.239994],[1.237345],[-2.683628],[3.339453],[7.647761],[-6.285134],[-7.750998],[-8.923700],[3.186769],[-1.049228],[-9.007615],[-2.834715],[7.537382],[-9.790431],[-1.535504],[-2.745878],[-1.047735],[8.896793],[1.396218],[7.692172],[-0.642052],[5.378340],[-6.703265],[5.635700],[7.530050],[-0.270776],[-2.010547],[-0.290220],[-9.639377],[-2.283575],[-8.420879],[-3.910400],[9.298713],[8.487109],[0.337802],[4.530479],[2.226795],[-5.577687],[3.356649],[1.233005],[-3.367419],[-8.260886],[6.948533],[-0.632929],[8.620602],[-5.935000],[1.137257],[-7.680451],[-1.614699],[8.155653],[-7.083399],[7.407302],[1.293020],[0.246661],[9.782475],[3.675761],[-7.471027],[-9.821238],[6.680177],[-8.746785],[-2.698705],[-9.042126],[9.964081],[-8.987483],[6.493379],[4.376110],[-6.651946],[7.882454],[5.048091],[-3.937589],[1.583657],[-2.266991],[-0.225732],[6.376069],[0.963003],[-9.072198],[-5.805714],[-8.625435],[-1.839392],[-5.267656],[-5.813885],[0.391254],[-5.167891],[0.693309],[-7.242339],[8.218622],[1.056907],[6.284300],[-7.875674],[9.796443],[-1.069211],[2.522977],[5.311996],[4.613664],[-8.394916],[2.885372],[9.203875],[-2.731634],[0.725074],[9.158383],[0.023965],[2.086468],[-6.382711],[-4.950781],[-0.568640],[9.567335],[-7.069651],[7.988925],[-0.567136],[8.103557],[-1.904749],[9.889272],[2.958722],[-0.918128],[1.119775],[-9.454736],[-8.768595],[-5.457086],[8.992535],[9.658079],[-9.184147],[-1.910452],[-3.968374],[-7.574850],[-3.415597],[4.227218],[-0.913472],[9.064728],[-9.393379],[-6.095803],[9.885387],[2.524278],[0.491314],[7.467322],[-4.315978],[-0.561852],[2.896908],[9.902582],[-8.265196],[-6.335767],[1.051985],[-0.410154],[-8.479514],[-4.693001],[4.738705],[9.144530],[0.779206],[-5.141587],[-3.402832],[1.547281],[-3.497675],[2.940213],[2.291115],[6.917670],[0.173382],[-5.501066],[-9.349597],[-0.469031],[-7.798652],[0.244286],[-4.596548],[2.900846],[7.401171],[-9.630380],[9.324857],[6.005016],[6.011499],[6.893505],[4.417227],[-9.812864],[-1.497492],[-4.271724],[6.218797],[4.580704],[1.194311],[1.296940],[5.625668],[2.880028],[-4.387850],[-2.765100],[-3.355217],[-6.985002],[2.078984],[-1.159013],[-6.548238],[0.702824],[6.275911],[2.520436],[-7.176921],[4.889137],[-9.344469],[8.385250],[7.348811],[-2.064663],[-6.589416],[0.300194],[-2.846341],[-4.861190],[8.934566],[8.115135],[-7.830786],[-0.800256],[-0.180852],[-4.389606],[-0.602044],[-5.753092],[3.500365],[1.910847],[-4.316315],[-1.535387],[-1.868451],[7.980666],[8.182235],[-2.348158],[-5.101525],[0.857416],[-8.494282],[9.285686],[0.856808],[-5.469946],[2.549010],[-8.216601],[-0.503351],[4.094953],[-9.903978],[-8.458242],[7.937366],[4.858797],[9.190563],[0.914740],[1.223863],[-4.652839],[-4.915539],[-1.054359],[-1.300539],[9.373229],[9.747287],[-4.902089],[0.217066],[6.864042],[3.236068],[7.440828],[1.141987],[-4.452518],[-1.128701],[6.711543],[-3.071080],[-7.416006],[8.037893],[-3.391627],[1.487577],[9.125774],[-8.210220],[-3.889871],[4.853686],[7.790480],[2.918640],[4.801799],[6.486609],[-4.803542],[8.520245],[-4.773432],[4.131413],[-5.461460],[5.792832],[-4.124333],[-5.888742],[-0.057283],[0.743555],[7.121737],[-6.517326],[-4.747091],[5.717066],[-9.279974],[0.670496],[-4.860316],[-9.269196],[-4.581884],[0.652490],[-8.951831],[4.748697],[9.400628],[-1.773113],[-7.592031],[4.908212],[-6.291128],[-4.859147],[0.901900],[-3.077625],[6.493384],[-0.096544],[-7.297552],[-3.687099],[5.953349],[4.186120],[-5.016416],[-3.248096],[6.815096],[2.368153],[4.748240],[3.936654],[-7.654233],[-3.199156],[3.289631],[-3.066240],[-4.508063],[-7.358020],[7.159439],[8.052506],[7.674101],[2.266045],[3.823297],[2.003200],[-3.170862],[3.043639],[4.753315],[-0.746478],[-7.278298],[-4.957675],[8.313799],[-9.495544],[2.095945],[3.101082],[3.633989],[1.436194],[9.727846],[0.026052],[7.969593],[3.986691],[5.292075],[2.009609],[0.248999],[9.415078],[-6.235302],[6.188126],[-8.264689],[5.893003],[4.633927],[-1.512597],[7.926871],[1.996096],[-3.330079],[4.704275],[1.517429],[-8.663105],[7.831308],[-7.433491],[9.502104],[9.129741],[6.540873],[2.611808],[-0.958302],[7.704502],[7.189872],[9.124569],[-5.577717],[-8.845203],[9.339734],[-1.684289],[-2.610578],[5.258017],[-7.075300],[7.924259],[2.001784],[4.891962],[3.804956],[-6.136533],[1.449482],[1.470263],[-7.251511],[7.093068],[5.691827],[3.815795],[6.290293],[-8.268161],[-3.925453],[-7.859764],[6.317405],[-1.015712],[-6.107797],[1.813647],[2.398029],[4.713323],[3.337429],[7.109402],[7.861023],[-2.002278],[-8.952777],[5.341962],[1.601235],[-8.253535],[-7.261707],[-5.571511],[-7.172959],[-3.814086],[-6.938204],[-5.755036],[-3.759404],[-1.893411],[6.830711],[5.590122]], dtype = "float32")#candidate|276|(1400, 1)|const|float32
call_275 = relay.TupleGetItem(func_69_call(relay.reshape(const_276.astype('float32'), [14, 10, 10])), 1)
call_277 = relay.TupleGetItem(func_72_call(relay.reshape(const_276.astype('float32'), [14, 10, 10])), 1)
uop_278 = relay.cos(uop_263.astype('float64')) # shape=(6,)
uop_280 = relay.rsqrt(bop_258.astype('float64')) # shape=(6,)
bop_282 = relay.floor_divide(uop_278.astype('float64'), relay.reshape(uop_251.astype('float64'), relay.shape_of(uop_278))) # shape=(6,)
uop_285 = relay.cos(uop_269.astype('float32')) # shape=(6,)
var_287 = relay.var("var_287", dtype = "float32", shape = (6,))#candidate|287|(6,)|var|float32
bop_288 = relay.equal(uop_251.astype('bool'), relay.reshape(var_287.astype('bool'), relay.shape_of(uop_251))) # shape=(6,)
uop_291 = relay.sinh(bop_282.astype('float32')) # shape=(6,)
var_293 = relay.var("var_293", dtype = "float32", shape = (6,))#candidate|293|(6,)|var|float32
bop_294 = relay.logical_or(uop_285.astype('bool'), relay.reshape(var_293.astype('bool'), relay.shape_of(uop_285))) # shape=(6,)
func_199_call = mod.get_global_var('func_199')
func_208_call = mutated_mod.get_global_var('func_208')
var_298 = relay.var("var_298", dtype = "uint32", shape = (14, 195))#candidate|298|(14, 195)|var|uint32
call_297 = relay.TupleGetItem(func_199_call(relay.reshape(var_298.astype('uint32'), [13, 14, 15]), relay.reshape(var_298.astype('uint32'), [13, 14, 15]), relay.reshape(var_298.astype('float64'), [13, 14, 15]), relay.reshape(var_298.astype('int8'), [13, 14, 15]), relay.reshape(var_298.astype('bool'), [13, 14, 15]), relay.reshape(var_298.astype('float32'), [13, 14, 15]), relay.reshape(var_298.astype('float32'), [13, 14, 15]), relay.reshape(var_298.astype('float32'), [13, 14, 15]), ), 8)
call_299 = relay.TupleGetItem(func_208_call(relay.reshape(var_298.astype('uint32'), [13, 14, 15]), relay.reshape(var_298.astype('uint32'), [13, 14, 15]), relay.reshape(var_298.astype('float64'), [13, 14, 15]), relay.reshape(var_298.astype('int8'), [13, 14, 15]), relay.reshape(var_298.astype('bool'), [13, 14, 15]), relay.reshape(var_298.astype('float32'), [13, 14, 15]), relay.reshape(var_298.astype('float32'), [13, 14, 15]), relay.reshape(var_298.astype('float32'), [13, 14, 15]), ), 8)
bop_300 = relay.subtract(uop_291.astype('float32'), relay.reshape(uop_251.astype('float32'), relay.shape_of(uop_291))) # shape=(6,)
uop_303 = relay.log(uop_291.astype('float64')) # shape=(6,)
bop_305 = relay.bitwise_and(uop_303.astype('uint16'), relay.reshape(const_248.astype('uint16'), relay.shape_of(uop_303))) # shape=(6,)
bop_308 = relay.greater(uop_303.astype('bool'), relay.reshape(const_248.astype('bool'), relay.shape_of(uop_303))) # shape=(6,)
bop_311 = relay.minimum(bop_305.astype('float64'), relay.reshape(uop_291.astype('float64'), relay.shape_of(bop_305))) # shape=(6,)
bop_314 = relay.mod(uop_263.astype('float32'), relay.reshape(bop_266.astype('float32'), relay.shape_of(uop_263))) # shape=(6,)
uop_317 = relay.cosh(bop_254.astype('float64')) # shape=(6,)
bop_319 = relay.subtract(bop_305.astype('uint8'), relay.reshape(bop_314.astype('uint8'), relay.shape_of(bop_305))) # shape=(6,)
uop_322 = relay.log(uop_291.astype('float32')) # shape=(6,)
uop_324 = relay.log(bop_300.astype('float64')) # shape=(6,)
uop_326 = relay.tan(bop_308.astype('float64')) # shape=(6,)
uop_328 = relay.exp(uop_291.astype('float64')) # shape=(6,)
const_330 = relay.const([-9.267943,8.758400,-5.309946,-1.437899,3.231821,4.979582], dtype = "float64")#candidate|330|(6,)|const|float64
bop_331 = relay.greater(uop_326.astype('bool'), relay.reshape(const_330.astype('bool'), relay.shape_of(uop_326))) # shape=(6,)
uop_334 = relay.atan(bop_294.astype('float32')) # shape=(6,)
uop_336 = relay.sqrt(uop_324.astype('float64')) # shape=(6,)
uop_338 = relay.acos(bop_319.astype('float32')) # shape=(6,)
bop_340 = relay.not_equal(bop_319.astype('bool'), relay.reshape(uop_278.astype('bool'), relay.shape_of(bop_319))) # shape=(6,)
bop_343 = relay.left_shift(uop_326.astype('uint16'), relay.reshape(bop_282.astype('uint16'), relay.shape_of(uop_326))) # shape=(6,)
output = relay.Tuple([call_271,var_272,var_273,call_275,const_276,uop_280,bop_288,call_297,var_298,bop_311,uop_317,uop_322,uop_328,bop_331,uop_334,uop_336,uop_338,bop_340,bop_343,])
output2 = relay.Tuple([call_274,var_272,var_273,call_277,const_276,uop_280,bop_288,call_299,var_298,bop_311,uop_317,uop_322,uop_328,bop_331,uop_334,uop_336,uop_338,bop_340,bop_343,])
func_346 = relay.Function([var_253,var_257,var_265,var_272,var_273,var_287,var_293,var_298,], output)
mod['func_346'] = func_346
mod = relay.transform.InferType()(mod)
mutated_mod['func_346'] = func_346
mutated_mod = relay.transform.InferType()(mutated_mod)
func_346_call = mutated_mod.get_global_var('func_346')
var_348 = relay.var("var_348", dtype = "float32", shape = (6,))#candidate|348|(6,)|var|float32
var_349 = relay.var("var_349", dtype = "float32", shape = (6,))#candidate|349|(6,)|var|float32
var_350 = relay.var("var_350", dtype = "float64", shape = (6,))#candidate|350|(6,)|var|float64
var_351 = relay.var("var_351", dtype = "float64", shape = (98, 1))#candidate|351|(98, 1)|var|float64
var_352 = relay.var("var_352", dtype = "float64", shape = (784,))#candidate|352|(784,)|var|float64
var_353 = relay.var("var_353", dtype = "float32", shape = (6,))#candidate|353|(6,)|var|float32
var_354 = relay.var("var_354", dtype = "float32", shape = (6,))#candidate|354|(6,)|var|float32
var_355 = relay.var("var_355", dtype = "uint32", shape = (14, 195))#candidate|355|(14, 195)|var|uint32
call_347 = func_346_call(var_348,var_349,var_350,var_351,var_352,var_353,var_354,var_355,)
output = call_347
func_356 = relay.Function([var_348,var_349,var_350,var_351,var_352,var_353,var_354,var_355,], output)
mutated_mod['func_356'] = func_356
mutated_mod = relay.transform.InferType()(mutated_mod)
var_358 = relay.var("var_358", dtype = "float32", shape = ())#candidate|358|()|var|float32
uop_359 = relay.acos(var_358.astype('float32')) # shape=()
const_361 = relay.const([[[-5.556962,8.924937,-7.876913,-4.783688,-3.315701,-0.184375,7.207676,2.225683,-6.995918,-7.524886,-2.470950,6.930793,2.874043,-3.333920,-0.714290,3.024992],[-1.152310,-7.276353,-9.616389,7.038911,5.759975,-6.815508,-4.430210,-6.363629,-4.701191,-9.802421,4.826562,9.479295,-6.071488,5.986554,-0.405287,9.281525],[6.990781,9.856154,0.492662,-8.385464,0.422586,2.837685,-7.827752,-4.666427,1.362326,1.272580,-3.925504,9.343392,-4.217827,0.589405,4.891819,-8.051566],[1.172096,-9.002539,-2.733938,9.845217,-8.869303,4.923372,7.109739,0.113283,6.621411,6.197133,5.858934,-4.104493,4.477413,-3.070598,5.214450,0.036176],[3.600017,7.503552,-3.326186,0.624997,6.513117,-5.785591,-8.496536,2.898715,-1.734702,-5.354723,5.327172,-9.511262,-5.071948,3.491290,0.947154,-3.516124]],[[1.857524,-5.699544,6.434894,-3.559740,-0.522737,6.466198,-6.521388,-1.690188,8.875800,-1.591497,-8.275447,-0.366993,-1.419403,-2.609397,-1.806461,-7.398556],[-3.251432,-1.168308,-3.893636,-2.642018,1.397206,2.091235,2.470392,-3.282894,-6.494054,8.291732,8.820959,-6.323076,-2.782409,5.641990,3.923818,-8.600701],[-3.799836,5.802204,4.499919,-6.158298,8.060195,-6.676245,5.028159,-6.577845,5.737114,-5.689642,1.868170,-2.461421,9.504258,-2.526307,1.330873,-5.758126],[4.302421,-9.900460,-6.538896,4.812173,9.290768,-2.922456,5.244518,-5.988464,-4.240227,0.827040,3.459610,0.997213,-5.137933,-5.914219,-6.058955,7.548662],[-3.878818,-0.102464,-6.627706,1.936324,5.878908,6.602609,-8.711790,-3.999470,-2.199842,-8.700746,0.363879,4.787335,8.416226,-9.560057,-1.214167,-9.842446]],[[8.027638,2.771052,-7.487161,2.223662,-1.216913,-2.836272,4.719057,-8.055706,5.668115,7.745210,-9.001599,-5.525994,-2.088538,-2.428939,-7.132317,-7.109132],[2.636369,-5.791065,-6.778359,-4.781930,-3.794504,1.380467,2.483075,9.889957,-9.125658,4.403164,9.157813,-2.794650,-4.647082,3.179525,3.400539,7.111374],[5.413393,3.483416,7.565912,4.639554,-3.140993,6.549575,-4.724982,-5.095849,-3.756566,6.866118,2.638875,4.576997,-2.896459,3.377159,-2.898892,3.075098],[-1.184700,7.019555,-0.970879,8.876627,0.309295,-2.110739,5.821289,-8.551922,-0.662447,-2.321570,-1.882801,-1.966050,-1.255737,-9.562890,-2.043473,-7.190840],[-3.972791,-0.642279,-3.902403,-1.039224,6.842902,4.806482,8.761703,-3.942061,-6.300197,-4.189414,-3.319711,4.243908,-0.382362,-1.544532,8.832548,3.708247]],[[-4.063007,-6.795036,7.556611,9.120744,5.073305,3.336318,-7.053122,1.088867,-5.731587,0.870873,-2.343213,5.311846,0.741599,3.774713,4.941241,-3.626603],[-0.088101,-3.052560,6.517453,-8.418029,3.408729,-5.041834,4.455499,-4.675881,2.485188,9.103997,-0.758182,-6.389346,-1.101975,9.407053,-1.141118,5.579592],[-2.055200,-4.599538,3.284037,9.347348,-0.220963,8.630736,9.003961,-7.057360,5.896783,-6.554886,-9.981928,3.172056,-0.871701,-5.559969,9.365059,1.082725],[-6.854304,3.455789,5.854615,-0.757559,-4.452731,0.068212,8.759782,-9.503100,0.525358,-3.098783,0.512454,-1.023707,-1.859773,-0.186170,0.854348,-6.524474],[5.984970,1.701782,-4.042611,9.970625,8.147769,-9.342812,-5.911063,-7.117863,1.287379,7.579956,-6.423237,-6.339841,9.838279,-1.344887,-0.021842,-3.355247]],[[6.101297,-9.084061,5.300435,-8.022460,4.891111,7.764109,-9.602264,5.337702,-0.960208,-9.910217,9.235465,-2.835808,-7.145479,8.189165,0.482327,-4.231997],[7.051165,-4.272921,-8.054983,-1.264780,2.467377,3.776054,0.970243,2.070183,-8.011376,-6.331630,-4.675655,-4.102342,-1.860594,8.398308,1.380553,-5.188698],[8.909734,4.776325,6.474955,1.434254,8.319560,-3.167788,3.040240,-4.940260,-3.329943,7.145766,0.597302,8.286215,3.118672,8.198570,-6.834751,-8.007666],[-2.701295,-8.536434,8.694231,-2.076930,-3.606937,5.704900,-9.336176,7.643112,-9.441082,8.967533,-2.451237,4.915766,-6.682274,-0.991853,-9.734102,-7.542519],[-7.650160,9.329157,-0.387760,-5.133124,-5.475781,-9.224068,-5.272509,3.853480,1.580404,-1.514098,1.602252,5.540476,2.496761,0.555585,-8.022713,-2.312024]],[[-2.989856,-4.111522,-8.118240,2.669967,-5.588307,8.683591,-9.730949,-0.310425,-2.772994,2.721722,-7.477731,5.487751,9.475372,-4.468683,-7.358769,-1.383406],[-9.815553,7.529589,-9.111166,3.539814,-6.825453,9.260534,-7.196524,-5.264428,-1.515823,-6.567266,5.084122,-9.527272,-5.367148,-7.479105,-8.720642,7.518818],[-1.383290,1.142129,-5.148382,3.734584,7.621878,1.242887,-3.808458,-4.156277,0.361533,-0.813062,-8.705799,7.983650,5.699922,6.652551,1.863296,-5.700684],[6.227640,-9.872321,-9.313716,2.357416,-3.496091,9.240751,-4.735891,8.521564,4.673197,-9.018605,5.553929,-9.651203,-7.182037,-7.476101,8.908244,1.516645],[-4.548595,-7.220607,2.564967,-5.512218,-8.432103,0.053775,-7.682597,-5.282493,-4.859082,0.535402,4.503711,-0.154683,-1.654175,9.647216,7.089426,-7.462370]]], dtype = "float32")#candidate|361|(6, 5, 16)|const|float32
bop_362 = relay.add(var_358.astype('uint16'), const_361.astype('uint16')) # shape=(6, 5, 16)
output = relay.Tuple([uop_359,bop_362,])
output2 = relay.Tuple([uop_359,bop_362,])
F = relay.Function([var_358,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_358,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_358= np.array(-3.697002, dtype='float32')
module1.set_input('var_358', input_358)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_358, )
res3 = intrp3.evaluate()(input_358, )
res4 = intrp4.evaluate()(input_358, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
module5.set_input('var_358', input_358)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_358, )
res7 = intrp7.evaluate()(input_358, )
res8 = intrp8.evaluate()(input_358, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
module9.set_input('var_358', input_358)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_358, )
res11 = intrp11.evaluate()(input_358, )
res12 = intrp12.evaluate()(input_358, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
module13.set_input('var_358', input_358)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_358, )
res15 = intrp15.evaluate()(input_358, )
res16 = intrp16.evaluate()(input_358, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
module17.set_input('var_358', input_358)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_358, )
res19 = intrp19.evaluate()(input_358, )
res20 = intrp20.evaluate()(input_358, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
module21.set_input('var_358', input_358)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_358, )
res23 = intrp23.evaluate()(input_358, )
res24 = intrp24.evaluate()(input_358, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()

'''65529, 65534,     6,     2, 65533,     0,     3],

'''