import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "int32", shape = (7, 9, 3))#candidate|0|(7, 9, 3)|var|int32
var_1 = relay.var("var_1", dtype = "int32", shape = (7, 9, 3))#candidate|1|(7, 9, 3)|var|int32
bop_2 = relay.left_shift(var_0.astype('int32'), relay.reshape(var_1.astype('int32'), relay.shape_of(var_0))) # shape=(7, 9, 3)
var_5 = relay.var("var_5", dtype = "int32", shape = (7, 9, 3))#candidate|5|(7, 9, 3)|var|int32
bop_6 = relay.logical_or(var_1.astype('bool'), relay.reshape(var_5.astype('bool'), relay.shape_of(var_1))) # shape=(7, 9, 3)
bop_9 = relay.not_equal(var_5.astype('bool'), relay.reshape(var_1.astype('bool'), relay.shape_of(var_5))) # shape=(7, 9, 3)
uop_12 = relay.atanh(bop_9.astype('float64')) # shape=(7, 9, 3)
bop_14 = relay.maximum(uop_12.astype('uint8'), relay.reshape(var_1.astype('uint8'), relay.shape_of(uop_12))) # shape=(7, 9, 3)
var_17 = relay.var("var_17", dtype = "int32", shape = (7, 9, 3))#candidate|17|(7, 9, 3)|var|int32
bop_18 = relay.bitwise_or(var_0.astype('uint64'), relay.reshape(var_17.astype('uint64'), relay.shape_of(var_0))) # shape=(7, 9, 3)
bop_21 = relay.logical_and(bop_14.astype('bool'), relay.reshape(bop_9.astype('bool'), relay.shape_of(bop_14))) # shape=(7, 9, 3)
uop_24 = relay.asinh(uop_12.astype('float64')) # shape=(7, 9, 3)
bop_26 = relay.floor_divide(uop_24.astype('float64'), relay.reshape(bop_9.astype('float64'), relay.shape_of(uop_24))) # shape=(7, 9, 3)
output = relay.Tuple([bop_2,bop_6,bop_18,bop_21,bop_26,])
output2 = relay.Tuple([bop_2,bop_6,bop_18,bop_21,bop_26,])
func_29 = relay.Function([var_0,var_1,var_5,var_17,], output)
mod['func_29'] = func_29
mod = relay.transform.InferType()(mod)
mutated_mod['func_29'] = func_29
mutated_mod = relay.transform.InferType()(mutated_mod)
func_29_call = mutated_mod.get_global_var('func_29')
var_31 = relay.var("var_31", dtype = "int32", shape = (7, 9, 3))#candidate|31|(7, 9, 3)|var|int32
var_32 = relay.var("var_32", dtype = "int32", shape = (7, 9, 3))#candidate|32|(7, 9, 3)|var|int32
var_33 = relay.var("var_33", dtype = "int32", shape = (7, 9, 3))#candidate|33|(7, 9, 3)|var|int32
var_34 = relay.var("var_34", dtype = "int32", shape = (7, 9, 3))#candidate|34|(7, 9, 3)|var|int32
call_30 = func_29_call(var_31,var_32,var_33,var_34,)
output = call_30
func_35 = relay.Function([var_31,var_32,var_33,var_34,], output)
mutated_mod['func_35'] = func_35
mutated_mod = relay.transform.InferType()(mutated_mod)
const_37 = relay.const([[0.580059,5.825081,-8.498832,4.838477,9.065420,8.530492,-6.253556,-6.306532,0.481099,-7.372397,1.637725,4.593996,9.919898,7.520051,-8.277497],[-2.475212,8.847637,-8.414348,-0.012197,8.149281,1.732833,9.822615,2.741292,-7.575709,4.287464,7.992376,-6.698962,0.572178,5.517984,-7.168720],[-3.446308,8.008201,-7.607667,2.738708,-8.105238,-6.197840,7.597715,3.042834,6.025548,0.594669,-0.731155,4.281421,2.091763,-3.840918,6.908463],[-5.079552,-6.983302,9.755472,-6.410706,6.507617,0.639768,-4.967140,-7.256953,-5.901072,-4.827117,-0.250608,-9.665967,0.350700,6.330880,-6.243226],[-6.483658,-3.396297,4.108220,7.333462,-1.430707,-0.019669,4.464272,-9.719516,-8.760962,3.885852,-3.604299,5.476012,-6.706143,-4.507159,-4.058119],[-6.925911,8.927833,3.287050,9.849964,-9.845183,-6.635891,7.064811,-0.369012,4.732766,-7.590126,2.730333,-9.489620,-2.975151,0.568269,-3.145681],[6.371911,-9.027349,2.432975,8.839867,-7.217003,-1.336988,-2.122475,-1.303179,9.516115,5.490357,0.340236,-6.699502,4.312424,-6.686267,8.194265],[7.409957,1.006935,-9.744653,5.610311,9.681768,2.805715,-5.352832,-8.398347,-3.936561,-5.410280,3.939666,-5.042136,-4.144341,-8.809949,-6.228669],[1.327837,6.833806,6.056929,-9.448992,4.787896,9.278155,9.673938,7.142534,-7.195581,-2.295086,8.384550,-0.272411,2.495774,-7.125980,6.092444],[-9.496256,-7.174065,-7.625741,2.892727,-5.034634,-9.493187,6.839887,-6.601139,2.868946,2.322833,9.252348,-3.857837,-8.094014,-7.474898,6.177902]], dtype = "float32")#candidate|37|(10, 15)|const|float32
uop_38 = relay.rsqrt(const_37.astype('float32')) # shape=(10, 15)
bop_40 = relay.maximum(uop_38.astype('int8'), relay.reshape(const_37.astype('int8'), relay.shape_of(uop_38))) # shape=(10, 15)
bop_43 = relay.right_shift(bop_40.astype('uint16'), relay.reshape(uop_38.astype('uint16'), relay.shape_of(bop_40))) # shape=(10, 15)
uop_46 = relay.sin(bop_43.astype('float64')) # shape=(10, 15)
bop_48 = relay.logical_xor(const_37.astype('uint64'), relay.reshape(uop_38.astype('uint64'), relay.shape_of(const_37))) # shape=(10, 15)
uop_51 = relay.acos(bop_40.astype('float64')) # shape=(10, 15)
uop_53 = relay.asinh(uop_51.astype('float64')) # shape=(10, 15)
func_29_call = mod.get_global_var('func_29')
func_35_call = mutated_mod.get_global_var('func_35')
var_56 = relay.var("var_56", dtype = "int32", shape = (1, 189))#candidate|56|(1, 189)|var|int32
call_55 = relay.TupleGetItem(func_29_call(relay.reshape(var_56.astype('int32'), [7, 9, 3]), relay.reshape(var_56.astype('int32'), [7, 9, 3]), relay.reshape(var_56.astype('int32'), [7, 9, 3]), relay.reshape(var_56.astype('int32'), [7, 9, 3]), ), 3)
call_57 = relay.TupleGetItem(func_35_call(relay.reshape(var_56.astype('int32'), [7, 9, 3]), relay.reshape(var_56.astype('int32'), [7, 9, 3]), relay.reshape(var_56.astype('int32'), [7, 9, 3]), relay.reshape(var_56.astype('int32'), [7, 9, 3]), ), 3)
bop_58 = relay.add(uop_46.astype('int64'), relay.reshape(uop_38.astype('int64'), relay.shape_of(uop_46))) # shape=(10, 15)
bop_61 = relay.logical_xor(bop_58.astype('int64'), relay.reshape(bop_43.astype('int64'), relay.shape_of(bop_58))) # shape=(10, 15)
var_64 = relay.var("var_64", dtype = "float64", shape = (10, 15))#candidate|64|(10, 15)|var|float64
bop_65 = relay.divide(uop_51.astype('float64'), relay.reshape(var_64.astype('float64'), relay.shape_of(uop_51))) # shape=(10, 15)
uop_68 = relay.asinh(uop_46.astype('float64')) # shape=(10, 15)
uop_70 = relay.log10(uop_46.astype('float32')) # shape=(10, 15)
func_29_call = mod.get_global_var('func_29')
func_35_call = mutated_mod.get_global_var('func_35')
call_72 = relay.TupleGetItem(func_29_call(relay.reshape(var_56.astype('int32'), [7, 9, 3]), relay.reshape(call_55.astype('int32'), [7, 9, 3]), relay.reshape(call_55.astype('int32'), [7, 9, 3]), relay.reshape(var_56.astype('int32'), [7, 9, 3]), ), 3)
call_73 = relay.TupleGetItem(func_35_call(relay.reshape(var_56.astype('int32'), [7, 9, 3]), relay.reshape(call_55.astype('int32'), [7, 9, 3]), relay.reshape(call_55.astype('int32'), [7, 9, 3]), relay.reshape(var_56.astype('int32'), [7, 9, 3]), ), 3)
uop_74 = relay.sinh(bop_58.astype('float32')) # shape=(10, 15)
uop_76 = relay.cos(bop_65.astype('float64')) # shape=(10, 15)
bop_78 = relay.add(bop_58.astype('uint32'), relay.reshape(uop_38.astype('uint32'), relay.shape_of(bop_58))) # shape=(10, 15)
uop_81 = relay.log2(uop_51.astype('float64')) # shape=(10, 15)
var_83 = relay.var("var_83", dtype = "uint32", shape = (10, 15))#candidate|83|(10, 15)|var|uint32
bop_84 = relay.logical_xor(bop_78.astype('uint8'), relay.reshape(var_83.astype('uint8'), relay.shape_of(bop_78))) # shape=(10, 15)
const_87 = relay.const([[0.513030,1.044127,6.646221,-1.783715,9.242130,3.460901,-8.710319,0.797073,-5.313565,-8.361125,-0.206336,7.961761,9.027820,5.246651,3.060140],[1.250876,-1.208543,9.723866,-2.995175,0.388598,9.344455,0.781579,-5.593398,-7.646901,-8.216142,4.481454,5.372314,-5.937163,-4.399283,9.864868],[-9.208735,-3.908183,1.121644,-6.180656,-9.062694,0.938985,9.472899,4.801336,8.548067,-6.158160,-9.046504,0.083489,-5.669821,-0.956100,8.815063],[-6.723611,-0.572144,-6.836729,1.089276,2.218775,1.172387,9.160623,-9.298139,-9.176401,-7.642641,4.702733,7.882320,-5.311664,-7.955094,-7.491721],[-9.100287,4.663773,-1.349219,-7.760972,8.737930,6.414263,-3.306492,2.166843,2.155178,-9.611523,-0.684681,2.740165,-6.848934,0.818623,-3.716329],[-5.743556,-9.498844,-3.661666,-2.125765,-3.756653,-4.247892,-8.841643,-6.717506,6.311534,3.597352,4.662492,0.668675,1.753409,-2.666485,-0.614473],[0.457971,4.169081,1.185646,-7.399712,-6.439782,3.527744,-8.880373,1.912778,2.526931,-0.471152,4.724898,-9.180673,-1.792643,-6.409920,-4.167997],[-8.540962,-1.273081,5.799994,1.794913,2.121181,5.803205,-5.271289,-6.983725,-8.852999,8.595806,-6.295678,1.107929,9.668771,6.904967,-6.360771],[5.612840,9.528768,6.084892,9.196503,-2.475556,-4.725351,5.640787,4.770173,1.566409,9.649942,-1.809566,9.775888,-1.776670,-0.403896,-8.280415],[8.964854,8.607437,1.115793,4.417151,9.215729,1.728023,7.657395,-4.329232,-8.744824,4.244199,-8.617133,-9.902790,2.098890,2.823008,-1.417665]], dtype = "float64")#candidate|87|(10, 15)|const|float64
bop_88 = relay.multiply(uop_81.astype('uint8'), relay.reshape(const_87.astype('uint8'), relay.shape_of(uop_81))) # shape=(10, 15)
bop_91 = relay.bitwise_xor(uop_74.astype('uint32'), relay.reshape(uop_76.astype('uint32'), relay.shape_of(uop_74))) # shape=(10, 15)
var_94 = relay.var("var_94", dtype = "int8", shape = (10, 15))#candidate|94|(10, 15)|var|int8
bop_95 = relay.floor_divide(bop_40.astype('float64'), relay.reshape(var_94.astype('float64'), relay.shape_of(bop_40))) # shape=(10, 15)
uop_98 = relay.log10(uop_46.astype('float64')) # shape=(10, 15)
const_100 = relay.const([[-8.610862,8.337346,0.113939,-0.153048,-2.500495,-1.905247,-3.675493,4.575158,-3.035458,-1.443067,4.740782,7.696497,-0.881075,0.792230,-7.444439],[-2.074264,-1.138854,7.460995,6.736145,6.091628,9.371674,-1.734646,2.359991,-4.038978,-4.966237,-8.062804,-5.855487,-7.614839,-3.747547,6.300765],[-4.325806,5.711510,4.585948,-5.171205,8.841795,-0.454940,3.447628,-4.064055,-2.951187,-5.371801,-3.142983,-7.287740,-8.012048,9.215896,-0.561720],[8.318753,9.191821,0.192339,3.423877,1.849175,6.416353,-4.700107,3.084152,-7.709298,4.542851,-1.263841,3.903192,-9.615080,8.649923,-9.476426],[-4.193937,-8.688325,-6.735728,-6.441535,9.736899,-7.011867,5.697566,5.888459,-4.098869,-7.806319,0.504729,7.915781,9.792439,-8.483833,5.204329],[-7.679627,0.457958,2.728794,9.492418,2.952734,-1.981091,1.962569,-7.481479,-9.415257,-4.701045,0.581027,7.838390,-7.583492,-4.552377,1.083209],[9.575796,-1.285917,-5.404396,0.817775,8.366939,-7.339366,-4.159628,-5.022460,-5.260006,8.139787,6.619969,-7.096535,5.607127,-9.036735,-0.903535],[-7.056414,8.239584,-8.480949,-9.578869,3.769314,-2.806260,7.730267,-4.375464,-6.990880,-7.673608,9.443744,-9.408157,-3.252018,9.457069,9.275537],[-9.923532,1.757176,-3.820303,8.870971,6.565224,8.879864,-6.166305,0.156522,-5.431513,-7.835809,7.912854,-3.385386,4.063754,-5.067756,2.750487],[-8.914564,9.852814,-1.797994,2.296295,-1.878027,-9.780243,8.963490,8.086907,1.102046,-5.067836,-8.069163,-4.046167,9.997515,-2.145002,-0.064833]], dtype = "float64")#candidate|100|(10, 15)|const|float64
bop_101 = relay.equal(uop_68.astype('bool'), relay.reshape(const_100.astype('bool'), relay.shape_of(uop_68))) # shape=(10, 15)
uop_104 = relay.log(bop_61.astype('float32')) # shape=(10, 15)
output = relay.Tuple([bop_48,uop_53,call_55,var_56,uop_70,call_72,bop_84,bop_88,bop_91,bop_95,uop_98,bop_101,uop_104,])
output2 = relay.Tuple([bop_48,uop_53,call_57,var_56,uop_70,call_73,bop_84,bop_88,bop_91,bop_95,uop_98,bop_101,uop_104,])
func_106 = relay.Function([var_56,var_64,var_83,var_94,], output)
mod['func_106'] = func_106
mod = relay.transform.InferType()(mod)
mutated_mod['func_106'] = func_106
mutated_mod = relay.transform.InferType()(mutated_mod)
func_106_call = mutated_mod.get_global_var('func_106')
var_108 = relay.var("var_108", dtype = "int32", shape = (1, 189))#candidate|108|(1, 189)|var|int32
var_109 = relay.var("var_109", dtype = "float64", shape = (10, 15))#candidate|109|(10, 15)|var|float64
var_110 = relay.var("var_110", dtype = "uint32", shape = (10, 15))#candidate|110|(10, 15)|var|uint32
var_111 = relay.var("var_111", dtype = "int8", shape = (10, 15))#candidate|111|(10, 15)|var|int8
call_107 = func_106_call(var_108,var_109,var_110,var_111,)
output = call_107
func_112 = relay.Function([var_108,var_109,var_110,var_111,], output)
mutated_mod['func_112'] = func_112
mutated_mod = relay.transform.InferType()(mutated_mod)
var_114 = relay.var("var_114", dtype = "uint32", shape = (13, 11, 1))#candidate|114|(13, 11, 1)|var|uint32
var_115 = relay.var("var_115", dtype = "uint32", shape = (13, 11, 6))#candidate|115|(13, 11, 6)|var|uint32
bop_116 = relay.left_shift(var_114.astype('uint32'), var_115.astype('uint32')) # shape=(13, 11, 6)
uop_119 = relay.asin(var_114.astype('float64')) # shape=(13, 11, 1)
uop_121 = relay.sqrt(uop_119.astype('float64')) # shape=(13, 11, 1)
output = relay.Tuple([bop_116,uop_121,])
output2 = relay.Tuple([bop_116,uop_121,])
func_123 = relay.Function([var_114,var_115,], output)
mod['func_123'] = func_123
mod = relay.transform.InferType()(mod)
var_124 = relay.var("var_124", dtype = "uint32", shape = (13, 11, 1))#candidate|124|(13, 11, 1)|var|uint32
var_125 = relay.var("var_125", dtype = "uint32", shape = (13, 11, 6))#candidate|125|(13, 11, 6)|var|uint32
output = func_123(var_124,var_125,)
func_126 = relay.Function([var_124,var_125,], output)
mutated_mod['func_126'] = func_126
mutated_mod = relay.transform.InferType()(mutated_mod)
var_128 = relay.var("var_128", dtype = "uint8", shape = (12, 4))#candidate|128|(12, 4)|var|uint8
var_129 = relay.var("var_129", dtype = "uint8", shape = (12, 4))#candidate|129|(12, 4)|var|uint8
bop_130 = relay.less(var_128.astype('bool'), relay.reshape(var_129.astype('bool'), relay.shape_of(var_128))) # shape=(12, 4)
bop_133 = relay.floor_divide(bop_130.astype('float32'), relay.reshape(var_129.astype('float32'), relay.shape_of(bop_130))) # shape=(12, 4)
bop_136 = relay.logical_and(var_128.astype('bool'), relay.reshape(var_129.astype('bool'), relay.shape_of(var_128))) # shape=(12, 4)
bop_139 = relay.logical_or(bop_136.astype('bool'), relay.reshape(bop_133.astype('bool'), relay.shape_of(bop_136))) # shape=(12, 4)
bop_142 = relay.divide(bop_130.astype('float64'), relay.reshape(var_129.astype('float64'), relay.shape_of(bop_130))) # shape=(12, 4)
bop_145 = relay.less(bop_136.astype('bool'), relay.reshape(var_129.astype('bool'), relay.shape_of(bop_136))) # shape=(12, 4)
output = relay.Tuple([bop_139,bop_142,bop_145,])
output2 = relay.Tuple([bop_139,bop_142,bop_145,])
func_148 = relay.Function([var_128,var_129,], output)
mod['func_148'] = func_148
mod = relay.transform.InferType()(mod)
var_149 = relay.var("var_149", dtype = "uint8", shape = (12, 4))#candidate|149|(12, 4)|var|uint8
var_150 = relay.var("var_150", dtype = "uint8", shape = (12, 4))#candidate|150|(12, 4)|var|uint8
output = func_148(var_149,var_150,)
func_151 = relay.Function([var_149,var_150,], output)
mutated_mod['func_151'] = func_151
mutated_mod = relay.transform.InferType()(mutated_mod)
var_153 = relay.var("var_153", dtype = "float32", shape = (11, 1))#candidate|153|(11, 1)|var|float32
var_154 = relay.var("var_154", dtype = "float32", shape = (11, 11))#candidate|154|(11, 11)|var|float32
bop_155 = relay.power(var_153.astype('float32'), var_154.astype('float32')) # shape=(11, 11)
bop_158 = relay.subtract(bop_155.astype('uint64'), var_153.astype('uint64')) # shape=(11, 11)
uop_161 = relay.log10(bop_158.astype('float32')) # shape=(11, 11)
output = uop_161
output2 = uop_161
func_163 = relay.Function([var_153,var_154,], output)
mod['func_163'] = func_163
mod = relay.transform.InferType()(mod)
mutated_mod['func_163'] = func_163
mutated_mod = relay.transform.InferType()(mutated_mod)
func_163_call = mutated_mod.get_global_var('func_163')
var_165 = relay.var("var_165", dtype = "float32", shape = (11, 1))#candidate|165|(11, 1)|var|float32
var_166 = relay.var("var_166", dtype = "float32", shape = (11, 11))#candidate|166|(11, 11)|var|float32
call_164 = func_163_call(var_165,var_166,)
output = call_164
func_167 = relay.Function([var_165,var_166,], output)
mutated_mod['func_167'] = func_167
mutated_mod = relay.transform.InferType()(mutated_mod)
const_169 = relay.const([[[-8,9,4],[5,8,2],[-5,9,-1],[-7,-4,-9],[-8,7,5],[3,5,-9],[5,10,2],[-3,1,8],[-8,1,5],[-4,-8,4],[-5,7,3],[8,-9,-3],[10,-7,-7],[-7,8,-6],[9,-10,1],[10,-3,7]],[[-4,1,-5],[2,10,8],[-2,4,-2],[-5,-10,-8],[8,-6,-7],[-4,10,-4],[-2,10,-6],[1,3,10],[-6,8,9],[-5,-6,-8],[6,5,9],[-8,-6,5],[7,9,-1],[-9,3,3],[7,-1,-10],[7,-10,3]],[[2,2,-2],[-7,3,2],[5,1,1],[2,-1,-1],[1,-1,10],[2,-7,-7],[1,9,2],[-8,-3,6],[2,-3,10],[-5,2,2],[10,-4,-8],[6,-9,-3],[-6,-1,-9],[-4,7,-1],[-1,-8,2],[7,-5,9]],[[-5,5,9],[6,-9,6],[-4,-7,10],[-9,-6,-6],[-8,10,-7],[7,3,-10],[7,8,5],[-4,-6,1],[10,-9,-7],[-7,-9,6],[-8,-1,-2],[5,-7,7],[-9,-10,-3],[1,10,-2],[-4,-10,9],[-2,-9,-10]],[[-2,-2,2],[-10,4,5],[10,3,-7],[-5,-5,5],[-10,-1,-8],[10,7,-10],[5,9,-9],[-7,4,8],[-4,-2,9],[4,-4,8],[7,-3,-2],[-5,-4,-4],[-1,-1,8],[6,-6,2],[-6,3,-3],[-4,-9,-9]],[[2,5,10],[-9,10,-6],[1,4,-10],[3,5,8],[6,-10,-8],[7,-3,-6],[-4,4,6],[6,-3,7],[9,1,-5],[-1,2,-8],[-10,-2,7],[-6,2,-7],[-9,8,-3],[9,-4,-3],[-1,9,-8],[4,2,-1]],[[-4,10,-6],[-6,9,-8],[10,4,8],[-10,4,2],[6,1,4],[7,-8,5],[3,10,-9],[4,-6,1],[6,4,-1],[-3,6,7],[6,7,-2],[-10,8,-6],[-10,6,1],[-1,9,8],[-6,10,-6],[2,-2,8]],[[5,-8,-9],[10,7,5],[-5,6,2],[7,6,9],[-6,-4,10],[-2,-1,8],[5,9,-5],[-3,-1,-6],[4,10,-1],[-3,-10,5],[10,-6,6],[-3,5,-6],[-6,-3,-7],[-9,-2,-2],[-10,10,-2],[3,-2,3]],[[5,10,7],[10,-4,-10],[2,3,-10],[9,-8,1],[5,1,3],[5,1,-7],[3,2,2],[8,1,10],[-6,1,-7],[5,-6,-9],[-2,8,2],[-2,5,-10],[-5,-1,-2],[8,-9,2],[-1,9,-5],[8,-5,-3]],[[-2,-9,10],[-5,10,1],[-6,-9,-6],[-2,10,-4],[-10,-4,-9],[-1,3,-9],[1,-8,-10],[4,8,3],[-4,2,-4],[9,-1,8],[-10,-2,-9],[8,6,3],[-4,4,-8],[-7,9,6],[-6,-9,8],[8,8,-2]],[[2,7,5],[4,6,-1],[-4,-9,-8],[8,2,2],[5,-9,-9],[-10,-3,8],[8,7,-9],[-8,-9,-8],[2,10,3],[5,3,3],[-6,-2,1],[-9,2,-4],[-6,-8,9],[-1,-1,-6],[-4,-4,-4],[-8,9,9]],[[10,10,-6],[6,7,7],[9,-9,-9],[-5,-6,10],[6,-10,10],[7,-7,-5],[-1,5,3],[6,-9,2],[-1,-3,-8],[5,-2,10],[-4,3,6],[-6,-9,9],[-2,5,1],[1,6,9],[8,-9,10],[-6,10,10]],[[7,5,7],[-9,-8,-10],[2,2,-7],[2,-6,-10],[4,-3,-7],[-10,-6,-2],[8,2,4],[4,-5,-3],[-7,2,8],[10,-9,-6],[-3,-1,-1],[2,4,5],[7,-3,-6],[-9,-1,-6],[4,-3,-8],[-9,5,-10]],[[3,-6,-7],[7,10,8],[-6,1,-7],[-8,-3,-4],[-2,-2,3],[5,-5,4],[-4,5,1],[-2,-10,6],[-1,6,7],[-7,-3,8],[-2,-1,-6],[8,-6,-5],[-8,-3,1],[-4,6,-10],[-2,-2,7],[-10,-4,7]],[[-5,-9,-10],[7,-3,-4],[2,9,-2],[10,8,-8],[3,4,-6],[-7,-6,2],[-3,3,9],[-2,-9,-8],[-2,2,4],[4,7,-5],[1,-6,10],[-4,-4,9],[-6,6,-4],[6,-5,-5],[-10,6,-9],[2,5,-8]],[[5,8,-10],[-5,-9,-4],[7,10,-8],[-1,-6,-6],[2,-6,6],[-1,-5,-10],[-9,-3,-6],[-3,5,-5],[8,1,-6],[8,3,-4],[7,9,6],[9,4,4],[-9,5,10],[-6,9,-2],[-4,-3,-6],[5,-2,-7]]], dtype = "uint8")#candidate|169|(16, 16, 3)|const|uint8
var_170 = relay.var("var_170", dtype = "uint8", shape = (16, 16, 3))#candidate|170|(16, 16, 3)|var|uint8
bop_171 = relay.bitwise_and(const_169.astype('uint8'), relay.reshape(var_170.astype('uint8'), relay.shape_of(const_169))) # shape=(16, 16, 3)
var_174 = relay.var("var_174", dtype = "uint8", shape = (16, 16, 3))#candidate|174|(16, 16, 3)|var|uint8
bop_175 = relay.not_equal(var_170.astype('bool'), relay.reshape(var_174.astype('bool'), relay.shape_of(var_170))) # shape=(16, 16, 3)
func_106_call = mod.get_global_var('func_106')
func_112_call = mutated_mod.get_global_var('func_112')
var_179 = relay.var("var_179", dtype = "int32", shape = (189,))#candidate|179|(189,)|var|int32
const_180 = relay.const([9.780258,-0.940725,6.535117,6.428884,6.851230,1.855506,-4.217141,1.578334,0.380390,6.754481,2.262376,-3.985176,-1.443968,7.328355,3.871974,0.545852,-3.723406,-7.502818,9.878371,5.125860,-5.671607,-4.036833,-8.070362,-7.616002,6.745713,3.624480,4.840899,-2.259377,8.697965,0.778744,4.187211,-8.258430,-3.398064,-6.346119,-4.506530,5.850885,-6.045763,3.125143,2.641737,-4.474669,9.194353,1.644583,-3.254954,-5.270051,5.726133,-2.776378,-2.366667,-0.722928,-1.678106,7.296955,-6.457672,1.045653,-5.945984,6.145185,-5.949064,6.217411,7.752018,-0.654574,-4.821554,-4.519484,-8.738199,0.596214,6.727471,-1.457335,-2.796393,-9.166257,-1.330273,9.208338,-2.594238,-5.476655,9.915302,9.530727,-3.585601,-1.233079,-9.720949,-9.488797,2.100492,-7.563092,-7.378037,-3.682743,-6.839406,1.744590,4.515633,1.401782,-4.931537,-0.490042,6.401159,-6.460577,-1.169755,5.039189,7.146973,8.842977,1.600561,2.689413,-8.828053,-7.738930,-7.594343,6.007079,-0.677828,-2.822780,-8.830825,-3.548116,-1.893006,4.635375,8.247193,0.437539,4.333618,-3.355909,-7.136680,-7.568739,4.262922,4.633086,-1.360834,1.153813,-9.725926,3.800449,9.623695,-5.877142,3.648174,-4.913481,-0.907473,9.818933,-3.697856,-8.452225,-3.984095,-0.438533,4.248342,9.194930,-0.605649,8.593615,-3.451933,-0.570766,-1.038535,5.457929,-1.774976,8.624059,-8.039862,-8.140978,-3.461167,9.499189,6.288814,-2.024746,-7.604826,6.959197,9.171797,8.254782,8.053511,6.967244,-6.457956,7.884698], dtype = "float64")#candidate|180|(150,)|const|float64
call_178 = relay.TupleGetItem(func_106_call(relay.reshape(var_179.astype('int32'), [1, 189]), relay.reshape(const_180.astype('float64'), [10, 15]), relay.reshape(const_180.astype('uint32'), [10, 15]), relay.reshape(const_180.astype('int8'), [10, 15]), ), 7)
call_181 = relay.TupleGetItem(func_112_call(relay.reshape(var_179.astype('int32'), [1, 189]), relay.reshape(const_180.astype('float64'), [10, 15]), relay.reshape(const_180.astype('uint32'), [10, 15]), relay.reshape(const_180.astype('int8'), [10, 15]), ), 7)
uop_182 = relay.acosh(const_180.astype('float64')) # shape=(150,)
uop_184 = relay.acos(uop_182.astype('float64')) # shape=(150,)
bop_186 = relay.power(uop_182.astype('float64'), relay.reshape(const_180.astype('float64'), relay.shape_of(uop_182))) # shape=(150,)
bop_189 = relay.bitwise_xor(uop_184.astype('int64'), relay.reshape(call_178.astype('int64'), relay.shape_of(uop_184))) # shape=(150,)
bop_192 = relay.bitwise_xor(uop_184.astype('int64'), relay.reshape(call_181.astype('int64'), relay.shape_of(uop_184))) # shape=(150,)
uop_193 = relay.sigmoid(uop_184.astype('float64')) # shape=(150,)
uop_195 = relay.log2(uop_193.astype('float32')) # shape=(150,)
bop_197 = relay.bitwise_and(uop_184.astype('int64'), relay.reshape(const_180.astype('int64'), relay.shape_of(uop_184))) # shape=(150,)
uop_200 = relay.atan(uop_195.astype('float64')) # shape=(150,)
output = relay.Tuple([bop_171,bop_175,var_179,bop_186,bop_189,bop_197,uop_200,])
output2 = relay.Tuple([bop_171,bop_175,var_179,bop_186,bop_192,bop_197,uop_200,])
func_202 = relay.Function([var_170,var_174,var_179,], output)
mod['func_202'] = func_202
mod = relay.transform.InferType()(mod)
var_203 = relay.var("var_203", dtype = "uint8", shape = (16, 16, 3))#candidate|203|(16, 16, 3)|var|uint8
var_204 = relay.var("var_204", dtype = "uint8", shape = (16, 16, 3))#candidate|204|(16, 16, 3)|var|uint8
var_205 = relay.var("var_205", dtype = "int32", shape = (189,))#candidate|205|(189,)|var|int32
output = func_202(var_203,var_204,var_205,)
func_206 = relay.Function([var_203,var_204,var_205,], output)
mutated_mod['func_206'] = func_206
mutated_mod = relay.transform.InferType()(mutated_mod)
const_208 = relay.const([[[4.405388],[9.486212],[-8.289565],[5.723773],[-0.568544],[-1.746136],[7.253201],[0.554488],[8.243569],[2.478790]],[[1.747868],[0.589155],[-7.188387],[5.557116],[-7.096066],[-1.088855],[0.897565],[5.373237],[-0.326389],[9.329500]]], dtype = "float64")#candidate|208|(2, 10, 1)|const|float64
const_209 = relay.const([[[1.697336,4.974886,-6.594663,0.018853,-5.104881,6.645230,-1.079028,-1.282751,-9.032963,-2.422330,7.055396],[7.491033,3.246423,-7.696289,9.382040,0.204463,-3.115781,1.595490,5.155894,-0.355340,4.638758,-2.931010],[-8.796288,-6.394405,9.067389,-6.548842,-9.063327,-5.055696,3.133080,-0.724906,3.555288,7.603448,-6.565879],[-8.043030,-3.588611,1.059551,-4.770898,6.806420,7.757473,9.553632,6.121594,9.686632,-2.616956,9.657104],[-3.342782,-7.193914,9.376180,5.363808,-8.374124,5.700517,6.336777,-6.662076,-3.392540,-5.393413,3.077180],[-0.676389,-9.591391,-2.609580,6.732150,-5.402547,1.139588,5.170908,-8.828572,7.323976,-9.519870,4.086723],[1.624404,-5.449477,-9.084455,1.481589,-1.351612,-6.566354,7.975204,7.265312,-2.447235,-2.480883,-1.855479],[-7.605866,3.311341,1.101561,-6.845338,4.526101,-1.679315,4.524565,-1.245428,-8.909348,-8.160412,0.694128],[4.754945,-3.929427,-1.896374,-9.982959,0.834506,-0.836721,-3.457470,-4.536281,-1.875027,-0.109790,6.843405],[0.617715,7.286742,3.168733,-9.970395,1.027918,5.473850,9.053008,7.933079,9.780781,-4.508856,0.513678]],[[1.838837,2.757535,2.628843,9.433289,4.168261,-5.163776,-8.485427,-8.475810,3.893169,3.186443,-9.438210],[-6.328456,-5.585386,-1.647092,2.805030,7.238188,6.258374,8.865093,-3.732003,-4.989902,2.013647,-9.414142],[-5.718486,8.218248,2.440280,-8.841496,4.423628,8.432690,-1.117894,7.033460,5.225445,2.421531,6.715001],[8.517939,5.097572,-6.343894,-7.665092,-7.589547,2.705678,-8.940039,-6.461966,-7.462885,-5.050986,4.109145],[1.011757,-4.653795,1.062142,-5.155233,-8.982229,3.892032,9.783626,9.799120,-7.457383,-7.610062,5.475379],[-8.063778,7.693360,9.617155,-9.848015,6.313783,9.257634,-5.700414,6.273193,-5.704540,-8.266081,6.781118],[4.974863,-5.482902,-9.703564,8.558103,9.034327,-0.391524,7.013578,-5.716575,-6.529384,1.154689,-7.323826],[2.783355,-2.411326,5.230625,3.743343,-4.097867,5.854541,-3.550519,1.365473,4.526580,-0.287382,-7.947249],[-9.483511,8.867267,-3.329854,-2.736886,4.365721,-1.342833,8.316837,-5.011135,-8.730308,9.112278,7.214051],[4.854478,-8.032551,-4.445153,-8.184364,-3.787578,4.253321,-6.815854,-2.950603,-3.382682,-9.629996,-0.394552]]], dtype = "float64")#candidate|209|(2, 10, 11)|const|float64
bop_210 = relay.floor_mod(const_208.astype('float64'), const_209.astype('float64')) # shape=(2, 10, 11)
bop_213 = relay.add(const_208.astype('int8'), bop_210.astype('int8')) # shape=(2, 10, 11)
bop_216 = relay.bitwise_and(bop_210.astype('int64'), relay.reshape(const_209.astype('int64'), relay.shape_of(bop_210))) # shape=(2, 10, 11)
bop_219 = relay.power(bop_216.astype('float64'), relay.reshape(bop_210.astype('float64'), relay.shape_of(bop_216))) # shape=(2, 10, 11)
uop_222 = relay.tan(bop_210.astype('float32')) # shape=(2, 10, 11)
func_163_call = mod.get_global_var('func_163')
func_167_call = mutated_mod.get_global_var('func_167')
var_225 = relay.var("var_225", dtype = "float32", shape = (11, 1))#candidate|225|(11, 1)|var|float32
var_226 = relay.var("var_226", dtype = "float32", shape = (121,))#candidate|226|(121,)|var|float32
call_224 = func_163_call(relay.reshape(var_225.astype('float32'), [11, 1]), relay.reshape(var_226.astype('float32'), [11, 11]), )
call_227 = func_163_call(relay.reshape(var_225.astype('float32'), [11, 1]), relay.reshape(var_226.astype('float32'), [11, 11]), )
uop_228 = relay.exp(uop_222.astype('float32')) # shape=(2, 10, 11)
bop_230 = relay.bitwise_and(var_225.astype('int8'), var_226.astype('int8')) # shape=(11, 121)
var_233 = relay.var("var_233", dtype = "float32", shape = (2, 10, 11))#candidate|233|(2, 10, 11)|var|float32
bop_234 = relay.logical_xor(uop_228.astype('int32'), relay.reshape(var_233.astype('int32'), relay.shape_of(uop_228))) # shape=(2, 10, 11)
uop_237 = relay.log(uop_228.astype('float64')) # shape=(2, 10, 11)
bop_239 = relay.mod(uop_237.astype('float64'), relay.reshape(uop_222.astype('float64'), relay.shape_of(uop_237))) # shape=(2, 10, 11)
uop_242 = relay.acos(bop_239.astype('float32')) # shape=(2, 10, 11)
bop_244 = relay.logical_and(uop_242.astype('bool'), relay.reshape(bop_239.astype('bool'), relay.shape_of(uop_242))) # shape=(2, 10, 11)
bop_247 = relay.less_equal(uop_242.astype('bool'), relay.reshape(uop_237.astype('bool'), relay.shape_of(uop_242))) # shape=(2, 10, 11)
uop_250 = relay.asinh(bop_244.astype('float64')) # shape=(2, 10, 11)
var_252 = relay.var("var_252", dtype = "float64", shape = (2, 10, 11))#candidate|252|(2, 10, 11)|var|float64
bop_253 = relay.floor_divide(bop_239.astype('float64'), relay.reshape(var_252.astype('float64'), relay.shape_of(bop_239))) # shape=(2, 10, 11)
const_256 = relay.constdtype = "float64")#candidate|256|(2, 10, 11)|const|float64
bop_257 = relay.divide(uop_237.astype('float64'), relay.reshape(const_256.astype('float64'), relay.shape_of(uop_237))) # shape=(2, 10, 11)
uop_260 = relay.acos(bop_234.astype('float32')) # shape=(2, 10, 11)
uop_262 = relay.log10(bop_257.astype('float32')) # shape=(2, 10, 11)
output = relay.Tuple([bop_213,bop_219,call_224,bop_230,bop_247,uop_250,bop_253,uop_260,uop_262,])
output2 = relay.Tuple([bop_213,bop_219,call_227,bop_230,bop_247,uop_250,bop_253,uop_260,uop_262,])
func_264 = relay.Function([var_225,var_226,var_233,var_252,], output)
mod['func_264'] = func_264
mod = relay.transform.InferType()(mod)
mutated_mod['func_264'] = func_264
mutated_mod = relay.transform.InferType()(mutated_mod)
func_264_call = mutated_mod.get_global_var('func_264')
var_266 = relay.var("var_266", dtype = "float32", shape = (11, 1))#candidate|266|(11, 1)|var|float32
var_267 = relay.var("var_267", dtype = "float32", shape = (121,))#candidate|267|(121,)|var|float32
var_268 = relay.var("var_268", dtype = "float32", shape = (2, 10, 11))#candidate|268|(2, 10, 11)|var|float32
var_269 = relay.var("var_269", dtype = "float64", shape = (2, 10, 11))#candidate|269|(2, 10, 11)|var|float64
call_265 = func_264_call(var_266,var_267,var_268,var_269,)
output = call_265
func_270 = relay.Function([var_266,var_267,var_268,var_269,], output)
mutated_mod['func_270'] = func_270
mutated_mod = relay.transform.InferType()(mutated_mod)
var_272 = relay.var("var_272", dtype = "int32", shape = ())#candidate|272|()|var|int32
var_273 = relay.var("var_273", dtype = "int32", shape = (14, 6))#candidate|273|(14, 6)|var|int32
bop_274 = relay.equal(var_272.astype('bool'), var_273.astype('bool')) # shape=(14, 6)
uop_277 = relay.rsqrt(bop_274.astype('float64')) # shape=(14, 6)
uop_279 = relay.acosh(uop_277.astype('float32')) # shape=(14, 6)
bop_281 = relay.power(uop_279.astype('float64'), relay.reshape(var_273.astype('float64'), relay.shape_of(uop_279))) # shape=(14, 6)
bop_284 = relay.floor_divide(uop_277.astype('float32'), var_272.astype('float32')) # shape=(14, 6)
uop_287 = relay.acosh(bop_281.astype('float64')) # shape=(14, 6)
bop_289 = relay.minimum(uop_287.astype('int16'), relay.reshape(bop_281.astype('int16'), relay.shape_of(uop_287))) # shape=(14, 6)
func_123_call = mod.get_global_var('func_123')
func_126_call = mutated_mod.get_global_var('func_126')
var_293 = relay.var("var_293", dtype = "uint32", shape = (143,))#candidate|293|(143,)|var|uint32
var_294 = relay.var("var_294", dtype = "uint32", shape = (858,))#candidate|294|(858,)|var|uint32
call_292 = relay.TupleGetItem(func_123_call(relay.reshape(var_293.astype('uint32'), [13, 11, 1]), relay.reshape(var_294.astype('uint32'), [13, 11, 6]), ), 1)
call_295 = relay.TupleGetItem(func_126_call(relay.reshape(var_293.astype('uint32'), [13, 11, 1]), relay.reshape(var_294.astype('uint32'), [13, 11, 6]), ), 1)
uop_296 = relay.asinh(uop_287.astype('float32')) # shape=(14, 6)
bop_298 = relay.left_shift(uop_296.astype('uint16'), relay.reshape(uop_277.astype('uint16'), relay.shape_of(uop_296))) # shape=(14, 6)
var_301 = relay.var("var_301", dtype = "float64", shape = (14, 6))#candidate|301|(14, 6)|var|float64
bop_302 = relay.logical_and(uop_287.astype('bool'), relay.reshape(var_301.astype('bool'), relay.shape_of(uop_287))) # shape=(14, 6)
uop_305 = relay.erf(uop_296.astype('float64')) # shape=(14, 6)
bop_307 = relay.logical_or(bop_298.astype('bool'), relay.reshape(uop_287.astype('bool'), relay.shape_of(bop_298))) # shape=(14, 6)
uop_310 = relay.acos(uop_305.astype('float32')) # shape=(14, 6)
var_312 = relay.var("var_312", dtype = "float64", shape = (14, 6))#candidate|312|(14, 6)|var|float64
bop_313 = relay.not_equal(uop_305.astype('bool'), relay.reshape(var_312.astype('bool'), relay.shape_of(uop_305))) # shape=(14, 6)
bop_316 = relay.power(uop_310.astype('float64'), relay.reshape(bop_284.astype('float64'), relay.shape_of(uop_310))) # shape=(14, 6)
uop_319 = relay.log(bop_316.astype('float32')) # shape=(14, 6)
bop_321 = relay.equal(uop_319.astype('bool'), relay.reshape(uop_310.astype('bool'), relay.shape_of(uop_319))) # shape=(14, 6)
bop_324 = relay.less_equal(uop_319.astype('bool'), relay.reshape(bop_321.astype('bool'), relay.shape_of(uop_319))) # shape=(14, 6)
var_327 = relay.var("var_327", dtype = "float32", shape = (14, 6))#candidate|327|(14, 6)|var|float32
bop_328 = relay.subtract(uop_319.astype('float32'), relay.reshape(var_327.astype('float32'), relay.shape_of(uop_319))) # shape=(14, 6)
uop_331 = relay.asinh(bop_284.astype('float64')) # shape=(14, 6)
bop_333 = relay.subtract(bop_321.astype('float32'), relay.reshape(bop_324.astype('float32'), relay.shape_of(bop_321))) # shape=(14, 6)
uop_336 = relay.cos(uop_305.astype('float32')) # shape=(14, 6)
var_338 = relay.var("var_338", dtype = "float32", shape = (14, 6))#candidate|338|(14, 6)|var|float32
bop_339 = relay.mod(uop_336.astype('float32'), relay.reshape(var_338.astype('float32'), relay.shape_of(uop_336))) # shape=(14, 6)
uop_342 = relay.log10(bop_307.astype('float64')) # shape=(14, 6)
uop_344 = relay.rsqrt(bop_328.astype('float64')) # shape=(14, 6)
bop_346 = relay.equal(uop_344.astype('bool'), relay.reshape(bop_339.astype('bool'), relay.shape_of(uop_344))) # shape=(14, 6)
var_349 = relay.var("var_349", dtype = "float32", shape = (14, 6))#candidate|349|(14, 6)|var|float32
bop_350 = relay.mod(bop_328.astype('float32'), relay.reshape(var_349.astype('float32'), relay.shape_of(bop_328))) # shape=(14, 6)
bop_353 = relay.less(bop_350.astype('bool'), relay.reshape(bop_284.astype('bool'), relay.shape_of(bop_350))) # shape=(14, 6)
output = relay.Tuple([bop_289,call_292,var_293,var_294,bop_302,bop_313,uop_331,bop_333,uop_342,bop_346,bop_353,])
output2 = relay.Tuple([bop_289,call_295,var_293,var_294,bop_302,bop_313,uop_331,bop_333,uop_342,bop_346,bop_353,])
F = relay.Function([var_272,var_273,var_293,var_294,var_301,var_312,var_327,var_338,var_349,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_272,var_273,var_293,var_294,var_301,var_312,var_327,var_338,var_349,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_272= np.array(-5, dtype='int32')
module1.set_input('var_272', input_272)
input_273= np.array([[1,8,-5,-8,-8,-8],[4,3,4,8,1,-3],[-6,-8,-4,-2,10,-6],[-9,-7,-1,-1,-3,-9],[-10,-6,-3,-5,-9,-6],[7,-8,9,1,10,-4],[3,6,-4,4,3,3],[8,-7,-3,9,-10,-7],[3,-5,-8,-6,8,6],[6,-6,-9,-7,8,-3],[8,9,1,4,-5,-10],[2,3,-7,-10,8,-4],[-4,3,8,3,10,-1],[-9,6,8,7,2,-9]], dtype='int32')
module1.set_input('var_273', input_273)
input_293= np.array([-9,-4,6,6,-10,4,-7,-3,6,-9,-2,8,-2,9,-5,5,-7,2,6,3,-7,5,1,-2,-3,-3,7,-5,8,-3,10,8,-6,1,10,-1,3,2,5,3,4,-2,-9,2,-1,-4,-2,10,-5,-1,7,4,7,3,10,9,-4,-7,-10,-4,-1,-1,1,2,-4,-2,2,-10,10,10,-1,-3,1,-10,8,-1,-10,-3,-8,8,-5,-3,-4,7,-8,3,-5,-4,8,-9,-8,5,-7,-1,-3,-6,-7,7,-6,9,-1,-5,1,-7,5,-5,-10,-1,9,1,8,2,8,1,6,-10,-2,-7,6,4,-2,2,-1,7,4,-4,7,2,-9,-3,-4,-4,-8,1,-5,-3,6,-8,-2,-7,-5,1,-10], dtype='uint32')
module1.set_input('var_293', input_293)
input_294= np.array([1,-7,-4,7,-7,-9,9,3,-2,9,6,-7,8,-5,-7,-3,4,-3,10,6,-5,6,-10,5,-10,6,-8,8,-8,-6,-9,3,8,2,6,-7,-5,-4,-6,1,-3,-1,-9,-6,3,1,-10,5,-2,8,-7,8,2,6,-1,1,3,7,-10,-8,5,-4,4,5,-8,-4,1,-6,-6,-8,-9,-4,-2,4,-4,-4,-2,3,2,3,-2,5,-3,-6,-5,-7,-5,7,-2,9,3,-4,-6,2,9,-7,4,-6,-5,5,7,4,-5,-1,-4,-2,6,4,4,-7,3,6,8,-4,2,-4,-3,3,1,-4,4,4,3,1,5,-2,4,6,8,6,1,-1,8,2,-7,8,4,1,-9,-7,-4,3,-7,-1,-10,8,-7,-6,4,8,-6,-3,6,10,-8,-10,-7,2,1,-10,-10,-2,9,4,8,3,8,-6,1,2,4,4,4,-7,9,7,8,-6,9,-8,-2,1,-8,4,5,-3,-7,-2,4,9,-7,-1,-8,-1,7,-2,-2,-8,-3,4,-8,9,-3,-8,10,-10,-4,3,-10,-8,4,5,-6,8,5,7,8,-9,-1,-8,6,10,-1,-3,7,-7,5,7,-4,1,9,-5,8,-10,2,-9,-7,8,2,-6,-5,8,-4,-1,3,10,-2,9,-10,6,-6,-10,-4,1,-2,-2,10,8,8,4,1,-3,10,4,2,2,7,-3,2,6,10,2,-10,8,10,-1,-6,6,10,-6,2,-2,-1,7,-8,-1,2,10,4,2,-10,6,9,3,-4,2,10,2,-7,-7,3,-5,1,-7,-3,-10,-3,-2,10,4,6,-1,-7,8,-3,1,2,3,1,-10,-10,-1,9,-7,-9,-5,6,9,-1,9,1,2,-8,-7,-4,5,-9,8,10,-7,8,-1,-9,8,-9,-4,9,-4,-10,7,-9,-1,-1,-4,-6,-9,2,9,-4,1,-5,2,10,10,8,-5,2,-3,5,-5,8,-5,7,4,-10,3,-8,9,2,10,-1,-4,1,5,5,-6,5,5,-7,3,4,3,2,1,-5,3,6,-8,-7,10,4,-8,7,-1,4,2,-10,1,-10,8,-1,-3,10,-3,-6,-2,-9,1,4,2,8,8,-2,-1,-9,-10,-2,9,-6,-3,-5,5,5,-2,2,9,-10,9,3,-6,1,-5,9,-6,-8,9,4,-7,-2,10,-5,-1,5,8,-1,2,-8,-4,-3,-4,-9,-4,7,-2,2,-10,-10,-1,2,-2,-2,5,-3,1,-9,-7,-7,1,-2,-2,6,9,-4,10,-10,9,9,5,2,8,-10,10,-5,3,6,10,-9,8,1,-1,2,-4,5,3,-7,9,-5,7,1,-5,-7,-1,-4,-2,-8,-6,5,9,1,-9,2,-8,-8,5,4,10,-5,-8,1,3,-4,-8,-3,1,9,-4,8,6,-4,-9,10,-2,2,1,-1,-3,-7,4,-7,4,4,7,-8,10,-5,-2,10,-8,-5,6,-7,-1,-9,2,9,-4,-4,5,-7,5,7,6,3,-2,7,6,-8,-6,-5,4,6,7,10,-1,-10,-8,-6,-4,10,-9,3,-1,-4,7,7,3,9,3,-3,-8,-3,-2,3,-9,-2,-10,-4,8,-1,-7,-8,4,-2,9,-3,10,3,6,8,9,-2,8,1,5,-3,-2,5,-10,-3,6,-6,-2,10,5,1,-9,4,-10,5,8,-8,-1,-4,-3,2,3,-6,6,-2,6,-4,8,-4,4,-4,7,1,-6,-1,-2,-8,8,9,-2,7,-4,-4,-1,-1,-8,-7,6,5,7,-2,-8,5,6,1,4,-7,3,3,10,10,8,2,-9,7,-4,4,-9,7,-2,-5,-10,-7,4,6,-3,-1,-6,-4,-2,1,-1,-10,-4,6,-7,4,-5,-10,-10,-10,-5,-3,-6,5,9,-5,-1,-1,-2,-2,-9,-8,-7,1,7,8,4,4,-10,9,-3,10,-7,-8,7,10,4,2,6,-9,-7,-8,10,-3,9,8,6,5,-8,-2,2,-2,-10,10,-8,-3,-5,7,1,4,4,3,1,-1,10,5,-7,-8,1,-5,6,5,-6,-7,-4,8,-6,-8,-6,7,4,10,6,8,-8,6,10,-5,4,5,4,8,2,-6,-4,-8,2,-2,6,8,5,-7,-5,-3,-4,-9,-2,8,-2,6,-7,6,2,2,10,-1,-3,-1,-1,-9,3,-5,4,2,-8,-2,3,-8,6,3,9,-10,-2,-1,3,10,-8,2,-8,10,3,3,-9,-10,-1,8,9,-2,-7,6,5,-10,2], dtype='uint32')
module1.set_input('var_294', input_294)
input_301= np.array([[-1.384690,-5.260482,-4.943851,6.940529,-1.972711,-9.911858],[3.133372,-5.392940,-9.288896,-4.768273,-8.137540,-7.520174],[3.255178,-1.545444,1.215207,3.786560,-2.928406,8.665072],[6.852811,-9.609767,6.183282,2.429839,1.842368,-4.295101],[-6.837030,9.493763,-0.085694,8.398699,-1.816432,2.962419],[3.059362,-4.145557,-8.246429,9.087637,-1.251303,-7.821339],[-3.027936,6.059498,7.563356,-9.526908,-9.344619,-5.260058],[4.682544,-1.266563,8.640666,9.393355,-6.029736,9.524419],[-6.062044,5.114716,-3.072506,-6.023100,2.160705,-3.703538],[1.365654,-6.885751,9.793232,-1.727641,-5.928683,-3.735264],[-3.249151,2.385661,2.466673,-6.978145,5.026697,8.891496],[4.570731,-4.873644,1.194879,7.765584,9.004467,-5.594780],[9.947776,4.382337,8.274662,4.169105,-9.546196,6.556607],[4.614125,2.504805,8.316675,-9.027804,-9.238114,7.229539]], dtype='float64')
module1.set_input('var_301', input_301)
input_312= np.array([[-8.821375,-9.865454,7.723374,-6.769865,0.127475,-7.826365],[9.065742,-7.511334,-8.077815,-6.830816,0.374819,-0.457036],[-3.008202,0.630791,-1.811229,-9.769147,-0.292990,-3.069577],[6.488648,-9.657844,3.523638,5.288644,-8.429871,-1.937691],[4.265003,2.420774,-5.555690,4.135663,-9.955778,6.760948],[-5.935935,3.462684,-9.976097,-0.002018,-2.394520,-1.436603],[1.199845,5.944458,4.825377,7.572527,-2.227382,-7.660920],[-6.842940,8.191645,-9.450256,8.028463,-0.841671,1.161561],[0.115129,-8.979147,-3.419134,4.703894,-7.207688,-0.285842],[-9.353041,8.326828,-3.862178,5.178788,8.654667,1.658771],[5.043526,-7.744656,-2.512366,-5.774237,8.126589,7.291817],[5.924647,-7.355806,9.339088,8.664398,-7.438727,-6.008198],[-7.048084,1.344830,-4.872004,-0.925290,-3.230255,7.694596],[-6.695730,-4.522218,-1.114429,-2.054970,-8.189506,-7.224852]], dtype='float64')
module1.set_input('var_312', input_312)
input_327= np.array([[5.162655,4.468513,-7.652152,-4.921190,5.240944,-2.684576],[-2.013007,4.872573,-7.117262,8.216043,-6.859827,-4.112128],[-5.438126,-3.383947,4.066953,-8.943141,-1.156508,-2.888189],[-6.286270,-2.700501,9.690605,9.148991,6.471771,-3.964443],[-1.877968,-3.663927,5.927883,0.213350,3.852527,-4.525711],[-7.943319,2.416688,-3.184537,3.465154,-8.895378,-0.144526],[0.814218,-0.596291,-4.220627,-1.969424,-1.144514,1.830974],[1.671087,2.562397,-7.164764,-4.016741,9.389502,6.653043],[2.963763,-0.610925,-2.743023,8.063062,-4.872801,-7.855256],[-4.358270,0.416143,-9.320372,-6.714066,-8.060330,-2.317243],[8.315640,1.867234,0.869652,-1.375552,-1.321548,-5.651221],[6.948643,-3.393953,4.462683,-6.078407,3.294207,2.897880],[-5.119557,3.955104,5.654364,4.530854,-5.866184,7.335941],[-2.820470,5.226872,-0.070349,3.930719,7.509929,-2.318956]], dtype='float32')
module1.set_input('var_327', input_327)
input_338= np.array([[6.633539,7.157342,-9.416133,-8.237850,-3.180951,4.757867],[6.339389,4.443245,-2.800578,1.065505,-9.141672,0.720176],[7.270158,8.676258,-2.909699,9.267328,-2.418049,-1.860836],[1.235643,-3.730520,-7.197237,-6.271403,-6.497814,-4.245988],[-1.849572,9.421422,-1.139594,-2.316579,-0.837778,-0.803870],[0.678718,-0.542340,-9.527520,-0.826018,5.385206,-8.431413],[6.624284,8.118774,-8.276776,-4.297031,-7.412381,9.089954],[-3.950222,-2.292799,6.216204,5.277838,-3.212522,8.829649],[-3.226843,4.959676,-5.241587,8.070219,-2.734742,1.120264],[-9.647367,0.075399,-0.325941,6.267983,-3.415783,0.609515],[4.574861,-9.035186,-6.706699,-6.818432,-5.110831,-5.731598],[1.912117,-8.691174,-7.296340,-9.659299,0.912608,0.698488],[9.592457,-9.277822,-3.565212,7.611637,-2.484819,-7.255704],[1.765953,5.685909,-4.072912,-0.836701,7.297197,4.363307]], dtype='float32')
module1.set_input('var_338', input_338)
input_349= np.array([[8.064015,4.831751,8.674083,-6.357939,4.062926,6.040716],[-0.765596,8.961772,-4.132867,8.108832,0.490230,6.652902],[-3.258692,1.669725,-4.056137,0.228128,7.898125,-8.799837],[-2.450022,0.036312,2.242064,4.624931,0.387805,-3.566834],[-5.191309,-9.419820,-8.516186,2.961049,5.767225,4.986645],[1.368315,8.323143,3.132261,-3.333348,-7.478742,6.959422],[-7.094393,0.937695,-5.536266,5.419511,0.832440,-3.175954],[-8.888564,-4.588981,-2.766467,8.036375,5.819407,-0.093377],[0.904989,-1.161396,-1.747011,1.381657,-9.720235,3.958467],[5.548500,-6.769019,-6.886805,-3.748403,-6.107963,-2.266998],[-3.317969,5.018003,7.906836,-5.323111,-9.718043,-7.250541],[7.338776,8.088002,7.364827,-1.981585,8.586036,6.149445],[8.719585,-4.497330,3.659690,-7.430536,7.347545,5.043854],[-5.873948,6.004297,-7.391079,2.350087,8.924243,5.086412]], dtype='float32')
module1.set_input('var_349', input_349)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_272, input_273, input_293, input_294, input_301, input_312, input_327, input_338, input_349, )
res3 = intrp3.evaluate()(input_272, input_273, input_293, input_294, input_301, input_312, input_327, input_338, input_349, )
res4 = intrp4.evaluate()(input_272, input_273, input_293, input_294, input_301, input_312, input_327, input_338, input_349, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
module5.set_input('var_272', input_272)
module5.set_input('var_273', input_273)
module5.set_input('var_293', input_293)
module5.set_input('var_294', input_294)
module5.set_input('var_301', input_301)
module5.set_input('var_312', input_312)
module5.set_input('var_327', input_327)
module5.set_input('var_338', input_338)
module5.set_input('var_349', input_349)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_272, input_273, input_293, input_294, input_301, input_312, input_327, input_338, input_349, )
res7 = intrp7.evaluate()(input_272, input_273, input_293, input_294, input_301, input_312, input_327, input_338, input_349, )
res8 = intrp8.evaluate()(input_272, input_273, input_293, input_294, input_301, input_312, input_327, input_338, input_349, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
module9.set_input('var_272', input_272)
module9.set_input('var_273', input_273)
module9.set_input('var_293', input_293)
module9.set_input('var_294', input_294)
module9.set_input('var_301', input_301)
module9.set_input('var_312', input_312)
module9.set_input('var_327', input_327)
module9.set_input('var_338', input_338)
module9.set_input('var_349', input_349)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_272, input_273, input_293, input_294, input_301, input_312, input_327, input_338, input_349, )
res11 = intrp11.evaluate()(input_272, input_273, input_293, input_294, input_301, input_312, input_327, input_338, input_349, )
res12 = intrp12.evaluate()(input_272, input_273, input_293, input_294, input_301, input_312, input_327, input_338, input_349, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
module13.set_input('var_272', input_272)
module13.set_input('var_273', input_273)
module13.set_input('var_293', input_293)
module13.set_input('var_294', input_294)
module13.set_input('var_301', input_301)
module13.set_input('var_312', input_312)
module13.set_input('var_327', input_327)
module13.set_input('var_338', input_338)
module13.set_input('var_349', input_349)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_272, input_273, input_293, input_294, input_301, input_312, input_327, input_338, input_349, )
res15 = intrp15.evaluate()(input_272, input_273, input_293, input_294, input_301, input_312, input_327, input_338, input_349, )
res16 = intrp16.evaluate()(input_272, input_273, input_293, input_294, input_301, input_312, input_327, input_338, input_349, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
module17.set_input('var_272', input_272)
module17.set_input('var_273', input_273)
module17.set_input('var_293', input_293)
module17.set_input('var_294', input_294)
module17.set_input('var_301', input_301)
module17.set_input('var_312', input_312)
module17.set_input('var_327', input_327)
module17.set_input('var_338', input_338)
module17.set_input('var_349', input_349)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_272, input_273, input_293, input_294, input_301, input_312, input_327, input_338, input_349, )
res19 = intrp19.evaluate()(input_272, input_273, input_293, input_294, input_301, input_312, input_327, input_338, input_349, )
res20 = intrp20.evaluate()(input_272, input_273, input_293, input_294, input_301, input_312, input_327, input_338, input_349, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
module21.set_input('var_272', input_272)
module21.set_input('var_273', input_273)
module21.set_input('var_293', input_293)
module21.set_input('var_294', input_294)
module21.set_input('var_301', input_301)
module21.set_input('var_312', input_312)
module21.set_input('var_327', input_327)
module21.set_input('var_338', input_338)
module21.set_input('var_349', input_349)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_272, input_273, input_293, input_294, input_301, input_312, input_327, input_338, input_349, )
res23 = intrp23.evaluate()(input_272, input_273, input_293, input_294, input_301, input_312, input_327, input_338, input_349, )
res24 = intrp24.evaluate()(input_272, input_273, input_293, input_294, input_301, input_312, input_327, input_338, input_349, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()

'''21: TVMFuncCall
20: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
19: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
18: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
17: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
16: tvm::transform::Pass::operator()(tvm::IRModule) const
15: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
14: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
13: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
12: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
11: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
10: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
9: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
8: tvm::transform::Pass::operator()(tvm::IRModule) const
7: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
6: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::Pass::operator()(tvm::IRModule) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
0: tvm::DiagnosticContext::Render()

'''