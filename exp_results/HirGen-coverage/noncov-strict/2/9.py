import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (7, 9))#candidate|0|(7, 9)|var|float32
uop_1 = relay.atan(var_0.astype('float32')) # shape=(7, 9)
uop_3 = relay.sinh(uop_1.astype('float32')) # shape=(7, 9)
uop_5 = relay.exp(var_0.astype('float32')) # shape=(7, 9)
output = relay.Tuple([uop_3,uop_5,])
output2 = relay.Tuple([uop_3,uop_5,])
func_7 = relay.Function([var_0,], output)
mod['func_7'] = func_7
mod = relay.transform.InferType()(mod)
var_8 = relay.var("var_8", dtype = "float32", shape = (7, 9))#candidate|8|(7, 9)|var|float32
output = func_7(var_8)
func_9 = relay.Function([var_8], output)
mutated_mod['func_9'] = func_9
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11 = relay.var("var_11", dtype = "float32", shape = (8, 1, 7))#candidate|11|(8, 1, 7)|var|float32
uop_12 = relay.log(var_11.astype('float32')) # shape=(8, 1, 7)
output = relay.Tuple([uop_12,])
output2 = relay.Tuple([uop_12,])
func_14 = relay.Function([var_11,], output)
mod['func_14'] = func_14
mod = relay.transform.InferType()(mod)
mutated_mod['func_14'] = func_14
mutated_mod = relay.transform.InferType()(mutated_mod)
var_15 = relay.var("var_15", dtype = "float32", shape = (8, 1, 7))#candidate|15|(8, 1, 7)|var|float32
func_14_call = mutated_mod.get_global_var('func_14')
call_16 = func_14_call(var_15)
output = call_16
func_17 = relay.Function([var_15], output)
mutated_mod['func_17'] = func_17
mutated_mod = relay.transform.InferType()(mutated_mod)
var_19 = relay.var("var_19", dtype = "float32", shape = (8,))#candidate|19|(8,)|var|float32
var_20 = relay.var("var_20", dtype = "float32", shape = (8,))#candidate|20|(8,)|var|float32
bop_21 = relay.mod(var_19.astype('float32'), relay.reshape(var_20.astype('float32'), relay.shape_of(var_19))) # shape=(8,)
var_24 = relay.var("var_24", dtype = "float32", shape = (8,))#candidate|24|(8,)|var|float32
bop_25 = relay.divide(var_20.astype('float64'), relay.reshape(var_24.astype('float64'), relay.shape_of(var_20))) # shape=(8,)
var_28 = relay.var("var_28", dtype = "float32", shape = (8,))#candidate|28|(8,)|var|float32
bop_29 = relay.less_equal(var_24.astype('bool'), relay.reshape(var_28.astype('bool'), relay.shape_of(var_24))) # shape=(8,)
var_32 = relay.var("var_32", dtype = "float32", shape = (8,))#candidate|32|(8,)|var|float32
bop_33 = relay.multiply(var_24.astype('uint8'), relay.reshape(var_32.astype('uint8'), relay.shape_of(var_24))) # shape=(8,)
uop_36 = relay.atan(var_19.astype('float64')) # shape=(8,)
uop_38 = relay.asin(uop_36.astype('float64')) # shape=(8,)
bop_40 = relay.floor_mod(uop_38.astype('float64'), relay.reshape(var_32.astype('float64'), relay.shape_of(uop_38))) # shape=(8,)
func_14_call = mod.get_global_var('func_14')
func_17_call = mutated_mod.get_global_var('func_17')
const_44 = relay.const([2.471239,5.476003,2.460449,-3.864820,3.955449,6.944208,0.430501,-2.041620,6.215698,-8.774563,-1.851992,1.080119,6.854581,-1.000377,-3.647511,6.352813,5.529704,5.886287,-8.603623,0.123957,-2.407650,7.519306,-4.500446,4.001601,5.238270,1.162137,-1.195512,-6.046779,7.161734,-6.732539,6.022556,5.730478,7.298903,0.684494,-0.820307,3.690075,7.178876,2.868557,-4.381806,-6.004920,-5.041946,1.842752,-9.018595,9.100570,-7.393065,-9.217065,0.540192,-3.955896,-6.593371,-3.756048,-9.656158,6.220712,-5.737691,5.664490,2.773639,-2.780916], dtype = "float32")#candidate|44|(56,)|const|float32
call_43 = relay.TupleGetItem(func_14_call(relay.reshape(const_44.astype('float32'), [8, 1, 7])), 0)
call_45 = relay.TupleGetItem(func_17_call(relay.reshape(const_44.astype('float32'), [8, 1, 7])), 0)
uop_46 = relay.log2(uop_38.astype('float32')) # shape=(8,)
var_48 = relay.var("var_48", dtype = "float32", shape = (8,))#candidate|48|(8,)|var|float32
bop_49 = relay.right_shift(uop_46.astype('uint8'), relay.reshape(var_48.astype('uint8'), relay.shape_of(uop_46))) # shape=(8,)
bop_52 = relay.maximum(bop_40.astype('uint32'), relay.reshape(bop_21.astype('uint32'), relay.shape_of(bop_40))) # shape=(8,)
bop_55 = relay.bitwise_xor(uop_38.astype('int64'), relay.reshape(var_20.astype('int64'), relay.shape_of(uop_38))) # shape=(8,)
output = relay.Tuple([bop_25,bop_29,bop_33,call_43,const_44,bop_49,bop_52,bop_55,])
output2 = relay.Tuple([bop_25,bop_29,bop_33,call_45,const_44,bop_49,bop_52,bop_55,])
func_58 = relay.Function([var_19,var_20,var_24,var_28,var_32,var_48,], output)
mod['func_58'] = func_58
mod = relay.transform.InferType()(mod)
var_59 = relay.var("var_59", dtype = "float32", shape = (8,))#candidate|59|(8,)|var|float32
var_60 = relay.var("var_60", dtype = "float32", shape = (8,))#candidate|60|(8,)|var|float32
var_61 = relay.var("var_61", dtype = "float32", shape = (8,))#candidate|61|(8,)|var|float32
var_62 = relay.var("var_62", dtype = "float32", shape = (8,))#candidate|62|(8,)|var|float32
var_63 = relay.var("var_63", dtype = "float32", shape = (8,))#candidate|63|(8,)|var|float32
var_64 = relay.var("var_64", dtype = "float32", shape = (8,))#candidate|64|(8,)|var|float32
output = func_58(var_59,var_60,var_61,var_62,var_63,var_64,)
func_65 = relay.Function([var_59,var_60,var_61,var_62,var_63,var_64,], output)
mutated_mod['func_65'] = func_65
mutated_mod = relay.transform.InferType()(mutated_mod)
var_67 = relay.var("var_67", dtype = "uint64", shape = ())#candidate|67|()|var|uint64
var_68 = relay.var("var_68", dtype = "uint64", shape = (8, 14))#candidate|68|(8, 14)|var|uint64
bop_69 = relay.bitwise_xor(var_67.astype('uint64'), var_68.astype('uint64')) # shape=(8, 14)
uop_72 = relay.atan(var_67.astype('float64')) # shape=()
bop_74 = relay.subtract(uop_72.astype('uint16'), var_68.astype('uint16')) # shape=(8, 14)
uop_77 = relay.atan(bop_74.astype('float64')) # shape=(8, 14)
output = relay.Tuple([bop_69,uop_77,])
output2 = relay.Tuple([bop_69,uop_77,])
func_79 = relay.Function([var_67,var_68,], output)
mod['func_79'] = func_79
mod = relay.transform.InferType()(mod)
var_80 = relay.var("var_80", dtype = "uint64", shape = ())#candidate|80|()|var|uint64
var_81 = relay.var("var_81", dtype = "uint64", shape = (8, 14))#candidate|81|(8, 14)|var|uint64
output = func_79(var_80,var_81,)
func_82 = relay.Function([var_80,var_81,], output)
mutated_mod['func_82'] = func_82
mutated_mod = relay.transform.InferType()(mutated_mod)
var_84 = relay.var("var_84", dtype = "float32", shape = (6, 1, 13))#candidate|84|(6, 1, 13)|var|float32
uop_85 = relay.tan(var_84.astype('float32')) # shape=(6, 1, 13)
bop_87 = relay.not_equal(uop_85.astype('bool'), relay.reshape(var_84.astype('bool'), relay.shape_of(uop_85))) # shape=(6, 1, 13)
bop_90 = relay.minimum(uop_85.astype('int16'), relay.reshape(var_84.astype('int16'), relay.shape_of(uop_85))) # shape=(6, 1, 13)
uop_93 = relay.erf(var_84.astype('float32')) # shape=(6, 1, 13)
uop_95 = relay.exp(uop_85.astype('float32')) # shape=(6, 1, 13)
output = relay.Tuple([bop_87,bop_90,uop_93,uop_95,])
output2 = relay.Tuple([bop_87,bop_90,uop_93,uop_95,])
func_97 = relay.Function([var_84,], output)
mod['func_97'] = func_97
mod = relay.transform.InferType()(mod)
var_98 = relay.var("var_98", dtype = "float32", shape = (6, 1, 13))#candidate|98|(6, 1, 13)|var|float32
output = func_97(var_98)
func_99 = relay.Function([var_98], output)
mutated_mod['func_99'] = func_99
mutated_mod = relay.transform.InferType()(mutated_mod)
var_101 = relay.var("var_101", dtype = "int64", shape = (5, 5, 14))#candidate|101|(5, 5, 14)|var|int64
var_102 = relay.var("var_102", dtype = "int64", shape = (5, 5, 14))#candidate|102|(5, 5, 14)|var|int64
bop_103 = relay.logical_xor(var_101.astype('int64'), relay.reshape(var_102.astype('int64'), relay.shape_of(var_101))) # shape=(5, 5, 14)
bop_106 = relay.less_equal(var_101.astype('bool'), relay.reshape(var_102.astype('bool'), relay.shape_of(var_101))) # shape=(5, 5, 14)
bop_109 = relay.logical_and(bop_103.astype('bool'), relay.reshape(bop_106.astype('bool'), relay.shape_of(bop_103))) # shape=(5, 5, 14)
var_112 = relay.var("var_112", dtype = "bool", shape = (5, 5, 14))#candidate|112|(5, 5, 14)|var|bool
bop_113 = relay.less(bop_109.astype('bool'), relay.reshape(var_112.astype('bool'), relay.shape_of(bop_109))) # shape=(5, 5, 14)
func_14_call = mod.get_global_var('func_14')
func_17_call = mutated_mod.get_global_var('func_17')
var_117 = relay.var("var_117", dtype = "float32", shape = (56,))#candidate|117|(56,)|var|float32
call_116 = relay.TupleGetItem(func_14_call(relay.reshape(var_117.astype('float32'), [8, 1, 7])), 0)
call_118 = relay.TupleGetItem(func_17_call(relay.reshape(var_117.astype('float32'), [8, 1, 7])), 0)
uop_119 = relay.asin(bop_109.astype('float32')) # shape=(5, 5, 14)
bop_121 = relay.logical_xor(uop_119.astype('int16'), relay.reshape(var_112.astype('int16'), relay.shape_of(uop_119))) # shape=(5, 5, 14)
uop_124 = relay.atan(bop_109.astype('float64')) # shape=(5, 5, 14)
bop_126 = relay.minimum(bop_113.astype('uint32'), relay.reshape(var_112.astype('uint32'), relay.shape_of(bop_113))) # shape=(5, 5, 14)
uop_129 = relay.atanh(uop_119.astype('float64')) # shape=(5, 5, 14)
bop_131 = relay.logical_and(bop_121.astype('bool'), relay.reshape(bop_106.astype('bool'), relay.shape_of(bop_121))) # shape=(5, 5, 14)
uop_134 = relay.sin(bop_131.astype('float64')) # shape=(5, 5, 14)
uop_136 = relay.erf(uop_129.astype('float64')) # shape=(5, 5, 14)
func_79_call = mod.get_global_var('func_79')
func_82_call = mutated_mod.get_global_var('func_82')
const_139 = relay.const(5, dtype = "uint64")#candidate|139|()|const|uint64
const_140 = relay.const([[10,9],[1,-6],[-7,-10],[-1,-6],[1,-6],[-1,-9],[4,4],[-9,-5],[6,-7],[-1,-7],[6,-5],[-6,-9],[-8,8],[-7,-10],[4,10],[-6,2],[-1,8],[4,8],[-3,-6],[-8,8],[9,5],[-6,6],[-9,-3],[1,7],[-4,4],[10,-7],[-7,-2],[7,10],[7,-1],[10,-4],[4,-6],[-1,-7],[-9,3],[2,-10],[5,3],[3,10],[-1,-4],[-8,2],[6,-7],[2,-1],[6,10],[-8,-9],[2,4],[7,7],[3,-9],[-2,3],[10,4],[-5,-4],[-3,-10],[-5,-1],[-3,6],[9,10],[-7,-4],[-1,-6],[6,-4],[6,-5]], dtype = "uint64")#candidate|140|(56, 2)|const|uint64
call_138 = relay.TupleGetItem(func_79_call(relay.reshape(const_139.astype('uint64'), []), relay.reshape(const_140.astype('uint64'), [8, 14]), ), 0)
call_141 = relay.TupleGetItem(func_82_call(relay.reshape(const_139.astype('uint64'), []), relay.reshape(const_140.astype('uint64'), [8, 14]), ), 0)
var_142 = relay.var("var_142", dtype = "float64", shape = (5, 5, 14))#candidate|142|(5, 5, 14)|var|float64
bop_143 = relay.logical_xor(uop_136.astype('int16'), relay.reshape(var_142.astype('int16'), relay.shape_of(uop_136))) # shape=(5, 5, 14)
bop_146 = relay.minimum(uop_136.astype('uint8'), const_139.astype('uint8')) # shape=(5, 5, 14)
var_149 = relay.var("var_149", dtype = "float64", shape = (5, 5, 14))#candidate|149|(5, 5, 14)|var|float64
bop_150 = relay.right_shift(uop_124.astype('int32'), relay.reshape(var_149.astype('int32'), relay.shape_of(uop_124))) # shape=(5, 5, 14)
var_153 = relay.var("var_153", dtype = "float64", shape = (5, 5, 14))#candidate|153|(5, 5, 14)|var|float64
bop_154 = relay.mod(uop_136.astype('float64'), relay.reshape(var_153.astype('float64'), relay.shape_of(uop_136))) # shape=(5, 5, 14)
bop_157 = relay.greater_equal(var_117.astype('bool'), relay.reshape(call_116.astype('bool'), relay.shape_of(var_117))) # shape=(56,)
bop_160 = relay.greater_equal(var_117.astype('bool'), relay.reshape(call_118.astype('bool'), relay.shape_of(var_117))) # shape=(56,)
bop_161 = relay.subtract(uop_129.astype('float64'), relay.reshape(bop_113.astype('float64'), relay.shape_of(uop_129))) # shape=(5, 5, 14)
bop_164 = relay.minimum(uop_136.astype('uint16'), relay.reshape(var_149.astype('uint16'), relay.shape_of(uop_136))) # shape=(5, 5, 14)
uop_167 = relay.atan(var_102.astype('float64')) # shape=(5, 5, 14)
func_58_call = mod.get_global_var('func_58')
func_65_call = mutated_mod.get_global_var('func_65')
var_170 = relay.var("var_170", dtype = "float32", shape = (8,))#candidate|170|(8,)|var|float32
call_169 = relay.TupleGetItem(func_58_call(relay.reshape(var_170.astype('float32'), [8,]), relay.reshape(var_170.astype('float32'), [8,]), relay.reshape(var_170.astype('float32'), [8,]), relay.reshape(var_170.astype('float32'), [8,]), relay.reshape(var_170.astype('float32'), [8,]), relay.reshape(var_170.astype('float32'), [8,]), ), 1)
call_171 = relay.TupleGetItem(func_65_call(relay.reshape(var_170.astype('float32'), [8,]), relay.reshape(var_170.astype('float32'), [8,]), relay.reshape(var_170.astype('float32'), [8,]), relay.reshape(var_170.astype('float32'), [8,]), relay.reshape(var_170.astype('float32'), [8,]), relay.reshape(var_170.astype('float32'), [8,]), ), 1)
uop_172 = relay.sin(uop_129.astype('float32')) # shape=(5, 5, 14)
bop_174 = relay.mod(uop_167.astype('float32'), relay.reshape(bop_146.astype('float32'), relay.shape_of(uop_167))) # shape=(5, 5, 14)
var_177 = relay.var("var_177", dtype = "int16", shape = (5, 5, 14))#candidate|177|(5, 5, 14)|var|int16
bop_178 = relay.maximum(bop_143.astype('int16'), relay.reshape(var_177.astype('int16'), relay.shape_of(bop_143))) # shape=(5, 5, 14)
uop_181 = relay.sinh(uop_124.astype('float64')) # shape=(5, 5, 14)
uop_183 = relay.erf(bop_106.astype('float64')) # shape=(5, 5, 14)
uop_185 = relay.exp(uop_119.astype('float32')) # shape=(5, 5, 14)
var_187 = relay.var("var_187", dtype = "float64", shape = (5, 5, 14))#candidate|187|(5, 5, 14)|var|float64
bop_188 = relay.less(uop_136.astype('bool'), relay.reshape(var_187.astype('bool'), relay.shape_of(uop_136))) # shape=(5, 5, 14)
output = relay.Tuple([bop_126,uop_134,call_138,const_140,bop_150,bop_154,bop_157,bop_161,bop_164,call_169,var_170,uop_172,bop_174,bop_178,uop_181,uop_183,uop_185,bop_188,])
output2 = relay.Tuple([bop_126,uop_134,call_141,const_140,bop_150,bop_154,bop_160,bop_161,bop_164,call_171,var_170,uop_172,bop_174,bop_178,uop_181,uop_183,uop_185,bop_188,])
func_191 = relay.Function([var_101,var_102,var_112,var_117,var_142,var_149,var_153,var_170,var_177,var_187,], output)
mod['func_191'] = func_191
mod = relay.transform.InferType()(mod)
mutated_mod['func_191'] = func_191
mutated_mod = relay.transform.InferType()(mutated_mod)
func_191_call = mutated_mod.get_global_var('func_191')
var_193 = relay.var("var_193", dtype = "int64", shape = (5, 5, 14))#candidate|193|(5, 5, 14)|var|int64
var_194 = relay.var("var_194", dtype = "int64", shape = (5, 5, 14))#candidate|194|(5, 5, 14)|var|int64
var_195 = relay.var("var_195", dtype = "bool", shape = (5, 5, 14))#candidate|195|(5, 5, 14)|var|bool
var_196 = relay.var("var_196", dtype = "float32", shape = (56,))#candidate|196|(56,)|var|float32
var_197 = relay.var("var_197", dtype = "float64", shape = (5, 5, 14))#candidate|197|(5, 5, 14)|var|float64
var_198 = relay.var("var_198", dtype = "float64", shape = (5, 5, 14))#candidate|198|(5, 5, 14)|var|float64
var_199 = relay.var("var_199", dtype = "float64", shape = (5, 5, 14))#candidate|199|(5, 5, 14)|var|float64
var_200 = relay.var("var_200", dtype = "float32", shape = (8,))#candidate|200|(8,)|var|float32
var_201 = relay.var("var_201", dtype = "int16", shape = (5, 5, 14))#candidate|201|(5, 5, 14)|var|int16
var_202 = relay.var("var_202", dtype = "float64", shape = (5, 5, 14))#candidate|202|(5, 5, 14)|var|float64
call_192 = func_191_call(var_193,var_194,var_195,var_196,var_197,var_198,var_199,var_200,var_201,var_202,)
output = call_192
func_203 = relay.Function([var_193,var_194,var_195,var_196,var_197,var_198,var_199,var_200,var_201,var_202,], output)
mutated_mod['func_203'] = func_203
mutated_mod = relay.transform.InferType()(mutated_mod)
var_205 = relay.var("var_205", dtype = "uint64", shape = (12, 15))#candidate|205|(12, 15)|var|uint64
var_206 = relay.var("var_206", dtype = "uint64", shape = (12, 15))#candidate|206|(12, 15)|var|uint64
bop_207 = relay.add(var_205.astype('uint64'), relay.reshape(var_206.astype('uint64'), relay.shape_of(var_205))) # shape=(12, 15)
bop_210 = relay.divide(bop_207.astype('float64'), relay.reshape(var_205.astype('float64'), relay.shape_of(bop_207))) # shape=(12, 15)
func_58_call = mod.get_global_var('func_58')
func_65_call = mutated_mod.get_global_var('func_65')
var_214 = relay.var("var_214", dtype = "float32", shape = (8,))#candidate|214|(8,)|var|float32
call_213 = relay.TupleGetItem(func_58_call(relay.reshape(var_214.astype('float32'), [8,]), relay.reshape(var_214.astype('float32'), [8,]), relay.reshape(var_214.astype('float32'), [8,]), relay.reshape(var_214.astype('float32'), [8,]), relay.reshape(var_214.astype('float32'), [8,]), relay.reshape(var_214.astype('float32'), [8,]), ), 4)
call_215 = relay.TupleGetItem(func_65_call(relay.reshape(var_214.astype('float32'), [8,]), relay.reshape(var_214.astype('float32'), [8,]), relay.reshape(var_214.astype('float32'), [8,]), relay.reshape(var_214.astype('float32'), [8,]), relay.reshape(var_214.astype('float32'), [8,]), relay.reshape(var_214.astype('float32'), [8,]), ), 4)
bop_216 = relay.add(bop_210.astype('int8'), relay.reshape(bop_207.astype('int8'), relay.shape_of(bop_210))) # shape=(12, 15)
uop_219 = relay.sinh(call_213.astype('float64')) # shape=(56,)
uop_221 = relay.sinh(call_215.astype('float64')) # shape=(56,)
const_222 = relay.const([[8,9,-7,-9,-7,-8,10,1,-2,-8,-1,10,-1,8,7],[5,-2,-9,1,10,10,-8,-5,-2,5,5,-4,5,4,-1],[7,-4,-10,8,10,-9,3,-3,-4,5,-5,-5,-7,-4,-6],[-10,3,-2,9,-2,5,1,9,-8,9,4,6,-4,-2,6],[5,2,3,1,-3,3,6,-8,8,-8,1,-2,1,-2,8],[2,-3,1,8,8,-5,-1,-4,6,7,8,7,-7,-8,3],[6,-1,-2,6,2,-1,-4,-10,5,10,-9,2,-8,6,5],[-6,-5,-1,-7,6,1,-8,4,-5,3,1,-4,10,9,2],[3,6,-2,6,-3,1,-2,1,9,2,-3,-6,3,1,-1],[-7,-10,4,-1,-3,3,-10,-7,10,9,1,-5,9,4,2],[-4,10,4,-7,-4,-1,6,-3,-4,-2,7,7,10,-1,-7],[-8,2,4,-3,10,1,6,5,-2,-4,-6,-8,2,2,-10]], dtype = "uint64")#candidate|222|(12, 15)|const|uint64
bop_223 = relay.less_equal(var_205.astype('bool'), relay.reshape(const_222.astype('bool'), relay.shape_of(var_205))) # shape=(12, 15)
uop_226 = relay.acosh(uop_219.astype('float64')) # shape=(56,)
uop_228 = relay.acosh(uop_221.astype('float64')) # shape=(56,)
uop_229 = relay.exp(uop_226.astype('float32')) # shape=(56,)
uop_231 = relay.exp(uop_228.astype('float32')) # shape=(56,)
uop_232 = relay.atan(uop_229.astype('float64')) # shape=(56,)
uop_234 = relay.atan(uop_231.astype('float64')) # shape=(56,)
uop_235 = relay.exp(uop_232.astype('float64')) # shape=(56,)
uop_237 = relay.exp(uop_234.astype('float64')) # shape=(56,)
var_238 = relay.var("var_238", dtype = "float64", shape = (56,))#candidate|238|(56,)|var|float64
bop_239 = relay.not_equal(uop_232.astype('bool'), relay.reshape(var_238.astype('bool'), relay.shape_of(uop_232))) # shape=(56,)
bop_242 = relay.not_equal(uop_234.astype('bool'), relay.reshape(var_238.astype('bool'), relay.shape_of(uop_234))) # shape=(56,)
output = relay.Tuple([var_214,bop_216,bop_223,uop_235,bop_239,])
output2 = relay.Tuple([var_214,bop_216,bop_223,uop_237,bop_242,])
func_243 = relay.Function([var_205,var_206,var_214,var_238,], output)
mod['func_243'] = func_243
mod = relay.transform.InferType()(mod)
mutated_mod['func_243'] = func_243
mutated_mod = relay.transform.InferType()(mutated_mod)
func_243_call = mutated_mod.get_global_var('func_243')
var_245 = relay.var("var_245", dtype = "uint64", shape = (12, 15))#candidate|245|(12, 15)|var|uint64
var_246 = relay.var("var_246", dtype = "uint64", shape = (12, 15))#candidate|246|(12, 15)|var|uint64
var_247 = relay.var("var_247", dtype = "float32", shape = (8,))#candidate|247|(8,)|var|float32
var_248 = relay.var("var_248", dtype = "float64", shape = (56,))#candidate|248|(56,)|var|float64
call_244 = func_243_call(var_245,var_246,var_247,var_248,)
output = call_244
func_249 = relay.Function([var_245,var_246,var_247,var_248,], output)
mutated_mod['func_249'] = func_249
mutated_mod = relay.transform.InferType()(mutated_mod)
var_251 = relay.var("var_251", dtype = "float64", shape = (10,))#candidate|251|(10,)|var|float64
uop_252 = relay.atanh(var_251.astype('float64')) # shape=(10,)
var_254 = relay.var("var_254", dtype = "float64", shape = (10,))#candidate|254|(10,)|var|float64
bop_255 = relay.minimum(uop_252.astype('int8'), relay.reshape(var_254.astype('int8'), relay.shape_of(uop_252))) # shape=(10,)
output = bop_255
output2 = bop_255
func_258 = relay.Function([var_251,var_254,], output)
mod['func_258'] = func_258
mod = relay.transform.InferType()(mod)
var_259 = relay.var("var_259", dtype = "float64", shape = (10,))#candidate|259|(10,)|var|float64
var_260 = relay.var("var_260", dtype = "float64", shape = (10,))#candidate|260|(10,)|var|float64
output = func_258(var_259,var_260,)
func_261 = relay.Function([var_259,var_260,], output)
mutated_mod['func_261'] = func_261
mutated_mod = relay.transform.InferType()(mutated_mod)
var_263 = relay.var("var_263", dtype = "float32", shape = (5,))#candidate|263|(5,)|var|float32
uop_264 = relay.sinh(var_263.astype('float32')) # shape=(5,)
bop_266 = relay.logical_xor(uop_264.astype('int32'), relay.reshape(var_263.astype('int32'), relay.shape_of(uop_264))) # shape=(5,)
bop_269 = relay.greater_equal(bop_266.astype('bool'), relay.reshape(uop_264.astype('bool'), relay.shape_of(bop_266))) # shape=(5,)
uop_272 = relay.sinh(var_263.astype('float64')) # shape=(5,)
uop_274 = relay.log2(bop_266.astype('float32')) # shape=(5,)
bop_276 = relay.left_shift(uop_274.astype('int16'), relay.reshape(bop_269.astype('int16'), relay.shape_of(uop_274))) # shape=(5,)
uop_279 = relay.log(bop_269.astype('float32')) # shape=(5,)
func_97_call = mod.get_global_var('func_97')
func_99_call = mutated_mod.get_global_var('func_99')
var_282 = relay.var("var_282", dtype = "float32", shape = (78,))#candidate|282|(78,)|var|float32
call_281 = relay.TupleGetItem(func_97_call(relay.reshape(var_282.astype('float32'), [6, 1, 13])), 0)
call_283 = relay.TupleGetItem(func_99_call(relay.reshape(var_282.astype('float32'), [6, 1, 13])), 0)
bop_284 = relay.less(call_281.astype('bool'), relay.reshape(var_282.astype('bool'), relay.shape_of(call_281))) # shape=(6, 1, 13)
bop_287 = relay.less(call_283.astype('bool'), relay.reshape(var_282.astype('bool'), relay.shape_of(call_283))) # shape=(6, 1, 13)
uop_288 = relay.rsqrt(uop_264.astype('float32')) # shape=(5,)
uop_290 = relay.cos(bop_276.astype('float32')) # shape=(5,)
bop_292 = relay.power(uop_290.astype('float64'), relay.reshape(bop_266.astype('float64'), relay.shape_of(uop_290))) # shape=(5,)
bop_295 = relay.logical_or(bop_269.astype('bool'), relay.reshape(bop_276.astype('bool'), relay.shape_of(bop_269))) # shape=(5,)
var_298 = relay.var("var_298", dtype = "float32", shape = (5,))#candidate|298|(5,)|var|float32
bop_299 = relay.floor_divide(uop_279.astype('float32'), relay.reshape(var_298.astype('float32'), relay.shape_of(uop_279))) # shape=(5,)
uop_302 = relay.rsqrt(uop_279.astype('float64')) # shape=(5,)
bop_304 = relay.greater(uop_274.astype('bool'), relay.reshape(bop_292.astype('bool'), relay.shape_of(uop_274))) # shape=(5,)
var_307 = relay.var("var_307", dtype = "float64", shape = (5,))#candidate|307|(5,)|var|float64
bop_308 = relay.add(bop_292.astype('float64'), relay.reshape(var_307.astype('float64'), relay.shape_of(bop_292))) # shape=(5,)
output = relay.Tuple([uop_272,bop_284,uop_288,bop_295,bop_299,uop_302,bop_304,bop_308,])
output2 = relay.Tuple([uop_272,bop_287,uop_288,bop_295,bop_299,uop_302,bop_304,bop_308,])
func_311 = relay.Function([var_263,var_282,var_298,var_307,], output)
mod['func_311'] = func_311
mod = relay.transform.InferType()(mod)
mutated_mod['func_311'] = func_311
mutated_mod = relay.transform.InferType()(mutated_mod)
func_311_call = mutated_mod.get_global_var('func_311')
var_313 = relay.var("var_313", dtype = "float32", shape = (5,))#candidate|313|(5,)|var|float32
var_314 = relay.var("var_314", dtype = "float32", shape = (78,))#candidate|314|(78,)|var|float32
var_315 = relay.var("var_315", dtype = "float32", shape = (5,))#candidate|315|(5,)|var|float32
var_316 = relay.var("var_316", dtype = "float64", shape = (5,))#candidate|316|(5,)|var|float64
call_312 = func_311_call(var_313,var_314,var_315,var_316,)
output = call_312
func_317 = relay.Function([var_313,var_314,var_315,var_316,], output)
mutated_mod['func_317'] = func_317
mutated_mod = relay.transform.InferType()(mutated_mod)
var_319 = relay.var("var_319", dtype = "uint32", shape = (3,))#candidate|319|(3,)|var|uint32
var_320 = relay.var("var_320", dtype = "uint32", shape = (3,))#candidate|320|(3,)|var|uint32
bop_321 = relay.left_shift(var_319.astype('uint32'), relay.reshape(var_320.astype('uint32'), relay.shape_of(var_319))) # shape=(3,)
bop_324 = relay.less_equal(var_320.astype('bool'), relay.reshape(bop_321.astype('bool'), relay.shape_of(var_320))) # shape=(3,)
bop_327 = relay.multiply(bop_321.astype('uint32'), relay.reshape(var_319.astype('uint32'), relay.shape_of(bop_321))) # shape=(3,)
var_330 = relay.var("var_330", dtype = "bool", shape = (3,))#candidate|330|(3,)|var|bool
bop_331 = relay.logical_and(bop_324.astype('bool'), relay.reshape(var_330.astype('bool'), relay.shape_of(bop_324))) # shape=(3,)
func_311_call = mod.get_global_var('func_311')
func_317_call = mutated_mod.get_global_var('func_317')
var_335 = relay.var("var_335", dtype = "float32", shape = (1, 5))#candidate|335|(1, 5)|var|float32
var_336 = relay.var("var_336", dtype = "float32", shape = (78, 1))#candidate|336|(78, 1)|var|float32
call_334 = relay.TupleGetItem(func_311_call(relay.reshape(var_335.astype('float32'), [5,]), relay.reshape(var_336.astype('float32'), [78,]), relay.reshape(var_335.astype('float32'), [5,]), relay.reshape(var_335.astype('float64'), [5,]), ), 1)
call_337 = relay.TupleGetItem(func_317_call(relay.reshape(var_335.astype('float32'), [5,]), relay.reshape(var_336.astype('float32'), [78,]), relay.reshape(var_335.astype('float32'), [5,]), relay.reshape(var_335.astype('float64'), [5,]), ), 1)
bop_338 = relay.multiply(var_319.astype('int32'), relay.reshape(bop_327.astype('int32'), relay.shape_of(var_319))) # shape=(3,)
bop_341 = relay.divide(var_335.astype('float64'), var_336.astype('float64')) # shape=(78, 5)
uop_344 = relay.sqrt(var_330.astype('float32')) # shape=(3,)
bop_346 = relay.floor_mod(uop_344.astype('float64'), relay.reshape(bop_324.astype('float64'), relay.shape_of(uop_344))) # shape=(3,)
const_349 = relay.const([[-6.549034,5.003598,-6.428157,4.864430,2.494840],[5.683490,-3.254814,-0.800299,-8.413503,-4.886229],[-0.105874,6.068164,-1.655298,5.756374,9.353529],[-2.845626,6.559385,9.061475,3.293085,-9.205186],[-6.976788,-5.734403,-7.191580,9.219941,-6.501317],[-0.158798,4.363149,5.117220,-7.662374,2.102980],[7.460513,2.473356,-9.154447,-4.837992,-7.783991],[-7.447698,-8.008631,6.866487,9.421509,2.214463],[-9.133301,-6.048729,-9.214098,1.135412,4.979818],[-5.413222,-2.239321,6.211508,-2.997206,8.402418],[-0.991779,2.015134,-5.832456,7.684012,6.774712],[-3.012209,6.109994,-7.092156,-1.190001,-2.380925],[-3.214112,-1.057840,-9.706565,0.693668,9.248811],[3.183751,3.654832,4.021618,4.112442,8.092076],[3.435340,-4.171757,4.841200,-6.796251,3.341323],[6.432309,5.500580,-7.458031,4.465070,0.953490],[-2.132323,-9.814179,6.663920,-0.594527,7.354353],[-6.241948,0.727871,3.746401,7.510260,-7.265592],[-5.779904,-9.035326,2.209623,8.000906,7.399202],[9.334453,-9.411152,4.617825,4.740128,-0.773476],[7.298642,-3.116790,-3.717440,6.277197,5.319355],[-8.329372,6.491000,-1.093511,8.370969,7.132080],[-0.229485,8.175735,1.449334,-1.912842,-0.808958],[8.136855,5.467791,-8.541088,5.815717,9.263910],[8.593604,-1.687848,0.562303,5.879183,-2.483437],[9.575437,6.819324,8.173649,9.222530,-1.722551],[2.569304,3.435391,5.728239,-2.479540,-0.883045],[2.055912,5.548569,-6.946420,-9.181590,6.885073],[7.423914,2.060071,1.132779,1.208103,4.344319],[-8.732786,4.409257,0.304427,5.696855,7.963981],[-7.322875,8.171194,-3.236465,-4.127381,3.527210],[1.067895,-1.581772,-0.868324,-3.351619,-6.333855],[1.955696,-3.070568,-0.422977,0.494140,2.788167],[7.858020,1.374185,6.204348,1.445128,9.566680],[1.248656,9.130166,7.782776,-2.724294,9.104367],[8.909920,6.565478,4.461978,-0.844012,-6.362213],[7.676197,8.366485,-1.357056,-3.345677,-5.501938],[0.573503,-4.740702,8.084807,-9.739671,1.014485],[-9.703455,-3.208999,-5.725252,0.556803,-8.923596],[-5.875901,-7.221351,-5.735961,-9.533727,-6.716649],[-9.713773,3.960332,-1.527913,9.642566,-8.031367],[-4.068613,1.875221,-6.205521,-1.148716,-6.858389],[1.240993,-6.647918,-0.351089,6.899928,6.001226],[4.274120,6.825764,-2.926476,4.390467,-1.205788],[1.346321,-9.144624,9.507801,-1.982963,6.492463],[-6.045685,-8.821722,-5.241313,6.715939,4.760449],[4.994926,8.628893,3.518488,-0.964475,1.409651],[-9.476925,1.472273,7.239422,-5.816416,-3.853044],[3.355510,-9.427349,2.673755,-6.903136,-7.601143],[1.800589,2.238118,-0.728908,-8.117262,6.964262],[7.748499,-6.005337,4.665532,0.430431,-4.304995],[1.363381,-3.276984,4.976140,-6.128873,7.124615],[9.239723,-2.656169,4.462062,-6.226252,7.534768],[2.360921,0.769017,4.654766,4.041122,-5.955938],[-9.679942,1.919517,-9.593860,-5.116002,7.294969],[3.477401,-7.215839,0.973201,4.192750,3.710778],[1.460130,3.157123,2.025129,8.979556,-6.372581],[-5.964283,4.702306,7.337838,-6.127884,-0.305718],[4.829210,-0.192265,8.827368,9.115275,6.670595],[8.625584,0.099658,-0.177665,5.976616,-0.163314],[0.107229,-2.396235,-7.161396,-0.003505,8.931474],[-6.921552,6.136887,-8.628352,-4.778843,5.495452],[5.764513,4.739877,0.551477,0.700808,8.571590],[-9.714243,-4.312623,-0.749453,3.553158,4.732572],[6.953773,7.910119,-6.327493,-2.372058,-2.996239],[9.338173,-6.868667,-0.840661,-2.121970,0.728096],[5.731938,-6.560879,-6.502342,2.008637,-1.746940],[9.760873,-3.311886,-2.524126,-9.146615,-2.006945],[-2.671095,-2.016223,-7.219677,-5.771153,-2.704575],[-5.766423,-2.120182,0.309521,0.947944,-9.779486],[5.173439,-5.957676,-4.980917,4.879733,8.771763],[5.534814,0.894991,-8.563814,2.118884,-4.988675],[-0.589800,9.535974,0.890526,-2.733134,6.070727],[-6.588793,-9.437058,2.268108,7.192031,9.903692],[-5.953204,-8.596707,1.771960,2.535554,-4.702555],[-3.939328,-9.064376,5.613589,7.871445,9.838947],[-1.774654,2.513337,-5.813212,3.868896,9.866270],[-3.360354,-1.367893,4.532368,0.432065,-1.299833]], dtype = "float64")#candidate|349|(78, 5)|const|float64
bop_350 = relay.multiply(bop_341.astype('int64'), relay.reshape(const_349.astype('int64'), relay.shape_of(bop_341))) # shape=(78, 5)
uop_353 = relay.log2(var_330.astype('float32')) # shape=(3,)
uop_355 = relay.erf(bop_346.astype('float32')) # shape=(3,)
var_357 = relay.var("var_357", dtype = "float32", shape = (3,))#candidate|357|(3,)|var|float32
bop_358 = relay.left_shift(uop_355.astype('int8'), relay.reshape(var_357.astype('int8'), relay.shape_of(uop_355))) # shape=(3,)
bop_361 = relay.bitwise_or(bop_346.astype('int32'), relay.reshape(var_357.astype('int32'), relay.shape_of(bop_346))) # shape=(3,)
uop_364 = relay.sinh(uop_355.astype('float64')) # shape=(3,)
uop_366 = relay.acos(uop_364.astype('float64')) # shape=(3,)
var_368 = relay.var("var_368", dtype = "float64", shape = (3,))#candidate|368|(3,)|var|float64
bop_369 = relay.bitwise_or(uop_364.astype('int64'), relay.reshape(var_368.astype('int64'), relay.shape_of(uop_364))) # shape=(3,)
uop_372 = relay.exp(uop_355.astype('float32')) # shape=(3,)
bop_374 = relay.minimum(uop_355.astype('float64'), var_336.astype('float64')) # shape=(78, 3)
bop_377 = relay.equal(bop_361.astype('bool'), relay.reshape(uop_366.astype('bool'), relay.shape_of(bop_361))) # shape=(3,)
const_380 = relay.const([-0.426578,9.862030,-7.104433], dtype = "float64")#candidate|380|(3,)|const|float64
bop_381 = relay.bitwise_and(uop_366.astype('uint32'), relay.reshape(const_380.astype('uint32'), relay.shape_of(uop_366))) # shape=(3,)
bop_384 = relay.multiply(bop_377.astype('int32'), relay.reshape(uop_364.astype('int32'), relay.shape_of(bop_377))) # shape=(3,)
output = relay.Tuple([bop_331,call_334,bop_338,bop_350,uop_353,bop_358,bop_369,uop_372,bop_374,bop_381,bop_384,])
output2 = relay.Tuple([bop_331,call_337,bop_338,bop_350,uop_353,bop_358,bop_369,uop_372,bop_374,bop_381,bop_384,])
F = relay.Function([var_319,var_320,var_330,var_335,var_336,var_357,var_368,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_319,var_320,var_330,var_335,var_336,var_357,var_368,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_319= np.array([1,-2,-3], dtype='uint32')
module1.set_input('var_319', input_319)
input_320= np.array([7,-10,7], dtype='uint32')
module1.set_input('var_320', input_320)
input_330= np.array([False,False,True], dtype='bool')
module1.set_input('var_330', input_330)
input_335= np.array([[-3.657032,6.432206,-4.940779,7.756019,-1.368926]], dtype='float32')
module1.set_input('var_335', input_335)
input_336= np.array([[-0.228596],[3.223202],[1.292585],[3.127293],[-2.591292],[-2.245891],[-0.043409],[-9.337741],[-7.824410],[7.036248],[-7.211470],[6.703161],[3.152968],[7.382059],[-9.661280],[0.959530],[-1.111905],[-3.167569],[9.243370],[-5.984403],[1.003516],[6.019281],[-5.463869],[0.898105],[-9.669815],[6.048080],[-9.717896],[-4.106425],[1.391217],[-8.766707],[7.501188],[-3.408649],[-9.265801],[-2.547612],[-6.077594],[1.318737],[5.097096],[-7.848055],[-3.152881],[-1.684467],[-2.337710],[-5.257940],[-8.077946],[-1.892179],[-2.494717],[3.139630],[-5.517837],[-6.589307],[-9.051252],[3.752264],[1.687553],[-2.291377],[1.046808],[-2.456955],[-9.238378],[-7.487765],[5.638804],[-4.384156],[-9.907091],[9.772226],[5.420532],[-5.129379],[-4.560184],[2.401814],[9.716098],[8.607689],[8.113605],[4.891042],[-3.083169],[5.618038],[0.154766],[3.225056],[-2.688653],[-5.418494],[-7.742374],[9.788186],[3.407971],[-6.794156]], dtype='float32')
module1.set_input('var_336', input_336)
input_357= np.array([-4.386327,-7.089904,-7.182589], dtype='float32')
module1.set_input('var_357', input_357)
input_368= np.array([-7.050614,-8.874343,-1.487958], dtype='float64')
module1.set_input('var_368', input_368)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_319, input_320, input_330, input_335, input_336, input_357, input_368, )
res3 = intrp3.evaluate()(input_319, input_320, input_330, input_335, input_336, input_357, input_368, )
res4 = intrp4.evaluate()(input_319, input_320, input_330, input_335, input_336, input_357, input_368, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
module5.set_input('var_319', input_319)
module5.set_input('var_320', input_320)
module5.set_input('var_330', input_330)
module5.set_input('var_335', input_335)
module5.set_input('var_336', input_336)
module5.set_input('var_357', input_357)
module5.set_input('var_368', input_368)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_319, input_320, input_330, input_335, input_336, input_357, input_368, )
res7 = intrp7.evaluate()(input_319, input_320, input_330, input_335, input_336, input_357, input_368, )
res8 = intrp8.evaluate()(input_319, input_320, input_330, input_335, input_336, input_357, input_368, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
module9.set_input('var_319', input_319)
module9.set_input('var_320', input_320)
module9.set_input('var_330', input_330)
module9.set_input('var_335', input_335)
module9.set_input('var_336', input_336)
module9.set_input('var_357', input_357)
module9.set_input('var_368', input_368)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_319, input_320, input_330, input_335, input_336, input_357, input_368, )
res11 = intrp11.evaluate()(input_319, input_320, input_330, input_335, input_336, input_357, input_368, )
res12 = intrp12.evaluate()(input_319, input_320, input_330, input_335, input_336, input_357, input_368, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
module13.set_input('var_319', input_319)
module13.set_input('var_320', input_320)
module13.set_input('var_330', input_330)
module13.set_input('var_335', input_335)
module13.set_input('var_336', input_336)
module13.set_input('var_357', input_357)
module13.set_input('var_368', input_368)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_319, input_320, input_330, input_335, input_336, input_357, input_368, )
res15 = intrp15.evaluate()(input_319, input_320, input_330, input_335, input_336, input_357, input_368, )
res16 = intrp16.evaluate()(input_319, input_320, input_330, input_335, input_336, input_357, input_368, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
module17.set_input('var_319', input_319)
module17.set_input('var_320', input_320)
module17.set_input('var_330', input_330)
module17.set_input('var_335', input_335)
module17.set_input('var_336', input_336)
module17.set_input('var_357', input_357)
module17.set_input('var_368', input_368)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_319, input_320, input_330, input_335, input_336, input_357, input_368, )
res19 = intrp19.evaluate()(input_319, input_320, input_330, input_335, input_336, input_357, input_368, )
res20 = intrp20.evaluate()(input_319, input_320, input_330, input_335, input_336, input_357, input_368, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
module21.set_input('var_319', input_319)
module21.set_input('var_320', input_320)
module21.set_input('var_330', input_330)
module21.set_input('var_335', input_335)
module21.set_input('var_336', input_336)
module21.set_input('var_357', input_357)
module21.set_input('var_368', input_368)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_319, input_320, input_330, input_335, input_336, input_357, input_368, )
res23 = intrp23.evaluate()(input_319, input_320, input_330, input_335, input_336, input_357, input_368, )
res24 = intrp24.evaluate()(input_319, input_320, input_330, input_335, input_336, input_357, input_368, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()

'''33: TVMFuncCall
32: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
31: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
30: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
29: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
28: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
27: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
26: tvm::relay::GraphPlanMemory(tvm::relay::Function const&)
25: tvm::relay::StorageAllocator::Plan(tvm::relay::Function const&)
24: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
21: tvm::relay::transform::DeviceAwareExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
20: tvm::relay::StorageAllocaBaseVisitor::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
19: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
18: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
17: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
16: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
15: tvm::relay::StorageAllocaBaseVisitor::VisitExpr_(tvm::relay::TupleNode const*)
14: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
13: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
12: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
11: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
10: tvm::relay::StorageAllocaBaseVisitor::VisitExpr_(tvm::relay::TupleGetItemNode const*)
9: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
8: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
7: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
6: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
5: tvm::relay::transform::DeviceAwareExprVisitor::VisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::StorageAllocator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
3: tvm::relay::StorageAllocaBaseVisitor::CreateToken(tvm::RelayExprNode const*, bool)
2: tvm::relay::StorageAllocator::CreateTokenOnDevice(tvm::RelayExprNode const*, tvm::VirtualDevice const&, bool)
1: tvm::relay::StorageAllocator::Request(tvm::relay::StorageToken*)
0: tvm::relay::StorageAllocator::GetMemorySize(tvm::relay::StorageToken*)

'''