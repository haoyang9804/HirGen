import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (2, 11, 2))#candidate|0|(2, 11, 2)|var|float32
uop_1 = relay.log2(var_0.astype('float32')) # shape=(2, 11, 2)
bop_3 = relay.floor_divide(uop_1.astype('float64'), relay.reshape(var_0.astype('float64'), relay.shape_of(uop_1))) # shape=(2, 11, 2)
output = relay.Tuple([bop_3,])
output2 = relay.Tuple([bop_3,])
func_6 = relay.Function([var_0,], output)
mod['func_6'] = func_6
mod = relay.transform.InferType()(mod)
var_7 = relay.var("var_7", dtype = "float32", shape = (2, 11, 2))#candidate|7|(2, 11, 2)|var|float32
output = func_6(var_7)
func_8 = relay.Function([var_7], output)
mutated_mod['func_8'] = func_8
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10 = relay.var("var_10", dtype = "uint16", shape = (8, 3, 16))#candidate|10|(8, 3, 16)|var|uint16
const_11 = relay.const([[[-8,1,-8,-4,-7,10,7,1,-2,-7,-10,3,-3,4,3,9],[1,-3,10,10,2,-9,7,-2,-9,-3,-1,-6,1,-2,5,6],[-3,5,-10,5,4,-2,6,-1,10,5,-10,6,10,-8,1,-3]],[[6,-2,-2,8,-8,8,-4,-10,-10,-8,7,-4,3,-4,-5,-1],[-6,7,7,-3,-8,1,-7,-8,6,-7,-9,-10,2,-9,2,8],[-2,-5,10,5,8,-10,9,-1,-4,-9,-1,7,6,10,5,-7]],[[3,-7,-9,-3,-10,-1,-2,7,-3,1,7,7,4,-3,-5,8],[-2,3,7,8,8,8,2,-8,-4,-8,6,6,3,1,-2,6],[-3,-7,4,8,7,-3,-3,-3,-9,10,6,-7,7,-7,-8,5]],[[1,-2,7,8,-7,-2,-4,-7,-6,10,5,1,7,3,8,-7],[-7,-5,-8,-8,-5,-5,-3,-2,1,1,1,-10,-9,-6,-8,-7],[3,-9,4,-5,-8,-8,7,2,-5,-6,4,-7,-8,9,5,10]],[[9,-10,-9,-3,-7,9,-2,4,3,-6,-5,-1,5,8,7,9],[-1,8,3,-8,2,-6,10,6,9,2,2,-6,7,-8,-4,-10],[-5,5,-10,10,-4,-10,8,8,7,-1,7,-7,-1,-7,-9,10]],[[-7,-2,9,1,-10,-8,9,4,-7,-3,2,9,5,8,4,8],[2,10,-3,7,-4,-10,10,-6,-10,-3,1,6,9,9,-10,7],[-8,3,8,7,-4,2,2,5,9,4,2,-5,2,4,-3,-3]],[[-8,4,-8,-5,-7,-8,-6,-1,-3,-4,-5,-5,3,8,-10,8],[-7,3,3,-10,8,-9,3,1,7,10,-6,-6,6,-4,-4,6],[5,9,-9,8,10,-2,-9,10,10,-7,-7,-5,8,-9,4,-6]],[[-5,6,-7,-1,-4,-10,10,1,2,-4,5,-9,-1,-7,-4,-3],[-1,4,5,-3,-10,4,-4,10,6,-4,5,6,-4,8,-8,-8],[10,-5,7,4,4,9,-6,4,5,3,-1,-4,1,-4,5,-8]]], dtype = "uint16")#candidate|11|(8, 3, 16)|const|uint16
bop_12 = relay.maximum(var_10.astype('uint16'), relay.reshape(const_11.astype('uint16'), relay.shape_of(var_10))) # shape=(8, 3, 16)
uop_15 = relay.rsqrt(bop_12.astype('float64')) # shape=(8, 3, 16)
const_17 = relay.const([[[-7.041217,-1.073338,-9.827397,-8.842644,6.846415,-5.697816,0.012430,9.594159,0.877452,-1.911497,5.177668,2.262528,-8.602565,-7.264749,0.236650,-4.089995],[6.834132,-0.986809,6.050782,-8.583118,4.821835,-0.669036,9.617146,-0.339173,4.600932,6.757563,-9.346189,8.435084,7.659430,-4.681856,1.994808,-9.717288],[-9.711832,-4.164445,-3.177891,-8.448022,3.171262,-8.376671,-8.373291,5.026046,8.364324,-0.027045,-3.913386,-9.263693,-7.232100,-4.948289,-9.500787,-9.037080]],[[2.337097,-3.262903,2.109092,0.032973,5.870005,7.441436,-8.699488,-5.729735,0.307932,3.924666,-3.283401,8.785205,-4.386119,-2.193328,5.234716,5.988591],[-8.663974,-6.104567,-4.804226,-2.832690,5.245522,-0.343723,8.713094,5.726109,0.520177,-3.079657,-8.337518,-5.168055,3.848242,3.071964,1.735902,2.338748],[4.519712,9.776443,6.530580,6.270782,-0.146047,-1.056684,-6.456673,-0.626136,-8.256517,0.892429,7.477552,4.605828,1.576719,2.702103,-8.654902,-3.187413]],[[-3.255853,6.458956,2.863419,-4.114555,-7.687671,4.517451,-6.642306,8.425475,-1.216891,4.666754,-0.354081,-1.136535,-2.731945,8.918896,-8.257812,-4.674057],[8.260083,-8.619966,-5.508935,-4.708772,7.699494,-4.942828,-5.899164,-1.041178,-7.496197,-5.498744,7.230026,-1.309798,-1.959078,-6.951490,5.677122,6.062074],[-0.686743,-8.529984,-8.548917,-2.832357,-5.417368,1.102502,-4.129429,-9.662852,7.014192,4.504526,5.339421,-6.888055,3.640583,2.369780,8.107909,-2.896046]],[[-8.986102,9.348274,5.418989,5.854942,-3.451896,-9.170923,-6.951071,1.907264,7.245667,-2.977815,8.669233,-9.415071,7.756524,7.942633,-0.882650,1.215012],[-9.000901,7.476765,-1.987642,-1.818360,5.450951,3.793872,1.524578,-0.019231,0.324725,1.199566,4.113604,-3.510762,2.388810,-6.062960,5.110517,3.197540],[-4.382354,3.891499,2.354109,2.849259,2.753869,-3.917469,3.158924,0.494712,-0.445031,8.435560,5.907385,-4.501253,-8.834640,-5.483565,-9.366237,5.039126]],[[2.947675,0.719401,-5.792858,4.988658,1.544447,-7.209350,-6.698530,-6.624507,1.778190,2.493728,4.547610,7.768011,-9.459716,0.002478,5.177257,8.171570],[8.668747,0.778381,1.388829,2.372082,3.249342,9.172367,-9.173420,-2.340315,-0.046876,-7.360924,9.469952,9.235806,5.686761,5.158707,7.158735,5.191199],[9.061313,3.841282,-0.951983,-0.037630,-8.549718,3.759051,4.463823,-9.398375,8.686144,6.979163,2.177716,-1.978730,6.359962,4.007682,-2.436375,8.353448]],[[-7.636730,-4.608671,-4.444029,-2.882506,2.226425,5.690914,8.266167,-9.496216,-7.820506,6.357792,-8.873689,-5.617747,1.927676,-7.345840,5.960670,-0.367527],[-8.839752,-5.818081,2.208306,-8.109580,-9.764073,2.695075,9.238483,2.033481,7.769052,7.498055,-4.636943,5.399844,-9.331971,-7.894224,4.695558,8.748184],[2.005473,-4.460425,-8.722998,3.484062,-5.545469,-7.977223,-4.090445,3.815960,-3.535992,7.795549,1.163364,8.863573,6.690909,1.051044,-4.823482,-7.249274]],[[-0.298544,-2.987918,9.372358,2.128426,-9.458302,-7.774975,0.085284,-8.843067,-3.969072,7.358783,-1.766427,7.513687,-4.411859,-5.822081,6.167657,-0.918366],[-0.041736,-5.522748,0.318947,5.536546,5.130869,-1.815891,-0.072887,3.358890,1.472603,-7.928983,6.091983,8.563502,-5.884480,-2.797938,-8.462538,3.901260],[7.294160,8.538221,0.108962,-2.177769,-7.554904,-7.412978,3.781184,9.276540,-7.736904,-5.758955,-2.230745,2.544863,1.212512,-2.805586,-7.850739,-7.370081]],[[-3.079431,-6.275836,5.718366,-3.002037,-2.538915,-2.000923,-1.906625,-9.339988,4.651923,-9.667781,-4.311299,-7.456746,3.907821,4.857096,-9.387434,7.583641],[4.541577,-4.098624,-5.560438,-9.045567,2.985077,-1.138296,8.501642,-7.155400,4.966821,-1.004284,-3.149866,-1.130799,1.721440,-9.276378,6.944210,-2.162571],[8.496660,7.464313,-4.741547,-4.193172,-5.749661,4.638499,0.633168,-3.280500,5.629366,-9.321217,1.910505,4.880931,2.103830,-2.332793,-8.759065,6.496099]]], dtype = "float64")#candidate|17|(8, 3, 16)|const|float64
bop_18 = relay.right_shift(uop_15.astype('int64'), relay.reshape(const_17.astype('int64'), relay.shape_of(uop_15))) # shape=(8, 3, 16)
var_21 = relay.var("var_21", dtype = "float64", shape = (8, 3, 16))#candidate|21|(8, 3, 16)|var|float64
bop_22 = relay.equal(uop_15.astype('bool'), relay.reshape(var_21.astype('bool'), relay.shape_of(uop_15))) # shape=(8, 3, 16)
var_25 = relay.var("var_25", dtype = "int64", shape = (8, 3, 16))#candidate|25|(8, 3, 16)|var|int64
bop_26 = relay.not_equal(bop_18.astype('bool'), relay.reshape(var_25.astype('bool'), relay.shape_of(bop_18))) # shape=(8, 3, 16)
uop_29 = relay.log10(const_17.astype('float64')) # shape=(8, 3, 16)
var_31 = relay.var("var_31", dtype = "int64", shape = (8, 3, 16))#candidate|31|(8, 3, 16)|var|int64
bop_32 = relay.less_equal(bop_18.astype('bool'), relay.reshape(var_31.astype('bool'), relay.shape_of(bop_18))) # shape=(8, 3, 16)
uop_35 = relay.sinh(uop_29.astype('float32')) # shape=(8, 3, 16)
uop_37 = relay.cos(uop_15.astype('float64')) # shape=(8, 3, 16)
bop_39 = relay.logical_xor(bop_26.astype('uint64'), relay.reshape(uop_35.astype('uint64'), relay.shape_of(bop_26))) # shape=(8, 3, 16)
bop_42 = relay.greater(uop_35.astype('bool'), relay.reshape(const_17.astype('bool'), relay.shape_of(uop_35))) # shape=(8, 3, 16)
func_6_call = mod.get_global_var('func_6')
func_8_call = mutated_mod.get_global_var('func_8')
const_46 = relay.const([-3.012907,-9.179786,5.375255,-3.948723,-3.108356,2.755375,2.380570,-7.529951,7.482016,1.654729,-9.244686,-8.631955,-9.210546,8.527307,-6.701141,8.741826,-7.050905,2.752235,3.732840,1.407253,-3.972809,-4.223048,1.886431,-2.018419,2.009416,6.095832,7.462571,-9.989157,9.406839,0.953022,-0.930159,9.573559,-7.706963,-7.215046,-7.302016,-7.937865,5.679366,-8.228106,2.123044,9.677393,4.276337,6.072489,6.179902,-4.672815], dtype = "float32")#candidate|46|(44,)|const|float32
call_45 = relay.TupleGetItem(func_6_call(relay.reshape(const_46.astype('float32'), [2, 11, 2])), 0)
call_47 = relay.TupleGetItem(func_8_call(relay.reshape(const_46.astype('float32'), [2, 11, 2])), 0)
bop_48 = relay.subtract(uop_37.astype('float32'), relay.reshape(uop_29.astype('float32'), relay.shape_of(uop_37))) # shape=(8, 3, 16)
bop_51 = relay.bitwise_and(var_21.astype('int16'), relay.reshape(uop_35.astype('int16'), relay.shape_of(var_21))) # shape=(8, 3, 16)
bop_54 = relay.floor_mod(uop_29.astype('float32'), relay.reshape(var_25.astype('float32'), relay.shape_of(uop_29))) # shape=(8, 3, 16)
uop_57 = relay.cosh(bop_22.astype('float64')) # shape=(8, 3, 16)
uop_59 = relay.erf(uop_29.astype('float64')) # shape=(8, 3, 16)
bop_61 = relay.divide(uop_35.astype('float64'), relay.reshape(bop_48.astype('float64'), relay.shape_of(uop_35))) # shape=(8, 3, 16)
uop_64 = relay.log(bop_26.astype('float64')) # shape=(8, 3, 16)
uop_66 = relay.rsqrt(call_45.astype('float32')) # shape=(2, 11, 2)
uop_68 = relay.rsqrt(call_47.astype('float32')) # shape=(2, 11, 2)
uop_69 = relay.atanh(uop_59.astype('float64')) # shape=(8, 3, 16)
uop_71 = relay.exp(uop_29.astype('float32')) # shape=(8, 3, 16)
uop_73 = relay.atan(bop_54.astype('float64')) # shape=(8, 3, 16)
output = relay.Tuple([bop_32,bop_39,bop_42,const_46,bop_51,uop_57,bop_61,uop_64,uop_66,uop_69,uop_71,uop_73,])
output2 = relay.Tuple([bop_32,bop_39,bop_42,const_46,bop_51,uop_57,bop_61,uop_64,uop_68,uop_69,uop_71,uop_73,])
func_75 = relay.Function([var_10,var_21,var_25,var_31,], output)
mod['func_75'] = func_75
mod = relay.transform.InferType()(mod)
mutated_mod['func_75'] = func_75
mutated_mod = relay.transform.InferType()(mutated_mod)
func_75_call = mutated_mod.get_global_var('func_75')
var_77 = relay.var("var_77", dtype = "uint16", shape = (8, 3, 16))#candidate|77|(8, 3, 16)|var|uint16
var_78 = relay.var("var_78", dtype = "float64", shape = (8, 3, 16))#candidate|78|(8, 3, 16)|var|float64
var_79 = relay.var("var_79", dtype = "int64", shape = (8, 3, 16))#candidate|79|(8, 3, 16)|var|int64
var_80 = relay.var("var_80", dtype = "int64", shape = (8, 3, 16))#candidate|80|(8, 3, 16)|var|int64
call_76 = func_75_call(var_77,var_78,var_79,var_80,)
output = call_76
func_81 = relay.Function([var_77,var_78,var_79,var_80,], output)
mutated_mod['func_81'] = func_81
mutated_mod = relay.transform.InferType()(mutated_mod)
var_83 = relay.var("var_83", dtype = "int64", shape = (8,))#candidate|83|(8,)|var|int64
var_84 = relay.var("var_84", dtype = "int64", shape = (8,))#candidate|84|(8,)|var|int64
bop_85 = relay.bitwise_xor(var_83.astype('int64'), relay.reshape(var_84.astype('int64'), relay.shape_of(var_83))) # shape=(8,)
bop_88 = relay.less_equal(var_83.astype('bool'), relay.reshape(bop_85.astype('bool'), relay.shape_of(var_83))) # shape=(8,)
var_91 = relay.var("var_91", dtype = "bool", shape = (8,))#candidate|91|(8,)|var|bool
bop_92 = relay.floor_divide(bop_88.astype('float32'), relay.reshape(var_91.astype('float32'), relay.shape_of(bop_88))) # shape=(8,)
bop_95 = relay.less_equal(bop_85.astype('bool'), relay.reshape(var_83.astype('bool'), relay.shape_of(bop_85))) # shape=(8,)
bop_98 = relay.mod(bop_92.astype('float64'), relay.reshape(bop_95.astype('float64'), relay.shape_of(bop_92))) # shape=(8,)
uop_101 = relay.acosh(var_91.astype('float32')) # shape=(8,)
uop_103 = relay.cos(uop_101.astype('float64')) # shape=(8,)
uop_105 = relay.atan(uop_101.astype('float64')) # shape=(8,)
bop_107 = relay.less(uop_105.astype('bool'), relay.reshape(var_84.astype('bool'), relay.shape_of(uop_105))) # shape=(8,)
uop_110 = relay.rsqrt(bop_107.astype('float64')) # shape=(8,)
var_112 = relay.var("var_112", dtype = "float32", shape = (8,))#candidate|112|(8,)|var|float32
bop_113 = relay.mod(uop_101.astype('float32'), relay.reshape(var_112.astype('float32'), relay.shape_of(uop_101))) # shape=(8,)
uop_116 = relay.acosh(uop_110.astype('float64')) # shape=(8,)
bop_118 = relay.greater(uop_116.astype('bool'), relay.reshape(bop_92.astype('bool'), relay.shape_of(uop_116))) # shape=(8,)
var_121 = relay.var("var_121", dtype = "float64", shape = (8,))#candidate|121|(8,)|var|float64
bop_122 = relay.greater(uop_110.astype('bool'), relay.reshape(var_121.astype('bool'), relay.shape_of(uop_110))) # shape=(8,)
uop_125 = relay.log10(bop_122.astype('float32')) # shape=(8,)
uop_127 = relay.tan(bop_118.astype('float64')) # shape=(8,)
func_75_call = mod.get_global_var('func_75')
func_81_call = mutated_mod.get_global_var('func_81')
const_130 = relay.const([-6,7,10,-4,-3,1,10,-7,-9,-3,8,-5,8,-1,8,-8,7,-6,5,7,-4,-1,6,7,-8,6,-10,5,6,-6,-5,1,-10,-9,4,-2,-4,-3,2,8,2,3,7,-10,3,-9,10,10,-6,-6,7,-9,2,5,-3,1,-9,7,-2,2,3,-4,3,5,-7,8,-9,-6,10,-3,4,-8,8,-2,-2,-6,6,-10,-5,8,5,5,4,5,5,-5,-3,4,10,-4,10,9,-1,5,-5,-10,-1,-6,-8,-7,10,4,6,-9,-5,9,4,-1,7,4,1,4,-9,-4,-1,2,4,-9,5,7,10,5,-5,2,4,-6,10,-6,-8,7,-3,5,4,-10,-9,-9,4,-4,8,-3,-1,-7,6,-1,-4,-8,-5,4,6,-8,-10,5,-9,-5,6,-1,-4,10,-10,8,9,-10,-8,4,6,-8,-9,2,-3,-4,4,10,4,2,2,9,-6,6,3,6,1,8,9,7,1,-5,-9,-5,-6,8,-6,9,-5,-6,6,10,7,9,-9,2,-10,-5,3,-3,-10,6,7,8,10,-2,5,6,-9,-10,1,-10,-10,-1,6,1,-6,-2,4,-9,-5,3,-3,3,-3,-10,-8,7,-5,10,-4,-9,-10,5,2,-8,-5,8,9,-7,8,-7,8,-4,-4,-6,9,-9,6,-3,-8,-7,4,-10,-9,-5,4,1,8,7,-2,-8,-8,-10,-3,-7,5,-5,-9,2,-1,5,3,-1,3,-10,-1,-6,9,7,10,-4,-6,-4,3,-5,6,-4,-5,-7,1,3,-10,-2,6,1,-3,-3,-6,-6,-6,5,-8,-1,2,-9,-7,-6,3,6,-9,-7,3,-1,-8,8,-5,-6,-2,6,-6,8,9,-2,5,-4,-6,9,3,-10,9,7,-3,-9,-1,-10,9,-10,-3,3,-2,-6,-9,10,5,7,10,-9,8,-5,-10,5,4,-10,-8,6,-1,10,7,6,-2,7,-6,2,-2,-2,-3,-4,4,5,-8,-4,3,-8,6,2,6,1,-4,7], dtype = "uint16")#candidate|130|(384,)|const|uint16
call_129 = relay.TupleGetItem(func_75_call(relay.reshape(const_130.astype('uint16'), [8, 3, 16]), relay.reshape(const_130.astype('float64'), [8, 3, 16]), relay.reshape(const_130.astype('int64'), [8, 3, 16]), relay.reshape(const_130.astype('int64'), [8, 3, 16]), ), 3)
call_131 = relay.TupleGetItem(func_81_call(relay.reshape(const_130.astype('uint16'), [8, 3, 16]), relay.reshape(const_130.astype('float64'), [8, 3, 16]), relay.reshape(const_130.astype('int64'), [8, 3, 16]), relay.reshape(const_130.astype('int64'), [8, 3, 16]), ), 3)
uop_132 = relay.acosh(uop_105.astype('float32')) # shape=(8,)
bop_134 = relay.bitwise_xor(uop_127.astype('int32'), relay.reshape(bop_113.astype('int32'), relay.shape_of(uop_127))) # shape=(8,)
const_137 = relay.const([-3.711762,9.642947,-8.545942,-6.549067,1.123151,-8.767842,-4.757368,6.290651], dtype = "float64")#candidate|137|(8,)|const|float64
bop_138 = relay.subtract(uop_127.astype('int64'), relay.reshape(const_137.astype('int64'), relay.shape_of(uop_127))) # shape=(8,)
uop_141 = relay.sigmoid(uop_125.astype('float64')) # shape=(8,)
bop_143 = relay.logical_and(uop_125.astype('bool'), relay.reshape(bop_98.astype('bool'), relay.shape_of(uop_125))) # shape=(8,)
bop_146 = relay.bitwise_or(uop_141.astype('uint32'), relay.reshape(bop_143.astype('uint32'), relay.shape_of(uop_141))) # shape=(8,)
bop_149 = relay.equal(uop_141.astype('bool'), relay.reshape(bop_118.astype('bool'), relay.shape_of(uop_141))) # shape=(8,)
uop_152 = relay.sqrt(uop_125.astype('float64')) # shape=(8,)
uop_154 = relay.asin(bop_107.astype('float64')) # shape=(8,)
var_156 = relay.var("var_156", dtype = "int64", shape = (8,))#candidate|156|(8,)|var|int64
bop_157 = relay.bitwise_xor(bop_138.astype('int16'), relay.reshape(var_156.astype('int16'), relay.shape_of(bop_138))) # shape=(8,)
uop_160 = relay.exp(bop_107.astype('float64')) # shape=(8,)
var_162 = relay.var("var_162", dtype = "float64", shape = (8,))#candidate|162|(8,)|var|float64
bop_163 = relay.greater_equal(uop_141.astype('bool'), relay.reshape(var_162.astype('bool'), relay.shape_of(uop_141))) # shape=(8,)
const_166 = relay.const([-2.150490,-9.147821,9.969228,3.444485,-2.092706,7.822522,7.860895,-4.040375], dtype = "float64")#candidate|166|(8,)|const|float64
bop_167 = relay.greater(uop_127.astype('bool'), relay.reshape(const_166.astype('bool'), relay.shape_of(uop_127))) # shape=(8,)
bop_170 = relay.left_shift(uop_101.astype('int16'), relay.reshape(const_137.astype('int16'), relay.shape_of(uop_101))) # shape=(8,)
bop_173 = relay.floor_mod(bop_146.astype('float64'), relay.reshape(uop_116.astype('float64'), relay.shape_of(bop_146))) # shape=(8,)
uop_176 = relay.exp(bop_143.astype('float64')) # shape=(8,)
uop_178 = relay.erf(bop_146.astype('float32')) # shape=(8,)
bop_180 = relay.greater_equal(uop_176.astype('bool'), relay.reshape(uop_127.astype('bool'), relay.shape_of(uop_176))) # shape=(8,)
bop_183 = relay.logical_xor(uop_116.astype('uint64'), relay.reshape(uop_105.astype('uint64'), relay.shape_of(uop_116))) # shape=(8,)
bop_186 = relay.floor_mod(uop_178.astype('float64'), relay.reshape(bop_163.astype('float64'), relay.shape_of(uop_178))) # shape=(8,)
output = relay.Tuple([uop_103,call_129,const_130,uop_132,bop_134,bop_149,uop_152,uop_154,bop_157,uop_160,bop_167,bop_170,bop_173,bop_180,bop_183,bop_186,])
output2 = relay.Tuple([uop_103,call_131,const_130,uop_132,bop_134,bop_149,uop_152,uop_154,bop_157,uop_160,bop_167,bop_170,bop_173,bop_180,bop_183,bop_186,])
func_189 = relay.Function([var_83,var_84,var_91,var_112,var_121,var_156,var_162,], output)
mod['func_189'] = func_189
mod = relay.transform.InferType()(mod)
var_190 = relay.var("var_190", dtype = "int64", shape = (8,))#candidate|190|(8,)|var|int64
var_191 = relay.var("var_191", dtype = "int64", shape = (8,))#candidate|191|(8,)|var|int64
var_192 = relay.var("var_192", dtype = "bool", shape = (8,))#candidate|192|(8,)|var|bool
var_193 = relay.var("var_193", dtype = "float32", shape = (8,))#candidate|193|(8,)|var|float32
var_194 = relay.var("var_194", dtype = "float64", shape = (8,))#candidate|194|(8,)|var|float64
var_195 = relay.var("var_195", dtype = "int64", shape = (8,))#candidate|195|(8,)|var|int64
var_196 = relay.var("var_196", dtype = "float64", shape = (8,))#candidate|196|(8,)|var|float64
output = func_189(var_190,var_191,var_192,var_193,var_194,var_195,var_196,)
func_197 = relay.Function([var_190,var_191,var_192,var_193,var_194,var_195,var_196,], output)
mutated_mod['func_197'] = func_197
mutated_mod = relay.transform.InferType()(mutated_mod)
const_199 = relay.const(-6, dtype = "uint64")#candidate|199|()|const|uint64
var_200 = relay.var("var_200", dtype = "uint64", shape = (2, 7, 14))#candidate|200|(2, 7, 14)|var|uint64
bop_201 = relay.maximum(const_199.astype('uint64'), var_200.astype('uint64')) # shape=(2, 7, 14)
output = relay.Tuple([bop_201,])
output2 = relay.Tuple([bop_201,])
func_204 = relay.Function([var_200,], output)
mod['func_204'] = func_204
mod = relay.transform.InferType()(mod)
mutated_mod['func_204'] = func_204
mutated_mod = relay.transform.InferType()(mutated_mod)
var_205 = relay.var("var_205", dtype = "uint64", shape = (2, 7, 14))#candidate|205|(2, 7, 14)|var|uint64
func_204_call = mutated_mod.get_global_var('func_204')
call_206 = func_204_call(var_205)
output = call_206
func_207 = relay.Function([var_205], output)
mutated_mod['func_207'] = func_207
mutated_mod = relay.transform.InferType()(mutated_mod)
const_209 = relay.const([-4.963830], dtype = "float64")#candidate|209|(1,)|const|float64
var_210 = relay.var("var_210", dtype = "float64", shape = (7,))#candidate|210|(7,)|var|float64
bop_211 = relay.divide(const_209.astype('float64'), var_210.astype('float64')) # shape=(7,)
bop_214 = relay.floor_divide(const_209.astype('float32'), bop_211.astype('float32')) # shape=(7,)
bop_217 = relay.logical_xor(bop_211.astype('int16'), relay.reshape(bop_214.astype('int16'), relay.shape_of(bop_211))) # shape=(7,)
bop_220 = relay.logical_and(bop_217.astype('bool'), relay.reshape(bop_211.astype('bool'), relay.shape_of(bop_217))) # shape=(7,)
output = relay.Tuple([bop_220,])
output2 = relay.Tuple([bop_220,])
func_223 = relay.Function([var_210,], output)
mod['func_223'] = func_223
mod = relay.transform.InferType()(mod)
mutated_mod['func_223'] = func_223
mutated_mod = relay.transform.InferType()(mutated_mod)
var_224 = relay.var("var_224", dtype = "float64", shape = (7,))#candidate|224|(7,)|var|float64
func_223_call = mutated_mod.get_global_var('func_223')
call_225 = func_223_call(var_224)
output = call_225
func_226 = relay.Function([var_224], output)
mutated_mod['func_226'] = func_226
mutated_mod = relay.transform.InferType()(mutated_mod)
const_228 = relay.const([[4,-10,-2,5,-6,9,-5,-1,-4,4,-7],[-1,8,4,2,5,-3,-5,8,1,3,5],[10,10,10,1,-4,10,-10,-3,10,-10,-5],[-10,-5,4,-10,5,-4,6,-2,1,9,7],[-8,2,10,-2,7,5,-10,1,7,-4,4],[5,8,9,7,-5,-6,-4,-8,-1,-6,-8],[-5,-10,8,5,3,5,8,-9,10,2,10],[2,10,-3,-10,-7,-4,1,-1,2,-6,7],[3,-1,-7,-8,-6,-5,6,7,2,4,8],[-8,10,5,8,-2,-6,-3,5,-2,-6,1],[4,9,-9,2,6,8,-9,-6,5,-8,-2],[-5,-4,9,-1,-1,6,3,-3,-5,-4,-7]], dtype = "int8")#candidate|228|(12, 11)|const|int8
var_229 = relay.var("var_229", dtype = "int8", shape = (12, 11))#candidate|229|(12, 11)|var|int8
bop_230 = relay.minimum(const_228.astype('int8'), relay.reshape(var_229.astype('int8'), relay.shape_of(const_228))) # shape=(12, 11)
uop_233 = relay.sigmoid(const_228.astype('float32')) # shape=(12, 11)
var_235 = relay.var("var_235", dtype = "int8", shape = (12, 11))#candidate|235|(12, 11)|var|int8
bop_236 = relay.maximum(var_229.astype('int32'), relay.reshape(var_235.astype('int32'), relay.shape_of(var_229))) # shape=(12, 11)
uop_239 = relay.log(uop_233.astype('float64')) # shape=(12, 11)
bop_241 = relay.multiply(uop_239.astype('int8'), relay.reshape(uop_233.astype('int8'), relay.shape_of(uop_239))) # shape=(12, 11)
uop_244 = relay.sqrt(bop_241.astype('float64')) # shape=(12, 11)
func_189_call = mod.get_global_var('func_189')
func_197_call = mutated_mod.get_global_var('func_197')
var_247 = relay.var("var_247", dtype = "int64", shape = (8,))#candidate|247|(8,)|var|int64
call_246 = relay.TupleGetItem(func_189_call(relay.reshape(var_247.astype('int64'), [8,]), relay.reshape(var_247.astype('int64'), [8,]), relay.reshape(var_247.astype('bool'), [8,]), relay.reshape(var_247.astype('float32'), [8,]), relay.reshape(var_247.astype('float64'), [8,]), relay.reshape(var_247.astype('int64'), [8,]), relay.reshape(var_247.astype('float64'), [8,]), ), 3)
call_248 = relay.TupleGetItem(func_197_call(relay.reshape(var_247.astype('int64'), [8,]), relay.reshape(var_247.astype('int64'), [8,]), relay.reshape(var_247.astype('bool'), [8,]), relay.reshape(var_247.astype('float32'), [8,]), relay.reshape(var_247.astype('float64'), [8,]), relay.reshape(var_247.astype('int64'), [8,]), relay.reshape(var_247.astype('float64'), [8,]), ), 3)
bop_249 = relay.logical_xor(uop_233.astype('int32'), relay.reshape(bop_236.astype('int32'), relay.shape_of(uop_233))) # shape=(12, 11)
var_252 = relay.var("var_252", dtype = "float32", shape = (12, 11))#candidate|252|(12, 11)|var|float32
bop_253 = relay.minimum(uop_233.astype('uint16'), relay.reshape(var_252.astype('uint16'), relay.shape_of(uop_233))) # shape=(12, 11)
bop_256 = relay.left_shift(uop_239.astype('uint64'), relay.reshape(bop_241.astype('uint64'), relay.shape_of(uop_239))) # shape=(12, 11)
output = relay.Tuple([bop_230,uop_244,call_246,var_247,bop_249,bop_253,bop_256,])
output2 = relay.Tuple([bop_230,uop_244,call_248,var_247,bop_249,bop_253,bop_256,])
func_259 = relay.Function([var_229,var_235,var_247,var_252,], output)
mod['func_259'] = func_259
mod = relay.transform.InferType()(mod)
mutated_mod['func_259'] = func_259
mutated_mod = relay.transform.InferType()(mutated_mod)
func_259_call = mutated_mod.get_global_var('func_259')
var_261 = relay.var("var_261", dtype = "int8", shape = (12, 11))#candidate|261|(12, 11)|var|int8
var_262 = relay.var("var_262", dtype = "int8", shape = (12, 11))#candidate|262|(12, 11)|var|int8
var_263 = relay.var("var_263", dtype = "int64", shape = (8,))#candidate|263|(8,)|var|int64
var_264 = relay.var("var_264", dtype = "float32", shape = (12, 11))#candidate|264|(12, 11)|var|float32
call_260 = func_259_call(var_261,var_262,var_263,var_264,)
output = call_260
func_265 = relay.Function([var_261,var_262,var_263,var_264,], output)
mutated_mod['func_265'] = func_265
mutated_mod = relay.transform.InferType()(mutated_mod)
var_267 = relay.var("var_267", dtype = "float32", shape = (12,))#candidate|267|(12,)|var|float32
uop_268 = relay.rsqrt(var_267.astype('float32')) # shape=(12,)
output = relay.Tuple([uop_268,])
output2 = relay.Tuple([uop_268,])
func_270 = relay.Function([var_267,], output)
mod['func_270'] = func_270
mod = relay.transform.InferType()(mod)
var_271 = relay.var("var_271", dtype = "float32", shape = (12,))#candidate|271|(12,)|var|float32
output = func_270(var_271)
func_272 = relay.Function([var_271], output)
mutated_mod['func_272'] = func_272
mutated_mod = relay.transform.InferType()(mutated_mod)
var_274 = relay.var("var_274", dtype = "uint64", shape = (13, 11))#candidate|274|(13, 11)|var|uint64
var_275 = relay.var("var_275", dtype = "uint64", shape = (13, 11))#candidate|275|(13, 11)|var|uint64
bop_276 = relay.logical_xor(var_274.astype('uint64'), relay.reshape(var_275.astype('uint64'), relay.shape_of(var_274))) # shape=(13, 11)
uop_279 = relay.sigmoid(bop_276.astype('float32')) # shape=(13, 11)
bop_281 = relay.greater_equal(uop_279.astype('bool'), relay.reshape(var_274.astype('bool'), relay.shape_of(uop_279))) # shape=(13, 11)
uop_284 = relay.exp(bop_281.astype('float64')) # shape=(13, 11)
uop_286 = relay.erf(uop_284.astype('float64')) # shape=(13, 11)
var_288 = relay.var("var_288", dtype = "float64", shape = (13, 11))#candidate|288|(13, 11)|var|float64
bop_289 = relay.multiply(uop_286.astype('uint64'), relay.reshape(var_288.astype('uint64'), relay.shape_of(uop_286))) # shape=(13, 11)
bop_292 = relay.logical_and(bop_276.astype('bool'), relay.reshape(bop_289.astype('bool'), relay.shape_of(bop_276))) # shape=(13, 11)
uop_295 = relay.asin(bop_292.astype('float64')) # shape=(13, 11)
uop_297 = relay.acos(uop_284.astype('float64')) # shape=(13, 11)
bop_299 = relay.maximum(uop_295.astype('uint16'), relay.reshape(bop_281.astype('uint16'), relay.shape_of(uop_295))) # shape=(13, 11)
uop_302 = relay.sinh(uop_286.astype('float64')) # shape=(13, 11)
uop_304 = relay.acosh(uop_284.astype('float32')) # shape=(13, 11)
output = relay.Tuple([uop_297,bop_299,uop_302,uop_304,])
output2 = relay.Tuple([uop_297,bop_299,uop_302,uop_304,])
func_306 = relay.Function([var_274,var_275,var_288,], output)
mod['func_306'] = func_306
mod = relay.transform.InferType()(mod)
mutated_mod['func_306'] = func_306
mutated_mod = relay.transform.InferType()(mutated_mod)
func_306_call = mutated_mod.get_global_var('func_306')
var_308 = relay.var("var_308", dtype = "uint64", shape = (13, 11))#candidate|308|(13, 11)|var|uint64
var_309 = relay.var("var_309", dtype = "uint64", shape = (13, 11))#candidate|309|(13, 11)|var|uint64
var_310 = relay.var("var_310", dtype = "float64", shape = (13, 11))#candidate|310|(13, 11)|var|float64
call_307 = func_306_call(var_308,var_309,var_310,)
output = call_307
func_311 = relay.Function([var_308,var_309,var_310,], output)
mutated_mod['func_311'] = func_311
mutated_mod = relay.transform.InferType()(mutated_mod)
var_313 = relay.var("var_313", dtype = "float64", shape = ())#candidate|313|()|var|float64
uop_314 = relay.atan(var_313.astype('float64')) # shape=()
uop_316 = relay.acosh(uop_314.astype('float32')) # shape=()
uop_318 = relay.sigmoid(uop_314.astype('float32')) # shape=()
uop_320 = relay.log(uop_314.astype('float32')) # shape=()
uop_322 = relay.sqrt(uop_318.astype('float64')) # shape=()
uop_324 = relay.cosh(uop_322.astype('float64')) # shape=()
bop_326 = relay.less(uop_324.astype('bool'), uop_316.astype('bool')) # shape=()
bop_329 = relay.logical_or(uop_314.astype('bool'), uop_324.astype('bool')) # shape=()
bop_332 = relay.minimum(bop_329.astype('int64'), bop_326.astype('int64')) # shape=()
uop_335 = relay.sigmoid(bop_329.astype('float64')) # shape=()
var_337 = relay.var("var_337", dtype = "float64", shape = (9, 2))#candidate|337|(9, 2)|var|float64
bop_338 = relay.add(uop_335.astype('uint16'), var_337.astype('uint16')) # shape=(9, 2)
const_341 = relay.const(-5.301801, dtype = "float64")#candidate|341|()|const|float64
bop_342 = relay.floor_mod(uop_322.astype('float32'), const_341.astype('float32')) # shape=()
bop_345 = relay.greater(uop_335.astype('bool'), var_313.astype('bool')) # shape=()
output = relay.Tuple([uop_320,bop_332,bop_338,bop_342,bop_345,])
output2 = relay.Tuple([uop_320,bop_332,bop_338,bop_342,bop_345,])
F = relay.Function([var_313,var_337,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_313,var_337,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_313= np.array(2.041935, dtype='float64')
module1.set_input('var_313', input_313)
input_337= np.array([[-5.080914,-1.186328],[8.477986,-7.541584],[-1.400699,3.950321],[-2.198570,-3.046740],[3.396142,-0.822144],[0.598789,-2.568247],[1.811796,3.011219],[-2.827554,5.822443],[-2.015184,-7.782376]], dtype='float64')
module1.set_input('var_337', input_337)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_313, input_337, )
res3 = intrp3.evaluate()(input_313, input_337, )
res4 = intrp4.evaluate()(input_313, input_337, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
module5.set_input('var_313', input_313)
module5.set_input('var_337', input_337)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_313, input_337, )
res7 = intrp7.evaluate()(input_313, input_337, )
res8 = intrp8.evaluate()(input_313, input_337, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
module9.set_input('var_313', input_313)
module9.set_input('var_337', input_337)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_313, input_337, )
res11 = intrp11.evaluate()(input_313, input_337, )
res12 = intrp12.evaluate()(input_313, input_337, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
module13.set_input('var_313', input_313)
module13.set_input('var_337', input_337)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_313, input_337, )
res15 = intrp15.evaluate()(input_313, input_337, )
res16 = intrp16.evaluate()(input_313, input_337, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
module17.set_input('var_313', input_313)
module17.set_input('var_337', input_337)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_313, input_337, )
res19 = intrp19.evaluate()(input_313, input_337, )
res20 = intrp20.evaluate()(input_313, input_337, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
module21.set_input('var_313', input_313)
module21.set_input('var_337', input_337)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_313, input_337, )
res23 = intrp23.evaluate()(input_313, input_337, )
res24 = intrp24.evaluate()(input_313, input_337, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()

'''68: TVMFuncCall
67: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
66: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
65: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
64: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
63: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
62: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
61: tvm::transform::Pass::operator()(tvm::IRModule) const
60: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
59: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
58: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
57: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
56: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
55: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
54: tvm::transform::Pass::operator()(tvm::IRModule) const
53: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
52: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
51: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
50: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
49: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
48: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
47: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
46: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
45: _ZN3tvm5relay9transform22Devic
44: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
43: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
42: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
41: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
40: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
39: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
38: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
37: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
36: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
35: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
34: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
33: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
32: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
31: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::te::Tensor, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
30: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::runtime::ObjectRef, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
29: tvm::LowerWithPassList(tvm::IRModule, tvm::runtime::Array<tvm::transform::Pass, void>)
28: tvm::transform::Pass::operator()(tvm::IRModule) const
27: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
26: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
25: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
24: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
23: _ZNSt17_Function_handlerIFvN3tvm7
22: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
21: tvm::tir::DataTypeRewriter::operator()(tvm::tir::Stmt)
20: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
19: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::StoreNode const*)
18: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
17: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
16: _ZThn16_N3tvm3tir16DataTyp
15: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::SubNode const*)
14: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
13: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
12: _ZThn16_N3tvm3tir16DataTyp
11: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::MulNode const*)
10: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
9: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
8: _ZThn16_N3tvm3tir16DataTyp
7: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
6: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CallNode const*)
5: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
4: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
3: _ZThn16_N3tvm3tir16DataTyp
2: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::DivNode const*)
1: tvm::div(tvm::PrimExpr, tvm::PrimExpr, tvm::Span)
0: tvm::PrimExpr tvm::arith::TryConstFold<tvm::tir::Div>(tvm::PrimExpr, tvm::PrimExpr)

'''