import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (10, 5, 10))#candidate|0|(10, 5, 10)|var|float32
const_1 = relay.const([[[0.832843,8.193505,-7.489691,3.740737,4.812104,9.434728,-6.937404,-1.023243,-7.811476,-3.043972],[-6.411718,4.188022,-8.309139,-6.850855,-9.262301,5.511017,-3.774812,-2.146205,2.454763,9.709685],[-2.386160,-9.605558,-0.698858,9.627521,-5.840775,3.150160,-4.668733,5.011246,-5.488467,-7.011216],[5.070732,-4.789693,-3.263477,-1.410153,-9.433407,-8.711277,-0.542688,6.319848,5.352724,-8.317879],[1.312932,3.582903,-5.495520,-9.410231,-9.944210,-9.497854,-9.957609,-2.690707,1.182414,-3.100142]],[[-5.379666,-5.647147,9.814256,1.100023,-4.261800,-9.195163,-8.631668,1.336326,-9.117446,7.747140],[-3.144745,-3.207831,-5.891854,1.577181,-9.049373,3.115299,3.620646,6.684902,4.542941,1.229077],[-1.879197,8.303522,3.926833,-6.716746,-4.281825,1.808943,8.494597,8.704991,-4.477640,9.205377],[1.448770,4.914806,-3.220481,1.222093,5.298872,6.747260,4.499148,-1.551750,0.641833,-5.164512],[-9.743928,7.898770,-7.292925,7.053244,8.781790,1.420020,9.361102,5.029828,9.084809,-8.012380]],[[-2.192094,8.839192,-9.118512,-9.761502,-4.048255,-6.311588,-9.182266,-7.457565,-7.131631,9.330741],[-3.258552,-9.895511,9.761961,3.414344,6.061089,-5.540434,0.265230,9.477011,7.128031,6.514397],[-7.942355,1.538491,5.539841,8.871322,9.872000,-6.156239,5.355290,-2.347138,-0.113017,-0.019750],[8.716946,7.673537,-3.427595,-2.471168,5.181808,8.845332,0.079617,-0.815251,-5.405410,2.808641],[3.049150,3.702446,-7.551822,9.634006,1.764721,-1.055538,-6.374876,8.354671,-3.708041,3.928305]],[[6.989830,-5.349746,9.582170,-5.296607,-0.899813,0.059368,3.460026,0.603341,-5.883541,-5.271520],[-8.152163,-0.760524,8.262407,0.348037,-7.876811,9.872712,9.633475,-7.124194,-7.894215,-6.609072],[-2.609462,-1.330153,-2.098751,-5.632971,3.315394,-5.832391,7.124754,-8.034467,-5.989968,2.984676],[-2.781226,-3.580886,-9.244254,-8.746829,5.834783,3.367143,7.437490,6.915467,2.499872,-1.485111],[9.530966,-4.619679,-8.709764,2.093678,-3.846436,6.076977,0.175048,-7.342995,-3.627543,-7.533976]],[[1.804778,-6.935872,-1.589803,-2.037134,0.877731,-5.604165,4.855133,5.295548,6.982995,-5.204570],[7.289318,2.637493,-9.235528,-5.632728,-2.456252,-0.196528,3.208172,-5.806249,5.354934,7.209085],[-2.831154,1.569435,1.418240,3.447706,7.384731,-3.402950,6.023621,0.618921,-3.237097,-5.544268],[-9.453869,-3.483733,8.644292,8.016474,-3.803834,4.422684,-3.090778,-3.364401,-6.806473,1.044576],[-8.659166,-3.506545,6.526582,8.700189,-6.084949,-7.331300,-5.279038,-7.439629,-2.453157,-7.103205]],[[-1.145280,6.159694,-5.052828,-9.536776,2.346410,-5.090232,-8.034801,9.843216,-4.537657,2.276899],[-1.667986,-0.521217,-3.183649,5.482750,-4.593729,2.453809,9.933990,-5.264737,5.078023,-0.666603],[-8.898923,-7.176815,-0.733894,-4.123882,-3.665128,7.902257,9.592661,8.369347,-7.695641,-1.205604],[5.326330,7.203486,-0.813231,-6.377137,8.743559,-8.509208,-3.892368,-1.689929,-6.963274,4.991512],[-4.349749,-6.332573,-0.158930,2.015664,-9.416850,-5.238676,-9.669062,-3.096349,3.867746,-1.258961]],[[-5.766014,-1.727828,7.559526,7.582187,6.703886,-8.073601,9.325478,5.297935,-4.963923,-3.405551],[9.919073,-4.862180,-5.138705,-2.714437,-4.275073,-6.251592,-8.257848,4.795342,9.238530,7.489292],[8.553158,-0.822925,-7.165052,1.962948,5.163315,7.015305,-9.111317,-6.415681,6.701960,-0.230318],[0.024895,-6.493873,1.296652,1.045437,-8.053120,7.386550,-9.619761,-0.300122,0.025771,6.262520],[4.106909,0.802206,6.586923,-9.965858,7.779014,-6.479730,-2.070512,-7.838249,-0.681874,-1.336070]],[[-0.155122,-3.389364,-7.432799,-6.162339,-3.551806,-5.986634,-5.874111,8.131358,6.429719,-2.397306],[-5.898398,9.665388,4.803437,-6.318194,9.084671,-8.920639,-3.384531,-0.466205,8.547906,0.665066],[-0.578722,0.192484,7.908061,-3.578827,7.347087,8.038939,4.093209,-6.421504,-1.322919,-8.682034],[9.933447,-7.641153,-5.182693,-8.053264,3.460299,6.611141,1.002545,-4.237903,-7.061306,0.055866],[-7.478959,7.791334,7.373336,-2.476373,6.398916,8.209657,-9.291349,-1.441887,-9.182156,-3.478027]],[[-5.101393,-2.860710,4.845023,2.753470,5.941688,1.301819,0.399834,-2.651854,-5.090597,9.665973],[1.472457,-4.866752,-0.152010,-2.923161,-5.804760,-8.000938,7.173503,-8.925907,6.761939,-5.771841],[2.065517,-8.431077,-5.579136,5.151840,-6.731134,-3.256885,-2.829021,8.457987,-9.103823,1.512617],[-9.270505,3.581149,-1.313382,-2.724029,1.414864,9.452556,-8.402395,-2.107759,-2.702943,5.402463],[-4.189627,-4.237554,7.587413,9.283236,-6.041427,-6.325030,-0.991378,-4.811994,6.030164,-0.123984]],[[6.164951,5.485729,-0.082979,-7.093294,-7.032190,8.482090,-2.314771,4.730097,7.721215,0.718366],[1.167004,-8.890076,6.544181,9.753779,-3.303726,-6.273100,0.677594,0.049785,1.702465,-7.799041],[-4.670793,-8.815230,3.536264,-6.788042,-3.978814,-1.320514,8.274703,1.467602,6.954937,5.237311],[-1.682093,8.141872,-4.513831,7.026003,7.572415,9.763544,2.303710,-7.402246,9.860988,3.898548],[-6.697149,7.308988,7.207929,-7.558839,7.483700,-9.340771,9.600369,4.667872,-7.074811,5.771592]]], dtype = "float32")#candidate|1|(10, 5, 10)|const|float32
bop_2 = relay.mod(var_0.astype('float32'), relay.reshape(const_1.astype('float32'), relay.shape_of(var_0))) # shape=(10, 5, 10)
uop_5 = relay.sin(var_0.astype('float32')) # shape=(10, 5, 10)
uop_7 = relay.acosh(uop_5.astype('float32')) # shape=(10, 5, 10)
uop_9 = relay.exp(var_0.astype('float64')) # shape=(10, 5, 10)
bop_11 = relay.divide(uop_7.astype('float32'), relay.reshape(var_0.astype('float32'), relay.shape_of(uop_7))) # shape=(10, 5, 10)
const_14 = relay.const([[[-7.183570,4.809025,9.628152,1.817884,5.088528,0.922738,-1.067724,-8.009288,-9.541534,-3.661811],[-6.945574,-5.788856,-4.883548,5.305939,8.896782,7.841087,6.866798,-6.667530,-3.676128,7.080160],[5.291621,9.708479,0.944850,4.878263,1.398958,5.945618,1.532083,2.771630,-8.991381,9.522845],[9.105352,1.991013,0.967109,-2.523299,9.557295,8.384601,-5.996534,-0.987495,8.635396,5.901320],[-8.720193,-2.883727,4.388504,8.772063,-9.060722,4.310329,5.070977,4.676941,1.833557,-2.931551]],[[9.605881,1.195527,5.767021,4.379376,8.766861,9.383607,-0.508690,8.026669,1.609585,8.418776],[-3.491674,-9.948825,5.379663,-0.284170,8.242051,0.111396,0.109008,-5.326073,4.052825,4.700039],[-8.499595,-2.614414,-3.983688,-3.773730,-0.252126,-5.017969,8.500645,8.872909,-8.949924,3.960421],[-4.568337,-8.858742,2.797127,-6.703941,-0.669304,-7.093403,-4.432085,8.709457,-8.857427,0.642697],[9.789898,6.175630,-8.226029,8.293391,1.053552,-9.749921,-8.543739,9.650658,6.465148,-6.885773]],[[9.251916,-4.026572,9.017749,-8.277785,-8.615204,-3.645627,3.468171,-9.669267,-5.349208,-7.191645],[-2.834576,-2.698247,8.978781,-8.302764,6.454641,2.120193,0.190079,8.876701,8.641824,5.296999],[9.754464,-5.223560,7.765128,-4.109481,-8.450691,1.323375,8.405924,5.640358,4.191249,3.169906],[-2.103379,4.249839,-6.719221,-9.193770,1.078021,9.430883,-6.759074,6.725263,-0.697523,8.571554],[9.697595,7.364603,-3.914108,1.326756,0.234151,7.872547,5.538216,9.721022,0.801017,-5.118244]],[[4.636975,8.829592,9.613320,-9.897520,-9.342496,-5.160290,-5.552123,-4.103719,9.793121,6.258040],[-5.212812,-8.867696,9.066104,5.003595,-3.209387,6.973908,-1.567371,6.562978,-1.464013,3.579924],[6.611456,-3.864711,-8.466488,2.848107,-2.843907,-6.999279,5.994083,5.103978,-1.565576,5.893600],[-1.716334,0.002241,1.174428,-7.433237,-6.831963,-9.189007,3.160953,1.136461,5.630572,6.341706],[4.841133,-6.751446,5.993221,-9.005045,-1.436046,-5.447475,-7.275967,9.655695,-6.072250,6.057522]],[[-9.009168,-2.745445,-1.291746,3.824889,-5.396548,-0.097026,-7.442809,-5.810302,-2.724443,1.277387],[-2.997411,1.828059,7.584666,-6.955138,-9.657174,-1.304267,1.280823,-1.230882,7.700879,8.228037],[0.387058,8.523516,-5.267273,2.733624,-0.050930,-7.687122,-4.795480,-1.109354,-4.363744,9.910455],[-7.675782,1.126689,-1.080189,-0.373310,6.773987,-7.340323,0.757345,-1.409674,2.843168,-5.181772],[5.906489,7.742387,-8.735367,7.506049,-4.349346,2.346770,8.056565,3.115884,-1.200515,7.524125]],[[6.736028,-6.674004,7.949132,4.852360,-3.491564,3.761621,-7.350663,1.515470,-7.279612,6.754300],[0.380050,1.071730,-9.861043,9.898971,-2.542406,-0.660922,-7.307031,-6.287684,-9.570902,-3.201297],[8.163360,-9.452273,-3.271043,-0.013836,-5.340847,-8.151925,-1.849629,-0.979257,-1.686944,-7.824603],[-6.455880,-8.594981,8.197365,2.477290,-9.250338,2.643368,5.220214,5.928709,8.752663,-6.357500],[-9.144771,-9.542620,-9.387952,8.927249,-3.419849,-7.021400,-1.157619,5.121638,5.965438,3.973654]],[[-7.201235,-6.655408,-4.750200,-4.825862,2.055457,-9.098395,7.175570,0.806409,1.054793,-8.474079],[-3.724178,4.793359,6.253457,-0.225944,8.223828,8.941848,-5.151097,2.544714,3.636409,0.625381],[-8.131817,-3.416326,-9.847189,3.975441,-0.845094,3.330225,-0.749487,-2.594631,6.303290,8.308888],[-5.894773,-4.300799,-5.157620,-9.484437,7.174249,-2.006949,4.994321,2.212466,-4.789723,4.189517],[-1.737517,8.504060,5.601096,9.620505,4.585825,3.835042,8.207733,-6.678049,7.153243,5.648116]],[[-7.480883,-8.764693,2.602904,6.257458,3.142919,-1.803120,2.678305,-1.310558,2.178897,3.355100],[-7.211448,9.000079,9.999863,7.500011,-8.032696,9.657816,8.792693,-4.609360,-9.507423,-0.889633],[-4.232523,9.486920,1.236861,4.239012,7.998262,3.648601,1.021191,4.577023,-5.464485,-5.387392],[-7.066149,-4.178784,6.306658,-2.228215,-0.223085,4.463099,4.978869,3.709595,7.156861,-7.245626],[5.204542,-3.667240,-9.649848,5.421537,5.132718,0.488311,-3.864333,3.021969,-2.113529,6.799477]],[[-1.180754,2.837860,2.853962,-0.526234,6.857913,-4.644893,-5.295089,-1.268654,-1.135589,-9.572548],[1.026035,3.824749,3.750471,9.688864,-7.156781,-9.720171,-2.322913,8.462171,-4.319651,-7.229361],[-5.926648,8.939405,7.306782,4.008609,3.783638,6.995313,6.903029,-4.669491,7.363352,-0.464030],[-5.059594,8.674127,-4.630545,3.872078,-3.742546,0.092510,-5.496419,-6.985351,-0.069813,1.304808],[3.581621,-6.363571,-9.431572,5.067915,-3.301413,9.615303,-5.011478,9.245328,2.334635,-1.933106]],[[-9.145494,-5.822261,-4.303002,9.208590,-0.915956,-4.979767,3.174522,-0.139432,-2.764008,-1.551136],[6.739421,7.510342,-2.755285,8.321184,7.654665,3.910034,8.524829,-1.652182,-0.408573,-6.911838],[6.727102,-1.329553,6.134737,-1.263684,-9.797472,-6.804977,-2.197260,-1.065682,9.030948,8.594643],[2.366770,-8.494235,-9.283191,-0.518995,-1.546637,-0.433096,8.648136,5.820346,1.605522,-9.839590],[-3.327401,-0.415613,0.117179,8.634159,-5.313187,9.143576,9.048735,-2.235361,0.041895,8.360162]]], dtype = "float32")#candidate|14|(10, 5, 10)|const|float32
bop_15 = relay.floor_mod(uop_7.astype('float64'), relay.reshape(const_14.astype('float64'), relay.shape_of(uop_7))) # shape=(10, 5, 10)
uop_18 = relay.log(bop_15.astype('float32')) # shape=(10, 5, 10)
uop_20 = relay.atan(uop_18.astype('float64')) # shape=(10, 5, 10)
bop_22 = relay.maximum(uop_20.astype('int32'), relay.reshape(uop_5.astype('int32'), relay.shape_of(uop_20))) # shape=(10, 5, 10)
output = relay.Tuple([bop_2,uop_9,bop_11,bop_22,])
output2 = relay.Tuple([bop_2,uop_9,bop_11,bop_22,])
func_25 = relay.Function([var_0,], output)
mod['func_25'] = func_25
mod = relay.transform.InferType()(mod)
var_26 = relay.var("var_26", dtype = "float32", shape = (10, 5, 10))#candidate|26|(10, 5, 10)|var|float32
output = func_25(var_26)
func_27 = relay.Function([var_26], output)
mutated_mod['func_27'] = func_27
mutated_mod = relay.transform.InferType()(mutated_mod)
var_29 = relay.var("var_29", dtype = "int8", shape = (4, 2, 16))#candidate|29|(4, 2, 16)|var|int8
var_30 = relay.var("var_30", dtype = "int8", shape = (4, 2, 16))#candidate|30|(4, 2, 16)|var|int8
bop_31 = relay.greater(var_29.astype('bool'), relay.reshape(var_30.astype('bool'), relay.shape_of(var_29))) # shape=(4, 2, 16)
uop_34 = relay.cosh(var_29.astype('float64')) # shape=(4, 2, 16)
func_25_call = mod.get_global_var('func_25')
func_27_call = mutated_mod.get_global_var('func_27')
var_37 = relay.var("var_37", dtype = "float32", shape = (500,))#candidate|37|(500,)|var|float32
call_36 = relay.TupleGetItem(func_25_call(relay.reshape(var_37.astype('float32'), [10, 5, 10])), 0)
call_38 = relay.TupleGetItem(func_27_call(relay.reshape(var_37.astype('float32'), [10, 5, 10])), 0)
uop_39 = relay.log2(bop_31.astype('float32')) # shape=(4, 2, 16)
bop_41 = relay.power(uop_39.astype('float32'), relay.reshape(bop_31.astype('float32'), relay.shape_of(uop_39))) # shape=(4, 2, 16)
uop_44 = relay.atanh(uop_39.astype('float32')) # shape=(4, 2, 16)
var_46 = relay.var("var_46", dtype = "float32", shape = (4, 2, 16))#candidate|46|(4, 2, 16)|var|float32
bop_47 = relay.logical_and(uop_44.astype('bool'), relay.reshape(var_46.astype('bool'), relay.shape_of(uop_44))) # shape=(4, 2, 16)
output = relay.Tuple([uop_34,call_36,var_37,bop_41,bop_47,])
output2 = relay.Tuple([uop_34,call_38,var_37,bop_41,bop_47,])
func_50 = relay.Function([var_29,var_30,var_37,var_46,], output)
mod['func_50'] = func_50
mod = relay.transform.InferType()(mod)
var_51 = relay.var("var_51", dtype = "int8", shape = (4, 2, 16))#candidate|51|(4, 2, 16)|var|int8
var_52 = relay.var("var_52", dtype = "int8", shape = (4, 2, 16))#candidate|52|(4, 2, 16)|var|int8
var_53 = relay.var("var_53", dtype = "float32", shape = (500,))#candidate|53|(500,)|var|float32
var_54 = relay.var("var_54", dtype = "float32", shape = (4, 2, 16))#candidate|54|(4, 2, 16)|var|float32
output = func_50(var_51,var_52,var_53,var_54,)
func_55 = relay.Function([var_51,var_52,var_53,var_54,], output)
mutated_mod['func_55'] = func_55
mutated_mod = relay.transform.InferType()(mutated_mod)
var_57 = relay.var("var_57", dtype = "float64", shape = (6, 2, 6))#candidate|57|(6, 2, 6)|var|float64
uop_58 = relay.tan(var_57.astype('float64')) # shape=(6, 2, 6)
bop_60 = relay.greater(uop_58.astype('bool'), relay.reshape(var_57.astype('bool'), relay.shape_of(uop_58))) # shape=(6, 2, 6)
uop_63 = relay.atanh(bop_60.astype('float64')) # shape=(6, 2, 6)
bop_65 = relay.floor_mod(uop_63.astype('float32'), relay.reshape(bop_60.astype('float32'), relay.shape_of(uop_63))) # shape=(6, 2, 6)
var_68 = relay.var("var_68", dtype = "float32", shape = (6, 2, 6))#candidate|68|(6, 2, 6)|var|float32
bop_69 = relay.power(bop_65.astype('float64'), relay.reshape(var_68.astype('float64'), relay.shape_of(bop_65))) # shape=(6, 2, 6)
uop_72 = relay.asinh(bop_69.astype('float64')) # shape=(6, 2, 6)
bop_74 = relay.logical_or(uop_72.astype('bool'), relay.reshape(var_57.astype('bool'), relay.shape_of(uop_72))) # shape=(6, 2, 6)
output = bop_74
output2 = bop_74
func_77 = relay.Function([var_57,var_68,], output)
mod['func_77'] = func_77
mod = relay.transform.InferType()(mod)
var_78 = relay.var("var_78", dtype = "float64", shape = (6, 2, 6))#candidate|78|(6, 2, 6)|var|float64
var_79 = relay.var("var_79", dtype = "float32", shape = (6, 2, 6))#candidate|79|(6, 2, 6)|var|float32
output = func_77(var_78,var_79,)
func_80 = relay.Function([var_78,var_79,], output)
mutated_mod['func_80'] = func_80
mutated_mod = relay.transform.InferType()(mutated_mod)
var_82 = relay.var("var_82", dtype = "bool", shape = (8,))#candidate|82|(8,)|var|bool
var_83 = relay.var("var_83", dtype = "bool", shape = (8,))#candidate|83|(8,)|var|bool
bop_84 = relay.logical_and(var_82.astype('bool'), relay.reshape(var_83.astype('bool'), relay.shape_of(var_82))) # shape=(8,)
bop_87 = relay.add(var_83.astype('uint16'), relay.reshape(bop_84.astype('uint16'), relay.shape_of(var_83))) # shape=(8,)
uop_90 = relay.exp(var_83.astype('float32')) # shape=(8,)
bop_92 = relay.not_equal(uop_90.astype('bool'), relay.reshape(bop_84.astype('bool'), relay.shape_of(uop_90))) # shape=(8,)
uop_95 = relay.atan(bop_92.astype('float64')) # shape=(8,)
bop_97 = relay.bitwise_xor(var_82.astype('int32'), relay.reshape(uop_90.astype('int32'), relay.shape_of(var_82))) # shape=(8,)
const_100 = relay.const([3.727651,-5.775060,9.720349,-0.505705,1.964920,-5.192288,-5.866319,-4.664625], dtype = "float64")#candidate|100|(8,)|const|float64
bop_101 = relay.maximum(uop_95.astype('int64'), relay.reshape(const_100.astype('int64'), relay.shape_of(uop_95))) # shape=(8,)
uop_104 = relay.sin(uop_95.astype('float64')) # shape=(8,)
bop_106 = relay.greater_equal(uop_95.astype('bool'), relay.reshape(uop_104.astype('bool'), relay.shape_of(uop_95))) # shape=(8,)
uop_109 = relay.acos(bop_106.astype('float64')) # shape=(8,)
const_111 = relay.const([-8.081236,-4.912552,3.537329,9.943112,7.967421,0.407052,-9.822843,-0.617840], dtype = "float64")#candidate|111|(8,)|const|float64
bop_112 = relay.power(uop_104.astype('float32'), relay.reshape(const_111.astype('float32'), relay.shape_of(uop_104))) # shape=(8,)
bop_115 = relay.logical_and(uop_109.astype('bool'), relay.reshape(bop_84.astype('bool'), relay.shape_of(uop_109))) # shape=(8,)
uop_118 = relay.asin(bop_87.astype('float32')) # shape=(8,)
uop_120 = relay.atanh(bop_112.astype('float64')) # shape=(8,)
bop_122 = relay.right_shift(var_82.astype('uint16'), relay.reshape(uop_90.astype('uint16'), relay.shape_of(var_82))) # shape=(8,)
uop_125 = relay.atan(bop_92.astype('float64')) # shape=(8,)
uop_127 = relay.cos(uop_95.astype('float32')) # shape=(8,)
bop_129 = relay.floor_mod(uop_109.astype('float64'), relay.reshape(bop_92.astype('float64'), relay.shape_of(uop_109))) # shape=(8,)
func_77_call = mod.get_global_var('func_77')
func_80_call = mutated_mod.get_global_var('func_80')
const_133 = relay.const([-9.612361,-1.106332,-4.344646,-2.526289,3.181494,9.898693,7.396988,1.067911,7.472072,-4.923667,4.894128,9.463165,-1.912730,-9.924539,-6.333349,4.402992,-3.700694,1.705274,-3.981384,-4.416904,1.183129,-6.061721,5.429196,-3.744274,7.403442,9.591801,-3.255333,8.551277,-3.232594,1.677718,7.633928,7.480279,-9.544478,-8.472439,-6.536249,-3.694974,6.770238,-2.349372,-3.593098,5.768140,7.312955,6.095676,-0.241859,1.905691,-4.786114,3.031083,4.289041,9.050454,6.832757,-9.951823,0.710869,6.105529,-4.367622,4.511506,-5.913383,-8.041864,4.453480,-1.185499,5.659210,-2.354363,-1.026045,7.934501,-4.254062,1.375789,-6.508683,-8.950486,-2.306343,-7.665946,3.285600,7.206499,2.493423,-3.522543], dtype = "float64")#candidate|133|(72,)|const|float64
call_132 = func_77_call(relay.reshape(const_133.astype('float64'), [6, 2, 6]), relay.reshape(const_133.astype('float32'), [6, 2, 6]), )
call_134 = func_77_call(relay.reshape(const_133.astype('float64'), [6, 2, 6]), relay.reshape(const_133.astype('float32'), [6, 2, 6]), )
var_135 = relay.var("var_135", dtype = "float64", shape = (8,))#candidate|135|(8,)|var|float64
bop_136 = relay.bitwise_and(uop_125.astype('uint64'), relay.reshape(var_135.astype('uint64'), relay.shape_of(uop_125))) # shape=(8,)
uop_139 = relay.sqrt(bop_101.astype('float64')) # shape=(8,)
uop_141 = relay.sigmoid(bop_129.astype('float32')) # shape=(8,)
bop_143 = relay.floor_divide(uop_141.astype('float32'), relay.reshape(bop_84.astype('float32'), relay.shape_of(uop_141))) # shape=(8,)
bop_146 = relay.maximum(uop_95.astype('float32'), relay.reshape(bop_129.astype('float32'), relay.shape_of(uop_95))) # shape=(8,)
var_149 = relay.var("var_149", dtype = "float32", shape = (8,))#candidate|149|(8,)|var|float32
bop_150 = relay.equal(bop_146.astype('bool'), relay.reshape(var_149.astype('bool'), relay.shape_of(bop_146))) # shape=(8,)
var_153 = relay.var("var_153", dtype = "float32", shape = (8,))#candidate|153|(8,)|var|float32
bop_154 = relay.bitwise_xor(bop_143.astype('uint32'), relay.reshape(var_153.astype('uint32'), relay.shape_of(bop_143))) # shape=(8,)
bop_157 = relay.not_equal(bop_154.astype('bool'), relay.reshape(bop_122.astype('bool'), relay.shape_of(bop_154))) # shape=(8,)
uop_160 = relay.sqrt(bop_146.astype('float64')) # shape=(8,)
uop_162 = relay.erf(bop_143.astype('float32')) # shape=(8,)
uop_164 = relay.sinh(bop_146.astype('float64')) # shape=(8,)
bop_166 = relay.floor_mod(uop_162.astype('float32'), relay.reshape(var_153.astype('float32'), relay.shape_of(uop_162))) # shape=(8,)
uop_169 = relay.cosh(bop_166.astype('float32')) # shape=(8,)
uop_171 = relay.exp(uop_169.astype('float64')) # shape=(8,)
func_50_call = mod.get_global_var('func_50')
func_55_call = mutated_mod.get_global_var('func_55')
const_174 = relay.const([2,-5,-3,-3,2,3,7,-9,3,-3,-4,2,-2,-6,-3,-1,9,9,4,-8,-2,-4,9,5,7,-6,8,-8,6,-9,1,1,7,3,-4,8,4,-8,-5,4,9,-3,-7,-9,-7,9,8,7,1,-7,-2,4,6,8,3,5,1,10,3,2,-8,7,4,1,3,-2,-4,-3,-8,-4,-5,4,-1,6,6,3,1,-1,-3,10,-2,-10,-9,-7,-4,-8,3,4,6,7,8,-5,-9,3,1,-7,8,-7,2,3,-8,6,-5,-5,-10,5,4,10,8,-7,-7,-10,-4,1,3,-2,9,2,8,-4,-2,10,-1,-1,-4,-6,5,-5], dtype = "int8")#candidate|174|(128,)|const|int8
const_175 = relay.const([-1.930676,8.215228,6.540123,-8.468483,3.947659,-9.478900,0.973801,3.469519,1.150515,6.559512,3.585166,-6.392079,-7.592015,-5.518503,-8.376932,0.638909,-4.612334,2.681819,3.969580,-5.910214,-7.799858,-8.635085,6.232580,4.567989,-5.779525,8.452276,5.499487,5.747896,-1.919552,4.491620,0.006854,-7.048373,6.123268,6.950809,8.862045,-2.880008,-1.524780,2.777024,-6.566343,3.872739,-6.689299,-5.899057,-8.733985,4.815051,-7.953456,3.088539,1.507834,0.286752,9.956386,-5.505351,-6.757025,-5.849566,2.085075,-8.992169,-5.809060,1.849170,-6.723153,-1.901609,7.838192,-9.118069,-1.190812,0.823171,7.806860,1.474185,-3.454944,6.869569,-5.969464,3.909950,7.101484,9.345372,2.783967,-1.834255,6.463855,3.829181,6.447875,-1.192637,0.591555,0.777076,-0.832641,-5.037346,-0.463664,-6.499199,5.445213,9.245093,2.784369,6.746735,2.197877,6.388481,-8.884966,6.375282,-0.377955,-5.345238,-3.706633,-0.652563,-9.989797,5.735960,-8.140843,6.460105,6.934484,-7.521199,1.223972,-1.399399,-7.667257,5.813966,-4.692900,-2.363205,-4.108480,-1.447372,-0.470715,-7.800527,6.701142,-1.506058,7.514574,-3.722517,-0.434976,0.598978,-3.173010,-3.628227,1.432289,1.494204,-2.345888,-9.666178,-1.561738,2.476518,3.782230,9.201993,9.105457,-9.277319,8.051365,-2.693288,-8.869977,-0.625296,0.723183,9.752737,-1.810050,-5.314446,-3.425511,-7.731768,9.273317,7.514941,0.528533,-7.678452,-6.637144,8.654996,8.430198,1.889917,7.201256,-8.278058,-2.647075,-5.804350,-1.943756,-7.354355,5.176324,-2.926537,-0.816696,-2.365984,-2.674826,2.990056,2.923901,0.910556,-6.257266,-5.395952,-0.311742,-8.840964,-0.581251,3.661908,7.744473,6.844440,-8.056497,3.417208,-9.160960,-7.695278,-9.305364,4.256846,-6.869209,-7.146872,-9.599717,1.995089,6.610998,7.882132,-4.919317,7.336109,-6.941790,-0.788559,-9.897149,-4.785936,2.073536,3.310183,-9.208484,-1.194195,2.608621,6.637585,0.498705,-6.661636,-3.776663,2.019361,4.049714,-9.778163,3.332522,-3.898944,-0.487790,-0.445164,-4.156548,-1.181209,7.443765,2.056264,3.517422,-8.334529,6.879111,-8.605006,-8.186368,-6.265227,-2.784755,-4.592445,-3.893286,6.672939,2.281094,-5.060005,5.996574,-1.695639,9.162172,-2.188522,-0.386182,-8.205047,0.632462,6.726706,-2.565652,6.546825,-6.483646,-1.635494,6.411342,0.604552,-8.139643,-3.956886,-2.606735,-3.553203,-2.920165,4.883755,5.766382,4.377102,-9.094039,-1.689557,-7.899454,1.179787,4.672857,2.757740,0.705650,9.823691,9.230543,9.441909,-0.139300,1.263204,-1.811988,4.157693,-6.246736,1.442727,2.822522,3.646886,7.030521,-3.474469,3.754545,9.755103,5.252404,-4.011443,-6.976060,-4.660803,0.288440,-7.903421,-2.826215,1.498908,-3.082986,5.627749,-7.127265,8.201403,2.720800,7.541128,-4.977407,4.138687,3.219341,-6.936050,-2.469544,7.342567,-7.483434,7.951469,9.150666,-2.772539,2.575951,-2.640986,-7.007632,-6.766713,5.088836,-7.132709,-8.828612,0.864622,8.300750,-6.820215,6.378172,8.232206,6.289765,-7.739138,8.480787,-2.318898,7.835097,4.542473,-2.265317,0.340661,5.306989,1.807376,-1.839585,1.051063,-6.853679,4.578069,6.653646,-7.409140,2.226681,-5.492591,8.146453,-6.848350,9.113380,-8.329162,5.756782,8.548787,-9.241912,-7.231647,-7.117102,-2.436870,6.299437,-8.640516,4.076344,0.356955,6.999674,0.645115,-4.161340,5.197390,9.687071,-4.232130,-9.310754,0.177061,-0.471701,6.794302,-4.835000,-8.536156,9.377112,-6.066153,9.065451,3.372133,4.527382,4.012705,-5.695540,7.496720,-6.630026,-9.152279,-5.963475,7.128891,-4.206857,6.422884,1.912698,-6.533130,-5.614279,1.504623,8.960715,-8.916451,1.332822,-2.260746,4.975354,-9.431599,4.437370,-0.141966,-0.134785,6.976794,-5.157428,5.088160,-9.024301,-3.955417,6.016153,-8.703639,-9.863081,3.188506,-4.628004,-4.515613,-8.037540,5.921218,3.097521,0.387859,-3.424746,-0.495194,3.947717,-8.702096,-7.811050,-1.594545,-1.855724,-8.202349,3.667927,-8.904358,4.308447,1.176349,3.351674,-4.582383,-5.674942,4.268917,-0.532348,0.679614,2.198730,4.261825,-9.522138,7.823069,-3.793825,-6.420635,-6.665728,1.722571,3.648563,3.484582,7.670907,6.645342,3.463229,-6.799863,0.423683,5.445405,6.892970,-9.790227,-1.401047,-3.143136,3.165531,-9.159042,-5.229508,7.275350,8.594678,-8.640413,-0.429361,-2.725693,-0.714094,9.873895,5.737108,1.734897,7.180621,-2.504935,9.687552,-8.770577,7.575136,-4.027535,-3.114191,3.673999,-3.504393,2.377172,-4.353838,-9.545990,-8.226997,-6.851335,-6.169142,1.291004,6.222067,1.497629,-8.940339,8.909275,2.268265,1.817663,6.965548,2.845303,9.871786,9.580137,-6.467531,-7.241283,1.564238,-3.907513,-3.556764,-3.630490,-3.888241,1.921535,9.633755,-9.920159,-8.538823,5.121429,1.237753,-4.318443,6.277614,-4.533439,3.329461,-6.330230,8.609311,1.017779,-3.606624,0.106872,4.145908,-7.381365,1.789897,4.751470,-4.225258,8.907026,2.769979,-1.236326,0.670677,9.827343,-6.151858,-5.910154,-2.865429,5.790293,1.358536,9.681672,9.054051,6.599587], dtype = "float32")#candidate|175|(500,)|const|float32
call_173 = relay.TupleGetItem(func_50_call(relay.reshape(const_174.astype('int8'), [4, 2, 16]), relay.reshape(const_174.astype('int8'), [4, 2, 16]), relay.reshape(const_175.astype('float32'), [500,]), relay.reshape(const_174.astype('float32'), [4, 2, 16]), ), 3)
call_176 = relay.TupleGetItem(func_55_call(relay.reshape(const_174.astype('int8'), [4, 2, 16]), relay.reshape(const_174.astype('int8'), [4, 2, 16]), relay.reshape(const_175.astype('float32'), [500,]), relay.reshape(const_174.astype('float32'), [4, 2, 16]), ), 3)
uop_177 = relay.atan(uop_171.astype('float64')) # shape=(8,)
bop_179 = relay.bitwise_xor(uop_141.astype('uint16'), relay.reshape(bop_106.astype('uint16'), relay.shape_of(uop_141))) # shape=(8,)
uop_182 = relay.sinh(uop_171.astype('float32')) # shape=(8,)
const_184 = relay.const([-3.801670,0.518378,-3.740666,0.647382,-2.401147,-4.712597,-9.765273,-9.036139], dtype = "float32")#candidate|184|(8,)|const|float32
bop_185 = relay.logical_xor(uop_182.astype('int16'), relay.reshape(const_184.astype('int16'), relay.shape_of(uop_182))) # shape=(8,)
bop_188 = relay.subtract(uop_169.astype('int32'), relay.reshape(bop_136.astype('int32'), relay.shape_of(uop_169))) # shape=(8,)
uop_191 = relay.cos(uop_177.astype('float64')) # shape=(8,)
uop_193 = relay.sigmoid(uop_182.astype('float64')) # shape=(8,)
uop_195 = relay.cos(uop_171.astype('float64')) # shape=(8,)
var_197 = relay.var("var_197", dtype = "float32", shape = (8,))#candidate|197|(8,)|var|float32
bop_198 = relay.logical_and(uop_162.astype('bool'), relay.reshape(var_197.astype('bool'), relay.shape_of(uop_162))) # shape=(8,)
uop_201 = relay.sinh(uop_171.astype('float32')) # shape=(8,)
bop_203 = relay.floor_mod(bop_185.astype('float64'), relay.reshape(bop_101.astype('float64'), relay.shape_of(bop_185))) # shape=(8,)
uop_206 = relay.erf(bop_185.astype('float32')) # shape=(8,)
var_208 = relay.var("var_208", dtype = "float64", shape = (8,))#candidate|208|(8,)|var|float64
bop_209 = relay.less_equal(uop_191.astype('bool'), relay.reshape(var_208.astype('bool'), relay.shape_of(uop_191))) # shape=(8,)
bop_212 = relay.not_equal(uop_191.astype('bool'), relay.reshape(bop_106.astype('bool'), relay.shape_of(uop_191))) # shape=(8,)
bop_215 = relay.not_equal(uop_191.astype('bool'), relay.reshape(bop_101.astype('bool'), relay.shape_of(uop_191))) # shape=(8,)
bop_218 = relay.multiply(uop_193.astype('int32'), relay.reshape(const_111.astype('int32'), relay.shape_of(uop_193))) # shape=(8,)
output = relay.Tuple([bop_97,bop_115,uop_118,uop_120,uop_127,call_132,const_133,uop_139,bop_150,bop_157,uop_160,uop_164,call_173,const_174,const_175,bop_179,bop_188,uop_195,bop_198,uop_201,bop_203,uop_206,bop_209,bop_212,bop_215,bop_218,])
output2 = relay.Tuple([bop_97,bop_115,uop_118,uop_120,uop_127,call_134,const_133,uop_139,bop_150,bop_157,uop_160,uop_164,call_176,const_174,const_175,bop_179,bop_188,uop_195,bop_198,uop_201,bop_203,uop_206,bop_209,bop_212,bop_215,bop_218,])
func_221 = relay.Function([var_82,var_83,var_135,var_149,var_153,var_197,var_208,], output)
mod['func_221'] = func_221
mod = relay.transform.InferType()(mod)
var_222 = relay.var("var_222", dtype = "bool", shape = (8,))#candidate|222|(8,)|var|bool
var_223 = relay.var("var_223", dtype = "bool", shape = (8,))#candidate|223|(8,)|var|bool
var_224 = relay.var("var_224", dtype = "float64", shape = (8,))#candidate|224|(8,)|var|float64
var_225 = relay.var("var_225", dtype = "float32", shape = (8,))#candidate|225|(8,)|var|float32
var_226 = relay.var("var_226", dtype = "float32", shape = (8,))#candidate|226|(8,)|var|float32
var_227 = relay.var("var_227", dtype = "float32", shape = (8,))#candidate|227|(8,)|var|float32
var_228 = relay.var("var_228", dtype = "float64", shape = (8,))#candidate|228|(8,)|var|float64
output = func_221(var_222,var_223,var_224,var_225,var_226,var_227,var_228,)
func_229 = relay.Function([var_222,var_223,var_224,var_225,var_226,var_227,var_228,], output)
mutated_mod['func_229'] = func_229
mutated_mod = relay.transform.InferType()(mutated_mod)
var_231 = relay.var("var_231", dtype = "float32", shape = ())#candidate|231|()|var|float32
uop_232 = relay.log10(var_231.astype('float32')) # shape=()
bop_234 = relay.floor_mod(uop_232.astype('float64'), var_231.astype('float64')) # shape=()
uop_237 = relay.asin(var_231.astype('float64')) # shape=()
bop_239 = relay.minimum(uop_237.astype('uint64'), var_231.astype('uint64')) # shape=()
uop_242 = relay.acos(var_231.astype('float64')) # shape=()
bop_244 = relay.logical_and(uop_242.astype('bool'), var_231.astype('bool')) # shape=()
uop_247 = relay.sin(bop_234.astype('float64')) # shape=()
uop_249 = relay.atanh(var_231.astype('float64')) # shape=()
uop_251 = relay.erf(uop_247.astype('float32')) # shape=()
uop_253 = relay.asinh(uop_251.astype('float32')) # shape=()
var_255 = relay.var("var_255", dtype = "float64", shape = ())#candidate|255|()|var|float64
bop_256 = relay.minimum(uop_247.astype('int8'), var_255.astype('int8')) # shape=()
bop_259 = relay.power(bop_256.astype('float64'), bop_244.astype('float64')) # shape=()
uop_262 = relay.acosh(bop_259.astype('float64')) # shape=()
output = relay.Tuple([bop_239,uop_249,uop_253,uop_262,])
output2 = relay.Tuple([bop_239,uop_249,uop_253,uop_262,])
func_264 = relay.Function([var_231,var_255,], output)
mod['func_264'] = func_264
mod = relay.transform.InferType()(mod)
var_265 = relay.var("var_265", dtype = "float32", shape = ())#candidate|265|()|var|float32
var_266 = relay.var("var_266", dtype = "float64", shape = ())#candidate|266|()|var|float64
output = func_264(var_265,var_266,)
func_267 = relay.Function([var_265,var_266,], output)
mutated_mod['func_267'] = func_267
mutated_mod = relay.transform.InferType()(mutated_mod)
const_269 = relay.const(-9.008422, dtype = "float32")#candidate|269|()|const|float32
uop_270 = relay.cosh(const_269.astype('float32')) # shape=()
func_221_call = mod.get_global_var('func_221')
func_229_call = mutated_mod.get_global_var('func_229')
const_273 = relay.const([True,True,True,True,False,True,False,True], dtype = "bool")#candidate|273|(8,)|const|bool
call_272 = relay.TupleGetItem(func_221_call(relay.reshape(const_273.astype('bool'), [8,]), relay.reshape(const_273.astype('bool'), [8,]), relay.reshape(const_273.astype('float64'), [8,]), relay.reshape(const_273.astype('float32'), [8,]), relay.reshape(const_273.astype('float32'), [8,]), relay.reshape(const_273.astype('float32'), [8,]), relay.reshape(const_273.astype('float64'), [8,]), ), 3)
call_274 = relay.TupleGetItem(func_229_call(relay.reshape(const_273.astype('bool'), [8,]), relay.reshape(const_273.astype('bool'), [8,]), relay.reshape(const_273.astype('float64'), [8,]), relay.reshape(const_273.astype('float32'), [8,]), relay.reshape(const_273.astype('float32'), [8,]), relay.reshape(const_273.astype('float32'), [8,]), relay.reshape(const_273.astype('float64'), [8,]), ), 3)
bop_275 = relay.equal(uop_270.astype('bool'), const_269.astype('bool')) # shape=()
bop_278 = relay.floor_mod(const_273.astype('float32'), const_269.astype('float32')) # shape=(8,)
bop_281 = relay.add(call_272.astype('int16'), bop_275.astype('int16')) # shape=(8,)
bop_284 = relay.add(call_274.astype('int16'), bop_275.astype('int16')) # shape=(8,)
func_50_call = mod.get_global_var('func_50')
func_55_call = mutated_mod.get_global_var('func_55')
const_286 = relay.const([[-9,7,-2,9,10,4,8,1,-2,-9,6,-7,7,-3,-2,-5,7,7,4,7,-9,2,-5,-5,9,7,6,-6,-7,-3,2,-2,-9,8,4,-9,-10,-2,6,-3,3,-2,3,-3,5,-3,-3,-5,3,-6,-3,-4,10,10,-5,-2,-5,1,-10,-2,10,1,-10,6],[4,-2,8,1,-4,-5,6,-9,-10,10,-5,-5,8,10,6,3,9,8,3,-7,-2,6,-8,8,-7,7,3,-9,-10,8,5,6,7,3,-3,7,-1,-3,9,-8,-4,-8,-1,-7,-6,-8,6,-4,10,-5,8,-8,6,-1,-7,-1,5,5,8,8,-6,-4,-2,9]], dtype = "int8")#candidate|286|(2, 64)|const|int8
const_287 = relay.const([1.885410,1.023798,-5.790154,-5.785475,-0.780743,-4.108027,-6.221969,-1.122598,-9.247519,6.456889,-3.642038,5.219408,2.927576,-8.933309,3.268128,-1.719763,-3.169159,5.014104,9.665169,-5.249991,7.974905,-4.961579,-9.214444,-9.939214,-6.369574,9.461264,-5.061444,-3.409385,-7.457736,9.899017,-6.597193,-6.465043,9.246421,-5.092942,8.247988,7.170571,8.758408,-6.872910,-1.737379,2.016795,-6.176274,8.943518,0.243733,-6.498006,1.620897,-9.395196,3.454542,-6.029308,-7.885371,-2.491760,7.485101,-2.959625,7.988848,-5.460886,7.252936,-3.622911,-1.959670,4.795109,-8.037946,8.682211,1.486899,4.142072,-2.351733,4.171976,-7.209004,-7.736844,6.907388,8.082809,1.040665,-5.104069,1.047153,-6.267736,8.461169,8.132543,-1.125855,2.336550,-1.023058,-1.081229,-6.563809,-6.142748,3.259123,-3.006611,9.915409,-4.482333,-6.528043,-6.126997,4.061914,0.381852,-0.278131,-1.907022,-3.755630,-0.858637,5.249441,2.911044,-1.429984,-8.848383,8.625755,9.135273,-1.304794,4.294272,-4.846837,-7.873238,8.921788,-7.301234,3.425154,-7.905686,-0.952380,-9.153470,4.128409,2.201717,3.920857,-6.030705,0.666072,-4.349962,1.418208,-4.335074,1.180356,1.229538,-0.517355,-1.363193,0.260365,2.915338,3.810002,8.076324,-9.173033,-5.777724,-5.470670,-4.286838,-3.058617,-2.296771,-8.519610,-2.836789,0.919651,-1.734844,3.375385,4.910058,1.264110,3.075046,6.961176,-4.760999,8.374636,5.381255,0.384176,3.580749,-0.248250,8.638478,-6.771875,-7.430185,8.544685,-8.967759,7.322576,5.590330,-2.826672,6.076976,5.360686,3.081982,7.787334,7.722722,-5.966430,-4.276866,-0.749391,-5.738153,2.591242,-7.594521,1.079149,-9.978855,7.949674,-3.232386,-5.968691,9.703032,3.078520,-9.574739,6.787973,9.869541,3.189236,7.785832,5.977627,-3.233070,-6.954851,0.160085,5.491312,7.229309,-4.622615,6.035299,3.343800,-7.079172,5.234643,9.212499,-7.052255,1.695410,6.502110,2.846574,-7.080765,7.368669,1.872534,-2.832394,-9.697297,5.708199,9.223408,7.426516,8.345970,4.587520,9.065338,0.883077,3.223237,0.397483,2.598051,0.168142,-3.694475,3.595887,-7.187399,7.857838,5.145720,8.568196,2.870532,3.519413,-9.331494,0.503509,-6.119077,-0.689602,4.955103,-8.899821,-8.631346,-5.688566,-8.064073,-9.104004,-5.929864,-2.562834,-9.573201,-5.994057,-5.494366,-5.594007,4.547173,-2.012431,3.562773,7.208543,-8.671629,8.283313,-9.631655,-2.322127,3.774748,0.046707,-4.300668,3.355320,7.461703,-2.261127,-8.616453,-0.091401,-0.564893,2.711672,8.313691,5.118451,-0.807089,9.265703,-2.956438,3.370857,-3.980674,8.310321,-4.232381,-9.277916,0.019080,-0.137877,7.995177,1.234346,0.415258,1.298254,5.393612,6.649098,-7.468591,-4.443393,-2.955622,-2.672320,-0.992607,5.181661,8.334391,-5.506375,-0.895208,-4.635645,-7.764600,4.238747,-5.452116,-0.894016,3.562458,5.155029,-3.248323,7.039049,9.029714,-9.564630,7.666592,5.225231,6.581263,6.314057,-2.023095,1.215890,3.709775,-5.567229,-2.930524,-3.717740,-3.019840,0.069231,5.433830,4.027969,-9.738287,6.615767,6.157803,-1.807834,-1.328375,-6.681988,3.835023,9.729910,1.375520,-6.361771,5.529690,3.773238,-8.545573,-6.142430,3.008331,2.606844,4.495548,-2.591407,1.489551,1.816867,-7.915465,-6.555878,-8.125838,3.659372,4.060566,0.704428,-9.070871,5.211374,1.707697,-3.834149,7.741611,-0.558417,-9.686945,-6.194910,-6.604419,-1.940712,6.903508,-6.793480,-7.723907,2.847025,-9.905587,-8.582198,-1.896312,7.711730,-1.435494,-6.747808,7.080099,-5.100560,9.277249,2.687799,8.212593,9.390405,-9.856379,-8.623150,1.500696,4.530286,-0.712767,-5.293921,4.205860,-1.063320,3.526675,7.895906,4.742647,8.207794,-2.380337,-8.398694,-6.998041,7.557645,-0.522815,0.333327,4.261955,5.028435,8.103032,-9.471036,4.581332,-1.770315,-5.440690,-5.246970,4.655300,-3.451127,-9.895670,8.538212,-9.417278,-7.812087,-2.769562,-4.824116,-6.623807,6.516117,2.013864,-6.811887,-8.591774,-0.205761,-6.006896,6.502234,-8.181383,-5.849263,-7.694564,2.785693,-8.909749,4.390844,8.388215,-3.153277,4.429047,6.326930,-9.699085,-1.460261,-1.086477,8.488243,5.168035,7.544816,-3.794191,-9.693041,4.799464,-0.232945,9.986647,6.005064,9.668462,-1.018195,5.397198,-4.022088,0.451076,1.049673,0.261983,7.524607,9.896904,-8.790268,-8.018270,-4.370749,-3.534524,4.369021,9.087733,-6.513178,-2.732034,3.397837,0.956413,1.420577,-4.991142,-7.064243,5.446566,-7.350902,-2.094390,2.329604,-7.497412,1.491350,-8.669122,-4.443923,8.847433,-4.278745,-8.296505,1.925945,9.226993,-1.525994,3.545304,3.325358,-1.891862,1.161471,-0.988399,3.319934,9.273531,4.895122,9.067219,7.903637,1.532844,0.119259,9.749404,7.196219,0.221939,0.596980,-5.699222,-2.109999,-8.381719,-2.925001,-9.999182,0.727721,-0.452824,4.285822,9.540554,-5.616654,-4.506566,-4.379037,-6.599294,8.690466,6.822442,7.396067,9.342937,2.304023,4.509048,1.702854,8.990566,5.375542,3.302637,-4.542468,9.150014,9.898556,-4.543934,-3.229500,1.740889,-1.754227], dtype = "float32")#candidate|287|(500,)|const|float32
call_285 = relay.TupleGetItem(func_50_call(relay.reshape(const_286.astype('int8'), [4, 2, 16]), relay.reshape(const_286.astype('int8'), [4, 2, 16]), relay.reshape(const_287.astype('float32'), [500,]), relay.reshape(const_286.astype('float32'), [4, 2, 16]), ), 1)
call_288 = relay.TupleGetItem(func_55_call(relay.reshape(const_286.astype('int8'), [4, 2, 16]), relay.reshape(const_286.astype('int8'), [4, 2, 16]), relay.reshape(const_287.astype('float32'), [500,]), relay.reshape(const_286.astype('float32'), [4, 2, 16]), ), 1)
uop_289 = relay.sinh(const_287.astype('float64')) # shape=(500,)
bop_291 = relay.add(bop_275.astype('int8'), bop_281.astype('int8')) # shape=(8,)
bop_294 = relay.add(bop_275.astype('int8'), bop_284.astype('int8')) # shape=(8,)
uop_295 = relay.cos(bop_278.astype('float32')) # shape=(8,)
uop_297 = relay.asinh(bop_275.astype('float64')) # shape=()
var_299 = relay.var("var_299", dtype = "float64", shape = (6, 14))#candidate|299|(6, 14)|var|float64
bop_300 = relay.mod(uop_297.astype('float32'), var_299.astype('float32')) # shape=(6, 14)
bop_303 = relay.logical_and(bop_300.astype('bool'), uop_297.astype('bool')) # shape=(6, 14)
uop_306 = relay.rsqrt(bop_303.astype('float64')) # shape=(6, 14)
bop_308 = relay.floor_mod(uop_306.astype('float32'), uop_270.astype('float32')) # shape=(6, 14)
uop_311 = relay.log10(bop_308.astype('float64')) # shape=(6, 14)
bop_313 = relay.logical_and(uop_297.astype('bool'), const_287.astype('bool')) # shape=(500,)
uop_316 = relay.rsqrt(bop_291.astype('float32')) # shape=(8,)
uop_318 = relay.rsqrt(bop_294.astype('float32')) # shape=(8,)
output = relay.Tuple([call_285,const_286,uop_289,uop_295,uop_311,bop_313,uop_316,])
output2 = relay.Tuple([call_288,const_286,uop_289,uop_295,uop_311,bop_313,uop_318,])
func_319 = relay.Function([var_299,], output)
mod['func_319'] = func_319
mod = relay.transform.InferType()(mod)
var_320 = relay.var("var_320", dtype = "float64", shape = (6, 14))#candidate|320|(6, 14)|var|float64
output = func_319(var_320)
func_321 = relay.Function([var_320], output)
mutated_mod['func_321'] = func_321
mutated_mod = relay.transform.InferType()(mutated_mod)
var_323 = relay.var("var_323", dtype = "float32", shape = (5, 7, 3))#candidate|323|(5, 7, 3)|var|float32
const_324 = relay.const([[[2.601639,-5.849439,5.254184],[9.855600,-2.982386,-2.355780],[-2.989613,-6.708826,-7.665798],[4.114865,6.347727,2.928116],[-7.031768,-7.503129,-1.541886],[7.433258,-4.270425,-1.880602],[-1.423009,0.334213,-9.234905]],[[-8.660516,3.311198,7.309854],[1.186703,-1.351820,6.761462],[-8.580131,3.329531,-7.924447],[-8.195230,0.790180,7.229415],[-5.841535,2.503557,-6.525818],[8.284159,-0.429852,-5.981902],[-8.787721,-3.562651,-9.010386]],[[-5.214466,-4.107821,5.260616],[-1.390121,-7.122860,3.016602],[5.146154,4.698071,3.968128],[-9.674817,-8.380147,8.934367],[-6.736023,7.443601,6.298316],[3.417971,-8.366486,4.043000],[-4.068827,9.642861,3.416987]],[[-7.184603,-4.481797,-1.423319],[-7.180301,-4.508869,6.095222],[7.874559,3.323040,4.575176],[-0.390925,3.189215,-0.403255],[-7.878045,-3.050626,3.106521],[-3.057255,-8.810727,7.761715],[9.565777,4.701064,0.722887]],[[7.101772,-9.518385,0.311232],[5.304668,-6.537353,-3.141314],[5.329838,5.224981,-0.130826],[-7.888936,1.179894,9.451041],[7.694967,-6.870598,-0.855888],[2.948231,-0.028264,-8.048197],[2.506827,8.481734,-6.621580]]], dtype = "float32")#candidate|324|(5, 7, 3)|const|float32
bop_325 = relay.floor_mod(var_323.astype('float32'), relay.reshape(const_324.astype('float32'), relay.shape_of(var_323))) # shape=(5, 7, 3)
output = bop_325
output2 = bop_325
func_328 = relay.Function([var_323,], output)
mod['func_328'] = func_328
mod = relay.transform.InferType()(mod)
var_329 = relay.var("var_329", dtype = "float32", shape = (5, 7, 3))#candidate|329|(5, 7, 3)|var|float32
output = func_328(var_329)
func_330 = relay.Function([var_329], output)
mutated_mod['func_330'] = func_330
mutated_mod = relay.transform.InferType()(mutated_mod)
var_332 = relay.var("var_332", dtype = "float32", shape = ())#candidate|332|()|var|float32
uop_333 = relay.cosh(var_332.astype('float32')) # shape=()
output = relay.Tuple([uop_333,])
output2 = relay.Tuple([uop_333,])
F = relay.Function([var_332,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_332,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
	relay.transform.DefuseOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_332= np.array(-7.514351, dtype='float32')
module1.set_input('var_332', input_332)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_332, )
res3 = intrp3.evaluate()(input_332, )
res4 = intrp4.evaluate()(input_332, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input('var_332', input_332)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_332, )
res7 = intrp7.evaluate()(input_332, )
res8 = intrp8.evaluate()(input_332, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input('var_332', input_332)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_332, )
res11 = intrp11.evaluate()(input_332, )
res12 = intrp12.evaluate()(input_332, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input('var_332', input_332)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_332, )
res15 = intrp15.evaluate()(input_332, )
res16 = intrp16.evaluate()(input_332, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input('var_332', input_332)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_332, )
res19 = intrp19.evaluate()(input_332, )
res20 = intrp20.evaluate()(input_332, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input('var_332', input_332)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_332, )
res23 = intrp23.evaluate()(input_332, )
res24 = intrp24.evaluate()(input_332, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''47: TVMFuncCall
46: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
45: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
44: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
43: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
42: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
41: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
40: tvm::transform::Pass::operator()(tvm::IRModule) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
36: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
35: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
34: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
33: tvm::transform::Pass::operator()(tvm::IRModule) const
32: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
31: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
30: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
29: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
28: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
27: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
26: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
25: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
24: _ZN3tvm5relay9transform22Devic
23: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
22: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
21: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
20: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
19: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
16: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
15: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
12: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
9: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
8: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
7: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
6: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
5: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
3: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
2: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
1: tvm::relay::tec::PrimFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
0: tvm::relay::tec::ScheduleBuilder::Create(tvm::relay::Function const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)

'''