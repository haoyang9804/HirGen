import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "bool", shape = (7, 15, 2))#candidate|0|(7, 15, 2)|var|bool
var_1 = relay.var("var_1", dtype = "bool", shape = (7, 15, 2))#candidate|1|(7, 15, 2)|var|bool
bop_2 = relay.logical_or(var_0.astype('bool'), relay.reshape(var_1.astype('bool'), relay.shape_of(var_0))) # shape=(7, 15, 2)
uop_5 = relay.acos(bop_2.astype('float32')) # shape=(7, 15, 2)
uop_7 = relay.log2(var_1.astype('float64')) # shape=(7, 15, 2)
uop_9 = relay.log(uop_5.astype('float64')) # shape=(7, 15, 2)
uop_11 = relay.acosh(uop_9.astype('float32')) # shape=(7, 15, 2)
bop_13 = relay.greater_equal(uop_11.astype('bool'), relay.reshape(uop_5.astype('bool'), relay.shape_of(uop_11))) # shape=(7, 15, 2)
const_16 = relay.const([[[1.345623,0.582919],[-7.162076,9.518282],[-4.169413,-3.721625],[8.111607,2.197240],[5.396415,-8.863023],[6.216716,2.222284],[7.376869,2.315763],[-8.347887,-1.935072],[-4.392099,2.991821],[-7.698141,5.641036],[3.336977,1.309856],[4.270071,-7.667913],[7.778400,1.543584],[-4.073244,-7.901672],[8.067899,-5.629325]],[[3.360735,6.167456],[-2.414584,-1.040929],[5.755415,-1.174751],[2.208933,-7.420233],[-9.424764,0.273386],[0.454343,-3.479350],[-7.578898,8.492666],[-2.090377,5.730734],[-8.289034,-1.762355],[0.802500,0.031570],[-8.174288,-8.801246],[6.503944,-6.892508],[2.400415,1.762340],[7.646791,-1.720718],[-9.415616,3.038231]],[[-7.263864,-4.625263],[-5.577012,1.601166],[2.869819,-7.930624],[-0.947971,-9.260154],[9.430810,3.470506],[-5.654954,7.674414],[0.324982,3.012815],[0.041698,-8.261243],[9.508138,-2.335796],[1.265516,-5.569480],[-2.163847,6.320619],[8.752012,-2.974725],[-3.069739,3.955421],[-6.244317,-8.387720],[-6.578945,-0.030346]],[[7.187557,1.654646],[4.976732,-0.181371],[-2.509257,-7.778307],[2.260114,7.343267],[2.442369,-4.233784],[-6.305015,-6.999453],[-6.670929,-0.080007],[6.322200,0.828777],[0.517322,1.063776],[-2.073783,-9.933277],[-5.639534,-9.413004],[-1.731921,-8.535520],[5.869335,9.546449],[-5.626866,3.836454],[4.382198,-1.638201]],[[-0.705156,8.995746],[-6.578241,-5.893477],[-7.108950,8.018207],[3.829975,-8.966887],[-7.765205,0.342368],[3.818568,6.330687],[5.863193,0.748332],[-6.687061,6.202970],[4.417323,-8.296089],[3.350470,-0.106263],[2.362478,0.676875],[1.417577,-0.335588],[-0.519538,-3.333493],[6.106571,-1.964370],[-7.296024,8.792423]],[[9.566935,1.067472],[9.563366,-4.592647],[-5.728154,-6.932232],[9.780614,6.241539],[7.019415,-9.287854],[0.692529,-7.059878],[-9.283069,2.837888],[-4.697626,4.670301],[2.627009,-1.860348],[-0.269790,-9.708707],[0.717586,2.882226],[-6.199105,-3.501180],[-7.088082,7.201187],[8.840481,-0.296244],[-3.360402,-6.851656]],[[-7.850267,-6.464961],[-8.716564,-3.527394],[-0.350660,3.337231],[7.508787,-2.642785],[1.136631,-3.985139],[6.826052,-4.536500],[1.572665,-8.550026],[-8.615080,-5.264286],[-9.879816,9.135395],[6.701847,8.367563],[-1.636293,1.059358],[6.249410,0.158557],[-1.941490,6.713092],[2.286923,-8.120956],[-2.142319,6.312083]]], dtype = "float32")#candidate|16|(7, 15, 2)|const|float32
bop_17 = relay.right_shift(uop_11.astype('int32'), relay.reshape(const_16.astype('int32'), relay.shape_of(uop_11))) # shape=(7, 15, 2)
bop_20 = relay.mod(uop_9.astype('float32'), relay.reshape(const_16.astype('float32'), relay.shape_of(uop_9))) # shape=(7, 15, 2)
uop_23 = relay.acos(bop_20.astype('float64')) # shape=(7, 15, 2)
uop_25 = relay.tan(uop_7.astype('float64')) # shape=(7, 15, 2)
bop_27 = relay.minimum(uop_9.astype('float32'), relay.reshape(bop_13.astype('float32'), relay.shape_of(uop_9))) # shape=(7, 15, 2)
uop_30 = relay.log10(bop_20.astype('float64')) # shape=(7, 15, 2)
bop_32 = relay.minimum(uop_5.astype('uint8'), relay.reshape(var_0.astype('uint8'), relay.shape_of(uop_5))) # shape=(7, 15, 2)
var_35 = relay.var("var_35", dtype = "bool", shape = (7, 15, 2))#candidate|35|(7, 15, 2)|var|bool
bop_36 = relay.less(bop_13.astype('bool'), relay.reshape(var_35.astype('bool'), relay.shape_of(bop_13))) # shape=(7, 15, 2)
uop_39 = relay.exp(bop_17.astype('float64')) # shape=(7, 15, 2)
var_41 = relay.var("var_41", dtype = "float64", shape = (7, 15, 2))#candidate|41|(7, 15, 2)|var|float64
bop_42 = relay.subtract(uop_30.astype('int64'), relay.reshape(var_41.astype('int64'), relay.shape_of(uop_30))) # shape=(7, 15, 2)
bop_45 = relay.logical_or(bop_42.astype('bool'), relay.reshape(uop_11.astype('bool'), relay.shape_of(bop_42))) # shape=(7, 15, 2)
uop_48 = relay.atan(bop_36.astype('float64')) # shape=(7, 15, 2)
var_50 = relay.var("var_50", dtype = "float64", shape = (7, 15, 2))#candidate|50|(7, 15, 2)|var|float64
bop_51 = relay.power(uop_48.astype('float64'), relay.reshape(var_50.astype('float64'), relay.shape_of(uop_48))) # shape=(7, 15, 2)
uop_54 = relay.tan(bop_13.astype('float32')) # shape=(7, 15, 2)
bop_56 = relay.greater_equal(uop_39.astype('bool'), relay.reshape(bop_42.astype('bool'), relay.shape_of(uop_39))) # shape=(7, 15, 2)
bop_59 = relay.bitwise_and(uop_30.astype('int64'), relay.reshape(uop_48.astype('int64'), relay.shape_of(uop_30))) # shape=(7, 15, 2)
bop_62 = relay.bitwise_and(bop_36.astype('int32'), relay.reshape(uop_11.astype('int32'), relay.shape_of(bop_36))) # shape=(7, 15, 2)
uop_65 = relay.sqrt(uop_48.astype('float64')) # shape=(7, 15, 2)
bop_67 = relay.divide(uop_48.astype('float32'), relay.reshape(uop_9.astype('float32'), relay.shape_of(uop_48))) # shape=(7, 15, 2)
bop_70 = relay.divide(uop_54.astype('float32'), relay.reshape(uop_9.astype('float32'), relay.shape_of(uop_54))) # shape=(7, 15, 2)
uop_73 = relay.atan(bop_42.astype('float64')) # shape=(7, 15, 2)
uop_75 = relay.sigmoid(uop_65.astype('float32')) # shape=(7, 15, 2)
uop_77 = relay.log2(uop_75.astype('float64')) # shape=(7, 15, 2)
bop_79 = relay.less(uop_77.astype('bool'), relay.reshape(var_0.astype('bool'), relay.shape_of(uop_77))) # shape=(7, 15, 2)
bop_82 = relay.greater(uop_75.astype('bool'), relay.reshape(bop_2.astype('bool'), relay.shape_of(uop_75))) # shape=(7, 15, 2)
const_85 = relay.const([[[-1,6],[-8,-1],[2,1],[-4,-3],[2,6],[6,-7],[4,3],[-3,9],[7,-3],[-4,5],[4,1],[6,-6],[4,2],[3,2],[-3,7]],[[-9,1],[-2,2],[-9,-1],[7,-10],[-10,9],[10,3],[3,3],[2,4],[-4,9],[9,1],[10,-10],[-8,10],[-9,-1],[2,-2],[-9,3]],[[-5,-3],[1,-7],[3,6],[-2,2],[9,9],[1,-6],[-3,-10],[-5,4],[-7,9],[8,8],[-5,-7],[-3,6],[-1,9],[-4,8],[5,-2]],[[8,-10],[-4,5],[-4,5],[9,6],[-1,3],[9,7],[-9,3],[-3,-4],[-4,8],[-1,9],[-7,-5],[-6,-10],[5,-2],[-5,8],[-6,-8]],[[7,-9],[-6,6],[-3,-5],[3,9],[-2,8],[-2,2],[3,-3],[-10,-7],[-3,-5],[-5,-6],[-9,-1],[2,-2],[10,-2],[2,2],[-1,-4]],[[4,-5],[8,-5],[2,-1],[2,-1],[-3,7],[-3,-6],[2,-2],[-2,3],[6,4],[9,-6],[1,-9],[-1,-5],[3,8],[2,3],[-3,-6]],[[-1,-3],[-8,-10],[-6,-5],[-6,-10],[-7,1],[-1,-8],[-4,-9],[-7,-4],[-6,7],[3,1],[6,8],[2,-8],[7,1],[-8,-2],[-1,1]]], dtype = "int32")#candidate|85|(7, 15, 2)|const|int32
bop_86 = relay.less_equal(bop_62.astype('bool'), relay.reshape(const_85.astype('bool'), relay.shape_of(bop_62))) # shape=(7, 15, 2)
uop_89 = relay.log2(uop_77.astype('float32')) # shape=(7, 15, 2)
uop_91 = relay.cosh(uop_89.astype('float64')) # shape=(7, 15, 2)
bop_93 = relay.less(uop_65.astype('bool'), relay.reshape(bop_56.astype('bool'), relay.shape_of(uop_65))) # shape=(7, 15, 2)
uop_96 = relay.asin(uop_91.astype('float64')) # shape=(7, 15, 2)
bop_98 = relay.right_shift(uop_91.astype('uint16'), relay.reshape(uop_5.astype('uint16'), relay.shape_of(uop_91))) # shape=(7, 15, 2)
var_101 = relay.var("var_101", dtype = "uint16", shape = (7, 15, 2))#candidate|101|(7, 15, 2)|var|uint16
bop_102 = relay.power(bop_98.astype('float32'), relay.reshape(var_101.astype('float32'), relay.shape_of(bop_98))) # shape=(7, 15, 2)
var_105 = relay.var("var_105", dtype = "float64", shape = (7, 15, 2))#candidate|105|(7, 15, 2)|var|float64
bop_106 = relay.left_shift(uop_96.astype('uint8'), relay.reshape(var_105.astype('uint8'), relay.shape_of(uop_96))) # shape=(7, 15, 2)
uop_109 = relay.sin(bop_106.astype('float64')) # shape=(7, 15, 2)
bop_111 = relay.divide(uop_91.astype('float32'), relay.reshape(uop_75.astype('float32'), relay.shape_of(uop_91))) # shape=(7, 15, 2)
bop_114 = relay.greater_equal(bop_106.astype('bool'), relay.reshape(uop_5.astype('bool'), relay.shape_of(bop_106))) # shape=(7, 15, 2)
bop_117 = relay.maximum(uop_109.astype('int8'), relay.reshape(bop_32.astype('int8'), relay.shape_of(uop_109))) # shape=(7, 15, 2)
bop_120 = relay.power(bop_114.astype('float32'), relay.reshape(uop_48.astype('float32'), relay.shape_of(bop_114))) # shape=(7, 15, 2)
var_123 = relay.var("var_123", dtype = "bool", shape = (7, 15, 2))#candidate|123|(7, 15, 2)|var|bool
bop_124 = relay.bitwise_xor(bop_114.astype('uint64'), relay.reshape(var_123.astype('uint64'), relay.shape_of(bop_114))) # shape=(7, 15, 2)
const_127 = relay.const([[[-5.942192,6.100324],[-6.821575,-5.006411],[0.747613,0.603769],[6.172179,-3.584462],[5.111261,2.436304],[9.990829,-4.709028],[5.838223,3.460541],[7.000198,-0.641049],[-0.262729,8.905859],[6.032932,1.536798],[5.422032,8.723541],[-9.661042,-4.086839],[-2.681785,1.624700],[-7.367394,6.921048],[3.712857,-0.739801]],[[2.910091,2.273106],[7.104028,4.095367],[-4.162904,8.477060],[6.580156,1.693824],[-1.517596,2.171121],[5.307658,-1.574404],[-8.825974,-8.255427],[-8.097536,-4.426153],[0.489823,4.232456],[-2.261935,0.269844],[-4.401171,-6.456920],[-4.224774,0.389895],[1.748033,7.074750],[9.990913,8.982468],[5.033293,6.975636]],[[-5.328652,-0.189790],[9.766285,-6.786584],[-6.544201,5.217676],[-2.051962,-7.573655],[9.733220,5.909754],[4.221583,4.350697],[-7.219791,-2.007619],[-6.899524,7.285863],[-8.227818,9.360115],[-3.951030,7.581836],[8.080978,1.132097],[9.670515,-3.447107],[5.524276,5.707060],[-7.037655,1.131334],[4.208283,6.256983]],[[5.948341,9.146746],[-1.348783,-9.597249],[-6.476876,3.337620],[-5.760982,-7.619767],[-6.408608,-2.965755],[-1.659610,-2.650010],[-6.929358,-3.898958],[-0.160752,-6.944756],[-7.090497,6.683111],[-4.511384,2.530437],[0.540421,-2.596140],[4.059888,7.191007],[-5.309282,5.738575],[-7.195834,1.945919],[4.116538,-8.924400]],[[3.059025,-4.865918],[-5.310496,-8.485034],[8.466400,-5.886116],[-1.335290,-9.360034],[4.252823,-9.306563],[0.839546,-6.925720],[1.086719,-9.281046],[4.020900,-7.804625],[8.259557,4.423151],[-8.786924,-1.437847],[4.706697,2.123238],[-8.331761,-7.044237],[2.483631,4.116518],[-2.287868,-5.054810],[7.014807,0.744369]],[[-2.900372,-2.611529],[-9.586684,0.811153],[1.882666,-3.054523],[-5.558702,6.292358],[2.730967,-0.758326],[-7.556191,1.070120],[-2.212933,-1.719785],[-5.335845,-4.902073],[-4.991765,7.848864],[-9.423166,8.161003],[-6.588348,9.311383],[7.443939,5.269832],[-0.932945,-7.302628],[8.221645,3.935113],[3.092372,-5.875722]],[[6.382446,-5.630029],[2.096492,-3.184078],[9.903329,2.297791],[9.434421,-6.727619],[8.020716,2.435514],[-5.281806,-3.262387],[4.291879,6.296774],[-6.091592,1.611772],[-0.148574,9.959397],[2.580199,-4.505554],[0.978044,-1.515782],[-4.010594,-7.788312],[4.188285,5.470505],[7.718708,7.695065],[4.189452,7.802258]]], dtype = "float64")#candidate|127|(7, 15, 2)|const|float64
bop_128 = relay.multiply(uop_109.astype('float64'), relay.reshape(const_127.astype('float64'), relay.shape_of(uop_109))) # shape=(7, 15, 2)
bop_131 = relay.subtract(bop_120.astype('int16'), relay.reshape(uop_91.astype('int16'), relay.shape_of(bop_120))) # shape=(7, 15, 2)
bop_134 = relay.left_shift(bop_124.astype('int32'), relay.reshape(uop_39.astype('int32'), relay.shape_of(bop_124))) # shape=(7, 15, 2)
bop_137 = relay.bitwise_xor(bop_117.astype('int16'), relay.reshape(bop_128.astype('int16'), relay.shape_of(bop_117))) # shape=(7, 15, 2)
const_140 = relay.const([[[2.865031,1.876600],[-9.593943,-1.459040],[-4.370985,-5.943432],[-6.696114,3.689303],[-2.777216,-4.691112],[-0.868171,5.926056],[-1.441900,2.917925],[-7.633427,-9.803681],[8.491534,-6.948819],[0.267291,7.100836],[-0.095731,-5.704050],[8.952570,1.300876],[-0.216996,3.603183],[4.106745,-2.785734],[-9.853075,1.009995]],[[2.974392,-5.229012],[-2.338346,-9.160090],[-1.685386,8.204918],[9.338143,6.628062],[3.726884,-0.532913],[-0.910586,-9.763769],[-1.319756,5.763388],[1.041941,4.365147],[6.280944,4.259389],[6.081931,7.949129],[-6.130266,-8.012759],[6.554217,-2.435500],[0.021755,-4.500681],[-6.035705,6.220882],[1.223586,-4.559309]],[[-7.827619,0.535656],[8.373614,7.030216],[-4.481071,-7.934112],[3.589718,-5.663304],[-8.484936,-4.257572],[8.529767,6.616323],[1.272224,7.526241],[-5.399359,8.933716],[5.019837,-5.443877],[-3.618478,7.147617],[-7.910871,6.927618],[4.374514,-2.212302],[-1.994033,7.854024],[6.274528,-6.591819],[3.389742,-3.345930]],[[1.311181,-8.480387],[-1.010351,4.154825],[-5.535838,-8.567415],[8.058511,8.890812],[1.171675,-2.712129],[-9.001375,-1.716825],[7.166264,-5.060412],[-5.483150,-8.037657],[6.160744,-2.242824],[0.001002,-2.422767],[0.230124,-1.744307],[-2.147256,7.334384],[-3.368482,6.584456],[4.719471,-4.716551],[-2.423588,3.282080]],[[8.412273,-3.596959],[5.741708,3.806300],[9.951483,-6.514079],[-6.794257,2.390373],[-4.949174,-7.225908],[-7.869118,4.359013],[5.429402,-0.423594],[7.364353,-3.303947],[4.724421,3.805901],[-8.056801,6.421338],[-7.631616,-7.670438],[8.052089,7.204286],[-1.811203,-5.449866],[1.361427,-6.225493],[5.845222,1.245606]],[[-9.329196,-3.231295],[-8.664366,-8.671766],[-6.211190,-9.494689],[-0.917014,1.011170],[-2.094556,2.080725],[-7.450477,-3.810322],[-1.743699,3.826969],[7.693173,-1.556574],[-3.615686,-4.993050],[-6.135166,8.828949],[-2.342318,8.244047],[-5.550915,-7.097515],[0.406416,5.878309],[0.969483,6.794488],[-1.644208,-6.452032]],[[8.917622,-2.886565],[2.529402,7.226968],[9.151858,-8.548426],[-8.898191,-7.745783],[-7.880654,-9.932483],[4.799813,5.803917],[7.615959,-7.752587],[5.378022,3.202003],[2.871259,9.021148],[-5.169515,-5.265850],[3.658860,-8.341044],[-1.627407,7.665081],[8.510941,-2.005253],[7.846902,-2.915429],[-3.290349,9.833879]]], dtype = "float32")#candidate|140|(7, 15, 2)|const|float32
bop_141 = relay.right_shift(bop_111.astype('int16'), relay.reshape(const_140.astype('int16'), relay.shape_of(bop_111))) # shape=(7, 15, 2)
uop_144 = relay.sigmoid(uop_89.astype('float32')) # shape=(7, 15, 2)
uop_146 = relay.sigmoid(bop_128.astype('float32')) # shape=(7, 15, 2)
uop_148 = relay.atanh(uop_146.astype('float64')) # shape=(7, 15, 2)
var_150 = relay.var("var_150", dtype = "uint8", shape = (7, 15, 2))#candidate|150|(7, 15, 2)|var|uint8
bop_151 = relay.not_equal(bop_106.astype('bool'), relay.reshape(var_150.astype('bool'), relay.shape_of(bop_106))) # shape=(7, 15, 2)
bop_154 = relay.logical_or(uop_146.astype('bool'), relay.reshape(var_150.astype('bool'), relay.shape_of(uop_146))) # shape=(7, 15, 2)
uop_157 = relay.log(uop_148.astype('float64')) # shape=(7, 15, 2)
bop_159 = relay.floor_mod(uop_157.astype('float32'), relay.reshape(bop_86.astype('float32'), relay.shape_of(uop_157))) # shape=(7, 15, 2)
bop_162 = relay.logical_and(uop_157.astype('bool'), relay.reshape(uop_5.astype('bool'), relay.shape_of(uop_157))) # shape=(7, 15, 2)
uop_165 = relay.atan(bop_159.astype('float64')) # shape=(7, 15, 2)
bop_167 = relay.bitwise_xor(uop_165.astype('uint64'), relay.reshape(bop_56.astype('uint64'), relay.shape_of(uop_165))) # shape=(7, 15, 2)
bop_170 = relay.add(uop_165.astype('uint64'), relay.reshape(bop_62.astype('uint64'), relay.shape_of(uop_165))) # shape=(7, 15, 2)
uop_173 = relay.cos(bop_159.astype('float32')) # shape=(7, 15, 2)
uop_175 = relay.sigmoid(uop_148.astype('float32')) # shape=(7, 15, 2)
bop_177 = relay.bitwise_and(bop_159.astype('uint64'), relay.reshape(bop_17.astype('uint64'), relay.shape_of(bop_159))) # shape=(7, 15, 2)
output = relay.Tuple([uop_23,uop_25,bop_27,bop_45,bop_51,bop_59,bop_67,bop_70,uop_73,bop_79,bop_82,bop_93,bop_102,bop_131,bop_134,bop_137,bop_141,uop_144,bop_151,bop_154,bop_162,bop_167,bop_170,uop_173,uop_175,bop_177,])
output2 = relay.Tuple([uop_23,uop_25,bop_27,bop_45,bop_51,bop_59,bop_67,bop_70,uop_73,bop_79,bop_82,bop_93,bop_102,bop_131,bop_134,bop_137,bop_141,uop_144,bop_151,bop_154,bop_162,bop_167,bop_170,uop_173,uop_175,bop_177,])
func_180 = relay.Function([var_0,var_1,var_35,var_41,var_50,var_101,var_105,var_123,var_150,], output)
mod['func_180'] = func_180
mod = relay.transform.InferType()(mod)
mutated_mod['func_180'] = func_180
mutated_mod = relay.transform.InferType()(mutated_mod)
func_180_call = mutated_mod.get_global_var('func_180')
var_182 = relay.var("var_182", dtype = "bool", shape = (7, 15, 2))#candidate|182|(7, 15, 2)|var|bool
var_183 = relay.var("var_183", dtype = "bool", shape = (7, 15, 2))#candidate|183|(7, 15, 2)|var|bool
var_184 = relay.var("var_184", dtype = "bool", shape = (7, 15, 2))#candidate|184|(7, 15, 2)|var|bool
var_185 = relay.var("var_185", dtype = "float64", shape = (7, 15, 2))#candidate|185|(7, 15, 2)|var|float64
var_186 = relay.var("var_186", dtype = "float64", shape = (7, 15, 2))#candidate|186|(7, 15, 2)|var|float64
var_187 = relay.var("var_187", dtype = "uint16", shape = (7, 15, 2))#candidate|187|(7, 15, 2)|var|uint16
var_188 = relay.var("var_188", dtype = "float64", shape = (7, 15, 2))#candidate|188|(7, 15, 2)|var|float64
var_189 = relay.var("var_189", dtype = "bool", shape = (7, 15, 2))#candidate|189|(7, 15, 2)|var|bool
var_190 = relay.var("var_190", dtype = "uint8", shape = (7, 15, 2))#candidate|190|(7, 15, 2)|var|uint8
call_181 = func_180_call(var_182,var_183,var_184,var_185,var_186,var_187,var_188,var_189,var_190,)
output = call_181
func_191 = relay.Function([var_182,var_183,var_184,var_185,var_186,var_187,var_188,var_189,var_190,], output)
mutated_mod['func_191'] = func_191
mutated_mod = relay.transform.InferType()(mutated_mod)
var_193 = relay.var("var_193", dtype = "int32", shape = (16, 7))#candidate|193|(16, 7)|var|int32
var_194 = relay.var("var_194", dtype = "int32", shape = (16, 7))#candidate|194|(16, 7)|var|int32
bop_195 = relay.minimum(var_193.astype('int32'), relay.reshape(var_194.astype('int32'), relay.shape_of(var_193))) # shape=(16, 7)
bop_198 = relay.add(var_193.astype('int8'), relay.reshape(bop_195.astype('int8'), relay.shape_of(var_193))) # shape=(16, 7)
uop_201 = relay.log(bop_195.astype('float64')) # shape=(16, 7)
uop_203 = relay.tan(uop_201.astype('float32')) # shape=(16, 7)
bop_205 = relay.equal(uop_201.astype('bool'), relay.reshape(var_193.astype('bool'), relay.shape_of(uop_201))) # shape=(16, 7)
uop_208 = relay.tan(bop_205.astype('float32')) # shape=(16, 7)
bop_210 = relay.bitwise_and(uop_208.astype('int16'), relay.reshape(bop_205.astype('int16'), relay.shape_of(uop_208))) # shape=(16, 7)
uop_213 = relay.rsqrt(uop_203.astype('float32')) # shape=(16, 7)
func_180_call = mod.get_global_var('func_180')
func_191_call = mutated_mod.get_global_var('func_191')
const_216 = relay.const([True,False,False,True,True,False,False,True,False,False,False,False,True,False,True,False,True,False,True,False,False,True,True,True,True,False,False,False,False,False,False,True,False,False,False,True,True,True,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,True,False,True,False,True,True,False,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,False,True,True,False,False,False,True,False,True,False,False,False,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,True,True,True,True,True,False,True,True,True,False,True,False,False,False,False,True,True,False,True,True,False,True,True,True,False,False,True,True,False,False,False,True,True,True,False,False,False,True,False,True,True,True,True,False,True,True,True,True,True,False,False,True,True,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,True,False,True,True,True,False,True,True,False,False,False,True,False,False,True,False,True,True], dtype = "bool")#candidate|216|(210,)|const|bool
call_215 = relay.TupleGetItem(func_180_call(relay.reshape(const_216.astype('bool'), [7, 15, 2]), relay.reshape(const_216.astype('bool'), [7, 15, 2]), relay.reshape(const_216.astype('bool'), [7, 15, 2]), relay.reshape(const_216.astype('float64'), [7, 15, 2]), relay.reshape(const_216.astype('float64'), [7, 15, 2]), relay.reshape(const_216.astype('uint16'), [7, 15, 2]), relay.reshape(const_216.astype('float64'), [7, 15, 2]), relay.reshape(const_216.astype('bool'), [7, 15, 2]), relay.reshape(const_216.astype('uint8'), [7, 15, 2]), ), 5)
call_217 = relay.TupleGetItem(func_191_call(relay.reshape(const_216.astype('bool'), [7, 15, 2]), relay.reshape(const_216.astype('bool'), [7, 15, 2]), relay.reshape(const_216.astype('bool'), [7, 15, 2]), relay.reshape(const_216.astype('float64'), [7, 15, 2]), relay.reshape(const_216.astype('float64'), [7, 15, 2]), relay.reshape(const_216.astype('uint16'), [7, 15, 2]), relay.reshape(const_216.astype('float64'), [7, 15, 2]), relay.reshape(const_216.astype('bool'), [7, 15, 2]), relay.reshape(const_216.astype('uint8'), [7, 15, 2]), ), 5)
bop_218 = relay.greater(uop_203.astype('bool'), relay.reshape(bop_198.astype('bool'), relay.shape_of(uop_203))) # shape=(16, 7)
var_221 = relay.var("var_221", dtype = "float64", shape = (16, 7))#candidate|221|(16, 7)|var|float64
bop_222 = relay.less_equal(uop_201.astype('bool'), relay.reshape(var_221.astype('bool'), relay.shape_of(uop_201))) # shape=(16, 7)
const_225 = relay.const([[1.670096,8.952673,1.676144,-9.745650,-0.352191,-9.083884,-5.891448],[-1.450560,-6.466579,2.206735,-4.242955,5.300622,6.498851,-3.545419],[-1.313047,0.223494,-1.215624,4.736863,-8.819618,-5.877274,1.735197],[-4.317299,-5.517969,3.320906,-0.616252,8.017412,-1.463329,-0.774856],[2.519740,-5.719897,-4.667505,6.699228,-5.865374,-5.582463,9.599127],[6.041186,-0.262566,-4.037338,4.535711,0.539988,0.653499,-6.594236],[8.452412,0.560042,-5.915105,-7.836980,3.318586,2.780356,-3.014456],[-5.910482,-8.955087,-7.920412,-5.418636,8.112924,-3.907823,6.439678],[-9.170419,-4.093825,-2.959706,-7.851491,6.644697,-8.267551,4.829461],[-6.482722,1.111126,1.294399,6.834886,-5.947056,-8.196526,7.823102],[-3.964379,-7.564706,-2.421768,-8.132836,-0.353085,2.053966,8.758406],[-6.108932,3.048363,-1.522917,-8.658961,7.166763,-7.294654,3.589824],[2.626876,7.758692,4.651483,-4.698742,-8.770055,3.540852,-9.984771],[-8.395217,-8.473513,-0.072530,-0.201026,-3.455544,-1.375533,-9.179873],[-5.086671,3.921738,-2.768914,4.889084,5.775840,8.533703,5.131547],[-4.636935,-7.709930,7.547355,-1.784910,-5.895659,1.956397,3.616046]], dtype = "float32")#candidate|225|(16, 7)|const|float32
bop_226 = relay.logical_xor(uop_213.astype('uint64'), relay.reshape(const_225.astype('uint64'), relay.shape_of(uop_213))) # shape=(16, 7)
func_180_call = mod.get_global_var('func_180')
func_191_call = mutated_mod.get_global_var('func_191')
call_229 = relay.TupleGetItem(func_180_call(relay.reshape(call_215.astype('bool'), [7, 15, 2]), relay.reshape(const_216.astype('bool'), [7, 15, 2]), relay.reshape(call_215.astype('bool'), [7, 15, 2]), relay.reshape(call_215.astype('float64'), [7, 15, 2]), relay.reshape(const_216.astype('float64'), [7, 15, 2]), relay.reshape(const_216.astype('uint16'), [7, 15, 2]), relay.reshape(const_216.astype('float64'), [7, 15, 2]), relay.reshape(call_215.astype('bool'), [7, 15, 2]), relay.reshape(call_215.astype('uint8'), [7, 15, 2]), ), 14)
call_230 = relay.TupleGetItem(func_191_call(relay.reshape(call_215.astype('bool'), [7, 15, 2]), relay.reshape(const_216.astype('bool'), [7, 15, 2]), relay.reshape(call_215.astype('bool'), [7, 15, 2]), relay.reshape(call_215.astype('float64'), [7, 15, 2]), relay.reshape(const_216.astype('float64'), [7, 15, 2]), relay.reshape(const_216.astype('uint16'), [7, 15, 2]), relay.reshape(const_216.astype('float64'), [7, 15, 2]), relay.reshape(call_215.astype('bool'), [7, 15, 2]), relay.reshape(call_215.astype('uint8'), [7, 15, 2]), ), 14)
uop_231 = relay.atanh(uop_203.astype('float32')) # shape=(16, 7)
bop_233 = relay.less(uop_213.astype('bool'), relay.reshape(var_193.astype('bool'), relay.shape_of(uop_213))) # shape=(16, 7)
uop_236 = relay.cos(bop_233.astype('float32')) # shape=(16, 7)
bop_238 = relay.bitwise_xor(uop_213.astype('uint8'), relay.reshape(const_225.astype('uint8'), relay.shape_of(uop_213))) # shape=(16, 7)
bop_241 = relay.maximum(uop_203.astype('uint16'), relay.reshape(bop_205.astype('uint16'), relay.shape_of(uop_203))) # shape=(16, 7)
func_180_call = mod.get_global_var('func_180')
func_191_call = mutated_mod.get_global_var('func_191')
call_244 = relay.TupleGetItem(func_180_call(relay.reshape(const_216.astype('bool'), [7, 15, 2]), relay.reshape(call_215.astype('bool'), [7, 15, 2]), relay.reshape(call_229.astype('bool'), [7, 15, 2]), relay.reshape(call_229.astype('float64'), [7, 15, 2]), relay.reshape(call_229.astype('float64'), [7, 15, 2]), relay.reshape(const_216.astype('uint16'), [7, 15, 2]), relay.reshape(call_229.astype('float64'), [7, 15, 2]), relay.reshape(call_215.astype('bool'), [7, 15, 2]), relay.reshape(const_216.astype('uint8'), [7, 15, 2]), ), 10)
call_245 = relay.TupleGetItem(func_191_call(relay.reshape(const_216.astype('bool'), [7, 15, 2]), relay.reshape(call_215.astype('bool'), [7, 15, 2]), relay.reshape(call_229.astype('bool'), [7, 15, 2]), relay.reshape(call_229.astype('float64'), [7, 15, 2]), relay.reshape(call_229.astype('float64'), [7, 15, 2]), relay.reshape(const_216.astype('uint16'), [7, 15, 2]), relay.reshape(call_229.astype('float64'), [7, 15, 2]), relay.reshape(call_215.astype('bool'), [7, 15, 2]), relay.reshape(const_216.astype('uint8'), [7, 15, 2]), ), 10)
bop_246 = relay.less(uop_236.astype('bool'), relay.reshape(bop_198.astype('bool'), relay.shape_of(uop_236))) # shape=(16, 7)
func_180_call = mod.get_global_var('func_180')
func_191_call = mutated_mod.get_global_var('func_191')
call_249 = relay.TupleGetItem(func_180_call(relay.reshape(call_244.astype('bool'), [7, 15, 2]), relay.reshape(call_215.astype('bool'), [7, 15, 2]), relay.reshape(call_244.astype('bool'), [7, 15, 2]), relay.reshape(const_216.astype('float64'), [7, 15, 2]), relay.reshape(call_215.astype('float64'), [7, 15, 2]), relay.reshape(call_215.astype('uint16'), [7, 15, 2]), relay.reshape(call_244.astype('float64'), [7, 15, 2]), relay.reshape(call_215.astype('bool'), [7, 15, 2]), relay.reshape(call_244.astype('uint8'), [7, 15, 2]), ), 12)
call_250 = relay.TupleGetItem(func_191_call(relay.reshape(call_244.astype('bool'), [7, 15, 2]), relay.reshape(call_215.astype('bool'), [7, 15, 2]), relay.reshape(call_244.astype('bool'), [7, 15, 2]), relay.reshape(const_216.astype('float64'), [7, 15, 2]), relay.reshape(call_215.astype('float64'), [7, 15, 2]), relay.reshape(call_215.astype('uint16'), [7, 15, 2]), relay.reshape(call_244.astype('float64'), [7, 15, 2]), relay.reshape(call_215.astype('bool'), [7, 15, 2]), relay.reshape(call_244.astype('uint8'), [7, 15, 2]), ), 12)
bop_251 = relay.bitwise_or(uop_236.astype('int16'), relay.reshape(bop_226.astype('int16'), relay.shape_of(uop_236))) # shape=(16, 7)
uop_254 = relay.log(bop_218.astype('float32')) # shape=(16, 7)
var_256 = relay.var("var_256", dtype = "float32", shape = (16, 7))#candidate|256|(16, 7)|var|float32
bop_257 = relay.greater(uop_213.astype('bool'), relay.reshape(var_256.astype('bool'), relay.shape_of(uop_213))) # shape=(16, 7)
bop_260 = relay.mod(bop_257.astype('float64'), relay.reshape(var_221.astype('float64'), relay.shape_of(bop_257))) # shape=(16, 7)
const_263 = relay.const([[9.982664,-2.819829,-8.437609,7.355998,-9.450248,4.325982,9.984575],[-7.308095,7.718451,-6.121173,8.543903,6.239999,-8.473817,-1.679421],[7.545766,9.120939,-8.595636,-3.354208,-0.374473,-4.353683,-4.567952],[0.077937,-8.265731,7.445164,-2.044650,2.863911,9.316337,-6.272988],[6.099128,-2.996356,-7.604572,0.903329,3.908565,2.822149,4.839223],[5.433529,6.620303,-2.364250,-4.538821,0.366509,8.905871,-3.940681],[3.842828,-3.605998,0.583463,-4.864740,-0.414357,-4.642734,5.755680],[4.903618,8.425240,-7.354335,0.454774,-9.531771,-9.442464,-9.613230],[-5.907101,-5.267968,-0.198691,-4.779187,6.914997,0.898113,8.807143],[-4.761798,-7.442728,0.932714,-5.286879,-7.321141,-8.612641,3.609452],[9.872162,7.514508,-4.542576,1.659862,-3.527396,-4.053458,-5.379947],[-6.885462,8.211276,-7.295234,-0.057044,6.072921,2.924454,7.986570],[-6.306065,-9.182748,-1.642917,9.832999,3.902908,4.711421,6.375356],[-0.838382,-5.399369,0.624811,0.610649,6.001520,7.473881,-2.840633],[-5.406143,8.586995,-6.428349,-7.708564,0.147152,8.580354,1.053753],[-8.400501,-0.873005,-8.894237,4.939353,-4.992890,-1.760642,5.735759]], dtype = "float32")#candidate|263|(16, 7)|const|float32
bop_264 = relay.bitwise_or(uop_254.astype('int64'), relay.reshape(const_263.astype('int64'), relay.shape_of(uop_254))) # shape=(16, 7)
uop_267 = relay.erf(bop_241.astype('float32')) # shape=(16, 7)
uop_269 = relay.log10(bop_246.astype('float64')) # shape=(16, 7)
bop_271 = relay.mod(uop_269.astype('float32'), relay.reshape(var_194.astype('float32'), relay.shape_of(uop_269))) # shape=(16, 7)
uop_274 = relay.sqrt(bop_257.astype('float64')) # shape=(16, 7)
uop_276 = relay.cosh(uop_269.astype('float64')) # shape=(16, 7)
uop_278 = relay.log2(uop_269.astype('float32')) # shape=(16, 7)
output = relay.Tuple([bop_210,call_215,const_216,bop_222,call_229,uop_231,bop_238,call_244,call_249,bop_251,bop_260,bop_264,uop_267,bop_271,uop_274,uop_276,uop_278,])
output2 = relay.Tuple([bop_210,call_217,const_216,bop_222,call_230,uop_231,bop_238,call_245,call_250,bop_251,bop_260,bop_264,uop_267,bop_271,uop_274,uop_276,uop_278,])
func_280 = relay.Function([var_193,var_194,var_221,var_256,], output)
mod['func_280'] = func_280
mod = relay.transform.InferType()(mod)
mutated_mod['func_280'] = func_280
mutated_mod = relay.transform.InferType()(mutated_mod)
func_280_call = mutated_mod.get_global_var('func_280')
var_282 = relay.var("var_282", dtype = "int32", shape = (16, 7))#candidate|282|(16, 7)|var|int32
var_283 = relay.var("var_283", dtype = "int32", shape = (16, 7))#candidate|283|(16, 7)|var|int32
var_284 = relay.var("var_284", dtype = "float64", shape = (16, 7))#candidate|284|(16, 7)|var|float64
var_285 = relay.var("var_285", dtype = "float32", shape = (16, 7))#candidate|285|(16, 7)|var|float32
call_281 = func_280_call(var_282,var_283,var_284,var_285,)
output = call_281
func_286 = relay.Function([var_282,var_283,var_284,var_285,], output)
mutated_mod['func_286'] = func_286
mutated_mod = relay.transform.InferType()(mutated_mod)
var_288 = relay.var("var_288", dtype = "uint8", shape = (11, 7, 13))#candidate|288|(11, 7, 13)|var|uint8
var_289 = relay.var("var_289", dtype = "uint8", shape = (11, 7, 13))#candidate|289|(11, 7, 13)|var|uint8
bop_290 = relay.less(var_288.astype('bool'), relay.reshape(var_289.astype('bool'), relay.shape_of(var_288))) # shape=(11, 7, 13)
bop_293 = relay.subtract(var_288.astype('uint64'), relay.reshape(bop_290.astype('uint64'), relay.shape_of(var_288))) # shape=(11, 7, 13)
bop_296 = relay.bitwise_or(var_288.astype('uint64'), relay.reshape(var_289.astype('uint64'), relay.shape_of(var_288))) # shape=(11, 7, 13)
bop_299 = relay.not_equal(var_288.astype('bool'), relay.reshape(var_289.astype('bool'), relay.shape_of(var_288))) # shape=(11, 7, 13)
output = relay.Tuple([bop_293,bop_296,bop_299,])
output2 = relay.Tuple([bop_293,bop_296,bop_299,])
func_302 = relay.Function([var_288,var_289,], output)
mod['func_302'] = func_302
mod = relay.transform.InferType()(mod)
var_303 = relay.var("var_303", dtype = "uint8", shape = (11, 7, 13))#candidate|303|(11, 7, 13)|var|uint8
var_304 = relay.var("var_304", dtype = "uint8", shape = (11, 7, 13))#candidate|304|(11, 7, 13)|var|uint8
output = func_302(var_303,var_304,)
func_305 = relay.Function([var_303,var_304,], output)
mutated_mod['func_305'] = func_305
mutated_mod = relay.transform.InferType()(mutated_mod)
var_307 = relay.var("var_307", dtype = "float64", shape = ())#candidate|307|()|var|float64
uop_308 = relay.acos(var_307.astype('float64')) # shape=()
const_310 = relay.const([[8.044115,3.711102,-4.609266,-6.379268,-1.828254,9.319751,-3.181600,-6.909384,-9.007233,1.338289,-2.766891,8.441390,-3.785348,-7.024841],[-0.924310,6.858104,9.352986,5.987977,-4.044900,-3.345953,6.821808,-4.778612,6.868353,0.846678,6.596345,3.363707,8.441466,8.873573],[9.863347,-9.054137,7.924028,-4.153316,-8.715441,3.920322,0.579875,3.244491,9.500504,5.073813,3.100426,8.219731,1.579259,-0.802426],[9.717718,-3.081277,9.386775,-9.976081,-9.538692,2.066987,-9.367938,-3.040056,5.821357,-7.288897,1.782268,5.707018,-3.072258,8.521662],[1.134152,-3.695073,4.655064,-8.216879,0.251649,-8.621161,4.866620,-8.079435,-1.122138,9.832537,7.861996,-5.071000,5.656856,9.784158],[-9.979067,5.358789,-4.593185,-7.910584,5.393180,-2.049421,0.729875,-2.891579,-8.367339,-8.865068,0.636859,-1.774578,4.330692,-1.756987],[0.597413,9.284252,-2.320184,8.177939,-2.680901,3.352500,-0.266014,8.070752,-9.982208,-6.905125,-2.182806,1.844543,5.414661,-5.951733]], dtype = "float64")#candidate|310|(7, 14)|const|float64
bop_311 = relay.logical_or(var_307.astype('bool'), const_310.astype('bool')) # shape=(7, 14)
bop_314 = relay.equal(var_307.astype('bool'), const_310.astype('bool')) # shape=(7, 14)
var_317 = relay.var("var_317", dtype = "float64", shape = (14, 15))#candidate|317|(14, 15)|var|float64
bop_318 = relay.bitwise_and(uop_308.astype('uint64'), var_317.astype('uint64')) # shape=(14, 15)
output = relay.Tuple([bop_311,bop_314,bop_318,])
output2 = relay.Tuple([bop_311,bop_314,bop_318,])
F = relay.Function([var_307,var_317,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_307,var_317,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_307= np.array(3.213920, dtype='float64')
module1.set_input('var_307', input_307)
input_317= np.array([[-2.767244,-8.095244,-1.900459,1.636493,-7.148179,5.177686,5.721985,9.818856,2.666523,6.416260,2.445901,3.021071,-3.125926,5.686983,6.460301],[-4.760768,-3.308513,-4.579471,-9.052573,-4.038393,6.918680,-0.374281,1.682233,-2.662178,2.755575,-4.102905,0.462233,8.914412,7.805691,9.834143],[-3.099220,-8.229720,-6.759570,4.485621,-8.931269,-8.332219,2.716799,4.537784,-9.098947,1.778694,5.775831,2.085770,6.924497,-1.381710,4.812695],[-1.725880,9.516483,-5.530839,2.716256,5.018508,7.138422,-1.734498,-4.720110,-6.365182,5.689484,-5.771505,8.133735,7.210829,-4.577005,8.091509],[3.289646,5.648391,-4.336359,-8.961937,0.183524,1.392587,8.227426,-1.057310,8.698893,8.770978,-8.848955,9.974370,7.874935,4.860852,8.510372],[4.876921,-3.768640,7.826135,-9.046992,-5.198969,3.938660,-7.814544,6.635635,-1.330644,4.101181,8.008382,2.176733,4.779616,2.660122,3.656308],[1.121923,0.260225,9.268878,-8.455641,6.339885,-9.663025,7.153376,7.279006,8.065634,0.936687,5.147535,-0.746618,-3.448866,3.209092,-1.296817],[-2.933861,6.125246,4.843968,-4.032596,-1.536596,9.870431,0.194586,-2.757337,9.884787,-4.792894,-4.126194,-4.141705,1.056361,1.633253,-1.805919],[7.313753,3.938465,6.845511,7.279674,8.864159,0.752696,-3.527265,7.552773,6.888188,-4.838032,0.199665,-9.846527,-2.092728,-3.352505,-5.066622],[8.165054,3.966378,1.056355,-8.793127,5.412264,-2.371117,-8.866137,7.656392,0.475002,-4.128869,-9.881850,8.307322,3.115341,-4.926656,1.874109],[4.931801,-6.462054,3.804232,4.239319,2.093741,2.449030,0.658851,-1.371088,7.708332,9.207372,-3.212283,-9.172726,-0.907756,3.301742,4.043630],[-0.242021,0.476278,-5.392916,-3.102798,-7.847193,-1.466959,3.399467,7.192338,-9.667121,-6.053585,5.070273,2.293841,-8.461466,2.686476,7.863449],[-2.118270,3.626785,-4.005757,-2.140111,3.111523,-2.928397,4.223436,8.165838,-5.130091,0.895855,-4.705731,9.547148,-9.116544,9.668645,6.678536],[6.246329,-7.323889,6.223268,-2.453853,9.193630,8.002834,5.426850,-2.144924,2.070355,-9.874957,5.481429,0.388535,-8.175939,-8.110552,-3.199521]], dtype='float64')
module1.set_input('var_317', input_317)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_307, input_317, )
res3 = intrp3.evaluate()(input_307, input_317, )
res4 = intrp4.evaluate()(input_307, input_317, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
module5.set_input('var_307', input_307)
module5.set_input('var_317', input_317)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_307, input_317, )
res7 = intrp7.evaluate()(input_307, input_317, )
res8 = intrp8.evaluate()(input_307, input_317, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
module9.set_input('var_307', input_307)
module9.set_input('var_317', input_317)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_307, input_317, )
res11 = intrp11.evaluate()(input_307, input_317, )
res12 = intrp12.evaluate()(input_307, input_317, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
module13.set_input('var_307', input_307)
module13.set_input('var_317', input_317)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_307, input_317, )
res15 = intrp15.evaluate()(input_307, input_317, )
res16 = intrp16.evaluate()(input_307, input_317, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
module17.set_input('var_307', input_307)
module17.set_input('var_317', input_317)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_307, input_317, )
res19 = intrp19.evaluate()(input_307, input_317, )
res20 = intrp20.evaluate()(input_307, input_317, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
module21.set_input('var_307', input_307)
module21.set_input('var_317', input_317)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_307, input_317, )
res23 = intrp23.evaluate()(input_307, input_317, )
res24 = intrp24.evaluate()(input_307, input_317, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()

'''0, 9223372036854775808,                   0,
0,                   0,                   0,...

'''