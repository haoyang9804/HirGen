import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "int64", shape = (5,))#candidate|0|(5,)|var|int64
var_1 = relay.var("var_1", dtype = "int64", shape = (5,))#candidate|1|(5,)|var|int64
bop_2 = relay.right_shift(var_0.astype('int64'), relay.reshape(var_1.astype('int64'), relay.shape_of(var_0))) # shape=(5,)
uop_5 = relay.asin(bop_2.astype('float32')) # shape=(5,)
uop_7 = relay.cos(uop_5.astype('float64')) # shape=(5,)
bop_9 = relay.less_equal(uop_7.astype('bool'), relay.reshape(bop_2.astype('bool'), relay.shape_of(uop_7))) # shape=(5,)
uop_12 = relay.log2(bop_9.astype('float32')) # shape=(5,)
bop_14 = relay.bitwise_xor(var_1.astype('uint8'), relay.reshape(bop_2.astype('uint8'), relay.shape_of(var_1))) # shape=(5,)
uop_17 = relay.atanh(bop_14.astype('float64')) # shape=(5,)
var_19 = relay.var("var_19", dtype = "float32", shape = (5,))#candidate|19|(5,)|var|float32
bop_20 = relay.less(uop_12.astype('bool'), relay.reshape(var_19.astype('bool'), relay.shape_of(uop_12))) # shape=(5,)
bop_23 = relay.greater(bop_9.astype('bool'), relay.reshape(bop_14.astype('bool'), relay.shape_of(bop_9))) # shape=(5,)
uop_26 = relay.sqrt(uop_12.astype('float64')) # shape=(5,)
uop_28 = relay.atan(uop_26.astype('float32')) # shape=(5,)
uop_30 = relay.acos(uop_26.astype('float32')) # shape=(5,)
bop_32 = relay.less(uop_30.astype('bool'), relay.reshape(uop_26.astype('bool'), relay.shape_of(uop_30))) # shape=(5,)
bop_35 = relay.greater(bop_32.astype('bool'), relay.reshape(uop_28.astype('bool'), relay.shape_of(bop_32))) # shape=(5,)
uop_38 = relay.log(bop_32.astype('float32')) # shape=(5,)
uop_40 = relay.tan(uop_38.astype('float32')) # shape=(5,)
bop_42 = relay.logical_xor(uop_38.astype('int64'), relay.reshape(uop_28.astype('int64'), relay.shape_of(uop_38))) # shape=(5,)
uop_45 = relay.log10(uop_40.astype('float64')) # shape=(5,)
uop_47 = relay.sqrt(uop_40.astype('float64')) # shape=(5,)
bop_49 = relay.logical_xor(uop_45.astype('uint64'), relay.reshape(bop_42.astype('uint64'), relay.shape_of(uop_45))) # shape=(5,)
uop_52 = relay.log(bop_49.astype('float64')) # shape=(5,)
uop_54 = relay.exp(uop_45.astype('float64')) # shape=(5,)
bop_56 = relay.floor_divide(uop_54.astype('float32'), relay.reshape(uop_7.astype('float32'), relay.shape_of(uop_54))) # shape=(5,)
bop_59 = relay.greater_equal(uop_26.astype('bool'), relay.reshape(uop_5.astype('bool'), relay.shape_of(uop_26))) # shape=(5,)
uop_62 = relay.sigmoid(uop_28.astype('float32')) # shape=(5,)
uop_64 = relay.asinh(uop_54.astype('float32')) # shape=(5,)
bop_66 = relay.logical_xor(bop_49.astype('uint16'), relay.reshape(bop_35.astype('uint16'), relay.shape_of(bop_49))) # shape=(5,)
uop_69 = relay.cosh(uop_52.astype('float32')) # shape=(5,)
bop_71 = relay.bitwise_and(uop_45.astype('uint32'), relay.reshape(bop_9.astype('uint32'), relay.shape_of(uop_45))) # shape=(5,)
uop_74 = relay.cos(uop_69.astype('float32')) # shape=(5,)
bop_76 = relay.logical_or(uop_74.astype('bool'), relay.reshape(uop_62.astype('bool'), relay.shape_of(uop_74))) # shape=(5,)
bop_79 = relay.less_equal(uop_45.astype('bool'), relay.reshape(uop_74.astype('bool'), relay.shape_of(uop_45))) # shape=(5,)
uop_82 = relay.atan(uop_74.astype('float64')) # shape=(5,)
bop_84 = relay.equal(bop_76.astype('bool'), relay.reshape(bop_66.astype('bool'), relay.shape_of(bop_76))) # shape=(5,)
output = relay.Tuple([uop_17,bop_20,bop_23,uop_47,bop_56,bop_59,uop_64,bop_71,bop_79,uop_82,bop_84,])
output2 = relay.Tuple([uop_17,bop_20,bop_23,uop_47,bop_56,bop_59,uop_64,bop_71,bop_79,uop_82,bop_84,])
func_87 = relay.Function([var_0,var_1,var_19,], output)
mod['func_87'] = func_87
mod = relay.transform.InferType()(mod)
mutated_mod['func_87'] = func_87
mutated_mod = relay.transform.InferType()(mutated_mod)
func_87_call = mutated_mod.get_global_var('func_87')
var_89 = relay.var("var_89", dtype = "int64", shape = (5,))#candidate|89|(5,)|var|int64
var_90 = relay.var("var_90", dtype = "int64", shape = (5,))#candidate|90|(5,)|var|int64
var_91 = relay.var("var_91", dtype = "float32", shape = (5,))#candidate|91|(5,)|var|float32
call_88 = func_87_call(var_89,var_90,var_91,)
output = call_88
func_92 = relay.Function([var_89,var_90,var_91,], output)
mutated_mod['func_92'] = func_92
mutated_mod = relay.transform.InferType()(mutated_mod)
var_94 = relay.var("var_94", dtype = "int64", shape = (8, 11, 7))#candidate|94|(8, 11, 7)|var|int64
var_95 = relay.var("var_95", dtype = "int64", shape = (8, 11, 7))#candidate|95|(8, 11, 7)|var|int64
bop_96 = relay.logical_xor(var_94.astype('int64'), relay.reshape(var_95.astype('int64'), relay.shape_of(var_94))) # shape=(8, 11, 7)
bop_99 = relay.divide(bop_96.astype('float64'), relay.reshape(var_95.astype('float64'), relay.shape_of(bop_96))) # shape=(8, 11, 7)
uop_102 = relay.sqrt(bop_96.astype('float32')) # shape=(8, 11, 7)
uop_104 = relay.log(uop_102.astype('float32')) # shape=(8, 11, 7)
bop_106 = relay.less_equal(uop_104.astype('bool'), relay.reshape(uop_102.astype('bool'), relay.shape_of(uop_104))) # shape=(8, 11, 7)
bop_109 = relay.bitwise_or(var_95.astype('int16'), relay.reshape(bop_96.astype('int16'), relay.shape_of(var_95))) # shape=(8, 11, 7)
bop_112 = relay.left_shift(uop_104.astype('int32'), relay.reshape(var_94.astype('int32'), relay.shape_of(uop_104))) # shape=(8, 11, 7)
bop_115 = relay.minimum(uop_104.astype('int64'), relay.reshape(var_94.astype('int64'), relay.shape_of(uop_104))) # shape=(8, 11, 7)
var_118 = relay.var("var_118", dtype = "bool", shape = (8, 11, 7))#candidate|118|(8, 11, 7)|var|bool
bop_119 = relay.left_shift(bop_106.astype('uint32'), relay.reshape(var_118.astype('uint32'), relay.shape_of(bop_106))) # shape=(8, 11, 7)
uop_122 = relay.asinh(uop_102.astype('float64')) # shape=(8, 11, 7)
bop_124 = relay.divide(uop_122.astype('float32'), relay.reshape(bop_106.astype('float32'), relay.shape_of(uop_122))) # shape=(8, 11, 7)
uop_127 = relay.cos(uop_122.astype('float64')) # shape=(8, 11, 7)
uop_129 = relay.asin(uop_102.astype('float32')) # shape=(8, 11, 7)
var_131 = relay.var("var_131", dtype = "int32", shape = (8, 11, 7))#candidate|131|(8, 11, 7)|var|int32
bop_132 = relay.divide(bop_112.astype('float64'), relay.reshape(var_131.astype('float64'), relay.shape_of(bop_112))) # shape=(8, 11, 7)
var_135 = relay.var("var_135", dtype = "float32", shape = (8, 11, 7))#candidate|135|(8, 11, 7)|var|float32
bop_136 = relay.bitwise_and(uop_102.astype('int8'), relay.reshape(var_135.astype('int8'), relay.shape_of(uop_102))) # shape=(8, 11, 7)
bop_139 = relay.bitwise_and(uop_127.astype('int16'), relay.reshape(bop_119.astype('int16'), relay.shape_of(uop_127))) # shape=(8, 11, 7)
bop_142 = relay.multiply(bop_139.astype('float32'), relay.reshape(var_131.astype('float32'), relay.shape_of(bop_139))) # shape=(8, 11, 7)
uop_145 = relay.sinh(bop_115.astype('float64')) # shape=(8, 11, 7)
uop_147 = relay.tan(uop_102.astype('float64')) # shape=(8, 11, 7)
uop_149 = relay.sinh(uop_127.astype('float32')) # shape=(8, 11, 7)
var_151 = relay.var("var_151", dtype = "float64", shape = (8, 11, 7))#candidate|151|(8, 11, 7)|var|float64
bop_152 = relay.power(uop_127.astype('float32'), relay.reshape(var_151.astype('float32'), relay.shape_of(uop_127))) # shape=(8, 11, 7)
const_155 = relay.const([[[-8.479547,6.824408,-0.529485,-5.621133,1.451645,7.044085,4.635580],[-5.197097,5.005202,-7.303515,6.166551,2.564451,7.013462,-6.046980],[-4.634079,7.541404,-3.869149,0.661859,-0.601588,7.724273,-6.495725],[-1.285466,3.315734,-5.985088,1.887009,5.046027,-7.936676,-5.096434],[0.550971,7.793152,-9.549578,-8.383932,4.269727,2.761669,4.331667],[-6.528295,-6.121464,-5.437834,5.166131,-0.615140,4.293970,6.817604],[-9.840636,9.903425,-4.569264,-4.554994,-8.914933,-6.167956,-2.648121],[7.688743,-3.359339,-8.947798,-1.713270,-3.361997,3.047314,-1.598078],[5.802036,2.363236,2.395450,9.609370,9.546751,9.140621,3.134242],[6.769875,2.607012,6.124232,-8.100260,-7.661222,-5.821423,-9.126197],[6.018609,-6.276254,-0.275492,2.592248,0.053338,-6.973489,-0.301521]],[[-5.360247,1.352024,0.221339,-1.222281,-4.575565,-1.003731,1.308883],[-4.856485,7.893225,0.316965,-6.607855,7.949635,0.122174,-8.817793],[2.957995,5.702077,-9.123491,5.547385,-0.763181,1.873799,7.404625],[1.232359,-5.150849,-8.993356,-6.079054,-8.378589,-5.505184,-3.065302],[-6.154383,2.515414,9.405937,2.739757,6.192947,6.897408,-1.021651],[-2.332763,5.244087,-4.369285,5.567321,9.790778,-8.795777,-0.754259],[7.238667,9.751909,-1.763021,4.558439,2.151726,8.159209,8.482777],[-3.662694,2.100222,9.686269,0.871017,7.122051,0.397505,-7.626768],[-4.224627,-0.199838,9.630355,5.055170,-0.821847,9.095398,5.141653],[-4.147576,9.423872,-5.530703,0.540078,8.311066,7.230888,-0.255118],[7.714684,5.094276,4.438596,7.305238,3.127179,-3.337998,3.353602]],[[7.664080,7.085424,-1.686205,8.742709,7.419797,-3.353540,4.069486],[8.406836,-5.235674,-3.730594,-3.769726,3.041756,-7.011001,-8.542172],[-2.293815,-4.452722,-8.805182,1.433073,-1.044917,9.973889,-7.852612],[2.781856,-5.087000,1.345730,6.242227,-7.809794,3.218899,-6.177370],[-1.009139,9.589122,-2.751896,-1.420598,8.877070,5.148092,-5.107596],[5.241401,9.547957,-6.267096,-7.058217,-8.878248,6.863439,3.632279],[5.063650,-7.576013,5.972142,-6.733015,4.512507,-6.449640,0.482228],[4.292926,6.918122,-4.881117,2.012616,-1.070986,-4.478167,0.919557],[3.889036,-8.771880,-2.795406,-4.152255,-3.416192,-7.305660,0.958835],[-4.468200,-0.324527,0.181446,8.478329,-6.804096,-4.371589,-8.326372],[-0.465332,6.038754,-7.598159,-1.224659,-1.754456,-8.778723,6.321522]],[[2.761074,-8.238502,4.740056,0.119041,-7.684716,-8.412820,6.299516],[3.235996,5.540746,3.166085,1.238145,8.893658,2.237646,-4.545570],[-7.445790,-2.670837,-3.399139,-4.867435,8.623472,-2.019525,-9.674605],[5.977780,-7.543933,6.620962,-4.780261,-8.445871,-4.932030,5.764765],[4.462439,-2.904540,1.386215,6.294341,6.598792,-8.202090,0.362852],[-7.026669,2.304624,5.585755,-0.029679,-5.431548,-2.447429,-6.959629],[-7.332603,-8.700259,3.794762,8.588857,8.094248,-0.596233,-4.025521],[9.926912,-3.132927,3.280443,5.804886,0.701306,7.672811,-2.288587],[-5.696912,2.841584,-8.034346,-6.429240,-8.098970,6.811155,2.072906],[-0.294985,-8.637627,4.572754,6.492428,-9.454227,-9.487599,-1.941052],[4.273765,8.356307,5.847466,-1.839642,-5.093860,8.348900,5.918241]],[[-5.931940,-9.251636,-8.052828,-7.055418,4.615608,7.192663,1.667627],[9.122044,8.452266,-7.500914,-7.711709,9.569900,-0.552966,-2.519937],[-6.952750,-5.425758,-8.423707,4.613661,2.250330,-7.595340,9.563394],[-3.990110,0.687670,-2.489488,7.433367,0.399560,-2.851265,-8.504634],[-3.289582,-4.626832,-1.280628,9.577891,-0.104249,-6.817485,2.976675],[-6.800374,-0.813069,8.799680,5.739551,-5.620041,-7.353093,-8.905324],[9.122393,3.623332,0.277944,-3.438292,-6.677538,-5.355207,5.012492],[-7.323471,-4.252962,8.641009,-2.319514,-9.515067,2.383746,-0.225056],[8.709412,-3.140462,8.330081,-2.312124,-6.039430,9.076116,5.987645],[4.311497,-0.880075,8.194008,-2.670102,6.267270,6.690125,-9.080251],[-4.265464,-5.391617,-7.457918,-3.373643,8.314517,-3.352865,-6.006190]],[[-4.512857,-1.302119,-5.908282,-8.390046,5.022334,-9.797067,3.033943],[-1.402413,-9.666142,-8.406158,-2.756375,-9.012484,-7.134274,-6.274746],[1.571024,-8.716710,-6.759803,6.964526,3.946966,-8.700069,-5.048094],[6.198191,-2.756773,-8.903977,7.708981,2.977927,4.535268,-4.193361],[2.435526,-3.673120,1.655766,3.599461,8.809659,-7.083499,-2.072378],[7.844179,-2.739419,-6.334038,2.747476,0.233384,4.918544,-8.589465],[-1.650208,-1.228395,6.720518,-8.788782,-2.020538,-6.789343,-2.591860],[-1.530316,0.636180,-1.117599,5.724748,-0.436299,6.341303,9.308872],[6.431249,4.848663,-7.291166,9.010559,-2.025980,6.581179,0.598895],[5.423486,-8.488034,-3.156039,9.963231,1.523129,4.995960,8.087841],[-0.964328,1.929252,2.665397,8.024048,5.302423,8.731235,8.881964]],[[-2.309097,2.223302,-3.725477,8.565737,9.086720,3.886281,7.086049],[4.209286,3.258967,0.084553,5.423950,7.155758,2.324564,3.709381],[4.449157,1.666677,-9.471264,6.403841,-1.859312,8.368191,1.595204],[9.435950,-4.973900,-6.923609,-0.438014,-1.043803,-2.814834,-4.330067],[-3.446764,-1.041374,-8.429792,5.915702,-2.615998,-9.979451,-2.450893],[4.344505,-1.500028,-1.256557,0.530865,2.690285,5.779301,8.051102],[2.539521,3.174446,9.222571,7.767591,5.574210,-2.920925,5.786402],[-7.510662,2.497812,-4.121082,-7.962274,-9.842405,9.890245,8.504163],[7.812070,-2.134005,9.465717,7.476101,6.091499,-0.988382,7.996878],[8.717481,9.026590,-0.131845,6.368799,2.866275,-0.325470,4.831397],[5.215204,-0.941878,2.835911,5.915550,-7.590743,8.976534,-3.923498]],[[-1.188950,7.998296,-2.569441,1.810708,0.262866,7.209933,8.694027],[-2.860345,8.328567,7.480723,-0.357377,-6.080920,4.861893,-8.091331],[1.320752,5.566422,2.209642,3.230646,5.614756,-8.152342,6.327136],[5.785720,0.612535,5.207885,7.014381,-1.431848,5.357213,-0.951166],[9.276570,8.150532,1.284476,-6.844123,9.352542,-2.554313,8.666748],[7.678978,2.109402,5.298995,-8.965088,1.042502,5.265364,-5.563551],[0.597886,-2.224182,9.730185,9.569998,-3.804231,9.756122,4.845490],[-8.640331,9.001618,7.910741,2.386452,0.828620,6.994195,8.978617],[0.672814,9.883840,-4.168580,2.524921,8.053588,-4.450796,4.247714],[-0.864273,-2.663473,3.562736,-2.543503,-0.503118,3.818814,-2.580907],[-5.129931,2.877173,9.723500,-2.875746,-7.184794,8.494477,-5.552327]]], dtype = "float32")#candidate|155|(8, 11, 7)|const|float32
bop_156 = relay.bitwise_and(uop_149.astype('int32'), relay.reshape(const_155.astype('int32'), relay.shape_of(uop_149))) # shape=(8, 11, 7)
bop_159 = relay.multiply(uop_149.astype('float32'), relay.reshape(var_135.astype('float32'), relay.shape_of(uop_149))) # shape=(8, 11, 7)
var_162 = relay.var("var_162", dtype = "int32", shape = (8, 11, 7))#candidate|162|(8, 11, 7)|var|int32
bop_163 = relay.mod(bop_156.astype('float32'), relay.reshape(var_162.astype('float32'), relay.shape_of(bop_156))) # shape=(8, 11, 7)
bop_166 = relay.divide(uop_127.astype('float32'), relay.reshape(var_94.astype('float32'), relay.shape_of(uop_127))) # shape=(8, 11, 7)
bop_169 = relay.divide(bop_156.astype('float64'), relay.reshape(bop_159.astype('float64'), relay.shape_of(bop_156))) # shape=(8, 11, 7)
uop_172 = relay.sinh(bop_159.astype('float64')) # shape=(8, 11, 7)
uop_174 = relay.log10(uop_102.astype('float64')) # shape=(8, 11, 7)
uop_176 = relay.log10(uop_172.astype('float32')) # shape=(8, 11, 7)
output = relay.Tuple([bop_99,bop_109,bop_124,uop_129,bop_132,bop_136,bop_142,uop_145,uop_147,bop_152,bop_163,bop_166,bop_169,uop_174,uop_176,])
output2 = relay.Tuple([bop_99,bop_109,bop_124,uop_129,bop_132,bop_136,bop_142,uop_145,uop_147,bop_152,bop_163,bop_166,bop_169,uop_174,uop_176,])
func_178 = relay.Function([var_94,var_95,var_118,var_131,var_135,var_151,var_162,], output)
mod['func_178'] = func_178
mod = relay.transform.InferType()(mod)
mutated_mod['func_178'] = func_178
mutated_mod = relay.transform.InferType()(mutated_mod)
func_178_call = mutated_mod.get_global_var('func_178')
var_180 = relay.var("var_180", dtype = "int64", shape = (8, 11, 7))#candidate|180|(8, 11, 7)|var|int64
var_181 = relay.var("var_181", dtype = "int64", shape = (8, 11, 7))#candidate|181|(8, 11, 7)|var|int64
var_182 = relay.var("var_182", dtype = "bool", shape = (8, 11, 7))#candidate|182|(8, 11, 7)|var|bool
var_183 = relay.var("var_183", dtype = "int32", shape = (8, 11, 7))#candidate|183|(8, 11, 7)|var|int32
var_184 = relay.var("var_184", dtype = "float32", shape = (8, 11, 7))#candidate|184|(8, 11, 7)|var|float32
var_185 = relay.var("var_185", dtype = "float64", shape = (8, 11, 7))#candidate|185|(8, 11, 7)|var|float64
var_186 = relay.var("var_186", dtype = "int32", shape = (8, 11, 7))#candidate|186|(8, 11, 7)|var|int32
call_179 = func_178_call(var_180,var_181,var_182,var_183,var_184,var_185,var_186,)
output = call_179
func_187 = relay.Function([var_180,var_181,var_182,var_183,var_184,var_185,var_186,], output)
mutated_mod['func_187'] = func_187
mutated_mod = relay.transform.InferType()(mutated_mod)
var_189 = relay.var("var_189", dtype = "float32", shape = (16,))#candidate|189|(16,)|var|float32
var_190 = relay.var("var_190", dtype = "float32", shape = (16,))#candidate|190|(16,)|var|float32
bop_191 = relay.floor_mod(var_189.astype('float32'), relay.reshape(var_190.astype('float32'), relay.shape_of(var_189))) # shape=(16,)
var_194 = relay.var("var_194", dtype = "float32", shape = (16,))#candidate|194|(16,)|var|float32
bop_195 = relay.logical_and(bop_191.astype('bool'), relay.reshape(var_194.astype('bool'), relay.shape_of(bop_191))) # shape=(16,)
bop_198 = relay.right_shift(var_189.astype('int8'), relay.reshape(var_190.astype('int8'), relay.shape_of(var_189))) # shape=(16,)
uop_201 = relay.atan(bop_195.astype('float64')) # shape=(16,)
uop_203 = relay.exp(uop_201.astype('float32')) # shape=(16,)
var_205 = relay.var("var_205", dtype = "float32", shape = (16,))#candidate|205|(16,)|var|float32
bop_206 = relay.divide(var_194.astype('float32'), relay.reshape(var_205.astype('float32'), relay.shape_of(var_194))) # shape=(16,)
uop_209 = relay.log2(uop_203.astype('float64')) # shape=(16,)
uop_211 = relay.exp(uop_201.astype('float64')) # shape=(16,)
var_213 = relay.var("var_213", dtype = "float32", shape = (16,))#candidate|213|(16,)|var|float32
bop_214 = relay.add(uop_203.astype('uint8'), relay.reshape(var_213.astype('uint8'), relay.shape_of(uop_203))) # shape=(16,)
uop_217 = relay.sin(uop_209.astype('float64')) # shape=(16,)
bop_219 = relay.divide(uop_217.astype('float64'), relay.reshape(bop_191.astype('float64'), relay.shape_of(uop_217))) # shape=(16,)
uop_222 = relay.acosh(bop_191.astype('float32')) # shape=(16,)
bop_224 = relay.left_shift(bop_219.astype('uint64'), relay.reshape(uop_203.astype('uint64'), relay.shape_of(bop_219))) # shape=(16,)
var_227 = relay.var("var_227", dtype = "float64", shape = (16,))#candidate|227|(16,)|var|float64
bop_228 = relay.bitwise_and(uop_211.astype('uint16'), relay.reshape(var_227.astype('uint16'), relay.shape_of(uop_211))) # shape=(16,)
output = relay.Tuple([bop_198,bop_206,bop_214,uop_222,bop_224,bop_228,])
output2 = relay.Tuple([bop_198,bop_206,bop_214,uop_222,bop_224,bop_228,])
func_231 = relay.Function([var_189,var_190,var_194,var_205,var_213,var_227,], output)
mod['func_231'] = func_231
mod = relay.transform.InferType()(mod)
mutated_mod['func_231'] = func_231
mutated_mod = relay.transform.InferType()(mutated_mod)
func_231_call = mutated_mod.get_global_var('func_231')
var_233 = relay.var("var_233", dtype = "float32", shape = (16,))#candidate|233|(16,)|var|float32
var_234 = relay.var("var_234", dtype = "float32", shape = (16,))#candidate|234|(16,)|var|float32
var_235 = relay.var("var_235", dtype = "float32", shape = (16,))#candidate|235|(16,)|var|float32
var_236 = relay.var("var_236", dtype = "float32", shape = (16,))#candidate|236|(16,)|var|float32
var_237 = relay.var("var_237", dtype = "float32", shape = (16,))#candidate|237|(16,)|var|float32
var_238 = relay.var("var_238", dtype = "float64", shape = (16,))#candidate|238|(16,)|var|float64
call_232 = func_231_call(var_233,var_234,var_235,var_236,var_237,var_238,)
output = call_232
func_239 = relay.Function([var_233,var_234,var_235,var_236,var_237,var_238,], output)
mutated_mod['func_239'] = func_239
mutated_mod = relay.transform.InferType()(mutated_mod)
var_241 = relay.var("var_241", dtype = "float32", shape = (8, 10))#candidate|241|(8, 10)|var|float32
uop_242 = relay.rsqrt(var_241.astype('float32')) # shape=(8, 10)
const_244 = relay.const([[-5.234430,-6.114096,-3.586858,-6.588265,8.225429,1.819754,9.916084,1.667670,-1.803860,-7.449190],[0.793323,1.263827,-0.899129,9.756182,7.669291,7.224065,-2.769252,0.147923,-0.893582,-5.562247],[-6.838595,2.615359,0.819906,-0.201796,-0.258879,4.208886,-8.090747,5.197784,-1.006192,-6.719570],[7.520336,-4.820529,-1.931318,2.835448,9.220805,-4.823635,3.159298,6.843071,-3.573125,-7.747998],[2.220145,3.159647,-2.224094,-9.448894,9.204350,7.237871,2.878796,3.947885,6.859556,-1.519764],[-4.488299,-7.731060,-4.690886,-0.311369,3.075771,3.487522,-1.614083,3.053297,-0.496359,-5.457181],[-3.574180,-2.620817,0.847805,3.111779,-1.706627,9.515303,1.186928,-6.554367,6.926499,-6.820465],[8.467356,6.032283,-9.437284,3.006570,8.559020,5.528425,1.252267,3.858367,2.126303,8.532395]], dtype = "float32")#candidate|244|(8, 10)|const|float32
bop_245 = relay.greater_equal(var_241.astype('bool'), relay.reshape(const_244.astype('bool'), relay.shape_of(var_241))) # shape=(8, 10)
func_87_call = mod.get_global_var('func_87')
func_92_call = mutated_mod.get_global_var('func_92')
const_249 = relay.const([-3,-3,3,6,7], dtype = "int64")#candidate|249|(5,)|const|int64
call_248 = relay.TupleGetItem(func_87_call(relay.reshape(const_249.astype('int64'), [5,]), relay.reshape(const_249.astype('int64'), [5,]), relay.reshape(const_249.astype('float32'), [5,]), ), 0)
call_250 = relay.TupleGetItem(func_92_call(relay.reshape(const_249.astype('int64'), [5,]), relay.reshape(const_249.astype('int64'), [5,]), relay.reshape(const_249.astype('float32'), [5,]), ), 0)
uop_251 = relay.rsqrt(uop_242.astype('float32')) # shape=(8, 10)
var_253 = relay.var("var_253", dtype = "float32", shape = (8, 10))#candidate|253|(8, 10)|var|float32
bop_254 = relay.multiply(uop_251.astype('uint32'), relay.reshape(var_253.astype('uint32'), relay.shape_of(uop_251))) # shape=(8, 10)
bop_257 = relay.bitwise_or(uop_242.astype('int32'), relay.reshape(bop_245.astype('int32'), relay.shape_of(uop_242))) # shape=(8, 10)
bop_260 = relay.minimum(var_241.astype('int64'), relay.reshape(bop_257.astype('int64'), relay.shape_of(var_241))) # shape=(8, 10)
uop_263 = relay.sinh(bop_254.astype('float64')) # shape=(8, 10)
bop_265 = relay.left_shift(uop_263.astype('int32'), relay.reshape(const_244.astype('int32'), relay.shape_of(uop_263))) # shape=(8, 10)
uop_268 = relay.cos(bop_265.astype('float64')) # shape=(8, 10)
bop_270 = relay.bitwise_and(uop_263.astype('int16'), relay.reshape(uop_251.astype('int16'), relay.shape_of(uop_263))) # shape=(8, 10)
bop_273 = relay.maximum(uop_268.astype('int16'), relay.reshape(uop_242.astype('int16'), relay.shape_of(uop_268))) # shape=(8, 10)
bop_276 = relay.greater(bop_270.astype('bool'), relay.reshape(var_241.astype('bool'), relay.shape_of(bop_270))) # shape=(8, 10)
uop_279 = relay.cos(uop_268.astype('float64')) # shape=(8, 10)
output = relay.Tuple([call_248,const_249,bop_260,bop_273,bop_276,uop_279,])
output2 = relay.Tuple([call_250,const_249,bop_260,bop_273,bop_276,uop_279,])
func_281 = relay.Function([var_241,var_253,], output)
mod['func_281'] = func_281
mod = relay.transform.InferType()(mod)
mutated_mod['func_281'] = func_281
mutated_mod = relay.transform.InferType()(mutated_mod)
func_281_call = mutated_mod.get_global_var('func_281')
var_283 = relay.var("var_283", dtype = "float32", shape = (8, 10))#candidate|283|(8, 10)|var|float32
var_284 = relay.var("var_284", dtype = "float32", shape = (8, 10))#candidate|284|(8, 10)|var|float32
call_282 = func_281_call(var_283,var_284,)
output = call_282
func_285 = relay.Function([var_283,var_284,], output)
mutated_mod['func_285'] = func_285
mutated_mod = relay.transform.InferType()(mutated_mod)
const_287 = relay.const([[2.651612,5.872330],[-3.852065,-9.326199],[8.748702,8.119554]], dtype = "float32")#candidate|287|(3, 2)|const|float32
uop_288 = relay.tan(const_287.astype('float32')) # shape=(3, 2)
bop_290 = relay.power(uop_288.astype('float32'), relay.reshape(const_287.astype('float32'), relay.shape_of(uop_288))) # shape=(3, 2)
bop_293 = relay.mod(uop_288.astype('float32'), relay.reshape(bop_290.astype('float32'), relay.shape_of(uop_288))) # shape=(3, 2)
uop_296 = relay.sinh(bop_290.astype('float64')) # shape=(3, 2)
uop_298 = relay.log(uop_296.astype('float32')) # shape=(3, 2)
uop_300 = relay.asinh(bop_290.astype('float32')) # shape=(3, 2)
uop_302 = relay.sin(const_287.astype('float32')) # shape=(3, 2)
uop_304 = relay.sin(uop_298.astype('float64')) # shape=(3, 2)
var_306 = relay.var("var_306", dtype = "float32", shape = (3, 2))#candidate|306|(3, 2)|var|float32
bop_307 = relay.less_equal(uop_298.astype('bool'), relay.reshape(var_306.astype('bool'), relay.shape_of(uop_298))) # shape=(3, 2)
bop_310 = relay.not_equal(uop_304.astype('bool'), relay.reshape(uop_300.astype('bool'), relay.shape_of(uop_304))) # shape=(3, 2)
output = relay.Tuple([bop_293,uop_302,bop_307,bop_310,])
output2 = relay.Tuple([bop_293,uop_302,bop_307,bop_310,])
F = relay.Function([var_306,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_306,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_306= np.array([[3.536130,-4.708634],[-5.130299,6.054211],[7.895538,9.993474]], dtype='float32')
module1.set_input('var_306', input_306)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_306, )
res3 = intrp3.evaluate()(input_306, )
res4 = intrp4.evaluate()(input_306, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
module5.set_input('var_306', input_306)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_306, )
res7 = intrp7.evaluate()(input_306, )
res8 = intrp8.evaluate()(input_306, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
module9.set_input('var_306', input_306)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_306, )
res11 = intrp11.evaluate()(input_306, )
res12 = intrp12.evaluate()(input_306, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
module13.set_input('var_306', input_306)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_306, )
res15 = intrp15.evaluate()(input_306, )
res16 = intrp16.evaluate()(input_306, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
module17.set_input('var_306', input_306)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_306, )
res19 = intrp19.evaluate()(input_306, )
res20 = intrp20.evaluate()(input_306, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
module21.set_input('var_306', input_306)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_306, )
res23 = intrp23.evaluate()(input_306, )
res24 = intrp24.evaluate()(input_306, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()

'''9: TVMFuncCall
8: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::transform::Pass, tvm::IRModule)>::AssignTypedLambda<tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}>(tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
7: tvm::transform::Pass::operator()(tvm::IRModule) const
6: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::LazyGradientInit(tvm::RelayExpr const&, tvm::IRModule)
0: tvm::relay::CheckFeature(tvm::RelayExpr const&, tvm::relay::FeatureSet const&)

'''