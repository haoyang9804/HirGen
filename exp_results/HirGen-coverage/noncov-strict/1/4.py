import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (13,))#candidate|0|(13,)|var|float64
uop_1 = relay.cos(var_0.astype('float64')) # shape=(13,)
var_3 = relay.var("var_3", dtype = "float64", shape = (13,))#candidate|3|(13,)|var|float64
bop_4 = relay.logical_xor(uop_1.astype('uint32'), relay.reshape(var_3.astype('uint32'), relay.shape_of(uop_1))) # shape=(13,)
bop_7 = relay.logical_and(uop_1.astype('bool'), relay.reshape(var_0.astype('bool'), relay.shape_of(uop_1))) # shape=(13,)
const_10 = relay.const([7.724210,-6.309572,6.705699,9.287161,6.115474,-4.712371,-3.631310,0.794726,-0.629082,-6.073712,1.393793,4.065415,4.346688], dtype = "float64")#candidate|10|(13,)|const|float64
bop_11 = relay.subtract(var_3.astype('uint16'), relay.reshape(const_10.astype('uint16'), relay.shape_of(var_3))) # shape=(13,)
bop_14 = relay.bitwise_xor(var_3.astype('uint64'), relay.reshape(const_10.astype('uint64'), relay.shape_of(var_3))) # shape=(13,)
output = relay.Tuple([bop_4,bop_7,bop_11,bop_14,])
output2 = relay.Tuple([bop_4,bop_7,bop_11,bop_14,])
func_17 = relay.Function([var_0,var_3,], output)
mod['func_17'] = func_17
mod = relay.transform.InferType()(mod)
var_18 = relay.var("var_18", dtype = "float64", shape = (13,))#candidate|18|(13,)|var|float64
var_19 = relay.var("var_19", dtype = "float64", shape = (13,))#candidate|19|(13,)|var|float64
output = func_17(var_18,var_19,)
func_20 = relay.Function([var_18,var_19,], output)
mutated_mod['func_20'] = func_20
mutated_mod = relay.transform.InferType()(mutated_mod)
var_22 = relay.var("var_22", dtype = "float64", shape = (11,))#candidate|22|(11,)|var|float64
uop_23 = relay.rsqrt(var_22.astype('float64')) # shape=(11,)
uop_25 = relay.cos(var_22.astype('float32')) # shape=(11,)
uop_27 = relay.rsqrt(uop_23.astype('float64')) # shape=(11,)
uop_29 = relay.atanh(uop_27.astype('float32')) # shape=(11,)
bop_31 = relay.logical_and(uop_27.astype('bool'), relay.reshape(uop_23.astype('bool'), relay.shape_of(uop_27))) # shape=(11,)
bop_34 = relay.less(bop_31.astype('bool'), relay.reshape(uop_27.astype('bool'), relay.shape_of(bop_31))) # shape=(11,)
uop_37 = relay.rsqrt(uop_25.astype('float64')) # shape=(11,)
uop_39 = relay.exp(bop_34.astype('float32')) # shape=(11,)
var_41 = relay.var("var_41", dtype = "float64", shape = (11,))#candidate|41|(11,)|var|float64
bop_42 = relay.bitwise_xor(uop_27.astype('uint8'), relay.reshape(var_41.astype('uint8'), relay.shape_of(uop_27))) # shape=(11,)
bop_45 = relay.greater(bop_31.astype('bool'), relay.reshape(uop_25.astype('bool'), relay.shape_of(bop_31))) # shape=(11,)
var_48 = relay.var("var_48", dtype = "float32", shape = (11,))#candidate|48|(11,)|var|float32
bop_49 = relay.minimum(uop_39.astype('uint16'), relay.reshape(var_48.astype('uint16'), relay.shape_of(uop_39))) # shape=(11,)
bop_52 = relay.less(bop_49.astype('bool'), relay.reshape(var_48.astype('bool'), relay.shape_of(bop_49))) # shape=(11,)
const_55 = relay.const([9.135055,-0.418168,9.989182,9.852130,4.124984,-5.386882,7.671565,-6.357415,9.707394,-1.860787,-3.016092], dtype = "float64")#candidate|55|(11,)|const|float64
bop_56 = relay.bitwise_xor(var_41.astype('uint8'), relay.reshape(const_55.astype('uint8'), relay.shape_of(var_41))) # shape=(11,)
uop_59 = relay.log2(uop_27.astype('float64')) # shape=(11,)
uop_61 = relay.log2(const_55.astype('float32')) # shape=(11,)
uop_63 = relay.log(uop_39.astype('float32')) # shape=(11,)
const_65 = relay.const([-9.555196,7.192006,-1.799652,-8.320428,2.123891,9.349980,-6.664170,-7.890000,3.514839,4.744697,6.860078], dtype = "float32")#candidate|65|(11,)|const|float32
bop_66 = relay.greater(uop_63.astype('bool'), relay.reshape(const_65.astype('bool'), relay.shape_of(uop_63))) # shape=(11,)
uop_69 = relay.sqrt(uop_63.astype('float64')) # shape=(11,)
bop_71 = relay.subtract(uop_63.astype('int8'), relay.reshape(var_22.astype('int8'), relay.shape_of(uop_63))) # shape=(11,)
uop_74 = relay.log(uop_69.astype('float32')) # shape=(11,)
bop_76 = relay.less_equal(uop_69.astype('bool'), relay.reshape(bop_52.astype('bool'), relay.shape_of(uop_69))) # shape=(11,)
uop_79 = relay.cos(uop_74.astype('float32')) # shape=(11,)
bop_81 = relay.floor_divide(uop_63.astype('float32'), relay.reshape(bop_66.astype('float32'), relay.shape_of(uop_63))) # shape=(11,)
bop_84 = relay.logical_and(uop_69.astype('bool'), relay.reshape(uop_63.astype('bool'), relay.shape_of(uop_69))) # shape=(11,)
uop_87 = relay.cosh(uop_74.astype('float64')) # shape=(11,)
bop_89 = relay.logical_xor(uop_69.astype('int32'), relay.reshape(bop_84.astype('int32'), relay.shape_of(uop_69))) # shape=(11,)
uop_92 = relay.sinh(uop_79.astype('float64')) # shape=(11,)
uop_94 = relay.tan(uop_92.astype('float64')) # shape=(11,)
uop_96 = relay.log10(uop_94.astype('float64')) # shape=(11,)
uop_98 = relay.sinh(uop_94.astype('float64')) # shape=(11,)
var_100 = relay.var("var_100", dtype = "float64", shape = (11,))#candidate|100|(11,)|var|float64
bop_101 = relay.bitwise_or(uop_96.astype('uint16'), relay.reshape(var_100.astype('uint16'), relay.shape_of(uop_96))) # shape=(11,)
const_104 = relay.const([8.932052,-4.360270,9.374497,3.689679,-6.394896,-8.949331,-8.075322,-2.432952,8.274207,4.544504,6.487506], dtype = "float64")#candidate|104|(11,)|const|float64
bop_105 = relay.logical_or(uop_94.astype('bool'), relay.reshape(const_104.astype('bool'), relay.shape_of(uop_94))) # shape=(11,)
const_108 = relay.const([-6.324919,-9.756300,0.333642,-0.775737,9.866699,6.473780,2.004874,2.874152,0.036776,-9.471552,-9.060362], dtype = "float64")#candidate|108|(11,)|const|float64
bop_109 = relay.multiply(uop_92.astype('float64'), relay.reshape(const_108.astype('float64'), relay.shape_of(uop_92))) # shape=(11,)
uop_112 = relay.cosh(uop_98.astype('float32')) # shape=(11,)
uop_114 = relay.sin(bop_105.astype('float32')) # shape=(11,)
bop_116 = relay.bitwise_and(uop_98.astype('uint8'), relay.reshape(bop_109.astype('uint8'), relay.shape_of(uop_98))) # shape=(11,)
var_119 = relay.var("var_119", dtype = "float32", shape = (11,))#candidate|119|(11,)|var|float32
bop_120 = relay.less(uop_114.astype('bool'), relay.reshape(var_119.astype('bool'), relay.shape_of(uop_114))) # shape=(11,)
uop_123 = relay.atan(uop_112.astype('float64')) # shape=(11,)
uop_125 = relay.erf(bop_116.astype('float32')) # shape=(11,)
uop_127 = relay.acosh(uop_123.astype('float64')) # shape=(11,)
var_129 = relay.var("var_129", dtype = "float64", shape = (11,))#candidate|129|(11,)|var|float64
bop_130 = relay.mod(uop_127.astype('float32'), relay.reshape(var_129.astype('float32'), relay.shape_of(uop_127))) # shape=(11,)
uop_133 = relay.asinh(uop_127.astype('float32')) # shape=(11,)
uop_135 = relay.cos(uop_125.astype('float64')) # shape=(11,)
func_17_call = mod.get_global_var('func_17')
func_20_call = mutated_mod.get_global_var('func_20')
const_138 = relay.const([1.285187,-0.559006,-3.657858,-1.310547,-9.190214,-5.339006,-5.031545,-1.910794,-4.707920,-4.720549,0.264214,-8.976289,9.494875], dtype = "float64")#candidate|138|(13,)|const|float64
call_137 = relay.TupleGetItem(func_17_call(relay.reshape(const_138.astype('float64'), [13,]), relay.reshape(const_138.astype('float64'), [13,]), ), 0)
call_139 = relay.TupleGetItem(func_20_call(relay.reshape(const_138.astype('float64'), [13,]), relay.reshape(const_138.astype('float64'), [13,]), ), 0)
uop_140 = relay.log10(uop_135.astype('float64')) # shape=(11,)
var_142 = relay.var("var_142", dtype = "float32", shape = (11,))#candidate|142|(11,)|var|float32
bop_143 = relay.bitwise_xor(uop_133.astype('uint64'), relay.reshape(var_142.astype('uint64'), relay.shape_of(uop_133))) # shape=(11,)
bop_146 = relay.equal(uop_123.astype('bool'), relay.reshape(const_108.astype('bool'), relay.shape_of(uop_123))) # shape=(11,)
var_149 = relay.var("var_149", dtype = "float64", shape = (11,))#candidate|149|(11,)|var|float64
bop_150 = relay.greater_equal(uop_135.astype('bool'), relay.reshape(var_149.astype('bool'), relay.shape_of(uop_135))) # shape=(11,)
uop_153 = relay.exp(uop_133.astype('float32')) # shape=(11,)
bop_155 = relay.minimum(uop_153.astype('int64'), relay.reshape(uop_133.astype('int64'), relay.shape_of(uop_153))) # shape=(11,)
func_17_call = mod.get_global_var('func_17')
func_20_call = mutated_mod.get_global_var('func_20')
call_158 = relay.TupleGetItem(func_17_call(relay.reshape(const_138.astype('float64'), [13,]), relay.reshape(call_137.astype('float64'), [13,]), ), 0)
call_159 = relay.TupleGetItem(func_20_call(relay.reshape(const_138.astype('float64'), [13,]), relay.reshape(call_137.astype('float64'), [13,]), ), 0)
uop_160 = relay.tan(bop_143.astype('float64')) # shape=(11,)
uop_162 = relay.log(uop_160.astype('float64')) # shape=(11,)
uop_164 = relay.asinh(uop_135.astype('float64')) # shape=(11,)
output = relay.Tuple([uop_29,uop_37,bop_42,bop_45,bop_56,uop_59,uop_61,bop_71,bop_76,bop_81,uop_87,bop_89,bop_101,bop_120,bop_130,call_137,const_138,uop_140,bop_146,bop_150,bop_155,call_158,uop_162,uop_164,])
output2 = relay.Tuple([uop_29,uop_37,bop_42,bop_45,bop_56,uop_59,uop_61,bop_71,bop_76,bop_81,uop_87,bop_89,bop_101,bop_120,bop_130,call_139,const_138,uop_140,bop_146,bop_150,bop_155,call_159,uop_162,uop_164,])
func_166 = relay.Function([var_22,var_41,var_48,var_100,var_119,var_129,var_142,var_149,], output)
mod['func_166'] = func_166
mod = relay.transform.InferType()(mod)
mutated_mod['func_166'] = func_166
mutated_mod = relay.transform.InferType()(mutated_mod)
func_166_call = mutated_mod.get_global_var('func_166')
var_168 = relay.var("var_168", dtype = "float64", shape = (11,))#candidate|168|(11,)|var|float64
var_169 = relay.var("var_169", dtype = "float64", shape = (11,))#candidate|169|(11,)|var|float64
var_170 = relay.var("var_170", dtype = "float32", shape = (11,))#candidate|170|(11,)|var|float32
var_171 = relay.var("var_171", dtype = "float64", shape = (11,))#candidate|171|(11,)|var|float64
var_172 = relay.var("var_172", dtype = "float32", shape = (11,))#candidate|172|(11,)|var|float32
var_173 = relay.var("var_173", dtype = "float64", shape = (11,))#candidate|173|(11,)|var|float64
var_174 = relay.var("var_174", dtype = "float32", shape = (11,))#candidate|174|(11,)|var|float32
var_175 = relay.var("var_175", dtype = "float64", shape = (11,))#candidate|175|(11,)|var|float64
call_167 = func_166_call(var_168,var_169,var_170,var_171,var_172,var_173,var_174,var_175,)
output = call_167
func_176 = relay.Function([var_168,var_169,var_170,var_171,var_172,var_173,var_174,var_175,], output)
mutated_mod['func_176'] = func_176
mutated_mod = relay.transform.InferType()(mutated_mod)
var_178 = relay.var("var_178", dtype = "float32", shape = (5,))#candidate|178|(5,)|var|float32
uop_179 = relay.acos(var_178.astype('float32')) # shape=(5,)
bop_181 = relay.add(uop_179.astype('int8'), relay.reshape(var_178.astype('int8'), relay.shape_of(uop_179))) # shape=(5,)
var_184 = relay.var("var_184", dtype = "float32", shape = (5,))#candidate|184|(5,)|var|float32
bop_185 = relay.multiply(var_178.astype('uint64'), relay.reshape(var_184.astype('uint64'), relay.shape_of(var_178))) # shape=(5,)
bop_188 = relay.not_equal(bop_185.astype('bool'), relay.reshape(var_178.astype('bool'), relay.shape_of(bop_185))) # shape=(5,)
uop_191 = relay.erf(uop_179.astype('float64')) # shape=(5,)
func_166_call = mod.get_global_var('func_166')
func_176_call = mutated_mod.get_global_var('func_176')
const_194 = relay.const([-8.932299,-7.807572,-4.506216,-7.355328,-7.503869,-4.635418,-7.879576,3.616150,-9.033188,-3.371695,6.501599], dtype = "float64")#candidate|194|(11,)|const|float64
call_193 = relay.TupleGetItem(func_166_call(relay.reshape(const_194.astype('float64'), [11,]), relay.reshape(const_194.astype('float64'), [11,]), relay.reshape(const_194.astype('float32'), [11,]), relay.reshape(const_194.astype('float64'), [11,]), relay.reshape(const_194.astype('float32'), [11,]), relay.reshape(const_194.astype('float64'), [11,]), relay.reshape(const_194.astype('float32'), [11,]), relay.reshape(const_194.astype('float64'), [11,]), ), 3)
call_195 = relay.TupleGetItem(func_176_call(relay.reshape(const_194.astype('float64'), [11,]), relay.reshape(const_194.astype('float64'), [11,]), relay.reshape(const_194.astype('float32'), [11,]), relay.reshape(const_194.astype('float64'), [11,]), relay.reshape(const_194.astype('float32'), [11,]), relay.reshape(const_194.astype('float64'), [11,]), relay.reshape(const_194.astype('float32'), [11,]), relay.reshape(const_194.astype('float64'), [11,]), ), 3)
uop_196 = relay.cos(uop_191.astype('float64')) # shape=(5,)
bop_198 = relay.add(uop_191.astype('int16'), relay.reshape(bop_181.astype('int16'), relay.shape_of(uop_191))) # shape=(5,)
const_201 = relay.const([3.747622,6.551438,-7.659784,-1.636503,8.595481], dtype = "float64")#candidate|201|(5,)|const|float64
bop_202 = relay.not_equal(uop_196.astype('bool'), relay.reshape(const_201.astype('bool'), relay.shape_of(uop_196))) # shape=(5,)
bop_205 = relay.greater_equal(bop_202.astype('bool'), relay.reshape(const_201.astype('bool'), relay.shape_of(bop_202))) # shape=(5,)
bop_208 = relay.greater_equal(bop_205.astype('bool'), relay.reshape(bop_202.astype('bool'), relay.shape_of(bop_205))) # shape=(5,)
uop_211 = relay.asinh(uop_196.astype('float32')) # shape=(5,)
uop_213 = relay.log10(uop_211.astype('float32')) # shape=(5,)
uop_215 = relay.atanh(bop_202.astype('float64')) # shape=(5,)
uop_217 = relay.rsqrt(uop_213.astype('float32')) # shape=(5,)
uop_219 = relay.cosh(uop_213.astype('float32')) # shape=(5,)
bop_221 = relay.maximum(uop_217.astype('uint32'), relay.reshape(bop_208.astype('uint32'), relay.shape_of(uop_217))) # shape=(5,)
bop_224 = relay.subtract(uop_211.astype('int32'), relay.reshape(bop_185.astype('int32'), relay.shape_of(uop_211))) # shape=(5,)
bop_227 = relay.not_equal(uop_217.astype('bool'), relay.reshape(bop_181.astype('bool'), relay.shape_of(uop_217))) # shape=(5,)
var_230 = relay.var("var_230", dtype = "int16", shape = (5,))#candidate|230|(5,)|var|int16
bop_231 = relay.power(bop_198.astype('float64'), relay.reshape(var_230.astype('float64'), relay.shape_of(bop_198))) # shape=(5,)
bop_234 = relay.floor_mod(bop_221.astype('float32'), relay.reshape(bop_205.astype('float32'), relay.shape_of(bop_221))) # shape=(5,)
bop_237 = relay.subtract(uop_213.astype('int64'), relay.reshape(bop_221.astype('int64'), relay.shape_of(uop_213))) # shape=(5,)
func_17_call = mod.get_global_var('func_17')
func_20_call = mutated_mod.get_global_var('func_20')
var_241 = relay.var("var_241", dtype = "float64", shape = (13, 1))#candidate|241|(13, 1)|var|float64
call_240 = relay.TupleGetItem(func_17_call(relay.reshape(var_241.astype('float64'), [13,]), relay.reshape(var_241.astype('float64'), [13,]), ), 1)
call_242 = relay.TupleGetItem(func_20_call(relay.reshape(var_241.astype('float64'), [13,]), relay.reshape(var_241.astype('float64'), [13,]), ), 1)
uop_243 = relay.sqrt(bop_224.astype('float32')) # shape=(5,)
uop_245 = relay.atanh(uop_243.astype('float64')) # shape=(5,)
output = relay.Tuple([bop_188,call_193,const_194,uop_215,uop_219,bop_227,bop_231,bop_234,bop_237,call_240,var_241,uop_245,])
output2 = relay.Tuple([bop_188,call_195,const_194,uop_215,uop_219,bop_227,bop_231,bop_234,bop_237,call_242,var_241,uop_245,])
func_247 = relay.Function([var_178,var_184,var_230,var_241,], output)
mod['func_247'] = func_247
mod = relay.transform.InferType()(mod)
mutated_mod['func_247'] = func_247
mutated_mod = relay.transform.InferType()(mutated_mod)
func_247_call = mutated_mod.get_global_var('func_247')
var_249 = relay.var("var_249", dtype = "float32", shape = (5,))#candidate|249|(5,)|var|float32
var_250 = relay.var("var_250", dtype = "float32", shape = (5,))#candidate|250|(5,)|var|float32
var_251 = relay.var("var_251", dtype = "int16", shape = (5,))#candidate|251|(5,)|var|int16
var_252 = relay.var("var_252", dtype = "float64", shape = (13, 1))#candidate|252|(13, 1)|var|float64
call_248 = func_247_call(var_249,var_250,var_251,var_252,)
output = call_248
func_253 = relay.Function([var_249,var_250,var_251,var_252,], output)
mutated_mod['func_253'] = func_253
mutated_mod = relay.transform.InferType()(mutated_mod)
var_255 = relay.var("var_255", dtype = "float64", shape = ())#candidate|255|()|var|float64
var_256 = relay.var("var_256", dtype = "float64", shape = (10,))#candidate|256|(10,)|var|float64
bop_257 = relay.add(var_255.astype('float64'), var_256.astype('float64')) # shape=(10,)
bop_260 = relay.divide(bop_257.astype('float64'), var_255.astype('float64')) # shape=(10,)
bop_263 = relay.floor_divide(var_255.astype('float32'), bop_257.astype('float32')) # shape=(10,)
uop_266 = relay.sqrt(bop_257.astype('float32')) # shape=(10,)
uop_268 = relay.atanh(uop_266.astype('float64')) # shape=(10,)
uop_270 = relay.erf(uop_268.astype('float32')) # shape=(10,)
var_272 = relay.var("var_272", dtype = "float32", shape = (10,))#candidate|272|(10,)|var|float32
bop_273 = relay.mod(uop_270.astype('float32'), relay.reshape(var_272.astype('float32'), relay.shape_of(uop_270))) # shape=(10,)
output = relay.Tuple([bop_260,bop_263,bop_273,])
output2 = relay.Tuple([bop_260,bop_263,bop_273,])
func_276 = relay.Function([var_255,var_256,var_272,], output)
mod['func_276'] = func_276
mod = relay.transform.InferType()(mod)
var_277 = relay.var("var_277", dtype = "float64", shape = ())#candidate|277|()|var|float64
var_278 = relay.var("var_278", dtype = "float64", shape = (10,))#candidate|278|(10,)|var|float64
var_279 = relay.var("var_279", dtype = "float32", shape = (10,))#candidate|279|(10,)|var|float32
output = func_276(var_277,var_278,var_279,)
func_280 = relay.Function([var_277,var_278,var_279,], output)
mutated_mod['func_280'] = func_280
mutated_mod = relay.transform.InferType()(mutated_mod)
var_282 = relay.var("var_282", dtype = "uint64", shape = (14,))#candidate|282|(14,)|var|uint64
var_283 = relay.var("var_283", dtype = "uint64", shape = (14,))#candidate|283|(14,)|var|uint64
bop_284 = relay.maximum(var_282.astype('uint64'), relay.reshape(var_283.astype('uint64'), relay.shape_of(var_282))) # shape=(14,)
bop_287 = relay.maximum(var_283.astype('uint32'), relay.reshape(bop_284.astype('uint32'), relay.shape_of(var_283))) # shape=(14,)
bop_290 = relay.right_shift(bop_284.astype('int32'), relay.reshape(bop_287.astype('int32'), relay.shape_of(bop_284))) # shape=(14,)
uop_293 = relay.asin(var_282.astype('float32')) # shape=(14,)
bop_295 = relay.bitwise_xor(uop_293.astype('uint64'), relay.reshape(bop_290.astype('uint64'), relay.shape_of(uop_293))) # shape=(14,)
bop_298 = relay.bitwise_or(bop_284.astype('uint8'), relay.reshape(bop_287.astype('uint8'), relay.shape_of(bop_284))) # shape=(14,)
uop_301 = relay.sin(uop_293.astype('float64')) # shape=(14,)
output = relay.Tuple([bop_295,bop_298,uop_301,])
output2 = relay.Tuple([bop_295,bop_298,uop_301,])
func_303 = relay.Function([var_282,var_283,], output)
mod['func_303'] = func_303
mod = relay.transform.InferType()(mod)
mutated_mod['func_303'] = func_303
mutated_mod = relay.transform.InferType()(mutated_mod)
func_303_call = mutated_mod.get_global_var('func_303')
var_305 = relay.var("var_305", dtype = "uint64", shape = (14,))#candidate|305|(14,)|var|uint64
var_306 = relay.var("var_306", dtype = "uint64", shape = (14,))#candidate|306|(14,)|var|uint64
call_304 = func_303_call(var_305,var_306,)
output = call_304
func_307 = relay.Function([var_305,var_306,], output)
mutated_mod['func_307'] = func_307
mutated_mod = relay.transform.InferType()(mutated_mod)
var_309 = relay.var("var_309", dtype = "float64", shape = (4,))#candidate|309|(4,)|var|float64
uop_310 = relay.atanh(var_309.astype('float64')) # shape=(4,)
func_17_call = mod.get_global_var('func_17')
func_20_call = mutated_mod.get_global_var('func_20')
const_313 = relay.const([-1.353540,5.181127,4.560723,-1.921631,6.245755,8.117020,-4.548528,-4.980530,-1.870887,0.454022,-9.300924,1.097874,-3.220415], dtype = "float64")#candidate|313|(13,)|const|float64
call_312 = relay.TupleGetItem(func_17_call(relay.reshape(const_313.astype('float64'), [13,]), relay.reshape(const_313.astype('float64'), [13,]), ), 3)
call_314 = relay.TupleGetItem(func_20_call(relay.reshape(const_313.astype('float64'), [13,]), relay.reshape(const_313.astype('float64'), [13,]), ), 3)
func_303_call = mod.get_global_var('func_303')
func_307_call = mutated_mod.get_global_var('func_307')
const_316 = relay.const([[-2],[3],[9],[10],[-8],[5],[8],[2],[-3],[-10],[2],[10],[-2],[9]], dtype = "uint64")#candidate|316|(14, 1)|const|uint64
call_315 = relay.TupleGetItem(func_303_call(relay.reshape(const_316.astype('uint64'), [14,]), relay.reshape(const_316.astype('uint64'), [14,]), ), 1)
call_317 = relay.TupleGetItem(func_307_call(relay.reshape(const_316.astype('uint64'), [14,]), relay.reshape(const_316.astype('uint64'), [14,]), ), 1)
uop_318 = relay.acos(uop_310.astype('float32')) # shape=(4,)
uop_320 = relay.log2(uop_310.astype('float32')) # shape=(4,)
uop_322 = relay.asin(uop_320.astype('float32')) # shape=(4,)
bop_324 = relay.logical_and(uop_322.astype('bool'), relay.reshape(uop_320.astype('bool'), relay.shape_of(uop_322))) # shape=(4,)
uop_327 = relay.log2(bop_324.astype('float64')) # shape=(4,)
output = relay.Tuple([call_312,const_313,call_315,const_316,uop_318,uop_327,])
output2 = relay.Tuple([call_314,const_313,call_317,const_316,uop_318,uop_327,])
F = relay.Function([var_309,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_309,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
	relay.transform.DefuseOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_309= np.array([-3.714847,0.154727,-1.575567,-8.664729], dtype='float64')
module1.set_input('var_309', input_309)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_309, )
res3 = intrp3.evaluate()(input_309, )
res4 = intrp4.evaluate()(input_309, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
module5.set_input('var_309', input_309)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_309, )
res7 = intrp7.evaluate()(input_309, )
res8 = intrp8.evaluate()(input_309, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
module9.set_input('var_309', input_309)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_309, )
res11 = intrp11.evaluate()(input_309, )
res12 = intrp12.evaluate()(input_309, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
module13.set_input('var_309', input_309)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_309, )
res15 = intrp15.evaluate()(input_309, )
res16 = intrp16.evaluate()(input_309, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
module17.set_input('var_309', input_309)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_309, )
res19 = intrp19.evaluate()(input_309, )
res20 = intrp20.evaluate()(input_309, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
module21.set_input('var_309', input_309)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_309, )
res23 = intrp23.evaluate()(input_309, )
res24 = intrp24.evaluate()(input_309, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()

'''57: TVMFuncCall
56: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
55: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
54: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
53: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
52: tvm::transform::Pass::operator()(tvm::IRModule) const
51: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
50: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
49: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
48: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
47: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
46: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
45: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
44: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
43: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
42: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
41: _ZN3tvm5relay16MixedModeMutato
40: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
39: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
38: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
37: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
36: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
34: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
32: _ZN3tvm5relay16MixedModeMutato
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
27: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
26: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
25: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
24: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
23: tvm::transform::Pass::operator()(tvm::IRModule) const
22: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
21: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
16: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
15: tvm::relay::TypeInferencer::Infer(tvm::GlobalVar, tvm::relay::Function)
14: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
13: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
12: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
11: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
10: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
9: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::FunctionNode const*)
8: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
7: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
6: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
5: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
4: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
3: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::CallNode const*)
2: tvm::relay::TypeInferencer::GeneralCall(tvm::relay::CallNode const*, tvm::runtime::Array<tvm::Type, void>)
1: _ZN3tvm17DiagnosticContext9EmitFatalERKNS_1
0: tvm::DiagnosticContext::Render()

'''