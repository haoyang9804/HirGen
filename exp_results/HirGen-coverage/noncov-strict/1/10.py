import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "int64", shape = (3, 11))#candidate|0|(3, 11)|var|int64
var_1 = relay.var("var_1", dtype = "int64", shape = (3, 11))#candidate|1|(3, 11)|var|int64
bop_2 = relay.greater_equal(var_0.astype('bool'), relay.reshape(var_1.astype('bool'), relay.shape_of(var_0))) # shape=(3, 11)
var_5 = relay.var("var_5", dtype = "int64", shape = (3, 11))#candidate|5|(3, 11)|var|int64
bop_6 = relay.subtract(var_1.astype('float32'), relay.reshape(var_5.astype('float32'), relay.shape_of(var_1))) # shape=(3, 11)
bop_9 = relay.not_equal(var_1.astype('bool'), relay.reshape(bop_2.astype('bool'), relay.shape_of(var_1))) # shape=(3, 11)
bop_12 = relay.equal(bop_9.astype('bool'), relay.reshape(var_1.astype('bool'), relay.shape_of(bop_9))) # shape=(3, 11)
bop_15 = relay.right_shift(var_1.astype('uint32'), relay.reshape(var_5.astype('uint32'), relay.shape_of(var_1))) # shape=(3, 11)
var_18 = relay.var("var_18", dtype = "bool", shape = (3, 11))#candidate|18|(3, 11)|var|bool
bop_19 = relay.power(bop_9.astype('float32'), relay.reshape(var_18.astype('float32'), relay.shape_of(bop_9))) # shape=(3, 11)
var_22 = relay.var("var_22", dtype = "float32", shape = (3, 11))#candidate|22|(3, 11)|var|float32
bop_23 = relay.less(bop_6.astype('bool'), relay.reshape(var_22.astype('bool'), relay.shape_of(bop_6))) # shape=(3, 11)
bop_26 = relay.not_equal(bop_9.astype('bool'), relay.reshape(bop_15.astype('bool'), relay.shape_of(bop_9))) # shape=(3, 11)
uop_29 = relay.exp(bop_23.astype('float64')) # shape=(3, 11)
output = relay.Tuple([bop_12,bop_19,bop_26,uop_29,])
output2 = relay.Tuple([bop_12,bop_19,bop_26,uop_29,])
func_31 = relay.Function([var_0,var_1,var_5,var_18,var_22,], output)
mod['func_31'] = func_31
mod = relay.transform.InferType()(mod)
var_32 = relay.var("var_32", dtype = "int64", shape = (3, 11))#candidate|32|(3, 11)|var|int64
var_33 = relay.var("var_33", dtype = "int64", shape = (3, 11))#candidate|33|(3, 11)|var|int64
var_34 = relay.var("var_34", dtype = "int64", shape = (3, 11))#candidate|34|(3, 11)|var|int64
var_35 = relay.var("var_35", dtype = "bool", shape = (3, 11))#candidate|35|(3, 11)|var|bool
var_36 = relay.var("var_36", dtype = "float32", shape = (3, 11))#candidate|36|(3, 11)|var|float32
output = func_31(var_32,var_33,var_34,var_35,var_36,)
func_37 = relay.Function([var_32,var_33,var_34,var_35,var_36,], output)
mutated_mod['func_37'] = func_37
mutated_mod = relay.transform.InferType()(mutated_mod)
var_39 = relay.var("var_39", dtype = "uint64", shape = (15, 13, 3))#candidate|39|(15, 13, 3)|var|uint64
var_40 = relay.var("var_40", dtype = "uint64", shape = (15, 13, 3))#candidate|40|(15, 13, 3)|var|uint64
bop_41 = relay.less_equal(var_39.astype('bool'), relay.reshape(var_40.astype('bool'), relay.shape_of(var_39))) # shape=(15, 13, 3)
bop_44 = relay.divide(var_40.astype('float32'), relay.reshape(bop_41.astype('float32'), relay.shape_of(var_40))) # shape=(15, 13, 3)
uop_47 = relay.log10(var_40.astype('float64')) # shape=(15, 13, 3)
uop_49 = relay.atan(uop_47.astype('float32')) # shape=(15, 13, 3)
output = relay.Tuple([bop_44,uop_49,])
output2 = relay.Tuple([bop_44,uop_49,])
func_51 = relay.Function([var_39,var_40,], output)
mod['func_51'] = func_51
mod = relay.transform.InferType()(mod)
mutated_mod['func_51'] = func_51
mutated_mod = relay.transform.InferType()(mutated_mod)
func_51_call = mutated_mod.get_global_var('func_51')
var_53 = relay.var("var_53", dtype = "uint64", shape = (15, 13, 3))#candidate|53|(15, 13, 3)|var|uint64
var_54 = relay.var("var_54", dtype = "uint64", shape = (15, 13, 3))#candidate|54|(15, 13, 3)|var|uint64
call_52 = func_51_call(var_53,var_54,)
output = call_52
func_55 = relay.Function([var_53,var_54,], output)
mutated_mod['func_55'] = func_55
mutated_mod = relay.transform.InferType()(mutated_mod)
var_57 = relay.var("var_57", dtype = "float32", shape = (4, 9, 12))#candidate|57|(4, 9, 12)|var|float32
uop_58 = relay.cos(var_57.astype('float32')) # shape=(4, 9, 12)
bop_60 = relay.right_shift(uop_58.astype('int32'), relay.reshape(var_57.astype('int32'), relay.shape_of(uop_58))) # shape=(4, 9, 12)
output = relay.Tuple([bop_60,])
output2 = relay.Tuple([bop_60,])
func_63 = relay.Function([var_57,], output)
mod['func_63'] = func_63
mod = relay.transform.InferType()(mod)
var_64 = relay.var("var_64", dtype = "float32", shape = (4, 9, 12))#candidate|64|(4, 9, 12)|var|float32
output = func_63(var_64)
func_65 = relay.Function([var_64], output)
mutated_mod['func_65'] = func_65
mutated_mod = relay.transform.InferType()(mutated_mod)
var_67 = relay.var("var_67", dtype = "float64", shape = ())#candidate|67|()|var|float64
uop_68 = relay.exp(var_67.astype('float64')) # shape=()
uop_70 = relay.sinh(uop_68.astype('float32')) # shape=()
uop_72 = relay.sin(uop_70.astype('float32')) # shape=()
const_74 = relay.const(-2.840902, dtype = "float32")#candidate|74|()|const|float32
bop_75 = relay.not_equal(uop_70.astype('bool'), const_74.astype('bool')) # shape=()
bop_78 = relay.less(var_67.astype('bool'), uop_68.astype('bool')) # shape=()
uop_81 = relay.acosh(uop_68.astype('float32')) # shape=()
uop_83 = relay.cos(uop_72.astype('float32')) # shape=()
uop_85 = relay.acos(uop_68.astype('float32')) # shape=()
uop_87 = relay.rsqrt(uop_72.astype('float32')) # shape=()
bop_89 = relay.power(uop_83.astype('float32'), uop_68.astype('float32')) # shape=()
uop_92 = relay.sqrt(bop_89.astype('float64')) # shape=()
uop_94 = relay.sqrt(uop_92.astype('float32')) # shape=()
var_96 = relay.var("var_96", dtype = "float64", shape = (2, 16))#candidate|96|(2, 16)|var|float64
bop_97 = relay.power(uop_92.astype('float32'), var_96.astype('float32')) # shape=(2, 16)
bop_100 = relay.add(uop_94.astype('int8'), uop_92.astype('int8')) # shape=()
var_103 = relay.var("var_103", dtype = "float32", shape = (15,))#candidate|103|(15,)|var|float32
bop_104 = relay.logical_and(uop_83.astype('bool'), var_103.astype('bool')) # shape=(15,)
uop_107 = relay.log10(uop_92.astype('float32')) # shape=()
uop_109 = relay.sigmoid(bop_100.astype('float64')) # shape=()
bop_111 = relay.logical_or(uop_109.astype('bool'), uop_81.astype('bool')) # shape=()
bop_114 = relay.greater_equal(bop_111.astype('bool'), uop_72.astype('bool')) # shape=()
bop_117 = relay.add(uop_109.astype('int16'), uop_81.astype('int16')) # shape=()
const_120 = relay.const(-3.347253, dtype = "float32")#candidate|120|()|const|float32
bop_121 = relay.mod(uop_72.astype('float32'), const_120.astype('float32')) # shape=()
bop_124 = relay.power(uop_92.astype('float64'), const_74.astype('float64')) # shape=()
bop_127 = relay.greater(bop_114.astype('bool'), uop_72.astype('bool')) # shape=()
uop_130 = relay.sin(bop_100.astype('float32')) # shape=()
bop_132 = relay.logical_and(uop_94.astype('bool'), uop_87.astype('bool')) # shape=()
uop_135 = relay.asinh(uop_130.astype('float64')) # shape=()
var_137 = relay.var("var_137", dtype = "int16", shape = ())#candidate|137|()|var|int16
bop_138 = relay.equal(bop_117.astype('bool'), var_137.astype('bool')) # shape=()
uop_141 = relay.asinh(bop_100.astype('float64')) # shape=()
uop_143 = relay.sigmoid(bop_111.astype('float64')) # shape=()
output = relay.Tuple([bop_75,bop_78,uop_85,bop_97,bop_104,uop_107,bop_121,bop_124,bop_127,bop_132,uop_135,bop_138,uop_141,uop_143,])
output2 = relay.Tuple([bop_75,bop_78,uop_85,bop_97,bop_104,uop_107,bop_121,bop_124,bop_127,bop_132,uop_135,bop_138,uop_141,uop_143,])
func_145 = relay.Function([var_67,var_96,var_103,var_137,], output)
mod['func_145'] = func_145
mod = relay.transform.InferType()(mod)
var_146 = relay.var("var_146", dtype = "float64", shape = ())#candidate|146|()|var|float64
var_147 = relay.var("var_147", dtype = "float64", shape = (2, 16))#candidate|147|(2, 16)|var|float64
var_148 = relay.var("var_148", dtype = "float32", shape = (15,))#candidate|148|(15,)|var|float32
var_149 = relay.var("var_149", dtype = "int16", shape = ())#candidate|149|()|var|int16
output = func_145(var_146,var_147,var_148,var_149,)
func_150 = relay.Function([var_146,var_147,var_148,var_149,], output)
mutated_mod['func_150'] = func_150
mutated_mod = relay.transform.InferType()(mutated_mod)
var_152 = relay.var("var_152", dtype = "int64", shape = ())#candidate|152|()|var|int64
var_153 = relay.var("var_153", dtype = "int64", shape = (1, 15, 4))#candidate|153|(1, 15, 4)|var|int64
bop_154 = relay.bitwise_or(var_152.astype('int64'), var_153.astype('int64')) # shape=(1, 15, 4)
uop_157 = relay.tan(bop_154.astype('float32')) # shape=(1, 15, 4)
uop_159 = relay.asinh(uop_157.astype('float32')) # shape=(1, 15, 4)
uop_161 = relay.acosh(uop_159.astype('float32')) # shape=(1, 15, 4)
uop_163 = relay.sin(uop_161.astype('float32')) # shape=(1, 15, 4)
uop_165 = relay.atanh(uop_163.astype('float32')) # shape=(1, 15, 4)
bop_167 = relay.divide(uop_163.astype('float32'), relay.reshape(uop_159.astype('float32'), relay.shape_of(uop_163))) # shape=(1, 15, 4)
uop_170 = relay.cos(uop_165.astype('float32')) # shape=(1, 15, 4)
uop_172 = relay.log(bop_167.astype('float32')) # shape=(1, 15, 4)
bop_174 = relay.divide(uop_170.astype('float64'), relay.reshape(uop_172.astype('float64'), relay.shape_of(uop_170))) # shape=(1, 15, 4)
output = bop_174
output2 = bop_174
func_177 = relay.Function([var_152,var_153,], output)
mod['func_177'] = func_177
mod = relay.transform.InferType()(mod)
mutated_mod['func_177'] = func_177
mutated_mod = relay.transform.InferType()(mutated_mod)
func_177_call = mutated_mod.get_global_var('func_177')
var_179 = relay.var("var_179", dtype = "int64", shape = ())#candidate|179|()|var|int64
var_180 = relay.var("var_180", dtype = "int64", shape = (1, 15, 4))#candidate|180|(1, 15, 4)|var|int64
call_178 = func_177_call(var_179,var_180,)
output = call_178
func_181 = relay.Function([var_179,var_180,], output)
mutated_mod['func_181'] = func_181
mutated_mod = relay.transform.InferType()(mutated_mod)
const_183 = relay.const([2.995624,1.299621,-1.736334,-2.058527,4.995491,1.628787,7.300020,0.774104,-2.983582], dtype = "float32")#candidate|183|(9,)|const|float32
uop_184 = relay.asinh(const_183.astype('float32')) # shape=(9,)
uop_186 = relay.exp(const_183.astype('float32')) # shape=(9,)
bop_188 = relay.bitwise_and(uop_186.astype('int64'), relay.reshape(const_183.astype('int64'), relay.shape_of(uop_186))) # shape=(9,)
uop_191 = relay.cosh(bop_188.astype('float64')) # shape=(9,)
uop_193 = relay.atan(uop_191.astype('float32')) # shape=(9,)
func_63_call = mod.get_global_var('func_63')
func_65_call = mutated_mod.get_global_var('func_65')
const_196 = relay.const([-6.500446,-3.936746,-7.341446,-9.524825,1.117176,8.779269,-8.216687,-9.480298,-2.623886,9.909846,8.521917,-5.695242,-5.699255,-8.303798,-9.457100,5.867658,9.834031,-7.652016,-2.936519,-8.635980,6.565308,8.158894,-6.866268,-3.878696,-0.115730,-7.920106,-9.374818,-0.572129,2.336661,5.177363,-7.436788,-8.366080,-9.162947,-4.274158,6.191827,-8.314002,-4.183952,-1.953452,-1.998399,1.030049,-8.262107,-2.638692,-1.167346,-2.021180,2.700540,8.641485,-9.002154,-3.110062,0.253615,3.409114,9.393312,1.956601,8.677576,-1.142247,8.228988,-6.282911,-7.597568,-0.624520,1.719857,-1.934786,-8.382250,4.983294,4.712289,-3.859218,-0.609970,3.458755,6.566307,0.834560,-6.630662,-1.215263,8.294277,8.840757,-1.050362,-0.926528,-4.227828,-8.948740,-4.663559,-1.377632,0.558111,-3.968300,-0.907128,0.270964,4.842913,2.942446,3.121267,0.376023,-5.034634,-8.025402,-9.387482,1.912658,5.247313,-7.834746,7.677846,9.718257,7.087266,-8.931076,9.304299,6.690724,-2.525303,-2.147844,2.430344,-4.309236,-1.625455,-7.924523,3.646505,-5.550778,4.492394,-6.376249,0.955052,-3.618677,-5.856540,-6.091894,-3.029500,-1.136244,-5.770351,-5.772762,-2.182453,-9.667518,0.277567,3.595202,-1.591651,6.579317,-6.313507,-2.089617,3.098776,-7.877394,6.382196,5.952786,1.947343,-3.699932,-9.972183,4.540594,4.328569,-8.068869,-2.595612,5.055945,4.591512,-8.245855,-8.584189,1.075043,9.755315,7.855177,-4.770718,2.219268,-4.573988,-4.038039,-4.999730,2.729301,5.841233,3.461147,-3.048858,-5.930713,0.577526,6.436986,0.939653,-4.318567,9.976118,6.371551,-6.075600,0.684212,-2.586785,-1.118849,8.529478,-5.504866,4.929781,-2.291430,-7.046054,7.620833,8.658184,7.953718,5.992835,-7.393250,-2.096790,-4.863027,-8.478437,8.089338,5.788862,8.476364,-0.001863,6.776243,9.422432,8.778154,-1.308078,-7.391718,2.239134,-6.972818,5.908704,1.057238,-3.423472,-5.616391,3.566089,8.678603,1.910201,6.943509,-2.637893,2.294241,-9.766799,1.286994,6.432664,7.966653,-8.874850,0.900134,-0.951631,0.913785,1.009571,8.126198,8.310238,5.432046,1.995606,-3.269302,-8.873272,-1.600657,-0.059108,4.780899,9.542660,9.395544,6.677415,7.572180,2.070453,-4.309558,-6.342476,-7.995931,0.711923,8.798317,-1.508082,-9.170373,2.362170,-9.780411,4.211577,-5.511752,-4.240570,-7.104485,-1.403859,1.247214,-0.528300,-3.964701,0.112558,-6.422143,5.048870,2.283783,-1.848442,-3.869437,-0.603320,6.231767,-0.994011,-9.010005,2.374929,-9.110619,-2.670933,-3.325770,-2.562808,-6.789810,5.874273,-8.197810,-1.892059,-3.489915,4.729784,-2.764209,8.626643,8.576893,6.585456,-4.297672,-8.520460,6.711380,-5.862106,6.042677,-2.191832,-1.184450,5.597869,-6.863562,7.676767,-5.890810,7.426471,-8.362003,-7.800649,6.205241,-0.435763,1.695159,-8.266828,0.923087,-3.192154,7.647600,-5.280848,-0.758914,-5.402497,2.679960,1.785874,6.800680,7.780581,-2.984829,5.065562,5.177387,7.020383,0.133289,6.379926,6.005478,0.159734,3.235397,-4.472876,0.117736,-6.928537,-2.259536,-1.466523,2.960196,-3.242215,-8.578509,2.890646,2.771792,-3.920234,-9.869823,5.721013,2.663593,7.633551,4.220863,-3.567264,-6.344163,3.200498,-5.987882,-4.269414,3.395026,6.310789,9.487294,-3.258347,-5.018826,1.748623,-9.411478,-3.032681,3.937425,-9.305769,4.036389,-4.011188,-2.740525,1.843406,1.801048,-7.479711,-3.428936,-0.723112,-6.797201,-5.749804,5.106514,6.106466,-5.746203,1.294831,4.415844,-6.733045,-4.252168,2.551081,5.487932,-8.359065,-3.813550,9.121041,-5.711777,-9.933997,-5.953181,3.223502,-9.623317,-3.097013,-1.892385,2.921045,8.392471,1.348673,-4.556222,-3.427822,6.809459,-6.097862,3.177510,-8.163430,-8.160908,-7.843192,3.951561,-5.191230,7.312598,-1.482159,3.577825,9.241431,-2.280289,-6.245707,7.139219,-8.261116,2.369692,0.861473,-1.203776,7.270443,-7.138893,-2.826954,3.787841,-1.889468,1.829276,9.942347,-6.155292,5.045338,9.086956,5.246303,1.418905,3.730345,-2.329903,8.260675,-0.263934,3.942138,1.783887,-7.971053,5.335618,5.099314,8.236531,2.268738,9.180759,-1.927783,-9.187219,-4.683112,6.911681,7.217156,-0.466022,6.551910,0.374458,1.307679,-9.227699,3.989679,-4.320155,-9.342518,5.106280,5.576110,-6.834208,0.731339,0.926978,-9.784361,5.390121,9.767314,9.104968,-9.998953,9.464545,5.348759,8.090719], dtype = "float32")#candidate|196|(432,)|const|float32
call_195 = relay.TupleGetItem(func_63_call(relay.reshape(const_196.astype('float32'), [4, 9, 12])), 0)
call_197 = relay.TupleGetItem(func_65_call(relay.reshape(const_196.astype('float32'), [4, 9, 12])), 0)
output = relay.Tuple([uop_184,uop_193,call_195,const_196,])
output2 = relay.Tuple([uop_184,uop_193,call_197,const_196,])
func_198 = relay.Function([], output)
mod['func_198'] = func_198
mod = relay.transform.InferType()(mod)
mutated_mod['func_198'] = func_198
mutated_mod = relay.transform.InferType()(mutated_mod)
func_198_call = mutated_mod.get_global_var('func_198')
call_199 = func_198_call()
output = call_199
func_200 = relay.Function([], output)
mutated_mod['func_200'] = func_200
mutated_mod = relay.transform.InferType()(mutated_mod)
var_201 = relay.var("var_201", dtype = "int16", shape = ())#candidate|201|()|var|int16
var_202 = relay.var("var_202", dtype = "int16", shape = (16, 16))#candidate|202|(16, 16)|var|int16
bop_203 = relay.bitwise_xor(var_201.astype('int16'), var_202.astype('int16')) # shape=(16, 16)
const_206 = relay.const([[3,-6,4,-10,1,6,6,3,3,-8,-7,10,-1,-3,-2,-8],[5,-9,2,-7,1,-10,-3,4,4,-8,1,4,10,1,-8,-9],[5,-3,-5,1,-6,-3,-5,-8,-1,9,4,-5,9,-4,-9,2],[-3,2,-7,-6,-3,5,7,6,-8,1,-8,-4,-4,-6,3,4],[4,4,8,-6,10,-10,3,-7,3,-2,-4,-8,7,1,1,-6],[1,6,-3,-4,-4,-9,4,-7,-4,8,5,8,9,2,5,4],[-1,7,3,-6,-10,3,3,-9,-10,6,-2,-7,-4,-10,8,-4],[2,-2,5,-3,5,8,-7,6,3,-1,8,7,-9,-8,-9,-6],[6,-8,-8,-5,-7,2,10,-9,1,2,-2,-1,4,-7,-4,7],[-3,-2,-8,-3,-1,-8,2,-6,1,-4,6,1,-9,-6,1,4],[8,2,-2,-10,-1,-4,6,-8,9,-8,-9,7,-9,-10,6,-2],[-7,-10,-3,-4,9,-7,-9,1,-9,4,-10,-6,6,9,10,-6],[-10,-8,9,7,-9,2,-1,5,-4,10,2,4,3,-7,7,-10],[2,-9,-1,8,3,9,2,6,4,9,3,1,-7,7,-4,10],[-8,-8,5,2,-5,-2,4,3,3,4,-5,1,5,-5,-6,6],[6,-4,1,7,-6,7,8,-10,1,-8,-8,10,7,-2,-2,1]], dtype = "int16")#candidate|206|(16, 16)|const|int16
bop_207 = relay.logical_or(bop_203.astype('bool'), relay.reshape(const_206.astype('bool'), relay.shape_of(bop_203))) # shape=(16, 16)
uop_210 = relay.erf(const_206.astype('float32')) # shape=(16, 16)
bop_212 = relay.bitwise_and(uop_210.astype('int8'), var_201.astype('int8')) # shape=(16, 16)
uop_215 = relay.erf(bop_212.astype('float64')) # shape=(16, 16)
uop_217 = relay.exp(uop_210.astype('float32')) # shape=(16, 16)
uop_219 = relay.sigmoid(uop_210.astype('float32')) # shape=(16, 16)
func_145_call = mod.get_global_var('func_145')
func_150_call = mutated_mod.get_global_var('func_150')
var_222 = relay.var("var_222", dtype = "float64", shape = (32,))#candidate|222|(32,)|var|float64
var_223 = relay.var("var_223", dtype = "float32", shape = (15,))#candidate|223|(15,)|var|float32
call_221 = relay.TupleGetItem(func_145_call(relay.reshape(var_201.astype('float64'), []), relay.reshape(var_222.astype('float64'), [2, 16]), relay.reshape(var_223.astype('float32'), [15,]), relay.reshape(var_201.astype('int16'), []), ), 2)
call_224 = relay.TupleGetItem(func_150_call(relay.reshape(var_201.astype('float64'), []), relay.reshape(var_222.astype('float64'), [2, 16]), relay.reshape(var_223.astype('float32'), [15,]), relay.reshape(var_201.astype('int16'), []), ), 2)
bop_225 = relay.less_equal(uop_210.astype('bool'), relay.reshape(bop_212.astype('bool'), relay.shape_of(uop_210))) # shape=(16, 16)
output = relay.Tuple([bop_207,uop_215,uop_217,uop_219,call_221,var_222,var_223,bop_225,])
output2 = relay.Tuple([bop_207,uop_215,uop_217,uop_219,call_224,var_222,var_223,bop_225,])
func_228 = relay.Function([var_201,var_202,var_222,var_223,], output)
mod['func_228'] = func_228
mod = relay.transform.InferType()(mod)
mutated_mod['func_228'] = func_228
mutated_mod = relay.transform.InferType()(mutated_mod)
func_228_call = mutated_mod.get_global_var('func_228')
var_230 = relay.var("var_230", dtype = "int16", shape = ())#candidate|230|()|var|int16
var_231 = relay.var("var_231", dtype = "int16", shape = (16, 16))#candidate|231|(16, 16)|var|int16
var_232 = relay.var("var_232", dtype = "float64", shape = (32,))#candidate|232|(32,)|var|float64
var_233 = relay.var("var_233", dtype = "float32", shape = (15,))#candidate|233|(15,)|var|float32
call_229 = func_228_call(var_230,var_231,var_232,var_233,)
output = call_229
func_234 = relay.Function([var_230,var_231,var_232,var_233,], output)
mutated_mod['func_234'] = func_234
mutated_mod = relay.transform.InferType()(mutated_mod)
var_236 = relay.var("var_236", dtype = "int8", shape = (9, 6))#candidate|236|(9, 6)|var|int8
var_237 = relay.var("var_237", dtype = "int8", shape = (9, 6))#candidate|237|(9, 6)|var|int8
bop_238 = relay.bitwise_xor(var_236.astype('int8'), relay.reshape(var_237.astype('int8'), relay.shape_of(var_236))) # shape=(9, 6)
uop_241 = relay.sqrt(var_237.astype('float32')) # shape=(9, 6)
uop_243 = relay.sinh(uop_241.astype('float32')) # shape=(9, 6)
bop_245 = relay.maximum(uop_243.astype('uint16'), relay.reshape(var_236.astype('uint16'), relay.shape_of(uop_243))) # shape=(9, 6)
bop_248 = relay.divide(bop_245.astype('float32'), relay.reshape(var_237.astype('float32'), relay.shape_of(bop_245))) # shape=(9, 6)
uop_251 = relay.sqrt(bop_245.astype('float32')) # shape=(9, 6)
uop_253 = relay.atanh(bop_248.astype('float32')) # shape=(9, 6)
uop_255 = relay.acos(uop_243.astype('float64')) # shape=(9, 6)
uop_257 = relay.sin(uop_241.astype('float64')) # shape=(9, 6)
func_63_call = mod.get_global_var('func_63')
func_65_call = mutated_mod.get_global_var('func_65')
const_260 = relay.const([-8.774626,-3.609445,-9.836120,-0.691692,9.065364,-6.630314,9.150699,-0.417528,-4.808463,6.326443,-2.366704,-0.766454,9.892202,7.623485,-1.642216,-7.679180,-5.869817,-5.524680,9.121800,-1.468183,-6.684107,-9.129856,4.326922,-3.955453,-1.536424,7.011861,2.885827,-6.433792,-7.025067,-5.204182,5.845856,5.430228,4.761702,5.728437,9.078984,1.832180,-6.827116,4.954810,-9.100676,4.173674,-9.790692,3.056722,-1.171977,-0.998957,-9.654972,-5.653804,7.536017,8.159565,0.542522,9.801893,-5.528179,-2.641543,0.425144,2.517984,-7.802628,-1.946570,0.113307,-1.212024,-0.838704,4.528059,2.184912,-9.285679,8.080194,9.829532,-1.734331,6.480903,7.603031,-8.547585,-1.368736,4.532784,-1.592971,6.166693,3.102526,-2.812621,-7.906320,-9.092184,8.037319,-8.029461,-7.564645,4.537159,4.157194,-8.994821,1.158142,0.475960,-0.751495,-0.328999,-9.414118,-3.116154,5.795786,7.388792,-4.972951,-5.202045,6.965635,7.851552,-6.803243,-4.634448,1.654542,5.019887,8.710658,-6.237268,3.604900,9.739103,-3.984989,1.281437,-3.910425,9.435565,0.179059,-4.002837,0.046592,-2.709021,-9.631524,7.749790,6.446107,-9.620060,5.302570,-7.141801,9.651401,-8.614894,-1.484382,-4.852911,4.641439,7.780451,1.987026,7.127699,6.660085,-3.535728,-5.988309,-6.760226,-8.216725,5.105166,7.584926,-1.984721,6.518617,5.293983,9.329969,-4.176834,4.327316,2.258928,5.397018,3.025874,-2.250030,-0.387571,3.675331,9.374466,-1.155107,4.785942,-7.057649,-9.205926,7.969382,4.594080,3.836549,4.100184,-3.529569,8.395929,0.816449,-4.514063,4.705442,-0.731920,5.831516,-1.965326,-0.891402,-2.414681,-9.796452,-2.554892,-1.265611,-3.761297,9.491598,-5.178541,-4.432612,3.412070,6.946426,6.517825,4.469481,8.432257,4.606548,-6.398536,-3.637547,4.135871,3.542398,-8.282295,3.070006,-7.576297,-1.967949,-2.887861,-6.769166,-9.362256,-9.183782,-3.871104,5.377454,-2.479489,-9.573413,5.533373,8.840888,8.430353,-6.385261,-0.210283,-0.110310,6.934961,-4.266150,4.555644,3.258329,-2.177260,8.997407,2.824338,-2.403588,-1.767879,-2.658568,1.575673,-8.681429,2.507940,-4.128934,-7.320849,-5.209885,1.673633,-2.969389,7.002832,-7.737124,9.318795,0.280408,2.539103,-7.685952,-3.325325,0.614493,2.027535,-7.132151,-2.187261,-8.215430,5.690978,-5.632959,0.424387,3.807548,1.772628,-9.217544,5.169195,4.625211,-8.623490,-7.398368,8.725103,-3.424787,1.785337,7.282049,-1.812750,3.320293,-1.837887,-9.511042,-8.409002,-5.422786,-2.966345,-9.516701,-3.089034,-2.161629,4.902678,1.703650,-0.317674,4.650259,-3.011104,4.645692,0.456526,-4.910599,6.421780,2.885715,-4.104532,9.482650,6.082184,0.939453,2.594504,-9.084280,-0.032973,1.497659,1.310169,2.677590,6.767093,-9.835827,5.324066,-6.061527,-1.883445,-9.607874,-5.793279,5.148460,6.428699,0.326025,-5.263569,8.726420,-2.549421,7.284463,-4.457534,0.742414,2.560520,-1.709522,2.065178,2.876559,-1.895210,-9.370171,7.126667,-4.558791,-1.686657,-0.124062,5.291543,-2.665939,-6.950947,-3.567171,-1.729979,8.413102,0.106367,-4.795967,-7.656807,-8.783914,1.619896,3.993590,-4.067610,7.294626,-6.687747,1.494861,8.599022,4.987450,9.711293,-5.842558,0.376793,-2.537812,9.702759,8.072384,-6.856930,0.757887,1.410333,8.717916,-9.958033,-3.712701,-8.190115,4.238757,3.768357,7.341824,-4.228507,-6.797956,9.308029,-6.347438,2.922696,1.709011,-9.936687,6.715458,1.674532,8.068052,7.359146,-5.871554,-3.480372,-9.798691,-2.457453,-5.406515,0.952023,8.508497,6.599252,-8.704756,0.431060,1.613963,-9.298365,5.137810,0.623155,4.068919,8.565119,-6.345626,7.966930,1.125811,-5.192032,-0.249111,7.332048,0.630381,-3.636960,5.951477,2.161914,8.235714,-3.669476,5.138279,8.616067,-8.468479,0.769744,-7.301233,4.413773,-4.094204,-9.051747,-8.941747,-5.751558,-5.939300,3.023601,0.405531,-0.502213,-4.929838,2.666932,-5.660972,-1.430633,2.646315,5.752649,1.729184,-9.599064,3.001676,-5.696968,-2.456137,4.302751,4.710891,-5.279403,8.365312,0.944157,3.195245,7.148125,-0.425948,3.068112,3.375372,3.030950,4.336338,3.367171,-5.842132,-2.055371,-2.437284,-3.581765,-8.172090,-3.254812,7.508175,6.435485,9.800972,2.385309,8.148861,3.079152,0.948408,2.761050,-2.845680,5.319380,-1.718104,2.477331,1.281557,1.557804,1.587326,0.118036,8.411900,0.364576], dtype = "float32")#candidate|260|(432,)|const|float32
call_259 = relay.TupleGetItem(func_63_call(relay.reshape(const_260.astype('float32'), [4, 9, 12])), 0)
call_261 = relay.TupleGetItem(func_65_call(relay.reshape(const_260.astype('float32'), [4, 9, 12])), 0)
uop_262 = relay.erf(uop_251.astype('float32')) # shape=(9, 6)
bop_264 = relay.logical_xor(uop_255.astype('uint64'), relay.reshape(bop_245.astype('uint64'), relay.shape_of(uop_255))) # shape=(9, 6)
func_198_call = mod.get_global_var('func_198')
func_200_call = mutated_mod.get_global_var('func_200')
call_267 = relay.TupleGetItem(func_198_call(), 0)
call_268 = relay.TupleGetItem(func_200_call(), 0)
bop_269 = relay.left_shift(bop_245.astype('int32'), relay.reshape(bop_264.astype('int32'), relay.shape_of(bop_245))) # shape=(9, 6)
uop_272 = relay.atanh(uop_262.astype('float64')) # shape=(9, 6)
bop_274 = relay.right_shift(uop_262.astype('int64'), relay.reshape(uop_272.astype('int64'), relay.shape_of(uop_262))) # shape=(9, 6)
var_277 = relay.var("var_277", dtype = "int64", shape = (9, 6))#candidate|277|(9, 6)|var|int64
bop_278 = relay.bitwise_and(bop_274.astype('int64'), relay.reshape(var_277.astype('int64'), relay.shape_of(bop_274))) # shape=(9, 6)
uop_281 = relay.log10(bop_274.astype('float32')) # shape=(9, 6)
uop_283 = relay.acosh(uop_281.astype('float64')) # shape=(9, 6)
uop_285 = relay.asinh(bop_278.astype('float64')) # shape=(9, 6)
uop_287 = relay.erf(uop_283.astype('float64')) # shape=(9, 6)
bop_289 = relay.add(uop_287.astype('uint32'), relay.reshape(uop_255.astype('uint32'), relay.shape_of(uop_287))) # shape=(9, 6)
uop_292 = relay.asinh(uop_285.astype('float64')) # shape=(9, 6)
uop_294 = relay.atanh(bop_289.astype('float32')) # shape=(9, 6)
output = relay.Tuple([bop_238,uop_253,uop_257,call_259,const_260,call_267,bop_269,uop_292,uop_294,])
output2 = relay.Tuple([bop_238,uop_253,uop_257,call_261,const_260,call_268,bop_269,uop_292,uop_294,])
func_296 = relay.Function([var_236,var_237,var_277,], output)
mod['func_296'] = func_296
mod = relay.transform.InferType()(mod)
mutated_mod['func_296'] = func_296
mutated_mod = relay.transform.InferType()(mutated_mod)
func_296_call = mutated_mod.get_global_var('func_296')
var_298 = relay.var("var_298", dtype = "int8", shape = (9, 6))#candidate|298|(9, 6)|var|int8
var_299 = relay.var("var_299", dtype = "int8", shape = (9, 6))#candidate|299|(9, 6)|var|int8
var_300 = relay.var("var_300", dtype = "int64", shape = (9, 6))#candidate|300|(9, 6)|var|int64
call_297 = func_296_call(var_298,var_299,var_300,)
output = call_297
func_301 = relay.Function([var_298,var_299,var_300,], output)
mutated_mod['func_301'] = func_301
mutated_mod = relay.transform.InferType()(mutated_mod)
var_303 = relay.var("var_303", dtype = "int64", shape = ())#candidate|303|()|var|int64
const_304 = relay.const(-2, dtype = "int64")#candidate|304|()|const|int64
bop_305 = relay.left_shift(var_303.astype('int64'), const_304.astype('int64')) # shape=()
var_308 = relay.var("var_308", dtype = "int64", shape = (14, 6, 3))#candidate|308|(14, 6, 3)|var|int64
bop_309 = relay.power(var_303.astype('float32'), var_308.astype('float32')) # shape=(14, 6, 3)
uop_312 = relay.sigmoid(bop_309.astype('float64')) # shape=(14, 6, 3)
uop_314 = relay.sqrt(bop_305.astype('float32')) # shape=()
uop_316 = relay.asin(uop_312.astype('float64')) # shape=(14, 6, 3)
uop_318 = relay.tan(uop_314.astype('float32')) # shape=()
bop_320 = relay.subtract(var_308.astype('int32'), var_303.astype('int32')) # shape=(14, 6, 3)
const_323 = relay.const(8.563840, dtype = "float32")#candidate|323|()|const|float32
bop_324 = relay.floor_divide(uop_314.astype('float32'), const_323.astype('float32')) # shape=()
uop_327 = relay.sigmoid(bop_324.astype('float64')) # shape=()
bop_329 = relay.greater_equal(bop_324.astype('bool'), uop_314.astype('bool')) # shape=()
bop_332 = relay.less(const_304.astype('bool'), const_323.astype('bool')) # shape=()
output = relay.Tuple([uop_316,uop_318,bop_320,uop_327,bop_329,bop_332,])
output2 = relay.Tuple([uop_316,uop_318,bop_320,uop_327,bop_329,bop_332,])
F = relay.Function([var_303,var_308,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_303,var_308,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_303= np.array(8, dtype='int64')
module1.set_input('var_303', input_303)
input_308= np.array([[[-4,-10,-1],[5,-8,-3],[-4,4,5],[2,-1,-10],[-4,-4,-5],[-8,1,1]],[[-2,-5,3],[-1,-8,4],[8,-5,-7],[-9,-1,9],[-5,5,6],[9,4,-8]],[[-4,3,-5],[-5,3,3],[5,2,-5],[2,-5,-10],[-4,-10,-5],[-3,-9,-10]],[[3,7,-5],[7,-2,-8],[7,1,-8],[6,-9,8],[5,2,-10],[-6,8,-3]],[[4,5,-9],[5,4,2],[6,-3,4],[-9,-7,-5],[-3,-1,6],[6,-4,-8]],[[-5,-10,10],[2,-2,8],[-8,-7,8],[-1,-4,-2],[8,10,8],[-6,-10,1]],[[-10,3,9],[10,-2,4],[10,1,-10],[4,-8,10],[10,-8,-2],[-10,3,6]],[[9,-1,4],[9,1,-8],[2,6,4],[-5,-2,5],[-3,8,-10],[-9,-2,-8]],[[-6,-10,8],[7,-2,7],[1,-2,-6],[-8,-4,4],[-3,-3,-3],[-1,9,-3]],[[1,-6,-5],[1,-6,8],[10,2,2],[-9,8,10],[-4,-10,4],[9,-5,8]],[[-9,-3,-2],[10,7,-9],[7,4,10],[9,-4,-7],[4,4,3],[9,-3,-9]],[[-5,10,-1],[1,-6,3],[8,8,-1],[-10,2,-4],[6,-7,10],[-5,-6,-9]],[[1,-5,6],[3,-8,-7],[5,-3,9],[-2,-3,-3],[6,9,2],[-1,9,-2]],[[-1,-2,5],[7,-5,6],[10,-1,6],[9,4,6],[-8,-1,-10],[-6,5,2]]], dtype='int64')
module1.set_input('var_308', input_308)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_303, input_308, )
res3 = intrp3.evaluate()(input_303, input_308, )
res4 = intrp4.evaluate()(input_303, input_308, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
module5.set_input('var_303', input_303)
module5.set_input('var_308', input_308)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_303, input_308, )
res7 = intrp7.evaluate()(input_303, input_308, )
res8 = intrp8.evaluate()(input_303, input_308, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
module9.set_input('var_303', input_303)
module9.set_input('var_308', input_308)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_303, input_308, )
res11 = intrp11.evaluate()(input_303, input_308, )
res12 = intrp12.evaluate()(input_303, input_308, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
module13.set_input('var_303', input_303)
module13.set_input('var_308', input_308)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_303, input_308, )
res15 = intrp15.evaluate()(input_303, input_308, )
res16 = intrp16.evaluate()(input_303, input_308, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
module17.set_input('var_303', input_303)
module17.set_input('var_308', input_308)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_303, input_308, )
res19 = intrp19.evaluate()(input_303, input_308, )
res20 = intrp20.evaluate()(input_303, input_308, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
module21.set_input('var_303', input_303)
module21.set_input('var_308', input_308)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_303, input_308, )
res23 = intrp23.evaluate()(input_303, input_308, )
res24 = intrp24.evaluate()(input_303, input_308, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()

'''70: TVMFuncCall
69: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
68: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
67: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
66: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
65: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
64: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
63: tvm::transform::Pass::operator()(tvm::IRModule) const
62: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
61: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
60: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
59: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
58: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
57: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
56: tvm::transform::Pass::operator()(tvm::IRModule) const
55: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
54: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
53: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
52: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
51: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
50: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
49: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
48: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
47: _ZN3tvm5relay9transform22Devic
46: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
45: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
44: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
43: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
42: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
41: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
40: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
39: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
38: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
37: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
36: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
35: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
34: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
33: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
32: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
31: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
30: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
29: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
28: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::te::Tensor, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
27: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::runtime::ObjectRef, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
26: tvm::LowerWithPassList(tvm::IRModule, tvm::runtime::Array<tvm::transform::Pass, void>)
25: tvm::transform::Pass::operator()(tvm::IRModule) const
24: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
23: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
22: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
21: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
20: _ZNSt17_Function_handlerIFvN3tvm7
19: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
18: tvm::tir::DataTypeRewriter::operator()(tvm::tir::Stmt)
17: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
16: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::StoreNode const*)
15: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
14: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
13: _ZThn16_N3tvm3tir16DataTyp
12: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
11: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CallNode const*)
10: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
9: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS
8: _ZThn16_N3tvm3tir16DataTyp
7: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CastNode const*)
6: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CastNode const*)
5: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
4: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
3: _ZThn16_N3tvm3tir16DataTyp
2: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
1: tvm::operator<<(tvm::PrimExpr, tvm::PrimExpr)
0: tvm::left_shift(tvm::PrimExpr, tvm::PrimExpr, tvm::Span)

'''