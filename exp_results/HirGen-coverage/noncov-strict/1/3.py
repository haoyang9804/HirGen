import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (5, 2, 15))#candidate|0|(5, 2, 15)|var|float64
var_1 = relay.var("var_1", dtype = "float64", shape = (5, 2, 15))#candidate|1|(5, 2, 15)|var|float64
bop_2 = relay.floor_mod(var_0.astype('float64'), relay.reshape(var_1.astype('float64'), relay.shape_of(var_0))) # shape=(5, 2, 15)
bop_5 = relay.subtract(var_0.astype('float32'), relay.reshape(bop_2.astype('float32'), relay.shape_of(var_0))) # shape=(5, 2, 15)
bop_8 = relay.subtract(var_1.astype('uint32'), relay.reshape(var_0.astype('uint32'), relay.shape_of(var_1))) # shape=(5, 2, 15)
output = relay.Tuple([bop_5,bop_8,])
output2 = relay.Tuple([bop_5,bop_8,])
func_11 = relay.Function([var_0,var_1,], output)
mod['func_11'] = func_11
mod = relay.transform.InferType()(mod)
mutated_mod['func_11'] = func_11
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11_call = mutated_mod.get_global_var('func_11')
var_13 = relay.var("var_13", dtype = "float64", shape = (5, 2, 15))#candidate|13|(5, 2, 15)|var|float64
var_14 = relay.var("var_14", dtype = "float64", shape = (5, 2, 15))#candidate|14|(5, 2, 15)|var|float64
call_12 = func_11_call(var_13,var_14,)
output = call_12
func_15 = relay.Function([var_13,var_14,], output)
mutated_mod['func_15'] = func_15
mutated_mod = relay.transform.InferType()(mutated_mod)
var_17 = relay.var("var_17", dtype = "uint16", shape = ())#candidate|17|()|var|uint16
const_18 = relay.const([[9,-9,9,-7,4],[-10,7,10,7,-8],[-10,-9,5,2,-5],[-9,-6,-7,6,-6],[8,-9,-1,8,-4],[3,7,2,9,-2],[-9,-9,9,2,10]], dtype = "uint16")#candidate|18|(7, 5)|const|uint16
bop_19 = relay.bitwise_or(var_17.astype('uint16'), const_18.astype('uint16')) # shape=(7, 5)
bop_22 = relay.right_shift(bop_19.astype('int64'), var_17.astype('int64')) # shape=(7, 5)
uop_25 = relay.atan(var_17.astype('float32')) # shape=()
bop_27 = relay.add(var_17.astype('float32'), bop_19.astype('float32')) # shape=(7, 5)
bop_30 = relay.left_shift(uop_25.astype('uint64'), bop_19.astype('uint64')) # shape=(7, 5)
uop_33 = relay.cosh(bop_30.astype('float64')) # shape=(7, 5)
bop_35 = relay.not_equal(uop_33.astype('bool'), var_17.astype('bool')) # shape=(7, 5)
bop_38 = relay.add(uop_33.astype('float32'), relay.reshape(bop_19.astype('float32'), relay.shape_of(uop_33))) # shape=(7, 5)
uop_41 = relay.cos(uop_33.astype('float32')) # shape=(7, 5)
bop_43 = relay.mod(bop_38.astype('float32'), var_17.astype('float32')) # shape=(7, 5)
uop_46 = relay.log2(uop_41.astype('float64')) # shape=(7, 5)
bop_48 = relay.bitwise_xor(uop_25.astype('uint16'), var_17.astype('uint16')) # shape=()
bop_51 = relay.left_shift(uop_46.astype('uint64'), relay.reshape(bop_27.astype('uint64'), relay.shape_of(uop_46))) # shape=(7, 5)
var_54 = relay.var("var_54", dtype = "uint16", shape = ())#candidate|54|()|var|uint16
bop_55 = relay.equal(bop_48.astype('bool'), var_54.astype('bool')) # shape=()
var_58 = relay.var("var_58", dtype = "float32", shape = (7, 5))#candidate|58|(7, 5)|var|float32
bop_59 = relay.right_shift(uop_41.astype('uint8'), relay.reshape(var_58.astype('uint8'), relay.shape_of(uop_41))) # shape=(7, 5)
uop_62 = relay.sinh(bop_22.astype('float64')) # shape=(7, 5)
var_64 = relay.var("var_64", dtype = "float32", shape = (7, 5))#candidate|64|(7, 5)|var|float32
bop_65 = relay.power(bop_43.astype('float32'), relay.reshape(var_64.astype('float32'), relay.shape_of(bop_43))) # shape=(7, 5)
uop_68 = relay.log10(const_18.astype('float32')) # shape=(7, 5)
const_70 = relay.const([[5.067351,-3.998809,-4.520293,1.979161,3.229194],[-3.475710,-0.457168,7.275519,-8.526124,9.822685],[-8.955632,-3.339902,-6.986179,-2.992315,3.166149],[6.954987,-6.764612,-4.367757,-9.485661,4.564346],[-6.790807,9.563197,-9.969463,1.174037,-0.859228],[-1.315961,-4.171602,5.461180,-8.697431,-9.966409],[9.782642,-8.716742,8.564065,-4.794801,-8.137194]], dtype = "float64")#candidate|70|(7, 5)|const|float64
bop_71 = relay.right_shift(uop_46.astype('uint32'), relay.reshape(const_70.astype('uint32'), relay.shape_of(uop_46))) # shape=(7, 5)
func_11_call = mod.get_global_var('func_11')
func_15_call = mutated_mod.get_global_var('func_15')
const_75 = relay.const([3.890151,-9.368367,-4.746509,-9.865711,3.803712,-2.914037,3.306360,-4.814599,8.522271,7.947661,8.093904,-9.095485,4.258555,2.153260,1.279090,-4.484210,7.078032,8.701912,5.752893,-5.620390,9.405460,-6.272044,-6.459279,5.732928,7.704453,9.895740,-7.282528,1.318004,6.583176,-9.095431,-7.175081,2.319254,-9.687485,1.935199,1.960649,-3.707248,4.285920,8.020568,8.386988,3.353752,-1.822712,7.943296,-2.172517,-7.628425,4.798001,6.371603,3.257621,6.827458,2.935499,7.006119,-5.764468,-3.682826,-1.075627,-9.568994,-3.113146,-8.356387,-3.140978,0.823320,-8.024138,-8.390928,-2.887537,4.760679,1.325586,3.681912,-7.131396,2.172887,-2.098789,-4.390402,7.666394,-8.556543,-2.777837,-5.098729,-2.637601,-7.606498,5.015199,0.599220,-2.363054,3.227508,4.984267,-6.632543,5.232773,2.609525,0.463106,-4.613332,-1.577040,-5.700790,6.666641,1.450987,-2.448794,8.971499,-4.225440,-2.655800,7.961286,-4.078305,-5.409583,-0.235620,-0.886003,-2.901684,5.213925,5.128807,6.039775,1.775983,-7.924106,0.786439,-5.567311,8.284261,7.425302,6.768271,7.234296,0.634331,-2.362144,-3.422267,1.146527,9.242423,5.375298,-9.904506,-5.164168,-1.998127,-0.786152,-4.883944,-2.474299,-0.817934,6.488266,-9.663565,1.615049,-4.035051,-0.029788,7.174295,7.929388,-7.922334,7.871694,-3.417289,-1.988054,-5.773823,-7.348533,4.252409,-0.810617,-6.464545,3.252382,6.064142,-3.156016,2.486517,-5.928797,3.967733,0.523014,-1.860386,-9.869469,-5.513008,5.066930,-0.934290], dtype = "float64")#candidate|75|(150,)|const|float64
call_74 = relay.TupleGetItem(func_11_call(relay.reshape(const_75.astype('float64'), [5, 2, 15]), relay.reshape(const_75.astype('float64'), [5, 2, 15]), ), 0)
call_76 = relay.TupleGetItem(func_15_call(relay.reshape(const_75.astype('float64'), [5, 2, 15]), relay.reshape(const_75.astype('float64'), [5, 2, 15]), ), 0)
bop_77 = relay.maximum(bop_59.astype('uint32'), bop_55.astype('uint32')) # shape=(7, 5)
bop_80 = relay.not_equal(bop_59.astype('bool'), relay.reshape(bop_38.astype('bool'), relay.shape_of(bop_59))) # shape=(7, 5)
uop_83 = relay.acosh(uop_46.astype('float64')) # shape=(7, 5)
bop_85 = relay.bitwise_or(bop_77.astype('uint32'), relay.reshape(uop_68.astype('uint32'), relay.shape_of(bop_77))) # shape=(7, 5)
uop_88 = relay.sinh(uop_83.astype('float64')) # shape=(7, 5)
var_90 = relay.var("var_90", dtype = "float64", shape = (7, 5))#candidate|90|(7, 5)|var|float64
bop_91 = relay.less(uop_88.astype('bool'), relay.reshape(var_90.astype('bool'), relay.shape_of(uop_88))) # shape=(7, 5)
bop_94 = relay.power(bop_71.astype('float32'), relay.reshape(bop_19.astype('float32'), relay.shape_of(bop_71))) # shape=(7, 5)
uop_97 = relay.sinh(bop_51.astype('float32')) # shape=(7, 5)
var_99 = relay.var("var_99", dtype = "float64", shape = (7, 5))#candidate|99|(7, 5)|var|float64
bop_100 = relay.logical_or(uop_83.astype('bool'), relay.reshape(var_99.astype('bool'), relay.shape_of(uop_83))) # shape=(7, 5)
uop_103 = relay.tan(bop_100.astype('float32')) # shape=(7, 5)
uop_105 = relay.sigmoid(bop_100.astype('float64')) # shape=(7, 5)
uop_107 = relay.atan(uop_105.astype('float64')) # shape=(7, 5)
bop_109 = relay.logical_or(uop_107.astype('bool'), relay.reshape(bop_100.astype('bool'), relay.shape_of(uop_107))) # shape=(7, 5)
uop_112 = relay.acosh(bop_109.astype('float64')) # shape=(7, 5)
const_114 = relay.const([[-4.968002,7.617163,-8.731011,-6.146344,-3.653045],[9.765837,4.482053,1.222589,4.084108,-7.885464],[7.413958,8.257148,5.389988,-4.550593,0.048974],[-2.908225,8.548615,9.197581,2.327677,-1.187675],[8.388642,3.603094,-2.419292,-1.341093,0.010486],[2.752030,7.888345,1.499366,1.387268,8.649883],[-7.915261,-9.153126,1.406428,1.720600,-6.819074]], dtype = "float64")#candidate|114|(7, 5)|const|float64
bop_115 = relay.minimum(uop_112.astype('float32'), relay.reshape(const_114.astype('float32'), relay.shape_of(uop_112))) # shape=(7, 5)
bop_118 = relay.bitwise_xor(uop_103.astype('uint64'), relay.reshape(uop_112.astype('uint64'), relay.shape_of(uop_103))) # shape=(7, 5)
bop_121 = relay.left_shift(bop_109.astype('int8'), relay.reshape(var_90.astype('int8'), relay.shape_of(bop_109))) # shape=(7, 5)
output = relay.Tuple([bop_35,uop_62,bop_65,call_74,const_75,bop_80,bop_85,bop_91,bop_94,uop_97,bop_115,bop_118,bop_121,])
output2 = relay.Tuple([bop_35,uop_62,bop_65,call_76,const_75,bop_80,bop_85,bop_91,bop_94,uop_97,bop_115,bop_118,bop_121,])
func_124 = relay.Function([var_17,var_54,var_58,var_64,var_90,var_99,], output)
mod['func_124'] = func_124
mod = relay.transform.InferType()(mod)
var_125 = relay.var("var_125", dtype = "uint16", shape = ())#candidate|125|()|var|uint16
var_126 = relay.var("var_126", dtype = "uint16", shape = ())#candidate|126|()|var|uint16
var_127 = relay.var("var_127", dtype = "float32", shape = (7, 5))#candidate|127|(7, 5)|var|float32
var_128 = relay.var("var_128", dtype = "float32", shape = (7, 5))#candidate|128|(7, 5)|var|float32
var_129 = relay.var("var_129", dtype = "float64", shape = (7, 5))#candidate|129|(7, 5)|var|float64
var_130 = relay.var("var_130", dtype = "float64", shape = (7, 5))#candidate|130|(7, 5)|var|float64
output = func_124(var_125,var_126,var_127,var_128,var_129,var_130,)
func_131 = relay.Function([var_125,var_126,var_127,var_128,var_129,var_130,], output)
mutated_mod['func_131'] = func_131
mutated_mod = relay.transform.InferType()(mutated_mod)
const_133 = relay.const([[[-1,10,6,4,1,-6,3,4],[5,-9,-6,-10,8,-1,-5,-10],[-10,4,4,-6,9,1,6,-1]],[[7,5,-1,-2,-3,3,-7,-6],[5,-5,-7,4,-2,9,-10,1],[10,-3,-1,3,1,3,1,7]],[[1,-7,-2,6,7,4,-6,7],[10,-1,4,-6,2,-2,-1,10],[-10,2,-1,-8,4,6,-6,7]],[[2,9,-2,2,6,-8,5,-9],[-9,9,-9,-8,10,2,8,1],[9,-7,-5,-6,7,8,-4,-8]],[[-9,-10,-3,-1,2,-8,7,10],[9,9,-10,-5,-1,-8,-3,7],[-3,-2,5,1,1,10,9,3]],[[9,2,-9,6,-3,4,-1,9],[7,-10,7,10,1,5,1,-7],[-10,-2,7,8,2,-7,-10,-7]],[[-10,-9,-8,-4,-10,8,6,4],[6,2,3,7,-1,-10,-3,-8],[-6,9,-6,3,-3,-7,-10,-5]],[[-6,2,-9,7,-3,1,-6,8],[-5,-5,1,9,1,-3,9,-7],[-6,-6,-8,-3,2,7,-4,-9]],[[2,-2,-2,-9,10,-5,-9,-8],[3,-8,-9,-2,-6,10,-3,-8],[10,10,-4,-4,10,-5,-2,-3]],[[-7,8,3,-8,10,-8,-4,8],[8,-6,6,9,9,-2,-7,8],[8,-1,-7,-2,8,7,-8,-5]],[[-4,1,3,3,-3,5,-2,5],[10,-4,6,1,8,5,-5,-6],[-3,7,8,8,-7,-3,-7,-2]],[[6,-1,2,8,1,5,6,-5],[8,-7,-5,8,-7,4,9,8],[-2,10,4,-3,1,-1,9,8]],[[-1,6,7,8,6,7,-6,3],[-5,-1,8,3,1,-8,1,10],[8,-6,1,-10,-5,-4,-3,10]],[[-9,8,4,9,-7,-6,3,-10],[1,8,1,-8,-7,9,9,-10],[10,-6,-1,-10,1,7,-1,7]],[[-5,5,-4,-2,7,-3,-1,-3],[-4,5,-5,4,-10,-10,-1,2],[-1,-2,2,-8,-5,3,7,-7]]], dtype = "uint16")#candidate|133|(15, 3, 8)|const|uint16
var_134 = relay.var("var_134", dtype = "uint16", shape = (15, 3, 8))#candidate|134|(15, 3, 8)|var|uint16
bop_135 = relay.left_shift(const_133.astype('uint16'), relay.reshape(var_134.astype('uint16'), relay.shape_of(const_133))) # shape=(15, 3, 8)
uop_138 = relay.log10(var_134.astype('float32')) # shape=(15, 3, 8)
bop_140 = relay.minimum(uop_138.astype('uint64'), relay.reshape(bop_135.astype('uint64'), relay.shape_of(uop_138))) # shape=(15, 3, 8)
uop_143 = relay.sigmoid(bop_140.astype('float64')) # shape=(15, 3, 8)
uop_145 = relay.erf(uop_143.astype('float64')) # shape=(15, 3, 8)
bop_147 = relay.bitwise_xor(uop_145.astype('uint32'), relay.reshape(uop_138.astype('uint32'), relay.shape_of(uop_145))) # shape=(15, 3, 8)
bop_150 = relay.equal(bop_147.astype('bool'), relay.reshape(uop_145.astype('bool'), relay.shape_of(bop_147))) # shape=(15, 3, 8)
uop_153 = relay.asinh(uop_143.astype('float64')) # shape=(15, 3, 8)
bop_155 = relay.floor_mod(bop_150.astype('float32'), relay.reshape(uop_153.astype('float32'), relay.shape_of(bop_150))) # shape=(15, 3, 8)
var_158 = relay.var("var_158", dtype = "uint16", shape = (15, 3, 8))#candidate|158|(15, 3, 8)|var|uint16
bop_159 = relay.mod(bop_135.astype('float64'), relay.reshape(var_158.astype('float64'), relay.shape_of(bop_135))) # shape=(15, 3, 8)
uop_162 = relay.erf(uop_153.astype('float32')) # shape=(15, 3, 8)
var_164 = relay.var("var_164", dtype = "float32", shape = (15, 3, 8))#candidate|164|(15, 3, 8)|var|float32
bop_165 = relay.subtract(uop_162.astype('uint32'), relay.reshape(var_164.astype('uint32'), relay.shape_of(uop_162))) # shape=(15, 3, 8)
output = relay.Tuple([bop_155,bop_159,bop_165,])
output2 = relay.Tuple([bop_155,bop_159,bop_165,])
func_168 = relay.Function([var_134,var_158,var_164,], output)
mod['func_168'] = func_168
mod = relay.transform.InferType()(mod)
var_169 = relay.var("var_169", dtype = "uint16", shape = (15, 3, 8))#candidate|169|(15, 3, 8)|var|uint16
var_170 = relay.var("var_170", dtype = "uint16", shape = (15, 3, 8))#candidate|170|(15, 3, 8)|var|uint16
var_171 = relay.var("var_171", dtype = "float32", shape = (15, 3, 8))#candidate|171|(15, 3, 8)|var|float32
output = func_168(var_169,var_170,var_171,)
func_172 = relay.Function([var_169,var_170,var_171,], output)
mutated_mod['func_172'] = func_172
mutated_mod = relay.transform.InferType()(mutated_mod)
var_174 = relay.var("var_174", dtype = "float32", shape = (4,))#candidate|174|(4,)|var|float32
uop_175 = relay.atan(var_174.astype('float32')) # shape=(4,)
uop_177 = relay.log2(uop_175.astype('float64')) # shape=(4,)
uop_179 = relay.asin(uop_177.astype('float32')) # shape=(4,)
bop_181 = relay.bitwise_and(uop_179.astype('uint8'), relay.reshape(uop_175.astype('uint8'), relay.shape_of(uop_179))) # shape=(4,)
var_184 = relay.var("var_184", dtype = "float64", shape = (4,))#candidate|184|(4,)|var|float64
bop_185 = relay.floor_divide(uop_177.astype('float64'), relay.reshape(var_184.astype('float64'), relay.shape_of(uop_177))) # shape=(4,)
uop_188 = relay.log2(uop_177.astype('float32')) # shape=(4,)
uop_190 = relay.atan(bop_181.astype('float64')) # shape=(4,)
var_192 = relay.var("var_192", dtype = "float32", shape = (4,))#candidate|192|(4,)|var|float32
bop_193 = relay.add(uop_179.astype('uint64'), relay.reshape(var_192.astype('uint64'), relay.shape_of(uop_179))) # shape=(4,)
uop_196 = relay.atanh(bop_193.astype('float64')) # shape=(4,)
func_168_call = mod.get_global_var('func_168')
func_172_call = mutated_mod.get_global_var('func_172')
const_199 = relay.const([9,-3,-1,5,-8,3,8,5,8,2,3,-8,4,4,4,2,-1,4,-5,-4,-8,1,2,9,-9,2,6,9,-3,-4,8,-4,-1,3,-9,-1,5,4,-7,9,-6,2,-10,-10,1,2,1,2,-4,10,-1,-10,-2,-4,-1,-8,4,7,-8,9,-4,-3,-6,-7,-8,-4,7,-7,-2,1,-4,8,-9,-3,5,-8,-2,-6,-4,9,-1,4,6,-10,-2,2,9,5,-9,5,-2,-5,-6,3,3,3,-4,3,-8,-10,3,8,4,-10,-4,6,-9,-10,-3,4,-4,1,8,8,6,-6,-10,9,-8,6,3,9,5,9,-4,-6,-2,6,9,-5,2,2,-8,5,-1,9,2,-7,7,7,-9,-10,7,10,-10,1,-8,3,7,1,8,3,10,-7,6,-10,4,-7,-6,9,1,9,4,-5,-9,-10,-6,6,-2,5,-6,2,-3,-3,5,-6,-1,-8,-6,-7,-9,1,-7,-3,8,7,-1,6,-8,-4,8,-3,-4,3,4,-4,-4,-2,9,-9,3,3,-7,-1,-7,-9,-6,5,3,-9,-9,-2,5,-5,9,-3,2,-8,6,-5,6,-1,6,4,3,8,6,4,-4,-10,-5,-5,1,-5,5,-2,-3,5,9,3,-5,-6,1,-4,1,7,-7,4,-8,-4,10,-5,-1,4,-10,-1,-10,-7,9,7,7,5,-8,3,9,-8,5,1,4,5,-4,10,-3,4,-8,1,7,-1,-4,-9,-2,-1,-10,3,8,7,-4,4,2,9,-1,7,-6,-2,-1,-3,-10,1,5,-4,-2,4,8,3,-8,-1,-1,-6,7,7,-1,-2,-5,2,7,-4,7,-4,6,2,-10,-2,3,9,-7,9,-9,10,-6,-5,-8,-3,-8,7,-8,7,-4,-10,10,9,6,-9,1,-8,-2,1,5,-5,4,-9,3,-8,-7,-5,8,6,2,-8,5,-9], dtype = "uint16")#candidate|199|(360,)|const|uint16
call_198 = relay.TupleGetItem(func_168_call(relay.reshape(const_199.astype('uint16'), [15, 3, 8]), relay.reshape(const_199.astype('uint16'), [15, 3, 8]), relay.reshape(const_199.astype('float32'), [15, 3, 8]), ), 0)
call_200 = relay.TupleGetItem(func_172_call(relay.reshape(const_199.astype('uint16'), [15, 3, 8]), relay.reshape(const_199.astype('uint16'), [15, 3, 8]), relay.reshape(const_199.astype('float32'), [15, 3, 8]), ), 0)
output = relay.Tuple([bop_185,uop_188,uop_190,uop_196,call_198,const_199,])
output2 = relay.Tuple([bop_185,uop_188,uop_190,uop_196,call_200,const_199,])
func_201 = relay.Function([var_174,var_184,var_192,], output)
mod['func_201'] = func_201
mod = relay.transform.InferType()(mod)
var_202 = relay.var("var_202", dtype = "float32", shape = (4,))#candidate|202|(4,)|var|float32
var_203 = relay.var("var_203", dtype = "float64", shape = (4,))#candidate|203|(4,)|var|float64
var_204 = relay.var("var_204", dtype = "float32", shape = (4,))#candidate|204|(4,)|var|float32
output = func_201(var_202,var_203,var_204,)
func_205 = relay.Function([var_202,var_203,var_204,], output)
mutated_mod['func_205'] = func_205
mutated_mod = relay.transform.InferType()(mutated_mod)
var_207 = relay.var("var_207", dtype = "float32", shape = ())#candidate|207|()|var|float32
uop_208 = relay.tan(var_207.astype('float32')) # shape=()
uop_210 = relay.atan(uop_208.astype('float64')) # shape=()
uop_212 = relay.sigmoid(uop_208.astype('float32')) # shape=()
bop_214 = relay.greater_equal(uop_210.astype('bool'), uop_208.astype('bool')) # shape=()
uop_217 = relay.sigmoid(uop_208.astype('float64')) # shape=()
uop_219 = relay.log(bop_214.astype('float32')) # shape=()
uop_221 = relay.cosh(uop_217.astype('float64')) # shape=()
bop_223 = relay.floor_divide(uop_219.astype('float64'), uop_217.astype('float64')) # shape=()
bop_226 = relay.logical_and(uop_210.astype('bool'), uop_219.astype('bool')) # shape=()
uop_229 = relay.asin(uop_219.astype('float32')) # shape=()
bop_231 = relay.multiply(uop_221.astype('uint64'), uop_217.astype('uint64')) # shape=()
uop_234 = relay.asinh(uop_229.astype('float32')) # shape=()
var_236 = relay.var("var_236", dtype = "float64", shape = (16, 1, 13))#candidate|236|(16, 1, 13)|var|float64
bop_237 = relay.less_equal(bop_223.astype('bool'), var_236.astype('bool')) # shape=(16, 1, 13)
bop_240 = relay.bitwise_xor(bop_214.astype('int32'), uop_210.astype('int32')) # shape=()
const_243 = relay.const([[[False,False,False,True,False,True,False,False,True,True,False,True,False],[True,False,False,False,True,True,False,False,True,False,False,True,True],[True,False,True,True,False,True,True,False,True,True,False,True,True],[True,True,True,False,True,False,False,False,False,True,True,True,False],[True,True,False,False,False,True,True,True,False,True,True,True,False],[False,False,False,True,True,True,False,False,True,False,False,False,False],[True,True,True,False,True,False,True,False,True,True,True,False,False]],[[False,True,True,True,True,True,False,True,True,True,False,True,False],[False,True,False,False,True,True,True,True,True,True,True,False,True],[False,True,False,False,False,False,False,True,False,True,True,False,True],[False,True,True,True,True,True,True,False,True,False,True,True,True],[True,False,True,True,True,True,True,True,False,True,False,False,False],[False,True,True,False,False,True,True,False,True,True,True,False,True],[True,False,False,False,False,True,False,True,True,True,False,False,False]],[[False,True,False,False,True,False,False,True,False,False,False,False,False],[True,True,False,True,False,True,False,False,True,False,False,True,True],[True,False,True,True,False,False,False,True,False,True,True,False,False],[False,True,True,False,True,False,True,True,False,True,False,False,True],[True,False,True,False,True,False,False,False,True,True,False,True,False],[True,True,True,True,True,True,False,False,True,False,True,False,True],[True,True,False,True,True,True,True,False,False,False,True,False,False]],[[False,True,True,False,True,False,True,True,True,False,False,False,True],[False,False,False,False,True,True,False,True,False,True,True,True,True],[True,True,False,True,True,True,True,False,True,False,False,False,True],[False,False,False,False,True,False,False,True,False,True,False,False,True],[False,True,False,True,True,True,False,True,False,False,False,True,False],[True,False,True,True,True,True,False,True,True,True,True,True,True],[False,False,True,False,True,False,False,True,True,True,False,False,False]],[[True,False,True,False,False,False,False,True,False,False,False,False,True],[True,True,True,False,False,True,True,False,True,False,False,True,False],[True,False,False,True,True,True,True,False,False,False,False,False,True],[False,False,False,False,False,True,False,True,False,False,False,True,False],[True,True,False,True,True,False,True,False,True,False,True,True,False],[True,True,True,False,False,True,False,False,False,False,False,False,True],[False,False,True,True,True,True,False,True,False,False,True,True,False]],[[True,False,True,False,False,True,True,True,True,True,True,True,False],[True,False,False,True,True,False,True,True,True,False,False,True,False],[False,True,True,True,True,False,True,True,False,False,False,True,True],[True,True,False,False,True,True,False,True,False,False,True,False,True],[False,False,True,True,False,True,True,False,False,False,False,False,True],[True,False,True,False,True,False,True,False,True,False,True,True,True],[False,True,False,False,False,False,False,True,False,True,False,True,True]],[[True,True,True,True,True,False,True,False,True,False,True,False,False],[False,True,False,True,False,False,True,True,False,True,True,False,True],[True,True,True,False,False,False,False,False,True,True,False,False,True],[True,True,False,False,True,False,True,True,False,True,True,True,False],[True,False,False,False,True,True,True,True,False,False,True,False,False],[True,True,False,True,False,False,False,True,False,False,True,True,True],[True,False,True,False,True,False,True,True,False,False,False,False,True]],[[False,False,True,False,False,False,True,False,True,False,False,False,True],[False,False,False,True,True,False,False,False,False,True,True,True,False],[True,False,False,True,True,True,True,False,True,True,False,True,False],[False,True,False,False,False,True,False,False,False,True,False,False,False],[True,True,True,False,True,False,False,False,False,False,True,True,False],[False,True,True,True,True,True,False,True,True,False,False,True,True],[True,False,True,True,False,False,True,True,True,False,False,True,False]],[[False,True,True,True,False,False,False,True,True,True,False,False,True],[True,False,True,False,True,False,False,True,False,True,True,True,False],[False,True,False,False,False,False,True,True,False,True,True,False,False],[True,False,False,True,True,True,True,False,True,True,True,False,False],[True,True,True,False,True,False,True,False,False,True,False,True,True],[False,True,False,True,True,True,True,False,False,False,True,False,False],[True,True,True,True,True,False,False,False,False,True,False,False,True]],[[False,True,False,False,False,False,True,True,True,False,False,False,False],[True,False,False,True,True,True,False,False,False,True,True,False,True],[True,True,False,True,True,False,True,True,False,True,True,True,False],[True,False,True,True,False,False,False,False,True,True,True,True,True],[True,False,False,True,True,False,True,True,True,False,False,False,True],[False,False,False,False,False,True,False,True,True,False,True,True,True],[False,False,False,True,True,False,True,False,True,True,False,False,False]],[[True,False,False,False,True,True,False,False,True,False,True,True,False],[False,True,True,True,False,False,True,True,True,True,True,True,True],[False,False,True,True,False,False,True,True,False,True,False,False,True],[True,True,False,False,True,True,True,False,False,False,False,False,True],[False,True,False,True,False,False,True,True,True,True,True,True,False],[False,False,False,False,True,True,True,True,True,False,False,True,True],[True,True,True,True,False,True,False,False,False,False,False,True,True]],[[False,True,False,True,True,False,True,False,True,False,True,False,True],[True,True,False,False,False,True,True,True,False,True,True,False,True],[True,False,True,True,True,True,False,True,False,True,False,True,True],[True,True,True,True,True,False,False,True,False,False,False,True,False],[False,False,True,False,True,False,False,False,True,True,False,True,False],[False,True,False,False,False,True,True,True,True,False,True,True,True],[True,False,True,False,False,True,False,True,True,True,True,True,False]],[[True,False,False,False,True,False,True,True,False,False,True,False,True],[False,False,True,True,False,False,True,True,True,True,True,True,False],[False,True,False,False,True,True,False,True,True,True,True,True,True],[False,True,False,False,False,False,False,True,True,False,False,True,False],[True,False,True,False,True,True,True,True,True,False,False,False,True],[True,True,True,False,False,True,True,False,True,False,False,True,True],[False,False,True,True,False,False,True,True,True,False,False,False,True]],[[False,True,True,False,False,True,True,True,True,False,False,True,False],[True,True,True,True,False,True,True,False,False,True,False,True,False],[True,False,False,False,True,False,True,True,False,True,False,False,True],[True,False,True,False,False,True,True,True,False,False,False,True,False],[False,False,False,False,False,False,False,False,False,True,True,True,False],[True,False,False,True,True,False,True,True,False,False,False,False,True],[False,False,False,True,False,False,True,False,False,True,False,False,True]],[[False,False,False,True,False,False,False,True,True,True,True,True,False],[True,True,False,True,False,False,True,False,True,True,True,False,False],[True,True,False,False,True,True,False,True,False,False,True,False,True],[True,False,False,False,False,False,True,True,True,True,True,True,False],[True,False,True,True,False,False,True,True,False,False,False,False,True],[False,True,True,True,False,False,True,True,False,True,True,True,False],[False,False,False,True,False,True,False,True,False,False,False,True,True]],[[False,True,True,True,True,False,False,False,True,False,False,False,True],[False,True,False,True,False,True,True,False,False,False,True,False,True],[True,True,True,True,False,False,False,False,True,True,False,True,True],[True,True,True,True,True,True,False,True,False,False,False,False,False],[True,False,True,True,True,True,False,True,False,True,True,False,True],[False,False,True,True,True,False,False,True,True,True,False,True,True],[True,False,True,True,False,False,True,False,False,False,True,False,True]]], dtype = "bool")#candidate|243|(16, 7, 13)|const|bool
bop_244 = relay.logical_or(bop_237.astype('bool'), const_243.astype('bool')) # shape=(16, 7, 13)
output = relay.Tuple([uop_212,bop_226,bop_231,uop_234,bop_240,bop_244,])
output2 = relay.Tuple([uop_212,bop_226,bop_231,uop_234,bop_240,bop_244,])
func_247 = relay.Function([var_207,var_236,], output)
mod['func_247'] = func_247
mod = relay.transform.InferType()(mod)
mutated_mod['func_247'] = func_247
mutated_mod = relay.transform.InferType()(mutated_mod)
func_247_call = mutated_mod.get_global_var('func_247')
var_249 = relay.var("var_249", dtype = "float32", shape = ())#candidate|249|()|var|float32
var_250 = relay.var("var_250", dtype = "float64", shape = (16, 1, 13))#candidate|250|(16, 1, 13)|var|float64
call_248 = func_247_call(var_249,var_250,)
output = call_248
func_251 = relay.Function([var_249,var_250,], output)
mutated_mod['func_251'] = func_251
mutated_mod = relay.transform.InferType()(mutated_mod)
var_253 = relay.var("var_253", dtype = "float64", shape = ())#candidate|253|()|var|float64
uop_254 = relay.log(var_253.astype('float64')) # shape=()
bop_256 = relay.power(uop_254.astype('float32'), var_253.astype('float32')) # shape=()
bop_259 = relay.maximum(var_253.astype('int64'), uop_254.astype('int64')) # shape=()
uop_262 = relay.log10(bop_256.astype('float64')) # shape=()
var_264 = relay.var("var_264", dtype = "float64", shape = (7, 3))#candidate|264|(7, 3)|var|float64
bop_265 = relay.right_shift(uop_262.astype('int32'), var_264.astype('int32')) # shape=(7, 3)
const_268 = relay.const(2.496362, dtype = "float64")#candidate|268|()|const|float64
bop_269 = relay.logical_or(uop_262.astype('bool'), const_268.astype('bool')) # shape=()
uop_272 = relay.log10(uop_254.astype('float32')) # shape=()
uop_274 = relay.erf(uop_254.astype('float64')) # shape=()
uop_276 = relay.asin(bop_259.astype('float64')) # shape=()
bop_278 = relay.minimum(bop_256.astype('int16'), var_264.astype('int16')) # shape=(7, 3)
uop_281 = relay.asin(bop_269.astype('float64')) # shape=()
bop_283 = relay.power(uop_281.astype('float32'), const_268.astype('float32')) # shape=()
const_286 = relay.const([[6.782534,1.028848,8.620879],[-1.561493,9.539468,-2.864811],[-0.522223,-7.476272,-3.673290],[-1.486812,3.813593,1.666136],[-6.200431,5.408834,-5.963191],[5.824067,-3.378114,-4.194800],[4.423593,7.436128,-2.020160]], dtype = "float64")#candidate|286|(7, 3)|const|float64
bop_287 = relay.equal(var_264.astype('bool'), relay.reshape(const_286.astype('bool'), relay.shape_of(var_264))) # shape=(7, 3)
var_290 = relay.var("var_290", dtype = "float64", shape = (7, 3))#candidate|290|(7, 3)|var|float64
bop_291 = relay.minimum(var_264.astype('int64'), relay.reshape(var_290.astype('int64'), relay.shape_of(var_264))) # shape=(7, 3)
var_294 = relay.var("var_294", dtype = "float32", shape = ())#candidate|294|()|var|float32
bop_295 = relay.divide(bop_283.astype('float32'), var_294.astype('float32')) # shape=()
uop_298 = relay.sqrt(uop_272.astype('float64')) # shape=()
bop_300 = relay.bitwise_xor(uop_281.astype('uint64'), bop_295.astype('uint64')) # shape=()
output = relay.Tuple([bop_265,uop_274,uop_276,bop_278,bop_287,bop_291,uop_298,bop_300,])
output2 = relay.Tuple([bop_265,uop_274,uop_276,bop_278,bop_287,bop_291,uop_298,bop_300,])
func_303 = relay.Function([var_253,var_264,var_290,var_294,], output)
mod['func_303'] = func_303
mod = relay.transform.InferType()(mod)
var_304 = relay.var("var_304", dtype = "float64", shape = ())#candidate|304|()|var|float64
var_305 = relay.var("var_305", dtype = "float64", shape = (7, 3))#candidate|305|(7, 3)|var|float64
var_306 = relay.var("var_306", dtype = "float64", shape = (7, 3))#candidate|306|(7, 3)|var|float64
var_307 = relay.var("var_307", dtype = "float32", shape = ())#candidate|307|()|var|float32
output = func_303(var_304,var_305,var_306,var_307,)
func_308 = relay.Function([var_304,var_305,var_306,var_307,], output)
mutated_mod['func_308'] = func_308
mutated_mod = relay.transform.InferType()(mutated_mod)
var_310 = relay.var("var_310", dtype = "float64", shape = (6,))#candidate|310|(6,)|var|float64
var_311 = relay.var("var_311", dtype = "float64", shape = (6,))#candidate|311|(6,)|var|float64
bop_312 = relay.floor_mod(var_310.astype('float64'), relay.reshape(var_311.astype('float64'), relay.shape_of(var_310))) # shape=(6,)
uop_315 = relay.log(bop_312.astype('float64')) # shape=(6,)
func_201_call = mod.get_global_var('func_201')
func_205_call = mutated_mod.get_global_var('func_205')
const_318 = relay.const([9.486181,3.813910,4.293424,-8.013296], dtype = "float32")#candidate|318|(4,)|const|float32
call_317 = relay.TupleGetItem(func_201_call(relay.reshape(const_318.astype('float32'), [4,]), relay.reshape(const_318.astype('float64'), [4,]), relay.reshape(const_318.astype('float32'), [4,]), ), 4)
call_319 = relay.TupleGetItem(func_205_call(relay.reshape(const_318.astype('float32'), [4,]), relay.reshape(const_318.astype('float64'), [4,]), relay.reshape(const_318.astype('float32'), [4,]), ), 4)
const_320 = relay.const([-4.629758,-7.537420,5.622732,-5.339877,8.047578,7.179122], dtype = "float64")#candidate|320|(6,)|const|float64
bop_321 = relay.power(uop_315.astype('float32'), relay.reshape(const_320.astype('float32'), relay.shape_of(uop_315))) # shape=(6,)
bop_324 = relay.greater(const_320.astype('bool'), relay.reshape(uop_315.astype('bool'), relay.shape_of(const_320))) # shape=(6,)
var_327 = relay.var("var_327", dtype = "float32", shape = (4,))#candidate|327|(4,)|var|float32
bop_328 = relay.divide(const_318.astype('float64'), relay.reshape(var_327.astype('float64'), relay.shape_of(const_318))) # shape=(4,)
uop_331 = relay.sigmoid(uop_315.astype('float64')) # shape=(6,)
bop_333 = relay.maximum(uop_331.astype('float32'), relay.reshape(var_311.astype('float32'), relay.shape_of(uop_331))) # shape=(6,)
bop_336 = relay.floor_divide(uop_331.astype('float32'), relay.reshape(const_320.astype('float32'), relay.shape_of(uop_331))) # shape=(6,)
output = relay.Tuple([call_317,bop_321,bop_324,bop_328,bop_333,bop_336,])
output2 = relay.Tuple([call_319,bop_321,bop_324,bop_328,bop_333,bop_336,])
F = relay.Function([var_310,var_311,var_327,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_310,var_311,var_327,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_310= np.array([-3.215070,8.986832,5.836311,8.667148,-4.555388,2.470963], dtype='float64')
module1.set_input('var_310', input_310)
input_311= np.array([-2.777627,0.590775,-2.348605,6.144739,9.335203,-2.423280], dtype='float64')
module1.set_input('var_311', input_311)
input_327= np.array([-9.604426,8.977571,4.726127,-0.237957], dtype='float32')
module1.set_input('var_327', input_327)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_310, input_311, input_327, )
res3 = intrp3.evaluate()(input_310, input_311, input_327, )
res4 = intrp4.evaluate()(input_310, input_311, input_327, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
module5.set_input('var_310', input_310)
module5.set_input('var_311', input_311)
module5.set_input('var_327', input_327)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_310, input_311, input_327, )
res7 = intrp7.evaluate()(input_310, input_311, input_327, )
res8 = intrp8.evaluate()(input_310, input_311, input_327, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
module9.set_input('var_310', input_310)
module9.set_input('var_311', input_311)
module9.set_input('var_327', input_327)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_310, input_311, input_327, )
res11 = intrp11.evaluate()(input_310, input_311, input_327, )
res12 = intrp12.evaluate()(input_310, input_311, input_327, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
module13.set_input('var_310', input_310)
module13.set_input('var_311', input_311)
module13.set_input('var_327', input_327)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_310, input_311, input_327, )
res15 = intrp15.evaluate()(input_310, input_311, input_327, )
res16 = intrp16.evaluate()(input_310, input_311, input_327, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
module17.set_input('var_310', input_310)
module17.set_input('var_311', input_311)
module17.set_input('var_327', input_327)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_310, input_311, input_327, )
res19 = intrp19.evaluate()(input_310, input_311, input_327, )
res20 = intrp20.evaluate()(input_310, input_311, input_327, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
module21.set_input('var_310', input_310)
module21.set_input('var_311', input_311)
module21.set_input('var_327', input_327)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_310, input_311, input_327, )
res23 = intrp23.evaluate()(input_310, input_311, input_327, )
res24 = intrp24.evaluate()(input_310, input_311, input_327, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()

'''6: TVMFuncCall
5: _ZNSt17_Function_handlerIFvN3tvm7runtime7
4: tvm::runtime::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const [clone .isra.808]
3: tvm::runtime::GraphExecutorCreate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module const&, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
2: tvm::runtime::GraphExecutor::Init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
1: tvm::runtime::GraphExecutor::SetupOpExecs()
0: tvm::runtime::GraphExecutor::CreateTVMOp(tvm::runtime::TVMOpParam const&, std::vector<DLTensor, std::allocator<DLTensor> > const&)

'''