import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "int8", shape = (6,))#candidate|0|(6,)|var|int8
const_1 = relay.const([6,10,10,10,10,-7], dtype = "int8")#candidate|1|(6,)|const|int8
bop_2 = relay.minimum(var_0.astype('int8'), relay.reshape(const_1.astype('int8'), relay.shape_of(var_0))) # shape=(6,)
uop_5 = relay.atan(var_0.astype('float32')) # shape=(6,)
uop_7 = relay.cos(uop_5.astype('float64')) # shape=(6,)
uop_9 = relay.erf(uop_5.astype('float32')) # shape=(6,)
var_11 = relay.var("var_11", dtype = "float32", shape = (6,))#candidate|11|(6,)|var|float32
bop_12 = relay.maximum(uop_9.astype('float32'), relay.reshape(var_11.astype('float32'), relay.shape_of(uop_9))) # shape=(6,)
bop_15 = relay.mod(uop_5.astype('float64'), relay.reshape(var_11.astype('float64'), relay.shape_of(uop_5))) # shape=(6,)
bop_18 = relay.greater(uop_7.astype('bool'), relay.reshape(const_1.astype('bool'), relay.shape_of(uop_7))) # shape=(6,)
output = relay.Tuple([bop_2,bop_12,bop_15,bop_18,])
output2 = relay.Tuple([bop_2,bop_12,bop_15,bop_18,])
func_21 = relay.Function([var_0,var_11,], output)
mod['func_21'] = func_21
mod = relay.transform.InferType()(mod)
mutated_mod['func_21'] = func_21
mutated_mod = relay.transform.InferType()(mutated_mod)
func_21_call = mutated_mod.get_global_var('func_21')
var_23 = relay.var("var_23", dtype = "int8", shape = (6,))#candidate|23|(6,)|var|int8
var_24 = relay.var("var_24", dtype = "float32", shape = (6,))#candidate|24|(6,)|var|float32
call_22 = func_21_call(var_23,var_24,)
output = call_22
func_25 = relay.Function([var_23,var_24,], output)
mutated_mod['func_25'] = func_25
mutated_mod = relay.transform.InferType()(mutated_mod)
var_27 = relay.var("var_27", dtype = "float32", shape = ())#candidate|27|()|var|float32
var_28 = relay.var("var_28", dtype = "float32", shape = (2, 9))#candidate|28|(2, 9)|var|float32
bop_29 = relay.floor_mod(var_27.astype('float32'), var_28.astype('float32')) # shape=(2, 9)
bop_32 = relay.equal(var_27.astype('bool'), bop_29.astype('bool')) # shape=(2, 9)
bop_35 = relay.power(var_27.astype('float32'), bop_32.astype('float32')) # shape=(2, 9)
bop_38 = relay.floor_mod(var_28.astype('float32'), relay.reshape(bop_32.astype('float32'), relay.shape_of(var_28))) # shape=(2, 9)
uop_41 = relay.acos(var_28.astype('float64')) # shape=(2, 9)
func_21_call = mod.get_global_var('func_21')
func_25_call = mutated_mod.get_global_var('func_25')
var_44 = relay.var("var_44", dtype = "int8", shape = (6,))#candidate|44|(6,)|var|int8
call_43 = relay.TupleGetItem(func_21_call(relay.reshape(var_44.astype('int8'), [6,]), relay.reshape(var_44.astype('float32'), [6,]), ), 3)
call_45 = relay.TupleGetItem(func_25_call(relay.reshape(var_44.astype('int8'), [6,]), relay.reshape(var_44.astype('float32'), [6,]), ), 3)
uop_46 = relay.sin(uop_41.astype('float32')) # shape=(2, 9)
uop_48 = relay.acos(uop_46.astype('float32')) # shape=(2, 9)
uop_50 = relay.atan(var_44.astype('float64')) # shape=(6,)
bop_52 = relay.add(uop_48.astype('float32'), relay.reshape(bop_38.astype('float32'), relay.shape_of(uop_48))) # shape=(2, 9)
bop_55 = relay.floor_mod(uop_48.astype('float32'), relay.reshape(bop_32.astype('float32'), relay.shape_of(uop_48))) # shape=(2, 9)
var_58 = relay.var("var_58", dtype = "float32", shape = (2, 9))#candidate|58|(2, 9)|var|float32
bop_59 = relay.bitwise_or(bop_52.astype('int32'), relay.reshape(var_58.astype('int32'), relay.shape_of(bop_52))) # shape=(2, 9)
const_62 = relay.const([[3.033686,0.206066,3.624221,2.709714,-5.724904,-9.576347,1.296412,9.595478,-6.461051],[4.298662,-5.325829,4.129297,-1.838216,-3.240997,2.354066,5.756903,-5.418447,4.447968]], dtype = "float32")#candidate|62|(2, 9)|const|float32
bop_63 = relay.floor_divide(bop_55.astype('float32'), relay.reshape(const_62.astype('float32'), relay.shape_of(bop_55))) # shape=(2, 9)
bop_66 = relay.bitwise_xor(bop_59.astype('int8'), relay.reshape(uop_46.astype('int8'), relay.shape_of(bop_59))) # shape=(2, 9)
uop_69 = relay.log(uop_46.astype('float64')) # shape=(2, 9)
uop_71 = relay.asin(bop_55.astype('float64')) # shape=(2, 9)
bop_73 = relay.maximum(uop_46.astype('uint64'), relay.reshape(const_62.astype('uint64'), relay.shape_of(uop_46))) # shape=(2, 9)
bop_76 = relay.add(uop_71.astype('float32'), var_27.astype('float32')) # shape=(2, 9)
bop_79 = relay.equal(bop_63.astype('bool'), relay.reshape(bop_76.astype('bool'), relay.shape_of(bop_63))) # shape=(2, 9)
bop_82 = relay.subtract(uop_41.astype('int8'), relay.reshape(bop_59.astype('int8'), relay.shape_of(uop_41))) # shape=(2, 9)
func_21_call = mod.get_global_var('func_21')
func_25_call = mutated_mod.get_global_var('func_25')
call_85 = relay.TupleGetItem(func_21_call(relay.reshape(call_43.astype('int8'), [6,]), relay.reshape(var_44.astype('float32'), [6,]), ), 2)
call_86 = relay.TupleGetItem(func_25_call(relay.reshape(call_43.astype('int8'), [6,]), relay.reshape(var_44.astype('float32'), [6,]), ), 2)
bop_87 = relay.less(bop_79.astype('bool'), relay.reshape(bop_82.astype('bool'), relay.shape_of(bop_79))) # shape=(2, 9)
uop_90 = relay.log(uop_46.astype('float64')) # shape=(2, 9)
var_92 = relay.var("var_92", dtype = "float64", shape = (2, 9))#candidate|92|(2, 9)|var|float64
bop_93 = relay.multiply(uop_69.astype('int16'), relay.reshape(var_92.astype('int16'), relay.shape_of(uop_69))) # shape=(2, 9)
bop_96 = relay.less_equal(uop_71.astype('bool'), relay.reshape(bop_79.astype('bool'), relay.shape_of(uop_71))) # shape=(2, 9)
uop_99 = relay.atanh(uop_69.astype('float64')) # shape=(2, 9)
uop_101 = relay.cosh(bop_93.astype('float32')) # shape=(2, 9)
var_103 = relay.var("var_103", dtype = "bool", shape = (2, 9))#candidate|103|(2, 9)|var|bool
bop_104 = relay.bitwise_xor(bop_79.astype('int16'), relay.reshape(var_103.astype('int16'), relay.shape_of(bop_79))) # shape=(2, 9)
uop_107 = relay.tan(bop_104.astype('float32')) # shape=(2, 9)
bop_109 = relay.floor_mod(bop_73.astype('float32'), relay.reshape(bop_66.astype('float32'), relay.shape_of(bop_73))) # shape=(2, 9)
func_21_call = mod.get_global_var('func_21')
func_25_call = mutated_mod.get_global_var('func_25')
call_112 = relay.TupleGetItem(func_21_call(relay.reshape(call_85.astype('int8'), [6,]), relay.reshape(var_44.astype('float32'), [6,]), ), 3)
call_113 = relay.TupleGetItem(func_25_call(relay.reshape(call_85.astype('int8'), [6,]), relay.reshape(var_44.astype('float32'), [6,]), ), 3)
var_114 = relay.var("var_114", dtype = "int8", shape = (2, 9))#candidate|114|(2, 9)|var|int8
bop_115 = relay.right_shift(bop_82.astype('int16'), relay.reshape(var_114.astype('int16'), relay.shape_of(bop_82))) # shape=(2, 9)
uop_118 = relay.acos(uop_101.astype('float32')) # shape=(2, 9)
bop_120 = relay.greater(uop_107.astype('bool'), relay.reshape(var_92.astype('bool'), relay.shape_of(uop_107))) # shape=(2, 9)
uop_123 = relay.atan(bop_79.astype('float64')) # shape=(2, 9)
var_125 = relay.var("var_125", dtype = "float32", shape = (2, 9))#candidate|125|(2, 9)|var|float32
bop_126 = relay.floor_mod(uop_107.astype('float32'), relay.reshape(var_125.astype('float32'), relay.shape_of(uop_107))) # shape=(2, 9)
var_129 = relay.var("var_129", dtype = "float32", shape = (2, 9))#candidate|129|(2, 9)|var|float32
bop_130 = relay.right_shift(uop_118.astype('int16'), relay.reshape(var_129.astype('int16'), relay.shape_of(uop_118))) # shape=(2, 9)
uop_133 = relay.asin(uop_99.astype('float32')) # shape=(2, 9)
var_135 = relay.var("var_135", dtype = "bool", shape = (2, 9))#candidate|135|(2, 9)|var|bool
bop_136 = relay.divide(bop_87.astype('float32'), relay.reshape(var_135.astype('float32'), relay.shape_of(bop_87))) # shape=(2, 9)
bop_139 = relay.multiply(uop_71.astype('uint32'), relay.reshape(bop_76.astype('uint32'), relay.shape_of(uop_71))) # shape=(2, 9)
bop_142 = relay.floor_divide(uop_118.astype('float32'), relay.reshape(bop_79.astype('float32'), relay.shape_of(uop_118))) # shape=(2, 9)
bop_145 = relay.right_shift(bop_139.astype('int16'), relay.reshape(uop_107.astype('int16'), relay.shape_of(bop_139))) # shape=(2, 9)
func_21_call = mod.get_global_var('func_21')
func_25_call = mutated_mod.get_global_var('func_25')
call_148 = relay.TupleGetItem(func_21_call(relay.reshape(call_43.astype('int8'), [6,]), relay.reshape(uop_50.astype('float32'), [6,]), ), 3)
call_149 = relay.TupleGetItem(func_25_call(relay.reshape(call_43.astype('int8'), [6,]), relay.reshape(uop_50.astype('float32'), [6,]), ), 3)
uop_150 = relay.cos(bop_79.astype('float32')) # shape=(2, 9)
bop_152 = relay.not_equal(bop_126.astype('bool'), relay.reshape(uop_133.astype('bool'), relay.shape_of(bop_126))) # shape=(2, 9)
var_155 = relay.var("var_155", dtype = "bool", shape = (2, 9))#candidate|155|(2, 9)|var|bool
bop_156 = relay.floor_mod(bop_120.astype('float32'), relay.reshape(var_155.astype('float32'), relay.shape_of(bop_120))) # shape=(2, 9)
uop_159 = relay.log2(bop_152.astype('float64')) # shape=(2, 9)
var_161 = relay.var("var_161", dtype = "float32", shape = (2, 9))#candidate|161|(2, 9)|var|float32
bop_162 = relay.add(uop_118.astype('uint16'), relay.reshape(var_161.astype('uint16'), relay.shape_of(uop_118))) # shape=(2, 9)
output = relay.Tuple([bop_35,call_43,uop_50,call_85,uop_90,bop_96,bop_109,call_112,bop_115,uop_123,bop_130,bop_136,bop_142,bop_145,call_148,uop_150,bop_156,uop_159,bop_162,])
output2 = relay.Tuple([bop_35,call_45,uop_50,call_86,uop_90,bop_96,bop_109,call_113,bop_115,uop_123,bop_130,bop_136,bop_142,bop_145,call_149,uop_150,bop_156,uop_159,bop_162,])
func_165 = relay.Function([var_27,var_28,var_44,var_58,var_92,var_103,var_114,var_125,var_129,var_135,var_155,var_161,], output)
mod['func_165'] = func_165
mod = relay.transform.InferType()(mod)
var_166 = relay.var("var_166", dtype = "float32", shape = ())#candidate|166|()|var|float32
var_167 = relay.var("var_167", dtype = "float32", shape = (2, 9))#candidate|167|(2, 9)|var|float32
var_168 = relay.var("var_168", dtype = "int8", shape = (6,))#candidate|168|(6,)|var|int8
var_169 = relay.var("var_169", dtype = "float32", shape = (2, 9))#candidate|169|(2, 9)|var|float32
var_170 = relay.var("var_170", dtype = "float64", shape = (2, 9))#candidate|170|(2, 9)|var|float64
var_171 = relay.var("var_171", dtype = "bool", shape = (2, 9))#candidate|171|(2, 9)|var|bool
var_172 = relay.var("var_172", dtype = "int8", shape = (2, 9))#candidate|172|(2, 9)|var|int8
var_173 = relay.var("var_173", dtype = "float32", shape = (2, 9))#candidate|173|(2, 9)|var|float32
var_174 = relay.var("var_174", dtype = "float32", shape = (2, 9))#candidate|174|(2, 9)|var|float32
var_175 = relay.var("var_175", dtype = "bool", shape = (2, 9))#candidate|175|(2, 9)|var|bool
var_176 = relay.var("var_176", dtype = "bool", shape = (2, 9))#candidate|176|(2, 9)|var|bool
var_177 = relay.var("var_177", dtype = "float32", shape = (2, 9))#candidate|177|(2, 9)|var|float32
output = func_165(var_166,var_167,var_168,var_169,var_170,var_171,var_172,var_173,var_174,var_175,var_176,var_177,)
func_178 = relay.Function([var_166,var_167,var_168,var_169,var_170,var_171,var_172,var_173,var_174,var_175,var_176,var_177,], output)
mutated_mod['func_178'] = func_178
mutated_mod = relay.transform.InferType()(mutated_mod)
var_180 = relay.var("var_180", dtype = "float32", shape = (7,))#candidate|180|(7,)|var|float32
uop_181 = relay.atan(var_180.astype('float32')) # shape=(7,)
uop_183 = relay.log2(uop_181.astype('float32')) # shape=(7,)
uop_185 = relay.acosh(var_180.astype('float32')) # shape=(7,)
bop_187 = relay.minimum(uop_183.astype('int64'), relay.reshape(var_180.astype('int64'), relay.shape_of(uop_183))) # shape=(7,)
var_190 = relay.var("var_190", dtype = "float32", shape = (7,))#candidate|190|(7,)|var|float32
bop_191 = relay.left_shift(uop_183.astype('uint64'), relay.reshape(var_190.astype('uint64'), relay.shape_of(uop_183))) # shape=(7,)
bop_194 = relay.not_equal(bop_187.astype('bool'), relay.reshape(uop_185.astype('bool'), relay.shape_of(bop_187))) # shape=(7,)
uop_197 = relay.atan(uop_183.astype('float32')) # shape=(7,)
bop_199 = relay.subtract(uop_197.astype('int32'), relay.reshape(var_180.astype('int32'), relay.shape_of(uop_197))) # shape=(7,)
const_202 = relay.const([5.809127,-1.403399,9.932056,-2.418520,1.978756,-8.764394,-2.940820], dtype = "float32")#candidate|202|(7,)|const|float32
bop_203 = relay.equal(uop_185.astype('bool'), relay.reshape(const_202.astype('bool'), relay.shape_of(uop_185))) # shape=(7,)
var_206 = relay.var("var_206", dtype = "float32", shape = (7,))#candidate|206|(7,)|var|float32
bop_207 = relay.maximum(uop_197.astype('uint8'), relay.reshape(var_206.astype('uint8'), relay.shape_of(uop_197))) # shape=(7,)
output = relay.Tuple([bop_191,bop_194,bop_199,bop_203,bop_207,])
output2 = relay.Tuple([bop_191,bop_194,bop_199,bop_203,bop_207,])
func_210 = relay.Function([var_180,var_190,var_206,], output)
mod['func_210'] = func_210
mod = relay.transform.InferType()(mod)
var_211 = relay.var("var_211", dtype = "float32", shape = (7,))#candidate|211|(7,)|var|float32
var_212 = relay.var("var_212", dtype = "float32", shape = (7,))#candidate|212|(7,)|var|float32
var_213 = relay.var("var_213", dtype = "float32", shape = (7,))#candidate|213|(7,)|var|float32
output = func_210(var_211,var_212,var_213,)
func_214 = relay.Function([var_211,var_212,var_213,], output)
mutated_mod['func_214'] = func_214
mutated_mod = relay.transform.InferType()(mutated_mod)
var_216 = relay.var("var_216", dtype = "float64", shape = (14,))#candidate|216|(14,)|var|float64
uop_217 = relay.log2(var_216.astype('float64')) # shape=(14,)
uop_219 = relay.atanh(uop_217.astype('float64')) # shape=(14,)
bop_221 = relay.logical_and(uop_219.astype('bool'), relay.reshape(var_216.astype('bool'), relay.shape_of(uop_219))) # shape=(14,)
bop_224 = relay.logical_or(var_216.astype('bool'), relay.reshape(uop_217.astype('bool'), relay.shape_of(var_216))) # shape=(14,)
uop_227 = relay.sigmoid(uop_217.astype('float32')) # shape=(14,)
bop_229 = relay.right_shift(bop_221.astype('uint64'), relay.reshape(uop_227.astype('uint64'), relay.shape_of(bop_221))) # shape=(14,)
uop_232 = relay.cosh(uop_217.astype('float64')) # shape=(14,)
func_21_call = mod.get_global_var('func_21')
func_25_call = mutated_mod.get_global_var('func_25')
var_235 = relay.var("var_235", dtype = "int8", shape = (6,))#candidate|235|(6,)|var|int8
call_234 = relay.TupleGetItem(func_21_call(relay.reshape(var_235.astype('int8'), [6,]), relay.reshape(var_235.astype('float32'), [6,]), ), 2)
call_236 = relay.TupleGetItem(func_25_call(relay.reshape(var_235.astype('int8'), [6,]), relay.reshape(var_235.astype('float32'), [6,]), ), 2)
bop_237 = relay.not_equal(uop_219.astype('bool'), relay.reshape(bop_221.astype('bool'), relay.shape_of(uop_219))) # shape=(14,)
output = relay.Tuple([bop_224,bop_229,uop_232,call_234,var_235,bop_237,])
output2 = relay.Tuple([bop_224,bop_229,uop_232,call_236,var_235,bop_237,])
func_240 = relay.Function([var_216,var_235,], output)
mod['func_240'] = func_240
mod = relay.transform.InferType()(mod)
var_241 = relay.var("var_241", dtype = "float64", shape = (14,))#candidate|241|(14,)|var|float64
var_242 = relay.var("var_242", dtype = "int8", shape = (6,))#candidate|242|(6,)|var|int8
output = func_240(var_241,var_242,)
func_243 = relay.Function([var_241,var_242,], output)
mutated_mod['func_243'] = func_243
mutated_mod = relay.transform.InferType()(mutated_mod)
const_245 = relay.const(-7.357047, dtype = "float64")#candidate|245|()|const|float64
uop_246 = relay.log2(const_245.astype('float64')) # shape=()
bop_248 = relay.bitwise_and(uop_246.astype('uint64'), const_245.astype('uint64')) # shape=()
uop_251 = relay.exp(const_245.astype('float32')) # shape=()
bop_253 = relay.power(const_245.astype('float32'), uop_246.astype('float32')) # shape=()
bop_256 = relay.bitwise_and(const_245.astype('uint16'), bop_248.astype('uint16')) # shape=()
func_21_call = mod.get_global_var('func_21')
func_25_call = mutated_mod.get_global_var('func_25')
const_260 = relay.const([-2,3,-7,6,-4,-3], dtype = "int8")#candidate|260|(6,)|const|int8
call_259 = relay.TupleGetItem(func_21_call(relay.reshape(const_260.astype('int8'), [6,]), relay.reshape(const_260.astype('float32'), [6,]), ), 2)
call_261 = relay.TupleGetItem(func_25_call(relay.reshape(const_260.astype('int8'), [6,]), relay.reshape(const_260.astype('float32'), [6,]), ), 2)
bop_262 = relay.right_shift(bop_253.astype('int64'), const_260.astype('int64')) # shape=(6,)
bop_265 = relay.divide(bop_248.astype('float64'), bop_256.astype('float64')) # shape=()
uop_268 = relay.exp(call_259.astype('float32')) # shape=(6,)
uop_270 = relay.exp(call_261.astype('float32')) # shape=(6,)
var_271 = relay.var("var_271", dtype = "float64", shape = (5, 5, 11))#candidate|271|(5, 5, 11)|var|float64
bop_272 = relay.bitwise_xor(bop_265.astype('int64'), var_271.astype('int64')) # shape=(5, 5, 11)
bop_275 = relay.less_equal(const_245.astype('bool'), bop_248.astype('bool')) # shape=()
uop_278 = relay.asin(uop_268.astype('float64')) # shape=(6,)
uop_280 = relay.asin(uop_270.astype('float64')) # shape=(6,)
bop_281 = relay.logical_xor(var_271.astype('uint32'), const_245.astype('uint32')) # shape=(5, 5, 11)
uop_284 = relay.rsqrt(bop_256.astype('float32')) # shape=()
func_210_call = mod.get_global_var('func_210')
func_214_call = mutated_mod.get_global_var('func_214')
var_287 = relay.var("var_287", dtype = "float32", shape = (7,))#candidate|287|(7,)|var|float32
call_286 = relay.TupleGetItem(func_210_call(relay.reshape(var_287.astype('float32'), [7,]), relay.reshape(var_287.astype('float32'), [7,]), relay.reshape(var_287.astype('float32'), [7,]), ), 1)
call_288 = relay.TupleGetItem(func_214_call(relay.reshape(var_287.astype('float32'), [7,]), relay.reshape(var_287.astype('float32'), [7,]), relay.reshape(var_287.astype('float32'), [7,]), ), 1)
bop_289 = relay.logical_xor(var_271.astype('int8'), relay.reshape(bop_281.astype('int8'), relay.shape_of(var_271))) # shape=(5, 5, 11)
bop_292 = relay.mod(bop_248.astype('float32'), bop_289.astype('float32')) # shape=(5, 5, 11)
uop_295 = relay.log(uop_284.astype('float32')) # shape=()
var_297 = relay.var("var_297", dtype = "float32", shape = (4, 16))#candidate|297|(4, 16)|var|float32
bop_298 = relay.divide(uop_295.astype('float64'), var_297.astype('float64')) # shape=(4, 16)
uop_301 = relay.sin(uop_278.astype('float32')) # shape=(6,)
uop_303 = relay.sin(uop_280.astype('float32')) # shape=(6,)
var_304 = relay.var("var_304", dtype = "float32", shape = (3, 4))#candidate|304|(3, 4)|var|float32
bop_305 = relay.equal(uop_295.astype('bool'), var_304.astype('bool')) # shape=(3, 4)
const_308 = relay.const([-4.825334,2.036597,3.591570,2.286244,8.144947,-1.230350], dtype = "float32")#candidate|308|(6,)|const|float32
bop_309 = relay.minimum(uop_301.astype('uint8'), relay.reshape(const_308.astype('uint8'), relay.shape_of(uop_301))) # shape=(6,)
bop_312 = relay.minimum(uop_303.astype('uint8'), relay.reshape(const_308.astype('uint8'), relay.shape_of(uop_303))) # shape=(6,)
bop_313 = relay.less(const_260.astype('bool'), relay.reshape(call_259.astype('bool'), relay.shape_of(const_260))) # shape=(6,)
bop_316 = relay.less(const_260.astype('bool'), relay.reshape(call_261.astype('bool'), relay.shape_of(const_260))) # shape=(6,)
uop_317 = relay.sin(bop_305.astype('float64')) # shape=(3, 4)
bop_319 = relay.maximum(uop_295.astype('int64'), uop_301.astype('int64')) # shape=(6,)
bop_322 = relay.maximum(uop_295.astype('int64'), uop_303.astype('int64')) # shape=(6,)
uop_323 = relay.log2(uop_317.astype('float64')) # shape=(3, 4)
func_21_call = mod.get_global_var('func_21')
func_25_call = mutated_mod.get_global_var('func_25')
call_325 = relay.TupleGetItem(func_21_call(relay.reshape(const_260.astype('int8'), [6,]), relay.reshape(call_259.astype('float32'), [6,]), ), 0)
call_326 = relay.TupleGetItem(func_25_call(relay.reshape(const_260.astype('int8'), [6,]), relay.reshape(call_259.astype('float32'), [6,]), ), 0)
uop_327 = relay.sinh(uop_323.astype('float64')) # shape=(3, 4)
uop_329 = relay.log(uop_327.astype('float64')) # shape=(3, 4)
output = relay.Tuple([uop_251,bop_262,bop_272,bop_275,call_286,var_287,bop_292,bop_298,bop_309,bop_313,bop_319,call_325,uop_329,])
output2 = relay.Tuple([uop_251,bop_262,bop_272,bop_275,call_288,var_287,bop_292,bop_298,bop_312,bop_316,bop_322,call_326,uop_329,])
func_331 = relay.Function([var_271,var_287,var_297,var_304,], output)
mod['func_331'] = func_331
mod = relay.transform.InferType()(mod)
mutated_mod['func_331'] = func_331
mutated_mod = relay.transform.InferType()(mutated_mod)
func_331_call = mutated_mod.get_global_var('func_331')
var_333 = relay.var("var_333", dtype = "float64", shape = (5, 5, 11))#candidate|333|(5, 5, 11)|var|float64
var_334 = relay.var("var_334", dtype = "float32", shape = (7,))#candidate|334|(7,)|var|float32
var_335 = relay.var("var_335", dtype = "float32", shape = (4, 16))#candidate|335|(4, 16)|var|float32
var_336 = relay.var("var_336", dtype = "float32", shape = (3, 4))#candidate|336|(3, 4)|var|float32
call_332 = func_331_call(var_333,var_334,var_335,var_336,)
output = call_332
func_337 = relay.Function([var_333,var_334,var_335,var_336,], output)
mutated_mod['func_337'] = func_337
mutated_mod = relay.transform.InferType()(mutated_mod)
var_339 = relay.var("var_339", dtype = "float64", shape = (7, 13, 1))#candidate|339|(7, 13, 1)|var|float64
uop_340 = relay.asin(var_339.astype('float64')) # shape=(7, 13, 1)
uop_342 = relay.sqrt(uop_340.astype('float64')) # shape=(7, 13, 1)
uop_344 = relay.sigmoid(uop_342.astype('float64')) # shape=(7, 13, 1)
const_346 = relay.const([[[-8.829418,-5.066879,7.437230,-0.881108,8.334301,9.199183],[4.460680,-1.326824,-5.535933,8.930442,-6.907471,-5.816308],[-8.001464,5.463982,-2.749536,-4.762475,-7.283085,2.636373],[0.640650,-3.443752,4.262161,-1.800655,-6.939243,-1.461531],[3.913105,0.331788,7.787133,8.016745,-8.879895,-3.063181],[6.597761,1.654159,-4.700921,5.922919,-2.929173,-1.801901],[5.664678,-4.971308,9.267065,-6.456721,4.622991,6.484561],[5.167528,-4.913414,3.018631,0.819437,8.389739,-5.612458],[1.050624,8.443432,1.721905,-6.660123,-5.285471,-3.742502],[1.615482,-6.980523,-6.774068,1.000625,1.954802,7.361879],[-9.737498,3.561350,-9.151380,1.767549,-5.159439,8.943420],[5.729330,-8.783559,8.221714,7.620017,-5.607721,6.933267],[5.998624,-6.331238,-1.978597,1.185739,-3.058315,-4.921552]],[[3.470383,6.123188,-8.440446,6.644679,-3.604022,3.303994],[6.340860,-4.015309,-0.540994,-9.621176,-3.480049,-3.553219],[5.088905,3.244210,6.553006,-8.940370,-6.035165,-3.468248],[-9.332436,-7.645496,6.911687,-4.827860,-1.290790,-8.574304],[-9.551308,4.090517,-6.093623,4.524568,9.645694,1.033513],[-7.404276,0.887750,5.266878,1.202917,-9.489528,-3.980375],[8.213446,-1.232194,9.969424,5.456566,0.632180,-0.105665],[-3.740492,1.930442,2.131347,-5.945864,-7.742624,-4.562924],[3.216363,-8.052632,8.228980,-7.397436,8.430016,-2.244846],[2.690675,6.589389,-4.022100,-1.970278,0.800569,8.519828],[7.231610,6.168385,0.383677,1.566817,3.597595,-1.616293],[8.470010,-6.640457,1.336461,6.504519,-0.491409,-6.954674],[0.895655,1.763461,-2.642748,2.329397,0.294979,-6.216933]],[[-4.158089,1.179762,2.066348,-7.706051,-6.492166,4.289823],[6.493592,6.312123,3.664961,0.138098,-0.946442,-4.213051],[9.170341,-1.785059,-1.797369,3.829695,6.249018,-0.132327],[5.092761,7.216759,2.475943,5.299189,3.852966,-0.089667],[-3.028452,2.571477,9.869323,-5.866143,4.621324,2.268327],[4.803690,-2.226931,7.179616,1.403465,3.761725,2.865440],[1.387690,-3.814925,6.408953,-9.574361,-2.513011,-3.726197],[4.988300,-1.618923,-2.552052,-2.840297,-5.816796,-8.317702],[9.019294,-0.027615,-2.664020,-7.436704,7.845804,-5.026492],[7.480045,-2.841093,6.066853,0.816889,7.436707,0.224311],[6.117509,1.734085,4.077138,-9.808019,1.459599,1.011144],[-2.631407,-8.593773,-5.748937,-8.734466,5.478275,3.456045],[0.202645,2.805007,-5.230190,-6.863839,-9.865643,-5.802886]],[[1.575546,-6.328967,6.298543,-4.525667,3.464138,0.866591],[-6.938222,-1.812885,2.836980,-1.198485,-3.408038,3.641209],[-0.437329,6.168920,-0.260243,-3.744110,-7.556116,-7.430836],[2.258601,8.164909,6.895645,-1.678558,-5.117799,3.182316],[0.096406,-2.236018,6.010651,-0.229391,-4.863733,-5.945333],[6.010937,-6.286746,-0.062903,-5.832947,-5.979303,-1.773714],[-6.517727,5.910956,2.544700,-5.252951,-7.241006,7.906131],[3.745697,4.265441,4.736548,-0.252767,2.099953,-6.165590],[3.636962,0.652085,-9.397529,-7.005132,-6.037193,1.612925],[-1.642501,-5.764645,-4.000566,6.109224,-8.560050,4.364555],[-0.189486,-4.665332,2.944759,5.144855,2.476139,-7.505703],[4.510863,0.982027,-3.148204,1.487419,-6.804446,4.202406],[5.649369,-1.717277,4.329020,5.293096,6.297849,6.238586]],[[-4.041602,-5.082445,7.763748,3.894097,3.528130,0.833406],[2.197539,-6.844835,-2.962146,6.796410,-3.307281,9.447739],[6.939776,-3.036401,3.572708,6.039839,-5.878469,1.292953],[-5.001962,-3.200819,4.017497,1.484576,0.770699,1.114404],[9.504345,8.875308,-1.556752,-5.072449,-9.299693,6.764957],[-2.261348,8.198963,-6.649358,4.631285,-0.002071,-2.587323],[7.867337,-0.926299,3.498605,-8.622895,-8.043664,6.142579],[7.612716,8.167878,-7.030663,9.621390,9.427866,0.851131],[7.972585,7.136101,7.591299,-9.512418,6.345776,1.169808],[-4.383472,-0.449901,1.796743,1.743956,0.767320,-1.896579],[9.712247,-8.273187,4.779430,-7.733093,-5.728768,-3.240271],[9.670559,-7.691385,5.200168,-3.749021,-5.992783,8.379531],[-2.933085,-2.150489,2.002483,6.955124,-6.053885,9.014335]],[[5.616246,-8.852064,6.824903,1.861581,1.012030,-1.593546],[7.514151,-7.013206,7.036670,-9.390300,5.385228,0.674798],[5.083824,7.909303,-1.092084,4.014735,2.348851,-9.590468],[-8.440266,0.445124,8.805823,7.237855,-4.810684,-8.244518],[1.821135,4.264757,9.121767,2.237068,9.263957,-7.746048],[3.391136,-0.121703,-1.377111,-0.808189,-6.635343,-9.998731],[9.265601,3.412915,-2.250707,5.163384,-0.887744,-9.363380],[7.455945,-1.979777,-2.421449,-5.025077,0.159051,-8.472002],[3.944578,-1.856152,4.974175,-7.620066,-4.036745,-1.830260],[0.188558,-8.978805,9.910524,-0.771220,-4.519066,3.108084],[2.995973,9.862107,-6.244812,-7.708657,-7.218040,-5.598190],[-3.763071,-8.900632,-3.866568,5.939584,-4.011686,4.865705],[-6.693525,-5.178067,-8.394781,3.820521,1.126347,-1.189322]],[[4.688594,-6.459928,-6.135425,1.579777,0.430723,5.923447],[-6.782249,2.752311,4.699230,-9.550325,-2.665099,-6.376731],[0.819530,1.277945,-6.702582,-8.112512,-4.785492,9.379789],[6.622743,3.088809,-4.241351,-6.486711,9.047608,5.278914],[-4.186984,-0.158235,-0.367187,-4.476842,7.755948,3.960453],[2.620224,5.636901,-6.045493,-3.481075,5.554794,-9.717202],[5.693551,-8.290713,-8.017965,7.261998,-3.628046,-4.477208],[-9.227298,-1.556952,-5.716282,-8.980611,2.359035,8.979612],[-7.182587,-4.325094,-7.499525,-1.989675,0.102541,-3.201538],[-6.590391,0.119122,-2.871690,-5.103142,-4.610167,-5.199019],[-1.737565,-5.776439,-2.027769,8.531440,-7.477092,-9.089637],[-7.266700,-7.196846,2.427792,3.495695,-7.595516,-0.932435],[-8.590207,9.942741,5.569960,5.734699,-0.402488,-6.119411]]], dtype = "float64")#candidate|346|(7, 13, 6)|const|float64
bop_347 = relay.multiply(uop_344.astype('uint64'), const_346.astype('uint64')) # shape=(7, 13, 6)
var_350 = relay.var("var_350", dtype = "float64", shape = (7, 13, 4))#candidate|350|(7, 13, 4)|var|float64
bop_351 = relay.greater_equal(uop_344.astype('bool'), var_350.astype('bool')) # shape=(7, 13, 4)
output = relay.Tuple([bop_347,bop_351,])
output2 = relay.Tuple([bop_347,bop_351,])
F = relay.Function([var_339,var_350,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_339,var_350,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_339= np.array([[[7.910159],[-0.688196],[-2.125369],[-5.512729],[-3.606019],[8.287710],[-7.306863],[9.060832],[-0.517462],[0.571665],[-0.707942],[1.083479],[-8.130296]],[[1.837033],[-9.450421],[5.609927],[7.118057],[6.660988],[-0.995679],[4.884034],[-8.033310],[1.312726],[-7.926270],[-4.479329],[9.012119],[-8.118883]],[[-4.970932],[-9.606059],[9.369730],[2.099339],[1.144814],[-0.014435],[-9.454462],[-5.713909],[6.747549],[5.192071],[1.280696],[6.887494],[8.117200]],[[-9.710356],[8.998571],[-1.044129],[-2.413463],[-2.569474],[-5.299855],[-3.996411],[1.784841],[9.992164],[-7.931560],[-8.689080],[7.776807],[5.548187]],[[-2.259432],[-7.550183],[-5.352585],[-5.053583],[0.559365],[5.405515],[9.470232],[1.794790],[7.092875],[2.626696],[-5.185736],[5.742041],[1.485720]],[[1.878975],[9.709685],[3.272389],[6.548763],[-8.424343],[-0.057746],[2.743961],[5.151298],[-7.678908],[1.971628],[8.035549],[8.596921],[6.848226]],[[4.197175],[-6.102693],[-5.886225],[9.418684],[-6.810494],[6.202812],[-4.358227],[9.231943],[-2.564950],[-3.719736],[7.345053],[-7.410601],[-9.468799]]], dtype='float64')
module1.set_input('var_339', input_339)
input_350= np.array([[[-6.803696,0.408210,-1.925271,-6.893905],[2.290039,-5.075275,-5.660403,5.270866],[-3.664038,1.796806,-3.844041,-8.405792],[-9.695640,6.160969,-9.789511,-6.363495],[1.743170,-3.040119,-0.594675,-8.873426],[5.237333,-6.940469,0.423543,4.925934],[7.855400,4.151357,-8.471058,-0.104936],[-7.709049,-7.346732,0.522730,2.297858],[-9.011956,-0.782361,-3.529252,-4.167665],[9.053814,6.868882,-7.101297,-2.407600],[-5.749136,3.646116,-3.532439,2.746685],[-5.395369,4.650198,-9.070575,-6.148726],[7.200038,7.365793,-1.194324,7.029532]],[[-0.430517,-3.883387,-2.215285,-8.686877],[3.409824,2.994516,6.209823,-8.802081],[-3.013570,8.052476,-5.985368,4.675252],[5.413351,8.106030,-3.990582,1.438592],[8.186797,0.410399,0.807672,-5.156498],[-5.138816,-2.324269,-5.101540,1.044670],[-8.245760,4.452365,-6.519288,-5.443137],[4.289548,1.467801,0.755578,-7.864169],[6.750157,-7.462008,4.937780,8.684762],[-8.721445,7.493745,-0.723956,-0.385726],[-9.520956,4.039477,-6.912591,-2.578923],[1.891242,-0.033265,-7.313779,7.722267],[-5.984103,-6.006496,6.229200,1.857150]],[[3.971975,-9.157521,2.257706,9.614375],[1.559877,6.597714,-9.750548,2.622552],[4.591034,-7.914546,7.982367,0.621485],[0.544839,5.991758,6.257126,3.408205],[-6.836480,-6.735495,-7.033462,9.533472],[-7.589079,5.184441,-3.690244,-2.407247],[-7.630503,6.057256,0.858375,-2.104382],[6.208171,5.269194,-3.378905,8.388029],[-7.406242,7.861704,3.004450,-8.734604],[1.139430,7.551430,9.289299,4.209215],[-8.498990,9.575998,-3.488079,0.019938],[9.927170,-0.267906,7.453053,-6.376049],[-9.467890,-7.288649,-4.252248,2.228986]],[[-2.162484,2.552417,6.260349,-5.076455],[-5.589449,4.120735,2.523300,-7.187842],[9.783016,-6.100762,-5.145412,-7.086569],[-7.542495,8.961189,-8.823121,-5.461081],[3.183260,-8.985178,4.866944,-9.754164],[-8.779672,-0.647437,-6.380744,-3.700463],[8.196449,-7.409631,-0.829627,-7.292841],[7.204700,2.153642,0.994729,6.427470],[-7.259214,1.712542,-1.414449,1.060725],[1.606042,-0.874410,-6.311999,7.541392],[9.024862,3.597526,-7.974868,3.127345],[0.790088,0.395559,-0.261935,0.211208],[-0.194473,-2.070774,3.173042,4.223898]],[[3.962161,-8.091561,4.721431,-3.342819],[-4.951788,-8.540404,4.943269,-4.654112],[-8.500851,7.641543,-7.432304,6.634110],[5.485266,7.437251,3.731085,3.961210],[-9.839696,-4.079883,5.857807,0.309876],[8.275733,3.622408,1.739870,0.876665],[0.019794,-8.162505,-3.101579,3.900323],[-5.653197,-1.795645,2.434966,-8.719022],[9.949528,1.928277,4.204744,-5.326995],[-1.255632,-1.349751,-0.294601,-7.599886],[-3.148303,4.031364,-2.642000,6.250606],[-7.586521,8.363237,6.077011,9.363289],[-3.113957,-2.639056,9.720390,-9.593756]],[[-3.380054,0.303927,1.954030,-8.631927],[0.424930,-7.332646,-3.638964,-4.452266],[9.053190,7.196920,8.026429,8.596366],[1.861862,-3.564290,6.840758,3.558761],[7.980537,-2.310535,-9.295212,-9.920927],[-6.245334,0.099957,-0.829352,7.881985],[0.784209,8.173302,-8.100988,8.103810],[-2.955386,-3.277585,-9.695917,3.734746],[7.668746,-5.418286,-0.763168,9.090615],[3.552730,-1.004098,-7.099915,0.197763],[-2.145280,-4.279642,-9.630751,-9.211171],[7.430958,-5.237454,-1.286099,6.728277],[1.260875,7.640784,2.647129,-5.106747]],[[-3.546614,-7.820664,3.114507,-9.586846],[-6.941622,-3.122502,-5.446172,0.461561],[6.745709,-3.920748,1.040517,1.305396],[1.422730,5.606227,9.832748,-7.148651],[-9.319338,-2.110651,-0.669599,2.718466],[-5.098912,4.035474,-5.974911,-7.289403],[-9.511559,-2.036898,8.782569,-1.464025],[-1.736916,4.527094,-5.483974,3.151314],[-1.413423,-1.245271,4.884154,-8.117280],[1.625642,-8.348713,-8.003403,4.319296],[4.353291,0.048479,-9.923847,-7.244888],[5.446204,-4.987188,7.335617,-2.877992],[-1.381576,-8.750493,-9.655968,5.504523]]], dtype='float64')
module1.set_input('var_350', input_350)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_339, input_350, )
res3 = intrp3.evaluate()(input_339, input_350, )
res4 = intrp4.evaluate()(input_339, input_350, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
module5.set_input('var_339', input_339)
module5.set_input('var_350', input_350)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_339, input_350, )
res7 = intrp7.evaluate()(input_339, input_350, )
res8 = intrp8.evaluate()(input_339, input_350, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
module9.set_input('var_339', input_339)
module9.set_input('var_350', input_350)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_339, input_350, )
res11 = intrp11.evaluate()(input_339, input_350, )
res12 = intrp12.evaluate()(input_339, input_350, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
module13.set_input('var_339', input_339)
module13.set_input('var_350', input_350)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_339, input_350, )
res15 = intrp15.evaluate()(input_339, input_350, )
res16 = intrp16.evaluate()(input_339, input_350, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
module17.set_input('var_339', input_339)
module17.set_input('var_350', input_350)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_339, input_350, )
res19 = intrp19.evaluate()(input_339, input_350, )
res20 = intrp20.evaluate()(input_339, input_350, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
module21.set_input('var_339', input_339)
module21.set_input('var_350', input_350)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_339, input_350, )
res23 = intrp23.evaluate()(input_339, input_350, )
res24 = intrp24.evaluate()(input_339, input_350, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()

'''0,                   0, 9223372036854775808],
0,                   0, 9223372036854775808],

'''