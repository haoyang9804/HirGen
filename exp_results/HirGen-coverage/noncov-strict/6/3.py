import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (16,))#candidate|0|(16,)|var|float32
uop_1 = relay.asinh(var_0.astype('float32')) # shape=(16,)
bop_3 = relay.floor_mod(var_0.astype('float64'), relay.reshape(uop_1.astype('float64'), relay.shape_of(var_0))) # shape=(16,)
bop_6 = relay.logical_and(bop_3.astype('bool'), relay.reshape(uop_1.astype('bool'), relay.shape_of(bop_3))) # shape=(16,)
var_9 = relay.var("var_9", dtype = "float32", shape = (16,))#candidate|9|(16,)|var|float32
bop_10 = relay.greater_equal(var_0.astype('bool'), relay.reshape(var_9.astype('bool'), relay.shape_of(var_0))) # shape=(16,)
bop_13 = relay.left_shift(uop_1.astype('int16'), relay.reshape(bop_3.astype('int16'), relay.shape_of(uop_1))) # shape=(16,)
var_16 = relay.var("var_16", dtype = "float32", shape = (16,))#candidate|16|(16,)|var|float32
bop_17 = relay.multiply(uop_1.astype('uint16'), relay.reshape(var_16.astype('uint16'), relay.shape_of(uop_1))) # shape=(16,)
output = relay.Tuple([bop_6,bop_10,bop_13,bop_17,])
output2 = relay.Tuple([bop_6,bop_10,bop_13,bop_17,])
func_20 = relay.Function([var_0,var_9,var_16,], output)
mod['func_20'] = func_20
mod = relay.transform.InferType()(mod)
var_21 = relay.var("var_21", dtype = "float32", shape = (16,))#candidate|21|(16,)|var|float32
var_22 = relay.var("var_22", dtype = "float32", shape = (16,))#candidate|22|(16,)|var|float32
var_23 = relay.var("var_23", dtype = "float32", shape = (16,))#candidate|23|(16,)|var|float32
output = func_20(var_21,var_22,var_23,)
func_24 = relay.Function([var_21,var_22,var_23,], output)
mutated_mod['func_24'] = func_24
mutated_mod = relay.transform.InferType()(mutated_mod)
var_26 = relay.var("var_26", dtype = "float32", shape = ())#candidate|26|()|var|float32
uop_27 = relay.acosh(var_26.astype('float32')) # shape=()
bop_29 = relay.equal(uop_27.astype('bool'), var_26.astype('bool')) # shape=()
func_20_call = mod.get_global_var('func_20')
func_24_call = mutated_mod.get_global_var('func_24')
const_33 = relay.const([-6.399821,-4.128625,-8.944734,-0.261265,-3.200148,-3.352993,1.718629,7.436790,2.094002,7.993487,1.890061,-6.785195,1.978202,-0.894671,-7.631742,9.121994], dtype = "float32")#candidate|33|(16,)|const|float32
call_32 = relay.TupleGetItem(func_20_call(relay.reshape(const_33.astype('float32'), [16,]), relay.reshape(const_33.astype('float32'), [16,]), relay.reshape(const_33.astype('float32'), [16,]), ), 1)
call_34 = relay.TupleGetItem(func_24_call(relay.reshape(const_33.astype('float32'), [16,]), relay.reshape(const_33.astype('float32'), [16,]), relay.reshape(const_33.astype('float32'), [16,]), ), 1)
bop_35 = relay.floor_divide(bop_29.astype('float64'), call_32.astype('float64')) # shape=(16,)
bop_38 = relay.floor_divide(bop_29.astype('float64'), call_34.astype('float64')) # shape=(16,)
bop_39 = relay.subtract(bop_35.astype('int16'), var_26.astype('int16')) # shape=(16,)
bop_42 = relay.subtract(bop_38.astype('int16'), var_26.astype('int16')) # shape=(16,)
uop_43 = relay.asin(var_26.astype('float64')) # shape=()
bop_45 = relay.divide(var_26.astype('float64'), bop_29.astype('float64')) # shape=()
func_20_call = mod.get_global_var('func_20')
func_24_call = mutated_mod.get_global_var('func_24')
call_48 = relay.TupleGetItem(func_20_call(relay.reshape(bop_39.astype('float32'), [16,]), relay.reshape(bop_39.astype('float32'), [16,]), relay.reshape(bop_35.astype('float32'), [16,]), ), 2)
call_49 = relay.TupleGetItem(func_24_call(relay.reshape(bop_39.astype('float32'), [16,]), relay.reshape(bop_39.astype('float32'), [16,]), relay.reshape(bop_35.astype('float32'), [16,]), ), 2)
output = relay.Tuple([const_33,bop_39,uop_43,bop_45,call_48,])
output2 = relay.Tuple([const_33,bop_42,uop_43,bop_45,call_49,])
func_50 = relay.Function([var_26,], output)
mod['func_50'] = func_50
mod = relay.transform.InferType()(mod)
mutated_mod['func_50'] = func_50
mutated_mod = relay.transform.InferType()(mutated_mod)
var_51 = relay.var("var_51", dtype = "float32", shape = ())#candidate|51|()|var|float32
func_50_call = mutated_mod.get_global_var('func_50')
call_52 = func_50_call(var_51)
output = call_52
func_53 = relay.Function([var_51], output)
mutated_mod['func_53'] = func_53
mutated_mod = relay.transform.InferType()(mutated_mod)
var_55 = relay.var("var_55", dtype = "int8", shape = ())#candidate|55|()|var|int8
var_56 = relay.var("var_56", dtype = "int8", shape = ())#candidate|56|()|var|int8
bop_57 = relay.equal(var_55.astype('bool'), var_56.astype('bool')) # shape=()
uop_60 = relay.cos(var_56.astype('float64')) # shape=()
bop_62 = relay.minimum(uop_60.astype('int32'), bop_57.astype('int32')) # shape=()
bop_65 = relay.left_shift(var_56.astype('uint32'), bop_57.astype('uint32')) # shape=()
output = relay.Tuple([bop_62,bop_65,])
output2 = relay.Tuple([bop_62,bop_65,])
func_68 = relay.Function([var_55,var_56,], output)
mod['func_68'] = func_68
mod = relay.transform.InferType()(mod)
mutated_mod['func_68'] = func_68
mutated_mod = relay.transform.InferType()(mutated_mod)
func_68_call = mutated_mod.get_global_var('func_68')
var_70 = relay.var("var_70", dtype = "int8", shape = ())#candidate|70|()|var|int8
var_71 = relay.var("var_71", dtype = "int8", shape = ())#candidate|71|()|var|int8
call_69 = func_68_call(var_70,var_71,)
output = call_69
func_72 = relay.Function([var_70,var_71,], output)
mutated_mod['func_72'] = func_72
mutated_mod = relay.transform.InferType()(mutated_mod)
var_74 = relay.var("var_74", dtype = "float64", shape = (11,))#candidate|74|(11,)|var|float64
uop_75 = relay.cosh(var_74.astype('float64')) # shape=(11,)
uop_77 = relay.sigmoid(var_74.astype('float32')) # shape=(11,)
uop_79 = relay.acosh(var_74.astype('float64')) # shape=(11,)
var_81 = relay.var("var_81", dtype = "float64", shape = (11,))#candidate|81|(11,)|var|float64
bop_82 = relay.logical_xor(var_74.astype('int64'), relay.reshape(var_81.astype('int64'), relay.shape_of(var_74))) # shape=(11,)
uop_85 = relay.sinh(var_74.astype('float32')) # shape=(11,)
bop_87 = relay.not_equal(uop_75.astype('bool'), relay.reshape(var_74.astype('bool'), relay.shape_of(uop_75))) # shape=(11,)
uop_90 = relay.atanh(uop_79.astype('float64')) # shape=(11,)
bop_92 = relay.floor_divide(uop_77.astype('float32'), relay.reshape(uop_90.astype('float32'), relay.shape_of(uop_77))) # shape=(11,)
uop_95 = relay.asin(bop_87.astype('float32')) # shape=(11,)
bop_97 = relay.multiply(uop_95.astype('int32'), relay.reshape(uop_77.astype('int32'), relay.shape_of(uop_95))) # shape=(11,)
uop_100 = relay.atan(bop_92.astype('float32')) # shape=(11,)
bop_102 = relay.left_shift(uop_75.astype('int16'), relay.reshape(uop_100.astype('int16'), relay.shape_of(uop_75))) # shape=(11,)
uop_105 = relay.sinh(bop_92.astype('float32')) # shape=(11,)
bop_107 = relay.logical_and(uop_79.astype('bool'), relay.reshape(var_74.astype('bool'), relay.shape_of(uop_79))) # shape=(11,)
uop_110 = relay.log2(bop_102.astype('float64')) # shape=(11,)
uop_112 = relay.asinh(uop_110.astype('float32')) # shape=(11,)
bop_114 = relay.less_equal(uop_112.astype('bool'), relay.reshape(uop_95.astype('bool'), relay.shape_of(uop_112))) # shape=(11,)
output = relay.Tuple([bop_82,uop_85,bop_97,uop_105,bop_107,bop_114,])
output2 = relay.Tuple([bop_82,uop_85,bop_97,uop_105,bop_107,bop_114,])
func_117 = relay.Function([var_74,var_81,], output)
mod['func_117'] = func_117
mod = relay.transform.InferType()(mod)
mutated_mod['func_117'] = func_117
mutated_mod = relay.transform.InferType()(mutated_mod)
func_117_call = mutated_mod.get_global_var('func_117')
var_119 = relay.var("var_119", dtype = "float64", shape = (11,))#candidate|119|(11,)|var|float64
var_120 = relay.var("var_120", dtype = "float64", shape = (11,))#candidate|120|(11,)|var|float64
call_118 = func_117_call(var_119,var_120,)
output = call_118
func_121 = relay.Function([var_119,var_120,], output)
mutated_mod['func_121'] = func_121
mutated_mod = relay.transform.InferType()(mutated_mod)
var_123 = relay.var("var_123", dtype = "bool", shape = (5,))#candidate|123|(5,)|var|bool
var_124 = relay.var("var_124", dtype = "bool", shape = (5,))#candidate|124|(5,)|var|bool
bop_125 = relay.logical_and(var_123.astype('bool'), relay.reshape(var_124.astype('bool'), relay.shape_of(var_123))) # shape=(5,)
var_128 = relay.var("var_128", dtype = "bool", shape = (5,))#candidate|128|(5,)|var|bool
bop_129 = relay.power(var_124.astype('float64'), relay.reshape(var_128.astype('float64'), relay.shape_of(var_124))) # shape=(5,)
uop_132 = relay.log10(var_123.astype('float64')) # shape=(5,)
uop_134 = relay.log(uop_132.astype('float32')) # shape=(5,)
bop_136 = relay.minimum(uop_134.astype('int8'), relay.reshape(bop_125.astype('int8'), relay.shape_of(uop_134))) # shape=(5,)
bop_139 = relay.maximum(uop_132.astype('uint64'), relay.reshape(uop_134.astype('uint64'), relay.shape_of(uop_132))) # shape=(5,)
uop_142 = relay.atan(var_123.astype('float64')) # shape=(5,)
uop_144 = relay.sigmoid(uop_142.astype('float32')) # shape=(5,)
bop_146 = relay.logical_and(uop_144.astype('bool'), relay.reshape(bop_136.astype('bool'), relay.shape_of(uop_144))) # shape=(5,)
bop_149 = relay.mod(uop_144.astype('float32'), relay.reshape(bop_139.astype('float32'), relay.shape_of(uop_144))) # shape=(5,)
bop_152 = relay.floor_mod(bop_146.astype('float64'), relay.reshape(bop_149.astype('float64'), relay.shape_of(bop_146))) # shape=(5,)
bop_155 = relay.floor_mod(bop_129.astype('float32'), relay.reshape(bop_136.astype('float32'), relay.shape_of(bop_129))) # shape=(5,)
uop_158 = relay.sin(uop_142.astype('float64')) # shape=(5,)
var_160 = relay.var("var_160", dtype = "bool", shape = (5,))#candidate|160|(5,)|var|bool
bop_161 = relay.less(var_128.astype('bool'), relay.reshape(var_160.astype('bool'), relay.shape_of(var_128))) # shape=(5,)
bop_164 = relay.greater(uop_142.astype('bool'), relay.reshape(uop_144.astype('bool'), relay.shape_of(uop_142))) # shape=(5,)
var_167 = relay.var("var_167", dtype = "float64", shape = (5,))#candidate|167|(5,)|var|float64
bop_168 = relay.not_equal(uop_158.astype('bool'), relay.reshape(var_167.astype('bool'), relay.shape_of(uop_158))) # shape=(5,)
uop_171 = relay.erf(bop_125.astype('float64')) # shape=(5,)
output = relay.Tuple([bop_152,bop_155,bop_161,bop_164,bop_168,uop_171,])
output2 = relay.Tuple([bop_152,bop_155,bop_161,bop_164,bop_168,uop_171,])
func_173 = relay.Function([var_123,var_124,var_128,var_160,var_167,], output)
mod['func_173'] = func_173
mod = relay.transform.InferType()(mod)
var_174 = relay.var("var_174", dtype = "bool", shape = (5,))#candidate|174|(5,)|var|bool
var_175 = relay.var("var_175", dtype = "bool", shape = (5,))#candidate|175|(5,)|var|bool
var_176 = relay.var("var_176", dtype = "bool", shape = (5,))#candidate|176|(5,)|var|bool
var_177 = relay.var("var_177", dtype = "bool", shape = (5,))#candidate|177|(5,)|var|bool
var_178 = relay.var("var_178", dtype = "float64", shape = (5,))#candidate|178|(5,)|var|float64
output = func_173(var_174,var_175,var_176,var_177,var_178,)
func_179 = relay.Function([var_174,var_175,var_176,var_177,var_178,], output)
mutated_mod['func_179'] = func_179
mutated_mod = relay.transform.InferType()(mutated_mod)
var_181 = relay.var("var_181", dtype = "int8", shape = ())#candidate|181|()|var|int8
const_182 = relay.const([8,8,-2,7,9,-7], dtype = "int8")#candidate|182|(6,)|const|int8
bop_183 = relay.add(var_181.astype('int8'), const_182.astype('int8')) # shape=(6,)
bop_186 = relay.bitwise_and(const_182.astype('int8'), relay.reshape(bop_183.astype('int8'), relay.shape_of(const_182))) # shape=(6,)
const_189 = relay.const([2,7,-5,3,-4,-6], dtype = "int8")#candidate|189|(6,)|const|int8
bop_190 = relay.bitwise_and(bop_183.astype('int16'), relay.reshape(const_189.astype('int16'), relay.shape_of(bop_183))) # shape=(6,)
var_193 = relay.var("var_193", dtype = "int8", shape = (6,))#candidate|193|(6,)|var|int8
bop_194 = relay.bitwise_and(bop_183.astype('uint16'), relay.reshape(var_193.astype('uint16'), relay.shape_of(bop_183))) # shape=(6,)
uop_197 = relay.acos(bop_190.astype('float32')) # shape=(6,)
bop_199 = relay.divide(uop_197.astype('float64'), relay.reshape(const_189.astype('float64'), relay.shape_of(uop_197))) # shape=(6,)
bop_202 = relay.power(bop_199.astype('float32'), relay.reshape(bop_186.astype('float32'), relay.shape_of(bop_199))) # shape=(6,)
uop_205 = relay.asin(bop_199.astype('float32')) # shape=(6,)
bop_207 = relay.floor_mod(uop_205.astype('float32'), relay.reshape(bop_183.astype('float32'), relay.shape_of(uop_205))) # shape=(6,)
uop_210 = relay.sinh(bop_202.astype('float64')) # shape=(6,)
uop_212 = relay.asinh(bop_194.astype('float64')) # shape=(6,)
bop_214 = relay.power(bop_207.astype('float64'), relay.reshape(uop_197.astype('float64'), relay.shape_of(bop_207))) # shape=(6,)
bop_217 = relay.bitwise_and(bop_190.astype('uint8'), relay.reshape(bop_214.astype('uint8'), relay.shape_of(bop_190))) # shape=(6,)
output = relay.Tuple([uop_210,uop_212,bop_217,])
output2 = relay.Tuple([uop_210,uop_212,bop_217,])
func_220 = relay.Function([var_181,var_193,], output)
mod['func_220'] = func_220
mod = relay.transform.InferType()(mod)
mutated_mod['func_220'] = func_220
mutated_mod = relay.transform.InferType()(mutated_mod)
func_220_call = mutated_mod.get_global_var('func_220')
var_222 = relay.var("var_222", dtype = "int8", shape = ())#candidate|222|()|var|int8
var_223 = relay.var("var_223", dtype = "int8", shape = (6,))#candidate|223|(6,)|var|int8
call_221 = func_220_call(var_222,var_223,)
output = call_221
func_224 = relay.Function([var_222,var_223,], output)
mutated_mod['func_224'] = func_224
mutated_mod = relay.transform.InferType()(mutated_mod)
var_226 = relay.var("var_226", dtype = "float32", shape = (6,))#candidate|226|(6,)|var|float32
uop_227 = relay.sin(var_226.astype('float32')) # shape=(6,)
uop_229 = relay.rsqrt(uop_227.astype('float64')) # shape=(6,)
bop_231 = relay.maximum(var_226.astype('int8'), relay.reshape(uop_227.astype('int8'), relay.shape_of(var_226))) # shape=(6,)
uop_234 = relay.atanh(uop_227.astype('float32')) # shape=(6,)
bop_236 = relay.floor_mod(uop_234.astype('float64'), relay.reshape(uop_229.astype('float64'), relay.shape_of(uop_234))) # shape=(6,)
uop_239 = relay.tan(uop_227.astype('float32')) # shape=(6,)
var_241 = relay.var("var_241", dtype = "float32", shape = (6,))#candidate|241|(6,)|var|float32
bop_242 = relay.less_equal(var_226.astype('bool'), relay.reshape(var_241.astype('bool'), relay.shape_of(var_226))) # shape=(6,)
bop_245 = relay.less(uop_227.astype('bool'), relay.reshape(var_241.astype('bool'), relay.shape_of(uop_227))) # shape=(6,)
uop_248 = relay.erf(var_226.astype('float32')) # shape=(6,)
bop_250 = relay.not_equal(uop_229.astype('bool'), relay.reshape(uop_227.astype('bool'), relay.shape_of(uop_229))) # shape=(6,)
bop_253 = relay.add(bop_245.astype('uint32'), relay.reshape(bop_242.astype('uint32'), relay.shape_of(bop_245))) # shape=(6,)
uop_256 = relay.cosh(uop_227.astype('float32')) # shape=(6,)
uop_258 = relay.atan(bop_253.astype('float64')) # shape=(6,)
uop_260 = relay.atanh(bop_250.astype('float32')) # shape=(6,)
uop_262 = relay.atan(bop_253.astype('float64')) # shape=(6,)
const_264 = relay.const([False,True,True,False,True,False], dtype = "bool")#candidate|264|(6,)|const|bool
bop_265 = relay.greater_equal(bop_245.astype('bool'), relay.reshape(const_264.astype('bool'), relay.shape_of(bop_245))) # shape=(6,)
func_173_call = mod.get_global_var('func_173')
func_179_call = mutated_mod.get_global_var('func_179')
var_269 = relay.var("var_269", dtype = "bool", shape = (5,))#candidate|269|(5,)|var|bool
call_268 = relay.TupleGetItem(func_173_call(relay.reshape(var_269.astype('bool'), [5,]), relay.reshape(var_269.astype('bool'), [5,]), relay.reshape(var_269.astype('bool'), [5,]), relay.reshape(var_269.astype('bool'), [5,]), relay.reshape(var_269.astype('float64'), [5,]), ), 2)
call_270 = relay.TupleGetItem(func_179_call(relay.reshape(var_269.astype('bool'), [5,]), relay.reshape(var_269.astype('bool'), [5,]), relay.reshape(var_269.astype('bool'), [5,]), relay.reshape(var_269.astype('bool'), [5,]), relay.reshape(var_269.astype('float64'), [5,]), ), 2)
var_271 = relay.var("var_271", dtype = "float32", shape = (6,))#candidate|271|(6,)|var|float32
bop_272 = relay.right_shift(uop_260.astype('uint16'), relay.reshape(var_271.astype('uint16'), relay.shape_of(uop_260))) # shape=(6,)
bop_275 = relay.minimum(uop_248.astype('float32'), relay.reshape(bop_236.astype('float32'), relay.shape_of(uop_248))) # shape=(6,)
bop_278 = relay.greater_equal(uop_260.astype('bool'), relay.reshape(uop_229.astype('bool'), relay.shape_of(uop_260))) # shape=(6,)
output = relay.Tuple([bop_231,uop_239,uop_256,uop_258,uop_262,bop_265,call_268,var_269,bop_272,bop_275,bop_278,])
output2 = relay.Tuple([bop_231,uop_239,uop_256,uop_258,uop_262,bop_265,call_270,var_269,bop_272,bop_275,bop_278,])
func_281 = relay.Function([var_226,var_241,var_269,var_271,], output)
mod['func_281'] = func_281
mod = relay.transform.InferType()(mod)
mutated_mod['func_281'] = func_281
mutated_mod = relay.transform.InferType()(mutated_mod)
func_281_call = mutated_mod.get_global_var('func_281')
var_283 = relay.var("var_283", dtype = "float32", shape = (6,))#candidate|283|(6,)|var|float32
var_284 = relay.var("var_284", dtype = "float32", shape = (6,))#candidate|284|(6,)|var|float32
var_285 = relay.var("var_285", dtype = "bool", shape = (5,))#candidate|285|(5,)|var|bool
var_286 = relay.var("var_286", dtype = "float32", shape = (6,))#candidate|286|(6,)|var|float32
call_282 = func_281_call(var_283,var_284,var_285,var_286,)
output = call_282
func_287 = relay.Function([var_283,var_284,var_285,var_286,], output)
mutated_mod['func_287'] = func_287
mutated_mod = relay.transform.InferType()(mutated_mod)
var_289 = relay.var("var_289", dtype = "int64", shape = (2, 11))#candidate|289|(2, 11)|var|int64
const_290 = relay.const([[7,-1,6,3,-3,4,3,3,2,8,-7],[10,-6,9,10,-3,1,6,-1,3,-5,9]], dtype = "int64")#candidate|290|(2, 11)|const|int64
bop_291 = relay.logical_xor(var_289.astype('int64'), relay.reshape(const_290.astype('int64'), relay.shape_of(var_289))) # shape=(2, 11)
output = relay.Tuple([bop_291,])
output2 = relay.Tuple([bop_291,])
func_294 = relay.Function([var_289,], output)
mod['func_294'] = func_294
mod = relay.transform.InferType()(mod)
var_295 = relay.var("var_295", dtype = "int64", shape = (2, 11))#candidate|295|(2, 11)|var|int64
output = func_294(var_295)
func_296 = relay.Function([var_295], output)
mutated_mod['func_296'] = func_296
mutated_mod = relay.transform.InferType()(mutated_mod)
var_298 = relay.var("var_298", dtype = "int64", shape = (4, 4, 3))#candidate|298|(4, 4, 3)|var|int64
var_299 = relay.var("var_299", dtype = "int64", shape = (4, 4, 3))#candidate|299|(4, 4, 3)|var|int64
bop_300 = relay.greater(var_298.astype('bool'), relay.reshape(var_299.astype('bool'), relay.shape_of(var_298))) # shape=(4, 4, 3)
uop_303 = relay.acosh(bop_300.astype('float64')) # shape=(4, 4, 3)
bop_305 = relay.floor_mod(uop_303.astype('float64'), relay.reshape(bop_300.astype('float64'), relay.shape_of(uop_303))) # shape=(4, 4, 3)
func_117_call = mod.get_global_var('func_117')
func_121_call = mutated_mod.get_global_var('func_121')
var_309 = relay.var("var_309", dtype = "float64", shape = (11, 1))#candidate|309|(11, 1)|var|float64
call_308 = relay.TupleGetItem(func_117_call(relay.reshape(var_309.astype('float64'), [11,]), relay.reshape(var_309.astype('float64'), [11,]), ), 4)
call_310 = relay.TupleGetItem(func_121_call(relay.reshape(var_309.astype('float64'), [11,]), relay.reshape(var_309.astype('float64'), [11,]), ), 4)
bop_311 = relay.power(bop_305.astype('float64'), relay.reshape(bop_300.astype('float64'), relay.shape_of(bop_305))) # shape=(4, 4, 3)
uop_314 = relay.log(var_309.astype('float64')) # shape=(11, 1)
uop_316 = relay.sqrt(uop_303.astype('float32')) # shape=(4, 4, 3)
uop_318 = relay.sin(uop_316.astype('float32')) # shape=(4, 4, 3)
uop_320 = relay.sin(uop_318.astype('float32')) # shape=(4, 4, 3)
uop_322 = relay.asin(uop_320.astype('float64')) # shape=(4, 4, 3)
bop_324 = relay.power(uop_316.astype('float32'), relay.reshape(bop_305.astype('float32'), relay.shape_of(uop_316))) # shape=(4, 4, 3)
var_327 = relay.var("var_327", dtype = "float64", shape = (4, 4, 3))#candidate|327|(4, 4, 3)|var|float64
bop_328 = relay.floor_mod(uop_322.astype('float64'), relay.reshape(var_327.astype('float64'), relay.shape_of(uop_322))) # shape=(4, 4, 3)
bop_331 = relay.floor_divide(bop_328.astype('float32'), relay.reshape(uop_316.astype('float32'), relay.shape_of(bop_328))) # shape=(4, 4, 3)
uop_334 = relay.erf(var_298.astype('float32')) # shape=(4, 4, 3)
uop_336 = relay.cos(uop_318.astype('float64')) # shape=(4, 4, 3)
var_338 = relay.var("var_338", dtype = "float32", shape = (4, 4, 3))#candidate|338|(4, 4, 3)|var|float32
bop_339 = relay.left_shift(uop_320.astype('int16'), relay.reshape(var_338.astype('int16'), relay.shape_of(uop_320))) # shape=(4, 4, 3)
bop_342 = relay.greater_equal(uop_320.astype('bool'), relay.reshape(bop_324.astype('bool'), relay.shape_of(uop_320))) # shape=(4, 4, 3)
uop_345 = relay.exp(uop_322.astype('float64')) # shape=(4, 4, 3)
output = relay.Tuple([call_308,bop_311,uop_314,bop_331,uop_334,uop_336,bop_339,bop_342,uop_345,])
output2 = relay.Tuple([call_310,bop_311,uop_314,bop_331,uop_334,uop_336,bop_339,bop_342,uop_345,])
F = relay.Function([var_298,var_299,var_309,var_327,var_338,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_298,var_299,var_309,var_327,var_338,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_298= np.array([[[-1,4,10],[-9,3,-4],[-4,2,9],[-10,-5,-4]],[[-3,2,-7],[9,-1,-1],[8,-4,1],[-7,8,-4]],[[9,6,10],[10,2,-9],[6,8,-10],[10,2,2]],[[1,6,-9],[8,6,-2],[3,10,-4],[6,-8,9]]], dtype='int64')
module1.set_input('var_298', input_298)
input_299= np.array([[[7,9,-5],[-3,-10,-8],[1,9,-10],[-6,2,10]],[[-8,8,-5],[5,10,1],[6,-4,5],[7,7,-5]],[[-6,-4,10],[6,2,-3],[5,-9,3],[10,4,-6]],[[-3,-4,1],[-9,-4,-7],[7,-2,9],[6,-5,-7]]], dtype='int64')
module1.set_input('var_299', input_299)
input_309= np.array([[-3.068879],[-8.671185],[-4.224525],[7.082705],[6.243319],[5.856266],[-3.336293],[2.291408],[-2.918236],[-9.531581],[-8.380668]], dtype='float64')
module1.set_input('var_309', input_309)
input_327= np.array([[[-8.861974,-9.726220,1.997235],[-0.762889,8.859931,-1.685610],[-9.239971,-6.726915,-6.046264],[-3.474436,-4.221812,-5.310299]],[[5.919901,-7.212773,9.175718],[8.179073,-3.147555,-5.354451],[8.419367,7.265199,6.226139],[0.819473,-2.289850,-8.045296]],[[3.590902,-4.111591,2.953574],[7.604435,-2.859333,-5.531918],[3.161580,2.576632,4.162543],[4.164383,-8.738185,-0.836590]],[[-9.336630,-8.871407,2.233693],[-9.423087,6.143945,-9.156754],[8.877594,3.326258,6.356514],[5.685333,-9.166628,3.914520]]], dtype='float64')
module1.set_input('var_327', input_327)
input_338= np.array([[[-9.835979,-7.428267,7.001374],[-0.092564,-0.934440,8.579704],[2.154993,-2.172309,-1.535507],[-6.853094,8.316746,2.137912]],[[2.872821,7.410890,-5.177884],[-6.941374,9.293820,1.530232],[1.126091,-0.554257,-1.884946],[6.623652,8.028000,3.044903]],[[7.047241,2.993254,0.496866],[1.829224,0.182411,-9.465183],[6.734325,-0.793525,-5.723624],[-2.196084,-7.059029,2.960291]],[[-2.361189,-1.836633,4.723678],[0.584460,5.778163,5.179944],[-8.682129,-4.139528,0.146290],[6.612250,6.953318,5.753527]]], dtype='float32')
module1.set_input('var_338', input_338)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_298, input_299, input_309, input_327, input_338, )
res3 = intrp3.evaluate()(input_298, input_299, input_309, input_327, input_338, )
res4 = intrp4.evaluate()(input_298, input_299, input_309, input_327, input_338, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
module5.set_input('var_298', input_298)
module5.set_input('var_299', input_299)
module5.set_input('var_309', input_309)
module5.set_input('var_327', input_327)
module5.set_input('var_338', input_338)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_298, input_299, input_309, input_327, input_338, )
res7 = intrp7.evaluate()(input_298, input_299, input_309, input_327, input_338, )
res8 = intrp8.evaluate()(input_298, input_299, input_309, input_327, input_338, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
module9.set_input('var_298', input_298)
module9.set_input('var_299', input_299)
module9.set_input('var_309', input_309)
module9.set_input('var_327', input_327)
module9.set_input('var_338', input_338)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_298, input_299, input_309, input_327, input_338, )
res11 = intrp11.evaluate()(input_298, input_299, input_309, input_327, input_338, )
res12 = intrp12.evaluate()(input_298, input_299, input_309, input_327, input_338, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
module13.set_input('var_298', input_298)
module13.set_input('var_299', input_299)
module13.set_input('var_309', input_309)
module13.set_input('var_327', input_327)
module13.set_input('var_338', input_338)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_298, input_299, input_309, input_327, input_338, )
res15 = intrp15.evaluate()(input_298, input_299, input_309, input_327, input_338, )
res16 = intrp16.evaluate()(input_298, input_299, input_309, input_327, input_338, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
module17.set_input('var_298', input_298)
module17.set_input('var_299', input_299)
module17.set_input('var_309', input_309)
module17.set_input('var_327', input_327)
module17.set_input('var_338', input_338)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_298, input_299, input_309, input_327, input_338, )
res19 = intrp19.evaluate()(input_298, input_299, input_309, input_327, input_338, )
res20 = intrp20.evaluate()(input_298, input_299, input_309, input_327, input_338, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
module21.set_input('var_298', input_298)
module21.set_input('var_299', input_299)
module21.set_input('var_309', input_309)
module21.set_input('var_327', input_327)
module21.set_input('var_338', input_338)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_298, input_299, input_309, input_327, input_338, )
res23 = intrp23.evaluate()(input_298, input_299, input_309, input_327, input_338, )
res24 = intrp24.evaluate()(input_298, input_299, input_309, input_327, input_338, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()

'''57: TVMFuncCall
56: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
55: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
54: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
53: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
52: tvm::transform::Pass::operator()(tvm::IRModule) const
51: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
50: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
49: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
48: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
47: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
46: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
45: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
44: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
43: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
42: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
41: _ZN3tvm5relay16MixedModeMutato
40: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
39: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
38: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
37: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
36: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
34: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
32: _ZN3tvm5relay16MixedModeMutato
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
27: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
26: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
25: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
24: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
23: tvm::transform::Pass::operator()(tvm::IRModule) const
22: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
21: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
16: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
15: tvm::relay::TypeInferencer::Infer(tvm::GlobalVar, tvm::relay::Function)
14: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
13: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
12: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
11: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
10: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
9: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::FunctionNode const*)
8: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
7: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
6: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
5: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
4: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
3: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::CallNode const*)
2: tvm::relay::TypeInferencer::GeneralCall(tvm::relay::CallNode const*, tvm::runtime::Array<tvm::Type, void>)
1: _ZN3tvm17DiagnosticContext9EmitFatalERKNS_1
0: tvm::DiagnosticContext::Render()

'''