import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (12, 7, 6))#candidate|0|(12, 7, 6)|var|float64
uop_1 = relay.cosh(var_0.astype('float64')) # shape=(12, 7, 6)
bop_3 = relay.greater(uop_1.astype('bool'), relay.reshape(var_0.astype('bool'), relay.shape_of(uop_1))) # shape=(12, 7, 6)
uop_6 = relay.acosh(var_0.astype('float64')) # shape=(12, 7, 6)
uop_8 = relay.sigmoid(bop_3.astype('float64')) # shape=(12, 7, 6)
uop_10 = relay.cosh(uop_8.astype('float32')) # shape=(12, 7, 6)
uop_12 = relay.sinh(uop_10.astype('float32')) # shape=(12, 7, 6)
uop_14 = relay.log(uop_10.astype('float32')) # shape=(12, 7, 6)
bop_16 = relay.right_shift(uop_10.astype('uint8'), relay.reshape(uop_8.astype('uint8'), relay.shape_of(uop_10))) # shape=(12, 7, 6)
uop_19 = relay.acosh(bop_16.astype('float32')) # shape=(12, 7, 6)
bop_21 = relay.logical_xor(uop_1.astype('int16'), relay.reshape(uop_19.astype('int16'), relay.shape_of(uop_1))) # shape=(12, 7, 6)
bop_24 = relay.power(uop_10.astype('float32'), relay.reshape(bop_21.astype('float32'), relay.shape_of(uop_10))) # shape=(12, 7, 6)
bop_27 = relay.power(uop_10.astype('float64'), relay.reshape(uop_14.astype('float64'), relay.shape_of(uop_10))) # shape=(12, 7, 6)
uop_30 = relay.asinh(bop_16.astype('float64')) # shape=(12, 7, 6)
var_32 = relay.var("var_32", dtype = "float64", shape = (12, 7, 6))#candidate|32|(12, 7, 6)|var|float64
bop_33 = relay.bitwise_and(bop_27.astype('int32'), relay.reshape(var_32.astype('int32'), relay.shape_of(bop_27))) # shape=(12, 7, 6)
var_36 = relay.var("var_36", dtype = "float32", shape = (12, 7, 6))#candidate|36|(12, 7, 6)|var|float32
bop_37 = relay.greater(uop_19.astype('bool'), relay.reshape(var_36.astype('bool'), relay.shape_of(uop_19))) # shape=(12, 7, 6)
var_40 = relay.var("var_40", dtype = "bool", shape = (12, 7, 6))#candidate|40|(12, 7, 6)|var|bool
bop_41 = relay.multiply(bop_37.astype('uint32'), relay.reshape(var_40.astype('uint32'), relay.shape_of(bop_37))) # shape=(12, 7, 6)
uop_44 = relay.asin(bop_16.astype('float64')) # shape=(12, 7, 6)
bop_46 = relay.mod(bop_21.astype('float32'), relay.reshape(bop_33.astype('float32'), relay.shape_of(bop_21))) # shape=(12, 7, 6)
uop_49 = relay.asinh(bop_46.astype('float64')) # shape=(12, 7, 6)
uop_51 = relay.asin(bop_16.astype('float64')) # shape=(12, 7, 6)
output = relay.Tuple([uop_6,uop_12,bop_24,uop_30,bop_41,uop_44,uop_49,uop_51,])
output2 = relay.Tuple([uop_6,uop_12,bop_24,uop_30,bop_41,uop_44,uop_49,uop_51,])
func_53 = relay.Function([var_0,var_32,var_36,var_40,], output)
mod['func_53'] = func_53
mod = relay.transform.InferType()(mod)
var_54 = relay.var("var_54", dtype = "float64", shape = (12, 7, 6))#candidate|54|(12, 7, 6)|var|float64
var_55 = relay.var("var_55", dtype = "float64", shape = (12, 7, 6))#candidate|55|(12, 7, 6)|var|float64
var_56 = relay.var("var_56", dtype = "float32", shape = (12, 7, 6))#candidate|56|(12, 7, 6)|var|float32
var_57 = relay.var("var_57", dtype = "bool", shape = (12, 7, 6))#candidate|57|(12, 7, 6)|var|bool
output = func_53(var_54,var_55,var_56,var_57,)
func_58 = relay.Function([var_54,var_55,var_56,var_57,], output)
mutated_mod['func_58'] = func_58
mutated_mod = relay.transform.InferType()(mutated_mod)
var_60 = relay.var("var_60", dtype = "float32", shape = ())#candidate|60|()|var|float32
uop_61 = relay.asin(var_60.astype('float32')) # shape=()
uop_63 = relay.tan(uop_61.astype('float64')) # shape=()
func_53_call = mod.get_global_var('func_53')
func_58_call = mutated_mod.get_global_var('func_58')
const_66 = relay.const([-2.740293,5.756234,8.389928,2.588811,-3.978731,5.489622,6.366696,1.671807,-4.607490,-3.448189,-5.186683,-7.782429,1.089228,-7.671564,-9.966174,5.461837,0.336027,1.722858,-1.582197,6.948175,-2.673863,8.930115,1.754475,6.519555,3.610063,-9.585268,-9.318195,2.560952,-9.516469,2.376542,7.270503,5.212297,0.976410,8.045842,4.022558,-3.633258,5.578366,-8.207496,-2.532377,-6.430615,8.796940,-2.137990,-4.107747,9.570854,8.433805,8.610671,-8.453975,9.097497,4.320361,1.770339,-3.653216,7.324368,-1.184885,-6.562371,5.717850,-2.641082,8.330114,-6.685105,-4.086933,5.244569,-4.525398,1.327368,7.523791,8.679649,8.910841,-9.037828,-9.992277,-0.690193,8.987328,-4.934072,3.993258,7.272444,2.160367,-9.756263,-5.827071,7.072017,-6.620966,3.020385,0.227701,0.547763,1.487366,-1.752386,8.072357,-5.502736,-8.676055,0.298375,8.586451,-9.437282,-9.448281,9.950412,-5.774276,-1.487960,9.852545,8.074145,-2.670782,8.369696,-0.924122,3.149856,-0.232501,-8.985717,-5.427527,4.252337,-9.544366,-8.890976,-3.127169,5.236793,-0.514717,-8.387610,8.136621,2.495702,-7.429931,-9.551843,-4.421944,-7.869935,3.145547,2.473558,-2.560947,-4.456376,1.474375,8.948328,-7.788066,-6.972441,-3.401682,-0.975063,-4.213989,5.363677,-8.295773,0.512771,-4.361563,-6.664843,-2.983286,3.815016,-2.756448,-6.975835,6.806435,7.301694,-2.344017,-8.417761,-6.151567,6.223945,-9.453233,7.891917,-9.861687,-9.558851,-3.119030,-5.342173,-6.960533,8.371887,6.527075,-4.817312,-8.774217,-9.068291,-4.490092,0.508180,1.920653,0.257803,-8.835982,4.509781,-1.757785,9.587236,-3.378304,3.109016,4.760997,6.088598,-2.508300,1.693460,4.838927,-0.207088,1.494383,9.082878,-4.081489,-1.979413,2.162518,4.717782,8.911507,9.152323,-3.595095,2.083233,2.352480,4.699723,-8.461116,-0.311471,-6.906137,7.432166,5.021440,4.636767,-0.248087,-2.630193,7.044611,9.719630,-1.266689,-7.643464,3.596816,-2.378009,-6.195807,2.015427,7.263853,-7.345237,-3.946701,1.380654,-5.574997,1.445686,-7.242223,3.857627,0.308940,6.779491,7.669986,-7.918325,5.921458,1.867945,-8.342955,-1.702719,2.532120,-1.163360,4.191824,7.073465,-9.534932,-9.070901,-6.734556,-7.237258,-7.264052,4.445923,3.698827,-7.907602,-0.852337,-2.180190,-8.885293,-1.387788,8.176222,9.537035,-8.376577,1.220323,9.968471,-8.885368,9.598335,1.577199,-1.327974,3.342174,6.839141,-1.665986,7.650050,-3.651467,8.264207,2.306329,6.428572,2.173783,7.237776,-2.890659,-6.452220,-4.563764,0.606272,0.483625,-8.741773,1.839699,7.954041,-6.264767,-6.839785,-7.229110,7.723374,3.064005,5.640721,4.055324,5.574548,9.941184,-2.378008,8.483122,-4.031346,2.030706,3.997186,-5.839871,-6.588425,7.120215,9.921935,-7.778114,-2.652172,-2.617880,4.436927,-9.057824,0.283296,-1.905387,-3.182845,-8.740052,9.774330,9.671128,-8.798426,1.855188,-2.031631,-1.030901,-5.845730,2.867032,-8.944348,-5.284788,6.398737,-3.322440,2.954471,-5.439980,-8.632370,-5.479469,-0.284621,-2.620608,3.088019,0.008716,-2.012137,2.931426,-5.951694,2.112412,-3.533393,-4.356709,7.733826,4.565414,-9.008710,-3.370038,-9.715535,-6.737944,-4.392867,4.582432,-7.283935,-1.085124,-7.158491,8.224750,-8.852526,7.186276,3.528163,-0.679665,-5.745578,4.316993,8.316280,3.373588,-3.417990,-3.050417,-9.348459,-1.900416,-3.226186,-9.885849,-8.854642,3.876210,-1.122676,-2.947374,5.432006,-5.620604,-9.141677,-0.347300,3.401991,7.713177,5.435484,1.880156,9.246633,-2.209822,-1.838024,8.366553,-3.731198,9.184159,0.971608,-5.682027,-3.568620,9.932591,-3.461263,-2.598191,6.238517,4.612692,0.533396,0.554381,-8.351078,-0.816155,-8.026299,-9.077838,-1.881473,4.445183,2.402096,-6.408609,1.334338,-6.863476,5.025867,4.244465,-3.175735,7.348283,1.587817,-7.243324,-7.764741,-1.158120,-0.893234,-0.849474,-4.124330,0.559014,5.375483,1.132584,9.904745,4.814444,-9.486745,0.725088,7.673681,-3.255967,3.006659,8.596063,7.756083,-3.518518,-9.146033,5.496001,1.021589,-3.587394,-1.100111,2.092159,2.611159,6.057191,8.116204,-5.039025,2.801113,-8.545502,3.038857,0.171137,8.628434,4.070794,-9.152391,5.089752,8.833112,-3.442647,2.018188,7.441325,-8.966057,6.692852,4.091390,9.867874,-4.134337,-9.638601,9.519414,8.595052,9.449110,-0.892224,4.150032,1.705333,0.189989,-4.044164,3.370094,0.184209,-4.474981,-2.511725,-3.320937,9.195629,7.258835,-7.648417,4.751017,8.609188,-1.221648,-2.745118,1.374152,-3.635368,4.092210,-8.194381,-8.955767,5.306978,-5.975822,5.344562,1.814030,1.660993,-8.313209,3.074490,1.018031,-0.447076,-3.495432,0.315741,7.854533,-5.112398,1.072856,9.954575,-7.596852,-0.856249,-5.715879,1.702202,-3.306365,-2.384375,-3.821016,-7.022192,7.476283,-5.453914,9.270187,0.709367,5.843229,-3.367001,-8.492778,4.220141,-2.039171,4.294886,6.944680,-8.928557,-1.971375,-6.347962,-5.601986,-9.769927,2.571852,3.568434,3.733816,5.139702,-8.348902,7.821898,-8.108177,8.021111,-7.787841,5.359350,0.691409,-6.679550,6.733975,-6.387083,0.063936,7.523350], dtype = "float64")#candidate|66|(504,)|const|float64
call_65 = relay.TupleGetItem(func_53_call(relay.reshape(const_66.astype('float64'), [12, 7, 6]), relay.reshape(const_66.astype('float64'), [12, 7, 6]), relay.reshape(const_66.astype('float32'), [12, 7, 6]), relay.reshape(const_66.astype('bool'), [12, 7, 6]), ), 0)
call_67 = relay.TupleGetItem(func_58_call(relay.reshape(const_66.astype('float64'), [12, 7, 6]), relay.reshape(const_66.astype('float64'), [12, 7, 6]), relay.reshape(const_66.astype('float32'), [12, 7, 6]), relay.reshape(const_66.astype('bool'), [12, 7, 6]), ), 0)
bop_68 = relay.not_equal(uop_63.astype('bool'), const_66.astype('bool')) # shape=(504,)
uop_71 = relay.log2(var_60.astype('float64')) # shape=()
const_73 = relay.const([[[9.740036,1.505826,7.396889,-9.198646,6.787845,-0.144173,4.046047,9.131063,4.522325,-3.764638,-6.251672],[-8.496574,-8.526998,-6.489025,4.589225,8.613686,-1.377784,-5.620445,3.473945,-9.261146,-2.804017,-5.489691],[8.992852,-1.123534,4.745648,-0.073834,8.039099,9.345987,9.474304,6.063342,1.129334,9.325970,-4.458602],[2.356588,1.410878,-7.001709,-3.138293,6.005508,5.856480,-2.916871,-6.187605,-6.506708,9.331986,0.733385]],[[9.808020,0.416148,3.832131,-1.406492,-6.628398,5.992223,2.306248,5.327656,-4.085958,4.507571,8.545179],[-4.959693,-1.839937,7.821362,-6.934420,-4.654725,-3.387354,-7.197537,1.260987,6.464386,-5.023550,2.037038],[-8.332976,0.077642,8.458209,-8.012517,8.537627,-9.586501,9.533496,3.868229,-7.193991,9.808222,-5.300662],[-2.409616,0.706133,6.289867,-8.207383,2.678237,-7.990730,6.824282,-4.233275,-5.065406,-4.109644,7.575984]],[[-3.276536,8.933659,2.842035,9.722481,-4.919582,3.063175,6.410653,2.146405,6.144303,7.559725,6.897811],[2.435016,-1.681197,0.556203,-7.792641,2.136522,-3.908630,2.591332,4.912702,9.749308,-7.571419,3.663834],[1.313159,9.518772,-1.022910,-9.768548,5.003721,2.572657,3.866976,-6.545192,2.691805,3.645972,-4.242050],[2.404960,9.316289,4.194460,0.488277,-0.328132,8.664685,4.519433,-5.679953,7.847190,3.585234,7.972415]],[[-3.119563,-1.528202,8.263407,6.172458,-2.809961,-6.953439,5.664879,6.016637,-0.110880,2.351848,6.178025],[8.785785,8.767682,2.300263,2.889889,7.334507,-3.870578,-9.176862,6.641038,8.560174,-5.788645,-1.660745],[3.258105,5.620955,1.340131,3.464009,6.743047,-2.443277,-5.709692,-6.553600,-4.830249,2.588247,4.561688],[3.863581,7.255581,6.227182,-1.578586,5.690183,7.924684,8.253825,2.070222,-1.740487,-5.949544,7.073191]],[[-4.911303,-7.858011,-7.051265,-9.040156,6.536601,-6.609470,-0.021760,7.431608,9.541311,3.292659,5.522078],[9.185853,7.907002,9.246677,-5.966598,-3.999377,-3.982960,-0.407133,-0.379266,7.514386,-7.540840,-1.796241],[6.462388,1.781760,-7.941569,7.329296,6.756486,2.739316,-6.064604,-4.015568,7.507377,-6.810391,-0.924279],[-8.575914,7.655075,-0.651404,-0.318621,-9.251994,-1.499974,-5.259113,-7.959433,-5.023504,9.086284,9.524342]],[[7.029555,-5.399234,-7.166348,-0.157764,9.833094,-9.631996,-5.687146,-5.268439,9.118379,-4.035118,-5.175014],[6.615420,4.900577,0.852094,9.798651,-9.341097,-3.771737,7.383670,9.483575,1.452006,2.744523,0.579610],[1.758394,-4.262788,8.540127,-3.640510,4.914158,-5.232138,-1.940973,5.366728,-0.363270,-8.035509,3.656238],[-3.903593,1.175420,7.060924,0.910621,7.925215,1.859917,8.968863,-1.799715,-7.954800,9.717084,-2.059399]],[[-0.208964,9.533695,-9.412201,-9.859179,-7.534929,-9.516573,-5.095122,-4.960497,0.559248,-8.721187,2.180490],[1.966768,-9.599363,9.281610,-8.206496,5.389305,-2.766218,-6.163332,-4.529598,-1.435202,3.651725,-6.587394],[-2.946149,7.452725,-0.038657,-4.635771,0.749430,-9.185973,-9.875899,-0.615893,0.013627,7.287798,-5.813987],[-3.517951,-8.259937,8.996390,-3.358929,-0.093837,-1.720571,-3.800665,5.279217,-2.674185,-5.890154,-7.254639]],[[7.686749,4.054157,-1.777784,-6.938070,-1.340273,1.266186,3.541146,-0.463078,9.505100,-3.030269,-7.098131],[-5.002337,-3.356727,5.210382,8.878507,2.179922,-5.534861,-3.882568,8.561588,7.573815,9.292996,1.104655],[-7.333884,-3.431483,-2.349307,9.929163,2.029017,-2.230612,7.753391,-0.097948,-9.587668,3.777762,7.198098],[5.528588,-5.000565,-0.210249,-2.681058,-6.823348,-9.059710,-9.459083,8.546041,5.019259,3.569272,-3.406385]],[[7.304212,-6.232484,-7.275122,-9.596987,1.325527,2.854851,5.665176,4.152308,2.787090,-1.946530,4.879467],[-2.841008,-9.757000,0.379576,9.184999,-3.272425,0.314431,-8.900907,-6.030753,9.019182,3.327647,7.600712],[-4.046644,-4.455419,-5.075232,4.106674,7.683026,5.314352,-2.655391,1.922271,-9.395590,-9.336259,-1.276829],[-0.446983,-2.442403,-3.839669,-1.937174,-9.806425,7.221239,-7.364766,3.504443,0.138741,3.526035,-2.516285]],[[3.908790,7.239196,-7.529797,7.743502,4.595138,0.930631,7.569108,2.409513,-5.419016,2.779191,-0.992703],[8.020927,3.455255,-8.506343,2.891244,-2.895060,-9.055712,1.289149,-1.031559,-3.011085,-1.484127,0.698230],[4.210420,8.564237,-3.267529,5.806724,-4.876347,-0.675205,4.975410,-8.102827,3.365447,-1.140236,-9.321036],[-2.730121,-9.743228,-7.752141,3.679159,3.539169,-7.994225,-9.626658,5.736054,9.697577,-3.495105,1.598633]],[[-8.386258,5.533927,3.226185,-4.262754,5.170925,-1.996130,9.076076,-2.203988,-0.003466,5.238045,-2.620920],[7.681115,-8.383636,6.990757,-4.015336,-2.903765,-9.986838,-1.405971,3.493207,7.635684,-6.000744,2.256122],[5.853567,-0.715874,0.124672,-4.798564,6.688470,3.427210,3.328760,-7.999778,0.224611,-5.886681,-4.857590],[5.291189,7.480564,-9.072499,-5.885184,2.600131,7.173353,0.719807,-3.240030,-7.108221,0.812855,0.632436]],[[-2.988588,-8.107618,-3.655892,5.295316,-1.429362,5.044294,-3.459248,5.715283,8.863087,-2.313110,-0.604232],[8.900810,3.470428,-6.809023,4.160150,7.979980,0.956632,4.737370,4.882125,6.567243,-3.959806,0.905738],[-3.777896,9.433594,-1.515252,9.122075,-4.936132,5.654353,-4.076595,-0.656605,5.149934,-7.049658,-5.368239],[-7.613263,-0.663950,8.903862,-7.335600,3.735380,6.660080,-4.966255,-1.096996,-3.724304,-5.646020,7.049659]],[[8.563936,-4.817712,0.387112,0.307216,8.434726,6.180393,5.054122,-3.127936,-8.427678,6.605669,-0.394977],[9.607099,0.022309,5.950891,0.658731,-1.941349,4.460155,8.123673,3.068911,-9.726978,-7.851226,3.338021],[-9.751109,-8.383600,1.483552,-3.005409,0.037140,6.579209,6.269367,3.525409,5.012335,2.364859,-2.218656],[6.099100,7.031247,-6.274051,-1.743213,-3.868279,5.922217,0.676497,-2.360684,6.183801,4.511300,-7.999996]],[[7.789974,3.810039,3.994565,3.765682,3.366673,-8.280649,-9.793905,-0.678163,-8.579603,0.904038,4.555937],[-9.615003,-2.281371,-9.722459,-6.536943,-0.955547,-3.765198,-3.749096,-0.814280,4.035157,0.123254,0.995791],[6.284285,-0.440925,-0.677726,5.289969,-8.607673,6.034817,6.994793,-1.988688,-7.669905,-1.078143,-7.072017],[-5.504658,-5.227464,-5.106221,5.862249,-4.034659,2.380670,-6.333713,-4.035805,-8.694794,-4.234566,-8.644608]],[[0.232031,0.694224,9.480932,-8.001230,5.114090,4.303731,-6.166452,1.476470,4.456426,-9.971367,-2.913245],[-9.223414,9.758427,9.498025,-6.624031,1.558024,-0.512934,1.935446,-2.967019,0.906407,-6.519200,-2.344121],[-3.626809,9.585768,7.873740,-3.673634,-7.442129,-0.324159,4.630823,9.995096,8.700833,8.160185,-0.235724],[-7.900064,-8.025105,-1.968342,-2.336234,-8.217911,-6.931876,-5.456391,4.213979,2.415233,2.247488,4.668377]]], dtype = "float64")#candidate|73|(15, 4, 11)|const|float64
bop_74 = relay.floor_mod(uop_71.astype('float32'), const_73.astype('float32')) # shape=(15, 4, 11)
var_77 = relay.var("var_77", dtype = "float64", shape = (504,))#candidate|77|(504,)|var|float64
bop_78 = relay.add(const_66.astype('uint16'), relay.reshape(var_77.astype('uint16'), relay.shape_of(const_66))) # shape=(504,)
uop_81 = relay.acosh(uop_71.astype('float64')) # shape=()
uop_83 = relay.atan(uop_81.astype('float32')) # shape=()
bop_85 = relay.multiply(uop_61.astype('int32'), call_65.astype('int32')) # shape=(12, 7, 6)
bop_88 = relay.multiply(uop_61.astype('int32'), call_67.astype('int32')) # shape=(12, 7, 6)
bop_89 = relay.logical_or(uop_63.astype('bool'), const_66.astype('bool')) # shape=(504,)
var_92 = relay.var("var_92", dtype = "float32", shape = ())#candidate|92|()|var|float32
bop_93 = relay.less(uop_83.astype('bool'), var_92.astype('bool')) # shape=()
uop_96 = relay.sigmoid(bop_68.astype('float32')) # shape=(504,)
bop_98 = relay.left_shift(var_60.astype('uint32'), bop_78.astype('uint32')) # shape=(504,)
bop_101 = relay.greater(bop_93.astype('bool'), uop_63.astype('bool')) # shape=()
uop_104 = relay.exp(bop_101.astype('float32')) # shape=()
var_106 = relay.var("var_106", dtype = "bool", shape = (9, 7))#candidate|106|(9, 7)|var|bool
bop_107 = relay.less(bop_93.astype('bool'), var_106.astype('bool')) # shape=(9, 7)
uop_110 = relay.atan(bop_93.astype('float64')) # shape=()
bop_112 = relay.equal(uop_104.astype('bool'), uop_63.astype('bool')) # shape=()
var_115 = relay.var("var_115", dtype = "float64", shape = ())#candidate|115|()|var|float64
bop_116 = relay.minimum(uop_110.astype('float32'), var_115.astype('float32')) # shape=()
func_53_call = mod.get_global_var('func_53')
func_58_call = mutated_mod.get_global_var('func_58')
call_119 = relay.TupleGetItem(func_53_call(relay.reshape(bop_98.astype('float64'), [12, 7, 6]), relay.reshape(var_77.astype('float64'), [12, 7, 6]), relay.reshape(uop_96.astype('float32'), [12, 7, 6]), relay.reshape(call_65.astype('bool'), [12, 7, 6]), ), 0)
call_120 = relay.TupleGetItem(func_58_call(relay.reshape(bop_98.astype('float64'), [12, 7, 6]), relay.reshape(var_77.astype('float64'), [12, 7, 6]), relay.reshape(uop_96.astype('float32'), [12, 7, 6]), relay.reshape(call_65.astype('bool'), [12, 7, 6]), ), 0)
func_53_call = mod.get_global_var('func_53')
func_58_call = mutated_mod.get_global_var('func_58')
call_121 = relay.TupleGetItem(func_53_call(relay.reshape(const_66.astype('float64'), [12, 7, 6]), relay.reshape(bop_98.astype('float64'), [12, 7, 6]), relay.reshape(var_77.astype('float32'), [12, 7, 6]), relay.reshape(bop_98.astype('bool'), [12, 7, 6]), ), 7)
call_122 = relay.TupleGetItem(func_58_call(relay.reshape(const_66.astype('float64'), [12, 7, 6]), relay.reshape(bop_98.astype('float64'), [12, 7, 6]), relay.reshape(var_77.astype('float32'), [12, 7, 6]), relay.reshape(bop_98.astype('bool'), [12, 7, 6]), ), 7)
const_123 = relay.const([1.818644,-9.021641,5.390546,-9.181762,4.208856,-4.572083,-5.757633,-6.556404,5.573281,1.907347,-9.616322,9.254957,1.646875,0.363673,3.880263,9.584622,-3.636199,0.481704,-0.436460,-6.819685,-8.819585,3.072705,-7.883018,-7.652728,2.095997,6.376696,5.558342,9.280178,-4.234442,9.969466,-8.759661,8.457358,-9.688468,-7.086877,-8.272847,-5.381835,-5.583782,6.619493,-8.924642,-8.275273,-6.398292,6.664813,-4.887663,-5.397044,3.492991,7.652486,-0.706885,6.998282,2.200519,-5.887384,-6.130433,3.628553,-3.324881,-0.701103,-7.514248,-1.082255,-2.470941,-9.242627,2.175656,-7.593774,-2.691832,-5.130106,-5.315970,2.563446,5.404394,4.561289,3.478844,-8.108698,-4.331007,-1.003252,4.856879,2.847716,-8.548214,1.005247,-1.851575,7.934995,3.489433,6.112000,2.969868,9.798310,-9.996052,-6.157408,1.588520,5.109227,6.605794,-0.065581,6.617107,9.871841,-6.979993,2.256707,-9.208972,9.798841,-7.126741,7.403344,-1.952426,-2.619089,3.086087,-7.135029,-6.830254,-4.074159,9.244782,-9.669737,-3.393620,-8.187973,-4.123903,1.888678,-2.388433,-2.311977,-2.781078,-7.628734,2.162626,3.077179,-0.662446,7.104764,-3.074582,-1.349218,4.353562,-8.899705,-6.717129,-4.541975,-2.405500,5.927103,-9.050097,9.063823,1.805451,9.559806,-2.705069,-1.467435,-4.051916,8.427003,7.463285,-6.384520,2.381674,9.862437,-1.470247,-0.095032,0.219082,0.095809,-7.343907,-0.745888,0.914682,-7.933294,9.738010,-7.650818,-7.911792,-0.813431,3.850694,-8.281233,5.552906,5.034549,3.841054,-5.693035,5.025291,1.293467,-8.790019,-5.621083,5.070113,0.653916,9.784489,0.454407,-8.594540,8.997231,-2.019302,-3.312573,3.987646,7.927560,7.747716,-7.069508,-4.108227,-7.212064,6.703862,-0.885887,5.602059,8.936660,2.373803,3.144589,-5.498376,6.984421,-1.219133,-2.053320,5.281606,5.921467,3.321849,-7.754552,2.694039,-2.813562,4.711880,2.974754,1.312620,0.146517,7.722389,-8.693523,5.651233,0.685148,7.266101,-8.914803,2.169643,0.133309,7.582908,-2.945021,6.189593,6.089536,7.887342,1.923267,-9.462299,3.741337,7.841695,1.790381,-6.049683,5.026809,3.203474,-8.731954,4.318009,4.529015,6.786605,4.891802,3.955561,1.829589,0.646673,1.842280,9.731335,-6.228962,-9.213663,-0.484230,-4.105914,-2.646287,4.171648,-4.088802,-7.282909,6.225803,-9.273039,-5.574999,4.993217,-4.305180,9.969423,-5.595606,2.647508,1.135187,3.759232,-2.006821,8.071627,2.283607,0.920275,8.877284,9.624807,-3.165072,9.023067,8.167002,-4.995690,-0.407496,1.233956,2.622966,4.795597,-9.648943,-7.854855,-2.763293,8.559671,-4.425672,1.037872,6.917979,-6.494024,-0.599655,-0.538140,-1.525937,-9.299879,-6.763813,-1.443666,-8.736452,9.585561,-9.503022,5.981586,9.936799,-0.380719,4.396282,-0.795647,-6.595734,-1.975665,-7.816001,6.694251,-5.737756,9.424660,9.301498,-3.381983,1.933993,5.544250,7.007704,-9.151911,1.948539,-1.279030,4.223803,7.881456,0.807867,-2.872161,5.691814,-7.298133,1.917098,-9.409968,5.690636,-0.526317,-3.409201,-5.129915,-9.086744,9.207834,8.999884,3.826927,-0.258903,2.735942,-4.711673,1.925564,1.239227,5.802388,-6.404205,1.371178,-7.918205,-1.743274,0.477959,-9.407056,-2.384173,-1.401654,4.954951,-2.441522,-6.530657,8.887193,1.469023,-8.828350,7.310783,-4.438303,-4.652888,2.117071,6.385629,5.723452,8.403912,3.117465,0.607469,4.478449,8.360374,-8.783759,4.449635,-3.806755,5.076382,7.543491,8.792336,-9.078900,-2.086760,-7.316883,3.299827,-0.133931,-4.307771,-3.311745,5.566561,-0.631187,7.523520,9.360626,0.020826,-8.646163,-8.322108,3.684434,2.941152,8.846644,2.252151,4.120558,-6.992195,7.224747,2.113650,-7.049637,-9.422271,5.653687,-8.948702,-7.038015,8.946701,-6.739413,9.118586,8.864358,1.348186,-1.721427,-0.323945,0.242628,3.349994,9.311845,7.179408,-5.991321,6.788040,4.121878,-9.714670,4.527131,-2.741170,8.559770,7.300239,-5.144983,-4.482330,2.513165,8.363502,4.546522,-7.488015,5.940407,-4.030478,1.830250,-3.529861,3.222242,-6.493562,-3.987960,-5.684057,-8.515132,-0.720204,-0.934506,5.724724,6.214445,7.197939,-8.377341,-4.621788,6.109010,0.516430,-4.811572,9.087767,-7.430719,-3.205704,0.759482,-8.327924,-5.509040,-9.964508,7.717618,-5.607072,-5.681734,6.538460,6.520349,8.911123,4.741448,4.039588,-5.644327,8.971931,1.167300,6.127347,7.437066,-8.797236,-5.029589,-4.326902,4.465905,-9.818080,-3.944740,-1.040876,1.052475,-5.660269,-3.393361,-3.652589,1.323798,1.541916,9.686197,4.815388,-0.407509,-6.141364,-0.560740,7.191381,-4.240843,-6.529701,0.321350,-0.083369,-7.927744,6.084657,4.966711,7.250987,-7.230728,2.549871,7.421175,-2.197842,-7.515874,-9.985084,1.279044,-1.095723,9.646549,0.290266,3.063549,-5.161137,-8.147279,-3.790891,4.906155,-8.559111,-5.384850,-8.844717,-9.896918,-9.436053,9.197562,-8.646757,-8.722391,-2.694704,5.230081,-4.246067,-3.385121,-1.814507,7.137412,-4.254012,-3.396574,-9.758347,-7.436188,-4.321715,5.499821,0.737148,9.446997,9.666772,0.207432,5.067921,6.060761,1.888734,-8.773374,1.748512], dtype = "float32")#candidate|123|(504,)|const|float32
bop_124 = relay.bitwise_or(uop_96.astype('uint32'), relay.reshape(const_123.astype('uint32'), relay.shape_of(uop_96))) # shape=(504,)
uop_127 = relay.sqrt(bop_116.astype('float64')) # shape=()
bop_129 = relay.less_equal(uop_81.astype('bool'), bop_116.astype('bool')) # shape=()
uop_132 = relay.log(uop_127.astype('float32')) # shape=()
bop_134 = relay.not_equal(uop_132.astype('bool'), uop_104.astype('bool')) # shape=()
uop_137 = relay.cos(bop_134.astype('float32')) # shape=()
uop_139 = relay.cosh(uop_127.astype('float32')) # shape=()
uop_141 = relay.tan(uop_127.astype('float32')) # shape=()
bop_143 = relay.multiply(bop_134.astype('float64'), bop_85.astype('float64')) # shape=(12, 7, 6)
bop_146 = relay.multiply(bop_134.astype('float64'), bop_88.astype('float64')) # shape=(12, 7, 6)
uop_147 = relay.atan(bop_143.astype('float64')) # shape=(12, 7, 6)
uop_149 = relay.atan(bop_146.astype('float64')) # shape=(12, 7, 6)
bop_150 = relay.bitwise_or(uop_137.astype('int32'), uop_63.astype('int32')) # shape=()
var_153 = relay.var("var_153", dtype = "int32", shape = ())#candidate|153|()|var|int32
bop_154 = relay.right_shift(bop_150.astype('int16'), var_153.astype('int16')) # shape=()
uop_157 = relay.asinh(uop_132.astype('float64')) # shape=()
func_53_call = mod.get_global_var('func_53')
func_58_call = mutated_mod.get_global_var('func_58')
call_159 = relay.TupleGetItem(func_53_call(relay.reshape(call_121.astype('float64'), [12, 7, 6]), relay.reshape(bop_78.astype('float64'), [12, 7, 6]), relay.reshape(uop_96.astype('float32'), [12, 7, 6]), relay.reshape(bop_78.astype('bool'), [12, 7, 6]), ), 6)
call_160 = relay.TupleGetItem(func_58_call(relay.reshape(call_121.astype('float64'), [12, 7, 6]), relay.reshape(bop_78.astype('float64'), [12, 7, 6]), relay.reshape(uop_96.astype('float32'), [12, 7, 6]), relay.reshape(bop_78.astype('bool'), [12, 7, 6]), ), 6)
uop_161 = relay.sqrt(uop_157.astype('float64')) # shape=()
uop_163 = relay.log(bop_150.astype('float64')) # shape=()
const_165 = relay.const([-2.213887,-5.915328,6.982326,-3.335310,-2.717619], dtype = "float64")#candidate|165|(5,)|const|float64
bop_166 = relay.bitwise_or(uop_161.astype('uint8'), const_165.astype('uint8')) # shape=(5,)
var_169 = relay.var("var_169", dtype = "float32", shape = (5, 6))#candidate|169|(5, 6)|var|float32
bop_170 = relay.bitwise_xor(uop_132.astype('uint32'), var_169.astype('uint32')) # shape=(5, 6)
output = relay.Tuple([bop_74,bop_89,bop_98,bop_107,bop_112,call_119,call_121,bop_124,bop_129,uop_139,uop_141,uop_147,bop_154,call_159,uop_163,bop_166,bop_170,])
output2 = relay.Tuple([bop_74,bop_89,bop_98,bop_107,bop_112,call_120,call_122,bop_124,bop_129,uop_139,uop_141,uop_149,bop_154,call_160,uop_163,bop_166,bop_170,])
func_173 = relay.Function([var_60,var_77,var_92,var_106,var_115,var_153,var_169,], output)
mod['func_173'] = func_173
mod = relay.transform.InferType()(mod)
mutated_mod['func_173'] = func_173
mutated_mod = relay.transform.InferType()(mutated_mod)
func_173_call = mutated_mod.get_global_var('func_173')
var_175 = relay.var("var_175", dtype = "float32", shape = ())#candidate|175|()|var|float32
var_176 = relay.var("var_176", dtype = "float64", shape = (504,))#candidate|176|(504,)|var|float64
var_177 = relay.var("var_177", dtype = "float32", shape = ())#candidate|177|()|var|float32
var_178 = relay.var("var_178", dtype = "bool", shape = (9, 7))#candidate|178|(9, 7)|var|bool
var_179 = relay.var("var_179", dtype = "float64", shape = ())#candidate|179|()|var|float64
var_180 = relay.var("var_180", dtype = "int32", shape = ())#candidate|180|()|var|int32
var_181 = relay.var("var_181", dtype = "float32", shape = (5, 6))#candidate|181|(5, 6)|var|float32
call_174 = func_173_call(var_175,var_176,var_177,var_178,var_179,var_180,var_181,)
output = call_174
func_182 = relay.Function([var_175,var_176,var_177,var_178,var_179,var_180,var_181,], output)
mutated_mod['func_182'] = func_182
mutated_mod = relay.transform.InferType()(mutated_mod)
var_184 = relay.var("var_184", dtype = "float32", shape = (1,))#candidate|184|(1,)|var|float32
uop_185 = relay.cosh(var_184.astype('float32')) # shape=(1,)
output = relay.Tuple([uop_185,])
output2 = relay.Tuple([uop_185,])
func_187 = relay.Function([var_184,], output)
mod['func_187'] = func_187
mod = relay.transform.InferType()(mod)
mutated_mod['func_187'] = func_187
mutated_mod = relay.transform.InferType()(mutated_mod)
var_188 = relay.var("var_188", dtype = "float32", shape = (1,))#candidate|188|(1,)|var|float32
func_187_call = mutated_mod.get_global_var('func_187')
call_189 = func_187_call(var_188)
output = call_189
func_190 = relay.Function([var_188], output)
mutated_mod['func_190'] = func_190
mutated_mod = relay.transform.InferType()(mutated_mod)
const_192 = relay.const([9,5,-10,-10,-9,8,-7,-9,3], dtype = "int16")#candidate|192|(9,)|const|int16
const_193 = relay.const([8,-10,6,-3,-1,1,9,6,2], dtype = "int16")#candidate|193|(9,)|const|int16
bop_194 = relay.logical_xor(const_192.astype('int16'), relay.reshape(const_193.astype('int16'), relay.shape_of(const_192))) # shape=(9,)
bop_197 = relay.less_equal(bop_194.astype('bool'), relay.reshape(const_193.astype('bool'), relay.shape_of(bop_194))) # shape=(9,)
bop_200 = relay.greater_equal(bop_197.astype('bool'), relay.reshape(bop_194.astype('bool'), relay.shape_of(bop_197))) # shape=(9,)
output = relay.Tuple([bop_200,])
output2 = relay.Tuple([bop_200,])
func_203 = relay.Function([], output)
mod['func_203'] = func_203
mod = relay.transform.InferType()(mod)
mutated_mod['func_203'] = func_203
mutated_mod = relay.transform.InferType()(mutated_mod)
func_203_call = mutated_mod.get_global_var('func_203')
call_204 = func_203_call()
output = call_204
func_205 = relay.Function([], output)
mutated_mod['func_205'] = func_205
mutated_mod = relay.transform.InferType()(mutated_mod)
const_206 = relay.const(-4.985066, dtype = "float64")#candidate|206|()|const|float64
uop_207 = relay.atan(const_206.astype('float64')) # shape=()
uop_209 = relay.asinh(uop_207.astype('float32')) # shape=()
uop_211 = relay.asin(uop_207.astype('float64')) # shape=()
var_213 = relay.var("var_213", dtype = "float64", shape = ())#candidate|213|()|var|float64
bop_214 = relay.less_equal(const_206.astype('bool'), var_213.astype('bool')) # shape=()
uop_217 = relay.sqrt(bop_214.astype('float64')) # shape=()
bop_219 = relay.less(uop_209.astype('bool'), const_206.astype('bool')) # shape=()
bop_222 = relay.left_shift(bop_219.astype('int16'), var_213.astype('int16')) # shape=()
uop_225 = relay.log10(uop_209.astype('float64')) # shape=()
uop_227 = relay.rsqrt(uop_225.astype('float64')) # shape=()
bop_229 = relay.divide(uop_227.astype('float32'), uop_209.astype('float32')) # shape=()
uop_232 = relay.log(uop_209.astype('float64')) # shape=()
uop_234 = relay.asin(bop_229.astype('float64')) # shape=()
uop_236 = relay.asin(bop_229.astype('float64')) # shape=()
uop_238 = relay.sinh(uop_234.astype('float32')) # shape=()
uop_240 = relay.log(uop_238.astype('float64')) # shape=()
bop_242 = relay.not_equal(uop_240.astype('bool'), bop_219.astype('bool')) # shape=()
var_245 = relay.var("var_245", dtype = "float64", shape = (2, 5))#candidate|245|(2, 5)|var|float64
bop_246 = relay.left_shift(uop_234.astype('int32'), var_245.astype('int32')) # shape=(2, 5)
uop_249 = relay.cosh(uop_240.astype('float64')) # shape=()
bop_251 = relay.bitwise_or(uop_249.astype('int32'), uop_211.astype('int32')) # shape=()
output = relay.Tuple([uop_217,bop_222,uop_232,uop_236,bop_242,bop_246,bop_251,])
output2 = relay.Tuple([uop_217,bop_222,uop_232,uop_236,bop_242,bop_246,bop_251,])
func_254 = relay.Function([var_213,var_245,], output)
mod['func_254'] = func_254
mod = relay.transform.InferType()(mod)
var_255 = relay.var("var_255", dtype = "float64", shape = ())#candidate|255|()|var|float64
var_256 = relay.var("var_256", dtype = "float64", shape = (2, 5))#candidate|256|(2, 5)|var|float64
output = func_254(var_255,var_256,)
func_257 = relay.Function([var_255,var_256,], output)
mutated_mod['func_257'] = func_257
mutated_mod = relay.transform.InferType()(mutated_mod)
var_259 = relay.var("var_259", dtype = "float32", shape = (3,))#candidate|259|(3,)|var|float32
uop_260 = relay.log2(var_259.astype('float32')) # shape=(3,)
uop_262 = relay.sigmoid(var_259.astype('float32')) # shape=(3,)
bop_264 = relay.logical_xor(uop_260.astype('int32'), relay.reshape(var_259.astype('int32'), relay.shape_of(uop_260))) # shape=(3,)
bop_267 = relay.bitwise_and(var_259.astype('int8'), relay.reshape(bop_264.astype('int8'), relay.shape_of(var_259))) # shape=(3,)
uop_270 = relay.acos(var_259.astype('float64')) # shape=(3,)
var_272 = relay.var("var_272", dtype = "int32", shape = (3,))#candidate|272|(3,)|var|int32
bop_273 = relay.less_equal(bop_264.astype('bool'), relay.reshape(var_272.astype('bool'), relay.shape_of(bop_264))) # shape=(3,)
uop_276 = relay.erf(uop_260.astype('float64')) # shape=(3,)
uop_278 = relay.atan(uop_262.astype('float32')) # shape=(3,)
bop_280 = relay.floor_mod(uop_278.astype('float32'), relay.reshape(uop_262.astype('float32'), relay.shape_of(uop_278))) # shape=(3,)
var_283 = relay.var("var_283", dtype = "float32", shape = (3,))#candidate|283|(3,)|var|float32
bop_284 = relay.divide(bop_280.astype('float32'), relay.reshape(var_283.astype('float32'), relay.shape_of(bop_280))) # shape=(3,)
bop_287 = relay.not_equal(uop_262.astype('bool'), relay.reshape(uop_278.astype('bool'), relay.shape_of(uop_262))) # shape=(3,)
bop_290 = relay.mod(uop_278.astype('float32'), relay.reshape(bop_284.astype('float32'), relay.shape_of(uop_278))) # shape=(3,)
bop_293 = relay.right_shift(var_259.astype('uint16'), relay.reshape(uop_270.astype('uint16'), relay.shape_of(var_259))) # shape=(3,)
var_296 = relay.var("var_296", dtype = "uint16", shape = (3,))#candidate|296|(3,)|var|uint16
bop_297 = relay.logical_or(bop_293.astype('bool'), relay.reshape(var_296.astype('bool'), relay.shape_of(bop_293))) # shape=(3,)
uop_300 = relay.acos(uop_270.astype('float64')) # shape=(3,)
uop_302 = relay.asinh(bop_280.astype('float32')) # shape=(3,)
bop_304 = relay.bitwise_xor(uop_276.astype('int16'), relay.reshape(var_272.astype('int16'), relay.shape_of(uop_276))) # shape=(3,)
bop_307 = relay.equal(uop_278.astype('bool'), relay.reshape(uop_302.astype('bool'), relay.shape_of(uop_278))) # shape=(3,)
bop_310 = relay.bitwise_or(bop_284.astype('uint16'), relay.reshape(uop_302.astype('uint16'), relay.shape_of(bop_284))) # shape=(3,)
const_313 = relay.const([8,2,-6], dtype = "uint16")#candidate|313|(3,)|const|uint16
bop_314 = relay.power(bop_310.astype('float64'), relay.reshape(const_313.astype('float64'), relay.shape_of(bop_310))) # shape=(3,)
bop_317 = relay.greater_equal(uop_276.astype('bool'), relay.reshape(var_272.astype('bool'), relay.shape_of(uop_276))) # shape=(3,)
output = relay.Tuple([bop_267,bop_273,bop_287,bop_290,bop_297,uop_300,bop_304,bop_307,bop_314,bop_317,])
output2 = relay.Tuple([bop_267,bop_273,bop_287,bop_290,bop_297,uop_300,bop_304,bop_307,bop_314,bop_317,])
F = relay.Function([var_259,var_272,var_283,var_296,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_259,var_272,var_283,var_296,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_259= np.array([2.718431,-9.168815,7.430920], dtype='float32')
module1.set_input('var_259', input_259)
input_272= np.array([-5,8,-7], dtype='int32')
module1.set_input('var_272', input_272)
input_283= np.array([-2.420419,-4.742664,-6.509901], dtype='float32')
module1.set_input('var_283', input_283)
input_296= np.array([-6,-3,-7], dtype='uint16')
module1.set_input('var_296', input_296)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_259, input_272, input_283, input_296, )
res3 = intrp3.evaluate()(input_259, input_272, input_283, input_296, )
res4 = intrp4.evaluate()(input_259, input_272, input_283, input_296, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
module5.set_input('var_259', input_259)
module5.set_input('var_272', input_272)
module5.set_input('var_283', input_283)
module5.set_input('var_296', input_296)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_259, input_272, input_283, input_296, )
res7 = intrp7.evaluate()(input_259, input_272, input_283, input_296, )
res8 = intrp8.evaluate()(input_259, input_272, input_283, input_296, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
module9.set_input('var_259', input_259)
module9.set_input('var_272', input_272)
module9.set_input('var_283', input_283)
module9.set_input('var_296', input_296)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_259, input_272, input_283, input_296, )
res11 = intrp11.evaluate()(input_259, input_272, input_283, input_296, )
res12 = intrp12.evaluate()(input_259, input_272, input_283, input_296, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
module13.set_input('var_259', input_259)
module13.set_input('var_272', input_272)
module13.set_input('var_283', input_283)
module13.set_input('var_296', input_296)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_259, input_272, input_283, input_296, )
res15 = intrp15.evaluate()(input_259, input_272, input_283, input_296, )
res16 = intrp16.evaluate()(input_259, input_272, input_283, input_296, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
module17.set_input('var_259', input_259)
module17.set_input('var_272', input_272)
module17.set_input('var_283', input_283)
module17.set_input('var_296', input_296)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_259, input_272, input_283, input_296, )
res19 = intrp19.evaluate()(input_259, input_272, input_283, input_296, )
res20 = intrp20.evaluate()(input_259, input_272, input_283, input_296, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
module21.set_input('var_259', input_259)
module21.set_input('var_272', input_272)
module21.set_input('var_283', input_283)
module21.set_input('var_296', input_296)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_259, input_272, input_283, input_296, )
res23 = intrp23.evaluate()(input_259, input_272, input_283, input_296, )
res24 = intrp24.evaluate()(input_259, input_272, input_283, input_296, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()

'''22: TVMFuncCall
21: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::transform::Pass, tvm::IRModule)>::AssignTypedLambda<tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}>(tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
16: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
15: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
14: tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}::operator()(tvm::IRModule, tvm::transform::PassContext) const [clone .isra.405]
13: tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}::operator()(tvm::IRModule, tvm::transform::PassContext) const::{lambda(tvm::relay::LetList*)#1}::operator()(tvm::relay::LetList) const [clone .constprop.436]
12: _ZNSt17_Function_handlerIFSt10sha
11: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::relay::FunctionNode const*)::{lambda(std::vector<std::shared_ptr<tvm::relay::ADValueNode>, std::allocator<std::shared_ptr<tvm::relay::ADValueNode> > > const&, tvm::relay::Call const&)#1}::operator()(std::vector<std::shared_ptr<tvm::relay::ADValueNode>, std::allocator<std::shared_ptr<tvm::relay::ADValueNode> > > const&, tvm::relay::Call const&) const
10: tvm::relay::FirstOrderReverseAD::VisitExpr(tvm::RelayExpr const&)
9: _ZZN3tvm5relay11ExprFunctorIFSt10shared_
8: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::relay::TupleNode const*)
7: tvm::relay::FirstOrderReverseAD::VisitExpr(tvm::RelayExpr const&)
6: _ZZN3tvm5relay11ExprFunctorIFSt10shared_
5: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::FirstOrderReverseAD::VisitExpr(tvm::RelayExpr const&)
3: _ZZN3tvm5relay11ExprFunctorIFSt10shared_
2: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::OpNode const*)
1: _ZN3tvm17DiagnosticContext9EmitFatalERKNS_1
0: tvm::DiagnosticContext::Render()

'''