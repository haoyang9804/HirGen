import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float32", shape = (13, 4, 5))#candidate|0|(13, 4, 5)|var|float32
uop_1 = relay.acos(var_0.astype('float32')) # shape=(13, 4, 5)
bop_3 = relay.mod(var_0.astype('float64'), relay.reshape(uop_1.astype('float64'), relay.shape_of(var_0))) # shape=(13, 4, 5)
var_6 = relay.var("var_6", dtype = "float64", shape = (13, 4, 5))#candidate|6|(13, 4, 5)|var|float64
bop_7 = relay.bitwise_or(bop_3.astype('int8'), relay.reshape(var_6.astype('int8'), relay.shape_of(bop_3))) # shape=(13, 4, 5)
const_10 = relay.const([[[-1.660870,-3.798237,7.754585,4.449822,2.743761],[6.752568,-9.817211,-0.182904,0.772403,2.696450],[-8.654010,-9.713952,-2.346950,4.235358,-0.690027],[-1.613659,-1.695584,9.002583,-3.364610,-1.920192]],[[3.823510,-4.231101,8.929097,6.985495,5.070758],[7.595724,-0.042359,1.052393,-4.167317,3.218091],[-6.678133,8.371540,2.470310,-4.644125,-9.848416],[6.997082,-6.938813,6.219345,-7.201516,-4.752964]],[[-7.520156,0.392663,8.969080,3.009509,0.790714],[-7.121035,-9.830713,6.154716,-9.850708,8.702692],[-3.221403,8.038873,6.499204,-1.983559,5.658229],[4.267193,-1.307548,-4.468471,-1.013345,3.923658]],[[6.722809,6.746436,-6.035057,6.600443,-4.838691],[1.021787,9.732083,-0.145453,2.940301,-7.976412],[7.412315,-3.486849,-0.816209,-2.940030,5.197490],[5.223987,9.501981,-9.541939,7.468260,4.053706]],[[3.967371,-2.833587,0.678498,2.331397,1.071231],[3.739490,7.237852,1.335560,6.891749,-1.254377],[6.935223,6.837297,-8.170060,-3.296268,9.533827],[-0.961326,-6.224406,5.344564,7.143891,1.376320]],[[-2.315607,8.984203,-9.420532,5.194190,-4.268487],[-4.302812,8.027380,2.404307,-6.947287,2.200915],[0.350982,-1.841308,-7.759019,9.506585,-0.445938],[5.017197,5.437290,-0.026385,7.748321,9.636401]],[[-0.560649,6.817760,0.599434,6.488432,7.174387],[2.286765,-6.331546,-7.991745,3.146413,-1.359809],[-6.566821,-0.116627,7.206286,-6.938054,1.286221],[-9.144686,5.265247,7.574065,-3.090176,-0.785947]],[[-0.866706,-8.068773,3.937669,5.112564,-5.001582],[-4.894884,9.454890,7.878399,-1.304724,9.376079],[2.712200,8.717379,-4.415946,-5.956647,4.393923],[-3.215283,-0.725386,2.514090,2.081682,8.455439]],[[-4.124741,7.072243,-8.763540,-3.317043,-1.506556],[-7.391629,-6.402045,-0.171424,8.407114,9.590825],[-6.076376,-0.359702,6.913092,-3.955815,-5.791157],[-7.962067,-5.113256,9.830205,-8.684128,0.682140]],[[3.829717,4.197375,8.448781,-1.304776,-8.499605],[5.406418,4.113763,1.276956,9.831578,-6.810611],[7.104626,0.500496,-3.764775,9.887028,-8.976900],[6.874044,-2.393324,5.374901,-5.528890,-2.465143]],[[-7.722973,4.721504,0.779406,-3.676515,2.921236],[1.238914,4.886465,-6.592497,1.024216,1.663677],[-3.132954,1.196243,3.289107,-3.660462,7.537328],[-5.365020,-5.506567,7.892030,-4.920320,4.485119]],[[-8.432475,8.834322,0.307415,9.190868,8.201313],[-5.153028,5.024141,-9.722513,2.172987,8.542902],[-2.426382,-4.475125,6.710772,-3.678824,6.623156],[5.916435,-8.209315,2.166060,-1.352407,-9.989447]],[[1.102254,5.578115,3.734534,1.757995,-7.116207],[9.568068,-1.049488,-2.511118,9.555348,-8.489427],[-9.555220,6.420685,-9.564512,-2.328427,3.122473],[-2.659414,6.369899,-9.391855,2.283858,9.816050]]], dtype = "float64")#candidate|10|(13, 4, 5)|const|float64
bop_11 = relay.logical_and(bop_3.astype('bool'), relay.reshape(const_10.astype('bool'), relay.shape_of(bop_3))) # shape=(13, 4, 5)
uop_14 = relay.cos(bop_3.astype('float32')) # shape=(13, 4, 5)
bop_16 = relay.minimum(bop_11.astype('int16'), relay.reshape(var_6.astype('int16'), relay.shape_of(bop_11))) # shape=(13, 4, 5)
output = relay.Tuple([bop_7,uop_14,bop_16,])
output2 = relay.Tuple([bop_7,uop_14,bop_16,])
func_19 = relay.Function([var_0,var_6,], output)
mod['func_19'] = func_19
mod = relay.transform.InferType()(mod)
mutated_mod['func_19'] = func_19
mutated_mod = relay.transform.InferType()(mutated_mod)
func_19_call = mutated_mod.get_global_var('func_19')
var_21 = relay.var("var_21", dtype = "float32", shape = (13, 4, 5))#candidate|21|(13, 4, 5)|var|float32
var_22 = relay.var("var_22", dtype = "float64", shape = (13, 4, 5))#candidate|22|(13, 4, 5)|var|float64
call_20 = func_19_call(var_21,var_22,)
output = call_20
func_23 = relay.Function([var_21,var_22,], output)
mutated_mod['func_23'] = func_23
mutated_mod = relay.transform.InferType()(mutated_mod)
var_25 = relay.var("var_25", dtype = "float64", shape = (7, 13))#candidate|25|(7, 13)|var|float64
uop_26 = relay.log2(var_25.astype('float64')) # shape=(7, 13)
bop_28 = relay.logical_or(uop_26.astype('bool'), relay.reshape(var_25.astype('bool'), relay.shape_of(uop_26))) # shape=(7, 13)
bop_31 = relay.equal(bop_28.astype('bool'), relay.reshape(uop_26.astype('bool'), relay.shape_of(bop_28))) # shape=(7, 13)
var_34 = relay.var("var_34", dtype = "float64", shape = (7, 13))#candidate|34|(7, 13)|var|float64
bop_35 = relay.right_shift(uop_26.astype('int32'), relay.reshape(var_34.astype('int32'), relay.shape_of(uop_26))) # shape=(7, 13)
bop_38 = relay.mod(bop_28.astype('float64'), relay.reshape(bop_31.astype('float64'), relay.shape_of(bop_28))) # shape=(7, 13)
bop_41 = relay.floor_mod(var_34.astype('float64'), relay.reshape(bop_28.astype('float64'), relay.shape_of(var_34))) # shape=(7, 13)
bop_44 = relay.minimum(var_34.astype('float64'), relay.reshape(bop_41.astype('float64'), relay.shape_of(var_34))) # shape=(7, 13)
uop_47 = relay.acos(uop_26.astype('float64')) # shape=(7, 13)
uop_49 = relay.asin(uop_47.astype('float32')) # shape=(7, 13)
const_51 = relay.const([[-4.111892,-0.329709,-0.460000,-3.280910,4.049482,8.464915,9.589700,5.081358,-5.798787,5.016771,0.178852,-8.260749,2.504722],[4.646817,8.677673,4.348264,-5.913723,-8.907379,9.265578,-3.435171,-5.785805,0.048426,-4.787598,8.015530,7.992831,-8.237642],[-8.581314,-1.512929,-1.030528,5.473501,-7.780349,-7.379473,-5.213922,0.029381,3.543546,-6.089242,1.964538,8.069916,0.320111],[-3.152143,8.675439,5.888979,-6.177635,-7.693336,2.069195,-4.933379,-7.789870,-2.306556,-7.923754,6.336219,9.835356,9.898558],[3.206066,-0.260427,9.770600,1.453424,7.577009,-0.601984,-1.649860,5.815587,-4.509217,2.537197,-6.759912,6.516970,1.016207],[-0.411051,4.090025,8.392912,5.637562,9.345160,-6.644245,6.104680,2.580216,3.426339,-5.031241,7.639855,5.038696,-3.208401],[-9.842659,-4.828125,-2.690598,-4.231415,-7.995829,-4.256778,-1.732964,1.635119,-6.479831,-7.450681,-7.718693,8.023987,-8.405337]], dtype = "float64")#candidate|51|(7, 13)|const|float64
bop_52 = relay.bitwise_and(uop_47.astype('uint64'), relay.reshape(const_51.astype('uint64'), relay.shape_of(uop_47))) # shape=(7, 13)
bop_55 = relay.minimum(uop_49.astype('int64'), relay.reshape(bop_28.astype('int64'), relay.shape_of(uop_49))) # shape=(7, 13)
uop_58 = relay.asin(bop_55.astype('float64')) # shape=(7, 13)
bop_60 = relay.logical_and(uop_58.astype('bool'), relay.reshape(var_25.astype('bool'), relay.shape_of(uop_58))) # shape=(7, 13)
bop_63 = relay.maximum(uop_49.astype('float64'), relay.reshape(uop_47.astype('float64'), relay.shape_of(uop_49))) # shape=(7, 13)
const_66 = relay.const([[5.444513,2.541501,-8.838552,9.146643,3.326334,9.091693,9.937187,1.500767,6.838924,7.232806,8.474119,-9.746286,-3.566310],[-0.045925,-8.315747,-6.844158,-2.781542,2.369765,-7.935518,3.424677,-1.552707,6.218241,1.794719,-2.405369,-1.241953,-3.287793],[6.140614,-3.744560,-9.630780,3.684970,-4.625152,-0.047036,9.444895,1.846257,-6.337154,-5.343904,-0.649691,-9.914993,-6.714028],[-5.004936,-3.406963,5.331482,4.658129,8.462139,-2.249792,-0.036132,8.204471,3.075125,0.111479,-0.808280,5.411607,-7.984173],[9.544864,7.472104,6.234899,-8.315038,-3.722963,1.152510,9.129076,1.308481,7.125430,3.593394,-0.051475,-3.769339,0.663778],[5.116495,3.094310,-6.312624,-5.486647,-5.696585,9.555666,3.179281,-5.337447,-7.477291,8.285607,0.841866,6.448533,0.275752],[0.858139,2.110939,4.170176,8.791638,-3.041867,0.064657,8.719596,-2.228616,-9.563127,-0.225483,-8.062347,-5.116406,-2.294455]], dtype = "float64")#candidate|66|(7, 13)|const|float64
bop_67 = relay.mod(uop_58.astype('float32'), relay.reshape(const_66.astype('float32'), relay.shape_of(uop_58))) # shape=(7, 13)
var_70 = relay.var("var_70", dtype = "float64", shape = (7, 13))#candidate|70|(7, 13)|var|float64
bop_71 = relay.logical_xor(uop_47.astype('int16'), relay.reshape(var_70.astype('int16'), relay.shape_of(uop_47))) # shape=(7, 13)
bop_74 = relay.less(bop_60.astype('bool'), relay.reshape(bop_44.astype('bool'), relay.shape_of(bop_60))) # shape=(7, 13)
bop_77 = relay.subtract(bop_74.astype('uint32'), relay.reshape(uop_49.astype('uint32'), relay.shape_of(bop_74))) # shape=(7, 13)
const_80 = relay.const([[-5.532422,-2.517560,-1.138604,3.129375,-1.770528,-5.715377,3.513930,6.880161,-5.575403,-7.927587,3.027395,4.635904,7.168559],[1.161049,-1.959653,-9.249976,1.248840,-4.855242,-1.073284,-9.628540,-1.392126,-3.660695,5.102894,-3.245951,9.497547,3.070980],[3.714319,3.462546,9.416574,2.920174,1.163378,-3.303003,4.763683,-0.076438,-4.028560,-8.869536,6.940141,3.641397,-0.235989],[3.070279,-9.836135,4.927034,5.094589,9.945822,4.874653,-9.946395,-1.387077,8.595949,5.441325,2.204743,-7.699884,-8.171013],[-2.641420,-6.374465,-9.084288,3.210641,7.977128,-8.677916,3.148200,3.217020,-6.395770,0.871368,-7.923235,-1.760007,-8.140177],[3.397973,1.365818,3.954583,5.730525,2.244179,0.416553,8.647691,0.079456,5.872776,4.238938,3.730866,-4.061262,-5.653560],[3.437901,6.074896,-3.695994,-1.218561,-2.344540,9.542712,9.799739,3.689171,8.630710,5.040253,-1.642407,3.772798,5.182297]], dtype = "float32")#candidate|80|(7, 13)|const|float32
bop_81 = relay.maximum(uop_49.astype('uint32'), relay.reshape(const_80.astype('uint32'), relay.shape_of(uop_49))) # shape=(7, 13)
uop_84 = relay.log2(bop_63.astype('float32')) # shape=(7, 13)
uop_86 = relay.tan(bop_67.astype('float32')) # shape=(7, 13)
var_88 = relay.var("var_88", dtype = "float32", shape = (7, 13))#candidate|88|(7, 13)|var|float32
bop_89 = relay.not_equal(uop_86.astype('bool'), relay.reshape(var_88.astype('bool'), relay.shape_of(uop_86))) # shape=(7, 13)
bop_92 = relay.add(bop_74.astype('float32'), relay.reshape(var_25.astype('float32'), relay.shape_of(bop_74))) # shape=(7, 13)
bop_95 = relay.equal(bop_89.astype('bool'), relay.reshape(bop_92.astype('bool'), relay.shape_of(bop_89))) # shape=(7, 13)
bop_98 = relay.subtract(const_51.astype('uint32'), relay.reshape(bop_67.astype('uint32'), relay.shape_of(const_51))) # shape=(7, 13)
bop_101 = relay.less(uop_86.astype('bool'), relay.reshape(bop_74.astype('bool'), relay.shape_of(uop_86))) # shape=(7, 13)
func_19_call = mod.get_global_var('func_19')
func_23_call = mutated_mod.get_global_var('func_23')
const_105 = relay.const([1.022547,9.086037,7.247417,-0.689426,-2.537282,1.019420,-9.951005,6.795711,-6.080053,6.492977,6.737891,-3.525360,-5.979220,-2.444086,-4.882473,9.974011,-3.495544,-3.186347,-1.322868,-0.466172,2.978271,7.463678,-0.433701,0.023246,6.141355,-8.268812,-1.287143,4.231459,-4.010240,-5.250006,7.373799,-4.324861,-1.037749,3.227718,-0.221289,-8.334211,-4.345461,4.257079,-9.128436,3.208657,9.192637,-1.965622,-0.981036,-8.851866,3.699206,3.775753,7.302197,-6.749338,6.389353,-3.948952,-3.985403,2.463656,2.488313,7.911103,5.887390,3.359612,-2.982360,-5.324481,2.759892,3.337042,-3.973433,8.346313,5.658839,4.478813,-7.742797,-8.536458,-1.100997,7.146891,-6.103341,-6.754691,8.459794,5.482612,5.501761,9.113655,-2.783652,-8.919464,4.613614,-1.980375,8.534455,5.875170,-7.016103,-0.397532,7.466531,-5.184917,-1.585140,-4.184260,-7.303216,-7.833360,8.945428,-7.717501,-3.999780,-8.675849,-3.833048,-6.073755,2.121510,6.945314,0.675598,-4.817825,6.632688,0.022415,1.992499,-6.251487,2.245660,-5.871647,-5.683178,-0.122698,4.062305,-8.917099,-7.803463,3.567339,4.317849,8.772722,4.702309,8.095763,-6.148039,-3.522682,-3.354117,9.045807,0.601675,1.419323,-7.171810,1.701918,-6.947627,7.586330,-1.307563,-8.311938,-0.730009,9.676880,-1.535550,-4.677946,6.704911,-7.403730,3.104750,4.870457,8.907602,-1.159237,-0.078497,5.042015,-1.718785,9.081593,-3.714068,-0.598459,5.537530,-3.456538,-9.818509,-5.228486,4.562232,-6.274738,-9.711639,-2.707532,-3.170131,2.227926,-7.928661,7.337397,-7.144749,4.901346,9.062831,8.491994,8.731754,-0.786697,-0.319418,5.853504,5.688790,4.099198,7.986861,-8.088351,-1.846059,6.108329,-0.651338,2.307812,7.001508,7.719594,-2.894598,-7.210005,-7.549568,-9.709412,8.914683,4.540901,4.666688,7.057879,-8.742296,-4.890561,8.354584,2.649360,-4.651296,-8.182262,1.540750,-3.911631,-8.556036,-3.198368,3.558903,-3.253790,-8.344077,-4.664408,-9.395954,0.503781,9.223805,6.356431,3.506700,-9.547224,-7.143033,0.508479,8.393575,1.482818,-3.203989,-7.264266,-7.898804,0.296028,-0.521431,-0.368457,3.658017,6.707856,2.199685,5.483537,0.033611,7.854724,9.640164,-6.999656,-5.773662,-0.465467,9.690185,9.726930,9.617164,-8.153225,-8.975463,-3.360263,-4.700213,-3.582048,3.563830,-7.819305,6.340634,-0.402326,1.551871,9.211783,-4.516666,-2.249167,6.726705,-4.904237,-9.195451,-0.582296,8.656915,-0.972002,6.888735,-7.473497,3.225507,2.277657,-5.078297,6.274332,-7.880094,8.424539,-1.728868,-0.598874,7.021422,4.416336,-5.973038,-1.183111,-2.677685,9.018394,3.028223,-9.380227], dtype = "float32")#candidate|105|(260,)|const|float32
call_104 = relay.TupleGetItem(func_19_call(relay.reshape(const_105.astype('float32'), [13, 4, 5]), relay.reshape(const_105.astype('float64'), [13, 4, 5]), ), 1)
call_106 = relay.TupleGetItem(func_23_call(relay.reshape(const_105.astype('float32'), [13, 4, 5]), relay.reshape(const_105.astype('float64'), [13, 4, 5]), ), 1)
bop_107 = relay.equal(bop_101.astype('bool'), relay.reshape(var_88.astype('bool'), relay.shape_of(bop_101))) # shape=(7, 13)
const_110 = relay.const([[8,-5,2,8,5,1,10,6,-3,-3,2,-10,8],[9,6,2,-9,1,-1,3,6,-9,-7,-4,-5,7],[-8,2,7,-6,5,7,6,-7,10,4,-6,-2,2],[-5,-10,4,-9,2,8,-9,7,-8,7,-2,7,-10],[-1,-6,-6,-7,3,-4,10,10,-7,4,6,-9,-7],[-9,6,-7,-2,7,-4,-6,-10,1,8,9,-2,-9],[4,1,-8,-8,-10,3,-8,9,7,-10,6,6,-3]], dtype = "int32")#candidate|110|(7, 13)|const|int32
bop_111 = relay.multiply(bop_35.astype('float32'), relay.reshape(const_110.astype('float32'), relay.shape_of(bop_35))) # shape=(7, 13)
uop_114 = relay.cosh(bop_95.astype('float64')) # shape=(7, 13)
var_116 = relay.var("var_116", dtype = "float64", shape = (7, 13))#candidate|116|(7, 13)|var|float64
bop_117 = relay.bitwise_or(uop_114.astype('uint16'), relay.reshape(var_116.astype('uint16'), relay.shape_of(uop_114))) # shape=(7, 13)
var_120 = relay.var("var_120", dtype = "float64", shape = (7, 13))#candidate|120|(7, 13)|var|float64
bop_121 = relay.minimum(uop_114.astype('int32'), relay.reshape(var_120.astype('int32'), relay.shape_of(uop_114))) # shape=(7, 13)
const_124 = relay.const([[3.651414,4.036510,8.334127,-7.816829,-1.337098,8.805376,5.542072,-1.441525,7.459145,0.248260,2.860350,4.223366,0.494366],[7.341968,-8.619535,-0.310232,-7.028725,-7.750523,4.038165,-6.756586,2.245095,6.226061,-0.729055,-1.205826,-0.159723,-9.767846],[-7.179234,8.394949,9.006665,0.208959,2.503370,-7.420255,-0.095944,-0.142419,6.177859,0.407035,-2.012261,-9.397778,-5.852292],[-9.388783,-5.040126,3.190226,4.179360,-2.671857,9.278532,-2.394673,-5.042052,-1.148079,-6.920708,-3.098994,5.621779,-6.656062],[-0.561297,-7.900376,-9.096259,8.310434,7.698137,7.836455,3.600729,-4.783027,4.266954,8.334873,3.436435,-6.442657,-6.147481],[6.555735,-5.421164,-8.102788,-6.314594,-0.922419,1.653144,-8.760471,-9.609742,2.225378,7.768698,-3.846910,7.957953,-6.359400],[0.018747,-0.317376,5.979609,4.666265,0.728018,-2.816579,-6.371717,-9.497523,-8.775025,5.246288,-1.960801,-7.267609,-0.017167]], dtype = "float32")#candidate|124|(7, 13)|const|float32
bop_125 = relay.divide(uop_84.astype('float32'), relay.reshape(const_124.astype('float32'), relay.shape_of(uop_84))) # shape=(7, 13)
bop_128 = relay.logical_or(bop_95.astype('bool'), relay.reshape(const_80.astype('bool'), relay.shape_of(bop_95))) # shape=(7, 13)
bop_131 = relay.right_shift(bop_117.astype('int64'), relay.reshape(bop_55.astype('int64'), relay.shape_of(bop_117))) # shape=(7, 13)
uop_134 = relay.sqrt(uop_114.astype('float32')) # shape=(7, 13)
func_19_call = mod.get_global_var('func_19')
func_23_call = mutated_mod.get_global_var('func_23')
call_136 = relay.TupleGetItem(func_19_call(relay.reshape(const_105.astype('float32'), [13, 4, 5]), relay.reshape(const_105.astype('float64'), [13, 4, 5]), ), 1)
call_137 = relay.TupleGetItem(func_23_call(relay.reshape(const_105.astype('float32'), [13, 4, 5]), relay.reshape(const_105.astype('float64'), [13, 4, 5]), ), 1)
var_138 = relay.var("var_138", dtype = "float32", shape = (7, 13))#candidate|138|(7, 13)|var|float32
bop_139 = relay.divide(uop_134.astype('float32'), relay.reshape(var_138.astype('float32'), relay.shape_of(uop_134))) # shape=(7, 13)
uop_142 = relay.asinh(uop_134.astype('float64')) # shape=(7, 13)
var_144 = relay.var("var_144", dtype = "float64", shape = (7, 13))#candidate|144|(7, 13)|var|float64
bop_145 = relay.equal(uop_142.astype('bool'), relay.reshape(var_144.astype('bool'), relay.shape_of(uop_142))) # shape=(7, 13)
bop_148 = relay.logical_and(uop_134.astype('bool'), relay.reshape(var_70.astype('bool'), relay.shape_of(uop_134))) # shape=(7, 13)
uop_151 = relay.erf(uop_142.astype('float32')) # shape=(7, 13)
func_19_call = mod.get_global_var('func_19')
func_23_call = mutated_mod.get_global_var('func_23')
call_153 = relay.TupleGetItem(func_19_call(relay.reshape(const_105.astype('float32'), [13, 4, 5]), relay.reshape(call_104.astype('float64'), [13, 4, 5]), ), 1)
call_154 = relay.TupleGetItem(func_23_call(relay.reshape(const_105.astype('float32'), [13, 4, 5]), relay.reshape(call_104.astype('float64'), [13, 4, 5]), ), 1)
func_19_call = mod.get_global_var('func_19')
func_23_call = mutated_mod.get_global_var('func_23')
call_155 = relay.TupleGetItem(func_19_call(relay.reshape(call_153.astype('float32'), [13, 4, 5]), relay.reshape(call_104.astype('float64'), [13, 4, 5]), ), 2)
call_156 = relay.TupleGetItem(func_23_call(relay.reshape(call_153.astype('float32'), [13, 4, 5]), relay.reshape(call_104.astype('float64'), [13, 4, 5]), ), 2)
bop_157 = relay.logical_xor(bop_145.astype('int64'), relay.reshape(bop_98.astype('int64'), relay.shape_of(bop_145))) # shape=(7, 13)
var_160 = relay.var("var_160", dtype = "float32", shape = (7, 13))#candidate|160|(7, 13)|var|float32
bop_161 = relay.power(uop_151.astype('float64'), relay.reshape(var_160.astype('float64'), relay.shape_of(uop_151))) # shape=(7, 13)
bop_164 = relay.greater(bop_161.astype('bool'), relay.reshape(var_160.astype('bool'), relay.shape_of(bop_161))) # shape=(7, 13)
bop_167 = relay.right_shift(uop_142.astype('uint16'), relay.reshape(bop_38.astype('uint16'), relay.shape_of(uop_142))) # shape=(7, 13)
func_19_call = mod.get_global_var('func_19')
func_23_call = mutated_mod.get_global_var('func_23')
call_170 = relay.TupleGetItem(func_19_call(relay.reshape(call_104.astype('float32'), [13, 4, 5]), relay.reshape(call_104.astype('float64'), [13, 4, 5]), ), 2)
call_171 = relay.TupleGetItem(func_23_call(relay.reshape(call_104.astype('float32'), [13, 4, 5]), relay.reshape(call_104.astype('float64'), [13, 4, 5]), ), 2)
output = relay.Tuple([bop_52,bop_71,bop_77,bop_81,call_104,const_105,bop_107,bop_111,bop_121,bop_125,bop_128,bop_131,call_136,bop_139,bop_148,call_153,call_155,bop_157,bop_164,bop_167,call_170,])
output2 = relay.Tuple([bop_52,bop_71,bop_77,bop_81,call_106,const_105,bop_107,bop_111,bop_121,bop_125,bop_128,bop_131,call_137,bop_139,bop_148,call_154,call_156,bop_157,bop_164,bop_167,call_171,])
func_172 = relay.Function([var_25,var_34,var_70,var_88,var_116,var_120,var_138,var_144,var_160,], output)
mod['func_172'] = func_172
mod = relay.transform.InferType()(mod)
mutated_mod['func_172'] = func_172
mutated_mod = relay.transform.InferType()(mutated_mod)
func_172_call = mutated_mod.get_global_var('func_172')
var_174 = relay.var("var_174", dtype = "float64", shape = (7, 13))#candidate|174|(7, 13)|var|float64
var_175 = relay.var("var_175", dtype = "float64", shape = (7, 13))#candidate|175|(7, 13)|var|float64
var_176 = relay.var("var_176", dtype = "float64", shape = (7, 13))#candidate|176|(7, 13)|var|float64
var_177 = relay.var("var_177", dtype = "float32", shape = (7, 13))#candidate|177|(7, 13)|var|float32
var_178 = relay.var("var_178", dtype = "float64", shape = (7, 13))#candidate|178|(7, 13)|var|float64
var_179 = relay.var("var_179", dtype = "float64", shape = (7, 13))#candidate|179|(7, 13)|var|float64
var_180 = relay.var("var_180", dtype = "float32", shape = (7, 13))#candidate|180|(7, 13)|var|float32
var_181 = relay.var("var_181", dtype = "float64", shape = (7, 13))#candidate|181|(7, 13)|var|float64
var_182 = relay.var("var_182", dtype = "float32", shape = (7, 13))#candidate|182|(7, 13)|var|float32
call_173 = func_172_call(var_174,var_175,var_176,var_177,var_178,var_179,var_180,var_181,var_182,)
output = call_173
func_183 = relay.Function([var_174,var_175,var_176,var_177,var_178,var_179,var_180,var_181,var_182,], output)
mutated_mod['func_183'] = func_183
mutated_mod = relay.transform.InferType()(mutated_mod)
var_185 = relay.var("var_185", dtype = "uint16", shape = (13, 3, 3))#candidate|185|(13, 3, 3)|var|uint16
var_186 = relay.var("var_186", dtype = "uint16", shape = (13, 3, 3))#candidate|186|(13, 3, 3)|var|uint16
bop_187 = relay.multiply(var_185.astype('uint16'), relay.reshape(var_186.astype('uint16'), relay.shape_of(var_185))) # shape=(13, 3, 3)
uop_190 = relay.log(var_186.astype('float64')) # shape=(13, 3, 3)
uop_192 = relay.tan(bop_187.astype('float64')) # shape=(13, 3, 3)
bop_194 = relay.less(var_185.astype('bool'), relay.reshape(uop_192.astype('bool'), relay.shape_of(var_185))) # shape=(13, 3, 3)
const_197 = relay.const([[[False,False,True],[False,True,True],[False,False,True]],[[False,False,True],[True,False,True],[True,False,False]],[[True,True,True],[True,True,False],[True,True,True]],[[False,False,True],[False,False,True],[True,False,False]],[[False,False,False],[False,False,False],[True,True,False]],[[False,True,False],[False,False,False],[True,True,True]],[[False,False,True],[True,False,True],[False,True,True]],[[False,False,True],[False,True,False],[True,True,False]],[[True,False,False],[False,True,True],[False,True,True]],[[False,True,False],[False,True,False],[True,False,False]],[[False,True,True],[True,True,False],[False,True,True]],[[False,False,False],[True,False,False],[True,False,True]],[[False,False,True],[True,True,False],[True,True,True]]], dtype = "bool")#candidate|197|(13, 3, 3)|const|bool
bop_198 = relay.bitwise_xor(bop_194.astype('uint32'), relay.reshape(const_197.astype('uint32'), relay.shape_of(bop_194))) # shape=(13, 3, 3)
bop_201 = relay.equal(var_185.astype('bool'), relay.reshape(bop_187.astype('bool'), relay.shape_of(var_185))) # shape=(13, 3, 3)
var_204 = relay.var("var_204", dtype = "uint32", shape = (13, 3, 3))#candidate|204|(13, 3, 3)|var|uint32
bop_205 = relay.mod(bop_198.astype('float32'), relay.reshape(var_204.astype('float32'), relay.shape_of(bop_198))) # shape=(13, 3, 3)
uop_208 = relay.sinh(var_185.astype('float32')) # shape=(13, 3, 3)
var_210 = relay.var("var_210", dtype = "float64", shape = (13, 3, 3))#candidate|210|(13, 3, 3)|var|float64
bop_211 = relay.right_shift(uop_190.astype('int8'), relay.reshape(var_210.astype('int8'), relay.shape_of(uop_190))) # shape=(13, 3, 3)
uop_214 = relay.sqrt(bop_194.astype('float64')) # shape=(13, 3, 3)
var_216 = relay.var("var_216", dtype = "float64", shape = (13, 3, 3))#candidate|216|(13, 3, 3)|var|float64
bop_217 = relay.logical_and(uop_214.astype('bool'), relay.reshape(var_216.astype('bool'), relay.shape_of(uop_214))) # shape=(13, 3, 3)
const_220 = relay.const([[[3.586052,2.331510,3.896365],[5.835310,-0.762539,-2.163727],[-9.043905,-9.433514,-8.909358]],[[-2.340823,-3.926528,-7.375924],[5.438841,2.072532,4.735475],[-2.297422,2.702759,3.511717]],[[-8.361239,-1.871352,2.489225],[7.249207,3.013257,3.265420],[0.961504,-6.826600,-6.873624]],[[4.137091,5.452153,-9.304780],[2.417178,9.307832,8.541962],[9.182997,-6.627596,-5.509315]],[[0.290837,4.098708,-6.907621],[-2.981168,-3.413931,9.290917],[9.216037,-9.250129,-0.105905]],[[5.758334,6.283590,-8.850342],[0.721223,-9.966322,-8.004454],[6.038007,-8.154750,-8.230852]],[[6.370197,8.760597,3.035002],[-3.871475,4.596297,5.406928],[8.922468,6.669458,-4.030054]],[[2.727395,-6.554408,5.252897],[5.280678,-3.842141,9.299228],[-1.612214,7.101191,-7.826427]],[[-6.023520,1.133467,3.844230],[8.702998,9.501132,8.502024],[5.672260,4.180422,-8.550369]],[[-1.024023,4.222465,1.431089],[6.854927,2.975692,5.104320],[2.924377,-1.983391,2.820664]],[[-1.636641,-3.041041,-9.713772],[6.777903,1.766421,3.737776],[5.270933,0.287599,-6.260109]],[[6.405667,-7.576584,-4.021516],[-0.193515,6.393490,-4.568244],[-5.577966,-4.752857,-0.929715]],[[-6.320988,-6.787727,-6.693951],[5.832040,8.138278,-2.178398],[4.357961,5.057716,-8.112811]]], dtype = "float64")#candidate|220|(13, 3, 3)|const|float64
bop_221 = relay.less_equal(uop_214.astype('bool'), relay.reshape(const_220.astype('bool'), relay.shape_of(uop_214))) # shape=(13, 3, 3)
var_224 = relay.var("var_224", dtype = "uint32", shape = (13, 3, 3))#candidate|224|(13, 3, 3)|var|uint32
bop_225 = relay.logical_or(bop_198.astype('bool'), relay.reshape(var_224.astype('bool'), relay.shape_of(bop_198))) # shape=(13, 3, 3)
output = relay.Tuple([bop_201,bop_205,uop_208,bop_211,bop_217,bop_221,bop_225,])
output2 = relay.Tuple([bop_201,bop_205,uop_208,bop_211,bop_217,bop_221,bop_225,])
func_228 = relay.Function([var_185,var_186,var_204,var_210,var_216,var_224,], output)
mod['func_228'] = func_228
mod = relay.transform.InferType()(mod)
var_229 = relay.var("var_229", dtype = "uint16", shape = (13, 3, 3))#candidate|229|(13, 3, 3)|var|uint16
var_230 = relay.var("var_230", dtype = "uint16", shape = (13, 3, 3))#candidate|230|(13, 3, 3)|var|uint16
var_231 = relay.var("var_231", dtype = "uint32", shape = (13, 3, 3))#candidate|231|(13, 3, 3)|var|uint32
var_232 = relay.var("var_232", dtype = "float64", shape = (13, 3, 3))#candidate|232|(13, 3, 3)|var|float64
var_233 = relay.var("var_233", dtype = "float64", shape = (13, 3, 3))#candidate|233|(13, 3, 3)|var|float64
var_234 = relay.var("var_234", dtype = "uint32", shape = (13, 3, 3))#candidate|234|(13, 3, 3)|var|uint32
output = func_228(var_229,var_230,var_231,var_232,var_233,var_234,)
func_235 = relay.Function([var_229,var_230,var_231,var_232,var_233,var_234,], output)
mutated_mod['func_235'] = func_235
mutated_mod = relay.transform.InferType()(mutated_mod)
const_237 = relay.const([[[3.614573,-8.822758,-1.882374,-2.512795,6.990623],[4.506701,4.332955,-6.384111,-1.350261,7.315454],[-8.533786,1.642956,-5.013522,-8.967648,-8.733308],[5.315231,-5.077096,-6.991915,-0.756764,-9.666541],[-9.750916,4.493717,6.073925,9.937369,5.115155],[0.691258,2.013306,8.396841,-5.688577,6.574869],[0.715455,5.886546,-8.959192,8.448868,-4.738719],[-7.192491,6.773971,1.063222,1.892938,8.326610],[8.164460,-3.504462,0.208918,-4.796650,0.015367],[8.205871,-8.649363,9.343348,-1.364164,-5.914853],[-5.020153,4.506337,-1.074509,-8.547746,-9.134381],[-6.365031,-9.559235,-6.678291,-9.111276,-6.403461],[-4.558102,7.907214,-7.894966,-5.938389,8.243091],[6.618319,6.804148,1.434875,8.577196,-5.520073]],[[5.822676,-8.673149,0.328762,-5.585261,3.089010],[-5.628126,-2.648644,5.372051,-6.893541,1.273755],[-5.466312,9.165902,-3.419575,6.037382,-3.042799],[0.116636,-2.550886,-3.069629,-2.124483,-1.274104],[4.557373,9.777932,-4.299583,-9.394499,-9.843161],[-2.415295,-7.773028,0.713289,-5.006706,6.994496],[-2.186565,3.578770,-5.238647,-0.863230,-2.278396],[-2.741846,2.436203,9.696993,-6.176779,-6.321218],[3.714561,7.773995,-1.630789,-8.093776,5.649066],[-1.846695,-2.624400,0.532632,1.706765,8.400809],[-7.205812,6.825345,-4.370107,3.255701,-3.580469],[6.244792,-2.562555,3.435076,9.219776,9.907771],[0.663380,-3.711708,6.785443,-3.094604,-4.346730],[-8.700100,-5.111788,-9.560801,-1.245577,0.624397]],[[-6.715025,6.649795,-8.960176,1.678332,-3.311720],[-6.134210,-1.373953,-9.546643,-9.698054,-9.745027],[-5.508132,0.990057,-4.631748,1.085915,4.708085],[9.483061,-6.080895,-1.545753,-1.060324,-1.721916],[6.683551,-2.584118,-1.643395,1.113644,-0.569368],[1.279278,3.610248,3.756569,-5.955309,-9.775317],[3.811285,5.970207,-0.520947,-6.376829,-4.438690],[-7.557836,-1.396300,7.732422,8.123440,7.244453],[0.074510,-4.316756,-0.871627,-6.144188,3.413433],[-7.679869,3.580590,-8.035878,-5.287539,-4.420282],[8.182272,-6.890320,2.538619,-2.625326,-6.515085],[-4.257425,-2.454101,-0.490737,-7.226903,-0.780335],[-1.644364,4.152601,-1.270711,7.288301,-4.575342],[1.364500,-2.532353,0.566198,-6.265544,-1.358717]],[[-1.502810,-4.141506,-1.625095,4.843043,5.362155],[-3.999337,-3.561718,1.490679,4.141143,5.935403],[-2.007895,8.226721,-6.939426,3.823745,6.551923],[-6.979908,-8.545436,-1.514006,9.536961,-7.386449],[5.504547,-2.961400,-3.537536,1.298293,1.401400],[5.113775,7.745452,-4.835447,-0.382520,-9.007310],[-7.305196,6.118571,5.834311,1.246462,2.017096],[-8.211468,-2.752008,-8.053863,-0.256184,-4.176056],[6.536018,-4.933040,-6.210311,-1.095081,-3.468809],[-0.297500,5.716964,8.590015,-1.123848,-0.597194],[-9.112873,-9.214047,3.072059,9.014749,-6.461943],[9.250437,-6.406133,4.937759,9.829776,2.107517],[-4.534537,-2.682395,4.209106,4.311554,-5.225278],[0.186490,-7.467561,2.531681,-6.002860,0.736799]],[[-1.051810,-8.009258,-1.283542,8.476122,-9.115290],[8.751828,9.596539,-0.956117,-3.939633,-0.255519],[9.804723,8.408696,2.239042,-2.988724,-5.965394],[9.505747,-6.826201,1.509531,9.825511,-6.197831],[8.513771,-7.323738,8.062373,6.503099,-2.408428],[-9.143841,5.316845,9.732547,-4.235935,-9.729354],[-1.831466,1.778697,-9.396153,4.207839,-1.602182],[0.532629,-9.590357,-6.283479,-8.290742,3.429987],[5.541036,7.069009,3.903782,2.363571,-7.708242],[-2.887256,9.082618,3.470398,-8.814313,7.366759],[3.529059,-8.851367,0.451385,8.818266,-7.983375],[-6.438562,0.698817,-6.063872,6.922131,-9.713585],[-1.077902,-9.895776,1.880019,1.917454,-8.393404],[-8.644968,8.992551,7.999270,0.157688,-9.220597]],[[1.196900,8.209330,-4.793257,-5.167615,1.548354],[8.917394,2.207601,-4.361750,-8.071217,1.817905],[-7.646207,-1.424195,-5.307443,-2.855045,-9.058821],[-5.802186,-1.622003,-2.995544,8.337723,-0.023691],[-5.992049,-8.729506,8.781526,-1.605844,-4.160817],[-4.560583,6.844927,-3.545356,9.183161,3.108691],[-7.781962,2.219593,8.911406,8.392886,-1.342973],[4.537581,-4.586606,5.739665,-1.442132,6.366187],[4.723741,-9.250522,-7.018341,-9.039465,9.377718],[4.919694,2.036831,-7.970526,6.470743,-6.803470],[8.990619,-0.907716,4.912180,5.136167,3.147368],[3.089406,8.333697,1.866314,-6.601744,3.831314],[7.297272,6.984383,0.192072,5.943932,-5.669723],[7.748877,7.889357,0.781911,9.923000,2.916647]],[[0.386066,6.465103,-1.319138,-3.573210,-2.242615],[-0.152101,-1.850895,5.746188,-6.897738,-6.787593],[-1.519084,-6.231240,4.246914,-9.030920,5.122266],[3.049454,-7.053837,9.790847,2.785030,-7.376750],[7.101190,4.969718,-1.431621,1.177934,3.350142],[9.116598,7.077440,-8.117531,8.922116,3.898011],[-5.287661,9.761674,6.751146,4.878129,-9.141973],[8.850059,-4.542464,-4.950574,4.662378,3.174483],[6.962108,-9.390236,3.302182,-6.961344,0.442662],[5.033080,-9.609608,3.060879,7.713347,7.231623],[-1.130029,3.880361,9.118490,5.256131,7.044963],[-5.343619,-0.126711,-2.832093,7.304014,-4.644080],[-0.891573,-6.430407,2.103127,8.272381,-9.865573],[-9.244110,8.998634,2.452577,7.422180,5.848749]],[[-9.897888,-8.251040,-6.413836,-4.692052,1.978221],[-0.249650,-9.571161,-5.747901,-2.610607,-4.420566],[-0.854945,1.800622,-9.535393,2.378314,-2.778085],[-5.977598,-9.114381,0.275588,3.691117,-2.196643],[-0.359678,6.730491,1.030882,-5.891332,3.393737],[-2.693006,-1.947068,0.391493,-6.388331,-2.419478],[8.684577,5.717747,9.919438,-7.134762,-8.508242],[7.835125,8.703487,9.301751,2.383080,1.924858],[-7.252502,-2.756944,4.370905,8.433696,-1.571873],[-3.188861,1.742369,5.556084,-6.693968,3.526276],[-6.208221,-8.605772,9.367895,-7.712174,8.525535],[1.565178,9.334641,-1.493322,2.042867,5.761603],[-7.235192,9.035140,7.763322,-0.543936,-2.886068],[7.347215,9.089336,3.633717,8.377173,7.605740]],[[9.275792,9.476037,-4.155734,2.743327,1.576682],[-4.826927,3.233576,8.568466,-4.555872,-1.570613],[-3.577284,-6.151307,7.206349,-9.044002,1.620619],[-6.266054,8.999445,-2.665998,1.175867,7.089533],[-9.102316,-6.529017,-2.936701,-0.162741,-1.118358],[8.171030,-2.511633,-9.061079,5.287267,9.727477],[-9.008545,9.802406,7.637192,7.010857,-7.748175],[9.535130,-6.901242,-6.351650,-6.542772,-4.676266],[9.014886,1.962670,9.973314,-5.765827,-8.313076],[9.615836,0.191304,-8.167154,-7.485111,3.454969],[2.662653,7.909550,2.589864,-1.656448,2.717597],[-5.340449,-2.579067,-7.426102,3.636327,1.722188],[-8.331533,-5.614374,7.947360,-4.247105,-3.745889],[-6.182675,5.142679,-4.854976,4.224711,-7.475510]],[[9.869350,-9.147262,-0.540654,3.587861,2.932327],[7.037566,4.373788,5.423473,6.354664,8.501685],[8.535977,3.530589,2.215305,9.402631,-8.673037],[1.109614,-5.105613,5.546542,2.629562,-8.606941],[2.786904,-8.310821,4.299258,-4.858624,-7.589788],[5.481840,7.434366,-9.274081,-3.408527,-1.697306],[7.283916,-6.910175,1.314873,-2.822588,-7.796155],[2.240998,-4.052175,-7.883268,6.659449,-0.770149],[-5.466402,3.917393,-5.497672,2.812539,-4.194905],[8.458775,1.171127,0.598390,-2.059221,7.678297],[8.332341,-8.781349,0.034051,7.725996,5.324078],[-7.371067,7.707778,-9.604624,9.384184,-8.681908],[3.836908,1.166572,6.592297,1.081431,-3.610958],[-9.286882,1.888437,3.632859,-3.647280,5.416843]]], dtype = "float32")#candidate|237|(10, 14, 5)|const|float32
uop_238 = relay.sigmoid(const_237.astype('float32')) # shape=(10, 14, 5)
var_240 = relay.var("var_240", dtype = "float32", shape = (10, 14, 5))#candidate|240|(10, 14, 5)|var|float32
bop_241 = relay.less_equal(uop_238.astype('bool'), relay.reshape(var_240.astype('bool'), relay.shape_of(uop_238))) # shape=(10, 14, 5)
uop_244 = relay.cosh(const_237.astype('float32')) # shape=(10, 14, 5)
bop_246 = relay.greater_equal(bop_241.astype('bool'), relay.reshape(const_237.astype('bool'), relay.shape_of(bop_241))) # shape=(10, 14, 5)
bop_249 = relay.equal(bop_246.astype('bool'), relay.reshape(uop_244.astype('bool'), relay.shape_of(bop_246))) # shape=(10, 14, 5)
func_172_call = mod.get_global_var('func_172')
func_183_call = mutated_mod.get_global_var('func_183')
const_253 = relay.const([7.549225,-0.518157,3.471151,4.189487,-2.395089,-8.614131,9.488328,8.298325,-8.735887,2.896839,-4.479965,4.306015,2.862016,5.240297,-4.792545,-4.647269,5.329173,-3.276573,1.245794,4.401396,9.314293,-6.267747,8.382506,-7.152734,-3.035429,9.945061,-3.212546,-9.212528,0.201868,-0.063323,-9.289648,9.928873,-5.520609,-6.185671,9.466581,3.693658,-8.727013,4.722969,-5.252369,8.818406,5.883844,5.155810,5.154914,-9.663590,3.690977,-2.991273,2.116899,2.985773,-3.332361,0.250740,7.495927,-2.673138,-8.941765,3.881583,1.911640,-5.057616,0.645289,6.852046,0.121271,2.615901,-1.147698,-9.163704,2.105643,4.685232,3.964002,-3.286821,-2.931843,-8.712314,-7.215422,7.515597,-2.743587,9.706749,4.373049,2.951752,-5.774464,7.674419,-6.990251,-3.746754,3.098655,3.548393,9.338207,3.988384,-6.365317,-2.593321,5.189112,5.345657,9.266469,1.396297,7.660048,7.098107,5.356587], dtype = "float64")#candidate|253|(91,)|const|float64
call_252 = relay.TupleGetItem(func_172_call(relay.reshape(const_253.astype('float64'), [7, 13]), relay.reshape(const_253.astype('float64'), [7, 13]), relay.reshape(const_253.astype('float64'), [7, 13]), relay.reshape(const_253.astype('float32'), [7, 13]), relay.reshape(const_253.astype('float64'), [7, 13]), relay.reshape(const_253.astype('float64'), [7, 13]), relay.reshape(const_253.astype('float32'), [7, 13]), relay.reshape(const_253.astype('float64'), [7, 13]), relay.reshape(const_253.astype('float32'), [7, 13]), ), 1)
call_254 = relay.TupleGetItem(func_183_call(relay.reshape(const_253.astype('float64'), [7, 13]), relay.reshape(const_253.astype('float64'), [7, 13]), relay.reshape(const_253.astype('float64'), [7, 13]), relay.reshape(const_253.astype('float32'), [7, 13]), relay.reshape(const_253.astype('float64'), [7, 13]), relay.reshape(const_253.astype('float64'), [7, 13]), relay.reshape(const_253.astype('float32'), [7, 13]), relay.reshape(const_253.astype('float64'), [7, 13]), relay.reshape(const_253.astype('float32'), [7, 13]), ), 1)
func_19_call = mod.get_global_var('func_19')
func_23_call = mutated_mod.get_global_var('func_23')
var_256 = relay.var("var_256", dtype = "float32", shape = (65, 4))#candidate|256|(65, 4)|var|float32
call_255 = relay.TupleGetItem(func_19_call(relay.reshape(var_256.astype('float32'), [13, 4, 5]), relay.reshape(var_256.astype('float64'), [13, 4, 5]), ), 2)
call_257 = relay.TupleGetItem(func_23_call(relay.reshape(var_256.astype('float32'), [13, 4, 5]), relay.reshape(var_256.astype('float64'), [13, 4, 5]), ), 2)
uop_258 = relay.atan(var_240.astype('float64')) # shape=(10, 14, 5)
bop_260 = relay.subtract(bop_241.astype('float32'), relay.reshape(uop_258.astype('float32'), relay.shape_of(bop_241))) # shape=(10, 14, 5)
bop_263 = relay.power(call_252.astype('float64'), relay.reshape(const_253.astype('float64'), relay.shape_of(call_252))) # shape=(7, 13)
bop_266 = relay.power(call_254.astype('float64'), relay.reshape(const_253.astype('float64'), relay.shape_of(call_254))) # shape=(7, 13)
uop_267 = relay.rsqrt(call_255.astype('float64')) # shape=(13, 4, 5)
uop_269 = relay.rsqrt(call_257.astype('float64')) # shape=(13, 4, 5)
bop_270 = relay.equal(var_256.astype('bool'), relay.reshape(uop_267.astype('bool'), relay.shape_of(var_256))) # shape=(65, 4)
bop_273 = relay.equal(var_256.astype('bool'), relay.reshape(uop_269.astype('bool'), relay.shape_of(var_256))) # shape=(65, 4)
output = relay.Tuple([bop_249,bop_260,bop_263,bop_270,])
output2 = relay.Tuple([bop_249,bop_260,bop_266,bop_273,])
func_274 = relay.Function([var_240,var_256,], output)
mod['func_274'] = func_274
mod = relay.transform.InferType()(mod)
mutated_mod['func_274'] = func_274
mutated_mod = relay.transform.InferType()(mutated_mod)
func_274_call = mutated_mod.get_global_var('func_274')
var_276 = relay.var("var_276", dtype = "float32", shape = (10, 14, 5))#candidate|276|(10, 14, 5)|var|float32
var_277 = relay.var("var_277", dtype = "float32", shape = (65, 4))#candidate|277|(65, 4)|var|float32
call_275 = func_274_call(var_276,var_277,)
output = call_275
func_278 = relay.Function([var_276,var_277,], output)
mutated_mod['func_278'] = func_278
mutated_mod = relay.transform.InferType()(mutated_mod)
const_280 = relay.const([9.192233,-5.991530,-0.346611,-7.256438,-1.033587,3.663355,2.749456,0.629746,8.138547,-9.537210,0.405529], dtype = "float64")#candidate|280|(11,)|const|float64
uop_281 = relay.sin(const_280.astype('float64')) # shape=(11,)
bop_283 = relay.mod(const_280.astype('float64'), relay.reshape(uop_281.astype('float64'), relay.shape_of(const_280))) # shape=(11,)
uop_286 = relay.sigmoid(const_280.astype('float32')) # shape=(11,)
uop_288 = relay.log10(const_280.astype('float64')) # shape=(11,)
const_290 = relay.const([-9.394959,8.161062,-1.694440,5.630088,6.900809,-7.114941,5.884596,8.858573,3.275482,-3.286683,5.236623], dtype = "float64")#candidate|290|(11,)|const|float64
bop_291 = relay.less_equal(uop_288.astype('bool'), relay.reshape(const_290.astype('bool'), relay.shape_of(uop_288))) # shape=(11,)
uop_294 = relay.sin(bop_291.astype('float32')) # shape=(11,)
uop_296 = relay.rsqrt(uop_294.astype('float32')) # shape=(11,)
bop_298 = relay.left_shift(uop_294.astype('int8'), relay.reshape(bop_283.astype('int8'), relay.shape_of(uop_294))) # shape=(11,)
uop_301 = relay.acos(uop_296.astype('float32')) # shape=(11,)
var_303 = relay.var("var_303", dtype = "float32", shape = (11,))#candidate|303|(11,)|var|float32
bop_304 = relay.power(uop_301.astype('float64'), relay.reshape(var_303.astype('float64'), relay.shape_of(uop_301))) # shape=(11,)
uop_307 = relay.cosh(bop_304.astype('float32')) # shape=(11,)
uop_309 = relay.asinh(uop_307.astype('float32')) # shape=(11,)
bop_311 = relay.minimum(uop_309.astype('uint64'), relay.reshape(bop_283.astype('uint64'), relay.shape_of(uop_309))) # shape=(11,)
output = relay.Tuple([uop_286,bop_298,bop_311,])
output2 = relay.Tuple([uop_286,bop_298,bop_311,])
func_314 = relay.Function([var_303,], output)
mod['func_314'] = func_314
mod = relay.transform.InferType()(mod)
mutated_mod['func_314'] = func_314
mutated_mod = relay.transform.InferType()(mutated_mod)
var_315 = relay.var("var_315", dtype = "float32", shape = (11,))#candidate|315|(11,)|var|float32
func_314_call = mutated_mod.get_global_var('func_314')
call_316 = func_314_call(var_315)
output = call_316
func_317 = relay.Function([var_315], output)
mutated_mod['func_317'] = func_317
mutated_mod = relay.transform.InferType()(mutated_mod)
var_319 = relay.var("var_319", dtype = "float32", shape = ())#candidate|319|()|var|float32
const_320 = relay.const([0.284685,-6.699565,9.303771,0.899343,-5.537791,-8.076660,2.485048], dtype = "float32")#candidate|320|(7,)|const|float32
bop_321 = relay.mod(var_319.astype('float32'), const_320.astype('float32')) # shape=(7,)
uop_324 = relay.acosh(var_319.astype('float64')) # shape=()
uop_326 = relay.erf(uop_324.astype('float64')) # shape=()
uop_328 = relay.acos(const_320.astype('float64')) # shape=(7,)
const_330 = relay.const([[[-0.162951],[3.418445],[6.568448],[4.070541],[4.588173],[-6.345450],[-0.703020],[5.504698]],[[-3.715048],[0.102741],[4.695701],[4.412613],[-3.542148],[3.422455],[1.809413],[-6.098465]],[[7.126387],[-1.474359],[3.833547],[9.990971],[2.776581],[3.684815],[-4.117409],[8.032093]],[[0.829922],[-5.188683],[-0.568997],[-6.498293],[9.295702],[-9.827926],[-3.006592],[8.659155]]], dtype = "float64")#candidate|330|(4, 8, 1)|const|float64
bop_331 = relay.mod(uop_324.astype('float32'), const_330.astype('float32')) # shape=(4, 8, 1)
uop_334 = relay.erf(uop_326.astype('float64')) # shape=()
bop_336 = relay.minimum(uop_334.astype('int8'), bop_321.astype('int8')) # shape=(7,)
var_339 = relay.var("var_339", dtype = "float64", shape = (6,))#candidate|339|(6,)|var|float64
bop_340 = relay.logical_or(uop_324.astype('bool'), var_339.astype('bool')) # shape=(6,)
bop_343 = relay.logical_and(uop_326.astype('bool'), bop_321.astype('bool')) # shape=(7,)
bop_346 = relay.logical_xor(uop_334.astype('uint32'), uop_328.astype('uint32')) # shape=(7,)
bop_349 = relay.mod(uop_334.astype('float64'), bop_331.astype('float64')) # shape=(4, 8, 1)
uop_352 = relay.asin(uop_328.astype('float32')) # shape=(7,)
uop_354 = relay.sin(bop_343.astype('float32')) # shape=(7,)
uop_356 = relay.acos(bop_346.astype('float64')) # shape=(7,)
output = relay.Tuple([bop_336,bop_340,bop_349,uop_352,uop_354,uop_356,])
output2 = relay.Tuple([bop_336,bop_340,bop_349,uop_352,uop_354,uop_356,])
F = relay.Function([var_319,var_339,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_319,var_339,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_319= np.array(-5.797669, dtype='float32')
module1.set_input('var_319', input_319)
input_339= np.array([-9.442002,6.432255,-0.778651,-9.477714,-4.982175,-1.777285], dtype='float64')
module1.set_input('var_339', input_339)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_319, input_339, )
res3 = intrp3.evaluate()(input_319, input_339, )
res4 = intrp4.evaluate()(input_319, input_339, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
module5.set_input('var_319', input_319)
module5.set_input('var_339', input_339)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_319, input_339, )
res7 = intrp7.evaluate()(input_319, input_339, )
res8 = intrp8.evaluate()(input_319, input_339, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
module9.set_input('var_319', input_319)
module9.set_input('var_339', input_339)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_319, input_339, )
res11 = intrp11.evaluate()(input_319, input_339, )
res12 = intrp12.evaluate()(input_319, input_339, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
module13.set_input('var_319', input_319)
module13.set_input('var_339', input_339)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_319, input_339, )
res15 = intrp15.evaluate()(input_319, input_339, )
res16 = intrp16.evaluate()(input_319, input_339, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
module17.set_input('var_319', input_319)
module17.set_input('var_339', input_339)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_319, input_339, )
res19 = intrp19.evaluate()(input_319, input_339, )
res20 = intrp20.evaluate()(input_319, input_339, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
module21.set_input('var_319', input_319)
module21.set_input('var_339', input_339)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_319, input_339, )
res23 = intrp23.evaluate()(input_319, input_339, )
res24 = intrp24.evaluate()(input_319, input_339, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()

'''1.570796])

'''