import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "int16", shape = (13, 11))#candidate|0|(13, 11)|var|int16
const_1 = relay.const([[-6,5,-6,-2,1,10,-8,-5,3,5,7],[-7,4,-4,8,3,6,5,-10,-4,-8,1],[9,4,-5,-6,-4,-9,8,7,7,-9,10],[6,-2,3,5,9,-3,-6,10,3,4,2],[7,10,-3,-8,-5,-5,5,1,5,5,-3],[-8,-4,8,-3,2,4,-4,2,-10,-6,-8],[-4,-2,8,-6,-10,-5,5,2,6,10,9],[4,7,10,10,6,-6,-2,-8,9,-3,2],[-10,10,10,5,-7,1,-5,-9,1,-9,-6],[5,-9,3,9,-2,10,4,-3,9,7,5],[-3,7,2,2,6,3,2,-7,-1,-1,-4],[-3,3,8,6,-4,-8,4,8,9,3,-9],[-7,-7,9,9,2,-2,-6,7,-4,10,1]], dtype = "int16")#candidate|1|(13, 11)|const|int16
bop_2 = relay.bitwise_or(var_0.astype('int16'), relay.reshape(const_1.astype('int16'), relay.shape_of(var_0))) # shape=(13, 11)
var_5 = relay.var("var_5", dtype = "int16", shape = (13, 11))#candidate|5|(13, 11)|var|int16
bop_6 = relay.multiply(bop_2.astype('uint16'), relay.reshape(var_5.astype('uint16'), relay.shape_of(bop_2))) # shape=(13, 11)
var_9 = relay.var("var_9", dtype = "uint16", shape = (13, 11))#candidate|9|(13, 11)|var|uint16
bop_10 = relay.equal(bop_6.astype('bool'), relay.reshape(var_9.astype('bool'), relay.shape_of(bop_6))) # shape=(13, 11)
uop_13 = relay.asinh(var_5.astype('float32')) # shape=(13, 11)
uop_15 = relay.log(uop_13.astype('float64')) # shape=(13, 11)
uop_17 = relay.exp(uop_15.astype('float64')) # shape=(13, 11)
const_19 = relay.const([[-8.000053,5.186981,-5.816747,-5.833085,1.892857,4.536059,-5.514264,3.771461,6.091692,-4.819425,-8.653328],[-4.136104,-1.136288,1.005473,-9.840866,-1.261068,5.268922,0.727581,-6.700216,-5.343912,4.766580,-0.260517],[-5.591610,-4.234349,3.321282,2.257468,0.827566,-5.675668,-2.610566,1.140738,-6.385924,1.705904,4.192427],[7.534384,-0.492447,2.201341,3.030148,7.703042,4.585388,-8.811917,-8.987438,-1.396283,1.379631,8.482248],[6.264922,-6.937935,-3.128257,6.827769,-8.738767,-7.723097,-7.728094,1.539723,7.173787,4.602078,-7.869743],[2.573106,6.266058,-0.745436,-4.868546,-6.453526,-4.219221,-9.421530,-9.646821,9.652621,-5.049102,8.090570],[3.913849,1.919242,2.563205,-3.227994,-3.217059,-5.170921,1.935186,-3.445941,2.195470,7.385721,-6.294082],[-3.077731,4.399530,1.541985,2.412065,-8.384125,5.101500,7.875657,-0.445312,-0.683863,-9.785788,-5.406867],[-6.141743,6.621907,4.041645,3.279893,-2.160077,-8.831377,0.956439,-9.564602,-1.601414,-6.349214,-3.874638],[-2.362096,6.211323,5.046662,-4.755568,0.949889,-6.320137,-0.231328,-3.455450,8.390825,6.899537,-5.607695],[-3.127762,-4.333295,-5.385324,-1.489641,-5.043643,4.199622,-6.288484,1.583960,1.777161,1.571767,-3.118099],[1.375811,6.392364,9.191359,2.419380,-9.929998,-4.352554,-0.099072,2.494486,5.949159,-7.355525,3.206333],[7.863192,6.925442,6.044859,1.152216,-5.683811,-3.076299,8.143923,-5.455265,-3.028337,-2.496331,7.062941]], dtype = "float64")#candidate|19|(13, 11)|const|float64
bop_20 = relay.logical_xor(uop_15.astype('uint64'), relay.reshape(const_19.astype('uint64'), relay.shape_of(uop_15))) # shape=(13, 11)
uop_23 = relay.atan(uop_13.astype('float32')) # shape=(13, 11)
uop_25 = relay.cos(uop_13.astype('float64')) # shape=(13, 11)
output = relay.Tuple([bop_10,uop_17,bop_20,uop_23,uop_25,])
output2 = relay.Tuple([bop_10,uop_17,bop_20,uop_23,uop_25,])
func_27 = relay.Function([var_0,var_5,var_9,], output)
mod['func_27'] = func_27
mod = relay.transform.InferType()(mod)
var_28 = relay.var("var_28", dtype = "int16", shape = (13, 11))#candidate|28|(13, 11)|var|int16
var_29 = relay.var("var_29", dtype = "int16", shape = (13, 11))#candidate|29|(13, 11)|var|int16
var_30 = relay.var("var_30", dtype = "uint16", shape = (13, 11))#candidate|30|(13, 11)|var|uint16
output = func_27(var_28,var_29,var_30,)
func_31 = relay.Function([var_28,var_29,var_30,], output)
mutated_mod['func_31'] = func_31
mutated_mod = relay.transform.InferType()(mutated_mod)
var_33 = relay.var("var_33", dtype = "float64", shape = (10,))#candidate|33|(10,)|var|float64
const_34 = relay.const([-9.759003,7.663448,-8.913089,-8.863773,9.940310,-0.403213,4.656284,0.662048,7.889150,-2.095798], dtype = "float64")#candidate|34|(10,)|const|float64
bop_35 = relay.floor_mod(var_33.astype('float64'), relay.reshape(const_34.astype('float64'), relay.shape_of(var_33))) # shape=(10,)
const_38 = relay.const([-7.663382,5.736436,-8.209048,-5.030451,-7.856483,-9.707930,-0.059435,8.320094,4.762787,4.085648], dtype = "float64")#candidate|38|(10,)|const|float64
bop_39 = relay.floor_mod(var_33.astype('float64'), relay.reshape(const_38.astype('float64'), relay.shape_of(var_33))) # shape=(10,)
bop_42 = relay.greater_equal(const_34.astype('bool'), relay.reshape(bop_39.astype('bool'), relay.shape_of(const_34))) # shape=(10,)
var_45 = relay.var("var_45", dtype = "float64", shape = (10,))#candidate|45|(10,)|var|float64
bop_46 = relay.bitwise_and(var_33.astype('uint8'), relay.reshape(var_45.astype('uint8'), relay.shape_of(var_33))) # shape=(10,)
const_49 = relay.const([4.225571,6.501989,-1.602714,5.797791,6.460385,9.928961,-0.308618,-5.704163,-8.372382,-4.159601], dtype = "float64")#candidate|49|(10,)|const|float64
bop_50 = relay.bitwise_xor(var_45.astype('uint8'), relay.reshape(const_49.astype('uint8'), relay.shape_of(var_45))) # shape=(10,)
const_53 = relay.const([5.262412,-0.233173,-3.376206,6.972503,-3.464865,0.343187,-9.509690,2.475924,3.319732,2.079396], dtype = "float64")#candidate|53|(10,)|const|float64
bop_54 = relay.less_equal(bop_35.astype('bool'), relay.reshape(const_53.astype('bool'), relay.shape_of(bop_35))) # shape=(10,)
const_57 = relay.const([4,-3,3,-2,-4,10,-2,5,5,-5], dtype = "uint8")#candidate|57|(10,)|const|uint8
bop_58 = relay.divide(bop_50.astype('float64'), relay.reshape(const_57.astype('float64'), relay.shape_of(bop_50))) # shape=(10,)
func_27_call = mod.get_global_var('func_27')
func_31_call = mutated_mod.get_global_var('func_31')
const_62 = relay.const([-2,6,5,6,9,5,-8,4,-8,9,9,3,3,1,6,6,-2,-1,-10,-8,-5,-1,-10,1,8,-7,1,4,-1,5,6,-7,-6,5,7,6,-6,5,2,7,7,8,6,-1,-6,6,10,2,2,-1,-1,-9,4,7,1,7,-10,5,6,2,-4,5,2,7,7,10,-7,-8,-4,-8,-9,-4,-9,-4,9,-10,-6,5,4,-9,4,-10,-10,-9,-3,1,1,10,8,-8,2,8,-2,-6,-8,7,4,-10,-6,-1,5,1,-7,9,-5,-2,4,-2,2,-3,3,-10,-9,-3,1,-4,-6,-4,3,10,-10,-4,-2,-1,6,-7,-5,-8,-9,-1,-7,-7,-9,-7,4,-2,-2,1,5,-8,-7,10,4], dtype = "int16")#candidate|62|(143,)|const|int16
call_61 = relay.TupleGetItem(func_27_call(relay.reshape(const_62.astype('int16'), [13, 11]), relay.reshape(const_62.astype('int16'), [13, 11]), relay.reshape(const_62.astype('uint16'), [13, 11]), ), 2)
call_63 = relay.TupleGetItem(func_31_call(relay.reshape(const_62.astype('int16'), [13, 11]), relay.reshape(const_62.astype('int16'), [13, 11]), relay.reshape(const_62.astype('uint16'), [13, 11]), ), 2)
uop_64 = relay.acosh(const_34.astype('float64')) # shape=(10,)
var_66 = relay.var("var_66", dtype = "float64", shape = (10,))#candidate|66|(10,)|var|float64
bop_67 = relay.greater_equal(const_53.astype('bool'), relay.reshape(var_66.astype('bool'), relay.shape_of(const_53))) # shape=(10,)
uop_70 = relay.exp(uop_64.astype('float32')) # shape=(10,)
bop_72 = relay.maximum(uop_70.astype('int16'), relay.reshape(const_49.astype('int16'), relay.shape_of(uop_70))) # shape=(10,)
uop_75 = relay.acosh(uop_70.astype('float64')) # shape=(10,)
bop_77 = relay.logical_or(uop_75.astype('bool'), relay.reshape(const_53.astype('bool'), relay.shape_of(uop_75))) # shape=(10,)
uop_80 = relay.cos(uop_70.astype('float64')) # shape=(10,)
uop_82 = relay.acosh(bop_58.astype('float32')) # shape=(10,)
func_27_call = mod.get_global_var('func_27')
func_31_call = mutated_mod.get_global_var('func_31')
call_84 = relay.TupleGetItem(func_27_call(relay.reshape(const_62.astype('int16'), [13, 11]), relay.reshape(call_61.astype('int16'), [13, 11]), relay.reshape(const_62.astype('uint16'), [13, 11]), ), 4)
call_85 = relay.TupleGetItem(func_31_call(relay.reshape(const_62.astype('int16'), [13, 11]), relay.reshape(call_61.astype('int16'), [13, 11]), relay.reshape(const_62.astype('uint16'), [13, 11]), ), 4)
var_86 = relay.var("var_86", dtype = "float64", shape = (10,))#candidate|86|(10,)|var|float64
bop_87 = relay.add(uop_75.astype('uint64'), relay.reshape(var_86.astype('uint64'), relay.shape_of(uop_75))) # shape=(10,)
bop_90 = relay.power(uop_75.astype('float64'), relay.reshape(bop_67.astype('float64'), relay.shape_of(uop_75))) # shape=(10,)
output = relay.Tuple([bop_42,bop_46,bop_54,call_61,const_62,bop_72,bop_77,uop_80,uop_82,call_84,bop_87,bop_90,])
output2 = relay.Tuple([bop_42,bop_46,bop_54,call_63,const_62,bop_72,bop_77,uop_80,uop_82,call_85,bop_87,bop_90,])
func_93 = relay.Function([var_33,var_45,var_66,var_86,], output)
mod['func_93'] = func_93
mod = relay.transform.InferType()(mod)
var_94 = relay.var("var_94", dtype = "float64", shape = (10,))#candidate|94|(10,)|var|float64
var_95 = relay.var("var_95", dtype = "float64", shape = (10,))#candidate|95|(10,)|var|float64
var_96 = relay.var("var_96", dtype = "float64", shape = (10,))#candidate|96|(10,)|var|float64
var_97 = relay.var("var_97", dtype = "float64", shape = (10,))#candidate|97|(10,)|var|float64
output = func_93(var_94,var_95,var_96,var_97,)
func_98 = relay.Function([var_94,var_95,var_96,var_97,], output)
mutated_mod['func_98'] = func_98
mutated_mod = relay.transform.InferType()(mutated_mod)
const_100 = relay.const([[9.792239,8.196050,9.612530,-1.822813,-8.836478,1.086575,2.977889,7.105696,-2.502961,-7.268664,-4.260311,-5.641057],[9.940780,-4.067261,2.540166,-0.319944,-9.063518,0.107166,-2.700035,-4.458537,9.665207,4.505146,7.031131,-4.251790],[-6.552738,1.917142,-7.505866,-1.264656,5.918600,9.114999,9.706297,-6.140022,0.344834,0.827329,1.859227,-1.119863],[-4.601661,-0.747758,-2.661940,4.521471,1.451070,-0.658942,-8.707943,6.992853,3.753615,-4.532215,-3.318082,-0.114772],[8.872563,-4.910000,1.559046,2.873626,-1.493560,1.947522,-9.286038,4.757590,-2.310285,3.286903,2.167628,-0.771700],[7.371047,6.496682,5.961708,9.141535,8.911741,-2.585736,3.393431,-3.901959,0.733113,-3.536158,4.120513,3.395997],[4.360857,-2.577348,2.683931,3.750288,-2.844887,-9.808227,-2.831153,-9.386998,2.176390,-0.733458,-0.090427,-7.875773]], dtype = "float32")#candidate|100|(7, 12)|const|float32
uop_101 = relay.acosh(const_100.astype('float32')) # shape=(7, 12)
uop_103 = relay.rsqrt(uop_101.astype('float64')) # shape=(7, 12)
output = uop_103
output2 = uop_103
func_105 = relay.Function([], output)
mod['func_105'] = func_105
mod = relay.transform.InferType()(mod)
mutated_mod['func_105'] = func_105
mutated_mod = relay.transform.InferType()(mutated_mod)
func_105_call = mutated_mod.get_global_var('func_105')
call_106 = func_105_call()
output = call_106
func_107 = relay.Function([], output)
mutated_mod['func_107'] = func_107
mutated_mod = relay.transform.InferType()(mutated_mod)
const_108 = relay.const([0.977643,4.553651,7.783328], dtype = "float64")#candidate|108|(3,)|const|float64
uop_109 = relay.atanh(const_108.astype('float64')) # shape=(3,)
bop_111 = relay.bitwise_or(const_108.astype('uint8'), relay.reshape(uop_109.astype('uint8'), relay.shape_of(const_108))) # shape=(3,)
bop_114 = relay.less(bop_111.astype('bool'), relay.reshape(uop_109.astype('bool'), relay.shape_of(bop_111))) # shape=(3,)
uop_117 = relay.cos(bop_114.astype('float32')) # shape=(3,)
bop_119 = relay.logical_xor(uop_117.astype('uint32'), relay.reshape(uop_109.astype('uint32'), relay.shape_of(uop_117))) # shape=(3,)
bop_122 = relay.less(const_108.astype('bool'), relay.reshape(uop_109.astype('bool'), relay.shape_of(const_108))) # shape=(3,)
var_125 = relay.var("var_125", dtype = "float32", shape = (3,))#candidate|125|(3,)|var|float32
bop_126 = relay.not_equal(uop_117.astype('bool'), relay.reshape(var_125.astype('bool'), relay.shape_of(uop_117))) # shape=(3,)
const_129 = relay.const([True,True,True], dtype = "bool")#candidate|129|(3,)|const|bool
bop_130 = relay.floor_divide(bop_126.astype('float32'), relay.reshape(const_129.astype('float32'), relay.shape_of(bop_126))) # shape=(3,)
uop_133 = relay.atan(bop_130.astype('float32')) # shape=(3,)
var_135 = relay.var("var_135", dtype = "float32", shape = (3,))#candidate|135|(3,)|var|float32
bop_136 = relay.less(bop_130.astype('bool'), relay.reshape(var_135.astype('bool'), relay.shape_of(bop_130))) # shape=(3,)
uop_139 = relay.log2(uop_133.astype('float64')) # shape=(3,)
func_105_call = mod.get_global_var('func_105')
func_107_call = mutated_mod.get_global_var('func_107')
call_141 = func_105_call()
call_142 = func_105_call()
uop_143 = relay.exp(uop_139.astype('float32')) # shape=(3,)
uop_145 = relay.exp(uop_143.astype('float32')) # shape=(3,)
uop_147 = relay.cosh(uop_145.astype('float64')) # shape=(3,)
const_149 = relay.const([3.227756,4.424549,-5.048953], dtype = "float32")#candidate|149|(3,)|const|float32
bop_150 = relay.greater(uop_145.astype('bool'), relay.reshape(const_149.astype('bool'), relay.shape_of(uop_145))) # shape=(3,)
uop_153 = relay.rsqrt(uop_143.astype('float32')) # shape=(3,)
bop_155 = relay.logical_or(uop_147.astype('bool'), relay.reshape(bop_114.astype('bool'), relay.shape_of(uop_147))) # shape=(3,)
var_158 = relay.var("var_158", dtype = "float32", shape = (3,))#candidate|158|(3,)|var|float32
bop_159 = relay.bitwise_xor(uop_145.astype('uint8'), relay.reshape(var_158.astype('uint8'), relay.shape_of(uop_145))) # shape=(3,)
bop_162 = relay.mod(uop_143.astype('float32'), relay.reshape(const_108.astype('float32'), relay.shape_of(uop_143))) # shape=(3,)
bop_165 = relay.divide(bop_155.astype('float64'), relay.reshape(uop_147.astype('float64'), relay.shape_of(bop_155))) # shape=(3,)
bop_168 = relay.maximum(bop_150.astype('int32'), relay.reshape(const_108.astype('int32'), relay.shape_of(bop_150))) # shape=(3,)
bop_171 = relay.multiply(uop_147.astype('int8'), relay.reshape(bop_111.astype('int8'), relay.shape_of(uop_147))) # shape=(3,)
bop_174 = relay.divide(bop_165.astype('float64'), relay.reshape(bop_111.astype('float64'), relay.shape_of(bop_165))) # shape=(3,)
uop_177 = relay.tan(uop_153.astype('float32')) # shape=(3,)
bop_179 = relay.floor_divide(uop_177.astype('float64'), relay.reshape(uop_147.astype('float64'), relay.shape_of(uop_177))) # shape=(3,)
uop_182 = relay.erf(bop_179.astype('float64')) # shape=(3,)
func_27_call = mod.get_global_var('func_27')
func_31_call = mutated_mod.get_global_var('func_31')
const_185 = relay.const([3,-3,8,-1,3,3,-2,-7,5,9,-8,3,10,-9,8,7,1,-2,-3,1,9,-6,-7,5,10,-9,-10,-10,-10,-7,8,-10,3,-8,-6,-2,5,10,-2,-5,-9,-3,-9,-1,-3,-7,-2,9,-2,-2,8,-5,-6,4,-2,-10,-3,9,-5,1,1,-8,7,-10,4,7,-10,4,9,-1,5,1,-2,2,-3,5,10,-8,-1,-8,-10,9,-9,-5,-1,9,-6,5,-3,7,-9,1,-6,-8,7,3,9,9,-5,6,9,-3,10,-6,7,10,-6,5,1,-10,-7,10,-7,6,3,9,1,-8,-1,5,-10,4,-9,-9,-10,1,-5,7,-9,-5,7,4,-7,-1,1,-6,1,6,-7,-10,-7,8,1], dtype = "int16")#candidate|185|(143,)|const|int16
call_184 = relay.TupleGetItem(func_27_call(relay.reshape(const_185.astype('int16'), [13, 11]), relay.reshape(const_185.astype('int16'), [13, 11]), relay.reshape(const_185.astype('uint16'), [13, 11]), ), 4)
call_186 = relay.TupleGetItem(func_31_call(relay.reshape(const_185.astype('int16'), [13, 11]), relay.reshape(const_185.astype('int16'), [13, 11]), relay.reshape(const_185.astype('uint16'), [13, 11]), ), 4)
var_187 = relay.var("var_187", dtype = "float64", shape = (3,))#candidate|187|(3,)|var|float64
bop_188 = relay.mod(uop_147.astype('float32'), relay.reshape(var_187.astype('float32'), relay.shape_of(uop_147))) # shape=(3,)
uop_191 = relay.sigmoid(uop_182.astype('float64')) # shape=(3,)
bop_193 = relay.subtract(uop_182.astype('float64'), relay.reshape(var_135.astype('float64'), relay.shape_of(uop_182))) # shape=(3,)
uop_196 = relay.asin(bop_193.astype('float64')) # shape=(3,)
uop_198 = relay.acos(uop_196.astype('float64')) # shape=(3,)
bop_200 = relay.mod(bop_179.astype('float64'), relay.reshape(var_125.astype('float64'), relay.shape_of(bop_179))) # shape=(3,)
bop_203 = relay.maximum(bop_168.astype('int16'), relay.reshape(var_158.astype('int16'), relay.shape_of(bop_168))) # shape=(3,)
bop_206 = relay.bitwise_and(uop_196.astype('uint64'), relay.reshape(uop_153.astype('uint64'), relay.shape_of(uop_196))) # shape=(3,)
uop_209 = relay.cos(uop_198.astype('float64')) # shape=(3,)
bop_211 = relay.bitwise_or(uop_209.astype('uint32'), relay.reshape(bop_136.astype('uint32'), relay.shape_of(uop_209))) # shape=(3,)
bop_214 = relay.divide(uop_191.astype('float32'), relay.reshape(bop_119.astype('float32'), relay.shape_of(uop_191))) # shape=(3,)
output = relay.Tuple([bop_122,call_141,bop_159,bop_162,bop_171,bop_174,call_184,const_185,bop_188,bop_200,bop_203,bop_206,bop_211,bop_214,])
output2 = relay.Tuple([bop_122,call_142,bop_159,bop_162,bop_171,bop_174,call_186,const_185,bop_188,bop_200,bop_203,bop_206,bop_211,bop_214,])
func_217 = relay.Function([var_125,var_135,var_158,var_187,], output)
mod['func_217'] = func_217
mod = relay.transform.InferType()(mod)
mutated_mod['func_217'] = func_217
mutated_mod = relay.transform.InferType()(mutated_mod)
func_217_call = mutated_mod.get_global_var('func_217')
var_219 = relay.var("var_219", dtype = "float32", shape = (3,))#candidate|219|(3,)|var|float32
var_220 = relay.var("var_220", dtype = "float32", shape = (3,))#candidate|220|(3,)|var|float32
var_221 = relay.var("var_221", dtype = "float32", shape = (3,))#candidate|221|(3,)|var|float32
var_222 = relay.var("var_222", dtype = "float64", shape = (3,))#candidate|222|(3,)|var|float64
call_218 = func_217_call(var_219,var_220,var_221,var_222,)
output = call_218
func_223 = relay.Function([var_219,var_220,var_221,var_222,], output)
mutated_mod['func_223'] = func_223
mutated_mod = relay.transform.InferType()(mutated_mod)
const_225 = relay.const(-7.045233, dtype = "float64")#candidate|225|()|const|float64
uop_226 = relay.log2(const_225.astype('float64')) # shape=()
bop_228 = relay.logical_and(uop_226.astype('bool'), const_225.astype('bool')) # shape=()
var_231 = relay.var("var_231", dtype = "float64", shape = ())#candidate|231|()|var|float64
bop_232 = relay.power(uop_226.astype('float32'), var_231.astype('float32')) # shape=()
var_235 = relay.var("var_235", dtype = "float32", shape = (8,))#candidate|235|(8,)|var|float32
bop_236 = relay.add(bop_232.astype('uint64'), var_235.astype('uint64')) # shape=(8,)
bop_239 = relay.left_shift(bop_236.astype('uint64'), relay.reshape(var_235.astype('uint64'), relay.shape_of(bop_236))) # shape=(8,)
uop_242 = relay.cos(bop_228.astype('float32')) # shape=()
bop_244 = relay.greater(uop_242.astype('bool'), const_225.astype('bool')) # shape=()
bop_247 = relay.bitwise_or(bop_236.astype('int16'), bop_232.astype('int16')) # shape=(8,)
uop_250 = relay.log2(uop_242.astype('float32')) # shape=()
bop_252 = relay.logical_or(uop_250.astype('bool'), var_231.astype('bool')) # shape=()
var_255 = relay.var("var_255", dtype = "float32", shape = (8, 10, 12))#candidate|255|(8, 10, 12)|var|float32
bop_256 = relay.right_shift(uop_250.astype('int32'), var_255.astype('int32')) # shape=(8, 10, 12)
uop_259 = relay.log2(bop_256.astype('float32')) # shape=(8, 10, 12)
uop_261 = relay.atan(uop_242.astype('float32')) # shape=()
bop_263 = relay.left_shift(uop_259.astype('int16'), bop_252.astype('int16')) # shape=(8, 10, 12)
bop_266 = relay.power(bop_236.astype('float64'), uop_261.astype('float64')) # shape=(8,)
uop_269 = relay.sqrt(bop_252.astype('float64')) # shape=()
uop_271 = relay.erf(uop_269.astype('float32')) # shape=()
bop_273 = relay.less(uop_271.astype('bool'), bop_263.astype('bool')) # shape=(8, 10, 12)
uop_276 = relay.asinh(bop_273.astype('float64')) # shape=(8, 10, 12)
uop_278 = relay.asinh(uop_271.astype('float32')) # shape=()
uop_280 = relay.acos(uop_271.astype('float64')) # shape=()
uop_282 = relay.asin(uop_276.astype('float32')) # shape=(8, 10, 12)
bop_284 = relay.divide(uop_271.astype('float32'), bop_244.astype('float32')) # shape=()
var_287 = relay.var("var_287", dtype = "float32", shape = (8, 10, 12))#candidate|287|(8, 10, 12)|var|float32
bop_288 = relay.bitwise_and(uop_282.astype('uint64'), relay.reshape(var_287.astype('uint64'), relay.shape_of(uop_282))) # shape=(8, 10, 12)
uop_291 = relay.sqrt(uop_280.astype('float32')) # shape=()
var_293 = relay.var("var_293", dtype = "float32", shape = (8, 10, 12))#candidate|293|(8, 10, 12)|var|float32
bop_294 = relay.logical_and(uop_282.astype('bool'), relay.reshape(var_293.astype('bool'), relay.shape_of(uop_282))) # shape=(8, 10, 12)
bop_297 = relay.minimum(uop_280.astype('float32'), var_235.astype('float32')) # shape=(8,)
uop_300 = relay.cos(bop_297.astype('float64')) # shape=(8,)
uop_302 = relay.tan(uop_300.astype('float32')) # shape=(8,)
bop_304 = relay.subtract(uop_302.astype('uint64'), relay.reshape(var_235.astype('uint64'), relay.shape_of(uop_302))) # shape=(8,)
var_307 = relay.var("var_307", dtype = "uint64", shape = (8,))#candidate|307|(8,)|var|uint64
bop_308 = relay.bitwise_and(bop_304.astype('int16'), relay.reshape(var_307.astype('int16'), relay.shape_of(bop_304))) # shape=(8,)
uop_311 = relay.asin(uop_302.astype('float32')) # shape=(8,)
bop_313 = relay.floor_divide(uop_311.astype('float32'), uop_271.astype('float32')) # shape=(8,)
bop_316 = relay.mod(bop_288.astype('float64'), uop_226.astype('float64')) # shape=(8, 10, 12)
uop_319 = relay.atanh(uop_311.astype('float32')) # shape=(8,)
output = relay.Tuple([bop_239,bop_247,bop_266,uop_278,bop_284,uop_291,bop_294,bop_308,bop_313,bop_316,uop_319,])
output2 = relay.Tuple([bop_239,bop_247,bop_266,uop_278,bop_284,uop_291,bop_294,bop_308,bop_313,bop_316,uop_319,])
F = relay.Function([var_231,var_235,var_255,var_287,var_293,var_307,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_231,var_235,var_255,var_287,var_293,var_307,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_231= np.array(1.175042, dtype='float64')
module1.set_input('var_231', input_231)
input_235= np.array([5.638383,4.598541,3.598720,-0.989543,-2.767096,4.601736,8.212665,-9.856112], dtype='float32')
module1.set_input('var_235', input_235)
input_255= np.array([[[0.655336,7.439870,5.439834,2.001079,-2.779782,1.756918,5.176162,7.155264,0.471570,-1.790001,1.665511,-5.026730],[4.770442,6.229720,4.346000,8.656090,4.420154,-2.700982,-1.168153,-8.602593,-4.496828,7.644799,8.244706,-0.236956],[5.168252,4.057212,-5.262059,-3.674194,-0.411030,-4.485939,8.155099,-0.599111,7.286018,6.038114,-4.365584,-9.328248],[7.339321,-4.431864,-8.155790,-3.783711,8.099283,6.850111,2.301672,6.450014,6.469056,-6.177748,1.999455,-1.927411],[8.010363,-9.076349,2.077426,9.689251,4.570152,4.649158,-7.524989,5.488619,-6.802991,7.988132,0.336757,6.214578],[9.423653,6.187499,-3.420083,7.747032,-7.139156,4.860695,-7.969553,-2.838546,-5.085281,-6.351224,7.433113,4.328204],[-0.083097,-1.333813,8.980764,-2.680303,2.810668,-3.979395,8.305385,0.672806,0.861529,-5.105261,2.134347,3.942903],[-2.922629,8.309874,-5.386128,4.288179,6.883570,-2.836353,6.356434,5.888943,-8.645915,-9.055606,6.870305,1.200831],[-3.461358,1.869271,3.650816,-8.870665,-8.399244,5.149589,-2.091918,6.211143,-1.607527,-1.684697,-7.745126,-5.639481],[6.549119,4.046598,0.149020,-7.922597,-2.695019,9.980528,-2.202165,4.422480,6.996803,0.093686,-3.242271,-8.864513]],[[-0.381331,-0.380077,-7.086345,-8.277727,-8.967901,8.797431,-9.812821,0.464118,2.584966,-4.359611,-3.054587,-3.268234],[0.320561,2.984466,-7.798453,-3.906980,0.707610,3.215800,-4.415385,8.689493,6.497771,-2.632042,-0.296488,-1.221217],[-7.966033,-1.489312,0.467443,0.690751,-8.758007,-4.396577,-7.615959,-5.572920,9.160938,7.510647,0.985824,-7.653942],[0.720706,-2.619392,7.570284,6.346913,-4.233026,-2.754201,-5.876625,-9.291965,5.713254,4.706167,4.491598,0.479234],[-8.075803,-4.888538,2.393783,-1.095356,0.166140,5.025905,-5.438585,2.220824,-2.725761,-0.134837,9.791583,4.707008],[5.998129,-9.822717,-9.674007,2.808298,-4.006835,-7.531275,8.909740,2.649813,-9.933714,4.386163,4.458188,0.306856],[-1.659022,4.095953,-3.004562,-5.903130,9.089539,-8.973920,-6.196657,-6.226191,-2.259569,7.995046,-3.228896,-5.933173],[7.900413,9.292726,-0.395280,-4.618025,-9.711696,-1.315582,-8.644738,-7.736238,1.626222,-3.026714,-2.626277,2.292847],[4.309301,-2.648955,5.819419,-8.429490,-4.168397,2.791039,-9.455732,-4.201603,2.579251,7.873518,8.370433,-7.166373],[4.929991,6.839498,7.866928,-5.497162,3.766340,-2.262045,6.124517,7.722664,-2.283735,8.686247,-2.047774,7.135488]],[[-2.537892,0.752310,-9.537689,3.247721,-2.283935,-6.154857,7.351131,4.476170,1.852882,7.150079,-3.234428,1.887105],[4.921853,-7.998052,-6.336027,-1.059799,-9.680849,-0.595889,1.782395,-9.869891,-7.307873,1.447191,4.436747,-9.904178],[7.410663,-6.852256,-1.463786,-8.150113,-1.551313,9.932753,2.858117,4.037497,-4.150911,-8.401621,9.285168,8.946647],[8.899019,2.544976,8.299954,-5.154742,5.742312,6.898094,-7.203982,-6.452156,-9.002018,4.707517,9.270300,8.735932],[-0.598016,3.645780,7.552780,-4.824933,0.918370,8.248740,6.005274,9.830496,-1.800188,0.464273,8.710113,8.956925],[1.834771,9.210632,-3.864867,-5.568705,-3.670829,-4.094629,9.569844,6.395510,8.380164,6.338479,-0.018782,8.738937],[5.328049,1.515883,-2.914207,-9.632710,5.076836,-7.622787,6.674159,-4.584508,-9.850030,2.564038,6.074673,6.658044],[0.625395,-2.050770,4.528427,2.837492,-8.534745,4.387116,5.728231,-3.640511,0.191482,-2.313513,-6.457798,3.850687],[-5.516618,-1.377526,9.869308,-7.523221,-1.563868,-1.793475,-4.639105,0.649535,-4.603336,-4.094561,-4.464432,-7.866700],[0.333298,-2.959078,3.801319,6.201144,-1.677170,-9.822351,5.203727,3.779298,6.570534,6.721584,5.408225,-8.487190]],[[-4.280798,7.823917,7.748655,-4.316094,6.053512,-4.979841,-4.206347,-6.181638,3.179060,-5.991436,5.955892,8.288396],[3.606430,-0.489786,1.149199,-3.656320,6.981713,-3.484582,7.336773,-2.971032,-2.039832,-2.158353,-5.488831,6.329816],[0.943093,-9.273292,9.678660,5.726296,-4.193942,6.034778,-4.830610,5.657852,-4.170935,-2.777268,7.743021,-9.177007],[-2.347463,-0.649257,9.213660,-4.601377,-9.626817,0.654023,-3.391667,-9.352355,-1.398271,-1.371094,-1.315142,0.615961],[-0.064366,-4.341326,-0.031247,5.692913,8.465504,7.854923,0.419523,4.291603,-0.936861,-2.253628,5.661479,5.218742],[-7.634181,-3.393337,-3.128437,0.035773,-3.551662,-3.744877,-7.762390,2.589574,9.990864,-9.670835,-2.043266,-6.435808],[-2.091874,-2.065401,-1.516224,-2.635477,0.223343,6.101692,-6.573745,-6.994509,-0.183107,5.820341,-2.466215,2.897749],[6.681322,0.463751,6.513417,-5.395216,-5.858386,-0.362740,-9.045530,0.875303,4.516602,1.203242,-1.291893,-5.571109],[-1.793564,2.061634,-0.110070,7.768339,2.047705,-8.854362,-7.878206,-5.383587,6.465396,0.649448,6.066387,7.181303],[4.618504,-8.507433,0.183840,3.261423,-5.240370,-9.342433,0.121983,-6.736183,-6.201370,2.055056,3.337841,8.739030]],[[-5.043093,8.907885,-3.294804,6.480199,6.277345,5.644175,-7.594334,4.745771,5.823953,-8.575932,0.509680,6.433836],[1.737547,-5.213901,8.101984,4.580528,8.794705,6.608739,5.923656,1.786248,3.711976,8.042301,5.152898,-1.555026],[7.790845,7.107086,-9.692643,-9.019936,-2.152759,-7.640266,9.888269,5.336468,-1.856505,-2.730293,1.056218,6.601836],[-6.532903,4.200861,6.915763,-9.677870,-6.341294,1.650630,5.584837,-8.478701,-8.139581,9.433542,-5.501815,-0.525668],[6.795419,-6.414260,6.393639,2.776986,5.812034,9.153764,9.361273,2.952117,-4.578172,-5.494089,-5.492382,6.745444],[6.251393,-5.381233,4.668275,9.915658,0.174603,-8.070448,5.043884,-7.892864,-1.755076,2.714857,-5.232792,9.328335],[3.039594,-2.333872,-2.558733,-5.217226,-5.407254,4.379235,-4.469682,-5.253662,-8.027536,-1.147506,7.426979,-6.135994],[-6.099735,2.716657,-1.677895,3.911823,-2.830470,-6.589001,9.011332,-1.044773,3.325615,-9.424064,-7.736189,-5.838101],[7.631858,-7.123082,2.291725,-9.631186,-5.836843,-7.281681,-4.566622,-0.237599,5.481120,9.395637,-2.827159,-6.913673],[5.624645,7.720761,-5.013202,-5.962794,-2.670146,-9.048145,-4.147559,3.834766,-4.488256,5.964262,-0.328484,1.499174]],[[-0.814141,-5.987180,-9.085692,7.791404,7.302480,-1.035539,-7.638575,5.734147,1.823317,-8.501074,-2.845719,8.198938],[-1.383166,3.004615,-9.243868,-5.929993,2.433283,4.772359,-8.567039,5.789846,0.508643,6.376101,8.040246,-1.968589],[-1.356169,-2.121064,4.460331,5.729617,-8.779869,-2.619315,1.430504,-0.354373,6.638725,-2.464468,-3.614805,-0.371032],[4.876697,5.487984,-6.031308,-1.939117,-3.440477,-5.858084,-2.332677,8.496619,-2.951932,5.468278,2.477959,8.168832],[-4.801051,-4.527045,4.973138,-8.349155,-7.675175,8.574872,-4.255563,8.131821,-7.875356,-0.033650,3.112482,-7.730088],[5.779170,5.891122,2.423045,7.036684,-4.208342,-6.849129,-2.170017,6.557359,-7.946473,-5.509292,-2.755894,7.199157],[5.134454,7.013581,-2.237411,-3.051372,5.956243,-2.410715,-4.337545,-5.600974,2.290849,6.432445,-6.406172,-6.243112],[6.661439,9.300311,-7.907137,0.945193,-8.536893,-3.866896,-0.339787,-6.304654,-1.791421,-6.049267,-8.035084,7.127201],[2.402852,-2.459682,4.932517,-9.710257,3.341872,-4.060871,-8.186026,6.137673,-2.422634,6.090804,-0.345202,2.590529],[-2.064012,-3.666348,-7.518200,-4.448223,-2.190540,8.517241,5.187763,-8.454419,4.488768,-6.941104,-3.107526,-6.882399]],[[8.006991,6.649791,6.806914,-9.588498,-9.614594,4.828421,0.532924,-4.162320,-8.003668,8.594085,3.795066,-5.718794],[1.019243,7.395653,-0.416277,-0.115848,1.679827,2.264001,-2.852758,5.750934,-3.108843,-2.736169,-3.630051,7.647522],[-1.903809,8.578041,9.934905,6.461512,-1.706303,-4.774673,-4.268130,3.864601,4.688529,9.412781,-6.862717,-5.828704],[1.480463,-3.587156,-7.519388,-1.399452,6.492278,-0.804144,4.194833,1.609018,-7.487107,-2.906366,-5.980166,9.798195],[-4.309885,-7.018618,3.384252,-4.830313,5.709936,-4.410149,-8.624802,-1.720073,-5.125870,-1.225571,-6.687863,-7.679966],[-7.325179,-0.902873,-0.858942,-1.881211,-2.265867,5.421878,4.036216,-5.084506,6.150127,-9.052971,7.797913,8.354413],[-3.676485,8.581381,2.410355,4.334329,-4.443595,-6.556672,7.487587,6.099520,0.178195,6.637248,-4.438513,2.329396],[8.886836,-1.982478,7.653569,-0.911373,8.536635,-4.889612,7.306813,-9.751281,9.644233,-8.512847,1.702843,-6.302491],[0.335655,-1.181040,6.636050,1.803687,7.139025,3.605658,4.613439,-2.083150,3.957896,2.843326,7.527782,-4.871652],[-3.498223,2.723188,5.797002,7.906239,-4.972170,-2.651563,1.089737,-1.040671,1.260357,4.756940,2.555748,-9.600813]],[[9.384483,-3.503534,7.118319,7.513505,8.450446,-6.312735,1.628795,2.876581,5.832495,9.877904,2.160141,3.179462],[-0.406318,5.906488,1.913540,-4.972322,4.610403,4.041682,-3.097179,8.771329,2.576937,-0.429381,2.623006,-3.623866],[4.993141,7.649049,6.547666,-4.635948,-5.045688,-5.926039,4.756522,-5.461682,5.861639,5.249875,-8.985845,2.065847],[-0.366491,-2.783650,-4.584083,-1.923614,3.957245,-3.331754,2.723992,-8.922018,4.892346,9.674584,5.212500,9.863967],[1.536953,-6.944425,3.728280,2.665940,6.227569,4.830351,2.867560,-0.450829,-9.446707,7.730530,9.557661,9.045627],[-7.529110,1.426222,-0.939341,-8.488276,4.797261,0.227039,7.229092,3.525754,8.057272,-8.298970,-0.544917,9.986039],[0.995778,-3.571195,-7.165298,3.474280,-8.686261,-4.222791,-7.720892,-4.547990,-0.063443,-2.231365,8.723680,-4.269469],[6.973012,9.230623,5.600322,-0.826010,1.044036,2.304326,-3.142539,1.009707,3.187158,3.119743,-3.350641,-6.974939],[4.255910,-6.760440,-5.778168,0.731535,1.348805,9.514060,4.999585,-9.370887,8.063012,-1.947512,-0.694509,-5.951250],[-1.102704,1.453190,-0.259376,5.013426,8.925998,-4.800395,-7.652827,0.320183,-5.943761,6.654347,-2.297902,-9.646946]]], dtype='float32')
module1.set_input('var_255', input_255)
input_287= np.array([[[7.953181,7.100893,-1.406554,-6.707960,9.073207,-4.613837,9.493615,7.178010,0.734502,-5.957083,-6.085563,-9.211305],[-0.299630,-2.460347,7.497080,-6.176306,-9.142285,-2.491404,-1.764803,9.478589,2.934290,6.182574,2.487647,8.275208],[-5.956208,-7.190399,7.222830,4.864792,-7.790024,-5.958400,-2.223639,0.205445,-7.667915,-6.365391,-6.219225,-2.179484],[3.268929,-9.027371,-4.762393,9.129153,6.885228,9.368920,-1.208254,-3.685992,6.357039,-0.419773,-0.153009,-3.233214],[-1.507232,9.727344,-7.808788,-0.532724,5.586747,-1.837499,-1.040891,-4.781656,1.124260,-0.795840,-0.033474,5.089404],[8.905704,6.144285,5.386505,-4.021155,-2.413110,-7.279519,5.774719,-8.091391,8.606576,-4.692040,9.845909,8.551786],[5.582663,-7.801914,-4.370012,4.279351,-7.772510,2.538847,-7.831550,6.370196,5.422053,7.699385,-5.979702,1.344844],[-1.852453,7.256190,-8.621327,-7.629105,-7.656333,8.719521,-4.960010,-6.052589,-3.158281,-9.252770,2.343120,6.992974],[4.202454,7.124275,9.937243,6.869753,-7.305243,4.627865,4.985735,-2.111921,-1.466027,0.260775,-3.894848,8.819923],[4.785746,3.970014,5.074420,-9.931315,0.706643,-5.368097,-3.037588,-1.585757,-2.034186,-3.561739,-7.780000,9.401328]],[[-6.758863,8.959770,-7.215756,9.494714,3.760245,-2.149750,-1.862242,1.436082,-2.540691,-9.050714,-0.654796,-6.016221],[-0.342857,-6.471282,7.640682,5.938841,-6.942243,2.279802,-8.996970,9.652016,6.659970,-6.827290,-4.498040,-5.373451],[-0.080185,4.442110,8.558090,3.118655,-8.479633,-6.783607,-8.093107,-1.103863,0.778071,0.176311,-4.598151,9.015751],[8.234955,2.452956,8.861457,-1.448988,-5.331233,-9.055281,4.390629,6.709390,-4.371218,-5.348170,-0.373658,7.477082],[-7.445651,2.503696,4.196847,-3.076103,-7.630596,-7.342242,3.737121,3.013440,2.154900,-6.284803,-6.894884,-8.089903],[7.936211,2.614881,2.187553,8.533362,5.285103,6.455739,0.944469,1.401031,3.807669,-0.799395,8.871684,2.180505],[1.464387,7.821913,0.684846,-7.509337,-0.864039,-9.722525,8.549421,8.655815,-4.101440,5.332322,8.397063,-5.585833],[4.227082,8.204689,-0.146772,9.819128,-5.713868,0.164239,-3.586862,7.109320,8.143205,7.267940,0.851907,-7.861910],[3.239239,-9.689544,-2.984025,8.441181,0.633144,-0.820114,1.630057,9.615649,9.617545,-0.586022,1.191623,-1.610191],[6.349210,8.871063,4.809067,7.476093,7.687823,5.612509,-3.912231,4.243394,8.193723,6.791369,7.569986,3.682624]],[[-0.061528,5.943708,9.754967,-3.930678,7.028904,3.545713,0.707170,0.061033,-9.887559,4.558482,8.538037,-1.177944],[-1.766877,-3.340591,7.880181,-2.544814,0.428449,9.161119,-5.725095,4.486247,7.569165,-5.120184,5.344371,4.382834],[-4.609767,-2.530466,-9.739608,-0.469913,8.783709,-2.352090,-1.806280,-7.357749,-3.444970,-5.845879,0.845652,-2.494955],[9.698508,-8.659946,-3.220976,-9.963295,-5.492988,9.247948,-3.381544,6.945546,-6.364137,-8.830217,5.859167,-6.008569],[-5.753305,-3.580784,-2.817485,-1.781731,4.857939,8.755189,-4.314248,-0.571966,-5.168642,6.987606,0.351961,-6.067457],[0.097186,6.039549,3.164242,-0.734801,-7.559088,-7.750309,-6.247177,-9.040463,9.322849,9.977146,-0.632716,-4.308539],[5.680972,0.889496,-9.725634,-8.994866,-2.848605,-1.398943,6.242447,6.506199,4.095904,8.156292,-0.553774,1.400982],[0.438721,5.991206,-8.897941,-0.577211,-5.461579,5.999595,-3.974261,-1.759504,5.573955,-3.637807,1.304707,-3.786910],[0.317369,-5.243658,-7.496233,0.602417,2.502600,3.163713,-0.017321,6.538035,1.709177,-6.558192,7.178692,-4.401575],[2.113263,4.361531,-6.259232,-7.176685,5.595204,9.173491,-3.593555,5.677892,5.962299,-6.818002,4.182055,-7.338193]],[[-2.974259,-5.750298,1.554519,-8.469694,0.717273,-8.210775,1.458824,-6.156625,8.782996,-7.808668,-3.059492,0.983618],[-7.869162,-2.968956,-9.250782,-1.297368,3.585137,-1.124985,5.401628,9.194108,-9.455090,-2.491869,-1.825500,1.924281],[-4.842167,-3.878790,9.883425,4.081300,0.348315,0.313732,-6.587629,-1.318411,-8.460780,9.604794,6.219914,3.234953],[-2.722871,3.963474,-7.018191,-0.695107,2.602566,0.553168,0.986323,-5.359174,-5.759982,-7.670400,-0.621452,-2.668075],[9.595713,-9.359626,2.915406,-9.659372,-2.137283,-3.393706,-6.019340,2.679473,3.441837,2.201033,8.605579,6.298587],[2.707066,0.699692,-5.944276,0.189972,9.528562,-9.246999,8.285345,-1.927445,0.238038,-4.518800,9.360035,5.509415],[-0.344585,5.324053,-3.314735,-2.494981,-2.554237,2.861643,2.933578,-4.830012,3.014269,7.604529,-7.575325,-7.080794],[7.129445,1.261509,-9.244240,1.640484,6.430874,2.898259,-2.827184,-5.644517,9.335775,5.418243,-7.339767,0.975962],[7.466071,-4.925884,-8.060085,8.280615,8.230457,-7.473535,9.214402,-2.618973,4.657405,-6.035581,7.235303,-5.330829],[7.773191,-7.849089,-3.944715,2.285352,-1.046162,0.087868,-7.990980,-9.792519,7.482035,5.022057,5.017842,-4.206233]],[[0.760744,-6.851741,3.758565,5.988098,-5.864098,-6.945837,8.327546,-1.607027,8.259904,-0.606831,-5.325882,2.753868],[-7.954317,-6.806779,-8.137635,-1.291003,-6.272724,8.393988,6.886906,-4.019944,-6.704720,-6.069537,-0.643111,8.988828],[-4.484806,8.696279,6.940050,9.029801,7.366634,6.013529,-7.114950,-6.964608,-2.507618,-9.160259,-3.671005,8.845432],[6.670207,9.021332,5.641784,2.893734,-4.042748,-1.637710,2.422463,2.052150,-6.636487,-8.029687,-1.781650,5.066841],[-3.897181,1.109669,-9.257133,7.228504,-3.600359,8.768621,-4.727878,-3.819388,0.015616,-6.472265,-9.610337,8.746065],[-4.088318,7.707743,-3.092108,3.428788,-6.763698,-8.120277,7.881905,-4.298135,-3.207845,5.791525,-1.642443,1.484696],[8.413680,-9.610812,-6.973256,-7.497991,7.635951,8.442860,-1.299733,3.235030,4.112878,3.945328,2.075230,0.507950],[0.088720,-5.471889,-9.406890,7.647309,8.787642,2.372327,5.510369,-4.875767,4.977104,3.970781,-9.557750,-7.472266],[-7.698182,6.190434,7.685513,8.274917,1.485113,-0.390197,2.869657,0.462664,7.010762,-4.497121,-1.263275,3.364739],[8.575955,0.054722,4.041099,0.169057,2.525852,-2.730767,6.328204,3.655716,1.215123,-2.250177,0.638143,-2.432970]],[[-0.905199,-5.589156,4.721866,-4.755440,-8.661055,0.046293,8.187042,4.488032,5.010901,1.847042,2.496357,3.499920],[-3.177547,7.003444,-8.382582,-6.627626,9.340733,7.731221,9.790867,2.684288,-3.281469,1.615570,2.189935,-6.378022],[-2.818374,-2.232476,1.156627,4.129810,0.665848,3.880231,-4.638908,8.396988,-1.198422,-1.084840,-8.848344,0.639340],[-3.231029,1.100276,7.314947,-4.658276,9.650562,9.762517,1.248982,4.997183,-4.138071,-3.578324,-9.190884,-7.146616],[-1.711995,-4.853554,-1.373633,9.721177,0.013662,-3.124663,1.422138,-9.908612,0.273546,4.917752,-4.237017,-9.806929],[9.143896,6.678467,-9.467631,3.089221,7.469368,5.180639,9.597101,-1.094082,3.624289,-8.553784,-0.472514,-2.141543],[-4.591115,-8.715417,-7.815784,8.020406,6.072689,8.554948,-8.419852,-8.222208,4.215670,5.857178,3.478046,2.503624],[9.142540,7.565778,-7.255484,7.130243,5.169711,-6.046486,-4.769474,7.001498,-9.813127,1.893814,4.001132,-5.164541],[-0.135128,-3.557739,-3.581424,-8.033429,9.630795,8.130731,4.237906,-8.874218,-5.336268,-7.873527,6.313476,-0.998240],[9.215553,-0.148680,4.530296,9.862266,0.310646,3.914236,7.114579,7.710857,0.435670,-3.842461,7.428493,1.470285]],[[1.249777,9.755517,-5.936659,3.150691,9.990991,-4.914495,-7.406506,-4.549068,0.568627,0.210510,-3.262528,7.612064],[6.217618,-5.878614,4.951077,-7.849151,-2.848103,5.812733,7.634242,-5.138074,-0.048048,-5.740238,-1.897179,-5.170309],[-0.459936,-8.929856,-1.821146,9.470347,0.005767,2.125445,3.995207,-9.135404,2.711568,-6.014263,-3.448049,2.448759],[-4.228677,4.264852,7.789404,-3.206331,-9.724650,-0.842121,6.930026,-4.890545,1.727583,9.454045,-0.467395,-2.128613],[3.361460,-7.781761,0.496016,-5.280694,0.160512,-2.478021,-7.776433,4.667753,2.676505,9.220204,9.260582,-8.187652],[6.680756,3.055991,2.030851,6.528352,8.290422,-4.342732,-5.396448,-7.526640,-1.663415,-0.926392,3.085638,4.747151],[6.892543,2.978382,7.290440,7.674979,0.715325,-1.251929,6.784277,9.896605,5.431521,6.843219,4.034677,-0.420716],[9.111623,-6.880918,-4.415001,7.423373,-5.483889,-4.930134,-1.125604,8.944419,-4.555397,-8.216280,0.992226,-9.760211],[9.985246,-8.485157,1.944904,8.203033,9.351560,-9.868160,3.910140,3.022743,-4.053427,9.263881,-6.622467,6.993955],[-7.652199,-0.055214,6.787452,2.620972,-1.341923,7.581382,-6.897531,-3.132100,-6.428117,6.715993,0.209760,-0.729914]],[[-6.944931,-5.659930,-8.757951,1.168789,-8.564966,-7.490449,8.070084,-5.419785,-0.359109,9.027367,-6.663638,-1.945671],[-7.992643,4.447037,0.891757,-1.415977,8.212023,-3.025863,-0.075033,4.976727,4.691494,-1.831506,5.827805,-9.657482],[8.937255,-7.972887,-9.534787,-6.371398,-0.099252,-5.106887,9.505934,2.556926,3.001215,-4.473809,9.127152,-4.528938],[-9.030598,9.523196,-3.062536,8.018622,-0.794251,8.479634,-2.435601,3.163466,3.530775,-4.770937,-8.217618,-1.620019],[9.131674,7.355261,-2.318031,8.444999,2.033369,-2.714097,2.084729,0.400432,3.852183,-2.727969,-9.306536,-8.673685],[1.790737,6.633827,-3.895279,9.706661,-5.426529,-2.643060,2.538761,2.504430,9.839889,-7.728672,1.298264,-8.626908],[-9.984078,3.036203,-2.861538,2.958032,-8.709897,-8.780848,-8.283423,8.900930,-3.883272,9.407769,6.437492,-4.921324],[-8.690344,1.723833,-2.926762,-8.908522,-9.028800,-5.060679,3.176210,-5.854499,-6.508717,-5.873403,5.948845,9.231294],[0.563378,8.850133,-1.212696,3.169285,-6.419236,-4.832459,-6.275973,3.881177,-6.773343,-3.919583,4.137353,-4.571347],[4.231155,-1.258576,-2.438888,-0.322805,-7.437842,-5.186647,-0.465318,1.341979,0.413605,2.881769,-0.919522,-5.107990]]], dtype='float32')
module1.set_input('var_287', input_287)
input_293= np.array([[[-6.195133,-4.945234,-5.575821,0.989426,7.564563,-8.218622,-6.181596,-7.886832,-3.030956,3.391166,-7.610773,4.882065],[-5.887207,-5.626164,9.884995,-8.584172,9.834134,-4.208064,7.336199,9.038617,9.944571,-1.049356,-9.584318,1.714352],[1.048736,0.820234,0.672343,5.059929,-2.124752,6.132333,7.652054,0.470075,-9.186970,-8.740496,-8.060931,9.351063],[1.895010,4.211569,-4.591970,-4.925892,4.976567,7.375027,-7.145126,-7.416942,-1.611560,-1.094075,7.535252,-7.659380],[5.866392,2.996796,-3.207738,-2.981264,-7.704646,-6.489252,-8.047465,1.856218,-8.478651,-2.951057,9.717561,5.175394],[-9.701653,7.399030,-3.518130,-1.596634,-9.262956,8.045199,-5.476591,-5.504036,1.053253,9.642549,4.217918,8.125483],[5.574142,-3.456064,-8.241572,7.814247,-4.160286,4.603044,-2.225470,-9.334691,4.978719,-6.359564,6.515202,4.160640],[7.588117,-6.920935,5.615958,-6.727723,-9.447314,4.384694,1.873037,7.522913,-2.405898,-7.264566,-2.175778,1.989032],[-5.605758,0.655010,2.347846,-3.360282,4.899844,3.234945,-9.923834,-8.261701,7.463723,2.816569,-7.378172,-6.626543],[4.683683,4.511569,2.017600,-0.138472,-6.988543,-3.486754,-3.045955,-2.908617,9.528690,-0.422690,-3.199047,-1.526954]],[[-6.587142,-5.370879,5.658656,5.095701,6.832416,-0.048959,-0.039925,-8.078296,0.735255,-2.435374,0.012684,6.247447],[-0.802954,-6.417285,-5.728346,-7.086133,-9.570061,2.305104,3.417885,0.108203,-9.693678,-7.805233,-0.961299,4.218340],[5.086363,9.388511,2.556221,6.803500,-8.783328,-0.234421,7.951410,4.503918,9.562759,6.209543,-1.817186,4.192729],[-9.135914,8.091718,-4.563598,-2.857114,-8.806674,-7.057586,4.828445,4.779896,6.132100,-0.629456,2.201209,-5.201281],[5.642967,1.504081,-1.020849,-9.924307,-3.584452,8.003710,-8.428612,-2.743149,3.551414,-8.412938,0.431224,-5.358455],[0.759698,8.791737,9.211096,9.963021,3.546969,-5.085340,6.957064,-2.250333,-9.875422,-7.237860,-8.148764,2.936992],[1.413060,-4.793524,3.750800,6.726272,1.188315,0.353438,3.340876,7.581396,-0.816078,-5.865767,-9.729726,6.754116],[7.157754,-7.620562,7.074095,3.758418,0.343646,5.554949,4.916222,-5.922335,0.783334,5.347485,-1.409026,3.765063],[-6.748322,1.890638,-8.688172,1.942261,-7.294411,0.756996,6.889934,6.870807,-7.977170,3.776302,7.257383,8.172171],[-3.957741,5.053042,7.811905,9.328210,4.262825,4.928754,3.943842,8.011857,-8.375070,3.899112,1.285651,-8.233097]],[[9.350897,9.298249,8.349645,7.524147,3.140611,6.706775,3.568526,-7.947182,4.090377,2.641020,-6.844832,-5.851358],[3.450082,-2.475603,-9.247733,0.183633,9.798275,2.586517,1.310996,-8.490089,6.114252,5.342571,-1.864738,1.211389],[6.837684,-2.279133,6.094990,-1.180829,0.276745,-3.426791,-8.893743,5.097962,-1.634911,-2.114389,-1.855491,2.436056],[-1.252906,-4.814312,-4.053302,-9.888612,-6.382656,-8.542830,-2.909663,9.357940,2.918836,2.250515,0.402030,9.253421],[8.589835,7.170322,-0.294936,-0.017536,7.814104,9.937229,-3.630584,-8.190956,5.266371,2.233718,0.681576,4.315210],[-9.122375,-6.241070,1.712264,0.969084,-1.180593,-4.138194,4.233805,6.288536,-5.316404,2.522851,5.496379,3.695746],[-1.981165,-2.528839,3.011605,-2.177735,-1.937825,9.955895,4.584363,7.391855,5.999697,-0.083126,-7.407124,-1.067598],[2.710987,2.243275,8.411948,9.569312,6.795777,4.375569,0.460627,-7.997061,6.801746,5.040720,1.422875,-2.721767],[3.934789,9.138086,-2.560330,-0.446700,6.106874,-2.387508,-7.629885,-0.403290,4.859183,8.167288,-6.062021,9.657749],[9.579528,-3.488525,5.144381,-3.782407,2.544809,-4.401414,1.908252,5.210193,-5.716432,7.092054,2.828537,9.739808]],[[8.667036,8.663655,-3.817682,9.362066,-0.258227,-1.333572,-4.820948,-0.248099,6.933967,-7.969554,1.029487,4.493575],[4.305815,-3.164368,0.647992,-5.365561,-1.080943,-5.798973,-6.534748,7.593536,1.511905,-9.952906,-0.540523,5.056026],[7.256846,-2.572916,-6.825351,-6.449422,-2.669033,-5.524063,-0.121962,-6.801128,3.311341,-6.022695,4.489706,-0.868292],[5.607430,-9.759480,3.136957,9.182039,1.824705,8.929651,-7.540993,-6.694236,-0.882907,-2.687607,7.697906,-6.091812],[6.764751,-1.449222,-6.485632,1.010940,2.484836,9.973591,8.716349,0.309418,-1.966052,-1.192026,-4.065987,9.075010],[-2.629090,-1.309475,-8.795139,-0.640277,5.915512,-5.784113,1.944792,9.690167,-6.259550,3.670441,-0.646898,-2.210315],[4.875595,4.598016,4.504697,-6.008669,-5.056197,2.318762,5.446156,-6.489072,-6.312185,-4.352360,-2.775522,-1.961209],[-7.880939,-6.762313,-7.279655,3.109715,-8.593253,-9.458888,0.064903,2.861563,0.979449,6.040725,-6.126047,4.430244],[-7.928445,-1.978806,9.720775,1.411973,-7.297929,-3.437268,7.882294,-7.284041,-3.786062,2.479888,9.231400,0.427619],[-2.509683,-5.801570,-0.123310,3.376760,5.242678,8.658206,9.647858,5.377875,2.562777,-4.086255,8.148327,-2.317079]],[[1.973488,-7.498210,-1.560827,4.907368,-1.826865,3.926385,6.455411,5.918336,-6.547675,-8.961848,-5.420443,0.225350],[9.864125,-0.947692,-2.040221,7.118548,-5.913653,-4.595656,8.890637,8.117549,1.619129,6.019006,-2.378190,-3.899939],[4.073628,-1.021644,-5.277498,3.603104,6.485659,-1.710233,-2.335264,-1.495407,2.616999,4.925877,-3.588940,-3.504531],[0.005121,2.637177,9.425402,-0.336732,-3.117145,-3.836117,-4.286528,-6.097434,8.670554,0.104854,-4.257240,-9.414748],[1.176967,8.398394,3.739475,3.969991,7.137892,-9.056213,-8.094797,9.039793,3.880039,0.496374,-0.127925,1.821353],[5.931404,1.183727,-5.277568,2.911578,-0.564541,-7.331216,8.130257,-9.902877,-8.188867,6.874867,-3.265344,4.952054],[-9.526221,3.632996,-4.671520,-1.019668,-1.062756,-1.266336,7.235252,-5.421899,-6.821799,0.441101,-2.222861,-4.863768],[-0.740112,-0.306737,-5.205052,-6.200583,-5.264193,3.954633,3.157836,-3.697118,-0.506627,-0.527915,0.764542,9.496156],[5.334124,2.347701,-2.250740,-6.824746,0.916794,5.016262,-8.464233,-7.019556,-6.558499,-1.395026,2.619455,6.422143],[7.281343,8.353295,-1.464695,-9.631923,-2.758676,1.279577,7.504753,4.763649,-5.636421,-8.462427,9.063076,-0.417085]],[[7.721238,4.109228,0.881805,-9.740329,-7.211851,4.072163,-3.396926,5.946235,0.893651,2.477964,-3.270170,9.350876],[-8.603104,-0.132483,-0.838639,5.524414,0.308188,-8.785986,2.264224,7.290730,5.322286,-9.578656,-4.333619,-8.189077],[-5.233171,-7.070118,-1.587040,-7.411583,5.956470,-6.179559,9.202995,6.920609,-2.683683,3.299765,-8.703889,-3.254642],[-7.133786,4.563196,-6.211461,-5.440645,-4.820256,6.356385,0.691717,0.724268,-0.267962,-8.218158,9.580272,-6.837573],[-1.053324,1.546203,-5.352288,-8.810835,-3.473614,2.467378,8.337732,2.978711,-6.302164,-4.609261,-8.713657,3.954998],[-5.906487,-9.298938,0.873530,7.273803,0.489355,7.163456,-9.207861,-2.347674,5.660914,9.534303,3.291969,-3.684129],[-3.727320,5.272524,-2.646154,3.509909,7.924009,-5.867276,1.387560,-7.632290,-7.979596,-8.613948,9.379129,5.961737],[7.565912,6.760283,-6.714170,-2.302958,-3.962009,0.146998,-5.124445,6.583628,9.009511,5.315804,-2.614312,0.649450],[0.898393,1.866896,-5.419540,4.881437,-5.387496,-6.282393,1.702063,5.563766,3.909812,-9.823816,1.642755,2.580113],[-3.338292,5.987255,-2.821399,8.440554,6.858589,-5.047218,-3.776511,4.213874,-7.239142,6.626917,-1.438539,1.815344]],[[3.573005,-7.803011,-0.553930,5.546166,-0.502959,3.217290,1.516746,-9.985510,5.977181,-8.252263,-7.477686,-0.579993],[-0.777134,-8.226083,-5.993406,-3.031513,-0.010324,5.677302,-6.786072,2.127840,1.763696,9.480742,7.422663,3.869771],[-7.077152,-8.806021,5.111869,4.508840,-0.831763,8.514698,7.603590,4.528510,-2.468446,-0.020456,1.536232,9.388812],[-3.219398,-4.592961,-7.488835,0.366594,9.758675,5.837313,-5.859766,-0.090699,4.837480,-0.633359,5.356252,-6.433021],[-9.284512,-9.331654,-8.192274,-2.464150,-4.197551,-2.660310,3.102263,1.164056,-4.794134,6.428901,8.935288,7.339531],[9.947810,-9.881172,4.668231,-2.321993,1.385607,-1.646288,-8.001035,3.745053,9.677207,3.183255,3.834460,4.174908],[-6.668947,-8.812019,6.582749,-5.053242,9.124769,5.037783,7.575493,-1.704556,3.641867,-8.020904,-6.288526,-9.184008],[5.782152,-7.577958,7.307155,-0.077289,-1.098153,6.266830,5.736885,0.016707,-5.416314,0.305021,-9.616314,8.889393],[-4.588975,-2.389321,5.062875,-2.058837,-9.969166,0.357940,8.581139,4.405812,-5.882618,1.123921,-1.409115,3.548044],[5.850071,-1.365770,-3.250768,8.128804,5.273514,9.706160,9.644164,-2.124661,-4.757154,6.932030,3.168412,-3.121610]],[[1.648822,4.008335,-9.806388,3.221957,-6.472364,8.700708,5.232550,2.468130,-3.225808,6.970492,0.473501,-4.926309],[6.523657,6.219398,-1.166450,-5.123331,9.652477,-2.734980,-5.791966,7.473415,2.000658,-0.389540,-7.406003,-3.082737],[-2.871973,-1.513910,0.621598,-2.653351,-4.313572,9.658324,1.506652,-1.600482,-1.051153,-7.253493,-5.390422,3.616421],[-8.416436,-1.892227,3.560475,-1.857378,-4.922622,3.810939,9.297900,-6.290779,8.717439,-0.154838,-2.125402,1.367431],[1.975164,2.361870,-8.184016,-1.513377,-7.585049,8.469549,8.851311,-0.526103,-8.531531,7.605766,9.473090,8.751702],[0.984131,3.104980,-5.246033,-9.524555,-8.906271,-9.467865,-9.554701,1.044118,7.547484,6.674820,-7.575629,2.027627],[8.567244,-6.431267,-8.690756,-0.847923,-5.611166,6.482539,-6.344649,-1.972757,-1.398845,4.444408,0.921669,5.805200],[2.062796,9.278827,-3.064877,-5.697932,2.423301,-5.020329,-0.013102,-5.841328,-8.019984,-5.276467,7.211400,0.027430],[5.665628,7.038151,-1.605819,3.181712,9.259753,8.283631,0.837847,4.395096,5.030344,5.181340,-8.036572,-1.546738],[7.953793,-1.340613,6.356764,-5.604702,-2.928978,-8.803500,9.602652,6.913109,-5.231792,-0.278833,-6.064807,0.824075]]], dtype='float32')
module1.set_input('var_293', input_293)
input_307= np.array([-6,4,-1,8,6,-7,-9,3], dtype='uint64')
module1.set_input('var_307', input_307)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_231, input_235, input_255, input_287, input_293, input_307, )
res3 = intrp3.evaluate()(input_231, input_235, input_255, input_287, input_293, input_307, )
res4 = intrp4.evaluate()(input_231, input_235, input_255, input_287, input_293, input_307, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
module5.set_input('var_231', input_231)
module5.set_input('var_235', input_235)
module5.set_input('var_255', input_255)
module5.set_input('var_287', input_287)
module5.set_input('var_293', input_293)
module5.set_input('var_307', input_307)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_231, input_235, input_255, input_287, input_293, input_307, )
res7 = intrp7.evaluate()(input_231, input_235, input_255, input_287, input_293, input_307, )
res8 = intrp8.evaluate()(input_231, input_235, input_255, input_287, input_293, input_307, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
module9.set_input('var_231', input_231)
module9.set_input('var_235', input_235)
module9.set_input('var_255', input_255)
module9.set_input('var_287', input_287)
module9.set_input('var_293', input_293)
module9.set_input('var_307', input_307)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_231, input_235, input_255, input_287, input_293, input_307, )
res11 = intrp11.evaluate()(input_231, input_235, input_255, input_287, input_293, input_307, )
res12 = intrp12.evaluate()(input_231, input_235, input_255, input_287, input_293, input_307, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
module13.set_input('var_231', input_231)
module13.set_input('var_235', input_235)
module13.set_input('var_255', input_255)
module13.set_input('var_287', input_287)
module13.set_input('var_293', input_293)
module13.set_input('var_307', input_307)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_231, input_235, input_255, input_287, input_293, input_307, )
res15 = intrp15.evaluate()(input_231, input_235, input_255, input_287, input_293, input_307, )
res16 = intrp16.evaluate()(input_231, input_235, input_255, input_287, input_293, input_307, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
module17.set_input('var_231', input_231)
module17.set_input('var_235', input_235)
module17.set_input('var_255', input_255)
module17.set_input('var_287', input_287)
module17.set_input('var_293', input_293)
module17.set_input('var_307', input_307)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_231, input_235, input_255, input_287, input_293, input_307, )
res19 = intrp19.evaluate()(input_231, input_235, input_255, input_287, input_293, input_307, )
res20 = intrp20.evaluate()(input_231, input_235, input_255, input_287, input_293, input_307, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
module21.set_input('var_231', input_231)
module21.set_input('var_235', input_235)
module21.set_input('var_255', input_255)
module21.set_input('var_287', input_287)
module21.set_input('var_293', input_293)
module21.set_input('var_307', input_307)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_231, input_235, input_255, input_287, input_293, input_307, )
res23 = intrp23.evaluate()(input_231, input_235, input_255, input_287, input_293, input_307, )
res24 = intrp24.evaluate()(input_231, input_235, input_255, input_287, input_293, input_307, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()

'''55: TVMFuncCall
54: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
53: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
52: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
51: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
50: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
49: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
48: tvm::transform::Pass::operator()(tvm::IRModule) const
47: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
46: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
45: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
44: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
43: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
42: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
41: tvm::transform::Pass::operator()(tvm::IRModule) const
40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
37: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
36: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
35: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
34: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
33: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
32: _ZN3tvm5relay9transform22Devic
31: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
28: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
27: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
26: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
25: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
24: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
23: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
22: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
21: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
20: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
19: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
18: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::te::Tensor, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
17: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::runtime::ObjectRef, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
16: tvm::LowerWithPassList(tvm::IRModule, tvm::runtime::Array<tvm::transform::Pass, void>)
15: tvm::transform::Pass::operator()(tvm::IRModule) const
14: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
13: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
12: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
11: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
10: _ZNSt17_Function_handlerIFvN3tvm7
9: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
8: tvm::tir::DataTypeRewriter::operator()(tvm::tir::Stmt)
7: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
6: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::StoreNode const*)
5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
4: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
3: _ZThn16_N3tvm3tir16DataTyp
2: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::DivNode const*)
1: tvm::div(tvm::PrimExpr, tvm::PrimExpr, tvm::Span)
0: tvm::PrimExpr tvm::arith::TryConstFold<tvm::tir::Div>(tvm::PrimExpr, tvm::PrimExpr)

'''