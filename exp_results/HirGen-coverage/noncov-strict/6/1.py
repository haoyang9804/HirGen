import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "int32", shape = ())#candidate|0|()|var|int32
var_1 = relay.var("var_1", dtype = "int32", shape = (6,))#candidate|1|(6,)|var|int32
bop_2 = relay.bitwise_or(var_0.astype('int32'), var_1.astype('int32')) # shape=(6,)
bop_5 = relay.greater(var_1.astype('bool'), relay.reshape(bop_2.astype('bool'), relay.shape_of(var_1))) # shape=(6,)
uop_8 = relay.cos(var_1.astype('float64')) # shape=(6,)
uop_10 = relay.cosh(var_0.astype('float32')) # shape=()
uop_12 = relay.sqrt(uop_8.astype('float32')) # shape=(6,)
output = relay.Tuple([bop_5,uop_10,uop_12,])
output2 = relay.Tuple([bop_5,uop_10,uop_12,])
func_14 = relay.Function([var_0,var_1,], output)
mod['func_14'] = func_14
mod = relay.transform.InferType()(mod)
var_15 = relay.var("var_15", dtype = "int32", shape = ())#candidate|15|()|var|int32
var_16 = relay.var("var_16", dtype = "int32", shape = (6,))#candidate|16|(6,)|var|int32
output = func_14(var_15,var_16,)
func_17 = relay.Function([var_15,var_16,], output)
mutated_mod['func_17'] = func_17
mutated_mod = relay.transform.InferType()(mutated_mod)
var_19 = relay.var("var_19", dtype = "float32", shape = (11, 6))#candidate|19|(11, 6)|var|float32
var_20 = relay.var("var_20", dtype = "float32", shape = (11, 6))#candidate|20|(11, 6)|var|float32
bop_21 = relay.mod(var_19.astype('float32'), relay.reshape(var_20.astype('float32'), relay.shape_of(var_19))) # shape=(11, 6)
bop_24 = relay.right_shift(var_19.astype('uint32'), relay.reshape(var_20.astype('uint32'), relay.shape_of(var_19))) # shape=(11, 6)
bop_27 = relay.floor_divide(var_20.astype('float32'), relay.reshape(var_19.astype('float32'), relay.shape_of(var_20))) # shape=(11, 6)
func_14_call = mod.get_global_var('func_14')
func_17_call = mutated_mod.get_global_var('func_17')
var_31 = relay.var("var_31", dtype = "int32", shape = ())#candidate|31|()|var|int32
var_32 = relay.var("var_32", dtype = "int32", shape = (1, 6))#candidate|32|(1, 6)|var|int32
call_30 = relay.TupleGetItem(func_14_call(relay.reshape(var_31.astype('int32'), []), relay.reshape(var_32.astype('int32'), [6,]), ), 0)
call_33 = relay.TupleGetItem(func_17_call(relay.reshape(var_31.astype('int32'), []), relay.reshape(var_32.astype('int32'), [6,]), ), 0)
bop_34 = relay.mod(var_19.astype('float64'), relay.reshape(var_20.astype('float64'), relay.shape_of(var_19))) # shape=(11, 6)
const_37 = relay.const([[6.086046,2.121571,2.055576,1.413808,5.012772,-1.639167],[3.000980,-0.418175,-2.375662,-5.792499,-9.983128,5.972656],[7.329326,7.908202,6.569801,-3.775023,-4.362507,-0.835125],[2.119988,0.707605,1.199529,-7.580323,5.135091,-5.780135],[-9.503391,4.036122,-0.428391,-3.586094,-5.239333,-7.555465],[-1.229480,-7.514014,-0.875606,-6.401799,-9.282965,-2.928519],[-7.367777,-2.035822,0.999636,0.203001,6.720111,-2.957159],[2.677255,-7.527242,-8.100240,0.912056,1.583011,3.290774],[3.154153,-5.553166,5.602142,2.709562,5.768645,-6.263758],[8.865514,-3.817907,-3.568322,-6.384662,0.556819,2.190416],[7.073446,-7.595897,-5.482803,-0.931004,1.996591,-7.014681]], dtype = "float32")#candidate|37|(11, 6)|const|float32
bop_38 = relay.floor_divide(var_19.astype('float64'), relay.reshape(const_37.astype('float64'), relay.shape_of(var_19))) # shape=(11, 6)
bop_41 = relay.logical_xor(bop_38.astype('int8'), call_30.astype('int8')) # shape=(11, 6)
bop_44 = relay.logical_xor(bop_38.astype('int8'), call_33.astype('int8')) # shape=(11, 6)
uop_45 = relay.exp(bop_27.astype('float64')) # shape=(11, 6)
uop_47 = relay.sqrt(bop_41.astype('float32')) # shape=(11, 6)
uop_49 = relay.sqrt(bop_44.astype('float32')) # shape=(11, 6)
bop_50 = relay.floor_mod(uop_47.astype('float32'), relay.reshape(var_20.astype('float32'), relay.shape_of(uop_47))) # shape=(11, 6)
bop_53 = relay.floor_mod(uop_49.astype('float32'), relay.reshape(var_20.astype('float32'), relay.shape_of(uop_49))) # shape=(11, 6)
uop_54 = relay.acos(uop_47.astype('float64')) # shape=(11, 6)
uop_56 = relay.acos(uop_49.astype('float64')) # shape=(11, 6)
uop_57 = relay.cosh(uop_54.astype('float64')) # shape=(11, 6)
uop_59 = relay.cosh(uop_56.astype('float64')) # shape=(11, 6)
uop_60 = relay.asin(uop_57.astype('float32')) # shape=(11, 6)
uop_62 = relay.asin(uop_59.astype('float32')) # shape=(11, 6)
bop_63 = relay.subtract(uop_60.astype('uint8'), relay.reshape(uop_57.astype('uint8'), relay.shape_of(uop_60))) # shape=(11, 6)
bop_66 = relay.subtract(uop_62.astype('uint8'), relay.reshape(uop_59.astype('uint8'), relay.shape_of(uop_62))) # shape=(11, 6)
bop_67 = relay.bitwise_or(uop_60.astype('uint16'), relay.reshape(uop_45.astype('uint16'), relay.shape_of(uop_60))) # shape=(11, 6)
bop_70 = relay.bitwise_or(uop_62.astype('uint16'), relay.reshape(uop_45.astype('uint16'), relay.shape_of(uop_62))) # shape=(11, 6)
uop_71 = relay.rsqrt(bop_67.astype('float32')) # shape=(11, 6)
uop_73 = relay.rsqrt(bop_70.astype('float32')) # shape=(11, 6)
bop_74 = relay.bitwise_and(uop_60.astype('int32'), relay.reshape(var_20.astype('int32'), relay.shape_of(uop_60))) # shape=(11, 6)
bop_77 = relay.bitwise_and(uop_62.astype('int32'), relay.reshape(var_20.astype('int32'), relay.shape_of(uop_62))) # shape=(11, 6)
uop_78 = relay.cos(uop_57.astype('float64')) # shape=(11, 6)
uop_80 = relay.cos(uop_59.astype('float64')) # shape=(11, 6)
func_14_call = mod.get_global_var('func_14')
func_17_call = mutated_mod.get_global_var('func_17')
call_81 = relay.TupleGetItem(func_14_call(relay.reshape(var_31.astype('int32'), []), relay.reshape(call_30.astype('int32'), [6,]), ), 0)
call_82 = relay.TupleGetItem(func_17_call(relay.reshape(var_31.astype('int32'), []), relay.reshape(call_30.astype('int32'), [6,]), ), 0)
func_14_call = mod.get_global_var('func_14')
func_17_call = mutated_mod.get_global_var('func_17')
call_83 = relay.TupleGetItem(func_14_call(relay.reshape(var_31.astype('int32'), []), relay.reshape(var_32.astype('int32'), [6,]), ), 1)
call_84 = relay.TupleGetItem(func_17_call(relay.reshape(var_31.astype('int32'), []), relay.reshape(var_32.astype('int32'), [6,]), ), 1)
var_85 = relay.var("var_85", dtype = "float64", shape = (11, 6))#candidate|85|(11, 6)|var|float64
bop_86 = relay.subtract(uop_54.astype('uint64'), relay.reshape(var_85.astype('uint64'), relay.shape_of(uop_54))) # shape=(11, 6)
bop_89 = relay.subtract(uop_56.astype('uint64'), relay.reshape(var_85.astype('uint64'), relay.shape_of(uop_56))) # shape=(11, 6)
bop_90 = relay.minimum(uop_71.astype('int16'), call_81.astype('int16')) # shape=(11, 6)
bop_93 = relay.minimum(uop_73.astype('int16'), call_82.astype('int16')) # shape=(11, 6)
bop_94 = relay.greater_equal(uop_78.astype('bool'), relay.reshape(var_20.astype('bool'), relay.shape_of(uop_78))) # shape=(11, 6)
bop_97 = relay.greater_equal(uop_80.astype('bool'), relay.reshape(var_20.astype('bool'), relay.shape_of(uop_80))) # shape=(11, 6)
bop_98 = relay.greater_equal(uop_71.astype('bool'), relay.reshape(bop_50.astype('bool'), relay.shape_of(uop_71))) # shape=(11, 6)
bop_101 = relay.greater_equal(uop_73.astype('bool'), relay.reshape(bop_53.astype('bool'), relay.shape_of(uop_73))) # shape=(11, 6)
var_102 = relay.var("var_102", dtype = "float64", shape = (11, 6))#candidate|102|(11, 6)|var|float64
bop_103 = relay.greater(uop_57.astype('bool'), relay.reshape(var_102.astype('bool'), relay.shape_of(uop_57))) # shape=(11, 6)
bop_106 = relay.greater(uop_59.astype('bool'), relay.reshape(var_102.astype('bool'), relay.shape_of(uop_59))) # shape=(11, 6)
uop_107 = relay.cos(bop_90.astype('float64')) # shape=(11, 6)
uop_109 = relay.cos(bop_93.astype('float64')) # shape=(11, 6)
uop_110 = relay.sqrt(bop_98.astype('float64')) # shape=(11, 6)
uop_112 = relay.sqrt(bop_101.astype('float64')) # shape=(11, 6)
uop_113 = relay.cosh(uop_71.astype('float64')) # shape=(11, 6)
uop_115 = relay.cosh(uop_73.astype('float64')) # shape=(11, 6)
bop_116 = relay.less_equal(uop_110.astype('bool'), relay.reshape(uop_107.astype('bool'), relay.shape_of(uop_110))) # shape=(11, 6)
bop_119 = relay.less_equal(uop_112.astype('bool'), relay.reshape(uop_109.astype('bool'), relay.shape_of(uop_112))) # shape=(11, 6)
func_14_call = mod.get_global_var('func_14')
func_17_call = mutated_mod.get_global_var('func_17')
call_120 = relay.TupleGetItem(func_14_call(relay.reshape(call_83.astype('int32'), []), relay.reshape(var_32.astype('int32'), [6,]), ), 0)
call_121 = relay.TupleGetItem(func_17_call(relay.reshape(call_83.astype('int32'), []), relay.reshape(var_32.astype('int32'), [6,]), ), 0)
var_122 = relay.var("var_122", dtype = "bool", shape = (11, 6))#candidate|122|(11, 6)|var|bool
bop_123 = relay.subtract(bop_103.astype('uint32'), relay.reshape(var_122.astype('uint32'), relay.shape_of(bop_103))) # shape=(11, 6)
bop_126 = relay.subtract(bop_106.astype('uint32'), relay.reshape(var_122.astype('uint32'), relay.shape_of(bop_106))) # shape=(11, 6)
uop_127 = relay.sin(uop_107.astype('float32')) # shape=(11, 6)
uop_129 = relay.sin(uop_109.astype('float32')) # shape=(11, 6)
bop_130 = relay.floor_divide(uop_127.astype('float32'), relay.reshape(bop_63.astype('float32'), relay.shape_of(uop_127))) # shape=(11, 6)
bop_133 = relay.floor_divide(uop_129.astype('float32'), relay.reshape(bop_66.astype('float32'), relay.shape_of(uop_129))) # shape=(11, 6)
bop_134 = relay.less(bop_103.astype('bool'), relay.reshape(uop_57.astype('bool'), relay.shape_of(bop_103))) # shape=(11, 6)
bop_137 = relay.less(bop_106.astype('bool'), relay.reshape(uop_59.astype('bool'), relay.shape_of(bop_106))) # shape=(11, 6)
uop_138 = relay.log2(uop_78.astype('float64')) # shape=(11, 6)
uop_140 = relay.log2(uop_80.astype('float64')) # shape=(11, 6)
uop_141 = relay.atan(uop_110.astype('float64')) # shape=(11, 6)
uop_143 = relay.atan(uop_112.astype('float64')) # shape=(11, 6)
uop_144 = relay.log(uop_57.astype('float32')) # shape=(11, 6)
uop_146 = relay.log(uop_59.astype('float32')) # shape=(11, 6)
uop_147 = relay.tan(uop_141.astype('float64')) # shape=(11, 6)
uop_149 = relay.tan(uop_143.astype('float64')) # shape=(11, 6)
var_150 = relay.var("var_150", dtype = "float64", shape = (11, 6))#candidate|150|(11, 6)|var|float64
bop_151 = relay.logical_or(uop_147.astype('bool'), relay.reshape(var_150.astype('bool'), relay.shape_of(uop_147))) # shape=(11, 6)
bop_154 = relay.logical_or(uop_149.astype('bool'), relay.reshape(var_150.astype('bool'), relay.shape_of(uop_149))) # shape=(11, 6)
uop_155 = relay.erf(uop_57.astype('float64')) # shape=(11, 6)
uop_157 = relay.erf(uop_59.astype('float64')) # shape=(11, 6)
var_158 = relay.var("var_158", dtype = "float64", shape = (11, 6))#candidate|158|(11, 6)|var|float64
bop_159 = relay.left_shift(uop_147.astype('int8'), relay.reshape(var_158.astype('int8'), relay.shape_of(uop_147))) # shape=(11, 6)
bop_162 = relay.left_shift(uop_149.astype('int8'), relay.reshape(var_158.astype('int8'), relay.shape_of(uop_149))) # shape=(11, 6)
bop_163 = relay.multiply(uop_127.astype('uint64'), relay.reshape(uop_47.astype('uint64'), relay.shape_of(uop_127))) # shape=(11, 6)
bop_166 = relay.multiply(uop_129.astype('uint64'), relay.reshape(uop_49.astype('uint64'), relay.shape_of(uop_129))) # shape=(11, 6)
uop_167 = relay.sinh(uop_141.astype('float64')) # shape=(11, 6)
uop_169 = relay.sinh(uop_143.astype('float64')) # shape=(11, 6)
uop_170 = relay.atanh(uop_127.astype('float64')) # shape=(11, 6)
uop_172 = relay.atanh(uop_129.astype('float64')) # shape=(11, 6)
var_173 = relay.var("var_173", dtype = "float32", shape = (11, 6))#candidate|173|(11, 6)|var|float32
bop_174 = relay.minimum(bop_130.astype('int16'), relay.reshape(var_173.astype('int16'), relay.shape_of(bop_130))) # shape=(11, 6)
bop_177 = relay.minimum(bop_133.astype('int16'), relay.reshape(var_173.astype('int16'), relay.shape_of(bop_133))) # shape=(11, 6)
uop_178 = relay.cos(uop_141.astype('float32')) # shape=(11, 6)
uop_180 = relay.cos(uop_143.astype('float32')) # shape=(11, 6)
uop_181 = relay.atan(uop_170.astype('float32')) # shape=(11, 6)
uop_183 = relay.atan(uop_172.astype('float32')) # shape=(11, 6)
bop_184 = relay.power(uop_181.astype('float64'), relay.reshape(uop_167.astype('float64'), relay.shape_of(uop_181))) # shape=(11, 6)
bop_187 = relay.power(uop_183.astype('float64'), relay.reshape(uop_169.astype('float64'), relay.shape_of(uop_183))) # shape=(11, 6)
uop_188 = relay.atan(uop_181.astype('float64')) # shape=(11, 6)
uop_190 = relay.atan(uop_183.astype('float64')) # shape=(11, 6)
uop_191 = relay.erf(uop_188.astype('float64')) # shape=(11, 6)
uop_193 = relay.erf(uop_190.astype('float64')) # shape=(11, 6)
bop_194 = relay.not_equal(uop_191.astype('bool'), relay.reshape(bop_184.astype('bool'), relay.shape_of(uop_191))) # shape=(11, 6)
bop_197 = relay.not_equal(uop_193.astype('bool'), relay.reshape(bop_187.astype('bool'), relay.shape_of(uop_193))) # shape=(11, 6)
uop_198 = relay.tan(bop_184.astype('float64')) # shape=(11, 6)
uop_200 = relay.tan(bop_187.astype('float64')) # shape=(11, 6)
var_201 = relay.var("var_201", dtype = "float32", shape = (11, 6))#candidate|201|(11, 6)|var|float32
bop_202 = relay.floor_divide(uop_181.astype('float64'), relay.reshape(var_201.astype('float64'), relay.shape_of(uop_181))) # shape=(11, 6)
bop_205 = relay.floor_divide(uop_183.astype('float64'), relay.reshape(var_201.astype('float64'), relay.shape_of(uop_183))) # shape=(11, 6)
uop_206 = relay.sigmoid(bop_194.astype('float64')) # shape=(11, 6)
uop_208 = relay.sigmoid(bop_197.astype('float64')) # shape=(11, 6)
uop_209 = relay.asinh(bop_194.astype('float64')) # shape=(11, 6)
uop_211 = relay.asinh(bop_197.astype('float64')) # shape=(11, 6)
uop_212 = relay.sin(uop_191.astype('float64')) # shape=(11, 6)
uop_214 = relay.sin(uop_193.astype('float64')) # shape=(11, 6)
func_14_call = mod.get_global_var('func_14')
func_17_call = mutated_mod.get_global_var('func_17')
call_215 = relay.TupleGetItem(func_14_call(relay.reshape(call_83.astype('int32'), []), relay.reshape(var_32.astype('int32'), [6,]), ), 0)
call_216 = relay.TupleGetItem(func_17_call(relay.reshape(call_83.astype('int32'), []), relay.reshape(var_32.astype('int32'), [6,]), ), 0)
uop_217 = relay.atan(uop_188.astype('float32')) # shape=(11, 6)
uop_219 = relay.atan(uop_190.astype('float32')) # shape=(11, 6)
uop_220 = relay.atanh(uop_206.astype('float64')) # shape=(11, 6)
uop_222 = relay.atanh(uop_208.astype('float64')) # shape=(11, 6)
var_223 = relay.var("var_223", dtype = "float64", shape = (11, 6))#candidate|223|(11, 6)|var|float64
bop_224 = relay.floor_divide(uop_220.astype('float64'), relay.reshape(var_223.astype('float64'), relay.shape_of(uop_220))) # shape=(11, 6)
bop_227 = relay.floor_divide(uop_222.astype('float64'), relay.reshape(var_223.astype('float64'), relay.shape_of(uop_222))) # shape=(11, 6)
func_14_call = mod.get_global_var('func_14')
func_17_call = mutated_mod.get_global_var('func_17')
call_228 = relay.TupleGetItem(func_14_call(relay.reshape(call_83.astype('int32'), []), relay.reshape(call_215.astype('int32'), [6,]), ), 1)
call_229 = relay.TupleGetItem(func_17_call(relay.reshape(call_83.astype('int32'), []), relay.reshape(call_215.astype('int32'), [6,]), ), 1)
var_230 = relay.var("var_230", dtype = "float32", shape = (11, 6))#candidate|230|(11, 6)|var|float32
bop_231 = relay.multiply(uop_181.astype('int16'), relay.reshape(var_230.astype('int16'), relay.shape_of(uop_181))) # shape=(11, 6)
bop_234 = relay.multiply(uop_183.astype('int16'), relay.reshape(var_230.astype('int16'), relay.shape_of(uop_183))) # shape=(11, 6)
const_235 = relay.const([[5.515065,-1.766968,0.640746,7.432300,4.661733,3.940785],[-3.896433,3.172205,-5.357958,-3.644263,-2.407992,9.884919],[6.901267,-2.972421,5.983388,-8.231154,5.713662,-1.197137],[9.492387,4.491200,-9.194839,5.658173,-7.143687,-0.685962],[7.137307,6.292601,-9.559150,5.941362,-5.115240,3.356020],[9.066434,-5.957460,-3.972381,3.357302,8.895955,-6.880868],[-4.326796,-6.375588,3.603202,1.609588,5.199610,-6.963314],[1.268202,4.765291,-2.439690,-4.707041,9.170106,-9.431061],[2.417068,0.780436,1.285523,-6.083950,7.982774,-7.477602],[2.775446,-0.960773,-6.018356,-2.805072,-6.851508,-2.794689],[-2.353366,5.866046,1.895178,-3.354415,1.364986,0.930111]], dtype = "float64")#candidate|235|(11, 6)|const|float64
bop_236 = relay.floor_mod(bop_224.astype('float64'), relay.reshape(const_235.astype('float64'), relay.shape_of(bop_224))) # shape=(11, 6)
bop_239 = relay.floor_mod(bop_227.astype('float64'), relay.reshape(const_235.astype('float64'), relay.shape_of(bop_227))) # shape=(11, 6)
bop_240 = relay.logical_xor(bop_224.astype('uint32'), relay.reshape(var_173.astype('uint32'), relay.shape_of(bop_224))) # shape=(11, 6)
bop_243 = relay.logical_xor(bop_227.astype('uint32'), relay.reshape(var_173.astype('uint32'), relay.shape_of(bop_227))) # shape=(11, 6)
var_244 = relay.var("var_244", dtype = "float64", shape = (11, 6))#candidate|244|(11, 6)|var|float64
bop_245 = relay.multiply(uop_212.astype('uint16'), relay.reshape(var_244.astype('uint16'), relay.shape_of(uop_212))) # shape=(11, 6)
bop_248 = relay.multiply(uop_214.astype('uint16'), relay.reshape(var_244.astype('uint16'), relay.shape_of(uop_214))) # shape=(11, 6)
var_249 = relay.var("var_249", dtype = "float64", shape = (11, 6))#candidate|249|(11, 6)|var|float64
bop_250 = relay.equal(bop_236.astype('bool'), relay.reshape(var_249.astype('bool'), relay.shape_of(bop_236))) # shape=(11, 6)
bop_253 = relay.equal(bop_239.astype('bool'), relay.reshape(var_249.astype('bool'), relay.shape_of(bop_239))) # shape=(11, 6)
uop_254 = relay.asinh(uop_212.astype('float64')) # shape=(11, 6)
uop_256 = relay.asinh(uop_214.astype('float64')) # shape=(11, 6)
output = relay.Tuple([bop_21,bop_24,var_31,var_32,bop_34,bop_74,call_83,bop_86,bop_94,uop_113,bop_116,call_120,bop_123,bop_134,uop_138,uop_144,bop_151,uop_155,bop_159,bop_163,bop_174,uop_178,uop_198,bop_202,uop_209,call_215,uop_217,call_228,bop_231,bop_240,bop_245,bop_250,uop_254,])
output2 = relay.Tuple([bop_21,bop_24,var_31,var_32,bop_34,bop_77,call_84,bop_89,bop_97,uop_115,bop_119,call_121,bop_126,bop_137,uop_140,uop_146,bop_154,uop_157,bop_162,bop_166,bop_177,uop_180,uop_200,bop_205,uop_211,call_216,uop_219,call_229,bop_234,bop_243,bop_248,bop_253,uop_256,])
func_257 = relay.Function([var_19,var_20,var_31,var_32,var_85,var_102,var_122,var_150,var_158,var_173,var_201,var_223,var_230,var_244,var_249,], output)
mod['func_257'] = func_257
mod = relay.transform.InferType()(mod)
var_258 = relay.var("var_258", dtype = "float32", shape = (11, 6))#candidate|258|(11, 6)|var|float32
var_259 = relay.var("var_259", dtype = "float32", shape = (11, 6))#candidate|259|(11, 6)|var|float32
var_260 = relay.var("var_260", dtype = "int32", shape = ())#candidate|260|()|var|int32
var_261 = relay.var("var_261", dtype = "int32", shape = (1, 6))#candidate|261|(1, 6)|var|int32
var_262 = relay.var("var_262", dtype = "float64", shape = (11, 6))#candidate|262|(11, 6)|var|float64
var_263 = relay.var("var_263", dtype = "float64", shape = (11, 6))#candidate|263|(11, 6)|var|float64
var_264 = relay.var("var_264", dtype = "bool", shape = (11, 6))#candidate|264|(11, 6)|var|bool
var_265 = relay.var("var_265", dtype = "float64", shape = (11, 6))#candidate|265|(11, 6)|var|float64
var_266 = relay.var("var_266", dtype = "float64", shape = (11, 6))#candidate|266|(11, 6)|var|float64
var_267 = relay.var("var_267", dtype = "float32", shape = (11, 6))#candidate|267|(11, 6)|var|float32
var_268 = relay.var("var_268", dtype = "float32", shape = (11, 6))#candidate|268|(11, 6)|var|float32
var_269 = relay.var("var_269", dtype = "float64", shape = (11, 6))#candidate|269|(11, 6)|var|float64
var_270 = relay.var("var_270", dtype = "float32", shape = (11, 6))#candidate|270|(11, 6)|var|float32
var_271 = relay.var("var_271", dtype = "float64", shape = (11, 6))#candidate|271|(11, 6)|var|float64
var_272 = relay.var("var_272", dtype = "float64", shape = (11, 6))#candidate|272|(11, 6)|var|float64
output = func_257(var_258,var_259,var_260,var_261,var_262,var_263,var_264,var_265,var_266,var_267,var_268,var_269,var_270,var_271,var_272,)
func_273 = relay.Function([var_258,var_259,var_260,var_261,var_262,var_263,var_264,var_265,var_266,var_267,var_268,var_269,var_270,var_271,var_272,], output)
mutated_mod['func_273'] = func_273
mutated_mod = relay.transform.InferType()(mutated_mod)
var_275 = relay.var("var_275", dtype = "float64", shape = (16, 12, 16))#candidate|275|(16, 12, 16)|var|float64
uop_276 = relay.atan(var_275.astype('float64')) # shape=(16, 12, 16)
var_278 = relay.var("var_278", dtype = "float64", shape = (16, 12, 16))#candidate|278|(16, 12, 16)|var|float64
bop_279 = relay.logical_and(var_275.astype('bool'), relay.reshape(var_278.astype('bool'), relay.shape_of(var_275))) # shape=(16, 12, 16)
uop_282 = relay.erf(var_278.astype('float32')) # shape=(16, 12, 16)
uop_284 = relay.exp(uop_276.astype('float64')) # shape=(16, 12, 16)
func_257_call = mod.get_global_var('func_257')
func_273_call = mutated_mod.get_global_var('func_273')
const_287 = relay.const([[-0.408003,9.807045,-3.096267,5.862810,-1.264093,3.904953],[-0.931921,-7.116084,-9.731780,8.934896,-6.477467,8.968560],[3.612443,2.520494,9.007416,-0.574573,2.453119,-7.866943],[9.705066,7.660967,-1.121284,9.176959,7.363035,-7.077497],[0.178014,-9.486724,3.267833,-0.954992,-5.968870,-0.598711],[7.114831,6.830815,-7.654734,-6.376834,-7.319783,-2.956624],[0.767832,8.383086,1.534562,-5.836456,7.400512,1.797040],[4.706944,-7.979751,6.618629,5.547618,2.401386,2.982598],[8.208981,7.779135,4.477262,-2.354822,2.907568,8.488194],[0.916431,2.580117,9.072438,-9.270628,-0.990121,-0.128678],[1.344742,9.959006,4.058966,2.183373,-9.269173,-4.229434]], dtype = "float32")#candidate|287|(11, 6)|const|float32
var_288 = relay.var("var_288", dtype = "int32", shape = ())#candidate|288|()|var|int32
var_289 = relay.var("var_289", dtype = "int32", shape = (6,))#candidate|289|(6,)|var|int32
call_286 = relay.TupleGetItem(func_257_call(relay.reshape(const_287.astype('float32'), [11, 6]), relay.reshape(const_287.astype('float32'), [11, 6]), relay.reshape(var_288.astype('int32'), []), relay.reshape(var_289.astype('int32'), [1, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(const_287.astype('bool'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float32'), [11, 6]), relay.reshape(const_287.astype('float32'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float32'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), ), 1)
call_290 = relay.TupleGetItem(func_273_call(relay.reshape(const_287.astype('float32'), [11, 6]), relay.reshape(const_287.astype('float32'), [11, 6]), relay.reshape(var_288.astype('int32'), []), relay.reshape(var_289.astype('int32'), [1, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(const_287.astype('bool'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float32'), [11, 6]), relay.reshape(const_287.astype('float32'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float32'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), ), 1)
var_291 = relay.var("var_291", dtype = "float32", shape = (16, 12, 16))#candidate|291|(16, 12, 16)|var|float32
bop_292 = relay.less(uop_282.astype('bool'), relay.reshape(var_291.astype('bool'), relay.shape_of(uop_282))) # shape=(16, 12, 16)
bop_295 = relay.equal(uop_276.astype('bool'), relay.reshape(uop_284.astype('bool'), relay.shape_of(uop_276))) # shape=(16, 12, 16)
uop_298 = relay.tan(uop_282.astype('float64')) # shape=(16, 12, 16)
bop_300 = relay.bitwise_xor(uop_284.astype('uint16'), relay.reshape(uop_282.astype('uint16'), relay.shape_of(uop_284))) # shape=(16, 12, 16)
bop_303 = relay.multiply(bop_300.astype('float64'), relay.reshape(uop_276.astype('float64'), relay.shape_of(bop_300))) # shape=(16, 12, 16)
bop_306 = relay.maximum(uop_282.astype('uint32'), relay.reshape(uop_298.astype('uint32'), relay.shape_of(uop_282))) # shape=(16, 12, 16)
bop_309 = relay.divide(uop_276.astype('float64'), relay.reshape(bop_292.astype('float64'), relay.shape_of(uop_276))) # shape=(16, 12, 16)
func_257_call = mod.get_global_var('func_257')
func_273_call = mutated_mod.get_global_var('func_273')
call_312 = relay.TupleGetItem(func_257_call(relay.reshape(call_286.astype('float32'), [11, 6]), relay.reshape(call_286.astype('float32'), [11, 6]), relay.reshape(var_288.astype('int32'), []), relay.reshape(var_289.astype('int32'), [1, 6]), relay.reshape(call_286.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(call_286.astype('bool'), [11, 6]), relay.reshape(call_286.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float32'), [11, 6]), relay.reshape(call_286.astype('float32'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float32'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), ), 11)
call_313 = relay.TupleGetItem(func_273_call(relay.reshape(call_286.astype('float32'), [11, 6]), relay.reshape(call_286.astype('float32'), [11, 6]), relay.reshape(var_288.astype('int32'), []), relay.reshape(var_289.astype('int32'), [1, 6]), relay.reshape(call_286.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(call_286.astype('bool'), [11, 6]), relay.reshape(call_286.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float32'), [11, 6]), relay.reshape(call_286.astype('float32'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float32'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), ), 11)
uop_314 = relay.exp(bop_295.astype('float64')) # shape=(16, 12, 16)
uop_316 = relay.exp(uop_314.astype('float32')) # shape=(16, 12, 16)
uop_318 = relay.acosh(uop_316.astype('float32')) # shape=(16, 12, 16)
func_257_call = mod.get_global_var('func_257')
func_273_call = mutated_mod.get_global_var('func_273')
call_320 = relay.TupleGetItem(func_257_call(relay.reshape(call_286.astype('float32'), [11, 6]), relay.reshape(const_287.astype('float32'), [11, 6]), relay.reshape(var_288.astype('int32'), []), relay.reshape(call_312.astype('int32'), [1, 6]), relay.reshape(call_286.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(call_286.astype('bool'), [11, 6]), relay.reshape(call_286.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(call_286.astype('float32'), [11, 6]), relay.reshape(const_287.astype('float32'), [11, 6]), relay.reshape(call_286.astype('float64'), [11, 6]), relay.reshape(call_286.astype('float32'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(call_286.astype('float64'), [11, 6]), ), 32)
call_321 = relay.TupleGetItem(func_273_call(relay.reshape(call_286.astype('float32'), [11, 6]), relay.reshape(const_287.astype('float32'), [11, 6]), relay.reshape(var_288.astype('int32'), []), relay.reshape(call_312.astype('int32'), [1, 6]), relay.reshape(call_286.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(call_286.astype('bool'), [11, 6]), relay.reshape(call_286.astype('float64'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(call_286.astype('float32'), [11, 6]), relay.reshape(const_287.astype('float32'), [11, 6]), relay.reshape(call_286.astype('float64'), [11, 6]), relay.reshape(call_286.astype('float32'), [11, 6]), relay.reshape(const_287.astype('float64'), [11, 6]), relay.reshape(call_286.astype('float64'), [11, 6]), ), 32)
uop_322 = relay.log(uop_314.astype('float64')) # shape=(16, 12, 16)
bop_324 = relay.subtract(uop_322.astype('float32'), relay.reshape(uop_284.astype('float32'), relay.shape_of(uop_322))) # shape=(16, 12, 16)
output = relay.Tuple([bop_279,call_286,const_287,var_288,var_289,bop_303,bop_306,bop_309,call_312,uop_318,call_320,bop_324,])
output2 = relay.Tuple([bop_279,call_290,const_287,var_288,var_289,bop_303,bop_306,bop_309,call_313,uop_318,call_321,bop_324,])
func_327 = relay.Function([var_275,var_278,var_288,var_289,var_291,], output)
mod['func_327'] = func_327
mod = relay.transform.InferType()(mod)
var_328 = relay.var("var_328", dtype = "float64", shape = (16, 12, 16))#candidate|328|(16, 12, 16)|var|float64
var_329 = relay.var("var_329", dtype = "float64", shape = (16, 12, 16))#candidate|329|(16, 12, 16)|var|float64
var_330 = relay.var("var_330", dtype = "int32", shape = ())#candidate|330|()|var|int32
var_331 = relay.var("var_331", dtype = "int32", shape = (6,))#candidate|331|(6,)|var|int32
var_332 = relay.var("var_332", dtype = "float32", shape = (16, 12, 16))#candidate|332|(16, 12, 16)|var|float32
output = func_327(var_328,var_329,var_330,var_331,var_332,)
func_333 = relay.Function([var_328,var_329,var_330,var_331,var_332,], output)
mutated_mod['func_333'] = func_333
mutated_mod = relay.transform.InferType()(mutated_mod)
var_335 = relay.var("var_335", dtype = "float32", shape = (11, 5))#candidate|335|(11, 5)|var|float32
uop_336 = relay.tan(var_335.astype('float32')) # shape=(11, 5)
uop_338 = relay.sqrt(var_335.astype('float64')) # shape=(11, 5)
uop_340 = relay.sigmoid(var_335.astype('float32')) # shape=(11, 5)
uop_342 = relay.rsqrt(uop_340.astype('float32')) # shape=(11, 5)
uop_344 = relay.rsqrt(uop_342.astype('float64')) # shape=(11, 5)
func_14_call = mod.get_global_var('func_14')
func_17_call = mutated_mod.get_global_var('func_17')
const_347 = relay.const(-6, dtype = "int32")#candidate|347|()|const|int32
const_348 = relay.const([[8,6],[-2,4],[-2,2]], dtype = "int32")#candidate|348|(3, 2)|const|int32
call_346 = relay.TupleGetItem(func_14_call(relay.reshape(const_347.astype('int32'), []), relay.reshape(const_348.astype('int32'), [6,]), ), 0)
call_349 = relay.TupleGetItem(func_17_call(relay.reshape(const_347.astype('int32'), []), relay.reshape(const_348.astype('int32'), [6,]), ), 0)
uop_350 = relay.cosh(uop_338.astype('float64')) # shape=(11, 5)
bop_352 = relay.multiply(const_348.astype('int64'), const_347.astype('int64')) # shape=(3, 2)
var_355 = relay.var("var_355", dtype = "float64", shape = (11, 5))#candidate|355|(11, 5)|var|float64
bop_356 = relay.logical_or(uop_344.astype('bool'), relay.reshape(var_355.astype('bool'), relay.shape_of(uop_344))) # shape=(11, 5)
uop_359 = relay.cosh(uop_342.astype('float64')) # shape=(11, 5)
bop_361 = relay.floor_mod(uop_340.astype('float64'), relay.reshape(var_355.astype('float64'), relay.shape_of(uop_340))) # shape=(11, 5)
bop_364 = relay.minimum(uop_350.astype('float32'), relay.reshape(uop_342.astype('float32'), relay.shape_of(uop_350))) # shape=(11, 5)
uop_367 = relay.rsqrt(uop_338.astype('float32')) # shape=(11, 5)
bop_369 = relay.logical_or(uop_359.astype('bool'), relay.reshape(bop_364.astype('bool'), relay.shape_of(uop_359))) # shape=(11, 5)
uop_372 = relay.log2(uop_344.astype('float32')) # shape=(11, 5)
bop_374 = relay.logical_or(uop_372.astype('bool'), relay.reshape(bop_364.astype('bool'), relay.shape_of(uop_372))) # shape=(11, 5)
bop_377 = relay.multiply(uop_344.astype('uint32'), relay.reshape(uop_359.astype('uint32'), relay.shape_of(uop_344))) # shape=(11, 5)
bop_380 = relay.right_shift(bop_374.astype('int64'), relay.reshape(uop_344.astype('int64'), relay.shape_of(bop_374))) # shape=(11, 5)
const_383 = relay.const([[-2.239172,9.053102,-4.633386,3.744831,4.236124],[0.510503,4.676723,1.849274,-8.878489,1.963294],[-9.800663,0.071795,3.484864,-9.264182,4.721490],[-3.029049,-2.592413,-2.714837,-5.665809,-6.701609],[-8.148993,6.736092,2.494056,4.882253,-5.306345],[0.602557,5.682966,5.527862,4.057258,-7.775649],[-3.342857,-0.340837,4.181010,4.877056,7.868915],[9.298140,8.451992,0.440815,8.264161,-2.276323],[1.864931,-9.278717,-0.640869,7.007205,5.838295],[-0.168610,-8.940426,2.410741,3.371417,6.619636],[-9.015010,-5.840811,9.960217,0.684886,9.806108]], dtype = "float64")#candidate|383|(11, 5)|const|float64
bop_384 = relay.not_equal(uop_338.astype('bool'), relay.reshape(const_383.astype('bool'), relay.shape_of(uop_338))) # shape=(11, 5)
output = relay.Tuple([uop_336,call_346,bop_352,bop_356,bop_361,uop_367,bop_369,bop_377,bop_380,bop_384,])
output2 = relay.Tuple([uop_336,call_349,bop_352,bop_356,bop_361,uop_367,bop_369,bop_377,bop_380,bop_384,])
F = relay.Function([var_335,var_355,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_335,var_355,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_335= np.array([[6.266695,2.232501,4.555365,9.433266,-2.517476],[-3.961134,7.918189,-3.613029,-7.757348,7.829819],[-9.570707,7.429176,7.393347,-1.133503,-2.447612],[7.396919,-1.205472,-1.473608,3.913683,-0.313876],[6.519815,-0.725303,-9.076555,-2.714130,-4.741278],[-4.118819,0.228568,1.462234,-0.442601,2.252880],[-7.979101,-8.894235,6.052659,-4.353537,6.214374],[6.282547,1.863679,2.366568,-4.752733,1.296045],[3.489386,-4.048253,9.866817,0.057959,3.383102],[-6.078495,2.376403,-0.494520,5.673622,2.582659],[-7.948630,-7.195952,-6.604205,6.887812,4.223088]], dtype='float32')
module1.set_input('var_335', input_335)
input_355= np.array([[5.596864,-1.697176,7.097515,2.274091,1.709383],[-9.074632,3.756004,8.981713,-3.914482,-5.447272],[4.192133,-1.596715,2.313567,3.464122,-7.049184],[4.453105,9.888265,2.184516,2.323934,0.382293],[2.563760,-8.771436,7.825870,0.371293,2.507000],[1.155436,-5.970627,-5.819567,-8.212893,-6.955194],[-9.305642,-9.707859,-6.977271,-0.038940,8.727156],[-8.955655,0.978158,8.872213,-6.325811,6.789788],[-8.504250,-8.827965,-8.634687,-2.295410,-6.176691],[4.524307,-7.609078,-6.080768,3.467390,-8.947225],[-6.972430,-1.989583,-0.451091,-7.830418,-6.502966]], dtype='float64')
module1.set_input('var_355', input_355)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_335, input_355, )
res3 = intrp3.evaluate()(input_335, input_355, )
res4 = intrp4.evaluate()(input_335, input_355, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
module5.set_input('var_335', input_335)
module5.set_input('var_355', input_355)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_335, input_355, )
res7 = intrp7.evaluate()(input_335, input_355, )
res8 = intrp8.evaluate()(input_335, input_355, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
module9.set_input('var_335', input_335)
module9.set_input('var_355', input_355)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_335, input_355, )
res11 = intrp11.evaluate()(input_335, input_355, )
res12 = intrp12.evaluate()(input_335, input_355, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
module13.set_input('var_335', input_335)
module13.set_input('var_355', input_355)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_335, input_355, )
res15 = intrp15.evaluate()(input_335, input_355, )
res16 = intrp16.evaluate()(input_335, input_355, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
module17.set_input('var_335', input_335)
module17.set_input('var_355', input_355)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_335, input_355, )
res19 = intrp19.evaluate()(input_335, input_355, )
res20 = intrp20.evaluate()(input_335, input_355, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
module21.set_input('var_335', input_335)
module21.set_input('var_355', input_355)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_335, input_355, )
res23 = intrp23.evaluate()(input_335, input_355, )
res24 = intrp24.evaluate()(input_335, input_355, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()

'''104: TVMFuncCall
103: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
102: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
101: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
100: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
99: tvm::transform::Pass::operator()(tvm::IRModule) const
98: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
97: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
96: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
95: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
94: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
93: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
92: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
91: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
90: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
89: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
88: _ZN3tvm5relay16MixedModeMutato
87: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
86: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
85: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
84: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
83: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
82: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
81: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
80: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
79: _ZN3tvm5relay16MixedModeMutato
78: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
77: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
76: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
75: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
74: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
73: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
72: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
71: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
70: tvm::transform::Pass::operator()(tvm::IRModule) const
69: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
68: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
67: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
66: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
65: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
64: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
63: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
62: _ZN3tvm5relay16MixedModeMutato
61: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
60: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
59: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
58: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
57: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
56: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
55: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
54: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
53: _ZN3tvm5relay16MixedModeMutato
52: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
51: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
50: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
49: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
48: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
46: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''