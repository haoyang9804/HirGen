import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "int8", shape = (11, 4, 2))#candidate|0|(11, 4, 2)|var|int8
var_1 = relay.var("var_1", dtype = "int8", shape = (11, 4, 2))#candidate|1|(11, 4, 2)|var|int8
bop_2 = relay.logical_xor(var_0.astype('int8'), relay.reshape(var_1.astype('int8'), relay.shape_of(var_0))) # shape=(11, 4, 2)
uop_5 = relay.cos(bop_2.astype('float64')) # shape=(11, 4, 2)
var_7 = relay.var("var_7", dtype = "float64", shape = (11, 4, 2))#candidate|7|(11, 4, 2)|var|float64
bop_8 = relay.logical_and(uop_5.astype('bool'), relay.reshape(var_7.astype('bool'), relay.shape_of(uop_5))) # shape=(11, 4, 2)
bop_11 = relay.logical_or(bop_8.astype('bool'), relay.reshape(var_1.astype('bool'), relay.shape_of(bop_8))) # shape=(11, 4, 2)
uop_14 = relay.sigmoid(bop_2.astype('float32')) # shape=(11, 4, 2)
uop_16 = relay.log(var_7.astype('float64')) # shape=(11, 4, 2)
bop_18 = relay.divide(uop_14.astype('float32'), relay.reshape(uop_16.astype('float32'), relay.shape_of(uop_14))) # shape=(11, 4, 2)
output = relay.Tuple([bop_11,bop_18,])
output2 = relay.Tuple([bop_11,bop_18,])
func_21 = relay.Function([var_0,var_1,var_7,], output)
mod['func_21'] = func_21
mod = relay.transform.InferType()(mod)
var_22 = relay.var("var_22", dtype = "int8", shape = (11, 4, 2))#candidate|22|(11, 4, 2)|var|int8
var_23 = relay.var("var_23", dtype = "int8", shape = (11, 4, 2))#candidate|23|(11, 4, 2)|var|int8
var_24 = relay.var("var_24", dtype = "float64", shape = (11, 4, 2))#candidate|24|(11, 4, 2)|var|float64
output = func_21(var_22,var_23,var_24,)
func_25 = relay.Function([var_22,var_23,var_24,], output)
mutated_mod['func_25'] = func_25
mutated_mod = relay.transform.InferType()(mutated_mod)
var_27 = relay.var("var_27", dtype = "float32", shape = (5, 3))#candidate|27|(5, 3)|var|float32
uop_28 = relay.rsqrt(var_27.astype('float32')) # shape=(5, 3)
bop_30 = relay.maximum(var_27.astype('int32'), relay.reshape(uop_28.astype('int32'), relay.shape_of(var_27))) # shape=(5, 3)
output = relay.Tuple([bop_30,])
output2 = relay.Tuple([bop_30,])
func_33 = relay.Function([var_27,], output)
mod['func_33'] = func_33
mod = relay.transform.InferType()(mod)
mutated_mod['func_33'] = func_33
mutated_mod = relay.transform.InferType()(mutated_mod)
var_34 = relay.var("var_34", dtype = "float32", shape = (5, 3))#candidate|34|(5, 3)|var|float32
func_33_call = mutated_mod.get_global_var('func_33')
call_35 = func_33_call(var_34)
output = call_35
func_36 = relay.Function([var_34], output)
mutated_mod['func_36'] = func_36
mutated_mod = relay.transform.InferType()(mutated_mod)
var_38 = relay.var("var_38", dtype = "float64", shape = (1, 8))#candidate|38|(1, 8)|var|float64
uop_39 = relay.log(var_38.astype('float64')) # shape=(1, 8)
uop_41 = relay.rsqrt(uop_39.astype('float64')) # shape=(1, 8)
const_43 = relay.const([[-8.087235,-2.930029,-4.552684,6.160249,2.171396,-5.619549,-2.480093,5.513665],[-0.086985,-0.705553,-8.595388,-4.823905,3.421497,4.368857,-3.430023,5.696035],[-1.318866,-3.197564,-9.291556,4.739629,-1.511890,-6.055915,1.783776,-0.373386],[0.377222,-1.364103,0.441716,-2.936196,2.821382,-4.482405,-5.068946,0.792257],[3.037538,-8.890927,4.932165,2.374796,6.184428,-6.435971,-3.048680,-1.217976],[2.306855,4.006812,6.617394,-6.415916,1.631829,-9.360618,-2.423243,3.557972],[-5.515689,-7.557414,4.517691,9.937666,4.626464,-2.745924,-5.382700,7.586697],[9.324861,-9.688020,5.248503,-7.513047,-4.335159,-3.193577,-3.371340,-2.574730],[2.315162,-9.423418,0.710616,8.775266,-3.607731,-3.073685,-1.043038,-8.612609],[-4.502705,-1.363176,5.167698,1.325502,-2.392206,4.113315,1.371088,3.106969],[-2.773691,4.453447,3.347297,-4.381336,-9.633289,8.124382,1.895199,8.211763],[-6.140522,9.927681,-9.204163,4.313914,-1.936877,2.258375,9.155624,1.461638],[-5.948969,9.631584,5.509468,9.409637,-4.780071,4.261310,0.721638,6.516648],[-3.389972,6.403519,4.755756,2.581936,4.084715,4.283103,6.385786,-4.182981],[-0.220300,-2.054212,-6.994498,7.700676,-0.458085,-3.834667,9.671185,6.799691],[-9.941955,-7.062325,-8.704787,5.816047,-8.513968,-1.795118,1.678341,-0.048757]], dtype = "float64")#candidate|43|(16, 8)|const|float64
bop_44 = relay.less_equal(uop_39.astype('bool'), const_43.astype('bool')) # shape=(16, 8)
const_47 = relay.const([[0.193348,6.581041,-8.590530,-3.279925,1.275413,-6.607223,-7.817653,7.264016],[0.682815,8.948606,-0.800935,-9.717104,-2.358402,8.845795,-7.688841,4.586360],[-3.225504,-5.560955,-6.982814,-2.123147,0.041368,0.470402,4.926655,-5.081902],[-8.968455,-2.171240,-1.755067,-2.171521,3.512344,3.377920,-6.713981,7.929828],[0.333399,3.656375,-4.968081,-1.400686,6.876177,-5.016389,-5.382602,8.948156],[-4.111375,3.452974,-5.231389,-8.041436,0.751446,-3.387335,-2.253213,-6.391788],[9.183204,7.730506,3.762372,5.982663,5.225122,7.986700,7.970746,-7.224484],[-2.620661,-4.119734,5.757263,-3.108582,-6.032001,-9.667909,9.263363,8.778190],[9.232418,-7.261326,-3.894658,6.027634,4.668265,4.332050,4.926030,8.575755],[7.172925,9.321894,-0.836119,5.224200,-9.757031,2.067259,-5.787252,-7.821668],[3.977215,-4.022114,-0.454135,3.336505,1.067577,-3.438082,-0.430708,-7.848101],[9.143954,-1.961051,-5.004691,7.241385,9.755661,-5.335701,7.936669,1.328313],[0.811288,-0.732829,6.366599,-5.285167,-7.400340,-2.272221,-5.474914,-3.487709],[-2.510184,1.942768,-4.510968,2.825037,9.911218,0.415297,-8.059527,1.862594],[-5.859084,6.551071,3.976720,-4.053682,7.847768,-5.599496,-5.200096,6.153140],[3.203313,0.098569,1.688109,2.791442,-9.583663,8.208375,-5.866762,-8.544064]], dtype = "float64")#candidate|47|(16, 8)|const|float64
bop_48 = relay.logical_and(uop_39.astype('bool'), const_47.astype('bool')) # shape=(16, 8)
bop_51 = relay.greater(uop_41.astype('bool'), bop_44.astype('bool')) # shape=(16, 8)
var_54 = relay.var("var_54", dtype = "bool", shape = (16, 8))#candidate|54|(16, 8)|var|bool
bop_55 = relay.floor_mod(bop_51.astype('float64'), relay.reshape(var_54.astype('float64'), relay.shape_of(bop_51))) # shape=(16, 8)
uop_58 = relay.exp(bop_55.astype('float32')) # shape=(16, 8)
uop_60 = relay.log(uop_58.astype('float64')) # shape=(16, 8)
var_62 = relay.var("var_62", dtype = "float64", shape = (16, 8))#candidate|62|(16, 8)|var|float64
bop_63 = relay.less_equal(const_47.astype('bool'), relay.reshape(var_62.astype('bool'), relay.shape_of(const_47))) # shape=(16, 8)
var_66 = relay.var("var_66", dtype = "float64", shape = (16, 8))#candidate|66|(16, 8)|var|float64
bop_67 = relay.bitwise_and(bop_55.astype('uint16'), relay.reshape(var_66.astype('uint16'), relay.shape_of(bop_55))) # shape=(16, 8)
uop_70 = relay.sigmoid(bop_67.astype('float64')) # shape=(16, 8)
uop_72 = relay.log(uop_70.astype('float32')) # shape=(16, 8)
bop_74 = relay.logical_xor(bop_44.astype('int64'), relay.reshape(bop_55.astype('int64'), relay.shape_of(bop_44))) # shape=(16, 8)
const_77 = relay.const([[-3.617882,5.993027,-3.029024,4.492883,6.839111,9.917725,7.661207,4.152922],[-2.124865,5.639219,-0.530303,-9.045093,-4.194933,5.021915,2.687210,7.290216],[-6.742118,-3.743048,-0.863500,3.969737,-7.833715,4.453213,-3.123221,-6.192899],[-9.674904,9.810302,1.171591,6.753552,4.062653,-6.573472,3.575866,-9.350414],[-4.640406,9.396275,-7.614109,9.614703,1.415559,-7.268027,1.028533,-4.276640],[7.358445,-8.363195,6.769658,-5.553468,-4.892980,-8.526384,1.573350,9.401153],[8.761644,-8.144417,-9.161633,-7.064066,-9.734374,4.912262,4.352026,1.678175],[-6.975333,5.963998,-5.875127,-9.668744,-3.647031,-1.060483,7.886791,-2.785145],[-9.761878,1.485855,-2.070245,3.657594,-8.052158,-6.119559,-8.776211,-2.536205],[4.837317,7.506684,-4.756005,-6.680323,-0.716233,-6.259336,4.242822,-3.620555],[0.894050,-2.113113,-7.087870,-4.643547,-8.037359,-6.869389,-6.845656,6.464965],[8.124620,8.650542,-8.123611,-1.669500,2.890257,6.972691,2.385878,-6.643341],[3.596934,-2.126438,-9.784426,-3.589842,7.752706,-8.134049,-5.214668,4.219321],[-5.511058,5.087055,4.206074,3.950585,-6.132541,0.065446,-0.083311,-1.294358],[-3.144077,3.373244,7.740678,0.970857,2.748815,-0.458030,-6.129149,5.381554],[5.265747,0.304599,-6.167925,3.089307,1.581390,4.428349,-3.668244,3.379552]], dtype = "float32")#candidate|77|(16, 8)|const|float32
bop_78 = relay.equal(uop_72.astype('bool'), relay.reshape(const_77.astype('bool'), relay.shape_of(uop_72))) # shape=(16, 8)
uop_81 = relay.atanh(uop_58.astype('float64')) # shape=(16, 8)
uop_83 = relay.sin(bop_78.astype('float32')) # shape=(16, 8)
var_85 = relay.var("var_85", dtype = "float32", shape = (16, 8))#candidate|85|(16, 8)|var|float32
bop_86 = relay.right_shift(uop_72.astype('int64'), relay.reshape(var_85.astype('int64'), relay.shape_of(uop_72))) # shape=(16, 8)
uop_89 = relay.sqrt(uop_83.astype('float32')) # shape=(16, 8)
uop_91 = relay.cosh(uop_89.astype('float32')) # shape=(16, 8)
bop_93 = relay.add(uop_91.astype('int8'), relay.reshape(uop_58.astype('int8'), relay.shape_of(uop_91))) # shape=(16, 8)
bop_96 = relay.logical_and(uop_91.astype('bool'), relay.reshape(uop_81.astype('bool'), relay.shape_of(uop_91))) # shape=(16, 8)
uop_99 = relay.exp(bop_96.astype('float32')) # shape=(16, 8)
uop_101 = relay.log2(bop_86.astype('float64')) # shape=(16, 8)
uop_103 = relay.acos(uop_99.astype('float64')) # shape=(16, 8)
var_105 = relay.var("var_105", dtype = "bool", shape = (16, 8))#candidate|105|(16, 8)|var|bool
bop_106 = relay.multiply(bop_96.astype('uint32'), relay.reshape(var_105.astype('uint32'), relay.shape_of(bop_96))) # shape=(16, 8)
uop_109 = relay.cos(uop_103.astype('float64')) # shape=(16, 8)
bop_111 = relay.logical_xor(uop_89.astype('int16'), relay.reshape(bop_67.astype('int16'), relay.shape_of(uop_89))) # shape=(16, 8)
bop_114 = relay.minimum(uop_109.astype('int8'), relay.reshape(uop_99.astype('int8'), relay.shape_of(uop_109))) # shape=(16, 8)
uop_117 = relay.asin(uop_109.astype('float32')) # shape=(16, 8)
uop_119 = relay.atanh(bop_114.astype('float32')) # shape=(16, 8)
uop_121 = relay.sqrt(uop_109.astype('float32')) # shape=(16, 8)
bop_123 = relay.left_shift(uop_109.astype('int64'), relay.reshape(uop_60.astype('int64'), relay.shape_of(uop_109))) # shape=(16, 8)
func_21_call = mod.get_global_var('func_21')
func_25_call = mutated_mod.get_global_var('func_25')
var_127 = relay.var("var_127", dtype = "int8", shape = (88,))#candidate|127|(88,)|var|int8
call_126 = relay.TupleGetItem(func_21_call(relay.reshape(var_127.astype('int8'), [11, 4, 2]), relay.reshape(var_127.astype('int8'), [11, 4, 2]), relay.reshape(var_127.astype('float64'), [11, 4, 2]), ), 0)
call_128 = relay.TupleGetItem(func_25_call(relay.reshape(var_127.astype('int8'), [11, 4, 2]), relay.reshape(var_127.astype('int8'), [11, 4, 2]), relay.reshape(var_127.astype('float64'), [11, 4, 2]), ), 0)
func_33_call = mod.get_global_var('func_33')
func_36_call = mutated_mod.get_global_var('func_36')
const_130 = relay.const([8.240716,4.182569,7.625221,9.080454,1.287408,-5.468714,-2.067226,-6.431473,5.073983,-0.398540,-8.265560,6.629980,-3.612032,0.750081,-6.381353], dtype = "float32")#candidate|130|(15,)|const|float32
call_129 = relay.TupleGetItem(func_33_call(relay.reshape(const_130.astype('float32'), [5, 3])), 0)
call_131 = relay.TupleGetItem(func_36_call(relay.reshape(const_130.astype('float32'), [5, 3])), 0)
func_33_call = mod.get_global_var('func_33')
func_36_call = mutated_mod.get_global_var('func_36')
call_132 = relay.TupleGetItem(func_33_call(relay.reshape(call_129.astype('float32'), [5, 3])), 0)
call_133 = relay.TupleGetItem(func_36_call(relay.reshape(call_129.astype('float32'), [5, 3])), 0)
bop_134 = relay.logical_or(uop_119.astype('bool'), relay.reshape(bop_106.astype('bool'), relay.shape_of(uop_119))) # shape=(16, 8)
bop_137 = relay.floor_divide(uop_103.astype('float32'), relay.reshape(var_105.astype('float32'), relay.shape_of(uop_103))) # shape=(16, 8)
var_140 = relay.var("var_140", dtype = "float32", shape = (16, 8))#candidate|140|(16, 8)|var|float32
bop_141 = relay.floor_divide(uop_119.astype('float64'), relay.reshape(var_140.astype('float64'), relay.shape_of(uop_119))) # shape=(16, 8)
bop_144 = relay.logical_or(uop_119.astype('bool'), relay.reshape(uop_81.astype('bool'), relay.shape_of(uop_119))) # shape=(16, 8)
uop_147 = relay.sinh(bop_144.astype('float32')) # shape=(16, 8)
const_149 = relay.const([[-7.452644,-0.929313,3.605548,-3.930736,-6.304321,5.983977,-6.179654,-5.474598],[3.404383,-4.880812,3.072456,-4.003502,9.054787,-0.304002,-5.546474,1.377402],[1.283835,2.576409,-7.014220,1.298413,4.517800,-5.192498,9.417615,-1.280398],[-8.150168,2.208618,2.197895,4.072401,8.800877,-3.416342,-3.323319,-2.941774],[5.976851,-8.925785,-4.660902,-1.087574,-4.571114,3.196186,9.504922,-1.472350],[-0.921083,-2.612182,3.921041,7.636584,3.557817,-2.932471,8.611028,7.623602],[-0.952514,4.287637,-2.974934,-4.068363,-3.200657,-6.835657,-7.998247,6.631681],[-0.960093,-3.083707,9.424778,-9.624209,3.697784,-9.810610,-5.082330,-9.388865],[1.353688,9.835617,8.480555,-9.941087,7.713843,-7.103376,9.000980,6.181267],[8.830264,7.962524,1.774316,8.789686,1.497427,8.149245,-9.279127,-2.709284],[3.971588,5.983326,-2.663484,-7.168383,-0.466019,9.518132,-0.605354,-6.405612],[-8.272042,1.323824,8.394718,-1.558102,-5.968201,-6.346915,3.132313,2.486629],[-0.586260,-7.047514,-4.997718,6.415355,9.932470,4.126594,9.557895,9.721228],[6.477139,8.244355,2.675046,1.863375,5.869681,-8.761583,9.102313,-6.975559],[-6.349295,-1.777940,2.933750,-3.856173,-6.940973,7.992252,1.499920,3.187735],[3.699338,9.672798,-8.235840,-0.972748,4.486610,3.352796,-7.668974,-2.162417]], dtype = "float64")#candidate|149|(16, 8)|const|float64
bop_150 = relay.less(bop_141.astype('bool'), relay.reshape(const_149.astype('bool'), relay.shape_of(bop_141))) # shape=(16, 8)
bop_153 = relay.greater_equal(uop_147.astype('bool'), relay.reshape(bop_111.astype('bool'), relay.shape_of(uop_147))) # shape=(16, 8)
uop_156 = relay.acosh(uop_119.astype('float64')) # shape=(16, 8)
bop_158 = relay.divide(uop_156.astype('float64'), relay.reshape(uop_91.astype('float64'), relay.shape_of(uop_156))) # shape=(16, 8)
uop_161 = relay.tan(bop_123.astype('float64')) # shape=(16, 8)
output = relay.Tuple([bop_48,bop_63,bop_74,bop_93,uop_101,uop_117,uop_121,call_126,var_127,call_129,const_130,call_132,bop_134,bop_137,bop_150,bop_153,bop_158,uop_161,])
output2 = relay.Tuple([bop_48,bop_63,bop_74,bop_93,uop_101,uop_117,uop_121,call_128,var_127,call_131,const_130,call_133,bop_134,bop_137,bop_150,bop_153,bop_158,uop_161,])
func_163 = relay.Function([var_38,var_54,var_62,var_66,var_85,var_105,var_127,var_140,], output)
mod['func_163'] = func_163
mod = relay.transform.InferType()(mod)
mutated_mod['func_163'] = func_163
mutated_mod = relay.transform.InferType()(mutated_mod)
func_163_call = mutated_mod.get_global_var('func_163')
var_165 = relay.var("var_165", dtype = "float64", shape = (1, 8))#candidate|165|(1, 8)|var|float64
var_166 = relay.var("var_166", dtype = "bool", shape = (16, 8))#candidate|166|(16, 8)|var|bool
var_167 = relay.var("var_167", dtype = "float64", shape = (16, 8))#candidate|167|(16, 8)|var|float64
var_168 = relay.var("var_168", dtype = "float64", shape = (16, 8))#candidate|168|(16, 8)|var|float64
var_169 = relay.var("var_169", dtype = "float32", shape = (16, 8))#candidate|169|(16, 8)|var|float32
var_170 = relay.var("var_170", dtype = "bool", shape = (16, 8))#candidate|170|(16, 8)|var|bool
var_171 = relay.var("var_171", dtype = "int8", shape = (88,))#candidate|171|(88,)|var|int8
var_172 = relay.var("var_172", dtype = "float32", shape = (16, 8))#candidate|172|(16, 8)|var|float32
call_164 = func_163_call(var_165,var_166,var_167,var_168,var_169,var_170,var_171,var_172,)
output = call_164
func_173 = relay.Function([var_165,var_166,var_167,var_168,var_169,var_170,var_171,var_172,], output)
mutated_mod['func_173'] = func_173
mutated_mod = relay.transform.InferType()(mutated_mod)
var_175 = relay.var("var_175", dtype = "bool", shape = ())#candidate|175|()|var|bool
var_176 = relay.var("var_176", dtype = "bool", shape = (12, 4))#candidate|176|(12, 4)|var|bool
bop_177 = relay.logical_or(var_175.astype('bool'), var_176.astype('bool')) # shape=(12, 4)
bop_180 = relay.not_equal(var_176.astype('bool'), var_175.astype('bool')) # shape=(12, 4)
bop_183 = relay.logical_xor(var_176.astype('int8'), relay.reshape(bop_180.astype('int8'), relay.shape_of(var_176))) # shape=(12, 4)
var_186 = relay.var("var_186", dtype = "bool", shape = ())#candidate|186|()|var|bool
bop_187 = relay.add(var_175.astype('float64'), var_186.astype('float64')) # shape=()
output = relay.Tuple([bop_177,bop_183,bop_187,])
output2 = relay.Tuple([bop_177,bop_183,bop_187,])
func_190 = relay.Function([var_175,var_176,var_186,], output)
mod['func_190'] = func_190
mod = relay.transform.InferType()(mod)
mutated_mod['func_190'] = func_190
mutated_mod = relay.transform.InferType()(mutated_mod)
func_190_call = mutated_mod.get_global_var('func_190')
var_192 = relay.var("var_192", dtype = "bool", shape = ())#candidate|192|()|var|bool
var_193 = relay.var("var_193", dtype = "bool", shape = (12, 4))#candidate|193|(12, 4)|var|bool
var_194 = relay.var("var_194", dtype = "bool", shape = ())#candidate|194|()|var|bool
call_191 = func_190_call(var_192,var_193,var_194,)
output = call_191
func_195 = relay.Function([var_192,var_193,var_194,], output)
mutated_mod['func_195'] = func_195
mutated_mod = relay.transform.InferType()(mutated_mod)
const_197 = relay.const(2.158259, dtype = "float32")#candidate|197|()|const|float32
uop_198 = relay.log10(const_197.astype('float32')) # shape=()
uop_200 = relay.log2(const_197.astype('float64')) # shape=()
uop_202 = relay.exp(uop_198.astype('float32')) # shape=()
bop_204 = relay.multiply(uop_198.astype('uint16'), const_197.astype('uint16')) # shape=()
bop_207 = relay.subtract(uop_198.astype('uint8'), uop_202.astype('uint8')) # shape=()
uop_210 = relay.asinh(const_197.astype('float32')) # shape=()
uop_212 = relay.log10(bop_204.astype('float32')) # shape=()
uop_214 = relay.sqrt(uop_212.astype('float32')) # shape=()
const_216 = relay.const([-5.832243,4.935994,5.698457,6.700268,5.748196,-4.848525,-0.365529,-1.392230,-8.860759,5.590567], dtype = "float32")#candidate|216|(10,)|const|float32
bop_217 = relay.greater_equal(uop_212.astype('bool'), const_216.astype('bool')) # shape=(10,)
uop_220 = relay.log10(uop_212.astype('float32')) # shape=()
var_222 = relay.var("var_222", dtype = "float32", shape = (6,))#candidate|222|(6,)|var|float32
bop_223 = relay.greater(uop_210.astype('bool'), var_222.astype('bool')) # shape=(6,)
bop_226 = relay.bitwise_and(uop_214.astype('int64'), uop_200.astype('int64')) # shape=()
bop_229 = relay.bitwise_or(bop_223.astype('int64'), uop_202.astype('int64')) # shape=(6,)
bop_232 = relay.add(uop_210.astype('uint8'), const_216.astype('uint8')) # shape=(10,)
uop_235 = relay.sinh(uop_200.astype('float32')) # shape=()
bop_237 = relay.multiply(uop_198.astype('float32'), bop_223.astype('float32')) # shape=(6,)
uop_240 = relay.acos(bop_226.astype('float64')) # shape=()
bop_242 = relay.floor_divide(uop_240.astype('float32'), bop_223.astype('float32')) # shape=(6,)
func_190_call = mod.get_global_var('func_190')
func_195_call = mutated_mod.get_global_var('func_195')
const_246 = relay.const([True,True,True,False,True,False,True,True,True,True,False,True,True,False,False,True,False,True,True,True,False,True,True,False,True,False,True,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,False,False,True,True,True,True], dtype = "bool")#candidate|246|(48,)|const|bool
call_245 = relay.TupleGetItem(func_190_call(relay.reshape(uop_212.astype('bool'), []), relay.reshape(const_246.astype('bool'), [12, 4]), relay.reshape(bop_226.astype('bool'), []), ), 1)
call_247 = relay.TupleGetItem(func_195_call(relay.reshape(uop_212.astype('bool'), []), relay.reshape(const_246.astype('bool'), [12, 4]), relay.reshape(bop_226.astype('bool'), []), ), 1)
var_248 = relay.var("var_248", dtype = "float64", shape = (12, 5, 7))#candidate|248|(12, 5, 7)|var|float64
bop_249 = relay.greater_equal(uop_240.astype('bool'), var_248.astype('bool')) # shape=(12, 5, 7)
bop_252 = relay.logical_xor(bop_242.astype('int64'), uop_202.astype('int64')) # shape=(6,)
var_255 = relay.var("var_255", dtype = "int64", shape = (6,))#candidate|255|(6,)|var|int64
bop_256 = relay.add(bop_252.astype('float32'), relay.reshape(var_255.astype('float32'), relay.shape_of(bop_252))) # shape=(6,)
var_259 = relay.var("var_259", dtype = "float32", shape = (6,))#candidate|259|(6,)|var|float32
bop_260 = relay.floor_mod(bop_242.astype('float32'), relay.reshape(var_259.astype('float32'), relay.shape_of(bop_242))) # shape=(6,)
bop_263 = relay.maximum(uop_220.astype('int8'), uop_202.astype('int8')) # shape=()
bop_266 = relay.greater_equal(bop_242.astype('bool'), relay.reshape(bop_260.astype('bool'), relay.shape_of(bop_242))) # shape=(6,)
uop_269 = relay.acos(bop_256.astype('float64')) # shape=(6,)
bop_271 = relay.subtract(uop_269.astype('float32'), uop_210.astype('float32')) # shape=(6,)
bop_274 = relay.multiply(uop_269.astype('uint8'), relay.reshape(bop_229.astype('uint8'), relay.shape_of(uop_269))) # shape=(6,)
bop_277 = relay.bitwise_or(uop_240.astype('uint32'), bop_204.astype('uint32')) # shape=()
bop_280 = relay.left_shift(bop_249.astype('int64'), uop_220.astype('int64')) # shape=(12, 5, 7)
uop_283 = relay.atanh(bop_274.astype('float32')) # shape=(6,)
bop_285 = relay.divide(uop_283.astype('float32'), uop_202.astype('float32')) # shape=(6,)
bop_288 = relay.multiply(uop_283.astype('int8'), uop_220.astype('int8')) # shape=(6,)
bop_291 = relay.greater(bop_288.astype('bool'), relay.reshape(bop_252.astype('bool'), relay.shape_of(bop_288))) # shape=(6,)
uop_294 = relay.cosh(uop_283.astype('float64')) # shape=(6,)
var_296 = relay.var("var_296", dtype = "float64", shape = (6,))#candidate|296|(6,)|var|float64
bop_297 = relay.minimum(uop_294.astype('float32'), relay.reshape(var_296.astype('float32'), relay.shape_of(uop_294))) # shape=(6,)
uop_300 = relay.acos(uop_294.astype('float32')) # shape=(6,)
var_302 = relay.var("var_302", dtype = "float32", shape = (6,))#candidate|302|(6,)|var|float32
bop_303 = relay.subtract(uop_300.astype('uint64'), relay.reshape(var_302.astype('uint64'), relay.shape_of(uop_300))) # shape=(6,)
uop_306 = relay.log10(bop_271.astype('float32')) # shape=(6,)
var_308 = relay.var("var_308", dtype = "float32", shape = (6,))#candidate|308|(6,)|var|float32
bop_309 = relay.bitwise_and(bop_297.astype('uint32'), relay.reshape(var_308.astype('uint32'), relay.shape_of(bop_297))) # shape=(6,)
func_190_call = mod.get_global_var('func_190')
func_195_call = mutated_mod.get_global_var('func_195')
call_312 = relay.TupleGetItem(func_190_call(relay.reshape(uop_214.astype('bool'), []), relay.reshape(const_246.astype('bool'), [12, 4]), relay.reshape(bop_263.astype('bool'), []), ), 1)
call_313 = relay.TupleGetItem(func_195_call(relay.reshape(uop_214.astype('bool'), []), relay.reshape(const_246.astype('bool'), [12, 4]), relay.reshape(bop_263.astype('bool'), []), ), 1)
uop_314 = relay.log10(bop_309.astype('float64')) # shape=(6,)
func_21_call = mod.get_global_var('func_21')
func_25_call = mutated_mod.get_global_var('func_25')
var_317 = relay.var("var_317", dtype = "int8", shape = (88,))#candidate|317|(88,)|var|int8
call_316 = relay.TupleGetItem(func_21_call(relay.reshape(var_317.astype('int8'), [11, 4, 2]), relay.reshape(var_317.astype('int8'), [11, 4, 2]), relay.reshape(var_317.astype('float64'), [11, 4, 2]), ), 0)
call_318 = relay.TupleGetItem(func_25_call(relay.reshape(var_317.astype('int8'), [11, 4, 2]), relay.reshape(var_317.astype('int8'), [11, 4, 2]), relay.reshape(var_317.astype('float64'), [11, 4, 2]), ), 0)
uop_319 = relay.sin(bop_288.astype('float32')) # shape=(6,)
output = relay.Tuple([bop_207,bop_217,bop_232,uop_235,bop_237,call_245,const_246,bop_263,bop_266,bop_277,bop_280,bop_285,bop_291,bop_303,uop_306,call_312,uop_314,call_316,var_317,uop_319,])
output2 = relay.Tuple([bop_207,bop_217,bop_232,uop_235,bop_237,call_247,const_246,bop_263,bop_266,bop_277,bop_280,bop_285,bop_291,bop_303,uop_306,call_313,uop_314,call_318,var_317,uop_319,])
func_321 = relay.Function([var_222,var_248,var_255,var_259,var_296,var_302,var_308,var_317,], output)
mod['func_321'] = func_321
mod = relay.transform.InferType()(mod)
mutated_mod['func_321'] = func_321
mutated_mod = relay.transform.InferType()(mutated_mod)
func_321_call = mutated_mod.get_global_var('func_321')
var_323 = relay.var("var_323", dtype = "float32", shape = (6,))#candidate|323|(6,)|var|float32
var_324 = relay.var("var_324", dtype = "float64", shape = (12, 5, 7))#candidate|324|(12, 5, 7)|var|float64
var_325 = relay.var("var_325", dtype = "int64", shape = (6,))#candidate|325|(6,)|var|int64
var_326 = relay.var("var_326", dtype = "float32", shape = (6,))#candidate|326|(6,)|var|float32
var_327 = relay.var("var_327", dtype = "float64", shape = (6,))#candidate|327|(6,)|var|float64
var_328 = relay.var("var_328", dtype = "float32", shape = (6,))#candidate|328|(6,)|var|float32
var_329 = relay.var("var_329", dtype = "float32", shape = (6,))#candidate|329|(6,)|var|float32
var_330 = relay.var("var_330", dtype = "int8", shape = (88,))#candidate|330|(88,)|var|int8
call_322 = func_321_call(var_323,var_324,var_325,var_326,var_327,var_328,var_329,var_330,)
output = call_322
func_331 = relay.Function([var_323,var_324,var_325,var_326,var_327,var_328,var_329,var_330,], output)
mutated_mod['func_331'] = func_331
mutated_mod = relay.transform.InferType()(mutated_mod)
const_333 = relay.const([[[8.194493,-5.165260,-9.967538,-6.404324,-7.486125,-9.484437,-5.310476,9.172279,1.431570,5.275672,-6.547895,-0.278053],[-9.648860,-3.728087,-1.265002,5.930232,5.858835,-5.258904,-0.175830,-9.215810,-2.374790,-1.893143,8.201213,9.961364],[-0.020749,4.895599,-2.162761,-5.562292,-4.649843,-8.157091,-7.496828,3.818823,3.179205,-2.714665,-5.140763,-1.567135],[1.372163,9.607625,-7.325637,2.390189,3.940537,0.415268,1.886702,-9.765656,-6.006804,-6.197483,1.064014,-5.288857],[1.388775,-1.877625,-4.016115,-9.117566,9.148998,-6.158639,-8.718449,-5.444930,7.340265,-6.589480,6.252021,-9.540639],[1.840223,-6.144541,-3.962431,6.114526,7.036465,1.729716,-2.226378,-7.324589,0.482081,3.058400,-5.742420,-3.718379],[-0.190469,-2.753026,6.913225,4.409354,2.341582,1.012118,4.246045,2.106182,-0.180157,-3.699203,1.488376,-3.136893],[7.520589,-3.101897,7.393484,2.309782,1.512473,5.190001,2.634211,8.604144,8.607409,-9.536531,7.273652,5.191100],[1.935981,-1.077758,-6.164696,7.751517,9.297128,-1.609363,-3.677873,-4.098674,2.191475,8.128259,-4.960720,-1.766552],[8.359427,-3.157982,-3.015214,9.689387,2.418617,-4.607698,-0.748015,-6.043250,-5.917275,2.275815,-8.427702,-5.483415],[1.641203,-3.256800,9.698337,9.217514,-8.482900,6.620180,-3.934553,-4.873773,3.640655,2.220852,-9.162640,2.347328],[-4.983615,-6.312816,-0.619046,4.759618,-0.433272,5.908157,-0.504065,-2.410775,6.428571,5.740136,-4.930103,4.875744],[6.442507,-5.471290,-2.743523,-9.142099,-1.276976,-8.124107,4.340740,-9.675156,8.554856,5.784927,1.294548,-6.632503],[-4.117703,-6.755186,2.146865,-0.815522,-8.467093,7.419088,-5.502439,-8.131229,-2.803721,3.513697,-6.331828,8.848381],[3.495230,4.489068,-3.062591,0.004097,5.942507,-6.310780,-3.197404,2.265497,6.353450,1.877464,-7.153349,-7.372255],[-8.970670,1.127324,2.888270,6.447611,3.600859,8.491044,-7.482681,-7.086635,-9.776946,4.243879,9.571416,-5.550685]],[[2.143790,-5.577928,7.577627,-0.636035,-2.949447,-8.648855,-8.423453,9.472501,-2.413796,5.065491,7.398235,-8.304880],[-8.922991,-4.193707,8.763615,-6.563966,1.052378,-0.617749,9.275147,-1.661633,-0.189561,-4.807864,-9.888078,6.375427],[-1.338663,-3.474687,-7.767801,-6.083691,-7.427583,6.267801,6.234024,-2.902761,-4.762528,8.537748,0.853324,-7.962082],[-7.045685,-1.786819,-1.855146,3.817711,-2.285699,-7.882521,-4.197996,-9.147935,-0.023249,-1.533927,6.216007,-1.311285],[-0.471887,-5.827333,1.812807,1.258111,9.459148,5.777013,7.818485,-8.644001,-4.847533,2.166111,0.730866,5.069911],[6.135841,0.029197,-4.204263,-1.012284,2.437719,-5.209554,3.409069,-7.351335,3.342461,-3.662333,-2.544759,-8.284120],[-0.582529,-8.026424,0.738192,1.099097,2.129873,-6.435949,-9.887681,-1.525418,9.170811,-3.860326,2.927747,7.610649],[-6.530470,5.052192,-1.639132,6.319936,0.658035,2.512434,4.940853,7.038324,8.495365,-5.802542,6.614077,-2.091411],[8.445760,9.869573,2.663386,4.776956,9.776513,9.506169,7.723118,-3.256325,-3.831694,3.409421,-4.242114,-7.610465],[-0.661846,2.268656,-1.016551,-0.830796,-9.015908,-2.332147,-7.038868,-1.802338,-8.715280,-5.544152,-1.452823,5.036522],[-5.541121,2.469805,9.772491,-4.534555,-5.141228,5.281313,2.067437,3.657727,-2.602265,-2.563988,8.635937,-7.376587],[-9.355169,2.189922,1.160214,2.201881,-0.086883,-0.848035,-3.509493,3.988198,-8.494783,7.710031,7.044465,2.339860],[-4.873030,-8.231280,-1.804972,-3.162722,1.236032,-1.893217,-6.143096,-2.149347,-4.060311,-1.621873,-2.135668,8.094156],[0.856758,-7.355198,8.961876,-0.122463,3.778155,-5.247788,4.466525,-7.247114,-8.477840,8.355183,-8.385567,5.435397],[-9.525484,-3.732831,-4.775310,5.005678,-3.555530,-8.974027,5.629077,-6.025778,5.248422,1.547756,8.602357,-4.169891],[-8.015132,-1.396020,4.267957,0.012183,1.070692,-6.096208,5.905223,5.011223,-3.312186,-3.044891,-0.141306,-7.076114]],[[2.212893,-0.569301,-3.793731,-3.076617,-3.507717,7.751926,7.891574,2.582197,-1.419753,-3.031075,8.248165,-5.513681],[3.262616,-6.560479,4.069269,7.314285,-5.957025,2.731009,-4.273853,5.467688,-1.242615,1.905098,1.108638,-5.946934],[-4.511063,5.741126,8.035385,4.823513,-4.063789,-6.289667,3.661783,-8.826288,-1.740989,-5.053120,-6.886937,2.520465],[-9.101159,-9.768036,-5.733258,-9.226005,7.215373,-6.193873,0.827231,7.737545,2.198258,2.296782,0.631436,-1.832506],[2.135959,1.140279,-4.217375,-9.950166,3.829157,-9.026284,0.668960,-8.814944,6.440959,7.671287,6.361425,-8.781004],[2.222670,3.829015,-6.059872,-0.748658,-6.659501,2.357881,-2.591742,0.552202,-7.915208,5.399319,-4.155545,-2.481821],[8.065670,-1.905525,-8.757686,5.524129,-8.867772,-4.323214,0.481689,-5.151920,-1.275982,-2.300555,8.256223,-6.622440],[-5.581251,-7.755886,-8.505833,-9.807098,-7.889346,-9.253263,6.475662,-1.697153,-6.708067,-6.815593,6.666383,9.713809],[-3.347031,2.179651,5.006542,7.100377,5.369261,9.487012,-5.545684,0.259449,-6.598863,6.587135,-0.575943,-4.798128],[7.283349,-0.124077,4.856022,-3.890158,2.268122,-7.765374,-6.195575,-7.844096,0.126892,7.511931,7.697486,-1.458674],[-2.537486,-5.823380,-7.424921,1.326350,5.912216,-9.322989,9.460707,6.907128,-7.818518,9.744109,5.524487,5.126425],[8.274396,2.452322,0.510502,7.749639,0.272438,-2.662971,-2.565734,0.034713,4.097816,-3.971783,8.997748,-5.446560],[6.647740,-9.082489,1.009713,8.344621,-7.326352,-6.400599,9.266687,3.682328,3.517326,-9.554779,7.322163,4.818633],[4.591919,8.528577,8.668469,0.383820,8.258981,-3.874670,3.458921,-2.280101,-3.252007,0.328009,-9.740526,-9.433051],[2.965183,2.290290,4.136674,9.046615,-9.618664,5.008601,-5.598742,3.051071,-4.674102,4.899239,7.532060,4.391866],[-3.802486,0.353042,2.366551,-1.896279,-1.276624,3.013746,-2.915272,6.274221,4.350391,1.135273,8.163699,8.058826]],[[-3.811721,7.791701,-4.852048,5.505513,6.908304,1.505852,-7.285164,8.221847,3.615846,-5.897694,-6.865037,3.346375],[-3.101877,4.752603,5.274303,5.485484,0.029094,3.816689,1.131174,-5.457826,-8.836731,6.368773,6.147442,1.415873],[6.353610,5.589250,3.394558,8.208402,1.645671,3.644295,-7.500438,-3.501349,8.396659,1.704470,-9.437631,-1.895897],[-0.392518,7.086736,-0.682049,-5.222322,3.082208,0.938523,-4.701578,-0.215280,-1.395347,-9.601522,5.982760,-0.142139],[4.433780,0.553173,-9.171453,-5.596961,-7.461198,-1.547074,-3.616033,-2.890377,-8.048427,3.603268,1.538073,-0.175568],[6.166737,-5.940421,6.216398,-5.458768,-8.888005,-1.159295,8.981804,4.038294,5.194755,-7.758693,8.947359,0.262168],[5.414990,-8.747798,-8.168741,-0.497738,-1.138556,-6.238441,9.054436,-5.331221,7.942501,-6.161691,1.814660,-3.899068],[-0.667338,-8.700575,4.428711,0.364204,-2.755639,5.377610,0.509123,8.119551,-1.483639,6.940125,-5.515720,-1.013618],[7.776192,-5.356100,-8.050653,5.416406,0.040765,-1.040483,7.115999,9.689781,-3.118748,-6.940317,-7.301425,5.317511],[-9.937963,3.419178,-3.313308,-4.324939,-1.326802,-3.683228,9.347893,6.629233,6.370887,4.016982,-3.879562,5.350757],[-6.588168,-3.389627,1.006022,6.722330,-2.366403,-6.283372,-2.960584,-4.122454,7.029771,-5.901664,-7.499544,0.117542],[1.265888,-9.226794,-6.195070,-0.127682,-5.227105,5.599723,-5.359981,0.121890,5.459570,7.040059,-0.241751,7.238498],[-0.553133,-1.026606,5.821191,4.846297,-2.412035,-7.480121,7.761489,5.634694,9.318255,7.820635,-0.403203,5.330997],[-7.472031,8.953821,-9.161185,-7.962680,-7.451418,-0.344012,-2.841569,1.852207,3.848634,8.118738,-9.108142,-8.896027],[-7.607356,-8.968592,-1.309910,-8.165818,-7.805348,9.787001,-6.425428,-1.544200,-0.381572,0.047687,-7.050977,-9.307500],[-4.882730,-7.374860,-8.830811,1.077914,-0.217072,3.128140,8.539643,8.163565,-0.844080,-4.766676,-6.719487,1.948819]],[[7.724465,2.685093,9.092735,-4.765759,-3.235309,0.474457,2.990705,6.245502,-4.501107,6.143744,-3.473871,6.270973],[6.689146,-4.666834,-9.979700,0.574353,-7.802569,5.958235,-9.482866,8.799132,-3.894718,4.443452,0.203735,8.388125],[-1.936271,2.074714,8.645083,6.959485,7.618644,-5.985843,1.719663,5.295939,7.017163,-5.649914,-3.723150,-1.935333],[-2.317907,0.921118,-0.022602,8.268959,9.710003,4.426767,1.249827,5.061958,-4.951452,4.066803,8.076504,2.758756],[7.249824,-8.219004,-9.372826,8.883632,3.420945,-6.405081,5.310111,-6.774245,5.118843,-7.680132,-1.022566,5.450591],[0.355038,-4.642689,6.020099,7.475833,0.589182,0.420440,-4.434962,-4.213011,5.613460,7.179316,-8.464503,0.303893],[-6.198352,4.029208,1.488564,2.546774,9.431008,-3.455151,-9.465566,0.998936,3.562105,4.517633,9.088113,4.462575],[-1.407148,-4.356059,-5.477213,-2.054833,2.820663,8.908424,-4.088240,9.024241,5.730159,6.381913,-3.739975,2.630324],[6.293305,4.658537,1.623584,8.360118,-5.731541,-9.076493,6.355820,3.593667,-9.411678,5.228330,9.782826,-5.906192],[-6.281767,-3.503555,9.864769,8.005074,-7.832639,1.292702,8.485518,-9.597422,-8.703592,1.145559,1.875733,-2.910162],[5.385065,4.713522,7.539581,9.188544,4.900233,-0.348800,-2.485443,6.944360,-8.956474,-9.742092,0.410020,9.130453],[9.884606,1.180917,0.092102,7.710926,9.371199,-8.225596,-5.462662,7.986400,5.844296,-1.880291,7.857972,2.705890],[0.713362,4.982188,-4.667743,-6.301573,1.883788,-7.491328,-1.326421,-9.886765,-1.420120,-8.161869,-6.104494,-8.454857],[9.687818,3.467106,-4.835996,-0.959097,-3.113177,-4.277094,0.038395,2.446325,-2.231155,6.047851,9.017216,4.857876],[-7.184364,-1.496850,0.280572,1.149535,-5.963438,0.161123,1.034601,-7.692700,6.515671,-4.626489,6.793036,-0.325433],[6.114836,-2.012024,2.181735,4.214178,0.422992,-7.454352,-2.600168,3.245492,9.173300,-9.126711,8.982442,-9.292809]],[[3.453921,6.279327,-3.025589,3.017960,3.058158,-7.829461,6.274140,5.432531,-7.350151,8.320599,2.803082,1.642520],[0.521687,2.415859,-6.693520,8.111890,-5.264537,-0.086890,-5.658282,-8.370267,-4.728756,-0.299680,-9.006147,-1.810370],[-4.659283,-2.084214,2.021512,-2.276764,3.950744,7.220403,3.059486,2.645878,8.002718,5.917098,6.486109,7.382866],[-6.249835,9.994967,4.455770,0.880307,9.111134,6.877391,5.311453,3.176682,7.368325,-5.459909,-7.061046,-9.081108],[-7.678130,7.216669,-2.914595,2.470896,0.677905,9.295194,-4.697444,-9.259552,-0.481473,-4.352953,3.408582,-7.616680],[-5.622697,5.198813,0.456823,-2.312218,1.115907,4.588424,5.065679,0.546226,-9.463550,7.079934,3.293857,-2.901035],[-5.614516,-6.444780,1.795364,-1.229237,0.044106,-8.531690,-1.728254,-5.397451,-7.420187,0.090338,-2.021033,-2.065251],[1.705763,-3.208168,3.979593,8.822873,2.845395,4.314071,-2.137702,3.463095,-5.642445,-1.041590,-3.405540,-2.743016],[1.334600,-9.634010,-3.930030,-6.286324,5.250241,9.841145,8.116610,-7.573514,-3.747305,8.656838,1.212282,-0.635357],[-0.662738,-9.287025,-7.941954,-1.983049,-3.348246,1.964108,7.211462,5.179360,-6.440935,-4.336922,8.657761,9.049339],[-1.905500,-4.354437,7.355149,5.244616,-8.179673,-9.275614,8.776272,-1.853368,-4.465271,-0.338019,0.377597,-3.681194],[-2.705587,3.817915,6.784438,6.662375,-9.375847,4.407486,3.465983,6.832667,5.579435,-4.304017,-5.447709,-8.761350],[-0.634776,4.535661,-4.326641,-4.525344,-6.857227,-8.385649,-5.468386,3.477635,-9.207703,-7.575285,-2.248702,3.935416],[7.498953,-9.278098,-1.667189,-6.311829,6.315450,-4.846896,7.593749,9.194149,-0.692406,4.645313,7.466000,2.010765],[-2.210509,5.572305,-5.291619,-6.501067,-6.509051,1.715649,2.397469,-6.598951,4.312250,4.625681,8.260976,-4.046991],[-5.864116,-8.360271,0.072800,3.322946,1.964576,-0.834840,9.607167,0.832267,6.916157,-0.615692,9.713020,1.359264]],[[1.534402,2.140804,2.768829,7.990717,-2.914669,-6.413984,4.178803,9.926011,-6.076713,-9.578310,-1.926185,-4.216992],[6.223627,-2.598962,1.561596,9.118483,-1.147969,4.386594,5.349904,-8.971964,-9.454365,3.083336,-1.959485,-3.304165],[-6.712696,7.812122,-6.370020,-2.790573,-2.048470,-4.803208,-9.769912,0.038283,5.639539,3.239941,3.032893,-0.786366],[-2.473627,5.660440,-2.632528,3.619958,3.520871,2.990201,-0.875898,6.969819,-8.937652,-7.872472,0.627191,-1.593669],[-9.751287,9.503893,8.488687,6.994232,8.018411,-2.719961,-1.770957,-2.936673,-2.220400,-3.181475,3.420941,-5.266573],[8.262789,4.855638,-4.068294,6.172576,2.145322,-9.753604,-5.583556,-9.730714,-9.956360,7.773231,-8.699480,-3.583685],[6.568082,-0.410556,-8.679226,6.956333,6.380818,2.028542,-4.281094,4.746802,9.717891,-4.905822,0.041929,-6.243358],[8.529119,4.828665,9.828286,4.401915,-2.274877,-6.337182,-9.670046,-2.430523,-2.418344,8.032041,2.796520,-5.380412],[-9.064085,-5.213003,5.644965,0.967053,4.838117,-4.856965,9.417409,0.713839,0.281659,-7.016844,3.307653,-6.991001],[-8.027755,-7.597069,-9.852049,9.837825,2.324421,-1.306365,-4.620808,-1.401154,-1.327024,-7.995486,-3.778809,1.844502],[2.495261,6.249116,5.258834,-2.095703,8.221653,5.062342,1.268212,-7.671914,-3.408872,0.065594,-2.051857,-1.226319],[2.345768,-4.589614,0.431633,8.345983,-9.216690,3.650244,-7.374869,6.132729,0.159464,6.186220,8.776015,0.709638],[4.478649,-4.892804,-4.642357,-0.591013,-2.331475,2.780886,3.780663,-3.773215,7.127347,5.176179,-0.441096,4.258442],[4.746994,-0.808937,-5.166835,-2.787034,7.936711,-8.301497,-0.968899,8.389665,2.134869,-9.419987,7.458029,-1.862544],[-0.059614,5.601251,5.875137,-6.316164,1.760343,6.695019,8.719824,4.886852,8.834841,-1.279054,2.324790,-0.874391],[8.693486,0.665175,4.849098,3.787434,6.433589,-5.921220,-4.712150,8.027824,-6.665741,5.890512,-1.686300,-7.803195]],[[-1.587811,2.729288,-7.435367,8.141554,-0.059317,-8.646361,-1.689630,-5.892048,-9.362288,-4.141319,3.036986,5.567860],[9.168106,6.675141,8.759753,0.545984,3.617608,6.885139,-5.626244,1.933237,7.679031,-7.063973,8.064310,6.889195],[-3.369092,-4.798359,6.350262,7.704659,3.570045,6.748571,-2.214350,-8.713541,1.295906,8.172580,-1.963461,8.953100],[-4.861912,-1.168557,-1.887031,-2.648297,5.991423,-3.795174,-7.466501,1.629884,4.568160,-7.163974,6.263048,3.427780],[6.554315,-1.793642,5.772980,5.441049,-3.558032,9.222535,-1.759020,8.921058,4.182525,-7.825670,9.864690,7.461446],[-1.313806,-9.634491,-1.703886,7.133395,-8.220437,-9.837891,5.471778,4.596336,2.084477,-0.171897,-3.162329,6.409834],[9.640809,8.553364,-8.870264,3.474218,2.868463,-6.695783,2.539392,1.937907,-8.393395,4.349815,2.325701,8.036521],[-7.547448,-9.787804,8.437684,-5.286968,-9.145686,6.457086,-0.785415,6.091339,-4.096488,3.306402,3.211870,5.224632],[-7.669226,7.311619,7.171673,-5.360248,-5.178121,3.042371,0.666939,9.382337,4.342429,-6.981529,4.735743,8.832248],[3.490551,-9.769561,6.824784,-6.676417,-3.758806,-4.027418,-8.508917,5.330567,8.217627,-6.196120,-5.569165,-8.994854],[-0.097002,1.757207,7.878858,4.755000,-3.793849,9.971223,4.612512,4.657577,-9.852570,-8.667986,5.759815,4.933010],[-7.937628,1.148229,6.567974,-5.585357,-1.905177,-3.513950,3.632924,-9.892226,9.653559,0.311367,-2.177507,-2.676271],[-7.618309,3.583878,2.817722,5.004290,2.234234,-6.627353,-5.162138,-4.478282,6.121215,-0.937351,0.421253,-8.395413],[2.380517,3.116898,-0.826740,-5.871280,-9.623243,-7.891318,-4.311194,9.649810,-0.131919,7.658423,6.336447,9.713024],[-2.162634,4.027320,1.474723,-1.895450,0.872734,-1.520237,8.652571,1.993899,-0.832728,9.915510,2.712447,-9.689665],[7.460290,-5.015189,-1.491584,3.903413,-3.984031,-3.029826,-0.739687,-0.480623,-5.916031,1.731144,6.911507,-6.374546]],[[2.026611,-6.592686,-6.621852,-3.811107,-7.748740,-8.956314,7.371353,9.482811,-9.083172,9.701185,-0.404320,2.228405],[-3.196551,1.165261,3.134293,1.918180,4.816537,8.130735,3.532456,3.672553,-2.878896,-8.512078,1.752690,4.514764],[7.228407,-1.043053,-9.711682,-1.524749,1.452955,-7.176628,8.864631,6.767216,-8.706012,0.895011,-8.951870,1.707856],[-2.021577,-0.350235,-1.827412,-3.589498,-4.111070,2.042567,-6.570123,2.946785,7.607382,-2.171027,-9.266106,-9.318234],[-6.117017,-0.966104,-1.095904,8.737258,3.652903,0.414218,-8.004083,3.725435,-7.418830,2.547164,-5.143083,-4.746365],[3.845982,3.291110,-5.184877,-4.297164,1.884334,-6.042792,-6.256873,-3.491314,2.503465,0.123628,4.520444,8.552504],[-6.760058,-9.703906,0.236547,-6.687023,0.482897,-5.767516,8.430889,-2.000529,0.189797,7.991675,8.856106,0.370838],[4.520660,-0.391139,9.318292,-8.508533,-2.159787,4.522047,-5.940576,-6.474355,6.251813,2.843202,6.730435,9.977672],[-3.960021,6.846283,-6.648717,3.861574,6.889228,7.868512,2.749958,-9.618155,-4.838984,7.852498,-7.341776,0.719890],[9.076895,-7.540116,-4.496718,8.487502,-8.007358,-7.022592,-5.181409,-6.253675,1.154243,-4.500694,-9.630948,7.536623],[-5.371602,5.866442,-5.913215,-3.710852,8.154958,8.386973,-3.695288,8.005846,2.102424,-2.647962,2.127510,6.868966],[-2.605573,7.126566,1.016655,0.789162,1.923790,-9.217768,7.843684,0.274771,6.444076,2.100975,-6.786591,6.947307],[-5.312992,2.521943,-4.145996,4.269049,-8.067510,2.591202,2.815235,-9.902173,0.358229,-6.719459,3.144136,-9.533729],[-7.761165,6.629294,-4.058669,-1.835872,-8.921625,-1.567488,2.341290,4.641566,-5.915260,3.289642,1.641337,-3.566886],[-9.558550,-8.715887,1.034771,-2.553327,-3.660251,-6.676996,-6.608720,8.626100,-0.573810,-5.561989,7.802870,0.672404],[-3.282785,2.765710,-7.504451,3.803286,9.786991,8.223121,-6.811325,-1.422798,5.705484,0.172107,-9.614968,-2.402676]],[[-3.625202,-7.215791,-3.504151,8.796253,-1.465683,-1.187681,-5.540250,1.292194,0.896399,-6.646345,-9.787082,-0.752015],[5.106973,-7.402016,8.568585,-4.707716,8.626092,7.077064,1.790125,-0.182709,-1.257382,-1.132090,-9.091779,-5.163452],[-3.704184,6.159093,3.155936,-4.319094,1.741668,-3.002808,3.725515,-7.720953,0.193627,-7.650983,-6.417280,-3.363165],[-0.027714,-5.950025,-6.109211,-4.971976,2.529974,-8.520373,-7.724754,-7.176047,2.589686,-7.852680,5.020047,8.065147],[-1.174125,1.298839,-7.439580,8.080612,2.561879,-5.374666,-3.452274,-0.239436,-9.006026,1.931728,-2.712966,4.972099],[-4.439575,-4.114404,-3.302664,7.881131,-4.044951,-8.420162,-0.735042,9.771675,5.469829,-0.430110,-1.887546,9.989669],[4.401262,0.248736,-4.294219,8.368188,-4.381491,0.405327,3.986449,-1.941075,9.290845,-2.339131,-9.187074,5.304378],[0.994320,-2.451123,7.597315,9.026104,-9.318393,-4.282159,2.548315,6.073692,6.018698,-3.010995,7.715624,-7.850049],[6.713487,7.936131,-3.050520,7.855069,-4.437915,-7.008607,-4.642300,-6.096081,-9.800780,7.895784,-1.597926,-3.234787],[1.305169,-1.691845,4.664833,-0.717867,1.250953,-4.569298,-2.848200,-4.050362,4.902722,-2.678467,-3.129864,-0.717285],[9.056682,-7.547061,4.428215,-1.960040,5.742857,8.984913,0.133873,-9.855391,4.487837,8.507729,-4.818139,-3.616645],[-7.403232,2.895979,0.872585,0.405542,-6.766170,-8.646109,-2.082011,-5.437179,9.391785,-5.819483,4.012629,-8.125639],[-3.610957,0.097544,2.447967,-2.387013,-9.348504,-5.875604,-2.460730,5.182957,4.437580,-2.553152,-5.421726,0.613991],[-3.527352,-9.490151,-0.037490,2.676025,-3.883438,-1.055135,-6.766544,8.856868,-6.987619,2.845180,-1.999103,7.509966],[-7.052116,2.103493,8.194484,8.169115,6.220343,7.153203,-0.478284,-7.879590,6.524564,-3.653480,8.749842,6.011942],[6.656727,-6.108645,5.512841,2.952479,4.517432,-2.098768,2.378967,4.403542,0.881371,7.129521,9.171091,4.530031]],[[-4.728771,-3.147367,7.682980,9.256567,-4.524336,-8.755022,-2.376865,-0.896626,4.232386,-5.220209,-4.668195,1.897693],[-3.978005,2.807423,-2.436479,9.019412,-4.526190,-5.258382,0.632399,-2.513485,-3.110445,9.635820,-3.722227,-0.748954],[-8.838769,-6.785427,-8.743833,-6.768407,-5.058683,-8.700437,-2.443854,9.149476,-2.925311,6.950179,-9.317807,8.415158],[-0.134042,7.869828,-4.931532,-9.015590,-7.275112,3.039253,-3.562379,5.322456,1.878137,7.709294,5.904879,-1.933253],[0.622759,2.752167,0.779683,-8.139895,5.483453,-8.513417,3.754830,-5.181316,-5.413252,4.524773,-3.133112,0.827759],[-4.742247,4.131146,-9.923596,9.657513,9.566357,6.003674,-0.125081,4.803344,9.585080,9.941201,-2.251126,-7.077046],[-4.993977,-3.729325,-1.436615,-5.535415,-4.932214,5.225604,-8.368683,-1.236098,1.670916,-3.339295,2.615748,-3.103735],[-2.879318,-5.905102,7.104224,4.879857,-9.972029,-6.445497,2.289830,6.738421,1.921022,-4.152181,-6.645330,8.006914],[-5.735084,7.940694,2.140463,-1.632500,2.038963,9.031764,5.597736,-7.005995,-6.906255,1.639308,-9.402382,0.359916],[1.675417,6.536760,2.410431,9.530444,-1.904832,0.374347,-4.991952,6.044032,-7.295388,2.854408,8.582819,6.131186],[-8.642103,-7.291739,-4.368874,-6.087544,7.971245,9.351142,8.288105,0.194030,4.139689,3.816900,-4.082647,5.288972],[1.337394,8.129797,7.046615,-3.127102,8.074746,-4.141085,9.994227,7.855505,-9.457589,8.419854,5.792404,7.100617],[6.875880,9.231928,-7.310471,5.794182,4.694458,-0.751500,3.162515,-7.927147,8.322524,-6.016246,-5.311772,-8.731178],[-5.175185,-9.262732,-5.418248,-9.643594,-0.608962,6.758156,9.538001,0.216101,2.791660,2.793015,-5.409409,3.499354],[-5.200098,-4.638522,6.388203,8.472957,-1.794538,-0.148762,8.012911,3.114409,-7.814694,-9.616277,4.083880,-3.646370],[-7.894630,0.975183,4.965842,-8.184589,6.387772,-4.691083,2.193357,-9.553128,9.931748,-7.595488,-2.524273,4.235868]]], dtype = "float64")#candidate|333|(11, 16, 12)|const|float64
uop_334 = relay.log(const_333.astype('float64')) # shape=(11, 16, 12)
var_336 = relay.var("var_336", dtype = "float64", shape = (11, 16, 12))#candidate|336|(11, 16, 12)|var|float64
bop_337 = relay.multiply(uop_334.astype('int64'), relay.reshape(var_336.astype('int64'), relay.shape_of(uop_334))) # shape=(11, 16, 12)
bop_340 = relay.bitwise_or(const_333.astype('uint8'), relay.reshape(uop_334.astype('uint8'), relay.shape_of(const_333))) # shape=(11, 16, 12)
uop_343 = relay.cosh(uop_334.astype('float64')) # shape=(11, 16, 12)
output = relay.Tuple([bop_337,bop_340,uop_343,])
output2 = relay.Tuple([bop_337,bop_340,uop_343,])
F = relay.Function([var_336,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_336,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_336= np.arraydtype='float64')
module1.set_input('var_336', input_336)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_336, )
res3 = intrp3.evaluate()(input_336, )
res4 = intrp4.evaluate()(input_336, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
module5.set_input('var_336', input_336)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_336, )
res7 = intrp7.evaluate()(input_336, )
res8 = intrp8.evaluate()(input_336, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
module9.set_input('var_336', input_336)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_336, )
res11 = intrp11.evaluate()(input_336, )
res12 = intrp12.evaluate()(input_336, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
module13.set_input('var_336', input_336)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_336, )
res15 = intrp15.evaluate()(input_336, )
res16 = intrp16.evaluate()(input_336, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
module17.set_input('var_336', input_336)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_336, )
res19 = intrp19.evaluate()(input_336, )
res20 = intrp20.evaluate()(input_336, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
module21.set_input('var_336', input_336)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_336, )
res23 = intrp23.evaluate()(input_336, )
res24 = intrp24.evaluate()(input_336, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()

'''9: TVMFuncCall
8: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::transform::Pass, tvm::IRModule)>::AssignTypedLambda<tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}>(tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
7: tvm::transform::Pass::operator()(tvm::IRModule) const
6: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::LazyGradientInit(tvm::RelayExpr const&, tvm::IRModule)
0: tvm::relay::CheckFeature(tvm::RelayExpr const&, tvm::relay::FeatureSet const&)

'''