import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "uint16", shape = (3, 10))#candidate|0|(3, 10)|var|uint16
var_1 = relay.var("var_1", dtype = "uint16", shape = (3, 10))#candidate|1|(3, 10)|var|uint16
bop_2 = relay.greater_equal(var_0.astype('bool'), relay.reshape(var_1.astype('bool'), relay.shape_of(var_0))) # shape=(3, 10)
uop_5 = relay.asinh(var_1.astype('float64')) # shape=(3, 10)
bop_7 = relay.right_shift(bop_2.astype('uint64'), relay.reshape(uop_5.astype('uint64'), relay.shape_of(bop_2))) # shape=(3, 10)
uop_10 = relay.sqrt(bop_2.astype('float32')) # shape=(3, 10)
var_12 = relay.var("var_12", dtype = "float64", shape = (3, 10))#candidate|12|(3, 10)|var|float64
bop_13 = relay.greater_equal(uop_5.astype('bool'), relay.reshape(var_12.astype('bool'), relay.shape_of(uop_5))) # shape=(3, 10)
bop_16 = relay.floor_divide(bop_2.astype('float64'), relay.reshape(uop_10.astype('float64'), relay.shape_of(bop_2))) # shape=(3, 10)
uop_19 = relay.cosh(bop_13.astype('float32')) # shape=(3, 10)
bop_21 = relay.floor_mod(uop_19.astype('float32'), relay.reshape(bop_16.astype('float32'), relay.shape_of(uop_19))) # shape=(3, 10)
const_24 = relay.const([[-3.433172,-6.448084,8.900975,-4.641147,6.594161,7.128945,-8.469240,5.787841,5.383039,6.353390],[2.576506,-1.794124,-9.843610,-9.704461,3.839414,7.053682,4.957863,7.754745,8.478835,-0.229763],[3.779290,-8.512052,1.645344,-3.684567,-0.071728,2.237118,-4.351136,8.790058,5.692112,-6.733614]], dtype = "float64")#candidate|24|(3, 10)|const|float64
bop_25 = relay.left_shift(bop_16.astype('uint32'), relay.reshape(const_24.astype('uint32'), relay.shape_of(bop_16))) # shape=(3, 10)
uop_28 = relay.log2(bop_7.astype('float64')) # shape=(3, 10)
uop_30 = relay.sinh(uop_28.astype('float64')) # shape=(3, 10)
var_32 = relay.var("var_32", dtype = "float64", shape = (3, 10))#candidate|32|(3, 10)|var|float64
bop_33 = relay.left_shift(uop_30.astype('int8'), relay.reshape(var_32.astype('int8'), relay.shape_of(uop_30))) # shape=(3, 10)
uop_36 = relay.sqrt(bop_33.astype('float32')) # shape=(3, 10)
output = relay.Tuple([bop_21,bop_25,uop_36,])
output2 = relay.Tuple([bop_21,bop_25,uop_36,])
func_38 = relay.Function([var_0,var_1,var_12,var_32,], output)
mod['func_38'] = func_38
mod = relay.transform.InferType()(mod)
mutated_mod['func_38'] = func_38
mutated_mod = relay.transform.InferType()(mutated_mod)
func_38_call = mutated_mod.get_global_var('func_38')
var_40 = relay.var("var_40", dtype = "uint16", shape = (3, 10))#candidate|40|(3, 10)|var|uint16
var_41 = relay.var("var_41", dtype = "uint16", shape = (3, 10))#candidate|41|(3, 10)|var|uint16
var_42 = relay.var("var_42", dtype = "float64", shape = (3, 10))#candidate|42|(3, 10)|var|float64
var_43 = relay.var("var_43", dtype = "float64", shape = (3, 10))#candidate|43|(3, 10)|var|float64
call_39 = func_38_call(var_40,var_41,var_42,var_43,)
output = call_39
func_44 = relay.Function([var_40,var_41,var_42,var_43,], output)
mutated_mod['func_44'] = func_44
mutated_mod = relay.transform.InferType()(mutated_mod)
var_46 = relay.var("var_46", dtype = "float32", shape = ())#candidate|46|()|var|float32
uop_47 = relay.sinh(var_46.astype('float32')) # shape=()
uop_49 = relay.rsqrt(uop_47.astype('float32')) # shape=()
var_51 = relay.var("var_51", dtype = "float32", shape = (16, 11, 16))#candidate|51|(16, 11, 16)|var|float32
bop_52 = relay.bitwise_and(var_46.astype('int64'), var_51.astype('int64')) # shape=(16, 11, 16)
bop_55 = relay.power(var_46.astype('float64'), var_51.astype('float64')) # shape=(16, 11, 16)
var_58 = relay.var("var_58", dtype = "float32", shape = ())#candidate|58|()|var|float32
bop_59 = relay.add(var_46.astype('int64'), var_58.astype('int64')) # shape=()
bop_62 = relay.bitwise_or(uop_49.astype('uint32'), var_51.astype('uint32')) # shape=(16, 11, 16)
bop_65 = relay.equal(var_46.astype('bool'), bop_62.astype('bool')) # shape=(16, 11, 16)
func_38_call = mod.get_global_var('func_38')
func_44_call = mutated_mod.get_global_var('func_44')
const_69 = relay.const([-4,-7,1,-9,5,10,4,8,1,10,-3,-9,6,4,-6,-2,-1,9,8,-8,-10,3,-6,3,-2,-9,-10,7,-8,-3], dtype = "uint16")#candidate|69|(30,)|const|uint16
call_68 = relay.TupleGetItem(func_38_call(relay.reshape(const_69.astype('uint16'), [3, 10]), relay.reshape(const_69.astype('uint16'), [3, 10]), relay.reshape(const_69.astype('float64'), [3, 10]), relay.reshape(const_69.astype('float64'), [3, 10]), ), 0)
call_70 = relay.TupleGetItem(func_44_call(relay.reshape(const_69.astype('uint16'), [3, 10]), relay.reshape(const_69.astype('uint16'), [3, 10]), relay.reshape(const_69.astype('float64'), [3, 10]), relay.reshape(const_69.astype('float64'), [3, 10]), ), 0)
uop_71 = relay.sinh(uop_47.astype('float64')) # shape=()
uop_73 = relay.asin(uop_49.astype('float64')) # shape=()
output = relay.Tuple([bop_52,bop_55,bop_59,bop_65,call_68,const_69,uop_71,uop_73,])
output2 = relay.Tuple([bop_52,bop_55,bop_59,bop_65,call_70,const_69,uop_71,uop_73,])
func_75 = relay.Function([var_46,var_51,var_58,], output)
mod['func_75'] = func_75
mod = relay.transform.InferType()(mod)
mutated_mod['func_75'] = func_75
mutated_mod = relay.transform.InferType()(mutated_mod)
func_75_call = mutated_mod.get_global_var('func_75')
var_77 = relay.var("var_77", dtype = "float32", shape = ())#candidate|77|()|var|float32
var_78 = relay.var("var_78", dtype = "float32", shape = (16, 11, 16))#candidate|78|(16, 11, 16)|var|float32
var_79 = relay.var("var_79", dtype = "float32", shape = ())#candidate|79|()|var|float32
call_76 = func_75_call(var_77,var_78,var_79,)
output = call_76
func_80 = relay.Function([var_77,var_78,var_79,], output)
mutated_mod['func_80'] = func_80
mutated_mod = relay.transform.InferType()(mutated_mod)
var_82 = relay.var("var_82", dtype = "uint64", shape = (5, 8, 1))#candidate|82|(5, 8, 1)|var|uint64
var_83 = relay.var("var_83", dtype = "uint64", shape = (5, 8, 9))#candidate|83|(5, 8, 9)|var|uint64
bop_84 = relay.bitwise_xor(var_82.astype('uint64'), var_83.astype('uint64')) # shape=(5, 8, 9)
bop_87 = relay.divide(bop_84.astype('float32'), var_82.astype('float32')) # shape=(5, 8, 9)
var_90 = relay.var("var_90", dtype = "uint64", shape = (5, 8, 5))#candidate|90|(5, 8, 5)|var|uint64
bop_91 = relay.equal(var_82.astype('bool'), var_90.astype('bool')) # shape=(5, 8, 5)
uop_94 = relay.tan(bop_87.astype('float64')) # shape=(5, 8, 9)
var_96 = relay.var("var_96", dtype = "float64", shape = (5, 8, 9))#candidate|96|(5, 8, 9)|var|float64
bop_97 = relay.less(uop_94.astype('bool'), relay.reshape(var_96.astype('bool'), relay.shape_of(uop_94))) # shape=(5, 8, 9)
uop_100 = relay.sqrt(bop_97.astype('float32')) # shape=(5, 8, 9)
bop_102 = relay.mod(uop_94.astype('float64'), relay.reshape(bop_97.astype('float64'), relay.shape_of(uop_94))) # shape=(5, 8, 9)
uop_105 = relay.erf(uop_100.astype('float32')) # shape=(5, 8, 9)
uop_107 = relay.log(uop_105.astype('float32')) # shape=(5, 8, 9)
uop_109 = relay.atanh(uop_105.astype('float32')) # shape=(5, 8, 9)
uop_111 = relay.log10(uop_109.astype('float64')) # shape=(5, 8, 9)
uop_113 = relay.cos(uop_105.astype('float64')) # shape=(5, 8, 9)
uop_115 = relay.cosh(uop_111.astype('float32')) # shape=(5, 8, 9)
var_117 = relay.var("var_117", dtype = "float32", shape = (5, 8, 9))#candidate|117|(5, 8, 9)|var|float32
bop_118 = relay.minimum(uop_115.astype('uint8'), relay.reshape(var_117.astype('uint8'), relay.shape_of(uop_115))) # shape=(5, 8, 9)
output = relay.Tuple([bop_91,bop_102,uop_107,uop_113,bop_118,])
output2 = relay.Tuple([bop_91,bop_102,uop_107,uop_113,bop_118,])
func_121 = relay.Function([var_82,var_83,var_90,var_96,var_117,], output)
mod['func_121'] = func_121
mod = relay.transform.InferType()(mod)
mutated_mod['func_121'] = func_121
mutated_mod = relay.transform.InferType()(mutated_mod)
func_121_call = mutated_mod.get_global_var('func_121')
var_123 = relay.var("var_123", dtype = "uint64", shape = (5, 8, 1))#candidate|123|(5, 8, 1)|var|uint64
var_124 = relay.var("var_124", dtype = "uint64", shape = (5, 8, 9))#candidate|124|(5, 8, 9)|var|uint64
var_125 = relay.var("var_125", dtype = "uint64", shape = (5, 8, 5))#candidate|125|(5, 8, 5)|var|uint64
var_126 = relay.var("var_126", dtype = "float64", shape = (5, 8, 9))#candidate|126|(5, 8, 9)|var|float64
var_127 = relay.var("var_127", dtype = "float32", shape = (5, 8, 9))#candidate|127|(5, 8, 9)|var|float32
call_122 = func_121_call(var_123,var_124,var_125,var_126,var_127,)
output = call_122
func_128 = relay.Function([var_123,var_124,var_125,var_126,var_127,], output)
mutated_mod['func_128'] = func_128
mutated_mod = relay.transform.InferType()(mutated_mod)
const_130 = relay.const([-0.742471,3.209772,0.944287,-7.144093,8.938689,-4.524348], dtype = "float64")#candidate|130|(6,)|const|float64
var_131 = relay.var("var_131", dtype = "float64", shape = (6,))#candidate|131|(6,)|var|float64
bop_132 = relay.floor_mod(const_130.astype('float64'), relay.reshape(var_131.astype('float64'), relay.shape_of(const_130))) # shape=(6,)
var_135 = relay.var("var_135", dtype = "float64", shape = (6,))#candidate|135|(6,)|var|float64
bop_136 = relay.minimum(var_131.astype('int32'), relay.reshape(var_135.astype('int32'), relay.shape_of(var_131))) # shape=(6,)
uop_139 = relay.sinh(bop_136.astype('float32')) # shape=(6,)
output = relay.Tuple([bop_132,uop_139,])
output2 = relay.Tuple([bop_132,uop_139,])
func_141 = relay.Function([var_131,var_135,], output)
mod['func_141'] = func_141
mod = relay.transform.InferType()(mod)
var_142 = relay.var("var_142", dtype = "float64", shape = (6,))#candidate|142|(6,)|var|float64
var_143 = relay.var("var_143", dtype = "float64", shape = (6,))#candidate|143|(6,)|var|float64
output = func_141(var_142,var_143,)
func_144 = relay.Function([var_142,var_143,], output)
mutated_mod['func_144'] = func_144
mutated_mod = relay.transform.InferType()(mutated_mod)
var_146 = relay.var("var_146", dtype = "float64", shape = ())#candidate|146|()|var|float64
uop_147 = relay.sigmoid(var_146.astype('float64')) # shape=()
uop_149 = relay.tan(uop_147.astype('float64')) # shape=()
bop_151 = relay.left_shift(uop_149.astype('uint8'), var_146.astype('uint8')) # shape=()
uop_154 = relay.rsqrt(bop_151.astype('float64')) # shape=()
const_156 = relay.const([[-5,-4,-10,-2,-3,8,-9,-7,-5,-2],[-7,-4,-3,-7,-9,2,9,-6,-1,9],[7,-7,4,-7,-9,7,7,5,8,-10],[-4,-2,-8,-1,9,3,1,4,-6,-6],[3,2,-7,-2,8,5,-4,-6,-7,1],[1,4,8,7,1,8,9,6,7,-2]], dtype = "uint8")#candidate|156|(6, 10)|const|uint8
bop_157 = relay.multiply(bop_151.astype('uint8'), const_156.astype('uint8')) # shape=(6, 10)
uop_160 = relay.cosh(uop_154.astype('float32')) # shape=()
uop_162 = relay.log(uop_160.astype('float32')) # shape=()
bop_164 = relay.power(uop_154.astype('float32'), bop_157.astype('float32')) # shape=(6, 10)
output = relay.Tuple([uop_162,bop_164,])
output2 = relay.Tuple([uop_162,bop_164,])
func_167 = relay.Function([var_146,], output)
mod['func_167'] = func_167
mod = relay.transform.InferType()(mod)
var_168 = relay.var("var_168", dtype = "float64", shape = ())#candidate|168|()|var|float64
output = func_167(var_168)
func_169 = relay.Function([var_168], output)
mutated_mod['func_169'] = func_169
mutated_mod = relay.transform.InferType()(mutated_mod)
var_171 = relay.var("var_171", dtype = "float64", shape = (5,))#candidate|171|(5,)|var|float64
uop_172 = relay.tan(var_171.astype('float64')) # shape=(5,)
func_121_call = mod.get_global_var('func_121')
func_128_call = mutated_mod.get_global_var('func_128')
var_175 = relay.var("var_175", dtype = "uint64", shape = (40,))#candidate|175|(40,)|var|uint64
var_176 = relay.var("var_176", dtype = "uint64", shape = (360,))#candidate|176|(360,)|var|uint64
const_177 = relay.const([[10,6,-8,-8,-4,9,-8,-6,-2,10,-4,1,7,8,5,3,3,-1,4,8],[-6,4,6,8,4,-7,-2,-6,10,8,-7,3,2,2,3,-6,7,-2,3,10],[1,-8,10,3,-5,5,4,3,-2,-2,3,6,9,4,2,-9,-3,-6,-10,-3],[2,6,-8,1,-4,-8,2,-8,4,5,5,-8,3,-1,5,-8,4,2,-3,-1],[-8,3,-5,-5,10,-6,5,3,-10,-9,-8,3,-10,-3,7,-9,5,5,4,8],[9,9,9,-2,-8,-5,9,-8,2,4,-7,4,-7,-1,-10,-5,2,3,-9,2],[5,4,5,2,3,-7,-9,2,10,8,-4,-1,8,8,8,-5,-7,-8,10,10],[-6,-4,7,-4,1,9,7,-2,3,-4,-1,-7,-5,3,-4,9,-1,8,10,7],[4,-7,-7,5,10,-4,-6,9,3,-9,6,-9,-2,3,7,-5,7,1,2,7],[-3,3,9,5,8,8,-3,-9,4,-10,3,3,9,7,9,-5,2,-4,-4,2]], dtype = "uint64")#candidate|177|(10, 20)|const|uint64
call_174 = relay.TupleGetItem(func_121_call(relay.reshape(var_175.astype('uint64'), [5, 8, 1]), relay.reshape(var_176.astype('uint64'), [5, 8, 9]), relay.reshape(const_177.astype('uint64'), [5, 8, 5]), relay.reshape(var_176.astype('float64'), [5, 8, 9]), relay.reshape(var_176.astype('float32'), [5, 8, 9]), ), 3)
call_178 = relay.TupleGetItem(func_128_call(relay.reshape(var_175.astype('uint64'), [5, 8, 1]), relay.reshape(var_176.astype('uint64'), [5, 8, 9]), relay.reshape(const_177.astype('uint64'), [5, 8, 5]), relay.reshape(var_176.astype('float64'), [5, 8, 9]), relay.reshape(var_176.astype('float32'), [5, 8, 9]), ), 3)
var_179 = relay.var("var_179", dtype = "float64", shape = (5,))#candidate|179|(5,)|var|float64
bop_180 = relay.equal(uop_172.astype('bool'), relay.reshape(var_179.astype('bool'), relay.shape_of(uop_172))) # shape=(5,)
uop_183 = relay.cosh(const_177.astype('float64')) # shape=(10, 20)
output = relay.Tuple([call_174,var_175,var_176,bop_180,uop_183,])
output2 = relay.Tuple([call_178,var_175,var_176,bop_180,uop_183,])
func_185 = relay.Function([var_171,var_175,var_176,var_179,], output)
mod['func_185'] = func_185
mod = relay.transform.InferType()(mod)
mutated_mod['func_185'] = func_185
mutated_mod = relay.transform.InferType()(mutated_mod)
func_185_call = mutated_mod.get_global_var('func_185')
var_187 = relay.var("var_187", dtype = "float64", shape = (5,))#candidate|187|(5,)|var|float64
var_188 = relay.var("var_188", dtype = "uint64", shape = (40,))#candidate|188|(40,)|var|uint64
var_189 = relay.var("var_189", dtype = "uint64", shape = (360,))#candidate|189|(360,)|var|uint64
var_190 = relay.var("var_190", dtype = "float64", shape = (5,))#candidate|190|(5,)|var|float64
call_186 = func_185_call(var_187,var_188,var_189,var_190,)
output = call_186
func_191 = relay.Function([var_187,var_188,var_189,var_190,], output)
mutated_mod['func_191'] = func_191
mutated_mod = relay.transform.InferType()(mutated_mod)
const_193 = relay.const([[-0.247889,-2.537064,-6.278756,3.019680,0.924729,9.186082,-4.188956,-3.346222,4.354913,8.731648,4.512839],[3.709697,-2.902894,9.791598,-8.833083,-8.815216,-1.241182,-6.191938,-0.276714,-3.326188,2.909625,2.998506],[-1.958778,9.098943,5.017274,-5.505970,-6.362930,4.691684,-6.437948,-4.913035,-8.084700,-1.123708,-2.107042],[1.628324,-0.372699,-1.517819,0.520738,-4.571188,-0.720938,3.850864,-6.866364,-4.471975,5.340625,-3.429815],[-9.428950,-3.737024,6.310403,6.071155,-9.363182,-7.516773,-8.643378,-3.773114,1.357139,8.157694,-7.184414],[5.831627,-0.148790,7.079438,-9.788382,7.665753,6.502032,5.418489,-8.083355,-8.196646,7.781633,-1.965736],[5.754037,6.863241,5.485665,-5.579604,3.717540,-0.275628,5.978183,8.057959,4.359277,-9.066460,4.997454],[-5.801568,-8.466164,-7.338028,0.356663,8.253339,1.763687,0.270098,3.227557,-3.696336,-1.990030,-3.334830],[3.272812,9.102804,5.043084,6.743286,1.099210,-2.257520,-3.789436,7.366665,9.426119,-4.444166,0.580099],[9.709655,-2.884707,4.870235,4.757654,-8.044186,0.369612,2.712310,-4.319937,4.555740,-9.585493,6.915176],[-7.846664,5.340157,-5.793112,-7.163585,1.074017,-6.197401,-3.903460,-5.510767,-6.321520,-4.170729,-3.396951],[-5.454321,-1.435813,-7.862791,3.985295,8.445199,-8.621862,-3.174049,-2.054235,-8.712522,-2.863550,9.833361],[-1.650756,-9.421172,9.915787,9.189056,7.858850,-2.567365,2.155126,-2.577898,-3.966259,7.562016,-6.456118],[1.866795,-2.227374,3.601200,4.957051,6.916669,-8.959938,-1.098734,-9.483324,-9.202970,3.416732,6.298199],[3.306585,8.697813,9.640574,9.015399,-5.793369,4.450276,-8.435659,-6.717735,1.465076,-2.015936,0.550295]], dtype = "float64")#candidate|193|(15, 11)|const|float64
uop_194 = relay.sinh(const_193.astype('float64')) # shape=(15, 11)
bop_196 = relay.logical_xor(const_193.astype('int8'), relay.reshape(uop_194.astype('int8'), relay.shape_of(const_193))) # shape=(15, 11)
func_185_call = mod.get_global_var('func_185')
func_191_call = mutated_mod.get_global_var('func_191')
var_200 = relay.var("var_200", dtype = "float64", shape = (5,))#candidate|200|(5,)|var|float64
var_201 = relay.var("var_201", dtype = "uint64", shape = (1, 40))#candidate|201|(1, 40)|var|uint64
var_202 = relay.var("var_202", dtype = "uint64", shape = (360,))#candidate|202|(360,)|var|uint64
call_199 = relay.TupleGetItem(func_185_call(relay.reshape(var_200.astype('float64'), [5,]), relay.reshape(var_201.astype('uint64'), [40,]), relay.reshape(var_202.astype('uint64'), [360,]), relay.reshape(var_200.astype('float64'), [5,]), ), 0)
call_203 = relay.TupleGetItem(func_191_call(relay.reshape(var_200.astype('float64'), [5,]), relay.reshape(var_201.astype('uint64'), [40,]), relay.reshape(var_202.astype('uint64'), [360,]), relay.reshape(var_200.astype('float64'), [5,]), ), 0)
bop_204 = relay.multiply(const_193.astype('int64'), relay.reshape(uop_194.astype('int64'), relay.shape_of(const_193))) # shape=(15, 11)
var_207 = relay.var("var_207", dtype = "float64", shape = (15, 11))#candidate|207|(15, 11)|var|float64
bop_208 = relay.multiply(uop_194.astype('uint8'), relay.reshape(var_207.astype('uint8'), relay.shape_of(uop_194))) # shape=(15, 11)
uop_211 = relay.erf(bop_208.astype('float64')) # shape=(15, 11)
var_213 = relay.var("var_213", dtype = "float64", shape = (15, 11))#candidate|213|(15, 11)|var|float64
bop_214 = relay.logical_and(uop_211.astype('bool'), relay.reshape(var_213.astype('bool'), relay.shape_of(uop_211))) # shape=(15, 11)
uop_217 = relay.acosh(bop_214.astype('float32')) # shape=(15, 11)
var_219 = relay.var("var_219", dtype = "float32", shape = (15, 11))#candidate|219|(15, 11)|var|float32
bop_220 = relay.bitwise_or(uop_217.astype('uint64'), relay.reshape(var_219.astype('uint64'), relay.shape_of(uop_217))) # shape=(15, 11)
bop_223 = relay.greater_equal(uop_211.astype('bool'), relay.reshape(var_219.astype('bool'), relay.shape_of(uop_211))) # shape=(15, 11)
uop_226 = relay.acosh(bop_214.astype('float64')) # shape=(15, 11)
bop_228 = relay.logical_and(bop_223.astype('bool'), relay.reshape(bop_196.astype('bool'), relay.shape_of(bop_223))) # shape=(15, 11)
bop_231 = relay.minimum(uop_217.astype('float64'), relay.reshape(var_213.astype('float64'), relay.shape_of(uop_217))) # shape=(15, 11)
output = relay.Tuple([call_199,var_200,var_201,var_202,bop_204,bop_220,uop_226,bop_228,bop_231,])
output2 = relay.Tuple([call_203,var_200,var_201,var_202,bop_204,bop_220,uop_226,bop_228,bop_231,])
func_234 = relay.Function([var_200,var_201,var_202,var_207,var_213,var_219,], output)
mod['func_234'] = func_234
mod = relay.transform.InferType()(mod)
var_235 = relay.var("var_235", dtype = "float64", shape = (5,))#candidate|235|(5,)|var|float64
var_236 = relay.var("var_236", dtype = "uint64", shape = (1, 40))#candidate|236|(1, 40)|var|uint64
var_237 = relay.var("var_237", dtype = "uint64", shape = (360,))#candidate|237|(360,)|var|uint64
var_238 = relay.var("var_238", dtype = "float64", shape = (15, 11))#candidate|238|(15, 11)|var|float64
var_239 = relay.var("var_239", dtype = "float64", shape = (15, 11))#candidate|239|(15, 11)|var|float64
var_240 = relay.var("var_240", dtype = "float32", shape = (15, 11))#candidate|240|(15, 11)|var|float32
output = func_234(var_235,var_236,var_237,var_238,var_239,var_240,)
func_241 = relay.Function([var_235,var_236,var_237,var_238,var_239,var_240,], output)
mutated_mod['func_241'] = func_241
mutated_mod = relay.transform.InferType()(mutated_mod)
const_243 = relay.const([[-6,7,-8,-6],[4,3,-5,-6],[-9,5,1,-4],[-4,1,-3,1],[10,5,-2,8],[-8,-1,-5,5],[-8,-7,8,-2],[-4,4,-6,7]], dtype = "uint16")#candidate|243|(8, 4)|const|uint16
var_244 = relay.var("var_244", dtype = "uint16", shape = (8, 4))#candidate|244|(8, 4)|var|uint16
bop_245 = relay.logical_xor(const_243.astype('uint16'), relay.reshape(var_244.astype('uint16'), relay.shape_of(const_243))) # shape=(8, 4)
uop_248 = relay.log(bop_245.astype('float32')) # shape=(8, 4)
uop_250 = relay.sinh(bop_245.astype('float64')) # shape=(8, 4)
uop_252 = relay.exp(uop_248.astype('float64')) # shape=(8, 4)
bop_254 = relay.add(uop_248.astype('int8'), relay.reshape(uop_252.astype('int8'), relay.shape_of(uop_248))) # shape=(8, 4)
bop_257 = relay.greater_equal(const_243.astype('bool'), relay.reshape(bop_245.astype('bool'), relay.shape_of(const_243))) # shape=(8, 4)
output = relay.Tuple([uop_250,bop_254,bop_257,])
output2 = relay.Tuple([uop_250,bop_254,bop_257,])
func_260 = relay.Function([var_244,], output)
mod['func_260'] = func_260
mod = relay.transform.InferType()(mod)
var_261 = relay.var("var_261", dtype = "uint16", shape = (8, 4))#candidate|261|(8, 4)|var|uint16
output = func_260(var_261)
func_262 = relay.Function([var_261], output)
mutated_mod['func_262'] = func_262
mutated_mod = relay.transform.InferType()(mutated_mod)
var_264 = relay.var("var_264", dtype = "float64", shape = (5, 6))#candidate|264|(5, 6)|var|float64
uop_265 = relay.log2(var_264.astype('float64')) # shape=(5, 6)
uop_267 = relay.sin(var_264.astype('float64')) # shape=(5, 6)
bop_269 = relay.logical_and(var_264.astype('bool'), relay.reshape(uop_265.astype('bool'), relay.shape_of(var_264))) # shape=(5, 6)
uop_272 = relay.atanh(uop_265.astype('float64')) # shape=(5, 6)
bop_274 = relay.mod(uop_272.astype('float32'), relay.reshape(var_264.astype('float32'), relay.shape_of(uop_272))) # shape=(5, 6)
output = relay.Tuple([uop_267,bop_269,bop_274,])
output2 = relay.Tuple([uop_267,bop_269,bop_274,])
func_277 = relay.Function([var_264,], output)
mod['func_277'] = func_277
mod = relay.transform.InferType()(mod)
var_278 = relay.var("var_278", dtype = "float64", shape = (5, 6))#candidate|278|(5, 6)|var|float64
output = func_277(var_278)
func_279 = relay.Function([var_278], output)
mutated_mod['func_279'] = func_279
mutated_mod = relay.transform.InferType()(mutated_mod)
var_281 = relay.var("var_281", dtype = "float64", shape = (16, 16, 10))#candidate|281|(16, 16, 10)|var|float64
var_282 = relay.var("var_282", dtype = "float64", shape = (16, 16, 10))#candidate|282|(16, 16, 10)|var|float64
bop_283 = relay.floor_divide(var_281.astype('float64'), relay.reshape(var_282.astype('float64'), relay.shape_of(var_281))) # shape=(16, 16, 10)
bop_286 = relay.logical_or(var_282.astype('bool'), relay.reshape(var_281.astype('bool'), relay.shape_of(var_282))) # shape=(16, 16, 10)
output = relay.Tuple([bop_283,bop_286,])
output2 = relay.Tuple([bop_283,bop_286,])
func_289 = relay.Function([var_281,var_282,], output)
mod['func_289'] = func_289
mod = relay.transform.InferType()(mod)
mutated_mod['func_289'] = func_289
mutated_mod = relay.transform.InferType()(mutated_mod)
func_289_call = mutated_mod.get_global_var('func_289')
var_291 = relay.var("var_291", dtype = "float64", shape = (16, 16, 10))#candidate|291|(16, 16, 10)|var|float64
var_292 = relay.var("var_292", dtype = "float64", shape = (16, 16, 10))#candidate|292|(16, 16, 10)|var|float64
call_290 = func_289_call(var_291,var_292,)
output = call_290
func_293 = relay.Function([var_291,var_292,], output)
mutated_mod['func_293'] = func_293
mutated_mod = relay.transform.InferType()(mutated_mod)
var_295 = relay.var("var_295", dtype = "float64", shape = (6, 4, 4))#candidate|295|(6, 4, 4)|var|float64
const_296 = relay.const([[[-6.295238,6.030871,-7.169765,-0.897872],[5.000910,0.312672,-1.642830,-1.683808],[-0.318854,8.407142,1.027238,9.811964],[3.042890,1.727804,7.047594,-6.365292]],[[-6.490828,-3.802618,7.271800,-2.118917],[-3.449990,6.762847,-8.709391,-6.309556],[-1.437333,4.614872,9.745369,1.808186],[6.357479,6.740560,-5.115505,-0.909414]],[[3.809486,8.284958,8.550783,-7.158168],[9.709978,-8.500174,0.723687,-5.522103],[-3.637888,5.566718,-0.120916,-1.407847],[6.373830,-4.212895,-4.800063,-3.961308]],[[2.599178,-8.685620,-6.583309,5.642250],[-0.625043,3.627834,-7.550713,7.806036],[-6.640762,-4.208219,-3.348908,-1.722552],[-2.533392,2.213089,9.816924,-5.185436]],[[8.858544,-4.970163,1.044305,8.060732],[1.454269,6.984669,-0.687820,5.936096],[-2.678335,9.829073,-0.577362,-6.509467],[-2.370998,6.455032,-0.139250,0.730841]],[[-6.635049,7.377704,8.088414,-9.240697],[2.756900,-4.620043,-4.839843,-3.312144],[4.128491,7.406315,2.119683,-0.156713],[6.802127,-8.360043,1.396648,5.972867]]], dtype = "float64")#candidate|296|(6, 4, 4)|const|float64
bop_297 = relay.equal(var_295.astype('bool'), relay.reshape(const_296.astype('bool'), relay.shape_of(var_295))) # shape=(6, 4, 4)
output = bop_297
output2 = bop_297
func_300 = relay.Function([var_295,], output)
mod['func_300'] = func_300
mod = relay.transform.InferType()(mod)
mutated_mod['func_300'] = func_300
mutated_mod = relay.transform.InferType()(mutated_mod)
var_301 = relay.var("var_301", dtype = "float64", shape = (6, 4, 4))#candidate|301|(6, 4, 4)|var|float64
func_300_call = mutated_mod.get_global_var('func_300')
call_302 = func_300_call(var_301)
output = call_302
func_303 = relay.Function([var_301], output)
mutated_mod['func_303'] = func_303
mutated_mod = relay.transform.InferType()(mutated_mod)
var_305 = relay.var("var_305", dtype = "float64", shape = (8, 13))#candidate|305|(8, 13)|var|float64
uop_306 = relay.log2(var_305.astype('float64')) # shape=(8, 13)
uop_308 = relay.cos(uop_306.astype('float32')) # shape=(8, 13)
uop_310 = relay.cos(uop_308.astype('float32')) # shape=(8, 13)
uop_312 = relay.atanh(uop_310.astype('float64')) # shape=(8, 13)
output = uop_312
output2 = uop_312
func_314 = relay.Function([var_305,], output)
mod['func_314'] = func_314
mod = relay.transform.InferType()(mod)
var_315 = relay.var("var_315", dtype = "float64", shape = (8, 13))#candidate|315|(8, 13)|var|float64
output = func_314(var_315)
func_316 = relay.Function([var_315], output)
mutated_mod['func_316'] = func_316
mutated_mod = relay.transform.InferType()(mutated_mod)
var_318 = relay.var("var_318", dtype = "float64", shape = ())#candidate|318|()|var|float64
const_319 = relay.const([-2.677506,8.708266,-0.861179,-6.443856,7.244620], dtype = "float64")#candidate|319|(5,)|const|float64
bop_320 = relay.floor_mod(var_318.astype('float64'), const_319.astype('float64')) # shape=(5,)
bop_323 = relay.logical_xor(const_319.astype('uint8'), var_318.astype('uint8')) # shape=(5,)
uop_326 = relay.rsqrt(bop_323.astype('float64')) # shape=(5,)
uop_328 = relay.acosh(uop_326.astype('float64')) # shape=(5,)
bop_330 = relay.minimum(uop_326.astype('uint32'), relay.reshape(bop_323.astype('uint32'), relay.shape_of(uop_326))) # shape=(5,)
const_333 = relay.const([-6.623138,0.955683,6.789614,-2.092393,8.731064], dtype = "float64")#candidate|333|(5,)|const|float64
bop_334 = relay.maximum(uop_328.astype('int16'), relay.reshape(const_333.astype('int16'), relay.shape_of(uop_328))) # shape=(5,)
bop_337 = relay.floor_mod(uop_328.astype('float64'), relay.reshape(uop_326.astype('float64'), relay.shape_of(uop_328))) # shape=(5,)
uop_340 = relay.atan(uop_326.astype('float64')) # shape=(5,)
uop_342 = relay.cos(bop_334.astype('float32')) # shape=(5,)
func_260_call = mod.get_global_var('func_260')
func_262_call = mutated_mod.get_global_var('func_262')
var_345 = relay.var("var_345", dtype = "uint16", shape = (32,))#candidate|345|(32,)|var|uint16
call_344 = relay.TupleGetItem(func_260_call(relay.reshape(var_345.astype('uint16'), [8, 4])), 0)
call_346 = relay.TupleGetItem(func_262_call(relay.reshape(var_345.astype('uint16'), [8, 4])), 0)
bop_347 = relay.bitwise_and(uop_342.astype('int32'), relay.reshape(bop_320.astype('int32'), relay.shape_of(uop_342))) # shape=(5,)
uop_350 = relay.exp(bop_330.astype('float64')) # shape=(5,)
bop_352 = relay.subtract(uop_342.astype('float32'), relay.reshape(const_319.astype('float32'), relay.shape_of(uop_342))) # shape=(5,)
var_355 = relay.var("var_355", dtype = "float32", shape = (5,))#candidate|355|(5,)|var|float32
bop_356 = relay.greater_equal(uop_342.astype('bool'), relay.reshape(var_355.astype('bool'), relay.shape_of(uop_342))) # shape=(5,)
var_359 = relay.var("var_359", dtype = "uint32", shape = (5,))#candidate|359|(5,)|var|uint32
bop_360 = relay.power(bop_330.astype('float32'), relay.reshape(var_359.astype('float32'), relay.shape_of(bop_330))) # shape=(5,)
uop_363 = relay.atan(bop_356.astype('float64')) # shape=(5,)
uop_365 = relay.sinh(uop_363.astype('float32')) # shape=(5,)
uop_367 = relay.asinh(uop_363.astype('float64')) # shape=(5,)
const_369 = relay.const([-7.812660,1.691336,9.481497,-9.465756,-4.949009], dtype = "float64")#candidate|369|(5,)|const|float64
bop_370 = relay.logical_xor(uop_363.astype('int8'), relay.reshape(const_369.astype('int8'), relay.shape_of(uop_363))) # shape=(5,)
var_373 = relay.var("var_373", dtype = "float64", shape = (5,))#candidate|373|(5,)|var|float64
bop_374 = relay.left_shift(bop_337.astype('int16'), relay.reshape(var_373.astype('int16'), relay.shape_of(bop_337))) # shape=(5,)
uop_377 = relay.sigmoid(bop_370.astype('float32')) # shape=(5,)
output = relay.Tuple([uop_340,call_344,var_345,bop_347,uop_350,bop_352,bop_360,uop_365,uop_367,bop_374,uop_377,])
output2 = relay.Tuple([uop_340,call_346,var_345,bop_347,uop_350,bop_352,bop_360,uop_365,uop_367,bop_374,uop_377,])
F = relay.Function([var_318,var_345,var_355,var_359,var_373,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_318,var_345,var_355,var_359,var_373,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_318= np.array(-2.674954, dtype='float64')
module1.set_input('var_318', input_318)
input_345= np.array([7,2,6,-8,-9,5,7,-4,-3,-9,3,-4,8,-4,3,3,-7,-1,-4,5,-6,-5,-6,-6,-5,4,10,3,-1,2,-7,8], dtype='uint16')
module1.set_input('var_345', input_345)
input_355= np.array([-2.322565,-3.327284,1.131564,5.832572,-1.926472], dtype='float32')
module1.set_input('var_355', input_355)
input_359= np.array([1,-5,-4,10,3], dtype='uint32')
module1.set_input('var_359', input_359)
input_373= np.array([-9.653570,-6.154584,-8.926066,-3.639603,3.755725], dtype='float64')
module1.set_input('var_373', input_373)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_318, input_345, input_355, input_359, input_373, )
res3 = intrp3.evaluate()(input_318, input_345, input_355, input_359, input_373, )
res4 = intrp4.evaluate()(input_318, input_345, input_355, input_359, input_373, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
module5.set_input('var_318', input_318)
module5.set_input('var_345', input_345)
module5.set_input('var_355', input_355)
module5.set_input('var_359', input_359)
module5.set_input('var_373', input_373)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_318, input_345, input_355, input_359, input_373, )
res7 = intrp7.evaluate()(input_318, input_345, input_355, input_359, input_373, )
res8 = intrp8.evaluate()(input_318, input_345, input_355, input_359, input_373, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
module9.set_input('var_318', input_318)
module9.set_input('var_345', input_345)
module9.set_input('var_355', input_355)
module9.set_input('var_359', input_359)
module9.set_input('var_373', input_373)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_318, input_345, input_355, input_359, input_373, )
res11 = intrp11.evaluate()(input_318, input_345, input_355, input_359, input_373, )
res12 = intrp12.evaluate()(input_318, input_345, input_355, input_359, input_373, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
module13.set_input('var_318', input_318)
module13.set_input('var_345', input_345)
module13.set_input('var_355', input_355)
module13.set_input('var_359', input_359)
module13.set_input('var_373', input_373)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_318, input_345, input_355, input_359, input_373, )
res15 = intrp15.evaluate()(input_318, input_345, input_355, input_359, input_373, )
res16 = intrp16.evaluate()(input_318, input_345, input_355, input_359, input_373, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
module17.set_input('var_318', input_318)
module17.set_input('var_345', input_345)
module17.set_input('var_355', input_355)
module17.set_input('var_359', input_359)
module17.set_input('var_373', input_373)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_318, input_345, input_355, input_359, input_373, )
res19 = intrp19.evaluate()(input_318, input_345, input_355, input_359, input_373, )
res20 = intrp20.evaluate()(input_318, input_345, input_355, input_359, input_373, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
module21.set_input('var_318', input_318)
module21.set_input('var_345', input_345)
module21.set_input('var_355', input_355)
module21.set_input('var_359', input_359)
module21.set_input('var_373', input_373)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_318, input_345, input_355, input_359, input_373, )
res23 = intrp23.evaluate()(input_318, input_345, input_355, input_359, input_373, )
res24 = intrp24.evaluate()(input_318, input_345, input_355, input_359, input_373, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()

'''6: TVMFuncCall
5: _ZNSt17_Function_handlerIFvN3tvm7runtime7
4: tvm::runtime::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const [clone .isra.808]
3: tvm::runtime::GraphExecutorCreate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module const&, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
2: tvm::runtime::GraphExecutor::Init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
1: tvm::runtime::GraphExecutor::SetupOpExecs()
0: tvm::runtime::GraphExecutor::CreateTVMOp(tvm::runtime::TVMOpParam const&, std::vector<DLTensor, std::allocator<DLTensor> > const&)

'''