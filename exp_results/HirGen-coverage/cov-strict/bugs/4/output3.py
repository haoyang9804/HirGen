import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_70 = relay.var("var_70", dtype = "float64", shape = (3,))#candidate|70|(3,)|var|float64
var_71 = relay.var("var_71", dtype = "float64", shape = (3,))#candidate|71|(3,)|var|float64
bop_72 = relay.subtract(var_70.astype('float64'), relay.reshape(var_71.astype('float64'), relay.shape_of(var_70))) # shape=(3,)
bop_76 = relay.bitwise_and(var_70.astype('uint16'), relay.reshape(bop_72.astype('uint16'), relay.shape_of(var_70))) # shape=(3,)
output = bop_76
output2 = bop_76
func_81 = relay.Function([var_70,var_71,], output)
mod['func_81'] = func_81
mod = relay.transform.InferType()(mod)
var_82 = relay.var("var_82", dtype = "float64", shape = (3,))#candidate|82|(3,)|var|float64
var_83 = relay.var("var_83", dtype = "float64", shape = (3,))#candidate|83|(3,)|var|float64
output = func_81(var_82,var_83,)
func_84 = relay.Function([var_82,var_83,], output)
mutated_mod['func_84'] = func_84
mutated_mod = relay.transform.InferType()(mutated_mod)
var_86 = relay.var("var_86", dtype = "float64", shape = ())#candidate|86|()|var|float64
var_87 = relay.var("var_87", dtype = "float64", shape = (16, 10))#candidate|87|(16, 10)|var|float64
bop_88 = relay.add(var_86.astype('float64'), var_87.astype('float64')) # shape=(16, 10)
uop_93 = relay.log10(var_87.astype('float64')) # shape=(16, 10)
bop_95 = relay.equal(uop_93.astype('bool'), relay.reshape(bop_88.astype('bool'), relay.shape_of(uop_93))) # shape=(16, 10)
output = relay.Tuple([bop_95,])
output2 = relay.Tuple([bop_95,])
func_99 = relay.Function([var_86,var_87,], output)
mod['func_99'] = func_99
mod = relay.transform.InferType()(mod)
var_100 = relay.var("var_100", dtype = "float64", shape = ())#candidate|100|()|var|float64
var_101 = relay.var("var_101", dtype = "float64", shape = (16, 10))#candidate|101|(16, 10)|var|float64
output = func_99(var_100,var_101,)
func_102 = relay.Function([var_100,var_101,], output)
mutated_mod['func_102'] = func_102
mutated_mod = relay.transform.InferType()(mutated_mod)
const_104 = relay.const([3.311379,0.099540,-7.128694,-8.615310,8.879794,-7.355490,0.297912,0.089497,-2.031827,3.631826,2.208652,-6.504428,1.053581,-9.350586,5.616744,-5.188114], dtype = "float32")#candidate|104|(16,)|const|float32
uop_105 = relay.log2(const_104.astype('float32')) # shape=(16,)
bop_109 = relay.logical_and(uop_105.astype('bool'), relay.reshape(const_104.astype('bool'), relay.shape_of(uop_105))) # shape=(16,)
bop_114 = relay.multiply(bop_109.astype('int32'), relay.reshape(uop_105.astype('int32'), relay.shape_of(bop_109))) # shape=(16,)
uop_121 = relay.rsqrt(uop_105.astype('float32')) # shape=(16,)
const_125 = relay.const([-6.321057,0.703121,3.167094,-5.378449,-7.238477,-8.474087,-8.831710,7.769902,-2.745670,4.223510,-6.823341,-8.587417,8.644209,6.579778,5.866837,0.620770], dtype = "float32")#candidate|125|(16,)|const|float32
bop_126 = relay.equal(uop_121.astype('bool'), relay.reshape(const_125.astype('bool'), relay.shape_of(uop_121))) # shape=(16,)
func_99_call = mod.get_global_var('func_99')
func_102_call = mutated_mod.get_global_var('func_102')
const_130 = relay.const(-5.448873, dtype = "float64")#candidate|130|()|const|float64
const_131 = relay.const([-6.042439,-1.850296,5.793991,-9.066587,-1.881138,8.805399,-5.444490,-0.249121,6.173580,3.642534,9.040826,-4.514877,-2.908990,-0.437397,0.944114,0.867253,-4.117342,-2.568881,-1.256806,-4.679404,-6.512503,-8.303680,-4.295552,7.943237,2.721748,3.451521,-5.737156,8.719374,-0.640261,9.227773,9.070782,3.960285,-5.736096,7.552173,-8.907395,3.253402,6.026000,-2.156843,-8.074165,2.006152,-0.025585,-9.019578,6.956694,5.330001,0.365307,5.087922,2.921877,-0.736370,-3.453116,1.128813,8.631034,0.881623,-1.314056,0.844532,-7.033084,-7.030009,1.820436,7.266835,-1.777035,8.860399,8.563403,7.802949,5.433285,-7.928576,4.025549,1.499469,8.696771,-2.743868,-6.587256,-2.257395,-4.167749,0.866742,-4.980565,-4.117436,9.994595,-6.332530,-4.495149,2.906232,-6.863366,8.731929,4.699789,-3.871080,-8.070132,2.976395,-2.268995,7.663073,-7.979537,2.312290,2.738309,-7.465489,7.122621,-1.380028,-0.395564,5.579189,6.928939,-5.353858,3.243292,3.065970,2.494695,-9.750715,3.778105,4.123264,-0.533464,-8.929304,-6.660207,-9.048027,2.726075,-2.042457,5.871557,-9.825192,-5.581272,8.153692,-8.541054,7.788088,0.140988,0.012461,8.353656,1.481213,5.139712,-5.394650,-9.890629,4.810937,6.467748,6.362491,-5.999804,0.631335,-7.691599,-0.919505,-1.295145,7.824176,-0.798642,-4.044011,2.148197,7.350937,7.284205,-6.944198,0.193288,3.784855,8.594632,6.117647,2.741692,9.363975,9.608690,-7.890253,7.155329,-7.790811,-0.572986,-8.117378,-9.119197,3.636039,2.368472,3.564972,1.595526,5.639204,6.874598,-1.851855,0.258974,-7.462141,-5.574262,-5.180630], dtype = "float64")#candidate|131|(160,)|const|float64
call_129 = relay.TupleGetItem(func_99_call(relay.reshape(const_130.astype('float64'), []), relay.reshape(const_131.astype('float64'), [16, 10]), ), 0)
call_132 = relay.TupleGetItem(func_102_call(relay.reshape(const_130.astype('float64'), []), relay.reshape(const_131.astype('float64'), [16, 10]), ), 0)
var_135 = relay.var("var_135", dtype = "bool", shape = (16,))#candidate|135|(16,)|var|bool
bop_136 = relay.logical_or(bop_109.astype('bool'), relay.reshape(var_135.astype('bool'), relay.shape_of(bop_109))) # shape=(16,)
uop_141 = relay.rsqrt(bop_126.astype('float32')) # shape=(16,)
uop_143 = relay.log10(uop_141.astype('float64')) # shape=(16,)
var_148 = relay.var("var_148", dtype = "float64", shape = (16,))#candidate|148|(16,)|var|float64
bop_149 = relay.left_shift(uop_143.astype('int64'), relay.reshape(var_148.astype('int64'), relay.shape_of(uop_143))) # shape=(16,)
output = relay.Tuple([bop_114,call_129,const_130,const_131,bop_136,bop_149,])
output2 = relay.Tuple([bop_114,call_132,const_130,const_131,bop_136,bop_149,])
func_153 = relay.Function([var_135,var_148,], output)
mod['func_153'] = func_153
mod = relay.transform.InferType()(mod)
mutated_mod['func_153'] = func_153
mutated_mod = relay.transform.InferType()(mutated_mod)
func_153_call = mutated_mod.get_global_var('func_153')
var_155 = relay.var("var_155", dtype = "bool", shape = (16,))#candidate|155|(16,)|var|bool
var_156 = relay.var("var_156", dtype = "float64", shape = (16,))#candidate|156|(16,)|var|float64
call_154 = func_153_call(var_155,var_156,)
output = call_154
func_157 = relay.Function([var_155,var_156,], output)
mutated_mod['func_157'] = func_157
mutated_mod = relay.transform.InferType()(mutated_mod)
var_181 = relay.var("var_181", dtype = "float32", shape = (6,))#candidate|181|(6,)|var|float32
uop_182 = relay.exp(var_181.astype('float32')) # shape=(6,)
bop_186 = relay.greater(uop_182.astype('bool'), relay.reshape(var_181.astype('bool'), relay.shape_of(uop_182))) # shape=(6,)
bop_194 = relay.left_shift(bop_186.astype('uint8'), relay.reshape(uop_182.astype('uint8'), relay.shape_of(bop_186))) # shape=(6,)
uop_197 = relay.atan(bop_186.astype('float64')) # shape=(6,)
bop_200 = relay.minimum(var_181.astype('uint64'), relay.reshape(uop_182.astype('uint64'), relay.shape_of(var_181))) # shape=(6,)
uop_204 = relay.acos(var_181.astype('float64')) # shape=(6,)
func_153_call = mod.get_global_var('func_153')
func_157_call = mutated_mod.get_global_var('func_157')
const_210 = relay.const([True,False,False,True,True,False,False,True,False,False,False,False,False,True,False,True], dtype = "bool")#candidate|210|(16,)|const|bool
call_209 = relay.TupleGetItem(func_153_call(relay.reshape(const_210.astype('bool'), [16,]), relay.reshape(const_210.astype('float64'), [16,]), ), 1)
call_211 = relay.TupleGetItem(func_157_call(relay.reshape(const_210.astype('bool'), [16,]), relay.reshape(const_210.astype('float64'), [16,]), ), 1)
func_81_call = mod.get_global_var('func_81')
func_84_call = mutated_mod.get_global_var('func_84')
var_214 = relay.var("var_214", dtype = "float64", shape = (3,))#candidate|214|(3,)|var|float64
call_213 = func_81_call(relay.reshape(var_214.astype('float64'), [3,]), relay.reshape(var_214.astype('float64'), [3,]), )
call_215 = func_81_call(relay.reshape(var_214.astype('float64'), [3,]), relay.reshape(var_214.astype('float64'), [3,]), )
uop_217 = relay.rsqrt(var_214.astype('float32')) # shape=(3,)
uop_225 = relay.sin(bop_186.astype('float64')) # shape=(6,)
uop_229 = relay.log2(uop_182.astype('float32')) # shape=(6,)
output = relay.Tuple([bop_194,uop_197,bop_200,uop_204,call_209,const_210,call_213,uop_217,uop_225,uop_229,])
output2 = relay.Tuple([bop_194,uop_197,bop_200,uop_204,call_211,const_210,call_215,uop_217,uop_225,uop_229,])
func_232 = relay.Function([var_181,var_214,], output)
mod['func_232'] = func_232
mod = relay.transform.InferType()(mod)
mutated_mod['func_232'] = func_232
mutated_mod = relay.transform.InferType()(mutated_mod)
func_232_call = mutated_mod.get_global_var('func_232')
var_234 = relay.var("var_234", dtype = "float32", shape = (6,))#candidate|234|(6,)|var|float32
var_235 = relay.var("var_235", dtype = "float64", shape = (3,))#candidate|235|(3,)|var|float64
call_233 = func_232_call(var_234,var_235,)
output = call_233
func_236 = relay.Function([var_234,var_235,], output)
mutated_mod['func_236'] = func_236
mutated_mod = relay.transform.InferType()(mutated_mod)
var_246 = relay.var("var_246", dtype = "float64", shape = (2, 7))#candidate|246|(2, 7)|var|float64
var_247 = relay.var("var_247", dtype = "float64", shape = (2, 7))#candidate|247|(2, 7)|var|float64
bop_248 = relay.minimum(var_246.astype('float64'), relay.reshape(var_247.astype('float64'), relay.shape_of(var_246))) # shape=(2, 7)
uop_255 = relay.acosh(var_247.astype('float64')) # shape=(2, 7)
bop_257 = relay.add(uop_255.astype('uint32'), relay.reshape(var_247.astype('uint32'), relay.shape_of(uop_255))) # shape=(2, 7)
bop_260 = relay.divide(uop_255.astype('float32'), relay.reshape(var_246.astype('float32'), relay.shape_of(uop_255))) # shape=(2, 7)
func_99_call = mod.get_global_var('func_99')
func_102_call = mutated_mod.get_global_var('func_102')
var_265 = relay.var("var_265", dtype = "float64", shape = ())#candidate|265|()|var|float64
const_266 = relay.const([8.416431,9.998512,-4.375340,-3.151208,2.834467,4.716471,-1.106983,6.607958,3.025024,3.520992,-7.764595,-1.895196,-2.415838,-1.545178,-3.888589,-5.710301,-7.803009,-5.577277,9.391351,-0.745655,-3.908868,-4.829055,1.092012,-9.459052,-3.205597,-0.829885,-2.664912,-8.133092,8.829450,-0.919389,-2.054668,1.700353,-9.542884,2.766075,-2.142223,-0.903128,-6.002645,-4.518759,5.788015,-0.287302,-1.560743,-5.107257,1.084691,7.874878,3.108524,-4.984505,-7.504311,-1.855535,8.280872,0.288702,-6.755776,-5.618590,-4.909183,-9.937534,-0.093546,1.058593,0.002847,7.886810,-7.177442,4.098056,-0.185199,5.539918,5.934717,-0.662527,-0.382645,6.571085,4.438017,8.891972,-1.038755,7.309741,-3.720122,3.559782,-7.238790,-2.626626,4.460572,7.884441,5.726765,-5.776078,-2.246775,5.820150,-3.267437,4.456014,6.616521,5.574002,-7.704807,-2.175144,7.844064,-5.370233,-2.881461,-0.771127,-1.220484,0.798416,4.295551,3.688485,-1.388699,-1.309720,6.156583,0.684817,-4.941554,-7.056827,5.923964,3.368702,-3.972312,3.272262,-1.154887,-1.861173,5.984328,-3.191742,4.561165,-0.844696,-9.016929,7.094723,6.651118,-9.393710,3.889833,-2.231173,9.703255,-3.218631,-3.919686,-6.681510,8.034040,4.809794,9.493155,5.767870,2.041682,-7.093303,-1.713063,3.791792,-0.694854,7.518203,-8.328130,0.333996,4.235042,2.645308,3.082375,-7.149410,-4.898323,0.872490,3.785999,5.654550,-6.955155,8.929745,7.976271,-9.248404,-1.292999,8.398158,-7.466170,0.912212,-4.844129,7.658187,-5.211891,0.581204,1.915171,-9.741415,1.570894,-7.076457,-7.886909,5.135746,-9.088245,3.535206], dtype = "float64")#candidate|266|(160,)|const|float64
call_264 = relay.TupleGetItem(func_99_call(relay.reshape(var_265.astype('float64'), []), relay.reshape(const_266.astype('float64'), [16, 10]), ), 0)
call_267 = relay.TupleGetItem(func_102_call(relay.reshape(var_265.astype('float64'), []), relay.reshape(const_266.astype('float64'), [16, 10]), ), 0)
bop_269 = relay.right_shift(bop_257.astype('int64'), relay.reshape(var_247.astype('int64'), relay.shape_of(bop_257))) # shape=(2, 7)
output = relay.Tuple([bop_248,bop_260,call_264,var_265,const_266,bop_269,])
output2 = relay.Tuple([bop_248,bop_260,call_267,var_265,const_266,bop_269,])
func_272 = relay.Function([var_246,var_247,var_265,], output)
mod['func_272'] = func_272
mod = relay.transform.InferType()(mod)
var_273 = relay.var("var_273", dtype = "float64", shape = (2, 7))#candidate|273|(2, 7)|var|float64
var_274 = relay.var("var_274", dtype = "float64", shape = (2, 7))#candidate|274|(2, 7)|var|float64
var_275 = relay.var("var_275", dtype = "float64", shape = ())#candidate|275|()|var|float64
output = func_272(var_273,var_274,var_275,)
func_276 = relay.Function([var_273,var_274,var_275,], output)
mutated_mod['func_276'] = func_276
mutated_mod = relay.transform.InferType()(mutated_mod)
var_325 = relay.var("var_325", dtype = "float32", shape = ())#candidate|325|()|var|float32
var_326 = relay.var("var_326", dtype = "float32", shape = (13, 10))#candidate|326|(13, 10)|var|float32
bop_327 = relay.multiply(var_325.astype('float32'), var_326.astype('float32')) # shape=(13, 10)
bop_330 = relay.logical_and(bop_327.astype('bool'), var_325.astype('bool')) # shape=(13, 10)
bop_334 = relay.equal(bop_330.astype('bool'), relay.reshape(bop_327.astype('bool'), relay.shape_of(bop_330))) # shape=(13, 10)
bop_337 = relay.right_shift(bop_330.astype('int64'), relay.reshape(bop_334.astype('int64'), relay.shape_of(bop_330))) # shape=(13, 10)
bop_343 = relay.greater_equal(bop_334.astype('bool'), var_325.astype('bool')) # shape=(13, 10)
bop_346 = relay.bitwise_xor(var_325.astype('int32'), bop_334.astype('int32')) # shape=(13, 10)
bop_349 = relay.greater(bop_337.astype('bool'), var_325.astype('bool')) # shape=(13, 10)
func_99_call = mod.get_global_var('func_99')
func_102_call = mutated_mod.get_global_var('func_102')
const_358 = relay.const([[2.718006,-7.504383],[-6.638227,7.523650],[4.203539,-8.559408],[-4.348391,-6.482632],[6.561181,6.999040],[5.211929,-2.759966],[-5.866724,8.908788],[-0.462998,7.433566],[-1.846030,9.408341],[5.774879,-9.536027],[5.019674,-9.351637],[5.917619,-5.920400],[-9.634127,5.569174],[3.400859,-0.399831],[-1.954934,-9.866749],[-2.852105,-5.193320],[8.379373,2.814143],[-8.011577,9.150347],[-3.689372,8.774802],[-1.818620,-6.530207],[-1.862658,-3.945863],[9.024827,3.942515],[-7.243945,-7.159791],[9.324463,6.107441],[-1.082264,-7.670634],[-8.323264,5.011265],[6.403282,3.415904],[-5.592194,-7.200342],[0.442810,-0.847280],[-2.123631,-3.844402],[-0.633699,9.997808],[0.592366,-9.553445],[8.439087,6.976823],[3.076722,-9.594972],[9.217137,-6.709522],[4.501021,-2.666161],[-6.857264,-0.766110],[1.278873,5.730735],[0.524949,1.267292],[-2.413292,3.819862],[-4.508321,2.600979],[0.745734,-1.956126],[1.843806,-1.264917],[-3.491856,-7.284980],[0.899168,8.543770],[4.962240,-8.302018],[6.036031,-3.105380],[-3.515258,0.206407],[-4.171472,-9.421028],[-0.717503,-7.802692],[8.719934,-1.892673],[-8.446641,-0.822908],[7.184107,-3.508498],[4.970721,-2.298214],[-4.976781,-3.769103],[-4.277360,-7.050454],[-1.045068,-5.799618],[8.895130,1.930295],[4.547016,-5.628329],[-4.213977,6.687426],[-1.489954,-6.861627],[3.707815,-7.984423],[0.920799,-5.086464],[-1.736979,-3.371071],[2.507679,0.106304],[-4.465505,6.585414],[3.067706,2.338623],[4.722420,8.380958],[-7.193890,4.579049],[-2.442926,4.224942],[-5.267382,9.640365],[-9.951310,5.822666],[-5.512279,8.141384],[6.282666,-3.632382],[-2.245240,-8.386580],[6.223247,-5.994349],[-9.011035,3.680358],[1.666051,-7.944453],[-8.099887,7.039727],[-6.138683,-9.439039]], dtype = "float64")#candidate|358|(80, 2)|const|float64
call_357 = relay.TupleGetItem(func_99_call(relay.reshape(var_325.astype('float64'), []), relay.reshape(const_358.astype('float64'), [16, 10]), ), 0)
call_359 = relay.TupleGetItem(func_102_call(relay.reshape(var_325.astype('float64'), []), relay.reshape(const_358.astype('float64'), [16, 10]), ), 0)
uop_360 = relay.cos(bop_349.astype('float64')) # shape=(13, 10)
uop_362 = relay.sin(uop_360.astype('float32')) # shape=(13, 10)
bop_364 = relay.less_equal(call_357.astype('bool'), var_325.astype('bool')) # shape=(16, 10)
bop_367 = relay.less_equal(call_359.astype('bool'), var_325.astype('bool')) # shape=(16, 10)
uop_371 = relay.sqrt(uop_362.astype('float64')) # shape=(13, 10)
var_374 = relay.var("var_374", dtype = "float64", shape = (13, 10))#candidate|374|(13, 10)|var|float64
bop_375 = relay.greater_equal(uop_371.astype('bool'), relay.reshape(var_374.astype('bool'), relay.shape_of(uop_371))) # shape=(13, 10)
uop_378 = relay.log10(uop_371.astype('float64')) # shape=(13, 10)
bop_381 = relay.bitwise_and(uop_362.astype('uint32'), relay.reshape(bop_337.astype('uint32'), relay.shape_of(uop_362))) # shape=(13, 10)
func_272_call = mod.get_global_var('func_272')
func_276_call = mutated_mod.get_global_var('func_276')
const_388 = relay.const([-6.104947,-5.614153,-9.557141,2.839413,1.175783,-0.495860,-1.030374,-8.332142,-7.870021,4.051554,5.815354,8.396912,-1.466130,9.869190], dtype = "float64")#candidate|388|(14,)|const|float64
call_387 = relay.TupleGetItem(func_272_call(relay.reshape(const_388.astype('float64'), [2, 7]), relay.reshape(const_388.astype('float64'), [2, 7]), relay.reshape(var_325.astype('float64'), []), ), 3)
call_389 = relay.TupleGetItem(func_276_call(relay.reshape(const_388.astype('float64'), [2, 7]), relay.reshape(const_388.astype('float64'), [2, 7]), relay.reshape(var_325.astype('float64'), []), ), 3)
bop_390 = relay.power(uop_371.astype('float32'), relay.reshape(bop_343.astype('float32'), relay.shape_of(uop_371))) # shape=(13, 10)
uop_401 = relay.asinh(uop_378.astype('float64')) # shape=(13, 10)
uop_407 = relay.rsqrt(uop_371.astype('float64')) # shape=(13, 10)
bop_410 = relay.maximum(uop_401.astype('int8'), relay.reshape(bop_334.astype('int8'), relay.shape_of(uop_401))) # shape=(13, 10)
func_99_call = mod.get_global_var('func_99')
func_102_call = mutated_mod.get_global_var('func_102')
call_415 = relay.TupleGetItem(func_99_call(relay.reshape(call_387.astype('float64'), []), relay.reshape(call_357.astype('float64'), [16, 10]), ), 0)
call_416 = relay.TupleGetItem(func_102_call(relay.reshape(call_387.astype('float64'), []), relay.reshape(call_357.astype('float64'), [16, 10]), ), 0)
bop_418 = relay.subtract(bop_410.astype('int8'), relay.reshape(bop_334.astype('int8'), relay.shape_of(bop_410))) # shape=(13, 10)
uop_421 = relay.asinh(uop_401.astype('float32')) # shape=(13, 10)
bop_423 = relay.logical_or(uop_421.astype('bool'), relay.reshape(bop_337.astype('bool'), relay.shape_of(uop_421))) # shape=(13, 10)
var_429 = relay.var("var_429", dtype = "int8", shape = (13, 10))#candidate|429|(13, 10)|var|int8
bop_430 = relay.left_shift(bop_410.astype('uint8'), relay.reshape(var_429.astype('uint8'), relay.shape_of(bop_410))) # shape=(13, 10)
output = relay.Tuple([bop_346,const_358,bop_364,bop_375,bop_381,call_387,const_388,bop_390,uop_407,call_415,bop_418,bop_423,bop_430,])
output2 = relay.Tuple([bop_346,const_358,bop_367,bop_375,bop_381,call_389,const_388,bop_390,uop_407,call_416,bop_418,bop_423,bop_430,])
func_436 = relay.Function([var_325,var_326,var_374,var_429,], output)
mod['func_436'] = func_436
mod = relay.transform.InferType()(mod)
var_437 = relay.var("var_437", dtype = "float32", shape = ())#candidate|437|()|var|float32
var_438 = relay.var("var_438", dtype = "float32", shape = (13, 10))#candidate|438|(13, 10)|var|float32
var_439 = relay.var("var_439", dtype = "float64", shape = (13, 10))#candidate|439|(13, 10)|var|float64
var_440 = relay.var("var_440", dtype = "int8", shape = (13, 10))#candidate|440|(13, 10)|var|int8
output = func_436(var_437,var_438,var_439,var_440,)
func_441 = relay.Function([var_437,var_438,var_439,var_440,], output)
mutated_mod['func_441'] = func_441
mutated_mod = relay.transform.InferType()(mutated_mod)
var_477 = relay.var("var_477", dtype = "float64", shape = (10, 9, 8))#candidate|477|(10, 9, 8)|var|float64
uop_478 = relay.sqrt(var_477.astype('float64')) # shape=(10, 9, 8)
bop_483 = relay.less_equal(var_477.astype('bool'), relay.reshape(uop_478.astype('bool'), relay.shape_of(var_477))) # shape=(10, 9, 8)
uop_486 = relay.log2(uop_478.astype('float64')) # shape=(10, 9, 8)
uop_488 = relay.acos(uop_478.astype('float32')) # shape=(10, 9, 8)
uop_490 = relay.cos(uop_488.astype('float64')) # shape=(10, 9, 8)
uop_492 = relay.asin(uop_490.astype('float32')) # shape=(10, 9, 8)
bop_496 = relay.floor_mod(uop_488.astype('float32'), relay.reshape(uop_478.astype('float32'), relay.shape_of(uop_488))) # shape=(10, 9, 8)
bop_500 = relay.bitwise_xor(uop_492.astype('int16'), relay.reshape(uop_490.astype('int16'), relay.shape_of(uop_492))) # shape=(10, 9, 8)
uop_503 = relay.log10(uop_492.astype('float32')) # shape=(10, 9, 8)
bop_505 = relay.divide(uop_488.astype('float32'), relay.reshape(bop_500.astype('float32'), relay.shape_of(uop_488))) # shape=(10, 9, 8)
var_508 = relay.var("var_508", dtype = "float64", shape = (10, 9, 8))#candidate|508|(10, 9, 8)|var|float64
bop_509 = relay.maximum(uop_490.astype('uint16'), relay.reshape(var_508.astype('uint16'), relay.shape_of(uop_490))) # shape=(10, 9, 8)
bop_514 = relay.minimum(bop_496.astype('int8'), relay.reshape(var_477.astype('int8'), relay.shape_of(bop_496))) # shape=(10, 9, 8)
bop_517 = relay.logical_and(uop_478.astype('bool'), relay.reshape(bop_514.astype('bool'), relay.shape_of(uop_478))) # shape=(10, 9, 8)
bop_521 = relay.bitwise_and(bop_505.astype('int8'), relay.reshape(bop_514.astype('int8'), relay.shape_of(bop_505))) # shape=(10, 9, 8)
bop_524 = relay.right_shift(uop_503.astype('int8'), relay.reshape(bop_500.astype('int8'), relay.shape_of(uop_503))) # shape=(10, 9, 8)
func_81_call = mod.get_global_var('func_81')
func_84_call = mutated_mod.get_global_var('func_84')
var_531 = relay.var("var_531", dtype = "float64", shape = (3,))#candidate|531|(3,)|var|float64
call_530 = func_81_call(relay.reshape(var_531.astype('float64'), [3,]), relay.reshape(var_531.astype('float64'), [3,]), )
call_532 = func_81_call(relay.reshape(var_531.astype('float64'), [3,]), relay.reshape(var_531.astype('float64'), [3,]), )
uop_538 = relay.cosh(bop_500.astype('float64')) # shape=(10, 9, 8)
var_540 = relay.var("var_540", dtype = "float32", shape = (10, 9, 8))#candidate|540|(10, 9, 8)|var|float32
bop_541 = relay.logical_or(uop_503.astype('bool'), relay.reshape(var_540.astype('bool'), relay.shape_of(uop_503))) # shape=(10, 9, 8)
uop_544 = relay.tan(bop_521.astype('float32')) # shape=(10, 9, 8)
output = relay.Tuple([bop_483,uop_486,bop_509,bop_517,bop_524,call_530,var_531,uop_538,bop_541,uop_544,])
output2 = relay.Tuple([bop_483,uop_486,bop_509,bop_517,bop_524,call_532,var_531,uop_538,bop_541,uop_544,])
func_546 = relay.Function([var_477,var_508,var_531,var_540,], output)
mod['func_546'] = func_546
mod = relay.transform.InferType()(mod)
mutated_mod['func_546'] = func_546
mutated_mod = relay.transform.InferType()(mutated_mod)
func_546_call = mutated_mod.get_global_var('func_546')
var_548 = relay.var("var_548", dtype = "float64", shape = (10, 9, 8))#candidate|548|(10, 9, 8)|var|float64
var_549 = relay.var("var_549", dtype = "float64", shape = (10, 9, 8))#candidate|549|(10, 9, 8)|var|float64
var_550 = relay.var("var_550", dtype = "float64", shape = (3,))#candidate|550|(3,)|var|float64
var_551 = relay.var("var_551", dtype = "float32", shape = (10, 9, 8))#candidate|551|(10, 9, 8)|var|float32
call_547 = func_546_call(var_548,var_549,var_550,var_551,)
output = call_547
func_552 = relay.Function([var_548,var_549,var_550,var_551,], output)
mutated_mod['func_552'] = func_552
mutated_mod = relay.transform.InferType()(mutated_mod)
var_569 = relay.var("var_569", dtype = "float32", shape = (4,))#candidate|569|(4,)|var|float32
uop_570 = relay.asinh(var_569.astype('float32')) # shape=(4,)
bop_577 = relay.logical_or(uop_570.astype('bool'), relay.reshape(var_569.astype('bool'), relay.shape_of(uop_570))) # shape=(4,)
func_99_call = mod.get_global_var('func_99')
func_102_call = mutated_mod.get_global_var('func_102')
var_581 = relay.var("var_581", dtype = "float64", shape = ())#candidate|581|()|var|float64
const_582 = relay.const([[-5.399017,-4.844919,0.585963,7.854962,2.659636,8.949656,-1.192399,2.127655,0.926726,3.714844,-5.671416,-9.829750,6.159440,2.993555,4.109861,5.841693,-2.161064,-6.902454,5.929583,-9.786943,-1.647654,6.257181,3.867959,-3.563848,0.578471,-7.199420,0.587942,-8.730355,2.975921,-1.498586,-2.891028,-2.126081,-1.725806,-6.775933,-4.796047,-9.207028,-8.232257,2.234517,-1.064085,-1.714625],[3.031876,2.544262,2.778592,5.459108,4.729127,-8.314709,-1.562234,-8.556611,3.794113,-3.130940,4.598197,-6.544696,-1.144729,3.039078,-1.148933,-6.222420,3.321202,-7.053319,4.289488,3.204337,2.585708,0.081027,-2.386094,-0.657301,-9.041588,4.411823,-3.665852,-9.255532,-8.867770,0.390534,1.846299,-2.063651,-9.484644,-5.531397,4.473142,-2.964903,6.554619,-0.346051,-4.495609,9.755380],[1.426490,-0.209409,4.528772,-0.058679,6.568437,-6.413710,-9.042147,4.594250,3.756003,-8.310424,6.213377,2.884525,-0.838576,-0.354439,6.539596,-3.789000,-1.536953,-8.723041,8.700658,8.612056,-2.349272,5.662327,7.749843,7.700924,-4.411439,8.637178,3.397248,-5.065855,-2.801568,-7.943905,3.747020,-7.266580,5.313172,1.315601,9.053512,8.017522,-9.346341,-0.281217,7.818514,-1.145703],[-8.335046,6.463363,-6.542156,9.702743,-7.804243,-6.730827,-1.550806,-2.981501,3.951821,-0.312801,-1.501639,2.312610,5.272311,-4.574692,5.701087,-2.698876,-8.741582,5.816823,-9.985385,7.015912,-8.545535,-7.675282,-0.701112,6.189115,-1.310909,1.308148,8.477409,7.962045,-2.871091,-2.238357,-5.851879,3.156708,-0.930471,8.414817,-3.541991,-9.927765,5.858308,8.248255,9.345572,5.802597]], dtype = "float64")#candidate|582|(4, 40)|const|float64
call_580 = relay.TupleGetItem(func_99_call(relay.reshape(var_581.astype('float64'), []), relay.reshape(const_582.astype('float64'), [16, 10]), ), 0)
call_583 = relay.TupleGetItem(func_102_call(relay.reshape(var_581.astype('float64'), []), relay.reshape(const_582.astype('float64'), [16, 10]), ), 0)
var_584 = relay.var("var_584", dtype = "float32", shape = (4,))#candidate|584|(4,)|var|float32
bop_585 = relay.equal(uop_570.astype('bool'), relay.reshape(var_584.astype('bool'), relay.shape_of(uop_570))) # shape=(4,)
bop_588 = relay.floor_divide(bop_585.astype('float32'), relay.reshape(bop_577.astype('float32'), relay.shape_of(bop_585))) # shape=(4,)
bop_593 = relay.bitwise_or(uop_570.astype('int32'), relay.reshape(var_569.astype('int32'), relay.shape_of(uop_570))) # shape=(4,)
uop_596 = relay.rsqrt(bop_588.astype('float32')) # shape=(4,)
uop_605 = relay.atan(uop_596.astype('float32')) # shape=(4,)
output = relay.Tuple([call_580,var_581,const_582,bop_593,uop_605,])
output2 = relay.Tuple([call_583,var_581,const_582,bop_593,uop_605,])
func_608 = relay.Function([var_569,var_581,var_584,], output)
mod['func_608'] = func_608
mod = relay.transform.InferType()(mod)
var_609 = relay.var("var_609", dtype = "float32", shape = (4,))#candidate|609|(4,)|var|float32
var_610 = relay.var("var_610", dtype = "float64", shape = ())#candidate|610|()|var|float64
var_611 = relay.var("var_611", dtype = "float32", shape = (4,))#candidate|611|(4,)|var|float32
output = func_608(var_609,var_610,var_611,)
func_612 = relay.Function([var_609,var_610,var_611,], output)
mutated_mod['func_612'] = func_612
mutated_mod = relay.transform.InferType()(mutated_mod)
var_647 = relay.var("var_647", dtype = "float32", shape = ())#candidate|647|()|var|float32
var_648 = relay.var("var_648", dtype = "float32", shape = (3, 12))#candidate|648|(3, 12)|var|float32
bop_649 = relay.power(var_647.astype('float32'), var_648.astype('float32')) # shape=(3, 12)
uop_653 = relay.erf(var_648.astype('float64')) # shape=(3, 12)
uop_656 = relay.sqrt(bop_649.astype('float32')) # shape=(3, 12)
const_661 = relay.const([[-6.866898,-8.969997,7.181637,3.878728,1.851116,-7.404370,8.351776,-7.329473,-7.462358,-8.418553,-6.670274,1.649979],[-0.086637,-9.726775,-5.535080,-0.945494,5.387674,9.453916,9.357542,7.226482,-8.658771,9.541067,-7.546306,-5.410538],[-8.089973,-1.529043,-5.622741,-8.668287,-3.922927,-0.934920,-8.388702,0.053220,-4.844586,-4.869129,0.124992,-1.064875]], dtype = "float32")#candidate|661|(3, 12)|const|float32
bop_662 = relay.bitwise_xor(bop_649.astype('int32'), relay.reshape(const_661.astype('int32'), relay.shape_of(bop_649))) # shape=(3, 12)
bop_672 = relay.greater_equal(uop_653.astype('bool'), relay.reshape(bop_649.astype('bool'), relay.shape_of(uop_653))) # shape=(3, 12)
bop_676 = relay.right_shift(uop_656.astype('int64'), relay.reshape(bop_672.astype('int64'), relay.shape_of(uop_656))) # shape=(3, 12)
var_679 = relay.var("var_679", dtype = "float64", shape = (3, 12))#candidate|679|(3, 12)|var|float64
bop_680 = relay.floor_mod(uop_653.astype('float32'), relay.reshape(var_679.astype('float32'), relay.shape_of(uop_653))) # shape=(3, 12)
output = relay.Tuple([bop_662,bop_676,bop_680,])
output2 = relay.Tuple([bop_662,bop_676,bop_680,])
func_683 = relay.Function([var_647,var_648,var_679,], output)
mod['func_683'] = func_683
mod = relay.transform.InferType()(mod)
mutated_mod['func_683'] = func_683
mutated_mod = relay.transform.InferType()(mutated_mod)
func_683_call = mutated_mod.get_global_var('func_683')
var_685 = relay.var("var_685", dtype = "float32", shape = ())#candidate|685|()|var|float32
var_686 = relay.var("var_686", dtype = "float32", shape = (3, 12))#candidate|686|(3, 12)|var|float32
var_687 = relay.var("var_687", dtype = "float64", shape = (3, 12))#candidate|687|(3, 12)|var|float64
call_684 = func_683_call(var_685,var_686,var_687,)
output = call_684
func_688 = relay.Function([var_685,var_686,var_687,], output)
mutated_mod['func_688'] = func_688
mutated_mod = relay.transform.InferType()(mutated_mod)
var_711 = relay.var("var_711", dtype = "uint8", shape = (9, 11))#candidate|711|(9, 11)|var|uint8
const_712 = relay.const([[-10,-7,1,-5,5,10,4,3,7,-7,-7],[-7,-7,4,-4,-9,-9,-3,-8,9,-8,-5],[2,8,-7,-8,-1,9,-1,8,-1,-2,-3],[1,5,7,9,-8,10,-4,10,5,8,7],[-4,7,-4,-8,-5,-10,-10,-4,9,-2,5],[-9,-10,6,6,-7,10,8,4,3,-6,8],[2,-5,-5,1,4,6,-2,-10,-6,9,-1],[-2,-4,4,1,-3,5,3,6,-9,4,4],[8,4,-3,1,-3,-10,-9,-6,6,3,-9]], dtype = "uint8")#candidate|712|(9, 11)|const|uint8
bop_713 = relay.less_equal(var_711.astype('bool'), relay.reshape(const_712.astype('bool'), relay.shape_of(var_711))) # shape=(9, 11)
output = bop_713
output2 = bop_713
func_717 = relay.Function([var_711,], output)
mod['func_717'] = func_717
mod = relay.transform.InferType()(mod)
var_718 = relay.var("var_718", dtype = "uint8", shape = (9, 11))#candidate|718|(9, 11)|var|uint8
output = func_717(var_718)
func_719 = relay.Function([var_718], output)
mutated_mod['func_719'] = func_719
mutated_mod = relay.transform.InferType()(mutated_mod)
var_735 = relay.var("var_735", dtype = "bool", shape = (7,))#candidate|735|(7,)|var|bool
const_736 = relay.const([True,False,True,False,True,False,True], dtype = "bool")#candidate|736|(7,)|const|bool
bop_737 = relay.logical_or(var_735.astype('bool'), relay.reshape(const_736.astype('bool'), relay.shape_of(var_735))) # shape=(7,)
func_153_call = mod.get_global_var('func_153')
func_157_call = mutated_mod.get_global_var('func_157')
var_741 = relay.var("var_741", dtype = "bool", shape = (16,))#candidate|741|(16,)|var|bool
call_740 = relay.TupleGetItem(func_153_call(relay.reshape(var_741.astype('bool'), [16,]), relay.reshape(var_741.astype('float64'), [16,]), ), 3)
call_742 = relay.TupleGetItem(func_157_call(relay.reshape(var_741.astype('bool'), [16,]), relay.reshape(var_741.astype('float64'), [16,]), ), 3)
output = relay.Tuple([bop_737,call_740,var_741,])
output2 = relay.Tuple([bop_737,call_742,var_741,])
func_743 = relay.Function([var_735,var_741,], output)
mod['func_743'] = func_743
mod = relay.transform.InferType()(mod)
mutated_mod['func_743'] = func_743
mutated_mod = relay.transform.InferType()(mutated_mod)
func_743_call = mutated_mod.get_global_var('func_743')
var_745 = relay.var("var_745", dtype = "bool", shape = (7,))#candidate|745|(7,)|var|bool
var_746 = relay.var("var_746", dtype = "bool", shape = (16,))#candidate|746|(16,)|var|bool
call_744 = func_743_call(var_745,var_746,)
output = call_744
func_747 = relay.Function([var_745,var_746,], output)
mutated_mod['func_747'] = func_747
mutated_mod = relay.transform.InferType()(mutated_mod)
var_826 = relay.var("var_826", dtype = "uint64", shape = (3, 4))#candidate|826|(3, 4)|var|uint64
const_827 = relay.const([[-8,-6,5,-6],[-4,-7,6,1],[-6,1,-2,-3]], dtype = "uint64")#candidate|827|(3, 4)|const|uint64
bop_828 = relay.greater_equal(var_826.astype('bool'), relay.reshape(const_827.astype('bool'), relay.shape_of(var_826))) # shape=(3, 4)
output = bop_828
output2 = bop_828
func_835 = relay.Function([var_826,], output)
mod['func_835'] = func_835
mod = relay.transform.InferType()(mod)
var_836 = relay.var("var_836", dtype = "uint64", shape = (3, 4))#candidate|836|(3, 4)|var|uint64
output = func_835(var_836)
func_837 = relay.Function([var_836], output)
mutated_mod['func_837'] = func_837
mutated_mod = relay.transform.InferType()(mutated_mod)
var_846 = relay.var("var_846", dtype = "int16", shape = (5, 8))#candidate|846|(5, 8)|var|int16
var_847 = relay.var("var_847", dtype = "int16", shape = (5, 8))#candidate|847|(5, 8)|var|int16
bop_848 = relay.maximum(var_846.astype('int16'), relay.reshape(var_847.astype('int16'), relay.shape_of(var_846))) # shape=(5, 8)
bop_856 = relay.logical_and(var_846.astype('bool'), relay.reshape(bop_848.astype('bool'), relay.shape_of(var_846))) # shape=(5, 8)
uop_859 = relay.asinh(bop_848.astype('float32')) # shape=(5, 8)
func_232_call = mod.get_global_var('func_232')
func_236_call = mutated_mod.get_global_var('func_236')
const_862 = relay.const([-1.715668,-1.235632,-9.065067,3.228310,6.765146,3.571788], dtype = "float32")#candidate|862|(6,)|const|float32
const_863 = relay.const([[3.011485,9.617544,5.321368]], dtype = "float64")#candidate|863|(1, 3)|const|float64
call_861 = relay.TupleGetItem(func_232_call(relay.reshape(const_862.astype('float32'), [6,]), relay.reshape(const_863.astype('float64'), [3,]), ), 6)
call_864 = relay.TupleGetItem(func_236_call(relay.reshape(const_862.astype('float32'), [6,]), relay.reshape(const_863.astype('float64'), [3,]), ), 6)
var_868 = relay.var("var_868", dtype = "float32", shape = (5, 8))#candidate|868|(5, 8)|var|float32
bop_869 = relay.divide(uop_859.astype('float64'), relay.reshape(var_868.astype('float64'), relay.shape_of(uop_859))) # shape=(5, 8)
bop_875 = relay.less_equal(bop_869.astype('bool'), relay.reshape(bop_856.astype('bool'), relay.shape_of(bop_869))) # shape=(5, 8)
bop_878 = relay.subtract(uop_859.astype('int16'), relay.reshape(var_846.astype('int16'), relay.shape_of(uop_859))) # shape=(5, 8)
var_881 = relay.var("var_881", dtype = "float64", shape = (5, 8))#candidate|881|(5, 8)|var|float64
bop_882 = relay.mod(bop_869.astype('float64'), relay.reshape(var_881.astype('float64'), relay.shape_of(bop_869))) # shape=(5, 8)
func_99_call = mod.get_global_var('func_99')
func_102_call = mutated_mod.get_global_var('func_102')
const_886 = relay.const(-4.518754, dtype = "float64")#candidate|886|()|const|float64
var_887 = relay.var("var_887", dtype = "float64", shape = (160,))#candidate|887|(160,)|var|float64
call_885 = relay.TupleGetItem(func_99_call(relay.reshape(const_886.astype('float64'), []), relay.reshape(var_887.astype('float64'), [16, 10]), ), 0)
call_888 = relay.TupleGetItem(func_102_call(relay.reshape(const_886.astype('float64'), []), relay.reshape(var_887.astype('float64'), [16, 10]), ), 0)
func_743_call = mod.get_global_var('func_743')
func_747_call = mutated_mod.get_global_var('func_747')
var_890 = relay.var("var_890", dtype = "bool", shape = (1, 7))#candidate|890|(1, 7)|var|bool
const_891 = relay.const([True,False,False,False,True,False,False,True,False,True,True,False,True,True,True,False], dtype = "bool")#candidate|891|(16,)|const|bool
call_889 = relay.TupleGetItem(func_743_call(relay.reshape(var_890.astype('bool'), [7,]), relay.reshape(const_891.astype('bool'), [16,]), ), 2)
call_892 = relay.TupleGetItem(func_747_call(relay.reshape(var_890.astype('bool'), [7,]), relay.reshape(const_891.astype('bool'), [16,]), ), 2)
bop_893 = relay.logical_xor(bop_869.astype('uint16'), relay.reshape(bop_878.astype('uint16'), relay.shape_of(bop_869))) # shape=(5, 8)
func_546_call = mod.get_global_var('func_546')
func_552_call = mutated_mod.get_global_var('func_552')
const_897 = relay.const([-7.676634,0.781008,-4.118331,-5.253964,4.459906,-1.218629,-0.378677,3.208436,-8.433815,-6.717111,-5.130855,-8.159410,2.222831,-6.734715,-2.031257,-1.153516,7.229105,-1.364328,8.172372,2.208594,6.655638,4.494413,-5.327419,1.429361,-1.670913,9.822160,-5.015575,-3.722505,-0.989399,-1.478911,0.692043,-4.049520,-3.221293,-7.237232,7.357753,-2.921424,5.613623,-2.578274,-1.778075,-3.821994,3.273732,-4.266767,2.706808,2.789849,9.491059,9.091506,3.898888,0.827552,-5.235551,9.814766,1.655690,-0.715171,4.909434,9.960427,-4.012293,-6.225410,2.361025,1.649807,-7.221731,5.786139,-1.759270,-5.975806,-8.692906,5.329287,-9.038499,-4.838068,-3.623736,-3.852138,5.645244,-8.343717,-0.158428,6.281655,9.768194,-6.071364,3.314264,0.746237,-2.382081,5.276527,3.660946,2.138231,8.281085,-7.302478,-6.862000,0.953705,-8.235006,1.082013,9.390961,-2.056127,7.463383,-2.674937,-3.760365,-5.924114,0.011902,8.460521,-2.609262,-7.260668,-6.672323,-0.999175,-4.190613,-2.652475,8.810413,3.975009,-3.265177,0.252732,-9.448263,9.033325,4.050218,-1.528923,4.721061,2.953637,-6.941122,-5.887837,-8.048324,-1.460378,-9.898526,9.606624,-1.348760,-6.919080,7.416879,5.703418,6.070250,-6.228592,-3.468541,-7.985324,0.841654,-0.555091,4.033149,-5.565989,6.855102,-7.828353,-5.831112,1.147691,-5.952470,6.241879,3.038023,-9.500458,5.083619,7.561883,1.523114,-5.307317,2.791559,-4.484776,7.635220,1.816232,1.767766,-1.579310,6.311621,9.286014,-0.952572,2.168903,3.284496,-9.211559,9.492364,-3.061893,4.145484,7.896866,1.044271,-7.928808,-6.227685,3.312717,1.422553,8.101240,7.519264,6.953630,-4.749665,5.618121,-4.848938,-3.859851,2.719159,-3.776098,3.661444,-1.093167,0.979390,1.351325,-8.090765,-5.873270,3.806577,-6.014794,-6.598417,-9.577232,9.418702,-4.265396,8.309380,4.133902,3.482615,-4.098593,2.566271,-3.969764,1.494417,-8.182965,-7.337898,6.236285,0.153220,1.734340,3.289394,-0.518338,0.782352,-5.664504,8.538583,-5.475307,2.627569,-7.681532,9.412809,-5.241031,-2.183320,-5.183104,8.443496,-7.267812,3.468947,-0.869366,7.439137,7.358139,7.122535,-8.082899,5.945457,8.122192,6.845554,7.898104,-0.242354,2.065624,0.393509,-4.239021,8.011055,0.674095,-2.386775,-4.316083,-2.947346,-8.334585,8.079229,-9.920739,5.105271,-2.690429,2.501989,4.535814,6.788642,6.947500,-3.657080,2.033502,-1.713257,1.030201,-3.362824,3.449400,7.721226,-4.305274,-6.199451,-1.490488,-5.379610,-1.088021,-8.768905,-6.242379,-8.429342,-5.083049,2.605859,-1.693656,-4.985897,-6.226676,0.350525,1.762835,6.807637,-3.953081,0.297420,-5.534618,0.259604,8.572101,-6.124132,1.157338,1.295786,-7.351964,2.818110,0.148429,-1.036084,-3.427394,7.957426,-8.368537,5.690033,-5.071238,1.650739,-3.398725,2.758360,3.155350,6.085493,-1.787550,-3.925954,9.889322,2.893835,-9.925593,-3.718039,-4.434535,-7.361675,9.138256,0.988847,-5.436852,-7.488900,1.157764,5.824937,6.616861,9.298131,8.071678,-8.807942,1.180666,1.239619,5.719354,-7.033703,9.670362,0.829997,-1.619292,-3.474774,7.522854,2.306269,-2.261472,7.509765,-0.575410,3.266096,0.748887,-9.167357,-3.886444,-7.119596,-3.410923,1.039269,9.216331,-7.058178,0.177896,4.457603,1.107014,7.944198,4.479775,1.522410,6.740559,8.528763,1.951082,8.126264,-2.328704,8.472231,-1.071086,-8.871006,3.404234,1.344803,-2.505158,-7.400839,3.728528,5.544530,-0.670476,-5.959705,-1.546204,-5.258831,-9.792809,5.729782,0.233861,2.582452,4.654252,-1.151730,-9.708862,7.894974,-4.839247,-0.830558,2.964965,-5.347408,-9.496303,9.139821,-2.992034,-5.913361,7.296648,7.094207,5.350183,-1.974297,9.138220,5.082882,-1.000076,-2.673632,-5.250256,-3.891699,-9.869849,-7.162823,-5.605441,2.517426,8.745893,8.750356,6.103072,-2.951623,6.843227,4.009696,5.384770,-7.023848,5.793286,-8.381815,3.003768,0.302164,4.180434,-2.099885,9.800375,-7.959896,-5.541054,1.061309,1.083819,-5.144140,-5.345505,4.546232,-6.943678,2.636301,-0.963690,-4.979713,5.559581,1.545834,5.933471,-6.838850,-0.149368,1.533137,-2.508450,-6.669168,-9.298776,-7.978869,3.822272,-8.460704,6.774856,8.746189,5.420165,5.487309,-2.607090,6.930539,-8.220959,-9.486465,2.260073,5.026313,0.760906,2.518818,-5.230778,-6.399715,0.660686,-5.949739,1.255547,-6.383731,8.772593,2.474888,-3.522986,3.829271,-6.397034,8.642996,1.681431,8.519844,1.616379,2.914694,-5.495523,8.874290,-3.085729,-3.043621,2.041979,6.816729,-9.394200,-2.261669,3.513086,8.615953,-8.621953,6.360689,-5.899501,-7.884390,3.494996,0.717833,1.629483,4.733166,-5.753647,3.079183,-4.398586,-2.103938,9.201229,-5.428404,-8.386672,-6.790373,-1.184366,5.329417,-6.590763,-8.742384,3.651882,0.080258,-6.953000,-7.943101,-3.222906,8.640213,-6.438389,4.416886,-1.295121,4.680923,-0.588173,8.838719,7.278814,8.089827,-7.664891,-1.403529,1.501545,7.540068,-4.943544,9.474327,4.015525,-3.556218,-7.718933,-3.766993,2.839312,-6.249748,4.413239,-6.991748,-6.761420,2.134540,-6.634298,-5.450659,9.711268,0.073640,8.394385,8.257296,5.908465,8.919830,6.908589,1.444151,8.732286,-2.557690,6.977377,4.788732,-1.426147,2.660220,-1.590925,4.744014,8.301101,-4.019489,4.490034,3.111832,0.285329,-3.989551,-2.740445,5.126922,7.527678,0.178843,-5.675494,-5.924932,8.405640,8.249537,4.013587,0.120367,-6.243062,-6.378034,2.088336,-4.619265,-4.166457,-7.991980,-7.717856,-8.327630,4.880995,6.527004,-4.538862,9.593465,0.897400,-7.785096,4.042275,0.831090,2.250997,6.458117,5.874529,1.984993,-0.425145,5.040415,2.678738,1.484474,6.215734,-6.149789,-8.693329,1.320765,0.887451,0.188725,2.327021,-3.889793,-0.320510,-9.485298,2.419113,7.443671,9.012190,1.902354,-7.069663,0.792685,6.531973,4.705582,3.402363,0.896688,-4.967998,8.620977,7.419783,-0.379363,3.706567,3.770143,-8.575705,8.868936,5.105885,-3.305970,4.055812,6.214747,-0.973166,-6.954525,7.343300,-3.404207,-5.102801,-4.214723,4.240981,1.277117,9.642131,0.436009,8.222666,1.834590,3.199481,-2.617467,9.491396,4.622141,4.752518,-7.760098,3.849953,-2.247859,-1.390231,9.680738,-6.542255,8.671974,-8.324904,3.906723,7.519213,-4.634201,4.319231,2.471198,7.627607,-9.204456,-9.808623,4.403124,4.009904,-7.365678,-2.783413,3.914083,-4.788141,-3.784293,8.739306,2.385489,-6.394640,-7.343713,-0.791080,4.381340,-2.964706,-4.453048,-8.067752,9.445881,-1.591363,3.916175,2.240492,5.160436,2.114701,-0.719560,2.715339,9.255248,-5.827936,1.771434,8.644894,-7.431812,-7.538264,8.093945,-7.696621,-2.348081,-5.545977,-0.831038,-1.904104,0.600517,3.752569,8.093224,1.484836,5.804579,-4.246872,3.419554,7.501330,8.822853,-5.689806,-5.631034,7.713488,5.306010,-6.460641,-0.015502,0.611884,0.545701,3.616765,-3.352387,4.664023,-3.999199,-6.306893,-5.712325,0.164054,-4.704427,-3.882233,7.049079,1.568531,3.539801,-7.346185,6.492648,9.255743,-0.106912,3.176451,-4.392332,-1.297264,-6.086000,-0.056667,-0.640538,-2.584791,3.973114,3.771181,1.411854,-7.199348,8.891308,-3.390016,-6.759273,1.470582,-7.929673,2.358537,3.605274,-0.753912,8.392983,-0.906503,-5.200443,-6.372268,2.379673,-1.065278,-3.363546,7.305730], dtype = "float64")#candidate|897|(720,)|const|float64
call_896 = relay.TupleGetItem(func_546_call(relay.reshape(const_897.astype('float64'), [10, 9, 8]), relay.reshape(const_897.astype('float64'), [10, 9, 8]), relay.reshape(call_861.astype('float64'), [3,]), relay.reshape(const_897.astype('float32'), [10, 9, 8]), ), 7)
call_898 = relay.TupleGetItem(func_552_call(relay.reshape(const_897.astype('float64'), [10, 9, 8]), relay.reshape(const_897.astype('float64'), [10, 9, 8]), relay.reshape(call_861.astype('float64'), [3,]), relay.reshape(const_897.astype('float32'), [10, 9, 8]), ), 7)
func_717_call = mod.get_global_var('func_717')
func_719_call = mutated_mod.get_global_var('func_719')
const_900 = relay.const([-1,10,-4,7,-6,-3,9,-3,-9,-6,7,4,2,-4,-1,7,-3,7,2,7,2,1,6,-4,2,-6,10,3,-3,2,-8,-10,-8,8,1,-1,9,-8,-5,10,4,8,-7,5,-8,6,8,8,-10,-7,6,-8,8,-10,8,-10,-7,4,9,-3,-8,4,-4,-3,3,-9,-8,1,-1,-8,-2,-1,9,2,9,-7,-6,-5,5,9,8,4,5,9,-8,-4,9,9,3,6,-9,-10,-3,-7,3,-6,-4,-4,-8], dtype = "uint8")#candidate|900|(99,)|const|uint8
call_899 = func_717_call(relay.reshape(const_900.astype('uint8'), [9, 11]))
call_901 = func_717_call(relay.reshape(const_900.astype('uint8'), [9, 11]))
output = relay.Tuple([call_861,const_862,const_863,bop_875,bop_882,call_885,const_886,var_887,call_889,var_890,const_891,bop_893,call_896,const_897,call_899,const_900,])
output2 = relay.Tuple([call_864,const_862,const_863,bop_875,bop_882,call_888,const_886,var_887,call_892,var_890,const_891,bop_893,call_898,const_897,call_901,const_900,])
func_904 = relay.Function([var_846,var_847,var_868,var_881,var_887,var_890,], output)
mod['func_904'] = func_904
mod = relay.transform.InferType()(mod)
var_905 = relay.var("var_905", dtype = "int16", shape = (5, 8))#candidate|905|(5, 8)|var|int16
var_906 = relay.var("var_906", dtype = "int16", shape = (5, 8))#candidate|906|(5, 8)|var|int16
var_907 = relay.var("var_907", dtype = "float32", shape = (5, 8))#candidate|907|(5, 8)|var|float32
var_908 = relay.var("var_908", dtype = "float64", shape = (5, 8))#candidate|908|(5, 8)|var|float64
var_909 = relay.var("var_909", dtype = "float64", shape = (160,))#candidate|909|(160,)|var|float64
var_910 = relay.var("var_910", dtype = "bool", shape = (1, 7))#candidate|910|(1, 7)|var|bool
output = func_904(var_905,var_906,var_907,var_908,var_909,var_910,)
func_911 = relay.Function([var_905,var_906,var_907,var_908,var_909,var_910,], output)
mutated_mod['func_911'] = func_911
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1027 = relay.var("var_1027", dtype = "uint8", shape = (12,))#candidate|1027|(12,)|var|uint8
const_1028 = relay.const([3,-2,-6,-9,-8,-3,-3,-8,4,5,3,9], dtype = "uint8")#candidate|1028|(12,)|const|uint8
bop_1029 = relay.less(var_1027.astype('bool'), relay.reshape(const_1028.astype('bool'), relay.shape_of(var_1027))) # shape=(12,)
output = relay.Tuple([bop_1029,])
output2 = relay.Tuple([bop_1029,])
func_1034 = relay.Function([var_1027,], output)
mod['func_1034'] = func_1034
mod = relay.transform.InferType()(mod)
var_1035 = relay.var("var_1035", dtype = "uint8", shape = (12,))#candidate|1035|(12,)|var|uint8
output = func_1034(var_1035)
func_1036 = relay.Function([var_1035], output)
mutated_mod['func_1036'] = func_1036
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1066 = relay.var("var_1066", dtype = "int8", shape = (9, 8))#candidate|1066|(9, 8)|var|int8
const_1067 = relay.const([[10,3,2,6,-5,-6,7,1],[-10,-10,1,-9,5,-4,-4,10],[-8,2,8,-7,2,-5,-7,-5],[-1,-5,-8,3,-6,-4,9,-6],[8,1,6,8,9,9,4,-3],[10,9,6,-5,-9,3,-2,7],[7,-5,5,-2,-9,-10,-6,7],[-5,-8,-10,-3,2,7,5,2],[-3,6,10,-2,-9,-1,-9,5]], dtype = "int8")#candidate|1067|(9, 8)|const|int8
bop_1068 = relay.less(var_1066.astype('bool'), relay.reshape(const_1067.astype('bool'), relay.shape_of(var_1066))) # shape=(9, 8)
bop_1071 = relay.logical_or(bop_1068.astype('bool'), relay.reshape(var_1066.astype('bool'), relay.shape_of(bop_1068))) # shape=(9, 8)
bop_1076 = relay.subtract(var_1066.astype('uint8'), relay.reshape(bop_1071.astype('uint8'), relay.shape_of(var_1066))) # shape=(9, 8)
func_436_call = mod.get_global_var('func_436')
func_441_call = mutated_mod.get_global_var('func_441')
var_1084 = relay.var("var_1084", dtype = "float32", shape = ())#candidate|1084|()|var|float32
const_1085 = relay.const([8.292476,-0.668779,-5.075713,2.321399,2.504796,3.135362,9.799409,6.433280,6.209491,7.963742,6.870310,0.929380,3.549888,3.675247,-5.725655,8.615502,-0.354515,-3.943942,-2.243279,1.161409,7.581030,0.022018,-2.024575,-8.436735,-6.642144,4.945658,-3.895448,2.342445,-3.833907,-3.173462,-0.841037,-0.870409,3.895325,2.032242,2.307748,3.789986,-7.655201,7.379055,3.600661,-7.570669,5.865878,-1.518220,1.504105,5.021357,-1.587228,-6.410698,0.634509,-8.784024,9.006549,-1.827506,-8.749993,-5.977074,-8.123028,6.424437,4.434534,8.713530,-5.345145,-0.935139,-9.069695,5.681283,6.480271,4.364652,1.712618,-9.079972,6.461566,3.784075,-3.700759,-2.324127,5.912867,0.785908,-5.894698,-3.579864,-2.185748,-2.304000,-4.470332,4.383334,6.601792,3.867155,-3.401036,4.807171,-4.648508,4.996556,-1.446311,-3.122670,-4.695756,1.304078,-8.826637,1.253058,-0.270102,6.095254,5.592819,1.158458,0.695329,8.514679,-6.205999,-8.043354,0.007175,5.621932,9.144069,-9.122480,9.158364,-6.234604,5.711030,-9.197245,1.811018,-2.974797,7.355599,8.101928,-3.472239,-8.436406,-7.261831,-7.763440,7.913132,5.638814,6.146965,-6.289483,6.489881,-3.535526,-2.595083,9.725177,1.506074,-9.388937,2.451080,2.952282,9.454429,-5.463094,-2.929538,2.753683,-5.395832,5.039847], dtype = "float32")#candidate|1085|(130,)|const|float32
call_1083 = relay.TupleGetItem(func_436_call(relay.reshape(var_1084.astype('float32'), []), relay.reshape(const_1085.astype('float32'), [13, 10]), relay.reshape(const_1085.astype('float64'), [13, 10]), relay.reshape(const_1085.astype('int8'), [13, 10]), ), 9)
call_1086 = relay.TupleGetItem(func_441_call(relay.reshape(var_1084.astype('float32'), []), relay.reshape(const_1085.astype('float32'), [13, 10]), relay.reshape(const_1085.astype('float64'), [13, 10]), relay.reshape(const_1085.astype('int8'), [13, 10]), ), 9)
func_153_call = mod.get_global_var('func_153')
func_157_call = mutated_mod.get_global_var('func_157')
var_1089 = relay.var("var_1089", dtype = "bool", shape = (2, 8))#candidate|1089|(2, 8)|var|bool
call_1088 = relay.TupleGetItem(func_153_call(relay.reshape(var_1089.astype('bool'), [16,]), relay.reshape(var_1089.astype('float64'), [16,]), ), 0)
call_1090 = relay.TupleGetItem(func_157_call(relay.reshape(var_1089.astype('bool'), [16,]), relay.reshape(var_1089.astype('float64'), [16,]), ), 0)
func_232_call = mod.get_global_var('func_232')
func_236_call = mutated_mod.get_global_var('func_236')
var_1095 = relay.var("var_1095", dtype = "float32", shape = (6,))#candidate|1095|(6,)|var|float32
const_1096 = relay.const([5.356731,-1.877104,4.822277], dtype = "float64")#candidate|1096|(3,)|const|float64
call_1094 = relay.TupleGetItem(func_232_call(relay.reshape(var_1095.astype('float32'), [6,]), relay.reshape(const_1096.astype('float64'), [3,]), ), 2)
call_1097 = relay.TupleGetItem(func_236_call(relay.reshape(var_1095.astype('float32'), [6,]), relay.reshape(const_1096.astype('float64'), [3,]), ), 2)
bop_1098 = relay.logical_xor(const_1067.astype('uint8'), relay.reshape(bop_1071.astype('uint8'), relay.shape_of(const_1067))) # shape=(9, 8)
func_546_call = mod.get_global_var('func_546')
func_552_call = mutated_mod.get_global_var('func_552')
var_1102 = relay.var("var_1102", dtype = "float64", shape = (720,))#candidate|1102|(720,)|var|float64
call_1101 = relay.TupleGetItem(func_546_call(relay.reshape(var_1102.astype('float64'), [10, 9, 8]), relay.reshape(var_1102.astype('float64'), [10, 9, 8]), relay.reshape(const_1096.astype('float64'), [3,]), relay.reshape(var_1102.astype('float32'), [10, 9, 8]), ), 7)
call_1103 = relay.TupleGetItem(func_552_call(relay.reshape(var_1102.astype('float64'), [10, 9, 8]), relay.reshape(var_1102.astype('float64'), [10, 9, 8]), relay.reshape(const_1096.astype('float64'), [3,]), relay.reshape(var_1102.astype('float32'), [10, 9, 8]), ), 7)
func_272_call = mod.get_global_var('func_272')
func_276_call = mutated_mod.get_global_var('func_276')
var_1108 = relay.var("var_1108", dtype = "float64", shape = (14,))#candidate|1108|(14,)|var|float64
call_1107 = relay.TupleGetItem(func_272_call(relay.reshape(var_1108.astype('float64'), [2, 7]), relay.reshape(var_1108.astype('float64'), [2, 7]), relay.reshape(var_1084.astype('float64'), []), ), 2)
call_1109 = relay.TupleGetItem(func_276_call(relay.reshape(var_1108.astype('float64'), [2, 7]), relay.reshape(var_1108.astype('float64'), [2, 7]), relay.reshape(var_1084.astype('float64'), []), ), 2)
func_608_call = mod.get_global_var('func_608')
func_612_call = mutated_mod.get_global_var('func_612')
const_1111 = relay.const([6.893353,-8.848962,-7.779390,-5.763247], dtype = "float32")#candidate|1111|(4,)|const|float32
call_1110 = relay.TupleGetItem(func_608_call(relay.reshape(const_1111.astype('float32'), [4,]), relay.reshape(var_1084.astype('float64'), []), relay.reshape(const_1111.astype('float32'), [4,]), ), 2)
call_1112 = relay.TupleGetItem(func_612_call(relay.reshape(const_1111.astype('float32'), [4,]), relay.reshape(var_1084.astype('float64'), []), relay.reshape(const_1111.astype('float32'), [4,]), ), 2)
func_608_call = mod.get_global_var('func_608')
func_612_call = mutated_mod.get_global_var('func_612')
call_1113 = relay.TupleGetItem(func_608_call(relay.reshape(const_1111.astype('float32'), [4,]), relay.reshape(var_1084.astype('float64'), []), relay.reshape(const_1111.astype('float32'), [4,]), ), 0)
call_1114 = relay.TupleGetItem(func_612_call(relay.reshape(const_1111.astype('float32'), [4,]), relay.reshape(var_1084.astype('float64'), []), relay.reshape(const_1111.astype('float32'), [4,]), ), 0)
uop_1119 = relay.sqrt(call_1107.astype('float32')) # shape=(16, 10)
uop_1121 = relay.sqrt(call_1109.astype('float32')) # shape=(16, 10)
func_546_call = mod.get_global_var('func_546')
func_552_call = mutated_mod.get_global_var('func_552')
call_1123 = relay.TupleGetItem(func_546_call(relay.reshape(call_1101.astype('float64'), [10, 9, 8]), relay.reshape(call_1101.astype('float64'), [10, 9, 8]), relay.reshape(const_1096.astype('float64'), [3,]), relay.reshape(call_1101.astype('float32'), [10, 9, 8]), ), 0)
call_1124 = relay.TupleGetItem(func_552_call(relay.reshape(call_1101.astype('float64'), [10, 9, 8]), relay.reshape(call_1101.astype('float64'), [10, 9, 8]), relay.reshape(const_1096.astype('float64'), [3,]), relay.reshape(call_1101.astype('float32'), [10, 9, 8]), ), 0)
uop_1125 = relay.erf(uop_1119.astype('float64')) # shape=(16, 10)
uop_1127 = relay.erf(uop_1121.astype('float64')) # shape=(16, 10)
output = relay.Tuple([bop_1076,call_1083,var_1084,const_1085,call_1088,var_1089,call_1094,var_1095,const_1096,bop_1098,call_1101,var_1102,var_1108,call_1110,const_1111,call_1113,call_1123,uop_1125,])
output2 = relay.Tuple([bop_1076,call_1086,var_1084,const_1085,call_1090,var_1089,call_1097,var_1095,const_1096,bop_1098,call_1103,var_1102,var_1108,call_1112,const_1111,call_1114,call_1124,uop_1127,])
F = relay.Function([var_1066,var_1084,var_1089,var_1095,var_1102,var_1108,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1066,var_1084,var_1089,var_1095,var_1102,var_1108,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1066= np.array([[10,-1,9,-6,4,-4,-6,-9],[7,5,-1,-10,-9,-8,2,6],[6,-10,9,-5,-3,3,-3,10],[-4,-9,-2,-1,1,-4,1,-4],[9,5,1,-10,1,6,6,4],[-8,6,2,-1,-9,6,6,1],[6,-3,6,-3,-7,-10,2,-4],[7,-2,-7,1,-9,8,-9,-1],[2,3,-7,4,-5,10,10,-10]], dtype='int8')
module1.set_input('var_1066', input_1066)
input_1084= np.array(-8.551809, dtype='float32')
module1.set_input('var_1084', input_1084)
input_1089= np.array([[False,False,True,False,True,False,False,False],[True,False,False,False,False,True,True,True]], dtype='bool')
module1.set_input('var_1089', input_1089)
input_1095= np.array([8.218917,5.016157,-0.487224,-2.272269,-0.948915,7.556704], dtype='float32')
module1.set_input('var_1095', input_1095)
input_1102= np.array([-2.569804,0.656230,-8.489328,-5.492622,8.727295,5.137369,5.610504,-6.206631,-6.867008,-0.153064,7.329626,8.979339,-7.970653,-2.560024,6.822707,-8.163738,-3.190107,-4.507705,5.137331,7.819601,-1.719886,4.902678,-3.589112,-0.088707,-4.123814,-3.050216,-9.864871,-4.342517,8.649074,3.500278,-5.908237,9.069741,-3.454055,8.023513,-3.594741,-9.760597,2.372668,9.284524,0.668946,-8.937904,-3.595814,7.816745,0.763385,7.101416,-4.988176,9.692473,-4.514754,-7.954504,1.031041,-6.762949,-2.287735,-9.952627,5.843024,6.322369,6.839045,-1.434935,1.841202,-1.467528,9.698268,2.004102,0.292182,-3.422488,7.314823,-2.731147,4.026869,8.587790,3.635879,9.621658,2.559582,9.066271,8.041889,-6.978519,-2.778512,2.922095,-7.693678,7.649230,7.165058,7.607974,-0.220977,0.825107,1.719114,3.256787,5.332546,7.733967,-4.609782,3.215832,-0.885630,-2.847347,8.031926,7.088996,-1.669957,0.535177,-2.130221,4.322257,-8.933166,-9.552099,3.821069,-1.297641,3.076164,4.071899,-5.689299,9.441581,-7.767413,7.511542,0.059172,9.695424,-3.469656,7.626956,8.881624,3.483385,-7.264981,2.823211,-7.240290,-2.970135,4.575881,6.093580,-2.765277,8.059639,-0.689606,-9.833235,6.766644,6.985974,-7.904427,-7.966299,8.111343,0.039519,-7.501932,2.015396,-5.787159,-3.103230,6.365517,-4.640712,-8.191577,-9.538767,-1.290069,-4.338602,-6.422515,6.070211,-1.962613,0.601322,-5.982260,0.449052,2.044607,0.270060,-8.915285,-1.642131,6.435875,-9.814319,-1.085264,-1.341710,2.671589,-4.519214,-8.012663,5.318758,8.982471,6.293673,4.637421,-3.885993,2.845898,2.633172,9.064018,-7.024522,-8.377769,-5.996792,5.537321,9.294606,9.880136,9.779164,-6.894061,7.344201,3.562158,8.011064,0.229747,6.593659,7.906645,3.543128,-8.167137,8.597871,-7.377157,4.030569,-5.875673,-1.566162,-1.316231,7.119496,-5.570851,2.409976,4.481887,5.746286,-4.839492,-8.181044,4.974351,1.006201,8.591299,-3.270505,-9.567351,6.240066,-3.740667,0.419450,1.655757,7.900524,8.512876,0.699338,9.898580,2.593767,-5.182149,4.644399,7.978793,5.495836,9.133058,-2.536319,-2.863546,-3.711911,-8.931213,9.074853,5.276469,2.735286,2.127684,9.945889,5.144013,3.998002,-3.992607,4.670583,0.363336,-7.367287,-4.024754,-8.793356,8.663786,-8.597580,-8.138370,9.291706,-2.765024,-1.644435,-6.351490,2.534736,2.622688,5.841855,9.267065,6.590956,4.458333,-2.615589,8.501944,-4.016508,0.549812,-7.331688,4.516554,7.576823,-8.851191,5.551747,-9.658952,4.306835,7.936741,8.435664,5.625967,6.879474,0.330393,6.526623,6.179437,1.949228,-9.569083,-0.059649,6.487541,7.749218,-0.006373,-4.193591,4.459598,-3.309241,-8.720309,-2.384202,-5.402226,4.262081,9.829740,-2.648910,-0.423276,8.225862,5.635939,-5.374703,-7.620540,2.684730,5.793894,7.748133,3.491236,6.248952,0.029459,5.123165,-7.829144,6.441673,8.434981,-8.150859,9.310670,-9.278182,9.551478,-8.911212,0.293639,-8.816128,5.238490,9.888292,0.889411,2.096782,-3.912480,5.864873,9.970757,-4.432865,-2.701602,-4.027312,9.773264,2.444045,-9.441434,-8.473580,0.845762,-5.247463,-9.352608,8.890777,-7.423971,-7.326578,3.712745,7.848942,4.172724,-1.205238,-3.655503,8.125612,2.226979,7.426517,-1.874463,0.445062,-9.681147,3.141385,-7.740855,5.796835,3.178081,2.448208,4.011746,0.326618,7.167728,-7.171102,-9.349634,0.892101,-0.055048,4.908088,-0.977565,-3.435300,-9.612792,5.947121,-5.100577,-1.009597,-3.640572,2.610552,-1.333644,-9.194658,-6.393827,-2.430034,8.754212,-2.944173,-1.334093,-7.179430,3.784370,9.187619,-3.541749,-6.485875,0.433402,-4.928741,-1.024427,9.081257,-5.822573,-6.650717,1.570456,-0.157082,-5.228994,-3.674839,-3.118217,7.395792,-4.707551,-6.774244,7.819726,9.514954,7.090987,4.554123,7.673607,-4.463408,-0.421043,-6.440048,9.905958,-6.256990,-9.437960,-9.711003,-5.263281,-0.886176,6.703964,3.778403,9.047116,9.086090,1.421770,-1.057884,-6.301154,-7.094657,-1.231355,-6.331629,3.009461,6.189747,2.337167,6.735318,-5.935979,-6.141882,-1.753453,-3.231034,0.303422,-6.353204,-0.765604,8.697568,5.467924,-8.619646,1.785201,-5.353790,1.695939,-1.796352,8.251703,-0.035370,8.589759,7.202255,1.550630,6.048936,-8.640015,2.633665,-1.630960,1.032549,-0.039372,0.770770,-4.259957,5.728100,-5.135995,-0.872134,6.233310,8.412145,-7.616014,-2.401247,-9.699420,-6.539042,5.942736,-7.490690,-8.944429,2.948663,5.770006,-5.272115,-2.181176,4.943253,7.345121,8.769409,7.050350,2.011088,3.010721,9.504849,5.349108,-6.187068,9.245828,3.058645,-0.223154,-5.872239,8.323437,5.016629,-3.853073,-5.620155,2.019502,-6.693409,-1.991322,-9.691957,2.201217,-0.247858,7.121657,1.434695,6.959252,-5.238150,-9.286391,5.160279,-0.492527,0.342990,8.934471,-2.541845,0.910070,5.587284,3.780011,-1.864846,5.129653,2.013115,1.343343,8.792156,8.626131,3.307360,6.662617,-5.391948,5.904867,-7.549611,4.416648,2.489073,-4.697373,4.062411,-9.554783,-1.179550,-8.096197,-2.259457,9.355126,-8.081284,-0.208487,-9.777294,-1.077891,6.213375,-0.201080,-7.752528,-7.308127,9.196681,2.641750,-7.919652,-7.489733,8.668122,4.702328,-0.007456,-6.844072,3.392264,-9.975707,-6.728664,-1.087050,5.409247,8.890988,6.614877,9.968865,-8.967697,7.470810,1.312099,-5.979282,-3.213791,-8.708372,-6.691319,3.261440,0.962142,5.640737,-0.375477,7.854825,-0.104899,8.381092,5.990004,-0.924034,0.178934,-1.497833,8.249009,-1.892093,-7.196593,5.103473,0.722110,8.430068,-4.513625,-8.015788,-2.853402,-0.295529,-5.053025,-2.657403,4.977774,-1.098965,-2.729030,0.114973,8.915493,2.372810,-4.245073,-0.907024,8.924401,3.030536,-8.920037,-9.504978,4.065435,5.715788,3.637688,7.539601,7.017655,0.470336,0.512301,1.572594,-0.342077,-3.354443,5.082161,-2.988866,-3.626940,0.825453,5.481777,-3.369350,-5.015697,2.460874,9.102337,-2.344562,-4.266551,9.902682,-0.064995,-6.155968,4.316255,-7.870060,0.336316,-9.484374,-6.819564,-2.482466,3.316309,-6.875096,-6.073757,0.250210,2.487876,-0.013680,-2.175039,9.826678,6.080702,3.665794,-6.384890,5.704327,9.065309,-7.742666,6.882833,4.267334,5.039589,5.198627,0.557333,6.734254,-2.232891,-7.426958,3.269638,-6.165271,9.860684,-6.852443,8.008233,0.652578,3.102551,-6.433086,-2.965109,7.823215,9.349475,-7.913836,-1.584826,8.010030,5.358140,7.707180,8.758673,7.169960,4.266486,7.938085,-1.326023,8.192284,-5.840659,-6.013605,-7.461040,-8.888320,-5.432484,-5.683351,-4.607629,-0.659592,-1.152071,6.693365,7.903708,-4.963611,-1.643742,6.300958,4.617148,-0.015194,-8.421137,-0.687499,-2.970314,-6.281385,2.453103,2.912200,8.325815,-3.393472,9.590144,9.021816,-6.067690,-4.477248,9.615030,4.882706,-6.661865,-1.132669,7.123764,0.827845,1.474459,-2.492235,6.855929,0.660304,3.152501,-2.423609,9.329102,7.368306,2.400674,-1.947473,8.662427,9.181062,4.413130,-9.853435,3.766484,-6.162879,-3.775813,1.546033,7.246904,-0.546181,-7.287495,4.932433,-9.441323,-7.093918,-4.970506,9.112954,-3.535449,-5.355921,-4.288682,-8.130622,-6.231325,0.331684,-8.422061,-0.727661,9.503378,-5.336504,0.912342,3.104699,8.689560,-5.914826,-3.416688,6.427734,-1.053477,-5.211469,5.132948,-0.352974,6.655804], dtype='float64')
module1.set_input('var_1102', input_1102)
input_1108= np.array([-6.178003,1.950669,8.659924,9.481959,-2.986249,-0.663041,-9.152097,2.319106,4.548847,-5.530516,3.023366,-3.006919,-3.167092,-3.323240], dtype='float64')
module1.set_input('var_1108', input_1108)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1066, input_1084, input_1089, input_1095, input_1102, input_1108, )
res3 = intrp3.evaluate()(input_1066, input_1084, input_1089, input_1095, input_1102, input_1108, )
res4 = intrp4.evaluate()(input_1066, input_1084, input_1089, input_1095, input_1102, input_1108, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
res1_14 = module1.get_output(14).asnumpy()
res2_14 = res2[14].asnumpy()
res3_14 = res3[14].asnumpy()
res4_14 = res4[14].asnumpy()
np.testing.assert_allclose(res1_14 ,res2_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res3_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res4_14, atol=1e-3, rtol=1e-3)
(res1_14 == res2_14).all()
(res1_14 == res3_14).all()
(res1_14 == res4_14).all()
res1_15 = module1.get_output(15).asnumpy()
res2_15 = res2[15].asnumpy()
res3_15 = res3[15].asnumpy()
res4_15 = res4[15].asnumpy()
np.testing.assert_allclose(res1_15 ,res2_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res3_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res4_15, atol=1e-3, rtol=1e-3)
(res1_15 == res2_15).all()
(res1_15 == res3_15).all()
(res1_15 == res4_15).all()
res1_16 = module1.get_output(16).asnumpy()
res2_16 = res2[16].asnumpy()
res3_16 = res3[16].asnumpy()
res4_16 = res4[16].asnumpy()
np.testing.assert_allclose(res1_16 ,res2_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res3_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res4_16, atol=1e-3, rtol=1e-3)
(res1_16 == res2_16).all()
(res1_16 == res3_16).all()
(res1_16 == res4_16).all()
res1_17 = module1.get_output(17).asnumpy()
res2_17 = res2[17].asnumpy()
res3_17 = res3[17].asnumpy()
res4_17 = res4[17].asnumpy()
np.testing.assert_allclose(res1_17 ,res2_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res3_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res4_17, atol=1e-3, rtol=1e-3)
(res1_17 == res2_17).all()
(res1_17 == res3_17).all()
(res1_17 == res4_17).all()
module5.set_input('var_1066', input_1066)
module5.set_input('var_1084', input_1084)
module5.set_input('var_1089', input_1089)
module5.set_input('var_1095', input_1095)
module5.set_input('var_1102', input_1102)
module5.set_input('var_1108', input_1108)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1066, input_1084, input_1089, input_1095, input_1102, input_1108, )
res7 = intrp7.evaluate()(input_1066, input_1084, input_1089, input_1095, input_1102, input_1108, )
res8 = intrp8.evaluate()(input_1066, input_1084, input_1089, input_1095, input_1102, input_1108, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
res5_14 = module5.get_output(14).asnumpy()
res6_14 = res6[14].asnumpy()
res7_14 = res7[14].asnumpy()
res8_14 = res8[14].asnumpy()
np.testing.assert_allclose(res5_14 ,res6_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res7_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res8_14, atol=1e-3, rtol=1e-3)
(res5_14 == res6_14).all()
(res5_14 == res7_14).all()
(res5_14 == res8_14).all()
res5_15 = module5.get_output(15).asnumpy()
res6_15 = res6[15].asnumpy()
res7_15 = res7[15].asnumpy()
res8_15 = res8[15].asnumpy()
np.testing.assert_allclose(res5_15 ,res6_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res7_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res8_15, atol=1e-3, rtol=1e-3)
(res5_15 == res6_15).all()
(res5_15 == res7_15).all()
(res5_15 == res8_15).all()
res5_16 = module5.get_output(16).asnumpy()
res6_16 = res6[16].asnumpy()
res7_16 = res7[16].asnumpy()
res8_16 = res8[16].asnumpy()
np.testing.assert_allclose(res5_16 ,res6_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res7_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res8_16, atol=1e-3, rtol=1e-3)
(res5_16 == res6_16).all()
(res5_16 == res7_16).all()
(res5_16 == res8_16).all()
res5_17 = module5.get_output(17).asnumpy()
res6_17 = res6[17].asnumpy()
res7_17 = res7[17].asnumpy()
res8_17 = res8[17].asnumpy()
np.testing.assert_allclose(res5_17 ,res6_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res7_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res8_17, atol=1e-3, rtol=1e-3)
(res5_17 == res6_17).all()
(res5_17 == res7_17).all()
(res5_17 == res8_17).all()
module9.set_input('var_1066', input_1066)
module9.set_input('var_1084', input_1084)
module9.set_input('var_1089', input_1089)
module9.set_input('var_1095', input_1095)
module9.set_input('var_1102', input_1102)
module9.set_input('var_1108', input_1108)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1066, input_1084, input_1089, input_1095, input_1102, input_1108, )
res11 = intrp11.evaluate()(input_1066, input_1084, input_1089, input_1095, input_1102, input_1108, )
res12 = intrp12.evaluate()(input_1066, input_1084, input_1089, input_1095, input_1102, input_1108, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
res9_14 = module9.get_output(14).asnumpy()
res10_14 = res10[14].asnumpy()
res11_14 = res11[14].asnumpy()
res12_14 = res12[14].asnumpy()
np.testing.assert_allclose(res9_14 ,res10_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res11_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res12_14, atol=1e-3, rtol=1e-3)
(res9_14 == res10_14).all()
(res9_14 == res11_14).all()
(res9_14 == res12_14).all()
res9_15 = module9.get_output(15).asnumpy()
res10_15 = res10[15].asnumpy()
res11_15 = res11[15].asnumpy()
res12_15 = res12[15].asnumpy()
np.testing.assert_allclose(res9_15 ,res10_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res11_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res12_15, atol=1e-3, rtol=1e-3)
(res9_15 == res10_15).all()
(res9_15 == res11_15).all()
(res9_15 == res12_15).all()
res9_16 = module9.get_output(16).asnumpy()
res10_16 = res10[16].asnumpy()
res11_16 = res11[16].asnumpy()
res12_16 = res12[16].asnumpy()
np.testing.assert_allclose(res9_16 ,res10_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res11_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res12_16, atol=1e-3, rtol=1e-3)
(res9_16 == res10_16).all()
(res9_16 == res11_16).all()
(res9_16 == res12_16).all()
res9_17 = module9.get_output(17).asnumpy()
res10_17 = res10[17].asnumpy()
res11_17 = res11[17].asnumpy()
res12_17 = res12[17].asnumpy()
np.testing.assert_allclose(res9_17 ,res10_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res11_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res12_17, atol=1e-3, rtol=1e-3)
(res9_17 == res10_17).all()
(res9_17 == res11_17).all()
(res9_17 == res12_17).all()
module13.set_input('var_1066', input_1066)
module13.set_input('var_1084', input_1084)
module13.set_input('var_1089', input_1089)
module13.set_input('var_1095', input_1095)
module13.set_input('var_1102', input_1102)
module13.set_input('var_1108', input_1108)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1066, input_1084, input_1089, input_1095, input_1102, input_1108, )
res15 = intrp15.evaluate()(input_1066, input_1084, input_1089, input_1095, input_1102, input_1108, )
res16 = intrp16.evaluate()(input_1066, input_1084, input_1089, input_1095, input_1102, input_1108, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
res13_14 = module13.get_output(14).asnumpy()
res14_14 = res14[14].asnumpy()
res15_14 = res15[14].asnumpy()
res16_14 = res16[14].asnumpy()
np.testing.assert_allclose(res13_14 ,res14_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res15_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res16_14, atol=1e-3, rtol=1e-3)
(res13_14 == res14_14).all()
(res13_14 == res15_14).all()
(res13_14 == res16_14).all()
res13_15 = module13.get_output(15).asnumpy()
res14_15 = res14[15].asnumpy()
res15_15 = res15[15].asnumpy()
res16_15 = res16[15].asnumpy()
np.testing.assert_allclose(res13_15 ,res14_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res15_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res16_15, atol=1e-3, rtol=1e-3)
(res13_15 == res14_15).all()
(res13_15 == res15_15).all()
(res13_15 == res16_15).all()
res13_16 = module13.get_output(16).asnumpy()
res14_16 = res14[16].asnumpy()
res15_16 = res15[16].asnumpy()
res16_16 = res16[16].asnumpy()
np.testing.assert_allclose(res13_16 ,res14_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res15_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res16_16, atol=1e-3, rtol=1e-3)
(res13_16 == res14_16).all()
(res13_16 == res15_16).all()
(res13_16 == res16_16).all()
res13_17 = module13.get_output(17).asnumpy()
res14_17 = res14[17].asnumpy()
res15_17 = res15[17].asnumpy()
res16_17 = res16[17].asnumpy()
np.testing.assert_allclose(res13_17 ,res14_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res15_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res16_17, atol=1e-3, rtol=1e-3)
(res13_17 == res14_17).all()
(res13_17 == res15_17).all()
(res13_17 == res16_17).all()
module17.set_input('var_1066', input_1066)
module17.set_input('var_1084', input_1084)
module17.set_input('var_1089', input_1089)
module17.set_input('var_1095', input_1095)
module17.set_input('var_1102', input_1102)
module17.set_input('var_1108', input_1108)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1066, input_1084, input_1089, input_1095, input_1102, input_1108, )
res19 = intrp19.evaluate()(input_1066, input_1084, input_1089, input_1095, input_1102, input_1108, )
res20 = intrp20.evaluate()(input_1066, input_1084, input_1089, input_1095, input_1102, input_1108, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
res17_14 = module17.get_output(14).asnumpy()
res18_14 = res18[14].asnumpy()
res19_14 = res19[14].asnumpy()
res20_14 = res20[14].asnumpy()
np.testing.assert_allclose(res17_14 ,res18_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res19_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res20_14, atol=1e-3, rtol=1e-3)
(res17_14 == res18_14).all()
(res17_14 == res19_14).all()
(res17_14 == res20_14).all()
res17_15 = module17.get_output(15).asnumpy()
res18_15 = res18[15].asnumpy()
res19_15 = res19[15].asnumpy()
res20_15 = res20[15].asnumpy()
np.testing.assert_allclose(res17_15 ,res18_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res19_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res20_15, atol=1e-3, rtol=1e-3)
(res17_15 == res18_15).all()
(res17_15 == res19_15).all()
(res17_15 == res20_15).all()
res17_16 = module17.get_output(16).asnumpy()
res18_16 = res18[16].asnumpy()
res19_16 = res19[16].asnumpy()
res20_16 = res20[16].asnumpy()
np.testing.assert_allclose(res17_16 ,res18_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res19_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res20_16, atol=1e-3, rtol=1e-3)
(res17_16 == res18_16).all()
(res17_16 == res19_16).all()
(res17_16 == res20_16).all()
res17_17 = module17.get_output(17).asnumpy()
res18_17 = res18[17].asnumpy()
res19_17 = res19[17].asnumpy()
res20_17 = res20[17].asnumpy()
np.testing.assert_allclose(res17_17 ,res18_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res19_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res20_17, atol=1e-3, rtol=1e-3)
(res17_17 == res18_17).all()
(res17_17 == res19_17).all()
(res17_17 == res20_17).all()
module21.set_input('var_1066', input_1066)
module21.set_input('var_1084', input_1084)
module21.set_input('var_1089', input_1089)
module21.set_input('var_1095', input_1095)
module21.set_input('var_1102', input_1102)
module21.set_input('var_1108', input_1108)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1066, input_1084, input_1089, input_1095, input_1102, input_1108, )
res23 = intrp23.evaluate()(input_1066, input_1084, input_1089, input_1095, input_1102, input_1108, )
res24 = intrp24.evaluate()(input_1066, input_1084, input_1089, input_1095, input_1102, input_1108, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()
res21_14 = module21.get_output(14).asnumpy()
res22_14 = res22[14].asnumpy()
res23_14 = res23[14].asnumpy()
res24_14 = res24[14].asnumpy()
np.testing.assert_allclose(res21_14 ,res22_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res23_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res24_14, atol=1e-3, rtol=1e-3)
(res21_14 == res22_14).all()
(res21_14 == res23_14).all()
(res21_14 == res24_14).all()
res21_15 = module21.get_output(15).asnumpy()
res22_15 = res22[15].asnumpy()
res23_15 = res23[15].asnumpy()
res24_15 = res24[15].asnumpy()
np.testing.assert_allclose(res21_15 ,res22_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res23_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res24_15, atol=1e-3, rtol=1e-3)
(res21_15 == res22_15).all()
(res21_15 == res23_15).all()
(res21_15 == res24_15).all()
res21_16 = module21.get_output(16).asnumpy()
res22_16 = res22[16].asnumpy()
res23_16 = res23[16].asnumpy()
res24_16 = res24[16].asnumpy()
np.testing.assert_allclose(res21_16 ,res22_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res23_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res24_16, atol=1e-3, rtol=1e-3)
(res21_16 == res22_16).all()
(res21_16 == res23_16).all()
(res21_16 == res24_16).all()
res21_17 = module21.get_output(17).asnumpy()
res22_17 = res22[17].asnumpy()
res23_17 = res23[17].asnumpy()
res24_17 = res24[17].asnumpy()
np.testing.assert_allclose(res21_17 ,res22_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res23_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res24_17, atol=1e-3, rtol=1e-3)
(res21_17 == res22_17).all()
(res21_17 == res23_17).all()
(res21_17 == res24_17).all()

'''104: TVMFuncCall
103: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
102: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
101: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
100: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
99: tvm::transform::Pass::operator()(tvm::IRModule) const
98: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
97: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
96: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
95: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
94: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
93: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
92: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
91: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
90: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
89: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
88: _ZN3tvm5relay16MixedModeMutato
87: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
86: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
85: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
84: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
83: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
82: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
81: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
80: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
79: _ZN3tvm5relay16MixedModeMutato
78: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
77: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
76: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
75: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
74: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
73: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
72: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
71: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
70: tvm::transform::Pass::operator()(tvm::IRModule) const
69: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
68: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
67: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
66: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
65: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
64: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
63: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
62: _ZN3tvm5relay16MixedModeMutato
61: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
60: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
59: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
58: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
57: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
56: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
55: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
54: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
53: _ZN3tvm5relay16MixedModeMutato
52: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
51: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
50: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
49: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
48: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
46: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''