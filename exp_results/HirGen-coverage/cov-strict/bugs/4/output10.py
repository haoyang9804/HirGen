import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
const_3 = relay.const([[-5,3,-7,-4,1,-9],[-10,-1,7,8,1,-3],[-10,4,6,-3,-2,-3],[-5,1,-6,-4,3,1],[-5,5,3,-4,-10,-10],[8,-7,4,-1,-8,-4],[5,3,7,9,2,-10]], dtype = "uint32")#candidate|3|(7, 6)|const|uint32
const_4 = relay.const([[-5,-3,-9,2,6,8],[3,-6,10,10,-3,7],[-8,-1,-1,5,3,-1],[-8,8,-4,-1,2,-4],[9,-4,-3,-10,-3,4],[-6,-2,-6,3,5,-7],[-8,5,-8,-4,5,9]], dtype = "uint32")#candidate|4|(7, 6)|const|uint32
bop_5 = relay.greater_equal(const_3.astype('bool'), relay.reshape(const_4.astype('bool'), relay.shape_of(const_3))) # shape=(7, 6)
bop_8 = relay.floor_mod(bop_5.astype('float32'), relay.reshape(const_4.astype('float32'), relay.shape_of(bop_5))) # shape=(7, 6)
uop_14 = relay.log2(const_3.astype('float64')) # shape=(7, 6)
var_16 = relay.var("var_16", dtype = "float64", shape = (7, 6))#candidate|16|(7, 6)|var|float64
bop_17 = relay.not_equal(uop_14.astype('bool'), relay.reshape(var_16.astype('bool'), relay.shape_of(uop_14))) # shape=(7, 6)
bop_22 = relay.bitwise_and(uop_14.astype('uint8'), relay.reshape(const_4.astype('uint8'), relay.shape_of(uop_14))) # shape=(7, 6)
bop_25 = relay.multiply(bop_22.astype('uint32'), relay.reshape(bop_5.astype('uint32'), relay.shape_of(bop_22))) # shape=(7, 6)
bop_36 = relay.right_shift(bop_5.astype('uint64'), relay.reshape(bop_22.astype('uint64'), relay.shape_of(bop_5))) # shape=(7, 6)
uop_39 = relay.acos(bop_22.astype('float32')) # shape=(7, 6)
uop_42 = relay.cos(bop_5.astype('float64')) # shape=(7, 6)
var_51 = relay.var("var_51", dtype = "float32", shape = (7, 6))#candidate|51|(7, 6)|var|float32
bop_52 = relay.bitwise_and(uop_39.astype('uint16'), relay.reshape(var_51.astype('uint16'), relay.shape_of(uop_39))) # shape=(7, 6)
bop_57 = relay.logical_xor(const_3.astype('uint8'), relay.reshape(bop_5.astype('uint8'), relay.shape_of(const_3))) # shape=(7, 6)
output = relay.Tuple([bop_8,bop_17,bop_25,bop_36,uop_42,bop_52,bop_57,])
output2 = relay.Tuple([bop_8,bop_17,bop_25,bop_36,uop_42,bop_52,bop_57,])
func_61 = relay.Function([var_16,var_51,], output)
mod['func_61'] = func_61
mod = relay.transform.InferType()(mod)
mutated_mod['func_61'] = func_61
mutated_mod = relay.transform.InferType()(mutated_mod)
func_61_call = mutated_mod.get_global_var('func_61')
var_63 = relay.var("var_63", dtype = "float64", shape = (7, 6))#candidate|63|(7, 6)|var|float64
var_64 = relay.var("var_64", dtype = "float32", shape = (7, 6))#candidate|64|(7, 6)|var|float32
call_62 = func_61_call(var_63,var_64,)
output = call_62
func_65 = relay.Function([var_63,var_64,], output)
mutated_mod['func_65'] = func_65
mutated_mod = relay.transform.InferType()(mutated_mod)
const_216 = relay.const([[[5.311645,4.455704,-0.995189,-5.567893,0.370178,-7.135948,6.103648,8.472163,-4.910425],[-4.541864,1.970594,-3.750325,-3.792685,-3.659922,-9.400316,-6.659535,7.361700,-2.260993],[-3.163483,2.530873,5.437172,4.207450,5.141490,4.560820,3.837314,-1.930270,-8.787456]],[[-9.078622,1.291039,-6.186137,-7.422818,5.639568,-9.712627,7.134840,-0.513867,-9.280524],[9.739599,2.988084,2.906932,-4.417306,-8.529161,1.682043,3.779323,3.411151,4.027749],[5.794508,4.441747,6.477660,-9.333059,-4.908572,-8.407317,1.275133,-4.678805,-3.854818]],[[7.236279,-6.256938,1.567931,3.122270,0.649112,3.663242,-5.275119,3.480421,-3.054006],[-2.541429,5.930004,7.606022,4.559045,5.988903,2.115529,3.892111,3.279233,2.370845],[-2.608042,7.842054,5.588948,-7.459963,7.769081,6.805432,-4.628113,4.624987,2.074413]],[[5.714272,7.486067,-2.184781,-1.128209,4.606442,-4.965205,4.351781,5.072965,-6.462709],[6.530562,5.442463,-5.002369,-0.407150,-1.800683,9.397560,5.660228,-1.159831,5.808405],[4.719467,5.639509,6.285090,1.958373,-4.349429,-8.645711,-2.146579,4.908629,-6.678004]],[[-5.592625,-2.645741,-4.464165,-3.474066,5.344276,-7.569163,-6.752200,-0.194283,0.631225],[9.012268,-6.011965,2.949212,-3.322540,0.795311,3.164836,-9.616118,-2.570795,-5.728328],[-3.190792,-2.200472,-7.033408,-9.861940,6.054438,-4.972103,0.287087,1.760359,8.106476]],[[-7.304681,-4.296672,0.739283,4.969798,-3.131214,-2.685793,2.963084,0.163055,-2.898836],[-9.974377,-8.000956,-6.091387,-1.406985,-2.182411,4.715440,4.568549,-8.104951,5.517511],[1.797169,4.976202,9.684148,5.570296,-9.765896,-0.111767,-7.722782,9.736964,-5.913876]],[[7.503089,4.150020,6.319150,1.941050,-3.123380,-8.126692,1.242983,9.718238,4.808911],[-0.500729,7.222345,-8.100744,-9.502809,-0.744732,4.398520,6.015170,-6.922792,9.652859],[0.412357,-1.065632,-0.196195,-1.774306,-0.943625,-4.550610,-0.742145,-0.435003,0.194170]],[[1.033472,0.659841,5.392240,9.048609,3.286620,-4.651659,9.196692,4.601670,6.426191],[-1.779051,4.726331,3.628182,7.972358,6.504597,7.418573,-2.184922,-6.705792,8.775719],[-6.361630,-7.400417,-0.628956,-8.091044,-3.355856,6.242359,4.282518,7.677792,-5.085248]],[[-5.135752,-8.569459,-2.560421,-6.652052,7.598919,-2.600479,4.062074,2.138335,4.215975],[-0.019504,7.136449,4.600557,-2.546806,-8.120346,-1.270267,6.563724,-2.514043,-7.227207],[7.570802,1.094320,0.708643,2.716908,6.096660,-8.486472,-1.707595,-4.314337,5.261535]],[[-6.287750,4.888937,-9.007052,-9.965430,-9.675148,5.726027,2.886094,-3.413849,8.400025],[-3.357118,-1.467930,3.314397,-0.509889,7.784243,9.614795,3.601433,-2.968009,2.525842],[-8.709809,-7.913859,-6.119809,0.700954,3.405841,1.168740,2.501795,8.021055,8.091460]]], dtype = "float32")#candidate|216|(10, 3, 9)|const|float32
var_217 = relay.var("var_217", dtype = "float32", shape = (10, 3, 9))#candidate|217|(10, 3, 9)|var|float32
bop_218 = relay.power(const_216.astype('float32'), relay.reshape(var_217.astype('float32'), relay.shape_of(const_216))) # shape=(10, 3, 9)
bop_221 = relay.right_shift(const_216.astype('uint16'), relay.reshape(var_217.astype('uint16'), relay.shape_of(const_216))) # shape=(10, 3, 9)
bop_235 = relay.bitwise_and(var_217.astype('int64'), relay.reshape(const_216.astype('int64'), relay.shape_of(var_217))) # shape=(10, 3, 9)
func_61_call = mod.get_global_var('func_61')
func_65_call = mutated_mod.get_global_var('func_65')
const_241 = relay.const([9.141265,-5.553542,-5.466424,-2.356273,9.021863,2.004537,9.258968,-3.435780,8.080090,8.195838,5.811000,0.926948,2.220951,1.742607,3.431598,-3.616666,-3.924007,3.992269,-3.478135,8.512745,1.071975,-7.731836,1.846527,5.604772,2.726108,-0.540761,3.459257,-9.246395,-2.168641,0.131051,-6.327926,-3.010257,5.315105,1.923730,1.765712,2.529171,-6.921013,5.325552,-3.254256,-4.020575,3.702835,0.737528], dtype = "float64")#candidate|241|(42,)|const|float64
call_240 = relay.TupleGetItem(func_61_call(relay.reshape(const_241.astype('float64'), [7, 6]), relay.reshape(const_241.astype('float32'), [7, 6]), ), 4)
call_242 = relay.TupleGetItem(func_65_call(relay.reshape(const_241.astype('float64'), [7, 6]), relay.reshape(const_241.astype('float32'), [7, 6]), ), 4)
output = relay.Tuple([bop_218,bop_221,bop_235,call_240,const_241,])
output2 = relay.Tuple([bop_218,bop_221,bop_235,call_242,const_241,])
func_244 = relay.Function([var_217,], output)
mod['func_244'] = func_244
mod = relay.transform.InferType()(mod)
var_245 = relay.var("var_245", dtype = "float32", shape = (10, 3, 9))#candidate|245|(10, 3, 9)|var|float32
output = func_244(var_245)
func_246 = relay.Function([var_245], output)
mutated_mod['func_246'] = func_246
mutated_mod = relay.transform.InferType()(mutated_mod)
const_248 = relay.const([[-2.896286,2.558574,4.701635,2.493510,-8.527884,1.063007,7.810143,-3.313040,-6.241385,-1.611850,2.581146,0.434400,-7.890365,4.369998,4.053823,1.122469]], dtype = "float64")#candidate|248|(1, 16)|const|float64
uop_249 = relay.sqrt(const_248.astype('float64')) # shape=(1, 16)
bop_252 = relay.greater_equal(uop_249.astype('bool'), relay.reshape(const_248.astype('bool'), relay.shape_of(uop_249))) # shape=(1, 16)
uop_256 = relay.acos(uop_249.astype('float32')) # shape=(1, 16)
uop_258 = relay.sinh(uop_256.astype('float32')) # shape=(1, 16)
bop_262 = relay.greater(uop_258.astype('bool'), relay.reshape(bop_252.astype('bool'), relay.shape_of(uop_258))) # shape=(1, 16)
uop_265 = relay.acosh(const_248.astype('float32')) # shape=(1, 16)
bop_268 = relay.right_shift(uop_256.astype('int32'), relay.reshape(uop_249.astype('int32'), relay.shape_of(uop_256))) # shape=(1, 16)
var_273 = relay.var("var_273", dtype = "float32", shape = (6, 16))#candidate|273|(6, 16)|var|float32
bop_274 = relay.maximum(uop_258.astype('uint8'), var_273.astype('uint8')) # shape=(6, 16)
func_61_call = mod.get_global_var('func_61')
func_65_call = mutated_mod.get_global_var('func_65')
const_281 = relay.const([-9.773420,8.514182,-3.112178,7.970652,-0.713088,-0.242669,-5.096213,4.293452,-3.809009,-4.389097,5.453643,6.156741,-0.347766,0.813947,-2.786528,-5.000741,-6.666169,-2.563424,2.409495,1.693578,9.892312,-6.330832,-5.510473,2.983083,-2.840516,2.902723,-1.827510,-0.150262,2.493984,-0.499092,-0.655054,7.959354,6.724390,6.870117,9.684056,-4.416243,9.876015,-7.742279,9.952544,-1.819087,5.222546,4.970633], dtype = "float64")#candidate|281|(42,)|const|float64
call_280 = relay.TupleGetItem(func_61_call(relay.reshape(const_281.astype('float64'), [7, 6]), relay.reshape(const_281.astype('float32'), [7, 6]), ), 4)
call_282 = relay.TupleGetItem(func_65_call(relay.reshape(const_281.astype('float64'), [7, 6]), relay.reshape(const_281.astype('float32'), [7, 6]), ), 4)
bop_283 = relay.multiply(uop_256.astype('int8'), bop_274.astype('int8')) # shape=(6, 16)
uop_286 = relay.cos(uop_258.astype('float64')) # shape=(1, 16)
var_289 = relay.var("var_289", dtype = "float64", shape = (14, 16))#candidate|289|(14, 16)|var|float64
bop_290 = relay.bitwise_and(uop_286.astype('int32'), var_289.astype('int32')) # shape=(14, 16)
var_294 = relay.var("var_294", dtype = "int32", shape = (14, 16))#candidate|294|(14, 16)|var|int32
bop_295 = relay.logical_xor(bop_290.astype('int16'), relay.reshape(var_294.astype('int16'), relay.shape_of(bop_290))) # shape=(14, 16)
uop_303 = relay.log(bop_283.astype('float32')) # shape=(6, 16)
uop_307 = relay.sin(bop_274.astype('float64')) # shape=(6, 16)
uop_311 = relay.atan(uop_286.astype('float32')) # shape=(1, 16)
uop_313 = relay.atanh(bop_274.astype('float32')) # shape=(6, 16)
var_315 = relay.var("var_315", dtype = "float32", shape = (9, 16))#candidate|315|(9, 16)|var|float32
bop_316 = relay.bitwise_or(uop_311.astype('int16'), var_315.astype('int16')) # shape=(9, 16)
func_61_call = mod.get_global_var('func_61')
func_65_call = mutated_mod.get_global_var('func_65')
call_319 = relay.TupleGetItem(func_61_call(relay.reshape(call_280.astype('float64'), [7, 6]), relay.reshape(call_280.astype('float32'), [7, 6]), ), 4)
call_320 = relay.TupleGetItem(func_65_call(relay.reshape(call_280.astype('float64'), [7, 6]), relay.reshape(call_280.astype('float32'), [7, 6]), ), 4)
bop_326 = relay.bitwise_or(uop_303.astype('uint64'), bop_252.astype('uint64')) # shape=(6, 16)
uop_335 = relay.sqrt(bop_316.astype('float32')) # shape=(9, 16)
func_244_call = mod.get_global_var('func_244')
func_246_call = mutated_mod.get_global_var('func_246')
var_339 = relay.var("var_339", dtype = "float32", shape = (270,))#candidate|339|(270,)|var|float32
call_338 = relay.TupleGetItem(func_244_call(relay.reshape(var_339.astype('float32'), [10, 3, 9])), 2)
call_340 = relay.TupleGetItem(func_246_call(relay.reshape(var_339.astype('float32'), [10, 3, 9])), 2)
bop_344 = relay.divide(uop_335.astype('float32'), uop_286.astype('float32')) # shape=(9, 16)
output = relay.Tuple([bop_262,uop_265,bop_268,call_280,const_281,bop_295,uop_307,uop_313,call_319,bop_326,call_338,var_339,bop_344,])
output2 = relay.Tuple([bop_262,uop_265,bop_268,call_282,const_281,bop_295,uop_307,uop_313,call_320,bop_326,call_340,var_339,bop_344,])
func_349 = relay.Function([var_273,var_289,var_294,var_315,var_339,], output)
mod['func_349'] = func_349
mod = relay.transform.InferType()(mod)
var_350 = relay.var("var_350", dtype = "float32", shape = (6, 16))#candidate|350|(6, 16)|var|float32
var_351 = relay.var("var_351", dtype = "float64", shape = (14, 16))#candidate|351|(14, 16)|var|float64
var_352 = relay.var("var_352", dtype = "int32", shape = (14, 16))#candidate|352|(14, 16)|var|int32
var_353 = relay.var("var_353", dtype = "float32", shape = (9, 16))#candidate|353|(9, 16)|var|float32
var_354 = relay.var("var_354", dtype = "float32", shape = (270,))#candidate|354|(270,)|var|float32
output = func_349(var_350,var_351,var_352,var_353,var_354,)
func_355 = relay.Function([var_350,var_351,var_352,var_353,var_354,], output)
mutated_mod['func_355'] = func_355
mutated_mod = relay.transform.InferType()(mutated_mod)
const_366 = relay.const([[[1,-4,9,-10,-8,-3,-1,10,10,-8,-1],[-8,-8,1,-5,3,6,4,9,2,-10,-4],[-5,-9,-4,-8,10,6,-7,8,-3,10,10],[7,-8,1,-4,-1,1,6,8,2,1,4],[5,2,6,-7,5,-6,-3,-3,3,-7,-5],[-2,8,9,-2,-9,-8,4,2,10,7,10],[-4,8,6,-2,10,-4,-7,-10,-9,-5,10],[10,-1,9,8,-8,10,-10,1,7,-7,2],[5,3,10,8,-9,4,-1,-8,10,-1,-1],[-9,4,-6,7,7,9,-4,9,-1,-2,-6],[5,2,-9,-8,-6,3,-10,-3,6,-9,-9],[5,8,-6,-10,5,-8,1,-2,8,-5,-9]],[[1,-4,-9,3,7,-8,4,5,-8,-9,7],[-4,10,-8,6,-10,1,-5,8,-10,5,-9],[-2,3,7,6,4,7,-3,-7,-4,5,2],[6,7,-4,-4,5,9,5,2,2,-3,-7],[3,3,-2,1,-8,1,-2,2,-8,-3,-5],[-5,-2,-10,-3,1,-3,-3,5,-1,10,-10],[9,-10,7,5,2,8,6,-8,4,-7,4],[-6,-6,1,10,-10,-3,9,-4,3,-6,-1],[-8,-3,8,3,-10,10,5,1,5,8,4],[2,-2,5,6,10,6,-8,1,-6,-10,6],[10,-5,-1,-4,10,4,-1,-10,6,2,-1],[-6,-4,5,9,-1,1,5,-9,-8,5,1]],[[-10,4,10,7,10,6,-6,-8,-4,-5,5],[8,8,-2,-7,-10,1,2,2,5,-3,-6],[1,5,4,-4,-7,-4,-10,8,7,-4,-2],[2,-10,-5,-7,3,6,-5,5,1,2,8],[10,-9,6,9,-4,3,7,8,-3,-4,-6],[-9,-10,4,6,6,-10,4,10,5,4,7],[-7,9,-5,-9,4,3,-8,8,1,-9,8],[-6,-7,-2,8,-6,6,7,8,4,3,6],[4,-7,-7,-7,-10,-3,3,-9,7,-8,-1],[-6,-2,-3,-8,8,4,-9,2,3,-9,10],[-4,-3,-8,-7,9,-10,-4,5,3,-5,9],[-7,10,-4,8,10,-6,-4,5,3,-5,-4]],[[7,10,-1,8,-9,-2,7,-7,-9,-9,-10],[-7,-4,-9,-5,-7,-2,-2,-2,-4,5,9],[1,7,10,5,8,-5,4,1,-8,-2,5],[-5,6,5,5,-3,9,6,-7,9,5,-10],[-1,10,9,-2,-10,1,-6,7,-2,8,2],[1,7,7,-4,-2,-9,-6,6,3,5,-2],[-2,-4,9,4,-6,-1,4,4,6,-5,-8],[-3,9,2,2,4,-1,8,10,3,8,-8],[3,-2,-10,6,-8,-6,-7,-10,10,-4,-10],[-3,6,-6,-2,-7,-10,4,8,10,8,-2],[4,-5,5,9,4,6,10,4,-10,-6,2],[2,9,5,-10,6,8,-10,3,-8,1,-6]],[[-8,10,-5,-8,-6,6,-2,7,-9,-6,4],[-10,5,-1,4,7,10,-9,6,4,10,9],[3,4,9,-1,-7,-8,-10,9,10,5,-3],[-7,-4,1,10,-5,-8,-7,10,7,-10,10],[-6,4,-6,8,-5,-10,-3,-2,3,-6,-10],[-7,2,10,1,-1,-10,4,4,-7,4,-8],[8,-10,1,3,10,2,6,-3,1,-5,-7],[-8,1,-9,-1,-2,1,2,-9,-3,-7,-2],[-6,-1,6,-9,2,-3,-1,8,1,10,3],[4,-1,2,2,2,-6,5,6,5,9,3],[-2,1,10,-5,-7,6,8,5,-1,-7,7],[-10,-6,-3,5,-7,6,10,1,-2,6,6]],[[5,3,-8,4,2,10,-9,7,10,10,-1],[-5,-6,1,-2,-6,-8,-4,7,2,4,-1],[9,-6,9,-7,4,3,7,-2,10,-8,4],[3,-2,5,10,-8,4,-8,-9,5,4,-5],[-1,2,4,-8,-3,-2,-9,-2,2,8,3],[-9,10,8,-2,-5,-10,6,6,-2,6,-6],[2,-4,8,-2,-7,-5,-5,-10,-6,1,3],[-9,3,10,7,6,5,-6,3,8,-9,6],[-8,2,-3,-9,2,5,-9,-7,-2,6,3],[2,9,6,5,-3,-10,4,-2,2,-10,1],[4,6,3,5,5,3,-9,4,-3,-4,4],[8,2,-9,-7,-4,10,-8,3,10,1,1]],[[-2,-4,2,10,6,9,2,-2,2,-1,-5],[7,10,-7,-1,-3,-3,-10,4,8,-1,-8],[9,-9,8,-5,-9,-3,10,-4,-8,3,-3],[-4,-2,7,-3,4,6,3,5,7,10,5],[-9,10,5,9,-4,-4,-7,-10,7,2,-9],[-7,5,-8,-5,-5,-1,4,-6,-3,5,-9],[-10,5,-2,1,4,-6,4,-5,7,7,-5],[-4,-3,-5,6,-3,2,-4,-6,6,4,10],[3,9,5,10,7,3,2,-10,-2,5,-2],[-8,3,-10,-3,-3,8,-8,9,5,3,8],[5,-4,-1,-1,-5,9,1,4,-10,2,-10],[10,-10,7,-4,1,-1,8,-3,2,8,-7]],[[-1,-4,-8,10,9,-9,-7,-4,-9,10,-9],[1,7,-1,5,5,7,-8,8,-4,9,7],[8,-5,-8,9,1,-9,-1,5,-6,-3,-2],[1,10,8,-7,-5,6,-3,5,2,-2,-6],[1,1,4,4,7,-5,-9,8,7,4,-3],[10,9,-4,2,3,3,-5,-8,-2,-4,-3],[1,-10,7,2,1,8,5,-2,-3,-2,-9],[-1,6,3,2,3,-9,2,9,6,7,1],[-5,8,-7,2,7,-4,-9,-5,5,4,2],[-10,9,2,-9,7,5,-9,6,-8,-7,8],[-9,8,-2,8,10,7,-5,7,-2,-7,10],[7,9,8,8,-1,10,1,-6,8,-10,-7]]], dtype = "int8")#candidate|366|(8, 12, 11)|const|int8
var_367 = relay.var("var_367", dtype = "int8", shape = (8, 12, 11))#candidate|367|(8, 12, 11)|var|int8
bop_368 = relay.bitwise_and(const_366.astype('int8'), relay.reshape(var_367.astype('int8'), relay.shape_of(const_366))) # shape=(8, 12, 11)
uop_385 = relay.atan(bop_368.astype('float64')) # shape=(8, 12, 11)
uop_387 = relay.rsqrt(const_366.astype('float64')) # shape=(8, 12, 11)
func_244_call = mod.get_global_var('func_244')
func_246_call = mutated_mod.get_global_var('func_246')
const_392 = relay.const([3.475774,-2.111090,-6.364977,0.776108,-7.620505,-7.253549,-1.715839,-7.528713,-8.845935,4.413923,-8.657910,-5.485886,-1.102124,-6.511291,-3.454705,-2.969312,6.906010,-9.533923,2.937383,-0.287007,-4.149817,-9.891671,2.982735,-1.751526,-5.907810,-7.637345,0.651349,-5.690494,9.924478,2.358363,8.689073,0.188301,-0.288793,6.353956,6.425333,-2.895683,-8.791426,6.812325,1.486160,0.309803,2.197719,-5.246313,-8.697286,-9.154607,-8.599300,-0.081991,5.068909,-8.959394,8.467993,9.157099,4.603884,-6.978559,8.001256,4.897213,8.280996,-4.741720,4.137811,5.031930,-4.129130,1.029039,-1.933327,-3.131275,0.948195,5.031281,-4.006261,-2.467251,-8.430354,-0.768897,-8.586482,-6.776717,-1.782166,-1.911469,-8.998408,-2.018872,2.445686,4.566541,7.626501,-7.271849,-9.052827,8.727949,-3.488810,-4.461941,9.981190,-4.803293,-4.032267,3.426760,-9.011060,-6.901194,-6.620786,0.162818,-5.677399,3.743136,-9.042034,5.632861,2.937901,-9.853219,-8.027801,2.161524,4.385378,5.271291,-9.387745,-5.125660,-7.397753,4.287819,4.251605,-8.317670,5.957493,8.875212,3.050156,-1.695231,-9.802775,7.136112,4.839452,-1.271706,-0.485144,2.397558,-3.021652,0.862216,-8.471056,0.436928,9.583790,-1.126632,1.630647,9.789753,-6.035712,-6.736484,-2.669975,3.233248,-1.182944,-0.068306,7.421272,9.525092,3.485409,-7.903664,-1.226970,-9.066957,1.180635,-6.782525,-7.000627,-5.318567,-1.995161,9.114770,-5.133612,-6.373010,-0.679912,9.998107,-4.610267,-8.401495,-1.011232,-5.137689,-8.496030,-5.550161,0.952975,9.765009,-5.834597,-3.159598,-4.815662,9.344955,-6.662106,5.714360,-4.356243,-0.422959,1.509534,7.215010,0.671842,-9.293576,-0.816205,2.344544,-5.520357,7.124073,-0.925248,3.146243,-8.094006,9.599489,-1.387315,8.238857,-9.440122,-0.230216,-4.953369,0.574880,5.138134,-4.103249,-8.127897,4.887505,-3.432002,-3.859229,-0.971195,9.057961,-7.115706,5.625650,0.970960,-6.804039,-2.532767,1.620668,-1.545832,-9.054729,1.153517,7.263642,-0.695487,-5.475313,4.223642,-6.862133,-3.061354,-4.734281,-8.437070,2.201878,1.268009,9.770395,-8.147505,-5.530680,9.556435,-8.572416,5.033567,6.952403,-8.088245,-4.999037,-2.306744,0.505114,-9.228612,9.357114,1.572115,-7.385116,-1.894680,-5.990935,4.024873,2.674064,8.861308,3.119030,9.095848,0.306794,-5.208650,-7.965888,-6.058969,0.914186,6.178764,2.482914,3.670938,5.046769,-3.531492,3.768897,6.841088,-1.972127,-9.923727,6.701290,-3.092394,-1.352701,9.739659,7.971106,-2.076584,-1.885819,-4.142166,3.931464,-6.546192,6.427330,-4.208771,-2.138923,-8.496154,3.736781,-4.556298,-8.345209,9.076955,8.259117,1.213592,-5.588949,6.852163,-6.360262,-1.251292,1.827790,-6.132337,3.593286], dtype = "float32")#candidate|392|(270,)|const|float32
call_391 = relay.TupleGetItem(func_244_call(relay.reshape(const_392.astype('float32'), [10, 3, 9])), 2)
call_393 = relay.TupleGetItem(func_246_call(relay.reshape(const_392.astype('float32'), [10, 3, 9])), 2)
bop_394 = relay.bitwise_or(uop_385.astype('uint16'), relay.reshape(uop_387.astype('uint16'), relay.shape_of(uop_385))) # shape=(8, 12, 11)
bop_398 = relay.logical_or(uop_385.astype('bool'), relay.reshape(bop_394.astype('bool'), relay.shape_of(uop_385))) # shape=(8, 12, 11)
func_244_call = mod.get_global_var('func_244')
func_246_call = mutated_mod.get_global_var('func_246')
call_405 = relay.TupleGetItem(func_244_call(relay.reshape(call_391.astype('float32'), [10, 3, 9])), 2)
call_406 = relay.TupleGetItem(func_246_call(relay.reshape(call_391.astype('float32'), [10, 3, 9])), 2)
uop_407 = relay.cosh(uop_387.astype('float64')) # shape=(8, 12, 11)
bop_411 = relay.greater(uop_407.astype('bool'), relay.reshape(uop_385.astype('bool'), relay.shape_of(uop_407))) # shape=(8, 12, 11)
const_421 = relay.const([[[-10,6,-9,-4,-5,-3,9,-4,7,-5,4],[7,-1,9,10,-5,-8,4,-6,-4,-3,1],[-4,-2,6,-3,-7,8,9,7,1,10,2],[9,-2,-8,9,6,-6,-4,8,-5,-10,-2],[-2,10,8,5,6,8,8,-3,-7,2,-9],[-6,-6,1,-5,6,-1,-3,8,1,-3,-2],[-4,7,3,-5,-6,1,-1,9,-3,-5,3],[5,5,7,-2,-6,3,-10,-3,-3,5,10],[-4,3,-3,-2,-6,10,-3,-7,8,-3,-7],[9,7,8,6,1,-8,-7,-5,-9,-8,-2],[8,5,-3,6,1,-3,-1,-4,10,7,2],[-10,5,-7,8,3,7,3,8,3,7,10]],[[6,5,9,-5,-5,7,-2,-4,-4,-10,7],[-2,-3,4,2,7,10,-3,3,-2,-10,-10],[-3,-7,-3,7,-8,-5,-7,-2,5,-4,-3],[-3,-6,-7,-4,-1,5,-6,-4,-8,-6,-5],[2,-10,7,1,5,-8,-1,-7,6,-3,-7],[7,4,6,-10,2,8,-10,-8,-7,-5,3],[-2,10,-8,8,4,7,-3,-9,-3,5,-5],[-10,-6,-7,4,8,10,-5,-4,6,-10,-7],[7,6,-1,3,7,-10,-10,5,-8,-1,2],[-1,-9,-4,9,2,1,7,-10,-7,-6,10],[-7,2,-8,6,-7,6,-5,4,4,-1,5],[-7,10,2,3,4,6,5,-8,-6,1,2]],[[-6,9,4,5,8,2,7,4,5,10,-3],[-7,-10,-8,7,-5,6,-3,4,8,1,9],[-4,-8,2,-10,2,8,2,-3,5,2,-1],[-2,4,-6,9,-4,10,-4,9,1,-3,5],[4,4,3,-1,-2,9,2,-2,-3,-6,8],[9,-7,-1,9,6,2,-5,6,1,-8,4],[10,-2,2,-7,-9,-8,-7,7,-4,1,2],[3,3,-6,8,2,-7,10,2,10,6,-10],[-6,8,9,-6,-7,-9,-4,-3,6,-2,-10],[2,10,5,-9,-8,1,7,-7,-1,3,-7],[6,1,5,-4,-4,7,8,1,-7,4,-6],[8,-3,10,-10,3,10,7,-7,-10,-9,6]],[[-1,7,-7,5,-4,-7,-5,-3,5,-10,-1],[-10,-2,-1,9,8,-6,7,-6,5,7,-6],[-10,-7,8,1,8,10,-4,-9,-8,-1,2],[6,-10,7,-4,10,-2,8,-6,-1,-10,2],[-10,7,10,10,7,7,8,7,-6,7,-3],[10,-4,6,2,10,-1,-9,6,-10,-7,10],[-2,1,-1,-6,1,-8,8,3,-1,9,-7],[-2,8,-5,10,4,2,10,2,-10,5,-10],[-9,1,5,2,8,6,-6,5,-6,-10,2],[2,7,9,-9,4,-1,9,-5,-9,-3,-3],[5,6,4,-8,7,10,-1,5,9,9,4],[-7,9,4,-10,2,2,5,-6,-4,-2,-9]],[[5,-2,-5,4,8,-8,7,8,10,3,10],[10,10,10,-8,4,3,8,8,7,5,-3],[-9,10,-3,-1,-10,10,5,-1,-7,10,2],[7,-2,-5,10,-9,-1,8,3,-8,2,-2],[-7,4,9,-5,-2,8,7,-10,5,5,2],[9,-7,-10,-4,8,5,-5,-5,-5,3,10],[-9,6,-2,10,-6,-1,8,2,4,-5,-1],[5,-3,1,-4,-5,-1,-8,1,9,7,-10],[1,-8,9,4,-6,-4,-9,-4,-7,-7,9],[5,1,7,4,-4,-9,-8,10,8,2,4],[10,4,8,-8,-5,8,5,-6,5,3,-4],[2,-6,-9,-6,-10,4,4,3,10,-2,-6]],[[8,-7,-1,6,-5,1,-3,-10,5,5,-1],[-1,8,-4,2,9,-1,-2,1,10,-8,-5],[-1,-2,-4,8,-4,2,2,4,6,-5,-4],[-9,-5,-8,10,-8,10,-1,-4,10,8,2],[7,-6,-3,-10,-8,-1,10,9,-5,-4,4],[-9,-4,6,8,4,8,-8,10,8,-9,-2],[8,-10,8,-8,-9,9,-6,5,-7,-1,10],[-3,-7,10,-10,4,6,1,-10,-4,-5,-2],[2,-7,8,-1,5,-9,-9,-8,-3,-6,-10],[3,-5,-9,-2,1,8,-2,-4,-3,10,-3],[2,7,8,6,-8,8,-8,4,-5,3,-5],[-10,-9,-7,-8,8,-2,7,6,-7,-4,10]],[[9,-1,2,-10,10,-3,-6,10,3,-5,-10],[-6,-8,3,-8,-4,-8,3,-3,-7,6,4],[2,-7,-1,-1,-5,-7,10,6,4,6,9],[4,-4,-4,10,-4,3,9,-4,-3,9,-3],[-2,8,-1,8,4,1,-2,10,-7,6,8],[2,-8,-2,-6,8,5,2,10,7,3,-4],[7,6,-2,1,-10,1,-9,6,9,-3,-8],[2,8,-4,1,3,5,1,-4,5,-7,-1],[-9,-4,-1,-3,-6,8,6,5,1,-3,-9],[-2,-9,6,-3,-4,6,-1,9,-7,-6,-8],[-9,10,-1,4,9,3,-5,6,8,10,-10],[-2,-4,-3,-5,5,-4,-2,9,-6,-6,-6]],[[10,8,-2,3,-1,10,-5,6,-3,-4,5],[3,5,-2,-8,1,10,5,10,-3,-4,-6],[5,-1,-4,-9,-2,-5,-4,8,-5,10,-10],[7,-5,-1,-3,-2,-1,-1,7,-6,-2,7],[-7,-8,6,8,-2,-6,-7,-8,5,1,2],[-3,-9,1,1,9,-5,-2,4,-4,7,5],[-6,4,-4,9,4,6,-10,-7,5,1,-3],[-8,3,5,-4,3,5,5,-10,-5,4,-10],[-8,-7,2,-2,9,4,-6,3,1,-3,-3],[6,-1,-10,4,-1,-6,9,6,-7,-3,-8],[-1,-10,7,9,-2,-3,-9,7,-2,8,-9],[-8,-8,2,7,2,-1,8,-8,7,-3,-2]]], dtype = "uint16")#candidate|421|(8, 12, 11)|const|uint16
bop_422 = relay.minimum(bop_394.astype('float64'), relay.reshape(const_421.astype('float64'), relay.shape_of(bop_394))) # shape=(8, 12, 11)
bop_427 = relay.subtract(uop_387.astype('int16'), relay.reshape(bop_398.astype('int16'), relay.shape_of(uop_387))) # shape=(8, 12, 11)
uop_432 = relay.sin(uop_407.astype('float32')) # shape=(8, 12, 11)
func_244_call = mod.get_global_var('func_244')
func_246_call = mutated_mod.get_global_var('func_246')
call_434 = relay.TupleGetItem(func_244_call(relay.reshape(const_392.astype('float32'), [10, 3, 9])), 1)
call_435 = relay.TupleGetItem(func_246_call(relay.reshape(const_392.astype('float32'), [10, 3, 9])), 1)
bop_440 = relay.right_shift(bop_411.astype('int32'), relay.reshape(uop_385.astype('int32'), relay.shape_of(bop_411))) # shape=(8, 12, 11)
uop_443 = relay.exp(bop_440.astype('float32')) # shape=(8, 12, 11)
bop_449 = relay.less_equal(uop_432.astype('bool'), relay.reshape(bop_368.astype('bool'), relay.shape_of(uop_432))) # shape=(8, 12, 11)
bop_452 = relay.equal(uop_432.astype('bool'), relay.reshape(bop_449.astype('bool'), relay.shape_of(uop_432))) # shape=(8, 12, 11)
uop_457 = relay.cos(uop_387.astype('float64')) # shape=(8, 12, 11)
uop_460 = relay.log(uop_443.astype('float64')) # shape=(8, 12, 11)
func_244_call = mod.get_global_var('func_244')
func_246_call = mutated_mod.get_global_var('func_246')
call_465 = relay.TupleGetItem(func_244_call(relay.reshape(call_405.astype('float32'), [10, 3, 9])), 3)
call_466 = relay.TupleGetItem(func_246_call(relay.reshape(call_405.astype('float32'), [10, 3, 9])), 3)
bop_467 = relay.power(uop_460.astype('float32'), relay.reshape(const_366.astype('float32'), relay.shape_of(uop_460))) # shape=(8, 12, 11)
func_349_call = mod.get_global_var('func_349')
func_355_call = mutated_mod.get_global_var('func_355')
var_478 = relay.var("var_478", dtype = "float32", shape = (96,))#candidate|478|(96,)|var|float32
const_479 = relay.const([-2.413510,8.411351,-3.963200,2.378199,6.628708,-3.702464,-6.867940,1.954280,9.351572,5.247338,-9.668827,-5.805743,0.285604,6.831354,2.526311,-4.207242,-4.732782,-7.073096,3.314551,3.660213,-9.632698,-4.118036,-5.976471,4.405945,-8.578047,5.461677,-9.994816,-0.083523,-9.245981,0.811891,-7.628692,6.976505,8.753694,7.018755,6.082601,7.522973,-5.083274,2.095141,-1.480048,-2.286687,0.375706,9.112040,-4.189615,6.951116,-2.291640,-5.474739,-3.497234,0.223425,-6.512194,2.702708,4.645764,7.535985,-3.186774,-9.608182,6.894920,-8.075333,-7.605577,-7.771482,3.176505,-8.750516,-6.515586,-5.064384,-1.832668,7.545884,-1.545005,6.371504,4.749907,6.423709,7.596622,-7.708868,-3.657231,5.490173,3.866037,6.610725,1.776958,-0.352500,3.169189,-3.063233,-3.573966,-2.382869,-8.359605,3.733256,-5.150749,-3.346247,-4.236328,-3.644364,9.647960,-7.243448,2.319481,5.775806,7.435260,8.154836,-2.527152,-4.883289,1.684829,3.279622,-0.664835,5.186082,5.193209,-1.932672,5.715443,-9.922565,-0.797253,4.570715,6.624733,-3.516963,-0.147627,8.830712,-8.558549,2.127644,-5.510523,3.960825,6.805376,4.641000,-0.279935,3.239598,-5.572830,-7.304821,-4.834750,-2.291452,-6.523259,-1.099185,-2.089363,8.976827,4.681396,-2.316165,0.887031,4.807905,5.523261,9.974299,-0.025051,6.231047,5.773479,-8.761787,5.523951,3.031144,8.837278,-9.615215,0.049996,-6.334549,-3.844768,-6.387631,9.624117,1.085027,-3.741858,-4.862012,3.183556,7.775193,-8.169748,-8.576035,-5.974990,0.426111,3.950731,-7.397138,-2.743084,5.784004,4.617459,-5.156979,4.654145,7.826670,6.855596,5.724825,8.486822,7.306322,-7.787993,5.922644,3.315175,-9.371868,-8.111459,0.551602,-1.298914,-8.915811,-3.362398,-6.936211,-6.485031,3.998365,8.039628,-7.165004,7.933893,-4.031407,4.756215,-5.060559,2.380395,5.099714,1.154925,-6.746270,8.637228,-5.886756,7.687358,-9.444021,-5.346441,5.439078,-4.432114,7.705334,7.406294,5.469279,3.445687,5.000870,-9.226792,4.116961,9.219343,6.096379,-1.333422,-3.847675,-2.216305,9.743562,-4.966942,0.968287,-8.073667,-6.002781,-8.370596,-1.710905,-9.796336,-5.589614,-0.129689,-5.370915,7.429995,-5.407439,3.259671,-9.758483,3.680697,1.106925,-0.393018,-6.879094], dtype = "float64")#candidate|479|(224,)|const|float64
const_480 = relay.const([[1.579522,-8.694543,9.694009,-6.770027,-6.573351,-9.660408,8.888774,-7.137534,-2.322839,3.086616,-1.818198,6.283470,-3.943862,7.524798,-3.683559,7.370957,4.950881,9.978082,4.822537,6.202833,2.614973,5.281111,-4.232754,2.722471,4.815486,-2.569983,0.804977,6.284218,-8.615136,-8.958221,-6.110456,-6.493589,3.339961,-8.628397,0.699900,8.842858,-0.633493,-9.770560,-0.009096,7.137979,-9.771033,3.449387,-0.273888,2.273112,0.476120,5.534302,-2.460297,0.811104,-9.987199,-2.686307,-2.599060,-2.947595,-7.077335,3.343463,-0.330303,7.228035,-5.104722,-2.329538,6.921465,9.195715,-2.406364,-1.074253,4.116669,-4.539093,-6.225457,8.761848,-6.807464,7.931013,-2.243528,7.997007,1.679835,0.086695,5.723643,-8.651911,-6.654888,-8.312153,0.856058,4.870936,-4.074465,-6.483360,-6.824391,4.266116,2.138809,3.486046,-8.159237,-7.514606,7.816422,6.380410,-2.468639,-1.903547,-9.944514,0.318422,2.946559,-6.267039,-3.074190,-9.509662,-0.712157,-5.353312,-4.704700,-8.028175,-1.796986,3.046278,-6.050918,1.334645,-3.689953,1.658832,-9.865275,-0.336539,2.470354,6.293940,7.403697,-9.865562,-3.055024,3.220423,8.895456,2.265479,2.023099,9.516069,3.436721,-8.954906,-7.675982,-2.318532,-7.726245,2.856716,4.321454,6.279787,-4.085389,7.706842,-0.572137,-6.681806,-8.460090,-5.476200,-4.649402,2.863329,-3.363535,5.876018,-8.296433,1.701487,7.108679,-7.647510,6.898229,9.403859,-4.974102,-8.394498]], dtype = "float32")#candidate|480|(1, 144)|const|float32
call_477 = relay.TupleGetItem(func_349_call(relay.reshape(var_478.astype('float32'), [6, 16]), relay.reshape(const_479.astype('float64'), [14, 16]), relay.reshape(const_479.astype('int32'), [14, 16]), relay.reshape(const_480.astype('float32'), [9, 16]), relay.reshape(call_434.astype('float32'), [270,]), ), 12)
call_481 = relay.TupleGetItem(func_355_call(relay.reshape(var_478.astype('float32'), [6, 16]), relay.reshape(const_479.astype('float64'), [14, 16]), relay.reshape(const_479.astype('int32'), [14, 16]), relay.reshape(const_480.astype('float32'), [9, 16]), relay.reshape(call_434.astype('float32'), [270,]), ), 12)
uop_482 = relay.acosh(bop_452.astype('float32')) # shape=(8, 12, 11)
output = relay.Tuple([call_391,const_392,call_405,bop_422,bop_427,call_434,uop_457,call_465,bop_467,call_477,var_478,const_479,const_480,uop_482,])
output2 = relay.Tuple([call_393,const_392,call_406,bop_422,bop_427,call_435,uop_457,call_466,bop_467,call_481,var_478,const_479,const_480,uop_482,])
func_485 = relay.Function([var_367,var_478,], output)
mod['func_485'] = func_485
mod = relay.transform.InferType()(mod)
mutated_mod['func_485'] = func_485
mutated_mod = relay.transform.InferType()(mutated_mod)
func_485_call = mutated_mod.get_global_var('func_485')
var_487 = relay.var("var_487", dtype = "int8", shape = (8, 12, 11))#candidate|487|(8, 12, 11)|var|int8
var_488 = relay.var("var_488", dtype = "float32", shape = (96,))#candidate|488|(96,)|var|float32
call_486 = func_485_call(var_487,var_488,)
output = call_486
func_489 = relay.Function([var_487,var_488,], output)
mutated_mod['func_489'] = func_489
mutated_mod = relay.transform.InferType()(mutated_mod)
var_518 = relay.var("var_518", dtype = "float32", shape = (2, 6, 7))#candidate|518|(2, 6, 7)|var|float32
uop_519 = relay.acos(var_518.astype('float32')) # shape=(2, 6, 7)
output = uop_519
output2 = uop_519
func_522 = relay.Function([var_518,], output)
mod['func_522'] = func_522
mod = relay.transform.InferType()(mod)
mutated_mod['func_522'] = func_522
mutated_mod = relay.transform.InferType()(mutated_mod)
var_523 = relay.var("var_523", dtype = "float32", shape = (2, 6, 7))#candidate|523|(2, 6, 7)|var|float32
func_522_call = mutated_mod.get_global_var('func_522')
call_524 = func_522_call(var_523)
output = call_524
func_525 = relay.Function([var_523], output)
mutated_mod['func_525'] = func_525
mutated_mod = relay.transform.InferType()(mutated_mod)
var_619 = relay.var("var_619", dtype = "int32", shape = (13, 7))#candidate|619|(13, 7)|var|int32
var_620 = relay.var("var_620", dtype = "int32", shape = (13, 7))#candidate|620|(13, 7)|var|int32
bop_621 = relay.bitwise_xor(var_619.astype('int32'), relay.reshape(var_620.astype('int32'), relay.shape_of(var_619))) # shape=(13, 7)
bop_626 = relay.floor_divide(bop_621.astype('float64'), relay.reshape(var_619.astype('float64'), relay.shape_of(bop_621))) # shape=(13, 7)
bop_630 = relay.logical_xor(bop_621.astype('int32'), relay.reshape(bop_626.astype('int32'), relay.shape_of(bop_621))) # shape=(13, 7)
uop_633 = relay.asin(bop_626.astype('float32')) # shape=(13, 7)
func_349_call = mod.get_global_var('func_349')
func_355_call = mutated_mod.get_global_var('func_355')
const_636 = relay.const([[6.701313,-8.636004,7.588238,-0.110791,9.442694,-4.334802,-9.973041,-6.141251,1.693115,-8.668828,8.664338,7.199911,-9.413013,-4.202357,-8.557658,7.914542,4.282258,8.017726,8.460860,-6.581704,9.237261,-7.567524,0.554103,3.431731,-2.632923,6.655397,8.302677,6.984980,8.529058,0.053682,2.089926,2.948245,-5.554727,4.337688,-9.548761,4.364709,-1.556990,5.418000,-2.282492,-4.853071,2.749625,2.854740,-2.003172,-0.901144,-8.194882,-7.973244,-7.285090,-7.634994,-0.860639,-0.475464,-3.582966,-5.870469,6.616614,-2.846273,0.494990,0.738055,-4.406500,9.393499,3.882984,-4.947524,3.699450,9.638111,9.230750,5.886323,9.514883,-2.896744,1.417838,-9.115223,7.327227,-7.882806,-3.373497,0.263946,-9.515296,9.836824,-7.441920,6.912984,-3.521057,-1.978859,8.765714,-2.754997,8.631922,-8.681942,7.859029,-0.183274,4.017911,0.613889,-8.060327,0.289423,-5.633057,-2.749848,-7.117648,-5.814452,5.089526,-2.258745,-1.919065,7.614483]], dtype = "float32")#candidate|636|(1, 96)|const|float32
var_637 = relay.var("var_637", dtype = "float64", shape = (112, 2))#candidate|637|(112, 2)|var|float64
var_638 = relay.var("var_638", dtype = "float32", shape = (144,))#candidate|638|(144,)|var|float32
var_639 = relay.var("var_639", dtype = "float32", shape = (270,))#candidate|639|(270,)|var|float32
call_635 = relay.TupleGetItem(func_349_call(relay.reshape(const_636.astype('float32'), [6, 16]), relay.reshape(var_637.astype('float64'), [14, 16]), relay.reshape(var_637.astype('int32'), [14, 16]), relay.reshape(var_638.astype('float32'), [9, 16]), relay.reshape(var_639.astype('float32'), [270,]), ), 0)
call_640 = relay.TupleGetItem(func_355_call(relay.reshape(const_636.astype('float32'), [6, 16]), relay.reshape(var_637.astype('float64'), [14, 16]), relay.reshape(var_637.astype('int32'), [14, 16]), relay.reshape(var_638.astype('float32'), [9, 16]), relay.reshape(var_639.astype('float32'), [270,]), ), 0)
uop_645 = relay.log(uop_633.astype('float32')) # shape=(13, 7)
uop_649 = relay.asinh(uop_645.astype('float64')) # shape=(13, 7)
bop_652 = relay.logical_or(uop_649.astype('bool'), relay.reshape(bop_626.astype('bool'), relay.shape_of(uop_649))) # shape=(13, 7)
bop_656 = relay.multiply(bop_652.astype('int64'), relay.reshape(uop_645.astype('int64'), relay.shape_of(bop_652))) # shape=(13, 7)
func_522_call = mod.get_global_var('func_522')
func_525_call = mutated_mod.get_global_var('func_525')
const_663 = relay.const([-5.786480,-1.453610,1.824122,0.614562,-8.382772,-1.203464,9.622529,-7.004595,0.193629,-8.130493,-3.534213,7.860397,6.614830,2.712193,8.192173,-1.137209,8.512277,-3.015439,-0.418283,-8.333544,-7.767258,-9.263417,-2.874194,-0.515232,1.295588,6.808586,-0.548540,9.472841,-4.008442,-1.127730,-7.929415,2.895694,3.552384,-8.587082,-4.813998,-1.657485,9.880165,-0.876419,5.985674,-2.102368,4.792550,-2.070294,-7.438749,8.830474,-7.005812,-2.224059,-2.773699,4.459142,-8.859254,-1.687594,-1.118287,6.132698,2.912174,2.504055,-5.738312,6.398774,-1.133205,5.450853,-3.025483,6.317710,-0.214571,2.740383,-5.287723,-9.985917,-4.197635,6.569671,2.914478,-6.333730,-9.973555,-2.658015,4.575333,9.005597,1.439645,9.436779,9.128608,7.359510,-4.073155,8.795952,4.522607,5.972533,-1.279765,-3.247106,-8.412803,-1.155130], dtype = "float32")#candidate|663|(84,)|const|float32
call_662 = func_522_call(relay.reshape(const_663.astype('float32'), [2, 6, 7]))
call_664 = func_522_call(relay.reshape(const_663.astype('float32'), [2, 6, 7]))
bop_665 = relay.mod(bop_656.astype('float64'), relay.reshape(uop_649.astype('float64'), relay.shape_of(bop_656))) # shape=(13, 7)
func_244_call = mod.get_global_var('func_244')
func_246_call = mutated_mod.get_global_var('func_246')
call_668 = relay.TupleGetItem(func_244_call(relay.reshape(var_639.astype('float32'), [10, 3, 9])), 2)
call_669 = relay.TupleGetItem(func_246_call(relay.reshape(var_639.astype('float32'), [10, 3, 9])), 2)
output = relay.Tuple([bop_630,call_635,const_636,var_637,var_638,var_639,call_662,const_663,bop_665,call_668,])
output2 = relay.Tuple([bop_630,call_640,const_636,var_637,var_638,var_639,call_664,const_663,bop_665,call_669,])
func_671 = relay.Function([var_619,var_620,var_637,var_638,var_639,], output)
mod['func_671'] = func_671
mod = relay.transform.InferType()(mod)
mutated_mod['func_671'] = func_671
mutated_mod = relay.transform.InferType()(mutated_mod)
func_671_call = mutated_mod.get_global_var('func_671')
var_673 = relay.var("var_673", dtype = "int32", shape = (13, 7))#candidate|673|(13, 7)|var|int32
var_674 = relay.var("var_674", dtype = "int32", shape = (13, 7))#candidate|674|(13, 7)|var|int32
var_675 = relay.var("var_675", dtype = "float64", shape = (112, 2))#candidate|675|(112, 2)|var|float64
var_676 = relay.var("var_676", dtype = "float32", shape = (144,))#candidate|676|(144,)|var|float32
var_677 = relay.var("var_677", dtype = "float32", shape = (270,))#candidate|677|(270,)|var|float32
call_672 = func_671_call(var_673,var_674,var_675,var_676,var_677,)
output = call_672
func_678 = relay.Function([var_673,var_674,var_675,var_676,var_677,], output)
mutated_mod['func_678'] = func_678
mutated_mod = relay.transform.InferType()(mutated_mod)
var_735 = relay.var("var_735", dtype = "int8", shape = ())#candidate|735|()|var|int8
var_736 = relay.var("var_736", dtype = "int8", shape = (13, 4))#candidate|736|(13, 4)|var|int8
bop_737 = relay.greater(var_735.astype('bool'), var_736.astype('bool')) # shape=(13, 4)
output = bop_737
output2 = bop_737
func_742 = relay.Function([var_735,var_736,], output)
mod['func_742'] = func_742
mod = relay.transform.InferType()(mod)
var_743 = relay.var("var_743", dtype = "int8", shape = ())#candidate|743|()|var|int8
var_744 = relay.var("var_744", dtype = "int8", shape = (13, 4))#candidate|744|(13, 4)|var|int8
output = func_742(var_743,var_744,)
func_745 = relay.Function([var_743,var_744,], output)
mutated_mod['func_745'] = func_745
mutated_mod = relay.transform.InferType()(mutated_mod)
var_763 = relay.var("var_763", dtype = "uint8", shape = (7,))#candidate|763|(7,)|var|uint8
var_764 = relay.var("var_764", dtype = "uint8", shape = (7,))#candidate|764|(7,)|var|uint8
bop_765 = relay.equal(var_763.astype('bool'), relay.reshape(var_764.astype('bool'), relay.shape_of(var_763))) # shape=(7,)
func_671_call = mod.get_global_var('func_671')
func_678_call = mutated_mod.get_global_var('func_678')
const_780 = relay.const([[-2,4,7,-5,-8,6,-2,1,-8,9,4,-4,2,2,7,7,-8,-3,9,-10,3,-8,-6,2,3,-3,-3,-10,3,8,-9,-1,6,-1,-4,-3,6,3,4,7,-9,2,1,6,1,6,-7,-8,3,-1,10,-3,7,2,3,7,-2,-1,-1,9,-9,6,3,2,-3,2,-6,4,3,7,5,-8,-4,-4,-6,-1,-7,4,10,8,10,9,-7,1,8,7,-1,4,4,2,-8]], dtype = "int32")#candidate|780|(1, 91)|const|int32
var_781 = relay.var("var_781", dtype = "float64", shape = (224,))#candidate|781|(224,)|var|float64
const_782 = relay.const([2.678182,6.391591,-8.984445,1.928292,-4.751575,-8.163145,7.784386,-4.705251,-8.301670,-8.288592,7.013629,-6.224676,3.861890,9.354158,4.750110,6.318114,-3.065708,-8.437169,2.502309,-7.759017,5.923241,6.979547,5.368167,3.128938,5.402786,3.005348,-7.559321,-8.723681,0.242019,-7.293497,-6.420361,2.216119,-9.776699,7.400832,5.376786,5.242326,2.217976,9.195555,5.945204,-7.088691,-1.688722,9.847966,-3.743807,6.617727,5.650098,-8.869310,5.183572,-2.676740,4.303615,9.915341,3.638683,-4.829686,-3.764185,-6.710058,-6.353736,-8.685026,-0.170362,-4.632163,7.478566,-6.355193,0.030934,6.871418,8.651468,4.040940,6.881994,5.740231,9.262492,6.221375,-4.906997,4.789477,8.845479,5.735423,7.488136,-0.737621,1.013832,-2.641977,5.559804,-4.033810,8.789479,6.107671,-3.085347,-6.888942,-1.958597,0.979952,4.103861,-1.623934,-5.132947,-0.702297,6.684619,2.634199,7.813883,8.809299,6.605202,5.287438,0.258259,9.093414,-8.464779,-1.373077,-3.728988,4.284842,-4.044670,-4.505768,7.717506,7.333304,5.703110,-2.844415,-9.589976,3.454024,5.852111,-1.077315,6.840629,-9.073532,7.801891,6.402751,4.423541,7.142595,-0.705021,-7.367085,-3.241697,-3.670272,-6.434995,0.797606,-8.867897,-2.466326,7.571506,1.013799,4.635644,-2.108905,-0.481164,-7.359971,-9.169906,3.590020,3.384871,4.814556,4.921757,4.888842,-1.858201,-1.356486,3.284022,-2.450950,-8.498396,5.583361,6.398252,-4.372300], dtype = "float32")#candidate|782|(144,)|const|float32
const_783 = relay.const([2.819556,-4.859495,7.679794,-5.017398,9.869559,-5.225686,-7.048634,7.441673,-1.456585,0.881934,9.111282,-0.149146,-9.799595,-0.452562,0.725364,-3.195432,-1.112874,9.834108,-3.842118,4.131984,2.808671,8.180230,-2.685081,6.976380,-7.019031,6.181658,0.720538,-5.451426,4.147194,-7.854452,1.415043,3.778229,8.440674,4.516975,-8.289147,-7.739667,-2.090821,-6.866704,-1.658806,0.263282,-9.662231,-8.763782,-6.098221,5.039384,6.840423,-2.863470,-1.284929,-2.428335,-1.779741,9.734216,-0.511585,-7.977693,2.118247,-4.551410,-9.262845,-7.822420,-5.040377,0.992780,-7.300383,-9.489852,-0.294286,-0.124397,-3.009909,-3.930634,-9.989781,-5.392153,0.619438,3.827541,2.928217,-1.865940,-4.811566,-9.973163,1.613906,4.436984,-3.231488,3.197154,9.331706,-2.357461,8.648444,-2.574097,-6.574190,-4.519587,-7.092807,8.234262,0.870754,1.392873,-4.935200,6.337467,6.706624,3.856071,-9.435447,-8.503446,-0.908924,-1.128308,-3.153418,2.507912,3.624778,-5.435453,-7.917308,0.098397,-8.772755,7.592972,-5.384839,-0.470169,1.258088,3.232619,3.655892,5.732967,-6.280394,6.158718,5.563247,-1.990209,-0.233900,-0.899385,-1.917221,2.811305,-5.936065,0.146688,1.497958,1.454910,-5.138547,-4.393372,-1.318687,4.097360,7.153903,5.386723,-1.064751,8.441751,2.996630,7.762127,0.611108,-8.397006,1.804305,-8.348088,1.273308,7.155491,4.285050,5.540729,-0.719598,-9.325827,0.258182,-1.320187,1.329669,6.672915,0.438002,-4.376037,1.030688,-8.632801,0.089191,6.771406,-5.997632,-9.149484,-0.887221,-5.090703,-8.060799,9.095569,-2.783222,7.058454,6.764947,-7.488022,4.757431,-3.970738,2.730009,0.773345,3.096746,-1.856536,-0.066046,4.407272,-3.713036,1.648581,3.722412,0.387405,-9.809333,5.466443,3.582658,-1.612764,1.172440,2.513132,4.148623,7.190038,7.157536,9.293932,-5.438585,-0.553250,-6.523045,2.824471,-8.895607,7.379390,-1.077093,0.896192,8.292834,-0.017234,-4.186944,8.569863,4.792093,-2.107758,-6.339590,-5.733349,0.286717,-2.673530,-4.217244,1.280041,-4.722900,4.151768,9.370802,-7.466798,-2.164035,3.349211,-2.360541,-8.325451,9.881167,-0.367452,-6.520049,-8.446583,4.032769,3.028439,5.133525,3.984928,-2.544581,-0.256707,1.549159,-3.329932,3.742106,-0.579903,-2.120416,9.799473,7.176646,-0.943477,-9.624974,4.812049,2.390432,4.772170,5.607574,-1.532211,0.149869,-1.967388,4.312817,-9.146954,-0.450722,-4.591065,-0.532000,7.360911,5.266177,7.020738,-1.378479,6.606772,-9.776812,-9.860092,6.731383,1.281834,7.947870,9.582779,-5.487392,-8.007440,-2.682932,7.137706,-7.868855,5.429660,-4.062505,-2.725888,7.216832,-0.256868,-7.309911,-3.940904,4.856738,4.809014,1.810910,1.997077,-6.183547,-6.746774], dtype = "float32")#candidate|783|(270,)|const|float32
call_779 = relay.TupleGetItem(func_671_call(relay.reshape(const_780.astype('int32'), [13, 7]), relay.reshape(const_780.astype('int32'), [13, 7]), relay.reshape(var_781.astype('float64'), [112, 2]), relay.reshape(const_782.astype('float32'), [144,]), relay.reshape(const_783.astype('float32'), [270,]), ), 1)
call_784 = relay.TupleGetItem(func_678_call(relay.reshape(const_780.astype('int32'), [13, 7]), relay.reshape(const_780.astype('int32'), [13, 7]), relay.reshape(var_781.astype('float64'), [112, 2]), relay.reshape(const_782.astype('float32'), [144,]), relay.reshape(const_783.astype('float32'), [270,]), ), 1)
func_742_call = mod.get_global_var('func_742')
func_745_call = mutated_mod.get_global_var('func_745')
var_786 = relay.var("var_786", dtype = "int8", shape = ())#candidate|786|()|var|int8
var_787 = relay.var("var_787", dtype = "int8", shape = (13, 4))#candidate|787|(13, 4)|var|int8
call_785 = func_742_call(relay.reshape(var_786.astype('int8'), []), relay.reshape(var_787.astype('int8'), [13, 4]), )
call_788 = func_742_call(relay.reshape(var_786.astype('int8'), []), relay.reshape(var_787.astype('int8'), [13, 4]), )
output = relay.Tuple([bop_765,call_779,const_780,var_781,const_782,const_783,call_785,var_786,var_787,])
output2 = relay.Tuple([bop_765,call_784,const_780,var_781,const_782,const_783,call_788,var_786,var_787,])
func_789 = relay.Function([var_763,var_764,var_781,var_786,var_787,], output)
mod['func_789'] = func_789
mod = relay.transform.InferType()(mod)
mutated_mod['func_789'] = func_789
mutated_mod = relay.transform.InferType()(mutated_mod)
func_789_call = mutated_mod.get_global_var('func_789')
var_791 = relay.var("var_791", dtype = "uint8", shape = (7,))#candidate|791|(7,)|var|uint8
var_792 = relay.var("var_792", dtype = "uint8", shape = (7,))#candidate|792|(7,)|var|uint8
var_793 = relay.var("var_793", dtype = "float64", shape = (224,))#candidate|793|(224,)|var|float64
var_794 = relay.var("var_794", dtype = "int8", shape = ())#candidate|794|()|var|int8
var_795 = relay.var("var_795", dtype = "int8", shape = (13, 4))#candidate|795|(13, 4)|var|int8
call_790 = func_789_call(var_791,var_792,var_793,var_794,var_795,)
output = call_790
func_796 = relay.Function([var_791,var_792,var_793,var_794,var_795,], output)
mutated_mod['func_796'] = func_796
mutated_mod = relay.transform.InferType()(mutated_mod)
var_800 = relay.var("var_800", dtype = "float32", shape = (1, 16, 15))#candidate|800|(1, 16, 15)|var|float32
uop_801 = relay.acosh(var_800.astype('float32')) # shape=(1, 16, 15)
const_808 = relay.const([[[-9.964118,-0.152149,2.205226,1.774671,-3.520844,1.228676,-0.581082,-4.851806,-2.900603,4.667276,-4.999057,4.918139,-4.492007,8.125425,2.665860],[-1.149155,-8.779610,-6.936222,5.258198,4.025888,7.401009,4.171834,3.306443,5.437380,-2.876070,-9.445719,-7.195796,5.053392,0.565104,6.870775],[4.157092,-6.844519,8.341717,5.554530,-4.824074,-3.564029,7.563991,1.060729,5.565237,-9.508129,-0.928137,-3.188507,4.140565,4.418130,-3.650664],[9.327073,-4.936105,1.788783,-5.884507,3.445917,5.750583,4.038125,0.986153,0.336972,7.970314,-5.852658,1.820951,-6.822945,-4.492665,2.144018],[-5.998046,-7.033256,-7.624644,-0.192974,-0.291690,5.602535,-8.926681,-6.083722,6.736954,-1.100296,-4.708272,-7.701487,-4.945052,-5.268566,-5.232862],[4.711822,-0.980707,-0.850565,-2.548282,-4.836549,-7.441113,-2.651614,-6.579887,-4.721111,0.771680,-6.056117,-4.171002,8.945853,5.833049,3.306908],[9.978593,-8.202651,3.416436,-4.827702,-4.215321,-1.968792,-6.324656,8.899053,-5.781885,-8.902841,-0.606583,7.046688,-8.344246,8.380712,-3.634126],[6.061870,-7.119146,3.577563,-5.216461,5.059162,-5.491491,7.810184,-6.779932,6.389787,1.804039,-8.923644,-0.628762,-3.000589,-6.945751,-7.175564],[-3.679232,-6.795409,-3.339640,-4.194944,2.999601,9.806773,-5.499708,-2.478637,0.872846,9.482677,-5.491800,-9.656874,4.928533,4.771416,5.415520],[-1.832506,4.988542,-3.556263,-3.367374,3.318533,-4.760085,-2.556486,8.202448,7.479936,-8.845808,3.686668,7.530736,-3.374006,-8.884028,-0.928881],[0.624881,-4.281695,-0.296311,-9.538546,0.078624,-9.570422,-7.498237,-4.399528,-8.644380,-7.704848,-7.161512,5.734062,-9.439388,-2.104895,6.849613],[-5.153381,7.409462,0.814160,8.626314,2.924909,3.941002,-6.695097,-0.877639,-5.605662,-8.216106,3.331861,-7.988685,-4.430209,-1.547583,-0.907051],[-2.954629,9.675693,0.282365,0.011774,-7.993194,6.901293,-9.343989,-8.661351,0.750827,4.326492,0.325507,-5.560544,7.824433,-6.488776,-6.974249],[7.384949,7.369948,-6.715320,-4.554860,7.897053,-3.120495,-4.717931,-4.449626,5.447348,2.848573,-4.751839,-8.916493,0.646047,5.462256,1.468627],[-3.111673,-1.397159,8.107632,-2.113473,-1.680267,4.785540,-5.906991,-4.366771,-0.751467,-4.738220,-6.642224,-6.836503,-5.402505,6.918300,-8.867873],[4.994388,3.103837,-6.236204,-1.869115,-9.902783,1.482771,-5.472502,-5.499293,-1.118192,-7.614309,-8.757248,9.144139,9.346100,-2.094531,-2.844959]],[[-2.238775,9.694558,7.870901,-7.975536,-5.690777,0.528225,-8.975629,-9.394971,-6.134652,9.666123,1.863466,0.608668,5.488196,-4.491565,8.273412],[-9.174463,-7.596502,-5.562361,7.398030,-5.365820,9.553088,5.445855,7.725655,-0.053861,1.050675,-7.627913,-2.963993,5.029666,1.150720,2.950650],[-2.576338,-5.456665,-6.334334,9.286529,6.113797,8.762840,1.405506,6.065049,-8.386575,-2.577026,6.286894,7.820578,-2.493934,7.588075,-7.676111],[9.674401,-3.640356,-2.291248,-0.154538,8.273499,6.342768,-3.625930,9.742983,0.381675,-9.644225,5.186858,-6.853748,1.518648,-3.536860,-8.286058],[2.273703,3.803088,4.083009,-5.297037,9.733521,-4.998872,2.520749,3.216707,-2.019465,-2.375709,-1.182943,-2.460335,-2.862852,-1.880849,4.391024],[-3.238235,-0.956868,-5.879781,5.835527,6.633886,-6.342031,0.628371,-0.243515,6.561361,7.062133,2.590718,8.444846,-9.197465,6.355245,-2.994955],[-9.854729,-1.600814,9.076631,-1.882044,7.327328,6.808825,7.126537,8.494328,-1.160134,-0.431046,9.658502,6.898181,-3.246957,-0.714406,-0.149357],[-0.044330,0.515459,2.187940,8.873186,4.347654,5.492309,1.715783,9.874071,9.339016,5.835675,8.982332,3.388723,6.710906,2.964736,-8.798498],[9.941754,-1.616926,3.934053,8.038300,4.253383,7.326464,0.704457,-9.844904,-7.024365,-8.812357,5.575970,-4.095912,8.602675,-2.651499,9.740103],[-9.065384,7.105296,-4.365222,4.028568,-6.129867,-3.865038,2.551066,-0.647928,5.225093,1.796228,-4.897576,5.045909,-9.886167,-6.690548,3.507709],[1.343519,-6.304880,-1.931132,4.958039,-3.057314,9.526521,1.286018,9.449644,-9.854166,-1.151363,-7.655115,-8.458907,4.125732,-6.106838,-5.224311],[-5.399518,-2.754894,-6.934118,5.505664,-8.008893,2.005669,-4.652366,-4.089049,-6.978377,-9.797227,3.538117,3.509921,4.337125,-8.041165,4.480480],[4.709727,-4.676670,-4.027471,2.746457,-8.621791,-7.831627,5.132962,-7.422973,-5.241314,-6.735098,-6.013848,8.063057,9.654153,-2.889795,9.104038],[-1.464314,4.842830,-8.005033,-2.088827,4.746452,4.467611,-4.007698,3.762571,-3.985790,-0.085388,-6.703116,-3.199372,-2.466862,-0.791659,6.458152],[-2.295528,4.222510,-4.374897,-0.695326,3.327630,5.863163,7.033579,4.399695,3.889731,-5.330639,-9.798935,-2.498578,-8.885648,-0.684546,9.021668],[-4.220001,-0.249188,-2.311640,1.398287,8.648746,-0.343507,5.644274,-3.799402,-0.857846,0.900671,6.220362,-0.416235,-5.191135,7.776608,1.993559]],[[2.349043,-8.920585,8.489480,-2.255058,5.000178,7.910182,8.133594,0.260005,0.231972,3.489309,-1.028480,-6.294672,-5.546983,-8.018590,-5.967135],[-8.319764,9.359786,6.555905,5.390106,-8.295599,7.114374,3.491559,-0.613901,-2.630390,-0.927360,-1.157921,2.598550,5.190901,-2.558284,4.504809],[-1.077085,-3.767057,-0.858068,-2.767572,5.952798,8.348333,5.669855,1.158698,8.001542,9.116619,4.844486,4.800299,6.557175,-9.359479,-8.637858],[-9.063965,-7.363806,-4.164427,-3.483857,-5.796049,7.111266,-5.657587,-3.536951,7.040277,1.561099,-9.779219,-1.782987,6.311590,-9.438889,9.555954],[7.585012,0.813726,-6.065979,5.455607,5.511366,8.508716,8.586994,6.246292,9.557416,8.914869,2.612779,-9.299115,6.460786,8.499910,5.579553],[-3.143098,-4.638067,-5.956114,-4.170358,8.814321,-8.210254,-9.030380,-3.563407,8.899354,-2.373902,8.044374,-4.093212,-4.521459,7.766767,-6.734653],[-1.432545,-5.624625,-3.442826,-6.298673,-1.480401,-0.191007,-3.018235,-2.478646,-2.900621,-7.298523,-8.296590,4.608797,0.911485,7.224525,2.261536],[-4.244255,-9.981649,0.242413,4.234986,7.131857,2.725005,-3.505897,2.327674,1.595196,9.701545,-1.538950,1.370800,-4.265531,1.901839,1.104118],[3.422017,4.212459,-1.126533,6.178420,-7.625877,4.442102,-3.229161,9.680029,-4.202766,-6.656184,-2.323840,-9.744223,-3.874795,1.077625,-2.500756],[-8.086010,-3.775844,4.822904,-0.451762,-2.743527,-6.489533,0.244186,-4.103736,-5.859909,3.022796,-7.585770,3.578362,9.334950,3.931770,-8.458517],[6.603499,-2.286714,-7.305283,2.799034,-1.935835,1.114588,7.429598,5.291402,4.656987,6.835216,-1.775452,-1.271761,-2.092701,1.431537,-4.437785],[7.102793,0.404384,4.626319,2.073460,-2.262482,5.063873,-5.174636,-3.078736,-1.477801,0.508523,-2.108800,7.428998,-5.203756,-1.129300,1.101998],[3.585434,5.628608,-4.564907,-1.461983,9.640437,8.063332,-1.111238,7.774847,-1.458871,-5.794075,8.572803,7.371777,7.290247,-6.346234,-8.418229],[5.684769,-5.435233,-4.698292,7.257461,9.016460,0.883732,4.553184,-6.951366,7.913319,-4.259266,7.252728,-3.981521,-7.501114,-7.243835,-2.355616],[5.516788,-1.269151,-5.795718,-6.182143,7.387783,-8.744019,3.068731,-0.105135,-4.485512,-5.200520,8.281603,1.364860,-8.481196,4.159099,-9.686537],[6.444293,7.409667,-5.367225,-0.266761,-5.369384,-7.056988,1.421911,-6.076349,3.435288,7.283411,-9.252270,3.438677,-0.638315,9.238598,-3.748595]],[[7.686992,2.100963,5.378665,-6.287780,9.000208,7.335234,3.043340,6.617899,-9.021727,8.774847,-4.450402,-2.915236,8.797053,4.132384,9.513280],[-2.977188,-5.330568,4.032052,4.078874,8.609561,-6.452072,-0.254822,6.255190,-6.657635,4.558634,8.276850,7.620737,7.382532,5.769255,2.810116],[5.851318,4.829155,-4.694871,0.350416,8.310039,-6.237360,-5.267168,0.983790,-8.172796,7.379599,6.345630,5.627469,4.904958,7.126538,9.444053],[6.611134,1.850321,-3.609272,2.481753,0.832453,1.705965,6.999884,9.218100,4.204766,-2.786321,1.527299,-6.226620,-0.002440,9.480462,-8.514110],[-2.890378,4.546662,-3.155155,3.029919,-7.821246,-5.771367,-2.181982,2.218653,7.653365,3.570816,3.436323,4.665149,9.665335,4.794267,-5.116449],[-5.032806,5.159580,-5.692337,9.802713,-4.166154,-5.906658,9.968929,-9.591368,-7.599327,-5.240020,8.310248,-0.384943,1.252605,-6.416215,8.840861],[-5.702681,0.224156,3.544709,2.966276,-7.380199,-6.701728,4.824357,2.525952,-4.450257,4.891533,-4.617134,3.713260,4.137310,-7.852460,8.249638],[-6.858399,5.553952,-0.034834,7.815022,-9.428840,7.106365,1.192682,-8.356136,-4.696903,-7.693326,6.590136,-1.475217,-7.052024,7.457157,8.387568],[-4.771008,-4.290046,7.102620,-9.670585,3.928698,-4.407286,-2.584775,9.524376,3.098290,4.635052,3.734749,-4.075090,1.757105,1.549581,5.980454],[-4.266514,5.954328,-4.677742,2.765362,1.415455,3.782342,4.036510,2.329154,-1.254679,-5.829201,8.308663,4.292816,7.675623,-2.838126,7.212208],[4.658605,7.390731,5.744331,5.612509,-7.509241,9.206929,6.032211,5.853737,7.004164,7.004096,-3.309039,8.193007,-5.089554,-8.027251,9.486544],[-4.483956,3.489083,3.170178,5.473767,8.217466,-6.923590,5.924509,5.148162,-8.174125,7.745689,-8.284482,-0.936739,0.570390,-9.267227,2.041314],[0.124568,-7.803116,9.187059,5.635400,8.693540,7.437239,4.830003,0.158990,0.780940,4.629768,1.261525,-3.319578,7.328386,-6.788194,-9.801769],[-5.935396,1.142410,-5.439587,-0.802273,-7.829733,3.702535,7.360808,-4.911702,8.814932,4.315419,-8.111874,9.975793,-4.776275,-7.925755,-6.732698],[3.385501,0.193355,-1.793322,1.178048,0.637981,-9.913346,6.312894,-6.589174,-1.880280,-3.366767,-9.172547,-4.779418,2.323108,1.816563,7.161848],[-4.326787,-1.775405,8.726073,-3.087166,8.154002,-3.104870,-1.376335,-1.246812,-8.949633,-1.830324,-9.031358,7.940688,-3.996040,2.219566,6.278298]],[[-1.993792,3.665863,3.275170,1.007104,-1.721796,9.257147,-9.326582,-1.776235,-9.524230,7.466868,0.096608,-5.307718,-5.040904,-1.827345,-6.080323],[-5.854308,9.072423,2.847668,-0.022915,-9.400096,5.849835,-4.262633,1.790495,-0.972245,8.769504,9.143540,5.138045,9.842079,-8.690495,-7.686648],[6.460109,4.228610,-6.933228,9.946760,2.663375,6.622934,-9.358335,-4.025611,3.325148,5.444925,-2.458944,1.048614,-2.947896,8.407982,-7.024264],[2.087890,-7.165994,1.417860,5.584938,-4.742594,-0.921044,-3.601572,1.021460,4.150405,7.040651,3.161691,0.379807,-5.211124,8.584930,-9.891791],[5.841959,-9.975465,2.310422,-4.169390,-4.713581,9.911942,7.744776,1.606607,9.410699,7.845209,-7.073756,-4.052284,4.113493,9.775966,6.639725],[7.765783,-4.348610,-3.158606,8.213984,-1.206522,8.110156,-9.594347,0.825891,3.459814,-2.471095,-1.919383,5.449973,-0.230373,4.932726,-7.603201],[-4.524670,8.516708,3.737530,-1.712726,-2.791796,-9.804669,-3.903120,-0.736155,1.495053,-3.317973,-5.426335,-8.412160,-4.177254,0.305943,-2.753088],[-5.392409,7.112333,3.433517,2.801369,4.231680,2.253725,-4.157403,-0.341695,9.680848,-8.297808,-6.805160,-6.615848,1.217812,9.043991,-0.435203],[-5.833029,-5.637722,-4.850668,-5.626479,4.042185,-7.886752,5.012391,1.979457,5.333346,9.651689,-3.800380,6.291413,-1.457545,2.731982,0.115799],[-3.885601,-2.192851,3.383562,-2.920583,4.544366,2.733119,-3.945005,-6.446171,-7.867596,9.699967,6.350669,4.748010,-9.405940,1.299883,-0.708694],[-2.542060,-3.033934,3.601338,8.254554,5.626335,-7.398539,-4.083298,-2.530591,-0.816496,0.736888,-3.513126,1.933976,4.019221,-2.761668,-1.414909],[7.573660,7.043866,7.945892,1.752970,-0.299418,4.694448,2.396493,-3.655611,-5.569946,-9.490801,-2.190814,0.851232,2.579883,6.505385,5.425258],[-3.134751,-4.640406,2.089786,-0.341502,0.356072,9.254351,1.473613,-4.819144,-3.358401,-6.864486,-8.388756,-5.065348,1.840399,-5.155802,0.684552],[-5.891122,-6.444476,1.800542,-9.948490,-9.084361,-3.272932,3.981505,-8.602670,9.122171,-0.490484,-1.869401,-9.232300,-5.153564,-7.849941,4.931562],[0.471348,4.439386,-8.924175,9.412712,-1.589098,-7.169998,4.123322,4.741165,-3.881253,0.717017,-9.970655,2.955562,-7.525283,-0.852093,3.037263],[-4.072925,0.619853,-2.430371,-2.637319,0.231136,-2.055396,6.378135,8.620037,4.685287,-1.084236,-8.195991,-5.079314,6.989121,-4.648091,9.584608]],[[8.630696,-8.963318,5.292119,4.346542,-1.279683,5.781017,-7.276865,-9.876460,1.452462,4.954260,-2.459973,-4.549130,-0.702611,0.916877,-3.209145],[-8.366060,-9.933289,-4.728365,9.232646,9.248511,-2.623696,-3.012745,-2.201328,-1.179204,8.583822,8.763131,-9.572966,-5.288292,5.735230,8.062805],[0.714547,-3.965479,-4.909308,5.493144,-8.519807,9.529346,9.691909,0.466466,-1.764698,2.802421,-3.380639,-9.394798,0.605920,6.502483,-8.323557],[-8.499725,-8.348066,-6.090791,4.482276,-5.354304,-0.343259,0.364621,-6.055000,0.991405,-1.112847,-9.944291,6.013079,3.664045,5.106543,-3.642769],[1.900404,1.362476,6.941409,-8.269211,-0.264521,-6.481490,-7.428916,-6.096471,-1.051296,-6.052352,6.293338,9.877620,7.974994,1.541961,4.177447],[-1.564597,-5.354402,-1.345205,7.506911,-3.736284,-6.235633,5.870006,-7.444537,8.573018,1.782395,-9.490430,-7.997255,-4.942146,-9.002869,-4.905206],[1.753429,9.418262,0.348680,5.782226,-3.036618,-6.117785,-7.588831,-1.395100,2.380540,4.651457,1.493602,2.037908,-5.827555,1.153070,3.157531],[-2.614507,-5.513172,-1.324547,-6.215263,8.316901,-8.238456,1.719747,0.243885,6.603278,9.555409,2.649461,-9.971339,-8.189670,-4.096508,-5.979835],[6.707836,-1.758982,-8.833921,0.318893,-3.659929,5.468246,-0.551150,6.937172,-5.410052,6.769650,-0.659689,-5.028339,8.172278,8.865523,-0.362884],[-6.187007,-7.297365,-1.970118,1.637819,5.102340,-4.761990,-5.389426,3.898545,-8.918094,0.902386,2.982464,-7.574029,-8.388875,-5.139693,-0.594774],[7.797071,8.112359,9.757407,-4.022210,2.881013,0.384754,9.874101,8.024931,6.698266,-9.285962,5.231992,-7.264637,-8.137725,6.503847,-0.571448],[0.732613,-1.510822,-1.243150,-6.868913,9.644970,-0.297078,8.499889,-5.235132,7.618559,-3.292558,-9.402751,0.078151,-4.136370,-0.625493,2.737971],[9.591952,-5.471245,5.834744,4.834463,-0.844960,7.314725,6.492952,-0.319661,4.750059,-5.032804,3.329796,8.185430,7.705994,-8.089137,-6.011194],[8.010532,3.003363,3.559130,-1.890890,-5.999264,8.673403,5.293675,0.588553,3.020519,5.557436,-9.355951,-9.755250,-9.245244,4.649705,0.445244],[-6.291559,8.154593,6.708719,-1.879241,-7.763879,-0.157076,-8.669128,-6.507957,6.895696,9.444095,4.513589,9.473563,2.998577,-3.374734,3.374638],[-9.931402,-3.682267,8.614452,9.086543,5.140132,-5.892284,0.774469,9.203845,-0.913980,9.314482,-4.268159,-9.414208,6.845203,6.139067,-2.584965]]], dtype = "float32")#candidate|808|(6, 16, 15)|const|float32
bop_809 = relay.minimum(uop_801.astype('int32'), const_808.astype('int32')) # shape=(6, 16, 15)
bop_813 = relay.logical_xor(bop_809.astype('uint8'), var_800.astype('uint8')) # shape=(6, 16, 15)
bop_818 = relay.bitwise_or(uop_801.astype('int16'), const_808.astype('int16')) # shape=(6, 16, 15)
func_349_call = mod.get_global_var('func_349')
func_355_call = mutated_mod.get_global_var('func_355')
const_823 = relay.const([5.884863,2.748738,6.289833,-2.251678,2.025330,-6.390330,5.623599,1.301133,-9.658080,-7.860788,-4.347754,9.091696,4.316500,-6.806332,6.569494,6.224705,9.360597,-3.810016,3.117377,8.104486,-7.953253,-9.409148,2.050140,5.930712,0.179777,-7.715770,1.381292,-5.218570,-2.054449,-1.548217,-2.837117,-4.163646,-9.218731,-5.765221,4.827753,7.769659,-0.158710,4.705509,2.819428,2.015829,7.167707,-6.525453,3.560888,3.146328,7.212680,-4.575686,8.693753,3.167706,2.748924,2.871471,9.691538,-7.763182,5.049530,-6.646821,-0.179294,3.738050,6.609112,4.415118,-4.972741,4.005247,-4.314756,-8.428083,-9.907680,1.556944,6.273053,1.083839,3.158182,-1.498420,4.351224,0.589424,9.143911,7.669983,-8.173936,6.970619,5.298593,-6.622730,-8.080338,-7.753424,3.360430,4.800742,-9.674133,0.013569,-6.099388,-5.410547,-7.041714,-2.613486,2.802977,6.764261,-4.759494,-9.950854,5.277673,1.727461,6.677040,-9.893180,5.665107,-9.110181], dtype = "float32")#candidate|823|(96,)|const|float32
var_824 = relay.var("var_824", dtype = "float64", shape = (2, 112))#candidate|824|(2, 112)|var|float64
var_825 = relay.var("var_825", dtype = "float32", shape = (144,))#candidate|825|(144,)|var|float32
const_826 = relay.const([-2.564265,-2.809260,9.002722,8.944922,0.007594,5.111386,7.323137,-0.095244,-7.222318,0.888971,-2.365827,1.402534,-7.620989,-4.011719,5.952506,8.247671,4.672356,2.204928,2.051379,-8.746800,5.006442,3.138425,7.513504,-1.763945,-5.404674,0.124014,-2.171408,-2.514124,-9.354955,7.745128,1.305067,8.464745,-9.035260,1.950858,0.785634,-5.604065,-8.891995,-1.623906,3.949558,5.911883,-0.889815,-5.832668,1.719051,5.939165,1.621276,-1.060218,2.319782,-8.091838,-8.956972,3.358710,3.242156,-5.108650,4.452721,5.065053,-4.253818,6.070175,6.909083,2.563136,-1.041151,-9.486419,2.502351,-5.485778,-9.496443,-4.823369,-7.811954,7.980476,6.346530,7.812959,-1.442060,-2.482083,4.862420,3.729123,4.184155,-1.953020,2.558133,-3.042086,1.440527,8.160255,0.481097,-6.979678,3.054553,2.382957,-3.845804,8.343706,5.774946,7.762088,3.638074,5.853509,1.371033,-7.429572,6.347222,-0.135034,3.154973,-0.432165,2.133563,6.319988,-1.648780,-3.747597,0.688237,5.562109,4.876244,-8.642316,4.644245,7.550033,6.948913,7.754036,-4.460527,8.074426,5.188484,-2.221985,-8.518777,0.124205,-5.723883,1.301843,-8.406449,-0.066770,3.287381,-6.534204,5.934044,-1.331242,-8.571685,4.478046,0.312762,-7.353244,-0.693040,4.482205,-2.174360,-2.465389,-2.329572,1.963970,-9.769762,-8.022761,-5.713887,6.104390,4.569628,-6.786205,5.165729,-4.305054,-6.278406,-6.685462,-5.760485,2.651393,-7.727606,2.713127,-0.048547,0.569399,6.939080,-8.228181,3.620841,5.280394,8.605067,-8.893311,0.539883,2.330008,7.689247,-5.880473,-9.977138,0.427338,4.051245,7.980450,9.730856,9.574999,0.799651,-7.643488,5.977000,9.995836,7.217240,6.928548,-1.609103,-8.549033,-4.494314,6.797806,-0.367838,-0.790331,-9.492606,0.267790,-4.338706,-0.206426,4.276468,-7.029948,-6.122572,0.836196,7.788702,-1.513832,-8.152136,-0.317141,1.692868,0.948250,-5.094270,-9.267551,4.627887,-3.510458,-9.663228,4.127174,8.288821,-6.427835,1.012154,0.130683,-6.253106,4.080814,-4.165313,-0.671547,0.108926,6.541144,6.726077,-4.810282,-1.943710,-2.024433,6.408375,-9.679609,-5.251179,-3.467469,-0.371494,-7.276272,7.519764,9.479401,2.575841,-6.693687,3.138919,-2.696536,7.081704,-5.666244,4.402572,-9.729634,-6.509318,3.695185,0.835052,5.967166,0.977507,-3.014476,1.684663,-8.301248,4.372968,4.445690,6.510333,9.911447,7.796938,-9.639509,2.563151,3.591521,1.198394,-9.031988,3.165596,-3.660945,6.294250,2.877508,8.272125,-0.438393,-2.942756,7.992206,2.544150,-3.892553,-1.457645,-8.378669,6.373342,-7.553847,-2.563927,3.316280,-9.866527,7.472439,3.419461,-3.028424,-0.492044,6.150091,-8.601469,-0.939438,-0.731283,-9.217988,7.736985,-2.266030], dtype = "float32")#candidate|826|(270,)|const|float32
call_822 = relay.TupleGetItem(func_349_call(relay.reshape(const_823.astype('float32'), [6, 16]), relay.reshape(var_824.astype('float64'), [14, 16]), relay.reshape(var_824.astype('int32'), [14, 16]), relay.reshape(var_825.astype('float32'), [9, 16]), relay.reshape(const_826.astype('float32'), [270,]), ), 0)
call_827 = relay.TupleGetItem(func_355_call(relay.reshape(const_823.astype('float32'), [6, 16]), relay.reshape(var_824.astype('float64'), [14, 16]), relay.reshape(var_824.astype('int32'), [14, 16]), relay.reshape(var_825.astype('float32'), [9, 16]), relay.reshape(const_826.astype('float32'), [270,]), ), 0)
func_485_call = mod.get_global_var('func_485')
func_489_call = mutated_mod.get_global_var('func_489')
const_831 = relay.const([[-2],[-7],[-1],[-3],[6],[-3],[2],[-9],[-8],[2],[-5],[-2],[7],[-8],[3],[-4],[-3],[1],[9],[4],[-5],[-8],[-1],[-6],[9],[5],[-8],[3],[-8],[-10],[2],[-5],[4],[8],[-1],[-9],[-9],[1],[-4],[-3],[4],[-1],[4],[10],[2],[4],[-4],[9],[-4],[-1],[7],[-1],[-5],[-8],[-1],[5],[8],[10],[7],[-5],[-9],[-3],[9],[-1],[8],[8],[-2],[-6],[3],[-7],[5],[-10],[8],[-5],[9],[4],[-3],[3],[10],[3],[-7],[-7],[-1],[-5],[5],[9],[-6],[2],[-8],[-8],[1],[8],[-10],[3],[6],[10],[-10],[10],[10],[-8],[-9],[-6],[5],[-6],[-9],[3],[-8],[-3],[2],[10],[6],[1],[9],[-7],[-9],[1],[-1],[3],[-6],[-10],[-7],[4],[-2],[6],[3],[-5],[-8],[-4],[10],[-3],[8],[8],[-2],[7],[4],[-3],[-8],[6],[2],[-7],[-10],[5],[-9],[-4],[-4],[-9],[-2],[4],[-2],[1],[6],[-6],[-1],[-6],[6],[9],[6],[-1],[-6],[-3],[1],[-5],[-2],[8],[9],[9],[5],[2],[8],[8],[-3],[-10],[-2],[-1],[8],[-9],[7],[4],[10],[-3],[-1],[-6],[8],[2],[-8],[-1],[-7],[8],[-2],[10],[-7],[8],[10],[3],[-2],[-2],[-1],[-9],[6],[6],[-2],[-3],[-6],[2],[3],[7],[-10],[4],[-7],[-1],[5],[3],[-2],[2],[6],[2],[-5],[-10],[-9],[10],[-4],[-10],[3],[4],[10],[10],[9],[-9],[10],[10],[9],[5],[-8],[-6],[7],[7],[-2],[6],[10],[7],[5],[3],[-5],[-6],[-6],[-10],[-10],[-1],[-1],[-5],[3],[-2],[8],[2],[7],[-8],[-1],[6],[-7],[-2],[1],[-8],[-8],[-9],[-7],[9],[-4],[-5],[-8],[4],[10],[-8],[5],[10],[8],[-5],[-3],[-2],[-3],[4],[-3],[10],[-4],[4],[5],[9],[-10],[-8],[-3],[-8],[-10],[2],[7],[6],[4],[2],[3],[-7],[-8],[-10],[8],[8],[-6],[-4],[-5],[-10],[5],[-8],[-7],[-6],[4],[-8],[-1],[-5],[7],[10],[7],[-5],[4],[-4],[4],[-2],[7],[3],[4],[-4],[-9],[-7],[-9],[-7],[-10],[-6],[-5],[-1],[-2],[8],[8],[-5],[9],[8],[-9],[-6],[-5],[7],[7],[-4],[3],[5],[-3],[-6],[1],[1],[3],[-4],[-5],[-10],[5],[3],[8],[7],[5],[2],[3],[5],[6],[-1],[7],[-8],[-9],[5],[-5],[10],[-10],[1],[4],[3],[1],[-5],[-5],[-10],[-4],[-9],[2],[-1],[10],[-7],[-2],[6],[-10],[10],[-6],[1],[-10],[-2],[1],[-7],[-3],[-3],[-6],[8],[-2],[-4],[1],[-8],[8],[5],[1],[-3],[-4],[-8],[-9],[9],[-5],[-8],[7],[-10],[2],[5],[3],[-4],[-1],[7],[5],[-5],[-7],[6],[-9],[-7],[-7],[7],[5],[-5],[1],[-2],[-5],[-7],[7],[10],[-8],[-5],[-9],[-10],[-5],[-5],[3],[6],[-1],[-7],[-3],[7],[7],[-6],[-2],[8],[-5],[-4],[3],[-5],[10],[-9],[-3],[-1],[8],[-5],[6],[10],[-9],[-10],[5],[10],[1],[4],[-5],[-10],[-8],[8],[-6],[4],[-10],[4],[4],[-1],[-2],[-2],[9],[7],[-4],[-1],[2],[6],[2],[1],[-6],[1],[-7],[-1],[-9],[-2],[1],[10],[-7],[-9],[-9],[-2],[4],[1],[3],[-6],[-1],[2],[-2],[-7],[-5],[-3],[-4],[-8],[9],[-2],[8],[1],[3],[9],[-6],[-2],[2],[4],[-8],[6],[-9],[-10],[4],[-6],[5],[-5],[-3],[6],[8],[9],[-10],[10],[-6],[5],[-5],[-7],[-4],[9],[-7],[4],[2],[-7],[-6],[10],[-8],[-8],[1],[-10],[4],[3],[8],[6],[-9],[9],[2],[9],[3],[-1],[-9],[-2],[10],[-7],[10],[2],[-1],[-5],[-4],[-1],[6],[10],[5],[1],[3],[6],[-3],[-1],[8],[5],[-5],[4],[-1],[5],[8],[10],[-7],[-3],[10],[-10],[-8],[-9],[3],[-5],[7],[-1],[-7],[8],[-1],[-5],[2],[6],[-8],[2],[3],[-4],[-8],[-1],[2],[4],[-5],[4],[9],[2],[-7],[-1],[-4],[10],[6],[-1],[4],[1],[8],[-3],[-9],[10],[1],[8],[5],[1],[6],[-3],[-1],[-6],[5],[-7],[3],[-10],[-1],[1],[-1],[5],[-4],[5],[-2],[-5],[10],[-1],[-3],[9],[4],[-6],[5],[10],[-1],[5],[-4],[8],[-3],[9],[-9],[4],[-4],[-10],[1],[2],[5],[-4],[6],[-6],[5],[-10],[4],[-6],[1],[10],[2],[7],[8],[3],[-7],[7],[-5],[-10],[-3],[9],[-10],[8],[7],[10],[-1],[-5],[-4],[-9],[2],[-6],[-8],[-8],[-1],[5],[7],[-5],[-3],[2],[5],[9],[2],[-9],[8],[1],[-1],[-8],[-9],[6],[-7],[6],[-7],[4],[2],[-1],[5],[4],[-5],[4],[-4],[-5],[3],[6],[10],[-1],[-4],[-2],[8],[10],[-1],[10],[4],[3],[-9],[-5],[3],[8],[1],[-5],[-7],[-9],[-5],[-2],[6],[-4],[7],[-3],[10],[-10],[-3],[1],[-3],[2],[-2],[-7],[5],[-10],[9],[-3],[5],[4],[-3],[-1],[-2],[-1],[-4],[-3],[-1],[2],[-1],[-4],[9],[7],[7],[-2],[1],[-2],[-2],[-7],[-6],[1],[1],[8],[6],[7],[1],[4],[-5],[-7],[-2],[5],[-5],[-8],[-2],[1],[-5],[7],[-6],[-10],[-4],[-10],[8],[4],[-8],[8],[-10],[-5],[-1],[-3],[-10],[-10],[-9],[-3],[-1],[5],[-9],[10],[-2],[3],[-5],[-2],[-5],[1],[-10],[9],[-1],[4],[-6],[-2],[1],[-10],[-4],[-10],[-7],[6],[5],[9],[5],[-3],[6],[-4],[9],[-4],[-7],[1],[4],[8],[4],[-6],[-10],[-2],[-2],[-2],[3],[-1],[-7],[6],[5],[2],[6],[1],[5],[-10],[9],[9],[-2],[-6],[-4],[-1],[-6],[-5],[-9],[3],[-1],[-9],[-8],[-9],[-2],[-1],[6],[-4],[-3],[-3],[9],[-1],[8],[9],[7],[3],[-7],[-6],[-3],[-8],[-3],[9],[3],[10],[-2],[-10],[-8],[-7],[8],[-4],[-8],[-4],[-7],[1],[-5],[-8],[10],[-2],[9],[-8],[6],[1],[10],[8],[5],[-5],[-9],[9],[-9],[-8],[9],[-5],[-1],[3],[-8],[10],[-10],[7],[10],[2],[-9],[10],[7],[-4],[10],[-3],[7],[-2],[-4],[8],[-8],[7],[3],[2],[1],[-1],[-10],[-8],[10],[3],[5],[-1],[-5],[-1],[-7],[-2],[-9],[-3],[-5],[6],[-8],[8],[-7],[2],[10],[7],[3],[-10],[-10],[7],[9],[-2],[-10],[-3],[-1],[-3],[-5],[4],[-9],[9],[-6],[-7],[-6],[-7],[-7],[4],[8],[6],[-1],[3],[7],[9],[-8],[6],[-3],[-7],[3],[8],[-10],[-6],[1],[-2],[-3],[7],[7],[-6],[-7],[-6],[9],[-2],[-7],[1],[-4],[7],[-4],[-10],[-2],[4],[-3],[9],[-2],[-4],[-9],[-5],[2],[-1],[8],[-7],[9],[-4],[-9],[-9],[-1],[8],[5],[-3],[2],[9],[-6],[10],[-4],[7]], dtype = "int8")#candidate|831|(1056, 1)|const|int8
call_830 = relay.TupleGetItem(func_485_call(relay.reshape(const_831.astype('int8'), [8, 12, 11]), relay.reshape(const_823.astype('float32'), [96,]), ), 3)
call_832 = relay.TupleGetItem(func_489_call(relay.reshape(const_831.astype('int8'), [8, 12, 11]), relay.reshape(const_823.astype('float32'), [96,]), ), 3)
bop_835 = relay.logical_and(bop_813.astype('bool'), relay.reshape(bop_818.astype('bool'), relay.shape_of(bop_813))) # shape=(6, 16, 15)
uop_838 = relay.tan(var_825.astype('float32')) # shape=(144,)
output = relay.Tuple([call_822,const_823,var_824,const_826,call_830,const_831,bop_835,uop_838,])
output2 = relay.Tuple([call_827,const_823,var_824,const_826,call_832,const_831,bop_835,uop_838,])
func_842 = relay.Function([var_800,var_824,var_825,], output)
mod['func_842'] = func_842
mod = relay.transform.InferType()(mod)
var_843 = relay.var("var_843", dtype = "float32", shape = (1, 16, 15))#candidate|843|(1, 16, 15)|var|float32
var_844 = relay.var("var_844", dtype = "float64", shape = (2, 112))#candidate|844|(2, 112)|var|float64
var_845 = relay.var("var_845", dtype = "float32", shape = (144,))#candidate|845|(144,)|var|float32
output = func_842(var_843,var_844,var_845,)
func_846 = relay.Function([var_843,var_844,var_845,], output)
mutated_mod['func_846'] = func_846
mutated_mod = relay.transform.InferType()(mutated_mod)
var_879 = relay.var("var_879", dtype = "float32", shape = (15,))#candidate|879|(15,)|var|float32
uop_880 = relay.atanh(var_879.astype('float32')) # shape=(15,)
bop_895 = relay.bitwise_xor(uop_880.astype('int16'), relay.reshape(var_879.astype('int16'), relay.shape_of(uop_880))) # shape=(15,)
func_742_call = mod.get_global_var('func_742')
func_745_call = mutated_mod.get_global_var('func_745')
const_901 = relay.const(5, dtype = "int8")#candidate|901|()|const|int8
const_902 = relay.const([3,4,7,3,8,9,-3,-5,7,6,7,1,-5,5,10,1,3,3,7,10,-5,-3,2,-7,-3,6,-2,-7,5,4,7,-9,3,10,1,-7,-7,-5,10,9,-6,3,-4,-3,-4,4,-4,-10,8,1,10,-4], dtype = "int8")#candidate|902|(52,)|const|int8
call_900 = func_742_call(relay.reshape(const_901.astype('int8'), []), relay.reshape(const_902.astype('int8'), [13, 4]), )
call_903 = func_742_call(relay.reshape(const_901.astype('int8'), []), relay.reshape(const_902.astype('int8'), [13, 4]), )
func_842_call = mod.get_global_var('func_842')
func_846_call = mutated_mod.get_global_var('func_846')
const_908 = relay.const([-5.666543,3.453663,2.675728,-7.517219,-3.101906,-9.834398,-9.994789,7.262245,-4.178544,3.231074,-6.599435,-6.537419,-2.555894,-3.760643,-6.202125,5.249224,8.242274,-5.364807,-6.766031,1.783754,-4.888415,-7.074070,5.849786,-2.849091,-1.902881,1.114094,8.118930,0.252219,-3.728970,1.449272,-3.745323,6.941042,-0.269463,6.035650,-8.194499,1.074046,-1.208498,6.232025,-7.062733,-5.308151,3.700147,8.848078,5.258344,-6.053799,6.963220,-2.824864,6.968711,6.095327,-5.635790,-4.287236,8.853969,8.384813,1.886578,-8.073227,-3.310102,-6.146856,-1.447064,-1.919983,-8.951987,8.126688,8.108166,2.518834,6.337846,-1.145258,1.437836,-6.777370,-8.204996,7.571027,6.478694,7.543912,-9.343253,4.371364,-0.978450,-4.389327,0.733864,-8.945434,-5.953483,4.649097,-4.911122,8.843415,-5.639531,-4.955253,2.900317,-9.504370,8.685132,4.012430,5.268120,-6.555685,-0.071608,-1.704728,-6.808929,-6.043801,-1.257943,-2.442611,9.426637,3.957913,-2.049794,8.476350,1.530645,-1.635609,3.297935,-2.909615,-9.712090,-5.123461,9.242469,-8.191235,2.090761,-9.947931,-0.908661,-0.145743,-7.159069,3.670141,-9.731205,8.333773,-3.747433,-7.207516,0.794450,-2.073785,-0.494434,-8.693473,5.449285,1.031223,-8.647601,0.646140,1.535745,-3.193019,1.953206,-1.627775,-9.359621,2.748957,6.657194,0.579377,-3.240050,-1.658836,-8.578842,-2.798750,-8.283044,3.440723,-0.348492,9.971286,-8.068442,7.168214,-8.881049,3.428764,7.182245,1.482234,9.824058,1.617905,5.215213,-3.402258,2.079685,7.563544,-8.106134,-2.949714,8.094261,-3.145602,1.716006,4.899813,4.472455,2.981593,5.758931,3.996906,4.683583,-2.716846,3.765173,-1.862007,-0.829580,-6.185839,-1.768779,1.954483,-4.674119,-4.461018,4.077000,6.917157,-9.808417,-3.991513,-2.380240,-9.354876,-6.264205,-9.635051,8.630005,-3.136272,-8.948117,6.128179,5.903232,0.397621,-8.097077,-3.197124,9.696911,6.452394,-4.851207,-3.559016,4.894507,-9.735376,6.563432,8.196148,2.674128,-3.897443,-6.095215,3.255673,-6.021939,-6.214911,-3.910271,6.252811,-7.561627,3.615788,-9.506192,2.803202,0.277657,7.584133,-1.877873,7.895425,2.318253,-5.566577,8.370918,2.430822,-4.944927,2.905507,-7.767195,-5.236762,3.007142,8.068618,7.251220,3.114108,-2.961100,-6.835612,-4.556794,7.298914,2.282198,1.673145,0.563802,4.307705,-7.815044,-8.909658,1.435413,-9.660079,-7.461436,-6.492199,-9.015942,-3.317787], dtype = "float32")#candidate|908|(240,)|const|float32
var_909 = relay.var("var_909", dtype = "float64", shape = (8, 28))#candidate|909|(8, 28)|var|float64
var_910 = relay.var("var_910", dtype = "float32", shape = (144,))#candidate|910|(144,)|var|float32
call_907 = relay.TupleGetItem(func_842_call(relay.reshape(const_908.astype('float32'), [1, 16, 15]), relay.reshape(var_909.astype('float64'), [2, 112]), relay.reshape(var_910.astype('float32'), [144,]), ), 3)
call_911 = relay.TupleGetItem(func_846_call(relay.reshape(const_908.astype('float32'), [1, 16, 15]), relay.reshape(var_909.astype('float64'), [2, 112]), relay.reshape(var_910.astype('float32'), [144,]), ), 3)
output = relay.Tuple([bop_895,call_900,const_901,const_902,call_907,const_908,var_909,var_910,])
output2 = relay.Tuple([bop_895,call_903,const_901,const_902,call_911,const_908,var_909,var_910,])
func_920 = relay.Function([var_879,var_909,var_910,], output)
mod['func_920'] = func_920
mod = relay.transform.InferType()(mod)
mutated_mod['func_920'] = func_920
mutated_mod = relay.transform.InferType()(mutated_mod)
func_920_call = mutated_mod.get_global_var('func_920')
var_922 = relay.var("var_922", dtype = "float32", shape = (15,))#candidate|922|(15,)|var|float32
var_923 = relay.var("var_923", dtype = "float64", shape = (8, 28))#candidate|923|(8, 28)|var|float64
var_924 = relay.var("var_924", dtype = "float32", shape = (144,))#candidate|924|(144,)|var|float32
call_921 = func_920_call(var_922,var_923,var_924,)
output = call_921
func_925 = relay.Function([var_922,var_923,var_924,], output)
mutated_mod['func_925'] = func_925
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1059 = relay.const([[[6],[-1],[-9],[-7],[10],[-10],[4],[-1]],[[5],[4],[3],[-2],[-4],[7],[-3],[-1]],[[-6],[-5],[-3],[4],[6],[10],[-3],[2]],[[-2],[5],[-2],[8],[-3],[3],[-3],[7]],[[7],[6],[6],[5],[-3],[3],[8],[4]],[[-4],[5],[-10],[-2],[-6],[-1],[1],[8]],[[-1],[2],[-6],[3],[-2],[5],[-2],[7]],[[-10],[9],[-3],[-2],[-10],[-8],[2],[3]],[[-4],[-3],[9],[-10],[-2],[10],[4],[9]],[[-2],[-3],[-3],[-6],[8],[6],[-3],[3]],[[3],[10],[6],[5],[-4],[4],[-4],[1]],[[3],[-3],[-9],[-9],[-6],[-6],[3],[6]],[[7],[-10],[-5],[1],[-9],[9],[-7],[-3]],[[6],[-7],[6],[3],[1],[1],[-9],[2]],[[5],[1],[4],[-1],[-8],[-8],[3],[-5]],[[7],[6],[-8],[-7],[8],[-4],[7],[5]]], dtype = "int64")#candidate|1059|(16, 8, 1)|const|int64
var_1060 = relay.var("var_1060", dtype = "int64", shape = (16, 8, 13))#candidate|1060|(16, 8, 13)|var|int64
bop_1061 = relay.less(const_1059.astype('bool'), var_1060.astype('bool')) # shape=(16, 8, 13)
func_842_call = mod.get_global_var('func_842')
func_846_call = mutated_mod.get_global_var('func_846')
var_1068 = relay.var("var_1068", dtype = "float32", shape = (240,))#candidate|1068|(240,)|var|float32
var_1069 = relay.var("var_1069", dtype = "float64", shape = (224,))#candidate|1069|(224,)|var|float64
var_1070 = relay.var("var_1070", dtype = "float32", shape = (144,))#candidate|1070|(144,)|var|float32
call_1067 = relay.TupleGetItem(func_842_call(relay.reshape(var_1068.astype('float32'), [1, 16, 15]), relay.reshape(var_1069.astype('float64'), [2, 112]), relay.reshape(var_1070.astype('float32'), [144,]), ), 0)
call_1071 = relay.TupleGetItem(func_846_call(relay.reshape(var_1068.astype('float32'), [1, 16, 15]), relay.reshape(var_1069.astype('float64'), [2, 112]), relay.reshape(var_1070.astype('float32'), [144,]), ), 0)
bop_1073 = relay.divide(var_1070.astype('float32'), const_1059.astype('float32')) # shape=(16, 8, 144)
bop_1076 = relay.mod(bop_1073.astype('float32'), const_1059.astype('float32')) # shape=(16, 8, 144)
func_789_call = mod.get_global_var('func_789')
func_796_call = mutated_mod.get_global_var('func_796')
var_1083 = relay.var("var_1083", dtype = "uint8", shape = (7,))#candidate|1083|(7,)|var|uint8
var_1084 = relay.var("var_1084", dtype = "int8", shape = ())#candidate|1084|()|var|int8
const_1085 = relay.const([-4,7,3,4,2,8,-5,4,5,8,2,8,1,2,-4,7,-5,7,8,5,-1,-3,-3,10,10,9,-6,-2,10,-8,4,-4,10,6,5,7,4,4,6,7,-10,9,-1,6,2,8,9,-4,-3,8,-4,4], dtype = "int8")#candidate|1085|(52,)|const|int8
call_1082 = relay.TupleGetItem(func_789_call(relay.reshape(var_1083.astype('uint8'), [7,]), relay.reshape(var_1083.astype('uint8'), [7,]), relay.reshape(var_1069.astype('float64'), [224,]), relay.reshape(var_1084.astype('int8'), []), relay.reshape(const_1085.astype('int8'), [13, 4]), ), 1)
call_1086 = relay.TupleGetItem(func_796_call(relay.reshape(var_1083.astype('uint8'), [7,]), relay.reshape(var_1083.astype('uint8'), [7,]), relay.reshape(var_1069.astype('float64'), [224,]), relay.reshape(var_1084.astype('int8'), []), relay.reshape(const_1085.astype('int8'), [13, 4]), ), 1)
bop_1095 = relay.logical_xor(var_1069.astype('uint16'), var_1084.astype('uint16')) # shape=(224,)
uop_1098 = relay.cos(bop_1095.astype('float64')) # shape=(224,)
output = relay.Tuple([bop_1061,call_1067,var_1068,bop_1076,call_1082,var_1083,const_1085,uop_1098,])
output2 = relay.Tuple([bop_1061,call_1071,var_1068,bop_1076,call_1086,var_1083,const_1085,uop_1098,])
func_1101 = relay.Function([var_1060,var_1068,var_1069,var_1070,var_1083,var_1084,], output)
mod['func_1101'] = func_1101
mod = relay.transform.InferType()(mod)
var_1102 = relay.var("var_1102", dtype = "int64", shape = (16, 8, 13))#candidate|1102|(16, 8, 13)|var|int64
var_1103 = relay.var("var_1103", dtype = "float32", shape = (240,))#candidate|1103|(240,)|var|float32
var_1104 = relay.var("var_1104", dtype = "float64", shape = (224,))#candidate|1104|(224,)|var|float64
var_1105 = relay.var("var_1105", dtype = "float32", shape = (144,))#candidate|1105|(144,)|var|float32
var_1106 = relay.var("var_1106", dtype = "uint8", shape = (7,))#candidate|1106|(7,)|var|uint8
var_1107 = relay.var("var_1107", dtype = "int8", shape = ())#candidate|1107|()|var|int8
output = func_1101(var_1102,var_1103,var_1104,var_1105,var_1106,var_1107,)
func_1108 = relay.Function([var_1102,var_1103,var_1104,var_1105,var_1106,var_1107,], output)
mutated_mod['func_1108'] = func_1108
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1127 = relay.var("var_1127", dtype = "float64", shape = (13, 9))#candidate|1127|(13, 9)|var|float64
uop_1128 = relay.sin(var_1127.astype('float64')) # shape=(13, 9)
uop_1135 = relay.atanh(uop_1128.astype('float32')) # shape=(13, 9)
uop_1137 = relay.log2(uop_1135.astype('float32')) # shape=(13, 9)
bop_1141 = relay.logical_xor(uop_1135.astype('uint32'), relay.reshape(var_1127.astype('uint32'), relay.shape_of(uop_1135))) # shape=(13, 9)
bop_1148 = relay.bitwise_xor(uop_1137.astype('int64'), relay.reshape(var_1127.astype('int64'), relay.shape_of(uop_1137))) # shape=(13, 9)
bop_1155 = relay.less(bop_1141.astype('bool'), relay.reshape(uop_1135.astype('bool'), relay.shape_of(bop_1141))) # shape=(13, 9)
var_1158 = relay.var("var_1158", dtype = "float32", shape = (13, 9))#candidate|1158|(13, 9)|var|float32
bop_1159 = relay.subtract(uop_1137.astype('int64'), relay.reshape(var_1158.astype('int64'), relay.shape_of(uop_1137))) # shape=(13, 9)
bop_1171 = relay.greater_equal(uop_1128.astype('bool'), relay.reshape(bop_1141.astype('bool'), relay.shape_of(uop_1128))) # shape=(13, 9)
output = relay.Tuple([bop_1148,bop_1155,bop_1159,bop_1171,])
output2 = relay.Tuple([bop_1148,bop_1155,bop_1159,bop_1171,])
func_1175 = relay.Function([var_1127,var_1158,], output)
mod['func_1175'] = func_1175
mod = relay.transform.InferType()(mod)
mutated_mod['func_1175'] = func_1175
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1175_call = mutated_mod.get_global_var('func_1175')
var_1177 = relay.var("var_1177", dtype = "float64", shape = (13, 9))#candidate|1177|(13, 9)|var|float64
var_1178 = relay.var("var_1178", dtype = "float32", shape = (13, 9))#candidate|1178|(13, 9)|var|float32
call_1176 = func_1175_call(var_1177,var_1178,)
output = call_1176
func_1179 = relay.Function([var_1177,var_1178,], output)
mutated_mod['func_1179'] = func_1179
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1184 = relay.var("var_1184", dtype = "int8", shape = (14, 3))#candidate|1184|(14, 3)|var|int8
var_1185 = relay.var("var_1185", dtype = "int8", shape = (14, 3))#candidate|1185|(14, 3)|var|int8
bop_1186 = relay.bitwise_and(var_1184.astype('int8'), relay.reshape(var_1185.astype('int8'), relay.shape_of(var_1184))) # shape=(14, 3)
var_1191 = relay.var("var_1191", dtype = "int8", shape = (14, 3))#candidate|1191|(14, 3)|var|int8
bop_1192 = relay.logical_and(bop_1186.astype('bool'), relay.reshape(var_1191.astype('bool'), relay.shape_of(bop_1186))) # shape=(14, 3)
const_1200 = relay.const([[-1,-4,-9],[-3,8,-5],[8,-8,3],[4,4,4],[9,-1,-5],[3,-5,6],[-1,8,-7],[-4,6,9],[2,9,-3],[-9,-10,-3],[9,2,3],[9,9,3],[2,-10,1],[-8,-3,1]], dtype = "int8")#candidate|1200|(14, 3)|const|int8
bop_1201 = relay.power(var_1191.astype('float64'), relay.reshape(const_1200.astype('float64'), relay.shape_of(var_1191))) # shape=(14, 3)
uop_1204 = relay.log2(const_1200.astype('float32')) # shape=(14, 3)
uop_1208 = relay.acosh(uop_1204.astype('float32')) # shape=(14, 3)
output = relay.Tuple([bop_1192,bop_1201,uop_1208,])
output2 = relay.Tuple([bop_1192,bop_1201,uop_1208,])
func_1213 = relay.Function([var_1184,var_1185,var_1191,], output)
mod['func_1213'] = func_1213
mod = relay.transform.InferType()(mod)
var_1214 = relay.var("var_1214", dtype = "int8", shape = (14, 3))#candidate|1214|(14, 3)|var|int8
var_1215 = relay.var("var_1215", dtype = "int8", shape = (14, 3))#candidate|1215|(14, 3)|var|int8
var_1216 = relay.var("var_1216", dtype = "int8", shape = (14, 3))#candidate|1216|(14, 3)|var|int8
output = func_1213(var_1214,var_1215,var_1216,)
func_1217 = relay.Function([var_1214,var_1215,var_1216,], output)
mutated_mod['func_1217'] = func_1217
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1232 = relay.var("var_1232", dtype = "float32", shape = (10, 14))#candidate|1232|(10, 14)|var|float32
var_1233 = relay.var("var_1233", dtype = "float32", shape = (10, 14))#candidate|1233|(10, 14)|var|float32
bop_1234 = relay.power(var_1232.astype('float32'), relay.reshape(var_1233.astype('float32'), relay.shape_of(var_1232))) # shape=(10, 14)
bop_1239 = relay.power(var_1232.astype('float64'), relay.reshape(bop_1234.astype('float64'), relay.shape_of(var_1232))) # shape=(10, 14)
uop_1248 = relay.sin(bop_1234.astype('float32')) # shape=(10, 14)
bop_1252 = relay.less(uop_1248.astype('bool'), relay.reshape(bop_1234.astype('bool'), relay.shape_of(uop_1248))) # shape=(10, 14)
bop_1255 = relay.equal(bop_1252.astype('bool'), relay.reshape(bop_1234.astype('bool'), relay.shape_of(bop_1252))) # shape=(10, 14)
bop_1258 = relay.bitwise_xor(bop_1252.astype('int16'), relay.reshape(bop_1239.astype('int16'), relay.shape_of(bop_1252))) # shape=(10, 14)
bop_1264 = relay.multiply(bop_1239.astype('int8'), relay.reshape(bop_1252.astype('int8'), relay.shape_of(bop_1239))) # shape=(10, 14)
func_1175_call = mod.get_global_var('func_1175')
func_1179_call = mutated_mod.get_global_var('func_1179')
const_1270 = relay.const([-0.806853,-6.211077,-5.350326,5.895805,-0.225192,-0.599605,-8.438608,-0.918574,3.797177,-7.036956,8.097462,2.232531,-6.511625,-0.777438,7.284058,-5.810799,-4.450377,6.717330,8.645546,-0.878983,5.214534,2.557236,3.654730,-1.432604,6.653286,-3.581214,-5.801668,2.130159,6.089107,-8.154310,-0.657573,-2.160476,-7.669491,2.385119,-8.332330,3.358818,-0.603793,3.507911,-5.616024,-2.545327,6.252197,0.729252,9.775291,-6.031258,-7.743392,2.411005,9.632449,9.404258,7.775214,6.213188,0.893191,-7.926824,3.730937,2.287613,3.073758,-6.647251,1.608699,-0.526138,-0.420766,7.579023,7.648528,1.504301,-0.276003,-5.913457,2.461245,1.426758,-8.102858,-9.439075,0.879452,-8.058815,3.390116,2.820041,-1.201593,1.460498,5.948994,0.601949,3.367327,2.977573,-7.802248,-3.155939,-0.438278,-1.613706,9.857661,-2.743584,-7.022885,7.769460,0.990224,-3.637676,-5.720769,-2.292765,-8.852002,-1.589320,-7.470928,3.919328,-8.273255,-9.391792,5.827607,6.790720,0.377585,-0.406585,-8.031016,-5.024509,-7.142270,0.940684,-3.723540,-1.788729,-3.285072,7.247998,8.588865,1.618149,-9.453883,-3.540934,-7.976087,-3.940777,6.235985,5.424516,-1.427400], dtype = "float64")#candidate|1270|(117,)|const|float64
call_1269 = relay.TupleGetItem(func_1175_call(relay.reshape(const_1270.astype('float64'), [13, 9]), relay.reshape(const_1270.astype('float32'), [13, 9]), ), 0)
call_1271 = relay.TupleGetItem(func_1179_call(relay.reshape(const_1270.astype('float64'), [13, 9]), relay.reshape(const_1270.astype('float32'), [13, 9]), ), 0)
bop_1275 = relay.mod(bop_1258.astype('float32'), relay.reshape(bop_1252.astype('float32'), relay.shape_of(bop_1258))) # shape=(10, 14)
uop_1279 = relay.asin(uop_1248.astype('float32')) # shape=(10, 14)
bop_1288 = relay.bitwise_and(uop_1279.astype('uint64'), relay.reshape(bop_1258.astype('uint64'), relay.shape_of(uop_1279))) # shape=(10, 14)
output = relay.Tuple([bop_1255,bop_1264,call_1269,const_1270,bop_1275,bop_1288,])
output2 = relay.Tuple([bop_1255,bop_1264,call_1271,const_1270,bop_1275,bop_1288,])
F = relay.Function([var_1232,var_1233,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1232,var_1233,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1232= np.array([[-0.922287,-6.466976,6.784181,2.813234,6.369199,-3.451658,-2.935500,-0.730584,8.544946,9.352245,3.836474,2.898806,2.537600,8.735921],[-1.872359,-4.670182,3.131383,5.167256,6.141871,4.411525,9.182574,4.880758,-4.444039,-2.700901,-9.517176,-3.575161,5.475797,2.519129],[-6.004406,7.381225,-6.123608,5.968817,-6.719971,0.648211,2.988309,-6.972117,-9.495388,5.617528,9.790316,7.038295,2.124917,9.598870],[7.272263,-7.031677,6.399345,-9.676238,8.308652,7.560425,-1.710143,5.137484,8.552714,3.695601,1.271722,-3.856138,-5.655547,-0.375434],[-3.111627,-7.378594,0.459222,3.387125,-6.679454,-6.370408,-1.505210,0.139148,-8.283770,-3.499009,0.857283,-1.789867,-3.438711,9.510362],[-5.466981,4.743300,-3.849825,-6.751734,-4.462244,-9.284180,-1.994972,-9.130515,0.183406,1.564817,-4.415866,4.865735,1.998997,-8.640275],[3.880413,0.801965,-6.686517,-5.742393,-1.360813,-3.123923,-8.216187,-7.278153,9.335460,3.277326,-3.952874,6.579205,0.337425,-7.576641],[-0.109037,-2.714047,5.792273,0.710376,-0.409757,-0.344574,-6.333495,0.204802,4.862309,3.461214,-6.354979,2.131336,-8.679752,6.965794],[-8.025847,-6.184508,7.988362,-5.918872,-1.637912,-1.108104,2.343225,-1.540846,7.739011,-5.463033,3.580050,1.701229,9.931540,-9.075599],[6.618546,3.228837,-2.361680,-9.018557,-2.282975,-7.608200,-8.833361,-5.680214,5.407561,-6.323729,-6.071996,6.691888,-4.105430,-4.029946]], dtype='float32')
module1.set_input('var_1232', input_1232)
input_1233= np.array([[-7.673148,5.395091,-5.117554,2.562095,0.726463,-9.209691,-9.684153,-1.517342,9.695138,-1.178394,6.323243,7.315249,9.621482,5.816755],[-8.242608,3.302765,4.503664,-4.768150,2.753192,-6.572482,-3.838833,6.291429,7.027089,4.833892,-0.895586,9.528574,-1.126238,6.147258],[5.935374,-4.191448,-3.647631,-4.831185,-3.518550,-9.722458,-2.105933,-1.763683,8.520154,3.795439,-3.426475,-9.631577,-0.325487,-8.299560],[-1.357843,8.970211,8.415064,7.304494,9.240894,5.730076,6.775615,-1.432297,-8.972099,-2.961600,-5.789657,-9.049654,-1.477576,3.899672],[-7.922740,-2.334395,4.590615,-9.018719,8.731873,9.082625,-4.948945,-9.739590,-1.567038,7.345027,-8.172140,-3.794778,-9.352699,9.840245],[5.303907,5.059851,-2.193255,4.993523,8.610906,-1.545453,8.067663,-2.470190,-3.767762,4.330586,8.901979,9.588840,-4.118156,-6.510157],[-8.124551,-2.082834,-9.968443,9.480173,4.462331,-5.768738,3.499737,2.047248,-0.762117,-6.240084,-9.942041,5.550150,-9.015852,2.462956],[1.024180,3.437313,5.370500,2.453010,-2.398975,4.940856,5.176775,-8.910951,-8.077121,-5.028893,3.689709,-3.558049,-1.291470,3.683088],[-9.247006,-1.701932,-1.505193,-9.189182,6.977596,0.368504,-2.904567,8.642937,7.532860,-4.419353,1.269820,-8.778531,9.350425,-7.762033],[2.339879,9.713560,0.269820,8.765366,1.037029,4.153617,8.266537,-9.538584,7.680149,-8.492328,-2.738504,8.168286,3.701751,-9.350817]], dtype='float32')
module1.set_input('var_1233', input_1233)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1232, input_1233, )
res3 = intrp3.evaluate()(input_1232, input_1233, )
res4 = intrp4.evaluate()(input_1232, input_1233, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
module5.set_input('var_1232', input_1232)
module5.set_input('var_1233', input_1233)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1232, input_1233, )
res7 = intrp7.evaluate()(input_1232, input_1233, )
res8 = intrp8.evaluate()(input_1232, input_1233, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
module9.set_input('var_1232', input_1232)
module9.set_input('var_1233', input_1233)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1232, input_1233, )
res11 = intrp11.evaluate()(input_1232, input_1233, )
res12 = intrp12.evaluate()(input_1232, input_1233, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
module13.set_input('var_1232', input_1232)
module13.set_input('var_1233', input_1233)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1232, input_1233, )
res15 = intrp15.evaluate()(input_1232, input_1233, )
res16 = intrp16.evaluate()(input_1232, input_1233, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
module17.set_input('var_1232', input_1232)
module17.set_input('var_1233', input_1233)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1232, input_1233, )
res19 = intrp19.evaluate()(input_1232, input_1233, )
res20 = intrp20.evaluate()(input_1232, input_1233, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
module21.set_input('var_1232', input_1232)
module21.set_input('var_1233', input_1233)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1232, input_1233, )
res23 = intrp23.evaluate()(input_1232, input_1233, )
res24 = intrp24.evaluate()(input_1232, input_1233, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()

'''6: TVMFuncCall
5: _ZNSt17_Function_handlerIFvN3tvm7runtime7
4: tvm::runtime::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const [clone .isra.808]
3: tvm::runtime::GraphExecutorCreate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module const&, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
2: tvm::runtime::GraphExecutor::Init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
1: tvm::runtime::GraphExecutor::SetupOpExecs()
0: tvm::runtime::GraphExecutor::CreateTVMOp(tvm::runtime::TVMOpParam const&, std::vector<DLTensor, std::allocator<DLTensor> > const&)

'''