import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (10, 1, 6))#candidate|0|(10, 1, 6)|var|float64
uop_1 = relay.sigmoid(var_0.astype('float64')) # shape=(10, 1, 6)
bop_3 = relay.bitwise_xor(var_0.astype('int64'), relay.reshape(uop_1.astype('int64'), relay.shape_of(var_0))) # shape=(10, 1, 6)
bop_6 = relay.left_shift(uop_1.astype('uint64'), relay.reshape(bop_3.astype('uint64'), relay.shape_of(uop_1))) # shape=(10, 1, 6)
bop_9 = relay.add(bop_3.astype('int32'), relay.reshape(var_0.astype('int32'), relay.shape_of(bop_3))) # shape=(10, 1, 6)
bop_12 = relay.bitwise_or(bop_9.astype('uint16'), relay.reshape(var_0.astype('uint16'), relay.shape_of(bop_9))) # shape=(10, 1, 6)
uop_15 = relay.sinh(bop_9.astype('float32')) # shape=(10, 1, 6)
const_17 = relay.const([[[0.822250,-0.161408,-1.603265,-9.059457,-6.508860,8.177238],[1.090764,-8.806540,0.311808,9.238456,-3.629958,-4.492653],[-2.184598,7.452294,8.319342,-9.724123,-9.903353,-5.580727],[-4.910441,-1.451229,0.946220,-3.854373,9.133439,0.420047],[-1.018236,8.431396,-7.501837,7.618679,8.921976,8.294250],[9.226815,6.172652,-2.981488,-7.590388,5.843043,-0.817626],[1.852627,8.127590,8.527533,8.655172,4.698968,-7.136440],[2.478683,5.774752,-1.500347,3.635662,-4.533352,4.652749]],[[-1.905698,6.536223,-5.252655,5.456739,3.887532,0.644536],[5.288054,-2.238880,2.469723,-4.958473,-8.061518,1.035162],[3.913429,-1.837393,-6.677069,-5.115799,-1.766295,-7.847373],[6.427022,-6.753341,-7.258781,8.953158,-1.064782,8.118633],[-9.485446,-0.645577,2.796116,2.049754,7.693648,-3.130127],[-4.281919,-1.708148,-4.428020,8.459296,-3.176390,-9.319422],[2.180981,-0.602401,0.058337,1.078790,-2.848039,-2.872543],[-6.908513,-2.374726,-4.677985,6.308448,4.394607,4.254978]],[[-5.792558,-1.894327,-9.096707,3.020696,-0.077290,1.256728],[4.430803,-4.532543,4.985939,5.515037,-2.918353,4.366674],[-4.302600,4.302180,-2.465025,-9.915106,-6.519325,-2.090118],[8.924371,-7.615140,6.645291,-0.605027,5.163929,-7.804676],[4.198712,-7.245228,1.727422,-6.886324,-3.373757,-5.083888],[-7.008926,1.017175,3.321932,3.687445,6.669267,-9.928271],[-3.956472,-7.597242,7.186713,-2.070600,-2.042303,6.049002],[-6.604760,-1.102254,9.933838,8.464556,2.398481,-0.732676]],[[-1.587230,8.418289,-3.829879,4.794779,-8.003598,-7.412798],[-7.789383,7.801442,0.937653,2.589620,-3.336667,-3.982332],[-3.872174,-5.918694,-9.797438,-3.545217,-1.306273,-3.299703],[0.139641,5.405919,7.202594,-5.044169,-6.547390,2.668671],[-9.199909,2.535367,-8.980677,-0.162751,-9.310911,-1.297424],[-8.205380,7.801627,-4.604970,6.712496,9.826256,-6.802949],[-9.813461,1.693977,-4.496997,-5.835317,9.147354,3.660348],[5.689614,-1.109210,-0.209448,-2.020115,4.501602,-8.001899]],[[0.166529,6.575391,-0.696784,-8.990981,-3.232174,-4.457815],[-1.940599,0.532028,-0.175918,1.462994,6.311936,1.250950],[-2.655783,-9.101664,-4.529721,5.740774,-7.231875,-3.240318],[-7.838790,8.101366,-8.509428,5.037028,-9.169710,-2.478922],[-4.841974,-4.867282,8.232542,0.494708,8.992984,8.828448],[-2.016302,3.543258,-9.088700,-3.576945,-1.944007,8.925839],[4.414910,5.425936,-1.061664,-2.084269,8.042637,-3.509907],[2.094736,-4.074156,8.397927,-1.915756,0.757317,-0.586595]],[[9.474792,-8.499993,-0.729551,6.924224,6.538751,0.897125],[-4.352748,-0.354110,-8.727448,6.712908,-2.093903,-7.047644],[9.536168,-1.712090,-5.899257,-1.985526,4.280752,-2.883643],[9.831398,4.156587,-1.073163,-9.139552,-6.054163,3.426518],[1.338803,-6.138215,-8.505730,5.662719,9.646276,-8.445792],[-8.196416,-9.671036,-2.990525,3.853297,-9.600187,-0.650883],[5.368793,2.467943,7.322426,-9.904366,5.352778,-8.927658],[2.394756,-1.559227,8.270682,-7.723982,9.350241,8.821068]],[[2.858318,0.446508,9.485558,2.942146,-3.400843,8.932625],[0.403369,-2.281822,-5.910481,-6.314415,-0.521313,4.950898],[-1.240369,1.633934,-2.618603,9.140615,0.718783,0.860083],[-1.990510,8.989526,9.201289,-3.683189,-3.768001,-4.568260],[5.039327,-4.973410,6.906946,-5.551348,-0.779477,3.479724],[-2.468458,-7.847006,-7.064730,9.413151,-0.704093,9.532109],[9.807104,-7.430785,4.509431,-8.422373,-8.040963,-3.076917],[-6.355836,6.099410,7.055178,0.744556,8.352001,7.748053]],[[6.543955,-4.040635,-5.976156,-2.553669,1.689137,4.523799],[7.778922,9.494190,1.906585,9.044876,-2.139517,-2.393016],[1.503584,-6.379456,0.523420,-5.176398,-7.607361,4.822839],[5.646525,-3.402503,-4.190438,9.452825,2.511592,9.069744],[-0.274666,9.548801,5.762527,-8.588252,4.340556,6.176734],[4.479353,-0.957299,-1.816603,-8.887912,9.105365,-9.396060],[-0.304180,3.322116,6.631866,-9.279140,8.622376,-3.053509],[2.907709,4.278678,1.450250,-8.271991,8.212625,-7.306040]],[[-3.302816,0.382844,3.539380,2.037832,5.370857,-2.164048],[-6.759802,-6.732630,-5.369083,-1.552377,-5.472513,-2.467256],[9.325639,-0.819204,7.630408,-5.931017,4.283508,1.156313],[-6.665589,-8.653247,8.531856,-7.985394,-6.730873,4.078802],[1.578085,-1.802211,-7.223220,-4.937137,6.806263,-4.413490],[0.581401,-5.589955,-7.230522,-0.044387,7.334783,-2.033746],[7.507600,-1.527652,6.627294,-8.790145,1.212023,-6.636324],[2.811417,9.557731,1.357030,-9.804141,9.787333,5.669203]],[[-4.556720,-2.117113,7.926360,3.962383,6.332862,-4.003192],[7.374444,5.023343,7.182741,-4.483752,-6.513405,-2.833766],[4.166896,7.502465,3.985537,-8.882541,-8.788891,6.836236],[1.105927,-3.737676,-0.675587,-1.530914,9.732708,4.293076],[5.979224,6.914070,3.912401,-8.690993,-4.890534,9.510068],[-0.981669,-2.885975,-9.936886,-9.910325,-4.529911,-7.660836],[8.122545,-1.283509,1.476024,-8.942866,-5.449628,-3.792471],[5.608564,-2.035277,-4.942584,3.000624,-4.151521,6.703739]]], dtype = "float32")#candidate|17|(10, 8, 6)|const|float32
bop_18 = relay.multiply(uop_15.astype('uint8'), const_17.astype('uint8')) # shape=(10, 8, 6)
bop_21 = relay.logical_or(var_0.astype('bool'), relay.reshape(bop_3.astype('bool'), relay.shape_of(var_0))) # shape=(10, 1, 6)
var_24 = relay.var("var_24", dtype = "float64", shape = (10, 12, 6))#candidate|24|(10, 12, 6)|var|float64
bop_25 = relay.multiply(var_0.astype('int8'), var_24.astype('int8')) # shape=(10, 12, 6)
output = relay.Tuple([bop_6,bop_12,bop_18,bop_21,bop_25,])
output2 = relay.Tuple([bop_6,bop_12,bop_18,bop_21,bop_25,])
func_28 = relay.Function([var_0,var_24,], output)
mod['func_28'] = func_28
mod = relay.transform.InferType()(mod)
var_29 = relay.var("var_29", dtype = "float64", shape = (10, 1, 6))#candidate|29|(10, 1, 6)|var|float64
var_30 = relay.var("var_30", dtype = "float64", shape = (10, 12, 6))#candidate|30|(10, 12, 6)|var|float64
output = func_28(var_29,var_30,)
func_31 = relay.Function([var_29,var_30,], output)
mutated_mod['func_31'] = func_31
mutated_mod = relay.transform.InferType()(mutated_mod)
var_33 = relay.var("var_33", dtype = "float32", shape = ())#candidate|33|()|var|float32
const_34 = relay.const([[[7.122974,-9.894347,-7.636844,-4.792017,1.468763]],[[6.391422,2.711027,2.528233,-6.753244,4.512638]],[[2.456365,-4.540951,-5.836847,-9.879975,-3.940734]],[[5.569244,-5.584745,2.958513,-2.638471,-7.225970]],[[-8.793956,8.565216,2.211556,3.621652,-2.272156]],[[-9.527736,-8.981663,-8.386987,6.367579,-8.767584]],[[-4.489579,4.292752,-7.896329,-8.978761,-8.777485]],[[-4.681785,-7.557871,-4.676488,-8.588452,7.269335]],[[6.209337,3.699904,-0.397807,-7.021903,-0.882109]]], dtype = "float32")#candidate|34|(9, 1, 5)|const|float32
bop_35 = relay.divide(var_33.astype('float32'), const_34.astype('float32')) # shape=(9, 1, 5)
bop_38 = relay.maximum(var_33.astype('uint64'), const_34.astype('uint64')) # shape=(9, 1, 5)
bop_41 = relay.minimum(const_34.astype('int16'), relay.reshape(bop_38.astype('int16'), relay.shape_of(const_34))) # shape=(9, 1, 5)
uop_44 = relay.acos(var_33.astype('float32')) # shape=()
bop_46 = relay.divide(uop_44.astype('float32'), bop_35.astype('float32')) # shape=(9, 1, 5)
func_28_call = mod.get_global_var('func_28')
func_31_call = mutated_mod.get_global_var('func_31')
var_50 = relay.var("var_50", dtype = "float64", shape = (60,))#candidate|50|(60,)|var|float64
var_51 = relay.var("var_51", dtype = "float64", shape = (720,))#candidate|51|(720,)|var|float64
call_49 = relay.TupleGetItem(func_28_call(relay.reshape(var_50.astype('float64'), [10, 1, 6]), relay.reshape(var_51.astype('float64'), [10, 12, 6]), ), 0)
call_52 = relay.TupleGetItem(func_31_call(relay.reshape(var_50.astype('float64'), [10, 1, 6]), relay.reshape(var_51.astype('float64'), [10, 12, 6]), ), 0)
uop_53 = relay.acosh(var_33.astype('float32')) # shape=()
func_28_call = mod.get_global_var('func_28')
func_31_call = mutated_mod.get_global_var('func_31')
call_55 = relay.TupleGetItem(func_28_call(relay.reshape(var_50.astype('float64'), [10, 1, 6]), relay.reshape(var_51.astype('float64'), [10, 12, 6]), ), 0)
call_56 = relay.TupleGetItem(func_31_call(relay.reshape(var_50.astype('float64'), [10, 1, 6]), relay.reshape(var_51.astype('float64'), [10, 12, 6]), ), 0)
output = relay.Tuple([bop_41,bop_46,call_49,var_50,var_51,uop_53,call_55,])
output2 = relay.Tuple([bop_41,bop_46,call_52,var_50,var_51,uop_53,call_56,])
func_57 = relay.Function([var_33,var_50,var_51,], output)
mod['func_57'] = func_57
mod = relay.transform.InferType()(mod)
mutated_mod['func_57'] = func_57
mutated_mod = relay.transform.InferType()(mutated_mod)
func_57_call = mutated_mod.get_global_var('func_57')
var_59 = relay.var("var_59", dtype = "float32", shape = ())#candidate|59|()|var|float32
var_60 = relay.var("var_60", dtype = "float64", shape = (60,))#candidate|60|(60,)|var|float64
var_61 = relay.var("var_61", dtype = "float64", shape = (720,))#candidate|61|(720,)|var|float64
call_58 = func_57_call(var_59,var_60,var_61,)
output = call_58
func_62 = relay.Function([var_59,var_60,var_61,], output)
mutated_mod['func_62'] = func_62
mutated_mod = relay.transform.InferType()(mutated_mod)
var_64 = relay.var("var_64", dtype = "float64", shape = (8, 4, 2))#candidate|64|(8, 4, 2)|var|float64
uop_65 = relay.cos(var_64.astype('float64')) # shape=(8, 4, 2)
var_67 = relay.var("var_67", dtype = "float64", shape = (8, 4, 2))#candidate|67|(8, 4, 2)|var|float64
bop_68 = relay.logical_or(uop_65.astype('bool'), relay.reshape(var_67.astype('bool'), relay.shape_of(uop_65))) # shape=(8, 4, 2)
var_71 = relay.var("var_71", dtype = "float64", shape = (8, 4, 2))#candidate|71|(8, 4, 2)|var|float64
bop_72 = relay.add(uop_65.astype('int16'), relay.reshape(var_71.astype('int16'), relay.shape_of(uop_65))) # shape=(8, 4, 2)
func_57_call = mod.get_global_var('func_57')
func_62_call = mutated_mod.get_global_var('func_62')
var_76 = relay.var("var_76", dtype = "float32", shape = ())#candidate|76|()|var|float32
var_77 = relay.var("var_77", dtype = "float64", shape = (60,))#candidate|77|(60,)|var|float64
const_78 = relay.const([-3.637217,6.855276,-5.024150,-0.724352,-1.660883,4.456128,8.119010,3.942389,-8.092279,-8.741759,9.554842,1.385891,7.631231,-5.337679,-3.538153,7.959867,8.931385,-5.639149,-5.340954,7.829264,-7.139682,9.941554,5.292948,8.247268,-9.317565,-3.987390,-0.656289,3.051366,-3.233403,-3.404390,7.513543,3.663719,-4.438414,7.149414,7.585884,7.639978,8.898700,7.278127,2.098382,-8.997069,1.652677,7.473087,8.517204,2.983058,2.214380,-2.593346,4.578622,6.356475,9.653421,-5.408601,0.146496,-8.555200,-2.462248,5.947828,-0.484524,7.313835,4.949904,-3.541846,9.340723,-0.521289,4.548256,4.094615,3.374170,0.491905,8.006532,3.530999,7.921292,-4.359324,0.713511,-3.830999,6.177936,2.833553,-2.697819,7.338562,3.011613,-2.334403,-8.310436,2.647078,-6.552932,0.153128,-0.765333,-5.385198,-4.073597,2.308240,6.322240,-9.615205,8.635006,0.826494,2.924945,4.139353,-2.628434,2.607723,-9.954416,-0.064434,7.662030,-9.941231,-1.604610,-1.635621,9.039766,6.351175,3.737216,-4.638725,6.449996,-2.633943,-9.435259,-3.466809,-4.760326,-5.521754,-5.770905,2.850603,-1.508022,-4.482439,7.643187,5.401248,-8.714980,0.388596,-3.624929,8.255204,3.485712,-2.303411,6.829950,-7.532867,7.475701,-7.194094,-1.835566,8.447048,-8.528780,3.320431,-1.236626,-2.548046,1.019791,-7.035977,2.088259,-2.488154,-8.944057,3.047652,7.496237,5.125928,-1.263959,-2.289472,5.710343,3.060968,0.887639,9.567150,1.089683,6.820137,7.070592,8.374470,2.665533,5.476897,-1.460345,5.232332,1.394185,-5.021510,4.065810,-6.616180,9.890468,-5.910685,-5.238290,-1.909036,9.167040,3.514076,-8.082719,-3.675474,-9.624247,6.832642,-6.263497,-8.244083,9.620377,7.005607,8.534297,9.446981,7.960277,-4.003444,-6.368741,4.492187,-3.565865,-6.713514,1.402426,-5.303449,3.040822,7.983196,-6.428982,0.067326,-3.786374,-3.921121,-5.457833,-5.922061,1.473259,0.205610,-8.501570,-5.651743,2.345434,7.819212,4.198235,-5.026249,1.828845,-0.869904,2.198094,3.602320,-1.222762,-0.737428,8.518924,-8.411532,7.991609,-4.782278,-4.460225,-9.650709,-8.384209,5.496212,1.035922,-5.991911,1.228934,-1.984198,-2.850028,-4.951058,-5.889453,3.436389,-8.955935,-7.798319,1.076885,5.060242,6.109925,-8.454769,7.887204,6.772997,2.871185,9.985341,-9.306133,-3.617334,1.860824,4.997640,5.415936,7.490575,-7.864898,5.233622,4.169738,-7.885432,-2.474651,-6.845078,-6.210436,-8.864945,2.244071,-5.812547,7.259681,-6.857652,5.975356,-5.666649,-5.179421,-4.984172,-1.381753,-8.414430,-0.647608,-0.137262,9.974753,-4.759100,0.340815,-0.507934,-0.442713,-3.905498,3.474743,-1.749078,0.869065,9.891149,4.450073,-8.187740,6.573236,3.616655,7.055280,-8.043915,-2.011868,-4.952169,3.474240,-0.679352,3.617649,1.372406,9.887177,-4.454783,1.699814,-2.141166,0.369812,-5.443758,1.992703,5.806088,6.185493,-4.665879,-7.777476,6.062520,6.626986,-4.366208,7.609078,9.536811,5.706258,5.246147,1.335240,6.143830,-5.563194,6.912162,7.434348,4.562860,-0.660595,-9.774834,-7.146545,-8.212597,8.356192,5.090699,-5.108296,2.909924,-4.323401,-5.163701,-1.506114,-0.375207,1.693942,7.112494,-4.779853,-1.517785,-1.355266,-4.600724,-6.320340,-7.963316,1.378277,-9.037154,-8.408814,4.147495,-2.925556,-0.450749,-2.765561,-2.725972,-2.871355,-7.922480,-0.730536,1.252894,-0.344643,1.202276,-6.535733,-6.805928,5.791221,8.554383,4.313684,-4.093268,3.901175,-8.340650,-6.668422,1.645351,-3.513034,8.854571,-5.277004,0.781542,-9.488158,-8.038376,-9.889509,-1.713152,4.706947,8.597077,5.735805,3.308128,-9.186628,-8.054056,-6.232592,4.176767,4.172354,8.223154,9.761187,-3.339488,1.862509,-6.901056,-3.035098,-0.617469,3.258890,-2.524023,6.937262,2.876761,9.592403,-1.465630,1.365374,7.429474,5.411749,3.282371,9.517464,-6.804643,-5.575737,7.283601,-3.301009,-0.246532,7.290283,-1.300034,-2.011656,1.761610,2.687222,2.191535,5.083268,4.147907,3.347316,-9.137850,8.014547,-2.876991,5.756144,-5.595352,7.762579,1.087688,8.471107,0.386143,2.498129,3.152146,1.739825,-0.842368,5.819767,8.777171,-9.394385,-2.737789,-8.186652,9.708115,-5.362780,1.680110,-3.395992,-6.265138,-7.629534,-1.464892,-5.848517,-1.343300,-0.724125,3.384748,2.502302,5.816020,-4.685528,9.688604,-1.235030,-6.569928,-9.208821,-3.357416,1.636578,-7.958093,-4.440172,5.015091,-7.050412,-8.260029,-0.169168,1.431829,-1.224875,7.335277,-7.912416,-0.855130,1.950521,6.127292,-6.245234,2.638339,-9.272052,-3.811481,-7.556154,-8.600707,5.066833,0.170674,-8.467104,6.809127,5.770071,5.887586,0.823611,-0.905419,-7.621933,-5.091508,9.448146,-6.133322,4.305197,8.380334,4.828860,5.484943,-5.993488,-4.758264,5.960747,-9.138200,6.734445,-9.575724,7.763250,3.467589,-9.593707,-6.720371,3.897538,6.152019,0.178117,-2.237500,-6.382040,-5.675998,8.836641,8.910872,-5.416498,6.171747,4.123875,6.218801,1.558771,9.313693,-8.417916,5.577943,-4.580474,3.402082,1.776541,-3.518978,9.607983,3.599483,-6.622476,9.739892,-4.979505,-1.564786,-3.658182,-4.413404,-6.475695,2.572218,1.291402,6.091274,7.633452,-6.919672,-0.499773,6.712636,6.655032,-5.571729,6.910709,-5.161772,1.221343,-7.575320,-3.951784,9.328463,-5.226168,-1.759320,2.401682,9.711816,-7.051329,-8.946361,9.892288,-2.608008,-1.834854,-0.690170,-0.092609,4.899629,1.592714,9.340177,-0.023126,-0.048081,9.966530,-1.293179,-5.921919,0.855321,8.148524,-6.822935,3.563774,3.887046,2.607270,-5.034172,2.748953,5.934907,9.062660,-7.307570,2.092775,-3.535556,7.080016,-4.241033,-4.356416,-1.330023,6.002696,-0.219608,3.257426,-0.992940,8.702776,-2.553060,-8.423315,3.784584,-8.592650,1.616034,9.083985,-9.512054,-8.859551,-7.759959,3.719965,2.395139,7.771216,5.226127,9.250968,-2.787583,-6.202946,4.324112,-0.264382,-1.046680,2.327915,3.480754,5.775360,5.007821,-1.826064,2.251818,4.967582,-7.480189,-6.337541,2.945633,1.324436,5.940974,8.659287,-0.396618,6.579818,-9.417087,-7.713438,9.546489,-8.370135,0.149739,7.235399,-1.046054,8.079642,8.865616,-8.295226,-9.654797,-5.919740,-6.941267,-1.719607,-4.473575,6.563745,-3.731608,-3.089866,-7.178482,3.720216,0.811470,-0.518017,1.442589,-1.268453,5.466880,9.343036,-5.538651,0.198735,3.914161,9.042338,-9.349956,8.217687,-0.371212,-7.995220,-5.609220,-2.489652,-3.275057,4.309554,7.387755,8.255922,-9.541404,-3.272399,-3.942973,2.568333,8.440658,3.841807,-9.832162,3.996115,-6.905955,5.662810,8.407508,-6.967771,-6.488648,2.205206,3.147198,-1.461080,0.565037,-1.956402,4.380494,-6.495608,-5.791288,-4.749863,-6.563088,3.932504,5.376738,7.324932,1.046269,3.872169,2.694844,9.237942,2.042303,-6.002051,-4.280553,-5.941772,7.862100,-7.553710,4.343130,-1.416658,-1.861708,-1.973811,-8.191363,-9.467608,-7.956564,0.787606,-1.012254,-6.838880,-7.213491,7.270463,-4.837950,-9.828305,-6.740451,0.403332,8.182458,7.106222,-0.096425,-1.872309,3.933285,-0.840477,-6.789136,2.122571,-1.250799,-3.238203,-1.804447,8.771001,2.005253,-2.921744,-7.888685,4.590411,6.508405,-4.192074,5.813549,-4.360762,7.302706,-2.505109,-9.439987,7.222657,7.299252,-5.601408,6.944959,-8.787851,5.382793,-5.431016,4.021141,-9.262678,-3.968096], dtype = "float64")#candidate|78|(720,)|const|float64
call_75 = relay.TupleGetItem(func_57_call(relay.reshape(var_76.astype('float32'), []), relay.reshape(var_77.astype('float64'), [60,]), relay.reshape(const_78.astype('float64'), [720,]), ), 3)
call_79 = relay.TupleGetItem(func_62_call(relay.reshape(var_76.astype('float32'), []), relay.reshape(var_77.astype('float64'), [60,]), relay.reshape(const_78.astype('float64'), [720,]), ), 3)
uop_80 = relay.erf(uop_65.astype('float64')) # shape=(8, 4, 2)
uop_82 = relay.sigmoid(var_77.astype('float32')) # shape=(60,)
var_84 = relay.var("var_84", dtype = "float32", shape = (60,))#candidate|84|(60,)|var|float32
bop_85 = relay.bitwise_xor(uop_82.astype('int8'), relay.reshape(var_84.astype('int8'), relay.shape_of(uop_82))) # shape=(60,)
bop_88 = relay.logical_xor(var_67.astype('int16'), relay.reshape(uop_65.astype('int16'), relay.shape_of(var_67))) # shape=(8, 4, 2)
var_91 = relay.var("var_91", dtype = "float32", shape = (60,))#candidate|91|(60,)|var|float32
bop_92 = relay.logical_xor(uop_82.astype('int32'), relay.reshape(var_91.astype('int32'), relay.shape_of(uop_82))) # shape=(60,)
func_28_call = mod.get_global_var('func_28')
func_31_call = mutated_mod.get_global_var('func_31')
call_95 = relay.TupleGetItem(func_28_call(relay.reshape(var_91.astype('float64'), [10, 1, 6]), relay.reshape(const_78.astype('float64'), [10, 12, 6]), ), 3)
call_96 = relay.TupleGetItem(func_31_call(relay.reshape(var_91.astype('float64'), [10, 1, 6]), relay.reshape(const_78.astype('float64'), [10, 12, 6]), ), 3)
uop_97 = relay.rsqrt(uop_65.astype('float64')) # shape=(8, 4, 2)
uop_99 = relay.tan(bop_92.astype('float64')) # shape=(60,)
var_101 = relay.var("var_101", dtype = "float64", shape = (8, 4, 2))#candidate|101|(8, 4, 2)|var|float64
bop_102 = relay.bitwise_or(uop_80.astype('uint32'), relay.reshape(var_101.astype('uint32'), relay.shape_of(uop_80))) # shape=(8, 4, 2)
bop_105 = relay.bitwise_or(uop_99.astype('uint64'), relay.reshape(var_77.astype('uint64'), relay.shape_of(uop_99))) # shape=(60,)
uop_108 = relay.exp(bop_105.astype('float64')) # shape=(60,)
bop_110 = relay.less(uop_108.astype('bool'), relay.reshape(bop_92.astype('bool'), relay.shape_of(uop_108))) # shape=(60,)
bop_113 = relay.equal(var_91.astype('bool'), relay.reshape(call_75.astype('bool'), relay.shape_of(var_91))) # shape=(60,)
bop_116 = relay.equal(var_91.astype('bool'), relay.reshape(call_79.astype('bool'), relay.shape_of(var_91))) # shape=(60,)
uop_117 = relay.cosh(uop_99.astype('float32')) # shape=(60,)
bop_119 = relay.equal(uop_117.astype('bool'), relay.reshape(uop_99.astype('bool'), relay.shape_of(uop_117))) # shape=(60,)
bop_122 = relay.subtract(uop_117.astype('uint8'), relay.reshape(bop_113.astype('uint8'), relay.shape_of(uop_117))) # shape=(60,)
bop_125 = relay.subtract(uop_117.astype('uint8'), relay.reshape(bop_116.astype('uint8'), relay.shape_of(uop_117))) # shape=(60,)
uop_126 = relay.sigmoid(uop_117.astype('float32')) # shape=(60,)
bop_128 = relay.power(uop_126.astype('float32'), relay.reshape(uop_117.astype('float32'), relay.shape_of(uop_126))) # shape=(60,)
output = relay.Tuple([bop_68,bop_72,var_76,const_78,bop_85,bop_88,call_95,uop_97,bop_102,bop_110,bop_119,bop_122,bop_128,])
output2 = relay.Tuple([bop_68,bop_72,var_76,const_78,bop_85,bop_88,call_96,uop_97,bop_102,bop_110,bop_119,bop_125,bop_128,])
func_131 = relay.Function([var_64,var_67,var_71,var_76,var_77,var_84,var_91,var_101,], output)
mod['func_131'] = func_131
mod = relay.transform.InferType()(mod)
var_132 = relay.var("var_132", dtype = "float64", shape = (8, 4, 2))#candidate|132|(8, 4, 2)|var|float64
var_133 = relay.var("var_133", dtype = "float64", shape = (8, 4, 2))#candidate|133|(8, 4, 2)|var|float64
var_134 = relay.var("var_134", dtype = "float64", shape = (8, 4, 2))#candidate|134|(8, 4, 2)|var|float64
var_135 = relay.var("var_135", dtype = "float32", shape = ())#candidate|135|()|var|float32
var_136 = relay.var("var_136", dtype = "float64", shape = (60,))#candidate|136|(60,)|var|float64
var_137 = relay.var("var_137", dtype = "float32", shape = (60,))#candidate|137|(60,)|var|float32
var_138 = relay.var("var_138", dtype = "float32", shape = (60,))#candidate|138|(60,)|var|float32
var_139 = relay.var("var_139", dtype = "float64", shape = (8, 4, 2))#candidate|139|(8, 4, 2)|var|float64
output = func_131(var_132,var_133,var_134,var_135,var_136,var_137,var_138,var_139,)
func_140 = relay.Function([var_132,var_133,var_134,var_135,var_136,var_137,var_138,var_139,], output)
mutated_mod['func_140'] = func_140
mutated_mod = relay.transform.InferType()(mutated_mod)
const_142 = relay.const([5.839665,-8.198318,2.318167,5.301123,-9.941637,-5.637184,0.275888,-5.097934,4.571647,3.387484,-4.042102], dtype = "float32")#candidate|142|(11,)|const|float32
uop_143 = relay.tan(const_142.astype('float32')) # shape=(11,)
uop_145 = relay.tan(uop_143.astype('float64')) # shape=(11,)
var_147 = relay.var("var_147", dtype = "float32", shape = (11,))#candidate|147|(11,)|var|float32
bop_148 = relay.add(uop_143.astype('float64'), relay.reshape(var_147.astype('float64'), relay.shape_of(uop_143))) # shape=(11,)
uop_151 = relay.erf(const_142.astype('float64')) # shape=(11,)
bop_153 = relay.power(uop_145.astype('float64'), relay.reshape(const_142.astype('float64'), relay.shape_of(uop_145))) # shape=(11,)
bop_156 = relay.add(bop_153.astype('uint32'), relay.reshape(uop_151.astype('uint32'), relay.shape_of(bop_153))) # shape=(11,)
output = relay.Tuple([bop_148,bop_156,])
output2 = relay.Tuple([bop_148,bop_156,])
func_159 = relay.Function([var_147,], output)
mod['func_159'] = func_159
mod = relay.transform.InferType()(mod)
var_160 = relay.var("var_160", dtype = "float32", shape = (11,))#candidate|160|(11,)|var|float32
output = func_159(var_160)
func_161 = relay.Function([var_160], output)
mutated_mod['func_161'] = func_161
mutated_mod = relay.transform.InferType()(mutated_mod)
var_163 = relay.var("var_163", dtype = "uint64", shape = (14, 15))#candidate|163|(14, 15)|var|uint64
var_164 = relay.var("var_164", dtype = "uint64", shape = (14, 15))#candidate|164|(14, 15)|var|uint64
bop_165 = relay.bitwise_xor(var_163.astype('uint64'), relay.reshape(var_164.astype('uint64'), relay.shape_of(var_163))) # shape=(14, 15)
bop_168 = relay.not_equal(var_163.astype('bool'), relay.reshape(bop_165.astype('bool'), relay.shape_of(var_163))) # shape=(14, 15)
uop_171 = relay.sinh(bop_168.astype('float32')) # shape=(14, 15)
uop_173 = relay.log2(var_164.astype('float64')) # shape=(14, 15)
bop_175 = relay.less_equal(uop_171.astype('bool'), relay.reshape(var_163.astype('bool'), relay.shape_of(uop_171))) # shape=(14, 15)
bop_178 = relay.divide(uop_173.astype('float64'), relay.reshape(var_163.astype('float64'), relay.shape_of(uop_173))) # shape=(14, 15)
uop_181 = relay.acosh(uop_173.astype('float32')) # shape=(14, 15)
uop_183 = relay.sigmoid(bop_168.astype('float64')) # shape=(14, 15)
uop_185 = relay.sinh(uop_181.astype('float64')) # shape=(14, 15)
uop_187 = relay.cosh(uop_185.astype('float32')) # shape=(14, 15)
var_189 = relay.var("var_189", dtype = "float64", shape = (14, 15))#candidate|189|(14, 15)|var|float64
bop_190 = relay.mod(uop_185.astype('float64'), relay.reshape(var_189.astype('float64'), relay.shape_of(uop_185))) # shape=(14, 15)
uop_193 = relay.erf(uop_187.astype('float32')) # shape=(14, 15)
var_195 = relay.var("var_195", dtype = "float32", shape = (14, 15))#candidate|195|(14, 15)|var|float32
bop_196 = relay.logical_and(uop_193.astype('bool'), relay.reshape(var_195.astype('bool'), relay.shape_of(uop_193))) # shape=(14, 15)
func_57_call = mod.get_global_var('func_57')
func_62_call = mutated_mod.get_global_var('func_62')
var_200 = relay.var("var_200", dtype = "float32", shape = ())#candidate|200|()|var|float32
const_201 = relay.const([1.898156,2.781411,-3.133226,-4.245148,8.061823,-9.779680,5.202530,4.021573,-2.755529,0.165652,7.135098,6.784599,5.029784,6.855660,5.066548,-0.736825,-8.529035,3.687465,-3.408238,7.953379,1.448951,-6.716758,-5.422639,4.359825,-3.712187,-4.523754,9.902758,2.148547,-5.220016,5.662972,9.097812,-6.582424,-5.409089,-3.031503,6.121093,-7.922691,8.788420,-8.282064,-5.353726,-1.269712,-2.384040,3.213475,8.948196,-9.164436,0.768681,0.925719,-6.967368,-3.887143,7.788144,4.987260,-1.736779,4.641310,-8.601013,5.476478,-0.632789,-0.809810,2.192551,-4.954857,-6.518304,-6.822039], dtype = "float64")#candidate|201|(60,)|const|float64
var_202 = relay.var("var_202", dtype = "float64", shape = (360, 2))#candidate|202|(360, 2)|var|float64
call_199 = relay.TupleGetItem(func_57_call(relay.reshape(var_200.astype('float32'), []), relay.reshape(const_201.astype('float64'), [60,]), relay.reshape(var_202.astype('float64'), [720,]), ), 2)
call_203 = relay.TupleGetItem(func_62_call(relay.reshape(var_200.astype('float32'), []), relay.reshape(const_201.astype('float64'), [60,]), relay.reshape(var_202.astype('float64'), [720,]), ), 2)
uop_204 = relay.asin(uop_185.astype('float64')) # shape=(14, 15)
bop_206 = relay.greater_equal(uop_187.astype('bool'), relay.reshape(uop_173.astype('bool'), relay.shape_of(uop_187))) # shape=(14, 15)
var_209 = relay.var("var_209", dtype = "bool", shape = (14, 15))#candidate|209|(14, 15)|var|bool
bop_210 = relay.power(bop_206.astype('float64'), relay.reshape(var_209.astype('float64'), relay.shape_of(bop_206))) # shape=(14, 15)
bop_213 = relay.not_equal(bop_190.astype('bool'), relay.reshape(var_195.astype('bool'), relay.shape_of(bop_190))) # shape=(14, 15)
var_216 = relay.var("var_216", dtype = "bool", shape = (14, 15))#candidate|216|(14, 15)|var|bool
bop_217 = relay.greater_equal(bop_196.astype('bool'), relay.reshape(var_216.astype('bool'), relay.shape_of(bop_196))) # shape=(14, 15)
uop_220 = relay.acosh(bop_217.astype('float32')) # shape=(14, 15)
bop_222 = relay.greater(uop_181.astype('bool'), relay.reshape(var_216.astype('bool'), relay.shape_of(uop_181))) # shape=(14, 15)
bop_225 = relay.logical_xor(bop_217.astype('int64'), relay.reshape(uop_204.astype('int64'), relay.shape_of(bop_217))) # shape=(14, 15)
uop_228 = relay.sinh(uop_220.astype('float32')) # shape=(14, 15)
bop_230 = relay.add(uop_228.astype('uint32'), relay.reshape(uop_173.astype('uint32'), relay.shape_of(uop_228))) # shape=(14, 15)
uop_233 = relay.sinh(uop_228.astype('float32')) # shape=(14, 15)
uop_235 = relay.exp(uop_233.astype('float32')) # shape=(14, 15)
uop_237 = relay.cos(uop_233.astype('float64')) # shape=(14, 15)
var_239 = relay.var("var_239", dtype = "float32", shape = (14, 15))#candidate|239|(14, 15)|var|float32
bop_240 = relay.bitwise_and(uop_233.astype('uint16'), relay.reshape(var_239.astype('uint16'), relay.shape_of(uop_233))) # shape=(14, 15)
func_57_call = mod.get_global_var('func_57')
func_62_call = mutated_mod.get_global_var('func_62')
call_243 = relay.TupleGetItem(func_57_call(relay.reshape(var_200.astype('float32'), []), relay.reshape(call_199.astype('float64'), [60,]), relay.reshape(var_202.astype('float64'), [720,]), ), 5)
call_244 = relay.TupleGetItem(func_62_call(relay.reshape(var_200.astype('float32'), []), relay.reshape(call_199.astype('float64'), [60,]), relay.reshape(var_202.astype('float64'), [720,]), ), 5)
bop_245 = relay.logical_and(uop_228.astype('bool'), relay.reshape(var_189.astype('bool'), relay.shape_of(uop_228))) # shape=(14, 15)
output = relay.Tuple([bop_175,bop_178,uop_183,call_199,var_200,const_201,var_202,bop_210,bop_213,bop_222,bop_225,bop_230,uop_235,uop_237,bop_240,call_243,bop_245,])
output2 = relay.Tuple([bop_175,bop_178,uop_183,call_203,var_200,const_201,var_202,bop_210,bop_213,bop_222,bop_225,bop_230,uop_235,uop_237,bop_240,call_244,bop_245,])
func_248 = relay.Function([var_163,var_164,var_189,var_195,var_200,var_202,var_209,var_216,var_239,], output)
mod['func_248'] = func_248
mod = relay.transform.InferType()(mod)
var_249 = relay.var("var_249", dtype = "uint64", shape = (14, 15))#candidate|249|(14, 15)|var|uint64
var_250 = relay.var("var_250", dtype = "uint64", shape = (14, 15))#candidate|250|(14, 15)|var|uint64
var_251 = relay.var("var_251", dtype = "float64", shape = (14, 15))#candidate|251|(14, 15)|var|float64
var_252 = relay.var("var_252", dtype = "float32", shape = (14, 15))#candidate|252|(14, 15)|var|float32
var_253 = relay.var("var_253", dtype = "float32", shape = ())#candidate|253|()|var|float32
var_254 = relay.var("var_254", dtype = "float64", shape = (360, 2))#candidate|254|(360, 2)|var|float64
var_255 = relay.var("var_255", dtype = "bool", shape = (14, 15))#candidate|255|(14, 15)|var|bool
var_256 = relay.var("var_256", dtype = "bool", shape = (14, 15))#candidate|256|(14, 15)|var|bool
var_257 = relay.var("var_257", dtype = "float32", shape = (14, 15))#candidate|257|(14, 15)|var|float32
output = func_248(var_249,var_250,var_251,var_252,var_253,var_254,var_255,var_256,var_257,)
func_258 = relay.Function([var_249,var_250,var_251,var_252,var_253,var_254,var_255,var_256,var_257,], output)
mutated_mod['func_258'] = func_258
mutated_mod = relay.transform.InferType()(mutated_mod)
var_260 = relay.var("var_260", dtype = "int64", shape = (3,))#candidate|260|(3,)|var|int64
var_261 = relay.var("var_261", dtype = "int64", shape = (3,))#candidate|261|(3,)|var|int64
bop_262 = relay.equal(var_260.astype('bool'), relay.reshape(var_261.astype('bool'), relay.shape_of(var_260))) # shape=(3,)
bop_265 = relay.logical_and(bop_262.astype('bool'), relay.reshape(var_260.astype('bool'), relay.shape_of(bop_262))) # shape=(3,)
bop_268 = relay.add(bop_265.astype('int16'), relay.reshape(var_261.astype('int16'), relay.shape_of(bop_265))) # shape=(3,)
bop_271 = relay.floor_divide(bop_265.astype('float64'), relay.reshape(var_260.astype('float64'), relay.shape_of(bop_265))) # shape=(3,)
uop_274 = relay.sinh(bop_262.astype('float32')) # shape=(3,)
var_276 = relay.var("var_276", dtype = "float32", shape = (3,))#candidate|276|(3,)|var|float32
bop_277 = relay.bitwise_or(uop_274.astype('uint16'), relay.reshape(var_276.astype('uint16'), relay.shape_of(uop_274))) # shape=(3,)
bop_280 = relay.logical_or(bop_277.astype('bool'), relay.reshape(var_276.astype('bool'), relay.shape_of(bop_277))) # shape=(3,)
bop_283 = relay.not_equal(bop_277.astype('bool'), relay.reshape(bop_262.astype('bool'), relay.shape_of(bop_277))) # shape=(3,)
var_286 = relay.var("var_286", dtype = "float32", shape = (3,))#candidate|286|(3,)|var|float32
bop_287 = relay.left_shift(uop_274.astype('uint8'), relay.reshape(var_286.astype('uint8'), relay.shape_of(uop_274))) # shape=(3,)
bop_290 = relay.bitwise_and(bop_277.astype('uint16'), relay.reshape(bop_283.astype('uint16'), relay.shape_of(bop_277))) # shape=(3,)
bop_293 = relay.bitwise_or(uop_274.astype('int8'), relay.reshape(bop_265.astype('int8'), relay.shape_of(uop_274))) # shape=(3,)
var_296 = relay.var("var_296", dtype = "uint16", shape = (3,))#candidate|296|(3,)|var|uint16
bop_297 = relay.bitwise_and(bop_290.astype('int64'), relay.reshape(var_296.astype('int64'), relay.shape_of(bop_290))) # shape=(3,)
var_300 = relay.var("var_300", dtype = "uint8", shape = (3,))#candidate|300|(3,)|var|uint8
bop_301 = relay.add(bop_287.astype('int16'), relay.reshape(var_300.astype('int16'), relay.shape_of(bop_287))) # shape=(3,)
var_304 = relay.var("var_304", dtype = "uint8", shape = (3,))#candidate|304|(3,)|var|uint8
bop_305 = relay.power(var_300.astype('float64'), relay.reshape(var_304.astype('float64'), relay.shape_of(var_300))) # shape=(3,)
uop_308 = relay.erf(bop_271.astype('float32')) # shape=(3,)
var_310 = relay.var("var_310", dtype = "bool", shape = (3,))#candidate|310|(3,)|var|bool
bop_311 = relay.divide(bop_265.astype('float64'), relay.reshape(var_310.astype('float64'), relay.shape_of(bop_265))) # shape=(3,)
bop_314 = relay.floor_divide(bop_283.astype('float64'), relay.reshape(var_310.astype('float64'), relay.shape_of(bop_283))) # shape=(3,)
bop_317 = relay.minimum(bop_297.astype('float64'), relay.reshape(uop_308.astype('float64'), relay.shape_of(bop_297))) # shape=(3,)
uop_320 = relay.cosh(bop_317.astype('float32')) # shape=(3,)
bop_322 = relay.greater_equal(uop_320.astype('bool'), relay.reshape(var_286.astype('bool'), relay.shape_of(uop_320))) # shape=(3,)
var_325 = relay.var("var_325", dtype = "bool", shape = (3,))#candidate|325|(3,)|var|bool
bop_326 = relay.less_equal(bop_322.astype('bool'), relay.reshape(var_325.astype('bool'), relay.shape_of(bop_322))) # shape=(3,)
bop_329 = relay.add(uop_320.astype('uint8'), relay.reshape(bop_314.astype('uint8'), relay.shape_of(uop_320))) # shape=(3,)
uop_332 = relay.acos(bop_297.astype('float32')) # shape=(3,)
bop_334 = relay.logical_and(uop_332.astype('bool'), relay.reshape(bop_262.astype('bool'), relay.shape_of(uop_332))) # shape=(3,)
bop_337 = relay.bitwise_and(bop_322.astype('int16'), relay.reshape(var_325.astype('int16'), relay.shape_of(bop_322))) # shape=(3,)
uop_340 = relay.sigmoid(bop_337.astype('float32')) # shape=(3,)
uop_342 = relay.cos(uop_340.astype('float32')) # shape=(3,)
bop_344 = relay.multiply(uop_320.astype('int32'), relay.reshape(bop_277.astype('int32'), relay.shape_of(uop_320))) # shape=(3,)
uop_347 = relay.acos(uop_340.astype('float32')) # shape=(3,)
bop_349 = relay.left_shift(uop_347.astype('int64'), relay.reshape(bop_283.astype('int64'), relay.shape_of(uop_347))) # shape=(3,)
func_57_call = mod.get_global_var('func_57')
func_62_call = mutated_mod.get_global_var('func_62')
var_353 = relay.var("var_353", dtype = "float32", shape = ())#candidate|353|()|var|float32
var_354 = relay.var("var_354", dtype = "float64", shape = (1, 60))#candidate|354|(1, 60)|var|float64
const_355 = relay.const([-9.070565,9.520490,6.920292,-0.201556,2.123785,-0.883005,-1.695000,-3.362197,0.120496,-4.688192,-3.726600,-8.848380,-1.675514,7.707002,-6.513535,-7.577475,-3.276468,-0.286226,-0.844666,0.934848,-9.008701,4.811091,-6.235333,-3.640311,-2.509495,2.736373,2.698729,0.044737,-7.357765,0.689471,2.281433,9.481320,-9.582366,1.171332,-1.000267,-0.400191,4.522029,-0.321118,7.712037,6.481033,3.020623,-7.548271,-7.867167,-3.817778,-3.923774,4.505920,-4.545088,7.922766,3.380990,5.884749,-6.650019,-8.360120,1.245080,3.999138,-4.662337,-5.996352,8.717333,-9.247581,2.125566,-3.472104,0.198152,6.464139,-1.137685,-5.657854,-7.826701,-4.452236,8.378308,-9.287114,5.966665,0.780639,-7.066838,8.069507,-4.285788,1.604389,-8.580781,1.795356,-1.465214,9.927406,9.392345,-7.883376,5.014254,-0.154582,4.601926,3.715906,-3.188075,-0.852639,5.672907,-9.510458,-7.354741,3.062664,3.184188,-6.766607,9.818989,5.036976,5.623478,-7.678441,-1.947591,0.173908,6.295229,-7.717677,9.870896,-5.377231,-3.751248,-6.121653,8.863520,8.005720,-2.884532,-0.178373,-9.765073,-8.079132,0.061811,-3.582110,-3.566815,4.469050,2.542557,9.869117,1.058739,2.566896,4.441992,-7.915503,6.348271,9.687833,0.023156,8.074428,4.207839,2.918363,6.982062,-9.982230,9.514694,8.929227,4.796529,5.865235,8.359931,-7.832522,-4.143981,4.778972,3.633233,4.208882,-5.748021,-1.685417,-8.273650,-3.321888,9.357303,6.651585,-2.698983,0.708800,-4.546139,-1.373728,6.212324,-8.391844,8.957467,0.334265,-2.152395,3.390758,-0.427376,7.754423,1.972439,-6.680535,-4.324628,1.498647,-9.538144,8.173356,0.941082,-4.182551,-9.454555,-6.640918,-7.549928,-9.722799,-7.740279,9.066350,6.617522,-7.803182,-2.653384,-0.978947,-6.965482,-1.117228,-8.135233,4.238524,2.377090,4.097938,-1.854347,-3.020992,6.947488,-7.050916,-1.517972,-5.182221,-9.039977,0.051451,8.532628,5.736305,2.272911,1.347185,1.233024,-7.522635,-8.283752,1.619093,6.724366,-5.629931,-8.574035,6.299380,-0.886851,0.514586,-2.452238,-8.267831,-6.531212,9.701425,8.636159,8.953261,-9.224706,5.755760,2.012979,8.158171,-0.498640,-7.001865,-1.357626,-4.862328,0.812436,6.592961,-4.254443,-3.516325,-1.229872,-5.544362,-1.346819,-8.912838,9.605991,2.191247,-1.832270,-6.516433,-0.478471,-1.407304,-6.832617,-5.739749,-5.484205,0.125458,1.308785,7.840388,0.036924,3.206397,8.798520,-1.577052,0.709074,-1.402546,1.114865,8.924179,5.798000,-2.955076,-0.731348,4.140289,9.732788,1.633676,-3.299569,-1.448921,-3.968435,5.062946,0.631284,0.215867,-2.470232,0.320946,-1.118318,8.128887,-2.309540,8.812343,-8.945211,0.062282,7.461719,-0.274708,5.241138,6.577485,-7.374143,6.765202,9.634153,0.854687,-1.715581,2.567722,8.391286,-9.071478,-8.292406,-8.755127,3.467130,-4.959070,-9.114858,-4.579906,4.731623,7.809083,4.456196,-6.405513,0.112414,-4.108425,-3.864936,-5.419078,-2.007892,6.055537,-6.579870,-3.324847,4.633456,-4.676731,1.521021,9.132700,1.947714,1.303537,6.664408,9.922122,5.881799,8.263786,1.904640,1.189235,-1.022487,-7.589277,-6.122406,-7.328908,-9.454253,1.732888,-2.022852,-8.692257,2.176120,-2.284258,4.250386,-5.060079,4.993841,-3.228650,4.340567,-8.644534,-9.108531,0.043315,2.906339,-2.421683,-8.503212,-3.544104,-6.554956,-8.566918,-6.315017,3.707223,-8.591395,-3.862832,8.510661,-6.396566,-6.206544,-6.868726,-1.629049,5.351326,-4.756569,7.097806,5.850977,7.580420,-1.783538,7.819286,-6.385210,7.248811,-0.624918,-5.210044,-5.337568,4.588795,1.146109,-8.635560,4.393361,-3.005405,8.294450,-0.121796,1.927439,0.506849,-9.353696,-0.229087,9.574786,5.563745,5.156102,2.882518,6.211393,-2.300536,-6.882122,-2.787095,-7.283842,9.040597,-1.604553,-5.440661,3.338820,0.749983,-5.643736,-6.631699,3.533261,-7.789533,0.041598,7.452399,-1.756336,-3.475636,-8.103515,-6.441616,7.430096,-2.501506,3.483235,3.610898,-5.608155,-0.182715,-0.733702,-9.231369,2.981072,-4.729169,-1.138791,1.019944,9.450673,-4.578996,-8.885972,-9.883072,-8.419555,4.222739,8.404109,7.021308,8.100596,-1.295723,-9.377082,-3.444716,9.035703,8.162899,-5.679084,-5.792624,-1.784526,6.837121,4.251091,-9.360589,-9.654365,-5.421907,-5.338820,-8.335003,5.860611,3.527455,2.255934,7.653749,-1.085959,6.068089,1.794821,-7.096998,-0.194547,-0.403150,6.561905,6.845344,-8.063055,0.468582,9.636987,5.305603,-6.594081,1.307784,-6.889892,9.952548,1.149940,2.132498,-4.191778,-6.987597,8.347202,2.134762,3.100553,-3.768012,-4.192849,-1.669343,9.616908,-8.722244,-3.210939,-3.163412,5.609470,7.285327,-6.214812,8.341338,-0.592198,2.086324,8.882086,-3.738773,1.336152,-1.095859,-4.589493,-1.510014,-1.872100,9.862494,-5.552329,7.863508,7.412193,-8.080171,9.716350,7.946353,4.781190,6.145058,7.939893,3.539878,4.671806,-9.581448,-5.234358,5.175262,2.387039,1.120294,-4.288597,4.179919,2.199587,6.715667,-2.815500,-6.115436,7.838035,-5.193715,4.245956,-1.971725,9.771324,-5.002806,6.748840,3.927118,-8.312143,-6.177710,2.303910,6.215674,5.838711,-7.462565,3.688124,3.370847,-3.211102,7.522126,7.992319,-0.748504,-5.692343,-1.431057,2.233876,-5.562906,-0.363635,-0.876874,6.397133,-1.721920,3.049958,-8.959788,3.184422,3.009705,8.447455,0.934728,-5.776441,7.642014,-1.610034,-7.624053,4.907427,0.043048,6.143655,-5.862935,8.264356,1.719477,3.560767,0.115990,6.350790,-0.325105,9.764581,4.232233,-7.057336,-2.735997,-8.210085,-0.623276,-9.010291,8.173470,6.673102,-4.150333,-0.005966,1.157264,7.320569,-9.806623,-4.055364,5.844024,-3.825357,2.461084,7.105360,2.000566,3.240949,-1.545223,-2.051433,2.476575,9.076266,-9.191691,-6.471913,5.952023,4.041762,-0.630288,-6.812114,6.976611,0.334741,3.093225,4.599940,-0.551923,-6.687660,-6.237972,2.541724,2.545233,6.650842,-6.339447,2.790344,2.774864,-0.252004,-6.078292,1.273866,4.152508,3.729414,9.402113,-9.880844,2.712859,-7.122415,0.730523,4.672651,-1.597614,-0.410820,-1.339779,-1.884822,-1.271334,-9.747532,-8.870627,1.163006,-4.398796,-0.792742,8.949025,2.622112,-6.034223,-9.394578,0.393742,-8.691034,-4.334890,4.234863,-7.566999,-6.669489,-2.059925,-4.859343,-1.522620,-7.243864,-9.810459,-7.283060,2.562685,-8.294510,-9.499850,1.995535,-8.044521,4.460936,4.762776,-0.715880,5.616880,-0.837912,1.447979,-8.528194,-1.683419,-7.320354,6.092226,-3.174662,-0.666845,-6.128967,9.963397,1.176133,1.214778,-6.981041,5.176094,7.374920,6.843067,-8.497663,-7.488372,-0.817731,2.237134,1.624645,-0.167770,-5.033136,-7.500143,4.142253,-6.036234,0.180627,2.255615,-1.550548,-1.748445,3.118333,-8.174287,-5.089240,-3.765849,9.191239,3.829836,3.543178,1.054646,6.156153,-1.998035,9.590169,0.895188,1.467096,1.355985,4.367064,4.773445,1.409161,-5.566629,-2.555812,5.722626,-6.537762,-0.855217,-8.277280,7.519185,6.627290,-6.076634,8.548404,1.920642,-2.382197,-4.457892,5.766509,7.205778,5.678991,-5.500805,-9.105710,-5.982607,5.465566,-8.379413,-2.792028,7.102162,-7.851631,-5.064058,2.799452,-0.571497,-1.406345,0.226796,-4.509800,3.548592,-5.165718,9.741054,9.469690,3.924540,-6.492897,-8.329075,-2.157454,-3.648515,9.699953,-6.539127,-8.191876,-0.560796], dtype = "float64")#candidate|355|(720,)|const|float64
call_352 = relay.TupleGetItem(func_57_call(relay.reshape(var_353.astype('float32'), []), relay.reshape(var_354.astype('float64'), [60,]), relay.reshape(const_355.astype('float64'), [720,]), ), 2)
call_356 = relay.TupleGetItem(func_62_call(relay.reshape(var_353.astype('float32'), []), relay.reshape(var_354.astype('float64'), [60,]), relay.reshape(const_355.astype('float64'), [720,]), ), 2)
uop_357 = relay.cos(uop_347.astype('float32')) # shape=(3,)
output = relay.Tuple([bop_268,bop_280,bop_293,bop_301,bop_305,bop_311,bop_326,bop_329,bop_334,uop_342,bop_344,bop_349,call_352,var_353,var_354,const_355,uop_357,])
output2 = relay.Tuple([bop_268,bop_280,bop_293,bop_301,bop_305,bop_311,bop_326,bop_329,bop_334,uop_342,bop_344,bop_349,call_356,var_353,var_354,const_355,uop_357,])
F = relay.Function([var_260,var_261,var_276,var_286,var_296,var_300,var_304,var_310,var_325,var_353,var_354,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_260,var_261,var_276,var_286,var_296,var_300,var_304,var_310,var_325,var_353,var_354,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_260= np.array([2,4,-8], dtype='int64')
module1.set_input('var_260', input_260)
input_261= np.array([10,10,-7], dtype='int64')
module1.set_input('var_261', input_261)
input_276= np.array([-3.674955,7.233668,6.562660], dtype='float32')
module1.set_input('var_276', input_276)
input_286= np.array([-4.669948,8.969104,7.014870], dtype='float32')
module1.set_input('var_286', input_286)
input_296= np.array([-1,-4,2], dtype='uint16')
module1.set_input('var_296', input_296)
input_300= np.array([6,2,7], dtype='uint8')
module1.set_input('var_300', input_300)
input_304= np.array([-8,7,-10], dtype='uint8')
module1.set_input('var_304', input_304)
input_310= np.array([True,True,True], dtype='bool')
module1.set_input('var_310', input_310)
input_325= np.array([False,True,True], dtype='bool')
module1.set_input('var_325', input_325)
input_353= np.array(-7.315162, dtype='float32')
module1.set_input('var_353', input_353)
input_354= np.array([[-7.864135,-1.549965,-2.550445,0.475222,-0.998270,4.622652,-4.419549,3.759221,-7.899401,9.974377,-6.278172,7.181725,-6.549794,2.132583,-7.197806,6.619767,0.223065,-5.484337,-5.032208,-7.100804,-7.789847,6.963962,1.977655,7.665375,-0.224298,-9.733289,-4.821820,2.585019,-4.379711,-7.933422,-3.202470,1.068475,1.825510,-8.460446,4.953712,3.793693,-7.277058,-1.079230,4.060555,3.880777,1.505197,4.900729,4.084489,-8.136153,7.420569,-0.119135,-6.656918,2.855111,7.816046,-7.146539,-9.094192,-7.323071,-5.817940,-2.289818,-8.394619,0.715195,-8.562138,-9.950215,2.989786,8.421306]], dtype='float64')
module1.set_input('var_354', input_354)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_260, input_261, input_276, input_286, input_296, input_300, input_304, input_310, input_325, input_353, input_354, )
res3 = intrp3.evaluate()(input_260, input_261, input_276, input_286, input_296, input_300, input_304, input_310, input_325, input_353, input_354, )
res4 = intrp4.evaluate()(input_260, input_261, input_276, input_286, input_296, input_300, input_304, input_310, input_325, input_353, input_354, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
res1_14 = module1.get_output(14).asnumpy()
res2_14 = res2[14].asnumpy()
res3_14 = res3[14].asnumpy()
res4_14 = res4[14].asnumpy()
np.testing.assert_allclose(res1_14 ,res2_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res3_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res4_14, atol=1e-3, rtol=1e-3)
(res1_14 == res2_14).all()
(res1_14 == res3_14).all()
(res1_14 == res4_14).all()
res1_15 = module1.get_output(15).asnumpy()
res2_15 = res2[15].asnumpy()
res3_15 = res3[15].asnumpy()
res4_15 = res4[15].asnumpy()
np.testing.assert_allclose(res1_15 ,res2_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res3_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res4_15, atol=1e-3, rtol=1e-3)
(res1_15 == res2_15).all()
(res1_15 == res3_15).all()
(res1_15 == res4_15).all()
res1_16 = module1.get_output(16).asnumpy()
res2_16 = res2[16].asnumpy()
res3_16 = res3[16].asnumpy()
res4_16 = res4[16].asnumpy()
np.testing.assert_allclose(res1_16 ,res2_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res3_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res4_16, atol=1e-3, rtol=1e-3)
(res1_16 == res2_16).all()
(res1_16 == res3_16).all()
(res1_16 == res4_16).all()
module5.set_input('var_260', input_260)
module5.set_input('var_261', input_261)
module5.set_input('var_276', input_276)
module5.set_input('var_286', input_286)
module5.set_input('var_296', input_296)
module5.set_input('var_300', input_300)
module5.set_input('var_304', input_304)
module5.set_input('var_310', input_310)
module5.set_input('var_325', input_325)
module5.set_input('var_353', input_353)
module5.set_input('var_354', input_354)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_260, input_261, input_276, input_286, input_296, input_300, input_304, input_310, input_325, input_353, input_354, )
res7 = intrp7.evaluate()(input_260, input_261, input_276, input_286, input_296, input_300, input_304, input_310, input_325, input_353, input_354, )
res8 = intrp8.evaluate()(input_260, input_261, input_276, input_286, input_296, input_300, input_304, input_310, input_325, input_353, input_354, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
res5_14 = module5.get_output(14).asnumpy()
res6_14 = res6[14].asnumpy()
res7_14 = res7[14].asnumpy()
res8_14 = res8[14].asnumpy()
np.testing.assert_allclose(res5_14 ,res6_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res7_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res8_14, atol=1e-3, rtol=1e-3)
(res5_14 == res6_14).all()
(res5_14 == res7_14).all()
(res5_14 == res8_14).all()
res5_15 = module5.get_output(15).asnumpy()
res6_15 = res6[15].asnumpy()
res7_15 = res7[15].asnumpy()
res8_15 = res8[15].asnumpy()
np.testing.assert_allclose(res5_15 ,res6_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res7_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res8_15, atol=1e-3, rtol=1e-3)
(res5_15 == res6_15).all()
(res5_15 == res7_15).all()
(res5_15 == res8_15).all()
res5_16 = module5.get_output(16).asnumpy()
res6_16 = res6[16].asnumpy()
res7_16 = res7[16].asnumpy()
res8_16 = res8[16].asnumpy()
np.testing.assert_allclose(res5_16 ,res6_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res7_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res8_16, atol=1e-3, rtol=1e-3)
(res5_16 == res6_16).all()
(res5_16 == res7_16).all()
(res5_16 == res8_16).all()
module9.set_input('var_260', input_260)
module9.set_input('var_261', input_261)
module9.set_input('var_276', input_276)
module9.set_input('var_286', input_286)
module9.set_input('var_296', input_296)
module9.set_input('var_300', input_300)
module9.set_input('var_304', input_304)
module9.set_input('var_310', input_310)
module9.set_input('var_325', input_325)
module9.set_input('var_353', input_353)
module9.set_input('var_354', input_354)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_260, input_261, input_276, input_286, input_296, input_300, input_304, input_310, input_325, input_353, input_354, )
res11 = intrp11.evaluate()(input_260, input_261, input_276, input_286, input_296, input_300, input_304, input_310, input_325, input_353, input_354, )
res12 = intrp12.evaluate()(input_260, input_261, input_276, input_286, input_296, input_300, input_304, input_310, input_325, input_353, input_354, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
res9_14 = module9.get_output(14).asnumpy()
res10_14 = res10[14].asnumpy()
res11_14 = res11[14].asnumpy()
res12_14 = res12[14].asnumpy()
np.testing.assert_allclose(res9_14 ,res10_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res11_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res12_14, atol=1e-3, rtol=1e-3)
(res9_14 == res10_14).all()
(res9_14 == res11_14).all()
(res9_14 == res12_14).all()
res9_15 = module9.get_output(15).asnumpy()
res10_15 = res10[15].asnumpy()
res11_15 = res11[15].asnumpy()
res12_15 = res12[15].asnumpy()
np.testing.assert_allclose(res9_15 ,res10_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res11_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res12_15, atol=1e-3, rtol=1e-3)
(res9_15 == res10_15).all()
(res9_15 == res11_15).all()
(res9_15 == res12_15).all()
res9_16 = module9.get_output(16).asnumpy()
res10_16 = res10[16].asnumpy()
res11_16 = res11[16].asnumpy()
res12_16 = res12[16].asnumpy()
np.testing.assert_allclose(res9_16 ,res10_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res11_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res12_16, atol=1e-3, rtol=1e-3)
(res9_16 == res10_16).all()
(res9_16 == res11_16).all()
(res9_16 == res12_16).all()
module13.set_input('var_260', input_260)
module13.set_input('var_261', input_261)
module13.set_input('var_276', input_276)
module13.set_input('var_286', input_286)
module13.set_input('var_296', input_296)
module13.set_input('var_300', input_300)
module13.set_input('var_304', input_304)
module13.set_input('var_310', input_310)
module13.set_input('var_325', input_325)
module13.set_input('var_353', input_353)
module13.set_input('var_354', input_354)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_260, input_261, input_276, input_286, input_296, input_300, input_304, input_310, input_325, input_353, input_354, )
res15 = intrp15.evaluate()(input_260, input_261, input_276, input_286, input_296, input_300, input_304, input_310, input_325, input_353, input_354, )
res16 = intrp16.evaluate()(input_260, input_261, input_276, input_286, input_296, input_300, input_304, input_310, input_325, input_353, input_354, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
res13_14 = module13.get_output(14).asnumpy()
res14_14 = res14[14].asnumpy()
res15_14 = res15[14].asnumpy()
res16_14 = res16[14].asnumpy()
np.testing.assert_allclose(res13_14 ,res14_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res15_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res16_14, atol=1e-3, rtol=1e-3)
(res13_14 == res14_14).all()
(res13_14 == res15_14).all()
(res13_14 == res16_14).all()
res13_15 = module13.get_output(15).asnumpy()
res14_15 = res14[15].asnumpy()
res15_15 = res15[15].asnumpy()
res16_15 = res16[15].asnumpy()
np.testing.assert_allclose(res13_15 ,res14_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res15_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res16_15, atol=1e-3, rtol=1e-3)
(res13_15 == res14_15).all()
(res13_15 == res15_15).all()
(res13_15 == res16_15).all()
res13_16 = module13.get_output(16).asnumpy()
res14_16 = res14[16].asnumpy()
res15_16 = res15[16].asnumpy()
res16_16 = res16[16].asnumpy()
np.testing.assert_allclose(res13_16 ,res14_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res15_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res16_16, atol=1e-3, rtol=1e-3)
(res13_16 == res14_16).all()
(res13_16 == res15_16).all()
(res13_16 == res16_16).all()
module17.set_input('var_260', input_260)
module17.set_input('var_261', input_261)
module17.set_input('var_276', input_276)
module17.set_input('var_286', input_286)
module17.set_input('var_296', input_296)
module17.set_input('var_300', input_300)
module17.set_input('var_304', input_304)
module17.set_input('var_310', input_310)
module17.set_input('var_325', input_325)
module17.set_input('var_353', input_353)
module17.set_input('var_354', input_354)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_260, input_261, input_276, input_286, input_296, input_300, input_304, input_310, input_325, input_353, input_354, )
res19 = intrp19.evaluate()(input_260, input_261, input_276, input_286, input_296, input_300, input_304, input_310, input_325, input_353, input_354, )
res20 = intrp20.evaluate()(input_260, input_261, input_276, input_286, input_296, input_300, input_304, input_310, input_325, input_353, input_354, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
res17_14 = module17.get_output(14).asnumpy()
res18_14 = res18[14].asnumpy()
res19_14 = res19[14].asnumpy()
res20_14 = res20[14].asnumpy()
np.testing.assert_allclose(res17_14 ,res18_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res19_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res20_14, atol=1e-3, rtol=1e-3)
(res17_14 == res18_14).all()
(res17_14 == res19_14).all()
(res17_14 == res20_14).all()
res17_15 = module17.get_output(15).asnumpy()
res18_15 = res18[15].asnumpy()
res19_15 = res19[15].asnumpy()
res20_15 = res20[15].asnumpy()
np.testing.assert_allclose(res17_15 ,res18_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res19_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res20_15, atol=1e-3, rtol=1e-3)
(res17_15 == res18_15).all()
(res17_15 == res19_15).all()
(res17_15 == res20_15).all()
res17_16 = module17.get_output(16).asnumpy()
res18_16 = res18[16].asnumpy()
res19_16 = res19[16].asnumpy()
res20_16 = res20[16].asnumpy()
np.testing.assert_allclose(res17_16 ,res18_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res19_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res20_16, atol=1e-3, rtol=1e-3)
(res17_16 == res18_16).all()
(res17_16 == res19_16).all()
(res17_16 == res20_16).all()
module21.set_input('var_260', input_260)
module21.set_input('var_261', input_261)
module21.set_input('var_276', input_276)
module21.set_input('var_286', input_286)
module21.set_input('var_296', input_296)
module21.set_input('var_300', input_300)
module21.set_input('var_304', input_304)
module21.set_input('var_310', input_310)
module21.set_input('var_325', input_325)
module21.set_input('var_353', input_353)
module21.set_input('var_354', input_354)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_260, input_261, input_276, input_286, input_296, input_300, input_304, input_310, input_325, input_353, input_354, )
res23 = intrp23.evaluate()(input_260, input_261, input_276, input_286, input_296, input_300, input_304, input_310, input_325, input_353, input_354, )
res24 = intrp24.evaluate()(input_260, input_261, input_276, input_286, input_296, input_300, input_304, input_310, input_325, input_353, input_354, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()
res21_14 = module21.get_output(14).asnumpy()
res22_14 = res22[14].asnumpy()
res23_14 = res23[14].asnumpy()
res24_14 = res24[14].asnumpy()
np.testing.assert_allclose(res21_14 ,res22_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res23_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res24_14, atol=1e-3, rtol=1e-3)
(res21_14 == res22_14).all()
(res21_14 == res23_14).all()
(res21_14 == res24_14).all()
res21_15 = module21.get_output(15).asnumpy()
res22_15 = res22[15].asnumpy()
res23_15 = res23[15].asnumpy()
res24_15 = res24[15].asnumpy()
np.testing.assert_allclose(res21_15 ,res22_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res23_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res24_15, atol=1e-3, rtol=1e-3)
(res21_15 == res22_15).all()
(res21_15 == res23_15).all()
(res21_15 == res24_15).all()
res21_16 = module21.get_output(16).asnumpy()
res22_16 = res22[16].asnumpy()
res23_16 = res23[16].asnumpy()
res24_16 = res24[16].asnumpy()
np.testing.assert_allclose(res21_16 ,res22_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res23_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res24_16, atol=1e-3, rtol=1e-3)
(res21_16 == res22_16).all()
(res21_16 == res23_16).all()
(res21_16 == res24_16).all()

'''33: TVMFuncCall
32: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
31: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
30: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
29: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
28: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
27: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
26: tvm::relay::GraphPlanMemory(tvm::relay::Function const&)
25: tvm::relay::StorageAllocator::Plan(tvm::relay::Function const&)
24: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
21: tvm::relay::transform::DeviceAwareExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
20: tvm::relay::StorageAllocaBaseVisitor::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
19: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
18: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
17: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
16: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
15: tvm::relay::StorageAllocaBaseVisitor::VisitExpr_(tvm::relay::TupleNode const*)
14: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
13: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
12: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
11: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
10: tvm::relay::StorageAllocaBaseVisitor::VisitExpr_(tvm::relay::TupleGetItemNode const*)
9: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
8: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
7: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
6: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
5: tvm::relay::transform::DeviceAwareExprVisitor::VisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::StorageAllocator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
3: tvm::relay::StorageAllocaBaseVisitor::CreateToken(tvm::RelayExprNode const*, bool)
2: tvm::relay::StorageAllocator::CreateTokenOnDevice(tvm::RelayExprNode const*, tvm::VirtualDevice const&, bool)
1: tvm::relay::StorageAllocator::Request(tvm::relay::StorageToken*)
0: tvm::relay::StorageAllocator::GetMemorySize(tvm::relay::StorageToken*)

'''