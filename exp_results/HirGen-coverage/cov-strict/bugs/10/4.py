import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
const_215 = relay.const([[[-2.990005,8.687396,-9.698406,1.321574,3.323813,1.867173,-0.818920,5.863626,2.756401],[-7.320510,-1.623866,-2.577612,9.520319,-1.274781,-8.954316,6.830167,2.055882,-8.423679],[7.817365,3.272748,-4.879952,-8.209932,1.020712,5.810573,7.428373,-3.372770,0.611179],[-0.210466,2.415665,5.106896,0.661099,-6.145285,-7.540619,-2.592417,3.027778,-2.938611],[-3.856902,-6.537080,9.322976,-0.407571,7.533922,-7.637911,-5.455865,2.290068,-0.159076],[0.427962,-6.510707,-3.249010,-5.668341,-9.873819,6.367681,6.014849,8.563760,2.096344]],[[-5.180414,0.333966,-0.842647,-6.215978,6.324723,4.553704,-7.094123,4.114323,-9.784061],[1.425872,-1.064535,-4.690681,2.276918,4.258629,-4.827402,8.847581,-2.587652,-7.776269],[-5.315685,5.755285,0.461555,7.037409,-5.860532,-9.844657,3.265293,1.803070,6.353194],[9.460272,-0.415576,-7.223443,1.496003,0.530544,-8.092410,1.217108,-3.559062,-1.144824],[1.621830,1.410610,-4.702030,-9.491277,-3.582381,7.046946,-6.096214,-9.472565,0.927217],[0.335403,-6.156637,2.986683,-5.489582,8.001245,9.517423,-8.638220,-4.761057,-9.913230]],[[1.447822,-3.350443,4.298235,-6.851821,-3.799028,-5.780184,0.336200,-0.944342,-8.080216],[-8.557268,-3.289818,4.252382,-3.153335,-7.104380,2.175730,8.699588,-2.493854,-4.724887],[-6.168040,1.181398,9.635051,-7.258917,9.375634,-3.743915,-6.267063,-7.859257,9.818710],[7.273062,-7.398404,-0.551679,-2.539866,-3.805191,7.273015,-0.362038,0.211990,-4.231580],[6.446817,8.955152,4.940117,-1.531384,8.309687,4.584906,-5.767755,-2.281515,-1.097577],[8.729822,-5.413396,4.821219,-3.560646,3.924335,5.597253,1.055244,6.496731,7.066581]],[[-6.085288,-6.585662,4.132655,-7.859615,-1.829476,-8.803873,3.113416,-5.553083,8.464106],[4.975475,2.833489,-7.333000,-2.536414,-3.374778,-6.603374,7.927934,9.576367,-4.620298],[0.402167,7.868337,7.788806,-0.085430,0.164963,3.606087,5.805753,-8.812046,5.439697],[3.013358,-6.557083,7.722988,-8.789905,-6.353274,3.273645,-4.587604,8.177243,-0.270951],[1.774324,-2.160697,9.688309,7.973078,-2.873847,-7.136233,-8.472674,-3.719667,7.340668],[-8.236131,-7.841075,1.316386,5.031823,-2.775819,3.789250,-3.347054,4.354770,3.044846]],[[-0.876626,8.354935,4.868396,-6.408560,-5.335081,-5.370794,1.536114,9.563469,4.967926],[1.354451,-6.845424,-6.457833,-6.094048,-2.355002,4.865404,0.172238,-8.252809,-5.365318],[-5.240226,-3.211454,3.277576,-5.927338,7.520422,-4.114932,-6.724394,1.201667,4.702852],[9.643305,-3.660835,-0.545321,8.299837,1.124579,-5.271358,0.607413,0.185110,9.057413],[9.817264,0.209231,8.309848,0.737142,9.565872,-5.393081,-6.049622,-4.852079,0.177055],[-6.628746,-5.743481,9.328001,-4.905549,1.690591,-9.155927,-2.456758,-6.462156,-1.104650]],[[-5.552370,-1.283292,-1.120689,-3.142855,-2.653738,-0.155114,8.844437,-0.282909,-7.240878],[5.414057,7.889397,-1.893111,9.554936,3.869868,-9.514966,-6.635359,1.575685,-5.235042],[7.522770,2.463015,-7.473982,-9.383861,-3.892469,3.099842,-7.110247,6.627351,-1.377908],[2.118126,4.088269,8.547031,-4.357387,-5.905241,-4.818825,2.382614,5.464028,5.392938],[-2.466868,-3.074802,3.867344,-6.690572,-6.001725,1.505051,0.250893,-5.607102,5.031383],[5.652151,3.939352,8.620771,-0.666616,-5.652050,0.255790,7.812016,8.314689,8.508744]],[[-6.267592,-8.955758,4.747726,6.842258,-8.232932,7.319776,0.498904,0.850296,-7.693517],[0.368250,4.212495,3.193637,2.975736,1.674745,-1.320313,4.721973,-2.963400,1.701014],[9.913450,-7.084699,-1.008454,2.646344,-3.673752,1.989302,-4.208186,-7.594076,-2.843272],[-4.757742,-2.053105,-9.170369,-6.498306,6.211197,2.343971,9.770018,4.845695,-7.819939],[8.462315,-1.840866,-9.579000,2.156413,-3.170758,-7.697943,7.446219,-4.274409,-1.083735],[-8.230899,9.144081,5.575937,-0.950622,4.726843,6.951419,2.051451,-0.200634,-6.629880]],[[2.863686,9.066227,2.183134,-7.108821,-0.347871,3.820891,8.475937,-8.690557,9.209413],[2.232859,-9.281675,-8.906844,-8.745241,-0.085890,0.648417,0.932782,-8.944641,-4.008541],[1.809554,-8.960596,0.627347,-7.977118,8.549678,6.408029,9.092776,-5.339195,-5.970154],[8.851377,8.248141,1.986484,-3.427891,4.809866,3.201436,5.200695,8.917945,-5.559146],[7.533959,9.800257,6.685144,6.137590,-2.045497,-8.068264,-2.397213,9.534559,-6.945231],[-2.604459,-4.522984,6.555716,7.291443,-8.469636,3.419688,-7.337019,8.355250,0.417376]],[[-3.876846,1.522911,3.730852,1.829779,9.886228,5.384447,9.157363,2.963119,5.599134],[8.489642,7.258249,1.108091,3.014352,6.626546,-0.615356,2.645990,0.195324,2.800118],[8.563772,8.799318,8.862728,-0.869827,-2.665604,-1.300321,-4.523355,8.744742,4.048388],[-1.880063,-4.915509,-8.254505,9.157275,4.050327,-3.152877,3.771155,-6.319307,9.572836],[0.160959,-9.981539,5.682150,7.520431,9.455355,2.746451,-4.165637,2.076478,4.029962],[1.864110,4.785449,7.712213,4.966439,8.292411,0.735659,2.531727,-0.699713,2.956966]],[[7.868325,-6.386193,6.168914,2.773405,1.405323,-2.326393,-6.999073,2.735581,-1.718947],[-6.007285,6.070717,2.652070,-5.349216,7.931548,2.322645,-4.786166,-4.235097,0.954390],[-5.227913,0.299478,6.163285,-3.033942,7.318347,4.989368,-2.161872,9.261259,-5.068126],[2.421043,7.908938,5.741852,4.167208,8.013653,-8.706581,9.714136,-8.984214,3.750755],[-8.016838,2.740752,1.971418,6.481860,-6.914600,-9.087386,-7.732212,3.682556,-2.716087],[-9.392507,-6.816308,4.370683,-8.636541,9.941884,8.858654,-8.335012,-6.871268,8.764158]],[[-6.408304,-8.571683,3.609061,7.228765,-7.616125,-0.582385,-1.559523,-5.508858,-2.102988],[9.058869,-0.309334,3.815874,1.572067,7.325264,-5.120002,-6.944519,9.184482,8.742852],[5.392579,-6.360460,-3.413741,-8.545270,0.681624,5.952868,2.782336,-5.162362,-7.757807],[8.984428,3.511274,3.311617,-7.446050,8.121564,-5.395531,-3.406923,6.380149,3.622847],[3.949699,-6.530931,-1.461016,5.234214,0.142483,7.172961,8.275679,2.301053,4.198344],[-9.696624,-5.220808,-9.690080,2.670243,-9.789683,2.329392,-6.217388,-7.177707,-2.259012]],[[-3.589648,-6.735248,0.956686,8.261233,-4.342221,-3.651346,-3.382609,2.540992,-0.871623],[7.173962,5.344749,-6.993934,-0.647869,3.309380,-1.334680,0.492260,8.296069,-0.497708],[-2.362957,-3.304214,-2.566469,-8.381777,9.822494,-8.183630,8.361558,8.983482,8.211198],[-4.479280,-5.166645,-0.686072,2.043172,-7.844327,9.436812,9.244221,-2.384451,1.254574],[-0.167116,5.044390,2.114047,9.915242,-2.484251,4.575199,8.408548,7.637337,-4.667706],[-1.549296,7.135100,-9.261500,0.951300,-1.528046,9.345354,-5.356567,-5.075574,-5.757087]],[[6.718335,-5.223672,-5.814023,-5.994011,9.060892,-7.153610,6.378168,6.414054,0.368887],[-7.446851,-4.930522,-4.361101,-1.570761,5.186625,9.562741,-0.243714,-8.994989,-2.755368],[9.754714,-3.558950,-0.634366,-7.559551,7.629687,-5.713049,7.311955,3.623432,-8.730465],[-4.061008,-0.081931,7.224498,6.697808,6.182755,-7.848293,-5.555893,-7.772311,2.033236],[5.189041,-0.645275,7.155508,5.337153,7.346024,-5.514651,5.489425,-8.924647,5.226813],[3.015318,-6.731153,-5.919907,-8.637093,-2.856338,8.341830,0.996767,6.067245,6.833717]],[[-1.941475,9.780818,1.292045,8.844223,-9.058963,-1.056547,8.531565,-9.885179,-1.379391],[1.429506,-3.321351,6.050551,2.911273,-2.391984,3.721670,6.798772,6.616882,7.514260],[3.233282,7.926023,1.790834,5.606111,7.742332,-2.839771,-3.264073,-0.513054,2.028453],[-3.905001,-2.654490,5.290491,-4.838899,1.826741,8.113838,-6.770822,-1.891406,3.086999],[3.377355,-7.222035,-1.558946,6.043698,-8.026681,8.549901,6.755170,-6.093895,6.259675],[5.567683,6.784968,3.998598,-6.564477,5.876673,4.640649,-1.325550,0.032079,0.468552]],[[1.477590,-6.672151,-7.246954,0.269967,3.751028,0.854577,7.568941,-0.253127,5.708986],[4.808117,4.454928,-9.919812,3.902651,8.922902,-1.104126,3.289343,2.052904,7.307208],[7.928227,-0.444371,4.095031,2.986786,-9.007358,7.736703,0.481024,5.022112,3.904286],[8.149685,-3.844028,4.125983,1.065253,-7.558501,-8.190907,-5.902511,-0.764915,-9.917405],[-2.712346,-9.687242,7.932811,7.743035,2.918008,1.805617,-1.438306,8.326928,2.558578],[8.755127,1.819421,-7.256606,-4.312568,-8.047644,9.266680,-5.654509,-8.715233,-5.456419]],[[-1.394453,1.327510,9.873178,-3.849739,2.150750,-7.185213,-4.447696,-1.875312,-7.691808],[4.002868,5.744358,6.748593,-1.903391,4.952726,9.233515,-2.711006,2.154077,1.278462],[-2.851262,-6.013135,6.249739,-3.282548,8.247139,-7.031620,1.521361,-8.569030,3.321386],[7.065600,7.166759,-7.712153,8.533993,-6.464277,-0.153058,9.338925,6.547605,9.864455],[-2.372760,-8.889961,-8.221319,2.616642,-1.953450,-4.044099,-2.464575,5.653087,-3.224614],[-1.437998,-9.820519,-5.306893,-8.600549,2.615401,-2.887074,-4.512501,-6.698450,-2.028926]]], dtype = "float64")#candidate|215|(16, 6, 9)|const|float64
uop_216 = relay.log(const_215.astype('float64')) # shape=(16, 6, 9)
var_222 = relay.var("var_222", dtype = "float64", shape = (16, 6, 9))#candidate|222|(16, 6, 9)|var|float64
bop_223 = relay.less_equal(uop_216.astype('bool'), relay.reshape(var_222.astype('bool'), relay.shape_of(uop_216))) # shape=(16, 6, 9)
output = relay.Tuple([bop_223,])
output2 = relay.Tuple([bop_223,])
func_232 = relay.Function([var_222,], output)
mod['func_232'] = func_232
mod = relay.transform.InferType()(mod)
var_233 = relay.var("var_233", dtype = "float64", shape = (16, 6, 9))#candidate|233|(16, 6, 9)|var|float64
output = func_232(var_233)
func_234 = relay.Function([var_233], output)
mutated_mod['func_234'] = func_234
mutated_mod = relay.transform.InferType()(mutated_mod)
var_838 = relay.var("var_838", dtype = "float32", shape = (10, 3, 3))#candidate|838|(10, 3, 3)|var|float32
uop_839 = relay.log10(var_838.astype('float32')) # shape=(10, 3, 3)
func_232_call = mod.get_global_var('func_232')
func_234_call = mutated_mod.get_global_var('func_234')
var_842 = relay.var("var_842", dtype = "float64", shape = (2, 432))#candidate|842|(2, 432)|var|float64
call_841 = relay.TupleGetItem(func_232_call(relay.reshape(var_842.astype('float64'), [16, 6, 9])), 0)
call_843 = relay.TupleGetItem(func_234_call(relay.reshape(var_842.astype('float64'), [16, 6, 9])), 0)
func_232_call = mod.get_global_var('func_232')
func_234_call = mutated_mod.get_global_var('func_234')
call_863 = relay.TupleGetItem(func_232_call(relay.reshape(call_841.astype('float64'), [16, 6, 9])), 0)
call_864 = relay.TupleGetItem(func_234_call(relay.reshape(call_841.astype('float64'), [16, 6, 9])), 0)
func_232_call = mod.get_global_var('func_232')
func_234_call = mutated_mod.get_global_var('func_234')
call_878 = relay.TupleGetItem(func_232_call(relay.reshape(call_863.astype('float64'), [16, 6, 9])), 0)
call_879 = relay.TupleGetItem(func_234_call(relay.reshape(call_863.astype('float64'), [16, 6, 9])), 0)
uop_880 = relay.log(uop_839.astype('float64')) # shape=(10, 3, 3)
func_232_call = mod.get_global_var('func_232')
func_234_call = mutated_mod.get_global_var('func_234')
call_887 = relay.TupleGetItem(func_232_call(relay.reshape(call_878.astype('float64'), [16, 6, 9])), 0)
call_888 = relay.TupleGetItem(func_234_call(relay.reshape(call_878.astype('float64'), [16, 6, 9])), 0)
func_232_call = mod.get_global_var('func_232')
func_234_call = mutated_mod.get_global_var('func_234')
call_895 = relay.TupleGetItem(func_232_call(relay.reshape(call_887.astype('float64'), [16, 6, 9])), 0)
call_896 = relay.TupleGetItem(func_234_call(relay.reshape(call_887.astype('float64'), [16, 6, 9])), 0)
func_232_call = mod.get_global_var('func_232')
func_234_call = mutated_mod.get_global_var('func_234')
call_901 = relay.TupleGetItem(func_232_call(relay.reshape(call_887.astype('float64'), [16, 6, 9])), 0)
call_902 = relay.TupleGetItem(func_234_call(relay.reshape(call_887.astype('float64'), [16, 6, 9])), 0)
bop_904 = relay.maximum(var_842.astype('uint32'), relay.reshape(call_878.astype('uint32'), relay.shape_of(var_842))) # shape=(2, 432)
bop_907 = relay.maximum(var_842.astype('uint32'), relay.reshape(call_879.astype('uint32'), relay.shape_of(var_842))) # shape=(2, 432)
bop_926 = relay.logical_xor(uop_880.astype('int16'), relay.reshape(var_838.astype('int16'), relay.shape_of(uop_880))) # shape=(10, 3, 3)
func_232_call = mod.get_global_var('func_232')
func_234_call = mutated_mod.get_global_var('func_234')
call_932 = relay.TupleGetItem(func_232_call(relay.reshape(call_895.astype('float64'), [16, 6, 9])), 0)
call_933 = relay.TupleGetItem(func_234_call(relay.reshape(call_895.astype('float64'), [16, 6, 9])), 0)
func_232_call = mod.get_global_var('func_232')
func_234_call = mutated_mod.get_global_var('func_234')
call_936 = relay.TupleGetItem(func_232_call(relay.reshape(call_841.astype('float64'), [16, 6, 9])), 0)
call_937 = relay.TupleGetItem(func_234_call(relay.reshape(call_841.astype('float64'), [16, 6, 9])), 0)
output = relay.Tuple([call_841,call_863,call_887,call_895,call_901,bop_904,bop_926,call_932,call_936,])
output2 = relay.Tuple([call_843,call_864,call_888,call_896,call_902,bop_907,bop_926,call_933,call_937,])
func_944 = relay.Function([var_838,var_842,], output)
mod['func_944'] = func_944
mod = relay.transform.InferType()(mod)
var_945 = relay.var("var_945", dtype = "float32", shape = (10, 3, 3))#candidate|945|(10, 3, 3)|var|float32
var_946 = relay.var("var_946", dtype = "float64", shape = (2, 432))#candidate|946|(2, 432)|var|float64
output = func_944(var_945,var_946,)
func_947 = relay.Function([var_945,var_946,], output)
mutated_mod['func_947'] = func_947
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1111 = relay.const(-2.034309, dtype = "float32")#candidate|1111|()|const|float32
var_1112 = relay.var("var_1112", dtype = "float32", shape = (4, 5, 1))#candidate|1112|(4, 5, 1)|var|float32
bop_1113 = relay.multiply(const_1111.astype('float32'), var_1112.astype('float32')) # shape=(4, 5, 1)
output = relay.Tuple([bop_1113,])
output2 = relay.Tuple([bop_1113,])
func_1117 = relay.Function([var_1112,], output)
mod['func_1117'] = func_1117
mod = relay.transform.InferType()(mod)
var_1118 = relay.var("var_1118", dtype = "float32", shape = (4, 5, 1))#candidate|1118|(4, 5, 1)|var|float32
output = func_1117(var_1118)
func_1119 = relay.Function([var_1118], output)
mutated_mod['func_1119'] = func_1119
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1937 = relay.var("var_1937", dtype = "float32", shape = (16, 3, 7))#candidate|1937|(16, 3, 7)|var|float32
uop_1938 = relay.log10(var_1937.astype('float32')) # shape=(16, 3, 7)
func_944_call = mod.get_global_var('func_944')
func_947_call = mutated_mod.get_global_var('func_947')
var_1945 = relay.var("var_1945", dtype = "float32", shape = (15, 6))#candidate|1945|(15, 6)|var|float32
var_1946 = relay.var("var_1946", dtype = "float64", shape = (864,))#candidate|1946|(864,)|var|float64
call_1944 = relay.TupleGetItem(func_944_call(relay.reshape(var_1945.astype('float32'), [10, 3, 3]), relay.reshape(var_1946.astype('float64'), [2, 432]), ), 1)
call_1947 = relay.TupleGetItem(func_947_call(relay.reshape(var_1945.astype('float32'), [10, 3, 3]), relay.reshape(var_1946.astype('float64'), [2, 432]), ), 1)
func_1117_call = mod.get_global_var('func_1117')
func_1119_call = mutated_mod.get_global_var('func_1119')
const_1950 = relay.const([5.316938,-6.312372,2.188269,9.592215,-6.137634,4.257143,-3.287535,-1.996882,4.693656,-5.550824,-1.803693,3.349079,-2.831538,-5.406414,9.996153,4.794374,5.920456,8.778738,6.783349,-3.320825], dtype = "float32")#candidate|1950|(20,)|const|float32
call_1949 = relay.TupleGetItem(func_1117_call(relay.reshape(const_1950.astype('float32'), [4, 5, 1])), 0)
call_1951 = relay.TupleGetItem(func_1119_call(relay.reshape(const_1950.astype('float32'), [4, 5, 1])), 0)
func_1117_call = mod.get_global_var('func_1117')
func_1119_call = mutated_mod.get_global_var('func_1119')
call_1960 = relay.TupleGetItem(func_1117_call(relay.reshape(const_1950.astype('float32'), [4, 5, 1])), 0)
call_1961 = relay.TupleGetItem(func_1119_call(relay.reshape(const_1950.astype('float32'), [4, 5, 1])), 0)
bop_1966 = relay.left_shift(call_1949.astype('int64'), relay.reshape(const_1950.astype('int64'), relay.shape_of(call_1949))) # shape=(4, 5, 1)
bop_1969 = relay.left_shift(call_1951.astype('int64'), relay.reshape(const_1950.astype('int64'), relay.shape_of(call_1951))) # shape=(4, 5, 1)
func_232_call = mod.get_global_var('func_232')
func_234_call = mutated_mod.get_global_var('func_234')
call_1981 = relay.TupleGetItem(func_232_call(relay.reshape(call_1944.astype('float64'), [16, 6, 9])), 0)
call_1982 = relay.TupleGetItem(func_234_call(relay.reshape(call_1944.astype('float64'), [16, 6, 9])), 0)
func_1117_call = mod.get_global_var('func_1117')
func_1119_call = mutated_mod.get_global_var('func_1119')
call_1985 = relay.TupleGetItem(func_1117_call(relay.reshape(const_1950.astype('float32'), [4, 5, 1])), 0)
call_1986 = relay.TupleGetItem(func_1119_call(relay.reshape(const_1950.astype('float32'), [4, 5, 1])), 0)
uop_1997 = relay.tan(uop_1938.astype('float32')) # shape=(16, 3, 7)
output = relay.Tuple([call_1944,var_1945,var_1946,call_1960,bop_1966,call_1981,call_1985,uop_1997,])
output2 = relay.Tuple([call_1947,var_1945,var_1946,call_1961,bop_1969,call_1982,call_1986,uop_1997,])
func_2003 = relay.Function([var_1937,var_1945,var_1946,], output)
mod['func_2003'] = func_2003
mod = relay.transform.InferType()(mod)
var_2004 = relay.var("var_2004", dtype = "float32", shape = (16, 3, 7))#candidate|2004|(16, 3, 7)|var|float32
var_2005 = relay.var("var_2005", dtype = "float32", shape = (15, 6))#candidate|2005|(15, 6)|var|float32
var_2006 = relay.var("var_2006", dtype = "float64", shape = (864,))#candidate|2006|(864,)|var|float64
output = func_2003(var_2004,var_2005,var_2006,)
func_2007 = relay.Function([var_2004,var_2005,var_2006,], output)
mutated_mod['func_2007'] = func_2007
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2467 = relay.var("var_2467", dtype = "float32", shape = (3, 9, 6))#candidate|2467|(3, 9, 6)|var|float32
uop_2468 = relay.sin(var_2467.astype('float32')) # shape=(3, 9, 6)
func_2003_call = mod.get_global_var('func_2003')
func_2007_call = mutated_mod.get_global_var('func_2007')
const_2477 = relay.const([-3.439542,-7.162226,8.279125,-7.818951,6.066847,-0.955107,6.514364,-3.097747,0.930917,-6.895279,9.289886,-3.724547,1.374601,-1.592921,-7.176652,0.364777,6.059456,9.810320,0.446345,-6.635267,-3.518856,6.732141,5.337169,6.380169,-4.355505,-8.644315,4.569459,9.098934,-0.983757,0.086425,6.431368,8.627479,-2.342459,6.860422,5.852344,-4.642136,-7.645167,4.908885,9.404847,3.328819,-6.349572,9.920856,-2.622875,-8.555261,1.849879,9.735008,-7.272414,7.219409,7.814594,6.522616,-9.026596,-4.031635,2.172205,-3.722860,-2.183470,-4.950561,6.296576,-9.303448,7.095401,-8.693320,-1.984141,6.082891,6.777679,9.271827,9.188455,6.305652,-7.468046,-6.950074,9.166686,8.926387,-9.964664,-7.727493,0.565108,5.659458,7.907386,5.906623,1.605880,-8.998088,4.874684,3.306411,-5.927962,3.985270,-4.303679,-1.472101,-1.160021,-9.946125,-0.158685,6.240228,6.258875,-3.157349,-2.243418,7.821355,-3.207133,-0.071267,9.383658,-5.339936,-4.149754,9.350408,3.187344,-7.396321,0.844058,1.651147,2.008241,7.372467,4.739113,1.065121,-0.884744,-6.287243,4.176322,-5.092582,-5.972466,-8.690663,-2.405126,-8.707352,-4.284200,-5.004290,8.561368,9.640279,-8.847303,9.179092,-0.923193,2.530897,0.607251,7.885214,6.555808,-0.615103,-0.203944,-4.894262,-5.556674,-4.174039,-4.718595,-0.802431,-8.655884,-5.656770,-3.307594,9.324834,1.692060,5.816184,-6.024687,8.290397,5.587932,9.048687,-2.624707,-2.401081,-5.191628,0.294650,4.364443,-7.242003,5.853231,-7.235871,8.116459,-8.675007,3.444926,2.100460,-6.823081,8.074382,-8.138814,7.084344,-1.388215,0.786070,0.576976,2.228547,-1.414988,-3.019664,8.213386,-8.624881,-8.886167,8.277033,-6.516094,8.358738,9.804991,-6.059864,-4.679269,-9.076955,-3.085950,4.841183,3.007750,-7.689757,1.743715,4.129500,-9.041984,6.553613,0.723127,-2.319932,5.014529,-2.239167,-1.187226,8.482248,3.911678,2.981959,8.377426,1.380721,-5.555845,3.656902,-8.679124,-0.859371,-9.619090,-7.426702,-4.367413,1.754355,-3.214574,-8.262531,1.838523,8.541834,6.767858,-7.427831,-8.019676,3.049666,6.625338,-5.566166,-6.476865,-5.228243,-1.724326,-9.925014,4.427337,-0.033755,5.248771,-1.118048,-4.227292,0.744172,3.082441,5.518616,6.783113,-0.978807,1.836484,5.225752,9.308465,-1.700983,-2.938824,-2.433521,-6.984146,5.161055,8.026874,-4.746597,-8.875164,8.967515,0.064663,4.980759,-3.994353,-8.881610,-5.752920,7.986757,0.389810,6.548590,-6.448979,-3.977582,-6.327619,-7.724762,9.860153,-8.744573,3.499810,0.879598,-0.753824,5.253666,-8.551631,-7.055942,3.012940,-8.291638,3.449493,-6.142985,3.398950,-0.952660,0.040181,4.444935,-6.871657,-8.042998,-2.886164,-4.879262,-0.276859,6.123413,7.189836,8.374920,9.825714,-6.100147,3.602651,-1.640309,0.860551,-0.408378,6.726197,3.572270,9.666492,3.507694,-7.470550,-2.046131,-0.349726,1.472643,2.547028,-7.945290,8.200273,7.932568,-5.860911,9.286711,2.920581,-9.092850,-5.509846,-2.952946,5.095353,8.651909,0.274001,-0.857739,8.749445,-5.075480,-6.173654,1.493660,6.300354,-1.622495,-7.863446,8.630099,9.786054,-9.695834,2.516689,-1.796562,5.128317,-8.018785,1.957470,-8.771297,2.856069,-4.548775,5.039258,6.781211,-9.504698,-6.198731,5.403693,-7.382446,6.497041,-2.001172,5.637000,9.232161,-4.237905,-9.004851,-3.568251,-0.851347,3.572734,3.058799,-9.569765,7.777295], dtype = "float32")#candidate|2477|(336,)|const|float32
var_2478 = relay.var("var_2478", dtype = "float32", shape = (90,))#candidate|2478|(90,)|var|float32
const_2479 = relay.const([1.766317,5.729945,-7.050406,2.921521,9.121177,-0.108219,-1.043304,2.776621,3.878370,-0.745047,2.558806,8.973263,-8.462786,4.372014,-0.510185,-4.403568,9.673661,4.769913,3.023213,-5.793784,-3.504294,-0.812226,-9.865303,-6.980985,6.553009,0.887009,-7.466027,-0.932903,-8.025840,-8.764758,-4.920764,-9.185035,-0.211134,6.387363,-5.198913,-3.200059,6.951362,2.383967,-8.346844,0.991620,-3.560778,-8.169452,2.329525,3.891899,5.264920,6.280032,2.279336,0.963225,2.765643,2.503198,-9.094888,-6.066035,-7.359273,9.212137,3.786206,-6.236858,-5.458697,-1.674971,-5.103076,7.903602,8.208925,7.523941,-9.976517,-1.394974,-0.507137,8.889043,-8.930154,-2.745762,6.128491,5.102838,-5.088073,-5.329394,2.869457,4.740976,9.801638,4.200395,2.343272,4.267205,8.011604,4.621696,0.394235,-3.223175,-8.270980,-9.316619,0.341344,-0.939035,-8.500628,-2.655813,5.101109,3.735104,-4.922447,8.402469,6.374496,1.850623,-5.780502,-5.286308,1.935550,4.878723,2.867950,5.798041,-3.259973,1.794638,-8.886855,-5.743069,4.140932,-1.881536,-7.362707,4.262836,-9.360231,-1.284624,2.385973,-6.692838,8.592984,-7.455627,-3.372956,4.211863,5.659984,0.701203,-2.018544,3.846856,5.337231,8.599386,5.428571,7.395236,5.849158,-8.967262,7.158167,9.972036,1.669271,8.446627,5.360472,-8.790929,5.082636,9.595826,2.372274,6.031851,-4.285296,-0.718603,5.284740,-1.869542,1.766935,5.559969,2.909985,9.055126,-5.164327,-7.378517,-6.294013,-6.215815,-9.269306,7.068345,-0.835483,-5.894258,-1.157868,-6.989925,0.179630,-3.896484,-2.594709,4.934693,6.100157,-2.396258,3.724789,2.545119,4.525770,-2.578245,0.525081,1.318311,-5.634682,0.760394,-9.256915,5.098130,-2.771100,-3.988614,2.340482,-9.919751,-8.765595,9.002396,-4.290397,3.874940,-4.661467,5.532440,-9.202034,-8.658677,4.538777,7.693545,8.300290,9.337296,-2.981494,-2.006034,0.629679,-0.314553,5.055604,0.323009,6.959513,1.060801,-6.285868,8.931524,3.270777,-2.969396,5.489072,-4.523351,-4.796731,-0.362890,6.918821,-7.331991,-9.104644,3.604641,-8.349475,0.827597,1.003251,-7.068247,6.905379,-1.882946,3.019290,2.230928,-8.215577,9.816238,4.481579,-9.267233,2.573565,1.321176,4.163247,6.720469,-3.886918,0.537183,-2.292730,9.934181,-8.867118,-2.582956,-4.446149,-2.435628,-7.033184,4.603281,-6.400592,-1.178054,5.049099,8.706298,-5.083739,-1.799174,9.264464,5.248272,8.731697,0.748463,-9.027846,5.154174,-9.692843,-6.519715,-4.208838,-9.642352,9.721531,-4.129253,0.168739,3.239414,-1.648535,-6.467633,-9.242582,4.497613,-0.075354,3.702857,6.795367,-6.933457,-7.160606,-9.719735,-6.462835,8.582321,1.915410,-5.197995,7.879954,8.128464,-5.676327,9.106619,3.862852,-6.015240,-9.210207,-0.260683,0.516790,4.468965,3.798903,-9.482154,-5.132147,0.780405,3.953615,-5.387302,-9.276327,-2.652949,7.745784,9.749933,6.346585,3.803158,6.373154,4.838520,-1.550660,-3.664001,-1.865127,4.215475,4.582324,-8.425884,3.952397,4.389648,-8.776960,-1.656752,-3.575672,-6.662295,2.530301,0.385169,-4.653814,7.666840,2.689996,-1.535376,-4.397604,-2.320358,0.010306,-8.498756,-1.966241,-6.089997,-1.062607,-2.078926,-5.431566,-4.083989,-9.102400,-8.315532,-8.527570,5.118656,9.742917,1.090761,-3.575304,7.875793,-4.635214,-3.944276,-0.272186,-2.244695,8.870365,6.036668,5.267656,1.180931,9.042019,-7.352253,-1.720271,1.955594,-3.474920,5.678045,-9.860806,-0.732301,2.438329,4.027851,6.845381,-8.285305,6.890931,-8.984219,7.208498,-3.491332,4.713542,-5.499180,2.133133,6.653427,-3.377917,-5.460374,-5.616676,9.500307,2.787248,9.782260,-4.764815,1.326582,2.097380,0.109758,5.266728,8.046096,-4.480553,-3.316104,2.726610,3.924008,1.884664,-9.189246,-3.026443,3.274027,9.147491,-8.819506,-6.008838,2.099555,9.597760,-4.173449,-2.556643,9.841290,0.605171,-2.774107,-3.888928,-4.866595,0.611020,8.672749,-4.448947,9.612076,7.905348,-2.376195,9.224695,2.806657,-9.588199,-8.014883,9.891757,7.530110,6.632465,6.034569,-3.428531,2.807082,-2.438643,9.266034,6.671281,-8.012327,5.458444,-6.168360,-7.547671,8.232106,1.153520,-0.070091,-9.303637,8.425285,9.991502,2.845528,-8.798540,-4.743095,4.103684,-3.062529,-5.696086,2.021657,0.153039,3.125706,9.357865,-8.949966,-3.584182,1.771472,-2.781373,-4.484652,8.661307,0.336374,2.098696,-6.849405,-6.753083,1.303466,-3.255266,-1.213679,2.443088,4.346818,-7.074924,4.194563,-2.025422,8.731914,-4.412037,8.280097,7.071778,4.072541,-9.692079,7.264958,-2.835753,1.034388,0.563516,-7.638349,0.277076,7.351495,6.232620,-5.723883,8.096800,9.656442,-7.501035,8.511460,8.826143,-1.885238,2.667561,-4.284427,-4.970743,-3.200687,7.480705,-4.126592,-9.740271,9.993228,0.852711,-6.035436,2.917939,-0.091971,-4.377492,-3.824513,-0.268019,2.781713,-6.941626,-6.004550,5.065087,4.276816,0.237640,-7.560194,5.964594,-9.525941,0.310201,-8.719650,-5.595877,-7.327323,-4.974971,-8.193184,9.462609,-1.982405,-5.791237,2.771043,0.787943,-7.181958,-6.765110,8.986464,-6.617557,-6.861999,-0.563577,5.010777,7.960658,5.637568,-5.771034,4.701694,8.261884,1.940351,-6.046550,8.297901,3.313354,-8.690650,-9.726515,-5.079847,5.906234,8.953589,1.796878,-6.610971,-8.166615,-4.248143,-6.620644,0.160412,-6.725504,2.887025,4.668879,-6.204508,-8.075749,-6.059785,-8.156392,-1.897318,-2.851013,8.344417,-0.385581,-0.851108,4.472321,8.629525,-0.079475,0.304184,0.686010,0.259805,-1.188309,-2.989998,8.741464,6.706370,1.071704,1.885357,9.772771,5.864187,4.166099,2.487575,-5.647769,-3.428287,1.754689,5.701850,-9.781050,5.992026,3.178257,0.673068,-3.462229,-2.253373,-5.409589,2.632180,2.733853,1.118883,6.092451,0.321611,2.218038,-9.491312,-5.869781,-8.047207,6.236480,9.546148,8.437369,0.230993,9.532818,6.876124,2.883378,-9.162278,7.249852,4.454271,-1.193449,-8.099604,-8.741202,-5.216226,3.116016,5.259809,-8.946551,6.621819,-9.734200,3.901419,-0.551553,8.536968,-3.012536,-2.037748,-0.762072,-7.641667,0.318133,-6.104351,5.778689,-7.760191,3.596495,8.804426,-0.760333,5.361611,1.697577,-4.000585,1.853514,-2.886242,6.600088,4.747671,-2.187470,-4.261638,1.654313,-2.233016,1.618291,9.719687,-8.408975,-5.536527,2.969625,6.150684,4.889380,-1.237502,-2.711826,-7.501752,-2.574224,5.892747,9.432975,-5.992344,-0.755252,5.702265,8.208346,3.525199,-7.611586,-4.261995,8.955675,-5.433028,1.184157,-6.631401,0.927110,-1.395814,-3.143646,7.515599,6.628184,-3.568145,-6.848637,-8.806002,-4.744340,2.377463,4.196715,-6.328790,-6.924837,2.814940,-5.670999,2.668691,-3.600905,1.480331,9.037111,-6.192140,-4.734882,-1.719281,1.389168,-9.685210,-9.486041,-1.747291,3.404832,0.188527,5.814464,4.630098,-7.264351,-0.535941,-9.825404,2.840119,-9.221700,2.411845,5.435221,8.685498,-3.262441,-3.400959,3.713869,-4.833179,-4.225327,-9.873209,2.447713,5.210949,-2.290614,-0.496935,6.240796,-0.495653,-4.354888,-1.444949,-0.864242,-7.130877,5.393797,7.783775,4.660891,6.417068,0.398991,8.372457,8.884132,-5.217934,-2.691336,0.244499,4.670523,2.430364,6.409337,8.169949,0.158601,-7.536986,-1.474902,-0.297227,0.131153,5.337308,1.740483,2.552332,3.296756,5.031629,2.784340,3.481959,-5.537901,-7.671098,-0.993803,9.233106,5.516401,-2.181008,-7.282944,7.896598,-8.865920,-3.178830,4.330025,0.133421,-1.984587,4.396600,4.411083,-1.731216,8.925077,4.095879,-7.482271,-4.259473,-7.933504,2.060054,4.779956,-2.614234,-4.209852,9.099131,1.134585,-0.398964,4.045980,0.453516,2.345013,1.298362,-4.439520,-0.961183,4.291732,-5.237232,-1.104766,-3.444242,-0.598989,8.442738,-9.997940,-9.074990,1.967864,7.205453,-9.667291,0.343455,-6.577392,3.610166,1.033362,0.055163,-5.075479,-3.717370,2.530525,-3.196441,-9.974066,-4.194601,-5.657771,-4.458553,-5.073219,2.031445,-8.447760,-4.887617,0.984407,8.150024,4.730789,5.952251,-0.244392,-8.674351,7.519758,6.353496,4.291876,-1.665165,-6.583286,0.917608,-7.784453,-6.592936,-8.183620,7.525941,-7.691141,-8.564255,3.362950,3.019542,-9.880708,0.313401,-5.133287,1.113115,9.117018,4.598844,-5.592524,-6.179266,5.125231,5.999448,4.694038,5.104056,2.925830,9.322730,-0.181728,-0.241242,4.235763,-5.784456,-9.534766,9.624187,3.409012,1.696396,2.528406,-2.594930,-3.726515,-0.710663,-7.080818,2.739841,-0.031939,-9.214032,1.704556,7.231525,-7.584481,-6.159311,1.355023,-1.597562,5.915304,-9.561273,2.561993,2.856917,-5.989451,5.898172,-9.805913,-3.937064,-4.684355,4.337000,4.796680,-6.230593,-8.183268,-5.346886,-4.315187,-5.366424,-1.215186,-2.866447,4.027591,-2.080463,-5.100429,-0.170459,-5.891718,7.480380], dtype = "float64")#candidate|2479|(864,)|const|float64
call_2476 = relay.TupleGetItem(func_2003_call(relay.reshape(const_2477.astype('float32'), [16, 3, 7]), relay.reshape(var_2478.astype('float32'), [15, 6]), relay.reshape(const_2479.astype('float64'), [864,]), ), 0)
call_2480 = relay.TupleGetItem(func_2007_call(relay.reshape(const_2477.astype('float32'), [16, 3, 7]), relay.reshape(var_2478.astype('float32'), [15, 6]), relay.reshape(const_2479.astype('float64'), [864,]), ), 0)
func_1117_call = mod.get_global_var('func_1117')
func_1119_call = mutated_mod.get_global_var('func_1119')
var_2487 = relay.var("var_2487", dtype = "float32", shape = (20,))#candidate|2487|(20,)|var|float32
call_2486 = relay.TupleGetItem(func_1117_call(relay.reshape(var_2487.astype('float32'), [4, 5, 1])), 0)
call_2488 = relay.TupleGetItem(func_1119_call(relay.reshape(var_2487.astype('float32'), [4, 5, 1])), 0)
output = relay.Tuple([uop_2468,call_2476,const_2477,var_2478,const_2479,call_2486,var_2487,])
output2 = relay.Tuple([uop_2468,call_2480,const_2477,var_2478,const_2479,call_2488,var_2487,])
func_2494 = relay.Function([var_2467,var_2478,var_2487,], output)
mod['func_2494'] = func_2494
mod = relay.transform.InferType()(mod)
mutated_mod['func_2494'] = func_2494
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2494_call = mutated_mod.get_global_var('func_2494')
var_2496 = relay.var("var_2496", dtype = "float32", shape = (3, 9, 6))#candidate|2496|(3, 9, 6)|var|float32
var_2497 = relay.var("var_2497", dtype = "float32", shape = (90,))#candidate|2497|(90,)|var|float32
var_2498 = relay.var("var_2498", dtype = "float32", shape = (20,))#candidate|2498|(20,)|var|float32
call_2495 = func_2494_call(var_2496,var_2497,var_2498,)
output = call_2495
func_2499 = relay.Function([var_2496,var_2497,var_2498,], output)
mutated_mod['func_2499'] = func_2499
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3257 = relay.var("var_3257", dtype = "float64", shape = (12, 12, 6))#candidate|3257|(12, 12, 6)|var|float64
var_3258 = relay.var("var_3258", dtype = "float64", shape = (12, 12, 6))#candidate|3258|(12, 12, 6)|var|float64
bop_3259 = relay.less_equal(var_3257.astype('bool'), relay.reshape(var_3258.astype('bool'), relay.shape_of(var_3257))) # shape=(12, 12, 6)
var_3265 = relay.var("var_3265", dtype = "bool", shape = (12, 12, 6))#candidate|3265|(12, 12, 6)|var|bool
bop_3266 = relay.logical_xor(bop_3259.astype('int64'), relay.reshape(var_3265.astype('int64'), relay.shape_of(bop_3259))) # shape=(12, 12, 6)
func_944_call = mod.get_global_var('func_944')
func_947_call = mutated_mod.get_global_var('func_947')
const_3286 = relay.const([[3.735389],[4.398028],[3.286462],[3.327805],[6.051204],[1.648605],[-8.242979],[2.634812],[0.956277],[2.559882],[8.485216],[7.946885],[-7.952944],[-9.082312],[-8.650830],[4.497712],[-6.672492],[-2.927760],[-0.911562],[5.004760],[-2.650873],[-1.399080],[1.477232],[-9.337444],[-6.760982],[-3.838761],[-2.214385],[5.716239],[-2.669975],[4.161779],[2.837445],[4.621422],[0.035169],[9.442995],[6.829716],[-6.100303],[-9.929330],[-0.258579],[-1.035120],[-1.681549],[0.495083],[-9.028430],[-6.822015],[-3.138022],[3.059487],[1.011612],[-4.118890],[-2.061933],[-0.558773],[6.057884],[5.301565],[6.093305],[8.153059],[2.538018],[9.911943],[-5.860943],[1.758280],[-9.832644],[-6.958949],[-5.468663],[-3.885614],[-3.081098],[-1.694033],[6.008714],[-0.926088],[-9.526652],[-0.140275],[2.388493],[-8.916135],[7.331383],[5.012603],[-8.989100],[3.833505],[-9.791155],[2.504216],[6.797149],[7.654158],[3.258338],[7.093323],[-1.561844],[4.390770],[0.289398],[7.937363],[5.358139],[8.704909],[4.091602],[-8.874507],[3.824448],[-5.114359],[6.860238]], dtype = "float32")#candidate|3286|(90, 1)|const|float32
call_3285 = relay.TupleGetItem(func_944_call(relay.reshape(const_3286.astype('float32'), [10, 3, 3]), relay.reshape(bop_3259.astype('float64'), [2, 432]), ), 0)
call_3287 = relay.TupleGetItem(func_947_call(relay.reshape(const_3286.astype('float32'), [10, 3, 3]), relay.reshape(bop_3259.astype('float64'), [2, 432]), ), 0)
func_2494_call = mod.get_global_var('func_2494')
func_2499_call = mutated_mod.get_global_var('func_2499')
var_3294 = relay.var("var_3294", dtype = "float32", shape = (162,))#candidate|3294|(162,)|var|float32
const_3295 = relay.const([-5.538222,8.420279,-6.280320,1.804924,9.836336,5.482475,8.520340,4.721200,3.364027,-1.852266,3.165930,-9.222137,4.248367,3.632294,7.573615,5.948513,-2.994156,4.249080,9.221270,-3.488695], dtype = "float32")#candidate|3295|(20,)|const|float32
call_3293 = relay.TupleGetItem(func_2494_call(relay.reshape(var_3294.astype('float32'), [3, 9, 6]), relay.reshape(const_3286.astype('float32'), [90,]), relay.reshape(const_3295.astype('float32'), [20,]), ), 6)
call_3296 = relay.TupleGetItem(func_2499_call(relay.reshape(var_3294.astype('float32'), [3, 9, 6]), relay.reshape(const_3286.astype('float32'), [90,]), relay.reshape(const_3295.astype('float32'), [20,]), ), 6)
output = relay.Tuple([bop_3266,call_3285,const_3286,call_3293,var_3294,const_3295,])
output2 = relay.Tuple([bop_3266,call_3287,const_3286,call_3296,var_3294,const_3295,])
func_3307 = relay.Function([var_3257,var_3258,var_3265,var_3294,], output)
mod['func_3307'] = func_3307
mod = relay.transform.InferType()(mod)
var_3308 = relay.var("var_3308", dtype = "float64", shape = (12, 12, 6))#candidate|3308|(12, 12, 6)|var|float64
var_3309 = relay.var("var_3309", dtype = "float64", shape = (12, 12, 6))#candidate|3309|(12, 12, 6)|var|float64
var_3310 = relay.var("var_3310", dtype = "bool", shape = (12, 12, 6))#candidate|3310|(12, 12, 6)|var|bool
var_3311 = relay.var("var_3311", dtype = "float32", shape = (162,))#candidate|3311|(162,)|var|float32
output = func_3307(var_3308,var_3309,var_3310,var_3311,)
func_3312 = relay.Function([var_3308,var_3309,var_3310,var_3311,], output)
mutated_mod['func_3312'] = func_3312
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3681 = relay.var("var_3681", dtype = "bool", shape = (12, 10, 7))#candidate|3681|(12, 10, 7)|var|bool
const_3682 = relay.const([[[True,True,False,True,True,False,True],[False,True,False,False,True,True,False],[False,True,True,False,False,False,True],[False,True,False,False,False,True,True],[False,False,True,False,True,False,True],[False,False,True,False,True,True,True],[True,False,True,True,False,False,True],[False,False,False,False,False,False,False],[False,True,True,True,True,True,True],[False,True,False,False,True,True,True]],[[True,False,False,False,True,True,True],[True,True,True,True,False,True,True],[False,False,True,False,True,False,True],[True,True,False,True,False,True,False],[False,False,True,True,True,True,True],[False,False,False,True,True,True,False],[True,True,True,True,True,False,False],[False,False,True,True,False,False,True],[False,True,True,False,True,False,True],[False,True,False,False,True,True,True]],[[False,False,True,False,True,False,True],[False,False,True,True,True,True,False],[True,True,True,True,False,False,False],[True,False,True,False,True,False,False],[False,True,False,True,True,True,True],[True,False,False,True,False,False,False],[True,True,True,False,False,False,False],[False,True,False,True,True,True,True],[True,True,False,True,False,False,False],[False,True,True,True,True,False,False]],[[False,False,True,True,True,False,False],[True,False,False,True,True,False,False],[True,True,False,False,True,False,True],[True,False,False,True,True,True,False],[True,True,True,True,True,False,False],[False,False,False,True,False,False,False],[False,False,True,True,False,True,True],[True,True,False,False,True,False,False],[False,False,False,True,True,True,False],[True,True,True,True,True,True,True]],[[False,False,True,False,False,False,True],[False,True,False,True,False,False,False],[True,True,False,False,True,False,True],[False,False,False,True,True,True,True],[True,False,False,True,False,True,True],[True,False,False,True,True,False,True],[False,False,True,True,True,True,True],[False,True,True,True,True,True,False],[True,False,True,False,False,True,True],[True,True,False,False,True,False,True]],[[False,False,False,False,False,True,False],[False,False,True,False,False,False,True],[True,True,False,False,True,True,False],[False,True,True,True,False,True,True],[True,True,False,True,True,True,False],[False,False,False,False,True,True,False],[True,False,False,False,True,False,True],[True,True,True,True,False,True,False],[False,False,True,True,False,True,True],[True,False,True,True,True,True,True]],[[False,False,False,True,False,False,True],[False,False,False,True,True,False,False],[False,True,False,False,True,True,False],[True,False,True,True,True,False,False],[False,True,False,False,True,False,True],[False,False,False,False,False,True,True],[True,True,True,True,False,True,False],[True,False,False,True,False,True,False],[True,True,False,True,False,False,True],[True,False,False,True,False,True,True]],[[False,False,False,False,True,True,True],[True,False,True,False,False,True,True],[True,False,True,False,True,False,False],[True,False,True,True,True,False,False],[True,True,False,False,True,False,False],[False,False,True,True,False,True,True],[True,False,True,False,True,False,False],[False,False,False,False,True,False,True],[False,False,True,True,True,True,True],[False,False,True,False,False,True,True]],[[False,False,False,True,False,True,True],[True,False,False,False,False,False,False],[True,False,True,True,False,False,True],[True,False,False,True,False,False,True],[False,True,False,False,True,True,False],[True,False,True,True,False,True,True],[True,False,True,False,False,False,False],[True,False,True,False,False,True,False],[False,True,True,False,False,False,True],[True,True,True,True,True,False,False]],[[False,False,True,True,False,False,True],[False,False,True,True,False,False,False],[True,False,False,True,True,True,False],[False,True,True,True,False,False,False],[False,False,False,False,False,True,True],[False,True,False,True,True,False,False],[False,False,False,True,False,False,False],[False,False,False,False,True,True,True],[False,True,False,False,False,False,False],[False,False,True,True,True,True,False]],[[True,True,False,True,False,True,False],[False,True,False,False,True,True,False],[True,False,False,True,False,False,True],[False,False,True,False,False,False,True],[False,True,True,True,True,False,False],[True,True,False,True,False,False,False],[False,True,False,True,False,False,False],[False,False,True,False,True,False,False],[True,False,False,True,True,True,False],[False,True,False,True,False,False,True]],[[True,True,True,True,False,True,False],[False,False,False,False,False,True,False],[True,True,True,True,True,True,False],[False,False,True,True,False,True,False],[False,False,True,True,True,False,False],[True,False,False,False,False,False,False],[False,True,True,False,False,False,True],[True,True,True,False,True,False,True],[True,False,True,False,False,True,True],[True,True,False,False,True,False,False]]], dtype = "bool")#candidate|3682|(12, 10, 7)|const|bool
bop_3683 = relay.logical_and(var_3681.astype('bool'), relay.reshape(const_3682.astype('bool'), relay.shape_of(var_3681))) # shape=(12, 10, 7)
uop_3691 = relay.sqrt(var_3681.astype('float64')) # shape=(12, 10, 7)
output = relay.Tuple([bop_3683,uop_3691,])
output2 = relay.Tuple([bop_3683,uop_3691,])
func_3698 = relay.Function([var_3681,], output)
mod['func_3698'] = func_3698
mod = relay.transform.InferType()(mod)
var_3699 = relay.var("var_3699", dtype = "bool", shape = (12, 10, 7))#candidate|3699|(12, 10, 7)|var|bool
output = func_3698(var_3699)
func_3700 = relay.Function([var_3699], output)
mutated_mod['func_3700'] = func_3700
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3761 = relay.var("var_3761", dtype = "float32", shape = (11, 13, 1))#candidate|3761|(11, 13, 1)|var|float32
uop_3762 = relay.acos(var_3761.astype('float32')) # shape=(11, 13, 1)
output = uop_3762
output2 = uop_3762
func_3767 = relay.Function([var_3761,], output)
mod['func_3767'] = func_3767
mod = relay.transform.InferType()(mod)
var_3768 = relay.var("var_3768", dtype = "float32", shape = (11, 13, 1))#candidate|3768|(11, 13, 1)|var|float32
output = func_3767(var_3768)
func_3769 = relay.Function([var_3768], output)
mutated_mod['func_3769'] = func_3769
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4287 = relay.var("var_4287", dtype = "float32", shape = (8, 1, 1))#candidate|4287|(8, 1, 1)|var|float32
uop_4288 = relay.log10(var_4287.astype('float32')) # shape=(8, 1, 1)
bop_4293 = relay.less(uop_4288.astype('bool'), relay.reshape(var_4287.astype('bool'), relay.shape_of(uop_4288))) # shape=(8, 1, 1)
func_2494_call = mod.get_global_var('func_2494')
func_2499_call = mutated_mod.get_global_var('func_2499')
const_4300 = relay.const([6.916305,1.684012,6.104025,5.026132,-6.992591,-3.393932,7.773247,-7.179150,-9.891379,-7.592539,1.057288,-0.345313,-3.219087,0.032749,2.650822,4.027942,-0.296609,-4.835747,-6.397734,-2.835859,-0.436330,-2.277694,7.501023,-7.739871,8.530015,7.607713,-7.987559,-7.365517,-1.133285,-1.636995,4.626761,-8.148347,7.690317,1.241344,-2.284257,-2.641420,-9.755390,-1.570813,5.050960,5.504007,1.325218,5.100897,-3.904101,-5.766675,4.631437,1.582383,-5.098522,3.124295,-2.794146,-6.808649,-7.235767,3.397365,6.425465,-6.134333,6.762640,-6.911309,8.379262,-0.597672,1.138214,-7.813260,0.184403,0.145489,1.922142,4.864162,-6.908397,-7.224591,-8.259374,1.646132,6.504860,-3.115257,-7.691538,8.374003,-2.196773,3.179373,-8.297449,0.385940,4.587239,-8.231540,9.138940,4.761416,7.976859,-5.250283,1.879293,4.857903,-9.153447,0.784135,-5.357813,-7.243412,-8.121154,-9.630560,7.842889,6.742806,4.632178,3.914620,1.090348,-3.022772,-0.376659,5.061721,-5.891171,-3.407728,-5.060209,0.573498,-8.979815,-6.182183,-8.877585,1.427882,-0.342411,-4.372836,-1.842373,-4.604628,-3.726192,-4.932594,2.303452,1.784059,4.377843,-8.876132,9.796690,-7.400019,7.854535,6.379245,-7.670308,4.304105,5.626087,-4.838616,9.114588,7.163290,9.470929,-0.535129,8.976592,-1.869030,9.832702,6.476134,9.525974,-0.464091,-0.984690,-4.501488,6.204452,5.831193,7.660936,-1.704616,-4.192831,5.866480,-2.958404,-9.473637,0.680059,-7.039688,-9.708068,3.215544,4.786856,-7.103799,6.856370,-5.466671,3.236445,5.522030,0.542855,2.272807,-5.713272,5.288128,6.617994,-7.308943,4.639023,5.354473], dtype = "float32")#candidate|4300|(162,)|const|float32
var_4301 = relay.var("var_4301", dtype = "float32", shape = (90,))#candidate|4301|(90,)|var|float32
const_4302 = relay.const([-7.248577,8.339151,6.460323,-1.294713,-6.917447,-0.661690,-5.574316,1.981283,-6.570627,-4.100633,-6.767713,5.024039,9.806406,5.324509,-9.323956,1.357723,-2.620862,-4.250988,-6.934116,2.240911], dtype = "float32")#candidate|4302|(20,)|const|float32
call_4299 = relay.TupleGetItem(func_2494_call(relay.reshape(const_4300.astype('float32'), [3, 9, 6]), relay.reshape(var_4301.astype('float32'), [90,]), relay.reshape(const_4302.astype('float32'), [20,]), ), 6)
call_4303 = relay.TupleGetItem(func_2499_call(relay.reshape(const_4300.astype('float32'), [3, 9, 6]), relay.reshape(var_4301.astype('float32'), [90,]), relay.reshape(const_4302.astype('float32'), [20,]), ), 6)
bop_4307 = relay.mod(const_4302.astype('float64'), bop_4293.astype('float64')) # shape=(8, 1, 20)
bop_4321 = relay.bitwise_and(bop_4293.astype('uint32'), const_4302.astype('uint32')) # shape=(8, 1, 20)
func_3307_call = mod.get_global_var('func_3307')
func_3312_call = mutated_mod.get_global_var('func_3312')
var_4331 = relay.var("var_4331", dtype = "float64", shape = (12, 72))#candidate|4331|(12, 72)|var|float64
call_4330 = relay.TupleGetItem(func_3307_call(relay.reshape(var_4331.astype('float64'), [12, 12, 6]), relay.reshape(var_4331.astype('float64'), [12, 12, 6]), relay.reshape(var_4331.astype('bool'), [12, 12, 6]), relay.reshape(const_4300.astype('float32'), [162,]), ), 0)
call_4332 = relay.TupleGetItem(func_3312_call(relay.reshape(var_4331.astype('float64'), [12, 12, 6]), relay.reshape(var_4331.astype('float64'), [12, 12, 6]), relay.reshape(var_4331.astype('bool'), [12, 12, 6]), relay.reshape(const_4300.astype('float32'), [162,]), ), 0)
func_232_call = mod.get_global_var('func_232')
func_234_call = mutated_mod.get_global_var('func_234')
call_4333 = relay.TupleGetItem(func_232_call(relay.reshape(call_4330.astype('float64'), [16, 6, 9])), 0)
call_4334 = relay.TupleGetItem(func_234_call(relay.reshape(call_4330.astype('float64'), [16, 6, 9])), 0)
func_3767_call = mod.get_global_var('func_3767')
func_3769_call = mutated_mod.get_global_var('func_3769')
const_4336 = relay.const([1.603401,4.432238,-8.021024,1.335202,-8.564156,1.716002,7.861155,-9.211549,6.711761,-5.984445,-9.807272,7.690444,-2.143700,-6.259144,2.766297,5.906199,-8.370510,7.098378,-5.129537,9.155068,-2.002452,9.183992,5.103887,-4.006279,-5.879536,-9.814385,2.623425,-6.001398,-5.888143,8.649569,-5.479298,-1.620948,-5.704249,-7.200792,-2.615512,4.412643,-8.541588,-4.375664,8.434731,2.281081,-9.646539,-7.127731,4.766125,0.372951,5.160380,-7.848769,-1.816132,4.022895,-7.447301,5.883405,2.728337,5.678708,-5.278929,1.445228,-5.154106,7.663463,4.383911,2.611415,-7.755321,-1.212999,5.678084,-4.804345,2.048591,-5.338439,7.037201,9.621867,7.475163,-8.595213,-8.337206,1.435720,-2.518392,3.445045,-1.305704,1.410454,-3.179861,-3.642818,-1.252167,3.109416,-8.917318,8.365444,8.153990,-7.203735,1.564701,-5.769078,5.615900,-6.167448,-4.228779,8.464424,-9.139294,-9.885272,-9.191999,2.029201,3.004842,-5.844114,-6.021417,5.642081,-7.013220,-4.005375,-2.658657,-3.487591,-7.697614,-8.461488,-3.825047,2.627588,-1.624118,8.487927,8.217134,4.118967,4.679710,-5.765931,7.056249,-7.717559,-7.354512,8.470239,3.591207,-7.338956,-0.409475,3.857426,-6.292358,-9.897604,-5.705317,0.088186,-6.910723,-3.699582,-8.502485,6.845930,-8.884064,-1.431696,8.167991,0.508925,2.304128,-7.379630,-3.233966,-1.780939,0.055481,0.650482,5.824859,8.649381,3.440718,8.271278,-6.648264,9.273364,-6.435195], dtype = "float32")#candidate|4336|(143,)|const|float32
call_4335 = func_3767_call(relay.reshape(const_4336.astype('float32'), [11, 13, 1]))
call_4337 = func_3767_call(relay.reshape(const_4336.astype('float32'), [11, 13, 1]))
func_2494_call = mod.get_global_var('func_2494')
func_2499_call = mutated_mod.get_global_var('func_2499')
call_4338 = relay.TupleGetItem(func_2494_call(relay.reshape(const_4300.astype('float32'), [3, 9, 6]), relay.reshape(var_4301.astype('float32'), [90,]), relay.reshape(const_4302.astype('float32'), [20,]), ), 5)
call_4339 = relay.TupleGetItem(func_2499_call(relay.reshape(const_4300.astype('float32'), [3, 9, 6]), relay.reshape(var_4301.astype('float32'), [90,]), relay.reshape(const_4302.astype('float32'), [20,]), ), 5)
var_4342 = relay.var("var_4342", dtype = "uint32", shape = (8, 14, 20))#candidate|4342|(8, 14, 20)|var|uint32
bop_4343 = relay.right_shift(bop_4321.astype('int8'), var_4342.astype('int8')) # shape=(8, 14, 20)
bop_4347 = relay.subtract(bop_4307.astype('int64'), bop_4293.astype('int64')) # shape=(8, 1, 20)
output = relay.Tuple([call_4299,const_4300,var_4301,call_4330,var_4331,call_4333,call_4335,const_4336,call_4338,bop_4343,bop_4347,])
output2 = relay.Tuple([call_4303,const_4300,var_4301,call_4332,var_4331,call_4334,call_4337,const_4336,call_4339,bop_4343,bop_4347,])
func_4354 = relay.Function([var_4287,var_4301,var_4331,var_4342,], output)
mod['func_4354'] = func_4354
mod = relay.transform.InferType()(mod)
var_4355 = relay.var("var_4355", dtype = "float32", shape = (8, 1, 1))#candidate|4355|(8, 1, 1)|var|float32
var_4356 = relay.var("var_4356", dtype = "float32", shape = (90,))#candidate|4356|(90,)|var|float32
var_4357 = relay.var("var_4357", dtype = "float64", shape = (12, 72))#candidate|4357|(12, 72)|var|float64
var_4358 = relay.var("var_4358", dtype = "uint32", shape = (8, 14, 20))#candidate|4358|(8, 14, 20)|var|uint32
output = func_4354(var_4355,var_4356,var_4357,var_4358,)
func_4359 = relay.Function([var_4355,var_4356,var_4357,var_4358,], output)
mutated_mod['func_4359'] = func_4359
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4570 = relay.var("var_4570", dtype = "float64", shape = (7, 11, 3))#candidate|4570|(7, 11, 3)|var|float64
uop_4571 = relay.exp(var_4570.astype('float64')) # shape=(7, 11, 3)
output = relay.Tuple([uop_4571,])
output2 = relay.Tuple([uop_4571,])
func_4580 = relay.Function([var_4570,], output)
mod['func_4580'] = func_4580
mod = relay.transform.InferType()(mod)
mutated_mod['func_4580'] = func_4580
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4581 = relay.var("var_4581", dtype = "float64", shape = (7, 11, 3))#candidate|4581|(7, 11, 3)|var|float64
func_4580_call = mutated_mod.get_global_var('func_4580')
call_4582 = func_4580_call(var_4581)
output = call_4582
func_4583 = relay.Function([var_4581], output)
mutated_mod['func_4583'] = func_4583
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4828 = relay.const([[[-4.344705,9.264456],[-6.435028,-0.700013],[-0.706589,-2.343788],[-3.634031,7.567153]],[[9.455344,-2.262670],[-7.848311,8.655175],[-5.487068,2.833295],[-7.827078,-1.629740]],[[-1.853240,1.362364],[-2.604146,-3.158691],[-8.986920,6.162048],[7.152640,6.063264]]], dtype = "float64")#candidate|4828|(3, 4, 2)|const|float64
uop_4829 = relay.sqrt(const_4828.astype('float64')) # shape=(3, 4, 2)
var_4839 = relay.var("var_4839", dtype = "float64", shape = (3, 4, 2))#candidate|4839|(3, 4, 2)|var|float64
bop_4840 = relay.divide(uop_4829.astype('float64'), relay.reshape(var_4839.astype('float64'), relay.shape_of(uop_4829))) # shape=(3, 4, 2)
output = relay.Tuple([bop_4840,])
output2 = relay.Tuple([bop_4840,])
func_4845 = relay.Function([var_4839,], output)
mod['func_4845'] = func_4845
mod = relay.transform.InferType()(mod)
mutated_mod['func_4845'] = func_4845
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4846 = relay.var("var_4846", dtype = "float64", shape = (3, 4, 2))#candidate|4846|(3, 4, 2)|var|float64
func_4845_call = mutated_mod.get_global_var('func_4845')
call_4847 = func_4845_call(var_4846)
output = call_4847
func_4848 = relay.Function([var_4846], output)
mutated_mod['func_4848'] = func_4848
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5340 = relay.var("var_5340", dtype = "float64", shape = (16, 11, 6))#candidate|5340|(16, 11, 6)|var|float64
var_5341 = relay.var("var_5341", dtype = "float64", shape = (16, 11, 6))#candidate|5341|(16, 11, 6)|var|float64
bop_5342 = relay.divide(var_5340.astype('float64'), relay.reshape(var_5341.astype('float64'), relay.shape_of(var_5340))) # shape=(16, 11, 6)
func_232_call = mod.get_global_var('func_232')
func_234_call = mutated_mod.get_global_var('func_234')
const_5367 = relay.const([-5.253083,-4.091739,2.366246,9.394870,-1.822389,5.046136,8.911451,-6.538577,-0.424203,7.768867,6.887595,-9.749683,5.577526,7.778790,0.157155,-8.647768,0.669843,6.071655,9.787341,3.455219,-0.672575,7.279424,-6.841104,-1.593971,-4.158897,-0.567617,-2.130348,-9.189763,-0.855345,5.709991,6.996421,7.276428,-1.727580,9.352138,7.770654,1.465890,8.442845,4.866191,7.607793,-5.772585,6.381348,5.986718,-3.733044,-1.697747,5.783708,-7.906692,0.426939,7.426193,-0.230297,6.908552,-0.087413,8.276104,6.825396,5.759970,-0.204854,3.032618,4.330275,-1.908753,-9.825126,-5.271698,-1.367386,-0.008508,6.581448,7.887247,-0.406844,0.569706,-7.589502,-6.139715,-2.107049,-9.113782,-1.645613,-0.969085,-7.656379,3.456436,9.789042,-8.861561,-1.802129,5.517362,-7.592882,7.871839,-8.322474,4.393800,5.637182,-4.435267,-0.881626,6.146629,-1.901673,-5.717847,-9.173749,0.119523,0.357270,7.761877,-0.178501,4.553843,0.135889,4.331820,-0.745356,-2.150901,9.981635,1.432139,2.361528,-7.534146,-8.675506,-4.402321,-9.183413,8.996034,8.161831,8.693365,4.635246,8.285423,8.575502,-1.259801,4.988763,4.766184,-8.879104,-7.735795,1.252916,7.802935,9.485781,-3.822783,-1.071040,-5.203680,-5.500323,9.043917,-3.245922,9.247535,-8.181888,5.940870,-4.301247,-1.786099,5.296129,6.895425,8.516396,9.167732,-7.982828,-6.508442,2.379582,2.654313,-2.357788,4.944394,0.102026,-1.366855,1.878199,8.341356,-2.371121,-6.844897,1.191323,0.171562,-2.401161,7.490033,-3.553294,6.025635,-4.216459,-2.843601,-7.964288,-3.196954,-1.458487,7.873489,-9.001704,2.898149,-0.324261,0.121647,3.388838,-1.892468,4.460339,9.029151,8.704034,7.940131,1.507110,-8.536931,6.823342,7.736564,7.080393,3.621780,1.334145,-5.136943,-6.810315,7.937720,-7.638116,-0.092831,-8.751932,-1.948879,-7.175712,5.169040,2.763522,0.946796,-6.204163,-3.206574,1.464966,-1.478654,-6.710023,-8.237593,-5.459980,7.740156,4.188052,-6.916433,2.562393,9.748428,-3.784954,9.586581,-9.995167,-5.107571,8.705305,-4.892129,0.428681,2.109356,-5.503514,-3.208946,-3.806151,2.845395,2.409706,4.677383,-8.509371,6.200857,4.367899,-2.280564,6.857846,5.614554,9.482212,-4.473839,-4.028339,2.336818,8.898607,4.079121,4.573781,-1.294093,-9.870392,0.216303,-0.109240,1.934041,8.881019,-6.481098,-1.309951,1.180097,3.197151,-9.402272,0.959740,-6.033667,-0.620426,-8.664933,6.175046,-7.320425,-4.810106,-2.244786,-7.331513,8.609996,-2.927626,3.170250,0.431929,-1.558710,-2.556205,-3.192304,-7.554816,-9.880467,-6.424288,-0.185122,7.543551,3.508709,-7.003366,4.282490,5.713372,-7.069245,-9.407765,-0.602818,-8.294449,-4.194368,-6.838535,4.748973,-9.076115,8.707469,-9.690560,-1.993479,-0.447166,-0.681249,6.064984,-4.758554,-2.499722,-6.290024,-4.255426,-7.664060,-7.556780,8.349451,5.920269,5.595371,-3.721703,-7.167845,9.606327,7.547106,-1.358530,-3.077411,7.601183,-9.184435,-2.895440,-0.856490,5.348125,8.159737,2.072844,-4.709298,8.094509,-5.702336,-1.007731,2.032112,7.657908,-8.510415,-9.024184,-3.071250,1.190800,5.543101,3.228975,-1.040590,-8.821438,-0.046436,-0.039431,-9.534842,5.750073,5.718948,0.330701,2.976006,7.749037,-5.788009,-0.247695,6.062369,3.447759,7.426899,-3.955086,2.498857,-7.560073,2.620704,0.248899,-8.515051,-3.484979,-5.111413,-3.597217,8.390579,8.960266,7.354768,-9.512732,9.669851,6.719346,-8.745316,-3.788441,-6.455936,-6.286071,3.161278,1.904544,-3.607323,-6.169061,9.048564,-4.755166,-2.229626,-0.005552,6.344229,5.705222,-9.961744,-0.956754,-8.175034,3.567887,6.418884,-1.028103,9.333329,-4.023083,-0.700308,-1.767115,-6.201900,-9.624416,4.291670,-5.645465,5.088995,5.422773,1.606285,-4.356839,9.335826,-8.047255,1.519844,3.618544,4.130467,-6.960042,-6.443348,4.063017,6.161973,-4.231681,8.797578,-1.214593,-9.796420,-4.287725,5.931970,7.224200,-7.300241,4.593420,3.013946,-3.311162,-3.035580,-9.970623,-7.253467,8.577309,1.400151,-8.146556,6.855453,0.006289,-5.813515,6.529254,-4.393169,-1.579033,-0.428374,1.531441,2.587898,-8.270189,-4.959666,-5.853163,9.258534,4.373105,1.950198,0.240673,-6.522252,-0.267531,-5.309351,-2.113695,8.330059,-7.182841,-5.596648,3.553231,9.895184,6.140900,-6.413277,-9.536365,-4.301989,-4.325702,7.012281,-8.927563,-4.558121,1.589754,-2.388377,4.140288,-2.470904,3.051727,9.020071,-6.729558,9.996659,1.806134,-3.059497,0.612724,3.498333,-8.553839,1.387263,-0.866138,-1.623734,-5.215815,2.901415,-0.291625,0.721734,-3.868968,-2.059238,-2.366143,-1.521359,5.909098,6.910418,2.555154,-3.741884,-3.318360,-6.881249,7.558774,-3.070842,8.720910,8.294952,3.851855,-4.076508,-4.225366,1.786231,-2.569599,-6.247073,-0.750392,-1.715833,-8.502152,5.906358,-0.363113,2.165662,-0.706804,4.563287,9.559601,0.705931,-9.246693,-0.877517,-8.560979,5.031639,4.528218,-4.089367,9.479047,-0.516765,9.223246,-8.186424,6.388193,7.679292,6.170918,-4.323967,-9.649121,-0.094302,4.392950,2.331009,-5.821252,-0.201324,-4.345801,4.067498,3.882090,9.921945,9.665621,-2.704191,5.912626,2.117961,-1.304121,1.975278,9.265039,3.835434,-1.539321,2.819864,3.776077,-4.179563,-1.073211,-1.490490,0.488538,6.985985,6.002337,-2.589382,7.577106,-2.005982,7.585934,-4.802583,4.392411,5.220575,-4.081788,-6.308515,-2.839285,8.602984,-8.042004,-0.709121,0.936159,-6.813763,6.920262,3.138793,-1.118193,-4.493290,6.208528,0.605827,4.483610,-6.236313,1.782265,1.147389,-3.293101,-3.742794,-5.111334,-2.540188,-9.251130,0.012067,2.065009,1.640102,-2.441354,5.329882,-1.924765,-3.607587,9.594974,-5.720370,5.029826,-0.978015,-8.422197,-9.143388,9.864205,6.463759,6.757420,7.271771,5.389355,4.531805,2.090113,-6.515978,9.997670,0.464511,6.330977,4.346535,0.619676,-6.619000,-7.954956,3.786851,-6.927397,-8.533341,5.580028,-4.618506,-8.975080,-0.942376,1.267243,4.637835,5.608178,3.154167,-1.927368,6.925398,9.864054,-1.655135,-5.930508,4.635344,-2.265837,-3.415035,-6.310055,-1.635818,-1.417241,-7.265334,5.096747,-2.456297,-7.992915,-4.429473,-0.691120,-5.858201,0.689811,-6.423825,-5.945353,-9.538575,4.609076,-3.728373,-2.545500,-9.614874,1.509772,-0.027641,-9.584585,1.423727,-5.720571,-3.105583,5.136920,-1.791722,5.262804,-1.336904,6.746851,-4.841484,-7.780113,-6.588717,8.051969,7.222583,7.614973,-3.327225,3.935284,-5.462653,9.878966,-4.472670,8.233061,5.485073,3.315752,2.274357,7.622347,7.269683,-6.975964,-0.800869,-2.275062,7.786270,2.024555,-4.255984,0.171305,-9.606902,0.092360,-2.921716,-1.376076,9.483954,1.254901,-9.364898,-1.325200,-7.217223,3.612702,-0.742891,9.576927,6.061705,9.602490,3.046316,-3.156984,6.308977,-0.055904,-7.918628,-2.895675,3.090794,-7.551875,-6.723701,8.877560,-6.574711,7.918391,9.948765,-6.290298,5.695436,-4.150924,-1.794770,-4.238507,-0.278458,9.440168,8.605306,-0.156851,-7.229879,-8.643019,1.135732,4.428825,-5.818270,-8.275362,1.065134,-2.320561,9.367437,2.631663,8.073525,2.033682,5.322565,6.599860,-0.250635,9.720793,-0.076214,5.782540,1.711809,9.414688,9.014271,7.225862,-6.855470,5.585059,-1.919894,-1.645942,4.199295,2.538914,-6.438275,8.809897,-5.895976,4.370762,6.267941,-0.073670,-4.076412,-5.241979,-8.085674,-2.126275,-2.436114,-2.984429,6.377360,-8.875852,-0.690937,8.189582,-6.091344,-8.593216,5.504455,-3.591522,-1.650543,5.715555,-9.199973,0.242990,-7.833493,-2.320039,2.113159,7.561930,2.489226,6.605525,-3.183244,-4.406020,-0.860780,4.835943,6.897831,-5.921047,0.627962,-8.682790,5.790785,-5.973795,8.949363,-8.998949,7.238536,1.299529,-8.443500,-0.801182,0.755446,2.946080,9.792208,4.016890,-5.188554,1.785344,-6.347204,-2.057172,3.858726,1.580612,4.764091,8.701615,0.654317,0.333693,-7.222050,-8.017179,-1.941500,3.328132,6.513389,-7.693404,-7.884896,4.176218,8.958581,-1.117071,-3.063422,-7.602151,-8.828531,-5.971889,-5.792373,2.391144,8.877227,3.540221,3.477226,-2.853106,6.901503,5.211703,-7.213596,-6.451020,-5.472645,-5.897839,-0.484986,-2.497777,-3.466682,5.922141,-6.002376,2.805901,-9.187907,0.653024,0.804392,-4.562351,1.360543,-1.130913,-1.489090,3.362187,-7.143774,4.773692,-1.156926,1.940646,-5.183804,-8.603892,0.197258,1.071437,-0.127578,9.660852,-8.634491,-7.151758,1.253970,7.463517,-0.840417,-4.563643,-2.533017,1.460791,5.215855,1.879386,8.207631,-1.141797,-3.338130,6.574900,6.191260,-1.760874,-1.029949,8.223791,-5.323471,-2.058833,5.251608,1.871851,-3.770990,8.240024,3.520939,-1.952522,-7.060084,4.225105,-4.901987,7.260245,5.592580,1.188874,-5.558032,-6.462682,1.486846,4.357121,8.513646,-5.293311,-2.573397], dtype = "float64")#candidate|5367|(864,)|const|float64
call_5366 = relay.TupleGetItem(func_232_call(relay.reshape(const_5367.astype('float64'), [16, 6, 9])), 0)
call_5368 = relay.TupleGetItem(func_234_call(relay.reshape(const_5367.astype('float64'), [16, 6, 9])), 0)
output = relay.Tuple([bop_5342,call_5366,const_5367,])
output2 = relay.Tuple([bop_5342,call_5368,const_5367,])
func_5378 = relay.Function([var_5340,var_5341,], output)
mod['func_5378'] = func_5378
mod = relay.transform.InferType()(mod)
var_5379 = relay.var("var_5379", dtype = "float64", shape = (16, 11, 6))#candidate|5379|(16, 11, 6)|var|float64
var_5380 = relay.var("var_5380", dtype = "float64", shape = (16, 11, 6))#candidate|5380|(16, 11, 6)|var|float64
output = func_5378(var_5379,var_5380,)
func_5381 = relay.Function([var_5379,var_5380,], output)
mutated_mod['func_5381'] = func_5381
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5669 = relay.var("var_5669", dtype = "float64", shape = ())#candidate|5669|()|var|float64
var_5670 = relay.var("var_5670", dtype = "float64", shape = (3, 16, 10))#candidate|5670|(3, 16, 10)|var|float64
bop_5671 = relay.divide(var_5669.astype('float64'), var_5670.astype('float64')) # shape=(3, 16, 10)
func_3307_call = mod.get_global_var('func_3307')
func_3312_call = mutated_mod.get_global_var('func_3312')
var_5678 = relay.var("var_5678", dtype = "float64", shape = (6, 144))#candidate|5678|(6, 144)|var|float64
var_5679 = relay.var("var_5679", dtype = "float32", shape = (162,))#candidate|5679|(162,)|var|float32
call_5677 = relay.TupleGetItem(func_3307_call(relay.reshape(var_5678.astype('float64'), [12, 12, 6]), relay.reshape(var_5678.astype('float64'), [12, 12, 6]), relay.reshape(var_5678.astype('bool'), [12, 12, 6]), relay.reshape(var_5679.astype('float32'), [162,]), ), 4)
call_5680 = relay.TupleGetItem(func_3312_call(relay.reshape(var_5678.astype('float64'), [12, 12, 6]), relay.reshape(var_5678.astype('float64'), [12, 12, 6]), relay.reshape(var_5678.astype('bool'), [12, 12, 6]), relay.reshape(var_5679.astype('float32'), [162,]), ), 4)
uop_5699 = relay.log10(var_5678.astype('float64')) # shape=(6, 144)
output = relay.Tuple([bop_5671,call_5677,var_5679,uop_5699,])
output2 = relay.Tuple([bop_5671,call_5680,var_5679,uop_5699,])
func_5712 = relay.Function([var_5669,var_5670,var_5678,var_5679,], output)
mod['func_5712'] = func_5712
mod = relay.transform.InferType()(mod)
var_5713 = relay.var("var_5713", dtype = "float64", shape = ())#candidate|5713|()|var|float64
var_5714 = relay.var("var_5714", dtype = "float64", shape = (3, 16, 10))#candidate|5714|(3, 16, 10)|var|float64
var_5715 = relay.var("var_5715", dtype = "float64", shape = (6, 144))#candidate|5715|(6, 144)|var|float64
var_5716 = relay.var("var_5716", dtype = "float32", shape = (162,))#candidate|5716|(162,)|var|float32
output = func_5712(var_5713,var_5714,var_5715,var_5716,)
func_5717 = relay.Function([var_5713,var_5714,var_5715,var_5716,], output)
mutated_mod['func_5717'] = func_5717
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5816 = relay.var("var_5816", dtype = "float32", shape = (16, 1, 5))#candidate|5816|(16, 1, 5)|var|float32
var_5817 = relay.var("var_5817", dtype = "float32", shape = (16, 4, 5))#candidate|5817|(16, 4, 5)|var|float32
bop_5818 = relay.floor_divide(var_5816.astype('float32'), var_5817.astype('float32')) # shape=(16, 4, 5)
func_1117_call = mod.get_global_var('func_1117')
func_1119_call = mutated_mod.get_global_var('func_1119')
var_5825 = relay.var("var_5825", dtype = "float32", shape = (10, 2))#candidate|5825|(10, 2)|var|float32
call_5824 = relay.TupleGetItem(func_1117_call(relay.reshape(var_5825.astype('float32'), [4, 5, 1])), 0)
call_5826 = relay.TupleGetItem(func_1119_call(relay.reshape(var_5825.astype('float32'), [4, 5, 1])), 0)
output = relay.Tuple([bop_5818,call_5824,var_5825,])
output2 = relay.Tuple([bop_5818,call_5826,var_5825,])
func_5827 = relay.Function([var_5816,var_5817,var_5825,], output)
mod['func_5827'] = func_5827
mod = relay.transform.InferType()(mod)
var_5828 = relay.var("var_5828", dtype = "float32", shape = (16, 1, 5))#candidate|5828|(16, 1, 5)|var|float32
var_5829 = relay.var("var_5829", dtype = "float32", shape = (16, 4, 5))#candidate|5829|(16, 4, 5)|var|float32
var_5830 = relay.var("var_5830", dtype = "float32", shape = (10, 2))#candidate|5830|(10, 2)|var|float32
output = func_5827(var_5828,var_5829,var_5830,)
func_5831 = relay.Function([var_5828,var_5829,var_5830,], output)
mutated_mod['func_5831'] = func_5831
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5856 = relay.var("var_5856", dtype = "int32", shape = (11, 14, 1))#candidate|5856|(11, 14, 1)|var|int32
var_5857 = relay.var("var_5857", dtype = "int32", shape = (11, 14, 14))#candidate|5857|(11, 14, 14)|var|int32
bop_5858 = relay.not_equal(var_5856.astype('bool'), var_5857.astype('bool')) # shape=(11, 14, 14)
func_944_call = mod.get_global_var('func_944')
func_947_call = mutated_mod.get_global_var('func_947')
const_5867 = relay.const([8.788151,3.472216,-1.437504,1.779097,6.620509,-9.184194,-2.547429,1.269602,9.717730,5.734490,-3.783545,-3.474028,-2.663318,-2.648879,9.954649,2.054901,-2.019490,8.059272,-4.129730,-9.086907,8.879076,-3.301684,-4.464334,3.834915,1.283042,-8.630544,-8.581754,-4.004177,4.313466,-6.159286,2.683595,1.505666,0.594301,-5.702702,-6.658348,3.419148,6.039526,5.041739,3.606613,-6.540654,7.324163,-4.391380,8.026042,1.592126,-8.794725,-1.539279,7.212434,5.508224,-9.787148,8.995608,-4.027722,-7.893355,-0.260750,-0.978951,-5.945096,5.135924,2.508306,5.511537,-4.516367,5.449324,1.992491,-1.523382,6.924838,0.552228,-1.339232,-9.846809,5.667266,-2.643944,6.210172,2.270947,7.276263,4.414680,2.548583,-9.888427,1.559236,-8.401601,5.281716,-6.159042,-7.519358,-2.476949,-0.347377,3.337612,5.683240,5.129896,-7.489876,-5.196677,8.116190,-7.930694,-8.657290,8.947177], dtype = "float32")#candidate|5867|(90,)|const|float32
var_5868 = relay.var("var_5868", dtype = "float64", shape = (216, 4))#candidate|5868|(216, 4)|var|float64
call_5866 = relay.TupleGetItem(func_944_call(relay.reshape(const_5867.astype('float32'), [10, 3, 3]), relay.reshape(var_5868.astype('float64'), [2, 432]), ), 5)
call_5869 = relay.TupleGetItem(func_947_call(relay.reshape(const_5867.astype('float32'), [10, 3, 3]), relay.reshape(var_5868.astype('float64'), [2, 432]), ), 5)
func_3698_call = mod.get_global_var('func_3698')
func_3700_call = mutated_mod.get_global_var('func_3700')
const_5875 = relay.const([False,True,True,True,True,True,True,False,True,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,False,False,True,False,True,False,True,True,True,True,False,False,False,True,True,True,False,True,True,True,False,False,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,True,False,False,False,True,False,True,False,True,False,True,False,True,False,True,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,False,False,True,False,True,False,True,False,False,False,False,True,True,False,True,False,False,False,True,False,False,True,True,False,False,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,True,False,False,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,True,False,False,True,True,False,True,True,False,False,True,True,True,False,True,True,False,True,True,False,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,True,False,False,False,False,False,False,False,True,False,True,True,True,True,False,True,False,False,True,False,True,True,False,True,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,False,True,True,False,False,True,True,True,False,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,False,False,True,True,False,True,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,True,True,False,False,True,False,True,False,True,True,True,False,True,True,True,True,False,False,False,True,False,True,True,False,False,False,True,True,True,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,True,True,False,False,True,False,False,False,True,True,True,True,True,False,False,True,True,False,False,False,False,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,False,True,False,False,False,False,True,False,False,True,True,True,True,False,True,False,True,True,True,True,True,True,True,False,False,True,False,True,False,False,False,False,True,False,False,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,False,False,True,True,False,True,False,False,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,False,True,True,True,False,True,True,False,True,False,True,False,False,True,False,True,False,True,False,True,False,True,False,False,True,True,True,False,True,True,False,False,False,True,True,False,False,False,False,False,False,True,False,False,True,False,True,True,False,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,False,False,True,True,False,False,True,True,True,True,True,False,True,True,True,True,False,True,True,True,False,False,False,False,True,True,True,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,False,True,False,True,True,False,True,True,True,False,True,True,False,False,False,True,True,True,False,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,False,True,False,True,False,True,False,True,True,False,True,True,True,True,False,False,False,False,True,True,True,True,False,True,True,False,True,True,True,True,True,True,False,True,False,False,False,False,False,True,True,True,True,False,False,True,False,True,True,True,False,True,True,False,False,False,False,False,True,True,True,False,False,True,True,True,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,False,False,False,False,False,False,True,False,True,False,True,True,True,False,False,False,False,True,True,True,False,False,False,False,True,False,False,False,False,True,True,True,True,True,True,True,True,False,False,False,True,True,True,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,True,False,False,True,True,False,True,True,False,True,False,False,False,True,True,False,True,False,False,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,False,False,False,True,True,False,False,True,False,True,True,False,True,False,False,False,False,True,True,False,False,True,True,False,True,True,True,False,False,False,True,True,False,True,False,False,False,True,True,False,False,False,False,True,True,False,True,True,True], dtype = "bool")#candidate|5875|(840,)|const|bool
call_5874 = relay.TupleGetItem(func_3698_call(relay.reshape(const_5875.astype('bool'), [12, 10, 7])), 0)
call_5876 = relay.TupleGetItem(func_3700_call(relay.reshape(const_5875.astype('bool'), [12, 10, 7])), 0)
output = relay.Tuple([bop_5858,call_5866,const_5867,var_5868,call_5874,const_5875,])
output2 = relay.Tuple([bop_5858,call_5869,const_5867,var_5868,call_5876,const_5875,])
func_5894 = relay.Function([var_5856,var_5857,var_5868,], output)
mod['func_5894'] = func_5894
mod = relay.transform.InferType()(mod)
var_5895 = relay.var("var_5895", dtype = "int32", shape = (11, 14, 1))#candidate|5895|(11, 14, 1)|var|int32
var_5896 = relay.var("var_5896", dtype = "int32", shape = (11, 14, 14))#candidate|5896|(11, 14, 14)|var|int32
var_5897 = relay.var("var_5897", dtype = "float64", shape = (216, 4))#candidate|5897|(216, 4)|var|float64
output = func_5894(var_5895,var_5896,var_5897,)
func_5898 = relay.Function([var_5895,var_5896,var_5897,], output)
mutated_mod['func_5898'] = func_5898
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5908 = relay.var("var_5908", dtype = "float32", shape = (11, 6, 6))#candidate|5908|(11, 6, 6)|var|float32
uop_5909 = relay.acosh(var_5908.astype('float32')) # shape=(11, 6, 6)
func_944_call = mod.get_global_var('func_944')
func_947_call = mutated_mod.get_global_var('func_947')
const_5914 = relay.const([-6.037497,-3.874825,-4.272598,2.751523,4.124107,2.251830,4.083918,-1.835972,-7.568549,4.128989,4.932797,-6.347192,-7.390527,-1.757708,-3.707171,-2.078439,4.211915,0.615379,3.002357,-1.456757,-2.374705,-4.756021,-6.812666,6.373474,8.001652,2.420770,6.346526,-9.935512,2.281796,7.994925,2.335868,-1.431406,1.673909,-4.773526,0.434886,3.784569,-0.944075,3.700593,-8.339585,4.872617,8.604776,8.841867,7.997874,1.435744,-7.493118,-6.960386,-9.859330,4.399040,-7.777452,1.014354,-8.002062,5.895657,-0.421644,-3.656672,-0.751971,-9.771330,-3.293659,-2.078338,-2.038781,-8.216540,-7.793917,-8.634948,-7.575996,-0.919919,3.697159,-6.524918,-4.452316,-8.595132,-3.324523,-1.140296,2.120449,6.986596,-9.476224,7.734582,2.977288,8.450487,-3.622500,-8.646495,8.424425,2.774317,-2.277611,6.425313,4.832527,7.791101,-0.992257,-6.285303,6.888817,6.234505,1.509372,-0.564516], dtype = "float32")#candidate|5914|(90,)|const|float32
const_5915 = relay.const([4.477542,-4.076461,-0.388729,1.546560,6.240956,-2.279750,-9.274118,-5.887061,3.953047,-3.707138,-9.480521,-7.198935,-6.401582,-3.390903,-6.118913,9.567981,-0.350105,4.382173,4.772563,1.585558,0.585420,-4.731664,-6.197434,-1.293713,6.140591,-5.915726,-2.909338,-4.703862,1.576479,-2.331781,-1.508139,3.103141,8.245182,1.302419,0.514094,3.218674,-6.578543,-5.128136,3.512207,-2.476578,-2.308300,-0.040530,5.001862,5.440431,-4.400316,1.727232,-8.444316,0.805850,2.550304,-8.341743,0.570722,1.491358,8.319531,-4.080040,-2.390132,-7.013884,8.784638,6.669600,0.781438,0.602864,0.057362,-6.058175,2.886339,5.862565,-9.145632,4.039107,-2.028159,-5.967563,2.659021,-8.644572,2.108343,-0.835591,8.923865,-7.081273,-3.141595,-1.046367,-3.168145,0.183143,-4.794980,-1.517222,5.477214,7.669644,-1.038351,1.470552,-1.270632,3.150615,-0.452863,0.041136,4.801597,-5.391722,5.004291,7.962044,0.172818,-2.526061,-3.563508,8.392414,-6.454731,2.678373,-0.395855,-0.657601,-2.914760,-5.900230,9.654610,-8.335541,2.643223,9.234186,-2.633665,-6.272944,5.148006,0.102670,0.114303,0.129940,7.663998,-2.439487,-1.118756,0.563924,-7.337707,1.716265,5.502295,7.384348,0.144065,7.418619,7.665484,1.063165,-4.191267,-5.690844,4.522597,-2.130743,-7.009751,-1.580144,0.271872,5.046334,-2.891415,-8.600344,6.349072,-6.988446,-2.807810,-6.508655,-5.543912,-5.349057,-7.052335,-5.941787,1.627878,7.154849,-4.193108,-1.905297,6.243572,9.822121,-3.142334,6.347943,1.903672,-4.676283,1.738385,-8.007449,8.247335,0.308029,6.314831,2.868177,-4.014513,4.249613,7.268035,-4.622426,9.876811,-2.797952,8.095452,2.303965,7.642929,-4.208905,-6.459863,-2.264626,-0.047104,-8.842984,-6.034332,-5.903713,-5.698663,3.377755,6.961548,-6.804164,4.034350,-9.911323,-0.827458,-1.868156,-9.529680,-0.654881,1.376207,-4.984919,-2.299727,0.044724,-6.661467,7.945868,2.863038,-7.233625,8.853686,-4.295342,6.317845,5.721484,-8.611510,-5.028408,0.085613,-2.441471,5.172955,-9.143957,4.795469,-3.329877,9.096532,-5.680649,-1.818771,6.641041,3.872200,2.828581,-3.761703,-8.188653,-7.773537,4.733961,6.520324,-6.446169,-2.177642,2.499363,-8.818711,-4.578277,1.031857,7.281199,0.612237,6.728206,-1.196294,-9.618287,-0.586613,0.547666,4.416582,-6.736392,-7.107807,1.294159,1.658531,-3.112855,0.242708,9.363831,6.256377,-4.246343,6.944489,6.229367,-4.391126,-5.302765,-8.654450,4.894597,7.627649,1.859778,-9.196736,-3.271878,5.781815,-4.756892,7.960060,8.707766,-0.232595,-2.693198,-4.917090,2.046788,4.742834,3.917493,2.781849,1.337294,-7.065798,1.755190,7.769706,-6.600767,-7.348190,9.736220,-3.862471,3.928765,0.111440,-4.275383,9.167397,-9.908192,7.191263,7.857708,3.726227,9.146849,9.911978,-7.758241,9.952112,5.213204,5.960141,4.963520,2.678057,-2.734384,-8.163184,-7.661079,-2.086070,-9.146802,-0.591969,4.015808,-1.971979,1.080643,2.287031,8.192110,-5.775715,-6.781279,4.869222,3.311521,-9.737032,7.234504,-6.638860,6.251994,0.654303,4.697948,8.017343,2.256175,4.444065,4.206984,-6.817465,8.539682,9.584189,2.404787,-9.132772,0.627657,-9.178489,3.374518,1.976290,-0.049700,3.646880,-4.358801,-7.964047,-1.334563,2.636274,-0.123771,-6.535637,-7.644063,5.042121,2.299677,3.842393,0.808240,1.485750,-6.187415,9.633813,6.334936,-1.320777,8.078976,6.750227,8.363240,6.928000,5.679513,2.970537,3.841340,6.474200,-1.611702,4.097937,-7.906277,5.823376,9.157327,8.193340,7.190726,9.494500,-9.950159,-4.039800,3.841137,1.624169,-8.656089,-4.417860,-5.041993,-8.850688,-1.880923,-5.312599,-5.051522,-3.300555,-4.387551,2.369919,5.085385,-9.347171,3.542999,1.119955,-3.929712,5.315509,-2.636661,-8.717408,6.915057,1.227344,-6.625739,3.314976,1.218638,0.912209,1.725755,7.341141,0.130569,1.996490,7.541749,1.197732,9.336746,-2.920569,-2.577068,-7.075868,3.258871,-0.994752,7.103511,-4.226059,8.775518,-1.100183,-1.468490,6.764918,8.979887,7.591061,-1.915909,-7.684612,8.390630,4.480217,1.116091,-8.262488,6.925500,7.020072,-9.189448,-3.692334,6.420271,-7.357256,-6.317057,6.669616,-7.141476,-8.839995,8.925798,1.614806,6.870535,-9.825727,-2.929702,4.577358,6.546627,3.723524,6.162024,2.017366,-0.032497,-5.311955,-2.871725,0.556753,-9.401120,8.153445,-5.383170,5.558593,4.420973,2.252145,-0.682796,5.452449,0.999413,8.319086,-9.523561,3.193937,-5.514938,-1.594613,3.375806,-0.157677,7.674383,6.642365,-6.834077,-8.393989,-3.697635,7.476439,-7.268253,1.456855,5.027599,-9.521817,1.914126,1.083411,-7.823598,-8.989700,8.140530,0.102628,-1.212582,-8.047039,3.880680,-4.998581,-6.265042,-0.231856,4.333165,-2.732294,-5.680372,-2.880993,-4.836937,-7.969420,1.049947,-5.335847,5.024833,-2.734149,-1.206417,-7.594184,6.956219,-0.810725,-3.109785,-9.239509,-3.496456,7.007524,-3.613189,-4.353880,4.537263,4.231076,-9.947086,7.091822,9.753376,2.834788,-8.425905,-8.230603,0.953681,-2.039435,0.186300,6.892321,0.063196,1.146432,-4.317949,7.259978,-6.190862,5.996081,-3.647264,-1.720736,-3.033372,-2.789933,9.196453,-4.245747,8.775122,-1.855660,8.267385,-6.969582,-1.204402,-1.912017,8.660143,-9.345072,-2.907844,-6.795926,-7.651295,0.229532,1.355302,-6.327359,-7.229974,0.542702,9.378212,-6.203408,0.893540,4.374875,-1.960841,-9.897852,9.850125,0.942420,-2.739516,7.121636,-8.870235,1.289325,-6.682469,-3.203829,-3.184059,-7.132439,-6.187574,1.823256,8.857955,4.200947,-8.004884,6.839166,0.988282,-2.174567,0.304363,-7.103017,-0.422936,0.904591,3.091129,5.485909,3.004867,4.471795,-8.299826,9.175366,-2.049874,-6.538952,-0.714443,-4.237402,-7.582347,-8.390877,-0.637438,-5.156046,-4.061082,0.608698,0.579156,-1.575734,-3.017063,-8.413235,-2.195126,-7.679307,0.675020,0.929531,5.959680,7.545821,-4.490288,3.963802,-3.821062,4.164119,4.612274,7.724637,0.361511,8.019497,0.297159,7.709143,4.867625,-6.304826,-6.997702,-7.750725,-9.710242,8.168882,5.367646,9.206960,-0.413582,6.031831,-1.728832,1.122647,-9.872526,6.119384,-9.174422,2.843071,7.778720,-9.110825,4.275099,5.970784,-8.925086,4.340948,9.201259,-5.408582,9.070759,1.888888,-4.834272,-6.194972,2.862468,-9.089974,-8.605657,1.957871,-0.027109,6.086757,-8.407136,8.364087,3.963478,2.464841,9.605930,5.536300,5.396951,-1.003571,2.366630,-6.056365,3.093712,-4.192439,-4.445195,9.695694,-4.553534,-9.354505,2.836619,9.467921,-5.944048,6.336203,-3.725905,1.657231,5.192106,0.450147,-3.029734,3.790505,8.827002,7.163570,9.893997,-7.631896,4.302094,-2.247109,-0.846910,3.483996,-7.166532,-0.552624,9.482020,-9.502043,-3.008929,4.956022,8.402865,-2.871354,5.764491,-8.484836,-2.110319,-9.807748,-5.622300,-0.836047,-9.133782,7.071986,-3.713656,-7.615013,8.023051,-5.765565,-2.169682,-7.324193,-9.000536,-7.035913,-7.061494,-7.461931,9.297857,-1.006644,6.273142,-9.355167,4.071687,3.863179,-1.139252,3.054196,-0.504748,6.521624,-4.587083,0.780179,-3.813572,-5.240031,-0.277168,9.143790,8.948660,3.147103,-1.066248,-1.741472,-2.731780,6.652373,4.747399,-1.315366,-6.675168,9.110234,-5.284147,0.155638,-1.598054,6.298813,-4.345173,7.287465,7.263880,-1.735640,-5.530652,7.818495,-4.934850,6.618275,3.738621,-9.181334,1.837290,-6.894731,-4.056961,-9.679503,9.636182,6.349211,-3.336851,0.405293,-4.620728,9.768904,7.572705,9.719102,6.672753,9.686386,-2.809541,-7.325693,1.553610,1.581136,-3.960464,6.631567,-6.332583,1.073766,8.506015,-5.518017,2.887991,-0.809861,-7.529450,-8.560709,2.281038,-9.817111,1.182945,6.116856,-5.766273,-1.332371,2.893708,-1.465735,3.786379,-9.827405,3.005099,-3.377291,7.600279,8.411192,-2.323314,8.989314,6.376039,1.724907,6.408502,-9.932091,-7.541629,-2.370657,-8.106097,7.891993,8.220542,-2.612025,-8.903445,6.209273,7.066103,2.260166,-7.647760,0.444533,-2.061016,1.384727,-0.811903,2.910782,-4.141783,-9.929166,0.174810,-0.334495,4.084976,6.761596,1.475363,0.842580,6.927235,-4.271880,-6.062477,5.681421,3.791642,-8.791809,-9.815309,-1.208632,8.108196,4.184749,-7.288614,2.225475,-2.472286,4.550596,8.600918,5.366454,3.903641,4.400035,4.770602,-6.829845,4.054861,-1.777404,6.098311,-7.101644,2.784993,5.377191,-3.362477,-9.061861,5.694178,-8.102021,-5.750920,7.009954,-9.597686,9.432573,8.792439,-8.726756,-3.458623,8.903314,1.668649,8.863042,2.538474,-8.668803,0.494453,1.126722,-0.494472,-8.323449,5.517742,-3.759599,-8.717334,7.717949,4.654555,-5.561472,6.210323,7.578131,2.256598,8.874871,1.382658,-1.473219,-4.850053,3.723195,-7.974306,-0.543637,2.064213,2.884479,-0.042523,-6.044116,-2.116265], dtype = "float64")#candidate|5915|(864,)|const|float64
call_5913 = relay.TupleGetItem(func_944_call(relay.reshape(const_5914.astype('float32'), [10, 3, 3]), relay.reshape(const_5915.astype('float64'), [2, 432]), ), 5)
call_5916 = relay.TupleGetItem(func_947_call(relay.reshape(const_5914.astype('float32'), [10, 3, 3]), relay.reshape(const_5915.astype('float64'), [2, 432]), ), 5)
output = relay.Tuple([uop_5909,call_5913,const_5914,const_5915,])
output2 = relay.Tuple([uop_5909,call_5916,const_5914,const_5915,])
func_5917 = relay.Function([var_5908,], output)
mod['func_5917'] = func_5917
mod = relay.transform.InferType()(mod)
var_5918 = relay.var("var_5918", dtype = "float32", shape = (11, 6, 6))#candidate|5918|(11, 6, 6)|var|float32
output = func_5917(var_5918)
func_5919 = relay.Function([var_5918], output)
mutated_mod['func_5919'] = func_5919
mutated_mod = relay.transform.InferType()(mutated_mod)
const_6096 = relay.const([[[-7,-4,4,5,-2,-3,7,1,6,3,5,4,7,1,-8,3],[9,10,-7,-3,7,1,9,-5,3,1,-10,-7,3,-6,8,8],[9,5,3,4,-3,-6,-4,-7,9,-4,-7,5,3,-2,-1,10],[-6,-5,-2,1,-3,-10,-7,5,-7,2,1,5,-7,7,-7,7],[2,4,-2,-1,-1,-1,8,-2,-6,-2,-2,-3,5,-8,-6,6],[10,4,-5,6,-8,4,-4,2,3,-6,-2,-3,-8,-7,-7,-4],[3,8,5,-3,10,8,4,-3,-5,-1,10,3,-6,-4,-5,9],[-6,-5,-10,3,-8,3,10,-8,-4,3,-4,2,1,4,-2,-4],[-9,-1,-1,-8,-5,10,4,4,8,2,6,-3,-7,2,9,2],[-9,8,7,-9,-6,10,9,-8,1,-1,3,3,1,1,-3,10],[6,-2,-4,7,-1,10,1,9,7,9,3,9,-9,-6,5,-6],[3,-4,-10,7,-8,-1,2,-10,-9,-8,-3,8,1,-6,-9,-7],[-2,-9,4,6,-2,10,9,4,9,2,-1,3,4,8,2,8],[-8,8,5,-3,-3,1,-3,9,7,3,2,1,5,-9,-7,-3]],[[-4,-7,7,5,5,1,1,1,1,-7,1,-9,9,5,7,-1],[3,1,9,7,2,-3,9,-10,-9,-3,6,7,4,-3,4,-1],[3,-4,-7,-8,2,-9,-7,-1,-7,9,8,3,9,-2,-10,-9],[-4,7,7,-8,7,8,-8,2,-3,3,6,5,1,-10,10,-6],[-6,6,8,-2,3,3,-1,9,8,7,-7,1,10,1,-5,-6],[1,4,-6,-8,-8,-10,-8,3,2,-9,-4,9,4,-8,10,-1],[4,2,-4,10,-1,-1,1,2,7,4,-4,7,-6,6,-9,-7],[-2,4,9,-8,-6,9,6,-3,-5,-4,2,6,8,-2,-10,-1],[-7,-10,9,-7,8,2,-9,5,-4,2,2,-3,-9,7,-5,-2],[3,9,10,9,-3,-2,-8,6,-7,7,4,2,-7,5,-7,-6],[-10,4,-2,10,6,8,10,-5,2,-8,3,2,-9,6,5,-8],[-9,-5,-7,-6,6,6,-10,2,-2,10,8,-9,-10,-5,-7,2],[-7,-6,-1,-7,8,4,4,-4,6,-6,-8,3,10,-7,-3,2],[5,6,2,-4,7,-10,3,9,-8,4,-8,5,5,6,8,-7]],[[5,10,9,8,1,-6,2,2,8,5,2,-5,-2,4,8,5],[-7,3,-9,1,-10,4,4,-1,1,10,8,10,-8,-1,10,-2],[-3,4,-7,-1,3,9,1,-10,6,8,5,3,4,2,2,-10],[10,-8,-8,3,4,7,-2,10,6,3,7,7,-1,-5,2,7],[-9,10,-4,7,7,-5,-2,10,-4,1,8,-3,6,10,-3,-1],[-4,10,-6,-9,-2,3,-1,3,-5,-9,2,-9,-1,-8,10,7],[-8,3,5,-8,-6,2,-3,5,1,8,5,4,8,2,-1,1],[7,5,6,8,4,9,7,5,7,3,-3,-10,1,1,1,1],[-6,8,8,1,-6,-9,-4,2,10,-3,-4,-7,3,7,8,9],[-2,5,3,-4,-6,-3,-9,-2,-2,-5,-6,-1,10,2,-6,3],[10,-2,4,3,8,10,2,-8,7,-3,8,3,-4,6,-7,-9],[-7,-1,6,-2,-1,4,6,-10,-7,-5,6,3,-2,9,-7,8],[9,4,-3,-10,9,-10,7,-8,-2,1,1,-8,-4,4,-5,-5],[2,-10,8,-1,-5,1,-10,10,4,-2,7,9,8,1,6,8]],[[7,-4,7,1,-6,-3,3,-10,5,1,-3,1,4,5,-10,-9],[-2,-2,-8,-10,-7,-1,-6,-7,-5,5,7,-1,2,10,-10,10],[3,10,7,6,-3,-4,9,4,-8,-4,-6,5,-3,-1,3,7],[-5,7,-9,6,1,-2,1,-6,6,-3,7,2,2,-6,-7,3],[4,-2,3,4,9,-4,-6,9,-2,-6,-2,-2,-6,-1,3,-2],[2,-9,-3,-8,-1,-3,5,-8,-6,-10,5,-5,10,3,-10,2],[9,8,4,-4,-10,-1,1,-4,6,-7,5,3,8,1,-10,-1],[-4,-3,-8,-3,-6,-5,-8,3,-4,6,-2,7,4,9,10,-5],[10,-3,6,7,4,10,5,-5,-6,8,-9,-10,-2,-7,1,-9],[9,-9,9,9,-10,-5,-6,3,9,-2,8,-9,10,-5,7,2],[-5,1,9,-5,-10,-5,1,8,1,8,1,10,-5,-2,8,-6],[-7,6,6,-6,-4,-1,-8,4,-9,7,-10,-1,3,-7,1,5],[-10,-3,-2,5,9,8,-6,-7,5,-5,2,-9,-3,-7,10,2],[2,-8,-4,10,-10,-3,3,3,3,-10,-6,-1,5,-5,1,-5]],[[-3,-7,8,2,-8,-4,2,-6,7,-9,6,4,-7,4,-6,-3],[4,8,9,-9,5,-7,-1,4,-10,-3,-3,10,7,10,-5,-2],[2,8,-10,-8,10,-3,-8,-1,8,-7,-10,-2,10,-10,-4,-1],[-2,10,6,8,1,9,6,10,-3,-6,-3,-1,2,-8,-4,7],[-10,10,2,1,9,7,-9,1,3,6,8,10,9,-8,-7,-2],[9,2,-2,-9,3,6,2,-4,7,-2,7,6,-10,-10,-9,-3],[-4,4,-7,7,-8,2,10,-6,5,-3,9,-6,-4,-7,1,-3],[-6,1,9,-5,-10,-8,2,9,-3,-10,2,3,-4,-8,10,-10],[-8,2,-10,6,-4,2,8,7,-6,6,-3,-3,-1,2,4,-10],[4,4,8,5,4,-2,-1,-6,4,-4,-2,3,-1,5,-8,2],[6,7,-3,6,10,-2,4,9,-1,-6,3,6,-6,-1,-5,-10],[8,5,-10,1,-10,4,-2,-4,7,7,1,3,-4,4,9,4],[-1,-1,1,-2,6,5,-6,-2,-8,2,2,-7,-10,-10,4,8],[-1,6,-10,3,4,-7,-8,5,8,5,1,-8,4,-1,10,-6]],[[8,-4,-2,-8,6,7,4,10,-7,2,9,-2,8,3,-5,-2],[3,-3,5,-9,5,-3,-8,-1,-7,7,-4,1,4,-1,-5,2],[-9,10,4,-4,-7,-10,-9,-2,-5,-6,-7,3,3,10,9,5],[-7,-3,-6,2,6,-8,2,-3,8,9,6,-7,-8,-6,-1,6],[-8,10,5,-7,3,-8,-3,5,-10,-7,6,7,4,-10,4,4],[-6,6,-6,4,8,6,3,-5,6,1,-7,-6,2,8,4,10],[4,-3,8,-10,9,10,-7,-7,8,-5,-6,7,-10,6,5,-6],[-1,-9,-6,7,-5,7,3,-5,2,5,-4,6,5,8,7,9],[2,-8,7,4,-6,3,3,-10,1,-2,8,-7,-1,5,8,5],[1,8,1,-9,-1,6,-2,10,2,8,-2,-2,-9,-1,10,7],[-9,9,-5,9,-3,-3,-1,-10,-6,10,-3,-3,1,9,9,-3],[1,10,-2,-3,4,-2,10,8,10,6,-2,6,-2,-5,1,9],[1,9,2,8,9,-1,-2,4,6,-5,-8,2,-6,-9,4,-10],[-1,8,-10,-9,8,5,-8,-4,-9,-5,-2,5,1,-6,5,-9]]], dtype = "uint64")#candidate|6096|(6, 14, 16)|const|uint64
var_6097 = relay.var("var_6097", dtype = "uint64", shape = (6, 14, 16))#candidate|6097|(6, 14, 16)|var|uint64
bop_6098 = relay.equal(const_6096.astype('bool'), relay.reshape(var_6097.astype('bool'), relay.shape_of(const_6096))) # shape=(6, 14, 16)
func_5917_call = mod.get_global_var('func_5917')
func_5919_call = mutated_mod.get_global_var('func_5919')
var_6110 = relay.var("var_6110", dtype = "float32", shape = (1, 396))#candidate|6110|(1, 396)|var|float32
call_6109 = relay.TupleGetItem(func_5917_call(relay.reshape(var_6110.astype('float32'), [11, 6, 6])), 1)
call_6111 = relay.TupleGetItem(func_5919_call(relay.reshape(var_6110.astype('float32'), [11, 6, 6])), 1)
func_4845_call = mod.get_global_var('func_4845')
func_4848_call = mutated_mod.get_global_var('func_4848')
const_6119 = relay.const([[-5.404667,-4.952190,7.138789,5.091703,3.708332,2.498176,1.874657,7.433123,-5.158082,1.740218,-0.161785,-6.470522,-1.166209,-4.805978,-0.241580,5.413390,3.621933,8.649312,3.004406,1.993195,5.346673,3.087942,6.819527,2.263202]], dtype = "float64")#candidate|6119|(1, 24)|const|float64
call_6118 = relay.TupleGetItem(func_4845_call(relay.reshape(const_6119.astype('float64'), [3, 4, 2])), 0)
call_6120 = relay.TupleGetItem(func_4848_call(relay.reshape(const_6119.astype('float64'), [3, 4, 2])), 0)
output = relay.Tuple([bop_6098,call_6109,var_6110,call_6118,const_6119,])
output2 = relay.Tuple([bop_6098,call_6111,var_6110,call_6120,const_6119,])
func_6146 = relay.Function([var_6097,var_6110,], output)
mod['func_6146'] = func_6146
mod = relay.transform.InferType()(mod)
var_6147 = relay.var("var_6147", dtype = "uint64", shape = (6, 14, 16))#candidate|6147|(6, 14, 16)|var|uint64
var_6148 = relay.var("var_6148", dtype = "float32", shape = (1, 396))#candidate|6148|(1, 396)|var|float32
output = func_6146(var_6147,var_6148,)
func_6149 = relay.Function([var_6147,var_6148,], output)
mutated_mod['func_6149'] = func_6149
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6249 = relay.var("var_6249", dtype = "bool", shape = (13, 16, 14))#candidate|6249|(13, 16, 14)|var|bool
const_6250 = relay.const([[[True,False,False,True,True,False,True,True,False,True,False,False,False,True],[True,True,True,False,True,False,False,True,False,False,True,True,False,True],[False,True,True,False,False,True,True,True,True,True,False,True,False,False],[True,False,True,False,False,False,True,True,True,True,False,True,False,False],[False,False,True,False,False,False,False,False,False,False,True,True,True,False],[True,True,False,False,True,False,True,True,False,False,False,True,True,True],[False,True,True,False,False,False,True,False,False,True,False,False,True,True],[False,False,True,True,True,False,True,True,False,False,False,False,False,True],[False,False,False,False,True,True,True,True,True,False,True,True,True,True],[False,True,True,False,True,False,True,True,False,False,False,False,True,False],[True,True,True,True,True,True,True,True,False,False,False,True,False,False],[True,False,True,True,True,False,True,False,True,False,True,True,False,True],[False,True,False,True,True,True,False,False,True,True,True,True,False,False],[True,False,False,False,False,True,True,True,False,False,False,True,False,True],[False,False,True,False,False,True,True,True,False,True,True,True,True,True],[True,True,True,False,True,True,False,False,False,True,True,False,True,True]],[[True,True,True,False,True,False,False,True,True,False,False,True,True,False],[True,False,True,False,True,False,False,True,True,False,True,True,True,False],[False,False,False,True,True,True,True,False,True,False,False,False,False,False],[True,True,False,False,False,True,False,True,True,False,False,False,False,True],[False,True,False,False,True,False,True,False,True,True,True,False,True,True],[False,True,True,True,False,False,False,False,True,False,False,True,True,False],[True,True,False,True,True,False,True,False,False,True,True,True,False,False],[True,True,True,True,False,False,False,False,False,False,True,False,True,True],[True,False,True,False,True,True,False,False,True,True,True,True,False,False],[False,False,False,True,True,True,False,True,True,True,False,False,True,True],[False,False,False,True,False,True,True,False,True,True,False,False,True,True],[False,True,True,False,False,True,False,True,False,False,True,False,True,True],[False,True,False,False,True,False,True,False,True,False,False,False,False,False],[True,True,False,True,False,True,True,False,True,True,False,True,False,True],[True,True,False,True,False,False,True,False,False,False,False,True,True,False],[False,True,False,True,False,False,False,False,False,True,True,True,True,True]],[[False,True,False,False,False,False,True,True,False,True,True,False,True,True],[True,False,True,True,True,True,False,True,False,False,False,False,False,True],[True,True,False,True,False,False,True,False,False,True,True,False,False,False],[False,True,True,True,False,False,True,True,False,True,True,False,False,True],[False,False,False,True,True,False,False,True,False,False,True,False,True,True],[False,True,True,False,False,True,True,False,True,False,False,True,False,True],[True,False,False,True,False,False,False,True,False,True,False,False,True,True],[False,False,False,False,True,False,False,True,True,True,False,False,False,False],[False,False,True,True,False,True,True,False,True,True,True,True,False,True],[True,True,False,True,True,True,True,False,True,True,False,False,False,False],[False,False,False,False,False,True,False,False,False,True,False,True,False,True],[False,True,False,True,False,True,False,False,False,True,False,True,False,False],[True,False,False,True,True,False,False,True,True,False,False,True,True,False],[False,True,False,False,False,False,True,True,True,True,True,True,False,True],[False,False,False,True,True,False,True,False,True,True,True,False,True,True],[False,False,False,False,True,False,True,False,False,False,True,False,False,False]],[[True,False,True,False,True,True,True,False,False,False,False,True,True,True],[True,False,True,True,False,True,False,False,True,True,False,True,True,True],[True,True,True,True,False,False,True,True,False,False,True,False,True,True],[True,False,False,False,True,True,False,True,False,False,True,True,True,True],[True,False,False,False,False,True,True,False,False,False,True,False,True,False],[False,False,True,True,False,True,True,True,True,True,True,True,True,False],[True,False,False,False,True,False,False,True,False,False,True,False,False,False],[False,True,False,False,True,True,True,False,False,False,True,True,False,False],[True,True,True,False,False,True,False,True,True,False,False,True,False,True],[True,True,True,True,False,True,True,False,False,False,False,False,True,True],[False,True,False,True,False,True,True,False,False,True,True,True,True,True],[True,False,False,False,True,True,False,True,False,True,True,False,False,True],[True,True,True,True,False,True,False,False,False,True,True,False,False,False],[True,True,False,False,True,False,True,False,False,True,False,False,False,True],[True,False,True,False,True,False,True,True,True,True,False,True,False,True],[True,False,True,False,True,True,True,True,False,False,True,False,True,True]],[[False,True,True,True,False,False,True,True,False,False,True,True,True,True],[False,True,False,True,True,True,True,True,True,False,False,True,False,True],[True,True,True,True,True,False,True,True,False,False,False,False,True,True],[True,False,False,True,False,False,False,True,False,True,False,True,False,False],[False,False,False,True,False,True,False,True,True,True,False,True,False,False],[True,True,False,False,True,False,True,True,True,True,True,True,False,True],[False,False,False,False,True,False,True,True,True,True,False,False,True,False],[True,True,False,False,False,False,False,True,True,True,True,False,False,False],[True,False,True,True,True,True,True,False,True,False,True,False,True,True],[False,False,True,True,True,True,True,True,False,True,True,True,False,False],[True,False,False,False,True,True,True,False,True,False,False,False,False,True],[True,True,False,True,False,True,True,True,False,False,True,False,False,False],[True,False,False,False,True,False,False,False,True,True,False,False,True,False],[True,True,True,False,True,True,True,True,False,False,False,False,True,True],[True,True,True,False,True,True,True,False,True,True,False,True,True,False],[True,False,False,False,False,True,False,True,False,False,False,False,False,False]],[[True,True,False,False,False,True,False,False,True,True,False,False,True,True],[True,False,True,True,False,False,True,False,True,False,True,False,False,True],[False,False,False,True,False,False,True,False,True,False,False,False,True,True],[True,False,False,False,False,True,True,True,True,True,True,True,True,True],[True,True,False,True,True,False,True,True,False,False,False,False,False,False],[False,False,True,True,False,True,False,True,True,True,False,False,False,True],[True,True,False,False,False,True,False,False,True,True,True,False,True,True],[False,False,False,False,False,True,False,False,True,False,True,False,True,True],[False,False,True,False,True,True,False,False,False,False,False,False,True,True],[False,True,True,False,True,True,False,True,False,False,True,True,False,True],[True,False,False,False,False,True,False,True,True,False,True,True,True,True],[True,False,True,True,True,False,True,False,True,False,True,True,False,True],[True,True,False,False,True,False,False,True,False,False,False,True,True,False],[False,False,True,False,False,False,True,False,False,True,False,True,True,False],[True,True,True,False,False,True,False,True,True,True,False,True,True,True],[False,False,True,True,False,False,True,True,True,False,True,True,True,True]],[[True,False,True,False,False,False,False,False,True,False,False,True,True,False],[False,True,True,True,True,False,False,False,True,True,True,False,True,False],[True,True,True,False,True,True,False,True,True,False,False,True,True,False],[False,False,False,False,True,False,True,True,False,True,True,True,False,False],[True,False,False,True,True,True,True,False,False,False,False,False,False,False],[True,True,False,True,False,False,True,True,False,True,False,True,False,True],[False,True,True,False,True,True,True,False,True,False,False,True,False,False],[True,True,False,False,False,False,True,False,True,True,False,True,False,False],[False,False,False,True,True,True,True,False,True,False,False,False,False,True],[True,True,True,True,False,False,True,False,False,True,True,True,False,True],[True,False,True,True,False,True,False,False,True,True,False,False,True,True],[False,False,False,True,True,True,False,True,True,False,True,False,True,False],[True,True,True,False,True,True,False,True,False,False,True,True,False,False],[True,True,True,True,True,True,True,False,False,True,True,False,True,True],[False,False,True,True,True,True,False,False,False,False,False,False,False,True],[False,False,True,True,False,False,True,True,True,False,False,False,True,True]],[[False,True,False,False,True,False,True,True,True,True,True,True,True,True],[True,False,True,True,False,False,True,False,True,False,False,False,False,False],[False,True,True,False,False,False,False,False,False,False,True,True,True,False],[False,True,False,True,True,True,True,True,True,False,False,False,False,False],[True,False,False,True,True,True,False,False,True,False,False,True,False,True],[False,False,True,False,True,True,False,False,False,True,True,False,True,True],[False,True,True,True,True,True,True,False,True,True,False,False,True,False],[False,False,True,False,False,True,True,True,False,True,True,True,False,False],[True,True,False,True,False,True,True,True,True,False,True,False,True,False],[False,False,False,False,False,False,True,False,True,False,True,True,True,False],[False,True,True,True,False,True,True,False,False,False,True,True,False,False],[True,True,False,False,True,True,False,False,True,True,False,False,True,False],[True,False,False,False,True,True,True,True,False,False,True,True,False,False],[False,False,True,False,True,True,False,True,False,False,True,True,False,True],[True,True,True,True,False,False,True,True,True,False,True,False,True,False],[True,True,True,True,False,False,True,True,True,True,False,False,False,True]],[[True,False,True,True,True,False,False,True,False,True,True,False,True,False],[False,False,False,True,False,True,False,False,True,False,True,True,True,False],[True,True,True,False,True,False,True,True,True,True,False,True,False,True],[True,False,True,True,False,False,False,False,True,True,False,True,True,False],[False,False,False,True,False,True,True,True,False,True,False,True,False,True],[False,True,False,False,True,False,True,True,False,False,False,True,True,False],[False,False,False,False,False,False,True,False,False,True,False,False,False,False],[True,False,True,True,True,False,True,False,False,True,False,False,True,False],[True,False,False,False,False,True,False,False,True,False,True,True,True,True],[True,True,True,False,True,True,False,True,True,True,True,True,False,True],[True,True,True,False,True,False,False,True,True,True,False,False,True,True],[False,False,False,True,True,True,False,False,False,False,True,True,True,True],[False,False,False,True,True,False,False,True,False,False,False,True,True,False],[True,False,True,True,False,True,True,True,True,True,False,True,True,True],[True,False,False,True,False,True,True,False,True,True,True,True,True,True],[False,True,False,True,True,True,True,False,True,False,True,False,True,True]],[[True,False,True,False,False,True,False,True,False,True,True,True,False,False],[False,True,True,False,False,True,False,False,True,True,False,False,True,True],[False,False,True,True,False,False,False,False,True,False,True,False,True,False],[True,True,False,False,False,False,False,True,True,False,True,False,True,True],[False,False,False,False,False,True,False,False,True,False,True,True,False,False],[True,True,True,False,False,True,False,False,True,True,True,True,True,False],[True,True,True,False,True,False,False,False,True,False,False,True,False,True],[False,False,False,True,True,True,True,True,False,False,False,False,True,True],[True,False,False,False,True,True,False,True,True,True,True,True,True,True],[False,False,True,False,False,True,True,False,False,False,True,False,False,True],[False,True,True,True,False,True,False,True,False,False,False,False,True,True],[True,True,True,True,True,False,True,True,True,False,True,True,False,True],[True,True,False,False,False,True,True,False,False,True,False,True,False,False],[True,True,False,False,False,True,True,True,True,False,True,False,False,False],[True,False,True,False,True,False,False,False,True,False,False,False,True,False],[True,True,True,False,True,True,False,True,False,True,True,True,True,False]],[[True,True,False,False,True,False,False,True,False,True,True,True,True,True],[True,False,False,False,False,True,False,True,False,False,False,False,True,True],[True,False,True,False,True,False,False,True,False,False,False,False,True,True],[True,False,False,True,True,False,True,True,True,False,False,True,False,False],[True,False,False,False,False,True,False,False,True,False,True,True,True,True],[True,False,False,True,True,False,False,False,True,True,True,False,True,True],[False,False,True,True,False,True,False,False,True,False,False,False,True,True],[False,False,False,True,False,False,False,True,True,False,True,False,False,False],[False,True,True,False,True,True,False,True,False,False,False,True,False,False],[False,True,False,False,True,False,True,False,True,False,True,False,False,True],[False,False,True,False,False,True,True,True,False,True,True,False,True,True],[False,True,True,False,True,True,False,False,False,True,False,True,True,False],[True,False,True,True,False,False,True,False,True,False,False,True,True,True],[False,False,False,False,False,True,False,True,True,False,True,True,True,False],[False,True,False,True,True,True,False,True,True,True,False,True,False,False],[False,True,True,False,False,True,False,False,False,False,True,True,False,False]],[[False,False,False,False,True,False,True,False,True,True,True,True,True,True],[False,True,True,False,False,False,True,False,True,True,False,False,False,True],[True,False,False,False,False,False,False,True,True,False,True,False,True,True],[True,False,False,True,True,False,False,False,False,True,False,False,False,True],[False,False,False,True,True,False,True,True,True,False,True,False,False,False],[False,True,True,False,False,False,True,True,False,True,True,False,False,False],[False,True,True,False,True,True,False,False,False,True,False,True,True,True],[True,True,True,True,True,True,True,True,True,True,False,True,False,False],[True,True,False,False,False,True,False,True,False,False,False,False,False,False],[True,True,True,False,True,False,False,False,True,True,True,False,False,True],[True,True,True,True,False,True,True,False,False,True,True,True,False,True],[True,False,True,True,True,False,True,False,True,True,False,False,True,True],[True,True,True,False,False,False,True,False,False,False,False,False,False,False],[True,False,True,True,False,True,False,True,True,True,False,False,True,False],[True,False,False,False,True,True,False,False,True,False,False,True,False,True],[False,False,True,True,False,False,False,False,True,False,False,True,False,False]],[[True,True,False,False,True,False,False,False,True,True,False,True,True,True],[False,True,False,False,False,True,False,False,True,False,True,True,True,True],[False,True,True,True,False,True,False,True,False,False,True,True,True,False],[False,False,True,True,False,True,True,False,False,True,False,True,False,True],[False,True,False,False,False,True,False,False,True,False,True,True,False,False],[False,False,False,True,False,True,False,False,False,True,False,False,True,True],[False,True,False,False,False,True,True,False,False,True,False,True,True,True],[False,True,True,True,True,False,False,False,True,False,False,False,True,True],[False,False,False,False,True,False,True,True,True,False,True,False,True,True],[True,False,False,False,True,False,True,True,False,True,True,True,True,True],[True,False,False,False,True,False,False,False,True,True,False,False,True,True],[False,False,True,False,False,True,False,False,True,True,True,True,False,False],[True,True,True,False,True,False,False,False,False,True,True,True,False,True],[False,False,False,False,False,True,False,True,True,False,True,False,True,False],[False,True,False,True,False,True,True,False,True,False,False,False,True,True],[True,True,False,True,True,True,False,False,False,False,True,True,True,False]]], dtype = "bool")#candidate|6250|(13, 16, 14)|const|bool
bop_6251 = relay.logical_and(var_6249.astype('bool'), relay.reshape(const_6250.astype('bool'), relay.shape_of(var_6249))) # shape=(13, 16, 14)
output = bop_6251
output2 = bop_6251
func_6254 = relay.Function([var_6249,], output)
mod['func_6254'] = func_6254
mod = relay.transform.InferType()(mod)
mutated_mod['func_6254'] = func_6254
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6255 = relay.var("var_6255", dtype = "bool", shape = (13, 16, 14))#candidate|6255|(13, 16, 14)|var|bool
func_6254_call = mutated_mod.get_global_var('func_6254')
call_6256 = func_6254_call(var_6255)
output = call_6256
func_6257 = relay.Function([var_6255], output)
mutated_mod['func_6257'] = func_6257
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6402 = relay.var("var_6402", dtype = "float64", shape = (9, 1, 14))#candidate|6402|(9, 1, 14)|var|float64
uop_6403 = relay.exp(var_6402.astype('float64')) # shape=(9, 1, 14)
func_3698_call = mod.get_global_var('func_3698')
func_3700_call = mutated_mod.get_global_var('func_3700')
var_6417 = relay.var("var_6417", dtype = "bool", shape = (840,))#candidate|6417|(840,)|var|bool
call_6416 = relay.TupleGetItem(func_3698_call(relay.reshape(var_6417.astype('bool'), [12, 10, 7])), 1)
call_6418 = relay.TupleGetItem(func_3700_call(relay.reshape(var_6417.astype('bool'), [12, 10, 7])), 1)
output = relay.Tuple([uop_6403,call_6416,var_6417,])
output2 = relay.Tuple([uop_6403,call_6418,var_6417,])
func_6430 = relay.Function([var_6402,var_6417,], output)
mod['func_6430'] = func_6430
mod = relay.transform.InferType()(mod)
var_6431 = relay.var("var_6431", dtype = "float64", shape = (9, 1, 14))#candidate|6431|(9, 1, 14)|var|float64
var_6432 = relay.var("var_6432", dtype = "bool", shape = (840,))#candidate|6432|(840,)|var|bool
output = func_6430(var_6431,var_6432,)
func_6433 = relay.Function([var_6431,var_6432,], output)
mutated_mod['func_6433'] = func_6433
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7916 = relay.var("var_7916", dtype = "uint16", shape = (16, 15, 1))#candidate|7916|(16, 15, 1)|var|uint16
var_7917 = relay.var("var_7917", dtype = "uint16", shape = (16, 15, 13))#candidate|7917|(16, 15, 13)|var|uint16
bop_7918 = relay.multiply(var_7916.astype('uint16'), var_7917.astype('uint16')) # shape=(16, 15, 13)
func_5712_call = mod.get_global_var('func_5712')
func_5717_call = mutated_mod.get_global_var('func_5717')
var_7924 = relay.var("var_7924", dtype = "float64", shape = ())#candidate|7924|()|var|float64
var_7925 = relay.var("var_7925", dtype = "float64", shape = (480,))#candidate|7925|(480,)|var|float64
const_7926 = relay.const([6.298242,-5.187274,-5.469611,3.847783,-8.564338,6.287291,-6.134657,-7.588533,9.165803,9.037550,-9.959118,1.281510,7.760897,0.445461,0.902019,5.211287,-5.310311,1.740699,7.062270,0.925476,-3.597870,-8.741441,-2.697669,3.017662,7.408646,-8.615366,-4.864259,8.542451,-7.465359,-9.477143,3.358051,-5.350180,-2.417216,-0.930167,5.519396,4.086758,-0.561879,-2.809486,-8.721062,-5.598831,1.564886,-4.173085,-8.838072,9.697705,-5.380504,-2.364177,2.309578,5.160832,2.683084,6.078194,-2.226093,-4.078769,-9.309621,1.391373,5.118511,4.451192,-8.432029,-4.109219,2.970288,1.899544,-9.530083,1.764384,2.064654,0.618224,9.945645,6.080685,4.148118,-2.965352,-6.517382,-0.581304,-5.080480,-5.180428,2.429212,7.112392,-7.091349,4.433944,6.071426,0.054776,8.694352,3.462781,3.394916,-1.273561,-9.732638,5.599511,-3.611484,-4.656499,1.637306,-8.630030,-7.599526,9.791680,-3.129885,4.670633,7.211436,-1.443180,1.708467,1.956643,-8.031017,0.386992,6.390802,-0.759942,-5.709090,-6.398331,2.413145,8.413745,-0.780161,3.497844,1.183512,-6.735899,7.828992,2.144670,-8.216650,9.407018,2.117605,-3.318770,5.527632,-1.526368,8.503694,2.639365,6.598499,-2.274006,0.180973,7.744492,-2.146313,-4.929523,-3.490794,-4.074066,-9.970380,-3.326940,-1.251413,-2.574377,1.953142,-7.508891,8.906861,9.337164,-5.741634,4.031789,8.749824,-9.005076,-1.689461,3.543480,-6.549857,-4.362634,-2.644752,-8.558904,9.206796,-0.443194,-2.579153,7.923136,9.111633,-4.229206,3.848625,9.319195,-6.073684,-6.376616,-8.147884,-9.365195,-3.926728,-8.157095,2.075773,4.858815,2.434534,0.350328,-1.001958,-0.530319,6.220007,4.509851,-7.613784,-4.583140,-8.875721,1.458285,-9.178526,-5.902471,-6.924106,5.125534,2.157177,-6.644300,6.765660,-6.301359,9.495237,0.347082,-7.429422,3.385689,4.816439,4.352369,-6.800199,0.804809,-9.192339,1.639611,-5.018209,-7.909745,-9.979958,-5.625413,-2.286859,4.451688,7.430596,2.647826,-7.264808,-8.178431,-4.799625,9.326728,7.200709,2.745737,-5.907537,-8.932068,-8.607859,5.194062,-1.366097,-1.180522,-3.678377,-4.765224,-1.598060,8.710816,-7.479325,-3.323178,-1.383054,5.507649,-3.744146,7.947225,-7.606200,7.852089,8.833092,8.434347,4.713288,-3.205220,9.435695,2.111122,-5.247286,-1.258291,7.329228,5.633017,9.943295,3.265638,-9.046093,-0.729445,-3.946817,1.870479,-6.693589,8.230460,-7.443375,-9.988385,-8.344157,6.550547,-4.441286,4.045537,-0.468829,9.179172,-7.998629,-7.627351,-6.340935,6.714175,-0.390766,-7.365945,2.982958,-3.970897,7.981356,8.814288,5.600058,6.041458,8.913113,3.131846,5.820940,5.933713,7.756624,-3.012158,-6.990451,-4.735227,-1.546214,-0.339052,0.912341,0.166370,3.872187,-6.795120,5.657193,-2.096068,4.713710,9.523158,7.663308,-3.741298,-8.004292,-0.086902,-1.043587,8.619442,8.092765,-8.908141,7.158486,0.702365,-0.171730,6.952275,5.410764,-2.463882,4.676026,-5.430816,-9.777417,7.856277,5.768155,-0.536178,-1.992558,5.486357,9.732987,-7.942162,5.103536,4.702548,-8.948432,-6.450774,-3.384608,-4.194174,-1.465166,-9.697563,8.011189,6.200497,9.520961,-1.533809,7.745319,2.389111,1.324163,0.285615,-5.634456,-9.868005,8.978091,-6.297334,-2.409278,4.558441,3.441134,0.134606,0.764183,-0.596676,-9.639503,6.751432,-6.141274,-5.710468,-6.205660,-5.630038,-2.507411,7.030379,3.558078,-3.762617,-8.507188,-7.142168,2.398823,-5.784918,-1.190492,-6.380774,3.507230,3.451437,-6.944024,1.901679,7.753079,5.660233,8.755756,-5.381469,5.525650,-8.686234,-4.500808,0.825052,-4.825798,1.311788,-7.411638,-0.761504,8.730922,9.133792,8.536720,-8.933475,5.626897,8.357681,4.919204,7.037018,-5.976929,-3.109529,8.696922,-0.671803,-5.716142,-4.761242,0.893524,-9.695620,-0.278845,3.062868,6.943930,7.151319,1.468051,2.451854,-5.008240,6.467477,-4.979341,4.910627,-3.383314,4.256910,0.432790,6.745734,-9.564963,4.750560,-5.084513,2.398413,3.237829,-1.599923,3.528561,9.856804,-6.957998,-6.931815,-9.856055,-9.421452,2.835233,5.296191,-5.675232,-0.629808,1.787679,1.903802,-1.439056,3.171385,9.483595,-6.574148,7.977964,-6.529906,9.139505,-5.631063,1.537140,-4.579627,-3.132822,3.176391,-7.755746,-5.776509,-9.181501,2.444054,-2.893599,-0.625060,-3.506504,-9.028445,-6.637207,-5.999529,3.121691,8.340000,5.868271,5.982000,-1.312622,-4.084640,-8.123072,-6.837446,7.945100,0.764038,-4.586770,2.313687,8.846601,-4.774377,5.238798,5.473746,4.401189,5.962661,-9.550893,-4.717265,4.936600,5.327289,4.136503,-4.289100,-8.877831,-8.615464,3.039678,3.069792,5.899825,-3.197328,-9.873901,8.943367,0.129429,3.261335,-9.071421,-0.432995,-4.474224,9.000699,9.249140,-8.741398,-0.445352,-0.116031,7.049756,-4.477447,2.395825,5.320236,-4.710742,9.501999,2.350620,4.181432,-0.343385,9.904596,0.006973,4.817283,5.409349,-8.876573,-9.607924,9.688987,6.192519,5.007324,7.336434,-4.545086,2.498446,0.549453,-4.713319,-9.947861,-5.389959,-6.799694,0.460533,-8.142467,3.605247,-3.918742,1.076090,0.786487,7.835291,1.150457,2.353328,-0.024976,3.430559,1.604786,-2.210328,-4.920417,-7.999648,-2.895760,-5.894183,-5.478851,-5.117792,-2.599852,-7.545346,-4.645447,-2.101702,-5.167495,8.033419,-8.172767,-5.175728,3.020896,-9.762981,2.942264,-7.342578,-5.472555,-0.383189,-1.845873,2.409473,-2.576312,7.897979,4.340993,-0.323908,3.995970,-3.373574,-0.256187,-0.388854,1.377263,-6.781234,7.596825,-2.883356,8.063210,-9.835650,2.655081,-5.040677,3.910067,-9.160885,8.028770,1.429552,4.706562,5.589367,-5.169792,0.111281,-5.712788,2.271301,-0.273819,6.350182,-8.832722,4.684054,1.249988,-2.657697,2.579690,2.527090,2.977669,-1.684636,-0.486806,8.579172,4.034985,-7.054668,-3.395027,0.071199,1.150769,-0.182449,-7.862212,-9.008104,-4.611300,-8.940524,2.690677,-3.680435,-4.874149,0.772851,-7.978129,-2.545266,8.354426,6.859173,-7.645479,-4.763565,8.084009,1.282983,3.787025,8.467525,-2.632929,9.289134,3.658633,4.697192,-9.079022,-2.575619,2.275318,-9.593381,1.775657,-9.437178,-6.704151,-6.397419,5.649274,8.870298,5.807138,-4.667009,2.258379,9.148483,-4.102653,-0.941664,-8.118737,9.593489,1.419283,-2.004887,-7.324953,-6.266305,-5.146110,-8.915063,5.976862,-1.985887,6.848622,-2.383585,-0.619425,2.961048,-6.518294,-6.276074,9.653995,-4.476929,3.589879,2.903954,0.380013,1.549406,-9.611408,-6.776625,0.058266,-4.752758,7.966793,1.979051,3.879533,-8.885022,6.752512,-2.618090,0.300681,8.622151,8.049916,-7.891019,6.527858,-3.128394,2.206932,7.996023,4.681068,9.094500,-4.473439,7.122251,-2.425458,-1.872454,-4.806612,-3.150264,6.425733,-9.685320,-7.170997,-4.243004,-0.161905,-3.184962,3.582308,7.454293,6.269221,3.205793,4.263438,9.131895,4.122589,1.701500,-7.103130,0.573771,-9.617486,0.959375,-9.581356,-9.092739,-0.239711,-4.954700,-9.549627,1.906556,7.166051,1.425538,0.861729,-8.282309,-2.366252,-5.713451,6.964067,5.039588,7.270206,-3.672300,-1.490766,0.064759,2.248892,-3.930014,9.838828,-1.006209,-0.609403,0.790099,-3.821241,-6.317465,-2.723464,-9.141076,-7.591684,5.636812,-9.969397,5.244835,-6.182280,8.274521,4.057410,6.304627,2.624458,0.381298,0.650701,6.764744,-7.389446,1.371501,-0.527976,-4.735569,4.068193,8.049807,2.974011,-2.153070,6.056941,-9.897894,7.065529,8.444684,3.281443,-9.185127,8.200366,-6.015969,-9.215694,-2.264042,9.456388,6.269844,-5.801939,-6.883179,-3.794760,2.448168,8.958041,-2.131188,4.935664,2.351773,-7.094367,-4.324928,-2.002219,9.501354,-3.719933,2.022914,-4.176921,-7.401913,7.817318,-5.053622,6.221296,1.044305,4.368702,2.354645,1.213420,1.492913,-4.636746,-0.558989,3.261822,9.665824,7.284945,9.701049,-4.229583,5.844340,5.845780,8.683741,5.384674,9.330414,-2.074545,-7.996695,7.510969,2.982059,0.659293,-1.324296,4.817635,-2.839557,5.394446,-8.863957,3.574157,1.033007,8.197939,7.199771,-7.039780,-0.268348,3.955775,-0.946673,-2.062379,-1.576888,9.831515,-1.524870,6.286439,-5.170727,8.039143,-9.227680,-9.558945,6.111056,-5.782658,-5.153799,6.167490,0.741973,3.425380,5.388442,5.622172,5.460102,9.757357,3.179623,-4.965645,6.655866,-1.865808,-7.760604,4.399948,-6.811176,-6.292001,-8.129961,4.286781,-5.146647,-9.241739,9.720580,-4.373321,-1.651319,-3.798433,-1.564383,8.750162,-7.432479,3.067788,-1.342737,-0.109098,-3.622702,-6.811687,-2.831461,-5.100122,-8.290865,0.717737,-9.060986,2.426681,3.382284,-9.358621,-2.496318,3.860054,5.247887,-0.611225,1.862836,-8.958511,7.461934,6.861968,1.052611,5.375713,-4.729081,0.812676,-6.788241,3.412890,-5.515122,5.009705,-7.159275,-3.249681,0.367435,0.138092], dtype = "float64")#candidate|7926|(864,)|const|float64
const_7927 = relay.const([[4.144427,7.520714,-2.378820,6.920156,-5.559398,-0.688947,8.171173,9.846324,4.105479,4.356608,2.935575,-8.728306,7.726236,-1.807704,2.030912,9.674847,-9.791484,0.553878,-8.632718,-0.671170,-8.790879,8.585189,-3.914427,-2.169941,-5.694091,8.967121,-5.882194,-8.122659,9.636262,5.701622,-7.432395,3.670105,3.616979,8.540735,8.626997,-9.780417,-7.378645,7.618380,-3.450403,-6.054629,2.068139,-9.505990,-1.707083,-1.889036,1.217937,-7.729480,-8.928558,4.632452,-6.442189,-3.139882,-2.364239,8.786083,-3.737104,3.607262],[-8.662361,8.762704,5.470439,7.092783,-5.223882,-7.870705,0.957373,8.370241,-4.810072,0.409738,0.026877,6.650245,-8.477304,-7.826076,6.533592,8.763733,-1.010860,-1.778336,-3.953208,8.069840,1.483508,-7.616028,-9.464997,-1.861072,-9.369280,4.642410,5.888777,-6.934313,6.743677,-0.963357,-9.801665,-2.242119,-2.254843,6.827019,-8.006635,-8.135388,-1.994135,-7.157082,-8.530793,3.656974,-7.153059,4.078752,4.086501,2.620899,-1.913819,-8.125330,3.527322,5.981888,8.115767,-7.077144,8.920345,5.261261,1.707556,-4.069374],[-4.999018,2.684986,-5.942722,2.049469,-2.249867,-1.199216,-2.640812,2.343395,7.149304,-8.237411,7.610242,-3.797834,7.656657,-0.497690,3.361817,-5.107460,8.031064,-6.707021,-4.186610,7.111542,-4.031311,-3.103052,-4.815811,-9.221488,-1.279540,-6.481433,9.877665,7.687578,-9.380860,-4.675903,-5.723581,-6.370459,-0.124637,-0.788359,-8.944823,7.413496,7.398140,6.146272,7.771025,-4.576084,-9.934611,-5.272642,4.012370,-3.799318,5.959111,-5.181205,-8.296544,8.966379,9.047992,9.210546,-9.204940,4.284956,-7.820877,7.612275]], dtype = "float32")#candidate|7927|(3, 54)|const|float32
call_7923 = relay.TupleGetItem(func_5712_call(relay.reshape(var_7924.astype('float64'), []), relay.reshape(var_7925.astype('float64'), [3, 16, 10]), relay.reshape(const_7926.astype('float64'), [6, 144]), relay.reshape(const_7927.astype('float32'), [162,]), ), 0)
call_7928 = relay.TupleGetItem(func_5717_call(relay.reshape(var_7924.astype('float64'), []), relay.reshape(var_7925.astype('float64'), [3, 16, 10]), relay.reshape(const_7926.astype('float64'), [6, 144]), relay.reshape(const_7927.astype('float32'), [162,]), ), 0)
output = relay.Tuple([bop_7918,call_7923,var_7924,var_7925,const_7926,const_7927,])
output2 = relay.Tuple([bop_7918,call_7928,var_7924,var_7925,const_7926,const_7927,])
func_7937 = relay.Function([var_7916,var_7917,var_7924,var_7925,], output)
mod['func_7937'] = func_7937
mod = relay.transform.InferType()(mod)
mutated_mod['func_7937'] = func_7937
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7937_call = mutated_mod.get_global_var('func_7937')
var_7939 = relay.var("var_7939", dtype = "uint16", shape = (16, 15, 1))#candidate|7939|(16, 15, 1)|var|uint16
var_7940 = relay.var("var_7940", dtype = "uint16", shape = (16, 15, 13))#candidate|7940|(16, 15, 13)|var|uint16
var_7941 = relay.var("var_7941", dtype = "float64", shape = ())#candidate|7941|()|var|float64
var_7942 = relay.var("var_7942", dtype = "float64", shape = (480,))#candidate|7942|(480,)|var|float64
call_7938 = func_7937_call(var_7939,var_7940,var_7941,var_7942,)
output = call_7938
func_7943 = relay.Function([var_7939,var_7940,var_7941,var_7942,], output)
mutated_mod['func_7943'] = func_7943
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7945 = relay.var("var_7945", dtype = "int32", shape = (2, 12, 9))#candidate|7945|(2, 12, 9)|var|int32
var_7946 = relay.var("var_7946", dtype = "int32", shape = (2, 12, 9))#candidate|7946|(2, 12, 9)|var|int32
bop_7947 = relay.equal(var_7945.astype('bool'), relay.reshape(var_7946.astype('bool'), relay.shape_of(var_7945))) # shape=(2, 12, 9)
func_3767_call = mod.get_global_var('func_3767')
func_3769_call = mutated_mod.get_global_var('func_3769')
var_7954 = relay.var("var_7954", dtype = "float32", shape = (1, 143))#candidate|7954|(1, 143)|var|float32
call_7953 = func_3767_call(relay.reshape(var_7954.astype('float32'), [11, 13, 1]))
call_7955 = func_3767_call(relay.reshape(var_7954.astype('float32'), [11, 13, 1]))
output = relay.Tuple([bop_7947,call_7953,var_7954,])
output2 = relay.Tuple([bop_7947,call_7955,var_7954,])
func_7967 = relay.Function([var_7945,var_7946,var_7954,], output)
mod['func_7967'] = func_7967
mod = relay.transform.InferType()(mod)
var_7968 = relay.var("var_7968", dtype = "int32", shape = (2, 12, 9))#candidate|7968|(2, 12, 9)|var|int32
var_7969 = relay.var("var_7969", dtype = "int32", shape = (2, 12, 9))#candidate|7969|(2, 12, 9)|var|int32
var_7970 = relay.var("var_7970", dtype = "float32", shape = (1, 143))#candidate|7970|(1, 143)|var|float32
output = func_7967(var_7968,var_7969,var_7970,)
func_7971 = relay.Function([var_7968,var_7969,var_7970,], output)
mutated_mod['func_7971'] = func_7971
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8119 = relay.var("var_8119", dtype = "float32", shape = (4, 3, 1))#candidate|8119|(4, 3, 1)|var|float32
uop_8120 = relay.acosh(var_8119.astype('float32')) # shape=(4, 3, 1)
func_4845_call = mod.get_global_var('func_4845')
func_4848_call = mutated_mod.get_global_var('func_4848')
var_8126 = relay.var("var_8126", dtype = "float64", shape = (2, 12))#candidate|8126|(2, 12)|var|float64
call_8125 = relay.TupleGetItem(func_4845_call(relay.reshape(var_8126.astype('float64'), [3, 4, 2])), 0)
call_8127 = relay.TupleGetItem(func_4848_call(relay.reshape(var_8126.astype('float64'), [3, 4, 2])), 0)
output = relay.Tuple([uop_8120,call_8125,var_8126,])
output2 = relay.Tuple([uop_8120,call_8127,var_8126,])
func_8138 = relay.Function([var_8119,var_8126,], output)
mod['func_8138'] = func_8138
mod = relay.transform.InferType()(mod)
var_8139 = relay.var("var_8139", dtype = "float32", shape = (4, 3, 1))#candidate|8139|(4, 3, 1)|var|float32
var_8140 = relay.var("var_8140", dtype = "float64", shape = (2, 12))#candidate|8140|(2, 12)|var|float64
output = func_8138(var_8139,var_8140,)
func_8141 = relay.Function([var_8139,var_8140,], output)
mutated_mod['func_8141'] = func_8141
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8175 = relay.var("var_8175", dtype = "float64", shape = (9, 16, 16))#candidate|8175|(9, 16, 16)|var|float64
uop_8176 = relay.log2(var_8175.astype('float64')) # shape=(9, 16, 16)
output = uop_8176
output2 = uop_8176
func_8183 = relay.Function([var_8175,], output)
mod['func_8183'] = func_8183
mod = relay.transform.InferType()(mod)
mutated_mod['func_8183'] = func_8183
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8184 = relay.var("var_8184", dtype = "float64", shape = (9, 16, 16))#candidate|8184|(9, 16, 16)|var|float64
func_8183_call = mutated_mod.get_global_var('func_8183')
call_8185 = func_8183_call(var_8184)
output = call_8185
func_8186 = relay.Function([var_8184], output)
mutated_mod['func_8186'] = func_8186
mutated_mod = relay.transform.InferType()(mutated_mod)
const_8617 = relay.const([[[8,10,-8,10,3,-2,-2],[-8,2,-5,-7,-7,-3,-7],[1,-1,-3,4,-9,7,-2],[10,-1,-6,-4,5,1,-8],[5,5,1,-6,-8,-8,-5],[-7,-5,10,-7,9,9,-5],[-6,-7,10,8,10,6,6],[-3,10,-7,8,2,-6,-7],[5,-7,6,-1,-8,8,4],[-5,9,-9,-9,5,-6,3],[8,-8,3,-5,3,-5,-4]],[[8,6,-8,1,-5,6,10],[-9,-7,-2,-1,4,3,-1],[-6,-1,2,-8,-2,10,1],[-7,1,3,-2,-2,-1,-8],[-4,5,3,4,3,8,3],[1,3,7,4,1,-9,1],[-1,-6,-6,-5,-7,6,3],[3,1,3,4,7,2,-5],[3,10,-5,-9,7,1,6],[-4,-9,-6,3,-4,9,-6],[-1,9,9,10,-6,-6,-4]],[[7,-4,9,-7,6,6,6],[3,-6,3,10,7,-5,-8],[7,7,2,-4,5,-7,9],[10,9,-7,10,2,-1,10],[3,-4,10,4,-3,2,-10],[-6,2,-6,9,-8,3,-1],[-1,10,-10,4,-6,-1,-7],[-6,4,5,7,-9,-3,9],[8,-10,-2,-3,-5,-2,5],[1,-10,8,8,-10,-3,5],[-7,-3,4,-4,-6,-9,-3]],[[-3,6,-10,-10,10,2,-4],[10,-4,-4,2,2,4,-2],[-8,-4,3,4,6,-4,3],[6,-2,9,-1,-2,-2,-8],[4,-1,-7,5,5,-7,-3],[-5,6,4,-8,-3,7,-4],[4,7,-4,-2,3,2,7],[9,10,-6,7,-6,4,-4],[7,-2,-1,-10,-9,-7,2],[-2,-9,-8,-7,5,6,-9],[-1,3,-10,-10,8,-8,-4]],[[1,4,-6,-4,-10,-1,-7],[6,-7,-8,4,9,-8,6],[6,-1,-8,10,-6,8,-7],[2,-6,-9,-5,7,-4,-7],[-3,-10,-3,-6,6,6,-10],[9,-5,-1,-1,-4,-7,10],[-7,-6,10,-9,-7,-5,-1],[-6,-7,-10,7,-3,-4,-9],[-8,-4,5,-7,-8,-7,3],[9,-3,7,-9,4,10,6],[-4,7,-3,-9,3,-1,-4]],[[5,10,-1,8,-5,-7,-4],[-4,-1,7,-10,-8,-9,5],[-9,8,-6,9,-1,7,5],[5,-1,4,-9,7,-1,10],[-6,-10,4,3,6,9,-1],[5,10,-7,-3,2,-2,-3],[4,5,-10,6,-4,-6,-9],[10,-1,5,-7,4,-5,-3],[-5,-2,-10,8,-3,-6,3],[9,-6,3,-6,-1,-3,4],[-1,-5,-3,-5,3,5,-10]]], dtype = "uint16")#candidate|8617|(6, 11, 7)|const|uint16
var_8618 = relay.var("var_8618", dtype = "uint16", shape = (6, 11, 7))#candidate|8618|(6, 11, 7)|var|uint16
bop_8619 = relay.subtract(const_8617.astype('uint16'), relay.reshape(var_8618.astype('uint16'), relay.shape_of(const_8617))) # shape=(6, 11, 7)
uop_8628 = relay.log2(const_8617.astype('float64')) # shape=(6, 11, 7)
bop_8636 = relay.divide(uop_8628.astype('float64'), relay.reshape(bop_8619.astype('float64'), relay.shape_of(uop_8628))) # shape=(6, 11, 7)
uop_8640 = relay.sin(bop_8636.astype('float64')) # shape=(6, 11, 7)
func_6254_call = mod.get_global_var('func_6254')
func_6257_call = mutated_mod.get_global_var('func_6257')
const_8643 = relay.const([False,False,False,False,False,True,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,False,True,True,False,False,False,False,True,False,False,False,True,True,True,False,False,False,False,False,True,True,True,False,False,True,False,False,False,False,False,False,False,True,True,True,True,True,True,True,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,True,False,False,True,False,True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,False,True,False,True,False,False,False,False,True,False,False,False,False,True,True,True,False,True,True,False,True,False,True,False,True,True,False,True,False,True,True,False,False,True,False,False,False,False,True,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,True,True,True,True,False,True,False,False,True,False,False,False,True,False,False,False,False,False,False,False,True,False,False,True,True,True,True,False,False,False,False,True,True,True,False,True,False,True,True,False,True,True,False,True,True,False,True,False,True,False,False,False,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,True,False,False,False,False,True,False,True,True,False,False,True,False,False,True,False,True,False,False,False,True,False,False,True,False,False,True,False,False,True,True,True,True,True,True,True,True,True,False,False,True,False,True,True,False,False,False,False,False,False,False,True,True,False,True,True,True,False,True,True,True,False,False,False,True,True,True,False,True,False,False,False,False,True,False,True,True,False,True,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,True,True,True,False,True,False,False,False,False,True,True,False,False,True,False,True,False,True,False,True,False,True,True,True,False,True,False,True,False,False,True,True,True,False,False,False,False,False,False,False,True,False,True,True,True,True,False,True,False,False,True,True,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,True,True,True,False,True,False,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,False,False,True,True,False,True,True,True,False,True,False,False,False,True,False,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,False,False,False,True,True,True,True,False,True,False,False,True,False,True,False,True,True,True,True,False,False,True,True,False,True,True,True,True,False,False,False,False,False,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,False,False,True,True,True,False,False,False,False,False,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,True,False,True,False,False,True,False,False,False,True,False,False,False,False,False,True,False,False,False,True,True,True,True,False,False,True,True,False,False,False,True,True,False,False,True,True,True,False,True,True,True,True,True,True,False,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,False,True,True,False,True,True,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,False,False,False,False,True,False,True,False,False,True,True,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,False,False,False,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False,False,True,False,False,False,True,False,False,False,True,False,True,False,True,True,True,True,True,False,True,True,True,False,False,True,False,True,False,False,True,False,False,True,True,True,True,False,True,True,False,False,False,True,True,True,False,False,False,True,False,True,True,True,True,True,False,False,True,False,False,False,True,False,True,False,True,True,False,True,False,True,True,False,False,False,True,True,False,True,False,False,False,True,True,False,True,True,False,False,False,False,False,True,False,False,True,False,True,True,True,True,False,False,False,True,True,True,False,True,True,False,False,True,False,True,True,True,True,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,False,True,True,False,False,True,False,False,True,True,False,True,False,False,True,False,True,True,True,False,True,False,True,True,True,True,False,True,False,True,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,True,False,True,False,True,False,True,False,True,False,True,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,True,True,False,False,True,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,True,True,True,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,True,True,True,True,True,False,True,True,True,True,True,True,False,True,False,False,True,False,True,True,False,True,True,False,False,False,False,False,True,True,False,False,False,True,True,False,False,True,True,True,False,True,False,False,False,False,True,False,False,False,True,False,True,True,True,True,True,True,False,False,False,False,False,True,False,False,True,False,True,False,True,True,True,True,False,False,True,True,False,False,True,True,False,False,False,True,False,True,True,False,True,True,False,False,False,False,False,True,False,True,False,True,False,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,True,True,False,False,True,False,True,False,False,False,False,True,False,False,False,False,False,False,True,False,False,True,False,False,False,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,False,True,True,False,True,True,False,False,False,False,False,False,True,True,False,True,False,False,False,True,False,True,True,False,False,True,True,True,True,False,True,True,True,True,True,True,False,False,True,False,False,True,False,True,False,True,False,False,True,False,True,True,True,False,True,True,False,False,True,True,False,False,False,False,True,True,True,False,True,False,False,True,True,True,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,True,True,True,True,True,True,True,True,False,True,False,False,True,False,True,False,False,True,False,True,False,True,False,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,True,False,True,True,False,False,True,False,True,False,True,True,True,True,True,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True,True,True,True,False,True,True,True,True,False,True,False,True,False,True,True,True,True,True,True,True,True,False,True,True,False,False,False,False,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,False,False,True,False,False,False,False,False,False,False,False,False,True,True,True,False,True,False,True,True,False,True,True,True,True,True,False,True,False,True,False,False,True,True,False,True,True,True,True,True,True,False,True,True,True,True,True,True,True,False,False,True,True,True,False,False,False,False,False,True,True,False,True,False,False,False,False,True,True,True,True,False,True,False,True,True,True,True,False,False,True,False,True,True,True,False,True,False,False,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,True,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,True,True,False,True,True,False,False,False,True,True,False,False,True,True,True,True,False,True,True,False,False,True,True,True,False,True,True,True,True,False,True,False,True,True,True,True,True,True,True,False,True,True,False,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,False,False,False,True,False,False,False,True,True,True,True,False,True,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False,False,False,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,True,False,True,False,False,False,False,True,False,False,False,False,False,True,True,False,True,False,False,True,False,True,False,False,False,False,True,True,True,True,True,False,True,False,True,False,False,True,True,True,False,True,True,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,True,True,True,False,False,True,False,True,True,True,False,False,False,False,True,True,True,True,True,True,False,False,False,False,False,False,False,True,False,False,True,True,False,False,True,False,True,False,True,False,True,True,False,True,False,True,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,False,False,True,True,True,True,False,True,False,True,False,True,True,False,False,False,False,True,False,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,False,False,True,True,True,False,True,False,False,True,False,False,True,True,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,False,True,False,True,True,True,False,True,False,False,True,False,False,True,True,True,False,False,False,False,True,False,False,False,False,False,True,True,False,True,True,False,True,True,True,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,False,False,False,True,False,False,True,True,False,True,True,True,False,False,True,True,False,True,True,True,False,False,False,True,False,True,False,True,True,False,False,False,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,True,True,False,True,True,True,True,True,True,False,True,False,False,True,False,False,False,True,True,True,False,True,True,True,True,True,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,True,True,True,True,False,True,True,True,False,False,True,True,True,False,True,False,True,False,True,False,True,True,False,True,False,False,True,False,False,True,True,False,False,False,True,False,True,False,True,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,False,True,True,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,True,True,True,True,True,True,False,False,True,True,False,True,True,False,True,False,False,False,True,False,False,True,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,True,False,True,False,True,False,True,True,False,False,True,False,True,True,False,False,False,True,False,True,True,False,True,False,False,False,True,True,False,False,True,True,False,False,False,True,True,True,False,True,True,True,True,False,True,True,True,True,False,True,False,False,False,True,False,False,True,True,False,True,True,True,True,False,False,True,True,True,False,False,False,False,True,True,False,False,False,True,True,False,True,True,False,True,False,False,True,True,False,True,True,True,True,False,True,True,True,True,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,True,True,True,False,False,False,False,True,True,False,True,False,True,True,True,False,False,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,False,False,False,True,False,True,False,True,False,False,False,True,True,True,False,True,True,True,False,True,True,False,True,True,False,False,True,True,True,False,True,False,False,True,True,True,True,True,False,True,False,False,True,True,True,True,False,False,False,True,True,True,True,True,False,False,True,True,True,True,False,True,True,False,False,False,True,True,True,True,True,True,False,False,True,True,True,True,False,True,False,True,False,False,False,True,False,False,False,True,True,False,False,False,True,True,False,False,False,True,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,False,False,False,False,True,True,False,True,True,False,True,True,True,True,False,True,True,True,False,False,False,False,True,False,False,True,True,False,False,True,False,True,True,False,True,False,True,False,True,False,False,True,True,True,False,False,False,True,True,False,False,True,True,True,False,True,False,True,False,True,False,False,False,True,False,True,True,True,True,True,True,True,False,True,False,False,True,False,False,False,True,False,True,False,True,True,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,False,True,True,True,False,False,False,False,False,False,True,False,True,True,True,True,True,True,False,False,False,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,True,False,True,True,False,True,True,False,True,True,False,True,False,False,True,True,False,False,True,True,False,True,False,False,True,True,True,True,True,False,False,True,False,True,False,True,True,True,True,False,True,True,True,True,True,False,False,True,False,True,False,False,False,False,False,True,True,False,False,True,False,True,False,True,False,False,False,True,False,True,True,True,True,False,False,False,False,True,False,True,False,False,True,True,True,False,False,False,False,True,True,False,False,True,True,False,False,True,False,False,True,True,True,False,False,True,False,False,False,False,True,True,True,True,False,False,True,False,False,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,True,True,False,False,False,False,False,True,True,True,False,True,True,True,False,False,False,True,False,False,True,True,True,True,True,True,True,False,True,False,True,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,False,False,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,True,True,False,True,False,True,True,True,False,True,False,False,False,False,False,False,False,False,False,True,True,True,True,False,False,False,True,True,False,True,True,True,False,False,True,False,True,False,False,True,True,False,True,True,False,True,False,True,True,False,False,True,False,False,True,False,False,False,True,False,True,True,False,True,True,True,True,False,True,True,False,False,True,True,True,False,True,True,True,False,False,True,True,False,True,False,False,False,False,True,False,True,False,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,False,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,False,True,True,False,False,True,False,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,True,True,True,True,True,True,True,True,False,False,True,False,False,False,False,False,False,True,False,False,True,True,False,False,True,True,False,False,True,False,False,False,True,True,True,False,True,False,True,True,False,False,True,False,True,False,False,True], dtype = "bool")#candidate|8643|(2912,)|const|bool
call_8642 = func_6254_call(relay.reshape(const_8643.astype('bool'), [13, 16, 14]))
call_8644 = func_6254_call(relay.reshape(const_8643.astype('bool'), [13, 16, 14]))
bop_8645 = relay.greater(uop_8640.astype('bool'), relay.reshape(bop_8636.astype('bool'), relay.shape_of(uop_8640))) # shape=(6, 11, 7)
func_3767_call = mod.get_global_var('func_3767')
func_3769_call = mutated_mod.get_global_var('func_3769')
const_8656 = relay.const([-3.248113,4.463962,-3.397379,8.529746,-7.396521,5.705402,2.969931,6.188323,-9.307393,-5.282231,6.726586,7.214550,4.819149,5.216922,8.357553,4.373503,-5.401916,-9.819159,-8.361289,-2.260722,4.650059,-0.529573,8.622724,-2.491119,-1.940094,-3.699122,-7.225295,-3.857991,-2.854060,-2.140651,1.017574,3.182025,-7.954700,-9.109194,4.794729,6.873189,-8.209854,4.880111,1.314786,7.477939,1.973909,3.342255,0.393591,9.316061,-2.409528,6.794985,2.637007,2.640533,1.374541,-4.223849,-1.008203,9.843600,6.420714,-4.251601,-6.237577,8.270601,-1.485209,3.938346,-7.541308,8.078492,-6.148368,-9.718007,7.420554,6.437483,4.420085,1.490096,7.228823,-9.479916,-8.177865,-6.499906,-5.328671,-1.540165,-1.076253,-3.859370,-2.718947,8.739553,-6.254721,9.694778,9.227067,-1.749757,-7.493252,-0.212009,9.979580,3.956638,-9.108586,-3.046808,1.096658,5.373372,7.047964,-0.478326,4.509432,-2.152033,9.667818,4.651261,3.194870,9.451314,9.363180,0.638322,-9.453296,-9.813040,-6.155506,6.768563,8.275106,-1.364348,-1.246358,5.774838,-1.652945,0.135369,0.574888,1.888813,2.493847,-5.585532,-6.486001,3.197790,-6.088696,1.366745,-1.455931,-0.429666,2.923969,-3.937041,2.222630,6.264479,-7.272970,9.698647,5.146477,-2.945290,8.426252,-6.343530,-4.853903,-7.482586,2.045854,-7.232677,-2.069288,-5.903957,4.183857,0.016170,-2.573442,-9.426388,-0.676218,-7.960055,-7.961960,-2.477694,4.248455], dtype = "float32")#candidate|8656|(143,)|const|float32
call_8655 = func_3767_call(relay.reshape(const_8656.astype('float32'), [11, 13, 1]))
call_8657 = func_3767_call(relay.reshape(const_8656.astype('float32'), [11, 13, 1]))
func_4845_call = mod.get_global_var('func_4845')
func_4848_call = mutated_mod.get_global_var('func_4848')
const_8662 = relay.const([[8.502110],[5.923394],[8.686569],[-7.943131],[-1.216056],[-7.787096],[2.929756],[7.762791],[4.623655],[-3.122851],[9.821402],[8.235468],[4.826060],[-5.009591],[8.170641],[0.226962],[-5.848542],[0.032030],[-3.580516],[9.477879],[-2.275662],[-1.809015],[-1.519390],[-6.895579]], dtype = "float64")#candidate|8662|(24, 1)|const|float64
call_8661 = relay.TupleGetItem(func_4845_call(relay.reshape(const_8662.astype('float64'), [3, 4, 2])), 0)
call_8663 = relay.TupleGetItem(func_4848_call(relay.reshape(const_8662.astype('float64'), [3, 4, 2])), 0)
output = relay.Tuple([call_8642,const_8643,bop_8645,call_8655,const_8656,call_8661,const_8662,])
output2 = relay.Tuple([call_8644,const_8643,bop_8645,call_8657,const_8656,call_8663,const_8662,])
func_8671 = relay.Function([var_8618,], output)
mod['func_8671'] = func_8671
mod = relay.transform.InferType()(mod)
mutated_mod['func_8671'] = func_8671
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8672 = relay.var("var_8672", dtype = "uint16", shape = (6, 11, 7))#candidate|8672|(6, 11, 7)|var|uint16
func_8671_call = mutated_mod.get_global_var('func_8671')
call_8673 = func_8671_call(var_8672)
output = call_8673
func_8674 = relay.Function([var_8672], output)
mutated_mod['func_8674'] = func_8674
mutated_mod = relay.transform.InferType()(mutated_mod)
const_8676 = relay.const([[[5.366627],[0.946076],[4.769506],[9.873390],[-4.176213]],[[7.211551],[-3.933962],[6.239907],[-6.252027],[-7.935196]],[[7.479244],[-4.652698],[9.732317],[-7.284843],[4.079868]],[[3.299930],[-5.630833],[-6.791178],[-3.167254],[-9.466293]],[[4.398619],[6.708328],[7.093150],[4.107203],[-3.922303]],[[-9.211174],[-7.419973],[9.394526],[-8.681767],[7.513255]],[[5.029620],[4.967658],[8.975016],[6.551801],[2.411493]],[[-9.546471],[0.533411],[-6.394085],[-5.064102],[8.967771]],[[9.746181],[-3.519850],[-6.889038],[8.756412],[-0.597130]],[[-0.599645],[-9.027117],[2.767624],[9.384632],[0.880846]],[[-6.458588],[-5.484819],[2.376521],[-7.697311],[-6.913576]],[[0.377484],[3.504878],[-4.194462],[3.024103],[2.741950]],[[-3.656277],[3.610743],[1.247074],[-7.969186],[-9.415095]],[[9.465280],[6.179436],[-9.794725],[-2.522716],[-4.751167]],[[-1.291028],[4.959756],[-8.150566],[4.904231],[7.060051]]], dtype = "float32")#candidate|8676|(15, 5, 1)|const|float32
uop_8677 = relay.asinh(const_8676.astype('float32')) # shape=(15, 5, 1)
func_4580_call = mod.get_global_var('func_4580')
func_4583_call = mutated_mod.get_global_var('func_4583')
const_8680 = relay.const([[-0.846892,5.892851,-5.532771,-9.893938,7.795537,9.093901,5.702365,7.264398,6.177482,-3.062249,7.205083,1.678636,1.069994,-6.791610,5.985348,7.819244,-9.495072,-2.719739,-6.656460,2.265637,-4.743536,3.721857,-4.290421,6.464980,0.156124,-2.195771,-5.575678,-3.270788,-1.278787,-4.611318,-2.097354,-8.766343,-9.189367,7.166319,0.165467,-7.154711,7.443966,9.452575,-0.866348,5.664871,-3.755567,-7.510250,6.922282,-5.450354,-7.184752,7.843934,-4.479011,2.020028,3.065392,4.898721,2.965417,-6.923993,-5.976611,-0.750470,-8.790992,-6.798332,5.389783,-2.646791,6.330622,7.639471,0.977682,-7.754497,-7.146305,-0.595435,1.884462,-7.741799,8.894529,8.229836,-6.323406,-9.605812,-3.678159,7.851763,3.452284,-9.873414,-6.137689,-4.510531,9.898472,4.151776,-4.966496,0.535587,9.348033,6.619585,-7.796577,-6.146838,-9.737043,-4.377474,-2.716018,1.620818,8.529891,-5.231459,1.012399,8.877658,-2.979494,-0.166033,-4.271809,-7.068982,3.344548,-8.754406,-7.289176,-2.510852,3.599933,3.238919,-6.132582,3.168490,7.625905,8.684937,2.424807,5.344378,4.666741,-0.027038,3.588231,7.538997,-4.456422,-2.043888,0.170985,-1.519693,9.399805,-3.441282,-0.632002,1.228308,6.312157,-8.884935,9.118959,-0.322793,6.519101,-2.530715,8.068271,3.012316,4.738102,3.496232,-3.813665,8.081626,1.311921,0.213628,-9.585568,0.094518,2.751056,-6.318939,7.888022,7.658341,7.968568,2.991357,6.979020,6.565665,2.042968,9.734371,-6.517332,8.518569,-4.337826,7.785159,-5.476401,9.484918,-4.167455,-7.765953,-7.431243,-5.406854,-7.535593,9.452092,-8.080960,-5.421365,4.468326,1.866786,1.365828,8.345629,9.248070,-3.640776,-5.329285,8.527191,7.876321,-8.456564,4.379946,6.312145,7.037411,6.422956,4.278278,0.056362,-8.361461,-5.679172,3.029404,7.160247,-0.624029,-9.371567,3.999984,5.673808,-3.950737,4.229515,-2.026031,0.296623,2.958775,3.149402,-3.368978,3.577312,9.982705,-8.731000,9.035240,4.181842,8.788024,-8.229957,2.982442,5.740631,-9.300430,6.893917,-6.195557,-3.575323,-6.288255,-2.697272,-7.750249,6.260504,-1.517830,-7.129627,0.059765,2.412388,-4.501211,-5.910191,-1.282507,8.943998,-0.877133,2.061922,8.963874,-7.426349,-8.488625,-4.247693,-6.099532,-1.321309,-0.585614,-7.744617,4.916153,-2.308598,-4.014294,3.539856,4.960822]], dtype = "float64")#candidate|8680|(1, 231)|const|float64
call_8679 = relay.TupleGetItem(func_4580_call(relay.reshape(const_8680.astype('float64'), [7, 11, 3])), 0)
call_8681 = relay.TupleGetItem(func_4583_call(relay.reshape(const_8680.astype('float64'), [7, 11, 3])), 0)
func_8671_call = mod.get_global_var('func_8671')
func_8674_call = mutated_mod.get_global_var('func_8674')
const_8685 = relay.const([-3,2,-5,-9,1,1,6,3,8,-7,-4,-9,3,-8,4,10,2,1,-3,4,2,7,5,-3,-4,1,1,1,-9,-9,-10,-2,9,2,4,7,-5,5,6,2,-8,8,-2,-1,7,6,7,2,1,-1,3,-2,-2,-8,-5,-8,1,10,4,4,9,9,-8,-5,4,-4,4,5,3,6,-2,-10,-10,-8,-2,-6,-4,9,5,-1,-10,7,-10,-1,6,2,-2,2,-3,-8,5,-7,10,-1,2,5,-6,7,5,-1,-5,-8,7,1,-2,-4,5,-6,-9,-2,-8,4,-1,1,3,6,7,5,4,4,4,-3,-1,-6,7,-3,4,10,-2,-1,5,3,1,-3,-3,-3,5,8,6,-6,9,-1,-9,-10,3,4,-9,9,-4,-7,9,5,-7,-2,6,-7,9,10,8,-7,-1,1,7,-2,-2,9,8,-7,-9,-7,9,2,3,-6,-3,-3,5,4,4,4,-4,7,-8,-6,-5,2,10,-2,5,3,-2,-2,-10,10,4,-10,-8,2,-3,-3,-3,4,8,-6,5,-10,-6,5,-1,-10,8,3,6,2,-4,-10,1,-10,-2,-3,-6,8,-5,9,-6,1,6,-2,7,-4,10,-10,9,-1,8,2,6,7,-2,9,3,4,4,-6,9,-4,5,1,3,9,-7,-5,-2,6,9,2,7,-5,-9,2,10,-6,-7,1,10,-1,-2,9,9,5,-5,9,-10,-1,-5,8,10,-2,-2,6,4,8,4,-9,-5,10,-1,1,3,-4,-8,4,6,-4,-1,-10,-10,3,8,-6,6,4,-6,3,-9,-10,9,3,-1,4,7,-7,2,10,1,2,3,7,1,9,-8,4,-2,-5,-4,-3,4,-8,9,6,-4,-9,8,-6,-7,8,-3,-5,1,-8,-10,8,2,-10,-3,-2,9,-6,7,-6,5,2,-8,3,-8,6,3,-9,9,-7,-8,-3,-10,3,-9,4,3,-3,2,10,-10,-5,8,7,7,-4,-3,-1,-4,-2,3,8,-1,-5,-1,-2,-1,2,-3,9,-5,5,9,-2,-2,5,-2,1,8,-8,-3,9,-7,5,2,-2,-8,4,6,-8,4,-6,-8,2,5,4,8,1,-6,7,-2,-4,9,6,6,4,9,6,6,-5,8,8,3,-3,-8,7,-1,-8,1,-6,10,-8,-7,-6,4,2,1,6,-9,-4,-9,-7,-4,-3,-9,-3,-6,-7,5,5,-5,9], dtype = "uint16")#candidate|8685|(462,)|const|uint16
call_8684 = relay.TupleGetItem(func_8671_call(relay.reshape(const_8685.astype('uint16'), [6, 11, 7])), 6)
call_8686 = relay.TupleGetItem(func_8674_call(relay.reshape(const_8685.astype('uint16'), [6, 11, 7])), 6)
bop_8693 = relay.bitwise_xor(uop_8677.astype('uint16'), relay.reshape(const_8676.astype('uint16'), relay.shape_of(uop_8677))) # shape=(15, 5, 1)
output = relay.Tuple([call_8679,const_8680,call_8684,const_8685,bop_8693,])
output2 = relay.Tuple([call_8681,const_8680,call_8686,const_8685,bop_8693,])
func_8714 = relay.Function([], output)
mod['func_8714'] = func_8714
mod = relay.transform.InferType()(mod)
mutated_mod['func_8714'] = func_8714
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8714_call = mutated_mod.get_global_var('func_8714')
call_8715 = func_8714_call()
output = call_8715
func_8716 = relay.Function([], output)
mutated_mod['func_8716'] = func_8716
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8714_call = mod.get_global_var('func_8714')
func_8716_call = mutated_mod.get_global_var('func_8716')
call_8719 = relay.TupleGetItem(func_8714_call(), 4)
call_8720 = relay.TupleGetItem(func_8716_call(), 4)
output = relay.Tuple([call_8719,])
output2 = relay.Tuple([call_8720,])
func_8725 = relay.Function([], output)
mod['func_8725'] = func_8725
mod = relay.transform.InferType()(mod)
mutated_mod['func_8725'] = func_8725
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8725_call = mutated_mod.get_global_var('func_8725')
call_8726 = func_8725_call()
output = call_8726
func_8727 = relay.Function([], output)
mutated_mod['func_8727'] = func_8727
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8714_call = mod.get_global_var('func_8714')
func_8716_call = mutated_mod.get_global_var('func_8716')
call_8768 = relay.TupleGetItem(func_8714_call(), 3)
call_8769 = relay.TupleGetItem(func_8716_call(), 3)
uop_8775 = relay.sin(call_8768.astype('float32')) # shape=(462,)
uop_8777 = relay.sin(call_8769.astype('float32')) # shape=(462,)
output = uop_8775
output2 = uop_8777
func_8786 = relay.Function([], output)
mod['func_8786'] = func_8786
mod = relay.transform.InferType()(mod)
output = func_8786()
func_8787 = relay.Function([], output)
mutated_mod['func_8787'] = func_8787
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8786_call = mod.get_global_var('func_8786')
func_8787_call = mutated_mod.get_global_var('func_8787')
call_8798 = func_8786_call()
call_8799 = func_8786_call()
output = relay.Tuple([call_8798,])
output2 = relay.Tuple([call_8799,])
func_8824 = relay.Function([], output)
mod['func_8824'] = func_8824
mod = relay.transform.InferType()(mod)
mutated_mod['func_8824'] = func_8824
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8824_call = mutated_mod.get_global_var('func_8824')
call_8825 = func_8824_call()
output = call_8825
func_8826 = relay.Function([], output)
mutated_mod['func_8826'] = func_8826
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8725_call = mod.get_global_var('func_8725')
func_8727_call = mutated_mod.get_global_var('func_8727')
call_8904 = relay.TupleGetItem(func_8725_call(), 0)
call_8905 = relay.TupleGetItem(func_8727_call(), 0)
output = relay.Tuple([call_8904,])
output2 = relay.Tuple([call_8905,])
func_8915 = relay.Function([], output)
mod['func_8915'] = func_8915
mod = relay.transform.InferType()(mod)
output = func_8915()
func_8916 = relay.Function([], output)
mutated_mod['func_8916'] = func_8916
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8824_call = mod.get_global_var('func_8824')
func_8826_call = mutated_mod.get_global_var('func_8826')
call_8917 = relay.TupleGetItem(func_8824_call(), 0)
call_8918 = relay.TupleGetItem(func_8826_call(), 0)
func_6146_call = mod.get_global_var('func_6146')
func_6149_call = mutated_mod.get_global_var('func_6149')
var_8926 = relay.var("var_8926", dtype = "uint64", shape = (1344,))#candidate|8926|(1344,)|var|uint64
var_8927 = relay.var("var_8927", dtype = "float32", shape = (396,))#candidate|8927|(396,)|var|float32
call_8925 = relay.TupleGetItem(func_6146_call(relay.reshape(var_8926.astype('uint64'), [6, 14, 16]), relay.reshape(var_8927.astype('float32'), [1, 396]), ), 4)
call_8928 = relay.TupleGetItem(func_6149_call(relay.reshape(var_8926.astype('uint64'), [6, 14, 16]), relay.reshape(var_8927.astype('float32'), [1, 396]), ), 4)
uop_8937 = relay.exp(call_8925.astype('float64')) # shape=(1, 24)
uop_8939 = relay.exp(call_8928.astype('float64')) # shape=(1, 24)
output = relay.Tuple([call_8917,var_8926,var_8927,uop_8937,])
output2 = relay.Tuple([call_8918,var_8926,var_8927,uop_8939,])
func_8944 = relay.Function([var_8926,var_8927,], output)
mod['func_8944'] = func_8944
mod = relay.transform.InferType()(mod)
var_8945 = relay.var("var_8945", dtype = "uint64", shape = (1344,))#candidate|8945|(1344,)|var|uint64
var_8946 = relay.var("var_8946", dtype = "float32", shape = (396,))#candidate|8946|(396,)|var|float32
output = func_8944(var_8945,var_8946,)
func_8947 = relay.Function([var_8945,var_8946,], output)
mutated_mod['func_8947'] = func_8947
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8824_call = mod.get_global_var('func_8824')
func_8826_call = mutated_mod.get_global_var('func_8826')
call_8992 = relay.TupleGetItem(func_8824_call(), 0)
call_8993 = relay.TupleGetItem(func_8826_call(), 0)
func_5712_call = mod.get_global_var('func_5712')
func_5717_call = mutated_mod.get_global_var('func_5717')
const_8996 = relay.const(-6.791620, dtype = "float64")#candidate|8996|()|const|float64
const_8997 = relay.const([-3.694618,-0.196075,7.077614,-3.226141,-3.780074,9.038825,9.853593,7.016574,6.556840,-2.137065,-6.121426,-5.089174,-3.679006,-6.762311,-1.930363,-3.433429,-1.696233,-5.144045,-2.156986,-8.832469,-1.545406,9.058016,5.965172,9.880572,-3.363880,7.064646,-8.119657,-6.871860,-0.563644,3.335326,1.428361,1.800289,-0.473134,-1.344409,-4.833439,3.186356,-1.754539,-8.113864,6.641046,-4.307724,3.921409,8.000648,-4.432025,4.963565,-5.723090,1.275444,-8.260566,9.165374,-6.675277,8.429061,1.908513,8.008219,6.597710,4.247155,-5.742584,-0.264975,-9.862532,2.753431,3.398690,9.878608,4.002959,-3.987943,-6.059896,-4.277487,2.394658,3.437657,4.088076,-3.799644,1.074992,3.409612,6.004817,0.354451,3.842726,-5.069699,9.264006,4.971761,-3.574553,-4.105551,6.830566,2.895562,-7.625834,2.845583,-8.255058,3.969976,-2.241299,4.975031,-3.935706,0.635635,8.157072,3.075506,5.571745,-1.797138,-1.207903,-6.072416,2.028267,-0.044547,3.866775,0.193106,5.082380,3.315593,-5.599741,1.161495,5.439985,-6.299845,1.940560,-4.349877,-8.524900,-3.446714,6.516383,7.569012,3.538194,0.682442,6.858017,-0.577103,1.373520,-5.016328,-4.258603,-8.880910,-0.185784,-0.365597,-4.570164,1.495529,1.561777,3.438055,-7.072737,-6.841792,-3.396946,-1.557922,-6.000406,-5.769119,-2.390152,1.895112,4.656586,0.119954,9.367924,9.384770,-8.835017,-5.774344,-5.811399,-7.423285,-8.697865,-5.845029,-3.085802,2.749166,4.328534,-7.163698,-4.424009,-1.827853,-1.064792,-3.999624,-3.834152,1.722724,-0.527866,-6.473555,-9.765234,2.218633,0.216394,5.691617,3.911268,0.666143,1.169997,-3.729330,3.684847,8.537429,-6.639714,4.053919,7.067978,9.564520,3.441235,-3.865962,7.978845,-8.529085,-5.308219,-5.795856,-3.385491,-9.710375,-4.251904,-8.466850,-0.970500,8.721757,9.206728,1.903404,1.807471,-3.867711,-3.956794,-2.739229,-0.993930,2.154598,6.627308,-5.042555,7.060856,4.334821,-1.978207,2.540730,2.556086,8.591905,-4.831028,4.513787,-5.792621,-5.646262,-2.809020,-2.148320,8.131569,4.996780,7.616925,6.893757,4.827869,-0.431806,-3.286988,-2.909208,-6.677643,-2.215414,-7.223602,0.924818,7.605251,0.453375,-7.686416,-8.695958,5.019697,-9.350127,-8.466160,2.604110,-1.442263,9.686702,-5.162676,-3.096670,2.055757,3.532929,-8.590249,-8.104789,-9.608469,-2.363050,2.529697,-4.201462,-5.958785,-1.942682,-1.190304,-9.222218,6.906877,2.021508,3.886188,7.863594,-6.406242,-0.558461,3.416180,-6.836481,6.889853,-2.438380,-6.378632,7.832939,-6.478475,0.505221,-1.306799,0.354759,9.857182,4.604291,3.686812,4.785527,7.408355,-5.185312,8.833006,-4.908572,4.999905,0.324556,6.176253,0.395361,-8.355584,5.112598,-2.358516,9.705586,5.533003,2.584984,9.948051,9.982084,-3.674909,9.164218,-1.099887,-0.395543,-7.788899,9.615514,0.298180,3.935982,2.888129,-2.787693,-5.647288,9.348990,-4.204627,-3.025928,-6.494175,-6.772821,8.444687,-8.363148,7.749277,-5.301823,-3.556514,2.482994,-3.466065,-3.233587,7.343965,6.687489,-1.872518,-5.078030,4.394601,-3.536183,-4.970221,4.910944,-9.027809,9.048348,-5.444295,2.606648,-2.064727,-0.255336,-4.393097,-1.628920,8.996684,8.743278,4.116385,-2.478178,-9.029024,-4.660880,7.050245,-2.974407,9.605813,3.419697,7.049052,-8.351189,-6.736320,-6.248056,0.120075,-2.809412,8.025050,-5.680519,8.544238,1.024191,5.607486,-9.852086,6.095045,-1.685380,7.751035,1.685769,8.380434,-8.043489,-2.948836,-6.197250,5.419398,9.853446,-0.919084,1.797649,-8.548323,3.446651,-1.447832,4.386055,-8.767412,-1.907798,7.263299,2.632630,-7.246394,-0.491709,-8.190310,-3.061527,-1.204197,-9.307070,-4.026692,-8.082272,8.552628,-7.444732,-5.534652,9.523867,-9.160838,-5.032835,4.914664,-2.220985,7.225752,7.586913,5.927874,2.308774,2.500908,-4.713913,-3.947516,-6.527957,-2.775931,1.776713,-8.038894,6.301749,5.541927,1.983224,1.055830,-3.645183,-9.162813,9.088754,6.598246,2.575995,-6.181603,-5.035619,1.705362,-1.171490,-3.107389,-2.464465,3.483631,2.848625,4.749642,0.513308,-4.711153,1.785224,5.643349,-0.969240,9.465068,0.902412,6.521404,-8.089309,0.176519,-8.244491,1.870404,-0.213400,-7.668894,6.626271,-3.199405,6.855573,-2.362482,-5.218883,1.835129,-8.700999,-1.079888,-5.643730,-1.931569,-2.073443,-8.191766,3.254857,8.949975,-6.894421,1.582306,3.856550,-1.227999,-9.974086,0.382287,2.426673,0.702297,-8.508873,3.896543,0.255450,8.829082,4.337455,-0.411806,8.690197,0.106414,5.222112,4.702272,-1.103493,0.403588,-7.892096,8.976739,9.643691,-1.970709,1.802278,2.446511,7.122472,-0.096396,-5.059150,1.061824,1.399631,9.410118,7.443559,5.454028,-2.434393,-7.479035,-7.176467,-9.052243,-6.386032,0.306478,6.532112,-4.883937,1.204685,3.117408,5.417028,-8.215561,6.983753,7.163793,-9.628395,9.811921,-1.530394], dtype = "float64")#candidate|8997|(480,)|const|float64
var_8998 = relay.var("var_8998", dtype = "float64", shape = (864,))#candidate|8998|(864,)|var|float64
var_8999 = relay.var("var_8999", dtype = "float32", shape = (162,))#candidate|8999|(162,)|var|float32
call_8995 = relay.TupleGetItem(func_5712_call(relay.reshape(const_8996.astype('float64'), []), relay.reshape(const_8997.astype('float64'), [3, 16, 10]), relay.reshape(var_8998.astype('float64'), [6, 144]), relay.reshape(var_8999.astype('float32'), [162,]), ), 1)
call_9000 = relay.TupleGetItem(func_5717_call(relay.reshape(const_8996.astype('float64'), []), relay.reshape(const_8997.astype('float64'), [3, 16, 10]), relay.reshape(var_8998.astype('float64'), [6, 144]), relay.reshape(var_8999.astype('float32'), [162,]), ), 1)
output = relay.Tuple([call_8992,call_8995,const_8996,const_8997,var_8998,var_8999,])
output2 = relay.Tuple([call_8993,call_9000,const_8996,const_8997,var_8998,var_8999,])
func_9024 = relay.Function([var_8998,var_8999,], output)
mod['func_9024'] = func_9024
mod = relay.transform.InferType()(mod)
var_9025 = relay.var("var_9025", dtype = "float64", shape = (864,))#candidate|9025|(864,)|var|float64
var_9026 = relay.var("var_9026", dtype = "float32", shape = (162,))#candidate|9026|(162,)|var|float32
output = func_9024(var_9025,var_9026,)
func_9027 = relay.Function([var_9025,var_9026,], output)
mutated_mod['func_9027'] = func_9027
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8725_call = mod.get_global_var('func_8725')
func_8727_call = mutated_mod.get_global_var('func_8727')
call_9105 = relay.TupleGetItem(func_8725_call(), 0)
call_9106 = relay.TupleGetItem(func_8727_call(), 0)
output = relay.Tuple([call_9105,])
output2 = relay.Tuple([call_9106,])
func_9109 = relay.Function([], output)
mod['func_9109'] = func_9109
mod = relay.transform.InferType()(mod)
output = func_9109()
func_9110 = relay.Function([], output)
mutated_mod['func_9110'] = func_9110
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8725_call = mod.get_global_var('func_8725')
func_8727_call = mutated_mod.get_global_var('func_8727')
call_9114 = relay.TupleGetItem(func_8725_call(), 0)
call_9115 = relay.TupleGetItem(func_8727_call(), 0)
output = call_9114
output2 = call_9115
func_9123 = relay.Function([], output)
mod['func_9123'] = func_9123
mod = relay.transform.InferType()(mod)
mutated_mod['func_9123'] = func_9123
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9123_call = mutated_mod.get_global_var('func_9123')
call_9124 = func_9123_call()
output = call_9124
func_9125 = relay.Function([], output)
mutated_mod['func_9125'] = func_9125
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9123_call = mod.get_global_var('func_9123')
func_9125_call = mutated_mod.get_global_var('func_9125')
call_9128 = func_9123_call()
call_9129 = func_9123_call()
func_8671_call = mod.get_global_var('func_8671')
func_8674_call = mutated_mod.get_global_var('func_8674')
const_9159 = relay.const([[-6,-8],[-4,-2],[7,-2],[2,-5],[-9,7],[10,-2],[10,6],[2,8],[8,10],[7,9],[-3,10],[-1,2],[-9,-5],[-10,-6],[5,-4],[1,-6],[-8,-5],[8,10],[6,-7],[-5,9],[9,-7],[-1,9],[-4,-4],[5,-5],[8,-9],[-3,8],[-10,-8],[-5,3],[3,10],[2,9],[-2,-10],[-6,-1],[5,9],[-10,-9],[1,7],[6,-9],[-9,-2],[-10,-6],[7,1],[-9,8],[-2,-3],[-3,3],[2,1],[2,-9],[-10,-4],[4,-3],[4,-4],[6,-8],[-10,-1],[3,-8],[-7,-5],[10,-10],[6,1],[3,-5],[-7,9],[-3,-10],[-8,-4],[6,-8],[-3,-2],[8,3],[7,6],[-7,-5],[9,8],[3,-3],[-10,1],[-10,-10],[1,-8],[-3,3],[-3,8],[-1,4],[10,-2],[-9,-3],[-5,-6],[-3,-10],[6,5],[6,-1],[-10,-1],[-3,1],[-9,8],[9,9],[-6,-8],[1,7],[-5,1],[2,-4],[-1,1],[2,-9],[6,-2],[-9,-10],[-8,-7],[-8,8],[-7,-7],[-1,1],[-6,7],[-6,-10],[6,-9],[5,-1],[8,1],[2,-9],[10,-10],[-5,-2],[5,8],[8,6],[-1,8],[-6,6],[6,-10],[-9,-7],[-5,10],[8,-10],[1,-6],[7,4],[9,-4],[10,-7],[-9,5],[7,7],[-9,-3],[-8,1],[4,-10],[-9,9],[-6,-1],[2,3],[8,-9],[9,9],[2,-8],[7,-4],[9,2],[-8,-8],[-5,-3],[10,8],[3,2],[-5,2],[5,10],[1,2],[9,10],[8,-4],[-6,10],[10,-3],[-7,-4],[6,-10],[8,-2],[5,1],[-2,1],[-8,1],[-1,-9],[10,3],[8,8],[7,-4],[9,6],[-4,7],[-7,-3],[3,-8],[-6,-5],[-10,4],[10,-2],[1,4],[4,5],[4,-3],[2,5],[-2,2],[-9,-4],[7,-6],[1,8],[6,3],[9,-9],[2,5],[9,-1],[-2,-1],[-10,-1],[-3,6],[5,-8],[-5,10],[-1,-10],[-10,-8],[4,2],[-10,8],[-5,7],[-5,6],[8,-10],[6,-8],[8,1],[2,9],[-9,-3],[-1,9],[9,8],[10,4],[7,-2],[4,10],[-5,-2],[-2,-2],[-1,10],[-7,9],[-6,1],[-8,-7],[-1,-8],[6,-8],[10,-9],[-10,-3],[-7,2],[3,-9],[6,-8],[-7,1],[-1,-4],[8,-9],[2,3],[8,-5],[-9,8],[-8,-5],[-9,1],[6,-5],[-3,-6],[-10,1],[1,-6],[-10,-4],[7,4],[-1,10],[-10,7],[2,-4],[10,10],[-3,4],[7,-4],[2,-7],[-2,-4],[10,4],[-4,-7],[-2,5],[-1,3],[-6,-9],[-10,9],[3,-3],[-8,7],[-1,-9],[1,-5]], dtype = "uint16")#candidate|9159|(231, 2)|const|uint16
call_9158 = relay.TupleGetItem(func_8671_call(relay.reshape(const_9159.astype('uint16'), [6, 11, 7])), 5)
call_9160 = relay.TupleGetItem(func_8674_call(relay.reshape(const_9159.astype('uint16'), [6, 11, 7])), 5)
uop_9161 = relay.cosh(call_9158.astype('float32')) # shape=(3, 4, 2)
uop_9163 = relay.cosh(call_9160.astype('float32')) # shape=(3, 4, 2)
uop_9165 = relay.acosh(uop_9161.astype('float32')) # shape=(3, 4, 2)
uop_9167 = relay.acosh(uop_9163.astype('float32')) # shape=(3, 4, 2)
bop_9168 = relay.minimum(uop_9165.astype('float32'), relay.reshape(call_9158.astype('float32'), relay.shape_of(uop_9165))) # shape=(3, 4, 2)
bop_9171 = relay.minimum(uop_9167.astype('float32'), relay.reshape(call_9160.astype('float32'), relay.shape_of(uop_9167))) # shape=(3, 4, 2)
func_8671_call = mod.get_global_var('func_8671')
func_8674_call = mutated_mod.get_global_var('func_8674')
call_9172 = relay.TupleGetItem(func_8671_call(relay.reshape(const_9159.astype('uint16'), [6, 11, 7])), 2)
call_9173 = relay.TupleGetItem(func_8674_call(relay.reshape(const_9159.astype('uint16'), [6, 11, 7])), 2)
uop_9188 = relay.asin(uop_9165.astype('float64')) # shape=(3, 4, 2)
uop_9190 = relay.asin(uop_9167.astype('float64')) # shape=(3, 4, 2)
output = relay.Tuple([call_9128,const_9159,bop_9168,call_9172,uop_9188,])
output2 = relay.Tuple([call_9129,const_9159,bop_9171,call_9173,uop_9190,])
func_9199 = relay.Function([], output)
mod['func_9199'] = func_9199
mod = relay.transform.InferType()(mod)
output = func_9199()
func_9200 = relay.Function([], output)
mutated_mod['func_9200'] = func_9200
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9199_call = mod.get_global_var('func_9199')
func_9200_call = mutated_mod.get_global_var('func_9200')
call_9217 = relay.TupleGetItem(func_9199_call(), 2)
call_9218 = relay.TupleGetItem(func_9200_call(), 2)
var_9223 = relay.var("var_9223", dtype = "float32", shape = (3, 4, 2))#candidate|9223|(3, 4, 2)|var|float32
bop_9224 = relay.less_equal(call_9217.astype('bool'), relay.reshape(var_9223.astype('bool'), relay.shape_of(call_9217))) # shape=(3, 4, 2)
bop_9227 = relay.less_equal(call_9218.astype('bool'), relay.reshape(var_9223.astype('bool'), relay.shape_of(call_9218))) # shape=(3, 4, 2)
func_9123_call = mod.get_global_var('func_9123')
func_9125_call = mutated_mod.get_global_var('func_9125')
call_9252 = func_9123_call()
call_9253 = func_9123_call()
func_4845_call = mod.get_global_var('func_4845')
func_4848_call = mutated_mod.get_global_var('func_4848')
call_9254 = relay.TupleGetItem(func_4845_call(relay.reshape(bop_9224.astype('float64'), [3, 4, 2])), 0)
call_9255 = relay.TupleGetItem(func_4848_call(relay.reshape(bop_9224.astype('float64'), [3, 4, 2])), 0)
output = relay.Tuple([bop_9224,call_9252,call_9254,])
output2 = relay.Tuple([bop_9227,call_9253,call_9255,])
func_9256 = relay.Function([var_9223,], output)
mod['func_9256'] = func_9256
mod = relay.transform.InferType()(mod)
var_9257 = relay.var("var_9257", dtype = "float32", shape = (3, 4, 2))#candidate|9257|(3, 4, 2)|var|float32
output = func_9256(var_9257)
func_9258 = relay.Function([var_9257], output)
mutated_mod['func_9258'] = func_9258
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9199_call = mod.get_global_var('func_9199')
func_9200_call = mutated_mod.get_global_var('func_9200')
call_9260 = relay.TupleGetItem(func_9199_call(), 0)
call_9261 = relay.TupleGetItem(func_9200_call(), 0)
func_8725_call = mod.get_global_var('func_8725')
func_8727_call = mutated_mod.get_global_var('func_8727')
call_9280 = relay.TupleGetItem(func_8725_call(), 0)
call_9281 = relay.TupleGetItem(func_8727_call(), 0)
func_3767_call = mod.get_global_var('func_3767')
func_3769_call = mutated_mod.get_global_var('func_3769')
var_9286 = relay.var("var_9286", dtype = "float32", shape = (143,))#candidate|9286|(143,)|var|float32
call_9285 = func_3767_call(relay.reshape(var_9286.astype('float32'), [11, 13, 1]))
call_9287 = func_3767_call(relay.reshape(var_9286.astype('float32'), [11, 13, 1]))
func_2003_call = mod.get_global_var('func_2003')
func_2007_call = mutated_mod.get_global_var('func_2007')
const_9290 = relay.const([[-7.220920,-3.992182,-2.088338,-6.710467,4.283069,-6.562614,6.004805,-8.916828,7.335849,-9.481700,-8.136124,7.813227,-1.788224,7.977957,-3.105748,-2.828716,-2.592706,8.871750,-9.870343,7.879930,0.485941,-2.374019,6.652913,-3.041650,0.913955,4.520640,-3.890189,0.482774,8.958311,9.654523,-0.939848,-8.041077,-4.125228,7.057964,4.334075,-6.575716,-2.052743,8.891053,-4.079930,-0.272300,4.018662,5.271011],[-8.811758,-0.230775,6.313849,-9.544495,8.269317,-6.415418,-7.752637,-1.498988,6.099977,-3.787216,3.113779,0.444819,-1.593656,4.451320,-2.012831,9.142980,5.456431,-9.221830,3.256110,-8.766406,-0.027709,1.910538,-8.187503,-0.327921,-3.777958,7.198934,4.684880,6.321484,-6.057890,8.948281,-4.150369,-5.349915,-8.036338,-4.937327,7.959025,-1.592696,-8.273659,-2.421342,8.199204,-1.229999,-0.358877,3.217921],[-0.772387,3.600896,9.157805,7.738133,0.071525,1.678227,0.854703,1.498806,3.111251,-0.349006,7.503887,-2.766231,5.895640,2.276505,1.333822,1.141697,8.944181,-3.892030,0.891346,-9.278189,8.650934,-7.165411,-6.862494,8.707063,7.483473,5.927563,6.733318,1.742790,-7.718672,-4.600153,0.640216,7.732648,-4.358684,2.486312,-3.678759,-2.675911,-3.582043,-1.326265,-2.900966,-9.167447,3.859692,0.945736],[2.591984,7.407377,4.791661,0.895109,-2.596681,0.969145,1.038538,-3.348964,5.040990,7.150585,-1.875439,-2.876010,-7.829920,-6.196306,-3.029449,-0.978927,3.863090,3.390778,3.234836,8.089071,2.690490,-5.734711,-9.472341,-6.706336,2.749833,1.881895,5.389108,-6.215228,-0.510557,3.872543,-4.429996,-6.072323,-7.806835,-4.857737,8.921863,4.890712,1.706665,1.451274,-1.013992,5.560020,3.193448,8.977234],[-6.709558,-2.899385,2.824732,6.693653,4.744564,9.298945,9.809756,3.116138,8.124311,9.066429,-7.735686,-4.014304,9.396543,-3.488269,-7.970432,3.228377,-6.227613,5.037085,-6.116764,0.133062,1.613404,8.160666,2.296876,7.862283,1.775496,4.929270,5.031798,-3.628874,2.226312,4.687814,6.448078,-5.942123,6.635317,7.782883,-3.010422,4.572735,7.238741,-4.325516,-2.670615,4.684095,-5.963779,1.624793],[8.330197,-9.035484,8.833927,-6.924713,8.150416,-9.550810,4.807372,-2.159524,-6.063267,9.210352,-8.324192,-5.977414,3.855399,-6.975455,-5.530276,2.497468,8.906354,-2.073435,6.239137,5.687383,0.939333,1.863663,2.182799,-7.330557,-0.583988,5.758067,3.172819,6.689125,-2.073201,2.606829,2.651196,-0.448882,-8.929944,8.263720,7.951354,-3.423686,-8.687308,5.382549,6.104508,-5.687888,3.746320,-8.660455],[5.678281,8.208088,6.000180,7.262071,8.904801,-1.722504,-3.198150,-5.708267,-0.713737,1.274850,-7.064495,8.035152,-8.201396,4.715272,9.437727,3.471669,7.647350,-2.633489,0.074147,-5.298826,4.625969,-4.333696,-4.971796,-2.754417,-3.032201,-3.059671,-3.786017,-5.866396,1.103175,2.291791,-4.599643,1.254739,9.651992,-5.825957,8.860243,-3.162384,3.967676,6.623710,0.562498,8.675130,3.395471,-9.941623],[0.342041,-9.036138,7.558333,7.697028,-2.026933,7.566036,2.834437,-5.759624,-8.250470,5.811580,-5.719011,-8.169911,-1.695358,4.954117,9.136906,-5.113872,-8.960963,3.503694,-7.693926,2.800823,1.556583,-8.469170,0.195113,-6.543182,7.777814,9.143426,-7.939674,3.306413,7.357042,-8.317712,5.324840,0.083345,6.484262,9.128224,-1.526690,2.718497,8.894683,-9.045678,-7.384865,9.411664,-3.937405,0.975823]], dtype = "float32")#candidate|9290|(8, 42)|const|float32
var_9291 = relay.var("var_9291", dtype = "float32", shape = (90, 1))#candidate|9291|(90, 1)|var|float32
var_9292 = relay.var("var_9292", dtype = "float64", shape = (864,))#candidate|9292|(864,)|var|float64
call_9289 = relay.TupleGetItem(func_2003_call(relay.reshape(const_9290.astype('float32'), [16, 3, 7]), relay.reshape(var_9291.astype('float32'), [15, 6]), relay.reshape(var_9292.astype('float64'), [864,]), ), 0)
call_9293 = relay.TupleGetItem(func_2007_call(relay.reshape(const_9290.astype('float32'), [16, 3, 7]), relay.reshape(var_9291.astype('float32'), [15, 6]), relay.reshape(var_9292.astype('float64'), [864,]), ), 0)
func_6254_call = mod.get_global_var('func_6254')
func_6257_call = mutated_mod.get_global_var('func_6257')
const_9297 = relay.const([[True,True,True,True,False,False,False,False,True,True,True,False,True,False,False,True,True,True,False,False,False,False,True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,False,True,True,False,True,False,False,False,True,True,True,True,True,False,False,True,True,False,True,True,True,False,True,True,False,True,True,False,True,True,True,True,True,False,True,False,False,True,False,True,False,False,True,False,False,True,True,False,False,False,True,True,True,True,False,True,False,False,True,True,True,False,False,False,True,False,True,True,True,True,True,False,True,False,False,False,True,True,False,True,False,True,True,True,False,True,False,False,True,True,True,True,False,False,True,True,False,False,False,True,False,True,True,True,True,True,True,True,True,True,False,True,True,True,False,True,True,False,False,False,True,True,True,True,True,True,False,True,True,True,True,True,False,False,True,False,False,False,True,True,False,True,False,True,True,False,False,False,False,False,False,True,False,False,True,True,True,True,True,False,False,False,False,True,False,True,True,False,True,False,True,True,True,True,False,False,True,True,False,True,True,True,True,True,True,False,True,False,True,False,False,False,False,False,True,False,True,False,True,True,False,False,False,True,False,True,False,True,False,False,True,True,True,False,True,False,False,False,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,False,True,False,True,True,False,True,False,True,True,True,True,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,True,True,False,True,True,True,True,False,True,True,True,True,False,False,False,True,True,True,False,False,True,False,True,False,True,True,False,True,False,False,False,False,True,False,True,False,False,False,False,True,True,True,False,False,True,False,True,False,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,False,True,True,True,True,False,True,False,False,True,False,True,False,True,False,True,False,False,True,False,True,True,False,False,True,True,False,False,True,False,True,True,True,False,False,False,False,True,False,False,False,False,False,True,True,False,False,False,False,True,False,True,False,False,False,True,True,False,True,False,False,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,True,True,False,False,True,False,True,True,True,True,True,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,False,True,False,True,False,True,False,False,True,True,True,True,True,False,False,False,False,False,False,True,True,True,False,True,True,False,True,True,False,True,False,False,True,False,True,True,True,False,True,True,True,False,False,False,False,False,False,True,True,True,False,False,False,False,True,True,True,False,False,True,True,False,False,False,False,True,True,False,True,True,True,True,True,True,True,False,True,False,True,False,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,False,False,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,False,True,False,False,False,True,True,False,True,True,True,True,False,False,True,False,True,False,True,True,True,False,True,False,False,False,False,False,True,False,True,True,True,True,True,False,True,False,False,False,True,True,True,True,True,False,True,True,False,True,False,False,True,True,False,True,False,False,True,True,False,False,False,False,True,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,False,False,False,True,True,False,False,True,False,True,False,True,True,False,True,True,True,True],[True,False,True,False,True,False,True,True,False,True,False,False,False,True,False,False,False,True,True,True,True,True,False,True,False,False,False,True,True,True,False,False,False,True,False,True,True,False,False,False,True,False,False,True,True,False,False,False,True,True,True,False,False,True,False,True,True,False,False,False,True,True,True,True,False,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,False,True,True,True,True,True,True,False,True,False,True,True,False,True,True,True,False,False,False,True,False,False,False,False,True,True,False,True,False,False,True,False,True,False,True,False,True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,True,True,True,False,False,False,False,True,False,False,True,False,True,True,True,False,True,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,False,True,True,False,True,True,True,True,False,False,False,False,True,False,False,True,True,False,True,True,True,True,False,True,False,False,False,True,True,True,True,False,False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,True,False,False,False,True,False,False,False,False,False,True,True,False,False,True,False,True,True,False,True,True,True,False,False,False,True,False,True,True,False,False,True,False,True,True,True,True,False,False,True,False,True,True,False,True,False,False,False,True,False,True,False,True,True,True,False,True,True,True,False,True,True,True,True,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,True,False,False,True,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,True,False,True,True,True,False,False,False,True,True,False,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,False,False,False,True,False,False,True,False,True,False,False,True,True,True,False,True,False,False,False,True,True,False,False,True,False,False,True,False,False,True,False,False,False,False,True,False,False,False,False,False,True,False,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,True,False,False,False,False,True,False,True,False,True,True,True,True,True,False,False,True,False,False,True,True,False,True,True,True,False,True,True,False,True,True,True,False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,True,False,False,False,False,False,True,True,False,True,False,True,True,True,True,False,True,True,False,False,False,False,True,True,True,False,False,True,True,False,False,False,True,False,True,True,True,False,False,True,False,False,False,True,True,True,False,True,False,False,True,False,False,False,False,True,True,False,False,False,False,False,False,True,True,True,False,False,False,False,True,False,False,True,True,False,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,False,True,False,False,False,True,False,False,True,True,True,True,True,True,True,True,False,False,False,True,False,False,True,True,True,True,False,False,True,True,False,False,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,False,False,True,True,False,False,True,False,True,True,False,False,False,False,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,True,False,True,False,True,True,True,False,True,False,True,True,False,False,False,True,True,False,False,True,True,False,True,False,True,False,True,True,False,True,False,True,True,True,True,True,True,False,True,False,False,True,False,False,True,False,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False],[False,True,False,False,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,True,False,True,False,False,False,False,False,False,False,True,False,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,True,True,False,False,False,True,True,False,False,False,True,False,False,False,True,True,True,True,True,True,True,True,True,True,False,True,True,False,False,True,False,True,False,False,True,False,True,True,False,True,True,False,False,True,False,True,False,True,False,False,True,True,True,False,False,True,False,True,False,False,True,False,True,True,False,False,False,False,True,False,True,False,False,True,True,True,False,False,False,True,False,True,False,True,False,True,True,False,False,True,False,True,True,True,True,True,True,True,True,True,True,True,True,False,False,True,True,True,True,True,False,True,True,False,False,True,True,True,True,False,False,True,True,True,False,False,True,True,True,False,False,True,True,False,True,False,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,True,False,True,True,True,False,True,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,False,True,True,False,False,False,False,True,True,False,False,False,True,True,False,False,True,True,False,True,True,True,True,True,False,False,False,False,False,False,False,False,True,True,False,False,True,True,True,False,True,True,True,False,False,True,True,False,False,True,True,True,False,False,False,False,False,False,True,False,False,True,True,False,False,True,False,True,False,True,True,True,True,False,False,True,False,True,True,False,False,False,False,False,True,False,True,True,True,False,False,True,True,True,True,True,False,True,False,True,True,True,False,False,False,False,True,False,True,True,False,True,True,False,False,False,True,True,False,False,True,False,True,False,True,True,True,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,False,False,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,True,True,True,False,True,True,True,True,True,True,True,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False,True,True,False,True,False,True,False,True,False,False,False,True,True,True,False,False,False,False,False,False,False,False,True,False,False,False,True,True,False,True,True,True,False,False,False,False,True,True,False,True,True,False,False,False,False,True,False,False,True,True,True,True,True,False,False,True,False,True,False,False,False,True,True,False,True,False,True,True,True,True,False,False,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,True,False,True,False,False,True,True,True,False,True,False,True,False,True,False,False,False,True,False,False,True,True,False,False,False,True,False,True,False,True,False,True,True,False,True,True,True,True,False,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,False,True,False,True,True,True,True,False,False,False,True,True,False,True,True,False,True,False,True,True,True,False,False,True,True,True,True,False,False,True,True,False,False,True,True,True,False,False,True,True,True,True,False,True,False,False,True,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,True,True,True,False,True,False,True,False,True,False,True,True,True,False,True,False,False,False,False,True,False,False,True,True,False,True,True,True,False,True,False,False,False,True,False,True,True,True,False,False,True,True,False,False,True,True,False,True,True,False,True,True,True,False,False,True,True,False,False,False,True,False,False,True,False,False,True,True,False,True,False,True,False,False,False,False,True,False],[True,True,True,False,False,False,True,True,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,True,False,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,False,True,True,False,False,False,True,False,False,True,False,False,False,False,True,False,False,False,False,True,False,False,True,True,False,True,True,False,True,False,True,True,True,True,True,True,True,True,True,False,False,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,False,False,False,True,True,True,True,False,False,False,False,False,True,True,False,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,False,True,False,True,False,True,False,False,False,True,False,False,False,False,False,False,True,False,True,True,True,True,True,True,False,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,False,True,False,True,True,True,False,False,True,True,False,True,True,False,True,False,False,False,False,False,True,True,False,False,False,False,True,False,False,False,True,False,True,True,True,False,False,True,False,True,False,False,False,True,True,False,True,True,False,False,True,False,True,True,False,True,False,True,True,False,True,False,False,False,False,True,True,False,False,True,False,False,False,False,True,True,False,True,False,True,True,True,True,False,False,True,True,False,False,False,False,False,False,False,False,False,True,True,True,True,True,True,True,True,True,True,False,False,False,False,True,True,True,False,True,True,True,False,False,True,False,False,True,False,True,False,True,False,True,False,False,False,True,True,True,False,False,True,False,False,True,True,True,False,True,False,False,False,False,False,False,False,False,True,True,True,True,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,True,False,False,True,False,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,False,True,True,False,False,True,False,False,True,False,False,False,False,True,True,True,True,True,False,False,False,True,True,True,False,True,False,False,False,True,True,False,False,False,False,False,True,False,True,False,True,True,True,True,False,False,False,False,True,False,False,False,False,True,True,False,False,True,False,False,True,True,True,True,False,True,False,True,False,True,False,True,False,True,False,True,True,True,True,True,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,True,True,False,True,True,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,True,False,False,True,False,False,False,True,False,False,True,True,False,False,False,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,False,False,True,False,False,False,False,True,True,False,True,True,False,False,True,False,False,False,True,True,True,False,False,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,True,False,True,False,False,False,False,True,False,True,True,True,False,False,False,True,False,False,False,True,True,False,False,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,False,True,False,False,False,True,False,False,False,False,False,False,True,True,False,False,False,True,False,False,True,False,True,True,True,True,False,False,False,True,True,True,False,False,True,False,True,True,True,True,False,True,True,True,True,True,True,True,True,True,False,False,True,True,True,False,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,False,True,True,False,False,False,True,False,True,True,False,False,False,True,True,True,False,True,True,True,True,True,True,False,True,False,True,False,False,True,False,True,False,True,True,True,False,False,True,True,True,True,True]], dtype = "bool")#candidate|9297|(4, 728)|const|bool
call_9296 = func_6254_call(relay.reshape(const_9297.astype('bool'), [13, 16, 14]))
call_9298 = func_6254_call(relay.reshape(const_9297.astype('bool'), [13, 16, 14]))
uop_9299 = relay.atan(var_9291.astype('float64')) # shape=(90, 1)
uop_9312 = relay.cos(call_9296.astype('float32')) # shape=(13, 16, 14)
uop_9314 = relay.cos(call_9298.astype('float32')) # shape=(13, 16, 14)
output = relay.Tuple([call_9260,call_9280,call_9285,var_9286,call_9289,const_9290,var_9292,const_9297,uop_9299,uop_9312,])
output2 = relay.Tuple([call_9261,call_9281,call_9287,var_9286,call_9293,const_9290,var_9292,const_9297,uop_9299,uop_9314,])
func_9317 = relay.Function([var_9286,var_9291,var_9292,], output)
mod['func_9317'] = func_9317
mod = relay.transform.InferType()(mod)
var_9318 = relay.var("var_9318", dtype = "float32", shape = (143,))#candidate|9318|(143,)|var|float32
var_9319 = relay.var("var_9319", dtype = "float32", shape = (90, 1))#candidate|9319|(90, 1)|var|float32
var_9320 = relay.var("var_9320", dtype = "float64", shape = (864,))#candidate|9320|(864,)|var|float64
output = func_9317(var_9318,var_9319,var_9320,)
func_9321 = relay.Function([var_9318,var_9319,var_9320,], output)
mutated_mod['func_9321'] = func_9321
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8786_call = mod.get_global_var('func_8786')
func_8787_call = mutated_mod.get_global_var('func_8787')
call_9366 = func_8786_call()
call_9367 = func_8786_call()
func_5917_call = mod.get_global_var('func_5917')
func_5919_call = mutated_mod.get_global_var('func_5919')
var_9385 = relay.var("var_9385", dtype = "float32", shape = (396,))#candidate|9385|(396,)|var|float32
call_9384 = relay.TupleGetItem(func_5917_call(relay.reshape(var_9385.astype('float32'), [11, 6, 6])), 3)
call_9386 = relay.TupleGetItem(func_5919_call(relay.reshape(var_9385.astype('float32'), [11, 6, 6])), 3)
output = relay.Tuple([call_9366,call_9384,var_9385,])
output2 = relay.Tuple([call_9367,call_9386,var_9385,])
func_9387 = relay.Function([var_9385,], output)
mod['func_9387'] = func_9387
mod = relay.transform.InferType()(mod)
mutated_mod['func_9387'] = func_9387
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9388 = relay.var("var_9388", dtype = "float32", shape = (396,))#candidate|9388|(396,)|var|float32
func_9387_call = mutated_mod.get_global_var('func_9387')
call_9389 = func_9387_call(var_9388)
output = call_9389
func_9390 = relay.Function([var_9388], output)
mutated_mod['func_9390'] = func_9390
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8714_call = mod.get_global_var('func_8714')
func_8716_call = mutated_mod.get_global_var('func_8716')
call_9422 = relay.TupleGetItem(func_8714_call(), 1)
call_9423 = relay.TupleGetItem(func_8716_call(), 1)
output = relay.Tuple([call_9422,])
output2 = relay.Tuple([call_9423,])
func_9425 = relay.Function([], output)
mod['func_9425'] = func_9425
mod = relay.transform.InferType()(mod)
mutated_mod['func_9425'] = func_9425
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9425_call = mutated_mod.get_global_var('func_9425')
call_9426 = func_9425_call()
output = call_9426
func_9427 = relay.Function([], output)
mutated_mod['func_9427'] = func_9427
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9123_call = mod.get_global_var('func_9123')
func_9125_call = mutated_mod.get_global_var('func_9125')
call_9455 = func_9123_call()
call_9456 = func_9123_call()
func_6430_call = mod.get_global_var('func_6430')
func_6433_call = mutated_mod.get_global_var('func_6433')
var_9465 = relay.var("var_9465", dtype = "float64", shape = (1, 126))#candidate|9465|(1, 126)|var|float64
var_9466 = relay.var("var_9466", dtype = "bool", shape = (840,))#candidate|9466|(840,)|var|bool
call_9464 = relay.TupleGetItem(func_6430_call(relay.reshape(var_9465.astype('float64'), [9, 1, 14]), relay.reshape(var_9466.astype('bool'), [840,]), ), 2)
call_9467 = relay.TupleGetItem(func_6433_call(relay.reshape(var_9465.astype('float64'), [9, 1, 14]), relay.reshape(var_9466.astype('bool'), [840,]), ), 2)
func_9123_call = mod.get_global_var('func_9123')
func_9125_call = mutated_mod.get_global_var('func_9125')
call_9483 = func_9123_call()
call_9484 = func_9123_call()
func_6146_call = mod.get_global_var('func_6146')
func_6149_call = mutated_mod.get_global_var('func_6149')
const_9487 = relay.const([6,10,6,2,1,-9,10,6,-8,-10,1,6,6,-2,-6,10,4,3,-5,-2,-8,-9,-8,4,9,10,3,-8,8,10,8,6,-8,-3,-6,1,5,-2,6,-10,-2,-5,-6,4,2,10,3,-3,6,6,-9,6,9,-9,-6,8,-9,2,5,-3,-9,-6,-10,-3,-4,-10,8,-9,6,9,-6,7,-1,3,5,4,1,-6,10,-1,10,7,7,-4,3,4,-4,7,2,-5,7,10,-1,1,10,6,-3,-8,1,5,7,5,2,7,1,-8,-1,-8,-7,-6,9,6,8,-2,8,-5,7,-6,-2,-1,-7,1,9,2,6,-4,-1,9,-6,10,-8,-9,-5,-4,-2,-7,-5,-8,-10,2,-2,3,7,-5,-10,-5,10,-5,-2,1,3,-4,-8,3,-7,-4,-1,2,-6,9,2,8,9,-6,-10,7,-4,-2,-7,10,1,-3,-10,8,-4,4,10,-9,-5,2,-3,-9,-3,-1,7,4,-5,10,-2,1,-3,1,9,4,6,-7,6,5,-10,-8,8,-5,-9,-8,3,-6,-6,-2,10,7,2,4,-4,5,-7,-1,5,10,2,4,7,2,10,8,-7,-5,-1,-5,9,-6,-3,5,-4,-3,-5,10,8,5,3,9,8,-1,2,-3,7,1,-6,-9,3,7,-10,10,-8,-7,10,-2,-9,-7,-10,6,-2,9,-3,-8,-2,-4,1,-10,9,-1,3,-7,-10,-5,-7,-8,-6,-6,-5,7,1,-8,3,3,-7,-1,10,5,2,-10,9,-7,3,7,-8,-5,-6,-1,-3,3,9,-10,-1,10,-5,4,8,-10,-3,-1,3,-7,-9,10,-1,1,8,-2,8,-4,-2,-6,8,-5,3,1,2,-5,-8,-4,-7,-10,8,-3,4,7,6,8,9,8,-7,-10,-8,-3,-1,5,4,4,-7,-8,6,7,-9,9,-8,4,7,6,10,-2,-6,10,4,2,4,-2,-5,4,6,4,2,9,3,-5,-7,-7,-3,5,-2,9,-6,6,-2,5,-8,3,-10,-7,10,-7,8,9,2,9,10,-10,8,8,-10,1,-6,6,-5,-9,5,-1,2,4,-6,8,10,-2,5,10,7,-3,-6,-8,-4,-5,7,-3,7,-2,10,-9,-9,-1,-3,2,-4,4,6,10,-1,8,-2,6,10,-4,-8,-3,6,-1,-8,-10,10,2,-5,3,-9,3,-5,5,-7,-6,-2,1,-4,6,7,-4,-7,10,-1,8,-7,-3,10,-6,7,-1,4,6,6,1,7,10,-4,-7,-5,-4,6,5,-9,4,-4,6,6,-7,5,8,1,-7,-10,9,9,-10,-5,2,7,-10,8,-10,-10,-1,-4,7,8,-2,8,6,7,2,-2,-7,-8,-1,-5,-5,9,-1,4,8,-2,10,2,-7,1,-2,-4,1,6,-10,-6,-7,2,8,6,10,6,9,-6,-8,6,10,-1,-1,5,-9,8,-6,3,-6,1,8,6,9,4,8,9,9,1,6,-3,8,10,2,1,-4,-4,2,-2,3,-8,7,1,5,7,-9,-6,-2,5,2,1,-8,10,6,-1,-9,10,-6,1,-4,-5,-9,-3,1,-4,-4,1,-10,2,-7,5,-3,2,-7,-3,3,5,2,4,6,8,-3,-1,-4,-10,-5,-4,1,8,-1,8,-10,8,3,-5,2,-10,-2,1,-4,-6,-8,-7,-8,-7,-5,-3,-2,-7,6,7,-5,4,-7,-5,6,8,-2,2,-10,-7,8,8,-4,4,-6,8,7,1,7,-3,-5,-8,7,-7,1,-2,7,-8,4,10,4,-3,10,-4,-8,-9,-9,-2,-6,-3,-2,-7,-4,9,-6,10,-7,-10,-7,-5,1,-9,-2,7,9,-9,3,-1,9,-7,-1,7,-9,6,-3,-2,8,5,2,9,1,6,2,-3,9,9,6,-7,-5,3,-5,-2,-6,-2,8,2,9,-5,5,-3,-9,-4,8,-2,-4,1,-1,4,-8,8,8,-7,-7,-10,-2,9,-5,8,4,-6,-6,10,8,5,-10,5,-2,-7,-7,-5,9,-2,-7,-8,10,-1,-3,-6,-5,-10,-5,-7,7,7,-10,-5,-6,-3,-7,6,-7,6,8,-10,2,-9,4,3,9,-7,2,-10,-1,3,-4,-9,-6,2,6,8,-3,-2,-3,8,5,-3,-9,7,-5,-2,-1,-1,-6,2,6,-10,7,6,9,3,1,-10,8,2,10,-4,7,-10,10,-4,2,-7,-6,-8,-9,8,7,-2,-7,-10,-10,-10,10,9,1,-8,7,-1,-8,-7,-10,-7,-3,3,5,9,-8,2,8,-9,7,10,-5,-7,10,2,-9,10,-9,-3,8,10,2,5,-5,7,-4,-6,-9,-5,-8,-10,7,-10,5,-1,-7,9,4,7,8,9,-2,4,7,10,-8,4,-2,-4,-8,-2,-7,-4,6,-8,5,10,-4,9,-4,9,-1,7,-5,-4,5,8,8,-3,-3,-3,-10,-6,-7,-6,-5,-3,5,-2,3,5,-2,2,-5,6,-7,6,2,-4,8,10,-4,-2,6,-3,-7,-7,-9,1,-5,2,6,3,-10,6,6,3,-10,-3,8,5,2,6,-2,-5,-4,3,5,-5,-1,-6,7,-9,6,-5,-7,2,4,-1,7,-5,5,10,-4,-6,5,3,3,1,5,-4,8,-2,-7,1,10,-4,6,4,8,6,-4,-7,3,6,6,10,9,-8,-4,-8,-9,-9,4,-6,5,-6,-2,-8,1,-3,-6,-2,-5,-9,1,3,-10,6,8,-8,5,4,7,2,-7,-4,8,-10,-6,3,-8,7,1,-6,7,-3,-8,-10,10,2,7,-2,1,7,1,-5,8,-9,-7,-7,-6,7,-9,8,10,-9,-5,-1,3,4,-10,4,-4,7,7,6,-6,9,3,-7,7,-10,-8,-9,-3,-6,-5,-10,-5,-10,3,-10,-10,-4,-8,6,8,-8,-10,-7,3,5,4,-6,-2,-3,-2,-6,2,7,-3,-5,-10,-7,-1,3,-8,1,4,10,4,3,-6,8,8,-6,-8,-4,-6,-1,5,-1,2,6,-1,-2,-2,9,-3,-6,2,-6,4,3,10,5,7,10,-1,-5,-3,-5,3,2,3,-1,-9,7,8,1,3,-5,5,-2,-4,-7,6,-1,-8,-9,1,7,-8,3,-6,3,-2,2,6,4,-2,6,-4,1,3,2,9,-6,-6,2,-5,3,-3,-7,-10,-10,1,-2,-4,9,-2,-1,-2,9,-6,-10,-6,-10,-8,10,7,10,-8,5,7,9,-4,-4,7,-4,4,8,7,-1,-5,4,-2,10,-9,10,-6,7,1,-6,-5,-5,-4,-1,9,7,2,5,-6,-4,7,-2,4,5,-1,4,-3,6,-2,-8,8,4,-7,-6,4,-7,-3,-6,-8,-10,3,-6,-5,-4,9,7,-7,9,-1,-6,-2,-8,10,2,6,-7,-10,-7,-7,-3,5,6,-2,-8,10,10,7,-9,-3,-4,-4,1,-6,-10,-1,9,-2,10,2,9,-1,5,8,-4,-8,-9,1,-8,-8,10,-1,5,-6,7,2,9,8,1,2,6,-6,-2,-5,-4,9,4,4,3,-6,-7,8,-4,-2], dtype = "uint64")#candidate|9487|(1344,)|const|uint64
var_9488 = relay.var("var_9488", dtype = "float32", shape = (396,))#candidate|9488|(396,)|var|float32
call_9486 = relay.TupleGetItem(func_6146_call(relay.reshape(const_9487.astype('uint64'), [6, 14, 16]), relay.reshape(var_9488.astype('float32'), [1, 396]), ), 3)
call_9489 = relay.TupleGetItem(func_6149_call(relay.reshape(const_9487.astype('uint64'), [6, 14, 16]), relay.reshape(var_9488.astype('float32'), [1, 396]), ), 3)
func_5894_call = mod.get_global_var('func_5894')
func_5898_call = mutated_mod.get_global_var('func_5898')
const_9494 = relay.const([[-10],[7],[-1],[-6],[-5],[6],[-9],[3],[2],[4],[-8],[2],[-1],[10],[6],[10],[-2],[-3],[7],[7],[-10],[-9],[-4],[2],[10],[-6],[6],[10],[6],[1],[-7],[7],[-9],[6],[2],[9],[-8],[2],[1],[-8],[10],[9],[1],[5],[9],[-1],[-8],[-8],[1],[-4],[7],[6],[2],[-7],[-1],[-5],[-8],[9],[6],[-9],[10],[1],[-8],[-7],[-5],[3],[-4],[7],[-8],[2],[9],[10],[-2],[7],[5],[-2],[3],[4],[-4],[-2],[10],[1],[6],[-4],[2],[6],[3],[-7],[7],[2],[-9],[8],[8],[5],[1],[-1],[5],[-8],[1],[5],[-8],[-5],[9],[6],[7],[7],[-2],[7],[-6],[-4],[-10],[-9],[8],[-5],[-1],[-4],[-3],[10],[2],[-5],[5],[4],[6],[-7],[-4],[9],[-7],[-8],[-10],[-8],[3],[-2],[3],[-8],[9],[6],[5],[1],[-1],[-6],[-1],[-10],[7],[-7],[-1],[10],[9],[2],[-3],[6],[4],[-7],[-2],[-2]], dtype = "int32")#candidate|9494|(154, 1)|const|int32
const_9495 = relay.const([10,5,10,8,-1,-4,-4,-10,-2,-7,-8,-10,9,3,5,-1,10,4,10,-9,2,-1,-6,-3,5,-7,-10,-7,-9,2,10,10,3,-4,-8,5,6,-6,-8,-1,10,7,-6,-1,-5,-10,10,9,-4,8,5,1,9,4,-8,-10,4,8,-2,-7,-4,3,7,-5,4,4,-7,1,-4,-3,1,-1,-3,-4,-10,1,8,-5,-8,7,-4,-1,7,8,8,-6,-7,1,9,-2,-6,10,8,8,-6,10,-5,-2,5,-8,1,2,-2,-7,-2,-10,5,2,-3,-1,-5,-10,4,-5,-10,-3,-8,1,2,2,1,2,-10,-9,-5,2,3,-10,-4,5,-9,-8,-5,-8,-9,1,-10,5,-5,3,-7,10,8,7,7,7,2,5,-4,-6,-1,2,8,-3,4,-3,-2,-10,-2,-4,9,-7,5,-10,-4,4,1,-9,5,-4,-8,9,1,-2,-6,-4,-6,-6,4,1,-10,5,1,2,8,5,2,-7,3,8,4,4,4,2,-6,5,-8,-9,6,6,-5,1,-5,2,8,7,3,-5,-1,-4,1,-3,2,9,3,-4,-8,-10,5,-3,4,-6,-3,-4,7,-3,9,-9,-10,-1,-6,1,-1,-9,3,-9,3,-3,-6,3,7,2,-2,7,9,-4,4,-9,8,-9,-1,9,-6,2,-1,5,-1,-6,-8,-6,4,2,-7,10,10,-6,10,4,-10,-5,-1,3,-7,-6,5,-2,2,-4,8,4,-3,-8,8,8,2,2,-6,-7,3,10,5,-6,7,-4,4,-2,10,2,3,5,5,-9,2,6,9,-5,7,1,-1,-6,5,-4,9,1,3,-7,5,9,-4,-7,10,-9,-5,-10,5,3,-5,5,2,6,-5,-6,-1,-10,-10,7,-10,7,-7,4,-3,4,-6,2,6,-3,-10,-3,-4,5,-1,5,9,9,-1,9,-1,-3,-3,-3,10,-2,-3,-1,-10,-2,-9,4,-9,5,7,-3,1,5,1,-5,-4,-3,-3,-3,-1,6,1,9,5,1,1,10,2,-6,-3,-3,-9,3,1,5,-10,3,10,-3,-9,7,-8,4,2,2,2,-10,2,-10,-9,6,-5,3,4,-8,-10,-2,2,10,-7,-9,8,7,5,4,2,5,2,3,-6,8,8,6,-8,-5,-9,-2,-6,-8,8,-4,5,-8,-9,-2,3,-3,-9,-10,9,10,10,6,10,-6,7,9,-9,-8,9,7,9,-3,-1,3,-10,10,6,-5,-10,-7,9,1,-6,-10,1,8,-7,8,6,10,8,-4,-5,-3,10,-4,-7,-10,-7,9,-8,-10,8,7,-1,9,-6,-4,-4,8,6,-4,10,-7,4,5,-2,9,2,5,-2,3,-9,-10,3,-8,1,-3,6,8,-5,-2,-7,-7,4,4,-8,3,-1,10,-3,4,-10,5,-6,-6,7,8,-8,6,-8,-7,5,-2,6,-2,-2,-3,3,8,2,-10,1,-6,2,-2,-10,5,-10,-4,10,-5,4,7,-5,-7,-1,7,-5,-3,-5,-7,4,2,10,-2,4,5,5,-5,8,-9,-9,3,1,10,2,1,-1,2,1,-2,-3,-2,10,9,1,9,6,5,9,-3,5,9,-9,7,-6,4,7,-6,-7,-5,2,-10,5,6,-3,6,-5,3,-5,5,-9,-1,-6,1,1,-2,9,3,-7,1,8,-7,-2,6,-9,9,1,-4,6,-2,3,-1,-8,-8,3,-5,7,-1,-2,-6,-9,1,-4,7,-10,8,5,-6,6,-7,5,10,-4,3,-10,-7,6,9,2,-4,6,-6,3,-5,-9,-10,4,8,-10,6,-4,1,2,3,-7,-8,9,8,-7,-3,-5,1,-2,7,-4,2,-5,-7,4,-1,-7,7,-3,7,6,-8,-2,10,10,6,2,9,2,6,-7,8,-8,-7,-10,2,-4,-6,-1,-2,6,4,-7,-5,2,8,10,3,-1,-10,-5,-6,5,9,8,7,-9,-2,-6,7,10,-7,-1,10,-1,4,3,6,4,3,7,8,3,-4,8,-8,9,1,-8,-6,9,6,10,1,-9,5,-6,-4,2,-9,3,1,7,-4,2,5,-9,-5,-2,2,1,-9,-10,-6,-3,5,6,-10,7,-9,3,2,4,-3,-6,-10,-4,-3,-2,-9,8,2,1,9,5,8,-4,2,-10,6,9,2,-5,-8,-6,3,-2,-7,7,2,8,10,2,9,6,-7,-1,10,4,4,-4,3,2,-10,8,2,4,7,5,-10,-1,-8,8,10,-6,3,1,-8,7,-3,2,2,-9,-3,-7,5,-2,2,-1,-5,7,6,5,1,4,9,-9,-3,2,-1,1,-8,-1,4,-5,8,6,-7,10,2,-2,-1,4,9,9,6,8,-4,4,-2,8,10,5,-4,-3,-10,-9,-6,-4,10,7,-5,10,5,-1,5,-6,-5,10,6,8,-10,7,-2,1,4,6,4,-1,1,5,-1,-9,-3,-6,4,-7,2,10,-6,-4,2,2,-9,6,-6,6,-3,-4,3,7,7,-4,9,3,-7,-6,8,-5,-10,6,2,-5,-6,3,-2,-9,-6,6,-6,-9,-5,-4,-2,1,-9,-9,-9,-8,-5,4,-1,4,7,1,8,-10,6,7,10,9,5,10,4,8,-9,5,-9,-7,9,-2,9,-2,-4,10,-9,5,1,-9,-5,4,-1,-4,-8,-7,-9,5,-2,1,-6,-2,-4,-10,-4,9,5,-5,-10,7,10,-6,4,4,-6,2,8,8,2,-6,-6,8,-6,-8,-2,8,-8,8,4,5,-9,-4,10,-10,4,1,-10,-1,-1,-7,-5,-4,7,-6,6,-1,-10,-3,-8,5,10,2,-4,-8,-6,-8,10,-6,4,8,-3,4,-5,-4,-3,-7,-4,4,-3,-2,7,-2,2,6,7,-5,-2,-4,9,1,8,4,8,9,-10,2,1,-6,1,-10,-5,-1,-5,5,-4,5,-6,-3,8,-8,2,-8,6,-7,-6,-5,1,8,-10,9,1,5,6,-4,9,5,-3,-6,8,6,-10,7,-7,-7,-9,-1,4,-8,6,-7,3,8,-6,3,-10,2,-9,1,-3,5,7,-2,5,-3,3,6,1,-2,-10,5,-5,10,-5,2,-9,1,6,-1,5,-10,4,-4,3,4,-10,-3,-7,1,-4,-9,1,-3,3,-5,-7,-9,-2,6,1,-9,10,-8,-7,-8,-1,5,4,6,-1,-10,-8,7,-3,5,4,5,-8,-10,1,5,4,-3,-8,-8,1,-5,-6,-9,7,1,10,5,10,-2,-3,4,-6,6,9,1,1,-1,2,5,5,-1,3,-4,1,-7,-4,-2,1,4,-3,10,-5,-2,-10,-6,-5,2,1,5,6,8,5,2,-7,4,5,5,-6,9,-6,-2,10,-10,-2,4,-7,7,2,5,-10,-1,-6,7,7,-9,10,5,5,-2,-10,-4,1,-8,3,-4,6,-9,4,-6,1,4,-5,1,4,-5,-2,-3,2,-5,7,-9,-5,-7,2,9,-7,3,2,1,9,-2,7,-3,-7,4,-6,-6,1,9,7,7,1,-7,5,-10,-6,-3,-8,-3,-5,-8,2,-3,9,6,-9,9,4,4,-6,4,-7,-8,-5,9,-10,10,-10,6,-4,5,-7,5,2,3,-2,-1,-5,-3,10,2,-6,3,-7,7,-3,-5,1,-4,-9,-3,3,1,1,-8,-5,-10,-3,1,3,-1,2,-9,-8,-8,-9,10,-2,-9,5,5,-10,-3,9,-4,1,1,3,-6,4,-10,4,-6,-10,-1,-4,5,3,-8,-9,7,10,-3,9,-8,5,7,-7,-8,-7,2,-7,-5,4,-3,10,4,7,4,9,10,-9,7,-9,1,-6,-7,-1,-5,8,1,-7,9,-4,-1,-5,9,7,10,-1,-2,-5,3,-1,-4,-6,8,-1,9,-2,-8,-1,-10,5,4,10,-6,-5,2,7,7,-2,7,4,7,-6,10,4,-8,2,6,8,-9,-10,6,-9,-1,10,2,-5,7,-6,1,-8,10,8,2,-9,-8,-3,4,-9,-3,-2,10,-6,9,5,1,-8,3,-8,-4,7,-5,8,2,-6,-8,-2,8,-7,-7,8,6,-2,3,-4,-8,-1,-3,6,-8,-10,3,-7,9,1,-6,5,-4,-1,-8,6,-7,-1,-7,4,1,4,-8,-6,-4,-3,5,-2,-7,-10,7,-3,2,-5,-2,4,4,9,8,-1,4,7,-5,2,2,-9,5,-5,9,-6,8,-6,8,6,-1,-2,-2,8,-8,1,10,8,3,4,3,3,-2,4,4,-7,1,-2,6,2,10,-3,5,-8,7,10,-4,1,-4,5,7,5,-1,2,-8,-3,-8,-9,-10,-1,10,6,6,1,2,-8,-2,-8,-1,-2,5,-5,4,7,-2,-10,10,8,3,8,9,-6,-10,-4,5,7,-3,-6,-8,-10,9,-5,-6,-7,-4,2,-2,6,3,2,-6,-1,-3,6,9,-4,-6,9,3,8,-2,3,-1,5,-9,-5,8,-5,-4,-4,1,-3,-8,8,10,-9,8,-8,10,-6,-2,7,-8,3,-5,5,7,-2,2,-6,-8,7,-8,-7,-8,-1,-4,10,-1,2,-2,-4,6,-5,6,1,10,-9,10,-9,9,-1,-6,-2,6,5,-2,-8,-4,7,8,-3,-5,-7,10,-5,5,1,7,-10,-9,10,3,2,-4,-7,-8,-9,5,-9,-3,4,-10,-1,8,9,-8,9,-8,-1,1,-5,10,-3,1,10,8,-1,-8,-3,-6,4,-3,7,5,6,-8,6,-6,-3,-2,-10,-6,9,7,-10,6,9,6,-3,-6,8,9,-9,4,-3,-6,9,7,-8,9,7,2,5,2,1,-8,-9,5,-3,2,7,8,-2,3,-7,-7,-10,-10,1,4,7,10,-8,-6,6,-4,7,-9,6,8,8,8,6,-2,10,-8,-5,-5,-7,-1,-10,-6,-8,-6,8,-8,1,4,-5,-4,-10,4,-5,6,9,-5,-4,-5,-5,-7,-7,9,2,-5,8,6,4,-3,6,-2,-7,-3,5,3,3,3,4,7,-7,-7,-2,3,10,6,5,2,-5,5,4,-2,-8,6,8,10,-6,10,-7,-5,-9,4,2,-10,-10,9,-4,3,-5,-6,4,8,-2,-1,1,7,-10,-8,4,9,4,9,8,-4,3,-8,7,-1,4,9,8,7,-6,10,2,5,7,6,8,-2,9,9,6,6,-2,5,-2,9,7,7,9,5,-7,-5,10,-7,-7,-6,8,3,6,3,-10,5,2,-7,7,-10,3,-1,-3,4,7,-3,2,9,5,8,-4,3,7,8,-9,8,4,-5,-8,-6,-8,1,4,8,2,5,8,-2,7,9,-10,10,-6,2,-3,-8,7,3,-9,-3,8,7,-5,1,2,-9,-8,-8,-3,8,-9,9,8,-9,2,10,-9,5,5,-7,-9,9,5,-10,8,-4,-6,2,4,1,-3,-7,-7,8,2,10,4,-7,-9,-5,6,-3,-4,-4,-4,6,5,10,8,3,5,-9,3,8,-4,-8,-4,-3,-5,7,-4,-9,-4,3,8,2,-9,2,9,-5,-5,-5,5,-5,7,-10,-3,-9,7,-1,-8,-10,-5,3,4,-1,1,6,-6,-6,3,3,4,-6,-6,8,1,-4,-10,-4,-3,1,-1,-1,10,-1,3,10,7,-2,5,10,-8,6,-9,4,5,7,-4,2,-8,-6,6,10,-4,-10,-2,8,-3,10,7,6,-9,6,3], dtype = "int32")#candidate|9495|(2156,)|const|int32
const_9496 = relay.const([8.499389,1.923400,-0.754963,-8.249576,5.885747,6.023318,-6.879913,-3.972492,-0.140024,-6.606627,8.177065,-9.276952,0.313202,1.392566,-5.746468,5.125750,-3.441632,0.552134,3.824121,-8.537675,-2.501504,-2.754317,-0.474377,-3.160562,-3.863769,2.058512,-7.948364,-5.927982,-4.668263,0.861490,-8.370370,-7.393454,2.510769,2.305683,2.678963,5.412347,6.895038,2.838146,0.136760,4.559003,-5.192079,9.189204,-6.245901,-4.652353,3.708425,6.786373,-4.102528,-2.083325,-2.005098,-1.260188,3.142157,1.316229,-8.895499,0.828938,-4.470911,0.898259,8.673701,-7.458934,-0.467390,-8.341594,-7.859302,7.720674,4.948533,-5.472099,6.001182,-6.611892,-1.282920,-6.842745,-0.825503,-4.508449,-3.743564,0.665878,8.061576,3.904589,-6.755615,6.464166,3.157548,4.560558,5.179731,-8.462949,-1.105135,4.792290,-7.876152,6.973609,4.946745,-9.911266,8.046521,-5.364238,2.485894,8.291179,9.219154,-0.308994,9.023330,-5.390419,2.504633,-8.212128,7.814171,-7.662347,3.406618,-1.763597,-0.349042,-7.816286,-3.598626,-8.770303,-2.929442,0.838714,-7.127819,-9.665080,3.744411,-0.615509,-4.614552,-4.393951,7.756697,0.927075,5.129049,3.799617,-0.839958,6.980363,-7.967911,-0.954563,9.784770,5.150095,1.088817,-9.461238,-0.811652,9.545718,9.667101,-7.844271,7.925461,7.684178,5.411451,-9.629216,-6.841052,-4.603697,7.306628,6.824426,-7.737633,-2.269852,-7.181673,-2.773960,-6.790908,2.956158,9.765982,-5.532848,-1.990265,9.617913,-9.884760,7.408507,-1.636767,-0.287806,4.531115,-0.070202,-3.175335,0.870254,1.679235,5.991498,-6.269650,4.020494,-6.902008,-1.237730,3.515242,-3.771460,9.448128,-7.593854,2.228501,5.806909,-7.912330,-3.612307,-4.698748,-2.386633,7.677364,4.626764,-9.749524,1.087681,-5.273608,2.266460,-8.273736,-2.443335,-3.624494,7.632960,7.911073,-4.176999,-4.264377,-1.536795,-9.957802,0.640572,-9.147820,9.551578,9.508491,9.436532,-7.891574,-5.790302,-8.510416,-8.750688,1.710026,-0.490943,-5.392133,6.086708,6.213515,-3.295427,-6.641372,1.080938,-1.095563,0.596626,6.504323,-1.615018,-9.895365,-0.164859,2.982370,0.151000,-2.288434,1.616388,-8.101207,-4.247949,-1.408182,4.889099,-0.090468,5.129891,-9.897814,-3.615418,2.795556,9.332195,5.465908,-3.678771,5.301365,-4.235850,6.940013,-8.102276,-6.453007,9.492737,6.625569,4.998040,8.884569,3.480805,7.789996,2.060379,-7.369816,-5.730227,9.950535,-9.592166,-9.193444,-1.653661,-9.209276,0.176220,3.601320,3.782800,-0.934478,-5.436317,2.469278,7.185429,-6.078099,8.419015,2.008041,-4.114797,-8.339919,9.637027,4.940058,-1.711640,6.001945,-5.478442,-3.725448,3.418817,-3.099153,-0.946647,8.161073,0.476293,-7.525621,-9.085461,-2.103288,-9.841376,5.880436,-9.379709,-7.390267,-9.002851,-9.985911,-8.904273,-9.594837,5.061223,-5.924020,-6.818077,9.247983,5.579453,-6.998526,-9.961950,-4.431759,7.821662,-5.884222,2.198559,-0.038300,-2.682256,-8.972976,0.994511,3.432331,-2.056398,-3.780489,4.508922,-0.357366,-6.118323,8.657791,6.763374,0.429160,0.584983,-6.187886,-7.405541,2.533992,-7.513121,-7.112069,-1.429683,-0.269442,7.795295,-3.958465,0.429701,9.393582,2.624238,-6.950172,-7.443861,-7.335758,9.072184,-4.686227,8.575551,5.799563,-2.853550,-3.418370,0.439234,3.164056,0.866194,2.842418,-9.435148,-2.223689,9.909818,-2.192351,6.827530,-7.418941,-7.348411,-3.597384,-9.402863,0.603861,5.906850,1.857007,-2.405000,4.852551,-2.353233,-2.154810,4.327831,1.650339,0.269078,6.191484,-8.906074,-1.625708,-5.896810,-2.860775,-7.096003,7.885326,1.957552,-4.237492,8.518029,-5.548634,-2.363811,-0.710961,5.565175,4.710531,-8.714790,2.744808,-9.332601,0.350553,6.797192,6.107643,4.674866,5.647667,0.583917,-4.321692,-7.395764,9.552137,-1.918881,-7.110570,8.509573,-9.053786,-6.679309,-9.588005,9.870996,-7.281245,0.443606,-0.096954,-3.528904,-1.651754,7.249638,8.927034,0.803622,5.282922,-3.729930,0.877671,2.397646,9.136575,-7.362886,-0.891791,7.762159,-4.651840,-2.715434,2.391701,-7.898649,-9.729146,6.481545,3.398872,-1.986166,-5.437516,6.226843,-9.570684,3.082609,-2.023505,6.415368,-2.869862,7.960180,-5.363948,7.254383,1.275089,5.396307,-4.254244,8.099784,3.376710,-0.042997,-8.433540,8.743845,-1.778263,0.906996,-9.265785,5.616804,7.183787,5.627395,-2.525041,-0.506072,0.782393,5.851228,-8.389894,4.102995,7.267383,7.081039,8.605959,-1.783181,3.227886,0.421605,0.580658,-8.741492,0.984332,-4.543635,6.379747,8.884390,-7.793094,-9.369836,9.786311,-9.904632,1.135179,9.756967,-6.507632,-2.634101,6.511658,-7.524836,-5.367663,2.340349,-7.563676,2.331398,-1.370827,-4.334184,1.411582,2.886367,8.864724,9.437964,8.888455,0.691576,2.309166,-1.784607,6.428269,5.634269,2.125429,-3.398670,-4.092981,2.367566,-4.382322,2.894863,-6.079587,6.525140,-9.659849,-4.933517,9.154068,2.538543,6.630475,8.780668,-9.617595,-9.257570,3.488116,-8.756792,-8.284815,6.363979,6.954650,4.992072,4.652977,8.767344,2.235370,-6.244762,-4.017272,4.251173,9.845027,-0.092546,0.369859,9.022147,9.434399,-2.110671,-6.720752,6.121091,-7.053144,8.979237,2.127860,6.779904,4.381100,2.578077,-2.434309,6.600733,6.096602,1.626081,8.179903,7.517732,-9.965627,-9.462816,5.655149,8.916504,-9.449514,-9.004864,3.886166,8.900061,2.856996,-8.978180,9.543846,8.560029,-6.706454,-5.953307,6.863518,-7.209329,2.443337,-1.136733,-7.836045,9.000745,9.341234,-6.619661,9.589614,6.439034,-6.604333,-3.259456,6.528280,-4.366735,4.596615,2.105642,4.261545,-0.870047,5.256765,4.032775,-9.757682,-8.967591,-0.519013,7.664481,-5.796885,-6.019780,-6.387496,2.464350,-0.450790,5.442402,-4.181687,5.578090,9.075037,-7.921199,-0.850069,-6.170945,-1.149673,-3.092327,-9.487932,7.206774,-3.418487,8.327440,-9.474937,3.702577,5.422572,-7.130076,4.270351,8.797179,-2.829815,9.703421,0.058556,1.624263,1.388950,6.884565,6.038792,-7.983493,-9.425098,1.930967,-9.773867,-8.672337,8.898494,3.066830,-5.918663,4.346964,8.848634,4.322588,9.241544,-9.763337,3.759062,-8.321598,-5.406602,-3.741682,-3.847088,-8.889028,-1.318898,-6.621030,0.014639,0.513534,-1.984051,-9.178484,9.244593,3.155388,9.114142,5.429750,2.324667,8.575576,3.737366,-1.206320,0.298724,-3.266437,7.785352,-6.525133,5.916218,-7.688243,-7.380872,8.492870,6.577582,-1.771192,-5.209707,2.473978,0.545950,-9.899172,-6.508617,7.910083,5.535984,-9.804447,-3.862122,7.968082,-5.661260,-9.211966,1.908460,-2.586893,-1.879967,3.943661,4.044968,-1.555066,5.187619,9.908027,6.849761,-9.531107,-9.932011,-8.078470,7.479316,-2.459375,5.649615,-8.660379,-7.200922,7.212835,-6.185414,-3.233256,7.039351,-2.014099,2.471958,6.997687,-2.218059,5.279157,-7.865836,-7.418700,2.213586,6.798201,4.918499,2.626744,-1.440270,-9.684924,3.461000,-8.503937,2.528778,-1.888250,-7.015410,9.963484,7.037788,-1.283826,-8.711070,3.284644,9.910424,9.576821,-6.226481,4.809542,2.121249,7.735098,-2.991232,-9.213608,9.062273,-8.768596,-7.538889,-9.406830,-2.764968,4.145761,6.406194,-3.407512,9.539797,1.839760,7.587016,-8.212667,-0.282511,1.666513,-0.620301,-7.555406,-1.935025,8.834348,4.412804,-5.595324,-6.734256,-6.495470,-5.855990,9.313276,-6.137891,-5.666123,1.670525,8.912417,-0.090687,-1.198588,-0.974426,-9.106161,1.562380,0.181361,-5.583119,-2.663163,9.634816,-9.403844,7.436163,4.109008,4.709203,0.961922,-1.209777,-6.166454,-5.056051,2.685959,-1.239485,7.417897,-7.293070,-2.992429,5.767229,7.301700,9.822539,-0.539803,7.181909,9.808319,0.259926,4.817179,3.516386,4.402665,-1.202747,-7.878616,-7.881884,-2.490055,-1.762259,0.348148,1.541341,-0.666624,3.291193,-4.912254,-4.911027,2.218202,-0.348854,3.166033,-8.071322,3.685676,-1.893092,3.915436,-6.068168,8.280634,-1.514268,-2.456389,0.149687,9.146080,9.423934,-4.993742,7.264644,-2.525830,-6.954398,1.569429,-4.746955,-0.171127,-5.697411,0.519168,9.384679,2.350190,-6.439440,-9.411728,-6.880802,-8.767253,5.985651,1.086747,-3.760197,-5.528840,1.598505,0.524274,5.527588,-8.329776,-3.840486,-5.279862,-1.620379,2.246509,0.653980,5.346294,0.424101,4.001173,-8.203742,2.508744,-2.660026,9.816176,0.486670,4.846993,-4.973476,-1.930208,-1.197643,5.891308,-7.811856,6.896243,-7.695682,7.548622,-8.900058,-3.411720,5.920938,0.956181,1.823494,-6.514680,8.655622,2.237869,2.050757,-0.445047,-9.001606,4.475642,3.967820,-8.913027,8.607016,4.641568,6.069631,-3.506036,-1.293739,-1.406537,-0.982812,-3.370041,9.618802,-2.681306,-5.933481,-3.164416,-1.201109,2.806212,-4.944830,2.542822,-9.124278,2.324235,-7.115734,-3.504971,8.908594,-7.475584,4.306406,3.076382], dtype = "float64")#candidate|9496|(864,)|const|float64
call_9493 = relay.TupleGetItem(func_5894_call(relay.reshape(const_9494.astype('int32'), [11, 14, 1]), relay.reshape(const_9495.astype('int32'), [11, 14, 14]), relay.reshape(const_9496.astype('float64'), [216, 4]), ), 3)
call_9497 = relay.TupleGetItem(func_5898_call(relay.reshape(const_9494.astype('int32'), [11, 14, 1]), relay.reshape(const_9495.astype('int32'), [11, 14, 14]), relay.reshape(const_9496.astype('float64'), [216, 4]), ), 3)
output = relay.Tuple([call_9455,call_9464,var_9465,var_9466,call_9483,call_9486,const_9487,var_9488,call_9493,const_9494,const_9495,const_9496,])
output2 = relay.Tuple([call_9456,call_9467,var_9465,var_9466,call_9484,call_9489,const_9487,var_9488,call_9497,const_9494,const_9495,const_9496,])
func_9498 = relay.Function([var_9465,var_9466,var_9488,], output)
mod['func_9498'] = func_9498
mod = relay.transform.InferType()(mod)
var_9499 = relay.var("var_9499", dtype = "float64", shape = (1, 126))#candidate|9499|(1, 126)|var|float64
var_9500 = relay.var("var_9500", dtype = "bool", shape = (840,))#candidate|9500|(840,)|var|bool
var_9501 = relay.var("var_9501", dtype = "float32", shape = (396,))#candidate|9501|(396,)|var|float32
output = func_9498(var_9499,var_9500,var_9501,)
func_9502 = relay.Function([var_9499,var_9500,var_9501,], output)
mutated_mod['func_9502'] = func_9502
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8714_call = mod.get_global_var('func_8714')
func_8716_call = mutated_mod.get_global_var('func_8716')
call_9571 = relay.TupleGetItem(func_8714_call(), 4)
call_9572 = relay.TupleGetItem(func_8716_call(), 4)
output = call_9571
output2 = call_9572
func_9577 = relay.Function([], output)
mod['func_9577'] = func_9577
mod = relay.transform.InferType()(mod)
output = func_9577()
func_9578 = relay.Function([], output)
mutated_mod['func_9578'] = func_9578
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9123_call = mod.get_global_var('func_9123')
func_9125_call = mutated_mod.get_global_var('func_9125')
call_9625 = func_9123_call()
call_9626 = func_9123_call()
uop_9637 = relay.log(call_9625.astype('float32')) # shape=(15, 5, 1)
uop_9639 = relay.log(call_9626.astype('float32')) # shape=(15, 5, 1)
bop_9643 = relay.not_equal(uop_9637.astype('bool'), relay.reshape(call_9625.astype('bool'), relay.shape_of(uop_9637))) # shape=(15, 5, 1)
bop_9646 = relay.not_equal(uop_9639.astype('bool'), relay.reshape(call_9626.astype('bool'), relay.shape_of(uop_9639))) # shape=(15, 5, 1)
output = relay.Tuple([bop_9643,])
output2 = relay.Tuple([bop_9646,])
func_9652 = relay.Function([], output)
mod['func_9652'] = func_9652
mod = relay.transform.InferType()(mod)
mutated_mod['func_9652'] = func_9652
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9652_call = mutated_mod.get_global_var('func_9652')
call_9653 = func_9652_call()
output = call_9653
func_9654 = relay.Function([], output)
mutated_mod['func_9654'] = func_9654
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9425_call = mod.get_global_var('func_9425')
func_9427_call = mutated_mod.get_global_var('func_9427')
call_9688 = relay.TupleGetItem(func_9425_call(), 0)
call_9689 = relay.TupleGetItem(func_9427_call(), 0)
var_9692 = relay.var("var_9692", dtype = "float64", shape = (3, 231))#candidate|9692|(3, 231)|var|float64
bop_9693 = relay.floor_divide(call_9688.astype('float64'), var_9692.astype('float64')) # shape=(3, 231)
bop_9696 = relay.floor_divide(call_9689.astype('float64'), var_9692.astype('float64')) # shape=(3, 231)
bop_9707 = relay.greater(var_9692.astype('bool'), call_9688.astype('bool')) # shape=(3, 231)
bop_9710 = relay.greater(var_9692.astype('bool'), call_9689.astype('bool')) # shape=(3, 231)
uop_9712 = relay.cos(bop_9707.astype('float32')) # shape=(3, 231)
uop_9714 = relay.cos(bop_9710.astype('float32')) # shape=(3, 231)
output = relay.Tuple([bop_9693,uop_9712,])
output2 = relay.Tuple([bop_9696,uop_9714,])
func_9720 = relay.Function([var_9692,], output)
mod['func_9720'] = func_9720
mod = relay.transform.InferType()(mod)
var_9721 = relay.var("var_9721", dtype = "float64", shape = (3, 231))#candidate|9721|(3, 231)|var|float64
output = func_9720(var_9721)
func_9722 = relay.Function([var_9721], output)
mutated_mod['func_9722'] = func_9722
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9652_call = mod.get_global_var('func_9652')
func_9654_call = mutated_mod.get_global_var('func_9654')
call_9825 = relay.TupleGetItem(func_9652_call(), 0)
call_9826 = relay.TupleGetItem(func_9654_call(), 0)
output = call_9825
output2 = call_9826
func_9840 = relay.Function([], output)
mod['func_9840'] = func_9840
mod = relay.transform.InferType()(mod)
mutated_mod['func_9840'] = func_9840
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9840_call = mutated_mod.get_global_var('func_9840')
call_9841 = func_9840_call()
output = call_9841
func_9842 = relay.Function([], output)
mutated_mod['func_9842'] = func_9842
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9652_call = mod.get_global_var('func_9652')
func_9654_call = mutated_mod.get_global_var('func_9654')
call_9885 = relay.TupleGetItem(func_9652_call(), 0)
call_9886 = relay.TupleGetItem(func_9654_call(), 0)
output = call_9885
output2 = call_9886
func_9889 = relay.Function([], output)
mod['func_9889'] = func_9889
mod = relay.transform.InferType()(mod)
mutated_mod['func_9889'] = func_9889
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9889_call = mutated_mod.get_global_var('func_9889')
call_9890 = func_9889_call()
output = call_9890
func_9891 = relay.Function([], output)
mutated_mod['func_9891'] = func_9891
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9199_call = mod.get_global_var('func_9199')
func_9200_call = mutated_mod.get_global_var('func_9200')
call_9898 = relay.TupleGetItem(func_9199_call(), 3)
call_9899 = relay.TupleGetItem(func_9200_call(), 3)
func_7937_call = mod.get_global_var('func_7937')
func_7943_call = mutated_mod.get_global_var('func_7943')
var_9901 = relay.var("var_9901", dtype = "uint16", shape = (240,))#candidate|9901|(240,)|var|uint16
var_9902 = relay.var("var_9902", dtype = "uint16", shape = (3120,))#candidate|9902|(3120,)|var|uint16
var_9903 = relay.var("var_9903", dtype = "float64", shape = ())#candidate|9903|()|var|float64
var_9904 = relay.var("var_9904", dtype = "float64", shape = (480,))#candidate|9904|(480,)|var|float64
call_9900 = relay.TupleGetItem(func_7937_call(relay.reshape(var_9901.astype('uint16'), [16, 15, 1]), relay.reshape(var_9902.astype('uint16'), [16, 15, 13]), relay.reshape(var_9903.astype('float64'), []), relay.reshape(var_9904.astype('float64'), [480,]), ), 4)
call_9905 = relay.TupleGetItem(func_7943_call(relay.reshape(var_9901.astype('uint16'), [16, 15, 1]), relay.reshape(var_9902.astype('uint16'), [16, 15, 13]), relay.reshape(var_9903.astype('float64'), []), relay.reshape(var_9904.astype('float64'), [480,]), ), 4)
func_6254_call = mod.get_global_var('func_6254')
func_6257_call = mutated_mod.get_global_var('func_6257')
var_9913 = relay.var("var_9913", dtype = "bool", shape = (2912,))#candidate|9913|(2912,)|var|bool
call_9912 = func_6254_call(relay.reshape(var_9913.astype('bool'), [13, 16, 14]))
call_9914 = func_6254_call(relay.reshape(var_9913.astype('bool'), [13, 16, 14]))
output = relay.Tuple([call_9898,call_9900,var_9901,var_9902,var_9903,var_9904,call_9912,var_9913,])
output2 = relay.Tuple([call_9899,call_9905,var_9901,var_9902,var_9903,var_9904,call_9914,var_9913,])
func_9919 = relay.Function([var_9901,var_9902,var_9903,var_9904,var_9913,], output)
mod['func_9919'] = func_9919
mod = relay.transform.InferType()(mod)
mutated_mod['func_9919'] = func_9919
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9919_call = mutated_mod.get_global_var('func_9919')
var_9921 = relay.var("var_9921", dtype = "uint16", shape = (240,))#candidate|9921|(240,)|var|uint16
var_9922 = relay.var("var_9922", dtype = "uint16", shape = (3120,))#candidate|9922|(3120,)|var|uint16
var_9923 = relay.var("var_9923", dtype = "float64", shape = ())#candidate|9923|()|var|float64
var_9924 = relay.var("var_9924", dtype = "float64", shape = (480,))#candidate|9924|(480,)|var|float64
var_9925 = relay.var("var_9925", dtype = "bool", shape = (2912,))#candidate|9925|(2912,)|var|bool
call_9920 = func_9919_call(var_9921,var_9922,var_9923,var_9924,var_9925,)
output = call_9920
func_9926 = relay.Function([var_9921,var_9922,var_9923,var_9924,var_9925,], output)
mutated_mod['func_9926'] = func_9926
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9652_call = mod.get_global_var('func_9652')
func_9654_call = mutated_mod.get_global_var('func_9654')
call_9931 = relay.TupleGetItem(func_9652_call(), 0)
call_9932 = relay.TupleGetItem(func_9654_call(), 0)
output = call_9931
output2 = call_9932
func_9944 = relay.Function([], output)
mod['func_9944'] = func_9944
mod = relay.transform.InferType()(mod)
mutated_mod['func_9944'] = func_9944
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9944_call = mutated_mod.get_global_var('func_9944')
call_9945 = func_9944_call()
output = call_9945
func_9946 = relay.Function([], output)
mutated_mod['func_9946'] = func_9946
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9840_call = mod.get_global_var('func_9840')
func_9842_call = mutated_mod.get_global_var('func_9842')
call_9960 = func_9840_call()
call_9961 = func_9840_call()
func_9199_call = mod.get_global_var('func_9199')
func_9200_call = mutated_mod.get_global_var('func_9200')
call_9987 = relay.TupleGetItem(func_9199_call(), 2)
call_9988 = relay.TupleGetItem(func_9200_call(), 2)
func_9387_call = mod.get_global_var('func_9387')
func_9390_call = mutated_mod.get_global_var('func_9390')
var_9999 = relay.var("var_9999", dtype = "float32", shape = (6, 66))#candidate|9999|(6, 66)|var|float32
call_9998 = relay.TupleGetItem(func_9387_call(relay.reshape(var_9999.astype('float32'), [396,])), 2)
call_10000 = relay.TupleGetItem(func_9390_call(relay.reshape(var_9999.astype('float32'), [396,])), 2)
bop_10005 = relay.less_equal(call_9998.astype('bool'), call_9960.astype('bool')) # shape=(15, 5, 396)
bop_10008 = relay.less_equal(call_10000.astype('bool'), call_9961.astype('bool')) # shape=(15, 5, 396)
uop_10009 = relay.asin(var_9999.astype('float32')) # shape=(6, 66)
bop_10015 = relay.logical_and(var_9999.astype('bool'), relay.reshape(uop_10009.astype('bool'), relay.shape_of(var_9999))) # shape=(6, 66)
output = relay.Tuple([call_9987,bop_10005,bop_10015,])
output2 = relay.Tuple([call_9988,bop_10008,bop_10015,])
func_10021 = relay.Function([var_9999,], output)
mod['func_10021'] = func_10021
mod = relay.transform.InferType()(mod)
var_10022 = relay.var("var_10022", dtype = "float32", shape = (6, 66))#candidate|10022|(6, 66)|var|float32
output = func_10021(var_10022)
func_10023 = relay.Function([var_10022], output)
mutated_mod['func_10023'] = func_10023
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8786_call = mod.get_global_var('func_8786')
func_8787_call = mutated_mod.get_global_var('func_8787')
call_10046 = func_8786_call()
call_10047 = func_8786_call()
uop_10050 = relay.tan(call_10046.astype('float64')) # shape=(462,)
uop_10052 = relay.tan(call_10047.astype('float64')) # shape=(462,)
uop_10061 = relay.atan(uop_10050.astype('float32')) # shape=(462,)
uop_10063 = relay.atan(uop_10052.astype('float32')) # shape=(462,)
output = relay.Tuple([uop_10061,])
output2 = relay.Tuple([uop_10063,])
func_10066 = relay.Function([], output)
mod['func_10066'] = func_10066
mod = relay.transform.InferType()(mod)
output = func_10066()
func_10067 = relay.Function([], output)
mutated_mod['func_10067'] = func_10067
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9123_call = mod.get_global_var('func_9123')
func_9125_call = mutated_mod.get_global_var('func_9125')
call_10106 = func_9123_call()
call_10107 = func_9123_call()
output = relay.Tuple([call_10106,])
output2 = relay.Tuple([call_10107,])
func_10108 = relay.Function([], output)
mod['func_10108'] = func_10108
mod = relay.transform.InferType()(mod)
output = func_10108()
func_10109 = relay.Function([], output)
mutated_mod['func_10109'] = func_10109
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9652_call = mod.get_global_var('func_9652')
func_9654_call = mutated_mod.get_global_var('func_9654')
call_10110 = relay.TupleGetItem(func_9652_call(), 0)
call_10111 = relay.TupleGetItem(func_9654_call(), 0)
output = call_10110
output2 = call_10111
func_10137 = relay.Function([], output)
mod['func_10137'] = func_10137
mod = relay.transform.InferType()(mod)
output = func_10137()
func_10138 = relay.Function([], output)
mutated_mod['func_10138'] = func_10138
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9425_call = mod.get_global_var('func_9425')
func_9427_call = mutated_mod.get_global_var('func_9427')
call_10142 = relay.TupleGetItem(func_9425_call(), 0)
call_10143 = relay.TupleGetItem(func_9427_call(), 0)
func_9919_call = mod.get_global_var('func_9919')
func_9926_call = mutated_mod.get_global_var('func_9926')
const_10147 = relay.const([6,10,6,7,-1,7,-10,-7,-8,-5,1,1,-1,-10,-2,10,-5,-3,2,-6,-9,-4,-8,1,-2,-2,-4,-10,-9,-1,1,8,4,6,-5,8,-7,-4,3,-2,4,1,6,2,2,-8,-5,-9,-2,-4,1,-1,-6,5,2,6,1,3,9,-5,-9,5,3,-2,3,2,-9,2,1,5,-5,9,-8,-5,6,-1,-7,8,2,-7,-7,9,-3,9,10,-7,-5,-3,9,-4,-10,-7,-1,6,-4,-8,-1,6,8,10,-9,3,5,1,-3,-6,-9,-9,9,-6,10,5,1,-9,-7,4,-8,-4,-2,7,-9,10,8,-10,7,-2,-8,-10,10,-7,-8,5,-10,9,1,9,8,9,1,5,-5,-6,-5,3,6,2,-1,-2,-5,4,8,7,-5,4,-8,-5,-5,8,-9,-7,9,1,-6,2,5,-9,-1,10,5,-5,2,-5,-3,9,4,-9,3,2,6,-3,1,-3,-10,-2,7,-7,-9,6,-7,-6,-8,3,-8,3,10,4,-9,8,1,4,7,-7,-8,-10,5,-6,-2,6,-6,3,-8,1,-3,-7,-9,10,-6,4,-9,9,-10,-9,-7,-4,6,1,2,3,9,8,3,-5,7,5,2,2,-10,-6,-7,-10], dtype = "uint16")#candidate|10147|(240,)|const|uint16
var_10148 = relay.var("var_10148", dtype = "uint16", shape = (3120,))#candidate|10148|(3120,)|var|uint16
const_10149 = relay.const(0.390115, dtype = "float64")#candidate|10149|()|const|float64
var_10150 = relay.var("var_10150", dtype = "float64", shape = (480,))#candidate|10150|(480,)|var|float64
const_10151 = relay.const([[True,True,True,False],[False,False,False,False],[False,False,True,False],[True,True,True,False],[True,True,True,False],[False,False,True,True],[False,True,False,True],[False,False,False,True],[True,True,True,True],[True,True,True,False],[False,False,False,True],[False,False,False,True],[True,True,True,True],[True,False,False,False],[True,False,True,True],[False,True,True,False],[False,False,True,True],[False,True,True,False],[True,False,True,True],[False,True,False,True],[False,True,False,False],[True,False,False,True],[False,True,False,True],[False,True,True,False],[False,False,True,False],[True,True,False,True],[True,True,False,True],[True,True,False,True],[False,False,True,False],[False,True,True,False],[False,True,True,False],[True,False,False,True],[True,False,True,False],[True,True,True,False],[False,False,True,True],[True,True,True,True],[True,False,True,True],[False,False,True,False],[False,True,True,True],[True,True,False,False],[True,True,True,False],[False,False,False,False],[False,True,False,True],[False,True,True,True],[True,False,False,True],[True,False,False,True],[True,True,False,False],[False,False,True,False],[True,False,False,True],[False,True,True,True],[False,True,False,True],[False,True,False,False],[False,True,True,True],[True,True,False,False],[False,False,False,True],[False,True,True,True],[True,True,False,False],[False,True,True,True],[True,True,False,True],[True,False,True,True],[True,True,False,False],[False,False,False,True],[False,True,False,False],[False,True,True,False],[False,True,False,True],[False,True,False,True],[False,False,True,True],[False,False,False,False],[True,False,False,False],[False,True,True,False],[False,True,False,False],[False,True,False,False],[False,False,True,True],[True,True,False,False],[True,True,True,False],[False,False,False,True],[False,False,True,True],[True,False,True,True],[True,False,False,True],[True,False,False,False],[True,True,True,False],[True,True,False,False],[True,False,False,True],[False,False,False,False],[True,False,True,False],[False,True,False,False],[True,False,True,False],[False,True,False,True],[True,True,False,False],[True,False,False,False],[False,True,True,False],[True,True,True,False],[True,False,True,False],[True,True,False,False],[True,True,True,True],[True,True,True,False],[True,True,False,False],[True,False,False,False],[True,True,False,True],[False,True,True,False],[False,False,False,True],[True,False,False,False],[True,True,False,False],[False,True,False,True],[False,False,True,True],[True,True,True,False],[False,False,True,True],[True,True,True,True],[True,True,True,True],[True,True,True,False],[False,True,True,False],[False,True,False,False],[False,True,False,True],[True,True,True,True],[True,True,False,True],[False,True,False,True],[False,True,False,True],[False,False,False,False],[True,True,True,False],[False,True,False,False],[False,False,True,True],[False,True,True,True],[False,True,False,False],[True,True,True,True],[False,False,True,True],[False,True,True,True],[False,False,True,False],[True,False,True,False],[False,False,True,False],[True,False,False,True],[False,False,True,True],[True,True,False,False],[True,True,True,True],[False,False,False,False],[True,False,True,False],[False,False,False,False],[False,False,True,False],[False,True,True,False],[True,True,True,True],[False,False,True,True],[True,False,False,False],[False,False,False,True],[False,True,False,False],[True,False,True,False],[False,False,False,True],[True,True,True,False],[False,True,True,False],[True,False,True,False],[False,True,False,True],[False,True,False,False],[False,False,True,False],[True,False,False,True],[False,False,False,True],[True,False,True,False],[True,True,False,False],[True,False,False,False],[True,True,True,True],[False,True,False,False],[False,True,False,True],[True,False,False,True],[False,True,False,False],[True,True,False,False],[False,False,False,False],[False,False,False,False],[True,True,True,True],[False,True,False,False],[False,False,True,True],[True,False,False,True],[True,False,True,False],[False,True,False,False],[False,False,False,False],[False,False,False,False],[True,False,True,False],[True,True,False,False],[False,False,True,True],[False,False,False,True],[False,False,True,False],[True,True,True,True],[True,True,False,True],[False,False,True,True],[False,True,True,False],[False,False,False,False],[False,True,True,False],[True,False,True,False],[False,False,False,True],[True,True,True,False],[True,True,True,True],[True,True,False,False],[False,False,False,False],[False,False,True,False],[True,False,False,True],[False,True,True,False],[True,True,False,False],[True,True,False,False],[False,True,True,True],[False,True,True,False],[True,True,True,True],[True,False,True,True],[False,True,False,True],[False,True,True,True],[False,True,True,True],[False,True,True,False],[True,False,False,True],[False,True,False,True],[True,True,True,False],[True,False,True,True],[False,True,False,False],[False,False,False,True],[True,True,False,False],[True,False,False,False],[False,False,True,False],[False,True,False,True],[False,True,True,True],[True,True,True,True],[False,True,False,True],[True,False,False,True],[True,False,True,False],[False,True,False,True],[False,False,True,False],[True,True,True,False],[False,False,True,False],[True,False,True,False],[False,True,True,True],[True,True,False,True],[True,True,True,False],[True,False,True,True],[False,False,True,True],[False,False,True,False],[False,True,False,False],[True,False,False,True],[True,True,True,True],[False,True,False,True],[True,True,True,False],[True,False,True,True],[True,False,True,True],[False,False,True,False],[True,False,False,True],[False,False,False,True],[True,True,False,True],[True,False,True,False],[False,False,False,True],[True,True,True,False],[True,False,True,True],[False,False,True,False],[False,False,True,False],[False,True,False,False],[True,False,True,False],[True,False,False,True],[True,False,False,False],[True,True,False,False],[True,True,True,False],[True,False,False,False],[False,True,False,True],[False,False,True,True],[True,False,True,False],[True,True,True,False],[True,True,False,False],[True,False,False,False],[True,True,False,False],[False,False,False,False],[True,True,True,False],[True,False,True,False],[True,True,False,False],[False,True,False,False],[True,False,False,False],[False,True,False,True],[False,True,True,False],[True,False,True,True],[True,False,True,False],[True,False,True,False],[True,True,False,False],[True,False,False,False],[False,False,False,False],[True,False,True,False],[True,False,False,True],[False,True,False,True],[False,True,False,True],[True,True,True,True],[False,True,True,True],[True,True,True,True],[True,True,True,True],[False,False,True,True],[False,True,False,True],[True,False,False,True],[True,False,False,True],[True,True,False,False],[False,True,True,True],[False,True,False,True],[False,True,False,False],[True,True,False,True],[True,False,False,False],[True,True,True,False],[True,True,True,True],[False,True,True,False],[False,False,True,False],[True,True,False,False],[False,False,False,True],[False,False,False,True],[True,True,True,False],[False,False,False,True],[True,False,False,True],[True,True,True,False],[False,False,False,True],[True,False,True,True],[True,False,False,True],[False,False,False,True],[True,True,True,True],[True,False,True,False],[False,True,True,True],[True,False,True,True],[False,False,False,True],[False,False,False,True],[False,False,False,False],[False,False,False,False],[True,True,True,False],[True,False,False,True],[False,True,True,True],[True,False,False,True],[False,False,False,True],[False,False,False,False],[False,True,True,True],[True,True,True,True],[False,False,True,False],[True,False,True,True],[True,False,False,True],[True,False,False,True],[False,True,False,True],[True,True,True,False],[False,False,True,True],[True,False,False,False],[False,False,False,True],[False,True,False,True],[False,False,False,True],[False,True,False,True],[False,True,False,True],[False,True,True,False],[False,False,True,True],[False,False,True,True],[False,True,False,False],[True,True,True,True],[True,False,False,False],[True,False,True,True],[True,True,False,True],[False,False,True,False],[False,True,False,True],[True,True,False,True],[True,False,True,False],[True,False,True,True],[False,True,True,True],[True,False,False,True],[True,True,False,True],[True,False,False,True],[True,False,False,False],[True,False,True,False],[True,False,False,False],[False,True,True,True],[False,False,False,False],[False,True,True,True],[False,True,True,True],[True,True,False,False],[True,True,False,False],[True,True,True,False],[True,True,True,False],[True,False,True,True],[True,True,True,True],[False,False,True,False],[False,False,True,True],[True,False,False,False],[True,False,False,False],[False,True,True,True],[True,False,True,False],[False,False,True,True],[False,True,True,False],[True,False,True,True],[False,False,True,True],[False,True,True,True],[True,True,False,True],[True,True,True,False],[True,False,False,True],[True,True,True,True],[False,False,True,False],[False,False,True,False],[True,False,True,True],[True,False,True,True],[True,True,False,False],[False,True,False,True],[False,False,False,True],[False,True,False,False],[True,True,False,True],[False,False,True,True],[False,False,False,False],[False,True,True,False],[False,True,False,False],[True,True,True,True],[True,False,False,True],[True,False,False,True],[True,False,False,True],[False,False,False,True],[False,True,True,True],[False,False,True,True],[True,True,True,False],[False,True,True,False],[True,True,True,False],[True,True,True,True],[False,False,False,False],[False,True,True,False],[False,False,True,False],[False,False,True,False],[False,True,False,False],[False,False,False,True],[True,False,True,True],[True,True,False,True],[True,False,False,True],[True,True,True,True],[False,True,False,False],[True,True,False,True],[False,True,False,False],[True,False,True,False],[False,True,True,False],[False,True,True,True],[False,True,False,True],[True,True,True,True],[False,True,True,False],[False,False,True,True],[True,True,True,False],[False,True,False,False],[False,False,False,False],[True,False,True,True],[True,True,True,False],[False,False,True,True],[True,True,True,True],[True,False,False,False],[False,False,False,False],[True,False,False,True],[False,True,True,False],[True,False,True,False],[True,False,True,True],[False,False,False,True],[True,True,True,False],[False,True,False,False],[True,False,False,False],[True,False,True,True],[True,False,True,False],[False,True,True,True],[True,False,True,False],[False,True,True,False],[True,False,False,True],[False,True,True,True],[True,True,False,False],[True,True,False,True],[False,True,True,False],[False,False,False,False],[False,True,False,True],[False,True,True,True],[False,True,False,False],[False,True,True,False],[False,True,False,False],[True,False,True,True],[False,False,True,False],[True,True,False,True],[False,False,False,True],[False,True,False,False],[True,True,False,True],[False,True,True,True],[True,False,True,False],[False,False,True,False],[False,False,True,True],[False,True,True,False],[False,True,True,False],[True,False,False,False],[True,False,True,True],[True,True,False,False],[True,True,False,True],[True,True,False,False],[False,True,True,False],[False,False,False,False],[False,False,False,True],[False,False,True,True],[False,False,False,False],[True,True,False,False],[False,True,False,False],[False,False,False,False],[True,True,False,True],[False,True,False,False],[True,False,True,True],[True,False,False,True],[False,False,True,False],[True,False,False,False],[True,False,False,True],[False,False,False,True],[True,False,True,True],[True,True,True,False],[True,False,True,False],[False,True,False,True],[False,True,True,True],[True,True,True,False],[False,True,False,False],[True,False,False,True],[False,True,False,False],[False,False,False,True],[False,False,False,True],[True,False,False,True],[True,True,True,True],[False,False,True,False],[False,True,True,True],[True,True,False,False],[False,True,False,False],[True,False,True,True],[False,True,False,False],[True,False,True,True],[True,False,False,False],[True,True,False,True],[True,True,False,False],[False,True,False,False],[False,False,False,True],[True,False,False,True],[True,True,True,True],[True,True,False,True],[True,False,True,False],[True,True,True,False],[True,False,True,True],[True,True,False,True],[False,False,False,True],[False,False,False,False],[True,False,True,True],[True,True,False,False],[True,True,True,False],[False,False,True,True],[False,False,True,True],[True,True,False,True],[True,False,False,False],[True,True,False,False],[True,True,True,False],[False,True,False,True],[False,True,True,True],[False,False,False,False],[False,True,False,False],[False,False,True,False],[True,False,False,False],[True,False,False,False],[True,False,False,True],[True,False,False,False],[False,True,True,False],[False,True,False,False],[True,False,False,True],[True,False,True,False],[False,True,False,True],[True,False,True,False],[False,True,True,False],[True,True,False,True],[True,True,True,True],[False,False,True,True],[False,False,True,True],[False,False,True,False],[False,True,True,True],[False,False,False,False],[True,True,False,False],[True,False,False,False],[True,True,True,False],[True,False,True,False],[False,False,True,False],[True,True,False,True],[False,True,False,False],[True,False,True,False],[False,True,True,True],[False,True,True,True],[False,False,True,False],[False,True,False,True],[True,True,True,False],[False,False,True,True],[True,False,True,True],[False,False,True,False],[False,False,True,False],[True,False,True,False],[False,True,False,True],[False,False,False,True],[True,True,False,False],[True,True,True,True],[True,False,False,False],[True,True,False,True],[False,False,True,True],[False,False,True,True],[True,True,False,True],[True,False,True,True],[True,True,True,True],[False,False,False,False],[False,False,False,True],[True,False,False,True],[False,True,True,True],[False,False,False,True],[False,False,True,True],[False,False,False,True],[True,True,False,True],[True,False,True,False],[False,True,True,False],[False,False,True,False],[True,False,True,True],[True,True,True,True],[True,False,False,True],[False,True,True,True],[False,True,False,False],[False,False,False,False],[True,True,False,True],[True,False,False,True],[False,True,False,True],[True,True,False,False],[True,True,False,True],[False,True,False,False],[False,True,False,False],[True,False,True,False],[False,True,False,True],[True,False,False,False],[True,True,True,False],[False,False,True,False],[True,True,True,True],[False,False,True,False],[True,False,True,False],[False,False,False,False],[True,False,False,True],[False,False,True,False],[True,False,False,False],[False,True,False,True],[False,True,False,False],[True,False,True,False],[False,False,False,False],[False,True,True,True],[True,True,False,False],[True,True,False,True],[False,False,True,False],[False,True,False,False],[False,False,True,False],[False,False,False,False],[False,True,True,False],[False,False,True,True],[True,False,True,False],[True,True,True,True],[False,False,False,False],[True,False,False,False],[False,True,False,True],[True,False,True,True],[True,False,True,True],[False,True,True,True],[True,False,False,False],[False,True,False,False],[False,False,False,True],[False,False,True,False],[False,True,True,True],[False,True,True,True],[True,False,True,False],[True,False,True,False],[False,True,True,False],[True,True,False,True],[True,False,False,True],[True,False,True,True],[True,True,False,True],[False,True,True,True],[False,False,True,True],[False,True,False,False],[False,True,True,True],[False,True,False,True],[False,True,False,True],[True,True,False,False],[False,False,False,False],[False,True,False,False],[True,True,True,True],[False,True,True,True],[False,False,False,False],[False,True,True,False],[False,True,True,True],[True,True,True,True],[True,True,False,True],[False,False,True,True],[True,True,False,False],[False,False,True,True],[False,True,True,False],[False,True,False,False],[False,True,True,True],[False,True,True,False],[False,True,True,True],[True,True,False,False],[False,True,False,False],[True,True,True,True],[True,True,False,True],[False,False,False,False],[False,True,False,False],[False,True,False,True],[False,False,False,True],[True,False,True,True],[True,False,True,False],[True,True,False,False],[False,False,False,False],[False,False,False,False],[True,False,True,False],[True,True,True,True],[True,True,False,False],[True,False,True,True],[False,True,True,True],[False,True,False,False],[True,False,False,False],[False,False,False,True],[True,True,True,False],[True,False,False,False],[True,False,True,True],[False,False,False,False],[True,True,False,True],[True,False,True,False],[False,True,False,False],[False,True,True,True],[False,True,True,True],[True,True,False,True],[False,True,False,False],[True,False,True,True],[True,True,False,False],[True,False,True,True],[True,True,True,True],[False,False,False,True],[True,False,False,True],[True,False,False,True],[True,False,False,True],[False,True,False,True],[False,False,False,True],[False,True,False,False],[False,True,True,True],[True,False,False,True],[False,False,False,True],[True,False,True,False],[False,True,True,False],[False,True,True,False]], dtype = "bool")#candidate|10151|(728, 4)|const|bool
call_10146 = relay.TupleGetItem(func_9919_call(relay.reshape(const_10147.astype('uint16'), [240,]), relay.reshape(var_10148.astype('uint16'), [3120,]), relay.reshape(const_10149.astype('float64'), []), relay.reshape(var_10150.astype('float64'), [480,]), relay.reshape(const_10151.astype('bool'), [2912,]), ), 7)
call_10152 = relay.TupleGetItem(func_9926_call(relay.reshape(const_10147.astype('uint16'), [240,]), relay.reshape(var_10148.astype('uint16'), [3120,]), relay.reshape(const_10149.astype('float64'), []), relay.reshape(var_10150.astype('float64'), [480,]), relay.reshape(const_10151.astype('bool'), [2912,]), ), 7)
output = relay.Tuple([call_10142,call_10146,const_10147,var_10148,const_10149,var_10150,const_10151,])
output2 = relay.Tuple([call_10143,call_10152,const_10147,var_10148,const_10149,var_10150,const_10151,])
func_10162 = relay.Function([var_10148,var_10150,], output)
mod['func_10162'] = func_10162
mod = relay.transform.InferType()(mod)
var_10163 = relay.var("var_10163", dtype = "uint16", shape = (3120,))#candidate|10163|(3120,)|var|uint16
var_10164 = relay.var("var_10164", dtype = "float64", shape = (480,))#candidate|10164|(480,)|var|float64
output = func_10162(var_10163,var_10164,)
func_10165 = relay.Function([var_10163,var_10164,], output)
mutated_mod['func_10165'] = func_10165
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10108_call = mod.get_global_var('func_10108')
func_10109_call = mutated_mod.get_global_var('func_10109')
call_10169 = relay.TupleGetItem(func_10108_call(), 0)
call_10170 = relay.TupleGetItem(func_10109_call(), 0)
func_9425_call = mod.get_global_var('func_9425')
func_9427_call = mutated_mod.get_global_var('func_9427')
call_10175 = relay.TupleGetItem(func_9425_call(), 0)
call_10176 = relay.TupleGetItem(func_9427_call(), 0)
output = relay.Tuple([call_10169,call_10175,])
output2 = relay.Tuple([call_10170,call_10176,])
func_10177 = relay.Function([], output)
mod['func_10177'] = func_10177
mod = relay.transform.InferType()(mod)
mutated_mod['func_10177'] = func_10177
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10177_call = mutated_mod.get_global_var('func_10177')
call_10178 = func_10177_call()
output = call_10178
func_10179 = relay.Function([], output)
mutated_mod['func_10179'] = func_10179
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9577_call = mod.get_global_var('func_9577')
func_9578_call = mutated_mod.get_global_var('func_9578')
call_10199 = func_9577_call()
call_10200 = func_9577_call()
output = call_10199
output2 = call_10200
func_10204 = relay.Function([], output)
mod['func_10204'] = func_10204
mod = relay.transform.InferType()(mod)
output = func_10204()
func_10205 = relay.Function([], output)
mutated_mod['func_10205'] = func_10205
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9425_call = mod.get_global_var('func_9425')
func_9427_call = mutated_mod.get_global_var('func_9427')
call_10278 = relay.TupleGetItem(func_9425_call(), 0)
call_10279 = relay.TupleGetItem(func_9427_call(), 0)
var_10287 = relay.var("var_10287", dtype = "float64", shape = (3, 231))#candidate|10287|(3, 231)|var|float64
bop_10288 = relay.equal(call_10278.astype('bool'), var_10287.astype('bool')) # shape=(3, 231)
bop_10291 = relay.equal(call_10279.astype('bool'), var_10287.astype('bool')) # shape=(3, 231)
uop_10300 = relay.acos(call_10278.astype('float64')) # shape=(1, 231)
uop_10302 = relay.acos(call_10279.astype('float64')) # shape=(1, 231)
output = relay.Tuple([bop_10288,uop_10300,])
output2 = relay.Tuple([bop_10291,uop_10302,])
func_10306 = relay.Function([var_10287,], output)
mod['func_10306'] = func_10306
mod = relay.transform.InferType()(mod)
var_10307 = relay.var("var_10307", dtype = "float64", shape = (3, 231))#candidate|10307|(3, 231)|var|float64
output = func_10306(var_10307)
func_10308 = relay.Function([var_10307], output)
mutated_mod['func_10308'] = func_10308
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8714_call = mod.get_global_var('func_8714')
func_8716_call = mutated_mod.get_global_var('func_8716')
call_10336 = relay.TupleGetItem(func_8714_call(), 0)
call_10337 = relay.TupleGetItem(func_8716_call(), 0)
func_2003_call = mod.get_global_var('func_2003')
func_2007_call = mutated_mod.get_global_var('func_2007')
var_10343 = relay.var("var_10343", dtype = "float32", shape = (336,))#candidate|10343|(336,)|var|float32
var_10344 = relay.var("var_10344", dtype = "float32", shape = (90,))#candidate|10344|(90,)|var|float32
const_10345 = relay.const([-3.404455,-7.704872,3.161686,-2.108251,4.187305,-3.706645,-5.132107,-5.533722,4.017112,1.816502,7.492136,-9.496361,2.695234,1.044601,4.803270,5.462722,4.502966,-9.758836,6.346949,5.439875,-0.561951,5.462690,1.581739,6.097698,4.317888,-0.678066,6.824534,6.877995,7.043397,5.268837,2.278715,-9.564736,-3.020381,1.095081,5.561557,-9.362653,-0.041533,6.625302,0.855968,2.957704,1.844735,8.858654,-9.042409,2.687017,2.738447,3.849119,4.825902,7.124021,-7.656725,9.694453,-8.734537,4.088177,7.688720,-4.832705,0.635589,-4.212746,-6.801350,4.289479,-0.034278,-7.129970,9.675106,-0.522589,0.436199,-2.553387,-6.192818,-7.484541,9.934970,8.676060,-2.613939,3.373484,4.096507,-5.229574,6.941056,8.391874,-4.739500,-0.577578,6.166111,-4.302943,-0.177558,-1.187199,-1.733883,3.520693,-8.921846,5.762396,0.650563,-4.788298,-7.425574,-1.781067,-1.694772,5.304722,6.356419,-3.057839,-6.630686,0.071091,1.500723,5.540764,-7.825632,9.409476,1.008560,5.068333,1.101398,-1.258790,-0.305589,7.526149,-8.569427,5.426547,-2.978218,-9.037388,-9.400074,-2.208397,7.535710,-1.897188,-3.402862,-1.706209,-1.496273,-1.209281,0.431137,2.932184,2.420230,-5.571007,9.880893,8.962463,0.874144,-0.971014,-0.137594,2.771842,-2.607355,4.587950,4.697277,-9.247132,-0.923368,5.960942,3.637338,1.549251,4.318552,-6.234336,-3.184268,9.583871,4.748556,2.163012,-5.161246,7.223802,-2.574058,0.168422,-4.264944,3.416670,1.747812,-9.462776,8.398363,6.387105,9.014628,1.717200,-2.510739,6.181374,-5.849181,3.471311,1.182094,8.759218,0.696366,1.696574,1.674627,-8.580963,2.731706,5.562869,4.578050,-5.142204,3.554743,-1.953711,-5.729152,6.105570,-5.399961,7.824450,-9.592839,-0.693340,7.381790,0.199401,-9.364237,6.415142,6.443547,6.322229,-3.316735,5.947453,1.451115,9.730065,-8.061180,4.913565,1.787638,-4.724247,4.582099,3.436635,2.122965,5.742376,9.793694,4.682460,-3.744727,9.870416,-8.364794,-0.797872,-4.058456,8.182252,-9.415317,7.818336,6.684239,4.454529,-3.840891,-0.606141,-8.359138,-3.911412,-7.451886,-3.401838,-9.870306,0.806283,-1.445702,-5.914372,5.750759,2.070999,-4.174613,7.658348,6.005367,2.340934,-9.142223,8.659008,0.848691,-4.295108,5.790377,-1.108398,-5.226691,5.578090,6.389488,9.672702,0.267627,3.427548,6.363971,-4.297471,9.923331,2.670557,4.033007,-9.502026,-8.620670,-1.565630,1.015517,9.649402,9.250985,0.291666,-8.635761,1.621367,9.616175,-6.254500,-5.267153,4.321858,-2.021440,2.942660,8.743696,-1.367626,-3.591096,-1.953563,-9.746078,3.734268,-3.487759,-0.444355,2.062235,-7.484657,-7.877474,8.323773,4.868419,8.855107,7.084155,7.945985,-3.968799,-4.773123,6.483161,9.714377,-7.042553,8.302135,2.075816,-9.545151,7.079508,2.318753,9.105194,-2.026496,-4.166909,-4.952206,-5.459462,-9.493823,8.958599,3.798848,6.610850,-1.331402,8.251503,-1.668906,-5.781572,4.560125,-5.615771,2.713624,-2.942228,-2.083883,2.556603,-1.119823,8.677165,6.058950,-5.924627,0.070856,2.597294,9.159240,6.490111,4.783715,-8.287585,2.550459,8.690612,-8.290811,2.477490,-2.286695,3.636087,-0.946402,-9.364567,-2.382430,9.844368,-9.791260,0.764277,8.710636,-1.768764,-6.510358,-6.838896,9.148188,3.556595,8.703683,-9.262068,7.087033,-1.002666,-0.574085,7.495302,1.123467,-0.811472,7.793944,-1.703671,-9.407179,2.624038,8.300434,2.469805,-9.115087,1.132005,3.982844,1.179844,0.808449,-6.789375,-9.123625,-8.750129,-9.838867,-9.672325,7.260360,4.637163,8.239916,-0.339641,-9.875454,6.263204,-3.972931,-7.051532,-2.535014,2.125211,7.798061,-0.474193,1.831462,-1.129059,8.874394,-7.630384,7.308451,5.351291,-3.339920,1.576817,1.945717,6.985245,8.207309,3.567516,-9.795319,-8.143401,-3.836141,2.828924,8.405413,-2.796673,-4.834641,4.683232,-2.285809,-8.633935,5.506171,4.158054,-4.489293,-9.382665,-8.564941,-3.431320,-6.211006,-6.665161,1.722003,8.953196,8.421073,2.203836,-2.323850,7.822644,4.972288,1.676457,-7.988382,4.376277,-4.654462,-5.224969,0.676037,7.398259,9.335398,3.237678,7.159436,-2.273237,-5.540581,7.179259,-0.108621,1.883758,-6.483600,-5.267515,1.773213,-1.604592,-5.223626,-2.659380,3.597479,5.488621,4.435011,6.845443,0.303996,-4.623973,4.170440,-8.135454,-8.837791,-6.108269,1.074977,7.883320,-0.700512,-5.031402,5.717376,3.955968,-6.640297,2.897556,5.986143,-3.617321,-2.482260,-4.193274,-4.183891,-3.401393,-0.400688,-4.504701,1.234931,-5.543369,6.407596,-8.485836,5.227545,6.391603,9.984993,3.329305,9.834645,3.159697,-9.253238,8.789432,1.357308,-9.173091,-8.587448,6.849391,-1.676989,-2.426318,-9.662456,-4.824521,-1.342629,3.247343,8.378635,-1.262906,-3.746843,-2.142742,3.504890,-9.904449,2.367369,-5.743668,4.336494,-5.226984,6.005175,2.733204,5.123827,1.047224,7.482171,2.446667,4.369351,8.882045,-0.087949,9.145312,6.670959,-2.550021,-8.658603,1.606523,-7.331843,4.959463,-5.551221,7.615333,7.289076,5.456634,2.875711,2.956684,-7.161621,-2.917164,-1.535186,-8.101592,5.058791,0.023253,0.585443,8.275273,-1.307940,8.655916,0.444741,-6.245468,1.139311,0.649030,0.506636,3.754034,8.575195,-3.644852,7.243787,-7.193221,4.214730,-6.392150,-6.603241,-1.381548,6.345050,1.058113,-6.181973,0.889939,1.702719,-7.033127,6.548175,-7.246790,5.796650,-9.100737,0.233627,-3.381652,-6.480953,9.633829,-4.445089,6.644630,7.969304,1.910372,7.716720,8.480408,0.387035,7.371353,1.503600,-2.793789,-2.153518,-2.114935,3.839851,-1.278006,3.581607,-5.415801,0.674908,9.481684,-7.163611,-6.189245,7.245140,-5.662191,7.336684,0.199759,0.559278,7.629380,6.190020,6.371723,-6.970158,-8.903300,4.284936,-9.281917,9.209897,8.270480,-2.241595,1.415624,6.228716,-8.597650,5.770263,7.461856,7.909666,-8.798588,-0.264817,3.619202,7.467395,5.746570,-0.355439,9.447823,3.408984,8.727469,-2.580777,-6.112926,-6.505948,-0.437155,-6.369587,-1.890720,-4.392897,-1.550120,-6.783285,-1.551953,-4.934833,-1.368843,1.220237,-5.592967,-3.945233,-7.018880,-8.076140,-7.572392,1.758773,-8.654863,2.802267,-2.941049,9.916208,-7.969065,-1.701872,0.549818,-5.943386,-7.289290,2.313117,9.000330,-2.780858,-5.536808,-5.717669,-5.472115,4.586817,8.093679,2.497591,-7.992327,1.938638,7.361710,8.954057,-3.801530,-9.401323,9.131654,0.751701,-8.958516,-8.978483,-3.884446,9.811207,0.861678,7.075937,1.060813,-8.280583,3.858125,9.820848,7.078315,5.699273,-2.487274,-3.578157,1.516819,-4.148379,-9.203303,-4.327526,8.435092,2.237871,-0.580419,-8.347947,5.333276,9.839128,-6.203760,0.481598,-3.179685,4.387566,3.880320,-5.076836,9.886221,-3.023763,-0.533821,-2.063491,-8.352765,-5.306504,-5.901353,8.601471,6.988654,-9.263979,5.464406,4.784757,-3.226315,-9.957251,0.567603,-2.346835,-9.461767,-4.481894,2.552402,-7.699990,-0.815904,-7.912830,3.792287,-9.215349,-6.114901,-1.379673,3.456270,0.757761,-9.181217,4.328099,9.445343,-0.704550,-1.254462,-8.531831,7.301216,7.158059,6.658799,-4.400187,3.733495,4.742637,2.778756,9.001354,7.386981,-8.161930,2.644218,9.578843,7.682470,-9.095832,-1.329220,1.226342,3.747314,5.548964,-4.243291,-7.107491,8.920047,-9.697062,7.500224,3.651483,-2.939197,6.679729,3.665574,-9.351143,-4.800254,-2.075858,8.353378,0.170925,-7.970362,9.670267,-4.659257,1.397282,8.615263,2.338341,6.898562,-5.939650,-5.900733,9.880893,-2.848554,7.692898,-5.558795,-6.380663,2.947048,4.838526,-7.753916,5.010148,-5.498504,-0.828820,-7.940996,-2.771480,-1.130706,8.634848,-0.162798,-3.064294,0.161668,-7.000073,5.301410,8.846744,-1.645989,2.122307,-9.483686,4.135696,0.170619,-0.731770,6.422516,0.238578,0.081223,2.468861,-3.128687,8.841453,6.216495,1.261073,-1.942520,2.176748,1.555059,3.850373,9.736783,-8.831328,1.925855,-2.760262,-4.109633,-2.482052,3.435615,6.637393,-6.992880,0.673385,-2.760436,-8.741405,6.523077,4.083159,-4.981947,-7.773020,-9.527643,-3.622277,-1.702866,-0.977348,9.942108,-8.622124,-7.472254,-2.440404,-9.792203,-7.559819,-3.539728,9.683309,5.753419,0.667931,-9.954381,1.680582,-8.351942,-6.068045,1.982898,7.501628,8.158741,4.290493,-0.133017,-8.834879,7.882852,7.475255,-9.529991,8.756281,-1.279179,0.519994,9.997243,5.564985,7.577371,-9.463414,-8.338598,7.967995,7.647432,-1.211947,-3.894538,9.147875,2.348981,9.606475,2.869767,7.302728,7.249356,-2.311111,-6.132605,0.921977,2.361778,-6.814882,8.263743,-3.895677,-7.174167,-9.680245,6.178114,-1.189671,0.825545,-1.987428,-5.038926,-2.082688,5.636580,-9.646951,-4.230782,7.089607,6.446164,7.757399,7.745890,-5.361838,-6.007117,-6.604836,-6.766480,7.750875], dtype = "float64")#candidate|10345|(864,)|const|float64
call_10342 = relay.TupleGetItem(func_2003_call(relay.reshape(var_10343.astype('float32'), [16, 3, 7]), relay.reshape(var_10344.astype('float32'), [15, 6]), relay.reshape(const_10345.astype('float64'), [864,]), ), 6)
call_10346 = relay.TupleGetItem(func_2007_call(relay.reshape(var_10343.astype('float32'), [16, 3, 7]), relay.reshape(var_10344.astype('float32'), [15, 6]), relay.reshape(const_10345.astype('float64'), [864,]), ), 6)
func_4845_call = mod.get_global_var('func_4845')
func_4848_call = mutated_mod.get_global_var('func_4848')
const_10349 = relay.const([9.659599,-3.925288,2.753951,-2.931938,4.729561,0.239727,5.552797,1.265996,-1.449909,1.661696,-0.088929,2.070855,5.911704,1.597869,8.421288,8.012818,-4.045198,8.477017,-5.771721,0.616830,6.143440,-6.705134,-1.336617,8.562752], dtype = "float64")#candidate|10349|(24,)|const|float64
call_10348 = relay.TupleGetItem(func_4845_call(relay.reshape(const_10349.astype('float64'), [3, 4, 2])), 0)
call_10350 = relay.TupleGetItem(func_4848_call(relay.reshape(const_10349.astype('float64'), [3, 4, 2])), 0)
output = relay.Tuple([call_10336,call_10342,var_10343,var_10344,const_10345,call_10348,const_10349,])
output2 = relay.Tuple([call_10337,call_10346,var_10343,var_10344,const_10345,call_10350,const_10349,])
func_10351 = relay.Function([var_10343,var_10344,], output)
mod['func_10351'] = func_10351
mod = relay.transform.InferType()(mod)
mutated_mod['func_10351'] = func_10351
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10351_call = mutated_mod.get_global_var('func_10351')
var_10353 = relay.var("var_10353", dtype = "float32", shape = (336,))#candidate|10353|(336,)|var|float32
var_10354 = relay.var("var_10354", dtype = "float32", shape = (90,))#candidate|10354|(90,)|var|float32
call_10352 = func_10351_call(var_10353,var_10354,)
output = call_10352
func_10355 = relay.Function([var_10353,var_10354,], output)
mutated_mod['func_10355'] = func_10355
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9123_call = mod.get_global_var('func_9123')
func_9125_call = mutated_mod.get_global_var('func_9125')
call_10403 = func_9123_call()
call_10404 = func_9123_call()
func_6146_call = mod.get_global_var('func_6146')
func_6149_call = mutated_mod.get_global_var('func_6149')
var_10424 = relay.var("var_10424", dtype = "uint64", shape = (1344,))#candidate|10424|(1344,)|var|uint64
const_10425 = relay.const([-8.882225,-9.229097,6.467449,-4.283431,8.617331,4.685028,6.217989,-1.184371,-8.608126,-9.187093,-5.535660,7.662266,-8.085686,8.321435,6.110483,3.392924,5.792528,2.706992,9.959488,-1.070175,1.118223,4.551283,9.922482,-3.780855,-5.950439,-7.771844,-9.495501,-0.714621,-4.946496,7.817305,-9.983620,0.841914,-7.975386,-3.833654,-7.528619,-7.535481,-3.771729,-2.311152,8.239373,5.078703,2.642388,8.505934,3.607664,9.898939,2.478155,-2.738231,6.400536,6.096321,-3.842582,-9.297332,-4.030622,-3.860286,-8.637843,-9.696603,-7.979153,-2.049198,-0.515628,6.050486,7.395441,7.261765,7.017093,-7.915737,0.870153,5.726592,5.047841,-9.343117,-5.889091,-4.074269,0.039528,3.336046,-2.634082,4.005108,3.685299,-1.366927,8.355726,1.581496,7.898967,-3.351310,7.114975,0.068633,2.721436,-0.534396,-6.437635,-2.737739,4.688796,6.758669,4.366934,-0.053858,-6.932401,6.290055,-9.948100,-1.157856,-8.752399,-3.777583,-4.905768,-9.853589,6.139664,-7.839308,9.864643,7.939991,-1.602556,-2.566191,-7.945966,-7.248720,-8.650556,-0.183531,-9.512728,-6.389642,9.562334,-6.654052,-5.174230,4.268097,1.748734,-2.381776,8.919423,1.629890,-1.605982,2.483729,4.919131,2.141491,-9.877668,-0.524110,8.654037,3.753225,-8.121539,-9.353823,9.509001,-9.940528,9.614215,8.826264,9.126360,-7.838864,0.010860,-9.610574,3.561210,-7.607311,1.761933,-3.228955,4.165487,-2.787899,8.268985,7.811541,-3.384355,7.419994,-7.236284,-9.855868,-9.792712,3.832026,3.402322,-8.892285,-3.930817,-9.783390,5.494650,-8.654985,-5.688369,-2.002764,2.065909,-6.270867,-4.879216,-9.485224,0.258360,-8.611109,6.152909,4.640754,6.802161,-0.317556,-0.490680,4.111734,7.852082,-1.575726,-0.891426,-3.418627,-8.309808,-1.568866,-8.208786,2.120168,3.845530,0.611435,-3.559475,7.542778,-5.167326,4.164520,-0.471409,5.119427,-8.792411,-8.046177,-6.714382,-6.238006,4.672182,0.063840,4.246823,0.530961,-5.643462,-9.174278,7.976495,-2.269718,4.719906,-4.708763,9.081153,6.917026,-1.372226,-2.771335,-3.008341,6.793929,6.592851,-4.979416,-3.689795,-5.484204,-1.873062,6.088017,-9.540543,-5.286066,3.818796,-1.868872,-4.754013,-0.351824,7.018579,2.462918,6.738195,4.702945,-0.104360,-9.474675,-5.575300,0.045532,9.066231,-6.634081,9.667236,5.119430,-8.590366,3.066567,0.422003,8.985922,-6.464605,0.195006,5.054695,0.886935,-5.171416,-4.978234,-4.002376,3.026847,-5.405883,4.730492,-2.268745,-3.517465,-4.982109,1.353529,6.583899,-0.751374,-9.395313,-0.296932,1.376127,2.272512,3.426793,-5.997843,2.160231,5.357009,9.505414,9.756542,8.585122,-6.639463,4.623414,8.407502,-1.970551,4.896723,4.891782,8.119835,1.679862,-9.893562,-9.817046,-9.683418,1.047472,-0.679769,-5.916780,-1.356998,7.257116,-5.664225,5.750503,-3.203401,6.184812,-1.759211,8.962041,7.694829,-6.243221,9.336169,-6.070092,-3.336344,6.910337,5.667814,2.922566,5.463818,-0.428983,5.437114,4.751103,-1.379395,2.142712,-5.743740,-1.898796,3.651236,7.474054,0.018216,-3.212252,6.496815,-2.060449,-5.533102,1.791145,4.338355,9.717269,4.625689,-6.931103,9.869549,-6.296193,-2.961881,-1.378959,5.301585,-7.776952,8.001889,-0.036947,-5.450413,5.268863,-3.930739,-4.961141,0.493021,7.302003,-7.481138,-2.312910,1.539569,6.669443,3.401350,-5.377091,-4.420220,3.286734,5.053012,-4.353118,1.303369,-4.621028,-0.986506,8.595326,-3.047212,-1.516878,-9.052212,6.691866,1.378702,3.674612,-7.707616,1.773197,-2.130190,-3.067401,1.566203,3.267795,6.242522,-5.556180,-7.961203,1.354134,-9.745875,4.086564,-1.419280,4.559176,-1.568956,-4.915477,-1.301719,6.952761,-2.182212,-0.814861,-3.261631,-4.353222,-4.259299,-3.066114,-2.421203,6.014973,8.578784,8.708275,4.678740,-7.438926,1.775356,-6.127347,-5.314649,-1.539606,-4.736068,-8.028631,-8.866781,-8.401541,-5.776216,1.731883,-2.427607,6.925327,-5.852998,3.926633,8.778287,2.960022,-7.245980,-0.799846,4.168388,4.972978,-8.350581,-1.765727,9.039608], dtype = "float32")#candidate|10425|(396,)|const|float32
call_10423 = relay.TupleGetItem(func_6146_call(relay.reshape(var_10424.astype('uint64'), [6, 14, 16]), relay.reshape(const_10425.astype('float32'), [1, 396]), ), 0)
call_10426 = relay.TupleGetItem(func_6149_call(relay.reshape(var_10424.astype('uint64'), [6, 14, 16]), relay.reshape(const_10425.astype('float32'), [1, 396]), ), 0)
func_7967_call = mod.get_global_var('func_7967')
func_7971_call = mutated_mod.get_global_var('func_7971')
const_10430 = relay.const([-5,-3,-2,10,-7,-2,-5,-2,1,7,8,-2,-10,6,-9,7,-2,6,3,8,2,7,-8,-8,-6,9,-8,3,-7,4,-5,-8,1,3,-2,4,-2,1,-9,10,-3,-3,1,9,-6,4,1,-10,-5,-6,5,-1,8,8,-9,5,9,-3,4,8,2,-3,3,-5,8,7,1,2,-8,-9,1,10,-1,-10,-4,7,2,1,3,8,-9,-5,-1,-10,-7,7,-4,-6,10,2,-6,-2,-8,6,10,1,8,-10,2,9,10,9,-5,-8,3,-2,8,-9,-6,-8,-8,-8,6,7,-7,-1,-4,-10,5,5,8,7,1,4,1,-6,2,7,-1,8,-1,-6,7,-6,-5,-10,-10,1,-3,1,-7,-6,10,-9,-10,-2,5,-7,-3,7,-8,1,4,-9,8,-4,6,6,-5,-10,1,7,-7,10,-1,-10,-4,7,6,6,6,9,-9,-2,9,1,-2,-5,7,3,-2,9,7,-5,-1,-6,-10,1,-9,8,-4,7,-9,7,10,8,-4,-10,-10,-3,-6,8,-4,-7,-1,-3,4,-1,6,3,-9,-10,7,-5,6,7], dtype = "int32")#candidate|10430|(216,)|const|int32
var_10431 = relay.var("var_10431", dtype = "float32", shape = (143, 1))#candidate|10431|(143, 1)|var|float32
call_10429 = relay.TupleGetItem(func_7967_call(relay.reshape(const_10430.astype('int32'), [2, 12, 9]), relay.reshape(const_10430.astype('int32'), [2, 12, 9]), relay.reshape(var_10431.astype('float32'), [1, 143]), ), 2)
call_10432 = relay.TupleGetItem(func_7971_call(relay.reshape(const_10430.astype('int32'), [2, 12, 9]), relay.reshape(const_10430.astype('int32'), [2, 12, 9]), relay.reshape(var_10431.astype('float32'), [1, 143]), ), 2)
func_6254_call = mod.get_global_var('func_6254')
func_6257_call = mutated_mod.get_global_var('func_6257')
const_10434 = relay.const([True,False,False,False,False,False,True,False,False,True,False,False,False,True,True,False,True,True,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,False,True,True,False,False,True,False,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,False,False,True,False,False,False,False,True,True,True,False,False,True,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,True,False,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,False,False,False,False,False,True,False,False,True,False,True,True,True,True,False,True,True,True,True,False,False,True,True,False,False,True,False,True,True,False,False,False,False,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,False,False,False,True,True,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,False,True,False,True,True,False,False,True,True,True,True,True,True,False,False,True,False,True,True,True,True,True,True,True,True,True,False,False,False,True,True,False,False,True,True,True,True,False,False,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,False,False,False,True,False,False,False,True,False,False,False,False,True,True,False,True,True,True,True,False,True,True,True,True,False,True,False,False,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,False,False,True,False,True,False,True,True,False,True,False,True,True,True,True,True,True,True,False,False,False,True,True,False,False,True,False,True,False,True,True,True,False,False,True,True,True,False,True,True,True,True,False,False,True,True,True,False,False,True,False,False,False,False,True,False,True,True,False,True,False,True,False,False,True,True,False,False,False,True,True,True,False,True,False,True,False,True,False,True,True,False,True,True,False,False,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,False,False,False,True,False,False,True,True,True,False,True,False,False,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,True,True,True,True,True,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,False,True,True,True,True,False,False,True,True,False,True,False,True,True,True,False,False,True,False,False,True,True,False,False,True,True,True,True,False,True,True,True,False,False,False,False,False,False,True,True,True,False,True,False,False,True,True,False,False,True,True,True,False,True,False,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,False,False,True,False,False,False,True,False,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,True,False,True,False,False,False,False,False,False,True,True,False,True,True,True,True,True,True,True,False,False,True,True,False,False,True,False,False,True,False,False,False,False,False,True,False,False,True,True,False,False,False,False,True,False,False,False,True,True,True,True,True,False,True,True,False,False,True,False,True,True,True,True,False,True,False,False,True,True,True,True,True,False,False,False,False,False,False,True,True,True,True,True,False,False,False,False,False,False,True,True,True,False,False,True,True,True,False,False,False,True,True,False,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,False,False,False,True,False,False,True,True,True,False,True,True,True,True,False,True,False,False,True,False,True,False,True,False,True,True,False,True,True,True,False,True,True,False,False,True,False,True,True,True,False,False,False,True,True,True,False,False,True,True,False,False,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,False,True,False,True,True,True,False,False,False,True,False,False,False,False,False,False,False,True,True,True,True,True,True,False,True,False,False,True,False,False,True,False,False,True,True,True,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,True,True,True,True,True,True,False,False,True,False,True,True,False,True,True,False,True,False,False,False,True,False,False,True,True,False,False,True,True,True,True,False,False,False,False,True,True,False,False,True,False,True,False,True,False,True,True,False,False,True,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True,False,False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,False,False,True,True,True,False,True,False,False,True,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,True,False,True,True,False,True,False,True,False,False,True,False,False,False,False,True,False,True,True,True,True,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,True,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,True,True,True,False,True,True,True,False,True,False,False,False,False,True,True,False,True,False,False,False,True,False,False,True,False,False,True,False,True,True,True,False,True,False,False,False,True,True,False,False,True,False,False,True,True,True,True,True,True,True,True,False,True,True,True,True,True,False,False,False,False,True,False,True,True,False,True,True,False,True,True,True,True,False,True,True,True,False,False,True,False,True,True,True,False,True,True,True,True,True,False,True,False,False,False,True,True,True,False,True,False,False,False,False,False,True,True,True,False,True,False,False,False,False,True,False,True,False,True,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,False,True,True,False,False,True,False,False,True,True,False,False,False,False,True,True,True,True,True,True,True,False,False,True,True,False,False,True,True,False,False,True,False,True,True,False,True,True,True,False,False,True,True,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,False,False,False,True,False,True,False,True,False,True,False,True,False,True,False,False,True,False,False,False,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,False,True,False,False,False,True,False,False,False,False,True,True,True,True,True,False,True,False,True,True,False,True,True,False,False,False,False,True,True,True,False,True,True,False,True,True,False,False,True,False,False,True,True,True,False,False,True,True,False,True,False,False,False,True,True,False,False,True,True,True,False,True,True,True,False,False,True,False,False,False,False,False,True,True,True,True,True,True,False,False,False,True,False,False,False,True,False,False,False,True,False,True,False,True,False,False,True,True,False,False,False,False,False,True,True,False,True,True,True,True,True,True,False,True,True,True,True,True,True,True,False,True,False,False,False,True,True,False,False,True,False,False,False,False,False,True,False,True,False,True,False,True,False,True,True,True,False,False,False,True,True,False,True,False,True,True,True,False,True,True,True,True,False,True,False,False,True,False,True,True,False,True,True,False,False,False,False,False,False,False,False,True,True,True,True,False,False,False,False,False,False,True,True,False,True,True,False,False,False,True,True,False,False,False,False,True,False,False,True,False,True,True,False,False,False,True,False,True,False,False,True,False,True,False,False,False,False,False,False,False,True,False,False,True,False,False,False,True,True,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,False,False,False,True,True,True,False,False,False,False,True,False,True,True,False,True,False,False,False,True,False,False,False,True,True,True,True,True,False,False,False,False,False,False,True,True,True,True,True,True,True,True,True,True,False,True,False,False,True,True,True,True,True,True,True,False,False,False,False,False,False,False,False,True,False,True,False,False,True,False,True,False,True,True,True,True,False,False,True,False,True,False,True,False,True,False,True,True,True,True,True,True,True,True,False,True,False,True,True,True,True,True,False,False,False,True,True,False,True,False,False,False,False,False,True,True,False,False,False,True,True,True,True,False,False,True,True,False,False,True,False,True,False,False,True,False,True,False,False,True,False,True,True,False,True,False,True,True,False,True,True,True,False,False,True,False,True,True,True,False,False,True,True,False,True,True,False,False,True,False,True,False,True,True,False,False,True,False,False,False,True,True,True,False,True,True,False,False,False,True,False,False,False,False,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,False,True,False,True,True,False,False,False,False,False,True,True,False,True,True,False,False,True,False,True,False,False,False,True,False,False,False,False,True,True,True,False,False,True,True,False,False,True,False,False,False,True,True,False,True,False,False,True,False,True,True,False,True,True,True,True,True,True,False,True,False,True,True,True,False,False,True,False,True,True,True,True,True,False,True,False,True,False,True,True,True,False,True,False,True,False,False,True,False,False,False,False,True,True,True,True,True,False,False,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,False,True,False,False,False,False,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,True,True,True,False,False,False,True,True,True,False,True,True,True,False,True,True,False,True,False,False,True,False,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,False,False,True,False,True,True,True,False,False,False,False,False,True,True,True,False,True,False,False,True,True,False,True,True,True,False,False,False,True,False,True,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,True,False,False,False,True,True,False,True,True,False,True,False,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,True,True,False,True,True,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True,False,True,True,False,False,False,False,True,True,True,True,True,False,False,True,True,False,True,True,True,True,True,True,True,False,False,False,False,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,True,False,True,True,True,False,True,True,True,False,False,False,True,True,True,True,True,False,False,True,True,False,True,True,False,False,False,True,False,False,False,False,True,False,True,False,False,True,True,False,True,True,False,True,False,False,False,True,False,True,True,True,True,False,False,True,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,True,False,True,True,False,False,True,False,True,False,True,False,False,True,True,False,True,True,False,True,False,True,True,True,True,False,True,False,True,False,False,False,False,False,False,False,False,True,False,True,True,True,True,True,False,False,True,True,True,True,True,False,False,False,True,True,False,False,True,True,True,False,False,True,False,False,False,False,True,False,True,False,False,False,True,False,False,False,False,True,True,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,False,True,False,False,False,False,False,False,True,True,False,True,True,True,False,False,True,False,True,False,False,False,True,True,True,False,False,False,False,True,True,False,False,True,False,False,True,True,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,True,False,False,True,True,False,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,True,False,True,True,False,True,True,False,True,False,False,True,False,True,True,True,False,False,True,True,True,True,False,False,False,False,False,True,False,False,False,True,False,True,False,False,False,False,True,True,False,True,False,False,False,True,True,False,False,True,False,True,False,False,True,False,False,True,True,False,True,True,False,True,False,False,False,False,False,True,True,False,False,False,True,False,True,False,False,True,True,False,False,False,True,False,False,True,True,False,False,True,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,True,True,False,True,False,False,True,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,True,False,False,True,False,False,True,False,True,False,True,True,True,False,False,True,False,True,False,True,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,False,False,False,False,True,True,False,True,False,False,True,True,False,False,False,True,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,True,False,True,True,True,True,True,True,False,False,True,True,False,False,False,False,True,True,True,True,False,True,False,True,True,False,False,True,True,False,False,False,False,True,True,True,False,True,False,False,True,False,False,True,False,False,False,False,False,True,True,False,True,True,True,False,False,True,True,True,False,False,True,False,True,True,False,False,False,False,False,True,False,False,True,True,True,True,True,True,False,False,True,True,True,False,False,True,False,True,False,False,True,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,True,False,True,True,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,False,True,True,False,False,False,True,True,True,False,True,False,False,True,True,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,True,True,True,True,True,False,False,True,False,False,True,False,True,False,False,False,False,True,False,False,True,True,True,True,True,True,True,False,True,True,True,False,False,False,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True,False,False,False,False,True,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,True,True,False,True,False,False,True,False,True,False,True,True,True,True,True,False,True,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,False,False,False,False,False,False,False,False,False,True,True,True,False,True,False,False,True,False,False,True,True,False,True,True,False,True,False,False,False,True,True,False,True,True,False,False,True,False,False,False,True,True,True,True,False,True,True,False,True,True,True,False,False,False,True,False,False,True,False,False,True,True,False,False,True,False,False,False,False,False,False,True,False,False,False,False,True,False,False,True,True,True,True,True,False,True,False,False,False,False,False,True,False,False,False,True,False,False,True,False,True,False,True,True,False,True,True,True], dtype = "bool")#candidate|10434|(2912,)|const|bool
call_10433 = func_6254_call(relay.reshape(const_10434.astype('bool'), [13, 16, 14]))
call_10435 = func_6254_call(relay.reshape(const_10434.astype('bool'), [13, 16, 14]))
func_9498_call = mod.get_global_var('func_9498')
func_9502_call = mutated_mod.get_global_var('func_9502')
var_10439 = relay.var("var_10439", dtype = "float64", shape = (1, 126))#candidate|10439|(1, 126)|var|float64
var_10440 = relay.var("var_10440", dtype = "bool", shape = (6, 140))#candidate|10440|(6, 140)|var|bool
call_10438 = relay.TupleGetItem(func_9498_call(relay.reshape(var_10439.astype('float64'), [1, 126]), relay.reshape(var_10440.astype('bool'), [840,]), relay.reshape(const_10425.astype('float32'), [396,]), ), 11)
call_10441 = relay.TupleGetItem(func_9502_call(relay.reshape(var_10439.astype('float64'), [1, 126]), relay.reshape(var_10440.astype('bool'), [840,]), relay.reshape(const_10425.astype('float32'), [396,]), ), 11)
uop_10448 = relay.asin(var_10431.astype('float32')) # shape=(143, 1)
bop_10455 = relay.greater_equal(uop_10448.astype('bool'), relay.reshape(call_10429.astype('bool'), relay.shape_of(uop_10448))) # shape=(143, 1)
bop_10458 = relay.greater_equal(uop_10448.astype('bool'), relay.reshape(call_10432.astype('bool'), relay.shape_of(uop_10448))) # shape=(143, 1)
func_3698_call = mod.get_global_var('func_3698')
func_3700_call = mutated_mod.get_global_var('func_3700')
call_10459 = relay.TupleGetItem(func_3698_call(relay.reshape(var_10440.astype('bool'), [12, 10, 7])), 1)
call_10460 = relay.TupleGetItem(func_3700_call(relay.reshape(var_10440.astype('bool'), [12, 10, 7])), 1)
func_5712_call = mod.get_global_var('func_5712')
func_5717_call = mutated_mod.get_global_var('func_5717')
var_10466 = relay.var("var_10466", dtype = "float64", shape = ())#candidate|10466|()|var|float64
const_10467 = relay.const([-2.823374,-4.403641,5.549192,-0.720095,-5.065574,0.069353,-0.317843,-3.988107,-9.129051,-0.804081,4.783348,-3.472581,4.634651,-5.790377,9.680379,0.816891,0.474791,9.371042,1.491033,8.005453,7.336161,-9.941351,2.527546,5.425548,3.304794,-4.776429,8.566859,-2.065605,-9.692144,5.932492,7.790604,8.187273,-4.061722,8.304583,-7.877770,6.269149,2.878744,2.628461,-4.812835,3.605741,9.836857,-6.104022,-6.658764,2.102559,-7.912613,-8.426952,9.460810,-2.007742,9.520412,-9.960503,8.811710,7.171961,8.791752,3.112974,0.009465,-5.928059,1.940658,4.401326,1.292675,-6.404425,6.490724,2.625652,-0.601263,-9.924707,-1.706323,9.839678,-4.426884,-6.430221,6.982516,9.219731,-7.591323,0.936722,8.220013,-7.376666,-9.276267,-8.147961,1.746959,-2.461871,0.129258,1.068534,5.840242,5.983839,-3.724003,-7.384624,-4.536485,-2.782587,9.591319,-4.034283,7.500897,6.976574,0.932507,0.292421,-9.146828,-2.003414,4.283660,6.452417,-2.347730,-7.724858,-1.403023,-9.150374,8.923745,-3.720525,7.972469,3.340647,1.457929,-0.480017,-7.931975,2.447960,1.928887,-1.635566,-4.049229,-7.731717,4.725996,7.160790,4.313031,-2.643114,-4.924601,8.868018,2.032185,-3.970026,6.465277,6.081891,2.011065,-4.298573,-4.674743,7.034508,-0.280773,1.059539,-2.856480,-3.031737,-2.724330,-6.867720,3.008521,-5.843536,-7.450776,5.307059,4.249590,6.017314,8.884739,-1.611808,6.929499,-3.430120,6.855485,4.408511,-9.075870,1.869211,-1.081308,-9.039420,1.386581,-6.873997,2.721731,2.826159,-1.295300,3.434760,8.610393,2.433112,8.722893,-9.509291,3.998596,6.289154,0.127769,-6.956461,-2.198222,5.654043,-4.963575,-0.358390,2.579479,-1.062135,-0.283584,-9.477932,9.180297,-9.672262,9.447949,0.838684,-7.415017,8.952251,3.113813,2.651855,-9.565450,1.458373,-3.455196,-2.132716,-7.955777,6.712972,4.209778,-7.160893,0.203487,5.060769,8.746963,9.847250,9.082745,-2.615613,8.068286,1.812898,-1.897530,-4.494271,-7.544538,4.112017,0.850860,1.621061,-6.071659,-0.221758,5.741931,-2.621783,-4.324769,-2.754227,-9.186593,0.700060,9.470248,6.078076,4.110122,-1.975140,1.657327,-7.252981,5.617785,6.262222,9.558100,9.014280,9.297856,-9.059765,-0.500436,-6.448496,4.979818,-4.979629,-9.312474,-8.509211,7.659333,3.695219,-1.194189,6.831001,5.248059,7.088277,-9.339926,4.640447,8.891577,-2.246567,0.884356,-8.520169,-5.385605,7.530799,6.808766,-5.681701,-6.802662,5.389379,-5.340255,-6.146609,3.139891,-8.284106,6.759038,1.650957,9.387996,-6.199953,-3.781290,9.952858,3.644022,4.709868,0.314717,0.687969,0.468440,-9.686640,3.777497,-1.223232,5.138564,5.727596,-8.726063,5.266685,-9.457439,-4.010794,-3.534461,4.898058,-1.944754,-0.487952,-5.002025,-0.490488,-5.980285,3.993690,5.888211,-4.912117,5.851239,4.644999,1.598557,1.603965,-1.248066,-8.447422,-9.797821,-9.929274,0.416201,-3.707641,-5.220546,4.370028,2.115689,2.936978,-3.043617,4.599599,5.759140,-3.008778,8.375343,-6.560751,4.332798,6.097419,-7.182331,9.274608,-7.980205,1.855881,-0.756934,-2.487688,-5.746508,-4.275127,2.885519,-7.548281,7.615750,5.333999,-4.399892,-5.690766,1.346321,3.392335,-4.155570,6.047777,-0.153122,4.452927,8.382701,6.788205,5.047967,4.992011,1.458312,1.516570,-5.026001,-1.352840,-0.409872,-7.971947,-6.018859,6.263413,-2.343692,7.401750,-8.262063,7.885851,-4.788245,7.124776,7.027033,6.938288,-6.588127,3.313881,4.761029,9.496325,-3.674733,3.716096,-1.203171,0.179860,4.661678,6.199080,-0.179296,-3.747219,6.867940,-2.464037,-1.894790,-5.870743,9.485475,6.281680,6.338652,-2.566474,-6.048004,-4.632120,7.606228,-0.013358,-7.172823,-7.786539,-1.651200,-7.072372,-8.046340,-3.128219,-3.323284,7.058737,-5.363179,-3.372279,4.561477,-4.241091,4.479949,-8.532336,-8.728987,5.679346,4.095243,5.804949,-3.023963,3.832110,7.630909,1.323303,-3.295096,9.173099,5.047533,-3.201407,-5.753438,2.456484,6.508354,-8.877691,-3.380117,2.940642,0.356342,5.024297,-1.254761,-2.709528,2.741906,0.434075,-6.805004,-9.287661,-8.601200,3.001310,0.767167,-6.186694,-4.055061,8.313441,6.106674,-6.071435,6.803741,-8.269363,5.036830,2.181217,3.044728,-7.675099,1.954606,5.080093,-8.614820,3.657183,0.171113,-4.830174,-9.133514,-0.750700,-9.401231,5.122481,8.582328,7.641873,-7.403152,6.585207,6.490105,-6.979269,-5.174923,0.840476,-5.856462,6.981684,-6.338372,2.452351,6.275196,-6.232871,9.830062,0.666546,-6.708745,0.554704,-1.059878,-1.409530,-4.509966,-4.096279,-8.123357,9.842859,-1.863645,3.818931,0.479184,-0.980869,-9.973717,-1.511551,-9.569088,-8.542720,4.922514,5.564975,-6.557956,3.832884,-0.425320,-0.122165,2.375474,4.521102,-0.561564,0.006042,-2.339246,-5.076978,-0.174308,-1.540601,-8.252470,9.959926,-6.864415,9.110713,-7.350397,6.236197], dtype = "float64")#candidate|10467|(480,)|const|float64
var_10468 = relay.var("var_10468", dtype = "float32", shape = (162,))#candidate|10468|(162,)|var|float32
call_10465 = relay.TupleGetItem(func_5712_call(relay.reshape(var_10466.astype('float64'), []), relay.reshape(const_10467.astype('float64'), [3, 16, 10]), relay.reshape(call_10438.astype('float64'), [6, 144]), relay.reshape(var_10468.astype('float32'), [162,]), ), 1)
call_10469 = relay.TupleGetItem(func_5717_call(relay.reshape(var_10466.astype('float64'), []), relay.reshape(const_10467.astype('float64'), [3, 16, 10]), relay.reshape(call_10438.astype('float64'), [6, 144]), relay.reshape(var_10468.astype('float32'), [162,]), ), 1)
uop_10472 = relay.erf(bop_10455.astype('float64')) # shape=(143, 1)
uop_10474 = relay.erf(bop_10458.astype('float64')) # shape=(143, 1)
bop_10485 = relay.greater(bop_10455.astype('bool'), var_10466.astype('bool')) # shape=(143, 1)
bop_10488 = relay.greater(bop_10458.astype('bool'), var_10466.astype('bool')) # shape=(143, 1)
uop_10495 = relay.atan(uop_10448.astype('float32')) # shape=(143, 1)
func_10162_call = mod.get_global_var('func_10162')
func_10165_call = mutated_mod.get_global_var('func_10165')
const_10511 = relay.const([[2,-4,8,7,5,-7,-2,-4,9,1,-6,-10,7,1,-5,3,-7,-2,8,-2,-7,-8,1,7,-5,-5,-9,5,8,5,1,1,-4,-2,2,5,-2,-8,4,-4,-4,-10,-3,-10,3,4,-3,1,-10,10,-8,1,8,6,7,-1,-8,-3,-7,3,8,3,4,9,-8,4,-3,-9,-6,-3,4,1,6,-4,9,-3,5,-10,-2,3,-7,-8,-3,1,2,10,1,-8,7,2,-9,5,-2,5,4,-6,4,-1,-2,6,-8,10,10,-8,9,-5,6,-2,-6,6,4,1,7,7,-4,-3,-9,-4,10,8,-4,8,2,2,-9,-8,-10,5,10,-9,4,1,-7,-4,10,8,4,6,8,-6,6,-3,4,8,-9,10,-10,-9,-9,4,7,-3,-10,9,-7,-6,-8,3,-5,5,7,9,10,2,5,9,2,2,-1,9,-3,-2,1,2,6,2,-5,-9,-1,2,-1,-7,-3,2,-10,-3,-3,4,2,-2,5,2,-4,-3,-3,2,-8,-6,8,6,-10,-10,3,9,-2,-4,4,5,6,-5,-6,5,-6,6,1,-1,-8,4,-7,-7,-3,-5,8,4,-9,4,-4,9,2,-3,7,3,-6,-9,9,1,-8,6,-8,9,-9,-3,4,2,-1,-6,-10,-4,-6,-7,-10,7,-7,-3,5,-10,-6,5,9,3,-4,-8,10,1,6,10,-10,-3,2,-10,9,9,-7,3,-6,5,7,-6,-7,2,-7,-9,-1,-4,2,10,-3,5,7,-5,-6,3,-6,-10,-6,-6,7,9,-10,5,-6,3,5,-1,-8,5,9,-7,5,-7,2,-3,9,-10,-7,-10,9,-4,1,-9,2,-3,2,-5,7,-7,3,9,3,10,-2,5,-6,-10,-4,6,-2,6,-10,10,-1,8,6,8,5,-1,10,2,5,-3,-10,-5,-1,-6,-10,-8,-3,8,4,-1,4,9,8,-10,-3,1,3,6,7,-4,-10,9,-1,-5,3,-7,7,-10,7,-9,-4,-4,6,-10,-1,9,7,5,7,4,-5,4,6,9,6,4,8,-9,-5,9,-3,7,8,-9,-3,2,3,2,-4,3,-8,-9,2,-5,7,4,2,-4,-3,-5,8,-4,7,-2,-6,-10,1,-5,9,1,3,8,7,6,-6,8,-10,7,-8,-8,-4,-3,8,-10,-7,3,-6,-3,-4,3,-2,4,-3,9,9,-10,-4,10,10,-8,-10,-4,3,-7,6,7,-1,10,-1,9,-6,3,-9,-3,2,3,4,8,5,-4,-5,1,-9,4,-1,10,-10,-9,-7,-8,-4,10,-10,-5,4,-10,-8,9,-5,9,-3,-5,-1,2,7,-6,-4,-6,5,-1,-1,-9,3,8,8,4,-6,4,3,5,7,8,-10,-6,-8,-5,10,-9,4,1,-5,-5,3,-10,7,-4,-7,-6,9,-3,2,7,3,-7,3,9,4,-1,-3,-5,6,-5,-4,-1,4,1,1,-8,-3,-1,2,8,-6,-4,10,9,9,-9,6,7,4,-6,5,3,-8,8,-6,7,-5,-1,10,-9,6,3,9,-2,5,10,-1,-2,9,2,-6,7,1,6,-2,2,4,9,-3,-6,8,-10,1,1,-4,5,-3,-1,2,8,2,-1,-5,-8,3,1,-2,-2,5,-2,6,6,2,4,5,-8,-3,-3,-1,-1,7,-6,2,-3,-1,3,2,9,-9,8,6,-2,6,1,8,-4,3,3,9,-10,1,-2,-5,9,-3,-9,-4,1,-6,-9,-4,9,-4,3,-8,-8,8,-4,-10,-10,-9,-3,10,2,6,-2,4,-10,-6,6,5,5,-1,-10,-1,5,9,-10,1,7,-3,10,10,8,2,-2,-7,2,-5,10,-3,5,-2,-1,6,2,6,-7,-3,-4,8,-2,4,-4,8,-6,-6,3,5,10,-3,-1,4,5,4,2,7,8,10,10,-3,-1,7,-6,9,4,-8,-8,6,10,5,3,-6,3,4,-5,10,-7,-9,9,-10,-1,9,-1,-5,4,-4,1,-9,-9,-8,1,10,4,2,-9,-8,1,2,-2,-4,8,-5,-2,-5,-9,-5,10],[-8,-5,10,3,4,5,5,-2,8,-10,1,9,-3,9,-1,-1,5,-9,2,3,5,4,9,-2,-8,-10,-6,-4,-9,9,2,-9,8,4,-2,-5,-6,9,-5,-2,5,1,-5,2,-6,6,-1,-6,4,8,-6,-3,2,-8,6,1,4,-5,-6,4,8,-1,4,-7,-7,4,-7,-6,10,-7,5,-10,-9,9,9,-7,-1,5,6,-2,6,6,5,-4,5,-3,-1,-1,-5,-6,-4,-1,-1,-10,8,-2,8,-8,10,-7,-5,-7,-3,-5,-9,-3,5,-7,2,-5,-9,-5,-5,-1,-6,9,-1,6,-5,10,-3,6,-9,-6,10,1,10,-6,10,-9,-6,-6,7,8,-2,-5,-3,4,-5,5,4,5,-2,9,8,8,8,-10,-5,-8,-1,5,5,-8,-10,6,-8,7,1,4,6,3,6,-1,-6,-2,-2,-2,6,7,-4,-9,-3,-4,2,4,-2,2,-4,10,1,-6,-1,-10,-10,-3,10,-7,-8,-9,-1,-10,2,2,6,6,6,-10,2,-3,7,-7,8,9,-6,-8,-1,-1,-2,-1,-5,-6,10,-7,6,-7,6,9,9,-3,6,4,-2,2,-10,-2,9,7,6,4,-5,-4,-6,-8,10,-1,-3,-4,2,8,-7,8,-10,5,-10,-7,-1,-10,3,1,-9,8,9,-8,-7,2,9,-2,-4,5,8,-3,-5,8,-2,9,-3,-5,10,1,10,-5,-3,5,6,3,4,-6,8,-4,3,2,-4,-6,10,6,-3,6,10,5,-3,-1,-6,-5,1,7,-7,-7,5,7,-3,5,4,1,-5,9,5,-7,6,-5,5,10,10,3,5,3,3,-3,1,8,-2,-4,-6,10,-4,3,-9,-1,2,-8,-6,-4,-1,3,-5,-8,9,-8,4,8,-4,-9,-4,6,6,5,-5,8,-8,-7,-3,1,-6,6,-6,-10,-7,-5,-9,9,5,7,2,5,6,4,7,-1,4,-5,-4,-3,3,-2,-9,10,-2,3,2,-4,1,8,-3,3,8,8,-10,-5,-8,-7,-7,-2,-4,2,4,4,4,-5,5,-4,3,-7,2,-8,-8,-1,4,3,-8,-3,1,-10,-1,1,3,1,9,1,-9,-4,-7,-1,10,-10,8,-3,-3,5,-7,2,-4,-8,-10,-4,9,7,5,-7,-3,-3,10,-2,-8,9,-7,-7,-3,-4,3,3,8,-10,-7,9,-5,10,10,-10,-1,6,-9,9,-10,-4,-10,7,-6,-4,5,2,-8,5,6,-8,2,5,9,-3,4,1,4,-6,4,-5,3,-7,2,9,-7,3,1,3,1,-8,-3,10,5,-10,-6,-8,-4,10,-8,2,-5,7,2,-5,-3,-9,-10,-6,7,-7,-2,-1,-1,2,1,-5,8,2,1,4,-10,2,2,-8,5,1,10,4,7,1,10,4,-1,10,6,5,9,-10,5,-9,3,6,3,7,7,-8,7,5,-10,7,10,-4,9,-1,1,-3,-1,-10,-10,-6,4,-4,-8,8,-5,-4,8,6,-1,2,-7,8,5,-4,-6,1,-4,2,3,10,6,-5,-3,2,7,7,8,-4,7,5,8,-3,3,6,7,6,-1,6,3,7,-1,-6,4,-9,9,4,1,2,5,10,8,-5,-8,-3,8,-2,6,7,9,-3,-9,-8,6,-4,1,-5,1,-6,-3,-1,10,-2,-3,-8,-3,3,-10,2,-2,-7,10,10,3,2,4,7,-7,2,-7,2,-1,-2,5,-7,10,-8,7,4,5,-6,-9,4,-1,8,7,8,7,1,5,9,-1,8,6,-7,-7,-1,-5,2,9,6,2,-6,-5,10,-4,-5,-5,-2,-2,1,4,-6,7,7,-10,4,6,-10,6,10,7,4,6,-5,6,10,10,-7,7,-2,6,10,7,-10,10,-4,5,2,-3,4,5,-7,1,1,-9,-9,-1,6,1,-5,-6,-9,-7,4,8,-9,-1,7,4,2,-2,-8,-1,5,10,10,-6,-9,-10,5,9,10,-2,-4,6,10,8,-3,2,-9,-5,-8,-2,8,-10,-9,-6,-10,7,-7,-1,-2,-6,-8,-2,-1],[-9,-2,8,2,-10,8,1,4,-2,-2,-7,4,9,2,-10,-8,3,-2,7,-10,7,3,-6,8,8,-10,4,10,5,-5,-4,8,3,10,-3,9,10,10,10,1,7,5,-7,-5,7,-9,-4,-10,-8,9,3,-3,-1,-9,10,9,3,-9,8,-3,5,-8,1,-8,-10,-10,4,-6,-6,-7,4,4,-1,8,-8,-4,6,-3,-10,8,7,-3,-3,7,-3,-8,10,6,6,1,-8,-8,-9,-3,-2,-8,-9,2,-1,5,-5,3,-4,7,7,-3,-4,-9,-2,3,3,4,2,8,-7,9,4,9,1,8,-5,2,10,4,4,-7,-9,-3,-9,6,1,-9,-5,3,-4,5,1,-9,-1,-4,-8,-3,4,-8,6,10,-9,-4,-7,2,9,-1,7,1,10,-4,-10,7,-3,-8,1,6,-9,4,-7,-1,8,-7,1,2,5,2,-2,-9,6,-6,7,6,-2,6,-9,-8,-9,1,-2,3,-8,5,4,7,-3,-6,4,-10,2,-8,3,5,10,1,-8,1,9,-8,-2,-4,9,-9,4,1,-5,7,6,1,-8,10,-9,4,9,-3,-10,-7,-1,-1,-6,-10,-3,1,7,-5,-6,-4,6,-5,3,-7,6,-9,-2,3,5,1,8,-5,-5,1,5,-8,-5,-7,2,-9,-8,7,-1,10,-2,1,-4,-5,9,2,-3,-7,5,5,8,6,-4,-7,-3,-10,7,-5,2,-10,7,-6,-4,1,7,-9,-1,10,-7,-2,-4,-7,6,10,3,-8,3,3,7,9,1,6,2,-9,4,1,-4,9,-8,5,-8,-4,-6,-10,-10,-4,6,2,9,7,3,-1,6,-6,-8,6,3,-9,-6,2,6,8,8,-2,-3,10,8,-2,1,9,-8,-5,6,2,1,-9,-1,-2,6,8,2,-5,9,-5,7,10,-10,6,1,7,1,-2,2,1,-8,7,-7,2,-4,-8,10,4,-5,3,8,9,-5,-2,-4,5,4,-4,6,8,-3,-1,-4,-1,7,6,-6,-7,-7,8,-5,-5,-4,-1,3,2,-6,8,-10,-1,-7,-4,-4,-5,-1,-4,5,5,-6,-2,8,6,-9,-5,5,5,5,-6,8,1,2,6,-3,-9,-9,-10,6,-10,2,3,-1,1,6,6,7,-5,-3,10,-4,-6,1,10,4,2,5,-7,-4,4,-6,-5,-8,-5,3,-6,4,2,8,3,-3,-1,-10,5,-5,-3,-9,-5,9,7,-7,3,-7,-7,8,-8,-4,-1,7,8,7,4,-10,-5,1,2,-7,9,9,-10,5,10,-8,6,7,7,5,-9,2,-5,6,-1,2,8,6,-8,7,-2,9,10,2,-7,1,-4,-10,6,-6,-8,6,8,3,5,-6,-4,-5,-8,-4,-7,-2,5,-10,5,-7,4,10,-7,2,2,-1,10,3,-4,-4,9,4,8,-7,9,8,9,-7,-1,-8,-6,1,4,5,-2,-1,-7,-7,8,-7,-9,-2,3,3,-10,-6,2,4,5,6,-10,-8,-1,-3,-10,7,5,8,-1,-1,3,-9,7,3,-3,-9,7,10,-4,-8,-3,-6,6,-6,4,-10,-5,6,-10,-3,-9,6,2,3,-8,2,5,2,3,-10,5,6,7,-1,-10,-10,7,-2,-1,-6,-7,2,8,5,2,-10,3,7,7,-9,-10,-3,-2,-7,3,1,2,4,-9,-3,6,8,-9,-1,2,-1,-8,1,-3,-2,2,8,9,7,-3,-1,-6,-10,5,-1,-3,9,-1,1,1,-10,-9,10,-10,-7,9,-4,8,-8,-7,-10,-3,2,-1,6,8,-4,4,-6,1,9,-3,3,-7,4,3,-4,5,8,9,-8,4,4,8,-4,3,-8,-6,-8,5,-7,-6,-3,-7,6,9,-2,8,2,-6,-4,2,5,-3,3,5,-6,-10,-3,-4,-2,-3,-7,-8,4,7,-5,9,7,5,2,9,-2,-1,-6,3,9,10,-6,6,4,-9,-2,-1,10,6,-7,-2,-4,5,7,5,6,3,-4,4,-2,-9,1,3,7,7,-4,4,-3,5,-8,7,6,8,9,-9,6,5],[-1,1,8,3,-9,10,-7,2,-5,-1,-7,2,2,-6,3,-6,-2,2,4,-3,-2,3,-10,-7,1,8,9,-5,5,-7,-5,-3,-9,10,-2,-6,-8,6,-3,-2,2,-6,4,-10,-3,9,2,-8,9,-4,-10,7,-9,-5,7,1,-1,-2,8,-4,-1,-10,7,3,3,8,8,-3,-8,3,6,-9,-3,-2,3,2,2,-8,-10,-6,-8,10,10,3,10,7,10,-4,5,3,-5,5,-9,-8,-3,3,9,-5,7,-8,6,4,1,8,-8,-7,8,-10,-4,5,3,9,3,2,4,4,7,-5,-8,6,5,-8,-5,9,7,9,2,-3,-1,-5,-6,6,-9,-4,5,-2,7,-3,-8,-4,-6,6,-10,-3,5,8,6,-9,-5,1,-4,2,3,-4,8,6,10,2,-5,10,4,5,4,-7,4,-10,-1,2,8,4,5,-7,-6,-4,5,-2,4,1,9,6,5,4,8,9,3,1,-3,-2,1,-9,3,-5,7,4,1,-1,-8,2,2,-4,-5,4,7,-7,5,-5,7,3,6,-2,-9,-3,10,5,-9,1,-5,-9,3,3,2,-4,7,-5,-7,10,-1,-5,10,-7,8,-2,4,-9,9,-5,-7,-2,-8,-7,-5,3,10,1,7,-1,-7,-1,-4,8,-10,6,3,4,-4,-8,-8,9,10,-9,9,5,-5,-6,7,-4,-8,6,6,-5,-1,-3,6,6,-1,5,7,5,6,-2,-7,10,5,-9,6,-5,-8,5,-10,2,-7,9,-6,-7,6,-3,-6,-10,-7,-3,-2,-1,7,-4,6,-8,2,-7,4,1,3,-2,-5,1,-1,6,-3,6,2,8,-8,10,-4,8,-1,7,-3,5,1,-1,-2,-8,5,-6,-3,-4,1,-3,-1,2,-10,-7,7,-2,-2,3,-1,9,-4,-4,9,10,-3,4,3,-5,-4,7,-8,2,-3,2,-5,-1,-5,-7,-2,4,-9,-9,-4,-9,-9,-2,7,-7,-8,-4,1,1,8,-4,-5,8,-9,-10,3,1,-8,-1,6,5,10,-6,-5,-8,-5,7,-3,5,2,-4,7,-9,10,-9,-9,-10,-6,-9,-3,5,-1,9,-7,-5,4,-6,-5,-5,6,-1,10,3,8,-8,2,1,6,-7,-8,4,2,-10,-6,3,-9,-6,-8,5,-4,8,-8,9,-3,-9,-1,-1,-4,1,8,-1,-8,5,7,-3,5,-6,2,-9,4,-6,-10,9,9,-3,1,3,-10,-7,-10,-7,-2,8,-8,9,-4,8,-1,9,6,7,5,-9,8,-3,6,3,-10,-2,-7,-2,-5,4,-5,5,4,-9,2,7,5,8,9,9,-4,8,1,2,-10,1,-9,7,8,6,7,2,1,-3,-5,10,5,-9,-9,2,9,-7,2,6,3,2,3,-9,-7,-7,-7,10,-8,-8,-3,-8,-6,3,-10,-7,-8,10,6,10,-6,-8,5,-4,-8,-1,5,-3,6,-8,-2,-9,8,4,1,-9,-10,-9,-4,9,7,3,3,2,2,8,-7,-6,6,-8,3,-5,4,-7,9,10,-8,-8,1,-8,2,-8,-3,-5,-4,8,-2,-8,7,5,-1,-1,-8,-8,1,-3,-4,-5,3,7,-4,-5,-8,-5,10,10,-4,10,10,-2,-6,5,4,-8,-1,-6,-10,3,6,2,9,5,2,7,5,-6,-2,2,2,-5,-7,-8,-4,4,3,3,-9,-5,-6,-5,-2,4,4,10,-8,-7,-5,-3,-7,8,2,-2,-2,1,1,-10,9,-7,-2,8,-1,6,-1,-7,-5,-8,6,9,9,7,8,-1,1,-1,-4,-4,6,-2,-8,-5,6,1,3,4,-10,10,-8,6,-10,2,-7,-10,6,-8,-3,-7,-6,4,8,1,-9,-7,-5,-6,-1,-8,7,-1,-2,-7,-2,5,-5,-7,-7,3,3,-2,-5,3,7,4,9,-6,4,7,10,-4,-3,9,3,-5,-2,-5,5,2,-9,-5,2,1,-5,-10,10,-9,6,10,-10,6,-2,-10,6,9,10,6,-5,6,3,4,-1,-4,-1,-6,1,-4,2,-2,-7,4,4,9,-6,7]], dtype = "uint16")#candidate|10511|(4, 780)|const|uint16
call_10510 = relay.TupleGetItem(func_10162_call(relay.reshape(const_10511.astype('uint16'), [3120,]), relay.reshape(const_10467.astype('float64'), [480,]), ), 6)
call_10512 = relay.TupleGetItem(func_10165_call(relay.reshape(const_10511.astype('uint16'), [3120,]), relay.reshape(const_10467.astype('float64'), [480,]), ), 6)
bop_10519 = relay.logical_or(bop_10455.astype('bool'), relay.reshape(uop_10472.astype('bool'), relay.shape_of(bop_10455))) # shape=(143, 1)
bop_10522 = relay.logical_or(bop_10458.astype('bool'), relay.reshape(uop_10474.astype('bool'), relay.shape_of(bop_10458))) # shape=(143, 1)
func_3767_call = mod.get_global_var('func_3767')
func_3769_call = mutated_mod.get_global_var('func_3769')
call_10524 = func_3767_call(relay.reshape(uop_10448.astype('float32'), [11, 13, 1]))
call_10525 = func_3767_call(relay.reshape(uop_10448.astype('float32'), [11, 13, 1]))
output = relay.Tuple([call_10403,call_10423,var_10424,const_10425,const_10430,call_10433,const_10434,call_10438,var_10439,var_10440,call_10459,call_10465,const_10467,var_10468,bop_10485,uop_10495,call_10510,const_10511,bop_10519,call_10524,])
output2 = relay.Tuple([call_10404,call_10426,var_10424,const_10425,const_10430,call_10435,const_10434,call_10441,var_10439,var_10440,call_10460,call_10469,const_10467,var_10468,bop_10488,uop_10495,call_10512,const_10511,bop_10522,call_10525,])
func_10526 = relay.Function([var_10424,var_10431,var_10439,var_10440,var_10466,var_10468,], output)
mod['func_10526'] = func_10526
mod = relay.transform.InferType()(mod)
mutated_mod['func_10526'] = func_10526
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10526_call = mutated_mod.get_global_var('func_10526')
var_10528 = relay.var("var_10528", dtype = "uint64", shape = (1344,))#candidate|10528|(1344,)|var|uint64
var_10529 = relay.var("var_10529", dtype = "float32", shape = (143, 1))#candidate|10529|(143, 1)|var|float32
var_10530 = relay.var("var_10530", dtype = "float64", shape = (1, 126))#candidate|10530|(1, 126)|var|float64
var_10531 = relay.var("var_10531", dtype = "bool", shape = (6, 140))#candidate|10531|(6, 140)|var|bool
var_10532 = relay.var("var_10532", dtype = "float64", shape = ())#candidate|10532|()|var|float64
var_10533 = relay.var("var_10533", dtype = "float32", shape = (162,))#candidate|10533|(162,)|var|float32
call_10527 = func_10526_call(var_10528,var_10529,var_10530,var_10531,var_10532,var_10533,)
output = call_10527
func_10534 = relay.Function([var_10528,var_10529,var_10530,var_10531,var_10532,var_10533,], output)
mutated_mod['func_10534'] = func_10534
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9889_call = mod.get_global_var('func_9889')
func_9891_call = mutated_mod.get_global_var('func_9891')
call_10536 = func_9889_call()
call_10537 = func_9889_call()
var_10546 = relay.var("var_10546", dtype = "bool", shape = (15, 5, 13))#candidate|10546|(15, 5, 13)|var|bool
bop_10547 = relay.logical_or(call_10536.astype('bool'), var_10546.astype('bool')) # shape=(15, 5, 13)
bop_10550 = relay.logical_or(call_10537.astype('bool'), var_10546.astype('bool')) # shape=(15, 5, 13)
output = bop_10547
output2 = bop_10550
func_10564 = relay.Function([var_10546,], output)
mod['func_10564'] = func_10564
mod = relay.transform.InferType()(mod)
mutated_mod['func_10564'] = func_10564
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10565 = relay.var("var_10565", dtype = "bool", shape = (15, 5, 13))#candidate|10565|(15, 5, 13)|var|bool
func_10564_call = mutated_mod.get_global_var('func_10564')
call_10566 = func_10564_call(var_10565)
output = call_10566
func_10567 = relay.Function([var_10565], output)
mutated_mod['func_10567'] = func_10567
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10177_call = mod.get_global_var('func_10177')
func_10179_call = mutated_mod.get_global_var('func_10179')
call_10623 = relay.TupleGetItem(func_10177_call(), 1)
call_10624 = relay.TupleGetItem(func_10179_call(), 1)
func_4354_call = mod.get_global_var('func_4354')
func_4359_call = mutated_mod.get_global_var('func_4359')
const_10628 = relay.const([8.326255,9.051881,-1.765068,8.360218,-1.641688,-9.505906,-2.117734,-2.285506], dtype = "float32")#candidate|10628|(8,)|const|float32
var_10629 = relay.var("var_10629", dtype = "float32", shape = (90,))#candidate|10629|(90,)|var|float32
const_10630 = relay.const([[5.563540,-9.109773],[4.197522,0.029074],[7.609139,3.712666],[0.620137,6.903149],[-8.105973,-0.220629],[-5.338290,-9.111297],[8.762101,-9.186453],[-0.753175,-4.310860],[0.954227,6.206735],[-7.570174,0.736691],[-2.556188,6.824236],[6.855207,2.047296],[-5.739018,-7.316711],[-0.157215,-1.203450],[-5.827537,1.298102],[1.741876,-8.100731],[-8.662160,4.446313],[-6.174150,0.675309],[0.039050,-1.453280],[4.514191,-4.309418],[-3.533077,4.287156],[-3.114362,-1.295051],[-9.866004,2.792996],[-2.144828,-3.154483],[1.169100,3.619425],[4.048394,0.467269],[2.889404,2.014372],[7.046659,7.557645],[-6.068770,6.415132],[-3.847461,3.454474],[2.415090,-2.619429],[-0.353487,4.543943],[-2.573241,4.331497],[0.083624,8.440581],[5.541444,4.159996],[-9.686210,-8.554973],[9.432124,4.607866],[3.552242,9.610348],[-6.135687,-5.000928],[-2.163852,-6.616647],[6.837332,-3.873735],[-6.696872,2.286605],[-8.833439,3.120366],[0.221980,5.750811],[6.488864,4.830103],[1.849065,9.153735],[-5.842970,-2.165686],[4.454458,-4.139905],[9.687586,2.382786],[-6.613373,1.191818],[-9.209602,2.867137],[-4.004011,-4.338834],[-0.543352,-7.390989],[-1.157498,1.215010],[-1.536462,-7.442681],[-7.859085,-2.568190],[1.725641,-5.173530],[-3.820551,8.927428],[-4.653381,2.412430],[6.839953,-7.799197],[5.488595,-3.343294],[-4.292161,-1.093627],[6.351720,9.617615],[5.195860,8.576887],[7.746627,-5.372198],[1.888051,-3.362540],[4.829210,-1.868535],[-4.335464,-9.932394],[-2.754750,2.559756],[-6.127186,1.396323],[-6.966388,4.902027],[-3.287802,5.382395],[-4.858459,7.352644],[8.099134,0.189841],[2.574447,0.625468],[-4.709519,7.625325],[-5.191305,-6.047995],[7.280597,2.306473],[-7.597823,8.907646],[3.112833,-7.809131],[2.486494,-5.721431],[-0.924379,6.487102],[6.391981,2.074086],[-7.431415,-1.112409],[3.203392,3.280195],[-3.440610,7.998910],[1.457962,2.430181],[7.234862,9.225752],[-1.475535,6.780932],[7.009644,-6.468619],[5.837938,9.175971],[4.328694,9.437271],[-9.402551,3.311072],[6.485873,8.785489],[7.964034,7.984076],[-2.912036,0.368698],[-7.481362,5.162266],[0.559193,6.960377],[1.383114,-4.357402],[-2.216241,-0.613455],[-9.401546,-6.047256],[-9.311614,0.348683],[-1.326222,-9.143431],[0.872728,5.807547],[-8.066957,0.591331],[2.986464,-7.502602],[3.855111,8.436914],[-1.502695,-3.971562],[5.164802,-1.182801],[-4.806010,3.986123],[2.952895,-0.585832],[-0.690814,-0.399519],[-3.912221,-2.742751],[-6.523667,6.143854],[-1.820982,-0.655717],[-8.641439,3.853396],[3.434915,6.174892],[3.938717,-6.679680],[-3.392469,8.768251],[5.526832,8.638079],[-5.419560,8.178658],[-6.912038,-9.817983],[1.010210,-8.265510],[-7.807304,1.344050],[0.409553,9.166503],[6.925346,7.889057],[-7.837528,-4.920099],[7.063460,-8.503143],[-0.387205,-4.916714],[-8.807300,3.775167],[3.499859,8.544850],[0.407077,0.362086],[1.397265,-1.064847],[6.455340,-8.953990],[-5.273006,8.618694],[-8.165566,3.364886],[9.006880,5.591053],[1.530707,2.823403],[-4.755562,-4.949178],[3.471165,4.720593],[-2.698675,0.913603],[7.702788,-4.869277],[6.442602,2.917821],[2.896390,-8.317453],[6.896921,-8.980721],[-2.063678,4.858666],[-2.881483,-4.677215],[-7.802356,-6.514617],[1.768477,-6.307005],[2.424528,5.347959],[-0.835663,-2.381228],[9.263348,-0.858063],[-0.194754,4.280593],[-0.647457,-6.693328],[-5.571668,-1.569504],[-4.907621,-8.234943],[-6.003355,-8.042383],[0.430712,-5.857696],[5.501156,7.516699],[3.077481,2.033850],[-8.673680,-9.105474],[1.517404,5.311149],[-9.758922,-9.628213],[-9.705525,-5.340148],[6.655531,-7.704351],[-9.002195,-6.496431],[2.871639,6.928026],[7.664555,-4.612346],[4.991908,-8.615668],[3.107886,7.572669],[9.081740,-7.326627],[-6.187571,6.086117],[-8.861579,-6.350745],[-2.236550,-3.043683],[-5.264040,7.259549],[-0.560836,7.463357],[-7.735452,-8.059353],[6.125762,5.896950],[-9.407178,-7.532739],[8.040116,-0.961022],[7.916094,-3.540443],[-2.988711,4.028512],[-0.944233,-8.835041],[-5.344089,8.543079],[-1.322465,8.861017],[3.237451,-0.503248],[-5.983495,-1.057653],[-5.227505,4.968327],[7.272578,-0.914805],[-7.136959,-2.228708],[-2.398109,6.663880],[-1.627145,7.959321],[6.679665,-6.671156],[-6.810658,-1.555700],[1.160710,-3.483426],[7.663498,4.854844],[6.780519,-6.536366],[4.154681,4.549155],[-4.419114,-9.258944],[3.117428,7.585202],[-0.563954,3.405082],[-8.783014,-7.348541],[-0.234969,-1.334328],[-4.983231,-0.773236],[5.109144,-3.902724],[0.610249,-2.394716],[-6.845985,-1.974815],[-2.041904,-7.628056],[2.931707,2.337091],[6.882239,1.627924],[-1.495890,-4.383492],[5.640121,7.150098],[1.182272,9.695349],[8.842514,-4.435496],[-4.730826,4.234558],[-2.020071,-7.648989],[3.549194,-8.872732],[6.226976,-9.563081],[7.421619,-9.490474],[9.662054,5.356228],[3.594958,2.392534],[-7.292034,9.776989],[-6.755224,0.411886],[-9.656888,-5.772172],[-9.402247,8.684512],[-9.481700,6.459237],[-7.763113,-9.368360],[9.260276,-9.077296],[-7.927229,3.711229],[-7.924340,2.197633],[4.816556,0.338614],[-4.175404,4.366876],[-3.669196,-1.476423],[-6.735106,-2.190872],[-8.311224,-0.052118],[-0.189222,-0.308440],[-6.047509,5.251535],[-3.435588,3.911090],[-0.417660,-8.963277],[-5.532668,0.857718],[-0.962719,3.107355],[5.370952,5.323901],[-0.898323,-5.894555],[-2.798033,5.007208],[-7.549642,9.076578],[-7.196433,7.643981],[-4.902001,0.596029],[8.988604,8.397436],[0.010258,6.900814],[2.896371,-3.754509],[-4.983271,-6.096844],[6.681809,-7.617516],[1.940054,8.092921],[-8.751136,-4.304474],[-4.979227,-2.222736],[-6.473568,2.669274],[-8.886374,-6.793793],[3.122676,-3.008203],[7.844203,-5.615456],[-0.770265,2.448728],[8.794859,7.540412],[6.078994,-3.446604],[-1.572413,5.929937],[-6.847149,-4.737193],[7.918588,-5.976071],[7.754329,9.117537],[-9.403674,8.541409],[-6.980045,-1.145141],[7.057842,7.782488],[4.327772,-9.575505],[-6.966004,-6.677693],[-8.218107,-3.807298],[7.508583,-1.140868],[9.840897,-9.915156],[-5.235787,-9.426393],[-1.555958,-2.969414],[5.286754,-2.177281],[3.842409,-5.493139],[-0.244090,-3.694232],[1.285923,9.533446],[-8.610192,8.636905],[5.552532,1.647964],[1.226163,-0.092061],[-6.951600,-6.384772],[-4.988923,-3.419998],[4.600360,-4.602298],[1.024089,8.343014],[1.436186,8.060771],[-3.667896,4.471415],[-5.494092,2.775324],[-5.640794,4.573689],[-0.098245,-0.024030],[-8.891866,-1.687540],[1.213391,-9.476838],[-3.713946,5.373978],[-3.443101,3.995781],[0.989187,-5.240413],[4.191708,-5.956574],[2.463130,-1.049352],[5.139198,-4.934470],[2.790702,5.087567],[3.913622,5.703744],[4.479446,5.319324],[2.370625,7.717376],[6.025102,9.872249],[2.624838,4.097762],[0.355240,3.883963],[-5.190028,8.175445],[-0.006453,3.555480],[-6.468378,4.704231],[1.492165,8.681383],[0.714764,-0.073185],[-4.166327,2.833572],[1.445097,-2.392319],[-0.858239,2.575984],[1.940449,-6.389575],[1.877717,-7.960271],[-7.114347,-6.653377],[-7.781157,1.374143],[-3.878547,2.356476],[6.518436,-1.667360],[3.204260,4.882061],[-0.326724,-3.643706],[6.776355,-8.584725],[-4.885363,-2.001045],[-5.199263,1.214262],[-6.534514,5.562234],[-6.151588,7.817787],[5.949149,-3.342576],[-5.462721,9.681845],[-2.555239,4.138503],[-3.244759,-9.982433],[-2.942277,-5.830646],[6.572532,2.156701],[-6.879623,-9.929323],[7.745896,-9.332622],[-9.156903,3.361876],[-9.837100,3.190576],[8.179366,0.405255],[-2.169340,-9.084908],[-3.519515,-3.232757],[-9.835925,-3.111304],[-8.694176,6.872086],[-3.186604,-9.738637],[-7.889611,-5.024636],[-2.814764,6.097984],[-9.617410,-8.385270],[1.534317,3.709452],[3.756562,4.998580],[7.722413,-5.117911],[9.432311,-4.812732],[0.136746,-3.223064],[-2.661422,-3.693924],[-8.984853,-3.162327],[-1.404955,-8.002141],[-7.372134,-4.882658],[1.357419,1.213791],[9.298452,-7.303057],[-7.167525,-4.278283],[7.649359,4.756681],[3.170025,6.782065],[-8.621960,-1.142891],[-2.600204,-7.071124],[-6.420078,-3.696700],[-1.383325,1.171501],[3.253459,-4.390839],[-2.406426,8.127429],[1.909773,4.533453],[-2.783126,4.418145],[1.607374,-7.570435],[-4.601513,-5.174420],[1.154640,-9.157983],[-0.742301,9.968024],[0.579983,6.338910],[-4.143009,2.957274],[-4.679139,6.060921],[1.435856,1.442742],[-9.397065,-5.428914],[-1.925251,-6.936096],[3.617113,2.982781],[-3.813528,0.182232],[7.262227,5.479622],[0.907868,2.347963],[9.473439,5.872521],[9.832449,5.409129],[-4.225034,-9.978579],[-6.939678,-3.896861],[5.209767,-9.577170],[-0.251325,9.014754],[-2.275707,1.195673],[-9.730865,9.591004],[8.584645,-5.081408],[0.086448,7.695379],[-1.331779,-4.286344],[-7.413216,-4.766138],[2.335282,9.220011],[5.451967,1.062224],[9.270412,4.582099],[1.042804,8.635091],[1.458086,-1.861412],[-9.713934,-8.167190],[8.825685,0.653493],[2.414138,-1.532918],[-9.410688,-2.935101],[-1.041786,-2.528053],[9.011902,2.218159],[-7.640194,1.537703],[1.075469,4.433209],[1.779202,-7.688146],[-2.830666,-6.566055],[7.652956,-7.474857],[-6.161299,9.983085],[-7.724458,-1.810107],[-9.193704,9.309693],[2.608693,-8.770114],[-7.273448,-3.472123],[-3.673379,-3.514633],[-5.468368,-4.635310],[9.241345,-1.586757],[-8.178151,0.662260],[1.157956,-0.848372],[5.367176,-8.729953],[-1.807974,9.056648],[-7.729656,3.672161],[-4.094595,-6.220726],[-7.405901,7.554112],[7.667902,-4.202718],[0.160445,9.536107],[5.419105,-3.866209],[8.927290,3.628672],[-8.950165,-1.115532],[-9.688431,7.976935]], dtype = "float64")#candidate|10630|(432, 2)|const|float64
const_10631 = relay.const([[8,-7,-1,-10,4,-2,4,-3],[-5,9,-3,3,-7,9,-1,-3],[10,-5,-7,-7,-8,-3,8,9],[3,1,-3,1,5,4,-10,6],[-6,-10,8,3,6,-10,4,-2],[-9,4,-7,-4,7,-10,-6,5],[-9,-7,4,-3,-8,7,-6,8],[3,-9,-8,-5,-2,2,-1,-10],[-3,7,6,8,-7,-3,-3,8],[6,-6,-2,-9,-6,-2,9,-7],[-6,-8,6,-6,10,-6,4,-10],[-3,5,9,-8,7,2,-2,8],[5,2,-1,-4,10,5,6,-6],[-2,-2,7,6,2,1,8,1],[5,-5,-4,9,-1,-9,10,3],[6,-4,7,-10,9,2,1,1],[7,-6,4,-6,-10,1,-10,-3],[-2,-3,9,8,5,7,3,5],[3,4,7,-4,5,-6,-10,1],[-9,2,8,-8,-2,-10,-3,9],[-6,-1,1,7,-1,-10,5,-4],[8,2,10,8,5,8,-2,-1],[-10,-1,-10,-6,3,-3,-9,-3],[-4,2,5,5,9,7,10,2],[-2,10,3,-2,-4,-5,3,2],[2,-3,-6,-8,-2,8,3,-2],[3,7,-10,2,-4,-10,6,-6],[6,7,6,6,-10,-9,-2,-10],[-5,-1,-5,-10,2,8,2,6],[1,-9,-1,-6,7,8,8,-8],[-2,-7,-2,8,7,-1,9,-6],[-5,9,9,-8,5,-10,3,-6],[-5,-4,2,-2,-9,7,-2,-10],[9,2,-9,6,8,4,2,-6],[5,-7,-3,7,3,10,8,-4],[-1,6,-1,-3,8,10,-9,10],[-6,2,-7,-1,-4,8,3,10],[-8,-6,-1,-8,8,3,-4,-3],[10,-10,-6,-7,-4,-4,-5,-4],[3,4,9,-4,-9,6,10,2],[7,-6,4,5,8,-8,-6,-10],[2,-2,5,10,3,-5,-5,4],[2,-7,5,8,-3,-10,7,-7],[-5,2,7,4,-7,-4,10,6],[-7,-8,-9,8,1,1,8,-10],[9,3,-3,-5,-7,-5,-4,-7],[-8,-5,-3,10,-9,-3,1,1],[5,-3,2,1,6,6,-8,10],[10,-2,-8,-9,3,5,-7,-3],[10,-1,3,-4,7,-8,-3,-1],[-4,9,5,-9,10,-4,2,-9],[3,-7,-3,5,10,-5,4,9],[-10,1,4,6,6,3,7,-2],[-4,-9,1,5,9,-4,7,-2],[2,2,3,-2,-10,-9,-6,9],[2,-7,4,-4,-3,8,2,8],[-3,-1,-10,7,7,7,9,-3],[4,3,1,10,6,5,8,-5],[4,7,-7,2,-10,-7,-4,9],[-10,7,10,7,-5,-7,6,6],[-5,3,-7,6,-5,8,5,9],[-10,7,4,-7,6,4,5,1],[-4,4,9,-1,-6,4,-6,5],[7,-5,5,2,7,5,-7,-4],[9,4,-1,-2,6,6,-9,8],[-4,9,-5,3,6,-6,2,-5],[9,1,-4,4,-9,2,3,5],[2,-7,4,1,-5,6,6,-10],[-1,-4,4,-7,-10,10,-8,9],[1,-1,5,9,-8,9,4,-10],[2,10,-1,8,5,-5,5,6],[-1,2,-8,7,-4,3,-8,5],[-4,6,3,9,4,-4,7,6],[7,-3,9,-5,8,2,-1,-6],[3,2,-5,-5,-2,-9,-7,8],[-5,10,-3,-10,5,7,-1,10],[-6,-10,-3,2,-2,-6,-10,-4],[5,10,3,9,1,1,-10,6],[3,-8,10,2,3,-4,4,9],[-6,-7,10,-4,-3,-5,-5,-10],[-8,5,-10,-2,6,-5,6,10],[-4,10,5,5,8,-5,-8,3],[5,5,-6,-8,5,-3,-7,2],[1,5,5,-6,-7,-5,-7,-2],[6,-8,4,-5,9,-1,-2,-10],[-4,-1,-3,1,-1,7,-5,-10],[6,-5,6,-1,-9,-3,-5,6],[-8,-8,7,10,-6,-7,4,5],[-7,-2,8,8,-4,-10,4,8],[-4,-2,6,10,9,-4,-5,4],[-7,7,-8,5,-7,-10,-1,-2],[5,-10,6,-2,7,7,-4,6],[-5,-9,7,6,-10,-5,-7,8],[1,-4,7,-1,1,-6,6,8],[-6,-6,-2,-7,1,1,-10,-1],[-6,9,10,-8,5,5,8,7],[-2,-7,5,5,9,-5,7,-10],[-8,8,9,8,2,7,9,-3],[7,3,7,10,-6,-5,-1,-7],[3,7,-3,-8,-8,-4,9,6],[-1,-1,-7,-4,-8,-5,3,-5],[9,-10,7,-7,3,2,1,9],[8,-2,-3,-9,5,-9,8,-7],[-8,-9,-5,9,-8,-1,2,-4],[-1,7,-3,6,-10,8,-9,-7],[4,-1,2,6,-5,-2,-8,-7],[-1,5,-9,-1,6,-9,6,1],[1,8,5,7,2,7,6,-9],[6,-2,-4,8,-4,-4,-4,-10],[-8,2,2,-5,9,-4,-6,1],[-4,-1,-7,8,-5,-2,7,5],[8,-3,7,7,-2,10,-2,1],[5,6,-10,-3,-7,7,-7,-3],[10,-7,4,10,3,-3,10,-2],[-6,8,3,5,6,-5,-2,8],[-4,8,7,3,7,-4,10,3],[4,-3,3,-6,10,10,10,6],[2,-2,-2,-8,1,-8,-8,8],[-2,-9,-9,-4,8,2,3,-2],[2,4,8,-2,4,9,-3,-5],[8,-10,1,-7,-9,7,-7,-8],[2,2,4,9,4,-1,3,-1],[-10,-7,6,-1,4,-10,-8,9],[-8,2,-5,-1,6,-7,8,9],[1,-10,-3,6,3,-8,2,-3],[-8,-4,5,-3,7,-10,-10,-2],[9,7,-5,9,7,-8,-7,-1],[5,10,-3,1,-5,-3,-3,5],[9,6,-5,3,-4,-2,4,-6],[3,9,10,-3,2,-9,5,9],[-6,-9,9,2,4,4,1,7],[5,9,-7,-10,10,-5,3,-10],[-8,9,-2,-3,-7,4,-5,4],[-8,-5,3,7,-5,10,-8,-7],[9,6,-9,10,5,5,-7,-2],[-10,-2,-2,-8,-3,5,9,10],[9,1,-6,-3,-7,3,-5,-6],[1,10,9,8,-6,-3,-6,7],[10,3,-1,7,3,1,-4,-3],[-7,6,-10,-5,-1,5,3,3],[10,-9,2,-10,-7,-3,7,4],[8,9,-6,8,7,5,3,-3],[-5,7,-8,2,-7,-6,10,10],[10,8,6,-5,9,-10,9,-9],[-6,2,3,-1,9,-7,-7,-9],[-6,7,2,4,-2,-6,-10,7],[-9,-1,-3,5,2,-2,-10,-8],[-7,10,-4,3,-1,-7,3,-8],[-3,7,5,-1,-5,-6,4,-3],[6,4,-8,-8,-5,-1,-10,-3],[9,-2,-3,1,-4,4,8,10],[-9,-6,1,-7,10,7,8,-3],[-9,3,-8,9,-9,1,-10,-3],[-5,-9,2,5,5,-2,-1,10],[-9,-3,7,-8,-4,-6,-10,-5],[-8,3,10,4,9,8,2,-1],[3,8,5,6,9,-6,-1,-5],[-5,10,4,3,-1,-3,-1,4],[8,3,1,3,-3,8,9,-6],[-2,4,-2,9,-7,6,9,-1],[-3,-8,-8,-4,-9,-7,-6,7],[-9,3,-7,5,-9,4,-1,4],[-1,-6,-3,-10,-3,-5,9,-4],[-4,-10,-1,6,5,7,7,8],[4,-9,-6,-1,9,7,-7,-8],[10,-1,4,1,9,5,-7,-8],[-9,-10,-7,4,-7,3,2,7],[9,2,-7,-3,1,4,1,1],[-8,-6,1,2,1,-4,-7,4],[8,9,9,4,2,-9,10,4],[2,5,-10,-3,-2,-5,-7,5],[6,-3,-8,6,4,4,7,2],[-7,-3,3,9,3,2,-2,-7],[3,-3,6,-2,7,4,3,1],[4,9,10,-3,-2,4,6,-2],[3,1,-7,2,10,-5,-4,4],[-2,7,1,-6,-7,-6,-10,-3],[6,-4,8,4,-2,2,7,5],[-9,3,4,-2,8,5,6,2],[-1,-2,2,8,7,1,-6,-7],[-1,-4,10,10,-3,9,-3,1],[9,5,-1,5,-1,-4,-3,1],[-1,-2,2,-2,-7,4,4,-5],[9,4,3,8,4,-2,-4,2],[9,-10,-6,-5,5,-4,-5,2],[9,5,-3,-5,-6,-7,-9,10],[5,-10,-4,3,-4,-8,5,4],[6,-3,4,-10,-4,-5,-6,-10],[4,-1,5,-8,2,-10,6,9],[7,2,10,2,-9,-7,-1,-5],[7,5,-1,-10,1,-9,8,-8],[10,6,4,-5,4,-7,9,2],[-9,7,-2,-4,-1,-7,-1,-3],[8,2,-7,4,-7,10,4,-1],[9,-4,6,-1,1,5,-6,2],[8,-4,10,-10,-1,-4,-2,-8],[2,-1,2,-5,-1,-6,9,-9],[-3,-5,2,-10,6,8,9,-9],[7,-1,-2,-3,-7,8,-6,-4],[-3,-10,4,8,5,8,-1,7],[6,7,6,-1,-7,-10,7,2],[3,-6,5,9,-9,4,-5,-8],[-8,-9,4,-7,10,-4,1,8],[1,3,8,-5,-8,-9,-9,3],[3,-2,-3,-6,8,1,-9,5],[5,-5,1,-1,9,1,-10,-5],[-8,8,8,6,7,7,-10,-7],[2,7,-3,4,2,-10,-2,5],[-2,1,8,-7,-7,-2,-9,-10],[-10,6,-9,5,-6,6,-2,5],[-4,5,6,-1,-8,-9,-2,8],[8,-7,-6,2,1,-7,-7,-8],[-3,-6,-5,-1,10,10,1,-5],[-3,7,9,1,-7,3,-5,6],[-4,-6,-9,-3,-8,-2,2,7],[-2,-7,6,-10,-8,-7,-2,10],[7,-4,-4,-5,10,1,-5,-7],[7,-7,-10,3,8,1,-5,5],[-7,-6,5,-5,-1,7,9,4],[-6,6,-7,-5,1,6,-7,5],[1,-6,7,1,10,-5,-2,4],[9,5,10,-1,-6,-4,10,-6],[5,7,-5,-9,6,5,-2,-5],[10,-4,-10,1,4,8,7,4],[9,-3,8,3,-7,-2,-9,9],[-7,-10,-2,2,6,-9,-7,6],[-4,2,2,-8,4,-7,8,-2],[1,-1,-3,-8,-4,-2,1,9],[-7,-9,-6,10,-6,-3,-5,9],[-9,8,3,10,4,-2,-2,-10],[2,7,-4,-6,-6,-7,5,6],[8,5,9,-1,-7,-7,4,7],[-5,-1,-3,-3,7,-9,-8,6],[8,-7,5,1,-3,-3,4,-10],[-6,9,-10,-10,2,9,6,-8],[-7,3,-5,5,3,-4,8,7],[6,5,8,-3,7,-2,9,7],[-5,7,-7,7,-10,8,-6,6],[-10,-8,-8,-9,-6,8,-1,1],[-9,5,3,-5,-6,3,-7,3],[-9,6,-5,4,7,7,9,5],[8,-4,-3,-2,-4,-10,5,10],[8,3,2,5,9,9,-1,6],[4,8,10,8,-6,-7,-4,7],[3,-5,9,-4,3,-8,6,2],[5,9,2,1,8,1,5,5],[-9,-4,-2,7,-2,10,9,9],[-3,-1,-8,3,2,-9,1,6],[-4,-6,-1,-2,8,-2,-3,10],[3,-9,6,6,-7,7,-9,-7],[5,9,-8,8,2,-10,-3,9],[4,7,-1,7,10,-5,9,1],[-7,8,3,1,6,-8,-4,2],[-6,-7,2,8,-8,-10,-7,10],[3,-1,-4,10,4,8,7,-5],[1,-4,5,-4,5,1,6,7],[-9,-6,1,-2,3,2,-10,-5],[-10,-5,-8,-10,-4,4,4,1],[-10,-4,-2,5,-6,7,5,-10],[-10,-9,-3,-5,4,9,1,-9],[5,-1,2,4,2,-8,5,3],[1,8,-5,-1,2,-4,9,5],[1,-1,-3,-10,8,3,6,-1],[-8,-10,-9,1,-2,4,10,-7],[7,-3,5,-5,-3,-6,-4,5],[5,-4,-10,-6,10,6,-1,-3],[1,7,9,-8,-10,-3,-3,-6],[-6,3,-3,-10,10,5,1,8],[-3,-7,-6,-7,3,-1,-10,5],[7,-4,8,5,2,-9,-9,-4],[-3,9,7,-6,-7,7,3,-3],[-9,-3,1,-2,10,-5,-8,3],[9,1,-7,-8,-5,2,-6,-2],[-2,-9,3,-5,5,-1,-8,-4],[-8,6,-3,10,9,10,8,8],[5,10,-3,10,-4,10,-7,10],[-1,-1,-1,6,4,3,10,-2],[3,4,9,-1,-4,7,-7,-9],[3,5,-2,4,-7,-7,-2,-1],[-1,8,-8,4,-2,-5,8,-7]], dtype = "uint32")#candidate|10631|(280, 8)|const|uint32
call_10627 = relay.TupleGetItem(func_4354_call(relay.reshape(const_10628.astype('float32'), [8, 1, 1]), relay.reshape(var_10629.astype('float32'), [90,]), relay.reshape(const_10630.astype('float64'), [12, 72]), relay.reshape(const_10631.astype('uint32'), [8, 14, 20]), ), 4)
call_10632 = relay.TupleGetItem(func_4359_call(relay.reshape(const_10628.astype('float32'), [8, 1, 1]), relay.reshape(var_10629.astype('float32'), [90,]), relay.reshape(const_10630.astype('float64'), [12, 72]), relay.reshape(const_10631.astype('uint32'), [8, 14, 20]), ), 4)
output = relay.Tuple([call_10623,call_10627,const_10628,var_10629,const_10630,const_10631,])
output2 = relay.Tuple([call_10624,call_10632,const_10628,var_10629,const_10630,const_10631,])
func_10637 = relay.Function([var_10629,], output)
mod['func_10637'] = func_10637
mod = relay.transform.InferType()(mod)
mutated_mod['func_10637'] = func_10637
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10638 = relay.var("var_10638", dtype = "float32", shape = (90,))#candidate|10638|(90,)|var|float32
func_10637_call = mutated_mod.get_global_var('func_10637')
call_10639 = func_10637_call(var_10638)
output = call_10639
func_10640 = relay.Function([var_10638], output)
mutated_mod['func_10640'] = func_10640
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9577_call = mod.get_global_var('func_9577')
func_9578_call = mutated_mod.get_global_var('func_9578')
call_10650 = func_9577_call()
call_10651 = func_9577_call()
func_10637_call = mod.get_global_var('func_10637')
func_10640_call = mutated_mod.get_global_var('func_10640')
var_10666 = relay.var("var_10666", dtype = "float32", shape = (90,))#candidate|10666|(90,)|var|float32
call_10665 = relay.TupleGetItem(func_10637_call(relay.reshape(var_10666.astype('float32'), [90,])), 2)
call_10667 = relay.TupleGetItem(func_10640_call(relay.reshape(var_10666.astype('float32'), [90,])), 2)
func_9919_call = mod.get_global_var('func_9919')
func_9926_call = mutated_mod.get_global_var('func_9926')
const_10677 = relay.const([-5,-4,8,-8,6,-7,7,5,-10,-9,5,-7,-5,-3,5,8,10,-8,4,3,7,2,-9,-10,-9,4,-10,6,-9,10,5,-5,3,-5,-1,-8,8,4,6,-4,7,-10,-10,2,7,5,-3,-7,4,-3,10,-5,9,4,5,2,-8,7,-9,9,-5,6,-5,-2,6,-5,-5,3,-10,-1,6,7,4,-4,-4,-8,9,5,-10,-4,2,-1,10,3,10,6,-7,-10,6,-5,10,9,1,5,3,-6,-1,-4,-10,2,10,7,-1,-8,2,-9,-9,2,-4,-1,-8,-4,3,-9,-6,4,1,3,10,-8,7,7,-8,5,-7,1,-3,-4,4,1,6,-7,-9,-8,-4,-1,6,6,-6,5,9,-9,-10,1,6,-7,-7,1,5,-3,8,9,-4,7,7,-3,6,1,7,-4,-1,-7,-5,4,-8,8,-3,-7,3,-6,5,-9,3,1,-9,5,5,-10,-10,10,-1,1,7,-10,-3,-1,6,-1,9,3,6,9,9,2,2,-5,-2,7,-6,10,-3,-10,-10,-10,-1,-8,-10,-8,4,6,4,9,10,7,-2,7,-7,-4,6,-7,-8,3,10,7,-1,-10,-6,3,6,6,-7,3,10,3,5,4,-7,-3,10,2], dtype = "uint16")#candidate|10677|(240,)|const|uint16
const_10678 = relay.const([-6,-2,1,-9,6,-9,-1,6,6,6,-5,9,-9,-8,-8,-3,-5,7,3,-10,3,-7,8,-8,3,4,-6,-5,-10,6,-5,-6,5,6,-9,-8,6,7,-9,6,-1,-9,1,-4,9,1,-2,-4,-8,7,-7,-2,-2,-6,-7,2,-3,7,-7,7,2,9,4,-10,-6,-2,4,5,-4,-5,-3,9,8,-2,-8,2,-10,3,-6,8,2,4,-5,-1,10,-10,-5,-1,-6,9,-5,-3,3,8,-8,1,8,7,-6,4,6,-1,4,5,8,-3,6,7,-3,7,3,1,-3,7,-7,-5,7,-6,-9,-3,5,-9,4,-10,-1,8,7,7,10,-1,-7,1,-4,6,-6,-10,7,-1,5,7,10,-4,-7,-9,7,3,6,-1,-9,-4,8,-7,5,-7,1,10,1,10,-5,4,-7,-7,1,3,-4,6,-5,6,-2,2,-9,7,-4,-8,4,-10,-9,3,-4,-9,-5,10,-7,-2,1,2,-6,-2,4,1,3,8,-8,-1,9,-3,-4,-6,1,-10,2,4,1,-10,7,-4,3,-2,2,5,1,8,1,6,4,4,-8,-5,6,5,-5,2,8,8,7,-3,-1,4,7,-4,6,6,-8,-4,-4,-6,5,-8,-3,-6,2,-9,-2,-7,-2,9,-10,-1,-4,1,-3,9,-6,-2,-3,-9,8,8,-10,-9,7,-10,1,-3,8,6,-2,1,4,-9,2,2,6,9,6,-10,-6,-7,-4,3,-6,-3,-4,6,-10,4,3,-3,7,-6,-2,5,-9,-4,-5,-4,5,-9,4,8,-10,-5,10,1,1,-2,6,-10,10,-7,-10,5,-10,6,-8,7,7,-1,1,-6,-1,-5,4,3,9,8,-1,-5,-5,-5,5,3,8,-9,-3,-3,-3,-3,-6,-10,6,-4,-3,8,-10,-3,6,9,9,5,4,8,6,4,-8,7,-4,-1,-10,7,3,-8,-7,7,4,-7,7,6,7,-7,6,-8,-7,-9,9,8,9,5,3,-1,-3,7,-4,-5,-5,-5,-8,-3,-4,-1,-10,9,7,3,-5,8,3,-7,-10,-9,9,-6,-8,2,-1,9,4,-1,1,10,10,-5,5,1,8,-2,3,4,9,5,10,1,1,4,8,9,4,-9,10,6,-10,-5,-6,-6,4,7,5,-10,2,8,10,5,3,-6,-6,1,9,-8,-4,4,-8,-3,-8,9,7,-9,-7,4,8,3,10,-9,9,-8,6,10,-2,6,6,-10,-3,1,-3,1,4,-5,-9,5,-6,10,4,3,-5,-6,4,-3,4,8,8,9,3,-8,10,10,-8,-7,2,-10,1,-5,1,2,3,-5,9,-3,-7,7,-6,-7,-9,7,-6,-8,1,10,5,-1,3,-7,7,-5,3,-6,-8,3,7,1,-5,10,6,1,-3,-8,-6,9,9,2,5,-2,10,2,-5,1,-4,7,-1,1,-1,-10,-8,-2,2,-10,3,10,9,-1,5,-2,4,-10,10,-1,-2,9,2,8,7,-1,-2,-4,-4,-3,10,7,7,-9,9,-9,10,1,-9,-6,-7,-7,-7,-9,-7,-10,-10,-10,-6,-5,8,-6,-1,-10,7,7,4,-4,4,-4,8,9,-2,-6,-8,1,-6,-4,-5,-7,2,-6,-7,-9,-4,3,4,-1,-1,-5,1,-4,-5,5,-5,-2,-8,5,-9,-6,5,6,-1,8,-5,10,-8,-2,-5,3,-1,8,3,5,-10,-6,2,6,10,-9,4,-10,6,-5,1,2,1,1,5,-6,1,-10,4,8,2,9,-9,-10,3,5,-3,5,-8,10,4,-8,7,-8,8,5,5,5,4,-8,-1,8,9,10,2,1,-3,1,-1,-3,4,8,-3,-3,8,-4,6,5,-7,-5,2,-3,8,-6,-2,7,-6,-7,-8,6,4,7,1,-7,4,5,9,2,3,-6,7,-1,8,4,10,4,-1,6,-10,10,7,1,-7,-3,10,-5,5,-2,6,1,-5,2,5,-9,10,-10,-7,3,3,-4,5,2,7,-5,9,1,-10,-1,10,1,-7,7,3,8,5,-10,3,-10,-3,7,10,5,2,4,-6,-2,-5,9,-8,-3,10,3,5,-8,-10,-10,3,-10,-3,-9,-7,-2,-1,-2,9,-3,-9,4,2,4,-7,2,-2,-8,-5,4,9,8,-8,-10,6,-5,10,10,-3,3,9,-3,6,-5,-8,4,-6,7,3,-8,1,-3,-7,4,-5,2,-2,4,8,-10,-8,-6,-9,6,-2,-8,-2,-5,-3,-8,8,4,-7,-10,8,3,-8,-8,-4,8,3,-9,10,3,-7,-4,3,4,6,6,8,10,10,3,-4,-10,-9,-1,6,-2,7,5,6,9,-7,-8,8,-9,7,2,4,-10,2,-4,7,1,-4,1,8,-5,-9,-8,-10,5,2,1,-1,1,-2,2,-10,1,-1,-5,-4,-4,3,10,-10,5,2,7,6,-7,-2,-8,-3,-10,5,3,-8,-4,8,8,-9,-1,-6,-4,-6,-1,-3,-5,-9,-1,10,4,3,-9,-2,-9,8,1,8,-8,-8,5,7,-8,-4,-1,-4,-2,-4,8,-8,4,8,-3,3,-1,8,2,7,-4,-10,-5,1,-1,-8,9,-7,5,-10,-10,-10,4,10,-5,-8,9,-3,2,2,7,4,10,-2,-5,-3,-7,-9,-3,9,-7,7,4,-10,6,-10,4,10,5,8,6,8,-6,-6,-7,9,1,2,7,-10,6,5,-5,-3,-7,-10,-4,-6,-7,-3,7,-10,7,-4,4,7,-5,9,7,10,-4,-9,-1,3,7,-4,-8,-5,-6,9,-2,-1,9,8,-3,2,-9,8,-5,-9,8,1,6,1,2,2,-8,-2,3,3,-8,-5,-5,8,5,4,-9,-1,10,8,4,7,-5,9,1,-5,-6,-6,3,-10,-9,4,-9,4,-7,-1,-4,-4,-9,6,4,9,-10,-10,-6,5,-5,5,6,-5,-2,5,-9,3,-2,8,-10,6,9,-7,8,-2,1,-9,7,-9,2,-4,-10,9,-8,8,3,10,-1,8,-6,-4,-8,-5,7,-3,-7,2,-6,9,-9,1,-2,5,-7,5,-3,-2,2,-7,1,-9,-9,-6,-3,8,-4,1,2,-3,1,2,-7,-7,4,-7,6,-3,-9,9,-6,4,-7,-9,-3,6,10,-7,4,5,8,1,10,-8,-5,-2,3,2,-1,9,-1,5,2,-8,6,4,-7,-7,-1,7,9,6,5,1,6,7,4,-1,-4,5,-4,3,6,-8,2,-2,7,4,-5,-6,-7,-2,-7,-9,4,10,-3,-9,2,7,-7,8,8,-3,-8,-5,2,-6,-10,9,-9,2,-3,-2,-10,-10,5,-8,9,-7,2,2,9,4,-2,-3,-3,4,6,10,2,-5,-7,1,6,-3,-10,-2,-2,10,9,-7,-8,8,-5,-2,-6,6,-1,9,5,-6,6,5,6,4,-9,-8,3,1,-4,-7,-1,6,-1,9,-7,-2,7,-3,-5,8,9,10,-2,2,-5,6,1,10,-7,8,8,-8,-9,5,1,7,9,-4,8,7,-2,-1,-7,4,2,9,-4,-2,-2,-7,2,5,-1,2,-4,5,6,-8,9,-8,-6,10,7,-10,-10,-2,-1,4,7,-1,9,-6,4,-9,-7,-5,-7,2,-8,3,-9,2,3,2,-4,-8,1,-9,9,9,6,-9,-10,6,-3,-9,3,4,9,-7,-3,7,10,-10,-3,-3,6,3,4,5,6,2,7,-7,-4,-9,-9,2,2,8,-2,6,4,-5,7,-6,5,-4,3,-7,8,-5,-2,-6,-10,10,5,9,5,10,3,-7,-3,1,4,5,3,9,-7,-10,1,-9,7,-8,4,-8,-1,5,8,9,5,-6,-4,-6,1,-9,7,9,-10,10,-4,-10,5,-10,-3,-7,-5,-7,-7,1,8,-2,-2,2,-9,-3,-3,7,-8,3,8,-8,-2,-1,7,-8,-3,-3,-3,-6,-9,3,-2,2,-1,-3,-2,9,7,4,3,-10,-4,3,10,-8,-10,3,-5,-4,-9,-5,-8,-6,6,1,-3,6,-6,7,-8,-8,-9,-10,5,1,3,-4,10,-7,1,-6,9,-4,-10,-4,7,7,-3,10,-3,4,7,-6,-10,-5,-1,5,-2,-6,3,1,9,6,4,-2,7,10,3,-4,9,2,-10,-9,-10,-7,2,-3,-5,-5,-4,-6,10,-6,-4,-6,10,2,-6,6,-5,-1,8,-1,10,4,2,5,-7,-7,-1,-5,-10,3,-7,4,-2,2,8,5,-9,3,8,-7,1,6,-8,3,8,-6,6,1,-4,10,-6,1,1,-9,2,-1,-10,4,-10,8,4,-4,-3,-10,8,10,-4,-9,4,3,-4,8,-3,-3,-9,10,-4,-6,9,-5,-8,1,5,5,6,5,4,5,4,-10,-9,-6,7,10,-10,3,10,-9,1,-6,2,8,-7,-3,1,5,6,-2,5,-8,-7,-4,4,3,7,-6,-5,5,7,2,-3,-7,10,1,1,2,-2,-4,8,-4,1,4,-4,5,-10,1,-5,4,8,-1,-7,-7,-9,-5,-2,-2,9,-8,-6,4,1,-7,4,2,-9,4,-5,-4,4,1,-10,-1,-8,2,2,-8,-1,-1,-8,-8,-5,-4,-5,-7,8,7,1,-7,-4,3,-4,1,7,10,-3,4,-3,2,-7,-7,7,4,-1,-8,-9,1,3,-7,-1,10,9,6,4,-2,-7,7,4,-3,-2,9,4,-3,1,-9,-8,10,5,-1,-2,-2,-1,-2,-10,-9,-7,-4,-8,8,-8,4,8,-5,-10,1,-9,-2,2,7,-10,-4,3,-6,6,2,10,2,-10,2,3,-1,-8,5,6,2,8,-10,8,4,1,8,10,1,6,9,7,-6,-2,5,-4,-3,-6,3,-1,6,1,-3,-5,-10,-8,-4,8,9,2,-7,2,-9,4,-2,9,7,3,10,4,3,-10,6,9,-9,3,7,5,-6,6,-4,-6,-4,10,-1,5,-8,-2,-4,-2,-10,-8,-2,3,-3,-4,3,-9,2,-10,-6,8,-1,-10,9,-9,-9,-6,-1,7,-7,5,4,6,5,-9,-2,-7,-5,-9,9,5,-6,-6,-1,4,-5,-7,-1,5,10,9,10,4,-10,-2,-10,6,-10,-4,-5,-9,5,1,1,-6,-9,3,-8,9,-10,9,-9,-8,7,-10,-10,5,6,-5,-2,-10,-5,-4,-9,-3,3,-9,-6,3,-10,-8,-1,10,-10,8,8,-5,-10,6,-10,-8,-10,7,-5,9,-1,-8,1,4,2,1,10,3,-5,-1,7,-7,-6,2,5,7,-10,2,2,1,10,4,-8,-1,-5,7,2,6,10,-9,1,3,-2,1,1,-10,3,-2,-10,-5,7,-6,8,7,1,-3,6,2,-10,-2,4,-3,-5,-2,-10,-3,-9,-4,-2,-6,-8,5,-4,-2,1,-7,-7,4,5,-10,-2,-2,1,-9,8,5,-6,-10,9,-7,9,9,-6,9,-8,-8,1,3,-3,-4,-10,7,-1,-6,-2,-5,7,-6,-7,-6,-3,7,-2,5,-5,-8,-9,-2,-3,-3,1,5,-1,3,-5,3,3,3,10,-1,-6,1,4,-8,-2,-2,-8,-5,8,-7,8,5,1,7,6,8,8,9,-5,-9,-7,-1,7,-6,-5,10,-4,-3,2,6,-9,-2,-4,-7,8,-5,8,-2,4,-2,2,10,-8,10,-4,-10,3,-8,-2,7,4,5,-9,-8,4,10,3,-3,-5,-3,-1,2,2,2,-8,4,-10,3,-5,-2,1,4,-4,-7,9,-9,-2,4,-10,9,-5,9,1,5,-1,4,1,-5,4,3,3,-4,3,-8,6,3,10,7,2,-5,10,-4,-7,5,3,5,-10,-1,-10,-7,6,-10,-2,8,-10,8,4,1,4,-3,4,3,8,6,-2,-4,5,-9,-10,2,1,10,-3,-7,4,2,-9,-1,-10,2,-2,-2,-10,-5,-7,-10,4,-6,-10,-3,-4,-4,1,-7,-2,3,-7,2,-8,-6,1,-5,-8,3,-5,-4,-1,-1,4,3,9,2,3,-1,-1,7,-7,-1,3,-4,-10,7,-7,-6,-8,-6,7,3,2,-2,-3,6,-1,-6,3,-5,8,-6,2,-3,5,7,7,-3,-6,-3,3,-10,8,-9,5,6,7,8,8,-2,-3,4,-9,-9,1,5,-3,8,-10,-2,2,8,-4,1,-8,-2,1,10,-2,-6,-1,6,-7,-5,3,4,7,-7,8,10,2,-8,-9,-5,-7,3,4,-2,-6,-8,4,6,-5,4,-2,1,8,7,6,-8,2,1,-5,-7,-1,1,8,-9,-10,-6,7,8,-7,-3,-4,-7,6,-2,-2,1,-3,-9,10,4,2,4,-1,5,5,2,10,-6,9,7,-7,7,1,-3,-5,-10,-10,6,-5,9,10,-1,-3,9,7,5,6,-5,9,9,6,-1,-4,-8,-10,10,8,-2,-10,-5,7,-2,10,-2,-7,3,10,2,4,2,-6,-4,6,7,7,5,-10,10,6,10,-5,-9,-10,-9,-10,10,5,-2,2,-9,9,-6,2,-2,-8,-4,-9,5,5,-6,7,10,-10,5,2,-2,7,-4,1,-7,-10,1,-7,9,-2,-6,-8,1,1,-1,-9,5,-8,4,3,-10,4,2,-10,3,5,3,10,-3,-1,3,7,7,-5,7,-2,-2,-10,10,-5,-6,-4,4,-6,-4,-3,-8,-5,8,-3,1,-3,4,7,-5,-8,-5,-9,-8,-7,-1,-1,1,-3,-7,3,4,3,1,-3,-4,-7,-5,7,-3,-6,-5,5,-3,4,-5,-10,-4,8,-4,-2,-3,-9,-7,-2,3,7,4,-5,-10,-9,-9,-5,-3,-10,5,-9,-3,9,-7,10,-10,9,7,-3,4,-2,-2,-7,2,-3,-9,7,1,2,10,7,7,4,-1,-2,8,1,1,-4,-5,-9,-9,6,4,-7,8,-2,1,10,4,10,-6,-5,-7,9,8,-6,-4,-7,10,1,-8,-2,3,-1,-4,3,10,-6,-7,-10,-2,-9,9,-3,10,7,-10,-4,-3,-10,-8,6,10,-8,6,9,-4,-4,-6,4,-2,-3,1,5,-6,2,9,3,-1,-6,9,-5,-8,8,6,4,-6,-10,6,-3,-4,6,5,5,-10,-3,10,2,4,6,5,-8,6,-9,7,5,-9,5,2,-9,4,-9,-9,4,2,-3,-9,7,-1,8,-10,-9,5,4,7,10,-7,-6,2,10,-2,-1,4,-6,4,-4,8,3,9,-3,-3,8,1,-4,5,-7,7,-8,5,9,-8,4,-8,9,6,-6,4,9,-9,8,-9,1,-2,10,-2,5,-3,6,-7,9,-7,-4,-10,-8,-8,-4,-1,4,5,9,2,-7,-6,-6,-8,-6,-1,-7,3,-1,2,-7,-10,8,-2,5,4,1,-5,-1,-4,-9,9,-6,-3,-5,-2,-2,1,10,-7,-1,6,-1,9,-3,10,7,-2,-4,-2,2,1,-6,3,8,-10,-3,1,7,-5,-2,-6,6,4,3,-1,9,10,-4,5,3,1,4,-1,1,-3,2,-5,-7,2,-6,6,5,-5,9,3,5,-9,5,2,-5,-2,-6,5,8,3,10,-1,5,6,-6,-5,2,-2,3,6,8,-5,4,8,-9,8,-10,8,5,-1,-2,1,-2,2,6,-5,7,9,-2,-5,-5,2,-2,-5,4,-7,2,-4,-3,-10,-6,3,5,-5,8,9,3,-3,4,1,1,8,-7,8,9,-1,2,-6,-8,5,-1,1,8,8,-9,-3,8,-6,2,-7,1,-5,3,-2,-2,-9,3,-8,2,-4,4,3,-9,-7,2,-1,3,8,7,7,8,4,-3,-6,-10,-8,-10,-6,-2,7,8,-7,-3,-7,6,2,9,7,10,-1,-4,7,-1,-10,-8,7,6,-9,8,1,-9,7,-1,-1,8,3,10,5,-3,-4,-5,-10,-4,1,-4,-3,-7,10,7,-1,3,6,-6,-7,-7,1,-4,2,-10,8,-7,-7,-3,4,-10,4,1,-9,10,-5,8,8,6,10,3,2,-10,4,-7,5,3,3,9,10,-9,-8,-2,-1,-6,-6,10,9,-6,7,-1,-3,2,-10,-9,10,-7,6,-5,-10,9,-10,-4,1,1,-5,8,9,-3,1,-1,-9,1,8,4,7,-5,-2,-5,3,9,-8,-8,-7,6,-5,10,5,-9,9,2,7,-2,-8,-10,-3,-9,-5,10,9,1,2,8,-7,2,-2,-10,4,8,9,3,8,-4,10,-9,9,3,-3,1,-9,6,9,-2,9,5,1,-9,1,-4,-7,-9,2,2,-4], dtype = "uint16")#candidate|10678|(3120,)|const|uint16
const_10679 = relay.const(5.593074, dtype = "float64")#candidate|10679|()|const|float64
const_10680 = relay.const([[-1.441372,-6.869660,-5.523860,3.042052,2.710210,4.122490,5.640953,9.323454,1.684817,7.917018,-0.426705,3.885929],[9.860043,-4.242906,-1.776632,-7.976267,-1.692771,0.593804,8.217388,3.701325,-0.233714,1.735564,-8.905864,-6.999232],[4.386622,5.442124,4.974687,6.103978,-0.954127,-3.737248,8.686968,5.169827,-2.410274,-5.324162,5.269759,-3.832367],[-9.084066,-9.694553,-4.516631,5.609723,-4.719320,8.945131,1.995945,9.241799,-0.786194,-6.611022,-5.155461,-1.812597],[-8.416504,-0.483787,-8.890655,6.855928,5.614068,-1.185795,3.353154,7.614688,-8.401366,5.140449,0.011592,5.609653],[-3.678537,7.401216,6.305641,2.838183,-0.840068,-5.079245,-8.863107,-1.164959,0.757977,-2.484162,-9.130327,-6.644775],[-8.604728,-0.817445,-6.377675,-8.719543,1.432971,-5.058116,4.991923,-4.749702,1.107419,-2.908235,-6.979395,1.199382],[2.729335,-2.196959,0.164607,3.872512,-2.375239,6.493141,0.291653,-0.999998,8.433930,-9.950701,-9.082655,7.085322],[5.029968,-7.463361,-6.949889,5.303268,2.930300,9.598608,-7.044304,-2.172074,-8.440484,-8.419686,2.829722,-5.359291],[3.331604,4.645323,9.946033,4.502926,2.221880,-2.231762,-8.939217,5.619347,-3.520284,-2.350658,0.517708,1.573409],[4.509986,-5.029731,-5.160703,6.129642,9.343895,-6.288425,1.773786,3.870628,2.128647,-9.766090,4.597463,8.121657],[-3.446985,-3.918471,-5.361173,3.341547,1.931652,1.397210,-4.553273,7.252741,5.264057,-9.396634,-4.548185,3.630521],[-0.452706,6.404638,-5.259322,0.917719,-9.263754,-9.369838,5.801247,-4.433352,0.512407,6.029349,2.284347,0.385055],[-4.270587,9.287080,1.293018,-1.534784,6.839369,4.460469,-5.021556,-4.060951,6.728647,2.822398,4.898743,4.135054],[5.893763,-5.037999,-1.022280,-6.657670,-1.060789,2.945994,-6.798309,7.173896,3.896687,4.601344,1.458492,-6.906735],[7.890967,2.750503,-8.130979,1.110363,5.197108,-9.364106,-1.326709,-9.880915,-6.550015,-9.995598,2.044261,-3.160138],[7.574273,-6.105128,-2.804434,6.993174,4.114518,-3.284130,9.204357,3.455568,8.409833,-9.932709,-3.877477,-4.283863],[-3.165551,-9.046527,-0.870976,-3.656157,-2.160928,-7.781613,-0.598638,-5.185487,1.372262,5.298391,9.164770,6.626335],[-9.285992,-6.721540,6.747594,7.194927,4.759739,5.833618,8.881880,3.388139,5.165339,-8.619263,8.256539,0.551239],[2.948684,-0.604279,1.840808,1.106815,7.772018,1.869297,8.314046,7.330253,-5.898781,-3.802087,-0.484992,5.614923],[-0.855478,9.139324,1.637410,-0.081696,4.806995,1.496472,-9.419727,-1.348236,-2.092041,-4.233504,8.171052,-4.931503],[1.918641,0.496990,5.535933,9.394901,-7.884130,8.069688,0.759237,-7.504649,-8.781243,3.923148,-0.607204,4.895128],[9.191547,-5.018834,8.622631,-5.094840,-5.417624,-3.776775,3.915218,9.938595,9.519809,9.888640,-4.863403,6.730937],[5.894207,3.648392,9.923141,-5.685795,9.492763,4.959712,8.786692,0.393355,5.361368,2.900523,8.993223,-9.188450],[-8.515584,8.346707,5.704742,4.740371,9.498584,-5.257664,8.148231,-4.639903,-2.742743,1.850562,9.588603,4.353592],[4.180337,9.081445,9.676057,5.013918,4.606591,-9.157769,2.981845,7.573452,-3.240489,1.805866,-1.481621,-5.916164],[8.755593,0.166901,-3.619651,5.006694,9.967705,-3.846923,-8.923571,-5.984344,-1.926076,-2.974789,4.568120,4.126720],[-0.836346,9.794496,-8.228933,2.641754,-4.124459,-6.172713,9.693963,-4.738667,0.155690,9.312155,-3.810054,0.397652],[-9.272358,-8.799419,-1.394723,1.180835,0.049199,2.532541,2.461355,0.667317,8.603079,-7.761512,-2.368940,-3.032051],[-2.962987,6.848996,7.456764,5.928191,5.851180,8.123031,2.176633,-0.182064,-0.487135,-2.418817,-0.305548,6.553326],[-7.410732,-5.844750,-1.834172,-0.375217,-5.659499,8.428718,-2.014000,9.862010,-8.700818,1.349601,7.787112,-7.712001],[-4.134839,3.289301,3.997749,-9.021997,0.720943,-6.337470,0.421835,-1.836676,-0.182512,-5.091833,-2.758790,-6.148560],[-8.236708,9.924892,9.091934,9.584475,-2.196505,-1.880241,4.553158,8.055398,6.584705,-4.218740,-2.212636,-0.221206],[-6.001159,-6.611596,-8.773188,-4.978773,-7.570315,2.705588,2.914309,9.264666,1.241243,0.873724,9.320330,7.733668],[-3.674337,6.885618,-1.453720,-1.749467,-1.171901,-6.497027,2.878131,-1.429582,-0.389686,-3.804565,-1.106199,2.695309],[6.941172,9.211308,-8.711849,-3.949713,-5.205444,4.796489,6.453089,-5.041430,-1.897940,5.613114,6.259621,-7.471294],[4.529247,1.150735,-4.499290,3.132501,-3.703707,-9.697684,-0.126254,8.101600,6.944403,7.372872,-4.485156,-1.629305],[-1.386213,7.507815,4.472593,6.516790,-8.480450,9.047284,-4.223444,-2.777900,8.176673,1.019603,9.832696,-5.006369],[4.091800,-9.454871,0.623843,7.678460,-3.640363,2.968129,-7.176026,-2.102936,-5.599814,4.650947,-9.442545,7.812193],[4.797597,4.848243,2.888965,5.652275,-4.259834,0.423817,-5.466406,7.905723,2.236414,0.424452,-9.742933,-8.456634]], dtype = "float64")#candidate|10680|(40, 12)|const|float64
const_10681 = relay.const([False,False,False,True,True,False,False,False,False,True,False,True,False,True,False,True,True,False,False,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,True,True,False,True,True,True,True,True,True,True,True,True,False,True,True,False,True,False,False,False,True,False,False,False,True,True,False,True,True,True,True,False,False,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,False,True,False,False,True,True,True,True,False,False,False,True,True,False,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,True,False,True,False,False,False,True,True,True,True,True,True,True,True,True,False,True,False,False,False,False,True,False,True,False,True,False,True,False,False,True,False,False,False,False,False,False,True,True,False,True,True,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,True,True,True,True,False,True,False,True,True,False,True,False,False,False,True,True,False,True,False,True,False,False,False,True,False,False,False,True,True,True,False,True,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,True,False,False,False,False,True,True,True,False,True,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,False,True,False,True,False,True,True,False,True,True,False,False,False,False,True,True,True,False,False,False,True,True,False,False,True,False,False,False,False,True,False,True,False,False,False,False,True,True,True,False,True,True,True,True,True,False,True,False,False,True,False,True,True,False,False,False,False,False,False,True,True,False,False,True,False,False,True,True,True,False,False,False,True,True,False,False,True,True,False,False,False,True,True,True,True,True,True,False,True,False,True,False,False,True,True,True,True,True,False,False,True,False,True,True,True,True,True,True,False,False,True,False,True,False,False,False,False,True,False,True,True,True,False,False,False,True,True,True,False,True,False,False,False,True,True,True,False,False,False,False,False,True,False,True,False,False,False,False,False,False,True,True,False,True,True,False,True,False,False,True,False,False,True,False,True,False,True,True,True,False,True,True,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,True,True,False,True,True,False,False,True,True,True,True,False,False,True,True,True,False,False,False,False,False,True,True,False,True,False,False,False,True,True,False,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,False,True,True,False,True,False,True,False,True,False,False,False,True,True,False,True,True,True,True,True,True,True,True,True,False,True,False,True,True,True,True,True,False,False,True,True,True,False,True,False,False,True,False,True,False,True,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,True,False,False,False,True,True,True,True,True,True,False,False,False,True,True,True,False,True,True,False,False,False,True,True,True,False,True,False,False,False,False,False,False,False,False,True,True,True,False,False,False,False,True,False,False,False,True,False,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,True,False,True,False,True,False,True,False,True,True,True,True,True,True,True,False,False,True,True,True,False,True,False,False,False,True,False,False,True,False,True,False,False,True,True,False,True,False,False,False,True,True,False,True,False,True,True,False,False,False,True,True,True,True,True,False,True,False,False,False,False,True,False,True,False,True,True,False,True,True,False,True,False,False,False,False,True,True,False,False,True,True,True,False,True,False,False,False,False,False,False,True,False,False,False,False,False,True,False,True,False,True,False,False,True,False,False,True,True,False,True,False,True,False,True,False,False,True,False,True,False,False,False,False,True,False,False,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,True,False,True,False,True,False,False,True,True,False,False,True,False,True,True,False,False,False,True,False,True,True,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,False,True,False,False,False,True,False,True,False,False,True,True,True,True,True,True,False,True,False,False,False,True,True,True,True,False,True,False,False,True,True,True,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,True,True,True,True,True,False,False,False,True,False,True,True,True,False,False,False,True,False,True,False,True,True,False,False,False,False,False,True,False,False,False,True,True,True,True,False,True,True,False,False,False,False,True,True,False,True,True,True,True,False,True,False,False,False,False,False,False,True,True,False,True,True,False,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,False,True,False,False,True,False,True,False,True,False,False,True,False,False,False,False,False,False,True,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,False,False,True,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,True,False,True,False,False,False,True,False,False,False,True,True,True,True,True,False,True,False,True,True,False,False,True,True,False,False,False,False,False,True,True,False,True,False,False,False,True,True,False,True,True,True,True,False,True,False,False,False,False,True,True,True,False,False,False,False,True,True,False,True,False,True,True,True,True,True,True,False,False,True,False,True,True,True,True,False,True,False,False,False,True,True,True,True,True,True,True,False,False,True,False,False,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,True,False,False,True,False,True,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,False,True,True,True,False,False,True,True,False,True,False,True,True,True,True,False,True,False,False,True,True,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,True,False,True,False,True,True,True,False,True,False,False,False,False,False,True,False,False,False,False,False,False,True,True,False,True,False,False,False,True,True,False,True,True,True,True,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,True,False,True,False,False,False,False,False,True,False,True,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,True,True,True,False,True,True,False,False,False,False,False,True,True,True,False,False,False,True,False,False,True,False,True,True,False,True,True,False,False,True,True,True,False,False,True,True,True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,True,False,True,False,True,False,True,True,False,False,False,True,True,True,False,False,False,True,False,False,True,False,True,False,False,False,True,True,False,True,True,False,False,False,False,True,True,False,False,True,False,True,True,True,False,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,False,False,True,False,False,False,True,False,False,True,True,True,False,False,True,True,False,False,False,True,False,False,False,False,False,True,True,False,True,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,False,True,False,False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,True,False,False,True,False,False,True,True,True,True,False,True,False,False,False,False,True,False,False,False,False,True,False,False,True,False,True,False,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,False,False,True,False,True,True,False,True,False,False,False,False,True,False,True,True,False,False,True,True,False,False,True,False,False,True,False,False,False,False,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,True,False,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,True,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True,False,True,True,True,False,True,False,False,False,True,False,False,True,False,False,True,False,True,True,True,True,False,False,False,False,False,False,False,True,True,True,True,False,True,True,True,False,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,False,False,True,True,True,False,True,True,True,False,False,False,False,False,False,True,True,False,True,False,True,True,False,True,False,True,False,False,True,True,True,True,False,False,False,True,True,False,False,False,False,False,True,False,False,True,False,False,True,True,False,False,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,True,True,True,False,True,False,True,True,False,False,True,False,True,True,False,True,True,True,True,False,False,True,True,True,False,True,False,False,False,True,True,True,False,False,True,True,False,False,False,True,False,False,True,True,True,False,True,False,True,False,True,True,True,False,True,True,False,True,True,False,False,False,True,False,True,True,True,True,True,True,False,False,True,False,True,False,False,False,True,True,False,False,False,True,False,True,True,False,False,False,False,False,True,False,False,False,True,True,True,False,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,False,True,True,True,True,False,True,False,True,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,False,False,True,True,False,True,True,True,False,True,False,True,True,True,True,False,True,False,True,True,False,True,False,True,False,False,False,False,True,True,True,True,True,False,False,False,True,False,True,True,True,True,True,False,False,False,False,True,False,True,True,False,False,True,True,False,True,False,True,True,True,False,False,False,False,True,False,False,True,True,True,False,False,False,False,True,True,False,False,True,True,True,False,True,True,True,False,False,True,True,True,False,True,False,True,True,True,True,True,False,True,True,False,True,True,False,False,False,False,True,False,True,False,False,False,True,True,False,False,True,True,True,True,False,True,False,False,False,False,True,False,True,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,True,False,True,False,False,True,True,False,True,True,False,False,False,False,False,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,False,True,True,True,True,False,False,False,False,False,True,False,False,True,True,False,False,True,True,True,False,True,True,False,False,True,False,True,True,False,False,True,True,False,False,False,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,False,False,False,True,False,True,False,False,True,True,True,True,False,True,True,True,False,False,False,True,True,True,True,True,False,True,False,True,False,False,True,True,False,True,False,False,False,True,False,False,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,True,False,True,False,True,False,False,False,False,True,False,True,False,True,True,False,False,True,True,False,False,False,False,True,True,True,False,True,False,True,False,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,True,True,False,False,True,False,True,True,True,False,True,True,False,True,True,False,False,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False,False,True,False,False,True,True,True,True,False,False,False,False,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,True,True,False,True,False,False,True,False,True,True,True,False,True,False,True,True,True,False,True,True,True,False,False,True,False,False,True,False,False,True,True,True,False,False,False,False,False,True,False,True,False,False,False,True,False,True,False,True,True,False,False,False,False,False,False,False,False,True,True,False,False,False,True,False,False,True,True,False,True,True,False,True,True,False,True,True,True,True,True,False,True,True,True,False,False,True,False,False,False,True,True,False,False,False,False,False,False,True,True,True,True,True,False,False,True,True,False,False,True,True,False,False,False,True,False,False,False,True,True,False,False,False,False,False,False,True,True,False,False,False,True,True,True,False,False,False,True,False,False,False,True,False,True,True,False,True,False,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,False,True,True,False,True,True,False,True,True,True,False,False,True,False,False,True,False,False,False,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,True,True,False,False,False,False,True,False,False,False,False,False,True,True,True,True,False,False,False,True,True,True,True,True,True,True,True,True,False,False,True,False,True,True,False,False,True,True,False,False,False,True,False,True,False,True,True,False,False,True,False,True,False,True,False,False,False,True,True,True,False,False,True,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,True,True,False,True,True,True,False,True,True,True,True,False,False,True,True,True,False,True,False,False,False,False,False,False,True,True,False,True,False,True,False,True,True,False,True,False,True,True,True,False,False,False,True,False,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,True,False,True,True,False,True,True,True,False,False,True,False,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,False,True,False,True,False,False,False,False,False,True,True,False,True,False,True,True,True,True,True,True,True,False,True,True,False,True,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,True,False,False,False,True,True,False,False,True,True,True,False,False,True,True,False,True,True,True,False,True,False,False,False,False,True,True,True,False,False,True,True,False,True,False,True,True,False,True,False,True,False,False,True,True,False,True,True,True,True,True,True,True,True,True,True,True,False,False,True,False,False,True,False,True,True,True,False,True,False,True,False,False,True,True,True,True,True,False,True,False,False,False,True,True,True,True,False,True,True,False,True,True,True,True,True,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,True,False,False,True,True,True,False,False,False,True,False,True,True,True,False,False,True,False,True,False,False,False,True,False,False,True,False,True,True,False,False,False,False,False,True,True,False,True,True,False,True,True,False,False,False,False,False,True,True,True,True,True,True,False,False,True,False,False,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,True,True,False,True,False,True,True,False,True,False,False,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False,True,True,False,False,True,True,True,True,True,True,True,False,True,False,False,False,True,False,False,False,True,False,True,True,True], dtype = "bool")#candidate|10681|(2912,)|const|bool
call_10676 = relay.TupleGetItem(func_9919_call(relay.reshape(const_10677.astype('uint16'), [240,]), relay.reshape(const_10678.astype('uint16'), [3120,]), relay.reshape(const_10679.astype('float64'), []), relay.reshape(const_10680.astype('float64'), [480,]), relay.reshape(const_10681.astype('bool'), [2912,]), ), 0)
call_10682 = relay.TupleGetItem(func_9926_call(relay.reshape(const_10677.astype('uint16'), [240,]), relay.reshape(const_10678.astype('uint16'), [3120,]), relay.reshape(const_10679.astype('float64'), []), relay.reshape(const_10680.astype('float64'), [480,]), relay.reshape(const_10681.astype('bool'), [2912,]), ), 0)
output = relay.Tuple([call_10650,call_10665,var_10666,call_10676,const_10677,const_10678,const_10679,const_10680,const_10681,])
output2 = relay.Tuple([call_10651,call_10667,var_10666,call_10682,const_10677,const_10678,const_10679,const_10680,const_10681,])
func_10706 = relay.Function([var_10666,], output)
mod['func_10706'] = func_10706
mod = relay.transform.InferType()(mod)
mutated_mod['func_10706'] = func_10706
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10707 = relay.var("var_10707", dtype = "float32", shape = (90,))#candidate|10707|(90,)|var|float32
func_10706_call = mutated_mod.get_global_var('func_10706')
call_10708 = func_10706_call(var_10707)
output = call_10708
func_10709 = relay.Function([var_10707], output)
mutated_mod['func_10709'] = func_10709
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9123_call = mod.get_global_var('func_9123')
func_9125_call = mutated_mod.get_global_var('func_9125')
call_10720 = func_9123_call()
call_10721 = func_9123_call()
func_9317_call = mod.get_global_var('func_9317')
func_9321_call = mutated_mod.get_global_var('func_9321')
var_10752 = relay.var("var_10752", dtype = "float32", shape = (143,))#candidate|10752|(143,)|var|float32
var_10753 = relay.var("var_10753", dtype = "float32", shape = (90,))#candidate|10753|(90,)|var|float32
var_10754 = relay.var("var_10754", dtype = "float64", shape = (864,))#candidate|10754|(864,)|var|float64
call_10751 = relay.TupleGetItem(func_9317_call(relay.reshape(var_10752.astype('float32'), [143,]), relay.reshape(var_10753.astype('float32'), [90, 1]), relay.reshape(var_10754.astype('float64'), [864,]), ), 9)
call_10755 = relay.TupleGetItem(func_9321_call(relay.reshape(var_10752.astype('float32'), [143,]), relay.reshape(var_10753.astype('float32'), [90, 1]), relay.reshape(var_10754.astype('float64'), [864,]), ), 9)
bop_10757 = relay.bitwise_or(var_10753.astype('int32'), call_10720.astype('int32')) # shape=(15, 5, 90)
bop_10760 = relay.bitwise_or(var_10753.astype('int32'), call_10721.astype('int32')) # shape=(15, 5, 90)
output = relay.Tuple([call_10751,var_10752,var_10754,bop_10757,])
output2 = relay.Tuple([call_10755,var_10752,var_10754,bop_10760,])
func_10776 = relay.Function([var_10752,var_10753,var_10754,], output)
mod['func_10776'] = func_10776
mod = relay.transform.InferType()(mod)
mutated_mod['func_10776'] = func_10776
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10776_call = mutated_mod.get_global_var('func_10776')
var_10778 = relay.var("var_10778", dtype = "float32", shape = (143,))#candidate|10778|(143,)|var|float32
var_10779 = relay.var("var_10779", dtype = "float32", shape = (90,))#candidate|10779|(90,)|var|float32
var_10780 = relay.var("var_10780", dtype = "float64", shape = (864,))#candidate|10780|(864,)|var|float64
call_10777 = func_10776_call(var_10778,var_10779,var_10780,)
output = call_10777
func_10781 = relay.Function([var_10778,var_10779,var_10780,], output)
mutated_mod['func_10781'] = func_10781
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8714_call = mod.get_global_var('func_8714')
func_8716_call = mutated_mod.get_global_var('func_8716')
call_10810 = relay.TupleGetItem(func_8714_call(), 0)
call_10811 = relay.TupleGetItem(func_8716_call(), 0)
func_6430_call = mod.get_global_var('func_6430')
func_6433_call = mutated_mod.get_global_var('func_6433')
const_10813 = relay.const([[-7.243547,-3.309850,-3.092511,5.458451,7.478006,7.881615,-3.024963,-3.677712,5.854799,0.696232,-7.711760,-2.137630,-8.485616,9.178577,8.047875,3.565222,9.311162,6.198821,-9.530745,-0.138851,1.809834,2.667258,5.669219,-2.857396,-9.612048,6.163376,0.548257,2.693343,4.954233,-3.417793,6.461170,-9.250642,9.845776,1.490984,-3.252983,3.608392,5.474303,2.692415,-8.333259,9.088481,5.277368,-4.351598,-1.479814,-2.868413,-5.934106,-3.117416,-2.321369,-2.006947,-2.346323,7.586669,8.665344,1.450924,-6.041247,-7.724151,-5.836918,2.317385,-1.069669,-3.299572,6.429414,-7.249168,-3.032728,9.441335,8.530785,-1.085092,4.995572,6.885985,3.945545,8.150039,9.724423,-3.135519,-6.144454,-3.230994,9.590733,3.642780,4.614368,-8.957014,4.238853,2.986312,-9.253284,-9.162258,7.386400,-3.095016,-5.409924,-1.681413,7.931630,-3.870009,-3.189717,-2.026150,9.924510,-7.074791,2.694845,-9.119192,9.286733,-7.652187,-0.498378,5.645801,-2.691168,-7.134225,-6.228525,-5.989137,4.188575,5.899590,5.564354,-8.676151,7.579611,-1.368220,4.949142,0.608196,-9.491102,-7.975208,1.618346,-5.775270,-8.194547,-0.055185,-7.819014,-6.376253,6.171132,0.041160,-7.662763,-3.338601,6.207132,-3.264787,5.840750,9.258356,3.819254,-7.413675]], dtype = "float64")#candidate|10813|(1, 126)|const|float64
const_10814 = relay.const([[True,True,True,True,True,False,False,False,False,False,True,False,False,True,True,False,False,False,False,False,True,True,False,True,False,False,True,True,True,True,False,False,False,True,False,True,True,False,False,True,False,True,True,True,False,False,True,False,True,True,True,False,True,True,True,True,False,True,False,True,False,False,True,False,True,True,True,False,True,True,False,False,True,True,True,True,False,False,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,False,False,False,True,False,False,True,False,False,False,False,True,True,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,True,True,False,True,True,False,True,True,False,False,False,False,False,False,True,True,False,False,True,True,True,True,True,False,False,True,False,False,False,True,True,False,False,True,True,True,True,False,False,False,False,False,False,False,False,False,False,False,False,True,True,True,False,True,True,True,False,False,True,False,True,False,False,True,True,False,False,False,False,False,False,True,True,True,True,True,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,False,True,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,True,False,True,False,False,False,True,True,False,True,True,True,False,True,True,False,False,False,False,True,True,False,True,True,False,True,False,False,True,True,True,False,True,False,False,True,False,True,False,False,False,True,True,False,True,False,True,True,False,True,False,False,True,True,True,True,True,False,False,False,True,True,False,False,True,True,True,True,False,True,True,True,False,False,True,True,True,False,False,True,True,True,True,False,False,True,False,True,True,False,True,False,True,False,False,False,True,True,True,True,False,False,False,False,False,False,False,True,False,False,True,False,True,False,False,False,True,False,True,False,False,True,False,True,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,False,False,True,False,False,False,True,False,True,True,True,False,False,False,False,True,True,True,True,True,False,True,True,False,False,True,False,True,True,False,True,True,False,True,False,False,True,True,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,False,False,False,True,False,True,False,False,True,False,True,False,False,True,True,True,False,True,True,False,False,False,False,True,False,False,True,True,False,True,True,False,False,False,False,False,True,False,True,False,False,False,False,False,True,True,True,True,True,True,True,True,True,False,False,True,False,True,False,False,False,True,True,False,True,True,True,True,True,False,True,False,False,False,False,True,True,False,True,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,False,True,True,False,False,True,False,False,True,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,False,False,True,False,False,True,True,True,True,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,False,True,True,False,True,True,True,True,True,False,True,True,True,True,False,False,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,False,True,False,False,False,False,True,True,True,True,True,False,False,True,False,True,False,True,True,True,False,True,True,False,False,True,False,False,True,True,True,False,True,True,False,True,True,False,False,False,True,True,True,False,True,True,True,True,True,False,True,True,False,False,True,False,False,True,False,True,False,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,True,True,True,True,False,False,True,False,True,False,False,False,False,False,True,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,False,True,True,False,False,True,True,False,False,True,True,True,True,True,False,True,False,False,True,True,False,False,False,False,False,True,True,True,False,False,False,True,False,True,True,False,True,False,False,True,True,True,False,True,False,False,False,True,False,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,True,True,True,False]], dtype = "bool")#candidate|10814|(1, 840)|const|bool
call_10812 = relay.TupleGetItem(func_6430_call(relay.reshape(const_10813.astype('float64'), [9, 1, 14]), relay.reshape(const_10814.astype('bool'), [840,]), ), 0)
call_10815 = relay.TupleGetItem(func_6433_call(relay.reshape(const_10813.astype('float64'), [9, 1, 14]), relay.reshape(const_10814.astype('bool'), [840,]), ), 0)
output = relay.Tuple([call_10810,call_10812,const_10813,const_10814,])
output2 = relay.Tuple([call_10811,call_10815,const_10813,const_10814,])
func_10820 = relay.Function([], output)
mod['func_10820'] = func_10820
mod = relay.transform.InferType()(mod)
output = func_10820()
func_10821 = relay.Function([], output)
mutated_mod['func_10821'] = func_10821
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8786_call = mod.get_global_var('func_8786')
func_8787_call = mutated_mod.get_global_var('func_8787')
call_10898 = func_8786_call()
call_10899 = func_8786_call()
output = call_10898
output2 = call_10899
func_10911 = relay.Function([], output)
mod['func_10911'] = func_10911
mod = relay.transform.InferType()(mod)
mutated_mod['func_10911'] = func_10911
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10911_call = mutated_mod.get_global_var('func_10911')
call_10912 = func_10911_call()
output = call_10912
func_10913 = relay.Function([], output)
mutated_mod['func_10913'] = func_10913
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10108_call = mod.get_global_var('func_10108')
func_10109_call = mutated_mod.get_global_var('func_10109')
call_10914 = relay.TupleGetItem(func_10108_call(), 0)
call_10915 = relay.TupleGetItem(func_10109_call(), 0)
func_9840_call = mod.get_global_var('func_9840')
func_9842_call = mutated_mod.get_global_var('func_9842')
call_10916 = func_9840_call()
call_10917 = func_9840_call()
func_10108_call = mod.get_global_var('func_10108')
func_10109_call = mutated_mod.get_global_var('func_10109')
call_10942 = relay.TupleGetItem(func_10108_call(), 0)
call_10943 = relay.TupleGetItem(func_10109_call(), 0)
output = relay.Tuple([call_10914,call_10916,call_10942,])
output2 = relay.Tuple([call_10915,call_10917,call_10943,])
func_10946 = relay.Function([], output)
mod['func_10946'] = func_10946
mod = relay.transform.InferType()(mod)
mutated_mod['func_10946'] = func_10946
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10946_call = mutated_mod.get_global_var('func_10946')
call_10947 = func_10946_call()
output = call_10947
func_10948 = relay.Function([], output)
mutated_mod['func_10948'] = func_10948
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8714_call = mod.get_global_var('func_8714')
func_8716_call = mutated_mod.get_global_var('func_8716')
call_10957 = relay.TupleGetItem(func_8714_call(), 3)
call_10958 = relay.TupleGetItem(func_8716_call(), 3)
uop_10962 = relay.erf(call_10957.astype('float64')) # shape=(462,)
uop_10964 = relay.erf(call_10958.astype('float64')) # shape=(462,)
func_8183_call = mod.get_global_var('func_8183')
func_8186_call = mutated_mod.get_global_var('func_8186')
const_10966 = relay.const([-3.722206,-8.368164,6.649731,0.208228,5.984105,8.742318,-0.782598,-8.296012,4.341079,-7.687964,7.306145,9.590862,4.490914,6.726790,9.610387,2.387815,5.064362,0.235967,5.639310,-2.057468,-4.954272,-0.974702,8.390681,-5.675257,1.874653,9.816922,-2.130955,3.931018,-1.094452,3.940908,0.431204,-0.395780,-9.804353,9.580520,-5.976748,-0.244071,-2.839214,1.968378,-3.824565,-6.675081,3.570042,-9.386446,2.617951,3.329213,-6.994554,4.096508,6.301919,-3.417564,7.219515,-7.370645,0.624644,-1.263464,1.028989,-8.179185,-3.338449,9.056836,-8.732815,9.969711,-2.351049,-9.286144,6.969153,-6.489651,6.989963,-1.364959,4.546428,-7.256116,-8.216704,-9.921735,4.371124,1.835224,0.500554,4.439882,-1.836968,7.337756,4.855235,6.559117,5.214121,0.695939,-9.482467,3.100032,-0.523515,-6.266463,3.092362,8.095852,5.697257,-5.063467,6.524110,5.566172,-6.869203,-2.806509,-3.559650,2.423493,-1.003017,-5.338679,-7.076038,-8.322253,6.258763,9.545181,0.162054,4.855134,6.156181,2.241181,2.547527,-9.182672,-0.217944,5.972380,-9.175976,-5.908877,-3.443735,9.544682,5.667923,7.349790,3.274685,1.951139,6.570117,8.753502,-7.706675,-3.053606,8.625369,5.861451,7.444134,-6.570753,4.968171,-3.263692,5.301692,4.301850,9.933946,-6.667535,5.546699,6.059661,-4.542433,-4.693201,-1.248341,3.395858,4.215151,4.172186,7.291216,3.888705,-2.901496,-3.228479,0.245995,-5.964210,3.590320,9.706221,-4.942556,2.835973,-9.630983,9.137336,-1.518821,-6.507467,-1.648070,0.349816,-2.036098,-4.441245,-8.590029,-8.560933,-2.700259,3.711257,6.934162,3.106669,6.902393,1.700889,-8.456994,-2.866278,0.803278,-9.642318,-3.806537,1.834769,-9.634623,-7.271416,2.762705,4.700130,1.422951,9.116535,4.050630,4.089701,0.486956,-0.834714,6.211623,0.626266,-9.227302,-3.811823,7.715792,0.457514,-4.376920,-4.860431,-9.155745,2.535087,-6.416450,6.879319,3.682462,9.373930,9.736995,-0.175130,-3.889807,2.296871,-7.023210,-6.039164,2.777196,7.742924,3.037430,9.411312,4.064680,8.263396,3.648818,-1.670877,0.650000,-9.754991,8.902264,-6.778843,-5.353224,-8.184364,1.869504,-7.978638,-0.665407,-7.397738,8.586465,-9.982474,8.878301,6.051269,-6.515145,1.485605,4.540657,-4.738494,2.424699,-3.390250,-6.159385,-8.532599,1.533853,-4.760988,-2.640503,4.909014,1.663430,1.960502,-4.128306,8.444933,-7.530222,-7.809061,-1.067055,-4.517057,4.980809,5.237484,-1.307736,-3.813107,-6.513230,2.451220,7.587150,0.490581,-2.185059,4.371027,6.703796,2.552216,-2.867513,9.358352,-0.524252,-6.134429,-6.291655,7.483390,9.128219,3.380614,2.886666,-5.046562,1.460407,6.235302,-8.194219,-3.609260,9.201568,1.734810,-0.049654,2.508252,8.574134,-6.121466,5.351118,-5.372127,5.644106,8.203893,-1.487772,-6.827470,8.734855,-7.356091,-5.179574,3.213033,-7.978849,6.151174,0.054414,-2.341680,-3.311638,-9.615569,-1.113298,-5.719976,-9.374628,-1.418821,-4.612227,7.357427,-5.867944,6.161942,-5.280370,4.506383,-4.240053,2.766446,7.502324,-7.920557,7.642818,8.043666,8.020534,4.833135,3.365613,-1.213990,-9.715416,1.873492,9.242456,-9.549832,0.573580,7.462654,-6.985355,7.974649,-1.495156,-6.046091,6.343976,3.228601,5.335540,-6.228007,5.927037,-0.943710,-1.296669,-9.858143,4.272260,-3.064152,-0.150074,-0.416882,-7.053437,-4.429728,5.613798,-4.358321,1.659152,3.278499,7.695695,1.652505,-5.179895,-7.177304,-6.334105,5.484801,8.006740,-6.816230,3.399935,6.825954,8.169835,-2.011391,-4.996463,5.958895,-3.757994,-1.125958,-8.836900,-5.729979,-9.645171,-6.900672,-5.453775,-6.315683,0.465954,8.011353,4.752841,-0.127712,3.202343,5.270949,-1.370161,5.859048,0.507288,-7.167742,0.879806,-6.251755,7.647746,-0.877865,-2.306023,-6.831211,-3.649970,-1.141425,-4.833798,-1.444682,0.210803,7.524350,-2.459146,9.036891,-0.544807,2.739452,-0.522135,4.566484,-0.065749,8.942095,-8.011656,-3.783397,-6.472582,-3.336199,-4.945574,-8.507568,-8.575615,8.339068,-1.575211,-0.659560,-0.910614,-8.522755,-5.482437,-0.900618,-9.622079,3.825067,1.279673,4.354446,4.402690,-8.726322,-3.591580,8.421233,-9.828409,1.740850,3.087166,-7.034885,1.755190,2.467409,-8.274596,4.484675,9.928978,-6.319648,-2.024478,-3.511770,0.207817,9.053367,8.941314,9.495775,0.153781,-7.565695,-8.531502,-8.423390,-0.170948,1.657319,-5.336350,8.284887,-6.568109,-4.455294,2.674997,-7.406543,-0.851032,-3.314485,-0.612976,1.147689,-9.341547,1.872574,-3.281347,-1.659312,6.495151,-7.574620,-0.096197,3.468354,6.991255,-3.840466,2.806036,4.143920,-2.178026,7.340701,7.563257,9.336812,3.869278,6.751471,-3.091234,-2.326928,6.211494,6.263163,-6.745908,-2.673084,7.176485,-7.220960,7.089458,-6.945236,6.244096,7.538482,-3.054905,-9.463320,0.778827,-1.713008,5.624644,7.454169,8.149131,4.620775,3.118909,8.649891,-8.629716,4.514018,5.558815,2.600126,-5.121035,-5.644321,8.897710,-5.357285,-8.206606,0.149671,2.298031,-5.289485,3.490407,-8.229097,-1.624923,3.797808,4.028520,-4.184872,-2.089445,2.535938,-7.418009,-3.090196,-6.436050,-4.210418,0.243118,-4.439876,-4.556404,6.065966,-5.387669,3.698286,8.480026,8.157432,3.528841,4.889920,-7.491292,-5.026866,-0.401373,-6.646141,8.684437,8.901372,-9.271707,1.545353,1.762269,8.512279,-6.677141,-9.017090,0.110322,-1.271368,8.300677,7.890415,-2.481089,1.688638,-6.085421,2.809270,-5.429803,-7.268347,6.463342,-8.452481,-0.002203,-9.851553,-2.528622,-2.669555,6.006064,-9.531216,-8.824872,-6.497882,-1.010489,-5.960559,4.016521,-7.615455,-7.032358,7.248725,3.445567,-7.648400,2.718362,-7.328416,6.981359,4.405053,-2.087636,-3.175523,6.182695,5.229321,-2.912960,-0.898145,-1.894056,0.138901,3.815548,-3.480996,-1.602158,-0.301271,7.534648,8.106956,3.721673,4.627320,8.308405,2.860249,-5.204279,-9.965709,-9.481471,8.544318,2.046893,2.709518,5.829043,1.710509,3.949311,0.531960,5.699782,2.575393,8.121168,-3.730778,-4.749732,-3.703122,-5.260516,2.274361,2.401897,0.527597,-0.907064,-9.489679,-0.559326,0.664658,9.146090,3.443450,-6.686221,-6.270236,8.006370,-9.382345,-3.483016,2.346183,1.980945,7.840407,1.118522,3.171401,6.880621,2.560083,-2.575145,8.561561,1.601801,-5.799419,-5.101846,5.660577,7.149223,0.614952,-4.541140,-2.500129,-2.347062,1.808172,1.473293,1.565811,-7.342220,-4.500898,3.736439,-4.860988,-7.197243,-7.277568,4.498871,8.678094,5.713803,-9.736048,1.528175,6.573952,-7.942566,1.856045,-4.956252,2.190945,4.904146,9.652309,2.965051,3.690013,-6.437285,-5.725543,0.984582,-2.539117,4.033768,5.191519,8.566163,-5.207617,7.224684,7.789032,-0.802005,-4.915986,3.723968,-0.123319,9.660291,-2.005169,-9.167499,-0.433793,-4.895025,-1.418624,3.021639,-1.390543,2.748366,2.514909,-8.562883,-6.040364,7.934580,-0.535861,-9.773387,4.176801,-4.621472,7.780220,4.376851,4.706984,-1.714288,6.839959,2.703886,-6.362994,-8.202409,8.933621,2.844312,5.282449,-0.587461,2.208959,-9.788400,-9.994511,-0.132491,6.850311,4.384502,-8.340908,4.634393,-5.763512,6.360945,6.539326,-2.705148,2.121640,-8.777342,-6.128190,-6.504183,2.143820,-3.459378,-1.249491,9.365275,-7.334279,-6.204231,-0.977998,-7.586886,-5.427150,7.611383,1.085051,-3.255188,8.313627,1.991728,7.922237,7.948251,6.420929,-2.125300,0.293534,7.244381,8.151682,-0.515330,7.886331,-8.401711,-7.895915,4.101049,9.649745,-5.291990,-5.136636,-0.526110,-9.299194,-5.351947,6.283694,2.624612,-3.779469,5.775900,-6.636600,8.207897,-0.615568,9.127051,-8.877992,8.470279,-3.338108,-5.766973,2.963232,-9.899546,7.029825,0.507101,3.683944,0.298907,-2.931853,0.953933,-4.852199,-8.978603,-0.208281,3.831135,2.034840,-9.613463,2.096416,-0.937189,0.734739,-9.873845,-7.184813,-7.608904,-6.826949,3.674666,-1.613325,7.989150,-5.176600,6.256070,0.682281,9.695634,7.109328,-8.965684,-7.697648,-2.481499,5.165206,-8.503579,-1.906846,1.721121,-9.218319,5.676141,-4.456826,9.030486,1.699306,2.176711,-1.542721,5.582875,5.209098,-8.846412,-3.156358,9.639099,9.454231,2.931873,-6.908386,-9.485560,-2.657720,1.326176,-1.104894,0.572362,-0.891277,-0.478005,0.664865,-4.651353,9.169089,-3.365573,4.617926,0.585563,-9.830088,7.743012,6.763977,8.652389,5.728073,-1.566260,-6.279273,3.769435,3.635722,9.076640,8.498738,6.008026,-3.795522,6.666434,8.134674,-8.863708,2.867563,2.219608,1.620808,-4.515375,9.885316,-5.967575,-3.778965,-6.980669,0.607001,-6.925199,-8.347499,1.779376,-3.368139,-7.809796,9.968262,2.387219,-7.019173,0.508633,7.100074,4.303347,6.019786,-7.037977,9.568460,1.581813,-9.095984,-4.226087,3.309667,3.057246,-9.813141,0.208705,-6.792302,-1.894230,0.239102,-1.259664,-5.624340,-8.045820,2.942190,4.189258,4.758087,6.495804,0.626907,-8.879448,7.219112,-3.535513,-7.659535,6.062240,-2.456396,7.820953,-7.683547,-0.902951,1.305516,-8.265884,-2.381070,-1.544204,-2.848392,2.874610,7.876339,-4.128443,-3.358241,-4.003996,-2.400380,6.011846,2.596106,4.352172,3.021203,-6.350117,-2.509302,5.650698,1.343238,-3.435601,-3.645547,0.827068,-2.701327,-6.369164,-0.329879,7.672931,0.534286,8.034020,4.711862,-3.531479,-0.671619,-6.958741,3.751053,8.726751,1.729332,-9.290003,-4.900464,8.302087,0.800341,3.230854,-8.840062,-1.122049,0.492024,-3.164221,-7.569461,1.511810,-9.657991,6.648313,-8.517284,-7.743731,9.393778,2.214712,-3.252324,-9.514402,-2.189965,8.196359,-2.296848,-3.808244,8.324712,-4.159160,1.851868,-3.791504,4.756916,7.772666,8.747416,5.681458,-3.960572,-9.882043,2.854650,-5.669069,-3.384537,-4.974658,-3.096345,-2.893391,-1.892908,6.777559,7.095138,4.744522,-7.607602,-4.592965,-5.362165,-0.773814,-9.638157,6.542486,3.626805,7.500586,8.050403,-3.493385,6.637199,2.083499,2.782388,4.951662,-9.926835,-2.624073,-1.585398,-9.097046,-3.927709,3.930749,2.214617,1.915361,6.999405,-5.763135,-4.637425,-2.892088,-2.408427,8.725508,-2.657659,-1.635198,9.723224,8.193828,5.699202,-0.265484,-8.502829,-5.647324,-7.231400,-9.464181,-5.462011,-7.281554,6.460992,-8.116256,-2.030675,-6.778815,6.525640,-8.547507,9.486461,-5.584963,6.277142,-3.835375,-7.943477,-1.000568,-1.583874,-3.117210,2.038478,-4.525889,9.945898,-8.803229,-0.003390,2.930702,2.770200,8.347584,8.260648,4.680513,-2.995959,8.795125,-5.010921,-6.864095,-8.589849,-8.334214,8.013794,9.020776,7.603433,8.855835,-6.881985,6.595791,-0.757492,-8.973823,-4.348563,-3.758803,9.303108,-9.348647,1.105282,6.230137,3.664341,-1.729325,-2.247606,-2.971519,7.506485,2.055738,-2.665948,-8.143497,8.838866,-8.181213,-9.652712,9.541797,-0.191066,-9.241399,-2.480692,-9.792029,6.636608,-8.338599,-6.370415,4.680997,-3.703575,1.614360,-8.476590,4.863240,-6.337656,7.386448,0.811196,-4.460616,-8.944803,0.333327,-4.199243,5.650235,-3.930201,7.268683,-3.538901,2.373158,-9.628994,7.062787,-6.433148,-3.783946,-9.508503,4.300607,-7.596082,-1.177132,-4.735692,8.603606,3.408093,-4.180454,5.258958,-8.615618,4.331737,-5.935254,-0.718715,-6.635670,2.738510,4.495887,-1.947422,5.437267,-5.407697,-2.575158,8.710397,-4.297207,-9.972700,2.208098,-1.938120,9.813758,1.668607,6.661124,3.519297,-0.777518,2.216603,-6.445345,-3.213082,-0.578089,8.053593,-4.071731,4.759675,2.327799,3.901993,2.268655,-6.455058,0.225678,-7.727381,8.585143,-1.037965,-0.863095,0.744556,-8.944152,-0.967068,0.396958,7.723075,7.145749,-8.149548,-1.106882,8.484416,6.788860,-3.425172,4.849533,-3.734956,-5.346868,-7.304346,-1.422070,0.135095,7.354668,3.087086,-3.639997,-2.907292,2.031407,-2.293536,9.052307,9.663290,-7.321473,2.868390,0.088479,-3.705086,9.095756,-8.293350,8.896922,-4.261011,-5.433177,7.205647,-3.356981,-7.508057,-4.534287,5.410001,-4.159295,-6.804255,-8.377862,-6.202653,1.563539,0.287585,0.932031,-9.787436,3.169738,9.707077,8.963506,-0.244215,4.219452,7.786361,-2.634577,0.530726,-7.596221,4.402812,7.242398,-3.609752,-8.773225,7.932949,2.351771,-0.240484,-1.352412,-5.865560,-2.562044,4.720528,7.430120,7.389037,2.754889,-3.590806,8.330194,-4.991759,3.297549,0.953950,-8.584375,4.139918,6.840433,1.319274,-1.031826,9.597764,-3.305266,-4.702272,0.893952,6.582722,-1.921466,-3.246920,5.991847,-2.016369,4.672869,4.377779,9.718904,-9.392777,-5.141877,-4.429383,4.798298,-5.920321,9.998970,-8.037015,-2.900843,8.625052,6.308767,-7.678075,9.755832,-5.412299,6.662048,-3.726407,-3.265862,1.950410,-5.975267,0.239853,7.267939,-8.587236,-5.959497,9.519280,-9.260940,8.578806,4.051908,9.967101,2.754498,4.482976,4.042563,9.583251,-7.884560,-3.494397,-1.727212,3.406029,2.334172,-7.064104,-6.158273,2.897404,9.367695,-4.604805,-6.435104,5.994089,4.703407,-1.855606,-8.857683,8.354477,-6.742784,-5.059987,2.269678,-6.486265,1.667380,2.137385,8.237549,-9.682292,3.022452,4.032081,-9.177452,3.400336,2.165899,-9.049900,7.262761,4.887794,-5.739896,2.857472,1.817710,-7.261115,-1.199581,-4.185486,-2.504782,-4.481711,1.986408,-0.789930,-5.503691,-4.990054,4.443064,-9.504376,-4.115511,7.081529,0.517908,-5.640780,-3.721716,7.242410,-9.705978,-0.457854,-7.480922,1.227396,-1.605579,-2.002552,1.978468,7.165147,3.283907,-2.061287,7.553955,-5.273779,-2.441871,6.979244,-4.413018,3.667453,-9.433285,3.099989,3.027456,-0.370616,-7.836729,-8.483072,7.407414,2.055299,3.923042,-9.868080,6.750250,9.013019,-8.571265,-1.370332,2.310189,3.064489,-9.031111,8.035514,8.477046,5.752074,-9.134161,-8.206381,1.575588,-3.858081,3.508937,3.173160,-1.957914,-8.833613,0.357900,6.576286,-6.387000,-2.173312,1.469175,-5.115984,-9.080904,5.987048,-7.652116,-0.080077,8.138110,-6.690795,-8.787430,1.272445,6.680041,8.929688,-0.260179,0.185393,9.261593,9.238941,8.740886,-6.964314,-9.704603,-1.810601,2.353471,-2.552390,-1.456561,2.509380,3.706363,6.368140,-4.709202,4.012522,0.650571,0.635590,6.211288,7.903312,7.897751,-5.791772,4.436427,-1.972678,4.611547,0.372072,8.456767,-0.865972,9.231843,4.389800,-6.192516,8.871181,-7.925403,6.754259,0.233076,-2.753683,-9.521819,-4.538317,-5.714237,-3.530024,-8.608616,3.396582,-9.012116,-9.815028,3.487507,9.848071,-0.916132,9.290881,5.276368,-0.435260,1.795478,3.113041,8.084589,-5.449948,-5.306622,-3.236271,-9.954856,1.703566,4.584740,2.105711,9.710123,7.187286,1.209269,-9.109362,6.713768,7.841188,-0.827264,-9.971812,1.226774,4.604904,5.471758,-4.998504,1.144101,-3.698859,3.589056,6.924008,-5.491142,-6.432208,8.819461,-3.380078,-8.847630,5.617236,7.175015,-9.045251,-2.507697,-3.415853,8.908968,-3.080505,-7.958723,-5.195932,-9.690009,1.434110,-8.229120,-4.790410,-1.936245,-2.092803,-7.245624,5.515811,4.518211,-7.627324,1.075487,1.611444,7.277561,5.755049,-8.080219,2.277387,4.744391,3.612062,9.090434,8.486402,-4.512159,-4.574321,-6.938985,-7.398556,1.301268,2.943160,-1.280719,-3.719362,-1.146150,8.650713,0.760850,7.436081,3.784790,-1.878691,-9.030979,1.918651,2.719160,-2.555587,3.407966,8.377179,9.146855,-0.487996,8.484850,-1.653179,-6.749844,-9.107766,-1.742913,4.640050,-7.218032,-5.935100,4.399661,2.055945,3.182937,-4.640149,5.016447,-2.307206,9.849680,-7.663071,1.515763,-6.446207,-1.060170,7.982516,9.307123,0.268977,-1.771634,-6.948390,6.153061,-8.423296,9.032848,2.002886,-5.249005,-1.321508,-2.152259,-5.840314,5.491573,-7.588260,4.326306,-4.475576,-7.776367,-7.256707,-5.668856,-3.063782,-0.486935,-1.800839,-8.705428,-5.009688,2.136808,-2.569098,8.216787,8.241282,8.468719,0.679055,6.254101,8.258177,4.670043,-7.457946,6.936740,3.278732,9.295813,1.679041,0.641510,-5.282988,-8.946873,9.559729,1.485430,-7.740229,-6.884147,9.082361,-5.481560,3.244835,-5.671694,8.621996,-1.670123,-5.455729,-3.430138,7.944892,3.864757,6.942732,-3.617274,-6.678927,5.642098,1.643229,-1.070658,-4.736420,7.024530,-6.413650,7.802472,8.399134,-5.478389,-5.369511,-8.873981,-6.674579,1.961064,1.380573,-9.899727,-5.812635,7.329313,2.599370,-1.268625,-4.144254,1.288632,-1.615289,-5.095835,5.037867,0.602867,0.076592,4.004235,4.905395,9.750050,8.392584,-3.543719,-4.434916,8.191122,3.154630,7.314708,9.713050,-1.928197,2.483069,-6.098183,4.051931,-8.765006,0.637763,3.234736,3.738439,1.627605,-3.022610,-4.514612,6.175216,2.314809,4.707857,-3.988508,7.724785,-9.945775,7.699410,0.090194,-7.793859,-1.348720,-9.652506,5.631859,-7.345662,-8.185509,-0.172617,7.510231,-4.241805,3.944922,8.225775,-7.221062,-3.043174,-0.090805,4.480863,9.611883,9.389328,3.309467,9.750208,1.977862,-4.529889,-5.809294,-6.256674,-0.072050,-4.117704,9.391316,-6.121732,0.897871,-2.874562,-7.218198,6.802203,-1.350442,0.998355,-5.445199,-8.231658,6.994355,5.835248,3.788189,7.749869,-6.189859,0.431041,-8.341617,-2.872066,0.062342,3.257352,-2.170596,4.380191,7.701040,9.654237,9.897147,-4.401000,-8.362801,-8.256706,6.450140,9.653310,-2.716412,6.577700,-5.995136,-5.384351,6.049808,-2.303669,-6.804338,-2.702024,-7.421980,-3.088682,3.533827,-8.838147,-6.193773,4.210196,5.765729,-4.221320,-4.511293,-0.081084,6.170386,-6.538717,-5.888008,-9.959466,-0.032933,-6.274453,-6.319060,-3.827830,2.856135,1.898862,0.786375,-6.249170,-3.017091,-5.764880,-0.777979,4.366338,4.556405,-7.139787,-4.346812,4.873352,8.166192,-1.616327,-3.366671,5.573553,0.793146,1.021855,-0.080349,7.751241,-5.095505,1.711743,-6.501639,-0.106884,-0.995531,1.538977,-4.101308,1.440827,0.969745,7.865884,-0.652889,9.766371,-6.402076,-1.389857,-6.828179,9.891484,-6.437777,-4.564793,3.572503,-9.089819,5.315542,1.406336,-5.798639,-6.096141,-9.738879,2.368331,-1.964109,-8.113115,-8.828765,4.890196,3.013763,6.936716,0.334557,-5.079615,5.552431,-3.478703,0.606432,-8.393281,-3.461538,9.428018,-2.702143,3.429599,0.356112,7.452078,2.268357,0.050311,4.178737,-0.152152,-3.131571,-7.676888,8.157115,-8.244951,-9.242889,5.733586,0.757827,7.127885,7.887071,2.049521,-8.742687,-2.770672,6.876069,-1.729780,8.682058,-3.190586,-9.295623,4.615318,6.604871,-9.083493,-5.009833,4.642203,-7.700742,1.564780,9.484175,-3.323413,-9.334891,1.220089,-3.841249,-1.592202,-9.515453,1.185219,9.323924,4.883620,9.634003,-3.031449,0.482798,4.487836,-9.290532,4.302749,7.154359,-1.459650,5.319394,-3.880437,2.738084,3.163671,5.233019,-4.473924,7.276774,2.906514,5.106029,-5.812697,2.896125,-8.870656,-7.718408,-3.145560,-7.779203,5.795207,-4.565247,3.646255,9.090987,-4.117781,-9.673741,4.391518,-6.245512,-2.764691,5.669628,-3.734400,-8.657457,-9.688667,-4.675861,5.016200,9.272540,-7.671522,-8.502415,-8.319832,-5.368585,-2.179082,2.212303,-2.700867,-9.328267,-2.993916,1.498079,6.734318,9.086769,4.764597,-7.224886,-7.718109,8.114017,4.835618,1.608754,5.106207,-1.208638,-3.117466,-2.183404,1.292146,4.497083,-0.313322,-5.148000,-9.740169,7.429773,-4.505741,-4.582926,-9.532998,7.104640,8.911799,4.362112,6.307588,-6.583114,0.336568,-4.601950,-5.795652,-4.095144,2.628414,-6.442573,6.167426,0.922287,5.595086,-2.562921,3.399657,6.437454,-1.915629,-7.490707,8.312466,4.864354,1.584690,8.720813,4.415896,-7.643159,6.030508,6.486515,-6.796565,-8.126614,-7.780229,2.017506,-1.470115,9.246900,3.115767,-5.612889,-4.289897,-2.535866,-6.210017,2.402160,9.043498,-2.166643,-6.949695,8.470555,-3.589394,-8.281414,5.451723,-0.871674,1.169534,-9.516241,0.243653,7.584624,7.029054,3.581453,5.624631,1.639773,-2.877857,2.849540,4.951186,-2.849706,-7.948444,0.210661,-0.362137,-0.173216,8.512517,5.394704,2.534905,-7.512682,-0.589752,-5.424191,4.566553,-3.846721,4.782975,-2.367082,8.280241,-8.374542,-7.390698,7.742711,-0.947879,-2.054280,-5.844393,-9.928964,-4.435440,-9.073959,5.489533,-3.755316,3.666255,-6.335882,2.292144,8.426937,7.146749,-6.828814,5.264097,5.044261,2.835198,8.179227,3.042809,-8.389257,6.517400,-5.081485,2.504779,0.790087,7.154645,-8.487712,-8.992385,3.291602,2.121140,4.248920,5.500159,-0.786851,-9.146569,8.339139,-4.097963,6.249117,-5.707982,-0.635713,6.087731,-5.383845,4.207236,6.664299,3.297768,-8.782635,-5.955909,5.678357,-9.768205,8.608521,-0.140151,-8.720572,-9.689131,-6.531148,2.118426,-0.856832,-1.103427,1.509571,2.987623,4.657236,-0.955022,-7.112386,-9.999715,-3.470622,1.862811,8.730782,-4.080216,-9.001035,-4.551539,-8.406565,4.182789,-4.489210,8.249595,-7.377798,-5.174802,9.254716,8.388681,8.549518,-8.291226,-9.867890,0.523857,9.188381,9.568692,-3.186496,-3.553154,2.061695,-5.499921,2.096750,2.857354,-8.824609,5.363211,-9.284870,1.998610,-7.722251,-9.288004,-4.183236,5.326718,7.934885,1.330626,-3.586221,-0.170490,-7.087341,5.557836,6.239608,0.696045,-7.994285,4.187686,7.285927,-0.692871,-6.555612,-9.978574,8.370899,-3.272655,-3.368729,-9.812107,4.518944,-2.524105,7.961915,7.676604,-4.255663,2.255852,-3.226018,-0.618790,9.293672,2.307815,5.150474,-4.194833,2.973901,0.706667,0.274964,-4.920218,4.658762,-4.337737,-9.975206,9.994903,-9.051567,7.471348,8.858173,-5.730482,4.711145,1.411015,8.146976,0.144945,-8.812065,-3.308183,-0.697876,6.418487,5.940966,6.794537,0.932917,-0.361147,6.817974,-2.205917,7.527480,4.203299,4.134539,9.752005,2.947622,7.377077,-4.297049,4.033731,3.853723,-1.352938,-1.632050,-3.025467,-6.439540,2.116794,6.185868,-2.969692,-5.678331,8.739840,-1.767608,-5.683840,0.668744,-5.059413,3.723355,-7.306543,-8.922949,0.507374,-1.216294,-8.848947,-9.422591,-7.888145,-7.312056,2.828504,0.391047,-9.178922,3.906731,5.662762,-0.193836,-3.872868,3.919444,-0.409090,0.258509,-3.912004,-8.410012,-3.278815,-0.864862,-3.328239,-8.019883,7.293475,-6.126991,8.575264,-4.216041,-1.203623,-5.218669,-3.508670,7.078248,4.757194,-9.734913,6.280270,7.464122,6.351985,-3.198303,-4.978532,4.543543,-8.778694,0.179131,-0.746665,-4.044570,-4.686922,8.313970,-7.470111,-4.096069,-5.146854,4.853605,5.479967,4.555167,-9.644041,-4.158171,-2.933450,-9.838278,7.512184,1.679881,1.368123,-4.657756,-5.695782,-4.221957,-5.346237,1.612170,6.598999,-3.046134,0.888469,-7.029750,-7.781331,-0.393556,-4.667315,8.947624,-3.127747,0.466542,2.967949,3.080253,-3.746981,-2.996784,-9.953270,0.681426,5.828835,-8.979848,2.065895,-8.201944,9.774382,0.376660,-1.595900,3.311588,4.395295,-0.663775,-4.123438,-9.732289,-7.251637,-2.172101,-7.303833,-8.100778,3.321098,-5.375770,8.095445,-1.992022,4.872224,5.747880,7.623306,-8.327896,3.527381,1.562035,5.495605,-9.524839,-3.830241,-9.942789,-2.702858,-4.689640,-8.041104,6.899148,-5.755368,-3.532835,1.854015,0.786738,1.587994,3.833504,-4.024390,-8.111859,-3.777631,7.915143,8.512475,-8.696370,4.440190,-5.446284,3.027021,9.634666,0.853566,-4.663559,9.346847,9.353282,6.376602,-1.592385,7.631056,8.595366,4.549440,9.920619,4.723295,5.914209,-8.105774,-8.230313,8.854911,2.245922,4.430635,0.942385,0.207423,9.219775,1.917358,9.973148,6.473988,-1.486729,0.891541,7.489040,7.193327,1.301052,-1.830919,-0.655512,-9.969448,3.611331,1.009845,-3.634577,1.007298,1.338545,6.532966,-0.114129,-4.678952], dtype = "float64")#candidate|10966|(2304,)|const|float64
call_10965 = func_8183_call(relay.reshape(const_10966.astype('float64'), [9, 16, 16]))
call_10967 = func_8183_call(relay.reshape(const_10966.astype('float64'), [9, 16, 16]))
uop_10968 = relay.log(uop_10962.astype('float32')) # shape=(462,)
uop_10970 = relay.log(uop_10964.astype('float32')) # shape=(462,)
uop_10976 = relay.asin(uop_10968.astype('float64')) # shape=(462,)
uop_10978 = relay.asin(uop_10970.astype('float64')) # shape=(462,)
bop_10981 = relay.left_shift(uop_10976.astype('int64'), relay.reshape(call_10957.astype('int64'), relay.shape_of(uop_10976))) # shape=(462,)
bop_10984 = relay.left_shift(uop_10978.astype('int64'), relay.reshape(call_10958.astype('int64'), relay.shape_of(uop_10978))) # shape=(462,)
func_6430_call = mod.get_global_var('func_6430')
func_6433_call = mutated_mod.get_global_var('func_6433')
const_10994 = relay.const([3.479445,7.170951,-9.032467,-5.136947,3.544301,5.217324,3.505686,-4.781045,6.951905,4.369923,7.506116,4.356761,-8.524667,7.386284,-3.503674,-2.253576,-0.383130,5.581447,-7.848091,-5.495785,-6.329723,-6.931633,-7.643267,-5.479641,-7.595809,1.026132,0.175724,9.745596,2.574457,0.186359,2.492917,8.825306,0.778661,-1.952785,-1.739566,9.199269,-8.053696,-2.977070,-5.487929,-2.081743,4.753855,7.130009,-9.614676,-2.291265,6.023811,1.273832,-0.913893,-0.467519,-7.711696,9.069855,-5.035218,5.783338,8.913845,8.210839,-6.288919,-5.253200,-9.792936,5.499279,-8.048998,-5.555459,0.473810,4.663197,-5.320359,-2.186415,-8.313009,-4.058100,-0.959275,-7.974563,9.013102,-1.366252,6.949438,1.018041,-6.609154,4.532978,3.985142,-0.593291,1.747088,-5.109889,4.925695,-0.062074,-4.639297,-7.447270,5.235557,-8.179055,4.596876,-6.148043,-6.900522,-9.746466,-0.840369,2.788046,4.425078,1.193900,4.048605,-7.814064,-0.880954,0.733721,1.500370,3.049589,-3.567978,-3.991562,-4.490081,-8.324158,-8.710976,2.976474,-8.305735,-6.286328,-5.483038,2.921032,0.401052,0.894262,-3.150039,0.337465,-5.626634,-2.414437,-1.211748,-6.080226,-0.027217,2.488884,4.564723,0.017073,-1.338165,5.280604,7.734118,-4.116869,9.639226,-1.796291], dtype = "float64")#candidate|10994|(126,)|const|float64
var_10995 = relay.var("var_10995", dtype = "bool", shape = (840,))#candidate|10995|(840,)|var|bool
call_10993 = relay.TupleGetItem(func_6430_call(relay.reshape(const_10994.astype('float64'), [9, 1, 14]), relay.reshape(var_10995.astype('bool'), [840,]), ), 2)
call_10996 = relay.TupleGetItem(func_6433_call(relay.reshape(const_10994.astype('float64'), [9, 1, 14]), relay.reshape(var_10995.astype('bool'), [840,]), ), 2)
output = relay.Tuple([call_10965,const_10966,bop_10981,call_10993,const_10994,var_10995,])
output2 = relay.Tuple([call_10967,const_10966,bop_10984,call_10996,const_10994,var_10995,])
func_10997 = relay.Function([var_10995,], output)
mod['func_10997'] = func_10997
mod = relay.transform.InferType()(mod)
mutated_mod['func_10997'] = func_10997
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10998 = relay.var("var_10998", dtype = "bool", shape = (840,))#candidate|10998|(840,)|var|bool
func_10997_call = mutated_mod.get_global_var('func_10997')
call_10999 = func_10997_call(var_10998)
output = call_10999
func_11000 = relay.Function([var_10998], output)
mutated_mod['func_11000'] = func_11000
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9889_call = mod.get_global_var('func_9889')
func_9891_call = mutated_mod.get_global_var('func_9891')
call_11017 = func_9889_call()
call_11018 = func_9889_call()
uop_11021 = relay.asin(call_11017.astype('float64')) # shape=(15, 5, 1)
uop_11023 = relay.asin(call_11018.astype('float64')) # shape=(15, 5, 1)
func_10911_call = mod.get_global_var('func_10911')
func_10913_call = mutated_mod.get_global_var('func_10913')
call_11028 = func_10911_call()
call_11029 = func_10911_call()
func_5378_call = mod.get_global_var('func_5378')
func_5381_call = mutated_mod.get_global_var('func_5381')
var_11036 = relay.var("var_11036", dtype = "float64", shape = (1056, 1))#candidate|11036|(1056, 1)|var|float64
call_11035 = relay.TupleGetItem(func_5378_call(relay.reshape(var_11036.astype('float64'), [16, 11, 6]), relay.reshape(var_11036.astype('float64'), [16, 11, 6]), ), 0)
call_11037 = relay.TupleGetItem(func_5381_call(relay.reshape(var_11036.astype('float64'), [16, 11, 6]), relay.reshape(var_11036.astype('float64'), [16, 11, 6]), ), 0)
output = relay.Tuple([uop_11021,call_11028,call_11035,var_11036,])
output2 = relay.Tuple([uop_11023,call_11029,call_11037,var_11036,])
func_11041 = relay.Function([var_11036,], output)
mod['func_11041'] = func_11041
mod = relay.transform.InferType()(mod)
mutated_mod['func_11041'] = func_11041
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11042 = relay.var("var_11042", dtype = "float64", shape = (1056, 1))#candidate|11042|(1056, 1)|var|float64
func_11041_call = mutated_mod.get_global_var('func_11041')
call_11043 = func_11041_call(var_11042)
output = call_11043
func_11044 = relay.Function([var_11042], output)
mutated_mod['func_11044'] = func_11044
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11057 = relay.var("var_11057", dtype = "uint32", shape = (1, 9, 3))#candidate|11057|(1, 9, 3)|var|uint32
const_11058 = relay.const([[[-2,9,8],[-5,4,3],[9,-10,4],[-1,-5,6],[5,5,-3],[-9,-3,-1],[4,-10,-2],[-8,-1,-9],[-8,3,-3]],[[3,8,-8],[-4,6,-7],[10,2,2],[3,6,10],[-8,-10,-4],[-1,10,4],[-8,9,6],[10,-9,-6],[-10,-3,-2]],[[4,3,-10],[-6,3,8],[-6,-6,2],[-2,9,-7],[-4,-1,-5],[-10,-2,2],[2,-1,-6],[4,9,6],[3,-4,-9]],[[5,-9,-10],[1,3,7],[-5,3,-5],[9,10,9],[-7,-6,-3],[3,-10,-6],[7,2,-1],[5,-7,-4],[-7,2,-8]],[[5,-1,8],[6,4,4],[-6,-7,8],[9,-8,2],[-9,-4,6],[9,-9,10],[6,9,-4],[10,-3,-10],[9,-6,6]]], dtype = "uint32")#candidate|11058|(5, 9, 3)|const|uint32
bop_11059 = relay.bitwise_and(var_11057.astype('uint32'), const_11058.astype('uint32')) # shape=(5, 9, 3)
output = relay.Tuple([bop_11059,])
output2 = relay.Tuple([bop_11059,])
func_11068 = relay.Function([var_11057,], output)
mod['func_11068'] = func_11068
mod = relay.transform.InferType()(mod)
var_11069 = relay.var("var_11069", dtype = "uint32", shape = (1, 9, 3))#candidate|11069|(1, 9, 3)|var|uint32
output = func_11068(var_11069)
func_11070 = relay.Function([var_11069], output)
mutated_mod['func_11070'] = func_11070
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11106 = relay.var("var_11106", dtype = "float32", shape = (11, 6, 7))#candidate|11106|(11, 6, 7)|var|float32
uop_11107 = relay.log(var_11106.astype('float32')) # shape=(11, 6, 7)
func_9256_call = mod.get_global_var('func_9256')
func_9258_call = mutated_mod.get_global_var('func_9258')
const_11113 = relay.const([-1.528398,3.216355,1.488813,-6.721596,-5.357853,4.560703,-6.682393,-4.228606,0.308579,1.335413,5.862980,9.296751,-6.421038,-2.867915,2.189963,8.372207,-3.544094,4.189406,5.651684,-4.901131,3.089340,-2.030537,5.738880,-0.669113], dtype = "float32")#candidate|11113|(24,)|const|float32
call_11112 = relay.TupleGetItem(func_9256_call(relay.reshape(const_11113.astype('float32'), [3, 4, 2])), 2)
call_11114 = relay.TupleGetItem(func_9258_call(relay.reshape(const_11113.astype('float32'), [3, 4, 2])), 2)
func_10946_call = mod.get_global_var('func_10946')
func_10948_call = mutated_mod.get_global_var('func_10948')
call_11123 = relay.TupleGetItem(func_10946_call(), 0)
call_11124 = relay.TupleGetItem(func_10948_call(), 0)
func_9577_call = mod.get_global_var('func_9577')
func_9578_call = mutated_mod.get_global_var('func_9578')
call_11125 = func_9577_call()
call_11126 = func_9577_call()
uop_11128 = relay.sin(uop_11107.astype('float64')) # shape=(11, 6, 7)
output = relay.Tuple([call_11112,const_11113,call_11123,call_11125,uop_11128,])
output2 = relay.Tuple([call_11114,const_11113,call_11124,call_11126,uop_11128,])
func_11133 = relay.Function([var_11106,], output)
mod['func_11133'] = func_11133
mod = relay.transform.InferType()(mod)
var_11134 = relay.var("var_11134", dtype = "float32", shape = (11, 6, 7))#candidate|11134|(11, 6, 7)|var|float32
output = func_11133(var_11134)
func_11135 = relay.Function([var_11134], output)
mutated_mod['func_11135'] = func_11135
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9123_call = mod.get_global_var('func_9123')
func_9125_call = mutated_mod.get_global_var('func_9125')
call_11163 = func_9123_call()
call_11164 = func_9123_call()
output = relay.Tuple([call_11163,])
output2 = relay.Tuple([call_11164,])
func_11199 = relay.Function([], output)
mod['func_11199'] = func_11199
mod = relay.transform.InferType()(mod)
output = func_11199()
func_11200 = relay.Function([], output)
mutated_mod['func_11200'] = func_11200
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9652_call = mod.get_global_var('func_9652')
func_9654_call = mutated_mod.get_global_var('func_9654')
call_11249 = relay.TupleGetItem(func_9652_call(), 0)
call_11250 = relay.TupleGetItem(func_9654_call(), 0)
func_9387_call = mod.get_global_var('func_9387')
func_9390_call = mutated_mod.get_global_var('func_9390')
var_11252 = relay.var("var_11252", dtype = "float32", shape = (66, 6))#candidate|11252|(66, 6)|var|float32
call_11251 = relay.TupleGetItem(func_9387_call(relay.reshape(var_11252.astype('float32'), [396,])), 2)
call_11253 = relay.TupleGetItem(func_9390_call(relay.reshape(var_11252.astype('float32'), [396,])), 2)
func_9498_call = mod.get_global_var('func_9498')
func_9502_call = mutated_mod.get_global_var('func_9502')
var_11258 = relay.var("var_11258", dtype = "float64", shape = (126,))#candidate|11258|(126,)|var|float64
var_11259 = relay.var("var_11259", dtype = "bool", shape = (840,))#candidate|11259|(840,)|var|bool
call_11257 = relay.TupleGetItem(func_9498_call(relay.reshape(var_11258.astype('float64'), [1, 126]), relay.reshape(var_11259.astype('bool'), [840,]), relay.reshape(var_11252.astype('float32'), [396,]), ), 4)
call_11260 = relay.TupleGetItem(func_9502_call(relay.reshape(var_11258.astype('float64'), [1, 126]), relay.reshape(var_11259.astype('bool'), [840,]), relay.reshape(var_11252.astype('float32'), [396,]), ), 4)
bop_11265 = relay.logical_and(var_11252.astype('bool'), relay.reshape(call_11251.astype('bool'), relay.shape_of(var_11252))) # shape=(66, 6)
bop_11268 = relay.logical_and(var_11252.astype('bool'), relay.reshape(call_11253.astype('bool'), relay.shape_of(var_11252))) # shape=(66, 6)
output = relay.Tuple([call_11249,call_11257,var_11258,var_11259,bop_11265,])
output2 = relay.Tuple([call_11250,call_11260,var_11258,var_11259,bop_11268,])
func_11276 = relay.Function([var_11252,var_11258,var_11259,], output)
mod['func_11276'] = func_11276
mod = relay.transform.InferType()(mod)
mutated_mod['func_11276'] = func_11276
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11276_call = mutated_mod.get_global_var('func_11276')
var_11278 = relay.var("var_11278", dtype = "float32", shape = (66, 6))#candidate|11278|(66, 6)|var|float32
var_11279 = relay.var("var_11279", dtype = "float64", shape = (126,))#candidate|11279|(126,)|var|float64
var_11280 = relay.var("var_11280", dtype = "bool", shape = (840,))#candidate|11280|(840,)|var|bool
call_11277 = func_11276_call(var_11278,var_11279,var_11280,)
output = call_11277
func_11281 = relay.Function([var_11278,var_11279,var_11280,], output)
mutated_mod['func_11281'] = func_11281
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8714_call = mod.get_global_var('func_8714')
func_8716_call = mutated_mod.get_global_var('func_8716')
call_11286 = relay.TupleGetItem(func_8714_call(), 3)
call_11287 = relay.TupleGetItem(func_8716_call(), 3)
output = call_11286
output2 = call_11287
func_11288 = relay.Function([], output)
mod['func_11288'] = func_11288
mod = relay.transform.InferType()(mod)
output = func_11288()
func_11289 = relay.Function([], output)
mutated_mod['func_11289'] = func_11289
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9652_call = mod.get_global_var('func_9652')
func_9654_call = mutated_mod.get_global_var('func_9654')
call_11366 = relay.TupleGetItem(func_9652_call(), 0)
call_11367 = relay.TupleGetItem(func_9654_call(), 0)
output = relay.Tuple([call_11366,])
output2 = relay.Tuple([call_11367,])
func_11370 = relay.Function([], output)
mod['func_11370'] = func_11370
mod = relay.transform.InferType()(mod)
mutated_mod['func_11370'] = func_11370
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11370_call = mutated_mod.get_global_var('func_11370')
call_11371 = func_11370_call()
output = call_11371
func_11372 = relay.Function([], output)
mutated_mod['func_11372'] = func_11372
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11375 = relay.var("var_11375", dtype = "float64", shape = (15, 16, 15))#candidate|11375|(15, 16, 15)|var|float64
uop_11376 = relay.sin(var_11375.astype('float64')) # shape=(15, 16, 15)
output = uop_11376
output2 = uop_11376
func_11384 = relay.Function([var_11375,], output)
mod['func_11384'] = func_11384
mod = relay.transform.InferType()(mod)
var_11385 = relay.var("var_11385", dtype = "float64", shape = (15, 16, 15))#candidate|11385|(15, 16, 15)|var|float64
output = func_11384(var_11385)
func_11386 = relay.Function([var_11385], output)
mutated_mod['func_11386'] = func_11386
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8915_call = mod.get_global_var('func_8915')
func_8916_call = mutated_mod.get_global_var('func_8916')
call_11401 = relay.TupleGetItem(func_8915_call(), 0)
call_11402 = relay.TupleGetItem(func_8916_call(), 0)
func_3307_call = mod.get_global_var('func_3307')
func_3312_call = mutated_mod.get_global_var('func_3312')
const_11409 = relay.const([-1.063874,-2.714306,8.710549,9.353665,6.822909,0.076838,-9.399827,8.990470,2.724768,-4.997445,-0.835880,-4.589893,-4.035199,5.803458,-4.124741,6.310763,4.149336,-0.620719,-0.478958,-8.523234,9.331342,2.126495,9.166689,-4.113872,-1.070826,1.543651,-1.156345,3.487293,-2.983820,-1.332924,7.939552,4.981839,-2.207099,-6.915501,2.864597,-8.109049,-8.810081,-0.564810,3.737224,-5.082463,0.073085,-9.068728,4.584159,8.106627,-9.434489,-7.354679,1.716213,-0.936908,6.977054,4.353056,0.791762,-0.811335,5.329528,3.646032,8.993078,-4.680772,-9.771610,-9.306260,-2.786168,7.602945,8.814241,3.296519,6.837488,-5.305633,-3.357928,7.132294,-5.284261,6.729938,-2.271534,-4.426502,-4.997427,-0.424859,4.712290,0.103727,-0.968674,-4.937917,-3.760890,6.019823,3.066835,2.211284,2.667019,7.813703,-2.433936,3.354646,4.815919,-6.131786,-7.333857,-6.846649,4.574152,2.583855,-0.627115,7.854231,9.878005,-4.220273,7.118862,-2.491077,-9.098805,-9.301389,-4.416826,5.150907,9.783454,-2.989562,1.097868,9.235355,-2.429889,-2.634831,-4.895823,2.746318,-3.353762,-1.987201,0.928298,-7.930008,-0.178415,-8.102021,-2.904935,-1.967291,5.702473,4.458416,-1.974231,4.028732,-4.586778,8.483193,-8.145564,-8.267461,4.182736,-8.341415,-8.302088,-8.322207,1.502595,9.648362,3.141524,3.376470,-4.825888,2.104982,7.381896,7.592504,-8.692265,-7.425676,-9.096966,-8.835040,8.512644,-2.783372,6.036621,-6.819044,-1.349612,4.373504,3.798486,-9.398761,6.614615,-6.510172,8.058730,-5.332487,1.113961,-5.916608,-9.913804,4.757009,1.891425,7.975952,-2.019851,1.243303,5.462955,-3.703204,8.079243,9.477370,-8.614141,3.993911,3.900056,-8.797608,-3.325621,-6.133034,5.379494,-6.047767,-4.129948,8.691018,7.155085,0.676389,4.254338,9.372128,-3.834737,-7.743307,8.560122,-2.431144,1.029392,0.985735,7.661716,-7.274214,5.911707,2.572625,-7.102180,-6.278551,6.511770,4.988330,-8.437986,9.666480,7.167479,9.442788,5.838445,6.428040,-2.980967,-1.212695,1.032251,-6.066365,3.076023,-7.082670,1.170575,1.728885,-8.192718,8.132979,-1.455523,5.205496,-4.899270,-5.583048,0.835096,2.245111,-2.868067,6.054132,-1.146185,-4.551796,-2.079767,-1.566505,6.589508,-5.310226,-9.688543,-8.224927,7.205217,-1.753417,2.730888,7.340712,-8.381183,-3.078966,4.690139,-2.769429,-9.072487,8.134417,8.245523,-1.055266,-4.256242,-9.587865,-6.746985,6.585978,4.363391,-7.258046,-1.068557,1.626395,-5.316822,6.362492,3.640235,6.688215,-2.813816,-5.427375,-1.895005,-2.466162,-2.476453,1.870825,-4.401008,-2.027791,-3.361927,-4.789905,-6.170811,-2.831187,0.411261,-2.234480,3.633124,-4.431111,4.537670,-0.001283,0.213415,-0.070627,9.387712,1.623439,-9.634058,0.067148,-1.568519,4.475891,7.259469,5.922997,4.579451,-6.880886,5.607067,-8.886103,7.481281,3.192127,0.817036,-7.283186,1.460176,-1.988129,1.046550,1.981166,9.335568,3.506245,-3.966795,-2.552277,-4.614290,-7.366849,9.879906,-5.560959,9.730129,-0.475240,9.513526,-0.603073,-9.724151,-0.622406,-9.503108,5.228746,-5.203166,7.074839,8.366931,-0.323212,-6.401033,1.914895,3.094650,-9.394398,8.609687,-6.008946,-5.863689,-1.533977,6.349304,-9.826974,-2.663703,-5.478988,-8.259840,6.123919,2.528839,-9.182825,-0.261515,0.251377,8.907727,1.566952,-1.344220,-3.700569,-0.423164,9.959822,8.023608,3.361384,6.380587,5.720202,0.161295,8.055842,-3.145628,-3.362440,-0.969436,5.796438,-8.967333,-5.932249,-0.892244,1.411941,5.552556,-2.282072,-4.853739,-9.920540,2.840139,-1.855599,-9.756875,2.505074,3.769712,-5.751874,-3.526453,4.124394,-3.787648,9.523565,-3.421568,9.953919,-1.951949,8.248147,0.586455,-7.974268,1.877706,-2.474859,1.187344,-3.012589,7.903128,-1.944898,-3.031440,-6.948685,4.995562,4.886554,-2.144816,-3.541253,2.564612,-4.130503,9.660299,5.812572,3.600263,6.005569,-8.932978,2.654962,-8.078711,2.677694,4.465657,6.388232,8.321739,9.717668,5.432504,-0.723206,6.983428,0.469872,-3.605082,3.627642,-1.203987,-8.729994,-4.815599,4.518658,5.779471,-0.637625,-0.003081,7.850707,-2.329338,-6.203877,-3.409052,-3.932413,0.741800,7.418963,3.903066,8.312937,5.877462,-4.478286,7.878454,-7.362483,-6.977792,8.701083,-5.873847,-6.927252,6.512442,-4.380053,-5.668374,6.630811,-0.525533,3.587690,9.520287,-1.563293,-3.980464,2.654433,-5.080059,-1.216488,-9.631313,1.010316,-9.963038,2.683086,-5.782717,-9.404663,7.209743,-1.304334,-1.719347,0.712649,-4.299800,-6.711172,-9.043428,-4.667358,9.643263,5.900669,5.028547,-6.271918,-8.420375,5.803777,0.190223,8.358917,-6.738557,-3.841542,0.436337,-9.402582,7.055980,-4.075160,-7.526907,-2.723453,3.920392,9.283860,4.411215,3.777430,-7.099107,-9.067014,-9.074143,-5.471502,-2.650455,4.553800,-6.107245,2.191030,-9.651115,4.547067,5.909601,-4.797820,6.845717,1.575983,0.954819,-3.996437,8.557533,4.510618,4.691966,-2.262639,-9.585156,8.817643,-2.504220,6.633335,9.345104,0.997477,-3.242363,5.413812,-7.781881,-4.373319,4.160853,2.613783,-6.128806,-9.801861,-2.369708,2.268267,-0.610903,0.590172,3.930008,5.546361,0.128149,9.089637,-6.514616,2.798399,6.722872,-2.075704,-4.404039,-5.217982,-7.558806,-5.017160,3.864435,-1.951515,9.338257,-1.486685,-7.826364,7.674546,8.581494,3.266723,1.128063,-1.835442,2.008749,-8.173619,-0.936170,-7.718159,0.824942,9.386167,-0.281412,0.903506,5.697140,-6.957169,6.557685,9.862835,2.388007,7.718860,0.295576,4.713964,-7.006902,-7.719978,-8.659445,-1.054494,-4.366761,7.826171,5.524185,-6.952163,-0.084747,-6.611002,-1.903377,-3.846393,-5.833495,-9.127460,9.658255,-2.189591,0.240708,-3.633702,7.259454,-1.211802,-9.465717,-3.085758,-3.104433,-1.925106,-5.928174,-6.791697,-5.443796,-6.696900,-4.419989,-0.380870,-6.893865,-0.200236,-9.923901,-9.732213,1.303821,9.694143,-1.215098,9.705635,-5.542876,2.757911,-5.064187,4.768548,9.051790,3.777151,-9.299732,9.809702,9.050372,9.469344,6.638633,2.851903,-8.825787,-4.904425,7.180048,1.011154,-5.189745,-9.076271,-8.974238,6.033707,0.540669,-5.479874,4.991701,-4.432541,8.278687,-9.772894,2.197321,4.126521,-5.118685,-6.595612,0.801846,7.496961,8.858479,-3.468748,3.077995,0.214336,-1.187091,-0.017523,7.647180,-7.098584,-4.116397,9.674086,1.428141,6.794782,9.189991,7.727676,6.525079,-2.013177,-6.941097,6.512759,-3.125907,-8.794089,-7.008266,-5.170975,8.855664,-5.845791,4.693553,-4.433480,-5.752019,-2.982101,1.079015,-5.208572,-5.884859,9.788535,6.380708,-9.235920,7.825612,-6.702840,-4.083405,-8.870794,-5.672888,4.798087,-5.865379,-5.743748,-0.251801,-7.733610,-5.190367,-5.784902,0.951682,7.113683,-9.229390,1.189336,-2.448893,3.138362,-6.172531,-5.880816,-5.986215,6.851809,3.334075,8.506235,-1.279701,-9.701444,-0.818347,-7.947727,-7.533246,-3.471037,6.028667,4.826594,-9.091644,-2.336220,-4.150425,0.219401,4.988697,4.585334,-3.666777,-6.116468,5.446858,2.788693,5.939049,9.353060,1.977941,8.252456,4.561038,-9.310457,2.221563,6.870332,3.732925,4.165228,7.869602,-4.501270,2.823970,-1.201728,8.103689,2.903239,9.774859,-8.250178,-7.778570,-3.020271,-3.565200,3.311168,7.207832,7.703269,1.543640,6.730451,-3.924654,-2.726759,-4.486416,-7.922220,-3.954437,7.937128,-2.476801,-3.480565,5.707942,3.442861,5.662725,4.392770,5.697329,-5.192081,5.638029,0.755237,1.777469,-5.326331,-6.298765,1.447419,-3.820068,2.863819,-2.013417,3.396369,-4.867489,-4.858307,-2.692818,-8.683770,-8.431864,-7.633730,4.003108,0.713485,-3.503239,-8.558242,-1.112455,4.059649,-7.578981,-1.728277,4.192285,-8.318816,-8.319118,7.854554,6.107412,-4.639952,-8.666344,7.114488,-3.246625,-3.127660,-5.479795,7.529564,-0.542026,0.095747,6.799577,-4.967946,-2.841279,-1.334957,6.571836,0.917474,-3.107472,-1.588583,-4.120356,-6.831566,0.516439,5.885949,6.974862,-7.491636,-8.497012,7.971405,2.844248,-4.013299,-4.993935,-5.251546,-5.982481,-8.611947,9.437011,-5.863235,7.790835,-2.207248,9.929597,-9.441851,8.701578,4.669519,8.929008,9.979604,-1.773864,-0.501973,3.201687,-8.617516,-4.870445,-2.907675,7.217331,9.440945,6.559270,5.630550,-9.497812,4.831933,9.901781,8.844610,9.003437,5.207028,-7.099241,2.942312,2.149900,0.065944,-6.019214,0.327522,-2.770759,-0.950323,0.898291,6.965628,-6.524953,4.910255,2.539932,-0.789440,8.615641,-4.552096,3.123456,2.937692,2.266075,-1.922128,-3.023747,1.183269,-6.748983,-1.507089,-8.547647,2.521120,7.203172,-9.130920,5.383041,1.375327,-3.428801,-9.299209,6.621852,-7.871672,1.603655,8.113048,1.361144,-0.315591,-5.529670,0.858879,-5.204521,8.274722,8.399487,-1.197936,-5.516147,5.076758,0.124307,-9.465121], dtype = "float64")#candidate|11409|(864,)|const|float64
const_11410 = relay.const([-5.842618,7.501829,4.247300,3.053737,6.123238,6.994046,-6.263005,-6.586453,3.198381,4.087772,0.039968,-6.891837,3.836940,5.403832,-2.653144,8.491679,5.305820,6.371340,7.181580,-6.971406,-7.814725,5.240117,-9.109209,4.195728,8.322010,-1.158052,4.750997,-0.661961,0.200862,6.362828,7.762819,-4.438848,5.486587,2.865467,-8.945711,-8.922186,6.257442,3.468925,3.083998,1.919750,2.417612,0.074533,-2.302141,6.534510,-9.385831,0.080901,9.877442,-5.627936,-9.543028,4.113983,6.619788,3.442052,4.606686,-5.557413,2.020720,-6.427504,-0.393615,5.063711,9.315208,-3.092117,-2.333200,7.059805,2.762000,-5.740581,7.453154,-8.942458,5.071330,1.879145,-5.628338,0.418815,-2.802147,-4.366937,-5.243489,0.313615,5.033388,2.980513,-3.337045,5.933888,-3.224086,9.749230,-8.119144,-8.789414,8.621128,-6.879529,-7.115760,5.696416,8.735739,8.904626,-8.394975,-1.785739,-4.324335,6.654547,-2.600426,-5.062091,-1.695186,9.299638,6.337466,2.067494,4.034257,-3.791325,6.934175,-5.105798,7.149075,-4.590206,7.221952,9.772566,-8.525421,-5.035957,-6.737193,7.515358,-5.807940,8.149450,7.783935,-0.219848,-1.660807,-4.200577,-3.574479,2.478883,-8.722197,3.275963,-0.196807,3.303580,1.896144,4.961164,-0.748306,9.070216,2.364434,-0.513333,1.549712,-6.044395,8.387370,6.293483,1.958408,1.679205,2.747983,5.454074,-5.930020,-2.763162,-9.697265,8.058607,8.504612,3.200568,1.053873,5.546901,-6.643786,-6.451130,-9.572863,-3.889668,-1.186140,0.017170,-2.286913,7.086729,3.809732,9.236323,-1.623846,-7.727298,2.185281,-4.985381,0.080350,5.536337,0.224799,7.596486], dtype = "float32")#candidate|11410|(162,)|const|float32
call_11408 = relay.TupleGetItem(func_3307_call(relay.reshape(const_11409.astype('float64'), [12, 12, 6]), relay.reshape(const_11409.astype('float64'), [12, 12, 6]), relay.reshape(const_11409.astype('bool'), [12, 12, 6]), relay.reshape(const_11410.astype('float32'), [162,]), ), 0)
call_11411 = relay.TupleGetItem(func_3312_call(relay.reshape(const_11409.astype('float64'), [12, 12, 6]), relay.reshape(const_11409.astype('float64'), [12, 12, 6]), relay.reshape(const_11409.astype('bool'), [12, 12, 6]), relay.reshape(const_11410.astype('float32'), [162,]), ), 0)
var_11435 = relay.var("var_11435", dtype = "int64", shape = (12, 12, 6))#candidate|11435|(12, 12, 6)|var|int64
bop_11436 = relay.floor_divide(call_11408.astype('float64'), relay.reshape(var_11435.astype('float64'), relay.shape_of(call_11408))) # shape=(12, 12, 6)
bop_11439 = relay.floor_divide(call_11411.astype('float64'), relay.reshape(var_11435.astype('float64'), relay.shape_of(call_11411))) # shape=(12, 12, 6)
bop_11440 = relay.right_shift(call_11408.astype('uint8'), relay.reshape(bop_11436.astype('uint8'), relay.shape_of(call_11408))) # shape=(12, 12, 6)
bop_11443 = relay.right_shift(call_11411.astype('uint8'), relay.reshape(bop_11439.astype('uint8'), relay.shape_of(call_11411))) # shape=(12, 12, 6)
func_11370_call = mod.get_global_var('func_11370')
func_11372_call = mutated_mod.get_global_var('func_11372')
call_11444 = relay.TupleGetItem(func_11370_call(), 0)
call_11445 = relay.TupleGetItem(func_11372_call(), 0)
func_3698_call = mod.get_global_var('func_3698')
func_3700_call = mutated_mod.get_global_var('func_3700')
const_11461 = relay.const([[False,False,True,True,True,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,False,False,False,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,True,True,True,False,False,False,False,False,False,True,False,False,True,False,True,True,False,False,True,True,True,True,False,False,False,False,True,True,False,False,True,False,True,True,False,True,True,False,True,False,True,True,False,False,False,True,False,False,True,True,True,False,True,False,True,True,False,False,False,False,False,False,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,False,True,False,True,False,False,False,False,True,True,False,False,False,True,False,False,True,False,True,False,False,True,False,False,False,False,True,True,False,False,True,False,True,True,True,True,False,False,False,True,True,False,True,True,True,False,True,True,False,False,True,False,False,True,False,False,True,True,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,True,False,False,True,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,False,True,True,True,True,True,False,True,True,False,False,False,False,False,True,False,True,False,False,True,True,False,False,True,False,True,True,True,False,False,False,False,True,False,True,True,True,True,False,False,True,False,False,False,False,True,False,True,True,False,False,True,False,True,False,False,False,True,True,False,True,True,False,True,True,True,False,True,False,False,True,False,True,False,False,True,True,False,True,True,False,True,False,False,False,False,False,True,False,True,True,True,False,False,False,False,True,False,True,False,True,False,False,False,False,False,True,False,False,False,True,False,False,True,False,False,True,False,True,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,True,True,False,False,True,False,True,False,False,True,True,False,True,True,False,True,False,True,False,True,True,True,True,False,True,True,True,False,False,False,False,True,True,True,True,True,True,False,True,False,True,True,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,True,False,False,True,True,True,False,False,False,True,True,True,True,True,False,False,False,True,False,True,True,False,True,True,False,True,False,True,True,True,True,False,True,True,True,False,False,True,False,True,True,False,False,False,True,False,False,True,False,False,False,True,False,False,True,True,True,True,False,False,False,False,False,False,True,True,False,False,False,True,True,True,True,True,True,False,True,True,False,True,True,False,True,False,False,False,True,True,True,True,True,False,True,True,False,True,False,False,True,True,True,False,False,False,True,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,False,False,False,False,True,False,True,False,True,False,False,False,False,False,True,True,True,True,False,True,False,False,False,True,True,False,True,False,True,False,False,True,False,True,True,True,True,False,False,True,False,False,True,False,False,False,False,True,False,False,True,False,True,True,True,False,False,False,True,True,True,True,False,True,False,False,True,False,False,True,True,True,True,False,True,False,True,True,True,True,False,False,True,True,False,False,True,False,False,False,True,True,False,True,True,False,True,False,False,False,True,True,True,False,False,False,False,True,False,False,False,False,False,True,True,False,True,False,False,True,True,True,True,True,True,False,True,False,False,False,False,True,True,True,True,True,False,False,False,False,False,False,False,False,True,True,True,False,True,True,False,False,True,True,True,False,True,True,False,True,True,True,False,False,False,True,False,False,True,False,False,True,True,False,False,False,True,True,True,True,False,True,True,True,False,True,True,True,False,False,False,True,True,False,True,True,True,True,False,True,False,False,False,True,True,False,True,False,True,False,True,False,True,True,True,True,False,True,False,False,True,False,True,False,False,False,True,False,False,True,True,False,False,True,True,True,False,False,True,True,True,True,True,False,False,True,False,False,False,False,False,True,True,True,True,True,True,False,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,False,False,True,False,False,True,True,False,True,True,False,True,True,True,True,False,False,True,False,True,False]], dtype = "bool")#candidate|11461|(1, 840)|const|bool
call_11460 = relay.TupleGetItem(func_3698_call(relay.reshape(const_11461.astype('bool'), [12, 10, 7])), 0)
call_11462 = relay.TupleGetItem(func_3700_call(relay.reshape(const_11461.astype('bool'), [12, 10, 7])), 0)
func_7967_call = mod.get_global_var('func_7967')
func_7971_call = mutated_mod.get_global_var('func_7971')
var_11466 = relay.var("var_11466", dtype = "int32", shape = (216,))#candidate|11466|(216,)|var|int32
var_11467 = relay.var("var_11467", dtype = "float32", shape = (143,))#candidate|11467|(143,)|var|float32
call_11465 = relay.TupleGetItem(func_7967_call(relay.reshape(var_11466.astype('int32'), [2, 12, 9]), relay.reshape(var_11466.astype('int32'), [2, 12, 9]), relay.reshape(var_11467.astype('float32'), [1, 143]), ), 0)
call_11468 = relay.TupleGetItem(func_7971_call(relay.reshape(var_11466.astype('int32'), [2, 12, 9]), relay.reshape(var_11466.astype('int32'), [2, 12, 9]), relay.reshape(var_11467.astype('float32'), [1, 143]), ), 0)
output = relay.Tuple([call_11401,const_11409,const_11410,bop_11440,call_11444,call_11460,const_11461,call_11465,var_11466,var_11467,])
output2 = relay.Tuple([call_11402,const_11409,const_11410,bop_11443,call_11445,call_11462,const_11461,call_11468,var_11466,var_11467,])
func_11472 = relay.Function([var_11435,var_11466,var_11467,], output)
mod['func_11472'] = func_11472
mod = relay.transform.InferType()(mod)
mutated_mod['func_11472'] = func_11472
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11472_call = mutated_mod.get_global_var('func_11472')
var_11474 = relay.var("var_11474", dtype = "int64", shape = (12, 12, 6))#candidate|11474|(12, 12, 6)|var|int64
var_11475 = relay.var("var_11475", dtype = "int32", shape = (216,))#candidate|11475|(216,)|var|int32
var_11476 = relay.var("var_11476", dtype = "float32", shape = (143,))#candidate|11476|(143,)|var|float32
call_11473 = func_11472_call(var_11474,var_11475,var_11476,)
output = call_11473
func_11477 = relay.Function([var_11474,var_11475,var_11476,], output)
mutated_mod['func_11477'] = func_11477
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11479 = relay.var("var_11479", dtype = "float32", shape = (8, 2, 11))#candidate|11479|(8, 2, 11)|var|float32
var_11480 = relay.var("var_11480", dtype = "float32", shape = (8, 2, 11))#candidate|11480|(8, 2, 11)|var|float32
bop_11481 = relay.mod(var_11479.astype('float32'), relay.reshape(var_11480.astype('float32'), relay.shape_of(var_11479))) # shape=(8, 2, 11)
output = relay.Tuple([bop_11481,])
output2 = relay.Tuple([bop_11481,])
func_11484 = relay.Function([var_11479,var_11480,], output)
mod['func_11484'] = func_11484
mod = relay.transform.InferType()(mod)
mutated_mod['func_11484'] = func_11484
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11484_call = mutated_mod.get_global_var('func_11484')
var_11486 = relay.var("var_11486", dtype = "float32", shape = (8, 2, 11))#candidate|11486|(8, 2, 11)|var|float32
var_11487 = relay.var("var_11487", dtype = "float32", shape = (8, 2, 11))#candidate|11487|(8, 2, 11)|var|float32
call_11485 = func_11484_call(var_11486,var_11487,)
output = call_11485
func_11488 = relay.Function([var_11486,var_11487,], output)
mutated_mod['func_11488'] = func_11488
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10820_call = mod.get_global_var('func_10820')
func_10821_call = mutated_mod.get_global_var('func_10821')
call_11509 = relay.TupleGetItem(func_10820_call(), 3)
call_11510 = relay.TupleGetItem(func_10821_call(), 3)
const_11512 = relay.const([[True,True,True,False,False,False,True,True,False,True,False,True,True,False,False,True,True,False,False,False,True,False,False,True,False,False,True,False,False,False,True,True,True,False,True,True,False,False,False,True,True,False,False,False,True,False,True,False,True,False,True,False,False,True,True,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,False,False,True,False,True,False,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,True,True,False,False,False,True,True,False,True,False,False,False,True,True,True,False,False,True,False,False,True,False,False,True,False,True,False,True,False,False,True,False,False,False,False,False,True,True,False,False,True,True,False,True,False,True,True,False,True,True,True,False,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,True,True,False,False,True,True,False,True,False,False,False,True,True,True,False,False,False,True,True,False,True,True,True,True,True,False,False,False,False,False,True,False,False,True,False,True,False,False,False,False,False,False,True,False,False,True,False,False,False,False,True,False,True,False,True,False,False,False,False,False,False,True,False,False,False,False,True,True,False,True,True,True,False,True,True,False,False,True,False,True,True,True,True,False,True,False,True,True,False,True,False,True,True,False,True,True,True,True,False,True,False,False,False,False,True,True,False,True,True,True,False,False,False,True,True,False,False,False,True,False,True,True,True,False,False,True,False,True,False,False,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,True,True,True,True,False,True,False,False,True,True,False,False,True,True,False,True,True,False,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,False,False,False,False,False,True,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,False,True,False,True,False,False,True,False,True,False,True,False,False,True,True,False,False,False,True,True,False,False,True,True,False,False,False,True,False,True,False,False,False,False,True,False,True,True,False,False,True,False,False,True,True,False,True,True,False,False,False,False,True,False,True,True,False,True,False,True,False,False,True,False,True,True,False,False,False,True,False,True,True,True,False,False,True,True,False,True,False,False,False,True,False,True,False,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,True,False,True,True,True,False,True,True,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,True,True,True,True,False,False,False,True,False,True,False,False,False,True,True,False,True,False,False,False,False,False,True,False,True,False,True,True,True,True,False,False,True,False,True,True,False,False,False,True,True,False,True,False,True,False,False,True,True,True,True,True,True,True,True,False,True,True,True,False,False,False,False,True,False,False,False,False,False,False,True,True,False,False,True,False,True,False,True,False,True,False,True,False,True,True,True,False,False,False,False,False,False,True,False,False,True,False,True,True,True,False,False,True,True,False,True,False,False,False,False,True,True,True,True,False,False,False,True,False,True,True,True,True,False,True,False,True,True,True,False,False,True,True,False,False,True,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,False,False,False,True,False,False,False,True,False,True,True,True,True,True,False,False,False,True,False,False,True,True,False,True,True,True,True,True,False,False,True,False,False,False,True,True,False,True,False,False,False,True,False,True,True,False,False,True,False,False,True,True,False,False,False,True,True,True,False,True,True,False,True,False,False,False,True,False,True,True,False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,False,False,True,True,False,False,True,True,False,False,False,False,True,True,False,True,False,True,True,False,False,True,False,False,True,False,True,False,True,True,True,False,True,False,True,True,True,True,True,True,True,True,True,False,False,True,False,False,False,True,True,False,False,True,False,True],[False,False,False,True,True,True,True,False,False,True,True,True,False,False,False,True,False,True,False,False,False,False,True,False,True,False,False,True,True,True,True,True,True,True,True,False,False,False,False,False,True,True,True,True,False,True,True,False,False,True,False,False,True,True,False,False,True,True,True,True,False,False,False,True,True,True,True,False,False,True,False,True,False,False,True,False,True,False,False,False,True,True,False,False,False,True,False,False,False,True,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False,True,False,True,True,False,True,False,True,False,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,False,True,False,True,True,False,False,True,True,True,True,False,True,True,True,True,False,False,False,True,True,False,False,True,True,False,True,False,False,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,False,False,False,False,False,False,True,True,True,True,True,False,False,False,False,False,False,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,False,False,True,True,False,False,True,False,True,True,False,True,True,True,True,True,True,False,False,False,False,False,True,False,True,True,True,True,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,True,False,False,False,True,False,True,True,False,False,False,True,False,True,True,False,False,False,False,False,False,True,True,False,False,True,True,False,False,True,False,True,True,False,True,True,False,False,False,False,False,False,False,True,True,True,True,True,True,False,True,False,True,False,False,True,True,False,True,True,True,True,True,True,True,False,False,False,True,False,False,True,False,False,False,True,True,False,True,True,False,False,True,True,True,True,True,False,True,False,False,True,False,True,False,True,True,False,True,False,False,False,False,False,False,False,True,False,False,False,True,False,True,False,False,False,True,True,False,True,True,False,False,True,True,False,True,True,False,False,True,False,False,True,False,True,False,True,True,False,False,False,True,True,False,True,True,True,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,True,True,False,False,True,False,True,False,False,True,True,True,True,False,False,False,False,True,True,True,True,True,False,True,False,False,True,False,True,True,True,False,True,True,False,False,True,True,False,True,False,True,False,True,True,False,True,True,False,False,True,True,False,True,False,False,False,False,False,True,True,True,True,False,True,True,True,False,False,True,False,False,True,False,True,False,True,False,False,True,True,True,False,True,False,True,True,False,True,True,True,False,True,False,True,False,True,False,False,True,True,False,True,False,True,False,True,False,True,True,True,False,False,True,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,True,True,False,True,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,True,True,False,False,True,False,False,False,True,True,True,False,False,False,False,False,False,False,False,True,True,True,False,True,True,False,False,False,True,True,False,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,True,False,True,False,True,True,True,True,False,True,True,False,True,False,False,True,False,False,False,True,False,False,True,False,False,False,False,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,False,False,True,False,False,True,True,False,True,True,False,False,False,False,False,False,False,True,False,True,False,False,True,True,True,True,False,True,True,True,False,True,False,True,False,False,False,True,False,True,False,False,True,False,True,True,False,True,True,False,False,True,False,True,True,True,False,True,False,True,False,False,True,False,True,True,False,False,False,False,True,False,True,True,True,False,False,True,True,True,False,True,True,False,False,False,False,True,True,False,False,True,True,True,False,False,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,True,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,False,True,False,False,False,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,False,False],[True,True,True,True,True,False,False,False,False,False,True,True,True,True,True,False,True,True,False,True,False,True,False,False,True,True,False,False,False,False,False,True,True,True,False,False,False,True,False,False,True,True,True,False,False,True,True,True,False,True,False,False,False,False,False,True,True,False,True,False,False,False,True,True,True,False,True,True,True,False,False,False,True,True,True,False,False,False,True,False,True,False,False,True,False,False,False,False,False,False,False,False,False,True,True,True,True,True,True,False,True,True,True,False,False,False,False,True,False,False,True,True,False,False,False,False,False,False,False,True,False,False,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,False,True,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,False,True,False,False,False,True,True,True,True,False,False,True,True,False,True,False,False,False,False,False,True,False,True,False,False,True,False,True,False,True,False,True,False,False,True,False,False,False,True,True,True,True,True,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,True,False,True,False,True,True,False,True,True,False,True,False,False,False,True,True,True,False,True,False,True,False,True,False,True,False,True,True,False,True,True,False,False,False,False,True,True,False,False,False,True,False,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,False,False,True,False,False,True,False,False,True,True,False,False,False,False,True,False,True,False,False,False,False,False,False,True,True,False,True,False,True,False,True,False,False,False,False,False,False,False,True,True,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,True,True,True,True,True,True,False,True,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,False,True,True,True,True,True,False,True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,True,False,False,False,False,False,True,False,True,True,False,False,False,False,False,True,False,False,True,False,True,True,True,True,False,False,True,False,True,False,False,False,False,True,False,False,True,True,False,False,False,True,False,False,True,False,False,True,False,True,True,True,False,False,False,False,True,False,False,False,False,True,False,False,False,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,False,True,False,False,True,True,False,False,True,True,False,True,False,True,True,False,False,True,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,True,True,False,False,False,False,True,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,True,True,True,True,True,True,False,False,True,True,False,True,False,False,False,True,True,True,False,False,True,True,True,True,False,True,True,False,True,True,False,False,False,True,True,False,False,True,False,False,False,False,True,False,False,True,False,True,False,False,True,True,True,False,False,False,True,False,False,False,True,False,False,False,True,True,False,False,False,False,False,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,False,False,False,False,False,False,True,True,True,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,False,True,False,True,False,False,True,False,False,True,False,False,True,True,False,False,False,True,False,True,True,False,False,False,True,True,False,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,False,False,False,False,True,True,True,False,True,False,False,False,True,True,False,False,True,True,True,False,True,False,True,True,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,True,False,False,True,False,True,False,True,True,False,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,False,True,False,False,True,True,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,False,True,True,False,True,False,True,True,False,False,False,True,True,True,False,True,True,True,False,True,True,True,False,False,False,True,True,True,True,False,False,False,True,True,False,False,False],[True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,False,False,False,False,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,False,False,False,False,True,True,True,False,True,True,False,True,True,False,False,False,True,True,True,True,False,False,False,False,False,True,True,True,False,False,True,False,False,True,False,True,False,True,True,True,False,True,False,True,True,True,True,True,False,True,False,True,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,True,False,True,False,True,True,False,True,False,True,True,False,True,False,True,True,False,False,True,False,True,False,True,False,True,True,False,False,False,True,True,True,False,True,True,True,False,True,False,False,True,True,False,False,False,False,True,False,False,False,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,True,False,False,True,False,True,False,False,True,True,False,True,False,False,True,True,True,True,True,True,True,True,False,False,True,True,False,True,False,False,False,True,False,True,True,False,False,True,False,True,False,False,True,False,False,False,True,False,True,True,True,True,False,True,True,True,False,True,True,True,True,True,False,True,False,True,False,False,False,False,False,True,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,False,True,True,True,False,False,True,False,True,True,False,True,True,False,True,False,True,False,False,True,False,True,False,True,True,True,True,True,False,False,True,False,True,False,True,False,True,True,False,False,False,False,True,True,False,True,False,False,True,False,True,True,True,True,False,False,False,True,True,True,False,True,True,True,True,True,True,False,False,True,False,False,True,False,True,False,True,True,False,False,True,True,False,False,False,False,False,True,False,False,False,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,False,False,True,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,False,True,True,False,False,False,True,False,False,True,False,True,True,False,False,True,False,True,False,True,False,True,True,True,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,True,False,False,False,True,False,True,True,True,True,True,True,True,False,False,False,True,True,False,True,False,False,True,True,False,False,True,True,True,True,True,False,True,True,True,False,True,False,False,False,False,True,True,True,True,False,True,False,True,True,False,True,False,True,True,False,True,False,True,True,True,True,True,False,False,False,True,False,True,True,False,True,False,False,False,True,False,True,True,True,True,True,True,True,True,False,True,False,False,True,True,True,False,True,True,False,True,False,False,False,True,True,True,True,True,True,False,True,True,False,False,False,True,True,True,False,True,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,True,True,True,False,False,False,True,True,False,False,True,True,True,False,False,True,True,True,False,False,True,True,False,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,False,True,False,False,False,True,False,False,False,True,True,True,False,True,False,False,False,True,False,False,False,False,True,False,False,False,True,True,True,False,True,True,True,True,True,True,False,False,False,True,True,True,False,True,False,False,True,False,True,True,False,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,True,False,False,True,True,True,False,True,True,True,True,False,True,False,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,False,True,False,False,True,True,True,True,False,False,False,True,True,False,False,True,False,False,False,False,False,True,True,False,True,True,True,True,True,True,False,True,False,True,True,False,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,True,False,True,True,True,False,True,False,False,False,True,True,False,False,True,False,False,True,True,True,False,False,False,True,False,False,False,False,True,True,False,False,True,False,True,True,False,False,True,False,False,False,False,True,False,True,True,True,False,True,False,False,True,False,False,True,True,False,True,False,True,False,False,False,False,True,True,False,False,True,True,False,True,True,True,False],[False,True,True,False,False,True,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,False,False,True,False,False,True,True,True,True,True,False,True,False,False,False,False,True,False,True,False,True,False,True,False,True,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True,False,True,True,False,True,True,True,False,True,False,False,False,False,False,False,True,False,False,False,True,False,False,True,False,False,False,True,False,True,False,False,False,False,True,False,True,False,True,False,True,True,False,True,False,False,True,True,False,True,False,False,False,False,True,False,False,True,True,True,True,False,True,True,False,False,True,True,False,True,True,True,False,False,False,False,False,True,False,True,False,False,True,False,False,False,True,False,False,False,True,True,False,False,False,False,False,True,False,False,False,True,True,True,True,True,True,False,False,True,True,True,True,False,True,True,False,False,False,False,True,True,True,True,False,True,False,False,True,False,True,True,True,False,False,True,False,False,True,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,False,False,False,False,False,True,False,True,False,True,False,True,False,False,True,True,False,False,True,False,True,True,True,False,False,False,False,True,True,False,True,True,False,True,True,True,False,True,False,True,False,False,False,True,False,True,False,True,True,False,True,True,True,False,True,True,False,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,True,True,True,True,True,False,True,True,False,True,True,True,True,True,True,True,True,False,False,True,True,False,False,True,True,False,True,True,True,True,True,False,True,True,False,False,True,True,True,True,False,False,False,True,True,False,True,False,False,True,False,False,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,False,False,False,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,True,True,False,False,False,False,False,False,True,True,True,False,False,True,False,False,False,True,False,True,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,False,True,True,False,False,False,False,True,False,True,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,False,True,False,False,False,True,False,False,True,True,False,True,True,False,True,False,True,True,False,True,False,True,False,True,False,False,True,False,False,False,True,False,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,False,False,False,False,False,True,False,False,False,True,False,True,True,True,True,False,True,True,False,False,True,True,True,True,False,False,False,True,False,True,True,False,False,False,True,False,True,True,False,True,False,True,False,False,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,True,False,False,True,False,True,True,True,False,False,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,True,False,True,False,False,False,False,True,False,False,True,True,True,True,False,False,True,False,False,True,False,True,True,True,True,False,True,False,False,False,True,True,False,False,True,True,False,True,False,True,True,False,False,False,True,True,False,False,True,True,True,True,False,False,True,True,True,False,True,True,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,False,False,True,False,True,False,False,True,False,False,False,True,True,False,True,False,True,False,False,False,True,False,False,True,True,False,False,True,True,False,False,True,False,False,True,False,False,True,True,True,False,True,False,True,True,True,False,False,True,False,False,True,False,False,False,True,True,True,True,False,True,True,True,True,True,False,True,False,False,False,True,False,True,True,True,True,True,True,True,False,False,False,True,False,False,False,False,True,True,True,True,False,False,False,True,False,True,True,False,True,True,True,True,True,False,False,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,True,True,True,True,True,True,True,True,False,False,True,False],[False,False,False,False,True,True,True,True,False,True,True,True,False,True,False,False,False,True,False,False,False,True,True,True,False,False,False,True,False,True,True,False,True,True,True,True,False,False,False,True,True,False,False,True,True,False,True,False,True,True,False,True,True,True,False,True,True,False,False,True,False,False,False,True,True,True,False,False,True,True,True,False,True,True,True,False,True,False,False,True,False,False,False,True,True,True,False,False,True,True,False,True,True,False,True,False,True,True,False,False,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,False,False,True,True,False,False,True,True,True,True,False,True,False,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,True,False,False,False,True,True,True,True,True,False,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,True,False,False,False,True,False,False,True,False,True,False,False,False,True,False,True,True,False,False,False,True,False,False,True,True,False,True,True,True,False,False,True,False,True,True,True,True,False,True,True,True,True,False,False,True,False,True,False,False,False,False,False,False,False,True,True,False,False,True,False,True,True,True,True,False,False,True,True,False,False,True,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,True,False,True,False,False,False,False,True,False,False,True,True,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,True,True,False,False,False,False,False,True,False,False,True,True,False,True,False,True,True,False,False,False,False,True,False,False,False,False,False,True,True,True,False,True,False,False,True,False,False,True,True,False,False,False,True,False,False,True,False,True,False,False,False,False,True,False,True,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,True,False,False,False,False,False,True,False,False,True,True,False,False,False,False,True,False,True,False,True,True,False,False,False,False,True,False,False,False,False,False,True,False,True,True,True,True,False,True,True,False,False,True,False,True,False,True,True,True,True,False,False,True,False,False,True,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,True,False,True,True,True,True,False,False,False,True,False,False,False,False,False,True,True,True,True,False,False,True,False,True,False,True,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,True,True,False,False,True,True,True,False,True,True,False,False,True,False,False,True,True,True,False,True,False,False,False,False,True,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,False,True,True,False,False,False,True,False,True,True,False,True,True,True,True,True,False,False,True,True,True,False,True,True,False,True,True,True,True,True,True,True,False,False,True,False,True,True,True,False,False,True,False,False,True,True,True,True,True,False,True,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,True,True,False,False,True,False,True,True,False,False,False,False,False,False,False,True,True,True,True,True,False,False,False,False,True,True,True,False,True,True,True,False,False,True,False,False,False,False,True,False,False,False,False,False,False,True,True,True,False,False,False,False,True,False,False,False,True,True,False,True,True,False,True,True,True,False,True,True,False,True,False,False,True,False,True,True,True,False,False,True,True,False,True,False,False,True,False,False,True,False,True,False,False,False,True,False,False,True,True,False,False,True,True,True,False,False,False,True,False,False,True,True,False,False,True,False,False,True,False,True,False,True,True,False,False,False,False,False,True,False,True,True,True,False,False,True,False,False,True,False,False,False,False,False,False,True,True,False,True,True,True,True,True,False,True,True,True,False,True,False,False,False,False,True,False,False,True,False,True,False,True,True,False,True,False,False,False,True,True,True,False,False,False,True,True,False,False,False,False,False,False,False,False,False,True,True,True,False,True,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,False,True,False,False,True,False,False,True,True,False,False,False,False,True,False,True,False,False,True]], dtype = "bool")#candidate|11512|(6, 840)|const|bool
bop_11513 = relay.logical_and(call_11509.astype('bool'), const_11512.astype('bool')) # shape=(6, 840)
bop_11516 = relay.logical_and(call_11510.astype('bool'), const_11512.astype('bool')) # shape=(6, 840)
var_11517 = relay.var("var_11517", dtype = "bool", shape = (6, 840))#candidate|11517|(6, 840)|var|bool
bop_11518 = relay.bitwise_or(const_11512.astype('uint64'), relay.reshape(var_11517.astype('uint64'), relay.shape_of(const_11512))) # shape=(6, 840)
func_9256_call = mod.get_global_var('func_9256')
func_9258_call = mutated_mod.get_global_var('func_9258')
var_11527 = relay.var("var_11527", dtype = "float32", shape = (24, 1))#candidate|11527|(24, 1)|var|float32
call_11526 = relay.TupleGetItem(func_9256_call(relay.reshape(var_11527.astype('float32'), [3, 4, 2])), 1)
call_11528 = relay.TupleGetItem(func_9258_call(relay.reshape(var_11527.astype('float32'), [3, 4, 2])), 1)
func_11041_call = mod.get_global_var('func_11041')
func_11044_call = mutated_mod.get_global_var('func_11044')
var_11535 = relay.var("var_11535", dtype = "float64", shape = (1056,))#candidate|11535|(1056,)|var|float64
call_11534 = relay.TupleGetItem(func_11041_call(relay.reshape(var_11535.astype('float64'), [1056, 1])), 0)
call_11536 = relay.TupleGetItem(func_11044_call(relay.reshape(var_11535.astype('float64'), [1056, 1])), 0)
func_11484_call = mod.get_global_var('func_11484')
func_11488_call = mutated_mod.get_global_var('func_11488')
var_11555 = relay.var("var_11555", dtype = "float32", shape = (176,))#candidate|11555|(176,)|var|float32
call_11554 = relay.TupleGetItem(func_11484_call(relay.reshape(var_11555.astype('float32'), [8, 2, 11]), relay.reshape(var_11555.astype('float32'), [8, 2, 11]), ), 0)
call_11556 = relay.TupleGetItem(func_11488_call(relay.reshape(var_11555.astype('float32'), [8, 2, 11]), relay.reshape(var_11555.astype('float32'), [8, 2, 11]), ), 0)
uop_11561 = relay.acosh(call_11509.astype('float32')) # shape=(1, 840)
uop_11563 = relay.acosh(call_11510.astype('float32')) # shape=(1, 840)
bop_11566 = relay.mod(bop_11518.astype('float32'), uop_11561.astype('float32')) # shape=(6, 840)
bop_11569 = relay.mod(bop_11518.astype('float32'), uop_11563.astype('float32')) # shape=(6, 840)
output = relay.Tuple([bop_11513,call_11526,var_11527,call_11534,var_11535,call_11554,var_11555,bop_11566,])
output2 = relay.Tuple([bop_11516,call_11528,var_11527,call_11536,var_11535,call_11556,var_11555,bop_11569,])
func_11570 = relay.Function([var_11517,var_11527,var_11535,var_11555,], output)
mod['func_11570'] = func_11570
mod = relay.transform.InferType()(mod)
var_11571 = relay.var("var_11571", dtype = "bool", shape = (6, 840))#candidate|11571|(6, 840)|var|bool
var_11572 = relay.var("var_11572", dtype = "float32", shape = (24, 1))#candidate|11572|(24, 1)|var|float32
var_11573 = relay.var("var_11573", dtype = "float64", shape = (1056,))#candidate|11573|(1056,)|var|float64
var_11574 = relay.var("var_11574", dtype = "float32", shape = (176,))#candidate|11574|(176,)|var|float32
output = func_11570(var_11571,var_11572,var_11573,var_11574,)
func_11575 = relay.Function([var_11571,var_11572,var_11573,var_11574,], output)
mutated_mod['func_11575'] = func_11575
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8786_call = mod.get_global_var('func_8786')
func_8787_call = mutated_mod.get_global_var('func_8787')
call_11588 = func_8786_call()
call_11589 = func_8786_call()
var_11590 = relay.var("var_11590", dtype = "float32", shape = (462,))#candidate|11590|(462,)|var|float32
bop_11591 = relay.divide(call_11588.astype('float64'), relay.reshape(var_11590.astype('float64'), relay.shape_of(call_11588))) # shape=(462,)
bop_11594 = relay.divide(call_11589.astype('float64'), relay.reshape(var_11590.astype('float64'), relay.shape_of(call_11589))) # shape=(462,)
func_9199_call = mod.get_global_var('func_9199')
func_9200_call = mutated_mod.get_global_var('func_9200')
call_11612 = relay.TupleGetItem(func_9199_call(), 2)
call_11613 = relay.TupleGetItem(func_9200_call(), 2)
bop_11617 = relay.greater_equal(var_11590.astype('bool'), relay.reshape(call_11588.astype('bool'), relay.shape_of(var_11590))) # shape=(462,)
bop_11620 = relay.greater_equal(var_11590.astype('bool'), relay.reshape(call_11589.astype('bool'), relay.shape_of(var_11590))) # shape=(462,)
const_11621 = relay.const([[[4.164834,9.887266],[8.171094,5.186439],[-8.631647,8.548894],[3.255817,0.153496]],[[-1.015987,-0.497480],[-5.315066,-9.441580],[-6.923128,3.434114],[-6.473989,-9.454150]],[[-1.549973,1.842305],[5.607089,8.661758],[3.178828,-0.501956],[9.425000,5.892873]]], dtype = "float32")#candidate|11621|(3, 4, 2)|const|float32
bop_11622 = relay.greater(call_11612.astype('bool'), relay.reshape(const_11621.astype('bool'), relay.shape_of(call_11612))) # shape=(3, 4, 2)
bop_11625 = relay.greater(call_11613.astype('bool'), relay.reshape(const_11621.astype('bool'), relay.shape_of(call_11613))) # shape=(3, 4, 2)
func_11276_call = mod.get_global_var('func_11276')
func_11281_call = mutated_mod.get_global_var('func_11281')
var_11628 = relay.var("var_11628", dtype = "float32", shape = (396,))#candidate|11628|(396,)|var|float32
const_11629 = relay.const([5.636927,4.898597,0.832117,-1.437359,-9.240589,-0.336151,2.698976,-9.491142,5.562484,-3.623982,1.801556,-9.805620,5.448842,7.279558,8.801080,1.741146,-1.418017,6.650598,0.897933,7.823247,8.278598,-9.599155,4.909669,-4.661939,-5.971927,-0.902043,6.541884,6.098506,-5.676811,4.487285,1.689423,-6.571572,9.848827,5.846356,7.286110,9.482661,3.985137,-6.552830,-1.459449,2.315074,6.273179,-2.281623,-2.353523,6.445543,-0.863016,-1.924054,5.740559,5.084646,-6.500289,-4.927218,9.888016,-8.370932,1.872079,2.558665,4.906565,-4.126213,5.950626,-3.699256,3.176794,-6.755185,-1.264386,8.369131,-7.256268,2.709341,-3.976883,-9.396653,2.768852,-4.064027,7.244916,-4.888819,-6.824261,-4.595156,1.246758,9.813120,-7.218651,-3.142278,5.828666,4.366478,-0.760826,-1.092247,-4.042486,-7.552327,-3.766735,-6.573461,8.234666,-5.737531,8.523450,6.006443,0.903111,5.914722,-9.169125,6.724533,-6.352125,3.946029,4.804140,0.284971,3.596319,9.371481,-7.005025,0.424438,-7.008494,8.929145,-6.166346,-6.616079,9.379676,-7.515816,2.944254,7.031168,-5.612584,-5.091066,8.916692,6.577387,6.308515,-9.774466,-8.487305,0.946357,6.897185,-5.055634,0.305727,-2.681888,4.814414,2.479280,-1.751968,-9.322564,8.323857,-4.955122], dtype = "float64")#candidate|11629|(126,)|const|float64
var_11630 = relay.var("var_11630", dtype = "bool", shape = (840,))#candidate|11630|(840,)|var|bool
call_11627 = relay.TupleGetItem(func_11276_call(relay.reshape(var_11628.astype('float32'), [66, 6]), relay.reshape(const_11629.astype('float64'), [126,]), relay.reshape(var_11630.astype('bool'), [840,]), ), 3)
call_11631 = relay.TupleGetItem(func_11281_call(relay.reshape(var_11628.astype('float32'), [66, 6]), relay.reshape(const_11629.astype('float64'), [126,]), relay.reshape(var_11630.astype('bool'), [840,]), ), 3)
var_11645 = relay.var("var_11645", dtype = "float32", shape = (3, 4, 2))#candidate|11645|(3, 4, 2)|var|float32
bop_11646 = relay.maximum(const_11621.astype('uint8'), relay.reshape(var_11645.astype('uint8'), relay.shape_of(const_11621))) # shape=(3, 4, 2)
output = relay.Tuple([bop_11591,bop_11617,bop_11622,call_11627,var_11628,const_11629,var_11630,bop_11646,])
output2 = relay.Tuple([bop_11594,bop_11620,bop_11625,call_11631,var_11628,const_11629,var_11630,bop_11646,])
func_11663 = relay.Function([var_11590,var_11628,var_11630,var_11645,], output)
mod['func_11663'] = func_11663
mod = relay.transform.InferType()(mod)
var_11664 = relay.var("var_11664", dtype = "float32", shape = (462,))#candidate|11664|(462,)|var|float32
var_11665 = relay.var("var_11665", dtype = "float32", shape = (396,))#candidate|11665|(396,)|var|float32
var_11666 = relay.var("var_11666", dtype = "bool", shape = (840,))#candidate|11666|(840,)|var|bool
var_11667 = relay.var("var_11667", dtype = "float32", shape = (3, 4, 2))#candidate|11667|(3, 4, 2)|var|float32
output = func_11663(var_11664,var_11665,var_11666,var_11667,)
func_11668 = relay.Function([var_11664,var_11665,var_11666,var_11667,], output)
mutated_mod['func_11668'] = func_11668
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10820_call = mod.get_global_var('func_10820')
func_10821_call = mutated_mod.get_global_var('func_10821')
call_11678 = relay.TupleGetItem(func_10820_call(), 1)
call_11679 = relay.TupleGetItem(func_10821_call(), 1)
var_11680 = relay.var("var_11680", dtype = "float64", shape = (9, 16, 14))#candidate|11680|(9, 16, 14)|var|float64
bop_11681 = relay.floor_mod(call_11678.astype('float32'), var_11680.astype('float32')) # shape=(9, 16, 14)
bop_11684 = relay.floor_mod(call_11679.astype('float32'), var_11680.astype('float32')) # shape=(9, 16, 14)
func_6254_call = mod.get_global_var('func_6254')
func_6257_call = mutated_mod.get_global_var('func_6257')
const_11690 = relay.const([True,False,True,False,True,False,True,True,True,True,True,False,False,False,True,True,True,True,False,True,True,False,True,False,False,True,True,True,False,False,True,False,False,False,False,True,False,False,False,True,True,False,False,True,False,True,False,False,False,True,True,False,True,True,False,True,False,True,False,False,True,True,False,True,True,True,False,False,True,True,True,False,True,True,False,True,True,False,True,True,True,True,True,True,False,True,False,False,True,True,False,False,False,True,False,False,False,False,False,True,True,True,True,False,True,True,False,False,False,True,True,True,False,True,False,False,False,True,False,True,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,True,False,True,False,True,False,True,True,True,True,False,True,True,False,True,False,False,False,False,True,False,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,False,False,False,False,True,False,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,False,False,True,True,True,False,True,True,False,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,True,False,True,False,False,True,True,False,True,False,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,True,True,False,True,True,False,True,True,True,True,True,False,True,False,True,True,False,True,False,True,True,True,True,False,True,True,False,False,True,True,True,False,False,True,False,True,True,True,True,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,False,False,False,False,False,False,True,True,False,True,True,False,True,False,True,False,True,False,False,True,True,True,False,False,True,False,False,True,False,True,False,False,True,False,False,True,False,True,True,True,False,False,True,True,False,True,True,False,True,False,True,False,True,True,True,False,True,True,True,True,False,True,True,True,False,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True,False,True,True,True,False,False,True,True,True,True,True,True,False,False,False,False,False,True,True,False,False,False,True,False,True,False,False,True,False,False,False,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,False,True,True,False,True,False,False,True,True,False,True,True,False,True,True,False,False,True,True,True,False,True,False,False,True,True,True,True,True,True,True,True,False,True,False,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,False,True,True,True,True,False,True,False,False,False,False,True,False,False,True,False,False,False,False,False,True,False,True,False,False,True,True,True,False,False,False,False,True,True,True,False,True,False,False,True,False,True,False,True,True,True,True,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,True,False,False,False,True,False,False,False,True,True,True,False,False,False,True,False,False,True,False,False,False,True,False,False,False,True,True,True,True,False,False,True,False,False,True,True,True,True,True,False,True,False,False,True,True,True,True,True,False,True,True,True,True,True,True,True,True,False,True,False,False,True,True,False,False,False,True,True,False,False,True,True,True,True,False,False,False,False,True,True,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False,True,True,True,True,False,True,True,False,False,True,False,True,False,False,False,True,True,True,True,True,True,True,True,True,True,False,True,True,False,False,True,True,True,False,False,True,True,False,False,True,True,False,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,False,False,True,False,False,True,True,True,False,False,False,False,True,True,True,False,False,False,False,True,True,True,True,True,False,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,False,True,True,True,False,True,False,False,True,False,True,False,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,False,True,False,False,True,False,True,True,False,False,True,True,True,True,False,True,True,True,True,False,True,False,True,False,False,True,True,False,False,False,False,True,False,False,True,True,False,False,False,True,True,True,False,False,True,False,False,False,False,True,False,True,True,True,True,True,True,False,False,True,False,False,False,False,False,True,False,True,False,False,False,True,False,False,True,True,False,True,True,False,False,False,True,True,True,False,True,False,False,True,False,True,True,False,True,True,False,True,False,False,False,False,True,False,False,False,True,True,False,False,True,False,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False,True,False,True,True,False,True,False,False,False,False,True,True,False,True,False,True,False,True,True,False,True,False,False,True,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,False,False,True,True,True,True,True,False,True,True,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,True,False,True,False,True,False,True,True,True,True,False,False,True,True,False,False,True,True,True,True,True,True,True,True,False,False,True,False,True,False,True,False,True,False,True,False,False,False,False,True,True,False,True,True,False,True,True,True,True,False,False,False,True,True,False,False,False,True,False,True,False,False,True,True,False,False,True,True,True,True,False,False,False,False,True,False,True,False,True,False,True,True,True,False,False,True,False,False,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,False,True,False,False,False,True,True,True,False,False,False,False,True,True,True,True,True,False,True,False,True,False,True,False,True,False,True,False,True,False,True,True,True,True,False,True,False,True,False,False,False,False,True,True,True,False,False,True,False,True,True,True,True,False,True,True,True,False,True,False,False,False,True,True,True,True,True,False,True,True,False,True,False,True,False,True,True,False,False,True,False,True,False,True,False,False,False,True,False,True,True,True,True,False,False,True,False,True,True,True,True,True,False,True,True,False,False,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,True,False,True,False,True,True,False,False,False,False,False,False,False,True,False,True,False,True,True,False,True,True,False,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,True,False,True,False,False,False,False,True,False,True,False,True,False,True,False,True,True,False,True,False,False,True,False,True,False,True,True,True,True,True,True,False,True,False,True,False,False,True,True,True,False,True,False,False,False,True,False,False,True,True,False,False,True,False,True,True,False,False,False,True,True,True,False,False,True,True,False,False,False,True,True,False,True,True,False,True,False,False,True,False,False,True,False,True,False,True,False,False,True,False,True,False,True,True,False,False,False,True,False,False,False,True,False,True,True,True,True,True,True,False,True,True,False,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,False,True,False,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,True,False,True,False,False,True,True,True,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,True,True,False,True,False,False,False,False,False,True,False,True,False,True,False,False,True,False,False,True,True,False,False,False,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,True,True,False,True,True,False,False,True,False,False,True,True,True,True,True,False,True,False,True,False,False,True,False,True,True,False,True,False,True,True,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,True,True,False,True,True,True,True,True,True,False,False,True,True,False,True,False,True,False,True,False,True,True,True,True,True,True,False,True,True,True,False,False,False,False,False,True,True,True,True,False,True,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,False,True,True,True,False,True,False,False,True,True,True,False,True,False,True,True,False,True,False,False,False,False,False,False,False,False,False,True,False,False,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,True,True,False,False,True,False,True,True,True,True,True,True,True,True,True,True,False,True,True,False,False,True,True,True,True,False,False,False,False,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,False,False,False,True,True,False,True,False,True,False,True,True,False,True,False,False,False,False,True,False,False,True,True,False,True,True,True,False,False,True,False,False,True,False,True,False,False,False,False,True,True,True,True,True,True,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,False,False,True,True,False,False,False,True,True,False,False,False,True,False,True,False,False,False,False,False,True,True,False,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,True,True,False,True,True,False,True,True,True,False,True,True,True,False,True,True,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,True,False,False,False,True,False,True,False,True,True,False,True,False,False,False,True,False,False,False,True,True,False,True,False,True,False,False,True,False,True,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,False,False,True,True,False,False,False,True,False,False,False,False,True,True,False,False,False,True,False,True,False,False,False,False,True,True,True,False,True,False,True,False,False,True,True,True,True,True,False,True,False,False,True,True,True,True,True,True,False,True,False,False,False,False,False,True,False,True,False,True,True,True,True,False,False,False,True,False,False,True,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,True,True,True,True,True,True,True,False,True,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,True,False,False,True,False,True,True,False,True,False,True,False,True,False,False,False,False,True,False,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,True,False,False,True,True,True,False,True,False,True,True,True,True,True,True,False,True,True,True,True,False,True,False,False,False,False,False,True,True,True,False,False,True,True,True,False,False,True,True,False,False,False,True,True,True,True,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,False,False,False,True,False,True,False,False,False,False,True,False,True,True,True,False,True,True,True,False,False,True,False,False,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,False,False,False,True,True,True,False,True,False,True,False,True,False,True,True,False,True,False,False,False,True,False,False,True,True,True,False,False,True,False,True,True,False,True,False,True,False,False,True,False,False,True,True,False,True,True,False,False,True,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,True,True,False,True,False,False,True,True,True,True,True,False,False,True,False,True,False,False,True,True,True,True,False,True,False,False,False,False,False,False,False,True,True,False,False,True,False,True,True,True,True,False,True,True,False,False,False,False,False,True,True,True,False,True,True,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,False,False,True,False,True,True,False,True,True,False,False,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,True,False,False,False,True,False,True,False,False,False,True,False,False,False,True,False,False,True,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,True,False,True,False,True,True,False,True,False,True,True,False,False,False,True,True,True,True,True,False,True,True,False,True,False,True,True,False,False,True,False,False,True,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,True,True,False,False,False,True,True,False,False,True,False,False,False,True,False,True,True,False,True,False,True,False,False,False,True,True,False,False,False,False,False,True,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,True,True,False,False,False,True,False,True,False,True,True,True,False,True,True,True,True,False,True,False,False,True,True,False,True,False,True,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,True,False,False,True,False,False,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,True,False,False,False,False,False,True,True,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,True,True,False,False,False,True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,True,True,False,False,True,True,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,False,False,False,False,True,True,False,True,True,True,False,True,True,True,False,True,False,False,True,False,False,False,True,True,True,True,True,False,False,True,False,False,True,False,False,True,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,True,True,True,True,False,False,True,False,False,False,False,True,True,True,False,False,True,False,True,True,False,False,True,True,True,False,True,True,True,False,True,False,False,False,True,False,False,True,False,False,True,True,True,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,True,True,True,False,True,True,False,False,True,False,True,True,False,True,False,False,True,True,False,False,True,False,True,False,False,True,False,True,True,False,True,False,True,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,True,False,True,False,False,True,False,True,True,False,True,True,False,False,True,False,False,True,True,True,False,True,True,True,False,False,False,False,False,False,True,True,True,False,False,True,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,True,False,True,False,False,True,False,True,True,True,False,False,False,False,False,True,False,True,False,True,False,True,True,True,True,False,True,False,True,False], dtype = "bool")#candidate|11690|(2912,)|const|bool
call_11689 = func_6254_call(relay.reshape(const_11690.astype('bool'), [13, 16, 14]))
call_11691 = func_6254_call(relay.reshape(const_11690.astype('bool'), [13, 16, 14]))
func_3698_call = mod.get_global_var('func_3698')
func_3700_call = mutated_mod.get_global_var('func_3700')
const_11696 = relay.const([True,True,False,True,True,True,True,True,False,False,True,True,True,False,False,False,False,True,True,False,True,False,True,False,True,True,True,False,True,True,False,True,False,False,False,False,False,True,True,False,True,False,True,False,True,True,True,True,False,False,True,False,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,False,True,True,False,False,True,True,True,False,True,False,True,True,False,True,True,False,True,False,True,True,False,True,False,True,True,False,True,True,False,True,False,True,False,False,True,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,True,False,True,True,True,False,True,True,True,True,False,True,False,True,False,False,True,False,False,True,True,True,True,True,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,False,True,False,False,True,True,False,True,False,False,False,False,True,True,True,False,False,False,False,False,True,True,False,True,True,True,True,False,False,True,False,True,False,False,True,True,False,True,True,False,True,True,False,False,False,False,False,False,False,False,True,True,False,True,False,True,True,False,True,True,True,True,False,True,True,True,False,True,False,True,False,True,False,False,True,False,False,False,True,False,False,False,True,False,True,False,True,False,False,False,False,True,True,False,False,True,False,False,False,False,False,False,False,False,True,True,True,True,True,False,False,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,True,False,True,True,True,True,False,True,True,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,True,False,False,False,True,True,True,False,False,True,True,True,False,True,False,True,True,False,True,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,False,False,False,False,False,False,True,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,False,True,True,False,False,False,False,False,False,True,False,False,True,True,True,False,False,True,False,True,True,True,False,True,False,False,True,False,False,True,True,False,True,False,False,True,False,True,True,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,True,True,True,False,True,True,False,False,True,True,False,False,False,True,True,False,True,True,False,False,False,True,False,True,False,True,True,True,True,True,False,True,False,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,False,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,False,True,False,True,False,True,True,True,True,True,True,False,True,True,False,False,True,True,False,False,False,False,False,False,True,False,True,False,True,True,False,True,False,False,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,True,True,False,True,True,False,False,False,False,False,True,True,False,False,False,False,True,False,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,False,False,True,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,True,True,True,True,False,True,True,False,False,True,False,False,False,False,True,True,True,True,True,True,True,True,True,True,True,True,False,True,False,True,True,True,True,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,True,False,True,False,True,True,False,False,True,True,False,False,True,True,True,True,False,True,True,False,False,False,True,False,False,False,False,False,False,True,False,True,True,False,True,False,True,True,False,False,True,True,False,False,False,False,True,False,True,False,False,True,True,True,True,True,True,True,True,True,False,False,False,True,False,False,True,True,True,False,True,False,True,True,False,True,True,False,False,False,False,False,False,True,False,True,True,True,True,False,True,True,False,True,True,False,True,False,True,True,False,False,True,True,False,False,True,True,False,True,False,False,True,False,False,True,True,True,True,False,True,False,False,False,True,True,False,True,True,False,False,False,False,True,True,False,True,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,False,False,True,True,False,False,True,False,False,False,False,False,False,True,False,False,True,True,True,True,True,False,False,True,False,True,False,True,True,True,False,True,True], dtype = "bool")#candidate|11696|(840,)|const|bool
call_11695 = relay.TupleGetItem(func_3698_call(relay.reshape(const_11696.astype('bool'), [12, 10, 7])), 0)
call_11697 = relay.TupleGetItem(func_3700_call(relay.reshape(const_11696.astype('bool'), [12, 10, 7])), 0)
output = relay.Tuple([bop_11681,call_11689,const_11690,call_11695,const_11696,])
output2 = relay.Tuple([bop_11684,call_11691,const_11690,call_11697,const_11696,])
func_11708 = relay.Function([var_11680,], output)
mod['func_11708'] = func_11708
mod = relay.transform.InferType()(mod)
var_11709 = relay.var("var_11709", dtype = "float64", shape = (9, 16, 14))#candidate|11709|(9, 16, 14)|var|float64
output = func_11708(var_11709)
func_11710 = relay.Function([var_11709], output)
mutated_mod['func_11710'] = func_11710
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9944_call = mod.get_global_var('func_9944')
func_9946_call = mutated_mod.get_global_var('func_9946')
call_11722 = func_9944_call()
call_11723 = func_9944_call()
func_9944_call = mod.get_global_var('func_9944')
func_9946_call = mutated_mod.get_global_var('func_9946')
call_11741 = func_9944_call()
call_11742 = func_9944_call()
func_11384_call = mod.get_global_var('func_11384')
func_11386_call = mutated_mod.get_global_var('func_11386')
const_11745 = relay.const([-7.034272,2.663843,-0.688482,3.580978,-1.778326,3.637124,5.033110,9.001651,-2.590160,5.510105,-6.390442,-9.535108,-1.325072,-7.324906,-1.408524,-5.471785,5.185403,3.738711,2.731180,-7.781577,1.590508,-5.825356,-8.057643,-6.201087,0.079674,-0.317560,0.636210,5.349217,-8.280522,4.414675,6.423375,8.713253,6.887483,-8.922993,4.641222,-7.029203,-6.218477,9.255568,-7.972986,8.429155,-1.522491,8.174539,-2.210823,4.132530,2.016198,-9.212669,-6.885299,5.978005,-6.598709,-9.910272,-8.269756,-5.404185,-5.069497,9.172715,8.872009,-3.077761,-5.228447,8.575064,-7.339968,2.398643,0.604334,-6.509041,-0.237106,8.889312,-9.304754,-1.713937,3.551113,3.903419,6.447012,-6.255128,-3.905343,-4.946128,3.851286,8.719086,-3.242033,5.936380,-8.451078,-4.918043,0.785163,-8.217470,9.547368,-5.358918,8.516457,-1.442224,6.546217,-6.312493,9.371428,-9.338364,-1.633735,-6.258449,3.783180,4.127273,-4.867309,-5.060851,3.467850,6.481848,8.976164,0.728736,4.472928,9.071759,8.140448,-1.852462,-4.926744,4.847213,8.463036,-3.009087,2.357695,-9.276552,5.834102,5.136710,5.508743,1.514012,-9.520890,-7.131611,6.037951,-7.337054,2.984750,3.997208,-0.487688,-6.257087,8.810982,-5.673568,-6.632354,-9.470479,3.807421,6.806529,-6.342371,0.584814,1.417321,-2.791862,-0.922578,3.755752,-9.135691,5.232481,9.849885,-7.341638,-3.677123,9.531729,3.802220,-7.539186,0.486378,-3.710562,7.306654,6.972093,8.526180,6.866289,-2.876666,8.897093,8.855577,1.992973,-0.340121,4.894561,-7.200711,-6.679269,-3.488503,-3.268594,-4.049797,7.510837,6.516958,-5.571443,7.481699,-7.809546,1.661114,-4.104511,-3.788176,1.394224,9.392480,-4.066602,-0.114207,2.719145,9.743984,-4.155336,-4.173270,9.151717,-7.425094,-0.690178,4.470897,-9.850444,-6.522144,-2.968023,-6.440261,-0.674288,-1.783477,-9.468858,4.730471,-6.696465,5.511678,-3.500028,-7.620292,7.967634,2.063580,-1.485891,-1.697638,4.001129,6.486868,-1.638269,-5.529474,8.361976,7.071360,8.811620,-7.491434,7.200183,-4.306751,6.839050,-9.809841,-5.975537,1.440209,-0.117967,4.340716,-3.378634,2.796257,-3.161007,3.413219,9.503190,5.619660,5.276125,-5.504032,-4.849623,-8.397869,8.644607,-4.792557,8.167147,9.510021,-6.440214,5.954788,9.153456,6.084403,-2.974552,-8.182046,1.432802,-6.440300,6.733012,1.074268,-9.625434,6.714723,-7.140448,5.225369,1.014339,-0.668434,4.625434,0.271020,-5.651837,-1.686711,0.186090,-2.558034,2.347571,-0.016557,2.707024,-4.298238,5.866189,-2.215603,7.719748,2.843101,-5.382541,-9.736235,-3.695768,-4.251126,-6.219668,3.972553,9.952451,-6.099424,4.503753,9.730870,6.988856,-8.522133,-0.082993,-1.589831,-6.990305,-1.571548,8.652913,-6.835272,-1.842047,7.293676,9.049908,0.895850,-8.130906,5.002897,-7.449761,5.919064,-2.650957,-7.042525,-6.253228,6.600716,6.240079,2.473112,-8.587254,-2.833253,-3.930692,-8.966835,-4.587273,6.985780,3.888914,-1.753520,3.979575,4.283536,2.313582,-8.877926,4.015974,-9.025974,-1.614208,0.231516,3.900755,2.022382,4.395777,-1.873820,3.445994,2.900550,-3.132097,-6.809564,4.515287,-4.954929,-7.489423,-4.748716,-7.722308,-6.919794,-4.409344,1.100321,3.509704,2.797072,-3.941887,-3.588159,6.124427,3.809852,-4.741944,-7.894161,5.262774,-2.493622,2.647505,4.007615,-3.151020,-2.589116,-1.661128,-5.424024,1.476804,-5.069309,0.453943,1.055836,-8.950372,9.028360,7.079069,-8.807961,-0.111364,-8.737797,6.543624,7.347219,7.587611,-6.938242,5.006738,0.561994,3.433613,5.042931,-7.693542,5.334456,6.815030,2.650304,-5.722035,3.318427,1.443894,3.756043,-4.598567,-9.918952,-7.269594,5.281020,4.337196,-9.675845,-3.524917,-0.025370,7.017936,-6.571360,-9.781460,7.145277,0.052807,4.606634,-6.819309,-2.648086,1.588648,-5.643508,7.663473,1.036492,-2.794364,6.969714,8.234173,6.941572,-0.611840,0.184144,-5.594696,4.083902,-9.919375,-4.703128,4.519560,8.793177,1.787400,1.219852,0.263671,2.757476,-6.425571,-7.007895,-2.325902,-7.328747,4.858307,4.476345,-1.044454,-9.278756,4.917427,2.471408,1.894716,1.798193,-8.358337,1.234978,-0.325690,0.651751,-0.592869,-0.285229,-8.293704,5.532459,6.707213,0.289082,9.393657,-7.818208,-2.818769,-9.828875,-9.600799,-6.032486,-9.289529,-7.504861,-6.355144,7.242756,3.154022,-1.373307,6.198887,-1.495212,-3.216553,-5.760547,6.769925,8.892920,1.481491,8.393052,3.373208,-4.452804,8.814593,-5.616106,0.794530,-6.298400,-9.135606,-3.068649,-9.926969,-5.592031,-2.651459,2.815699,4.907619,7.172133,-0.549930,-1.701169,-2.686453,9.547293,8.691892,5.737233,7.967663,9.141859,-4.234223,2.786007,-8.087545,-7.975588,2.097473,-9.341029,-1.888326,7.180145,-9.613995,-0.143171,-9.087555,4.718547,-5.398343,-1.844550,-5.541192,6.925243,6.726594,-9.328455,-3.310453,-3.458186,-6.930315,-8.578554,-7.448216,1.312866,4.903168,7.802409,4.254025,6.656903,-7.846131,8.462366,8.800786,0.881573,-5.666054,6.451555,-3.661565,-0.949465,-4.938538,2.478264,-4.250906,-2.583714,8.889425,8.461894,-9.686372,-7.489619,4.709803,7.349319,-6.702479,0.680217,-5.781380,6.303568,7.720970,3.300358,-8.152050,-1.668884,3.872222,-6.991115,1.792662,6.495348,-5.351382,-9.537400,-5.520688,-4.675054,-7.474720,3.519861,-9.375535,-6.696973,-1.811696,-4.752729,-6.652984,7.138858,7.486476,-8.934861,1.780993,-2.137798,0.146429,8.945558,-1.283958,-2.276482,-2.958702,-8.366118,-1.401331,-3.882346,-3.263408,6.471976,4.741098,6.231488,-6.847614,5.736400,9.847644,9.496829,-5.842703,-6.503328,0.740908,-6.660853,-7.272797,-6.126037,7.557838,4.262088,4.564058,-6.478216,3.463081,0.654019,-2.078238,-0.431856,-3.469307,-5.605028,-5.768601,-5.132243,-0.856475,3.072441,3.324653,5.337475,-9.011972,-0.557872,-5.695623,1.721451,-9.477363,4.776516,8.637037,1.162771,-1.949464,9.869982,-4.252213,-7.406438,-4.796244,-1.919068,0.225717,-9.581689,-4.478407,-5.002841,8.699730,3.736689,-6.225216,-8.525304,-5.009458,-9.589305,-4.580044,2.829055,0.011552,1.286365,-2.240113,9.061392,1.127854,0.523886,-7.211105,-8.931213,6.444134,-6.682817,7.837016,-2.513061,-6.797344,-7.748205,-2.011371,9.345311,5.484397,4.750615,-2.340589,2.815724,-5.768728,-6.392380,-6.020214,-8.722319,-7.676282,-9.721147,-3.440367,6.376135,3.463435,2.420511,7.893310,6.247770,4.802769,-9.757540,3.028097,0.325431,5.663780,-7.422391,4.773340,4.920375,9.300378,0.481515,-7.918024,-7.118976,-1.477018,2.299207,1.479285,-0.645014,0.853160,-7.597036,-0.952557,-0.604485,7.105385,-7.136320,-7.655304,-5.985319,8.222896,3.770644,-7.908382,8.575204,8.350887,4.817679,8.742947,3.215187,-5.534278,9.342822,5.636705,-8.020900,-2.384172,2.640922,6.248784,1.880225,3.724622,-8.552451,-3.256891,-6.004476,2.210633,-6.159561,3.345695,3.065052,-6.751727,9.889698,6.180183,-8.597296,-7.471748,-4.519333,-4.571393,-4.028871,-6.918686,4.582707,-4.737603,-6.692524,8.281881,-8.630155,-3.107052,0.677255,-8.568354,-0.610696,-6.809201,9.999091,7.108239,-8.699772,0.144175,2.671398,-6.695416,3.712670,1.333855,-6.535588,-7.210086,9.073031,-7.583139,6.480568,2.745308,-6.925667,9.854229,-9.845641,4.724241,-3.078660,8.155146,-7.851645,-5.183560,-6.990987,6.276781,2.412305,6.385361,-3.925432,3.786975,-7.776171,-9.728909,-4.205871,3.789652,-0.806593,-7.781415,5.463320,-0.828357,3.171794,6.757134,-1.781480,-9.551197,9.137535,7.245300,8.695228,3.905414,7.441571,9.877875,4.689330,8.623944,7.159098,-2.085085,3.718580,8.091973,-0.096668,1.608945,0.111188,-5.623293,4.374743,0.834431,-5.000297,5.990422,-6.894362,6.378479,2.235970,4.321585,-5.353618,7.996222,-0.499417,-6.328090,-4.150379,-8.662007,4.760302,-4.314232,-7.530907,-9.330734,-6.301802,-8.126160,-0.473404,4.123673,-2.615388,-0.391982,-7.847150,9.142327,-1.579901,7.728551,5.265275,3.448779,-8.713737,1.789361,7.405288,7.000998,1.794162,-3.691277,-8.936742,7.989564,-0.253528,5.646121,-9.431639,3.951573,8.602588,7.659820,-4.494871,7.610728,-9.972235,6.387880,-4.301177,2.357494,3.298103,0.309247,1.941596,-6.964900,3.902721,3.654969,-4.205382,-5.706451,3.752387,-5.314078,-2.566417,4.528373,6.981587,-1.710095,2.899473,8.706142,5.441311,-7.575162,-1.799767,-7.213618,7.128015,6.317135,7.403280,6.706192,9.053926,-3.227122,5.361800,-1.780881,1.150538,3.129568,-1.418036,7.060333,3.392901,5.900513,-5.679434,7.656335,2.357615,-5.190038,1.861002,6.679614,6.218458,-3.022291,3.990290,7.979423,-1.560740,-7.960143,-5.111175,-9.632176,0.015640,7.871905,-9.686006,8.303598,1.969452,-7.246271,6.276118,8.005947,4.976320,-7.811299,-9.384029,3.175832,-2.970402,8.405082,3.464095,-9.501869,2.157562,6.559671,1.441579,4.363303,-5.710776,6.105929,-3.827001,-1.183565,-3.124494,-0.080633,2.922136,1.540146,2.206796,-6.455582,9.383977,-9.835164,-2.831239,-1.407358,-9.843181,-6.652949,4.135360,1.995963,-8.014069,1.673447,-3.915275,5.217276,-9.881985,1.755161,1.002968,-0.597788,-3.458919,-7.290258,-2.470692,-4.042958,-2.845603,6.935974,-6.214657,7.834280,2.004803,-9.167514,7.791399,5.878780,-4.999948,7.226757,-1.952506,-9.349048,-7.929118,7.508220,5.234112,-4.590066,-9.079933,5.773838,-2.777352,7.469076,-1.653823,4.410466,3.331818,2.369465,9.594079,9.786729,-7.231517,-9.488767,-3.941042,-8.233614,-3.123716,-4.456866,-6.462588,6.495255,-6.898462,-5.808543,-9.393274,-7.511613,-9.645830,-6.905551,8.414733,7.647964,7.310419,-8.448943,9.546520,-2.892467,0.925985,-0.867716,-6.963241,-3.543386,-8.579906,2.837008,-9.119793,-7.038036,8.235881,-0.338628,3.234864,3.560895,-6.405786,-8.275384,-2.272257,4.933861,1.711526,8.795766,1.184726,0.524725,2.641715,2.821544,-3.032962,-9.924265,-9.001140,-0.828059,1.867693,-3.724979,-5.258594,1.779990,7.260331,-2.896299,8.594971,9.022313,-5.993519,-0.618253,2.231387,3.067511,-4.740494,-0.361479,0.451158,-4.138179,-8.629003,-3.196756,8.616403,1.055904,-7.775331,-2.174974,0.746143,-5.764910,-2.417913,9.767900,-7.801339,1.057846,8.001191,4.143123,6.192807,5.892924,6.251740,-8.903969,6.203241,4.988107,0.134062,8.608940,8.510546,-1.624668,7.603292,-2.495855,9.805909,-8.769311,9.954574,3.605088,5.399053,-7.028574,-7.108305,0.448052,-3.036449,1.272299,-9.417557,-6.423322,-5.642894,7.024958,1.227298,-4.802497,-9.268222,4.722286,-5.493733,-8.253990,4.261866,-6.937779,4.308216,2.071919,1.686493,7.001327,-6.888291,2.552363,6.755526,-4.836009,-8.755267,3.257648,9.849828,-4.551037,6.640278,7.854203,7.031345,-5.578797,0.847942,-3.273128,-5.397927,1.744170,-5.422657,1.529935,4.138802,-3.281820,-6.788968,-9.189912,-0.316881,-9.344086,8.393619,-2.103906,7.265094,8.835504,-3.426815,7.992419,-0.713617,0.901068,-2.819331,-6.533842,-7.639343,3.761433,-3.136191,-5.925510,4.354214,-4.208475,-0.302337,2.726624,4.809651,8.886365,0.851914,-8.033015,0.736805,-5.082184,-0.971136,2.277649,4.420547,-2.325906,3.893478,-8.523599,9.082263,1.087883,1.200859,8.276151,-3.236434,-4.377241,-4.291570,5.269802,3.295731,4.207977,-4.613532,-1.577911,8.214306,1.435323,-4.234915,7.733154,-2.415227,9.053689,-6.835784,-6.349671,5.438181,-5.633742,4.759118,2.315304,4.211168,-4.476410,-8.211732,2.867416,2.975096,-5.231701,-1.043551,3.577039,-1.974194,-4.627033,-5.729789,4.416561,0.323288,5.846779,2.615301,3.963395,0.457591,-7.714944,1.342495,3.092057,-3.077157,-6.665199,-2.171288,2.179648,-5.059070,1.428170,-5.589840,4.208575,-5.436369,-5.306913,9.792652,-2.534497,-2.953278,-4.620114,-2.848288,-5.066302,7.458119,7.428949,0.451580,2.049821,-0.269096,-2.121957,8.475457,-1.932916,-9.277421,-4.297226,4.186527,-6.254868,5.896315,8.861548,-6.760336,1.948510,-3.629322,8.662570,0.262332,1.763856,4.732888,0.795533,3.946204,-7.778894,-5.013785,-7.898049,8.915952,8.745479,5.678291,-7.729137,8.032087,-0.596964,-5.587350,8.166960,-0.430754,7.095088,-5.303458,-2.046207,5.199145,2.964617,1.251898,3.669274,-9.060648,-0.785801,2.995585,3.813939,-0.780709,-6.032218,-5.498728,-7.065637,-5.226373,-6.511165,-4.082928,0.188345,-1.104646,-1.785105,-2.103257,-8.709729,-6.123398,-8.345789,-8.299167,-0.803153,7.161476,8.758915,-4.716748,-5.202252,-1.192228,7.037356,-4.051816,-4.028559,3.364952,-7.983982,-5.912051,-0.548566,6.448996,-2.413835,1.829239,-5.481371,5.327637,-6.888361,-8.392598,-1.045360,0.980642,1.478391,-8.835449,-1.439660,-8.043003,6.003220,-0.018909,-7.852877,4.473688,7.068559,7.555485,0.274283,3.844151,4.815808,4.671475,-7.111060,4.286105,-6.028062,4.959343,-5.044887,8.158549,-2.720902,2.010156,-6.598091,9.478468,7.322022,6.157113,1.284289,-6.739819,-5.214853,2.855117,1.571150,8.204700,-6.028737,-3.598070,-6.628927,8.290364,1.948841,1.400601,5.172742,7.838769,-8.279302,8.703630,-3.067032,-5.121656,1.070190,0.971344,-9.213002,-0.507935,-6.371172,7.627883,8.850687,3.068274,-7.935309,-0.859889,-8.442637,-2.895010,-3.371054,-7.196699,-4.950297,-3.123090,-0.987345,-1.189831,-1.102780,-3.592758,5.049987,6.499617,-5.684196,-9.574450,-9.955329,-9.696619,-8.191689,4.983168,-3.822355,5.619444,-2.221236,3.278312,-3.507966,1.053479,-7.553930,7.889277,-7.886911,-6.617449,1.484820,6.869889,6.654451,-5.893045,-2.399802,4.992175,-5.973321,8.565693,-0.238733,2.129374,-1.994850,5.349066,-1.869073,5.321242,7.039226,1.331096,-3.609491,-8.117533,-6.619228,9.891883,-8.248063,-4.366580,-4.416407,4.108647,-4.812822,9.509231,-2.304335,0.106120,2.701119,4.184728,2.495335,1.202739,9.924931,7.428839,4.338602,-1.916015,0.564050,-3.669227,2.979842,-3.870384,-9.830273,-5.797686,-3.225336,-3.692116,-2.697519,5.453425,-9.372275,4.542081,-3.125383,-3.823064,-8.305820,-4.556000,6.171190,8.767099,-4.619032,-1.078031,6.046766,0.996485,-3.029750,2.500403,5.884817,-4.049938,9.196974,9.473289,5.045704,5.184428,3.269684,7.730060,-0.453529,3.937048,4.305664,-7.987493,-1.142536,-5.533777,9.116792,-7.781233,-7.839214,-9.273969,-3.106602,-9.672348,5.495923,4.650586,5.433363,1.712028,6.907115,-2.511480,-9.156689,4.147915,9.127875,-7.808357,5.303191,7.089603,7.169274,-4.908840,-2.602940,4.073240,-2.543673,-3.518850,-5.452227,-3.211266,-7.944062,-7.238261,5.673823,4.853044,0.541300,7.160793,-1.858363,5.148753,-4.510305,-6.909358,-9.060955,6.409674,-6.533940,-1.017523,2.707689,4.838800,0.975342,6.197386,4.250665,6.670986,-6.918196,-9.271094,-8.921518,-3.927506,6.821380,3.466945,3.345675,-4.751186,-1.106831,-0.453179,4.941197,7.422828,2.771786,3.456647,3.244576,3.472422,1.475161,0.788590,7.230323,4.694970,-2.871177,-6.083980,9.840433,3.330922,4.128151,6.500389,8.839348,-5.682216,7.420782,-5.573945,-5.127473,-3.128538,3.284067,2.446730,-4.714071,5.839849,7.891148,-8.255663,-0.226565,-1.317499,6.995114,6.009449,-1.804298,9.547084,2.057033,6.363004,2.749304,-1.297192,5.027393,-1.132953,-3.043518,-4.390066,6.809754,-6.999215,-0.248760,-4.440652,-8.138549,5.189215,7.495450,1.384605,-9.808803,-2.140922,-3.317305,-4.394212,6.016852,9.472153,-6.505353,8.307182,-2.967733,7.811166,8.216563,-4.132028,6.139924,-3.680678,-1.476804,-7.474290,-1.685132,0.678291,6.431611,-8.590421,-3.620687,-8.348933,0.534765,-4.396482,9.782658,2.660408,1.355526,-6.968082,7.532018,3.031535,-5.672367,-9.927579,8.730917,-2.265846,6.292846,6.730268,-4.136499,-7.612100,5.073630,-7.923505,-1.878510,4.172979,5.413321,0.660010,4.223675,6.816268,-2.857304,-1.860557,6.527526,-9.947564,-0.326141,-1.437386,2.830171,-6.123387,6.035869,3.531989,-3.589568,-9.665069,-4.965040,-3.542309,-8.376210,-4.763912,8.753724,-6.297439,1.494090,2.341650,-4.956615,-1.373440,-5.035720,7.747097,4.744450,-8.560017,0.876750,-7.451206,-1.678654,8.185158,-4.577180,1.477971,3.021027,-0.349281,-0.304388,-0.477326,8.700731,-7.280001,9.284672,3.516134,-7.540931,5.168094,-3.969392,5.068738,-9.771644,-6.063304,-8.635020,0.897873,7.961061,-2.521281,4.792379,1.941282,-6.328701,4.605121,5.024289,-7.432752,-6.876560,8.459330,1.327065,9.610757,-8.059831,-1.634979,7.377362,-8.347536,3.882647,-6.998782,1.866092,6.840574,7.622226,3.563697,-9.305674,-3.279329,3.893236,0.067488,-5.409317,8.963144,-3.220763,-9.673205,9.774542,5.921697,0.230993,1.306794,0.054048,-1.118084,2.512664,3.253606,-1.607482,-4.206865,3.648475,-0.551271,-5.531248,-0.815845,-1.160450,-2.610838,0.728193,-8.335657,1.480911,2.684276,4.834639,6.397148,-7.586841,-2.137626,-5.977994,-0.690683,-7.626681,-3.781242,-5.893729,-8.974085,6.865329,-2.374653,-9.202793,8.082962,9.211441,-1.861663,3.061259,5.773425,-8.831983,-6.515796,4.454497,-8.106862,7.561879,-8.875007,-7.995536,-1.983687,-7.380636,-6.776781,-7.215165,-3.876023,2.772967,-7.392368,0.347921,-5.266917,2.925926,-2.267602,8.094807,-8.268828,6.001886,9.662895,0.649471,9.743159,-8.904686,-0.294292,-8.038647,-6.466875,7.537690,-8.770630,3.532363,-7.939187,3.243356,9.578827,-6.312556,8.599166,-8.137161,1.537045,0.700815,3.424398,-1.976251,-7.139586,5.141185,-4.733871,3.599607,2.095656,2.802934,5.288492,-3.948158,-1.744176,-8.186652,6.432291,-3.782443,8.961377,7.055781,4.382674,-0.263900,-6.803742,5.395533,9.858514,8.520821,4.642053,-0.107828,9.514865,4.576984,3.495831,-9.153738,-6.632473,0.270876,-3.550383,4.272645,8.505239,7.394537,6.453303,-4.173519,5.484464,9.792610,0.900095,1.128495,-1.163907,-6.675920,-7.201319,-7.729221,5.896523,-1.980296,2.909935,3.681815,-3.232677,-6.788569,0.576365,-9.886468,9.678896,7.119736,7.189322,0.766046,1.999434,-7.720517,-0.269435,4.615477,-6.701920,7.720607,4.540332,-7.798656,8.550593,1.110591,-4.915918,0.587816,1.175655,-1.106376,6.502806,-6.910561,7.264295,1.040563,-5.978230,8.744096,-3.002053,-9.855708,7.879496,1.423551,9.682765,-3.140349,-7.224575,5.791139,-9.047264,5.531451,-2.712988,3.692500,-2.859521,8.456906,7.191777,1.136814,-4.184580,5.208168,9.846627,-0.023789,3.654169,-4.055802,5.573889,8.593005,1.081404,5.339926,-6.273187,7.622517,9.030591,2.105534,3.800957,2.267905,-2.824846,2.458048,5.365378,3.882639,-3.321633,0.225208,7.345183,-6.712267,8.384066,-0.748701,-1.280730,-9.408805,9.908332,-0.641937,-9.131344,-2.603851,-9.115214,-4.572848,4.631084,-6.771469,9.197034,3.505842,-8.016996,9.464251,-7.254978,4.594168,8.586185,-6.607674,-8.003927,5.097591,-4.627831,1.421856,-0.240586,2.243132,5.773650,5.418029,3.521801,-2.575060,-1.596434,6.952702,3.794460,7.829698,-8.984567,0.575204,-7.412894,7.772897,-7.738617,4.591011,6.740090,4.687059,-3.787192,5.426780,2.423808,7.660939,-2.536037,-3.246369,-6.669776,-5.850503,-2.295787,9.235044,0.714568,3.996746,3.504210,-3.288434,0.532912,-5.228095,-1.630652,0.814655,5.720925,-1.925141,5.870551,9.341745,-2.645230,-5.533647,-0.674173,-9.285777,9.268867,8.516094,-7.396939,6.465224,8.908927,-3.985164,2.734219,-7.980972,-8.468748,-6.688946,1.037049,4.418288,-6.835902,-7.969636,5.044906,-3.762287,5.815474,-1.702055,3.114973,7.655022,3.041864,-0.935501,-8.133080,6.814957,1.587111,-9.107785,8.875837,6.821323,-2.096880,-1.011897,-5.110562,-2.302228,8.293323,8.671157,-4.026377,2.479028,-5.119770,-9.783732,-8.467638,-7.308685,-7.828962,4.103856,-7.819004,3.753506,-1.270609,2.216468,-5.140090,-7.771966,-5.151859,-9.924087,8.736484,-7.701832,5.234742,-7.350623,-6.434741,-3.208483,7.667572,-2.415793,-8.205425,-9.256450,-1.949949,6.864012,7.294173,-4.005772,3.294518,-8.380368,-0.850323,9.128184,-9.946209,-8.983392,-3.576644,5.416112,-1.427719,1.778855,3.386012,4.509759,9.082763,-3.256501,5.071812,-5.257374,0.608397,5.437128,7.404396,3.381122,-5.426245,-0.725407,-1.565649,-2.991395,-3.621398,1.137765,-0.157878,6.020850,9.857884,-6.713336,-6.699790,-0.014372,-5.154120,5.056101,-3.062381,5.799824,-8.653731,1.172287,6.725770,5.591857,7.841739,9.128360,-5.432351,-1.340602,-6.588486,-6.760820,1.410626,-0.075654,-0.676223,-3.722945,-0.276236,6.832347,1.778423,-8.783670,-8.601750,-8.589067,-6.816311,0.696609,-5.297798,9.737445,2.816340,9.006178,-9.587353,-5.978910,-4.524332,8.005137,-2.548245,6.192294,1.926356,-5.437748,-1.758555,0.764482,-9.852502,8.782581,-1.125517,6.198891,-0.159356,1.389237,-6.949844,7.925904,-6.678485,7.473053,5.594976,-2.310976,-2.760841,-8.216084,-2.317561,-9.846025,5.610231,0.751986,-2.879774,8.703530,-1.347953,5.726221,-3.801352,9.377941,5.543153,2.140335,9.822576,8.650677,-9.563449,-1.636468,6.817917,8.597722,-2.136394,2.051435,0.866615,4.973673,9.025965,-2.425724,1.046015,-3.711568,-9.213431,2.884454,9.281435,-0.566289,3.196412,-7.711263,6.597550,4.844163,5.700061,-7.307838,0.611706,-6.417136,-3.059980,-4.298601,-4.685347,-1.412897,-2.518104,-5.392960,-4.766056,3.821998,-4.022345,-6.684987,7.398965,3.595506,-0.319441,0.433504,-2.400647,-7.232223,-5.424400,-8.838553,8.842581,8.743021,7.746365,-3.700628,-4.584509,2.136237,1.018707,-2.672928,3.522173,9.391292,2.302916,8.978667,-9.215534,-3.142541,-6.291115,4.675646,8.231570,4.621332,9.255126,-8.749186,6.763137,-6.993064,-0.124844,5.828972,-9.891650,4.557157,8.653232,1.700336,8.103212,-2.960291,4.725667,5.551337,-4.769988,0.992602,-2.947240,-6.824683,0.866533,8.416305,1.223630,7.967780,6.510671,-6.721956,7.087295,9.704471,3.297012,-4.436412,1.404590,-6.584710,-5.572770,1.355976,5.767922,-5.339038,-1.902223,-8.610212,-6.154023,-5.152050,9.437161,-6.290600,-5.210392,0.728896,7.700487,-8.244672,1.575277,-7.684546,-2.042546,2.920607,6.500793,-2.179727,3.878349,-7.321750,-6.219781,1.343294,7.216558,-4.300253,8.104501,5.083491,8.994254,-4.109745,-5.424804,-2.940695,-7.607020,8.415429,7.433623,-7.161829,-7.110106,-2.824846,1.630214,-5.878294,9.082363,-7.408910,-4.747466,3.983016,-6.527532,8.821236,2.797816,2.105332,2.505152,2.381258,8.996593,5.264037,-2.988180,-5.867084,5.184466,-5.828378,-1.058787,-5.783048,3.347384,-2.753531,1.283968,-5.447539,-2.751972,-8.505804,-2.614975,-4.914186,9.363007,-5.514438,-7.178990,6.591534,0.891916,-5.929261,3.132006,0.037700,8.768484,-7.514367,8.627656,7.440707,-3.456742,0.463409,8.773437,-1.854390,1.967809,4.599378,-4.332026,0.038917,-8.008810,9.417227,-1.853319,-5.607000,-6.733659,-7.073808,-0.989282,4.031210,-5.755396,2.426752,2.153297,-0.639272,-6.826536,-7.415274,8.594851,8.642859,8.910277,9.296241,2.992188,7.392435,-9.454297,3.706702,2.835617,9.021265,2.911784,-2.540377,0.246935,8.882001,-1.430636,-3.846569,6.178916,1.360007,-3.638162,5.855489,9.758100,6.778807,-6.479202,-9.352468,-3.604764,0.855301,-1.057203,-7.996440,2.985060,-4.784622,5.868998,4.816998,-0.287603,4.790884,7.184185,-9.084918,-6.681996,-2.932235,-0.677899,-9.974886,-3.740698,-7.817138,6.611954,-2.707741,-9.030467,-5.016523,3.037589,-3.222255,5.166258,-5.734030,-5.055469,6.784132,7.200146,-2.338861,-0.622934,-1.016523,-5.779002,7.341034,9.840553,-7.483556,-5.741212,9.125328,-4.414527,6.712196,4.639001,-3.107248,-0.910243,-9.415174,7.257750,1.772178,-5.104062,3.696820,-4.990810,-1.531621,-5.514187,9.014680,-7.043259,6.352832,8.497249,-9.349287,-6.476692,-7.054823,-6.270578,-7.272048,3.022779,4.406953,5.634222,3.092171,7.886753,4.639349,-8.815671,7.839744,3.552861,-4.035994,6.119879,-7.327387,4.469007,0.446930,9.786764,-8.602257,4.010678,-1.571797,-0.460034,6.801648,-0.199189,7.877102,2.023223,8.961250,6.473598,2.919085,-0.512108,8.802101,6.985692,5.211065,-0.563514,8.232840,6.347936,4.360839,5.076442,4.156082,1.475364,7.634122,0.665445,-9.929541,-6.786473,-0.834083,9.039901,-4.891573,-1.032610,0.077154,5.220532,-2.589152,5.925373,-5.277514,-5.926004,-6.994620,9.528722,3.667420,-5.480322,3.414089,6.157449,0.212178,4.927595,6.914902,9.515412,7.728378,-5.845985,7.573329,0.217580,-5.835816,9.691571,2.447404,-2.854855,-8.913248,-0.654893,0.619820,9.122291,-0.675977,0.040572,-5.331301,7.883366,8.468816,5.350149,6.809768,4.311386,0.492957,-3.633498,5.533490,1.241173,4.857837,5.257489,4.981112,7.253970,-9.901757,-2.498196,1.599056,-1.525744,5.984328,8.845451,-6.157835,-6.496674,7.273771,-5.822131,-2.236732,-7.449812,-4.574143,-6.983270,-5.548406,5.416806,-9.971933,2.739216,5.026524,8.396162,-2.350345,0.703868,5.970399,-5.492469,-4.033480,5.392841,-8.819714,-3.866429,9.453953,-6.797988,-7.362675,-5.177753,0.755328,-0.788214,8.253208,6.493641,-6.115718,-0.083480,0.175213,0.312282,-4.280422,-6.993821,-4.345153,6.658406,2.071616,-9.439045,1.610524,6.825189,-3.419763,-8.354679,0.217949,4.334955,-0.803171,3.462726,-9.419780,-1.596050,5.748943,2.144096,0.318571,8.993579,2.897610,7.077865,6.266798,4.983929,-2.831857,8.742095,-3.623648,-7.728988,9.983143,-4.532967,-4.232797,-8.776644,4.696870,8.511628,-5.793385,1.480711,-1.687963,-8.564775,5.396177,-3.570097,5.669342,6.378557,-7.683878,8.594506,8.654397,-7.926032,-8.773517,7.793158,-0.249488,-0.702851,-6.438114,-7.144256,-9.053145,-6.111395,9.048588,-2.664020,-5.463553,-4.747530,0.454811,-2.325005,2.958382,-7.490610,6.689094,4.356326,-8.330849,-8.263297,1.241466,-8.932138,-8.316428,-1.879445,5.888453,-5.157422,-1.473735,-4.706513,-5.447021,6.003025,8.996799,2.504583,8.345132,6.283309,8.064700,-4.248781,-2.747169,-4.182589,8.514418,-9.412720,9.353480,8.664906,1.149870,0.760437,-0.457706,5.884800,-1.244304,7.785408,0.417202,-0.231577,-0.192510,-0.036852,1.130051,3.039397,2.538201,7.558102,2.993867,-9.701537,-4.349864,-4.636662,-5.964216,9.972736,5.651138,4.116418,4.906800,0.328526,-6.157917,-6.188447,-7.556775,7.826067,-7.856172,4.688231,2.043879,-6.283669,7.620273,-1.006128,9.306343,8.271923,-9.606280,6.106814,-3.895652,-0.391364,-4.695244,-7.234193,-8.821285,-8.265545,-3.682578,-0.518967,-1.571982,9.662715,-4.602254,3.585180,4.171065,-6.180484,7.831000,9.836311,-0.725224,3.240426,6.009661,0.235625,0.320912,-4.994766,8.807235,2.983370,2.700948,-1.407682,-8.767580,7.921120,-4.014881,-3.286706,-4.746579,8.486686,0.189016,5.051602,-3.397430,-2.919045,1.405260,8.615605,-9.988724,-8.163761,7.549106,1.604985,-5.093089,-6.789215,-6.508860,4.693729,-5.302418,5.110302,6.072340,-4.174502,5.613918,2.494833,4.805612,-5.120282,9.979917,-0.265776,5.992015,-1.457072,-2.347226,-5.494906,1.636828,8.294080,-0.239057,2.037669,-8.194501,4.506147,3.183934,-0.169271,8.276478,-3.722770,5.750656,5.278515,-1.733310,-9.272888,-2.466434,0.851380,-5.697161,-1.986855,0.162691,-9.835677,7.946456,8.243639,-2.029569,-8.932692,-2.253801,-6.289046,3.411204,-0.181308,-7.980198,-2.354347,5.655747,-3.634028,0.414900,-5.014795,2.719609,-4.920810,-9.215615,4.099434,5.425343,-5.292370,-2.886358,2.701663,2.326297,5.746065,-6.159698,-3.832356,8.245418,-2.868218,7.589035,7.317785,4.091939,-8.572672,4.821064,4.363822,4.180594,9.705924,-2.134390,0.666261,-5.002341,3.206401,-6.178946,4.669437,4.210401,-9.877036,-9.300358,6.577288,3.643924,-0.380777,6.739455,7.197228,2.733258,-3.993817,8.392009,4.117423,-4.953549,8.351111,9.119271,-1.211941,-6.447292,6.837263,-9.911365,-4.898374,-2.164052,-5.707067,-8.354033,-8.689340,-5.977835,-5.066100,-6.660746,-8.059670,-9.058634,-9.904305,-4.573497,-1.049515,1.084843,6.358245,-8.113026,-2.498386,-9.453929,-5.686861,-5.952224,6.355038,7.062932,2.375245,5.030895,-5.940744,6.581978,9.313704,1.546008,-9.085996,-8.540268,-6.291717,0.440303,7.848907,-0.549952,2.990210,0.055900,6.129123,-1.876451,-6.953872,-5.318133,0.904043,7.064438,5.540153,9.918360,-7.193577,-6.251767,-1.356957,5.108148,1.291753,-8.192137,-7.785432,1.958460,-2.628931,-0.922793,-6.944755,-8.393443,-2.912181,-0.623617,-3.021020,1.412200,5.614767,-1.442242,-1.916546,-2.570089,1.688744,-3.300423,-9.321772,8.533985,3.903106,7.237959,1.164417,1.213334,-1.700838,1.348073,9.850726,3.118126,-1.533066,8.604013,1.602045,6.558573,-7.840306,-3.412068,6.519311,5.557774,-1.216051,-5.211114,-0.353558,0.648668,-9.756595,-4.348350,-7.297771,-3.309191,3.690690,4.723584,5.975549,5.896786,-2.776629,-6.545408,3.633681,-9.524019,4.329441,0.331695,-9.203317,-6.777382,-9.176101,1.485023,-3.383910,3.203467,3.394883,-1.575225,0.559718,-5.718644,3.814931,-3.035644,-2.654170,-2.901918,2.365270,-5.119658,4.895105,-4.250938,4.788327,-9.143386,-7.889988,0.340334,-0.531786,-8.327116,8.791357,9.124420,-7.786144,2.408343,-3.620009,-9.668486,-6.321862,5.834705,2.053429,8.755921,4.200244,-8.457206,2.458220,0.317538,0.939628,-8.310610,-6.708397,4.280345,2.388747,-3.438630,8.106080,9.506794,3.899629,2.256941,1.298543,7.964020,-6.071685,-7.948943,4.481407,0.146006,1.885924,6.883944,5.525777,-6.706506,4.689708,-9.940198,7.285739,-2.740751,-1.954816,3.198489,-5.952429,6.401729,-4.846587,1.246626,3.755861,-3.573561,-3.147432,1.682303,1.200527,-5.559043,-0.398175,5.317873,-0.510420,-9.954271,3.331531,-0.763110,-8.559715,-2.273971,3.085681,-3.120761,-0.597740,-9.065530,-2.345487,-6.039457,3.094986,-7.514027,4.561522,-6.005245,-6.692908,-9.240171,-1.905179,7.963657,-2.935308,-0.072902,9.250382,2.836213,7.410367,-3.890541,6.738304,6.571594,7.852516,-7.839643,1.223470,8.134374,0.183834,0.006779,-9.710506,-4.576083,-5.817042,3.298618,3.705086,7.551772,-9.187628,-2.276564,-2.497721,-8.468937,6.912677,-5.812487,5.115407,-1.333469,-9.382192,1.824368,1.202054,5.291174,-8.903184,9.016718,8.206522,-6.146517,1.078704,1.042995,4.479818,2.676143,-3.243519,8.973566,0.110936,-4.539695,-9.472764,8.106821,3.263806,6.153026,8.899014,5.782810,-9.387226,-7.135879,-4.500196,7.017463,8.229225,2.293709,4.619146,-8.310179,-1.130957,-7.623327,-3.288082,-2.659622,-3.825685,4.239578,2.955067,4.680263,-7.458998,9.181298,3.420264,-0.683410,0.373914,7.406494,1.580194,-9.725666,-0.336755,-1.203382,-5.429666,6.539945,-9.551568,-9.658006,3.867844,6.853837,9.874031,6.560109,-3.001354,9.338964,0.882802,-8.396822,-2.855214,-1.255000,0.337150,3.971598,-6.420231,-5.183235,1.046374,-0.213678,-3.963783,8.745542,-1.447155,5.177763,-7.597122,-5.384458,5.484863,-5.697089,4.341862,-3.771349,1.884325,-3.553541,-0.444936,3.647796,5.864152,3.715519,7.239055,7.395903,0.158546,-0.087589,-4.527818,0.833593,9.978927,6.953262,-7.040290,2.410971,-3.222130,5.230700,5.891317,-4.451583,-8.876191,-8.982569,-2.143193,6.814082,-4.631254,-1.925957,8.839216,-8.169591,6.519112,3.447301,-8.423302,-7.424313,0.603475,6.176773,-2.242507,3.587459,5.383011,-0.026989,-0.985332,0.484843,-0.886890,8.533879,7.146750,-6.533270,5.417152,6.941034,9.188092,-4.050630,9.232362,5.645389,-3.342886,0.743013,-1.520969,7.943524,3.410594,-6.124394,-5.987958,4.464156,9.393493,9.651987,-4.424294,-2.429335,-6.625906,-7.457708,4.793335,5.133636,-2.512515,3.902096,-9.159253,6.726055,-1.716408,5.494882,2.901783,-6.362882,7.097867,-2.881442,-8.117841,9.279044,2.076456,3.846069,9.649246,-8.781309,1.658891,-6.802172,6.867427,5.760796,5.274848,-3.109107,-5.062925,-3.893752,-4.589610,2.373822,2.023242,1.523302,-6.522360,1.724698,7.180171,1.851480,-7.536497,0.391337,-9.366065,2.124362,1.274541,-8.282961,-7.876028,4.051624,2.540580,-1.768687,9.407814,-8.029670,-5.470379,3.914525,4.455764,-6.304730,7.306808,0.728166,-4.105348,8.682436,6.442976,6.775284,-2.128829,-1.368625,2.769181,8.578149,8.335968,-0.229955,4.521783,1.862410,1.066587,-4.236309,6.572352,-5.702877,-6.305274,-4.732302,7.843228,-0.996032,-5.814800,-6.869244,4.885755,1.953484,5.165886,-4.179132,7.681505,0.312825,9.054525,6.817257,-6.267825,-4.735001,-8.930216,-1.961338,4.508097,3.445390,7.614716,3.739564,8.122590,1.427856,3.359349,-6.621993,-8.926007,9.738489,9.734854,-5.056593,-1.193725,7.968243,1.063441,-5.414597,-7.359118,7.233849,3.853648,-9.699116,1.281432,2.680120,6.661293,4.190109,-3.206743,0.744979,-5.734296,6.197171,-2.147976,0.891254,-7.611977,-4.117821,5.625944,-1.488920,3.038231,-0.174094,8.515662,7.598770,9.508534,-0.555627,8.088702,4.107632,4.225792,-1.213844,1.625844,-9.275684,9.911945,-5.550563,-2.740925,-6.890545,1.716492,-3.685548,-0.916914,8.356140,-5.301655,6.096389,8.401306,2.071839,8.304872,6.682235,0.770304,-1.652677,-4.032432,-0.986145,-9.394317,-6.151069,2.738653,-3.002540,-8.840949,0.598522,8.341562,-9.016088,3.117812,6.063025,5.206183,-4.842949,-0.705462,-2.329578,3.842414,8.390774,4.398443,-6.845482,-2.567247,-4.281175,-9.373363,-5.781205,4.688821,0.787476,-5.392623,3.194408,8.423172,3.889889,1.571702,-9.040069,-3.378507,-3.024773,-2.134772,-8.566391,7.723492,4.034975,-5.693033,7.547302,9.897639,-9.828374,6.352393,6.122008,7.194685,2.343643,-6.750581,-9.383514,3.769234,-5.840843,6.590765,5.949034,-6.373768,-0.451598,-6.287370,-3.560314,-5.483731,3.517775,-1.946250,-7.268702,4.718293,-5.915491,-9.281815,-9.544509,5.820911,2.569838,7.849619,2.225357,8.107507,-8.172283,0.923071,5.405468,-0.266400,-7.714019,-1.332071,-4.141180,-1.138295,5.204534,4.342124,-0.264211,9.319803,2.020409,-8.394736,-0.661009,9.042446,9.176672,6.634647,-2.386621,-9.931598,-9.679077,-0.120588,-7.728472,-3.911368,1.256704,-6.667298,-8.558885,0.056231,-4.033903,5.260261,8.688621,-6.299397,1.290391,-7.452854,1.643874,-9.284307,7.604116,-6.593803,9.131530,7.510495,3.958607,5.115228,7.505206,4.466881,-8.078352,-8.681550,7.770990,8.213689,-1.775426,1.206162,-9.720460,-9.918965,-2.379516,8.241355,4.938665,-8.828432,-8.261459,-7.316469,-4.591711,-1.599093,-7.508066,-8.662729,3.089291,6.963660,9.235423,3.893278,-5.197919,3.263637,-0.205135,2.796250,-7.654109,-5.502236,1.024086,-1.034499,2.373204,-9.920917,-0.893838,6.599008,-7.181311,3.469234,2.264615,6.767943,-4.602333,-9.855242,-1.670242,-3.780781,5.007572,0.989672,-7.807330,-8.423359,-3.830601,2.785069,-2.044544,-1.147212,1.334579,-9.310542,-1.688590,9.096528,6.914538,-9.882302,9.217407,-0.489942,2.735537,5.214424,1.303660,7.407642,-9.257958,-4.928620,-3.930829,-3.352443,2.808678,-7.034407,-7.091076,-8.607597,-7.692795,8.959698,-2.308313,-6.906965,-6.183795,2.493101,-9.024169,4.203442,5.120607,7.378174,6.755092,-8.371433,-3.692837,-8.575583,-5.375514,-7.633565,8.283169,-7.294163,8.218173,-8.343092,-1.330706,-8.399717,-8.444561,7.355180,7.313672,5.397721,-7.600033,3.970584,1.169088,-4.787621,0.382612,-9.415919,-7.707614,-4.457685,3.449150,7.215997,-2.956043,-0.884381,-5.222982,-8.310716,-2.112295,-0.762545,5.644507,-9.433370,3.277138,-2.428963,5.426378,-4.436529,6.266547,-2.147204,7.688624,-1.505659,3.321221,-3.350169,4.480288,1.030968,3.243991,-0.449181,-2.135014,5.250732,0.928139,-8.904511,-5.913386,0.899961,2.262646,-8.704113,3.080365,-7.250608,-2.630780,-5.815149,2.554912,2.313014,5.556961,-6.932108,-3.042334,-2.801140,0.728769,9.813133,1.372868,-7.624293,-5.118356,8.821262,7.267446,-5.507455,-6.301804,3.754077,-3.827246,-9.133397,1.526734,0.673948,-2.061076,3.270857,-4.780283,3.730915,5.497747,-9.005010,1.787858,-8.397808,7.433835,-9.987900,9.402523,-0.107002,-5.329288,-7.993390,8.848426,-2.178817,9.695052,4.725190,-6.458430,7.891858,-3.673236,4.246885,0.450117,2.478121,-2.764393,-8.470737,0.671731,6.230253,-0.341763,1.883443,-4.029576,3.537821,-2.131412,0.004034,-4.276495,-6.074432,7.587533,-1.818467,9.107017,2.695972,1.512217,-1.340722,-5.250843,-3.125133,1.040833,-6.303925,1.958763,9.125648,1.203780,-1.746988,4.502752,-4.286971,-9.485399,8.286781,-6.851798,0.097433,-1.738781,9.500541,-5.458593,7.143145,0.433248,9.561485,-2.188436,-5.695229,2.560857,6.808266,-8.352856,7.909566,-7.341891,-1.853603,-8.821239,-7.550083,4.405181,0.362439,2.991919,5.811043,1.870980,-0.279957,0.526595,5.799226,5.804415,1.338772,-4.468199,8.688343,5.154136,-2.743337,6.789306,9.706745,-5.220445,-7.475524,0.754122,-9.039690,-7.558688], dtype = "float64")#candidate|11745|(3600,)|const|float64
call_11744 = func_11384_call(relay.reshape(const_11745.astype('float64'), [15, 16, 15]))
call_11746 = func_11384_call(relay.reshape(const_11745.astype('float64'), [15, 16, 15]))
output = relay.Tuple([call_11722,call_11741,call_11744,const_11745,])
output2 = relay.Tuple([call_11723,call_11742,call_11746,const_11745,])
func_11747 = relay.Function([], output)
mod['func_11747'] = func_11747
mod = relay.transform.InferType()(mod)
output = func_11747()
func_11748 = relay.Function([], output)
mutated_mod['func_11748'] = func_11748
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8824_call = mod.get_global_var('func_8824')
func_8826_call = mutated_mod.get_global_var('func_8826')
call_11824 = relay.TupleGetItem(func_8824_call(), 0)
call_11825 = relay.TupleGetItem(func_8826_call(), 0)
func_944_call = mod.get_global_var('func_944')
func_947_call = mutated_mod.get_global_var('func_947')
const_11830 = relay.const([6.096496,8.119870,-6.364856,-7.332838,-0.785501,4.382329,4.004410,1.232720,-4.877812,-4.645972,0.454971,-8.879452,-8.645565,4.337674,-2.119962,1.925545,-2.193975,-5.009481,2.991822,-3.903898,-7.479526,4.175351,1.377377,-1.581922,6.919614,8.026890,3.559170,-4.994119,3.084123,-9.726634,4.540573,9.306462,-9.071359,-5.056152,9.202010,6.498003,-1.458466,5.877037,-7.855233,8.775561,-5.511295,-8.625524,-4.156777,-7.109435,-7.667706,4.252514,-3.197696,-0.565349,6.050182,-3.734362,8.536504,-3.365717,-9.756343,9.019751,5.569411,-6.236850,6.373512,-3.750008,7.459507,-5.978127,7.854482,3.600471,-9.254665,-0.451498,-1.015801,-5.419072,-7.242742,-7.311758,-1.559762,4.683773,-5.693607,-6.408314,5.528755,-5.045992,2.861392,-2.046036,-1.560897,-0.507244,5.223428,-5.249872,-7.957434,-7.330295,-1.156039,6.461749,-5.409160,-9.899864,0.444734,8.014591,6.579563,5.451767], dtype = "float32")#candidate|11830|(90,)|const|float32
var_11831 = relay.var("var_11831", dtype = "float64", shape = (864,))#candidate|11831|(864,)|var|float64
call_11829 = relay.TupleGetItem(func_944_call(relay.reshape(const_11830.astype('float32'), [10, 3, 3]), relay.reshape(var_11831.astype('float64'), [2, 432]), ), 8)
call_11832 = relay.TupleGetItem(func_947_call(relay.reshape(const_11830.astype('float32'), [10, 3, 3]), relay.reshape(var_11831.astype('float64'), [2, 432]), ), 8)
func_6146_call = mod.get_global_var('func_6146')
func_6149_call = mutated_mod.get_global_var('func_6149')
var_11841 = relay.var("var_11841", dtype = "uint64", shape = (1344,))#candidate|11841|(1344,)|var|uint64
const_11842 = relay.const([-5.292502,0.855522,-8.650140,-5.359099,0.283087,-4.606117,-3.056927,-6.719609,-4.611687,-0.604148,4.530805,2.397152,-8.539416,2.527308,1.817577,2.262518,-8.351225,-5.872438,5.653190,9.552749,0.991336,-1.007532,-9.856941,8.608801,3.916655,-0.441062,6.582372,2.217443,-3.890011,2.847162,8.176358,4.050198,8.990573,-4.143903,-4.974457,0.020774,8.429436,-8.381877,-8.345272,-1.326927,1.494129,2.134149,-6.784588,-7.811709,9.254854,-9.060140,-8.256653,-3.854473,-5.465623,-0.636297,-1.264503,-7.590369,6.822110,6.421080,0.693183,-8.681935,-6.952688,6.355906,-4.945861,2.863110,4.929872,-7.375524,4.665233,2.051061,1.706352,5.812042,-4.548281,8.098182,-8.260409,6.613293,3.325060,-0.881296,4.287914,-5.528817,8.743220,3.458627,-4.089693,6.468081,-7.090150,4.984272,-5.353277,-3.787285,-4.948631,9.853033,-4.128707,-6.303150,-2.347662,-8.802286,-1.760162,1.199634,-5.787865,-9.300963,-8.806686,3.972263,5.462667,-9.013817,2.844490,-8.706647,-4.984641,-7.622874,-4.107863,-8.538487,2.524959,6.300108,-1.863956,6.686989,5.436626,6.671108,2.079089,1.115002,9.308718,8.958911,-9.484145,-3.526007,4.993064,6.763888,-0.014748,-6.725419,-4.344451,3.882349,-5.748840,-0.863943,6.414268,0.329129,-0.617550,8.059927,-4.355744,-0.761469,-2.695120,4.246188,3.523302,1.745521,8.229608,5.827846,6.839412,-4.715747,6.229680,-6.505057,-6.693060,-2.834694,-2.332096,-8.745846,-9.166443,1.171048,9.511700,-4.337785,5.235596,-6.886097,3.472135,7.067035,1.072266,-1.941336,-1.688192,5.359008,-9.579338,0.351686,2.221208,5.885589,-5.770626,-9.577804,3.170431,-6.291360,-9.667877,6.770117,-3.710361,0.414291,-4.551838,-6.536197,-8.293887,6.273923,1.242688,1.127495,-2.622194,-4.472461,3.695837,9.391832,1.275598,7.091332,-2.081369,2.166849,1.166952,-2.321495,-7.043699,-7.993300,-4.066242,4.141221,-2.514305,-3.597022,6.948599,6.712162,1.573562,-3.137216,-1.039877,0.557832,-8.986174,8.971905,3.987583,-7.538819,6.804479,-5.524450,-6.712679,5.399289,-3.976765,-8.757662,9.244473,-5.889966,-7.534073,5.533568,-6.998450,0.507943,-7.274132,9.843507,1.439309,0.342009,-6.452734,-2.301142,-8.208338,-4.453853,-4.577340,-4.765453,-2.710353,-6.186650,4.410241,-5.461037,-4.470996,4.576516,-6.252160,-3.515043,-8.097418,-6.762257,9.719974,5.940984,6.946643,-7.004256,-4.556469,5.498125,7.758488,2.216897,2.213324,8.839846,-9.108894,-9.338822,7.825393,-1.302148,2.514946,-6.640082,8.004547,-9.298979,7.194579,-6.109114,7.550755,2.708184,-9.553500,-7.232811,-2.294032,4.454891,-3.978308,6.491502,1.848981,0.862538,9.402681,2.545935,3.689817,6.567188,8.661705,2.099923,5.877877,8.970777,9.423381,7.857850,1.697757,-9.088803,7.348161,7.455950,4.982006,1.449173,2.389689,-3.550259,-5.346268,7.648973,6.640403,-4.806794,5.887286,-4.944911,7.639708,-4.065139,1.789536,-7.987648,0.072325,7.150558,-4.147676,4.954299,4.155346,7.066367,4.399360,9.499030,6.487701,1.731893,-7.305967,6.893997,3.548432,-1.208535,7.260948,4.905265,3.317900,1.709270,7.935340,0.113268,-6.022659,-5.611769,0.477619,8.318935,-4.746884,-9.651561,-3.800576,-4.097907,7.252642,-3.009712,-7.312254,8.144595,-9.853085,1.548978,4.191689,4.010924,4.350678,9.818852,8.786846,1.427873,0.123228,-8.456322,-5.369569,-0.233881,-9.661114,-7.110071,-3.249762,-8.786613,-9.462563,3.848867,-3.014158,-3.975446,-9.588582,-0.385414,-0.992139,4.254689,3.756875,6.734897,4.478195,-6.002666,5.756342,-2.322821,-2.274771,-0.026683,-1.310836,4.528772,-2.332604,4.880295,3.899229,8.291169,0.234061,-4.733969,-7.578957,-1.999737,6.098664,6.096135,7.939279,-4.632071,-7.583052,3.603455,-7.581676,3.335446,-0.614299,-0.484895,2.222462,7.536477,-0.807076,7.876565,6.779557,-9.790620,-1.305474,2.225852,4.191577,-5.145794,3.030329,2.183586,-7.494752,-0.656619,5.352791,-8.381790,-7.871603,8.831718,9.123053,-3.837131,7.861861,3.597533,-8.735675,8.190578], dtype = "float32")#candidate|11842|(396,)|const|float32
call_11840 = relay.TupleGetItem(func_6146_call(relay.reshape(var_11841.astype('uint64'), [6, 14, 16]), relay.reshape(const_11842.astype('float32'), [1, 396]), ), 2)
call_11843 = relay.TupleGetItem(func_6149_call(relay.reshape(var_11841.astype('uint64'), [6, 14, 16]), relay.reshape(const_11842.astype('float32'), [1, 396]), ), 2)
output = relay.Tuple([call_11824,call_11829,const_11830,var_11831,call_11840,var_11841,const_11842,])
output2 = relay.Tuple([call_11825,call_11832,const_11830,var_11831,call_11843,var_11841,const_11842,])
func_11860 = relay.Function([var_11831,var_11841,], output)
mod['func_11860'] = func_11860
mod = relay.transform.InferType()(mod)
mutated_mod['func_11860'] = func_11860
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11860_call = mutated_mod.get_global_var('func_11860')
var_11862 = relay.var("var_11862", dtype = "float64", shape = (864,))#candidate|11862|(864,)|var|float64
var_11863 = relay.var("var_11863", dtype = "uint64", shape = (1344,))#candidate|11863|(1344,)|var|uint64
call_11861 = func_11860_call(var_11862,var_11863,)
output = call_11861
func_11864 = relay.Function([var_11862,var_11863,], output)
mutated_mod['func_11864'] = func_11864
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9944_call = mod.get_global_var('func_9944')
func_9946_call = mutated_mod.get_global_var('func_9946')
call_11903 = func_9944_call()
call_11904 = func_9944_call()
func_10706_call = mod.get_global_var('func_10706')
func_10709_call = mutated_mod.get_global_var('func_10709')
var_11926 = relay.var("var_11926", dtype = "float32", shape = (90,))#candidate|11926|(90,)|var|float32
call_11925 = relay.TupleGetItem(func_10706_call(relay.reshape(var_11926.astype('float32'), [90,])), 8)
call_11927 = relay.TupleGetItem(func_10709_call(relay.reshape(var_11926.astype('float32'), [90,])), 8)
func_10820_call = mod.get_global_var('func_10820')
func_10821_call = mutated_mod.get_global_var('func_10821')
call_11934 = relay.TupleGetItem(func_10820_call(), 1)
call_11935 = relay.TupleGetItem(func_10821_call(), 1)
output = relay.Tuple([call_11903,call_11925,var_11926,call_11934,])
output2 = relay.Tuple([call_11904,call_11927,var_11926,call_11935,])
func_11950 = relay.Function([var_11926,], output)
mod['func_11950'] = func_11950
mod = relay.transform.InferType()(mod)
var_11951 = relay.var("var_11951", dtype = "float32", shape = (90,))#candidate|11951|(90,)|var|float32
output = func_11950(var_11951)
func_11952 = relay.Function([var_11951], output)
mutated_mod['func_11952'] = func_11952
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9199_call = mod.get_global_var('func_9199')
func_9200_call = mutated_mod.get_global_var('func_9200')
call_11983 = relay.TupleGetItem(func_9199_call(), 3)
call_11984 = relay.TupleGetItem(func_9200_call(), 3)
func_11570_call = mod.get_global_var('func_11570')
func_11575_call = mutated_mod.get_global_var('func_11575')
var_11989 = relay.var("var_11989", dtype = "bool", shape = (5040,))#candidate|11989|(5040,)|var|bool
const_11990 = relay.const([3.463812,0.620945,-2.198980,-3.900986,-8.685882,3.055058,-3.182771,-0.204504,9.286201,6.235740,-8.878774,5.988662,-8.739570,0.116730,1.505293,4.137600,-9.925461,-4.765574,-1.060874,-9.799147,-4.891366,-4.286148,-6.276807,8.702579], dtype = "float32")#candidate|11990|(24,)|const|float32
const_11991 = relay.const([-7.025884,-5.435623,6.765978,-5.730755,5.505897,8.557743,-6.428232,-5.741953,-3.573868,5.207626,-1.783120,-6.636078,-2.192413,-0.201267,-2.540668,-5.303523,-8.123187,-2.197162,-9.979969,-8.516942,-5.846830,6.604234,9.459611,9.243986,-2.410345,-5.667570,8.431203,6.364263,-9.281440,6.813290,1.213336,4.611981,-9.336776,9.776618,-2.728702,-5.107477,2.208592,1.625298,0.479900,7.808151,4.562193,-2.486971,-1.876850,-6.105187,4.333184,6.890491,9.088331,-0.835040,-8.226258,-2.027249,0.217432,0.128378,9.884609,3.540850,-9.221752,-3.442984,-3.054221,-5.848276,4.311359,8.483568,-6.067216,5.757264,2.196355,7.265937,2.755982,-9.513196,6.176287,9.084587,-9.043578,5.912244,9.435255,-9.161217,9.153270,-1.561511,-8.949144,5.269656,7.782843,-3.661311,8.432064,-5.790475,-2.659101,4.232598,5.659964,-7.489129,-6.298428,-9.956958,1.439593,3.038778,1.846853,7.836210,-1.960728,-5.083208,6.680360,-5.159699,-6.088211,1.653432,-9.499771,-9.186425,-1.407579,2.318102,4.496761,-5.769390,8.189102,6.518818,-1.917563,-6.710208,8.691713,-3.136348,6.338976,9.181545,7.902341,-9.497550,-9.060336,6.232325,2.006294,8.175196,-0.853716,-7.466772,9.051018,-2.928287,-3.663098,-7.420913,7.166121,3.312331,-9.669929,2.584683,5.952198,5.572471,-8.895765,-4.679954,2.530505,-8.147327,-9.288073,5.410223,-0.191178,4.820543,-2.920762,6.485118,-2.758249,6.991910,7.822637,-1.341546,-1.297683,-4.100368,6.851028,0.094170,-1.522169,-6.456021,-2.034163,4.967930,-7.068499,2.935801,-0.999687,-7.134551,4.385237,8.706406,-4.965722,-3.262140,8.776130,-5.943489,4.310074,-4.394623,7.589987,-1.705467,-0.807239,0.675727,-9.277546,-9.425822,6.516273,9.291844,-7.510968,7.812042,5.445502,6.827720,7.407520,9.970334,6.421242,-3.790063,-6.923105,-3.330655,-8.702135,0.954600,6.351352,-8.282550,4.966636,6.505538,-7.777477,-1.018473,-1.293545,2.522862,0.444454,4.323957,-3.542054,-7.089155,-4.233806,8.748788,-0.180694,-6.026584,-2.913045,-5.406726,-8.812796,5.920071,-6.277293,-8.581640,-1.947535,-6.805633,-9.766510,-0.771552,-7.810121,-9.192755,-0.465797,8.256813,-9.237150,-2.298375,-1.322006,-8.481105,-9.457800,-7.098682,-6.854752,-2.853715,-1.416890,-0.647161,-8.310070,7.232543,0.175559,1.342247,8.356036,-1.441972,-6.147114,6.019515,3.241947,-7.880658,9.562274,3.571964,4.203834,-5.635582,-4.267597,1.213114,-8.689521,4.028112,-5.495939,7.339129,-8.307029,2.947195,-6.300641,4.365962,3.032823,3.843247,-0.581152,-7.146636,-3.943816,0.661830,5.187066,4.607632,5.743746,-3.478410,-2.961994,-9.420160,8.706451,6.758142,-3.634711,-8.409402,-9.894456,-1.244937,-6.430982,0.637941,-9.163865,6.153698,2.046671,1.249998,-4.059819,-1.947611,6.773107,5.481649,-4.552622,-6.555472,2.155724,-5.952827,-9.261133,9.979165,6.307370,-0.479745,2.021286,-7.052989,-8.410070,-1.672125,8.696021,3.263384,2.381214,2.750727,-2.259731,-2.601505,-3.471605,9.424316,1.985122,7.521275,4.652588,-3.374732,-8.149140,3.906438,-9.795441,0.805180,-4.667369,-3.774156,9.043460,-2.794009,3.843500,4.852543,9.610965,9.313621,5.814968,-6.301360,-1.326081,-5.562241,3.927012,5.137107,1.759658,1.872137,-7.323088,0.950646,9.194930,7.503505,-1.632852,4.349390,6.684792,-8.307233,8.045892,-8.429735,-3.361264,-3.736260,-3.567839,6.155643,-4.347093,-4.374521,2.050705,-8.635056,6.974709,6.546607,5.000226,3.991061,5.522832,8.823667,-0.159856,-7.455447,-4.571894,-9.236717,5.565973,-0.874087,-7.407140,-8.601441,-5.613666,0.645718,-7.040448,2.011366,2.308537,-3.777104,2.413391,1.924654,7.954833,-2.900305,8.381578,3.776113,-5.763183,-8.589088,-0.647659,-3.382791,-7.726069,-4.825468,0.122683,-0.915648,-9.203356,8.200013,-4.275938,-8.592744,2.765384,-9.937011,2.188898,3.449202,7.041168,4.623788,-5.257136,5.780580,3.148912,3.524288,6.582841,4.914884,-3.741777,6.623833,6.489612,1.759682,-7.290031,5.270440,2.532292,-8.568347,1.450636,-4.429171,9.705875,-7.816200,3.635649,2.585979,4.822494,-1.785616,-7.569686,-7.096163,2.606103,-4.152247,6.774168,-0.293201,-7.545780,-2.078059,-5.664517,7.401277,-9.128352,-2.505286,0.990876,-3.546186,-0.757834,-2.415012,2.724252,-4.769558,-0.512281,-3.245259,3.791148,-8.152789,3.069255,2.688067,9.103200,-2.884559,-2.566352,9.831253,-7.183807,-8.245199,7.015601,6.694619,1.924159,3.943730,-3.468439,-5.300204,-2.425415,9.703954,6.210673,1.550064,2.972435,-7.955022,-1.548705,3.606341,0.112497,4.623958,3.865780,1.269680,4.096956,-1.855959,0.736497,6.105101,-3.437041,0.099814,9.551842,-6.696770,-6.174277,-0.309046,5.757729,-0.944671,6.961687,1.993281,-4.716093,7.123450,0.894600,-2.414079,-3.281950,9.217784,-2.883797,-3.727837,6.498209,7.416802,9.331356,0.608731,8.914169,-6.014104,9.276944,1.137381,-0.075737,2.707088,4.063844,-1.697888,9.097173,-2.453466,8.507616,7.968912,5.058589,-6.274700,-5.521835,4.050091,6.363460,-2.968226,9.397809,3.811292,7.636355,-0.346918,-6.802442,-6.352270,-2.816548,3.039152,-2.067912,-5.986950,6.404632,-5.765420,-9.301304,-6.026866,5.111537,1.689380,-2.145893,0.097824,8.489826,-3.402120,-6.770931,-4.454370,1.953094,-2.848251,-2.987026,-8.922013,-0.176745,-8.101381,-3.039943,-0.119005,4.907504,4.651079,-7.815789,9.949386,-9.267197,8.074929,8.352023,8.212904,-7.070996,-5.721674,-6.002109,-6.893441,2.021777,-2.744229,9.789927,-5.674196,-3.354972,1.323416,-6.284062,-1.642783,-0.567807,1.077957,3.407569,4.420601,2.659755,4.650179,-6.831096,-5.583506,-8.746721,4.337707,0.154231,-5.247973,7.017850,0.249902,3.190227,-3.769316,1.870943,8.339736,-5.425530,-6.696788,-0.246352,-9.469257,-4.235252,-1.561704,7.720733,-7.440644,8.073548,-2.349851,-5.217716,-6.625572,1.983007,-0.491351,5.128519,-4.122191,-5.673693,5.308563,-5.430697,0.311165,-7.149367,0.996218,4.740302,-3.471055,-9.095763,-5.827715,-3.977151,-7.466162,7.118844,3.378097,-0.432140,8.370646,-6.779252,1.793004,-9.311002,0.985071,8.842612,-9.328732,6.198975,6.894606,0.401167,-9.435570,5.793319,6.067438,1.357569,5.045338,-7.147380,-3.284237,5.490304,8.257024,-5.225234,-2.905533,7.120406,9.327489,6.812803,6.267986,-2.925340,4.827358,-4.104635,-4.998708,4.097612,-3.421134,-1.879400,-9.109439,-5.322111,7.749722,8.074478,-8.843939,-4.893202,9.513456,0.784248,-7.605476,-2.323020,7.553333,7.731456,6.618651,9.420332,-9.749523,-5.008321,4.381857,0.999632,-9.209386,-3.514267,9.506673,-0.868498,-0.822194,2.513856,7.062427,-4.953468,1.528765,-6.314668,-1.335770,-8.411190,-5.133559,-2.407140,5.773499,-0.553010,-6.523655,9.960465,-8.650097,-2.586997,3.251090,8.481042,5.770969,5.989347,1.859173,1.650840,4.094565,9.809077,3.403385,4.898316,4.435053,-6.043754,-2.455769,7.642174,6.051058,0.970814,-7.107625,4.675503,6.321678,-0.649582,-5.892767,-6.340361,8.477338,1.829029,7.363579,4.757136,6.303365,-9.768994,4.734428,-0.845877,5.167884,8.114255,-0.303625,-9.512661,4.419769,7.816566,-4.812068,9.453448,6.609152,-6.544958,4.351935,4.188346,2.385397,-3.456939,4.844454,6.769294,0.700086,-5.129602,2.911195,3.460751,2.887429,5.459473,-7.494607,0.630706,7.055993,7.253026,-4.604566,2.122457,-4.063417,-7.253547,-0.281500,7.370623,0.607231,-1.216518,-6.280715,9.167979,-9.619787,5.455471,-9.519048,-0.058969,7.403465,-7.282090,-3.387377,1.863323,-4.379583,-4.798945,-7.503243,-7.130888,-0.732933,-1.703778,-9.098876,-7.528096,-2.909294,4.296370,6.429968,9.029862,7.421811,-2.886052,0.581258,6.500957,9.100702,8.493927,5.753034,4.024123,-9.342857,-8.435778,-6.586357,9.061728,-7.525221,1.459736,-4.781753,-1.506021,-1.016091,4.677610,5.453242,9.884982,-3.675303,-1.502420,-6.922206,9.148154,1.495766,7.518628,4.358325,3.114467,-1.711865,4.144607,7.603404,-8.124954,-8.618161,5.565834,-0.466084,-1.859608,1.769522,-7.162298,7.788843,-7.855758,6.694042,-4.017601,-8.835283,2.600188,-0.988727,0.739098,-4.721927,3.103345,8.458333,-4.441372,-7.830064,2.219552,9.290830,5.515315,8.694378,-9.207037,-4.129374,2.543133,-6.689948,2.354115,0.960729,-8.058833,-4.897304,-1.297388,-0.574022,-9.409204,-4.801590,4.598095,4.898463,-5.406593,-8.876563,-8.783248,3.549967,-9.926150,-3.443064,-2.368495,-6.150727,5.878833,-1.222401,2.883156,2.364257,0.467838,7.023499,9.845502,-8.833667,1.564740,-9.944058,2.667020,-2.558572,2.923295,9.954256,-1.803205,-6.983442,-0.685543,-9.338239,-9.795612,5.964981,9.196539,-3.880725,-2.773072,-1.759875,8.762270,4.841576,-3.827825,-6.414868,-7.044717,2.444059,-1.120616,-4.520314,-7.943532,-5.616396,-3.007882,2.756252,-9.645253,0.239607,-4.756301,-2.599449,-6.738482,-3.115772,1.771101,9.689854,-3.459054,7.084635,-2.680486,6.887595,-2.915164,4.544204,-6.808283,-5.122748,-1.854913,2.458602,7.803999,0.597927,8.877408,-7.024824,-0.040298,-4.707475,-2.104765,0.995669,7.294167,2.542788,-2.562909,6.437031,6.065457,4.443433,6.548686,-5.939627,3.360622,-6.882136,0.023319,7.645236,-6.063060,-5.247079,9.681686,-7.886468,9.175151,-1.617786,-2.313196,-5.721876,8.000389,-6.580291,-4.842134,1.997216,-6.069025,-0.885391,-0.657717,5.890970,2.867414,0.064480,-7.624362,5.973850,-0.885155,9.839922,0.059796,-1.954604,-7.890925,3.232062,-4.387830,-7.950417,7.151548,-8.069023,-4.406486,-3.590368,-9.835651,3.164794,3.842464,-6.604907,-0.973594,9.712899,5.890966,5.956773,-4.923750,-0.484016,3.604341,1.718754,2.526556,5.868486,6.129216,3.699898,9.917315,-7.644853,1.292398,-6.700439,1.370341,-4.794655,-1.571991,-8.923046,-2.565434,5.201803,3.710767,-2.285520,-9.801472,-4.800518,-8.721940,1.295637,-2.050176,-8.683917,-7.073882,-1.751849,-1.041715,-8.803728,-7.877399,9.096164,6.090533,-0.428502,7.606373,2.469421,-8.155494,-5.763546,6.924341,1.313329,0.269021,-6.935547,-0.698568,9.945353,5.592143,3.230707,-3.361232,-0.648942,2.135963,-1.793343,-4.037006,2.418122,-8.732465,0.314327,9.448641,1.594689,-6.642374,6.039327,-5.155396,-5.326367,-9.821553,0.911926,-4.317703,8.381032,4.840307,0.646540,9.084731,-5.153292,-6.724632,-7.818845,-2.488933,-2.124495,8.508966,-1.235359,3.548645,1.018947,-2.696166,-1.819718,-4.612621,1.302160,-8.182521,4.862343,1.420569,6.228051,8.800493,3.621709,8.235012,1.527085,7.754494,1.400066,-4.931679,1.991360,7.964294,2.802679,9.022267,6.376345,7.704465,7.155749,0.559583,-9.039187,-9.904251,-5.625683,-1.035331,-2.975091,0.604811,-0.798890,-4.213379,1.433438,8.805040,-9.356555,6.826531,-3.098083,-4.904955,8.775403,-9.189137,3.394490], dtype = "float64")#candidate|11991|(1056,)|const|float64
const_11992 = relay.const([5.343723,-8.709281,8.636942,-2.846640,-0.839832,3.489425,-8.774259,-3.381154,-8.753255,2.598309,-2.155660,-9.689040,-5.611177,-2.619614,7.053671,6.406080,7.794719,-6.565402,-2.858296,7.833339,-8.933317,4.228160,-0.201113,-2.139950,-4.958861,9.342555,-8.744117,-2.813282,0.631859,-7.124084,-6.469953,7.132258,6.859838,-5.246941,-7.806348,-7.322833,-0.002891,-7.949311,2.847344,9.973318,-5.164830,3.980590,-7.981245,2.067522,-6.888588,5.313804,-9.844595,-2.706708,-4.460923,3.924705,-3.156047,2.842293,1.724461,0.098361,-4.116651,0.736898,-4.174169,7.805677,-6.091887,-0.858834,-7.316785,4.733433,3.105952,5.050434,-0.104943,-7.436806,-1.800401,0.599409,3.134250,1.721501,-9.217971,-6.755831,1.865489,7.932675,9.499696,-3.457729,0.312974,-2.208411,2.686755,-5.383798,-5.808116,9.790195,-7.865891,8.108927,6.285463,7.617500,5.861818,-4.031877,3.772655,-1.625171,-1.874067,5.468246,-8.140973,-6.199102,5.041608,4.066607,5.540738,-6.133342,0.028847,-2.923972,-9.972772,-4.051561,7.765594,-9.473090,1.079216,0.393814,8.353461,2.282960,-2.810058,-7.145280,2.751711,-4.887390,-9.778608,-5.770137,-0.587006,-9.897044,4.153372,-9.725325,-9.407670,8.228392,6.024541,7.976033,2.275185,-0.996520,-6.271383,7.550217,-5.336875,-1.918240,3.642671,-0.346854,9.743568,-6.414478,-4.372824,-8.229612,-6.157131,-3.467311,-1.239328,-8.021197,-5.390980,-2.540846,9.764655,-4.546306,0.096664,-3.789664,-6.911960,-0.392932,-7.454088,-2.263144,2.010621,4.706674,-1.801692,9.723841,0.132155,7.899737,-9.220783,-2.180903,5.962440,0.985194,4.117304,9.236704,-5.266378,-1.549022,6.783210,7.322707,5.835916,-6.179254,-8.587597,-2.653130,5.237557,-8.148333,8.220321,-6.304160,2.035578,3.353176,3.713865,-7.318363], dtype = "float32")#candidate|11992|(176,)|const|float32
call_11988 = relay.TupleGetItem(func_11570_call(relay.reshape(var_11989.astype('bool'), [6, 840]), relay.reshape(const_11990.astype('float32'), [24, 1]), relay.reshape(const_11991.astype('float64'), [1056,]), relay.reshape(const_11992.astype('float32'), [176,]), ), 7)
call_11993 = relay.TupleGetItem(func_11575_call(relay.reshape(var_11989.astype('bool'), [6, 840]), relay.reshape(const_11990.astype('float32'), [24, 1]), relay.reshape(const_11991.astype('float64'), [1056,]), relay.reshape(const_11992.astype('float32'), [176,]), ), 7)
func_10526_call = mod.get_global_var('func_10526')
func_10534_call = mutated_mod.get_global_var('func_10534')
var_11995 = relay.var("var_11995", dtype = "uint64", shape = (1344,))#candidate|11995|(1344,)|var|uint64
const_11996 = relay.const([-4.763010,9.395474,4.777042,1.407053,5.574043,9.508460,-0.787428,-3.893430,9.747079,3.783701,-6.078999,3.790338,5.566233,1.960606,5.569483,-1.237738,3.228327,-6.015025,5.700126,-8.123402,-7.295343,6.492947,0.539075,-4.734322,3.470226,-0.522600,-4.441211,-1.431908,-0.101091,-0.656094,-8.085094,8.080998,-2.375573,-3.225015,-9.273164,6.316884,6.028356,0.768876,-6.963423,6.786656,1.162268,6.845525,4.725649,6.312210,0.731131,3.871531,-7.787135,7.853861,-5.098443,-5.668407,0.984343,-0.394535,4.789958,7.867956,8.133947,1.314150,-4.275293,-2.070381,-7.261006,9.350753,-3.924965,4.719827,-4.803607,4.283671,5.005711,0.158184,2.019417,2.888580,9.734337,-1.230969,9.053533,4.497842,-2.143685,4.654383,9.409868,-3.857811,-2.357651,-0.530921,1.295713,2.047679,-0.433487,5.049833,-0.598315,-8.403182,5.370818,-5.889439,-6.159366,-1.982231,-6.458867,7.420764,6.582231,1.289033,-7.795384,-9.936121,2.019806,-1.669989,-1.060164,-0.704691,-7.817367,-4.761686,1.342668,-7.599316,-1.067174,9.882587,-6.192730,-9.258857,-9.184965,7.694925,8.054233,-5.469420,-6.730056,-7.166522,-3.471721,2.471256,7.248117,-1.821975,8.425308,-4.460150,-1.839131,-2.966678,0.520562,-2.035739,-0.642866,-6.074075,8.664367,-8.992363,8.669129,-6.013348,3.112949,-5.491107,2.195060,-0.809054,5.178121,-6.650689,-3.330847,-3.025705,7.757263,6.980101,4.038646,2.667729,3.141213,-6.818978,1.102766], dtype = "float32")#candidate|11996|(143,)|const|float32
var_11997 = relay.var("var_11997", dtype = "float64", shape = (126,))#candidate|11997|(126,)|var|float64
const_11998 = relay.const([True,False,False,False,False,True,True,True,True,True,True,False,True,False,False,False,False,True,True,True,True,False,True,True,False,False,True,True,False,False,False,True,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False,False,True,False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,False,True,True,False,False,False,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,True,True,False,True,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,True,False,True,False,False,True,True,True,True,True,True,False,False,False,True,True,True,True,False,False,False,False,False,False,True,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,True,True,True,False,True,True,False,True,True,False,True,True,True,False,False,True,False,True,True,True,False,False,False,False,False,False,False,True,False,False,False,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,True,False,True,True,False,True,True,False,True,False,False,True,False,False,True,False,True,False,True,False,False,True,True,False,True,False,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,True,False,False,True,True,True,True,True,False,False,False,True,False,True,False,True,True,False,False,False,True,True,True,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,True,False,True,True,True,False,False,True,False,True,True,True,False,True,True,False,True,True,False,False,True,True,False,True,True,False,True,False,False,True,False,False,False,True,True,True,True,True,True,False,True,False,True,True,True,False,True,False,False,False,False,True,True,True,False,False,True,False,False,False,True,True,False,True,False,True,True,False,True,False,False,False,False,True,True,True,False,False,True,False,False,False,True,True,True,True,True,False,True,False,False,True,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False,False,False,True,False,False,False,False,False,False,True,True,True,False,True,False,False,True,True,True,True,False,False,True,False,False,False,False,False,False,True,False,False,True,True,False,True,False,True,True,False,False,True,True,True,False,False,True,True,True,False,True,False,False,False,False,True,True,False,True,True,True,False,True,False,True,True,False,True,False,True,True,True,False,True,False,False,True,True,False,False,False,True,False,False,True,True,True,False,True,True,True,True,True,False,True,False,False,True,False,False,True,True,True,True,False,True,False,True,True,False,False,True,True,False,True,False,True,True,True,True,False,False,False,True,True,True,True,True,True,True,True,False,True,True,True,True,False,True,True,True,True,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,True,True,False,False,True,False,False,False,True,False,True,True,True,False,True,True,True,True,True,True,True,False,False,False,False,False,True,True,False,True,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,False,True,True,False,False,False,True,True,False,False,True,False,True,False,False,True,True,False,False,False,False,False,True,False,False,True,True,True,False,True,True,True,False,True,True,False,True,False,True,False,False,True,False,False,True,True,True,False,True,True,False,True,True,True,True,True,False,False,False,True,True,False,False,True,True,True,False,False,True,True,False,False,False,True,False,False,False,True,False,True,False,True,False,True,False,True,False,True,False,False,False,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,True,True,True,True,False,True,False,False,False,True,False,False,False,False,True,False,True,True,False,False,True,True,True,True,True,False,True,False,True,True,False,False,False,False,True,True,True,False,True,False,True,True,False,True,True,True,True,True,True,True,True,False,False,True,True,True,True,False,True,False,True,False,False,False,False,True,True,True,True,False,True,False,False,False,True,True,True,False,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,False,True,True,True,True,True,True,False,False,False,True,True], dtype = "bool")#candidate|11998|(840,)|const|bool
const_11999 = relay.const(-4.499258, dtype = "float64")#candidate|11999|()|const|float64
const_12000 = relay.const([-6.298932,9.470779,7.410138,7.009615,-0.231209,-2.391909,-7.548055,-2.682549,5.720538,3.721805,0.587492,2.769019,-1.121885,8.477486,-1.865083,-8.390092,-9.782047,3.670331,2.762962,4.496270,-2.457035,-8.374641,3.286929,7.913171,-6.151921,1.200702,-7.066063,-4.040934,-7.881888,-1.781358,-7.509741,7.754242,9.233100,-0.783847,-3.577197,-3.609809,-6.949417,5.807879,5.677245,-9.470838,9.120350,7.318318,-1.443299,-1.639932,5.574678,2.371874,7.606168,-3.562854,-5.061915,-9.923727,5.677935,0.772939,0.516914,3.735430,1.980988,7.958922,4.462289,5.339711,-5.551364,0.186124,-0.568817,-7.391461,0.335258,-1.776447,9.522051,-4.565772,1.734084,-4.699027,-4.247014,3.879568,-8.507187,-8.746233,-4.938657,3.080234,1.661232,-1.547556,-8.286295,-1.568173,-6.607220,1.595642,1.047075,-9.538104,7.400949,2.313180,-9.851787,-4.708645,6.137564,9.959093,-7.028164,1.066083,1.403193,1.742548,-3.723096,5.699384,3.948643,-6.376488,3.064901,6.535797,-9.038122,-9.998270,-3.685669,6.430624,-6.064893,0.554935,2.273850,-6.497718,-6.526375,-0.489115,5.917120,2.433095,-5.249468,2.133390,-2.019698,0.085255,-0.484567,-6.648524,-7.924494,-6.754432,-4.245432,0.747834,-6.320317,-8.288665,8.377700,9.229158,-8.981675,8.305822,4.698995,-7.241795,-3.501650,-3.718016,-5.116512,8.056506,-8.337028,2.075894,7.152254,-6.381242,-5.315612,-0.747131,-6.668358,9.331239,5.320192,6.783122,1.815497,-9.275987,6.978725,-1.695839,4.152223,-6.199652,-2.874084,-2.683428,-2.854976,9.043899,0.524500,9.209309,-4.603016,8.461758,8.404456,-4.560673,-8.611453,-2.710839,5.088296,0.744594], dtype = "float32")#candidate|12000|(162,)|const|float32
call_11994 = relay.TupleGetItem(func_10526_call(relay.reshape(var_11995.astype('uint64'), [1344,]), relay.reshape(const_11996.astype('float32'), [143, 1]), relay.reshape(var_11997.astype('float64'), [1, 126]), relay.reshape(const_11998.astype('bool'), [6, 140]), relay.reshape(const_11999.astype('float64'), []), relay.reshape(const_12000.astype('float32'), [162,]), ), 4)
call_12001 = relay.TupleGetItem(func_10534_call(relay.reshape(var_11995.astype('uint64'), [1344,]), relay.reshape(const_11996.astype('float32'), [143, 1]), relay.reshape(var_11997.astype('float64'), [1, 126]), relay.reshape(const_11998.astype('bool'), [6, 140]), relay.reshape(const_11999.astype('float64'), []), relay.reshape(const_12000.astype('float32'), [162,]), ), 4)
func_7937_call = mod.get_global_var('func_7937')
func_7943_call = mutated_mod.get_global_var('func_7943')
var_12004 = relay.var("var_12004", dtype = "uint16", shape = (240,))#candidate|12004|(240,)|var|uint16
const_12005 = relay.const([3,8,8,-8,-4,-3,-1,-3,-4,2,6,-2,6,8,5,-6,9,-8,3,-9,-9,9,-7,2,1,-3,-4,6,5,10,3,2,1,10,6,-1,4,-4,4,-2,2,4,10,-5,-3,-9,-2,-10,-9,-9,2,9,-1,6,-10,2,6,9,-5,-3,1,5,-10,-8,-5,-5,8,2,-8,-9,-9,-10,7,2,-4,-10,-6,-10,-10,-9,-7,4,10,-7,4,-5,-8,-9,4,7,-6,-3,-4,3,1,-10,6,-6,-10,5,10,9,6,-3,7,10,-6,8,-8,-3,2,-9,-7,-7,9,-1,1,-7,5,-7,9,-8,2,7,8,9,5,-10,-5,7,6,-1,5,-4,-7,5,-10,-2,-10,2,-1,7,1,6,4,-9,1,-9,-9,9,6,3,8,2,-4,-7,7,9,-3,5,-8,10,-4,8,-4,9,-2,7,8,9,4,-7,9,-9,2,-2,8,-2,10,6,-8,3,-7,-1,2,7,5,6,-1,-6,1,-3,-9,1,-4,5,-4,-1,1,-8,-1,6,10,-10,9,3,-6,-10,1,8,10,9,-10,-9,-4,1,-5,-1,-2,-5,7,-2,-4,1,4,3,1,-2,-4,-3,9,4,-2,8,-6,-5,-2,-7,9,-4,-5,9,-10,-8,-1,3,-4,3,-1,-2,-5,-1,5,-5,-6,-7,7,1,-6,-4,-10,8,-5,2,3,5,2,-5,4,1,-1,4,-4,-5,-4,9,5,7,-8,6,-6,9,6,7,6,-1,6,-4,10,1,10,7,-9,5,-7,1,3,3,6,1,-8,10,10,4,-5,4,-9,1,7,-7,9,10,-8,3,-3,-9,-9,-6,-4,8,7,5,5,4,-3,8,9,-6,-1,4,-5,6,3,-4,-2,8,-4,-7,-10,3,-4,-5,-1,1,-4,-5,-9,5,-2,-10,-1,4,-3,8,-4,7,4,-10,-7,-6,-9,9,3,-1,-5,9,-1,-5,4,8,-4,5,-8,-2,9,5,-8,-7,10,-6,-8,3,8,4,1,1,6,1,4,-1,1,2,-10,-2,6,7,5,-5,-10,-6,-10,6,4,4,-1,2,8,-1,2,3,3,1,-2,10,5,4,-2,5,-8,-7,-1,10,4,2,-7,3,-4,8,3,1,2,5,-6,4,-9,-2,10,2,5,10,-8,4,1,2,-7,-4,-8,7,-1,-7,-9,-3,-3,5,-10,2,9,-3,-5,6,6,5,1,10,-2,-4,-8,-2,-1,-8,1,10,3,10,-8,4,-8,-10,8,3,-6,2,4,-4,-8,-10,4,9,-5,7,-7,7,-7,-6,-6,-6,-6,6,-2,-8,5,-9,8,-6,9,6,4,3,10,-10,-8,9,-5,-5,5,7,-1,-9,-6,-2,8,-1,1,6,3,6,-2,-5,-9,-6,-4,-6,-9,4,10,2,-5,-10,7,8,2,1,-10,-1,-5,-5,9,-5,-6,6,8,4,3,10,2,1,-1,-7,7,1,-6,4,-8,6,10,2,1,1,-1,-3,-8,-6,5,9,-3,5,-7,-5,-7,-2,2,-5,1,-5,7,-7,2,-4,-9,8,-5,3,3,-8,-6,9,6,3,10,-2,-7,9,-4,-4,-6,-7,9,-3,-6,5,3,4,-6,9,-4,-10,-7,10,-2,4,-9,8,-1,-10,-4,-10,9,-8,-10,10,7,-5,-10,8,1,9,3,8,8,10,5,1,-4,8,6,-8,-7,-7,-9,-9,7,10,5,5,-10,-5,8,8,5,-6,3,5,-8,-8,-7,9,7,5,9,-5,-8,-3,-8,-8,4,-5,-9,-6,-3,6,-1,4,-4,10,-1,-2,9,5,4,-10,7,-5,8,-3,-6,-10,6,7,-7,5,5,-6,3,-2,5,7,-9,-6,6,9,10,10,-5,8,-5,-9,2,-5,-9,4,-10,5,3,-8,3,-10,-7,1,-9,-4,-3,7,10,-8,10,2,3,9,1,5,-5,6,-7,-1,-5,-1,8,2,1,-9,-4,-10,10,-4,-7,2,-4,-3,5,-7,1,-7,-5,8,-2,6,-8,2,-6,-9,-5,-4,-9,-10,-2,-3,5,3,2,6,8,10,8,6,-10,6,3,-4,8,-5,3,3,-9,-9,-10,4,9,-6,6,1,-4,-1,7,-9,1,5,-3,3,-7,-4,-7,4,2,3,1,-4,-10,-2,-2,2,-7,9,-7,4,5,2,-6,-8,-8,8,6,2,9,-3,-7,6,1,-3,-6,-4,-5,-2,7,-1,4,4,-3,6,-2,-5,-3,2,4,4,-2,-2,-9,10,-6,-10,-2,10,1,-9,6,-4,5,-5,-1,1,-9,2,9,1,5,-10,4,-4,8,1,-9,3,1,5,6,5,10,3,-9,9,-6,3,-8,6,-2,2,-10,-7,4,2,9,5,-7,3,3,-4,-10,8,3,6,10,9,4,2,-10,-7,-4,-10,-1,10,4,2,8,4,1,-1,9,-3,-7,-10,-9,-8,1,7,9,-7,-9,7,-8,-3,10,-2,-5,3,-9,-1,-1,-3,-4,-8,6,-6,-6,-6,-1,-5,-2,-1,1,-1,8,-1,10,3,4,9,-9,-7,-7,7,-10,10,-1,-1,6,5,3,-2,9,8,-9,3,1,10,3,-5,-2,-6,-7,-7,10,-4,-5,-5,6,-8,-2,10,3,1,-1,-8,1,-8,-3,-1,5,6,-6,6,6,-4,7,2,-7,-5,-9,-1,-8,-1,4,-6,1,-2,-4,-6,4,-1,-7,-2,-5,-3,7,7,5,-8,1,-1,-7,7,3,6,-7,-10,-1,9,7,-2,-7,2,6,4,-8,-10,-8,-8,2,8,-10,-4,-9,7,-6,-4,8,9,-8,1,-8,2,-10,4,-2,-3,-1,3,1,-9,9,-2,-9,-10,3,-4,-4,4,-7,-6,-3,3,-6,-7,8,-6,9,-3,8,-5,5,-10,6,-3,-6,-3,-9,-6,-5,-4,9,10,-7,-4,6,-5,-1,-2,-1,-3,5,8,2,-9,-5,10,2,-1,4,-3,9,5,-3,8,-1,10,6,-10,-2,-5,-9,-2,-6,-1,10,-5,1,8,7,7,8,-6,7,-3,2,-5,-7,-3,10,5,7,9,-10,-2,-5,-4,8,7,5,-4,10,-9,8,1,-5,8,-8,10,5,4,-10,-5,8,6,2,10,1,2,-1,-7,-1,8,3,-7,9,2,-10,10,9,-3,5,-6,3,6,-10,10,-10,-1,8,3,7,-9,-2,-7,4,-3,-5,7,-6,-2,8,8,-2,-10,4,8,-1,-2,-5,-6,-9,9,-10,2,1,-4,7,6,-2,-2,2,-2,8,-7,-1,1,4,5,-8,3,2,10,-3,3,-5,-2,6,7,5,6,-9,-9,-10,-8,-3,10,10,7,8,-7,-6,7,4,-5,-10,-7,9,-1,-10,7,-9,1,9,-3,9,-8,-2,6,-3,-4,-3,3,9,-2,2,-4,-6,-2,-4,-2,8,7,-8,-3,5,5,2,-9,9,-2,1,-6,3,-4,5,-10,-7,-3,2,-6,-5,5,7,8,5,1,-6,-3,-4,-5,-2,-4,-6,3,-2,4,-10,-7,-3,4,-7,-2,-1,3,3,-6,5,-3,4,-8,7,-8,-1,3,-3,1,-2,-4,-9,8,-5,6,-2,-10,7,7,-1,10,-9,5,-7,-2,1,-2,3,4,-2,-9,-1,3,8,-3,-4,-1,3,-6,4,1,-8,-8,3,-10,-4,1,9,-5,-5,-5,1,-5,2,7,3,-1,-3,1,-1,-2,9,10,1,-4,4,-7,-5,-1,6,-5,8,-10,-5,6,2,-10,-3,-9,-6,1,6,6,4,10,-5,-9,-1,1,-9,-3,-7,2,-3,-4,-5,10,-7,-3,-4,-1,10,-10,-10,-6,-10,-10,1,-8,-4,-3,1,2,-2,9,2,4,9,-10,7,-9,-6,-7,-2,1,-9,-7,-10,8,-8,7,-4,-9,-7,3,-8,2,-1,10,3,-1,10,3,-9,-3,8,6,-2,-7,5,-2,10,6,4,5,1,-2,-6,-10,-7,-3,-4,-7,5,5,3,2,3,5,5,-5,-9,-7,3,1,2,-5,4,-5,5,6,9,-1,7,-2,-9,-9,5,3,-5,5,8,-8,-1,1,4,6,-7,-8,7,9,6,-4,5,-8,-4,10,5,4,10,4,3,9,-8,-6,-6,3,-2,4,6,8,7,10,5,-7,-9,8,10,-4,4,-5,3,-6,-5,-2,4,-1,-7,2,6,6,-10,-9,-2,1,3,6,-6,-2,-5,-3,4,10,4,-5,1,8,-6,4,-2,-1,2,2,4,-10,8,-7,-5,8,-1,2,4,3,-6,7,-3,2,10,3,6,2,-7,10,6,-3,-1,-8,4,-7,10,8,-4,9,2,7,-5,6,8,6,-4,-2,6,1,3,2,-4,9,9,-4,-1,-3,-2,10,4,5,-7,-4,6,4,-5,-7,7,7,-5,8,-5,-2,-9,6,-10,-3,7,1,3,5,2,-5,7,4,6,-7,5,8,4,9,-5,3,10,-7,9,-8,-3,9,-8,1,-5,5,-8,5,-6,-5,7,-5,4,-7,-6,-6,-10,9,8,-10,-6,4,-7,-3,-3,6,-10,4,-4,9,-6,7,1,-3,-3,3,-9,3,-8,-1,-7,-1,-7,-1,6,9,4,-9,3,4,-7,5,-8,4,-5,8,-1,8,-4,6,-8,5,4,-9,-7,3,3,-4,8,-8,-4,-6,-5,-10,5,2,-5,-9,10,4,-2,3,-6,-6,-6,7,3,2,10,-9,-2,-2,6,7,-9,5,-9,5,-7,8,-7,3,10,8,-1,-7,-7,-1,-8,1,1,-9,8,4,6,1,6,-3,-1,-6,-9,-9,-2,1,1,9,2,10,1,5,5,3,2,-10,9,9,-1,-6,9,4,1,-9,9,-3,1,-10,-6,10,10,-2,7,1,-8,-10,-6,4,-6,-10,-2,9,-1,-2,3,4,1,4,-7,-8,2,1,-2,5,8,5,8,-3,-5,7,-6,-3,9,7,-2,1,2,-4,-7,-2,-4,-2,3,5,-10,-5,-5,7,6,2,-10,-6,4,-7,-8,-5,8,-7,5,-10,-4,3,-3,-5,-6,-1,-9,7,6,4,4,6,-9,4,3,-8,9,6,4,5,8,6,-4,3,-8,-3,8,-6,-2,-10,-4,-4,4,9,3,9,1,-1,8,-6,-2,-9,-10,-9,5,9,-10,6,-5,3,8,-9,7,3,-5,2,-8,10,-5,-10,8,4,2,-3,5,-5,8,-2,-4,-10,6,6,10,1,5,-10,3,-1,1,2,-2,9,-10,4,-7,-5,-6,-6,9,4,3,4,-7,2,3,-6,-2,-4,5,8,-4,-7,-6,-7,-2,-6,4,-2,-9,10,8,-6,10,-3,-9,1,6,4,-10,-8,1,-9,7,7,-6,7,-3,-6,-4,10,-2,9,-8,3,-3,10,4,-10,-3,-7,3,6,-9,-1,-3,-8,-3,-4,-1,6,-7,-7,-8,-4,-3,-3,-6,-4,-1,-10,5,9,7,8,-2,2,-3,-2,8,-3,10,-9,6,3,-8,2,-3,3,6,-7,-6,-10,8,9,2,8,9,-10,1,-2,8,-4,7,-2,1,-3,-10,5,7,-5,7,10,-9,10,-4,10,-8,-5,-4,-8,-8,-1,4,-6,9,1,-5,1,-3,-5,-5,1,9,-6,4,-7,5,-9,-1,3,8,-5,8,6,-7,10,-6,-5,8,-8,-7,5,3,2,-2,-4,-10,-3,5,10,10,3,-3,-1,-2,-7,3,1,-7,10,2,10,-2,-10,2,-8,10,-10,-2,7,-9,-2,-6,6,10,3,-9,3,5,8,-3,-2,10,7,-3,5,-1,-4,-2,10,-6,3,3,-9,-7,-8,7,-5,-3,8,-9,8,10,6,-2,-3,7,-6,-9,-3,-5,-9,10,-9,6,-1,-8,4,-2,-9,7,5,-5,-8,-9,1,9,-6,3,6,-1,-4,-7,-9,9,5,8,-1,2,-9,8,5,-9,-10,4,-2,4,-4,-4,-2,-10,8,7,-3,1,-10,-2,-8,-3,5,-6,-4,3,-1,-2,-10,10,-10,-9,7,-5,-9,-1,-1,-7,4,3,6,-8,1,-2,2,-10,8,-7,9,10,-10,5,7,-8,-9,-1,-7,4,8,-10,5,-3,7,-7,-2,4,-10,-3,-3,2,-10,-9,-1,-4,6,-7,3,-3,8,7,-9,-1,-10,-7,-3,-6,-9,1,-5,-9,10,1,8,4,-6,-7,9,-5,2,3,9,10,4,2,-8,-2,8,2,9,-3,6,-1,8,6,-8,-5,10,-6,9,-6,8,-7,-1,-4,4,7,-5,-5,-6,1,1,10,-3,6,6,-1,9,-3,-5,-1,2,9,8,-10,-4,-8,-9,6,7,-8,-5,-7,6,-5,7,-2,-5,6,-4,8,9,2,-4,-4,2,4,-10,4,-1,9,-4,-6,-3,-2,1,4,8,8,6,-3,-5,-8,7,2,-8,5,5,2,-6,-4,6,4,4,6,-5,8,7,6,-5,-2,-1,-8,-10,2,-7,-2,-4,7,-10,10,3,7,4,-3,-2,-6,6,9,4,-4,8,6,-2,-2,7,8,-1,-9,8,6,9,-3,5,10,3,-2,10,7,-10,-4,2,-6,-7,-8,9,5,3,2,9,-7,8,5,7,1,2,4,-7,5,-7,9,6,-5,-3,8,1,-4,5,10,-3,9,6,9,4,-7,8,9,1,2,-1,6,6,-2,1,-4,2,-10,-7,-2,-5,-3,5,7,-6,-10,1,-8,3,-9,3,-1,-7,3,-1,4,-2,-9,7,-2,4,9,-5,-2,8,-7,5,5,-8,-3,-3,-5,3,1,9,-4,-7,-10,-9,-5,6,-9,-7,-2,-3,3,3,1,1,8,7,-5,-3,9,7,-1,3,3,-4,-6,-3,3,9,2,7,-2,-1,1,1,-8,-5,3,-8,-9,-3,-1,5,2,7,-6,5,-1,4,-10,3,5,-8,-7,7,1,10,-6,-8,-1,-4,1,4,6,3,2,6,5,8,-2,-7,-4,-7,-4,-1,-1,-1,-6,4,2,2,7,-3,-3,4,5,10,-8,10,-5,-8,-7,9,-1,-7,-2,9,6,2,5,7,-7,7,-8,-9,7,-9,6,8,-3,-2,-4,6,5,1,6,-7,-5,-10,1,-5,-7,-3,-2,-2,-5,-10,5,7,6,9,-6,-4,-5,5,4,-6,-6,-5,9,-5,-2,-1,3,-9,8,10,8,-6,-8,9,-4,-4,4,-1,7,-7,-3,7,10,6,6,3,-9,7,1,9,10,8,-3,7,6,-10,-6,-8,5,-4,1,-6,-8,10,-6,-7,-4,-10,-5,-8,3,-4,7,5,8,-4,9,-1,-3,-8,-10,5,1,1,-4,-1,-7,6,-8,9,-10,-5,4,-8,7,-6,-3,10,-8,-2,-10,-9,-7,-4,-6,1,5,-9,-1,6,2,-6,-6,-9,-7,-9,1,5,-5,-10,-1,8,-6,7,-3,7,6,10,-10,-8,-9,4,-5,7,2,-2,8,-9,9,4,-8,7,4,7,6,1,-2,-5,-7,-6,10,2,-8,-4,8,8,3,-3,3,-3,5,6,2,-4,-4,8,10,3,4,4,-7,9,10,-9,9,-3,5,-2,1,-7,-6,-8,-6,4,-8,1,5,-5,9,-7,5,5,-1,8,2,-6,10,-7,-3,-6,1,6,7,-10,-7,-7,7,4,-8,10,6,10,-8,-4,-10,-3,8,-7,-3,1,4,-4,-1,-8,1,-1,-4,4,-10,6,-9,-2,-8,-1,-8,3,-2,2,3,4,-2,10,-8,9,-3,9,-3,8,-10,4,-3,9,-2,-9,-2,1,-8,9,7,5,6,1,-4,3,-10,-1,2,8,-10,-10,-2,8,4,-7,7,9,7,-3,1,-5,2,3,6,1,2,8,-4,5,4,-7,5,6,-7,3,6,-8,3,-6,7,-5,-9,-3,1,-9,10,-8,3,7,7,-8,7,3,9,9,7,5,8,6,-5,-4,2,-2,-10,-3,-8,-1,-8,4,-6,-1,6,-6,3,-6,1,-5,-4,6,-5,-2,-1,-9,7,-6,6,-5,-5,-9,-7,9,4,8,3,5,-6,-3,10,-8,5,10,-3,-4,-8,-9,7,-10,1,1,6,2,-1,-1,-6,9,-4,3,-6,8,-9,8,2,-6,-9,-9,-3,7,7,-8,-10,4,-6,1,-3,7,-5,-9,4,-2,-4,-8,-1,4,6,10,-7,-9,-1,-6,-1,-8,7,-3,-5,-3,-5,8,7,-1,2,-8,8,-3,-8,-5,1,3,-3,8,-1,-6,4,-2,6,6,7,-8,-1,-3,-1,8], dtype = "uint16")#candidate|12005|(3120,)|const|uint16
var_12006 = relay.var("var_12006", dtype = "float64", shape = (480,))#candidate|12006|(480,)|var|float64
call_12003 = relay.TupleGetItem(func_7937_call(relay.reshape(var_12004.astype('uint16'), [16, 15, 1]), relay.reshape(const_12005.astype('uint16'), [16, 15, 13]), relay.reshape(const_11999.astype('float64'), []), relay.reshape(var_12006.astype('float64'), [480,]), ), 2)
call_12007 = relay.TupleGetItem(func_7943_call(relay.reshape(var_12004.astype('uint16'), [16, 15, 1]), relay.reshape(const_12005.astype('uint16'), [16, 15, 13]), relay.reshape(const_11999.astype('float64'), []), relay.reshape(var_12006.astype('float64'), [480,]), ), 2)
func_9889_call = mod.get_global_var('func_9889')
func_9891_call = mutated_mod.get_global_var('func_9891')
call_12014 = func_9889_call()
call_12015 = func_9889_call()
func_11133_call = mod.get_global_var('func_11133')
func_11135_call = mutated_mod.get_global_var('func_11135')
call_12016 = relay.TupleGetItem(func_11133_call(relay.reshape(call_11983.astype('float32'), [11, 6, 7])), 0)
call_12017 = relay.TupleGetItem(func_11135_call(relay.reshape(call_11983.astype('float32'), [11, 6, 7])), 0)
uop_12018 = relay.atanh(call_11988.astype('float32')) # shape=(6, 840)
uop_12020 = relay.atanh(call_11993.astype('float32')) # shape=(6, 840)
output = relay.Tuple([call_11983,var_11989,const_11990,const_11991,const_11992,call_11994,var_11995,const_11996,var_11997,const_11998,const_11999,const_12000,call_12003,var_12004,const_12005,var_12006,call_12014,call_12016,uop_12018,])
output2 = relay.Tuple([call_11984,var_11989,const_11990,const_11991,const_11992,call_12001,var_11995,const_11996,var_11997,const_11998,const_11999,const_12000,call_12007,var_12004,const_12005,var_12006,call_12015,call_12017,uop_12020,])
func_12026 = relay.Function([var_11989,var_11995,var_11997,var_12004,var_12006,], output)
mod['func_12026'] = func_12026
mod = relay.transform.InferType()(mod)
mutated_mod['func_12026'] = func_12026
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12026_call = mutated_mod.get_global_var('func_12026')
var_12028 = relay.var("var_12028", dtype = "bool", shape = (5040,))#candidate|12028|(5040,)|var|bool
var_12029 = relay.var("var_12029", dtype = "uint64", shape = (1344,))#candidate|12029|(1344,)|var|uint64
var_12030 = relay.var("var_12030", dtype = "float64", shape = (126,))#candidate|12030|(126,)|var|float64
var_12031 = relay.var("var_12031", dtype = "uint16", shape = (240,))#candidate|12031|(240,)|var|uint16
var_12032 = relay.var("var_12032", dtype = "float64", shape = (480,))#candidate|12032|(480,)|var|float64
call_12027 = func_12026_call(var_12028,var_12029,var_12030,var_12031,var_12032,)
output = call_12027
func_12033 = relay.Function([var_12028,var_12029,var_12030,var_12031,var_12032,], output)
mutated_mod['func_12033'] = func_12033
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10108_call = mod.get_global_var('func_10108')
func_10109_call = mutated_mod.get_global_var('func_10109')
call_12039 = relay.TupleGetItem(func_10108_call(), 0)
call_12040 = relay.TupleGetItem(func_10109_call(), 0)
output = call_12039
output2 = call_12040
func_12042 = relay.Function([], output)
mod['func_12042'] = func_12042
mod = relay.transform.InferType()(mod)
mutated_mod['func_12042'] = func_12042
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12042_call = mutated_mod.get_global_var('func_12042')
call_12043 = func_12042_call()
output = call_12043
func_12044 = relay.Function([], output)
mutated_mod['func_12044'] = func_12044
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8714_call = mod.get_global_var('func_8714')
func_8716_call = mutated_mod.get_global_var('func_8716')
call_12089 = relay.TupleGetItem(func_8714_call(), 3)
call_12090 = relay.TupleGetItem(func_8716_call(), 3)
uop_12093 = relay.log10(call_12089.astype('float32')) # shape=(462,)
uop_12095 = relay.log10(call_12090.astype('float32')) # shape=(462,)
output = uop_12093
output2 = uop_12095
func_12097 = relay.Function([], output)
mod['func_12097'] = func_12097
mod = relay.transform.InferType()(mod)
mutated_mod['func_12097'] = func_12097
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12097_call = mutated_mod.get_global_var('func_12097')
call_12098 = func_12097_call()
output = call_12098
func_12099 = relay.Function([], output)
mutated_mod['func_12099'] = func_12099
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11199_call = mod.get_global_var('func_11199')
func_11200_call = mutated_mod.get_global_var('func_11200')
call_12128 = relay.TupleGetItem(func_11199_call(), 0)
call_12129 = relay.TupleGetItem(func_11200_call(), 0)
output = relay.Tuple([call_12128,])
output2 = relay.Tuple([call_12129,])
func_12146 = relay.Function([], output)
mod['func_12146'] = func_12146
mod = relay.transform.InferType()(mod)
output = func_12146()
func_12147 = relay.Function([], output)
mutated_mod['func_12147'] = func_12147
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11199_call = mod.get_global_var('func_11199')
func_11200_call = mutated_mod.get_global_var('func_11200')
call_12151 = relay.TupleGetItem(func_11199_call(), 0)
call_12152 = relay.TupleGetItem(func_11200_call(), 0)
uop_12168 = relay.sinh(call_12151.astype('float64')) # shape=(15, 5, 1)
uop_12170 = relay.sinh(call_12152.astype('float64')) # shape=(15, 5, 1)
bop_12176 = relay.power(call_12151.astype('float32'), relay.reshape(uop_12168.astype('float32'), relay.shape_of(call_12151))) # shape=(15, 5, 1)
bop_12179 = relay.power(call_12152.astype('float32'), relay.reshape(uop_12170.astype('float32'), relay.shape_of(call_12152))) # shape=(15, 5, 1)
output = bop_12176
output2 = bop_12179
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()()
res3 = intrp3.evaluate()()
res4 = intrp4.evaluate()()
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()()
res7 = intrp7.evaluate()()
res8 = intrp8.evaluate()()
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()()
res11 = intrp11.evaluate()()
res12 = intrp12.evaluate()()
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()()
res15 = intrp15.evaluate()()
res16 = intrp16.evaluate()()
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()()
res19 = intrp19.evaluate()()
res20 = intrp20.evaluate()()
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()()
res23 = intrp23.evaluate()()
res24 = intrp24.evaluate()()
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''83: TVMFuncCall
82: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
81: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
80: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
79: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
78: tvm::transform::Pass::operator()(tvm::IRModule) const
77: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
76: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
75: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
74: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
73: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
72: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
71: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
70: tvm::transform::Pass::operator()(tvm::IRModule) const
69: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
68: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
67: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
66: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
65: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
64: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
63: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
62: _ZN3tvm5relay16MixedModeMutato
61: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
60: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
59: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
58: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
57: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
56: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
55: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
54: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
53: _ZN3tvm5relay16MixedModeMutato
52: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
51: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
50: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
49: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
48: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
46: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''